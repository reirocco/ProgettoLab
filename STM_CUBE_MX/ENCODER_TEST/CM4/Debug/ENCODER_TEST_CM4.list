
ENCODER_TEST_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000259c  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08102834  08102834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081028b8  081028b8  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081028bc  081028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  10000000  081028c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000114  10000074  08102934  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000188  08102934  00020188  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015597  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000021ad  00000000  00000000  0003563b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000fb8  00000000  00000000  000377e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ef0  00000000  00000000  000387a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003af11  00000000  00000000  00039690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012bc1  00000000  00000000  000745a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00188c44  00000000  00000000  00087162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0020fda6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000048e0  00000000  00000000  0020fdf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000074 	.word	0x10000074
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810281c 	.word	0x0810281c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000078 	.word	0x10000078
 81002d4:	0810281c 	.word	0x0810281c

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b1f      	ldr	r3, [pc, #124]	; (810038c <main+0x84>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a1d      	ldr	r2, [pc, #116]	; (810038c <main+0x84>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b1b      	ldr	r3, [pc, #108]	; (810038c <main+0x84>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f000 fdcd 	bl	8100ecc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f000 fe57 	bl	8100fe4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f000 fdd8 	bl	8100ef0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b13      	ldr	r3, [pc, #76]	; (8100390 <main+0x88>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b11      	ldr	r3, [pc, #68]	; (8100394 <main+0x8c>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a0f      	ldr	r2, [pc, #60]	; (8100394 <main+0x8c>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b0c      	ldr	r3, [pc, #48]	; (8100394 <main+0x8c>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a0b      	ldr	r2, [pc, #44]	; (8100394 <main+0x8c>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequeance_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 fa24 	bl	81007bc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100374:	f000 f86e 	bl	8100454 <MX_GPIO_Init>
  MX_TIM1_Init();
 8100378:	f000 f812 	bl	81003a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_1);
 810037c:	2100      	movs	r1, #0
 810037e:	4806      	ldr	r0, [pc, #24]	; (8100398 <main+0x90>)
 8100380:	f001 f85e 	bl	8101440 <HAL_TIM_Encoder_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("ciao\r\n");
 8100384:	4805      	ldr	r0, [pc, #20]	; (810039c <main+0x94>)
 8100386:	f001 fdb9 	bl	8101efc <puts>
  {
 810038a:	e7fb      	b.n	8100384 <main+0x7c>
 810038c:	58024400 	.word	0x58024400
 8100390:	e000ed00 	.word	0xe000ed00
 8100394:	58026400 	.word	0x58026400
 8100398:	10000090 	.word	0x10000090
 810039c:	08102834 	.word	0x08102834

081003a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81003a0:	b580      	push	{r7, lr}
 81003a2:	b08c      	sub	sp, #48	; 0x30
 81003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81003a6:	f107 030c 	add.w	r3, r7, #12
 81003aa:	2224      	movs	r2, #36	; 0x24
 81003ac:	2100      	movs	r1, #0
 81003ae:	4618      	mov	r0, r3
 81003b0:	f001 fd2e 	bl	8101e10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81003b4:	463b      	mov	r3, r7
 81003b6:	2200      	movs	r2, #0
 81003b8:	601a      	str	r2, [r3, #0]
 81003ba:	605a      	str	r2, [r3, #4]
 81003bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81003be:	4b23      	ldr	r3, [pc, #140]	; (810044c <MX_TIM1_Init+0xac>)
 81003c0:	4a23      	ldr	r2, [pc, #140]	; (8100450 <MX_TIM1_Init+0xb0>)
 81003c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 81003c4:	4b21      	ldr	r3, [pc, #132]	; (810044c <MX_TIM1_Init+0xac>)
 81003c6:	2200      	movs	r2, #0
 81003c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81003ca:	4b20      	ldr	r3, [pc, #128]	; (810044c <MX_TIM1_Init+0xac>)
 81003cc:	2200      	movs	r2, #0
 81003ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64;
 81003d0:	4b1e      	ldr	r3, [pc, #120]	; (810044c <MX_TIM1_Init+0xac>)
 81003d2:	2240      	movs	r2, #64	; 0x40
 81003d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81003d6:	4b1d      	ldr	r3, [pc, #116]	; (810044c <MX_TIM1_Init+0xac>)
 81003d8:	2200      	movs	r2, #0
 81003da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81003dc:	4b1b      	ldr	r3, [pc, #108]	; (810044c <MX_TIM1_Init+0xac>)
 81003de:	2200      	movs	r2, #0
 81003e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81003e2:	4b1a      	ldr	r3, [pc, #104]	; (810044c <MX_TIM1_Init+0xac>)
 81003e4:	2200      	movs	r2, #0
 81003e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 81003e8:	2301      	movs	r3, #1
 81003ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81003ec:	2300      	movs	r3, #0
 81003ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81003f0:	2301      	movs	r3, #1
 81003f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 81003f4:	2300      	movs	r3, #0
 81003f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 81003f8:	2300      	movs	r3, #0
 81003fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 81003fc:	2300      	movs	r3, #0
 81003fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8100400:	2301      	movs	r3, #1
 8100402:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8100404:	2300      	movs	r3, #0
 8100406:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8100408:	2300      	movs	r3, #0
 810040a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 810040c:	f107 030c 	add.w	r3, r7, #12
 8100410:	4619      	mov	r1, r3
 8100412:	480e      	ldr	r0, [pc, #56]	; (810044c <MX_TIM1_Init+0xac>)
 8100414:	f000 ff6e 	bl	81012f4 <HAL_TIM_Encoder_Init>
 8100418:	4603      	mov	r3, r0
 810041a:	2b00      	cmp	r3, #0
 810041c:	d001      	beq.n	8100422 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 810041e:	f000 f859 	bl	81004d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100422:	2300      	movs	r3, #0
 8100424:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8100426:	2300      	movs	r3, #0
 8100428:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810042a:	2300      	movs	r3, #0
 810042c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 810042e:	463b      	mov	r3, r7
 8100430:	4619      	mov	r1, r3
 8100432:	4806      	ldr	r0, [pc, #24]	; (810044c <MX_TIM1_Init+0xac>)
 8100434:	f001 faba 	bl	81019ac <HAL_TIMEx_MasterConfigSynchronization>
 8100438:	4603      	mov	r3, r0
 810043a:	2b00      	cmp	r3, #0
 810043c:	d001      	beq.n	8100442 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 810043e:	f000 f849 	bl	81004d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8100442:	bf00      	nop
 8100444:	3730      	adds	r7, #48	; 0x30
 8100446:	46bd      	mov	sp, r7
 8100448:	bd80      	pop	{r7, pc}
 810044a:	bf00      	nop
 810044c:	10000090 	.word	0x10000090
 8100450:	40010000 	.word	0x40010000

08100454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100454:	b480      	push	{r7}
 8100456:	b083      	sub	sp, #12
 8100458:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810045a:	4b0a      	ldr	r3, [pc, #40]	; (8100484 <MX_GPIO_Init+0x30>)
 810045c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100460:	4a08      	ldr	r2, [pc, #32]	; (8100484 <MX_GPIO_Init+0x30>)
 8100462:	f043 0310 	orr.w	r3, r3, #16
 8100466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810046a:	4b06      	ldr	r3, [pc, #24]	; (8100484 <MX_GPIO_Init+0x30>)
 810046c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100470:	f003 0310 	and.w	r3, r3, #16
 8100474:	607b      	str	r3, [r7, #4]
 8100476:	687b      	ldr	r3, [r7, #4]

}
 8100478:	bf00      	nop
 810047a:	370c      	adds	r7, #12
 810047c:	46bd      	mov	sp, r7
 810047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100482:	4770      	bx	lr
 8100484:	58024400 	.word	0x58024400

08100488 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8100488:	b580      	push	{r7, lr}
 810048a:	b082      	sub	sp, #8
 810048c:	af00      	add	r7, sp, #0
 810048e:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 8100490:	687b      	ldr	r3, [r7, #4]
 8100492:	4a05      	ldr	r2, [pc, #20]	; (81004a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100494:	4293      	cmp	r3, r2
 8100496:	d102      	bne.n	810049e <HAL_TIM_PeriodElapsedCallback+0x16>
		printf("giro\r\n");
 8100498:	4804      	ldr	r0, [pc, #16]	; (81004ac <HAL_TIM_PeriodElapsedCallback+0x24>)
 810049a:	f001 fd2f 	bl	8101efc <puts>
	}
}
 810049e:	bf00      	nop
 81004a0:	3708      	adds	r7, #8
 81004a2:	46bd      	mov	sp, r7
 81004a4:	bd80      	pop	{r7, pc}
 81004a6:	bf00      	nop
 81004a8:	10000090 	.word	0x10000090
 81004ac:	0810283c 	.word	0x0810283c

081004b0 <__io_putchar>:


int __io_putchar(int ch){
 81004b0:	b580      	push	{r7, lr}
 81004b2:	b082      	sub	sp, #8
 81004b4:	af00      	add	r7, sp, #0
 81004b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 81004b8:	1d39      	adds	r1, r7, #4
 81004ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81004be:	2201      	movs	r2, #1
 81004c0:	4803      	ldr	r0, [pc, #12]	; (81004d0 <__io_putchar+0x20>)
 81004c2:	f001 fb1f 	bl	8101b04 <HAL_UART_Transmit>
	return ch;
 81004c6:	687b      	ldr	r3, [r7, #4]
}
 81004c8:	4618      	mov	r0, r3
 81004ca:	3708      	adds	r7, #8
 81004cc:	46bd      	mov	sp, r7
 81004ce:	bd80      	pop	{r7, pc}
 81004d0:	100000dc 	.word	0x100000dc

081004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81004d4:	b480      	push	{r7}
 81004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81004d8:	b672      	cpsid	i
}
 81004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81004dc:	e7fe      	b.n	81004dc <Error_Handler+0x8>
	...

081004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81004e0:	b480      	push	{r7}
 81004e2:	b083      	sub	sp, #12
 81004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81004e6:	4b0a      	ldr	r3, [pc, #40]	; (8100510 <HAL_MspInit+0x30>)
 81004e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81004ec:	4a08      	ldr	r2, [pc, #32]	; (8100510 <HAL_MspInit+0x30>)
 81004ee:	f043 0302 	orr.w	r3, r3, #2
 81004f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81004f6:	4b06      	ldr	r3, [pc, #24]	; (8100510 <HAL_MspInit+0x30>)
 81004f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81004fc:	f003 0302 	and.w	r3, r3, #2
 8100500:	607b      	str	r3, [r7, #4]
 8100502:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100504:	bf00      	nop
 8100506:	370c      	adds	r7, #12
 8100508:	46bd      	mov	sp, r7
 810050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810050e:	4770      	bx	lr
 8100510:	58024400 	.word	0x58024400

08100514 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8100514:	b580      	push	{r7, lr}
 8100516:	b08a      	sub	sp, #40	; 0x28
 8100518:	af00      	add	r7, sp, #0
 810051a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810051c:	f107 0314 	add.w	r3, r7, #20
 8100520:	2200      	movs	r2, #0
 8100522:	601a      	str	r2, [r3, #0]
 8100524:	605a      	str	r2, [r3, #4]
 8100526:	609a      	str	r2, [r3, #8]
 8100528:	60da      	str	r2, [r3, #12]
 810052a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 810052c:	687b      	ldr	r3, [r7, #4]
 810052e:	681b      	ldr	r3, [r3, #0]
 8100530:	4a1e      	ldr	r2, [pc, #120]	; (81005ac <HAL_TIM_Encoder_MspInit+0x98>)
 8100532:	4293      	cmp	r3, r2
 8100534:	d136      	bne.n	81005a4 <HAL_TIM_Encoder_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8100536:	4b1e      	ldr	r3, [pc, #120]	; (81005b0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8100538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810053c:	4a1c      	ldr	r2, [pc, #112]	; (81005b0 <HAL_TIM_Encoder_MspInit+0x9c>)
 810053e:	f043 0301 	orr.w	r3, r3, #1
 8100542:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100546:	4b1a      	ldr	r3, [pc, #104]	; (81005b0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8100548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810054c:	f003 0301 	and.w	r3, r3, #1
 8100550:	613b      	str	r3, [r7, #16]
 8100552:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8100554:	4b16      	ldr	r3, [pc, #88]	; (81005b0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8100556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810055a:	4a15      	ldr	r2, [pc, #84]	; (81005b0 <HAL_TIM_Encoder_MspInit+0x9c>)
 810055c:	f043 0310 	orr.w	r3, r3, #16
 8100560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100564:	4b12      	ldr	r3, [pc, #72]	; (81005b0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8100566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810056a:	f003 0310 	and.w	r3, r3, #16
 810056e:	60fb      	str	r3, [r7, #12]
 8100570:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8100572:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8100576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100578:	2302      	movs	r3, #2
 810057a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810057c:	2300      	movs	r3, #0
 810057e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100580:	2300      	movs	r3, #0
 8100582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8100584:	2301      	movs	r3, #1
 8100586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100588:	f107 0314 	add.w	r3, r7, #20
 810058c:	4619      	mov	r1, r3
 810058e:	4809      	ldr	r0, [pc, #36]	; (81005b4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8100590:	f000 faec 	bl	8100b6c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8100594:	2200      	movs	r2, #0
 8100596:	2100      	movs	r1, #0
 8100598:	2019      	movs	r0, #25
 810059a:	f000 fa9e 	bl	8100ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 810059e:	2019      	movs	r0, #25
 81005a0:	f000 fab5 	bl	8100b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 81005a4:	bf00      	nop
 81005a6:	3728      	adds	r7, #40	; 0x28
 81005a8:	46bd      	mov	sp, r7
 81005aa:	bd80      	pop	{r7, pc}
 81005ac:	40010000 	.word	0x40010000
 81005b0:	58024400 	.word	0x58024400
 81005b4:	58021000 	.word	0x58021000

081005b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81005b8:	b480      	push	{r7}
 81005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81005bc:	e7fe      	b.n	81005bc <NMI_Handler+0x4>

081005be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81005be:	b480      	push	{r7}
 81005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81005c2:	e7fe      	b.n	81005c2 <HardFault_Handler+0x4>

081005c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81005c4:	b480      	push	{r7}
 81005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81005c8:	e7fe      	b.n	81005c8 <MemManage_Handler+0x4>

081005ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81005ca:	b480      	push	{r7}
 81005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81005ce:	e7fe      	b.n	81005ce <BusFault_Handler+0x4>

081005d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81005d0:	b480      	push	{r7}
 81005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81005d4:	e7fe      	b.n	81005d4 <UsageFault_Handler+0x4>

081005d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81005d6:	b480      	push	{r7}
 81005d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81005da:	bf00      	nop
 81005dc:	46bd      	mov	sp, r7
 81005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005e2:	4770      	bx	lr

081005e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81005e4:	b480      	push	{r7}
 81005e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81005e8:	bf00      	nop
 81005ea:	46bd      	mov	sp, r7
 81005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005f0:	4770      	bx	lr

081005f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81005f2:	b480      	push	{r7}
 81005f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81005f6:	bf00      	nop
 81005f8:	46bd      	mov	sp, r7
 81005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005fe:	4770      	bx	lr

08100600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100600:	b580      	push	{r7, lr}
 8100602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100604:	f000 f96e 	bl	81008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100608:	bf00      	nop
 810060a:	bd80      	pop	{r7, pc}

0810060c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 810060c:	b580      	push	{r7, lr}
 810060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8100610:	4802      	ldr	r0, [pc, #8]	; (810061c <TIM1_UP_IRQHandler+0x10>)
 8100612:	f000 ffc3 	bl	810159c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8100616:	bf00      	nop
 8100618:	bd80      	pop	{r7, pc}
 810061a:	bf00      	nop
 810061c:	10000090 	.word	0x10000090

08100620 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8100620:	b580      	push	{r7, lr}
 8100622:	b086      	sub	sp, #24
 8100624:	af00      	add	r7, sp, #0
 8100626:	60f8      	str	r0, [r7, #12]
 8100628:	60b9      	str	r1, [r7, #8]
 810062a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810062c:	2300      	movs	r3, #0
 810062e:	617b      	str	r3, [r7, #20]
 8100630:	e00a      	b.n	8100648 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8100632:	f3af 8000 	nop.w
 8100636:	4601      	mov	r1, r0
 8100638:	68bb      	ldr	r3, [r7, #8]
 810063a:	1c5a      	adds	r2, r3, #1
 810063c:	60ba      	str	r2, [r7, #8]
 810063e:	b2ca      	uxtb	r2, r1
 8100640:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100642:	697b      	ldr	r3, [r7, #20]
 8100644:	3301      	adds	r3, #1
 8100646:	617b      	str	r3, [r7, #20]
 8100648:	697a      	ldr	r2, [r7, #20]
 810064a:	687b      	ldr	r3, [r7, #4]
 810064c:	429a      	cmp	r2, r3
 810064e:	dbf0      	blt.n	8100632 <_read+0x12>
  }

  return len;
 8100650:	687b      	ldr	r3, [r7, #4]
}
 8100652:	4618      	mov	r0, r3
 8100654:	3718      	adds	r7, #24
 8100656:	46bd      	mov	sp, r7
 8100658:	bd80      	pop	{r7, pc}

0810065a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810065a:	b580      	push	{r7, lr}
 810065c:	b086      	sub	sp, #24
 810065e:	af00      	add	r7, sp, #0
 8100660:	60f8      	str	r0, [r7, #12]
 8100662:	60b9      	str	r1, [r7, #8]
 8100664:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100666:	2300      	movs	r3, #0
 8100668:	617b      	str	r3, [r7, #20]
 810066a:	e009      	b.n	8100680 <_write+0x26>
  {
    __io_putchar(*ptr++);
 810066c:	68bb      	ldr	r3, [r7, #8]
 810066e:	1c5a      	adds	r2, r3, #1
 8100670:	60ba      	str	r2, [r7, #8]
 8100672:	781b      	ldrb	r3, [r3, #0]
 8100674:	4618      	mov	r0, r3
 8100676:	f7ff ff1b 	bl	81004b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810067a:	697b      	ldr	r3, [r7, #20]
 810067c:	3301      	adds	r3, #1
 810067e:	617b      	str	r3, [r7, #20]
 8100680:	697a      	ldr	r2, [r7, #20]
 8100682:	687b      	ldr	r3, [r7, #4]
 8100684:	429a      	cmp	r2, r3
 8100686:	dbf1      	blt.n	810066c <_write+0x12>
  }
  return len;
 8100688:	687b      	ldr	r3, [r7, #4]
}
 810068a:	4618      	mov	r0, r3
 810068c:	3718      	adds	r7, #24
 810068e:	46bd      	mov	sp, r7
 8100690:	bd80      	pop	{r7, pc}

08100692 <_close>:

int _close(int file)
{
 8100692:	b480      	push	{r7}
 8100694:	b083      	sub	sp, #12
 8100696:	af00      	add	r7, sp, #0
 8100698:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 810069a:	f04f 33ff 	mov.w	r3, #4294967295
}
 810069e:	4618      	mov	r0, r3
 81006a0:	370c      	adds	r7, #12
 81006a2:	46bd      	mov	sp, r7
 81006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006a8:	4770      	bx	lr

081006aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 81006aa:	b480      	push	{r7}
 81006ac:	b083      	sub	sp, #12
 81006ae:	af00      	add	r7, sp, #0
 81006b0:	6078      	str	r0, [r7, #4]
 81006b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81006b4:	683b      	ldr	r3, [r7, #0]
 81006b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81006ba:	605a      	str	r2, [r3, #4]
  return 0;
 81006bc:	2300      	movs	r3, #0
}
 81006be:	4618      	mov	r0, r3
 81006c0:	370c      	adds	r7, #12
 81006c2:	46bd      	mov	sp, r7
 81006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006c8:	4770      	bx	lr

081006ca <_isatty>:

int _isatty(int file)
{
 81006ca:	b480      	push	{r7}
 81006cc:	b083      	sub	sp, #12
 81006ce:	af00      	add	r7, sp, #0
 81006d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 81006d2:	2301      	movs	r3, #1
}
 81006d4:	4618      	mov	r0, r3
 81006d6:	370c      	adds	r7, #12
 81006d8:	46bd      	mov	sp, r7
 81006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006de:	4770      	bx	lr

081006e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81006e0:	b480      	push	{r7}
 81006e2:	b085      	sub	sp, #20
 81006e4:	af00      	add	r7, sp, #0
 81006e6:	60f8      	str	r0, [r7, #12]
 81006e8:	60b9      	str	r1, [r7, #8]
 81006ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 81006ec:	2300      	movs	r3, #0
}
 81006ee:	4618      	mov	r0, r3
 81006f0:	3714      	adds	r7, #20
 81006f2:	46bd      	mov	sp, r7
 81006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006f8:	4770      	bx	lr
	...

081006fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81006fc:	b580      	push	{r7, lr}
 81006fe:	b086      	sub	sp, #24
 8100700:	af00      	add	r7, sp, #0
 8100702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100704:	4a14      	ldr	r2, [pc, #80]	; (8100758 <_sbrk+0x5c>)
 8100706:	4b15      	ldr	r3, [pc, #84]	; (810075c <_sbrk+0x60>)
 8100708:	1ad3      	subs	r3, r2, r3
 810070a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 810070c:	697b      	ldr	r3, [r7, #20]
 810070e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100710:	4b13      	ldr	r3, [pc, #76]	; (8100760 <_sbrk+0x64>)
 8100712:	681b      	ldr	r3, [r3, #0]
 8100714:	2b00      	cmp	r3, #0
 8100716:	d102      	bne.n	810071e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100718:	4b11      	ldr	r3, [pc, #68]	; (8100760 <_sbrk+0x64>)
 810071a:	4a12      	ldr	r2, [pc, #72]	; (8100764 <_sbrk+0x68>)
 810071c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810071e:	4b10      	ldr	r3, [pc, #64]	; (8100760 <_sbrk+0x64>)
 8100720:	681a      	ldr	r2, [r3, #0]
 8100722:	687b      	ldr	r3, [r7, #4]
 8100724:	4413      	add	r3, r2
 8100726:	693a      	ldr	r2, [r7, #16]
 8100728:	429a      	cmp	r2, r3
 810072a:	d207      	bcs.n	810073c <_sbrk+0x40>
  {
    errno = ENOMEM;
 810072c:	f001 fb46 	bl	8101dbc <__errno>
 8100730:	4603      	mov	r3, r0
 8100732:	220c      	movs	r2, #12
 8100734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100736:	f04f 33ff 	mov.w	r3, #4294967295
 810073a:	e009      	b.n	8100750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 810073c:	4b08      	ldr	r3, [pc, #32]	; (8100760 <_sbrk+0x64>)
 810073e:	681b      	ldr	r3, [r3, #0]
 8100740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100742:	4b07      	ldr	r3, [pc, #28]	; (8100760 <_sbrk+0x64>)
 8100744:	681a      	ldr	r2, [r3, #0]
 8100746:	687b      	ldr	r3, [r7, #4]
 8100748:	4413      	add	r3, r2
 810074a:	4a05      	ldr	r2, [pc, #20]	; (8100760 <_sbrk+0x64>)
 810074c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810074e:	68fb      	ldr	r3, [r7, #12]
}
 8100750:	4618      	mov	r0, r3
 8100752:	3718      	adds	r7, #24
 8100754:	46bd      	mov	sp, r7
 8100756:	bd80      	pop	{r7, pc}
 8100758:	10048000 	.word	0x10048000
 810075c:	00000400 	.word	0x00000400
 8100760:	10000170 	.word	0x10000170
 8100764:	10000188 	.word	0x10000188

08100768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100768:	f8df d034 	ldr.w	sp, [pc, #52]	; 81007a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810076c:	f7ff fdb4 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100770:	480c      	ldr	r0, [pc, #48]	; (81007a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100772:	490d      	ldr	r1, [pc, #52]	; (81007a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100774:	4a0d      	ldr	r2, [pc, #52]	; (81007ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100778:	e002      	b.n	8100780 <LoopCopyDataInit>

0810077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810077e:	3304      	adds	r3, #4

08100780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100784:	d3f9      	bcc.n	810077a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100786:	4a0a      	ldr	r2, [pc, #40]	; (81007b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100788:	4c0a      	ldr	r4, [pc, #40]	; (81007b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 810078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810078c:	e001      	b.n	8100792 <LoopFillZerobss>

0810078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100790:	3204      	adds	r2, #4

08100792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100794:	d3fb      	bcc.n	810078e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100796:	f001 fb17 	bl	8101dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810079a:	f7ff fdb5 	bl	8100308 <main>
  bx  lr
 810079e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81007a0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81007a4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81007a8:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 81007ac:	081028c0 	.word	0x081028c0
  ldr r2, =_sbss
 81007b0:	10000074 	.word	0x10000074
  ldr r4, =_ebss
 81007b4:	10000188 	.word	0x10000188

081007b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81007b8:	e7fe      	b.n	81007b8 <ADC3_IRQHandler>
	...

081007bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81007bc:	b580      	push	{r7, lr}
 81007be:	b082      	sub	sp, #8
 81007c0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81007c2:	4b28      	ldr	r3, [pc, #160]	; (8100864 <HAL_Init+0xa8>)
 81007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007c8:	4a26      	ldr	r2, [pc, #152]	; (8100864 <HAL_Init+0xa8>)
 81007ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81007ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81007d2:	4b24      	ldr	r3, [pc, #144]	; (8100864 <HAL_Init+0xa8>)
 81007d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81007dc:	603b      	str	r3, [r7, #0]
 81007de:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81007e0:	4b21      	ldr	r3, [pc, #132]	; (8100868 <HAL_Init+0xac>)
 81007e2:	681b      	ldr	r3, [r3, #0]
 81007e4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81007e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81007ec:	4a1e      	ldr	r2, [pc, #120]	; (8100868 <HAL_Init+0xac>)
 81007ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81007f2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81007f4:	4b1c      	ldr	r3, [pc, #112]	; (8100868 <HAL_Init+0xac>)
 81007f6:	681b      	ldr	r3, [r3, #0]
 81007f8:	4a1b      	ldr	r2, [pc, #108]	; (8100868 <HAL_Init+0xac>)
 81007fa:	f043 0301 	orr.w	r3, r3, #1
 81007fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100800:	2003      	movs	r0, #3
 8100802:	f000 f95f 	bl	8100ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100806:	f000 fbfb 	bl	8101000 <HAL_RCC_GetSysClockFreq>
 810080a:	4602      	mov	r2, r0
 810080c:	4b15      	ldr	r3, [pc, #84]	; (8100864 <HAL_Init+0xa8>)
 810080e:	699b      	ldr	r3, [r3, #24]
 8100810:	0a1b      	lsrs	r3, r3, #8
 8100812:	f003 030f 	and.w	r3, r3, #15
 8100816:	4915      	ldr	r1, [pc, #84]	; (810086c <HAL_Init+0xb0>)
 8100818:	5ccb      	ldrb	r3, [r1, r3]
 810081a:	f003 031f 	and.w	r3, r3, #31
 810081e:	fa22 f303 	lsr.w	r3, r2, r3
 8100822:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100824:	4b0f      	ldr	r3, [pc, #60]	; (8100864 <HAL_Init+0xa8>)
 8100826:	699b      	ldr	r3, [r3, #24]
 8100828:	f003 030f 	and.w	r3, r3, #15
 810082c:	4a0f      	ldr	r2, [pc, #60]	; (810086c <HAL_Init+0xb0>)
 810082e:	5cd3      	ldrb	r3, [r2, r3]
 8100830:	f003 031f 	and.w	r3, r3, #31
 8100834:	687a      	ldr	r2, [r7, #4]
 8100836:	fa22 f303 	lsr.w	r3, r2, r3
 810083a:	4a0d      	ldr	r2, [pc, #52]	; (8100870 <HAL_Init+0xb4>)
 810083c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810083e:	4b0c      	ldr	r3, [pc, #48]	; (8100870 <HAL_Init+0xb4>)
 8100840:	681b      	ldr	r3, [r3, #0]
 8100842:	4a0c      	ldr	r2, [pc, #48]	; (8100874 <HAL_Init+0xb8>)
 8100844:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100846:	2000      	movs	r0, #0
 8100848:	f000 f816 	bl	8100878 <HAL_InitTick>
 810084c:	4603      	mov	r3, r0
 810084e:	2b00      	cmp	r3, #0
 8100850:	d001      	beq.n	8100856 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100852:	2301      	movs	r3, #1
 8100854:	e002      	b.n	810085c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100856:	f7ff fe43 	bl	81004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810085a:	2300      	movs	r3, #0
}
 810085c:	4618      	mov	r0, r3
 810085e:	3708      	adds	r7, #8
 8100860:	46bd      	mov	sp, r7
 8100862:	bd80      	pop	{r7, pc}
 8100864:	58024400 	.word	0x58024400
 8100868:	40024400 	.word	0x40024400
 810086c:	08102844 	.word	0x08102844
 8100870:	10000004 	.word	0x10000004
 8100874:	10000000 	.word	0x10000000

08100878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100878:	b580      	push	{r7, lr}
 810087a:	b082      	sub	sp, #8
 810087c:	af00      	add	r7, sp, #0
 810087e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100880:	4b15      	ldr	r3, [pc, #84]	; (81008d8 <HAL_InitTick+0x60>)
 8100882:	781b      	ldrb	r3, [r3, #0]
 8100884:	2b00      	cmp	r3, #0
 8100886:	d101      	bne.n	810088c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100888:	2301      	movs	r3, #1
 810088a:	e021      	b.n	81008d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810088c:	4b13      	ldr	r3, [pc, #76]	; (81008dc <HAL_InitTick+0x64>)
 810088e:	681a      	ldr	r2, [r3, #0]
 8100890:	4b11      	ldr	r3, [pc, #68]	; (81008d8 <HAL_InitTick+0x60>)
 8100892:	781b      	ldrb	r3, [r3, #0]
 8100894:	4619      	mov	r1, r3
 8100896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810089a:	fbb3 f3f1 	udiv	r3, r3, r1
 810089e:	fbb2 f3f3 	udiv	r3, r2, r3
 81008a2:	4618      	mov	r0, r3
 81008a4:	f000 f941 	bl	8100b2a <HAL_SYSTICK_Config>
 81008a8:	4603      	mov	r3, r0
 81008aa:	2b00      	cmp	r3, #0
 81008ac:	d001      	beq.n	81008b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81008ae:	2301      	movs	r3, #1
 81008b0:	e00e      	b.n	81008d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81008b2:	687b      	ldr	r3, [r7, #4]
 81008b4:	2b0f      	cmp	r3, #15
 81008b6:	d80a      	bhi.n	81008ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81008b8:	2200      	movs	r2, #0
 81008ba:	6879      	ldr	r1, [r7, #4]
 81008bc:	f04f 30ff 	mov.w	r0, #4294967295
 81008c0:	f000 f90b 	bl	8100ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81008c4:	4a06      	ldr	r2, [pc, #24]	; (81008e0 <HAL_InitTick+0x68>)
 81008c6:	687b      	ldr	r3, [r7, #4]
 81008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81008ca:	2300      	movs	r3, #0
 81008cc:	e000      	b.n	81008d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81008ce:	2301      	movs	r3, #1
}
 81008d0:	4618      	mov	r0, r3
 81008d2:	3708      	adds	r7, #8
 81008d4:	46bd      	mov	sp, r7
 81008d6:	bd80      	pop	{r7, pc}
 81008d8:	1000000c 	.word	0x1000000c
 81008dc:	10000000 	.word	0x10000000
 81008e0:	10000008 	.word	0x10000008

081008e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81008e4:	b480      	push	{r7}
 81008e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81008e8:	4b06      	ldr	r3, [pc, #24]	; (8100904 <HAL_IncTick+0x20>)
 81008ea:	781b      	ldrb	r3, [r3, #0]
 81008ec:	461a      	mov	r2, r3
 81008ee:	4b06      	ldr	r3, [pc, #24]	; (8100908 <HAL_IncTick+0x24>)
 81008f0:	681b      	ldr	r3, [r3, #0]
 81008f2:	4413      	add	r3, r2
 81008f4:	4a04      	ldr	r2, [pc, #16]	; (8100908 <HAL_IncTick+0x24>)
 81008f6:	6013      	str	r3, [r2, #0]
}
 81008f8:	bf00      	nop
 81008fa:	46bd      	mov	sp, r7
 81008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100900:	4770      	bx	lr
 8100902:	bf00      	nop
 8100904:	1000000c 	.word	0x1000000c
 8100908:	10000174 	.word	0x10000174

0810090c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810090c:	b480      	push	{r7}
 810090e:	af00      	add	r7, sp, #0
  return uwTick;
 8100910:	4b03      	ldr	r3, [pc, #12]	; (8100920 <HAL_GetTick+0x14>)
 8100912:	681b      	ldr	r3, [r3, #0]
}
 8100914:	4618      	mov	r0, r3
 8100916:	46bd      	mov	sp, r7
 8100918:	f85d 7b04 	ldr.w	r7, [sp], #4
 810091c:	4770      	bx	lr
 810091e:	bf00      	nop
 8100920:	10000174 	.word	0x10000174

08100924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100924:	b480      	push	{r7}
 8100926:	b085      	sub	sp, #20
 8100928:	af00      	add	r7, sp, #0
 810092a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810092c:	687b      	ldr	r3, [r7, #4]
 810092e:	f003 0307 	and.w	r3, r3, #7
 8100932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100934:	4b0c      	ldr	r3, [pc, #48]	; (8100968 <__NVIC_SetPriorityGrouping+0x44>)
 8100936:	68db      	ldr	r3, [r3, #12]
 8100938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810093a:	68ba      	ldr	r2, [r7, #8]
 810093c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100940:	4013      	ands	r3, r2
 8100942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100944:	68fb      	ldr	r3, [r7, #12]
 8100946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100948:	68bb      	ldr	r3, [r7, #8]
 810094a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810094c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100956:	4a04      	ldr	r2, [pc, #16]	; (8100968 <__NVIC_SetPriorityGrouping+0x44>)
 8100958:	68bb      	ldr	r3, [r7, #8]
 810095a:	60d3      	str	r3, [r2, #12]
}
 810095c:	bf00      	nop
 810095e:	3714      	adds	r7, #20
 8100960:	46bd      	mov	sp, r7
 8100962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100966:	4770      	bx	lr
 8100968:	e000ed00 	.word	0xe000ed00

0810096c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810096c:	b480      	push	{r7}
 810096e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100970:	4b04      	ldr	r3, [pc, #16]	; (8100984 <__NVIC_GetPriorityGrouping+0x18>)
 8100972:	68db      	ldr	r3, [r3, #12]
 8100974:	0a1b      	lsrs	r3, r3, #8
 8100976:	f003 0307 	and.w	r3, r3, #7
}
 810097a:	4618      	mov	r0, r3
 810097c:	46bd      	mov	sp, r7
 810097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100982:	4770      	bx	lr
 8100984:	e000ed00 	.word	0xe000ed00

08100988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100988:	b480      	push	{r7}
 810098a:	b083      	sub	sp, #12
 810098c:	af00      	add	r7, sp, #0
 810098e:	4603      	mov	r3, r0
 8100990:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100996:	2b00      	cmp	r3, #0
 8100998:	db0b      	blt.n	81009b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810099a:	88fb      	ldrh	r3, [r7, #6]
 810099c:	f003 021f 	and.w	r2, r3, #31
 81009a0:	4907      	ldr	r1, [pc, #28]	; (81009c0 <__NVIC_EnableIRQ+0x38>)
 81009a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81009a6:	095b      	lsrs	r3, r3, #5
 81009a8:	2001      	movs	r0, #1
 81009aa:	fa00 f202 	lsl.w	r2, r0, r2
 81009ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81009b2:	bf00      	nop
 81009b4:	370c      	adds	r7, #12
 81009b6:	46bd      	mov	sp, r7
 81009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009bc:	4770      	bx	lr
 81009be:	bf00      	nop
 81009c0:	e000e100 	.word	0xe000e100

081009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81009c4:	b480      	push	{r7}
 81009c6:	b083      	sub	sp, #12
 81009c8:	af00      	add	r7, sp, #0
 81009ca:	4603      	mov	r3, r0
 81009cc:	6039      	str	r1, [r7, #0]
 81009ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81009d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81009d4:	2b00      	cmp	r3, #0
 81009d6:	db0a      	blt.n	81009ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81009d8:	683b      	ldr	r3, [r7, #0]
 81009da:	b2da      	uxtb	r2, r3
 81009dc:	490c      	ldr	r1, [pc, #48]	; (8100a10 <__NVIC_SetPriority+0x4c>)
 81009de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81009e2:	0112      	lsls	r2, r2, #4
 81009e4:	b2d2      	uxtb	r2, r2
 81009e6:	440b      	add	r3, r1
 81009e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81009ec:	e00a      	b.n	8100a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81009ee:	683b      	ldr	r3, [r7, #0]
 81009f0:	b2da      	uxtb	r2, r3
 81009f2:	4908      	ldr	r1, [pc, #32]	; (8100a14 <__NVIC_SetPriority+0x50>)
 81009f4:	88fb      	ldrh	r3, [r7, #6]
 81009f6:	f003 030f 	and.w	r3, r3, #15
 81009fa:	3b04      	subs	r3, #4
 81009fc:	0112      	lsls	r2, r2, #4
 81009fe:	b2d2      	uxtb	r2, r2
 8100a00:	440b      	add	r3, r1
 8100a02:	761a      	strb	r2, [r3, #24]
}
 8100a04:	bf00      	nop
 8100a06:	370c      	adds	r7, #12
 8100a08:	46bd      	mov	sp, r7
 8100a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a0e:	4770      	bx	lr
 8100a10:	e000e100 	.word	0xe000e100
 8100a14:	e000ed00 	.word	0xe000ed00

08100a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100a18:	b480      	push	{r7}
 8100a1a:	b089      	sub	sp, #36	; 0x24
 8100a1c:	af00      	add	r7, sp, #0
 8100a1e:	60f8      	str	r0, [r7, #12]
 8100a20:	60b9      	str	r1, [r7, #8]
 8100a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100a24:	68fb      	ldr	r3, [r7, #12]
 8100a26:	f003 0307 	and.w	r3, r3, #7
 8100a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100a2c:	69fb      	ldr	r3, [r7, #28]
 8100a2e:	f1c3 0307 	rsb	r3, r3, #7
 8100a32:	2b04      	cmp	r3, #4
 8100a34:	bf28      	it	cs
 8100a36:	2304      	movcs	r3, #4
 8100a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100a3a:	69fb      	ldr	r3, [r7, #28]
 8100a3c:	3304      	adds	r3, #4
 8100a3e:	2b06      	cmp	r3, #6
 8100a40:	d902      	bls.n	8100a48 <NVIC_EncodePriority+0x30>
 8100a42:	69fb      	ldr	r3, [r7, #28]
 8100a44:	3b03      	subs	r3, #3
 8100a46:	e000      	b.n	8100a4a <NVIC_EncodePriority+0x32>
 8100a48:	2300      	movs	r3, #0
 8100a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8100a50:	69bb      	ldr	r3, [r7, #24]
 8100a52:	fa02 f303 	lsl.w	r3, r2, r3
 8100a56:	43da      	mvns	r2, r3
 8100a58:	68bb      	ldr	r3, [r7, #8]
 8100a5a:	401a      	ands	r2, r3
 8100a5c:	697b      	ldr	r3, [r7, #20]
 8100a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100a60:	f04f 31ff 	mov.w	r1, #4294967295
 8100a64:	697b      	ldr	r3, [r7, #20]
 8100a66:	fa01 f303 	lsl.w	r3, r1, r3
 8100a6a:	43d9      	mvns	r1, r3
 8100a6c:	687b      	ldr	r3, [r7, #4]
 8100a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100a70:	4313      	orrs	r3, r2
         );
}
 8100a72:	4618      	mov	r0, r3
 8100a74:	3724      	adds	r7, #36	; 0x24
 8100a76:	46bd      	mov	sp, r7
 8100a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a7c:	4770      	bx	lr
	...

08100a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100a80:	b580      	push	{r7, lr}
 8100a82:	b082      	sub	sp, #8
 8100a84:	af00      	add	r7, sp, #0
 8100a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100a88:	687b      	ldr	r3, [r7, #4]
 8100a8a:	3b01      	subs	r3, #1
 8100a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100a90:	d301      	bcc.n	8100a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100a92:	2301      	movs	r3, #1
 8100a94:	e00f      	b.n	8100ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100a96:	4a0a      	ldr	r2, [pc, #40]	; (8100ac0 <SysTick_Config+0x40>)
 8100a98:	687b      	ldr	r3, [r7, #4]
 8100a9a:	3b01      	subs	r3, #1
 8100a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100a9e:	210f      	movs	r1, #15
 8100aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8100aa4:	f7ff ff8e 	bl	81009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100aa8:	4b05      	ldr	r3, [pc, #20]	; (8100ac0 <SysTick_Config+0x40>)
 8100aaa:	2200      	movs	r2, #0
 8100aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100aae:	4b04      	ldr	r3, [pc, #16]	; (8100ac0 <SysTick_Config+0x40>)
 8100ab0:	2207      	movs	r2, #7
 8100ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100ab4:	2300      	movs	r3, #0
}
 8100ab6:	4618      	mov	r0, r3
 8100ab8:	3708      	adds	r7, #8
 8100aba:	46bd      	mov	sp, r7
 8100abc:	bd80      	pop	{r7, pc}
 8100abe:	bf00      	nop
 8100ac0:	e000e010 	.word	0xe000e010

08100ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100ac4:	b580      	push	{r7, lr}
 8100ac6:	b082      	sub	sp, #8
 8100ac8:	af00      	add	r7, sp, #0
 8100aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100acc:	6878      	ldr	r0, [r7, #4]
 8100ace:	f7ff ff29 	bl	8100924 <__NVIC_SetPriorityGrouping>
}
 8100ad2:	bf00      	nop
 8100ad4:	3708      	adds	r7, #8
 8100ad6:	46bd      	mov	sp, r7
 8100ad8:	bd80      	pop	{r7, pc}

08100ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100ada:	b580      	push	{r7, lr}
 8100adc:	b086      	sub	sp, #24
 8100ade:	af00      	add	r7, sp, #0
 8100ae0:	4603      	mov	r3, r0
 8100ae2:	60b9      	str	r1, [r7, #8]
 8100ae4:	607a      	str	r2, [r7, #4]
 8100ae6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100ae8:	f7ff ff40 	bl	810096c <__NVIC_GetPriorityGrouping>
 8100aec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100aee:	687a      	ldr	r2, [r7, #4]
 8100af0:	68b9      	ldr	r1, [r7, #8]
 8100af2:	6978      	ldr	r0, [r7, #20]
 8100af4:	f7ff ff90 	bl	8100a18 <NVIC_EncodePriority>
 8100af8:	4602      	mov	r2, r0
 8100afa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100afe:	4611      	mov	r1, r2
 8100b00:	4618      	mov	r0, r3
 8100b02:	f7ff ff5f 	bl	81009c4 <__NVIC_SetPriority>
}
 8100b06:	bf00      	nop
 8100b08:	3718      	adds	r7, #24
 8100b0a:	46bd      	mov	sp, r7
 8100b0c:	bd80      	pop	{r7, pc}

08100b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100b0e:	b580      	push	{r7, lr}
 8100b10:	b082      	sub	sp, #8
 8100b12:	af00      	add	r7, sp, #0
 8100b14:	4603      	mov	r3, r0
 8100b16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b1c:	4618      	mov	r0, r3
 8100b1e:	f7ff ff33 	bl	8100988 <__NVIC_EnableIRQ>
}
 8100b22:	bf00      	nop
 8100b24:	3708      	adds	r7, #8
 8100b26:	46bd      	mov	sp, r7
 8100b28:	bd80      	pop	{r7, pc}

08100b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100b2a:	b580      	push	{r7, lr}
 8100b2c:	b082      	sub	sp, #8
 8100b2e:	af00      	add	r7, sp, #0
 8100b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100b32:	6878      	ldr	r0, [r7, #4]
 8100b34:	f7ff ffa4 	bl	8100a80 <SysTick_Config>
 8100b38:	4603      	mov	r3, r0
}
 8100b3a:	4618      	mov	r0, r3
 8100b3c:	3708      	adds	r7, #8
 8100b3e:	46bd      	mov	sp, r7
 8100b40:	bd80      	pop	{r7, pc}
	...

08100b44 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100b44:	b480      	push	{r7}
 8100b46:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100b48:	4b07      	ldr	r3, [pc, #28]	; (8100b68 <HAL_GetCurrentCPUID+0x24>)
 8100b4a:	681b      	ldr	r3, [r3, #0]
 8100b4c:	091b      	lsrs	r3, r3, #4
 8100b4e:	f003 030f 	and.w	r3, r3, #15
 8100b52:	2b07      	cmp	r3, #7
 8100b54:	d101      	bne.n	8100b5a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100b56:	2303      	movs	r3, #3
 8100b58:	e000      	b.n	8100b5c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100b5a:	2301      	movs	r3, #1
  }
}
 8100b5c:	4618      	mov	r0, r3
 8100b5e:	46bd      	mov	sp, r7
 8100b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b64:	4770      	bx	lr
 8100b66:	bf00      	nop
 8100b68:	e000ed00 	.word	0xe000ed00

08100b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100b6c:	b480      	push	{r7}
 8100b6e:	b089      	sub	sp, #36	; 0x24
 8100b70:	af00      	add	r7, sp, #0
 8100b72:	6078      	str	r0, [r7, #4]
 8100b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100b76:	2300      	movs	r3, #0
 8100b78:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100b7a:	4b89      	ldr	r3, [pc, #548]	; (8100da0 <HAL_GPIO_Init+0x234>)
 8100b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100b7e:	e194      	b.n	8100eaa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100b80:	683b      	ldr	r3, [r7, #0]
 8100b82:	681a      	ldr	r2, [r3, #0]
 8100b84:	2101      	movs	r1, #1
 8100b86:	69fb      	ldr	r3, [r7, #28]
 8100b88:	fa01 f303 	lsl.w	r3, r1, r3
 8100b8c:	4013      	ands	r3, r2
 8100b8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100b90:	693b      	ldr	r3, [r7, #16]
 8100b92:	2b00      	cmp	r3, #0
 8100b94:	f000 8186 	beq.w	8100ea4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100b98:	683b      	ldr	r3, [r7, #0]
 8100b9a:	685b      	ldr	r3, [r3, #4]
 8100b9c:	f003 0303 	and.w	r3, r3, #3
 8100ba0:	2b01      	cmp	r3, #1
 8100ba2:	d005      	beq.n	8100bb0 <HAL_GPIO_Init+0x44>
 8100ba4:	683b      	ldr	r3, [r7, #0]
 8100ba6:	685b      	ldr	r3, [r3, #4]
 8100ba8:	f003 0303 	and.w	r3, r3, #3
 8100bac:	2b02      	cmp	r3, #2
 8100bae:	d130      	bne.n	8100c12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100bb0:	687b      	ldr	r3, [r7, #4]
 8100bb2:	689b      	ldr	r3, [r3, #8]
 8100bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100bb6:	69fb      	ldr	r3, [r7, #28]
 8100bb8:	005b      	lsls	r3, r3, #1
 8100bba:	2203      	movs	r2, #3
 8100bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8100bc0:	43db      	mvns	r3, r3
 8100bc2:	69ba      	ldr	r2, [r7, #24]
 8100bc4:	4013      	ands	r3, r2
 8100bc6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100bc8:	683b      	ldr	r3, [r7, #0]
 8100bca:	68da      	ldr	r2, [r3, #12]
 8100bcc:	69fb      	ldr	r3, [r7, #28]
 8100bce:	005b      	lsls	r3, r3, #1
 8100bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8100bd4:	69ba      	ldr	r2, [r7, #24]
 8100bd6:	4313      	orrs	r3, r2
 8100bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100bda:	687b      	ldr	r3, [r7, #4]
 8100bdc:	69ba      	ldr	r2, [r7, #24]
 8100bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100be0:	687b      	ldr	r3, [r7, #4]
 8100be2:	685b      	ldr	r3, [r3, #4]
 8100be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100be6:	2201      	movs	r2, #1
 8100be8:	69fb      	ldr	r3, [r7, #28]
 8100bea:	fa02 f303 	lsl.w	r3, r2, r3
 8100bee:	43db      	mvns	r3, r3
 8100bf0:	69ba      	ldr	r2, [r7, #24]
 8100bf2:	4013      	ands	r3, r2
 8100bf4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100bf6:	683b      	ldr	r3, [r7, #0]
 8100bf8:	685b      	ldr	r3, [r3, #4]
 8100bfa:	091b      	lsrs	r3, r3, #4
 8100bfc:	f003 0201 	and.w	r2, r3, #1
 8100c00:	69fb      	ldr	r3, [r7, #28]
 8100c02:	fa02 f303 	lsl.w	r3, r2, r3
 8100c06:	69ba      	ldr	r2, [r7, #24]
 8100c08:	4313      	orrs	r3, r2
 8100c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100c0c:	687b      	ldr	r3, [r7, #4]
 8100c0e:	69ba      	ldr	r2, [r7, #24]
 8100c10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100c12:	683b      	ldr	r3, [r7, #0]
 8100c14:	685b      	ldr	r3, [r3, #4]
 8100c16:	f003 0303 	and.w	r3, r3, #3
 8100c1a:	2b03      	cmp	r3, #3
 8100c1c:	d017      	beq.n	8100c4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100c1e:	687b      	ldr	r3, [r7, #4]
 8100c20:	68db      	ldr	r3, [r3, #12]
 8100c22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100c24:	69fb      	ldr	r3, [r7, #28]
 8100c26:	005b      	lsls	r3, r3, #1
 8100c28:	2203      	movs	r2, #3
 8100c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8100c2e:	43db      	mvns	r3, r3
 8100c30:	69ba      	ldr	r2, [r7, #24]
 8100c32:	4013      	ands	r3, r2
 8100c34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100c36:	683b      	ldr	r3, [r7, #0]
 8100c38:	689a      	ldr	r2, [r3, #8]
 8100c3a:	69fb      	ldr	r3, [r7, #28]
 8100c3c:	005b      	lsls	r3, r3, #1
 8100c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8100c42:	69ba      	ldr	r2, [r7, #24]
 8100c44:	4313      	orrs	r3, r2
 8100c46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100c48:	687b      	ldr	r3, [r7, #4]
 8100c4a:	69ba      	ldr	r2, [r7, #24]
 8100c4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100c4e:	683b      	ldr	r3, [r7, #0]
 8100c50:	685b      	ldr	r3, [r3, #4]
 8100c52:	f003 0303 	and.w	r3, r3, #3
 8100c56:	2b02      	cmp	r3, #2
 8100c58:	d123      	bne.n	8100ca2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100c5a:	69fb      	ldr	r3, [r7, #28]
 8100c5c:	08da      	lsrs	r2, r3, #3
 8100c5e:	687b      	ldr	r3, [r7, #4]
 8100c60:	3208      	adds	r2, #8
 8100c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100c68:	69fb      	ldr	r3, [r7, #28]
 8100c6a:	f003 0307 	and.w	r3, r3, #7
 8100c6e:	009b      	lsls	r3, r3, #2
 8100c70:	220f      	movs	r2, #15
 8100c72:	fa02 f303 	lsl.w	r3, r2, r3
 8100c76:	43db      	mvns	r3, r3
 8100c78:	69ba      	ldr	r2, [r7, #24]
 8100c7a:	4013      	ands	r3, r2
 8100c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100c7e:	683b      	ldr	r3, [r7, #0]
 8100c80:	691a      	ldr	r2, [r3, #16]
 8100c82:	69fb      	ldr	r3, [r7, #28]
 8100c84:	f003 0307 	and.w	r3, r3, #7
 8100c88:	009b      	lsls	r3, r3, #2
 8100c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8100c8e:	69ba      	ldr	r2, [r7, #24]
 8100c90:	4313      	orrs	r3, r2
 8100c92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100c94:	69fb      	ldr	r3, [r7, #28]
 8100c96:	08da      	lsrs	r2, r3, #3
 8100c98:	687b      	ldr	r3, [r7, #4]
 8100c9a:	3208      	adds	r2, #8
 8100c9c:	69b9      	ldr	r1, [r7, #24]
 8100c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100ca2:	687b      	ldr	r3, [r7, #4]
 8100ca4:	681b      	ldr	r3, [r3, #0]
 8100ca6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100ca8:	69fb      	ldr	r3, [r7, #28]
 8100caa:	005b      	lsls	r3, r3, #1
 8100cac:	2203      	movs	r2, #3
 8100cae:	fa02 f303 	lsl.w	r3, r2, r3
 8100cb2:	43db      	mvns	r3, r3
 8100cb4:	69ba      	ldr	r2, [r7, #24]
 8100cb6:	4013      	ands	r3, r2
 8100cb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100cba:	683b      	ldr	r3, [r7, #0]
 8100cbc:	685b      	ldr	r3, [r3, #4]
 8100cbe:	f003 0203 	and.w	r2, r3, #3
 8100cc2:	69fb      	ldr	r3, [r7, #28]
 8100cc4:	005b      	lsls	r3, r3, #1
 8100cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8100cca:	69ba      	ldr	r2, [r7, #24]
 8100ccc:	4313      	orrs	r3, r2
 8100cce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100cd0:	687b      	ldr	r3, [r7, #4]
 8100cd2:	69ba      	ldr	r2, [r7, #24]
 8100cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100cd6:	683b      	ldr	r3, [r7, #0]
 8100cd8:	685b      	ldr	r3, [r3, #4]
 8100cda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100cde:	2b00      	cmp	r3, #0
 8100ce0:	f000 80e0 	beq.w	8100ea4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100ce4:	4b2f      	ldr	r3, [pc, #188]	; (8100da4 <HAL_GPIO_Init+0x238>)
 8100ce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100cea:	4a2e      	ldr	r2, [pc, #184]	; (8100da4 <HAL_GPIO_Init+0x238>)
 8100cec:	f043 0302 	orr.w	r3, r3, #2
 8100cf0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100cf4:	4b2b      	ldr	r3, [pc, #172]	; (8100da4 <HAL_GPIO_Init+0x238>)
 8100cf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100cfa:	f003 0302 	and.w	r3, r3, #2
 8100cfe:	60fb      	str	r3, [r7, #12]
 8100d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100d02:	4a29      	ldr	r2, [pc, #164]	; (8100da8 <HAL_GPIO_Init+0x23c>)
 8100d04:	69fb      	ldr	r3, [r7, #28]
 8100d06:	089b      	lsrs	r3, r3, #2
 8100d08:	3302      	adds	r3, #2
 8100d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100d10:	69fb      	ldr	r3, [r7, #28]
 8100d12:	f003 0303 	and.w	r3, r3, #3
 8100d16:	009b      	lsls	r3, r3, #2
 8100d18:	220f      	movs	r2, #15
 8100d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8100d1e:	43db      	mvns	r3, r3
 8100d20:	69ba      	ldr	r2, [r7, #24]
 8100d22:	4013      	ands	r3, r2
 8100d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100d26:	687b      	ldr	r3, [r7, #4]
 8100d28:	4a20      	ldr	r2, [pc, #128]	; (8100dac <HAL_GPIO_Init+0x240>)
 8100d2a:	4293      	cmp	r3, r2
 8100d2c:	d052      	beq.n	8100dd4 <HAL_GPIO_Init+0x268>
 8100d2e:	687b      	ldr	r3, [r7, #4]
 8100d30:	4a1f      	ldr	r2, [pc, #124]	; (8100db0 <HAL_GPIO_Init+0x244>)
 8100d32:	4293      	cmp	r3, r2
 8100d34:	d031      	beq.n	8100d9a <HAL_GPIO_Init+0x22e>
 8100d36:	687b      	ldr	r3, [r7, #4]
 8100d38:	4a1e      	ldr	r2, [pc, #120]	; (8100db4 <HAL_GPIO_Init+0x248>)
 8100d3a:	4293      	cmp	r3, r2
 8100d3c:	d02b      	beq.n	8100d96 <HAL_GPIO_Init+0x22a>
 8100d3e:	687b      	ldr	r3, [r7, #4]
 8100d40:	4a1d      	ldr	r2, [pc, #116]	; (8100db8 <HAL_GPIO_Init+0x24c>)
 8100d42:	4293      	cmp	r3, r2
 8100d44:	d025      	beq.n	8100d92 <HAL_GPIO_Init+0x226>
 8100d46:	687b      	ldr	r3, [r7, #4]
 8100d48:	4a1c      	ldr	r2, [pc, #112]	; (8100dbc <HAL_GPIO_Init+0x250>)
 8100d4a:	4293      	cmp	r3, r2
 8100d4c:	d01f      	beq.n	8100d8e <HAL_GPIO_Init+0x222>
 8100d4e:	687b      	ldr	r3, [r7, #4]
 8100d50:	4a1b      	ldr	r2, [pc, #108]	; (8100dc0 <HAL_GPIO_Init+0x254>)
 8100d52:	4293      	cmp	r3, r2
 8100d54:	d019      	beq.n	8100d8a <HAL_GPIO_Init+0x21e>
 8100d56:	687b      	ldr	r3, [r7, #4]
 8100d58:	4a1a      	ldr	r2, [pc, #104]	; (8100dc4 <HAL_GPIO_Init+0x258>)
 8100d5a:	4293      	cmp	r3, r2
 8100d5c:	d013      	beq.n	8100d86 <HAL_GPIO_Init+0x21a>
 8100d5e:	687b      	ldr	r3, [r7, #4]
 8100d60:	4a19      	ldr	r2, [pc, #100]	; (8100dc8 <HAL_GPIO_Init+0x25c>)
 8100d62:	4293      	cmp	r3, r2
 8100d64:	d00d      	beq.n	8100d82 <HAL_GPIO_Init+0x216>
 8100d66:	687b      	ldr	r3, [r7, #4]
 8100d68:	4a18      	ldr	r2, [pc, #96]	; (8100dcc <HAL_GPIO_Init+0x260>)
 8100d6a:	4293      	cmp	r3, r2
 8100d6c:	d007      	beq.n	8100d7e <HAL_GPIO_Init+0x212>
 8100d6e:	687b      	ldr	r3, [r7, #4]
 8100d70:	4a17      	ldr	r2, [pc, #92]	; (8100dd0 <HAL_GPIO_Init+0x264>)
 8100d72:	4293      	cmp	r3, r2
 8100d74:	d101      	bne.n	8100d7a <HAL_GPIO_Init+0x20e>
 8100d76:	2309      	movs	r3, #9
 8100d78:	e02d      	b.n	8100dd6 <HAL_GPIO_Init+0x26a>
 8100d7a:	230a      	movs	r3, #10
 8100d7c:	e02b      	b.n	8100dd6 <HAL_GPIO_Init+0x26a>
 8100d7e:	2308      	movs	r3, #8
 8100d80:	e029      	b.n	8100dd6 <HAL_GPIO_Init+0x26a>
 8100d82:	2307      	movs	r3, #7
 8100d84:	e027      	b.n	8100dd6 <HAL_GPIO_Init+0x26a>
 8100d86:	2306      	movs	r3, #6
 8100d88:	e025      	b.n	8100dd6 <HAL_GPIO_Init+0x26a>
 8100d8a:	2305      	movs	r3, #5
 8100d8c:	e023      	b.n	8100dd6 <HAL_GPIO_Init+0x26a>
 8100d8e:	2304      	movs	r3, #4
 8100d90:	e021      	b.n	8100dd6 <HAL_GPIO_Init+0x26a>
 8100d92:	2303      	movs	r3, #3
 8100d94:	e01f      	b.n	8100dd6 <HAL_GPIO_Init+0x26a>
 8100d96:	2302      	movs	r3, #2
 8100d98:	e01d      	b.n	8100dd6 <HAL_GPIO_Init+0x26a>
 8100d9a:	2301      	movs	r3, #1
 8100d9c:	e01b      	b.n	8100dd6 <HAL_GPIO_Init+0x26a>
 8100d9e:	bf00      	nop
 8100da0:	580000c0 	.word	0x580000c0
 8100da4:	58024400 	.word	0x58024400
 8100da8:	58000400 	.word	0x58000400
 8100dac:	58020000 	.word	0x58020000
 8100db0:	58020400 	.word	0x58020400
 8100db4:	58020800 	.word	0x58020800
 8100db8:	58020c00 	.word	0x58020c00
 8100dbc:	58021000 	.word	0x58021000
 8100dc0:	58021400 	.word	0x58021400
 8100dc4:	58021800 	.word	0x58021800
 8100dc8:	58021c00 	.word	0x58021c00
 8100dcc:	58022000 	.word	0x58022000
 8100dd0:	58022400 	.word	0x58022400
 8100dd4:	2300      	movs	r3, #0
 8100dd6:	69fa      	ldr	r2, [r7, #28]
 8100dd8:	f002 0203 	and.w	r2, r2, #3
 8100ddc:	0092      	lsls	r2, r2, #2
 8100dde:	4093      	lsls	r3, r2
 8100de0:	69ba      	ldr	r2, [r7, #24]
 8100de2:	4313      	orrs	r3, r2
 8100de4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100de6:	4938      	ldr	r1, [pc, #224]	; (8100ec8 <HAL_GPIO_Init+0x35c>)
 8100de8:	69fb      	ldr	r3, [r7, #28]
 8100dea:	089b      	lsrs	r3, r3, #2
 8100dec:	3302      	adds	r3, #2
 8100dee:	69ba      	ldr	r2, [r7, #24]
 8100df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100df8:	681b      	ldr	r3, [r3, #0]
 8100dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100dfc:	693b      	ldr	r3, [r7, #16]
 8100dfe:	43db      	mvns	r3, r3
 8100e00:	69ba      	ldr	r2, [r7, #24]
 8100e02:	4013      	ands	r3, r2
 8100e04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100e06:	683b      	ldr	r3, [r7, #0]
 8100e08:	685b      	ldr	r3, [r3, #4]
 8100e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100e0e:	2b00      	cmp	r3, #0
 8100e10:	d003      	beq.n	8100e1a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100e12:	69ba      	ldr	r2, [r7, #24]
 8100e14:	693b      	ldr	r3, [r7, #16]
 8100e16:	4313      	orrs	r3, r2
 8100e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100e1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100e1e:	69bb      	ldr	r3, [r7, #24]
 8100e20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100e26:	685b      	ldr	r3, [r3, #4]
 8100e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e2a:	693b      	ldr	r3, [r7, #16]
 8100e2c:	43db      	mvns	r3, r3
 8100e2e:	69ba      	ldr	r2, [r7, #24]
 8100e30:	4013      	ands	r3, r2
 8100e32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100e34:	683b      	ldr	r3, [r7, #0]
 8100e36:	685b      	ldr	r3, [r3, #4]
 8100e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d003      	beq.n	8100e48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100e40:	69ba      	ldr	r2, [r7, #24]
 8100e42:	693b      	ldr	r3, [r7, #16]
 8100e44:	4313      	orrs	r3, r2
 8100e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100e4c:	69bb      	ldr	r3, [r7, #24]
 8100e4e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100e50:	697b      	ldr	r3, [r7, #20]
 8100e52:	685b      	ldr	r3, [r3, #4]
 8100e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e56:	693b      	ldr	r3, [r7, #16]
 8100e58:	43db      	mvns	r3, r3
 8100e5a:	69ba      	ldr	r2, [r7, #24]
 8100e5c:	4013      	ands	r3, r2
 8100e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100e60:	683b      	ldr	r3, [r7, #0]
 8100e62:	685b      	ldr	r3, [r3, #4]
 8100e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100e68:	2b00      	cmp	r3, #0
 8100e6a:	d003      	beq.n	8100e74 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100e6c:	69ba      	ldr	r2, [r7, #24]
 8100e6e:	693b      	ldr	r3, [r7, #16]
 8100e70:	4313      	orrs	r3, r2
 8100e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100e74:	697b      	ldr	r3, [r7, #20]
 8100e76:	69ba      	ldr	r2, [r7, #24]
 8100e78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100e7a:	697b      	ldr	r3, [r7, #20]
 8100e7c:	681b      	ldr	r3, [r3, #0]
 8100e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e80:	693b      	ldr	r3, [r7, #16]
 8100e82:	43db      	mvns	r3, r3
 8100e84:	69ba      	ldr	r2, [r7, #24]
 8100e86:	4013      	ands	r3, r2
 8100e88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100e8a:	683b      	ldr	r3, [r7, #0]
 8100e8c:	685b      	ldr	r3, [r3, #4]
 8100e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100e92:	2b00      	cmp	r3, #0
 8100e94:	d003      	beq.n	8100e9e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100e96:	69ba      	ldr	r2, [r7, #24]
 8100e98:	693b      	ldr	r3, [r7, #16]
 8100e9a:	4313      	orrs	r3, r2
 8100e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100e9e:	697b      	ldr	r3, [r7, #20]
 8100ea0:	69ba      	ldr	r2, [r7, #24]
 8100ea2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100ea4:	69fb      	ldr	r3, [r7, #28]
 8100ea6:	3301      	adds	r3, #1
 8100ea8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100eaa:	683b      	ldr	r3, [r7, #0]
 8100eac:	681a      	ldr	r2, [r3, #0]
 8100eae:	69fb      	ldr	r3, [r7, #28]
 8100eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8100eb4:	2b00      	cmp	r3, #0
 8100eb6:	f47f ae63 	bne.w	8100b80 <HAL_GPIO_Init+0x14>
  }
}
 8100eba:	bf00      	nop
 8100ebc:	bf00      	nop
 8100ebe:	3724      	adds	r7, #36	; 0x24
 8100ec0:	46bd      	mov	sp, r7
 8100ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ec6:	4770      	bx	lr
 8100ec8:	58000400 	.word	0x58000400

08100ecc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100ecc:	b480      	push	{r7}
 8100ece:	b083      	sub	sp, #12
 8100ed0:	af00      	add	r7, sp, #0
 8100ed2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100ed4:	4b05      	ldr	r3, [pc, #20]	; (8100eec <HAL_HSEM_ActivateNotification+0x20>)
 8100ed6:	681a      	ldr	r2, [r3, #0]
 8100ed8:	4904      	ldr	r1, [pc, #16]	; (8100eec <HAL_HSEM_ActivateNotification+0x20>)
 8100eda:	687b      	ldr	r3, [r7, #4]
 8100edc:	4313      	orrs	r3, r2
 8100ede:	600b      	str	r3, [r1, #0]
#endif
}
 8100ee0:	bf00      	nop
 8100ee2:	370c      	adds	r7, #12
 8100ee4:	46bd      	mov	sp, r7
 8100ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100eea:	4770      	bx	lr
 8100eec:	58026510 	.word	0x58026510

08100ef0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100ef0:	b580      	push	{r7, lr}
 8100ef2:	b084      	sub	sp, #16
 8100ef4:	af00      	add	r7, sp, #0
 8100ef6:	60f8      	str	r0, [r7, #12]
 8100ef8:	460b      	mov	r3, r1
 8100efa:	607a      	str	r2, [r7, #4]
 8100efc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100efe:	4b37      	ldr	r3, [pc, #220]	; (8100fdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f00:	681b      	ldr	r3, [r3, #0]
 8100f02:	f023 0201 	bic.w	r2, r3, #1
 8100f06:	4935      	ldr	r1, [pc, #212]	; (8100fdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f08:	68fb      	ldr	r3, [r7, #12]
 8100f0a:	4313      	orrs	r3, r2
 8100f0c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100f0e:	687b      	ldr	r3, [r7, #4]
 8100f10:	2b00      	cmp	r3, #0
 8100f12:	d123      	bne.n	8100f5c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100f14:	f7ff fe16 	bl	8100b44 <HAL_GetCurrentCPUID>
 8100f18:	4603      	mov	r3, r0
 8100f1a:	2b03      	cmp	r3, #3
 8100f1c:	d158      	bne.n	8100fd0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100f1e:	4b2f      	ldr	r3, [pc, #188]	; (8100fdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f20:	691b      	ldr	r3, [r3, #16]
 8100f22:	4a2e      	ldr	r2, [pc, #184]	; (8100fdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f24:	f023 0301 	bic.w	r3, r3, #1
 8100f28:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100f2a:	4b2d      	ldr	r3, [pc, #180]	; (8100fe0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f2c:	691b      	ldr	r3, [r3, #16]
 8100f2e:	4a2c      	ldr	r2, [pc, #176]	; (8100fe0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f30:	f043 0304 	orr.w	r3, r3, #4
 8100f34:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100f36:	f3bf 8f4f 	dsb	sy
}
 8100f3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100f3c:	f3bf 8f6f 	isb	sy
}
 8100f40:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100f42:	7afb      	ldrb	r3, [r7, #11]
 8100f44:	2b01      	cmp	r3, #1
 8100f46:	d101      	bne.n	8100f4c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100f48:	bf30      	wfi
 8100f4a:	e000      	b.n	8100f4e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100f4c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100f4e:	4b24      	ldr	r3, [pc, #144]	; (8100fe0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f50:	691b      	ldr	r3, [r3, #16]
 8100f52:	4a23      	ldr	r2, [pc, #140]	; (8100fe0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f54:	f023 0304 	bic.w	r3, r3, #4
 8100f58:	6113      	str	r3, [r2, #16]
 8100f5a:	e03c      	b.n	8100fd6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100f5c:	687b      	ldr	r3, [r7, #4]
 8100f5e:	2b01      	cmp	r3, #1
 8100f60:	d123      	bne.n	8100faa <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100f62:	f7ff fdef 	bl	8100b44 <HAL_GetCurrentCPUID>
 8100f66:	4603      	mov	r3, r0
 8100f68:	2b01      	cmp	r3, #1
 8100f6a:	d133      	bne.n	8100fd4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100f6c:	4b1b      	ldr	r3, [pc, #108]	; (8100fdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f6e:	695b      	ldr	r3, [r3, #20]
 8100f70:	4a1a      	ldr	r2, [pc, #104]	; (8100fdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f72:	f023 0302 	bic.w	r3, r3, #2
 8100f76:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100f78:	4b19      	ldr	r3, [pc, #100]	; (8100fe0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f7a:	691b      	ldr	r3, [r3, #16]
 8100f7c:	4a18      	ldr	r2, [pc, #96]	; (8100fe0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f7e:	f043 0304 	orr.w	r3, r3, #4
 8100f82:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100f84:	f3bf 8f4f 	dsb	sy
}
 8100f88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100f8a:	f3bf 8f6f 	isb	sy
}
 8100f8e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100f90:	7afb      	ldrb	r3, [r7, #11]
 8100f92:	2b01      	cmp	r3, #1
 8100f94:	d101      	bne.n	8100f9a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100f96:	bf30      	wfi
 8100f98:	e000      	b.n	8100f9c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100f9a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100f9c:	4b10      	ldr	r3, [pc, #64]	; (8100fe0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f9e:	691b      	ldr	r3, [r3, #16]
 8100fa0:	4a0f      	ldr	r2, [pc, #60]	; (8100fe0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100fa2:	f023 0304 	bic.w	r3, r3, #4
 8100fa6:	6113      	str	r3, [r2, #16]
 8100fa8:	e015      	b.n	8100fd6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100faa:	f7ff fdcb 	bl	8100b44 <HAL_GetCurrentCPUID>
 8100fae:	4603      	mov	r3, r0
 8100fb0:	2b03      	cmp	r3, #3
 8100fb2:	d106      	bne.n	8100fc2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100fb4:	4b09      	ldr	r3, [pc, #36]	; (8100fdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8100fb6:	691b      	ldr	r3, [r3, #16]
 8100fb8:	4a08      	ldr	r2, [pc, #32]	; (8100fdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8100fba:	f023 0304 	bic.w	r3, r3, #4
 8100fbe:	6113      	str	r3, [r2, #16]
 8100fc0:	e009      	b.n	8100fd6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100fc2:	4b06      	ldr	r3, [pc, #24]	; (8100fdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8100fc4:	695b      	ldr	r3, [r3, #20]
 8100fc6:	4a05      	ldr	r2, [pc, #20]	; (8100fdc <HAL_PWREx_EnterSTOPMode+0xec>)
 8100fc8:	f023 0304 	bic.w	r3, r3, #4
 8100fcc:	6153      	str	r3, [r2, #20]
 8100fce:	e002      	b.n	8100fd6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100fd0:	bf00      	nop
 8100fd2:	e000      	b.n	8100fd6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100fd4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100fd6:	3710      	adds	r7, #16
 8100fd8:	46bd      	mov	sp, r7
 8100fda:	bd80      	pop	{r7, pc}
 8100fdc:	58024800 	.word	0x58024800
 8100fe0:	e000ed00 	.word	0xe000ed00

08100fe4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100fe4:	b580      	push	{r7, lr}
 8100fe6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100fe8:	f7ff fdac 	bl	8100b44 <HAL_GetCurrentCPUID>
 8100fec:	4603      	mov	r3, r0
 8100fee:	2b03      	cmp	r3, #3
 8100ff0:	d101      	bne.n	8100ff6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100ff2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100ff4:	e001      	b.n	8100ffa <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100ff6:	bf40      	sev
    __WFE ();
 8100ff8:	bf20      	wfe
}
 8100ffa:	bf00      	nop
 8100ffc:	bd80      	pop	{r7, pc}
	...

08101000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101000:	b480      	push	{r7}
 8101002:	b089      	sub	sp, #36	; 0x24
 8101004:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101006:	4bb3      	ldr	r3, [pc, #716]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101008:	691b      	ldr	r3, [r3, #16]
 810100a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810100e:	2b18      	cmp	r3, #24
 8101010:	f200 8155 	bhi.w	81012be <HAL_RCC_GetSysClockFreq+0x2be>
 8101014:	a201      	add	r2, pc, #4	; (adr r2, 810101c <HAL_RCC_GetSysClockFreq+0x1c>)
 8101016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810101a:	bf00      	nop
 810101c:	08101081 	.word	0x08101081
 8101020:	081012bf 	.word	0x081012bf
 8101024:	081012bf 	.word	0x081012bf
 8101028:	081012bf 	.word	0x081012bf
 810102c:	081012bf 	.word	0x081012bf
 8101030:	081012bf 	.word	0x081012bf
 8101034:	081012bf 	.word	0x081012bf
 8101038:	081012bf 	.word	0x081012bf
 810103c:	081010a7 	.word	0x081010a7
 8101040:	081012bf 	.word	0x081012bf
 8101044:	081012bf 	.word	0x081012bf
 8101048:	081012bf 	.word	0x081012bf
 810104c:	081012bf 	.word	0x081012bf
 8101050:	081012bf 	.word	0x081012bf
 8101054:	081012bf 	.word	0x081012bf
 8101058:	081012bf 	.word	0x081012bf
 810105c:	081010ad 	.word	0x081010ad
 8101060:	081012bf 	.word	0x081012bf
 8101064:	081012bf 	.word	0x081012bf
 8101068:	081012bf 	.word	0x081012bf
 810106c:	081012bf 	.word	0x081012bf
 8101070:	081012bf 	.word	0x081012bf
 8101074:	081012bf 	.word	0x081012bf
 8101078:	081012bf 	.word	0x081012bf
 810107c:	081010b3 	.word	0x081010b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101080:	4b94      	ldr	r3, [pc, #592]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101082:	681b      	ldr	r3, [r3, #0]
 8101084:	f003 0320 	and.w	r3, r3, #32
 8101088:	2b00      	cmp	r3, #0
 810108a:	d009      	beq.n	81010a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810108c:	4b91      	ldr	r3, [pc, #580]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810108e:	681b      	ldr	r3, [r3, #0]
 8101090:	08db      	lsrs	r3, r3, #3
 8101092:	f003 0303 	and.w	r3, r3, #3
 8101096:	4a90      	ldr	r2, [pc, #576]	; (81012d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101098:	fa22 f303 	lsr.w	r3, r2, r3
 810109c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810109e:	e111      	b.n	81012c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81010a0:	4b8d      	ldr	r3, [pc, #564]	; (81012d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81010a2:	61bb      	str	r3, [r7, #24]
      break;
 81010a4:	e10e      	b.n	81012c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81010a6:	4b8d      	ldr	r3, [pc, #564]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 81010a8:	61bb      	str	r3, [r7, #24]
      break;
 81010aa:	e10b      	b.n	81012c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81010ac:	4b8c      	ldr	r3, [pc, #560]	; (81012e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81010ae:	61bb      	str	r3, [r7, #24]
      break;
 81010b0:	e108      	b.n	81012c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81010b2:	4b88      	ldr	r3, [pc, #544]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81010b6:	f003 0303 	and.w	r3, r3, #3
 81010ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81010bc:	4b85      	ldr	r3, [pc, #532]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81010c0:	091b      	lsrs	r3, r3, #4
 81010c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81010c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81010c8:	4b82      	ldr	r3, [pc, #520]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81010cc:	f003 0301 	and.w	r3, r3, #1
 81010d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81010d2:	4b80      	ldr	r3, [pc, #512]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81010d6:	08db      	lsrs	r3, r3, #3
 81010d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81010dc:	68fa      	ldr	r2, [r7, #12]
 81010de:	fb02 f303 	mul.w	r3, r2, r3
 81010e2:	ee07 3a90 	vmov	s15, r3
 81010e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81010ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81010ee:	693b      	ldr	r3, [r7, #16]
 81010f0:	2b00      	cmp	r3, #0
 81010f2:	f000 80e1 	beq.w	81012b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 81010f6:	697b      	ldr	r3, [r7, #20]
 81010f8:	2b02      	cmp	r3, #2
 81010fa:	f000 8083 	beq.w	8101204 <HAL_RCC_GetSysClockFreq+0x204>
 81010fe:	697b      	ldr	r3, [r7, #20]
 8101100:	2b02      	cmp	r3, #2
 8101102:	f200 80a1 	bhi.w	8101248 <HAL_RCC_GetSysClockFreq+0x248>
 8101106:	697b      	ldr	r3, [r7, #20]
 8101108:	2b00      	cmp	r3, #0
 810110a:	d003      	beq.n	8101114 <HAL_RCC_GetSysClockFreq+0x114>
 810110c:	697b      	ldr	r3, [r7, #20]
 810110e:	2b01      	cmp	r3, #1
 8101110:	d056      	beq.n	81011c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101112:	e099      	b.n	8101248 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101114:	4b6f      	ldr	r3, [pc, #444]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101116:	681b      	ldr	r3, [r3, #0]
 8101118:	f003 0320 	and.w	r3, r3, #32
 810111c:	2b00      	cmp	r3, #0
 810111e:	d02d      	beq.n	810117c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101120:	4b6c      	ldr	r3, [pc, #432]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101122:	681b      	ldr	r3, [r3, #0]
 8101124:	08db      	lsrs	r3, r3, #3
 8101126:	f003 0303 	and.w	r3, r3, #3
 810112a:	4a6b      	ldr	r2, [pc, #428]	; (81012d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810112c:	fa22 f303 	lsr.w	r3, r2, r3
 8101130:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101132:	687b      	ldr	r3, [r7, #4]
 8101134:	ee07 3a90 	vmov	s15, r3
 8101138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810113c:	693b      	ldr	r3, [r7, #16]
 810113e:	ee07 3a90 	vmov	s15, r3
 8101142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810114a:	4b62      	ldr	r3, [pc, #392]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810114e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101152:	ee07 3a90 	vmov	s15, r3
 8101156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810115a:	ed97 6a02 	vldr	s12, [r7, #8]
 810115e:	eddf 5a61 	vldr	s11, [pc, #388]	; 81012e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810116a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810116e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101176:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810117a:	e087      	b.n	810128c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810117c:	693b      	ldr	r3, [r7, #16]
 810117e:	ee07 3a90 	vmov	s15, r3
 8101182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101186:	eddf 6a58 	vldr	s13, [pc, #352]	; 81012e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810118a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810118e:	4b51      	ldr	r3, [pc, #324]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101196:	ee07 3a90 	vmov	s15, r3
 810119a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810119e:	ed97 6a02 	vldr	s12, [r7, #8]
 81011a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 81012e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81011a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81011aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81011ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81011b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81011b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81011ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81011be:	e065      	b.n	810128c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81011c0:	693b      	ldr	r3, [r7, #16]
 81011c2:	ee07 3a90 	vmov	s15, r3
 81011c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81011ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 81012ec <HAL_RCC_GetSysClockFreq+0x2ec>
 81011ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81011d2:	4b40      	ldr	r3, [pc, #256]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81011d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81011da:	ee07 3a90 	vmov	s15, r3
 81011de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81011e2:	ed97 6a02 	vldr	s12, [r7, #8]
 81011e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81012e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81011ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81011ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81011f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81011f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81011fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81011fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101202:	e043      	b.n	810128c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101204:	693b      	ldr	r3, [r7, #16]
 8101206:	ee07 3a90 	vmov	s15, r3
 810120a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810120e:	eddf 6a38 	vldr	s13, [pc, #224]	; 81012f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101216:	4b2f      	ldr	r3, [pc, #188]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810121a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810121e:	ee07 3a90 	vmov	s15, r3
 8101222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101226:	ed97 6a02 	vldr	s12, [r7, #8]
 810122a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81012e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810122e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810123a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810123e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101242:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101246:	e021      	b.n	810128c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101248:	693b      	ldr	r3, [r7, #16]
 810124a:	ee07 3a90 	vmov	s15, r3
 810124e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101252:	eddf 6a26 	vldr	s13, [pc, #152]	; 81012ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8101256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810125a:	4b1e      	ldr	r3, [pc, #120]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810125e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101262:	ee07 3a90 	vmov	s15, r3
 8101266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810126a:	ed97 6a02 	vldr	s12, [r7, #8]
 810126e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81012e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810127a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810127e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101286:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810128a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810128c:	4b11      	ldr	r3, [pc, #68]	; (81012d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101290:	0a5b      	lsrs	r3, r3, #9
 8101292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101296:	3301      	adds	r3, #1
 8101298:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810129a:	683b      	ldr	r3, [r7, #0]
 810129c:	ee07 3a90 	vmov	s15, r3
 81012a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81012a4:	edd7 6a07 	vldr	s13, [r7, #28]
 81012a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81012ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012b0:	ee17 3a90 	vmov	r3, s15
 81012b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81012b6:	e005      	b.n	81012c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81012b8:	2300      	movs	r3, #0
 81012ba:	61bb      	str	r3, [r7, #24]
      break;
 81012bc:	e002      	b.n	81012c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81012be:	4b07      	ldr	r3, [pc, #28]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 81012c0:	61bb      	str	r3, [r7, #24]
      break;
 81012c2:	bf00      	nop
  }

  return sysclockfreq;
 81012c4:	69bb      	ldr	r3, [r7, #24]
}
 81012c6:	4618      	mov	r0, r3
 81012c8:	3724      	adds	r7, #36	; 0x24
 81012ca:	46bd      	mov	sp, r7
 81012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012d0:	4770      	bx	lr
 81012d2:	bf00      	nop
 81012d4:	58024400 	.word	0x58024400
 81012d8:	03d09000 	.word	0x03d09000
 81012dc:	003d0900 	.word	0x003d0900
 81012e0:	007a1200 	.word	0x007a1200
 81012e4:	46000000 	.word	0x46000000
 81012e8:	4c742400 	.word	0x4c742400
 81012ec:	4a742400 	.word	0x4a742400
 81012f0:	4af42400 	.word	0x4af42400

081012f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 81012f4:	b580      	push	{r7, lr}
 81012f6:	b086      	sub	sp, #24
 81012f8:	af00      	add	r7, sp, #0
 81012fa:	6078      	str	r0, [r7, #4]
 81012fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 81012fe:	687b      	ldr	r3, [r7, #4]
 8101300:	2b00      	cmp	r3, #0
 8101302:	d101      	bne.n	8101308 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8101304:	2301      	movs	r3, #1
 8101306:	e097      	b.n	8101438 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8101308:	687b      	ldr	r3, [r7, #4]
 810130a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810130e:	b2db      	uxtb	r3, r3
 8101310:	2b00      	cmp	r3, #0
 8101312:	d106      	bne.n	8101322 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8101314:	687b      	ldr	r3, [r7, #4]
 8101316:	2200      	movs	r2, #0
 8101318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 810131c:	6878      	ldr	r0, [r7, #4]
 810131e:	f7ff f8f9 	bl	8100514 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101322:	687b      	ldr	r3, [r7, #4]
 8101324:	2202      	movs	r2, #2
 8101326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 810132a:	687b      	ldr	r3, [r7, #4]
 810132c:	681b      	ldr	r3, [r3, #0]
 810132e:	689b      	ldr	r3, [r3, #8]
 8101330:	687a      	ldr	r2, [r7, #4]
 8101332:	6812      	ldr	r2, [r2, #0]
 8101334:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8101338:	f023 0307 	bic.w	r3, r3, #7
 810133c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810133e:	687b      	ldr	r3, [r7, #4]
 8101340:	681a      	ldr	r2, [r3, #0]
 8101342:	687b      	ldr	r3, [r7, #4]
 8101344:	3304      	adds	r3, #4
 8101346:	4619      	mov	r1, r3
 8101348:	4610      	mov	r0, r2
 810134a:	f000 fa6f 	bl	810182c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810134e:	687b      	ldr	r3, [r7, #4]
 8101350:	681b      	ldr	r3, [r3, #0]
 8101352:	689b      	ldr	r3, [r3, #8]
 8101354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8101356:	687b      	ldr	r3, [r7, #4]
 8101358:	681b      	ldr	r3, [r3, #0]
 810135a:	699b      	ldr	r3, [r3, #24]
 810135c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 810135e:	687b      	ldr	r3, [r7, #4]
 8101360:	681b      	ldr	r3, [r3, #0]
 8101362:	6a1b      	ldr	r3, [r3, #32]
 8101364:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8101366:	683b      	ldr	r3, [r7, #0]
 8101368:	681b      	ldr	r3, [r3, #0]
 810136a:	697a      	ldr	r2, [r7, #20]
 810136c:	4313      	orrs	r3, r2
 810136e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8101370:	693b      	ldr	r3, [r7, #16]
 8101372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101376:	f023 0303 	bic.w	r3, r3, #3
 810137a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 810137c:	683b      	ldr	r3, [r7, #0]
 810137e:	689a      	ldr	r2, [r3, #8]
 8101380:	683b      	ldr	r3, [r7, #0]
 8101382:	699b      	ldr	r3, [r3, #24]
 8101384:	021b      	lsls	r3, r3, #8
 8101386:	4313      	orrs	r3, r2
 8101388:	693a      	ldr	r2, [r7, #16]
 810138a:	4313      	orrs	r3, r2
 810138c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 810138e:	693b      	ldr	r3, [r7, #16]
 8101390:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8101394:	f023 030c 	bic.w	r3, r3, #12
 8101398:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 810139a:	693b      	ldr	r3, [r7, #16]
 810139c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81013a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81013a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 81013a6:	683b      	ldr	r3, [r7, #0]
 81013a8:	68da      	ldr	r2, [r3, #12]
 81013aa:	683b      	ldr	r3, [r7, #0]
 81013ac:	69db      	ldr	r3, [r3, #28]
 81013ae:	021b      	lsls	r3, r3, #8
 81013b0:	4313      	orrs	r3, r2
 81013b2:	693a      	ldr	r2, [r7, #16]
 81013b4:	4313      	orrs	r3, r2
 81013b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 81013b8:	683b      	ldr	r3, [r7, #0]
 81013ba:	691b      	ldr	r3, [r3, #16]
 81013bc:	011a      	lsls	r2, r3, #4
 81013be:	683b      	ldr	r3, [r7, #0]
 81013c0:	6a1b      	ldr	r3, [r3, #32]
 81013c2:	031b      	lsls	r3, r3, #12
 81013c4:	4313      	orrs	r3, r2
 81013c6:	693a      	ldr	r2, [r7, #16]
 81013c8:	4313      	orrs	r3, r2
 81013ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 81013cc:	68fb      	ldr	r3, [r7, #12]
 81013ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 81013d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 81013d4:	68fb      	ldr	r3, [r7, #12]
 81013d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 81013da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 81013dc:	683b      	ldr	r3, [r7, #0]
 81013de:	685a      	ldr	r2, [r3, #4]
 81013e0:	683b      	ldr	r3, [r7, #0]
 81013e2:	695b      	ldr	r3, [r3, #20]
 81013e4:	011b      	lsls	r3, r3, #4
 81013e6:	4313      	orrs	r3, r2
 81013e8:	68fa      	ldr	r2, [r7, #12]
 81013ea:	4313      	orrs	r3, r2
 81013ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 81013ee:	687b      	ldr	r3, [r7, #4]
 81013f0:	681b      	ldr	r3, [r3, #0]
 81013f2:	697a      	ldr	r2, [r7, #20]
 81013f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 81013f6:	687b      	ldr	r3, [r7, #4]
 81013f8:	681b      	ldr	r3, [r3, #0]
 81013fa:	693a      	ldr	r2, [r7, #16]
 81013fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 81013fe:	687b      	ldr	r3, [r7, #4]
 8101400:	681b      	ldr	r3, [r3, #0]
 8101402:	68fa      	ldr	r2, [r7, #12]
 8101404:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8101406:	687b      	ldr	r3, [r7, #4]
 8101408:	2201      	movs	r2, #1
 810140a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810140e:	687b      	ldr	r3, [r7, #4]
 8101410:	2201      	movs	r2, #1
 8101412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8101416:	687b      	ldr	r3, [r7, #4]
 8101418:	2201      	movs	r2, #1
 810141a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 810141e:	687b      	ldr	r3, [r7, #4]
 8101420:	2201      	movs	r2, #1
 8101422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	2201      	movs	r2, #1
 810142a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810142e:	687b      	ldr	r3, [r7, #4]
 8101430:	2201      	movs	r2, #1
 8101432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8101436:	2300      	movs	r3, #0
}
 8101438:	4618      	mov	r0, r3
 810143a:	3718      	adds	r7, #24
 810143c:	46bd      	mov	sp, r7
 810143e:	bd80      	pop	{r7, pc}

08101440 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8101440:	b580      	push	{r7, lr}
 8101442:	b084      	sub	sp, #16
 8101444:	af00      	add	r7, sp, #0
 8101446:	6078      	str	r0, [r7, #4]
 8101448:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 810144a:	687b      	ldr	r3, [r7, #4]
 810144c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8101450:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8101452:	687b      	ldr	r3, [r7, #4]
 8101454:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8101458:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 810145a:	687b      	ldr	r3, [r7, #4]
 810145c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8101460:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8101462:	687b      	ldr	r3, [r7, #4]
 8101464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8101468:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 810146a:	683b      	ldr	r3, [r7, #0]
 810146c:	2b00      	cmp	r3, #0
 810146e:	d110      	bne.n	8101492 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8101470:	7bfb      	ldrb	r3, [r7, #15]
 8101472:	2b01      	cmp	r3, #1
 8101474:	d102      	bne.n	810147c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8101476:	7b7b      	ldrb	r3, [r7, #13]
 8101478:	2b01      	cmp	r3, #1
 810147a:	d001      	beq.n	8101480 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 810147c:	2301      	movs	r3, #1
 810147e:	e089      	b.n	8101594 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8101480:	687b      	ldr	r3, [r7, #4]
 8101482:	2202      	movs	r2, #2
 8101484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8101488:	687b      	ldr	r3, [r7, #4]
 810148a:	2202      	movs	r2, #2
 810148c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8101490:	e031      	b.n	81014f6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8101492:	683b      	ldr	r3, [r7, #0]
 8101494:	2b04      	cmp	r3, #4
 8101496:	d110      	bne.n	81014ba <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8101498:	7bbb      	ldrb	r3, [r7, #14]
 810149a:	2b01      	cmp	r3, #1
 810149c:	d102      	bne.n	81014a4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 810149e:	7b3b      	ldrb	r3, [r7, #12]
 81014a0:	2b01      	cmp	r3, #1
 81014a2:	d001      	beq.n	81014a8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 81014a4:	2301      	movs	r3, #1
 81014a6:	e075      	b.n	8101594 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81014a8:	687b      	ldr	r3, [r7, #4]
 81014aa:	2202      	movs	r2, #2
 81014ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81014b0:	687b      	ldr	r3, [r7, #4]
 81014b2:	2202      	movs	r2, #2
 81014b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81014b8:	e01d      	b.n	81014f6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 81014ba:	7bfb      	ldrb	r3, [r7, #15]
 81014bc:	2b01      	cmp	r3, #1
 81014be:	d108      	bne.n	81014d2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 81014c0:	7bbb      	ldrb	r3, [r7, #14]
 81014c2:	2b01      	cmp	r3, #1
 81014c4:	d105      	bne.n	81014d2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 81014c6:	7b7b      	ldrb	r3, [r7, #13]
 81014c8:	2b01      	cmp	r3, #1
 81014ca:	d102      	bne.n	81014d2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 81014cc:	7b3b      	ldrb	r3, [r7, #12]
 81014ce:	2b01      	cmp	r3, #1
 81014d0:	d001      	beq.n	81014d6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 81014d2:	2301      	movs	r3, #1
 81014d4:	e05e      	b.n	8101594 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81014d6:	687b      	ldr	r3, [r7, #4]
 81014d8:	2202      	movs	r2, #2
 81014da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81014de:	687b      	ldr	r3, [r7, #4]
 81014e0:	2202      	movs	r2, #2
 81014e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 81014e6:	687b      	ldr	r3, [r7, #4]
 81014e8:	2202      	movs	r2, #2
 81014ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 81014ee:	687b      	ldr	r3, [r7, #4]
 81014f0:	2202      	movs	r2, #2
 81014f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 81014f6:	683b      	ldr	r3, [r7, #0]
 81014f8:	2b00      	cmp	r3, #0
 81014fa:	d003      	beq.n	8101504 <HAL_TIM_Encoder_Start_IT+0xc4>
 81014fc:	683b      	ldr	r3, [r7, #0]
 81014fe:	2b04      	cmp	r3, #4
 8101500:	d010      	beq.n	8101524 <HAL_TIM_Encoder_Start_IT+0xe4>
 8101502:	e01f      	b.n	8101544 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8101504:	687b      	ldr	r3, [r7, #4]
 8101506:	681b      	ldr	r3, [r3, #0]
 8101508:	2201      	movs	r2, #1
 810150a:	2100      	movs	r1, #0
 810150c:	4618      	mov	r0, r3
 810150e:	f000 fa27 	bl	8101960 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8101512:	687b      	ldr	r3, [r7, #4]
 8101514:	681b      	ldr	r3, [r3, #0]
 8101516:	68da      	ldr	r2, [r3, #12]
 8101518:	687b      	ldr	r3, [r7, #4]
 810151a:	681b      	ldr	r3, [r3, #0]
 810151c:	f042 0202 	orr.w	r2, r2, #2
 8101520:	60da      	str	r2, [r3, #12]
      break;
 8101522:	e02e      	b.n	8101582 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8101524:	687b      	ldr	r3, [r7, #4]
 8101526:	681b      	ldr	r3, [r3, #0]
 8101528:	2201      	movs	r2, #1
 810152a:	2104      	movs	r1, #4
 810152c:	4618      	mov	r0, r3
 810152e:	f000 fa17 	bl	8101960 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8101532:	687b      	ldr	r3, [r7, #4]
 8101534:	681b      	ldr	r3, [r3, #0]
 8101536:	68da      	ldr	r2, [r3, #12]
 8101538:	687b      	ldr	r3, [r7, #4]
 810153a:	681b      	ldr	r3, [r3, #0]
 810153c:	f042 0204 	orr.w	r2, r2, #4
 8101540:	60da      	str	r2, [r3, #12]
      break;
 8101542:	e01e      	b.n	8101582 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8101544:	687b      	ldr	r3, [r7, #4]
 8101546:	681b      	ldr	r3, [r3, #0]
 8101548:	2201      	movs	r2, #1
 810154a:	2100      	movs	r1, #0
 810154c:	4618      	mov	r0, r3
 810154e:	f000 fa07 	bl	8101960 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8101552:	687b      	ldr	r3, [r7, #4]
 8101554:	681b      	ldr	r3, [r3, #0]
 8101556:	2201      	movs	r2, #1
 8101558:	2104      	movs	r1, #4
 810155a:	4618      	mov	r0, r3
 810155c:	f000 fa00 	bl	8101960 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8101560:	687b      	ldr	r3, [r7, #4]
 8101562:	681b      	ldr	r3, [r3, #0]
 8101564:	68da      	ldr	r2, [r3, #12]
 8101566:	687b      	ldr	r3, [r7, #4]
 8101568:	681b      	ldr	r3, [r3, #0]
 810156a:	f042 0202 	orr.w	r2, r2, #2
 810156e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8101570:	687b      	ldr	r3, [r7, #4]
 8101572:	681b      	ldr	r3, [r3, #0]
 8101574:	68da      	ldr	r2, [r3, #12]
 8101576:	687b      	ldr	r3, [r7, #4]
 8101578:	681b      	ldr	r3, [r3, #0]
 810157a:	f042 0204 	orr.w	r2, r2, #4
 810157e:	60da      	str	r2, [r3, #12]
      break;
 8101580:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8101582:	687b      	ldr	r3, [r7, #4]
 8101584:	681b      	ldr	r3, [r3, #0]
 8101586:	681a      	ldr	r2, [r3, #0]
 8101588:	687b      	ldr	r3, [r7, #4]
 810158a:	681b      	ldr	r3, [r3, #0]
 810158c:	f042 0201 	orr.w	r2, r2, #1
 8101590:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8101592:	2300      	movs	r3, #0
}
 8101594:	4618      	mov	r0, r3
 8101596:	3710      	adds	r7, #16
 8101598:	46bd      	mov	sp, r7
 810159a:	bd80      	pop	{r7, pc}

0810159c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810159c:	b580      	push	{r7, lr}
 810159e:	b082      	sub	sp, #8
 81015a0:	af00      	add	r7, sp, #0
 81015a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 81015a4:	687b      	ldr	r3, [r7, #4]
 81015a6:	681b      	ldr	r3, [r3, #0]
 81015a8:	691b      	ldr	r3, [r3, #16]
 81015aa:	f003 0302 	and.w	r3, r3, #2
 81015ae:	2b02      	cmp	r3, #2
 81015b0:	d122      	bne.n	81015f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81015b2:	687b      	ldr	r3, [r7, #4]
 81015b4:	681b      	ldr	r3, [r3, #0]
 81015b6:	68db      	ldr	r3, [r3, #12]
 81015b8:	f003 0302 	and.w	r3, r3, #2
 81015bc:	2b02      	cmp	r3, #2
 81015be:	d11b      	bne.n	81015f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81015c0:	687b      	ldr	r3, [r7, #4]
 81015c2:	681b      	ldr	r3, [r3, #0]
 81015c4:	f06f 0202 	mvn.w	r2, #2
 81015c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81015ca:	687b      	ldr	r3, [r7, #4]
 81015cc:	2201      	movs	r2, #1
 81015ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81015d0:	687b      	ldr	r3, [r7, #4]
 81015d2:	681b      	ldr	r3, [r3, #0]
 81015d4:	699b      	ldr	r3, [r3, #24]
 81015d6:	f003 0303 	and.w	r3, r3, #3
 81015da:	2b00      	cmp	r3, #0
 81015dc:	d003      	beq.n	81015e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81015de:	6878      	ldr	r0, [r7, #4]
 81015e0:	f000 f905 	bl	81017ee <HAL_TIM_IC_CaptureCallback>
 81015e4:	e005      	b.n	81015f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81015e6:	6878      	ldr	r0, [r7, #4]
 81015e8:	f000 f8f7 	bl	81017da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81015ec:	6878      	ldr	r0, [r7, #4]
 81015ee:	f000 f908 	bl	8101802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81015f2:	687b      	ldr	r3, [r7, #4]
 81015f4:	2200      	movs	r2, #0
 81015f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81015f8:	687b      	ldr	r3, [r7, #4]
 81015fa:	681b      	ldr	r3, [r3, #0]
 81015fc:	691b      	ldr	r3, [r3, #16]
 81015fe:	f003 0304 	and.w	r3, r3, #4
 8101602:	2b04      	cmp	r3, #4
 8101604:	d122      	bne.n	810164c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8101606:	687b      	ldr	r3, [r7, #4]
 8101608:	681b      	ldr	r3, [r3, #0]
 810160a:	68db      	ldr	r3, [r3, #12]
 810160c:	f003 0304 	and.w	r3, r3, #4
 8101610:	2b04      	cmp	r3, #4
 8101612:	d11b      	bne.n	810164c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8101614:	687b      	ldr	r3, [r7, #4]
 8101616:	681b      	ldr	r3, [r3, #0]
 8101618:	f06f 0204 	mvn.w	r2, #4
 810161c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810161e:	687b      	ldr	r3, [r7, #4]
 8101620:	2202      	movs	r2, #2
 8101622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8101624:	687b      	ldr	r3, [r7, #4]
 8101626:	681b      	ldr	r3, [r3, #0]
 8101628:	699b      	ldr	r3, [r3, #24]
 810162a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810162e:	2b00      	cmp	r3, #0
 8101630:	d003      	beq.n	810163a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101632:	6878      	ldr	r0, [r7, #4]
 8101634:	f000 f8db 	bl	81017ee <HAL_TIM_IC_CaptureCallback>
 8101638:	e005      	b.n	8101646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810163a:	6878      	ldr	r0, [r7, #4]
 810163c:	f000 f8cd 	bl	81017da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101640:	6878      	ldr	r0, [r7, #4]
 8101642:	f000 f8de 	bl	8101802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101646:	687b      	ldr	r3, [r7, #4]
 8101648:	2200      	movs	r2, #0
 810164a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 810164c:	687b      	ldr	r3, [r7, #4]
 810164e:	681b      	ldr	r3, [r3, #0]
 8101650:	691b      	ldr	r3, [r3, #16]
 8101652:	f003 0308 	and.w	r3, r3, #8
 8101656:	2b08      	cmp	r3, #8
 8101658:	d122      	bne.n	81016a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810165a:	687b      	ldr	r3, [r7, #4]
 810165c:	681b      	ldr	r3, [r3, #0]
 810165e:	68db      	ldr	r3, [r3, #12]
 8101660:	f003 0308 	and.w	r3, r3, #8
 8101664:	2b08      	cmp	r3, #8
 8101666:	d11b      	bne.n	81016a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8101668:	687b      	ldr	r3, [r7, #4]
 810166a:	681b      	ldr	r3, [r3, #0]
 810166c:	f06f 0208 	mvn.w	r2, #8
 8101670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8101672:	687b      	ldr	r3, [r7, #4]
 8101674:	2204      	movs	r2, #4
 8101676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8101678:	687b      	ldr	r3, [r7, #4]
 810167a:	681b      	ldr	r3, [r3, #0]
 810167c:	69db      	ldr	r3, [r3, #28]
 810167e:	f003 0303 	and.w	r3, r3, #3
 8101682:	2b00      	cmp	r3, #0
 8101684:	d003      	beq.n	810168e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101686:	6878      	ldr	r0, [r7, #4]
 8101688:	f000 f8b1 	bl	81017ee <HAL_TIM_IC_CaptureCallback>
 810168c:	e005      	b.n	810169a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810168e:	6878      	ldr	r0, [r7, #4]
 8101690:	f000 f8a3 	bl	81017da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101694:	6878      	ldr	r0, [r7, #4]
 8101696:	f000 f8b4 	bl	8101802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810169a:	687b      	ldr	r3, [r7, #4]
 810169c:	2200      	movs	r2, #0
 810169e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 81016a0:	687b      	ldr	r3, [r7, #4]
 81016a2:	681b      	ldr	r3, [r3, #0]
 81016a4:	691b      	ldr	r3, [r3, #16]
 81016a6:	f003 0310 	and.w	r3, r3, #16
 81016aa:	2b10      	cmp	r3, #16
 81016ac:	d122      	bne.n	81016f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 81016ae:	687b      	ldr	r3, [r7, #4]
 81016b0:	681b      	ldr	r3, [r3, #0]
 81016b2:	68db      	ldr	r3, [r3, #12]
 81016b4:	f003 0310 	and.w	r3, r3, #16
 81016b8:	2b10      	cmp	r3, #16
 81016ba:	d11b      	bne.n	81016f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 81016bc:	687b      	ldr	r3, [r7, #4]
 81016be:	681b      	ldr	r3, [r3, #0]
 81016c0:	f06f 0210 	mvn.w	r2, #16
 81016c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81016c6:	687b      	ldr	r3, [r7, #4]
 81016c8:	2208      	movs	r2, #8
 81016ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81016cc:	687b      	ldr	r3, [r7, #4]
 81016ce:	681b      	ldr	r3, [r3, #0]
 81016d0:	69db      	ldr	r3, [r3, #28]
 81016d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81016d6:	2b00      	cmp	r3, #0
 81016d8:	d003      	beq.n	81016e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81016da:	6878      	ldr	r0, [r7, #4]
 81016dc:	f000 f887 	bl	81017ee <HAL_TIM_IC_CaptureCallback>
 81016e0:	e005      	b.n	81016ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81016e2:	6878      	ldr	r0, [r7, #4]
 81016e4:	f000 f879 	bl	81017da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81016e8:	6878      	ldr	r0, [r7, #4]
 81016ea:	f000 f88a 	bl	8101802 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81016ee:	687b      	ldr	r3, [r7, #4]
 81016f0:	2200      	movs	r2, #0
 81016f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81016f4:	687b      	ldr	r3, [r7, #4]
 81016f6:	681b      	ldr	r3, [r3, #0]
 81016f8:	691b      	ldr	r3, [r3, #16]
 81016fa:	f003 0301 	and.w	r3, r3, #1
 81016fe:	2b01      	cmp	r3, #1
 8101700:	d10e      	bne.n	8101720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8101702:	687b      	ldr	r3, [r7, #4]
 8101704:	681b      	ldr	r3, [r3, #0]
 8101706:	68db      	ldr	r3, [r3, #12]
 8101708:	f003 0301 	and.w	r3, r3, #1
 810170c:	2b01      	cmp	r3, #1
 810170e:	d107      	bne.n	8101720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8101710:	687b      	ldr	r3, [r7, #4]
 8101712:	681b      	ldr	r3, [r3, #0]
 8101714:	f06f 0201 	mvn.w	r2, #1
 8101718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810171a:	6878      	ldr	r0, [r7, #4]
 810171c:	f7fe feb4 	bl	8100488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8101720:	687b      	ldr	r3, [r7, #4]
 8101722:	681b      	ldr	r3, [r3, #0]
 8101724:	691b      	ldr	r3, [r3, #16]
 8101726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810172a:	2b80      	cmp	r3, #128	; 0x80
 810172c:	d10e      	bne.n	810174c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810172e:	687b      	ldr	r3, [r7, #4]
 8101730:	681b      	ldr	r3, [r3, #0]
 8101732:	68db      	ldr	r3, [r3, #12]
 8101734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101738:	2b80      	cmp	r3, #128	; 0x80
 810173a:	d107      	bne.n	810174c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810173c:	687b      	ldr	r3, [r7, #4]
 810173e:	681b      	ldr	r3, [r3, #0]
 8101740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8101744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8101746:	6878      	ldr	r0, [r7, #4]
 8101748:	f000 f9c8 	bl	8101adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810174c:	687b      	ldr	r3, [r7, #4]
 810174e:	681b      	ldr	r3, [r3, #0]
 8101750:	691b      	ldr	r3, [r3, #16]
 8101752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810175a:	d10e      	bne.n	810177a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810175c:	687b      	ldr	r3, [r7, #4]
 810175e:	681b      	ldr	r3, [r3, #0]
 8101760:	68db      	ldr	r3, [r3, #12]
 8101762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101766:	2b80      	cmp	r3, #128	; 0x80
 8101768:	d107      	bne.n	810177a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810176a:	687b      	ldr	r3, [r7, #4]
 810176c:	681b      	ldr	r3, [r3, #0]
 810176e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8101772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8101774:	6878      	ldr	r0, [r7, #4]
 8101776:	f000 f9bb 	bl	8101af0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810177a:	687b      	ldr	r3, [r7, #4]
 810177c:	681b      	ldr	r3, [r3, #0]
 810177e:	691b      	ldr	r3, [r3, #16]
 8101780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101784:	2b40      	cmp	r3, #64	; 0x40
 8101786:	d10e      	bne.n	81017a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8101788:	687b      	ldr	r3, [r7, #4]
 810178a:	681b      	ldr	r3, [r3, #0]
 810178c:	68db      	ldr	r3, [r3, #12]
 810178e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101792:	2b40      	cmp	r3, #64	; 0x40
 8101794:	d107      	bne.n	81017a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8101796:	687b      	ldr	r3, [r7, #4]
 8101798:	681b      	ldr	r3, [r3, #0]
 810179a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810179e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81017a0:	6878      	ldr	r0, [r7, #4]
 81017a2:	f000 f838 	bl	8101816 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81017a6:	687b      	ldr	r3, [r7, #4]
 81017a8:	681b      	ldr	r3, [r3, #0]
 81017aa:	691b      	ldr	r3, [r3, #16]
 81017ac:	f003 0320 	and.w	r3, r3, #32
 81017b0:	2b20      	cmp	r3, #32
 81017b2:	d10e      	bne.n	81017d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81017b4:	687b      	ldr	r3, [r7, #4]
 81017b6:	681b      	ldr	r3, [r3, #0]
 81017b8:	68db      	ldr	r3, [r3, #12]
 81017ba:	f003 0320 	and.w	r3, r3, #32
 81017be:	2b20      	cmp	r3, #32
 81017c0:	d107      	bne.n	81017d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81017c2:	687b      	ldr	r3, [r7, #4]
 81017c4:	681b      	ldr	r3, [r3, #0]
 81017c6:	f06f 0220 	mvn.w	r2, #32
 81017ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81017cc:	6878      	ldr	r0, [r7, #4]
 81017ce:	f000 f97b 	bl	8101ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81017d2:	bf00      	nop
 81017d4:	3708      	adds	r7, #8
 81017d6:	46bd      	mov	sp, r7
 81017d8:	bd80      	pop	{r7, pc}

081017da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81017da:	b480      	push	{r7}
 81017dc:	b083      	sub	sp, #12
 81017de:	af00      	add	r7, sp, #0
 81017e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81017e2:	bf00      	nop
 81017e4:	370c      	adds	r7, #12
 81017e6:	46bd      	mov	sp, r7
 81017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017ec:	4770      	bx	lr

081017ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81017ee:	b480      	push	{r7}
 81017f0:	b083      	sub	sp, #12
 81017f2:	af00      	add	r7, sp, #0
 81017f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81017f6:	bf00      	nop
 81017f8:	370c      	adds	r7, #12
 81017fa:	46bd      	mov	sp, r7
 81017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101800:	4770      	bx	lr

08101802 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8101802:	b480      	push	{r7}
 8101804:	b083      	sub	sp, #12
 8101806:	af00      	add	r7, sp, #0
 8101808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810180a:	bf00      	nop
 810180c:	370c      	adds	r7, #12
 810180e:	46bd      	mov	sp, r7
 8101810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101814:	4770      	bx	lr

08101816 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8101816:	b480      	push	{r7}
 8101818:	b083      	sub	sp, #12
 810181a:	af00      	add	r7, sp, #0
 810181c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810181e:	bf00      	nop
 8101820:	370c      	adds	r7, #12
 8101822:	46bd      	mov	sp, r7
 8101824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101828:	4770      	bx	lr
	...

0810182c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810182c:	b480      	push	{r7}
 810182e:	b085      	sub	sp, #20
 8101830:	af00      	add	r7, sp, #0
 8101832:	6078      	str	r0, [r7, #4]
 8101834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8101836:	687b      	ldr	r3, [r7, #4]
 8101838:	681b      	ldr	r3, [r3, #0]
 810183a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810183c:	687b      	ldr	r3, [r7, #4]
 810183e:	4a40      	ldr	r2, [pc, #256]	; (8101940 <TIM_Base_SetConfig+0x114>)
 8101840:	4293      	cmp	r3, r2
 8101842:	d013      	beq.n	810186c <TIM_Base_SetConfig+0x40>
 8101844:	687b      	ldr	r3, [r7, #4]
 8101846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810184a:	d00f      	beq.n	810186c <TIM_Base_SetConfig+0x40>
 810184c:	687b      	ldr	r3, [r7, #4]
 810184e:	4a3d      	ldr	r2, [pc, #244]	; (8101944 <TIM_Base_SetConfig+0x118>)
 8101850:	4293      	cmp	r3, r2
 8101852:	d00b      	beq.n	810186c <TIM_Base_SetConfig+0x40>
 8101854:	687b      	ldr	r3, [r7, #4]
 8101856:	4a3c      	ldr	r2, [pc, #240]	; (8101948 <TIM_Base_SetConfig+0x11c>)
 8101858:	4293      	cmp	r3, r2
 810185a:	d007      	beq.n	810186c <TIM_Base_SetConfig+0x40>
 810185c:	687b      	ldr	r3, [r7, #4]
 810185e:	4a3b      	ldr	r2, [pc, #236]	; (810194c <TIM_Base_SetConfig+0x120>)
 8101860:	4293      	cmp	r3, r2
 8101862:	d003      	beq.n	810186c <TIM_Base_SetConfig+0x40>
 8101864:	687b      	ldr	r3, [r7, #4]
 8101866:	4a3a      	ldr	r2, [pc, #232]	; (8101950 <TIM_Base_SetConfig+0x124>)
 8101868:	4293      	cmp	r3, r2
 810186a:	d108      	bne.n	810187e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810186c:	68fb      	ldr	r3, [r7, #12]
 810186e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8101872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8101874:	683b      	ldr	r3, [r7, #0]
 8101876:	685b      	ldr	r3, [r3, #4]
 8101878:	68fa      	ldr	r2, [r7, #12]
 810187a:	4313      	orrs	r3, r2
 810187c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810187e:	687b      	ldr	r3, [r7, #4]
 8101880:	4a2f      	ldr	r2, [pc, #188]	; (8101940 <TIM_Base_SetConfig+0x114>)
 8101882:	4293      	cmp	r3, r2
 8101884:	d01f      	beq.n	81018c6 <TIM_Base_SetConfig+0x9a>
 8101886:	687b      	ldr	r3, [r7, #4]
 8101888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810188c:	d01b      	beq.n	81018c6 <TIM_Base_SetConfig+0x9a>
 810188e:	687b      	ldr	r3, [r7, #4]
 8101890:	4a2c      	ldr	r2, [pc, #176]	; (8101944 <TIM_Base_SetConfig+0x118>)
 8101892:	4293      	cmp	r3, r2
 8101894:	d017      	beq.n	81018c6 <TIM_Base_SetConfig+0x9a>
 8101896:	687b      	ldr	r3, [r7, #4]
 8101898:	4a2b      	ldr	r2, [pc, #172]	; (8101948 <TIM_Base_SetConfig+0x11c>)
 810189a:	4293      	cmp	r3, r2
 810189c:	d013      	beq.n	81018c6 <TIM_Base_SetConfig+0x9a>
 810189e:	687b      	ldr	r3, [r7, #4]
 81018a0:	4a2a      	ldr	r2, [pc, #168]	; (810194c <TIM_Base_SetConfig+0x120>)
 81018a2:	4293      	cmp	r3, r2
 81018a4:	d00f      	beq.n	81018c6 <TIM_Base_SetConfig+0x9a>
 81018a6:	687b      	ldr	r3, [r7, #4]
 81018a8:	4a29      	ldr	r2, [pc, #164]	; (8101950 <TIM_Base_SetConfig+0x124>)
 81018aa:	4293      	cmp	r3, r2
 81018ac:	d00b      	beq.n	81018c6 <TIM_Base_SetConfig+0x9a>
 81018ae:	687b      	ldr	r3, [r7, #4]
 81018b0:	4a28      	ldr	r2, [pc, #160]	; (8101954 <TIM_Base_SetConfig+0x128>)
 81018b2:	4293      	cmp	r3, r2
 81018b4:	d007      	beq.n	81018c6 <TIM_Base_SetConfig+0x9a>
 81018b6:	687b      	ldr	r3, [r7, #4]
 81018b8:	4a27      	ldr	r2, [pc, #156]	; (8101958 <TIM_Base_SetConfig+0x12c>)
 81018ba:	4293      	cmp	r3, r2
 81018bc:	d003      	beq.n	81018c6 <TIM_Base_SetConfig+0x9a>
 81018be:	687b      	ldr	r3, [r7, #4]
 81018c0:	4a26      	ldr	r2, [pc, #152]	; (810195c <TIM_Base_SetConfig+0x130>)
 81018c2:	4293      	cmp	r3, r2
 81018c4:	d108      	bne.n	81018d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81018c6:	68fb      	ldr	r3, [r7, #12]
 81018c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81018cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81018ce:	683b      	ldr	r3, [r7, #0]
 81018d0:	68db      	ldr	r3, [r3, #12]
 81018d2:	68fa      	ldr	r2, [r7, #12]
 81018d4:	4313      	orrs	r3, r2
 81018d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81018d8:	68fb      	ldr	r3, [r7, #12]
 81018da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81018de:	683b      	ldr	r3, [r7, #0]
 81018e0:	695b      	ldr	r3, [r3, #20]
 81018e2:	4313      	orrs	r3, r2
 81018e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81018e6:	687b      	ldr	r3, [r7, #4]
 81018e8:	68fa      	ldr	r2, [r7, #12]
 81018ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81018ec:	683b      	ldr	r3, [r7, #0]
 81018ee:	689a      	ldr	r2, [r3, #8]
 81018f0:	687b      	ldr	r3, [r7, #4]
 81018f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81018f4:	683b      	ldr	r3, [r7, #0]
 81018f6:	681a      	ldr	r2, [r3, #0]
 81018f8:	687b      	ldr	r3, [r7, #4]
 81018fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81018fc:	687b      	ldr	r3, [r7, #4]
 81018fe:	4a10      	ldr	r2, [pc, #64]	; (8101940 <TIM_Base_SetConfig+0x114>)
 8101900:	4293      	cmp	r3, r2
 8101902:	d00f      	beq.n	8101924 <TIM_Base_SetConfig+0xf8>
 8101904:	687b      	ldr	r3, [r7, #4]
 8101906:	4a12      	ldr	r2, [pc, #72]	; (8101950 <TIM_Base_SetConfig+0x124>)
 8101908:	4293      	cmp	r3, r2
 810190a:	d00b      	beq.n	8101924 <TIM_Base_SetConfig+0xf8>
 810190c:	687b      	ldr	r3, [r7, #4]
 810190e:	4a11      	ldr	r2, [pc, #68]	; (8101954 <TIM_Base_SetConfig+0x128>)
 8101910:	4293      	cmp	r3, r2
 8101912:	d007      	beq.n	8101924 <TIM_Base_SetConfig+0xf8>
 8101914:	687b      	ldr	r3, [r7, #4]
 8101916:	4a10      	ldr	r2, [pc, #64]	; (8101958 <TIM_Base_SetConfig+0x12c>)
 8101918:	4293      	cmp	r3, r2
 810191a:	d003      	beq.n	8101924 <TIM_Base_SetConfig+0xf8>
 810191c:	687b      	ldr	r3, [r7, #4]
 810191e:	4a0f      	ldr	r2, [pc, #60]	; (810195c <TIM_Base_SetConfig+0x130>)
 8101920:	4293      	cmp	r3, r2
 8101922:	d103      	bne.n	810192c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8101924:	683b      	ldr	r3, [r7, #0]
 8101926:	691a      	ldr	r2, [r3, #16]
 8101928:	687b      	ldr	r3, [r7, #4]
 810192a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810192c:	687b      	ldr	r3, [r7, #4]
 810192e:	2201      	movs	r2, #1
 8101930:	615a      	str	r2, [r3, #20]
}
 8101932:	bf00      	nop
 8101934:	3714      	adds	r7, #20
 8101936:	46bd      	mov	sp, r7
 8101938:	f85d 7b04 	ldr.w	r7, [sp], #4
 810193c:	4770      	bx	lr
 810193e:	bf00      	nop
 8101940:	40010000 	.word	0x40010000
 8101944:	40000400 	.word	0x40000400
 8101948:	40000800 	.word	0x40000800
 810194c:	40000c00 	.word	0x40000c00
 8101950:	40010400 	.word	0x40010400
 8101954:	40014000 	.word	0x40014000
 8101958:	40014400 	.word	0x40014400
 810195c:	40014800 	.word	0x40014800

08101960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8101960:	b480      	push	{r7}
 8101962:	b087      	sub	sp, #28
 8101964:	af00      	add	r7, sp, #0
 8101966:	60f8      	str	r0, [r7, #12]
 8101968:	60b9      	str	r1, [r7, #8]
 810196a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810196c:	68bb      	ldr	r3, [r7, #8]
 810196e:	f003 031f 	and.w	r3, r3, #31
 8101972:	2201      	movs	r2, #1
 8101974:	fa02 f303 	lsl.w	r3, r2, r3
 8101978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810197a:	68fb      	ldr	r3, [r7, #12]
 810197c:	6a1a      	ldr	r2, [r3, #32]
 810197e:	697b      	ldr	r3, [r7, #20]
 8101980:	43db      	mvns	r3, r3
 8101982:	401a      	ands	r2, r3
 8101984:	68fb      	ldr	r3, [r7, #12]
 8101986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8101988:	68fb      	ldr	r3, [r7, #12]
 810198a:	6a1a      	ldr	r2, [r3, #32]
 810198c:	68bb      	ldr	r3, [r7, #8]
 810198e:	f003 031f 	and.w	r3, r3, #31
 8101992:	6879      	ldr	r1, [r7, #4]
 8101994:	fa01 f303 	lsl.w	r3, r1, r3
 8101998:	431a      	orrs	r2, r3
 810199a:	68fb      	ldr	r3, [r7, #12]
 810199c:	621a      	str	r2, [r3, #32]
}
 810199e:	bf00      	nop
 81019a0:	371c      	adds	r7, #28
 81019a2:	46bd      	mov	sp, r7
 81019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019a8:	4770      	bx	lr
	...

081019ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 81019ac:	b480      	push	{r7}
 81019ae:	b085      	sub	sp, #20
 81019b0:	af00      	add	r7, sp, #0
 81019b2:	6078      	str	r0, [r7, #4]
 81019b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 81019b6:	687b      	ldr	r3, [r7, #4]
 81019b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81019bc:	2b01      	cmp	r3, #1
 81019be:	d101      	bne.n	81019c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81019c0:	2302      	movs	r3, #2
 81019c2:	e06d      	b.n	8101aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 81019c4:	687b      	ldr	r3, [r7, #4]
 81019c6:	2201      	movs	r2, #1
 81019c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81019cc:	687b      	ldr	r3, [r7, #4]
 81019ce:	2202      	movs	r2, #2
 81019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81019d4:	687b      	ldr	r3, [r7, #4]
 81019d6:	681b      	ldr	r3, [r3, #0]
 81019d8:	685b      	ldr	r3, [r3, #4]
 81019da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81019dc:	687b      	ldr	r3, [r7, #4]
 81019de:	681b      	ldr	r3, [r3, #0]
 81019e0:	689b      	ldr	r3, [r3, #8]
 81019e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81019e4:	687b      	ldr	r3, [r7, #4]
 81019e6:	681b      	ldr	r3, [r3, #0]
 81019e8:	4a30      	ldr	r2, [pc, #192]	; (8101aac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81019ea:	4293      	cmp	r3, r2
 81019ec:	d004      	beq.n	81019f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81019ee:	687b      	ldr	r3, [r7, #4]
 81019f0:	681b      	ldr	r3, [r3, #0]
 81019f2:	4a2f      	ldr	r2, [pc, #188]	; (8101ab0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81019f4:	4293      	cmp	r3, r2
 81019f6:	d108      	bne.n	8101a0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81019f8:	68fb      	ldr	r3, [r7, #12]
 81019fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81019fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8101a00:	683b      	ldr	r3, [r7, #0]
 8101a02:	685b      	ldr	r3, [r3, #4]
 8101a04:	68fa      	ldr	r2, [r7, #12]
 8101a06:	4313      	orrs	r3, r2
 8101a08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8101a0a:	68fb      	ldr	r3, [r7, #12]
 8101a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8101a10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8101a12:	683b      	ldr	r3, [r7, #0]
 8101a14:	681b      	ldr	r3, [r3, #0]
 8101a16:	68fa      	ldr	r2, [r7, #12]
 8101a18:	4313      	orrs	r3, r2
 8101a1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8101a1c:	687b      	ldr	r3, [r7, #4]
 8101a1e:	681b      	ldr	r3, [r3, #0]
 8101a20:	68fa      	ldr	r2, [r7, #12]
 8101a22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8101a24:	687b      	ldr	r3, [r7, #4]
 8101a26:	681b      	ldr	r3, [r3, #0]
 8101a28:	4a20      	ldr	r2, [pc, #128]	; (8101aac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8101a2a:	4293      	cmp	r3, r2
 8101a2c:	d022      	beq.n	8101a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101a2e:	687b      	ldr	r3, [r7, #4]
 8101a30:	681b      	ldr	r3, [r3, #0]
 8101a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101a36:	d01d      	beq.n	8101a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101a38:	687b      	ldr	r3, [r7, #4]
 8101a3a:	681b      	ldr	r3, [r3, #0]
 8101a3c:	4a1d      	ldr	r2, [pc, #116]	; (8101ab4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8101a3e:	4293      	cmp	r3, r2
 8101a40:	d018      	beq.n	8101a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101a42:	687b      	ldr	r3, [r7, #4]
 8101a44:	681b      	ldr	r3, [r3, #0]
 8101a46:	4a1c      	ldr	r2, [pc, #112]	; (8101ab8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8101a48:	4293      	cmp	r3, r2
 8101a4a:	d013      	beq.n	8101a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101a4c:	687b      	ldr	r3, [r7, #4]
 8101a4e:	681b      	ldr	r3, [r3, #0]
 8101a50:	4a1a      	ldr	r2, [pc, #104]	; (8101abc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8101a52:	4293      	cmp	r3, r2
 8101a54:	d00e      	beq.n	8101a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101a56:	687b      	ldr	r3, [r7, #4]
 8101a58:	681b      	ldr	r3, [r3, #0]
 8101a5a:	4a15      	ldr	r2, [pc, #84]	; (8101ab0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8101a5c:	4293      	cmp	r3, r2
 8101a5e:	d009      	beq.n	8101a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101a60:	687b      	ldr	r3, [r7, #4]
 8101a62:	681b      	ldr	r3, [r3, #0]
 8101a64:	4a16      	ldr	r2, [pc, #88]	; (8101ac0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8101a66:	4293      	cmp	r3, r2
 8101a68:	d004      	beq.n	8101a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8101a6a:	687b      	ldr	r3, [r7, #4]
 8101a6c:	681b      	ldr	r3, [r3, #0]
 8101a6e:	4a15      	ldr	r2, [pc, #84]	; (8101ac4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8101a70:	4293      	cmp	r3, r2
 8101a72:	d10c      	bne.n	8101a8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8101a74:	68bb      	ldr	r3, [r7, #8]
 8101a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8101a7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8101a7c:	683b      	ldr	r3, [r7, #0]
 8101a7e:	689b      	ldr	r3, [r3, #8]
 8101a80:	68ba      	ldr	r2, [r7, #8]
 8101a82:	4313      	orrs	r3, r2
 8101a84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8101a86:	687b      	ldr	r3, [r7, #4]
 8101a88:	681b      	ldr	r3, [r3, #0]
 8101a8a:	68ba      	ldr	r2, [r7, #8]
 8101a8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8101a8e:	687b      	ldr	r3, [r7, #4]
 8101a90:	2201      	movs	r2, #1
 8101a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8101a96:	687b      	ldr	r3, [r7, #4]
 8101a98:	2200      	movs	r2, #0
 8101a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8101a9e:	2300      	movs	r3, #0
}
 8101aa0:	4618      	mov	r0, r3
 8101aa2:	3714      	adds	r7, #20
 8101aa4:	46bd      	mov	sp, r7
 8101aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aaa:	4770      	bx	lr
 8101aac:	40010000 	.word	0x40010000
 8101ab0:	40010400 	.word	0x40010400
 8101ab4:	40000400 	.word	0x40000400
 8101ab8:	40000800 	.word	0x40000800
 8101abc:	40000c00 	.word	0x40000c00
 8101ac0:	40001800 	.word	0x40001800
 8101ac4:	40014000 	.word	0x40014000

08101ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8101ac8:	b480      	push	{r7}
 8101aca:	b083      	sub	sp, #12
 8101acc:	af00      	add	r7, sp, #0
 8101ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8101ad0:	bf00      	nop
 8101ad2:	370c      	adds	r7, #12
 8101ad4:	46bd      	mov	sp, r7
 8101ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ada:	4770      	bx	lr

08101adc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8101adc:	b480      	push	{r7}
 8101ade:	b083      	sub	sp, #12
 8101ae0:	af00      	add	r7, sp, #0
 8101ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8101ae4:	bf00      	nop
 8101ae6:	370c      	adds	r7, #12
 8101ae8:	46bd      	mov	sp, r7
 8101aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aee:	4770      	bx	lr

08101af0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8101af0:	b480      	push	{r7}
 8101af2:	b083      	sub	sp, #12
 8101af4:	af00      	add	r7, sp, #0
 8101af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8101af8:	bf00      	nop
 8101afa:	370c      	adds	r7, #12
 8101afc:	46bd      	mov	sp, r7
 8101afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b02:	4770      	bx	lr

08101b04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8101b04:	b580      	push	{r7, lr}
 8101b06:	b08a      	sub	sp, #40	; 0x28
 8101b08:	af02      	add	r7, sp, #8
 8101b0a:	60f8      	str	r0, [r7, #12]
 8101b0c:	60b9      	str	r1, [r7, #8]
 8101b0e:	603b      	str	r3, [r7, #0]
 8101b10:	4613      	mov	r3, r2
 8101b12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8101b14:	68fb      	ldr	r3, [r7, #12]
 8101b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101b1a:	2b20      	cmp	r3, #32
 8101b1c:	d17b      	bne.n	8101c16 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8101b1e:	68bb      	ldr	r3, [r7, #8]
 8101b20:	2b00      	cmp	r3, #0
 8101b22:	d002      	beq.n	8101b2a <HAL_UART_Transmit+0x26>
 8101b24:	88fb      	ldrh	r3, [r7, #6]
 8101b26:	2b00      	cmp	r3, #0
 8101b28:	d101      	bne.n	8101b2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8101b2a:	2301      	movs	r3, #1
 8101b2c:	e074      	b.n	8101c18 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8101b2e:	68fb      	ldr	r3, [r7, #12]
 8101b30:	2200      	movs	r2, #0
 8101b32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8101b36:	68fb      	ldr	r3, [r7, #12]
 8101b38:	2221      	movs	r2, #33	; 0x21
 8101b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8101b3e:	f7fe fee5 	bl	810090c <HAL_GetTick>
 8101b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8101b44:	68fb      	ldr	r3, [r7, #12]
 8101b46:	88fa      	ldrh	r2, [r7, #6]
 8101b48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8101b4c:	68fb      	ldr	r3, [r7, #12]
 8101b4e:	88fa      	ldrh	r2, [r7, #6]
 8101b50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8101b54:	68fb      	ldr	r3, [r7, #12]
 8101b56:	689b      	ldr	r3, [r3, #8]
 8101b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101b5c:	d108      	bne.n	8101b70 <HAL_UART_Transmit+0x6c>
 8101b5e:	68fb      	ldr	r3, [r7, #12]
 8101b60:	691b      	ldr	r3, [r3, #16]
 8101b62:	2b00      	cmp	r3, #0
 8101b64:	d104      	bne.n	8101b70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8101b66:	2300      	movs	r3, #0
 8101b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8101b6a:	68bb      	ldr	r3, [r7, #8]
 8101b6c:	61bb      	str	r3, [r7, #24]
 8101b6e:	e003      	b.n	8101b78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8101b70:	68bb      	ldr	r3, [r7, #8]
 8101b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8101b74:	2300      	movs	r3, #0
 8101b76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8101b78:	e030      	b.n	8101bdc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8101b7a:	683b      	ldr	r3, [r7, #0]
 8101b7c:	9300      	str	r3, [sp, #0]
 8101b7e:	697b      	ldr	r3, [r7, #20]
 8101b80:	2200      	movs	r2, #0
 8101b82:	2180      	movs	r1, #128	; 0x80
 8101b84:	68f8      	ldr	r0, [r7, #12]
 8101b86:	f000 f84b 	bl	8101c20 <UART_WaitOnFlagUntilTimeout>
 8101b8a:	4603      	mov	r3, r0
 8101b8c:	2b00      	cmp	r3, #0
 8101b8e:	d005      	beq.n	8101b9c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8101b90:	68fb      	ldr	r3, [r7, #12]
 8101b92:	2220      	movs	r2, #32
 8101b94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8101b98:	2303      	movs	r3, #3
 8101b9a:	e03d      	b.n	8101c18 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8101b9c:	69fb      	ldr	r3, [r7, #28]
 8101b9e:	2b00      	cmp	r3, #0
 8101ba0:	d10b      	bne.n	8101bba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8101ba2:	69bb      	ldr	r3, [r7, #24]
 8101ba4:	881b      	ldrh	r3, [r3, #0]
 8101ba6:	461a      	mov	r2, r3
 8101ba8:	68fb      	ldr	r3, [r7, #12]
 8101baa:	681b      	ldr	r3, [r3, #0]
 8101bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8101bb0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8101bb2:	69bb      	ldr	r3, [r7, #24]
 8101bb4:	3302      	adds	r3, #2
 8101bb6:	61bb      	str	r3, [r7, #24]
 8101bb8:	e007      	b.n	8101bca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8101bba:	69fb      	ldr	r3, [r7, #28]
 8101bbc:	781a      	ldrb	r2, [r3, #0]
 8101bbe:	68fb      	ldr	r3, [r7, #12]
 8101bc0:	681b      	ldr	r3, [r3, #0]
 8101bc2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8101bc4:	69fb      	ldr	r3, [r7, #28]
 8101bc6:	3301      	adds	r3, #1
 8101bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8101bca:	68fb      	ldr	r3, [r7, #12]
 8101bcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8101bd0:	b29b      	uxth	r3, r3
 8101bd2:	3b01      	subs	r3, #1
 8101bd4:	b29a      	uxth	r2, r3
 8101bd6:	68fb      	ldr	r3, [r7, #12]
 8101bd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8101bdc:	68fb      	ldr	r3, [r7, #12]
 8101bde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8101be2:	b29b      	uxth	r3, r3
 8101be4:	2b00      	cmp	r3, #0
 8101be6:	d1c8      	bne.n	8101b7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8101be8:	683b      	ldr	r3, [r7, #0]
 8101bea:	9300      	str	r3, [sp, #0]
 8101bec:	697b      	ldr	r3, [r7, #20]
 8101bee:	2200      	movs	r2, #0
 8101bf0:	2140      	movs	r1, #64	; 0x40
 8101bf2:	68f8      	ldr	r0, [r7, #12]
 8101bf4:	f000 f814 	bl	8101c20 <UART_WaitOnFlagUntilTimeout>
 8101bf8:	4603      	mov	r3, r0
 8101bfa:	2b00      	cmp	r3, #0
 8101bfc:	d005      	beq.n	8101c0a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8101bfe:	68fb      	ldr	r3, [r7, #12]
 8101c00:	2220      	movs	r2, #32
 8101c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8101c06:	2303      	movs	r3, #3
 8101c08:	e006      	b.n	8101c18 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8101c0a:	68fb      	ldr	r3, [r7, #12]
 8101c0c:	2220      	movs	r2, #32
 8101c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8101c12:	2300      	movs	r3, #0
 8101c14:	e000      	b.n	8101c18 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8101c16:	2302      	movs	r3, #2
  }
}
 8101c18:	4618      	mov	r0, r3
 8101c1a:	3720      	adds	r7, #32
 8101c1c:	46bd      	mov	sp, r7
 8101c1e:	bd80      	pop	{r7, pc}

08101c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8101c20:	b580      	push	{r7, lr}
 8101c22:	b084      	sub	sp, #16
 8101c24:	af00      	add	r7, sp, #0
 8101c26:	60f8      	str	r0, [r7, #12]
 8101c28:	60b9      	str	r1, [r7, #8]
 8101c2a:	603b      	str	r3, [r7, #0]
 8101c2c:	4613      	mov	r3, r2
 8101c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8101c30:	e049      	b.n	8101cc6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8101c32:	69bb      	ldr	r3, [r7, #24]
 8101c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101c38:	d045      	beq.n	8101cc6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8101c3a:	f7fe fe67 	bl	810090c <HAL_GetTick>
 8101c3e:	4602      	mov	r2, r0
 8101c40:	683b      	ldr	r3, [r7, #0]
 8101c42:	1ad3      	subs	r3, r2, r3
 8101c44:	69ba      	ldr	r2, [r7, #24]
 8101c46:	429a      	cmp	r2, r3
 8101c48:	d302      	bcc.n	8101c50 <UART_WaitOnFlagUntilTimeout+0x30>
 8101c4a:	69bb      	ldr	r3, [r7, #24]
 8101c4c:	2b00      	cmp	r3, #0
 8101c4e:	d101      	bne.n	8101c54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8101c50:	2303      	movs	r3, #3
 8101c52:	e048      	b.n	8101ce6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8101c54:	68fb      	ldr	r3, [r7, #12]
 8101c56:	681b      	ldr	r3, [r3, #0]
 8101c58:	681b      	ldr	r3, [r3, #0]
 8101c5a:	f003 0304 	and.w	r3, r3, #4
 8101c5e:	2b00      	cmp	r3, #0
 8101c60:	d031      	beq.n	8101cc6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8101c62:	68fb      	ldr	r3, [r7, #12]
 8101c64:	681b      	ldr	r3, [r3, #0]
 8101c66:	69db      	ldr	r3, [r3, #28]
 8101c68:	f003 0308 	and.w	r3, r3, #8
 8101c6c:	2b08      	cmp	r3, #8
 8101c6e:	d110      	bne.n	8101c92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8101c70:	68fb      	ldr	r3, [r7, #12]
 8101c72:	681b      	ldr	r3, [r3, #0]
 8101c74:	2208      	movs	r2, #8
 8101c76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8101c78:	68f8      	ldr	r0, [r7, #12]
 8101c7a:	f000 f838 	bl	8101cee <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8101c7e:	68fb      	ldr	r3, [r7, #12]
 8101c80:	2208      	movs	r2, #8
 8101c82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8101c86:	68fb      	ldr	r3, [r7, #12]
 8101c88:	2200      	movs	r2, #0
 8101c8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8101c8e:	2301      	movs	r3, #1
 8101c90:	e029      	b.n	8101ce6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8101c92:	68fb      	ldr	r3, [r7, #12]
 8101c94:	681b      	ldr	r3, [r3, #0]
 8101c96:	69db      	ldr	r3, [r3, #28]
 8101c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8101c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8101ca0:	d111      	bne.n	8101cc6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8101ca2:	68fb      	ldr	r3, [r7, #12]
 8101ca4:	681b      	ldr	r3, [r3, #0]
 8101ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8101cac:	68f8      	ldr	r0, [r7, #12]
 8101cae:	f000 f81e 	bl	8101cee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8101cb2:	68fb      	ldr	r3, [r7, #12]
 8101cb4:	2220      	movs	r2, #32
 8101cb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8101cba:	68fb      	ldr	r3, [r7, #12]
 8101cbc:	2200      	movs	r2, #0
 8101cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8101cc2:	2303      	movs	r3, #3
 8101cc4:	e00f      	b.n	8101ce6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8101cc6:	68fb      	ldr	r3, [r7, #12]
 8101cc8:	681b      	ldr	r3, [r3, #0]
 8101cca:	69da      	ldr	r2, [r3, #28]
 8101ccc:	68bb      	ldr	r3, [r7, #8]
 8101cce:	4013      	ands	r3, r2
 8101cd0:	68ba      	ldr	r2, [r7, #8]
 8101cd2:	429a      	cmp	r2, r3
 8101cd4:	bf0c      	ite	eq
 8101cd6:	2301      	moveq	r3, #1
 8101cd8:	2300      	movne	r3, #0
 8101cda:	b2db      	uxtb	r3, r3
 8101cdc:	461a      	mov	r2, r3
 8101cde:	79fb      	ldrb	r3, [r7, #7]
 8101ce0:	429a      	cmp	r2, r3
 8101ce2:	d0a6      	beq.n	8101c32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8101ce4:	2300      	movs	r3, #0
}
 8101ce6:	4618      	mov	r0, r3
 8101ce8:	3710      	adds	r7, #16
 8101cea:	46bd      	mov	sp, r7
 8101cec:	bd80      	pop	{r7, pc}

08101cee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8101cee:	b480      	push	{r7}
 8101cf0:	b095      	sub	sp, #84	; 0x54
 8101cf2:	af00      	add	r7, sp, #0
 8101cf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8101cf6:	687b      	ldr	r3, [r7, #4]
 8101cf8:	681b      	ldr	r3, [r3, #0]
 8101cfa:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101cfe:	e853 3f00 	ldrex	r3, [r3]
 8101d02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8101d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101d06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8101d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8101d0c:	687b      	ldr	r3, [r7, #4]
 8101d0e:	681b      	ldr	r3, [r3, #0]
 8101d10:	461a      	mov	r2, r3
 8101d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101d14:	643b      	str	r3, [r7, #64]	; 0x40
 8101d16:	63fa      	str	r2, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101d18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8101d1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8101d1c:	e841 2300 	strex	r3, r2, [r1]
 8101d20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8101d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101d24:	2b00      	cmp	r3, #0
 8101d26:	d1e6      	bne.n	8101cf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8101d28:	687b      	ldr	r3, [r7, #4]
 8101d2a:	681b      	ldr	r3, [r3, #0]
 8101d2c:	3308      	adds	r3, #8
 8101d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101d30:	6a3b      	ldr	r3, [r7, #32]
 8101d32:	e853 3f00 	ldrex	r3, [r3]
 8101d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8101d38:	69fb      	ldr	r3, [r7, #28]
 8101d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8101d3e:	f023 0301 	bic.w	r3, r3, #1
 8101d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8101d44:	687b      	ldr	r3, [r7, #4]
 8101d46:	681b      	ldr	r3, [r3, #0]
 8101d48:	3308      	adds	r3, #8
 8101d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8101d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8101d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8101d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101d54:	e841 2300 	strex	r3, r2, [r1]
 8101d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8101d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d5c:	2b00      	cmp	r3, #0
 8101d5e:	d1e3      	bne.n	8101d28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8101d60:	687b      	ldr	r3, [r7, #4]
 8101d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101d64:	2b01      	cmp	r3, #1
 8101d66:	d118      	bne.n	8101d9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8101d68:	687b      	ldr	r3, [r7, #4]
 8101d6a:	681b      	ldr	r3, [r3, #0]
 8101d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101d6e:	68fb      	ldr	r3, [r7, #12]
 8101d70:	e853 3f00 	ldrex	r3, [r3]
 8101d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8101d76:	68bb      	ldr	r3, [r7, #8]
 8101d78:	f023 0310 	bic.w	r3, r3, #16
 8101d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8101d7e:	687b      	ldr	r3, [r7, #4]
 8101d80:	681b      	ldr	r3, [r3, #0]
 8101d82:	461a      	mov	r2, r3
 8101d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101d86:	61bb      	str	r3, [r7, #24]
 8101d88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101d8a:	6979      	ldr	r1, [r7, #20]
 8101d8c:	69ba      	ldr	r2, [r7, #24]
 8101d8e:	e841 2300 	strex	r3, r2, [r1]
 8101d92:	613b      	str	r3, [r7, #16]
   return(result);
 8101d94:	693b      	ldr	r3, [r7, #16]
 8101d96:	2b00      	cmp	r3, #0
 8101d98:	d1e6      	bne.n	8101d68 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8101d9a:	687b      	ldr	r3, [r7, #4]
 8101d9c:	2220      	movs	r2, #32
 8101d9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8101da2:	687b      	ldr	r3, [r7, #4]
 8101da4:	2200      	movs	r2, #0
 8101da6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8101da8:	687b      	ldr	r3, [r7, #4]
 8101daa:	2200      	movs	r2, #0
 8101dac:	675a      	str	r2, [r3, #116]	; 0x74
}
 8101dae:	bf00      	nop
 8101db0:	3754      	adds	r7, #84	; 0x54
 8101db2:	46bd      	mov	sp, r7
 8101db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101db8:	4770      	bx	lr
	...

08101dbc <__errno>:
 8101dbc:	4b01      	ldr	r3, [pc, #4]	; (8101dc4 <__errno+0x8>)
 8101dbe:	6818      	ldr	r0, [r3, #0]
 8101dc0:	4770      	bx	lr
 8101dc2:	bf00      	nop
 8101dc4:	10000010 	.word	0x10000010

08101dc8 <__libc_init_array>:
 8101dc8:	b570      	push	{r4, r5, r6, lr}
 8101dca:	4d0d      	ldr	r5, [pc, #52]	; (8101e00 <__libc_init_array+0x38>)
 8101dcc:	4c0d      	ldr	r4, [pc, #52]	; (8101e04 <__libc_init_array+0x3c>)
 8101dce:	1b64      	subs	r4, r4, r5
 8101dd0:	10a4      	asrs	r4, r4, #2
 8101dd2:	2600      	movs	r6, #0
 8101dd4:	42a6      	cmp	r6, r4
 8101dd6:	d109      	bne.n	8101dec <__libc_init_array+0x24>
 8101dd8:	4d0b      	ldr	r5, [pc, #44]	; (8101e08 <__libc_init_array+0x40>)
 8101dda:	4c0c      	ldr	r4, [pc, #48]	; (8101e0c <__libc_init_array+0x44>)
 8101ddc:	f000 fd1e 	bl	810281c <_init>
 8101de0:	1b64      	subs	r4, r4, r5
 8101de2:	10a4      	asrs	r4, r4, #2
 8101de4:	2600      	movs	r6, #0
 8101de6:	42a6      	cmp	r6, r4
 8101de8:	d105      	bne.n	8101df6 <__libc_init_array+0x2e>
 8101dea:	bd70      	pop	{r4, r5, r6, pc}
 8101dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8101df0:	4798      	blx	r3
 8101df2:	3601      	adds	r6, #1
 8101df4:	e7ee      	b.n	8101dd4 <__libc_init_array+0xc>
 8101df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8101dfa:	4798      	blx	r3
 8101dfc:	3601      	adds	r6, #1
 8101dfe:	e7f2      	b.n	8101de6 <__libc_init_array+0x1e>
 8101e00:	081028b8 	.word	0x081028b8
 8101e04:	081028b8 	.word	0x081028b8
 8101e08:	081028b8 	.word	0x081028b8
 8101e0c:	081028bc 	.word	0x081028bc

08101e10 <memset>:
 8101e10:	4402      	add	r2, r0
 8101e12:	4603      	mov	r3, r0
 8101e14:	4293      	cmp	r3, r2
 8101e16:	d100      	bne.n	8101e1a <memset+0xa>
 8101e18:	4770      	bx	lr
 8101e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8101e1e:	e7f9      	b.n	8101e14 <memset+0x4>

08101e20 <_puts_r>:
 8101e20:	b570      	push	{r4, r5, r6, lr}
 8101e22:	460e      	mov	r6, r1
 8101e24:	4605      	mov	r5, r0
 8101e26:	b118      	cbz	r0, 8101e30 <_puts_r+0x10>
 8101e28:	6983      	ldr	r3, [r0, #24]
 8101e2a:	b90b      	cbnz	r3, 8101e30 <_puts_r+0x10>
 8101e2c:	f000 fa48 	bl	81022c0 <__sinit>
 8101e30:	69ab      	ldr	r3, [r5, #24]
 8101e32:	68ac      	ldr	r4, [r5, #8]
 8101e34:	b913      	cbnz	r3, 8101e3c <_puts_r+0x1c>
 8101e36:	4628      	mov	r0, r5
 8101e38:	f000 fa42 	bl	81022c0 <__sinit>
 8101e3c:	4b2c      	ldr	r3, [pc, #176]	; (8101ef0 <_puts_r+0xd0>)
 8101e3e:	429c      	cmp	r4, r3
 8101e40:	d120      	bne.n	8101e84 <_puts_r+0x64>
 8101e42:	686c      	ldr	r4, [r5, #4]
 8101e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8101e46:	07db      	lsls	r3, r3, #31
 8101e48:	d405      	bmi.n	8101e56 <_puts_r+0x36>
 8101e4a:	89a3      	ldrh	r3, [r4, #12]
 8101e4c:	0598      	lsls	r0, r3, #22
 8101e4e:	d402      	bmi.n	8101e56 <_puts_r+0x36>
 8101e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8101e52:	f000 fad3 	bl	81023fc <__retarget_lock_acquire_recursive>
 8101e56:	89a3      	ldrh	r3, [r4, #12]
 8101e58:	0719      	lsls	r1, r3, #28
 8101e5a:	d51d      	bpl.n	8101e98 <_puts_r+0x78>
 8101e5c:	6923      	ldr	r3, [r4, #16]
 8101e5e:	b1db      	cbz	r3, 8101e98 <_puts_r+0x78>
 8101e60:	3e01      	subs	r6, #1
 8101e62:	68a3      	ldr	r3, [r4, #8]
 8101e64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8101e68:	3b01      	subs	r3, #1
 8101e6a:	60a3      	str	r3, [r4, #8]
 8101e6c:	bb39      	cbnz	r1, 8101ebe <_puts_r+0x9e>
 8101e6e:	2b00      	cmp	r3, #0
 8101e70:	da38      	bge.n	8101ee4 <_puts_r+0xc4>
 8101e72:	4622      	mov	r2, r4
 8101e74:	210a      	movs	r1, #10
 8101e76:	4628      	mov	r0, r5
 8101e78:	f000 f848 	bl	8101f0c <__swbuf_r>
 8101e7c:	3001      	adds	r0, #1
 8101e7e:	d011      	beq.n	8101ea4 <_puts_r+0x84>
 8101e80:	250a      	movs	r5, #10
 8101e82:	e011      	b.n	8101ea8 <_puts_r+0x88>
 8101e84:	4b1b      	ldr	r3, [pc, #108]	; (8101ef4 <_puts_r+0xd4>)
 8101e86:	429c      	cmp	r4, r3
 8101e88:	d101      	bne.n	8101e8e <_puts_r+0x6e>
 8101e8a:	68ac      	ldr	r4, [r5, #8]
 8101e8c:	e7da      	b.n	8101e44 <_puts_r+0x24>
 8101e8e:	4b1a      	ldr	r3, [pc, #104]	; (8101ef8 <_puts_r+0xd8>)
 8101e90:	429c      	cmp	r4, r3
 8101e92:	bf08      	it	eq
 8101e94:	68ec      	ldreq	r4, [r5, #12]
 8101e96:	e7d5      	b.n	8101e44 <_puts_r+0x24>
 8101e98:	4621      	mov	r1, r4
 8101e9a:	4628      	mov	r0, r5
 8101e9c:	f000 f888 	bl	8101fb0 <__swsetup_r>
 8101ea0:	2800      	cmp	r0, #0
 8101ea2:	d0dd      	beq.n	8101e60 <_puts_r+0x40>
 8101ea4:	f04f 35ff 	mov.w	r5, #4294967295
 8101ea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8101eaa:	07da      	lsls	r2, r3, #31
 8101eac:	d405      	bmi.n	8101eba <_puts_r+0x9a>
 8101eae:	89a3      	ldrh	r3, [r4, #12]
 8101eb0:	059b      	lsls	r3, r3, #22
 8101eb2:	d402      	bmi.n	8101eba <_puts_r+0x9a>
 8101eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8101eb6:	f000 faa2 	bl	81023fe <__retarget_lock_release_recursive>
 8101eba:	4628      	mov	r0, r5
 8101ebc:	bd70      	pop	{r4, r5, r6, pc}
 8101ebe:	2b00      	cmp	r3, #0
 8101ec0:	da04      	bge.n	8101ecc <_puts_r+0xac>
 8101ec2:	69a2      	ldr	r2, [r4, #24]
 8101ec4:	429a      	cmp	r2, r3
 8101ec6:	dc06      	bgt.n	8101ed6 <_puts_r+0xb6>
 8101ec8:	290a      	cmp	r1, #10
 8101eca:	d004      	beq.n	8101ed6 <_puts_r+0xb6>
 8101ecc:	6823      	ldr	r3, [r4, #0]
 8101ece:	1c5a      	adds	r2, r3, #1
 8101ed0:	6022      	str	r2, [r4, #0]
 8101ed2:	7019      	strb	r1, [r3, #0]
 8101ed4:	e7c5      	b.n	8101e62 <_puts_r+0x42>
 8101ed6:	4622      	mov	r2, r4
 8101ed8:	4628      	mov	r0, r5
 8101eda:	f000 f817 	bl	8101f0c <__swbuf_r>
 8101ede:	3001      	adds	r0, #1
 8101ee0:	d1bf      	bne.n	8101e62 <_puts_r+0x42>
 8101ee2:	e7df      	b.n	8101ea4 <_puts_r+0x84>
 8101ee4:	6823      	ldr	r3, [r4, #0]
 8101ee6:	250a      	movs	r5, #10
 8101ee8:	1c5a      	adds	r2, r3, #1
 8101eea:	6022      	str	r2, [r4, #0]
 8101eec:	701d      	strb	r5, [r3, #0]
 8101eee:	e7db      	b.n	8101ea8 <_puts_r+0x88>
 8101ef0:	08102878 	.word	0x08102878
 8101ef4:	08102898 	.word	0x08102898
 8101ef8:	08102858 	.word	0x08102858

08101efc <puts>:
 8101efc:	4b02      	ldr	r3, [pc, #8]	; (8101f08 <puts+0xc>)
 8101efe:	4601      	mov	r1, r0
 8101f00:	6818      	ldr	r0, [r3, #0]
 8101f02:	f7ff bf8d 	b.w	8101e20 <_puts_r>
 8101f06:	bf00      	nop
 8101f08:	10000010 	.word	0x10000010

08101f0c <__swbuf_r>:
 8101f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101f0e:	460e      	mov	r6, r1
 8101f10:	4614      	mov	r4, r2
 8101f12:	4605      	mov	r5, r0
 8101f14:	b118      	cbz	r0, 8101f1e <__swbuf_r+0x12>
 8101f16:	6983      	ldr	r3, [r0, #24]
 8101f18:	b90b      	cbnz	r3, 8101f1e <__swbuf_r+0x12>
 8101f1a:	f000 f9d1 	bl	81022c0 <__sinit>
 8101f1e:	4b21      	ldr	r3, [pc, #132]	; (8101fa4 <__swbuf_r+0x98>)
 8101f20:	429c      	cmp	r4, r3
 8101f22:	d12b      	bne.n	8101f7c <__swbuf_r+0x70>
 8101f24:	686c      	ldr	r4, [r5, #4]
 8101f26:	69a3      	ldr	r3, [r4, #24]
 8101f28:	60a3      	str	r3, [r4, #8]
 8101f2a:	89a3      	ldrh	r3, [r4, #12]
 8101f2c:	071a      	lsls	r2, r3, #28
 8101f2e:	d52f      	bpl.n	8101f90 <__swbuf_r+0x84>
 8101f30:	6923      	ldr	r3, [r4, #16]
 8101f32:	b36b      	cbz	r3, 8101f90 <__swbuf_r+0x84>
 8101f34:	6923      	ldr	r3, [r4, #16]
 8101f36:	6820      	ldr	r0, [r4, #0]
 8101f38:	1ac0      	subs	r0, r0, r3
 8101f3a:	6963      	ldr	r3, [r4, #20]
 8101f3c:	b2f6      	uxtb	r6, r6
 8101f3e:	4283      	cmp	r3, r0
 8101f40:	4637      	mov	r7, r6
 8101f42:	dc04      	bgt.n	8101f4e <__swbuf_r+0x42>
 8101f44:	4621      	mov	r1, r4
 8101f46:	4628      	mov	r0, r5
 8101f48:	f000 f926 	bl	8102198 <_fflush_r>
 8101f4c:	bb30      	cbnz	r0, 8101f9c <__swbuf_r+0x90>
 8101f4e:	68a3      	ldr	r3, [r4, #8]
 8101f50:	3b01      	subs	r3, #1
 8101f52:	60a3      	str	r3, [r4, #8]
 8101f54:	6823      	ldr	r3, [r4, #0]
 8101f56:	1c5a      	adds	r2, r3, #1
 8101f58:	6022      	str	r2, [r4, #0]
 8101f5a:	701e      	strb	r6, [r3, #0]
 8101f5c:	6963      	ldr	r3, [r4, #20]
 8101f5e:	3001      	adds	r0, #1
 8101f60:	4283      	cmp	r3, r0
 8101f62:	d004      	beq.n	8101f6e <__swbuf_r+0x62>
 8101f64:	89a3      	ldrh	r3, [r4, #12]
 8101f66:	07db      	lsls	r3, r3, #31
 8101f68:	d506      	bpl.n	8101f78 <__swbuf_r+0x6c>
 8101f6a:	2e0a      	cmp	r6, #10
 8101f6c:	d104      	bne.n	8101f78 <__swbuf_r+0x6c>
 8101f6e:	4621      	mov	r1, r4
 8101f70:	4628      	mov	r0, r5
 8101f72:	f000 f911 	bl	8102198 <_fflush_r>
 8101f76:	b988      	cbnz	r0, 8101f9c <__swbuf_r+0x90>
 8101f78:	4638      	mov	r0, r7
 8101f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8101f7c:	4b0a      	ldr	r3, [pc, #40]	; (8101fa8 <__swbuf_r+0x9c>)
 8101f7e:	429c      	cmp	r4, r3
 8101f80:	d101      	bne.n	8101f86 <__swbuf_r+0x7a>
 8101f82:	68ac      	ldr	r4, [r5, #8]
 8101f84:	e7cf      	b.n	8101f26 <__swbuf_r+0x1a>
 8101f86:	4b09      	ldr	r3, [pc, #36]	; (8101fac <__swbuf_r+0xa0>)
 8101f88:	429c      	cmp	r4, r3
 8101f8a:	bf08      	it	eq
 8101f8c:	68ec      	ldreq	r4, [r5, #12]
 8101f8e:	e7ca      	b.n	8101f26 <__swbuf_r+0x1a>
 8101f90:	4621      	mov	r1, r4
 8101f92:	4628      	mov	r0, r5
 8101f94:	f000 f80c 	bl	8101fb0 <__swsetup_r>
 8101f98:	2800      	cmp	r0, #0
 8101f9a:	d0cb      	beq.n	8101f34 <__swbuf_r+0x28>
 8101f9c:	f04f 37ff 	mov.w	r7, #4294967295
 8101fa0:	e7ea      	b.n	8101f78 <__swbuf_r+0x6c>
 8101fa2:	bf00      	nop
 8101fa4:	08102878 	.word	0x08102878
 8101fa8:	08102898 	.word	0x08102898
 8101fac:	08102858 	.word	0x08102858

08101fb0 <__swsetup_r>:
 8101fb0:	4b32      	ldr	r3, [pc, #200]	; (810207c <__swsetup_r+0xcc>)
 8101fb2:	b570      	push	{r4, r5, r6, lr}
 8101fb4:	681d      	ldr	r5, [r3, #0]
 8101fb6:	4606      	mov	r6, r0
 8101fb8:	460c      	mov	r4, r1
 8101fba:	b125      	cbz	r5, 8101fc6 <__swsetup_r+0x16>
 8101fbc:	69ab      	ldr	r3, [r5, #24]
 8101fbe:	b913      	cbnz	r3, 8101fc6 <__swsetup_r+0x16>
 8101fc0:	4628      	mov	r0, r5
 8101fc2:	f000 f97d 	bl	81022c0 <__sinit>
 8101fc6:	4b2e      	ldr	r3, [pc, #184]	; (8102080 <__swsetup_r+0xd0>)
 8101fc8:	429c      	cmp	r4, r3
 8101fca:	d10f      	bne.n	8101fec <__swsetup_r+0x3c>
 8101fcc:	686c      	ldr	r4, [r5, #4]
 8101fce:	89a3      	ldrh	r3, [r4, #12]
 8101fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8101fd4:	0719      	lsls	r1, r3, #28
 8101fd6:	d42c      	bmi.n	8102032 <__swsetup_r+0x82>
 8101fd8:	06dd      	lsls	r5, r3, #27
 8101fda:	d411      	bmi.n	8102000 <__swsetup_r+0x50>
 8101fdc:	2309      	movs	r3, #9
 8101fde:	6033      	str	r3, [r6, #0]
 8101fe0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8101fe4:	81a3      	strh	r3, [r4, #12]
 8101fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8101fea:	e03e      	b.n	810206a <__swsetup_r+0xba>
 8101fec:	4b25      	ldr	r3, [pc, #148]	; (8102084 <__swsetup_r+0xd4>)
 8101fee:	429c      	cmp	r4, r3
 8101ff0:	d101      	bne.n	8101ff6 <__swsetup_r+0x46>
 8101ff2:	68ac      	ldr	r4, [r5, #8]
 8101ff4:	e7eb      	b.n	8101fce <__swsetup_r+0x1e>
 8101ff6:	4b24      	ldr	r3, [pc, #144]	; (8102088 <__swsetup_r+0xd8>)
 8101ff8:	429c      	cmp	r4, r3
 8101ffa:	bf08      	it	eq
 8101ffc:	68ec      	ldreq	r4, [r5, #12]
 8101ffe:	e7e6      	b.n	8101fce <__swsetup_r+0x1e>
 8102000:	0758      	lsls	r0, r3, #29
 8102002:	d512      	bpl.n	810202a <__swsetup_r+0x7a>
 8102004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8102006:	b141      	cbz	r1, 810201a <__swsetup_r+0x6a>
 8102008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810200c:	4299      	cmp	r1, r3
 810200e:	d002      	beq.n	8102016 <__swsetup_r+0x66>
 8102010:	4630      	mov	r0, r6
 8102012:	f000 fa5b 	bl	81024cc <_free_r>
 8102016:	2300      	movs	r3, #0
 8102018:	6363      	str	r3, [r4, #52]	; 0x34
 810201a:	89a3      	ldrh	r3, [r4, #12]
 810201c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8102020:	81a3      	strh	r3, [r4, #12]
 8102022:	2300      	movs	r3, #0
 8102024:	6063      	str	r3, [r4, #4]
 8102026:	6923      	ldr	r3, [r4, #16]
 8102028:	6023      	str	r3, [r4, #0]
 810202a:	89a3      	ldrh	r3, [r4, #12]
 810202c:	f043 0308 	orr.w	r3, r3, #8
 8102030:	81a3      	strh	r3, [r4, #12]
 8102032:	6923      	ldr	r3, [r4, #16]
 8102034:	b94b      	cbnz	r3, 810204a <__swsetup_r+0x9a>
 8102036:	89a3      	ldrh	r3, [r4, #12]
 8102038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810203c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102040:	d003      	beq.n	810204a <__swsetup_r+0x9a>
 8102042:	4621      	mov	r1, r4
 8102044:	4630      	mov	r0, r6
 8102046:	f000 fa01 	bl	810244c <__smakebuf_r>
 810204a:	89a0      	ldrh	r0, [r4, #12]
 810204c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8102050:	f010 0301 	ands.w	r3, r0, #1
 8102054:	d00a      	beq.n	810206c <__swsetup_r+0xbc>
 8102056:	2300      	movs	r3, #0
 8102058:	60a3      	str	r3, [r4, #8]
 810205a:	6963      	ldr	r3, [r4, #20]
 810205c:	425b      	negs	r3, r3
 810205e:	61a3      	str	r3, [r4, #24]
 8102060:	6923      	ldr	r3, [r4, #16]
 8102062:	b943      	cbnz	r3, 8102076 <__swsetup_r+0xc6>
 8102064:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8102068:	d1ba      	bne.n	8101fe0 <__swsetup_r+0x30>
 810206a:	bd70      	pop	{r4, r5, r6, pc}
 810206c:	0781      	lsls	r1, r0, #30
 810206e:	bf58      	it	pl
 8102070:	6963      	ldrpl	r3, [r4, #20]
 8102072:	60a3      	str	r3, [r4, #8]
 8102074:	e7f4      	b.n	8102060 <__swsetup_r+0xb0>
 8102076:	2000      	movs	r0, #0
 8102078:	e7f7      	b.n	810206a <__swsetup_r+0xba>
 810207a:	bf00      	nop
 810207c:	10000010 	.word	0x10000010
 8102080:	08102878 	.word	0x08102878
 8102084:	08102898 	.word	0x08102898
 8102088:	08102858 	.word	0x08102858

0810208c <__sflush_r>:
 810208c:	898a      	ldrh	r2, [r1, #12]
 810208e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8102092:	4605      	mov	r5, r0
 8102094:	0710      	lsls	r0, r2, #28
 8102096:	460c      	mov	r4, r1
 8102098:	d458      	bmi.n	810214c <__sflush_r+0xc0>
 810209a:	684b      	ldr	r3, [r1, #4]
 810209c:	2b00      	cmp	r3, #0
 810209e:	dc05      	bgt.n	81020ac <__sflush_r+0x20>
 81020a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81020a2:	2b00      	cmp	r3, #0
 81020a4:	dc02      	bgt.n	81020ac <__sflush_r+0x20>
 81020a6:	2000      	movs	r0, #0
 81020a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81020ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81020ae:	2e00      	cmp	r6, #0
 81020b0:	d0f9      	beq.n	81020a6 <__sflush_r+0x1a>
 81020b2:	2300      	movs	r3, #0
 81020b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 81020b8:	682f      	ldr	r7, [r5, #0]
 81020ba:	602b      	str	r3, [r5, #0]
 81020bc:	d032      	beq.n	8102124 <__sflush_r+0x98>
 81020be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 81020c0:	89a3      	ldrh	r3, [r4, #12]
 81020c2:	075a      	lsls	r2, r3, #29
 81020c4:	d505      	bpl.n	81020d2 <__sflush_r+0x46>
 81020c6:	6863      	ldr	r3, [r4, #4]
 81020c8:	1ac0      	subs	r0, r0, r3
 81020ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 81020cc:	b10b      	cbz	r3, 81020d2 <__sflush_r+0x46>
 81020ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 81020d0:	1ac0      	subs	r0, r0, r3
 81020d2:	2300      	movs	r3, #0
 81020d4:	4602      	mov	r2, r0
 81020d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81020d8:	6a21      	ldr	r1, [r4, #32]
 81020da:	4628      	mov	r0, r5
 81020dc:	47b0      	blx	r6
 81020de:	1c43      	adds	r3, r0, #1
 81020e0:	89a3      	ldrh	r3, [r4, #12]
 81020e2:	d106      	bne.n	81020f2 <__sflush_r+0x66>
 81020e4:	6829      	ldr	r1, [r5, #0]
 81020e6:	291d      	cmp	r1, #29
 81020e8:	d82c      	bhi.n	8102144 <__sflush_r+0xb8>
 81020ea:	4a2a      	ldr	r2, [pc, #168]	; (8102194 <__sflush_r+0x108>)
 81020ec:	40ca      	lsrs	r2, r1
 81020ee:	07d6      	lsls	r6, r2, #31
 81020f0:	d528      	bpl.n	8102144 <__sflush_r+0xb8>
 81020f2:	2200      	movs	r2, #0
 81020f4:	6062      	str	r2, [r4, #4]
 81020f6:	04d9      	lsls	r1, r3, #19
 81020f8:	6922      	ldr	r2, [r4, #16]
 81020fa:	6022      	str	r2, [r4, #0]
 81020fc:	d504      	bpl.n	8102108 <__sflush_r+0x7c>
 81020fe:	1c42      	adds	r2, r0, #1
 8102100:	d101      	bne.n	8102106 <__sflush_r+0x7a>
 8102102:	682b      	ldr	r3, [r5, #0]
 8102104:	b903      	cbnz	r3, 8102108 <__sflush_r+0x7c>
 8102106:	6560      	str	r0, [r4, #84]	; 0x54
 8102108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810210a:	602f      	str	r7, [r5, #0]
 810210c:	2900      	cmp	r1, #0
 810210e:	d0ca      	beq.n	81020a6 <__sflush_r+0x1a>
 8102110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8102114:	4299      	cmp	r1, r3
 8102116:	d002      	beq.n	810211e <__sflush_r+0x92>
 8102118:	4628      	mov	r0, r5
 810211a:	f000 f9d7 	bl	81024cc <_free_r>
 810211e:	2000      	movs	r0, #0
 8102120:	6360      	str	r0, [r4, #52]	; 0x34
 8102122:	e7c1      	b.n	81020a8 <__sflush_r+0x1c>
 8102124:	6a21      	ldr	r1, [r4, #32]
 8102126:	2301      	movs	r3, #1
 8102128:	4628      	mov	r0, r5
 810212a:	47b0      	blx	r6
 810212c:	1c41      	adds	r1, r0, #1
 810212e:	d1c7      	bne.n	81020c0 <__sflush_r+0x34>
 8102130:	682b      	ldr	r3, [r5, #0]
 8102132:	2b00      	cmp	r3, #0
 8102134:	d0c4      	beq.n	81020c0 <__sflush_r+0x34>
 8102136:	2b1d      	cmp	r3, #29
 8102138:	d001      	beq.n	810213e <__sflush_r+0xb2>
 810213a:	2b16      	cmp	r3, #22
 810213c:	d101      	bne.n	8102142 <__sflush_r+0xb6>
 810213e:	602f      	str	r7, [r5, #0]
 8102140:	e7b1      	b.n	81020a6 <__sflush_r+0x1a>
 8102142:	89a3      	ldrh	r3, [r4, #12]
 8102144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102148:	81a3      	strh	r3, [r4, #12]
 810214a:	e7ad      	b.n	81020a8 <__sflush_r+0x1c>
 810214c:	690f      	ldr	r7, [r1, #16]
 810214e:	2f00      	cmp	r7, #0
 8102150:	d0a9      	beq.n	81020a6 <__sflush_r+0x1a>
 8102152:	0793      	lsls	r3, r2, #30
 8102154:	680e      	ldr	r6, [r1, #0]
 8102156:	bf08      	it	eq
 8102158:	694b      	ldreq	r3, [r1, #20]
 810215a:	600f      	str	r7, [r1, #0]
 810215c:	bf18      	it	ne
 810215e:	2300      	movne	r3, #0
 8102160:	eba6 0807 	sub.w	r8, r6, r7
 8102164:	608b      	str	r3, [r1, #8]
 8102166:	f1b8 0f00 	cmp.w	r8, #0
 810216a:	dd9c      	ble.n	81020a6 <__sflush_r+0x1a>
 810216c:	6a21      	ldr	r1, [r4, #32]
 810216e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8102170:	4643      	mov	r3, r8
 8102172:	463a      	mov	r2, r7
 8102174:	4628      	mov	r0, r5
 8102176:	47b0      	blx	r6
 8102178:	2800      	cmp	r0, #0
 810217a:	dc06      	bgt.n	810218a <__sflush_r+0xfe>
 810217c:	89a3      	ldrh	r3, [r4, #12]
 810217e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102182:	81a3      	strh	r3, [r4, #12]
 8102184:	f04f 30ff 	mov.w	r0, #4294967295
 8102188:	e78e      	b.n	81020a8 <__sflush_r+0x1c>
 810218a:	4407      	add	r7, r0
 810218c:	eba8 0800 	sub.w	r8, r8, r0
 8102190:	e7e9      	b.n	8102166 <__sflush_r+0xda>
 8102192:	bf00      	nop
 8102194:	20400001 	.word	0x20400001

08102198 <_fflush_r>:
 8102198:	b538      	push	{r3, r4, r5, lr}
 810219a:	690b      	ldr	r3, [r1, #16]
 810219c:	4605      	mov	r5, r0
 810219e:	460c      	mov	r4, r1
 81021a0:	b913      	cbnz	r3, 81021a8 <_fflush_r+0x10>
 81021a2:	2500      	movs	r5, #0
 81021a4:	4628      	mov	r0, r5
 81021a6:	bd38      	pop	{r3, r4, r5, pc}
 81021a8:	b118      	cbz	r0, 81021b2 <_fflush_r+0x1a>
 81021aa:	6983      	ldr	r3, [r0, #24]
 81021ac:	b90b      	cbnz	r3, 81021b2 <_fflush_r+0x1a>
 81021ae:	f000 f887 	bl	81022c0 <__sinit>
 81021b2:	4b14      	ldr	r3, [pc, #80]	; (8102204 <_fflush_r+0x6c>)
 81021b4:	429c      	cmp	r4, r3
 81021b6:	d11b      	bne.n	81021f0 <_fflush_r+0x58>
 81021b8:	686c      	ldr	r4, [r5, #4]
 81021ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81021be:	2b00      	cmp	r3, #0
 81021c0:	d0ef      	beq.n	81021a2 <_fflush_r+0xa>
 81021c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 81021c4:	07d0      	lsls	r0, r2, #31
 81021c6:	d404      	bmi.n	81021d2 <_fflush_r+0x3a>
 81021c8:	0599      	lsls	r1, r3, #22
 81021ca:	d402      	bmi.n	81021d2 <_fflush_r+0x3a>
 81021cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81021ce:	f000 f915 	bl	81023fc <__retarget_lock_acquire_recursive>
 81021d2:	4628      	mov	r0, r5
 81021d4:	4621      	mov	r1, r4
 81021d6:	f7ff ff59 	bl	810208c <__sflush_r>
 81021da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81021dc:	07da      	lsls	r2, r3, #31
 81021de:	4605      	mov	r5, r0
 81021e0:	d4e0      	bmi.n	81021a4 <_fflush_r+0xc>
 81021e2:	89a3      	ldrh	r3, [r4, #12]
 81021e4:	059b      	lsls	r3, r3, #22
 81021e6:	d4dd      	bmi.n	81021a4 <_fflush_r+0xc>
 81021e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81021ea:	f000 f908 	bl	81023fe <__retarget_lock_release_recursive>
 81021ee:	e7d9      	b.n	81021a4 <_fflush_r+0xc>
 81021f0:	4b05      	ldr	r3, [pc, #20]	; (8102208 <_fflush_r+0x70>)
 81021f2:	429c      	cmp	r4, r3
 81021f4:	d101      	bne.n	81021fa <_fflush_r+0x62>
 81021f6:	68ac      	ldr	r4, [r5, #8]
 81021f8:	e7df      	b.n	81021ba <_fflush_r+0x22>
 81021fa:	4b04      	ldr	r3, [pc, #16]	; (810220c <_fflush_r+0x74>)
 81021fc:	429c      	cmp	r4, r3
 81021fe:	bf08      	it	eq
 8102200:	68ec      	ldreq	r4, [r5, #12]
 8102202:	e7da      	b.n	81021ba <_fflush_r+0x22>
 8102204:	08102878 	.word	0x08102878
 8102208:	08102898 	.word	0x08102898
 810220c:	08102858 	.word	0x08102858

08102210 <std>:
 8102210:	2300      	movs	r3, #0
 8102212:	b510      	push	{r4, lr}
 8102214:	4604      	mov	r4, r0
 8102216:	e9c0 3300 	strd	r3, r3, [r0]
 810221a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810221e:	6083      	str	r3, [r0, #8]
 8102220:	8181      	strh	r1, [r0, #12]
 8102222:	6643      	str	r3, [r0, #100]	; 0x64
 8102224:	81c2      	strh	r2, [r0, #14]
 8102226:	6183      	str	r3, [r0, #24]
 8102228:	4619      	mov	r1, r3
 810222a:	2208      	movs	r2, #8
 810222c:	305c      	adds	r0, #92	; 0x5c
 810222e:	f7ff fdef 	bl	8101e10 <memset>
 8102232:	4b05      	ldr	r3, [pc, #20]	; (8102248 <std+0x38>)
 8102234:	6263      	str	r3, [r4, #36]	; 0x24
 8102236:	4b05      	ldr	r3, [pc, #20]	; (810224c <std+0x3c>)
 8102238:	62a3      	str	r3, [r4, #40]	; 0x28
 810223a:	4b05      	ldr	r3, [pc, #20]	; (8102250 <std+0x40>)
 810223c:	62e3      	str	r3, [r4, #44]	; 0x2c
 810223e:	4b05      	ldr	r3, [pc, #20]	; (8102254 <std+0x44>)
 8102240:	6224      	str	r4, [r4, #32]
 8102242:	6323      	str	r3, [r4, #48]	; 0x30
 8102244:	bd10      	pop	{r4, pc}
 8102246:	bf00      	nop
 8102248:	081026ad 	.word	0x081026ad
 810224c:	081026cf 	.word	0x081026cf
 8102250:	08102707 	.word	0x08102707
 8102254:	0810272b 	.word	0x0810272b

08102258 <_cleanup_r>:
 8102258:	4901      	ldr	r1, [pc, #4]	; (8102260 <_cleanup_r+0x8>)
 810225a:	f000 b8af 	b.w	81023bc <_fwalk_reent>
 810225e:	bf00      	nop
 8102260:	08102199 	.word	0x08102199

08102264 <__sfmoreglue>:
 8102264:	b570      	push	{r4, r5, r6, lr}
 8102266:	2268      	movs	r2, #104	; 0x68
 8102268:	1e4d      	subs	r5, r1, #1
 810226a:	4355      	muls	r5, r2
 810226c:	460e      	mov	r6, r1
 810226e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8102272:	f000 f997 	bl	81025a4 <_malloc_r>
 8102276:	4604      	mov	r4, r0
 8102278:	b140      	cbz	r0, 810228c <__sfmoreglue+0x28>
 810227a:	2100      	movs	r1, #0
 810227c:	e9c0 1600 	strd	r1, r6, [r0]
 8102280:	300c      	adds	r0, #12
 8102282:	60a0      	str	r0, [r4, #8]
 8102284:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8102288:	f7ff fdc2 	bl	8101e10 <memset>
 810228c:	4620      	mov	r0, r4
 810228e:	bd70      	pop	{r4, r5, r6, pc}

08102290 <__sfp_lock_acquire>:
 8102290:	4801      	ldr	r0, [pc, #4]	; (8102298 <__sfp_lock_acquire+0x8>)
 8102292:	f000 b8b3 	b.w	81023fc <__retarget_lock_acquire_recursive>
 8102296:	bf00      	nop
 8102298:	10000179 	.word	0x10000179

0810229c <__sfp_lock_release>:
 810229c:	4801      	ldr	r0, [pc, #4]	; (81022a4 <__sfp_lock_release+0x8>)
 810229e:	f000 b8ae 	b.w	81023fe <__retarget_lock_release_recursive>
 81022a2:	bf00      	nop
 81022a4:	10000179 	.word	0x10000179

081022a8 <__sinit_lock_acquire>:
 81022a8:	4801      	ldr	r0, [pc, #4]	; (81022b0 <__sinit_lock_acquire+0x8>)
 81022aa:	f000 b8a7 	b.w	81023fc <__retarget_lock_acquire_recursive>
 81022ae:	bf00      	nop
 81022b0:	1000017a 	.word	0x1000017a

081022b4 <__sinit_lock_release>:
 81022b4:	4801      	ldr	r0, [pc, #4]	; (81022bc <__sinit_lock_release+0x8>)
 81022b6:	f000 b8a2 	b.w	81023fe <__retarget_lock_release_recursive>
 81022ba:	bf00      	nop
 81022bc:	1000017a 	.word	0x1000017a

081022c0 <__sinit>:
 81022c0:	b510      	push	{r4, lr}
 81022c2:	4604      	mov	r4, r0
 81022c4:	f7ff fff0 	bl	81022a8 <__sinit_lock_acquire>
 81022c8:	69a3      	ldr	r3, [r4, #24]
 81022ca:	b11b      	cbz	r3, 81022d4 <__sinit+0x14>
 81022cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81022d0:	f7ff bff0 	b.w	81022b4 <__sinit_lock_release>
 81022d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 81022d8:	6523      	str	r3, [r4, #80]	; 0x50
 81022da:	4b13      	ldr	r3, [pc, #76]	; (8102328 <__sinit+0x68>)
 81022dc:	4a13      	ldr	r2, [pc, #76]	; (810232c <__sinit+0x6c>)
 81022de:	681b      	ldr	r3, [r3, #0]
 81022e0:	62a2      	str	r2, [r4, #40]	; 0x28
 81022e2:	42a3      	cmp	r3, r4
 81022e4:	bf04      	itt	eq
 81022e6:	2301      	moveq	r3, #1
 81022e8:	61a3      	streq	r3, [r4, #24]
 81022ea:	4620      	mov	r0, r4
 81022ec:	f000 f820 	bl	8102330 <__sfp>
 81022f0:	6060      	str	r0, [r4, #4]
 81022f2:	4620      	mov	r0, r4
 81022f4:	f000 f81c 	bl	8102330 <__sfp>
 81022f8:	60a0      	str	r0, [r4, #8]
 81022fa:	4620      	mov	r0, r4
 81022fc:	f000 f818 	bl	8102330 <__sfp>
 8102300:	2200      	movs	r2, #0
 8102302:	60e0      	str	r0, [r4, #12]
 8102304:	2104      	movs	r1, #4
 8102306:	6860      	ldr	r0, [r4, #4]
 8102308:	f7ff ff82 	bl	8102210 <std>
 810230c:	68a0      	ldr	r0, [r4, #8]
 810230e:	2201      	movs	r2, #1
 8102310:	2109      	movs	r1, #9
 8102312:	f7ff ff7d 	bl	8102210 <std>
 8102316:	68e0      	ldr	r0, [r4, #12]
 8102318:	2202      	movs	r2, #2
 810231a:	2112      	movs	r1, #18
 810231c:	f7ff ff78 	bl	8102210 <std>
 8102320:	2301      	movs	r3, #1
 8102322:	61a3      	str	r3, [r4, #24]
 8102324:	e7d2      	b.n	81022cc <__sinit+0xc>
 8102326:	bf00      	nop
 8102328:	08102854 	.word	0x08102854
 810232c:	08102259 	.word	0x08102259

08102330 <__sfp>:
 8102330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102332:	4607      	mov	r7, r0
 8102334:	f7ff ffac 	bl	8102290 <__sfp_lock_acquire>
 8102338:	4b1e      	ldr	r3, [pc, #120]	; (81023b4 <__sfp+0x84>)
 810233a:	681e      	ldr	r6, [r3, #0]
 810233c:	69b3      	ldr	r3, [r6, #24]
 810233e:	b913      	cbnz	r3, 8102346 <__sfp+0x16>
 8102340:	4630      	mov	r0, r6
 8102342:	f7ff ffbd 	bl	81022c0 <__sinit>
 8102346:	3648      	adds	r6, #72	; 0x48
 8102348:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810234c:	3b01      	subs	r3, #1
 810234e:	d503      	bpl.n	8102358 <__sfp+0x28>
 8102350:	6833      	ldr	r3, [r6, #0]
 8102352:	b30b      	cbz	r3, 8102398 <__sfp+0x68>
 8102354:	6836      	ldr	r6, [r6, #0]
 8102356:	e7f7      	b.n	8102348 <__sfp+0x18>
 8102358:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810235c:	b9d5      	cbnz	r5, 8102394 <__sfp+0x64>
 810235e:	4b16      	ldr	r3, [pc, #88]	; (81023b8 <__sfp+0x88>)
 8102360:	60e3      	str	r3, [r4, #12]
 8102362:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8102366:	6665      	str	r5, [r4, #100]	; 0x64
 8102368:	f000 f847 	bl	81023fa <__retarget_lock_init_recursive>
 810236c:	f7ff ff96 	bl	810229c <__sfp_lock_release>
 8102370:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8102374:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8102378:	6025      	str	r5, [r4, #0]
 810237a:	61a5      	str	r5, [r4, #24]
 810237c:	2208      	movs	r2, #8
 810237e:	4629      	mov	r1, r5
 8102380:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8102384:	f7ff fd44 	bl	8101e10 <memset>
 8102388:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810238c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8102390:	4620      	mov	r0, r4
 8102392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8102394:	3468      	adds	r4, #104	; 0x68
 8102396:	e7d9      	b.n	810234c <__sfp+0x1c>
 8102398:	2104      	movs	r1, #4
 810239a:	4638      	mov	r0, r7
 810239c:	f7ff ff62 	bl	8102264 <__sfmoreglue>
 81023a0:	4604      	mov	r4, r0
 81023a2:	6030      	str	r0, [r6, #0]
 81023a4:	2800      	cmp	r0, #0
 81023a6:	d1d5      	bne.n	8102354 <__sfp+0x24>
 81023a8:	f7ff ff78 	bl	810229c <__sfp_lock_release>
 81023ac:	230c      	movs	r3, #12
 81023ae:	603b      	str	r3, [r7, #0]
 81023b0:	e7ee      	b.n	8102390 <__sfp+0x60>
 81023b2:	bf00      	nop
 81023b4:	08102854 	.word	0x08102854
 81023b8:	ffff0001 	.word	0xffff0001

081023bc <_fwalk_reent>:
 81023bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81023c0:	4606      	mov	r6, r0
 81023c2:	4688      	mov	r8, r1
 81023c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 81023c8:	2700      	movs	r7, #0
 81023ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 81023ce:	f1b9 0901 	subs.w	r9, r9, #1
 81023d2:	d505      	bpl.n	81023e0 <_fwalk_reent+0x24>
 81023d4:	6824      	ldr	r4, [r4, #0]
 81023d6:	2c00      	cmp	r4, #0
 81023d8:	d1f7      	bne.n	81023ca <_fwalk_reent+0xe>
 81023da:	4638      	mov	r0, r7
 81023dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81023e0:	89ab      	ldrh	r3, [r5, #12]
 81023e2:	2b01      	cmp	r3, #1
 81023e4:	d907      	bls.n	81023f6 <_fwalk_reent+0x3a>
 81023e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81023ea:	3301      	adds	r3, #1
 81023ec:	d003      	beq.n	81023f6 <_fwalk_reent+0x3a>
 81023ee:	4629      	mov	r1, r5
 81023f0:	4630      	mov	r0, r6
 81023f2:	47c0      	blx	r8
 81023f4:	4307      	orrs	r7, r0
 81023f6:	3568      	adds	r5, #104	; 0x68
 81023f8:	e7e9      	b.n	81023ce <_fwalk_reent+0x12>

081023fa <__retarget_lock_init_recursive>:
 81023fa:	4770      	bx	lr

081023fc <__retarget_lock_acquire_recursive>:
 81023fc:	4770      	bx	lr

081023fe <__retarget_lock_release_recursive>:
 81023fe:	4770      	bx	lr

08102400 <__swhatbuf_r>:
 8102400:	b570      	push	{r4, r5, r6, lr}
 8102402:	460e      	mov	r6, r1
 8102404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8102408:	2900      	cmp	r1, #0
 810240a:	b096      	sub	sp, #88	; 0x58
 810240c:	4614      	mov	r4, r2
 810240e:	461d      	mov	r5, r3
 8102410:	da08      	bge.n	8102424 <__swhatbuf_r+0x24>
 8102412:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8102416:	2200      	movs	r2, #0
 8102418:	602a      	str	r2, [r5, #0]
 810241a:	061a      	lsls	r2, r3, #24
 810241c:	d410      	bmi.n	8102440 <__swhatbuf_r+0x40>
 810241e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8102422:	e00e      	b.n	8102442 <__swhatbuf_r+0x42>
 8102424:	466a      	mov	r2, sp
 8102426:	f000 f9a7 	bl	8102778 <_fstat_r>
 810242a:	2800      	cmp	r0, #0
 810242c:	dbf1      	blt.n	8102412 <__swhatbuf_r+0x12>
 810242e:	9a01      	ldr	r2, [sp, #4]
 8102430:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8102434:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8102438:	425a      	negs	r2, r3
 810243a:	415a      	adcs	r2, r3
 810243c:	602a      	str	r2, [r5, #0]
 810243e:	e7ee      	b.n	810241e <__swhatbuf_r+0x1e>
 8102440:	2340      	movs	r3, #64	; 0x40
 8102442:	2000      	movs	r0, #0
 8102444:	6023      	str	r3, [r4, #0]
 8102446:	b016      	add	sp, #88	; 0x58
 8102448:	bd70      	pop	{r4, r5, r6, pc}
	...

0810244c <__smakebuf_r>:
 810244c:	898b      	ldrh	r3, [r1, #12]
 810244e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8102450:	079d      	lsls	r5, r3, #30
 8102452:	4606      	mov	r6, r0
 8102454:	460c      	mov	r4, r1
 8102456:	d507      	bpl.n	8102468 <__smakebuf_r+0x1c>
 8102458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810245c:	6023      	str	r3, [r4, #0]
 810245e:	6123      	str	r3, [r4, #16]
 8102460:	2301      	movs	r3, #1
 8102462:	6163      	str	r3, [r4, #20]
 8102464:	b002      	add	sp, #8
 8102466:	bd70      	pop	{r4, r5, r6, pc}
 8102468:	ab01      	add	r3, sp, #4
 810246a:	466a      	mov	r2, sp
 810246c:	f7ff ffc8 	bl	8102400 <__swhatbuf_r>
 8102470:	9900      	ldr	r1, [sp, #0]
 8102472:	4605      	mov	r5, r0
 8102474:	4630      	mov	r0, r6
 8102476:	f000 f895 	bl	81025a4 <_malloc_r>
 810247a:	b948      	cbnz	r0, 8102490 <__smakebuf_r+0x44>
 810247c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8102480:	059a      	lsls	r2, r3, #22
 8102482:	d4ef      	bmi.n	8102464 <__smakebuf_r+0x18>
 8102484:	f023 0303 	bic.w	r3, r3, #3
 8102488:	f043 0302 	orr.w	r3, r3, #2
 810248c:	81a3      	strh	r3, [r4, #12]
 810248e:	e7e3      	b.n	8102458 <__smakebuf_r+0xc>
 8102490:	4b0d      	ldr	r3, [pc, #52]	; (81024c8 <__smakebuf_r+0x7c>)
 8102492:	62b3      	str	r3, [r6, #40]	; 0x28
 8102494:	89a3      	ldrh	r3, [r4, #12]
 8102496:	6020      	str	r0, [r4, #0]
 8102498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810249c:	81a3      	strh	r3, [r4, #12]
 810249e:	9b00      	ldr	r3, [sp, #0]
 81024a0:	6163      	str	r3, [r4, #20]
 81024a2:	9b01      	ldr	r3, [sp, #4]
 81024a4:	6120      	str	r0, [r4, #16]
 81024a6:	b15b      	cbz	r3, 81024c0 <__smakebuf_r+0x74>
 81024a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81024ac:	4630      	mov	r0, r6
 81024ae:	f000 f975 	bl	810279c <_isatty_r>
 81024b2:	b128      	cbz	r0, 81024c0 <__smakebuf_r+0x74>
 81024b4:	89a3      	ldrh	r3, [r4, #12]
 81024b6:	f023 0303 	bic.w	r3, r3, #3
 81024ba:	f043 0301 	orr.w	r3, r3, #1
 81024be:	81a3      	strh	r3, [r4, #12]
 81024c0:	89a0      	ldrh	r0, [r4, #12]
 81024c2:	4305      	orrs	r5, r0
 81024c4:	81a5      	strh	r5, [r4, #12]
 81024c6:	e7cd      	b.n	8102464 <__smakebuf_r+0x18>
 81024c8:	08102259 	.word	0x08102259

081024cc <_free_r>:
 81024cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81024ce:	2900      	cmp	r1, #0
 81024d0:	d044      	beq.n	810255c <_free_r+0x90>
 81024d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81024d6:	9001      	str	r0, [sp, #4]
 81024d8:	2b00      	cmp	r3, #0
 81024da:	f1a1 0404 	sub.w	r4, r1, #4
 81024de:	bfb8      	it	lt
 81024e0:	18e4      	addlt	r4, r4, r3
 81024e2:	f000 f97d 	bl	81027e0 <__malloc_lock>
 81024e6:	4a1e      	ldr	r2, [pc, #120]	; (8102560 <_free_r+0x94>)
 81024e8:	9801      	ldr	r0, [sp, #4]
 81024ea:	6813      	ldr	r3, [r2, #0]
 81024ec:	b933      	cbnz	r3, 81024fc <_free_r+0x30>
 81024ee:	6063      	str	r3, [r4, #4]
 81024f0:	6014      	str	r4, [r2, #0]
 81024f2:	b003      	add	sp, #12
 81024f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81024f8:	f000 b978 	b.w	81027ec <__malloc_unlock>
 81024fc:	42a3      	cmp	r3, r4
 81024fe:	d908      	bls.n	8102512 <_free_r+0x46>
 8102500:	6825      	ldr	r5, [r4, #0]
 8102502:	1961      	adds	r1, r4, r5
 8102504:	428b      	cmp	r3, r1
 8102506:	bf01      	itttt	eq
 8102508:	6819      	ldreq	r1, [r3, #0]
 810250a:	685b      	ldreq	r3, [r3, #4]
 810250c:	1949      	addeq	r1, r1, r5
 810250e:	6021      	streq	r1, [r4, #0]
 8102510:	e7ed      	b.n	81024ee <_free_r+0x22>
 8102512:	461a      	mov	r2, r3
 8102514:	685b      	ldr	r3, [r3, #4]
 8102516:	b10b      	cbz	r3, 810251c <_free_r+0x50>
 8102518:	42a3      	cmp	r3, r4
 810251a:	d9fa      	bls.n	8102512 <_free_r+0x46>
 810251c:	6811      	ldr	r1, [r2, #0]
 810251e:	1855      	adds	r5, r2, r1
 8102520:	42a5      	cmp	r5, r4
 8102522:	d10b      	bne.n	810253c <_free_r+0x70>
 8102524:	6824      	ldr	r4, [r4, #0]
 8102526:	4421      	add	r1, r4
 8102528:	1854      	adds	r4, r2, r1
 810252a:	42a3      	cmp	r3, r4
 810252c:	6011      	str	r1, [r2, #0]
 810252e:	d1e0      	bne.n	81024f2 <_free_r+0x26>
 8102530:	681c      	ldr	r4, [r3, #0]
 8102532:	685b      	ldr	r3, [r3, #4]
 8102534:	6053      	str	r3, [r2, #4]
 8102536:	4421      	add	r1, r4
 8102538:	6011      	str	r1, [r2, #0]
 810253a:	e7da      	b.n	81024f2 <_free_r+0x26>
 810253c:	d902      	bls.n	8102544 <_free_r+0x78>
 810253e:	230c      	movs	r3, #12
 8102540:	6003      	str	r3, [r0, #0]
 8102542:	e7d6      	b.n	81024f2 <_free_r+0x26>
 8102544:	6825      	ldr	r5, [r4, #0]
 8102546:	1961      	adds	r1, r4, r5
 8102548:	428b      	cmp	r3, r1
 810254a:	bf04      	itt	eq
 810254c:	6819      	ldreq	r1, [r3, #0]
 810254e:	685b      	ldreq	r3, [r3, #4]
 8102550:	6063      	str	r3, [r4, #4]
 8102552:	bf04      	itt	eq
 8102554:	1949      	addeq	r1, r1, r5
 8102556:	6021      	streq	r1, [r4, #0]
 8102558:	6054      	str	r4, [r2, #4]
 810255a:	e7ca      	b.n	81024f2 <_free_r+0x26>
 810255c:	b003      	add	sp, #12
 810255e:	bd30      	pop	{r4, r5, pc}
 8102560:	1000017c 	.word	0x1000017c

08102564 <sbrk_aligned>:
 8102564:	b570      	push	{r4, r5, r6, lr}
 8102566:	4e0e      	ldr	r6, [pc, #56]	; (81025a0 <sbrk_aligned+0x3c>)
 8102568:	460c      	mov	r4, r1
 810256a:	6831      	ldr	r1, [r6, #0]
 810256c:	4605      	mov	r5, r0
 810256e:	b911      	cbnz	r1, 8102576 <sbrk_aligned+0x12>
 8102570:	f000 f88c 	bl	810268c <_sbrk_r>
 8102574:	6030      	str	r0, [r6, #0]
 8102576:	4621      	mov	r1, r4
 8102578:	4628      	mov	r0, r5
 810257a:	f000 f887 	bl	810268c <_sbrk_r>
 810257e:	1c43      	adds	r3, r0, #1
 8102580:	d00a      	beq.n	8102598 <sbrk_aligned+0x34>
 8102582:	1cc4      	adds	r4, r0, #3
 8102584:	f024 0403 	bic.w	r4, r4, #3
 8102588:	42a0      	cmp	r0, r4
 810258a:	d007      	beq.n	810259c <sbrk_aligned+0x38>
 810258c:	1a21      	subs	r1, r4, r0
 810258e:	4628      	mov	r0, r5
 8102590:	f000 f87c 	bl	810268c <_sbrk_r>
 8102594:	3001      	adds	r0, #1
 8102596:	d101      	bne.n	810259c <sbrk_aligned+0x38>
 8102598:	f04f 34ff 	mov.w	r4, #4294967295
 810259c:	4620      	mov	r0, r4
 810259e:	bd70      	pop	{r4, r5, r6, pc}
 81025a0:	10000180 	.word	0x10000180

081025a4 <_malloc_r>:
 81025a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81025a8:	1ccd      	adds	r5, r1, #3
 81025aa:	f025 0503 	bic.w	r5, r5, #3
 81025ae:	3508      	adds	r5, #8
 81025b0:	2d0c      	cmp	r5, #12
 81025b2:	bf38      	it	cc
 81025b4:	250c      	movcc	r5, #12
 81025b6:	2d00      	cmp	r5, #0
 81025b8:	4607      	mov	r7, r0
 81025ba:	db01      	blt.n	81025c0 <_malloc_r+0x1c>
 81025bc:	42a9      	cmp	r1, r5
 81025be:	d905      	bls.n	81025cc <_malloc_r+0x28>
 81025c0:	230c      	movs	r3, #12
 81025c2:	603b      	str	r3, [r7, #0]
 81025c4:	2600      	movs	r6, #0
 81025c6:	4630      	mov	r0, r6
 81025c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81025cc:	4e2e      	ldr	r6, [pc, #184]	; (8102688 <_malloc_r+0xe4>)
 81025ce:	f000 f907 	bl	81027e0 <__malloc_lock>
 81025d2:	6833      	ldr	r3, [r6, #0]
 81025d4:	461c      	mov	r4, r3
 81025d6:	bb34      	cbnz	r4, 8102626 <_malloc_r+0x82>
 81025d8:	4629      	mov	r1, r5
 81025da:	4638      	mov	r0, r7
 81025dc:	f7ff ffc2 	bl	8102564 <sbrk_aligned>
 81025e0:	1c43      	adds	r3, r0, #1
 81025e2:	4604      	mov	r4, r0
 81025e4:	d14d      	bne.n	8102682 <_malloc_r+0xde>
 81025e6:	6834      	ldr	r4, [r6, #0]
 81025e8:	4626      	mov	r6, r4
 81025ea:	2e00      	cmp	r6, #0
 81025ec:	d140      	bne.n	8102670 <_malloc_r+0xcc>
 81025ee:	6823      	ldr	r3, [r4, #0]
 81025f0:	4631      	mov	r1, r6
 81025f2:	4638      	mov	r0, r7
 81025f4:	eb04 0803 	add.w	r8, r4, r3
 81025f8:	f000 f848 	bl	810268c <_sbrk_r>
 81025fc:	4580      	cmp	r8, r0
 81025fe:	d13a      	bne.n	8102676 <_malloc_r+0xd2>
 8102600:	6821      	ldr	r1, [r4, #0]
 8102602:	3503      	adds	r5, #3
 8102604:	1a6d      	subs	r5, r5, r1
 8102606:	f025 0503 	bic.w	r5, r5, #3
 810260a:	3508      	adds	r5, #8
 810260c:	2d0c      	cmp	r5, #12
 810260e:	bf38      	it	cc
 8102610:	250c      	movcc	r5, #12
 8102612:	4629      	mov	r1, r5
 8102614:	4638      	mov	r0, r7
 8102616:	f7ff ffa5 	bl	8102564 <sbrk_aligned>
 810261a:	3001      	adds	r0, #1
 810261c:	d02b      	beq.n	8102676 <_malloc_r+0xd2>
 810261e:	6823      	ldr	r3, [r4, #0]
 8102620:	442b      	add	r3, r5
 8102622:	6023      	str	r3, [r4, #0]
 8102624:	e00e      	b.n	8102644 <_malloc_r+0xa0>
 8102626:	6822      	ldr	r2, [r4, #0]
 8102628:	1b52      	subs	r2, r2, r5
 810262a:	d41e      	bmi.n	810266a <_malloc_r+0xc6>
 810262c:	2a0b      	cmp	r2, #11
 810262e:	d916      	bls.n	810265e <_malloc_r+0xba>
 8102630:	1961      	adds	r1, r4, r5
 8102632:	42a3      	cmp	r3, r4
 8102634:	6025      	str	r5, [r4, #0]
 8102636:	bf18      	it	ne
 8102638:	6059      	strne	r1, [r3, #4]
 810263a:	6863      	ldr	r3, [r4, #4]
 810263c:	bf08      	it	eq
 810263e:	6031      	streq	r1, [r6, #0]
 8102640:	5162      	str	r2, [r4, r5]
 8102642:	604b      	str	r3, [r1, #4]
 8102644:	4638      	mov	r0, r7
 8102646:	f104 060b 	add.w	r6, r4, #11
 810264a:	f000 f8cf 	bl	81027ec <__malloc_unlock>
 810264e:	f026 0607 	bic.w	r6, r6, #7
 8102652:	1d23      	adds	r3, r4, #4
 8102654:	1af2      	subs	r2, r6, r3
 8102656:	d0b6      	beq.n	81025c6 <_malloc_r+0x22>
 8102658:	1b9b      	subs	r3, r3, r6
 810265a:	50a3      	str	r3, [r4, r2]
 810265c:	e7b3      	b.n	81025c6 <_malloc_r+0x22>
 810265e:	6862      	ldr	r2, [r4, #4]
 8102660:	42a3      	cmp	r3, r4
 8102662:	bf0c      	ite	eq
 8102664:	6032      	streq	r2, [r6, #0]
 8102666:	605a      	strne	r2, [r3, #4]
 8102668:	e7ec      	b.n	8102644 <_malloc_r+0xa0>
 810266a:	4623      	mov	r3, r4
 810266c:	6864      	ldr	r4, [r4, #4]
 810266e:	e7b2      	b.n	81025d6 <_malloc_r+0x32>
 8102670:	4634      	mov	r4, r6
 8102672:	6876      	ldr	r6, [r6, #4]
 8102674:	e7b9      	b.n	81025ea <_malloc_r+0x46>
 8102676:	230c      	movs	r3, #12
 8102678:	603b      	str	r3, [r7, #0]
 810267a:	4638      	mov	r0, r7
 810267c:	f000 f8b6 	bl	81027ec <__malloc_unlock>
 8102680:	e7a1      	b.n	81025c6 <_malloc_r+0x22>
 8102682:	6025      	str	r5, [r4, #0]
 8102684:	e7de      	b.n	8102644 <_malloc_r+0xa0>
 8102686:	bf00      	nop
 8102688:	1000017c 	.word	0x1000017c

0810268c <_sbrk_r>:
 810268c:	b538      	push	{r3, r4, r5, lr}
 810268e:	4d06      	ldr	r5, [pc, #24]	; (81026a8 <_sbrk_r+0x1c>)
 8102690:	2300      	movs	r3, #0
 8102692:	4604      	mov	r4, r0
 8102694:	4608      	mov	r0, r1
 8102696:	602b      	str	r3, [r5, #0]
 8102698:	f7fe f830 	bl	81006fc <_sbrk>
 810269c:	1c43      	adds	r3, r0, #1
 810269e:	d102      	bne.n	81026a6 <_sbrk_r+0x1a>
 81026a0:	682b      	ldr	r3, [r5, #0]
 81026a2:	b103      	cbz	r3, 81026a6 <_sbrk_r+0x1a>
 81026a4:	6023      	str	r3, [r4, #0]
 81026a6:	bd38      	pop	{r3, r4, r5, pc}
 81026a8:	10000184 	.word	0x10000184

081026ac <__sread>:
 81026ac:	b510      	push	{r4, lr}
 81026ae:	460c      	mov	r4, r1
 81026b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81026b4:	f000 f8a0 	bl	81027f8 <_read_r>
 81026b8:	2800      	cmp	r0, #0
 81026ba:	bfab      	itete	ge
 81026bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 81026be:	89a3      	ldrhlt	r3, [r4, #12]
 81026c0:	181b      	addge	r3, r3, r0
 81026c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 81026c6:	bfac      	ite	ge
 81026c8:	6563      	strge	r3, [r4, #84]	; 0x54
 81026ca:	81a3      	strhlt	r3, [r4, #12]
 81026cc:	bd10      	pop	{r4, pc}

081026ce <__swrite>:
 81026ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81026d2:	461f      	mov	r7, r3
 81026d4:	898b      	ldrh	r3, [r1, #12]
 81026d6:	05db      	lsls	r3, r3, #23
 81026d8:	4605      	mov	r5, r0
 81026da:	460c      	mov	r4, r1
 81026dc:	4616      	mov	r6, r2
 81026de:	d505      	bpl.n	81026ec <__swrite+0x1e>
 81026e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81026e4:	2302      	movs	r3, #2
 81026e6:	2200      	movs	r2, #0
 81026e8:	f000 f868 	bl	81027bc <_lseek_r>
 81026ec:	89a3      	ldrh	r3, [r4, #12]
 81026ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81026f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81026f6:	81a3      	strh	r3, [r4, #12]
 81026f8:	4632      	mov	r2, r6
 81026fa:	463b      	mov	r3, r7
 81026fc:	4628      	mov	r0, r5
 81026fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8102702:	f000 b817 	b.w	8102734 <_write_r>

08102706 <__sseek>:
 8102706:	b510      	push	{r4, lr}
 8102708:	460c      	mov	r4, r1
 810270a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810270e:	f000 f855 	bl	81027bc <_lseek_r>
 8102712:	1c43      	adds	r3, r0, #1
 8102714:	89a3      	ldrh	r3, [r4, #12]
 8102716:	bf15      	itete	ne
 8102718:	6560      	strne	r0, [r4, #84]	; 0x54
 810271a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810271e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8102722:	81a3      	strheq	r3, [r4, #12]
 8102724:	bf18      	it	ne
 8102726:	81a3      	strhne	r3, [r4, #12]
 8102728:	bd10      	pop	{r4, pc}

0810272a <__sclose>:
 810272a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810272e:	f000 b813 	b.w	8102758 <_close_r>
	...

08102734 <_write_r>:
 8102734:	b538      	push	{r3, r4, r5, lr}
 8102736:	4d07      	ldr	r5, [pc, #28]	; (8102754 <_write_r+0x20>)
 8102738:	4604      	mov	r4, r0
 810273a:	4608      	mov	r0, r1
 810273c:	4611      	mov	r1, r2
 810273e:	2200      	movs	r2, #0
 8102740:	602a      	str	r2, [r5, #0]
 8102742:	461a      	mov	r2, r3
 8102744:	f7fd ff89 	bl	810065a <_write>
 8102748:	1c43      	adds	r3, r0, #1
 810274a:	d102      	bne.n	8102752 <_write_r+0x1e>
 810274c:	682b      	ldr	r3, [r5, #0]
 810274e:	b103      	cbz	r3, 8102752 <_write_r+0x1e>
 8102750:	6023      	str	r3, [r4, #0]
 8102752:	bd38      	pop	{r3, r4, r5, pc}
 8102754:	10000184 	.word	0x10000184

08102758 <_close_r>:
 8102758:	b538      	push	{r3, r4, r5, lr}
 810275a:	4d06      	ldr	r5, [pc, #24]	; (8102774 <_close_r+0x1c>)
 810275c:	2300      	movs	r3, #0
 810275e:	4604      	mov	r4, r0
 8102760:	4608      	mov	r0, r1
 8102762:	602b      	str	r3, [r5, #0]
 8102764:	f7fd ff95 	bl	8100692 <_close>
 8102768:	1c43      	adds	r3, r0, #1
 810276a:	d102      	bne.n	8102772 <_close_r+0x1a>
 810276c:	682b      	ldr	r3, [r5, #0]
 810276e:	b103      	cbz	r3, 8102772 <_close_r+0x1a>
 8102770:	6023      	str	r3, [r4, #0]
 8102772:	bd38      	pop	{r3, r4, r5, pc}
 8102774:	10000184 	.word	0x10000184

08102778 <_fstat_r>:
 8102778:	b538      	push	{r3, r4, r5, lr}
 810277a:	4d07      	ldr	r5, [pc, #28]	; (8102798 <_fstat_r+0x20>)
 810277c:	2300      	movs	r3, #0
 810277e:	4604      	mov	r4, r0
 8102780:	4608      	mov	r0, r1
 8102782:	4611      	mov	r1, r2
 8102784:	602b      	str	r3, [r5, #0]
 8102786:	f7fd ff90 	bl	81006aa <_fstat>
 810278a:	1c43      	adds	r3, r0, #1
 810278c:	d102      	bne.n	8102794 <_fstat_r+0x1c>
 810278e:	682b      	ldr	r3, [r5, #0]
 8102790:	b103      	cbz	r3, 8102794 <_fstat_r+0x1c>
 8102792:	6023      	str	r3, [r4, #0]
 8102794:	bd38      	pop	{r3, r4, r5, pc}
 8102796:	bf00      	nop
 8102798:	10000184 	.word	0x10000184

0810279c <_isatty_r>:
 810279c:	b538      	push	{r3, r4, r5, lr}
 810279e:	4d06      	ldr	r5, [pc, #24]	; (81027b8 <_isatty_r+0x1c>)
 81027a0:	2300      	movs	r3, #0
 81027a2:	4604      	mov	r4, r0
 81027a4:	4608      	mov	r0, r1
 81027a6:	602b      	str	r3, [r5, #0]
 81027a8:	f7fd ff8f 	bl	81006ca <_isatty>
 81027ac:	1c43      	adds	r3, r0, #1
 81027ae:	d102      	bne.n	81027b6 <_isatty_r+0x1a>
 81027b0:	682b      	ldr	r3, [r5, #0]
 81027b2:	b103      	cbz	r3, 81027b6 <_isatty_r+0x1a>
 81027b4:	6023      	str	r3, [r4, #0]
 81027b6:	bd38      	pop	{r3, r4, r5, pc}
 81027b8:	10000184 	.word	0x10000184

081027bc <_lseek_r>:
 81027bc:	b538      	push	{r3, r4, r5, lr}
 81027be:	4d07      	ldr	r5, [pc, #28]	; (81027dc <_lseek_r+0x20>)
 81027c0:	4604      	mov	r4, r0
 81027c2:	4608      	mov	r0, r1
 81027c4:	4611      	mov	r1, r2
 81027c6:	2200      	movs	r2, #0
 81027c8:	602a      	str	r2, [r5, #0]
 81027ca:	461a      	mov	r2, r3
 81027cc:	f7fd ff88 	bl	81006e0 <_lseek>
 81027d0:	1c43      	adds	r3, r0, #1
 81027d2:	d102      	bne.n	81027da <_lseek_r+0x1e>
 81027d4:	682b      	ldr	r3, [r5, #0]
 81027d6:	b103      	cbz	r3, 81027da <_lseek_r+0x1e>
 81027d8:	6023      	str	r3, [r4, #0]
 81027da:	bd38      	pop	{r3, r4, r5, pc}
 81027dc:	10000184 	.word	0x10000184

081027e0 <__malloc_lock>:
 81027e0:	4801      	ldr	r0, [pc, #4]	; (81027e8 <__malloc_lock+0x8>)
 81027e2:	f7ff be0b 	b.w	81023fc <__retarget_lock_acquire_recursive>
 81027e6:	bf00      	nop
 81027e8:	10000178 	.word	0x10000178

081027ec <__malloc_unlock>:
 81027ec:	4801      	ldr	r0, [pc, #4]	; (81027f4 <__malloc_unlock+0x8>)
 81027ee:	f7ff be06 	b.w	81023fe <__retarget_lock_release_recursive>
 81027f2:	bf00      	nop
 81027f4:	10000178 	.word	0x10000178

081027f8 <_read_r>:
 81027f8:	b538      	push	{r3, r4, r5, lr}
 81027fa:	4d07      	ldr	r5, [pc, #28]	; (8102818 <_read_r+0x20>)
 81027fc:	4604      	mov	r4, r0
 81027fe:	4608      	mov	r0, r1
 8102800:	4611      	mov	r1, r2
 8102802:	2200      	movs	r2, #0
 8102804:	602a      	str	r2, [r5, #0]
 8102806:	461a      	mov	r2, r3
 8102808:	f7fd ff0a 	bl	8100620 <_read>
 810280c:	1c43      	adds	r3, r0, #1
 810280e:	d102      	bne.n	8102816 <_read_r+0x1e>
 8102810:	682b      	ldr	r3, [r5, #0]
 8102812:	b103      	cbz	r3, 8102816 <_read_r+0x1e>
 8102814:	6023      	str	r3, [r4, #0]
 8102816:	bd38      	pop	{r3, r4, r5, pc}
 8102818:	10000184 	.word	0x10000184

0810281c <_init>:
 810281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810281e:	bf00      	nop
 8102820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102822:	bc08      	pop	{r3}
 8102824:	469e      	mov	lr, r3
 8102826:	4770      	bx	lr

08102828 <_fini>:
 8102828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810282a:	bf00      	nop
 810282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810282e:	bc08      	pop	{r3}
 8102830:	469e      	mov	lr, r3
 8102832:	4770      	bx	lr
