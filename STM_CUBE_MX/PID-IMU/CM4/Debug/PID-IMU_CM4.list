
PID-IMU_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db74  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  0810de18  0810de18  0001de18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810e57c  0810e57c  0001e57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810e584  0810e584  0001e584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810e588  0810e588  0001e588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  10000000  0810e58c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001e0  100001f4  0810e780  000201f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100003d4  0810e780  000203d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b682  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000324c  00000000  00000000  0003b8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001638  00000000  00000000  0003eaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014e0  00000000  00000000  00040130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c118  00000000  00000000  00041610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c88a  00000000  00000000  0007d728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00186590  00000000  00000000  00099fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00220542  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000074b4  00000000  00000000  00220594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001f4 	.word	0x100001f4
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810ddfc 	.word	0x0810ddfc

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001f8 	.word	0x100001f8
 81002dc:	0810ddfc 	.word	0x0810ddfc

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <init_tune_PID>:
#include <PID.h>

void init_tune_PID(PID* p,float Tc,float Kp,float Ki,float Kd){
 8101138:	b480      	push	{r7}
 810113a:	b087      	sub	sp, #28
 810113c:	af00      	add	r7, sp, #0
 810113e:	6178      	str	r0, [r7, #20]
 8101140:	ed87 0a04 	vstr	s0, [r7, #16]
 8101144:	edc7 0a03 	vstr	s1, [r7, #12]
 8101148:	ed87 1a02 	vstr	s2, [r7, #8]
 810114c:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Tc=Tc;
 8101150:	697b      	ldr	r3, [r7, #20]
 8101152:	693a      	ldr	r2, [r7, #16]
 8101154:	60da      	str	r2, [r3, #12]
	p->u_max=12;
 8101156:	697b      	ldr	r3, [r7, #20]
 8101158:	4a09      	ldr	r2, [pc, #36]	; (8101180 <init_tune_PID+0x48>)
 810115a:	611a      	str	r2, [r3, #16]
	p->u_min=-12;
 810115c:	697b      	ldr	r3, [r7, #20]
 810115e:	4a09      	ldr	r2, [pc, #36]	; (8101184 <init_tune_PID+0x4c>)
 8101160:	615a      	str	r2, [r3, #20]

	p->Kp=Kp;
 8101162:	697b      	ldr	r3, [r7, #20]
 8101164:	68fa      	ldr	r2, [r7, #12]
 8101166:	601a      	str	r2, [r3, #0]
	p->Ki=Ki;
 8101168:	697b      	ldr	r3, [r7, #20]
 810116a:	68ba      	ldr	r2, [r7, #8]
 810116c:	605a      	str	r2, [r3, #4]
	p->Kd=Kd;
 810116e:	697b      	ldr	r3, [r7, #20]
 8101170:	687a      	ldr	r2, [r7, #4]
 8101172:	609a      	str	r2, [r3, #8]
}
 8101174:	bf00      	nop
 8101176:	371c      	adds	r7, #28
 8101178:	46bd      	mov	sp, r7
 810117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810117e:	4770      	bx	lr
 8101180:	41400000 	.word	0x41400000
 8101184:	c1400000 	.word	0xc1400000

08101188 <PID_controller>:
	p->Kp=Kp;
	p->Ki=Ki;
	p->Kd=Kd;
}*/

float PID_controller(PID* p,float y,float r){
 8101188:	b480      	push	{r7}
 810118a:	b08b      	sub	sp, #44	; 0x2c
 810118c:	af00      	add	r7, sp, #0
 810118e:	60f8      	str	r0, [r7, #12]
 8101190:	ed87 0a02 	vstr	s0, [r7, #8]
 8101194:	edc7 0a01 	vstr	s1, [r7, #4]

	static float e_old=0,Iterm=0;
	float u;
	float newIterm;
	float e=r-y;
 8101198:	ed97 7a01 	vldr	s14, [r7, #4]
 810119c:	edd7 7a02 	vldr	s15, [r7, #8]
 81011a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 81011a4:	edc7 7a08 	vstr	s15, [r7, #32]
	float Pterm = p->Kp*e;
 81011a8:	68fb      	ldr	r3, [r7, #12]
 81011aa:	edd3 7a00 	vldr	s15, [r3]
 81011ae:	ed97 7a08 	vldr	s14, [r7, #32]
 81011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81011b6:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm=Iterm+(p->Ki)*p->Tc*e_old;
 81011ba:	68fb      	ldr	r3, [r7, #12]
 81011bc:	ed93 7a01 	vldr	s14, [r3, #4]
 81011c0:	68fb      	ldr	r3, [r7, #12]
 81011c2:	edd3 7a03 	vldr	s15, [r3, #12]
 81011c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 81011ca:	4b2b      	ldr	r3, [pc, #172]	; (8101278 <PID_controller+0xf0>)
 81011cc:	edd3 7a00 	vldr	s15, [r3]
 81011d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 81011d4:	4b29      	ldr	r3, [pc, #164]	; (810127c <PID_controller+0xf4>)
 81011d6:	edd3 7a00 	vldr	s15, [r3]
 81011da:	ee77 7a27 	vadd.f32	s15, s14, s15
 81011de:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm=(p->Kd/p->Tc)*(e-e_old);
 81011e2:	68fb      	ldr	r3, [r7, #12]
 81011e4:	edd3 6a02 	vldr	s13, [r3, #8]
 81011e8:	68fb      	ldr	r3, [r7, #12]
 81011ea:	edd3 7a03 	vldr	s15, [r3, #12]
 81011ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81011f2:	4b21      	ldr	r3, [pc, #132]	; (8101278 <PID_controller+0xf0>)
 81011f4:	edd3 7a00 	vldr	s15, [r3]
 81011f8:	edd7 6a08 	vldr	s13, [r7, #32]
 81011fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8101200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101204:	edc7 7a05 	vstr	s15, [r7, #20]
	e_old=e;
 8101208:	4a1b      	ldr	r2, [pc, #108]	; (8101278 <PID_controller+0xf0>)
 810120a:	6a3b      	ldr	r3, [r7, #32]
 810120c:	6013      	str	r3, [r2, #0]
	u=Pterm+newIterm+Dterm;
 810120e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101212:	edd7 7a06 	vldr	s15, [r7, #24]
 8101216:	ee77 7a27 	vadd.f32	s15, s14, s15
 810121a:	ed97 7a05 	vldr	s14, [r7, #20]
 810121e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101222:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(u>p->u_max){
 8101226:	68fb      	ldr	r3, [r7, #12]
 8101228:	edd3 7a04 	vldr	s15, [r3, #16]
 810122c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101238:	dd03      	ble.n	8101242 <PID_controller+0xba>
		u=p->u_max;
 810123a:	68fb      	ldr	r3, [r7, #12]
 810123c:	691b      	ldr	r3, [r3, #16]
 810123e:	627b      	str	r3, [r7, #36]	; 0x24
 8101240:	e010      	b.n	8101264 <PID_controller+0xdc>
	}else if(u<p->u_min){
 8101242:	68fb      	ldr	r3, [r7, #12]
 8101244:	edd3 7a05 	vldr	s15, [r3, #20]
 8101248:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 810124c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101254:	d503      	bpl.n	810125e <PID_controller+0xd6>
		u=p->u_min;
 8101256:	68fb      	ldr	r3, [r7, #12]
 8101258:	695b      	ldr	r3, [r3, #20]
 810125a:	627b      	str	r3, [r7, #36]	; 0x24
 810125c:	e002      	b.n	8101264 <PID_controller+0xdc>
	}else{
		Iterm= newIterm;
 810125e:	4a07      	ldr	r2, [pc, #28]	; (810127c <PID_controller+0xf4>)
 8101260:	69bb      	ldr	r3, [r7, #24]
 8101262:	6013      	str	r3, [r2, #0]
	}
	return u;
 8101264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101266:	ee07 3a90 	vmov	s15, r3

}
 810126a:	eeb0 0a67 	vmov.f32	s0, s15
 810126e:	372c      	adds	r7, #44	; 0x2c
 8101270:	46bd      	mov	sp, r7
 8101272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101276:	4770      	bx	lr
 8101278:	10000210 	.word	0x10000210
 810127c:	10000214 	.word	0x10000214

08101280 <VtoD_Pitch>:
#include "PidPitch.h"

float VtoD_Pitch(float u){
 8101280:	b480      	push	{r7}
 8101282:	b085      	sub	sp, #20
 8101284:	af00      	add	r7, sp, #0
 8101286:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0)
 810128a:	edd7 7a01 	vldr	s15, [r7, #4]
 810128e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101296:	d805      	bhi.n	81012a4 <VtoD_Pitch+0x24>
		u = -u;
 8101298:	edd7 7a01 	vldr	s15, [r7, #4]
 810129c:	eef1 7a67 	vneg.f32	s15, s15
 81012a0:	edc7 7a01 	vstr	s15, [r7, #4]
	float duty = 100*u/12;
 81012a4:	edd7 7a01 	vldr	s15, [r7, #4]
 81012a8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 81012fc <VtoD_Pitch+0x7c>
 81012ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 81012b0:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 81012b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81012b8:	edc7 7a03 	vstr	s15, [r7, #12]

	if(duty > 100){
 81012bc:	edd7 7a03 	vldr	s15, [r7, #12]
 81012c0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 81012fc <VtoD_Pitch+0x7c>
 81012c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 81012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81012cc:	dd02      	ble.n	81012d4 <VtoD_Pitch+0x54>
		duty = 100;
 81012ce:	4b0c      	ldr	r3, [pc, #48]	; (8101300 <VtoD_Pitch+0x80>)
 81012d0:	60fb      	str	r3, [r7, #12]
 81012d2:	e009      	b.n	81012e8 <VtoD_Pitch+0x68>
	}else if(duty < 0){
 81012d4:	edd7 7a03 	vldr	s15, [r7, #12]
 81012d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81012e0:	d502      	bpl.n	81012e8 <VtoD_Pitch+0x68>
		duty = 0;
 81012e2:	f04f 0300 	mov.w	r3, #0
 81012e6:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 81012e8:	68fb      	ldr	r3, [r7, #12]
 81012ea:	ee07 3a90 	vmov	s15, r3
}
 81012ee:	eeb0 0a67 	vmov.f32	s0, s15
 81012f2:	3714      	adds	r7, #20
 81012f4:	46bd      	mov	sp, r7
 81012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012fa:	4770      	bx	lr
 81012fc:	42c80000 	.word	0x42c80000
 8101300:	42c80000 	.word	0x42c80000

08101304 <set_PWM_dir_Pitch>:
	}
	return dir;

}

void set_PWM_dir_Pitch(uint32_t duty,uint8_t dir){
 8101304:	b480      	push	{r7}
 8101306:	b083      	sub	sp, #12
 8101308:	af00      	add	r7, sp, #0
 810130a:	6078      	str	r0, [r7, #4]
 810130c:	460b      	mov	r3, r1
 810130e:	70fb      	strb	r3, [r7, #3]
	TIM1->CCR2 = ((float)duty/100)*TIM1->ARR;
 8101310:	687b      	ldr	r3, [r7, #4]
 8101312:	ee07 3a90 	vmov	s15, r3
 8101316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810131a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 810134c <set_PWM_dir_Pitch+0x48>
 810131e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101322:	4b0b      	ldr	r3, [pc, #44]	; (8101350 <set_PWM_dir_Pitch+0x4c>)
 8101324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101326:	ee07 3a90 	vmov	s15, r3
 810132a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810132e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101332:	4b07      	ldr	r3, [pc, #28]	; (8101350 <set_PWM_dir_Pitch+0x4c>)
 8101334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101338:	ee17 2a90 	vmov	r2, s15
 810133c:	639a      	str	r2, [r3, #56]	; 0x38
	uint8_t current_dir = (TIM4->CR1 & 0x0010);

	if(dir != current_dir)
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);//cambia senso di rotazione
	*/
}
 810133e:	bf00      	nop
 8101340:	370c      	adds	r7, #12
 8101342:	46bd      	mov	sp, r7
 8101344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101348:	4770      	bx	lr
 810134a:	bf00      	nop
 810134c:	42c80000 	.word	0x42c80000
 8101350:	40010000 	.word	0x40010000

08101354 <VtoD_Roll>:
#include "PidRoll.h"

float VtoD_Roll(float u){
 8101354:	b480      	push	{r7}
 8101356:	b085      	sub	sp, #20
 8101358:	af00      	add	r7, sp, #0
 810135a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0)
 810135e:	edd7 7a01 	vldr	s15, [r7, #4]
 8101362:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810136a:	d805      	bhi.n	8101378 <VtoD_Roll+0x24>
		u = -u;
 810136c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101370:	eef1 7a67 	vneg.f32	s15, s15
 8101374:	edc7 7a01 	vstr	s15, [r7, #4]
	float duty = 100*u/12;
 8101378:	edd7 7a01 	vldr	s15, [r7, #4]
 810137c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 81013d0 <VtoD_Roll+0x7c>
 8101380:	ee27 7a87 	vmul.f32	s14, s15, s14
 8101384:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8101388:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810138c:	edc7 7a03 	vstr	s15, [r7, #12]

	if(duty > 100){
 8101390:	edd7 7a03 	vldr	s15, [r7, #12]
 8101394:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 81013d0 <VtoD_Roll+0x7c>
 8101398:	eef4 7ac7 	vcmpe.f32	s15, s14
 810139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013a0:	dd02      	ble.n	81013a8 <VtoD_Roll+0x54>
		duty = 100;
 81013a2:	4b0c      	ldr	r3, [pc, #48]	; (81013d4 <VtoD_Roll+0x80>)
 81013a4:	60fb      	str	r3, [r7, #12]
 81013a6:	e009      	b.n	81013bc <VtoD_Roll+0x68>
	}else if(duty < 0){
 81013a8:	edd7 7a03 	vldr	s15, [r7, #12]
 81013ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81013b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81013b4:	d502      	bpl.n	81013bc <VtoD_Roll+0x68>
		duty = 0;
 81013b6:	f04f 0300 	mov.w	r3, #0
 81013ba:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 81013bc:	68fb      	ldr	r3, [r7, #12]
 81013be:	ee07 3a90 	vmov	s15, r3
}
 81013c2:	eeb0 0a67 	vmov.f32	s0, s15
 81013c6:	3714      	adds	r7, #20
 81013c8:	46bd      	mov	sp, r7
 81013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ce:	4770      	bx	lr
 81013d0:	42c80000 	.word	0x42c80000
 81013d4:	42c80000 	.word	0x42c80000

081013d8 <set_PWM_dir_Roll>:
	}
	return dir;

}

void set_PWM_dir_Roll(uint32_t duty,uint8_t dir){
 81013d8:	b480      	push	{r7}
 81013da:	b083      	sub	sp, #12
 81013dc:	af00      	add	r7, sp, #0
 81013de:	6078      	str	r0, [r7, #4]
 81013e0:	460b      	mov	r3, r1
 81013e2:	70fb      	strb	r3, [r7, #3]
	TIM1->CCR1 = ((float)duty/100)*TIM1->ARR;
 81013e4:	687b      	ldr	r3, [r7, #4]
 81013e6:	ee07 3a90 	vmov	s15, r3
 81013ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013ee:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8101420 <set_PWM_dir_Roll+0x48>
 81013f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81013f6:	4b0b      	ldr	r3, [pc, #44]	; (8101424 <set_PWM_dir_Roll+0x4c>)
 81013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81013fa:	ee07 3a90 	vmov	s15, r3
 81013fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101406:	4b07      	ldr	r3, [pc, #28]	; (8101424 <set_PWM_dir_Roll+0x4c>)
 8101408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810140c:	ee17 2a90 	vmov	r2, s15
 8101410:	635a      	str	r2, [r3, #52]	; 0x34
	uint8_t current_dir = (TIM4->CR1 & 0x0010);

	if(dir != current_dir)
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);//cambia senso di rotazione
	*/
}
 8101412:	bf00      	nop
 8101414:	370c      	adds	r7, #12
 8101416:	46bd      	mov	sp, r7
 8101418:	f85d 7b04 	ldr.w	r7, [sp], #4
 810141c:	4770      	bx	lr
 810141e:	bf00      	nop
 8101420:	42c80000 	.word	0x42c80000
 8101424:	40010000 	.word	0x40010000

08101428 <VtoD_Yaw>:
#include "PidYaw.h"

float VtoD_Yaw(float u){
 8101428:	b480      	push	{r7}
 810142a:	b085      	sub	sp, #20
 810142c:	af00      	add	r7, sp, #0
 810142e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0)
 8101432:	edd7 7a01 	vldr	s15, [r7, #4]
 8101436:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810143e:	d805      	bhi.n	810144c <VtoD_Yaw+0x24>
		u = -u;
 8101440:	edd7 7a01 	vldr	s15, [r7, #4]
 8101444:	eef1 7a67 	vneg.f32	s15, s15
 8101448:	edc7 7a01 	vstr	s15, [r7, #4]
	float duty = 100*u/12;
 810144c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101450:	ed9f 7a14 	vldr	s14, [pc, #80]	; 81014a4 <VtoD_Yaw+0x7c>
 8101454:	ee27 7a87 	vmul.f32	s14, s15, s14
 8101458:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 810145c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101460:	edc7 7a03 	vstr	s15, [r7, #12]

	if(duty > 100){
 8101464:	edd7 7a03 	vldr	s15, [r7, #12]
 8101468:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 81014a4 <VtoD_Yaw+0x7c>
 810146c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101474:	dd02      	ble.n	810147c <VtoD_Yaw+0x54>
		duty = 100;
 8101476:	4b0c      	ldr	r3, [pc, #48]	; (81014a8 <VtoD_Yaw+0x80>)
 8101478:	60fb      	str	r3, [r7, #12]
 810147a:	e009      	b.n	8101490 <VtoD_Yaw+0x68>
	}else if(duty < 0){
 810147c:	edd7 7a03 	vldr	s15, [r7, #12]
 8101480:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8101484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101488:	d502      	bpl.n	8101490 <VtoD_Yaw+0x68>
		duty = 0;
 810148a:	f04f 0300 	mov.w	r3, #0
 810148e:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 8101490:	68fb      	ldr	r3, [r7, #12]
 8101492:	ee07 3a90 	vmov	s15, r3
}
 8101496:	eeb0 0a67 	vmov.f32	s0, s15
 810149a:	3714      	adds	r7, #20
 810149c:	46bd      	mov	sp, r7
 810149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014a2:	4770      	bx	lr
 81014a4:	42c80000 	.word	0x42c80000
 81014a8:	42c80000 	.word	0x42c80000

081014ac <set_PWM_dir_Yaw>:
	}
	return dir;

}

void set_PWM_dir_Yaw(uint32_t duty,uint8_t dir){
 81014ac:	b480      	push	{r7}
 81014ae:	b083      	sub	sp, #12
 81014b0:	af00      	add	r7, sp, #0
 81014b2:	6078      	str	r0, [r7, #4]
 81014b4:	460b      	mov	r3, r1
 81014b6:	70fb      	strb	r3, [r7, #3]
	TIM1->CCR3 = ((float)duty/100)*TIM1->ARR;
 81014b8:	687b      	ldr	r3, [r7, #4]
 81014ba:	ee07 3a90 	vmov	s15, r3
 81014be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014c2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 81014f4 <set_PWM_dir_Yaw+0x48>
 81014c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81014ca:	4b0b      	ldr	r3, [pc, #44]	; (81014f8 <set_PWM_dir_Yaw+0x4c>)
 81014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81014ce:	ee07 3a90 	vmov	s15, r3
 81014d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81014da:	4b07      	ldr	r3, [pc, #28]	; (81014f8 <set_PWM_dir_Yaw+0x4c>)
 81014dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81014e0:	ee17 2a90 	vmov	r2, s15
 81014e4:	63da      	str	r2, [r3, #60]	; 0x3c
	uint8_t current_dir = (TIM4->CR1 & 0x0010);

	if(dir != current_dir)
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);//cambia senso di rotazione
	*/
}
 81014e6:	bf00      	nop
 81014e8:	370c      	adds	r7, #12
 81014ea:	46bd      	mov	sp, r7
 81014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014f0:	4770      	bx	lr
 81014f2:	bf00      	nop
 81014f4:	42c80000 	.word	0x42c80000
 81014f8:	40010000 	.word	0x40010000

081014fc <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 81014fc:	b580      	push	{r7, lr}
 81014fe:	b082      	sub	sp, #8
 8101500:	af00      	add	r7, sp, #0
 8101502:	4603      	mov	r3, r0
 8101504:	71fb      	strb	r3, [r7, #7]
 8101506:	79fb      	ldrb	r3, [r7, #7]
 8101508:	4619      	mov	r1, r3
 810150a:	2007      	movs	r0, #7
 810150c:	f000 fa02 	bl	8101914 <bno055_writeData>
 8101510:	bf00      	nop
 8101512:	3708      	adds	r7, #8
 8101514:	46bd      	mov	sp, r7
 8101516:	bd80      	pop	{r7, pc}

08101518 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8101518:	b580      	push	{r7, lr}
 810151a:	b082      	sub	sp, #8
 810151c:	af00      	add	r7, sp, #0
 810151e:	4603      	mov	r3, r0
 8101520:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8101522:	79fb      	ldrb	r3, [r7, #7]
 8101524:	4619      	mov	r1, r3
 8101526:	203d      	movs	r0, #61	; 0x3d
 8101528:	f000 f9f4 	bl	8101914 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 810152c:	79fb      	ldrb	r3, [r7, #7]
 810152e:	2b00      	cmp	r3, #0
 8101530:	d103      	bne.n	810153a <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8101532:	2013      	movs	r0, #19
 8101534:	f000 f9e2 	bl	81018fc <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8101538:	e002      	b.n	8101540 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 810153a:	2007      	movs	r0, #7
 810153c:	f000 f9de 	bl	81018fc <bno055_delay>
}
 8101540:	bf00      	nop
 8101542:	3708      	adds	r7, #8
 8101544:	46bd      	mov	sp, r7
 8101546:	bd80      	pop	{r7, pc}

08101548 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8101548:	b580      	push	{r7, lr}
 810154a:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 810154c:	2000      	movs	r0, #0
 810154e:	f7ff ffe3 	bl	8101518 <bno055_setOperationMode>
}
 8101552:	bf00      	nop
 8101554:	bd80      	pop	{r7, pc}

08101556 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8101556:	b580      	push	{r7, lr}
 8101558:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810155a:	200c      	movs	r0, #12
 810155c:	f7ff ffdc 	bl	8101518 <bno055_setOperationMode>
}
 8101560:	bf00      	nop
 8101562:	bd80      	pop	{r7, pc}

08101564 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8101564:	b580      	push	{r7, lr}
 8101566:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8101568:	2120      	movs	r1, #32
 810156a:	203f      	movs	r0, #63	; 0x3f
 810156c:	f000 f9d2 	bl	8101914 <bno055_writeData>
  bno055_delay(700);
 8101570:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8101574:	f000 f9c2 	bl	81018fc <bno055_delay>
}
 8101578:	bf00      	nop
 810157a:	bd80      	pop	{r7, pc}

0810157c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 810157c:	b580      	push	{r7, lr}
 810157e:	b082      	sub	sp, #8
 8101580:	af00      	add	r7, sp, #0
  bno055_reset();
 8101582:	f7ff ffef 	bl	8101564 <bno055_reset>

  uint8_t id = 0;
 8101586:	2300      	movs	r3, #0
 8101588:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 810158a:	1dfb      	adds	r3, r7, #7
 810158c:	2201      	movs	r2, #1
 810158e:	4619      	mov	r1, r3
 8101590:	2000      	movs	r0, #0
 8101592:	f000 faab 	bl	8101aec <bno055_readData>
  if (id != BNO055_ID) {
 8101596:	79fb      	ldrb	r3, [r7, #7]
 8101598:	2ba0      	cmp	r3, #160	; 0xa0
 810159a:	d004      	beq.n	81015a6 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 810159c:	79fb      	ldrb	r3, [r7, #7]
 810159e:	4619      	mov	r1, r3
 81015a0:	4809      	ldr	r0, [pc, #36]	; (81015c8 <bno055_setup+0x4c>)
 81015a2:	f008 fdb7 	bl	810a114 <iprintf>
  }
  bno055_setPage(0);
 81015a6:	2000      	movs	r0, #0
 81015a8:	f7ff ffa8 	bl	81014fc <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81015ac:	2100      	movs	r1, #0
 81015ae:	203f      	movs	r0, #63	; 0x3f
 81015b0:	f000 f9b0 	bl	8101914 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 81015b4:	f7ff ffc8 	bl	8101548 <bno055_setOperationModeConfig>
  bno055_delay(10);
 81015b8:	200a      	movs	r0, #10
 81015ba:	f000 f99f 	bl	81018fc <bno055_delay>
}
 81015be:	bf00      	nop
 81015c0:	3708      	adds	r7, #8
 81015c2:	46bd      	mov	sp, r7
 81015c4:	bd80      	pop	{r7, pc}
 81015c6:	bf00      	nop
 81015c8:	0810de18 	.word	0x0810de18

081015cc <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 81015cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81015d0:	b09e      	sub	sp, #120	; 0x78
 81015d2:	af00      	add	r7, sp, #0
 81015d4:	4603      	mov	r3, r0
 81015d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 81015da:	2000      	movs	r0, #0
 81015dc:	f7ff ff8e 	bl	81014fc <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 81015e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81015e4:	2b20      	cmp	r3, #32
 81015e6:	d108      	bne.n	81015fa <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 81015e8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 81015ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81015f0:	2208      	movs	r2, #8
 81015f2:	4618      	mov	r0, r3
 81015f4:	f000 fa7a 	bl	8101aec <bno055_readData>
 81015f8:	e007      	b.n	810160a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 81015fa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 81015fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101602:	2206      	movs	r2, #6
 8101604:	4618      	mov	r0, r3
 8101606:	f000 fa71 	bl	8101aec <bno055_readData>

  double scale = 1;
 810160a:	f04f 0200 	mov.w	r2, #0
 810160e:	4b8b      	ldr	r3, [pc, #556]	; (810183c <bno055_getVector+0x270>)
 8101610:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8101614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101618:	2b0e      	cmp	r3, #14
 810161a:	d109      	bne.n	8101630 <bno055_getVector+0x64>
    scale = magScale;
 810161c:	4b88      	ldr	r3, [pc, #544]	; (8101840 <bno055_getVector+0x274>)
 810161e:	881b      	ldrh	r3, [r3, #0]
 8101620:	4618      	mov	r0, r3
 8101622:	f7fe fff7 	bl	8100614 <__aeabi_ui2d>
 8101626:	4602      	mov	r2, r0
 8101628:	460b      	mov	r3, r1
 810162a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810162e:	e03e      	b.n	81016ae <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8101630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101634:	2b08      	cmp	r3, #8
 8101636:	d007      	beq.n	8101648 <bno055_getVector+0x7c>
 8101638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810163c:	2b28      	cmp	r3, #40	; 0x28
 810163e:	d003      	beq.n	8101648 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8101640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101644:	2b2e      	cmp	r3, #46	; 0x2e
 8101646:	d109      	bne.n	810165c <bno055_getVector+0x90>
    scale = accelScale;
 8101648:	4b7e      	ldr	r3, [pc, #504]	; (8101844 <bno055_getVector+0x278>)
 810164a:	881b      	ldrh	r3, [r3, #0]
 810164c:	4618      	mov	r0, r3
 810164e:	f7fe ffe1 	bl	8100614 <__aeabi_ui2d>
 8101652:	4602      	mov	r2, r0
 8101654:	460b      	mov	r3, r1
 8101656:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810165a:	e028      	b.n	81016ae <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 810165c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101660:	2b14      	cmp	r3, #20
 8101662:	d109      	bne.n	8101678 <bno055_getVector+0xac>
    scale = angularRateScale;
 8101664:	4b78      	ldr	r3, [pc, #480]	; (8101848 <bno055_getVector+0x27c>)
 8101666:	881b      	ldrh	r3, [r3, #0]
 8101668:	4618      	mov	r0, r3
 810166a:	f7fe ffd3 	bl	8100614 <__aeabi_ui2d>
 810166e:	4602      	mov	r2, r0
 8101670:	460b      	mov	r3, r1
 8101672:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101676:	e01a      	b.n	81016ae <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8101678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810167c:	2b1a      	cmp	r3, #26
 810167e:	d109      	bne.n	8101694 <bno055_getVector+0xc8>
    scale = eulerScale;
 8101680:	4b72      	ldr	r3, [pc, #456]	; (810184c <bno055_getVector+0x280>)
 8101682:	881b      	ldrh	r3, [r3, #0]
 8101684:	4618      	mov	r0, r3
 8101686:	f7fe ffc5 	bl	8100614 <__aeabi_ui2d>
 810168a:	4602      	mov	r2, r0
 810168c:	460b      	mov	r3, r1
 810168e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101692:	e00c      	b.n	81016ae <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8101694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101698:	2b20      	cmp	r3, #32
 810169a:	d108      	bne.n	81016ae <bno055_getVector+0xe2>
    scale = quaScale;
 810169c:	4b6c      	ldr	r3, [pc, #432]	; (8101850 <bno055_getVector+0x284>)
 810169e:	881b      	ldrh	r3, [r3, #0]
 81016a0:	4618      	mov	r0, r3
 81016a2:	f7fe ffb7 	bl	8100614 <__aeabi_ui2d>
 81016a6:	4602      	mov	r2, r0
 81016a8:	460b      	mov	r3, r1
 81016aa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 81016ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81016b2:	2220      	movs	r2, #32
 81016b4:	2100      	movs	r1, #0
 81016b6:	4618      	mov	r0, r3
 81016b8:	f007 feaa 	bl	8109410 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 81016bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81016c0:	2b20      	cmp	r3, #32
 81016c2:	d150      	bne.n	8101766 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 81016c4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 81016c8:	021b      	lsls	r3, r3, #8
 81016ca:	b21a      	sxth	r2, r3
 81016cc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 81016d0:	b21b      	sxth	r3, r3
 81016d2:	4313      	orrs	r3, r2
 81016d4:	b21b      	sxth	r3, r3
 81016d6:	4618      	mov	r0, r3
 81016d8:	f7fe ffac 	bl	8100634 <__aeabi_i2d>
 81016dc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81016e0:	f7ff f93c 	bl	810095c <__aeabi_ddiv>
 81016e4:	4602      	mov	r2, r0
 81016e6:	460b      	mov	r3, r1
 81016e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 81016ec:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 81016f0:	021b      	lsls	r3, r3, #8
 81016f2:	b21a      	sxth	r2, r3
 81016f4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 81016f8:	b21b      	sxth	r3, r3
 81016fa:	4313      	orrs	r3, r2
 81016fc:	b21b      	sxth	r3, r3
 81016fe:	4618      	mov	r0, r3
 8101700:	f7fe ff98 	bl	8100634 <__aeabi_i2d>
 8101704:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101708:	f7ff f928 	bl	810095c <__aeabi_ddiv>
 810170c:	4602      	mov	r2, r0
 810170e:	460b      	mov	r3, r1
 8101710:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101714:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8101718:	021b      	lsls	r3, r3, #8
 810171a:	b21a      	sxth	r2, r3
 810171c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8101720:	b21b      	sxth	r3, r3
 8101722:	4313      	orrs	r3, r2
 8101724:	b21b      	sxth	r3, r3
 8101726:	4618      	mov	r0, r3
 8101728:	f7fe ff84 	bl	8100634 <__aeabi_i2d>
 810172c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101730:	f7ff f914 	bl	810095c <__aeabi_ddiv>
 8101734:	4602      	mov	r2, r0
 8101736:	460b      	mov	r3, r1
 8101738:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 810173c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8101740:	021b      	lsls	r3, r3, #8
 8101742:	b21a      	sxth	r2, r3
 8101744:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8101748:	b21b      	sxth	r3, r3
 810174a:	4313      	orrs	r3, r2
 810174c:	b21b      	sxth	r3, r3
 810174e:	4618      	mov	r0, r3
 8101750:	f7fe ff70 	bl	8100634 <__aeabi_i2d>
 8101754:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101758:	f7ff f900 	bl	810095c <__aeabi_ddiv>
 810175c:	4602      	mov	r2, r0
 810175e:	460b      	mov	r3, r1
 8101760:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8101764:	e03b      	b.n	81017de <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101766:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810176a:	021b      	lsls	r3, r3, #8
 810176c:	b21a      	sxth	r2, r3
 810176e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8101772:	b21b      	sxth	r3, r3
 8101774:	4313      	orrs	r3, r2
 8101776:	b21b      	sxth	r3, r3
 8101778:	4618      	mov	r0, r3
 810177a:	f7fe ff5b 	bl	8100634 <__aeabi_i2d>
 810177e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101782:	f7ff f8eb 	bl	810095c <__aeabi_ddiv>
 8101786:	4602      	mov	r2, r0
 8101788:	460b      	mov	r3, r1
 810178a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810178e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8101792:	021b      	lsls	r3, r3, #8
 8101794:	b21a      	sxth	r2, r3
 8101796:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810179a:	b21b      	sxth	r3, r3
 810179c:	4313      	orrs	r3, r2
 810179e:	b21b      	sxth	r3, r3
 81017a0:	4618      	mov	r0, r3
 81017a2:	f7fe ff47 	bl	8100634 <__aeabi_i2d>
 81017a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81017aa:	f7ff f8d7 	bl	810095c <__aeabi_ddiv>
 81017ae:	4602      	mov	r2, r0
 81017b0:	460b      	mov	r3, r1
 81017b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81017b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 81017ba:	021b      	lsls	r3, r3, #8
 81017bc:	b21a      	sxth	r2, r3
 81017be:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 81017c2:	b21b      	sxth	r3, r3
 81017c4:	4313      	orrs	r3, r2
 81017c6:	b21b      	sxth	r3, r3
 81017c8:	4618      	mov	r0, r3
 81017ca:	f7fe ff33 	bl	8100634 <__aeabi_i2d>
 81017ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81017d2:	f7ff f8c3 	bl	810095c <__aeabi_ddiv>
 81017d6:	4602      	mov	r2, r0
 81017d8:	460b      	mov	r3, r1
 81017da:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 81017de:	f107 0450 	add.w	r4, r7, #80	; 0x50
 81017e2:	f107 0528 	add.w	r5, r7, #40	; 0x28
 81017e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81017e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81017ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 81017ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81017f2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 81017f6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 81017fa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 81017fe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8101802:	ec49 8b14 	vmov	d4, r8, r9
 8101806:	ec45 4b15 	vmov	d5, r4, r5
 810180a:	ec41 0b16 	vmov	d6, r0, r1
 810180e:	ec43 2b17 	vmov	d7, r2, r3
}
 8101812:	eeb0 0a44 	vmov.f32	s0, s8
 8101816:	eef0 0a64 	vmov.f32	s1, s9
 810181a:	eeb0 1a45 	vmov.f32	s2, s10
 810181e:	eef0 1a65 	vmov.f32	s3, s11
 8101822:	eeb0 2a46 	vmov.f32	s4, s12
 8101826:	eef0 2a66 	vmov.f32	s5, s13
 810182a:	eeb0 3a47 	vmov.f32	s6, s14
 810182e:	eef0 3a67 	vmov.f32	s7, s15
 8101832:	3778      	adds	r7, #120	; 0x78
 8101834:	46bd      	mov	sp, r7
 8101836:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 810183a:	bf00      	nop
 810183c:	3ff00000 	.word	0x3ff00000
 8101840:	1000000e 	.word	0x1000000e
 8101844:	10000008 	.word	0x10000008
 8101848:	1000000a 	.word	0x1000000a
 810184c:	1000000c 	.word	0x1000000c
 8101850:	10000010 	.word	0x10000010

08101854 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8101854:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101858:	b090      	sub	sp, #64	; 0x40
 810185a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 810185c:	201a      	movs	r0, #26
 810185e:	f7ff feb5 	bl	81015cc <bno055_getVector>
 8101862:	eeb0 4a40 	vmov.f32	s8, s0
 8101866:	eef0 4a60 	vmov.f32	s9, s1
 810186a:	eeb0 5a41 	vmov.f32	s10, s2
 810186e:	eef0 5a61 	vmov.f32	s11, s3
 8101872:	eeb0 6a42 	vmov.f32	s12, s4
 8101876:	eef0 6a62 	vmov.f32	s13, s5
 810187a:	eeb0 7a43 	vmov.f32	s14, s6
 810187e:	eef0 7a63 	vmov.f32	s15, s7
 8101882:	ed87 4b08 	vstr	d4, [r7, #32]
 8101886:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810188a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810188e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8101892:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8101896:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 810189a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 810189e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 81018a2:	ec49 8b14 	vmov	d4, r8, r9
 81018a6:	ec45 4b15 	vmov	d5, r4, r5
 81018aa:	ec41 0b16 	vmov	d6, r0, r1
 81018ae:	ec43 2b17 	vmov	d7, r2, r3
}
 81018b2:	eeb0 0a44 	vmov.f32	s0, s8
 81018b6:	eef0 0a64 	vmov.f32	s1, s9
 81018ba:	eeb0 1a45 	vmov.f32	s2, s10
 81018be:	eef0 1a65 	vmov.f32	s3, s11
 81018c2:	eeb0 2a46 	vmov.f32	s4, s12
 81018c6:	eef0 2a66 	vmov.f32	s5, s13
 81018ca:	eeb0 3a47 	vmov.f32	s6, s14
 81018ce:	eef0 3a67 	vmov.f32	s7, s15
 81018d2:	3740      	adds	r7, #64	; 0x40
 81018d4:	46bd      	mov	sp, r7
 81018d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

081018dc <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 81018dc:	b480      	push	{r7}
 81018de:	b083      	sub	sp, #12
 81018e0:	af00      	add	r7, sp, #0
 81018e2:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 81018e4:	4a04      	ldr	r2, [pc, #16]	; (81018f8 <bno055_assignI2C+0x1c>)
 81018e6:	687b      	ldr	r3, [r7, #4]
 81018e8:	6013      	str	r3, [r2, #0]
}
 81018ea:	bf00      	nop
 81018ec:	370c      	adds	r7, #12
 81018ee:	46bd      	mov	sp, r7
 81018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018f4:	4770      	bx	lr
 81018f6:	bf00      	nop
 81018f8:	10000218 	.word	0x10000218

081018fc <bno055_delay>:

void bno055_delay(int time) {
 81018fc:	b580      	push	{r7, lr}
 81018fe:	b082      	sub	sp, #8
 8101900:	af00      	add	r7, sp, #0
 8101902:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8101904:	687b      	ldr	r3, [r7, #4]
 8101906:	4618      	mov	r0, r3
 8101908:	f001 f84c 	bl	81029a4 <HAL_Delay>
#endif
}
 810190c:	bf00      	nop
 810190e:	3708      	adds	r7, #8
 8101910:	46bd      	mov	sp, r7
 8101912:	bd80      	pop	{r7, pc}

08101914 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8101914:	b580      	push	{r7, lr}
 8101916:	b088      	sub	sp, #32
 8101918:	af02      	add	r7, sp, #8
 810191a:	4603      	mov	r3, r0
 810191c:	460a      	mov	r2, r1
 810191e:	71fb      	strb	r3, [r7, #7]
 8101920:	4613      	mov	r3, r2
 8101922:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8101924:	79fb      	ldrb	r3, [r7, #7]
 8101926:	733b      	strb	r3, [r7, #12]
 8101928:	79bb      	ldrb	r3, [r7, #6]
 810192a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 810192c:	4b5a      	ldr	r3, [pc, #360]	; (8101a98 <bno055_writeData+0x184>)
 810192e:	6818      	ldr	r0, [r3, #0]
 8101930:	f107 020c 	add.w	r2, r7, #12
 8101934:	230a      	movs	r3, #10
 8101936:	9300      	str	r3, [sp, #0]
 8101938:	2302      	movs	r3, #2
 810193a:	2150      	movs	r1, #80	; 0x50
 810193c:	f001 fc16 	bl	810316c <HAL_I2C_Master_Transmit>
 8101940:	4603      	mov	r3, r0
 8101942:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8101944:	7dfb      	ldrb	r3, [r7, #23]
 8101946:	2b00      	cmp	r3, #0
 8101948:	f000 80a0 	beq.w	8101a8c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 810194c:	7dfb      	ldrb	r3, [r7, #23]
 810194e:	2b01      	cmp	r3, #1
 8101950:	d103      	bne.n	810195a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8101952:	4852      	ldr	r0, [pc, #328]	; (8101a9c <bno055_writeData+0x188>)
 8101954:	f008 fc64 	bl	810a220 <puts>
 8101958:	e012      	b.n	8101980 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 810195a:	7dfb      	ldrb	r3, [r7, #23]
 810195c:	2b03      	cmp	r3, #3
 810195e:	d103      	bne.n	8101968 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101960:	484f      	ldr	r0, [pc, #316]	; (8101aa0 <bno055_writeData+0x18c>)
 8101962:	f008 fc5d 	bl	810a220 <puts>
 8101966:	e00b      	b.n	8101980 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8101968:	7dfb      	ldrb	r3, [r7, #23]
 810196a:	2b02      	cmp	r3, #2
 810196c:	d103      	bne.n	8101976 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 810196e:	484d      	ldr	r0, [pc, #308]	; (8101aa4 <bno055_writeData+0x190>)
 8101970:	f008 fc56 	bl	810a220 <puts>
 8101974:	e004      	b.n	8101980 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8101976:	7dfb      	ldrb	r3, [r7, #23]
 8101978:	4619      	mov	r1, r3
 810197a:	484b      	ldr	r0, [pc, #300]	; (8101aa8 <bno055_writeData+0x194>)
 810197c:	f008 fbca 	bl	810a114 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8101980:	4b45      	ldr	r3, [pc, #276]	; (8101a98 <bno055_writeData+0x184>)
 8101982:	681b      	ldr	r3, [r3, #0]
 8101984:	4618      	mov	r0, r3
 8101986:	f001 fef0 	bl	810376a <HAL_I2C_GetError>
 810198a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 810198c:	693b      	ldr	r3, [r7, #16]
 810198e:	2b00      	cmp	r3, #0
 8101990:	d07e      	beq.n	8101a90 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8101992:	693b      	ldr	r3, [r7, #16]
 8101994:	2b01      	cmp	r3, #1
 8101996:	d103      	bne.n	81019a0 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8101998:	4844      	ldr	r0, [pc, #272]	; (8101aac <bno055_writeData+0x198>)
 810199a:	f008 fc41 	bl	810a220 <puts>
 810199e:	e021      	b.n	81019e4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 81019a0:	693b      	ldr	r3, [r7, #16]
 81019a2:	2b02      	cmp	r3, #2
 81019a4:	d103      	bne.n	81019ae <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 81019a6:	4842      	ldr	r0, [pc, #264]	; (8101ab0 <bno055_writeData+0x19c>)
 81019a8:	f008 fc3a 	bl	810a220 <puts>
 81019ac:	e01a      	b.n	81019e4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 81019ae:	693b      	ldr	r3, [r7, #16]
 81019b0:	2b04      	cmp	r3, #4
 81019b2:	d103      	bne.n	81019bc <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 81019b4:	483f      	ldr	r0, [pc, #252]	; (8101ab4 <bno055_writeData+0x1a0>)
 81019b6:	f008 fc33 	bl	810a220 <puts>
 81019ba:	e013      	b.n	81019e4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 81019bc:	693b      	ldr	r3, [r7, #16]
 81019be:	2b08      	cmp	r3, #8
 81019c0:	d103      	bne.n	81019ca <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 81019c2:	483d      	ldr	r0, [pc, #244]	; (8101ab8 <bno055_writeData+0x1a4>)
 81019c4:	f008 fc2c 	bl	810a220 <puts>
 81019c8:	e00c      	b.n	81019e4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 81019ca:	693b      	ldr	r3, [r7, #16]
 81019cc:	2b10      	cmp	r3, #16
 81019ce:	d103      	bne.n	81019d8 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 81019d0:	483a      	ldr	r0, [pc, #232]	; (8101abc <bno055_writeData+0x1a8>)
 81019d2:	f008 fc25 	bl	810a220 <puts>
 81019d6:	e005      	b.n	81019e4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 81019d8:	693b      	ldr	r3, [r7, #16]
 81019da:	2b20      	cmp	r3, #32
 81019dc:	d102      	bne.n	81019e4 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 81019de:	4838      	ldr	r0, [pc, #224]	; (8101ac0 <bno055_writeData+0x1ac>)
 81019e0:	f008 fc1e 	bl	810a220 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 81019e4:	4b2c      	ldr	r3, [pc, #176]	; (8101a98 <bno055_writeData+0x184>)
 81019e6:	681b      	ldr	r3, [r3, #0]
 81019e8:	4618      	mov	r0, r3
 81019ea:	f001 feb0 	bl	810374e <HAL_I2C_GetState>
 81019ee:	4603      	mov	r3, r0
 81019f0:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 81019f2:	7bfb      	ldrb	r3, [r7, #15]
 81019f4:	2b00      	cmp	r3, #0
 81019f6:	d103      	bne.n	8101a00 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 81019f8:	4832      	ldr	r0, [pc, #200]	; (8101ac4 <bno055_writeData+0x1b0>)
 81019fa:	f008 fc11 	bl	810a220 <puts>
 81019fe:	e048      	b.n	8101a92 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8101a00:	7bfb      	ldrb	r3, [r7, #15]
 8101a02:	2b20      	cmp	r3, #32
 8101a04:	d103      	bne.n	8101a0e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101a06:	482f      	ldr	r0, [pc, #188]	; (8101ac4 <bno055_writeData+0x1b0>)
 8101a08:	f008 fc0a 	bl	810a220 <puts>
 8101a0c:	e041      	b.n	8101a92 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8101a0e:	7bfb      	ldrb	r3, [r7, #15]
 8101a10:	2b24      	cmp	r3, #36	; 0x24
 8101a12:	d103      	bne.n	8101a1c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8101a14:	482c      	ldr	r0, [pc, #176]	; (8101ac8 <bno055_writeData+0x1b4>)
 8101a16:	f008 fc03 	bl	810a220 <puts>
 8101a1a:	e03a      	b.n	8101a92 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8101a1c:	7bfb      	ldrb	r3, [r7, #15]
 8101a1e:	2b21      	cmp	r3, #33	; 0x21
 8101a20:	d103      	bne.n	8101a2a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8101a22:	482a      	ldr	r0, [pc, #168]	; (8101acc <bno055_writeData+0x1b8>)
 8101a24:	f008 fbfc 	bl	810a220 <puts>
 8101a28:	e033      	b.n	8101a92 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8101a2a:	7bfb      	ldrb	r3, [r7, #15]
 8101a2c:	2b22      	cmp	r3, #34	; 0x22
 8101a2e:	d103      	bne.n	8101a38 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8101a30:	4827      	ldr	r0, [pc, #156]	; (8101ad0 <bno055_writeData+0x1bc>)
 8101a32:	f008 fbf5 	bl	810a220 <puts>
 8101a36:	e02c      	b.n	8101a92 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8101a38:	7bfb      	ldrb	r3, [r7, #15]
 8101a3a:	2b28      	cmp	r3, #40	; 0x28
 8101a3c:	d103      	bne.n	8101a46 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8101a3e:	4825      	ldr	r0, [pc, #148]	; (8101ad4 <bno055_writeData+0x1c0>)
 8101a40:	f008 fbee 	bl	810a220 <puts>
 8101a44:	e025      	b.n	8101a92 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8101a46:	7bfb      	ldrb	r3, [r7, #15]
 8101a48:	2b29      	cmp	r3, #41	; 0x29
 8101a4a:	d103      	bne.n	8101a54 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8101a4c:	4822      	ldr	r0, [pc, #136]	; (8101ad8 <bno055_writeData+0x1c4>)
 8101a4e:	f008 fbe7 	bl	810a220 <puts>
 8101a52:	e01e      	b.n	8101a92 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8101a54:	7bfb      	ldrb	r3, [r7, #15]
 8101a56:	2b2a      	cmp	r3, #42	; 0x2a
 8101a58:	d103      	bne.n	8101a62 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8101a5a:	4820      	ldr	r0, [pc, #128]	; (8101adc <bno055_writeData+0x1c8>)
 8101a5c:	f008 fbe0 	bl	810a220 <puts>
 8101a60:	e017      	b.n	8101a92 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8101a62:	7bfb      	ldrb	r3, [r7, #15]
 8101a64:	2b60      	cmp	r3, #96	; 0x60
 8101a66:	d103      	bne.n	8101a70 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8101a68:	481d      	ldr	r0, [pc, #116]	; (8101ae0 <bno055_writeData+0x1cc>)
 8101a6a:	f008 fbd9 	bl	810a220 <puts>
 8101a6e:	e010      	b.n	8101a92 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8101a70:	7bfb      	ldrb	r3, [r7, #15]
 8101a72:	2ba0      	cmp	r3, #160	; 0xa0
 8101a74:	d103      	bne.n	8101a7e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8101a76:	481b      	ldr	r0, [pc, #108]	; (8101ae4 <bno055_writeData+0x1d0>)
 8101a78:	f008 fbd2 	bl	810a220 <puts>
 8101a7c:	e009      	b.n	8101a92 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8101a7e:	7bfb      	ldrb	r3, [r7, #15]
 8101a80:	2be0      	cmp	r3, #224	; 0xe0
 8101a82:	d106      	bne.n	8101a92 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8101a84:	4818      	ldr	r0, [pc, #96]	; (8101ae8 <bno055_writeData+0x1d4>)
 8101a86:	f008 fbcb 	bl	810a220 <puts>
 8101a8a:	e002      	b.n	8101a92 <bno055_writeData+0x17e>
    return;
 8101a8c:	bf00      	nop
 8101a8e:	e000      	b.n	8101a92 <bno055_writeData+0x17e>
    return;
 8101a90:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8101a92:	3718      	adds	r7, #24
 8101a94:	46bd      	mov	sp, r7
 8101a96:	bd80      	pop	{r7, pc}
 8101a98:	10000218 	.word	0x10000218
 8101a9c:	0810de54 	.word	0x0810de54
 8101aa0:	0810de78 	.word	0x0810de78
 8101aa4:	0810dea0 	.word	0x0810dea0
 8101aa8:	0810dec4 	.word	0x0810dec4
 8101aac:	0810dedc 	.word	0x0810dedc
 8101ab0:	0810def0 	.word	0x0810def0
 8101ab4:	0810df04 	.word	0x0810df04
 8101ab8:	0810df18 	.word	0x0810df18
 8101abc:	0810df2c 	.word	0x0810df2c
 8101ac0:	0810df40 	.word	0x0810df40
 8101ac4:	0810df58 	.word	0x0810df58
 8101ac8:	0810df70 	.word	0x0810df70
 8101acc:	0810df84 	.word	0x0810df84
 8101ad0:	0810df9c 	.word	0x0810df9c
 8101ad4:	0810dfb4 	.word	0x0810dfb4
 8101ad8:	0810dfcc 	.word	0x0810dfcc
 8101adc:	0810dfec 	.word	0x0810dfec
 8101ae0:	0810e00c 	.word	0x0810e00c
 8101ae4:	0810e024 	.word	0x0810e024
 8101ae8:	0810e03c 	.word	0x0810e03c

08101aec <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8101aec:	b580      	push	{r7, lr}
 8101aee:	b086      	sub	sp, #24
 8101af0:	af02      	add	r7, sp, #8
 8101af2:	4603      	mov	r3, r0
 8101af4:	6039      	str	r1, [r7, #0]
 8101af6:	71fb      	strb	r3, [r7, #7]
 8101af8:	4613      	mov	r3, r2
 8101afa:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8101afc:	4b0d      	ldr	r3, [pc, #52]	; (8101b34 <bno055_readData+0x48>)
 8101afe:	6818      	ldr	r0, [r3, #0]
 8101b00:	1dfa      	adds	r2, r7, #7
 8101b02:	2364      	movs	r3, #100	; 0x64
 8101b04:	9300      	str	r3, [sp, #0]
 8101b06:	2301      	movs	r3, #1
 8101b08:	2150      	movs	r1, #80	; 0x50
 8101b0a:	f001 fb2f 	bl	810316c <HAL_I2C_Master_Transmit>
 8101b0e:	4603      	mov	r3, r0
 8101b10:	73fb      	strb	r3, [r7, #15]
                          100);
  ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101b12:	4b08      	ldr	r3, [pc, #32]	; (8101b34 <bno055_readData+0x48>)
 8101b14:	6818      	ldr	r0, [r3, #0]
 8101b16:	79bb      	ldrb	r3, [r7, #6]
 8101b18:	b29b      	uxth	r3, r3
 8101b1a:	2264      	movs	r2, #100	; 0x64
 8101b1c:	9200      	str	r2, [sp, #0]
 8101b1e:	683a      	ldr	r2, [r7, #0]
 8101b20:	2150      	movs	r1, #80	; 0x50
 8101b22:	f001 fc17 	bl	8103354 <HAL_I2C_Master_Receive>
 8101b26:	4603      	mov	r3, r0
 8101b28:	73fb      	strb	r3, [r7, #15]
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8101b2a:	bf00      	nop
 8101b2c:	3710      	adds	r7, #16
 8101b2e:	46bd      	mov	sp, r7
 8101b30:	bd80      	pop	{r7, pc}
 8101b32:	bf00      	nop
 8101b34:	10000218 	.word	0x10000218

08101b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101b3c:	b0a0      	sub	sp, #128	; 0x80
 8101b3e:	af0a      	add	r7, sp, #40	; 0x28

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101b40:	4b97      	ldr	r3, [pc, #604]	; (8101da0 <main+0x268>)
 8101b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b46:	4a96      	ldr	r2, [pc, #600]	; (8101da0 <main+0x268>)
 8101b48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b50:	4b93      	ldr	r3, [pc, #588]	; (8101da0 <main+0x268>)
 8101b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8101b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101b5e:	2001      	movs	r0, #1
 8101b60:	f001 fa62 	bl	8103028 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101b64:	f002 f9b0 	bl	8103ec8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101b68:	2201      	movs	r2, #1
 8101b6a:	2102      	movs	r1, #2
 8101b6c:	2000      	movs	r0, #0
 8101b6e:	f002 f931 	bl	8103dd4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101b72:	4b8c      	ldr	r3, [pc, #560]	; (8101da4 <main+0x26c>)
 8101b74:	681b      	ldr	r3, [r3, #0]
 8101b76:	091b      	lsrs	r3, r3, #4
 8101b78:	f003 030f 	and.w	r3, r3, #15
 8101b7c:	2b07      	cmp	r3, #7
 8101b7e:	d108      	bne.n	8101b92 <main+0x5a>
 8101b80:	4b89      	ldr	r3, [pc, #548]	; (8101da8 <main+0x270>)
 8101b82:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101b86:	4a88      	ldr	r2, [pc, #544]	; (8101da8 <main+0x270>)
 8101b88:	f043 0301 	orr.w	r3, r3, #1
 8101b8c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101b90:	e007      	b.n	8101ba2 <main+0x6a>
 8101b92:	4b85      	ldr	r3, [pc, #532]	; (8101da8 <main+0x270>)
 8101b94:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101b98:	4a83      	ldr	r2, [pc, #524]	; (8101da8 <main+0x270>)
 8101b9a:	f043 0301 	orr.w	r3, r3, #1
 8101b9e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101ba2:	f000 fe4b 	bl	810283c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  SystemClock_Config();
 8101ba6:	f000 fb47 	bl	8102238 <SystemClock_Config>
  MX_GPIO_Init();
 8101baa:	f000 faaf 	bl	810210c <MX_GPIO_Init>
  MX_TIM1_Init();
 8101bae:	f000 f94f 	bl	8101e50 <MX_TIM1_Init>
  MX_TIM2_Init();
 8101bb2:	f000 fa11 	bl	8101fd8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8101bb6:	f000 fa5d 	bl	8102074 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8101bba:	f000 f909 	bl	8101dd0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8101bbe:	2100      	movs	r1, #0
 8101bc0:	487a      	ldr	r0, [pc, #488]	; (8101dac <main+0x274>)
 8101bc2:	f005 f8cd 	bl	8106d60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8101bc6:	2104      	movs	r1, #4
 8101bc8:	4878      	ldr	r0, [pc, #480]	; (8101dac <main+0x274>)
 8101bca:	f005 f8c9 	bl	8106d60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8101bce:	2108      	movs	r1, #8
 8101bd0:	4876      	ldr	r0, [pc, #472]	; (8101dac <main+0x274>)
 8101bd2:	f005 f8c5 	bl	8106d60 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim2);
 8101bd6:	4876      	ldr	r0, [pc, #472]	; (8101db0 <main+0x278>)
 8101bd8:	f004 fff0 	bl	8106bbc <HAL_TIM_Base_Start>

  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1,BNO055_I2C_ADDR << 1,5,1000);
 8101bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101be0:	2205      	movs	r2, #5
 8101be2:	2150      	movs	r1, #80	; 0x50
 8101be4:	4873      	ldr	r0, [pc, #460]	; (8101db4 <main+0x27c>)
 8101be6:	f001 fcab 	bl	8103540 <HAL_I2C_IsDeviceReady>
 8101bea:	4603      	mov	r3, r0
 8101bec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  bno055_assignI2C(&hi2c1);
 8101bf0:	4870      	ldr	r0, [pc, #448]	; (8101db4 <main+0x27c>)
 8101bf2:	f7ff fe73 	bl	81018dc <bno055_assignI2C>
  bno055_setup();
 8101bf6:	f7ff fcc1 	bl	810157c <bno055_setup>
  bno055_setOperationModeNDOF();
 8101bfa:	f7ff fcac 	bl	8101556 <bno055_setOperationModeNDOF>
  init_tune_PID(&pid, dt, 0.5, 0, 0);
 8101bfe:	4b6e      	ldr	r3, [pc, #440]	; (8101db8 <main+0x280>)
 8101c00:	edd3 7a00 	vldr	s15, [r3]
 8101c04:	eddf 1a6d 	vldr	s3, [pc, #436]	; 8101dbc <main+0x284>
 8101c08:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8101dbc <main+0x284>
 8101c0c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8101c10:	eeb0 0a67 	vmov.f32	s0, s15
 8101c14:	486a      	ldr	r0, [pc, #424]	; (8101dc0 <main+0x288>)
 8101c16:	f7ff fa8f 	bl	8101138 <init_tune_PID>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(flag_Tc == 1){
 8101c1a:	4b6a      	ldr	r3, [pc, #424]	; (8101dc4 <main+0x28c>)
 8101c1c:	681b      	ldr	r3, [r3, #0]
 8101c1e:	2b01      	cmp	r3, #1
 8101c20:	d1fb      	bne.n	8101c1a <main+0xe2>

		  flag_Tc = 0;
 8101c22:	4b68      	ldr	r3, [pc, #416]	; (8101dc4 <main+0x28c>)
 8101c24:	2200      	movs	r2, #0
 8101c26:	601a      	str	r2, [r3, #0]

		  bno055_vector_t v = bno055_getVectorEuler();
 8101c28:	f7ff fe14 	bl	8101854 <bno055_getVectorEuler>
 8101c2c:	eeb0 4a40 	vmov.f32	s8, s0
 8101c30:	eef0 4a60 	vmov.f32	s9, s1
 8101c34:	eeb0 5a41 	vmov.f32	s10, s2
 8101c38:	eef0 5a61 	vmov.f32	s11, s3
 8101c3c:	eeb0 6a42 	vmov.f32	s12, s4
 8101c40:	eef0 6a62 	vmov.f32	s13, s5
 8101c44:	eeb0 7a43 	vmov.f32	s14, s6
 8101c48:	eef0 7a63 	vmov.f32	s15, s7
 8101c4c:	ed87 4b04 	vstr	d4, [r7, #16]
 8101c50:	ed87 5b06 	vstr	d5, [r7, #24]
 8101c54:	ed87 6b08 	vstr	d6, [r7, #32]
 8101c58:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		  printf("{\"yaw\": %.2f,\"roll\": %.2f,\"pitch\": %.2f}\r\n", v.x, v.y, v.z);
 8101c5c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8101c60:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8101c64:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8101c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8101c6c:	e9cd 2300 	strd	r2, r3, [sp]
 8101c70:	4622      	mov	r2, r4
 8101c72:	462b      	mov	r3, r5
 8101c74:	4854      	ldr	r0, [pc, #336]	; (8101dc8 <main+0x290>)
 8101c76:	f008 fa4d 	bl	810a114 <iprintf>


		  u_roll = PID_controller(&pid, (float)v.y, 0.0);
 8101c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8101c7e:	4610      	mov	r0, r2
 8101c80:	4619      	mov	r1, r3
 8101c82:	f7ff f839 	bl	8100cf8 <__aeabi_d2f>
 8101c86:	4603      	mov	r3, r0
 8101c88:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8101dbc <main+0x284>
 8101c8c:	ee00 3a10 	vmov	s0, r3
 8101c90:	484b      	ldr	r0, [pc, #300]	; (8101dc0 <main+0x288>)
 8101c92:	f7ff fa79 	bl	8101188 <PID_controller>
 8101c96:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
		  u_pitch = PID_controller(&pid, (float)v.z, 0.0);
 8101c9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8101c9e:	4610      	mov	r0, r2
 8101ca0:	4619      	mov	r1, r3
 8101ca2:	f7ff f829 	bl	8100cf8 <__aeabi_d2f>
 8101ca6:	4603      	mov	r3, r0
 8101ca8:	eddf 0a44 	vldr	s1, [pc, #272]	; 8101dbc <main+0x284>
 8101cac:	ee00 3a10 	vmov	s0, r3
 8101cb0:	4843      	ldr	r0, [pc, #268]	; (8101dc0 <main+0x288>)
 8101cb2:	f7ff fa69 	bl	8101188 <PID_controller>
 8101cb6:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
		  u_yaw = PID_controller(&pid, (float)v.x, 0.0);
 8101cba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101cbe:	4610      	mov	r0, r2
 8101cc0:	4619      	mov	r1, r3
 8101cc2:	f7ff f819 	bl	8100cf8 <__aeabi_d2f>
 8101cc6:	4603      	mov	r3, r0
 8101cc8:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8101dbc <main+0x284>
 8101ccc:	ee00 3a10 	vmov	s0, r3
 8101cd0:	483b      	ldr	r0, [pc, #236]	; (8101dc0 <main+0x288>)
 8101cd2:	f7ff fa59 	bl	8101188 <PID_controller>
 8101cd6:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

		  duty_roll = VtoD_Roll(u_roll);
 8101cda:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8101cde:	f7ff fb39 	bl	8101354 <VtoD_Roll>
 8101ce2:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
		  duty_pitch = VtoD_Pitch(u_pitch);
 8101ce6:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8101cea:	f7ff fac9 	bl	8101280 <VtoD_Pitch>
 8101cee:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
		  duty_yaw = VtoD_Yaw(u_yaw);
 8101cf2:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8101cf6:	f7ff fb97 	bl	8101428 <VtoD_Yaw>
 8101cfa:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

		  set_PWM_dir_Roll((uint32_t)duty_roll,dir);
 8101cfe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8101d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101d08:	b2db      	uxtb	r3, r3
 8101d0a:	4619      	mov	r1, r3
 8101d0c:	ee17 0a90 	vmov	r0, s15
 8101d10:	f7ff fb62 	bl	81013d8 <set_PWM_dir_Roll>
		  set_PWM_dir_Pitch((uint32_t)duty_pitch,dir);
 8101d14:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8101d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101d1e:	b2db      	uxtb	r3, r3
 8101d20:	4619      	mov	r1, r3
 8101d22:	ee17 0a90 	vmov	r0, s15
 8101d26:	f7ff faed 	bl	8101304 <set_PWM_dir_Pitch>
		  set_PWM_dir_Yaw((uint32_t)duty_yaw,dir);
 8101d2a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8101d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101d34:	b2db      	uxtb	r3, r3
 8101d36:	4619      	mov	r1, r3
 8101d38:	ee17 0a90 	vmov	r0, s15
 8101d3c:	f7ff fbb6 	bl	81014ac <set_PWM_dir_Yaw>

		  printf("%f %f %f %f %f %f\r\n",u_roll,u_pitch,u_yaw,duty_roll,duty_pitch,duty_yaw);
 8101d40:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8101d42:	f7fe fc89 	bl	8100658 <__aeabi_f2d>
 8101d46:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8101d4a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8101d4c:	f7fe fc84 	bl	8100658 <__aeabi_f2d>
 8101d50:	4604      	mov	r4, r0
 8101d52:	460d      	mov	r5, r1
 8101d54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8101d56:	f7fe fc7f 	bl	8100658 <__aeabi_f2d>
 8101d5a:	4680      	mov	r8, r0
 8101d5c:	4689      	mov	r9, r1
 8101d5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8101d60:	f7fe fc7a 	bl	8100658 <__aeabi_f2d>
 8101d64:	4682      	mov	sl, r0
 8101d66:	468b      	mov	fp, r1
 8101d68:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8101d6a:	f7fe fc75 	bl	8100658 <__aeabi_f2d>
 8101d6e:	e9c7 0100 	strd	r0, r1, [r7]
 8101d72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8101d74:	f7fe fc70 	bl	8100658 <__aeabi_f2d>
 8101d78:	4602      	mov	r2, r0
 8101d7a:	460b      	mov	r3, r1
 8101d7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8101d80:	ed97 7b00 	vldr	d7, [r7]
 8101d84:	ed8d 7b06 	vstr	d7, [sp, #24]
 8101d88:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8101d8c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8101d90:	e9cd 4500 	strd	r4, r5, [sp]
 8101d94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101d98:	480c      	ldr	r0, [pc, #48]	; (8101dcc <main+0x294>)
 8101d9a:	f008 f9bb 	bl	810a114 <iprintf>
	  if(flag_Tc == 1){
 8101d9e:	e73c      	b.n	8101c1a <main+0xe2>
 8101da0:	58024400 	.word	0x58024400
 8101da4:	e000ed00 	.word	0xe000ed00
 8101da8:	58026400 	.word	0x58026400
 8101dac:	10000270 	.word	0x10000270
 8101db0:	100002bc 	.word	0x100002bc
 8101db4:	1000021c 	.word	0x1000021c
 8101db8:	10000014 	.word	0x10000014
 8101dbc:	00000000 	.word	0x00000000
 8101dc0:	1000039c 	.word	0x1000039c
 8101dc4:	100003b4 	.word	0x100003b4
 8101dc8:	0810e054 	.word	0x0810e054
 8101dcc:	0810e080 	.word	0x0810e080

08101dd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8101dd0:	b580      	push	{r7, lr}
 8101dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101dd4:	4b1b      	ldr	r3, [pc, #108]	; (8101e44 <MX_I2C1_Init+0x74>)
 8101dd6:	4a1c      	ldr	r2, [pc, #112]	; (8101e48 <MX_I2C1_Init+0x78>)
 8101dd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8101dda:	4b1a      	ldr	r3, [pc, #104]	; (8101e44 <MX_I2C1_Init+0x74>)
 8101ddc:	4a1b      	ldr	r2, [pc, #108]	; (8101e4c <MX_I2C1_Init+0x7c>)
 8101dde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101de0:	4b18      	ldr	r3, [pc, #96]	; (8101e44 <MX_I2C1_Init+0x74>)
 8101de2:	2200      	movs	r2, #0
 8101de4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101de6:	4b17      	ldr	r3, [pc, #92]	; (8101e44 <MX_I2C1_Init+0x74>)
 8101de8:	2201      	movs	r2, #1
 8101dea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101dec:	4b15      	ldr	r3, [pc, #84]	; (8101e44 <MX_I2C1_Init+0x74>)
 8101dee:	2200      	movs	r2, #0
 8101df0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101df2:	4b14      	ldr	r3, [pc, #80]	; (8101e44 <MX_I2C1_Init+0x74>)
 8101df4:	2200      	movs	r2, #0
 8101df6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101df8:	4b12      	ldr	r3, [pc, #72]	; (8101e44 <MX_I2C1_Init+0x74>)
 8101dfa:	2200      	movs	r2, #0
 8101dfc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101dfe:	4b11      	ldr	r3, [pc, #68]	; (8101e44 <MX_I2C1_Init+0x74>)
 8101e00:	2200      	movs	r2, #0
 8101e02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101e04:	4b0f      	ldr	r3, [pc, #60]	; (8101e44 <MX_I2C1_Init+0x74>)
 8101e06:	2200      	movs	r2, #0
 8101e08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101e0a:	480e      	ldr	r0, [pc, #56]	; (8101e44 <MX_I2C1_Init+0x74>)
 8101e0c:	f001 f91e 	bl	810304c <HAL_I2C_Init>
 8101e10:	4603      	mov	r3, r0
 8101e12:	2b00      	cmp	r3, #0
 8101e14:	d001      	beq.n	8101e1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101e16:	f000 fa79 	bl	810230c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101e1a:	2100      	movs	r1, #0
 8101e1c:	4809      	ldr	r0, [pc, #36]	; (8101e44 <MX_I2C1_Init+0x74>)
 8101e1e:	f001 ff41 	bl	8103ca4 <HAL_I2CEx_ConfigAnalogFilter>
 8101e22:	4603      	mov	r3, r0
 8101e24:	2b00      	cmp	r3, #0
 8101e26:	d001      	beq.n	8101e2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101e28:	f000 fa70 	bl	810230c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101e2c:	2100      	movs	r1, #0
 8101e2e:	4805      	ldr	r0, [pc, #20]	; (8101e44 <MX_I2C1_Init+0x74>)
 8101e30:	f001 ff83 	bl	8103d3a <HAL_I2CEx_ConfigDigitalFilter>
 8101e34:	4603      	mov	r3, r0
 8101e36:	2b00      	cmp	r3, #0
 8101e38:	d001      	beq.n	8101e3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101e3a:	f000 fa67 	bl	810230c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101e3e:	bf00      	nop
 8101e40:	bd80      	pop	{r7, pc}
 8101e42:	bf00      	nop
 8101e44:	1000021c 	.word	0x1000021c
 8101e48:	40005400 	.word	0x40005400
 8101e4c:	00707cbb 	.word	0x00707cbb

08101e50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8101e50:	b580      	push	{r7, lr}
 8101e52:	b09a      	sub	sp, #104	; 0x68
 8101e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101e56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8101e5a:	2200      	movs	r2, #0
 8101e5c:	601a      	str	r2, [r3, #0]
 8101e5e:	605a      	str	r2, [r3, #4]
 8101e60:	609a      	str	r2, [r3, #8]
 8101e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101e64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101e68:	2200      	movs	r2, #0
 8101e6a:	601a      	str	r2, [r3, #0]
 8101e6c:	605a      	str	r2, [r3, #4]
 8101e6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101e70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101e74:	2200      	movs	r2, #0
 8101e76:	601a      	str	r2, [r3, #0]
 8101e78:	605a      	str	r2, [r3, #4]
 8101e7a:	609a      	str	r2, [r3, #8]
 8101e7c:	60da      	str	r2, [r3, #12]
 8101e7e:	611a      	str	r2, [r3, #16]
 8101e80:	615a      	str	r2, [r3, #20]
 8101e82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8101e84:	1d3b      	adds	r3, r7, #4
 8101e86:	222c      	movs	r2, #44	; 0x2c
 8101e88:	2100      	movs	r1, #0
 8101e8a:	4618      	mov	r0, r3
 8101e8c:	f007 fac0 	bl	8109410 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8101e90:	4b4f      	ldr	r3, [pc, #316]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101e92:	4a50      	ldr	r2, [pc, #320]	; (8101fd4 <MX_TIM1_Init+0x184>)
 8101e94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8101e96:	4b4e      	ldr	r3, [pc, #312]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101e98:	22ef      	movs	r2, #239	; 0xef
 8101e9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101e9c:	4b4c      	ldr	r3, [pc, #304]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101e9e:	2200      	movs	r2, #0
 8101ea0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8101ea2:	4b4b      	ldr	r3, [pc, #300]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101ea4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101ea8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101eaa:	4b49      	ldr	r3, [pc, #292]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101eac:	2200      	movs	r2, #0
 8101eae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101eb0:	4b47      	ldr	r3, [pc, #284]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101eb2:	2200      	movs	r2, #0
 8101eb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101eb6:	4b46      	ldr	r3, [pc, #280]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101eb8:	2200      	movs	r2, #0
 8101eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8101ebc:	4844      	ldr	r0, [pc, #272]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101ebe:	f004 fe25 	bl	8106b0c <HAL_TIM_Base_Init>
 8101ec2:	4603      	mov	r3, r0
 8101ec4:	2b00      	cmp	r3, #0
 8101ec6:	d001      	beq.n	8101ecc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8101ec8:	f000 fa20 	bl	810230c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101ed0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8101ed2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8101ed6:	4619      	mov	r1, r3
 8101ed8:	483d      	ldr	r0, [pc, #244]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101eda:	f005 fa83 	bl	81073e4 <HAL_TIM_ConfigClockSource>
 8101ede:	4603      	mov	r3, r0
 8101ee0:	2b00      	cmp	r3, #0
 8101ee2:	d001      	beq.n	8101ee8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8101ee4:	f000 fa12 	bl	810230c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8101ee8:	4839      	ldr	r0, [pc, #228]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101eea:	f004 fed7 	bl	8106c9c <HAL_TIM_PWM_Init>
 8101eee:	4603      	mov	r3, r0
 8101ef0:	2b00      	cmp	r3, #0
 8101ef2:	d001      	beq.n	8101ef8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8101ef4:	f000 fa0a 	bl	810230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101ef8:	2300      	movs	r3, #0
 8101efa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8101efc:	2300      	movs	r3, #0
 8101efe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101f00:	2300      	movs	r3, #0
 8101f02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8101f04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101f08:	4619      	mov	r1, r3
 8101f0a:	4831      	ldr	r0, [pc, #196]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101f0c:	f005 ffbc 	bl	8107e88 <HAL_TIMEx_MasterConfigSynchronization>
 8101f10:	4603      	mov	r3, r0
 8101f12:	2b00      	cmp	r3, #0
 8101f14:	d001      	beq.n	8101f1a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8101f16:	f000 f9f9 	bl	810230c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101f1a:	2360      	movs	r3, #96	; 0x60
 8101f1c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8101f1e:	2300      	movs	r3, #0
 8101f20:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101f22:	2300      	movs	r3, #0
 8101f24:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8101f26:	2300      	movs	r3, #0
 8101f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101f2a:	2300      	movs	r3, #0
 8101f2c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8101f2e:	2300      	movs	r3, #0
 8101f30:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8101f32:	2300      	movs	r3, #0
 8101f34:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101f36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101f3a:	2200      	movs	r2, #0
 8101f3c:	4619      	mov	r1, r3
 8101f3e:	4824      	ldr	r0, [pc, #144]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101f40:	f005 f93c 	bl	81071bc <HAL_TIM_PWM_ConfigChannel>
 8101f44:	4603      	mov	r3, r0
 8101f46:	2b00      	cmp	r3, #0
 8101f48:	d001      	beq.n	8101f4e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8101f4a:	f000 f9df 	bl	810230c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8101f4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101f52:	2204      	movs	r2, #4
 8101f54:	4619      	mov	r1, r3
 8101f56:	481e      	ldr	r0, [pc, #120]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101f58:	f005 f930 	bl	81071bc <HAL_TIM_PWM_ConfigChannel>
 8101f5c:	4603      	mov	r3, r0
 8101f5e:	2b00      	cmp	r3, #0
 8101f60:	d001      	beq.n	8101f66 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8101f62:	f000 f9d3 	bl	810230c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8101f66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101f6a:	2208      	movs	r2, #8
 8101f6c:	4619      	mov	r1, r3
 8101f6e:	4818      	ldr	r0, [pc, #96]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101f70:	f005 f924 	bl	81071bc <HAL_TIM_PWM_ConfigChannel>
 8101f74:	4603      	mov	r3, r0
 8101f76:	2b00      	cmp	r3, #0
 8101f78:	d001      	beq.n	8101f7e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8101f7a:	f000 f9c7 	bl	810230c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8101f7e:	2300      	movs	r3, #0
 8101f80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101f82:	2300      	movs	r3, #0
 8101f84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8101f86:	2300      	movs	r3, #0
 8101f88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8101f8a:	2300      	movs	r3, #0
 8101f8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8101f8e:	2300      	movs	r3, #0
 8101f90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101f96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8101f98:	2300      	movs	r3, #0
 8101f9a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8101f9c:	2300      	movs	r3, #0
 8101f9e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101fa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101fa4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8101fa6:	2300      	movs	r3, #0
 8101fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8101faa:	2300      	movs	r3, #0
 8101fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8101fae:	1d3b      	adds	r3, r7, #4
 8101fb0:	4619      	mov	r1, r3
 8101fb2:	4807      	ldr	r0, [pc, #28]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101fb4:	f005 fff6 	bl	8107fa4 <HAL_TIMEx_ConfigBreakDeadTime>
 8101fb8:	4603      	mov	r3, r0
 8101fba:	2b00      	cmp	r3, #0
 8101fbc:	d001      	beq.n	8101fc2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8101fbe:	f000 f9a5 	bl	810230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8101fc2:	4803      	ldr	r0, [pc, #12]	; (8101fd0 <MX_TIM1_Init+0x180>)
 8101fc4:	f000 fa68 	bl	8102498 <HAL_TIM_MspPostInit>

}
 8101fc8:	bf00      	nop
 8101fca:	3768      	adds	r7, #104	; 0x68
 8101fcc:	46bd      	mov	sp, r7
 8101fce:	bd80      	pop	{r7, pc}
 8101fd0:	10000270 	.word	0x10000270
 8101fd4:	40010000 	.word	0x40010000

08101fd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8101fd8:	b580      	push	{r7, lr}
 8101fda:	b088      	sub	sp, #32
 8101fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101fde:	f107 0310 	add.w	r3, r7, #16
 8101fe2:	2200      	movs	r2, #0
 8101fe4:	601a      	str	r2, [r3, #0]
 8101fe6:	605a      	str	r2, [r3, #4]
 8101fe8:	609a      	str	r2, [r3, #8]
 8101fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101fec:	1d3b      	adds	r3, r7, #4
 8101fee:	2200      	movs	r2, #0
 8101ff0:	601a      	str	r2, [r3, #0]
 8101ff2:	605a      	str	r2, [r3, #4]
 8101ff4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8101ff6:	4b1e      	ldr	r3, [pc, #120]	; (8102070 <MX_TIM2_Init+0x98>)
 8101ff8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101ffc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8101ffe:	4b1c      	ldr	r3, [pc, #112]	; (8102070 <MX_TIM2_Init+0x98>)
 8102000:	22ef      	movs	r2, #239	; 0xef
 8102002:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102004:	4b1a      	ldr	r3, [pc, #104]	; (8102070 <MX_TIM2_Init+0x98>)
 8102006:	2200      	movs	r2, #0
 8102008:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 810200a:	4b19      	ldr	r3, [pc, #100]	; (8102070 <MX_TIM2_Init+0x98>)
 810200c:	f242 720f 	movw	r2, #9999	; 0x270f
 8102010:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102012:	4b17      	ldr	r3, [pc, #92]	; (8102070 <MX_TIM2_Init+0x98>)
 8102014:	2200      	movs	r2, #0
 8102016:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102018:	4b15      	ldr	r3, [pc, #84]	; (8102070 <MX_TIM2_Init+0x98>)
 810201a:	2200      	movs	r2, #0
 810201c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 810201e:	4814      	ldr	r0, [pc, #80]	; (8102070 <MX_TIM2_Init+0x98>)
 8102020:	f004 fd74 	bl	8106b0c <HAL_TIM_Base_Init>
 8102024:	4603      	mov	r3, r0
 8102026:	2b00      	cmp	r3, #0
 8102028:	d001      	beq.n	810202e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 810202a:	f000 f96f 	bl	810230c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810202e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102032:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8102034:	f107 0310 	add.w	r3, r7, #16
 8102038:	4619      	mov	r1, r3
 810203a:	480d      	ldr	r0, [pc, #52]	; (8102070 <MX_TIM2_Init+0x98>)
 810203c:	f005 f9d2 	bl	81073e4 <HAL_TIM_ConfigClockSource>
 8102040:	4603      	mov	r3, r0
 8102042:	2b00      	cmp	r3, #0
 8102044:	d001      	beq.n	810204a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8102046:	f000 f961 	bl	810230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810204a:	2300      	movs	r3, #0
 810204c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810204e:	2300      	movs	r3, #0
 8102050:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8102052:	1d3b      	adds	r3, r7, #4
 8102054:	4619      	mov	r1, r3
 8102056:	4806      	ldr	r0, [pc, #24]	; (8102070 <MX_TIM2_Init+0x98>)
 8102058:	f005 ff16 	bl	8107e88 <HAL_TIMEx_MasterConfigSynchronization>
 810205c:	4603      	mov	r3, r0
 810205e:	2b00      	cmp	r3, #0
 8102060:	d001      	beq.n	8102066 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8102062:	f000 f953 	bl	810230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8102066:	bf00      	nop
 8102068:	3720      	adds	r7, #32
 810206a:	46bd      	mov	sp, r7
 810206c:	bd80      	pop	{r7, pc}
 810206e:	bf00      	nop
 8102070:	100002bc 	.word	0x100002bc

08102074 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8102074:	b580      	push	{r7, lr}
 8102076:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102078:	4b22      	ldr	r3, [pc, #136]	; (8102104 <MX_USART3_UART_Init+0x90>)
 810207a:	4a23      	ldr	r2, [pc, #140]	; (8102108 <MX_USART3_UART_Init+0x94>)
 810207c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810207e:	4b21      	ldr	r3, [pc, #132]	; (8102104 <MX_USART3_UART_Init+0x90>)
 8102080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8102084:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102086:	4b1f      	ldr	r3, [pc, #124]	; (8102104 <MX_USART3_UART_Init+0x90>)
 8102088:	2200      	movs	r2, #0
 810208a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810208c:	4b1d      	ldr	r3, [pc, #116]	; (8102104 <MX_USART3_UART_Init+0x90>)
 810208e:	2200      	movs	r2, #0
 8102090:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102092:	4b1c      	ldr	r3, [pc, #112]	; (8102104 <MX_USART3_UART_Init+0x90>)
 8102094:	2200      	movs	r2, #0
 8102096:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102098:	4b1a      	ldr	r3, [pc, #104]	; (8102104 <MX_USART3_UART_Init+0x90>)
 810209a:	220c      	movs	r2, #12
 810209c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810209e:	4b19      	ldr	r3, [pc, #100]	; (8102104 <MX_USART3_UART_Init+0x90>)
 81020a0:	2200      	movs	r2, #0
 81020a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81020a4:	4b17      	ldr	r3, [pc, #92]	; (8102104 <MX_USART3_UART_Init+0x90>)
 81020a6:	2200      	movs	r2, #0
 81020a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81020aa:	4b16      	ldr	r3, [pc, #88]	; (8102104 <MX_USART3_UART_Init+0x90>)
 81020ac:	2200      	movs	r2, #0
 81020ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81020b0:	4b14      	ldr	r3, [pc, #80]	; (8102104 <MX_USART3_UART_Init+0x90>)
 81020b2:	2200      	movs	r2, #0
 81020b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81020b6:	4b13      	ldr	r3, [pc, #76]	; (8102104 <MX_USART3_UART_Init+0x90>)
 81020b8:	2200      	movs	r2, #0
 81020ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81020bc:	4811      	ldr	r0, [pc, #68]	; (8102104 <MX_USART3_UART_Init+0x90>)
 81020be:	f006 f80d 	bl	81080dc <HAL_UART_Init>
 81020c2:	4603      	mov	r3, r0
 81020c4:	2b00      	cmp	r3, #0
 81020c6:	d001      	beq.n	81020cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81020c8:	f000 f920 	bl	810230c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81020cc:	2100      	movs	r1, #0
 81020ce:	480d      	ldr	r0, [pc, #52]	; (8102104 <MX_USART3_UART_Init+0x90>)
 81020d0:	f007 f89c 	bl	810920c <HAL_UARTEx_SetTxFifoThreshold>
 81020d4:	4603      	mov	r3, r0
 81020d6:	2b00      	cmp	r3, #0
 81020d8:	d001      	beq.n	81020de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81020da:	f000 f917 	bl	810230c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81020de:	2100      	movs	r1, #0
 81020e0:	4808      	ldr	r0, [pc, #32]	; (8102104 <MX_USART3_UART_Init+0x90>)
 81020e2:	f007 f8d1 	bl	8109288 <HAL_UARTEx_SetRxFifoThreshold>
 81020e6:	4603      	mov	r3, r0
 81020e8:	2b00      	cmp	r3, #0
 81020ea:	d001      	beq.n	81020f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81020ec:	f000 f90e 	bl	810230c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81020f0:	4804      	ldr	r0, [pc, #16]	; (8102104 <MX_USART3_UART_Init+0x90>)
 81020f2:	f007 f852 	bl	810919a <HAL_UARTEx_DisableFifoMode>
 81020f6:	4603      	mov	r3, r0
 81020f8:	2b00      	cmp	r3, #0
 81020fa:	d001      	beq.n	8102100 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81020fc:	f000 f906 	bl	810230c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102100:	bf00      	nop
 8102102:	bd80      	pop	{r7, pc}
 8102104:	10000308 	.word	0x10000308
 8102108:	40004800 	.word	0x40004800

0810210c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810210c:	b580      	push	{r7, lr}
 810210e:	b08a      	sub	sp, #40	; 0x28
 8102110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102112:	f107 0314 	add.w	r3, r7, #20
 8102116:	2200      	movs	r2, #0
 8102118:	601a      	str	r2, [r3, #0]
 810211a:	605a      	str	r2, [r3, #4]
 810211c:	609a      	str	r2, [r3, #8]
 810211e:	60da      	str	r2, [r3, #12]
 8102120:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8102122:	4b42      	ldr	r3, [pc, #264]	; (810222c <MX_GPIO_Init+0x120>)
 8102124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102128:	4a40      	ldr	r2, [pc, #256]	; (810222c <MX_GPIO_Init+0x120>)
 810212a:	f043 0304 	orr.w	r3, r3, #4
 810212e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102132:	4b3e      	ldr	r3, [pc, #248]	; (810222c <MX_GPIO_Init+0x120>)
 8102134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102138:	f003 0304 	and.w	r3, r3, #4
 810213c:	613b      	str	r3, [r7, #16]
 810213e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8102140:	4b3a      	ldr	r3, [pc, #232]	; (810222c <MX_GPIO_Init+0x120>)
 8102142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102146:	4a39      	ldr	r2, [pc, #228]	; (810222c <MX_GPIO_Init+0x120>)
 8102148:	f043 0301 	orr.w	r3, r3, #1
 810214c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102150:	4b36      	ldr	r3, [pc, #216]	; (810222c <MX_GPIO_Init+0x120>)
 8102152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102156:	f003 0301 	and.w	r3, r3, #1
 810215a:	60fb      	str	r3, [r7, #12]
 810215c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810215e:	4b33      	ldr	r3, [pc, #204]	; (810222c <MX_GPIO_Init+0x120>)
 8102160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102164:	4a31      	ldr	r2, [pc, #196]	; (810222c <MX_GPIO_Init+0x120>)
 8102166:	f043 0310 	orr.w	r3, r3, #16
 810216a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810216e:	4b2f      	ldr	r3, [pc, #188]	; (810222c <MX_GPIO_Init+0x120>)
 8102170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102174:	f003 0310 	and.w	r3, r3, #16
 8102178:	60bb      	str	r3, [r7, #8]
 810217a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810217c:	4b2b      	ldr	r3, [pc, #172]	; (810222c <MX_GPIO_Init+0x120>)
 810217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102182:	4a2a      	ldr	r2, [pc, #168]	; (810222c <MX_GPIO_Init+0x120>)
 8102184:	f043 0308 	orr.w	r3, r3, #8
 8102188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810218c:	4b27      	ldr	r3, [pc, #156]	; (810222c <MX_GPIO_Init+0x120>)
 810218e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102192:	f003 0308 	and.w	r3, r3, #8
 8102196:	607b      	str	r3, [r7, #4]
 8102198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810219a:	4b24      	ldr	r3, [pc, #144]	; (810222c <MX_GPIO_Init+0x120>)
 810219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021a0:	4a22      	ldr	r2, [pc, #136]	; (810222c <MX_GPIO_Init+0x120>)
 81021a2:	f043 0302 	orr.w	r3, r3, #2
 81021a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81021aa:	4b20      	ldr	r3, [pc, #128]	; (810222c <MX_GPIO_Init+0x120>)
 81021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021b0:	f003 0302 	and.w	r3, r3, #2
 81021b4:	603b      	str	r3, [r7, #0]
 81021b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81021b8:	2200      	movs	r2, #0
 81021ba:	2110      	movs	r1, #16
 81021bc:	481c      	ldr	r0, [pc, #112]	; (8102230 <MX_GPIO_Init+0x124>)
 81021be:	f000 fef5 	bl	8102fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 81021c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81021c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81021c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 81021cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021ce:	2300      	movs	r3, #0
 81021d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81021d2:	f107 0314 	add.w	r3, r7, #20
 81021d6:	4619      	mov	r1, r3
 81021d8:	4816      	ldr	r0, [pc, #88]	; (8102234 <MX_GPIO_Init+0x128>)
 81021da:	f000 fd37 	bl	8102c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 81021de:	2308      	movs	r3, #8
 81021e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81021e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 81021e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021e8:	2300      	movs	r3, #0
 81021ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81021ec:	f107 0314 	add.w	r3, r7, #20
 81021f0:	4619      	mov	r1, r3
 81021f2:	480f      	ldr	r0, [pc, #60]	; (8102230 <MX_GPIO_Init+0x124>)
 81021f4:	f000 fd2a 	bl	8102c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 81021f8:	2310      	movs	r3, #16
 81021fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81021fc:	2301      	movs	r3, #1
 81021fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102200:	2300      	movs	r3, #0
 8102202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102204:	2300      	movs	r3, #0
 8102206:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102208:	f107 0314 	add.w	r3, r7, #20
 810220c:	4619      	mov	r1, r3
 810220e:	4808      	ldr	r0, [pc, #32]	; (8102230 <MX_GPIO_Init+0x124>)
 8102210:	f000 fd1c 	bl	8102c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8102214:	2200      	movs	r2, #0
 8102216:	2100      	movs	r1, #0
 8102218:	2009      	movs	r0, #9
 810221a:	f000 fcce 	bl	8102bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 810221e:	2009      	movs	r0, #9
 8102220:	f000 fce5 	bl	8102bee <HAL_NVIC_EnableIRQ>

}
 8102224:	bf00      	nop
 8102226:	3728      	adds	r7, #40	; 0x28
 8102228:	46bd      	mov	sp, r7
 810222a:	bd80      	pop	{r7, pc}
 810222c:	58024400 	.word	0x58024400
 8102230:	58020000 	.word	0x58020000
 8102234:	58020800 	.word	0x58020800

08102238 <SystemClock_Config>:
void SystemClock_Config(void)
{
 8102238:	b580      	push	{r7, lr}
 810223a:	b09c      	sub	sp, #112	; 0x70
 810223c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 810223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8102242:	224c      	movs	r2, #76	; 0x4c
 8102244:	2100      	movs	r1, #0
 8102246:	4618      	mov	r0, r3
 8102248:	f007 f8e2 	bl	8109410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 810224c:	1d3b      	adds	r3, r7, #4
 810224e:	2220      	movs	r2, #32
 8102250:	2100      	movs	r1, #0
 8102252:	4618      	mov	r0, r3
 8102254:	f007 f8dc 	bl	8109410 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8102258:	2302      	movs	r3, #2
 810225a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 810225c:	2301      	movs	r3, #1
 810225e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8102260:	2340      	movs	r3, #64	; 0x40
 8102262:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8102264:	2300      	movs	r3, #0
 8102266:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8102268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810226c:	4618      	mov	r0, r3
 810226e:	f001 fe39 	bl	8103ee4 <HAL_RCC_OscConfig>
 8102272:	4603      	mov	r3, r0
 8102274:	2b00      	cmp	r3, #0
 8102276:	d001      	beq.n	810227c <SystemClock_Config+0x44>
  {
    Error_Handler();
 8102278:	f000 f848 	bl	810230c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 810227c:	231b      	movs	r3, #27
 810227e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8102280:	2300      	movs	r3, #0
 8102282:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8102284:	2300      	movs	r3, #0
 8102286:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8102288:	2300      	movs	r3, #0
 810228a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 810228c:	2300      	movs	r3, #0
 810228e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8102290:	1d3b      	adds	r3, r7, #4
 8102292:	2100      	movs	r1, #0
 8102294:	4618      	mov	r0, r3
 8102296:	f002 fa7f 	bl	8104798 <HAL_RCC_ClockConfig>
 810229a:	4603      	mov	r3, r0
 810229c:	2b00      	cmp	r3, #0
 810229e:	d001      	beq.n	81022a4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 81022a0:	f000 f834 	bl	810230c <Error_Handler>
  }
}
 81022a4:	bf00      	nop
 81022a6:	3770      	adds	r7, #112	; 0x70
 81022a8:	46bd      	mov	sp, r7
 81022aa:	bd80      	pop	{r7, pc}

081022ac <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar (int ch)
{
 81022ac:	b580      	push	{r7, lr}
 81022ae:	b084      	sub	sp, #16
 81022b0:	af00      	add	r7, sp, #0
 81022b2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 81022b4:	1d39      	adds	r1, r7, #4
 81022b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81022ba:	2201      	movs	r2, #1
 81022bc:	4804      	ldr	r0, [pc, #16]	; (81022d0 <__io_putchar+0x24>)
 81022be:	f005 ff5d 	bl	810817c <HAL_UART_Transmit>
 81022c2:	4603      	mov	r3, r0
 81022c4:	73fb      	strb	r3, [r7, #15]
	return ch;
 81022c6:	687b      	ldr	r3, [r7, #4]
}
 81022c8:	4618      	mov	r0, r3
 81022ca:	3710      	adds	r7, #16
 81022cc:	46bd      	mov	sp, r7
 81022ce:	bd80      	pop	{r7, pc}
 81022d0:	10000308 	.word	0x10000308

081022d4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 81022d4:	b480      	push	{r7}
 81022d6:	b083      	sub	sp, #12
 81022d8:	af00      	add	r7, sp, #0
 81022da:	6078      	str	r0, [r7, #4]
	if(htim==&htim2){
 81022dc:	687b      	ldr	r3, [r7, #4]
 81022de:	4a08      	ldr	r2, [pc, #32]	; (8102300 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 81022e0:	4293      	cmp	r3, r2
 81022e2:	d107      	bne.n	81022f4 <HAL_TIM_PeriodElapsedCallback+0x20>
		flag_Tc=1;
 81022e4:	4b07      	ldr	r3, [pc, #28]	; (8102304 <HAL_TIM_PeriodElapsedCallback+0x30>)
 81022e6:	2201      	movs	r2, #1
 81022e8:	601a      	str	r2, [r3, #0]
		n_ref++;
 81022ea:	4b07      	ldr	r3, [pc, #28]	; (8102308 <HAL_TIM_PeriodElapsedCallback+0x34>)
 81022ec:	681b      	ldr	r3, [r3, #0]
 81022ee:	3301      	adds	r3, #1
 81022f0:	4a05      	ldr	r2, [pc, #20]	; (8102308 <HAL_TIM_PeriodElapsedCallback+0x34>)
 81022f2:	6013      	str	r3, [r2, #0]
	}
}
 81022f4:	bf00      	nop
 81022f6:	370c      	adds	r7, #12
 81022f8:	46bd      	mov	sp, r7
 81022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022fe:	4770      	bx	lr
 8102300:	100002bc 	.word	0x100002bc
 8102304:	100003b4 	.word	0x100003b4
 8102308:	100003b8 	.word	0x100003b8

0810230c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810230c:	b480      	push	{r7}
 810230e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102310:	b672      	cpsid	i
}
 8102312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102314:	e7fe      	b.n	8102314 <Error_Handler+0x8>
	...

08102318 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102318:	b480      	push	{r7}
 810231a:	b083      	sub	sp, #12
 810231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810231e:	4b0a      	ldr	r3, [pc, #40]	; (8102348 <HAL_MspInit+0x30>)
 8102320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102324:	4a08      	ldr	r2, [pc, #32]	; (8102348 <HAL_MspInit+0x30>)
 8102326:	f043 0302 	orr.w	r3, r3, #2
 810232a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810232e:	4b06      	ldr	r3, [pc, #24]	; (8102348 <HAL_MspInit+0x30>)
 8102330:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102334:	f003 0302 	and.w	r3, r3, #2
 8102338:	607b      	str	r3, [r7, #4]
 810233a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810233c:	bf00      	nop
 810233e:	370c      	adds	r7, #12
 8102340:	46bd      	mov	sp, r7
 8102342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102346:	4770      	bx	lr
 8102348:	58024400 	.word	0x58024400

0810234c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 810234c:	b580      	push	{r7, lr}
 810234e:	b0ba      	sub	sp, #232	; 0xe8
 8102350:	af00      	add	r7, sp, #0
 8102352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102354:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102358:	2200      	movs	r2, #0
 810235a:	601a      	str	r2, [r3, #0]
 810235c:	605a      	str	r2, [r3, #4]
 810235e:	609a      	str	r2, [r3, #8]
 8102360:	60da      	str	r2, [r3, #12]
 8102362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102364:	f107 0310 	add.w	r3, r7, #16
 8102368:	22c0      	movs	r2, #192	; 0xc0
 810236a:	2100      	movs	r1, #0
 810236c:	4618      	mov	r0, r3
 810236e:	f007 f84f 	bl	8109410 <memset>
  if(hi2c->Instance==I2C1)
 8102372:	687b      	ldr	r3, [r7, #4]
 8102374:	681b      	ldr	r3, [r3, #0]
 8102376:	4a26      	ldr	r2, [pc, #152]	; (8102410 <HAL_I2C_MspInit+0xc4>)
 8102378:	4293      	cmp	r3, r2
 810237a:	d145      	bne.n	8102408 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 810237c:	f04f 0208 	mov.w	r2, #8
 8102380:	f04f 0300 	mov.w	r3, #0
 8102384:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102388:	2300      	movs	r3, #0
 810238a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810238e:	f107 0310 	add.w	r3, r7, #16
 8102392:	4618      	mov	r0, r3
 8102394:	f002 fd8e 	bl	8104eb4 <HAL_RCCEx_PeriphCLKConfig>
 8102398:	4603      	mov	r3, r0
 810239a:	2b00      	cmp	r3, #0
 810239c:	d001      	beq.n	81023a2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 810239e:	f7ff ffb5 	bl	810230c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81023a2:	4b1c      	ldr	r3, [pc, #112]	; (8102414 <HAL_I2C_MspInit+0xc8>)
 81023a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81023a8:	4a1a      	ldr	r2, [pc, #104]	; (8102414 <HAL_I2C_MspInit+0xc8>)
 81023aa:	f043 0302 	orr.w	r3, r3, #2
 81023ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81023b2:	4b18      	ldr	r3, [pc, #96]	; (8102414 <HAL_I2C_MspInit+0xc8>)
 81023b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81023b8:	f003 0302 	and.w	r3, r3, #2
 81023bc:	60fb      	str	r3, [r7, #12]
 81023be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 81023c0:	23c0      	movs	r3, #192	; 0xc0
 81023c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81023c6:	2312      	movs	r3, #18
 81023c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023cc:	2300      	movs	r3, #0
 81023ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81023d2:	2300      	movs	r3, #0
 81023d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81023d8:	2304      	movs	r3, #4
 81023da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81023de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81023e2:	4619      	mov	r1, r3
 81023e4:	480c      	ldr	r0, [pc, #48]	; (8102418 <HAL_I2C_MspInit+0xcc>)
 81023e6:	f000 fc31 	bl	8102c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81023ea:	4b0a      	ldr	r3, [pc, #40]	; (8102414 <HAL_I2C_MspInit+0xc8>)
 81023ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81023f0:	4a08      	ldr	r2, [pc, #32]	; (8102414 <HAL_I2C_MspInit+0xc8>)
 81023f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81023f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81023fa:	4b06      	ldr	r3, [pc, #24]	; (8102414 <HAL_I2C_MspInit+0xc8>)
 81023fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102404:	60bb      	str	r3, [r7, #8]
 8102406:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8102408:	bf00      	nop
 810240a:	37e8      	adds	r7, #232	; 0xe8
 810240c:	46bd      	mov	sp, r7
 810240e:	bd80      	pop	{r7, pc}
 8102410:	40005400 	.word	0x40005400
 8102414:	58024400 	.word	0x58024400
 8102418:	58020400 	.word	0x58020400

0810241c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 810241c:	b580      	push	{r7, lr}
 810241e:	b084      	sub	sp, #16
 8102420:	af00      	add	r7, sp, #0
 8102422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8102424:	687b      	ldr	r3, [r7, #4]
 8102426:	681b      	ldr	r3, [r3, #0]
 8102428:	4a19      	ldr	r2, [pc, #100]	; (8102490 <HAL_TIM_Base_MspInit+0x74>)
 810242a:	4293      	cmp	r3, r2
 810242c:	d10f      	bne.n	810244e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 810242e:	4b19      	ldr	r3, [pc, #100]	; (8102494 <HAL_TIM_Base_MspInit+0x78>)
 8102430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102434:	4a17      	ldr	r2, [pc, #92]	; (8102494 <HAL_TIM_Base_MspInit+0x78>)
 8102436:	f043 0301 	orr.w	r3, r3, #1
 810243a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810243e:	4b15      	ldr	r3, [pc, #84]	; (8102494 <HAL_TIM_Base_MspInit+0x78>)
 8102440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102444:	f003 0301 	and.w	r3, r3, #1
 8102448:	60fb      	str	r3, [r7, #12]
 810244a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 810244c:	e01b      	b.n	8102486 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM2)
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	681b      	ldr	r3, [r3, #0]
 8102452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102456:	d116      	bne.n	8102486 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8102458:	4b0e      	ldr	r3, [pc, #56]	; (8102494 <HAL_TIM_Base_MspInit+0x78>)
 810245a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810245e:	4a0d      	ldr	r2, [pc, #52]	; (8102494 <HAL_TIM_Base_MspInit+0x78>)
 8102460:	f043 0301 	orr.w	r3, r3, #1
 8102464:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102468:	4b0a      	ldr	r3, [pc, #40]	; (8102494 <HAL_TIM_Base_MspInit+0x78>)
 810246a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810246e:	f003 0301 	and.w	r3, r3, #1
 8102472:	60bb      	str	r3, [r7, #8]
 8102474:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8102476:	2200      	movs	r2, #0
 8102478:	2100      	movs	r1, #0
 810247a:	201c      	movs	r0, #28
 810247c:	f000 fb9d 	bl	8102bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8102480:	201c      	movs	r0, #28
 8102482:	f000 fbb4 	bl	8102bee <HAL_NVIC_EnableIRQ>
}
 8102486:	bf00      	nop
 8102488:	3710      	adds	r7, #16
 810248a:	46bd      	mov	sp, r7
 810248c:	bd80      	pop	{r7, pc}
 810248e:	bf00      	nop
 8102490:	40010000 	.word	0x40010000
 8102494:	58024400 	.word	0x58024400

08102498 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102498:	b580      	push	{r7, lr}
 810249a:	b088      	sub	sp, #32
 810249c:	af00      	add	r7, sp, #0
 810249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81024a0:	f107 030c 	add.w	r3, r7, #12
 81024a4:	2200      	movs	r2, #0
 81024a6:	601a      	str	r2, [r3, #0]
 81024a8:	605a      	str	r2, [r3, #4]
 81024aa:	609a      	str	r2, [r3, #8]
 81024ac:	60da      	str	r2, [r3, #12]
 81024ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 81024b0:	687b      	ldr	r3, [r7, #4]
 81024b2:	681b      	ldr	r3, [r3, #0]
 81024b4:	4a13      	ldr	r2, [pc, #76]	; (8102504 <HAL_TIM_MspPostInit+0x6c>)
 81024b6:	4293      	cmp	r3, r2
 81024b8:	d11f      	bne.n	81024fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 81024ba:	4b13      	ldr	r3, [pc, #76]	; (8102508 <HAL_TIM_MspPostInit+0x70>)
 81024bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024c0:	4a11      	ldr	r2, [pc, #68]	; (8102508 <HAL_TIM_MspPostInit+0x70>)
 81024c2:	f043 0310 	orr.w	r3, r3, #16
 81024c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81024ca:	4b0f      	ldr	r3, [pc, #60]	; (8102508 <HAL_TIM_MspPostInit+0x70>)
 81024cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024d0:	f003 0310 	and.w	r3, r3, #16
 81024d4:	60bb      	str	r3, [r7, #8]
 81024d6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 81024d8:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 81024dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81024de:	2302      	movs	r3, #2
 81024e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81024e2:	2300      	movs	r3, #0
 81024e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81024e6:	2300      	movs	r3, #0
 81024e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 81024ea:	2301      	movs	r3, #1
 81024ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81024ee:	f107 030c 	add.w	r3, r7, #12
 81024f2:	4619      	mov	r1, r3
 81024f4:	4805      	ldr	r0, [pc, #20]	; (810250c <HAL_TIM_MspPostInit+0x74>)
 81024f6:	f000 fba9 	bl	8102c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 81024fa:	bf00      	nop
 81024fc:	3720      	adds	r7, #32
 81024fe:	46bd      	mov	sp, r7
 8102500:	bd80      	pop	{r7, pc}
 8102502:	bf00      	nop
 8102504:	40010000 	.word	0x40010000
 8102508:	58024400 	.word	0x58024400
 810250c:	58021000 	.word	0x58021000

08102510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102510:	b580      	push	{r7, lr}
 8102512:	b0ba      	sub	sp, #232	; 0xe8
 8102514:	af00      	add	r7, sp, #0
 8102516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102518:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810251c:	2200      	movs	r2, #0
 810251e:	601a      	str	r2, [r3, #0]
 8102520:	605a      	str	r2, [r3, #4]
 8102522:	609a      	str	r2, [r3, #8]
 8102524:	60da      	str	r2, [r3, #12]
 8102526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102528:	f107 0310 	add.w	r3, r7, #16
 810252c:	22c0      	movs	r2, #192	; 0xc0
 810252e:	2100      	movs	r1, #0
 8102530:	4618      	mov	r0, r3
 8102532:	f006 ff6d 	bl	8109410 <memset>
  if(huart->Instance==USART3)
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	681b      	ldr	r3, [r3, #0]
 810253a:	4a27      	ldr	r2, [pc, #156]	; (81025d8 <HAL_UART_MspInit+0xc8>)
 810253c:	4293      	cmp	r3, r2
 810253e:	d146      	bne.n	81025ce <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102540:	f04f 0202 	mov.w	r2, #2
 8102544:	f04f 0300 	mov.w	r3, #0
 8102548:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 810254c:	2300      	movs	r3, #0
 810254e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102552:	f107 0310 	add.w	r3, r7, #16
 8102556:	4618      	mov	r0, r3
 8102558:	f002 fcac 	bl	8104eb4 <HAL_RCCEx_PeriphCLKConfig>
 810255c:	4603      	mov	r3, r0
 810255e:	2b00      	cmp	r3, #0
 8102560:	d001      	beq.n	8102566 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8102562:	f7ff fed3 	bl	810230c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102566:	4b1d      	ldr	r3, [pc, #116]	; (81025dc <HAL_UART_MspInit+0xcc>)
 8102568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810256c:	4a1b      	ldr	r2, [pc, #108]	; (81025dc <HAL_UART_MspInit+0xcc>)
 810256e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102572:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102576:	4b19      	ldr	r3, [pc, #100]	; (81025dc <HAL_UART_MspInit+0xcc>)
 8102578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810257c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102580:	60fb      	str	r3, [r7, #12]
 8102582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102584:	4b15      	ldr	r3, [pc, #84]	; (81025dc <HAL_UART_MspInit+0xcc>)
 8102586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810258a:	4a14      	ldr	r2, [pc, #80]	; (81025dc <HAL_UART_MspInit+0xcc>)
 810258c:	f043 0308 	orr.w	r3, r3, #8
 8102590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102594:	4b11      	ldr	r3, [pc, #68]	; (81025dc <HAL_UART_MspInit+0xcc>)
 8102596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810259a:	f003 0308 	and.w	r3, r3, #8
 810259e:	60bb      	str	r3, [r7, #8]
 81025a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 81025a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 81025a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81025aa:	2302      	movs	r3, #2
 81025ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025b0:	2300      	movs	r3, #0
 81025b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81025b6:	2300      	movs	r3, #0
 81025b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81025bc:	2307      	movs	r3, #7
 81025be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81025c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81025c6:	4619      	mov	r1, r3
 81025c8:	4805      	ldr	r0, [pc, #20]	; (81025e0 <HAL_UART_MspInit+0xd0>)
 81025ca:	f000 fb3f 	bl	8102c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81025ce:	bf00      	nop
 81025d0:	37e8      	adds	r7, #232	; 0xe8
 81025d2:	46bd      	mov	sp, r7
 81025d4:	bd80      	pop	{r7, pc}
 81025d6:	bf00      	nop
 81025d8:	40004800 	.word	0x40004800
 81025dc:	58024400 	.word	0x58024400
 81025e0:	58020c00 	.word	0x58020c00

081025e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81025e4:	b480      	push	{r7}
 81025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81025e8:	e7fe      	b.n	81025e8 <NMI_Handler+0x4>

081025ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81025ea:	b480      	push	{r7}
 81025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81025ee:	e7fe      	b.n	81025ee <HardFault_Handler+0x4>

081025f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81025f0:	b480      	push	{r7}
 81025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81025f4:	e7fe      	b.n	81025f4 <MemManage_Handler+0x4>

081025f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81025f6:	b480      	push	{r7}
 81025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81025fa:	e7fe      	b.n	81025fa <BusFault_Handler+0x4>

081025fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81025fc:	b480      	push	{r7}
 81025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102600:	e7fe      	b.n	8102600 <UsageFault_Handler+0x4>

08102602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102602:	b480      	push	{r7}
 8102604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102606:	bf00      	nop
 8102608:	46bd      	mov	sp, r7
 810260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810260e:	4770      	bx	lr

08102610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102610:	b480      	push	{r7}
 8102612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102614:	bf00      	nop
 8102616:	46bd      	mov	sp, r7
 8102618:	f85d 7b04 	ldr.w	r7, [sp], #4
 810261c:	4770      	bx	lr

0810261e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810261e:	b480      	push	{r7}
 8102620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102622:	bf00      	nop
 8102624:	46bd      	mov	sp, r7
 8102626:	f85d 7b04 	ldr.w	r7, [sp], #4
 810262a:	4770      	bx	lr

0810262c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810262c:	b580      	push	{r7, lr}
 810262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102630:	f000 f998 	bl	8102964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102634:	bf00      	nop
 8102636:	bd80      	pop	{r7, pc}

08102638 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8102638:	b580      	push	{r7, lr}
 810263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 810263c:	2008      	movs	r0, #8
 810263e:	f000 fcce 	bl	8102fde <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8102642:	bf00      	nop
 8102644:	bd80      	pop	{r7, pc}
	...

08102648 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8102648:	b580      	push	{r7, lr}
 810264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 810264c:	4802      	ldr	r0, [pc, #8]	; (8102658 <TIM2_IRQHandler+0x10>)
 810264e:	f004 fc95 	bl	8106f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8102652:	bf00      	nop
 8102654:	bd80      	pop	{r7, pc}
 8102656:	bf00      	nop
 8102658:	100002bc 	.word	0x100002bc

0810265c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 810265c:	b480      	push	{r7}
 810265e:	af00      	add	r7, sp, #0
  return 1;
 8102660:	2301      	movs	r3, #1
}
 8102662:	4618      	mov	r0, r3
 8102664:	46bd      	mov	sp, r7
 8102666:	f85d 7b04 	ldr.w	r7, [sp], #4
 810266a:	4770      	bx	lr

0810266c <_kill>:

int _kill(int pid, int sig)
{
 810266c:	b580      	push	{r7, lr}
 810266e:	b082      	sub	sp, #8
 8102670:	af00      	add	r7, sp, #0
 8102672:	6078      	str	r0, [r7, #4]
 8102674:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8102676:	f006 fe93 	bl	81093a0 <__errno>
 810267a:	4603      	mov	r3, r0
 810267c:	2216      	movs	r2, #22
 810267e:	601a      	str	r2, [r3, #0]
  return -1;
 8102680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8102684:	4618      	mov	r0, r3
 8102686:	3708      	adds	r7, #8
 8102688:	46bd      	mov	sp, r7
 810268a:	bd80      	pop	{r7, pc}

0810268c <_exit>:

void _exit (int status)
{
 810268c:	b580      	push	{r7, lr}
 810268e:	b082      	sub	sp, #8
 8102690:	af00      	add	r7, sp, #0
 8102692:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8102694:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8102698:	6878      	ldr	r0, [r7, #4]
 810269a:	f7ff ffe7 	bl	810266c <_kill>
  while (1) {}    /* Make sure we hang here */
 810269e:	e7fe      	b.n	810269e <_exit+0x12>

081026a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81026a0:	b580      	push	{r7, lr}
 81026a2:	b086      	sub	sp, #24
 81026a4:	af00      	add	r7, sp, #0
 81026a6:	60f8      	str	r0, [r7, #12]
 81026a8:	60b9      	str	r1, [r7, #8]
 81026aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81026ac:	2300      	movs	r3, #0
 81026ae:	617b      	str	r3, [r7, #20]
 81026b0:	e00a      	b.n	81026c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 81026b2:	f3af 8000 	nop.w
 81026b6:	4601      	mov	r1, r0
 81026b8:	68bb      	ldr	r3, [r7, #8]
 81026ba:	1c5a      	adds	r2, r3, #1
 81026bc:	60ba      	str	r2, [r7, #8]
 81026be:	b2ca      	uxtb	r2, r1
 81026c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81026c2:	697b      	ldr	r3, [r7, #20]
 81026c4:	3301      	adds	r3, #1
 81026c6:	617b      	str	r3, [r7, #20]
 81026c8:	697a      	ldr	r2, [r7, #20]
 81026ca:	687b      	ldr	r3, [r7, #4]
 81026cc:	429a      	cmp	r2, r3
 81026ce:	dbf0      	blt.n	81026b2 <_read+0x12>
  }

  return len;
 81026d0:	687b      	ldr	r3, [r7, #4]
}
 81026d2:	4618      	mov	r0, r3
 81026d4:	3718      	adds	r7, #24
 81026d6:	46bd      	mov	sp, r7
 81026d8:	bd80      	pop	{r7, pc}

081026da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81026da:	b580      	push	{r7, lr}
 81026dc:	b086      	sub	sp, #24
 81026de:	af00      	add	r7, sp, #0
 81026e0:	60f8      	str	r0, [r7, #12]
 81026e2:	60b9      	str	r1, [r7, #8]
 81026e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81026e6:	2300      	movs	r3, #0
 81026e8:	617b      	str	r3, [r7, #20]
 81026ea:	e009      	b.n	8102700 <_write+0x26>
  {
    __io_putchar(*ptr++);
 81026ec:	68bb      	ldr	r3, [r7, #8]
 81026ee:	1c5a      	adds	r2, r3, #1
 81026f0:	60ba      	str	r2, [r7, #8]
 81026f2:	781b      	ldrb	r3, [r3, #0]
 81026f4:	4618      	mov	r0, r3
 81026f6:	f7ff fdd9 	bl	81022ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81026fa:	697b      	ldr	r3, [r7, #20]
 81026fc:	3301      	adds	r3, #1
 81026fe:	617b      	str	r3, [r7, #20]
 8102700:	697a      	ldr	r2, [r7, #20]
 8102702:	687b      	ldr	r3, [r7, #4]
 8102704:	429a      	cmp	r2, r3
 8102706:	dbf1      	blt.n	81026ec <_write+0x12>
  }
  return len;
 8102708:	687b      	ldr	r3, [r7, #4]
}
 810270a:	4618      	mov	r0, r3
 810270c:	3718      	adds	r7, #24
 810270e:	46bd      	mov	sp, r7
 8102710:	bd80      	pop	{r7, pc}

08102712 <_close>:

int _close(int file)
{
 8102712:	b480      	push	{r7}
 8102714:	b083      	sub	sp, #12
 8102716:	af00      	add	r7, sp, #0
 8102718:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 810271a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 810271e:	4618      	mov	r0, r3
 8102720:	370c      	adds	r7, #12
 8102722:	46bd      	mov	sp, r7
 8102724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102728:	4770      	bx	lr

0810272a <_fstat>:


int _fstat(int file, struct stat *st)
{
 810272a:	b480      	push	{r7}
 810272c:	b083      	sub	sp, #12
 810272e:	af00      	add	r7, sp, #0
 8102730:	6078      	str	r0, [r7, #4]
 8102732:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8102734:	683b      	ldr	r3, [r7, #0]
 8102736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810273a:	605a      	str	r2, [r3, #4]
  return 0;
 810273c:	2300      	movs	r3, #0
}
 810273e:	4618      	mov	r0, r3
 8102740:	370c      	adds	r7, #12
 8102742:	46bd      	mov	sp, r7
 8102744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102748:	4770      	bx	lr

0810274a <_isatty>:

int _isatty(int file)
{
 810274a:	b480      	push	{r7}
 810274c:	b083      	sub	sp, #12
 810274e:	af00      	add	r7, sp, #0
 8102750:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8102752:	2301      	movs	r3, #1
}
 8102754:	4618      	mov	r0, r3
 8102756:	370c      	adds	r7, #12
 8102758:	46bd      	mov	sp, r7
 810275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810275e:	4770      	bx	lr

08102760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102760:	b480      	push	{r7}
 8102762:	b085      	sub	sp, #20
 8102764:	af00      	add	r7, sp, #0
 8102766:	60f8      	str	r0, [r7, #12]
 8102768:	60b9      	str	r1, [r7, #8]
 810276a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 810276c:	2300      	movs	r3, #0
}
 810276e:	4618      	mov	r0, r3
 8102770:	3714      	adds	r7, #20
 8102772:	46bd      	mov	sp, r7
 8102774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102778:	4770      	bx	lr
	...

0810277c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 810277c:	b580      	push	{r7, lr}
 810277e:	b086      	sub	sp, #24
 8102780:	af00      	add	r7, sp, #0
 8102782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102784:	4a14      	ldr	r2, [pc, #80]	; (81027d8 <_sbrk+0x5c>)
 8102786:	4b15      	ldr	r3, [pc, #84]	; (81027dc <_sbrk+0x60>)
 8102788:	1ad3      	subs	r3, r2, r3
 810278a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 810278c:	697b      	ldr	r3, [r7, #20]
 810278e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102790:	4b13      	ldr	r3, [pc, #76]	; (81027e0 <_sbrk+0x64>)
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	2b00      	cmp	r3, #0
 8102796:	d102      	bne.n	810279e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102798:	4b11      	ldr	r3, [pc, #68]	; (81027e0 <_sbrk+0x64>)
 810279a:	4a12      	ldr	r2, [pc, #72]	; (81027e4 <_sbrk+0x68>)
 810279c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810279e:	4b10      	ldr	r3, [pc, #64]	; (81027e0 <_sbrk+0x64>)
 81027a0:	681a      	ldr	r2, [r3, #0]
 81027a2:	687b      	ldr	r3, [r7, #4]
 81027a4:	4413      	add	r3, r2
 81027a6:	693a      	ldr	r2, [r7, #16]
 81027a8:	429a      	cmp	r2, r3
 81027aa:	d207      	bcs.n	81027bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 81027ac:	f006 fdf8 	bl	81093a0 <__errno>
 81027b0:	4603      	mov	r3, r0
 81027b2:	220c      	movs	r2, #12
 81027b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81027b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81027ba:	e009      	b.n	81027d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81027bc:	4b08      	ldr	r3, [pc, #32]	; (81027e0 <_sbrk+0x64>)
 81027be:	681b      	ldr	r3, [r3, #0]
 81027c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81027c2:	4b07      	ldr	r3, [pc, #28]	; (81027e0 <_sbrk+0x64>)
 81027c4:	681a      	ldr	r2, [r3, #0]
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	4413      	add	r3, r2
 81027ca:	4a05      	ldr	r2, [pc, #20]	; (81027e0 <_sbrk+0x64>)
 81027cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81027ce:	68fb      	ldr	r3, [r7, #12]
}
 81027d0:	4618      	mov	r0, r3
 81027d2:	3718      	adds	r7, #24
 81027d4:	46bd      	mov	sp, r7
 81027d6:	bd80      	pop	{r7, pc}
 81027d8:	10048000 	.word	0x10048000
 81027dc:	00000400 	.word	0x00000400
 81027e0:	100003bc 	.word	0x100003bc
 81027e4:	100003d8 	.word	0x100003d8

081027e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81027e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102820 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81027ec:	f7fe fc8c 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81027f0:	480c      	ldr	r0, [pc, #48]	; (8102824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81027f2:	490d      	ldr	r1, [pc, #52]	; (8102828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81027f4:	4a0d      	ldr	r2, [pc, #52]	; (810282c <LoopFillZerobss+0x1a>)
  movs r3, #0
 81027f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81027f8:	e002      	b.n	8102800 <LoopCopyDataInit>

081027fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81027fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81027fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81027fe:	3304      	adds	r3, #4

08102800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102804:	d3f9      	bcc.n	81027fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102806:	4a0a      	ldr	r2, [pc, #40]	; (8102830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102808:	4c0a      	ldr	r4, [pc, #40]	; (8102834 <LoopFillZerobss+0x22>)
  movs r3, #0
 810280a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810280c:	e001      	b.n	8102812 <LoopFillZerobss>

0810280e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810280e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102810:	3204      	adds	r2, #4

08102812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102814:	d3fb      	bcc.n	810280e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102816:	f006 fdc9 	bl	81093ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810281a:	f7ff f98d 	bl	8101b38 <main>
  bx  lr
 810281e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102820:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102824:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102828:	100001f4 	.word	0x100001f4
  ldr r2, =_sidata
 810282c:	0810e58c 	.word	0x0810e58c
  ldr r2, =_sbss
 8102830:	100001f4 	.word	0x100001f4
  ldr r4, =_ebss
 8102834:	100003d4 	.word	0x100003d4

08102838 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102838:	e7fe      	b.n	8102838 <ADC3_IRQHandler>
	...

0810283c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810283c:	b580      	push	{r7, lr}
 810283e:	b082      	sub	sp, #8
 8102840:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102842:	4b28      	ldr	r3, [pc, #160]	; (81028e4 <HAL_Init+0xa8>)
 8102844:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102848:	4a26      	ldr	r2, [pc, #152]	; (81028e4 <HAL_Init+0xa8>)
 810284a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810284e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102852:	4b24      	ldr	r3, [pc, #144]	; (81028e4 <HAL_Init+0xa8>)
 8102854:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810285c:	603b      	str	r3, [r7, #0]
 810285e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102860:	4b21      	ldr	r3, [pc, #132]	; (81028e8 <HAL_Init+0xac>)
 8102862:	681b      	ldr	r3, [r3, #0]
 8102864:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102868:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810286c:	4a1e      	ldr	r2, [pc, #120]	; (81028e8 <HAL_Init+0xac>)
 810286e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102872:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102874:	4b1c      	ldr	r3, [pc, #112]	; (81028e8 <HAL_Init+0xac>)
 8102876:	681b      	ldr	r3, [r3, #0]
 8102878:	4a1b      	ldr	r2, [pc, #108]	; (81028e8 <HAL_Init+0xac>)
 810287a:	f043 0301 	orr.w	r3, r3, #1
 810287e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102880:	2003      	movs	r0, #3
 8102882:	f000 f98f 	bl	8102ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102886:	f002 f93d 	bl	8104b04 <HAL_RCC_GetSysClockFreq>
 810288a:	4602      	mov	r2, r0
 810288c:	4b15      	ldr	r3, [pc, #84]	; (81028e4 <HAL_Init+0xa8>)
 810288e:	699b      	ldr	r3, [r3, #24]
 8102890:	0a1b      	lsrs	r3, r3, #8
 8102892:	f003 030f 	and.w	r3, r3, #15
 8102896:	4915      	ldr	r1, [pc, #84]	; (81028ec <HAL_Init+0xb0>)
 8102898:	5ccb      	ldrb	r3, [r1, r3]
 810289a:	f003 031f 	and.w	r3, r3, #31
 810289e:	fa22 f303 	lsr.w	r3, r2, r3
 81028a2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81028a4:	4b0f      	ldr	r3, [pc, #60]	; (81028e4 <HAL_Init+0xa8>)
 81028a6:	699b      	ldr	r3, [r3, #24]
 81028a8:	f003 030f 	and.w	r3, r3, #15
 81028ac:	4a0f      	ldr	r2, [pc, #60]	; (81028ec <HAL_Init+0xb0>)
 81028ae:	5cd3      	ldrb	r3, [r2, r3]
 81028b0:	f003 031f 	and.w	r3, r3, #31
 81028b4:	687a      	ldr	r2, [r7, #4]
 81028b6:	fa22 f303 	lsr.w	r3, r2, r3
 81028ba:	4a0d      	ldr	r2, [pc, #52]	; (81028f0 <HAL_Init+0xb4>)
 81028bc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81028be:	4b0c      	ldr	r3, [pc, #48]	; (81028f0 <HAL_Init+0xb4>)
 81028c0:	681b      	ldr	r3, [r3, #0]
 81028c2:	4a0c      	ldr	r2, [pc, #48]	; (81028f4 <HAL_Init+0xb8>)
 81028c4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81028c6:	2000      	movs	r0, #0
 81028c8:	f000 f816 	bl	81028f8 <HAL_InitTick>
 81028cc:	4603      	mov	r3, r0
 81028ce:	2b00      	cmp	r3, #0
 81028d0:	d001      	beq.n	81028d6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81028d2:	2301      	movs	r3, #1
 81028d4:	e002      	b.n	81028dc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81028d6:	f7ff fd1f 	bl	8102318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81028da:	2300      	movs	r3, #0
}
 81028dc:	4618      	mov	r0, r3
 81028de:	3708      	adds	r7, #8
 81028e0:	46bd      	mov	sp, r7
 81028e2:	bd80      	pop	{r7, pc}
 81028e4:	58024400 	.word	0x58024400
 81028e8:	40024400 	.word	0x40024400
 81028ec:	0810e094 	.word	0x0810e094
 81028f0:	10000004 	.word	0x10000004
 81028f4:	10000000 	.word	0x10000000

081028f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81028f8:	b580      	push	{r7, lr}
 81028fa:	b082      	sub	sp, #8
 81028fc:	af00      	add	r7, sp, #0
 81028fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102900:	4b15      	ldr	r3, [pc, #84]	; (8102958 <HAL_InitTick+0x60>)
 8102902:	781b      	ldrb	r3, [r3, #0]
 8102904:	2b00      	cmp	r3, #0
 8102906:	d101      	bne.n	810290c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102908:	2301      	movs	r3, #1
 810290a:	e021      	b.n	8102950 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810290c:	4b13      	ldr	r3, [pc, #76]	; (810295c <HAL_InitTick+0x64>)
 810290e:	681a      	ldr	r2, [r3, #0]
 8102910:	4b11      	ldr	r3, [pc, #68]	; (8102958 <HAL_InitTick+0x60>)
 8102912:	781b      	ldrb	r3, [r3, #0]
 8102914:	4619      	mov	r1, r3
 8102916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810291a:	fbb3 f3f1 	udiv	r3, r3, r1
 810291e:	fbb2 f3f3 	udiv	r3, r2, r3
 8102922:	4618      	mov	r0, r3
 8102924:	f000 f971 	bl	8102c0a <HAL_SYSTICK_Config>
 8102928:	4603      	mov	r3, r0
 810292a:	2b00      	cmp	r3, #0
 810292c:	d001      	beq.n	8102932 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810292e:	2301      	movs	r3, #1
 8102930:	e00e      	b.n	8102950 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102932:	687b      	ldr	r3, [r7, #4]
 8102934:	2b0f      	cmp	r3, #15
 8102936:	d80a      	bhi.n	810294e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102938:	2200      	movs	r2, #0
 810293a:	6879      	ldr	r1, [r7, #4]
 810293c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8102940:	f000 f93b 	bl	8102bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102944:	4a06      	ldr	r2, [pc, #24]	; (8102960 <HAL_InitTick+0x68>)
 8102946:	687b      	ldr	r3, [r7, #4]
 8102948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810294a:	2300      	movs	r3, #0
 810294c:	e000      	b.n	8102950 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810294e:	2301      	movs	r3, #1
}
 8102950:	4618      	mov	r0, r3
 8102952:	3708      	adds	r7, #8
 8102954:	46bd      	mov	sp, r7
 8102956:	bd80      	pop	{r7, pc}
 8102958:	1000001c 	.word	0x1000001c
 810295c:	10000000 	.word	0x10000000
 8102960:	10000018 	.word	0x10000018

08102964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102964:	b480      	push	{r7}
 8102966:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102968:	4b06      	ldr	r3, [pc, #24]	; (8102984 <HAL_IncTick+0x20>)
 810296a:	781b      	ldrb	r3, [r3, #0]
 810296c:	461a      	mov	r2, r3
 810296e:	4b06      	ldr	r3, [pc, #24]	; (8102988 <HAL_IncTick+0x24>)
 8102970:	681b      	ldr	r3, [r3, #0]
 8102972:	4413      	add	r3, r2
 8102974:	4a04      	ldr	r2, [pc, #16]	; (8102988 <HAL_IncTick+0x24>)
 8102976:	6013      	str	r3, [r2, #0]
}
 8102978:	bf00      	nop
 810297a:	46bd      	mov	sp, r7
 810297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102980:	4770      	bx	lr
 8102982:	bf00      	nop
 8102984:	1000001c 	.word	0x1000001c
 8102988:	100003c0 	.word	0x100003c0

0810298c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810298c:	b480      	push	{r7}
 810298e:	af00      	add	r7, sp, #0
  return uwTick;
 8102990:	4b03      	ldr	r3, [pc, #12]	; (81029a0 <HAL_GetTick+0x14>)
 8102992:	681b      	ldr	r3, [r3, #0]
}
 8102994:	4618      	mov	r0, r3
 8102996:	46bd      	mov	sp, r7
 8102998:	f85d 7b04 	ldr.w	r7, [sp], #4
 810299c:	4770      	bx	lr
 810299e:	bf00      	nop
 81029a0:	100003c0 	.word	0x100003c0

081029a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81029a4:	b580      	push	{r7, lr}
 81029a6:	b084      	sub	sp, #16
 81029a8:	af00      	add	r7, sp, #0
 81029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81029ac:	f7ff ffee 	bl	810298c <HAL_GetTick>
 81029b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81029b2:	687b      	ldr	r3, [r7, #4]
 81029b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81029b6:	68fb      	ldr	r3, [r7, #12]
 81029b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81029bc:	d005      	beq.n	81029ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81029be:	4b0a      	ldr	r3, [pc, #40]	; (81029e8 <HAL_Delay+0x44>)
 81029c0:	781b      	ldrb	r3, [r3, #0]
 81029c2:	461a      	mov	r2, r3
 81029c4:	68fb      	ldr	r3, [r7, #12]
 81029c6:	4413      	add	r3, r2
 81029c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81029ca:	bf00      	nop
 81029cc:	f7ff ffde 	bl	810298c <HAL_GetTick>
 81029d0:	4602      	mov	r2, r0
 81029d2:	68bb      	ldr	r3, [r7, #8]
 81029d4:	1ad3      	subs	r3, r2, r3
 81029d6:	68fa      	ldr	r2, [r7, #12]
 81029d8:	429a      	cmp	r2, r3
 81029da:	d8f7      	bhi.n	81029cc <HAL_Delay+0x28>
  {
  }
}
 81029dc:	bf00      	nop
 81029de:	bf00      	nop
 81029e0:	3710      	adds	r7, #16
 81029e2:	46bd      	mov	sp, r7
 81029e4:	bd80      	pop	{r7, pc}
 81029e6:	bf00      	nop
 81029e8:	1000001c 	.word	0x1000001c

081029ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81029ec:	b480      	push	{r7}
 81029ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81029f0:	4b03      	ldr	r3, [pc, #12]	; (8102a00 <HAL_GetREVID+0x14>)
 81029f2:	681b      	ldr	r3, [r3, #0]
 81029f4:	0c1b      	lsrs	r3, r3, #16
}
 81029f6:	4618      	mov	r0, r3
 81029f8:	46bd      	mov	sp, r7
 81029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029fe:	4770      	bx	lr
 8102a00:	5c001000 	.word	0x5c001000

08102a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102a04:	b480      	push	{r7}
 8102a06:	b085      	sub	sp, #20
 8102a08:	af00      	add	r7, sp, #0
 8102a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	f003 0307 	and.w	r3, r3, #7
 8102a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102a14:	4b0c      	ldr	r3, [pc, #48]	; (8102a48 <__NVIC_SetPriorityGrouping+0x44>)
 8102a16:	68db      	ldr	r3, [r3, #12]
 8102a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102a1a:	68ba      	ldr	r2, [r7, #8]
 8102a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102a20:	4013      	ands	r3, r2
 8102a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102a24:	68fb      	ldr	r3, [r7, #12]
 8102a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102a28:	68bb      	ldr	r3, [r7, #8]
 8102a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102a36:	4a04      	ldr	r2, [pc, #16]	; (8102a48 <__NVIC_SetPriorityGrouping+0x44>)
 8102a38:	68bb      	ldr	r3, [r7, #8]
 8102a3a:	60d3      	str	r3, [r2, #12]
}
 8102a3c:	bf00      	nop
 8102a3e:	3714      	adds	r7, #20
 8102a40:	46bd      	mov	sp, r7
 8102a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a46:	4770      	bx	lr
 8102a48:	e000ed00 	.word	0xe000ed00

08102a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102a4c:	b480      	push	{r7}
 8102a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102a50:	4b04      	ldr	r3, [pc, #16]	; (8102a64 <__NVIC_GetPriorityGrouping+0x18>)
 8102a52:	68db      	ldr	r3, [r3, #12]
 8102a54:	0a1b      	lsrs	r3, r3, #8
 8102a56:	f003 0307 	and.w	r3, r3, #7
}
 8102a5a:	4618      	mov	r0, r3
 8102a5c:	46bd      	mov	sp, r7
 8102a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a62:	4770      	bx	lr
 8102a64:	e000ed00 	.word	0xe000ed00

08102a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102a68:	b480      	push	{r7}
 8102a6a:	b083      	sub	sp, #12
 8102a6c:	af00      	add	r7, sp, #0
 8102a6e:	4603      	mov	r3, r0
 8102a70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102a76:	2b00      	cmp	r3, #0
 8102a78:	db0b      	blt.n	8102a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102a7a:	88fb      	ldrh	r3, [r7, #6]
 8102a7c:	f003 021f 	and.w	r2, r3, #31
 8102a80:	4907      	ldr	r1, [pc, #28]	; (8102aa0 <__NVIC_EnableIRQ+0x38>)
 8102a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102a86:	095b      	lsrs	r3, r3, #5
 8102a88:	2001      	movs	r0, #1
 8102a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8102a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102a92:	bf00      	nop
 8102a94:	370c      	adds	r7, #12
 8102a96:	46bd      	mov	sp, r7
 8102a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a9c:	4770      	bx	lr
 8102a9e:	bf00      	nop
 8102aa0:	e000e100 	.word	0xe000e100

08102aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102aa4:	b480      	push	{r7}
 8102aa6:	b083      	sub	sp, #12
 8102aa8:	af00      	add	r7, sp, #0
 8102aaa:	4603      	mov	r3, r0
 8102aac:	6039      	str	r1, [r7, #0]
 8102aae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102ab4:	2b00      	cmp	r3, #0
 8102ab6:	db0a      	blt.n	8102ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102ab8:	683b      	ldr	r3, [r7, #0]
 8102aba:	b2da      	uxtb	r2, r3
 8102abc:	490c      	ldr	r1, [pc, #48]	; (8102af0 <__NVIC_SetPriority+0x4c>)
 8102abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102ac2:	0112      	lsls	r2, r2, #4
 8102ac4:	b2d2      	uxtb	r2, r2
 8102ac6:	440b      	add	r3, r1
 8102ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102acc:	e00a      	b.n	8102ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102ace:	683b      	ldr	r3, [r7, #0]
 8102ad0:	b2da      	uxtb	r2, r3
 8102ad2:	4908      	ldr	r1, [pc, #32]	; (8102af4 <__NVIC_SetPriority+0x50>)
 8102ad4:	88fb      	ldrh	r3, [r7, #6]
 8102ad6:	f003 030f 	and.w	r3, r3, #15
 8102ada:	3b04      	subs	r3, #4
 8102adc:	0112      	lsls	r2, r2, #4
 8102ade:	b2d2      	uxtb	r2, r2
 8102ae0:	440b      	add	r3, r1
 8102ae2:	761a      	strb	r2, [r3, #24]
}
 8102ae4:	bf00      	nop
 8102ae6:	370c      	adds	r7, #12
 8102ae8:	46bd      	mov	sp, r7
 8102aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aee:	4770      	bx	lr
 8102af0:	e000e100 	.word	0xe000e100
 8102af4:	e000ed00 	.word	0xe000ed00

08102af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102af8:	b480      	push	{r7}
 8102afa:	b089      	sub	sp, #36	; 0x24
 8102afc:	af00      	add	r7, sp, #0
 8102afe:	60f8      	str	r0, [r7, #12]
 8102b00:	60b9      	str	r1, [r7, #8]
 8102b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102b04:	68fb      	ldr	r3, [r7, #12]
 8102b06:	f003 0307 	and.w	r3, r3, #7
 8102b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102b0c:	69fb      	ldr	r3, [r7, #28]
 8102b0e:	f1c3 0307 	rsb	r3, r3, #7
 8102b12:	2b04      	cmp	r3, #4
 8102b14:	bf28      	it	cs
 8102b16:	2304      	movcs	r3, #4
 8102b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102b1a:	69fb      	ldr	r3, [r7, #28]
 8102b1c:	3304      	adds	r3, #4
 8102b1e:	2b06      	cmp	r3, #6
 8102b20:	d902      	bls.n	8102b28 <NVIC_EncodePriority+0x30>
 8102b22:	69fb      	ldr	r3, [r7, #28]
 8102b24:	3b03      	subs	r3, #3
 8102b26:	e000      	b.n	8102b2a <NVIC_EncodePriority+0x32>
 8102b28:	2300      	movs	r3, #0
 8102b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8102b30:	69bb      	ldr	r3, [r7, #24]
 8102b32:	fa02 f303 	lsl.w	r3, r2, r3
 8102b36:	43da      	mvns	r2, r3
 8102b38:	68bb      	ldr	r3, [r7, #8]
 8102b3a:	401a      	ands	r2, r3
 8102b3c:	697b      	ldr	r3, [r7, #20]
 8102b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102b40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8102b44:	697b      	ldr	r3, [r7, #20]
 8102b46:	fa01 f303 	lsl.w	r3, r1, r3
 8102b4a:	43d9      	mvns	r1, r3
 8102b4c:	687b      	ldr	r3, [r7, #4]
 8102b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102b50:	4313      	orrs	r3, r2
         );
}
 8102b52:	4618      	mov	r0, r3
 8102b54:	3724      	adds	r7, #36	; 0x24
 8102b56:	46bd      	mov	sp, r7
 8102b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b5c:	4770      	bx	lr
	...

08102b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102b60:	b580      	push	{r7, lr}
 8102b62:	b082      	sub	sp, #8
 8102b64:	af00      	add	r7, sp, #0
 8102b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102b68:	687b      	ldr	r3, [r7, #4]
 8102b6a:	3b01      	subs	r3, #1
 8102b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102b70:	d301      	bcc.n	8102b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8102b72:	2301      	movs	r3, #1
 8102b74:	e00f      	b.n	8102b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102b76:	4a0a      	ldr	r2, [pc, #40]	; (8102ba0 <SysTick_Config+0x40>)
 8102b78:	687b      	ldr	r3, [r7, #4]
 8102b7a:	3b01      	subs	r3, #1
 8102b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8102b7e:	210f      	movs	r1, #15
 8102b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8102b84:	f7ff ff8e 	bl	8102aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102b88:	4b05      	ldr	r3, [pc, #20]	; (8102ba0 <SysTick_Config+0x40>)
 8102b8a:	2200      	movs	r2, #0
 8102b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102b8e:	4b04      	ldr	r3, [pc, #16]	; (8102ba0 <SysTick_Config+0x40>)
 8102b90:	2207      	movs	r2, #7
 8102b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102b94:	2300      	movs	r3, #0
}
 8102b96:	4618      	mov	r0, r3
 8102b98:	3708      	adds	r7, #8
 8102b9a:	46bd      	mov	sp, r7
 8102b9c:	bd80      	pop	{r7, pc}
 8102b9e:	bf00      	nop
 8102ba0:	e000e010 	.word	0xe000e010

08102ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102ba4:	b580      	push	{r7, lr}
 8102ba6:	b082      	sub	sp, #8
 8102ba8:	af00      	add	r7, sp, #0
 8102baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102bac:	6878      	ldr	r0, [r7, #4]
 8102bae:	f7ff ff29 	bl	8102a04 <__NVIC_SetPriorityGrouping>
}
 8102bb2:	bf00      	nop
 8102bb4:	3708      	adds	r7, #8
 8102bb6:	46bd      	mov	sp, r7
 8102bb8:	bd80      	pop	{r7, pc}

08102bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102bba:	b580      	push	{r7, lr}
 8102bbc:	b086      	sub	sp, #24
 8102bbe:	af00      	add	r7, sp, #0
 8102bc0:	4603      	mov	r3, r0
 8102bc2:	60b9      	str	r1, [r7, #8]
 8102bc4:	607a      	str	r2, [r7, #4]
 8102bc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102bc8:	f7ff ff40 	bl	8102a4c <__NVIC_GetPriorityGrouping>
 8102bcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102bce:	687a      	ldr	r2, [r7, #4]
 8102bd0:	68b9      	ldr	r1, [r7, #8]
 8102bd2:	6978      	ldr	r0, [r7, #20]
 8102bd4:	f7ff ff90 	bl	8102af8 <NVIC_EncodePriority>
 8102bd8:	4602      	mov	r2, r0
 8102bda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102bde:	4611      	mov	r1, r2
 8102be0:	4618      	mov	r0, r3
 8102be2:	f7ff ff5f 	bl	8102aa4 <__NVIC_SetPriority>
}
 8102be6:	bf00      	nop
 8102be8:	3718      	adds	r7, #24
 8102bea:	46bd      	mov	sp, r7
 8102bec:	bd80      	pop	{r7, pc}

08102bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102bee:	b580      	push	{r7, lr}
 8102bf0:	b082      	sub	sp, #8
 8102bf2:	af00      	add	r7, sp, #0
 8102bf4:	4603      	mov	r3, r0
 8102bf6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102bfc:	4618      	mov	r0, r3
 8102bfe:	f7ff ff33 	bl	8102a68 <__NVIC_EnableIRQ>
}
 8102c02:	bf00      	nop
 8102c04:	3708      	adds	r7, #8
 8102c06:	46bd      	mov	sp, r7
 8102c08:	bd80      	pop	{r7, pc}

08102c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102c0a:	b580      	push	{r7, lr}
 8102c0c:	b082      	sub	sp, #8
 8102c0e:	af00      	add	r7, sp, #0
 8102c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8102c12:	6878      	ldr	r0, [r7, #4]
 8102c14:	f7ff ffa4 	bl	8102b60 <SysTick_Config>
 8102c18:	4603      	mov	r3, r0
}
 8102c1a:	4618      	mov	r0, r3
 8102c1c:	3708      	adds	r7, #8
 8102c1e:	46bd      	mov	sp, r7
 8102c20:	bd80      	pop	{r7, pc}
	...

08102c24 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102c24:	b480      	push	{r7}
 8102c26:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102c28:	4b07      	ldr	r3, [pc, #28]	; (8102c48 <HAL_GetCurrentCPUID+0x24>)
 8102c2a:	681b      	ldr	r3, [r3, #0]
 8102c2c:	091b      	lsrs	r3, r3, #4
 8102c2e:	f003 030f 	and.w	r3, r3, #15
 8102c32:	2b07      	cmp	r3, #7
 8102c34:	d101      	bne.n	8102c3a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102c36:	2303      	movs	r3, #3
 8102c38:	e000      	b.n	8102c3c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102c3a:	2301      	movs	r3, #1
  }
}
 8102c3c:	4618      	mov	r0, r3
 8102c3e:	46bd      	mov	sp, r7
 8102c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c44:	4770      	bx	lr
 8102c46:	bf00      	nop
 8102c48:	e000ed00 	.word	0xe000ed00

08102c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102c4c:	b480      	push	{r7}
 8102c4e:	b089      	sub	sp, #36	; 0x24
 8102c50:	af00      	add	r7, sp, #0
 8102c52:	6078      	str	r0, [r7, #4]
 8102c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102c56:	2300      	movs	r3, #0
 8102c58:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102c5a:	4b89      	ldr	r3, [pc, #548]	; (8102e80 <HAL_GPIO_Init+0x234>)
 8102c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102c5e:	e194      	b.n	8102f8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102c60:	683b      	ldr	r3, [r7, #0]
 8102c62:	681a      	ldr	r2, [r3, #0]
 8102c64:	2101      	movs	r1, #1
 8102c66:	69fb      	ldr	r3, [r7, #28]
 8102c68:	fa01 f303 	lsl.w	r3, r1, r3
 8102c6c:	4013      	ands	r3, r2
 8102c6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102c70:	693b      	ldr	r3, [r7, #16]
 8102c72:	2b00      	cmp	r3, #0
 8102c74:	f000 8186 	beq.w	8102f84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102c78:	683b      	ldr	r3, [r7, #0]
 8102c7a:	685b      	ldr	r3, [r3, #4]
 8102c7c:	f003 0303 	and.w	r3, r3, #3
 8102c80:	2b01      	cmp	r3, #1
 8102c82:	d005      	beq.n	8102c90 <HAL_GPIO_Init+0x44>
 8102c84:	683b      	ldr	r3, [r7, #0]
 8102c86:	685b      	ldr	r3, [r3, #4]
 8102c88:	f003 0303 	and.w	r3, r3, #3
 8102c8c:	2b02      	cmp	r3, #2
 8102c8e:	d130      	bne.n	8102cf2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102c90:	687b      	ldr	r3, [r7, #4]
 8102c92:	689b      	ldr	r3, [r3, #8]
 8102c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102c96:	69fb      	ldr	r3, [r7, #28]
 8102c98:	005b      	lsls	r3, r3, #1
 8102c9a:	2203      	movs	r2, #3
 8102c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8102ca0:	43db      	mvns	r3, r3
 8102ca2:	69ba      	ldr	r2, [r7, #24]
 8102ca4:	4013      	ands	r3, r2
 8102ca6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102ca8:	683b      	ldr	r3, [r7, #0]
 8102caa:	68da      	ldr	r2, [r3, #12]
 8102cac:	69fb      	ldr	r3, [r7, #28]
 8102cae:	005b      	lsls	r3, r3, #1
 8102cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8102cb4:	69ba      	ldr	r2, [r7, #24]
 8102cb6:	4313      	orrs	r3, r2
 8102cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102cba:	687b      	ldr	r3, [r7, #4]
 8102cbc:	69ba      	ldr	r2, [r7, #24]
 8102cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102cc0:	687b      	ldr	r3, [r7, #4]
 8102cc2:	685b      	ldr	r3, [r3, #4]
 8102cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102cc6:	2201      	movs	r2, #1
 8102cc8:	69fb      	ldr	r3, [r7, #28]
 8102cca:	fa02 f303 	lsl.w	r3, r2, r3
 8102cce:	43db      	mvns	r3, r3
 8102cd0:	69ba      	ldr	r2, [r7, #24]
 8102cd2:	4013      	ands	r3, r2
 8102cd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102cd6:	683b      	ldr	r3, [r7, #0]
 8102cd8:	685b      	ldr	r3, [r3, #4]
 8102cda:	091b      	lsrs	r3, r3, #4
 8102cdc:	f003 0201 	and.w	r2, r3, #1
 8102ce0:	69fb      	ldr	r3, [r7, #28]
 8102ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8102ce6:	69ba      	ldr	r2, [r7, #24]
 8102ce8:	4313      	orrs	r3, r2
 8102cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102cec:	687b      	ldr	r3, [r7, #4]
 8102cee:	69ba      	ldr	r2, [r7, #24]
 8102cf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102cf2:	683b      	ldr	r3, [r7, #0]
 8102cf4:	685b      	ldr	r3, [r3, #4]
 8102cf6:	f003 0303 	and.w	r3, r3, #3
 8102cfa:	2b03      	cmp	r3, #3
 8102cfc:	d017      	beq.n	8102d2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102cfe:	687b      	ldr	r3, [r7, #4]
 8102d00:	68db      	ldr	r3, [r3, #12]
 8102d02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102d04:	69fb      	ldr	r3, [r7, #28]
 8102d06:	005b      	lsls	r3, r3, #1
 8102d08:	2203      	movs	r2, #3
 8102d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8102d0e:	43db      	mvns	r3, r3
 8102d10:	69ba      	ldr	r2, [r7, #24]
 8102d12:	4013      	ands	r3, r2
 8102d14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102d16:	683b      	ldr	r3, [r7, #0]
 8102d18:	689a      	ldr	r2, [r3, #8]
 8102d1a:	69fb      	ldr	r3, [r7, #28]
 8102d1c:	005b      	lsls	r3, r3, #1
 8102d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8102d22:	69ba      	ldr	r2, [r7, #24]
 8102d24:	4313      	orrs	r3, r2
 8102d26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102d28:	687b      	ldr	r3, [r7, #4]
 8102d2a:	69ba      	ldr	r2, [r7, #24]
 8102d2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102d2e:	683b      	ldr	r3, [r7, #0]
 8102d30:	685b      	ldr	r3, [r3, #4]
 8102d32:	f003 0303 	and.w	r3, r3, #3
 8102d36:	2b02      	cmp	r3, #2
 8102d38:	d123      	bne.n	8102d82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102d3a:	69fb      	ldr	r3, [r7, #28]
 8102d3c:	08da      	lsrs	r2, r3, #3
 8102d3e:	687b      	ldr	r3, [r7, #4]
 8102d40:	3208      	adds	r2, #8
 8102d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102d48:	69fb      	ldr	r3, [r7, #28]
 8102d4a:	f003 0307 	and.w	r3, r3, #7
 8102d4e:	009b      	lsls	r3, r3, #2
 8102d50:	220f      	movs	r2, #15
 8102d52:	fa02 f303 	lsl.w	r3, r2, r3
 8102d56:	43db      	mvns	r3, r3
 8102d58:	69ba      	ldr	r2, [r7, #24]
 8102d5a:	4013      	ands	r3, r2
 8102d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102d5e:	683b      	ldr	r3, [r7, #0]
 8102d60:	691a      	ldr	r2, [r3, #16]
 8102d62:	69fb      	ldr	r3, [r7, #28]
 8102d64:	f003 0307 	and.w	r3, r3, #7
 8102d68:	009b      	lsls	r3, r3, #2
 8102d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8102d6e:	69ba      	ldr	r2, [r7, #24]
 8102d70:	4313      	orrs	r3, r2
 8102d72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102d74:	69fb      	ldr	r3, [r7, #28]
 8102d76:	08da      	lsrs	r2, r3, #3
 8102d78:	687b      	ldr	r3, [r7, #4]
 8102d7a:	3208      	adds	r2, #8
 8102d7c:	69b9      	ldr	r1, [r7, #24]
 8102d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102d82:	687b      	ldr	r3, [r7, #4]
 8102d84:	681b      	ldr	r3, [r3, #0]
 8102d86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102d88:	69fb      	ldr	r3, [r7, #28]
 8102d8a:	005b      	lsls	r3, r3, #1
 8102d8c:	2203      	movs	r2, #3
 8102d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8102d92:	43db      	mvns	r3, r3
 8102d94:	69ba      	ldr	r2, [r7, #24]
 8102d96:	4013      	ands	r3, r2
 8102d98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102d9a:	683b      	ldr	r3, [r7, #0]
 8102d9c:	685b      	ldr	r3, [r3, #4]
 8102d9e:	f003 0203 	and.w	r2, r3, #3
 8102da2:	69fb      	ldr	r3, [r7, #28]
 8102da4:	005b      	lsls	r3, r3, #1
 8102da6:	fa02 f303 	lsl.w	r3, r2, r3
 8102daa:	69ba      	ldr	r2, [r7, #24]
 8102dac:	4313      	orrs	r3, r2
 8102dae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102db0:	687b      	ldr	r3, [r7, #4]
 8102db2:	69ba      	ldr	r2, [r7, #24]
 8102db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102db6:	683b      	ldr	r3, [r7, #0]
 8102db8:	685b      	ldr	r3, [r3, #4]
 8102dba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102dbe:	2b00      	cmp	r3, #0
 8102dc0:	f000 80e0 	beq.w	8102f84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102dc4:	4b2f      	ldr	r3, [pc, #188]	; (8102e84 <HAL_GPIO_Init+0x238>)
 8102dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102dca:	4a2e      	ldr	r2, [pc, #184]	; (8102e84 <HAL_GPIO_Init+0x238>)
 8102dcc:	f043 0302 	orr.w	r3, r3, #2
 8102dd0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102dd4:	4b2b      	ldr	r3, [pc, #172]	; (8102e84 <HAL_GPIO_Init+0x238>)
 8102dd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102dda:	f003 0302 	and.w	r3, r3, #2
 8102dde:	60fb      	str	r3, [r7, #12]
 8102de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102de2:	4a29      	ldr	r2, [pc, #164]	; (8102e88 <HAL_GPIO_Init+0x23c>)
 8102de4:	69fb      	ldr	r3, [r7, #28]
 8102de6:	089b      	lsrs	r3, r3, #2
 8102de8:	3302      	adds	r3, #2
 8102dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102df0:	69fb      	ldr	r3, [r7, #28]
 8102df2:	f003 0303 	and.w	r3, r3, #3
 8102df6:	009b      	lsls	r3, r3, #2
 8102df8:	220f      	movs	r2, #15
 8102dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8102dfe:	43db      	mvns	r3, r3
 8102e00:	69ba      	ldr	r2, [r7, #24]
 8102e02:	4013      	ands	r3, r2
 8102e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102e06:	687b      	ldr	r3, [r7, #4]
 8102e08:	4a20      	ldr	r2, [pc, #128]	; (8102e8c <HAL_GPIO_Init+0x240>)
 8102e0a:	4293      	cmp	r3, r2
 8102e0c:	d052      	beq.n	8102eb4 <HAL_GPIO_Init+0x268>
 8102e0e:	687b      	ldr	r3, [r7, #4]
 8102e10:	4a1f      	ldr	r2, [pc, #124]	; (8102e90 <HAL_GPIO_Init+0x244>)
 8102e12:	4293      	cmp	r3, r2
 8102e14:	d031      	beq.n	8102e7a <HAL_GPIO_Init+0x22e>
 8102e16:	687b      	ldr	r3, [r7, #4]
 8102e18:	4a1e      	ldr	r2, [pc, #120]	; (8102e94 <HAL_GPIO_Init+0x248>)
 8102e1a:	4293      	cmp	r3, r2
 8102e1c:	d02b      	beq.n	8102e76 <HAL_GPIO_Init+0x22a>
 8102e1e:	687b      	ldr	r3, [r7, #4]
 8102e20:	4a1d      	ldr	r2, [pc, #116]	; (8102e98 <HAL_GPIO_Init+0x24c>)
 8102e22:	4293      	cmp	r3, r2
 8102e24:	d025      	beq.n	8102e72 <HAL_GPIO_Init+0x226>
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	4a1c      	ldr	r2, [pc, #112]	; (8102e9c <HAL_GPIO_Init+0x250>)
 8102e2a:	4293      	cmp	r3, r2
 8102e2c:	d01f      	beq.n	8102e6e <HAL_GPIO_Init+0x222>
 8102e2e:	687b      	ldr	r3, [r7, #4]
 8102e30:	4a1b      	ldr	r2, [pc, #108]	; (8102ea0 <HAL_GPIO_Init+0x254>)
 8102e32:	4293      	cmp	r3, r2
 8102e34:	d019      	beq.n	8102e6a <HAL_GPIO_Init+0x21e>
 8102e36:	687b      	ldr	r3, [r7, #4]
 8102e38:	4a1a      	ldr	r2, [pc, #104]	; (8102ea4 <HAL_GPIO_Init+0x258>)
 8102e3a:	4293      	cmp	r3, r2
 8102e3c:	d013      	beq.n	8102e66 <HAL_GPIO_Init+0x21a>
 8102e3e:	687b      	ldr	r3, [r7, #4]
 8102e40:	4a19      	ldr	r2, [pc, #100]	; (8102ea8 <HAL_GPIO_Init+0x25c>)
 8102e42:	4293      	cmp	r3, r2
 8102e44:	d00d      	beq.n	8102e62 <HAL_GPIO_Init+0x216>
 8102e46:	687b      	ldr	r3, [r7, #4]
 8102e48:	4a18      	ldr	r2, [pc, #96]	; (8102eac <HAL_GPIO_Init+0x260>)
 8102e4a:	4293      	cmp	r3, r2
 8102e4c:	d007      	beq.n	8102e5e <HAL_GPIO_Init+0x212>
 8102e4e:	687b      	ldr	r3, [r7, #4]
 8102e50:	4a17      	ldr	r2, [pc, #92]	; (8102eb0 <HAL_GPIO_Init+0x264>)
 8102e52:	4293      	cmp	r3, r2
 8102e54:	d101      	bne.n	8102e5a <HAL_GPIO_Init+0x20e>
 8102e56:	2309      	movs	r3, #9
 8102e58:	e02d      	b.n	8102eb6 <HAL_GPIO_Init+0x26a>
 8102e5a:	230a      	movs	r3, #10
 8102e5c:	e02b      	b.n	8102eb6 <HAL_GPIO_Init+0x26a>
 8102e5e:	2308      	movs	r3, #8
 8102e60:	e029      	b.n	8102eb6 <HAL_GPIO_Init+0x26a>
 8102e62:	2307      	movs	r3, #7
 8102e64:	e027      	b.n	8102eb6 <HAL_GPIO_Init+0x26a>
 8102e66:	2306      	movs	r3, #6
 8102e68:	e025      	b.n	8102eb6 <HAL_GPIO_Init+0x26a>
 8102e6a:	2305      	movs	r3, #5
 8102e6c:	e023      	b.n	8102eb6 <HAL_GPIO_Init+0x26a>
 8102e6e:	2304      	movs	r3, #4
 8102e70:	e021      	b.n	8102eb6 <HAL_GPIO_Init+0x26a>
 8102e72:	2303      	movs	r3, #3
 8102e74:	e01f      	b.n	8102eb6 <HAL_GPIO_Init+0x26a>
 8102e76:	2302      	movs	r3, #2
 8102e78:	e01d      	b.n	8102eb6 <HAL_GPIO_Init+0x26a>
 8102e7a:	2301      	movs	r3, #1
 8102e7c:	e01b      	b.n	8102eb6 <HAL_GPIO_Init+0x26a>
 8102e7e:	bf00      	nop
 8102e80:	580000c0 	.word	0x580000c0
 8102e84:	58024400 	.word	0x58024400
 8102e88:	58000400 	.word	0x58000400
 8102e8c:	58020000 	.word	0x58020000
 8102e90:	58020400 	.word	0x58020400
 8102e94:	58020800 	.word	0x58020800
 8102e98:	58020c00 	.word	0x58020c00
 8102e9c:	58021000 	.word	0x58021000
 8102ea0:	58021400 	.word	0x58021400
 8102ea4:	58021800 	.word	0x58021800
 8102ea8:	58021c00 	.word	0x58021c00
 8102eac:	58022000 	.word	0x58022000
 8102eb0:	58022400 	.word	0x58022400
 8102eb4:	2300      	movs	r3, #0
 8102eb6:	69fa      	ldr	r2, [r7, #28]
 8102eb8:	f002 0203 	and.w	r2, r2, #3
 8102ebc:	0092      	lsls	r2, r2, #2
 8102ebe:	4093      	lsls	r3, r2
 8102ec0:	69ba      	ldr	r2, [r7, #24]
 8102ec2:	4313      	orrs	r3, r2
 8102ec4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102ec6:	4938      	ldr	r1, [pc, #224]	; (8102fa8 <HAL_GPIO_Init+0x35c>)
 8102ec8:	69fb      	ldr	r3, [r7, #28]
 8102eca:	089b      	lsrs	r3, r3, #2
 8102ecc:	3302      	adds	r3, #2
 8102ece:	69ba      	ldr	r2, [r7, #24]
 8102ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102ed8:	681b      	ldr	r3, [r3, #0]
 8102eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102edc:	693b      	ldr	r3, [r7, #16]
 8102ede:	43db      	mvns	r3, r3
 8102ee0:	69ba      	ldr	r2, [r7, #24]
 8102ee2:	4013      	ands	r3, r2
 8102ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102ee6:	683b      	ldr	r3, [r7, #0]
 8102ee8:	685b      	ldr	r3, [r3, #4]
 8102eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102eee:	2b00      	cmp	r3, #0
 8102ef0:	d003      	beq.n	8102efa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102ef2:	69ba      	ldr	r2, [r7, #24]
 8102ef4:	693b      	ldr	r3, [r7, #16]
 8102ef6:	4313      	orrs	r3, r2
 8102ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102efe:	69bb      	ldr	r3, [r7, #24]
 8102f00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102f06:	685b      	ldr	r3, [r3, #4]
 8102f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102f0a:	693b      	ldr	r3, [r7, #16]
 8102f0c:	43db      	mvns	r3, r3
 8102f0e:	69ba      	ldr	r2, [r7, #24]
 8102f10:	4013      	ands	r3, r2
 8102f12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102f14:	683b      	ldr	r3, [r7, #0]
 8102f16:	685b      	ldr	r3, [r3, #4]
 8102f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102f1c:	2b00      	cmp	r3, #0
 8102f1e:	d003      	beq.n	8102f28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102f20:	69ba      	ldr	r2, [r7, #24]
 8102f22:	693b      	ldr	r3, [r7, #16]
 8102f24:	4313      	orrs	r3, r2
 8102f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102f28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102f2c:	69bb      	ldr	r3, [r7, #24]
 8102f2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102f30:	697b      	ldr	r3, [r7, #20]
 8102f32:	685b      	ldr	r3, [r3, #4]
 8102f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102f36:	693b      	ldr	r3, [r7, #16]
 8102f38:	43db      	mvns	r3, r3
 8102f3a:	69ba      	ldr	r2, [r7, #24]
 8102f3c:	4013      	ands	r3, r2
 8102f3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102f40:	683b      	ldr	r3, [r7, #0]
 8102f42:	685b      	ldr	r3, [r3, #4]
 8102f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102f48:	2b00      	cmp	r3, #0
 8102f4a:	d003      	beq.n	8102f54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102f4c:	69ba      	ldr	r2, [r7, #24]
 8102f4e:	693b      	ldr	r3, [r7, #16]
 8102f50:	4313      	orrs	r3, r2
 8102f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102f54:	697b      	ldr	r3, [r7, #20]
 8102f56:	69ba      	ldr	r2, [r7, #24]
 8102f58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102f5a:	697b      	ldr	r3, [r7, #20]
 8102f5c:	681b      	ldr	r3, [r3, #0]
 8102f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102f60:	693b      	ldr	r3, [r7, #16]
 8102f62:	43db      	mvns	r3, r3
 8102f64:	69ba      	ldr	r2, [r7, #24]
 8102f66:	4013      	ands	r3, r2
 8102f68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102f6a:	683b      	ldr	r3, [r7, #0]
 8102f6c:	685b      	ldr	r3, [r3, #4]
 8102f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102f72:	2b00      	cmp	r3, #0
 8102f74:	d003      	beq.n	8102f7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102f76:	69ba      	ldr	r2, [r7, #24]
 8102f78:	693b      	ldr	r3, [r7, #16]
 8102f7a:	4313      	orrs	r3, r2
 8102f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102f7e:	697b      	ldr	r3, [r7, #20]
 8102f80:	69ba      	ldr	r2, [r7, #24]
 8102f82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102f84:	69fb      	ldr	r3, [r7, #28]
 8102f86:	3301      	adds	r3, #1
 8102f88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102f8a:	683b      	ldr	r3, [r7, #0]
 8102f8c:	681a      	ldr	r2, [r3, #0]
 8102f8e:	69fb      	ldr	r3, [r7, #28]
 8102f90:	fa22 f303 	lsr.w	r3, r2, r3
 8102f94:	2b00      	cmp	r3, #0
 8102f96:	f47f ae63 	bne.w	8102c60 <HAL_GPIO_Init+0x14>
  }
}
 8102f9a:	bf00      	nop
 8102f9c:	bf00      	nop
 8102f9e:	3724      	adds	r7, #36	; 0x24
 8102fa0:	46bd      	mov	sp, r7
 8102fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fa6:	4770      	bx	lr
 8102fa8:	58000400 	.word	0x58000400

08102fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8102fac:	b480      	push	{r7}
 8102fae:	b083      	sub	sp, #12
 8102fb0:	af00      	add	r7, sp, #0
 8102fb2:	6078      	str	r0, [r7, #4]
 8102fb4:	460b      	mov	r3, r1
 8102fb6:	807b      	strh	r3, [r7, #2]
 8102fb8:	4613      	mov	r3, r2
 8102fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8102fbc:	787b      	ldrb	r3, [r7, #1]
 8102fbe:	2b00      	cmp	r3, #0
 8102fc0:	d003      	beq.n	8102fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8102fc2:	887a      	ldrh	r2, [r7, #2]
 8102fc4:	687b      	ldr	r3, [r7, #4]
 8102fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8102fc8:	e003      	b.n	8102fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8102fca:	887b      	ldrh	r3, [r7, #2]
 8102fcc:	041a      	lsls	r2, r3, #16
 8102fce:	687b      	ldr	r3, [r7, #4]
 8102fd0:	619a      	str	r2, [r3, #24]
}
 8102fd2:	bf00      	nop
 8102fd4:	370c      	adds	r7, #12
 8102fd6:	46bd      	mov	sp, r7
 8102fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fdc:	4770      	bx	lr

08102fde <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8102fde:	b580      	push	{r7, lr}
 8102fe0:	b082      	sub	sp, #8
 8102fe2:	af00      	add	r7, sp, #0
 8102fe4:	4603      	mov	r3, r0
 8102fe6:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8102fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102fec:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8102ff0:	88fb      	ldrh	r3, [r7, #6]
 8102ff2:	4013      	ands	r3, r2
 8102ff4:	2b00      	cmp	r3, #0
 8102ff6:	d008      	beq.n	810300a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8102ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102ffc:	88fb      	ldrh	r3, [r7, #6]
 8102ffe:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8103002:	88fb      	ldrh	r3, [r7, #6]
 8103004:	4618      	mov	r0, r3
 8103006:	f000 f804 	bl	8103012 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 810300a:	bf00      	nop
 810300c:	3708      	adds	r7, #8
 810300e:	46bd      	mov	sp, r7
 8103010:	bd80      	pop	{r7, pc}

08103012 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8103012:	b480      	push	{r7}
 8103014:	b083      	sub	sp, #12
 8103016:	af00      	add	r7, sp, #0
 8103018:	4603      	mov	r3, r0
 810301a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 810301c:	bf00      	nop
 810301e:	370c      	adds	r7, #12
 8103020:	46bd      	mov	sp, r7
 8103022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103026:	4770      	bx	lr

08103028 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103028:	b480      	push	{r7}
 810302a:	b083      	sub	sp, #12
 810302c:	af00      	add	r7, sp, #0
 810302e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103030:	4b05      	ldr	r3, [pc, #20]	; (8103048 <HAL_HSEM_ActivateNotification+0x20>)
 8103032:	681a      	ldr	r2, [r3, #0]
 8103034:	4904      	ldr	r1, [pc, #16]	; (8103048 <HAL_HSEM_ActivateNotification+0x20>)
 8103036:	687b      	ldr	r3, [r7, #4]
 8103038:	4313      	orrs	r3, r2
 810303a:	600b      	str	r3, [r1, #0]
#endif
}
 810303c:	bf00      	nop
 810303e:	370c      	adds	r7, #12
 8103040:	46bd      	mov	sp, r7
 8103042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103046:	4770      	bx	lr
 8103048:	58026510 	.word	0x58026510

0810304c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 810304c:	b580      	push	{r7, lr}
 810304e:	b082      	sub	sp, #8
 8103050:	af00      	add	r7, sp, #0
 8103052:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8103054:	687b      	ldr	r3, [r7, #4]
 8103056:	2b00      	cmp	r3, #0
 8103058:	d101      	bne.n	810305e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810305a:	2301      	movs	r3, #1
 810305c:	e081      	b.n	8103162 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810305e:	687b      	ldr	r3, [r7, #4]
 8103060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103064:	b2db      	uxtb	r3, r3
 8103066:	2b00      	cmp	r3, #0
 8103068:	d106      	bne.n	8103078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810306a:	687b      	ldr	r3, [r7, #4]
 810306c:	2200      	movs	r2, #0
 810306e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8103072:	6878      	ldr	r0, [r7, #4]
 8103074:	f7ff f96a 	bl	810234c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	2224      	movs	r2, #36	; 0x24
 810307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8103080:	687b      	ldr	r3, [r7, #4]
 8103082:	681b      	ldr	r3, [r3, #0]
 8103084:	681a      	ldr	r2, [r3, #0]
 8103086:	687b      	ldr	r3, [r7, #4]
 8103088:	681b      	ldr	r3, [r3, #0]
 810308a:	f022 0201 	bic.w	r2, r2, #1
 810308e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8103090:	687b      	ldr	r3, [r7, #4]
 8103092:	685a      	ldr	r2, [r3, #4]
 8103094:	687b      	ldr	r3, [r7, #4]
 8103096:	681b      	ldr	r3, [r3, #0]
 8103098:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 810309c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810309e:	687b      	ldr	r3, [r7, #4]
 81030a0:	681b      	ldr	r3, [r3, #0]
 81030a2:	689a      	ldr	r2, [r3, #8]
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81030ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	68db      	ldr	r3, [r3, #12]
 81030b2:	2b01      	cmp	r3, #1
 81030b4:	d107      	bne.n	81030c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	689a      	ldr	r2, [r3, #8]
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	681b      	ldr	r3, [r3, #0]
 81030be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81030c2:	609a      	str	r2, [r3, #8]
 81030c4:	e006      	b.n	81030d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	689a      	ldr	r2, [r3, #8]
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	681b      	ldr	r3, [r3, #0]
 81030ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81030d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81030d4:	687b      	ldr	r3, [r7, #4]
 81030d6:	68db      	ldr	r3, [r3, #12]
 81030d8:	2b02      	cmp	r3, #2
 81030da:	d104      	bne.n	81030e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81030dc:	687b      	ldr	r3, [r7, #4]
 81030de:	681b      	ldr	r3, [r3, #0]
 81030e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81030e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81030e6:	687b      	ldr	r3, [r7, #4]
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	685b      	ldr	r3, [r3, #4]
 81030ec:	687a      	ldr	r2, [r7, #4]
 81030ee:	6812      	ldr	r2, [r2, #0]
 81030f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81030f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81030f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81030fa:	687b      	ldr	r3, [r7, #4]
 81030fc:	681b      	ldr	r3, [r3, #0]
 81030fe:	68da      	ldr	r2, [r3, #12]
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103108:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	691a      	ldr	r2, [r3, #16]
 810310e:	687b      	ldr	r3, [r7, #4]
 8103110:	695b      	ldr	r3, [r3, #20]
 8103112:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8103116:	687b      	ldr	r3, [r7, #4]
 8103118:	699b      	ldr	r3, [r3, #24]
 810311a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	430a      	orrs	r2, r1
 8103122:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	69d9      	ldr	r1, [r3, #28]
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	6a1a      	ldr	r2, [r3, #32]
 810312c:	687b      	ldr	r3, [r7, #4]
 810312e:	681b      	ldr	r3, [r3, #0]
 8103130:	430a      	orrs	r2, r1
 8103132:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8103134:	687b      	ldr	r3, [r7, #4]
 8103136:	681b      	ldr	r3, [r3, #0]
 8103138:	681a      	ldr	r2, [r3, #0]
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	681b      	ldr	r3, [r3, #0]
 810313e:	f042 0201 	orr.w	r2, r2, #1
 8103142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103144:	687b      	ldr	r3, [r7, #4]
 8103146:	2200      	movs	r2, #0
 8103148:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810314a:	687b      	ldr	r3, [r7, #4]
 810314c:	2220      	movs	r2, #32
 810314e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	2200      	movs	r2, #0
 8103156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8103158:	687b      	ldr	r3, [r7, #4]
 810315a:	2200      	movs	r2, #0
 810315c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8103160:	2300      	movs	r3, #0
}
 8103162:	4618      	mov	r0, r3
 8103164:	3708      	adds	r7, #8
 8103166:	46bd      	mov	sp, r7
 8103168:	bd80      	pop	{r7, pc}
	...

0810316c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 810316c:	b580      	push	{r7, lr}
 810316e:	b088      	sub	sp, #32
 8103170:	af02      	add	r7, sp, #8
 8103172:	60f8      	str	r0, [r7, #12]
 8103174:	607a      	str	r2, [r7, #4]
 8103176:	461a      	mov	r2, r3
 8103178:	460b      	mov	r3, r1
 810317a:	817b      	strh	r3, [r7, #10]
 810317c:	4613      	mov	r3, r2
 810317e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103180:	68fb      	ldr	r3, [r7, #12]
 8103182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103186:	b2db      	uxtb	r3, r3
 8103188:	2b20      	cmp	r3, #32
 810318a:	f040 80da 	bne.w	8103342 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810318e:	68fb      	ldr	r3, [r7, #12]
 8103190:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103194:	2b01      	cmp	r3, #1
 8103196:	d101      	bne.n	810319c <HAL_I2C_Master_Transmit+0x30>
 8103198:	2302      	movs	r3, #2
 810319a:	e0d3      	b.n	8103344 <HAL_I2C_Master_Transmit+0x1d8>
 810319c:	68fb      	ldr	r3, [r7, #12]
 810319e:	2201      	movs	r2, #1
 81031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81031a4:	f7ff fbf2 	bl	810298c <HAL_GetTick>
 81031a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81031aa:	697b      	ldr	r3, [r7, #20]
 81031ac:	9300      	str	r3, [sp, #0]
 81031ae:	2319      	movs	r3, #25
 81031b0:	2201      	movs	r2, #1
 81031b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81031b6:	68f8      	ldr	r0, [r7, #12]
 81031b8:	f000 fb07 	bl	81037ca <I2C_WaitOnFlagUntilTimeout>
 81031bc:	4603      	mov	r3, r0
 81031be:	2b00      	cmp	r3, #0
 81031c0:	d001      	beq.n	81031c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 81031c2:	2301      	movs	r3, #1
 81031c4:	e0be      	b.n	8103344 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81031c6:	68fb      	ldr	r3, [r7, #12]
 81031c8:	2221      	movs	r2, #33	; 0x21
 81031ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81031ce:	68fb      	ldr	r3, [r7, #12]
 81031d0:	2210      	movs	r2, #16
 81031d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81031d6:	68fb      	ldr	r3, [r7, #12]
 81031d8:	2200      	movs	r2, #0
 81031da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81031dc:	68fb      	ldr	r3, [r7, #12]
 81031de:	687a      	ldr	r2, [r7, #4]
 81031e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81031e2:	68fb      	ldr	r3, [r7, #12]
 81031e4:	893a      	ldrh	r2, [r7, #8]
 81031e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81031e8:	68fb      	ldr	r3, [r7, #12]
 81031ea:	2200      	movs	r2, #0
 81031ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81031ee:	68fb      	ldr	r3, [r7, #12]
 81031f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81031f2:	b29b      	uxth	r3, r3
 81031f4:	2bff      	cmp	r3, #255	; 0xff
 81031f6:	d90e      	bls.n	8103216 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81031f8:	68fb      	ldr	r3, [r7, #12]
 81031fa:	22ff      	movs	r2, #255	; 0xff
 81031fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81031fe:	68fb      	ldr	r3, [r7, #12]
 8103200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103202:	b2da      	uxtb	r2, r3
 8103204:	8979      	ldrh	r1, [r7, #10]
 8103206:	4b51      	ldr	r3, [pc, #324]	; (810334c <HAL_I2C_Master_Transmit+0x1e0>)
 8103208:	9300      	str	r3, [sp, #0]
 810320a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810320e:	68f8      	ldr	r0, [r7, #12]
 8103210:	f000 fd16 	bl	8103c40 <I2C_TransferConfig>
 8103214:	e06c      	b.n	81032f0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103216:	68fb      	ldr	r3, [r7, #12]
 8103218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810321a:	b29a      	uxth	r2, r3
 810321c:	68fb      	ldr	r3, [r7, #12]
 810321e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103220:	68fb      	ldr	r3, [r7, #12]
 8103222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103224:	b2da      	uxtb	r2, r3
 8103226:	8979      	ldrh	r1, [r7, #10]
 8103228:	4b48      	ldr	r3, [pc, #288]	; (810334c <HAL_I2C_Master_Transmit+0x1e0>)
 810322a:	9300      	str	r3, [sp, #0]
 810322c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103230:	68f8      	ldr	r0, [r7, #12]
 8103232:	f000 fd05 	bl	8103c40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8103236:	e05b      	b.n	81032f0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103238:	697a      	ldr	r2, [r7, #20]
 810323a:	6a39      	ldr	r1, [r7, #32]
 810323c:	68f8      	ldr	r0, [r7, #12]
 810323e:	f000 fb13 	bl	8103868 <I2C_WaitOnTXISFlagUntilTimeout>
 8103242:	4603      	mov	r3, r0
 8103244:	2b00      	cmp	r3, #0
 8103246:	d001      	beq.n	810324c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8103248:	2301      	movs	r3, #1
 810324a:	e07b      	b.n	8103344 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810324c:	68fb      	ldr	r3, [r7, #12]
 810324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103250:	781a      	ldrb	r2, [r3, #0]
 8103252:	68fb      	ldr	r3, [r7, #12]
 8103254:	681b      	ldr	r3, [r3, #0]
 8103256:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103258:	68fb      	ldr	r3, [r7, #12]
 810325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810325c:	1c5a      	adds	r2, r3, #1
 810325e:	68fb      	ldr	r3, [r7, #12]
 8103260:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8103262:	68fb      	ldr	r3, [r7, #12]
 8103264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103266:	b29b      	uxth	r3, r3
 8103268:	3b01      	subs	r3, #1
 810326a:	b29a      	uxth	r2, r3
 810326c:	68fb      	ldr	r3, [r7, #12]
 810326e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8103270:	68fb      	ldr	r3, [r7, #12]
 8103272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103274:	3b01      	subs	r3, #1
 8103276:	b29a      	uxth	r2, r3
 8103278:	68fb      	ldr	r3, [r7, #12]
 810327a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810327c:	68fb      	ldr	r3, [r7, #12]
 810327e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103280:	b29b      	uxth	r3, r3
 8103282:	2b00      	cmp	r3, #0
 8103284:	d034      	beq.n	81032f0 <HAL_I2C_Master_Transmit+0x184>
 8103286:	68fb      	ldr	r3, [r7, #12]
 8103288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810328a:	2b00      	cmp	r3, #0
 810328c:	d130      	bne.n	81032f0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810328e:	697b      	ldr	r3, [r7, #20]
 8103290:	9300      	str	r3, [sp, #0]
 8103292:	6a3b      	ldr	r3, [r7, #32]
 8103294:	2200      	movs	r2, #0
 8103296:	2180      	movs	r1, #128	; 0x80
 8103298:	68f8      	ldr	r0, [r7, #12]
 810329a:	f000 fa96 	bl	81037ca <I2C_WaitOnFlagUntilTimeout>
 810329e:	4603      	mov	r3, r0
 81032a0:	2b00      	cmp	r3, #0
 81032a2:	d001      	beq.n	81032a8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 81032a4:	2301      	movs	r3, #1
 81032a6:	e04d      	b.n	8103344 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81032a8:	68fb      	ldr	r3, [r7, #12]
 81032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81032ac:	b29b      	uxth	r3, r3
 81032ae:	2bff      	cmp	r3, #255	; 0xff
 81032b0:	d90e      	bls.n	81032d0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81032b2:	68fb      	ldr	r3, [r7, #12]
 81032b4:	22ff      	movs	r2, #255	; 0xff
 81032b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81032b8:	68fb      	ldr	r3, [r7, #12]
 81032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81032bc:	b2da      	uxtb	r2, r3
 81032be:	8979      	ldrh	r1, [r7, #10]
 81032c0:	2300      	movs	r3, #0
 81032c2:	9300      	str	r3, [sp, #0]
 81032c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81032c8:	68f8      	ldr	r0, [r7, #12]
 81032ca:	f000 fcb9 	bl	8103c40 <I2C_TransferConfig>
 81032ce:	e00f      	b.n	81032f0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81032d0:	68fb      	ldr	r3, [r7, #12]
 81032d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81032d4:	b29a      	uxth	r2, r3
 81032d6:	68fb      	ldr	r3, [r7, #12]
 81032d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81032da:	68fb      	ldr	r3, [r7, #12]
 81032dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81032de:	b2da      	uxtb	r2, r3
 81032e0:	8979      	ldrh	r1, [r7, #10]
 81032e2:	2300      	movs	r3, #0
 81032e4:	9300      	str	r3, [sp, #0]
 81032e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81032ea:	68f8      	ldr	r0, [r7, #12]
 81032ec:	f000 fca8 	bl	8103c40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81032f0:	68fb      	ldr	r3, [r7, #12]
 81032f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81032f4:	b29b      	uxth	r3, r3
 81032f6:	2b00      	cmp	r3, #0
 81032f8:	d19e      	bne.n	8103238 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81032fa:	697a      	ldr	r2, [r7, #20]
 81032fc:	6a39      	ldr	r1, [r7, #32]
 81032fe:	68f8      	ldr	r0, [r7, #12]
 8103300:	f000 faf9 	bl	81038f6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103304:	4603      	mov	r3, r0
 8103306:	2b00      	cmp	r3, #0
 8103308:	d001      	beq.n	810330e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 810330a:	2301      	movs	r3, #1
 810330c:	e01a      	b.n	8103344 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810330e:	68fb      	ldr	r3, [r7, #12]
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	2220      	movs	r2, #32
 8103314:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103316:	68fb      	ldr	r3, [r7, #12]
 8103318:	681b      	ldr	r3, [r3, #0]
 810331a:	6859      	ldr	r1, [r3, #4]
 810331c:	68fb      	ldr	r3, [r7, #12]
 810331e:	681a      	ldr	r2, [r3, #0]
 8103320:	4b0b      	ldr	r3, [pc, #44]	; (8103350 <HAL_I2C_Master_Transmit+0x1e4>)
 8103322:	400b      	ands	r3, r1
 8103324:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103326:	68fb      	ldr	r3, [r7, #12]
 8103328:	2220      	movs	r2, #32
 810332a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810332e:	68fb      	ldr	r3, [r7, #12]
 8103330:	2200      	movs	r2, #0
 8103332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103336:	68fb      	ldr	r3, [r7, #12]
 8103338:	2200      	movs	r2, #0
 810333a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810333e:	2300      	movs	r3, #0
 8103340:	e000      	b.n	8103344 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8103342:	2302      	movs	r3, #2
  }
}
 8103344:	4618      	mov	r0, r3
 8103346:	3718      	adds	r7, #24
 8103348:	46bd      	mov	sp, r7
 810334a:	bd80      	pop	{r7, pc}
 810334c:	80002000 	.word	0x80002000
 8103350:	fe00e800 	.word	0xfe00e800

08103354 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8103354:	b580      	push	{r7, lr}
 8103356:	b088      	sub	sp, #32
 8103358:	af02      	add	r7, sp, #8
 810335a:	60f8      	str	r0, [r7, #12]
 810335c:	607a      	str	r2, [r7, #4]
 810335e:	461a      	mov	r2, r3
 8103360:	460b      	mov	r3, r1
 8103362:	817b      	strh	r3, [r7, #10]
 8103364:	4613      	mov	r3, r2
 8103366:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103368:	68fb      	ldr	r3, [r7, #12]
 810336a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810336e:	b2db      	uxtb	r3, r3
 8103370:	2b20      	cmp	r3, #32
 8103372:	f040 80db 	bne.w	810352c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103376:	68fb      	ldr	r3, [r7, #12]
 8103378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810337c:	2b01      	cmp	r3, #1
 810337e:	d101      	bne.n	8103384 <HAL_I2C_Master_Receive+0x30>
 8103380:	2302      	movs	r3, #2
 8103382:	e0d4      	b.n	810352e <HAL_I2C_Master_Receive+0x1da>
 8103384:	68fb      	ldr	r3, [r7, #12]
 8103386:	2201      	movs	r2, #1
 8103388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810338c:	f7ff fafe 	bl	810298c <HAL_GetTick>
 8103390:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103392:	697b      	ldr	r3, [r7, #20]
 8103394:	9300      	str	r3, [sp, #0]
 8103396:	2319      	movs	r3, #25
 8103398:	2201      	movs	r2, #1
 810339a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810339e:	68f8      	ldr	r0, [r7, #12]
 81033a0:	f000 fa13 	bl	81037ca <I2C_WaitOnFlagUntilTimeout>
 81033a4:	4603      	mov	r3, r0
 81033a6:	2b00      	cmp	r3, #0
 81033a8:	d001      	beq.n	81033ae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 81033aa:	2301      	movs	r3, #1
 81033ac:	e0bf      	b.n	810352e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81033ae:	68fb      	ldr	r3, [r7, #12]
 81033b0:	2222      	movs	r2, #34	; 0x22
 81033b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81033b6:	68fb      	ldr	r3, [r7, #12]
 81033b8:	2210      	movs	r2, #16
 81033ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81033be:	68fb      	ldr	r3, [r7, #12]
 81033c0:	2200      	movs	r2, #0
 81033c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81033c4:	68fb      	ldr	r3, [r7, #12]
 81033c6:	687a      	ldr	r2, [r7, #4]
 81033c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81033ca:	68fb      	ldr	r3, [r7, #12]
 81033cc:	893a      	ldrh	r2, [r7, #8]
 81033ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81033d0:	68fb      	ldr	r3, [r7, #12]
 81033d2:	2200      	movs	r2, #0
 81033d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81033d6:	68fb      	ldr	r3, [r7, #12]
 81033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81033da:	b29b      	uxth	r3, r3
 81033dc:	2bff      	cmp	r3, #255	; 0xff
 81033de:	d90e      	bls.n	81033fe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81033e0:	68fb      	ldr	r3, [r7, #12]
 81033e2:	22ff      	movs	r2, #255	; 0xff
 81033e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81033e6:	68fb      	ldr	r3, [r7, #12]
 81033e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81033ea:	b2da      	uxtb	r2, r3
 81033ec:	8979      	ldrh	r1, [r7, #10]
 81033ee:	4b52      	ldr	r3, [pc, #328]	; (8103538 <HAL_I2C_Master_Receive+0x1e4>)
 81033f0:	9300      	str	r3, [sp, #0]
 81033f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81033f6:	68f8      	ldr	r0, [r7, #12]
 81033f8:	f000 fc22 	bl	8103c40 <I2C_TransferConfig>
 81033fc:	e06d      	b.n	81034da <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81033fe:	68fb      	ldr	r3, [r7, #12]
 8103400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103402:	b29a      	uxth	r2, r3
 8103404:	68fb      	ldr	r3, [r7, #12]
 8103406:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103408:	68fb      	ldr	r3, [r7, #12]
 810340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810340c:	b2da      	uxtb	r2, r3
 810340e:	8979      	ldrh	r1, [r7, #10]
 8103410:	4b49      	ldr	r3, [pc, #292]	; (8103538 <HAL_I2C_Master_Receive+0x1e4>)
 8103412:	9300      	str	r3, [sp, #0]
 8103414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103418:	68f8      	ldr	r0, [r7, #12]
 810341a:	f000 fc11 	bl	8103c40 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 810341e:	e05c      	b.n	81034da <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103420:	697a      	ldr	r2, [r7, #20]
 8103422:	6a39      	ldr	r1, [r7, #32]
 8103424:	68f8      	ldr	r0, [r7, #12]
 8103426:	f000 faa9 	bl	810397c <I2C_WaitOnRXNEFlagUntilTimeout>
 810342a:	4603      	mov	r3, r0
 810342c:	2b00      	cmp	r3, #0
 810342e:	d001      	beq.n	8103434 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8103430:	2301      	movs	r3, #1
 8103432:	e07c      	b.n	810352e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8103434:	68fb      	ldr	r3, [r7, #12]
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810343a:	68fb      	ldr	r3, [r7, #12]
 810343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810343e:	b2d2      	uxtb	r2, r2
 8103440:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103442:	68fb      	ldr	r3, [r7, #12]
 8103444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103446:	1c5a      	adds	r2, r3, #1
 8103448:	68fb      	ldr	r3, [r7, #12]
 810344a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 810344c:	68fb      	ldr	r3, [r7, #12]
 810344e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103450:	3b01      	subs	r3, #1
 8103452:	b29a      	uxth	r2, r3
 8103454:	68fb      	ldr	r3, [r7, #12]
 8103456:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8103458:	68fb      	ldr	r3, [r7, #12]
 810345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810345c:	b29b      	uxth	r3, r3
 810345e:	3b01      	subs	r3, #1
 8103460:	b29a      	uxth	r2, r3
 8103462:	68fb      	ldr	r3, [r7, #12]
 8103464:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103466:	68fb      	ldr	r3, [r7, #12]
 8103468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810346a:	b29b      	uxth	r3, r3
 810346c:	2b00      	cmp	r3, #0
 810346e:	d034      	beq.n	81034da <HAL_I2C_Master_Receive+0x186>
 8103470:	68fb      	ldr	r3, [r7, #12]
 8103472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103474:	2b00      	cmp	r3, #0
 8103476:	d130      	bne.n	81034da <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103478:	697b      	ldr	r3, [r7, #20]
 810347a:	9300      	str	r3, [sp, #0]
 810347c:	6a3b      	ldr	r3, [r7, #32]
 810347e:	2200      	movs	r2, #0
 8103480:	2180      	movs	r1, #128	; 0x80
 8103482:	68f8      	ldr	r0, [r7, #12]
 8103484:	f000 f9a1 	bl	81037ca <I2C_WaitOnFlagUntilTimeout>
 8103488:	4603      	mov	r3, r0
 810348a:	2b00      	cmp	r3, #0
 810348c:	d001      	beq.n	8103492 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 810348e:	2301      	movs	r3, #1
 8103490:	e04d      	b.n	810352e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103492:	68fb      	ldr	r3, [r7, #12]
 8103494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103496:	b29b      	uxth	r3, r3
 8103498:	2bff      	cmp	r3, #255	; 0xff
 810349a:	d90e      	bls.n	81034ba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810349c:	68fb      	ldr	r3, [r7, #12]
 810349e:	22ff      	movs	r2, #255	; 0xff
 81034a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81034a2:	68fb      	ldr	r3, [r7, #12]
 81034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81034a6:	b2da      	uxtb	r2, r3
 81034a8:	8979      	ldrh	r1, [r7, #10]
 81034aa:	2300      	movs	r3, #0
 81034ac:	9300      	str	r3, [sp, #0]
 81034ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81034b2:	68f8      	ldr	r0, [r7, #12]
 81034b4:	f000 fbc4 	bl	8103c40 <I2C_TransferConfig>
 81034b8:	e00f      	b.n	81034da <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81034ba:	68fb      	ldr	r3, [r7, #12]
 81034bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81034be:	b29a      	uxth	r2, r3
 81034c0:	68fb      	ldr	r3, [r7, #12]
 81034c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81034c4:	68fb      	ldr	r3, [r7, #12]
 81034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81034c8:	b2da      	uxtb	r2, r3
 81034ca:	8979      	ldrh	r1, [r7, #10]
 81034cc:	2300      	movs	r3, #0
 81034ce:	9300      	str	r3, [sp, #0]
 81034d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81034d4:	68f8      	ldr	r0, [r7, #12]
 81034d6:	f000 fbb3 	bl	8103c40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81034da:	68fb      	ldr	r3, [r7, #12]
 81034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81034de:	b29b      	uxth	r3, r3
 81034e0:	2b00      	cmp	r3, #0
 81034e2:	d19d      	bne.n	8103420 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81034e4:	697a      	ldr	r2, [r7, #20]
 81034e6:	6a39      	ldr	r1, [r7, #32]
 81034e8:	68f8      	ldr	r0, [r7, #12]
 81034ea:	f000 fa04 	bl	81038f6 <I2C_WaitOnSTOPFlagUntilTimeout>
 81034ee:	4603      	mov	r3, r0
 81034f0:	2b00      	cmp	r3, #0
 81034f2:	d001      	beq.n	81034f8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 81034f4:	2301      	movs	r3, #1
 81034f6:	e01a      	b.n	810352e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81034f8:	68fb      	ldr	r3, [r7, #12]
 81034fa:	681b      	ldr	r3, [r3, #0]
 81034fc:	2220      	movs	r2, #32
 81034fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103500:	68fb      	ldr	r3, [r7, #12]
 8103502:	681b      	ldr	r3, [r3, #0]
 8103504:	6859      	ldr	r1, [r3, #4]
 8103506:	68fb      	ldr	r3, [r7, #12]
 8103508:	681a      	ldr	r2, [r3, #0]
 810350a:	4b0c      	ldr	r3, [pc, #48]	; (810353c <HAL_I2C_Master_Receive+0x1e8>)
 810350c:	400b      	ands	r3, r1
 810350e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103510:	68fb      	ldr	r3, [r7, #12]
 8103512:	2220      	movs	r2, #32
 8103514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103518:	68fb      	ldr	r3, [r7, #12]
 810351a:	2200      	movs	r2, #0
 810351c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103520:	68fb      	ldr	r3, [r7, #12]
 8103522:	2200      	movs	r2, #0
 8103524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103528:	2300      	movs	r3, #0
 810352a:	e000      	b.n	810352e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 810352c:	2302      	movs	r3, #2
  }
}
 810352e:	4618      	mov	r0, r3
 8103530:	3718      	adds	r7, #24
 8103532:	46bd      	mov	sp, r7
 8103534:	bd80      	pop	{r7, pc}
 8103536:	bf00      	nop
 8103538:	80002400 	.word	0x80002400
 810353c:	fe00e800 	.word	0xfe00e800

08103540 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8103540:	b580      	push	{r7, lr}
 8103542:	b08a      	sub	sp, #40	; 0x28
 8103544:	af02      	add	r7, sp, #8
 8103546:	60f8      	str	r0, [r7, #12]
 8103548:	607a      	str	r2, [r7, #4]
 810354a:	603b      	str	r3, [r7, #0]
 810354c:	460b      	mov	r3, r1
 810354e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8103550:	2300      	movs	r3, #0
 8103552:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103554:	68fb      	ldr	r3, [r7, #12]
 8103556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810355a:	b2db      	uxtb	r3, r3
 810355c:	2b20      	cmp	r3, #32
 810355e:	f040 80f1 	bne.w	8103744 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8103562:	68fb      	ldr	r3, [r7, #12]
 8103564:	681b      	ldr	r3, [r3, #0]
 8103566:	699b      	ldr	r3, [r3, #24]
 8103568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810356c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103570:	d101      	bne.n	8103576 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8103572:	2302      	movs	r3, #2
 8103574:	e0e7      	b.n	8103746 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103576:	68fb      	ldr	r3, [r7, #12]
 8103578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810357c:	2b01      	cmp	r3, #1
 810357e:	d101      	bne.n	8103584 <HAL_I2C_IsDeviceReady+0x44>
 8103580:	2302      	movs	r3, #2
 8103582:	e0e0      	b.n	8103746 <HAL_I2C_IsDeviceReady+0x206>
 8103584:	68fb      	ldr	r3, [r7, #12]
 8103586:	2201      	movs	r2, #1
 8103588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810358c:	68fb      	ldr	r3, [r7, #12]
 810358e:	2224      	movs	r2, #36	; 0x24
 8103590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103594:	68fb      	ldr	r3, [r7, #12]
 8103596:	2200      	movs	r2, #0
 8103598:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 810359a:	68fb      	ldr	r3, [r7, #12]
 810359c:	68db      	ldr	r3, [r3, #12]
 810359e:	2b01      	cmp	r3, #1
 81035a0:	d107      	bne.n	81035b2 <HAL_I2C_IsDeviceReady+0x72>
 81035a2:	897b      	ldrh	r3, [r7, #10]
 81035a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81035a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81035ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 81035b0:	e004      	b.n	81035bc <HAL_I2C_IsDeviceReady+0x7c>
 81035b2:	897b      	ldrh	r3, [r7, #10]
 81035b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81035b8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 81035bc:	68fa      	ldr	r2, [r7, #12]
 81035be:	6812      	ldr	r2, [r2, #0]
 81035c0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 81035c2:	f7ff f9e3 	bl	810298c <HAL_GetTick>
 81035c6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 81035c8:	68fb      	ldr	r3, [r7, #12]
 81035ca:	681b      	ldr	r3, [r3, #0]
 81035cc:	699b      	ldr	r3, [r3, #24]
 81035ce:	f003 0320 	and.w	r3, r3, #32
 81035d2:	2b20      	cmp	r3, #32
 81035d4:	bf0c      	ite	eq
 81035d6:	2301      	moveq	r3, #1
 81035d8:	2300      	movne	r3, #0
 81035da:	b2db      	uxtb	r3, r3
 81035dc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 81035de:	68fb      	ldr	r3, [r7, #12]
 81035e0:	681b      	ldr	r3, [r3, #0]
 81035e2:	699b      	ldr	r3, [r3, #24]
 81035e4:	f003 0310 	and.w	r3, r3, #16
 81035e8:	2b10      	cmp	r3, #16
 81035ea:	bf0c      	ite	eq
 81035ec:	2301      	moveq	r3, #1
 81035ee:	2300      	movne	r3, #0
 81035f0:	b2db      	uxtb	r3, r3
 81035f2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 81035f4:	e034      	b.n	8103660 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 81035f6:	683b      	ldr	r3, [r7, #0]
 81035f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81035fc:	d01a      	beq.n	8103634 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81035fe:	f7ff f9c5 	bl	810298c <HAL_GetTick>
 8103602:	4602      	mov	r2, r0
 8103604:	69bb      	ldr	r3, [r7, #24]
 8103606:	1ad3      	subs	r3, r2, r3
 8103608:	683a      	ldr	r2, [r7, #0]
 810360a:	429a      	cmp	r2, r3
 810360c:	d302      	bcc.n	8103614 <HAL_I2C_IsDeviceReady+0xd4>
 810360e:	683b      	ldr	r3, [r7, #0]
 8103610:	2b00      	cmp	r3, #0
 8103612:	d10f      	bne.n	8103634 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8103614:	68fb      	ldr	r3, [r7, #12]
 8103616:	2220      	movs	r2, #32
 8103618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810361c:	68fb      	ldr	r3, [r7, #12]
 810361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103620:	f043 0220 	orr.w	r2, r3, #32
 8103624:	68fb      	ldr	r3, [r7, #12]
 8103626:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8103628:	68fb      	ldr	r3, [r7, #12]
 810362a:	2200      	movs	r2, #0
 810362c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8103630:	2301      	movs	r3, #1
 8103632:	e088      	b.n	8103746 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8103634:	68fb      	ldr	r3, [r7, #12]
 8103636:	681b      	ldr	r3, [r3, #0]
 8103638:	699b      	ldr	r3, [r3, #24]
 810363a:	f003 0320 	and.w	r3, r3, #32
 810363e:	2b20      	cmp	r3, #32
 8103640:	bf0c      	ite	eq
 8103642:	2301      	moveq	r3, #1
 8103644:	2300      	movne	r3, #0
 8103646:	b2db      	uxtb	r3, r3
 8103648:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 810364a:	68fb      	ldr	r3, [r7, #12]
 810364c:	681b      	ldr	r3, [r3, #0]
 810364e:	699b      	ldr	r3, [r3, #24]
 8103650:	f003 0310 	and.w	r3, r3, #16
 8103654:	2b10      	cmp	r3, #16
 8103656:	bf0c      	ite	eq
 8103658:	2301      	moveq	r3, #1
 810365a:	2300      	movne	r3, #0
 810365c:	b2db      	uxtb	r3, r3
 810365e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8103660:	7ffb      	ldrb	r3, [r7, #31]
 8103662:	2b00      	cmp	r3, #0
 8103664:	d102      	bne.n	810366c <HAL_I2C_IsDeviceReady+0x12c>
 8103666:	7fbb      	ldrb	r3, [r7, #30]
 8103668:	2b00      	cmp	r3, #0
 810366a:	d0c4      	beq.n	81035f6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 810366c:	68fb      	ldr	r3, [r7, #12]
 810366e:	681b      	ldr	r3, [r3, #0]
 8103670:	699b      	ldr	r3, [r3, #24]
 8103672:	f003 0310 	and.w	r3, r3, #16
 8103676:	2b10      	cmp	r3, #16
 8103678:	d01a      	beq.n	81036b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 810367a:	69bb      	ldr	r3, [r7, #24]
 810367c:	9300      	str	r3, [sp, #0]
 810367e:	683b      	ldr	r3, [r7, #0]
 8103680:	2200      	movs	r2, #0
 8103682:	2120      	movs	r1, #32
 8103684:	68f8      	ldr	r0, [r7, #12]
 8103686:	f000 f8a0 	bl	81037ca <I2C_WaitOnFlagUntilTimeout>
 810368a:	4603      	mov	r3, r0
 810368c:	2b00      	cmp	r3, #0
 810368e:	d001      	beq.n	8103694 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8103690:	2301      	movs	r3, #1
 8103692:	e058      	b.n	8103746 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103694:	68fb      	ldr	r3, [r7, #12]
 8103696:	681b      	ldr	r3, [r3, #0]
 8103698:	2220      	movs	r2, #32
 810369a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 810369c:	68fb      	ldr	r3, [r7, #12]
 810369e:	2220      	movs	r2, #32
 81036a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81036a4:	68fb      	ldr	r3, [r7, #12]
 81036a6:	2200      	movs	r2, #0
 81036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 81036ac:	2300      	movs	r3, #0
 81036ae:	e04a      	b.n	8103746 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 81036b0:	69bb      	ldr	r3, [r7, #24]
 81036b2:	9300      	str	r3, [sp, #0]
 81036b4:	683b      	ldr	r3, [r7, #0]
 81036b6:	2200      	movs	r2, #0
 81036b8:	2120      	movs	r1, #32
 81036ba:	68f8      	ldr	r0, [r7, #12]
 81036bc:	f000 f885 	bl	81037ca <I2C_WaitOnFlagUntilTimeout>
 81036c0:	4603      	mov	r3, r0
 81036c2:	2b00      	cmp	r3, #0
 81036c4:	d001      	beq.n	81036ca <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 81036c6:	2301      	movs	r3, #1
 81036c8:	e03d      	b.n	8103746 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81036ca:	68fb      	ldr	r3, [r7, #12]
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	2210      	movs	r2, #16
 81036d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81036d2:	68fb      	ldr	r3, [r7, #12]
 81036d4:	681b      	ldr	r3, [r3, #0]
 81036d6:	2220      	movs	r2, #32
 81036d8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 81036da:	697b      	ldr	r3, [r7, #20]
 81036dc:	687a      	ldr	r2, [r7, #4]
 81036de:	429a      	cmp	r2, r3
 81036e0:	d118      	bne.n	8103714 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81036e2:	68fb      	ldr	r3, [r7, #12]
 81036e4:	681b      	ldr	r3, [r3, #0]
 81036e6:	685a      	ldr	r2, [r3, #4]
 81036e8:	68fb      	ldr	r3, [r7, #12]
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81036f0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 81036f2:	69bb      	ldr	r3, [r7, #24]
 81036f4:	9300      	str	r3, [sp, #0]
 81036f6:	683b      	ldr	r3, [r7, #0]
 81036f8:	2200      	movs	r2, #0
 81036fa:	2120      	movs	r1, #32
 81036fc:	68f8      	ldr	r0, [r7, #12]
 81036fe:	f000 f864 	bl	81037ca <I2C_WaitOnFlagUntilTimeout>
 8103702:	4603      	mov	r3, r0
 8103704:	2b00      	cmp	r3, #0
 8103706:	d001      	beq.n	810370c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8103708:	2301      	movs	r3, #1
 810370a:	e01c      	b.n	8103746 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810370c:	68fb      	ldr	r3, [r7, #12]
 810370e:	681b      	ldr	r3, [r3, #0]
 8103710:	2220      	movs	r2, #32
 8103712:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8103714:	697b      	ldr	r3, [r7, #20]
 8103716:	3301      	adds	r3, #1
 8103718:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 810371a:	697b      	ldr	r3, [r7, #20]
 810371c:	687a      	ldr	r2, [r7, #4]
 810371e:	429a      	cmp	r2, r3
 8103720:	f63f af3b 	bhi.w	810359a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8103724:	68fb      	ldr	r3, [r7, #12]
 8103726:	2220      	movs	r2, #32
 8103728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810372c:	68fb      	ldr	r3, [r7, #12]
 810372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103730:	f043 0220 	orr.w	r2, r3, #32
 8103734:	68fb      	ldr	r3, [r7, #12]
 8103736:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103738:	68fb      	ldr	r3, [r7, #12]
 810373a:	2200      	movs	r2, #0
 810373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8103740:	2301      	movs	r3, #1
 8103742:	e000      	b.n	8103746 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8103744:	2302      	movs	r3, #2
  }
}
 8103746:	4618      	mov	r0, r3
 8103748:	3720      	adds	r7, #32
 810374a:	46bd      	mov	sp, r7
 810374c:	bd80      	pop	{r7, pc}

0810374e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 810374e:	b480      	push	{r7}
 8103750:	b083      	sub	sp, #12
 8103752:	af00      	add	r7, sp, #0
 8103754:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810375c:	b2db      	uxtb	r3, r3
}
 810375e:	4618      	mov	r0, r3
 8103760:	370c      	adds	r7, #12
 8103762:	46bd      	mov	sp, r7
 8103764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103768:	4770      	bx	lr

0810376a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 810376a:	b480      	push	{r7}
 810376c:	b083      	sub	sp, #12
 810376e:	af00      	add	r7, sp, #0
 8103770:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8103772:	687b      	ldr	r3, [r7, #4]
 8103774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8103776:	4618      	mov	r0, r3
 8103778:	370c      	adds	r7, #12
 810377a:	46bd      	mov	sp, r7
 810377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103780:	4770      	bx	lr

08103782 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8103782:	b480      	push	{r7}
 8103784:	b083      	sub	sp, #12
 8103786:	af00      	add	r7, sp, #0
 8103788:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 810378a:	687b      	ldr	r3, [r7, #4]
 810378c:	681b      	ldr	r3, [r3, #0]
 810378e:	699b      	ldr	r3, [r3, #24]
 8103790:	f003 0302 	and.w	r3, r3, #2
 8103794:	2b02      	cmp	r3, #2
 8103796:	d103      	bne.n	81037a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	681b      	ldr	r3, [r3, #0]
 810379c:	2200      	movs	r2, #0
 810379e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	681b      	ldr	r3, [r3, #0]
 81037a4:	699b      	ldr	r3, [r3, #24]
 81037a6:	f003 0301 	and.w	r3, r3, #1
 81037aa:	2b01      	cmp	r3, #1
 81037ac:	d007      	beq.n	81037be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	681b      	ldr	r3, [r3, #0]
 81037b2:	699a      	ldr	r2, [r3, #24]
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	681b      	ldr	r3, [r3, #0]
 81037b8:	f042 0201 	orr.w	r2, r2, #1
 81037bc:	619a      	str	r2, [r3, #24]
  }
}
 81037be:	bf00      	nop
 81037c0:	370c      	adds	r7, #12
 81037c2:	46bd      	mov	sp, r7
 81037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037c8:	4770      	bx	lr

081037ca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81037ca:	b580      	push	{r7, lr}
 81037cc:	b084      	sub	sp, #16
 81037ce:	af00      	add	r7, sp, #0
 81037d0:	60f8      	str	r0, [r7, #12]
 81037d2:	60b9      	str	r1, [r7, #8]
 81037d4:	603b      	str	r3, [r7, #0]
 81037d6:	4613      	mov	r3, r2
 81037d8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81037da:	e031      	b.n	8103840 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81037dc:	683b      	ldr	r3, [r7, #0]
 81037de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81037e2:	d02d      	beq.n	8103840 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81037e4:	f7ff f8d2 	bl	810298c <HAL_GetTick>
 81037e8:	4602      	mov	r2, r0
 81037ea:	69bb      	ldr	r3, [r7, #24]
 81037ec:	1ad3      	subs	r3, r2, r3
 81037ee:	683a      	ldr	r2, [r7, #0]
 81037f0:	429a      	cmp	r2, r3
 81037f2:	d302      	bcc.n	81037fa <I2C_WaitOnFlagUntilTimeout+0x30>
 81037f4:	683b      	ldr	r3, [r7, #0]
 81037f6:	2b00      	cmp	r3, #0
 81037f8:	d122      	bne.n	8103840 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 81037fa:	68fb      	ldr	r3, [r7, #12]
 81037fc:	681b      	ldr	r3, [r3, #0]
 81037fe:	699a      	ldr	r2, [r3, #24]
 8103800:	68bb      	ldr	r3, [r7, #8]
 8103802:	4013      	ands	r3, r2
 8103804:	68ba      	ldr	r2, [r7, #8]
 8103806:	429a      	cmp	r2, r3
 8103808:	bf0c      	ite	eq
 810380a:	2301      	moveq	r3, #1
 810380c:	2300      	movne	r3, #0
 810380e:	b2db      	uxtb	r3, r3
 8103810:	461a      	mov	r2, r3
 8103812:	79fb      	ldrb	r3, [r7, #7]
 8103814:	429a      	cmp	r2, r3
 8103816:	d113      	bne.n	8103840 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103818:	68fb      	ldr	r3, [r7, #12]
 810381a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810381c:	f043 0220 	orr.w	r2, r3, #32
 8103820:	68fb      	ldr	r3, [r7, #12]
 8103822:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8103824:	68fb      	ldr	r3, [r7, #12]
 8103826:	2220      	movs	r2, #32
 8103828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810382c:	68fb      	ldr	r3, [r7, #12]
 810382e:	2200      	movs	r2, #0
 8103830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8103834:	68fb      	ldr	r3, [r7, #12]
 8103836:	2200      	movs	r2, #0
 8103838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 810383c:	2301      	movs	r3, #1
 810383e:	e00f      	b.n	8103860 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103840:	68fb      	ldr	r3, [r7, #12]
 8103842:	681b      	ldr	r3, [r3, #0]
 8103844:	699a      	ldr	r2, [r3, #24]
 8103846:	68bb      	ldr	r3, [r7, #8]
 8103848:	4013      	ands	r3, r2
 810384a:	68ba      	ldr	r2, [r7, #8]
 810384c:	429a      	cmp	r2, r3
 810384e:	bf0c      	ite	eq
 8103850:	2301      	moveq	r3, #1
 8103852:	2300      	movne	r3, #0
 8103854:	b2db      	uxtb	r3, r3
 8103856:	461a      	mov	r2, r3
 8103858:	79fb      	ldrb	r3, [r7, #7]
 810385a:	429a      	cmp	r2, r3
 810385c:	d0be      	beq.n	81037dc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810385e:	2300      	movs	r3, #0
}
 8103860:	4618      	mov	r0, r3
 8103862:	3710      	adds	r7, #16
 8103864:	46bd      	mov	sp, r7
 8103866:	bd80      	pop	{r7, pc}

08103868 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103868:	b580      	push	{r7, lr}
 810386a:	b084      	sub	sp, #16
 810386c:	af00      	add	r7, sp, #0
 810386e:	60f8      	str	r0, [r7, #12]
 8103870:	60b9      	str	r1, [r7, #8]
 8103872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103874:	e033      	b.n	81038de <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103876:	687a      	ldr	r2, [r7, #4]
 8103878:	68b9      	ldr	r1, [r7, #8]
 810387a:	68f8      	ldr	r0, [r7, #12]
 810387c:	f000 f900 	bl	8103a80 <I2C_IsErrorOccurred>
 8103880:	4603      	mov	r3, r0
 8103882:	2b00      	cmp	r3, #0
 8103884:	d001      	beq.n	810388a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103886:	2301      	movs	r3, #1
 8103888:	e031      	b.n	81038ee <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810388a:	68bb      	ldr	r3, [r7, #8]
 810388c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8103890:	d025      	beq.n	81038de <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103892:	f7ff f87b 	bl	810298c <HAL_GetTick>
 8103896:	4602      	mov	r2, r0
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	1ad3      	subs	r3, r2, r3
 810389c:	68ba      	ldr	r2, [r7, #8]
 810389e:	429a      	cmp	r2, r3
 81038a0:	d302      	bcc.n	81038a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81038a2:	68bb      	ldr	r3, [r7, #8]
 81038a4:	2b00      	cmp	r3, #0
 81038a6:	d11a      	bne.n	81038de <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 81038a8:	68fb      	ldr	r3, [r7, #12]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	699b      	ldr	r3, [r3, #24]
 81038ae:	f003 0302 	and.w	r3, r3, #2
 81038b2:	2b02      	cmp	r3, #2
 81038b4:	d013      	beq.n	81038de <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81038b6:	68fb      	ldr	r3, [r7, #12]
 81038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81038ba:	f043 0220 	orr.w	r2, r3, #32
 81038be:	68fb      	ldr	r3, [r7, #12]
 81038c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81038c2:	68fb      	ldr	r3, [r7, #12]
 81038c4:	2220      	movs	r2, #32
 81038c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81038ca:	68fb      	ldr	r3, [r7, #12]
 81038cc:	2200      	movs	r2, #0
 81038ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81038d2:	68fb      	ldr	r3, [r7, #12]
 81038d4:	2200      	movs	r2, #0
 81038d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 81038da:	2301      	movs	r3, #1
 81038dc:	e007      	b.n	81038ee <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81038de:	68fb      	ldr	r3, [r7, #12]
 81038e0:	681b      	ldr	r3, [r3, #0]
 81038e2:	699b      	ldr	r3, [r3, #24]
 81038e4:	f003 0302 	and.w	r3, r3, #2
 81038e8:	2b02      	cmp	r3, #2
 81038ea:	d1c4      	bne.n	8103876 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 81038ec:	2300      	movs	r3, #0
}
 81038ee:	4618      	mov	r0, r3
 81038f0:	3710      	adds	r7, #16
 81038f2:	46bd      	mov	sp, r7
 81038f4:	bd80      	pop	{r7, pc}

081038f6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81038f6:	b580      	push	{r7, lr}
 81038f8:	b084      	sub	sp, #16
 81038fa:	af00      	add	r7, sp, #0
 81038fc:	60f8      	str	r0, [r7, #12]
 81038fe:	60b9      	str	r1, [r7, #8]
 8103900:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103902:	e02f      	b.n	8103964 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103904:	687a      	ldr	r2, [r7, #4]
 8103906:	68b9      	ldr	r1, [r7, #8]
 8103908:	68f8      	ldr	r0, [r7, #12]
 810390a:	f000 f8b9 	bl	8103a80 <I2C_IsErrorOccurred>
 810390e:	4603      	mov	r3, r0
 8103910:	2b00      	cmp	r3, #0
 8103912:	d001      	beq.n	8103918 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103914:	2301      	movs	r3, #1
 8103916:	e02d      	b.n	8103974 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103918:	f7ff f838 	bl	810298c <HAL_GetTick>
 810391c:	4602      	mov	r2, r0
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	1ad3      	subs	r3, r2, r3
 8103922:	68ba      	ldr	r2, [r7, #8]
 8103924:	429a      	cmp	r2, r3
 8103926:	d302      	bcc.n	810392e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8103928:	68bb      	ldr	r3, [r7, #8]
 810392a:	2b00      	cmp	r3, #0
 810392c:	d11a      	bne.n	8103964 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 810392e:	68fb      	ldr	r3, [r7, #12]
 8103930:	681b      	ldr	r3, [r3, #0]
 8103932:	699b      	ldr	r3, [r3, #24]
 8103934:	f003 0320 	and.w	r3, r3, #32
 8103938:	2b20      	cmp	r3, #32
 810393a:	d013      	beq.n	8103964 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810393c:	68fb      	ldr	r3, [r7, #12]
 810393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103940:	f043 0220 	orr.w	r2, r3, #32
 8103944:	68fb      	ldr	r3, [r7, #12]
 8103946:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103948:	68fb      	ldr	r3, [r7, #12]
 810394a:	2220      	movs	r2, #32
 810394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103950:	68fb      	ldr	r3, [r7, #12]
 8103952:	2200      	movs	r2, #0
 8103954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103958:	68fb      	ldr	r3, [r7, #12]
 810395a:	2200      	movs	r2, #0
 810395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8103960:	2301      	movs	r3, #1
 8103962:	e007      	b.n	8103974 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103964:	68fb      	ldr	r3, [r7, #12]
 8103966:	681b      	ldr	r3, [r3, #0]
 8103968:	699b      	ldr	r3, [r3, #24]
 810396a:	f003 0320 	and.w	r3, r3, #32
 810396e:	2b20      	cmp	r3, #32
 8103970:	d1c8      	bne.n	8103904 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8103972:	2300      	movs	r3, #0
}
 8103974:	4618      	mov	r0, r3
 8103976:	3710      	adds	r7, #16
 8103978:	46bd      	mov	sp, r7
 810397a:	bd80      	pop	{r7, pc}

0810397c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810397c:	b580      	push	{r7, lr}
 810397e:	b084      	sub	sp, #16
 8103980:	af00      	add	r7, sp, #0
 8103982:	60f8      	str	r0, [r7, #12]
 8103984:	60b9      	str	r1, [r7, #8]
 8103986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8103988:	e06b      	b.n	8103a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810398a:	687a      	ldr	r2, [r7, #4]
 810398c:	68b9      	ldr	r1, [r7, #8]
 810398e:	68f8      	ldr	r0, [r7, #12]
 8103990:	f000 f876 	bl	8103a80 <I2C_IsErrorOccurred>
 8103994:	4603      	mov	r3, r0
 8103996:	2b00      	cmp	r3, #0
 8103998:	d001      	beq.n	810399e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810399a:	2301      	movs	r3, #1
 810399c:	e069      	b.n	8103a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 810399e:	68fb      	ldr	r3, [r7, #12]
 81039a0:	681b      	ldr	r3, [r3, #0]
 81039a2:	699b      	ldr	r3, [r3, #24]
 81039a4:	f003 0320 	and.w	r3, r3, #32
 81039a8:	2b20      	cmp	r3, #32
 81039aa:	d138      	bne.n	8103a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 81039ac:	68fb      	ldr	r3, [r7, #12]
 81039ae:	681b      	ldr	r3, [r3, #0]
 81039b0:	699b      	ldr	r3, [r3, #24]
 81039b2:	f003 0304 	and.w	r3, r3, #4
 81039b6:	2b04      	cmp	r3, #4
 81039b8:	d105      	bne.n	81039c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 81039ba:	68fb      	ldr	r3, [r7, #12]
 81039bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81039be:	2b00      	cmp	r3, #0
 81039c0:	d001      	beq.n	81039c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 81039c2:	2300      	movs	r3, #0
 81039c4:	e055      	b.n	8103a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81039c6:	68fb      	ldr	r3, [r7, #12]
 81039c8:	681b      	ldr	r3, [r3, #0]
 81039ca:	699b      	ldr	r3, [r3, #24]
 81039cc:	f003 0310 	and.w	r3, r3, #16
 81039d0:	2b10      	cmp	r3, #16
 81039d2:	d107      	bne.n	81039e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81039d4:	68fb      	ldr	r3, [r7, #12]
 81039d6:	681b      	ldr	r3, [r3, #0]
 81039d8:	2210      	movs	r2, #16
 81039da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 81039dc:	68fb      	ldr	r3, [r7, #12]
 81039de:	2204      	movs	r2, #4
 81039e0:	645a      	str	r2, [r3, #68]	; 0x44
 81039e2:	e002      	b.n	81039ea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81039e4:	68fb      	ldr	r3, [r7, #12]
 81039e6:	2200      	movs	r2, #0
 81039e8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81039ea:	68fb      	ldr	r3, [r7, #12]
 81039ec:	681b      	ldr	r3, [r3, #0]
 81039ee:	2220      	movs	r2, #32
 81039f0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 81039f2:	68fb      	ldr	r3, [r7, #12]
 81039f4:	681b      	ldr	r3, [r3, #0]
 81039f6:	6859      	ldr	r1, [r3, #4]
 81039f8:	68fb      	ldr	r3, [r7, #12]
 81039fa:	681a      	ldr	r2, [r3, #0]
 81039fc:	4b1f      	ldr	r3, [pc, #124]	; (8103a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 81039fe:	400b      	ands	r3, r1
 8103a00:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8103a02:	68fb      	ldr	r3, [r7, #12]
 8103a04:	2220      	movs	r2, #32
 8103a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103a0a:	68fb      	ldr	r3, [r7, #12]
 8103a0c:	2200      	movs	r2, #0
 8103a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103a12:	68fb      	ldr	r3, [r7, #12]
 8103a14:	2200      	movs	r2, #0
 8103a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8103a1a:	2301      	movs	r3, #1
 8103a1c:	e029      	b.n	8103a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103a1e:	f7fe ffb5 	bl	810298c <HAL_GetTick>
 8103a22:	4602      	mov	r2, r0
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	1ad3      	subs	r3, r2, r3
 8103a28:	68ba      	ldr	r2, [r7, #8]
 8103a2a:	429a      	cmp	r2, r3
 8103a2c:	d302      	bcc.n	8103a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8103a2e:	68bb      	ldr	r3, [r7, #8]
 8103a30:	2b00      	cmp	r3, #0
 8103a32:	d116      	bne.n	8103a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8103a34:	68fb      	ldr	r3, [r7, #12]
 8103a36:	681b      	ldr	r3, [r3, #0]
 8103a38:	699b      	ldr	r3, [r3, #24]
 8103a3a:	f003 0304 	and.w	r3, r3, #4
 8103a3e:	2b04      	cmp	r3, #4
 8103a40:	d00f      	beq.n	8103a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103a42:	68fb      	ldr	r3, [r7, #12]
 8103a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103a46:	f043 0220 	orr.w	r2, r3, #32
 8103a4a:	68fb      	ldr	r3, [r7, #12]
 8103a4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103a4e:	68fb      	ldr	r3, [r7, #12]
 8103a50:	2220      	movs	r2, #32
 8103a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103a56:	68fb      	ldr	r3, [r7, #12]
 8103a58:	2200      	movs	r2, #0
 8103a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8103a5e:	2301      	movs	r3, #1
 8103a60:	e007      	b.n	8103a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8103a62:	68fb      	ldr	r3, [r7, #12]
 8103a64:	681b      	ldr	r3, [r3, #0]
 8103a66:	699b      	ldr	r3, [r3, #24]
 8103a68:	f003 0304 	and.w	r3, r3, #4
 8103a6c:	2b04      	cmp	r3, #4
 8103a6e:	d18c      	bne.n	810398a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8103a70:	2300      	movs	r3, #0
}
 8103a72:	4618      	mov	r0, r3
 8103a74:	3710      	adds	r7, #16
 8103a76:	46bd      	mov	sp, r7
 8103a78:	bd80      	pop	{r7, pc}
 8103a7a:	bf00      	nop
 8103a7c:	fe00e800 	.word	0xfe00e800

08103a80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8103a80:	b580      	push	{r7, lr}
 8103a82:	b08a      	sub	sp, #40	; 0x28
 8103a84:	af00      	add	r7, sp, #0
 8103a86:	60f8      	str	r0, [r7, #12]
 8103a88:	60b9      	str	r1, [r7, #8]
 8103a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103a8c:	2300      	movs	r3, #0
 8103a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8103a92:	68fb      	ldr	r3, [r7, #12]
 8103a94:	681b      	ldr	r3, [r3, #0]
 8103a96:	699b      	ldr	r3, [r3, #24]
 8103a98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8103a9a:	2300      	movs	r3, #0
 8103a9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8103aa2:	69bb      	ldr	r3, [r7, #24]
 8103aa4:	f003 0310 	and.w	r3, r3, #16
 8103aa8:	2b00      	cmp	r3, #0
 8103aaa:	d068      	beq.n	8103b7e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8103aac:	68fb      	ldr	r3, [r7, #12]
 8103aae:	681b      	ldr	r3, [r3, #0]
 8103ab0:	2210      	movs	r2, #16
 8103ab2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8103ab4:	e049      	b.n	8103b4a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8103ab6:	68bb      	ldr	r3, [r7, #8]
 8103ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8103abc:	d045      	beq.n	8103b4a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8103abe:	f7fe ff65 	bl	810298c <HAL_GetTick>
 8103ac2:	4602      	mov	r2, r0
 8103ac4:	69fb      	ldr	r3, [r7, #28]
 8103ac6:	1ad3      	subs	r3, r2, r3
 8103ac8:	68ba      	ldr	r2, [r7, #8]
 8103aca:	429a      	cmp	r2, r3
 8103acc:	d302      	bcc.n	8103ad4 <I2C_IsErrorOccurred+0x54>
 8103ace:	68bb      	ldr	r3, [r7, #8]
 8103ad0:	2b00      	cmp	r3, #0
 8103ad2:	d13a      	bne.n	8103b4a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8103ad4:	68fb      	ldr	r3, [r7, #12]
 8103ad6:	681b      	ldr	r3, [r3, #0]
 8103ad8:	685b      	ldr	r3, [r3, #4]
 8103ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103ade:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8103ae0:	68fb      	ldr	r3, [r7, #12]
 8103ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8103ae6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8103ae8:	68fb      	ldr	r3, [r7, #12]
 8103aea:	681b      	ldr	r3, [r3, #0]
 8103aec:	699b      	ldr	r3, [r3, #24]
 8103aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103af6:	d121      	bne.n	8103b3c <I2C_IsErrorOccurred+0xbc>
 8103af8:	697b      	ldr	r3, [r7, #20]
 8103afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103afe:	d01d      	beq.n	8103b3c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8103b00:	7cfb      	ldrb	r3, [r7, #19]
 8103b02:	2b20      	cmp	r3, #32
 8103b04:	d01a      	beq.n	8103b3c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8103b06:	68fb      	ldr	r3, [r7, #12]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	685a      	ldr	r2, [r3, #4]
 8103b0c:	68fb      	ldr	r3, [r7, #12]
 8103b0e:	681b      	ldr	r3, [r3, #0]
 8103b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8103b14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8103b16:	f7fe ff39 	bl	810298c <HAL_GetTick>
 8103b1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103b1c:	e00e      	b.n	8103b3c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8103b1e:	f7fe ff35 	bl	810298c <HAL_GetTick>
 8103b22:	4602      	mov	r2, r0
 8103b24:	69fb      	ldr	r3, [r7, #28]
 8103b26:	1ad3      	subs	r3, r2, r3
 8103b28:	2b19      	cmp	r3, #25
 8103b2a:	d907      	bls.n	8103b3c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8103b2c:	6a3b      	ldr	r3, [r7, #32]
 8103b2e:	f043 0320 	orr.w	r3, r3, #32
 8103b32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8103b34:	2301      	movs	r3, #1
 8103b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8103b3a:	e006      	b.n	8103b4a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103b3c:	68fb      	ldr	r3, [r7, #12]
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	699b      	ldr	r3, [r3, #24]
 8103b42:	f003 0320 	and.w	r3, r3, #32
 8103b46:	2b20      	cmp	r3, #32
 8103b48:	d1e9      	bne.n	8103b1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8103b4a:	68fb      	ldr	r3, [r7, #12]
 8103b4c:	681b      	ldr	r3, [r3, #0]
 8103b4e:	699b      	ldr	r3, [r3, #24]
 8103b50:	f003 0320 	and.w	r3, r3, #32
 8103b54:	2b20      	cmp	r3, #32
 8103b56:	d003      	beq.n	8103b60 <I2C_IsErrorOccurred+0xe0>
 8103b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103b5c:	2b00      	cmp	r3, #0
 8103b5e:	d0aa      	beq.n	8103ab6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8103b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103b64:	2b00      	cmp	r3, #0
 8103b66:	d103      	bne.n	8103b70 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103b68:	68fb      	ldr	r3, [r7, #12]
 8103b6a:	681b      	ldr	r3, [r3, #0]
 8103b6c:	2220      	movs	r2, #32
 8103b6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8103b70:	6a3b      	ldr	r3, [r7, #32]
 8103b72:	f043 0304 	orr.w	r3, r3, #4
 8103b76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8103b78:	2301      	movs	r3, #1
 8103b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8103b7e:	68fb      	ldr	r3, [r7, #12]
 8103b80:	681b      	ldr	r3, [r3, #0]
 8103b82:	699b      	ldr	r3, [r3, #24]
 8103b84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8103b86:	69bb      	ldr	r3, [r7, #24]
 8103b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103b8c:	2b00      	cmp	r3, #0
 8103b8e:	d00b      	beq.n	8103ba8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8103b90:	6a3b      	ldr	r3, [r7, #32]
 8103b92:	f043 0301 	orr.w	r3, r3, #1
 8103b96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8103b98:	68fb      	ldr	r3, [r7, #12]
 8103b9a:	681b      	ldr	r3, [r3, #0]
 8103b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103ba0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103ba2:	2301      	movs	r3, #1
 8103ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8103ba8:	69bb      	ldr	r3, [r7, #24]
 8103baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103bae:	2b00      	cmp	r3, #0
 8103bb0:	d00b      	beq.n	8103bca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8103bb2:	6a3b      	ldr	r3, [r7, #32]
 8103bb4:	f043 0308 	orr.w	r3, r3, #8
 8103bb8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8103bba:	68fb      	ldr	r3, [r7, #12]
 8103bbc:	681b      	ldr	r3, [r3, #0]
 8103bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103bc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103bc4:	2301      	movs	r3, #1
 8103bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8103bca:	69bb      	ldr	r3, [r7, #24]
 8103bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103bd0:	2b00      	cmp	r3, #0
 8103bd2:	d00b      	beq.n	8103bec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8103bd4:	6a3b      	ldr	r3, [r7, #32]
 8103bd6:	f043 0302 	orr.w	r3, r3, #2
 8103bda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8103bdc:	68fb      	ldr	r3, [r7, #12]
 8103bde:	681b      	ldr	r3, [r3, #0]
 8103be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103be4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103be6:	2301      	movs	r3, #1
 8103be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8103bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103bf0:	2b00      	cmp	r3, #0
 8103bf2:	d01c      	beq.n	8103c2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8103bf4:	68f8      	ldr	r0, [r7, #12]
 8103bf6:	f7ff fdc4 	bl	8103782 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103bfa:	68fb      	ldr	r3, [r7, #12]
 8103bfc:	681b      	ldr	r3, [r3, #0]
 8103bfe:	6859      	ldr	r1, [r3, #4]
 8103c00:	68fb      	ldr	r3, [r7, #12]
 8103c02:	681a      	ldr	r2, [r3, #0]
 8103c04:	4b0d      	ldr	r3, [pc, #52]	; (8103c3c <I2C_IsErrorOccurred+0x1bc>)
 8103c06:	400b      	ands	r3, r1
 8103c08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8103c0a:	68fb      	ldr	r3, [r7, #12]
 8103c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8103c0e:	6a3b      	ldr	r3, [r7, #32]
 8103c10:	431a      	orrs	r2, r3
 8103c12:	68fb      	ldr	r3, [r7, #12]
 8103c14:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8103c16:	68fb      	ldr	r3, [r7, #12]
 8103c18:	2220      	movs	r2, #32
 8103c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8103c1e:	68fb      	ldr	r3, [r7, #12]
 8103c20:	2200      	movs	r2, #0
 8103c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103c26:	68fb      	ldr	r3, [r7, #12]
 8103c28:	2200      	movs	r2, #0
 8103c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8103c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8103c32:	4618      	mov	r0, r3
 8103c34:	3728      	adds	r7, #40	; 0x28
 8103c36:	46bd      	mov	sp, r7
 8103c38:	bd80      	pop	{r7, pc}
 8103c3a:	bf00      	nop
 8103c3c:	fe00e800 	.word	0xfe00e800

08103c40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8103c40:	b480      	push	{r7}
 8103c42:	b087      	sub	sp, #28
 8103c44:	af00      	add	r7, sp, #0
 8103c46:	60f8      	str	r0, [r7, #12]
 8103c48:	607b      	str	r3, [r7, #4]
 8103c4a:	460b      	mov	r3, r1
 8103c4c:	817b      	strh	r3, [r7, #10]
 8103c4e:	4613      	mov	r3, r2
 8103c50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103c52:	897b      	ldrh	r3, [r7, #10]
 8103c54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8103c58:	7a7b      	ldrb	r3, [r7, #9]
 8103c5a:	041b      	lsls	r3, r3, #16
 8103c5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103c60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103c66:	6a3b      	ldr	r3, [r7, #32]
 8103c68:	4313      	orrs	r3, r2
 8103c6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8103c6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8103c70:	68fb      	ldr	r3, [r7, #12]
 8103c72:	681b      	ldr	r3, [r3, #0]
 8103c74:	685a      	ldr	r2, [r3, #4]
 8103c76:	6a3b      	ldr	r3, [r7, #32]
 8103c78:	0d5b      	lsrs	r3, r3, #21
 8103c7a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8103c7e:	4b08      	ldr	r3, [pc, #32]	; (8103ca0 <I2C_TransferConfig+0x60>)
 8103c80:	430b      	orrs	r3, r1
 8103c82:	43db      	mvns	r3, r3
 8103c84:	ea02 0103 	and.w	r1, r2, r3
 8103c88:	68fb      	ldr	r3, [r7, #12]
 8103c8a:	681b      	ldr	r3, [r3, #0]
 8103c8c:	697a      	ldr	r2, [r7, #20]
 8103c8e:	430a      	orrs	r2, r1
 8103c90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8103c92:	bf00      	nop
 8103c94:	371c      	adds	r7, #28
 8103c96:	46bd      	mov	sp, r7
 8103c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c9c:	4770      	bx	lr
 8103c9e:	bf00      	nop
 8103ca0:	03ff63ff 	.word	0x03ff63ff

08103ca4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8103ca4:	b480      	push	{r7}
 8103ca6:	b083      	sub	sp, #12
 8103ca8:	af00      	add	r7, sp, #0
 8103caa:	6078      	str	r0, [r7, #4]
 8103cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103cb4:	b2db      	uxtb	r3, r3
 8103cb6:	2b20      	cmp	r3, #32
 8103cb8:	d138      	bne.n	8103d2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103cba:	687b      	ldr	r3, [r7, #4]
 8103cbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103cc0:	2b01      	cmp	r3, #1
 8103cc2:	d101      	bne.n	8103cc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8103cc4:	2302      	movs	r3, #2
 8103cc6:	e032      	b.n	8103d2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	2201      	movs	r2, #1
 8103ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	2224      	movs	r2, #36	; 0x24
 8103cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8103cd8:	687b      	ldr	r3, [r7, #4]
 8103cda:	681b      	ldr	r3, [r3, #0]
 8103cdc:	681a      	ldr	r2, [r3, #0]
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	681b      	ldr	r3, [r3, #0]
 8103ce2:	f022 0201 	bic.w	r2, r2, #1
 8103ce6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	681b      	ldr	r3, [r3, #0]
 8103cec:	681a      	ldr	r2, [r3, #0]
 8103cee:	687b      	ldr	r3, [r7, #4]
 8103cf0:	681b      	ldr	r3, [r3, #0]
 8103cf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8103cf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	681b      	ldr	r3, [r3, #0]
 8103cfc:	6819      	ldr	r1, [r3, #0]
 8103cfe:	687b      	ldr	r3, [r7, #4]
 8103d00:	681b      	ldr	r3, [r3, #0]
 8103d02:	683a      	ldr	r2, [r7, #0]
 8103d04:	430a      	orrs	r2, r1
 8103d06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	681b      	ldr	r3, [r3, #0]
 8103d0c:	681a      	ldr	r2, [r3, #0]
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	681b      	ldr	r3, [r3, #0]
 8103d12:	f042 0201 	orr.w	r2, r2, #1
 8103d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	2220      	movs	r2, #32
 8103d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103d20:	687b      	ldr	r3, [r7, #4]
 8103d22:	2200      	movs	r2, #0
 8103d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103d28:	2300      	movs	r3, #0
 8103d2a:	e000      	b.n	8103d2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8103d2c:	2302      	movs	r3, #2
  }
}
 8103d2e:	4618      	mov	r0, r3
 8103d30:	370c      	adds	r7, #12
 8103d32:	46bd      	mov	sp, r7
 8103d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d38:	4770      	bx	lr

08103d3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8103d3a:	b480      	push	{r7}
 8103d3c:	b085      	sub	sp, #20
 8103d3e:	af00      	add	r7, sp, #0
 8103d40:	6078      	str	r0, [r7, #4]
 8103d42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103d44:	687b      	ldr	r3, [r7, #4]
 8103d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103d4a:	b2db      	uxtb	r3, r3
 8103d4c:	2b20      	cmp	r3, #32
 8103d4e:	d139      	bne.n	8103dc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103d56:	2b01      	cmp	r3, #1
 8103d58:	d101      	bne.n	8103d5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8103d5a:	2302      	movs	r3, #2
 8103d5c:	e033      	b.n	8103dc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8103d5e:	687b      	ldr	r3, [r7, #4]
 8103d60:	2201      	movs	r2, #1
 8103d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	2224      	movs	r2, #36	; 0x24
 8103d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8103d6e:	687b      	ldr	r3, [r7, #4]
 8103d70:	681b      	ldr	r3, [r3, #0]
 8103d72:	681a      	ldr	r2, [r3, #0]
 8103d74:	687b      	ldr	r3, [r7, #4]
 8103d76:	681b      	ldr	r3, [r3, #0]
 8103d78:	f022 0201 	bic.w	r2, r2, #1
 8103d7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8103d7e:	687b      	ldr	r3, [r7, #4]
 8103d80:	681b      	ldr	r3, [r3, #0]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8103d86:	68fb      	ldr	r3, [r7, #12]
 8103d88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103d8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8103d8e:	683b      	ldr	r3, [r7, #0]
 8103d90:	021b      	lsls	r3, r3, #8
 8103d92:	68fa      	ldr	r2, [r7, #12]
 8103d94:	4313      	orrs	r3, r2
 8103d96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	681b      	ldr	r3, [r3, #0]
 8103d9c:	68fa      	ldr	r2, [r7, #12]
 8103d9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	681b      	ldr	r3, [r3, #0]
 8103da4:	681a      	ldr	r2, [r3, #0]
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	681b      	ldr	r3, [r3, #0]
 8103daa:	f042 0201 	orr.w	r2, r2, #1
 8103dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	2220      	movs	r2, #32
 8103db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103db8:	687b      	ldr	r3, [r7, #4]
 8103dba:	2200      	movs	r2, #0
 8103dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103dc0:	2300      	movs	r3, #0
 8103dc2:	e000      	b.n	8103dc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8103dc4:	2302      	movs	r3, #2
  }
}
 8103dc6:	4618      	mov	r0, r3
 8103dc8:	3714      	adds	r7, #20
 8103dca:	46bd      	mov	sp, r7
 8103dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dd0:	4770      	bx	lr
	...

08103dd4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103dd4:	b580      	push	{r7, lr}
 8103dd6:	b084      	sub	sp, #16
 8103dd8:	af00      	add	r7, sp, #0
 8103dda:	60f8      	str	r0, [r7, #12]
 8103ddc:	460b      	mov	r3, r1
 8103dde:	607a      	str	r2, [r7, #4]
 8103de0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103de2:	4b37      	ldr	r3, [pc, #220]	; (8103ec0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103de4:	681b      	ldr	r3, [r3, #0]
 8103de6:	f023 0201 	bic.w	r2, r3, #1
 8103dea:	4935      	ldr	r1, [pc, #212]	; (8103ec0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103dec:	68fb      	ldr	r3, [r7, #12]
 8103dee:	4313      	orrs	r3, r2
 8103df0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	2b00      	cmp	r3, #0
 8103df6:	d123      	bne.n	8103e40 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103df8:	f7fe ff14 	bl	8102c24 <HAL_GetCurrentCPUID>
 8103dfc:	4603      	mov	r3, r0
 8103dfe:	2b03      	cmp	r3, #3
 8103e00:	d158      	bne.n	8103eb4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103e02:	4b2f      	ldr	r3, [pc, #188]	; (8103ec0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103e04:	691b      	ldr	r3, [r3, #16]
 8103e06:	4a2e      	ldr	r2, [pc, #184]	; (8103ec0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103e08:	f023 0301 	bic.w	r3, r3, #1
 8103e0c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103e0e:	4b2d      	ldr	r3, [pc, #180]	; (8103ec4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103e10:	691b      	ldr	r3, [r3, #16]
 8103e12:	4a2c      	ldr	r2, [pc, #176]	; (8103ec4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103e14:	f043 0304 	orr.w	r3, r3, #4
 8103e18:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103e1a:	f3bf 8f4f 	dsb	sy
}
 8103e1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103e20:	f3bf 8f6f 	isb	sy
}
 8103e24:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103e26:	7afb      	ldrb	r3, [r7, #11]
 8103e28:	2b01      	cmp	r3, #1
 8103e2a:	d101      	bne.n	8103e30 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103e2c:	bf30      	wfi
 8103e2e:	e000      	b.n	8103e32 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103e30:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103e32:	4b24      	ldr	r3, [pc, #144]	; (8103ec4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103e34:	691b      	ldr	r3, [r3, #16]
 8103e36:	4a23      	ldr	r2, [pc, #140]	; (8103ec4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103e38:	f023 0304 	bic.w	r3, r3, #4
 8103e3c:	6113      	str	r3, [r2, #16]
 8103e3e:	e03c      	b.n	8103eba <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103e40:	687b      	ldr	r3, [r7, #4]
 8103e42:	2b01      	cmp	r3, #1
 8103e44:	d123      	bne.n	8103e8e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103e46:	f7fe feed 	bl	8102c24 <HAL_GetCurrentCPUID>
 8103e4a:	4603      	mov	r3, r0
 8103e4c:	2b01      	cmp	r3, #1
 8103e4e:	d133      	bne.n	8103eb8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103e50:	4b1b      	ldr	r3, [pc, #108]	; (8103ec0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103e52:	695b      	ldr	r3, [r3, #20]
 8103e54:	4a1a      	ldr	r2, [pc, #104]	; (8103ec0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103e56:	f023 0302 	bic.w	r3, r3, #2
 8103e5a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103e5c:	4b19      	ldr	r3, [pc, #100]	; (8103ec4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103e5e:	691b      	ldr	r3, [r3, #16]
 8103e60:	4a18      	ldr	r2, [pc, #96]	; (8103ec4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103e62:	f043 0304 	orr.w	r3, r3, #4
 8103e66:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103e68:	f3bf 8f4f 	dsb	sy
}
 8103e6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103e6e:	f3bf 8f6f 	isb	sy
}
 8103e72:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103e74:	7afb      	ldrb	r3, [r7, #11]
 8103e76:	2b01      	cmp	r3, #1
 8103e78:	d101      	bne.n	8103e7e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103e7a:	bf30      	wfi
 8103e7c:	e000      	b.n	8103e80 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103e7e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103e80:	4b10      	ldr	r3, [pc, #64]	; (8103ec4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103e82:	691b      	ldr	r3, [r3, #16]
 8103e84:	4a0f      	ldr	r2, [pc, #60]	; (8103ec4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103e86:	f023 0304 	bic.w	r3, r3, #4
 8103e8a:	6113      	str	r3, [r2, #16]
 8103e8c:	e015      	b.n	8103eba <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103e8e:	f7fe fec9 	bl	8102c24 <HAL_GetCurrentCPUID>
 8103e92:	4603      	mov	r3, r0
 8103e94:	2b03      	cmp	r3, #3
 8103e96:	d106      	bne.n	8103ea6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103e98:	4b09      	ldr	r3, [pc, #36]	; (8103ec0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103e9a:	691b      	ldr	r3, [r3, #16]
 8103e9c:	4a08      	ldr	r2, [pc, #32]	; (8103ec0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103e9e:	f023 0304 	bic.w	r3, r3, #4
 8103ea2:	6113      	str	r3, [r2, #16]
 8103ea4:	e009      	b.n	8103eba <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103ea6:	4b06      	ldr	r3, [pc, #24]	; (8103ec0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103ea8:	695b      	ldr	r3, [r3, #20]
 8103eaa:	4a05      	ldr	r2, [pc, #20]	; (8103ec0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103eac:	f023 0304 	bic.w	r3, r3, #4
 8103eb0:	6153      	str	r3, [r2, #20]
 8103eb2:	e002      	b.n	8103eba <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103eb4:	bf00      	nop
 8103eb6:	e000      	b.n	8103eba <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103eb8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103eba:	3710      	adds	r7, #16
 8103ebc:	46bd      	mov	sp, r7
 8103ebe:	bd80      	pop	{r7, pc}
 8103ec0:	58024800 	.word	0x58024800
 8103ec4:	e000ed00 	.word	0xe000ed00

08103ec8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103ec8:	b580      	push	{r7, lr}
 8103eca:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103ecc:	f7fe feaa 	bl	8102c24 <HAL_GetCurrentCPUID>
 8103ed0:	4603      	mov	r3, r0
 8103ed2:	2b03      	cmp	r3, #3
 8103ed4:	d101      	bne.n	8103eda <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103ed6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103ed8:	e001      	b.n	8103ede <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103eda:	bf40      	sev
    __WFE ();
 8103edc:	bf20      	wfe
}
 8103ede:	bf00      	nop
 8103ee0:	bd80      	pop	{r7, pc}
	...

08103ee4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8103ee4:	b580      	push	{r7, lr}
 8103ee6:	b08c      	sub	sp, #48	; 0x30
 8103ee8:	af00      	add	r7, sp, #0
 8103eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8103eec:	687b      	ldr	r3, [r7, #4]
 8103eee:	2b00      	cmp	r3, #0
 8103ef0:	d102      	bne.n	8103ef8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8103ef2:	2301      	movs	r3, #1
 8103ef4:	f000 bc4a 	b.w	810478c <HAL_RCC_OscConfig+0x8a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8103ef8:	687b      	ldr	r3, [r7, #4]
 8103efa:	681b      	ldr	r3, [r3, #0]
 8103efc:	f003 0301 	and.w	r3, r3, #1
 8103f00:	2b00      	cmp	r3, #0
 8103f02:	f000 8088 	beq.w	8104016 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8103f06:	4b99      	ldr	r3, [pc, #612]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103f08:	691b      	ldr	r3, [r3, #16]
 8103f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8103f10:	4b96      	ldr	r3, [pc, #600]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103f14:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8103f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103f18:	2b10      	cmp	r3, #16
 8103f1a:	d007      	beq.n	8103f2c <HAL_RCC_OscConfig+0x48>
 8103f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103f1e:	2b18      	cmp	r3, #24
 8103f20:	d111      	bne.n	8103f46 <HAL_RCC_OscConfig+0x62>
 8103f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103f24:	f003 0303 	and.w	r3, r3, #3
 8103f28:	2b02      	cmp	r3, #2
 8103f2a:	d10c      	bne.n	8103f46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8103f2c:	4b8f      	ldr	r3, [pc, #572]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103f2e:	681b      	ldr	r3, [r3, #0]
 8103f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103f34:	2b00      	cmp	r3, #0
 8103f36:	d06d      	beq.n	8104014 <HAL_RCC_OscConfig+0x130>
 8103f38:	687b      	ldr	r3, [r7, #4]
 8103f3a:	685b      	ldr	r3, [r3, #4]
 8103f3c:	2b00      	cmp	r3, #0
 8103f3e:	d169      	bne.n	8104014 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8103f40:	2301      	movs	r3, #1
 8103f42:	f000 bc23 	b.w	810478c <HAL_RCC_OscConfig+0x8a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8103f46:	687b      	ldr	r3, [r7, #4]
 8103f48:	685b      	ldr	r3, [r3, #4]
 8103f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103f4e:	d106      	bne.n	8103f5e <HAL_RCC_OscConfig+0x7a>
 8103f50:	4b86      	ldr	r3, [pc, #536]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103f52:	681b      	ldr	r3, [r3, #0]
 8103f54:	4a85      	ldr	r2, [pc, #532]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103f5a:	6013      	str	r3, [r2, #0]
 8103f5c:	e02e      	b.n	8103fbc <HAL_RCC_OscConfig+0xd8>
 8103f5e:	687b      	ldr	r3, [r7, #4]
 8103f60:	685b      	ldr	r3, [r3, #4]
 8103f62:	2b00      	cmp	r3, #0
 8103f64:	d10c      	bne.n	8103f80 <HAL_RCC_OscConfig+0x9c>
 8103f66:	4b81      	ldr	r3, [pc, #516]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103f68:	681b      	ldr	r3, [r3, #0]
 8103f6a:	4a80      	ldr	r2, [pc, #512]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103f70:	6013      	str	r3, [r2, #0]
 8103f72:	4b7e      	ldr	r3, [pc, #504]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103f74:	681b      	ldr	r3, [r3, #0]
 8103f76:	4a7d      	ldr	r2, [pc, #500]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8103f7c:	6013      	str	r3, [r2, #0]
 8103f7e:	e01d      	b.n	8103fbc <HAL_RCC_OscConfig+0xd8>
 8103f80:	687b      	ldr	r3, [r7, #4]
 8103f82:	685b      	ldr	r3, [r3, #4]
 8103f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103f88:	d10c      	bne.n	8103fa4 <HAL_RCC_OscConfig+0xc0>
 8103f8a:	4b78      	ldr	r3, [pc, #480]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103f8c:	681b      	ldr	r3, [r3, #0]
 8103f8e:	4a77      	ldr	r2, [pc, #476]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8103f94:	6013      	str	r3, [r2, #0]
 8103f96:	4b75      	ldr	r3, [pc, #468]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	4a74      	ldr	r2, [pc, #464]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103fa0:	6013      	str	r3, [r2, #0]
 8103fa2:	e00b      	b.n	8103fbc <HAL_RCC_OscConfig+0xd8>
 8103fa4:	4b71      	ldr	r3, [pc, #452]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103fa6:	681b      	ldr	r3, [r3, #0]
 8103fa8:	4a70      	ldr	r2, [pc, #448]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103fae:	6013      	str	r3, [r2, #0]
 8103fb0:	4b6e      	ldr	r3, [pc, #440]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103fb2:	681b      	ldr	r3, [r3, #0]
 8103fb4:	4a6d      	ldr	r2, [pc, #436]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8103fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	685b      	ldr	r3, [r3, #4]
 8103fc0:	2b00      	cmp	r3, #0
 8103fc2:	d013      	beq.n	8103fec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103fc4:	f7fe fce2 	bl	810298c <HAL_GetTick>
 8103fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8103fca:	e008      	b.n	8103fde <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8103fcc:	f7fe fcde 	bl	810298c <HAL_GetTick>
 8103fd0:	4602      	mov	r2, r0
 8103fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103fd4:	1ad3      	subs	r3, r2, r3
 8103fd6:	2b64      	cmp	r3, #100	; 0x64
 8103fd8:	d901      	bls.n	8103fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8103fda:	2303      	movs	r3, #3
 8103fdc:	e3d6      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8103fde:	4b63      	ldr	r3, [pc, #396]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8103fe0:	681b      	ldr	r3, [r3, #0]
 8103fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103fe6:	2b00      	cmp	r3, #0
 8103fe8:	d0f0      	beq.n	8103fcc <HAL_RCC_OscConfig+0xe8>
 8103fea:	e014      	b.n	8104016 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103fec:	f7fe fcce 	bl	810298c <HAL_GetTick>
 8103ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8103ff2:	e008      	b.n	8104006 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8103ff4:	f7fe fcca 	bl	810298c <HAL_GetTick>
 8103ff8:	4602      	mov	r2, r0
 8103ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103ffc:	1ad3      	subs	r3, r2, r3
 8103ffe:	2b64      	cmp	r3, #100	; 0x64
 8104000:	d901      	bls.n	8104006 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8104002:	2303      	movs	r3, #3
 8104004:	e3c2      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8104006:	4b59      	ldr	r3, [pc, #356]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8104008:	681b      	ldr	r3, [r3, #0]
 810400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810400e:	2b00      	cmp	r3, #0
 8104010:	d1f0      	bne.n	8103ff4 <HAL_RCC_OscConfig+0x110>
 8104012:	e000      	b.n	8104016 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8104014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8104016:	687b      	ldr	r3, [r7, #4]
 8104018:	681b      	ldr	r3, [r3, #0]
 810401a:	f003 0302 	and.w	r3, r3, #2
 810401e:	2b00      	cmp	r3, #0
 8104020:	f000 80ca 	beq.w	81041b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8104024:	4b51      	ldr	r3, [pc, #324]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8104026:	691b      	ldr	r3, [r3, #16]
 8104028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810402c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 810402e:	4b4f      	ldr	r3, [pc, #316]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8104030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104032:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8104034:	6a3b      	ldr	r3, [r7, #32]
 8104036:	2b00      	cmp	r3, #0
 8104038:	d007      	beq.n	810404a <HAL_RCC_OscConfig+0x166>
 810403a:	6a3b      	ldr	r3, [r7, #32]
 810403c:	2b18      	cmp	r3, #24
 810403e:	d156      	bne.n	81040ee <HAL_RCC_OscConfig+0x20a>
 8104040:	69fb      	ldr	r3, [r7, #28]
 8104042:	f003 0303 	and.w	r3, r3, #3
 8104046:	2b00      	cmp	r3, #0
 8104048:	d151      	bne.n	81040ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 810404a:	4b48      	ldr	r3, [pc, #288]	; (810416c <HAL_RCC_OscConfig+0x288>)
 810404c:	681b      	ldr	r3, [r3, #0]
 810404e:	f003 0304 	and.w	r3, r3, #4
 8104052:	2b00      	cmp	r3, #0
 8104054:	d005      	beq.n	8104062 <HAL_RCC_OscConfig+0x17e>
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	68db      	ldr	r3, [r3, #12]
 810405a:	2b00      	cmp	r3, #0
 810405c:	d101      	bne.n	8104062 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 810405e:	2301      	movs	r3, #1
 8104060:	e394      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8104062:	4b42      	ldr	r3, [pc, #264]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8104064:	681b      	ldr	r3, [r3, #0]
 8104066:	f023 0219 	bic.w	r2, r3, #25
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	68db      	ldr	r3, [r3, #12]
 810406e:	493f      	ldr	r1, [pc, #252]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8104070:	4313      	orrs	r3, r2
 8104072:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104074:	f7fe fc8a 	bl	810298c <HAL_GetTick>
 8104078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 810407a:	e008      	b.n	810408e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 810407c:	f7fe fc86 	bl	810298c <HAL_GetTick>
 8104080:	4602      	mov	r2, r0
 8104082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104084:	1ad3      	subs	r3, r2, r3
 8104086:	2b02      	cmp	r3, #2
 8104088:	d901      	bls.n	810408e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 810408a:	2303      	movs	r3, #3
 810408c:	e37e      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 810408e:	4b37      	ldr	r3, [pc, #220]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8104090:	681b      	ldr	r3, [r3, #0]
 8104092:	f003 0304 	and.w	r3, r3, #4
 8104096:	2b00      	cmp	r3, #0
 8104098:	d0f0      	beq.n	810407c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 810409a:	f7fe fca7 	bl	81029ec <HAL_GetREVID>
 810409e:	4603      	mov	r3, r0
 81040a0:	f241 0203 	movw	r2, #4099	; 0x1003
 81040a4:	4293      	cmp	r3, r2
 81040a6:	d817      	bhi.n	81040d8 <HAL_RCC_OscConfig+0x1f4>
 81040a8:	687b      	ldr	r3, [r7, #4]
 81040aa:	691b      	ldr	r3, [r3, #16]
 81040ac:	2b40      	cmp	r3, #64	; 0x40
 81040ae:	d108      	bne.n	81040c2 <HAL_RCC_OscConfig+0x1de>
 81040b0:	4b2e      	ldr	r3, [pc, #184]	; (810416c <HAL_RCC_OscConfig+0x288>)
 81040b2:	685b      	ldr	r3, [r3, #4]
 81040b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 81040b8:	4a2c      	ldr	r2, [pc, #176]	; (810416c <HAL_RCC_OscConfig+0x288>)
 81040ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81040be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 81040c0:	e07a      	b.n	81041b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 81040c2:	4b2a      	ldr	r3, [pc, #168]	; (810416c <HAL_RCC_OscConfig+0x288>)
 81040c4:	685b      	ldr	r3, [r3, #4]
 81040c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81040ca:	687b      	ldr	r3, [r7, #4]
 81040cc:	691b      	ldr	r3, [r3, #16]
 81040ce:	031b      	lsls	r3, r3, #12
 81040d0:	4926      	ldr	r1, [pc, #152]	; (810416c <HAL_RCC_OscConfig+0x288>)
 81040d2:	4313      	orrs	r3, r2
 81040d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 81040d6:	e06f      	b.n	81041b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 81040d8:	4b24      	ldr	r3, [pc, #144]	; (810416c <HAL_RCC_OscConfig+0x288>)
 81040da:	685b      	ldr	r3, [r3, #4]
 81040dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 81040e0:	687b      	ldr	r3, [r7, #4]
 81040e2:	691b      	ldr	r3, [r3, #16]
 81040e4:	061b      	lsls	r3, r3, #24
 81040e6:	4921      	ldr	r1, [pc, #132]	; (810416c <HAL_RCC_OscConfig+0x288>)
 81040e8:	4313      	orrs	r3, r2
 81040ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 81040ec:	e064      	b.n	81041b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 81040ee:	687b      	ldr	r3, [r7, #4]
 81040f0:	68db      	ldr	r3, [r3, #12]
 81040f2:	2b00      	cmp	r3, #0
 81040f4:	d047      	beq.n	8104186 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 81040f6:	4b1d      	ldr	r3, [pc, #116]	; (810416c <HAL_RCC_OscConfig+0x288>)
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	f023 0219 	bic.w	r2, r3, #25
 81040fe:	687b      	ldr	r3, [r7, #4]
 8104100:	68db      	ldr	r3, [r3, #12]
 8104102:	491a      	ldr	r1, [pc, #104]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8104104:	4313      	orrs	r3, r2
 8104106:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104108:	f7fe fc40 	bl	810298c <HAL_GetTick>
 810410c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 810410e:	e008      	b.n	8104122 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8104110:	f7fe fc3c 	bl	810298c <HAL_GetTick>
 8104114:	4602      	mov	r2, r0
 8104116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104118:	1ad3      	subs	r3, r2, r3
 810411a:	2b02      	cmp	r3, #2
 810411c:	d901      	bls.n	8104122 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 810411e:	2303      	movs	r3, #3
 8104120:	e334      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8104122:	4b12      	ldr	r3, [pc, #72]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8104124:	681b      	ldr	r3, [r3, #0]
 8104126:	f003 0304 	and.w	r3, r3, #4
 810412a:	2b00      	cmp	r3, #0
 810412c:	d0f0      	beq.n	8104110 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 810412e:	f7fe fc5d 	bl	81029ec <HAL_GetREVID>
 8104132:	4603      	mov	r3, r0
 8104134:	f241 0203 	movw	r2, #4099	; 0x1003
 8104138:	4293      	cmp	r3, r2
 810413a:	d819      	bhi.n	8104170 <HAL_RCC_OscConfig+0x28c>
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	691b      	ldr	r3, [r3, #16]
 8104140:	2b40      	cmp	r3, #64	; 0x40
 8104142:	d108      	bne.n	8104156 <HAL_RCC_OscConfig+0x272>
 8104144:	4b09      	ldr	r3, [pc, #36]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8104146:	685b      	ldr	r3, [r3, #4]
 8104148:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 810414c:	4a07      	ldr	r2, [pc, #28]	; (810416c <HAL_RCC_OscConfig+0x288>)
 810414e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104152:	6053      	str	r3, [r2, #4]
 8104154:	e030      	b.n	81041b8 <HAL_RCC_OscConfig+0x2d4>
 8104156:	4b05      	ldr	r3, [pc, #20]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8104158:	685b      	ldr	r3, [r3, #4]
 810415a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	691b      	ldr	r3, [r3, #16]
 8104162:	031b      	lsls	r3, r3, #12
 8104164:	4901      	ldr	r1, [pc, #4]	; (810416c <HAL_RCC_OscConfig+0x288>)
 8104166:	4313      	orrs	r3, r2
 8104168:	604b      	str	r3, [r1, #4]
 810416a:	e025      	b.n	81041b8 <HAL_RCC_OscConfig+0x2d4>
 810416c:	58024400 	.word	0x58024400
 8104170:	4b9a      	ldr	r3, [pc, #616]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 8104172:	685b      	ldr	r3, [r3, #4]
 8104174:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	691b      	ldr	r3, [r3, #16]
 810417c:	061b      	lsls	r3, r3, #24
 810417e:	4997      	ldr	r1, [pc, #604]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 8104180:	4313      	orrs	r3, r2
 8104182:	604b      	str	r3, [r1, #4]
 8104184:	e018      	b.n	81041b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8104186:	4b95      	ldr	r3, [pc, #596]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 8104188:	681b      	ldr	r3, [r3, #0]
 810418a:	4a94      	ldr	r2, [pc, #592]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 810418c:	f023 0301 	bic.w	r3, r3, #1
 8104190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104192:	f7fe fbfb 	bl	810298c <HAL_GetTick>
 8104196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8104198:	e008      	b.n	81041ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 810419a:	f7fe fbf7 	bl	810298c <HAL_GetTick>
 810419e:	4602      	mov	r2, r0
 81041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81041a2:	1ad3      	subs	r3, r2, r3
 81041a4:	2b02      	cmp	r3, #2
 81041a6:	d901      	bls.n	81041ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 81041a8:	2303      	movs	r3, #3
 81041aa:	e2ef      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 81041ac:	4b8b      	ldr	r3, [pc, #556]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81041ae:	681b      	ldr	r3, [r3, #0]
 81041b0:	f003 0304 	and.w	r3, r3, #4
 81041b4:	2b00      	cmp	r3, #0
 81041b6:	d1f0      	bne.n	810419a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 81041b8:	687b      	ldr	r3, [r7, #4]
 81041ba:	681b      	ldr	r3, [r3, #0]
 81041bc:	f003 0310 	and.w	r3, r3, #16
 81041c0:	2b00      	cmp	r3, #0
 81041c2:	f000 80a9 	beq.w	8104318 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 81041c6:	4b85      	ldr	r3, [pc, #532]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81041c8:	691b      	ldr	r3, [r3, #16]
 81041ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81041ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 81041d0:	4b82      	ldr	r3, [pc, #520]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81041d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 81041d6:	69bb      	ldr	r3, [r7, #24]
 81041d8:	2b08      	cmp	r3, #8
 81041da:	d007      	beq.n	81041ec <HAL_RCC_OscConfig+0x308>
 81041dc:	69bb      	ldr	r3, [r7, #24]
 81041de:	2b18      	cmp	r3, #24
 81041e0:	d13a      	bne.n	8104258 <HAL_RCC_OscConfig+0x374>
 81041e2:	697b      	ldr	r3, [r7, #20]
 81041e4:	f003 0303 	and.w	r3, r3, #3
 81041e8:	2b01      	cmp	r3, #1
 81041ea:	d135      	bne.n	8104258 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 81041ec:	4b7b      	ldr	r3, [pc, #492]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81041ee:	681b      	ldr	r3, [r3, #0]
 81041f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81041f4:	2b00      	cmp	r3, #0
 81041f6:	d005      	beq.n	8104204 <HAL_RCC_OscConfig+0x320>
 81041f8:	687b      	ldr	r3, [r7, #4]
 81041fa:	69db      	ldr	r3, [r3, #28]
 81041fc:	2b80      	cmp	r3, #128	; 0x80
 81041fe:	d001      	beq.n	8104204 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8104200:	2301      	movs	r3, #1
 8104202:	e2c3      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8104204:	f7fe fbf2 	bl	81029ec <HAL_GetREVID>
 8104208:	4603      	mov	r3, r0
 810420a:	f241 0203 	movw	r2, #4099	; 0x1003
 810420e:	4293      	cmp	r3, r2
 8104210:	d817      	bhi.n	8104242 <HAL_RCC_OscConfig+0x35e>
 8104212:	687b      	ldr	r3, [r7, #4]
 8104214:	6a1b      	ldr	r3, [r3, #32]
 8104216:	2b20      	cmp	r3, #32
 8104218:	d108      	bne.n	810422c <HAL_RCC_OscConfig+0x348>
 810421a:	4b70      	ldr	r3, [pc, #448]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 810421c:	685b      	ldr	r3, [r3, #4]
 810421e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8104222:	4a6e      	ldr	r2, [pc, #440]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 8104224:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8104228:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 810422a:	e075      	b.n	8104318 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 810422c:	4b6b      	ldr	r3, [pc, #428]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 810422e:	685b      	ldr	r3, [r3, #4]
 8104230:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	6a1b      	ldr	r3, [r3, #32]
 8104238:	069b      	lsls	r3, r3, #26
 810423a:	4968      	ldr	r1, [pc, #416]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 810423c:	4313      	orrs	r3, r2
 810423e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8104240:	e06a      	b.n	8104318 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8104242:	4b66      	ldr	r3, [pc, #408]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 8104244:	68db      	ldr	r3, [r3, #12]
 8104246:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 810424a:	687b      	ldr	r3, [r7, #4]
 810424c:	6a1b      	ldr	r3, [r3, #32]
 810424e:	061b      	lsls	r3, r3, #24
 8104250:	4962      	ldr	r1, [pc, #392]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 8104252:	4313      	orrs	r3, r2
 8104254:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8104256:	e05f      	b.n	8104318 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	69db      	ldr	r3, [r3, #28]
 810425c:	2b00      	cmp	r3, #0
 810425e:	d042      	beq.n	81042e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8104260:	4b5e      	ldr	r3, [pc, #376]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 8104262:	681b      	ldr	r3, [r3, #0]
 8104264:	4a5d      	ldr	r2, [pc, #372]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 8104266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810426a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810426c:	f7fe fb8e 	bl	810298c <HAL_GetTick>
 8104270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8104272:	e008      	b.n	8104286 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8104274:	f7fe fb8a 	bl	810298c <HAL_GetTick>
 8104278:	4602      	mov	r2, r0
 810427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810427c:	1ad3      	subs	r3, r2, r3
 810427e:	2b02      	cmp	r3, #2
 8104280:	d901      	bls.n	8104286 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8104282:	2303      	movs	r3, #3
 8104284:	e282      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8104286:	4b55      	ldr	r3, [pc, #340]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 8104288:	681b      	ldr	r3, [r3, #0]
 810428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810428e:	2b00      	cmp	r3, #0
 8104290:	d0f0      	beq.n	8104274 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8104292:	f7fe fbab 	bl	81029ec <HAL_GetREVID>
 8104296:	4603      	mov	r3, r0
 8104298:	f241 0203 	movw	r2, #4099	; 0x1003
 810429c:	4293      	cmp	r3, r2
 810429e:	d817      	bhi.n	81042d0 <HAL_RCC_OscConfig+0x3ec>
 81042a0:	687b      	ldr	r3, [r7, #4]
 81042a2:	6a1b      	ldr	r3, [r3, #32]
 81042a4:	2b20      	cmp	r3, #32
 81042a6:	d108      	bne.n	81042ba <HAL_RCC_OscConfig+0x3d6>
 81042a8:	4b4c      	ldr	r3, [pc, #304]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81042aa:	685b      	ldr	r3, [r3, #4]
 81042ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 81042b0:	4a4a      	ldr	r2, [pc, #296]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81042b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81042b6:	6053      	str	r3, [r2, #4]
 81042b8:	e02e      	b.n	8104318 <HAL_RCC_OscConfig+0x434>
 81042ba:	4b48      	ldr	r3, [pc, #288]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81042bc:	685b      	ldr	r3, [r3, #4]
 81042be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 81042c2:	687b      	ldr	r3, [r7, #4]
 81042c4:	6a1b      	ldr	r3, [r3, #32]
 81042c6:	069b      	lsls	r3, r3, #26
 81042c8:	4944      	ldr	r1, [pc, #272]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81042ca:	4313      	orrs	r3, r2
 81042cc:	604b      	str	r3, [r1, #4]
 81042ce:	e023      	b.n	8104318 <HAL_RCC_OscConfig+0x434>
 81042d0:	4b42      	ldr	r3, [pc, #264]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81042d2:	68db      	ldr	r3, [r3, #12]
 81042d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 81042d8:	687b      	ldr	r3, [r7, #4]
 81042da:	6a1b      	ldr	r3, [r3, #32]
 81042dc:	061b      	lsls	r3, r3, #24
 81042de:	493f      	ldr	r1, [pc, #252]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81042e0:	4313      	orrs	r3, r2
 81042e2:	60cb      	str	r3, [r1, #12]
 81042e4:	e018      	b.n	8104318 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 81042e6:	4b3d      	ldr	r3, [pc, #244]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	4a3c      	ldr	r2, [pc, #240]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81042ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81042f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81042f2:	f7fe fb4b 	bl	810298c <HAL_GetTick>
 81042f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 81042f8:	e008      	b.n	810430c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 81042fa:	f7fe fb47 	bl	810298c <HAL_GetTick>
 81042fe:	4602      	mov	r2, r0
 8104300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104302:	1ad3      	subs	r3, r2, r3
 8104304:	2b02      	cmp	r3, #2
 8104306:	d901      	bls.n	810430c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8104308:	2303      	movs	r3, #3
 810430a:	e23f      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 810430c:	4b33      	ldr	r3, [pc, #204]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 810430e:	681b      	ldr	r3, [r3, #0]
 8104310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104314:	2b00      	cmp	r3, #0
 8104316:	d1f0      	bne.n	81042fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	681b      	ldr	r3, [r3, #0]
 810431c:	f003 0308 	and.w	r3, r3, #8
 8104320:	2b00      	cmp	r3, #0
 8104322:	d036      	beq.n	8104392 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	695b      	ldr	r3, [r3, #20]
 8104328:	2b00      	cmp	r3, #0
 810432a:	d019      	beq.n	8104360 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 810432c:	4b2b      	ldr	r3, [pc, #172]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 810432e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104330:	4a2a      	ldr	r2, [pc, #168]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 8104332:	f043 0301 	orr.w	r3, r3, #1
 8104336:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8104338:	f7fe fb28 	bl	810298c <HAL_GetTick>
 810433c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 810433e:	e008      	b.n	8104352 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8104340:	f7fe fb24 	bl	810298c <HAL_GetTick>
 8104344:	4602      	mov	r2, r0
 8104346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104348:	1ad3      	subs	r3, r2, r3
 810434a:	2b02      	cmp	r3, #2
 810434c:	d901      	bls.n	8104352 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 810434e:	2303      	movs	r3, #3
 8104350:	e21c      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8104352:	4b22      	ldr	r3, [pc, #136]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 8104354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104356:	f003 0302 	and.w	r3, r3, #2
 810435a:	2b00      	cmp	r3, #0
 810435c:	d0f0      	beq.n	8104340 <HAL_RCC_OscConfig+0x45c>
 810435e:	e018      	b.n	8104392 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8104360:	4b1e      	ldr	r3, [pc, #120]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 8104362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104364:	4a1d      	ldr	r2, [pc, #116]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 8104366:	f023 0301 	bic.w	r3, r3, #1
 810436a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 810436c:	f7fe fb0e 	bl	810298c <HAL_GetTick>
 8104370:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8104372:	e008      	b.n	8104386 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8104374:	f7fe fb0a 	bl	810298c <HAL_GetTick>
 8104378:	4602      	mov	r2, r0
 810437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810437c:	1ad3      	subs	r3, r2, r3
 810437e:	2b02      	cmp	r3, #2
 8104380:	d901      	bls.n	8104386 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8104382:	2303      	movs	r3, #3
 8104384:	e202      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8104386:	4b15      	ldr	r3, [pc, #84]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 8104388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810438a:	f003 0302 	and.w	r3, r3, #2
 810438e:	2b00      	cmp	r3, #0
 8104390:	d1f0      	bne.n	8104374 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8104392:	687b      	ldr	r3, [r7, #4]
 8104394:	681b      	ldr	r3, [r3, #0]
 8104396:	f003 0320 	and.w	r3, r3, #32
 810439a:	2b00      	cmp	r3, #0
 810439c:	d039      	beq.n	8104412 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	699b      	ldr	r3, [r3, #24]
 81043a2:	2b00      	cmp	r3, #0
 81043a4:	d01c      	beq.n	81043e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 81043a6:	4b0d      	ldr	r3, [pc, #52]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81043a8:	681b      	ldr	r3, [r3, #0]
 81043aa:	4a0c      	ldr	r2, [pc, #48]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81043ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81043b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 81043b2:	f7fe faeb 	bl	810298c <HAL_GetTick>
 81043b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 81043b8:	e008      	b.n	81043cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 81043ba:	f7fe fae7 	bl	810298c <HAL_GetTick>
 81043be:	4602      	mov	r2, r0
 81043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81043c2:	1ad3      	subs	r3, r2, r3
 81043c4:	2b02      	cmp	r3, #2
 81043c6:	d901      	bls.n	81043cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 81043c8:	2303      	movs	r3, #3
 81043ca:	e1df      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 81043cc:	4b03      	ldr	r3, [pc, #12]	; (81043dc <HAL_RCC_OscConfig+0x4f8>)
 81043ce:	681b      	ldr	r3, [r3, #0]
 81043d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81043d4:	2b00      	cmp	r3, #0
 81043d6:	d0f0      	beq.n	81043ba <HAL_RCC_OscConfig+0x4d6>
 81043d8:	e01b      	b.n	8104412 <HAL_RCC_OscConfig+0x52e>
 81043da:	bf00      	nop
 81043dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 81043e0:	4b9d      	ldr	r3, [pc, #628]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	4a9c      	ldr	r2, [pc, #624]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81043e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81043ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 81043ec:	f7fe face 	bl	810298c <HAL_GetTick>
 81043f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 81043f2:	e008      	b.n	8104406 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 81043f4:	f7fe faca 	bl	810298c <HAL_GetTick>
 81043f8:	4602      	mov	r2, r0
 81043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81043fc:	1ad3      	subs	r3, r2, r3
 81043fe:	2b02      	cmp	r3, #2
 8104400:	d901      	bls.n	8104406 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8104402:	2303      	movs	r3, #3
 8104404:	e1c2      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8104406:	4b94      	ldr	r3, [pc, #592]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104408:	681b      	ldr	r3, [r3, #0]
 810440a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810440e:	2b00      	cmp	r3, #0
 8104410:	d1f0      	bne.n	81043f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8104412:	687b      	ldr	r3, [r7, #4]
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	f003 0304 	and.w	r3, r3, #4
 810441a:	2b00      	cmp	r3, #0
 810441c:	f000 8081 	beq.w	8104522 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8104420:	4b8e      	ldr	r3, [pc, #568]	; (810465c <HAL_RCC_OscConfig+0x778>)
 8104422:	681b      	ldr	r3, [r3, #0]
 8104424:	4a8d      	ldr	r2, [pc, #564]	; (810465c <HAL_RCC_OscConfig+0x778>)
 8104426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810442a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810442c:	f7fe faae 	bl	810298c <HAL_GetTick>
 8104430:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104432:	e008      	b.n	8104446 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104434:	f7fe faaa 	bl	810298c <HAL_GetTick>
 8104438:	4602      	mov	r2, r0
 810443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810443c:	1ad3      	subs	r3, r2, r3
 810443e:	2b64      	cmp	r3, #100	; 0x64
 8104440:	d901      	bls.n	8104446 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8104442:	2303      	movs	r3, #3
 8104444:	e1a2      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104446:	4b85      	ldr	r3, [pc, #532]	; (810465c <HAL_RCC_OscConfig+0x778>)
 8104448:	681b      	ldr	r3, [r3, #0]
 810444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810444e:	2b00      	cmp	r3, #0
 8104450:	d0f0      	beq.n	8104434 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8104452:	687b      	ldr	r3, [r7, #4]
 8104454:	689b      	ldr	r3, [r3, #8]
 8104456:	2b01      	cmp	r3, #1
 8104458:	d106      	bne.n	8104468 <HAL_RCC_OscConfig+0x584>
 810445a:	4b7f      	ldr	r3, [pc, #508]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 810445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810445e:	4a7e      	ldr	r2, [pc, #504]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104460:	f043 0301 	orr.w	r3, r3, #1
 8104464:	6713      	str	r3, [r2, #112]	; 0x70
 8104466:	e02d      	b.n	81044c4 <HAL_RCC_OscConfig+0x5e0>
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	689b      	ldr	r3, [r3, #8]
 810446c:	2b00      	cmp	r3, #0
 810446e:	d10c      	bne.n	810448a <HAL_RCC_OscConfig+0x5a6>
 8104470:	4b79      	ldr	r3, [pc, #484]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104474:	4a78      	ldr	r2, [pc, #480]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104476:	f023 0301 	bic.w	r3, r3, #1
 810447a:	6713      	str	r3, [r2, #112]	; 0x70
 810447c:	4b76      	ldr	r3, [pc, #472]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 810447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104480:	4a75      	ldr	r2, [pc, #468]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104482:	f023 0304 	bic.w	r3, r3, #4
 8104486:	6713      	str	r3, [r2, #112]	; 0x70
 8104488:	e01c      	b.n	81044c4 <HAL_RCC_OscConfig+0x5e0>
 810448a:	687b      	ldr	r3, [r7, #4]
 810448c:	689b      	ldr	r3, [r3, #8]
 810448e:	2b05      	cmp	r3, #5
 8104490:	d10c      	bne.n	81044ac <HAL_RCC_OscConfig+0x5c8>
 8104492:	4b71      	ldr	r3, [pc, #452]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104496:	4a70      	ldr	r2, [pc, #448]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104498:	f043 0304 	orr.w	r3, r3, #4
 810449c:	6713      	str	r3, [r2, #112]	; 0x70
 810449e:	4b6e      	ldr	r3, [pc, #440]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81044a2:	4a6d      	ldr	r2, [pc, #436]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81044a4:	f043 0301 	orr.w	r3, r3, #1
 81044a8:	6713      	str	r3, [r2, #112]	; 0x70
 81044aa:	e00b      	b.n	81044c4 <HAL_RCC_OscConfig+0x5e0>
 81044ac:	4b6a      	ldr	r3, [pc, #424]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81044b0:	4a69      	ldr	r2, [pc, #420]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81044b2:	f023 0301 	bic.w	r3, r3, #1
 81044b6:	6713      	str	r3, [r2, #112]	; 0x70
 81044b8:	4b67      	ldr	r3, [pc, #412]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81044bc:	4a66      	ldr	r2, [pc, #408]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81044be:	f023 0304 	bic.w	r3, r3, #4
 81044c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	689b      	ldr	r3, [r3, #8]
 81044c8:	2b00      	cmp	r3, #0
 81044ca:	d015      	beq.n	81044f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 81044cc:	f7fe fa5e 	bl	810298c <HAL_GetTick>
 81044d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81044d2:	e00a      	b.n	81044ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81044d4:	f7fe fa5a 	bl	810298c <HAL_GetTick>
 81044d8:	4602      	mov	r2, r0
 81044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81044dc:	1ad3      	subs	r3, r2, r3
 81044de:	f241 3288 	movw	r2, #5000	; 0x1388
 81044e2:	4293      	cmp	r3, r2
 81044e4:	d901      	bls.n	81044ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 81044e6:	2303      	movs	r3, #3
 81044e8:	e150      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81044ea:	4b5b      	ldr	r3, [pc, #364]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81044ee:	f003 0302 	and.w	r3, r3, #2
 81044f2:	2b00      	cmp	r3, #0
 81044f4:	d0ee      	beq.n	81044d4 <HAL_RCC_OscConfig+0x5f0>
 81044f6:	e014      	b.n	8104522 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 81044f8:	f7fe fa48 	bl	810298c <HAL_GetTick>
 81044fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 81044fe:	e00a      	b.n	8104516 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104500:	f7fe fa44 	bl	810298c <HAL_GetTick>
 8104504:	4602      	mov	r2, r0
 8104506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104508:	1ad3      	subs	r3, r2, r3
 810450a:	f241 3288 	movw	r2, #5000	; 0x1388
 810450e:	4293      	cmp	r3, r2
 8104510:	d901      	bls.n	8104516 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8104512:	2303      	movs	r3, #3
 8104514:	e13a      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8104516:	4b50      	ldr	r3, [pc, #320]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810451a:	f003 0302 	and.w	r3, r3, #2
 810451e:	2b00      	cmp	r3, #0
 8104520:	d1ee      	bne.n	8104500 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104526:	2b00      	cmp	r3, #0
 8104528:	f000 812f 	beq.w	810478a <HAL_RCC_OscConfig+0x8a6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 810452c:	4b4a      	ldr	r3, [pc, #296]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 810452e:	691b      	ldr	r3, [r3, #16]
 8104530:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104534:	2b18      	cmp	r3, #24
 8104536:	f000 80bd 	beq.w	81046b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 810453a:	687b      	ldr	r3, [r7, #4]
 810453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810453e:	2b02      	cmp	r3, #2
 8104540:	f040 809e 	bne.w	8104680 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8104544:	4b44      	ldr	r3, [pc, #272]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104546:	681b      	ldr	r3, [r3, #0]
 8104548:	4a43      	ldr	r2, [pc, #268]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 810454a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810454e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104550:	f7fe fa1c 	bl	810298c <HAL_GetTick>
 8104554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8104556:	e008      	b.n	810456a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8104558:	f7fe fa18 	bl	810298c <HAL_GetTick>
 810455c:	4602      	mov	r2, r0
 810455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104560:	1ad3      	subs	r3, r2, r3
 8104562:	2b02      	cmp	r3, #2
 8104564:	d901      	bls.n	810456a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8104566:	2303      	movs	r3, #3
 8104568:	e110      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 810456a:	4b3b      	ldr	r3, [pc, #236]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 810456c:	681b      	ldr	r3, [r3, #0]
 810456e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104572:	2b00      	cmp	r3, #0
 8104574:	d1f0      	bne.n	8104558 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8104576:	4b38      	ldr	r3, [pc, #224]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810457a:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 810457e:	f023 0303 	bic.w	r3, r3, #3
 8104582:	687a      	ldr	r2, [r7, #4]
 8104584:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8104586:	687a      	ldr	r2, [r7, #4]
 8104588:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 810458a:	0112      	lsls	r2, r2, #4
 810458c:	430a      	orrs	r2, r1
 810458e:	4932      	ldr	r1, [pc, #200]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104590:	4313      	orrs	r3, r2
 8104592:	628b      	str	r3, [r1, #40]	; 0x28
 8104594:	687b      	ldr	r3, [r7, #4]
 8104596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104598:	3b01      	subs	r3, #1
 810459a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81045a2:	3b01      	subs	r3, #1
 81045a4:	025b      	lsls	r3, r3, #9
 81045a6:	b29b      	uxth	r3, r3
 81045a8:	431a      	orrs	r2, r3
 81045aa:	687b      	ldr	r3, [r7, #4]
 81045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81045ae:	3b01      	subs	r3, #1
 81045b0:	041b      	lsls	r3, r3, #16
 81045b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81045b6:	431a      	orrs	r2, r3
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81045bc:	3b01      	subs	r3, #1
 81045be:	061b      	lsls	r3, r3, #24
 81045c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81045c4:	4924      	ldr	r1, [pc, #144]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81045c6:	4313      	orrs	r3, r2
 81045c8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 81045ca:	4b23      	ldr	r3, [pc, #140]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045ce:	4a22      	ldr	r2, [pc, #136]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81045d0:	f023 0301 	bic.w	r3, r3, #1
 81045d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 81045d6:	4b20      	ldr	r3, [pc, #128]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81045da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81045de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81045e2:	687a      	ldr	r2, [r7, #4]
 81045e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 81045e6:	00d2      	lsls	r2, r2, #3
 81045e8:	491b      	ldr	r1, [pc, #108]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81045ea:	4313      	orrs	r3, r2
 81045ec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 81045ee:	4b1a      	ldr	r3, [pc, #104]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045f2:	f023 020c 	bic.w	r2, r3, #12
 81045f6:	687b      	ldr	r3, [r7, #4]
 81045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81045fa:	4917      	ldr	r1, [pc, #92]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 81045fc:	4313      	orrs	r3, r2
 81045fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8104600:	4b15      	ldr	r3, [pc, #84]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104604:	f023 0202 	bic.w	r2, r3, #2
 8104608:	687b      	ldr	r3, [r7, #4]
 810460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810460c:	4912      	ldr	r1, [pc, #72]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 810460e:	4313      	orrs	r3, r2
 8104610:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8104612:	4b11      	ldr	r3, [pc, #68]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104616:	4a10      	ldr	r2, [pc, #64]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810461c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810461e:	4b0e      	ldr	r3, [pc, #56]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104622:	4a0d      	ldr	r2, [pc, #52]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104628:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 810462a:	4b0b      	ldr	r3, [pc, #44]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 810462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810462e:	4a0a      	ldr	r2, [pc, #40]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8104634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8104636:	4b08      	ldr	r3, [pc, #32]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810463a:	4a07      	ldr	r2, [pc, #28]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 810463c:	f043 0301 	orr.w	r3, r3, #1
 8104640:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8104642:	4b05      	ldr	r3, [pc, #20]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	4a04      	ldr	r2, [pc, #16]	; (8104658 <HAL_RCC_OscConfig+0x774>)
 8104648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810464c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810464e:	f7fe f99d 	bl	810298c <HAL_GetTick>
 8104652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8104654:	e00d      	b.n	8104672 <HAL_RCC_OscConfig+0x78e>
 8104656:	bf00      	nop
 8104658:	58024400 	.word	0x58024400
 810465c:	58024800 	.word	0x58024800
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8104660:	f7fe f994 	bl	810298c <HAL_GetTick>
 8104664:	4602      	mov	r2, r0
 8104666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104668:	1ad3      	subs	r3, r2, r3
 810466a:	2b02      	cmp	r3, #2
 810466c:	d901      	bls.n	8104672 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 810466e:	2303      	movs	r3, #3
 8104670:	e08c      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8104672:	4b48      	ldr	r3, [pc, #288]	; (8104794 <HAL_RCC_OscConfig+0x8b0>)
 8104674:	681b      	ldr	r3, [r3, #0]
 8104676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810467a:	2b00      	cmp	r3, #0
 810467c:	d0f0      	beq.n	8104660 <HAL_RCC_OscConfig+0x77c>
 810467e:	e084      	b.n	810478a <HAL_RCC_OscConfig+0x8a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8104680:	4b44      	ldr	r3, [pc, #272]	; (8104794 <HAL_RCC_OscConfig+0x8b0>)
 8104682:	681b      	ldr	r3, [r3, #0]
 8104684:	4a43      	ldr	r2, [pc, #268]	; (8104794 <HAL_RCC_OscConfig+0x8b0>)
 8104686:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810468a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810468c:	f7fe f97e 	bl	810298c <HAL_GetTick>
 8104690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8104692:	e008      	b.n	81046a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8104694:	f7fe f97a 	bl	810298c <HAL_GetTick>
 8104698:	4602      	mov	r2, r0
 810469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810469c:	1ad3      	subs	r3, r2, r3
 810469e:	2b02      	cmp	r3, #2
 81046a0:	d901      	bls.n	81046a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 81046a2:	2303      	movs	r3, #3
 81046a4:	e072      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 81046a6:	4b3b      	ldr	r3, [pc, #236]	; (8104794 <HAL_RCC_OscConfig+0x8b0>)
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81046ae:	2b00      	cmp	r3, #0
 81046b0:	d1f0      	bne.n	8104694 <HAL_RCC_OscConfig+0x7b0>
 81046b2:	e06a      	b.n	810478a <HAL_RCC_OscConfig+0x8a6>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 81046b4:	4b37      	ldr	r3, [pc, #220]	; (8104794 <HAL_RCC_OscConfig+0x8b0>)
 81046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81046b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 81046ba:	4b36      	ldr	r3, [pc, #216]	; (8104794 <HAL_RCC_OscConfig+0x8b0>)
 81046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81046be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 81046c0:	687b      	ldr	r3, [r7, #4]
 81046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81046c4:	2b01      	cmp	r3, #1
 81046c6:	d031      	beq.n	810472c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 81046c8:	693b      	ldr	r3, [r7, #16]
 81046ca:	f003 0203 	and.w	r2, r3, #3
 81046ce:	687b      	ldr	r3, [r7, #4]
 81046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 81046d2:	429a      	cmp	r2, r3
 81046d4:	d12a      	bne.n	810472c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 81046d6:	693b      	ldr	r3, [r7, #16]
 81046d8:	091b      	lsrs	r3, r3, #4
 81046da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 81046de:	687b      	ldr	r3, [r7, #4]
 81046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 81046e2:	429a      	cmp	r2, r3
 81046e4:	d122      	bne.n	810472c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 81046e6:	68fb      	ldr	r3, [r7, #12]
 81046e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81046ec:	687b      	ldr	r3, [r7, #4]
 81046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81046f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 81046f2:	429a      	cmp	r2, r3
 81046f4:	d11a      	bne.n	810472c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 81046f6:	68fb      	ldr	r3, [r7, #12]
 81046f8:	0a5b      	lsrs	r3, r3, #9
 81046fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104702:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8104704:	429a      	cmp	r2, r3
 8104706:	d111      	bne.n	810472c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8104708:	68fb      	ldr	r3, [r7, #12]
 810470a:	0c1b      	lsrs	r3, r3, #16
 810470c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104714:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8104716:	429a      	cmp	r2, r3
 8104718:	d108      	bne.n	810472c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 810471a:	68fb      	ldr	r3, [r7, #12]
 810471c:	0e1b      	lsrs	r3, r3, #24
 810471e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104726:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8104728:	429a      	cmp	r2, r3
 810472a:	d001      	beq.n	8104730 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 810472c:	2301      	movs	r3, #1
 810472e:	e02d      	b.n	810478c <HAL_RCC_OscConfig+0x8a8>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8104730:	4b18      	ldr	r3, [pc, #96]	; (8104794 <HAL_RCC_OscConfig+0x8b0>)
 8104732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104734:	08db      	lsrs	r3, r3, #3
 8104736:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810473a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 810473c:	687b      	ldr	r3, [r7, #4]
 810473e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104740:	693a      	ldr	r2, [r7, #16]
 8104742:	429a      	cmp	r2, r3
 8104744:	d021      	beq.n	810478a <HAL_RCC_OscConfig+0x8a6>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8104746:	4b13      	ldr	r3, [pc, #76]	; (8104794 <HAL_RCC_OscConfig+0x8b0>)
 8104748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810474a:	4a12      	ldr	r2, [pc, #72]	; (8104794 <HAL_RCC_OscConfig+0x8b0>)
 810474c:	f023 0301 	bic.w	r3, r3, #1
 8104750:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8104752:	f7fe f91b 	bl	810298c <HAL_GetTick>
 8104756:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8104758:	bf00      	nop
 810475a:	f7fe f917 	bl	810298c <HAL_GetTick>
 810475e:	4602      	mov	r2, r0
 8104760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104762:	4293      	cmp	r3, r2
 8104764:	d0f9      	beq.n	810475a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8104766:	4b0b      	ldr	r3, [pc, #44]	; (8104794 <HAL_RCC_OscConfig+0x8b0>)
 8104768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810476a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810476e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104772:	687a      	ldr	r2, [r7, #4]
 8104774:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8104776:	00d2      	lsls	r2, r2, #3
 8104778:	4906      	ldr	r1, [pc, #24]	; (8104794 <HAL_RCC_OscConfig+0x8b0>)
 810477a:	4313      	orrs	r3, r2
 810477c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 810477e:	4b05      	ldr	r3, [pc, #20]	; (8104794 <HAL_RCC_OscConfig+0x8b0>)
 8104780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104782:	4a04      	ldr	r2, [pc, #16]	; (8104794 <HAL_RCC_OscConfig+0x8b0>)
 8104784:	f043 0301 	orr.w	r3, r3, #1
 8104788:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 810478a:	2300      	movs	r3, #0
}
 810478c:	4618      	mov	r0, r3
 810478e:	3730      	adds	r7, #48	; 0x30
 8104790:	46bd      	mov	sp, r7
 8104792:	bd80      	pop	{r7, pc}
 8104794:	58024400 	.word	0x58024400

08104798 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8104798:	b580      	push	{r7, lr}
 810479a:	b086      	sub	sp, #24
 810479c:	af00      	add	r7, sp, #0
 810479e:	6078      	str	r0, [r7, #4]
 81047a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 81047a2:	687b      	ldr	r3, [r7, #4]
 81047a4:	2b00      	cmp	r3, #0
 81047a6:	d101      	bne.n	81047ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 81047a8:	2301      	movs	r3, #1
 81047aa:	e19d      	b.n	8104ae8 <HAL_RCC_ClockConfig+0x350>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 81047ac:	4b8a      	ldr	r3, [pc, #552]	; (81049d8 <HAL_RCC_ClockConfig+0x240>)
 81047ae:	681b      	ldr	r3, [r3, #0]
 81047b0:	f003 030f 	and.w	r3, r3, #15
 81047b4:	683a      	ldr	r2, [r7, #0]
 81047b6:	429a      	cmp	r2, r3
 81047b8:	d910      	bls.n	81047dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 81047ba:	4b87      	ldr	r3, [pc, #540]	; (81049d8 <HAL_RCC_ClockConfig+0x240>)
 81047bc:	681b      	ldr	r3, [r3, #0]
 81047be:	f023 020f 	bic.w	r2, r3, #15
 81047c2:	4985      	ldr	r1, [pc, #532]	; (81049d8 <HAL_RCC_ClockConfig+0x240>)
 81047c4:	683b      	ldr	r3, [r7, #0]
 81047c6:	4313      	orrs	r3, r2
 81047c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 81047ca:	4b83      	ldr	r3, [pc, #524]	; (81049d8 <HAL_RCC_ClockConfig+0x240>)
 81047cc:	681b      	ldr	r3, [r3, #0]
 81047ce:	f003 030f 	and.w	r3, r3, #15
 81047d2:	683a      	ldr	r2, [r7, #0]
 81047d4:	429a      	cmp	r2, r3
 81047d6:	d001      	beq.n	81047dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 81047d8:	2301      	movs	r3, #1
 81047da:	e185      	b.n	8104ae8 <HAL_RCC_ClockConfig+0x350>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 81047dc:	687b      	ldr	r3, [r7, #4]
 81047de:	681b      	ldr	r3, [r3, #0]
 81047e0:	f003 0304 	and.w	r3, r3, #4
 81047e4:	2b00      	cmp	r3, #0
 81047e6:	d010      	beq.n	810480a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 81047e8:	687b      	ldr	r3, [r7, #4]
 81047ea:	691a      	ldr	r2, [r3, #16]
 81047ec:	4b7b      	ldr	r3, [pc, #492]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 81047ee:	699b      	ldr	r3, [r3, #24]
 81047f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 81047f4:	429a      	cmp	r2, r3
 81047f6:	d908      	bls.n	810480a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 81047f8:	4b78      	ldr	r3, [pc, #480]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 81047fa:	699b      	ldr	r3, [r3, #24]
 81047fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8104800:	687b      	ldr	r3, [r7, #4]
 8104802:	691b      	ldr	r3, [r3, #16]
 8104804:	4975      	ldr	r1, [pc, #468]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 8104806:	4313      	orrs	r3, r2
 8104808:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 810480a:	687b      	ldr	r3, [r7, #4]
 810480c:	681b      	ldr	r3, [r3, #0]
 810480e:	f003 0308 	and.w	r3, r3, #8
 8104812:	2b00      	cmp	r3, #0
 8104814:	d010      	beq.n	8104838 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8104816:	687b      	ldr	r3, [r7, #4]
 8104818:	695a      	ldr	r2, [r3, #20]
 810481a:	4b70      	ldr	r3, [pc, #448]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 810481c:	69db      	ldr	r3, [r3, #28]
 810481e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8104822:	429a      	cmp	r2, r3
 8104824:	d908      	bls.n	8104838 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8104826:	4b6d      	ldr	r3, [pc, #436]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 8104828:	69db      	ldr	r3, [r3, #28]
 810482a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	695b      	ldr	r3, [r3, #20]
 8104832:	496a      	ldr	r1, [pc, #424]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 8104834:	4313      	orrs	r3, r2
 8104836:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8104838:	687b      	ldr	r3, [r7, #4]
 810483a:	681b      	ldr	r3, [r3, #0]
 810483c:	f003 0310 	and.w	r3, r3, #16
 8104840:	2b00      	cmp	r3, #0
 8104842:	d010      	beq.n	8104866 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8104844:	687b      	ldr	r3, [r7, #4]
 8104846:	699a      	ldr	r2, [r3, #24]
 8104848:	4b64      	ldr	r3, [pc, #400]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 810484a:	69db      	ldr	r3, [r3, #28]
 810484c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8104850:	429a      	cmp	r2, r3
 8104852:	d908      	bls.n	8104866 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8104854:	4b61      	ldr	r3, [pc, #388]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 8104856:	69db      	ldr	r3, [r3, #28]
 8104858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 810485c:	687b      	ldr	r3, [r7, #4]
 810485e:	699b      	ldr	r3, [r3, #24]
 8104860:	495e      	ldr	r1, [pc, #376]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 8104862:	4313      	orrs	r3, r2
 8104864:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8104866:	687b      	ldr	r3, [r7, #4]
 8104868:	681b      	ldr	r3, [r3, #0]
 810486a:	f003 0320 	and.w	r3, r3, #32
 810486e:	2b00      	cmp	r3, #0
 8104870:	d010      	beq.n	8104894 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8104872:	687b      	ldr	r3, [r7, #4]
 8104874:	69da      	ldr	r2, [r3, #28]
 8104876:	4b59      	ldr	r3, [pc, #356]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 8104878:	6a1b      	ldr	r3, [r3, #32]
 810487a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 810487e:	429a      	cmp	r2, r3
 8104880:	d908      	bls.n	8104894 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8104882:	4b56      	ldr	r3, [pc, #344]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 8104884:	6a1b      	ldr	r3, [r3, #32]
 8104886:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 810488a:	687b      	ldr	r3, [r7, #4]
 810488c:	69db      	ldr	r3, [r3, #28]
 810488e:	4953      	ldr	r1, [pc, #332]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 8104890:	4313      	orrs	r3, r2
 8104892:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	681b      	ldr	r3, [r3, #0]
 8104898:	f003 0302 	and.w	r3, r3, #2
 810489c:	2b00      	cmp	r3, #0
 810489e:	d010      	beq.n	81048c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	68da      	ldr	r2, [r3, #12]
 81048a4:	4b4d      	ldr	r3, [pc, #308]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 81048a6:	699b      	ldr	r3, [r3, #24]
 81048a8:	f003 030f 	and.w	r3, r3, #15
 81048ac:	429a      	cmp	r2, r3
 81048ae:	d908      	bls.n	81048c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 81048b0:	4b4a      	ldr	r3, [pc, #296]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 81048b2:	699b      	ldr	r3, [r3, #24]
 81048b4:	f023 020f 	bic.w	r2, r3, #15
 81048b8:	687b      	ldr	r3, [r7, #4]
 81048ba:	68db      	ldr	r3, [r3, #12]
 81048bc:	4947      	ldr	r1, [pc, #284]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 81048be:	4313      	orrs	r3, r2
 81048c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	681b      	ldr	r3, [r3, #0]
 81048c6:	f003 0301 	and.w	r3, r3, #1
 81048ca:	2b00      	cmp	r3, #0
 81048cc:	d055      	beq.n	810497a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 81048ce:	4b43      	ldr	r3, [pc, #268]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 81048d0:	699b      	ldr	r3, [r3, #24]
 81048d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 81048d6:	687b      	ldr	r3, [r7, #4]
 81048d8:	689b      	ldr	r3, [r3, #8]
 81048da:	4940      	ldr	r1, [pc, #256]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 81048dc:	4313      	orrs	r3, r2
 81048de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 81048e0:	687b      	ldr	r3, [r7, #4]
 81048e2:	685b      	ldr	r3, [r3, #4]
 81048e4:	2b02      	cmp	r3, #2
 81048e6:	d107      	bne.n	81048f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 81048e8:	4b3c      	ldr	r3, [pc, #240]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 81048ea:	681b      	ldr	r3, [r3, #0]
 81048ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81048f0:	2b00      	cmp	r3, #0
 81048f2:	d121      	bne.n	8104938 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 81048f4:	2301      	movs	r3, #1
 81048f6:	e0f7      	b.n	8104ae8 <HAL_RCC_ClockConfig+0x350>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 81048f8:	687b      	ldr	r3, [r7, #4]
 81048fa:	685b      	ldr	r3, [r3, #4]
 81048fc:	2b03      	cmp	r3, #3
 81048fe:	d107      	bne.n	8104910 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8104900:	4b36      	ldr	r3, [pc, #216]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 8104902:	681b      	ldr	r3, [r3, #0]
 8104904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104908:	2b00      	cmp	r3, #0
 810490a:	d115      	bne.n	8104938 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 810490c:	2301      	movs	r3, #1
 810490e:	e0eb      	b.n	8104ae8 <HAL_RCC_ClockConfig+0x350>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8104910:	687b      	ldr	r3, [r7, #4]
 8104912:	685b      	ldr	r3, [r3, #4]
 8104914:	2b01      	cmp	r3, #1
 8104916:	d107      	bne.n	8104928 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8104918:	4b30      	ldr	r3, [pc, #192]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 810491a:	681b      	ldr	r3, [r3, #0]
 810491c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104920:	2b00      	cmp	r3, #0
 8104922:	d109      	bne.n	8104938 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8104924:	2301      	movs	r3, #1
 8104926:	e0df      	b.n	8104ae8 <HAL_RCC_ClockConfig+0x350>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8104928:	4b2c      	ldr	r3, [pc, #176]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 810492a:	681b      	ldr	r3, [r3, #0]
 810492c:	f003 0304 	and.w	r3, r3, #4
 8104930:	2b00      	cmp	r3, #0
 8104932:	d101      	bne.n	8104938 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8104934:	2301      	movs	r3, #1
 8104936:	e0d7      	b.n	8104ae8 <HAL_RCC_ClockConfig+0x350>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8104938:	4b28      	ldr	r3, [pc, #160]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 810493a:	691b      	ldr	r3, [r3, #16]
 810493c:	f023 0207 	bic.w	r2, r3, #7
 8104940:	687b      	ldr	r3, [r7, #4]
 8104942:	685b      	ldr	r3, [r3, #4]
 8104944:	4925      	ldr	r1, [pc, #148]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 8104946:	4313      	orrs	r3, r2
 8104948:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810494a:	f7fe f81f 	bl	810298c <HAL_GetTick>
 810494e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8104950:	e00a      	b.n	8104968 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8104952:	f7fe f81b 	bl	810298c <HAL_GetTick>
 8104956:	4602      	mov	r2, r0
 8104958:	697b      	ldr	r3, [r7, #20]
 810495a:	1ad3      	subs	r3, r2, r3
 810495c:	f241 3288 	movw	r2, #5000	; 0x1388
 8104960:	4293      	cmp	r3, r2
 8104962:	d901      	bls.n	8104968 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8104964:	2303      	movs	r3, #3
 8104966:	e0bf      	b.n	8104ae8 <HAL_RCC_ClockConfig+0x350>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8104968:	4b1c      	ldr	r3, [pc, #112]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 810496a:	691b      	ldr	r3, [r3, #16]
 810496c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	685b      	ldr	r3, [r3, #4]
 8104974:	00db      	lsls	r3, r3, #3
 8104976:	429a      	cmp	r2, r3
 8104978:	d1eb      	bne.n	8104952 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 810497a:	687b      	ldr	r3, [r7, #4]
 810497c:	681b      	ldr	r3, [r3, #0]
 810497e:	f003 0302 	and.w	r3, r3, #2
 8104982:	2b00      	cmp	r3, #0
 8104984:	d010      	beq.n	81049a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	68da      	ldr	r2, [r3, #12]
 810498a:	4b14      	ldr	r3, [pc, #80]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 810498c:	699b      	ldr	r3, [r3, #24]
 810498e:	f003 030f 	and.w	r3, r3, #15
 8104992:	429a      	cmp	r2, r3
 8104994:	d208      	bcs.n	81049a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8104996:	4b11      	ldr	r3, [pc, #68]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 8104998:	699b      	ldr	r3, [r3, #24]
 810499a:	f023 020f 	bic.w	r2, r3, #15
 810499e:	687b      	ldr	r3, [r7, #4]
 81049a0:	68db      	ldr	r3, [r3, #12]
 81049a2:	490e      	ldr	r1, [pc, #56]	; (81049dc <HAL_RCC_ClockConfig+0x244>)
 81049a4:	4313      	orrs	r3, r2
 81049a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 81049a8:	4b0b      	ldr	r3, [pc, #44]	; (81049d8 <HAL_RCC_ClockConfig+0x240>)
 81049aa:	681b      	ldr	r3, [r3, #0]
 81049ac:	f003 030f 	and.w	r3, r3, #15
 81049b0:	683a      	ldr	r2, [r7, #0]
 81049b2:	429a      	cmp	r2, r3
 81049b4:	d214      	bcs.n	81049e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 81049b6:	4b08      	ldr	r3, [pc, #32]	; (81049d8 <HAL_RCC_ClockConfig+0x240>)
 81049b8:	681b      	ldr	r3, [r3, #0]
 81049ba:	f023 020f 	bic.w	r2, r3, #15
 81049be:	4906      	ldr	r1, [pc, #24]	; (81049d8 <HAL_RCC_ClockConfig+0x240>)
 81049c0:	683b      	ldr	r3, [r7, #0]
 81049c2:	4313      	orrs	r3, r2
 81049c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 81049c6:	4b04      	ldr	r3, [pc, #16]	; (81049d8 <HAL_RCC_ClockConfig+0x240>)
 81049c8:	681b      	ldr	r3, [r3, #0]
 81049ca:	f003 030f 	and.w	r3, r3, #15
 81049ce:	683a      	ldr	r2, [r7, #0]
 81049d0:	429a      	cmp	r2, r3
 81049d2:	d005      	beq.n	81049e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 81049d4:	2301      	movs	r3, #1
 81049d6:	e087      	b.n	8104ae8 <HAL_RCC_ClockConfig+0x350>
 81049d8:	52002000 	.word	0x52002000
 81049dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	f003 0304 	and.w	r3, r3, #4
 81049e8:	2b00      	cmp	r3, #0
 81049ea:	d010      	beq.n	8104a0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 81049ec:	687b      	ldr	r3, [r7, #4]
 81049ee:	691a      	ldr	r2, [r3, #16]
 81049f0:	4b3f      	ldr	r3, [pc, #252]	; (8104af0 <HAL_RCC_ClockConfig+0x358>)
 81049f2:	699b      	ldr	r3, [r3, #24]
 81049f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 81049f8:	429a      	cmp	r2, r3
 81049fa:	d208      	bcs.n	8104a0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 81049fc:	4b3c      	ldr	r3, [pc, #240]	; (8104af0 <HAL_RCC_ClockConfig+0x358>)
 81049fe:	699b      	ldr	r3, [r3, #24]
 8104a00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8104a04:	687b      	ldr	r3, [r7, #4]
 8104a06:	691b      	ldr	r3, [r3, #16]
 8104a08:	4939      	ldr	r1, [pc, #228]	; (8104af0 <HAL_RCC_ClockConfig+0x358>)
 8104a0a:	4313      	orrs	r3, r2
 8104a0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8104a0e:	687b      	ldr	r3, [r7, #4]
 8104a10:	681b      	ldr	r3, [r3, #0]
 8104a12:	f003 0308 	and.w	r3, r3, #8
 8104a16:	2b00      	cmp	r3, #0
 8104a18:	d010      	beq.n	8104a3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8104a1a:	687b      	ldr	r3, [r7, #4]
 8104a1c:	695a      	ldr	r2, [r3, #20]
 8104a1e:	4b34      	ldr	r3, [pc, #208]	; (8104af0 <HAL_RCC_ClockConfig+0x358>)
 8104a20:	69db      	ldr	r3, [r3, #28]
 8104a22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8104a26:	429a      	cmp	r2, r3
 8104a28:	d208      	bcs.n	8104a3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8104a2a:	4b31      	ldr	r3, [pc, #196]	; (8104af0 <HAL_RCC_ClockConfig+0x358>)
 8104a2c:	69db      	ldr	r3, [r3, #28]
 8104a2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8104a32:	687b      	ldr	r3, [r7, #4]
 8104a34:	695b      	ldr	r3, [r3, #20]
 8104a36:	492e      	ldr	r1, [pc, #184]	; (8104af0 <HAL_RCC_ClockConfig+0x358>)
 8104a38:	4313      	orrs	r3, r2
 8104a3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8104a3c:	687b      	ldr	r3, [r7, #4]
 8104a3e:	681b      	ldr	r3, [r3, #0]
 8104a40:	f003 0310 	and.w	r3, r3, #16
 8104a44:	2b00      	cmp	r3, #0
 8104a46:	d010      	beq.n	8104a6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	699a      	ldr	r2, [r3, #24]
 8104a4c:	4b28      	ldr	r3, [pc, #160]	; (8104af0 <HAL_RCC_ClockConfig+0x358>)
 8104a4e:	69db      	ldr	r3, [r3, #28]
 8104a50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8104a54:	429a      	cmp	r2, r3
 8104a56:	d208      	bcs.n	8104a6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8104a58:	4b25      	ldr	r3, [pc, #148]	; (8104af0 <HAL_RCC_ClockConfig+0x358>)
 8104a5a:	69db      	ldr	r3, [r3, #28]
 8104a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8104a60:	687b      	ldr	r3, [r7, #4]
 8104a62:	699b      	ldr	r3, [r3, #24]
 8104a64:	4922      	ldr	r1, [pc, #136]	; (8104af0 <HAL_RCC_ClockConfig+0x358>)
 8104a66:	4313      	orrs	r3, r2
 8104a68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8104a6a:	687b      	ldr	r3, [r7, #4]
 8104a6c:	681b      	ldr	r3, [r3, #0]
 8104a6e:	f003 0320 	and.w	r3, r3, #32
 8104a72:	2b00      	cmp	r3, #0
 8104a74:	d010      	beq.n	8104a98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8104a76:	687b      	ldr	r3, [r7, #4]
 8104a78:	69da      	ldr	r2, [r3, #28]
 8104a7a:	4b1d      	ldr	r3, [pc, #116]	; (8104af0 <HAL_RCC_ClockConfig+0x358>)
 8104a7c:	6a1b      	ldr	r3, [r3, #32]
 8104a7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8104a82:	429a      	cmp	r2, r3
 8104a84:	d208      	bcs.n	8104a98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8104a86:	4b1a      	ldr	r3, [pc, #104]	; (8104af0 <HAL_RCC_ClockConfig+0x358>)
 8104a88:	6a1b      	ldr	r3, [r3, #32]
 8104a8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8104a8e:	687b      	ldr	r3, [r7, #4]
 8104a90:	69db      	ldr	r3, [r3, #28]
 8104a92:	4917      	ldr	r1, [pc, #92]	; (8104af0 <HAL_RCC_ClockConfig+0x358>)
 8104a94:	4313      	orrs	r3, r2
 8104a96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8104a98:	f000 f834 	bl	8104b04 <HAL_RCC_GetSysClockFreq>
 8104a9c:	4602      	mov	r2, r0
 8104a9e:	4b14      	ldr	r3, [pc, #80]	; (8104af0 <HAL_RCC_ClockConfig+0x358>)
 8104aa0:	699b      	ldr	r3, [r3, #24]
 8104aa2:	0a1b      	lsrs	r3, r3, #8
 8104aa4:	f003 030f 	and.w	r3, r3, #15
 8104aa8:	4912      	ldr	r1, [pc, #72]	; (8104af4 <HAL_RCC_ClockConfig+0x35c>)
 8104aaa:	5ccb      	ldrb	r3, [r1, r3]
 8104aac:	f003 031f 	and.w	r3, r3, #31
 8104ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8104ab4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104ab6:	4b0e      	ldr	r3, [pc, #56]	; (8104af0 <HAL_RCC_ClockConfig+0x358>)
 8104ab8:	699b      	ldr	r3, [r3, #24]
 8104aba:	f003 030f 	and.w	r3, r3, #15
 8104abe:	4a0d      	ldr	r2, [pc, #52]	; (8104af4 <HAL_RCC_ClockConfig+0x35c>)
 8104ac0:	5cd3      	ldrb	r3, [r2, r3]
 8104ac2:	f003 031f 	and.w	r3, r3, #31
 8104ac6:	693a      	ldr	r2, [r7, #16]
 8104ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8104acc:	4a0a      	ldr	r2, [pc, #40]	; (8104af8 <HAL_RCC_ClockConfig+0x360>)
 8104ace:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104ad0:	4b09      	ldr	r3, [pc, #36]	; (8104af8 <HAL_RCC_ClockConfig+0x360>)
 8104ad2:	681b      	ldr	r3, [r3, #0]
 8104ad4:	4a09      	ldr	r2, [pc, #36]	; (8104afc <HAL_RCC_ClockConfig+0x364>)
 8104ad6:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8104ad8:	4b09      	ldr	r3, [pc, #36]	; (8104b00 <HAL_RCC_ClockConfig+0x368>)
 8104ada:	681b      	ldr	r3, [r3, #0]
 8104adc:	4618      	mov	r0, r3
 8104ade:	f7fd ff0b 	bl	81028f8 <HAL_InitTick>
 8104ae2:	4603      	mov	r3, r0
 8104ae4:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8104ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8104ae8:	4618      	mov	r0, r3
 8104aea:	3718      	adds	r7, #24
 8104aec:	46bd      	mov	sp, r7
 8104aee:	bd80      	pop	{r7, pc}
 8104af0:	58024400 	.word	0x58024400
 8104af4:	0810e094 	.word	0x0810e094
 8104af8:	10000004 	.word	0x10000004
 8104afc:	10000000 	.word	0x10000000
 8104b00:	10000018 	.word	0x10000018

08104b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104b04:	b480      	push	{r7}
 8104b06:	b089      	sub	sp, #36	; 0x24
 8104b08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104b0a:	4bb3      	ldr	r3, [pc, #716]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b0c:	691b      	ldr	r3, [r3, #16]
 8104b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104b12:	2b18      	cmp	r3, #24
 8104b14:	f200 8155 	bhi.w	8104dc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8104b18:	a201      	add	r2, pc, #4	; (adr r2, 8104b20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8104b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b1e:	bf00      	nop
 8104b20:	08104b85 	.word	0x08104b85
 8104b24:	08104dc3 	.word	0x08104dc3
 8104b28:	08104dc3 	.word	0x08104dc3
 8104b2c:	08104dc3 	.word	0x08104dc3
 8104b30:	08104dc3 	.word	0x08104dc3
 8104b34:	08104dc3 	.word	0x08104dc3
 8104b38:	08104dc3 	.word	0x08104dc3
 8104b3c:	08104dc3 	.word	0x08104dc3
 8104b40:	08104bab 	.word	0x08104bab
 8104b44:	08104dc3 	.word	0x08104dc3
 8104b48:	08104dc3 	.word	0x08104dc3
 8104b4c:	08104dc3 	.word	0x08104dc3
 8104b50:	08104dc3 	.word	0x08104dc3
 8104b54:	08104dc3 	.word	0x08104dc3
 8104b58:	08104dc3 	.word	0x08104dc3
 8104b5c:	08104dc3 	.word	0x08104dc3
 8104b60:	08104bb1 	.word	0x08104bb1
 8104b64:	08104dc3 	.word	0x08104dc3
 8104b68:	08104dc3 	.word	0x08104dc3
 8104b6c:	08104dc3 	.word	0x08104dc3
 8104b70:	08104dc3 	.word	0x08104dc3
 8104b74:	08104dc3 	.word	0x08104dc3
 8104b78:	08104dc3 	.word	0x08104dc3
 8104b7c:	08104dc3 	.word	0x08104dc3
 8104b80:	08104bb7 	.word	0x08104bb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104b84:	4b94      	ldr	r3, [pc, #592]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	f003 0320 	and.w	r3, r3, #32
 8104b8c:	2b00      	cmp	r3, #0
 8104b8e:	d009      	beq.n	8104ba4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104b90:	4b91      	ldr	r3, [pc, #580]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b92:	681b      	ldr	r3, [r3, #0]
 8104b94:	08db      	lsrs	r3, r3, #3
 8104b96:	f003 0303 	and.w	r3, r3, #3
 8104b9a:	4a90      	ldr	r2, [pc, #576]	; (8104ddc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8104ba0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8104ba2:	e111      	b.n	8104dc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104ba4:	4b8d      	ldr	r3, [pc, #564]	; (8104ddc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104ba6:	61bb      	str	r3, [r7, #24]
      break;
 8104ba8:	e10e      	b.n	8104dc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8104baa:	4b8d      	ldr	r3, [pc, #564]	; (8104de0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104bac:	61bb      	str	r3, [r7, #24]
      break;
 8104bae:	e10b      	b.n	8104dc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8104bb0:	4b8c      	ldr	r3, [pc, #560]	; (8104de4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8104bb2:	61bb      	str	r3, [r7, #24]
      break;
 8104bb4:	e108      	b.n	8104dc8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104bb6:	4b88      	ldr	r3, [pc, #544]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104bba:	f003 0303 	and.w	r3, r3, #3
 8104bbe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8104bc0:	4b85      	ldr	r3, [pc, #532]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104bc4:	091b      	lsrs	r3, r3, #4
 8104bc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104bca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104bcc:	4b82      	ldr	r3, [pc, #520]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104bd0:	f003 0301 	and.w	r3, r3, #1
 8104bd4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104bd6:	4b80      	ldr	r3, [pc, #512]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104bda:	08db      	lsrs	r3, r3, #3
 8104bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104be0:	68fa      	ldr	r2, [r7, #12]
 8104be2:	fb02 f303 	mul.w	r3, r2, r3
 8104be6:	ee07 3a90 	vmov	s15, r3
 8104bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8104bf2:	693b      	ldr	r3, [r7, #16]
 8104bf4:	2b00      	cmp	r3, #0
 8104bf6:	f000 80e1 	beq.w	8104dbc <HAL_RCC_GetSysClockFreq+0x2b8>
 8104bfa:	697b      	ldr	r3, [r7, #20]
 8104bfc:	2b02      	cmp	r3, #2
 8104bfe:	f000 8083 	beq.w	8104d08 <HAL_RCC_GetSysClockFreq+0x204>
 8104c02:	697b      	ldr	r3, [r7, #20]
 8104c04:	2b02      	cmp	r3, #2
 8104c06:	f200 80a1 	bhi.w	8104d4c <HAL_RCC_GetSysClockFreq+0x248>
 8104c0a:	697b      	ldr	r3, [r7, #20]
 8104c0c:	2b00      	cmp	r3, #0
 8104c0e:	d003      	beq.n	8104c18 <HAL_RCC_GetSysClockFreq+0x114>
 8104c10:	697b      	ldr	r3, [r7, #20]
 8104c12:	2b01      	cmp	r3, #1
 8104c14:	d056      	beq.n	8104cc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8104c16:	e099      	b.n	8104d4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104c18:	4b6f      	ldr	r3, [pc, #444]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104c1a:	681b      	ldr	r3, [r3, #0]
 8104c1c:	f003 0320 	and.w	r3, r3, #32
 8104c20:	2b00      	cmp	r3, #0
 8104c22:	d02d      	beq.n	8104c80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104c24:	4b6c      	ldr	r3, [pc, #432]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104c26:	681b      	ldr	r3, [r3, #0]
 8104c28:	08db      	lsrs	r3, r3, #3
 8104c2a:	f003 0303 	and.w	r3, r3, #3
 8104c2e:	4a6b      	ldr	r2, [pc, #428]	; (8104ddc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104c30:	fa22 f303 	lsr.w	r3, r2, r3
 8104c34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104c36:	687b      	ldr	r3, [r7, #4]
 8104c38:	ee07 3a90 	vmov	s15, r3
 8104c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c40:	693b      	ldr	r3, [r7, #16]
 8104c42:	ee07 3a90 	vmov	s15, r3
 8104c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c4e:	4b62      	ldr	r3, [pc, #392]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c56:	ee07 3a90 	vmov	s15, r3
 8104c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104c62:	eddf 5a61 	vldr	s11, [pc, #388]	; 8104de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8104c7e:	e087      	b.n	8104d90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104c80:	693b      	ldr	r3, [r7, #16]
 8104c82:	ee07 3a90 	vmov	s15, r3
 8104c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104dec <HAL_RCC_GetSysClockFreq+0x2e8>
 8104c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c92:	4b51      	ldr	r3, [pc, #324]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c9a:	ee07 3a90 	vmov	s15, r3
 8104c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8104ca6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8104de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104cbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104cc2:	e065      	b.n	8104d90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104cc4:	693b      	ldr	r3, [r7, #16]
 8104cc6:	ee07 3a90 	vmov	s15, r3
 8104cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104cce:	eddf 6a48 	vldr	s13, [pc, #288]	; 8104df0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104cd6:	4b40      	ldr	r3, [pc, #256]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104cde:	ee07 3a90 	vmov	s15, r3
 8104ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ce6:	ed97 6a02 	vldr	s12, [r7, #8]
 8104cea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8104de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104d06:	e043      	b.n	8104d90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104d08:	693b      	ldr	r3, [r7, #16]
 8104d0a:	ee07 3a90 	vmov	s15, r3
 8104d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8104df4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8104d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104d1a:	4b2f      	ldr	r3, [pc, #188]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104d22:	ee07 3a90 	vmov	s15, r3
 8104d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8104d2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8104de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104d4a:	e021      	b.n	8104d90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104d4c:	693b      	ldr	r3, [r7, #16]
 8104d4e:	ee07 3a90 	vmov	s15, r3
 8104d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8104df0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104d5e:	4b1e      	ldr	r3, [pc, #120]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104d66:	ee07 3a90 	vmov	s15, r3
 8104d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104d72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8104de8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104d8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8104d90:	4b11      	ldr	r3, [pc, #68]	; (8104dd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104d94:	0a5b      	lsrs	r3, r3, #9
 8104d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d9a:	3301      	adds	r3, #1
 8104d9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8104d9e:	683b      	ldr	r3, [r7, #0]
 8104da0:	ee07 3a90 	vmov	s15, r3
 8104da4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104da8:	edd7 6a07 	vldr	s13, [r7, #28]
 8104dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104db4:	ee17 3a90 	vmov	r3, s15
 8104db8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8104dba:	e005      	b.n	8104dc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8104dbc:	2300      	movs	r3, #0
 8104dbe:	61bb      	str	r3, [r7, #24]
      break;
 8104dc0:	e002      	b.n	8104dc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8104dc2:	4b07      	ldr	r3, [pc, #28]	; (8104de0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104dc4:	61bb      	str	r3, [r7, #24]
      break;
 8104dc6:	bf00      	nop
  }

  return sysclockfreq;
 8104dc8:	69bb      	ldr	r3, [r7, #24]
}
 8104dca:	4618      	mov	r0, r3
 8104dcc:	3724      	adds	r7, #36	; 0x24
 8104dce:	46bd      	mov	sp, r7
 8104dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dd4:	4770      	bx	lr
 8104dd6:	bf00      	nop
 8104dd8:	58024400 	.word	0x58024400
 8104ddc:	03d09000 	.word	0x03d09000
 8104de0:	003d0900 	.word	0x003d0900
 8104de4:	017d7840 	.word	0x017d7840
 8104de8:	46000000 	.word	0x46000000
 8104dec:	4c742400 	.word	0x4c742400
 8104df0:	4a742400 	.word	0x4a742400
 8104df4:	4bbebc20 	.word	0x4bbebc20

08104df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104df8:	b580      	push	{r7, lr}
 8104dfa:	b082      	sub	sp, #8
 8104dfc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104dfe:	f7ff fe81 	bl	8104b04 <HAL_RCC_GetSysClockFreq>
 8104e02:	4602      	mov	r2, r0
 8104e04:	4b11      	ldr	r3, [pc, #68]	; (8104e4c <HAL_RCC_GetHCLKFreq+0x54>)
 8104e06:	699b      	ldr	r3, [r3, #24]
 8104e08:	0a1b      	lsrs	r3, r3, #8
 8104e0a:	f003 030f 	and.w	r3, r3, #15
 8104e0e:	4910      	ldr	r1, [pc, #64]	; (8104e50 <HAL_RCC_GetHCLKFreq+0x58>)
 8104e10:	5ccb      	ldrb	r3, [r1, r3]
 8104e12:	f003 031f 	and.w	r3, r3, #31
 8104e16:	fa22 f303 	lsr.w	r3, r2, r3
 8104e1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104e1c:	4b0b      	ldr	r3, [pc, #44]	; (8104e4c <HAL_RCC_GetHCLKFreq+0x54>)
 8104e1e:	699b      	ldr	r3, [r3, #24]
 8104e20:	f003 030f 	and.w	r3, r3, #15
 8104e24:	4a0a      	ldr	r2, [pc, #40]	; (8104e50 <HAL_RCC_GetHCLKFreq+0x58>)
 8104e26:	5cd3      	ldrb	r3, [r2, r3]
 8104e28:	f003 031f 	and.w	r3, r3, #31
 8104e2c:	687a      	ldr	r2, [r7, #4]
 8104e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8104e32:	4a08      	ldr	r2, [pc, #32]	; (8104e54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104e34:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104e36:	4b07      	ldr	r3, [pc, #28]	; (8104e54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104e38:	681b      	ldr	r3, [r3, #0]
 8104e3a:	4a07      	ldr	r2, [pc, #28]	; (8104e58 <HAL_RCC_GetHCLKFreq+0x60>)
 8104e3c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104e3e:	4b05      	ldr	r3, [pc, #20]	; (8104e54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104e40:	681b      	ldr	r3, [r3, #0]
}
 8104e42:	4618      	mov	r0, r3
 8104e44:	3708      	adds	r7, #8
 8104e46:	46bd      	mov	sp, r7
 8104e48:	bd80      	pop	{r7, pc}
 8104e4a:	bf00      	nop
 8104e4c:	58024400 	.word	0x58024400
 8104e50:	0810e094 	.word	0x0810e094
 8104e54:	10000004 	.word	0x10000004
 8104e58:	10000000 	.word	0x10000000

08104e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104e5c:	b580      	push	{r7, lr}
 8104e5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104e60:	f7ff ffca 	bl	8104df8 <HAL_RCC_GetHCLKFreq>
 8104e64:	4602      	mov	r2, r0
 8104e66:	4b06      	ldr	r3, [pc, #24]	; (8104e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8104e68:	69db      	ldr	r3, [r3, #28]
 8104e6a:	091b      	lsrs	r3, r3, #4
 8104e6c:	f003 0307 	and.w	r3, r3, #7
 8104e70:	4904      	ldr	r1, [pc, #16]	; (8104e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8104e72:	5ccb      	ldrb	r3, [r1, r3]
 8104e74:	f003 031f 	and.w	r3, r3, #31
 8104e78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8104e7c:	4618      	mov	r0, r3
 8104e7e:	bd80      	pop	{r7, pc}
 8104e80:	58024400 	.word	0x58024400
 8104e84:	0810e094 	.word	0x0810e094

08104e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104e88:	b580      	push	{r7, lr}
 8104e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104e8c:	f7ff ffb4 	bl	8104df8 <HAL_RCC_GetHCLKFreq>
 8104e90:	4602      	mov	r2, r0
 8104e92:	4b06      	ldr	r3, [pc, #24]	; (8104eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8104e94:	69db      	ldr	r3, [r3, #28]
 8104e96:	0a1b      	lsrs	r3, r3, #8
 8104e98:	f003 0307 	and.w	r3, r3, #7
 8104e9c:	4904      	ldr	r1, [pc, #16]	; (8104eb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8104e9e:	5ccb      	ldrb	r3, [r1, r3]
 8104ea0:	f003 031f 	and.w	r3, r3, #31
 8104ea4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104ea8:	4618      	mov	r0, r3
 8104eaa:	bd80      	pop	{r7, pc}
 8104eac:	58024400 	.word	0x58024400
 8104eb0:	0810e094 	.word	0x0810e094

08104eb4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8104eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8104eb8:	b0ca      	sub	sp, #296	; 0x128
 8104eba:	af00      	add	r7, sp, #0
 8104ebc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104ec0:	2300      	movs	r3, #0
 8104ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104ec6:	2300      	movs	r3, #0
 8104ec8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ed4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8104ed8:	2500      	movs	r5, #0
 8104eda:	ea54 0305 	orrs.w	r3, r4, r5
 8104ede:	d049      	beq.n	8104f74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8104ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104ee6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104eea:	d02f      	beq.n	8104f4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8104eec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104ef0:	d828      	bhi.n	8104f44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104ef2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104ef6:	d01a      	beq.n	8104f2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8104ef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104efc:	d822      	bhi.n	8104f44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104efe:	2b00      	cmp	r3, #0
 8104f00:	d003      	beq.n	8104f0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8104f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104f06:	d007      	beq.n	8104f18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104f08:	e01c      	b.n	8104f44 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104f0a:	4bb8      	ldr	r3, [pc, #736]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f0e:	4ab7      	ldr	r2, [pc, #732]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104f14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104f16:	e01a      	b.n	8104f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f1c:	3308      	adds	r3, #8
 8104f1e:	2102      	movs	r1, #2
 8104f20:	4618      	mov	r0, r3
 8104f22:	f001 fc8f 	bl	8106844 <RCCEx_PLL2_Config>
 8104f26:	4603      	mov	r3, r0
 8104f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104f2c:	e00f      	b.n	8104f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f32:	3328      	adds	r3, #40	; 0x28
 8104f34:	2102      	movs	r1, #2
 8104f36:	4618      	mov	r0, r3
 8104f38:	f001 fd36 	bl	81069a8 <RCCEx_PLL3_Config>
 8104f3c:	4603      	mov	r3, r0
 8104f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104f42:	e004      	b.n	8104f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104f44:	2301      	movs	r3, #1
 8104f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104f4a:	e000      	b.n	8104f4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8104f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104f52:	2b00      	cmp	r3, #0
 8104f54:	d10a      	bne.n	8104f6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104f56:	4ba5      	ldr	r3, [pc, #660]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f5a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8104f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104f64:	4aa1      	ldr	r2, [pc, #644]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104f66:	430b      	orrs	r3, r1
 8104f68:	6513      	str	r3, [r2, #80]	; 0x50
 8104f6a:	e003      	b.n	8104f74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104f70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f7c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8104f80:	f04f 0900 	mov.w	r9, #0
 8104f84:	ea58 0309 	orrs.w	r3, r8, r9
 8104f88:	d047      	beq.n	810501a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8104f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104f90:	2b04      	cmp	r3, #4
 8104f92:	d82a      	bhi.n	8104fea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8104f94:	a201      	add	r2, pc, #4	; (adr r2, 8104f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8104f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104f9a:	bf00      	nop
 8104f9c:	08104fb1 	.word	0x08104fb1
 8104fa0:	08104fbf 	.word	0x08104fbf
 8104fa4:	08104fd5 	.word	0x08104fd5
 8104fa8:	08104ff3 	.word	0x08104ff3
 8104fac:	08104ff3 	.word	0x08104ff3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104fb0:	4b8e      	ldr	r3, [pc, #568]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104fb4:	4a8d      	ldr	r2, [pc, #564]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104fba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104fbc:	e01a      	b.n	8104ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fc2:	3308      	adds	r3, #8
 8104fc4:	2100      	movs	r1, #0
 8104fc6:	4618      	mov	r0, r3
 8104fc8:	f001 fc3c 	bl	8106844 <RCCEx_PLL2_Config>
 8104fcc:	4603      	mov	r3, r0
 8104fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104fd2:	e00f      	b.n	8104ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fd8:	3328      	adds	r3, #40	; 0x28
 8104fda:	2100      	movs	r1, #0
 8104fdc:	4618      	mov	r0, r3
 8104fde:	f001 fce3 	bl	81069a8 <RCCEx_PLL3_Config>
 8104fe2:	4603      	mov	r3, r0
 8104fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104fe8:	e004      	b.n	8104ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104fea:	2301      	movs	r3, #1
 8104fec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104ff0:	e000      	b.n	8104ff4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8104ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ff8:	2b00      	cmp	r3, #0
 8104ffa:	d10a      	bne.n	8105012 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104ffc:	4b7b      	ldr	r3, [pc, #492]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105000:	f023 0107 	bic.w	r1, r3, #7
 8105004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810500a:	4a78      	ldr	r2, [pc, #480]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810500c:	430b      	orrs	r3, r1
 810500e:	6513      	str	r3, [r2, #80]	; 0x50
 8105010:	e003      	b.n	810501a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105012:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105016:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105022:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8105026:	f04f 0b00 	mov.w	fp, #0
 810502a:	ea5a 030b 	orrs.w	r3, sl, fp
 810502e:	d04c      	beq.n	81050ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8105030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810503a:	d030      	beq.n	810509e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810503c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105040:	d829      	bhi.n	8105096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105042:	2bc0      	cmp	r3, #192	; 0xc0
 8105044:	d02d      	beq.n	81050a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8105046:	2bc0      	cmp	r3, #192	; 0xc0
 8105048:	d825      	bhi.n	8105096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810504a:	2b80      	cmp	r3, #128	; 0x80
 810504c:	d018      	beq.n	8105080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810504e:	2b80      	cmp	r3, #128	; 0x80
 8105050:	d821      	bhi.n	8105096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105052:	2b00      	cmp	r3, #0
 8105054:	d002      	beq.n	810505c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8105056:	2b40      	cmp	r3, #64	; 0x40
 8105058:	d007      	beq.n	810506a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810505a:	e01c      	b.n	8105096 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810505c:	4b63      	ldr	r3, [pc, #396]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105060:	4a62      	ldr	r2, [pc, #392]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105068:	e01c      	b.n	81050a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810506a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810506e:	3308      	adds	r3, #8
 8105070:	2100      	movs	r1, #0
 8105072:	4618      	mov	r0, r3
 8105074:	f001 fbe6 	bl	8106844 <RCCEx_PLL2_Config>
 8105078:	4603      	mov	r3, r0
 810507a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810507e:	e011      	b.n	81050a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105084:	3328      	adds	r3, #40	; 0x28
 8105086:	2100      	movs	r1, #0
 8105088:	4618      	mov	r0, r3
 810508a:	f001 fc8d 	bl	81069a8 <RCCEx_PLL3_Config>
 810508e:	4603      	mov	r3, r0
 8105090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105094:	e006      	b.n	81050a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105096:	2301      	movs	r3, #1
 8105098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810509c:	e002      	b.n	81050a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810509e:	bf00      	nop
 81050a0:	e000      	b.n	81050a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81050a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81050a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81050a8:	2b00      	cmp	r3, #0
 81050aa:	d10a      	bne.n	81050c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81050ac:	4b4f      	ldr	r3, [pc, #316]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81050ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81050b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 81050b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81050ba:	4a4c      	ldr	r2, [pc, #304]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81050bc:	430b      	orrs	r3, r1
 81050be:	6513      	str	r3, [r2, #80]	; 0x50
 81050c0:	e003      	b.n	81050ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81050c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81050c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81050ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81050d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 81050d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 81050da:	2300      	movs	r3, #0
 81050dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 81050e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 81050e4:	460b      	mov	r3, r1
 81050e6:	4313      	orrs	r3, r2
 81050e8:	d053      	beq.n	8105192 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81050ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81050f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81050f6:	d035      	beq.n	8105164 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81050f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81050fc:	d82e      	bhi.n	810515c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81050fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105102:	d031      	beq.n	8105168 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8105104:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105108:	d828      	bhi.n	810515c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810510a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810510e:	d01a      	beq.n	8105146 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8105110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105114:	d822      	bhi.n	810515c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105116:	2b00      	cmp	r3, #0
 8105118:	d003      	beq.n	8105122 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810511a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810511e:	d007      	beq.n	8105130 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8105120:	e01c      	b.n	810515c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105122:	4b32      	ldr	r3, [pc, #200]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105126:	4a31      	ldr	r2, [pc, #196]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810512c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810512e:	e01c      	b.n	810516a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105134:	3308      	adds	r3, #8
 8105136:	2100      	movs	r1, #0
 8105138:	4618      	mov	r0, r3
 810513a:	f001 fb83 	bl	8106844 <RCCEx_PLL2_Config>
 810513e:	4603      	mov	r3, r0
 8105140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105144:	e011      	b.n	810516a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810514a:	3328      	adds	r3, #40	; 0x28
 810514c:	2100      	movs	r1, #0
 810514e:	4618      	mov	r0, r3
 8105150:	f001 fc2a 	bl	81069a8 <RCCEx_PLL3_Config>
 8105154:	4603      	mov	r3, r0
 8105156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810515a:	e006      	b.n	810516a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810515c:	2301      	movs	r3, #1
 810515e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105162:	e002      	b.n	810516a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105164:	bf00      	nop
 8105166:	e000      	b.n	810516a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105168:	bf00      	nop
    }

    if (ret == HAL_OK)
 810516a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810516e:	2b00      	cmp	r3, #0
 8105170:	d10b      	bne.n	810518a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105172:	4b1e      	ldr	r3, [pc, #120]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105176:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 810517a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810517e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105182:	4a1a      	ldr	r2, [pc, #104]	; (81051ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105184:	430b      	orrs	r3, r1
 8105186:	6593      	str	r3, [r2, #88]	; 0x58
 8105188:	e003      	b.n	8105192 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810518a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810518e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105196:	e9d3 2300 	ldrd	r2, r3, [r3]
 810519a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 810519e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 81051a2:	2300      	movs	r3, #0
 81051a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 81051a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 81051ac:	460b      	mov	r3, r1
 81051ae:	4313      	orrs	r3, r2
 81051b0:	d056      	beq.n	8105260 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81051b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81051ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81051be:	d038      	beq.n	8105232 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81051c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81051c4:	d831      	bhi.n	810522a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81051c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81051ca:	d034      	beq.n	8105236 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81051cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81051d0:	d82b      	bhi.n	810522a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81051d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81051d6:	d01d      	beq.n	8105214 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81051d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81051dc:	d825      	bhi.n	810522a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81051de:	2b00      	cmp	r3, #0
 81051e0:	d006      	beq.n	81051f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81051e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81051e6:	d00a      	beq.n	81051fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81051e8:	e01f      	b.n	810522a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81051ea:	bf00      	nop
 81051ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81051f0:	4ba2      	ldr	r3, [pc, #648]	; (810547c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051f4:	4aa1      	ldr	r2, [pc, #644]	; (810547c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81051f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81051fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81051fc:	e01c      	b.n	8105238 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81051fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105202:	3308      	adds	r3, #8
 8105204:	2100      	movs	r1, #0
 8105206:	4618      	mov	r0, r3
 8105208:	f001 fb1c 	bl	8106844 <RCCEx_PLL2_Config>
 810520c:	4603      	mov	r3, r0
 810520e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105212:	e011      	b.n	8105238 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105218:	3328      	adds	r3, #40	; 0x28
 810521a:	2100      	movs	r1, #0
 810521c:	4618      	mov	r0, r3
 810521e:	f001 fbc3 	bl	81069a8 <RCCEx_PLL3_Config>
 8105222:	4603      	mov	r3, r0
 8105224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105228:	e006      	b.n	8105238 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810522a:	2301      	movs	r3, #1
 810522c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105230:	e002      	b.n	8105238 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105232:	bf00      	nop
 8105234:	e000      	b.n	8105238 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105238:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810523c:	2b00      	cmp	r3, #0
 810523e:	d10b      	bne.n	8105258 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105240:	4b8e      	ldr	r3, [pc, #568]	; (810547c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105244:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8105248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810524c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105250:	4a8a      	ldr	r2, [pc, #552]	; (810547c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105252:	430b      	orrs	r3, r1
 8105254:	6593      	str	r3, [r2, #88]	; 0x58
 8105256:	e003      	b.n	8105260 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105258:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810525c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105268:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 810526c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8105270:	2300      	movs	r3, #0
 8105272:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8105276:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 810527a:	460b      	mov	r3, r1
 810527c:	4313      	orrs	r3, r2
 810527e:	d03a      	beq.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8105280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105286:	2b30      	cmp	r3, #48	; 0x30
 8105288:	d01f      	beq.n	81052ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 810528a:	2b30      	cmp	r3, #48	; 0x30
 810528c:	d819      	bhi.n	81052c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810528e:	2b20      	cmp	r3, #32
 8105290:	d00c      	beq.n	81052ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8105292:	2b20      	cmp	r3, #32
 8105294:	d815      	bhi.n	81052c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105296:	2b00      	cmp	r3, #0
 8105298:	d019      	beq.n	81052ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810529a:	2b10      	cmp	r3, #16
 810529c:	d111      	bne.n	81052c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810529e:	4b77      	ldr	r3, [pc, #476]	; (810547c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81052a2:	4a76      	ldr	r2, [pc, #472]	; (810547c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81052a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81052a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81052aa:	e011      	b.n	81052d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81052ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052b0:	3308      	adds	r3, #8
 81052b2:	2102      	movs	r1, #2
 81052b4:	4618      	mov	r0, r3
 81052b6:	f001 fac5 	bl	8106844 <RCCEx_PLL2_Config>
 81052ba:	4603      	mov	r3, r0
 81052bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81052c0:	e006      	b.n	81052d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81052c2:	2301      	movs	r3, #1
 81052c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81052c8:	e002      	b.n	81052d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81052ca:	bf00      	nop
 81052cc:	e000      	b.n	81052d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81052ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 81052d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81052d4:	2b00      	cmp	r3, #0
 81052d6:	d10a      	bne.n	81052ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81052d8:	4b68      	ldr	r3, [pc, #416]	; (810547c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81052da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81052dc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 81052e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81052e6:	4a65      	ldr	r2, [pc, #404]	; (810547c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81052e8:	430b      	orrs	r3, r1
 81052ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 81052ec:	e003      	b.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81052ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81052f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81052fe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8105302:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8105306:	2300      	movs	r3, #0
 8105308:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 810530c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8105310:	460b      	mov	r3, r1
 8105312:	4313      	orrs	r3, r2
 8105314:	d051      	beq.n	81053ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8105316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810531a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810531c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105320:	d035      	beq.n	810538e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8105322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105326:	d82e      	bhi.n	8105386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105328:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810532c:	d031      	beq.n	8105392 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810532e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105332:	d828      	bhi.n	8105386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105338:	d01a      	beq.n	8105370 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810533a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810533e:	d822      	bhi.n	8105386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105340:	2b00      	cmp	r3, #0
 8105342:	d003      	beq.n	810534c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8105344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105348:	d007      	beq.n	810535a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810534a:	e01c      	b.n	8105386 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810534c:	4b4b      	ldr	r3, [pc, #300]	; (810547c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105350:	4a4a      	ldr	r2, [pc, #296]	; (810547c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105358:	e01c      	b.n	8105394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810535e:	3308      	adds	r3, #8
 8105360:	2100      	movs	r1, #0
 8105362:	4618      	mov	r0, r3
 8105364:	f001 fa6e 	bl	8106844 <RCCEx_PLL2_Config>
 8105368:	4603      	mov	r3, r0
 810536a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810536e:	e011      	b.n	8105394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105374:	3328      	adds	r3, #40	; 0x28
 8105376:	2100      	movs	r1, #0
 8105378:	4618      	mov	r0, r3
 810537a:	f001 fb15 	bl	81069a8 <RCCEx_PLL3_Config>
 810537e:	4603      	mov	r3, r0
 8105380:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105384:	e006      	b.n	8105394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105386:	2301      	movs	r3, #1
 8105388:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810538c:	e002      	b.n	8105394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810538e:	bf00      	nop
 8105390:	e000      	b.n	8105394 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105398:	2b00      	cmp	r3, #0
 810539a:	d10a      	bne.n	81053b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810539c:	4b37      	ldr	r3, [pc, #220]	; (810547c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810539e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81053a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 81053a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81053aa:	4a34      	ldr	r2, [pc, #208]	; (810547c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81053ac:	430b      	orrs	r3, r1
 81053ae:	6513      	str	r3, [r2, #80]	; 0x50
 81053b0:	e003      	b.n	81053ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81053b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81053b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81053c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 81053c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 81053ca:	2300      	movs	r3, #0
 81053cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 81053d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 81053d4:	460b      	mov	r3, r1
 81053d6:	4313      	orrs	r3, r2
 81053d8:	d056      	beq.n	8105488 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 81053da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81053e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81053e4:	d033      	beq.n	810544e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81053e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81053ea:	d82c      	bhi.n	8105446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81053ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81053f0:	d02f      	beq.n	8105452 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81053f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81053f6:	d826      	bhi.n	8105446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81053f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81053fc:	d02b      	beq.n	8105456 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81053fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105402:	d820      	bhi.n	8105446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105404:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105408:	d012      	beq.n	8105430 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810540a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810540e:	d81a      	bhi.n	8105446 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105410:	2b00      	cmp	r3, #0
 8105412:	d022      	beq.n	810545a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8105414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105418:	d115      	bne.n	8105446 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810541a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810541e:	3308      	adds	r3, #8
 8105420:	2101      	movs	r1, #1
 8105422:	4618      	mov	r0, r3
 8105424:	f001 fa0e 	bl	8106844 <RCCEx_PLL2_Config>
 8105428:	4603      	mov	r3, r0
 810542a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810542e:	e015      	b.n	810545c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105434:	3328      	adds	r3, #40	; 0x28
 8105436:	2101      	movs	r1, #1
 8105438:	4618      	mov	r0, r3
 810543a:	f001 fab5 	bl	81069a8 <RCCEx_PLL3_Config>
 810543e:	4603      	mov	r3, r0
 8105440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8105444:	e00a      	b.n	810545c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105446:	2301      	movs	r3, #1
 8105448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810544c:	e006      	b.n	810545c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810544e:	bf00      	nop
 8105450:	e004      	b.n	810545c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105452:	bf00      	nop
 8105454:	e002      	b.n	810545c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105456:	bf00      	nop
 8105458:	e000      	b.n	810545c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810545a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810545c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105460:	2b00      	cmp	r3, #0
 8105462:	d10d      	bne.n	8105480 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105464:	4b05      	ldr	r3, [pc, #20]	; (810547c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105468:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 810546c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105472:	4a02      	ldr	r2, [pc, #8]	; (810547c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105474:	430b      	orrs	r3, r1
 8105476:	6513      	str	r3, [r2, #80]	; 0x50
 8105478:	e006      	b.n	8105488 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810547a:	bf00      	nop
 810547c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105480:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105484:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105490:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8105494:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8105498:	2300      	movs	r3, #0
 810549a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 810549e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 81054a2:	460b      	mov	r3, r1
 81054a4:	4313      	orrs	r3, r2
 81054a6:	d055      	beq.n	8105554 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81054a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81054b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81054b4:	d033      	beq.n	810551e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81054b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81054ba:	d82c      	bhi.n	8105516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81054bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81054c0:	d02f      	beq.n	8105522 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81054c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81054c6:	d826      	bhi.n	8105516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81054c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81054cc:	d02b      	beq.n	8105526 <HAL_RCCEx_PeriphCLKConfig+0x672>
 81054ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81054d2:	d820      	bhi.n	8105516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81054d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81054d8:	d012      	beq.n	8105500 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81054da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81054de:	d81a      	bhi.n	8105516 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81054e0:	2b00      	cmp	r3, #0
 81054e2:	d022      	beq.n	810552a <HAL_RCCEx_PeriphCLKConfig+0x676>
 81054e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81054e8:	d115      	bne.n	8105516 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054ee:	3308      	adds	r3, #8
 81054f0:	2101      	movs	r1, #1
 81054f2:	4618      	mov	r0, r3
 81054f4:	f001 f9a6 	bl	8106844 <RCCEx_PLL2_Config>
 81054f8:	4603      	mov	r3, r0
 81054fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81054fe:	e015      	b.n	810552c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105504:	3328      	adds	r3, #40	; 0x28
 8105506:	2101      	movs	r1, #1
 8105508:	4618      	mov	r0, r3
 810550a:	f001 fa4d 	bl	81069a8 <RCCEx_PLL3_Config>
 810550e:	4603      	mov	r3, r0
 8105510:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8105514:	e00a      	b.n	810552c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8105516:	2301      	movs	r3, #1
 8105518:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810551c:	e006      	b.n	810552c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810551e:	bf00      	nop
 8105520:	e004      	b.n	810552c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105522:	bf00      	nop
 8105524:	e002      	b.n	810552c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105526:	bf00      	nop
 8105528:	e000      	b.n	810552c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810552a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810552c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105530:	2b00      	cmp	r3, #0
 8105532:	d10b      	bne.n	810554c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105534:	4ba4      	ldr	r3, [pc, #656]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105538:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 810553c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105540:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105544:	4aa0      	ldr	r2, [pc, #640]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105546:	430b      	orrs	r3, r1
 8105548:	6593      	str	r3, [r2, #88]	; 0x58
 810554a:	e003      	b.n	8105554 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810554c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105550:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105558:	e9d3 2300 	ldrd	r2, r3, [r3]
 810555c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8105560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8105564:	2300      	movs	r3, #0
 8105566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 810556a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 810556e:	460b      	mov	r3, r1
 8105570:	4313      	orrs	r3, r2
 8105572:	d037      	beq.n	81055e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8105574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810557a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810557e:	d00e      	beq.n	810559e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8105580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105584:	d816      	bhi.n	81055b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8105586:	2b00      	cmp	r3, #0
 8105588:	d018      	beq.n	81055bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 810558a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810558e:	d111      	bne.n	81055b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105590:	4b8d      	ldr	r3, [pc, #564]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105594:	4a8c      	ldr	r2, [pc, #560]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810559a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810559c:	e00f      	b.n	81055be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810559e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055a2:	3308      	adds	r3, #8
 81055a4:	2101      	movs	r1, #1
 81055a6:	4618      	mov	r0, r3
 81055a8:	f001 f94c 	bl	8106844 <RCCEx_PLL2_Config>
 81055ac:	4603      	mov	r3, r0
 81055ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81055b2:	e004      	b.n	81055be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81055b4:	2301      	movs	r3, #1
 81055b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81055ba:	e000      	b.n	81055be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 81055bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81055be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81055c2:	2b00      	cmp	r3, #0
 81055c4:	d10a      	bne.n	81055dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81055c6:	4b80      	ldr	r3, [pc, #512]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81055c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81055ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 81055ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81055d4:	4a7c      	ldr	r2, [pc, #496]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81055d6:	430b      	orrs	r3, r1
 81055d8:	6513      	str	r3, [r2, #80]	; 0x50
 81055da:	e003      	b.n	81055e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81055dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81055e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81055e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81055ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 81055f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 81055f4:	2300      	movs	r3, #0
 81055f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 81055fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 81055fe:	460b      	mov	r3, r1
 8105600:	4313      	orrs	r3, r2
 8105602:	d039      	beq.n	8105678 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8105604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810560a:	2b03      	cmp	r3, #3
 810560c:	d81c      	bhi.n	8105648 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810560e:	a201      	add	r2, pc, #4	; (adr r2, 8105614 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8105610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105614:	08105651 	.word	0x08105651
 8105618:	08105625 	.word	0x08105625
 810561c:	08105633 	.word	0x08105633
 8105620:	08105651 	.word	0x08105651
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105624:	4b68      	ldr	r3, [pc, #416]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105628:	4a67      	ldr	r2, [pc, #412]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810562a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810562e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105630:	e00f      	b.n	8105652 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105636:	3308      	adds	r3, #8
 8105638:	2102      	movs	r1, #2
 810563a:	4618      	mov	r0, r3
 810563c:	f001 f902 	bl	8106844 <RCCEx_PLL2_Config>
 8105640:	4603      	mov	r3, r0
 8105642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105646:	e004      	b.n	8105652 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105648:	2301      	movs	r3, #1
 810564a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810564e:	e000      	b.n	8105652 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8105650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105656:	2b00      	cmp	r3, #0
 8105658:	d10a      	bne.n	8105670 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810565a:	4b5b      	ldr	r3, [pc, #364]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810565c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810565e:	f023 0103 	bic.w	r1, r3, #3
 8105662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105668:	4a57      	ldr	r2, [pc, #348]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810566a:	430b      	orrs	r3, r1
 810566c:	64d3      	str	r3, [r2, #76]	; 0x4c
 810566e:	e003      	b.n	8105678 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105680:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8105684:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8105688:	2300      	movs	r3, #0
 810568a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 810568e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8105692:	460b      	mov	r3, r1
 8105694:	4313      	orrs	r3, r2
 8105696:	f000 809f 	beq.w	81057d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810569a:	4b4c      	ldr	r3, [pc, #304]	; (81057cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810569c:	681b      	ldr	r3, [r3, #0]
 810569e:	4a4b      	ldr	r2, [pc, #300]	; (81057cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81056a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81056a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81056a6:	f7fd f971 	bl	810298c <HAL_GetTick>
 81056aa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81056ae:	e00b      	b.n	81056c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81056b0:	f7fd f96c 	bl	810298c <HAL_GetTick>
 81056b4:	4602      	mov	r2, r0
 81056b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 81056ba:	1ad3      	subs	r3, r2, r3
 81056bc:	2b64      	cmp	r3, #100	; 0x64
 81056be:	d903      	bls.n	81056c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 81056c0:	2303      	movs	r3, #3
 81056c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81056c6:	e005      	b.n	81056d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81056c8:	4b40      	ldr	r3, [pc, #256]	; (81057cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81056d0:	2b00      	cmp	r3, #0
 81056d2:	d0ed      	beq.n	81056b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81056d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81056d8:	2b00      	cmp	r3, #0
 81056da:	d179      	bne.n	81057d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81056dc:	4b3a      	ldr	r3, [pc, #232]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81056de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81056e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81056e8:	4053      	eors	r3, r2
 81056ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81056ee:	2b00      	cmp	r3, #0
 81056f0:	d015      	beq.n	810571e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81056f2:	4b35      	ldr	r3, [pc, #212]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81056f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81056fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81056fe:	4b32      	ldr	r3, [pc, #200]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105702:	4a31      	ldr	r2, [pc, #196]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105708:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810570a:	4b2f      	ldr	r3, [pc, #188]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810570c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810570e:	4a2e      	ldr	r2, [pc, #184]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105714:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105716:	4a2c      	ldr	r2, [pc, #176]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105718:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810571c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810571e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105722:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810572a:	d118      	bne.n	810575e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810572c:	f7fd f92e 	bl	810298c <HAL_GetTick>
 8105730:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105734:	e00d      	b.n	8105752 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105736:	f7fd f929 	bl	810298c <HAL_GetTick>
 810573a:	4602      	mov	r2, r0
 810573c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8105740:	1ad2      	subs	r2, r2, r3
 8105742:	f241 3388 	movw	r3, #5000	; 0x1388
 8105746:	429a      	cmp	r2, r3
 8105748:	d903      	bls.n	8105752 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810574a:	2303      	movs	r3, #3
 810574c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8105750:	e005      	b.n	810575e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105752:	4b1d      	ldr	r3, [pc, #116]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105756:	f003 0302 	and.w	r3, r3, #2
 810575a:	2b00      	cmp	r3, #0
 810575c:	d0eb      	beq.n	8105736 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810575e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105762:	2b00      	cmp	r3, #0
 8105764:	d12b      	bne.n	81057be <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810576a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810576e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105776:	d110      	bne.n	810579a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8105778:	4b13      	ldr	r3, [pc, #76]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810577a:	691b      	ldr	r3, [r3, #16]
 810577c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8105780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105784:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105788:	091b      	lsrs	r3, r3, #4
 810578a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810578e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8105792:	4a0d      	ldr	r2, [pc, #52]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105794:	430b      	orrs	r3, r1
 8105796:	6113      	str	r3, [r2, #16]
 8105798:	e005      	b.n	81057a6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810579a:	4b0b      	ldr	r3, [pc, #44]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810579c:	691b      	ldr	r3, [r3, #16]
 810579e:	4a0a      	ldr	r2, [pc, #40]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81057a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81057a4:	6113      	str	r3, [r2, #16]
 81057a6:	4b08      	ldr	r3, [pc, #32]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81057a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 81057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81057ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81057b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81057b6:	4a04      	ldr	r2, [pc, #16]	; (81057c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81057b8:	430b      	orrs	r3, r1
 81057ba:	6713      	str	r3, [r2, #112]	; 0x70
 81057bc:	e00c      	b.n	81057d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81057be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81057c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 81057c6:	e007      	b.n	81057d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81057c8:	58024400 	.word	0x58024400
 81057cc:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81057d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81057d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81057d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81057e0:	f002 0301 	and.w	r3, r2, #1
 81057e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 81057e8:	2300      	movs	r3, #0
 81057ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 81057ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 81057f2:	460b      	mov	r3, r1
 81057f4:	4313      	orrs	r3, r2
 81057f6:	f000 8089 	beq.w	810590c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81057fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105800:	2b28      	cmp	r3, #40	; 0x28
 8105802:	d86b      	bhi.n	81058dc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8105804:	a201      	add	r2, pc, #4	; (adr r2, 810580c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8105806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810580a:	bf00      	nop
 810580c:	081058e5 	.word	0x081058e5
 8105810:	081058dd 	.word	0x081058dd
 8105814:	081058dd 	.word	0x081058dd
 8105818:	081058dd 	.word	0x081058dd
 810581c:	081058dd 	.word	0x081058dd
 8105820:	081058dd 	.word	0x081058dd
 8105824:	081058dd 	.word	0x081058dd
 8105828:	081058dd 	.word	0x081058dd
 810582c:	081058b1 	.word	0x081058b1
 8105830:	081058dd 	.word	0x081058dd
 8105834:	081058dd 	.word	0x081058dd
 8105838:	081058dd 	.word	0x081058dd
 810583c:	081058dd 	.word	0x081058dd
 8105840:	081058dd 	.word	0x081058dd
 8105844:	081058dd 	.word	0x081058dd
 8105848:	081058dd 	.word	0x081058dd
 810584c:	081058c7 	.word	0x081058c7
 8105850:	081058dd 	.word	0x081058dd
 8105854:	081058dd 	.word	0x081058dd
 8105858:	081058dd 	.word	0x081058dd
 810585c:	081058dd 	.word	0x081058dd
 8105860:	081058dd 	.word	0x081058dd
 8105864:	081058dd 	.word	0x081058dd
 8105868:	081058dd 	.word	0x081058dd
 810586c:	081058e5 	.word	0x081058e5
 8105870:	081058dd 	.word	0x081058dd
 8105874:	081058dd 	.word	0x081058dd
 8105878:	081058dd 	.word	0x081058dd
 810587c:	081058dd 	.word	0x081058dd
 8105880:	081058dd 	.word	0x081058dd
 8105884:	081058dd 	.word	0x081058dd
 8105888:	081058dd 	.word	0x081058dd
 810588c:	081058e5 	.word	0x081058e5
 8105890:	081058dd 	.word	0x081058dd
 8105894:	081058dd 	.word	0x081058dd
 8105898:	081058dd 	.word	0x081058dd
 810589c:	081058dd 	.word	0x081058dd
 81058a0:	081058dd 	.word	0x081058dd
 81058a4:	081058dd 	.word	0x081058dd
 81058a8:	081058dd 	.word	0x081058dd
 81058ac:	081058e5 	.word	0x081058e5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81058b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81058b4:	3308      	adds	r3, #8
 81058b6:	2101      	movs	r1, #1
 81058b8:	4618      	mov	r0, r3
 81058ba:	f000 ffc3 	bl	8106844 <RCCEx_PLL2_Config>
 81058be:	4603      	mov	r3, r0
 81058c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81058c4:	e00f      	b.n	81058e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81058c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81058ca:	3328      	adds	r3, #40	; 0x28
 81058cc:	2101      	movs	r1, #1
 81058ce:	4618      	mov	r0, r3
 81058d0:	f001 f86a 	bl	81069a8 <RCCEx_PLL3_Config>
 81058d4:	4603      	mov	r3, r0
 81058d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81058da:	e004      	b.n	81058e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81058dc:	2301      	movs	r3, #1
 81058de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81058e2:	e000      	b.n	81058e6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81058e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81058e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81058ea:	2b00      	cmp	r3, #0
 81058ec:	d10a      	bne.n	8105904 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81058ee:	4bbf      	ldr	r3, [pc, #764]	; (8105bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81058f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81058f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 81058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81058fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81058fc:	4abb      	ldr	r2, [pc, #748]	; (8105bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81058fe:	430b      	orrs	r3, r1
 8105900:	6553      	str	r3, [r2, #84]	; 0x54
 8105902:	e003      	b.n	810590c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105908:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810590c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105914:	f002 0302 	and.w	r3, r2, #2
 8105918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 810591c:	2300      	movs	r3, #0
 810591e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8105922:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8105926:	460b      	mov	r3, r1
 8105928:	4313      	orrs	r3, r2
 810592a:	d041      	beq.n	81059b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810592c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105932:	2b05      	cmp	r3, #5
 8105934:	d824      	bhi.n	8105980 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8105936:	a201      	add	r2, pc, #4	; (adr r2, 810593c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8105938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810593c:	08105989 	.word	0x08105989
 8105940:	08105955 	.word	0x08105955
 8105944:	0810596b 	.word	0x0810596b
 8105948:	08105989 	.word	0x08105989
 810594c:	08105989 	.word	0x08105989
 8105950:	08105989 	.word	0x08105989
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105958:	3308      	adds	r3, #8
 810595a:	2101      	movs	r1, #1
 810595c:	4618      	mov	r0, r3
 810595e:	f000 ff71 	bl	8106844 <RCCEx_PLL2_Config>
 8105962:	4603      	mov	r3, r0
 8105964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105968:	e00f      	b.n	810598a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810596e:	3328      	adds	r3, #40	; 0x28
 8105970:	2101      	movs	r1, #1
 8105972:	4618      	mov	r0, r3
 8105974:	f001 f818 	bl	81069a8 <RCCEx_PLL3_Config>
 8105978:	4603      	mov	r3, r0
 810597a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810597e:	e004      	b.n	810598a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105980:	2301      	movs	r3, #1
 8105982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105986:	e000      	b.n	810598a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8105988:	bf00      	nop
    }

    if (ret == HAL_OK)
 810598a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810598e:	2b00      	cmp	r3, #0
 8105990:	d10a      	bne.n	81059a8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8105992:	4b96      	ldr	r3, [pc, #600]	; (8105bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105996:	f023 0107 	bic.w	r1, r3, #7
 810599a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810599e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81059a0:	4a92      	ldr	r2, [pc, #584]	; (8105bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81059a2:	430b      	orrs	r3, r1
 81059a4:	6553      	str	r3, [r2, #84]	; 0x54
 81059a6:	e003      	b.n	81059b0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81059a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81059ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81059b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81059b8:	f002 0304 	and.w	r3, r2, #4
 81059bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 81059c0:	2300      	movs	r3, #0
 81059c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81059c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 81059ca:	460b      	mov	r3, r1
 81059cc:	4313      	orrs	r3, r2
 81059ce:	d044      	beq.n	8105a5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81059d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81059d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81059d8:	2b05      	cmp	r3, #5
 81059da:	d825      	bhi.n	8105a28 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81059dc:	a201      	add	r2, pc, #4	; (adr r2, 81059e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81059de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81059e2:	bf00      	nop
 81059e4:	08105a31 	.word	0x08105a31
 81059e8:	081059fd 	.word	0x081059fd
 81059ec:	08105a13 	.word	0x08105a13
 81059f0:	08105a31 	.word	0x08105a31
 81059f4:	08105a31 	.word	0x08105a31
 81059f8:	08105a31 	.word	0x08105a31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81059fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a00:	3308      	adds	r3, #8
 8105a02:	2101      	movs	r1, #1
 8105a04:	4618      	mov	r0, r3
 8105a06:	f000 ff1d 	bl	8106844 <RCCEx_PLL2_Config>
 8105a0a:	4603      	mov	r3, r0
 8105a0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105a10:	e00f      	b.n	8105a32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a16:	3328      	adds	r3, #40	; 0x28
 8105a18:	2101      	movs	r1, #1
 8105a1a:	4618      	mov	r0, r3
 8105a1c:	f000 ffc4 	bl	81069a8 <RCCEx_PLL3_Config>
 8105a20:	4603      	mov	r3, r0
 8105a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105a26:	e004      	b.n	8105a32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105a28:	2301      	movs	r3, #1
 8105a2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105a2e:	e000      	b.n	8105a32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8105a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105a36:	2b00      	cmp	r3, #0
 8105a38:	d10b      	bne.n	8105a52 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8105a3a:	4b6c      	ldr	r3, [pc, #432]	; (8105bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105a3e:	f023 0107 	bic.w	r1, r3, #7
 8105a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8105a4a:	4a68      	ldr	r2, [pc, #416]	; (8105bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105a4c:	430b      	orrs	r3, r1
 8105a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8105a50:	e003      	b.n	8105a5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105a56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a62:	f002 0320 	and.w	r3, r2, #32
 8105a66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8105a6a:	2300      	movs	r3, #0
 8105a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8105a70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8105a74:	460b      	mov	r3, r1
 8105a76:	4313      	orrs	r3, r2
 8105a78:	d055      	beq.n	8105b26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8105a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105a86:	d033      	beq.n	8105af0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8105a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105a8c:	d82c      	bhi.n	8105ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105a92:	d02f      	beq.n	8105af4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8105a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105a98:	d826      	bhi.n	8105ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105a9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105a9e:	d02b      	beq.n	8105af8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8105aa0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105aa4:	d820      	bhi.n	8105ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105aaa:	d012      	beq.n	8105ad2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8105aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105ab0:	d81a      	bhi.n	8105ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105ab2:	2b00      	cmp	r3, #0
 8105ab4:	d022      	beq.n	8105afc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8105ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105aba:	d115      	bne.n	8105ae8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ac0:	3308      	adds	r3, #8
 8105ac2:	2100      	movs	r1, #0
 8105ac4:	4618      	mov	r0, r3
 8105ac6:	f000 febd 	bl	8106844 <RCCEx_PLL2_Config>
 8105aca:	4603      	mov	r3, r0
 8105acc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8105ad0:	e015      	b.n	8105afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ad6:	3328      	adds	r3, #40	; 0x28
 8105ad8:	2102      	movs	r1, #2
 8105ada:	4618      	mov	r0, r3
 8105adc:	f000 ff64 	bl	81069a8 <RCCEx_PLL3_Config>
 8105ae0:	4603      	mov	r3, r0
 8105ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8105ae6:	e00a      	b.n	8105afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105ae8:	2301      	movs	r3, #1
 8105aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105aee:	e006      	b.n	8105afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105af0:	bf00      	nop
 8105af2:	e004      	b.n	8105afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105af4:	bf00      	nop
 8105af6:	e002      	b.n	8105afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105af8:	bf00      	nop
 8105afa:	e000      	b.n	8105afe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b02:	2b00      	cmp	r3, #0
 8105b04:	d10b      	bne.n	8105b1e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8105b06:	4b39      	ldr	r3, [pc, #228]	; (8105bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b0a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8105b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105b16:	4a35      	ldr	r2, [pc, #212]	; (8105bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105b18:	430b      	orrs	r3, r1
 8105b1a:	6553      	str	r3, [r2, #84]	; 0x54
 8105b1c:	e003      	b.n	8105b26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8105b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b2e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8105b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8105b36:	2300      	movs	r3, #0
 8105b38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8105b3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8105b40:	460b      	mov	r3, r1
 8105b42:	4313      	orrs	r3, r2
 8105b44:	d058      	beq.n	8105bf8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8105b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105b4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105b52:	d033      	beq.n	8105bbc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8105b54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105b58:	d82c      	bhi.n	8105bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105b5e:	d02f      	beq.n	8105bc0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8105b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105b64:	d826      	bhi.n	8105bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105b66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105b6a:	d02b      	beq.n	8105bc4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8105b6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105b70:	d820      	bhi.n	8105bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105b76:	d012      	beq.n	8105b9e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8105b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105b7c:	d81a      	bhi.n	8105bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105b7e:	2b00      	cmp	r3, #0
 8105b80:	d022      	beq.n	8105bc8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8105b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8105b86:	d115      	bne.n	8105bb4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b8c:	3308      	adds	r3, #8
 8105b8e:	2100      	movs	r1, #0
 8105b90:	4618      	mov	r0, r3
 8105b92:	f000 fe57 	bl	8106844 <RCCEx_PLL2_Config>
 8105b96:	4603      	mov	r3, r0
 8105b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8105b9c:	e015      	b.n	8105bca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ba2:	3328      	adds	r3, #40	; 0x28
 8105ba4:	2102      	movs	r1, #2
 8105ba6:	4618      	mov	r0, r3
 8105ba8:	f000 fefe 	bl	81069a8 <RCCEx_PLL3_Config>
 8105bac:	4603      	mov	r3, r0
 8105bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8105bb2:	e00a      	b.n	8105bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105bb4:	2301      	movs	r3, #1
 8105bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105bba:	e006      	b.n	8105bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105bbc:	bf00      	nop
 8105bbe:	e004      	b.n	8105bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105bc0:	bf00      	nop
 8105bc2:	e002      	b.n	8105bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105bc4:	bf00      	nop
 8105bc6:	e000      	b.n	8105bca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105bce:	2b00      	cmp	r3, #0
 8105bd0:	d10e      	bne.n	8105bf0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8105bd2:	4b06      	ldr	r3, [pc, #24]	; (8105bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105bd6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8105bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105be2:	4a02      	ldr	r2, [pc, #8]	; (8105bec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105be4:	430b      	orrs	r3, r1
 8105be6:	6593      	str	r3, [r2, #88]	; 0x58
 8105be8:	e006      	b.n	8105bf8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8105bea:	bf00      	nop
 8105bec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105bf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c00:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8105c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8105c08:	2300      	movs	r3, #0
 8105c0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8105c0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8105c12:	460b      	mov	r3, r1
 8105c14:	4313      	orrs	r3, r2
 8105c16:	d055      	beq.n	8105cc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8105c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105c20:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8105c24:	d033      	beq.n	8105c8e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8105c26:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8105c2a:	d82c      	bhi.n	8105c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105c30:	d02f      	beq.n	8105c92 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8105c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105c36:	d826      	bhi.n	8105c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105c38:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8105c3c:	d02b      	beq.n	8105c96 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8105c3e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8105c42:	d820      	bhi.n	8105c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105c48:	d012      	beq.n	8105c70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8105c4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105c4e:	d81a      	bhi.n	8105c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105c50:	2b00      	cmp	r3, #0
 8105c52:	d022      	beq.n	8105c9a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8105c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105c58:	d115      	bne.n	8105c86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c5e:	3308      	adds	r3, #8
 8105c60:	2100      	movs	r1, #0
 8105c62:	4618      	mov	r0, r3
 8105c64:	f000 fdee 	bl	8106844 <RCCEx_PLL2_Config>
 8105c68:	4603      	mov	r3, r0
 8105c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105c6e:	e015      	b.n	8105c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c74:	3328      	adds	r3, #40	; 0x28
 8105c76:	2102      	movs	r1, #2
 8105c78:	4618      	mov	r0, r3
 8105c7a:	f000 fe95 	bl	81069a8 <RCCEx_PLL3_Config>
 8105c7e:	4603      	mov	r3, r0
 8105c80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105c84:	e00a      	b.n	8105c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105c86:	2301      	movs	r3, #1
 8105c88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105c8c:	e006      	b.n	8105c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105c8e:	bf00      	nop
 8105c90:	e004      	b.n	8105c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105c92:	bf00      	nop
 8105c94:	e002      	b.n	8105c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105c96:	bf00      	nop
 8105c98:	e000      	b.n	8105c9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105ca0:	2b00      	cmp	r3, #0
 8105ca2:	d10b      	bne.n	8105cbc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8105ca4:	4ba1      	ldr	r3, [pc, #644]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105ca8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8105cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105cb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105cb4:	4a9d      	ldr	r2, [pc, #628]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105cb6:	430b      	orrs	r3, r1
 8105cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8105cba:	e003      	b.n	8105cc4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105cc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ccc:	f002 0308 	and.w	r3, r2, #8
 8105cd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8105cd4:	2300      	movs	r3, #0
 8105cd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8105cda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8105cde:	460b      	mov	r3, r1
 8105ce0:	4313      	orrs	r3, r2
 8105ce2:	d01e      	beq.n	8105d22 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8105ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105cf0:	d10c      	bne.n	8105d0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105cf6:	3328      	adds	r3, #40	; 0x28
 8105cf8:	2102      	movs	r1, #2
 8105cfa:	4618      	mov	r0, r3
 8105cfc:	f000 fe54 	bl	81069a8 <RCCEx_PLL3_Config>
 8105d00:	4603      	mov	r3, r0
 8105d02:	2b00      	cmp	r3, #0
 8105d04:	d002      	beq.n	8105d0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8105d06:	2301      	movs	r3, #1
 8105d08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105d0c:	4b87      	ldr	r3, [pc, #540]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105d10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8105d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105d1c:	4a83      	ldr	r2, [pc, #524]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105d1e:	430b      	orrs	r3, r1
 8105d20:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8105d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d2a:	f002 0310 	and.w	r3, r2, #16
 8105d2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8105d32:	2300      	movs	r3, #0
 8105d34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8105d38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8105d3c:	460b      	mov	r3, r1
 8105d3e:	4313      	orrs	r3, r2
 8105d40:	d01e      	beq.n	8105d80 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8105d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8105d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105d4e:	d10c      	bne.n	8105d6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d54:	3328      	adds	r3, #40	; 0x28
 8105d56:	2102      	movs	r1, #2
 8105d58:	4618      	mov	r0, r3
 8105d5a:	f000 fe25 	bl	81069a8 <RCCEx_PLL3_Config>
 8105d5e:	4603      	mov	r3, r0
 8105d60:	2b00      	cmp	r3, #0
 8105d62:	d002      	beq.n	8105d6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8105d64:	2301      	movs	r3, #1
 8105d66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105d6a:	4b70      	ldr	r3, [pc, #448]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105d6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8105d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8105d7a:	4a6c      	ldr	r2, [pc, #432]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105d7c:	430b      	orrs	r3, r1
 8105d7e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d88:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8105d8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8105d90:	2300      	movs	r3, #0
 8105d92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8105d96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8105d9a:	460b      	mov	r3, r1
 8105d9c:	4313      	orrs	r3, r2
 8105d9e:	d03e      	beq.n	8105e1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8105da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105da4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105da8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105dac:	d022      	beq.n	8105df4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8105dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105db2:	d81b      	bhi.n	8105dec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8105db4:	2b00      	cmp	r3, #0
 8105db6:	d003      	beq.n	8105dc0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8105db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105dbc:	d00b      	beq.n	8105dd6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8105dbe:	e015      	b.n	8105dec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105dc4:	3308      	adds	r3, #8
 8105dc6:	2100      	movs	r1, #0
 8105dc8:	4618      	mov	r0, r3
 8105dca:	f000 fd3b 	bl	8106844 <RCCEx_PLL2_Config>
 8105dce:	4603      	mov	r3, r0
 8105dd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105dd4:	e00f      	b.n	8105df6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105dda:	3328      	adds	r3, #40	; 0x28
 8105ddc:	2102      	movs	r1, #2
 8105dde:	4618      	mov	r0, r3
 8105de0:	f000 fde2 	bl	81069a8 <RCCEx_PLL3_Config>
 8105de4:	4603      	mov	r3, r0
 8105de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105dea:	e004      	b.n	8105df6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105dec:	2301      	movs	r3, #1
 8105dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105df2:	e000      	b.n	8105df6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8105df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105df6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105dfa:	2b00      	cmp	r3, #0
 8105dfc:	d10b      	bne.n	8105e16 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105dfe:	4b4b      	ldr	r3, [pc, #300]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105e02:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8105e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105e0e:	4a47      	ldr	r2, [pc, #284]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105e10:	430b      	orrs	r3, r1
 8105e12:	6593      	str	r3, [r2, #88]	; 0x58
 8105e14:	e003      	b.n	8105e1e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e26:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8105e2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8105e2c:	2300      	movs	r3, #0
 8105e2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8105e30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8105e34:	460b      	mov	r3, r1
 8105e36:	4313      	orrs	r3, r2
 8105e38:	d03b      	beq.n	8105eb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8105e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105e42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105e46:	d01f      	beq.n	8105e88 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8105e48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105e4c:	d818      	bhi.n	8105e80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8105e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105e52:	d003      	beq.n	8105e5c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8105e54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105e58:	d007      	beq.n	8105e6a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8105e5a:	e011      	b.n	8105e80 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e5c:	4b33      	ldr	r3, [pc, #204]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e60:	4a32      	ldr	r2, [pc, #200]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105e66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8105e68:	e00f      	b.n	8105e8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e6e:	3328      	adds	r3, #40	; 0x28
 8105e70:	2101      	movs	r1, #1
 8105e72:	4618      	mov	r0, r3
 8105e74:	f000 fd98 	bl	81069a8 <RCCEx_PLL3_Config>
 8105e78:	4603      	mov	r3, r0
 8105e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8105e7e:	e004      	b.n	8105e8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105e80:	2301      	movs	r3, #1
 8105e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105e86:	e000      	b.n	8105e8a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8105e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e8e:	2b00      	cmp	r3, #0
 8105e90:	d10b      	bne.n	8105eaa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8105e92:	4b26      	ldr	r3, [pc, #152]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105e96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8105e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105ea2:	4a22      	ldr	r2, [pc, #136]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105ea4:	430b      	orrs	r3, r1
 8105ea6:	6553      	str	r3, [r2, #84]	; 0x54
 8105ea8:	e003      	b.n	8105eb2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105eae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105eba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8105ebe:	673b      	str	r3, [r7, #112]	; 0x70
 8105ec0:	2300      	movs	r3, #0
 8105ec2:	677b      	str	r3, [r7, #116]	; 0x74
 8105ec4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8105ec8:	460b      	mov	r3, r1
 8105eca:	4313      	orrs	r3, r2
 8105ecc:	d034      	beq.n	8105f38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8105ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105ed4:	2b00      	cmp	r3, #0
 8105ed6:	d003      	beq.n	8105ee0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8105ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105edc:	d007      	beq.n	8105eee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8105ede:	e011      	b.n	8105f04 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ee0:	4b12      	ldr	r3, [pc, #72]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ee4:	4a11      	ldr	r2, [pc, #68]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105eea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8105eec:	e00e      	b.n	8105f0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ef2:	3308      	adds	r3, #8
 8105ef4:	2102      	movs	r1, #2
 8105ef6:	4618      	mov	r0, r3
 8105ef8:	f000 fca4 	bl	8106844 <RCCEx_PLL2_Config>
 8105efc:	4603      	mov	r3, r0
 8105efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8105f02:	e003      	b.n	8105f0c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8105f04:	2301      	movs	r3, #1
 8105f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105f10:	2b00      	cmp	r3, #0
 8105f12:	d10d      	bne.n	8105f30 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105f14:	4b05      	ldr	r3, [pc, #20]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105f18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105f22:	4a02      	ldr	r2, [pc, #8]	; (8105f2c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105f24:	430b      	orrs	r3, r1
 8105f26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8105f28:	e006      	b.n	8105f38 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8105f2a:	bf00      	nop
 8105f2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105f34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f40:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8105f44:	66bb      	str	r3, [r7, #104]	; 0x68
 8105f46:	2300      	movs	r3, #0
 8105f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8105f4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8105f4e:	460b      	mov	r3, r1
 8105f50:	4313      	orrs	r3, r2
 8105f52:	d00c      	beq.n	8105f6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f58:	3328      	adds	r3, #40	; 0x28
 8105f5a:	2102      	movs	r1, #2
 8105f5c:	4618      	mov	r0, r3
 8105f5e:	f000 fd23 	bl	81069a8 <RCCEx_PLL3_Config>
 8105f62:	4603      	mov	r3, r0
 8105f64:	2b00      	cmp	r3, #0
 8105f66:	d002      	beq.n	8105f6e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8105f68:	2301      	movs	r3, #1
 8105f6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f76:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8105f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8105f7c:	2300      	movs	r3, #0
 8105f7e:	667b      	str	r3, [r7, #100]	; 0x64
 8105f80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8105f84:	460b      	mov	r3, r1
 8105f86:	4313      	orrs	r3, r2
 8105f88:	d038      	beq.n	8105ffc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8105f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105f96:	d018      	beq.n	8105fca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8105f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105f9c:	d811      	bhi.n	8105fc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8105f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105fa2:	d014      	beq.n	8105fce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8105fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105fa8:	d80b      	bhi.n	8105fc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8105faa:	2b00      	cmp	r3, #0
 8105fac:	d011      	beq.n	8105fd2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8105fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105fb2:	d106      	bne.n	8105fc2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105fb4:	4bc3      	ldr	r3, [pc, #780]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105fb8:	4ac2      	ldr	r2, [pc, #776]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8105fc0:	e008      	b.n	8105fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105fc2:	2301      	movs	r3, #1
 8105fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105fc8:	e004      	b.n	8105fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105fca:	bf00      	nop
 8105fcc:	e002      	b.n	8105fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105fce:	bf00      	nop
 8105fd0:	e000      	b.n	8105fd4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105fd8:	2b00      	cmp	r3, #0
 8105fda:	d10b      	bne.n	8105ff4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8105fdc:	4bb9      	ldr	r3, [pc, #740]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105fe0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8105fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105fec:	4ab5      	ldr	r2, [pc, #724]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105fee:	430b      	orrs	r3, r1
 8105ff0:	6553      	str	r3, [r2, #84]	; 0x54
 8105ff2:	e003      	b.n	8105ffc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105ff8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8105ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106004:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8106008:	65bb      	str	r3, [r7, #88]	; 0x58
 810600a:	2300      	movs	r3, #0
 810600c:	65fb      	str	r3, [r7, #92]	; 0x5c
 810600e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8106012:	460b      	mov	r3, r1
 8106014:	4313      	orrs	r3, r2
 8106016:	d009      	beq.n	810602c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106018:	4baa      	ldr	r3, [pc, #680]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810601a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810601c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8106020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106026:	4aa7      	ldr	r2, [pc, #668]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106028:	430b      	orrs	r3, r1
 810602a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106034:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8106038:	653b      	str	r3, [r7, #80]	; 0x50
 810603a:	2300      	movs	r3, #0
 810603c:	657b      	str	r3, [r7, #84]	; 0x54
 810603e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8106042:	460b      	mov	r3, r1
 8106044:	4313      	orrs	r3, r2
 8106046:	d00a      	beq.n	810605e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106048:	4b9e      	ldr	r3, [pc, #632]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810604a:	691b      	ldr	r3, [r3, #16]
 810604c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8106050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106054:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8106058:	4a9a      	ldr	r2, [pc, #616]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810605a:	430b      	orrs	r3, r1
 810605c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810605e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106066:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 810606a:	64bb      	str	r3, [r7, #72]	; 0x48
 810606c:	2300      	movs	r3, #0
 810606e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8106070:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8106074:	460b      	mov	r3, r1
 8106076:	4313      	orrs	r3, r2
 8106078:	d009      	beq.n	810608e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810607a:	4b92      	ldr	r3, [pc, #584]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810607c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810607e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8106082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106088:	4a8e      	ldr	r2, [pc, #568]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810608a:	430b      	orrs	r3, r1
 810608c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810608e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106096:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 810609a:	643b      	str	r3, [r7, #64]	; 0x40
 810609c:	2300      	movs	r3, #0
 810609e:	647b      	str	r3, [r7, #68]	; 0x44
 81060a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 81060a4:	460b      	mov	r3, r1
 81060a6:	4313      	orrs	r3, r2
 81060a8:	d00e      	beq.n	81060c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81060aa:	4b86      	ldr	r3, [pc, #536]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81060ac:	691b      	ldr	r3, [r3, #16]
 81060ae:	4a85      	ldr	r2, [pc, #532]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81060b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81060b4:	6113      	str	r3, [r2, #16]
 81060b6:	4b83      	ldr	r3, [pc, #524]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81060b8:	6919      	ldr	r1, [r3, #16]
 81060ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 81060c2:	4a80      	ldr	r2, [pc, #512]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81060c4:	430b      	orrs	r3, r1
 81060c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81060c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81060d0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 81060d4:	63bb      	str	r3, [r7, #56]	; 0x38
 81060d6:	2300      	movs	r3, #0
 81060d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81060da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 81060de:	460b      	mov	r3, r1
 81060e0:	4313      	orrs	r3, r2
 81060e2:	d009      	beq.n	81060f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81060e4:	4b77      	ldr	r3, [pc, #476]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81060e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81060e8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 81060ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81060f2:	4a74      	ldr	r2, [pc, #464]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81060f4:	430b      	orrs	r3, r1
 81060f6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81060f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106100:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8106104:	633b      	str	r3, [r7, #48]	; 0x30
 8106106:	2300      	movs	r3, #0
 8106108:	637b      	str	r3, [r7, #52]	; 0x34
 810610a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810610e:	460b      	mov	r3, r1
 8106110:	4313      	orrs	r3, r2
 8106112:	d00a      	beq.n	810612a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106114:	4b6b      	ldr	r3, [pc, #428]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106118:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 810611c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106124:	4a67      	ldr	r2, [pc, #412]	; (81062c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106126:	430b      	orrs	r3, r1
 8106128:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810612a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106132:	2100      	movs	r1, #0
 8106134:	62b9      	str	r1, [r7, #40]	; 0x28
 8106136:	f003 0301 	and.w	r3, r3, #1
 810613a:	62fb      	str	r3, [r7, #44]	; 0x2c
 810613c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8106140:	460b      	mov	r3, r1
 8106142:	4313      	orrs	r3, r2
 8106144:	d011      	beq.n	810616a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810614a:	3308      	adds	r3, #8
 810614c:	2100      	movs	r1, #0
 810614e:	4618      	mov	r0, r3
 8106150:	f000 fb78 	bl	8106844 <RCCEx_PLL2_Config>
 8106154:	4603      	mov	r3, r0
 8106156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810615a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810615e:	2b00      	cmp	r3, #0
 8106160:	d003      	beq.n	810616a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106166:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810616a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106172:	2100      	movs	r1, #0
 8106174:	6239      	str	r1, [r7, #32]
 8106176:	f003 0302 	and.w	r3, r3, #2
 810617a:	627b      	str	r3, [r7, #36]	; 0x24
 810617c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8106180:	460b      	mov	r3, r1
 8106182:	4313      	orrs	r3, r2
 8106184:	d011      	beq.n	81061aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810618a:	3308      	adds	r3, #8
 810618c:	2101      	movs	r1, #1
 810618e:	4618      	mov	r0, r3
 8106190:	f000 fb58 	bl	8106844 <RCCEx_PLL2_Config>
 8106194:	4603      	mov	r3, r0
 8106196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810619a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810619e:	2b00      	cmp	r3, #0
 81061a0:	d003      	beq.n	81061aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81061a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81061a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81061b2:	2100      	movs	r1, #0
 81061b4:	61b9      	str	r1, [r7, #24]
 81061b6:	f003 0304 	and.w	r3, r3, #4
 81061ba:	61fb      	str	r3, [r7, #28]
 81061bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81061c0:	460b      	mov	r3, r1
 81061c2:	4313      	orrs	r3, r2
 81061c4:	d011      	beq.n	81061ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81061c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061ca:	3308      	adds	r3, #8
 81061cc:	2102      	movs	r1, #2
 81061ce:	4618      	mov	r0, r3
 81061d0:	f000 fb38 	bl	8106844 <RCCEx_PLL2_Config>
 81061d4:	4603      	mov	r3, r0
 81061d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81061da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81061de:	2b00      	cmp	r3, #0
 81061e0:	d003      	beq.n	81061ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81061e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81061e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81061f2:	2100      	movs	r1, #0
 81061f4:	6139      	str	r1, [r7, #16]
 81061f6:	f003 0308 	and.w	r3, r3, #8
 81061fa:	617b      	str	r3, [r7, #20]
 81061fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8106200:	460b      	mov	r3, r1
 8106202:	4313      	orrs	r3, r2
 8106204:	d011      	beq.n	810622a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810620a:	3328      	adds	r3, #40	; 0x28
 810620c:	2100      	movs	r1, #0
 810620e:	4618      	mov	r0, r3
 8106210:	f000 fbca 	bl	81069a8 <RCCEx_PLL3_Config>
 8106214:	4603      	mov	r3, r0
 8106216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 810621a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810621e:	2b00      	cmp	r3, #0
 8106220:	d003      	beq.n	810622a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106226:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810622a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106232:	2100      	movs	r1, #0
 8106234:	60b9      	str	r1, [r7, #8]
 8106236:	f003 0310 	and.w	r3, r3, #16
 810623a:	60fb      	str	r3, [r7, #12]
 810623c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8106240:	460b      	mov	r3, r1
 8106242:	4313      	orrs	r3, r2
 8106244:	d011      	beq.n	810626a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810624a:	3328      	adds	r3, #40	; 0x28
 810624c:	2101      	movs	r1, #1
 810624e:	4618      	mov	r0, r3
 8106250:	f000 fbaa 	bl	81069a8 <RCCEx_PLL3_Config>
 8106254:	4603      	mov	r3, r0
 8106256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810625a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810625e:	2b00      	cmp	r3, #0
 8106260:	d003      	beq.n	810626a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106266:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106272:	2100      	movs	r1, #0
 8106274:	6039      	str	r1, [r7, #0]
 8106276:	f003 0320 	and.w	r3, r3, #32
 810627a:	607b      	str	r3, [r7, #4]
 810627c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8106280:	460b      	mov	r3, r1
 8106282:	4313      	orrs	r3, r2
 8106284:	d011      	beq.n	81062aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810628a:	3328      	adds	r3, #40	; 0x28
 810628c:	2102      	movs	r1, #2
 810628e:	4618      	mov	r0, r3
 8106290:	f000 fb8a 	bl	81069a8 <RCCEx_PLL3_Config>
 8106294:	4603      	mov	r3, r0
 8106296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810629a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810629e:	2b00      	cmp	r3, #0
 81062a0:	d003      	beq.n	81062aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81062a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81062a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 81062aa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 81062ae:	2b00      	cmp	r3, #0
 81062b0:	d101      	bne.n	81062b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 81062b2:	2300      	movs	r3, #0
 81062b4:	e000      	b.n	81062b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 81062b6:	2301      	movs	r3, #1
}
 81062b8:	4618      	mov	r0, r3
 81062ba:	f507 7794 	add.w	r7, r7, #296	; 0x128
 81062be:	46bd      	mov	sp, r7
 81062c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81062c4:	58024400 	.word	0x58024400

081062c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81062c8:	b580      	push	{r7, lr}
 81062ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81062cc:	f7fe fd94 	bl	8104df8 <HAL_RCC_GetHCLKFreq>
 81062d0:	4602      	mov	r2, r0
 81062d2:	4b06      	ldr	r3, [pc, #24]	; (81062ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81062d4:	6a1b      	ldr	r3, [r3, #32]
 81062d6:	091b      	lsrs	r3, r3, #4
 81062d8:	f003 0307 	and.w	r3, r3, #7
 81062dc:	4904      	ldr	r1, [pc, #16]	; (81062f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81062de:	5ccb      	ldrb	r3, [r1, r3]
 81062e0:	f003 031f 	and.w	r3, r3, #31
 81062e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81062e8:	4618      	mov	r0, r3
 81062ea:	bd80      	pop	{r7, pc}
 81062ec:	58024400 	.word	0x58024400
 81062f0:	0810e094 	.word	0x0810e094

081062f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81062f4:	b480      	push	{r7}
 81062f6:	b089      	sub	sp, #36	; 0x24
 81062f8:	af00      	add	r7, sp, #0
 81062fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81062fc:	4ba1      	ldr	r3, [pc, #644]	; (8106584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81062fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106300:	f003 0303 	and.w	r3, r3, #3
 8106304:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8106306:	4b9f      	ldr	r3, [pc, #636]	; (8106584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810630a:	0b1b      	lsrs	r3, r3, #12
 810630c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106310:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106312:	4b9c      	ldr	r3, [pc, #624]	; (8106584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106316:	091b      	lsrs	r3, r3, #4
 8106318:	f003 0301 	and.w	r3, r3, #1
 810631c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810631e:	4b99      	ldr	r3, [pc, #612]	; (8106584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106322:	08db      	lsrs	r3, r3, #3
 8106324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106328:	693a      	ldr	r2, [r7, #16]
 810632a:	fb02 f303 	mul.w	r3, r2, r3
 810632e:	ee07 3a90 	vmov	s15, r3
 8106332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106336:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810633a:	697b      	ldr	r3, [r7, #20]
 810633c:	2b00      	cmp	r3, #0
 810633e:	f000 8111 	beq.w	8106564 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8106342:	69bb      	ldr	r3, [r7, #24]
 8106344:	2b02      	cmp	r3, #2
 8106346:	f000 8083 	beq.w	8106450 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810634a:	69bb      	ldr	r3, [r7, #24]
 810634c:	2b02      	cmp	r3, #2
 810634e:	f200 80a1 	bhi.w	8106494 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8106352:	69bb      	ldr	r3, [r7, #24]
 8106354:	2b00      	cmp	r3, #0
 8106356:	d003      	beq.n	8106360 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8106358:	69bb      	ldr	r3, [r7, #24]
 810635a:	2b01      	cmp	r3, #1
 810635c:	d056      	beq.n	810640c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810635e:	e099      	b.n	8106494 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106360:	4b88      	ldr	r3, [pc, #544]	; (8106584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106362:	681b      	ldr	r3, [r3, #0]
 8106364:	f003 0320 	and.w	r3, r3, #32
 8106368:	2b00      	cmp	r3, #0
 810636a:	d02d      	beq.n	81063c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810636c:	4b85      	ldr	r3, [pc, #532]	; (8106584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810636e:	681b      	ldr	r3, [r3, #0]
 8106370:	08db      	lsrs	r3, r3, #3
 8106372:	f003 0303 	and.w	r3, r3, #3
 8106376:	4a84      	ldr	r2, [pc, #528]	; (8106588 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8106378:	fa22 f303 	lsr.w	r3, r2, r3
 810637c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810637e:	68bb      	ldr	r3, [r7, #8]
 8106380:	ee07 3a90 	vmov	s15, r3
 8106384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106388:	697b      	ldr	r3, [r7, #20]
 810638a:	ee07 3a90 	vmov	s15, r3
 810638e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106396:	4b7b      	ldr	r3, [pc, #492]	; (8106584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810639a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810639e:	ee07 3a90 	vmov	s15, r3
 81063a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81063aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 810658c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81063ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81063ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81063c6:	e087      	b.n	81064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81063c8:	697b      	ldr	r3, [r7, #20]
 81063ca:	ee07 3a90 	vmov	s15, r3
 81063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106590 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81063d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81063da:	4b6a      	ldr	r3, [pc, #424]	; (8106584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81063de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81063e2:	ee07 3a90 	vmov	s15, r3
 81063e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81063ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 810658c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81063f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81063fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810640a:	e065      	b.n	81064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810640c:	697b      	ldr	r3, [r7, #20]
 810640e:	ee07 3a90 	vmov	s15, r3
 8106412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106416:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8106594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810641a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810641e:	4b59      	ldr	r3, [pc, #356]	; (8106584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106426:	ee07 3a90 	vmov	s15, r3
 810642a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810642e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106432:	eddf 5a56 	vldr	s11, [pc, #344]	; 810658c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810643a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810643e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106446:	ee67 7a27 	vmul.f32	s15, s14, s15
 810644a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810644e:	e043      	b.n	81064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106450:	697b      	ldr	r3, [r7, #20]
 8106452:	ee07 3a90 	vmov	s15, r3
 8106456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810645a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106598 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810645e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106462:	4b48      	ldr	r3, [pc, #288]	; (8106584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810646a:	ee07 3a90 	vmov	s15, r3
 810646e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106472:	ed97 6a03 	vldr	s12, [r7, #12]
 8106476:	eddf 5a45 	vldr	s11, [pc, #276]	; 810658c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810647a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810647e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810648a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810648e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106492:	e021      	b.n	81064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106494:	697b      	ldr	r3, [r7, #20]
 8106496:	ee07 3a90 	vmov	s15, r3
 810649a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810649e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8106594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81064a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81064a6:	4b37      	ldr	r3, [pc, #220]	; (8106584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81064aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81064ae:	ee07 3a90 	vmov	s15, r3
 81064b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064b6:	ed97 6a03 	vldr	s12, [r7, #12]
 81064ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 810658c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81064be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81064ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81064d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81064d8:	4b2a      	ldr	r3, [pc, #168]	; (8106584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81064dc:	0a5b      	lsrs	r3, r3, #9
 81064de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81064e2:	ee07 3a90 	vmov	s15, r3
 81064e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81064ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 81064f2:	edd7 6a07 	vldr	s13, [r7, #28]
 81064f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81064fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81064fe:	ee17 2a90 	vmov	r2, s15
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8106506:	4b1f      	ldr	r3, [pc, #124]	; (8106584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810650a:	0c1b      	lsrs	r3, r3, #16
 810650c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106510:	ee07 3a90 	vmov	s15, r3
 8106514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810651c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106520:	edd7 6a07 	vldr	s13, [r7, #28]
 8106524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810652c:	ee17 2a90 	vmov	r2, s15
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8106534:	4b13      	ldr	r3, [pc, #76]	; (8106584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106538:	0e1b      	lsrs	r3, r3, #24
 810653a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810653e:	ee07 3a90 	vmov	s15, r3
 8106542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810654a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810654e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810655a:	ee17 2a90 	vmov	r2, s15
 810655e:	687b      	ldr	r3, [r7, #4]
 8106560:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8106562:	e008      	b.n	8106576 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8106564:	687b      	ldr	r3, [r7, #4]
 8106566:	2200      	movs	r2, #0
 8106568:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810656a:	687b      	ldr	r3, [r7, #4]
 810656c:	2200      	movs	r2, #0
 810656e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8106570:	687b      	ldr	r3, [r7, #4]
 8106572:	2200      	movs	r2, #0
 8106574:	609a      	str	r2, [r3, #8]
}
 8106576:	bf00      	nop
 8106578:	3724      	adds	r7, #36	; 0x24
 810657a:	46bd      	mov	sp, r7
 810657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106580:	4770      	bx	lr
 8106582:	bf00      	nop
 8106584:	58024400 	.word	0x58024400
 8106588:	03d09000 	.word	0x03d09000
 810658c:	46000000 	.word	0x46000000
 8106590:	4c742400 	.word	0x4c742400
 8106594:	4a742400 	.word	0x4a742400
 8106598:	4bbebc20 	.word	0x4bbebc20

0810659c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810659c:	b480      	push	{r7}
 810659e:	b089      	sub	sp, #36	; 0x24
 81065a0:	af00      	add	r7, sp, #0
 81065a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81065a4:	4ba1      	ldr	r3, [pc, #644]	; (810682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81065a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81065a8:	f003 0303 	and.w	r3, r3, #3
 81065ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81065ae:	4b9f      	ldr	r3, [pc, #636]	; (810682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81065b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81065b2:	0d1b      	lsrs	r3, r3, #20
 81065b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81065b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81065ba:	4b9c      	ldr	r3, [pc, #624]	; (810682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81065be:	0a1b      	lsrs	r3, r3, #8
 81065c0:	f003 0301 	and.w	r3, r3, #1
 81065c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81065c6:	4b99      	ldr	r3, [pc, #612]	; (810682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81065c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81065ca:	08db      	lsrs	r3, r3, #3
 81065cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81065d0:	693a      	ldr	r2, [r7, #16]
 81065d2:	fb02 f303 	mul.w	r3, r2, r3
 81065d6:	ee07 3a90 	vmov	s15, r3
 81065da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81065e2:	697b      	ldr	r3, [r7, #20]
 81065e4:	2b00      	cmp	r3, #0
 81065e6:	f000 8111 	beq.w	810680c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81065ea:	69bb      	ldr	r3, [r7, #24]
 81065ec:	2b02      	cmp	r3, #2
 81065ee:	f000 8083 	beq.w	81066f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81065f2:	69bb      	ldr	r3, [r7, #24]
 81065f4:	2b02      	cmp	r3, #2
 81065f6:	f200 80a1 	bhi.w	810673c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81065fa:	69bb      	ldr	r3, [r7, #24]
 81065fc:	2b00      	cmp	r3, #0
 81065fe:	d003      	beq.n	8106608 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8106600:	69bb      	ldr	r3, [r7, #24]
 8106602:	2b01      	cmp	r3, #1
 8106604:	d056      	beq.n	81066b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106606:	e099      	b.n	810673c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106608:	4b88      	ldr	r3, [pc, #544]	; (810682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810660a:	681b      	ldr	r3, [r3, #0]
 810660c:	f003 0320 	and.w	r3, r3, #32
 8106610:	2b00      	cmp	r3, #0
 8106612:	d02d      	beq.n	8106670 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106614:	4b85      	ldr	r3, [pc, #532]	; (810682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106616:	681b      	ldr	r3, [r3, #0]
 8106618:	08db      	lsrs	r3, r3, #3
 810661a:	f003 0303 	and.w	r3, r3, #3
 810661e:	4a84      	ldr	r2, [pc, #528]	; (8106830 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8106620:	fa22 f303 	lsr.w	r3, r2, r3
 8106624:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106626:	68bb      	ldr	r3, [r7, #8]
 8106628:	ee07 3a90 	vmov	s15, r3
 810662c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106630:	697b      	ldr	r3, [r7, #20]
 8106632:	ee07 3a90 	vmov	s15, r3
 8106636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810663a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810663e:	4b7b      	ldr	r3, [pc, #492]	; (810682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106646:	ee07 3a90 	vmov	s15, r3
 810664a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810664e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106652:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810665a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810665e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106666:	ee67 7a27 	vmul.f32	s15, s14, s15
 810666a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810666e:	e087      	b.n	8106780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106670:	697b      	ldr	r3, [r7, #20]
 8106672:	ee07 3a90 	vmov	s15, r3
 8106676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810667a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106838 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810667e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106682:	4b6a      	ldr	r3, [pc, #424]	; (810682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810668a:	ee07 3a90 	vmov	s15, r3
 810668e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106692:	ed97 6a03 	vldr	s12, [r7, #12]
 8106696:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810669a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810669e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81066a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81066a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81066aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81066ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81066b2:	e065      	b.n	8106780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81066b4:	697b      	ldr	r3, [r7, #20]
 81066b6:	ee07 3a90 	vmov	s15, r3
 81066ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81066be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810683c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81066c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81066c6:	4b59      	ldr	r3, [pc, #356]	; (810682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81066ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81066ce:	ee07 3a90 	vmov	s15, r3
 81066d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81066d6:	ed97 6a03 	vldr	s12, [r7, #12]
 81066da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81066de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81066e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81066e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81066ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81066ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81066f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81066f6:	e043      	b.n	8106780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81066f8:	697b      	ldr	r3, [r7, #20]
 81066fa:	ee07 3a90 	vmov	s15, r3
 81066fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106702:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106840 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810670a:	4b48      	ldr	r3, [pc, #288]	; (810682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810670e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106712:	ee07 3a90 	vmov	s15, r3
 8106716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810671a:	ed97 6a03 	vldr	s12, [r7, #12]
 810671e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810672a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810672e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810673a:	e021      	b.n	8106780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810673c:	697b      	ldr	r3, [r7, #20]
 810673e:	ee07 3a90 	vmov	s15, r3
 8106742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106746:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810683c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810674a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810674e:	4b37      	ldr	r3, [pc, #220]	; (810682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106756:	ee07 3a90 	vmov	s15, r3
 810675a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810675e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106762:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810676a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810676e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106776:	ee67 7a27 	vmul.f32	s15, s14, s15
 810677a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810677e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8106780:	4b2a      	ldr	r3, [pc, #168]	; (810682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106784:	0a5b      	lsrs	r3, r3, #9
 8106786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810678a:	ee07 3a90 	vmov	s15, r3
 810678e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106796:	ee37 7a87 	vadd.f32	s14, s15, s14
 810679a:	edd7 6a07 	vldr	s13, [r7, #28]
 810679e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81067a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81067a6:	ee17 2a90 	vmov	r2, s15
 81067aa:	687b      	ldr	r3, [r7, #4]
 81067ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81067ae:	4b1f      	ldr	r3, [pc, #124]	; (810682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81067b2:	0c1b      	lsrs	r3, r3, #16
 81067b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81067b8:	ee07 3a90 	vmov	s15, r3
 81067bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81067c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81067c8:	edd7 6a07 	vldr	s13, [r7, #28]
 81067cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81067d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81067d4:	ee17 2a90 	vmov	r2, s15
 81067d8:	687b      	ldr	r3, [r7, #4]
 81067da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81067dc:	4b13      	ldr	r3, [pc, #76]	; (810682c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81067e0:	0e1b      	lsrs	r3, r3, #24
 81067e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81067e6:	ee07 3a90 	vmov	s15, r3
 81067ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81067f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81067f6:	edd7 6a07 	vldr	s13, [r7, #28]
 81067fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81067fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106802:	ee17 2a90 	vmov	r2, s15
 8106806:	687b      	ldr	r3, [r7, #4]
 8106808:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810680a:	e008      	b.n	810681e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810680c:	687b      	ldr	r3, [r7, #4]
 810680e:	2200      	movs	r2, #0
 8106810:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106812:	687b      	ldr	r3, [r7, #4]
 8106814:	2200      	movs	r2, #0
 8106816:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	2200      	movs	r2, #0
 810681c:	609a      	str	r2, [r3, #8]
}
 810681e:	bf00      	nop
 8106820:	3724      	adds	r7, #36	; 0x24
 8106822:	46bd      	mov	sp, r7
 8106824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106828:	4770      	bx	lr
 810682a:	bf00      	nop
 810682c:	58024400 	.word	0x58024400
 8106830:	03d09000 	.word	0x03d09000
 8106834:	46000000 	.word	0x46000000
 8106838:	4c742400 	.word	0x4c742400
 810683c:	4a742400 	.word	0x4a742400
 8106840:	4bbebc20 	.word	0x4bbebc20

08106844 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106844:	b580      	push	{r7, lr}
 8106846:	b084      	sub	sp, #16
 8106848:	af00      	add	r7, sp, #0
 810684a:	6078      	str	r0, [r7, #4]
 810684c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810684e:	2300      	movs	r3, #0
 8106850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106852:	4b54      	ldr	r3, [pc, #336]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 8106854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106856:	f003 0303 	and.w	r3, r3, #3
 810685a:	2b03      	cmp	r3, #3
 810685c:	d101      	bne.n	8106862 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810685e:	2301      	movs	r3, #1
 8106860:	e09b      	b.n	810699a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106862:	4b50      	ldr	r3, [pc, #320]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 8106864:	681b      	ldr	r3, [r3, #0]
 8106866:	4a4f      	ldr	r2, [pc, #316]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 8106868:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810686c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810686e:	f7fc f88d 	bl	810298c <HAL_GetTick>
 8106872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106874:	e008      	b.n	8106888 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8106876:	f7fc f889 	bl	810298c <HAL_GetTick>
 810687a:	4602      	mov	r2, r0
 810687c:	68bb      	ldr	r3, [r7, #8]
 810687e:	1ad3      	subs	r3, r2, r3
 8106880:	2b02      	cmp	r3, #2
 8106882:	d901      	bls.n	8106888 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106884:	2303      	movs	r3, #3
 8106886:	e088      	b.n	810699a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106888:	4b46      	ldr	r3, [pc, #280]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 810688a:	681b      	ldr	r3, [r3, #0]
 810688c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106890:	2b00      	cmp	r3, #0
 8106892:	d1f0      	bne.n	8106876 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106894:	4b43      	ldr	r3, [pc, #268]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 8106896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106898:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810689c:	687b      	ldr	r3, [r7, #4]
 810689e:	681b      	ldr	r3, [r3, #0]
 81068a0:	031b      	lsls	r3, r3, #12
 81068a2:	4940      	ldr	r1, [pc, #256]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 81068a4:	4313      	orrs	r3, r2
 81068a6:	628b      	str	r3, [r1, #40]	; 0x28
 81068a8:	687b      	ldr	r3, [r7, #4]
 81068aa:	685b      	ldr	r3, [r3, #4]
 81068ac:	3b01      	subs	r3, #1
 81068ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81068b2:	687b      	ldr	r3, [r7, #4]
 81068b4:	689b      	ldr	r3, [r3, #8]
 81068b6:	3b01      	subs	r3, #1
 81068b8:	025b      	lsls	r3, r3, #9
 81068ba:	b29b      	uxth	r3, r3
 81068bc:	431a      	orrs	r2, r3
 81068be:	687b      	ldr	r3, [r7, #4]
 81068c0:	68db      	ldr	r3, [r3, #12]
 81068c2:	3b01      	subs	r3, #1
 81068c4:	041b      	lsls	r3, r3, #16
 81068c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81068ca:	431a      	orrs	r2, r3
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	691b      	ldr	r3, [r3, #16]
 81068d0:	3b01      	subs	r3, #1
 81068d2:	061b      	lsls	r3, r3, #24
 81068d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81068d8:	4932      	ldr	r1, [pc, #200]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 81068da:	4313      	orrs	r3, r2
 81068dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81068de:	4b31      	ldr	r3, [pc, #196]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 81068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81068e6:	687b      	ldr	r3, [r7, #4]
 81068e8:	695b      	ldr	r3, [r3, #20]
 81068ea:	492e      	ldr	r1, [pc, #184]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 81068ec:	4313      	orrs	r3, r2
 81068ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81068f0:	4b2c      	ldr	r3, [pc, #176]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 81068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068f4:	f023 0220 	bic.w	r2, r3, #32
 81068f8:	687b      	ldr	r3, [r7, #4]
 81068fa:	699b      	ldr	r3, [r3, #24]
 81068fc:	4929      	ldr	r1, [pc, #164]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 81068fe:	4313      	orrs	r3, r2
 8106900:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8106902:	4b28      	ldr	r3, [pc, #160]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 8106904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106906:	4a27      	ldr	r2, [pc, #156]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 8106908:	f023 0310 	bic.w	r3, r3, #16
 810690c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810690e:	4b25      	ldr	r3, [pc, #148]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 8106910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106916:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810691a:	687a      	ldr	r2, [r7, #4]
 810691c:	69d2      	ldr	r2, [r2, #28]
 810691e:	00d2      	lsls	r2, r2, #3
 8106920:	4920      	ldr	r1, [pc, #128]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 8106922:	4313      	orrs	r3, r2
 8106924:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106926:	4b1f      	ldr	r3, [pc, #124]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 8106928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810692a:	4a1e      	ldr	r2, [pc, #120]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 810692c:	f043 0310 	orr.w	r3, r3, #16
 8106930:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8106932:	683b      	ldr	r3, [r7, #0]
 8106934:	2b00      	cmp	r3, #0
 8106936:	d106      	bne.n	8106946 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106938:	4b1a      	ldr	r3, [pc, #104]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 810693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810693c:	4a19      	ldr	r2, [pc, #100]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 810693e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8106942:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106944:	e00f      	b.n	8106966 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106946:	683b      	ldr	r3, [r7, #0]
 8106948:	2b01      	cmp	r3, #1
 810694a:	d106      	bne.n	810695a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810694c:	4b15      	ldr	r3, [pc, #84]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 810694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106950:	4a14      	ldr	r2, [pc, #80]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 8106952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106956:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106958:	e005      	b.n	8106966 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810695a:	4b12      	ldr	r3, [pc, #72]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 810695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810695e:	4a11      	ldr	r2, [pc, #68]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 8106960:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106964:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106966:	4b0f      	ldr	r3, [pc, #60]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 8106968:	681b      	ldr	r3, [r3, #0]
 810696a:	4a0e      	ldr	r2, [pc, #56]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 810696c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8106970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106972:	f7fc f80b 	bl	810298c <HAL_GetTick>
 8106976:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106978:	e008      	b.n	810698c <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810697a:	f7fc f807 	bl	810298c <HAL_GetTick>
 810697e:	4602      	mov	r2, r0
 8106980:	68bb      	ldr	r3, [r7, #8]
 8106982:	1ad3      	subs	r3, r2, r3
 8106984:	2b02      	cmp	r3, #2
 8106986:	d901      	bls.n	810698c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106988:	2303      	movs	r3, #3
 810698a:	e006      	b.n	810699a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810698c:	4b05      	ldr	r3, [pc, #20]	; (81069a4 <RCCEx_PLL2_Config+0x160>)
 810698e:	681b      	ldr	r3, [r3, #0]
 8106990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106994:	2b00      	cmp	r3, #0
 8106996:	d0f0      	beq.n	810697a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106998:	7bfb      	ldrb	r3, [r7, #15]
}
 810699a:	4618      	mov	r0, r3
 810699c:	3710      	adds	r7, #16
 810699e:	46bd      	mov	sp, r7
 81069a0:	bd80      	pop	{r7, pc}
 81069a2:	bf00      	nop
 81069a4:	58024400 	.word	0x58024400

081069a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81069a8:	b580      	push	{r7, lr}
 81069aa:	b084      	sub	sp, #16
 81069ac:	af00      	add	r7, sp, #0
 81069ae:	6078      	str	r0, [r7, #4]
 81069b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81069b2:	2300      	movs	r3, #0
 81069b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81069b6:	4b54      	ldr	r3, [pc, #336]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 81069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81069ba:	f003 0303 	and.w	r3, r3, #3
 81069be:	2b03      	cmp	r3, #3
 81069c0:	d101      	bne.n	81069c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81069c2:	2301      	movs	r3, #1
 81069c4:	e09b      	b.n	8106afe <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81069c6:	4b50      	ldr	r3, [pc, #320]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 81069c8:	681b      	ldr	r3, [r3, #0]
 81069ca:	4a4f      	ldr	r2, [pc, #316]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 81069cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81069d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81069d2:	f7fb ffdb 	bl	810298c <HAL_GetTick>
 81069d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81069d8:	e008      	b.n	81069ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81069da:	f7fb ffd7 	bl	810298c <HAL_GetTick>
 81069de:	4602      	mov	r2, r0
 81069e0:	68bb      	ldr	r3, [r7, #8]
 81069e2:	1ad3      	subs	r3, r2, r3
 81069e4:	2b02      	cmp	r3, #2
 81069e6:	d901      	bls.n	81069ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81069e8:	2303      	movs	r3, #3
 81069ea:	e088      	b.n	8106afe <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81069ec:	4b46      	ldr	r3, [pc, #280]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 81069ee:	681b      	ldr	r3, [r3, #0]
 81069f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81069f4:	2b00      	cmp	r3, #0
 81069f6:	d1f0      	bne.n	81069da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81069f8:	4b43      	ldr	r3, [pc, #268]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 81069fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81069fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8106a00:	687b      	ldr	r3, [r7, #4]
 8106a02:	681b      	ldr	r3, [r3, #0]
 8106a04:	051b      	lsls	r3, r3, #20
 8106a06:	4940      	ldr	r1, [pc, #256]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106a08:	4313      	orrs	r3, r2
 8106a0a:	628b      	str	r3, [r1, #40]	; 0x28
 8106a0c:	687b      	ldr	r3, [r7, #4]
 8106a0e:	685b      	ldr	r3, [r3, #4]
 8106a10:	3b01      	subs	r3, #1
 8106a12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106a16:	687b      	ldr	r3, [r7, #4]
 8106a18:	689b      	ldr	r3, [r3, #8]
 8106a1a:	3b01      	subs	r3, #1
 8106a1c:	025b      	lsls	r3, r3, #9
 8106a1e:	b29b      	uxth	r3, r3
 8106a20:	431a      	orrs	r2, r3
 8106a22:	687b      	ldr	r3, [r7, #4]
 8106a24:	68db      	ldr	r3, [r3, #12]
 8106a26:	3b01      	subs	r3, #1
 8106a28:	041b      	lsls	r3, r3, #16
 8106a2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106a2e:	431a      	orrs	r2, r3
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	691b      	ldr	r3, [r3, #16]
 8106a34:	3b01      	subs	r3, #1
 8106a36:	061b      	lsls	r3, r3, #24
 8106a38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106a3c:	4932      	ldr	r1, [pc, #200]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106a3e:	4313      	orrs	r3, r2
 8106a40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8106a42:	4b31      	ldr	r3, [pc, #196]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8106a4a:	687b      	ldr	r3, [r7, #4]
 8106a4c:	695b      	ldr	r3, [r3, #20]
 8106a4e:	492e      	ldr	r1, [pc, #184]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106a50:	4313      	orrs	r3, r2
 8106a52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106a54:	4b2c      	ldr	r3, [pc, #176]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8106a5c:	687b      	ldr	r3, [r7, #4]
 8106a5e:	699b      	ldr	r3, [r3, #24]
 8106a60:	4929      	ldr	r1, [pc, #164]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106a62:	4313      	orrs	r3, r2
 8106a64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106a66:	4b28      	ldr	r3, [pc, #160]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a6a:	4a27      	ldr	r2, [pc, #156]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106a70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8106a72:	4b25      	ldr	r3, [pc, #148]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106a7a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106a7e:	687a      	ldr	r2, [r7, #4]
 8106a80:	69d2      	ldr	r2, [r2, #28]
 8106a82:	00d2      	lsls	r2, r2, #3
 8106a84:	4920      	ldr	r1, [pc, #128]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106a86:	4313      	orrs	r3, r2
 8106a88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8106a8a:	4b1f      	ldr	r3, [pc, #124]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a8e:	4a1e      	ldr	r2, [pc, #120]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106a94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8106a96:	683b      	ldr	r3, [r7, #0]
 8106a98:	2b00      	cmp	r3, #0
 8106a9a:	d106      	bne.n	8106aaa <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8106a9c:	4b1a      	ldr	r3, [pc, #104]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106aa0:	4a19      	ldr	r2, [pc, #100]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106aa2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8106aa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106aa8:	e00f      	b.n	8106aca <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106aaa:	683b      	ldr	r3, [r7, #0]
 8106aac:	2b01      	cmp	r3, #1
 8106aae:	d106      	bne.n	8106abe <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8106ab0:	4b15      	ldr	r3, [pc, #84]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ab4:	4a14      	ldr	r2, [pc, #80]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106ab6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8106aba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106abc:	e005      	b.n	8106aca <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8106abe:	4b12      	ldr	r3, [pc, #72]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ac2:	4a11      	ldr	r2, [pc, #68]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106ac4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8106ac8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106aca:	4b0f      	ldr	r3, [pc, #60]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106acc:	681b      	ldr	r3, [r3, #0]
 8106ace:	4a0e      	ldr	r2, [pc, #56]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8106ad4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106ad6:	f7fb ff59 	bl	810298c <HAL_GetTick>
 8106ada:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106adc:	e008      	b.n	8106af0 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106ade:	f7fb ff55 	bl	810298c <HAL_GetTick>
 8106ae2:	4602      	mov	r2, r0
 8106ae4:	68bb      	ldr	r3, [r7, #8]
 8106ae6:	1ad3      	subs	r3, r2, r3
 8106ae8:	2b02      	cmp	r3, #2
 8106aea:	d901      	bls.n	8106af0 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106aec:	2303      	movs	r3, #3
 8106aee:	e006      	b.n	8106afe <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106af0:	4b05      	ldr	r3, [pc, #20]	; (8106b08 <RCCEx_PLL3_Config+0x160>)
 8106af2:	681b      	ldr	r3, [r3, #0]
 8106af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106af8:	2b00      	cmp	r3, #0
 8106afa:	d0f0      	beq.n	8106ade <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8106afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8106afe:	4618      	mov	r0, r3
 8106b00:	3710      	adds	r7, #16
 8106b02:	46bd      	mov	sp, r7
 8106b04:	bd80      	pop	{r7, pc}
 8106b06:	bf00      	nop
 8106b08:	58024400 	.word	0x58024400

08106b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106b0c:	b580      	push	{r7, lr}
 8106b0e:	b082      	sub	sp, #8
 8106b10:	af00      	add	r7, sp, #0
 8106b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106b14:	687b      	ldr	r3, [r7, #4]
 8106b16:	2b00      	cmp	r3, #0
 8106b18:	d101      	bne.n	8106b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106b1a:	2301      	movs	r3, #1
 8106b1c:	e049      	b.n	8106bb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106b1e:	687b      	ldr	r3, [r7, #4]
 8106b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106b24:	b2db      	uxtb	r3, r3
 8106b26:	2b00      	cmp	r3, #0
 8106b28:	d106      	bne.n	8106b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106b2a:	687b      	ldr	r3, [r7, #4]
 8106b2c:	2200      	movs	r2, #0
 8106b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106b32:	6878      	ldr	r0, [r7, #4]
 8106b34:	f7fb fc72 	bl	810241c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106b38:	687b      	ldr	r3, [r7, #4]
 8106b3a:	2202      	movs	r2, #2
 8106b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106b40:	687b      	ldr	r3, [r7, #4]
 8106b42:	681a      	ldr	r2, [r3, #0]
 8106b44:	687b      	ldr	r3, [r7, #4]
 8106b46:	3304      	adds	r3, #4
 8106b48:	4619      	mov	r1, r3
 8106b4a:	4610      	mov	r0, r2
 8106b4c:	f000 fd6a 	bl	8107624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106b50:	687b      	ldr	r3, [r7, #4]
 8106b52:	2201      	movs	r2, #1
 8106b54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106b58:	687b      	ldr	r3, [r7, #4]
 8106b5a:	2201      	movs	r2, #1
 8106b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106b60:	687b      	ldr	r3, [r7, #4]
 8106b62:	2201      	movs	r2, #1
 8106b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	2201      	movs	r2, #1
 8106b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106b70:	687b      	ldr	r3, [r7, #4]
 8106b72:	2201      	movs	r2, #1
 8106b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106b78:	687b      	ldr	r3, [r7, #4]
 8106b7a:	2201      	movs	r2, #1
 8106b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106b80:	687b      	ldr	r3, [r7, #4]
 8106b82:	2201      	movs	r2, #1
 8106b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106b88:	687b      	ldr	r3, [r7, #4]
 8106b8a:	2201      	movs	r2, #1
 8106b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106b90:	687b      	ldr	r3, [r7, #4]
 8106b92:	2201      	movs	r2, #1
 8106b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106b98:	687b      	ldr	r3, [r7, #4]
 8106b9a:	2201      	movs	r2, #1
 8106b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106ba0:	687b      	ldr	r3, [r7, #4]
 8106ba2:	2201      	movs	r2, #1
 8106ba4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106ba8:	687b      	ldr	r3, [r7, #4]
 8106baa:	2201      	movs	r2, #1
 8106bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106bb0:	2300      	movs	r3, #0
}
 8106bb2:	4618      	mov	r0, r3
 8106bb4:	3708      	adds	r7, #8
 8106bb6:	46bd      	mov	sp, r7
 8106bb8:	bd80      	pop	{r7, pc}
	...

08106bbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8106bbc:	b480      	push	{r7}
 8106bbe:	b085      	sub	sp, #20
 8106bc0:	af00      	add	r7, sp, #0
 8106bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8106bc4:	687b      	ldr	r3, [r7, #4]
 8106bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106bca:	b2db      	uxtb	r3, r3
 8106bcc:	2b01      	cmp	r3, #1
 8106bce:	d001      	beq.n	8106bd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8106bd0:	2301      	movs	r3, #1
 8106bd2:	e04c      	b.n	8106c6e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106bd4:	687b      	ldr	r3, [r7, #4]
 8106bd6:	2202      	movs	r2, #2
 8106bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106bdc:	687b      	ldr	r3, [r7, #4]
 8106bde:	681b      	ldr	r3, [r3, #0]
 8106be0:	4a26      	ldr	r2, [pc, #152]	; (8106c7c <HAL_TIM_Base_Start+0xc0>)
 8106be2:	4293      	cmp	r3, r2
 8106be4:	d022      	beq.n	8106c2c <HAL_TIM_Base_Start+0x70>
 8106be6:	687b      	ldr	r3, [r7, #4]
 8106be8:	681b      	ldr	r3, [r3, #0]
 8106bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106bee:	d01d      	beq.n	8106c2c <HAL_TIM_Base_Start+0x70>
 8106bf0:	687b      	ldr	r3, [r7, #4]
 8106bf2:	681b      	ldr	r3, [r3, #0]
 8106bf4:	4a22      	ldr	r2, [pc, #136]	; (8106c80 <HAL_TIM_Base_Start+0xc4>)
 8106bf6:	4293      	cmp	r3, r2
 8106bf8:	d018      	beq.n	8106c2c <HAL_TIM_Base_Start+0x70>
 8106bfa:	687b      	ldr	r3, [r7, #4]
 8106bfc:	681b      	ldr	r3, [r3, #0]
 8106bfe:	4a21      	ldr	r2, [pc, #132]	; (8106c84 <HAL_TIM_Base_Start+0xc8>)
 8106c00:	4293      	cmp	r3, r2
 8106c02:	d013      	beq.n	8106c2c <HAL_TIM_Base_Start+0x70>
 8106c04:	687b      	ldr	r3, [r7, #4]
 8106c06:	681b      	ldr	r3, [r3, #0]
 8106c08:	4a1f      	ldr	r2, [pc, #124]	; (8106c88 <HAL_TIM_Base_Start+0xcc>)
 8106c0a:	4293      	cmp	r3, r2
 8106c0c:	d00e      	beq.n	8106c2c <HAL_TIM_Base_Start+0x70>
 8106c0e:	687b      	ldr	r3, [r7, #4]
 8106c10:	681b      	ldr	r3, [r3, #0]
 8106c12:	4a1e      	ldr	r2, [pc, #120]	; (8106c8c <HAL_TIM_Base_Start+0xd0>)
 8106c14:	4293      	cmp	r3, r2
 8106c16:	d009      	beq.n	8106c2c <HAL_TIM_Base_Start+0x70>
 8106c18:	687b      	ldr	r3, [r7, #4]
 8106c1a:	681b      	ldr	r3, [r3, #0]
 8106c1c:	4a1c      	ldr	r2, [pc, #112]	; (8106c90 <HAL_TIM_Base_Start+0xd4>)
 8106c1e:	4293      	cmp	r3, r2
 8106c20:	d004      	beq.n	8106c2c <HAL_TIM_Base_Start+0x70>
 8106c22:	687b      	ldr	r3, [r7, #4]
 8106c24:	681b      	ldr	r3, [r3, #0]
 8106c26:	4a1b      	ldr	r2, [pc, #108]	; (8106c94 <HAL_TIM_Base_Start+0xd8>)
 8106c28:	4293      	cmp	r3, r2
 8106c2a:	d115      	bne.n	8106c58 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106c2c:	687b      	ldr	r3, [r7, #4]
 8106c2e:	681b      	ldr	r3, [r3, #0]
 8106c30:	689a      	ldr	r2, [r3, #8]
 8106c32:	4b19      	ldr	r3, [pc, #100]	; (8106c98 <HAL_TIM_Base_Start+0xdc>)
 8106c34:	4013      	ands	r3, r2
 8106c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106c38:	68fb      	ldr	r3, [r7, #12]
 8106c3a:	2b06      	cmp	r3, #6
 8106c3c:	d015      	beq.n	8106c6a <HAL_TIM_Base_Start+0xae>
 8106c3e:	68fb      	ldr	r3, [r7, #12]
 8106c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106c44:	d011      	beq.n	8106c6a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8106c46:	687b      	ldr	r3, [r7, #4]
 8106c48:	681b      	ldr	r3, [r3, #0]
 8106c4a:	681a      	ldr	r2, [r3, #0]
 8106c4c:	687b      	ldr	r3, [r7, #4]
 8106c4e:	681b      	ldr	r3, [r3, #0]
 8106c50:	f042 0201 	orr.w	r2, r2, #1
 8106c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106c56:	e008      	b.n	8106c6a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106c58:	687b      	ldr	r3, [r7, #4]
 8106c5a:	681b      	ldr	r3, [r3, #0]
 8106c5c:	681a      	ldr	r2, [r3, #0]
 8106c5e:	687b      	ldr	r3, [r7, #4]
 8106c60:	681b      	ldr	r3, [r3, #0]
 8106c62:	f042 0201 	orr.w	r2, r2, #1
 8106c66:	601a      	str	r2, [r3, #0]
 8106c68:	e000      	b.n	8106c6c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106c6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106c6c:	2300      	movs	r3, #0
}
 8106c6e:	4618      	mov	r0, r3
 8106c70:	3714      	adds	r7, #20
 8106c72:	46bd      	mov	sp, r7
 8106c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c78:	4770      	bx	lr
 8106c7a:	bf00      	nop
 8106c7c:	40010000 	.word	0x40010000
 8106c80:	40000400 	.word	0x40000400
 8106c84:	40000800 	.word	0x40000800
 8106c88:	40000c00 	.word	0x40000c00
 8106c8c:	40010400 	.word	0x40010400
 8106c90:	40001800 	.word	0x40001800
 8106c94:	40014000 	.word	0x40014000
 8106c98:	00010007 	.word	0x00010007

08106c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8106c9c:	b580      	push	{r7, lr}
 8106c9e:	b082      	sub	sp, #8
 8106ca0:	af00      	add	r7, sp, #0
 8106ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106ca4:	687b      	ldr	r3, [r7, #4]
 8106ca6:	2b00      	cmp	r3, #0
 8106ca8:	d101      	bne.n	8106cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8106caa:	2301      	movs	r3, #1
 8106cac:	e049      	b.n	8106d42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106cae:	687b      	ldr	r3, [r7, #4]
 8106cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106cb4:	b2db      	uxtb	r3, r3
 8106cb6:	2b00      	cmp	r3, #0
 8106cb8:	d106      	bne.n	8106cc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106cba:	687b      	ldr	r3, [r7, #4]
 8106cbc:	2200      	movs	r2, #0
 8106cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8106cc2:	6878      	ldr	r0, [r7, #4]
 8106cc4:	f000 f841 	bl	8106d4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106cc8:	687b      	ldr	r3, [r7, #4]
 8106cca:	2202      	movs	r2, #2
 8106ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106cd0:	687b      	ldr	r3, [r7, #4]
 8106cd2:	681a      	ldr	r2, [r3, #0]
 8106cd4:	687b      	ldr	r3, [r7, #4]
 8106cd6:	3304      	adds	r3, #4
 8106cd8:	4619      	mov	r1, r3
 8106cda:	4610      	mov	r0, r2
 8106cdc:	f000 fca2 	bl	8107624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106ce0:	687b      	ldr	r3, [r7, #4]
 8106ce2:	2201      	movs	r2, #1
 8106ce4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	2201      	movs	r2, #1
 8106cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106cf0:	687b      	ldr	r3, [r7, #4]
 8106cf2:	2201      	movs	r2, #1
 8106cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106cf8:	687b      	ldr	r3, [r7, #4]
 8106cfa:	2201      	movs	r2, #1
 8106cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106d00:	687b      	ldr	r3, [r7, #4]
 8106d02:	2201      	movs	r2, #1
 8106d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106d08:	687b      	ldr	r3, [r7, #4]
 8106d0a:	2201      	movs	r2, #1
 8106d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106d10:	687b      	ldr	r3, [r7, #4]
 8106d12:	2201      	movs	r2, #1
 8106d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106d18:	687b      	ldr	r3, [r7, #4]
 8106d1a:	2201      	movs	r2, #1
 8106d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	2201      	movs	r2, #1
 8106d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106d28:	687b      	ldr	r3, [r7, #4]
 8106d2a:	2201      	movs	r2, #1
 8106d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106d30:	687b      	ldr	r3, [r7, #4]
 8106d32:	2201      	movs	r2, #1
 8106d34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106d38:	687b      	ldr	r3, [r7, #4]
 8106d3a:	2201      	movs	r2, #1
 8106d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106d40:	2300      	movs	r3, #0
}
 8106d42:	4618      	mov	r0, r3
 8106d44:	3708      	adds	r7, #8
 8106d46:	46bd      	mov	sp, r7
 8106d48:	bd80      	pop	{r7, pc}

08106d4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8106d4a:	b480      	push	{r7}
 8106d4c:	b083      	sub	sp, #12
 8106d4e:	af00      	add	r7, sp, #0
 8106d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8106d52:	bf00      	nop
 8106d54:	370c      	adds	r7, #12
 8106d56:	46bd      	mov	sp, r7
 8106d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d5c:	4770      	bx	lr
	...

08106d60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106d60:	b580      	push	{r7, lr}
 8106d62:	b084      	sub	sp, #16
 8106d64:	af00      	add	r7, sp, #0
 8106d66:	6078      	str	r0, [r7, #4]
 8106d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8106d6a:	683b      	ldr	r3, [r7, #0]
 8106d6c:	2b00      	cmp	r3, #0
 8106d6e:	d109      	bne.n	8106d84 <HAL_TIM_PWM_Start+0x24>
 8106d70:	687b      	ldr	r3, [r7, #4]
 8106d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8106d76:	b2db      	uxtb	r3, r3
 8106d78:	2b01      	cmp	r3, #1
 8106d7a:	bf14      	ite	ne
 8106d7c:	2301      	movne	r3, #1
 8106d7e:	2300      	moveq	r3, #0
 8106d80:	b2db      	uxtb	r3, r3
 8106d82:	e03c      	b.n	8106dfe <HAL_TIM_PWM_Start+0x9e>
 8106d84:	683b      	ldr	r3, [r7, #0]
 8106d86:	2b04      	cmp	r3, #4
 8106d88:	d109      	bne.n	8106d9e <HAL_TIM_PWM_Start+0x3e>
 8106d8a:	687b      	ldr	r3, [r7, #4]
 8106d8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8106d90:	b2db      	uxtb	r3, r3
 8106d92:	2b01      	cmp	r3, #1
 8106d94:	bf14      	ite	ne
 8106d96:	2301      	movne	r3, #1
 8106d98:	2300      	moveq	r3, #0
 8106d9a:	b2db      	uxtb	r3, r3
 8106d9c:	e02f      	b.n	8106dfe <HAL_TIM_PWM_Start+0x9e>
 8106d9e:	683b      	ldr	r3, [r7, #0]
 8106da0:	2b08      	cmp	r3, #8
 8106da2:	d109      	bne.n	8106db8 <HAL_TIM_PWM_Start+0x58>
 8106da4:	687b      	ldr	r3, [r7, #4]
 8106da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106daa:	b2db      	uxtb	r3, r3
 8106dac:	2b01      	cmp	r3, #1
 8106dae:	bf14      	ite	ne
 8106db0:	2301      	movne	r3, #1
 8106db2:	2300      	moveq	r3, #0
 8106db4:	b2db      	uxtb	r3, r3
 8106db6:	e022      	b.n	8106dfe <HAL_TIM_PWM_Start+0x9e>
 8106db8:	683b      	ldr	r3, [r7, #0]
 8106dba:	2b0c      	cmp	r3, #12
 8106dbc:	d109      	bne.n	8106dd2 <HAL_TIM_PWM_Start+0x72>
 8106dbe:	687b      	ldr	r3, [r7, #4]
 8106dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106dc4:	b2db      	uxtb	r3, r3
 8106dc6:	2b01      	cmp	r3, #1
 8106dc8:	bf14      	ite	ne
 8106dca:	2301      	movne	r3, #1
 8106dcc:	2300      	moveq	r3, #0
 8106dce:	b2db      	uxtb	r3, r3
 8106dd0:	e015      	b.n	8106dfe <HAL_TIM_PWM_Start+0x9e>
 8106dd2:	683b      	ldr	r3, [r7, #0]
 8106dd4:	2b10      	cmp	r3, #16
 8106dd6:	d109      	bne.n	8106dec <HAL_TIM_PWM_Start+0x8c>
 8106dd8:	687b      	ldr	r3, [r7, #4]
 8106dda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8106dde:	b2db      	uxtb	r3, r3
 8106de0:	2b01      	cmp	r3, #1
 8106de2:	bf14      	ite	ne
 8106de4:	2301      	movne	r3, #1
 8106de6:	2300      	moveq	r3, #0
 8106de8:	b2db      	uxtb	r3, r3
 8106dea:	e008      	b.n	8106dfe <HAL_TIM_PWM_Start+0x9e>
 8106dec:	687b      	ldr	r3, [r7, #4]
 8106dee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8106df2:	b2db      	uxtb	r3, r3
 8106df4:	2b01      	cmp	r3, #1
 8106df6:	bf14      	ite	ne
 8106df8:	2301      	movne	r3, #1
 8106dfa:	2300      	moveq	r3, #0
 8106dfc:	b2db      	uxtb	r3, r3
 8106dfe:	2b00      	cmp	r3, #0
 8106e00:	d001      	beq.n	8106e06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8106e02:	2301      	movs	r3, #1
 8106e04:	e0a1      	b.n	8106f4a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106e06:	683b      	ldr	r3, [r7, #0]
 8106e08:	2b00      	cmp	r3, #0
 8106e0a:	d104      	bne.n	8106e16 <HAL_TIM_PWM_Start+0xb6>
 8106e0c:	687b      	ldr	r3, [r7, #4]
 8106e0e:	2202      	movs	r2, #2
 8106e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106e14:	e023      	b.n	8106e5e <HAL_TIM_PWM_Start+0xfe>
 8106e16:	683b      	ldr	r3, [r7, #0]
 8106e18:	2b04      	cmp	r3, #4
 8106e1a:	d104      	bne.n	8106e26 <HAL_TIM_PWM_Start+0xc6>
 8106e1c:	687b      	ldr	r3, [r7, #4]
 8106e1e:	2202      	movs	r2, #2
 8106e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106e24:	e01b      	b.n	8106e5e <HAL_TIM_PWM_Start+0xfe>
 8106e26:	683b      	ldr	r3, [r7, #0]
 8106e28:	2b08      	cmp	r3, #8
 8106e2a:	d104      	bne.n	8106e36 <HAL_TIM_PWM_Start+0xd6>
 8106e2c:	687b      	ldr	r3, [r7, #4]
 8106e2e:	2202      	movs	r2, #2
 8106e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106e34:	e013      	b.n	8106e5e <HAL_TIM_PWM_Start+0xfe>
 8106e36:	683b      	ldr	r3, [r7, #0]
 8106e38:	2b0c      	cmp	r3, #12
 8106e3a:	d104      	bne.n	8106e46 <HAL_TIM_PWM_Start+0xe6>
 8106e3c:	687b      	ldr	r3, [r7, #4]
 8106e3e:	2202      	movs	r2, #2
 8106e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106e44:	e00b      	b.n	8106e5e <HAL_TIM_PWM_Start+0xfe>
 8106e46:	683b      	ldr	r3, [r7, #0]
 8106e48:	2b10      	cmp	r3, #16
 8106e4a:	d104      	bne.n	8106e56 <HAL_TIM_PWM_Start+0xf6>
 8106e4c:	687b      	ldr	r3, [r7, #4]
 8106e4e:	2202      	movs	r2, #2
 8106e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106e54:	e003      	b.n	8106e5e <HAL_TIM_PWM_Start+0xfe>
 8106e56:	687b      	ldr	r3, [r7, #4]
 8106e58:	2202      	movs	r2, #2
 8106e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8106e5e:	687b      	ldr	r3, [r7, #4]
 8106e60:	681b      	ldr	r3, [r3, #0]
 8106e62:	2201      	movs	r2, #1
 8106e64:	6839      	ldr	r1, [r7, #0]
 8106e66:	4618      	mov	r0, r3
 8106e68:	f000 ffe8 	bl	8107e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8106e6c:	687b      	ldr	r3, [r7, #4]
 8106e6e:	681b      	ldr	r3, [r3, #0]
 8106e70:	4a38      	ldr	r2, [pc, #224]	; (8106f54 <HAL_TIM_PWM_Start+0x1f4>)
 8106e72:	4293      	cmp	r3, r2
 8106e74:	d013      	beq.n	8106e9e <HAL_TIM_PWM_Start+0x13e>
 8106e76:	687b      	ldr	r3, [r7, #4]
 8106e78:	681b      	ldr	r3, [r3, #0]
 8106e7a:	4a37      	ldr	r2, [pc, #220]	; (8106f58 <HAL_TIM_PWM_Start+0x1f8>)
 8106e7c:	4293      	cmp	r3, r2
 8106e7e:	d00e      	beq.n	8106e9e <HAL_TIM_PWM_Start+0x13e>
 8106e80:	687b      	ldr	r3, [r7, #4]
 8106e82:	681b      	ldr	r3, [r3, #0]
 8106e84:	4a35      	ldr	r2, [pc, #212]	; (8106f5c <HAL_TIM_PWM_Start+0x1fc>)
 8106e86:	4293      	cmp	r3, r2
 8106e88:	d009      	beq.n	8106e9e <HAL_TIM_PWM_Start+0x13e>
 8106e8a:	687b      	ldr	r3, [r7, #4]
 8106e8c:	681b      	ldr	r3, [r3, #0]
 8106e8e:	4a34      	ldr	r2, [pc, #208]	; (8106f60 <HAL_TIM_PWM_Start+0x200>)
 8106e90:	4293      	cmp	r3, r2
 8106e92:	d004      	beq.n	8106e9e <HAL_TIM_PWM_Start+0x13e>
 8106e94:	687b      	ldr	r3, [r7, #4]
 8106e96:	681b      	ldr	r3, [r3, #0]
 8106e98:	4a32      	ldr	r2, [pc, #200]	; (8106f64 <HAL_TIM_PWM_Start+0x204>)
 8106e9a:	4293      	cmp	r3, r2
 8106e9c:	d101      	bne.n	8106ea2 <HAL_TIM_PWM_Start+0x142>
 8106e9e:	2301      	movs	r3, #1
 8106ea0:	e000      	b.n	8106ea4 <HAL_TIM_PWM_Start+0x144>
 8106ea2:	2300      	movs	r3, #0
 8106ea4:	2b00      	cmp	r3, #0
 8106ea6:	d007      	beq.n	8106eb8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	681b      	ldr	r3, [r3, #0]
 8106eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8106eae:	687b      	ldr	r3, [r7, #4]
 8106eb0:	681b      	ldr	r3, [r3, #0]
 8106eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8106eb6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	681b      	ldr	r3, [r3, #0]
 8106ebc:	4a25      	ldr	r2, [pc, #148]	; (8106f54 <HAL_TIM_PWM_Start+0x1f4>)
 8106ebe:	4293      	cmp	r3, r2
 8106ec0:	d022      	beq.n	8106f08 <HAL_TIM_PWM_Start+0x1a8>
 8106ec2:	687b      	ldr	r3, [r7, #4]
 8106ec4:	681b      	ldr	r3, [r3, #0]
 8106ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106eca:	d01d      	beq.n	8106f08 <HAL_TIM_PWM_Start+0x1a8>
 8106ecc:	687b      	ldr	r3, [r7, #4]
 8106ece:	681b      	ldr	r3, [r3, #0]
 8106ed0:	4a25      	ldr	r2, [pc, #148]	; (8106f68 <HAL_TIM_PWM_Start+0x208>)
 8106ed2:	4293      	cmp	r3, r2
 8106ed4:	d018      	beq.n	8106f08 <HAL_TIM_PWM_Start+0x1a8>
 8106ed6:	687b      	ldr	r3, [r7, #4]
 8106ed8:	681b      	ldr	r3, [r3, #0]
 8106eda:	4a24      	ldr	r2, [pc, #144]	; (8106f6c <HAL_TIM_PWM_Start+0x20c>)
 8106edc:	4293      	cmp	r3, r2
 8106ede:	d013      	beq.n	8106f08 <HAL_TIM_PWM_Start+0x1a8>
 8106ee0:	687b      	ldr	r3, [r7, #4]
 8106ee2:	681b      	ldr	r3, [r3, #0]
 8106ee4:	4a22      	ldr	r2, [pc, #136]	; (8106f70 <HAL_TIM_PWM_Start+0x210>)
 8106ee6:	4293      	cmp	r3, r2
 8106ee8:	d00e      	beq.n	8106f08 <HAL_TIM_PWM_Start+0x1a8>
 8106eea:	687b      	ldr	r3, [r7, #4]
 8106eec:	681b      	ldr	r3, [r3, #0]
 8106eee:	4a1a      	ldr	r2, [pc, #104]	; (8106f58 <HAL_TIM_PWM_Start+0x1f8>)
 8106ef0:	4293      	cmp	r3, r2
 8106ef2:	d009      	beq.n	8106f08 <HAL_TIM_PWM_Start+0x1a8>
 8106ef4:	687b      	ldr	r3, [r7, #4]
 8106ef6:	681b      	ldr	r3, [r3, #0]
 8106ef8:	4a1e      	ldr	r2, [pc, #120]	; (8106f74 <HAL_TIM_PWM_Start+0x214>)
 8106efa:	4293      	cmp	r3, r2
 8106efc:	d004      	beq.n	8106f08 <HAL_TIM_PWM_Start+0x1a8>
 8106efe:	687b      	ldr	r3, [r7, #4]
 8106f00:	681b      	ldr	r3, [r3, #0]
 8106f02:	4a16      	ldr	r2, [pc, #88]	; (8106f5c <HAL_TIM_PWM_Start+0x1fc>)
 8106f04:	4293      	cmp	r3, r2
 8106f06:	d115      	bne.n	8106f34 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106f08:	687b      	ldr	r3, [r7, #4]
 8106f0a:	681b      	ldr	r3, [r3, #0]
 8106f0c:	689a      	ldr	r2, [r3, #8]
 8106f0e:	4b1a      	ldr	r3, [pc, #104]	; (8106f78 <HAL_TIM_PWM_Start+0x218>)
 8106f10:	4013      	ands	r3, r2
 8106f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106f14:	68fb      	ldr	r3, [r7, #12]
 8106f16:	2b06      	cmp	r3, #6
 8106f18:	d015      	beq.n	8106f46 <HAL_TIM_PWM_Start+0x1e6>
 8106f1a:	68fb      	ldr	r3, [r7, #12]
 8106f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106f20:	d011      	beq.n	8106f46 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8106f22:	687b      	ldr	r3, [r7, #4]
 8106f24:	681b      	ldr	r3, [r3, #0]
 8106f26:	681a      	ldr	r2, [r3, #0]
 8106f28:	687b      	ldr	r3, [r7, #4]
 8106f2a:	681b      	ldr	r3, [r3, #0]
 8106f2c:	f042 0201 	orr.w	r2, r2, #1
 8106f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106f32:	e008      	b.n	8106f46 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106f34:	687b      	ldr	r3, [r7, #4]
 8106f36:	681b      	ldr	r3, [r3, #0]
 8106f38:	681a      	ldr	r2, [r3, #0]
 8106f3a:	687b      	ldr	r3, [r7, #4]
 8106f3c:	681b      	ldr	r3, [r3, #0]
 8106f3e:	f042 0201 	orr.w	r2, r2, #1
 8106f42:	601a      	str	r2, [r3, #0]
 8106f44:	e000      	b.n	8106f48 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106f46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106f48:	2300      	movs	r3, #0
}
 8106f4a:	4618      	mov	r0, r3
 8106f4c:	3710      	adds	r7, #16
 8106f4e:	46bd      	mov	sp, r7
 8106f50:	bd80      	pop	{r7, pc}
 8106f52:	bf00      	nop
 8106f54:	40010000 	.word	0x40010000
 8106f58:	40010400 	.word	0x40010400
 8106f5c:	40014000 	.word	0x40014000
 8106f60:	40014400 	.word	0x40014400
 8106f64:	40014800 	.word	0x40014800
 8106f68:	40000400 	.word	0x40000400
 8106f6c:	40000800 	.word	0x40000800
 8106f70:	40000c00 	.word	0x40000c00
 8106f74:	40001800 	.word	0x40001800
 8106f78:	00010007 	.word	0x00010007

08106f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106f7c:	b580      	push	{r7, lr}
 8106f7e:	b082      	sub	sp, #8
 8106f80:	af00      	add	r7, sp, #0
 8106f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	681b      	ldr	r3, [r3, #0]
 8106f88:	691b      	ldr	r3, [r3, #16]
 8106f8a:	f003 0302 	and.w	r3, r3, #2
 8106f8e:	2b02      	cmp	r3, #2
 8106f90:	d122      	bne.n	8106fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8106f92:	687b      	ldr	r3, [r7, #4]
 8106f94:	681b      	ldr	r3, [r3, #0]
 8106f96:	68db      	ldr	r3, [r3, #12]
 8106f98:	f003 0302 	and.w	r3, r3, #2
 8106f9c:	2b02      	cmp	r3, #2
 8106f9e:	d11b      	bne.n	8106fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8106fa0:	687b      	ldr	r3, [r7, #4]
 8106fa2:	681b      	ldr	r3, [r3, #0]
 8106fa4:	f06f 0202 	mvn.w	r2, #2
 8106fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8106faa:	687b      	ldr	r3, [r7, #4]
 8106fac:	2201      	movs	r2, #1
 8106fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106fb0:	687b      	ldr	r3, [r7, #4]
 8106fb2:	681b      	ldr	r3, [r3, #0]
 8106fb4:	699b      	ldr	r3, [r3, #24]
 8106fb6:	f003 0303 	and.w	r3, r3, #3
 8106fba:	2b00      	cmp	r3, #0
 8106fbc:	d003      	beq.n	8106fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8106fbe:	6878      	ldr	r0, [r7, #4]
 8106fc0:	f000 fb12 	bl	81075e8 <HAL_TIM_IC_CaptureCallback>
 8106fc4:	e005      	b.n	8106fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8106fc6:	6878      	ldr	r0, [r7, #4]
 8106fc8:	f000 fb04 	bl	81075d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106fcc:	6878      	ldr	r0, [r7, #4]
 8106fce:	f000 fb15 	bl	81075fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106fd2:	687b      	ldr	r3, [r7, #4]
 8106fd4:	2200      	movs	r2, #0
 8106fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	681b      	ldr	r3, [r3, #0]
 8106fdc:	691b      	ldr	r3, [r3, #16]
 8106fde:	f003 0304 	and.w	r3, r3, #4
 8106fe2:	2b04      	cmp	r3, #4
 8106fe4:	d122      	bne.n	810702c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	681b      	ldr	r3, [r3, #0]
 8106fea:	68db      	ldr	r3, [r3, #12]
 8106fec:	f003 0304 	and.w	r3, r3, #4
 8106ff0:	2b04      	cmp	r3, #4
 8106ff2:	d11b      	bne.n	810702c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8106ff4:	687b      	ldr	r3, [r7, #4]
 8106ff6:	681b      	ldr	r3, [r3, #0]
 8106ff8:	f06f 0204 	mvn.w	r2, #4
 8106ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8106ffe:	687b      	ldr	r3, [r7, #4]
 8107000:	2202      	movs	r2, #2
 8107002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8107004:	687b      	ldr	r3, [r7, #4]
 8107006:	681b      	ldr	r3, [r3, #0]
 8107008:	699b      	ldr	r3, [r3, #24]
 810700a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810700e:	2b00      	cmp	r3, #0
 8107010:	d003      	beq.n	810701a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107012:	6878      	ldr	r0, [r7, #4]
 8107014:	f000 fae8 	bl	81075e8 <HAL_TIM_IC_CaptureCallback>
 8107018:	e005      	b.n	8107026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810701a:	6878      	ldr	r0, [r7, #4]
 810701c:	f000 fada 	bl	81075d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107020:	6878      	ldr	r0, [r7, #4]
 8107022:	f000 faeb 	bl	81075fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107026:	687b      	ldr	r3, [r7, #4]
 8107028:	2200      	movs	r2, #0
 810702a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 810702c:	687b      	ldr	r3, [r7, #4]
 810702e:	681b      	ldr	r3, [r3, #0]
 8107030:	691b      	ldr	r3, [r3, #16]
 8107032:	f003 0308 	and.w	r3, r3, #8
 8107036:	2b08      	cmp	r3, #8
 8107038:	d122      	bne.n	8107080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810703a:	687b      	ldr	r3, [r7, #4]
 810703c:	681b      	ldr	r3, [r3, #0]
 810703e:	68db      	ldr	r3, [r3, #12]
 8107040:	f003 0308 	and.w	r3, r3, #8
 8107044:	2b08      	cmp	r3, #8
 8107046:	d11b      	bne.n	8107080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	681b      	ldr	r3, [r3, #0]
 810704c:	f06f 0208 	mvn.w	r2, #8
 8107050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8107052:	687b      	ldr	r3, [r7, #4]
 8107054:	2204      	movs	r2, #4
 8107056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8107058:	687b      	ldr	r3, [r7, #4]
 810705a:	681b      	ldr	r3, [r3, #0]
 810705c:	69db      	ldr	r3, [r3, #28]
 810705e:	f003 0303 	and.w	r3, r3, #3
 8107062:	2b00      	cmp	r3, #0
 8107064:	d003      	beq.n	810706e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107066:	6878      	ldr	r0, [r7, #4]
 8107068:	f000 fabe 	bl	81075e8 <HAL_TIM_IC_CaptureCallback>
 810706c:	e005      	b.n	810707a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810706e:	6878      	ldr	r0, [r7, #4]
 8107070:	f000 fab0 	bl	81075d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107074:	6878      	ldr	r0, [r7, #4]
 8107076:	f000 fac1 	bl	81075fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810707a:	687b      	ldr	r3, [r7, #4]
 810707c:	2200      	movs	r2, #0
 810707e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8107080:	687b      	ldr	r3, [r7, #4]
 8107082:	681b      	ldr	r3, [r3, #0]
 8107084:	691b      	ldr	r3, [r3, #16]
 8107086:	f003 0310 	and.w	r3, r3, #16
 810708a:	2b10      	cmp	r3, #16
 810708c:	d122      	bne.n	81070d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810708e:	687b      	ldr	r3, [r7, #4]
 8107090:	681b      	ldr	r3, [r3, #0]
 8107092:	68db      	ldr	r3, [r3, #12]
 8107094:	f003 0310 	and.w	r3, r3, #16
 8107098:	2b10      	cmp	r3, #16
 810709a:	d11b      	bne.n	81070d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810709c:	687b      	ldr	r3, [r7, #4]
 810709e:	681b      	ldr	r3, [r3, #0]
 81070a0:	f06f 0210 	mvn.w	r2, #16
 81070a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81070a6:	687b      	ldr	r3, [r7, #4]
 81070a8:	2208      	movs	r2, #8
 81070aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81070ac:	687b      	ldr	r3, [r7, #4]
 81070ae:	681b      	ldr	r3, [r3, #0]
 81070b0:	69db      	ldr	r3, [r3, #28]
 81070b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81070b6:	2b00      	cmp	r3, #0
 81070b8:	d003      	beq.n	81070c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81070ba:	6878      	ldr	r0, [r7, #4]
 81070bc:	f000 fa94 	bl	81075e8 <HAL_TIM_IC_CaptureCallback>
 81070c0:	e005      	b.n	81070ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81070c2:	6878      	ldr	r0, [r7, #4]
 81070c4:	f000 fa86 	bl	81075d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81070c8:	6878      	ldr	r0, [r7, #4]
 81070ca:	f000 fa97 	bl	81075fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81070ce:	687b      	ldr	r3, [r7, #4]
 81070d0:	2200      	movs	r2, #0
 81070d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81070d4:	687b      	ldr	r3, [r7, #4]
 81070d6:	681b      	ldr	r3, [r3, #0]
 81070d8:	691b      	ldr	r3, [r3, #16]
 81070da:	f003 0301 	and.w	r3, r3, #1
 81070de:	2b01      	cmp	r3, #1
 81070e0:	d10e      	bne.n	8107100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81070e2:	687b      	ldr	r3, [r7, #4]
 81070e4:	681b      	ldr	r3, [r3, #0]
 81070e6:	68db      	ldr	r3, [r3, #12]
 81070e8:	f003 0301 	and.w	r3, r3, #1
 81070ec:	2b01      	cmp	r3, #1
 81070ee:	d107      	bne.n	8107100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81070f0:	687b      	ldr	r3, [r7, #4]
 81070f2:	681b      	ldr	r3, [r3, #0]
 81070f4:	f06f 0201 	mvn.w	r2, #1
 81070f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81070fa:	6878      	ldr	r0, [r7, #4]
 81070fc:	f7fb f8ea 	bl	81022d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8107100:	687b      	ldr	r3, [r7, #4]
 8107102:	681b      	ldr	r3, [r3, #0]
 8107104:	691b      	ldr	r3, [r3, #16]
 8107106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810710a:	2b80      	cmp	r3, #128	; 0x80
 810710c:	d10e      	bne.n	810712c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810710e:	687b      	ldr	r3, [r7, #4]
 8107110:	681b      	ldr	r3, [r3, #0]
 8107112:	68db      	ldr	r3, [r3, #12]
 8107114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107118:	2b80      	cmp	r3, #128	; 0x80
 810711a:	d107      	bne.n	810712c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810711c:	687b      	ldr	r3, [r7, #4]
 810711e:	681b      	ldr	r3, [r3, #0]
 8107120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8107124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8107126:	6878      	ldr	r0, [r7, #4]
 8107128:	f000 ffc4 	bl	81080b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810712c:	687b      	ldr	r3, [r7, #4]
 810712e:	681b      	ldr	r3, [r3, #0]
 8107130:	691b      	ldr	r3, [r3, #16]
 8107132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810713a:	d10e      	bne.n	810715a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810713c:	687b      	ldr	r3, [r7, #4]
 810713e:	681b      	ldr	r3, [r3, #0]
 8107140:	68db      	ldr	r3, [r3, #12]
 8107142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107146:	2b80      	cmp	r3, #128	; 0x80
 8107148:	d107      	bne.n	810715a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810714a:	687b      	ldr	r3, [r7, #4]
 810714c:	681b      	ldr	r3, [r3, #0]
 810714e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8107152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8107154:	6878      	ldr	r0, [r7, #4]
 8107156:	f000 ffb7 	bl	81080c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810715a:	687b      	ldr	r3, [r7, #4]
 810715c:	681b      	ldr	r3, [r3, #0]
 810715e:	691b      	ldr	r3, [r3, #16]
 8107160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107164:	2b40      	cmp	r3, #64	; 0x40
 8107166:	d10e      	bne.n	8107186 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8107168:	687b      	ldr	r3, [r7, #4]
 810716a:	681b      	ldr	r3, [r3, #0]
 810716c:	68db      	ldr	r3, [r3, #12]
 810716e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107172:	2b40      	cmp	r3, #64	; 0x40
 8107174:	d107      	bne.n	8107186 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8107176:	687b      	ldr	r3, [r7, #4]
 8107178:	681b      	ldr	r3, [r3, #0]
 810717a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810717e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8107180:	6878      	ldr	r0, [r7, #4]
 8107182:	f000 fa45 	bl	8107610 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8107186:	687b      	ldr	r3, [r7, #4]
 8107188:	681b      	ldr	r3, [r3, #0]
 810718a:	691b      	ldr	r3, [r3, #16]
 810718c:	f003 0320 	and.w	r3, r3, #32
 8107190:	2b20      	cmp	r3, #32
 8107192:	d10e      	bne.n	81071b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8107194:	687b      	ldr	r3, [r7, #4]
 8107196:	681b      	ldr	r3, [r3, #0]
 8107198:	68db      	ldr	r3, [r3, #12]
 810719a:	f003 0320 	and.w	r3, r3, #32
 810719e:	2b20      	cmp	r3, #32
 81071a0:	d107      	bne.n	81071b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81071a2:	687b      	ldr	r3, [r7, #4]
 81071a4:	681b      	ldr	r3, [r3, #0]
 81071a6:	f06f 0220 	mvn.w	r2, #32
 81071aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81071ac:	6878      	ldr	r0, [r7, #4]
 81071ae:	f000 ff77 	bl	81080a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81071b2:	bf00      	nop
 81071b4:	3708      	adds	r7, #8
 81071b6:	46bd      	mov	sp, r7
 81071b8:	bd80      	pop	{r7, pc}
	...

081071bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81071bc:	b580      	push	{r7, lr}
 81071be:	b086      	sub	sp, #24
 81071c0:	af00      	add	r7, sp, #0
 81071c2:	60f8      	str	r0, [r7, #12]
 81071c4:	60b9      	str	r1, [r7, #8]
 81071c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81071c8:	2300      	movs	r3, #0
 81071ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81071cc:	68fb      	ldr	r3, [r7, #12]
 81071ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81071d2:	2b01      	cmp	r3, #1
 81071d4:	d101      	bne.n	81071da <HAL_TIM_PWM_ConfigChannel+0x1e>
 81071d6:	2302      	movs	r3, #2
 81071d8:	e0ff      	b.n	81073da <HAL_TIM_PWM_ConfigChannel+0x21e>
 81071da:	68fb      	ldr	r3, [r7, #12]
 81071dc:	2201      	movs	r2, #1
 81071de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 81071e2:	687b      	ldr	r3, [r7, #4]
 81071e4:	2b14      	cmp	r3, #20
 81071e6:	f200 80f0 	bhi.w	81073ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 81071ea:	a201      	add	r2, pc, #4	; (adr r2, 81071f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 81071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071f0:	08107245 	.word	0x08107245
 81071f4:	081073cb 	.word	0x081073cb
 81071f8:	081073cb 	.word	0x081073cb
 81071fc:	081073cb 	.word	0x081073cb
 8107200:	08107285 	.word	0x08107285
 8107204:	081073cb 	.word	0x081073cb
 8107208:	081073cb 	.word	0x081073cb
 810720c:	081073cb 	.word	0x081073cb
 8107210:	081072c7 	.word	0x081072c7
 8107214:	081073cb 	.word	0x081073cb
 8107218:	081073cb 	.word	0x081073cb
 810721c:	081073cb 	.word	0x081073cb
 8107220:	08107307 	.word	0x08107307
 8107224:	081073cb 	.word	0x081073cb
 8107228:	081073cb 	.word	0x081073cb
 810722c:	081073cb 	.word	0x081073cb
 8107230:	08107349 	.word	0x08107349
 8107234:	081073cb 	.word	0x081073cb
 8107238:	081073cb 	.word	0x081073cb
 810723c:	081073cb 	.word	0x081073cb
 8107240:	08107389 	.word	0x08107389
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8107244:	68fb      	ldr	r3, [r7, #12]
 8107246:	681b      	ldr	r3, [r3, #0]
 8107248:	68b9      	ldr	r1, [r7, #8]
 810724a:	4618      	mov	r0, r3
 810724c:	f000 fa84 	bl	8107758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8107250:	68fb      	ldr	r3, [r7, #12]
 8107252:	681b      	ldr	r3, [r3, #0]
 8107254:	699a      	ldr	r2, [r3, #24]
 8107256:	68fb      	ldr	r3, [r7, #12]
 8107258:	681b      	ldr	r3, [r3, #0]
 810725a:	f042 0208 	orr.w	r2, r2, #8
 810725e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8107260:	68fb      	ldr	r3, [r7, #12]
 8107262:	681b      	ldr	r3, [r3, #0]
 8107264:	699a      	ldr	r2, [r3, #24]
 8107266:	68fb      	ldr	r3, [r7, #12]
 8107268:	681b      	ldr	r3, [r3, #0]
 810726a:	f022 0204 	bic.w	r2, r2, #4
 810726e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8107270:	68fb      	ldr	r3, [r7, #12]
 8107272:	681b      	ldr	r3, [r3, #0]
 8107274:	6999      	ldr	r1, [r3, #24]
 8107276:	68bb      	ldr	r3, [r7, #8]
 8107278:	691a      	ldr	r2, [r3, #16]
 810727a:	68fb      	ldr	r3, [r7, #12]
 810727c:	681b      	ldr	r3, [r3, #0]
 810727e:	430a      	orrs	r2, r1
 8107280:	619a      	str	r2, [r3, #24]
      break;
 8107282:	e0a5      	b.n	81073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8107284:	68fb      	ldr	r3, [r7, #12]
 8107286:	681b      	ldr	r3, [r3, #0]
 8107288:	68b9      	ldr	r1, [r7, #8]
 810728a:	4618      	mov	r0, r3
 810728c:	f000 faf4 	bl	8107878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8107290:	68fb      	ldr	r3, [r7, #12]
 8107292:	681b      	ldr	r3, [r3, #0]
 8107294:	699a      	ldr	r2, [r3, #24]
 8107296:	68fb      	ldr	r3, [r7, #12]
 8107298:	681b      	ldr	r3, [r3, #0]
 810729a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810729e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 81072a0:	68fb      	ldr	r3, [r7, #12]
 81072a2:	681b      	ldr	r3, [r3, #0]
 81072a4:	699a      	ldr	r2, [r3, #24]
 81072a6:	68fb      	ldr	r3, [r7, #12]
 81072a8:	681b      	ldr	r3, [r3, #0]
 81072aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81072ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81072b0:	68fb      	ldr	r3, [r7, #12]
 81072b2:	681b      	ldr	r3, [r3, #0]
 81072b4:	6999      	ldr	r1, [r3, #24]
 81072b6:	68bb      	ldr	r3, [r7, #8]
 81072b8:	691b      	ldr	r3, [r3, #16]
 81072ba:	021a      	lsls	r2, r3, #8
 81072bc:	68fb      	ldr	r3, [r7, #12]
 81072be:	681b      	ldr	r3, [r3, #0]
 81072c0:	430a      	orrs	r2, r1
 81072c2:	619a      	str	r2, [r3, #24]
      break;
 81072c4:	e084      	b.n	81073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81072c6:	68fb      	ldr	r3, [r7, #12]
 81072c8:	681b      	ldr	r3, [r3, #0]
 81072ca:	68b9      	ldr	r1, [r7, #8]
 81072cc:	4618      	mov	r0, r3
 81072ce:	f000 fb5d 	bl	810798c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81072d2:	68fb      	ldr	r3, [r7, #12]
 81072d4:	681b      	ldr	r3, [r3, #0]
 81072d6:	69da      	ldr	r2, [r3, #28]
 81072d8:	68fb      	ldr	r3, [r7, #12]
 81072da:	681b      	ldr	r3, [r3, #0]
 81072dc:	f042 0208 	orr.w	r2, r2, #8
 81072e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81072e2:	68fb      	ldr	r3, [r7, #12]
 81072e4:	681b      	ldr	r3, [r3, #0]
 81072e6:	69da      	ldr	r2, [r3, #28]
 81072e8:	68fb      	ldr	r3, [r7, #12]
 81072ea:	681b      	ldr	r3, [r3, #0]
 81072ec:	f022 0204 	bic.w	r2, r2, #4
 81072f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81072f2:	68fb      	ldr	r3, [r7, #12]
 81072f4:	681b      	ldr	r3, [r3, #0]
 81072f6:	69d9      	ldr	r1, [r3, #28]
 81072f8:	68bb      	ldr	r3, [r7, #8]
 81072fa:	691a      	ldr	r2, [r3, #16]
 81072fc:	68fb      	ldr	r3, [r7, #12]
 81072fe:	681b      	ldr	r3, [r3, #0]
 8107300:	430a      	orrs	r2, r1
 8107302:	61da      	str	r2, [r3, #28]
      break;
 8107304:	e064      	b.n	81073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8107306:	68fb      	ldr	r3, [r7, #12]
 8107308:	681b      	ldr	r3, [r3, #0]
 810730a:	68b9      	ldr	r1, [r7, #8]
 810730c:	4618      	mov	r0, r3
 810730e:	f000 fbc5 	bl	8107a9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8107312:	68fb      	ldr	r3, [r7, #12]
 8107314:	681b      	ldr	r3, [r3, #0]
 8107316:	69da      	ldr	r2, [r3, #28]
 8107318:	68fb      	ldr	r3, [r7, #12]
 810731a:	681b      	ldr	r3, [r3, #0]
 810731c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8107322:	68fb      	ldr	r3, [r7, #12]
 8107324:	681b      	ldr	r3, [r3, #0]
 8107326:	69da      	ldr	r2, [r3, #28]
 8107328:	68fb      	ldr	r3, [r7, #12]
 810732a:	681b      	ldr	r3, [r3, #0]
 810732c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8107332:	68fb      	ldr	r3, [r7, #12]
 8107334:	681b      	ldr	r3, [r3, #0]
 8107336:	69d9      	ldr	r1, [r3, #28]
 8107338:	68bb      	ldr	r3, [r7, #8]
 810733a:	691b      	ldr	r3, [r3, #16]
 810733c:	021a      	lsls	r2, r3, #8
 810733e:	68fb      	ldr	r3, [r7, #12]
 8107340:	681b      	ldr	r3, [r3, #0]
 8107342:	430a      	orrs	r2, r1
 8107344:	61da      	str	r2, [r3, #28]
      break;
 8107346:	e043      	b.n	81073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8107348:	68fb      	ldr	r3, [r7, #12]
 810734a:	681b      	ldr	r3, [r3, #0]
 810734c:	68b9      	ldr	r1, [r7, #8]
 810734e:	4618      	mov	r0, r3
 8107350:	f000 fc0e 	bl	8107b70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8107354:	68fb      	ldr	r3, [r7, #12]
 8107356:	681b      	ldr	r3, [r3, #0]
 8107358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810735a:	68fb      	ldr	r3, [r7, #12]
 810735c:	681b      	ldr	r3, [r3, #0]
 810735e:	f042 0208 	orr.w	r2, r2, #8
 8107362:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8107364:	68fb      	ldr	r3, [r7, #12]
 8107366:	681b      	ldr	r3, [r3, #0]
 8107368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810736a:	68fb      	ldr	r3, [r7, #12]
 810736c:	681b      	ldr	r3, [r3, #0]
 810736e:	f022 0204 	bic.w	r2, r2, #4
 8107372:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8107374:	68fb      	ldr	r3, [r7, #12]
 8107376:	681b      	ldr	r3, [r3, #0]
 8107378:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810737a:	68bb      	ldr	r3, [r7, #8]
 810737c:	691a      	ldr	r2, [r3, #16]
 810737e:	68fb      	ldr	r3, [r7, #12]
 8107380:	681b      	ldr	r3, [r3, #0]
 8107382:	430a      	orrs	r2, r1
 8107384:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8107386:	e023      	b.n	81073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8107388:	68fb      	ldr	r3, [r7, #12]
 810738a:	681b      	ldr	r3, [r3, #0]
 810738c:	68b9      	ldr	r1, [r7, #8]
 810738e:	4618      	mov	r0, r3
 8107390:	f000 fc52 	bl	8107c38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8107394:	68fb      	ldr	r3, [r7, #12]
 8107396:	681b      	ldr	r3, [r3, #0]
 8107398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810739a:	68fb      	ldr	r3, [r7, #12]
 810739c:	681b      	ldr	r3, [r3, #0]
 810739e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81073a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 81073a4:	68fb      	ldr	r3, [r7, #12]
 81073a6:	681b      	ldr	r3, [r3, #0]
 81073a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81073aa:	68fb      	ldr	r3, [r7, #12]
 81073ac:	681b      	ldr	r3, [r3, #0]
 81073ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81073b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81073b4:	68fb      	ldr	r3, [r7, #12]
 81073b6:	681b      	ldr	r3, [r3, #0]
 81073b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81073ba:	68bb      	ldr	r3, [r7, #8]
 81073bc:	691b      	ldr	r3, [r3, #16]
 81073be:	021a      	lsls	r2, r3, #8
 81073c0:	68fb      	ldr	r3, [r7, #12]
 81073c2:	681b      	ldr	r3, [r3, #0]
 81073c4:	430a      	orrs	r2, r1
 81073c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81073c8:	e002      	b.n	81073d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 81073ca:	2301      	movs	r3, #1
 81073cc:	75fb      	strb	r3, [r7, #23]
      break;
 81073ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81073d0:	68fb      	ldr	r3, [r7, #12]
 81073d2:	2200      	movs	r2, #0
 81073d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81073d8:	7dfb      	ldrb	r3, [r7, #23]
}
 81073da:	4618      	mov	r0, r3
 81073dc:	3718      	adds	r7, #24
 81073de:	46bd      	mov	sp, r7
 81073e0:	bd80      	pop	{r7, pc}
 81073e2:	bf00      	nop

081073e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 81073e4:	b580      	push	{r7, lr}
 81073e6:	b084      	sub	sp, #16
 81073e8:	af00      	add	r7, sp, #0
 81073ea:	6078      	str	r0, [r7, #4]
 81073ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81073ee:	2300      	movs	r3, #0
 81073f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 81073f2:	687b      	ldr	r3, [r7, #4]
 81073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81073f8:	2b01      	cmp	r3, #1
 81073fa:	d101      	bne.n	8107400 <HAL_TIM_ConfigClockSource+0x1c>
 81073fc:	2302      	movs	r3, #2
 81073fe:	e0de      	b.n	81075be <HAL_TIM_ConfigClockSource+0x1da>
 8107400:	687b      	ldr	r3, [r7, #4]
 8107402:	2201      	movs	r2, #1
 8107404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8107408:	687b      	ldr	r3, [r7, #4]
 810740a:	2202      	movs	r2, #2
 810740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8107410:	687b      	ldr	r3, [r7, #4]
 8107412:	681b      	ldr	r3, [r3, #0]
 8107414:	689b      	ldr	r3, [r3, #8]
 8107416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8107418:	68bb      	ldr	r3, [r7, #8]
 810741a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810741e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8107422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8107424:	68bb      	ldr	r3, [r7, #8]
 8107426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810742a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 810742c:	687b      	ldr	r3, [r7, #4]
 810742e:	681b      	ldr	r3, [r3, #0]
 8107430:	68ba      	ldr	r2, [r7, #8]
 8107432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8107434:	683b      	ldr	r3, [r7, #0]
 8107436:	681b      	ldr	r3, [r3, #0]
 8107438:	4a63      	ldr	r2, [pc, #396]	; (81075c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 810743a:	4293      	cmp	r3, r2
 810743c:	f000 80a9 	beq.w	8107592 <HAL_TIM_ConfigClockSource+0x1ae>
 8107440:	4a61      	ldr	r2, [pc, #388]	; (81075c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8107442:	4293      	cmp	r3, r2
 8107444:	f200 80ae 	bhi.w	81075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8107448:	4a60      	ldr	r2, [pc, #384]	; (81075cc <HAL_TIM_ConfigClockSource+0x1e8>)
 810744a:	4293      	cmp	r3, r2
 810744c:	f000 80a1 	beq.w	8107592 <HAL_TIM_ConfigClockSource+0x1ae>
 8107450:	4a5e      	ldr	r2, [pc, #376]	; (81075cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8107452:	4293      	cmp	r3, r2
 8107454:	f200 80a6 	bhi.w	81075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8107458:	4a5d      	ldr	r2, [pc, #372]	; (81075d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 810745a:	4293      	cmp	r3, r2
 810745c:	f000 8099 	beq.w	8107592 <HAL_TIM_ConfigClockSource+0x1ae>
 8107460:	4a5b      	ldr	r2, [pc, #364]	; (81075d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8107462:	4293      	cmp	r3, r2
 8107464:	f200 809e 	bhi.w	81075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8107468:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810746c:	f000 8091 	beq.w	8107592 <HAL_TIM_ConfigClockSource+0x1ae>
 8107470:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8107474:	f200 8096 	bhi.w	81075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8107478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810747c:	f000 8089 	beq.w	8107592 <HAL_TIM_ConfigClockSource+0x1ae>
 8107480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107484:	f200 808e 	bhi.w	81075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8107488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810748c:	d03e      	beq.n	810750c <HAL_TIM_ConfigClockSource+0x128>
 810748e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107492:	f200 8087 	bhi.w	81075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8107496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810749a:	f000 8086 	beq.w	81075aa <HAL_TIM_ConfigClockSource+0x1c6>
 810749e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81074a2:	d87f      	bhi.n	81075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 81074a4:	2b70      	cmp	r3, #112	; 0x70
 81074a6:	d01a      	beq.n	81074de <HAL_TIM_ConfigClockSource+0xfa>
 81074a8:	2b70      	cmp	r3, #112	; 0x70
 81074aa:	d87b      	bhi.n	81075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 81074ac:	2b60      	cmp	r3, #96	; 0x60
 81074ae:	d050      	beq.n	8107552 <HAL_TIM_ConfigClockSource+0x16e>
 81074b0:	2b60      	cmp	r3, #96	; 0x60
 81074b2:	d877      	bhi.n	81075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 81074b4:	2b50      	cmp	r3, #80	; 0x50
 81074b6:	d03c      	beq.n	8107532 <HAL_TIM_ConfigClockSource+0x14e>
 81074b8:	2b50      	cmp	r3, #80	; 0x50
 81074ba:	d873      	bhi.n	81075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 81074bc:	2b40      	cmp	r3, #64	; 0x40
 81074be:	d058      	beq.n	8107572 <HAL_TIM_ConfigClockSource+0x18e>
 81074c0:	2b40      	cmp	r3, #64	; 0x40
 81074c2:	d86f      	bhi.n	81075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 81074c4:	2b30      	cmp	r3, #48	; 0x30
 81074c6:	d064      	beq.n	8107592 <HAL_TIM_ConfigClockSource+0x1ae>
 81074c8:	2b30      	cmp	r3, #48	; 0x30
 81074ca:	d86b      	bhi.n	81075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 81074cc:	2b20      	cmp	r3, #32
 81074ce:	d060      	beq.n	8107592 <HAL_TIM_ConfigClockSource+0x1ae>
 81074d0:	2b20      	cmp	r3, #32
 81074d2:	d867      	bhi.n	81075a4 <HAL_TIM_ConfigClockSource+0x1c0>
 81074d4:	2b00      	cmp	r3, #0
 81074d6:	d05c      	beq.n	8107592 <HAL_TIM_ConfigClockSource+0x1ae>
 81074d8:	2b10      	cmp	r3, #16
 81074da:	d05a      	beq.n	8107592 <HAL_TIM_ConfigClockSource+0x1ae>
 81074dc:	e062      	b.n	81075a4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81074de:	687b      	ldr	r3, [r7, #4]
 81074e0:	6818      	ldr	r0, [r3, #0]
 81074e2:	683b      	ldr	r3, [r7, #0]
 81074e4:	6899      	ldr	r1, [r3, #8]
 81074e6:	683b      	ldr	r3, [r7, #0]
 81074e8:	685a      	ldr	r2, [r3, #4]
 81074ea:	683b      	ldr	r3, [r7, #0]
 81074ec:	68db      	ldr	r3, [r3, #12]
 81074ee:	f000 fc85 	bl	8107dfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 81074f2:	687b      	ldr	r3, [r7, #4]
 81074f4:	681b      	ldr	r3, [r3, #0]
 81074f6:	689b      	ldr	r3, [r3, #8]
 81074f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 81074fa:	68bb      	ldr	r3, [r7, #8]
 81074fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8107500:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8107502:	687b      	ldr	r3, [r7, #4]
 8107504:	681b      	ldr	r3, [r3, #0]
 8107506:	68ba      	ldr	r2, [r7, #8]
 8107508:	609a      	str	r2, [r3, #8]
      break;
 810750a:	e04f      	b.n	81075ac <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810750c:	687b      	ldr	r3, [r7, #4]
 810750e:	6818      	ldr	r0, [r3, #0]
 8107510:	683b      	ldr	r3, [r7, #0]
 8107512:	6899      	ldr	r1, [r3, #8]
 8107514:	683b      	ldr	r3, [r7, #0]
 8107516:	685a      	ldr	r2, [r3, #4]
 8107518:	683b      	ldr	r3, [r7, #0]
 810751a:	68db      	ldr	r3, [r3, #12]
 810751c:	f000 fc6e 	bl	8107dfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8107520:	687b      	ldr	r3, [r7, #4]
 8107522:	681b      	ldr	r3, [r3, #0]
 8107524:	689a      	ldr	r2, [r3, #8]
 8107526:	687b      	ldr	r3, [r7, #4]
 8107528:	681b      	ldr	r3, [r3, #0]
 810752a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810752e:	609a      	str	r2, [r3, #8]
      break;
 8107530:	e03c      	b.n	81075ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8107532:	687b      	ldr	r3, [r7, #4]
 8107534:	6818      	ldr	r0, [r3, #0]
 8107536:	683b      	ldr	r3, [r7, #0]
 8107538:	6859      	ldr	r1, [r3, #4]
 810753a:	683b      	ldr	r3, [r7, #0]
 810753c:	68db      	ldr	r3, [r3, #12]
 810753e:	461a      	mov	r2, r3
 8107540:	f000 fbe0 	bl	8107d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8107544:	687b      	ldr	r3, [r7, #4]
 8107546:	681b      	ldr	r3, [r3, #0]
 8107548:	2150      	movs	r1, #80	; 0x50
 810754a:	4618      	mov	r0, r3
 810754c:	f000 fc39 	bl	8107dc2 <TIM_ITRx_SetConfig>
      break;
 8107550:	e02c      	b.n	81075ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8107552:	687b      	ldr	r3, [r7, #4]
 8107554:	6818      	ldr	r0, [r3, #0]
 8107556:	683b      	ldr	r3, [r7, #0]
 8107558:	6859      	ldr	r1, [r3, #4]
 810755a:	683b      	ldr	r3, [r7, #0]
 810755c:	68db      	ldr	r3, [r3, #12]
 810755e:	461a      	mov	r2, r3
 8107560:	f000 fbff 	bl	8107d62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8107564:	687b      	ldr	r3, [r7, #4]
 8107566:	681b      	ldr	r3, [r3, #0]
 8107568:	2160      	movs	r1, #96	; 0x60
 810756a:	4618      	mov	r0, r3
 810756c:	f000 fc29 	bl	8107dc2 <TIM_ITRx_SetConfig>
      break;
 8107570:	e01c      	b.n	81075ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8107572:	687b      	ldr	r3, [r7, #4]
 8107574:	6818      	ldr	r0, [r3, #0]
 8107576:	683b      	ldr	r3, [r7, #0]
 8107578:	6859      	ldr	r1, [r3, #4]
 810757a:	683b      	ldr	r3, [r7, #0]
 810757c:	68db      	ldr	r3, [r3, #12]
 810757e:	461a      	mov	r2, r3
 8107580:	f000 fbc0 	bl	8107d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8107584:	687b      	ldr	r3, [r7, #4]
 8107586:	681b      	ldr	r3, [r3, #0]
 8107588:	2140      	movs	r1, #64	; 0x40
 810758a:	4618      	mov	r0, r3
 810758c:	f000 fc19 	bl	8107dc2 <TIM_ITRx_SetConfig>
      break;
 8107590:	e00c      	b.n	81075ac <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8107592:	687b      	ldr	r3, [r7, #4]
 8107594:	681a      	ldr	r2, [r3, #0]
 8107596:	683b      	ldr	r3, [r7, #0]
 8107598:	681b      	ldr	r3, [r3, #0]
 810759a:	4619      	mov	r1, r3
 810759c:	4610      	mov	r0, r2
 810759e:	f000 fc10 	bl	8107dc2 <TIM_ITRx_SetConfig>
      break;
 81075a2:	e003      	b.n	81075ac <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 81075a4:	2301      	movs	r3, #1
 81075a6:	73fb      	strb	r3, [r7, #15]
      break;
 81075a8:	e000      	b.n	81075ac <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 81075aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 81075ac:	687b      	ldr	r3, [r7, #4]
 81075ae:	2201      	movs	r2, #1
 81075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81075b4:	687b      	ldr	r3, [r7, #4]
 81075b6:	2200      	movs	r2, #0
 81075b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 81075be:	4618      	mov	r0, r3
 81075c0:	3710      	adds	r7, #16
 81075c2:	46bd      	mov	sp, r7
 81075c4:	bd80      	pop	{r7, pc}
 81075c6:	bf00      	nop
 81075c8:	00100040 	.word	0x00100040
 81075cc:	00100030 	.word	0x00100030
 81075d0:	00100020 	.word	0x00100020

081075d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81075d4:	b480      	push	{r7}
 81075d6:	b083      	sub	sp, #12
 81075d8:	af00      	add	r7, sp, #0
 81075da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81075dc:	bf00      	nop
 81075de:	370c      	adds	r7, #12
 81075e0:	46bd      	mov	sp, r7
 81075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075e6:	4770      	bx	lr

081075e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81075e8:	b480      	push	{r7}
 81075ea:	b083      	sub	sp, #12
 81075ec:	af00      	add	r7, sp, #0
 81075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81075f0:	bf00      	nop
 81075f2:	370c      	adds	r7, #12
 81075f4:	46bd      	mov	sp, r7
 81075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075fa:	4770      	bx	lr

081075fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81075fc:	b480      	push	{r7}
 81075fe:	b083      	sub	sp, #12
 8107600:	af00      	add	r7, sp, #0
 8107602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8107604:	bf00      	nop
 8107606:	370c      	adds	r7, #12
 8107608:	46bd      	mov	sp, r7
 810760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810760e:	4770      	bx	lr

08107610 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8107610:	b480      	push	{r7}
 8107612:	b083      	sub	sp, #12
 8107614:	af00      	add	r7, sp, #0
 8107616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8107618:	bf00      	nop
 810761a:	370c      	adds	r7, #12
 810761c:	46bd      	mov	sp, r7
 810761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107622:	4770      	bx	lr

08107624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8107624:	b480      	push	{r7}
 8107626:	b085      	sub	sp, #20
 8107628:	af00      	add	r7, sp, #0
 810762a:	6078      	str	r0, [r7, #4]
 810762c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810762e:	687b      	ldr	r3, [r7, #4]
 8107630:	681b      	ldr	r3, [r3, #0]
 8107632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107634:	687b      	ldr	r3, [r7, #4]
 8107636:	4a40      	ldr	r2, [pc, #256]	; (8107738 <TIM_Base_SetConfig+0x114>)
 8107638:	4293      	cmp	r3, r2
 810763a:	d013      	beq.n	8107664 <TIM_Base_SetConfig+0x40>
 810763c:	687b      	ldr	r3, [r7, #4]
 810763e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107642:	d00f      	beq.n	8107664 <TIM_Base_SetConfig+0x40>
 8107644:	687b      	ldr	r3, [r7, #4]
 8107646:	4a3d      	ldr	r2, [pc, #244]	; (810773c <TIM_Base_SetConfig+0x118>)
 8107648:	4293      	cmp	r3, r2
 810764a:	d00b      	beq.n	8107664 <TIM_Base_SetConfig+0x40>
 810764c:	687b      	ldr	r3, [r7, #4]
 810764e:	4a3c      	ldr	r2, [pc, #240]	; (8107740 <TIM_Base_SetConfig+0x11c>)
 8107650:	4293      	cmp	r3, r2
 8107652:	d007      	beq.n	8107664 <TIM_Base_SetConfig+0x40>
 8107654:	687b      	ldr	r3, [r7, #4]
 8107656:	4a3b      	ldr	r2, [pc, #236]	; (8107744 <TIM_Base_SetConfig+0x120>)
 8107658:	4293      	cmp	r3, r2
 810765a:	d003      	beq.n	8107664 <TIM_Base_SetConfig+0x40>
 810765c:	687b      	ldr	r3, [r7, #4]
 810765e:	4a3a      	ldr	r2, [pc, #232]	; (8107748 <TIM_Base_SetConfig+0x124>)
 8107660:	4293      	cmp	r3, r2
 8107662:	d108      	bne.n	8107676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107664:	68fb      	ldr	r3, [r7, #12]
 8107666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810766a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810766c:	683b      	ldr	r3, [r7, #0]
 810766e:	685b      	ldr	r3, [r3, #4]
 8107670:	68fa      	ldr	r2, [r7, #12]
 8107672:	4313      	orrs	r3, r2
 8107674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107676:	687b      	ldr	r3, [r7, #4]
 8107678:	4a2f      	ldr	r2, [pc, #188]	; (8107738 <TIM_Base_SetConfig+0x114>)
 810767a:	4293      	cmp	r3, r2
 810767c:	d01f      	beq.n	81076be <TIM_Base_SetConfig+0x9a>
 810767e:	687b      	ldr	r3, [r7, #4]
 8107680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107684:	d01b      	beq.n	81076be <TIM_Base_SetConfig+0x9a>
 8107686:	687b      	ldr	r3, [r7, #4]
 8107688:	4a2c      	ldr	r2, [pc, #176]	; (810773c <TIM_Base_SetConfig+0x118>)
 810768a:	4293      	cmp	r3, r2
 810768c:	d017      	beq.n	81076be <TIM_Base_SetConfig+0x9a>
 810768e:	687b      	ldr	r3, [r7, #4]
 8107690:	4a2b      	ldr	r2, [pc, #172]	; (8107740 <TIM_Base_SetConfig+0x11c>)
 8107692:	4293      	cmp	r3, r2
 8107694:	d013      	beq.n	81076be <TIM_Base_SetConfig+0x9a>
 8107696:	687b      	ldr	r3, [r7, #4]
 8107698:	4a2a      	ldr	r2, [pc, #168]	; (8107744 <TIM_Base_SetConfig+0x120>)
 810769a:	4293      	cmp	r3, r2
 810769c:	d00f      	beq.n	81076be <TIM_Base_SetConfig+0x9a>
 810769e:	687b      	ldr	r3, [r7, #4]
 81076a0:	4a29      	ldr	r2, [pc, #164]	; (8107748 <TIM_Base_SetConfig+0x124>)
 81076a2:	4293      	cmp	r3, r2
 81076a4:	d00b      	beq.n	81076be <TIM_Base_SetConfig+0x9a>
 81076a6:	687b      	ldr	r3, [r7, #4]
 81076a8:	4a28      	ldr	r2, [pc, #160]	; (810774c <TIM_Base_SetConfig+0x128>)
 81076aa:	4293      	cmp	r3, r2
 81076ac:	d007      	beq.n	81076be <TIM_Base_SetConfig+0x9a>
 81076ae:	687b      	ldr	r3, [r7, #4]
 81076b0:	4a27      	ldr	r2, [pc, #156]	; (8107750 <TIM_Base_SetConfig+0x12c>)
 81076b2:	4293      	cmp	r3, r2
 81076b4:	d003      	beq.n	81076be <TIM_Base_SetConfig+0x9a>
 81076b6:	687b      	ldr	r3, [r7, #4]
 81076b8:	4a26      	ldr	r2, [pc, #152]	; (8107754 <TIM_Base_SetConfig+0x130>)
 81076ba:	4293      	cmp	r3, r2
 81076bc:	d108      	bne.n	81076d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81076be:	68fb      	ldr	r3, [r7, #12]
 81076c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81076c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81076c6:	683b      	ldr	r3, [r7, #0]
 81076c8:	68db      	ldr	r3, [r3, #12]
 81076ca:	68fa      	ldr	r2, [r7, #12]
 81076cc:	4313      	orrs	r3, r2
 81076ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81076d0:	68fb      	ldr	r3, [r7, #12]
 81076d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81076d6:	683b      	ldr	r3, [r7, #0]
 81076d8:	695b      	ldr	r3, [r3, #20]
 81076da:	4313      	orrs	r3, r2
 81076dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81076de:	687b      	ldr	r3, [r7, #4]
 81076e0:	68fa      	ldr	r2, [r7, #12]
 81076e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81076e4:	683b      	ldr	r3, [r7, #0]
 81076e6:	689a      	ldr	r2, [r3, #8]
 81076e8:	687b      	ldr	r3, [r7, #4]
 81076ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81076ec:	683b      	ldr	r3, [r7, #0]
 81076ee:	681a      	ldr	r2, [r3, #0]
 81076f0:	687b      	ldr	r3, [r7, #4]
 81076f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81076f4:	687b      	ldr	r3, [r7, #4]
 81076f6:	4a10      	ldr	r2, [pc, #64]	; (8107738 <TIM_Base_SetConfig+0x114>)
 81076f8:	4293      	cmp	r3, r2
 81076fa:	d00f      	beq.n	810771c <TIM_Base_SetConfig+0xf8>
 81076fc:	687b      	ldr	r3, [r7, #4]
 81076fe:	4a12      	ldr	r2, [pc, #72]	; (8107748 <TIM_Base_SetConfig+0x124>)
 8107700:	4293      	cmp	r3, r2
 8107702:	d00b      	beq.n	810771c <TIM_Base_SetConfig+0xf8>
 8107704:	687b      	ldr	r3, [r7, #4]
 8107706:	4a11      	ldr	r2, [pc, #68]	; (810774c <TIM_Base_SetConfig+0x128>)
 8107708:	4293      	cmp	r3, r2
 810770a:	d007      	beq.n	810771c <TIM_Base_SetConfig+0xf8>
 810770c:	687b      	ldr	r3, [r7, #4]
 810770e:	4a10      	ldr	r2, [pc, #64]	; (8107750 <TIM_Base_SetConfig+0x12c>)
 8107710:	4293      	cmp	r3, r2
 8107712:	d003      	beq.n	810771c <TIM_Base_SetConfig+0xf8>
 8107714:	687b      	ldr	r3, [r7, #4]
 8107716:	4a0f      	ldr	r2, [pc, #60]	; (8107754 <TIM_Base_SetConfig+0x130>)
 8107718:	4293      	cmp	r3, r2
 810771a:	d103      	bne.n	8107724 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810771c:	683b      	ldr	r3, [r7, #0]
 810771e:	691a      	ldr	r2, [r3, #16]
 8107720:	687b      	ldr	r3, [r7, #4]
 8107722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107724:	687b      	ldr	r3, [r7, #4]
 8107726:	2201      	movs	r2, #1
 8107728:	615a      	str	r2, [r3, #20]
}
 810772a:	bf00      	nop
 810772c:	3714      	adds	r7, #20
 810772e:	46bd      	mov	sp, r7
 8107730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107734:	4770      	bx	lr
 8107736:	bf00      	nop
 8107738:	40010000 	.word	0x40010000
 810773c:	40000400 	.word	0x40000400
 8107740:	40000800 	.word	0x40000800
 8107744:	40000c00 	.word	0x40000c00
 8107748:	40010400 	.word	0x40010400
 810774c:	40014000 	.word	0x40014000
 8107750:	40014400 	.word	0x40014400
 8107754:	40014800 	.word	0x40014800

08107758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107758:	b480      	push	{r7}
 810775a:	b087      	sub	sp, #28
 810775c:	af00      	add	r7, sp, #0
 810775e:	6078      	str	r0, [r7, #4]
 8107760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107762:	687b      	ldr	r3, [r7, #4]
 8107764:	6a1b      	ldr	r3, [r3, #32]
 8107766:	f023 0201 	bic.w	r2, r3, #1
 810776a:	687b      	ldr	r3, [r7, #4]
 810776c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810776e:	687b      	ldr	r3, [r7, #4]
 8107770:	6a1b      	ldr	r3, [r3, #32]
 8107772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107774:	687b      	ldr	r3, [r7, #4]
 8107776:	685b      	ldr	r3, [r3, #4]
 8107778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810777a:	687b      	ldr	r3, [r7, #4]
 810777c:	699b      	ldr	r3, [r3, #24]
 810777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8107780:	68fb      	ldr	r3, [r7, #12]
 8107782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810778a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810778c:	68fb      	ldr	r3, [r7, #12]
 810778e:	f023 0303 	bic.w	r3, r3, #3
 8107792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107794:	683b      	ldr	r3, [r7, #0]
 8107796:	681b      	ldr	r3, [r3, #0]
 8107798:	68fa      	ldr	r2, [r7, #12]
 810779a:	4313      	orrs	r3, r2
 810779c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810779e:	697b      	ldr	r3, [r7, #20]
 81077a0:	f023 0302 	bic.w	r3, r3, #2
 81077a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81077a6:	683b      	ldr	r3, [r7, #0]
 81077a8:	689b      	ldr	r3, [r3, #8]
 81077aa:	697a      	ldr	r2, [r7, #20]
 81077ac:	4313      	orrs	r3, r2
 81077ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 81077b0:	687b      	ldr	r3, [r7, #4]
 81077b2:	4a2c      	ldr	r2, [pc, #176]	; (8107864 <TIM_OC1_SetConfig+0x10c>)
 81077b4:	4293      	cmp	r3, r2
 81077b6:	d00f      	beq.n	81077d8 <TIM_OC1_SetConfig+0x80>
 81077b8:	687b      	ldr	r3, [r7, #4]
 81077ba:	4a2b      	ldr	r2, [pc, #172]	; (8107868 <TIM_OC1_SetConfig+0x110>)
 81077bc:	4293      	cmp	r3, r2
 81077be:	d00b      	beq.n	81077d8 <TIM_OC1_SetConfig+0x80>
 81077c0:	687b      	ldr	r3, [r7, #4]
 81077c2:	4a2a      	ldr	r2, [pc, #168]	; (810786c <TIM_OC1_SetConfig+0x114>)
 81077c4:	4293      	cmp	r3, r2
 81077c6:	d007      	beq.n	81077d8 <TIM_OC1_SetConfig+0x80>
 81077c8:	687b      	ldr	r3, [r7, #4]
 81077ca:	4a29      	ldr	r2, [pc, #164]	; (8107870 <TIM_OC1_SetConfig+0x118>)
 81077cc:	4293      	cmp	r3, r2
 81077ce:	d003      	beq.n	81077d8 <TIM_OC1_SetConfig+0x80>
 81077d0:	687b      	ldr	r3, [r7, #4]
 81077d2:	4a28      	ldr	r2, [pc, #160]	; (8107874 <TIM_OC1_SetConfig+0x11c>)
 81077d4:	4293      	cmp	r3, r2
 81077d6:	d10c      	bne.n	81077f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 81077d8:	697b      	ldr	r3, [r7, #20]
 81077da:	f023 0308 	bic.w	r3, r3, #8
 81077de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 81077e0:	683b      	ldr	r3, [r7, #0]
 81077e2:	68db      	ldr	r3, [r3, #12]
 81077e4:	697a      	ldr	r2, [r7, #20]
 81077e6:	4313      	orrs	r3, r2
 81077e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 81077ea:	697b      	ldr	r3, [r7, #20]
 81077ec:	f023 0304 	bic.w	r3, r3, #4
 81077f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81077f2:	687b      	ldr	r3, [r7, #4]
 81077f4:	4a1b      	ldr	r2, [pc, #108]	; (8107864 <TIM_OC1_SetConfig+0x10c>)
 81077f6:	4293      	cmp	r3, r2
 81077f8:	d00f      	beq.n	810781a <TIM_OC1_SetConfig+0xc2>
 81077fa:	687b      	ldr	r3, [r7, #4]
 81077fc:	4a1a      	ldr	r2, [pc, #104]	; (8107868 <TIM_OC1_SetConfig+0x110>)
 81077fe:	4293      	cmp	r3, r2
 8107800:	d00b      	beq.n	810781a <TIM_OC1_SetConfig+0xc2>
 8107802:	687b      	ldr	r3, [r7, #4]
 8107804:	4a19      	ldr	r2, [pc, #100]	; (810786c <TIM_OC1_SetConfig+0x114>)
 8107806:	4293      	cmp	r3, r2
 8107808:	d007      	beq.n	810781a <TIM_OC1_SetConfig+0xc2>
 810780a:	687b      	ldr	r3, [r7, #4]
 810780c:	4a18      	ldr	r2, [pc, #96]	; (8107870 <TIM_OC1_SetConfig+0x118>)
 810780e:	4293      	cmp	r3, r2
 8107810:	d003      	beq.n	810781a <TIM_OC1_SetConfig+0xc2>
 8107812:	687b      	ldr	r3, [r7, #4]
 8107814:	4a17      	ldr	r2, [pc, #92]	; (8107874 <TIM_OC1_SetConfig+0x11c>)
 8107816:	4293      	cmp	r3, r2
 8107818:	d111      	bne.n	810783e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810781a:	693b      	ldr	r3, [r7, #16]
 810781c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8107822:	693b      	ldr	r3, [r7, #16]
 8107824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810782a:	683b      	ldr	r3, [r7, #0]
 810782c:	695b      	ldr	r3, [r3, #20]
 810782e:	693a      	ldr	r2, [r7, #16]
 8107830:	4313      	orrs	r3, r2
 8107832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8107834:	683b      	ldr	r3, [r7, #0]
 8107836:	699b      	ldr	r3, [r3, #24]
 8107838:	693a      	ldr	r2, [r7, #16]
 810783a:	4313      	orrs	r3, r2
 810783c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810783e:	687b      	ldr	r3, [r7, #4]
 8107840:	693a      	ldr	r2, [r7, #16]
 8107842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107844:	687b      	ldr	r3, [r7, #4]
 8107846:	68fa      	ldr	r2, [r7, #12]
 8107848:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810784a:	683b      	ldr	r3, [r7, #0]
 810784c:	685a      	ldr	r2, [r3, #4]
 810784e:	687b      	ldr	r3, [r7, #4]
 8107850:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107852:	687b      	ldr	r3, [r7, #4]
 8107854:	697a      	ldr	r2, [r7, #20]
 8107856:	621a      	str	r2, [r3, #32]
}
 8107858:	bf00      	nop
 810785a:	371c      	adds	r7, #28
 810785c:	46bd      	mov	sp, r7
 810785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107862:	4770      	bx	lr
 8107864:	40010000 	.word	0x40010000
 8107868:	40010400 	.word	0x40010400
 810786c:	40014000 	.word	0x40014000
 8107870:	40014400 	.word	0x40014400
 8107874:	40014800 	.word	0x40014800

08107878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107878:	b480      	push	{r7}
 810787a:	b087      	sub	sp, #28
 810787c:	af00      	add	r7, sp, #0
 810787e:	6078      	str	r0, [r7, #4]
 8107880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107882:	687b      	ldr	r3, [r7, #4]
 8107884:	6a1b      	ldr	r3, [r3, #32]
 8107886:	f023 0210 	bic.w	r2, r3, #16
 810788a:	687b      	ldr	r3, [r7, #4]
 810788c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810788e:	687b      	ldr	r3, [r7, #4]
 8107890:	6a1b      	ldr	r3, [r3, #32]
 8107892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107894:	687b      	ldr	r3, [r7, #4]
 8107896:	685b      	ldr	r3, [r3, #4]
 8107898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810789a:	687b      	ldr	r3, [r7, #4]
 810789c:	699b      	ldr	r3, [r3, #24]
 810789e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81078a0:	68fb      	ldr	r3, [r7, #12]
 81078a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81078a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81078aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 81078ac:	68fb      	ldr	r3, [r7, #12]
 81078ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81078b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81078b4:	683b      	ldr	r3, [r7, #0]
 81078b6:	681b      	ldr	r3, [r3, #0]
 81078b8:	021b      	lsls	r3, r3, #8
 81078ba:	68fa      	ldr	r2, [r7, #12]
 81078bc:	4313      	orrs	r3, r2
 81078be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 81078c0:	697b      	ldr	r3, [r7, #20]
 81078c2:	f023 0320 	bic.w	r3, r3, #32
 81078c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 81078c8:	683b      	ldr	r3, [r7, #0]
 81078ca:	689b      	ldr	r3, [r3, #8]
 81078cc:	011b      	lsls	r3, r3, #4
 81078ce:	697a      	ldr	r2, [r7, #20]
 81078d0:	4313      	orrs	r3, r2
 81078d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 81078d4:	687b      	ldr	r3, [r7, #4]
 81078d6:	4a28      	ldr	r2, [pc, #160]	; (8107978 <TIM_OC2_SetConfig+0x100>)
 81078d8:	4293      	cmp	r3, r2
 81078da:	d003      	beq.n	81078e4 <TIM_OC2_SetConfig+0x6c>
 81078dc:	687b      	ldr	r3, [r7, #4]
 81078de:	4a27      	ldr	r2, [pc, #156]	; (810797c <TIM_OC2_SetConfig+0x104>)
 81078e0:	4293      	cmp	r3, r2
 81078e2:	d10d      	bne.n	8107900 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 81078e4:	697b      	ldr	r3, [r7, #20]
 81078e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81078ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 81078ec:	683b      	ldr	r3, [r7, #0]
 81078ee:	68db      	ldr	r3, [r3, #12]
 81078f0:	011b      	lsls	r3, r3, #4
 81078f2:	697a      	ldr	r2, [r7, #20]
 81078f4:	4313      	orrs	r3, r2
 81078f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 81078f8:	697b      	ldr	r3, [r7, #20]
 81078fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81078fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107900:	687b      	ldr	r3, [r7, #4]
 8107902:	4a1d      	ldr	r2, [pc, #116]	; (8107978 <TIM_OC2_SetConfig+0x100>)
 8107904:	4293      	cmp	r3, r2
 8107906:	d00f      	beq.n	8107928 <TIM_OC2_SetConfig+0xb0>
 8107908:	687b      	ldr	r3, [r7, #4]
 810790a:	4a1c      	ldr	r2, [pc, #112]	; (810797c <TIM_OC2_SetConfig+0x104>)
 810790c:	4293      	cmp	r3, r2
 810790e:	d00b      	beq.n	8107928 <TIM_OC2_SetConfig+0xb0>
 8107910:	687b      	ldr	r3, [r7, #4]
 8107912:	4a1b      	ldr	r2, [pc, #108]	; (8107980 <TIM_OC2_SetConfig+0x108>)
 8107914:	4293      	cmp	r3, r2
 8107916:	d007      	beq.n	8107928 <TIM_OC2_SetConfig+0xb0>
 8107918:	687b      	ldr	r3, [r7, #4]
 810791a:	4a1a      	ldr	r2, [pc, #104]	; (8107984 <TIM_OC2_SetConfig+0x10c>)
 810791c:	4293      	cmp	r3, r2
 810791e:	d003      	beq.n	8107928 <TIM_OC2_SetConfig+0xb0>
 8107920:	687b      	ldr	r3, [r7, #4]
 8107922:	4a19      	ldr	r2, [pc, #100]	; (8107988 <TIM_OC2_SetConfig+0x110>)
 8107924:	4293      	cmp	r3, r2
 8107926:	d113      	bne.n	8107950 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107928:	693b      	ldr	r3, [r7, #16]
 810792a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810792e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107930:	693b      	ldr	r3, [r7, #16]
 8107932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107938:	683b      	ldr	r3, [r7, #0]
 810793a:	695b      	ldr	r3, [r3, #20]
 810793c:	009b      	lsls	r3, r3, #2
 810793e:	693a      	ldr	r2, [r7, #16]
 8107940:	4313      	orrs	r3, r2
 8107942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8107944:	683b      	ldr	r3, [r7, #0]
 8107946:	699b      	ldr	r3, [r3, #24]
 8107948:	009b      	lsls	r3, r3, #2
 810794a:	693a      	ldr	r2, [r7, #16]
 810794c:	4313      	orrs	r3, r2
 810794e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107950:	687b      	ldr	r3, [r7, #4]
 8107952:	693a      	ldr	r2, [r7, #16]
 8107954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107956:	687b      	ldr	r3, [r7, #4]
 8107958:	68fa      	ldr	r2, [r7, #12]
 810795a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810795c:	683b      	ldr	r3, [r7, #0]
 810795e:	685a      	ldr	r2, [r3, #4]
 8107960:	687b      	ldr	r3, [r7, #4]
 8107962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107964:	687b      	ldr	r3, [r7, #4]
 8107966:	697a      	ldr	r2, [r7, #20]
 8107968:	621a      	str	r2, [r3, #32]
}
 810796a:	bf00      	nop
 810796c:	371c      	adds	r7, #28
 810796e:	46bd      	mov	sp, r7
 8107970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107974:	4770      	bx	lr
 8107976:	bf00      	nop
 8107978:	40010000 	.word	0x40010000
 810797c:	40010400 	.word	0x40010400
 8107980:	40014000 	.word	0x40014000
 8107984:	40014400 	.word	0x40014400
 8107988:	40014800 	.word	0x40014800

0810798c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810798c:	b480      	push	{r7}
 810798e:	b087      	sub	sp, #28
 8107990:	af00      	add	r7, sp, #0
 8107992:	6078      	str	r0, [r7, #4]
 8107994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107996:	687b      	ldr	r3, [r7, #4]
 8107998:	6a1b      	ldr	r3, [r3, #32]
 810799a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810799e:	687b      	ldr	r3, [r7, #4]
 81079a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	6a1b      	ldr	r3, [r3, #32]
 81079a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81079a8:	687b      	ldr	r3, [r7, #4]
 81079aa:	685b      	ldr	r3, [r3, #4]
 81079ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81079ae:	687b      	ldr	r3, [r7, #4]
 81079b0:	69db      	ldr	r3, [r3, #28]
 81079b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 81079b4:	68fb      	ldr	r3, [r7, #12]
 81079b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81079ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81079be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 81079c0:	68fb      	ldr	r3, [r7, #12]
 81079c2:	f023 0303 	bic.w	r3, r3, #3
 81079c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81079c8:	683b      	ldr	r3, [r7, #0]
 81079ca:	681b      	ldr	r3, [r3, #0]
 81079cc:	68fa      	ldr	r2, [r7, #12]
 81079ce:	4313      	orrs	r3, r2
 81079d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 81079d2:	697b      	ldr	r3, [r7, #20]
 81079d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81079d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 81079da:	683b      	ldr	r3, [r7, #0]
 81079dc:	689b      	ldr	r3, [r3, #8]
 81079de:	021b      	lsls	r3, r3, #8
 81079e0:	697a      	ldr	r2, [r7, #20]
 81079e2:	4313      	orrs	r3, r2
 81079e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 81079e6:	687b      	ldr	r3, [r7, #4]
 81079e8:	4a27      	ldr	r2, [pc, #156]	; (8107a88 <TIM_OC3_SetConfig+0xfc>)
 81079ea:	4293      	cmp	r3, r2
 81079ec:	d003      	beq.n	81079f6 <TIM_OC3_SetConfig+0x6a>
 81079ee:	687b      	ldr	r3, [r7, #4]
 81079f0:	4a26      	ldr	r2, [pc, #152]	; (8107a8c <TIM_OC3_SetConfig+0x100>)
 81079f2:	4293      	cmp	r3, r2
 81079f4:	d10d      	bne.n	8107a12 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 81079f6:	697b      	ldr	r3, [r7, #20]
 81079f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81079fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81079fe:	683b      	ldr	r3, [r7, #0]
 8107a00:	68db      	ldr	r3, [r3, #12]
 8107a02:	021b      	lsls	r3, r3, #8
 8107a04:	697a      	ldr	r2, [r7, #20]
 8107a06:	4313      	orrs	r3, r2
 8107a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8107a0a:	697b      	ldr	r3, [r7, #20]
 8107a0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107a12:	687b      	ldr	r3, [r7, #4]
 8107a14:	4a1c      	ldr	r2, [pc, #112]	; (8107a88 <TIM_OC3_SetConfig+0xfc>)
 8107a16:	4293      	cmp	r3, r2
 8107a18:	d00f      	beq.n	8107a3a <TIM_OC3_SetConfig+0xae>
 8107a1a:	687b      	ldr	r3, [r7, #4]
 8107a1c:	4a1b      	ldr	r2, [pc, #108]	; (8107a8c <TIM_OC3_SetConfig+0x100>)
 8107a1e:	4293      	cmp	r3, r2
 8107a20:	d00b      	beq.n	8107a3a <TIM_OC3_SetConfig+0xae>
 8107a22:	687b      	ldr	r3, [r7, #4]
 8107a24:	4a1a      	ldr	r2, [pc, #104]	; (8107a90 <TIM_OC3_SetConfig+0x104>)
 8107a26:	4293      	cmp	r3, r2
 8107a28:	d007      	beq.n	8107a3a <TIM_OC3_SetConfig+0xae>
 8107a2a:	687b      	ldr	r3, [r7, #4]
 8107a2c:	4a19      	ldr	r2, [pc, #100]	; (8107a94 <TIM_OC3_SetConfig+0x108>)
 8107a2e:	4293      	cmp	r3, r2
 8107a30:	d003      	beq.n	8107a3a <TIM_OC3_SetConfig+0xae>
 8107a32:	687b      	ldr	r3, [r7, #4]
 8107a34:	4a18      	ldr	r2, [pc, #96]	; (8107a98 <TIM_OC3_SetConfig+0x10c>)
 8107a36:	4293      	cmp	r3, r2
 8107a38:	d113      	bne.n	8107a62 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8107a3a:	693b      	ldr	r3, [r7, #16]
 8107a3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8107a42:	693b      	ldr	r3, [r7, #16]
 8107a44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8107a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8107a4a:	683b      	ldr	r3, [r7, #0]
 8107a4c:	695b      	ldr	r3, [r3, #20]
 8107a4e:	011b      	lsls	r3, r3, #4
 8107a50:	693a      	ldr	r2, [r7, #16]
 8107a52:	4313      	orrs	r3, r2
 8107a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8107a56:	683b      	ldr	r3, [r7, #0]
 8107a58:	699b      	ldr	r3, [r3, #24]
 8107a5a:	011b      	lsls	r3, r3, #4
 8107a5c:	693a      	ldr	r2, [r7, #16]
 8107a5e:	4313      	orrs	r3, r2
 8107a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107a62:	687b      	ldr	r3, [r7, #4]
 8107a64:	693a      	ldr	r2, [r7, #16]
 8107a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107a68:	687b      	ldr	r3, [r7, #4]
 8107a6a:	68fa      	ldr	r2, [r7, #12]
 8107a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8107a6e:	683b      	ldr	r3, [r7, #0]
 8107a70:	685a      	ldr	r2, [r3, #4]
 8107a72:	687b      	ldr	r3, [r7, #4]
 8107a74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107a76:	687b      	ldr	r3, [r7, #4]
 8107a78:	697a      	ldr	r2, [r7, #20]
 8107a7a:	621a      	str	r2, [r3, #32]
}
 8107a7c:	bf00      	nop
 8107a7e:	371c      	adds	r7, #28
 8107a80:	46bd      	mov	sp, r7
 8107a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a86:	4770      	bx	lr
 8107a88:	40010000 	.word	0x40010000
 8107a8c:	40010400 	.word	0x40010400
 8107a90:	40014000 	.word	0x40014000
 8107a94:	40014400 	.word	0x40014400
 8107a98:	40014800 	.word	0x40014800

08107a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107a9c:	b480      	push	{r7}
 8107a9e:	b087      	sub	sp, #28
 8107aa0:	af00      	add	r7, sp, #0
 8107aa2:	6078      	str	r0, [r7, #4]
 8107aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107aa6:	687b      	ldr	r3, [r7, #4]
 8107aa8:	6a1b      	ldr	r3, [r3, #32]
 8107aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107aae:	687b      	ldr	r3, [r7, #4]
 8107ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107ab2:	687b      	ldr	r3, [r7, #4]
 8107ab4:	6a1b      	ldr	r3, [r3, #32]
 8107ab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107ab8:	687b      	ldr	r3, [r7, #4]
 8107aba:	685b      	ldr	r3, [r3, #4]
 8107abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107abe:	687b      	ldr	r3, [r7, #4]
 8107ac0:	69db      	ldr	r3, [r3, #28]
 8107ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107ac4:	68fb      	ldr	r3, [r7, #12]
 8107ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107ad0:	68fb      	ldr	r3, [r7, #12]
 8107ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107ad8:	683b      	ldr	r3, [r7, #0]
 8107ada:	681b      	ldr	r3, [r3, #0]
 8107adc:	021b      	lsls	r3, r3, #8
 8107ade:	68fa      	ldr	r2, [r7, #12]
 8107ae0:	4313      	orrs	r3, r2
 8107ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107ae4:	693b      	ldr	r3, [r7, #16]
 8107ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8107aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107aec:	683b      	ldr	r3, [r7, #0]
 8107aee:	689b      	ldr	r3, [r3, #8]
 8107af0:	031b      	lsls	r3, r3, #12
 8107af2:	693a      	ldr	r2, [r7, #16]
 8107af4:	4313      	orrs	r3, r2
 8107af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107af8:	687b      	ldr	r3, [r7, #4]
 8107afa:	4a18      	ldr	r2, [pc, #96]	; (8107b5c <TIM_OC4_SetConfig+0xc0>)
 8107afc:	4293      	cmp	r3, r2
 8107afe:	d00f      	beq.n	8107b20 <TIM_OC4_SetConfig+0x84>
 8107b00:	687b      	ldr	r3, [r7, #4]
 8107b02:	4a17      	ldr	r2, [pc, #92]	; (8107b60 <TIM_OC4_SetConfig+0xc4>)
 8107b04:	4293      	cmp	r3, r2
 8107b06:	d00b      	beq.n	8107b20 <TIM_OC4_SetConfig+0x84>
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	4a16      	ldr	r2, [pc, #88]	; (8107b64 <TIM_OC4_SetConfig+0xc8>)
 8107b0c:	4293      	cmp	r3, r2
 8107b0e:	d007      	beq.n	8107b20 <TIM_OC4_SetConfig+0x84>
 8107b10:	687b      	ldr	r3, [r7, #4]
 8107b12:	4a15      	ldr	r2, [pc, #84]	; (8107b68 <TIM_OC4_SetConfig+0xcc>)
 8107b14:	4293      	cmp	r3, r2
 8107b16:	d003      	beq.n	8107b20 <TIM_OC4_SetConfig+0x84>
 8107b18:	687b      	ldr	r3, [r7, #4]
 8107b1a:	4a14      	ldr	r2, [pc, #80]	; (8107b6c <TIM_OC4_SetConfig+0xd0>)
 8107b1c:	4293      	cmp	r3, r2
 8107b1e:	d109      	bne.n	8107b34 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8107b20:	697b      	ldr	r3, [r7, #20]
 8107b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8107b26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8107b28:	683b      	ldr	r3, [r7, #0]
 8107b2a:	695b      	ldr	r3, [r3, #20]
 8107b2c:	019b      	lsls	r3, r3, #6
 8107b2e:	697a      	ldr	r2, [r7, #20]
 8107b30:	4313      	orrs	r3, r2
 8107b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107b34:	687b      	ldr	r3, [r7, #4]
 8107b36:	697a      	ldr	r2, [r7, #20]
 8107b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107b3a:	687b      	ldr	r3, [r7, #4]
 8107b3c:	68fa      	ldr	r2, [r7, #12]
 8107b3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8107b40:	683b      	ldr	r3, [r7, #0]
 8107b42:	685a      	ldr	r2, [r3, #4]
 8107b44:	687b      	ldr	r3, [r7, #4]
 8107b46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107b48:	687b      	ldr	r3, [r7, #4]
 8107b4a:	693a      	ldr	r2, [r7, #16]
 8107b4c:	621a      	str	r2, [r3, #32]
}
 8107b4e:	bf00      	nop
 8107b50:	371c      	adds	r7, #28
 8107b52:	46bd      	mov	sp, r7
 8107b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b58:	4770      	bx	lr
 8107b5a:	bf00      	nop
 8107b5c:	40010000 	.word	0x40010000
 8107b60:	40010400 	.word	0x40010400
 8107b64:	40014000 	.word	0x40014000
 8107b68:	40014400 	.word	0x40014400
 8107b6c:	40014800 	.word	0x40014800

08107b70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107b70:	b480      	push	{r7}
 8107b72:	b087      	sub	sp, #28
 8107b74:	af00      	add	r7, sp, #0
 8107b76:	6078      	str	r0, [r7, #4]
 8107b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8107b7a:	687b      	ldr	r3, [r7, #4]
 8107b7c:	6a1b      	ldr	r3, [r3, #32]
 8107b7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8107b82:	687b      	ldr	r3, [r7, #4]
 8107b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107b86:	687b      	ldr	r3, [r7, #4]
 8107b88:	6a1b      	ldr	r3, [r3, #32]
 8107b8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107b8c:	687b      	ldr	r3, [r7, #4]
 8107b8e:	685b      	ldr	r3, [r3, #4]
 8107b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107b92:	687b      	ldr	r3, [r7, #4]
 8107b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8107b98:	68fb      	ldr	r3, [r7, #12]
 8107b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107ba4:	683b      	ldr	r3, [r7, #0]
 8107ba6:	681b      	ldr	r3, [r3, #0]
 8107ba8:	68fa      	ldr	r2, [r7, #12]
 8107baa:	4313      	orrs	r3, r2
 8107bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8107bae:	693b      	ldr	r3, [r7, #16]
 8107bb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107bb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8107bb6:	683b      	ldr	r3, [r7, #0]
 8107bb8:	689b      	ldr	r3, [r3, #8]
 8107bba:	041b      	lsls	r3, r3, #16
 8107bbc:	693a      	ldr	r2, [r7, #16]
 8107bbe:	4313      	orrs	r3, r2
 8107bc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107bc2:	687b      	ldr	r3, [r7, #4]
 8107bc4:	4a17      	ldr	r2, [pc, #92]	; (8107c24 <TIM_OC5_SetConfig+0xb4>)
 8107bc6:	4293      	cmp	r3, r2
 8107bc8:	d00f      	beq.n	8107bea <TIM_OC5_SetConfig+0x7a>
 8107bca:	687b      	ldr	r3, [r7, #4]
 8107bcc:	4a16      	ldr	r2, [pc, #88]	; (8107c28 <TIM_OC5_SetConfig+0xb8>)
 8107bce:	4293      	cmp	r3, r2
 8107bd0:	d00b      	beq.n	8107bea <TIM_OC5_SetConfig+0x7a>
 8107bd2:	687b      	ldr	r3, [r7, #4]
 8107bd4:	4a15      	ldr	r2, [pc, #84]	; (8107c2c <TIM_OC5_SetConfig+0xbc>)
 8107bd6:	4293      	cmp	r3, r2
 8107bd8:	d007      	beq.n	8107bea <TIM_OC5_SetConfig+0x7a>
 8107bda:	687b      	ldr	r3, [r7, #4]
 8107bdc:	4a14      	ldr	r2, [pc, #80]	; (8107c30 <TIM_OC5_SetConfig+0xc0>)
 8107bde:	4293      	cmp	r3, r2
 8107be0:	d003      	beq.n	8107bea <TIM_OC5_SetConfig+0x7a>
 8107be2:	687b      	ldr	r3, [r7, #4]
 8107be4:	4a13      	ldr	r2, [pc, #76]	; (8107c34 <TIM_OC5_SetConfig+0xc4>)
 8107be6:	4293      	cmp	r3, r2
 8107be8:	d109      	bne.n	8107bfe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8107bea:	697b      	ldr	r3, [r7, #20]
 8107bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8107bf2:	683b      	ldr	r3, [r7, #0]
 8107bf4:	695b      	ldr	r3, [r3, #20]
 8107bf6:	021b      	lsls	r3, r3, #8
 8107bf8:	697a      	ldr	r2, [r7, #20]
 8107bfa:	4313      	orrs	r3, r2
 8107bfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107bfe:	687b      	ldr	r3, [r7, #4]
 8107c00:	697a      	ldr	r2, [r7, #20]
 8107c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107c04:	687b      	ldr	r3, [r7, #4]
 8107c06:	68fa      	ldr	r2, [r7, #12]
 8107c08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8107c0a:	683b      	ldr	r3, [r7, #0]
 8107c0c:	685a      	ldr	r2, [r3, #4]
 8107c0e:	687b      	ldr	r3, [r7, #4]
 8107c10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107c12:	687b      	ldr	r3, [r7, #4]
 8107c14:	693a      	ldr	r2, [r7, #16]
 8107c16:	621a      	str	r2, [r3, #32]
}
 8107c18:	bf00      	nop
 8107c1a:	371c      	adds	r7, #28
 8107c1c:	46bd      	mov	sp, r7
 8107c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c22:	4770      	bx	lr
 8107c24:	40010000 	.word	0x40010000
 8107c28:	40010400 	.word	0x40010400
 8107c2c:	40014000 	.word	0x40014000
 8107c30:	40014400 	.word	0x40014400
 8107c34:	40014800 	.word	0x40014800

08107c38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107c38:	b480      	push	{r7}
 8107c3a:	b087      	sub	sp, #28
 8107c3c:	af00      	add	r7, sp, #0
 8107c3e:	6078      	str	r0, [r7, #4]
 8107c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8107c42:	687b      	ldr	r3, [r7, #4]
 8107c44:	6a1b      	ldr	r3, [r3, #32]
 8107c46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8107c4a:	687b      	ldr	r3, [r7, #4]
 8107c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107c4e:	687b      	ldr	r3, [r7, #4]
 8107c50:	6a1b      	ldr	r3, [r3, #32]
 8107c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107c54:	687b      	ldr	r3, [r7, #4]
 8107c56:	685b      	ldr	r3, [r3, #4]
 8107c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107c5a:	687b      	ldr	r3, [r7, #4]
 8107c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8107c60:	68fb      	ldr	r3, [r7, #12]
 8107c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107c6c:	683b      	ldr	r3, [r7, #0]
 8107c6e:	681b      	ldr	r3, [r3, #0]
 8107c70:	021b      	lsls	r3, r3, #8
 8107c72:	68fa      	ldr	r2, [r7, #12]
 8107c74:	4313      	orrs	r3, r2
 8107c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8107c78:	693b      	ldr	r3, [r7, #16]
 8107c7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8107c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8107c80:	683b      	ldr	r3, [r7, #0]
 8107c82:	689b      	ldr	r3, [r3, #8]
 8107c84:	051b      	lsls	r3, r3, #20
 8107c86:	693a      	ldr	r2, [r7, #16]
 8107c88:	4313      	orrs	r3, r2
 8107c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107c8c:	687b      	ldr	r3, [r7, #4]
 8107c8e:	4a18      	ldr	r2, [pc, #96]	; (8107cf0 <TIM_OC6_SetConfig+0xb8>)
 8107c90:	4293      	cmp	r3, r2
 8107c92:	d00f      	beq.n	8107cb4 <TIM_OC6_SetConfig+0x7c>
 8107c94:	687b      	ldr	r3, [r7, #4]
 8107c96:	4a17      	ldr	r2, [pc, #92]	; (8107cf4 <TIM_OC6_SetConfig+0xbc>)
 8107c98:	4293      	cmp	r3, r2
 8107c9a:	d00b      	beq.n	8107cb4 <TIM_OC6_SetConfig+0x7c>
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	4a16      	ldr	r2, [pc, #88]	; (8107cf8 <TIM_OC6_SetConfig+0xc0>)
 8107ca0:	4293      	cmp	r3, r2
 8107ca2:	d007      	beq.n	8107cb4 <TIM_OC6_SetConfig+0x7c>
 8107ca4:	687b      	ldr	r3, [r7, #4]
 8107ca6:	4a15      	ldr	r2, [pc, #84]	; (8107cfc <TIM_OC6_SetConfig+0xc4>)
 8107ca8:	4293      	cmp	r3, r2
 8107caa:	d003      	beq.n	8107cb4 <TIM_OC6_SetConfig+0x7c>
 8107cac:	687b      	ldr	r3, [r7, #4]
 8107cae:	4a14      	ldr	r2, [pc, #80]	; (8107d00 <TIM_OC6_SetConfig+0xc8>)
 8107cb0:	4293      	cmp	r3, r2
 8107cb2:	d109      	bne.n	8107cc8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8107cb4:	697b      	ldr	r3, [r7, #20]
 8107cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8107cba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8107cbc:	683b      	ldr	r3, [r7, #0]
 8107cbe:	695b      	ldr	r3, [r3, #20]
 8107cc0:	029b      	lsls	r3, r3, #10
 8107cc2:	697a      	ldr	r2, [r7, #20]
 8107cc4:	4313      	orrs	r3, r2
 8107cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107cc8:	687b      	ldr	r3, [r7, #4]
 8107cca:	697a      	ldr	r2, [r7, #20]
 8107ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107cce:	687b      	ldr	r3, [r7, #4]
 8107cd0:	68fa      	ldr	r2, [r7, #12]
 8107cd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8107cd4:	683b      	ldr	r3, [r7, #0]
 8107cd6:	685a      	ldr	r2, [r3, #4]
 8107cd8:	687b      	ldr	r3, [r7, #4]
 8107cda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107cdc:	687b      	ldr	r3, [r7, #4]
 8107cde:	693a      	ldr	r2, [r7, #16]
 8107ce0:	621a      	str	r2, [r3, #32]
}
 8107ce2:	bf00      	nop
 8107ce4:	371c      	adds	r7, #28
 8107ce6:	46bd      	mov	sp, r7
 8107ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cec:	4770      	bx	lr
 8107cee:	bf00      	nop
 8107cf0:	40010000 	.word	0x40010000
 8107cf4:	40010400 	.word	0x40010400
 8107cf8:	40014000 	.word	0x40014000
 8107cfc:	40014400 	.word	0x40014400
 8107d00:	40014800 	.word	0x40014800

08107d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8107d04:	b480      	push	{r7}
 8107d06:	b087      	sub	sp, #28
 8107d08:	af00      	add	r7, sp, #0
 8107d0a:	60f8      	str	r0, [r7, #12]
 8107d0c:	60b9      	str	r1, [r7, #8]
 8107d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8107d10:	68fb      	ldr	r3, [r7, #12]
 8107d12:	6a1b      	ldr	r3, [r3, #32]
 8107d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107d16:	68fb      	ldr	r3, [r7, #12]
 8107d18:	6a1b      	ldr	r3, [r3, #32]
 8107d1a:	f023 0201 	bic.w	r2, r3, #1
 8107d1e:	68fb      	ldr	r3, [r7, #12]
 8107d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8107d22:	68fb      	ldr	r3, [r7, #12]
 8107d24:	699b      	ldr	r3, [r3, #24]
 8107d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8107d28:	693b      	ldr	r3, [r7, #16]
 8107d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8107d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8107d30:	687b      	ldr	r3, [r7, #4]
 8107d32:	011b      	lsls	r3, r3, #4
 8107d34:	693a      	ldr	r2, [r7, #16]
 8107d36:	4313      	orrs	r3, r2
 8107d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8107d3a:	697b      	ldr	r3, [r7, #20]
 8107d3c:	f023 030a 	bic.w	r3, r3, #10
 8107d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8107d42:	697a      	ldr	r2, [r7, #20]
 8107d44:	68bb      	ldr	r3, [r7, #8]
 8107d46:	4313      	orrs	r3, r2
 8107d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8107d4a:	68fb      	ldr	r3, [r7, #12]
 8107d4c:	693a      	ldr	r2, [r7, #16]
 8107d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107d50:	68fb      	ldr	r3, [r7, #12]
 8107d52:	697a      	ldr	r2, [r7, #20]
 8107d54:	621a      	str	r2, [r3, #32]
}
 8107d56:	bf00      	nop
 8107d58:	371c      	adds	r7, #28
 8107d5a:	46bd      	mov	sp, r7
 8107d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d60:	4770      	bx	lr

08107d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8107d62:	b480      	push	{r7}
 8107d64:	b087      	sub	sp, #28
 8107d66:	af00      	add	r7, sp, #0
 8107d68:	60f8      	str	r0, [r7, #12]
 8107d6a:	60b9      	str	r1, [r7, #8]
 8107d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107d6e:	68fb      	ldr	r3, [r7, #12]
 8107d70:	6a1b      	ldr	r3, [r3, #32]
 8107d72:	f023 0210 	bic.w	r2, r3, #16
 8107d76:	68fb      	ldr	r3, [r7, #12]
 8107d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8107d7a:	68fb      	ldr	r3, [r7, #12]
 8107d7c:	699b      	ldr	r3, [r3, #24]
 8107d7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107d80:	68fb      	ldr	r3, [r7, #12]
 8107d82:	6a1b      	ldr	r3, [r3, #32]
 8107d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8107d86:	697b      	ldr	r3, [r7, #20]
 8107d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8107d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8107d8e:	687b      	ldr	r3, [r7, #4]
 8107d90:	031b      	lsls	r3, r3, #12
 8107d92:	697a      	ldr	r2, [r7, #20]
 8107d94:	4313      	orrs	r3, r2
 8107d96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8107d98:	693b      	ldr	r3, [r7, #16]
 8107d9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8107d9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8107da0:	68bb      	ldr	r3, [r7, #8]
 8107da2:	011b      	lsls	r3, r3, #4
 8107da4:	693a      	ldr	r2, [r7, #16]
 8107da6:	4313      	orrs	r3, r2
 8107da8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8107daa:	68fb      	ldr	r3, [r7, #12]
 8107dac:	697a      	ldr	r2, [r7, #20]
 8107dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107db0:	68fb      	ldr	r3, [r7, #12]
 8107db2:	693a      	ldr	r2, [r7, #16]
 8107db4:	621a      	str	r2, [r3, #32]
}
 8107db6:	bf00      	nop
 8107db8:	371c      	adds	r7, #28
 8107dba:	46bd      	mov	sp, r7
 8107dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107dc0:	4770      	bx	lr

08107dc2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8107dc2:	b480      	push	{r7}
 8107dc4:	b085      	sub	sp, #20
 8107dc6:	af00      	add	r7, sp, #0
 8107dc8:	6078      	str	r0, [r7, #4]
 8107dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8107dcc:	687b      	ldr	r3, [r7, #4]
 8107dce:	689b      	ldr	r3, [r3, #8]
 8107dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8107dd2:	68fb      	ldr	r3, [r7, #12]
 8107dd4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8107dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8107dde:	683a      	ldr	r2, [r7, #0]
 8107de0:	68fb      	ldr	r3, [r7, #12]
 8107de2:	4313      	orrs	r3, r2
 8107de4:	f043 0307 	orr.w	r3, r3, #7
 8107de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8107dea:	687b      	ldr	r3, [r7, #4]
 8107dec:	68fa      	ldr	r2, [r7, #12]
 8107dee:	609a      	str	r2, [r3, #8]
}
 8107df0:	bf00      	nop
 8107df2:	3714      	adds	r7, #20
 8107df4:	46bd      	mov	sp, r7
 8107df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107dfa:	4770      	bx	lr

08107dfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8107dfc:	b480      	push	{r7}
 8107dfe:	b087      	sub	sp, #28
 8107e00:	af00      	add	r7, sp, #0
 8107e02:	60f8      	str	r0, [r7, #12]
 8107e04:	60b9      	str	r1, [r7, #8]
 8107e06:	607a      	str	r2, [r7, #4]
 8107e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8107e0a:	68fb      	ldr	r3, [r7, #12]
 8107e0c:	689b      	ldr	r3, [r3, #8]
 8107e0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8107e10:	697b      	ldr	r3, [r7, #20]
 8107e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107e16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8107e18:	683b      	ldr	r3, [r7, #0]
 8107e1a:	021a      	lsls	r2, r3, #8
 8107e1c:	687b      	ldr	r3, [r7, #4]
 8107e1e:	431a      	orrs	r2, r3
 8107e20:	68bb      	ldr	r3, [r7, #8]
 8107e22:	4313      	orrs	r3, r2
 8107e24:	697a      	ldr	r2, [r7, #20]
 8107e26:	4313      	orrs	r3, r2
 8107e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8107e2a:	68fb      	ldr	r3, [r7, #12]
 8107e2c:	697a      	ldr	r2, [r7, #20]
 8107e2e:	609a      	str	r2, [r3, #8]
}
 8107e30:	bf00      	nop
 8107e32:	371c      	adds	r7, #28
 8107e34:	46bd      	mov	sp, r7
 8107e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e3a:	4770      	bx	lr

08107e3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8107e3c:	b480      	push	{r7}
 8107e3e:	b087      	sub	sp, #28
 8107e40:	af00      	add	r7, sp, #0
 8107e42:	60f8      	str	r0, [r7, #12]
 8107e44:	60b9      	str	r1, [r7, #8]
 8107e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8107e48:	68bb      	ldr	r3, [r7, #8]
 8107e4a:	f003 031f 	and.w	r3, r3, #31
 8107e4e:	2201      	movs	r2, #1
 8107e50:	fa02 f303 	lsl.w	r3, r2, r3
 8107e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8107e56:	68fb      	ldr	r3, [r7, #12]
 8107e58:	6a1a      	ldr	r2, [r3, #32]
 8107e5a:	697b      	ldr	r3, [r7, #20]
 8107e5c:	43db      	mvns	r3, r3
 8107e5e:	401a      	ands	r2, r3
 8107e60:	68fb      	ldr	r3, [r7, #12]
 8107e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8107e64:	68fb      	ldr	r3, [r7, #12]
 8107e66:	6a1a      	ldr	r2, [r3, #32]
 8107e68:	68bb      	ldr	r3, [r7, #8]
 8107e6a:	f003 031f 	and.w	r3, r3, #31
 8107e6e:	6879      	ldr	r1, [r7, #4]
 8107e70:	fa01 f303 	lsl.w	r3, r1, r3
 8107e74:	431a      	orrs	r2, r3
 8107e76:	68fb      	ldr	r3, [r7, #12]
 8107e78:	621a      	str	r2, [r3, #32]
}
 8107e7a:	bf00      	nop
 8107e7c:	371c      	adds	r7, #28
 8107e7e:	46bd      	mov	sp, r7
 8107e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e84:	4770      	bx	lr
	...

08107e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8107e88:	b480      	push	{r7}
 8107e8a:	b085      	sub	sp, #20
 8107e8c:	af00      	add	r7, sp, #0
 8107e8e:	6078      	str	r0, [r7, #4]
 8107e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8107e92:	687b      	ldr	r3, [r7, #4]
 8107e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107e98:	2b01      	cmp	r3, #1
 8107e9a:	d101      	bne.n	8107ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8107e9c:	2302      	movs	r3, #2
 8107e9e:	e06d      	b.n	8107f7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8107ea0:	687b      	ldr	r3, [r7, #4]
 8107ea2:	2201      	movs	r2, #1
 8107ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107ea8:	687b      	ldr	r3, [r7, #4]
 8107eaa:	2202      	movs	r2, #2
 8107eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8107eb0:	687b      	ldr	r3, [r7, #4]
 8107eb2:	681b      	ldr	r3, [r3, #0]
 8107eb4:	685b      	ldr	r3, [r3, #4]
 8107eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8107eb8:	687b      	ldr	r3, [r7, #4]
 8107eba:	681b      	ldr	r3, [r3, #0]
 8107ebc:	689b      	ldr	r3, [r3, #8]
 8107ebe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8107ec0:	687b      	ldr	r3, [r7, #4]
 8107ec2:	681b      	ldr	r3, [r3, #0]
 8107ec4:	4a30      	ldr	r2, [pc, #192]	; (8107f88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107ec6:	4293      	cmp	r3, r2
 8107ec8:	d004      	beq.n	8107ed4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8107eca:	687b      	ldr	r3, [r7, #4]
 8107ecc:	681b      	ldr	r3, [r3, #0]
 8107ece:	4a2f      	ldr	r2, [pc, #188]	; (8107f8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107ed0:	4293      	cmp	r3, r2
 8107ed2:	d108      	bne.n	8107ee6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8107ed4:	68fb      	ldr	r3, [r7, #12]
 8107ed6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8107eda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8107edc:	683b      	ldr	r3, [r7, #0]
 8107ede:	685b      	ldr	r3, [r3, #4]
 8107ee0:	68fa      	ldr	r2, [r7, #12]
 8107ee2:	4313      	orrs	r3, r2
 8107ee4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8107ee6:	68fb      	ldr	r3, [r7, #12]
 8107ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107eec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8107eee:	683b      	ldr	r3, [r7, #0]
 8107ef0:	681b      	ldr	r3, [r3, #0]
 8107ef2:	68fa      	ldr	r2, [r7, #12]
 8107ef4:	4313      	orrs	r3, r2
 8107ef6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8107ef8:	687b      	ldr	r3, [r7, #4]
 8107efa:	681b      	ldr	r3, [r3, #0]
 8107efc:	68fa      	ldr	r2, [r7, #12]
 8107efe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107f00:	687b      	ldr	r3, [r7, #4]
 8107f02:	681b      	ldr	r3, [r3, #0]
 8107f04:	4a20      	ldr	r2, [pc, #128]	; (8107f88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107f06:	4293      	cmp	r3, r2
 8107f08:	d022      	beq.n	8107f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107f0a:	687b      	ldr	r3, [r7, #4]
 8107f0c:	681b      	ldr	r3, [r3, #0]
 8107f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107f12:	d01d      	beq.n	8107f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107f14:	687b      	ldr	r3, [r7, #4]
 8107f16:	681b      	ldr	r3, [r3, #0]
 8107f18:	4a1d      	ldr	r2, [pc, #116]	; (8107f90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8107f1a:	4293      	cmp	r3, r2
 8107f1c:	d018      	beq.n	8107f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107f1e:	687b      	ldr	r3, [r7, #4]
 8107f20:	681b      	ldr	r3, [r3, #0]
 8107f22:	4a1c      	ldr	r2, [pc, #112]	; (8107f94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8107f24:	4293      	cmp	r3, r2
 8107f26:	d013      	beq.n	8107f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107f28:	687b      	ldr	r3, [r7, #4]
 8107f2a:	681b      	ldr	r3, [r3, #0]
 8107f2c:	4a1a      	ldr	r2, [pc, #104]	; (8107f98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8107f2e:	4293      	cmp	r3, r2
 8107f30:	d00e      	beq.n	8107f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107f32:	687b      	ldr	r3, [r7, #4]
 8107f34:	681b      	ldr	r3, [r3, #0]
 8107f36:	4a15      	ldr	r2, [pc, #84]	; (8107f8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107f38:	4293      	cmp	r3, r2
 8107f3a:	d009      	beq.n	8107f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107f3c:	687b      	ldr	r3, [r7, #4]
 8107f3e:	681b      	ldr	r3, [r3, #0]
 8107f40:	4a16      	ldr	r2, [pc, #88]	; (8107f9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8107f42:	4293      	cmp	r3, r2
 8107f44:	d004      	beq.n	8107f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107f46:	687b      	ldr	r3, [r7, #4]
 8107f48:	681b      	ldr	r3, [r3, #0]
 8107f4a:	4a15      	ldr	r2, [pc, #84]	; (8107fa0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8107f4c:	4293      	cmp	r3, r2
 8107f4e:	d10c      	bne.n	8107f6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8107f50:	68bb      	ldr	r3, [r7, #8]
 8107f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107f56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8107f58:	683b      	ldr	r3, [r7, #0]
 8107f5a:	689b      	ldr	r3, [r3, #8]
 8107f5c:	68ba      	ldr	r2, [r7, #8]
 8107f5e:	4313      	orrs	r3, r2
 8107f60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8107f62:	687b      	ldr	r3, [r7, #4]
 8107f64:	681b      	ldr	r3, [r3, #0]
 8107f66:	68ba      	ldr	r2, [r7, #8]
 8107f68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8107f6a:	687b      	ldr	r3, [r7, #4]
 8107f6c:	2201      	movs	r2, #1
 8107f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107f72:	687b      	ldr	r3, [r7, #4]
 8107f74:	2200      	movs	r2, #0
 8107f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107f7a:	2300      	movs	r3, #0
}
 8107f7c:	4618      	mov	r0, r3
 8107f7e:	3714      	adds	r7, #20
 8107f80:	46bd      	mov	sp, r7
 8107f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f86:	4770      	bx	lr
 8107f88:	40010000 	.word	0x40010000
 8107f8c:	40010400 	.word	0x40010400
 8107f90:	40000400 	.word	0x40000400
 8107f94:	40000800 	.word	0x40000800
 8107f98:	40000c00 	.word	0x40000c00
 8107f9c:	40001800 	.word	0x40001800
 8107fa0:	40014000 	.word	0x40014000

08107fa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8107fa4:	b480      	push	{r7}
 8107fa6:	b085      	sub	sp, #20
 8107fa8:	af00      	add	r7, sp, #0
 8107faa:	6078      	str	r0, [r7, #4]
 8107fac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8107fae:	2300      	movs	r3, #0
 8107fb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8107fb2:	687b      	ldr	r3, [r7, #4]
 8107fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107fb8:	2b01      	cmp	r3, #1
 8107fba:	d101      	bne.n	8107fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8107fbc:	2302      	movs	r3, #2
 8107fbe:	e065      	b.n	810808c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8107fc0:	687b      	ldr	r3, [r7, #4]
 8107fc2:	2201      	movs	r2, #1
 8107fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8107fc8:	68fb      	ldr	r3, [r7, #12]
 8107fca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8107fce:	683b      	ldr	r3, [r7, #0]
 8107fd0:	68db      	ldr	r3, [r3, #12]
 8107fd2:	4313      	orrs	r3, r2
 8107fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8107fd6:	68fb      	ldr	r3, [r7, #12]
 8107fd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8107fdc:	683b      	ldr	r3, [r7, #0]
 8107fde:	689b      	ldr	r3, [r3, #8]
 8107fe0:	4313      	orrs	r3, r2
 8107fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8107fe4:	68fb      	ldr	r3, [r7, #12]
 8107fe6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8107fea:	683b      	ldr	r3, [r7, #0]
 8107fec:	685b      	ldr	r3, [r3, #4]
 8107fee:	4313      	orrs	r3, r2
 8107ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8107ff2:	68fb      	ldr	r3, [r7, #12]
 8107ff4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8107ff8:	683b      	ldr	r3, [r7, #0]
 8107ffa:	681b      	ldr	r3, [r3, #0]
 8107ffc:	4313      	orrs	r3, r2
 8107ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8108000:	68fb      	ldr	r3, [r7, #12]
 8108002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8108006:	683b      	ldr	r3, [r7, #0]
 8108008:	691b      	ldr	r3, [r3, #16]
 810800a:	4313      	orrs	r3, r2
 810800c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810800e:	68fb      	ldr	r3, [r7, #12]
 8108010:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8108014:	683b      	ldr	r3, [r7, #0]
 8108016:	695b      	ldr	r3, [r3, #20]
 8108018:	4313      	orrs	r3, r2
 810801a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810801c:	68fb      	ldr	r3, [r7, #12]
 810801e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8108022:	683b      	ldr	r3, [r7, #0]
 8108024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108026:	4313      	orrs	r3, r2
 8108028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810802a:	68fb      	ldr	r3, [r7, #12]
 810802c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8108030:	683b      	ldr	r3, [r7, #0]
 8108032:	699b      	ldr	r3, [r3, #24]
 8108034:	041b      	lsls	r3, r3, #16
 8108036:	4313      	orrs	r3, r2
 8108038:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810803a:	687b      	ldr	r3, [r7, #4]
 810803c:	681b      	ldr	r3, [r3, #0]
 810803e:	4a16      	ldr	r2, [pc, #88]	; (8108098 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8108040:	4293      	cmp	r3, r2
 8108042:	d004      	beq.n	810804e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8108044:	687b      	ldr	r3, [r7, #4]
 8108046:	681b      	ldr	r3, [r3, #0]
 8108048:	4a14      	ldr	r2, [pc, #80]	; (810809c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810804a:	4293      	cmp	r3, r2
 810804c:	d115      	bne.n	810807a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810804e:	68fb      	ldr	r3, [r7, #12]
 8108050:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8108054:	683b      	ldr	r3, [r7, #0]
 8108056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108058:	051b      	lsls	r3, r3, #20
 810805a:	4313      	orrs	r3, r2
 810805c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810805e:	68fb      	ldr	r3, [r7, #12]
 8108060:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8108064:	683b      	ldr	r3, [r7, #0]
 8108066:	69db      	ldr	r3, [r3, #28]
 8108068:	4313      	orrs	r3, r2
 810806a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810806c:	68fb      	ldr	r3, [r7, #12]
 810806e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8108072:	683b      	ldr	r3, [r7, #0]
 8108074:	6a1b      	ldr	r3, [r3, #32]
 8108076:	4313      	orrs	r3, r2
 8108078:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810807a:	687b      	ldr	r3, [r7, #4]
 810807c:	681b      	ldr	r3, [r3, #0]
 810807e:	68fa      	ldr	r2, [r7, #12]
 8108080:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8108082:	687b      	ldr	r3, [r7, #4]
 8108084:	2200      	movs	r2, #0
 8108086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810808a:	2300      	movs	r3, #0
}
 810808c:	4618      	mov	r0, r3
 810808e:	3714      	adds	r7, #20
 8108090:	46bd      	mov	sp, r7
 8108092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108096:	4770      	bx	lr
 8108098:	40010000 	.word	0x40010000
 810809c:	40010400 	.word	0x40010400

081080a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81080a0:	b480      	push	{r7}
 81080a2:	b083      	sub	sp, #12
 81080a4:	af00      	add	r7, sp, #0
 81080a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81080a8:	bf00      	nop
 81080aa:	370c      	adds	r7, #12
 81080ac:	46bd      	mov	sp, r7
 81080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080b2:	4770      	bx	lr

081080b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81080b4:	b480      	push	{r7}
 81080b6:	b083      	sub	sp, #12
 81080b8:	af00      	add	r7, sp, #0
 81080ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81080bc:	bf00      	nop
 81080be:	370c      	adds	r7, #12
 81080c0:	46bd      	mov	sp, r7
 81080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080c6:	4770      	bx	lr

081080c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81080c8:	b480      	push	{r7}
 81080ca:	b083      	sub	sp, #12
 81080cc:	af00      	add	r7, sp, #0
 81080ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81080d0:	bf00      	nop
 81080d2:	370c      	adds	r7, #12
 81080d4:	46bd      	mov	sp, r7
 81080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080da:	4770      	bx	lr

081080dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81080dc:	b580      	push	{r7, lr}
 81080de:	b082      	sub	sp, #8
 81080e0:	af00      	add	r7, sp, #0
 81080e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81080e4:	687b      	ldr	r3, [r7, #4]
 81080e6:	2b00      	cmp	r3, #0
 81080e8:	d101      	bne.n	81080ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81080ea:	2301      	movs	r3, #1
 81080ec:	e042      	b.n	8108174 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81080ee:	687b      	ldr	r3, [r7, #4]
 81080f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81080f4:	2b00      	cmp	r3, #0
 81080f6:	d106      	bne.n	8108106 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81080f8:	687b      	ldr	r3, [r7, #4]
 81080fa:	2200      	movs	r2, #0
 81080fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8108100:	6878      	ldr	r0, [r7, #4]
 8108102:	f7fa fa05 	bl	8102510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8108106:	687b      	ldr	r3, [r7, #4]
 8108108:	2224      	movs	r2, #36	; 0x24
 810810a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 810810e:	687b      	ldr	r3, [r7, #4]
 8108110:	681b      	ldr	r3, [r3, #0]
 8108112:	681a      	ldr	r2, [r3, #0]
 8108114:	687b      	ldr	r3, [r7, #4]
 8108116:	681b      	ldr	r3, [r3, #0]
 8108118:	f022 0201 	bic.w	r2, r2, #1
 810811c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810811e:	6878      	ldr	r0, [r7, #4]
 8108120:	f000 f8ba 	bl	8108298 <UART_SetConfig>
 8108124:	4603      	mov	r3, r0
 8108126:	2b01      	cmp	r3, #1
 8108128:	d101      	bne.n	810812e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810812a:	2301      	movs	r3, #1
 810812c:	e022      	b.n	8108174 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810812e:	687b      	ldr	r3, [r7, #4]
 8108130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108132:	2b00      	cmp	r3, #0
 8108134:	d002      	beq.n	810813c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8108136:	6878      	ldr	r0, [r7, #4]
 8108138:	f000 fe16 	bl	8108d68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810813c:	687b      	ldr	r3, [r7, #4]
 810813e:	681b      	ldr	r3, [r3, #0]
 8108140:	685a      	ldr	r2, [r3, #4]
 8108142:	687b      	ldr	r3, [r7, #4]
 8108144:	681b      	ldr	r3, [r3, #0]
 8108146:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810814a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810814c:	687b      	ldr	r3, [r7, #4]
 810814e:	681b      	ldr	r3, [r3, #0]
 8108150:	689a      	ldr	r2, [r3, #8]
 8108152:	687b      	ldr	r3, [r7, #4]
 8108154:	681b      	ldr	r3, [r3, #0]
 8108156:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810815a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810815c:	687b      	ldr	r3, [r7, #4]
 810815e:	681b      	ldr	r3, [r3, #0]
 8108160:	681a      	ldr	r2, [r3, #0]
 8108162:	687b      	ldr	r3, [r7, #4]
 8108164:	681b      	ldr	r3, [r3, #0]
 8108166:	f042 0201 	orr.w	r2, r2, #1
 810816a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810816c:	6878      	ldr	r0, [r7, #4]
 810816e:	f000 fe9d 	bl	8108eac <UART_CheckIdleState>
 8108172:	4603      	mov	r3, r0
}
 8108174:	4618      	mov	r0, r3
 8108176:	3708      	adds	r7, #8
 8108178:	46bd      	mov	sp, r7
 810817a:	bd80      	pop	{r7, pc}

0810817c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810817c:	b580      	push	{r7, lr}
 810817e:	b08a      	sub	sp, #40	; 0x28
 8108180:	af02      	add	r7, sp, #8
 8108182:	60f8      	str	r0, [r7, #12]
 8108184:	60b9      	str	r1, [r7, #8]
 8108186:	603b      	str	r3, [r7, #0]
 8108188:	4613      	mov	r3, r2
 810818a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810818c:	68fb      	ldr	r3, [r7, #12]
 810818e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108192:	2b20      	cmp	r3, #32
 8108194:	d17b      	bne.n	810828e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8108196:	68bb      	ldr	r3, [r7, #8]
 8108198:	2b00      	cmp	r3, #0
 810819a:	d002      	beq.n	81081a2 <HAL_UART_Transmit+0x26>
 810819c:	88fb      	ldrh	r3, [r7, #6]
 810819e:	2b00      	cmp	r3, #0
 81081a0:	d101      	bne.n	81081a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 81081a2:	2301      	movs	r3, #1
 81081a4:	e074      	b.n	8108290 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81081a6:	68fb      	ldr	r3, [r7, #12]
 81081a8:	2200      	movs	r2, #0
 81081aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81081ae:	68fb      	ldr	r3, [r7, #12]
 81081b0:	2221      	movs	r2, #33	; 0x21
 81081b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81081b6:	f7fa fbe9 	bl	810298c <HAL_GetTick>
 81081ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81081bc:	68fb      	ldr	r3, [r7, #12]
 81081be:	88fa      	ldrh	r2, [r7, #6]
 81081c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81081c4:	68fb      	ldr	r3, [r7, #12]
 81081c6:	88fa      	ldrh	r2, [r7, #6]
 81081c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81081cc:	68fb      	ldr	r3, [r7, #12]
 81081ce:	689b      	ldr	r3, [r3, #8]
 81081d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81081d4:	d108      	bne.n	81081e8 <HAL_UART_Transmit+0x6c>
 81081d6:	68fb      	ldr	r3, [r7, #12]
 81081d8:	691b      	ldr	r3, [r3, #16]
 81081da:	2b00      	cmp	r3, #0
 81081dc:	d104      	bne.n	81081e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 81081de:	2300      	movs	r3, #0
 81081e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81081e2:	68bb      	ldr	r3, [r7, #8]
 81081e4:	61bb      	str	r3, [r7, #24]
 81081e6:	e003      	b.n	81081f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 81081e8:	68bb      	ldr	r3, [r7, #8]
 81081ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81081ec:	2300      	movs	r3, #0
 81081ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 81081f0:	e030      	b.n	8108254 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81081f2:	683b      	ldr	r3, [r7, #0]
 81081f4:	9300      	str	r3, [sp, #0]
 81081f6:	697b      	ldr	r3, [r7, #20]
 81081f8:	2200      	movs	r2, #0
 81081fa:	2180      	movs	r1, #128	; 0x80
 81081fc:	68f8      	ldr	r0, [r7, #12]
 81081fe:	f000 feff 	bl	8109000 <UART_WaitOnFlagUntilTimeout>
 8108202:	4603      	mov	r3, r0
 8108204:	2b00      	cmp	r3, #0
 8108206:	d005      	beq.n	8108214 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8108208:	68fb      	ldr	r3, [r7, #12]
 810820a:	2220      	movs	r2, #32
 810820c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8108210:	2303      	movs	r3, #3
 8108212:	e03d      	b.n	8108290 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8108214:	69fb      	ldr	r3, [r7, #28]
 8108216:	2b00      	cmp	r3, #0
 8108218:	d10b      	bne.n	8108232 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810821a:	69bb      	ldr	r3, [r7, #24]
 810821c:	881b      	ldrh	r3, [r3, #0]
 810821e:	461a      	mov	r2, r3
 8108220:	68fb      	ldr	r3, [r7, #12]
 8108222:	681b      	ldr	r3, [r3, #0]
 8108224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8108228:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 810822a:	69bb      	ldr	r3, [r7, #24]
 810822c:	3302      	adds	r3, #2
 810822e:	61bb      	str	r3, [r7, #24]
 8108230:	e007      	b.n	8108242 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8108232:	69fb      	ldr	r3, [r7, #28]
 8108234:	781a      	ldrb	r2, [r3, #0]
 8108236:	68fb      	ldr	r3, [r7, #12]
 8108238:	681b      	ldr	r3, [r3, #0]
 810823a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 810823c:	69fb      	ldr	r3, [r7, #28]
 810823e:	3301      	adds	r3, #1
 8108240:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8108242:	68fb      	ldr	r3, [r7, #12]
 8108244:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108248:	b29b      	uxth	r3, r3
 810824a:	3b01      	subs	r3, #1
 810824c:	b29a      	uxth	r2, r3
 810824e:	68fb      	ldr	r3, [r7, #12]
 8108250:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8108254:	68fb      	ldr	r3, [r7, #12]
 8108256:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 810825a:	b29b      	uxth	r3, r3
 810825c:	2b00      	cmp	r3, #0
 810825e:	d1c8      	bne.n	81081f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8108260:	683b      	ldr	r3, [r7, #0]
 8108262:	9300      	str	r3, [sp, #0]
 8108264:	697b      	ldr	r3, [r7, #20]
 8108266:	2200      	movs	r2, #0
 8108268:	2140      	movs	r1, #64	; 0x40
 810826a:	68f8      	ldr	r0, [r7, #12]
 810826c:	f000 fec8 	bl	8109000 <UART_WaitOnFlagUntilTimeout>
 8108270:	4603      	mov	r3, r0
 8108272:	2b00      	cmp	r3, #0
 8108274:	d005      	beq.n	8108282 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8108276:	68fb      	ldr	r3, [r7, #12]
 8108278:	2220      	movs	r2, #32
 810827a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 810827e:	2303      	movs	r3, #3
 8108280:	e006      	b.n	8108290 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8108282:	68fb      	ldr	r3, [r7, #12]
 8108284:	2220      	movs	r2, #32
 8108286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 810828a:	2300      	movs	r3, #0
 810828c:	e000      	b.n	8108290 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810828e:	2302      	movs	r3, #2
  }
}
 8108290:	4618      	mov	r0, r3
 8108292:	3720      	adds	r7, #32
 8108294:	46bd      	mov	sp, r7
 8108296:	bd80      	pop	{r7, pc}

08108298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810829c:	b092      	sub	sp, #72	; 0x48
 810829e:	af00      	add	r7, sp, #0
 81082a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81082a2:	2300      	movs	r3, #0
 81082a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81082a8:	697b      	ldr	r3, [r7, #20]
 81082aa:	689a      	ldr	r2, [r3, #8]
 81082ac:	697b      	ldr	r3, [r7, #20]
 81082ae:	691b      	ldr	r3, [r3, #16]
 81082b0:	431a      	orrs	r2, r3
 81082b2:	697b      	ldr	r3, [r7, #20]
 81082b4:	695b      	ldr	r3, [r3, #20]
 81082b6:	431a      	orrs	r2, r3
 81082b8:	697b      	ldr	r3, [r7, #20]
 81082ba:	69db      	ldr	r3, [r3, #28]
 81082bc:	4313      	orrs	r3, r2
 81082be:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81082c0:	697b      	ldr	r3, [r7, #20]
 81082c2:	681b      	ldr	r3, [r3, #0]
 81082c4:	681a      	ldr	r2, [r3, #0]
 81082c6:	4bbd      	ldr	r3, [pc, #756]	; (81085bc <UART_SetConfig+0x324>)
 81082c8:	4013      	ands	r3, r2
 81082ca:	697a      	ldr	r2, [r7, #20]
 81082cc:	6812      	ldr	r2, [r2, #0]
 81082ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81082d0:	430b      	orrs	r3, r1
 81082d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81082d4:	697b      	ldr	r3, [r7, #20]
 81082d6:	681b      	ldr	r3, [r3, #0]
 81082d8:	685b      	ldr	r3, [r3, #4]
 81082da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81082de:	697b      	ldr	r3, [r7, #20]
 81082e0:	68da      	ldr	r2, [r3, #12]
 81082e2:	697b      	ldr	r3, [r7, #20]
 81082e4:	681b      	ldr	r3, [r3, #0]
 81082e6:	430a      	orrs	r2, r1
 81082e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81082ea:	697b      	ldr	r3, [r7, #20]
 81082ec:	699b      	ldr	r3, [r3, #24]
 81082ee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81082f0:	697b      	ldr	r3, [r7, #20]
 81082f2:	681b      	ldr	r3, [r3, #0]
 81082f4:	4ab2      	ldr	r2, [pc, #712]	; (81085c0 <UART_SetConfig+0x328>)
 81082f6:	4293      	cmp	r3, r2
 81082f8:	d004      	beq.n	8108304 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81082fa:	697b      	ldr	r3, [r7, #20]
 81082fc:	6a1b      	ldr	r3, [r3, #32]
 81082fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108300:	4313      	orrs	r3, r2
 8108302:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108304:	697b      	ldr	r3, [r7, #20]
 8108306:	681b      	ldr	r3, [r3, #0]
 8108308:	689b      	ldr	r3, [r3, #8]
 810830a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810830e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8108312:	697a      	ldr	r2, [r7, #20]
 8108314:	6812      	ldr	r2, [r2, #0]
 8108316:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108318:	430b      	orrs	r3, r1
 810831a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810831c:	697b      	ldr	r3, [r7, #20]
 810831e:	681b      	ldr	r3, [r3, #0]
 8108320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108322:	f023 010f 	bic.w	r1, r3, #15
 8108326:	697b      	ldr	r3, [r7, #20]
 8108328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810832a:	697b      	ldr	r3, [r7, #20]
 810832c:	681b      	ldr	r3, [r3, #0]
 810832e:	430a      	orrs	r2, r1
 8108330:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108332:	697b      	ldr	r3, [r7, #20]
 8108334:	681b      	ldr	r3, [r3, #0]
 8108336:	4aa3      	ldr	r2, [pc, #652]	; (81085c4 <UART_SetConfig+0x32c>)
 8108338:	4293      	cmp	r3, r2
 810833a:	d177      	bne.n	810842c <UART_SetConfig+0x194>
 810833c:	4ba2      	ldr	r3, [pc, #648]	; (81085c8 <UART_SetConfig+0x330>)
 810833e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108340:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108344:	2b28      	cmp	r3, #40	; 0x28
 8108346:	d86d      	bhi.n	8108424 <UART_SetConfig+0x18c>
 8108348:	a201      	add	r2, pc, #4	; (adr r2, 8108350 <UART_SetConfig+0xb8>)
 810834a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810834e:	bf00      	nop
 8108350:	081083f5 	.word	0x081083f5
 8108354:	08108425 	.word	0x08108425
 8108358:	08108425 	.word	0x08108425
 810835c:	08108425 	.word	0x08108425
 8108360:	08108425 	.word	0x08108425
 8108364:	08108425 	.word	0x08108425
 8108368:	08108425 	.word	0x08108425
 810836c:	08108425 	.word	0x08108425
 8108370:	081083fd 	.word	0x081083fd
 8108374:	08108425 	.word	0x08108425
 8108378:	08108425 	.word	0x08108425
 810837c:	08108425 	.word	0x08108425
 8108380:	08108425 	.word	0x08108425
 8108384:	08108425 	.word	0x08108425
 8108388:	08108425 	.word	0x08108425
 810838c:	08108425 	.word	0x08108425
 8108390:	08108405 	.word	0x08108405
 8108394:	08108425 	.word	0x08108425
 8108398:	08108425 	.word	0x08108425
 810839c:	08108425 	.word	0x08108425
 81083a0:	08108425 	.word	0x08108425
 81083a4:	08108425 	.word	0x08108425
 81083a8:	08108425 	.word	0x08108425
 81083ac:	08108425 	.word	0x08108425
 81083b0:	0810840d 	.word	0x0810840d
 81083b4:	08108425 	.word	0x08108425
 81083b8:	08108425 	.word	0x08108425
 81083bc:	08108425 	.word	0x08108425
 81083c0:	08108425 	.word	0x08108425
 81083c4:	08108425 	.word	0x08108425
 81083c8:	08108425 	.word	0x08108425
 81083cc:	08108425 	.word	0x08108425
 81083d0:	08108415 	.word	0x08108415
 81083d4:	08108425 	.word	0x08108425
 81083d8:	08108425 	.word	0x08108425
 81083dc:	08108425 	.word	0x08108425
 81083e0:	08108425 	.word	0x08108425
 81083e4:	08108425 	.word	0x08108425
 81083e8:	08108425 	.word	0x08108425
 81083ec:	08108425 	.word	0x08108425
 81083f0:	0810841d 	.word	0x0810841d
 81083f4:	2301      	movs	r3, #1
 81083f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81083fa:	e220      	b.n	810883e <UART_SetConfig+0x5a6>
 81083fc:	2304      	movs	r3, #4
 81083fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108402:	e21c      	b.n	810883e <UART_SetConfig+0x5a6>
 8108404:	2308      	movs	r3, #8
 8108406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810840a:	e218      	b.n	810883e <UART_SetConfig+0x5a6>
 810840c:	2310      	movs	r3, #16
 810840e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108412:	e214      	b.n	810883e <UART_SetConfig+0x5a6>
 8108414:	2320      	movs	r3, #32
 8108416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810841a:	e210      	b.n	810883e <UART_SetConfig+0x5a6>
 810841c:	2340      	movs	r3, #64	; 0x40
 810841e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108422:	e20c      	b.n	810883e <UART_SetConfig+0x5a6>
 8108424:	2380      	movs	r3, #128	; 0x80
 8108426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810842a:	e208      	b.n	810883e <UART_SetConfig+0x5a6>
 810842c:	697b      	ldr	r3, [r7, #20]
 810842e:	681b      	ldr	r3, [r3, #0]
 8108430:	4a66      	ldr	r2, [pc, #408]	; (81085cc <UART_SetConfig+0x334>)
 8108432:	4293      	cmp	r3, r2
 8108434:	d130      	bne.n	8108498 <UART_SetConfig+0x200>
 8108436:	4b64      	ldr	r3, [pc, #400]	; (81085c8 <UART_SetConfig+0x330>)
 8108438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810843a:	f003 0307 	and.w	r3, r3, #7
 810843e:	2b05      	cmp	r3, #5
 8108440:	d826      	bhi.n	8108490 <UART_SetConfig+0x1f8>
 8108442:	a201      	add	r2, pc, #4	; (adr r2, 8108448 <UART_SetConfig+0x1b0>)
 8108444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108448:	08108461 	.word	0x08108461
 810844c:	08108469 	.word	0x08108469
 8108450:	08108471 	.word	0x08108471
 8108454:	08108479 	.word	0x08108479
 8108458:	08108481 	.word	0x08108481
 810845c:	08108489 	.word	0x08108489
 8108460:	2300      	movs	r3, #0
 8108462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108466:	e1ea      	b.n	810883e <UART_SetConfig+0x5a6>
 8108468:	2304      	movs	r3, #4
 810846a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810846e:	e1e6      	b.n	810883e <UART_SetConfig+0x5a6>
 8108470:	2308      	movs	r3, #8
 8108472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108476:	e1e2      	b.n	810883e <UART_SetConfig+0x5a6>
 8108478:	2310      	movs	r3, #16
 810847a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810847e:	e1de      	b.n	810883e <UART_SetConfig+0x5a6>
 8108480:	2320      	movs	r3, #32
 8108482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108486:	e1da      	b.n	810883e <UART_SetConfig+0x5a6>
 8108488:	2340      	movs	r3, #64	; 0x40
 810848a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810848e:	e1d6      	b.n	810883e <UART_SetConfig+0x5a6>
 8108490:	2380      	movs	r3, #128	; 0x80
 8108492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108496:	e1d2      	b.n	810883e <UART_SetConfig+0x5a6>
 8108498:	697b      	ldr	r3, [r7, #20]
 810849a:	681b      	ldr	r3, [r3, #0]
 810849c:	4a4c      	ldr	r2, [pc, #304]	; (81085d0 <UART_SetConfig+0x338>)
 810849e:	4293      	cmp	r3, r2
 81084a0:	d130      	bne.n	8108504 <UART_SetConfig+0x26c>
 81084a2:	4b49      	ldr	r3, [pc, #292]	; (81085c8 <UART_SetConfig+0x330>)
 81084a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81084a6:	f003 0307 	and.w	r3, r3, #7
 81084aa:	2b05      	cmp	r3, #5
 81084ac:	d826      	bhi.n	81084fc <UART_SetConfig+0x264>
 81084ae:	a201      	add	r2, pc, #4	; (adr r2, 81084b4 <UART_SetConfig+0x21c>)
 81084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81084b4:	081084cd 	.word	0x081084cd
 81084b8:	081084d5 	.word	0x081084d5
 81084bc:	081084dd 	.word	0x081084dd
 81084c0:	081084e5 	.word	0x081084e5
 81084c4:	081084ed 	.word	0x081084ed
 81084c8:	081084f5 	.word	0x081084f5
 81084cc:	2300      	movs	r3, #0
 81084ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084d2:	e1b4      	b.n	810883e <UART_SetConfig+0x5a6>
 81084d4:	2304      	movs	r3, #4
 81084d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084da:	e1b0      	b.n	810883e <UART_SetConfig+0x5a6>
 81084dc:	2308      	movs	r3, #8
 81084de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084e2:	e1ac      	b.n	810883e <UART_SetConfig+0x5a6>
 81084e4:	2310      	movs	r3, #16
 81084e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084ea:	e1a8      	b.n	810883e <UART_SetConfig+0x5a6>
 81084ec:	2320      	movs	r3, #32
 81084ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084f2:	e1a4      	b.n	810883e <UART_SetConfig+0x5a6>
 81084f4:	2340      	movs	r3, #64	; 0x40
 81084f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084fa:	e1a0      	b.n	810883e <UART_SetConfig+0x5a6>
 81084fc:	2380      	movs	r3, #128	; 0x80
 81084fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108502:	e19c      	b.n	810883e <UART_SetConfig+0x5a6>
 8108504:	697b      	ldr	r3, [r7, #20]
 8108506:	681b      	ldr	r3, [r3, #0]
 8108508:	4a32      	ldr	r2, [pc, #200]	; (81085d4 <UART_SetConfig+0x33c>)
 810850a:	4293      	cmp	r3, r2
 810850c:	d130      	bne.n	8108570 <UART_SetConfig+0x2d8>
 810850e:	4b2e      	ldr	r3, [pc, #184]	; (81085c8 <UART_SetConfig+0x330>)
 8108510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108512:	f003 0307 	and.w	r3, r3, #7
 8108516:	2b05      	cmp	r3, #5
 8108518:	d826      	bhi.n	8108568 <UART_SetConfig+0x2d0>
 810851a:	a201      	add	r2, pc, #4	; (adr r2, 8108520 <UART_SetConfig+0x288>)
 810851c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108520:	08108539 	.word	0x08108539
 8108524:	08108541 	.word	0x08108541
 8108528:	08108549 	.word	0x08108549
 810852c:	08108551 	.word	0x08108551
 8108530:	08108559 	.word	0x08108559
 8108534:	08108561 	.word	0x08108561
 8108538:	2300      	movs	r3, #0
 810853a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810853e:	e17e      	b.n	810883e <UART_SetConfig+0x5a6>
 8108540:	2304      	movs	r3, #4
 8108542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108546:	e17a      	b.n	810883e <UART_SetConfig+0x5a6>
 8108548:	2308      	movs	r3, #8
 810854a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810854e:	e176      	b.n	810883e <UART_SetConfig+0x5a6>
 8108550:	2310      	movs	r3, #16
 8108552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108556:	e172      	b.n	810883e <UART_SetConfig+0x5a6>
 8108558:	2320      	movs	r3, #32
 810855a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810855e:	e16e      	b.n	810883e <UART_SetConfig+0x5a6>
 8108560:	2340      	movs	r3, #64	; 0x40
 8108562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108566:	e16a      	b.n	810883e <UART_SetConfig+0x5a6>
 8108568:	2380      	movs	r3, #128	; 0x80
 810856a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810856e:	e166      	b.n	810883e <UART_SetConfig+0x5a6>
 8108570:	697b      	ldr	r3, [r7, #20]
 8108572:	681b      	ldr	r3, [r3, #0]
 8108574:	4a18      	ldr	r2, [pc, #96]	; (81085d8 <UART_SetConfig+0x340>)
 8108576:	4293      	cmp	r3, r2
 8108578:	d140      	bne.n	81085fc <UART_SetConfig+0x364>
 810857a:	4b13      	ldr	r3, [pc, #76]	; (81085c8 <UART_SetConfig+0x330>)
 810857c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810857e:	f003 0307 	and.w	r3, r3, #7
 8108582:	2b05      	cmp	r3, #5
 8108584:	d836      	bhi.n	81085f4 <UART_SetConfig+0x35c>
 8108586:	a201      	add	r2, pc, #4	; (adr r2, 810858c <UART_SetConfig+0x2f4>)
 8108588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810858c:	081085a5 	.word	0x081085a5
 8108590:	081085ad 	.word	0x081085ad
 8108594:	081085b5 	.word	0x081085b5
 8108598:	081085dd 	.word	0x081085dd
 810859c:	081085e5 	.word	0x081085e5
 81085a0:	081085ed 	.word	0x081085ed
 81085a4:	2300      	movs	r3, #0
 81085a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085aa:	e148      	b.n	810883e <UART_SetConfig+0x5a6>
 81085ac:	2304      	movs	r3, #4
 81085ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085b2:	e144      	b.n	810883e <UART_SetConfig+0x5a6>
 81085b4:	2308      	movs	r3, #8
 81085b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085ba:	e140      	b.n	810883e <UART_SetConfig+0x5a6>
 81085bc:	cfff69f3 	.word	0xcfff69f3
 81085c0:	58000c00 	.word	0x58000c00
 81085c4:	40011000 	.word	0x40011000
 81085c8:	58024400 	.word	0x58024400
 81085cc:	40004400 	.word	0x40004400
 81085d0:	40004800 	.word	0x40004800
 81085d4:	40004c00 	.word	0x40004c00
 81085d8:	40005000 	.word	0x40005000
 81085dc:	2310      	movs	r3, #16
 81085de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085e2:	e12c      	b.n	810883e <UART_SetConfig+0x5a6>
 81085e4:	2320      	movs	r3, #32
 81085e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085ea:	e128      	b.n	810883e <UART_SetConfig+0x5a6>
 81085ec:	2340      	movs	r3, #64	; 0x40
 81085ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085f2:	e124      	b.n	810883e <UART_SetConfig+0x5a6>
 81085f4:	2380      	movs	r3, #128	; 0x80
 81085f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085fa:	e120      	b.n	810883e <UART_SetConfig+0x5a6>
 81085fc:	697b      	ldr	r3, [r7, #20]
 81085fe:	681b      	ldr	r3, [r3, #0]
 8108600:	4acb      	ldr	r2, [pc, #812]	; (8108930 <UART_SetConfig+0x698>)
 8108602:	4293      	cmp	r3, r2
 8108604:	d176      	bne.n	81086f4 <UART_SetConfig+0x45c>
 8108606:	4bcb      	ldr	r3, [pc, #812]	; (8108934 <UART_SetConfig+0x69c>)
 8108608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810860a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810860e:	2b28      	cmp	r3, #40	; 0x28
 8108610:	d86c      	bhi.n	81086ec <UART_SetConfig+0x454>
 8108612:	a201      	add	r2, pc, #4	; (adr r2, 8108618 <UART_SetConfig+0x380>)
 8108614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108618:	081086bd 	.word	0x081086bd
 810861c:	081086ed 	.word	0x081086ed
 8108620:	081086ed 	.word	0x081086ed
 8108624:	081086ed 	.word	0x081086ed
 8108628:	081086ed 	.word	0x081086ed
 810862c:	081086ed 	.word	0x081086ed
 8108630:	081086ed 	.word	0x081086ed
 8108634:	081086ed 	.word	0x081086ed
 8108638:	081086c5 	.word	0x081086c5
 810863c:	081086ed 	.word	0x081086ed
 8108640:	081086ed 	.word	0x081086ed
 8108644:	081086ed 	.word	0x081086ed
 8108648:	081086ed 	.word	0x081086ed
 810864c:	081086ed 	.word	0x081086ed
 8108650:	081086ed 	.word	0x081086ed
 8108654:	081086ed 	.word	0x081086ed
 8108658:	081086cd 	.word	0x081086cd
 810865c:	081086ed 	.word	0x081086ed
 8108660:	081086ed 	.word	0x081086ed
 8108664:	081086ed 	.word	0x081086ed
 8108668:	081086ed 	.word	0x081086ed
 810866c:	081086ed 	.word	0x081086ed
 8108670:	081086ed 	.word	0x081086ed
 8108674:	081086ed 	.word	0x081086ed
 8108678:	081086d5 	.word	0x081086d5
 810867c:	081086ed 	.word	0x081086ed
 8108680:	081086ed 	.word	0x081086ed
 8108684:	081086ed 	.word	0x081086ed
 8108688:	081086ed 	.word	0x081086ed
 810868c:	081086ed 	.word	0x081086ed
 8108690:	081086ed 	.word	0x081086ed
 8108694:	081086ed 	.word	0x081086ed
 8108698:	081086dd 	.word	0x081086dd
 810869c:	081086ed 	.word	0x081086ed
 81086a0:	081086ed 	.word	0x081086ed
 81086a4:	081086ed 	.word	0x081086ed
 81086a8:	081086ed 	.word	0x081086ed
 81086ac:	081086ed 	.word	0x081086ed
 81086b0:	081086ed 	.word	0x081086ed
 81086b4:	081086ed 	.word	0x081086ed
 81086b8:	081086e5 	.word	0x081086e5
 81086bc:	2301      	movs	r3, #1
 81086be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086c2:	e0bc      	b.n	810883e <UART_SetConfig+0x5a6>
 81086c4:	2304      	movs	r3, #4
 81086c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086ca:	e0b8      	b.n	810883e <UART_SetConfig+0x5a6>
 81086cc:	2308      	movs	r3, #8
 81086ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086d2:	e0b4      	b.n	810883e <UART_SetConfig+0x5a6>
 81086d4:	2310      	movs	r3, #16
 81086d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086da:	e0b0      	b.n	810883e <UART_SetConfig+0x5a6>
 81086dc:	2320      	movs	r3, #32
 81086de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086e2:	e0ac      	b.n	810883e <UART_SetConfig+0x5a6>
 81086e4:	2340      	movs	r3, #64	; 0x40
 81086e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086ea:	e0a8      	b.n	810883e <UART_SetConfig+0x5a6>
 81086ec:	2380      	movs	r3, #128	; 0x80
 81086ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81086f2:	e0a4      	b.n	810883e <UART_SetConfig+0x5a6>
 81086f4:	697b      	ldr	r3, [r7, #20]
 81086f6:	681b      	ldr	r3, [r3, #0]
 81086f8:	4a8f      	ldr	r2, [pc, #572]	; (8108938 <UART_SetConfig+0x6a0>)
 81086fa:	4293      	cmp	r3, r2
 81086fc:	d130      	bne.n	8108760 <UART_SetConfig+0x4c8>
 81086fe:	4b8d      	ldr	r3, [pc, #564]	; (8108934 <UART_SetConfig+0x69c>)
 8108700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108702:	f003 0307 	and.w	r3, r3, #7
 8108706:	2b05      	cmp	r3, #5
 8108708:	d826      	bhi.n	8108758 <UART_SetConfig+0x4c0>
 810870a:	a201      	add	r2, pc, #4	; (adr r2, 8108710 <UART_SetConfig+0x478>)
 810870c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108710:	08108729 	.word	0x08108729
 8108714:	08108731 	.word	0x08108731
 8108718:	08108739 	.word	0x08108739
 810871c:	08108741 	.word	0x08108741
 8108720:	08108749 	.word	0x08108749
 8108724:	08108751 	.word	0x08108751
 8108728:	2300      	movs	r3, #0
 810872a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810872e:	e086      	b.n	810883e <UART_SetConfig+0x5a6>
 8108730:	2304      	movs	r3, #4
 8108732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108736:	e082      	b.n	810883e <UART_SetConfig+0x5a6>
 8108738:	2308      	movs	r3, #8
 810873a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810873e:	e07e      	b.n	810883e <UART_SetConfig+0x5a6>
 8108740:	2310      	movs	r3, #16
 8108742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108746:	e07a      	b.n	810883e <UART_SetConfig+0x5a6>
 8108748:	2320      	movs	r3, #32
 810874a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810874e:	e076      	b.n	810883e <UART_SetConfig+0x5a6>
 8108750:	2340      	movs	r3, #64	; 0x40
 8108752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108756:	e072      	b.n	810883e <UART_SetConfig+0x5a6>
 8108758:	2380      	movs	r3, #128	; 0x80
 810875a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810875e:	e06e      	b.n	810883e <UART_SetConfig+0x5a6>
 8108760:	697b      	ldr	r3, [r7, #20]
 8108762:	681b      	ldr	r3, [r3, #0]
 8108764:	4a75      	ldr	r2, [pc, #468]	; (810893c <UART_SetConfig+0x6a4>)
 8108766:	4293      	cmp	r3, r2
 8108768:	d130      	bne.n	81087cc <UART_SetConfig+0x534>
 810876a:	4b72      	ldr	r3, [pc, #456]	; (8108934 <UART_SetConfig+0x69c>)
 810876c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810876e:	f003 0307 	and.w	r3, r3, #7
 8108772:	2b05      	cmp	r3, #5
 8108774:	d826      	bhi.n	81087c4 <UART_SetConfig+0x52c>
 8108776:	a201      	add	r2, pc, #4	; (adr r2, 810877c <UART_SetConfig+0x4e4>)
 8108778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810877c:	08108795 	.word	0x08108795
 8108780:	0810879d 	.word	0x0810879d
 8108784:	081087a5 	.word	0x081087a5
 8108788:	081087ad 	.word	0x081087ad
 810878c:	081087b5 	.word	0x081087b5
 8108790:	081087bd 	.word	0x081087bd
 8108794:	2300      	movs	r3, #0
 8108796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810879a:	e050      	b.n	810883e <UART_SetConfig+0x5a6>
 810879c:	2304      	movs	r3, #4
 810879e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087a2:	e04c      	b.n	810883e <UART_SetConfig+0x5a6>
 81087a4:	2308      	movs	r3, #8
 81087a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087aa:	e048      	b.n	810883e <UART_SetConfig+0x5a6>
 81087ac:	2310      	movs	r3, #16
 81087ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087b2:	e044      	b.n	810883e <UART_SetConfig+0x5a6>
 81087b4:	2320      	movs	r3, #32
 81087b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087ba:	e040      	b.n	810883e <UART_SetConfig+0x5a6>
 81087bc:	2340      	movs	r3, #64	; 0x40
 81087be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087c2:	e03c      	b.n	810883e <UART_SetConfig+0x5a6>
 81087c4:	2380      	movs	r3, #128	; 0x80
 81087c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81087ca:	e038      	b.n	810883e <UART_SetConfig+0x5a6>
 81087cc:	697b      	ldr	r3, [r7, #20]
 81087ce:	681b      	ldr	r3, [r3, #0]
 81087d0:	4a5b      	ldr	r2, [pc, #364]	; (8108940 <UART_SetConfig+0x6a8>)
 81087d2:	4293      	cmp	r3, r2
 81087d4:	d130      	bne.n	8108838 <UART_SetConfig+0x5a0>
 81087d6:	4b57      	ldr	r3, [pc, #348]	; (8108934 <UART_SetConfig+0x69c>)
 81087d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81087da:	f003 0307 	and.w	r3, r3, #7
 81087de:	2b05      	cmp	r3, #5
 81087e0:	d826      	bhi.n	8108830 <UART_SetConfig+0x598>
 81087e2:	a201      	add	r2, pc, #4	; (adr r2, 81087e8 <UART_SetConfig+0x550>)
 81087e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81087e8:	08108801 	.word	0x08108801
 81087ec:	08108809 	.word	0x08108809
 81087f0:	08108811 	.word	0x08108811
 81087f4:	08108819 	.word	0x08108819
 81087f8:	08108821 	.word	0x08108821
 81087fc:	08108829 	.word	0x08108829
 8108800:	2302      	movs	r3, #2
 8108802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108806:	e01a      	b.n	810883e <UART_SetConfig+0x5a6>
 8108808:	2304      	movs	r3, #4
 810880a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810880e:	e016      	b.n	810883e <UART_SetConfig+0x5a6>
 8108810:	2308      	movs	r3, #8
 8108812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108816:	e012      	b.n	810883e <UART_SetConfig+0x5a6>
 8108818:	2310      	movs	r3, #16
 810881a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810881e:	e00e      	b.n	810883e <UART_SetConfig+0x5a6>
 8108820:	2320      	movs	r3, #32
 8108822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108826:	e00a      	b.n	810883e <UART_SetConfig+0x5a6>
 8108828:	2340      	movs	r3, #64	; 0x40
 810882a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810882e:	e006      	b.n	810883e <UART_SetConfig+0x5a6>
 8108830:	2380      	movs	r3, #128	; 0x80
 8108832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108836:	e002      	b.n	810883e <UART_SetConfig+0x5a6>
 8108838:	2380      	movs	r3, #128	; 0x80
 810883a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810883e:	697b      	ldr	r3, [r7, #20]
 8108840:	681b      	ldr	r3, [r3, #0]
 8108842:	4a3f      	ldr	r2, [pc, #252]	; (8108940 <UART_SetConfig+0x6a8>)
 8108844:	4293      	cmp	r3, r2
 8108846:	f040 80f8 	bne.w	8108a3a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810884a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810884e:	2b20      	cmp	r3, #32
 8108850:	dc46      	bgt.n	81088e0 <UART_SetConfig+0x648>
 8108852:	2b02      	cmp	r3, #2
 8108854:	f2c0 8082 	blt.w	810895c <UART_SetConfig+0x6c4>
 8108858:	3b02      	subs	r3, #2
 810885a:	2b1e      	cmp	r3, #30
 810885c:	d87e      	bhi.n	810895c <UART_SetConfig+0x6c4>
 810885e:	a201      	add	r2, pc, #4	; (adr r2, 8108864 <UART_SetConfig+0x5cc>)
 8108860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108864:	081088e7 	.word	0x081088e7
 8108868:	0810895d 	.word	0x0810895d
 810886c:	081088ef 	.word	0x081088ef
 8108870:	0810895d 	.word	0x0810895d
 8108874:	0810895d 	.word	0x0810895d
 8108878:	0810895d 	.word	0x0810895d
 810887c:	081088ff 	.word	0x081088ff
 8108880:	0810895d 	.word	0x0810895d
 8108884:	0810895d 	.word	0x0810895d
 8108888:	0810895d 	.word	0x0810895d
 810888c:	0810895d 	.word	0x0810895d
 8108890:	0810895d 	.word	0x0810895d
 8108894:	0810895d 	.word	0x0810895d
 8108898:	0810895d 	.word	0x0810895d
 810889c:	0810890f 	.word	0x0810890f
 81088a0:	0810895d 	.word	0x0810895d
 81088a4:	0810895d 	.word	0x0810895d
 81088a8:	0810895d 	.word	0x0810895d
 81088ac:	0810895d 	.word	0x0810895d
 81088b0:	0810895d 	.word	0x0810895d
 81088b4:	0810895d 	.word	0x0810895d
 81088b8:	0810895d 	.word	0x0810895d
 81088bc:	0810895d 	.word	0x0810895d
 81088c0:	0810895d 	.word	0x0810895d
 81088c4:	0810895d 	.word	0x0810895d
 81088c8:	0810895d 	.word	0x0810895d
 81088cc:	0810895d 	.word	0x0810895d
 81088d0:	0810895d 	.word	0x0810895d
 81088d4:	0810895d 	.word	0x0810895d
 81088d8:	0810895d 	.word	0x0810895d
 81088dc:	0810894f 	.word	0x0810894f
 81088e0:	2b40      	cmp	r3, #64	; 0x40
 81088e2:	d037      	beq.n	8108954 <UART_SetConfig+0x6bc>
 81088e4:	e03a      	b.n	810895c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81088e6:	f7fd fcef 	bl	81062c8 <HAL_RCCEx_GetD3PCLK1Freq>
 81088ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81088ec:	e03c      	b.n	8108968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81088ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81088f2:	4618      	mov	r0, r3
 81088f4:	f7fd fcfe 	bl	81062f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81088f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81088fc:	e034      	b.n	8108968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81088fe:	f107 0318 	add.w	r3, r7, #24
 8108902:	4618      	mov	r0, r3
 8108904:	f7fd fe4a 	bl	810659c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108908:	69fb      	ldr	r3, [r7, #28]
 810890a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810890c:	e02c      	b.n	8108968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810890e:	4b09      	ldr	r3, [pc, #36]	; (8108934 <UART_SetConfig+0x69c>)
 8108910:	681b      	ldr	r3, [r3, #0]
 8108912:	f003 0320 	and.w	r3, r3, #32
 8108916:	2b00      	cmp	r3, #0
 8108918:	d016      	beq.n	8108948 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810891a:	4b06      	ldr	r3, [pc, #24]	; (8108934 <UART_SetConfig+0x69c>)
 810891c:	681b      	ldr	r3, [r3, #0]
 810891e:	08db      	lsrs	r3, r3, #3
 8108920:	f003 0303 	and.w	r3, r3, #3
 8108924:	4a07      	ldr	r2, [pc, #28]	; (8108944 <UART_SetConfig+0x6ac>)
 8108926:	fa22 f303 	lsr.w	r3, r2, r3
 810892a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810892c:	e01c      	b.n	8108968 <UART_SetConfig+0x6d0>
 810892e:	bf00      	nop
 8108930:	40011400 	.word	0x40011400
 8108934:	58024400 	.word	0x58024400
 8108938:	40007800 	.word	0x40007800
 810893c:	40007c00 	.word	0x40007c00
 8108940:	58000c00 	.word	0x58000c00
 8108944:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8108948:	4b9d      	ldr	r3, [pc, #628]	; (8108bc0 <UART_SetConfig+0x928>)
 810894a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810894c:	e00c      	b.n	8108968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810894e:	4b9d      	ldr	r3, [pc, #628]	; (8108bc4 <UART_SetConfig+0x92c>)
 8108950:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108952:	e009      	b.n	8108968 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810895a:	e005      	b.n	8108968 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810895c:	2300      	movs	r3, #0
 810895e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108960:	2301      	movs	r3, #1
 8108962:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108966:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810896a:	2b00      	cmp	r3, #0
 810896c:	f000 81de 	beq.w	8108d2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108970:	697b      	ldr	r3, [r7, #20]
 8108972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108974:	4a94      	ldr	r2, [pc, #592]	; (8108bc8 <UART_SetConfig+0x930>)
 8108976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810897a:	461a      	mov	r2, r3
 810897c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810897e:	fbb3 f3f2 	udiv	r3, r3, r2
 8108982:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108984:	697b      	ldr	r3, [r7, #20]
 8108986:	685a      	ldr	r2, [r3, #4]
 8108988:	4613      	mov	r3, r2
 810898a:	005b      	lsls	r3, r3, #1
 810898c:	4413      	add	r3, r2
 810898e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108990:	429a      	cmp	r2, r3
 8108992:	d305      	bcc.n	81089a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108994:	697b      	ldr	r3, [r7, #20]
 8108996:	685b      	ldr	r3, [r3, #4]
 8108998:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810899a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810899c:	429a      	cmp	r2, r3
 810899e:	d903      	bls.n	81089a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81089a0:	2301      	movs	r3, #1
 81089a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81089a6:	e1c1      	b.n	8108d2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81089a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81089aa:	2200      	movs	r2, #0
 81089ac:	60bb      	str	r3, [r7, #8]
 81089ae:	60fa      	str	r2, [r7, #12]
 81089b0:	697b      	ldr	r3, [r7, #20]
 81089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81089b4:	4a84      	ldr	r2, [pc, #528]	; (8108bc8 <UART_SetConfig+0x930>)
 81089b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81089ba:	b29b      	uxth	r3, r3
 81089bc:	2200      	movs	r2, #0
 81089be:	603b      	str	r3, [r7, #0]
 81089c0:	607a      	str	r2, [r7, #4]
 81089c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81089c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81089ca:	f7f8 f9e5 	bl	8100d98 <__aeabi_uldivmod>
 81089ce:	4602      	mov	r2, r0
 81089d0:	460b      	mov	r3, r1
 81089d2:	4610      	mov	r0, r2
 81089d4:	4619      	mov	r1, r3
 81089d6:	f04f 0200 	mov.w	r2, #0
 81089da:	f04f 0300 	mov.w	r3, #0
 81089de:	020b      	lsls	r3, r1, #8
 81089e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81089e4:	0202      	lsls	r2, r0, #8
 81089e6:	6979      	ldr	r1, [r7, #20]
 81089e8:	6849      	ldr	r1, [r1, #4]
 81089ea:	0849      	lsrs	r1, r1, #1
 81089ec:	2000      	movs	r0, #0
 81089ee:	460c      	mov	r4, r1
 81089f0:	4605      	mov	r5, r0
 81089f2:	eb12 0804 	adds.w	r8, r2, r4
 81089f6:	eb43 0905 	adc.w	r9, r3, r5
 81089fa:	697b      	ldr	r3, [r7, #20]
 81089fc:	685b      	ldr	r3, [r3, #4]
 81089fe:	2200      	movs	r2, #0
 8108a00:	469a      	mov	sl, r3
 8108a02:	4693      	mov	fp, r2
 8108a04:	4652      	mov	r2, sl
 8108a06:	465b      	mov	r3, fp
 8108a08:	4640      	mov	r0, r8
 8108a0a:	4649      	mov	r1, r9
 8108a0c:	f7f8 f9c4 	bl	8100d98 <__aeabi_uldivmod>
 8108a10:	4602      	mov	r2, r0
 8108a12:	460b      	mov	r3, r1
 8108a14:	4613      	mov	r3, r2
 8108a16:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108a1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108a1e:	d308      	bcc.n	8108a32 <UART_SetConfig+0x79a>
 8108a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108a26:	d204      	bcs.n	8108a32 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8108a28:	697b      	ldr	r3, [r7, #20]
 8108a2a:	681b      	ldr	r3, [r3, #0]
 8108a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8108a2e:	60da      	str	r2, [r3, #12]
 8108a30:	e17c      	b.n	8108d2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8108a32:	2301      	movs	r3, #1
 8108a34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108a38:	e178      	b.n	8108d2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8108a3a:	697b      	ldr	r3, [r7, #20]
 8108a3c:	69db      	ldr	r3, [r3, #28]
 8108a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108a42:	f040 80c5 	bne.w	8108bd0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8108a46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108a4a:	2b20      	cmp	r3, #32
 8108a4c:	dc48      	bgt.n	8108ae0 <UART_SetConfig+0x848>
 8108a4e:	2b00      	cmp	r3, #0
 8108a50:	db7b      	blt.n	8108b4a <UART_SetConfig+0x8b2>
 8108a52:	2b20      	cmp	r3, #32
 8108a54:	d879      	bhi.n	8108b4a <UART_SetConfig+0x8b2>
 8108a56:	a201      	add	r2, pc, #4	; (adr r2, 8108a5c <UART_SetConfig+0x7c4>)
 8108a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a5c:	08108ae7 	.word	0x08108ae7
 8108a60:	08108aef 	.word	0x08108aef
 8108a64:	08108b4b 	.word	0x08108b4b
 8108a68:	08108b4b 	.word	0x08108b4b
 8108a6c:	08108af7 	.word	0x08108af7
 8108a70:	08108b4b 	.word	0x08108b4b
 8108a74:	08108b4b 	.word	0x08108b4b
 8108a78:	08108b4b 	.word	0x08108b4b
 8108a7c:	08108b07 	.word	0x08108b07
 8108a80:	08108b4b 	.word	0x08108b4b
 8108a84:	08108b4b 	.word	0x08108b4b
 8108a88:	08108b4b 	.word	0x08108b4b
 8108a8c:	08108b4b 	.word	0x08108b4b
 8108a90:	08108b4b 	.word	0x08108b4b
 8108a94:	08108b4b 	.word	0x08108b4b
 8108a98:	08108b4b 	.word	0x08108b4b
 8108a9c:	08108b17 	.word	0x08108b17
 8108aa0:	08108b4b 	.word	0x08108b4b
 8108aa4:	08108b4b 	.word	0x08108b4b
 8108aa8:	08108b4b 	.word	0x08108b4b
 8108aac:	08108b4b 	.word	0x08108b4b
 8108ab0:	08108b4b 	.word	0x08108b4b
 8108ab4:	08108b4b 	.word	0x08108b4b
 8108ab8:	08108b4b 	.word	0x08108b4b
 8108abc:	08108b4b 	.word	0x08108b4b
 8108ac0:	08108b4b 	.word	0x08108b4b
 8108ac4:	08108b4b 	.word	0x08108b4b
 8108ac8:	08108b4b 	.word	0x08108b4b
 8108acc:	08108b4b 	.word	0x08108b4b
 8108ad0:	08108b4b 	.word	0x08108b4b
 8108ad4:	08108b4b 	.word	0x08108b4b
 8108ad8:	08108b4b 	.word	0x08108b4b
 8108adc:	08108b3d 	.word	0x08108b3d
 8108ae0:	2b40      	cmp	r3, #64	; 0x40
 8108ae2:	d02e      	beq.n	8108b42 <UART_SetConfig+0x8aa>
 8108ae4:	e031      	b.n	8108b4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108ae6:	f7fc f9b9 	bl	8104e5c <HAL_RCC_GetPCLK1Freq>
 8108aea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108aec:	e033      	b.n	8108b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108aee:	f7fc f9cb 	bl	8104e88 <HAL_RCC_GetPCLK2Freq>
 8108af2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108af4:	e02f      	b.n	8108b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108afa:	4618      	mov	r0, r3
 8108afc:	f7fd fbfa 	bl	81062f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108b04:	e027      	b.n	8108b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108b06:	f107 0318 	add.w	r3, r7, #24
 8108b0a:	4618      	mov	r0, r3
 8108b0c:	f7fd fd46 	bl	810659c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108b10:	69fb      	ldr	r3, [r7, #28]
 8108b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108b14:	e01f      	b.n	8108b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108b16:	4b2d      	ldr	r3, [pc, #180]	; (8108bcc <UART_SetConfig+0x934>)
 8108b18:	681b      	ldr	r3, [r3, #0]
 8108b1a:	f003 0320 	and.w	r3, r3, #32
 8108b1e:	2b00      	cmp	r3, #0
 8108b20:	d009      	beq.n	8108b36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108b22:	4b2a      	ldr	r3, [pc, #168]	; (8108bcc <UART_SetConfig+0x934>)
 8108b24:	681b      	ldr	r3, [r3, #0]
 8108b26:	08db      	lsrs	r3, r3, #3
 8108b28:	f003 0303 	and.w	r3, r3, #3
 8108b2c:	4a24      	ldr	r2, [pc, #144]	; (8108bc0 <UART_SetConfig+0x928>)
 8108b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8108b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108b34:	e00f      	b.n	8108b56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8108b36:	4b22      	ldr	r3, [pc, #136]	; (8108bc0 <UART_SetConfig+0x928>)
 8108b38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108b3a:	e00c      	b.n	8108b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108b3c:	4b21      	ldr	r3, [pc, #132]	; (8108bc4 <UART_SetConfig+0x92c>)
 8108b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108b40:	e009      	b.n	8108b56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108b48:	e005      	b.n	8108b56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8108b4a:	2300      	movs	r3, #0
 8108b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108b4e:	2301      	movs	r3, #1
 8108b50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108b54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108b58:	2b00      	cmp	r3, #0
 8108b5a:	f000 80e7 	beq.w	8108d2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108b5e:	697b      	ldr	r3, [r7, #20]
 8108b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108b62:	4a19      	ldr	r2, [pc, #100]	; (8108bc8 <UART_SetConfig+0x930>)
 8108b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108b68:	461a      	mov	r2, r3
 8108b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8108b70:	005a      	lsls	r2, r3, #1
 8108b72:	697b      	ldr	r3, [r7, #20]
 8108b74:	685b      	ldr	r3, [r3, #4]
 8108b76:	085b      	lsrs	r3, r3, #1
 8108b78:	441a      	add	r2, r3
 8108b7a:	697b      	ldr	r3, [r7, #20]
 8108b7c:	685b      	ldr	r3, [r3, #4]
 8108b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8108b82:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108b86:	2b0f      	cmp	r3, #15
 8108b88:	d916      	bls.n	8108bb8 <UART_SetConfig+0x920>
 8108b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108b90:	d212      	bcs.n	8108bb8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108b94:	b29b      	uxth	r3, r3
 8108b96:	f023 030f 	bic.w	r3, r3, #15
 8108b9a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108b9e:	085b      	lsrs	r3, r3, #1
 8108ba0:	b29b      	uxth	r3, r3
 8108ba2:	f003 0307 	and.w	r3, r3, #7
 8108ba6:	b29a      	uxth	r2, r3
 8108ba8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8108baa:	4313      	orrs	r3, r2
 8108bac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8108bae:	697b      	ldr	r3, [r7, #20]
 8108bb0:	681b      	ldr	r3, [r3, #0]
 8108bb2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8108bb4:	60da      	str	r2, [r3, #12]
 8108bb6:	e0b9      	b.n	8108d2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108bb8:	2301      	movs	r3, #1
 8108bba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108bbe:	e0b5      	b.n	8108d2c <UART_SetConfig+0xa94>
 8108bc0:	03d09000 	.word	0x03d09000
 8108bc4:	003d0900 	.word	0x003d0900
 8108bc8:	0810e0a4 	.word	0x0810e0a4
 8108bcc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8108bd0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108bd4:	2b20      	cmp	r3, #32
 8108bd6:	dc49      	bgt.n	8108c6c <UART_SetConfig+0x9d4>
 8108bd8:	2b00      	cmp	r3, #0
 8108bda:	db7c      	blt.n	8108cd6 <UART_SetConfig+0xa3e>
 8108bdc:	2b20      	cmp	r3, #32
 8108bde:	d87a      	bhi.n	8108cd6 <UART_SetConfig+0xa3e>
 8108be0:	a201      	add	r2, pc, #4	; (adr r2, 8108be8 <UART_SetConfig+0x950>)
 8108be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108be6:	bf00      	nop
 8108be8:	08108c73 	.word	0x08108c73
 8108bec:	08108c7b 	.word	0x08108c7b
 8108bf0:	08108cd7 	.word	0x08108cd7
 8108bf4:	08108cd7 	.word	0x08108cd7
 8108bf8:	08108c83 	.word	0x08108c83
 8108bfc:	08108cd7 	.word	0x08108cd7
 8108c00:	08108cd7 	.word	0x08108cd7
 8108c04:	08108cd7 	.word	0x08108cd7
 8108c08:	08108c93 	.word	0x08108c93
 8108c0c:	08108cd7 	.word	0x08108cd7
 8108c10:	08108cd7 	.word	0x08108cd7
 8108c14:	08108cd7 	.word	0x08108cd7
 8108c18:	08108cd7 	.word	0x08108cd7
 8108c1c:	08108cd7 	.word	0x08108cd7
 8108c20:	08108cd7 	.word	0x08108cd7
 8108c24:	08108cd7 	.word	0x08108cd7
 8108c28:	08108ca3 	.word	0x08108ca3
 8108c2c:	08108cd7 	.word	0x08108cd7
 8108c30:	08108cd7 	.word	0x08108cd7
 8108c34:	08108cd7 	.word	0x08108cd7
 8108c38:	08108cd7 	.word	0x08108cd7
 8108c3c:	08108cd7 	.word	0x08108cd7
 8108c40:	08108cd7 	.word	0x08108cd7
 8108c44:	08108cd7 	.word	0x08108cd7
 8108c48:	08108cd7 	.word	0x08108cd7
 8108c4c:	08108cd7 	.word	0x08108cd7
 8108c50:	08108cd7 	.word	0x08108cd7
 8108c54:	08108cd7 	.word	0x08108cd7
 8108c58:	08108cd7 	.word	0x08108cd7
 8108c5c:	08108cd7 	.word	0x08108cd7
 8108c60:	08108cd7 	.word	0x08108cd7
 8108c64:	08108cd7 	.word	0x08108cd7
 8108c68:	08108cc9 	.word	0x08108cc9
 8108c6c:	2b40      	cmp	r3, #64	; 0x40
 8108c6e:	d02e      	beq.n	8108cce <UART_SetConfig+0xa36>
 8108c70:	e031      	b.n	8108cd6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108c72:	f7fc f8f3 	bl	8104e5c <HAL_RCC_GetPCLK1Freq>
 8108c76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108c78:	e033      	b.n	8108ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108c7a:	f7fc f905 	bl	8104e88 <HAL_RCC_GetPCLK2Freq>
 8108c7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108c80:	e02f      	b.n	8108ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108c86:	4618      	mov	r0, r3
 8108c88:	f7fd fb34 	bl	81062f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108c90:	e027      	b.n	8108ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108c92:	f107 0318 	add.w	r3, r7, #24
 8108c96:	4618      	mov	r0, r3
 8108c98:	f7fd fc80 	bl	810659c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108c9c:	69fb      	ldr	r3, [r7, #28]
 8108c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108ca0:	e01f      	b.n	8108ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108ca2:	4b2d      	ldr	r3, [pc, #180]	; (8108d58 <UART_SetConfig+0xac0>)
 8108ca4:	681b      	ldr	r3, [r3, #0]
 8108ca6:	f003 0320 	and.w	r3, r3, #32
 8108caa:	2b00      	cmp	r3, #0
 8108cac:	d009      	beq.n	8108cc2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108cae:	4b2a      	ldr	r3, [pc, #168]	; (8108d58 <UART_SetConfig+0xac0>)
 8108cb0:	681b      	ldr	r3, [r3, #0]
 8108cb2:	08db      	lsrs	r3, r3, #3
 8108cb4:	f003 0303 	and.w	r3, r3, #3
 8108cb8:	4a28      	ldr	r2, [pc, #160]	; (8108d5c <UART_SetConfig+0xac4>)
 8108cba:	fa22 f303 	lsr.w	r3, r2, r3
 8108cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108cc0:	e00f      	b.n	8108ce2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8108cc2:	4b26      	ldr	r3, [pc, #152]	; (8108d5c <UART_SetConfig+0xac4>)
 8108cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108cc6:	e00c      	b.n	8108ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108cc8:	4b25      	ldr	r3, [pc, #148]	; (8108d60 <UART_SetConfig+0xac8>)
 8108cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108ccc:	e009      	b.n	8108ce2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108cd4:	e005      	b.n	8108ce2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8108cd6:	2300      	movs	r3, #0
 8108cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108cda:	2301      	movs	r3, #1
 8108cdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108ce0:	bf00      	nop
    }

    if (pclk != 0U)
 8108ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108ce4:	2b00      	cmp	r3, #0
 8108ce6:	d021      	beq.n	8108d2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108ce8:	697b      	ldr	r3, [r7, #20]
 8108cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108cec:	4a1d      	ldr	r2, [pc, #116]	; (8108d64 <UART_SetConfig+0xacc>)
 8108cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108cf2:	461a      	mov	r2, r3
 8108cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108cf6:	fbb3 f2f2 	udiv	r2, r3, r2
 8108cfa:	697b      	ldr	r3, [r7, #20]
 8108cfc:	685b      	ldr	r3, [r3, #4]
 8108cfe:	085b      	lsrs	r3, r3, #1
 8108d00:	441a      	add	r2, r3
 8108d02:	697b      	ldr	r3, [r7, #20]
 8108d04:	685b      	ldr	r3, [r3, #4]
 8108d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8108d0a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108d0e:	2b0f      	cmp	r3, #15
 8108d10:	d909      	bls.n	8108d26 <UART_SetConfig+0xa8e>
 8108d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108d18:	d205      	bcs.n	8108d26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8108d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108d1c:	b29a      	uxth	r2, r3
 8108d1e:	697b      	ldr	r3, [r7, #20]
 8108d20:	681b      	ldr	r3, [r3, #0]
 8108d22:	60da      	str	r2, [r3, #12]
 8108d24:	e002      	b.n	8108d2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108d26:	2301      	movs	r3, #1
 8108d28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8108d2c:	697b      	ldr	r3, [r7, #20]
 8108d2e:	2201      	movs	r2, #1
 8108d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8108d34:	697b      	ldr	r3, [r7, #20]
 8108d36:	2201      	movs	r2, #1
 8108d38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8108d3c:	697b      	ldr	r3, [r7, #20]
 8108d3e:	2200      	movs	r2, #0
 8108d40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8108d42:	697b      	ldr	r3, [r7, #20]
 8108d44:	2200      	movs	r2, #0
 8108d46:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8108d48:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8108d4c:	4618      	mov	r0, r3
 8108d4e:	3748      	adds	r7, #72	; 0x48
 8108d50:	46bd      	mov	sp, r7
 8108d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8108d56:	bf00      	nop
 8108d58:	58024400 	.word	0x58024400
 8108d5c:	03d09000 	.word	0x03d09000
 8108d60:	003d0900 	.word	0x003d0900
 8108d64:	0810e0a4 	.word	0x0810e0a4

08108d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8108d68:	b480      	push	{r7}
 8108d6a:	b083      	sub	sp, #12
 8108d6c:	af00      	add	r7, sp, #0
 8108d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108d70:	687b      	ldr	r3, [r7, #4]
 8108d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108d74:	f003 0301 	and.w	r3, r3, #1
 8108d78:	2b00      	cmp	r3, #0
 8108d7a:	d00a      	beq.n	8108d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108d7c:	687b      	ldr	r3, [r7, #4]
 8108d7e:	681b      	ldr	r3, [r3, #0]
 8108d80:	685b      	ldr	r3, [r3, #4]
 8108d82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8108d86:	687b      	ldr	r3, [r7, #4]
 8108d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108d8a:	687b      	ldr	r3, [r7, #4]
 8108d8c:	681b      	ldr	r3, [r3, #0]
 8108d8e:	430a      	orrs	r2, r1
 8108d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108d92:	687b      	ldr	r3, [r7, #4]
 8108d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108d96:	f003 0302 	and.w	r3, r3, #2
 8108d9a:	2b00      	cmp	r3, #0
 8108d9c:	d00a      	beq.n	8108db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108d9e:	687b      	ldr	r3, [r7, #4]
 8108da0:	681b      	ldr	r3, [r3, #0]
 8108da2:	685b      	ldr	r3, [r3, #4]
 8108da4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8108da8:	687b      	ldr	r3, [r7, #4]
 8108daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108dac:	687b      	ldr	r3, [r7, #4]
 8108dae:	681b      	ldr	r3, [r3, #0]
 8108db0:	430a      	orrs	r2, r1
 8108db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108db4:	687b      	ldr	r3, [r7, #4]
 8108db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108db8:	f003 0304 	and.w	r3, r3, #4
 8108dbc:	2b00      	cmp	r3, #0
 8108dbe:	d00a      	beq.n	8108dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108dc0:	687b      	ldr	r3, [r7, #4]
 8108dc2:	681b      	ldr	r3, [r3, #0]
 8108dc4:	685b      	ldr	r3, [r3, #4]
 8108dc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8108dca:	687b      	ldr	r3, [r7, #4]
 8108dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108dce:	687b      	ldr	r3, [r7, #4]
 8108dd0:	681b      	ldr	r3, [r3, #0]
 8108dd2:	430a      	orrs	r2, r1
 8108dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108dd6:	687b      	ldr	r3, [r7, #4]
 8108dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108dda:	f003 0308 	and.w	r3, r3, #8
 8108dde:	2b00      	cmp	r3, #0
 8108de0:	d00a      	beq.n	8108df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108de2:	687b      	ldr	r3, [r7, #4]
 8108de4:	681b      	ldr	r3, [r3, #0]
 8108de6:	685b      	ldr	r3, [r3, #4]
 8108de8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108dec:	687b      	ldr	r3, [r7, #4]
 8108dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108df0:	687b      	ldr	r3, [r7, #4]
 8108df2:	681b      	ldr	r3, [r3, #0]
 8108df4:	430a      	orrs	r2, r1
 8108df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108df8:	687b      	ldr	r3, [r7, #4]
 8108dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108dfc:	f003 0310 	and.w	r3, r3, #16
 8108e00:	2b00      	cmp	r3, #0
 8108e02:	d00a      	beq.n	8108e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108e04:	687b      	ldr	r3, [r7, #4]
 8108e06:	681b      	ldr	r3, [r3, #0]
 8108e08:	689b      	ldr	r3, [r3, #8]
 8108e0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8108e0e:	687b      	ldr	r3, [r7, #4]
 8108e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108e12:	687b      	ldr	r3, [r7, #4]
 8108e14:	681b      	ldr	r3, [r3, #0]
 8108e16:	430a      	orrs	r2, r1
 8108e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108e1a:	687b      	ldr	r3, [r7, #4]
 8108e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108e1e:	f003 0320 	and.w	r3, r3, #32
 8108e22:	2b00      	cmp	r3, #0
 8108e24:	d00a      	beq.n	8108e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108e26:	687b      	ldr	r3, [r7, #4]
 8108e28:	681b      	ldr	r3, [r3, #0]
 8108e2a:	689b      	ldr	r3, [r3, #8]
 8108e2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8108e30:	687b      	ldr	r3, [r7, #4]
 8108e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108e34:	687b      	ldr	r3, [r7, #4]
 8108e36:	681b      	ldr	r3, [r3, #0]
 8108e38:	430a      	orrs	r2, r1
 8108e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108e3c:	687b      	ldr	r3, [r7, #4]
 8108e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108e44:	2b00      	cmp	r3, #0
 8108e46:	d01a      	beq.n	8108e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108e48:	687b      	ldr	r3, [r7, #4]
 8108e4a:	681b      	ldr	r3, [r3, #0]
 8108e4c:	685b      	ldr	r3, [r3, #4]
 8108e4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8108e52:	687b      	ldr	r3, [r7, #4]
 8108e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108e56:	687b      	ldr	r3, [r7, #4]
 8108e58:	681b      	ldr	r3, [r3, #0]
 8108e5a:	430a      	orrs	r2, r1
 8108e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108e5e:	687b      	ldr	r3, [r7, #4]
 8108e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108e66:	d10a      	bne.n	8108e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108e68:	687b      	ldr	r3, [r7, #4]
 8108e6a:	681b      	ldr	r3, [r3, #0]
 8108e6c:	685b      	ldr	r3, [r3, #4]
 8108e6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8108e72:	687b      	ldr	r3, [r7, #4]
 8108e74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108e76:	687b      	ldr	r3, [r7, #4]
 8108e78:	681b      	ldr	r3, [r3, #0]
 8108e7a:	430a      	orrs	r2, r1
 8108e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108e7e:	687b      	ldr	r3, [r7, #4]
 8108e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108e86:	2b00      	cmp	r3, #0
 8108e88:	d00a      	beq.n	8108ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108e8a:	687b      	ldr	r3, [r7, #4]
 8108e8c:	681b      	ldr	r3, [r3, #0]
 8108e8e:	685b      	ldr	r3, [r3, #4]
 8108e90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108e94:	687b      	ldr	r3, [r7, #4]
 8108e96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108e98:	687b      	ldr	r3, [r7, #4]
 8108e9a:	681b      	ldr	r3, [r3, #0]
 8108e9c:	430a      	orrs	r2, r1
 8108e9e:	605a      	str	r2, [r3, #4]
  }
}
 8108ea0:	bf00      	nop
 8108ea2:	370c      	adds	r7, #12
 8108ea4:	46bd      	mov	sp, r7
 8108ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108eaa:	4770      	bx	lr

08108eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108eac:	b580      	push	{r7, lr}
 8108eae:	b098      	sub	sp, #96	; 0x60
 8108eb0:	af02      	add	r7, sp, #8
 8108eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108eb4:	687b      	ldr	r3, [r7, #4]
 8108eb6:	2200      	movs	r2, #0
 8108eb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8108ebc:	f7f9 fd66 	bl	810298c <HAL_GetTick>
 8108ec0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108ec2:	687b      	ldr	r3, [r7, #4]
 8108ec4:	681b      	ldr	r3, [r3, #0]
 8108ec6:	681b      	ldr	r3, [r3, #0]
 8108ec8:	f003 0308 	and.w	r3, r3, #8
 8108ecc:	2b08      	cmp	r3, #8
 8108ece:	d12f      	bne.n	8108f30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108ed0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108ed4:	9300      	str	r3, [sp, #0]
 8108ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8108ed8:	2200      	movs	r2, #0
 8108eda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8108ede:	6878      	ldr	r0, [r7, #4]
 8108ee0:	f000 f88e 	bl	8109000 <UART_WaitOnFlagUntilTimeout>
 8108ee4:	4603      	mov	r3, r0
 8108ee6:	2b00      	cmp	r3, #0
 8108ee8:	d022      	beq.n	8108f30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8108eea:	687b      	ldr	r3, [r7, #4]
 8108eec:	681b      	ldr	r3, [r3, #0]
 8108eee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108ef2:	e853 3f00 	ldrex	r3, [r3]
 8108ef6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8108ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8108efe:	653b      	str	r3, [r7, #80]	; 0x50
 8108f00:	687b      	ldr	r3, [r7, #4]
 8108f02:	681b      	ldr	r3, [r3, #0]
 8108f04:	461a      	mov	r2, r3
 8108f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108f08:	647b      	str	r3, [r7, #68]	; 0x44
 8108f0a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108f0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8108f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108f10:	e841 2300 	strex	r3, r2, [r1]
 8108f14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8108f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108f18:	2b00      	cmp	r3, #0
 8108f1a:	d1e6      	bne.n	8108eea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8108f1c:	687b      	ldr	r3, [r7, #4]
 8108f1e:	2220      	movs	r2, #32
 8108f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8108f24:	687b      	ldr	r3, [r7, #4]
 8108f26:	2200      	movs	r2, #0
 8108f28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108f2c:	2303      	movs	r3, #3
 8108f2e:	e063      	b.n	8108ff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108f30:	687b      	ldr	r3, [r7, #4]
 8108f32:	681b      	ldr	r3, [r3, #0]
 8108f34:	681b      	ldr	r3, [r3, #0]
 8108f36:	f003 0304 	and.w	r3, r3, #4
 8108f3a:	2b04      	cmp	r3, #4
 8108f3c:	d149      	bne.n	8108fd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108f3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108f42:	9300      	str	r3, [sp, #0]
 8108f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8108f46:	2200      	movs	r2, #0
 8108f48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8108f4c:	6878      	ldr	r0, [r7, #4]
 8108f4e:	f000 f857 	bl	8109000 <UART_WaitOnFlagUntilTimeout>
 8108f52:	4603      	mov	r3, r0
 8108f54:	2b00      	cmp	r3, #0
 8108f56:	d03c      	beq.n	8108fd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108f58:	687b      	ldr	r3, [r7, #4]
 8108f5a:	681b      	ldr	r3, [r3, #0]
 8108f5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108f60:	e853 3f00 	ldrex	r3, [r3]
 8108f64:	623b      	str	r3, [r7, #32]
   return(result);
 8108f66:	6a3b      	ldr	r3, [r7, #32]
 8108f68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8108f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8108f6e:	687b      	ldr	r3, [r7, #4]
 8108f70:	681b      	ldr	r3, [r3, #0]
 8108f72:	461a      	mov	r2, r3
 8108f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108f76:	633b      	str	r3, [r7, #48]	; 0x30
 8108f78:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8108f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108f7e:	e841 2300 	strex	r3, r2, [r1]
 8108f82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8108f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108f86:	2b00      	cmp	r3, #0
 8108f88:	d1e6      	bne.n	8108f58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108f8a:	687b      	ldr	r3, [r7, #4]
 8108f8c:	681b      	ldr	r3, [r3, #0]
 8108f8e:	3308      	adds	r3, #8
 8108f90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108f92:	693b      	ldr	r3, [r7, #16]
 8108f94:	e853 3f00 	ldrex	r3, [r3]
 8108f98:	60fb      	str	r3, [r7, #12]
   return(result);
 8108f9a:	68fb      	ldr	r3, [r7, #12]
 8108f9c:	f023 0301 	bic.w	r3, r3, #1
 8108fa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8108fa2:	687b      	ldr	r3, [r7, #4]
 8108fa4:	681b      	ldr	r3, [r3, #0]
 8108fa6:	3308      	adds	r3, #8
 8108fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108faa:	61fa      	str	r2, [r7, #28]
 8108fac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108fae:	69b9      	ldr	r1, [r7, #24]
 8108fb0:	69fa      	ldr	r2, [r7, #28]
 8108fb2:	e841 2300 	strex	r3, r2, [r1]
 8108fb6:	617b      	str	r3, [r7, #20]
   return(result);
 8108fb8:	697b      	ldr	r3, [r7, #20]
 8108fba:	2b00      	cmp	r3, #0
 8108fbc:	d1e5      	bne.n	8108f8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8108fbe:	687b      	ldr	r3, [r7, #4]
 8108fc0:	2220      	movs	r2, #32
 8108fc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8108fc6:	687b      	ldr	r3, [r7, #4]
 8108fc8:	2200      	movs	r2, #0
 8108fca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108fce:	2303      	movs	r3, #3
 8108fd0:	e012      	b.n	8108ff8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108fd2:	687b      	ldr	r3, [r7, #4]
 8108fd4:	2220      	movs	r2, #32
 8108fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8108fda:	687b      	ldr	r3, [r7, #4]
 8108fdc:	2220      	movs	r2, #32
 8108fde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108fe2:	687b      	ldr	r3, [r7, #4]
 8108fe4:	2200      	movs	r2, #0
 8108fe6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8108fe8:	687b      	ldr	r3, [r7, #4]
 8108fea:	2200      	movs	r2, #0
 8108fec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8108fee:	687b      	ldr	r3, [r7, #4]
 8108ff0:	2200      	movs	r2, #0
 8108ff2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8108ff6:	2300      	movs	r3, #0
}
 8108ff8:	4618      	mov	r0, r3
 8108ffa:	3758      	adds	r7, #88	; 0x58
 8108ffc:	46bd      	mov	sp, r7
 8108ffe:	bd80      	pop	{r7, pc}

08109000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8109000:	b580      	push	{r7, lr}
 8109002:	b084      	sub	sp, #16
 8109004:	af00      	add	r7, sp, #0
 8109006:	60f8      	str	r0, [r7, #12]
 8109008:	60b9      	str	r1, [r7, #8]
 810900a:	603b      	str	r3, [r7, #0]
 810900c:	4613      	mov	r3, r2
 810900e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109010:	e049      	b.n	81090a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109012:	69bb      	ldr	r3, [r7, #24]
 8109014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109018:	d045      	beq.n	81090a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810901a:	f7f9 fcb7 	bl	810298c <HAL_GetTick>
 810901e:	4602      	mov	r2, r0
 8109020:	683b      	ldr	r3, [r7, #0]
 8109022:	1ad3      	subs	r3, r2, r3
 8109024:	69ba      	ldr	r2, [r7, #24]
 8109026:	429a      	cmp	r2, r3
 8109028:	d302      	bcc.n	8109030 <UART_WaitOnFlagUntilTimeout+0x30>
 810902a:	69bb      	ldr	r3, [r7, #24]
 810902c:	2b00      	cmp	r3, #0
 810902e:	d101      	bne.n	8109034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8109030:	2303      	movs	r3, #3
 8109032:	e048      	b.n	81090c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8109034:	68fb      	ldr	r3, [r7, #12]
 8109036:	681b      	ldr	r3, [r3, #0]
 8109038:	681b      	ldr	r3, [r3, #0]
 810903a:	f003 0304 	and.w	r3, r3, #4
 810903e:	2b00      	cmp	r3, #0
 8109040:	d031      	beq.n	81090a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8109042:	68fb      	ldr	r3, [r7, #12]
 8109044:	681b      	ldr	r3, [r3, #0]
 8109046:	69db      	ldr	r3, [r3, #28]
 8109048:	f003 0308 	and.w	r3, r3, #8
 810904c:	2b08      	cmp	r3, #8
 810904e:	d110      	bne.n	8109072 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8109050:	68fb      	ldr	r3, [r7, #12]
 8109052:	681b      	ldr	r3, [r3, #0]
 8109054:	2208      	movs	r2, #8
 8109056:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8109058:	68f8      	ldr	r0, [r7, #12]
 810905a:	f000 f838 	bl	81090ce <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 810905e:	68fb      	ldr	r3, [r7, #12]
 8109060:	2208      	movs	r2, #8
 8109062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8109066:	68fb      	ldr	r3, [r7, #12]
 8109068:	2200      	movs	r2, #0
 810906a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 810906e:	2301      	movs	r3, #1
 8109070:	e029      	b.n	81090c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8109072:	68fb      	ldr	r3, [r7, #12]
 8109074:	681b      	ldr	r3, [r3, #0]
 8109076:	69db      	ldr	r3, [r3, #28]
 8109078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810907c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8109080:	d111      	bne.n	81090a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8109082:	68fb      	ldr	r3, [r7, #12]
 8109084:	681b      	ldr	r3, [r3, #0]
 8109086:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810908a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810908c:	68f8      	ldr	r0, [r7, #12]
 810908e:	f000 f81e 	bl	81090ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8109092:	68fb      	ldr	r3, [r7, #12]
 8109094:	2220      	movs	r2, #32
 8109096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810909a:	68fb      	ldr	r3, [r7, #12]
 810909c:	2200      	movs	r2, #0
 810909e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 81090a2:	2303      	movs	r3, #3
 81090a4:	e00f      	b.n	81090c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81090a6:	68fb      	ldr	r3, [r7, #12]
 81090a8:	681b      	ldr	r3, [r3, #0]
 81090aa:	69da      	ldr	r2, [r3, #28]
 81090ac:	68bb      	ldr	r3, [r7, #8]
 81090ae:	4013      	ands	r3, r2
 81090b0:	68ba      	ldr	r2, [r7, #8]
 81090b2:	429a      	cmp	r2, r3
 81090b4:	bf0c      	ite	eq
 81090b6:	2301      	moveq	r3, #1
 81090b8:	2300      	movne	r3, #0
 81090ba:	b2db      	uxtb	r3, r3
 81090bc:	461a      	mov	r2, r3
 81090be:	79fb      	ldrb	r3, [r7, #7]
 81090c0:	429a      	cmp	r2, r3
 81090c2:	d0a6      	beq.n	8109012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81090c4:	2300      	movs	r3, #0
}
 81090c6:	4618      	mov	r0, r3
 81090c8:	3710      	adds	r7, #16
 81090ca:	46bd      	mov	sp, r7
 81090cc:	bd80      	pop	{r7, pc}

081090ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81090ce:	b480      	push	{r7}
 81090d0:	b095      	sub	sp, #84	; 0x54
 81090d2:	af00      	add	r7, sp, #0
 81090d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81090d6:	687b      	ldr	r3, [r7, #4]
 81090d8:	681b      	ldr	r3, [r3, #0]
 81090da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81090dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81090de:	e853 3f00 	ldrex	r3, [r3]
 81090e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 81090e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81090e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 81090ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 81090ec:	687b      	ldr	r3, [r7, #4]
 81090ee:	681b      	ldr	r3, [r3, #0]
 81090f0:	461a      	mov	r2, r3
 81090f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81090f4:	643b      	str	r3, [r7, #64]	; 0x40
 81090f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81090f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81090fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81090fc:	e841 2300 	strex	r3, r2, [r1]
 8109100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8109102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109104:	2b00      	cmp	r3, #0
 8109106:	d1e6      	bne.n	81090d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8109108:	687b      	ldr	r3, [r7, #4]
 810910a:	681b      	ldr	r3, [r3, #0]
 810910c:	3308      	adds	r3, #8
 810910e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109110:	6a3b      	ldr	r3, [r7, #32]
 8109112:	e853 3f00 	ldrex	r3, [r3]
 8109116:	61fb      	str	r3, [r7, #28]
   return(result);
 8109118:	69fb      	ldr	r3, [r7, #28]
 810911a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810911e:	f023 0301 	bic.w	r3, r3, #1
 8109122:	64bb      	str	r3, [r7, #72]	; 0x48
 8109124:	687b      	ldr	r3, [r7, #4]
 8109126:	681b      	ldr	r3, [r3, #0]
 8109128:	3308      	adds	r3, #8
 810912a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810912c:	62fa      	str	r2, [r7, #44]	; 0x2c
 810912e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8109132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8109134:	e841 2300 	strex	r3, r2, [r1]
 8109138:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810913c:	2b00      	cmp	r3, #0
 810913e:	d1e3      	bne.n	8109108 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109140:	687b      	ldr	r3, [r7, #4]
 8109142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109144:	2b01      	cmp	r3, #1
 8109146:	d118      	bne.n	810917a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109148:	687b      	ldr	r3, [r7, #4]
 810914a:	681b      	ldr	r3, [r3, #0]
 810914c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810914e:	68fb      	ldr	r3, [r7, #12]
 8109150:	e853 3f00 	ldrex	r3, [r3]
 8109154:	60bb      	str	r3, [r7, #8]
   return(result);
 8109156:	68bb      	ldr	r3, [r7, #8]
 8109158:	f023 0310 	bic.w	r3, r3, #16
 810915c:	647b      	str	r3, [r7, #68]	; 0x44
 810915e:	687b      	ldr	r3, [r7, #4]
 8109160:	681b      	ldr	r3, [r3, #0]
 8109162:	461a      	mov	r2, r3
 8109164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8109166:	61bb      	str	r3, [r7, #24]
 8109168:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810916a:	6979      	ldr	r1, [r7, #20]
 810916c:	69ba      	ldr	r2, [r7, #24]
 810916e:	e841 2300 	strex	r3, r2, [r1]
 8109172:	613b      	str	r3, [r7, #16]
   return(result);
 8109174:	693b      	ldr	r3, [r7, #16]
 8109176:	2b00      	cmp	r3, #0
 8109178:	d1e6      	bne.n	8109148 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810917a:	687b      	ldr	r3, [r7, #4]
 810917c:	2220      	movs	r2, #32
 810917e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109182:	687b      	ldr	r3, [r7, #4]
 8109184:	2200      	movs	r2, #0
 8109186:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8109188:	687b      	ldr	r3, [r7, #4]
 810918a:	2200      	movs	r2, #0
 810918c:	675a      	str	r2, [r3, #116]	; 0x74
}
 810918e:	bf00      	nop
 8109190:	3754      	adds	r7, #84	; 0x54
 8109192:	46bd      	mov	sp, r7
 8109194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109198:	4770      	bx	lr

0810919a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810919a:	b480      	push	{r7}
 810919c:	b085      	sub	sp, #20
 810919e:	af00      	add	r7, sp, #0
 81091a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81091a2:	687b      	ldr	r3, [r7, #4]
 81091a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 81091a8:	2b01      	cmp	r3, #1
 81091aa:	d101      	bne.n	81091b0 <HAL_UARTEx_DisableFifoMode+0x16>
 81091ac:	2302      	movs	r3, #2
 81091ae:	e027      	b.n	8109200 <HAL_UARTEx_DisableFifoMode+0x66>
 81091b0:	687b      	ldr	r3, [r7, #4]
 81091b2:	2201      	movs	r2, #1
 81091b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81091b8:	687b      	ldr	r3, [r7, #4]
 81091ba:	2224      	movs	r2, #36	; 0x24
 81091bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81091c0:	687b      	ldr	r3, [r7, #4]
 81091c2:	681b      	ldr	r3, [r3, #0]
 81091c4:	681b      	ldr	r3, [r3, #0]
 81091c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81091c8:	687b      	ldr	r3, [r7, #4]
 81091ca:	681b      	ldr	r3, [r3, #0]
 81091cc:	681a      	ldr	r2, [r3, #0]
 81091ce:	687b      	ldr	r3, [r7, #4]
 81091d0:	681b      	ldr	r3, [r3, #0]
 81091d2:	f022 0201 	bic.w	r2, r2, #1
 81091d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81091d8:	68fb      	ldr	r3, [r7, #12]
 81091da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81091de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81091e0:	687b      	ldr	r3, [r7, #4]
 81091e2:	2200      	movs	r2, #0
 81091e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81091e6:	687b      	ldr	r3, [r7, #4]
 81091e8:	681b      	ldr	r3, [r3, #0]
 81091ea:	68fa      	ldr	r2, [r7, #12]
 81091ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81091ee:	687b      	ldr	r3, [r7, #4]
 81091f0:	2220      	movs	r2, #32
 81091f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81091f6:	687b      	ldr	r3, [r7, #4]
 81091f8:	2200      	movs	r2, #0
 81091fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 81091fe:	2300      	movs	r3, #0
}
 8109200:	4618      	mov	r0, r3
 8109202:	3714      	adds	r7, #20
 8109204:	46bd      	mov	sp, r7
 8109206:	f85d 7b04 	ldr.w	r7, [sp], #4
 810920a:	4770      	bx	lr

0810920c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810920c:	b580      	push	{r7, lr}
 810920e:	b084      	sub	sp, #16
 8109210:	af00      	add	r7, sp, #0
 8109212:	6078      	str	r0, [r7, #4]
 8109214:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109216:	687b      	ldr	r3, [r7, #4]
 8109218:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810921c:	2b01      	cmp	r3, #1
 810921e:	d101      	bne.n	8109224 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8109220:	2302      	movs	r3, #2
 8109222:	e02d      	b.n	8109280 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8109224:	687b      	ldr	r3, [r7, #4]
 8109226:	2201      	movs	r2, #1
 8109228:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810922c:	687b      	ldr	r3, [r7, #4]
 810922e:	2224      	movs	r2, #36	; 0x24
 8109230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109234:	687b      	ldr	r3, [r7, #4]
 8109236:	681b      	ldr	r3, [r3, #0]
 8109238:	681b      	ldr	r3, [r3, #0]
 810923a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810923c:	687b      	ldr	r3, [r7, #4]
 810923e:	681b      	ldr	r3, [r3, #0]
 8109240:	681a      	ldr	r2, [r3, #0]
 8109242:	687b      	ldr	r3, [r7, #4]
 8109244:	681b      	ldr	r3, [r3, #0]
 8109246:	f022 0201 	bic.w	r2, r2, #1
 810924a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810924c:	687b      	ldr	r3, [r7, #4]
 810924e:	681b      	ldr	r3, [r3, #0]
 8109250:	689b      	ldr	r3, [r3, #8]
 8109252:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8109256:	687b      	ldr	r3, [r7, #4]
 8109258:	681b      	ldr	r3, [r3, #0]
 810925a:	683a      	ldr	r2, [r7, #0]
 810925c:	430a      	orrs	r2, r1
 810925e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109260:	6878      	ldr	r0, [r7, #4]
 8109262:	f000 f84f 	bl	8109304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109266:	687b      	ldr	r3, [r7, #4]
 8109268:	681b      	ldr	r3, [r3, #0]
 810926a:	68fa      	ldr	r2, [r7, #12]
 810926c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810926e:	687b      	ldr	r3, [r7, #4]
 8109270:	2220      	movs	r2, #32
 8109272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109276:	687b      	ldr	r3, [r7, #4]
 8109278:	2200      	movs	r2, #0
 810927a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810927e:	2300      	movs	r3, #0
}
 8109280:	4618      	mov	r0, r3
 8109282:	3710      	adds	r7, #16
 8109284:	46bd      	mov	sp, r7
 8109286:	bd80      	pop	{r7, pc}

08109288 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109288:	b580      	push	{r7, lr}
 810928a:	b084      	sub	sp, #16
 810928c:	af00      	add	r7, sp, #0
 810928e:	6078      	str	r0, [r7, #4]
 8109290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109292:	687b      	ldr	r3, [r7, #4]
 8109294:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8109298:	2b01      	cmp	r3, #1
 810929a:	d101      	bne.n	81092a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810929c:	2302      	movs	r3, #2
 810929e:	e02d      	b.n	81092fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81092a0:	687b      	ldr	r3, [r7, #4]
 81092a2:	2201      	movs	r2, #1
 81092a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81092a8:	687b      	ldr	r3, [r7, #4]
 81092aa:	2224      	movs	r2, #36	; 0x24
 81092ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81092b0:	687b      	ldr	r3, [r7, #4]
 81092b2:	681b      	ldr	r3, [r3, #0]
 81092b4:	681b      	ldr	r3, [r3, #0]
 81092b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81092b8:	687b      	ldr	r3, [r7, #4]
 81092ba:	681b      	ldr	r3, [r3, #0]
 81092bc:	681a      	ldr	r2, [r3, #0]
 81092be:	687b      	ldr	r3, [r7, #4]
 81092c0:	681b      	ldr	r3, [r3, #0]
 81092c2:	f022 0201 	bic.w	r2, r2, #1
 81092c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81092c8:	687b      	ldr	r3, [r7, #4]
 81092ca:	681b      	ldr	r3, [r3, #0]
 81092cc:	689b      	ldr	r3, [r3, #8]
 81092ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81092d2:	687b      	ldr	r3, [r7, #4]
 81092d4:	681b      	ldr	r3, [r3, #0]
 81092d6:	683a      	ldr	r2, [r7, #0]
 81092d8:	430a      	orrs	r2, r1
 81092da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81092dc:	6878      	ldr	r0, [r7, #4]
 81092de:	f000 f811 	bl	8109304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81092e2:	687b      	ldr	r3, [r7, #4]
 81092e4:	681b      	ldr	r3, [r3, #0]
 81092e6:	68fa      	ldr	r2, [r7, #12]
 81092e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81092ea:	687b      	ldr	r3, [r7, #4]
 81092ec:	2220      	movs	r2, #32
 81092ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81092f2:	687b      	ldr	r3, [r7, #4]
 81092f4:	2200      	movs	r2, #0
 81092f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 81092fa:	2300      	movs	r3, #0
}
 81092fc:	4618      	mov	r0, r3
 81092fe:	3710      	adds	r7, #16
 8109300:	46bd      	mov	sp, r7
 8109302:	bd80      	pop	{r7, pc}

08109304 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8109304:	b480      	push	{r7}
 8109306:	b085      	sub	sp, #20
 8109308:	af00      	add	r7, sp, #0
 810930a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810930c:	687b      	ldr	r3, [r7, #4]
 810930e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109310:	2b00      	cmp	r3, #0
 8109312:	d108      	bne.n	8109326 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8109314:	687b      	ldr	r3, [r7, #4]
 8109316:	2201      	movs	r2, #1
 8109318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810931c:	687b      	ldr	r3, [r7, #4]
 810931e:	2201      	movs	r2, #1
 8109320:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8109324:	e031      	b.n	810938a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8109326:	2310      	movs	r3, #16
 8109328:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810932a:	2310      	movs	r3, #16
 810932c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810932e:	687b      	ldr	r3, [r7, #4]
 8109330:	681b      	ldr	r3, [r3, #0]
 8109332:	689b      	ldr	r3, [r3, #8]
 8109334:	0e5b      	lsrs	r3, r3, #25
 8109336:	b2db      	uxtb	r3, r3
 8109338:	f003 0307 	and.w	r3, r3, #7
 810933c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810933e:	687b      	ldr	r3, [r7, #4]
 8109340:	681b      	ldr	r3, [r3, #0]
 8109342:	689b      	ldr	r3, [r3, #8]
 8109344:	0f5b      	lsrs	r3, r3, #29
 8109346:	b2db      	uxtb	r3, r3
 8109348:	f003 0307 	and.w	r3, r3, #7
 810934c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810934e:	7bbb      	ldrb	r3, [r7, #14]
 8109350:	7b3a      	ldrb	r2, [r7, #12]
 8109352:	4911      	ldr	r1, [pc, #68]	; (8109398 <UARTEx_SetNbDataToProcess+0x94>)
 8109354:	5c8a      	ldrb	r2, [r1, r2]
 8109356:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810935a:	7b3a      	ldrb	r2, [r7, #12]
 810935c:	490f      	ldr	r1, [pc, #60]	; (810939c <UARTEx_SetNbDataToProcess+0x98>)
 810935e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109360:	fb93 f3f2 	sdiv	r3, r3, r2
 8109364:	b29a      	uxth	r2, r3
 8109366:	687b      	ldr	r3, [r7, #4]
 8109368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810936c:	7bfb      	ldrb	r3, [r7, #15]
 810936e:	7b7a      	ldrb	r2, [r7, #13]
 8109370:	4909      	ldr	r1, [pc, #36]	; (8109398 <UARTEx_SetNbDataToProcess+0x94>)
 8109372:	5c8a      	ldrb	r2, [r1, r2]
 8109374:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8109378:	7b7a      	ldrb	r2, [r7, #13]
 810937a:	4908      	ldr	r1, [pc, #32]	; (810939c <UARTEx_SetNbDataToProcess+0x98>)
 810937c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810937e:	fb93 f3f2 	sdiv	r3, r3, r2
 8109382:	b29a      	uxth	r2, r3
 8109384:	687b      	ldr	r3, [r7, #4]
 8109386:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810938a:	bf00      	nop
 810938c:	3714      	adds	r7, #20
 810938e:	46bd      	mov	sp, r7
 8109390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109394:	4770      	bx	lr
 8109396:	bf00      	nop
 8109398:	0810e0bc 	.word	0x0810e0bc
 810939c:	0810e0c4 	.word	0x0810e0c4

081093a0 <__errno>:
 81093a0:	4b01      	ldr	r3, [pc, #4]	; (81093a8 <__errno+0x8>)
 81093a2:	6818      	ldr	r0, [r3, #0]
 81093a4:	4770      	bx	lr
 81093a6:	bf00      	nop
 81093a8:	10000020 	.word	0x10000020

081093ac <__libc_init_array>:
 81093ac:	b570      	push	{r4, r5, r6, lr}
 81093ae:	4d0d      	ldr	r5, [pc, #52]	; (81093e4 <__libc_init_array+0x38>)
 81093b0:	4c0d      	ldr	r4, [pc, #52]	; (81093e8 <__libc_init_array+0x3c>)
 81093b2:	1b64      	subs	r4, r4, r5
 81093b4:	10a4      	asrs	r4, r4, #2
 81093b6:	2600      	movs	r6, #0
 81093b8:	42a6      	cmp	r6, r4
 81093ba:	d109      	bne.n	81093d0 <__libc_init_array+0x24>
 81093bc:	4d0b      	ldr	r5, [pc, #44]	; (81093ec <__libc_init_array+0x40>)
 81093be:	4c0c      	ldr	r4, [pc, #48]	; (81093f0 <__libc_init_array+0x44>)
 81093c0:	f004 fd1c 	bl	810ddfc <_init>
 81093c4:	1b64      	subs	r4, r4, r5
 81093c6:	10a4      	asrs	r4, r4, #2
 81093c8:	2600      	movs	r6, #0
 81093ca:	42a6      	cmp	r6, r4
 81093cc:	d105      	bne.n	81093da <__libc_init_array+0x2e>
 81093ce:	bd70      	pop	{r4, r5, r6, pc}
 81093d0:	f855 3b04 	ldr.w	r3, [r5], #4
 81093d4:	4798      	blx	r3
 81093d6:	3601      	adds	r6, #1
 81093d8:	e7ee      	b.n	81093b8 <__libc_init_array+0xc>
 81093da:	f855 3b04 	ldr.w	r3, [r5], #4
 81093de:	4798      	blx	r3
 81093e0:	3601      	adds	r6, #1
 81093e2:	e7f2      	b.n	81093ca <__libc_init_array+0x1e>
 81093e4:	0810e584 	.word	0x0810e584
 81093e8:	0810e584 	.word	0x0810e584
 81093ec:	0810e584 	.word	0x0810e584
 81093f0:	0810e588 	.word	0x0810e588

081093f4 <memcpy>:
 81093f4:	440a      	add	r2, r1
 81093f6:	4291      	cmp	r1, r2
 81093f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 81093fc:	d100      	bne.n	8109400 <memcpy+0xc>
 81093fe:	4770      	bx	lr
 8109400:	b510      	push	{r4, lr}
 8109402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8109406:	f803 4f01 	strb.w	r4, [r3, #1]!
 810940a:	4291      	cmp	r1, r2
 810940c:	d1f9      	bne.n	8109402 <memcpy+0xe>
 810940e:	bd10      	pop	{r4, pc}

08109410 <memset>:
 8109410:	4402      	add	r2, r0
 8109412:	4603      	mov	r3, r0
 8109414:	4293      	cmp	r3, r2
 8109416:	d100      	bne.n	810941a <memset+0xa>
 8109418:	4770      	bx	lr
 810941a:	f803 1b01 	strb.w	r1, [r3], #1
 810941e:	e7f9      	b.n	8109414 <memset+0x4>

08109420 <__cvt>:
 8109420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109424:	ec55 4b10 	vmov	r4, r5, d0
 8109428:	2d00      	cmp	r5, #0
 810942a:	460e      	mov	r6, r1
 810942c:	4619      	mov	r1, r3
 810942e:	462b      	mov	r3, r5
 8109430:	bfbb      	ittet	lt
 8109432:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8109436:	461d      	movlt	r5, r3
 8109438:	2300      	movge	r3, #0
 810943a:	232d      	movlt	r3, #45	; 0x2d
 810943c:	700b      	strb	r3, [r1, #0]
 810943e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109440:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8109444:	4691      	mov	r9, r2
 8109446:	f023 0820 	bic.w	r8, r3, #32
 810944a:	bfbc      	itt	lt
 810944c:	4622      	movlt	r2, r4
 810944e:	4614      	movlt	r4, r2
 8109450:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8109454:	d005      	beq.n	8109462 <__cvt+0x42>
 8109456:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810945a:	d100      	bne.n	810945e <__cvt+0x3e>
 810945c:	3601      	adds	r6, #1
 810945e:	2102      	movs	r1, #2
 8109460:	e000      	b.n	8109464 <__cvt+0x44>
 8109462:	2103      	movs	r1, #3
 8109464:	ab03      	add	r3, sp, #12
 8109466:	9301      	str	r3, [sp, #4]
 8109468:	ab02      	add	r3, sp, #8
 810946a:	9300      	str	r3, [sp, #0]
 810946c:	ec45 4b10 	vmov	d0, r4, r5
 8109470:	4653      	mov	r3, sl
 8109472:	4632      	mov	r2, r6
 8109474:	f001 fefc 	bl	810b270 <_dtoa_r>
 8109478:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810947c:	4607      	mov	r7, r0
 810947e:	d102      	bne.n	8109486 <__cvt+0x66>
 8109480:	f019 0f01 	tst.w	r9, #1
 8109484:	d022      	beq.n	81094cc <__cvt+0xac>
 8109486:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810948a:	eb07 0906 	add.w	r9, r7, r6
 810948e:	d110      	bne.n	81094b2 <__cvt+0x92>
 8109490:	783b      	ldrb	r3, [r7, #0]
 8109492:	2b30      	cmp	r3, #48	; 0x30
 8109494:	d10a      	bne.n	81094ac <__cvt+0x8c>
 8109496:	2200      	movs	r2, #0
 8109498:	2300      	movs	r3, #0
 810949a:	4620      	mov	r0, r4
 810949c:	4629      	mov	r1, r5
 810949e:	f7f7 fb9b 	bl	8100bd8 <__aeabi_dcmpeq>
 81094a2:	b918      	cbnz	r0, 81094ac <__cvt+0x8c>
 81094a4:	f1c6 0601 	rsb	r6, r6, #1
 81094a8:	f8ca 6000 	str.w	r6, [sl]
 81094ac:	f8da 3000 	ldr.w	r3, [sl]
 81094b0:	4499      	add	r9, r3
 81094b2:	2200      	movs	r2, #0
 81094b4:	2300      	movs	r3, #0
 81094b6:	4620      	mov	r0, r4
 81094b8:	4629      	mov	r1, r5
 81094ba:	f7f7 fb8d 	bl	8100bd8 <__aeabi_dcmpeq>
 81094be:	b108      	cbz	r0, 81094c4 <__cvt+0xa4>
 81094c0:	f8cd 900c 	str.w	r9, [sp, #12]
 81094c4:	2230      	movs	r2, #48	; 0x30
 81094c6:	9b03      	ldr	r3, [sp, #12]
 81094c8:	454b      	cmp	r3, r9
 81094ca:	d307      	bcc.n	81094dc <__cvt+0xbc>
 81094cc:	9b03      	ldr	r3, [sp, #12]
 81094ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 81094d0:	1bdb      	subs	r3, r3, r7
 81094d2:	4638      	mov	r0, r7
 81094d4:	6013      	str	r3, [r2, #0]
 81094d6:	b004      	add	sp, #16
 81094d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81094dc:	1c59      	adds	r1, r3, #1
 81094de:	9103      	str	r1, [sp, #12]
 81094e0:	701a      	strb	r2, [r3, #0]
 81094e2:	e7f0      	b.n	81094c6 <__cvt+0xa6>

081094e4 <__exponent>:
 81094e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81094e6:	4603      	mov	r3, r0
 81094e8:	2900      	cmp	r1, #0
 81094ea:	bfb8      	it	lt
 81094ec:	4249      	neglt	r1, r1
 81094ee:	f803 2b02 	strb.w	r2, [r3], #2
 81094f2:	bfb4      	ite	lt
 81094f4:	222d      	movlt	r2, #45	; 0x2d
 81094f6:	222b      	movge	r2, #43	; 0x2b
 81094f8:	2909      	cmp	r1, #9
 81094fa:	7042      	strb	r2, [r0, #1]
 81094fc:	dd2a      	ble.n	8109554 <__exponent+0x70>
 81094fe:	f10d 0407 	add.w	r4, sp, #7
 8109502:	46a4      	mov	ip, r4
 8109504:	270a      	movs	r7, #10
 8109506:	46a6      	mov	lr, r4
 8109508:	460a      	mov	r2, r1
 810950a:	fb91 f6f7 	sdiv	r6, r1, r7
 810950e:	fb07 1516 	mls	r5, r7, r6, r1
 8109512:	3530      	adds	r5, #48	; 0x30
 8109514:	2a63      	cmp	r2, #99	; 0x63
 8109516:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 810951a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 810951e:	4631      	mov	r1, r6
 8109520:	dcf1      	bgt.n	8109506 <__exponent+0x22>
 8109522:	3130      	adds	r1, #48	; 0x30
 8109524:	f1ae 0502 	sub.w	r5, lr, #2
 8109528:	f804 1c01 	strb.w	r1, [r4, #-1]
 810952c:	1c44      	adds	r4, r0, #1
 810952e:	4629      	mov	r1, r5
 8109530:	4561      	cmp	r1, ip
 8109532:	d30a      	bcc.n	810954a <__exponent+0x66>
 8109534:	f10d 0209 	add.w	r2, sp, #9
 8109538:	eba2 020e 	sub.w	r2, r2, lr
 810953c:	4565      	cmp	r5, ip
 810953e:	bf88      	it	hi
 8109540:	2200      	movhi	r2, #0
 8109542:	4413      	add	r3, r2
 8109544:	1a18      	subs	r0, r3, r0
 8109546:	b003      	add	sp, #12
 8109548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810954a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810954e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8109552:	e7ed      	b.n	8109530 <__exponent+0x4c>
 8109554:	2330      	movs	r3, #48	; 0x30
 8109556:	3130      	adds	r1, #48	; 0x30
 8109558:	7083      	strb	r3, [r0, #2]
 810955a:	70c1      	strb	r1, [r0, #3]
 810955c:	1d03      	adds	r3, r0, #4
 810955e:	e7f1      	b.n	8109544 <__exponent+0x60>

08109560 <_printf_float>:
 8109560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109564:	ed2d 8b02 	vpush	{d8}
 8109568:	b08d      	sub	sp, #52	; 0x34
 810956a:	460c      	mov	r4, r1
 810956c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8109570:	4616      	mov	r6, r2
 8109572:	461f      	mov	r7, r3
 8109574:	4605      	mov	r5, r0
 8109576:	f003 f98f 	bl	810c898 <_localeconv_r>
 810957a:	f8d0 a000 	ldr.w	sl, [r0]
 810957e:	4650      	mov	r0, sl
 8109580:	f7f6 feae 	bl	81002e0 <strlen>
 8109584:	2300      	movs	r3, #0
 8109586:	930a      	str	r3, [sp, #40]	; 0x28
 8109588:	6823      	ldr	r3, [r4, #0]
 810958a:	9305      	str	r3, [sp, #20]
 810958c:	f8d8 3000 	ldr.w	r3, [r8]
 8109590:	f894 b018 	ldrb.w	fp, [r4, #24]
 8109594:	3307      	adds	r3, #7
 8109596:	f023 0307 	bic.w	r3, r3, #7
 810959a:	f103 0208 	add.w	r2, r3, #8
 810959e:	f8c8 2000 	str.w	r2, [r8]
 81095a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81095a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 81095aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 81095ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 81095b2:	9307      	str	r3, [sp, #28]
 81095b4:	f8cd 8018 	str.w	r8, [sp, #24]
 81095b8:	ee08 0a10 	vmov	s16, r0
 81095bc:	4b9f      	ldr	r3, [pc, #636]	; (810983c <_printf_float+0x2dc>)
 81095be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81095c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81095c6:	f7f7 fb39 	bl	8100c3c <__aeabi_dcmpun>
 81095ca:	bb88      	cbnz	r0, 8109630 <_printf_float+0xd0>
 81095cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81095d0:	4b9a      	ldr	r3, [pc, #616]	; (810983c <_printf_float+0x2dc>)
 81095d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81095d6:	f7f7 fb13 	bl	8100c00 <__aeabi_dcmple>
 81095da:	bb48      	cbnz	r0, 8109630 <_printf_float+0xd0>
 81095dc:	2200      	movs	r2, #0
 81095de:	2300      	movs	r3, #0
 81095e0:	4640      	mov	r0, r8
 81095e2:	4649      	mov	r1, r9
 81095e4:	f7f7 fb02 	bl	8100bec <__aeabi_dcmplt>
 81095e8:	b110      	cbz	r0, 81095f0 <_printf_float+0x90>
 81095ea:	232d      	movs	r3, #45	; 0x2d
 81095ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81095f0:	4b93      	ldr	r3, [pc, #588]	; (8109840 <_printf_float+0x2e0>)
 81095f2:	4894      	ldr	r0, [pc, #592]	; (8109844 <_printf_float+0x2e4>)
 81095f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 81095f8:	bf94      	ite	ls
 81095fa:	4698      	movls	r8, r3
 81095fc:	4680      	movhi	r8, r0
 81095fe:	2303      	movs	r3, #3
 8109600:	6123      	str	r3, [r4, #16]
 8109602:	9b05      	ldr	r3, [sp, #20]
 8109604:	f023 0204 	bic.w	r2, r3, #4
 8109608:	6022      	str	r2, [r4, #0]
 810960a:	f04f 0900 	mov.w	r9, #0
 810960e:	9700      	str	r7, [sp, #0]
 8109610:	4633      	mov	r3, r6
 8109612:	aa0b      	add	r2, sp, #44	; 0x2c
 8109614:	4621      	mov	r1, r4
 8109616:	4628      	mov	r0, r5
 8109618:	f000 f9d8 	bl	81099cc <_printf_common>
 810961c:	3001      	adds	r0, #1
 810961e:	f040 8090 	bne.w	8109742 <_printf_float+0x1e2>
 8109622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8109626:	b00d      	add	sp, #52	; 0x34
 8109628:	ecbd 8b02 	vpop	{d8}
 810962c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109630:	4642      	mov	r2, r8
 8109632:	464b      	mov	r3, r9
 8109634:	4640      	mov	r0, r8
 8109636:	4649      	mov	r1, r9
 8109638:	f7f7 fb00 	bl	8100c3c <__aeabi_dcmpun>
 810963c:	b140      	cbz	r0, 8109650 <_printf_float+0xf0>
 810963e:	464b      	mov	r3, r9
 8109640:	2b00      	cmp	r3, #0
 8109642:	bfbc      	itt	lt
 8109644:	232d      	movlt	r3, #45	; 0x2d
 8109646:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 810964a:	487f      	ldr	r0, [pc, #508]	; (8109848 <_printf_float+0x2e8>)
 810964c:	4b7f      	ldr	r3, [pc, #508]	; (810984c <_printf_float+0x2ec>)
 810964e:	e7d1      	b.n	81095f4 <_printf_float+0x94>
 8109650:	6863      	ldr	r3, [r4, #4]
 8109652:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8109656:	9206      	str	r2, [sp, #24]
 8109658:	1c5a      	adds	r2, r3, #1
 810965a:	d13f      	bne.n	81096dc <_printf_float+0x17c>
 810965c:	2306      	movs	r3, #6
 810965e:	6063      	str	r3, [r4, #4]
 8109660:	9b05      	ldr	r3, [sp, #20]
 8109662:	6861      	ldr	r1, [r4, #4]
 8109664:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8109668:	2300      	movs	r3, #0
 810966a:	9303      	str	r3, [sp, #12]
 810966c:	ab0a      	add	r3, sp, #40	; 0x28
 810966e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8109672:	ab09      	add	r3, sp, #36	; 0x24
 8109674:	ec49 8b10 	vmov	d0, r8, r9
 8109678:	9300      	str	r3, [sp, #0]
 810967a:	6022      	str	r2, [r4, #0]
 810967c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8109680:	4628      	mov	r0, r5
 8109682:	f7ff fecd 	bl	8109420 <__cvt>
 8109686:	9b06      	ldr	r3, [sp, #24]
 8109688:	9909      	ldr	r1, [sp, #36]	; 0x24
 810968a:	2b47      	cmp	r3, #71	; 0x47
 810968c:	4680      	mov	r8, r0
 810968e:	d108      	bne.n	81096a2 <_printf_float+0x142>
 8109690:	1cc8      	adds	r0, r1, #3
 8109692:	db02      	blt.n	810969a <_printf_float+0x13a>
 8109694:	6863      	ldr	r3, [r4, #4]
 8109696:	4299      	cmp	r1, r3
 8109698:	dd41      	ble.n	810971e <_printf_float+0x1be>
 810969a:	f1ab 0b02 	sub.w	fp, fp, #2
 810969e:	fa5f fb8b 	uxtb.w	fp, fp
 81096a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81096a6:	d820      	bhi.n	81096ea <_printf_float+0x18a>
 81096a8:	3901      	subs	r1, #1
 81096aa:	465a      	mov	r2, fp
 81096ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 81096b0:	9109      	str	r1, [sp, #36]	; 0x24
 81096b2:	f7ff ff17 	bl	81094e4 <__exponent>
 81096b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81096b8:	1813      	adds	r3, r2, r0
 81096ba:	2a01      	cmp	r2, #1
 81096bc:	4681      	mov	r9, r0
 81096be:	6123      	str	r3, [r4, #16]
 81096c0:	dc02      	bgt.n	81096c8 <_printf_float+0x168>
 81096c2:	6822      	ldr	r2, [r4, #0]
 81096c4:	07d2      	lsls	r2, r2, #31
 81096c6:	d501      	bpl.n	81096cc <_printf_float+0x16c>
 81096c8:	3301      	adds	r3, #1
 81096ca:	6123      	str	r3, [r4, #16]
 81096cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 81096d0:	2b00      	cmp	r3, #0
 81096d2:	d09c      	beq.n	810960e <_printf_float+0xae>
 81096d4:	232d      	movs	r3, #45	; 0x2d
 81096d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81096da:	e798      	b.n	810960e <_printf_float+0xae>
 81096dc:	9a06      	ldr	r2, [sp, #24]
 81096de:	2a47      	cmp	r2, #71	; 0x47
 81096e0:	d1be      	bne.n	8109660 <_printf_float+0x100>
 81096e2:	2b00      	cmp	r3, #0
 81096e4:	d1bc      	bne.n	8109660 <_printf_float+0x100>
 81096e6:	2301      	movs	r3, #1
 81096e8:	e7b9      	b.n	810965e <_printf_float+0xfe>
 81096ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 81096ee:	d118      	bne.n	8109722 <_printf_float+0x1c2>
 81096f0:	2900      	cmp	r1, #0
 81096f2:	6863      	ldr	r3, [r4, #4]
 81096f4:	dd0b      	ble.n	810970e <_printf_float+0x1ae>
 81096f6:	6121      	str	r1, [r4, #16]
 81096f8:	b913      	cbnz	r3, 8109700 <_printf_float+0x1a0>
 81096fa:	6822      	ldr	r2, [r4, #0]
 81096fc:	07d0      	lsls	r0, r2, #31
 81096fe:	d502      	bpl.n	8109706 <_printf_float+0x1a6>
 8109700:	3301      	adds	r3, #1
 8109702:	440b      	add	r3, r1
 8109704:	6123      	str	r3, [r4, #16]
 8109706:	65a1      	str	r1, [r4, #88]	; 0x58
 8109708:	f04f 0900 	mov.w	r9, #0
 810970c:	e7de      	b.n	81096cc <_printf_float+0x16c>
 810970e:	b913      	cbnz	r3, 8109716 <_printf_float+0x1b6>
 8109710:	6822      	ldr	r2, [r4, #0]
 8109712:	07d2      	lsls	r2, r2, #31
 8109714:	d501      	bpl.n	810971a <_printf_float+0x1ba>
 8109716:	3302      	adds	r3, #2
 8109718:	e7f4      	b.n	8109704 <_printf_float+0x1a4>
 810971a:	2301      	movs	r3, #1
 810971c:	e7f2      	b.n	8109704 <_printf_float+0x1a4>
 810971e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8109722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109724:	4299      	cmp	r1, r3
 8109726:	db05      	blt.n	8109734 <_printf_float+0x1d4>
 8109728:	6823      	ldr	r3, [r4, #0]
 810972a:	6121      	str	r1, [r4, #16]
 810972c:	07d8      	lsls	r0, r3, #31
 810972e:	d5ea      	bpl.n	8109706 <_printf_float+0x1a6>
 8109730:	1c4b      	adds	r3, r1, #1
 8109732:	e7e7      	b.n	8109704 <_printf_float+0x1a4>
 8109734:	2900      	cmp	r1, #0
 8109736:	bfd4      	ite	le
 8109738:	f1c1 0202 	rsble	r2, r1, #2
 810973c:	2201      	movgt	r2, #1
 810973e:	4413      	add	r3, r2
 8109740:	e7e0      	b.n	8109704 <_printf_float+0x1a4>
 8109742:	6823      	ldr	r3, [r4, #0]
 8109744:	055a      	lsls	r2, r3, #21
 8109746:	d407      	bmi.n	8109758 <_printf_float+0x1f8>
 8109748:	6923      	ldr	r3, [r4, #16]
 810974a:	4642      	mov	r2, r8
 810974c:	4631      	mov	r1, r6
 810974e:	4628      	mov	r0, r5
 8109750:	47b8      	blx	r7
 8109752:	3001      	adds	r0, #1
 8109754:	d12c      	bne.n	81097b0 <_printf_float+0x250>
 8109756:	e764      	b.n	8109622 <_printf_float+0xc2>
 8109758:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810975c:	f240 80e0 	bls.w	8109920 <_printf_float+0x3c0>
 8109760:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8109764:	2200      	movs	r2, #0
 8109766:	2300      	movs	r3, #0
 8109768:	f7f7 fa36 	bl	8100bd8 <__aeabi_dcmpeq>
 810976c:	2800      	cmp	r0, #0
 810976e:	d034      	beq.n	81097da <_printf_float+0x27a>
 8109770:	4a37      	ldr	r2, [pc, #220]	; (8109850 <_printf_float+0x2f0>)
 8109772:	2301      	movs	r3, #1
 8109774:	4631      	mov	r1, r6
 8109776:	4628      	mov	r0, r5
 8109778:	47b8      	blx	r7
 810977a:	3001      	adds	r0, #1
 810977c:	f43f af51 	beq.w	8109622 <_printf_float+0xc2>
 8109780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109784:	429a      	cmp	r2, r3
 8109786:	db02      	blt.n	810978e <_printf_float+0x22e>
 8109788:	6823      	ldr	r3, [r4, #0]
 810978a:	07d8      	lsls	r0, r3, #31
 810978c:	d510      	bpl.n	81097b0 <_printf_float+0x250>
 810978e:	ee18 3a10 	vmov	r3, s16
 8109792:	4652      	mov	r2, sl
 8109794:	4631      	mov	r1, r6
 8109796:	4628      	mov	r0, r5
 8109798:	47b8      	blx	r7
 810979a:	3001      	adds	r0, #1
 810979c:	f43f af41 	beq.w	8109622 <_printf_float+0xc2>
 81097a0:	f04f 0800 	mov.w	r8, #0
 81097a4:	f104 091a 	add.w	r9, r4, #26
 81097a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81097aa:	3b01      	subs	r3, #1
 81097ac:	4543      	cmp	r3, r8
 81097ae:	dc09      	bgt.n	81097c4 <_printf_float+0x264>
 81097b0:	6823      	ldr	r3, [r4, #0]
 81097b2:	079b      	lsls	r3, r3, #30
 81097b4:	f100 8105 	bmi.w	81099c2 <_printf_float+0x462>
 81097b8:	68e0      	ldr	r0, [r4, #12]
 81097ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81097bc:	4298      	cmp	r0, r3
 81097be:	bfb8      	it	lt
 81097c0:	4618      	movlt	r0, r3
 81097c2:	e730      	b.n	8109626 <_printf_float+0xc6>
 81097c4:	2301      	movs	r3, #1
 81097c6:	464a      	mov	r2, r9
 81097c8:	4631      	mov	r1, r6
 81097ca:	4628      	mov	r0, r5
 81097cc:	47b8      	blx	r7
 81097ce:	3001      	adds	r0, #1
 81097d0:	f43f af27 	beq.w	8109622 <_printf_float+0xc2>
 81097d4:	f108 0801 	add.w	r8, r8, #1
 81097d8:	e7e6      	b.n	81097a8 <_printf_float+0x248>
 81097da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81097dc:	2b00      	cmp	r3, #0
 81097de:	dc39      	bgt.n	8109854 <_printf_float+0x2f4>
 81097e0:	4a1b      	ldr	r2, [pc, #108]	; (8109850 <_printf_float+0x2f0>)
 81097e2:	2301      	movs	r3, #1
 81097e4:	4631      	mov	r1, r6
 81097e6:	4628      	mov	r0, r5
 81097e8:	47b8      	blx	r7
 81097ea:	3001      	adds	r0, #1
 81097ec:	f43f af19 	beq.w	8109622 <_printf_float+0xc2>
 81097f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81097f4:	4313      	orrs	r3, r2
 81097f6:	d102      	bne.n	81097fe <_printf_float+0x29e>
 81097f8:	6823      	ldr	r3, [r4, #0]
 81097fa:	07d9      	lsls	r1, r3, #31
 81097fc:	d5d8      	bpl.n	81097b0 <_printf_float+0x250>
 81097fe:	ee18 3a10 	vmov	r3, s16
 8109802:	4652      	mov	r2, sl
 8109804:	4631      	mov	r1, r6
 8109806:	4628      	mov	r0, r5
 8109808:	47b8      	blx	r7
 810980a:	3001      	adds	r0, #1
 810980c:	f43f af09 	beq.w	8109622 <_printf_float+0xc2>
 8109810:	f04f 0900 	mov.w	r9, #0
 8109814:	f104 0a1a 	add.w	sl, r4, #26
 8109818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810981a:	425b      	negs	r3, r3
 810981c:	454b      	cmp	r3, r9
 810981e:	dc01      	bgt.n	8109824 <_printf_float+0x2c4>
 8109820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109822:	e792      	b.n	810974a <_printf_float+0x1ea>
 8109824:	2301      	movs	r3, #1
 8109826:	4652      	mov	r2, sl
 8109828:	4631      	mov	r1, r6
 810982a:	4628      	mov	r0, r5
 810982c:	47b8      	blx	r7
 810982e:	3001      	adds	r0, #1
 8109830:	f43f aef7 	beq.w	8109622 <_printf_float+0xc2>
 8109834:	f109 0901 	add.w	r9, r9, #1
 8109838:	e7ee      	b.n	8109818 <_printf_float+0x2b8>
 810983a:	bf00      	nop
 810983c:	7fefffff 	.word	0x7fefffff
 8109840:	0810e0d0 	.word	0x0810e0d0
 8109844:	0810e0d4 	.word	0x0810e0d4
 8109848:	0810e0dc 	.word	0x0810e0dc
 810984c:	0810e0d8 	.word	0x0810e0d8
 8109850:	0810e0e0 	.word	0x0810e0e0
 8109854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8109858:	429a      	cmp	r2, r3
 810985a:	bfa8      	it	ge
 810985c:	461a      	movge	r2, r3
 810985e:	2a00      	cmp	r2, #0
 8109860:	4691      	mov	r9, r2
 8109862:	dc37      	bgt.n	81098d4 <_printf_float+0x374>
 8109864:	f04f 0b00 	mov.w	fp, #0
 8109868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810986c:	f104 021a 	add.w	r2, r4, #26
 8109870:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8109872:	9305      	str	r3, [sp, #20]
 8109874:	eba3 0309 	sub.w	r3, r3, r9
 8109878:	455b      	cmp	r3, fp
 810987a:	dc33      	bgt.n	81098e4 <_printf_float+0x384>
 810987c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109880:	429a      	cmp	r2, r3
 8109882:	db3b      	blt.n	81098fc <_printf_float+0x39c>
 8109884:	6823      	ldr	r3, [r4, #0]
 8109886:	07da      	lsls	r2, r3, #31
 8109888:	d438      	bmi.n	81098fc <_printf_float+0x39c>
 810988a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810988c:	9a05      	ldr	r2, [sp, #20]
 810988e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109890:	1a9a      	subs	r2, r3, r2
 8109892:	eba3 0901 	sub.w	r9, r3, r1
 8109896:	4591      	cmp	r9, r2
 8109898:	bfa8      	it	ge
 810989a:	4691      	movge	r9, r2
 810989c:	f1b9 0f00 	cmp.w	r9, #0
 81098a0:	dc35      	bgt.n	810990e <_printf_float+0x3ae>
 81098a2:	f04f 0800 	mov.w	r8, #0
 81098a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81098aa:	f104 0a1a 	add.w	sl, r4, #26
 81098ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81098b2:	1a9b      	subs	r3, r3, r2
 81098b4:	eba3 0309 	sub.w	r3, r3, r9
 81098b8:	4543      	cmp	r3, r8
 81098ba:	f77f af79 	ble.w	81097b0 <_printf_float+0x250>
 81098be:	2301      	movs	r3, #1
 81098c0:	4652      	mov	r2, sl
 81098c2:	4631      	mov	r1, r6
 81098c4:	4628      	mov	r0, r5
 81098c6:	47b8      	blx	r7
 81098c8:	3001      	adds	r0, #1
 81098ca:	f43f aeaa 	beq.w	8109622 <_printf_float+0xc2>
 81098ce:	f108 0801 	add.w	r8, r8, #1
 81098d2:	e7ec      	b.n	81098ae <_printf_float+0x34e>
 81098d4:	4613      	mov	r3, r2
 81098d6:	4631      	mov	r1, r6
 81098d8:	4642      	mov	r2, r8
 81098da:	4628      	mov	r0, r5
 81098dc:	47b8      	blx	r7
 81098de:	3001      	adds	r0, #1
 81098e0:	d1c0      	bne.n	8109864 <_printf_float+0x304>
 81098e2:	e69e      	b.n	8109622 <_printf_float+0xc2>
 81098e4:	2301      	movs	r3, #1
 81098e6:	4631      	mov	r1, r6
 81098e8:	4628      	mov	r0, r5
 81098ea:	9205      	str	r2, [sp, #20]
 81098ec:	47b8      	blx	r7
 81098ee:	3001      	adds	r0, #1
 81098f0:	f43f ae97 	beq.w	8109622 <_printf_float+0xc2>
 81098f4:	9a05      	ldr	r2, [sp, #20]
 81098f6:	f10b 0b01 	add.w	fp, fp, #1
 81098fa:	e7b9      	b.n	8109870 <_printf_float+0x310>
 81098fc:	ee18 3a10 	vmov	r3, s16
 8109900:	4652      	mov	r2, sl
 8109902:	4631      	mov	r1, r6
 8109904:	4628      	mov	r0, r5
 8109906:	47b8      	blx	r7
 8109908:	3001      	adds	r0, #1
 810990a:	d1be      	bne.n	810988a <_printf_float+0x32a>
 810990c:	e689      	b.n	8109622 <_printf_float+0xc2>
 810990e:	9a05      	ldr	r2, [sp, #20]
 8109910:	464b      	mov	r3, r9
 8109912:	4442      	add	r2, r8
 8109914:	4631      	mov	r1, r6
 8109916:	4628      	mov	r0, r5
 8109918:	47b8      	blx	r7
 810991a:	3001      	adds	r0, #1
 810991c:	d1c1      	bne.n	81098a2 <_printf_float+0x342>
 810991e:	e680      	b.n	8109622 <_printf_float+0xc2>
 8109920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109922:	2a01      	cmp	r2, #1
 8109924:	dc01      	bgt.n	810992a <_printf_float+0x3ca>
 8109926:	07db      	lsls	r3, r3, #31
 8109928:	d538      	bpl.n	810999c <_printf_float+0x43c>
 810992a:	2301      	movs	r3, #1
 810992c:	4642      	mov	r2, r8
 810992e:	4631      	mov	r1, r6
 8109930:	4628      	mov	r0, r5
 8109932:	47b8      	blx	r7
 8109934:	3001      	adds	r0, #1
 8109936:	f43f ae74 	beq.w	8109622 <_printf_float+0xc2>
 810993a:	ee18 3a10 	vmov	r3, s16
 810993e:	4652      	mov	r2, sl
 8109940:	4631      	mov	r1, r6
 8109942:	4628      	mov	r0, r5
 8109944:	47b8      	blx	r7
 8109946:	3001      	adds	r0, #1
 8109948:	f43f ae6b 	beq.w	8109622 <_printf_float+0xc2>
 810994c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8109950:	2200      	movs	r2, #0
 8109952:	2300      	movs	r3, #0
 8109954:	f7f7 f940 	bl	8100bd8 <__aeabi_dcmpeq>
 8109958:	b9d8      	cbnz	r0, 8109992 <_printf_float+0x432>
 810995a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810995c:	f108 0201 	add.w	r2, r8, #1
 8109960:	3b01      	subs	r3, #1
 8109962:	4631      	mov	r1, r6
 8109964:	4628      	mov	r0, r5
 8109966:	47b8      	blx	r7
 8109968:	3001      	adds	r0, #1
 810996a:	d10e      	bne.n	810998a <_printf_float+0x42a>
 810996c:	e659      	b.n	8109622 <_printf_float+0xc2>
 810996e:	2301      	movs	r3, #1
 8109970:	4652      	mov	r2, sl
 8109972:	4631      	mov	r1, r6
 8109974:	4628      	mov	r0, r5
 8109976:	47b8      	blx	r7
 8109978:	3001      	adds	r0, #1
 810997a:	f43f ae52 	beq.w	8109622 <_printf_float+0xc2>
 810997e:	f108 0801 	add.w	r8, r8, #1
 8109982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109984:	3b01      	subs	r3, #1
 8109986:	4543      	cmp	r3, r8
 8109988:	dcf1      	bgt.n	810996e <_printf_float+0x40e>
 810998a:	464b      	mov	r3, r9
 810998c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8109990:	e6dc      	b.n	810974c <_printf_float+0x1ec>
 8109992:	f04f 0800 	mov.w	r8, #0
 8109996:	f104 0a1a 	add.w	sl, r4, #26
 810999a:	e7f2      	b.n	8109982 <_printf_float+0x422>
 810999c:	2301      	movs	r3, #1
 810999e:	4642      	mov	r2, r8
 81099a0:	e7df      	b.n	8109962 <_printf_float+0x402>
 81099a2:	2301      	movs	r3, #1
 81099a4:	464a      	mov	r2, r9
 81099a6:	4631      	mov	r1, r6
 81099a8:	4628      	mov	r0, r5
 81099aa:	47b8      	blx	r7
 81099ac:	3001      	adds	r0, #1
 81099ae:	f43f ae38 	beq.w	8109622 <_printf_float+0xc2>
 81099b2:	f108 0801 	add.w	r8, r8, #1
 81099b6:	68e3      	ldr	r3, [r4, #12]
 81099b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 81099ba:	1a5b      	subs	r3, r3, r1
 81099bc:	4543      	cmp	r3, r8
 81099be:	dcf0      	bgt.n	81099a2 <_printf_float+0x442>
 81099c0:	e6fa      	b.n	81097b8 <_printf_float+0x258>
 81099c2:	f04f 0800 	mov.w	r8, #0
 81099c6:	f104 0919 	add.w	r9, r4, #25
 81099ca:	e7f4      	b.n	81099b6 <_printf_float+0x456>

081099cc <_printf_common>:
 81099cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81099d0:	4616      	mov	r6, r2
 81099d2:	4699      	mov	r9, r3
 81099d4:	688a      	ldr	r2, [r1, #8]
 81099d6:	690b      	ldr	r3, [r1, #16]
 81099d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81099dc:	4293      	cmp	r3, r2
 81099de:	bfb8      	it	lt
 81099e0:	4613      	movlt	r3, r2
 81099e2:	6033      	str	r3, [r6, #0]
 81099e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81099e8:	4607      	mov	r7, r0
 81099ea:	460c      	mov	r4, r1
 81099ec:	b10a      	cbz	r2, 81099f2 <_printf_common+0x26>
 81099ee:	3301      	adds	r3, #1
 81099f0:	6033      	str	r3, [r6, #0]
 81099f2:	6823      	ldr	r3, [r4, #0]
 81099f4:	0699      	lsls	r1, r3, #26
 81099f6:	bf42      	ittt	mi
 81099f8:	6833      	ldrmi	r3, [r6, #0]
 81099fa:	3302      	addmi	r3, #2
 81099fc:	6033      	strmi	r3, [r6, #0]
 81099fe:	6825      	ldr	r5, [r4, #0]
 8109a00:	f015 0506 	ands.w	r5, r5, #6
 8109a04:	d106      	bne.n	8109a14 <_printf_common+0x48>
 8109a06:	f104 0a19 	add.w	sl, r4, #25
 8109a0a:	68e3      	ldr	r3, [r4, #12]
 8109a0c:	6832      	ldr	r2, [r6, #0]
 8109a0e:	1a9b      	subs	r3, r3, r2
 8109a10:	42ab      	cmp	r3, r5
 8109a12:	dc26      	bgt.n	8109a62 <_printf_common+0x96>
 8109a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8109a18:	1e13      	subs	r3, r2, #0
 8109a1a:	6822      	ldr	r2, [r4, #0]
 8109a1c:	bf18      	it	ne
 8109a1e:	2301      	movne	r3, #1
 8109a20:	0692      	lsls	r2, r2, #26
 8109a22:	d42b      	bmi.n	8109a7c <_printf_common+0xb0>
 8109a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8109a28:	4649      	mov	r1, r9
 8109a2a:	4638      	mov	r0, r7
 8109a2c:	47c0      	blx	r8
 8109a2e:	3001      	adds	r0, #1
 8109a30:	d01e      	beq.n	8109a70 <_printf_common+0xa4>
 8109a32:	6823      	ldr	r3, [r4, #0]
 8109a34:	68e5      	ldr	r5, [r4, #12]
 8109a36:	6832      	ldr	r2, [r6, #0]
 8109a38:	f003 0306 	and.w	r3, r3, #6
 8109a3c:	2b04      	cmp	r3, #4
 8109a3e:	bf08      	it	eq
 8109a40:	1aad      	subeq	r5, r5, r2
 8109a42:	68a3      	ldr	r3, [r4, #8]
 8109a44:	6922      	ldr	r2, [r4, #16]
 8109a46:	bf0c      	ite	eq
 8109a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109a4c:	2500      	movne	r5, #0
 8109a4e:	4293      	cmp	r3, r2
 8109a50:	bfc4      	itt	gt
 8109a52:	1a9b      	subgt	r3, r3, r2
 8109a54:	18ed      	addgt	r5, r5, r3
 8109a56:	2600      	movs	r6, #0
 8109a58:	341a      	adds	r4, #26
 8109a5a:	42b5      	cmp	r5, r6
 8109a5c:	d11a      	bne.n	8109a94 <_printf_common+0xc8>
 8109a5e:	2000      	movs	r0, #0
 8109a60:	e008      	b.n	8109a74 <_printf_common+0xa8>
 8109a62:	2301      	movs	r3, #1
 8109a64:	4652      	mov	r2, sl
 8109a66:	4649      	mov	r1, r9
 8109a68:	4638      	mov	r0, r7
 8109a6a:	47c0      	blx	r8
 8109a6c:	3001      	adds	r0, #1
 8109a6e:	d103      	bne.n	8109a78 <_printf_common+0xac>
 8109a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8109a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109a78:	3501      	adds	r5, #1
 8109a7a:	e7c6      	b.n	8109a0a <_printf_common+0x3e>
 8109a7c:	18e1      	adds	r1, r4, r3
 8109a7e:	1c5a      	adds	r2, r3, #1
 8109a80:	2030      	movs	r0, #48	; 0x30
 8109a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8109a86:	4422      	add	r2, r4
 8109a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8109a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8109a90:	3302      	adds	r3, #2
 8109a92:	e7c7      	b.n	8109a24 <_printf_common+0x58>
 8109a94:	2301      	movs	r3, #1
 8109a96:	4622      	mov	r2, r4
 8109a98:	4649      	mov	r1, r9
 8109a9a:	4638      	mov	r0, r7
 8109a9c:	47c0      	blx	r8
 8109a9e:	3001      	adds	r0, #1
 8109aa0:	d0e6      	beq.n	8109a70 <_printf_common+0xa4>
 8109aa2:	3601      	adds	r6, #1
 8109aa4:	e7d9      	b.n	8109a5a <_printf_common+0x8e>
	...

08109aa8 <_printf_i>:
 8109aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109aac:	7e0f      	ldrb	r7, [r1, #24]
 8109aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109ab0:	2f78      	cmp	r7, #120	; 0x78
 8109ab2:	4691      	mov	r9, r2
 8109ab4:	4680      	mov	r8, r0
 8109ab6:	460c      	mov	r4, r1
 8109ab8:	469a      	mov	sl, r3
 8109aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8109abe:	d807      	bhi.n	8109ad0 <_printf_i+0x28>
 8109ac0:	2f62      	cmp	r7, #98	; 0x62
 8109ac2:	d80a      	bhi.n	8109ada <_printf_i+0x32>
 8109ac4:	2f00      	cmp	r7, #0
 8109ac6:	f000 80d8 	beq.w	8109c7a <_printf_i+0x1d2>
 8109aca:	2f58      	cmp	r7, #88	; 0x58
 8109acc:	f000 80a3 	beq.w	8109c16 <_printf_i+0x16e>
 8109ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8109ad8:	e03a      	b.n	8109b50 <_printf_i+0xa8>
 8109ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8109ade:	2b15      	cmp	r3, #21
 8109ae0:	d8f6      	bhi.n	8109ad0 <_printf_i+0x28>
 8109ae2:	a101      	add	r1, pc, #4	; (adr r1, 8109ae8 <_printf_i+0x40>)
 8109ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8109ae8:	08109b41 	.word	0x08109b41
 8109aec:	08109b55 	.word	0x08109b55
 8109af0:	08109ad1 	.word	0x08109ad1
 8109af4:	08109ad1 	.word	0x08109ad1
 8109af8:	08109ad1 	.word	0x08109ad1
 8109afc:	08109ad1 	.word	0x08109ad1
 8109b00:	08109b55 	.word	0x08109b55
 8109b04:	08109ad1 	.word	0x08109ad1
 8109b08:	08109ad1 	.word	0x08109ad1
 8109b0c:	08109ad1 	.word	0x08109ad1
 8109b10:	08109ad1 	.word	0x08109ad1
 8109b14:	08109c61 	.word	0x08109c61
 8109b18:	08109b85 	.word	0x08109b85
 8109b1c:	08109c43 	.word	0x08109c43
 8109b20:	08109ad1 	.word	0x08109ad1
 8109b24:	08109ad1 	.word	0x08109ad1
 8109b28:	08109c83 	.word	0x08109c83
 8109b2c:	08109ad1 	.word	0x08109ad1
 8109b30:	08109b85 	.word	0x08109b85
 8109b34:	08109ad1 	.word	0x08109ad1
 8109b38:	08109ad1 	.word	0x08109ad1
 8109b3c:	08109c4b 	.word	0x08109c4b
 8109b40:	682b      	ldr	r3, [r5, #0]
 8109b42:	1d1a      	adds	r2, r3, #4
 8109b44:	681b      	ldr	r3, [r3, #0]
 8109b46:	602a      	str	r2, [r5, #0]
 8109b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8109b50:	2301      	movs	r3, #1
 8109b52:	e0a3      	b.n	8109c9c <_printf_i+0x1f4>
 8109b54:	6820      	ldr	r0, [r4, #0]
 8109b56:	6829      	ldr	r1, [r5, #0]
 8109b58:	0606      	lsls	r6, r0, #24
 8109b5a:	f101 0304 	add.w	r3, r1, #4
 8109b5e:	d50a      	bpl.n	8109b76 <_printf_i+0xce>
 8109b60:	680e      	ldr	r6, [r1, #0]
 8109b62:	602b      	str	r3, [r5, #0]
 8109b64:	2e00      	cmp	r6, #0
 8109b66:	da03      	bge.n	8109b70 <_printf_i+0xc8>
 8109b68:	232d      	movs	r3, #45	; 0x2d
 8109b6a:	4276      	negs	r6, r6
 8109b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109b70:	485e      	ldr	r0, [pc, #376]	; (8109cec <_printf_i+0x244>)
 8109b72:	230a      	movs	r3, #10
 8109b74:	e019      	b.n	8109baa <_printf_i+0x102>
 8109b76:	680e      	ldr	r6, [r1, #0]
 8109b78:	602b      	str	r3, [r5, #0]
 8109b7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8109b7e:	bf18      	it	ne
 8109b80:	b236      	sxthne	r6, r6
 8109b82:	e7ef      	b.n	8109b64 <_printf_i+0xbc>
 8109b84:	682b      	ldr	r3, [r5, #0]
 8109b86:	6820      	ldr	r0, [r4, #0]
 8109b88:	1d19      	adds	r1, r3, #4
 8109b8a:	6029      	str	r1, [r5, #0]
 8109b8c:	0601      	lsls	r1, r0, #24
 8109b8e:	d501      	bpl.n	8109b94 <_printf_i+0xec>
 8109b90:	681e      	ldr	r6, [r3, #0]
 8109b92:	e002      	b.n	8109b9a <_printf_i+0xf2>
 8109b94:	0646      	lsls	r6, r0, #25
 8109b96:	d5fb      	bpl.n	8109b90 <_printf_i+0xe8>
 8109b98:	881e      	ldrh	r6, [r3, #0]
 8109b9a:	4854      	ldr	r0, [pc, #336]	; (8109cec <_printf_i+0x244>)
 8109b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8109b9e:	bf0c      	ite	eq
 8109ba0:	2308      	moveq	r3, #8
 8109ba2:	230a      	movne	r3, #10
 8109ba4:	2100      	movs	r1, #0
 8109ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8109baa:	6865      	ldr	r5, [r4, #4]
 8109bac:	60a5      	str	r5, [r4, #8]
 8109bae:	2d00      	cmp	r5, #0
 8109bb0:	bfa2      	ittt	ge
 8109bb2:	6821      	ldrge	r1, [r4, #0]
 8109bb4:	f021 0104 	bicge.w	r1, r1, #4
 8109bb8:	6021      	strge	r1, [r4, #0]
 8109bba:	b90e      	cbnz	r6, 8109bc0 <_printf_i+0x118>
 8109bbc:	2d00      	cmp	r5, #0
 8109bbe:	d04d      	beq.n	8109c5c <_printf_i+0x1b4>
 8109bc0:	4615      	mov	r5, r2
 8109bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8109bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8109bca:	5dc7      	ldrb	r7, [r0, r7]
 8109bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8109bd0:	4637      	mov	r7, r6
 8109bd2:	42bb      	cmp	r3, r7
 8109bd4:	460e      	mov	r6, r1
 8109bd6:	d9f4      	bls.n	8109bc2 <_printf_i+0x11a>
 8109bd8:	2b08      	cmp	r3, #8
 8109bda:	d10b      	bne.n	8109bf4 <_printf_i+0x14c>
 8109bdc:	6823      	ldr	r3, [r4, #0]
 8109bde:	07de      	lsls	r6, r3, #31
 8109be0:	d508      	bpl.n	8109bf4 <_printf_i+0x14c>
 8109be2:	6923      	ldr	r3, [r4, #16]
 8109be4:	6861      	ldr	r1, [r4, #4]
 8109be6:	4299      	cmp	r1, r3
 8109be8:	bfde      	ittt	le
 8109bea:	2330      	movle	r3, #48	; 0x30
 8109bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8109bf0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8109bf4:	1b52      	subs	r2, r2, r5
 8109bf6:	6122      	str	r2, [r4, #16]
 8109bf8:	f8cd a000 	str.w	sl, [sp]
 8109bfc:	464b      	mov	r3, r9
 8109bfe:	aa03      	add	r2, sp, #12
 8109c00:	4621      	mov	r1, r4
 8109c02:	4640      	mov	r0, r8
 8109c04:	f7ff fee2 	bl	81099cc <_printf_common>
 8109c08:	3001      	adds	r0, #1
 8109c0a:	d14c      	bne.n	8109ca6 <_printf_i+0x1fe>
 8109c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8109c10:	b004      	add	sp, #16
 8109c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109c16:	4835      	ldr	r0, [pc, #212]	; (8109cec <_printf_i+0x244>)
 8109c18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8109c1c:	6829      	ldr	r1, [r5, #0]
 8109c1e:	6823      	ldr	r3, [r4, #0]
 8109c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8109c24:	6029      	str	r1, [r5, #0]
 8109c26:	061d      	lsls	r5, r3, #24
 8109c28:	d514      	bpl.n	8109c54 <_printf_i+0x1ac>
 8109c2a:	07df      	lsls	r7, r3, #31
 8109c2c:	bf44      	itt	mi
 8109c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8109c32:	6023      	strmi	r3, [r4, #0]
 8109c34:	b91e      	cbnz	r6, 8109c3e <_printf_i+0x196>
 8109c36:	6823      	ldr	r3, [r4, #0]
 8109c38:	f023 0320 	bic.w	r3, r3, #32
 8109c3c:	6023      	str	r3, [r4, #0]
 8109c3e:	2310      	movs	r3, #16
 8109c40:	e7b0      	b.n	8109ba4 <_printf_i+0xfc>
 8109c42:	6823      	ldr	r3, [r4, #0]
 8109c44:	f043 0320 	orr.w	r3, r3, #32
 8109c48:	6023      	str	r3, [r4, #0]
 8109c4a:	2378      	movs	r3, #120	; 0x78
 8109c4c:	4828      	ldr	r0, [pc, #160]	; (8109cf0 <_printf_i+0x248>)
 8109c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8109c52:	e7e3      	b.n	8109c1c <_printf_i+0x174>
 8109c54:	0659      	lsls	r1, r3, #25
 8109c56:	bf48      	it	mi
 8109c58:	b2b6      	uxthmi	r6, r6
 8109c5a:	e7e6      	b.n	8109c2a <_printf_i+0x182>
 8109c5c:	4615      	mov	r5, r2
 8109c5e:	e7bb      	b.n	8109bd8 <_printf_i+0x130>
 8109c60:	682b      	ldr	r3, [r5, #0]
 8109c62:	6826      	ldr	r6, [r4, #0]
 8109c64:	6961      	ldr	r1, [r4, #20]
 8109c66:	1d18      	adds	r0, r3, #4
 8109c68:	6028      	str	r0, [r5, #0]
 8109c6a:	0635      	lsls	r5, r6, #24
 8109c6c:	681b      	ldr	r3, [r3, #0]
 8109c6e:	d501      	bpl.n	8109c74 <_printf_i+0x1cc>
 8109c70:	6019      	str	r1, [r3, #0]
 8109c72:	e002      	b.n	8109c7a <_printf_i+0x1d2>
 8109c74:	0670      	lsls	r0, r6, #25
 8109c76:	d5fb      	bpl.n	8109c70 <_printf_i+0x1c8>
 8109c78:	8019      	strh	r1, [r3, #0]
 8109c7a:	2300      	movs	r3, #0
 8109c7c:	6123      	str	r3, [r4, #16]
 8109c7e:	4615      	mov	r5, r2
 8109c80:	e7ba      	b.n	8109bf8 <_printf_i+0x150>
 8109c82:	682b      	ldr	r3, [r5, #0]
 8109c84:	1d1a      	adds	r2, r3, #4
 8109c86:	602a      	str	r2, [r5, #0]
 8109c88:	681d      	ldr	r5, [r3, #0]
 8109c8a:	6862      	ldr	r2, [r4, #4]
 8109c8c:	2100      	movs	r1, #0
 8109c8e:	4628      	mov	r0, r5
 8109c90:	f7f6 fb2e 	bl	81002f0 <memchr>
 8109c94:	b108      	cbz	r0, 8109c9a <_printf_i+0x1f2>
 8109c96:	1b40      	subs	r0, r0, r5
 8109c98:	6060      	str	r0, [r4, #4]
 8109c9a:	6863      	ldr	r3, [r4, #4]
 8109c9c:	6123      	str	r3, [r4, #16]
 8109c9e:	2300      	movs	r3, #0
 8109ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109ca4:	e7a8      	b.n	8109bf8 <_printf_i+0x150>
 8109ca6:	6923      	ldr	r3, [r4, #16]
 8109ca8:	462a      	mov	r2, r5
 8109caa:	4649      	mov	r1, r9
 8109cac:	4640      	mov	r0, r8
 8109cae:	47d0      	blx	sl
 8109cb0:	3001      	adds	r0, #1
 8109cb2:	d0ab      	beq.n	8109c0c <_printf_i+0x164>
 8109cb4:	6823      	ldr	r3, [r4, #0]
 8109cb6:	079b      	lsls	r3, r3, #30
 8109cb8:	d413      	bmi.n	8109ce2 <_printf_i+0x23a>
 8109cba:	68e0      	ldr	r0, [r4, #12]
 8109cbc:	9b03      	ldr	r3, [sp, #12]
 8109cbe:	4298      	cmp	r0, r3
 8109cc0:	bfb8      	it	lt
 8109cc2:	4618      	movlt	r0, r3
 8109cc4:	e7a4      	b.n	8109c10 <_printf_i+0x168>
 8109cc6:	2301      	movs	r3, #1
 8109cc8:	4632      	mov	r2, r6
 8109cca:	4649      	mov	r1, r9
 8109ccc:	4640      	mov	r0, r8
 8109cce:	47d0      	blx	sl
 8109cd0:	3001      	adds	r0, #1
 8109cd2:	d09b      	beq.n	8109c0c <_printf_i+0x164>
 8109cd4:	3501      	adds	r5, #1
 8109cd6:	68e3      	ldr	r3, [r4, #12]
 8109cd8:	9903      	ldr	r1, [sp, #12]
 8109cda:	1a5b      	subs	r3, r3, r1
 8109cdc:	42ab      	cmp	r3, r5
 8109cde:	dcf2      	bgt.n	8109cc6 <_printf_i+0x21e>
 8109ce0:	e7eb      	b.n	8109cba <_printf_i+0x212>
 8109ce2:	2500      	movs	r5, #0
 8109ce4:	f104 0619 	add.w	r6, r4, #25
 8109ce8:	e7f5      	b.n	8109cd6 <_printf_i+0x22e>
 8109cea:	bf00      	nop
 8109cec:	0810e0e2 	.word	0x0810e0e2
 8109cf0:	0810e0f3 	.word	0x0810e0f3

08109cf4 <_scanf_float>:
 8109cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109cf8:	b087      	sub	sp, #28
 8109cfa:	4617      	mov	r7, r2
 8109cfc:	9303      	str	r3, [sp, #12]
 8109cfe:	688b      	ldr	r3, [r1, #8]
 8109d00:	1e5a      	subs	r2, r3, #1
 8109d02:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8109d06:	bf83      	ittte	hi
 8109d08:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8109d0c:	195b      	addhi	r3, r3, r5
 8109d0e:	9302      	strhi	r3, [sp, #8]
 8109d10:	2300      	movls	r3, #0
 8109d12:	bf86      	itte	hi
 8109d14:	f240 135d 	movwhi	r3, #349	; 0x15d
 8109d18:	608b      	strhi	r3, [r1, #8]
 8109d1a:	9302      	strls	r3, [sp, #8]
 8109d1c:	680b      	ldr	r3, [r1, #0]
 8109d1e:	468b      	mov	fp, r1
 8109d20:	2500      	movs	r5, #0
 8109d22:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8109d26:	f84b 3b1c 	str.w	r3, [fp], #28
 8109d2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8109d2e:	4680      	mov	r8, r0
 8109d30:	460c      	mov	r4, r1
 8109d32:	465e      	mov	r6, fp
 8109d34:	46aa      	mov	sl, r5
 8109d36:	46a9      	mov	r9, r5
 8109d38:	9501      	str	r5, [sp, #4]
 8109d3a:	68a2      	ldr	r2, [r4, #8]
 8109d3c:	b152      	cbz	r2, 8109d54 <_scanf_float+0x60>
 8109d3e:	683b      	ldr	r3, [r7, #0]
 8109d40:	781b      	ldrb	r3, [r3, #0]
 8109d42:	2b4e      	cmp	r3, #78	; 0x4e
 8109d44:	d864      	bhi.n	8109e10 <_scanf_float+0x11c>
 8109d46:	2b40      	cmp	r3, #64	; 0x40
 8109d48:	d83c      	bhi.n	8109dc4 <_scanf_float+0xd0>
 8109d4a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8109d4e:	b2c8      	uxtb	r0, r1
 8109d50:	280e      	cmp	r0, #14
 8109d52:	d93a      	bls.n	8109dca <_scanf_float+0xd6>
 8109d54:	f1b9 0f00 	cmp.w	r9, #0
 8109d58:	d003      	beq.n	8109d62 <_scanf_float+0x6e>
 8109d5a:	6823      	ldr	r3, [r4, #0]
 8109d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109d60:	6023      	str	r3, [r4, #0]
 8109d62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8109d66:	f1ba 0f01 	cmp.w	sl, #1
 8109d6a:	f200 8113 	bhi.w	8109f94 <_scanf_float+0x2a0>
 8109d6e:	455e      	cmp	r6, fp
 8109d70:	f200 8105 	bhi.w	8109f7e <_scanf_float+0x28a>
 8109d74:	2501      	movs	r5, #1
 8109d76:	4628      	mov	r0, r5
 8109d78:	b007      	add	sp, #28
 8109d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109d7e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8109d82:	2a0d      	cmp	r2, #13
 8109d84:	d8e6      	bhi.n	8109d54 <_scanf_float+0x60>
 8109d86:	a101      	add	r1, pc, #4	; (adr r1, 8109d8c <_scanf_float+0x98>)
 8109d88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8109d8c:	08109ecb 	.word	0x08109ecb
 8109d90:	08109d55 	.word	0x08109d55
 8109d94:	08109d55 	.word	0x08109d55
 8109d98:	08109d55 	.word	0x08109d55
 8109d9c:	08109f2b 	.word	0x08109f2b
 8109da0:	08109f03 	.word	0x08109f03
 8109da4:	08109d55 	.word	0x08109d55
 8109da8:	08109d55 	.word	0x08109d55
 8109dac:	08109ed9 	.word	0x08109ed9
 8109db0:	08109d55 	.word	0x08109d55
 8109db4:	08109d55 	.word	0x08109d55
 8109db8:	08109d55 	.word	0x08109d55
 8109dbc:	08109d55 	.word	0x08109d55
 8109dc0:	08109e91 	.word	0x08109e91
 8109dc4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8109dc8:	e7db      	b.n	8109d82 <_scanf_float+0x8e>
 8109dca:	290e      	cmp	r1, #14
 8109dcc:	d8c2      	bhi.n	8109d54 <_scanf_float+0x60>
 8109dce:	a001      	add	r0, pc, #4	; (adr r0, 8109dd4 <_scanf_float+0xe0>)
 8109dd0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8109dd4:	08109e83 	.word	0x08109e83
 8109dd8:	08109d55 	.word	0x08109d55
 8109ddc:	08109e83 	.word	0x08109e83
 8109de0:	08109f17 	.word	0x08109f17
 8109de4:	08109d55 	.word	0x08109d55
 8109de8:	08109e31 	.word	0x08109e31
 8109dec:	08109e6d 	.word	0x08109e6d
 8109df0:	08109e6d 	.word	0x08109e6d
 8109df4:	08109e6d 	.word	0x08109e6d
 8109df8:	08109e6d 	.word	0x08109e6d
 8109dfc:	08109e6d 	.word	0x08109e6d
 8109e00:	08109e6d 	.word	0x08109e6d
 8109e04:	08109e6d 	.word	0x08109e6d
 8109e08:	08109e6d 	.word	0x08109e6d
 8109e0c:	08109e6d 	.word	0x08109e6d
 8109e10:	2b6e      	cmp	r3, #110	; 0x6e
 8109e12:	d809      	bhi.n	8109e28 <_scanf_float+0x134>
 8109e14:	2b60      	cmp	r3, #96	; 0x60
 8109e16:	d8b2      	bhi.n	8109d7e <_scanf_float+0x8a>
 8109e18:	2b54      	cmp	r3, #84	; 0x54
 8109e1a:	d077      	beq.n	8109f0c <_scanf_float+0x218>
 8109e1c:	2b59      	cmp	r3, #89	; 0x59
 8109e1e:	d199      	bne.n	8109d54 <_scanf_float+0x60>
 8109e20:	2d07      	cmp	r5, #7
 8109e22:	d197      	bne.n	8109d54 <_scanf_float+0x60>
 8109e24:	2508      	movs	r5, #8
 8109e26:	e029      	b.n	8109e7c <_scanf_float+0x188>
 8109e28:	2b74      	cmp	r3, #116	; 0x74
 8109e2a:	d06f      	beq.n	8109f0c <_scanf_float+0x218>
 8109e2c:	2b79      	cmp	r3, #121	; 0x79
 8109e2e:	e7f6      	b.n	8109e1e <_scanf_float+0x12a>
 8109e30:	6821      	ldr	r1, [r4, #0]
 8109e32:	05c8      	lsls	r0, r1, #23
 8109e34:	d51a      	bpl.n	8109e6c <_scanf_float+0x178>
 8109e36:	9b02      	ldr	r3, [sp, #8]
 8109e38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8109e3c:	6021      	str	r1, [r4, #0]
 8109e3e:	f109 0901 	add.w	r9, r9, #1
 8109e42:	b11b      	cbz	r3, 8109e4c <_scanf_float+0x158>
 8109e44:	3b01      	subs	r3, #1
 8109e46:	3201      	adds	r2, #1
 8109e48:	9302      	str	r3, [sp, #8]
 8109e4a:	60a2      	str	r2, [r4, #8]
 8109e4c:	68a3      	ldr	r3, [r4, #8]
 8109e4e:	3b01      	subs	r3, #1
 8109e50:	60a3      	str	r3, [r4, #8]
 8109e52:	6923      	ldr	r3, [r4, #16]
 8109e54:	3301      	adds	r3, #1
 8109e56:	6123      	str	r3, [r4, #16]
 8109e58:	687b      	ldr	r3, [r7, #4]
 8109e5a:	3b01      	subs	r3, #1
 8109e5c:	2b00      	cmp	r3, #0
 8109e5e:	607b      	str	r3, [r7, #4]
 8109e60:	f340 8084 	ble.w	8109f6c <_scanf_float+0x278>
 8109e64:	683b      	ldr	r3, [r7, #0]
 8109e66:	3301      	adds	r3, #1
 8109e68:	603b      	str	r3, [r7, #0]
 8109e6a:	e766      	b.n	8109d3a <_scanf_float+0x46>
 8109e6c:	eb1a 0f05 	cmn.w	sl, r5
 8109e70:	f47f af70 	bne.w	8109d54 <_scanf_float+0x60>
 8109e74:	6822      	ldr	r2, [r4, #0]
 8109e76:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8109e7a:	6022      	str	r2, [r4, #0]
 8109e7c:	f806 3b01 	strb.w	r3, [r6], #1
 8109e80:	e7e4      	b.n	8109e4c <_scanf_float+0x158>
 8109e82:	6822      	ldr	r2, [r4, #0]
 8109e84:	0610      	lsls	r0, r2, #24
 8109e86:	f57f af65 	bpl.w	8109d54 <_scanf_float+0x60>
 8109e8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8109e8e:	e7f4      	b.n	8109e7a <_scanf_float+0x186>
 8109e90:	f1ba 0f00 	cmp.w	sl, #0
 8109e94:	d10e      	bne.n	8109eb4 <_scanf_float+0x1c0>
 8109e96:	f1b9 0f00 	cmp.w	r9, #0
 8109e9a:	d10e      	bne.n	8109eba <_scanf_float+0x1c6>
 8109e9c:	6822      	ldr	r2, [r4, #0]
 8109e9e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8109ea2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8109ea6:	d108      	bne.n	8109eba <_scanf_float+0x1c6>
 8109ea8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109eac:	6022      	str	r2, [r4, #0]
 8109eae:	f04f 0a01 	mov.w	sl, #1
 8109eb2:	e7e3      	b.n	8109e7c <_scanf_float+0x188>
 8109eb4:	f1ba 0f02 	cmp.w	sl, #2
 8109eb8:	d055      	beq.n	8109f66 <_scanf_float+0x272>
 8109eba:	2d01      	cmp	r5, #1
 8109ebc:	d002      	beq.n	8109ec4 <_scanf_float+0x1d0>
 8109ebe:	2d04      	cmp	r5, #4
 8109ec0:	f47f af48 	bne.w	8109d54 <_scanf_float+0x60>
 8109ec4:	3501      	adds	r5, #1
 8109ec6:	b2ed      	uxtb	r5, r5
 8109ec8:	e7d8      	b.n	8109e7c <_scanf_float+0x188>
 8109eca:	f1ba 0f01 	cmp.w	sl, #1
 8109ece:	f47f af41 	bne.w	8109d54 <_scanf_float+0x60>
 8109ed2:	f04f 0a02 	mov.w	sl, #2
 8109ed6:	e7d1      	b.n	8109e7c <_scanf_float+0x188>
 8109ed8:	b97d      	cbnz	r5, 8109efa <_scanf_float+0x206>
 8109eda:	f1b9 0f00 	cmp.w	r9, #0
 8109ede:	f47f af3c 	bne.w	8109d5a <_scanf_float+0x66>
 8109ee2:	6822      	ldr	r2, [r4, #0]
 8109ee4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8109ee8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8109eec:	f47f af39 	bne.w	8109d62 <_scanf_float+0x6e>
 8109ef0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109ef4:	6022      	str	r2, [r4, #0]
 8109ef6:	2501      	movs	r5, #1
 8109ef8:	e7c0      	b.n	8109e7c <_scanf_float+0x188>
 8109efa:	2d03      	cmp	r5, #3
 8109efc:	d0e2      	beq.n	8109ec4 <_scanf_float+0x1d0>
 8109efe:	2d05      	cmp	r5, #5
 8109f00:	e7de      	b.n	8109ec0 <_scanf_float+0x1cc>
 8109f02:	2d02      	cmp	r5, #2
 8109f04:	f47f af26 	bne.w	8109d54 <_scanf_float+0x60>
 8109f08:	2503      	movs	r5, #3
 8109f0a:	e7b7      	b.n	8109e7c <_scanf_float+0x188>
 8109f0c:	2d06      	cmp	r5, #6
 8109f0e:	f47f af21 	bne.w	8109d54 <_scanf_float+0x60>
 8109f12:	2507      	movs	r5, #7
 8109f14:	e7b2      	b.n	8109e7c <_scanf_float+0x188>
 8109f16:	6822      	ldr	r2, [r4, #0]
 8109f18:	0591      	lsls	r1, r2, #22
 8109f1a:	f57f af1b 	bpl.w	8109d54 <_scanf_float+0x60>
 8109f1e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8109f22:	6022      	str	r2, [r4, #0]
 8109f24:	f8cd 9004 	str.w	r9, [sp, #4]
 8109f28:	e7a8      	b.n	8109e7c <_scanf_float+0x188>
 8109f2a:	6822      	ldr	r2, [r4, #0]
 8109f2c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8109f30:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8109f34:	d006      	beq.n	8109f44 <_scanf_float+0x250>
 8109f36:	0550      	lsls	r0, r2, #21
 8109f38:	f57f af0c 	bpl.w	8109d54 <_scanf_float+0x60>
 8109f3c:	f1b9 0f00 	cmp.w	r9, #0
 8109f40:	f43f af0f 	beq.w	8109d62 <_scanf_float+0x6e>
 8109f44:	0591      	lsls	r1, r2, #22
 8109f46:	bf58      	it	pl
 8109f48:	9901      	ldrpl	r1, [sp, #4]
 8109f4a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109f4e:	bf58      	it	pl
 8109f50:	eba9 0101 	subpl.w	r1, r9, r1
 8109f54:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8109f58:	bf58      	it	pl
 8109f5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8109f5e:	6022      	str	r2, [r4, #0]
 8109f60:	f04f 0900 	mov.w	r9, #0
 8109f64:	e78a      	b.n	8109e7c <_scanf_float+0x188>
 8109f66:	f04f 0a03 	mov.w	sl, #3
 8109f6a:	e787      	b.n	8109e7c <_scanf_float+0x188>
 8109f6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8109f70:	4639      	mov	r1, r7
 8109f72:	4640      	mov	r0, r8
 8109f74:	4798      	blx	r3
 8109f76:	2800      	cmp	r0, #0
 8109f78:	f43f aedf 	beq.w	8109d3a <_scanf_float+0x46>
 8109f7c:	e6ea      	b.n	8109d54 <_scanf_float+0x60>
 8109f7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109f82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109f86:	463a      	mov	r2, r7
 8109f88:	4640      	mov	r0, r8
 8109f8a:	4798      	blx	r3
 8109f8c:	6923      	ldr	r3, [r4, #16]
 8109f8e:	3b01      	subs	r3, #1
 8109f90:	6123      	str	r3, [r4, #16]
 8109f92:	e6ec      	b.n	8109d6e <_scanf_float+0x7a>
 8109f94:	1e6b      	subs	r3, r5, #1
 8109f96:	2b06      	cmp	r3, #6
 8109f98:	d825      	bhi.n	8109fe6 <_scanf_float+0x2f2>
 8109f9a:	2d02      	cmp	r5, #2
 8109f9c:	d836      	bhi.n	810a00c <_scanf_float+0x318>
 8109f9e:	455e      	cmp	r6, fp
 8109fa0:	f67f aee8 	bls.w	8109d74 <_scanf_float+0x80>
 8109fa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109fa8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109fac:	463a      	mov	r2, r7
 8109fae:	4640      	mov	r0, r8
 8109fb0:	4798      	blx	r3
 8109fb2:	6923      	ldr	r3, [r4, #16]
 8109fb4:	3b01      	subs	r3, #1
 8109fb6:	6123      	str	r3, [r4, #16]
 8109fb8:	e7f1      	b.n	8109f9e <_scanf_float+0x2aa>
 8109fba:	9802      	ldr	r0, [sp, #8]
 8109fbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109fc0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8109fc4:	9002      	str	r0, [sp, #8]
 8109fc6:	463a      	mov	r2, r7
 8109fc8:	4640      	mov	r0, r8
 8109fca:	4798      	blx	r3
 8109fcc:	6923      	ldr	r3, [r4, #16]
 8109fce:	3b01      	subs	r3, #1
 8109fd0:	6123      	str	r3, [r4, #16]
 8109fd2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8109fd6:	fa5f fa8a 	uxtb.w	sl, sl
 8109fda:	f1ba 0f02 	cmp.w	sl, #2
 8109fde:	d1ec      	bne.n	8109fba <_scanf_float+0x2c6>
 8109fe0:	3d03      	subs	r5, #3
 8109fe2:	b2ed      	uxtb	r5, r5
 8109fe4:	1b76      	subs	r6, r6, r5
 8109fe6:	6823      	ldr	r3, [r4, #0]
 8109fe8:	05da      	lsls	r2, r3, #23
 8109fea:	d52f      	bpl.n	810a04c <_scanf_float+0x358>
 8109fec:	055b      	lsls	r3, r3, #21
 8109fee:	d510      	bpl.n	810a012 <_scanf_float+0x31e>
 8109ff0:	455e      	cmp	r6, fp
 8109ff2:	f67f aebf 	bls.w	8109d74 <_scanf_float+0x80>
 8109ff6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109ffa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109ffe:	463a      	mov	r2, r7
 810a000:	4640      	mov	r0, r8
 810a002:	4798      	blx	r3
 810a004:	6923      	ldr	r3, [r4, #16]
 810a006:	3b01      	subs	r3, #1
 810a008:	6123      	str	r3, [r4, #16]
 810a00a:	e7f1      	b.n	8109ff0 <_scanf_float+0x2fc>
 810a00c:	46aa      	mov	sl, r5
 810a00e:	9602      	str	r6, [sp, #8]
 810a010:	e7df      	b.n	8109fd2 <_scanf_float+0x2de>
 810a012:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810a016:	6923      	ldr	r3, [r4, #16]
 810a018:	2965      	cmp	r1, #101	; 0x65
 810a01a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 810a01e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 810a022:	6123      	str	r3, [r4, #16]
 810a024:	d00c      	beq.n	810a040 <_scanf_float+0x34c>
 810a026:	2945      	cmp	r1, #69	; 0x45
 810a028:	d00a      	beq.n	810a040 <_scanf_float+0x34c>
 810a02a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a02e:	463a      	mov	r2, r7
 810a030:	4640      	mov	r0, r8
 810a032:	4798      	blx	r3
 810a034:	6923      	ldr	r3, [r4, #16]
 810a036:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810a03a:	3b01      	subs	r3, #1
 810a03c:	1eb5      	subs	r5, r6, #2
 810a03e:	6123      	str	r3, [r4, #16]
 810a040:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a044:	463a      	mov	r2, r7
 810a046:	4640      	mov	r0, r8
 810a048:	4798      	blx	r3
 810a04a:	462e      	mov	r6, r5
 810a04c:	6825      	ldr	r5, [r4, #0]
 810a04e:	f015 0510 	ands.w	r5, r5, #16
 810a052:	d159      	bne.n	810a108 <_scanf_float+0x414>
 810a054:	7035      	strb	r5, [r6, #0]
 810a056:	6823      	ldr	r3, [r4, #0]
 810a058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810a05c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810a060:	d11b      	bne.n	810a09a <_scanf_float+0x3a6>
 810a062:	9b01      	ldr	r3, [sp, #4]
 810a064:	454b      	cmp	r3, r9
 810a066:	eba3 0209 	sub.w	r2, r3, r9
 810a06a:	d123      	bne.n	810a0b4 <_scanf_float+0x3c0>
 810a06c:	2200      	movs	r2, #0
 810a06e:	4659      	mov	r1, fp
 810a070:	4640      	mov	r0, r8
 810a072:	f000 ff27 	bl	810aec4 <_strtod_r>
 810a076:	6822      	ldr	r2, [r4, #0]
 810a078:	9b03      	ldr	r3, [sp, #12]
 810a07a:	f012 0f02 	tst.w	r2, #2
 810a07e:	ec57 6b10 	vmov	r6, r7, d0
 810a082:	681b      	ldr	r3, [r3, #0]
 810a084:	d021      	beq.n	810a0ca <_scanf_float+0x3d6>
 810a086:	9903      	ldr	r1, [sp, #12]
 810a088:	1d1a      	adds	r2, r3, #4
 810a08a:	600a      	str	r2, [r1, #0]
 810a08c:	681b      	ldr	r3, [r3, #0]
 810a08e:	e9c3 6700 	strd	r6, r7, [r3]
 810a092:	68e3      	ldr	r3, [r4, #12]
 810a094:	3301      	adds	r3, #1
 810a096:	60e3      	str	r3, [r4, #12]
 810a098:	e66d      	b.n	8109d76 <_scanf_float+0x82>
 810a09a:	9b04      	ldr	r3, [sp, #16]
 810a09c:	2b00      	cmp	r3, #0
 810a09e:	d0e5      	beq.n	810a06c <_scanf_float+0x378>
 810a0a0:	9905      	ldr	r1, [sp, #20]
 810a0a2:	230a      	movs	r3, #10
 810a0a4:	462a      	mov	r2, r5
 810a0a6:	3101      	adds	r1, #1
 810a0a8:	4640      	mov	r0, r8
 810a0aa:	f000 ff93 	bl	810afd4 <_strtol_r>
 810a0ae:	9b04      	ldr	r3, [sp, #16]
 810a0b0:	9e05      	ldr	r6, [sp, #20]
 810a0b2:	1ac2      	subs	r2, r0, r3
 810a0b4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810a0b8:	429e      	cmp	r6, r3
 810a0ba:	bf28      	it	cs
 810a0bc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 810a0c0:	4912      	ldr	r1, [pc, #72]	; (810a10c <_scanf_float+0x418>)
 810a0c2:	4630      	mov	r0, r6
 810a0c4:	f000 f8ba 	bl	810a23c <siprintf>
 810a0c8:	e7d0      	b.n	810a06c <_scanf_float+0x378>
 810a0ca:	9903      	ldr	r1, [sp, #12]
 810a0cc:	f012 0f04 	tst.w	r2, #4
 810a0d0:	f103 0204 	add.w	r2, r3, #4
 810a0d4:	600a      	str	r2, [r1, #0]
 810a0d6:	d1d9      	bne.n	810a08c <_scanf_float+0x398>
 810a0d8:	f8d3 8000 	ldr.w	r8, [r3]
 810a0dc:	ee10 2a10 	vmov	r2, s0
 810a0e0:	ee10 0a10 	vmov	r0, s0
 810a0e4:	463b      	mov	r3, r7
 810a0e6:	4639      	mov	r1, r7
 810a0e8:	f7f6 fda8 	bl	8100c3c <__aeabi_dcmpun>
 810a0ec:	b128      	cbz	r0, 810a0fa <_scanf_float+0x406>
 810a0ee:	4808      	ldr	r0, [pc, #32]	; (810a110 <_scanf_float+0x41c>)
 810a0f0:	f000 f89e 	bl	810a230 <nanf>
 810a0f4:	ed88 0a00 	vstr	s0, [r8]
 810a0f8:	e7cb      	b.n	810a092 <_scanf_float+0x39e>
 810a0fa:	4630      	mov	r0, r6
 810a0fc:	4639      	mov	r1, r7
 810a0fe:	f7f6 fdfb 	bl	8100cf8 <__aeabi_d2f>
 810a102:	f8c8 0000 	str.w	r0, [r8]
 810a106:	e7c4      	b.n	810a092 <_scanf_float+0x39e>
 810a108:	2500      	movs	r5, #0
 810a10a:	e634      	b.n	8109d76 <_scanf_float+0x82>
 810a10c:	0810e104 	.word	0x0810e104
 810a110:	0810e578 	.word	0x0810e578

0810a114 <iprintf>:
 810a114:	b40f      	push	{r0, r1, r2, r3}
 810a116:	4b0a      	ldr	r3, [pc, #40]	; (810a140 <iprintf+0x2c>)
 810a118:	b513      	push	{r0, r1, r4, lr}
 810a11a:	681c      	ldr	r4, [r3, #0]
 810a11c:	b124      	cbz	r4, 810a128 <iprintf+0x14>
 810a11e:	69a3      	ldr	r3, [r4, #24]
 810a120:	b913      	cbnz	r3, 810a128 <iprintf+0x14>
 810a122:	4620      	mov	r0, r4
 810a124:	f001 ffac 	bl	810c080 <__sinit>
 810a128:	ab05      	add	r3, sp, #20
 810a12a:	9a04      	ldr	r2, [sp, #16]
 810a12c:	68a1      	ldr	r1, [r4, #8]
 810a12e:	9301      	str	r3, [sp, #4]
 810a130:	4620      	mov	r0, r4
 810a132:	f003 fb75 	bl	810d820 <_vfiprintf_r>
 810a136:	b002      	add	sp, #8
 810a138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a13c:	b004      	add	sp, #16
 810a13e:	4770      	bx	lr
 810a140:	10000020 	.word	0x10000020

0810a144 <_puts_r>:
 810a144:	b570      	push	{r4, r5, r6, lr}
 810a146:	460e      	mov	r6, r1
 810a148:	4605      	mov	r5, r0
 810a14a:	b118      	cbz	r0, 810a154 <_puts_r+0x10>
 810a14c:	6983      	ldr	r3, [r0, #24]
 810a14e:	b90b      	cbnz	r3, 810a154 <_puts_r+0x10>
 810a150:	f001 ff96 	bl	810c080 <__sinit>
 810a154:	69ab      	ldr	r3, [r5, #24]
 810a156:	68ac      	ldr	r4, [r5, #8]
 810a158:	b913      	cbnz	r3, 810a160 <_puts_r+0x1c>
 810a15a:	4628      	mov	r0, r5
 810a15c:	f001 ff90 	bl	810c080 <__sinit>
 810a160:	4b2c      	ldr	r3, [pc, #176]	; (810a214 <_puts_r+0xd0>)
 810a162:	429c      	cmp	r4, r3
 810a164:	d120      	bne.n	810a1a8 <_puts_r+0x64>
 810a166:	686c      	ldr	r4, [r5, #4]
 810a168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a16a:	07db      	lsls	r3, r3, #31
 810a16c:	d405      	bmi.n	810a17a <_puts_r+0x36>
 810a16e:	89a3      	ldrh	r3, [r4, #12]
 810a170:	0598      	lsls	r0, r3, #22
 810a172:	d402      	bmi.n	810a17a <_puts_r+0x36>
 810a174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a176:	f002 fb94 	bl	810c8a2 <__retarget_lock_acquire_recursive>
 810a17a:	89a3      	ldrh	r3, [r4, #12]
 810a17c:	0719      	lsls	r1, r3, #28
 810a17e:	d51d      	bpl.n	810a1bc <_puts_r+0x78>
 810a180:	6923      	ldr	r3, [r4, #16]
 810a182:	b1db      	cbz	r3, 810a1bc <_puts_r+0x78>
 810a184:	3e01      	subs	r6, #1
 810a186:	68a3      	ldr	r3, [r4, #8]
 810a188:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810a18c:	3b01      	subs	r3, #1
 810a18e:	60a3      	str	r3, [r4, #8]
 810a190:	bb39      	cbnz	r1, 810a1e2 <_puts_r+0x9e>
 810a192:	2b00      	cmp	r3, #0
 810a194:	da38      	bge.n	810a208 <_puts_r+0xc4>
 810a196:	4622      	mov	r2, r4
 810a198:	210a      	movs	r1, #10
 810a19a:	4628      	mov	r0, r5
 810a19c:	f000 ff1c 	bl	810afd8 <__swbuf_r>
 810a1a0:	3001      	adds	r0, #1
 810a1a2:	d011      	beq.n	810a1c8 <_puts_r+0x84>
 810a1a4:	250a      	movs	r5, #10
 810a1a6:	e011      	b.n	810a1cc <_puts_r+0x88>
 810a1a8:	4b1b      	ldr	r3, [pc, #108]	; (810a218 <_puts_r+0xd4>)
 810a1aa:	429c      	cmp	r4, r3
 810a1ac:	d101      	bne.n	810a1b2 <_puts_r+0x6e>
 810a1ae:	68ac      	ldr	r4, [r5, #8]
 810a1b0:	e7da      	b.n	810a168 <_puts_r+0x24>
 810a1b2:	4b1a      	ldr	r3, [pc, #104]	; (810a21c <_puts_r+0xd8>)
 810a1b4:	429c      	cmp	r4, r3
 810a1b6:	bf08      	it	eq
 810a1b8:	68ec      	ldreq	r4, [r5, #12]
 810a1ba:	e7d5      	b.n	810a168 <_puts_r+0x24>
 810a1bc:	4621      	mov	r1, r4
 810a1be:	4628      	mov	r0, r5
 810a1c0:	f000 ff5c 	bl	810b07c <__swsetup_r>
 810a1c4:	2800      	cmp	r0, #0
 810a1c6:	d0dd      	beq.n	810a184 <_puts_r+0x40>
 810a1c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 810a1cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a1ce:	07da      	lsls	r2, r3, #31
 810a1d0:	d405      	bmi.n	810a1de <_puts_r+0x9a>
 810a1d2:	89a3      	ldrh	r3, [r4, #12]
 810a1d4:	059b      	lsls	r3, r3, #22
 810a1d6:	d402      	bmi.n	810a1de <_puts_r+0x9a>
 810a1d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a1da:	f002 fb63 	bl	810c8a4 <__retarget_lock_release_recursive>
 810a1de:	4628      	mov	r0, r5
 810a1e0:	bd70      	pop	{r4, r5, r6, pc}
 810a1e2:	2b00      	cmp	r3, #0
 810a1e4:	da04      	bge.n	810a1f0 <_puts_r+0xac>
 810a1e6:	69a2      	ldr	r2, [r4, #24]
 810a1e8:	429a      	cmp	r2, r3
 810a1ea:	dc06      	bgt.n	810a1fa <_puts_r+0xb6>
 810a1ec:	290a      	cmp	r1, #10
 810a1ee:	d004      	beq.n	810a1fa <_puts_r+0xb6>
 810a1f0:	6823      	ldr	r3, [r4, #0]
 810a1f2:	1c5a      	adds	r2, r3, #1
 810a1f4:	6022      	str	r2, [r4, #0]
 810a1f6:	7019      	strb	r1, [r3, #0]
 810a1f8:	e7c5      	b.n	810a186 <_puts_r+0x42>
 810a1fa:	4622      	mov	r2, r4
 810a1fc:	4628      	mov	r0, r5
 810a1fe:	f000 feeb 	bl	810afd8 <__swbuf_r>
 810a202:	3001      	adds	r0, #1
 810a204:	d1bf      	bne.n	810a186 <_puts_r+0x42>
 810a206:	e7df      	b.n	810a1c8 <_puts_r+0x84>
 810a208:	6823      	ldr	r3, [r4, #0]
 810a20a:	250a      	movs	r5, #10
 810a20c:	1c5a      	adds	r2, r3, #1
 810a20e:	6022      	str	r2, [r4, #0]
 810a210:	701d      	strb	r5, [r3, #0]
 810a212:	e7db      	b.n	810a1cc <_puts_r+0x88>
 810a214:	0810e314 	.word	0x0810e314
 810a218:	0810e334 	.word	0x0810e334
 810a21c:	0810e2f4 	.word	0x0810e2f4

0810a220 <puts>:
 810a220:	4b02      	ldr	r3, [pc, #8]	; (810a22c <puts+0xc>)
 810a222:	4601      	mov	r1, r0
 810a224:	6818      	ldr	r0, [r3, #0]
 810a226:	f7ff bf8d 	b.w	810a144 <_puts_r>
 810a22a:	bf00      	nop
 810a22c:	10000020 	.word	0x10000020

0810a230 <nanf>:
 810a230:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810a238 <nanf+0x8>
 810a234:	4770      	bx	lr
 810a236:	bf00      	nop
 810a238:	7fc00000 	.word	0x7fc00000

0810a23c <siprintf>:
 810a23c:	b40e      	push	{r1, r2, r3}
 810a23e:	b500      	push	{lr}
 810a240:	b09c      	sub	sp, #112	; 0x70
 810a242:	ab1d      	add	r3, sp, #116	; 0x74
 810a244:	9002      	str	r0, [sp, #8]
 810a246:	9006      	str	r0, [sp, #24]
 810a248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810a24c:	4809      	ldr	r0, [pc, #36]	; (810a274 <siprintf+0x38>)
 810a24e:	9107      	str	r1, [sp, #28]
 810a250:	9104      	str	r1, [sp, #16]
 810a252:	4909      	ldr	r1, [pc, #36]	; (810a278 <siprintf+0x3c>)
 810a254:	f853 2b04 	ldr.w	r2, [r3], #4
 810a258:	9105      	str	r1, [sp, #20]
 810a25a:	6800      	ldr	r0, [r0, #0]
 810a25c:	9301      	str	r3, [sp, #4]
 810a25e:	a902      	add	r1, sp, #8
 810a260:	f003 f9b4 	bl	810d5cc <_svfiprintf_r>
 810a264:	9b02      	ldr	r3, [sp, #8]
 810a266:	2200      	movs	r2, #0
 810a268:	701a      	strb	r2, [r3, #0]
 810a26a:	b01c      	add	sp, #112	; 0x70
 810a26c:	f85d eb04 	ldr.w	lr, [sp], #4
 810a270:	b003      	add	sp, #12
 810a272:	4770      	bx	lr
 810a274:	10000020 	.word	0x10000020
 810a278:	ffff0208 	.word	0xffff0208

0810a27c <sulp>:
 810a27c:	b570      	push	{r4, r5, r6, lr}
 810a27e:	4604      	mov	r4, r0
 810a280:	460d      	mov	r5, r1
 810a282:	ec45 4b10 	vmov	d0, r4, r5
 810a286:	4616      	mov	r6, r2
 810a288:	f002 fefe 	bl	810d088 <__ulp>
 810a28c:	ec51 0b10 	vmov	r0, r1, d0
 810a290:	b17e      	cbz	r6, 810a2b2 <sulp+0x36>
 810a292:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810a296:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810a29a:	2b00      	cmp	r3, #0
 810a29c:	dd09      	ble.n	810a2b2 <sulp+0x36>
 810a29e:	051b      	lsls	r3, r3, #20
 810a2a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810a2a4:	2400      	movs	r4, #0
 810a2a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810a2aa:	4622      	mov	r2, r4
 810a2ac:	462b      	mov	r3, r5
 810a2ae:	f7f6 fa2b 	bl	8100708 <__aeabi_dmul>
 810a2b2:	bd70      	pop	{r4, r5, r6, pc}
 810a2b4:	0000      	movs	r0, r0
	...

0810a2b8 <_strtod_l>:
 810a2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a2bc:	ed2d 8b02 	vpush	{d8}
 810a2c0:	b09d      	sub	sp, #116	; 0x74
 810a2c2:	461f      	mov	r7, r3
 810a2c4:	2300      	movs	r3, #0
 810a2c6:	9318      	str	r3, [sp, #96]	; 0x60
 810a2c8:	4ba2      	ldr	r3, [pc, #648]	; (810a554 <_strtod_l+0x29c>)
 810a2ca:	9213      	str	r2, [sp, #76]	; 0x4c
 810a2cc:	681b      	ldr	r3, [r3, #0]
 810a2ce:	9305      	str	r3, [sp, #20]
 810a2d0:	4604      	mov	r4, r0
 810a2d2:	4618      	mov	r0, r3
 810a2d4:	4688      	mov	r8, r1
 810a2d6:	f7f6 f803 	bl	81002e0 <strlen>
 810a2da:	f04f 0a00 	mov.w	sl, #0
 810a2de:	4605      	mov	r5, r0
 810a2e0:	f04f 0b00 	mov.w	fp, #0
 810a2e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810a2e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a2ea:	781a      	ldrb	r2, [r3, #0]
 810a2ec:	2a2b      	cmp	r2, #43	; 0x2b
 810a2ee:	d04e      	beq.n	810a38e <_strtod_l+0xd6>
 810a2f0:	d83b      	bhi.n	810a36a <_strtod_l+0xb2>
 810a2f2:	2a0d      	cmp	r2, #13
 810a2f4:	d834      	bhi.n	810a360 <_strtod_l+0xa8>
 810a2f6:	2a08      	cmp	r2, #8
 810a2f8:	d834      	bhi.n	810a364 <_strtod_l+0xac>
 810a2fa:	2a00      	cmp	r2, #0
 810a2fc:	d03e      	beq.n	810a37c <_strtod_l+0xc4>
 810a2fe:	2300      	movs	r3, #0
 810a300:	930a      	str	r3, [sp, #40]	; 0x28
 810a302:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810a304:	7833      	ldrb	r3, [r6, #0]
 810a306:	2b30      	cmp	r3, #48	; 0x30
 810a308:	f040 80b0 	bne.w	810a46c <_strtod_l+0x1b4>
 810a30c:	7873      	ldrb	r3, [r6, #1]
 810a30e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810a312:	2b58      	cmp	r3, #88	; 0x58
 810a314:	d168      	bne.n	810a3e8 <_strtod_l+0x130>
 810a316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a318:	9301      	str	r3, [sp, #4]
 810a31a:	ab18      	add	r3, sp, #96	; 0x60
 810a31c:	9702      	str	r7, [sp, #8]
 810a31e:	9300      	str	r3, [sp, #0]
 810a320:	4a8d      	ldr	r2, [pc, #564]	; (810a558 <_strtod_l+0x2a0>)
 810a322:	ab19      	add	r3, sp, #100	; 0x64
 810a324:	a917      	add	r1, sp, #92	; 0x5c
 810a326:	4620      	mov	r0, r4
 810a328:	f001 ffae 	bl	810c288 <__gethex>
 810a32c:	f010 0707 	ands.w	r7, r0, #7
 810a330:	4605      	mov	r5, r0
 810a332:	d005      	beq.n	810a340 <_strtod_l+0x88>
 810a334:	2f06      	cmp	r7, #6
 810a336:	d12c      	bne.n	810a392 <_strtod_l+0xda>
 810a338:	3601      	adds	r6, #1
 810a33a:	2300      	movs	r3, #0
 810a33c:	9617      	str	r6, [sp, #92]	; 0x5c
 810a33e:	930a      	str	r3, [sp, #40]	; 0x28
 810a340:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810a342:	2b00      	cmp	r3, #0
 810a344:	f040 8590 	bne.w	810ae68 <_strtod_l+0xbb0>
 810a348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a34a:	b1eb      	cbz	r3, 810a388 <_strtod_l+0xd0>
 810a34c:	4652      	mov	r2, sl
 810a34e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810a352:	ec43 2b10 	vmov	d0, r2, r3
 810a356:	b01d      	add	sp, #116	; 0x74
 810a358:	ecbd 8b02 	vpop	{d8}
 810a35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a360:	2a20      	cmp	r2, #32
 810a362:	d1cc      	bne.n	810a2fe <_strtod_l+0x46>
 810a364:	3301      	adds	r3, #1
 810a366:	9317      	str	r3, [sp, #92]	; 0x5c
 810a368:	e7be      	b.n	810a2e8 <_strtod_l+0x30>
 810a36a:	2a2d      	cmp	r2, #45	; 0x2d
 810a36c:	d1c7      	bne.n	810a2fe <_strtod_l+0x46>
 810a36e:	2201      	movs	r2, #1
 810a370:	920a      	str	r2, [sp, #40]	; 0x28
 810a372:	1c5a      	adds	r2, r3, #1
 810a374:	9217      	str	r2, [sp, #92]	; 0x5c
 810a376:	785b      	ldrb	r3, [r3, #1]
 810a378:	2b00      	cmp	r3, #0
 810a37a:	d1c2      	bne.n	810a302 <_strtod_l+0x4a>
 810a37c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810a37e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810a382:	2b00      	cmp	r3, #0
 810a384:	f040 856e 	bne.w	810ae64 <_strtod_l+0xbac>
 810a388:	4652      	mov	r2, sl
 810a38a:	465b      	mov	r3, fp
 810a38c:	e7e1      	b.n	810a352 <_strtod_l+0x9a>
 810a38e:	2200      	movs	r2, #0
 810a390:	e7ee      	b.n	810a370 <_strtod_l+0xb8>
 810a392:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810a394:	b13a      	cbz	r2, 810a3a6 <_strtod_l+0xee>
 810a396:	2135      	movs	r1, #53	; 0x35
 810a398:	a81a      	add	r0, sp, #104	; 0x68
 810a39a:	f002 ff80 	bl	810d29e <__copybits>
 810a39e:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a3a0:	4620      	mov	r0, r4
 810a3a2:	f002 fb3f 	bl	810ca24 <_Bfree>
 810a3a6:	3f01      	subs	r7, #1
 810a3a8:	2f04      	cmp	r7, #4
 810a3aa:	d806      	bhi.n	810a3ba <_strtod_l+0x102>
 810a3ac:	e8df f007 	tbb	[pc, r7]
 810a3b0:	1714030a 	.word	0x1714030a
 810a3b4:	0a          	.byte	0x0a
 810a3b5:	00          	.byte	0x00
 810a3b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 810a3ba:	0728      	lsls	r0, r5, #28
 810a3bc:	d5c0      	bpl.n	810a340 <_strtod_l+0x88>
 810a3be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 810a3c2:	e7bd      	b.n	810a340 <_strtod_l+0x88>
 810a3c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 810a3c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 810a3ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810a3ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810a3d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810a3d6:	e7f0      	b.n	810a3ba <_strtod_l+0x102>
 810a3d8:	f8df b180 	ldr.w	fp, [pc, #384]	; 810a55c <_strtod_l+0x2a4>
 810a3dc:	e7ed      	b.n	810a3ba <_strtod_l+0x102>
 810a3de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 810a3e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 810a3e6:	e7e8      	b.n	810a3ba <_strtod_l+0x102>
 810a3e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a3ea:	1c5a      	adds	r2, r3, #1
 810a3ec:	9217      	str	r2, [sp, #92]	; 0x5c
 810a3ee:	785b      	ldrb	r3, [r3, #1]
 810a3f0:	2b30      	cmp	r3, #48	; 0x30
 810a3f2:	d0f9      	beq.n	810a3e8 <_strtod_l+0x130>
 810a3f4:	2b00      	cmp	r3, #0
 810a3f6:	d0a3      	beq.n	810a340 <_strtod_l+0x88>
 810a3f8:	2301      	movs	r3, #1
 810a3fa:	f04f 0900 	mov.w	r9, #0
 810a3fe:	9304      	str	r3, [sp, #16]
 810a400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a402:	9308      	str	r3, [sp, #32]
 810a404:	f8cd 901c 	str.w	r9, [sp, #28]
 810a408:	464f      	mov	r7, r9
 810a40a:	220a      	movs	r2, #10
 810a40c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 810a40e:	7806      	ldrb	r6, [r0, #0]
 810a410:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810a414:	b2d9      	uxtb	r1, r3
 810a416:	2909      	cmp	r1, #9
 810a418:	d92a      	bls.n	810a470 <_strtod_l+0x1b8>
 810a41a:	9905      	ldr	r1, [sp, #20]
 810a41c:	462a      	mov	r2, r5
 810a41e:	f003 fb8a 	bl	810db36 <strncmp>
 810a422:	b398      	cbz	r0, 810a48c <_strtod_l+0x1d4>
 810a424:	2000      	movs	r0, #0
 810a426:	4632      	mov	r2, r6
 810a428:	463d      	mov	r5, r7
 810a42a:	9005      	str	r0, [sp, #20]
 810a42c:	4603      	mov	r3, r0
 810a42e:	2a65      	cmp	r2, #101	; 0x65
 810a430:	d001      	beq.n	810a436 <_strtod_l+0x17e>
 810a432:	2a45      	cmp	r2, #69	; 0x45
 810a434:	d118      	bne.n	810a468 <_strtod_l+0x1b0>
 810a436:	b91d      	cbnz	r5, 810a440 <_strtod_l+0x188>
 810a438:	9a04      	ldr	r2, [sp, #16]
 810a43a:	4302      	orrs	r2, r0
 810a43c:	d09e      	beq.n	810a37c <_strtod_l+0xc4>
 810a43e:	2500      	movs	r5, #0
 810a440:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 810a444:	f108 0201 	add.w	r2, r8, #1
 810a448:	9217      	str	r2, [sp, #92]	; 0x5c
 810a44a:	f898 2001 	ldrb.w	r2, [r8, #1]
 810a44e:	2a2b      	cmp	r2, #43	; 0x2b
 810a450:	d075      	beq.n	810a53e <_strtod_l+0x286>
 810a452:	2a2d      	cmp	r2, #45	; 0x2d
 810a454:	d07b      	beq.n	810a54e <_strtod_l+0x296>
 810a456:	f04f 0c00 	mov.w	ip, #0
 810a45a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810a45e:	2909      	cmp	r1, #9
 810a460:	f240 8082 	bls.w	810a568 <_strtod_l+0x2b0>
 810a464:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810a468:	2600      	movs	r6, #0
 810a46a:	e09d      	b.n	810a5a8 <_strtod_l+0x2f0>
 810a46c:	2300      	movs	r3, #0
 810a46e:	e7c4      	b.n	810a3fa <_strtod_l+0x142>
 810a470:	2f08      	cmp	r7, #8
 810a472:	bfd8      	it	le
 810a474:	9907      	ldrle	r1, [sp, #28]
 810a476:	f100 0001 	add.w	r0, r0, #1
 810a47a:	bfda      	itte	le
 810a47c:	fb02 3301 	mlale	r3, r2, r1, r3
 810a480:	9307      	strle	r3, [sp, #28]
 810a482:	fb02 3909 	mlagt	r9, r2, r9, r3
 810a486:	3701      	adds	r7, #1
 810a488:	9017      	str	r0, [sp, #92]	; 0x5c
 810a48a:	e7bf      	b.n	810a40c <_strtod_l+0x154>
 810a48c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a48e:	195a      	adds	r2, r3, r5
 810a490:	9217      	str	r2, [sp, #92]	; 0x5c
 810a492:	5d5a      	ldrb	r2, [r3, r5]
 810a494:	2f00      	cmp	r7, #0
 810a496:	d037      	beq.n	810a508 <_strtod_l+0x250>
 810a498:	9005      	str	r0, [sp, #20]
 810a49a:	463d      	mov	r5, r7
 810a49c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810a4a0:	2b09      	cmp	r3, #9
 810a4a2:	d912      	bls.n	810a4ca <_strtod_l+0x212>
 810a4a4:	2301      	movs	r3, #1
 810a4a6:	e7c2      	b.n	810a42e <_strtod_l+0x176>
 810a4a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a4aa:	1c5a      	adds	r2, r3, #1
 810a4ac:	9217      	str	r2, [sp, #92]	; 0x5c
 810a4ae:	785a      	ldrb	r2, [r3, #1]
 810a4b0:	3001      	adds	r0, #1
 810a4b2:	2a30      	cmp	r2, #48	; 0x30
 810a4b4:	d0f8      	beq.n	810a4a8 <_strtod_l+0x1f0>
 810a4b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810a4ba:	2b08      	cmp	r3, #8
 810a4bc:	f200 84d9 	bhi.w	810ae72 <_strtod_l+0xbba>
 810a4c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a4c2:	9005      	str	r0, [sp, #20]
 810a4c4:	2000      	movs	r0, #0
 810a4c6:	9308      	str	r3, [sp, #32]
 810a4c8:	4605      	mov	r5, r0
 810a4ca:	3a30      	subs	r2, #48	; 0x30
 810a4cc:	f100 0301 	add.w	r3, r0, #1
 810a4d0:	d014      	beq.n	810a4fc <_strtod_l+0x244>
 810a4d2:	9905      	ldr	r1, [sp, #20]
 810a4d4:	4419      	add	r1, r3
 810a4d6:	9105      	str	r1, [sp, #20]
 810a4d8:	462b      	mov	r3, r5
 810a4da:	eb00 0e05 	add.w	lr, r0, r5
 810a4de:	210a      	movs	r1, #10
 810a4e0:	4573      	cmp	r3, lr
 810a4e2:	d113      	bne.n	810a50c <_strtod_l+0x254>
 810a4e4:	182b      	adds	r3, r5, r0
 810a4e6:	2b08      	cmp	r3, #8
 810a4e8:	f105 0501 	add.w	r5, r5, #1
 810a4ec:	4405      	add	r5, r0
 810a4ee:	dc1c      	bgt.n	810a52a <_strtod_l+0x272>
 810a4f0:	9907      	ldr	r1, [sp, #28]
 810a4f2:	230a      	movs	r3, #10
 810a4f4:	fb03 2301 	mla	r3, r3, r1, r2
 810a4f8:	9307      	str	r3, [sp, #28]
 810a4fa:	2300      	movs	r3, #0
 810a4fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a4fe:	1c51      	adds	r1, r2, #1
 810a500:	9117      	str	r1, [sp, #92]	; 0x5c
 810a502:	7852      	ldrb	r2, [r2, #1]
 810a504:	4618      	mov	r0, r3
 810a506:	e7c9      	b.n	810a49c <_strtod_l+0x1e4>
 810a508:	4638      	mov	r0, r7
 810a50a:	e7d2      	b.n	810a4b2 <_strtod_l+0x1fa>
 810a50c:	2b08      	cmp	r3, #8
 810a50e:	dc04      	bgt.n	810a51a <_strtod_l+0x262>
 810a510:	9e07      	ldr	r6, [sp, #28]
 810a512:	434e      	muls	r6, r1
 810a514:	9607      	str	r6, [sp, #28]
 810a516:	3301      	adds	r3, #1
 810a518:	e7e2      	b.n	810a4e0 <_strtod_l+0x228>
 810a51a:	f103 0c01 	add.w	ip, r3, #1
 810a51e:	f1bc 0f10 	cmp.w	ip, #16
 810a522:	bfd8      	it	le
 810a524:	fb01 f909 	mulle.w	r9, r1, r9
 810a528:	e7f5      	b.n	810a516 <_strtod_l+0x25e>
 810a52a:	2d10      	cmp	r5, #16
 810a52c:	bfdc      	itt	le
 810a52e:	230a      	movle	r3, #10
 810a530:	fb03 2909 	mlale	r9, r3, r9, r2
 810a534:	e7e1      	b.n	810a4fa <_strtod_l+0x242>
 810a536:	2300      	movs	r3, #0
 810a538:	9305      	str	r3, [sp, #20]
 810a53a:	2301      	movs	r3, #1
 810a53c:	e77c      	b.n	810a438 <_strtod_l+0x180>
 810a53e:	f04f 0c00 	mov.w	ip, #0
 810a542:	f108 0202 	add.w	r2, r8, #2
 810a546:	9217      	str	r2, [sp, #92]	; 0x5c
 810a548:	f898 2002 	ldrb.w	r2, [r8, #2]
 810a54c:	e785      	b.n	810a45a <_strtod_l+0x1a2>
 810a54e:	f04f 0c01 	mov.w	ip, #1
 810a552:	e7f6      	b.n	810a542 <_strtod_l+0x28a>
 810a554:	0810e3bc 	.word	0x0810e3bc
 810a558:	0810e10c 	.word	0x0810e10c
 810a55c:	7ff00000 	.word	0x7ff00000
 810a560:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a562:	1c51      	adds	r1, r2, #1
 810a564:	9117      	str	r1, [sp, #92]	; 0x5c
 810a566:	7852      	ldrb	r2, [r2, #1]
 810a568:	2a30      	cmp	r2, #48	; 0x30
 810a56a:	d0f9      	beq.n	810a560 <_strtod_l+0x2a8>
 810a56c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810a570:	2908      	cmp	r1, #8
 810a572:	f63f af79 	bhi.w	810a468 <_strtod_l+0x1b0>
 810a576:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810a57a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a57c:	9206      	str	r2, [sp, #24]
 810a57e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810a580:	1c51      	adds	r1, r2, #1
 810a582:	9117      	str	r1, [sp, #92]	; 0x5c
 810a584:	7852      	ldrb	r2, [r2, #1]
 810a586:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 810a58a:	2e09      	cmp	r6, #9
 810a58c:	d937      	bls.n	810a5fe <_strtod_l+0x346>
 810a58e:	9e06      	ldr	r6, [sp, #24]
 810a590:	1b89      	subs	r1, r1, r6
 810a592:	2908      	cmp	r1, #8
 810a594:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810a598:	dc02      	bgt.n	810a5a0 <_strtod_l+0x2e8>
 810a59a:	4576      	cmp	r6, lr
 810a59c:	bfa8      	it	ge
 810a59e:	4676      	movge	r6, lr
 810a5a0:	f1bc 0f00 	cmp.w	ip, #0
 810a5a4:	d000      	beq.n	810a5a8 <_strtod_l+0x2f0>
 810a5a6:	4276      	negs	r6, r6
 810a5a8:	2d00      	cmp	r5, #0
 810a5aa:	d14d      	bne.n	810a648 <_strtod_l+0x390>
 810a5ac:	9904      	ldr	r1, [sp, #16]
 810a5ae:	4301      	orrs	r1, r0
 810a5b0:	f47f aec6 	bne.w	810a340 <_strtod_l+0x88>
 810a5b4:	2b00      	cmp	r3, #0
 810a5b6:	f47f aee1 	bne.w	810a37c <_strtod_l+0xc4>
 810a5ba:	2a69      	cmp	r2, #105	; 0x69
 810a5bc:	d027      	beq.n	810a60e <_strtod_l+0x356>
 810a5be:	dc24      	bgt.n	810a60a <_strtod_l+0x352>
 810a5c0:	2a49      	cmp	r2, #73	; 0x49
 810a5c2:	d024      	beq.n	810a60e <_strtod_l+0x356>
 810a5c4:	2a4e      	cmp	r2, #78	; 0x4e
 810a5c6:	f47f aed9 	bne.w	810a37c <_strtod_l+0xc4>
 810a5ca:	499f      	ldr	r1, [pc, #636]	; (810a848 <_strtod_l+0x590>)
 810a5cc:	a817      	add	r0, sp, #92	; 0x5c
 810a5ce:	f002 f8b3 	bl	810c738 <__match>
 810a5d2:	2800      	cmp	r0, #0
 810a5d4:	f43f aed2 	beq.w	810a37c <_strtod_l+0xc4>
 810a5d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a5da:	781b      	ldrb	r3, [r3, #0]
 810a5dc:	2b28      	cmp	r3, #40	; 0x28
 810a5de:	d12d      	bne.n	810a63c <_strtod_l+0x384>
 810a5e0:	499a      	ldr	r1, [pc, #616]	; (810a84c <_strtod_l+0x594>)
 810a5e2:	aa1a      	add	r2, sp, #104	; 0x68
 810a5e4:	a817      	add	r0, sp, #92	; 0x5c
 810a5e6:	f002 f8bb 	bl	810c760 <__hexnan>
 810a5ea:	2805      	cmp	r0, #5
 810a5ec:	d126      	bne.n	810a63c <_strtod_l+0x384>
 810a5ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810a5f0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 810a5f4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 810a5f8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 810a5fc:	e6a0      	b.n	810a340 <_strtod_l+0x88>
 810a5fe:	210a      	movs	r1, #10
 810a600:	fb01 2e0e 	mla	lr, r1, lr, r2
 810a604:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 810a608:	e7b9      	b.n	810a57e <_strtod_l+0x2c6>
 810a60a:	2a6e      	cmp	r2, #110	; 0x6e
 810a60c:	e7db      	b.n	810a5c6 <_strtod_l+0x30e>
 810a60e:	4990      	ldr	r1, [pc, #576]	; (810a850 <_strtod_l+0x598>)
 810a610:	a817      	add	r0, sp, #92	; 0x5c
 810a612:	f002 f891 	bl	810c738 <__match>
 810a616:	2800      	cmp	r0, #0
 810a618:	f43f aeb0 	beq.w	810a37c <_strtod_l+0xc4>
 810a61c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a61e:	498d      	ldr	r1, [pc, #564]	; (810a854 <_strtod_l+0x59c>)
 810a620:	3b01      	subs	r3, #1
 810a622:	a817      	add	r0, sp, #92	; 0x5c
 810a624:	9317      	str	r3, [sp, #92]	; 0x5c
 810a626:	f002 f887 	bl	810c738 <__match>
 810a62a:	b910      	cbnz	r0, 810a632 <_strtod_l+0x37a>
 810a62c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810a62e:	3301      	adds	r3, #1
 810a630:	9317      	str	r3, [sp, #92]	; 0x5c
 810a632:	f8df b230 	ldr.w	fp, [pc, #560]	; 810a864 <_strtod_l+0x5ac>
 810a636:	f04f 0a00 	mov.w	sl, #0
 810a63a:	e681      	b.n	810a340 <_strtod_l+0x88>
 810a63c:	4886      	ldr	r0, [pc, #536]	; (810a858 <_strtod_l+0x5a0>)
 810a63e:	f003 fa1f 	bl	810da80 <nan>
 810a642:	ec5b ab10 	vmov	sl, fp, d0
 810a646:	e67b      	b.n	810a340 <_strtod_l+0x88>
 810a648:	9b05      	ldr	r3, [sp, #20]
 810a64a:	9807      	ldr	r0, [sp, #28]
 810a64c:	1af3      	subs	r3, r6, r3
 810a64e:	2f00      	cmp	r7, #0
 810a650:	bf08      	it	eq
 810a652:	462f      	moveq	r7, r5
 810a654:	2d10      	cmp	r5, #16
 810a656:	9306      	str	r3, [sp, #24]
 810a658:	46a8      	mov	r8, r5
 810a65a:	bfa8      	it	ge
 810a65c:	f04f 0810 	movge.w	r8, #16
 810a660:	f7f5 ffd8 	bl	8100614 <__aeabi_ui2d>
 810a664:	2d09      	cmp	r5, #9
 810a666:	4682      	mov	sl, r0
 810a668:	468b      	mov	fp, r1
 810a66a:	dd13      	ble.n	810a694 <_strtod_l+0x3dc>
 810a66c:	4b7b      	ldr	r3, [pc, #492]	; (810a85c <_strtod_l+0x5a4>)
 810a66e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810a672:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810a676:	f7f6 f847 	bl	8100708 <__aeabi_dmul>
 810a67a:	4682      	mov	sl, r0
 810a67c:	4648      	mov	r0, r9
 810a67e:	468b      	mov	fp, r1
 810a680:	f7f5 ffc8 	bl	8100614 <__aeabi_ui2d>
 810a684:	4602      	mov	r2, r0
 810a686:	460b      	mov	r3, r1
 810a688:	4650      	mov	r0, sl
 810a68a:	4659      	mov	r1, fp
 810a68c:	f7f5 fe86 	bl	810039c <__adddf3>
 810a690:	4682      	mov	sl, r0
 810a692:	468b      	mov	fp, r1
 810a694:	2d0f      	cmp	r5, #15
 810a696:	dc38      	bgt.n	810a70a <_strtod_l+0x452>
 810a698:	9b06      	ldr	r3, [sp, #24]
 810a69a:	2b00      	cmp	r3, #0
 810a69c:	f43f ae50 	beq.w	810a340 <_strtod_l+0x88>
 810a6a0:	dd24      	ble.n	810a6ec <_strtod_l+0x434>
 810a6a2:	2b16      	cmp	r3, #22
 810a6a4:	dc0b      	bgt.n	810a6be <_strtod_l+0x406>
 810a6a6:	496d      	ldr	r1, [pc, #436]	; (810a85c <_strtod_l+0x5a4>)
 810a6a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a6ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a6b0:	4652      	mov	r2, sl
 810a6b2:	465b      	mov	r3, fp
 810a6b4:	f7f6 f828 	bl	8100708 <__aeabi_dmul>
 810a6b8:	4682      	mov	sl, r0
 810a6ba:	468b      	mov	fp, r1
 810a6bc:	e640      	b.n	810a340 <_strtod_l+0x88>
 810a6be:	9a06      	ldr	r2, [sp, #24]
 810a6c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 810a6c4:	4293      	cmp	r3, r2
 810a6c6:	db20      	blt.n	810a70a <_strtod_l+0x452>
 810a6c8:	4c64      	ldr	r4, [pc, #400]	; (810a85c <_strtod_l+0x5a4>)
 810a6ca:	f1c5 050f 	rsb	r5, r5, #15
 810a6ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810a6d2:	4652      	mov	r2, sl
 810a6d4:	465b      	mov	r3, fp
 810a6d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a6da:	f7f6 f815 	bl	8100708 <__aeabi_dmul>
 810a6de:	9b06      	ldr	r3, [sp, #24]
 810a6e0:	1b5d      	subs	r5, r3, r5
 810a6e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810a6e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 810a6ea:	e7e3      	b.n	810a6b4 <_strtod_l+0x3fc>
 810a6ec:	9b06      	ldr	r3, [sp, #24]
 810a6ee:	3316      	adds	r3, #22
 810a6f0:	db0b      	blt.n	810a70a <_strtod_l+0x452>
 810a6f2:	9b05      	ldr	r3, [sp, #20]
 810a6f4:	1b9e      	subs	r6, r3, r6
 810a6f6:	4b59      	ldr	r3, [pc, #356]	; (810a85c <_strtod_l+0x5a4>)
 810a6f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 810a6fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 810a700:	4650      	mov	r0, sl
 810a702:	4659      	mov	r1, fp
 810a704:	f7f6 f92a 	bl	810095c <__aeabi_ddiv>
 810a708:	e7d6      	b.n	810a6b8 <_strtod_l+0x400>
 810a70a:	9b06      	ldr	r3, [sp, #24]
 810a70c:	eba5 0808 	sub.w	r8, r5, r8
 810a710:	4498      	add	r8, r3
 810a712:	f1b8 0f00 	cmp.w	r8, #0
 810a716:	dd74      	ble.n	810a802 <_strtod_l+0x54a>
 810a718:	f018 030f 	ands.w	r3, r8, #15
 810a71c:	d00a      	beq.n	810a734 <_strtod_l+0x47c>
 810a71e:	494f      	ldr	r1, [pc, #316]	; (810a85c <_strtod_l+0x5a4>)
 810a720:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810a724:	4652      	mov	r2, sl
 810a726:	465b      	mov	r3, fp
 810a728:	e9d1 0100 	ldrd	r0, r1, [r1]
 810a72c:	f7f5 ffec 	bl	8100708 <__aeabi_dmul>
 810a730:	4682      	mov	sl, r0
 810a732:	468b      	mov	fp, r1
 810a734:	f038 080f 	bics.w	r8, r8, #15
 810a738:	d04f      	beq.n	810a7da <_strtod_l+0x522>
 810a73a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 810a73e:	dd22      	ble.n	810a786 <_strtod_l+0x4ce>
 810a740:	2500      	movs	r5, #0
 810a742:	462e      	mov	r6, r5
 810a744:	9507      	str	r5, [sp, #28]
 810a746:	9505      	str	r5, [sp, #20]
 810a748:	2322      	movs	r3, #34	; 0x22
 810a74a:	f8df b118 	ldr.w	fp, [pc, #280]	; 810a864 <_strtod_l+0x5ac>
 810a74e:	6023      	str	r3, [r4, #0]
 810a750:	f04f 0a00 	mov.w	sl, #0
 810a754:	9b07      	ldr	r3, [sp, #28]
 810a756:	2b00      	cmp	r3, #0
 810a758:	f43f adf2 	beq.w	810a340 <_strtod_l+0x88>
 810a75c:	9918      	ldr	r1, [sp, #96]	; 0x60
 810a75e:	4620      	mov	r0, r4
 810a760:	f002 f960 	bl	810ca24 <_Bfree>
 810a764:	9905      	ldr	r1, [sp, #20]
 810a766:	4620      	mov	r0, r4
 810a768:	f002 f95c 	bl	810ca24 <_Bfree>
 810a76c:	4631      	mov	r1, r6
 810a76e:	4620      	mov	r0, r4
 810a770:	f002 f958 	bl	810ca24 <_Bfree>
 810a774:	9907      	ldr	r1, [sp, #28]
 810a776:	4620      	mov	r0, r4
 810a778:	f002 f954 	bl	810ca24 <_Bfree>
 810a77c:	4629      	mov	r1, r5
 810a77e:	4620      	mov	r0, r4
 810a780:	f002 f950 	bl	810ca24 <_Bfree>
 810a784:	e5dc      	b.n	810a340 <_strtod_l+0x88>
 810a786:	4b36      	ldr	r3, [pc, #216]	; (810a860 <_strtod_l+0x5a8>)
 810a788:	9304      	str	r3, [sp, #16]
 810a78a:	2300      	movs	r3, #0
 810a78c:	ea4f 1828 	mov.w	r8, r8, asr #4
 810a790:	4650      	mov	r0, sl
 810a792:	4659      	mov	r1, fp
 810a794:	4699      	mov	r9, r3
 810a796:	f1b8 0f01 	cmp.w	r8, #1
 810a79a:	dc21      	bgt.n	810a7e0 <_strtod_l+0x528>
 810a79c:	b10b      	cbz	r3, 810a7a2 <_strtod_l+0x4ea>
 810a79e:	4682      	mov	sl, r0
 810a7a0:	468b      	mov	fp, r1
 810a7a2:	4b2f      	ldr	r3, [pc, #188]	; (810a860 <_strtod_l+0x5a8>)
 810a7a4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 810a7a8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 810a7ac:	4652      	mov	r2, sl
 810a7ae:	465b      	mov	r3, fp
 810a7b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 810a7b4:	f7f5 ffa8 	bl	8100708 <__aeabi_dmul>
 810a7b8:	4b2a      	ldr	r3, [pc, #168]	; (810a864 <_strtod_l+0x5ac>)
 810a7ba:	460a      	mov	r2, r1
 810a7bc:	400b      	ands	r3, r1
 810a7be:	492a      	ldr	r1, [pc, #168]	; (810a868 <_strtod_l+0x5b0>)
 810a7c0:	428b      	cmp	r3, r1
 810a7c2:	4682      	mov	sl, r0
 810a7c4:	d8bc      	bhi.n	810a740 <_strtod_l+0x488>
 810a7c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810a7ca:	428b      	cmp	r3, r1
 810a7cc:	bf86      	itte	hi
 810a7ce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 810a86c <_strtod_l+0x5b4>
 810a7d2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 810a7d6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 810a7da:	2300      	movs	r3, #0
 810a7dc:	9304      	str	r3, [sp, #16]
 810a7de:	e084      	b.n	810a8ea <_strtod_l+0x632>
 810a7e0:	f018 0f01 	tst.w	r8, #1
 810a7e4:	d005      	beq.n	810a7f2 <_strtod_l+0x53a>
 810a7e6:	9b04      	ldr	r3, [sp, #16]
 810a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a7ec:	f7f5 ff8c 	bl	8100708 <__aeabi_dmul>
 810a7f0:	2301      	movs	r3, #1
 810a7f2:	9a04      	ldr	r2, [sp, #16]
 810a7f4:	3208      	adds	r2, #8
 810a7f6:	f109 0901 	add.w	r9, r9, #1
 810a7fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 810a7fe:	9204      	str	r2, [sp, #16]
 810a800:	e7c9      	b.n	810a796 <_strtod_l+0x4de>
 810a802:	d0ea      	beq.n	810a7da <_strtod_l+0x522>
 810a804:	f1c8 0800 	rsb	r8, r8, #0
 810a808:	f018 020f 	ands.w	r2, r8, #15
 810a80c:	d00a      	beq.n	810a824 <_strtod_l+0x56c>
 810a80e:	4b13      	ldr	r3, [pc, #76]	; (810a85c <_strtod_l+0x5a4>)
 810a810:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a814:	4650      	mov	r0, sl
 810a816:	4659      	mov	r1, fp
 810a818:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a81c:	f7f6 f89e 	bl	810095c <__aeabi_ddiv>
 810a820:	4682      	mov	sl, r0
 810a822:	468b      	mov	fp, r1
 810a824:	ea5f 1828 	movs.w	r8, r8, asr #4
 810a828:	d0d7      	beq.n	810a7da <_strtod_l+0x522>
 810a82a:	f1b8 0f1f 	cmp.w	r8, #31
 810a82e:	dd1f      	ble.n	810a870 <_strtod_l+0x5b8>
 810a830:	2500      	movs	r5, #0
 810a832:	462e      	mov	r6, r5
 810a834:	9507      	str	r5, [sp, #28]
 810a836:	9505      	str	r5, [sp, #20]
 810a838:	2322      	movs	r3, #34	; 0x22
 810a83a:	f04f 0a00 	mov.w	sl, #0
 810a83e:	f04f 0b00 	mov.w	fp, #0
 810a842:	6023      	str	r3, [r4, #0]
 810a844:	e786      	b.n	810a754 <_strtod_l+0x49c>
 810a846:	bf00      	nop
 810a848:	0810e0dd 	.word	0x0810e0dd
 810a84c:	0810e120 	.word	0x0810e120
 810a850:	0810e0d5 	.word	0x0810e0d5
 810a854:	0810e264 	.word	0x0810e264
 810a858:	0810e578 	.word	0x0810e578
 810a85c:	0810e458 	.word	0x0810e458
 810a860:	0810e430 	.word	0x0810e430
 810a864:	7ff00000 	.word	0x7ff00000
 810a868:	7ca00000 	.word	0x7ca00000
 810a86c:	7fefffff 	.word	0x7fefffff
 810a870:	f018 0310 	ands.w	r3, r8, #16
 810a874:	bf18      	it	ne
 810a876:	236a      	movne	r3, #106	; 0x6a
 810a878:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 810ac28 <_strtod_l+0x970>
 810a87c:	9304      	str	r3, [sp, #16]
 810a87e:	4650      	mov	r0, sl
 810a880:	4659      	mov	r1, fp
 810a882:	2300      	movs	r3, #0
 810a884:	f018 0f01 	tst.w	r8, #1
 810a888:	d004      	beq.n	810a894 <_strtod_l+0x5dc>
 810a88a:	e9d9 2300 	ldrd	r2, r3, [r9]
 810a88e:	f7f5 ff3b 	bl	8100708 <__aeabi_dmul>
 810a892:	2301      	movs	r3, #1
 810a894:	ea5f 0868 	movs.w	r8, r8, asr #1
 810a898:	f109 0908 	add.w	r9, r9, #8
 810a89c:	d1f2      	bne.n	810a884 <_strtod_l+0x5cc>
 810a89e:	b10b      	cbz	r3, 810a8a4 <_strtod_l+0x5ec>
 810a8a0:	4682      	mov	sl, r0
 810a8a2:	468b      	mov	fp, r1
 810a8a4:	9b04      	ldr	r3, [sp, #16]
 810a8a6:	b1c3      	cbz	r3, 810a8da <_strtod_l+0x622>
 810a8a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810a8ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810a8b0:	2b00      	cmp	r3, #0
 810a8b2:	4659      	mov	r1, fp
 810a8b4:	dd11      	ble.n	810a8da <_strtod_l+0x622>
 810a8b6:	2b1f      	cmp	r3, #31
 810a8b8:	f340 8124 	ble.w	810ab04 <_strtod_l+0x84c>
 810a8bc:	2b34      	cmp	r3, #52	; 0x34
 810a8be:	bfde      	ittt	le
 810a8c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810a8c4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 810a8c8:	fa03 f202 	lslle.w	r2, r3, r2
 810a8cc:	f04f 0a00 	mov.w	sl, #0
 810a8d0:	bfcc      	ite	gt
 810a8d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 810a8d6:	ea02 0b01 	andle.w	fp, r2, r1
 810a8da:	2200      	movs	r2, #0
 810a8dc:	2300      	movs	r3, #0
 810a8de:	4650      	mov	r0, sl
 810a8e0:	4659      	mov	r1, fp
 810a8e2:	f7f6 f979 	bl	8100bd8 <__aeabi_dcmpeq>
 810a8e6:	2800      	cmp	r0, #0
 810a8e8:	d1a2      	bne.n	810a830 <_strtod_l+0x578>
 810a8ea:	9b07      	ldr	r3, [sp, #28]
 810a8ec:	9300      	str	r3, [sp, #0]
 810a8ee:	9908      	ldr	r1, [sp, #32]
 810a8f0:	462b      	mov	r3, r5
 810a8f2:	463a      	mov	r2, r7
 810a8f4:	4620      	mov	r0, r4
 810a8f6:	f002 f8fd 	bl	810caf4 <__s2b>
 810a8fa:	9007      	str	r0, [sp, #28]
 810a8fc:	2800      	cmp	r0, #0
 810a8fe:	f43f af1f 	beq.w	810a740 <_strtod_l+0x488>
 810a902:	9b05      	ldr	r3, [sp, #20]
 810a904:	1b9e      	subs	r6, r3, r6
 810a906:	9b06      	ldr	r3, [sp, #24]
 810a908:	2b00      	cmp	r3, #0
 810a90a:	bfb4      	ite	lt
 810a90c:	4633      	movlt	r3, r6
 810a90e:	2300      	movge	r3, #0
 810a910:	930c      	str	r3, [sp, #48]	; 0x30
 810a912:	9b06      	ldr	r3, [sp, #24]
 810a914:	2500      	movs	r5, #0
 810a916:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810a91a:	9312      	str	r3, [sp, #72]	; 0x48
 810a91c:	462e      	mov	r6, r5
 810a91e:	9b07      	ldr	r3, [sp, #28]
 810a920:	4620      	mov	r0, r4
 810a922:	6859      	ldr	r1, [r3, #4]
 810a924:	f002 f83e 	bl	810c9a4 <_Balloc>
 810a928:	9005      	str	r0, [sp, #20]
 810a92a:	2800      	cmp	r0, #0
 810a92c:	f43f af0c 	beq.w	810a748 <_strtod_l+0x490>
 810a930:	9b07      	ldr	r3, [sp, #28]
 810a932:	691a      	ldr	r2, [r3, #16]
 810a934:	3202      	adds	r2, #2
 810a936:	f103 010c 	add.w	r1, r3, #12
 810a93a:	0092      	lsls	r2, r2, #2
 810a93c:	300c      	adds	r0, #12
 810a93e:	f7fe fd59 	bl	81093f4 <memcpy>
 810a942:	ec4b ab10 	vmov	d0, sl, fp
 810a946:	aa1a      	add	r2, sp, #104	; 0x68
 810a948:	a919      	add	r1, sp, #100	; 0x64
 810a94a:	4620      	mov	r0, r4
 810a94c:	f002 fc18 	bl	810d180 <__d2b>
 810a950:	ec4b ab18 	vmov	d8, sl, fp
 810a954:	9018      	str	r0, [sp, #96]	; 0x60
 810a956:	2800      	cmp	r0, #0
 810a958:	f43f aef6 	beq.w	810a748 <_strtod_l+0x490>
 810a95c:	2101      	movs	r1, #1
 810a95e:	4620      	mov	r0, r4
 810a960:	f002 f962 	bl	810cc28 <__i2b>
 810a964:	4606      	mov	r6, r0
 810a966:	2800      	cmp	r0, #0
 810a968:	f43f aeee 	beq.w	810a748 <_strtod_l+0x490>
 810a96c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810a96e:	9904      	ldr	r1, [sp, #16]
 810a970:	2b00      	cmp	r3, #0
 810a972:	bfab      	itete	ge
 810a974:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 810a976:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 810a978:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810a97a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 810a97e:	bfac      	ite	ge
 810a980:	eb03 0902 	addge.w	r9, r3, r2
 810a984:	1ad7      	sublt	r7, r2, r3
 810a986:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 810a988:	eba3 0801 	sub.w	r8, r3, r1
 810a98c:	4490      	add	r8, r2
 810a98e:	4ba1      	ldr	r3, [pc, #644]	; (810ac14 <_strtod_l+0x95c>)
 810a990:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 810a994:	4598      	cmp	r8, r3
 810a996:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810a99a:	f280 80c7 	bge.w	810ab2c <_strtod_l+0x874>
 810a99e:	eba3 0308 	sub.w	r3, r3, r8
 810a9a2:	2b1f      	cmp	r3, #31
 810a9a4:	eba2 0203 	sub.w	r2, r2, r3
 810a9a8:	f04f 0101 	mov.w	r1, #1
 810a9ac:	f300 80b1 	bgt.w	810ab12 <_strtod_l+0x85a>
 810a9b0:	fa01 f303 	lsl.w	r3, r1, r3
 810a9b4:	930d      	str	r3, [sp, #52]	; 0x34
 810a9b6:	2300      	movs	r3, #0
 810a9b8:	9308      	str	r3, [sp, #32]
 810a9ba:	eb09 0802 	add.w	r8, r9, r2
 810a9be:	9b04      	ldr	r3, [sp, #16]
 810a9c0:	45c1      	cmp	r9, r8
 810a9c2:	4417      	add	r7, r2
 810a9c4:	441f      	add	r7, r3
 810a9c6:	464b      	mov	r3, r9
 810a9c8:	bfa8      	it	ge
 810a9ca:	4643      	movge	r3, r8
 810a9cc:	42bb      	cmp	r3, r7
 810a9ce:	bfa8      	it	ge
 810a9d0:	463b      	movge	r3, r7
 810a9d2:	2b00      	cmp	r3, #0
 810a9d4:	bfc2      	ittt	gt
 810a9d6:	eba8 0803 	subgt.w	r8, r8, r3
 810a9da:	1aff      	subgt	r7, r7, r3
 810a9dc:	eba9 0903 	subgt.w	r9, r9, r3
 810a9e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810a9e2:	2b00      	cmp	r3, #0
 810a9e4:	dd17      	ble.n	810aa16 <_strtod_l+0x75e>
 810a9e6:	4631      	mov	r1, r6
 810a9e8:	461a      	mov	r2, r3
 810a9ea:	4620      	mov	r0, r4
 810a9ec:	f002 f9dc 	bl	810cda8 <__pow5mult>
 810a9f0:	4606      	mov	r6, r0
 810a9f2:	2800      	cmp	r0, #0
 810a9f4:	f43f aea8 	beq.w	810a748 <_strtod_l+0x490>
 810a9f8:	4601      	mov	r1, r0
 810a9fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810a9fc:	4620      	mov	r0, r4
 810a9fe:	f002 f929 	bl	810cc54 <__multiply>
 810aa02:	900b      	str	r0, [sp, #44]	; 0x2c
 810aa04:	2800      	cmp	r0, #0
 810aa06:	f43f ae9f 	beq.w	810a748 <_strtod_l+0x490>
 810aa0a:	9918      	ldr	r1, [sp, #96]	; 0x60
 810aa0c:	4620      	mov	r0, r4
 810aa0e:	f002 f809 	bl	810ca24 <_Bfree>
 810aa12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810aa14:	9318      	str	r3, [sp, #96]	; 0x60
 810aa16:	f1b8 0f00 	cmp.w	r8, #0
 810aa1a:	f300 808c 	bgt.w	810ab36 <_strtod_l+0x87e>
 810aa1e:	9b06      	ldr	r3, [sp, #24]
 810aa20:	2b00      	cmp	r3, #0
 810aa22:	dd08      	ble.n	810aa36 <_strtod_l+0x77e>
 810aa24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810aa26:	9905      	ldr	r1, [sp, #20]
 810aa28:	4620      	mov	r0, r4
 810aa2a:	f002 f9bd 	bl	810cda8 <__pow5mult>
 810aa2e:	9005      	str	r0, [sp, #20]
 810aa30:	2800      	cmp	r0, #0
 810aa32:	f43f ae89 	beq.w	810a748 <_strtod_l+0x490>
 810aa36:	2f00      	cmp	r7, #0
 810aa38:	dd08      	ble.n	810aa4c <_strtod_l+0x794>
 810aa3a:	9905      	ldr	r1, [sp, #20]
 810aa3c:	463a      	mov	r2, r7
 810aa3e:	4620      	mov	r0, r4
 810aa40:	f002 fa0c 	bl	810ce5c <__lshift>
 810aa44:	9005      	str	r0, [sp, #20]
 810aa46:	2800      	cmp	r0, #0
 810aa48:	f43f ae7e 	beq.w	810a748 <_strtod_l+0x490>
 810aa4c:	f1b9 0f00 	cmp.w	r9, #0
 810aa50:	dd08      	ble.n	810aa64 <_strtod_l+0x7ac>
 810aa52:	4631      	mov	r1, r6
 810aa54:	464a      	mov	r2, r9
 810aa56:	4620      	mov	r0, r4
 810aa58:	f002 fa00 	bl	810ce5c <__lshift>
 810aa5c:	4606      	mov	r6, r0
 810aa5e:	2800      	cmp	r0, #0
 810aa60:	f43f ae72 	beq.w	810a748 <_strtod_l+0x490>
 810aa64:	9a05      	ldr	r2, [sp, #20]
 810aa66:	9918      	ldr	r1, [sp, #96]	; 0x60
 810aa68:	4620      	mov	r0, r4
 810aa6a:	f002 fa83 	bl	810cf74 <__mdiff>
 810aa6e:	4605      	mov	r5, r0
 810aa70:	2800      	cmp	r0, #0
 810aa72:	f43f ae69 	beq.w	810a748 <_strtod_l+0x490>
 810aa76:	68c3      	ldr	r3, [r0, #12]
 810aa78:	930b      	str	r3, [sp, #44]	; 0x2c
 810aa7a:	2300      	movs	r3, #0
 810aa7c:	60c3      	str	r3, [r0, #12]
 810aa7e:	4631      	mov	r1, r6
 810aa80:	f002 fa5c 	bl	810cf3c <__mcmp>
 810aa84:	2800      	cmp	r0, #0
 810aa86:	da60      	bge.n	810ab4a <_strtod_l+0x892>
 810aa88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810aa8a:	ea53 030a 	orrs.w	r3, r3, sl
 810aa8e:	f040 8082 	bne.w	810ab96 <_strtod_l+0x8de>
 810aa92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810aa96:	2b00      	cmp	r3, #0
 810aa98:	d17d      	bne.n	810ab96 <_strtod_l+0x8de>
 810aa9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810aa9e:	0d1b      	lsrs	r3, r3, #20
 810aaa0:	051b      	lsls	r3, r3, #20
 810aaa2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810aaa6:	d976      	bls.n	810ab96 <_strtod_l+0x8de>
 810aaa8:	696b      	ldr	r3, [r5, #20]
 810aaaa:	b913      	cbnz	r3, 810aab2 <_strtod_l+0x7fa>
 810aaac:	692b      	ldr	r3, [r5, #16]
 810aaae:	2b01      	cmp	r3, #1
 810aab0:	dd71      	ble.n	810ab96 <_strtod_l+0x8de>
 810aab2:	4629      	mov	r1, r5
 810aab4:	2201      	movs	r2, #1
 810aab6:	4620      	mov	r0, r4
 810aab8:	f002 f9d0 	bl	810ce5c <__lshift>
 810aabc:	4631      	mov	r1, r6
 810aabe:	4605      	mov	r5, r0
 810aac0:	f002 fa3c 	bl	810cf3c <__mcmp>
 810aac4:	2800      	cmp	r0, #0
 810aac6:	dd66      	ble.n	810ab96 <_strtod_l+0x8de>
 810aac8:	9904      	ldr	r1, [sp, #16]
 810aaca:	4a53      	ldr	r2, [pc, #332]	; (810ac18 <_strtod_l+0x960>)
 810aacc:	465b      	mov	r3, fp
 810aace:	2900      	cmp	r1, #0
 810aad0:	f000 8081 	beq.w	810abd6 <_strtod_l+0x91e>
 810aad4:	ea02 010b 	and.w	r1, r2, fp
 810aad8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810aadc:	dc7b      	bgt.n	810abd6 <_strtod_l+0x91e>
 810aade:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810aae2:	f77f aea9 	ble.w	810a838 <_strtod_l+0x580>
 810aae6:	4b4d      	ldr	r3, [pc, #308]	; (810ac1c <_strtod_l+0x964>)
 810aae8:	4650      	mov	r0, sl
 810aaea:	4659      	mov	r1, fp
 810aaec:	2200      	movs	r2, #0
 810aaee:	f7f5 fe0b 	bl	8100708 <__aeabi_dmul>
 810aaf2:	460b      	mov	r3, r1
 810aaf4:	4303      	orrs	r3, r0
 810aaf6:	bf08      	it	eq
 810aaf8:	2322      	moveq	r3, #34	; 0x22
 810aafa:	4682      	mov	sl, r0
 810aafc:	468b      	mov	fp, r1
 810aafe:	bf08      	it	eq
 810ab00:	6023      	streq	r3, [r4, #0]
 810ab02:	e62b      	b.n	810a75c <_strtod_l+0x4a4>
 810ab04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810ab08:	fa02 f303 	lsl.w	r3, r2, r3
 810ab0c:	ea03 0a0a 	and.w	sl, r3, sl
 810ab10:	e6e3      	b.n	810a8da <_strtod_l+0x622>
 810ab12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810ab16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 810ab1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 810ab1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810ab22:	fa01 f308 	lsl.w	r3, r1, r8
 810ab26:	9308      	str	r3, [sp, #32]
 810ab28:	910d      	str	r1, [sp, #52]	; 0x34
 810ab2a:	e746      	b.n	810a9ba <_strtod_l+0x702>
 810ab2c:	2300      	movs	r3, #0
 810ab2e:	9308      	str	r3, [sp, #32]
 810ab30:	2301      	movs	r3, #1
 810ab32:	930d      	str	r3, [sp, #52]	; 0x34
 810ab34:	e741      	b.n	810a9ba <_strtod_l+0x702>
 810ab36:	9918      	ldr	r1, [sp, #96]	; 0x60
 810ab38:	4642      	mov	r2, r8
 810ab3a:	4620      	mov	r0, r4
 810ab3c:	f002 f98e 	bl	810ce5c <__lshift>
 810ab40:	9018      	str	r0, [sp, #96]	; 0x60
 810ab42:	2800      	cmp	r0, #0
 810ab44:	f47f af6b 	bne.w	810aa1e <_strtod_l+0x766>
 810ab48:	e5fe      	b.n	810a748 <_strtod_l+0x490>
 810ab4a:	465f      	mov	r7, fp
 810ab4c:	d16e      	bne.n	810ac2c <_strtod_l+0x974>
 810ab4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810ab50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810ab54:	b342      	cbz	r2, 810aba8 <_strtod_l+0x8f0>
 810ab56:	4a32      	ldr	r2, [pc, #200]	; (810ac20 <_strtod_l+0x968>)
 810ab58:	4293      	cmp	r3, r2
 810ab5a:	d128      	bne.n	810abae <_strtod_l+0x8f6>
 810ab5c:	9b04      	ldr	r3, [sp, #16]
 810ab5e:	4651      	mov	r1, sl
 810ab60:	b1eb      	cbz	r3, 810ab9e <_strtod_l+0x8e6>
 810ab62:	4b2d      	ldr	r3, [pc, #180]	; (810ac18 <_strtod_l+0x960>)
 810ab64:	403b      	ands	r3, r7
 810ab66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810ab6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810ab6e:	d819      	bhi.n	810aba4 <_strtod_l+0x8ec>
 810ab70:	0d1b      	lsrs	r3, r3, #20
 810ab72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810ab76:	fa02 f303 	lsl.w	r3, r2, r3
 810ab7a:	4299      	cmp	r1, r3
 810ab7c:	d117      	bne.n	810abae <_strtod_l+0x8f6>
 810ab7e:	4b29      	ldr	r3, [pc, #164]	; (810ac24 <_strtod_l+0x96c>)
 810ab80:	429f      	cmp	r7, r3
 810ab82:	d102      	bne.n	810ab8a <_strtod_l+0x8d2>
 810ab84:	3101      	adds	r1, #1
 810ab86:	f43f addf 	beq.w	810a748 <_strtod_l+0x490>
 810ab8a:	4b23      	ldr	r3, [pc, #140]	; (810ac18 <_strtod_l+0x960>)
 810ab8c:	403b      	ands	r3, r7
 810ab8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810ab92:	f04f 0a00 	mov.w	sl, #0
 810ab96:	9b04      	ldr	r3, [sp, #16]
 810ab98:	2b00      	cmp	r3, #0
 810ab9a:	d1a4      	bne.n	810aae6 <_strtod_l+0x82e>
 810ab9c:	e5de      	b.n	810a75c <_strtod_l+0x4a4>
 810ab9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810aba2:	e7ea      	b.n	810ab7a <_strtod_l+0x8c2>
 810aba4:	4613      	mov	r3, r2
 810aba6:	e7e8      	b.n	810ab7a <_strtod_l+0x8c2>
 810aba8:	ea53 030a 	orrs.w	r3, r3, sl
 810abac:	d08c      	beq.n	810aac8 <_strtod_l+0x810>
 810abae:	9b08      	ldr	r3, [sp, #32]
 810abb0:	b1db      	cbz	r3, 810abea <_strtod_l+0x932>
 810abb2:	423b      	tst	r3, r7
 810abb4:	d0ef      	beq.n	810ab96 <_strtod_l+0x8de>
 810abb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810abb8:	9a04      	ldr	r2, [sp, #16]
 810abba:	4650      	mov	r0, sl
 810abbc:	4659      	mov	r1, fp
 810abbe:	b1c3      	cbz	r3, 810abf2 <_strtod_l+0x93a>
 810abc0:	f7ff fb5c 	bl	810a27c <sulp>
 810abc4:	4602      	mov	r2, r0
 810abc6:	460b      	mov	r3, r1
 810abc8:	ec51 0b18 	vmov	r0, r1, d8
 810abcc:	f7f5 fbe6 	bl	810039c <__adddf3>
 810abd0:	4682      	mov	sl, r0
 810abd2:	468b      	mov	fp, r1
 810abd4:	e7df      	b.n	810ab96 <_strtod_l+0x8de>
 810abd6:	4013      	ands	r3, r2
 810abd8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810abdc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810abe0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810abe4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 810abe8:	e7d5      	b.n	810ab96 <_strtod_l+0x8de>
 810abea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810abec:	ea13 0f0a 	tst.w	r3, sl
 810abf0:	e7e0      	b.n	810abb4 <_strtod_l+0x8fc>
 810abf2:	f7ff fb43 	bl	810a27c <sulp>
 810abf6:	4602      	mov	r2, r0
 810abf8:	460b      	mov	r3, r1
 810abfa:	ec51 0b18 	vmov	r0, r1, d8
 810abfe:	f7f5 fbcb 	bl	8100398 <__aeabi_dsub>
 810ac02:	2200      	movs	r2, #0
 810ac04:	2300      	movs	r3, #0
 810ac06:	4682      	mov	sl, r0
 810ac08:	468b      	mov	fp, r1
 810ac0a:	f7f5 ffe5 	bl	8100bd8 <__aeabi_dcmpeq>
 810ac0e:	2800      	cmp	r0, #0
 810ac10:	d0c1      	beq.n	810ab96 <_strtod_l+0x8de>
 810ac12:	e611      	b.n	810a838 <_strtod_l+0x580>
 810ac14:	fffffc02 	.word	0xfffffc02
 810ac18:	7ff00000 	.word	0x7ff00000
 810ac1c:	39500000 	.word	0x39500000
 810ac20:	000fffff 	.word	0x000fffff
 810ac24:	7fefffff 	.word	0x7fefffff
 810ac28:	0810e138 	.word	0x0810e138
 810ac2c:	4631      	mov	r1, r6
 810ac2e:	4628      	mov	r0, r5
 810ac30:	f002 fb02 	bl	810d238 <__ratio>
 810ac34:	ec59 8b10 	vmov	r8, r9, d0
 810ac38:	ee10 0a10 	vmov	r0, s0
 810ac3c:	2200      	movs	r2, #0
 810ac3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810ac42:	4649      	mov	r1, r9
 810ac44:	f7f5 ffdc 	bl	8100c00 <__aeabi_dcmple>
 810ac48:	2800      	cmp	r0, #0
 810ac4a:	d07a      	beq.n	810ad42 <_strtod_l+0xa8a>
 810ac4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ac4e:	2b00      	cmp	r3, #0
 810ac50:	d04a      	beq.n	810ace8 <_strtod_l+0xa30>
 810ac52:	4b95      	ldr	r3, [pc, #596]	; (810aea8 <_strtod_l+0xbf0>)
 810ac54:	2200      	movs	r2, #0
 810ac56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810ac5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 810aea8 <_strtod_l+0xbf0>
 810ac5e:	f04f 0800 	mov.w	r8, #0
 810ac62:	4b92      	ldr	r3, [pc, #584]	; (810aeac <_strtod_l+0xbf4>)
 810ac64:	403b      	ands	r3, r7
 810ac66:	930d      	str	r3, [sp, #52]	; 0x34
 810ac68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810ac6a:	4b91      	ldr	r3, [pc, #580]	; (810aeb0 <_strtod_l+0xbf8>)
 810ac6c:	429a      	cmp	r2, r3
 810ac6e:	f040 80b0 	bne.w	810add2 <_strtod_l+0xb1a>
 810ac72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810ac76:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810ac7a:	ec4b ab10 	vmov	d0, sl, fp
 810ac7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810ac82:	f002 fa01 	bl	810d088 <__ulp>
 810ac86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810ac8a:	ec53 2b10 	vmov	r2, r3, d0
 810ac8e:	f7f5 fd3b 	bl	8100708 <__aeabi_dmul>
 810ac92:	4652      	mov	r2, sl
 810ac94:	465b      	mov	r3, fp
 810ac96:	f7f5 fb81 	bl	810039c <__adddf3>
 810ac9a:	460b      	mov	r3, r1
 810ac9c:	4983      	ldr	r1, [pc, #524]	; (810aeac <_strtod_l+0xbf4>)
 810ac9e:	4a85      	ldr	r2, [pc, #532]	; (810aeb4 <_strtod_l+0xbfc>)
 810aca0:	4019      	ands	r1, r3
 810aca2:	4291      	cmp	r1, r2
 810aca4:	4682      	mov	sl, r0
 810aca6:	d960      	bls.n	810ad6a <_strtod_l+0xab2>
 810aca8:	ee18 3a90 	vmov	r3, s17
 810acac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 810acb0:	4293      	cmp	r3, r2
 810acb2:	d104      	bne.n	810acbe <_strtod_l+0xa06>
 810acb4:	ee18 3a10 	vmov	r3, s16
 810acb8:	3301      	adds	r3, #1
 810acba:	f43f ad45 	beq.w	810a748 <_strtod_l+0x490>
 810acbe:	f8df b200 	ldr.w	fp, [pc, #512]	; 810aec0 <_strtod_l+0xc08>
 810acc2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 810acc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 810acc8:	4620      	mov	r0, r4
 810acca:	f001 feab 	bl	810ca24 <_Bfree>
 810acce:	9905      	ldr	r1, [sp, #20]
 810acd0:	4620      	mov	r0, r4
 810acd2:	f001 fea7 	bl	810ca24 <_Bfree>
 810acd6:	4631      	mov	r1, r6
 810acd8:	4620      	mov	r0, r4
 810acda:	f001 fea3 	bl	810ca24 <_Bfree>
 810acde:	4629      	mov	r1, r5
 810ace0:	4620      	mov	r0, r4
 810ace2:	f001 fe9f 	bl	810ca24 <_Bfree>
 810ace6:	e61a      	b.n	810a91e <_strtod_l+0x666>
 810ace8:	f1ba 0f00 	cmp.w	sl, #0
 810acec:	d11b      	bne.n	810ad26 <_strtod_l+0xa6e>
 810acee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810acf2:	b9f3      	cbnz	r3, 810ad32 <_strtod_l+0xa7a>
 810acf4:	4b6c      	ldr	r3, [pc, #432]	; (810aea8 <_strtod_l+0xbf0>)
 810acf6:	2200      	movs	r2, #0
 810acf8:	4640      	mov	r0, r8
 810acfa:	4649      	mov	r1, r9
 810acfc:	f7f5 ff76 	bl	8100bec <__aeabi_dcmplt>
 810ad00:	b9d0      	cbnz	r0, 810ad38 <_strtod_l+0xa80>
 810ad02:	4640      	mov	r0, r8
 810ad04:	4649      	mov	r1, r9
 810ad06:	4b6c      	ldr	r3, [pc, #432]	; (810aeb8 <_strtod_l+0xc00>)
 810ad08:	2200      	movs	r2, #0
 810ad0a:	f7f5 fcfd 	bl	8100708 <__aeabi_dmul>
 810ad0e:	4680      	mov	r8, r0
 810ad10:	4689      	mov	r9, r1
 810ad12:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810ad16:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 810ad1a:	9315      	str	r3, [sp, #84]	; 0x54
 810ad1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 810ad20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810ad24:	e79d      	b.n	810ac62 <_strtod_l+0x9aa>
 810ad26:	f1ba 0f01 	cmp.w	sl, #1
 810ad2a:	d102      	bne.n	810ad32 <_strtod_l+0xa7a>
 810ad2c:	2f00      	cmp	r7, #0
 810ad2e:	f43f ad83 	beq.w	810a838 <_strtod_l+0x580>
 810ad32:	4b62      	ldr	r3, [pc, #392]	; (810aebc <_strtod_l+0xc04>)
 810ad34:	2200      	movs	r2, #0
 810ad36:	e78e      	b.n	810ac56 <_strtod_l+0x99e>
 810ad38:	f8df 917c 	ldr.w	r9, [pc, #380]	; 810aeb8 <_strtod_l+0xc00>
 810ad3c:	f04f 0800 	mov.w	r8, #0
 810ad40:	e7e7      	b.n	810ad12 <_strtod_l+0xa5a>
 810ad42:	4b5d      	ldr	r3, [pc, #372]	; (810aeb8 <_strtod_l+0xc00>)
 810ad44:	4640      	mov	r0, r8
 810ad46:	4649      	mov	r1, r9
 810ad48:	2200      	movs	r2, #0
 810ad4a:	f7f5 fcdd 	bl	8100708 <__aeabi_dmul>
 810ad4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ad50:	4680      	mov	r8, r0
 810ad52:	4689      	mov	r9, r1
 810ad54:	b933      	cbnz	r3, 810ad64 <_strtod_l+0xaac>
 810ad56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810ad5a:	900e      	str	r0, [sp, #56]	; 0x38
 810ad5c:	930f      	str	r3, [sp, #60]	; 0x3c
 810ad5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 810ad62:	e7dd      	b.n	810ad20 <_strtod_l+0xa68>
 810ad64:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 810ad68:	e7f9      	b.n	810ad5e <_strtod_l+0xaa6>
 810ad6a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810ad6e:	9b04      	ldr	r3, [sp, #16]
 810ad70:	2b00      	cmp	r3, #0
 810ad72:	d1a8      	bne.n	810acc6 <_strtod_l+0xa0e>
 810ad74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810ad78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810ad7a:	0d1b      	lsrs	r3, r3, #20
 810ad7c:	051b      	lsls	r3, r3, #20
 810ad7e:	429a      	cmp	r2, r3
 810ad80:	d1a1      	bne.n	810acc6 <_strtod_l+0xa0e>
 810ad82:	4640      	mov	r0, r8
 810ad84:	4649      	mov	r1, r9
 810ad86:	f7f6 f81f 	bl	8100dc8 <__aeabi_d2lz>
 810ad8a:	f7f5 fc8f 	bl	81006ac <__aeabi_l2d>
 810ad8e:	4602      	mov	r2, r0
 810ad90:	460b      	mov	r3, r1
 810ad92:	4640      	mov	r0, r8
 810ad94:	4649      	mov	r1, r9
 810ad96:	f7f5 faff 	bl	8100398 <__aeabi_dsub>
 810ad9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810ad9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810ada0:	ea43 030a 	orr.w	r3, r3, sl
 810ada4:	4313      	orrs	r3, r2
 810ada6:	4680      	mov	r8, r0
 810ada8:	4689      	mov	r9, r1
 810adaa:	d055      	beq.n	810ae58 <_strtod_l+0xba0>
 810adac:	a336      	add	r3, pc, #216	; (adr r3, 810ae88 <_strtod_l+0xbd0>)
 810adae:	e9d3 2300 	ldrd	r2, r3, [r3]
 810adb2:	f7f5 ff1b 	bl	8100bec <__aeabi_dcmplt>
 810adb6:	2800      	cmp	r0, #0
 810adb8:	f47f acd0 	bne.w	810a75c <_strtod_l+0x4a4>
 810adbc:	a334      	add	r3, pc, #208	; (adr r3, 810ae90 <_strtod_l+0xbd8>)
 810adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810adc2:	4640      	mov	r0, r8
 810adc4:	4649      	mov	r1, r9
 810adc6:	f7f5 ff2f 	bl	8100c28 <__aeabi_dcmpgt>
 810adca:	2800      	cmp	r0, #0
 810adcc:	f43f af7b 	beq.w	810acc6 <_strtod_l+0xa0e>
 810add0:	e4c4      	b.n	810a75c <_strtod_l+0x4a4>
 810add2:	9b04      	ldr	r3, [sp, #16]
 810add4:	b333      	cbz	r3, 810ae24 <_strtod_l+0xb6c>
 810add6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810add8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810addc:	d822      	bhi.n	810ae24 <_strtod_l+0xb6c>
 810adde:	a32e      	add	r3, pc, #184	; (adr r3, 810ae98 <_strtod_l+0xbe0>)
 810ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ade4:	4640      	mov	r0, r8
 810ade6:	4649      	mov	r1, r9
 810ade8:	f7f5 ff0a 	bl	8100c00 <__aeabi_dcmple>
 810adec:	b1a0      	cbz	r0, 810ae18 <_strtod_l+0xb60>
 810adee:	4649      	mov	r1, r9
 810adf0:	4640      	mov	r0, r8
 810adf2:	f7f5 ff61 	bl	8100cb8 <__aeabi_d2uiz>
 810adf6:	2801      	cmp	r0, #1
 810adf8:	bf38      	it	cc
 810adfa:	2001      	movcc	r0, #1
 810adfc:	f7f5 fc0a 	bl	8100614 <__aeabi_ui2d>
 810ae00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ae02:	4680      	mov	r8, r0
 810ae04:	4689      	mov	r9, r1
 810ae06:	bb23      	cbnz	r3, 810ae52 <_strtod_l+0xb9a>
 810ae08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810ae0c:	9010      	str	r0, [sp, #64]	; 0x40
 810ae0e:	9311      	str	r3, [sp, #68]	; 0x44
 810ae10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810ae14:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810ae18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ae1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810ae1c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810ae20:	1a9b      	subs	r3, r3, r2
 810ae22:	9309      	str	r3, [sp, #36]	; 0x24
 810ae24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810ae28:	eeb0 0a48 	vmov.f32	s0, s16
 810ae2c:	eef0 0a68 	vmov.f32	s1, s17
 810ae30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810ae34:	f002 f928 	bl	810d088 <__ulp>
 810ae38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810ae3c:	ec53 2b10 	vmov	r2, r3, d0
 810ae40:	f7f5 fc62 	bl	8100708 <__aeabi_dmul>
 810ae44:	ec53 2b18 	vmov	r2, r3, d8
 810ae48:	f7f5 faa8 	bl	810039c <__adddf3>
 810ae4c:	4682      	mov	sl, r0
 810ae4e:	468b      	mov	fp, r1
 810ae50:	e78d      	b.n	810ad6e <_strtod_l+0xab6>
 810ae52:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 810ae56:	e7db      	b.n	810ae10 <_strtod_l+0xb58>
 810ae58:	a311      	add	r3, pc, #68	; (adr r3, 810aea0 <_strtod_l+0xbe8>)
 810ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ae5e:	f7f5 fec5 	bl	8100bec <__aeabi_dcmplt>
 810ae62:	e7b2      	b.n	810adca <_strtod_l+0xb12>
 810ae64:	2300      	movs	r3, #0
 810ae66:	930a      	str	r3, [sp, #40]	; 0x28
 810ae68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810ae6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810ae6c:	6013      	str	r3, [r2, #0]
 810ae6e:	f7ff ba6b 	b.w	810a348 <_strtod_l+0x90>
 810ae72:	2a65      	cmp	r2, #101	; 0x65
 810ae74:	f43f ab5f 	beq.w	810a536 <_strtod_l+0x27e>
 810ae78:	2a45      	cmp	r2, #69	; 0x45
 810ae7a:	f43f ab5c 	beq.w	810a536 <_strtod_l+0x27e>
 810ae7e:	2301      	movs	r3, #1
 810ae80:	f7ff bb94 	b.w	810a5ac <_strtod_l+0x2f4>
 810ae84:	f3af 8000 	nop.w
 810ae88:	94a03595 	.word	0x94a03595
 810ae8c:	3fdfffff 	.word	0x3fdfffff
 810ae90:	35afe535 	.word	0x35afe535
 810ae94:	3fe00000 	.word	0x3fe00000
 810ae98:	ffc00000 	.word	0xffc00000
 810ae9c:	41dfffff 	.word	0x41dfffff
 810aea0:	94a03595 	.word	0x94a03595
 810aea4:	3fcfffff 	.word	0x3fcfffff
 810aea8:	3ff00000 	.word	0x3ff00000
 810aeac:	7ff00000 	.word	0x7ff00000
 810aeb0:	7fe00000 	.word	0x7fe00000
 810aeb4:	7c9fffff 	.word	0x7c9fffff
 810aeb8:	3fe00000 	.word	0x3fe00000
 810aebc:	bff00000 	.word	0xbff00000
 810aec0:	7fefffff 	.word	0x7fefffff

0810aec4 <_strtod_r>:
 810aec4:	4b01      	ldr	r3, [pc, #4]	; (810aecc <_strtod_r+0x8>)
 810aec6:	f7ff b9f7 	b.w	810a2b8 <_strtod_l>
 810aeca:	bf00      	nop
 810aecc:	10000088 	.word	0x10000088

0810aed0 <_strtol_l.constprop.0>:
 810aed0:	2b01      	cmp	r3, #1
 810aed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810aed6:	d001      	beq.n	810aedc <_strtol_l.constprop.0+0xc>
 810aed8:	2b24      	cmp	r3, #36	; 0x24
 810aeda:	d906      	bls.n	810aeea <_strtol_l.constprop.0+0x1a>
 810aedc:	f7fe fa60 	bl	81093a0 <__errno>
 810aee0:	2316      	movs	r3, #22
 810aee2:	6003      	str	r3, [r0, #0]
 810aee4:	2000      	movs	r0, #0
 810aee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810aeea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810afd0 <_strtol_l.constprop.0+0x100>
 810aeee:	460d      	mov	r5, r1
 810aef0:	462e      	mov	r6, r5
 810aef2:	f815 4b01 	ldrb.w	r4, [r5], #1
 810aef6:	f814 700c 	ldrb.w	r7, [r4, ip]
 810aefa:	f017 0708 	ands.w	r7, r7, #8
 810aefe:	d1f7      	bne.n	810aef0 <_strtol_l.constprop.0+0x20>
 810af00:	2c2d      	cmp	r4, #45	; 0x2d
 810af02:	d132      	bne.n	810af6a <_strtol_l.constprop.0+0x9a>
 810af04:	782c      	ldrb	r4, [r5, #0]
 810af06:	2701      	movs	r7, #1
 810af08:	1cb5      	adds	r5, r6, #2
 810af0a:	2b00      	cmp	r3, #0
 810af0c:	d05b      	beq.n	810afc6 <_strtol_l.constprop.0+0xf6>
 810af0e:	2b10      	cmp	r3, #16
 810af10:	d109      	bne.n	810af26 <_strtol_l.constprop.0+0x56>
 810af12:	2c30      	cmp	r4, #48	; 0x30
 810af14:	d107      	bne.n	810af26 <_strtol_l.constprop.0+0x56>
 810af16:	782c      	ldrb	r4, [r5, #0]
 810af18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810af1c:	2c58      	cmp	r4, #88	; 0x58
 810af1e:	d14d      	bne.n	810afbc <_strtol_l.constprop.0+0xec>
 810af20:	786c      	ldrb	r4, [r5, #1]
 810af22:	2310      	movs	r3, #16
 810af24:	3502      	adds	r5, #2
 810af26:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810af2a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 810af2e:	f04f 0c00 	mov.w	ip, #0
 810af32:	fbb8 f9f3 	udiv	r9, r8, r3
 810af36:	4666      	mov	r6, ip
 810af38:	fb03 8a19 	mls	sl, r3, r9, r8
 810af3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 810af40:	f1be 0f09 	cmp.w	lr, #9
 810af44:	d816      	bhi.n	810af74 <_strtol_l.constprop.0+0xa4>
 810af46:	4674      	mov	r4, lr
 810af48:	42a3      	cmp	r3, r4
 810af4a:	dd24      	ble.n	810af96 <_strtol_l.constprop.0+0xc6>
 810af4c:	f1bc 0f00 	cmp.w	ip, #0
 810af50:	db1e      	blt.n	810af90 <_strtol_l.constprop.0+0xc0>
 810af52:	45b1      	cmp	r9, r6
 810af54:	d31c      	bcc.n	810af90 <_strtol_l.constprop.0+0xc0>
 810af56:	d101      	bne.n	810af5c <_strtol_l.constprop.0+0x8c>
 810af58:	45a2      	cmp	sl, r4
 810af5a:	db19      	blt.n	810af90 <_strtol_l.constprop.0+0xc0>
 810af5c:	fb06 4603 	mla	r6, r6, r3, r4
 810af60:	f04f 0c01 	mov.w	ip, #1
 810af64:	f815 4b01 	ldrb.w	r4, [r5], #1
 810af68:	e7e8      	b.n	810af3c <_strtol_l.constprop.0+0x6c>
 810af6a:	2c2b      	cmp	r4, #43	; 0x2b
 810af6c:	bf04      	itt	eq
 810af6e:	782c      	ldrbeq	r4, [r5, #0]
 810af70:	1cb5      	addeq	r5, r6, #2
 810af72:	e7ca      	b.n	810af0a <_strtol_l.constprop.0+0x3a>
 810af74:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 810af78:	f1be 0f19 	cmp.w	lr, #25
 810af7c:	d801      	bhi.n	810af82 <_strtol_l.constprop.0+0xb2>
 810af7e:	3c37      	subs	r4, #55	; 0x37
 810af80:	e7e2      	b.n	810af48 <_strtol_l.constprop.0+0x78>
 810af82:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 810af86:	f1be 0f19 	cmp.w	lr, #25
 810af8a:	d804      	bhi.n	810af96 <_strtol_l.constprop.0+0xc6>
 810af8c:	3c57      	subs	r4, #87	; 0x57
 810af8e:	e7db      	b.n	810af48 <_strtol_l.constprop.0+0x78>
 810af90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 810af94:	e7e6      	b.n	810af64 <_strtol_l.constprop.0+0x94>
 810af96:	f1bc 0f00 	cmp.w	ip, #0
 810af9a:	da05      	bge.n	810afa8 <_strtol_l.constprop.0+0xd8>
 810af9c:	2322      	movs	r3, #34	; 0x22
 810af9e:	6003      	str	r3, [r0, #0]
 810afa0:	4646      	mov	r6, r8
 810afa2:	b942      	cbnz	r2, 810afb6 <_strtol_l.constprop.0+0xe6>
 810afa4:	4630      	mov	r0, r6
 810afa6:	e79e      	b.n	810aee6 <_strtol_l.constprop.0+0x16>
 810afa8:	b107      	cbz	r7, 810afac <_strtol_l.constprop.0+0xdc>
 810afaa:	4276      	negs	r6, r6
 810afac:	2a00      	cmp	r2, #0
 810afae:	d0f9      	beq.n	810afa4 <_strtol_l.constprop.0+0xd4>
 810afb0:	f1bc 0f00 	cmp.w	ip, #0
 810afb4:	d000      	beq.n	810afb8 <_strtol_l.constprop.0+0xe8>
 810afb6:	1e69      	subs	r1, r5, #1
 810afb8:	6011      	str	r1, [r2, #0]
 810afba:	e7f3      	b.n	810afa4 <_strtol_l.constprop.0+0xd4>
 810afbc:	2430      	movs	r4, #48	; 0x30
 810afbe:	2b00      	cmp	r3, #0
 810afc0:	d1b1      	bne.n	810af26 <_strtol_l.constprop.0+0x56>
 810afc2:	2308      	movs	r3, #8
 810afc4:	e7af      	b.n	810af26 <_strtol_l.constprop.0+0x56>
 810afc6:	2c30      	cmp	r4, #48	; 0x30
 810afc8:	d0a5      	beq.n	810af16 <_strtol_l.constprop.0+0x46>
 810afca:	230a      	movs	r3, #10
 810afcc:	e7ab      	b.n	810af26 <_strtol_l.constprop.0+0x56>
 810afce:	bf00      	nop
 810afd0:	0810e161 	.word	0x0810e161

0810afd4 <_strtol_r>:
 810afd4:	f7ff bf7c 	b.w	810aed0 <_strtol_l.constprop.0>

0810afd8 <__swbuf_r>:
 810afd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810afda:	460e      	mov	r6, r1
 810afdc:	4614      	mov	r4, r2
 810afde:	4605      	mov	r5, r0
 810afe0:	b118      	cbz	r0, 810afea <__swbuf_r+0x12>
 810afe2:	6983      	ldr	r3, [r0, #24]
 810afe4:	b90b      	cbnz	r3, 810afea <__swbuf_r+0x12>
 810afe6:	f001 f84b 	bl	810c080 <__sinit>
 810afea:	4b21      	ldr	r3, [pc, #132]	; (810b070 <__swbuf_r+0x98>)
 810afec:	429c      	cmp	r4, r3
 810afee:	d12b      	bne.n	810b048 <__swbuf_r+0x70>
 810aff0:	686c      	ldr	r4, [r5, #4]
 810aff2:	69a3      	ldr	r3, [r4, #24]
 810aff4:	60a3      	str	r3, [r4, #8]
 810aff6:	89a3      	ldrh	r3, [r4, #12]
 810aff8:	071a      	lsls	r2, r3, #28
 810affa:	d52f      	bpl.n	810b05c <__swbuf_r+0x84>
 810affc:	6923      	ldr	r3, [r4, #16]
 810affe:	b36b      	cbz	r3, 810b05c <__swbuf_r+0x84>
 810b000:	6923      	ldr	r3, [r4, #16]
 810b002:	6820      	ldr	r0, [r4, #0]
 810b004:	1ac0      	subs	r0, r0, r3
 810b006:	6963      	ldr	r3, [r4, #20]
 810b008:	b2f6      	uxtb	r6, r6
 810b00a:	4283      	cmp	r3, r0
 810b00c:	4637      	mov	r7, r6
 810b00e:	dc04      	bgt.n	810b01a <__swbuf_r+0x42>
 810b010:	4621      	mov	r1, r4
 810b012:	4628      	mov	r0, r5
 810b014:	f000 ffa0 	bl	810bf58 <_fflush_r>
 810b018:	bb30      	cbnz	r0, 810b068 <__swbuf_r+0x90>
 810b01a:	68a3      	ldr	r3, [r4, #8]
 810b01c:	3b01      	subs	r3, #1
 810b01e:	60a3      	str	r3, [r4, #8]
 810b020:	6823      	ldr	r3, [r4, #0]
 810b022:	1c5a      	adds	r2, r3, #1
 810b024:	6022      	str	r2, [r4, #0]
 810b026:	701e      	strb	r6, [r3, #0]
 810b028:	6963      	ldr	r3, [r4, #20]
 810b02a:	3001      	adds	r0, #1
 810b02c:	4283      	cmp	r3, r0
 810b02e:	d004      	beq.n	810b03a <__swbuf_r+0x62>
 810b030:	89a3      	ldrh	r3, [r4, #12]
 810b032:	07db      	lsls	r3, r3, #31
 810b034:	d506      	bpl.n	810b044 <__swbuf_r+0x6c>
 810b036:	2e0a      	cmp	r6, #10
 810b038:	d104      	bne.n	810b044 <__swbuf_r+0x6c>
 810b03a:	4621      	mov	r1, r4
 810b03c:	4628      	mov	r0, r5
 810b03e:	f000 ff8b 	bl	810bf58 <_fflush_r>
 810b042:	b988      	cbnz	r0, 810b068 <__swbuf_r+0x90>
 810b044:	4638      	mov	r0, r7
 810b046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b048:	4b0a      	ldr	r3, [pc, #40]	; (810b074 <__swbuf_r+0x9c>)
 810b04a:	429c      	cmp	r4, r3
 810b04c:	d101      	bne.n	810b052 <__swbuf_r+0x7a>
 810b04e:	68ac      	ldr	r4, [r5, #8]
 810b050:	e7cf      	b.n	810aff2 <__swbuf_r+0x1a>
 810b052:	4b09      	ldr	r3, [pc, #36]	; (810b078 <__swbuf_r+0xa0>)
 810b054:	429c      	cmp	r4, r3
 810b056:	bf08      	it	eq
 810b058:	68ec      	ldreq	r4, [r5, #12]
 810b05a:	e7ca      	b.n	810aff2 <__swbuf_r+0x1a>
 810b05c:	4621      	mov	r1, r4
 810b05e:	4628      	mov	r0, r5
 810b060:	f000 f80c 	bl	810b07c <__swsetup_r>
 810b064:	2800      	cmp	r0, #0
 810b066:	d0cb      	beq.n	810b000 <__swbuf_r+0x28>
 810b068:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 810b06c:	e7ea      	b.n	810b044 <__swbuf_r+0x6c>
 810b06e:	bf00      	nop
 810b070:	0810e314 	.word	0x0810e314
 810b074:	0810e334 	.word	0x0810e334
 810b078:	0810e2f4 	.word	0x0810e2f4

0810b07c <__swsetup_r>:
 810b07c:	4b32      	ldr	r3, [pc, #200]	; (810b148 <__swsetup_r+0xcc>)
 810b07e:	b570      	push	{r4, r5, r6, lr}
 810b080:	681d      	ldr	r5, [r3, #0]
 810b082:	4606      	mov	r6, r0
 810b084:	460c      	mov	r4, r1
 810b086:	b125      	cbz	r5, 810b092 <__swsetup_r+0x16>
 810b088:	69ab      	ldr	r3, [r5, #24]
 810b08a:	b913      	cbnz	r3, 810b092 <__swsetup_r+0x16>
 810b08c:	4628      	mov	r0, r5
 810b08e:	f000 fff7 	bl	810c080 <__sinit>
 810b092:	4b2e      	ldr	r3, [pc, #184]	; (810b14c <__swsetup_r+0xd0>)
 810b094:	429c      	cmp	r4, r3
 810b096:	d10f      	bne.n	810b0b8 <__swsetup_r+0x3c>
 810b098:	686c      	ldr	r4, [r5, #4]
 810b09a:	89a3      	ldrh	r3, [r4, #12]
 810b09c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b0a0:	0719      	lsls	r1, r3, #28
 810b0a2:	d42c      	bmi.n	810b0fe <__swsetup_r+0x82>
 810b0a4:	06dd      	lsls	r5, r3, #27
 810b0a6:	d411      	bmi.n	810b0cc <__swsetup_r+0x50>
 810b0a8:	2309      	movs	r3, #9
 810b0aa:	6033      	str	r3, [r6, #0]
 810b0ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810b0b0:	81a3      	strh	r3, [r4, #12]
 810b0b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810b0b6:	e03e      	b.n	810b136 <__swsetup_r+0xba>
 810b0b8:	4b25      	ldr	r3, [pc, #148]	; (810b150 <__swsetup_r+0xd4>)
 810b0ba:	429c      	cmp	r4, r3
 810b0bc:	d101      	bne.n	810b0c2 <__swsetup_r+0x46>
 810b0be:	68ac      	ldr	r4, [r5, #8]
 810b0c0:	e7eb      	b.n	810b09a <__swsetup_r+0x1e>
 810b0c2:	4b24      	ldr	r3, [pc, #144]	; (810b154 <__swsetup_r+0xd8>)
 810b0c4:	429c      	cmp	r4, r3
 810b0c6:	bf08      	it	eq
 810b0c8:	68ec      	ldreq	r4, [r5, #12]
 810b0ca:	e7e6      	b.n	810b09a <__swsetup_r+0x1e>
 810b0cc:	0758      	lsls	r0, r3, #29
 810b0ce:	d512      	bpl.n	810b0f6 <__swsetup_r+0x7a>
 810b0d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810b0d2:	b141      	cbz	r1, 810b0e6 <__swsetup_r+0x6a>
 810b0d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810b0d8:	4299      	cmp	r1, r3
 810b0da:	d002      	beq.n	810b0e2 <__swsetup_r+0x66>
 810b0dc:	4630      	mov	r0, r6
 810b0de:	f002 f939 	bl	810d354 <_free_r>
 810b0e2:	2300      	movs	r3, #0
 810b0e4:	6363      	str	r3, [r4, #52]	; 0x34
 810b0e6:	89a3      	ldrh	r3, [r4, #12]
 810b0e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810b0ec:	81a3      	strh	r3, [r4, #12]
 810b0ee:	2300      	movs	r3, #0
 810b0f0:	6063      	str	r3, [r4, #4]
 810b0f2:	6923      	ldr	r3, [r4, #16]
 810b0f4:	6023      	str	r3, [r4, #0]
 810b0f6:	89a3      	ldrh	r3, [r4, #12]
 810b0f8:	f043 0308 	orr.w	r3, r3, #8
 810b0fc:	81a3      	strh	r3, [r4, #12]
 810b0fe:	6923      	ldr	r3, [r4, #16]
 810b100:	b94b      	cbnz	r3, 810b116 <__swsetup_r+0x9a>
 810b102:	89a3      	ldrh	r3, [r4, #12]
 810b104:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810b108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810b10c:	d003      	beq.n	810b116 <__swsetup_r+0x9a>
 810b10e:	4621      	mov	r1, r4
 810b110:	4630      	mov	r0, r6
 810b112:	f001 fbed 	bl	810c8f0 <__smakebuf_r>
 810b116:	89a0      	ldrh	r0, [r4, #12]
 810b118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b11c:	f010 0301 	ands.w	r3, r0, #1
 810b120:	d00a      	beq.n	810b138 <__swsetup_r+0xbc>
 810b122:	2300      	movs	r3, #0
 810b124:	60a3      	str	r3, [r4, #8]
 810b126:	6963      	ldr	r3, [r4, #20]
 810b128:	425b      	negs	r3, r3
 810b12a:	61a3      	str	r3, [r4, #24]
 810b12c:	6923      	ldr	r3, [r4, #16]
 810b12e:	b943      	cbnz	r3, 810b142 <__swsetup_r+0xc6>
 810b130:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810b134:	d1ba      	bne.n	810b0ac <__swsetup_r+0x30>
 810b136:	bd70      	pop	{r4, r5, r6, pc}
 810b138:	0781      	lsls	r1, r0, #30
 810b13a:	bf58      	it	pl
 810b13c:	6963      	ldrpl	r3, [r4, #20]
 810b13e:	60a3      	str	r3, [r4, #8]
 810b140:	e7f4      	b.n	810b12c <__swsetup_r+0xb0>
 810b142:	2000      	movs	r0, #0
 810b144:	e7f7      	b.n	810b136 <__swsetup_r+0xba>
 810b146:	bf00      	nop
 810b148:	10000020 	.word	0x10000020
 810b14c:	0810e314 	.word	0x0810e314
 810b150:	0810e334 	.word	0x0810e334
 810b154:	0810e2f4 	.word	0x0810e2f4

0810b158 <quorem>:
 810b158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b15c:	6903      	ldr	r3, [r0, #16]
 810b15e:	690c      	ldr	r4, [r1, #16]
 810b160:	42a3      	cmp	r3, r4
 810b162:	4607      	mov	r7, r0
 810b164:	f2c0 8081 	blt.w	810b26a <quorem+0x112>
 810b168:	3c01      	subs	r4, #1
 810b16a:	f101 0814 	add.w	r8, r1, #20
 810b16e:	f100 0514 	add.w	r5, r0, #20
 810b172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810b176:	9301      	str	r3, [sp, #4]
 810b178:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810b17c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810b180:	3301      	adds	r3, #1
 810b182:	429a      	cmp	r2, r3
 810b184:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810b188:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810b18c:	fbb2 f6f3 	udiv	r6, r2, r3
 810b190:	d331      	bcc.n	810b1f6 <quorem+0x9e>
 810b192:	f04f 0e00 	mov.w	lr, #0
 810b196:	4640      	mov	r0, r8
 810b198:	46ac      	mov	ip, r5
 810b19a:	46f2      	mov	sl, lr
 810b19c:	f850 2b04 	ldr.w	r2, [r0], #4
 810b1a0:	b293      	uxth	r3, r2
 810b1a2:	fb06 e303 	mla	r3, r6, r3, lr
 810b1a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810b1aa:	b29b      	uxth	r3, r3
 810b1ac:	ebaa 0303 	sub.w	r3, sl, r3
 810b1b0:	f8dc a000 	ldr.w	sl, [ip]
 810b1b4:	0c12      	lsrs	r2, r2, #16
 810b1b6:	fa13 f38a 	uxtah	r3, r3, sl
 810b1ba:	fb06 e202 	mla	r2, r6, r2, lr
 810b1be:	9300      	str	r3, [sp, #0]
 810b1c0:	9b00      	ldr	r3, [sp, #0]
 810b1c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810b1c6:	b292      	uxth	r2, r2
 810b1c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810b1cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810b1d0:	f8bd 3000 	ldrh.w	r3, [sp]
 810b1d4:	4581      	cmp	r9, r0
 810b1d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810b1da:	f84c 3b04 	str.w	r3, [ip], #4
 810b1de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810b1e2:	d2db      	bcs.n	810b19c <quorem+0x44>
 810b1e4:	f855 300b 	ldr.w	r3, [r5, fp]
 810b1e8:	b92b      	cbnz	r3, 810b1f6 <quorem+0x9e>
 810b1ea:	9b01      	ldr	r3, [sp, #4]
 810b1ec:	3b04      	subs	r3, #4
 810b1ee:	429d      	cmp	r5, r3
 810b1f0:	461a      	mov	r2, r3
 810b1f2:	d32e      	bcc.n	810b252 <quorem+0xfa>
 810b1f4:	613c      	str	r4, [r7, #16]
 810b1f6:	4638      	mov	r0, r7
 810b1f8:	f001 fea0 	bl	810cf3c <__mcmp>
 810b1fc:	2800      	cmp	r0, #0
 810b1fe:	db24      	blt.n	810b24a <quorem+0xf2>
 810b200:	3601      	adds	r6, #1
 810b202:	4628      	mov	r0, r5
 810b204:	f04f 0c00 	mov.w	ip, #0
 810b208:	f858 2b04 	ldr.w	r2, [r8], #4
 810b20c:	f8d0 e000 	ldr.w	lr, [r0]
 810b210:	b293      	uxth	r3, r2
 810b212:	ebac 0303 	sub.w	r3, ip, r3
 810b216:	0c12      	lsrs	r2, r2, #16
 810b218:	fa13 f38e 	uxtah	r3, r3, lr
 810b21c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810b220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810b224:	b29b      	uxth	r3, r3
 810b226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810b22a:	45c1      	cmp	r9, r8
 810b22c:	f840 3b04 	str.w	r3, [r0], #4
 810b230:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810b234:	d2e8      	bcs.n	810b208 <quorem+0xb0>
 810b236:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810b23a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810b23e:	b922      	cbnz	r2, 810b24a <quorem+0xf2>
 810b240:	3b04      	subs	r3, #4
 810b242:	429d      	cmp	r5, r3
 810b244:	461a      	mov	r2, r3
 810b246:	d30a      	bcc.n	810b25e <quorem+0x106>
 810b248:	613c      	str	r4, [r7, #16]
 810b24a:	4630      	mov	r0, r6
 810b24c:	b003      	add	sp, #12
 810b24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b252:	6812      	ldr	r2, [r2, #0]
 810b254:	3b04      	subs	r3, #4
 810b256:	2a00      	cmp	r2, #0
 810b258:	d1cc      	bne.n	810b1f4 <quorem+0x9c>
 810b25a:	3c01      	subs	r4, #1
 810b25c:	e7c7      	b.n	810b1ee <quorem+0x96>
 810b25e:	6812      	ldr	r2, [r2, #0]
 810b260:	3b04      	subs	r3, #4
 810b262:	2a00      	cmp	r2, #0
 810b264:	d1f0      	bne.n	810b248 <quorem+0xf0>
 810b266:	3c01      	subs	r4, #1
 810b268:	e7eb      	b.n	810b242 <quorem+0xea>
 810b26a:	2000      	movs	r0, #0
 810b26c:	e7ee      	b.n	810b24c <quorem+0xf4>
	...

0810b270 <_dtoa_r>:
 810b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b274:	ed2d 8b04 	vpush	{d8-d9}
 810b278:	ec57 6b10 	vmov	r6, r7, d0
 810b27c:	b093      	sub	sp, #76	; 0x4c
 810b27e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810b280:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810b284:	9106      	str	r1, [sp, #24]
 810b286:	ee10 aa10 	vmov	sl, s0
 810b28a:	4604      	mov	r4, r0
 810b28c:	9209      	str	r2, [sp, #36]	; 0x24
 810b28e:	930c      	str	r3, [sp, #48]	; 0x30
 810b290:	46bb      	mov	fp, r7
 810b292:	b975      	cbnz	r5, 810b2b2 <_dtoa_r+0x42>
 810b294:	2010      	movs	r0, #16
 810b296:	f001 fb6b 	bl	810c970 <malloc>
 810b29a:	4602      	mov	r2, r0
 810b29c:	6260      	str	r0, [r4, #36]	; 0x24
 810b29e:	b920      	cbnz	r0, 810b2aa <_dtoa_r+0x3a>
 810b2a0:	4ba7      	ldr	r3, [pc, #668]	; (810b540 <_dtoa_r+0x2d0>)
 810b2a2:	21ea      	movs	r1, #234	; 0xea
 810b2a4:	48a7      	ldr	r0, [pc, #668]	; (810b544 <_dtoa_r+0x2d4>)
 810b2a6:	f002 fc79 	bl	810db9c <__assert_func>
 810b2aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810b2ae:	6005      	str	r5, [r0, #0]
 810b2b0:	60c5      	str	r5, [r0, #12]
 810b2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b2b4:	6819      	ldr	r1, [r3, #0]
 810b2b6:	b151      	cbz	r1, 810b2ce <_dtoa_r+0x5e>
 810b2b8:	685a      	ldr	r2, [r3, #4]
 810b2ba:	604a      	str	r2, [r1, #4]
 810b2bc:	2301      	movs	r3, #1
 810b2be:	4093      	lsls	r3, r2
 810b2c0:	608b      	str	r3, [r1, #8]
 810b2c2:	4620      	mov	r0, r4
 810b2c4:	f001 fbae 	bl	810ca24 <_Bfree>
 810b2c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b2ca:	2200      	movs	r2, #0
 810b2cc:	601a      	str	r2, [r3, #0]
 810b2ce:	1e3b      	subs	r3, r7, #0
 810b2d0:	bfaa      	itet	ge
 810b2d2:	2300      	movge	r3, #0
 810b2d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 810b2d8:	f8c8 3000 	strge.w	r3, [r8]
 810b2dc:	4b9a      	ldr	r3, [pc, #616]	; (810b548 <_dtoa_r+0x2d8>)
 810b2de:	bfbc      	itt	lt
 810b2e0:	2201      	movlt	r2, #1
 810b2e2:	f8c8 2000 	strlt.w	r2, [r8]
 810b2e6:	ea33 030b 	bics.w	r3, r3, fp
 810b2ea:	d11b      	bne.n	810b324 <_dtoa_r+0xb4>
 810b2ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810b2ee:	f242 730f 	movw	r3, #9999	; 0x270f
 810b2f2:	6013      	str	r3, [r2, #0]
 810b2f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810b2f8:	4333      	orrs	r3, r6
 810b2fa:	f000 8592 	beq.w	810be22 <_dtoa_r+0xbb2>
 810b2fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b300:	b963      	cbnz	r3, 810b31c <_dtoa_r+0xac>
 810b302:	4b92      	ldr	r3, [pc, #584]	; (810b54c <_dtoa_r+0x2dc>)
 810b304:	e022      	b.n	810b34c <_dtoa_r+0xdc>
 810b306:	4b92      	ldr	r3, [pc, #584]	; (810b550 <_dtoa_r+0x2e0>)
 810b308:	9301      	str	r3, [sp, #4]
 810b30a:	3308      	adds	r3, #8
 810b30c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810b30e:	6013      	str	r3, [r2, #0]
 810b310:	9801      	ldr	r0, [sp, #4]
 810b312:	b013      	add	sp, #76	; 0x4c
 810b314:	ecbd 8b04 	vpop	{d8-d9}
 810b318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b31c:	4b8b      	ldr	r3, [pc, #556]	; (810b54c <_dtoa_r+0x2dc>)
 810b31e:	9301      	str	r3, [sp, #4]
 810b320:	3303      	adds	r3, #3
 810b322:	e7f3      	b.n	810b30c <_dtoa_r+0x9c>
 810b324:	2200      	movs	r2, #0
 810b326:	2300      	movs	r3, #0
 810b328:	4650      	mov	r0, sl
 810b32a:	4659      	mov	r1, fp
 810b32c:	f7f5 fc54 	bl	8100bd8 <__aeabi_dcmpeq>
 810b330:	ec4b ab19 	vmov	d9, sl, fp
 810b334:	4680      	mov	r8, r0
 810b336:	b158      	cbz	r0, 810b350 <_dtoa_r+0xe0>
 810b338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810b33a:	2301      	movs	r3, #1
 810b33c:	6013      	str	r3, [r2, #0]
 810b33e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b340:	2b00      	cmp	r3, #0
 810b342:	f000 856b 	beq.w	810be1c <_dtoa_r+0xbac>
 810b346:	4883      	ldr	r0, [pc, #524]	; (810b554 <_dtoa_r+0x2e4>)
 810b348:	6018      	str	r0, [r3, #0]
 810b34a:	1e43      	subs	r3, r0, #1
 810b34c:	9301      	str	r3, [sp, #4]
 810b34e:	e7df      	b.n	810b310 <_dtoa_r+0xa0>
 810b350:	ec4b ab10 	vmov	d0, sl, fp
 810b354:	aa10      	add	r2, sp, #64	; 0x40
 810b356:	a911      	add	r1, sp, #68	; 0x44
 810b358:	4620      	mov	r0, r4
 810b35a:	f001 ff11 	bl	810d180 <__d2b>
 810b35e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 810b362:	ee08 0a10 	vmov	s16, r0
 810b366:	2d00      	cmp	r5, #0
 810b368:	f000 8084 	beq.w	810b474 <_dtoa_r+0x204>
 810b36c:	ee19 3a90 	vmov	r3, s19
 810b370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b374:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810b378:	4656      	mov	r6, sl
 810b37a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810b37e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810b382:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 810b386:	4b74      	ldr	r3, [pc, #464]	; (810b558 <_dtoa_r+0x2e8>)
 810b388:	2200      	movs	r2, #0
 810b38a:	4630      	mov	r0, r6
 810b38c:	4639      	mov	r1, r7
 810b38e:	f7f5 f803 	bl	8100398 <__aeabi_dsub>
 810b392:	a365      	add	r3, pc, #404	; (adr r3, 810b528 <_dtoa_r+0x2b8>)
 810b394:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b398:	f7f5 f9b6 	bl	8100708 <__aeabi_dmul>
 810b39c:	a364      	add	r3, pc, #400	; (adr r3, 810b530 <_dtoa_r+0x2c0>)
 810b39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b3a2:	f7f4 fffb 	bl	810039c <__adddf3>
 810b3a6:	4606      	mov	r6, r0
 810b3a8:	4628      	mov	r0, r5
 810b3aa:	460f      	mov	r7, r1
 810b3ac:	f7f5 f942 	bl	8100634 <__aeabi_i2d>
 810b3b0:	a361      	add	r3, pc, #388	; (adr r3, 810b538 <_dtoa_r+0x2c8>)
 810b3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b3b6:	f7f5 f9a7 	bl	8100708 <__aeabi_dmul>
 810b3ba:	4602      	mov	r2, r0
 810b3bc:	460b      	mov	r3, r1
 810b3be:	4630      	mov	r0, r6
 810b3c0:	4639      	mov	r1, r7
 810b3c2:	f7f4 ffeb 	bl	810039c <__adddf3>
 810b3c6:	4606      	mov	r6, r0
 810b3c8:	460f      	mov	r7, r1
 810b3ca:	f7f5 fc4d 	bl	8100c68 <__aeabi_d2iz>
 810b3ce:	2200      	movs	r2, #0
 810b3d0:	9000      	str	r0, [sp, #0]
 810b3d2:	2300      	movs	r3, #0
 810b3d4:	4630      	mov	r0, r6
 810b3d6:	4639      	mov	r1, r7
 810b3d8:	f7f5 fc08 	bl	8100bec <__aeabi_dcmplt>
 810b3dc:	b150      	cbz	r0, 810b3f4 <_dtoa_r+0x184>
 810b3de:	9800      	ldr	r0, [sp, #0]
 810b3e0:	f7f5 f928 	bl	8100634 <__aeabi_i2d>
 810b3e4:	4632      	mov	r2, r6
 810b3e6:	463b      	mov	r3, r7
 810b3e8:	f7f5 fbf6 	bl	8100bd8 <__aeabi_dcmpeq>
 810b3ec:	b910      	cbnz	r0, 810b3f4 <_dtoa_r+0x184>
 810b3ee:	9b00      	ldr	r3, [sp, #0]
 810b3f0:	3b01      	subs	r3, #1
 810b3f2:	9300      	str	r3, [sp, #0]
 810b3f4:	9b00      	ldr	r3, [sp, #0]
 810b3f6:	2b16      	cmp	r3, #22
 810b3f8:	d85a      	bhi.n	810b4b0 <_dtoa_r+0x240>
 810b3fa:	9a00      	ldr	r2, [sp, #0]
 810b3fc:	4b57      	ldr	r3, [pc, #348]	; (810b55c <_dtoa_r+0x2ec>)
 810b3fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b402:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b406:	ec51 0b19 	vmov	r0, r1, d9
 810b40a:	f7f5 fbef 	bl	8100bec <__aeabi_dcmplt>
 810b40e:	2800      	cmp	r0, #0
 810b410:	d050      	beq.n	810b4b4 <_dtoa_r+0x244>
 810b412:	9b00      	ldr	r3, [sp, #0]
 810b414:	3b01      	subs	r3, #1
 810b416:	9300      	str	r3, [sp, #0]
 810b418:	2300      	movs	r3, #0
 810b41a:	930b      	str	r3, [sp, #44]	; 0x2c
 810b41c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b41e:	1b5d      	subs	r5, r3, r5
 810b420:	1e6b      	subs	r3, r5, #1
 810b422:	9305      	str	r3, [sp, #20]
 810b424:	bf45      	ittet	mi
 810b426:	f1c5 0301 	rsbmi	r3, r5, #1
 810b42a:	9304      	strmi	r3, [sp, #16]
 810b42c:	2300      	movpl	r3, #0
 810b42e:	2300      	movmi	r3, #0
 810b430:	bf4c      	ite	mi
 810b432:	9305      	strmi	r3, [sp, #20]
 810b434:	9304      	strpl	r3, [sp, #16]
 810b436:	9b00      	ldr	r3, [sp, #0]
 810b438:	2b00      	cmp	r3, #0
 810b43a:	db3d      	blt.n	810b4b8 <_dtoa_r+0x248>
 810b43c:	9b05      	ldr	r3, [sp, #20]
 810b43e:	9a00      	ldr	r2, [sp, #0]
 810b440:	920a      	str	r2, [sp, #40]	; 0x28
 810b442:	4413      	add	r3, r2
 810b444:	9305      	str	r3, [sp, #20]
 810b446:	2300      	movs	r3, #0
 810b448:	9307      	str	r3, [sp, #28]
 810b44a:	9b06      	ldr	r3, [sp, #24]
 810b44c:	2b09      	cmp	r3, #9
 810b44e:	f200 8089 	bhi.w	810b564 <_dtoa_r+0x2f4>
 810b452:	2b05      	cmp	r3, #5
 810b454:	bfc4      	itt	gt
 810b456:	3b04      	subgt	r3, #4
 810b458:	9306      	strgt	r3, [sp, #24]
 810b45a:	9b06      	ldr	r3, [sp, #24]
 810b45c:	f1a3 0302 	sub.w	r3, r3, #2
 810b460:	bfcc      	ite	gt
 810b462:	2500      	movgt	r5, #0
 810b464:	2501      	movle	r5, #1
 810b466:	2b03      	cmp	r3, #3
 810b468:	f200 8087 	bhi.w	810b57a <_dtoa_r+0x30a>
 810b46c:	e8df f003 	tbb	[pc, r3]
 810b470:	59383a2d 	.word	0x59383a2d
 810b474:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810b478:	441d      	add	r5, r3
 810b47a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810b47e:	2b20      	cmp	r3, #32
 810b480:	bfc1      	itttt	gt
 810b482:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810b486:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810b48a:	fa0b f303 	lslgt.w	r3, fp, r3
 810b48e:	fa26 f000 	lsrgt.w	r0, r6, r0
 810b492:	bfda      	itte	le
 810b494:	f1c3 0320 	rsble	r3, r3, #32
 810b498:	fa06 f003 	lslle.w	r0, r6, r3
 810b49c:	4318      	orrgt	r0, r3
 810b49e:	f7f5 f8b9 	bl	8100614 <__aeabi_ui2d>
 810b4a2:	2301      	movs	r3, #1
 810b4a4:	4606      	mov	r6, r0
 810b4a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810b4aa:	3d01      	subs	r5, #1
 810b4ac:	930e      	str	r3, [sp, #56]	; 0x38
 810b4ae:	e76a      	b.n	810b386 <_dtoa_r+0x116>
 810b4b0:	2301      	movs	r3, #1
 810b4b2:	e7b2      	b.n	810b41a <_dtoa_r+0x1aa>
 810b4b4:	900b      	str	r0, [sp, #44]	; 0x2c
 810b4b6:	e7b1      	b.n	810b41c <_dtoa_r+0x1ac>
 810b4b8:	9b04      	ldr	r3, [sp, #16]
 810b4ba:	9a00      	ldr	r2, [sp, #0]
 810b4bc:	1a9b      	subs	r3, r3, r2
 810b4be:	9304      	str	r3, [sp, #16]
 810b4c0:	4253      	negs	r3, r2
 810b4c2:	9307      	str	r3, [sp, #28]
 810b4c4:	2300      	movs	r3, #0
 810b4c6:	930a      	str	r3, [sp, #40]	; 0x28
 810b4c8:	e7bf      	b.n	810b44a <_dtoa_r+0x1da>
 810b4ca:	2300      	movs	r3, #0
 810b4cc:	9308      	str	r3, [sp, #32]
 810b4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b4d0:	2b00      	cmp	r3, #0
 810b4d2:	dc55      	bgt.n	810b580 <_dtoa_r+0x310>
 810b4d4:	2301      	movs	r3, #1
 810b4d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810b4da:	461a      	mov	r2, r3
 810b4dc:	9209      	str	r2, [sp, #36]	; 0x24
 810b4de:	e00c      	b.n	810b4fa <_dtoa_r+0x28a>
 810b4e0:	2301      	movs	r3, #1
 810b4e2:	e7f3      	b.n	810b4cc <_dtoa_r+0x25c>
 810b4e4:	2300      	movs	r3, #0
 810b4e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b4e8:	9308      	str	r3, [sp, #32]
 810b4ea:	9b00      	ldr	r3, [sp, #0]
 810b4ec:	4413      	add	r3, r2
 810b4ee:	9302      	str	r3, [sp, #8]
 810b4f0:	3301      	adds	r3, #1
 810b4f2:	2b01      	cmp	r3, #1
 810b4f4:	9303      	str	r3, [sp, #12]
 810b4f6:	bfb8      	it	lt
 810b4f8:	2301      	movlt	r3, #1
 810b4fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810b4fc:	2200      	movs	r2, #0
 810b4fe:	6042      	str	r2, [r0, #4]
 810b500:	2204      	movs	r2, #4
 810b502:	f102 0614 	add.w	r6, r2, #20
 810b506:	429e      	cmp	r6, r3
 810b508:	6841      	ldr	r1, [r0, #4]
 810b50a:	d93d      	bls.n	810b588 <_dtoa_r+0x318>
 810b50c:	4620      	mov	r0, r4
 810b50e:	f001 fa49 	bl	810c9a4 <_Balloc>
 810b512:	9001      	str	r0, [sp, #4]
 810b514:	2800      	cmp	r0, #0
 810b516:	d13b      	bne.n	810b590 <_dtoa_r+0x320>
 810b518:	4b11      	ldr	r3, [pc, #68]	; (810b560 <_dtoa_r+0x2f0>)
 810b51a:	4602      	mov	r2, r0
 810b51c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810b520:	e6c0      	b.n	810b2a4 <_dtoa_r+0x34>
 810b522:	2301      	movs	r3, #1
 810b524:	e7df      	b.n	810b4e6 <_dtoa_r+0x276>
 810b526:	bf00      	nop
 810b528:	636f4361 	.word	0x636f4361
 810b52c:	3fd287a7 	.word	0x3fd287a7
 810b530:	8b60c8b3 	.word	0x8b60c8b3
 810b534:	3fc68a28 	.word	0x3fc68a28
 810b538:	509f79fb 	.word	0x509f79fb
 810b53c:	3fd34413 	.word	0x3fd34413
 810b540:	0810e26e 	.word	0x0810e26e
 810b544:	0810e285 	.word	0x0810e285
 810b548:	7ff00000 	.word	0x7ff00000
 810b54c:	0810e26a 	.word	0x0810e26a
 810b550:	0810e261 	.word	0x0810e261
 810b554:	0810e0e1 	.word	0x0810e0e1
 810b558:	3ff80000 	.word	0x3ff80000
 810b55c:	0810e458 	.word	0x0810e458
 810b560:	0810e2e0 	.word	0x0810e2e0
 810b564:	2501      	movs	r5, #1
 810b566:	2300      	movs	r3, #0
 810b568:	9306      	str	r3, [sp, #24]
 810b56a:	9508      	str	r5, [sp, #32]
 810b56c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810b570:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810b574:	2200      	movs	r2, #0
 810b576:	2312      	movs	r3, #18
 810b578:	e7b0      	b.n	810b4dc <_dtoa_r+0x26c>
 810b57a:	2301      	movs	r3, #1
 810b57c:	9308      	str	r3, [sp, #32]
 810b57e:	e7f5      	b.n	810b56c <_dtoa_r+0x2fc>
 810b580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b582:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810b586:	e7b8      	b.n	810b4fa <_dtoa_r+0x28a>
 810b588:	3101      	adds	r1, #1
 810b58a:	6041      	str	r1, [r0, #4]
 810b58c:	0052      	lsls	r2, r2, #1
 810b58e:	e7b8      	b.n	810b502 <_dtoa_r+0x292>
 810b590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b592:	9a01      	ldr	r2, [sp, #4]
 810b594:	601a      	str	r2, [r3, #0]
 810b596:	9b03      	ldr	r3, [sp, #12]
 810b598:	2b0e      	cmp	r3, #14
 810b59a:	f200 809d 	bhi.w	810b6d8 <_dtoa_r+0x468>
 810b59e:	2d00      	cmp	r5, #0
 810b5a0:	f000 809a 	beq.w	810b6d8 <_dtoa_r+0x468>
 810b5a4:	9b00      	ldr	r3, [sp, #0]
 810b5a6:	2b00      	cmp	r3, #0
 810b5a8:	dd32      	ble.n	810b610 <_dtoa_r+0x3a0>
 810b5aa:	4ab7      	ldr	r2, [pc, #732]	; (810b888 <_dtoa_r+0x618>)
 810b5ac:	f003 030f 	and.w	r3, r3, #15
 810b5b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810b5b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b5b8:	9b00      	ldr	r3, [sp, #0]
 810b5ba:	05d8      	lsls	r0, r3, #23
 810b5bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 810b5c0:	d516      	bpl.n	810b5f0 <_dtoa_r+0x380>
 810b5c2:	4bb2      	ldr	r3, [pc, #712]	; (810b88c <_dtoa_r+0x61c>)
 810b5c4:	ec51 0b19 	vmov	r0, r1, d9
 810b5c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810b5cc:	f7f5 f9c6 	bl	810095c <__aeabi_ddiv>
 810b5d0:	f007 070f 	and.w	r7, r7, #15
 810b5d4:	4682      	mov	sl, r0
 810b5d6:	468b      	mov	fp, r1
 810b5d8:	2503      	movs	r5, #3
 810b5da:	4eac      	ldr	r6, [pc, #688]	; (810b88c <_dtoa_r+0x61c>)
 810b5dc:	b957      	cbnz	r7, 810b5f4 <_dtoa_r+0x384>
 810b5de:	4642      	mov	r2, r8
 810b5e0:	464b      	mov	r3, r9
 810b5e2:	4650      	mov	r0, sl
 810b5e4:	4659      	mov	r1, fp
 810b5e6:	f7f5 f9b9 	bl	810095c <__aeabi_ddiv>
 810b5ea:	4682      	mov	sl, r0
 810b5ec:	468b      	mov	fp, r1
 810b5ee:	e028      	b.n	810b642 <_dtoa_r+0x3d2>
 810b5f0:	2502      	movs	r5, #2
 810b5f2:	e7f2      	b.n	810b5da <_dtoa_r+0x36a>
 810b5f4:	07f9      	lsls	r1, r7, #31
 810b5f6:	d508      	bpl.n	810b60a <_dtoa_r+0x39a>
 810b5f8:	4640      	mov	r0, r8
 810b5fa:	4649      	mov	r1, r9
 810b5fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 810b600:	f7f5 f882 	bl	8100708 <__aeabi_dmul>
 810b604:	3501      	adds	r5, #1
 810b606:	4680      	mov	r8, r0
 810b608:	4689      	mov	r9, r1
 810b60a:	107f      	asrs	r7, r7, #1
 810b60c:	3608      	adds	r6, #8
 810b60e:	e7e5      	b.n	810b5dc <_dtoa_r+0x36c>
 810b610:	f000 809b 	beq.w	810b74a <_dtoa_r+0x4da>
 810b614:	9b00      	ldr	r3, [sp, #0]
 810b616:	4f9d      	ldr	r7, [pc, #628]	; (810b88c <_dtoa_r+0x61c>)
 810b618:	425e      	negs	r6, r3
 810b61a:	4b9b      	ldr	r3, [pc, #620]	; (810b888 <_dtoa_r+0x618>)
 810b61c:	f006 020f 	and.w	r2, r6, #15
 810b620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b624:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b628:	ec51 0b19 	vmov	r0, r1, d9
 810b62c:	f7f5 f86c 	bl	8100708 <__aeabi_dmul>
 810b630:	1136      	asrs	r6, r6, #4
 810b632:	4682      	mov	sl, r0
 810b634:	468b      	mov	fp, r1
 810b636:	2300      	movs	r3, #0
 810b638:	2502      	movs	r5, #2
 810b63a:	2e00      	cmp	r6, #0
 810b63c:	d17a      	bne.n	810b734 <_dtoa_r+0x4c4>
 810b63e:	2b00      	cmp	r3, #0
 810b640:	d1d3      	bne.n	810b5ea <_dtoa_r+0x37a>
 810b642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b644:	2b00      	cmp	r3, #0
 810b646:	f000 8082 	beq.w	810b74e <_dtoa_r+0x4de>
 810b64a:	4b91      	ldr	r3, [pc, #580]	; (810b890 <_dtoa_r+0x620>)
 810b64c:	2200      	movs	r2, #0
 810b64e:	4650      	mov	r0, sl
 810b650:	4659      	mov	r1, fp
 810b652:	f7f5 facb 	bl	8100bec <__aeabi_dcmplt>
 810b656:	2800      	cmp	r0, #0
 810b658:	d079      	beq.n	810b74e <_dtoa_r+0x4de>
 810b65a:	9b03      	ldr	r3, [sp, #12]
 810b65c:	2b00      	cmp	r3, #0
 810b65e:	d076      	beq.n	810b74e <_dtoa_r+0x4de>
 810b660:	9b02      	ldr	r3, [sp, #8]
 810b662:	2b00      	cmp	r3, #0
 810b664:	dd36      	ble.n	810b6d4 <_dtoa_r+0x464>
 810b666:	9b00      	ldr	r3, [sp, #0]
 810b668:	4650      	mov	r0, sl
 810b66a:	4659      	mov	r1, fp
 810b66c:	1e5f      	subs	r7, r3, #1
 810b66e:	2200      	movs	r2, #0
 810b670:	4b88      	ldr	r3, [pc, #544]	; (810b894 <_dtoa_r+0x624>)
 810b672:	f7f5 f849 	bl	8100708 <__aeabi_dmul>
 810b676:	9e02      	ldr	r6, [sp, #8]
 810b678:	4682      	mov	sl, r0
 810b67a:	468b      	mov	fp, r1
 810b67c:	3501      	adds	r5, #1
 810b67e:	4628      	mov	r0, r5
 810b680:	f7f4 ffd8 	bl	8100634 <__aeabi_i2d>
 810b684:	4652      	mov	r2, sl
 810b686:	465b      	mov	r3, fp
 810b688:	f7f5 f83e 	bl	8100708 <__aeabi_dmul>
 810b68c:	4b82      	ldr	r3, [pc, #520]	; (810b898 <_dtoa_r+0x628>)
 810b68e:	2200      	movs	r2, #0
 810b690:	f7f4 fe84 	bl	810039c <__adddf3>
 810b694:	46d0      	mov	r8, sl
 810b696:	46d9      	mov	r9, fp
 810b698:	4682      	mov	sl, r0
 810b69a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 810b69e:	2e00      	cmp	r6, #0
 810b6a0:	d158      	bne.n	810b754 <_dtoa_r+0x4e4>
 810b6a2:	4b7e      	ldr	r3, [pc, #504]	; (810b89c <_dtoa_r+0x62c>)
 810b6a4:	2200      	movs	r2, #0
 810b6a6:	4640      	mov	r0, r8
 810b6a8:	4649      	mov	r1, r9
 810b6aa:	f7f4 fe75 	bl	8100398 <__aeabi_dsub>
 810b6ae:	4652      	mov	r2, sl
 810b6b0:	465b      	mov	r3, fp
 810b6b2:	4680      	mov	r8, r0
 810b6b4:	4689      	mov	r9, r1
 810b6b6:	f7f5 fab7 	bl	8100c28 <__aeabi_dcmpgt>
 810b6ba:	2800      	cmp	r0, #0
 810b6bc:	f040 8295 	bne.w	810bbea <_dtoa_r+0x97a>
 810b6c0:	4652      	mov	r2, sl
 810b6c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810b6c6:	4640      	mov	r0, r8
 810b6c8:	4649      	mov	r1, r9
 810b6ca:	f7f5 fa8f 	bl	8100bec <__aeabi_dcmplt>
 810b6ce:	2800      	cmp	r0, #0
 810b6d0:	f040 8289 	bne.w	810bbe6 <_dtoa_r+0x976>
 810b6d4:	ec5b ab19 	vmov	sl, fp, d9
 810b6d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810b6da:	2b00      	cmp	r3, #0
 810b6dc:	f2c0 8148 	blt.w	810b970 <_dtoa_r+0x700>
 810b6e0:	9a00      	ldr	r2, [sp, #0]
 810b6e2:	2a0e      	cmp	r2, #14
 810b6e4:	f300 8144 	bgt.w	810b970 <_dtoa_r+0x700>
 810b6e8:	4b67      	ldr	r3, [pc, #412]	; (810b888 <_dtoa_r+0x618>)
 810b6ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b6ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b6f4:	2b00      	cmp	r3, #0
 810b6f6:	f280 80d5 	bge.w	810b8a4 <_dtoa_r+0x634>
 810b6fa:	9b03      	ldr	r3, [sp, #12]
 810b6fc:	2b00      	cmp	r3, #0
 810b6fe:	f300 80d1 	bgt.w	810b8a4 <_dtoa_r+0x634>
 810b702:	f040 826f 	bne.w	810bbe4 <_dtoa_r+0x974>
 810b706:	4b65      	ldr	r3, [pc, #404]	; (810b89c <_dtoa_r+0x62c>)
 810b708:	2200      	movs	r2, #0
 810b70a:	4640      	mov	r0, r8
 810b70c:	4649      	mov	r1, r9
 810b70e:	f7f4 fffb 	bl	8100708 <__aeabi_dmul>
 810b712:	4652      	mov	r2, sl
 810b714:	465b      	mov	r3, fp
 810b716:	f7f5 fa7d 	bl	8100c14 <__aeabi_dcmpge>
 810b71a:	9e03      	ldr	r6, [sp, #12]
 810b71c:	4637      	mov	r7, r6
 810b71e:	2800      	cmp	r0, #0
 810b720:	f040 8245 	bne.w	810bbae <_dtoa_r+0x93e>
 810b724:	9d01      	ldr	r5, [sp, #4]
 810b726:	2331      	movs	r3, #49	; 0x31
 810b728:	f805 3b01 	strb.w	r3, [r5], #1
 810b72c:	9b00      	ldr	r3, [sp, #0]
 810b72e:	3301      	adds	r3, #1
 810b730:	9300      	str	r3, [sp, #0]
 810b732:	e240      	b.n	810bbb6 <_dtoa_r+0x946>
 810b734:	07f2      	lsls	r2, r6, #31
 810b736:	d505      	bpl.n	810b744 <_dtoa_r+0x4d4>
 810b738:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b73c:	f7f4 ffe4 	bl	8100708 <__aeabi_dmul>
 810b740:	3501      	adds	r5, #1
 810b742:	2301      	movs	r3, #1
 810b744:	1076      	asrs	r6, r6, #1
 810b746:	3708      	adds	r7, #8
 810b748:	e777      	b.n	810b63a <_dtoa_r+0x3ca>
 810b74a:	2502      	movs	r5, #2
 810b74c:	e779      	b.n	810b642 <_dtoa_r+0x3d2>
 810b74e:	9f00      	ldr	r7, [sp, #0]
 810b750:	9e03      	ldr	r6, [sp, #12]
 810b752:	e794      	b.n	810b67e <_dtoa_r+0x40e>
 810b754:	9901      	ldr	r1, [sp, #4]
 810b756:	4b4c      	ldr	r3, [pc, #304]	; (810b888 <_dtoa_r+0x618>)
 810b758:	4431      	add	r1, r6
 810b75a:	910d      	str	r1, [sp, #52]	; 0x34
 810b75c:	9908      	ldr	r1, [sp, #32]
 810b75e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810b762:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810b766:	2900      	cmp	r1, #0
 810b768:	d043      	beq.n	810b7f2 <_dtoa_r+0x582>
 810b76a:	494d      	ldr	r1, [pc, #308]	; (810b8a0 <_dtoa_r+0x630>)
 810b76c:	2000      	movs	r0, #0
 810b76e:	f7f5 f8f5 	bl	810095c <__aeabi_ddiv>
 810b772:	4652      	mov	r2, sl
 810b774:	465b      	mov	r3, fp
 810b776:	f7f4 fe0f 	bl	8100398 <__aeabi_dsub>
 810b77a:	9d01      	ldr	r5, [sp, #4]
 810b77c:	4682      	mov	sl, r0
 810b77e:	468b      	mov	fp, r1
 810b780:	4649      	mov	r1, r9
 810b782:	4640      	mov	r0, r8
 810b784:	f7f5 fa70 	bl	8100c68 <__aeabi_d2iz>
 810b788:	4606      	mov	r6, r0
 810b78a:	f7f4 ff53 	bl	8100634 <__aeabi_i2d>
 810b78e:	4602      	mov	r2, r0
 810b790:	460b      	mov	r3, r1
 810b792:	4640      	mov	r0, r8
 810b794:	4649      	mov	r1, r9
 810b796:	f7f4 fdff 	bl	8100398 <__aeabi_dsub>
 810b79a:	3630      	adds	r6, #48	; 0x30
 810b79c:	f805 6b01 	strb.w	r6, [r5], #1
 810b7a0:	4652      	mov	r2, sl
 810b7a2:	465b      	mov	r3, fp
 810b7a4:	4680      	mov	r8, r0
 810b7a6:	4689      	mov	r9, r1
 810b7a8:	f7f5 fa20 	bl	8100bec <__aeabi_dcmplt>
 810b7ac:	2800      	cmp	r0, #0
 810b7ae:	d163      	bne.n	810b878 <_dtoa_r+0x608>
 810b7b0:	4642      	mov	r2, r8
 810b7b2:	464b      	mov	r3, r9
 810b7b4:	4936      	ldr	r1, [pc, #216]	; (810b890 <_dtoa_r+0x620>)
 810b7b6:	2000      	movs	r0, #0
 810b7b8:	f7f4 fdee 	bl	8100398 <__aeabi_dsub>
 810b7bc:	4652      	mov	r2, sl
 810b7be:	465b      	mov	r3, fp
 810b7c0:	f7f5 fa14 	bl	8100bec <__aeabi_dcmplt>
 810b7c4:	2800      	cmp	r0, #0
 810b7c6:	f040 80b5 	bne.w	810b934 <_dtoa_r+0x6c4>
 810b7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b7cc:	429d      	cmp	r5, r3
 810b7ce:	d081      	beq.n	810b6d4 <_dtoa_r+0x464>
 810b7d0:	4b30      	ldr	r3, [pc, #192]	; (810b894 <_dtoa_r+0x624>)
 810b7d2:	2200      	movs	r2, #0
 810b7d4:	4650      	mov	r0, sl
 810b7d6:	4659      	mov	r1, fp
 810b7d8:	f7f4 ff96 	bl	8100708 <__aeabi_dmul>
 810b7dc:	4b2d      	ldr	r3, [pc, #180]	; (810b894 <_dtoa_r+0x624>)
 810b7de:	4682      	mov	sl, r0
 810b7e0:	468b      	mov	fp, r1
 810b7e2:	4640      	mov	r0, r8
 810b7e4:	4649      	mov	r1, r9
 810b7e6:	2200      	movs	r2, #0
 810b7e8:	f7f4 ff8e 	bl	8100708 <__aeabi_dmul>
 810b7ec:	4680      	mov	r8, r0
 810b7ee:	4689      	mov	r9, r1
 810b7f0:	e7c6      	b.n	810b780 <_dtoa_r+0x510>
 810b7f2:	4650      	mov	r0, sl
 810b7f4:	4659      	mov	r1, fp
 810b7f6:	f7f4 ff87 	bl	8100708 <__aeabi_dmul>
 810b7fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b7fc:	9d01      	ldr	r5, [sp, #4]
 810b7fe:	930f      	str	r3, [sp, #60]	; 0x3c
 810b800:	4682      	mov	sl, r0
 810b802:	468b      	mov	fp, r1
 810b804:	4649      	mov	r1, r9
 810b806:	4640      	mov	r0, r8
 810b808:	f7f5 fa2e 	bl	8100c68 <__aeabi_d2iz>
 810b80c:	4606      	mov	r6, r0
 810b80e:	f7f4 ff11 	bl	8100634 <__aeabi_i2d>
 810b812:	3630      	adds	r6, #48	; 0x30
 810b814:	4602      	mov	r2, r0
 810b816:	460b      	mov	r3, r1
 810b818:	4640      	mov	r0, r8
 810b81a:	4649      	mov	r1, r9
 810b81c:	f7f4 fdbc 	bl	8100398 <__aeabi_dsub>
 810b820:	f805 6b01 	strb.w	r6, [r5], #1
 810b824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b826:	429d      	cmp	r5, r3
 810b828:	4680      	mov	r8, r0
 810b82a:	4689      	mov	r9, r1
 810b82c:	f04f 0200 	mov.w	r2, #0
 810b830:	d124      	bne.n	810b87c <_dtoa_r+0x60c>
 810b832:	4b1b      	ldr	r3, [pc, #108]	; (810b8a0 <_dtoa_r+0x630>)
 810b834:	4650      	mov	r0, sl
 810b836:	4659      	mov	r1, fp
 810b838:	f7f4 fdb0 	bl	810039c <__adddf3>
 810b83c:	4602      	mov	r2, r0
 810b83e:	460b      	mov	r3, r1
 810b840:	4640      	mov	r0, r8
 810b842:	4649      	mov	r1, r9
 810b844:	f7f5 f9f0 	bl	8100c28 <__aeabi_dcmpgt>
 810b848:	2800      	cmp	r0, #0
 810b84a:	d173      	bne.n	810b934 <_dtoa_r+0x6c4>
 810b84c:	4652      	mov	r2, sl
 810b84e:	465b      	mov	r3, fp
 810b850:	4913      	ldr	r1, [pc, #76]	; (810b8a0 <_dtoa_r+0x630>)
 810b852:	2000      	movs	r0, #0
 810b854:	f7f4 fda0 	bl	8100398 <__aeabi_dsub>
 810b858:	4602      	mov	r2, r0
 810b85a:	460b      	mov	r3, r1
 810b85c:	4640      	mov	r0, r8
 810b85e:	4649      	mov	r1, r9
 810b860:	f7f5 f9c4 	bl	8100bec <__aeabi_dcmplt>
 810b864:	2800      	cmp	r0, #0
 810b866:	f43f af35 	beq.w	810b6d4 <_dtoa_r+0x464>
 810b86a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810b86c:	1e6b      	subs	r3, r5, #1
 810b86e:	930f      	str	r3, [sp, #60]	; 0x3c
 810b870:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810b874:	2b30      	cmp	r3, #48	; 0x30
 810b876:	d0f8      	beq.n	810b86a <_dtoa_r+0x5fa>
 810b878:	9700      	str	r7, [sp, #0]
 810b87a:	e049      	b.n	810b910 <_dtoa_r+0x6a0>
 810b87c:	4b05      	ldr	r3, [pc, #20]	; (810b894 <_dtoa_r+0x624>)
 810b87e:	f7f4 ff43 	bl	8100708 <__aeabi_dmul>
 810b882:	4680      	mov	r8, r0
 810b884:	4689      	mov	r9, r1
 810b886:	e7bd      	b.n	810b804 <_dtoa_r+0x594>
 810b888:	0810e458 	.word	0x0810e458
 810b88c:	0810e430 	.word	0x0810e430
 810b890:	3ff00000 	.word	0x3ff00000
 810b894:	40240000 	.word	0x40240000
 810b898:	401c0000 	.word	0x401c0000
 810b89c:	40140000 	.word	0x40140000
 810b8a0:	3fe00000 	.word	0x3fe00000
 810b8a4:	9d01      	ldr	r5, [sp, #4]
 810b8a6:	4656      	mov	r6, sl
 810b8a8:	465f      	mov	r7, fp
 810b8aa:	4642      	mov	r2, r8
 810b8ac:	464b      	mov	r3, r9
 810b8ae:	4630      	mov	r0, r6
 810b8b0:	4639      	mov	r1, r7
 810b8b2:	f7f5 f853 	bl	810095c <__aeabi_ddiv>
 810b8b6:	f7f5 f9d7 	bl	8100c68 <__aeabi_d2iz>
 810b8ba:	4682      	mov	sl, r0
 810b8bc:	f7f4 feba 	bl	8100634 <__aeabi_i2d>
 810b8c0:	4642      	mov	r2, r8
 810b8c2:	464b      	mov	r3, r9
 810b8c4:	f7f4 ff20 	bl	8100708 <__aeabi_dmul>
 810b8c8:	4602      	mov	r2, r0
 810b8ca:	460b      	mov	r3, r1
 810b8cc:	4630      	mov	r0, r6
 810b8ce:	4639      	mov	r1, r7
 810b8d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 810b8d4:	f7f4 fd60 	bl	8100398 <__aeabi_dsub>
 810b8d8:	f805 6b01 	strb.w	r6, [r5], #1
 810b8dc:	9e01      	ldr	r6, [sp, #4]
 810b8de:	9f03      	ldr	r7, [sp, #12]
 810b8e0:	1bae      	subs	r6, r5, r6
 810b8e2:	42b7      	cmp	r7, r6
 810b8e4:	4602      	mov	r2, r0
 810b8e6:	460b      	mov	r3, r1
 810b8e8:	d135      	bne.n	810b956 <_dtoa_r+0x6e6>
 810b8ea:	f7f4 fd57 	bl	810039c <__adddf3>
 810b8ee:	4642      	mov	r2, r8
 810b8f0:	464b      	mov	r3, r9
 810b8f2:	4606      	mov	r6, r0
 810b8f4:	460f      	mov	r7, r1
 810b8f6:	f7f5 f997 	bl	8100c28 <__aeabi_dcmpgt>
 810b8fa:	b9d0      	cbnz	r0, 810b932 <_dtoa_r+0x6c2>
 810b8fc:	4642      	mov	r2, r8
 810b8fe:	464b      	mov	r3, r9
 810b900:	4630      	mov	r0, r6
 810b902:	4639      	mov	r1, r7
 810b904:	f7f5 f968 	bl	8100bd8 <__aeabi_dcmpeq>
 810b908:	b110      	cbz	r0, 810b910 <_dtoa_r+0x6a0>
 810b90a:	f01a 0f01 	tst.w	sl, #1
 810b90e:	d110      	bne.n	810b932 <_dtoa_r+0x6c2>
 810b910:	4620      	mov	r0, r4
 810b912:	ee18 1a10 	vmov	r1, s16
 810b916:	f001 f885 	bl	810ca24 <_Bfree>
 810b91a:	2300      	movs	r3, #0
 810b91c:	9800      	ldr	r0, [sp, #0]
 810b91e:	702b      	strb	r3, [r5, #0]
 810b920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b922:	3001      	adds	r0, #1
 810b924:	6018      	str	r0, [r3, #0]
 810b926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b928:	2b00      	cmp	r3, #0
 810b92a:	f43f acf1 	beq.w	810b310 <_dtoa_r+0xa0>
 810b92e:	601d      	str	r5, [r3, #0]
 810b930:	e4ee      	b.n	810b310 <_dtoa_r+0xa0>
 810b932:	9f00      	ldr	r7, [sp, #0]
 810b934:	462b      	mov	r3, r5
 810b936:	461d      	mov	r5, r3
 810b938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b93c:	2a39      	cmp	r2, #57	; 0x39
 810b93e:	d106      	bne.n	810b94e <_dtoa_r+0x6de>
 810b940:	9a01      	ldr	r2, [sp, #4]
 810b942:	429a      	cmp	r2, r3
 810b944:	d1f7      	bne.n	810b936 <_dtoa_r+0x6c6>
 810b946:	9901      	ldr	r1, [sp, #4]
 810b948:	2230      	movs	r2, #48	; 0x30
 810b94a:	3701      	adds	r7, #1
 810b94c:	700a      	strb	r2, [r1, #0]
 810b94e:	781a      	ldrb	r2, [r3, #0]
 810b950:	3201      	adds	r2, #1
 810b952:	701a      	strb	r2, [r3, #0]
 810b954:	e790      	b.n	810b878 <_dtoa_r+0x608>
 810b956:	4ba6      	ldr	r3, [pc, #664]	; (810bbf0 <_dtoa_r+0x980>)
 810b958:	2200      	movs	r2, #0
 810b95a:	f7f4 fed5 	bl	8100708 <__aeabi_dmul>
 810b95e:	2200      	movs	r2, #0
 810b960:	2300      	movs	r3, #0
 810b962:	4606      	mov	r6, r0
 810b964:	460f      	mov	r7, r1
 810b966:	f7f5 f937 	bl	8100bd8 <__aeabi_dcmpeq>
 810b96a:	2800      	cmp	r0, #0
 810b96c:	d09d      	beq.n	810b8aa <_dtoa_r+0x63a>
 810b96e:	e7cf      	b.n	810b910 <_dtoa_r+0x6a0>
 810b970:	9a08      	ldr	r2, [sp, #32]
 810b972:	2a00      	cmp	r2, #0
 810b974:	f000 80d7 	beq.w	810bb26 <_dtoa_r+0x8b6>
 810b978:	9a06      	ldr	r2, [sp, #24]
 810b97a:	2a01      	cmp	r2, #1
 810b97c:	f300 80ba 	bgt.w	810baf4 <_dtoa_r+0x884>
 810b980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810b982:	2a00      	cmp	r2, #0
 810b984:	f000 80b2 	beq.w	810baec <_dtoa_r+0x87c>
 810b988:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810b98c:	9e07      	ldr	r6, [sp, #28]
 810b98e:	9d04      	ldr	r5, [sp, #16]
 810b990:	9a04      	ldr	r2, [sp, #16]
 810b992:	441a      	add	r2, r3
 810b994:	9204      	str	r2, [sp, #16]
 810b996:	9a05      	ldr	r2, [sp, #20]
 810b998:	2101      	movs	r1, #1
 810b99a:	441a      	add	r2, r3
 810b99c:	4620      	mov	r0, r4
 810b99e:	9205      	str	r2, [sp, #20]
 810b9a0:	f001 f942 	bl	810cc28 <__i2b>
 810b9a4:	4607      	mov	r7, r0
 810b9a6:	2d00      	cmp	r5, #0
 810b9a8:	dd0c      	ble.n	810b9c4 <_dtoa_r+0x754>
 810b9aa:	9b05      	ldr	r3, [sp, #20]
 810b9ac:	2b00      	cmp	r3, #0
 810b9ae:	dd09      	ble.n	810b9c4 <_dtoa_r+0x754>
 810b9b0:	42ab      	cmp	r3, r5
 810b9b2:	9a04      	ldr	r2, [sp, #16]
 810b9b4:	bfa8      	it	ge
 810b9b6:	462b      	movge	r3, r5
 810b9b8:	1ad2      	subs	r2, r2, r3
 810b9ba:	9204      	str	r2, [sp, #16]
 810b9bc:	9a05      	ldr	r2, [sp, #20]
 810b9be:	1aed      	subs	r5, r5, r3
 810b9c0:	1ad3      	subs	r3, r2, r3
 810b9c2:	9305      	str	r3, [sp, #20]
 810b9c4:	9b07      	ldr	r3, [sp, #28]
 810b9c6:	b31b      	cbz	r3, 810ba10 <_dtoa_r+0x7a0>
 810b9c8:	9b08      	ldr	r3, [sp, #32]
 810b9ca:	2b00      	cmp	r3, #0
 810b9cc:	f000 80af 	beq.w	810bb2e <_dtoa_r+0x8be>
 810b9d0:	2e00      	cmp	r6, #0
 810b9d2:	dd13      	ble.n	810b9fc <_dtoa_r+0x78c>
 810b9d4:	4639      	mov	r1, r7
 810b9d6:	4632      	mov	r2, r6
 810b9d8:	4620      	mov	r0, r4
 810b9da:	f001 f9e5 	bl	810cda8 <__pow5mult>
 810b9de:	ee18 2a10 	vmov	r2, s16
 810b9e2:	4601      	mov	r1, r0
 810b9e4:	4607      	mov	r7, r0
 810b9e6:	4620      	mov	r0, r4
 810b9e8:	f001 f934 	bl	810cc54 <__multiply>
 810b9ec:	ee18 1a10 	vmov	r1, s16
 810b9f0:	4680      	mov	r8, r0
 810b9f2:	4620      	mov	r0, r4
 810b9f4:	f001 f816 	bl	810ca24 <_Bfree>
 810b9f8:	ee08 8a10 	vmov	s16, r8
 810b9fc:	9b07      	ldr	r3, [sp, #28]
 810b9fe:	1b9a      	subs	r2, r3, r6
 810ba00:	d006      	beq.n	810ba10 <_dtoa_r+0x7a0>
 810ba02:	ee18 1a10 	vmov	r1, s16
 810ba06:	4620      	mov	r0, r4
 810ba08:	f001 f9ce 	bl	810cda8 <__pow5mult>
 810ba0c:	ee08 0a10 	vmov	s16, r0
 810ba10:	2101      	movs	r1, #1
 810ba12:	4620      	mov	r0, r4
 810ba14:	f001 f908 	bl	810cc28 <__i2b>
 810ba18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ba1a:	2b00      	cmp	r3, #0
 810ba1c:	4606      	mov	r6, r0
 810ba1e:	f340 8088 	ble.w	810bb32 <_dtoa_r+0x8c2>
 810ba22:	461a      	mov	r2, r3
 810ba24:	4601      	mov	r1, r0
 810ba26:	4620      	mov	r0, r4
 810ba28:	f001 f9be 	bl	810cda8 <__pow5mult>
 810ba2c:	9b06      	ldr	r3, [sp, #24]
 810ba2e:	2b01      	cmp	r3, #1
 810ba30:	4606      	mov	r6, r0
 810ba32:	f340 8081 	ble.w	810bb38 <_dtoa_r+0x8c8>
 810ba36:	f04f 0800 	mov.w	r8, #0
 810ba3a:	6933      	ldr	r3, [r6, #16]
 810ba3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810ba40:	6918      	ldr	r0, [r3, #16]
 810ba42:	f001 f8a1 	bl	810cb88 <__hi0bits>
 810ba46:	f1c0 0020 	rsb	r0, r0, #32
 810ba4a:	9b05      	ldr	r3, [sp, #20]
 810ba4c:	4418      	add	r0, r3
 810ba4e:	f010 001f 	ands.w	r0, r0, #31
 810ba52:	f000 8092 	beq.w	810bb7a <_dtoa_r+0x90a>
 810ba56:	f1c0 0320 	rsb	r3, r0, #32
 810ba5a:	2b04      	cmp	r3, #4
 810ba5c:	f340 808a 	ble.w	810bb74 <_dtoa_r+0x904>
 810ba60:	f1c0 001c 	rsb	r0, r0, #28
 810ba64:	9b04      	ldr	r3, [sp, #16]
 810ba66:	4403      	add	r3, r0
 810ba68:	9304      	str	r3, [sp, #16]
 810ba6a:	9b05      	ldr	r3, [sp, #20]
 810ba6c:	4403      	add	r3, r0
 810ba6e:	4405      	add	r5, r0
 810ba70:	9305      	str	r3, [sp, #20]
 810ba72:	9b04      	ldr	r3, [sp, #16]
 810ba74:	2b00      	cmp	r3, #0
 810ba76:	dd07      	ble.n	810ba88 <_dtoa_r+0x818>
 810ba78:	ee18 1a10 	vmov	r1, s16
 810ba7c:	461a      	mov	r2, r3
 810ba7e:	4620      	mov	r0, r4
 810ba80:	f001 f9ec 	bl	810ce5c <__lshift>
 810ba84:	ee08 0a10 	vmov	s16, r0
 810ba88:	9b05      	ldr	r3, [sp, #20]
 810ba8a:	2b00      	cmp	r3, #0
 810ba8c:	dd05      	ble.n	810ba9a <_dtoa_r+0x82a>
 810ba8e:	4631      	mov	r1, r6
 810ba90:	461a      	mov	r2, r3
 810ba92:	4620      	mov	r0, r4
 810ba94:	f001 f9e2 	bl	810ce5c <__lshift>
 810ba98:	4606      	mov	r6, r0
 810ba9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ba9c:	2b00      	cmp	r3, #0
 810ba9e:	d06e      	beq.n	810bb7e <_dtoa_r+0x90e>
 810baa0:	ee18 0a10 	vmov	r0, s16
 810baa4:	4631      	mov	r1, r6
 810baa6:	f001 fa49 	bl	810cf3c <__mcmp>
 810baaa:	2800      	cmp	r0, #0
 810baac:	da67      	bge.n	810bb7e <_dtoa_r+0x90e>
 810baae:	9b00      	ldr	r3, [sp, #0]
 810bab0:	3b01      	subs	r3, #1
 810bab2:	ee18 1a10 	vmov	r1, s16
 810bab6:	9300      	str	r3, [sp, #0]
 810bab8:	220a      	movs	r2, #10
 810baba:	2300      	movs	r3, #0
 810babc:	4620      	mov	r0, r4
 810babe:	f000 ffd3 	bl	810ca68 <__multadd>
 810bac2:	9b08      	ldr	r3, [sp, #32]
 810bac4:	ee08 0a10 	vmov	s16, r0
 810bac8:	2b00      	cmp	r3, #0
 810baca:	f000 81b1 	beq.w	810be30 <_dtoa_r+0xbc0>
 810bace:	2300      	movs	r3, #0
 810bad0:	4639      	mov	r1, r7
 810bad2:	220a      	movs	r2, #10
 810bad4:	4620      	mov	r0, r4
 810bad6:	f000 ffc7 	bl	810ca68 <__multadd>
 810bada:	9b02      	ldr	r3, [sp, #8]
 810badc:	2b00      	cmp	r3, #0
 810bade:	4607      	mov	r7, r0
 810bae0:	f300 808e 	bgt.w	810bc00 <_dtoa_r+0x990>
 810bae4:	9b06      	ldr	r3, [sp, #24]
 810bae6:	2b02      	cmp	r3, #2
 810bae8:	dc51      	bgt.n	810bb8e <_dtoa_r+0x91e>
 810baea:	e089      	b.n	810bc00 <_dtoa_r+0x990>
 810baec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810baee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810baf2:	e74b      	b.n	810b98c <_dtoa_r+0x71c>
 810baf4:	9b03      	ldr	r3, [sp, #12]
 810baf6:	1e5e      	subs	r6, r3, #1
 810baf8:	9b07      	ldr	r3, [sp, #28]
 810bafa:	42b3      	cmp	r3, r6
 810bafc:	bfbf      	itttt	lt
 810bafe:	9b07      	ldrlt	r3, [sp, #28]
 810bb00:	9607      	strlt	r6, [sp, #28]
 810bb02:	1af2      	sublt	r2, r6, r3
 810bb04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 810bb06:	bfb6      	itet	lt
 810bb08:	189b      	addlt	r3, r3, r2
 810bb0a:	1b9e      	subge	r6, r3, r6
 810bb0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 810bb0e:	9b03      	ldr	r3, [sp, #12]
 810bb10:	bfb8      	it	lt
 810bb12:	2600      	movlt	r6, #0
 810bb14:	2b00      	cmp	r3, #0
 810bb16:	bfb7      	itett	lt
 810bb18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 810bb1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 810bb20:	1a9d      	sublt	r5, r3, r2
 810bb22:	2300      	movlt	r3, #0
 810bb24:	e734      	b.n	810b990 <_dtoa_r+0x720>
 810bb26:	9e07      	ldr	r6, [sp, #28]
 810bb28:	9d04      	ldr	r5, [sp, #16]
 810bb2a:	9f08      	ldr	r7, [sp, #32]
 810bb2c:	e73b      	b.n	810b9a6 <_dtoa_r+0x736>
 810bb2e:	9a07      	ldr	r2, [sp, #28]
 810bb30:	e767      	b.n	810ba02 <_dtoa_r+0x792>
 810bb32:	9b06      	ldr	r3, [sp, #24]
 810bb34:	2b01      	cmp	r3, #1
 810bb36:	dc18      	bgt.n	810bb6a <_dtoa_r+0x8fa>
 810bb38:	f1ba 0f00 	cmp.w	sl, #0
 810bb3c:	d115      	bne.n	810bb6a <_dtoa_r+0x8fa>
 810bb3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810bb42:	b993      	cbnz	r3, 810bb6a <_dtoa_r+0x8fa>
 810bb44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810bb48:	0d1b      	lsrs	r3, r3, #20
 810bb4a:	051b      	lsls	r3, r3, #20
 810bb4c:	b183      	cbz	r3, 810bb70 <_dtoa_r+0x900>
 810bb4e:	9b04      	ldr	r3, [sp, #16]
 810bb50:	3301      	adds	r3, #1
 810bb52:	9304      	str	r3, [sp, #16]
 810bb54:	9b05      	ldr	r3, [sp, #20]
 810bb56:	3301      	adds	r3, #1
 810bb58:	9305      	str	r3, [sp, #20]
 810bb5a:	f04f 0801 	mov.w	r8, #1
 810bb5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810bb60:	2b00      	cmp	r3, #0
 810bb62:	f47f af6a 	bne.w	810ba3a <_dtoa_r+0x7ca>
 810bb66:	2001      	movs	r0, #1
 810bb68:	e76f      	b.n	810ba4a <_dtoa_r+0x7da>
 810bb6a:	f04f 0800 	mov.w	r8, #0
 810bb6e:	e7f6      	b.n	810bb5e <_dtoa_r+0x8ee>
 810bb70:	4698      	mov	r8, r3
 810bb72:	e7f4      	b.n	810bb5e <_dtoa_r+0x8ee>
 810bb74:	f43f af7d 	beq.w	810ba72 <_dtoa_r+0x802>
 810bb78:	4618      	mov	r0, r3
 810bb7a:	301c      	adds	r0, #28
 810bb7c:	e772      	b.n	810ba64 <_dtoa_r+0x7f4>
 810bb7e:	9b03      	ldr	r3, [sp, #12]
 810bb80:	2b00      	cmp	r3, #0
 810bb82:	dc37      	bgt.n	810bbf4 <_dtoa_r+0x984>
 810bb84:	9b06      	ldr	r3, [sp, #24]
 810bb86:	2b02      	cmp	r3, #2
 810bb88:	dd34      	ble.n	810bbf4 <_dtoa_r+0x984>
 810bb8a:	9b03      	ldr	r3, [sp, #12]
 810bb8c:	9302      	str	r3, [sp, #8]
 810bb8e:	9b02      	ldr	r3, [sp, #8]
 810bb90:	b96b      	cbnz	r3, 810bbae <_dtoa_r+0x93e>
 810bb92:	4631      	mov	r1, r6
 810bb94:	2205      	movs	r2, #5
 810bb96:	4620      	mov	r0, r4
 810bb98:	f000 ff66 	bl	810ca68 <__multadd>
 810bb9c:	4601      	mov	r1, r0
 810bb9e:	4606      	mov	r6, r0
 810bba0:	ee18 0a10 	vmov	r0, s16
 810bba4:	f001 f9ca 	bl	810cf3c <__mcmp>
 810bba8:	2800      	cmp	r0, #0
 810bbaa:	f73f adbb 	bgt.w	810b724 <_dtoa_r+0x4b4>
 810bbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bbb0:	9d01      	ldr	r5, [sp, #4]
 810bbb2:	43db      	mvns	r3, r3
 810bbb4:	9300      	str	r3, [sp, #0]
 810bbb6:	f04f 0800 	mov.w	r8, #0
 810bbba:	4631      	mov	r1, r6
 810bbbc:	4620      	mov	r0, r4
 810bbbe:	f000 ff31 	bl	810ca24 <_Bfree>
 810bbc2:	2f00      	cmp	r7, #0
 810bbc4:	f43f aea4 	beq.w	810b910 <_dtoa_r+0x6a0>
 810bbc8:	f1b8 0f00 	cmp.w	r8, #0
 810bbcc:	d005      	beq.n	810bbda <_dtoa_r+0x96a>
 810bbce:	45b8      	cmp	r8, r7
 810bbd0:	d003      	beq.n	810bbda <_dtoa_r+0x96a>
 810bbd2:	4641      	mov	r1, r8
 810bbd4:	4620      	mov	r0, r4
 810bbd6:	f000 ff25 	bl	810ca24 <_Bfree>
 810bbda:	4639      	mov	r1, r7
 810bbdc:	4620      	mov	r0, r4
 810bbde:	f000 ff21 	bl	810ca24 <_Bfree>
 810bbe2:	e695      	b.n	810b910 <_dtoa_r+0x6a0>
 810bbe4:	2600      	movs	r6, #0
 810bbe6:	4637      	mov	r7, r6
 810bbe8:	e7e1      	b.n	810bbae <_dtoa_r+0x93e>
 810bbea:	9700      	str	r7, [sp, #0]
 810bbec:	4637      	mov	r7, r6
 810bbee:	e599      	b.n	810b724 <_dtoa_r+0x4b4>
 810bbf0:	40240000 	.word	0x40240000
 810bbf4:	9b08      	ldr	r3, [sp, #32]
 810bbf6:	2b00      	cmp	r3, #0
 810bbf8:	f000 80ca 	beq.w	810bd90 <_dtoa_r+0xb20>
 810bbfc:	9b03      	ldr	r3, [sp, #12]
 810bbfe:	9302      	str	r3, [sp, #8]
 810bc00:	2d00      	cmp	r5, #0
 810bc02:	dd05      	ble.n	810bc10 <_dtoa_r+0x9a0>
 810bc04:	4639      	mov	r1, r7
 810bc06:	462a      	mov	r2, r5
 810bc08:	4620      	mov	r0, r4
 810bc0a:	f001 f927 	bl	810ce5c <__lshift>
 810bc0e:	4607      	mov	r7, r0
 810bc10:	f1b8 0f00 	cmp.w	r8, #0
 810bc14:	d05b      	beq.n	810bcce <_dtoa_r+0xa5e>
 810bc16:	6879      	ldr	r1, [r7, #4]
 810bc18:	4620      	mov	r0, r4
 810bc1a:	f000 fec3 	bl	810c9a4 <_Balloc>
 810bc1e:	4605      	mov	r5, r0
 810bc20:	b928      	cbnz	r0, 810bc2e <_dtoa_r+0x9be>
 810bc22:	4b87      	ldr	r3, [pc, #540]	; (810be40 <_dtoa_r+0xbd0>)
 810bc24:	4602      	mov	r2, r0
 810bc26:	f240 21ea 	movw	r1, #746	; 0x2ea
 810bc2a:	f7ff bb3b 	b.w	810b2a4 <_dtoa_r+0x34>
 810bc2e:	693a      	ldr	r2, [r7, #16]
 810bc30:	3202      	adds	r2, #2
 810bc32:	0092      	lsls	r2, r2, #2
 810bc34:	f107 010c 	add.w	r1, r7, #12
 810bc38:	300c      	adds	r0, #12
 810bc3a:	f7fd fbdb 	bl	81093f4 <memcpy>
 810bc3e:	2201      	movs	r2, #1
 810bc40:	4629      	mov	r1, r5
 810bc42:	4620      	mov	r0, r4
 810bc44:	f001 f90a 	bl	810ce5c <__lshift>
 810bc48:	9b01      	ldr	r3, [sp, #4]
 810bc4a:	f103 0901 	add.w	r9, r3, #1
 810bc4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810bc52:	4413      	add	r3, r2
 810bc54:	9305      	str	r3, [sp, #20]
 810bc56:	f00a 0301 	and.w	r3, sl, #1
 810bc5a:	46b8      	mov	r8, r7
 810bc5c:	9304      	str	r3, [sp, #16]
 810bc5e:	4607      	mov	r7, r0
 810bc60:	4631      	mov	r1, r6
 810bc62:	ee18 0a10 	vmov	r0, s16
 810bc66:	f7ff fa77 	bl	810b158 <quorem>
 810bc6a:	4641      	mov	r1, r8
 810bc6c:	9002      	str	r0, [sp, #8]
 810bc6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810bc72:	ee18 0a10 	vmov	r0, s16
 810bc76:	f001 f961 	bl	810cf3c <__mcmp>
 810bc7a:	463a      	mov	r2, r7
 810bc7c:	9003      	str	r0, [sp, #12]
 810bc7e:	4631      	mov	r1, r6
 810bc80:	4620      	mov	r0, r4
 810bc82:	f001 f977 	bl	810cf74 <__mdiff>
 810bc86:	68c2      	ldr	r2, [r0, #12]
 810bc88:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 810bc8c:	4605      	mov	r5, r0
 810bc8e:	bb02      	cbnz	r2, 810bcd2 <_dtoa_r+0xa62>
 810bc90:	4601      	mov	r1, r0
 810bc92:	ee18 0a10 	vmov	r0, s16
 810bc96:	f001 f951 	bl	810cf3c <__mcmp>
 810bc9a:	4602      	mov	r2, r0
 810bc9c:	4629      	mov	r1, r5
 810bc9e:	4620      	mov	r0, r4
 810bca0:	9207      	str	r2, [sp, #28]
 810bca2:	f000 febf 	bl	810ca24 <_Bfree>
 810bca6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810bcaa:	ea43 0102 	orr.w	r1, r3, r2
 810bcae:	9b04      	ldr	r3, [sp, #16]
 810bcb0:	430b      	orrs	r3, r1
 810bcb2:	464d      	mov	r5, r9
 810bcb4:	d10f      	bne.n	810bcd6 <_dtoa_r+0xa66>
 810bcb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810bcba:	d02a      	beq.n	810bd12 <_dtoa_r+0xaa2>
 810bcbc:	9b03      	ldr	r3, [sp, #12]
 810bcbe:	2b00      	cmp	r3, #0
 810bcc0:	dd02      	ble.n	810bcc8 <_dtoa_r+0xa58>
 810bcc2:	9b02      	ldr	r3, [sp, #8]
 810bcc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 810bcc8:	f88b a000 	strb.w	sl, [fp]
 810bccc:	e775      	b.n	810bbba <_dtoa_r+0x94a>
 810bcce:	4638      	mov	r0, r7
 810bcd0:	e7ba      	b.n	810bc48 <_dtoa_r+0x9d8>
 810bcd2:	2201      	movs	r2, #1
 810bcd4:	e7e2      	b.n	810bc9c <_dtoa_r+0xa2c>
 810bcd6:	9b03      	ldr	r3, [sp, #12]
 810bcd8:	2b00      	cmp	r3, #0
 810bcda:	db04      	blt.n	810bce6 <_dtoa_r+0xa76>
 810bcdc:	9906      	ldr	r1, [sp, #24]
 810bcde:	430b      	orrs	r3, r1
 810bce0:	9904      	ldr	r1, [sp, #16]
 810bce2:	430b      	orrs	r3, r1
 810bce4:	d122      	bne.n	810bd2c <_dtoa_r+0xabc>
 810bce6:	2a00      	cmp	r2, #0
 810bce8:	ddee      	ble.n	810bcc8 <_dtoa_r+0xa58>
 810bcea:	ee18 1a10 	vmov	r1, s16
 810bcee:	2201      	movs	r2, #1
 810bcf0:	4620      	mov	r0, r4
 810bcf2:	f001 f8b3 	bl	810ce5c <__lshift>
 810bcf6:	4631      	mov	r1, r6
 810bcf8:	ee08 0a10 	vmov	s16, r0
 810bcfc:	f001 f91e 	bl	810cf3c <__mcmp>
 810bd00:	2800      	cmp	r0, #0
 810bd02:	dc03      	bgt.n	810bd0c <_dtoa_r+0xa9c>
 810bd04:	d1e0      	bne.n	810bcc8 <_dtoa_r+0xa58>
 810bd06:	f01a 0f01 	tst.w	sl, #1
 810bd0a:	d0dd      	beq.n	810bcc8 <_dtoa_r+0xa58>
 810bd0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810bd10:	d1d7      	bne.n	810bcc2 <_dtoa_r+0xa52>
 810bd12:	2339      	movs	r3, #57	; 0x39
 810bd14:	f88b 3000 	strb.w	r3, [fp]
 810bd18:	462b      	mov	r3, r5
 810bd1a:	461d      	mov	r5, r3
 810bd1c:	3b01      	subs	r3, #1
 810bd1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810bd22:	2a39      	cmp	r2, #57	; 0x39
 810bd24:	d071      	beq.n	810be0a <_dtoa_r+0xb9a>
 810bd26:	3201      	adds	r2, #1
 810bd28:	701a      	strb	r2, [r3, #0]
 810bd2a:	e746      	b.n	810bbba <_dtoa_r+0x94a>
 810bd2c:	2a00      	cmp	r2, #0
 810bd2e:	dd07      	ble.n	810bd40 <_dtoa_r+0xad0>
 810bd30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810bd34:	d0ed      	beq.n	810bd12 <_dtoa_r+0xaa2>
 810bd36:	f10a 0301 	add.w	r3, sl, #1
 810bd3a:	f88b 3000 	strb.w	r3, [fp]
 810bd3e:	e73c      	b.n	810bbba <_dtoa_r+0x94a>
 810bd40:	9b05      	ldr	r3, [sp, #20]
 810bd42:	f809 ac01 	strb.w	sl, [r9, #-1]
 810bd46:	4599      	cmp	r9, r3
 810bd48:	d047      	beq.n	810bdda <_dtoa_r+0xb6a>
 810bd4a:	ee18 1a10 	vmov	r1, s16
 810bd4e:	2300      	movs	r3, #0
 810bd50:	220a      	movs	r2, #10
 810bd52:	4620      	mov	r0, r4
 810bd54:	f000 fe88 	bl	810ca68 <__multadd>
 810bd58:	45b8      	cmp	r8, r7
 810bd5a:	ee08 0a10 	vmov	s16, r0
 810bd5e:	f04f 0300 	mov.w	r3, #0
 810bd62:	f04f 020a 	mov.w	r2, #10
 810bd66:	4641      	mov	r1, r8
 810bd68:	4620      	mov	r0, r4
 810bd6a:	d106      	bne.n	810bd7a <_dtoa_r+0xb0a>
 810bd6c:	f000 fe7c 	bl	810ca68 <__multadd>
 810bd70:	4680      	mov	r8, r0
 810bd72:	4607      	mov	r7, r0
 810bd74:	f109 0901 	add.w	r9, r9, #1
 810bd78:	e772      	b.n	810bc60 <_dtoa_r+0x9f0>
 810bd7a:	f000 fe75 	bl	810ca68 <__multadd>
 810bd7e:	4639      	mov	r1, r7
 810bd80:	4680      	mov	r8, r0
 810bd82:	2300      	movs	r3, #0
 810bd84:	220a      	movs	r2, #10
 810bd86:	4620      	mov	r0, r4
 810bd88:	f000 fe6e 	bl	810ca68 <__multadd>
 810bd8c:	4607      	mov	r7, r0
 810bd8e:	e7f1      	b.n	810bd74 <_dtoa_r+0xb04>
 810bd90:	9b03      	ldr	r3, [sp, #12]
 810bd92:	9302      	str	r3, [sp, #8]
 810bd94:	9d01      	ldr	r5, [sp, #4]
 810bd96:	ee18 0a10 	vmov	r0, s16
 810bd9a:	4631      	mov	r1, r6
 810bd9c:	f7ff f9dc 	bl	810b158 <quorem>
 810bda0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810bda4:	9b01      	ldr	r3, [sp, #4]
 810bda6:	f805 ab01 	strb.w	sl, [r5], #1
 810bdaa:	1aea      	subs	r2, r5, r3
 810bdac:	9b02      	ldr	r3, [sp, #8]
 810bdae:	4293      	cmp	r3, r2
 810bdb0:	dd09      	ble.n	810bdc6 <_dtoa_r+0xb56>
 810bdb2:	ee18 1a10 	vmov	r1, s16
 810bdb6:	2300      	movs	r3, #0
 810bdb8:	220a      	movs	r2, #10
 810bdba:	4620      	mov	r0, r4
 810bdbc:	f000 fe54 	bl	810ca68 <__multadd>
 810bdc0:	ee08 0a10 	vmov	s16, r0
 810bdc4:	e7e7      	b.n	810bd96 <_dtoa_r+0xb26>
 810bdc6:	9b02      	ldr	r3, [sp, #8]
 810bdc8:	2b00      	cmp	r3, #0
 810bdca:	bfc8      	it	gt
 810bdcc:	461d      	movgt	r5, r3
 810bdce:	9b01      	ldr	r3, [sp, #4]
 810bdd0:	bfd8      	it	le
 810bdd2:	2501      	movle	r5, #1
 810bdd4:	441d      	add	r5, r3
 810bdd6:	f04f 0800 	mov.w	r8, #0
 810bdda:	ee18 1a10 	vmov	r1, s16
 810bdde:	2201      	movs	r2, #1
 810bde0:	4620      	mov	r0, r4
 810bde2:	f001 f83b 	bl	810ce5c <__lshift>
 810bde6:	4631      	mov	r1, r6
 810bde8:	ee08 0a10 	vmov	s16, r0
 810bdec:	f001 f8a6 	bl	810cf3c <__mcmp>
 810bdf0:	2800      	cmp	r0, #0
 810bdf2:	dc91      	bgt.n	810bd18 <_dtoa_r+0xaa8>
 810bdf4:	d102      	bne.n	810bdfc <_dtoa_r+0xb8c>
 810bdf6:	f01a 0f01 	tst.w	sl, #1
 810bdfa:	d18d      	bne.n	810bd18 <_dtoa_r+0xaa8>
 810bdfc:	462b      	mov	r3, r5
 810bdfe:	461d      	mov	r5, r3
 810be00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810be04:	2a30      	cmp	r2, #48	; 0x30
 810be06:	d0fa      	beq.n	810bdfe <_dtoa_r+0xb8e>
 810be08:	e6d7      	b.n	810bbba <_dtoa_r+0x94a>
 810be0a:	9a01      	ldr	r2, [sp, #4]
 810be0c:	429a      	cmp	r2, r3
 810be0e:	d184      	bne.n	810bd1a <_dtoa_r+0xaaa>
 810be10:	9b00      	ldr	r3, [sp, #0]
 810be12:	3301      	adds	r3, #1
 810be14:	9300      	str	r3, [sp, #0]
 810be16:	2331      	movs	r3, #49	; 0x31
 810be18:	7013      	strb	r3, [r2, #0]
 810be1a:	e6ce      	b.n	810bbba <_dtoa_r+0x94a>
 810be1c:	4b09      	ldr	r3, [pc, #36]	; (810be44 <_dtoa_r+0xbd4>)
 810be1e:	f7ff ba95 	b.w	810b34c <_dtoa_r+0xdc>
 810be22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810be24:	2b00      	cmp	r3, #0
 810be26:	f47f aa6e 	bne.w	810b306 <_dtoa_r+0x96>
 810be2a:	4b07      	ldr	r3, [pc, #28]	; (810be48 <_dtoa_r+0xbd8>)
 810be2c:	f7ff ba8e 	b.w	810b34c <_dtoa_r+0xdc>
 810be30:	9b02      	ldr	r3, [sp, #8]
 810be32:	2b00      	cmp	r3, #0
 810be34:	dcae      	bgt.n	810bd94 <_dtoa_r+0xb24>
 810be36:	9b06      	ldr	r3, [sp, #24]
 810be38:	2b02      	cmp	r3, #2
 810be3a:	f73f aea8 	bgt.w	810bb8e <_dtoa_r+0x91e>
 810be3e:	e7a9      	b.n	810bd94 <_dtoa_r+0xb24>
 810be40:	0810e2e0 	.word	0x0810e2e0
 810be44:	0810e0e0 	.word	0x0810e0e0
 810be48:	0810e261 	.word	0x0810e261

0810be4c <__sflush_r>:
 810be4c:	898a      	ldrh	r2, [r1, #12]
 810be4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810be52:	4605      	mov	r5, r0
 810be54:	0710      	lsls	r0, r2, #28
 810be56:	460c      	mov	r4, r1
 810be58:	d458      	bmi.n	810bf0c <__sflush_r+0xc0>
 810be5a:	684b      	ldr	r3, [r1, #4]
 810be5c:	2b00      	cmp	r3, #0
 810be5e:	dc05      	bgt.n	810be6c <__sflush_r+0x20>
 810be60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810be62:	2b00      	cmp	r3, #0
 810be64:	dc02      	bgt.n	810be6c <__sflush_r+0x20>
 810be66:	2000      	movs	r0, #0
 810be68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810be6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810be6e:	2e00      	cmp	r6, #0
 810be70:	d0f9      	beq.n	810be66 <__sflush_r+0x1a>
 810be72:	2300      	movs	r3, #0
 810be74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810be78:	682f      	ldr	r7, [r5, #0]
 810be7a:	602b      	str	r3, [r5, #0]
 810be7c:	d032      	beq.n	810bee4 <__sflush_r+0x98>
 810be7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810be80:	89a3      	ldrh	r3, [r4, #12]
 810be82:	075a      	lsls	r2, r3, #29
 810be84:	d505      	bpl.n	810be92 <__sflush_r+0x46>
 810be86:	6863      	ldr	r3, [r4, #4]
 810be88:	1ac0      	subs	r0, r0, r3
 810be8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810be8c:	b10b      	cbz	r3, 810be92 <__sflush_r+0x46>
 810be8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810be90:	1ac0      	subs	r0, r0, r3
 810be92:	2300      	movs	r3, #0
 810be94:	4602      	mov	r2, r0
 810be96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810be98:	6a21      	ldr	r1, [r4, #32]
 810be9a:	4628      	mov	r0, r5
 810be9c:	47b0      	blx	r6
 810be9e:	1c43      	adds	r3, r0, #1
 810bea0:	89a3      	ldrh	r3, [r4, #12]
 810bea2:	d106      	bne.n	810beb2 <__sflush_r+0x66>
 810bea4:	6829      	ldr	r1, [r5, #0]
 810bea6:	291d      	cmp	r1, #29
 810bea8:	d82c      	bhi.n	810bf04 <__sflush_r+0xb8>
 810beaa:	4a2a      	ldr	r2, [pc, #168]	; (810bf54 <__sflush_r+0x108>)
 810beac:	40ca      	lsrs	r2, r1
 810beae:	07d6      	lsls	r6, r2, #31
 810beb0:	d528      	bpl.n	810bf04 <__sflush_r+0xb8>
 810beb2:	2200      	movs	r2, #0
 810beb4:	6062      	str	r2, [r4, #4]
 810beb6:	04d9      	lsls	r1, r3, #19
 810beb8:	6922      	ldr	r2, [r4, #16]
 810beba:	6022      	str	r2, [r4, #0]
 810bebc:	d504      	bpl.n	810bec8 <__sflush_r+0x7c>
 810bebe:	1c42      	adds	r2, r0, #1
 810bec0:	d101      	bne.n	810bec6 <__sflush_r+0x7a>
 810bec2:	682b      	ldr	r3, [r5, #0]
 810bec4:	b903      	cbnz	r3, 810bec8 <__sflush_r+0x7c>
 810bec6:	6560      	str	r0, [r4, #84]	; 0x54
 810bec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810beca:	602f      	str	r7, [r5, #0]
 810becc:	2900      	cmp	r1, #0
 810bece:	d0ca      	beq.n	810be66 <__sflush_r+0x1a>
 810bed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810bed4:	4299      	cmp	r1, r3
 810bed6:	d002      	beq.n	810bede <__sflush_r+0x92>
 810bed8:	4628      	mov	r0, r5
 810beda:	f001 fa3b 	bl	810d354 <_free_r>
 810bede:	2000      	movs	r0, #0
 810bee0:	6360      	str	r0, [r4, #52]	; 0x34
 810bee2:	e7c1      	b.n	810be68 <__sflush_r+0x1c>
 810bee4:	6a21      	ldr	r1, [r4, #32]
 810bee6:	2301      	movs	r3, #1
 810bee8:	4628      	mov	r0, r5
 810beea:	47b0      	blx	r6
 810beec:	1c41      	adds	r1, r0, #1
 810beee:	d1c7      	bne.n	810be80 <__sflush_r+0x34>
 810bef0:	682b      	ldr	r3, [r5, #0]
 810bef2:	2b00      	cmp	r3, #0
 810bef4:	d0c4      	beq.n	810be80 <__sflush_r+0x34>
 810bef6:	2b1d      	cmp	r3, #29
 810bef8:	d001      	beq.n	810befe <__sflush_r+0xb2>
 810befa:	2b16      	cmp	r3, #22
 810befc:	d101      	bne.n	810bf02 <__sflush_r+0xb6>
 810befe:	602f      	str	r7, [r5, #0]
 810bf00:	e7b1      	b.n	810be66 <__sflush_r+0x1a>
 810bf02:	89a3      	ldrh	r3, [r4, #12]
 810bf04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810bf08:	81a3      	strh	r3, [r4, #12]
 810bf0a:	e7ad      	b.n	810be68 <__sflush_r+0x1c>
 810bf0c:	690f      	ldr	r7, [r1, #16]
 810bf0e:	2f00      	cmp	r7, #0
 810bf10:	d0a9      	beq.n	810be66 <__sflush_r+0x1a>
 810bf12:	0793      	lsls	r3, r2, #30
 810bf14:	680e      	ldr	r6, [r1, #0]
 810bf16:	bf08      	it	eq
 810bf18:	694b      	ldreq	r3, [r1, #20]
 810bf1a:	600f      	str	r7, [r1, #0]
 810bf1c:	bf18      	it	ne
 810bf1e:	2300      	movne	r3, #0
 810bf20:	eba6 0807 	sub.w	r8, r6, r7
 810bf24:	608b      	str	r3, [r1, #8]
 810bf26:	f1b8 0f00 	cmp.w	r8, #0
 810bf2a:	dd9c      	ble.n	810be66 <__sflush_r+0x1a>
 810bf2c:	6a21      	ldr	r1, [r4, #32]
 810bf2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810bf30:	4643      	mov	r3, r8
 810bf32:	463a      	mov	r2, r7
 810bf34:	4628      	mov	r0, r5
 810bf36:	47b0      	blx	r6
 810bf38:	2800      	cmp	r0, #0
 810bf3a:	dc06      	bgt.n	810bf4a <__sflush_r+0xfe>
 810bf3c:	89a3      	ldrh	r3, [r4, #12]
 810bf3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810bf42:	81a3      	strh	r3, [r4, #12]
 810bf44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810bf48:	e78e      	b.n	810be68 <__sflush_r+0x1c>
 810bf4a:	4407      	add	r7, r0
 810bf4c:	eba8 0800 	sub.w	r8, r8, r0
 810bf50:	e7e9      	b.n	810bf26 <__sflush_r+0xda>
 810bf52:	bf00      	nop
 810bf54:	20400001 	.word	0x20400001

0810bf58 <_fflush_r>:
 810bf58:	b538      	push	{r3, r4, r5, lr}
 810bf5a:	690b      	ldr	r3, [r1, #16]
 810bf5c:	4605      	mov	r5, r0
 810bf5e:	460c      	mov	r4, r1
 810bf60:	b913      	cbnz	r3, 810bf68 <_fflush_r+0x10>
 810bf62:	2500      	movs	r5, #0
 810bf64:	4628      	mov	r0, r5
 810bf66:	bd38      	pop	{r3, r4, r5, pc}
 810bf68:	b118      	cbz	r0, 810bf72 <_fflush_r+0x1a>
 810bf6a:	6983      	ldr	r3, [r0, #24]
 810bf6c:	b90b      	cbnz	r3, 810bf72 <_fflush_r+0x1a>
 810bf6e:	f000 f887 	bl	810c080 <__sinit>
 810bf72:	4b14      	ldr	r3, [pc, #80]	; (810bfc4 <_fflush_r+0x6c>)
 810bf74:	429c      	cmp	r4, r3
 810bf76:	d11b      	bne.n	810bfb0 <_fflush_r+0x58>
 810bf78:	686c      	ldr	r4, [r5, #4]
 810bf7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810bf7e:	2b00      	cmp	r3, #0
 810bf80:	d0ef      	beq.n	810bf62 <_fflush_r+0xa>
 810bf82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810bf84:	07d0      	lsls	r0, r2, #31
 810bf86:	d404      	bmi.n	810bf92 <_fflush_r+0x3a>
 810bf88:	0599      	lsls	r1, r3, #22
 810bf8a:	d402      	bmi.n	810bf92 <_fflush_r+0x3a>
 810bf8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810bf8e:	f000 fc88 	bl	810c8a2 <__retarget_lock_acquire_recursive>
 810bf92:	4628      	mov	r0, r5
 810bf94:	4621      	mov	r1, r4
 810bf96:	f7ff ff59 	bl	810be4c <__sflush_r>
 810bf9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810bf9c:	07da      	lsls	r2, r3, #31
 810bf9e:	4605      	mov	r5, r0
 810bfa0:	d4e0      	bmi.n	810bf64 <_fflush_r+0xc>
 810bfa2:	89a3      	ldrh	r3, [r4, #12]
 810bfa4:	059b      	lsls	r3, r3, #22
 810bfa6:	d4dd      	bmi.n	810bf64 <_fflush_r+0xc>
 810bfa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810bfaa:	f000 fc7b 	bl	810c8a4 <__retarget_lock_release_recursive>
 810bfae:	e7d9      	b.n	810bf64 <_fflush_r+0xc>
 810bfb0:	4b05      	ldr	r3, [pc, #20]	; (810bfc8 <_fflush_r+0x70>)
 810bfb2:	429c      	cmp	r4, r3
 810bfb4:	d101      	bne.n	810bfba <_fflush_r+0x62>
 810bfb6:	68ac      	ldr	r4, [r5, #8]
 810bfb8:	e7df      	b.n	810bf7a <_fflush_r+0x22>
 810bfba:	4b04      	ldr	r3, [pc, #16]	; (810bfcc <_fflush_r+0x74>)
 810bfbc:	429c      	cmp	r4, r3
 810bfbe:	bf08      	it	eq
 810bfc0:	68ec      	ldreq	r4, [r5, #12]
 810bfc2:	e7da      	b.n	810bf7a <_fflush_r+0x22>
 810bfc4:	0810e314 	.word	0x0810e314
 810bfc8:	0810e334 	.word	0x0810e334
 810bfcc:	0810e2f4 	.word	0x0810e2f4

0810bfd0 <std>:
 810bfd0:	2300      	movs	r3, #0
 810bfd2:	b510      	push	{r4, lr}
 810bfd4:	4604      	mov	r4, r0
 810bfd6:	e9c0 3300 	strd	r3, r3, [r0]
 810bfda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810bfde:	6083      	str	r3, [r0, #8]
 810bfe0:	8181      	strh	r1, [r0, #12]
 810bfe2:	6643      	str	r3, [r0, #100]	; 0x64
 810bfe4:	81c2      	strh	r2, [r0, #14]
 810bfe6:	6183      	str	r3, [r0, #24]
 810bfe8:	4619      	mov	r1, r3
 810bfea:	2208      	movs	r2, #8
 810bfec:	305c      	adds	r0, #92	; 0x5c
 810bfee:	f7fd fa0f 	bl	8109410 <memset>
 810bff2:	4b05      	ldr	r3, [pc, #20]	; (810c008 <std+0x38>)
 810bff4:	6263      	str	r3, [r4, #36]	; 0x24
 810bff6:	4b05      	ldr	r3, [pc, #20]	; (810c00c <std+0x3c>)
 810bff8:	62a3      	str	r3, [r4, #40]	; 0x28
 810bffa:	4b05      	ldr	r3, [pc, #20]	; (810c010 <std+0x40>)
 810bffc:	62e3      	str	r3, [r4, #44]	; 0x2c
 810bffe:	4b05      	ldr	r3, [pc, #20]	; (810c014 <std+0x44>)
 810c000:	6224      	str	r4, [r4, #32]
 810c002:	6323      	str	r3, [r4, #48]	; 0x30
 810c004:	bd10      	pop	{r4, pc}
 810c006:	bf00      	nop
 810c008:	0810dab1 	.word	0x0810dab1
 810c00c:	0810dad3 	.word	0x0810dad3
 810c010:	0810db0b 	.word	0x0810db0b
 810c014:	0810db2f 	.word	0x0810db2f

0810c018 <_cleanup_r>:
 810c018:	4901      	ldr	r1, [pc, #4]	; (810c020 <_cleanup_r+0x8>)
 810c01a:	f000 b8af 	b.w	810c17c <_fwalk_reent>
 810c01e:	bf00      	nop
 810c020:	0810bf59 	.word	0x0810bf59

0810c024 <__sfmoreglue>:
 810c024:	b570      	push	{r4, r5, r6, lr}
 810c026:	2268      	movs	r2, #104	; 0x68
 810c028:	1e4d      	subs	r5, r1, #1
 810c02a:	4355      	muls	r5, r2
 810c02c:	460e      	mov	r6, r1
 810c02e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810c032:	f001 f9fb 	bl	810d42c <_malloc_r>
 810c036:	4604      	mov	r4, r0
 810c038:	b140      	cbz	r0, 810c04c <__sfmoreglue+0x28>
 810c03a:	2100      	movs	r1, #0
 810c03c:	e9c0 1600 	strd	r1, r6, [r0]
 810c040:	300c      	adds	r0, #12
 810c042:	60a0      	str	r0, [r4, #8]
 810c044:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810c048:	f7fd f9e2 	bl	8109410 <memset>
 810c04c:	4620      	mov	r0, r4
 810c04e:	bd70      	pop	{r4, r5, r6, pc}

0810c050 <__sfp_lock_acquire>:
 810c050:	4801      	ldr	r0, [pc, #4]	; (810c058 <__sfp_lock_acquire+0x8>)
 810c052:	f000 bc26 	b.w	810c8a2 <__retarget_lock_acquire_recursive>
 810c056:	bf00      	nop
 810c058:	100003c5 	.word	0x100003c5

0810c05c <__sfp_lock_release>:
 810c05c:	4801      	ldr	r0, [pc, #4]	; (810c064 <__sfp_lock_release+0x8>)
 810c05e:	f000 bc21 	b.w	810c8a4 <__retarget_lock_release_recursive>
 810c062:	bf00      	nop
 810c064:	100003c5 	.word	0x100003c5

0810c068 <__sinit_lock_acquire>:
 810c068:	4801      	ldr	r0, [pc, #4]	; (810c070 <__sinit_lock_acquire+0x8>)
 810c06a:	f000 bc1a 	b.w	810c8a2 <__retarget_lock_acquire_recursive>
 810c06e:	bf00      	nop
 810c070:	100003c6 	.word	0x100003c6

0810c074 <__sinit_lock_release>:
 810c074:	4801      	ldr	r0, [pc, #4]	; (810c07c <__sinit_lock_release+0x8>)
 810c076:	f000 bc15 	b.w	810c8a4 <__retarget_lock_release_recursive>
 810c07a:	bf00      	nop
 810c07c:	100003c6 	.word	0x100003c6

0810c080 <__sinit>:
 810c080:	b510      	push	{r4, lr}
 810c082:	4604      	mov	r4, r0
 810c084:	f7ff fff0 	bl	810c068 <__sinit_lock_acquire>
 810c088:	69a3      	ldr	r3, [r4, #24]
 810c08a:	b11b      	cbz	r3, 810c094 <__sinit+0x14>
 810c08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810c090:	f7ff bff0 	b.w	810c074 <__sinit_lock_release>
 810c094:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810c098:	6523      	str	r3, [r4, #80]	; 0x50
 810c09a:	4b13      	ldr	r3, [pc, #76]	; (810c0e8 <__sinit+0x68>)
 810c09c:	4a13      	ldr	r2, [pc, #76]	; (810c0ec <__sinit+0x6c>)
 810c09e:	681b      	ldr	r3, [r3, #0]
 810c0a0:	62a2      	str	r2, [r4, #40]	; 0x28
 810c0a2:	42a3      	cmp	r3, r4
 810c0a4:	bf04      	itt	eq
 810c0a6:	2301      	moveq	r3, #1
 810c0a8:	61a3      	streq	r3, [r4, #24]
 810c0aa:	4620      	mov	r0, r4
 810c0ac:	f000 f820 	bl	810c0f0 <__sfp>
 810c0b0:	6060      	str	r0, [r4, #4]
 810c0b2:	4620      	mov	r0, r4
 810c0b4:	f000 f81c 	bl	810c0f0 <__sfp>
 810c0b8:	60a0      	str	r0, [r4, #8]
 810c0ba:	4620      	mov	r0, r4
 810c0bc:	f000 f818 	bl	810c0f0 <__sfp>
 810c0c0:	2200      	movs	r2, #0
 810c0c2:	60e0      	str	r0, [r4, #12]
 810c0c4:	2104      	movs	r1, #4
 810c0c6:	6860      	ldr	r0, [r4, #4]
 810c0c8:	f7ff ff82 	bl	810bfd0 <std>
 810c0cc:	68a0      	ldr	r0, [r4, #8]
 810c0ce:	2201      	movs	r2, #1
 810c0d0:	2109      	movs	r1, #9
 810c0d2:	f7ff ff7d 	bl	810bfd0 <std>
 810c0d6:	68e0      	ldr	r0, [r4, #12]
 810c0d8:	2202      	movs	r2, #2
 810c0da:	2112      	movs	r1, #18
 810c0dc:	f7ff ff78 	bl	810bfd0 <std>
 810c0e0:	2301      	movs	r3, #1
 810c0e2:	61a3      	str	r3, [r4, #24]
 810c0e4:	e7d2      	b.n	810c08c <__sinit+0xc>
 810c0e6:	bf00      	nop
 810c0e8:	0810e0cc 	.word	0x0810e0cc
 810c0ec:	0810c019 	.word	0x0810c019

0810c0f0 <__sfp>:
 810c0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c0f2:	4607      	mov	r7, r0
 810c0f4:	f7ff ffac 	bl	810c050 <__sfp_lock_acquire>
 810c0f8:	4b1e      	ldr	r3, [pc, #120]	; (810c174 <__sfp+0x84>)
 810c0fa:	681e      	ldr	r6, [r3, #0]
 810c0fc:	69b3      	ldr	r3, [r6, #24]
 810c0fe:	b913      	cbnz	r3, 810c106 <__sfp+0x16>
 810c100:	4630      	mov	r0, r6
 810c102:	f7ff ffbd 	bl	810c080 <__sinit>
 810c106:	3648      	adds	r6, #72	; 0x48
 810c108:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810c10c:	3b01      	subs	r3, #1
 810c10e:	d503      	bpl.n	810c118 <__sfp+0x28>
 810c110:	6833      	ldr	r3, [r6, #0]
 810c112:	b30b      	cbz	r3, 810c158 <__sfp+0x68>
 810c114:	6836      	ldr	r6, [r6, #0]
 810c116:	e7f7      	b.n	810c108 <__sfp+0x18>
 810c118:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810c11c:	b9d5      	cbnz	r5, 810c154 <__sfp+0x64>
 810c11e:	4b16      	ldr	r3, [pc, #88]	; (810c178 <__sfp+0x88>)
 810c120:	60e3      	str	r3, [r4, #12]
 810c122:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810c126:	6665      	str	r5, [r4, #100]	; 0x64
 810c128:	f000 fbba 	bl	810c8a0 <__retarget_lock_init_recursive>
 810c12c:	f7ff ff96 	bl	810c05c <__sfp_lock_release>
 810c130:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810c134:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810c138:	6025      	str	r5, [r4, #0]
 810c13a:	61a5      	str	r5, [r4, #24]
 810c13c:	2208      	movs	r2, #8
 810c13e:	4629      	mov	r1, r5
 810c140:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810c144:	f7fd f964 	bl	8109410 <memset>
 810c148:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810c14c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810c150:	4620      	mov	r0, r4
 810c152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c154:	3468      	adds	r4, #104	; 0x68
 810c156:	e7d9      	b.n	810c10c <__sfp+0x1c>
 810c158:	2104      	movs	r1, #4
 810c15a:	4638      	mov	r0, r7
 810c15c:	f7ff ff62 	bl	810c024 <__sfmoreglue>
 810c160:	4604      	mov	r4, r0
 810c162:	6030      	str	r0, [r6, #0]
 810c164:	2800      	cmp	r0, #0
 810c166:	d1d5      	bne.n	810c114 <__sfp+0x24>
 810c168:	f7ff ff78 	bl	810c05c <__sfp_lock_release>
 810c16c:	230c      	movs	r3, #12
 810c16e:	603b      	str	r3, [r7, #0]
 810c170:	e7ee      	b.n	810c150 <__sfp+0x60>
 810c172:	bf00      	nop
 810c174:	0810e0cc 	.word	0x0810e0cc
 810c178:	ffff0001 	.word	0xffff0001

0810c17c <_fwalk_reent>:
 810c17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c180:	4606      	mov	r6, r0
 810c182:	4688      	mov	r8, r1
 810c184:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810c188:	2700      	movs	r7, #0
 810c18a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810c18e:	f1b9 0901 	subs.w	r9, r9, #1
 810c192:	d505      	bpl.n	810c1a0 <_fwalk_reent+0x24>
 810c194:	6824      	ldr	r4, [r4, #0]
 810c196:	2c00      	cmp	r4, #0
 810c198:	d1f7      	bne.n	810c18a <_fwalk_reent+0xe>
 810c19a:	4638      	mov	r0, r7
 810c19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c1a0:	89ab      	ldrh	r3, [r5, #12]
 810c1a2:	2b01      	cmp	r3, #1
 810c1a4:	d907      	bls.n	810c1b6 <_fwalk_reent+0x3a>
 810c1a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810c1aa:	3301      	adds	r3, #1
 810c1ac:	d003      	beq.n	810c1b6 <_fwalk_reent+0x3a>
 810c1ae:	4629      	mov	r1, r5
 810c1b0:	4630      	mov	r0, r6
 810c1b2:	47c0      	blx	r8
 810c1b4:	4307      	orrs	r7, r0
 810c1b6:	3568      	adds	r5, #104	; 0x68
 810c1b8:	e7e9      	b.n	810c18e <_fwalk_reent+0x12>

0810c1ba <rshift>:
 810c1ba:	6903      	ldr	r3, [r0, #16]
 810c1bc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810c1c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810c1c4:	ea4f 1261 	mov.w	r2, r1, asr #5
 810c1c8:	f100 0414 	add.w	r4, r0, #20
 810c1cc:	dd45      	ble.n	810c25a <rshift+0xa0>
 810c1ce:	f011 011f 	ands.w	r1, r1, #31
 810c1d2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810c1d6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810c1da:	d10c      	bne.n	810c1f6 <rshift+0x3c>
 810c1dc:	f100 0710 	add.w	r7, r0, #16
 810c1e0:	4629      	mov	r1, r5
 810c1e2:	42b1      	cmp	r1, r6
 810c1e4:	d334      	bcc.n	810c250 <rshift+0x96>
 810c1e6:	1a9b      	subs	r3, r3, r2
 810c1e8:	009b      	lsls	r3, r3, #2
 810c1ea:	1eea      	subs	r2, r5, #3
 810c1ec:	4296      	cmp	r6, r2
 810c1ee:	bf38      	it	cc
 810c1f0:	2300      	movcc	r3, #0
 810c1f2:	4423      	add	r3, r4
 810c1f4:	e015      	b.n	810c222 <rshift+0x68>
 810c1f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810c1fa:	f1c1 0820 	rsb	r8, r1, #32
 810c1fe:	40cf      	lsrs	r7, r1
 810c200:	f105 0e04 	add.w	lr, r5, #4
 810c204:	46a1      	mov	r9, r4
 810c206:	4576      	cmp	r6, lr
 810c208:	46f4      	mov	ip, lr
 810c20a:	d815      	bhi.n	810c238 <rshift+0x7e>
 810c20c:	1a9a      	subs	r2, r3, r2
 810c20e:	0092      	lsls	r2, r2, #2
 810c210:	3a04      	subs	r2, #4
 810c212:	3501      	adds	r5, #1
 810c214:	42ae      	cmp	r6, r5
 810c216:	bf38      	it	cc
 810c218:	2200      	movcc	r2, #0
 810c21a:	18a3      	adds	r3, r4, r2
 810c21c:	50a7      	str	r7, [r4, r2]
 810c21e:	b107      	cbz	r7, 810c222 <rshift+0x68>
 810c220:	3304      	adds	r3, #4
 810c222:	1b1a      	subs	r2, r3, r4
 810c224:	42a3      	cmp	r3, r4
 810c226:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810c22a:	bf08      	it	eq
 810c22c:	2300      	moveq	r3, #0
 810c22e:	6102      	str	r2, [r0, #16]
 810c230:	bf08      	it	eq
 810c232:	6143      	streq	r3, [r0, #20]
 810c234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c238:	f8dc c000 	ldr.w	ip, [ip]
 810c23c:	fa0c fc08 	lsl.w	ip, ip, r8
 810c240:	ea4c 0707 	orr.w	r7, ip, r7
 810c244:	f849 7b04 	str.w	r7, [r9], #4
 810c248:	f85e 7b04 	ldr.w	r7, [lr], #4
 810c24c:	40cf      	lsrs	r7, r1
 810c24e:	e7da      	b.n	810c206 <rshift+0x4c>
 810c250:	f851 cb04 	ldr.w	ip, [r1], #4
 810c254:	f847 cf04 	str.w	ip, [r7, #4]!
 810c258:	e7c3      	b.n	810c1e2 <rshift+0x28>
 810c25a:	4623      	mov	r3, r4
 810c25c:	e7e1      	b.n	810c222 <rshift+0x68>

0810c25e <__hexdig_fun>:
 810c25e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810c262:	2b09      	cmp	r3, #9
 810c264:	d802      	bhi.n	810c26c <__hexdig_fun+0xe>
 810c266:	3820      	subs	r0, #32
 810c268:	b2c0      	uxtb	r0, r0
 810c26a:	4770      	bx	lr
 810c26c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810c270:	2b05      	cmp	r3, #5
 810c272:	d801      	bhi.n	810c278 <__hexdig_fun+0x1a>
 810c274:	3847      	subs	r0, #71	; 0x47
 810c276:	e7f7      	b.n	810c268 <__hexdig_fun+0xa>
 810c278:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810c27c:	2b05      	cmp	r3, #5
 810c27e:	d801      	bhi.n	810c284 <__hexdig_fun+0x26>
 810c280:	3827      	subs	r0, #39	; 0x27
 810c282:	e7f1      	b.n	810c268 <__hexdig_fun+0xa>
 810c284:	2000      	movs	r0, #0
 810c286:	4770      	bx	lr

0810c288 <__gethex>:
 810c288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c28c:	ed2d 8b02 	vpush	{d8}
 810c290:	b089      	sub	sp, #36	; 0x24
 810c292:	ee08 0a10 	vmov	s16, r0
 810c296:	9304      	str	r3, [sp, #16]
 810c298:	4bb4      	ldr	r3, [pc, #720]	; (810c56c <__gethex+0x2e4>)
 810c29a:	681b      	ldr	r3, [r3, #0]
 810c29c:	9301      	str	r3, [sp, #4]
 810c29e:	4618      	mov	r0, r3
 810c2a0:	468b      	mov	fp, r1
 810c2a2:	4690      	mov	r8, r2
 810c2a4:	f7f4 f81c 	bl	81002e0 <strlen>
 810c2a8:	9b01      	ldr	r3, [sp, #4]
 810c2aa:	f8db 2000 	ldr.w	r2, [fp]
 810c2ae:	4403      	add	r3, r0
 810c2b0:	4682      	mov	sl, r0
 810c2b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810c2b6:	9305      	str	r3, [sp, #20]
 810c2b8:	1c93      	adds	r3, r2, #2
 810c2ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810c2be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810c2c2:	32fe      	adds	r2, #254	; 0xfe
 810c2c4:	18d1      	adds	r1, r2, r3
 810c2c6:	461f      	mov	r7, r3
 810c2c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 810c2cc:	9100      	str	r1, [sp, #0]
 810c2ce:	2830      	cmp	r0, #48	; 0x30
 810c2d0:	d0f8      	beq.n	810c2c4 <__gethex+0x3c>
 810c2d2:	f7ff ffc4 	bl	810c25e <__hexdig_fun>
 810c2d6:	4604      	mov	r4, r0
 810c2d8:	2800      	cmp	r0, #0
 810c2da:	d13a      	bne.n	810c352 <__gethex+0xca>
 810c2dc:	9901      	ldr	r1, [sp, #4]
 810c2de:	4652      	mov	r2, sl
 810c2e0:	4638      	mov	r0, r7
 810c2e2:	f001 fc28 	bl	810db36 <strncmp>
 810c2e6:	4605      	mov	r5, r0
 810c2e8:	2800      	cmp	r0, #0
 810c2ea:	d168      	bne.n	810c3be <__gethex+0x136>
 810c2ec:	f817 000a 	ldrb.w	r0, [r7, sl]
 810c2f0:	eb07 060a 	add.w	r6, r7, sl
 810c2f4:	f7ff ffb3 	bl	810c25e <__hexdig_fun>
 810c2f8:	2800      	cmp	r0, #0
 810c2fa:	d062      	beq.n	810c3c2 <__gethex+0x13a>
 810c2fc:	4633      	mov	r3, r6
 810c2fe:	7818      	ldrb	r0, [r3, #0]
 810c300:	2830      	cmp	r0, #48	; 0x30
 810c302:	461f      	mov	r7, r3
 810c304:	f103 0301 	add.w	r3, r3, #1
 810c308:	d0f9      	beq.n	810c2fe <__gethex+0x76>
 810c30a:	f7ff ffa8 	bl	810c25e <__hexdig_fun>
 810c30e:	2301      	movs	r3, #1
 810c310:	fab0 f480 	clz	r4, r0
 810c314:	0964      	lsrs	r4, r4, #5
 810c316:	4635      	mov	r5, r6
 810c318:	9300      	str	r3, [sp, #0]
 810c31a:	463a      	mov	r2, r7
 810c31c:	4616      	mov	r6, r2
 810c31e:	3201      	adds	r2, #1
 810c320:	7830      	ldrb	r0, [r6, #0]
 810c322:	f7ff ff9c 	bl	810c25e <__hexdig_fun>
 810c326:	2800      	cmp	r0, #0
 810c328:	d1f8      	bne.n	810c31c <__gethex+0x94>
 810c32a:	9901      	ldr	r1, [sp, #4]
 810c32c:	4652      	mov	r2, sl
 810c32e:	4630      	mov	r0, r6
 810c330:	f001 fc01 	bl	810db36 <strncmp>
 810c334:	b980      	cbnz	r0, 810c358 <__gethex+0xd0>
 810c336:	b94d      	cbnz	r5, 810c34c <__gethex+0xc4>
 810c338:	eb06 050a 	add.w	r5, r6, sl
 810c33c:	462a      	mov	r2, r5
 810c33e:	4616      	mov	r6, r2
 810c340:	3201      	adds	r2, #1
 810c342:	7830      	ldrb	r0, [r6, #0]
 810c344:	f7ff ff8b 	bl	810c25e <__hexdig_fun>
 810c348:	2800      	cmp	r0, #0
 810c34a:	d1f8      	bne.n	810c33e <__gethex+0xb6>
 810c34c:	1bad      	subs	r5, r5, r6
 810c34e:	00ad      	lsls	r5, r5, #2
 810c350:	e004      	b.n	810c35c <__gethex+0xd4>
 810c352:	2400      	movs	r4, #0
 810c354:	4625      	mov	r5, r4
 810c356:	e7e0      	b.n	810c31a <__gethex+0x92>
 810c358:	2d00      	cmp	r5, #0
 810c35a:	d1f7      	bne.n	810c34c <__gethex+0xc4>
 810c35c:	7833      	ldrb	r3, [r6, #0]
 810c35e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810c362:	2b50      	cmp	r3, #80	; 0x50
 810c364:	d13b      	bne.n	810c3de <__gethex+0x156>
 810c366:	7873      	ldrb	r3, [r6, #1]
 810c368:	2b2b      	cmp	r3, #43	; 0x2b
 810c36a:	d02c      	beq.n	810c3c6 <__gethex+0x13e>
 810c36c:	2b2d      	cmp	r3, #45	; 0x2d
 810c36e:	d02e      	beq.n	810c3ce <__gethex+0x146>
 810c370:	1c71      	adds	r1, r6, #1
 810c372:	f04f 0900 	mov.w	r9, #0
 810c376:	7808      	ldrb	r0, [r1, #0]
 810c378:	f7ff ff71 	bl	810c25e <__hexdig_fun>
 810c37c:	1e43      	subs	r3, r0, #1
 810c37e:	b2db      	uxtb	r3, r3
 810c380:	2b18      	cmp	r3, #24
 810c382:	d82c      	bhi.n	810c3de <__gethex+0x156>
 810c384:	f1a0 0210 	sub.w	r2, r0, #16
 810c388:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810c38c:	f7ff ff67 	bl	810c25e <__hexdig_fun>
 810c390:	1e43      	subs	r3, r0, #1
 810c392:	b2db      	uxtb	r3, r3
 810c394:	2b18      	cmp	r3, #24
 810c396:	d91d      	bls.n	810c3d4 <__gethex+0x14c>
 810c398:	f1b9 0f00 	cmp.w	r9, #0
 810c39c:	d000      	beq.n	810c3a0 <__gethex+0x118>
 810c39e:	4252      	negs	r2, r2
 810c3a0:	4415      	add	r5, r2
 810c3a2:	f8cb 1000 	str.w	r1, [fp]
 810c3a6:	b1e4      	cbz	r4, 810c3e2 <__gethex+0x15a>
 810c3a8:	9b00      	ldr	r3, [sp, #0]
 810c3aa:	2b00      	cmp	r3, #0
 810c3ac:	bf14      	ite	ne
 810c3ae:	2700      	movne	r7, #0
 810c3b0:	2706      	moveq	r7, #6
 810c3b2:	4638      	mov	r0, r7
 810c3b4:	b009      	add	sp, #36	; 0x24
 810c3b6:	ecbd 8b02 	vpop	{d8}
 810c3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c3be:	463e      	mov	r6, r7
 810c3c0:	4625      	mov	r5, r4
 810c3c2:	2401      	movs	r4, #1
 810c3c4:	e7ca      	b.n	810c35c <__gethex+0xd4>
 810c3c6:	f04f 0900 	mov.w	r9, #0
 810c3ca:	1cb1      	adds	r1, r6, #2
 810c3cc:	e7d3      	b.n	810c376 <__gethex+0xee>
 810c3ce:	f04f 0901 	mov.w	r9, #1
 810c3d2:	e7fa      	b.n	810c3ca <__gethex+0x142>
 810c3d4:	230a      	movs	r3, #10
 810c3d6:	fb03 0202 	mla	r2, r3, r2, r0
 810c3da:	3a10      	subs	r2, #16
 810c3dc:	e7d4      	b.n	810c388 <__gethex+0x100>
 810c3de:	4631      	mov	r1, r6
 810c3e0:	e7df      	b.n	810c3a2 <__gethex+0x11a>
 810c3e2:	1bf3      	subs	r3, r6, r7
 810c3e4:	3b01      	subs	r3, #1
 810c3e6:	4621      	mov	r1, r4
 810c3e8:	2b07      	cmp	r3, #7
 810c3ea:	dc0b      	bgt.n	810c404 <__gethex+0x17c>
 810c3ec:	ee18 0a10 	vmov	r0, s16
 810c3f0:	f000 fad8 	bl	810c9a4 <_Balloc>
 810c3f4:	4604      	mov	r4, r0
 810c3f6:	b940      	cbnz	r0, 810c40a <__gethex+0x182>
 810c3f8:	4b5d      	ldr	r3, [pc, #372]	; (810c570 <__gethex+0x2e8>)
 810c3fa:	4602      	mov	r2, r0
 810c3fc:	21de      	movs	r1, #222	; 0xde
 810c3fe:	485d      	ldr	r0, [pc, #372]	; (810c574 <__gethex+0x2ec>)
 810c400:	f001 fbcc 	bl	810db9c <__assert_func>
 810c404:	3101      	adds	r1, #1
 810c406:	105b      	asrs	r3, r3, #1
 810c408:	e7ee      	b.n	810c3e8 <__gethex+0x160>
 810c40a:	f100 0914 	add.w	r9, r0, #20
 810c40e:	f04f 0b00 	mov.w	fp, #0
 810c412:	f1ca 0301 	rsb	r3, sl, #1
 810c416:	f8cd 9008 	str.w	r9, [sp, #8]
 810c41a:	f8cd b000 	str.w	fp, [sp]
 810c41e:	9306      	str	r3, [sp, #24]
 810c420:	42b7      	cmp	r7, r6
 810c422:	d340      	bcc.n	810c4a6 <__gethex+0x21e>
 810c424:	9802      	ldr	r0, [sp, #8]
 810c426:	9b00      	ldr	r3, [sp, #0]
 810c428:	f840 3b04 	str.w	r3, [r0], #4
 810c42c:	eba0 0009 	sub.w	r0, r0, r9
 810c430:	1080      	asrs	r0, r0, #2
 810c432:	0146      	lsls	r6, r0, #5
 810c434:	6120      	str	r0, [r4, #16]
 810c436:	4618      	mov	r0, r3
 810c438:	f000 fba6 	bl	810cb88 <__hi0bits>
 810c43c:	1a30      	subs	r0, r6, r0
 810c43e:	f8d8 6000 	ldr.w	r6, [r8]
 810c442:	42b0      	cmp	r0, r6
 810c444:	dd63      	ble.n	810c50e <__gethex+0x286>
 810c446:	1b87      	subs	r7, r0, r6
 810c448:	4639      	mov	r1, r7
 810c44a:	4620      	mov	r0, r4
 810c44c:	f000 ff4a 	bl	810d2e4 <__any_on>
 810c450:	4682      	mov	sl, r0
 810c452:	b1a8      	cbz	r0, 810c480 <__gethex+0x1f8>
 810c454:	1e7b      	subs	r3, r7, #1
 810c456:	1159      	asrs	r1, r3, #5
 810c458:	f003 021f 	and.w	r2, r3, #31
 810c45c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810c460:	f04f 0a01 	mov.w	sl, #1
 810c464:	fa0a f202 	lsl.w	r2, sl, r2
 810c468:	420a      	tst	r2, r1
 810c46a:	d009      	beq.n	810c480 <__gethex+0x1f8>
 810c46c:	4553      	cmp	r3, sl
 810c46e:	dd05      	ble.n	810c47c <__gethex+0x1f4>
 810c470:	1eb9      	subs	r1, r7, #2
 810c472:	4620      	mov	r0, r4
 810c474:	f000 ff36 	bl	810d2e4 <__any_on>
 810c478:	2800      	cmp	r0, #0
 810c47a:	d145      	bne.n	810c508 <__gethex+0x280>
 810c47c:	f04f 0a02 	mov.w	sl, #2
 810c480:	4639      	mov	r1, r7
 810c482:	4620      	mov	r0, r4
 810c484:	f7ff fe99 	bl	810c1ba <rshift>
 810c488:	443d      	add	r5, r7
 810c48a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810c48e:	42ab      	cmp	r3, r5
 810c490:	da4c      	bge.n	810c52c <__gethex+0x2a4>
 810c492:	ee18 0a10 	vmov	r0, s16
 810c496:	4621      	mov	r1, r4
 810c498:	f000 fac4 	bl	810ca24 <_Bfree>
 810c49c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810c49e:	2300      	movs	r3, #0
 810c4a0:	6013      	str	r3, [r2, #0]
 810c4a2:	27a3      	movs	r7, #163	; 0xa3
 810c4a4:	e785      	b.n	810c3b2 <__gethex+0x12a>
 810c4a6:	1e73      	subs	r3, r6, #1
 810c4a8:	9a05      	ldr	r2, [sp, #20]
 810c4aa:	9303      	str	r3, [sp, #12]
 810c4ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810c4b0:	4293      	cmp	r3, r2
 810c4b2:	d019      	beq.n	810c4e8 <__gethex+0x260>
 810c4b4:	f1bb 0f20 	cmp.w	fp, #32
 810c4b8:	d107      	bne.n	810c4ca <__gethex+0x242>
 810c4ba:	9b02      	ldr	r3, [sp, #8]
 810c4bc:	9a00      	ldr	r2, [sp, #0]
 810c4be:	f843 2b04 	str.w	r2, [r3], #4
 810c4c2:	9302      	str	r3, [sp, #8]
 810c4c4:	2300      	movs	r3, #0
 810c4c6:	9300      	str	r3, [sp, #0]
 810c4c8:	469b      	mov	fp, r3
 810c4ca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810c4ce:	f7ff fec6 	bl	810c25e <__hexdig_fun>
 810c4d2:	9b00      	ldr	r3, [sp, #0]
 810c4d4:	f000 000f 	and.w	r0, r0, #15
 810c4d8:	fa00 f00b 	lsl.w	r0, r0, fp
 810c4dc:	4303      	orrs	r3, r0
 810c4de:	9300      	str	r3, [sp, #0]
 810c4e0:	f10b 0b04 	add.w	fp, fp, #4
 810c4e4:	9b03      	ldr	r3, [sp, #12]
 810c4e6:	e00d      	b.n	810c504 <__gethex+0x27c>
 810c4e8:	9b03      	ldr	r3, [sp, #12]
 810c4ea:	9a06      	ldr	r2, [sp, #24]
 810c4ec:	4413      	add	r3, r2
 810c4ee:	42bb      	cmp	r3, r7
 810c4f0:	d3e0      	bcc.n	810c4b4 <__gethex+0x22c>
 810c4f2:	4618      	mov	r0, r3
 810c4f4:	9901      	ldr	r1, [sp, #4]
 810c4f6:	9307      	str	r3, [sp, #28]
 810c4f8:	4652      	mov	r2, sl
 810c4fa:	f001 fb1c 	bl	810db36 <strncmp>
 810c4fe:	9b07      	ldr	r3, [sp, #28]
 810c500:	2800      	cmp	r0, #0
 810c502:	d1d7      	bne.n	810c4b4 <__gethex+0x22c>
 810c504:	461e      	mov	r6, r3
 810c506:	e78b      	b.n	810c420 <__gethex+0x198>
 810c508:	f04f 0a03 	mov.w	sl, #3
 810c50c:	e7b8      	b.n	810c480 <__gethex+0x1f8>
 810c50e:	da0a      	bge.n	810c526 <__gethex+0x29e>
 810c510:	1a37      	subs	r7, r6, r0
 810c512:	4621      	mov	r1, r4
 810c514:	ee18 0a10 	vmov	r0, s16
 810c518:	463a      	mov	r2, r7
 810c51a:	f000 fc9f 	bl	810ce5c <__lshift>
 810c51e:	1bed      	subs	r5, r5, r7
 810c520:	4604      	mov	r4, r0
 810c522:	f100 0914 	add.w	r9, r0, #20
 810c526:	f04f 0a00 	mov.w	sl, #0
 810c52a:	e7ae      	b.n	810c48a <__gethex+0x202>
 810c52c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810c530:	42a8      	cmp	r0, r5
 810c532:	dd72      	ble.n	810c61a <__gethex+0x392>
 810c534:	1b45      	subs	r5, r0, r5
 810c536:	42ae      	cmp	r6, r5
 810c538:	dc36      	bgt.n	810c5a8 <__gethex+0x320>
 810c53a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810c53e:	2b02      	cmp	r3, #2
 810c540:	d02a      	beq.n	810c598 <__gethex+0x310>
 810c542:	2b03      	cmp	r3, #3
 810c544:	d02c      	beq.n	810c5a0 <__gethex+0x318>
 810c546:	2b01      	cmp	r3, #1
 810c548:	d11c      	bne.n	810c584 <__gethex+0x2fc>
 810c54a:	42ae      	cmp	r6, r5
 810c54c:	d11a      	bne.n	810c584 <__gethex+0x2fc>
 810c54e:	2e01      	cmp	r6, #1
 810c550:	d112      	bne.n	810c578 <__gethex+0x2f0>
 810c552:	9a04      	ldr	r2, [sp, #16]
 810c554:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810c558:	6013      	str	r3, [r2, #0]
 810c55a:	2301      	movs	r3, #1
 810c55c:	6123      	str	r3, [r4, #16]
 810c55e:	f8c9 3000 	str.w	r3, [r9]
 810c562:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810c564:	2762      	movs	r7, #98	; 0x62
 810c566:	601c      	str	r4, [r3, #0]
 810c568:	e723      	b.n	810c3b2 <__gethex+0x12a>
 810c56a:	bf00      	nop
 810c56c:	0810e3bc 	.word	0x0810e3bc
 810c570:	0810e2e0 	.word	0x0810e2e0
 810c574:	0810e354 	.word	0x0810e354
 810c578:	1e71      	subs	r1, r6, #1
 810c57a:	4620      	mov	r0, r4
 810c57c:	f000 feb2 	bl	810d2e4 <__any_on>
 810c580:	2800      	cmp	r0, #0
 810c582:	d1e6      	bne.n	810c552 <__gethex+0x2ca>
 810c584:	ee18 0a10 	vmov	r0, s16
 810c588:	4621      	mov	r1, r4
 810c58a:	f000 fa4b 	bl	810ca24 <_Bfree>
 810c58e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810c590:	2300      	movs	r3, #0
 810c592:	6013      	str	r3, [r2, #0]
 810c594:	2750      	movs	r7, #80	; 0x50
 810c596:	e70c      	b.n	810c3b2 <__gethex+0x12a>
 810c598:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c59a:	2b00      	cmp	r3, #0
 810c59c:	d1f2      	bne.n	810c584 <__gethex+0x2fc>
 810c59e:	e7d8      	b.n	810c552 <__gethex+0x2ca>
 810c5a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c5a2:	2b00      	cmp	r3, #0
 810c5a4:	d1d5      	bne.n	810c552 <__gethex+0x2ca>
 810c5a6:	e7ed      	b.n	810c584 <__gethex+0x2fc>
 810c5a8:	1e6f      	subs	r7, r5, #1
 810c5aa:	f1ba 0f00 	cmp.w	sl, #0
 810c5ae:	d131      	bne.n	810c614 <__gethex+0x38c>
 810c5b0:	b127      	cbz	r7, 810c5bc <__gethex+0x334>
 810c5b2:	4639      	mov	r1, r7
 810c5b4:	4620      	mov	r0, r4
 810c5b6:	f000 fe95 	bl	810d2e4 <__any_on>
 810c5ba:	4682      	mov	sl, r0
 810c5bc:	117b      	asrs	r3, r7, #5
 810c5be:	2101      	movs	r1, #1
 810c5c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810c5c4:	f007 071f 	and.w	r7, r7, #31
 810c5c8:	fa01 f707 	lsl.w	r7, r1, r7
 810c5cc:	421f      	tst	r7, r3
 810c5ce:	4629      	mov	r1, r5
 810c5d0:	4620      	mov	r0, r4
 810c5d2:	bf18      	it	ne
 810c5d4:	f04a 0a02 	orrne.w	sl, sl, #2
 810c5d8:	1b76      	subs	r6, r6, r5
 810c5da:	f7ff fdee 	bl	810c1ba <rshift>
 810c5de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810c5e2:	2702      	movs	r7, #2
 810c5e4:	f1ba 0f00 	cmp.w	sl, #0
 810c5e8:	d048      	beq.n	810c67c <__gethex+0x3f4>
 810c5ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810c5ee:	2b02      	cmp	r3, #2
 810c5f0:	d015      	beq.n	810c61e <__gethex+0x396>
 810c5f2:	2b03      	cmp	r3, #3
 810c5f4:	d017      	beq.n	810c626 <__gethex+0x39e>
 810c5f6:	2b01      	cmp	r3, #1
 810c5f8:	d109      	bne.n	810c60e <__gethex+0x386>
 810c5fa:	f01a 0f02 	tst.w	sl, #2
 810c5fe:	d006      	beq.n	810c60e <__gethex+0x386>
 810c600:	f8d9 0000 	ldr.w	r0, [r9]
 810c604:	ea4a 0a00 	orr.w	sl, sl, r0
 810c608:	f01a 0f01 	tst.w	sl, #1
 810c60c:	d10e      	bne.n	810c62c <__gethex+0x3a4>
 810c60e:	f047 0710 	orr.w	r7, r7, #16
 810c612:	e033      	b.n	810c67c <__gethex+0x3f4>
 810c614:	f04f 0a01 	mov.w	sl, #1
 810c618:	e7d0      	b.n	810c5bc <__gethex+0x334>
 810c61a:	2701      	movs	r7, #1
 810c61c:	e7e2      	b.n	810c5e4 <__gethex+0x35c>
 810c61e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c620:	f1c3 0301 	rsb	r3, r3, #1
 810c624:	9315      	str	r3, [sp, #84]	; 0x54
 810c626:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c628:	2b00      	cmp	r3, #0
 810c62a:	d0f0      	beq.n	810c60e <__gethex+0x386>
 810c62c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810c630:	f104 0314 	add.w	r3, r4, #20
 810c634:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810c638:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810c63c:	f04f 0c00 	mov.w	ip, #0
 810c640:	4618      	mov	r0, r3
 810c642:	f853 2b04 	ldr.w	r2, [r3], #4
 810c646:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 810c64a:	d01c      	beq.n	810c686 <__gethex+0x3fe>
 810c64c:	3201      	adds	r2, #1
 810c64e:	6002      	str	r2, [r0, #0]
 810c650:	2f02      	cmp	r7, #2
 810c652:	f104 0314 	add.w	r3, r4, #20
 810c656:	d13f      	bne.n	810c6d8 <__gethex+0x450>
 810c658:	f8d8 2000 	ldr.w	r2, [r8]
 810c65c:	3a01      	subs	r2, #1
 810c65e:	42b2      	cmp	r2, r6
 810c660:	d10a      	bne.n	810c678 <__gethex+0x3f0>
 810c662:	1171      	asrs	r1, r6, #5
 810c664:	2201      	movs	r2, #1
 810c666:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810c66a:	f006 061f 	and.w	r6, r6, #31
 810c66e:	fa02 f606 	lsl.w	r6, r2, r6
 810c672:	421e      	tst	r6, r3
 810c674:	bf18      	it	ne
 810c676:	4617      	movne	r7, r2
 810c678:	f047 0720 	orr.w	r7, r7, #32
 810c67c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810c67e:	601c      	str	r4, [r3, #0]
 810c680:	9b04      	ldr	r3, [sp, #16]
 810c682:	601d      	str	r5, [r3, #0]
 810c684:	e695      	b.n	810c3b2 <__gethex+0x12a>
 810c686:	4299      	cmp	r1, r3
 810c688:	f843 cc04 	str.w	ip, [r3, #-4]
 810c68c:	d8d8      	bhi.n	810c640 <__gethex+0x3b8>
 810c68e:	68a3      	ldr	r3, [r4, #8]
 810c690:	459b      	cmp	fp, r3
 810c692:	db19      	blt.n	810c6c8 <__gethex+0x440>
 810c694:	6861      	ldr	r1, [r4, #4]
 810c696:	ee18 0a10 	vmov	r0, s16
 810c69a:	3101      	adds	r1, #1
 810c69c:	f000 f982 	bl	810c9a4 <_Balloc>
 810c6a0:	4681      	mov	r9, r0
 810c6a2:	b918      	cbnz	r0, 810c6ac <__gethex+0x424>
 810c6a4:	4b1a      	ldr	r3, [pc, #104]	; (810c710 <__gethex+0x488>)
 810c6a6:	4602      	mov	r2, r0
 810c6a8:	2184      	movs	r1, #132	; 0x84
 810c6aa:	e6a8      	b.n	810c3fe <__gethex+0x176>
 810c6ac:	6922      	ldr	r2, [r4, #16]
 810c6ae:	3202      	adds	r2, #2
 810c6b0:	f104 010c 	add.w	r1, r4, #12
 810c6b4:	0092      	lsls	r2, r2, #2
 810c6b6:	300c      	adds	r0, #12
 810c6b8:	f7fc fe9c 	bl	81093f4 <memcpy>
 810c6bc:	4621      	mov	r1, r4
 810c6be:	ee18 0a10 	vmov	r0, s16
 810c6c2:	f000 f9af 	bl	810ca24 <_Bfree>
 810c6c6:	464c      	mov	r4, r9
 810c6c8:	6923      	ldr	r3, [r4, #16]
 810c6ca:	1c5a      	adds	r2, r3, #1
 810c6cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810c6d0:	6122      	str	r2, [r4, #16]
 810c6d2:	2201      	movs	r2, #1
 810c6d4:	615a      	str	r2, [r3, #20]
 810c6d6:	e7bb      	b.n	810c650 <__gethex+0x3c8>
 810c6d8:	6922      	ldr	r2, [r4, #16]
 810c6da:	455a      	cmp	r2, fp
 810c6dc:	dd0b      	ble.n	810c6f6 <__gethex+0x46e>
 810c6de:	2101      	movs	r1, #1
 810c6e0:	4620      	mov	r0, r4
 810c6e2:	f7ff fd6a 	bl	810c1ba <rshift>
 810c6e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810c6ea:	3501      	adds	r5, #1
 810c6ec:	42ab      	cmp	r3, r5
 810c6ee:	f6ff aed0 	blt.w	810c492 <__gethex+0x20a>
 810c6f2:	2701      	movs	r7, #1
 810c6f4:	e7c0      	b.n	810c678 <__gethex+0x3f0>
 810c6f6:	f016 061f 	ands.w	r6, r6, #31
 810c6fa:	d0fa      	beq.n	810c6f2 <__gethex+0x46a>
 810c6fc:	4453      	add	r3, sl
 810c6fe:	f1c6 0620 	rsb	r6, r6, #32
 810c702:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810c706:	f000 fa3f 	bl	810cb88 <__hi0bits>
 810c70a:	42b0      	cmp	r0, r6
 810c70c:	dbe7      	blt.n	810c6de <__gethex+0x456>
 810c70e:	e7f0      	b.n	810c6f2 <__gethex+0x46a>
 810c710:	0810e2e0 	.word	0x0810e2e0

0810c714 <L_shift>:
 810c714:	f1c2 0208 	rsb	r2, r2, #8
 810c718:	0092      	lsls	r2, r2, #2
 810c71a:	b570      	push	{r4, r5, r6, lr}
 810c71c:	f1c2 0620 	rsb	r6, r2, #32
 810c720:	6843      	ldr	r3, [r0, #4]
 810c722:	6804      	ldr	r4, [r0, #0]
 810c724:	fa03 f506 	lsl.w	r5, r3, r6
 810c728:	432c      	orrs	r4, r5
 810c72a:	40d3      	lsrs	r3, r2
 810c72c:	6004      	str	r4, [r0, #0]
 810c72e:	f840 3f04 	str.w	r3, [r0, #4]!
 810c732:	4288      	cmp	r0, r1
 810c734:	d3f4      	bcc.n	810c720 <L_shift+0xc>
 810c736:	bd70      	pop	{r4, r5, r6, pc}

0810c738 <__match>:
 810c738:	b530      	push	{r4, r5, lr}
 810c73a:	6803      	ldr	r3, [r0, #0]
 810c73c:	3301      	adds	r3, #1
 810c73e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810c742:	b914      	cbnz	r4, 810c74a <__match+0x12>
 810c744:	6003      	str	r3, [r0, #0]
 810c746:	2001      	movs	r0, #1
 810c748:	bd30      	pop	{r4, r5, pc}
 810c74a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c74e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810c752:	2d19      	cmp	r5, #25
 810c754:	bf98      	it	ls
 810c756:	3220      	addls	r2, #32
 810c758:	42a2      	cmp	r2, r4
 810c75a:	d0f0      	beq.n	810c73e <__match+0x6>
 810c75c:	2000      	movs	r0, #0
 810c75e:	e7f3      	b.n	810c748 <__match+0x10>

0810c760 <__hexnan>:
 810c760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c764:	680b      	ldr	r3, [r1, #0]
 810c766:	115e      	asrs	r6, r3, #5
 810c768:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810c76c:	f013 031f 	ands.w	r3, r3, #31
 810c770:	b087      	sub	sp, #28
 810c772:	bf18      	it	ne
 810c774:	3604      	addne	r6, #4
 810c776:	2500      	movs	r5, #0
 810c778:	1f37      	subs	r7, r6, #4
 810c77a:	4690      	mov	r8, r2
 810c77c:	6802      	ldr	r2, [r0, #0]
 810c77e:	9301      	str	r3, [sp, #4]
 810c780:	4682      	mov	sl, r0
 810c782:	f846 5c04 	str.w	r5, [r6, #-4]
 810c786:	46b9      	mov	r9, r7
 810c788:	463c      	mov	r4, r7
 810c78a:	9502      	str	r5, [sp, #8]
 810c78c:	46ab      	mov	fp, r5
 810c78e:	7851      	ldrb	r1, [r2, #1]
 810c790:	1c53      	adds	r3, r2, #1
 810c792:	9303      	str	r3, [sp, #12]
 810c794:	b341      	cbz	r1, 810c7e8 <__hexnan+0x88>
 810c796:	4608      	mov	r0, r1
 810c798:	9205      	str	r2, [sp, #20]
 810c79a:	9104      	str	r1, [sp, #16]
 810c79c:	f7ff fd5f 	bl	810c25e <__hexdig_fun>
 810c7a0:	2800      	cmp	r0, #0
 810c7a2:	d14f      	bne.n	810c844 <__hexnan+0xe4>
 810c7a4:	9904      	ldr	r1, [sp, #16]
 810c7a6:	9a05      	ldr	r2, [sp, #20]
 810c7a8:	2920      	cmp	r1, #32
 810c7aa:	d818      	bhi.n	810c7de <__hexnan+0x7e>
 810c7ac:	9b02      	ldr	r3, [sp, #8]
 810c7ae:	459b      	cmp	fp, r3
 810c7b0:	dd13      	ble.n	810c7da <__hexnan+0x7a>
 810c7b2:	454c      	cmp	r4, r9
 810c7b4:	d206      	bcs.n	810c7c4 <__hexnan+0x64>
 810c7b6:	2d07      	cmp	r5, #7
 810c7b8:	dc04      	bgt.n	810c7c4 <__hexnan+0x64>
 810c7ba:	462a      	mov	r2, r5
 810c7bc:	4649      	mov	r1, r9
 810c7be:	4620      	mov	r0, r4
 810c7c0:	f7ff ffa8 	bl	810c714 <L_shift>
 810c7c4:	4544      	cmp	r4, r8
 810c7c6:	d950      	bls.n	810c86a <__hexnan+0x10a>
 810c7c8:	2300      	movs	r3, #0
 810c7ca:	f1a4 0904 	sub.w	r9, r4, #4
 810c7ce:	f844 3c04 	str.w	r3, [r4, #-4]
 810c7d2:	f8cd b008 	str.w	fp, [sp, #8]
 810c7d6:	464c      	mov	r4, r9
 810c7d8:	461d      	mov	r5, r3
 810c7da:	9a03      	ldr	r2, [sp, #12]
 810c7dc:	e7d7      	b.n	810c78e <__hexnan+0x2e>
 810c7de:	2929      	cmp	r1, #41	; 0x29
 810c7e0:	d156      	bne.n	810c890 <__hexnan+0x130>
 810c7e2:	3202      	adds	r2, #2
 810c7e4:	f8ca 2000 	str.w	r2, [sl]
 810c7e8:	f1bb 0f00 	cmp.w	fp, #0
 810c7ec:	d050      	beq.n	810c890 <__hexnan+0x130>
 810c7ee:	454c      	cmp	r4, r9
 810c7f0:	d206      	bcs.n	810c800 <__hexnan+0xa0>
 810c7f2:	2d07      	cmp	r5, #7
 810c7f4:	dc04      	bgt.n	810c800 <__hexnan+0xa0>
 810c7f6:	462a      	mov	r2, r5
 810c7f8:	4649      	mov	r1, r9
 810c7fa:	4620      	mov	r0, r4
 810c7fc:	f7ff ff8a 	bl	810c714 <L_shift>
 810c800:	4544      	cmp	r4, r8
 810c802:	d934      	bls.n	810c86e <__hexnan+0x10e>
 810c804:	f1a8 0204 	sub.w	r2, r8, #4
 810c808:	4623      	mov	r3, r4
 810c80a:	f853 1b04 	ldr.w	r1, [r3], #4
 810c80e:	f842 1f04 	str.w	r1, [r2, #4]!
 810c812:	429f      	cmp	r7, r3
 810c814:	d2f9      	bcs.n	810c80a <__hexnan+0xaa>
 810c816:	1b3b      	subs	r3, r7, r4
 810c818:	f023 0303 	bic.w	r3, r3, #3
 810c81c:	3304      	adds	r3, #4
 810c81e:	3401      	adds	r4, #1
 810c820:	3e03      	subs	r6, #3
 810c822:	42b4      	cmp	r4, r6
 810c824:	bf88      	it	hi
 810c826:	2304      	movhi	r3, #4
 810c828:	4443      	add	r3, r8
 810c82a:	2200      	movs	r2, #0
 810c82c:	f843 2b04 	str.w	r2, [r3], #4
 810c830:	429f      	cmp	r7, r3
 810c832:	d2fb      	bcs.n	810c82c <__hexnan+0xcc>
 810c834:	683b      	ldr	r3, [r7, #0]
 810c836:	b91b      	cbnz	r3, 810c840 <__hexnan+0xe0>
 810c838:	4547      	cmp	r7, r8
 810c83a:	d127      	bne.n	810c88c <__hexnan+0x12c>
 810c83c:	2301      	movs	r3, #1
 810c83e:	603b      	str	r3, [r7, #0]
 810c840:	2005      	movs	r0, #5
 810c842:	e026      	b.n	810c892 <__hexnan+0x132>
 810c844:	3501      	adds	r5, #1
 810c846:	2d08      	cmp	r5, #8
 810c848:	f10b 0b01 	add.w	fp, fp, #1
 810c84c:	dd06      	ble.n	810c85c <__hexnan+0xfc>
 810c84e:	4544      	cmp	r4, r8
 810c850:	d9c3      	bls.n	810c7da <__hexnan+0x7a>
 810c852:	2300      	movs	r3, #0
 810c854:	f844 3c04 	str.w	r3, [r4, #-4]
 810c858:	2501      	movs	r5, #1
 810c85a:	3c04      	subs	r4, #4
 810c85c:	6822      	ldr	r2, [r4, #0]
 810c85e:	f000 000f 	and.w	r0, r0, #15
 810c862:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810c866:	6022      	str	r2, [r4, #0]
 810c868:	e7b7      	b.n	810c7da <__hexnan+0x7a>
 810c86a:	2508      	movs	r5, #8
 810c86c:	e7b5      	b.n	810c7da <__hexnan+0x7a>
 810c86e:	9b01      	ldr	r3, [sp, #4]
 810c870:	2b00      	cmp	r3, #0
 810c872:	d0df      	beq.n	810c834 <__hexnan+0xd4>
 810c874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810c878:	f1c3 0320 	rsb	r3, r3, #32
 810c87c:	fa22 f303 	lsr.w	r3, r2, r3
 810c880:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810c884:	401a      	ands	r2, r3
 810c886:	f846 2c04 	str.w	r2, [r6, #-4]
 810c88a:	e7d3      	b.n	810c834 <__hexnan+0xd4>
 810c88c:	3f04      	subs	r7, #4
 810c88e:	e7d1      	b.n	810c834 <__hexnan+0xd4>
 810c890:	2004      	movs	r0, #4
 810c892:	b007      	add	sp, #28
 810c894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c898 <_localeconv_r>:
 810c898:	4800      	ldr	r0, [pc, #0]	; (810c89c <_localeconv_r+0x4>)
 810c89a:	4770      	bx	lr
 810c89c:	10000178 	.word	0x10000178

0810c8a0 <__retarget_lock_init_recursive>:
 810c8a0:	4770      	bx	lr

0810c8a2 <__retarget_lock_acquire_recursive>:
 810c8a2:	4770      	bx	lr

0810c8a4 <__retarget_lock_release_recursive>:
 810c8a4:	4770      	bx	lr

0810c8a6 <__swhatbuf_r>:
 810c8a6:	b570      	push	{r4, r5, r6, lr}
 810c8a8:	460e      	mov	r6, r1
 810c8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810c8ae:	2900      	cmp	r1, #0
 810c8b0:	b096      	sub	sp, #88	; 0x58
 810c8b2:	4614      	mov	r4, r2
 810c8b4:	461d      	mov	r5, r3
 810c8b6:	da08      	bge.n	810c8ca <__swhatbuf_r+0x24>
 810c8b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810c8bc:	2200      	movs	r2, #0
 810c8be:	602a      	str	r2, [r5, #0]
 810c8c0:	061a      	lsls	r2, r3, #24
 810c8c2:	d410      	bmi.n	810c8e6 <__swhatbuf_r+0x40>
 810c8c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810c8c8:	e00e      	b.n	810c8e8 <__swhatbuf_r+0x42>
 810c8ca:	466a      	mov	r2, sp
 810c8cc:	f001 f9a6 	bl	810dc1c <_fstat_r>
 810c8d0:	2800      	cmp	r0, #0
 810c8d2:	dbf1      	blt.n	810c8b8 <__swhatbuf_r+0x12>
 810c8d4:	9a01      	ldr	r2, [sp, #4]
 810c8d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810c8da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810c8de:	425a      	negs	r2, r3
 810c8e0:	415a      	adcs	r2, r3
 810c8e2:	602a      	str	r2, [r5, #0]
 810c8e4:	e7ee      	b.n	810c8c4 <__swhatbuf_r+0x1e>
 810c8e6:	2340      	movs	r3, #64	; 0x40
 810c8e8:	2000      	movs	r0, #0
 810c8ea:	6023      	str	r3, [r4, #0]
 810c8ec:	b016      	add	sp, #88	; 0x58
 810c8ee:	bd70      	pop	{r4, r5, r6, pc}

0810c8f0 <__smakebuf_r>:
 810c8f0:	898b      	ldrh	r3, [r1, #12]
 810c8f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810c8f4:	079d      	lsls	r5, r3, #30
 810c8f6:	4606      	mov	r6, r0
 810c8f8:	460c      	mov	r4, r1
 810c8fa:	d507      	bpl.n	810c90c <__smakebuf_r+0x1c>
 810c8fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810c900:	6023      	str	r3, [r4, #0]
 810c902:	6123      	str	r3, [r4, #16]
 810c904:	2301      	movs	r3, #1
 810c906:	6163      	str	r3, [r4, #20]
 810c908:	b002      	add	sp, #8
 810c90a:	bd70      	pop	{r4, r5, r6, pc}
 810c90c:	ab01      	add	r3, sp, #4
 810c90e:	466a      	mov	r2, sp
 810c910:	f7ff ffc9 	bl	810c8a6 <__swhatbuf_r>
 810c914:	9900      	ldr	r1, [sp, #0]
 810c916:	4605      	mov	r5, r0
 810c918:	4630      	mov	r0, r6
 810c91a:	f000 fd87 	bl	810d42c <_malloc_r>
 810c91e:	b948      	cbnz	r0, 810c934 <__smakebuf_r+0x44>
 810c920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c924:	059a      	lsls	r2, r3, #22
 810c926:	d4ef      	bmi.n	810c908 <__smakebuf_r+0x18>
 810c928:	f023 0303 	bic.w	r3, r3, #3
 810c92c:	f043 0302 	orr.w	r3, r3, #2
 810c930:	81a3      	strh	r3, [r4, #12]
 810c932:	e7e3      	b.n	810c8fc <__smakebuf_r+0xc>
 810c934:	4b0d      	ldr	r3, [pc, #52]	; (810c96c <__smakebuf_r+0x7c>)
 810c936:	62b3      	str	r3, [r6, #40]	; 0x28
 810c938:	89a3      	ldrh	r3, [r4, #12]
 810c93a:	6020      	str	r0, [r4, #0]
 810c93c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810c940:	81a3      	strh	r3, [r4, #12]
 810c942:	9b00      	ldr	r3, [sp, #0]
 810c944:	6163      	str	r3, [r4, #20]
 810c946:	9b01      	ldr	r3, [sp, #4]
 810c948:	6120      	str	r0, [r4, #16]
 810c94a:	b15b      	cbz	r3, 810c964 <__smakebuf_r+0x74>
 810c94c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810c950:	4630      	mov	r0, r6
 810c952:	f001 f975 	bl	810dc40 <_isatty_r>
 810c956:	b128      	cbz	r0, 810c964 <__smakebuf_r+0x74>
 810c958:	89a3      	ldrh	r3, [r4, #12]
 810c95a:	f023 0303 	bic.w	r3, r3, #3
 810c95e:	f043 0301 	orr.w	r3, r3, #1
 810c962:	81a3      	strh	r3, [r4, #12]
 810c964:	89a0      	ldrh	r0, [r4, #12]
 810c966:	4305      	orrs	r5, r0
 810c968:	81a5      	strh	r5, [r4, #12]
 810c96a:	e7cd      	b.n	810c908 <__smakebuf_r+0x18>
 810c96c:	0810c019 	.word	0x0810c019

0810c970 <malloc>:
 810c970:	4b02      	ldr	r3, [pc, #8]	; (810c97c <malloc+0xc>)
 810c972:	4601      	mov	r1, r0
 810c974:	6818      	ldr	r0, [r3, #0]
 810c976:	f000 bd59 	b.w	810d42c <_malloc_r>
 810c97a:	bf00      	nop
 810c97c:	10000020 	.word	0x10000020

0810c980 <__ascii_mbtowc>:
 810c980:	b082      	sub	sp, #8
 810c982:	b901      	cbnz	r1, 810c986 <__ascii_mbtowc+0x6>
 810c984:	a901      	add	r1, sp, #4
 810c986:	b142      	cbz	r2, 810c99a <__ascii_mbtowc+0x1a>
 810c988:	b14b      	cbz	r3, 810c99e <__ascii_mbtowc+0x1e>
 810c98a:	7813      	ldrb	r3, [r2, #0]
 810c98c:	600b      	str	r3, [r1, #0]
 810c98e:	7812      	ldrb	r2, [r2, #0]
 810c990:	1e10      	subs	r0, r2, #0
 810c992:	bf18      	it	ne
 810c994:	2001      	movne	r0, #1
 810c996:	b002      	add	sp, #8
 810c998:	4770      	bx	lr
 810c99a:	4610      	mov	r0, r2
 810c99c:	e7fb      	b.n	810c996 <__ascii_mbtowc+0x16>
 810c99e:	f06f 0001 	mvn.w	r0, #1
 810c9a2:	e7f8      	b.n	810c996 <__ascii_mbtowc+0x16>

0810c9a4 <_Balloc>:
 810c9a4:	b570      	push	{r4, r5, r6, lr}
 810c9a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810c9a8:	4604      	mov	r4, r0
 810c9aa:	460d      	mov	r5, r1
 810c9ac:	b976      	cbnz	r6, 810c9cc <_Balloc+0x28>
 810c9ae:	2010      	movs	r0, #16
 810c9b0:	f7ff ffde 	bl	810c970 <malloc>
 810c9b4:	4602      	mov	r2, r0
 810c9b6:	6260      	str	r0, [r4, #36]	; 0x24
 810c9b8:	b920      	cbnz	r0, 810c9c4 <_Balloc+0x20>
 810c9ba:	4b18      	ldr	r3, [pc, #96]	; (810ca1c <_Balloc+0x78>)
 810c9bc:	4818      	ldr	r0, [pc, #96]	; (810ca20 <_Balloc+0x7c>)
 810c9be:	2166      	movs	r1, #102	; 0x66
 810c9c0:	f001 f8ec 	bl	810db9c <__assert_func>
 810c9c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c9c8:	6006      	str	r6, [r0, #0]
 810c9ca:	60c6      	str	r6, [r0, #12]
 810c9cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810c9ce:	68f3      	ldr	r3, [r6, #12]
 810c9d0:	b183      	cbz	r3, 810c9f4 <_Balloc+0x50>
 810c9d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c9d4:	68db      	ldr	r3, [r3, #12]
 810c9d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810c9da:	b9b8      	cbnz	r0, 810ca0c <_Balloc+0x68>
 810c9dc:	2101      	movs	r1, #1
 810c9de:	fa01 f605 	lsl.w	r6, r1, r5
 810c9e2:	1d72      	adds	r2, r6, #5
 810c9e4:	0092      	lsls	r2, r2, #2
 810c9e6:	4620      	mov	r0, r4
 810c9e8:	f000 fc9d 	bl	810d326 <_calloc_r>
 810c9ec:	b160      	cbz	r0, 810ca08 <_Balloc+0x64>
 810c9ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810c9f2:	e00e      	b.n	810ca12 <_Balloc+0x6e>
 810c9f4:	2221      	movs	r2, #33	; 0x21
 810c9f6:	2104      	movs	r1, #4
 810c9f8:	4620      	mov	r0, r4
 810c9fa:	f000 fc94 	bl	810d326 <_calloc_r>
 810c9fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ca00:	60f0      	str	r0, [r6, #12]
 810ca02:	68db      	ldr	r3, [r3, #12]
 810ca04:	2b00      	cmp	r3, #0
 810ca06:	d1e4      	bne.n	810c9d2 <_Balloc+0x2e>
 810ca08:	2000      	movs	r0, #0
 810ca0a:	bd70      	pop	{r4, r5, r6, pc}
 810ca0c:	6802      	ldr	r2, [r0, #0]
 810ca0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810ca12:	2300      	movs	r3, #0
 810ca14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810ca18:	e7f7      	b.n	810ca0a <_Balloc+0x66>
 810ca1a:	bf00      	nop
 810ca1c:	0810e26e 	.word	0x0810e26e
 810ca20:	0810e3d0 	.word	0x0810e3d0

0810ca24 <_Bfree>:
 810ca24:	b570      	push	{r4, r5, r6, lr}
 810ca26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810ca28:	4605      	mov	r5, r0
 810ca2a:	460c      	mov	r4, r1
 810ca2c:	b976      	cbnz	r6, 810ca4c <_Bfree+0x28>
 810ca2e:	2010      	movs	r0, #16
 810ca30:	f7ff ff9e 	bl	810c970 <malloc>
 810ca34:	4602      	mov	r2, r0
 810ca36:	6268      	str	r0, [r5, #36]	; 0x24
 810ca38:	b920      	cbnz	r0, 810ca44 <_Bfree+0x20>
 810ca3a:	4b09      	ldr	r3, [pc, #36]	; (810ca60 <_Bfree+0x3c>)
 810ca3c:	4809      	ldr	r0, [pc, #36]	; (810ca64 <_Bfree+0x40>)
 810ca3e:	218a      	movs	r1, #138	; 0x8a
 810ca40:	f001 f8ac 	bl	810db9c <__assert_func>
 810ca44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810ca48:	6006      	str	r6, [r0, #0]
 810ca4a:	60c6      	str	r6, [r0, #12]
 810ca4c:	b13c      	cbz	r4, 810ca5e <_Bfree+0x3a>
 810ca4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810ca50:	6862      	ldr	r2, [r4, #4]
 810ca52:	68db      	ldr	r3, [r3, #12]
 810ca54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810ca58:	6021      	str	r1, [r4, #0]
 810ca5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810ca5e:	bd70      	pop	{r4, r5, r6, pc}
 810ca60:	0810e26e 	.word	0x0810e26e
 810ca64:	0810e3d0 	.word	0x0810e3d0

0810ca68 <__multadd>:
 810ca68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ca6c:	690d      	ldr	r5, [r1, #16]
 810ca6e:	4607      	mov	r7, r0
 810ca70:	460c      	mov	r4, r1
 810ca72:	461e      	mov	r6, r3
 810ca74:	f101 0c14 	add.w	ip, r1, #20
 810ca78:	2000      	movs	r0, #0
 810ca7a:	f8dc 3000 	ldr.w	r3, [ip]
 810ca7e:	b299      	uxth	r1, r3
 810ca80:	fb02 6101 	mla	r1, r2, r1, r6
 810ca84:	0c1e      	lsrs	r6, r3, #16
 810ca86:	0c0b      	lsrs	r3, r1, #16
 810ca88:	fb02 3306 	mla	r3, r2, r6, r3
 810ca8c:	b289      	uxth	r1, r1
 810ca8e:	3001      	adds	r0, #1
 810ca90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810ca94:	4285      	cmp	r5, r0
 810ca96:	f84c 1b04 	str.w	r1, [ip], #4
 810ca9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810ca9e:	dcec      	bgt.n	810ca7a <__multadd+0x12>
 810caa0:	b30e      	cbz	r6, 810cae6 <__multadd+0x7e>
 810caa2:	68a3      	ldr	r3, [r4, #8]
 810caa4:	42ab      	cmp	r3, r5
 810caa6:	dc19      	bgt.n	810cadc <__multadd+0x74>
 810caa8:	6861      	ldr	r1, [r4, #4]
 810caaa:	4638      	mov	r0, r7
 810caac:	3101      	adds	r1, #1
 810caae:	f7ff ff79 	bl	810c9a4 <_Balloc>
 810cab2:	4680      	mov	r8, r0
 810cab4:	b928      	cbnz	r0, 810cac2 <__multadd+0x5a>
 810cab6:	4602      	mov	r2, r0
 810cab8:	4b0c      	ldr	r3, [pc, #48]	; (810caec <__multadd+0x84>)
 810caba:	480d      	ldr	r0, [pc, #52]	; (810caf0 <__multadd+0x88>)
 810cabc:	21b5      	movs	r1, #181	; 0xb5
 810cabe:	f001 f86d 	bl	810db9c <__assert_func>
 810cac2:	6922      	ldr	r2, [r4, #16]
 810cac4:	3202      	adds	r2, #2
 810cac6:	f104 010c 	add.w	r1, r4, #12
 810caca:	0092      	lsls	r2, r2, #2
 810cacc:	300c      	adds	r0, #12
 810cace:	f7fc fc91 	bl	81093f4 <memcpy>
 810cad2:	4621      	mov	r1, r4
 810cad4:	4638      	mov	r0, r7
 810cad6:	f7ff ffa5 	bl	810ca24 <_Bfree>
 810cada:	4644      	mov	r4, r8
 810cadc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810cae0:	3501      	adds	r5, #1
 810cae2:	615e      	str	r6, [r3, #20]
 810cae4:	6125      	str	r5, [r4, #16]
 810cae6:	4620      	mov	r0, r4
 810cae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810caec:	0810e2e0 	.word	0x0810e2e0
 810caf0:	0810e3d0 	.word	0x0810e3d0

0810caf4 <__s2b>:
 810caf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810caf8:	460c      	mov	r4, r1
 810cafa:	4615      	mov	r5, r2
 810cafc:	461f      	mov	r7, r3
 810cafe:	2209      	movs	r2, #9
 810cb00:	3308      	adds	r3, #8
 810cb02:	4606      	mov	r6, r0
 810cb04:	fb93 f3f2 	sdiv	r3, r3, r2
 810cb08:	2100      	movs	r1, #0
 810cb0a:	2201      	movs	r2, #1
 810cb0c:	429a      	cmp	r2, r3
 810cb0e:	db09      	blt.n	810cb24 <__s2b+0x30>
 810cb10:	4630      	mov	r0, r6
 810cb12:	f7ff ff47 	bl	810c9a4 <_Balloc>
 810cb16:	b940      	cbnz	r0, 810cb2a <__s2b+0x36>
 810cb18:	4602      	mov	r2, r0
 810cb1a:	4b19      	ldr	r3, [pc, #100]	; (810cb80 <__s2b+0x8c>)
 810cb1c:	4819      	ldr	r0, [pc, #100]	; (810cb84 <__s2b+0x90>)
 810cb1e:	21ce      	movs	r1, #206	; 0xce
 810cb20:	f001 f83c 	bl	810db9c <__assert_func>
 810cb24:	0052      	lsls	r2, r2, #1
 810cb26:	3101      	adds	r1, #1
 810cb28:	e7f0      	b.n	810cb0c <__s2b+0x18>
 810cb2a:	9b08      	ldr	r3, [sp, #32]
 810cb2c:	6143      	str	r3, [r0, #20]
 810cb2e:	2d09      	cmp	r5, #9
 810cb30:	f04f 0301 	mov.w	r3, #1
 810cb34:	6103      	str	r3, [r0, #16]
 810cb36:	dd16      	ble.n	810cb66 <__s2b+0x72>
 810cb38:	f104 0909 	add.w	r9, r4, #9
 810cb3c:	46c8      	mov	r8, r9
 810cb3e:	442c      	add	r4, r5
 810cb40:	f818 3b01 	ldrb.w	r3, [r8], #1
 810cb44:	4601      	mov	r1, r0
 810cb46:	3b30      	subs	r3, #48	; 0x30
 810cb48:	220a      	movs	r2, #10
 810cb4a:	4630      	mov	r0, r6
 810cb4c:	f7ff ff8c 	bl	810ca68 <__multadd>
 810cb50:	45a0      	cmp	r8, r4
 810cb52:	d1f5      	bne.n	810cb40 <__s2b+0x4c>
 810cb54:	f1a5 0408 	sub.w	r4, r5, #8
 810cb58:	444c      	add	r4, r9
 810cb5a:	1b2d      	subs	r5, r5, r4
 810cb5c:	1963      	adds	r3, r4, r5
 810cb5e:	42bb      	cmp	r3, r7
 810cb60:	db04      	blt.n	810cb6c <__s2b+0x78>
 810cb62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810cb66:	340a      	adds	r4, #10
 810cb68:	2509      	movs	r5, #9
 810cb6a:	e7f6      	b.n	810cb5a <__s2b+0x66>
 810cb6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 810cb70:	4601      	mov	r1, r0
 810cb72:	3b30      	subs	r3, #48	; 0x30
 810cb74:	220a      	movs	r2, #10
 810cb76:	4630      	mov	r0, r6
 810cb78:	f7ff ff76 	bl	810ca68 <__multadd>
 810cb7c:	e7ee      	b.n	810cb5c <__s2b+0x68>
 810cb7e:	bf00      	nop
 810cb80:	0810e2e0 	.word	0x0810e2e0
 810cb84:	0810e3d0 	.word	0x0810e3d0

0810cb88 <__hi0bits>:
 810cb88:	0c03      	lsrs	r3, r0, #16
 810cb8a:	041b      	lsls	r3, r3, #16
 810cb8c:	b9d3      	cbnz	r3, 810cbc4 <__hi0bits+0x3c>
 810cb8e:	0400      	lsls	r0, r0, #16
 810cb90:	2310      	movs	r3, #16
 810cb92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810cb96:	bf04      	itt	eq
 810cb98:	0200      	lsleq	r0, r0, #8
 810cb9a:	3308      	addeq	r3, #8
 810cb9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810cba0:	bf04      	itt	eq
 810cba2:	0100      	lsleq	r0, r0, #4
 810cba4:	3304      	addeq	r3, #4
 810cba6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810cbaa:	bf04      	itt	eq
 810cbac:	0080      	lsleq	r0, r0, #2
 810cbae:	3302      	addeq	r3, #2
 810cbb0:	2800      	cmp	r0, #0
 810cbb2:	db05      	blt.n	810cbc0 <__hi0bits+0x38>
 810cbb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810cbb8:	f103 0301 	add.w	r3, r3, #1
 810cbbc:	bf08      	it	eq
 810cbbe:	2320      	moveq	r3, #32
 810cbc0:	4618      	mov	r0, r3
 810cbc2:	4770      	bx	lr
 810cbc4:	2300      	movs	r3, #0
 810cbc6:	e7e4      	b.n	810cb92 <__hi0bits+0xa>

0810cbc8 <__lo0bits>:
 810cbc8:	6803      	ldr	r3, [r0, #0]
 810cbca:	f013 0207 	ands.w	r2, r3, #7
 810cbce:	4601      	mov	r1, r0
 810cbd0:	d00b      	beq.n	810cbea <__lo0bits+0x22>
 810cbd2:	07da      	lsls	r2, r3, #31
 810cbd4:	d423      	bmi.n	810cc1e <__lo0bits+0x56>
 810cbd6:	0798      	lsls	r0, r3, #30
 810cbd8:	bf49      	itett	mi
 810cbda:	085b      	lsrmi	r3, r3, #1
 810cbdc:	089b      	lsrpl	r3, r3, #2
 810cbde:	2001      	movmi	r0, #1
 810cbe0:	600b      	strmi	r3, [r1, #0]
 810cbe2:	bf5c      	itt	pl
 810cbe4:	600b      	strpl	r3, [r1, #0]
 810cbe6:	2002      	movpl	r0, #2
 810cbe8:	4770      	bx	lr
 810cbea:	b298      	uxth	r0, r3
 810cbec:	b9a8      	cbnz	r0, 810cc1a <__lo0bits+0x52>
 810cbee:	0c1b      	lsrs	r3, r3, #16
 810cbf0:	2010      	movs	r0, #16
 810cbf2:	b2da      	uxtb	r2, r3
 810cbf4:	b90a      	cbnz	r2, 810cbfa <__lo0bits+0x32>
 810cbf6:	3008      	adds	r0, #8
 810cbf8:	0a1b      	lsrs	r3, r3, #8
 810cbfa:	071a      	lsls	r2, r3, #28
 810cbfc:	bf04      	itt	eq
 810cbfe:	091b      	lsreq	r3, r3, #4
 810cc00:	3004      	addeq	r0, #4
 810cc02:	079a      	lsls	r2, r3, #30
 810cc04:	bf04      	itt	eq
 810cc06:	089b      	lsreq	r3, r3, #2
 810cc08:	3002      	addeq	r0, #2
 810cc0a:	07da      	lsls	r2, r3, #31
 810cc0c:	d403      	bmi.n	810cc16 <__lo0bits+0x4e>
 810cc0e:	085b      	lsrs	r3, r3, #1
 810cc10:	f100 0001 	add.w	r0, r0, #1
 810cc14:	d005      	beq.n	810cc22 <__lo0bits+0x5a>
 810cc16:	600b      	str	r3, [r1, #0]
 810cc18:	4770      	bx	lr
 810cc1a:	4610      	mov	r0, r2
 810cc1c:	e7e9      	b.n	810cbf2 <__lo0bits+0x2a>
 810cc1e:	2000      	movs	r0, #0
 810cc20:	4770      	bx	lr
 810cc22:	2020      	movs	r0, #32
 810cc24:	4770      	bx	lr
	...

0810cc28 <__i2b>:
 810cc28:	b510      	push	{r4, lr}
 810cc2a:	460c      	mov	r4, r1
 810cc2c:	2101      	movs	r1, #1
 810cc2e:	f7ff feb9 	bl	810c9a4 <_Balloc>
 810cc32:	4602      	mov	r2, r0
 810cc34:	b928      	cbnz	r0, 810cc42 <__i2b+0x1a>
 810cc36:	4b05      	ldr	r3, [pc, #20]	; (810cc4c <__i2b+0x24>)
 810cc38:	4805      	ldr	r0, [pc, #20]	; (810cc50 <__i2b+0x28>)
 810cc3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810cc3e:	f000 ffad 	bl	810db9c <__assert_func>
 810cc42:	2301      	movs	r3, #1
 810cc44:	6144      	str	r4, [r0, #20]
 810cc46:	6103      	str	r3, [r0, #16]
 810cc48:	bd10      	pop	{r4, pc}
 810cc4a:	bf00      	nop
 810cc4c:	0810e2e0 	.word	0x0810e2e0
 810cc50:	0810e3d0 	.word	0x0810e3d0

0810cc54 <__multiply>:
 810cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cc58:	4691      	mov	r9, r2
 810cc5a:	690a      	ldr	r2, [r1, #16]
 810cc5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810cc60:	429a      	cmp	r2, r3
 810cc62:	bfb8      	it	lt
 810cc64:	460b      	movlt	r3, r1
 810cc66:	460c      	mov	r4, r1
 810cc68:	bfbc      	itt	lt
 810cc6a:	464c      	movlt	r4, r9
 810cc6c:	4699      	movlt	r9, r3
 810cc6e:	6927      	ldr	r7, [r4, #16]
 810cc70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810cc74:	68a3      	ldr	r3, [r4, #8]
 810cc76:	6861      	ldr	r1, [r4, #4]
 810cc78:	eb07 060a 	add.w	r6, r7, sl
 810cc7c:	42b3      	cmp	r3, r6
 810cc7e:	b085      	sub	sp, #20
 810cc80:	bfb8      	it	lt
 810cc82:	3101      	addlt	r1, #1
 810cc84:	f7ff fe8e 	bl	810c9a4 <_Balloc>
 810cc88:	b930      	cbnz	r0, 810cc98 <__multiply+0x44>
 810cc8a:	4602      	mov	r2, r0
 810cc8c:	4b44      	ldr	r3, [pc, #272]	; (810cda0 <__multiply+0x14c>)
 810cc8e:	4845      	ldr	r0, [pc, #276]	; (810cda4 <__multiply+0x150>)
 810cc90:	f240 115d 	movw	r1, #349	; 0x15d
 810cc94:	f000 ff82 	bl	810db9c <__assert_func>
 810cc98:	f100 0514 	add.w	r5, r0, #20
 810cc9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810cca0:	462b      	mov	r3, r5
 810cca2:	2200      	movs	r2, #0
 810cca4:	4543      	cmp	r3, r8
 810cca6:	d321      	bcc.n	810ccec <__multiply+0x98>
 810cca8:	f104 0314 	add.w	r3, r4, #20
 810ccac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810ccb0:	f109 0314 	add.w	r3, r9, #20
 810ccb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810ccb8:	9202      	str	r2, [sp, #8]
 810ccba:	1b3a      	subs	r2, r7, r4
 810ccbc:	3a15      	subs	r2, #21
 810ccbe:	f022 0203 	bic.w	r2, r2, #3
 810ccc2:	3204      	adds	r2, #4
 810ccc4:	f104 0115 	add.w	r1, r4, #21
 810ccc8:	428f      	cmp	r7, r1
 810ccca:	bf38      	it	cc
 810cccc:	2204      	movcc	r2, #4
 810ccce:	9201      	str	r2, [sp, #4]
 810ccd0:	9a02      	ldr	r2, [sp, #8]
 810ccd2:	9303      	str	r3, [sp, #12]
 810ccd4:	429a      	cmp	r2, r3
 810ccd6:	d80c      	bhi.n	810ccf2 <__multiply+0x9e>
 810ccd8:	2e00      	cmp	r6, #0
 810ccda:	dd03      	ble.n	810cce4 <__multiply+0x90>
 810ccdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810cce0:	2b00      	cmp	r3, #0
 810cce2:	d05a      	beq.n	810cd9a <__multiply+0x146>
 810cce4:	6106      	str	r6, [r0, #16]
 810cce6:	b005      	add	sp, #20
 810cce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ccec:	f843 2b04 	str.w	r2, [r3], #4
 810ccf0:	e7d8      	b.n	810cca4 <__multiply+0x50>
 810ccf2:	f8b3 a000 	ldrh.w	sl, [r3]
 810ccf6:	f1ba 0f00 	cmp.w	sl, #0
 810ccfa:	d024      	beq.n	810cd46 <__multiply+0xf2>
 810ccfc:	f104 0e14 	add.w	lr, r4, #20
 810cd00:	46a9      	mov	r9, r5
 810cd02:	f04f 0c00 	mov.w	ip, #0
 810cd06:	f85e 2b04 	ldr.w	r2, [lr], #4
 810cd0a:	f8d9 1000 	ldr.w	r1, [r9]
 810cd0e:	fa1f fb82 	uxth.w	fp, r2
 810cd12:	b289      	uxth	r1, r1
 810cd14:	fb0a 110b 	mla	r1, sl, fp, r1
 810cd18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810cd1c:	f8d9 2000 	ldr.w	r2, [r9]
 810cd20:	4461      	add	r1, ip
 810cd22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810cd26:	fb0a c20b 	mla	r2, sl, fp, ip
 810cd2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810cd2e:	b289      	uxth	r1, r1
 810cd30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810cd34:	4577      	cmp	r7, lr
 810cd36:	f849 1b04 	str.w	r1, [r9], #4
 810cd3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810cd3e:	d8e2      	bhi.n	810cd06 <__multiply+0xb2>
 810cd40:	9a01      	ldr	r2, [sp, #4]
 810cd42:	f845 c002 	str.w	ip, [r5, r2]
 810cd46:	9a03      	ldr	r2, [sp, #12]
 810cd48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810cd4c:	3304      	adds	r3, #4
 810cd4e:	f1b9 0f00 	cmp.w	r9, #0
 810cd52:	d020      	beq.n	810cd96 <__multiply+0x142>
 810cd54:	6829      	ldr	r1, [r5, #0]
 810cd56:	f104 0c14 	add.w	ip, r4, #20
 810cd5a:	46ae      	mov	lr, r5
 810cd5c:	f04f 0a00 	mov.w	sl, #0
 810cd60:	f8bc b000 	ldrh.w	fp, [ip]
 810cd64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810cd68:	fb09 220b 	mla	r2, r9, fp, r2
 810cd6c:	4492      	add	sl, r2
 810cd6e:	b289      	uxth	r1, r1
 810cd70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810cd74:	f84e 1b04 	str.w	r1, [lr], #4
 810cd78:	f85c 2b04 	ldr.w	r2, [ip], #4
 810cd7c:	f8be 1000 	ldrh.w	r1, [lr]
 810cd80:	0c12      	lsrs	r2, r2, #16
 810cd82:	fb09 1102 	mla	r1, r9, r2, r1
 810cd86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810cd8a:	4567      	cmp	r7, ip
 810cd8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810cd90:	d8e6      	bhi.n	810cd60 <__multiply+0x10c>
 810cd92:	9a01      	ldr	r2, [sp, #4]
 810cd94:	50a9      	str	r1, [r5, r2]
 810cd96:	3504      	adds	r5, #4
 810cd98:	e79a      	b.n	810ccd0 <__multiply+0x7c>
 810cd9a:	3e01      	subs	r6, #1
 810cd9c:	e79c      	b.n	810ccd8 <__multiply+0x84>
 810cd9e:	bf00      	nop
 810cda0:	0810e2e0 	.word	0x0810e2e0
 810cda4:	0810e3d0 	.word	0x0810e3d0

0810cda8 <__pow5mult>:
 810cda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810cdac:	4615      	mov	r5, r2
 810cdae:	f012 0203 	ands.w	r2, r2, #3
 810cdb2:	4606      	mov	r6, r0
 810cdb4:	460f      	mov	r7, r1
 810cdb6:	d007      	beq.n	810cdc8 <__pow5mult+0x20>
 810cdb8:	4c25      	ldr	r4, [pc, #148]	; (810ce50 <__pow5mult+0xa8>)
 810cdba:	3a01      	subs	r2, #1
 810cdbc:	2300      	movs	r3, #0
 810cdbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810cdc2:	f7ff fe51 	bl	810ca68 <__multadd>
 810cdc6:	4607      	mov	r7, r0
 810cdc8:	10ad      	asrs	r5, r5, #2
 810cdca:	d03d      	beq.n	810ce48 <__pow5mult+0xa0>
 810cdcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810cdce:	b97c      	cbnz	r4, 810cdf0 <__pow5mult+0x48>
 810cdd0:	2010      	movs	r0, #16
 810cdd2:	f7ff fdcd 	bl	810c970 <malloc>
 810cdd6:	4602      	mov	r2, r0
 810cdd8:	6270      	str	r0, [r6, #36]	; 0x24
 810cdda:	b928      	cbnz	r0, 810cde8 <__pow5mult+0x40>
 810cddc:	4b1d      	ldr	r3, [pc, #116]	; (810ce54 <__pow5mult+0xac>)
 810cdde:	481e      	ldr	r0, [pc, #120]	; (810ce58 <__pow5mult+0xb0>)
 810cde0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810cde4:	f000 feda 	bl	810db9c <__assert_func>
 810cde8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810cdec:	6004      	str	r4, [r0, #0]
 810cdee:	60c4      	str	r4, [r0, #12]
 810cdf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810cdf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810cdf8:	b94c      	cbnz	r4, 810ce0e <__pow5mult+0x66>
 810cdfa:	f240 2171 	movw	r1, #625	; 0x271
 810cdfe:	4630      	mov	r0, r6
 810ce00:	f7ff ff12 	bl	810cc28 <__i2b>
 810ce04:	2300      	movs	r3, #0
 810ce06:	f8c8 0008 	str.w	r0, [r8, #8]
 810ce0a:	4604      	mov	r4, r0
 810ce0c:	6003      	str	r3, [r0, #0]
 810ce0e:	f04f 0900 	mov.w	r9, #0
 810ce12:	07eb      	lsls	r3, r5, #31
 810ce14:	d50a      	bpl.n	810ce2c <__pow5mult+0x84>
 810ce16:	4639      	mov	r1, r7
 810ce18:	4622      	mov	r2, r4
 810ce1a:	4630      	mov	r0, r6
 810ce1c:	f7ff ff1a 	bl	810cc54 <__multiply>
 810ce20:	4639      	mov	r1, r7
 810ce22:	4680      	mov	r8, r0
 810ce24:	4630      	mov	r0, r6
 810ce26:	f7ff fdfd 	bl	810ca24 <_Bfree>
 810ce2a:	4647      	mov	r7, r8
 810ce2c:	106d      	asrs	r5, r5, #1
 810ce2e:	d00b      	beq.n	810ce48 <__pow5mult+0xa0>
 810ce30:	6820      	ldr	r0, [r4, #0]
 810ce32:	b938      	cbnz	r0, 810ce44 <__pow5mult+0x9c>
 810ce34:	4622      	mov	r2, r4
 810ce36:	4621      	mov	r1, r4
 810ce38:	4630      	mov	r0, r6
 810ce3a:	f7ff ff0b 	bl	810cc54 <__multiply>
 810ce3e:	6020      	str	r0, [r4, #0]
 810ce40:	f8c0 9000 	str.w	r9, [r0]
 810ce44:	4604      	mov	r4, r0
 810ce46:	e7e4      	b.n	810ce12 <__pow5mult+0x6a>
 810ce48:	4638      	mov	r0, r7
 810ce4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ce4e:	bf00      	nop
 810ce50:	0810e520 	.word	0x0810e520
 810ce54:	0810e26e 	.word	0x0810e26e
 810ce58:	0810e3d0 	.word	0x0810e3d0

0810ce5c <__lshift>:
 810ce5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ce60:	460c      	mov	r4, r1
 810ce62:	6849      	ldr	r1, [r1, #4]
 810ce64:	6923      	ldr	r3, [r4, #16]
 810ce66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810ce6a:	68a3      	ldr	r3, [r4, #8]
 810ce6c:	4607      	mov	r7, r0
 810ce6e:	4691      	mov	r9, r2
 810ce70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810ce74:	f108 0601 	add.w	r6, r8, #1
 810ce78:	42b3      	cmp	r3, r6
 810ce7a:	db0b      	blt.n	810ce94 <__lshift+0x38>
 810ce7c:	4638      	mov	r0, r7
 810ce7e:	f7ff fd91 	bl	810c9a4 <_Balloc>
 810ce82:	4605      	mov	r5, r0
 810ce84:	b948      	cbnz	r0, 810ce9a <__lshift+0x3e>
 810ce86:	4602      	mov	r2, r0
 810ce88:	4b2a      	ldr	r3, [pc, #168]	; (810cf34 <__lshift+0xd8>)
 810ce8a:	482b      	ldr	r0, [pc, #172]	; (810cf38 <__lshift+0xdc>)
 810ce8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 810ce90:	f000 fe84 	bl	810db9c <__assert_func>
 810ce94:	3101      	adds	r1, #1
 810ce96:	005b      	lsls	r3, r3, #1
 810ce98:	e7ee      	b.n	810ce78 <__lshift+0x1c>
 810ce9a:	2300      	movs	r3, #0
 810ce9c:	f100 0114 	add.w	r1, r0, #20
 810cea0:	f100 0210 	add.w	r2, r0, #16
 810cea4:	4618      	mov	r0, r3
 810cea6:	4553      	cmp	r3, sl
 810cea8:	db37      	blt.n	810cf1a <__lshift+0xbe>
 810ceaa:	6920      	ldr	r0, [r4, #16]
 810ceac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810ceb0:	f104 0314 	add.w	r3, r4, #20
 810ceb4:	f019 091f 	ands.w	r9, r9, #31
 810ceb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810cebc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810cec0:	d02f      	beq.n	810cf22 <__lshift+0xc6>
 810cec2:	f1c9 0e20 	rsb	lr, r9, #32
 810cec6:	468a      	mov	sl, r1
 810cec8:	f04f 0c00 	mov.w	ip, #0
 810cecc:	681a      	ldr	r2, [r3, #0]
 810cece:	fa02 f209 	lsl.w	r2, r2, r9
 810ced2:	ea42 020c 	orr.w	r2, r2, ip
 810ced6:	f84a 2b04 	str.w	r2, [sl], #4
 810ceda:	f853 2b04 	ldr.w	r2, [r3], #4
 810cede:	4298      	cmp	r0, r3
 810cee0:	fa22 fc0e 	lsr.w	ip, r2, lr
 810cee4:	d8f2      	bhi.n	810cecc <__lshift+0x70>
 810cee6:	1b03      	subs	r3, r0, r4
 810cee8:	3b15      	subs	r3, #21
 810ceea:	f023 0303 	bic.w	r3, r3, #3
 810ceee:	3304      	adds	r3, #4
 810cef0:	f104 0215 	add.w	r2, r4, #21
 810cef4:	4290      	cmp	r0, r2
 810cef6:	bf38      	it	cc
 810cef8:	2304      	movcc	r3, #4
 810cefa:	f841 c003 	str.w	ip, [r1, r3]
 810cefe:	f1bc 0f00 	cmp.w	ip, #0
 810cf02:	d001      	beq.n	810cf08 <__lshift+0xac>
 810cf04:	f108 0602 	add.w	r6, r8, #2
 810cf08:	3e01      	subs	r6, #1
 810cf0a:	4638      	mov	r0, r7
 810cf0c:	612e      	str	r6, [r5, #16]
 810cf0e:	4621      	mov	r1, r4
 810cf10:	f7ff fd88 	bl	810ca24 <_Bfree>
 810cf14:	4628      	mov	r0, r5
 810cf16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cf1a:	f842 0f04 	str.w	r0, [r2, #4]!
 810cf1e:	3301      	adds	r3, #1
 810cf20:	e7c1      	b.n	810cea6 <__lshift+0x4a>
 810cf22:	3904      	subs	r1, #4
 810cf24:	f853 2b04 	ldr.w	r2, [r3], #4
 810cf28:	f841 2f04 	str.w	r2, [r1, #4]!
 810cf2c:	4298      	cmp	r0, r3
 810cf2e:	d8f9      	bhi.n	810cf24 <__lshift+0xc8>
 810cf30:	e7ea      	b.n	810cf08 <__lshift+0xac>
 810cf32:	bf00      	nop
 810cf34:	0810e2e0 	.word	0x0810e2e0
 810cf38:	0810e3d0 	.word	0x0810e3d0

0810cf3c <__mcmp>:
 810cf3c:	b530      	push	{r4, r5, lr}
 810cf3e:	6902      	ldr	r2, [r0, #16]
 810cf40:	690c      	ldr	r4, [r1, #16]
 810cf42:	1b12      	subs	r2, r2, r4
 810cf44:	d10e      	bne.n	810cf64 <__mcmp+0x28>
 810cf46:	f100 0314 	add.w	r3, r0, #20
 810cf4a:	3114      	adds	r1, #20
 810cf4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810cf50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810cf54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810cf58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810cf5c:	42a5      	cmp	r5, r4
 810cf5e:	d003      	beq.n	810cf68 <__mcmp+0x2c>
 810cf60:	d305      	bcc.n	810cf6e <__mcmp+0x32>
 810cf62:	2201      	movs	r2, #1
 810cf64:	4610      	mov	r0, r2
 810cf66:	bd30      	pop	{r4, r5, pc}
 810cf68:	4283      	cmp	r3, r0
 810cf6a:	d3f3      	bcc.n	810cf54 <__mcmp+0x18>
 810cf6c:	e7fa      	b.n	810cf64 <__mcmp+0x28>
 810cf6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810cf72:	e7f7      	b.n	810cf64 <__mcmp+0x28>

0810cf74 <__mdiff>:
 810cf74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cf78:	460c      	mov	r4, r1
 810cf7a:	4606      	mov	r6, r0
 810cf7c:	4611      	mov	r1, r2
 810cf7e:	4620      	mov	r0, r4
 810cf80:	4690      	mov	r8, r2
 810cf82:	f7ff ffdb 	bl	810cf3c <__mcmp>
 810cf86:	1e05      	subs	r5, r0, #0
 810cf88:	d110      	bne.n	810cfac <__mdiff+0x38>
 810cf8a:	4629      	mov	r1, r5
 810cf8c:	4630      	mov	r0, r6
 810cf8e:	f7ff fd09 	bl	810c9a4 <_Balloc>
 810cf92:	b930      	cbnz	r0, 810cfa2 <__mdiff+0x2e>
 810cf94:	4b3a      	ldr	r3, [pc, #232]	; (810d080 <__mdiff+0x10c>)
 810cf96:	4602      	mov	r2, r0
 810cf98:	f240 2132 	movw	r1, #562	; 0x232
 810cf9c:	4839      	ldr	r0, [pc, #228]	; (810d084 <__mdiff+0x110>)
 810cf9e:	f000 fdfd 	bl	810db9c <__assert_func>
 810cfa2:	2301      	movs	r3, #1
 810cfa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810cfa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cfac:	bfa4      	itt	ge
 810cfae:	4643      	movge	r3, r8
 810cfb0:	46a0      	movge	r8, r4
 810cfb2:	4630      	mov	r0, r6
 810cfb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810cfb8:	bfa6      	itte	ge
 810cfba:	461c      	movge	r4, r3
 810cfbc:	2500      	movge	r5, #0
 810cfbe:	2501      	movlt	r5, #1
 810cfc0:	f7ff fcf0 	bl	810c9a4 <_Balloc>
 810cfc4:	b920      	cbnz	r0, 810cfd0 <__mdiff+0x5c>
 810cfc6:	4b2e      	ldr	r3, [pc, #184]	; (810d080 <__mdiff+0x10c>)
 810cfc8:	4602      	mov	r2, r0
 810cfca:	f44f 7110 	mov.w	r1, #576	; 0x240
 810cfce:	e7e5      	b.n	810cf9c <__mdiff+0x28>
 810cfd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810cfd4:	6926      	ldr	r6, [r4, #16]
 810cfd6:	60c5      	str	r5, [r0, #12]
 810cfd8:	f104 0914 	add.w	r9, r4, #20
 810cfdc:	f108 0514 	add.w	r5, r8, #20
 810cfe0:	f100 0e14 	add.w	lr, r0, #20
 810cfe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810cfe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810cfec:	f108 0210 	add.w	r2, r8, #16
 810cff0:	46f2      	mov	sl, lr
 810cff2:	2100      	movs	r1, #0
 810cff4:	f859 3b04 	ldr.w	r3, [r9], #4
 810cff8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810cffc:	fa1f f883 	uxth.w	r8, r3
 810d000:	fa11 f18b 	uxtah	r1, r1, fp
 810d004:	0c1b      	lsrs	r3, r3, #16
 810d006:	eba1 0808 	sub.w	r8, r1, r8
 810d00a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810d00e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810d012:	fa1f f888 	uxth.w	r8, r8
 810d016:	1419      	asrs	r1, r3, #16
 810d018:	454e      	cmp	r6, r9
 810d01a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810d01e:	f84a 3b04 	str.w	r3, [sl], #4
 810d022:	d8e7      	bhi.n	810cff4 <__mdiff+0x80>
 810d024:	1b33      	subs	r3, r6, r4
 810d026:	3b15      	subs	r3, #21
 810d028:	f023 0303 	bic.w	r3, r3, #3
 810d02c:	3304      	adds	r3, #4
 810d02e:	3415      	adds	r4, #21
 810d030:	42a6      	cmp	r6, r4
 810d032:	bf38      	it	cc
 810d034:	2304      	movcc	r3, #4
 810d036:	441d      	add	r5, r3
 810d038:	4473      	add	r3, lr
 810d03a:	469e      	mov	lr, r3
 810d03c:	462e      	mov	r6, r5
 810d03e:	4566      	cmp	r6, ip
 810d040:	d30e      	bcc.n	810d060 <__mdiff+0xec>
 810d042:	f10c 0203 	add.w	r2, ip, #3
 810d046:	1b52      	subs	r2, r2, r5
 810d048:	f022 0203 	bic.w	r2, r2, #3
 810d04c:	3d03      	subs	r5, #3
 810d04e:	45ac      	cmp	ip, r5
 810d050:	bf38      	it	cc
 810d052:	2200      	movcc	r2, #0
 810d054:	441a      	add	r2, r3
 810d056:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810d05a:	b17b      	cbz	r3, 810d07c <__mdiff+0x108>
 810d05c:	6107      	str	r7, [r0, #16]
 810d05e:	e7a3      	b.n	810cfa8 <__mdiff+0x34>
 810d060:	f856 8b04 	ldr.w	r8, [r6], #4
 810d064:	fa11 f288 	uxtah	r2, r1, r8
 810d068:	1414      	asrs	r4, r2, #16
 810d06a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810d06e:	b292      	uxth	r2, r2
 810d070:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810d074:	f84e 2b04 	str.w	r2, [lr], #4
 810d078:	1421      	asrs	r1, r4, #16
 810d07a:	e7e0      	b.n	810d03e <__mdiff+0xca>
 810d07c:	3f01      	subs	r7, #1
 810d07e:	e7ea      	b.n	810d056 <__mdiff+0xe2>
 810d080:	0810e2e0 	.word	0x0810e2e0
 810d084:	0810e3d0 	.word	0x0810e3d0

0810d088 <__ulp>:
 810d088:	b082      	sub	sp, #8
 810d08a:	ed8d 0b00 	vstr	d0, [sp]
 810d08e:	9b01      	ldr	r3, [sp, #4]
 810d090:	4912      	ldr	r1, [pc, #72]	; (810d0dc <__ulp+0x54>)
 810d092:	4019      	ands	r1, r3
 810d094:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810d098:	2900      	cmp	r1, #0
 810d09a:	dd05      	ble.n	810d0a8 <__ulp+0x20>
 810d09c:	2200      	movs	r2, #0
 810d09e:	460b      	mov	r3, r1
 810d0a0:	ec43 2b10 	vmov	d0, r2, r3
 810d0a4:	b002      	add	sp, #8
 810d0a6:	4770      	bx	lr
 810d0a8:	4249      	negs	r1, r1
 810d0aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810d0ae:	ea4f 5021 	mov.w	r0, r1, asr #20
 810d0b2:	f04f 0200 	mov.w	r2, #0
 810d0b6:	f04f 0300 	mov.w	r3, #0
 810d0ba:	da04      	bge.n	810d0c6 <__ulp+0x3e>
 810d0bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810d0c0:	fa41 f300 	asr.w	r3, r1, r0
 810d0c4:	e7ec      	b.n	810d0a0 <__ulp+0x18>
 810d0c6:	f1a0 0114 	sub.w	r1, r0, #20
 810d0ca:	291e      	cmp	r1, #30
 810d0cc:	bfda      	itte	le
 810d0ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810d0d2:	fa20 f101 	lsrle.w	r1, r0, r1
 810d0d6:	2101      	movgt	r1, #1
 810d0d8:	460a      	mov	r2, r1
 810d0da:	e7e1      	b.n	810d0a0 <__ulp+0x18>
 810d0dc:	7ff00000 	.word	0x7ff00000

0810d0e0 <__b2d>:
 810d0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d0e2:	6905      	ldr	r5, [r0, #16]
 810d0e4:	f100 0714 	add.w	r7, r0, #20
 810d0e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810d0ec:	1f2e      	subs	r6, r5, #4
 810d0ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810d0f2:	4620      	mov	r0, r4
 810d0f4:	f7ff fd48 	bl	810cb88 <__hi0bits>
 810d0f8:	f1c0 0320 	rsb	r3, r0, #32
 810d0fc:	280a      	cmp	r0, #10
 810d0fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810d17c <__b2d+0x9c>
 810d102:	600b      	str	r3, [r1, #0]
 810d104:	dc14      	bgt.n	810d130 <__b2d+0x50>
 810d106:	f1c0 0e0b 	rsb	lr, r0, #11
 810d10a:	fa24 f10e 	lsr.w	r1, r4, lr
 810d10e:	42b7      	cmp	r7, r6
 810d110:	ea41 030c 	orr.w	r3, r1, ip
 810d114:	bf34      	ite	cc
 810d116:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810d11a:	2100      	movcs	r1, #0
 810d11c:	3015      	adds	r0, #21
 810d11e:	fa04 f000 	lsl.w	r0, r4, r0
 810d122:	fa21 f10e 	lsr.w	r1, r1, lr
 810d126:	ea40 0201 	orr.w	r2, r0, r1
 810d12a:	ec43 2b10 	vmov	d0, r2, r3
 810d12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d130:	42b7      	cmp	r7, r6
 810d132:	bf3a      	itte	cc
 810d134:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810d138:	f1a5 0608 	subcc.w	r6, r5, #8
 810d13c:	2100      	movcs	r1, #0
 810d13e:	380b      	subs	r0, #11
 810d140:	d017      	beq.n	810d172 <__b2d+0x92>
 810d142:	f1c0 0c20 	rsb	ip, r0, #32
 810d146:	fa04 f500 	lsl.w	r5, r4, r0
 810d14a:	42be      	cmp	r6, r7
 810d14c:	fa21 f40c 	lsr.w	r4, r1, ip
 810d150:	ea45 0504 	orr.w	r5, r5, r4
 810d154:	bf8c      	ite	hi
 810d156:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810d15a:	2400      	movls	r4, #0
 810d15c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810d160:	fa01 f000 	lsl.w	r0, r1, r0
 810d164:	fa24 f40c 	lsr.w	r4, r4, ip
 810d168:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810d16c:	ea40 0204 	orr.w	r2, r0, r4
 810d170:	e7db      	b.n	810d12a <__b2d+0x4a>
 810d172:	ea44 030c 	orr.w	r3, r4, ip
 810d176:	460a      	mov	r2, r1
 810d178:	e7d7      	b.n	810d12a <__b2d+0x4a>
 810d17a:	bf00      	nop
 810d17c:	3ff00000 	.word	0x3ff00000

0810d180 <__d2b>:
 810d180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810d184:	4689      	mov	r9, r1
 810d186:	2101      	movs	r1, #1
 810d188:	ec57 6b10 	vmov	r6, r7, d0
 810d18c:	4690      	mov	r8, r2
 810d18e:	f7ff fc09 	bl	810c9a4 <_Balloc>
 810d192:	4604      	mov	r4, r0
 810d194:	b930      	cbnz	r0, 810d1a4 <__d2b+0x24>
 810d196:	4602      	mov	r2, r0
 810d198:	4b25      	ldr	r3, [pc, #148]	; (810d230 <__d2b+0xb0>)
 810d19a:	4826      	ldr	r0, [pc, #152]	; (810d234 <__d2b+0xb4>)
 810d19c:	f240 310a 	movw	r1, #778	; 0x30a
 810d1a0:	f000 fcfc 	bl	810db9c <__assert_func>
 810d1a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810d1a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810d1ac:	bb35      	cbnz	r5, 810d1fc <__d2b+0x7c>
 810d1ae:	2e00      	cmp	r6, #0
 810d1b0:	9301      	str	r3, [sp, #4]
 810d1b2:	d028      	beq.n	810d206 <__d2b+0x86>
 810d1b4:	4668      	mov	r0, sp
 810d1b6:	9600      	str	r6, [sp, #0]
 810d1b8:	f7ff fd06 	bl	810cbc8 <__lo0bits>
 810d1bc:	9900      	ldr	r1, [sp, #0]
 810d1be:	b300      	cbz	r0, 810d202 <__d2b+0x82>
 810d1c0:	9a01      	ldr	r2, [sp, #4]
 810d1c2:	f1c0 0320 	rsb	r3, r0, #32
 810d1c6:	fa02 f303 	lsl.w	r3, r2, r3
 810d1ca:	430b      	orrs	r3, r1
 810d1cc:	40c2      	lsrs	r2, r0
 810d1ce:	6163      	str	r3, [r4, #20]
 810d1d0:	9201      	str	r2, [sp, #4]
 810d1d2:	9b01      	ldr	r3, [sp, #4]
 810d1d4:	61a3      	str	r3, [r4, #24]
 810d1d6:	2b00      	cmp	r3, #0
 810d1d8:	bf14      	ite	ne
 810d1da:	2202      	movne	r2, #2
 810d1dc:	2201      	moveq	r2, #1
 810d1de:	6122      	str	r2, [r4, #16]
 810d1e0:	b1d5      	cbz	r5, 810d218 <__d2b+0x98>
 810d1e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810d1e6:	4405      	add	r5, r0
 810d1e8:	f8c9 5000 	str.w	r5, [r9]
 810d1ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810d1f0:	f8c8 0000 	str.w	r0, [r8]
 810d1f4:	4620      	mov	r0, r4
 810d1f6:	b003      	add	sp, #12
 810d1f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810d1fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810d200:	e7d5      	b.n	810d1ae <__d2b+0x2e>
 810d202:	6161      	str	r1, [r4, #20]
 810d204:	e7e5      	b.n	810d1d2 <__d2b+0x52>
 810d206:	a801      	add	r0, sp, #4
 810d208:	f7ff fcde 	bl	810cbc8 <__lo0bits>
 810d20c:	9b01      	ldr	r3, [sp, #4]
 810d20e:	6163      	str	r3, [r4, #20]
 810d210:	2201      	movs	r2, #1
 810d212:	6122      	str	r2, [r4, #16]
 810d214:	3020      	adds	r0, #32
 810d216:	e7e3      	b.n	810d1e0 <__d2b+0x60>
 810d218:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810d21c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810d220:	f8c9 0000 	str.w	r0, [r9]
 810d224:	6918      	ldr	r0, [r3, #16]
 810d226:	f7ff fcaf 	bl	810cb88 <__hi0bits>
 810d22a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810d22e:	e7df      	b.n	810d1f0 <__d2b+0x70>
 810d230:	0810e2e0 	.word	0x0810e2e0
 810d234:	0810e3d0 	.word	0x0810e3d0

0810d238 <__ratio>:
 810d238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d23c:	4688      	mov	r8, r1
 810d23e:	4669      	mov	r1, sp
 810d240:	4681      	mov	r9, r0
 810d242:	f7ff ff4d 	bl	810d0e0 <__b2d>
 810d246:	a901      	add	r1, sp, #4
 810d248:	4640      	mov	r0, r8
 810d24a:	ec55 4b10 	vmov	r4, r5, d0
 810d24e:	f7ff ff47 	bl	810d0e0 <__b2d>
 810d252:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810d256:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810d25a:	eba3 0c02 	sub.w	ip, r3, r2
 810d25e:	e9dd 3200 	ldrd	r3, r2, [sp]
 810d262:	1a9b      	subs	r3, r3, r2
 810d264:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810d268:	ec51 0b10 	vmov	r0, r1, d0
 810d26c:	2b00      	cmp	r3, #0
 810d26e:	bfd6      	itet	le
 810d270:	460a      	movle	r2, r1
 810d272:	462a      	movgt	r2, r5
 810d274:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810d278:	468b      	mov	fp, r1
 810d27a:	462f      	mov	r7, r5
 810d27c:	bfd4      	ite	le
 810d27e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810d282:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810d286:	4620      	mov	r0, r4
 810d288:	ee10 2a10 	vmov	r2, s0
 810d28c:	465b      	mov	r3, fp
 810d28e:	4639      	mov	r1, r7
 810d290:	f7f3 fb64 	bl	810095c <__aeabi_ddiv>
 810d294:	ec41 0b10 	vmov	d0, r0, r1
 810d298:	b003      	add	sp, #12
 810d29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810d29e <__copybits>:
 810d29e:	3901      	subs	r1, #1
 810d2a0:	b570      	push	{r4, r5, r6, lr}
 810d2a2:	1149      	asrs	r1, r1, #5
 810d2a4:	6914      	ldr	r4, [r2, #16]
 810d2a6:	3101      	adds	r1, #1
 810d2a8:	f102 0314 	add.w	r3, r2, #20
 810d2ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810d2b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810d2b4:	1f05      	subs	r5, r0, #4
 810d2b6:	42a3      	cmp	r3, r4
 810d2b8:	d30c      	bcc.n	810d2d4 <__copybits+0x36>
 810d2ba:	1aa3      	subs	r3, r4, r2
 810d2bc:	3b11      	subs	r3, #17
 810d2be:	f023 0303 	bic.w	r3, r3, #3
 810d2c2:	3211      	adds	r2, #17
 810d2c4:	42a2      	cmp	r2, r4
 810d2c6:	bf88      	it	hi
 810d2c8:	2300      	movhi	r3, #0
 810d2ca:	4418      	add	r0, r3
 810d2cc:	2300      	movs	r3, #0
 810d2ce:	4288      	cmp	r0, r1
 810d2d0:	d305      	bcc.n	810d2de <__copybits+0x40>
 810d2d2:	bd70      	pop	{r4, r5, r6, pc}
 810d2d4:	f853 6b04 	ldr.w	r6, [r3], #4
 810d2d8:	f845 6f04 	str.w	r6, [r5, #4]!
 810d2dc:	e7eb      	b.n	810d2b6 <__copybits+0x18>
 810d2de:	f840 3b04 	str.w	r3, [r0], #4
 810d2e2:	e7f4      	b.n	810d2ce <__copybits+0x30>

0810d2e4 <__any_on>:
 810d2e4:	f100 0214 	add.w	r2, r0, #20
 810d2e8:	6900      	ldr	r0, [r0, #16]
 810d2ea:	114b      	asrs	r3, r1, #5
 810d2ec:	4298      	cmp	r0, r3
 810d2ee:	b510      	push	{r4, lr}
 810d2f0:	db11      	blt.n	810d316 <__any_on+0x32>
 810d2f2:	dd0a      	ble.n	810d30a <__any_on+0x26>
 810d2f4:	f011 011f 	ands.w	r1, r1, #31
 810d2f8:	d007      	beq.n	810d30a <__any_on+0x26>
 810d2fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810d2fe:	fa24 f001 	lsr.w	r0, r4, r1
 810d302:	fa00 f101 	lsl.w	r1, r0, r1
 810d306:	428c      	cmp	r4, r1
 810d308:	d10b      	bne.n	810d322 <__any_on+0x3e>
 810d30a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810d30e:	4293      	cmp	r3, r2
 810d310:	d803      	bhi.n	810d31a <__any_on+0x36>
 810d312:	2000      	movs	r0, #0
 810d314:	bd10      	pop	{r4, pc}
 810d316:	4603      	mov	r3, r0
 810d318:	e7f7      	b.n	810d30a <__any_on+0x26>
 810d31a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810d31e:	2900      	cmp	r1, #0
 810d320:	d0f5      	beq.n	810d30e <__any_on+0x2a>
 810d322:	2001      	movs	r0, #1
 810d324:	e7f6      	b.n	810d314 <__any_on+0x30>

0810d326 <_calloc_r>:
 810d326:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810d328:	fba1 2402 	umull	r2, r4, r1, r2
 810d32c:	b94c      	cbnz	r4, 810d342 <_calloc_r+0x1c>
 810d32e:	4611      	mov	r1, r2
 810d330:	9201      	str	r2, [sp, #4]
 810d332:	f000 f87b 	bl	810d42c <_malloc_r>
 810d336:	9a01      	ldr	r2, [sp, #4]
 810d338:	4605      	mov	r5, r0
 810d33a:	b930      	cbnz	r0, 810d34a <_calloc_r+0x24>
 810d33c:	4628      	mov	r0, r5
 810d33e:	b003      	add	sp, #12
 810d340:	bd30      	pop	{r4, r5, pc}
 810d342:	220c      	movs	r2, #12
 810d344:	6002      	str	r2, [r0, #0]
 810d346:	2500      	movs	r5, #0
 810d348:	e7f8      	b.n	810d33c <_calloc_r+0x16>
 810d34a:	4621      	mov	r1, r4
 810d34c:	f7fc f860 	bl	8109410 <memset>
 810d350:	e7f4      	b.n	810d33c <_calloc_r+0x16>
	...

0810d354 <_free_r>:
 810d354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810d356:	2900      	cmp	r1, #0
 810d358:	d044      	beq.n	810d3e4 <_free_r+0x90>
 810d35a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d35e:	9001      	str	r0, [sp, #4]
 810d360:	2b00      	cmp	r3, #0
 810d362:	f1a1 0404 	sub.w	r4, r1, #4
 810d366:	bfb8      	it	lt
 810d368:	18e4      	addlt	r4, r4, r3
 810d36a:	f000 fca5 	bl	810dcb8 <__malloc_lock>
 810d36e:	4a1e      	ldr	r2, [pc, #120]	; (810d3e8 <_free_r+0x94>)
 810d370:	9801      	ldr	r0, [sp, #4]
 810d372:	6813      	ldr	r3, [r2, #0]
 810d374:	b933      	cbnz	r3, 810d384 <_free_r+0x30>
 810d376:	6063      	str	r3, [r4, #4]
 810d378:	6014      	str	r4, [r2, #0]
 810d37a:	b003      	add	sp, #12
 810d37c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810d380:	f000 bca0 	b.w	810dcc4 <__malloc_unlock>
 810d384:	42a3      	cmp	r3, r4
 810d386:	d908      	bls.n	810d39a <_free_r+0x46>
 810d388:	6825      	ldr	r5, [r4, #0]
 810d38a:	1961      	adds	r1, r4, r5
 810d38c:	428b      	cmp	r3, r1
 810d38e:	bf01      	itttt	eq
 810d390:	6819      	ldreq	r1, [r3, #0]
 810d392:	685b      	ldreq	r3, [r3, #4]
 810d394:	1949      	addeq	r1, r1, r5
 810d396:	6021      	streq	r1, [r4, #0]
 810d398:	e7ed      	b.n	810d376 <_free_r+0x22>
 810d39a:	461a      	mov	r2, r3
 810d39c:	685b      	ldr	r3, [r3, #4]
 810d39e:	b10b      	cbz	r3, 810d3a4 <_free_r+0x50>
 810d3a0:	42a3      	cmp	r3, r4
 810d3a2:	d9fa      	bls.n	810d39a <_free_r+0x46>
 810d3a4:	6811      	ldr	r1, [r2, #0]
 810d3a6:	1855      	adds	r5, r2, r1
 810d3a8:	42a5      	cmp	r5, r4
 810d3aa:	d10b      	bne.n	810d3c4 <_free_r+0x70>
 810d3ac:	6824      	ldr	r4, [r4, #0]
 810d3ae:	4421      	add	r1, r4
 810d3b0:	1854      	adds	r4, r2, r1
 810d3b2:	42a3      	cmp	r3, r4
 810d3b4:	6011      	str	r1, [r2, #0]
 810d3b6:	d1e0      	bne.n	810d37a <_free_r+0x26>
 810d3b8:	681c      	ldr	r4, [r3, #0]
 810d3ba:	685b      	ldr	r3, [r3, #4]
 810d3bc:	6053      	str	r3, [r2, #4]
 810d3be:	4421      	add	r1, r4
 810d3c0:	6011      	str	r1, [r2, #0]
 810d3c2:	e7da      	b.n	810d37a <_free_r+0x26>
 810d3c4:	d902      	bls.n	810d3cc <_free_r+0x78>
 810d3c6:	230c      	movs	r3, #12
 810d3c8:	6003      	str	r3, [r0, #0]
 810d3ca:	e7d6      	b.n	810d37a <_free_r+0x26>
 810d3cc:	6825      	ldr	r5, [r4, #0]
 810d3ce:	1961      	adds	r1, r4, r5
 810d3d0:	428b      	cmp	r3, r1
 810d3d2:	bf04      	itt	eq
 810d3d4:	6819      	ldreq	r1, [r3, #0]
 810d3d6:	685b      	ldreq	r3, [r3, #4]
 810d3d8:	6063      	str	r3, [r4, #4]
 810d3da:	bf04      	itt	eq
 810d3dc:	1949      	addeq	r1, r1, r5
 810d3de:	6021      	streq	r1, [r4, #0]
 810d3e0:	6054      	str	r4, [r2, #4]
 810d3e2:	e7ca      	b.n	810d37a <_free_r+0x26>
 810d3e4:	b003      	add	sp, #12
 810d3e6:	bd30      	pop	{r4, r5, pc}
 810d3e8:	100003c8 	.word	0x100003c8

0810d3ec <sbrk_aligned>:
 810d3ec:	b570      	push	{r4, r5, r6, lr}
 810d3ee:	4e0e      	ldr	r6, [pc, #56]	; (810d428 <sbrk_aligned+0x3c>)
 810d3f0:	460c      	mov	r4, r1
 810d3f2:	6831      	ldr	r1, [r6, #0]
 810d3f4:	4605      	mov	r5, r0
 810d3f6:	b911      	cbnz	r1, 810d3fe <sbrk_aligned+0x12>
 810d3f8:	f000 fb4a 	bl	810da90 <_sbrk_r>
 810d3fc:	6030      	str	r0, [r6, #0]
 810d3fe:	4621      	mov	r1, r4
 810d400:	4628      	mov	r0, r5
 810d402:	f000 fb45 	bl	810da90 <_sbrk_r>
 810d406:	1c43      	adds	r3, r0, #1
 810d408:	d00a      	beq.n	810d420 <sbrk_aligned+0x34>
 810d40a:	1cc4      	adds	r4, r0, #3
 810d40c:	f024 0403 	bic.w	r4, r4, #3
 810d410:	42a0      	cmp	r0, r4
 810d412:	d007      	beq.n	810d424 <sbrk_aligned+0x38>
 810d414:	1a21      	subs	r1, r4, r0
 810d416:	4628      	mov	r0, r5
 810d418:	f000 fb3a 	bl	810da90 <_sbrk_r>
 810d41c:	3001      	adds	r0, #1
 810d41e:	d101      	bne.n	810d424 <sbrk_aligned+0x38>
 810d420:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 810d424:	4620      	mov	r0, r4
 810d426:	bd70      	pop	{r4, r5, r6, pc}
 810d428:	100003cc 	.word	0x100003cc

0810d42c <_malloc_r>:
 810d42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d430:	1ccd      	adds	r5, r1, #3
 810d432:	f025 0503 	bic.w	r5, r5, #3
 810d436:	3508      	adds	r5, #8
 810d438:	2d0c      	cmp	r5, #12
 810d43a:	bf38      	it	cc
 810d43c:	250c      	movcc	r5, #12
 810d43e:	2d00      	cmp	r5, #0
 810d440:	4607      	mov	r7, r0
 810d442:	db01      	blt.n	810d448 <_malloc_r+0x1c>
 810d444:	42a9      	cmp	r1, r5
 810d446:	d905      	bls.n	810d454 <_malloc_r+0x28>
 810d448:	230c      	movs	r3, #12
 810d44a:	603b      	str	r3, [r7, #0]
 810d44c:	2600      	movs	r6, #0
 810d44e:	4630      	mov	r0, r6
 810d450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d454:	4e2e      	ldr	r6, [pc, #184]	; (810d510 <_malloc_r+0xe4>)
 810d456:	f000 fc2f 	bl	810dcb8 <__malloc_lock>
 810d45a:	6833      	ldr	r3, [r6, #0]
 810d45c:	461c      	mov	r4, r3
 810d45e:	bb34      	cbnz	r4, 810d4ae <_malloc_r+0x82>
 810d460:	4629      	mov	r1, r5
 810d462:	4638      	mov	r0, r7
 810d464:	f7ff ffc2 	bl	810d3ec <sbrk_aligned>
 810d468:	1c43      	adds	r3, r0, #1
 810d46a:	4604      	mov	r4, r0
 810d46c:	d14d      	bne.n	810d50a <_malloc_r+0xde>
 810d46e:	6834      	ldr	r4, [r6, #0]
 810d470:	4626      	mov	r6, r4
 810d472:	2e00      	cmp	r6, #0
 810d474:	d140      	bne.n	810d4f8 <_malloc_r+0xcc>
 810d476:	6823      	ldr	r3, [r4, #0]
 810d478:	4631      	mov	r1, r6
 810d47a:	4638      	mov	r0, r7
 810d47c:	eb04 0803 	add.w	r8, r4, r3
 810d480:	f000 fb06 	bl	810da90 <_sbrk_r>
 810d484:	4580      	cmp	r8, r0
 810d486:	d13a      	bne.n	810d4fe <_malloc_r+0xd2>
 810d488:	6821      	ldr	r1, [r4, #0]
 810d48a:	3503      	adds	r5, #3
 810d48c:	1a6d      	subs	r5, r5, r1
 810d48e:	f025 0503 	bic.w	r5, r5, #3
 810d492:	3508      	adds	r5, #8
 810d494:	2d0c      	cmp	r5, #12
 810d496:	bf38      	it	cc
 810d498:	250c      	movcc	r5, #12
 810d49a:	4629      	mov	r1, r5
 810d49c:	4638      	mov	r0, r7
 810d49e:	f7ff ffa5 	bl	810d3ec <sbrk_aligned>
 810d4a2:	3001      	adds	r0, #1
 810d4a4:	d02b      	beq.n	810d4fe <_malloc_r+0xd2>
 810d4a6:	6823      	ldr	r3, [r4, #0]
 810d4a8:	442b      	add	r3, r5
 810d4aa:	6023      	str	r3, [r4, #0]
 810d4ac:	e00e      	b.n	810d4cc <_malloc_r+0xa0>
 810d4ae:	6822      	ldr	r2, [r4, #0]
 810d4b0:	1b52      	subs	r2, r2, r5
 810d4b2:	d41e      	bmi.n	810d4f2 <_malloc_r+0xc6>
 810d4b4:	2a0b      	cmp	r2, #11
 810d4b6:	d916      	bls.n	810d4e6 <_malloc_r+0xba>
 810d4b8:	1961      	adds	r1, r4, r5
 810d4ba:	42a3      	cmp	r3, r4
 810d4bc:	6025      	str	r5, [r4, #0]
 810d4be:	bf18      	it	ne
 810d4c0:	6059      	strne	r1, [r3, #4]
 810d4c2:	6863      	ldr	r3, [r4, #4]
 810d4c4:	bf08      	it	eq
 810d4c6:	6031      	streq	r1, [r6, #0]
 810d4c8:	5162      	str	r2, [r4, r5]
 810d4ca:	604b      	str	r3, [r1, #4]
 810d4cc:	4638      	mov	r0, r7
 810d4ce:	f104 060b 	add.w	r6, r4, #11
 810d4d2:	f000 fbf7 	bl	810dcc4 <__malloc_unlock>
 810d4d6:	f026 0607 	bic.w	r6, r6, #7
 810d4da:	1d23      	adds	r3, r4, #4
 810d4dc:	1af2      	subs	r2, r6, r3
 810d4de:	d0b6      	beq.n	810d44e <_malloc_r+0x22>
 810d4e0:	1b9b      	subs	r3, r3, r6
 810d4e2:	50a3      	str	r3, [r4, r2]
 810d4e4:	e7b3      	b.n	810d44e <_malloc_r+0x22>
 810d4e6:	6862      	ldr	r2, [r4, #4]
 810d4e8:	42a3      	cmp	r3, r4
 810d4ea:	bf0c      	ite	eq
 810d4ec:	6032      	streq	r2, [r6, #0]
 810d4ee:	605a      	strne	r2, [r3, #4]
 810d4f0:	e7ec      	b.n	810d4cc <_malloc_r+0xa0>
 810d4f2:	4623      	mov	r3, r4
 810d4f4:	6864      	ldr	r4, [r4, #4]
 810d4f6:	e7b2      	b.n	810d45e <_malloc_r+0x32>
 810d4f8:	4634      	mov	r4, r6
 810d4fa:	6876      	ldr	r6, [r6, #4]
 810d4fc:	e7b9      	b.n	810d472 <_malloc_r+0x46>
 810d4fe:	230c      	movs	r3, #12
 810d500:	603b      	str	r3, [r7, #0]
 810d502:	4638      	mov	r0, r7
 810d504:	f000 fbde 	bl	810dcc4 <__malloc_unlock>
 810d508:	e7a1      	b.n	810d44e <_malloc_r+0x22>
 810d50a:	6025      	str	r5, [r4, #0]
 810d50c:	e7de      	b.n	810d4cc <_malloc_r+0xa0>
 810d50e:	bf00      	nop
 810d510:	100003c8 	.word	0x100003c8

0810d514 <__ssputs_r>:
 810d514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d518:	688e      	ldr	r6, [r1, #8]
 810d51a:	429e      	cmp	r6, r3
 810d51c:	4682      	mov	sl, r0
 810d51e:	460c      	mov	r4, r1
 810d520:	4690      	mov	r8, r2
 810d522:	461f      	mov	r7, r3
 810d524:	d838      	bhi.n	810d598 <__ssputs_r+0x84>
 810d526:	898a      	ldrh	r2, [r1, #12]
 810d528:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810d52c:	d032      	beq.n	810d594 <__ssputs_r+0x80>
 810d52e:	6825      	ldr	r5, [r4, #0]
 810d530:	6909      	ldr	r1, [r1, #16]
 810d532:	eba5 0901 	sub.w	r9, r5, r1
 810d536:	6965      	ldr	r5, [r4, #20]
 810d538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810d53c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810d540:	3301      	adds	r3, #1
 810d542:	444b      	add	r3, r9
 810d544:	106d      	asrs	r5, r5, #1
 810d546:	429d      	cmp	r5, r3
 810d548:	bf38      	it	cc
 810d54a:	461d      	movcc	r5, r3
 810d54c:	0553      	lsls	r3, r2, #21
 810d54e:	d531      	bpl.n	810d5b4 <__ssputs_r+0xa0>
 810d550:	4629      	mov	r1, r5
 810d552:	f7ff ff6b 	bl	810d42c <_malloc_r>
 810d556:	4606      	mov	r6, r0
 810d558:	b950      	cbnz	r0, 810d570 <__ssputs_r+0x5c>
 810d55a:	230c      	movs	r3, #12
 810d55c:	f8ca 3000 	str.w	r3, [sl]
 810d560:	89a3      	ldrh	r3, [r4, #12]
 810d562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d566:	81a3      	strh	r3, [r4, #12]
 810d568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d570:	6921      	ldr	r1, [r4, #16]
 810d572:	464a      	mov	r2, r9
 810d574:	f7fb ff3e 	bl	81093f4 <memcpy>
 810d578:	89a3      	ldrh	r3, [r4, #12]
 810d57a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810d57e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810d582:	81a3      	strh	r3, [r4, #12]
 810d584:	6126      	str	r6, [r4, #16]
 810d586:	6165      	str	r5, [r4, #20]
 810d588:	444e      	add	r6, r9
 810d58a:	eba5 0509 	sub.w	r5, r5, r9
 810d58e:	6026      	str	r6, [r4, #0]
 810d590:	60a5      	str	r5, [r4, #8]
 810d592:	463e      	mov	r6, r7
 810d594:	42be      	cmp	r6, r7
 810d596:	d900      	bls.n	810d59a <__ssputs_r+0x86>
 810d598:	463e      	mov	r6, r7
 810d59a:	6820      	ldr	r0, [r4, #0]
 810d59c:	4632      	mov	r2, r6
 810d59e:	4641      	mov	r1, r8
 810d5a0:	f000 fb70 	bl	810dc84 <memmove>
 810d5a4:	68a3      	ldr	r3, [r4, #8]
 810d5a6:	1b9b      	subs	r3, r3, r6
 810d5a8:	60a3      	str	r3, [r4, #8]
 810d5aa:	6823      	ldr	r3, [r4, #0]
 810d5ac:	4433      	add	r3, r6
 810d5ae:	6023      	str	r3, [r4, #0]
 810d5b0:	2000      	movs	r0, #0
 810d5b2:	e7db      	b.n	810d56c <__ssputs_r+0x58>
 810d5b4:	462a      	mov	r2, r5
 810d5b6:	f000 fb8b 	bl	810dcd0 <_realloc_r>
 810d5ba:	4606      	mov	r6, r0
 810d5bc:	2800      	cmp	r0, #0
 810d5be:	d1e1      	bne.n	810d584 <__ssputs_r+0x70>
 810d5c0:	6921      	ldr	r1, [r4, #16]
 810d5c2:	4650      	mov	r0, sl
 810d5c4:	f7ff fec6 	bl	810d354 <_free_r>
 810d5c8:	e7c7      	b.n	810d55a <__ssputs_r+0x46>
	...

0810d5cc <_svfiprintf_r>:
 810d5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d5d0:	4698      	mov	r8, r3
 810d5d2:	898b      	ldrh	r3, [r1, #12]
 810d5d4:	061b      	lsls	r3, r3, #24
 810d5d6:	b09d      	sub	sp, #116	; 0x74
 810d5d8:	4607      	mov	r7, r0
 810d5da:	460d      	mov	r5, r1
 810d5dc:	4614      	mov	r4, r2
 810d5de:	d50e      	bpl.n	810d5fe <_svfiprintf_r+0x32>
 810d5e0:	690b      	ldr	r3, [r1, #16]
 810d5e2:	b963      	cbnz	r3, 810d5fe <_svfiprintf_r+0x32>
 810d5e4:	2140      	movs	r1, #64	; 0x40
 810d5e6:	f7ff ff21 	bl	810d42c <_malloc_r>
 810d5ea:	6028      	str	r0, [r5, #0]
 810d5ec:	6128      	str	r0, [r5, #16]
 810d5ee:	b920      	cbnz	r0, 810d5fa <_svfiprintf_r+0x2e>
 810d5f0:	230c      	movs	r3, #12
 810d5f2:	603b      	str	r3, [r7, #0]
 810d5f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d5f8:	e0d1      	b.n	810d79e <_svfiprintf_r+0x1d2>
 810d5fa:	2340      	movs	r3, #64	; 0x40
 810d5fc:	616b      	str	r3, [r5, #20]
 810d5fe:	2300      	movs	r3, #0
 810d600:	9309      	str	r3, [sp, #36]	; 0x24
 810d602:	2320      	movs	r3, #32
 810d604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d608:	f8cd 800c 	str.w	r8, [sp, #12]
 810d60c:	2330      	movs	r3, #48	; 0x30
 810d60e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810d7b8 <_svfiprintf_r+0x1ec>
 810d612:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d616:	f04f 0901 	mov.w	r9, #1
 810d61a:	4623      	mov	r3, r4
 810d61c:	469a      	mov	sl, r3
 810d61e:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d622:	b10a      	cbz	r2, 810d628 <_svfiprintf_r+0x5c>
 810d624:	2a25      	cmp	r2, #37	; 0x25
 810d626:	d1f9      	bne.n	810d61c <_svfiprintf_r+0x50>
 810d628:	ebba 0b04 	subs.w	fp, sl, r4
 810d62c:	d00b      	beq.n	810d646 <_svfiprintf_r+0x7a>
 810d62e:	465b      	mov	r3, fp
 810d630:	4622      	mov	r2, r4
 810d632:	4629      	mov	r1, r5
 810d634:	4638      	mov	r0, r7
 810d636:	f7ff ff6d 	bl	810d514 <__ssputs_r>
 810d63a:	3001      	adds	r0, #1
 810d63c:	f000 80aa 	beq.w	810d794 <_svfiprintf_r+0x1c8>
 810d640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d642:	445a      	add	r2, fp
 810d644:	9209      	str	r2, [sp, #36]	; 0x24
 810d646:	f89a 3000 	ldrb.w	r3, [sl]
 810d64a:	2b00      	cmp	r3, #0
 810d64c:	f000 80a2 	beq.w	810d794 <_svfiprintf_r+0x1c8>
 810d650:	2300      	movs	r3, #0
 810d652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810d656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d65a:	f10a 0a01 	add.w	sl, sl, #1
 810d65e:	9304      	str	r3, [sp, #16]
 810d660:	9307      	str	r3, [sp, #28]
 810d662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d666:	931a      	str	r3, [sp, #104]	; 0x68
 810d668:	4654      	mov	r4, sl
 810d66a:	2205      	movs	r2, #5
 810d66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d670:	4851      	ldr	r0, [pc, #324]	; (810d7b8 <_svfiprintf_r+0x1ec>)
 810d672:	f7f2 fe3d 	bl	81002f0 <memchr>
 810d676:	9a04      	ldr	r2, [sp, #16]
 810d678:	b9d8      	cbnz	r0, 810d6b2 <_svfiprintf_r+0xe6>
 810d67a:	06d0      	lsls	r0, r2, #27
 810d67c:	bf44      	itt	mi
 810d67e:	2320      	movmi	r3, #32
 810d680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d684:	0711      	lsls	r1, r2, #28
 810d686:	bf44      	itt	mi
 810d688:	232b      	movmi	r3, #43	; 0x2b
 810d68a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d68e:	f89a 3000 	ldrb.w	r3, [sl]
 810d692:	2b2a      	cmp	r3, #42	; 0x2a
 810d694:	d015      	beq.n	810d6c2 <_svfiprintf_r+0xf6>
 810d696:	9a07      	ldr	r2, [sp, #28]
 810d698:	4654      	mov	r4, sl
 810d69a:	2000      	movs	r0, #0
 810d69c:	f04f 0c0a 	mov.w	ip, #10
 810d6a0:	4621      	mov	r1, r4
 810d6a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d6a6:	3b30      	subs	r3, #48	; 0x30
 810d6a8:	2b09      	cmp	r3, #9
 810d6aa:	d94e      	bls.n	810d74a <_svfiprintf_r+0x17e>
 810d6ac:	b1b0      	cbz	r0, 810d6dc <_svfiprintf_r+0x110>
 810d6ae:	9207      	str	r2, [sp, #28]
 810d6b0:	e014      	b.n	810d6dc <_svfiprintf_r+0x110>
 810d6b2:	eba0 0308 	sub.w	r3, r0, r8
 810d6b6:	fa09 f303 	lsl.w	r3, r9, r3
 810d6ba:	4313      	orrs	r3, r2
 810d6bc:	9304      	str	r3, [sp, #16]
 810d6be:	46a2      	mov	sl, r4
 810d6c0:	e7d2      	b.n	810d668 <_svfiprintf_r+0x9c>
 810d6c2:	9b03      	ldr	r3, [sp, #12]
 810d6c4:	1d19      	adds	r1, r3, #4
 810d6c6:	681b      	ldr	r3, [r3, #0]
 810d6c8:	9103      	str	r1, [sp, #12]
 810d6ca:	2b00      	cmp	r3, #0
 810d6cc:	bfbb      	ittet	lt
 810d6ce:	425b      	neglt	r3, r3
 810d6d0:	f042 0202 	orrlt.w	r2, r2, #2
 810d6d4:	9307      	strge	r3, [sp, #28]
 810d6d6:	9307      	strlt	r3, [sp, #28]
 810d6d8:	bfb8      	it	lt
 810d6da:	9204      	strlt	r2, [sp, #16]
 810d6dc:	7823      	ldrb	r3, [r4, #0]
 810d6de:	2b2e      	cmp	r3, #46	; 0x2e
 810d6e0:	d10c      	bne.n	810d6fc <_svfiprintf_r+0x130>
 810d6e2:	7863      	ldrb	r3, [r4, #1]
 810d6e4:	2b2a      	cmp	r3, #42	; 0x2a
 810d6e6:	d135      	bne.n	810d754 <_svfiprintf_r+0x188>
 810d6e8:	9b03      	ldr	r3, [sp, #12]
 810d6ea:	1d1a      	adds	r2, r3, #4
 810d6ec:	681b      	ldr	r3, [r3, #0]
 810d6ee:	9203      	str	r2, [sp, #12]
 810d6f0:	2b00      	cmp	r3, #0
 810d6f2:	bfb8      	it	lt
 810d6f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810d6f8:	3402      	adds	r4, #2
 810d6fa:	9305      	str	r3, [sp, #20]
 810d6fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810d7c8 <_svfiprintf_r+0x1fc>
 810d700:	7821      	ldrb	r1, [r4, #0]
 810d702:	2203      	movs	r2, #3
 810d704:	4650      	mov	r0, sl
 810d706:	f7f2 fdf3 	bl	81002f0 <memchr>
 810d70a:	b140      	cbz	r0, 810d71e <_svfiprintf_r+0x152>
 810d70c:	2340      	movs	r3, #64	; 0x40
 810d70e:	eba0 000a 	sub.w	r0, r0, sl
 810d712:	fa03 f000 	lsl.w	r0, r3, r0
 810d716:	9b04      	ldr	r3, [sp, #16]
 810d718:	4303      	orrs	r3, r0
 810d71a:	3401      	adds	r4, #1
 810d71c:	9304      	str	r3, [sp, #16]
 810d71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d722:	4826      	ldr	r0, [pc, #152]	; (810d7bc <_svfiprintf_r+0x1f0>)
 810d724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d728:	2206      	movs	r2, #6
 810d72a:	f7f2 fde1 	bl	81002f0 <memchr>
 810d72e:	2800      	cmp	r0, #0
 810d730:	d038      	beq.n	810d7a4 <_svfiprintf_r+0x1d8>
 810d732:	4b23      	ldr	r3, [pc, #140]	; (810d7c0 <_svfiprintf_r+0x1f4>)
 810d734:	bb1b      	cbnz	r3, 810d77e <_svfiprintf_r+0x1b2>
 810d736:	9b03      	ldr	r3, [sp, #12]
 810d738:	3307      	adds	r3, #7
 810d73a:	f023 0307 	bic.w	r3, r3, #7
 810d73e:	3308      	adds	r3, #8
 810d740:	9303      	str	r3, [sp, #12]
 810d742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d744:	4433      	add	r3, r6
 810d746:	9309      	str	r3, [sp, #36]	; 0x24
 810d748:	e767      	b.n	810d61a <_svfiprintf_r+0x4e>
 810d74a:	fb0c 3202 	mla	r2, ip, r2, r3
 810d74e:	460c      	mov	r4, r1
 810d750:	2001      	movs	r0, #1
 810d752:	e7a5      	b.n	810d6a0 <_svfiprintf_r+0xd4>
 810d754:	2300      	movs	r3, #0
 810d756:	3401      	adds	r4, #1
 810d758:	9305      	str	r3, [sp, #20]
 810d75a:	4619      	mov	r1, r3
 810d75c:	f04f 0c0a 	mov.w	ip, #10
 810d760:	4620      	mov	r0, r4
 810d762:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d766:	3a30      	subs	r2, #48	; 0x30
 810d768:	2a09      	cmp	r2, #9
 810d76a:	d903      	bls.n	810d774 <_svfiprintf_r+0x1a8>
 810d76c:	2b00      	cmp	r3, #0
 810d76e:	d0c5      	beq.n	810d6fc <_svfiprintf_r+0x130>
 810d770:	9105      	str	r1, [sp, #20]
 810d772:	e7c3      	b.n	810d6fc <_svfiprintf_r+0x130>
 810d774:	fb0c 2101 	mla	r1, ip, r1, r2
 810d778:	4604      	mov	r4, r0
 810d77a:	2301      	movs	r3, #1
 810d77c:	e7f0      	b.n	810d760 <_svfiprintf_r+0x194>
 810d77e:	ab03      	add	r3, sp, #12
 810d780:	9300      	str	r3, [sp, #0]
 810d782:	462a      	mov	r2, r5
 810d784:	4b0f      	ldr	r3, [pc, #60]	; (810d7c4 <_svfiprintf_r+0x1f8>)
 810d786:	a904      	add	r1, sp, #16
 810d788:	4638      	mov	r0, r7
 810d78a:	f7fb fee9 	bl	8109560 <_printf_float>
 810d78e:	1c42      	adds	r2, r0, #1
 810d790:	4606      	mov	r6, r0
 810d792:	d1d6      	bne.n	810d742 <_svfiprintf_r+0x176>
 810d794:	89ab      	ldrh	r3, [r5, #12]
 810d796:	065b      	lsls	r3, r3, #25
 810d798:	f53f af2c 	bmi.w	810d5f4 <_svfiprintf_r+0x28>
 810d79c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d79e:	b01d      	add	sp, #116	; 0x74
 810d7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d7a4:	ab03      	add	r3, sp, #12
 810d7a6:	9300      	str	r3, [sp, #0]
 810d7a8:	462a      	mov	r2, r5
 810d7aa:	4b06      	ldr	r3, [pc, #24]	; (810d7c4 <_svfiprintf_r+0x1f8>)
 810d7ac:	a904      	add	r1, sp, #16
 810d7ae:	4638      	mov	r0, r7
 810d7b0:	f7fc f97a 	bl	8109aa8 <_printf_i>
 810d7b4:	e7eb      	b.n	810d78e <_svfiprintf_r+0x1c2>
 810d7b6:	bf00      	nop
 810d7b8:	0810e52c 	.word	0x0810e52c
 810d7bc:	0810e536 	.word	0x0810e536
 810d7c0:	08109561 	.word	0x08109561
 810d7c4:	0810d515 	.word	0x0810d515
 810d7c8:	0810e532 	.word	0x0810e532

0810d7cc <__sfputc_r>:
 810d7cc:	6893      	ldr	r3, [r2, #8]
 810d7ce:	3b01      	subs	r3, #1
 810d7d0:	2b00      	cmp	r3, #0
 810d7d2:	b410      	push	{r4}
 810d7d4:	6093      	str	r3, [r2, #8]
 810d7d6:	da08      	bge.n	810d7ea <__sfputc_r+0x1e>
 810d7d8:	6994      	ldr	r4, [r2, #24]
 810d7da:	42a3      	cmp	r3, r4
 810d7dc:	db01      	blt.n	810d7e2 <__sfputc_r+0x16>
 810d7de:	290a      	cmp	r1, #10
 810d7e0:	d103      	bne.n	810d7ea <__sfputc_r+0x1e>
 810d7e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d7e6:	f7fd bbf7 	b.w	810afd8 <__swbuf_r>
 810d7ea:	6813      	ldr	r3, [r2, #0]
 810d7ec:	1c58      	adds	r0, r3, #1
 810d7ee:	6010      	str	r0, [r2, #0]
 810d7f0:	7019      	strb	r1, [r3, #0]
 810d7f2:	4608      	mov	r0, r1
 810d7f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d7f8:	4770      	bx	lr

0810d7fa <__sfputs_r>:
 810d7fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d7fc:	4606      	mov	r6, r0
 810d7fe:	460f      	mov	r7, r1
 810d800:	4614      	mov	r4, r2
 810d802:	18d5      	adds	r5, r2, r3
 810d804:	42ac      	cmp	r4, r5
 810d806:	d101      	bne.n	810d80c <__sfputs_r+0x12>
 810d808:	2000      	movs	r0, #0
 810d80a:	e007      	b.n	810d81c <__sfputs_r+0x22>
 810d80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d810:	463a      	mov	r2, r7
 810d812:	4630      	mov	r0, r6
 810d814:	f7ff ffda 	bl	810d7cc <__sfputc_r>
 810d818:	1c43      	adds	r3, r0, #1
 810d81a:	d1f3      	bne.n	810d804 <__sfputs_r+0xa>
 810d81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810d820 <_vfiprintf_r>:
 810d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d824:	460d      	mov	r5, r1
 810d826:	b09d      	sub	sp, #116	; 0x74
 810d828:	4614      	mov	r4, r2
 810d82a:	4698      	mov	r8, r3
 810d82c:	4606      	mov	r6, r0
 810d82e:	b118      	cbz	r0, 810d838 <_vfiprintf_r+0x18>
 810d830:	6983      	ldr	r3, [r0, #24]
 810d832:	b90b      	cbnz	r3, 810d838 <_vfiprintf_r+0x18>
 810d834:	f7fe fc24 	bl	810c080 <__sinit>
 810d838:	4b89      	ldr	r3, [pc, #548]	; (810da60 <_vfiprintf_r+0x240>)
 810d83a:	429d      	cmp	r5, r3
 810d83c:	d11b      	bne.n	810d876 <_vfiprintf_r+0x56>
 810d83e:	6875      	ldr	r5, [r6, #4]
 810d840:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d842:	07d9      	lsls	r1, r3, #31
 810d844:	d405      	bmi.n	810d852 <_vfiprintf_r+0x32>
 810d846:	89ab      	ldrh	r3, [r5, #12]
 810d848:	059a      	lsls	r2, r3, #22
 810d84a:	d402      	bmi.n	810d852 <_vfiprintf_r+0x32>
 810d84c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d84e:	f7ff f828 	bl	810c8a2 <__retarget_lock_acquire_recursive>
 810d852:	89ab      	ldrh	r3, [r5, #12]
 810d854:	071b      	lsls	r3, r3, #28
 810d856:	d501      	bpl.n	810d85c <_vfiprintf_r+0x3c>
 810d858:	692b      	ldr	r3, [r5, #16]
 810d85a:	b9eb      	cbnz	r3, 810d898 <_vfiprintf_r+0x78>
 810d85c:	4629      	mov	r1, r5
 810d85e:	4630      	mov	r0, r6
 810d860:	f7fd fc0c 	bl	810b07c <__swsetup_r>
 810d864:	b1c0      	cbz	r0, 810d898 <_vfiprintf_r+0x78>
 810d866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d868:	07dc      	lsls	r4, r3, #31
 810d86a:	d50e      	bpl.n	810d88a <_vfiprintf_r+0x6a>
 810d86c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810d870:	b01d      	add	sp, #116	; 0x74
 810d872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d876:	4b7b      	ldr	r3, [pc, #492]	; (810da64 <_vfiprintf_r+0x244>)
 810d878:	429d      	cmp	r5, r3
 810d87a:	d101      	bne.n	810d880 <_vfiprintf_r+0x60>
 810d87c:	68b5      	ldr	r5, [r6, #8]
 810d87e:	e7df      	b.n	810d840 <_vfiprintf_r+0x20>
 810d880:	4b79      	ldr	r3, [pc, #484]	; (810da68 <_vfiprintf_r+0x248>)
 810d882:	429d      	cmp	r5, r3
 810d884:	bf08      	it	eq
 810d886:	68f5      	ldreq	r5, [r6, #12]
 810d888:	e7da      	b.n	810d840 <_vfiprintf_r+0x20>
 810d88a:	89ab      	ldrh	r3, [r5, #12]
 810d88c:	0598      	lsls	r0, r3, #22
 810d88e:	d4ed      	bmi.n	810d86c <_vfiprintf_r+0x4c>
 810d890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d892:	f7ff f807 	bl	810c8a4 <__retarget_lock_release_recursive>
 810d896:	e7e9      	b.n	810d86c <_vfiprintf_r+0x4c>
 810d898:	2300      	movs	r3, #0
 810d89a:	9309      	str	r3, [sp, #36]	; 0x24
 810d89c:	2320      	movs	r3, #32
 810d89e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d8a2:	f8cd 800c 	str.w	r8, [sp, #12]
 810d8a6:	2330      	movs	r3, #48	; 0x30
 810d8a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810da6c <_vfiprintf_r+0x24c>
 810d8ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d8b0:	f04f 0901 	mov.w	r9, #1
 810d8b4:	4623      	mov	r3, r4
 810d8b6:	469a      	mov	sl, r3
 810d8b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d8bc:	b10a      	cbz	r2, 810d8c2 <_vfiprintf_r+0xa2>
 810d8be:	2a25      	cmp	r2, #37	; 0x25
 810d8c0:	d1f9      	bne.n	810d8b6 <_vfiprintf_r+0x96>
 810d8c2:	ebba 0b04 	subs.w	fp, sl, r4
 810d8c6:	d00b      	beq.n	810d8e0 <_vfiprintf_r+0xc0>
 810d8c8:	465b      	mov	r3, fp
 810d8ca:	4622      	mov	r2, r4
 810d8cc:	4629      	mov	r1, r5
 810d8ce:	4630      	mov	r0, r6
 810d8d0:	f7ff ff93 	bl	810d7fa <__sfputs_r>
 810d8d4:	3001      	adds	r0, #1
 810d8d6:	f000 80aa 	beq.w	810da2e <_vfiprintf_r+0x20e>
 810d8da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d8dc:	445a      	add	r2, fp
 810d8de:	9209      	str	r2, [sp, #36]	; 0x24
 810d8e0:	f89a 3000 	ldrb.w	r3, [sl]
 810d8e4:	2b00      	cmp	r3, #0
 810d8e6:	f000 80a2 	beq.w	810da2e <_vfiprintf_r+0x20e>
 810d8ea:	2300      	movs	r3, #0
 810d8ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810d8f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d8f4:	f10a 0a01 	add.w	sl, sl, #1
 810d8f8:	9304      	str	r3, [sp, #16]
 810d8fa:	9307      	str	r3, [sp, #28]
 810d8fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d900:	931a      	str	r3, [sp, #104]	; 0x68
 810d902:	4654      	mov	r4, sl
 810d904:	2205      	movs	r2, #5
 810d906:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d90a:	4858      	ldr	r0, [pc, #352]	; (810da6c <_vfiprintf_r+0x24c>)
 810d90c:	f7f2 fcf0 	bl	81002f0 <memchr>
 810d910:	9a04      	ldr	r2, [sp, #16]
 810d912:	b9d8      	cbnz	r0, 810d94c <_vfiprintf_r+0x12c>
 810d914:	06d1      	lsls	r1, r2, #27
 810d916:	bf44      	itt	mi
 810d918:	2320      	movmi	r3, #32
 810d91a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d91e:	0713      	lsls	r3, r2, #28
 810d920:	bf44      	itt	mi
 810d922:	232b      	movmi	r3, #43	; 0x2b
 810d924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d928:	f89a 3000 	ldrb.w	r3, [sl]
 810d92c:	2b2a      	cmp	r3, #42	; 0x2a
 810d92e:	d015      	beq.n	810d95c <_vfiprintf_r+0x13c>
 810d930:	9a07      	ldr	r2, [sp, #28]
 810d932:	4654      	mov	r4, sl
 810d934:	2000      	movs	r0, #0
 810d936:	f04f 0c0a 	mov.w	ip, #10
 810d93a:	4621      	mov	r1, r4
 810d93c:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d940:	3b30      	subs	r3, #48	; 0x30
 810d942:	2b09      	cmp	r3, #9
 810d944:	d94e      	bls.n	810d9e4 <_vfiprintf_r+0x1c4>
 810d946:	b1b0      	cbz	r0, 810d976 <_vfiprintf_r+0x156>
 810d948:	9207      	str	r2, [sp, #28]
 810d94a:	e014      	b.n	810d976 <_vfiprintf_r+0x156>
 810d94c:	eba0 0308 	sub.w	r3, r0, r8
 810d950:	fa09 f303 	lsl.w	r3, r9, r3
 810d954:	4313      	orrs	r3, r2
 810d956:	9304      	str	r3, [sp, #16]
 810d958:	46a2      	mov	sl, r4
 810d95a:	e7d2      	b.n	810d902 <_vfiprintf_r+0xe2>
 810d95c:	9b03      	ldr	r3, [sp, #12]
 810d95e:	1d19      	adds	r1, r3, #4
 810d960:	681b      	ldr	r3, [r3, #0]
 810d962:	9103      	str	r1, [sp, #12]
 810d964:	2b00      	cmp	r3, #0
 810d966:	bfbb      	ittet	lt
 810d968:	425b      	neglt	r3, r3
 810d96a:	f042 0202 	orrlt.w	r2, r2, #2
 810d96e:	9307      	strge	r3, [sp, #28]
 810d970:	9307      	strlt	r3, [sp, #28]
 810d972:	bfb8      	it	lt
 810d974:	9204      	strlt	r2, [sp, #16]
 810d976:	7823      	ldrb	r3, [r4, #0]
 810d978:	2b2e      	cmp	r3, #46	; 0x2e
 810d97a:	d10c      	bne.n	810d996 <_vfiprintf_r+0x176>
 810d97c:	7863      	ldrb	r3, [r4, #1]
 810d97e:	2b2a      	cmp	r3, #42	; 0x2a
 810d980:	d135      	bne.n	810d9ee <_vfiprintf_r+0x1ce>
 810d982:	9b03      	ldr	r3, [sp, #12]
 810d984:	1d1a      	adds	r2, r3, #4
 810d986:	681b      	ldr	r3, [r3, #0]
 810d988:	9203      	str	r2, [sp, #12]
 810d98a:	2b00      	cmp	r3, #0
 810d98c:	bfb8      	it	lt
 810d98e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810d992:	3402      	adds	r4, #2
 810d994:	9305      	str	r3, [sp, #20]
 810d996:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810da7c <_vfiprintf_r+0x25c>
 810d99a:	7821      	ldrb	r1, [r4, #0]
 810d99c:	2203      	movs	r2, #3
 810d99e:	4650      	mov	r0, sl
 810d9a0:	f7f2 fca6 	bl	81002f0 <memchr>
 810d9a4:	b140      	cbz	r0, 810d9b8 <_vfiprintf_r+0x198>
 810d9a6:	2340      	movs	r3, #64	; 0x40
 810d9a8:	eba0 000a 	sub.w	r0, r0, sl
 810d9ac:	fa03 f000 	lsl.w	r0, r3, r0
 810d9b0:	9b04      	ldr	r3, [sp, #16]
 810d9b2:	4303      	orrs	r3, r0
 810d9b4:	3401      	adds	r4, #1
 810d9b6:	9304      	str	r3, [sp, #16]
 810d9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d9bc:	482c      	ldr	r0, [pc, #176]	; (810da70 <_vfiprintf_r+0x250>)
 810d9be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d9c2:	2206      	movs	r2, #6
 810d9c4:	f7f2 fc94 	bl	81002f0 <memchr>
 810d9c8:	2800      	cmp	r0, #0
 810d9ca:	d03f      	beq.n	810da4c <_vfiprintf_r+0x22c>
 810d9cc:	4b29      	ldr	r3, [pc, #164]	; (810da74 <_vfiprintf_r+0x254>)
 810d9ce:	bb1b      	cbnz	r3, 810da18 <_vfiprintf_r+0x1f8>
 810d9d0:	9b03      	ldr	r3, [sp, #12]
 810d9d2:	3307      	adds	r3, #7
 810d9d4:	f023 0307 	bic.w	r3, r3, #7
 810d9d8:	3308      	adds	r3, #8
 810d9da:	9303      	str	r3, [sp, #12]
 810d9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d9de:	443b      	add	r3, r7
 810d9e0:	9309      	str	r3, [sp, #36]	; 0x24
 810d9e2:	e767      	b.n	810d8b4 <_vfiprintf_r+0x94>
 810d9e4:	fb0c 3202 	mla	r2, ip, r2, r3
 810d9e8:	460c      	mov	r4, r1
 810d9ea:	2001      	movs	r0, #1
 810d9ec:	e7a5      	b.n	810d93a <_vfiprintf_r+0x11a>
 810d9ee:	2300      	movs	r3, #0
 810d9f0:	3401      	adds	r4, #1
 810d9f2:	9305      	str	r3, [sp, #20]
 810d9f4:	4619      	mov	r1, r3
 810d9f6:	f04f 0c0a 	mov.w	ip, #10
 810d9fa:	4620      	mov	r0, r4
 810d9fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 810da00:	3a30      	subs	r2, #48	; 0x30
 810da02:	2a09      	cmp	r2, #9
 810da04:	d903      	bls.n	810da0e <_vfiprintf_r+0x1ee>
 810da06:	2b00      	cmp	r3, #0
 810da08:	d0c5      	beq.n	810d996 <_vfiprintf_r+0x176>
 810da0a:	9105      	str	r1, [sp, #20]
 810da0c:	e7c3      	b.n	810d996 <_vfiprintf_r+0x176>
 810da0e:	fb0c 2101 	mla	r1, ip, r1, r2
 810da12:	4604      	mov	r4, r0
 810da14:	2301      	movs	r3, #1
 810da16:	e7f0      	b.n	810d9fa <_vfiprintf_r+0x1da>
 810da18:	ab03      	add	r3, sp, #12
 810da1a:	9300      	str	r3, [sp, #0]
 810da1c:	462a      	mov	r2, r5
 810da1e:	4b16      	ldr	r3, [pc, #88]	; (810da78 <_vfiprintf_r+0x258>)
 810da20:	a904      	add	r1, sp, #16
 810da22:	4630      	mov	r0, r6
 810da24:	f7fb fd9c 	bl	8109560 <_printf_float>
 810da28:	4607      	mov	r7, r0
 810da2a:	1c78      	adds	r0, r7, #1
 810da2c:	d1d6      	bne.n	810d9dc <_vfiprintf_r+0x1bc>
 810da2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810da30:	07d9      	lsls	r1, r3, #31
 810da32:	d405      	bmi.n	810da40 <_vfiprintf_r+0x220>
 810da34:	89ab      	ldrh	r3, [r5, #12]
 810da36:	059a      	lsls	r2, r3, #22
 810da38:	d402      	bmi.n	810da40 <_vfiprintf_r+0x220>
 810da3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810da3c:	f7fe ff32 	bl	810c8a4 <__retarget_lock_release_recursive>
 810da40:	89ab      	ldrh	r3, [r5, #12]
 810da42:	065b      	lsls	r3, r3, #25
 810da44:	f53f af12 	bmi.w	810d86c <_vfiprintf_r+0x4c>
 810da48:	9809      	ldr	r0, [sp, #36]	; 0x24
 810da4a:	e711      	b.n	810d870 <_vfiprintf_r+0x50>
 810da4c:	ab03      	add	r3, sp, #12
 810da4e:	9300      	str	r3, [sp, #0]
 810da50:	462a      	mov	r2, r5
 810da52:	4b09      	ldr	r3, [pc, #36]	; (810da78 <_vfiprintf_r+0x258>)
 810da54:	a904      	add	r1, sp, #16
 810da56:	4630      	mov	r0, r6
 810da58:	f7fc f826 	bl	8109aa8 <_printf_i>
 810da5c:	e7e4      	b.n	810da28 <_vfiprintf_r+0x208>
 810da5e:	bf00      	nop
 810da60:	0810e314 	.word	0x0810e314
 810da64:	0810e334 	.word	0x0810e334
 810da68:	0810e2f4 	.word	0x0810e2f4
 810da6c:	0810e52c 	.word	0x0810e52c
 810da70:	0810e536 	.word	0x0810e536
 810da74:	08109561 	.word	0x08109561
 810da78:	0810d7fb 	.word	0x0810d7fb
 810da7c:	0810e532 	.word	0x0810e532

0810da80 <nan>:
 810da80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810da88 <nan+0x8>
 810da84:	4770      	bx	lr
 810da86:	bf00      	nop
 810da88:	00000000 	.word	0x00000000
 810da8c:	7ff80000 	.word	0x7ff80000

0810da90 <_sbrk_r>:
 810da90:	b538      	push	{r3, r4, r5, lr}
 810da92:	4d06      	ldr	r5, [pc, #24]	; (810daac <_sbrk_r+0x1c>)
 810da94:	2300      	movs	r3, #0
 810da96:	4604      	mov	r4, r0
 810da98:	4608      	mov	r0, r1
 810da9a:	602b      	str	r3, [r5, #0]
 810da9c:	f7f4 fe6e 	bl	810277c <_sbrk>
 810daa0:	1c43      	adds	r3, r0, #1
 810daa2:	d102      	bne.n	810daaa <_sbrk_r+0x1a>
 810daa4:	682b      	ldr	r3, [r5, #0]
 810daa6:	b103      	cbz	r3, 810daaa <_sbrk_r+0x1a>
 810daa8:	6023      	str	r3, [r4, #0]
 810daaa:	bd38      	pop	{r3, r4, r5, pc}
 810daac:	100003d0 	.word	0x100003d0

0810dab0 <__sread>:
 810dab0:	b510      	push	{r4, lr}
 810dab2:	460c      	mov	r4, r1
 810dab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810dab8:	f000 f93a 	bl	810dd30 <_read_r>
 810dabc:	2800      	cmp	r0, #0
 810dabe:	bfab      	itete	ge
 810dac0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810dac2:	89a3      	ldrhlt	r3, [r4, #12]
 810dac4:	181b      	addge	r3, r3, r0
 810dac6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810daca:	bfac      	ite	ge
 810dacc:	6563      	strge	r3, [r4, #84]	; 0x54
 810dace:	81a3      	strhlt	r3, [r4, #12]
 810dad0:	bd10      	pop	{r4, pc}

0810dad2 <__swrite>:
 810dad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810dad6:	461f      	mov	r7, r3
 810dad8:	898b      	ldrh	r3, [r1, #12]
 810dada:	05db      	lsls	r3, r3, #23
 810dadc:	4605      	mov	r5, r0
 810dade:	460c      	mov	r4, r1
 810dae0:	4616      	mov	r6, r2
 810dae2:	d505      	bpl.n	810daf0 <__swrite+0x1e>
 810dae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810dae8:	2302      	movs	r3, #2
 810daea:	2200      	movs	r2, #0
 810daec:	f000 f8b8 	bl	810dc60 <_lseek_r>
 810daf0:	89a3      	ldrh	r3, [r4, #12]
 810daf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810daf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810dafa:	81a3      	strh	r3, [r4, #12]
 810dafc:	4632      	mov	r2, r6
 810dafe:	463b      	mov	r3, r7
 810db00:	4628      	mov	r0, r5
 810db02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810db06:	f000 b837 	b.w	810db78 <_write_r>

0810db0a <__sseek>:
 810db0a:	b510      	push	{r4, lr}
 810db0c:	460c      	mov	r4, r1
 810db0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810db12:	f000 f8a5 	bl	810dc60 <_lseek_r>
 810db16:	1c43      	adds	r3, r0, #1
 810db18:	89a3      	ldrh	r3, [r4, #12]
 810db1a:	bf15      	itete	ne
 810db1c:	6560      	strne	r0, [r4, #84]	; 0x54
 810db1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810db22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810db26:	81a3      	strheq	r3, [r4, #12]
 810db28:	bf18      	it	ne
 810db2a:	81a3      	strhne	r3, [r4, #12]
 810db2c:	bd10      	pop	{r4, pc}

0810db2e <__sclose>:
 810db2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810db32:	f000 b851 	b.w	810dbd8 <_close_r>

0810db36 <strncmp>:
 810db36:	b510      	push	{r4, lr}
 810db38:	b17a      	cbz	r2, 810db5a <strncmp+0x24>
 810db3a:	4603      	mov	r3, r0
 810db3c:	3901      	subs	r1, #1
 810db3e:	1884      	adds	r4, r0, r2
 810db40:	f813 0b01 	ldrb.w	r0, [r3], #1
 810db44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810db48:	4290      	cmp	r0, r2
 810db4a:	d101      	bne.n	810db50 <strncmp+0x1a>
 810db4c:	42a3      	cmp	r3, r4
 810db4e:	d101      	bne.n	810db54 <strncmp+0x1e>
 810db50:	1a80      	subs	r0, r0, r2
 810db52:	bd10      	pop	{r4, pc}
 810db54:	2800      	cmp	r0, #0
 810db56:	d1f3      	bne.n	810db40 <strncmp+0xa>
 810db58:	e7fa      	b.n	810db50 <strncmp+0x1a>
 810db5a:	4610      	mov	r0, r2
 810db5c:	e7f9      	b.n	810db52 <strncmp+0x1c>

0810db5e <__ascii_wctomb>:
 810db5e:	b149      	cbz	r1, 810db74 <__ascii_wctomb+0x16>
 810db60:	2aff      	cmp	r2, #255	; 0xff
 810db62:	bf85      	ittet	hi
 810db64:	238a      	movhi	r3, #138	; 0x8a
 810db66:	6003      	strhi	r3, [r0, #0]
 810db68:	700a      	strbls	r2, [r1, #0]
 810db6a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 810db6e:	bf98      	it	ls
 810db70:	2001      	movls	r0, #1
 810db72:	4770      	bx	lr
 810db74:	4608      	mov	r0, r1
 810db76:	4770      	bx	lr

0810db78 <_write_r>:
 810db78:	b538      	push	{r3, r4, r5, lr}
 810db7a:	4d07      	ldr	r5, [pc, #28]	; (810db98 <_write_r+0x20>)
 810db7c:	4604      	mov	r4, r0
 810db7e:	4608      	mov	r0, r1
 810db80:	4611      	mov	r1, r2
 810db82:	2200      	movs	r2, #0
 810db84:	602a      	str	r2, [r5, #0]
 810db86:	461a      	mov	r2, r3
 810db88:	f7f4 fda7 	bl	81026da <_write>
 810db8c:	1c43      	adds	r3, r0, #1
 810db8e:	d102      	bne.n	810db96 <_write_r+0x1e>
 810db90:	682b      	ldr	r3, [r5, #0]
 810db92:	b103      	cbz	r3, 810db96 <_write_r+0x1e>
 810db94:	6023      	str	r3, [r4, #0]
 810db96:	bd38      	pop	{r3, r4, r5, pc}
 810db98:	100003d0 	.word	0x100003d0

0810db9c <__assert_func>:
 810db9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810db9e:	4614      	mov	r4, r2
 810dba0:	461a      	mov	r2, r3
 810dba2:	4b09      	ldr	r3, [pc, #36]	; (810dbc8 <__assert_func+0x2c>)
 810dba4:	681b      	ldr	r3, [r3, #0]
 810dba6:	4605      	mov	r5, r0
 810dba8:	68d8      	ldr	r0, [r3, #12]
 810dbaa:	b14c      	cbz	r4, 810dbc0 <__assert_func+0x24>
 810dbac:	4b07      	ldr	r3, [pc, #28]	; (810dbcc <__assert_func+0x30>)
 810dbae:	9100      	str	r1, [sp, #0]
 810dbb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810dbb4:	4906      	ldr	r1, [pc, #24]	; (810dbd0 <__assert_func+0x34>)
 810dbb6:	462b      	mov	r3, r5
 810dbb8:	f000 f81e 	bl	810dbf8 <fiprintf>
 810dbbc:	f000 f8ca 	bl	810dd54 <abort>
 810dbc0:	4b04      	ldr	r3, [pc, #16]	; (810dbd4 <__assert_func+0x38>)
 810dbc2:	461c      	mov	r4, r3
 810dbc4:	e7f3      	b.n	810dbae <__assert_func+0x12>
 810dbc6:	bf00      	nop
 810dbc8:	10000020 	.word	0x10000020
 810dbcc:	0810e53d 	.word	0x0810e53d
 810dbd0:	0810e54a 	.word	0x0810e54a
 810dbd4:	0810e578 	.word	0x0810e578

0810dbd8 <_close_r>:
 810dbd8:	b538      	push	{r3, r4, r5, lr}
 810dbda:	4d06      	ldr	r5, [pc, #24]	; (810dbf4 <_close_r+0x1c>)
 810dbdc:	2300      	movs	r3, #0
 810dbde:	4604      	mov	r4, r0
 810dbe0:	4608      	mov	r0, r1
 810dbe2:	602b      	str	r3, [r5, #0]
 810dbe4:	f7f4 fd95 	bl	8102712 <_close>
 810dbe8:	1c43      	adds	r3, r0, #1
 810dbea:	d102      	bne.n	810dbf2 <_close_r+0x1a>
 810dbec:	682b      	ldr	r3, [r5, #0]
 810dbee:	b103      	cbz	r3, 810dbf2 <_close_r+0x1a>
 810dbf0:	6023      	str	r3, [r4, #0]
 810dbf2:	bd38      	pop	{r3, r4, r5, pc}
 810dbf4:	100003d0 	.word	0x100003d0

0810dbf8 <fiprintf>:
 810dbf8:	b40e      	push	{r1, r2, r3}
 810dbfa:	b503      	push	{r0, r1, lr}
 810dbfc:	4601      	mov	r1, r0
 810dbfe:	ab03      	add	r3, sp, #12
 810dc00:	4805      	ldr	r0, [pc, #20]	; (810dc18 <fiprintf+0x20>)
 810dc02:	f853 2b04 	ldr.w	r2, [r3], #4
 810dc06:	6800      	ldr	r0, [r0, #0]
 810dc08:	9301      	str	r3, [sp, #4]
 810dc0a:	f7ff fe09 	bl	810d820 <_vfiprintf_r>
 810dc0e:	b002      	add	sp, #8
 810dc10:	f85d eb04 	ldr.w	lr, [sp], #4
 810dc14:	b003      	add	sp, #12
 810dc16:	4770      	bx	lr
 810dc18:	10000020 	.word	0x10000020

0810dc1c <_fstat_r>:
 810dc1c:	b538      	push	{r3, r4, r5, lr}
 810dc1e:	4d07      	ldr	r5, [pc, #28]	; (810dc3c <_fstat_r+0x20>)
 810dc20:	2300      	movs	r3, #0
 810dc22:	4604      	mov	r4, r0
 810dc24:	4608      	mov	r0, r1
 810dc26:	4611      	mov	r1, r2
 810dc28:	602b      	str	r3, [r5, #0]
 810dc2a:	f7f4 fd7e 	bl	810272a <_fstat>
 810dc2e:	1c43      	adds	r3, r0, #1
 810dc30:	d102      	bne.n	810dc38 <_fstat_r+0x1c>
 810dc32:	682b      	ldr	r3, [r5, #0]
 810dc34:	b103      	cbz	r3, 810dc38 <_fstat_r+0x1c>
 810dc36:	6023      	str	r3, [r4, #0]
 810dc38:	bd38      	pop	{r3, r4, r5, pc}
 810dc3a:	bf00      	nop
 810dc3c:	100003d0 	.word	0x100003d0

0810dc40 <_isatty_r>:
 810dc40:	b538      	push	{r3, r4, r5, lr}
 810dc42:	4d06      	ldr	r5, [pc, #24]	; (810dc5c <_isatty_r+0x1c>)
 810dc44:	2300      	movs	r3, #0
 810dc46:	4604      	mov	r4, r0
 810dc48:	4608      	mov	r0, r1
 810dc4a:	602b      	str	r3, [r5, #0]
 810dc4c:	f7f4 fd7d 	bl	810274a <_isatty>
 810dc50:	1c43      	adds	r3, r0, #1
 810dc52:	d102      	bne.n	810dc5a <_isatty_r+0x1a>
 810dc54:	682b      	ldr	r3, [r5, #0]
 810dc56:	b103      	cbz	r3, 810dc5a <_isatty_r+0x1a>
 810dc58:	6023      	str	r3, [r4, #0]
 810dc5a:	bd38      	pop	{r3, r4, r5, pc}
 810dc5c:	100003d0 	.word	0x100003d0

0810dc60 <_lseek_r>:
 810dc60:	b538      	push	{r3, r4, r5, lr}
 810dc62:	4d07      	ldr	r5, [pc, #28]	; (810dc80 <_lseek_r+0x20>)
 810dc64:	4604      	mov	r4, r0
 810dc66:	4608      	mov	r0, r1
 810dc68:	4611      	mov	r1, r2
 810dc6a:	2200      	movs	r2, #0
 810dc6c:	602a      	str	r2, [r5, #0]
 810dc6e:	461a      	mov	r2, r3
 810dc70:	f7f4 fd76 	bl	8102760 <_lseek>
 810dc74:	1c43      	adds	r3, r0, #1
 810dc76:	d102      	bne.n	810dc7e <_lseek_r+0x1e>
 810dc78:	682b      	ldr	r3, [r5, #0]
 810dc7a:	b103      	cbz	r3, 810dc7e <_lseek_r+0x1e>
 810dc7c:	6023      	str	r3, [r4, #0]
 810dc7e:	bd38      	pop	{r3, r4, r5, pc}
 810dc80:	100003d0 	.word	0x100003d0

0810dc84 <memmove>:
 810dc84:	4288      	cmp	r0, r1
 810dc86:	b510      	push	{r4, lr}
 810dc88:	eb01 0402 	add.w	r4, r1, r2
 810dc8c:	d902      	bls.n	810dc94 <memmove+0x10>
 810dc8e:	4284      	cmp	r4, r0
 810dc90:	4623      	mov	r3, r4
 810dc92:	d807      	bhi.n	810dca4 <memmove+0x20>
 810dc94:	1e43      	subs	r3, r0, #1
 810dc96:	42a1      	cmp	r1, r4
 810dc98:	d008      	beq.n	810dcac <memmove+0x28>
 810dc9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810dc9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 810dca2:	e7f8      	b.n	810dc96 <memmove+0x12>
 810dca4:	4402      	add	r2, r0
 810dca6:	4601      	mov	r1, r0
 810dca8:	428a      	cmp	r2, r1
 810dcaa:	d100      	bne.n	810dcae <memmove+0x2a>
 810dcac:	bd10      	pop	{r4, pc}
 810dcae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810dcb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810dcb6:	e7f7      	b.n	810dca8 <memmove+0x24>

0810dcb8 <__malloc_lock>:
 810dcb8:	4801      	ldr	r0, [pc, #4]	; (810dcc0 <__malloc_lock+0x8>)
 810dcba:	f7fe bdf2 	b.w	810c8a2 <__retarget_lock_acquire_recursive>
 810dcbe:	bf00      	nop
 810dcc0:	100003c4 	.word	0x100003c4

0810dcc4 <__malloc_unlock>:
 810dcc4:	4801      	ldr	r0, [pc, #4]	; (810dccc <__malloc_unlock+0x8>)
 810dcc6:	f7fe bded 	b.w	810c8a4 <__retarget_lock_release_recursive>
 810dcca:	bf00      	nop
 810dccc:	100003c4 	.word	0x100003c4

0810dcd0 <_realloc_r>:
 810dcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810dcd4:	4680      	mov	r8, r0
 810dcd6:	4614      	mov	r4, r2
 810dcd8:	460e      	mov	r6, r1
 810dcda:	b921      	cbnz	r1, 810dce6 <_realloc_r+0x16>
 810dcdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810dce0:	4611      	mov	r1, r2
 810dce2:	f7ff bba3 	b.w	810d42c <_malloc_r>
 810dce6:	b92a      	cbnz	r2, 810dcf4 <_realloc_r+0x24>
 810dce8:	f7ff fb34 	bl	810d354 <_free_r>
 810dcec:	4625      	mov	r5, r4
 810dcee:	4628      	mov	r0, r5
 810dcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810dcf4:	f000 f835 	bl	810dd62 <_malloc_usable_size_r>
 810dcf8:	4284      	cmp	r4, r0
 810dcfa:	4607      	mov	r7, r0
 810dcfc:	d802      	bhi.n	810dd04 <_realloc_r+0x34>
 810dcfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810dd02:	d812      	bhi.n	810dd2a <_realloc_r+0x5a>
 810dd04:	4621      	mov	r1, r4
 810dd06:	4640      	mov	r0, r8
 810dd08:	f7ff fb90 	bl	810d42c <_malloc_r>
 810dd0c:	4605      	mov	r5, r0
 810dd0e:	2800      	cmp	r0, #0
 810dd10:	d0ed      	beq.n	810dcee <_realloc_r+0x1e>
 810dd12:	42bc      	cmp	r4, r7
 810dd14:	4622      	mov	r2, r4
 810dd16:	4631      	mov	r1, r6
 810dd18:	bf28      	it	cs
 810dd1a:	463a      	movcs	r2, r7
 810dd1c:	f7fb fb6a 	bl	81093f4 <memcpy>
 810dd20:	4631      	mov	r1, r6
 810dd22:	4640      	mov	r0, r8
 810dd24:	f7ff fb16 	bl	810d354 <_free_r>
 810dd28:	e7e1      	b.n	810dcee <_realloc_r+0x1e>
 810dd2a:	4635      	mov	r5, r6
 810dd2c:	e7df      	b.n	810dcee <_realloc_r+0x1e>
	...

0810dd30 <_read_r>:
 810dd30:	b538      	push	{r3, r4, r5, lr}
 810dd32:	4d07      	ldr	r5, [pc, #28]	; (810dd50 <_read_r+0x20>)
 810dd34:	4604      	mov	r4, r0
 810dd36:	4608      	mov	r0, r1
 810dd38:	4611      	mov	r1, r2
 810dd3a:	2200      	movs	r2, #0
 810dd3c:	602a      	str	r2, [r5, #0]
 810dd3e:	461a      	mov	r2, r3
 810dd40:	f7f4 fcae 	bl	81026a0 <_read>
 810dd44:	1c43      	adds	r3, r0, #1
 810dd46:	d102      	bne.n	810dd4e <_read_r+0x1e>
 810dd48:	682b      	ldr	r3, [r5, #0]
 810dd4a:	b103      	cbz	r3, 810dd4e <_read_r+0x1e>
 810dd4c:	6023      	str	r3, [r4, #0]
 810dd4e:	bd38      	pop	{r3, r4, r5, pc}
 810dd50:	100003d0 	.word	0x100003d0

0810dd54 <abort>:
 810dd54:	b508      	push	{r3, lr}
 810dd56:	2006      	movs	r0, #6
 810dd58:	f000 f834 	bl	810ddc4 <raise>
 810dd5c:	2001      	movs	r0, #1
 810dd5e:	f7f4 fc95 	bl	810268c <_exit>

0810dd62 <_malloc_usable_size_r>:
 810dd62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810dd66:	1f18      	subs	r0, r3, #4
 810dd68:	2b00      	cmp	r3, #0
 810dd6a:	bfbc      	itt	lt
 810dd6c:	580b      	ldrlt	r3, [r1, r0]
 810dd6e:	18c0      	addlt	r0, r0, r3
 810dd70:	4770      	bx	lr

0810dd72 <_raise_r>:
 810dd72:	291f      	cmp	r1, #31
 810dd74:	b538      	push	{r3, r4, r5, lr}
 810dd76:	4604      	mov	r4, r0
 810dd78:	460d      	mov	r5, r1
 810dd7a:	d904      	bls.n	810dd86 <_raise_r+0x14>
 810dd7c:	2316      	movs	r3, #22
 810dd7e:	6003      	str	r3, [r0, #0]
 810dd80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810dd84:	bd38      	pop	{r3, r4, r5, pc}
 810dd86:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810dd88:	b112      	cbz	r2, 810dd90 <_raise_r+0x1e>
 810dd8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810dd8e:	b94b      	cbnz	r3, 810dda4 <_raise_r+0x32>
 810dd90:	4620      	mov	r0, r4
 810dd92:	f000 f831 	bl	810ddf8 <_getpid_r>
 810dd96:	462a      	mov	r2, r5
 810dd98:	4601      	mov	r1, r0
 810dd9a:	4620      	mov	r0, r4
 810dd9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810dda0:	f000 b818 	b.w	810ddd4 <_kill_r>
 810dda4:	2b01      	cmp	r3, #1
 810dda6:	d00a      	beq.n	810ddbe <_raise_r+0x4c>
 810dda8:	1c59      	adds	r1, r3, #1
 810ddaa:	d103      	bne.n	810ddb4 <_raise_r+0x42>
 810ddac:	2316      	movs	r3, #22
 810ddae:	6003      	str	r3, [r0, #0]
 810ddb0:	2001      	movs	r0, #1
 810ddb2:	e7e7      	b.n	810dd84 <_raise_r+0x12>
 810ddb4:	2400      	movs	r4, #0
 810ddb6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810ddba:	4628      	mov	r0, r5
 810ddbc:	4798      	blx	r3
 810ddbe:	2000      	movs	r0, #0
 810ddc0:	e7e0      	b.n	810dd84 <_raise_r+0x12>
	...

0810ddc4 <raise>:
 810ddc4:	4b02      	ldr	r3, [pc, #8]	; (810ddd0 <raise+0xc>)
 810ddc6:	4601      	mov	r1, r0
 810ddc8:	6818      	ldr	r0, [r3, #0]
 810ddca:	f7ff bfd2 	b.w	810dd72 <_raise_r>
 810ddce:	bf00      	nop
 810ddd0:	10000020 	.word	0x10000020

0810ddd4 <_kill_r>:
 810ddd4:	b538      	push	{r3, r4, r5, lr}
 810ddd6:	4d07      	ldr	r5, [pc, #28]	; (810ddf4 <_kill_r+0x20>)
 810ddd8:	2300      	movs	r3, #0
 810ddda:	4604      	mov	r4, r0
 810dddc:	4608      	mov	r0, r1
 810ddde:	4611      	mov	r1, r2
 810dde0:	602b      	str	r3, [r5, #0]
 810dde2:	f7f4 fc43 	bl	810266c <_kill>
 810dde6:	1c43      	adds	r3, r0, #1
 810dde8:	d102      	bne.n	810ddf0 <_kill_r+0x1c>
 810ddea:	682b      	ldr	r3, [r5, #0]
 810ddec:	b103      	cbz	r3, 810ddf0 <_kill_r+0x1c>
 810ddee:	6023      	str	r3, [r4, #0]
 810ddf0:	bd38      	pop	{r3, r4, r5, pc}
 810ddf2:	bf00      	nop
 810ddf4:	100003d0 	.word	0x100003d0

0810ddf8 <_getpid_r>:
 810ddf8:	f7f4 bc30 	b.w	810265c <_getpid>

0810ddfc <_init>:
 810ddfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ddfe:	bf00      	nop
 810de00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810de02:	bc08      	pop	{r3}
 810de04:	469e      	mov	lr, r3
 810de06:	4770      	bx	lr

0810de08 <_fini>:
 810de08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810de0a:	bf00      	nop
 810de0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810de0e:	bc08      	pop	{r3}
 810de10:	469e      	mov	lr, r3
 810de12:	4770      	bx	lr
