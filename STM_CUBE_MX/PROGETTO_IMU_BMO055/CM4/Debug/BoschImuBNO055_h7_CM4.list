
BoschImuBNO055_h7_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b694  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000754  0810b938  0810b938  0001b938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810c08c  0810c08c  0001c08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810c094  0810c094  0001c094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810c098  0810c098  0001c098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  10000000  0810c09c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000114  100001f0  0810c28c  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10000304  0810c28c  00020304  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016832  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000027e9  00000000  00000000  00036a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fe0  00000000  00000000  00039240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ee8  00000000  00000000  0003a220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ae30  00000000  00000000  0003b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001460e  00000000  00000000  00075f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001807d4  00000000  00000000  0008a546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020ad1a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000592c  00000000  00000000  0020ad6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001f0 	.word	0x100001f0
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810b91c 	.word	0x0810b91c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001f4 	.word	0x100001f4
 81002dc:	0810b91c 	.word	0x0810b91c

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8101138:	b580      	push	{r7, lr}
 810113a:	b082      	sub	sp, #8
 810113c:	af00      	add	r7, sp, #0
 810113e:	4603      	mov	r3, r0
 8101140:	71fb      	strb	r3, [r7, #7]
 8101142:	79fb      	ldrb	r3, [r7, #7]
 8101144:	4619      	mov	r1, r3
 8101146:	2007      	movs	r0, #7
 8101148:	f000 fa30 	bl	81015ac <bno055_writeData>
 810114c:	bf00      	nop
 810114e:	3708      	adds	r7, #8
 8101150:	46bd      	mov	sp, r7
 8101152:	bd80      	pop	{r7, pc}

08101154 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8101154:	b580      	push	{r7, lr}
 8101156:	b082      	sub	sp, #8
 8101158:	af00      	add	r7, sp, #0
 810115a:	4603      	mov	r3, r0
 810115c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 810115e:	79fb      	ldrb	r3, [r7, #7]
 8101160:	4619      	mov	r1, r3
 8101162:	203d      	movs	r0, #61	; 0x3d
 8101164:	f000 fa22 	bl	81015ac <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8101168:	79fb      	ldrb	r3, [r7, #7]
 810116a:	2b00      	cmp	r3, #0
 810116c:	d103      	bne.n	8101176 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 810116e:	2013      	movs	r0, #19
 8101170:	f000 fa10 	bl	8101594 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8101174:	e002      	b.n	810117c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8101176:	2007      	movs	r0, #7
 8101178:	f000 fa0c 	bl	8101594 <bno055_delay>
}
 810117c:	bf00      	nop
 810117e:	3708      	adds	r7, #8
 8101180:	46bd      	mov	sp, r7
 8101182:	bd80      	pop	{r7, pc}

08101184 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8101184:	b580      	push	{r7, lr}
 8101186:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8101188:	2000      	movs	r0, #0
 810118a:	f7ff ffe3 	bl	8101154 <bno055_setOperationMode>
}
 810118e:	bf00      	nop
 8101190:	bd80      	pop	{r7, pc}

08101192 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8101192:	b580      	push	{r7, lr}
 8101194:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8101196:	200c      	movs	r0, #12
 8101198:	f7ff ffdc 	bl	8101154 <bno055_setOperationMode>
}
 810119c:	bf00      	nop
 810119e:	bd80      	pop	{r7, pc}

081011a0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 81011a0:	b580      	push	{r7, lr}
 81011a2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 81011a4:	2120      	movs	r1, #32
 81011a6:	203f      	movs	r0, #63	; 0x3f
 81011a8:	f000 fa00 	bl	81015ac <bno055_writeData>
  bno055_delay(700);
 81011ac:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 81011b0:	f000 f9f0 	bl	8101594 <bno055_delay>
}
 81011b4:	bf00      	nop
 81011b6:	bd80      	pop	{r7, pc}

081011b8 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 81011b8:	b580      	push	{r7, lr}
 81011ba:	b082      	sub	sp, #8
 81011bc:	af00      	add	r7, sp, #0
  bno055_reset();
 81011be:	f7ff ffef 	bl	81011a0 <bno055_reset>

  uint8_t id = 0;
 81011c2:	2300      	movs	r3, #0
 81011c4:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 81011c6:	1dfb      	adds	r3, r7, #7
 81011c8:	2201      	movs	r2, #1
 81011ca:	4619      	mov	r1, r3
 81011cc:	2000      	movs	r0, #0
 81011ce:	f000 fad9 	bl	8101784 <bno055_readData>
  if (id != BNO055_ID) {
 81011d2:	79fb      	ldrb	r3, [r7, #7]
 81011d4:	2ba0      	cmp	r3, #160	; 0xa0
 81011d6:	d004      	beq.n	81011e2 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 81011d8:	79fb      	ldrb	r3, [r7, #7]
 81011da:	4619      	mov	r1, r3
 81011dc:	4809      	ldr	r0, [pc, #36]	; (8101204 <bno055_setup+0x4c>)
 81011de:	f006 fccd 	bl	8107b7c <iprintf>
  }
  bno055_setPage(0);
 81011e2:	2000      	movs	r0, #0
 81011e4:	f7ff ffa8 	bl	8101138 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81011e8:	2100      	movs	r1, #0
 81011ea:	203f      	movs	r0, #63	; 0x3f
 81011ec:	f000 f9de 	bl	81015ac <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 81011f0:	f7ff ffc8 	bl	8101184 <bno055_setOperationModeConfig>
  bno055_delay(10);
 81011f4:	200a      	movs	r0, #10
 81011f6:	f000 f9cd 	bl	8101594 <bno055_delay>
}
 81011fa:	bf00      	nop
 81011fc:	3708      	adds	r7, #8
 81011fe:	46bd      	mov	sp, r7
 8101200:	bd80      	pop	{r7, pc}
 8101202:	bf00      	nop
 8101204:	0810b938 	.word	0x0810b938

08101208 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8101208:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810120c:	b09e      	sub	sp, #120	; 0x78
 810120e:	af00      	add	r7, sp, #0
 8101210:	4603      	mov	r3, r0
 8101212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8101216:	2000      	movs	r0, #0
 8101218:	f7ff ff8e 	bl	8101138 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 810121c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101220:	2b20      	cmp	r3, #32
 8101222:	d108      	bne.n	8101236 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8101224:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8101228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810122c:	2208      	movs	r2, #8
 810122e:	4618      	mov	r0, r3
 8101230:	f000 faa8 	bl	8101784 <bno055_readData>
 8101234:	e007      	b.n	8101246 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8101236:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810123a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810123e:	2206      	movs	r2, #6
 8101240:	4618      	mov	r0, r3
 8101242:	f000 fa9f 	bl	8101784 <bno055_readData>

  double scale = 1;
 8101246:	f04f 0200 	mov.w	r2, #0
 810124a:	4b8b      	ldr	r3, [pc, #556]	; (8101478 <bno055_getVector+0x270>)
 810124c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8101250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101254:	2b0e      	cmp	r3, #14
 8101256:	d109      	bne.n	810126c <bno055_getVector+0x64>
    scale = magScale;
 8101258:	4b88      	ldr	r3, [pc, #544]	; (810147c <bno055_getVector+0x274>)
 810125a:	881b      	ldrh	r3, [r3, #0]
 810125c:	4618      	mov	r0, r3
 810125e:	f7ff f9d9 	bl	8100614 <__aeabi_ui2d>
 8101262:	4602      	mov	r2, r0
 8101264:	460b      	mov	r3, r1
 8101266:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810126a:	e03e      	b.n	81012ea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 810126c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101270:	2b08      	cmp	r3, #8
 8101272:	d007      	beq.n	8101284 <bno055_getVector+0x7c>
 8101274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101278:	2b28      	cmp	r3, #40	; 0x28
 810127a:	d003      	beq.n	8101284 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 810127c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101280:	2b2e      	cmp	r3, #46	; 0x2e
 8101282:	d109      	bne.n	8101298 <bno055_getVector+0x90>
    scale = accelScale;
 8101284:	4b7e      	ldr	r3, [pc, #504]	; (8101480 <bno055_getVector+0x278>)
 8101286:	881b      	ldrh	r3, [r3, #0]
 8101288:	4618      	mov	r0, r3
 810128a:	f7ff f9c3 	bl	8100614 <__aeabi_ui2d>
 810128e:	4602      	mov	r2, r0
 8101290:	460b      	mov	r3, r1
 8101292:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101296:	e028      	b.n	81012ea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8101298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810129c:	2b14      	cmp	r3, #20
 810129e:	d109      	bne.n	81012b4 <bno055_getVector+0xac>
    scale = angularRateScale;
 81012a0:	4b78      	ldr	r3, [pc, #480]	; (8101484 <bno055_getVector+0x27c>)
 81012a2:	881b      	ldrh	r3, [r3, #0]
 81012a4:	4618      	mov	r0, r3
 81012a6:	f7ff f9b5 	bl	8100614 <__aeabi_ui2d>
 81012aa:	4602      	mov	r2, r0
 81012ac:	460b      	mov	r3, r1
 81012ae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 81012b2:	e01a      	b.n	81012ea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 81012b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81012b8:	2b1a      	cmp	r3, #26
 81012ba:	d109      	bne.n	81012d0 <bno055_getVector+0xc8>
    scale = eulerScale;
 81012bc:	4b72      	ldr	r3, [pc, #456]	; (8101488 <bno055_getVector+0x280>)
 81012be:	881b      	ldrh	r3, [r3, #0]
 81012c0:	4618      	mov	r0, r3
 81012c2:	f7ff f9a7 	bl	8100614 <__aeabi_ui2d>
 81012c6:	4602      	mov	r2, r0
 81012c8:	460b      	mov	r3, r1
 81012ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 81012ce:	e00c      	b.n	81012ea <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 81012d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81012d4:	2b20      	cmp	r3, #32
 81012d6:	d108      	bne.n	81012ea <bno055_getVector+0xe2>
    scale = quaScale;
 81012d8:	4b6c      	ldr	r3, [pc, #432]	; (810148c <bno055_getVector+0x284>)
 81012da:	881b      	ldrh	r3, [r3, #0]
 81012dc:	4618      	mov	r0, r3
 81012de:	f7ff f999 	bl	8100614 <__aeabi_ui2d>
 81012e2:	4602      	mov	r2, r0
 81012e4:	460b      	mov	r3, r1
 81012e6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 81012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81012ee:	2220      	movs	r2, #32
 81012f0:	2100      	movs	r1, #0
 81012f2:	4618      	mov	r0, r3
 81012f4:	f005 fdc0 	bl	8106e78 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 81012f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81012fc:	2b20      	cmp	r3, #32
 81012fe:	d150      	bne.n	81013a2 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101300:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8101304:	021b      	lsls	r3, r3, #8
 8101306:	b21a      	sxth	r2, r3
 8101308:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 810130c:	b21b      	sxth	r3, r3
 810130e:	4313      	orrs	r3, r2
 8101310:	b21b      	sxth	r3, r3
 8101312:	4618      	mov	r0, r3
 8101314:	f7ff f98e 	bl	8100634 <__aeabi_i2d>
 8101318:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810131c:	f7ff fb1e 	bl	810095c <__aeabi_ddiv>
 8101320:	4602      	mov	r2, r0
 8101322:	460b      	mov	r3, r1
 8101324:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8101328:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 810132c:	021b      	lsls	r3, r3, #8
 810132e:	b21a      	sxth	r2, r3
 8101330:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8101334:	b21b      	sxth	r3, r3
 8101336:	4313      	orrs	r3, r2
 8101338:	b21b      	sxth	r3, r3
 810133a:	4618      	mov	r0, r3
 810133c:	f7ff f97a 	bl	8100634 <__aeabi_i2d>
 8101340:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101344:	f7ff fb0a 	bl	810095c <__aeabi_ddiv>
 8101348:	4602      	mov	r2, r0
 810134a:	460b      	mov	r3, r1
 810134c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101350:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8101354:	021b      	lsls	r3, r3, #8
 8101356:	b21a      	sxth	r2, r3
 8101358:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 810135c:	b21b      	sxth	r3, r3
 810135e:	4313      	orrs	r3, r2
 8101360:	b21b      	sxth	r3, r3
 8101362:	4618      	mov	r0, r3
 8101364:	f7ff f966 	bl	8100634 <__aeabi_i2d>
 8101368:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810136c:	f7ff faf6 	bl	810095c <__aeabi_ddiv>
 8101370:	4602      	mov	r2, r0
 8101372:	460b      	mov	r3, r1
 8101374:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8101378:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 810137c:	021b      	lsls	r3, r3, #8
 810137e:	b21a      	sxth	r2, r3
 8101380:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8101384:	b21b      	sxth	r3, r3
 8101386:	4313      	orrs	r3, r2
 8101388:	b21b      	sxth	r3, r3
 810138a:	4618      	mov	r0, r3
 810138c:	f7ff f952 	bl	8100634 <__aeabi_i2d>
 8101390:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101394:	f7ff fae2 	bl	810095c <__aeabi_ddiv>
 8101398:	4602      	mov	r2, r0
 810139a:	460b      	mov	r3, r1
 810139c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 81013a0:	e03b      	b.n	810141a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 81013a2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 81013a6:	021b      	lsls	r3, r3, #8
 81013a8:	b21a      	sxth	r2, r3
 81013aa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 81013ae:	b21b      	sxth	r3, r3
 81013b0:	4313      	orrs	r3, r2
 81013b2:	b21b      	sxth	r3, r3
 81013b4:	4618      	mov	r0, r3
 81013b6:	f7ff f93d 	bl	8100634 <__aeabi_i2d>
 81013ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81013be:	f7ff facd 	bl	810095c <__aeabi_ddiv>
 81013c2:	4602      	mov	r2, r0
 81013c4:	460b      	mov	r3, r1
 81013c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 81013ca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 81013ce:	021b      	lsls	r3, r3, #8
 81013d0:	b21a      	sxth	r2, r3
 81013d2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 81013d6:	b21b      	sxth	r3, r3
 81013d8:	4313      	orrs	r3, r2
 81013da:	b21b      	sxth	r3, r3
 81013dc:	4618      	mov	r0, r3
 81013de:	f7ff f929 	bl	8100634 <__aeabi_i2d>
 81013e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81013e6:	f7ff fab9 	bl	810095c <__aeabi_ddiv>
 81013ea:	4602      	mov	r2, r0
 81013ec:	460b      	mov	r3, r1
 81013ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81013f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 81013f6:	021b      	lsls	r3, r3, #8
 81013f8:	b21a      	sxth	r2, r3
 81013fa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 81013fe:	b21b      	sxth	r3, r3
 8101400:	4313      	orrs	r3, r2
 8101402:	b21b      	sxth	r3, r3
 8101404:	4618      	mov	r0, r3
 8101406:	f7ff f915 	bl	8100634 <__aeabi_i2d>
 810140a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810140e:	f7ff faa5 	bl	810095c <__aeabi_ddiv>
 8101412:	4602      	mov	r2, r0
 8101414:	460b      	mov	r3, r1
 8101416:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 810141a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 810141e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8101422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101426:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810142a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810142e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8101432:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8101436:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 810143a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 810143e:	ec49 8b14 	vmov	d4, r8, r9
 8101442:	ec45 4b15 	vmov	d5, r4, r5
 8101446:	ec41 0b16 	vmov	d6, r0, r1
 810144a:	ec43 2b17 	vmov	d7, r2, r3
}
 810144e:	eeb0 0a44 	vmov.f32	s0, s8
 8101452:	eef0 0a64 	vmov.f32	s1, s9
 8101456:	eeb0 1a45 	vmov.f32	s2, s10
 810145a:	eef0 1a65 	vmov.f32	s3, s11
 810145e:	eeb0 2a46 	vmov.f32	s4, s12
 8101462:	eef0 2a66 	vmov.f32	s5, s13
 8101466:	eeb0 3a47 	vmov.f32	s6, s14
 810146a:	eef0 3a67 	vmov.f32	s7, s15
 810146e:	3778      	adds	r7, #120	; 0x78
 8101470:	46bd      	mov	sp, r7
 8101472:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8101476:	bf00      	nop
 8101478:	3ff00000 	.word	0x3ff00000
 810147c:	1000000e 	.word	0x1000000e
 8101480:	10000008 	.word	0x10000008
 8101484:	1000000a 	.word	0x1000000a
 8101488:	1000000c 	.word	0x1000000c
 810148c:	10000010 	.word	0x10000010

08101490 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8101490:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101494:	b090      	sub	sp, #64	; 0x40
 8101496:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8101498:	201a      	movs	r0, #26
 810149a:	f7ff feb5 	bl	8101208 <bno055_getVector>
 810149e:	eeb0 4a40 	vmov.f32	s8, s0
 81014a2:	eef0 4a60 	vmov.f32	s9, s1
 81014a6:	eeb0 5a41 	vmov.f32	s10, s2
 81014aa:	eef0 5a61 	vmov.f32	s11, s3
 81014ae:	eeb0 6a42 	vmov.f32	s12, s4
 81014b2:	eef0 6a62 	vmov.f32	s13, s5
 81014b6:	eeb0 7a43 	vmov.f32	s14, s6
 81014ba:	eef0 7a63 	vmov.f32	s15, s7
 81014be:	ed87 4b08 	vstr	d4, [r7, #32]
 81014c2:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 81014c6:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 81014ca:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 81014ce:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 81014d2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 81014d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 81014da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 81014de:	ec49 8b14 	vmov	d4, r8, r9
 81014e2:	ec45 4b15 	vmov	d5, r4, r5
 81014e6:	ec41 0b16 	vmov	d6, r0, r1
 81014ea:	ec43 2b17 	vmov	d7, r2, r3
}
 81014ee:	eeb0 0a44 	vmov.f32	s0, s8
 81014f2:	eef0 0a64 	vmov.f32	s1, s9
 81014f6:	eeb0 1a45 	vmov.f32	s2, s10
 81014fa:	eef0 1a65 	vmov.f32	s3, s11
 81014fe:	eeb0 2a46 	vmov.f32	s4, s12
 8101502:	eef0 2a66 	vmov.f32	s5, s13
 8101506:	eeb0 3a47 	vmov.f32	s6, s14
 810150a:	eef0 3a67 	vmov.f32	s7, s15
 810150e:	3740      	adds	r7, #64	; 0x40
 8101510:	46bd      	mov	sp, r7
 8101512:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08101516 <bno055_setAxisMap>:
}
bno055_vector_t bno055_getVectorQuaternion() {
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
}

void bno055_setAxisMap(bno055_axis_map_t axis) {
 8101516:	b580      	push	{r7, lr}
 8101518:	b084      	sub	sp, #16
 810151a:	af00      	add	r7, sp, #0
 810151c:	463b      	mov	r3, r7
 810151e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t axisRemap = (axis.z << 4) | (axis.y << 2) | (axis.x);
 8101522:	793b      	ldrb	r3, [r7, #4]
 8101524:	011b      	lsls	r3, r3, #4
 8101526:	b25a      	sxtb	r2, r3
 8101528:	78bb      	ldrb	r3, [r7, #2]
 810152a:	009b      	lsls	r3, r3, #2
 810152c:	b25b      	sxtb	r3, r3
 810152e:	4313      	orrs	r3, r2
 8101530:	b25a      	sxtb	r2, r3
 8101532:	783b      	ldrb	r3, [r7, #0]
 8101534:	b25b      	sxtb	r3, r3
 8101536:	4313      	orrs	r3, r2
 8101538:	b25b      	sxtb	r3, r3
 810153a:	73fb      	strb	r3, [r7, #15]
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
 810153c:	787b      	ldrb	r3, [r7, #1]
 810153e:	009b      	lsls	r3, r3, #2
 8101540:	b25a      	sxtb	r2, r3
 8101542:	78fb      	ldrb	r3, [r7, #3]
 8101544:	005b      	lsls	r3, r3, #1
 8101546:	b25b      	sxtb	r3, r3
 8101548:	4313      	orrs	r3, r2
 810154a:	b25a      	sxtb	r2, r3
 810154c:	797b      	ldrb	r3, [r7, #5]
 810154e:	b25b      	sxtb	r3, r3
 8101550:	4313      	orrs	r3, r2
 8101552:	b25b      	sxtb	r3, r3
 8101554:	73bb      	strb	r3, [r7, #14]
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
 8101556:	7bfb      	ldrb	r3, [r7, #15]
 8101558:	4619      	mov	r1, r3
 810155a:	2041      	movs	r0, #65	; 0x41
 810155c:	f000 f826 	bl	81015ac <bno055_writeData>
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
 8101560:	7bbb      	ldrb	r3, [r7, #14]
 8101562:	4619      	mov	r1, r3
 8101564:	2042      	movs	r0, #66	; 0x42
 8101566:	f000 f821 	bl	81015ac <bno055_writeData>
}
 810156a:	bf00      	nop
 810156c:	3710      	adds	r7, #16
 810156e:	46bd      	mov	sp, r7
 8101570:	bd80      	pop	{r7, pc}
	...

08101574 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8101574:	b480      	push	{r7}
 8101576:	b083      	sub	sp, #12
 8101578:	af00      	add	r7, sp, #0
 810157a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 810157c:	4a04      	ldr	r2, [pc, #16]	; (8101590 <bno055_assignI2C+0x1c>)
 810157e:	687b      	ldr	r3, [r7, #4]
 8101580:	6013      	str	r3, [r2, #0]
}
 8101582:	bf00      	nop
 8101584:	370c      	adds	r7, #12
 8101586:	46bd      	mov	sp, r7
 8101588:	f85d 7b04 	ldr.w	r7, [sp], #4
 810158c:	4770      	bx	lr
 810158e:	bf00      	nop
 8101590:	1000020c 	.word	0x1000020c

08101594 <bno055_delay>:

void bno055_delay(int time) {
 8101594:	b580      	push	{r7, lr}
 8101596:	b082      	sub	sp, #8
 8101598:	af00      	add	r7, sp, #0
 810159a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 810159c:	687b      	ldr	r3, [r7, #4]
 810159e:	4618      	mov	r0, r3
 81015a0:	f000 fd98 	bl	81020d4 <HAL_Delay>
#endif
}
 81015a4:	bf00      	nop
 81015a6:	3708      	adds	r7, #8
 81015a8:	46bd      	mov	sp, r7
 81015aa:	bd80      	pop	{r7, pc}

081015ac <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 81015ac:	b580      	push	{r7, lr}
 81015ae:	b088      	sub	sp, #32
 81015b0:	af02      	add	r7, sp, #8
 81015b2:	4603      	mov	r3, r0
 81015b4:	460a      	mov	r2, r1
 81015b6:	71fb      	strb	r3, [r7, #7]
 81015b8:	4613      	mov	r3, r2
 81015ba:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 81015bc:	79fb      	ldrb	r3, [r7, #7]
 81015be:	733b      	strb	r3, [r7, #12]
 81015c0:	79bb      	ldrb	r3, [r7, #6]
 81015c2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 81015c4:	4b5a      	ldr	r3, [pc, #360]	; (8101730 <bno055_writeData+0x184>)
 81015c6:	6818      	ldr	r0, [r3, #0]
 81015c8:	f107 020c 	add.w	r2, r7, #12
 81015cc:	230a      	movs	r3, #10
 81015ce:	9300      	str	r3, [sp, #0]
 81015d0:	2302      	movs	r3, #2
 81015d2:	2150      	movs	r1, #80	; 0x50
 81015d4:	f001 f94a 	bl	810286c <HAL_I2C_Master_Transmit>
 81015d8:	4603      	mov	r3, r0
 81015da:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 81015dc:	7dfb      	ldrb	r3, [r7, #23]
 81015de:	2b00      	cmp	r3, #0
 81015e0:	f000 80a0 	beq.w	8101724 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 81015e4:	7dfb      	ldrb	r3, [r7, #23]
 81015e6:	2b01      	cmp	r3, #1
 81015e8:	d103      	bne.n	81015f2 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 81015ea:	4852      	ldr	r0, [pc, #328]	; (8101734 <bno055_writeData+0x188>)
 81015ec:	f006 fb62 	bl	8107cb4 <puts>
 81015f0:	e012      	b.n	8101618 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 81015f2:	7dfb      	ldrb	r3, [r7, #23]
 81015f4:	2b03      	cmp	r3, #3
 81015f6:	d103      	bne.n	8101600 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 81015f8:	484f      	ldr	r0, [pc, #316]	; (8101738 <bno055_writeData+0x18c>)
 81015fa:	f006 fb5b 	bl	8107cb4 <puts>
 81015fe:	e00b      	b.n	8101618 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8101600:	7dfb      	ldrb	r3, [r7, #23]
 8101602:	2b02      	cmp	r3, #2
 8101604:	d103      	bne.n	810160e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101606:	484d      	ldr	r0, [pc, #308]	; (810173c <bno055_writeData+0x190>)
 8101608:	f006 fb54 	bl	8107cb4 <puts>
 810160c:	e004      	b.n	8101618 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 810160e:	7dfb      	ldrb	r3, [r7, #23]
 8101610:	4619      	mov	r1, r3
 8101612:	484b      	ldr	r0, [pc, #300]	; (8101740 <bno055_writeData+0x194>)
 8101614:	f006 fab2 	bl	8107b7c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8101618:	4b45      	ldr	r3, [pc, #276]	; (8101730 <bno055_writeData+0x184>)
 810161a:	681b      	ldr	r3, [r3, #0]
 810161c:	4618      	mov	r0, r3
 810161e:	f001 fc24 	bl	8102e6a <HAL_I2C_GetError>
 8101622:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8101624:	693b      	ldr	r3, [r7, #16]
 8101626:	2b00      	cmp	r3, #0
 8101628:	d07e      	beq.n	8101728 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 810162a:	693b      	ldr	r3, [r7, #16]
 810162c:	2b01      	cmp	r3, #1
 810162e:	d103      	bne.n	8101638 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8101630:	4844      	ldr	r0, [pc, #272]	; (8101744 <bno055_writeData+0x198>)
 8101632:	f006 fb3f 	bl	8107cb4 <puts>
 8101636:	e021      	b.n	810167c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8101638:	693b      	ldr	r3, [r7, #16]
 810163a:	2b02      	cmp	r3, #2
 810163c:	d103      	bne.n	8101646 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 810163e:	4842      	ldr	r0, [pc, #264]	; (8101748 <bno055_writeData+0x19c>)
 8101640:	f006 fb38 	bl	8107cb4 <puts>
 8101644:	e01a      	b.n	810167c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8101646:	693b      	ldr	r3, [r7, #16]
 8101648:	2b04      	cmp	r3, #4
 810164a:	d103      	bne.n	8101654 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 810164c:	483f      	ldr	r0, [pc, #252]	; (810174c <bno055_writeData+0x1a0>)
 810164e:	f006 fb31 	bl	8107cb4 <puts>
 8101652:	e013      	b.n	810167c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8101654:	693b      	ldr	r3, [r7, #16]
 8101656:	2b08      	cmp	r3, #8
 8101658:	d103      	bne.n	8101662 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 810165a:	483d      	ldr	r0, [pc, #244]	; (8101750 <bno055_writeData+0x1a4>)
 810165c:	f006 fb2a 	bl	8107cb4 <puts>
 8101660:	e00c      	b.n	810167c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8101662:	693b      	ldr	r3, [r7, #16]
 8101664:	2b10      	cmp	r3, #16
 8101666:	d103      	bne.n	8101670 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8101668:	483a      	ldr	r0, [pc, #232]	; (8101754 <bno055_writeData+0x1a8>)
 810166a:	f006 fb23 	bl	8107cb4 <puts>
 810166e:	e005      	b.n	810167c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8101670:	693b      	ldr	r3, [r7, #16]
 8101672:	2b20      	cmp	r3, #32
 8101674:	d102      	bne.n	810167c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8101676:	4838      	ldr	r0, [pc, #224]	; (8101758 <bno055_writeData+0x1ac>)
 8101678:	f006 fb1c 	bl	8107cb4 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 810167c:	4b2c      	ldr	r3, [pc, #176]	; (8101730 <bno055_writeData+0x184>)
 810167e:	681b      	ldr	r3, [r3, #0]
 8101680:	4618      	mov	r0, r3
 8101682:	f001 fbe4 	bl	8102e4e <HAL_I2C_GetState>
 8101686:	4603      	mov	r3, r0
 8101688:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 810168a:	7bfb      	ldrb	r3, [r7, #15]
 810168c:	2b00      	cmp	r3, #0
 810168e:	d103      	bne.n	8101698 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101690:	4832      	ldr	r0, [pc, #200]	; (810175c <bno055_writeData+0x1b0>)
 8101692:	f006 fb0f 	bl	8107cb4 <puts>
 8101696:	e048      	b.n	810172a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8101698:	7bfb      	ldrb	r3, [r7, #15]
 810169a:	2b20      	cmp	r3, #32
 810169c:	d103      	bne.n	81016a6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 810169e:	482f      	ldr	r0, [pc, #188]	; (810175c <bno055_writeData+0x1b0>)
 81016a0:	f006 fb08 	bl	8107cb4 <puts>
 81016a4:	e041      	b.n	810172a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 81016a6:	7bfb      	ldrb	r3, [r7, #15]
 81016a8:	2b24      	cmp	r3, #36	; 0x24
 81016aa:	d103      	bne.n	81016b4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 81016ac:	482c      	ldr	r0, [pc, #176]	; (8101760 <bno055_writeData+0x1b4>)
 81016ae:	f006 fb01 	bl	8107cb4 <puts>
 81016b2:	e03a      	b.n	810172a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 81016b4:	7bfb      	ldrb	r3, [r7, #15]
 81016b6:	2b21      	cmp	r3, #33	; 0x21
 81016b8:	d103      	bne.n	81016c2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 81016ba:	482a      	ldr	r0, [pc, #168]	; (8101764 <bno055_writeData+0x1b8>)
 81016bc:	f006 fafa 	bl	8107cb4 <puts>
 81016c0:	e033      	b.n	810172a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 81016c2:	7bfb      	ldrb	r3, [r7, #15]
 81016c4:	2b22      	cmp	r3, #34	; 0x22
 81016c6:	d103      	bne.n	81016d0 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 81016c8:	4827      	ldr	r0, [pc, #156]	; (8101768 <bno055_writeData+0x1bc>)
 81016ca:	f006 faf3 	bl	8107cb4 <puts>
 81016ce:	e02c      	b.n	810172a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 81016d0:	7bfb      	ldrb	r3, [r7, #15]
 81016d2:	2b28      	cmp	r3, #40	; 0x28
 81016d4:	d103      	bne.n	81016de <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 81016d6:	4825      	ldr	r0, [pc, #148]	; (810176c <bno055_writeData+0x1c0>)
 81016d8:	f006 faec 	bl	8107cb4 <puts>
 81016dc:	e025      	b.n	810172a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 81016de:	7bfb      	ldrb	r3, [r7, #15]
 81016e0:	2b29      	cmp	r3, #41	; 0x29
 81016e2:	d103      	bne.n	81016ec <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 81016e4:	4822      	ldr	r0, [pc, #136]	; (8101770 <bno055_writeData+0x1c4>)
 81016e6:	f006 fae5 	bl	8107cb4 <puts>
 81016ea:	e01e      	b.n	810172a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 81016ec:	7bfb      	ldrb	r3, [r7, #15]
 81016ee:	2b2a      	cmp	r3, #42	; 0x2a
 81016f0:	d103      	bne.n	81016fa <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 81016f2:	4820      	ldr	r0, [pc, #128]	; (8101774 <bno055_writeData+0x1c8>)
 81016f4:	f006 fade 	bl	8107cb4 <puts>
 81016f8:	e017      	b.n	810172a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 81016fa:	7bfb      	ldrb	r3, [r7, #15]
 81016fc:	2b60      	cmp	r3, #96	; 0x60
 81016fe:	d103      	bne.n	8101708 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8101700:	481d      	ldr	r0, [pc, #116]	; (8101778 <bno055_writeData+0x1cc>)
 8101702:	f006 fad7 	bl	8107cb4 <puts>
 8101706:	e010      	b.n	810172a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8101708:	7bfb      	ldrb	r3, [r7, #15]
 810170a:	2ba0      	cmp	r3, #160	; 0xa0
 810170c:	d103      	bne.n	8101716 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 810170e:	481b      	ldr	r0, [pc, #108]	; (810177c <bno055_writeData+0x1d0>)
 8101710:	f006 fad0 	bl	8107cb4 <puts>
 8101714:	e009      	b.n	810172a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8101716:	7bfb      	ldrb	r3, [r7, #15]
 8101718:	2be0      	cmp	r3, #224	; 0xe0
 810171a:	d106      	bne.n	810172a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 810171c:	4818      	ldr	r0, [pc, #96]	; (8101780 <bno055_writeData+0x1d4>)
 810171e:	f006 fac9 	bl	8107cb4 <puts>
 8101722:	e002      	b.n	810172a <bno055_writeData+0x17e>
    return;
 8101724:	bf00      	nop
 8101726:	e000      	b.n	810172a <bno055_writeData+0x17e>
    return;
 8101728:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 810172a:	3718      	adds	r7, #24
 810172c:	46bd      	mov	sp, r7
 810172e:	bd80      	pop	{r7, pc}
 8101730:	1000020c 	.word	0x1000020c
 8101734:	0810b974 	.word	0x0810b974
 8101738:	0810b998 	.word	0x0810b998
 810173c:	0810b9c0 	.word	0x0810b9c0
 8101740:	0810b9e4 	.word	0x0810b9e4
 8101744:	0810b9fc 	.word	0x0810b9fc
 8101748:	0810ba10 	.word	0x0810ba10
 810174c:	0810ba24 	.word	0x0810ba24
 8101750:	0810ba38 	.word	0x0810ba38
 8101754:	0810ba4c 	.word	0x0810ba4c
 8101758:	0810ba60 	.word	0x0810ba60
 810175c:	0810ba78 	.word	0x0810ba78
 8101760:	0810ba90 	.word	0x0810ba90
 8101764:	0810baa4 	.word	0x0810baa4
 8101768:	0810babc 	.word	0x0810babc
 810176c:	0810bad4 	.word	0x0810bad4
 8101770:	0810baec 	.word	0x0810baec
 8101774:	0810bb0c 	.word	0x0810bb0c
 8101778:	0810bb2c 	.word	0x0810bb2c
 810177c:	0810bb44 	.word	0x0810bb44
 8101780:	0810bb5c 	.word	0x0810bb5c

08101784 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8101784:	b580      	push	{r7, lr}
 8101786:	b086      	sub	sp, #24
 8101788:	af02      	add	r7, sp, #8
 810178a:	4603      	mov	r3, r0
 810178c:	6039      	str	r1, [r7, #0]
 810178e:	71fb      	strb	r3, [r7, #7]
 8101790:	4613      	mov	r3, r2
 8101792:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8101794:	4b0d      	ldr	r3, [pc, #52]	; (81017cc <bno055_readData+0x48>)
 8101796:	6818      	ldr	r0, [r3, #0]
 8101798:	1dfa      	adds	r2, r7, #7
 810179a:	2364      	movs	r3, #100	; 0x64
 810179c:	9300      	str	r3, [sp, #0]
 810179e:	2301      	movs	r3, #1
 81017a0:	2150      	movs	r1, #80	; 0x50
 81017a2:	f001 f863 	bl	810286c <HAL_I2C_Master_Transmit>
 81017a6:	4603      	mov	r3, r0
 81017a8:	73fb      	strb	r3, [r7, #15]
                          100);
  ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 81017aa:	4b08      	ldr	r3, [pc, #32]	; (81017cc <bno055_readData+0x48>)
 81017ac:	6818      	ldr	r0, [r3, #0]
 81017ae:	79bb      	ldrb	r3, [r7, #6]
 81017b0:	b29b      	uxth	r3, r3
 81017b2:	2264      	movs	r2, #100	; 0x64
 81017b4:	9200      	str	r2, [sp, #0]
 81017b6:	683a      	ldr	r2, [r7, #0]
 81017b8:	2150      	movs	r1, #80	; 0x50
 81017ba:	f001 f94b 	bl	8102a54 <HAL_I2C_Master_Receive>
 81017be:	4603      	mov	r3, r0
 81017c0:	73fb      	strb	r3, [r7, #15]
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 81017c2:	bf00      	nop
 81017c4:	3710      	adds	r7, #16
 81017c6:	46bd      	mov	sp, r7
 81017c8:	bd80      	pop	{r7, pc}
 81017ca:	bf00      	nop
 81017cc:	1000020c 	.word	0x1000020c

081017d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81017d0:	b5b0      	push	{r4, r5, r7, lr}
 81017d2:	b090      	sub	sp, #64	; 0x40
 81017d4:	af04      	add	r7, sp, #16

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81017d6:	4b43      	ldr	r3, [pc, #268]	; (81018e4 <main+0x114>)
 81017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017dc:	4a41      	ldr	r2, [pc, #260]	; (81018e4 <main+0x114>)
 81017de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017e6:	4b3f      	ldr	r3, [pc, #252]	; (81018e4 <main+0x114>)
 81017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81017f0:	62bb      	str	r3, [r7, #40]	; 0x28
 81017f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81017f4:	2001      	movs	r0, #1
 81017f6:	f000 ff97 	bl	8102728 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81017fa:	f001 fecd 	bl	8103598 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81017fe:	2201      	movs	r2, #1
 8101800:	2102      	movs	r1, #2
 8101802:	2000      	movs	r0, #0
 8101804:	f001 fe4e 	bl	81034a4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101808:	4b37      	ldr	r3, [pc, #220]	; (81018e8 <main+0x118>)
 810180a:	681b      	ldr	r3, [r3, #0]
 810180c:	091b      	lsrs	r3, r3, #4
 810180e:	f003 030f 	and.w	r3, r3, #15
 8101812:	2b07      	cmp	r3, #7
 8101814:	d108      	bne.n	8101828 <main+0x58>
 8101816:	4b35      	ldr	r3, [pc, #212]	; (81018ec <main+0x11c>)
 8101818:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810181c:	4a33      	ldr	r2, [pc, #204]	; (81018ec <main+0x11c>)
 810181e:	f043 0301 	orr.w	r3, r3, #1
 8101822:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101826:	e007      	b.n	8101838 <main+0x68>
 8101828:	4b30      	ldr	r3, [pc, #192]	; (81018ec <main+0x11c>)
 810182a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810182e:	4a2f      	ldr	r2, [pc, #188]	; (81018ec <main+0x11c>)
 8101830:	f043 0301 	orr.w	r3, r3, #1
 8101834:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101838:	f000 fb98 	bl	8101f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 810183c:	f000 f940 	bl	8101ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101840:	f000 f8e8 	bl	8101a14 <MX_GPIO_Init>
  MX_I2C1_Init();
 8101844:	f000 f85a 	bl	81018fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MX_USART3_UART_Init();
 8101848:	f000 f898 	bl	810197c <MX_USART3_UART_Init>

  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1,BNO055_I2C_ADDR << 1,5,1000);
 810184c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101850:	2205      	movs	r2, #5
 8101852:	2150      	movs	r1, #80	; 0x50
 8101854:	4826      	ldr	r0, [pc, #152]	; (81018f0 <main+0x120>)
 8101856:	f001 f9f3 	bl	8102c40 <HAL_I2C_IsDeviceReady>
 810185a:	4603      	mov	r3, r0
 810185c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  bno055_assignI2C(&hi2c1);
 8101860:	4823      	ldr	r0, [pc, #140]	; (81018f0 <main+0x120>)
 8101862:	f7ff fe87 	bl	8101574 <bno055_assignI2C>
  bno055_setup();
 8101866:	f7ff fca7 	bl	81011b8 <bno055_setup>
  bno055_setOperationModeNDOF();
 810186a:	f7ff fc92 	bl	8101192 <bno055_setOperationModeNDOF>
  {
	  //printf("Prova\r\n");
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bno055_vector_t v = bno055_getVectorEuler();
 810186e:	f7ff fe0f 	bl	8101490 <bno055_getVectorEuler>
 8101872:	eeb0 4a40 	vmov.f32	s8, s0
 8101876:	eef0 4a60 	vmov.f32	s9, s1
 810187a:	eeb0 5a41 	vmov.f32	s10, s2
 810187e:	eef0 5a61 	vmov.f32	s11, s3
 8101882:	eeb0 6a42 	vmov.f32	s12, s4
 8101886:	eef0 6a62 	vmov.f32	s13, s5
 810188a:	eeb0 7a43 	vmov.f32	s14, s6
 810188e:	eef0 7a63 	vmov.f32	s15, s7
 8101892:	ed87 4b00 	vstr	d4, [r7]
 8101896:	ed87 5b02 	vstr	d5, [r7, #8]
 810189a:	ed87 6b04 	vstr	d6, [r7, #16]
 810189e:	ed87 7b06 	vstr	d7, [r7, #24]
	  printf("{\"yaw\": %.2f,\"roll\": %.2f,\"pitch\": %.2f}", v.x, v.y, v.z);
 81018a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 81018a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 81018aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 81018ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81018b2:	e9cd 2300 	strd	r2, r3, [sp]
 81018b6:	4622      	mov	r2, r4
 81018b8:	462b      	mov	r3, r5
 81018ba:	480e      	ldr	r0, [pc, #56]	; (81018f4 <main+0x124>)
 81018bc:	f006 f95e 	bl	8107b7c <iprintf>
	  printf("\n");
 81018c0:	200a      	movs	r0, #10
 81018c2:	f006 f973 	bl	8107bac <putchar>

	      printf("\r\n\r\n");
	      HAL_Delay(1000);
	      */

	      bno055_axis_map_t axis = {
 81018c6:	4a0c      	ldr	r2, [pc, #48]	; (81018f8 <main+0x128>)
 81018c8:	f107 0320 	add.w	r3, r7, #32
 81018cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 81018d0:	6018      	str	r0, [r3, #0]
 81018d2:	3304      	adds	r3, #4
 81018d4:	8019      	strh	r1, [r3, #0]
	        .y = BNO055_AXIS_Y,
	        .y_sign = BNO055_AXIS_SIGN_POSITIVE,
	        .z = BNO055_AXIS_Z,
	        .z_sign = BNO055_AXIS_SIGN_POSITIVE
	      };
	      bno055_setAxisMap(axis);
 81018d6:	f107 0320 	add.w	r3, r7, #32
 81018da:	e893 0003 	ldmia.w	r3, {r0, r1}
 81018de:	f7ff fe1a 	bl	8101516 <bno055_setAxisMap>
  {
 81018e2:	e7c4      	b.n	810186e <main+0x9e>
 81018e4:	58024400 	.word	0x58024400
 81018e8:	e000ed00 	.word	0xe000ed00
 81018ec:	58026400 	.word	0x58026400
 81018f0:	10000210 	.word	0x10000210
 81018f4:	0810bb74 	.word	0x0810bb74
 81018f8:	0810bba0 	.word	0x0810bba0

081018fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 81018fc:	b580      	push	{r7, lr}
 81018fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101900:	4b1b      	ldr	r3, [pc, #108]	; (8101970 <MX_I2C1_Init+0x74>)
 8101902:	4a1c      	ldr	r2, [pc, #112]	; (8101974 <MX_I2C1_Init+0x78>)
 8101904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8101906:	4b1a      	ldr	r3, [pc, #104]	; (8101970 <MX_I2C1_Init+0x74>)
 8101908:	4a1b      	ldr	r2, [pc, #108]	; (8101978 <MX_I2C1_Init+0x7c>)
 810190a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 810190c:	4b18      	ldr	r3, [pc, #96]	; (8101970 <MX_I2C1_Init+0x74>)
 810190e:	2200      	movs	r2, #0
 8101910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101912:	4b17      	ldr	r3, [pc, #92]	; (8101970 <MX_I2C1_Init+0x74>)
 8101914:	2201      	movs	r2, #1
 8101916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101918:	4b15      	ldr	r3, [pc, #84]	; (8101970 <MX_I2C1_Init+0x74>)
 810191a:	2200      	movs	r2, #0
 810191c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 810191e:	4b14      	ldr	r3, [pc, #80]	; (8101970 <MX_I2C1_Init+0x74>)
 8101920:	2200      	movs	r2, #0
 8101922:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101924:	4b12      	ldr	r3, [pc, #72]	; (8101970 <MX_I2C1_Init+0x74>)
 8101926:	2200      	movs	r2, #0
 8101928:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810192a:	4b11      	ldr	r3, [pc, #68]	; (8101970 <MX_I2C1_Init+0x74>)
 810192c:	2200      	movs	r2, #0
 810192e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101930:	4b0f      	ldr	r3, [pc, #60]	; (8101970 <MX_I2C1_Init+0x74>)
 8101932:	2200      	movs	r2, #0
 8101934:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101936:	480e      	ldr	r0, [pc, #56]	; (8101970 <MX_I2C1_Init+0x74>)
 8101938:	f000 ff08 	bl	810274c <HAL_I2C_Init>
 810193c:	4603      	mov	r3, r0
 810193e:	2b00      	cmp	r3, #0
 8101940:	d001      	beq.n	8101946 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101942:	f000 f909 	bl	8101b58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101946:	2100      	movs	r1, #0
 8101948:	4809      	ldr	r0, [pc, #36]	; (8101970 <MX_I2C1_Init+0x74>)
 810194a:	f001 fd13 	bl	8103374 <HAL_I2CEx_ConfigAnalogFilter>
 810194e:	4603      	mov	r3, r0
 8101950:	2b00      	cmp	r3, #0
 8101952:	d001      	beq.n	8101958 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101954:	f000 f900 	bl	8101b58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101958:	2100      	movs	r1, #0
 810195a:	4805      	ldr	r0, [pc, #20]	; (8101970 <MX_I2C1_Init+0x74>)
 810195c:	f001 fd55 	bl	810340a <HAL_I2CEx_ConfigDigitalFilter>
 8101960:	4603      	mov	r3, r0
 8101962:	2b00      	cmp	r3, #0
 8101964:	d001      	beq.n	810196a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101966:	f000 f8f7 	bl	8101b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 810196a:	bf00      	nop
 810196c:	bd80      	pop	{r7, pc}
 810196e:	bf00      	nop
 8101970:	10000210 	.word	0x10000210
 8101974:	40005400 	.word	0x40005400
 8101978:	307075b1 	.word	0x307075b1

0810197c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 810197c:	b580      	push	{r7, lr}
 810197e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101980:	4b22      	ldr	r3, [pc, #136]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 8101982:	4a23      	ldr	r2, [pc, #140]	; (8101a10 <MX_USART3_UART_Init+0x94>)
 8101984:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101986:	4b21      	ldr	r3, [pc, #132]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 8101988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 810198c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810198e:	4b1f      	ldr	r3, [pc, #124]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 8101990:	2200      	movs	r2, #0
 8101992:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101994:	4b1d      	ldr	r3, [pc, #116]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 8101996:	2200      	movs	r2, #0
 8101998:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810199a:	4b1c      	ldr	r3, [pc, #112]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 810199c:	2200      	movs	r2, #0
 810199e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81019a0:	4b1a      	ldr	r3, [pc, #104]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 81019a2:	220c      	movs	r2, #12
 81019a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81019a6:	4b19      	ldr	r3, [pc, #100]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 81019a8:	2200      	movs	r2, #0
 81019aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81019ac:	4b17      	ldr	r3, [pc, #92]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 81019ae:	2200      	movs	r2, #0
 81019b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81019b2:	4b16      	ldr	r3, [pc, #88]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 81019b4:	2200      	movs	r2, #0
 81019b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81019b8:	4b14      	ldr	r3, [pc, #80]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 81019ba:	2200      	movs	r2, #0
 81019bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81019be:	4b13      	ldr	r3, [pc, #76]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 81019c0:	2200      	movs	r2, #0
 81019c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81019c4:	4811      	ldr	r0, [pc, #68]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 81019c6:	f004 f919 	bl	8105bfc <HAL_UART_Init>
 81019ca:	4603      	mov	r3, r0
 81019cc:	2b00      	cmp	r3, #0
 81019ce:	d001      	beq.n	81019d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81019d0:	f000 f8c2 	bl	8101b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81019d4:	2100      	movs	r1, #0
 81019d6:	480d      	ldr	r0, [pc, #52]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 81019d8:	f005 f94c 	bl	8106c74 <HAL_UARTEx_SetTxFifoThreshold>
 81019dc:	4603      	mov	r3, r0
 81019de:	2b00      	cmp	r3, #0
 81019e0:	d001      	beq.n	81019e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81019e2:	f000 f8b9 	bl	8101b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81019e6:	2100      	movs	r1, #0
 81019e8:	4808      	ldr	r0, [pc, #32]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 81019ea:	f005 f981 	bl	8106cf0 <HAL_UARTEx_SetRxFifoThreshold>
 81019ee:	4603      	mov	r3, r0
 81019f0:	2b00      	cmp	r3, #0
 81019f2:	d001      	beq.n	81019f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81019f4:	f000 f8b0 	bl	8101b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81019f8:	4804      	ldr	r0, [pc, #16]	; (8101a0c <MX_USART3_UART_Init+0x90>)
 81019fa:	f005 f902 	bl	8106c02 <HAL_UARTEx_DisableFifoMode>
 81019fe:	4603      	mov	r3, r0
 8101a00:	2b00      	cmp	r3, #0
 8101a02:	d001      	beq.n	8101a08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101a04:	f000 f8a8 	bl	8101b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101a08:	bf00      	nop
 8101a0a:	bd80      	pop	{r7, pc}
 8101a0c:	1000025c 	.word	0x1000025c
 8101a10:	40004800 	.word	0x40004800

08101a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101a14:	b580      	push	{r7, lr}
 8101a16:	b088      	sub	sp, #32
 8101a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a1a:	f107 030c 	add.w	r3, r7, #12
 8101a1e:	2200      	movs	r2, #0
 8101a20:	601a      	str	r2, [r3, #0]
 8101a22:	605a      	str	r2, [r3, #4]
 8101a24:	609a      	str	r2, [r3, #8]
 8101a26:	60da      	str	r2, [r3, #12]
 8101a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101a2a:	4b23      	ldr	r3, [pc, #140]	; (8101ab8 <MX_GPIO_Init+0xa4>)
 8101a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a30:	4a21      	ldr	r2, [pc, #132]	; (8101ab8 <MX_GPIO_Init+0xa4>)
 8101a32:	f043 0301 	orr.w	r3, r3, #1
 8101a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a3a:	4b1f      	ldr	r3, [pc, #124]	; (8101ab8 <MX_GPIO_Init+0xa4>)
 8101a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a40:	f003 0301 	and.w	r3, r3, #1
 8101a44:	60bb      	str	r3, [r7, #8]
 8101a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101a48:	4b1b      	ldr	r3, [pc, #108]	; (8101ab8 <MX_GPIO_Init+0xa4>)
 8101a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a4e:	4a1a      	ldr	r2, [pc, #104]	; (8101ab8 <MX_GPIO_Init+0xa4>)
 8101a50:	f043 0308 	orr.w	r3, r3, #8
 8101a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a58:	4b17      	ldr	r3, [pc, #92]	; (8101ab8 <MX_GPIO_Init+0xa4>)
 8101a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a5e:	f003 0308 	and.w	r3, r3, #8
 8101a62:	607b      	str	r3, [r7, #4]
 8101a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101a66:	4b14      	ldr	r3, [pc, #80]	; (8101ab8 <MX_GPIO_Init+0xa4>)
 8101a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a6c:	4a12      	ldr	r2, [pc, #72]	; (8101ab8 <MX_GPIO_Init+0xa4>)
 8101a6e:	f043 0302 	orr.w	r3, r3, #2
 8101a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a76:	4b10      	ldr	r3, [pc, #64]	; (8101ab8 <MX_GPIO_Init+0xa4>)
 8101a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a7c:	f003 0302 	and.w	r3, r3, #2
 8101a80:	603b      	str	r3, [r7, #0]
 8101a82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101a84:	2308      	movs	r3, #8
 8101a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101a88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8101a8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a8e:	2300      	movs	r3, #0
 8101a90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101a92:	f107 030c 	add.w	r3, r7, #12
 8101a96:	4619      	mov	r1, r3
 8101a98:	4808      	ldr	r0, [pc, #32]	; (8101abc <MX_GPIO_Init+0xa8>)
 8101a9a:	f000 fc6f 	bl	810237c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8101a9e:	2200      	movs	r2, #0
 8101aa0:	2100      	movs	r1, #0
 8101aa2:	2009      	movs	r0, #9
 8101aa4:	f000 fc21 	bl	81022ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8101aa8:	2009      	movs	r0, #9
 8101aaa:	f000 fc38 	bl	810231e <HAL_NVIC_EnableIRQ>

}
 8101aae:	bf00      	nop
 8101ab0:	3720      	adds	r7, #32
 8101ab2:	46bd      	mov	sp, r7
 8101ab4:	bd80      	pop	{r7, pc}
 8101ab6:	bf00      	nop
 8101ab8:	58024400 	.word	0x58024400
 8101abc:	58020000 	.word	0x58020000

08101ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8101ac0:	b580      	push	{r7, lr}
 8101ac2:	b09c      	sub	sp, #112	; 0x70
 8101ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8101ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101aca:	224c      	movs	r2, #76	; 0x4c
 8101acc:	2100      	movs	r1, #0
 8101ace:	4618      	mov	r0, r3
 8101ad0:	f005 f9d2 	bl	8106e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8101ad4:	1d3b      	adds	r3, r7, #4
 8101ad6:	2220      	movs	r2, #32
 8101ad8:	2100      	movs	r1, #0
 8101ada:	4618      	mov	r0, r3
 8101adc:	f005 f9cc 	bl	8106e78 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8101ae0:	2302      	movs	r3, #2
 8101ae2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8101ae4:	2301      	movs	r3, #1
 8101ae6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8101ae8:	2340      	movs	r3, #64	; 0x40
 8101aea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8101aec:	2300      	movs	r3, #0
 8101aee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8101af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101af4:	4618      	mov	r0, r3
 8101af6:	f001 fd5d 	bl	81035b4 <HAL_RCC_OscConfig>
 8101afa:	4603      	mov	r3, r0
 8101afc:	2b00      	cmp	r3, #0
 8101afe:	d001      	beq.n	8101b04 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8101b00:	f000 f82a 	bl	8101b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8101b04:	231b      	movs	r3, #27
 8101b06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8101b08:	2300      	movs	r3, #0
 8101b0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8101b0c:	2300      	movs	r3, #0
 8101b0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8101b10:	2300      	movs	r3, #0
 8101b12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8101b14:	2300      	movs	r3, #0
 8101b16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8101b18:	1d3b      	adds	r3, r7, #4
 8101b1a:	2100      	movs	r1, #0
 8101b1c:	4618      	mov	r0, r3
 8101b1e:	f002 f977 	bl	8103e10 <HAL_RCC_ClockConfig>
 8101b22:	4603      	mov	r3, r0
 8101b24:	2b00      	cmp	r3, #0
 8101b26:	d001      	beq.n	8101b2c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8101b28:	f000 f816 	bl	8101b58 <Error_Handler>
  }
}
 8101b2c:	bf00      	nop
 8101b2e:	3770      	adds	r7, #112	; 0x70
 8101b30:	46bd      	mov	sp, r7
 8101b32:	bd80      	pop	{r7, pc}

08101b34 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch){
 8101b34:	b580      	push	{r7, lr}
 8101b36:	b082      	sub	sp, #8
 8101b38:	af00      	add	r7, sp, #0
 8101b3a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101b3c:	1d39      	adds	r1, r7, #4
 8101b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101b42:	2201      	movs	r2, #1
 8101b44:	4803      	ldr	r0, [pc, #12]	; (8101b54 <__io_putchar+0x20>)
 8101b46:	f004 f8a9 	bl	8105c9c <HAL_UART_Transmit>
	return ch;
 8101b4a:	687b      	ldr	r3, [r7, #4]
}
 8101b4c:	4618      	mov	r0, r3
 8101b4e:	3708      	adds	r7, #8
 8101b50:	46bd      	mov	sp, r7
 8101b52:	bd80      	pop	{r7, pc}
 8101b54:	1000025c 	.word	0x1000025c

08101b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101b58:	b480      	push	{r7}
 8101b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101b5c:	b672      	cpsid	i
}
 8101b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101b60:	e7fe      	b.n	8101b60 <Error_Handler+0x8>
	...

08101b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101b64:	b480      	push	{r7}
 8101b66:	b083      	sub	sp, #12
 8101b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101b6a:	4b0a      	ldr	r3, [pc, #40]	; (8101b94 <HAL_MspInit+0x30>)
 8101b6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101b70:	4a08      	ldr	r2, [pc, #32]	; (8101b94 <HAL_MspInit+0x30>)
 8101b72:	f043 0302 	orr.w	r3, r3, #2
 8101b76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101b7a:	4b06      	ldr	r3, [pc, #24]	; (8101b94 <HAL_MspInit+0x30>)
 8101b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101b80:	f003 0302 	and.w	r3, r3, #2
 8101b84:	607b      	str	r3, [r7, #4]
 8101b86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101b88:	bf00      	nop
 8101b8a:	370c      	adds	r7, #12
 8101b8c:	46bd      	mov	sp, r7
 8101b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b92:	4770      	bx	lr
 8101b94:	58024400 	.word	0x58024400

08101b98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8101b98:	b580      	push	{r7, lr}
 8101b9a:	b0b8      	sub	sp, #224	; 0xe0
 8101b9c:	af00      	add	r7, sp, #0
 8101b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101ba0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101ba4:	2200      	movs	r2, #0
 8101ba6:	601a      	str	r2, [r3, #0]
 8101ba8:	605a      	str	r2, [r3, #4]
 8101baa:	609a      	str	r2, [r3, #8]
 8101bac:	60da      	str	r2, [r3, #12]
 8101bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101bb0:	f107 0310 	add.w	r3, r7, #16
 8101bb4:	22bc      	movs	r2, #188	; 0xbc
 8101bb6:	2100      	movs	r1, #0
 8101bb8:	4618      	mov	r0, r3
 8101bba:	f005 f95d 	bl	8106e78 <memset>
  if(hi2c->Instance==I2C1)
 8101bbe:	687b      	ldr	r3, [r7, #4]
 8101bc0:	681b      	ldr	r3, [r3, #0]
 8101bc2:	4a24      	ldr	r2, [pc, #144]	; (8101c54 <HAL_I2C_MspInit+0xbc>)
 8101bc4:	4293      	cmp	r3, r2
 8101bc6:	d141      	bne.n	8101c4c <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101bc8:	2308      	movs	r3, #8
 8101bca:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101bcc:	2300      	movs	r3, #0
 8101bce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101bd2:	f107 0310 	add.w	r3, r7, #16
 8101bd6:	4618      	mov	r0, r3
 8101bd8:	f002 fca8 	bl	810452c <HAL_RCCEx_PeriphCLKConfig>
 8101bdc:	4603      	mov	r3, r0
 8101bde:	2b00      	cmp	r3, #0
 8101be0:	d001      	beq.n	8101be6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8101be2:	f7ff ffb9 	bl	8101b58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101be6:	4b1c      	ldr	r3, [pc, #112]	; (8101c58 <HAL_I2C_MspInit+0xc0>)
 8101be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bec:	4a1a      	ldr	r2, [pc, #104]	; (8101c58 <HAL_I2C_MspInit+0xc0>)
 8101bee:	f043 0302 	orr.w	r3, r3, #2
 8101bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bf6:	4b18      	ldr	r3, [pc, #96]	; (8101c58 <HAL_I2C_MspInit+0xc0>)
 8101bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bfc:	f003 0302 	and.w	r3, r3, #2
 8101c00:	60fb      	str	r3, [r7, #12]
 8101c02:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8101c04:	23c0      	movs	r3, #192	; 0xc0
 8101c06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101c0a:	2312      	movs	r3, #18
 8101c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c10:	2300      	movs	r3, #0
 8101c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c16:	2300      	movs	r3, #0
 8101c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101c1c:	2304      	movs	r3, #4
 8101c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101c22:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101c26:	4619      	mov	r1, r3
 8101c28:	480c      	ldr	r0, [pc, #48]	; (8101c5c <HAL_I2C_MspInit+0xc4>)
 8101c2a:	f000 fba7 	bl	810237c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101c2e:	4b0a      	ldr	r3, [pc, #40]	; (8101c58 <HAL_I2C_MspInit+0xc0>)
 8101c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101c34:	4a08      	ldr	r2, [pc, #32]	; (8101c58 <HAL_I2C_MspInit+0xc0>)
 8101c36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101c3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101c3e:	4b06      	ldr	r3, [pc, #24]	; (8101c58 <HAL_I2C_MspInit+0xc0>)
 8101c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101c48:	60bb      	str	r3, [r7, #8]
 8101c4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8101c4c:	bf00      	nop
 8101c4e:	37e0      	adds	r7, #224	; 0xe0
 8101c50:	46bd      	mov	sp, r7
 8101c52:	bd80      	pop	{r7, pc}
 8101c54:	40005400 	.word	0x40005400
 8101c58:	58024400 	.word	0x58024400
 8101c5c:	58020400 	.word	0x58020400

08101c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101c60:	b580      	push	{r7, lr}
 8101c62:	b0b8      	sub	sp, #224	; 0xe0
 8101c64:	af00      	add	r7, sp, #0
 8101c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101c6c:	2200      	movs	r2, #0
 8101c6e:	601a      	str	r2, [r3, #0]
 8101c70:	605a      	str	r2, [r3, #4]
 8101c72:	609a      	str	r2, [r3, #8]
 8101c74:	60da      	str	r2, [r3, #12]
 8101c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101c78:	f107 0310 	add.w	r3, r7, #16
 8101c7c:	22bc      	movs	r2, #188	; 0xbc
 8101c7e:	2100      	movs	r1, #0
 8101c80:	4618      	mov	r0, r3
 8101c82:	f005 f8f9 	bl	8106e78 <memset>
  if(huart->Instance==USART3)
 8101c86:	687b      	ldr	r3, [r7, #4]
 8101c88:	681b      	ldr	r3, [r3, #0]
 8101c8a:	4a25      	ldr	r2, [pc, #148]	; (8101d20 <HAL_UART_MspInit+0xc0>)
 8101c8c:	4293      	cmp	r3, r2
 8101c8e:	d142      	bne.n	8101d16 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101c90:	2302      	movs	r3, #2
 8101c92:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101c94:	2300      	movs	r3, #0
 8101c96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101c9a:	f107 0310 	add.w	r3, r7, #16
 8101c9e:	4618      	mov	r0, r3
 8101ca0:	f002 fc44 	bl	810452c <HAL_RCCEx_PeriphCLKConfig>
 8101ca4:	4603      	mov	r3, r0
 8101ca6:	2b00      	cmp	r3, #0
 8101ca8:	d001      	beq.n	8101cae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101caa:	f7ff ff55 	bl	8101b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101cae:	4b1d      	ldr	r3, [pc, #116]	; (8101d24 <HAL_UART_MspInit+0xc4>)
 8101cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101cb4:	4a1b      	ldr	r2, [pc, #108]	; (8101d24 <HAL_UART_MspInit+0xc4>)
 8101cb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101cba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101cbe:	4b19      	ldr	r3, [pc, #100]	; (8101d24 <HAL_UART_MspInit+0xc4>)
 8101cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101cc8:	60fb      	str	r3, [r7, #12]
 8101cca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101ccc:	4b15      	ldr	r3, [pc, #84]	; (8101d24 <HAL_UART_MspInit+0xc4>)
 8101cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cd2:	4a14      	ldr	r2, [pc, #80]	; (8101d24 <HAL_UART_MspInit+0xc4>)
 8101cd4:	f043 0308 	orr.w	r3, r3, #8
 8101cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101cdc:	4b11      	ldr	r3, [pc, #68]	; (8101d24 <HAL_UART_MspInit+0xc4>)
 8101cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ce2:	f003 0308 	and.w	r3, r3, #8
 8101ce6:	60bb      	str	r3, [r7, #8]
 8101ce8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101cee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101cf2:	2302      	movs	r3, #2
 8101cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cf8:	2300      	movs	r3, #0
 8101cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101cfe:	2300      	movs	r3, #0
 8101d00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101d04:	2307      	movs	r3, #7
 8101d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101d0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101d0e:	4619      	mov	r1, r3
 8101d10:	4805      	ldr	r0, [pc, #20]	; (8101d28 <HAL_UART_MspInit+0xc8>)
 8101d12:	f000 fb33 	bl	810237c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101d16:	bf00      	nop
 8101d18:	37e0      	adds	r7, #224	; 0xe0
 8101d1a:	46bd      	mov	sp, r7
 8101d1c:	bd80      	pop	{r7, pc}
 8101d1e:	bf00      	nop
 8101d20:	40004800 	.word	0x40004800
 8101d24:	58024400 	.word	0x58024400
 8101d28:	58020c00 	.word	0x58020c00

08101d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101d2c:	b480      	push	{r7}
 8101d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101d30:	e7fe      	b.n	8101d30 <NMI_Handler+0x4>

08101d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101d32:	b480      	push	{r7}
 8101d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101d36:	e7fe      	b.n	8101d36 <HardFault_Handler+0x4>

08101d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101d38:	b480      	push	{r7}
 8101d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101d3c:	e7fe      	b.n	8101d3c <MemManage_Handler+0x4>

08101d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101d3e:	b480      	push	{r7}
 8101d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101d42:	e7fe      	b.n	8101d42 <BusFault_Handler+0x4>

08101d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101d44:	b480      	push	{r7}
 8101d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101d48:	e7fe      	b.n	8101d48 <UsageFault_Handler+0x4>

08101d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101d4a:	b480      	push	{r7}
 8101d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101d4e:	bf00      	nop
 8101d50:	46bd      	mov	sp, r7
 8101d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d56:	4770      	bx	lr

08101d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101d58:	b480      	push	{r7}
 8101d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101d5c:	bf00      	nop
 8101d5e:	46bd      	mov	sp, r7
 8101d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d64:	4770      	bx	lr

08101d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101d66:	b480      	push	{r7}
 8101d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101d6a:	bf00      	nop
 8101d6c:	46bd      	mov	sp, r7
 8101d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d72:	4770      	bx	lr

08101d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101d74:	b580      	push	{r7, lr}
 8101d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101d78:	f000 f98c 	bl	8102094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101d7c:	bf00      	nop
 8101d7e:	bd80      	pop	{r7, pc}

08101d80 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8101d80:	b580      	push	{r7, lr}
 8101d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8101d84:	2008      	movs	r0, #8
 8101d86:	f000 fca9 	bl	81026dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8101d8a:	bf00      	nop
 8101d8c:	bd80      	pop	{r7, pc}

08101d8e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101d8e:	b480      	push	{r7}
 8101d90:	af00      	add	r7, sp, #0
	return 1;
 8101d92:	2301      	movs	r3, #1
}
 8101d94:	4618      	mov	r0, r3
 8101d96:	46bd      	mov	sp, r7
 8101d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d9c:	4770      	bx	lr

08101d9e <_kill>:

int _kill(int pid, int sig)
{
 8101d9e:	b580      	push	{r7, lr}
 8101da0:	b082      	sub	sp, #8
 8101da2:	af00      	add	r7, sp, #0
 8101da4:	6078      	str	r0, [r7, #4]
 8101da6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101da8:	f005 f82e 	bl	8106e08 <__errno>
 8101dac:	4603      	mov	r3, r0
 8101dae:	2216      	movs	r2, #22
 8101db0:	601a      	str	r2, [r3, #0]
	return -1;
 8101db2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101db6:	4618      	mov	r0, r3
 8101db8:	3708      	adds	r7, #8
 8101dba:	46bd      	mov	sp, r7
 8101dbc:	bd80      	pop	{r7, pc}

08101dbe <_exit>:

void _exit (int status)
{
 8101dbe:	b580      	push	{r7, lr}
 8101dc0:	b082      	sub	sp, #8
 8101dc2:	af00      	add	r7, sp, #0
 8101dc4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101dc6:	f04f 31ff 	mov.w	r1, #4294967295
 8101dca:	6878      	ldr	r0, [r7, #4]
 8101dcc:	f7ff ffe7 	bl	8101d9e <_kill>
	while (1) {}		/* Make sure we hang here */
 8101dd0:	e7fe      	b.n	8101dd0 <_exit+0x12>

08101dd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101dd2:	b580      	push	{r7, lr}
 8101dd4:	b086      	sub	sp, #24
 8101dd6:	af00      	add	r7, sp, #0
 8101dd8:	60f8      	str	r0, [r7, #12]
 8101dda:	60b9      	str	r1, [r7, #8]
 8101ddc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101dde:	2300      	movs	r3, #0
 8101de0:	617b      	str	r3, [r7, #20]
 8101de2:	e00a      	b.n	8101dfa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101de4:	f3af 8000 	nop.w
 8101de8:	4601      	mov	r1, r0
 8101dea:	68bb      	ldr	r3, [r7, #8]
 8101dec:	1c5a      	adds	r2, r3, #1
 8101dee:	60ba      	str	r2, [r7, #8]
 8101df0:	b2ca      	uxtb	r2, r1
 8101df2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101df4:	697b      	ldr	r3, [r7, #20]
 8101df6:	3301      	adds	r3, #1
 8101df8:	617b      	str	r3, [r7, #20]
 8101dfa:	697a      	ldr	r2, [r7, #20]
 8101dfc:	687b      	ldr	r3, [r7, #4]
 8101dfe:	429a      	cmp	r2, r3
 8101e00:	dbf0      	blt.n	8101de4 <_read+0x12>
	}

return len;
 8101e02:	687b      	ldr	r3, [r7, #4]
}
 8101e04:	4618      	mov	r0, r3
 8101e06:	3718      	adds	r7, #24
 8101e08:	46bd      	mov	sp, r7
 8101e0a:	bd80      	pop	{r7, pc}

08101e0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101e0c:	b580      	push	{r7, lr}
 8101e0e:	b086      	sub	sp, #24
 8101e10:	af00      	add	r7, sp, #0
 8101e12:	60f8      	str	r0, [r7, #12]
 8101e14:	60b9      	str	r1, [r7, #8]
 8101e16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e18:	2300      	movs	r3, #0
 8101e1a:	617b      	str	r3, [r7, #20]
 8101e1c:	e009      	b.n	8101e32 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101e1e:	68bb      	ldr	r3, [r7, #8]
 8101e20:	1c5a      	adds	r2, r3, #1
 8101e22:	60ba      	str	r2, [r7, #8]
 8101e24:	781b      	ldrb	r3, [r3, #0]
 8101e26:	4618      	mov	r0, r3
 8101e28:	f7ff fe84 	bl	8101b34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e2c:	697b      	ldr	r3, [r7, #20]
 8101e2e:	3301      	adds	r3, #1
 8101e30:	617b      	str	r3, [r7, #20]
 8101e32:	697a      	ldr	r2, [r7, #20]
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	429a      	cmp	r2, r3
 8101e38:	dbf1      	blt.n	8101e1e <_write+0x12>
	}
	return len;
 8101e3a:	687b      	ldr	r3, [r7, #4]
}
 8101e3c:	4618      	mov	r0, r3
 8101e3e:	3718      	adds	r7, #24
 8101e40:	46bd      	mov	sp, r7
 8101e42:	bd80      	pop	{r7, pc}

08101e44 <_close>:

int _close(int file)
{
 8101e44:	b480      	push	{r7}
 8101e46:	b083      	sub	sp, #12
 8101e48:	af00      	add	r7, sp, #0
 8101e4a:	6078      	str	r0, [r7, #4]
	return -1;
 8101e4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101e50:	4618      	mov	r0, r3
 8101e52:	370c      	adds	r7, #12
 8101e54:	46bd      	mov	sp, r7
 8101e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e5a:	4770      	bx	lr

08101e5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101e5c:	b480      	push	{r7}
 8101e5e:	b083      	sub	sp, #12
 8101e60:	af00      	add	r7, sp, #0
 8101e62:	6078      	str	r0, [r7, #4]
 8101e64:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101e66:	683b      	ldr	r3, [r7, #0]
 8101e68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101e6c:	605a      	str	r2, [r3, #4]
	return 0;
 8101e6e:	2300      	movs	r3, #0
}
 8101e70:	4618      	mov	r0, r3
 8101e72:	370c      	adds	r7, #12
 8101e74:	46bd      	mov	sp, r7
 8101e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e7a:	4770      	bx	lr

08101e7c <_isatty>:

int _isatty(int file)
{
 8101e7c:	b480      	push	{r7}
 8101e7e:	b083      	sub	sp, #12
 8101e80:	af00      	add	r7, sp, #0
 8101e82:	6078      	str	r0, [r7, #4]
	return 1;
 8101e84:	2301      	movs	r3, #1
}
 8101e86:	4618      	mov	r0, r3
 8101e88:	370c      	adds	r7, #12
 8101e8a:	46bd      	mov	sp, r7
 8101e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e90:	4770      	bx	lr

08101e92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101e92:	b480      	push	{r7}
 8101e94:	b085      	sub	sp, #20
 8101e96:	af00      	add	r7, sp, #0
 8101e98:	60f8      	str	r0, [r7, #12]
 8101e9a:	60b9      	str	r1, [r7, #8]
 8101e9c:	607a      	str	r2, [r7, #4]
	return 0;
 8101e9e:	2300      	movs	r3, #0
}
 8101ea0:	4618      	mov	r0, r3
 8101ea2:	3714      	adds	r7, #20
 8101ea4:	46bd      	mov	sp, r7
 8101ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eaa:	4770      	bx	lr

08101eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101eac:	b580      	push	{r7, lr}
 8101eae:	b086      	sub	sp, #24
 8101eb0:	af00      	add	r7, sp, #0
 8101eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101eb4:	4a14      	ldr	r2, [pc, #80]	; (8101f08 <_sbrk+0x5c>)
 8101eb6:	4b15      	ldr	r3, [pc, #84]	; (8101f0c <_sbrk+0x60>)
 8101eb8:	1ad3      	subs	r3, r2, r3
 8101eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101ebc:	697b      	ldr	r3, [r7, #20]
 8101ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101ec0:	4b13      	ldr	r3, [pc, #76]	; (8101f10 <_sbrk+0x64>)
 8101ec2:	681b      	ldr	r3, [r3, #0]
 8101ec4:	2b00      	cmp	r3, #0
 8101ec6:	d102      	bne.n	8101ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101ec8:	4b11      	ldr	r3, [pc, #68]	; (8101f10 <_sbrk+0x64>)
 8101eca:	4a12      	ldr	r2, [pc, #72]	; (8101f14 <_sbrk+0x68>)
 8101ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101ece:	4b10      	ldr	r3, [pc, #64]	; (8101f10 <_sbrk+0x64>)
 8101ed0:	681a      	ldr	r2, [r3, #0]
 8101ed2:	687b      	ldr	r3, [r7, #4]
 8101ed4:	4413      	add	r3, r2
 8101ed6:	693a      	ldr	r2, [r7, #16]
 8101ed8:	429a      	cmp	r2, r3
 8101eda:	d207      	bcs.n	8101eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101edc:	f004 ff94 	bl	8106e08 <__errno>
 8101ee0:	4603      	mov	r3, r0
 8101ee2:	220c      	movs	r2, #12
 8101ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8101eea:	e009      	b.n	8101f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101eec:	4b08      	ldr	r3, [pc, #32]	; (8101f10 <_sbrk+0x64>)
 8101eee:	681b      	ldr	r3, [r3, #0]
 8101ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101ef2:	4b07      	ldr	r3, [pc, #28]	; (8101f10 <_sbrk+0x64>)
 8101ef4:	681a      	ldr	r2, [r3, #0]
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	4413      	add	r3, r2
 8101efa:	4a05      	ldr	r2, [pc, #20]	; (8101f10 <_sbrk+0x64>)
 8101efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101efe:	68fb      	ldr	r3, [r7, #12]
}
 8101f00:	4618      	mov	r0, r3
 8101f02:	3718      	adds	r7, #24
 8101f04:	46bd      	mov	sp, r7
 8101f06:	bd80      	pop	{r7, pc}
 8101f08:	10048000 	.word	0x10048000
 8101f0c:	00000400 	.word	0x00000400
 8101f10:	100002ec 	.word	0x100002ec
 8101f14:	10000308 	.word	0x10000308

08101f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101f50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101f1c:	f7ff f8f4 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101f20:	480c      	ldr	r0, [pc, #48]	; (8101f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101f22:	490d      	ldr	r1, [pc, #52]	; (8101f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101f24:	4a0d      	ldr	r2, [pc, #52]	; (8101f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101f28:	e002      	b.n	8101f30 <LoopCopyDataInit>

08101f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101f2e:	3304      	adds	r3, #4

08101f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101f34:	d3f9      	bcc.n	8101f2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101f36:	4a0a      	ldr	r2, [pc, #40]	; (8101f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101f38:	4c0a      	ldr	r4, [pc, #40]	; (8101f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101f3c:	e001      	b.n	8101f42 <LoopFillZerobss>

08101f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101f40:	3204      	adds	r2, #4

08101f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101f44:	d3fb      	bcc.n	8101f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101f46:	f004 ff65 	bl	8106e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101f4a:	f7ff fc41 	bl	81017d0 <main>
  bx  lr
 8101f4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101f50:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101f54:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101f58:	100001f0 	.word	0x100001f0
  ldr r2, =_sidata
 8101f5c:	0810c09c 	.word	0x0810c09c
  ldr r2, =_sbss
 8101f60:	100001f0 	.word	0x100001f0
  ldr r4, =_ebss
 8101f64:	10000304 	.word	0x10000304

08101f68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101f68:	e7fe      	b.n	8101f68 <ADC3_IRQHandler>
	...

08101f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101f6c:	b580      	push	{r7, lr}
 8101f6e:	b082      	sub	sp, #8
 8101f70:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101f72:	4b28      	ldr	r3, [pc, #160]	; (8102014 <HAL_Init+0xa8>)
 8101f74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101f78:	4a26      	ldr	r2, [pc, #152]	; (8102014 <HAL_Init+0xa8>)
 8101f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101f7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101f82:	4b24      	ldr	r3, [pc, #144]	; (8102014 <HAL_Init+0xa8>)
 8101f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101f8c:	603b      	str	r3, [r7, #0]
 8101f8e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101f90:	4b21      	ldr	r3, [pc, #132]	; (8102018 <HAL_Init+0xac>)
 8101f92:	681b      	ldr	r3, [r3, #0]
 8101f94:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101f98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101f9c:	4a1e      	ldr	r2, [pc, #120]	; (8102018 <HAL_Init+0xac>)
 8101f9e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101fa2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101fa4:	4b1c      	ldr	r3, [pc, #112]	; (8102018 <HAL_Init+0xac>)
 8101fa6:	681b      	ldr	r3, [r3, #0]
 8101fa8:	4a1b      	ldr	r2, [pc, #108]	; (8102018 <HAL_Init+0xac>)
 8101faa:	f043 0301 	orr.w	r3, r3, #1
 8101fae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101fb0:	2003      	movs	r0, #3
 8101fb2:	f000 f98f 	bl	81022d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101fb6:	f002 f8e1 	bl	810417c <HAL_RCC_GetSysClockFreq>
 8101fba:	4602      	mov	r2, r0
 8101fbc:	4b15      	ldr	r3, [pc, #84]	; (8102014 <HAL_Init+0xa8>)
 8101fbe:	699b      	ldr	r3, [r3, #24]
 8101fc0:	0a1b      	lsrs	r3, r3, #8
 8101fc2:	f003 030f 	and.w	r3, r3, #15
 8101fc6:	4915      	ldr	r1, [pc, #84]	; (810201c <HAL_Init+0xb0>)
 8101fc8:	5ccb      	ldrb	r3, [r1, r3]
 8101fca:	f003 031f 	and.w	r3, r3, #31
 8101fce:	fa22 f303 	lsr.w	r3, r2, r3
 8101fd2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101fd4:	4b0f      	ldr	r3, [pc, #60]	; (8102014 <HAL_Init+0xa8>)
 8101fd6:	699b      	ldr	r3, [r3, #24]
 8101fd8:	f003 030f 	and.w	r3, r3, #15
 8101fdc:	4a0f      	ldr	r2, [pc, #60]	; (810201c <HAL_Init+0xb0>)
 8101fde:	5cd3      	ldrb	r3, [r2, r3]
 8101fe0:	f003 031f 	and.w	r3, r3, #31
 8101fe4:	687a      	ldr	r2, [r7, #4]
 8101fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8101fea:	4a0d      	ldr	r2, [pc, #52]	; (8102020 <HAL_Init+0xb4>)
 8101fec:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101fee:	4b0c      	ldr	r3, [pc, #48]	; (8102020 <HAL_Init+0xb4>)
 8101ff0:	681b      	ldr	r3, [r3, #0]
 8101ff2:	4a0c      	ldr	r2, [pc, #48]	; (8102024 <HAL_Init+0xb8>)
 8101ff4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101ff6:	2000      	movs	r0, #0
 8101ff8:	f000 f816 	bl	8102028 <HAL_InitTick>
 8101ffc:	4603      	mov	r3, r0
 8101ffe:	2b00      	cmp	r3, #0
 8102000:	d001      	beq.n	8102006 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102002:	2301      	movs	r3, #1
 8102004:	e002      	b.n	810200c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102006:	f7ff fdad 	bl	8101b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810200a:	2300      	movs	r3, #0
}
 810200c:	4618      	mov	r0, r3
 810200e:	3708      	adds	r7, #8
 8102010:	46bd      	mov	sp, r7
 8102012:	bd80      	pop	{r7, pc}
 8102014:	58024400 	.word	0x58024400
 8102018:	40024400 	.word	0x40024400
 810201c:	0810bba8 	.word	0x0810bba8
 8102020:	10000004 	.word	0x10000004
 8102024:	10000000 	.word	0x10000000

08102028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102028:	b580      	push	{r7, lr}
 810202a:	b082      	sub	sp, #8
 810202c:	af00      	add	r7, sp, #0
 810202e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102030:	4b15      	ldr	r3, [pc, #84]	; (8102088 <HAL_InitTick+0x60>)
 8102032:	781b      	ldrb	r3, [r3, #0]
 8102034:	2b00      	cmp	r3, #0
 8102036:	d101      	bne.n	810203c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102038:	2301      	movs	r3, #1
 810203a:	e021      	b.n	8102080 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810203c:	4b13      	ldr	r3, [pc, #76]	; (810208c <HAL_InitTick+0x64>)
 810203e:	681a      	ldr	r2, [r3, #0]
 8102040:	4b11      	ldr	r3, [pc, #68]	; (8102088 <HAL_InitTick+0x60>)
 8102042:	781b      	ldrb	r3, [r3, #0]
 8102044:	4619      	mov	r1, r3
 8102046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810204a:	fbb3 f3f1 	udiv	r3, r3, r1
 810204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8102052:	4618      	mov	r0, r3
 8102054:	f000 f971 	bl	810233a <HAL_SYSTICK_Config>
 8102058:	4603      	mov	r3, r0
 810205a:	2b00      	cmp	r3, #0
 810205c:	d001      	beq.n	8102062 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810205e:	2301      	movs	r3, #1
 8102060:	e00e      	b.n	8102080 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102062:	687b      	ldr	r3, [r7, #4]
 8102064:	2b0f      	cmp	r3, #15
 8102066:	d80a      	bhi.n	810207e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102068:	2200      	movs	r2, #0
 810206a:	6879      	ldr	r1, [r7, #4]
 810206c:	f04f 30ff 	mov.w	r0, #4294967295
 8102070:	f000 f93b 	bl	81022ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102074:	4a06      	ldr	r2, [pc, #24]	; (8102090 <HAL_InitTick+0x68>)
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810207a:	2300      	movs	r3, #0
 810207c:	e000      	b.n	8102080 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810207e:	2301      	movs	r3, #1
}
 8102080:	4618      	mov	r0, r3
 8102082:	3708      	adds	r7, #8
 8102084:	46bd      	mov	sp, r7
 8102086:	bd80      	pop	{r7, pc}
 8102088:	10000018 	.word	0x10000018
 810208c:	10000000 	.word	0x10000000
 8102090:	10000014 	.word	0x10000014

08102094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102094:	b480      	push	{r7}
 8102096:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102098:	4b06      	ldr	r3, [pc, #24]	; (81020b4 <HAL_IncTick+0x20>)
 810209a:	781b      	ldrb	r3, [r3, #0]
 810209c:	461a      	mov	r2, r3
 810209e:	4b06      	ldr	r3, [pc, #24]	; (81020b8 <HAL_IncTick+0x24>)
 81020a0:	681b      	ldr	r3, [r3, #0]
 81020a2:	4413      	add	r3, r2
 81020a4:	4a04      	ldr	r2, [pc, #16]	; (81020b8 <HAL_IncTick+0x24>)
 81020a6:	6013      	str	r3, [r2, #0]
}
 81020a8:	bf00      	nop
 81020aa:	46bd      	mov	sp, r7
 81020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020b0:	4770      	bx	lr
 81020b2:	bf00      	nop
 81020b4:	10000018 	.word	0x10000018
 81020b8:	100002f0 	.word	0x100002f0

081020bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81020bc:	b480      	push	{r7}
 81020be:	af00      	add	r7, sp, #0
  return uwTick;
 81020c0:	4b03      	ldr	r3, [pc, #12]	; (81020d0 <HAL_GetTick+0x14>)
 81020c2:	681b      	ldr	r3, [r3, #0]
}
 81020c4:	4618      	mov	r0, r3
 81020c6:	46bd      	mov	sp, r7
 81020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020cc:	4770      	bx	lr
 81020ce:	bf00      	nop
 81020d0:	100002f0 	.word	0x100002f0

081020d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81020d4:	b580      	push	{r7, lr}
 81020d6:	b084      	sub	sp, #16
 81020d8:	af00      	add	r7, sp, #0
 81020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81020dc:	f7ff ffee 	bl	81020bc <HAL_GetTick>
 81020e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81020e2:	687b      	ldr	r3, [r7, #4]
 81020e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81020e6:	68fb      	ldr	r3, [r7, #12]
 81020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81020ec:	d005      	beq.n	81020fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81020ee:	4b0a      	ldr	r3, [pc, #40]	; (8102118 <HAL_Delay+0x44>)
 81020f0:	781b      	ldrb	r3, [r3, #0]
 81020f2:	461a      	mov	r2, r3
 81020f4:	68fb      	ldr	r3, [r7, #12]
 81020f6:	4413      	add	r3, r2
 81020f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81020fa:	bf00      	nop
 81020fc:	f7ff ffde 	bl	81020bc <HAL_GetTick>
 8102100:	4602      	mov	r2, r0
 8102102:	68bb      	ldr	r3, [r7, #8]
 8102104:	1ad3      	subs	r3, r2, r3
 8102106:	68fa      	ldr	r2, [r7, #12]
 8102108:	429a      	cmp	r2, r3
 810210a:	d8f7      	bhi.n	81020fc <HAL_Delay+0x28>
  {
  }
}
 810210c:	bf00      	nop
 810210e:	bf00      	nop
 8102110:	3710      	adds	r7, #16
 8102112:	46bd      	mov	sp, r7
 8102114:	bd80      	pop	{r7, pc}
 8102116:	bf00      	nop
 8102118:	10000018 	.word	0x10000018

0810211c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 810211c:	b480      	push	{r7}
 810211e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102120:	4b03      	ldr	r3, [pc, #12]	; (8102130 <HAL_GetREVID+0x14>)
 8102122:	681b      	ldr	r3, [r3, #0]
 8102124:	0c1b      	lsrs	r3, r3, #16
}
 8102126:	4618      	mov	r0, r3
 8102128:	46bd      	mov	sp, r7
 810212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810212e:	4770      	bx	lr
 8102130:	5c001000 	.word	0x5c001000

08102134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102134:	b480      	push	{r7}
 8102136:	b085      	sub	sp, #20
 8102138:	af00      	add	r7, sp, #0
 810213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810213c:	687b      	ldr	r3, [r7, #4]
 810213e:	f003 0307 	and.w	r3, r3, #7
 8102142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102144:	4b0c      	ldr	r3, [pc, #48]	; (8102178 <__NVIC_SetPriorityGrouping+0x44>)
 8102146:	68db      	ldr	r3, [r3, #12]
 8102148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810214a:	68ba      	ldr	r2, [r7, #8]
 810214c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102150:	4013      	ands	r3, r2
 8102152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102154:	68fb      	ldr	r3, [r7, #12]
 8102156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102158:	68bb      	ldr	r3, [r7, #8]
 810215a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810215c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102166:	4a04      	ldr	r2, [pc, #16]	; (8102178 <__NVIC_SetPriorityGrouping+0x44>)
 8102168:	68bb      	ldr	r3, [r7, #8]
 810216a:	60d3      	str	r3, [r2, #12]
}
 810216c:	bf00      	nop
 810216e:	3714      	adds	r7, #20
 8102170:	46bd      	mov	sp, r7
 8102172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102176:	4770      	bx	lr
 8102178:	e000ed00 	.word	0xe000ed00

0810217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810217c:	b480      	push	{r7}
 810217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102180:	4b04      	ldr	r3, [pc, #16]	; (8102194 <__NVIC_GetPriorityGrouping+0x18>)
 8102182:	68db      	ldr	r3, [r3, #12]
 8102184:	0a1b      	lsrs	r3, r3, #8
 8102186:	f003 0307 	and.w	r3, r3, #7
}
 810218a:	4618      	mov	r0, r3
 810218c:	46bd      	mov	sp, r7
 810218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102192:	4770      	bx	lr
 8102194:	e000ed00 	.word	0xe000ed00

08102198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102198:	b480      	push	{r7}
 810219a:	b083      	sub	sp, #12
 810219c:	af00      	add	r7, sp, #0
 810219e:	4603      	mov	r3, r0
 81021a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81021a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81021a6:	2b00      	cmp	r3, #0
 81021a8:	db0b      	blt.n	81021c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81021aa:	88fb      	ldrh	r3, [r7, #6]
 81021ac:	f003 021f 	and.w	r2, r3, #31
 81021b0:	4907      	ldr	r1, [pc, #28]	; (81021d0 <__NVIC_EnableIRQ+0x38>)
 81021b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81021b6:	095b      	lsrs	r3, r3, #5
 81021b8:	2001      	movs	r0, #1
 81021ba:	fa00 f202 	lsl.w	r2, r0, r2
 81021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81021c2:	bf00      	nop
 81021c4:	370c      	adds	r7, #12
 81021c6:	46bd      	mov	sp, r7
 81021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021cc:	4770      	bx	lr
 81021ce:	bf00      	nop
 81021d0:	e000e100 	.word	0xe000e100

081021d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81021d4:	b480      	push	{r7}
 81021d6:	b083      	sub	sp, #12
 81021d8:	af00      	add	r7, sp, #0
 81021da:	4603      	mov	r3, r0
 81021dc:	6039      	str	r1, [r7, #0]
 81021de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81021e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81021e4:	2b00      	cmp	r3, #0
 81021e6:	db0a      	blt.n	81021fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81021e8:	683b      	ldr	r3, [r7, #0]
 81021ea:	b2da      	uxtb	r2, r3
 81021ec:	490c      	ldr	r1, [pc, #48]	; (8102220 <__NVIC_SetPriority+0x4c>)
 81021ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81021f2:	0112      	lsls	r2, r2, #4
 81021f4:	b2d2      	uxtb	r2, r2
 81021f6:	440b      	add	r3, r1
 81021f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81021fc:	e00a      	b.n	8102214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81021fe:	683b      	ldr	r3, [r7, #0]
 8102200:	b2da      	uxtb	r2, r3
 8102202:	4908      	ldr	r1, [pc, #32]	; (8102224 <__NVIC_SetPriority+0x50>)
 8102204:	88fb      	ldrh	r3, [r7, #6]
 8102206:	f003 030f 	and.w	r3, r3, #15
 810220a:	3b04      	subs	r3, #4
 810220c:	0112      	lsls	r2, r2, #4
 810220e:	b2d2      	uxtb	r2, r2
 8102210:	440b      	add	r3, r1
 8102212:	761a      	strb	r2, [r3, #24]
}
 8102214:	bf00      	nop
 8102216:	370c      	adds	r7, #12
 8102218:	46bd      	mov	sp, r7
 810221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810221e:	4770      	bx	lr
 8102220:	e000e100 	.word	0xe000e100
 8102224:	e000ed00 	.word	0xe000ed00

08102228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102228:	b480      	push	{r7}
 810222a:	b089      	sub	sp, #36	; 0x24
 810222c:	af00      	add	r7, sp, #0
 810222e:	60f8      	str	r0, [r7, #12]
 8102230:	60b9      	str	r1, [r7, #8]
 8102232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102234:	68fb      	ldr	r3, [r7, #12]
 8102236:	f003 0307 	and.w	r3, r3, #7
 810223a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810223c:	69fb      	ldr	r3, [r7, #28]
 810223e:	f1c3 0307 	rsb	r3, r3, #7
 8102242:	2b04      	cmp	r3, #4
 8102244:	bf28      	it	cs
 8102246:	2304      	movcs	r3, #4
 8102248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810224a:	69fb      	ldr	r3, [r7, #28]
 810224c:	3304      	adds	r3, #4
 810224e:	2b06      	cmp	r3, #6
 8102250:	d902      	bls.n	8102258 <NVIC_EncodePriority+0x30>
 8102252:	69fb      	ldr	r3, [r7, #28]
 8102254:	3b03      	subs	r3, #3
 8102256:	e000      	b.n	810225a <NVIC_EncodePriority+0x32>
 8102258:	2300      	movs	r3, #0
 810225a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810225c:	f04f 32ff 	mov.w	r2, #4294967295
 8102260:	69bb      	ldr	r3, [r7, #24]
 8102262:	fa02 f303 	lsl.w	r3, r2, r3
 8102266:	43da      	mvns	r2, r3
 8102268:	68bb      	ldr	r3, [r7, #8]
 810226a:	401a      	ands	r2, r3
 810226c:	697b      	ldr	r3, [r7, #20]
 810226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102270:	f04f 31ff 	mov.w	r1, #4294967295
 8102274:	697b      	ldr	r3, [r7, #20]
 8102276:	fa01 f303 	lsl.w	r3, r1, r3
 810227a:	43d9      	mvns	r1, r3
 810227c:	687b      	ldr	r3, [r7, #4]
 810227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102280:	4313      	orrs	r3, r2
         );
}
 8102282:	4618      	mov	r0, r3
 8102284:	3724      	adds	r7, #36	; 0x24
 8102286:	46bd      	mov	sp, r7
 8102288:	f85d 7b04 	ldr.w	r7, [sp], #4
 810228c:	4770      	bx	lr
	...

08102290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102290:	b580      	push	{r7, lr}
 8102292:	b082      	sub	sp, #8
 8102294:	af00      	add	r7, sp, #0
 8102296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102298:	687b      	ldr	r3, [r7, #4]
 810229a:	3b01      	subs	r3, #1
 810229c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81022a0:	d301      	bcc.n	81022a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81022a2:	2301      	movs	r3, #1
 81022a4:	e00f      	b.n	81022c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81022a6:	4a0a      	ldr	r2, [pc, #40]	; (81022d0 <SysTick_Config+0x40>)
 81022a8:	687b      	ldr	r3, [r7, #4]
 81022aa:	3b01      	subs	r3, #1
 81022ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81022ae:	210f      	movs	r1, #15
 81022b0:	f04f 30ff 	mov.w	r0, #4294967295
 81022b4:	f7ff ff8e 	bl	81021d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81022b8:	4b05      	ldr	r3, [pc, #20]	; (81022d0 <SysTick_Config+0x40>)
 81022ba:	2200      	movs	r2, #0
 81022bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81022be:	4b04      	ldr	r3, [pc, #16]	; (81022d0 <SysTick_Config+0x40>)
 81022c0:	2207      	movs	r2, #7
 81022c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81022c4:	2300      	movs	r3, #0
}
 81022c6:	4618      	mov	r0, r3
 81022c8:	3708      	adds	r7, #8
 81022ca:	46bd      	mov	sp, r7
 81022cc:	bd80      	pop	{r7, pc}
 81022ce:	bf00      	nop
 81022d0:	e000e010 	.word	0xe000e010

081022d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81022d4:	b580      	push	{r7, lr}
 81022d6:	b082      	sub	sp, #8
 81022d8:	af00      	add	r7, sp, #0
 81022da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81022dc:	6878      	ldr	r0, [r7, #4]
 81022de:	f7ff ff29 	bl	8102134 <__NVIC_SetPriorityGrouping>
}
 81022e2:	bf00      	nop
 81022e4:	3708      	adds	r7, #8
 81022e6:	46bd      	mov	sp, r7
 81022e8:	bd80      	pop	{r7, pc}

081022ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81022ea:	b580      	push	{r7, lr}
 81022ec:	b086      	sub	sp, #24
 81022ee:	af00      	add	r7, sp, #0
 81022f0:	4603      	mov	r3, r0
 81022f2:	60b9      	str	r1, [r7, #8]
 81022f4:	607a      	str	r2, [r7, #4]
 81022f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81022f8:	f7ff ff40 	bl	810217c <__NVIC_GetPriorityGrouping>
 81022fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81022fe:	687a      	ldr	r2, [r7, #4]
 8102300:	68b9      	ldr	r1, [r7, #8]
 8102302:	6978      	ldr	r0, [r7, #20]
 8102304:	f7ff ff90 	bl	8102228 <NVIC_EncodePriority>
 8102308:	4602      	mov	r2, r0
 810230a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810230e:	4611      	mov	r1, r2
 8102310:	4618      	mov	r0, r3
 8102312:	f7ff ff5f 	bl	81021d4 <__NVIC_SetPriority>
}
 8102316:	bf00      	nop
 8102318:	3718      	adds	r7, #24
 810231a:	46bd      	mov	sp, r7
 810231c:	bd80      	pop	{r7, pc}

0810231e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810231e:	b580      	push	{r7, lr}
 8102320:	b082      	sub	sp, #8
 8102322:	af00      	add	r7, sp, #0
 8102324:	4603      	mov	r3, r0
 8102326:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810232c:	4618      	mov	r0, r3
 810232e:	f7ff ff33 	bl	8102198 <__NVIC_EnableIRQ>
}
 8102332:	bf00      	nop
 8102334:	3708      	adds	r7, #8
 8102336:	46bd      	mov	sp, r7
 8102338:	bd80      	pop	{r7, pc}

0810233a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810233a:	b580      	push	{r7, lr}
 810233c:	b082      	sub	sp, #8
 810233e:	af00      	add	r7, sp, #0
 8102340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8102342:	6878      	ldr	r0, [r7, #4]
 8102344:	f7ff ffa4 	bl	8102290 <SysTick_Config>
 8102348:	4603      	mov	r3, r0
}
 810234a:	4618      	mov	r0, r3
 810234c:	3708      	adds	r7, #8
 810234e:	46bd      	mov	sp, r7
 8102350:	bd80      	pop	{r7, pc}
	...

08102354 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102354:	b480      	push	{r7}
 8102356:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102358:	4b07      	ldr	r3, [pc, #28]	; (8102378 <HAL_GetCurrentCPUID+0x24>)
 810235a:	681b      	ldr	r3, [r3, #0]
 810235c:	091b      	lsrs	r3, r3, #4
 810235e:	f003 030f 	and.w	r3, r3, #15
 8102362:	2b07      	cmp	r3, #7
 8102364:	d101      	bne.n	810236a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102366:	2303      	movs	r3, #3
 8102368:	e000      	b.n	810236c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810236a:	2301      	movs	r3, #1
  }
}
 810236c:	4618      	mov	r0, r3
 810236e:	46bd      	mov	sp, r7
 8102370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102374:	4770      	bx	lr
 8102376:	bf00      	nop
 8102378:	e000ed00 	.word	0xe000ed00

0810237c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810237c:	b480      	push	{r7}
 810237e:	b089      	sub	sp, #36	; 0x24
 8102380:	af00      	add	r7, sp, #0
 8102382:	6078      	str	r0, [r7, #4]
 8102384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102386:	2300      	movs	r3, #0
 8102388:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810238a:	4b89      	ldr	r3, [pc, #548]	; (81025b0 <HAL_GPIO_Init+0x234>)
 810238c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810238e:	e194      	b.n	81026ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102390:	683b      	ldr	r3, [r7, #0]
 8102392:	681a      	ldr	r2, [r3, #0]
 8102394:	2101      	movs	r1, #1
 8102396:	69fb      	ldr	r3, [r7, #28]
 8102398:	fa01 f303 	lsl.w	r3, r1, r3
 810239c:	4013      	ands	r3, r2
 810239e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81023a0:	693b      	ldr	r3, [r7, #16]
 81023a2:	2b00      	cmp	r3, #0
 81023a4:	f000 8186 	beq.w	81026b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81023a8:	683b      	ldr	r3, [r7, #0]
 81023aa:	685b      	ldr	r3, [r3, #4]
 81023ac:	f003 0303 	and.w	r3, r3, #3
 81023b0:	2b01      	cmp	r3, #1
 81023b2:	d005      	beq.n	81023c0 <HAL_GPIO_Init+0x44>
 81023b4:	683b      	ldr	r3, [r7, #0]
 81023b6:	685b      	ldr	r3, [r3, #4]
 81023b8:	f003 0303 	and.w	r3, r3, #3
 81023bc:	2b02      	cmp	r3, #2
 81023be:	d130      	bne.n	8102422 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	689b      	ldr	r3, [r3, #8]
 81023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81023c6:	69fb      	ldr	r3, [r7, #28]
 81023c8:	005b      	lsls	r3, r3, #1
 81023ca:	2203      	movs	r2, #3
 81023cc:	fa02 f303 	lsl.w	r3, r2, r3
 81023d0:	43db      	mvns	r3, r3
 81023d2:	69ba      	ldr	r2, [r7, #24]
 81023d4:	4013      	ands	r3, r2
 81023d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81023d8:	683b      	ldr	r3, [r7, #0]
 81023da:	68da      	ldr	r2, [r3, #12]
 81023dc:	69fb      	ldr	r3, [r7, #28]
 81023de:	005b      	lsls	r3, r3, #1
 81023e0:	fa02 f303 	lsl.w	r3, r2, r3
 81023e4:	69ba      	ldr	r2, [r7, #24]
 81023e6:	4313      	orrs	r3, r2
 81023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81023ea:	687b      	ldr	r3, [r7, #4]
 81023ec:	69ba      	ldr	r2, [r7, #24]
 81023ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81023f0:	687b      	ldr	r3, [r7, #4]
 81023f2:	685b      	ldr	r3, [r3, #4]
 81023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81023f6:	2201      	movs	r2, #1
 81023f8:	69fb      	ldr	r3, [r7, #28]
 81023fa:	fa02 f303 	lsl.w	r3, r2, r3
 81023fe:	43db      	mvns	r3, r3
 8102400:	69ba      	ldr	r2, [r7, #24]
 8102402:	4013      	ands	r3, r2
 8102404:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102406:	683b      	ldr	r3, [r7, #0]
 8102408:	685b      	ldr	r3, [r3, #4]
 810240a:	091b      	lsrs	r3, r3, #4
 810240c:	f003 0201 	and.w	r2, r3, #1
 8102410:	69fb      	ldr	r3, [r7, #28]
 8102412:	fa02 f303 	lsl.w	r3, r2, r3
 8102416:	69ba      	ldr	r2, [r7, #24]
 8102418:	4313      	orrs	r3, r2
 810241a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	69ba      	ldr	r2, [r7, #24]
 8102420:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102422:	683b      	ldr	r3, [r7, #0]
 8102424:	685b      	ldr	r3, [r3, #4]
 8102426:	f003 0303 	and.w	r3, r3, #3
 810242a:	2b03      	cmp	r3, #3
 810242c:	d017      	beq.n	810245e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	68db      	ldr	r3, [r3, #12]
 8102432:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102434:	69fb      	ldr	r3, [r7, #28]
 8102436:	005b      	lsls	r3, r3, #1
 8102438:	2203      	movs	r2, #3
 810243a:	fa02 f303 	lsl.w	r3, r2, r3
 810243e:	43db      	mvns	r3, r3
 8102440:	69ba      	ldr	r2, [r7, #24]
 8102442:	4013      	ands	r3, r2
 8102444:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102446:	683b      	ldr	r3, [r7, #0]
 8102448:	689a      	ldr	r2, [r3, #8]
 810244a:	69fb      	ldr	r3, [r7, #28]
 810244c:	005b      	lsls	r3, r3, #1
 810244e:	fa02 f303 	lsl.w	r3, r2, r3
 8102452:	69ba      	ldr	r2, [r7, #24]
 8102454:	4313      	orrs	r3, r2
 8102456:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102458:	687b      	ldr	r3, [r7, #4]
 810245a:	69ba      	ldr	r2, [r7, #24]
 810245c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810245e:	683b      	ldr	r3, [r7, #0]
 8102460:	685b      	ldr	r3, [r3, #4]
 8102462:	f003 0303 	and.w	r3, r3, #3
 8102466:	2b02      	cmp	r3, #2
 8102468:	d123      	bne.n	81024b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810246a:	69fb      	ldr	r3, [r7, #28]
 810246c:	08da      	lsrs	r2, r3, #3
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	3208      	adds	r2, #8
 8102472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102478:	69fb      	ldr	r3, [r7, #28]
 810247a:	f003 0307 	and.w	r3, r3, #7
 810247e:	009b      	lsls	r3, r3, #2
 8102480:	220f      	movs	r2, #15
 8102482:	fa02 f303 	lsl.w	r3, r2, r3
 8102486:	43db      	mvns	r3, r3
 8102488:	69ba      	ldr	r2, [r7, #24]
 810248a:	4013      	ands	r3, r2
 810248c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810248e:	683b      	ldr	r3, [r7, #0]
 8102490:	691a      	ldr	r2, [r3, #16]
 8102492:	69fb      	ldr	r3, [r7, #28]
 8102494:	f003 0307 	and.w	r3, r3, #7
 8102498:	009b      	lsls	r3, r3, #2
 810249a:	fa02 f303 	lsl.w	r3, r2, r3
 810249e:	69ba      	ldr	r2, [r7, #24]
 81024a0:	4313      	orrs	r3, r2
 81024a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81024a4:	69fb      	ldr	r3, [r7, #28]
 81024a6:	08da      	lsrs	r2, r3, #3
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	3208      	adds	r2, #8
 81024ac:	69b9      	ldr	r1, [r7, #24]
 81024ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81024b2:	687b      	ldr	r3, [r7, #4]
 81024b4:	681b      	ldr	r3, [r3, #0]
 81024b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81024b8:	69fb      	ldr	r3, [r7, #28]
 81024ba:	005b      	lsls	r3, r3, #1
 81024bc:	2203      	movs	r2, #3
 81024be:	fa02 f303 	lsl.w	r3, r2, r3
 81024c2:	43db      	mvns	r3, r3
 81024c4:	69ba      	ldr	r2, [r7, #24]
 81024c6:	4013      	ands	r3, r2
 81024c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81024ca:	683b      	ldr	r3, [r7, #0]
 81024cc:	685b      	ldr	r3, [r3, #4]
 81024ce:	f003 0203 	and.w	r2, r3, #3
 81024d2:	69fb      	ldr	r3, [r7, #28]
 81024d4:	005b      	lsls	r3, r3, #1
 81024d6:	fa02 f303 	lsl.w	r3, r2, r3
 81024da:	69ba      	ldr	r2, [r7, #24]
 81024dc:	4313      	orrs	r3, r2
 81024de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81024e0:	687b      	ldr	r3, [r7, #4]
 81024e2:	69ba      	ldr	r2, [r7, #24]
 81024e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81024e6:	683b      	ldr	r3, [r7, #0]
 81024e8:	685b      	ldr	r3, [r3, #4]
 81024ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81024ee:	2b00      	cmp	r3, #0
 81024f0:	f000 80e0 	beq.w	81026b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81024f4:	4b2f      	ldr	r3, [pc, #188]	; (81025b4 <HAL_GPIO_Init+0x238>)
 81024f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81024fa:	4a2e      	ldr	r2, [pc, #184]	; (81025b4 <HAL_GPIO_Init+0x238>)
 81024fc:	f043 0302 	orr.w	r3, r3, #2
 8102500:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102504:	4b2b      	ldr	r3, [pc, #172]	; (81025b4 <HAL_GPIO_Init+0x238>)
 8102506:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810250a:	f003 0302 	and.w	r3, r3, #2
 810250e:	60fb      	str	r3, [r7, #12]
 8102510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102512:	4a29      	ldr	r2, [pc, #164]	; (81025b8 <HAL_GPIO_Init+0x23c>)
 8102514:	69fb      	ldr	r3, [r7, #28]
 8102516:	089b      	lsrs	r3, r3, #2
 8102518:	3302      	adds	r3, #2
 810251a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102520:	69fb      	ldr	r3, [r7, #28]
 8102522:	f003 0303 	and.w	r3, r3, #3
 8102526:	009b      	lsls	r3, r3, #2
 8102528:	220f      	movs	r2, #15
 810252a:	fa02 f303 	lsl.w	r3, r2, r3
 810252e:	43db      	mvns	r3, r3
 8102530:	69ba      	ldr	r2, [r7, #24]
 8102532:	4013      	ands	r3, r2
 8102534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	4a20      	ldr	r2, [pc, #128]	; (81025bc <HAL_GPIO_Init+0x240>)
 810253a:	4293      	cmp	r3, r2
 810253c:	d052      	beq.n	81025e4 <HAL_GPIO_Init+0x268>
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	4a1f      	ldr	r2, [pc, #124]	; (81025c0 <HAL_GPIO_Init+0x244>)
 8102542:	4293      	cmp	r3, r2
 8102544:	d031      	beq.n	81025aa <HAL_GPIO_Init+0x22e>
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	4a1e      	ldr	r2, [pc, #120]	; (81025c4 <HAL_GPIO_Init+0x248>)
 810254a:	4293      	cmp	r3, r2
 810254c:	d02b      	beq.n	81025a6 <HAL_GPIO_Init+0x22a>
 810254e:	687b      	ldr	r3, [r7, #4]
 8102550:	4a1d      	ldr	r2, [pc, #116]	; (81025c8 <HAL_GPIO_Init+0x24c>)
 8102552:	4293      	cmp	r3, r2
 8102554:	d025      	beq.n	81025a2 <HAL_GPIO_Init+0x226>
 8102556:	687b      	ldr	r3, [r7, #4]
 8102558:	4a1c      	ldr	r2, [pc, #112]	; (81025cc <HAL_GPIO_Init+0x250>)
 810255a:	4293      	cmp	r3, r2
 810255c:	d01f      	beq.n	810259e <HAL_GPIO_Init+0x222>
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	4a1b      	ldr	r2, [pc, #108]	; (81025d0 <HAL_GPIO_Init+0x254>)
 8102562:	4293      	cmp	r3, r2
 8102564:	d019      	beq.n	810259a <HAL_GPIO_Init+0x21e>
 8102566:	687b      	ldr	r3, [r7, #4]
 8102568:	4a1a      	ldr	r2, [pc, #104]	; (81025d4 <HAL_GPIO_Init+0x258>)
 810256a:	4293      	cmp	r3, r2
 810256c:	d013      	beq.n	8102596 <HAL_GPIO_Init+0x21a>
 810256e:	687b      	ldr	r3, [r7, #4]
 8102570:	4a19      	ldr	r2, [pc, #100]	; (81025d8 <HAL_GPIO_Init+0x25c>)
 8102572:	4293      	cmp	r3, r2
 8102574:	d00d      	beq.n	8102592 <HAL_GPIO_Init+0x216>
 8102576:	687b      	ldr	r3, [r7, #4]
 8102578:	4a18      	ldr	r2, [pc, #96]	; (81025dc <HAL_GPIO_Init+0x260>)
 810257a:	4293      	cmp	r3, r2
 810257c:	d007      	beq.n	810258e <HAL_GPIO_Init+0x212>
 810257e:	687b      	ldr	r3, [r7, #4]
 8102580:	4a17      	ldr	r2, [pc, #92]	; (81025e0 <HAL_GPIO_Init+0x264>)
 8102582:	4293      	cmp	r3, r2
 8102584:	d101      	bne.n	810258a <HAL_GPIO_Init+0x20e>
 8102586:	2309      	movs	r3, #9
 8102588:	e02d      	b.n	81025e6 <HAL_GPIO_Init+0x26a>
 810258a:	230a      	movs	r3, #10
 810258c:	e02b      	b.n	81025e6 <HAL_GPIO_Init+0x26a>
 810258e:	2308      	movs	r3, #8
 8102590:	e029      	b.n	81025e6 <HAL_GPIO_Init+0x26a>
 8102592:	2307      	movs	r3, #7
 8102594:	e027      	b.n	81025e6 <HAL_GPIO_Init+0x26a>
 8102596:	2306      	movs	r3, #6
 8102598:	e025      	b.n	81025e6 <HAL_GPIO_Init+0x26a>
 810259a:	2305      	movs	r3, #5
 810259c:	e023      	b.n	81025e6 <HAL_GPIO_Init+0x26a>
 810259e:	2304      	movs	r3, #4
 81025a0:	e021      	b.n	81025e6 <HAL_GPIO_Init+0x26a>
 81025a2:	2303      	movs	r3, #3
 81025a4:	e01f      	b.n	81025e6 <HAL_GPIO_Init+0x26a>
 81025a6:	2302      	movs	r3, #2
 81025a8:	e01d      	b.n	81025e6 <HAL_GPIO_Init+0x26a>
 81025aa:	2301      	movs	r3, #1
 81025ac:	e01b      	b.n	81025e6 <HAL_GPIO_Init+0x26a>
 81025ae:	bf00      	nop
 81025b0:	580000c0 	.word	0x580000c0
 81025b4:	58024400 	.word	0x58024400
 81025b8:	58000400 	.word	0x58000400
 81025bc:	58020000 	.word	0x58020000
 81025c0:	58020400 	.word	0x58020400
 81025c4:	58020800 	.word	0x58020800
 81025c8:	58020c00 	.word	0x58020c00
 81025cc:	58021000 	.word	0x58021000
 81025d0:	58021400 	.word	0x58021400
 81025d4:	58021800 	.word	0x58021800
 81025d8:	58021c00 	.word	0x58021c00
 81025dc:	58022000 	.word	0x58022000
 81025e0:	58022400 	.word	0x58022400
 81025e4:	2300      	movs	r3, #0
 81025e6:	69fa      	ldr	r2, [r7, #28]
 81025e8:	f002 0203 	and.w	r2, r2, #3
 81025ec:	0092      	lsls	r2, r2, #2
 81025ee:	4093      	lsls	r3, r2
 81025f0:	69ba      	ldr	r2, [r7, #24]
 81025f2:	4313      	orrs	r3, r2
 81025f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81025f6:	4938      	ldr	r1, [pc, #224]	; (81026d8 <HAL_GPIO_Init+0x35c>)
 81025f8:	69fb      	ldr	r3, [r7, #28]
 81025fa:	089b      	lsrs	r3, r3, #2
 81025fc:	3302      	adds	r3, #2
 81025fe:	69ba      	ldr	r2, [r7, #24]
 8102600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102608:	681b      	ldr	r3, [r3, #0]
 810260a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810260c:	693b      	ldr	r3, [r7, #16]
 810260e:	43db      	mvns	r3, r3
 8102610:	69ba      	ldr	r2, [r7, #24]
 8102612:	4013      	ands	r3, r2
 8102614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102616:	683b      	ldr	r3, [r7, #0]
 8102618:	685b      	ldr	r3, [r3, #4]
 810261a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810261e:	2b00      	cmp	r3, #0
 8102620:	d003      	beq.n	810262a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102622:	69ba      	ldr	r2, [r7, #24]
 8102624:	693b      	ldr	r3, [r7, #16]
 8102626:	4313      	orrs	r3, r2
 8102628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810262a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810262e:	69bb      	ldr	r3, [r7, #24]
 8102630:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102636:	685b      	ldr	r3, [r3, #4]
 8102638:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810263a:	693b      	ldr	r3, [r7, #16]
 810263c:	43db      	mvns	r3, r3
 810263e:	69ba      	ldr	r2, [r7, #24]
 8102640:	4013      	ands	r3, r2
 8102642:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102644:	683b      	ldr	r3, [r7, #0]
 8102646:	685b      	ldr	r3, [r3, #4]
 8102648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810264c:	2b00      	cmp	r3, #0
 810264e:	d003      	beq.n	8102658 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102650:	69ba      	ldr	r2, [r7, #24]
 8102652:	693b      	ldr	r3, [r7, #16]
 8102654:	4313      	orrs	r3, r2
 8102656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810265c:	69bb      	ldr	r3, [r7, #24]
 810265e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102660:	697b      	ldr	r3, [r7, #20]
 8102662:	685b      	ldr	r3, [r3, #4]
 8102664:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102666:	693b      	ldr	r3, [r7, #16]
 8102668:	43db      	mvns	r3, r3
 810266a:	69ba      	ldr	r2, [r7, #24]
 810266c:	4013      	ands	r3, r2
 810266e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102670:	683b      	ldr	r3, [r7, #0]
 8102672:	685b      	ldr	r3, [r3, #4]
 8102674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102678:	2b00      	cmp	r3, #0
 810267a:	d003      	beq.n	8102684 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810267c:	69ba      	ldr	r2, [r7, #24]
 810267e:	693b      	ldr	r3, [r7, #16]
 8102680:	4313      	orrs	r3, r2
 8102682:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102684:	697b      	ldr	r3, [r7, #20]
 8102686:	69ba      	ldr	r2, [r7, #24]
 8102688:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810268a:	697b      	ldr	r3, [r7, #20]
 810268c:	681b      	ldr	r3, [r3, #0]
 810268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102690:	693b      	ldr	r3, [r7, #16]
 8102692:	43db      	mvns	r3, r3
 8102694:	69ba      	ldr	r2, [r7, #24]
 8102696:	4013      	ands	r3, r2
 8102698:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810269a:	683b      	ldr	r3, [r7, #0]
 810269c:	685b      	ldr	r3, [r3, #4]
 810269e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81026a2:	2b00      	cmp	r3, #0
 81026a4:	d003      	beq.n	81026ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81026a6:	69ba      	ldr	r2, [r7, #24]
 81026a8:	693b      	ldr	r3, [r7, #16]
 81026aa:	4313      	orrs	r3, r2
 81026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81026ae:	697b      	ldr	r3, [r7, #20]
 81026b0:	69ba      	ldr	r2, [r7, #24]
 81026b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81026b4:	69fb      	ldr	r3, [r7, #28]
 81026b6:	3301      	adds	r3, #1
 81026b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81026ba:	683b      	ldr	r3, [r7, #0]
 81026bc:	681a      	ldr	r2, [r3, #0]
 81026be:	69fb      	ldr	r3, [r7, #28]
 81026c0:	fa22 f303 	lsr.w	r3, r2, r3
 81026c4:	2b00      	cmp	r3, #0
 81026c6:	f47f ae63 	bne.w	8102390 <HAL_GPIO_Init+0x14>
  }
}
 81026ca:	bf00      	nop
 81026cc:	bf00      	nop
 81026ce:	3724      	adds	r7, #36	; 0x24
 81026d0:	46bd      	mov	sp, r7
 81026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026d6:	4770      	bx	lr
 81026d8:	58000400 	.word	0x58000400

081026dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 81026dc:	b580      	push	{r7, lr}
 81026de:	b082      	sub	sp, #8
 81026e0:	af00      	add	r7, sp, #0
 81026e2:	4603      	mov	r3, r0
 81026e4:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 81026e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81026ea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 81026ee:	88fb      	ldrh	r3, [r7, #6]
 81026f0:	4013      	ands	r3, r2
 81026f2:	2b00      	cmp	r3, #0
 81026f4:	d008      	beq.n	8102708 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81026f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81026fa:	88fb      	ldrh	r3, [r7, #6]
 81026fc:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8102700:	88fb      	ldrh	r3, [r7, #6]
 8102702:	4618      	mov	r0, r3
 8102704:	f000 f804 	bl	8102710 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8102708:	bf00      	nop
 810270a:	3708      	adds	r7, #8
 810270c:	46bd      	mov	sp, r7
 810270e:	bd80      	pop	{r7, pc}

08102710 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8102710:	b480      	push	{r7}
 8102712:	b083      	sub	sp, #12
 8102714:	af00      	add	r7, sp, #0
 8102716:	4603      	mov	r3, r0
 8102718:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 810271a:	bf00      	nop
 810271c:	370c      	adds	r7, #12
 810271e:	46bd      	mov	sp, r7
 8102720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102724:	4770      	bx	lr
	...

08102728 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102728:	b480      	push	{r7}
 810272a:	b083      	sub	sp, #12
 810272c:	af00      	add	r7, sp, #0
 810272e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102730:	4b05      	ldr	r3, [pc, #20]	; (8102748 <HAL_HSEM_ActivateNotification+0x20>)
 8102732:	681a      	ldr	r2, [r3, #0]
 8102734:	4904      	ldr	r1, [pc, #16]	; (8102748 <HAL_HSEM_ActivateNotification+0x20>)
 8102736:	687b      	ldr	r3, [r7, #4]
 8102738:	4313      	orrs	r3, r2
 810273a:	600b      	str	r3, [r1, #0]
#endif
}
 810273c:	bf00      	nop
 810273e:	370c      	adds	r7, #12
 8102740:	46bd      	mov	sp, r7
 8102742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102746:	4770      	bx	lr
 8102748:	58026510 	.word	0x58026510

0810274c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 810274c:	b580      	push	{r7, lr}
 810274e:	b082      	sub	sp, #8
 8102750:	af00      	add	r7, sp, #0
 8102752:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	2b00      	cmp	r3, #0
 8102758:	d101      	bne.n	810275e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810275a:	2301      	movs	r3, #1
 810275c:	e081      	b.n	8102862 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102764:	b2db      	uxtb	r3, r3
 8102766:	2b00      	cmp	r3, #0
 8102768:	d106      	bne.n	8102778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810276a:	687b      	ldr	r3, [r7, #4]
 810276c:	2200      	movs	r2, #0
 810276e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8102772:	6878      	ldr	r0, [r7, #4]
 8102774:	f7ff fa10 	bl	8101b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	2224      	movs	r2, #36	; 0x24
 810277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8102780:	687b      	ldr	r3, [r7, #4]
 8102782:	681b      	ldr	r3, [r3, #0]
 8102784:	681a      	ldr	r2, [r3, #0]
 8102786:	687b      	ldr	r3, [r7, #4]
 8102788:	681b      	ldr	r3, [r3, #0]
 810278a:	f022 0201 	bic.w	r2, r2, #1
 810278e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	685a      	ldr	r2, [r3, #4]
 8102794:	687b      	ldr	r3, [r7, #4]
 8102796:	681b      	ldr	r3, [r3, #0]
 8102798:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 810279c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810279e:	687b      	ldr	r3, [r7, #4]
 81027a0:	681b      	ldr	r3, [r3, #0]
 81027a2:	689a      	ldr	r2, [r3, #8]
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	681b      	ldr	r3, [r3, #0]
 81027a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81027ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	68db      	ldr	r3, [r3, #12]
 81027b2:	2b01      	cmp	r3, #1
 81027b4:	d107      	bne.n	81027c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	689a      	ldr	r2, [r3, #8]
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	681b      	ldr	r3, [r3, #0]
 81027be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81027c2:	609a      	str	r2, [r3, #8]
 81027c4:	e006      	b.n	81027d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	689a      	ldr	r2, [r3, #8]
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	681b      	ldr	r3, [r3, #0]
 81027ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81027d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81027d4:	687b      	ldr	r3, [r7, #4]
 81027d6:	68db      	ldr	r3, [r3, #12]
 81027d8:	2b02      	cmp	r3, #2
 81027da:	d104      	bne.n	81027e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	681b      	ldr	r3, [r3, #0]
 81027e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81027e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81027e6:	687b      	ldr	r3, [r7, #4]
 81027e8:	681b      	ldr	r3, [r3, #0]
 81027ea:	685b      	ldr	r3, [r3, #4]
 81027ec:	687a      	ldr	r2, [r7, #4]
 81027ee:	6812      	ldr	r2, [r2, #0]
 81027f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81027f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81027f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81027fa:	687b      	ldr	r3, [r7, #4]
 81027fc:	681b      	ldr	r3, [r3, #0]
 81027fe:	68da      	ldr	r2, [r3, #12]
 8102800:	687b      	ldr	r3, [r7, #4]
 8102802:	681b      	ldr	r3, [r3, #0]
 8102804:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102808:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810280a:	687b      	ldr	r3, [r7, #4]
 810280c:	691a      	ldr	r2, [r3, #16]
 810280e:	687b      	ldr	r3, [r7, #4]
 8102810:	695b      	ldr	r3, [r3, #20]
 8102812:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	699b      	ldr	r3, [r3, #24]
 810281a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810281c:	687b      	ldr	r3, [r7, #4]
 810281e:	681b      	ldr	r3, [r3, #0]
 8102820:	430a      	orrs	r2, r1
 8102822:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	69d9      	ldr	r1, [r3, #28]
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	6a1a      	ldr	r2, [r3, #32]
 810282c:	687b      	ldr	r3, [r7, #4]
 810282e:	681b      	ldr	r3, [r3, #0]
 8102830:	430a      	orrs	r2, r1
 8102832:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	681b      	ldr	r3, [r3, #0]
 8102838:	681a      	ldr	r2, [r3, #0]
 810283a:	687b      	ldr	r3, [r7, #4]
 810283c:	681b      	ldr	r3, [r3, #0]
 810283e:	f042 0201 	orr.w	r2, r2, #1
 8102842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102844:	687b      	ldr	r3, [r7, #4]
 8102846:	2200      	movs	r2, #0
 8102848:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810284a:	687b      	ldr	r3, [r7, #4]
 810284c:	2220      	movs	r2, #32
 810284e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8102852:	687b      	ldr	r3, [r7, #4]
 8102854:	2200      	movs	r2, #0
 8102856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8102858:	687b      	ldr	r3, [r7, #4]
 810285a:	2200      	movs	r2, #0
 810285c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102860:	2300      	movs	r3, #0
}
 8102862:	4618      	mov	r0, r3
 8102864:	3708      	adds	r7, #8
 8102866:	46bd      	mov	sp, r7
 8102868:	bd80      	pop	{r7, pc}
	...

0810286c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 810286c:	b580      	push	{r7, lr}
 810286e:	b088      	sub	sp, #32
 8102870:	af02      	add	r7, sp, #8
 8102872:	60f8      	str	r0, [r7, #12]
 8102874:	607a      	str	r2, [r7, #4]
 8102876:	461a      	mov	r2, r3
 8102878:	460b      	mov	r3, r1
 810287a:	817b      	strh	r3, [r7, #10]
 810287c:	4613      	mov	r3, r2
 810287e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102880:	68fb      	ldr	r3, [r7, #12]
 8102882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102886:	b2db      	uxtb	r3, r3
 8102888:	2b20      	cmp	r3, #32
 810288a:	f040 80da 	bne.w	8102a42 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810288e:	68fb      	ldr	r3, [r7, #12]
 8102890:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102894:	2b01      	cmp	r3, #1
 8102896:	d101      	bne.n	810289c <HAL_I2C_Master_Transmit+0x30>
 8102898:	2302      	movs	r3, #2
 810289a:	e0d3      	b.n	8102a44 <HAL_I2C_Master_Transmit+0x1d8>
 810289c:	68fb      	ldr	r3, [r7, #12]
 810289e:	2201      	movs	r2, #1
 81028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81028a4:	f7ff fc0a 	bl	81020bc <HAL_GetTick>
 81028a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81028aa:	697b      	ldr	r3, [r7, #20]
 81028ac:	9300      	str	r3, [sp, #0]
 81028ae:	2319      	movs	r3, #25
 81028b0:	2201      	movs	r2, #1
 81028b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81028b6:	68f8      	ldr	r0, [r7, #12]
 81028b8:	f000 fb07 	bl	8102eca <I2C_WaitOnFlagUntilTimeout>
 81028bc:	4603      	mov	r3, r0
 81028be:	2b00      	cmp	r3, #0
 81028c0:	d001      	beq.n	81028c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 81028c2:	2301      	movs	r3, #1
 81028c4:	e0be      	b.n	8102a44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81028c6:	68fb      	ldr	r3, [r7, #12]
 81028c8:	2221      	movs	r2, #33	; 0x21
 81028ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81028ce:	68fb      	ldr	r3, [r7, #12]
 81028d0:	2210      	movs	r2, #16
 81028d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81028d6:	68fb      	ldr	r3, [r7, #12]
 81028d8:	2200      	movs	r2, #0
 81028da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81028dc:	68fb      	ldr	r3, [r7, #12]
 81028de:	687a      	ldr	r2, [r7, #4]
 81028e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81028e2:	68fb      	ldr	r3, [r7, #12]
 81028e4:	893a      	ldrh	r2, [r7, #8]
 81028e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81028e8:	68fb      	ldr	r3, [r7, #12]
 81028ea:	2200      	movs	r2, #0
 81028ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81028ee:	68fb      	ldr	r3, [r7, #12]
 81028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81028f2:	b29b      	uxth	r3, r3
 81028f4:	2bff      	cmp	r3, #255	; 0xff
 81028f6:	d90e      	bls.n	8102916 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81028f8:	68fb      	ldr	r3, [r7, #12]
 81028fa:	22ff      	movs	r2, #255	; 0xff
 81028fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81028fe:	68fb      	ldr	r3, [r7, #12]
 8102900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102902:	b2da      	uxtb	r2, r3
 8102904:	8979      	ldrh	r1, [r7, #10]
 8102906:	4b51      	ldr	r3, [pc, #324]	; (8102a4c <HAL_I2C_Master_Transmit+0x1e0>)
 8102908:	9300      	str	r3, [sp, #0]
 810290a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810290e:	68f8      	ldr	r0, [r7, #12]
 8102910:	f000 fcfe 	bl	8103310 <I2C_TransferConfig>
 8102914:	e06c      	b.n	81029f0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102916:	68fb      	ldr	r3, [r7, #12]
 8102918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810291a:	b29a      	uxth	r2, r3
 810291c:	68fb      	ldr	r3, [r7, #12]
 810291e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102920:	68fb      	ldr	r3, [r7, #12]
 8102922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102924:	b2da      	uxtb	r2, r3
 8102926:	8979      	ldrh	r1, [r7, #10]
 8102928:	4b48      	ldr	r3, [pc, #288]	; (8102a4c <HAL_I2C_Master_Transmit+0x1e0>)
 810292a:	9300      	str	r3, [sp, #0]
 810292c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102930:	68f8      	ldr	r0, [r7, #12]
 8102932:	f000 fced 	bl	8103310 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8102936:	e05b      	b.n	81029f0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102938:	697a      	ldr	r2, [r7, #20]
 810293a:	6a39      	ldr	r1, [r7, #32]
 810293c:	68f8      	ldr	r0, [r7, #12]
 810293e:	f000 fb04 	bl	8102f4a <I2C_WaitOnTXISFlagUntilTimeout>
 8102942:	4603      	mov	r3, r0
 8102944:	2b00      	cmp	r3, #0
 8102946:	d001      	beq.n	810294c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8102948:	2301      	movs	r3, #1
 810294a:	e07b      	b.n	8102a44 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810294c:	68fb      	ldr	r3, [r7, #12]
 810294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102950:	781a      	ldrb	r2, [r3, #0]
 8102952:	68fb      	ldr	r3, [r7, #12]
 8102954:	681b      	ldr	r3, [r3, #0]
 8102956:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102958:	68fb      	ldr	r3, [r7, #12]
 810295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810295c:	1c5a      	adds	r2, r3, #1
 810295e:	68fb      	ldr	r3, [r7, #12]
 8102960:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8102962:	68fb      	ldr	r3, [r7, #12]
 8102964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102966:	b29b      	uxth	r3, r3
 8102968:	3b01      	subs	r3, #1
 810296a:	b29a      	uxth	r2, r3
 810296c:	68fb      	ldr	r3, [r7, #12]
 810296e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8102970:	68fb      	ldr	r3, [r7, #12]
 8102972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102974:	3b01      	subs	r3, #1
 8102976:	b29a      	uxth	r2, r3
 8102978:	68fb      	ldr	r3, [r7, #12]
 810297a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810297c:	68fb      	ldr	r3, [r7, #12]
 810297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102980:	b29b      	uxth	r3, r3
 8102982:	2b00      	cmp	r3, #0
 8102984:	d034      	beq.n	81029f0 <HAL_I2C_Master_Transmit+0x184>
 8102986:	68fb      	ldr	r3, [r7, #12]
 8102988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810298a:	2b00      	cmp	r3, #0
 810298c:	d130      	bne.n	81029f0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810298e:	697b      	ldr	r3, [r7, #20]
 8102990:	9300      	str	r3, [sp, #0]
 8102992:	6a3b      	ldr	r3, [r7, #32]
 8102994:	2200      	movs	r2, #0
 8102996:	2180      	movs	r1, #128	; 0x80
 8102998:	68f8      	ldr	r0, [r7, #12]
 810299a:	f000 fa96 	bl	8102eca <I2C_WaitOnFlagUntilTimeout>
 810299e:	4603      	mov	r3, r0
 81029a0:	2b00      	cmp	r3, #0
 81029a2:	d001      	beq.n	81029a8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 81029a4:	2301      	movs	r3, #1
 81029a6:	e04d      	b.n	8102a44 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81029a8:	68fb      	ldr	r3, [r7, #12]
 81029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81029ac:	b29b      	uxth	r3, r3
 81029ae:	2bff      	cmp	r3, #255	; 0xff
 81029b0:	d90e      	bls.n	81029d0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81029b2:	68fb      	ldr	r3, [r7, #12]
 81029b4:	22ff      	movs	r2, #255	; 0xff
 81029b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81029b8:	68fb      	ldr	r3, [r7, #12]
 81029ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81029bc:	b2da      	uxtb	r2, r3
 81029be:	8979      	ldrh	r1, [r7, #10]
 81029c0:	2300      	movs	r3, #0
 81029c2:	9300      	str	r3, [sp, #0]
 81029c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81029c8:	68f8      	ldr	r0, [r7, #12]
 81029ca:	f000 fca1 	bl	8103310 <I2C_TransferConfig>
 81029ce:	e00f      	b.n	81029f0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81029d0:	68fb      	ldr	r3, [r7, #12]
 81029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81029d4:	b29a      	uxth	r2, r3
 81029d6:	68fb      	ldr	r3, [r7, #12]
 81029d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81029da:	68fb      	ldr	r3, [r7, #12]
 81029dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81029de:	b2da      	uxtb	r2, r3
 81029e0:	8979      	ldrh	r1, [r7, #10]
 81029e2:	2300      	movs	r3, #0
 81029e4:	9300      	str	r3, [sp, #0]
 81029e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81029ea:	68f8      	ldr	r0, [r7, #12]
 81029ec:	f000 fc90 	bl	8103310 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81029f0:	68fb      	ldr	r3, [r7, #12]
 81029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81029f4:	b29b      	uxth	r3, r3
 81029f6:	2b00      	cmp	r3, #0
 81029f8:	d19e      	bne.n	8102938 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81029fa:	697a      	ldr	r2, [r7, #20]
 81029fc:	6a39      	ldr	r1, [r7, #32]
 81029fe:	68f8      	ldr	r0, [r7, #12]
 8102a00:	f000 fae3 	bl	8102fca <I2C_WaitOnSTOPFlagUntilTimeout>
 8102a04:	4603      	mov	r3, r0
 8102a06:	2b00      	cmp	r3, #0
 8102a08:	d001      	beq.n	8102a0e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8102a0a:	2301      	movs	r3, #1
 8102a0c:	e01a      	b.n	8102a44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102a0e:	68fb      	ldr	r3, [r7, #12]
 8102a10:	681b      	ldr	r3, [r3, #0]
 8102a12:	2220      	movs	r2, #32
 8102a14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102a16:	68fb      	ldr	r3, [r7, #12]
 8102a18:	681b      	ldr	r3, [r3, #0]
 8102a1a:	6859      	ldr	r1, [r3, #4]
 8102a1c:	68fb      	ldr	r3, [r7, #12]
 8102a1e:	681a      	ldr	r2, [r3, #0]
 8102a20:	4b0b      	ldr	r3, [pc, #44]	; (8102a50 <HAL_I2C_Master_Transmit+0x1e4>)
 8102a22:	400b      	ands	r3, r1
 8102a24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102a26:	68fb      	ldr	r3, [r7, #12]
 8102a28:	2220      	movs	r2, #32
 8102a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102a2e:	68fb      	ldr	r3, [r7, #12]
 8102a30:	2200      	movs	r2, #0
 8102a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102a36:	68fb      	ldr	r3, [r7, #12]
 8102a38:	2200      	movs	r2, #0
 8102a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102a3e:	2300      	movs	r3, #0
 8102a40:	e000      	b.n	8102a44 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8102a42:	2302      	movs	r3, #2
  }
}
 8102a44:	4618      	mov	r0, r3
 8102a46:	3718      	adds	r7, #24
 8102a48:	46bd      	mov	sp, r7
 8102a4a:	bd80      	pop	{r7, pc}
 8102a4c:	80002000 	.word	0x80002000
 8102a50:	fe00e800 	.word	0xfe00e800

08102a54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8102a54:	b580      	push	{r7, lr}
 8102a56:	b088      	sub	sp, #32
 8102a58:	af02      	add	r7, sp, #8
 8102a5a:	60f8      	str	r0, [r7, #12]
 8102a5c:	607a      	str	r2, [r7, #4]
 8102a5e:	461a      	mov	r2, r3
 8102a60:	460b      	mov	r3, r1
 8102a62:	817b      	strh	r3, [r7, #10]
 8102a64:	4613      	mov	r3, r2
 8102a66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102a68:	68fb      	ldr	r3, [r7, #12]
 8102a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102a6e:	b2db      	uxtb	r3, r3
 8102a70:	2b20      	cmp	r3, #32
 8102a72:	f040 80db 	bne.w	8102c2c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102a76:	68fb      	ldr	r3, [r7, #12]
 8102a78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102a7c:	2b01      	cmp	r3, #1
 8102a7e:	d101      	bne.n	8102a84 <HAL_I2C_Master_Receive+0x30>
 8102a80:	2302      	movs	r3, #2
 8102a82:	e0d4      	b.n	8102c2e <HAL_I2C_Master_Receive+0x1da>
 8102a84:	68fb      	ldr	r3, [r7, #12]
 8102a86:	2201      	movs	r2, #1
 8102a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102a8c:	f7ff fb16 	bl	81020bc <HAL_GetTick>
 8102a90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102a92:	697b      	ldr	r3, [r7, #20]
 8102a94:	9300      	str	r3, [sp, #0]
 8102a96:	2319      	movs	r3, #25
 8102a98:	2201      	movs	r2, #1
 8102a9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102a9e:	68f8      	ldr	r0, [r7, #12]
 8102aa0:	f000 fa13 	bl	8102eca <I2C_WaitOnFlagUntilTimeout>
 8102aa4:	4603      	mov	r3, r0
 8102aa6:	2b00      	cmp	r3, #0
 8102aa8:	d001      	beq.n	8102aae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8102aaa:	2301      	movs	r3, #1
 8102aac:	e0bf      	b.n	8102c2e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8102aae:	68fb      	ldr	r3, [r7, #12]
 8102ab0:	2222      	movs	r2, #34	; 0x22
 8102ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8102ab6:	68fb      	ldr	r3, [r7, #12]
 8102ab8:	2210      	movs	r2, #16
 8102aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102abe:	68fb      	ldr	r3, [r7, #12]
 8102ac0:	2200      	movs	r2, #0
 8102ac2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102ac4:	68fb      	ldr	r3, [r7, #12]
 8102ac6:	687a      	ldr	r2, [r7, #4]
 8102ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102aca:	68fb      	ldr	r3, [r7, #12]
 8102acc:	893a      	ldrh	r2, [r7, #8]
 8102ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102ad0:	68fb      	ldr	r3, [r7, #12]
 8102ad2:	2200      	movs	r2, #0
 8102ad4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102ad6:	68fb      	ldr	r3, [r7, #12]
 8102ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102ada:	b29b      	uxth	r3, r3
 8102adc:	2bff      	cmp	r3, #255	; 0xff
 8102ade:	d90e      	bls.n	8102afe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102ae0:	68fb      	ldr	r3, [r7, #12]
 8102ae2:	22ff      	movs	r2, #255	; 0xff
 8102ae4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102ae6:	68fb      	ldr	r3, [r7, #12]
 8102ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102aea:	b2da      	uxtb	r2, r3
 8102aec:	8979      	ldrh	r1, [r7, #10]
 8102aee:	4b52      	ldr	r3, [pc, #328]	; (8102c38 <HAL_I2C_Master_Receive+0x1e4>)
 8102af0:	9300      	str	r3, [sp, #0]
 8102af2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102af6:	68f8      	ldr	r0, [r7, #12]
 8102af8:	f000 fc0a 	bl	8103310 <I2C_TransferConfig>
 8102afc:	e06d      	b.n	8102bda <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102afe:	68fb      	ldr	r3, [r7, #12]
 8102b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102b02:	b29a      	uxth	r2, r3
 8102b04:	68fb      	ldr	r3, [r7, #12]
 8102b06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102b08:	68fb      	ldr	r3, [r7, #12]
 8102b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102b0c:	b2da      	uxtb	r2, r3
 8102b0e:	8979      	ldrh	r1, [r7, #10]
 8102b10:	4b49      	ldr	r3, [pc, #292]	; (8102c38 <HAL_I2C_Master_Receive+0x1e4>)
 8102b12:	9300      	str	r3, [sp, #0]
 8102b14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102b18:	68f8      	ldr	r0, [r7, #12]
 8102b1a:	f000 fbf9 	bl	8103310 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8102b1e:	e05c      	b.n	8102bda <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102b20:	697a      	ldr	r2, [r7, #20]
 8102b22:	6a39      	ldr	r1, [r7, #32]
 8102b24:	68f8      	ldr	r0, [r7, #12]
 8102b26:	f000 fa8d 	bl	8103044 <I2C_WaitOnRXNEFlagUntilTimeout>
 8102b2a:	4603      	mov	r3, r0
 8102b2c:	2b00      	cmp	r3, #0
 8102b2e:	d001      	beq.n	8102b34 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8102b30:	2301      	movs	r3, #1
 8102b32:	e07c      	b.n	8102c2e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8102b34:	68fb      	ldr	r3, [r7, #12]
 8102b36:	681b      	ldr	r3, [r3, #0]
 8102b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102b3a:	68fb      	ldr	r3, [r7, #12]
 8102b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102b3e:	b2d2      	uxtb	r2, r2
 8102b40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102b42:	68fb      	ldr	r3, [r7, #12]
 8102b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102b46:	1c5a      	adds	r2, r3, #1
 8102b48:	68fb      	ldr	r3, [r7, #12]
 8102b4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8102b4c:	68fb      	ldr	r3, [r7, #12]
 8102b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102b50:	3b01      	subs	r3, #1
 8102b52:	b29a      	uxth	r2, r3
 8102b54:	68fb      	ldr	r3, [r7, #12]
 8102b56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8102b58:	68fb      	ldr	r3, [r7, #12]
 8102b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102b5c:	b29b      	uxth	r3, r3
 8102b5e:	3b01      	subs	r3, #1
 8102b60:	b29a      	uxth	r2, r3
 8102b62:	68fb      	ldr	r3, [r7, #12]
 8102b64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102b66:	68fb      	ldr	r3, [r7, #12]
 8102b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102b6a:	b29b      	uxth	r3, r3
 8102b6c:	2b00      	cmp	r3, #0
 8102b6e:	d034      	beq.n	8102bda <HAL_I2C_Master_Receive+0x186>
 8102b70:	68fb      	ldr	r3, [r7, #12]
 8102b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102b74:	2b00      	cmp	r3, #0
 8102b76:	d130      	bne.n	8102bda <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102b78:	697b      	ldr	r3, [r7, #20]
 8102b7a:	9300      	str	r3, [sp, #0]
 8102b7c:	6a3b      	ldr	r3, [r7, #32]
 8102b7e:	2200      	movs	r2, #0
 8102b80:	2180      	movs	r1, #128	; 0x80
 8102b82:	68f8      	ldr	r0, [r7, #12]
 8102b84:	f000 f9a1 	bl	8102eca <I2C_WaitOnFlagUntilTimeout>
 8102b88:	4603      	mov	r3, r0
 8102b8a:	2b00      	cmp	r3, #0
 8102b8c:	d001      	beq.n	8102b92 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8102b8e:	2301      	movs	r3, #1
 8102b90:	e04d      	b.n	8102c2e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102b92:	68fb      	ldr	r3, [r7, #12]
 8102b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102b96:	b29b      	uxth	r3, r3
 8102b98:	2bff      	cmp	r3, #255	; 0xff
 8102b9a:	d90e      	bls.n	8102bba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102b9c:	68fb      	ldr	r3, [r7, #12]
 8102b9e:	22ff      	movs	r2, #255	; 0xff
 8102ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102ba2:	68fb      	ldr	r3, [r7, #12]
 8102ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102ba6:	b2da      	uxtb	r2, r3
 8102ba8:	8979      	ldrh	r1, [r7, #10]
 8102baa:	2300      	movs	r3, #0
 8102bac:	9300      	str	r3, [sp, #0]
 8102bae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102bb2:	68f8      	ldr	r0, [r7, #12]
 8102bb4:	f000 fbac 	bl	8103310 <I2C_TransferConfig>
 8102bb8:	e00f      	b.n	8102bda <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102bba:	68fb      	ldr	r3, [r7, #12]
 8102bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102bbe:	b29a      	uxth	r2, r3
 8102bc0:	68fb      	ldr	r3, [r7, #12]
 8102bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102bc4:	68fb      	ldr	r3, [r7, #12]
 8102bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102bc8:	b2da      	uxtb	r2, r3
 8102bca:	8979      	ldrh	r1, [r7, #10]
 8102bcc:	2300      	movs	r3, #0
 8102bce:	9300      	str	r3, [sp, #0]
 8102bd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102bd4:	68f8      	ldr	r0, [r7, #12]
 8102bd6:	f000 fb9b 	bl	8103310 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8102bda:	68fb      	ldr	r3, [r7, #12]
 8102bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102bde:	b29b      	uxth	r3, r3
 8102be0:	2b00      	cmp	r3, #0
 8102be2:	d19d      	bne.n	8102b20 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102be4:	697a      	ldr	r2, [r7, #20]
 8102be6:	6a39      	ldr	r1, [r7, #32]
 8102be8:	68f8      	ldr	r0, [r7, #12]
 8102bea:	f000 f9ee 	bl	8102fca <I2C_WaitOnSTOPFlagUntilTimeout>
 8102bee:	4603      	mov	r3, r0
 8102bf0:	2b00      	cmp	r3, #0
 8102bf2:	d001      	beq.n	8102bf8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8102bf4:	2301      	movs	r3, #1
 8102bf6:	e01a      	b.n	8102c2e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102bf8:	68fb      	ldr	r3, [r7, #12]
 8102bfa:	681b      	ldr	r3, [r3, #0]
 8102bfc:	2220      	movs	r2, #32
 8102bfe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102c00:	68fb      	ldr	r3, [r7, #12]
 8102c02:	681b      	ldr	r3, [r3, #0]
 8102c04:	6859      	ldr	r1, [r3, #4]
 8102c06:	68fb      	ldr	r3, [r7, #12]
 8102c08:	681a      	ldr	r2, [r3, #0]
 8102c0a:	4b0c      	ldr	r3, [pc, #48]	; (8102c3c <HAL_I2C_Master_Receive+0x1e8>)
 8102c0c:	400b      	ands	r3, r1
 8102c0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102c10:	68fb      	ldr	r3, [r7, #12]
 8102c12:	2220      	movs	r2, #32
 8102c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102c18:	68fb      	ldr	r3, [r7, #12]
 8102c1a:	2200      	movs	r2, #0
 8102c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102c20:	68fb      	ldr	r3, [r7, #12]
 8102c22:	2200      	movs	r2, #0
 8102c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102c28:	2300      	movs	r3, #0
 8102c2a:	e000      	b.n	8102c2e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8102c2c:	2302      	movs	r3, #2
  }
}
 8102c2e:	4618      	mov	r0, r3
 8102c30:	3718      	adds	r7, #24
 8102c32:	46bd      	mov	sp, r7
 8102c34:	bd80      	pop	{r7, pc}
 8102c36:	bf00      	nop
 8102c38:	80002400 	.word	0x80002400
 8102c3c:	fe00e800 	.word	0xfe00e800

08102c40 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8102c40:	b580      	push	{r7, lr}
 8102c42:	b08a      	sub	sp, #40	; 0x28
 8102c44:	af02      	add	r7, sp, #8
 8102c46:	60f8      	str	r0, [r7, #12]
 8102c48:	607a      	str	r2, [r7, #4]
 8102c4a:	603b      	str	r3, [r7, #0]
 8102c4c:	460b      	mov	r3, r1
 8102c4e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8102c50:	2300      	movs	r3, #0
 8102c52:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102c54:	68fb      	ldr	r3, [r7, #12]
 8102c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102c5a:	b2db      	uxtb	r3, r3
 8102c5c:	2b20      	cmp	r3, #32
 8102c5e:	f040 80f1 	bne.w	8102e44 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8102c62:	68fb      	ldr	r3, [r7, #12]
 8102c64:	681b      	ldr	r3, [r3, #0]
 8102c66:	699b      	ldr	r3, [r3, #24]
 8102c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102c70:	d101      	bne.n	8102c76 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8102c72:	2302      	movs	r3, #2
 8102c74:	e0e7      	b.n	8102e46 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102c76:	68fb      	ldr	r3, [r7, #12]
 8102c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102c7c:	2b01      	cmp	r3, #1
 8102c7e:	d101      	bne.n	8102c84 <HAL_I2C_IsDeviceReady+0x44>
 8102c80:	2302      	movs	r3, #2
 8102c82:	e0e0      	b.n	8102e46 <HAL_I2C_IsDeviceReady+0x206>
 8102c84:	68fb      	ldr	r3, [r7, #12]
 8102c86:	2201      	movs	r2, #1
 8102c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102c8c:	68fb      	ldr	r3, [r7, #12]
 8102c8e:	2224      	movs	r2, #36	; 0x24
 8102c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102c94:	68fb      	ldr	r3, [r7, #12]
 8102c96:	2200      	movs	r2, #0
 8102c98:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8102c9a:	68fb      	ldr	r3, [r7, #12]
 8102c9c:	68db      	ldr	r3, [r3, #12]
 8102c9e:	2b01      	cmp	r3, #1
 8102ca0:	d107      	bne.n	8102cb2 <HAL_I2C_IsDeviceReady+0x72>
 8102ca2:	897b      	ldrh	r3, [r7, #10]
 8102ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8102ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8102cb0:	e004      	b.n	8102cbc <HAL_I2C_IsDeviceReady+0x7c>
 8102cb2:	897b      	ldrh	r3, [r7, #10]
 8102cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8102cb8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8102cbc:	68fa      	ldr	r2, [r7, #12]
 8102cbe:	6812      	ldr	r2, [r2, #0]
 8102cc0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8102cc2:	f7ff f9fb 	bl	81020bc <HAL_GetTick>
 8102cc6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8102cc8:	68fb      	ldr	r3, [r7, #12]
 8102cca:	681b      	ldr	r3, [r3, #0]
 8102ccc:	699b      	ldr	r3, [r3, #24]
 8102cce:	f003 0320 	and.w	r3, r3, #32
 8102cd2:	2b20      	cmp	r3, #32
 8102cd4:	bf0c      	ite	eq
 8102cd6:	2301      	moveq	r3, #1
 8102cd8:	2300      	movne	r3, #0
 8102cda:	b2db      	uxtb	r3, r3
 8102cdc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8102cde:	68fb      	ldr	r3, [r7, #12]
 8102ce0:	681b      	ldr	r3, [r3, #0]
 8102ce2:	699b      	ldr	r3, [r3, #24]
 8102ce4:	f003 0310 	and.w	r3, r3, #16
 8102ce8:	2b10      	cmp	r3, #16
 8102cea:	bf0c      	ite	eq
 8102cec:	2301      	moveq	r3, #1
 8102cee:	2300      	movne	r3, #0
 8102cf0:	b2db      	uxtb	r3, r3
 8102cf2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8102cf4:	e034      	b.n	8102d60 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8102cf6:	683b      	ldr	r3, [r7, #0]
 8102cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102cfc:	d01a      	beq.n	8102d34 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8102cfe:	f7ff f9dd 	bl	81020bc <HAL_GetTick>
 8102d02:	4602      	mov	r2, r0
 8102d04:	69bb      	ldr	r3, [r7, #24]
 8102d06:	1ad3      	subs	r3, r2, r3
 8102d08:	683a      	ldr	r2, [r7, #0]
 8102d0a:	429a      	cmp	r2, r3
 8102d0c:	d302      	bcc.n	8102d14 <HAL_I2C_IsDeviceReady+0xd4>
 8102d0e:	683b      	ldr	r3, [r7, #0]
 8102d10:	2b00      	cmp	r3, #0
 8102d12:	d10f      	bne.n	8102d34 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8102d14:	68fb      	ldr	r3, [r7, #12]
 8102d16:	2220      	movs	r2, #32
 8102d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102d1c:	68fb      	ldr	r3, [r7, #12]
 8102d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102d20:	f043 0220 	orr.w	r2, r3, #32
 8102d24:	68fb      	ldr	r3, [r7, #12]
 8102d26:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8102d28:	68fb      	ldr	r3, [r7, #12]
 8102d2a:	2200      	movs	r2, #0
 8102d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8102d30:	2301      	movs	r3, #1
 8102d32:	e088      	b.n	8102e46 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8102d34:	68fb      	ldr	r3, [r7, #12]
 8102d36:	681b      	ldr	r3, [r3, #0]
 8102d38:	699b      	ldr	r3, [r3, #24]
 8102d3a:	f003 0320 	and.w	r3, r3, #32
 8102d3e:	2b20      	cmp	r3, #32
 8102d40:	bf0c      	ite	eq
 8102d42:	2301      	moveq	r3, #1
 8102d44:	2300      	movne	r3, #0
 8102d46:	b2db      	uxtb	r3, r3
 8102d48:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8102d4a:	68fb      	ldr	r3, [r7, #12]
 8102d4c:	681b      	ldr	r3, [r3, #0]
 8102d4e:	699b      	ldr	r3, [r3, #24]
 8102d50:	f003 0310 	and.w	r3, r3, #16
 8102d54:	2b10      	cmp	r3, #16
 8102d56:	bf0c      	ite	eq
 8102d58:	2301      	moveq	r3, #1
 8102d5a:	2300      	movne	r3, #0
 8102d5c:	b2db      	uxtb	r3, r3
 8102d5e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8102d60:	7ffb      	ldrb	r3, [r7, #31]
 8102d62:	2b00      	cmp	r3, #0
 8102d64:	d102      	bne.n	8102d6c <HAL_I2C_IsDeviceReady+0x12c>
 8102d66:	7fbb      	ldrb	r3, [r7, #30]
 8102d68:	2b00      	cmp	r3, #0
 8102d6a:	d0c4      	beq.n	8102cf6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8102d6c:	68fb      	ldr	r3, [r7, #12]
 8102d6e:	681b      	ldr	r3, [r3, #0]
 8102d70:	699b      	ldr	r3, [r3, #24]
 8102d72:	f003 0310 	and.w	r3, r3, #16
 8102d76:	2b10      	cmp	r3, #16
 8102d78:	d01a      	beq.n	8102db0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102d7a:	69bb      	ldr	r3, [r7, #24]
 8102d7c:	9300      	str	r3, [sp, #0]
 8102d7e:	683b      	ldr	r3, [r7, #0]
 8102d80:	2200      	movs	r2, #0
 8102d82:	2120      	movs	r1, #32
 8102d84:	68f8      	ldr	r0, [r7, #12]
 8102d86:	f000 f8a0 	bl	8102eca <I2C_WaitOnFlagUntilTimeout>
 8102d8a:	4603      	mov	r3, r0
 8102d8c:	2b00      	cmp	r3, #0
 8102d8e:	d001      	beq.n	8102d94 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8102d90:	2301      	movs	r3, #1
 8102d92:	e058      	b.n	8102e46 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102d94:	68fb      	ldr	r3, [r7, #12]
 8102d96:	681b      	ldr	r3, [r3, #0]
 8102d98:	2220      	movs	r2, #32
 8102d9a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8102d9c:	68fb      	ldr	r3, [r7, #12]
 8102d9e:	2220      	movs	r2, #32
 8102da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102da4:	68fb      	ldr	r3, [r7, #12]
 8102da6:	2200      	movs	r2, #0
 8102da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8102dac:	2300      	movs	r3, #0
 8102dae:	e04a      	b.n	8102e46 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102db0:	69bb      	ldr	r3, [r7, #24]
 8102db2:	9300      	str	r3, [sp, #0]
 8102db4:	683b      	ldr	r3, [r7, #0]
 8102db6:	2200      	movs	r2, #0
 8102db8:	2120      	movs	r1, #32
 8102dba:	68f8      	ldr	r0, [r7, #12]
 8102dbc:	f000 f885 	bl	8102eca <I2C_WaitOnFlagUntilTimeout>
 8102dc0:	4603      	mov	r3, r0
 8102dc2:	2b00      	cmp	r3, #0
 8102dc4:	d001      	beq.n	8102dca <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8102dc6:	2301      	movs	r3, #1
 8102dc8:	e03d      	b.n	8102e46 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102dca:	68fb      	ldr	r3, [r7, #12]
 8102dcc:	681b      	ldr	r3, [r3, #0]
 8102dce:	2210      	movs	r2, #16
 8102dd0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102dd2:	68fb      	ldr	r3, [r7, #12]
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	2220      	movs	r2, #32
 8102dd8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8102dda:	697b      	ldr	r3, [r7, #20]
 8102ddc:	687a      	ldr	r2, [r7, #4]
 8102dde:	429a      	cmp	r2, r3
 8102de0:	d118      	bne.n	8102e14 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8102de2:	68fb      	ldr	r3, [r7, #12]
 8102de4:	681b      	ldr	r3, [r3, #0]
 8102de6:	685a      	ldr	r2, [r3, #4]
 8102de8:	68fb      	ldr	r3, [r7, #12]
 8102dea:	681b      	ldr	r3, [r3, #0]
 8102dec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102df0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102df2:	69bb      	ldr	r3, [r7, #24]
 8102df4:	9300      	str	r3, [sp, #0]
 8102df6:	683b      	ldr	r3, [r7, #0]
 8102df8:	2200      	movs	r2, #0
 8102dfa:	2120      	movs	r1, #32
 8102dfc:	68f8      	ldr	r0, [r7, #12]
 8102dfe:	f000 f864 	bl	8102eca <I2C_WaitOnFlagUntilTimeout>
 8102e02:	4603      	mov	r3, r0
 8102e04:	2b00      	cmp	r3, #0
 8102e06:	d001      	beq.n	8102e0c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8102e08:	2301      	movs	r3, #1
 8102e0a:	e01c      	b.n	8102e46 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102e0c:	68fb      	ldr	r3, [r7, #12]
 8102e0e:	681b      	ldr	r3, [r3, #0]
 8102e10:	2220      	movs	r2, #32
 8102e12:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8102e14:	697b      	ldr	r3, [r7, #20]
 8102e16:	3301      	adds	r3, #1
 8102e18:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8102e1a:	697b      	ldr	r3, [r7, #20]
 8102e1c:	687a      	ldr	r2, [r7, #4]
 8102e1e:	429a      	cmp	r2, r3
 8102e20:	f63f af3b 	bhi.w	8102c9a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8102e24:	68fb      	ldr	r3, [r7, #12]
 8102e26:	2220      	movs	r2, #32
 8102e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102e2c:	68fb      	ldr	r3, [r7, #12]
 8102e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102e30:	f043 0220 	orr.w	r2, r3, #32
 8102e34:	68fb      	ldr	r3, [r7, #12]
 8102e36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102e38:	68fb      	ldr	r3, [r7, #12]
 8102e3a:	2200      	movs	r2, #0
 8102e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8102e40:	2301      	movs	r3, #1
 8102e42:	e000      	b.n	8102e46 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8102e44:	2302      	movs	r3, #2
  }
}
 8102e46:	4618      	mov	r0, r3
 8102e48:	3720      	adds	r7, #32
 8102e4a:	46bd      	mov	sp, r7
 8102e4c:	bd80      	pop	{r7, pc}

08102e4e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8102e4e:	b480      	push	{r7}
 8102e50:	b083      	sub	sp, #12
 8102e52:	af00      	add	r7, sp, #0
 8102e54:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102e5c:	b2db      	uxtb	r3, r3
}
 8102e5e:	4618      	mov	r0, r3
 8102e60:	370c      	adds	r7, #12
 8102e62:	46bd      	mov	sp, r7
 8102e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e68:	4770      	bx	lr

08102e6a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8102e6a:	b480      	push	{r7}
 8102e6c:	b083      	sub	sp, #12
 8102e6e:	af00      	add	r7, sp, #0
 8102e70:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8102e72:	687b      	ldr	r3, [r7, #4]
 8102e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8102e76:	4618      	mov	r0, r3
 8102e78:	370c      	adds	r7, #12
 8102e7a:	46bd      	mov	sp, r7
 8102e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e80:	4770      	bx	lr

08102e82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102e82:	b480      	push	{r7}
 8102e84:	b083      	sub	sp, #12
 8102e86:	af00      	add	r7, sp, #0
 8102e88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	681b      	ldr	r3, [r3, #0]
 8102e8e:	699b      	ldr	r3, [r3, #24]
 8102e90:	f003 0302 	and.w	r3, r3, #2
 8102e94:	2b02      	cmp	r3, #2
 8102e96:	d103      	bne.n	8102ea0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	2200      	movs	r2, #0
 8102e9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102ea0:	687b      	ldr	r3, [r7, #4]
 8102ea2:	681b      	ldr	r3, [r3, #0]
 8102ea4:	699b      	ldr	r3, [r3, #24]
 8102ea6:	f003 0301 	and.w	r3, r3, #1
 8102eaa:	2b01      	cmp	r3, #1
 8102eac:	d007      	beq.n	8102ebe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102eae:	687b      	ldr	r3, [r7, #4]
 8102eb0:	681b      	ldr	r3, [r3, #0]
 8102eb2:	699a      	ldr	r2, [r3, #24]
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	f042 0201 	orr.w	r2, r2, #1
 8102ebc:	619a      	str	r2, [r3, #24]
  }
}
 8102ebe:	bf00      	nop
 8102ec0:	370c      	adds	r7, #12
 8102ec2:	46bd      	mov	sp, r7
 8102ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ec8:	4770      	bx	lr

08102eca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8102eca:	b580      	push	{r7, lr}
 8102ecc:	b084      	sub	sp, #16
 8102ece:	af00      	add	r7, sp, #0
 8102ed0:	60f8      	str	r0, [r7, #12]
 8102ed2:	60b9      	str	r1, [r7, #8]
 8102ed4:	603b      	str	r3, [r7, #0]
 8102ed6:	4613      	mov	r3, r2
 8102ed8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102eda:	e022      	b.n	8102f22 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102edc:	683b      	ldr	r3, [r7, #0]
 8102ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102ee2:	d01e      	beq.n	8102f22 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102ee4:	f7ff f8ea 	bl	81020bc <HAL_GetTick>
 8102ee8:	4602      	mov	r2, r0
 8102eea:	69bb      	ldr	r3, [r7, #24]
 8102eec:	1ad3      	subs	r3, r2, r3
 8102eee:	683a      	ldr	r2, [r7, #0]
 8102ef0:	429a      	cmp	r2, r3
 8102ef2:	d302      	bcc.n	8102efa <I2C_WaitOnFlagUntilTimeout+0x30>
 8102ef4:	683b      	ldr	r3, [r7, #0]
 8102ef6:	2b00      	cmp	r3, #0
 8102ef8:	d113      	bne.n	8102f22 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102efa:	68fb      	ldr	r3, [r7, #12]
 8102efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102efe:	f043 0220 	orr.w	r2, r3, #32
 8102f02:	68fb      	ldr	r3, [r7, #12]
 8102f04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102f06:	68fb      	ldr	r3, [r7, #12]
 8102f08:	2220      	movs	r2, #32
 8102f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102f0e:	68fb      	ldr	r3, [r7, #12]
 8102f10:	2200      	movs	r2, #0
 8102f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102f16:	68fb      	ldr	r3, [r7, #12]
 8102f18:	2200      	movs	r2, #0
 8102f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8102f1e:	2301      	movs	r3, #1
 8102f20:	e00f      	b.n	8102f42 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102f22:	68fb      	ldr	r3, [r7, #12]
 8102f24:	681b      	ldr	r3, [r3, #0]
 8102f26:	699a      	ldr	r2, [r3, #24]
 8102f28:	68bb      	ldr	r3, [r7, #8]
 8102f2a:	4013      	ands	r3, r2
 8102f2c:	68ba      	ldr	r2, [r7, #8]
 8102f2e:	429a      	cmp	r2, r3
 8102f30:	bf0c      	ite	eq
 8102f32:	2301      	moveq	r3, #1
 8102f34:	2300      	movne	r3, #0
 8102f36:	b2db      	uxtb	r3, r3
 8102f38:	461a      	mov	r2, r3
 8102f3a:	79fb      	ldrb	r3, [r7, #7]
 8102f3c:	429a      	cmp	r2, r3
 8102f3e:	d0cd      	beq.n	8102edc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8102f40:	2300      	movs	r3, #0
}
 8102f42:	4618      	mov	r0, r3
 8102f44:	3710      	adds	r7, #16
 8102f46:	46bd      	mov	sp, r7
 8102f48:	bd80      	pop	{r7, pc}

08102f4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102f4a:	b580      	push	{r7, lr}
 8102f4c:	b084      	sub	sp, #16
 8102f4e:	af00      	add	r7, sp, #0
 8102f50:	60f8      	str	r0, [r7, #12]
 8102f52:	60b9      	str	r1, [r7, #8]
 8102f54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102f56:	e02c      	b.n	8102fb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102f58:	687a      	ldr	r2, [r7, #4]
 8102f5a:	68b9      	ldr	r1, [r7, #8]
 8102f5c:	68f8      	ldr	r0, [r7, #12]
 8102f5e:	f000 f8eb 	bl	8103138 <I2C_IsErrorOccurred>
 8102f62:	4603      	mov	r3, r0
 8102f64:	2b00      	cmp	r3, #0
 8102f66:	d001      	beq.n	8102f6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102f68:	2301      	movs	r3, #1
 8102f6a:	e02a      	b.n	8102fc2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102f6c:	68bb      	ldr	r3, [r7, #8]
 8102f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102f72:	d01e      	beq.n	8102fb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102f74:	f7ff f8a2 	bl	81020bc <HAL_GetTick>
 8102f78:	4602      	mov	r2, r0
 8102f7a:	687b      	ldr	r3, [r7, #4]
 8102f7c:	1ad3      	subs	r3, r2, r3
 8102f7e:	68ba      	ldr	r2, [r7, #8]
 8102f80:	429a      	cmp	r2, r3
 8102f82:	d302      	bcc.n	8102f8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8102f84:	68bb      	ldr	r3, [r7, #8]
 8102f86:	2b00      	cmp	r3, #0
 8102f88:	d113      	bne.n	8102fb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102f8a:	68fb      	ldr	r3, [r7, #12]
 8102f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102f8e:	f043 0220 	orr.w	r2, r3, #32
 8102f92:	68fb      	ldr	r3, [r7, #12]
 8102f94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102f96:	68fb      	ldr	r3, [r7, #12]
 8102f98:	2220      	movs	r2, #32
 8102f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102f9e:	68fb      	ldr	r3, [r7, #12]
 8102fa0:	2200      	movs	r2, #0
 8102fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102fa6:	68fb      	ldr	r3, [r7, #12]
 8102fa8:	2200      	movs	r2, #0
 8102faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102fae:	2301      	movs	r3, #1
 8102fb0:	e007      	b.n	8102fc2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102fb2:	68fb      	ldr	r3, [r7, #12]
 8102fb4:	681b      	ldr	r3, [r3, #0]
 8102fb6:	699b      	ldr	r3, [r3, #24]
 8102fb8:	f003 0302 	and.w	r3, r3, #2
 8102fbc:	2b02      	cmp	r3, #2
 8102fbe:	d1cb      	bne.n	8102f58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102fc0:	2300      	movs	r3, #0
}
 8102fc2:	4618      	mov	r0, r3
 8102fc4:	3710      	adds	r7, #16
 8102fc6:	46bd      	mov	sp, r7
 8102fc8:	bd80      	pop	{r7, pc}

08102fca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102fca:	b580      	push	{r7, lr}
 8102fcc:	b084      	sub	sp, #16
 8102fce:	af00      	add	r7, sp, #0
 8102fd0:	60f8      	str	r0, [r7, #12]
 8102fd2:	60b9      	str	r1, [r7, #8]
 8102fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102fd6:	e028      	b.n	810302a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102fd8:	687a      	ldr	r2, [r7, #4]
 8102fda:	68b9      	ldr	r1, [r7, #8]
 8102fdc:	68f8      	ldr	r0, [r7, #12]
 8102fde:	f000 f8ab 	bl	8103138 <I2C_IsErrorOccurred>
 8102fe2:	4603      	mov	r3, r0
 8102fe4:	2b00      	cmp	r3, #0
 8102fe6:	d001      	beq.n	8102fec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102fe8:	2301      	movs	r3, #1
 8102fea:	e026      	b.n	810303a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102fec:	f7ff f866 	bl	81020bc <HAL_GetTick>
 8102ff0:	4602      	mov	r2, r0
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	1ad3      	subs	r3, r2, r3
 8102ff6:	68ba      	ldr	r2, [r7, #8]
 8102ff8:	429a      	cmp	r2, r3
 8102ffa:	d302      	bcc.n	8103002 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102ffc:	68bb      	ldr	r3, [r7, #8]
 8102ffe:	2b00      	cmp	r3, #0
 8103000:	d113      	bne.n	810302a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103002:	68fb      	ldr	r3, [r7, #12]
 8103004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103006:	f043 0220 	orr.w	r2, r3, #32
 810300a:	68fb      	ldr	r3, [r7, #12]
 810300c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 810300e:	68fb      	ldr	r3, [r7, #12]
 8103010:	2220      	movs	r2, #32
 8103012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8103016:	68fb      	ldr	r3, [r7, #12]
 8103018:	2200      	movs	r2, #0
 810301a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810301e:	68fb      	ldr	r3, [r7, #12]
 8103020:	2200      	movs	r2, #0
 8103022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8103026:	2301      	movs	r3, #1
 8103028:	e007      	b.n	810303a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810302a:	68fb      	ldr	r3, [r7, #12]
 810302c:	681b      	ldr	r3, [r3, #0]
 810302e:	699b      	ldr	r3, [r3, #24]
 8103030:	f003 0320 	and.w	r3, r3, #32
 8103034:	2b20      	cmp	r3, #32
 8103036:	d1cf      	bne.n	8102fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8103038:	2300      	movs	r3, #0
}
 810303a:	4618      	mov	r0, r3
 810303c:	3710      	adds	r7, #16
 810303e:	46bd      	mov	sp, r7
 8103040:	bd80      	pop	{r7, pc}
	...

08103044 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103044:	b580      	push	{r7, lr}
 8103046:	b084      	sub	sp, #16
 8103048:	af00      	add	r7, sp, #0
 810304a:	60f8      	str	r0, [r7, #12]
 810304c:	60b9      	str	r1, [r7, #8]
 810304e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8103050:	e064      	b.n	810311c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103052:	687a      	ldr	r2, [r7, #4]
 8103054:	68b9      	ldr	r1, [r7, #8]
 8103056:	68f8      	ldr	r0, [r7, #12]
 8103058:	f000 f86e 	bl	8103138 <I2C_IsErrorOccurred>
 810305c:	4603      	mov	r3, r0
 810305e:	2b00      	cmp	r3, #0
 8103060:	d001      	beq.n	8103066 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103062:	2301      	movs	r3, #1
 8103064:	e062      	b.n	810312c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8103066:	68fb      	ldr	r3, [r7, #12]
 8103068:	681b      	ldr	r3, [r3, #0]
 810306a:	699b      	ldr	r3, [r3, #24]
 810306c:	f003 0320 	and.w	r3, r3, #32
 8103070:	2b20      	cmp	r3, #32
 8103072:	d138      	bne.n	81030e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8103074:	68fb      	ldr	r3, [r7, #12]
 8103076:	681b      	ldr	r3, [r3, #0]
 8103078:	699b      	ldr	r3, [r3, #24]
 810307a:	f003 0304 	and.w	r3, r3, #4
 810307e:	2b04      	cmp	r3, #4
 8103080:	d105      	bne.n	810308e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8103082:	68fb      	ldr	r3, [r7, #12]
 8103084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103086:	2b00      	cmp	r3, #0
 8103088:	d001      	beq.n	810308e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 810308a:	2300      	movs	r3, #0
 810308c:	e04e      	b.n	810312c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 810308e:	68fb      	ldr	r3, [r7, #12]
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	699b      	ldr	r3, [r3, #24]
 8103094:	f003 0310 	and.w	r3, r3, #16
 8103098:	2b10      	cmp	r3, #16
 810309a:	d107      	bne.n	81030ac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810309c:	68fb      	ldr	r3, [r7, #12]
 810309e:	681b      	ldr	r3, [r3, #0]
 81030a0:	2210      	movs	r2, #16
 81030a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 81030a4:	68fb      	ldr	r3, [r7, #12]
 81030a6:	2204      	movs	r2, #4
 81030a8:	645a      	str	r2, [r3, #68]	; 0x44
 81030aa:	e002      	b.n	81030b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81030ac:	68fb      	ldr	r3, [r7, #12]
 81030ae:	2200      	movs	r2, #0
 81030b0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81030b2:	68fb      	ldr	r3, [r7, #12]
 81030b4:	681b      	ldr	r3, [r3, #0]
 81030b6:	2220      	movs	r2, #32
 81030b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 81030ba:	68fb      	ldr	r3, [r7, #12]
 81030bc:	681b      	ldr	r3, [r3, #0]
 81030be:	6859      	ldr	r1, [r3, #4]
 81030c0:	68fb      	ldr	r3, [r7, #12]
 81030c2:	681a      	ldr	r2, [r3, #0]
 81030c4:	4b1b      	ldr	r3, [pc, #108]	; (8103134 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 81030c6:	400b      	ands	r3, r1
 81030c8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 81030ca:	68fb      	ldr	r3, [r7, #12]
 81030cc:	2220      	movs	r2, #32
 81030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81030d2:	68fb      	ldr	r3, [r7, #12]
 81030d4:	2200      	movs	r2, #0
 81030d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81030da:	68fb      	ldr	r3, [r7, #12]
 81030dc:	2200      	movs	r2, #0
 81030de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81030e2:	2301      	movs	r3, #1
 81030e4:	e022      	b.n	810312c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81030e6:	f7fe ffe9 	bl	81020bc <HAL_GetTick>
 81030ea:	4602      	mov	r2, r0
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	1ad3      	subs	r3, r2, r3
 81030f0:	68ba      	ldr	r2, [r7, #8]
 81030f2:	429a      	cmp	r2, r3
 81030f4:	d302      	bcc.n	81030fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 81030f6:	68bb      	ldr	r3, [r7, #8]
 81030f8:	2b00      	cmp	r3, #0
 81030fa:	d10f      	bne.n	810311c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81030fc:	68fb      	ldr	r3, [r7, #12]
 81030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103100:	f043 0220 	orr.w	r2, r3, #32
 8103104:	68fb      	ldr	r3, [r7, #12]
 8103106:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8103108:	68fb      	ldr	r3, [r7, #12]
 810310a:	2220      	movs	r2, #32
 810310c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8103110:	68fb      	ldr	r3, [r7, #12]
 8103112:	2200      	movs	r2, #0
 8103114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8103118:	2301      	movs	r3, #1
 810311a:	e007      	b.n	810312c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 810311c:	68fb      	ldr	r3, [r7, #12]
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	699b      	ldr	r3, [r3, #24]
 8103122:	f003 0304 	and.w	r3, r3, #4
 8103126:	2b04      	cmp	r3, #4
 8103128:	d193      	bne.n	8103052 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 810312a:	2300      	movs	r3, #0
}
 810312c:	4618      	mov	r0, r3
 810312e:	3710      	adds	r7, #16
 8103130:	46bd      	mov	sp, r7
 8103132:	bd80      	pop	{r7, pc}
 8103134:	fe00e800 	.word	0xfe00e800

08103138 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8103138:	b580      	push	{r7, lr}
 810313a:	b08a      	sub	sp, #40	; 0x28
 810313c:	af00      	add	r7, sp, #0
 810313e:	60f8      	str	r0, [r7, #12]
 8103140:	60b9      	str	r1, [r7, #8]
 8103142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103144:	2300      	movs	r3, #0
 8103146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 810314a:	68fb      	ldr	r3, [r7, #12]
 810314c:	681b      	ldr	r3, [r3, #0]
 810314e:	699b      	ldr	r3, [r3, #24]
 8103150:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8103152:	2300      	movs	r3, #0
 8103154:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 810315a:	69bb      	ldr	r3, [r7, #24]
 810315c:	f003 0310 	and.w	r3, r3, #16
 8103160:	2b00      	cmp	r3, #0
 8103162:	d075      	beq.n	8103250 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8103164:	68fb      	ldr	r3, [r7, #12]
 8103166:	681b      	ldr	r3, [r3, #0]
 8103168:	2210      	movs	r2, #16
 810316a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810316c:	e056      	b.n	810321c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810316e:	68bb      	ldr	r3, [r7, #8]
 8103170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103174:	d052      	beq.n	810321c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8103176:	f7fe ffa1 	bl	81020bc <HAL_GetTick>
 810317a:	4602      	mov	r2, r0
 810317c:	69fb      	ldr	r3, [r7, #28]
 810317e:	1ad3      	subs	r3, r2, r3
 8103180:	68ba      	ldr	r2, [r7, #8]
 8103182:	429a      	cmp	r2, r3
 8103184:	d302      	bcc.n	810318c <I2C_IsErrorOccurred+0x54>
 8103186:	68bb      	ldr	r3, [r7, #8]
 8103188:	2b00      	cmp	r3, #0
 810318a:	d147      	bne.n	810321c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 810318c:	68fb      	ldr	r3, [r7, #12]
 810318e:	681b      	ldr	r3, [r3, #0]
 8103190:	685b      	ldr	r3, [r3, #4]
 8103192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103196:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8103198:	68fb      	ldr	r3, [r7, #12]
 810319a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810319e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81031a0:	68fb      	ldr	r3, [r7, #12]
 81031a2:	681b      	ldr	r3, [r3, #0]
 81031a4:	699b      	ldr	r3, [r3, #24]
 81031a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81031aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81031ae:	d12e      	bne.n	810320e <I2C_IsErrorOccurred+0xd6>
 81031b0:	697b      	ldr	r3, [r7, #20]
 81031b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81031b6:	d02a      	beq.n	810320e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 81031b8:	7cfb      	ldrb	r3, [r7, #19]
 81031ba:	2b20      	cmp	r3, #32
 81031bc:	d027      	beq.n	810320e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81031be:	68fb      	ldr	r3, [r7, #12]
 81031c0:	681b      	ldr	r3, [r3, #0]
 81031c2:	685a      	ldr	r2, [r3, #4]
 81031c4:	68fb      	ldr	r3, [r7, #12]
 81031c6:	681b      	ldr	r3, [r3, #0]
 81031c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81031cc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 81031ce:	f7fe ff75 	bl	81020bc <HAL_GetTick>
 81031d2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81031d4:	e01b      	b.n	810320e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 81031d6:	f7fe ff71 	bl	81020bc <HAL_GetTick>
 81031da:	4602      	mov	r2, r0
 81031dc:	69fb      	ldr	r3, [r7, #28]
 81031de:	1ad3      	subs	r3, r2, r3
 81031e0:	2b19      	cmp	r3, #25
 81031e2:	d914      	bls.n	810320e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81031e4:	68fb      	ldr	r3, [r7, #12]
 81031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81031e8:	f043 0220 	orr.w	r2, r3, #32
 81031ec:	68fb      	ldr	r3, [r7, #12]
 81031ee:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 81031f0:	68fb      	ldr	r3, [r7, #12]
 81031f2:	2220      	movs	r2, #32
 81031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 81031f8:	68fb      	ldr	r3, [r7, #12]
 81031fa:	2200      	movs	r2, #0
 81031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8103200:	68fb      	ldr	r3, [r7, #12]
 8103202:	2200      	movs	r2, #0
 8103204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8103208:	2301      	movs	r3, #1
 810320a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810320e:	68fb      	ldr	r3, [r7, #12]
 8103210:	681b      	ldr	r3, [r3, #0]
 8103212:	699b      	ldr	r3, [r3, #24]
 8103214:	f003 0320 	and.w	r3, r3, #32
 8103218:	2b20      	cmp	r3, #32
 810321a:	d1dc      	bne.n	81031d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810321c:	68fb      	ldr	r3, [r7, #12]
 810321e:	681b      	ldr	r3, [r3, #0]
 8103220:	699b      	ldr	r3, [r3, #24]
 8103222:	f003 0320 	and.w	r3, r3, #32
 8103226:	2b20      	cmp	r3, #32
 8103228:	d003      	beq.n	8103232 <I2C_IsErrorOccurred+0xfa>
 810322a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810322e:	2b00      	cmp	r3, #0
 8103230:	d09d      	beq.n	810316e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8103232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103236:	2b00      	cmp	r3, #0
 8103238:	d103      	bne.n	8103242 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810323a:	68fb      	ldr	r3, [r7, #12]
 810323c:	681b      	ldr	r3, [r3, #0]
 810323e:	2220      	movs	r2, #32
 8103240:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8103242:	6a3b      	ldr	r3, [r7, #32]
 8103244:	f043 0304 	orr.w	r3, r3, #4
 8103248:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 810324a:	2301      	movs	r3, #1
 810324c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8103250:	68fb      	ldr	r3, [r7, #12]
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	699b      	ldr	r3, [r3, #24]
 8103256:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8103258:	69bb      	ldr	r3, [r7, #24]
 810325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810325e:	2b00      	cmp	r3, #0
 8103260:	d00b      	beq.n	810327a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8103262:	6a3b      	ldr	r3, [r7, #32]
 8103264:	f043 0301 	orr.w	r3, r3, #1
 8103268:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810326a:	68fb      	ldr	r3, [r7, #12]
 810326c:	681b      	ldr	r3, [r3, #0]
 810326e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103272:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103274:	2301      	movs	r3, #1
 8103276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810327a:	69bb      	ldr	r3, [r7, #24]
 810327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103280:	2b00      	cmp	r3, #0
 8103282:	d00b      	beq.n	810329c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8103284:	6a3b      	ldr	r3, [r7, #32]
 8103286:	f043 0308 	orr.w	r3, r3, #8
 810328a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810328c:	68fb      	ldr	r3, [r7, #12]
 810328e:	681b      	ldr	r3, [r3, #0]
 8103290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103294:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103296:	2301      	movs	r3, #1
 8103298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810329c:	69bb      	ldr	r3, [r7, #24]
 810329e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81032a2:	2b00      	cmp	r3, #0
 81032a4:	d00b      	beq.n	81032be <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 81032a6:	6a3b      	ldr	r3, [r7, #32]
 81032a8:	f043 0302 	orr.w	r3, r3, #2
 81032ac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81032ae:	68fb      	ldr	r3, [r7, #12]
 81032b0:	681b      	ldr	r3, [r3, #0]
 81032b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 81032b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81032b8:	2301      	movs	r3, #1
 81032ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 81032be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81032c2:	2b00      	cmp	r3, #0
 81032c4:	d01c      	beq.n	8103300 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81032c6:	68f8      	ldr	r0, [r7, #12]
 81032c8:	f7ff fddb 	bl	8102e82 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81032cc:	68fb      	ldr	r3, [r7, #12]
 81032ce:	681b      	ldr	r3, [r3, #0]
 81032d0:	6859      	ldr	r1, [r3, #4]
 81032d2:	68fb      	ldr	r3, [r7, #12]
 81032d4:	681a      	ldr	r2, [r3, #0]
 81032d6:	4b0d      	ldr	r3, [pc, #52]	; (810330c <I2C_IsErrorOccurred+0x1d4>)
 81032d8:	400b      	ands	r3, r1
 81032da:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 81032dc:	68fb      	ldr	r3, [r7, #12]
 81032de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81032e0:	6a3b      	ldr	r3, [r7, #32]
 81032e2:	431a      	orrs	r2, r3
 81032e4:	68fb      	ldr	r3, [r7, #12]
 81032e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81032e8:	68fb      	ldr	r3, [r7, #12]
 81032ea:	2220      	movs	r2, #32
 81032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81032f0:	68fb      	ldr	r3, [r7, #12]
 81032f2:	2200      	movs	r2, #0
 81032f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81032f8:	68fb      	ldr	r3, [r7, #12]
 81032fa:	2200      	movs	r2, #0
 81032fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8103300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8103304:	4618      	mov	r0, r3
 8103306:	3728      	adds	r7, #40	; 0x28
 8103308:	46bd      	mov	sp, r7
 810330a:	bd80      	pop	{r7, pc}
 810330c:	fe00e800 	.word	0xfe00e800

08103310 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8103310:	b480      	push	{r7}
 8103312:	b087      	sub	sp, #28
 8103314:	af00      	add	r7, sp, #0
 8103316:	60f8      	str	r0, [r7, #12]
 8103318:	607b      	str	r3, [r7, #4]
 810331a:	460b      	mov	r3, r1
 810331c:	817b      	strh	r3, [r7, #10]
 810331e:	4613      	mov	r3, r2
 8103320:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103322:	897b      	ldrh	r3, [r7, #10]
 8103324:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8103328:	7a7b      	ldrb	r3, [r7, #9]
 810332a:	041b      	lsls	r3, r3, #16
 810332c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103330:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103336:	6a3b      	ldr	r3, [r7, #32]
 8103338:	4313      	orrs	r3, r2
 810333a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810333e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8103340:	68fb      	ldr	r3, [r7, #12]
 8103342:	681b      	ldr	r3, [r3, #0]
 8103344:	685a      	ldr	r2, [r3, #4]
 8103346:	6a3b      	ldr	r3, [r7, #32]
 8103348:	0d5b      	lsrs	r3, r3, #21
 810334a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 810334e:	4b08      	ldr	r3, [pc, #32]	; (8103370 <I2C_TransferConfig+0x60>)
 8103350:	430b      	orrs	r3, r1
 8103352:	43db      	mvns	r3, r3
 8103354:	ea02 0103 	and.w	r1, r2, r3
 8103358:	68fb      	ldr	r3, [r7, #12]
 810335a:	681b      	ldr	r3, [r3, #0]
 810335c:	697a      	ldr	r2, [r7, #20]
 810335e:	430a      	orrs	r2, r1
 8103360:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8103362:	bf00      	nop
 8103364:	371c      	adds	r7, #28
 8103366:	46bd      	mov	sp, r7
 8103368:	f85d 7b04 	ldr.w	r7, [sp], #4
 810336c:	4770      	bx	lr
 810336e:	bf00      	nop
 8103370:	03ff63ff 	.word	0x03ff63ff

08103374 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8103374:	b480      	push	{r7}
 8103376:	b083      	sub	sp, #12
 8103378:	af00      	add	r7, sp, #0
 810337a:	6078      	str	r0, [r7, #4]
 810337c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810337e:	687b      	ldr	r3, [r7, #4]
 8103380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103384:	b2db      	uxtb	r3, r3
 8103386:	2b20      	cmp	r3, #32
 8103388:	d138      	bne.n	81033fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103390:	2b01      	cmp	r3, #1
 8103392:	d101      	bne.n	8103398 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8103394:	2302      	movs	r3, #2
 8103396:	e032      	b.n	81033fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8103398:	687b      	ldr	r3, [r7, #4]
 810339a:	2201      	movs	r2, #1
 810339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	2224      	movs	r2, #36	; 0x24
 81033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	681b      	ldr	r3, [r3, #0]
 81033ac:	681a      	ldr	r2, [r3, #0]
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	681b      	ldr	r3, [r3, #0]
 81033b2:	f022 0201 	bic.w	r2, r2, #1
 81033b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81033b8:	687b      	ldr	r3, [r7, #4]
 81033ba:	681b      	ldr	r3, [r3, #0]
 81033bc:	681a      	ldr	r2, [r3, #0]
 81033be:	687b      	ldr	r3, [r7, #4]
 81033c0:	681b      	ldr	r3, [r3, #0]
 81033c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81033c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81033c8:	687b      	ldr	r3, [r7, #4]
 81033ca:	681b      	ldr	r3, [r3, #0]
 81033cc:	6819      	ldr	r1, [r3, #0]
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	681b      	ldr	r3, [r3, #0]
 81033d2:	683a      	ldr	r2, [r7, #0]
 81033d4:	430a      	orrs	r2, r1
 81033d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81033d8:	687b      	ldr	r3, [r7, #4]
 81033da:	681b      	ldr	r3, [r3, #0]
 81033dc:	681a      	ldr	r2, [r3, #0]
 81033de:	687b      	ldr	r3, [r7, #4]
 81033e0:	681b      	ldr	r3, [r3, #0]
 81033e2:	f042 0201 	orr.w	r2, r2, #1
 81033e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	2220      	movs	r2, #32
 81033ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81033f0:	687b      	ldr	r3, [r7, #4]
 81033f2:	2200      	movs	r2, #0
 81033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81033f8:	2300      	movs	r3, #0
 81033fa:	e000      	b.n	81033fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81033fc:	2302      	movs	r3, #2
  }
}
 81033fe:	4618      	mov	r0, r3
 8103400:	370c      	adds	r7, #12
 8103402:	46bd      	mov	sp, r7
 8103404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103408:	4770      	bx	lr

0810340a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810340a:	b480      	push	{r7}
 810340c:	b085      	sub	sp, #20
 810340e:	af00      	add	r7, sp, #0
 8103410:	6078      	str	r0, [r7, #4]
 8103412:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810341a:	b2db      	uxtb	r3, r3
 810341c:	2b20      	cmp	r3, #32
 810341e:	d139      	bne.n	8103494 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103426:	2b01      	cmp	r3, #1
 8103428:	d101      	bne.n	810342e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810342a:	2302      	movs	r3, #2
 810342c:	e033      	b.n	8103496 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810342e:	687b      	ldr	r3, [r7, #4]
 8103430:	2201      	movs	r2, #1
 8103432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	2224      	movs	r2, #36	; 0x24
 810343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810343e:	687b      	ldr	r3, [r7, #4]
 8103440:	681b      	ldr	r3, [r3, #0]
 8103442:	681a      	ldr	r2, [r3, #0]
 8103444:	687b      	ldr	r3, [r7, #4]
 8103446:	681b      	ldr	r3, [r3, #0]
 8103448:	f022 0201 	bic.w	r2, r2, #1
 810344c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810344e:	687b      	ldr	r3, [r7, #4]
 8103450:	681b      	ldr	r3, [r3, #0]
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8103456:	68fb      	ldr	r3, [r7, #12]
 8103458:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810345c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810345e:	683b      	ldr	r3, [r7, #0]
 8103460:	021b      	lsls	r3, r3, #8
 8103462:	68fa      	ldr	r2, [r7, #12]
 8103464:	4313      	orrs	r3, r2
 8103466:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	681b      	ldr	r3, [r3, #0]
 810346c:	68fa      	ldr	r2, [r7, #12]
 810346e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	681b      	ldr	r3, [r3, #0]
 8103474:	681a      	ldr	r2, [r3, #0]
 8103476:	687b      	ldr	r3, [r7, #4]
 8103478:	681b      	ldr	r3, [r3, #0]
 810347a:	f042 0201 	orr.w	r2, r2, #1
 810347e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	2220      	movs	r2, #32
 8103484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	2200      	movs	r2, #0
 810348c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103490:	2300      	movs	r3, #0
 8103492:	e000      	b.n	8103496 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8103494:	2302      	movs	r3, #2
  }
}
 8103496:	4618      	mov	r0, r3
 8103498:	3714      	adds	r7, #20
 810349a:	46bd      	mov	sp, r7
 810349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034a0:	4770      	bx	lr
	...

081034a4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81034a4:	b580      	push	{r7, lr}
 81034a6:	b084      	sub	sp, #16
 81034a8:	af00      	add	r7, sp, #0
 81034aa:	60f8      	str	r0, [r7, #12]
 81034ac:	460b      	mov	r3, r1
 81034ae:	607a      	str	r2, [r7, #4]
 81034b0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81034b2:	4b37      	ldr	r3, [pc, #220]	; (8103590 <HAL_PWREx_EnterSTOPMode+0xec>)
 81034b4:	681b      	ldr	r3, [r3, #0]
 81034b6:	f023 0201 	bic.w	r2, r3, #1
 81034ba:	4935      	ldr	r1, [pc, #212]	; (8103590 <HAL_PWREx_EnterSTOPMode+0xec>)
 81034bc:	68fb      	ldr	r3, [r7, #12]
 81034be:	4313      	orrs	r3, r2
 81034c0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	2b00      	cmp	r3, #0
 81034c6:	d123      	bne.n	8103510 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81034c8:	f7fe ff44 	bl	8102354 <HAL_GetCurrentCPUID>
 81034cc:	4603      	mov	r3, r0
 81034ce:	2b03      	cmp	r3, #3
 81034d0:	d158      	bne.n	8103584 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81034d2:	4b2f      	ldr	r3, [pc, #188]	; (8103590 <HAL_PWREx_EnterSTOPMode+0xec>)
 81034d4:	691b      	ldr	r3, [r3, #16]
 81034d6:	4a2e      	ldr	r2, [pc, #184]	; (8103590 <HAL_PWREx_EnterSTOPMode+0xec>)
 81034d8:	f023 0301 	bic.w	r3, r3, #1
 81034dc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81034de:	4b2d      	ldr	r3, [pc, #180]	; (8103594 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81034e0:	691b      	ldr	r3, [r3, #16]
 81034e2:	4a2c      	ldr	r2, [pc, #176]	; (8103594 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81034e4:	f043 0304 	orr.w	r3, r3, #4
 81034e8:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81034ea:	f3bf 8f4f 	dsb	sy
}
 81034ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81034f0:	f3bf 8f6f 	isb	sy
}
 81034f4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81034f6:	7afb      	ldrb	r3, [r7, #11]
 81034f8:	2b01      	cmp	r3, #1
 81034fa:	d101      	bne.n	8103500 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81034fc:	bf30      	wfi
 81034fe:	e000      	b.n	8103502 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103500:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103502:	4b24      	ldr	r3, [pc, #144]	; (8103594 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103504:	691b      	ldr	r3, [r3, #16]
 8103506:	4a23      	ldr	r2, [pc, #140]	; (8103594 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103508:	f023 0304 	bic.w	r3, r3, #4
 810350c:	6113      	str	r3, [r2, #16]
 810350e:	e03c      	b.n	810358a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	2b01      	cmp	r3, #1
 8103514:	d123      	bne.n	810355e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103516:	f7fe ff1d 	bl	8102354 <HAL_GetCurrentCPUID>
 810351a:	4603      	mov	r3, r0
 810351c:	2b01      	cmp	r3, #1
 810351e:	d133      	bne.n	8103588 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103520:	4b1b      	ldr	r3, [pc, #108]	; (8103590 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103522:	695b      	ldr	r3, [r3, #20]
 8103524:	4a1a      	ldr	r2, [pc, #104]	; (8103590 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103526:	f023 0302 	bic.w	r3, r3, #2
 810352a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810352c:	4b19      	ldr	r3, [pc, #100]	; (8103594 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810352e:	691b      	ldr	r3, [r3, #16]
 8103530:	4a18      	ldr	r2, [pc, #96]	; (8103594 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103532:	f043 0304 	orr.w	r3, r3, #4
 8103536:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103538:	f3bf 8f4f 	dsb	sy
}
 810353c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810353e:	f3bf 8f6f 	isb	sy
}
 8103542:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103544:	7afb      	ldrb	r3, [r7, #11]
 8103546:	2b01      	cmp	r3, #1
 8103548:	d101      	bne.n	810354e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810354a:	bf30      	wfi
 810354c:	e000      	b.n	8103550 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810354e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103550:	4b10      	ldr	r3, [pc, #64]	; (8103594 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103552:	691b      	ldr	r3, [r3, #16]
 8103554:	4a0f      	ldr	r2, [pc, #60]	; (8103594 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103556:	f023 0304 	bic.w	r3, r3, #4
 810355a:	6113      	str	r3, [r2, #16]
 810355c:	e015      	b.n	810358a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810355e:	f7fe fef9 	bl	8102354 <HAL_GetCurrentCPUID>
 8103562:	4603      	mov	r3, r0
 8103564:	2b03      	cmp	r3, #3
 8103566:	d106      	bne.n	8103576 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103568:	4b09      	ldr	r3, [pc, #36]	; (8103590 <HAL_PWREx_EnterSTOPMode+0xec>)
 810356a:	691b      	ldr	r3, [r3, #16]
 810356c:	4a08      	ldr	r2, [pc, #32]	; (8103590 <HAL_PWREx_EnterSTOPMode+0xec>)
 810356e:	f023 0304 	bic.w	r3, r3, #4
 8103572:	6113      	str	r3, [r2, #16]
 8103574:	e009      	b.n	810358a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103576:	4b06      	ldr	r3, [pc, #24]	; (8103590 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103578:	695b      	ldr	r3, [r3, #20]
 810357a:	4a05      	ldr	r2, [pc, #20]	; (8103590 <HAL_PWREx_EnterSTOPMode+0xec>)
 810357c:	f023 0304 	bic.w	r3, r3, #4
 8103580:	6153      	str	r3, [r2, #20]
 8103582:	e002      	b.n	810358a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103584:	bf00      	nop
 8103586:	e000      	b.n	810358a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103588:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810358a:	3710      	adds	r7, #16
 810358c:	46bd      	mov	sp, r7
 810358e:	bd80      	pop	{r7, pc}
 8103590:	58024800 	.word	0x58024800
 8103594:	e000ed00 	.word	0xe000ed00

08103598 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103598:	b580      	push	{r7, lr}
 810359a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810359c:	f7fe feda 	bl	8102354 <HAL_GetCurrentCPUID>
 81035a0:	4603      	mov	r3, r0
 81035a2:	2b03      	cmp	r3, #3
 81035a4:	d101      	bne.n	81035aa <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81035a6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81035a8:	e001      	b.n	81035ae <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81035aa:	bf40      	sev
    __WFE ();
 81035ac:	bf20      	wfe
}
 81035ae:	bf00      	nop
 81035b0:	bd80      	pop	{r7, pc}
	...

081035b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 81035b4:	b580      	push	{r7, lr}
 81035b6:	b08c      	sub	sp, #48	; 0x30
 81035b8:	af00      	add	r7, sp, #0
 81035ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 81035bc:	687b      	ldr	r3, [r7, #4]
 81035be:	2b00      	cmp	r3, #0
 81035c0:	d102      	bne.n	81035c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 81035c2:	2301      	movs	r3, #1
 81035c4:	f000 bc1d 	b.w	8103e02 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 81035c8:	687b      	ldr	r3, [r7, #4]
 81035ca:	681b      	ldr	r3, [r3, #0]
 81035cc:	f003 0301 	and.w	r3, r3, #1
 81035d0:	2b00      	cmp	r3, #0
 81035d2:	f000 8087 	beq.w	81036e4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 81035d6:	4b99      	ldr	r3, [pc, #612]	; (810383c <HAL_RCC_OscConfig+0x288>)
 81035d8:	691b      	ldr	r3, [r3, #16]
 81035da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81035de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 81035e0:	4b96      	ldr	r3, [pc, #600]	; (810383c <HAL_RCC_OscConfig+0x288>)
 81035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81035e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 81035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81035e8:	2b10      	cmp	r3, #16
 81035ea:	d007      	beq.n	81035fc <HAL_RCC_OscConfig+0x48>
 81035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81035ee:	2b18      	cmp	r3, #24
 81035f0:	d110      	bne.n	8103614 <HAL_RCC_OscConfig+0x60>
 81035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81035f4:	f003 0303 	and.w	r3, r3, #3
 81035f8:	2b02      	cmp	r3, #2
 81035fa:	d10b      	bne.n	8103614 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 81035fc:	4b8f      	ldr	r3, [pc, #572]	; (810383c <HAL_RCC_OscConfig+0x288>)
 81035fe:	681b      	ldr	r3, [r3, #0]
 8103600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103604:	2b00      	cmp	r3, #0
 8103606:	d06c      	beq.n	81036e2 <HAL_RCC_OscConfig+0x12e>
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	685b      	ldr	r3, [r3, #4]
 810360c:	2b00      	cmp	r3, #0
 810360e:	d168      	bne.n	81036e2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8103610:	2301      	movs	r3, #1
 8103612:	e3f6      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	685b      	ldr	r3, [r3, #4]
 8103618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810361c:	d106      	bne.n	810362c <HAL_RCC_OscConfig+0x78>
 810361e:	4b87      	ldr	r3, [pc, #540]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103620:	681b      	ldr	r3, [r3, #0]
 8103622:	4a86      	ldr	r2, [pc, #536]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103628:	6013      	str	r3, [r2, #0]
 810362a:	e02e      	b.n	810368a <HAL_RCC_OscConfig+0xd6>
 810362c:	687b      	ldr	r3, [r7, #4]
 810362e:	685b      	ldr	r3, [r3, #4]
 8103630:	2b00      	cmp	r3, #0
 8103632:	d10c      	bne.n	810364e <HAL_RCC_OscConfig+0x9a>
 8103634:	4b81      	ldr	r3, [pc, #516]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103636:	681b      	ldr	r3, [r3, #0]
 8103638:	4a80      	ldr	r2, [pc, #512]	; (810383c <HAL_RCC_OscConfig+0x288>)
 810363a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810363e:	6013      	str	r3, [r2, #0]
 8103640:	4b7e      	ldr	r3, [pc, #504]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103642:	681b      	ldr	r3, [r3, #0]
 8103644:	4a7d      	ldr	r2, [pc, #500]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810364a:	6013      	str	r3, [r2, #0]
 810364c:	e01d      	b.n	810368a <HAL_RCC_OscConfig+0xd6>
 810364e:	687b      	ldr	r3, [r7, #4]
 8103650:	685b      	ldr	r3, [r3, #4]
 8103652:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103656:	d10c      	bne.n	8103672 <HAL_RCC_OscConfig+0xbe>
 8103658:	4b78      	ldr	r3, [pc, #480]	; (810383c <HAL_RCC_OscConfig+0x288>)
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	4a77      	ldr	r2, [pc, #476]	; (810383c <HAL_RCC_OscConfig+0x288>)
 810365e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8103662:	6013      	str	r3, [r2, #0]
 8103664:	4b75      	ldr	r3, [pc, #468]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103666:	681b      	ldr	r3, [r3, #0]
 8103668:	4a74      	ldr	r2, [pc, #464]	; (810383c <HAL_RCC_OscConfig+0x288>)
 810366a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810366e:	6013      	str	r3, [r2, #0]
 8103670:	e00b      	b.n	810368a <HAL_RCC_OscConfig+0xd6>
 8103672:	4b72      	ldr	r3, [pc, #456]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103674:	681b      	ldr	r3, [r3, #0]
 8103676:	4a71      	ldr	r2, [pc, #452]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810367c:	6013      	str	r3, [r2, #0]
 810367e:	4b6f      	ldr	r3, [pc, #444]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103680:	681b      	ldr	r3, [r3, #0]
 8103682:	4a6e      	ldr	r2, [pc, #440]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8103688:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 810368a:	687b      	ldr	r3, [r7, #4]
 810368c:	685b      	ldr	r3, [r3, #4]
 810368e:	2b00      	cmp	r3, #0
 8103690:	d013      	beq.n	81036ba <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103692:	f7fe fd13 	bl	81020bc <HAL_GetTick>
 8103696:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8103698:	e008      	b.n	81036ac <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 810369a:	f7fe fd0f 	bl	81020bc <HAL_GetTick>
 810369e:	4602      	mov	r2, r0
 81036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81036a2:	1ad3      	subs	r3, r2, r3
 81036a4:	2b64      	cmp	r3, #100	; 0x64
 81036a6:	d901      	bls.n	81036ac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 81036a8:	2303      	movs	r3, #3
 81036aa:	e3aa      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 81036ac:	4b63      	ldr	r3, [pc, #396]	; (810383c <HAL_RCC_OscConfig+0x288>)
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81036b4:	2b00      	cmp	r3, #0
 81036b6:	d0f0      	beq.n	810369a <HAL_RCC_OscConfig+0xe6>
 81036b8:	e014      	b.n	81036e4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81036ba:	f7fe fcff 	bl	81020bc <HAL_GetTick>
 81036be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 81036c0:	e008      	b.n	81036d4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 81036c2:	f7fe fcfb 	bl	81020bc <HAL_GetTick>
 81036c6:	4602      	mov	r2, r0
 81036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81036ca:	1ad3      	subs	r3, r2, r3
 81036cc:	2b64      	cmp	r3, #100	; 0x64
 81036ce:	d901      	bls.n	81036d4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 81036d0:	2303      	movs	r3, #3
 81036d2:	e396      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 81036d4:	4b59      	ldr	r3, [pc, #356]	; (810383c <HAL_RCC_OscConfig+0x288>)
 81036d6:	681b      	ldr	r3, [r3, #0]
 81036d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81036dc:	2b00      	cmp	r3, #0
 81036de:	d1f0      	bne.n	81036c2 <HAL_RCC_OscConfig+0x10e>
 81036e0:	e000      	b.n	81036e4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 81036e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 81036e4:	687b      	ldr	r3, [r7, #4]
 81036e6:	681b      	ldr	r3, [r3, #0]
 81036e8:	f003 0302 	and.w	r3, r3, #2
 81036ec:	2b00      	cmp	r3, #0
 81036ee:	f000 80cb 	beq.w	8103888 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 81036f2:	4b52      	ldr	r3, [pc, #328]	; (810383c <HAL_RCC_OscConfig+0x288>)
 81036f4:	691b      	ldr	r3, [r3, #16]
 81036f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81036fa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 81036fc:	4b4f      	ldr	r3, [pc, #316]	; (810383c <HAL_RCC_OscConfig+0x288>)
 81036fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103700:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8103702:	6a3b      	ldr	r3, [r7, #32]
 8103704:	2b00      	cmp	r3, #0
 8103706:	d007      	beq.n	8103718 <HAL_RCC_OscConfig+0x164>
 8103708:	6a3b      	ldr	r3, [r7, #32]
 810370a:	2b18      	cmp	r3, #24
 810370c:	d156      	bne.n	81037bc <HAL_RCC_OscConfig+0x208>
 810370e:	69fb      	ldr	r3, [r7, #28]
 8103710:	f003 0303 	and.w	r3, r3, #3
 8103714:	2b00      	cmp	r3, #0
 8103716:	d151      	bne.n	81037bc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8103718:	4b48      	ldr	r3, [pc, #288]	; (810383c <HAL_RCC_OscConfig+0x288>)
 810371a:	681b      	ldr	r3, [r3, #0]
 810371c:	f003 0304 	and.w	r3, r3, #4
 8103720:	2b00      	cmp	r3, #0
 8103722:	d005      	beq.n	8103730 <HAL_RCC_OscConfig+0x17c>
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	68db      	ldr	r3, [r3, #12]
 8103728:	2b00      	cmp	r3, #0
 810372a:	d101      	bne.n	8103730 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 810372c:	2301      	movs	r3, #1
 810372e:	e368      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8103730:	4b42      	ldr	r3, [pc, #264]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103732:	681b      	ldr	r3, [r3, #0]
 8103734:	f023 0219 	bic.w	r2, r3, #25
 8103738:	687b      	ldr	r3, [r7, #4]
 810373a:	68db      	ldr	r3, [r3, #12]
 810373c:	493f      	ldr	r1, [pc, #252]	; (810383c <HAL_RCC_OscConfig+0x288>)
 810373e:	4313      	orrs	r3, r2
 8103740:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8103742:	f7fe fcbb 	bl	81020bc <HAL_GetTick>
 8103746:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8103748:	e008      	b.n	810375c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 810374a:	f7fe fcb7 	bl	81020bc <HAL_GetTick>
 810374e:	4602      	mov	r2, r0
 8103750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103752:	1ad3      	subs	r3, r2, r3
 8103754:	2b02      	cmp	r3, #2
 8103756:	d901      	bls.n	810375c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8103758:	2303      	movs	r3, #3
 810375a:	e352      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 810375c:	4b37      	ldr	r3, [pc, #220]	; (810383c <HAL_RCC_OscConfig+0x288>)
 810375e:	681b      	ldr	r3, [r3, #0]
 8103760:	f003 0304 	and.w	r3, r3, #4
 8103764:	2b00      	cmp	r3, #0
 8103766:	d0f0      	beq.n	810374a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8103768:	f7fe fcd8 	bl	810211c <HAL_GetREVID>
 810376c:	4603      	mov	r3, r0
 810376e:	f241 0203 	movw	r2, #4099	; 0x1003
 8103772:	4293      	cmp	r3, r2
 8103774:	d817      	bhi.n	81037a6 <HAL_RCC_OscConfig+0x1f2>
 8103776:	687b      	ldr	r3, [r7, #4]
 8103778:	691b      	ldr	r3, [r3, #16]
 810377a:	2b40      	cmp	r3, #64	; 0x40
 810377c:	d108      	bne.n	8103790 <HAL_RCC_OscConfig+0x1dc>
 810377e:	4b2f      	ldr	r3, [pc, #188]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103780:	685b      	ldr	r3, [r3, #4]
 8103782:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8103786:	4a2d      	ldr	r2, [pc, #180]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810378c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 810378e:	e07b      	b.n	8103888 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8103790:	4b2a      	ldr	r3, [pc, #168]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103792:	685b      	ldr	r3, [r3, #4]
 8103794:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	691b      	ldr	r3, [r3, #16]
 810379c:	031b      	lsls	r3, r3, #12
 810379e:	4927      	ldr	r1, [pc, #156]	; (810383c <HAL_RCC_OscConfig+0x288>)
 81037a0:	4313      	orrs	r3, r2
 81037a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 81037a4:	e070      	b.n	8103888 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 81037a6:	4b25      	ldr	r3, [pc, #148]	; (810383c <HAL_RCC_OscConfig+0x288>)
 81037a8:	685b      	ldr	r3, [r3, #4]
 81037aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	691b      	ldr	r3, [r3, #16]
 81037b2:	061b      	lsls	r3, r3, #24
 81037b4:	4921      	ldr	r1, [pc, #132]	; (810383c <HAL_RCC_OscConfig+0x288>)
 81037b6:	4313      	orrs	r3, r2
 81037b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 81037ba:	e065      	b.n	8103888 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	68db      	ldr	r3, [r3, #12]
 81037c0:	2b00      	cmp	r3, #0
 81037c2:	d048      	beq.n	8103856 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 81037c4:	4b1d      	ldr	r3, [pc, #116]	; (810383c <HAL_RCC_OscConfig+0x288>)
 81037c6:	681b      	ldr	r3, [r3, #0]
 81037c8:	f023 0219 	bic.w	r2, r3, #25
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	68db      	ldr	r3, [r3, #12]
 81037d0:	491a      	ldr	r1, [pc, #104]	; (810383c <HAL_RCC_OscConfig+0x288>)
 81037d2:	4313      	orrs	r3, r2
 81037d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81037d6:	f7fe fc71 	bl	81020bc <HAL_GetTick>
 81037da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 81037dc:	e008      	b.n	81037f0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 81037de:	f7fe fc6d 	bl	81020bc <HAL_GetTick>
 81037e2:	4602      	mov	r2, r0
 81037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81037e6:	1ad3      	subs	r3, r2, r3
 81037e8:	2b02      	cmp	r3, #2
 81037ea:	d901      	bls.n	81037f0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 81037ec:	2303      	movs	r3, #3
 81037ee:	e308      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 81037f0:	4b12      	ldr	r3, [pc, #72]	; (810383c <HAL_RCC_OscConfig+0x288>)
 81037f2:	681b      	ldr	r3, [r3, #0]
 81037f4:	f003 0304 	and.w	r3, r3, #4
 81037f8:	2b00      	cmp	r3, #0
 81037fa:	d0f0      	beq.n	81037de <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 81037fc:	f7fe fc8e 	bl	810211c <HAL_GetREVID>
 8103800:	4603      	mov	r3, r0
 8103802:	f241 0203 	movw	r2, #4099	; 0x1003
 8103806:	4293      	cmp	r3, r2
 8103808:	d81a      	bhi.n	8103840 <HAL_RCC_OscConfig+0x28c>
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	691b      	ldr	r3, [r3, #16]
 810380e:	2b40      	cmp	r3, #64	; 0x40
 8103810:	d108      	bne.n	8103824 <HAL_RCC_OscConfig+0x270>
 8103812:	4b0a      	ldr	r3, [pc, #40]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103814:	685b      	ldr	r3, [r3, #4]
 8103816:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 810381a:	4a08      	ldr	r2, [pc, #32]	; (810383c <HAL_RCC_OscConfig+0x288>)
 810381c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103820:	6053      	str	r3, [r2, #4]
 8103822:	e031      	b.n	8103888 <HAL_RCC_OscConfig+0x2d4>
 8103824:	4b05      	ldr	r3, [pc, #20]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103826:	685b      	ldr	r3, [r3, #4]
 8103828:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	691b      	ldr	r3, [r3, #16]
 8103830:	031b      	lsls	r3, r3, #12
 8103832:	4902      	ldr	r1, [pc, #8]	; (810383c <HAL_RCC_OscConfig+0x288>)
 8103834:	4313      	orrs	r3, r2
 8103836:	604b      	str	r3, [r1, #4]
 8103838:	e026      	b.n	8103888 <HAL_RCC_OscConfig+0x2d4>
 810383a:	bf00      	nop
 810383c:	58024400 	.word	0x58024400
 8103840:	4b9a      	ldr	r3, [pc, #616]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103842:	685b      	ldr	r3, [r3, #4]
 8103844:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	691b      	ldr	r3, [r3, #16]
 810384c:	061b      	lsls	r3, r3, #24
 810384e:	4997      	ldr	r1, [pc, #604]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103850:	4313      	orrs	r3, r2
 8103852:	604b      	str	r3, [r1, #4]
 8103854:	e018      	b.n	8103888 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8103856:	4b95      	ldr	r3, [pc, #596]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103858:	681b      	ldr	r3, [r3, #0]
 810385a:	4a94      	ldr	r2, [pc, #592]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 810385c:	f023 0301 	bic.w	r3, r3, #1
 8103860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103862:	f7fe fc2b 	bl	81020bc <HAL_GetTick>
 8103866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8103868:	e008      	b.n	810387c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 810386a:	f7fe fc27 	bl	81020bc <HAL_GetTick>
 810386e:	4602      	mov	r2, r0
 8103870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103872:	1ad3      	subs	r3, r2, r3
 8103874:	2b02      	cmp	r3, #2
 8103876:	d901      	bls.n	810387c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8103878:	2303      	movs	r3, #3
 810387a:	e2c2      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 810387c:	4b8b      	ldr	r3, [pc, #556]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 810387e:	681b      	ldr	r3, [r3, #0]
 8103880:	f003 0304 	and.w	r3, r3, #4
 8103884:	2b00      	cmp	r3, #0
 8103886:	d1f0      	bne.n	810386a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	681b      	ldr	r3, [r3, #0]
 810388c:	f003 0310 	and.w	r3, r3, #16
 8103890:	2b00      	cmp	r3, #0
 8103892:	f000 80a9 	beq.w	81039e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8103896:	4b85      	ldr	r3, [pc, #532]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103898:	691b      	ldr	r3, [r3, #16]
 810389a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810389e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 81038a0:	4b82      	ldr	r3, [pc, #520]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 81038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81038a4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 81038a6:	69bb      	ldr	r3, [r7, #24]
 81038a8:	2b08      	cmp	r3, #8
 81038aa:	d007      	beq.n	81038bc <HAL_RCC_OscConfig+0x308>
 81038ac:	69bb      	ldr	r3, [r7, #24]
 81038ae:	2b18      	cmp	r3, #24
 81038b0:	d13a      	bne.n	8103928 <HAL_RCC_OscConfig+0x374>
 81038b2:	697b      	ldr	r3, [r7, #20]
 81038b4:	f003 0303 	and.w	r3, r3, #3
 81038b8:	2b01      	cmp	r3, #1
 81038ba:	d135      	bne.n	8103928 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 81038bc:	4b7b      	ldr	r3, [pc, #492]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81038c4:	2b00      	cmp	r3, #0
 81038c6:	d005      	beq.n	81038d4 <HAL_RCC_OscConfig+0x320>
 81038c8:	687b      	ldr	r3, [r7, #4]
 81038ca:	69db      	ldr	r3, [r3, #28]
 81038cc:	2b80      	cmp	r3, #128	; 0x80
 81038ce:	d001      	beq.n	81038d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 81038d0:	2301      	movs	r3, #1
 81038d2:	e296      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 81038d4:	f7fe fc22 	bl	810211c <HAL_GetREVID>
 81038d8:	4603      	mov	r3, r0
 81038da:	f241 0203 	movw	r2, #4099	; 0x1003
 81038de:	4293      	cmp	r3, r2
 81038e0:	d817      	bhi.n	8103912 <HAL_RCC_OscConfig+0x35e>
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	6a1b      	ldr	r3, [r3, #32]
 81038e6:	2b20      	cmp	r3, #32
 81038e8:	d108      	bne.n	81038fc <HAL_RCC_OscConfig+0x348>
 81038ea:	4b70      	ldr	r3, [pc, #448]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 81038ec:	685b      	ldr	r3, [r3, #4]
 81038ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 81038f2:	4a6e      	ldr	r2, [pc, #440]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 81038f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81038f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 81038fa:	e075      	b.n	81039e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 81038fc:	4b6b      	ldr	r3, [pc, #428]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 81038fe:	685b      	ldr	r3, [r3, #4]
 8103900:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8103904:	687b      	ldr	r3, [r7, #4]
 8103906:	6a1b      	ldr	r3, [r3, #32]
 8103908:	069b      	lsls	r3, r3, #26
 810390a:	4968      	ldr	r1, [pc, #416]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 810390c:	4313      	orrs	r3, r2
 810390e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8103910:	e06a      	b.n	81039e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8103912:	4b66      	ldr	r3, [pc, #408]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103914:	68db      	ldr	r3, [r3, #12]
 8103916:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 810391a:	687b      	ldr	r3, [r7, #4]
 810391c:	6a1b      	ldr	r3, [r3, #32]
 810391e:	061b      	lsls	r3, r3, #24
 8103920:	4962      	ldr	r1, [pc, #392]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103922:	4313      	orrs	r3, r2
 8103924:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8103926:	e05f      	b.n	81039e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8103928:	687b      	ldr	r3, [r7, #4]
 810392a:	69db      	ldr	r3, [r3, #28]
 810392c:	2b00      	cmp	r3, #0
 810392e:	d042      	beq.n	81039b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8103930:	4b5e      	ldr	r3, [pc, #376]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103932:	681b      	ldr	r3, [r3, #0]
 8103934:	4a5d      	ldr	r2, [pc, #372]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810393a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810393c:	f7fe fbbe 	bl	81020bc <HAL_GetTick>
 8103940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8103942:	e008      	b.n	8103956 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8103944:	f7fe fbba 	bl	81020bc <HAL_GetTick>
 8103948:	4602      	mov	r2, r0
 810394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810394c:	1ad3      	subs	r3, r2, r3
 810394e:	2b02      	cmp	r3, #2
 8103950:	d901      	bls.n	8103956 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8103952:	2303      	movs	r3, #3
 8103954:	e255      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8103956:	4b55      	ldr	r3, [pc, #340]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103958:	681b      	ldr	r3, [r3, #0]
 810395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810395e:	2b00      	cmp	r3, #0
 8103960:	d0f0      	beq.n	8103944 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8103962:	f7fe fbdb 	bl	810211c <HAL_GetREVID>
 8103966:	4603      	mov	r3, r0
 8103968:	f241 0203 	movw	r2, #4099	; 0x1003
 810396c:	4293      	cmp	r3, r2
 810396e:	d817      	bhi.n	81039a0 <HAL_RCC_OscConfig+0x3ec>
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	6a1b      	ldr	r3, [r3, #32]
 8103974:	2b20      	cmp	r3, #32
 8103976:	d108      	bne.n	810398a <HAL_RCC_OscConfig+0x3d6>
 8103978:	4b4c      	ldr	r3, [pc, #304]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 810397a:	685b      	ldr	r3, [r3, #4]
 810397c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8103980:	4a4a      	ldr	r2, [pc, #296]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8103986:	6053      	str	r3, [r2, #4]
 8103988:	e02e      	b.n	81039e8 <HAL_RCC_OscConfig+0x434>
 810398a:	4b48      	ldr	r3, [pc, #288]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 810398c:	685b      	ldr	r3, [r3, #4]
 810398e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8103992:	687b      	ldr	r3, [r7, #4]
 8103994:	6a1b      	ldr	r3, [r3, #32]
 8103996:	069b      	lsls	r3, r3, #26
 8103998:	4944      	ldr	r1, [pc, #272]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 810399a:	4313      	orrs	r3, r2
 810399c:	604b      	str	r3, [r1, #4]
 810399e:	e023      	b.n	81039e8 <HAL_RCC_OscConfig+0x434>
 81039a0:	4b42      	ldr	r3, [pc, #264]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 81039a2:	68db      	ldr	r3, [r3, #12]
 81039a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	6a1b      	ldr	r3, [r3, #32]
 81039ac:	061b      	lsls	r3, r3, #24
 81039ae:	493f      	ldr	r1, [pc, #252]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 81039b0:	4313      	orrs	r3, r2
 81039b2:	60cb      	str	r3, [r1, #12]
 81039b4:	e018      	b.n	81039e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 81039b6:	4b3d      	ldr	r3, [pc, #244]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 81039b8:	681b      	ldr	r3, [r3, #0]
 81039ba:	4a3c      	ldr	r2, [pc, #240]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 81039bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81039c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81039c2:	f7fe fb7b 	bl	81020bc <HAL_GetTick>
 81039c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 81039c8:	e008      	b.n	81039dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 81039ca:	f7fe fb77 	bl	81020bc <HAL_GetTick>
 81039ce:	4602      	mov	r2, r0
 81039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81039d2:	1ad3      	subs	r3, r2, r3
 81039d4:	2b02      	cmp	r3, #2
 81039d6:	d901      	bls.n	81039dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 81039d8:	2303      	movs	r3, #3
 81039da:	e212      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 81039dc:	4b33      	ldr	r3, [pc, #204]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 81039de:	681b      	ldr	r3, [r3, #0]
 81039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81039e4:	2b00      	cmp	r3, #0
 81039e6:	d1f0      	bne.n	81039ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	681b      	ldr	r3, [r3, #0]
 81039ec:	f003 0308 	and.w	r3, r3, #8
 81039f0:	2b00      	cmp	r3, #0
 81039f2:	d036      	beq.n	8103a62 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	695b      	ldr	r3, [r3, #20]
 81039f8:	2b00      	cmp	r3, #0
 81039fa:	d019      	beq.n	8103a30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 81039fc:	4b2b      	ldr	r3, [pc, #172]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 81039fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103a00:	4a2a      	ldr	r2, [pc, #168]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103a02:	f043 0301 	orr.w	r3, r3, #1
 8103a06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8103a08:	f7fe fb58 	bl	81020bc <HAL_GetTick>
 8103a0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8103a0e:	e008      	b.n	8103a22 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8103a10:	f7fe fb54 	bl	81020bc <HAL_GetTick>
 8103a14:	4602      	mov	r2, r0
 8103a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103a18:	1ad3      	subs	r3, r2, r3
 8103a1a:	2b02      	cmp	r3, #2
 8103a1c:	d901      	bls.n	8103a22 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8103a1e:	2303      	movs	r3, #3
 8103a20:	e1ef      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8103a22:	4b22      	ldr	r3, [pc, #136]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103a26:	f003 0302 	and.w	r3, r3, #2
 8103a2a:	2b00      	cmp	r3, #0
 8103a2c:	d0f0      	beq.n	8103a10 <HAL_RCC_OscConfig+0x45c>
 8103a2e:	e018      	b.n	8103a62 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8103a30:	4b1e      	ldr	r3, [pc, #120]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103a34:	4a1d      	ldr	r2, [pc, #116]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103a36:	f023 0301 	bic.w	r3, r3, #1
 8103a3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8103a3c:	f7fe fb3e 	bl	81020bc <HAL_GetTick>
 8103a40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8103a42:	e008      	b.n	8103a56 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8103a44:	f7fe fb3a 	bl	81020bc <HAL_GetTick>
 8103a48:	4602      	mov	r2, r0
 8103a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103a4c:	1ad3      	subs	r3, r2, r3
 8103a4e:	2b02      	cmp	r3, #2
 8103a50:	d901      	bls.n	8103a56 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8103a52:	2303      	movs	r3, #3
 8103a54:	e1d5      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8103a56:	4b15      	ldr	r3, [pc, #84]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103a5a:	f003 0302 	and.w	r3, r3, #2
 8103a5e:	2b00      	cmp	r3, #0
 8103a60:	d1f0      	bne.n	8103a44 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	681b      	ldr	r3, [r3, #0]
 8103a66:	f003 0320 	and.w	r3, r3, #32
 8103a6a:	2b00      	cmp	r3, #0
 8103a6c:	d039      	beq.n	8103ae2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	699b      	ldr	r3, [r3, #24]
 8103a72:	2b00      	cmp	r3, #0
 8103a74:	d01c      	beq.n	8103ab0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8103a76:	4b0d      	ldr	r3, [pc, #52]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103a78:	681b      	ldr	r3, [r3, #0]
 8103a7a:	4a0c      	ldr	r2, [pc, #48]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8103a80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8103a82:	f7fe fb1b 	bl	81020bc <HAL_GetTick>
 8103a86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8103a88:	e008      	b.n	8103a9c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8103a8a:	f7fe fb17 	bl	81020bc <HAL_GetTick>
 8103a8e:	4602      	mov	r2, r0
 8103a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103a92:	1ad3      	subs	r3, r2, r3
 8103a94:	2b02      	cmp	r3, #2
 8103a96:	d901      	bls.n	8103a9c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8103a98:	2303      	movs	r3, #3
 8103a9a:	e1b2      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8103a9c:	4b03      	ldr	r3, [pc, #12]	; (8103aac <HAL_RCC_OscConfig+0x4f8>)
 8103a9e:	681b      	ldr	r3, [r3, #0]
 8103aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103aa4:	2b00      	cmp	r3, #0
 8103aa6:	d0f0      	beq.n	8103a8a <HAL_RCC_OscConfig+0x4d6>
 8103aa8:	e01b      	b.n	8103ae2 <HAL_RCC_OscConfig+0x52e>
 8103aaa:	bf00      	nop
 8103aac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8103ab0:	4b9d      	ldr	r3, [pc, #628]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103ab2:	681b      	ldr	r3, [r3, #0]
 8103ab4:	4a9c      	ldr	r2, [pc, #624]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8103aba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8103abc:	f7fe fafe 	bl	81020bc <HAL_GetTick>
 8103ac0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8103ac2:	e008      	b.n	8103ad6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8103ac4:	f7fe fafa 	bl	81020bc <HAL_GetTick>
 8103ac8:	4602      	mov	r2, r0
 8103aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103acc:	1ad3      	subs	r3, r2, r3
 8103ace:	2b02      	cmp	r3, #2
 8103ad0:	d901      	bls.n	8103ad6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8103ad2:	2303      	movs	r3, #3
 8103ad4:	e195      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8103ad6:	4b94      	ldr	r3, [pc, #592]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103ad8:	681b      	ldr	r3, [r3, #0]
 8103ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103ade:	2b00      	cmp	r3, #0
 8103ae0:	d1f0      	bne.n	8103ac4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8103ae2:	687b      	ldr	r3, [r7, #4]
 8103ae4:	681b      	ldr	r3, [r3, #0]
 8103ae6:	f003 0304 	and.w	r3, r3, #4
 8103aea:	2b00      	cmp	r3, #0
 8103aec:	f000 8081 	beq.w	8103bf2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8103af0:	4b8e      	ldr	r3, [pc, #568]	; (8103d2c <HAL_RCC_OscConfig+0x778>)
 8103af2:	681b      	ldr	r3, [r3, #0]
 8103af4:	4a8d      	ldr	r2, [pc, #564]	; (8103d2c <HAL_RCC_OscConfig+0x778>)
 8103af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103afa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103afc:	f7fe fade 	bl	81020bc <HAL_GetTick>
 8103b00:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103b02:	e008      	b.n	8103b16 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8103b04:	f7fe fada 	bl	81020bc <HAL_GetTick>
 8103b08:	4602      	mov	r2, r0
 8103b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103b0c:	1ad3      	subs	r3, r2, r3
 8103b0e:	2b64      	cmp	r3, #100	; 0x64
 8103b10:	d901      	bls.n	8103b16 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8103b12:	2303      	movs	r3, #3
 8103b14:	e175      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103b16:	4b85      	ldr	r3, [pc, #532]	; (8103d2c <HAL_RCC_OscConfig+0x778>)
 8103b18:	681b      	ldr	r3, [r3, #0]
 8103b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103b1e:	2b00      	cmp	r3, #0
 8103b20:	d0f0      	beq.n	8103b04 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	689b      	ldr	r3, [r3, #8]
 8103b26:	2b01      	cmp	r3, #1
 8103b28:	d106      	bne.n	8103b38 <HAL_RCC_OscConfig+0x584>
 8103b2a:	4b7f      	ldr	r3, [pc, #508]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103b2e:	4a7e      	ldr	r2, [pc, #504]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103b30:	f043 0301 	orr.w	r3, r3, #1
 8103b34:	6713      	str	r3, [r2, #112]	; 0x70
 8103b36:	e02d      	b.n	8103b94 <HAL_RCC_OscConfig+0x5e0>
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	689b      	ldr	r3, [r3, #8]
 8103b3c:	2b00      	cmp	r3, #0
 8103b3e:	d10c      	bne.n	8103b5a <HAL_RCC_OscConfig+0x5a6>
 8103b40:	4b79      	ldr	r3, [pc, #484]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103b44:	4a78      	ldr	r2, [pc, #480]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103b46:	f023 0301 	bic.w	r3, r3, #1
 8103b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8103b4c:	4b76      	ldr	r3, [pc, #472]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103b50:	4a75      	ldr	r2, [pc, #468]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103b52:	f023 0304 	bic.w	r3, r3, #4
 8103b56:	6713      	str	r3, [r2, #112]	; 0x70
 8103b58:	e01c      	b.n	8103b94 <HAL_RCC_OscConfig+0x5e0>
 8103b5a:	687b      	ldr	r3, [r7, #4]
 8103b5c:	689b      	ldr	r3, [r3, #8]
 8103b5e:	2b05      	cmp	r3, #5
 8103b60:	d10c      	bne.n	8103b7c <HAL_RCC_OscConfig+0x5c8>
 8103b62:	4b71      	ldr	r3, [pc, #452]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103b66:	4a70      	ldr	r2, [pc, #448]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103b68:	f043 0304 	orr.w	r3, r3, #4
 8103b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8103b6e:	4b6e      	ldr	r3, [pc, #440]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103b72:	4a6d      	ldr	r2, [pc, #436]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103b74:	f043 0301 	orr.w	r3, r3, #1
 8103b78:	6713      	str	r3, [r2, #112]	; 0x70
 8103b7a:	e00b      	b.n	8103b94 <HAL_RCC_OscConfig+0x5e0>
 8103b7c:	4b6a      	ldr	r3, [pc, #424]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103b80:	4a69      	ldr	r2, [pc, #420]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103b82:	f023 0301 	bic.w	r3, r3, #1
 8103b86:	6713      	str	r3, [r2, #112]	; 0x70
 8103b88:	4b67      	ldr	r3, [pc, #412]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103b8c:	4a66      	ldr	r2, [pc, #408]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103b8e:	f023 0304 	bic.w	r3, r3, #4
 8103b92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	689b      	ldr	r3, [r3, #8]
 8103b98:	2b00      	cmp	r3, #0
 8103b9a:	d015      	beq.n	8103bc8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8103b9c:	f7fe fa8e 	bl	81020bc <HAL_GetTick>
 8103ba0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103ba2:	e00a      	b.n	8103bba <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8103ba4:	f7fe fa8a 	bl	81020bc <HAL_GetTick>
 8103ba8:	4602      	mov	r2, r0
 8103baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103bac:	1ad3      	subs	r3, r2, r3
 8103bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8103bb2:	4293      	cmp	r3, r2
 8103bb4:	d901      	bls.n	8103bba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8103bb6:	2303      	movs	r3, #3
 8103bb8:	e123      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103bba:	4b5b      	ldr	r3, [pc, #364]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103bbe:	f003 0302 	and.w	r3, r3, #2
 8103bc2:	2b00      	cmp	r3, #0
 8103bc4:	d0ee      	beq.n	8103ba4 <HAL_RCC_OscConfig+0x5f0>
 8103bc6:	e014      	b.n	8103bf2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8103bc8:	f7fe fa78 	bl	81020bc <HAL_GetTick>
 8103bcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8103bce:	e00a      	b.n	8103be6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8103bd0:	f7fe fa74 	bl	81020bc <HAL_GetTick>
 8103bd4:	4602      	mov	r2, r0
 8103bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103bd8:	1ad3      	subs	r3, r2, r3
 8103bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8103bde:	4293      	cmp	r3, r2
 8103be0:	d901      	bls.n	8103be6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8103be2:	2303      	movs	r3, #3
 8103be4:	e10d      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8103be6:	4b50      	ldr	r3, [pc, #320]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103bea:	f003 0302 	and.w	r3, r3, #2
 8103bee:	2b00      	cmp	r3, #0
 8103bf0:	d1ee      	bne.n	8103bd0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103bf6:	2b00      	cmp	r3, #0
 8103bf8:	f000 8102 	beq.w	8103e00 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8103bfc:	4b4a      	ldr	r3, [pc, #296]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103bfe:	691b      	ldr	r3, [r3, #16]
 8103c00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103c04:	2b18      	cmp	r3, #24
 8103c06:	f000 80bd 	beq.w	8103d84 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103c0e:	2b02      	cmp	r3, #2
 8103c10:	f040 809e 	bne.w	8103d50 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8103c14:	4b44      	ldr	r3, [pc, #272]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103c16:	681b      	ldr	r3, [r3, #0]
 8103c18:	4a43      	ldr	r2, [pc, #268]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8103c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103c20:	f7fe fa4c 	bl	81020bc <HAL_GetTick>
 8103c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8103c26:	e008      	b.n	8103c3a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8103c28:	f7fe fa48 	bl	81020bc <HAL_GetTick>
 8103c2c:	4602      	mov	r2, r0
 8103c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103c30:	1ad3      	subs	r3, r2, r3
 8103c32:	2b02      	cmp	r3, #2
 8103c34:	d901      	bls.n	8103c3a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8103c36:	2303      	movs	r3, #3
 8103c38:	e0e3      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8103c3a:	4b3b      	ldr	r3, [pc, #236]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103c3c:	681b      	ldr	r3, [r3, #0]
 8103c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103c42:	2b00      	cmp	r3, #0
 8103c44:	d1f0      	bne.n	8103c28 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8103c46:	4b38      	ldr	r3, [pc, #224]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c4a:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8103c4e:	f023 0303 	bic.w	r3, r3, #3
 8103c52:	687a      	ldr	r2, [r7, #4]
 8103c54:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8103c56:	687a      	ldr	r2, [r7, #4]
 8103c58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8103c5a:	0112      	lsls	r2, r2, #4
 8103c5c:	430a      	orrs	r2, r1
 8103c5e:	4932      	ldr	r1, [pc, #200]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103c60:	4313      	orrs	r3, r2
 8103c62:	628b      	str	r3, [r1, #40]	; 0x28
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103c68:	3b01      	subs	r3, #1
 8103c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103c6e:	687b      	ldr	r3, [r7, #4]
 8103c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103c72:	3b01      	subs	r3, #1
 8103c74:	025b      	lsls	r3, r3, #9
 8103c76:	b29b      	uxth	r3, r3
 8103c78:	431a      	orrs	r2, r3
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103c7e:	3b01      	subs	r3, #1
 8103c80:	041b      	lsls	r3, r3, #16
 8103c82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103c86:	431a      	orrs	r2, r3
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103c8c:	3b01      	subs	r3, #1
 8103c8e:	061b      	lsls	r3, r3, #24
 8103c90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103c94:	4924      	ldr	r1, [pc, #144]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103c96:	4313      	orrs	r3, r2
 8103c98:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8103c9a:	4b23      	ldr	r3, [pc, #140]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c9e:	4a22      	ldr	r2, [pc, #136]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103ca0:	f023 0301 	bic.w	r3, r3, #1
 8103ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8103ca6:	4b20      	ldr	r3, [pc, #128]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103cae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103cb2:	687a      	ldr	r2, [r7, #4]
 8103cb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8103cb6:	00d2      	lsls	r2, r2, #3
 8103cb8:	491b      	ldr	r1, [pc, #108]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103cba:	4313      	orrs	r3, r2
 8103cbc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8103cbe:	4b1a      	ldr	r3, [pc, #104]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cc2:	f023 020c 	bic.w	r2, r3, #12
 8103cc6:	687b      	ldr	r3, [r7, #4]
 8103cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103cca:	4917      	ldr	r1, [pc, #92]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103ccc:	4313      	orrs	r3, r2
 8103cce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8103cd0:	4b15      	ldr	r3, [pc, #84]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cd4:	f023 0202 	bic.w	r2, r3, #2
 8103cd8:	687b      	ldr	r3, [r7, #4]
 8103cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103cdc:	4912      	ldr	r1, [pc, #72]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103cde:	4313      	orrs	r3, r2
 8103ce0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8103ce2:	4b11      	ldr	r3, [pc, #68]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ce6:	4a10      	ldr	r2, [pc, #64]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103cec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103cee:	4b0e      	ldr	r3, [pc, #56]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cf2:	4a0d      	ldr	r2, [pc, #52]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8103cfa:	4b0b      	ldr	r3, [pc, #44]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cfe:	4a0a      	ldr	r2, [pc, #40]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8103d04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8103d06:	4b08      	ldr	r3, [pc, #32]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d0a:	4a07      	ldr	r2, [pc, #28]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103d0c:	f043 0301 	orr.w	r3, r3, #1
 8103d10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8103d12:	4b05      	ldr	r3, [pc, #20]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103d14:	681b      	ldr	r3, [r3, #0]
 8103d16:	4a04      	ldr	r2, [pc, #16]	; (8103d28 <HAL_RCC_OscConfig+0x774>)
 8103d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103d1e:	f7fe f9cd 	bl	81020bc <HAL_GetTick>
 8103d22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8103d24:	e00d      	b.n	8103d42 <HAL_RCC_OscConfig+0x78e>
 8103d26:	bf00      	nop
 8103d28:	58024400 	.word	0x58024400
 8103d2c:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8103d30:	f7fe f9c4 	bl	81020bc <HAL_GetTick>
 8103d34:	4602      	mov	r2, r0
 8103d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103d38:	1ad3      	subs	r3, r2, r3
 8103d3a:	2b02      	cmp	r3, #2
 8103d3c:	d901      	bls.n	8103d42 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8103d3e:	2303      	movs	r3, #3
 8103d40:	e05f      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8103d42:	4b32      	ldr	r3, [pc, #200]	; (8103e0c <HAL_RCC_OscConfig+0x858>)
 8103d44:	681b      	ldr	r3, [r3, #0]
 8103d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103d4a:	2b00      	cmp	r3, #0
 8103d4c:	d0f0      	beq.n	8103d30 <HAL_RCC_OscConfig+0x77c>
 8103d4e:	e057      	b.n	8103e00 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8103d50:	4b2e      	ldr	r3, [pc, #184]	; (8103e0c <HAL_RCC_OscConfig+0x858>)
 8103d52:	681b      	ldr	r3, [r3, #0]
 8103d54:	4a2d      	ldr	r2, [pc, #180]	; (8103e0c <HAL_RCC_OscConfig+0x858>)
 8103d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8103d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103d5c:	f7fe f9ae 	bl	81020bc <HAL_GetTick>
 8103d60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8103d62:	e008      	b.n	8103d76 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8103d64:	f7fe f9aa 	bl	81020bc <HAL_GetTick>
 8103d68:	4602      	mov	r2, r0
 8103d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103d6c:	1ad3      	subs	r3, r2, r3
 8103d6e:	2b02      	cmp	r3, #2
 8103d70:	d901      	bls.n	8103d76 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8103d72:	2303      	movs	r3, #3
 8103d74:	e045      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8103d76:	4b25      	ldr	r3, [pc, #148]	; (8103e0c <HAL_RCC_OscConfig+0x858>)
 8103d78:	681b      	ldr	r3, [r3, #0]
 8103d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103d7e:	2b00      	cmp	r3, #0
 8103d80:	d1f0      	bne.n	8103d64 <HAL_RCC_OscConfig+0x7b0>
 8103d82:	e03d      	b.n	8103e00 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8103d84:	4b21      	ldr	r3, [pc, #132]	; (8103e0c <HAL_RCC_OscConfig+0x858>)
 8103d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8103d8a:	4b20      	ldr	r3, [pc, #128]	; (8103e0c <HAL_RCC_OscConfig+0x858>)
 8103d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103d8e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8103d90:	687b      	ldr	r3, [r7, #4]
 8103d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d94:	2b01      	cmp	r3, #1
 8103d96:	d031      	beq.n	8103dfc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8103d98:	693b      	ldr	r3, [r7, #16]
 8103d9a:	f003 0203 	and.w	r2, r3, #3
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8103da2:	429a      	cmp	r2, r3
 8103da4:	d12a      	bne.n	8103dfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8103da6:	693b      	ldr	r3, [r7, #16]
 8103da8:	091b      	lsrs	r3, r3, #4
 8103daa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8103dae:	687b      	ldr	r3, [r7, #4]
 8103db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8103db2:	429a      	cmp	r2, r3
 8103db4:	d122      	bne.n	8103dfc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8103db6:	68fb      	ldr	r3, [r7, #12]
 8103db8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103dc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8103dc2:	429a      	cmp	r2, r3
 8103dc4:	d11a      	bne.n	8103dfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8103dc6:	68fb      	ldr	r3, [r7, #12]
 8103dc8:	0a5b      	lsrs	r3, r3, #9
 8103dca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103dd2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8103dd4:	429a      	cmp	r2, r3
 8103dd6:	d111      	bne.n	8103dfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8103dd8:	68fb      	ldr	r3, [r7, #12]
 8103dda:	0c1b      	lsrs	r3, r3, #16
 8103ddc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8103de0:	687b      	ldr	r3, [r7, #4]
 8103de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103de4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8103de6:	429a      	cmp	r2, r3
 8103de8:	d108      	bne.n	8103dfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8103dea:	68fb      	ldr	r3, [r7, #12]
 8103dec:	0e1b      	lsrs	r3, r3, #24
 8103dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103df6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8103df8:	429a      	cmp	r2, r3
 8103dfa:	d001      	beq.n	8103e00 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8103dfc:	2301      	movs	r3, #1
 8103dfe:	e000      	b.n	8103e02 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8103e00:	2300      	movs	r3, #0
}
 8103e02:	4618      	mov	r0, r3
 8103e04:	3730      	adds	r7, #48	; 0x30
 8103e06:	46bd      	mov	sp, r7
 8103e08:	bd80      	pop	{r7, pc}
 8103e0a:	bf00      	nop
 8103e0c:	58024400 	.word	0x58024400

08103e10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8103e10:	b580      	push	{r7, lr}
 8103e12:	b086      	sub	sp, #24
 8103e14:	af00      	add	r7, sp, #0
 8103e16:	6078      	str	r0, [r7, #4]
 8103e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	2b00      	cmp	r3, #0
 8103e1e:	d101      	bne.n	8103e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8103e20:	2301      	movs	r3, #1
 8103e22:	e19d      	b.n	8104160 <HAL_RCC_ClockConfig+0x350>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8103e24:	4b8a      	ldr	r3, [pc, #552]	; (8104050 <HAL_RCC_ClockConfig+0x240>)
 8103e26:	681b      	ldr	r3, [r3, #0]
 8103e28:	f003 030f 	and.w	r3, r3, #15
 8103e2c:	683a      	ldr	r2, [r7, #0]
 8103e2e:	429a      	cmp	r2, r3
 8103e30:	d910      	bls.n	8103e54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8103e32:	4b87      	ldr	r3, [pc, #540]	; (8104050 <HAL_RCC_ClockConfig+0x240>)
 8103e34:	681b      	ldr	r3, [r3, #0]
 8103e36:	f023 020f 	bic.w	r2, r3, #15
 8103e3a:	4985      	ldr	r1, [pc, #532]	; (8104050 <HAL_RCC_ClockConfig+0x240>)
 8103e3c:	683b      	ldr	r3, [r7, #0]
 8103e3e:	4313      	orrs	r3, r2
 8103e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8103e42:	4b83      	ldr	r3, [pc, #524]	; (8104050 <HAL_RCC_ClockConfig+0x240>)
 8103e44:	681b      	ldr	r3, [r3, #0]
 8103e46:	f003 030f 	and.w	r3, r3, #15
 8103e4a:	683a      	ldr	r2, [r7, #0]
 8103e4c:	429a      	cmp	r2, r3
 8103e4e:	d001      	beq.n	8103e54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8103e50:	2301      	movs	r3, #1
 8103e52:	e185      	b.n	8104160 <HAL_RCC_ClockConfig+0x350>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8103e54:	687b      	ldr	r3, [r7, #4]
 8103e56:	681b      	ldr	r3, [r3, #0]
 8103e58:	f003 0304 	and.w	r3, r3, #4
 8103e5c:	2b00      	cmp	r3, #0
 8103e5e:	d010      	beq.n	8103e82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8103e60:	687b      	ldr	r3, [r7, #4]
 8103e62:	691a      	ldr	r2, [r3, #16]
 8103e64:	4b7b      	ldr	r3, [pc, #492]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103e66:	699b      	ldr	r3, [r3, #24]
 8103e68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8103e6c:	429a      	cmp	r2, r3
 8103e6e:	d908      	bls.n	8103e82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8103e70:	4b78      	ldr	r3, [pc, #480]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103e72:	699b      	ldr	r3, [r3, #24]
 8103e74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8103e78:	687b      	ldr	r3, [r7, #4]
 8103e7a:	691b      	ldr	r3, [r3, #16]
 8103e7c:	4975      	ldr	r1, [pc, #468]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103e7e:	4313      	orrs	r3, r2
 8103e80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8103e82:	687b      	ldr	r3, [r7, #4]
 8103e84:	681b      	ldr	r3, [r3, #0]
 8103e86:	f003 0308 	and.w	r3, r3, #8
 8103e8a:	2b00      	cmp	r3, #0
 8103e8c:	d010      	beq.n	8103eb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8103e8e:	687b      	ldr	r3, [r7, #4]
 8103e90:	695a      	ldr	r2, [r3, #20]
 8103e92:	4b70      	ldr	r3, [pc, #448]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103e94:	69db      	ldr	r3, [r3, #28]
 8103e96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8103e9a:	429a      	cmp	r2, r3
 8103e9c:	d908      	bls.n	8103eb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8103e9e:	4b6d      	ldr	r3, [pc, #436]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103ea0:	69db      	ldr	r3, [r3, #28]
 8103ea2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8103ea6:	687b      	ldr	r3, [r7, #4]
 8103ea8:	695b      	ldr	r3, [r3, #20]
 8103eaa:	496a      	ldr	r1, [pc, #424]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103eac:	4313      	orrs	r3, r2
 8103eae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8103eb0:	687b      	ldr	r3, [r7, #4]
 8103eb2:	681b      	ldr	r3, [r3, #0]
 8103eb4:	f003 0310 	and.w	r3, r3, #16
 8103eb8:	2b00      	cmp	r3, #0
 8103eba:	d010      	beq.n	8103ede <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8103ebc:	687b      	ldr	r3, [r7, #4]
 8103ebe:	699a      	ldr	r2, [r3, #24]
 8103ec0:	4b64      	ldr	r3, [pc, #400]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103ec2:	69db      	ldr	r3, [r3, #28]
 8103ec4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8103ec8:	429a      	cmp	r2, r3
 8103eca:	d908      	bls.n	8103ede <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8103ecc:	4b61      	ldr	r3, [pc, #388]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103ece:	69db      	ldr	r3, [r3, #28]
 8103ed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	699b      	ldr	r3, [r3, #24]
 8103ed8:	495e      	ldr	r1, [pc, #376]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103eda:	4313      	orrs	r3, r2
 8103edc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	681b      	ldr	r3, [r3, #0]
 8103ee2:	f003 0320 	and.w	r3, r3, #32
 8103ee6:	2b00      	cmp	r3, #0
 8103ee8:	d010      	beq.n	8103f0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8103eea:	687b      	ldr	r3, [r7, #4]
 8103eec:	69da      	ldr	r2, [r3, #28]
 8103eee:	4b59      	ldr	r3, [pc, #356]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103ef0:	6a1b      	ldr	r3, [r3, #32]
 8103ef2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8103ef6:	429a      	cmp	r2, r3
 8103ef8:	d908      	bls.n	8103f0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8103efa:	4b56      	ldr	r3, [pc, #344]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103efc:	6a1b      	ldr	r3, [r3, #32]
 8103efe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8103f02:	687b      	ldr	r3, [r7, #4]
 8103f04:	69db      	ldr	r3, [r3, #28]
 8103f06:	4953      	ldr	r1, [pc, #332]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103f08:	4313      	orrs	r3, r2
 8103f0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8103f0c:	687b      	ldr	r3, [r7, #4]
 8103f0e:	681b      	ldr	r3, [r3, #0]
 8103f10:	f003 0302 	and.w	r3, r3, #2
 8103f14:	2b00      	cmp	r3, #0
 8103f16:	d010      	beq.n	8103f3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8103f18:	687b      	ldr	r3, [r7, #4]
 8103f1a:	68da      	ldr	r2, [r3, #12]
 8103f1c:	4b4d      	ldr	r3, [pc, #308]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103f1e:	699b      	ldr	r3, [r3, #24]
 8103f20:	f003 030f 	and.w	r3, r3, #15
 8103f24:	429a      	cmp	r2, r3
 8103f26:	d908      	bls.n	8103f3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8103f28:	4b4a      	ldr	r3, [pc, #296]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103f2a:	699b      	ldr	r3, [r3, #24]
 8103f2c:	f023 020f 	bic.w	r2, r3, #15
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	68db      	ldr	r3, [r3, #12]
 8103f34:	4947      	ldr	r1, [pc, #284]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103f36:	4313      	orrs	r3, r2
 8103f38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8103f3a:	687b      	ldr	r3, [r7, #4]
 8103f3c:	681b      	ldr	r3, [r3, #0]
 8103f3e:	f003 0301 	and.w	r3, r3, #1
 8103f42:	2b00      	cmp	r3, #0
 8103f44:	d055      	beq.n	8103ff2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8103f46:	4b43      	ldr	r3, [pc, #268]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103f48:	699b      	ldr	r3, [r3, #24]
 8103f4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	689b      	ldr	r3, [r3, #8]
 8103f52:	4940      	ldr	r1, [pc, #256]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103f54:	4313      	orrs	r3, r2
 8103f56:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	685b      	ldr	r3, [r3, #4]
 8103f5c:	2b02      	cmp	r3, #2
 8103f5e:	d107      	bne.n	8103f70 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8103f60:	4b3c      	ldr	r3, [pc, #240]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103f62:	681b      	ldr	r3, [r3, #0]
 8103f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103f68:	2b00      	cmp	r3, #0
 8103f6a:	d121      	bne.n	8103fb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8103f6c:	2301      	movs	r3, #1
 8103f6e:	e0f7      	b.n	8104160 <HAL_RCC_ClockConfig+0x350>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	685b      	ldr	r3, [r3, #4]
 8103f74:	2b03      	cmp	r3, #3
 8103f76:	d107      	bne.n	8103f88 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8103f78:	4b36      	ldr	r3, [pc, #216]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103f7a:	681b      	ldr	r3, [r3, #0]
 8103f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103f80:	2b00      	cmp	r3, #0
 8103f82:	d115      	bne.n	8103fb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8103f84:	2301      	movs	r3, #1
 8103f86:	e0eb      	b.n	8104160 <HAL_RCC_ClockConfig+0x350>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	685b      	ldr	r3, [r3, #4]
 8103f8c:	2b01      	cmp	r3, #1
 8103f8e:	d107      	bne.n	8103fa0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8103f90:	4b30      	ldr	r3, [pc, #192]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103f92:	681b      	ldr	r3, [r3, #0]
 8103f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103f98:	2b00      	cmp	r3, #0
 8103f9a:	d109      	bne.n	8103fb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8103f9c:	2301      	movs	r3, #1
 8103f9e:	e0df      	b.n	8104160 <HAL_RCC_ClockConfig+0x350>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8103fa0:	4b2c      	ldr	r3, [pc, #176]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103fa2:	681b      	ldr	r3, [r3, #0]
 8103fa4:	f003 0304 	and.w	r3, r3, #4
 8103fa8:	2b00      	cmp	r3, #0
 8103faa:	d101      	bne.n	8103fb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8103fac:	2301      	movs	r3, #1
 8103fae:	e0d7      	b.n	8104160 <HAL_RCC_ClockConfig+0x350>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8103fb0:	4b28      	ldr	r3, [pc, #160]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103fb2:	691b      	ldr	r3, [r3, #16]
 8103fb4:	f023 0207 	bic.w	r2, r3, #7
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	685b      	ldr	r3, [r3, #4]
 8103fbc:	4925      	ldr	r1, [pc, #148]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103fbe:	4313      	orrs	r3, r2
 8103fc0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8103fc2:	f7fe f87b 	bl	81020bc <HAL_GetTick>
 8103fc6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8103fc8:	e00a      	b.n	8103fe0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8103fca:	f7fe f877 	bl	81020bc <HAL_GetTick>
 8103fce:	4602      	mov	r2, r0
 8103fd0:	697b      	ldr	r3, [r7, #20]
 8103fd2:	1ad3      	subs	r3, r2, r3
 8103fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8103fd8:	4293      	cmp	r3, r2
 8103fda:	d901      	bls.n	8103fe0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8103fdc:	2303      	movs	r3, #3
 8103fde:	e0bf      	b.n	8104160 <HAL_RCC_ClockConfig+0x350>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8103fe0:	4b1c      	ldr	r3, [pc, #112]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8103fe2:	691b      	ldr	r3, [r3, #16]
 8103fe4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8103fe8:	687b      	ldr	r3, [r7, #4]
 8103fea:	685b      	ldr	r3, [r3, #4]
 8103fec:	00db      	lsls	r3, r3, #3
 8103fee:	429a      	cmp	r2, r3
 8103ff0:	d1eb      	bne.n	8103fca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	f003 0302 	and.w	r3, r3, #2
 8103ffa:	2b00      	cmp	r3, #0
 8103ffc:	d010      	beq.n	8104020 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8103ffe:	687b      	ldr	r3, [r7, #4]
 8104000:	68da      	ldr	r2, [r3, #12]
 8104002:	4b14      	ldr	r3, [pc, #80]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8104004:	699b      	ldr	r3, [r3, #24]
 8104006:	f003 030f 	and.w	r3, r3, #15
 810400a:	429a      	cmp	r2, r3
 810400c:	d208      	bcs.n	8104020 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 810400e:	4b11      	ldr	r3, [pc, #68]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 8104010:	699b      	ldr	r3, [r3, #24]
 8104012:	f023 020f 	bic.w	r2, r3, #15
 8104016:	687b      	ldr	r3, [r7, #4]
 8104018:	68db      	ldr	r3, [r3, #12]
 810401a:	490e      	ldr	r1, [pc, #56]	; (8104054 <HAL_RCC_ClockConfig+0x244>)
 810401c:	4313      	orrs	r3, r2
 810401e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8104020:	4b0b      	ldr	r3, [pc, #44]	; (8104050 <HAL_RCC_ClockConfig+0x240>)
 8104022:	681b      	ldr	r3, [r3, #0]
 8104024:	f003 030f 	and.w	r3, r3, #15
 8104028:	683a      	ldr	r2, [r7, #0]
 810402a:	429a      	cmp	r2, r3
 810402c:	d214      	bcs.n	8104058 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 810402e:	4b08      	ldr	r3, [pc, #32]	; (8104050 <HAL_RCC_ClockConfig+0x240>)
 8104030:	681b      	ldr	r3, [r3, #0]
 8104032:	f023 020f 	bic.w	r2, r3, #15
 8104036:	4906      	ldr	r1, [pc, #24]	; (8104050 <HAL_RCC_ClockConfig+0x240>)
 8104038:	683b      	ldr	r3, [r7, #0]
 810403a:	4313      	orrs	r3, r2
 810403c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 810403e:	4b04      	ldr	r3, [pc, #16]	; (8104050 <HAL_RCC_ClockConfig+0x240>)
 8104040:	681b      	ldr	r3, [r3, #0]
 8104042:	f003 030f 	and.w	r3, r3, #15
 8104046:	683a      	ldr	r2, [r7, #0]
 8104048:	429a      	cmp	r2, r3
 810404a:	d005      	beq.n	8104058 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 810404c:	2301      	movs	r3, #1
 810404e:	e087      	b.n	8104160 <HAL_RCC_ClockConfig+0x350>
 8104050:	52002000 	.word	0x52002000
 8104054:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	681b      	ldr	r3, [r3, #0]
 810405c:	f003 0304 	and.w	r3, r3, #4
 8104060:	2b00      	cmp	r3, #0
 8104062:	d010      	beq.n	8104086 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	691a      	ldr	r2, [r3, #16]
 8104068:	4b3f      	ldr	r3, [pc, #252]	; (8104168 <HAL_RCC_ClockConfig+0x358>)
 810406a:	699b      	ldr	r3, [r3, #24]
 810406c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8104070:	429a      	cmp	r2, r3
 8104072:	d208      	bcs.n	8104086 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8104074:	4b3c      	ldr	r3, [pc, #240]	; (8104168 <HAL_RCC_ClockConfig+0x358>)
 8104076:	699b      	ldr	r3, [r3, #24]
 8104078:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 810407c:	687b      	ldr	r3, [r7, #4]
 810407e:	691b      	ldr	r3, [r3, #16]
 8104080:	4939      	ldr	r1, [pc, #228]	; (8104168 <HAL_RCC_ClockConfig+0x358>)
 8104082:	4313      	orrs	r3, r2
 8104084:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8104086:	687b      	ldr	r3, [r7, #4]
 8104088:	681b      	ldr	r3, [r3, #0]
 810408a:	f003 0308 	and.w	r3, r3, #8
 810408e:	2b00      	cmp	r3, #0
 8104090:	d010      	beq.n	81040b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	695a      	ldr	r2, [r3, #20]
 8104096:	4b34      	ldr	r3, [pc, #208]	; (8104168 <HAL_RCC_ClockConfig+0x358>)
 8104098:	69db      	ldr	r3, [r3, #28]
 810409a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 810409e:	429a      	cmp	r2, r3
 81040a0:	d208      	bcs.n	81040b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 81040a2:	4b31      	ldr	r3, [pc, #196]	; (8104168 <HAL_RCC_ClockConfig+0x358>)
 81040a4:	69db      	ldr	r3, [r3, #28]
 81040a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 81040aa:	687b      	ldr	r3, [r7, #4]
 81040ac:	695b      	ldr	r3, [r3, #20]
 81040ae:	492e      	ldr	r1, [pc, #184]	; (8104168 <HAL_RCC_ClockConfig+0x358>)
 81040b0:	4313      	orrs	r3, r2
 81040b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 81040b4:	687b      	ldr	r3, [r7, #4]
 81040b6:	681b      	ldr	r3, [r3, #0]
 81040b8:	f003 0310 	and.w	r3, r3, #16
 81040bc:	2b00      	cmp	r3, #0
 81040be:	d010      	beq.n	81040e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 81040c0:	687b      	ldr	r3, [r7, #4]
 81040c2:	699a      	ldr	r2, [r3, #24]
 81040c4:	4b28      	ldr	r3, [pc, #160]	; (8104168 <HAL_RCC_ClockConfig+0x358>)
 81040c6:	69db      	ldr	r3, [r3, #28]
 81040c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81040cc:	429a      	cmp	r2, r3
 81040ce:	d208      	bcs.n	81040e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 81040d0:	4b25      	ldr	r3, [pc, #148]	; (8104168 <HAL_RCC_ClockConfig+0x358>)
 81040d2:	69db      	ldr	r3, [r3, #28]
 81040d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 81040d8:	687b      	ldr	r3, [r7, #4]
 81040da:	699b      	ldr	r3, [r3, #24]
 81040dc:	4922      	ldr	r1, [pc, #136]	; (8104168 <HAL_RCC_ClockConfig+0x358>)
 81040de:	4313      	orrs	r3, r2
 81040e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	681b      	ldr	r3, [r3, #0]
 81040e6:	f003 0320 	and.w	r3, r3, #32
 81040ea:	2b00      	cmp	r3, #0
 81040ec:	d010      	beq.n	8104110 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 81040ee:	687b      	ldr	r3, [r7, #4]
 81040f0:	69da      	ldr	r2, [r3, #28]
 81040f2:	4b1d      	ldr	r3, [pc, #116]	; (8104168 <HAL_RCC_ClockConfig+0x358>)
 81040f4:	6a1b      	ldr	r3, [r3, #32]
 81040f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 81040fa:	429a      	cmp	r2, r3
 81040fc:	d208      	bcs.n	8104110 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 81040fe:	4b1a      	ldr	r3, [pc, #104]	; (8104168 <HAL_RCC_ClockConfig+0x358>)
 8104100:	6a1b      	ldr	r3, [r3, #32]
 8104102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8104106:	687b      	ldr	r3, [r7, #4]
 8104108:	69db      	ldr	r3, [r3, #28]
 810410a:	4917      	ldr	r1, [pc, #92]	; (8104168 <HAL_RCC_ClockConfig+0x358>)
 810410c:	4313      	orrs	r3, r2
 810410e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8104110:	f000 f834 	bl	810417c <HAL_RCC_GetSysClockFreq>
 8104114:	4602      	mov	r2, r0
 8104116:	4b14      	ldr	r3, [pc, #80]	; (8104168 <HAL_RCC_ClockConfig+0x358>)
 8104118:	699b      	ldr	r3, [r3, #24]
 810411a:	0a1b      	lsrs	r3, r3, #8
 810411c:	f003 030f 	and.w	r3, r3, #15
 8104120:	4912      	ldr	r1, [pc, #72]	; (810416c <HAL_RCC_ClockConfig+0x35c>)
 8104122:	5ccb      	ldrb	r3, [r1, r3]
 8104124:	f003 031f 	and.w	r3, r3, #31
 8104128:	fa22 f303 	lsr.w	r3, r2, r3
 810412c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810412e:	4b0e      	ldr	r3, [pc, #56]	; (8104168 <HAL_RCC_ClockConfig+0x358>)
 8104130:	699b      	ldr	r3, [r3, #24]
 8104132:	f003 030f 	and.w	r3, r3, #15
 8104136:	4a0d      	ldr	r2, [pc, #52]	; (810416c <HAL_RCC_ClockConfig+0x35c>)
 8104138:	5cd3      	ldrb	r3, [r2, r3]
 810413a:	f003 031f 	and.w	r3, r3, #31
 810413e:	693a      	ldr	r2, [r7, #16]
 8104140:	fa22 f303 	lsr.w	r3, r2, r3
 8104144:	4a0a      	ldr	r2, [pc, #40]	; (8104170 <HAL_RCC_ClockConfig+0x360>)
 8104146:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104148:	4b09      	ldr	r3, [pc, #36]	; (8104170 <HAL_RCC_ClockConfig+0x360>)
 810414a:	681b      	ldr	r3, [r3, #0]
 810414c:	4a09      	ldr	r2, [pc, #36]	; (8104174 <HAL_RCC_ClockConfig+0x364>)
 810414e:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8104150:	4b09      	ldr	r3, [pc, #36]	; (8104178 <HAL_RCC_ClockConfig+0x368>)
 8104152:	681b      	ldr	r3, [r3, #0]
 8104154:	4618      	mov	r0, r3
 8104156:	f7fd ff67 	bl	8102028 <HAL_InitTick>
 810415a:	4603      	mov	r3, r0
 810415c:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 810415e:	7bfb      	ldrb	r3, [r7, #15]
}
 8104160:	4618      	mov	r0, r3
 8104162:	3718      	adds	r7, #24
 8104164:	46bd      	mov	sp, r7
 8104166:	bd80      	pop	{r7, pc}
 8104168:	58024400 	.word	0x58024400
 810416c:	0810bba8 	.word	0x0810bba8
 8104170:	10000004 	.word	0x10000004
 8104174:	10000000 	.word	0x10000000
 8104178:	10000014 	.word	0x10000014

0810417c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810417c:	b480      	push	{r7}
 810417e:	b089      	sub	sp, #36	; 0x24
 8104180:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104182:	4bb3      	ldr	r3, [pc, #716]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104184:	691b      	ldr	r3, [r3, #16]
 8104186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810418a:	2b18      	cmp	r3, #24
 810418c:	f200 8155 	bhi.w	810443a <HAL_RCC_GetSysClockFreq+0x2be>
 8104190:	a201      	add	r2, pc, #4	; (adr r2, 8104198 <HAL_RCC_GetSysClockFreq+0x1c>)
 8104192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104196:	bf00      	nop
 8104198:	081041fd 	.word	0x081041fd
 810419c:	0810443b 	.word	0x0810443b
 81041a0:	0810443b 	.word	0x0810443b
 81041a4:	0810443b 	.word	0x0810443b
 81041a8:	0810443b 	.word	0x0810443b
 81041ac:	0810443b 	.word	0x0810443b
 81041b0:	0810443b 	.word	0x0810443b
 81041b4:	0810443b 	.word	0x0810443b
 81041b8:	08104223 	.word	0x08104223
 81041bc:	0810443b 	.word	0x0810443b
 81041c0:	0810443b 	.word	0x0810443b
 81041c4:	0810443b 	.word	0x0810443b
 81041c8:	0810443b 	.word	0x0810443b
 81041cc:	0810443b 	.word	0x0810443b
 81041d0:	0810443b 	.word	0x0810443b
 81041d4:	0810443b 	.word	0x0810443b
 81041d8:	08104229 	.word	0x08104229
 81041dc:	0810443b 	.word	0x0810443b
 81041e0:	0810443b 	.word	0x0810443b
 81041e4:	0810443b 	.word	0x0810443b
 81041e8:	0810443b 	.word	0x0810443b
 81041ec:	0810443b 	.word	0x0810443b
 81041f0:	0810443b 	.word	0x0810443b
 81041f4:	0810443b 	.word	0x0810443b
 81041f8:	0810422f 	.word	0x0810422f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81041fc:	4b94      	ldr	r3, [pc, #592]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81041fe:	681b      	ldr	r3, [r3, #0]
 8104200:	f003 0320 	and.w	r3, r3, #32
 8104204:	2b00      	cmp	r3, #0
 8104206:	d009      	beq.n	810421c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104208:	4b91      	ldr	r3, [pc, #580]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	08db      	lsrs	r3, r3, #3
 810420e:	f003 0303 	and.w	r3, r3, #3
 8104212:	4a90      	ldr	r2, [pc, #576]	; (8104454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104214:	fa22 f303 	lsr.w	r3, r2, r3
 8104218:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810421a:	e111      	b.n	8104440 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810421c:	4b8d      	ldr	r3, [pc, #564]	; (8104454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810421e:	61bb      	str	r3, [r7, #24]
    break;
 8104220:	e10e      	b.n	8104440 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8104222:	4b8d      	ldr	r3, [pc, #564]	; (8104458 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104224:	61bb      	str	r3, [r7, #24]
    break;
 8104226:	e10b      	b.n	8104440 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8104228:	4b8c      	ldr	r3, [pc, #560]	; (810445c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810422a:	61bb      	str	r3, [r7, #24]
    break;
 810422c:	e108      	b.n	8104440 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810422e:	4b88      	ldr	r3, [pc, #544]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104232:	f003 0303 	and.w	r3, r3, #3
 8104236:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104238:	4b85      	ldr	r3, [pc, #532]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810423c:	091b      	lsrs	r3, r3, #4
 810423e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104242:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104244:	4b82      	ldr	r3, [pc, #520]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104248:	f003 0301 	and.w	r3, r3, #1
 810424c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810424e:	4b80      	ldr	r3, [pc, #512]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104252:	08db      	lsrs	r3, r3, #3
 8104254:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104258:	68fa      	ldr	r2, [r7, #12]
 810425a:	fb02 f303 	mul.w	r3, r2, r3
 810425e:	ee07 3a90 	vmov	s15, r3
 8104262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104266:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810426a:	693b      	ldr	r3, [r7, #16]
 810426c:	2b00      	cmp	r3, #0
 810426e:	f000 80e1 	beq.w	8104434 <HAL_RCC_GetSysClockFreq+0x2b8>
 8104272:	697b      	ldr	r3, [r7, #20]
 8104274:	2b02      	cmp	r3, #2
 8104276:	f000 8083 	beq.w	8104380 <HAL_RCC_GetSysClockFreq+0x204>
 810427a:	697b      	ldr	r3, [r7, #20]
 810427c:	2b02      	cmp	r3, #2
 810427e:	f200 80a1 	bhi.w	81043c4 <HAL_RCC_GetSysClockFreq+0x248>
 8104282:	697b      	ldr	r3, [r7, #20]
 8104284:	2b00      	cmp	r3, #0
 8104286:	d003      	beq.n	8104290 <HAL_RCC_GetSysClockFreq+0x114>
 8104288:	697b      	ldr	r3, [r7, #20]
 810428a:	2b01      	cmp	r3, #1
 810428c:	d056      	beq.n	810433c <HAL_RCC_GetSysClockFreq+0x1c0>
 810428e:	e099      	b.n	81043c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104290:	4b6f      	ldr	r3, [pc, #444]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104292:	681b      	ldr	r3, [r3, #0]
 8104294:	f003 0320 	and.w	r3, r3, #32
 8104298:	2b00      	cmp	r3, #0
 810429a:	d02d      	beq.n	81042f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810429c:	4b6c      	ldr	r3, [pc, #432]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810429e:	681b      	ldr	r3, [r3, #0]
 81042a0:	08db      	lsrs	r3, r3, #3
 81042a2:	f003 0303 	and.w	r3, r3, #3
 81042a6:	4a6b      	ldr	r2, [pc, #428]	; (8104454 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81042a8:	fa22 f303 	lsr.w	r3, r2, r3
 81042ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81042ae:	687b      	ldr	r3, [r7, #4]
 81042b0:	ee07 3a90 	vmov	s15, r3
 81042b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81042b8:	693b      	ldr	r3, [r7, #16]
 81042ba:	ee07 3a90 	vmov	s15, r3
 81042be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81042c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81042c6:	4b62      	ldr	r3, [pc, #392]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81042ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81042ce:	ee07 3a90 	vmov	s15, r3
 81042d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81042d6:	ed97 6a02 	vldr	s12, [r7, #8]
 81042da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8104460 <HAL_RCC_GetSysClockFreq+0x2e4>
 81042de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81042e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81042e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81042ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81042ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81042f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81042f6:	e087      	b.n	8104408 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81042f8:	693b      	ldr	r3, [r7, #16]
 81042fa:	ee07 3a90 	vmov	s15, r3
 81042fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104302:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104464 <HAL_RCC_GetSysClockFreq+0x2e8>
 8104306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810430a:	4b51      	ldr	r3, [pc, #324]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810430e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104312:	ee07 3a90 	vmov	s15, r3
 8104316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810431a:	ed97 6a02 	vldr	s12, [r7, #8]
 810431e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8104460 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810432a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810432e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810433a:	e065      	b.n	8104408 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810433c:	693b      	ldr	r3, [r7, #16]
 810433e:	ee07 3a90 	vmov	s15, r3
 8104342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104346:	eddf 6a48 	vldr	s13, [pc, #288]	; 8104468 <HAL_RCC_GetSysClockFreq+0x2ec>
 810434a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810434e:	4b40      	ldr	r3, [pc, #256]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104356:	ee07 3a90 	vmov	s15, r3
 810435a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810435e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104362:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8104460 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810436a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810436e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104376:	ee67 7a27 	vmul.f32	s15, s14, s15
 810437a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810437e:	e043      	b.n	8104408 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104380:	693b      	ldr	r3, [r7, #16]
 8104382:	ee07 3a90 	vmov	s15, r3
 8104386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810438a:	eddf 6a38 	vldr	s13, [pc, #224]	; 810446c <HAL_RCC_GetSysClockFreq+0x2f0>
 810438e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104392:	4b2f      	ldr	r3, [pc, #188]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810439a:	ee07 3a90 	vmov	s15, r3
 810439e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81043a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81043a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8104460 <HAL_RCC_GetSysClockFreq+0x2e4>
 81043aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81043ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81043b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81043b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81043ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81043be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81043c2:	e021      	b.n	8104408 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81043c4:	693b      	ldr	r3, [r7, #16]
 81043c6:	ee07 3a90 	vmov	s15, r3
 81043ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81043ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8104468 <HAL_RCC_GetSysClockFreq+0x2ec>
 81043d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81043d6:	4b1e      	ldr	r3, [pc, #120]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81043da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81043de:	ee07 3a90 	vmov	s15, r3
 81043e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81043e6:	ed97 6a02 	vldr	s12, [r7, #8]
 81043ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8104460 <HAL_RCC_GetSysClockFreq+0x2e4>
 81043ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81043f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81043f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81043fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81043fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104406:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8104408:	4b11      	ldr	r3, [pc, #68]	; (8104450 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810440c:	0a5b      	lsrs	r3, r3, #9
 810440e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104412:	3301      	adds	r3, #1
 8104414:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8104416:	683b      	ldr	r3, [r7, #0]
 8104418:	ee07 3a90 	vmov	s15, r3
 810441c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104420:	edd7 6a07 	vldr	s13, [r7, #28]
 8104424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810442c:	ee17 3a90 	vmov	r3, s15
 8104430:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8104432:	e005      	b.n	8104440 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8104434:	2300      	movs	r3, #0
 8104436:	61bb      	str	r3, [r7, #24]
    break;
 8104438:	e002      	b.n	8104440 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810443a:	4b07      	ldr	r3, [pc, #28]	; (8104458 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810443c:	61bb      	str	r3, [r7, #24]
    break;
 810443e:	bf00      	nop
  }

  return sysclockfreq;
 8104440:	69bb      	ldr	r3, [r7, #24]
}
 8104442:	4618      	mov	r0, r3
 8104444:	3724      	adds	r7, #36	; 0x24
 8104446:	46bd      	mov	sp, r7
 8104448:	f85d 7b04 	ldr.w	r7, [sp], #4
 810444c:	4770      	bx	lr
 810444e:	bf00      	nop
 8104450:	58024400 	.word	0x58024400
 8104454:	03d09000 	.word	0x03d09000
 8104458:	003d0900 	.word	0x003d0900
 810445c:	007a1200 	.word	0x007a1200
 8104460:	46000000 	.word	0x46000000
 8104464:	4c742400 	.word	0x4c742400
 8104468:	4a742400 	.word	0x4a742400
 810446c:	4af42400 	.word	0x4af42400

08104470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104470:	b580      	push	{r7, lr}
 8104472:	b082      	sub	sp, #8
 8104474:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104476:	f7ff fe81 	bl	810417c <HAL_RCC_GetSysClockFreq>
 810447a:	4602      	mov	r2, r0
 810447c:	4b11      	ldr	r3, [pc, #68]	; (81044c4 <HAL_RCC_GetHCLKFreq+0x54>)
 810447e:	699b      	ldr	r3, [r3, #24]
 8104480:	0a1b      	lsrs	r3, r3, #8
 8104482:	f003 030f 	and.w	r3, r3, #15
 8104486:	4910      	ldr	r1, [pc, #64]	; (81044c8 <HAL_RCC_GetHCLKFreq+0x58>)
 8104488:	5ccb      	ldrb	r3, [r1, r3]
 810448a:	f003 031f 	and.w	r3, r3, #31
 810448e:	fa22 f303 	lsr.w	r3, r2, r3
 8104492:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104494:	4b0b      	ldr	r3, [pc, #44]	; (81044c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8104496:	699b      	ldr	r3, [r3, #24]
 8104498:	f003 030f 	and.w	r3, r3, #15
 810449c:	4a0a      	ldr	r2, [pc, #40]	; (81044c8 <HAL_RCC_GetHCLKFreq+0x58>)
 810449e:	5cd3      	ldrb	r3, [r2, r3]
 81044a0:	f003 031f 	and.w	r3, r3, #31
 81044a4:	687a      	ldr	r2, [r7, #4]
 81044a6:	fa22 f303 	lsr.w	r3, r2, r3
 81044aa:	4a08      	ldr	r2, [pc, #32]	; (81044cc <HAL_RCC_GetHCLKFreq+0x5c>)
 81044ac:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81044ae:	4b07      	ldr	r3, [pc, #28]	; (81044cc <HAL_RCC_GetHCLKFreq+0x5c>)
 81044b0:	681b      	ldr	r3, [r3, #0]
 81044b2:	4a07      	ldr	r2, [pc, #28]	; (81044d0 <HAL_RCC_GetHCLKFreq+0x60>)
 81044b4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81044b6:	4b05      	ldr	r3, [pc, #20]	; (81044cc <HAL_RCC_GetHCLKFreq+0x5c>)
 81044b8:	681b      	ldr	r3, [r3, #0]
}
 81044ba:	4618      	mov	r0, r3
 81044bc:	3708      	adds	r7, #8
 81044be:	46bd      	mov	sp, r7
 81044c0:	bd80      	pop	{r7, pc}
 81044c2:	bf00      	nop
 81044c4:	58024400 	.word	0x58024400
 81044c8:	0810bba8 	.word	0x0810bba8
 81044cc:	10000004 	.word	0x10000004
 81044d0:	10000000 	.word	0x10000000

081044d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81044d4:	b580      	push	{r7, lr}
 81044d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81044d8:	f7ff ffca 	bl	8104470 <HAL_RCC_GetHCLKFreq>
 81044dc:	4602      	mov	r2, r0
 81044de:	4b06      	ldr	r3, [pc, #24]	; (81044f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 81044e0:	69db      	ldr	r3, [r3, #28]
 81044e2:	091b      	lsrs	r3, r3, #4
 81044e4:	f003 0307 	and.w	r3, r3, #7
 81044e8:	4904      	ldr	r1, [pc, #16]	; (81044fc <HAL_RCC_GetPCLK1Freq+0x28>)
 81044ea:	5ccb      	ldrb	r3, [r1, r3]
 81044ec:	f003 031f 	and.w	r3, r3, #31
 81044f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81044f4:	4618      	mov	r0, r3
 81044f6:	bd80      	pop	{r7, pc}
 81044f8:	58024400 	.word	0x58024400
 81044fc:	0810bba8 	.word	0x0810bba8

08104500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104500:	b580      	push	{r7, lr}
 8104502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104504:	f7ff ffb4 	bl	8104470 <HAL_RCC_GetHCLKFreq>
 8104508:	4602      	mov	r2, r0
 810450a:	4b06      	ldr	r3, [pc, #24]	; (8104524 <HAL_RCC_GetPCLK2Freq+0x24>)
 810450c:	69db      	ldr	r3, [r3, #28]
 810450e:	0a1b      	lsrs	r3, r3, #8
 8104510:	f003 0307 	and.w	r3, r3, #7
 8104514:	4904      	ldr	r1, [pc, #16]	; (8104528 <HAL_RCC_GetPCLK2Freq+0x28>)
 8104516:	5ccb      	ldrb	r3, [r1, r3]
 8104518:	f003 031f 	and.w	r3, r3, #31
 810451c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104520:	4618      	mov	r0, r3
 8104522:	bd80      	pop	{r7, pc}
 8104524:	58024400 	.word	0x58024400
 8104528:	0810bba8 	.word	0x0810bba8

0810452c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810452c:	b580      	push	{r7, lr}
 810452e:	b086      	sub	sp, #24
 8104530:	af00      	add	r7, sp, #0
 8104532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104534:	2300      	movs	r3, #0
 8104536:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104538:	2300      	movs	r3, #0
 810453a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104544:	2b00      	cmp	r3, #0
 8104546:	d03f      	beq.n	81045c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810454c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104550:	d02a      	beq.n	81045a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8104552:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104556:	d824      	bhi.n	81045a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810455c:	d018      	beq.n	8104590 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810455e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104562:	d81e      	bhi.n	81045a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8104564:	2b00      	cmp	r3, #0
 8104566:	d003      	beq.n	8104570 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8104568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810456c:	d007      	beq.n	810457e <HAL_RCCEx_PeriphCLKConfig+0x52>
 810456e:	e018      	b.n	81045a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104570:	4ba3      	ldr	r3, [pc, #652]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104574:	4aa2      	ldr	r2, [pc, #648]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810457a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810457c:	e015      	b.n	81045aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810457e:	687b      	ldr	r3, [r7, #4]
 8104580:	3304      	adds	r3, #4
 8104582:	2102      	movs	r1, #2
 8104584:	4618      	mov	r0, r3
 8104586:	f001 f9d5 	bl	8105934 <RCCEx_PLL2_Config>
 810458a:	4603      	mov	r3, r0
 810458c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810458e:	e00c      	b.n	81045aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104590:	687b      	ldr	r3, [r7, #4]
 8104592:	3324      	adds	r3, #36	; 0x24
 8104594:	2102      	movs	r1, #2
 8104596:	4618      	mov	r0, r3
 8104598:	f001 fa7e 	bl	8105a98 <RCCEx_PLL3_Config>
 810459c:	4603      	mov	r3, r0
 810459e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81045a0:	e003      	b.n	81045aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81045a2:	2301      	movs	r3, #1
 81045a4:	75fb      	strb	r3, [r7, #23]
      break;
 81045a6:	e000      	b.n	81045aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81045a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81045aa:	7dfb      	ldrb	r3, [r7, #23]
 81045ac:	2b00      	cmp	r3, #0
 81045ae:	d109      	bne.n	81045c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81045b0:	4b93      	ldr	r3, [pc, #588]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81045b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81045b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81045bc:	4990      	ldr	r1, [pc, #576]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81045be:	4313      	orrs	r3, r2
 81045c0:	650b      	str	r3, [r1, #80]	; 0x50
 81045c2:	e001      	b.n	81045c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045c4:	7dfb      	ldrb	r3, [r7, #23]
 81045c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81045d0:	2b00      	cmp	r3, #0
 81045d2:	d03d      	beq.n	8104650 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81045d4:	687b      	ldr	r3, [r7, #4]
 81045d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81045d8:	2b04      	cmp	r3, #4
 81045da:	d826      	bhi.n	810462a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81045dc:	a201      	add	r2, pc, #4	; (adr r2, 81045e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81045e2:	bf00      	nop
 81045e4:	081045f9 	.word	0x081045f9
 81045e8:	08104607 	.word	0x08104607
 81045ec:	08104619 	.word	0x08104619
 81045f0:	08104631 	.word	0x08104631
 81045f4:	08104631 	.word	0x08104631
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81045f8:	4b81      	ldr	r3, [pc, #516]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045fc:	4a80      	ldr	r2, [pc, #512]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81045fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104604:	e015      	b.n	8104632 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	3304      	adds	r3, #4
 810460a:	2100      	movs	r1, #0
 810460c:	4618      	mov	r0, r3
 810460e:	f001 f991 	bl	8105934 <RCCEx_PLL2_Config>
 8104612:	4603      	mov	r3, r0
 8104614:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104616:	e00c      	b.n	8104632 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	3324      	adds	r3, #36	; 0x24
 810461c:	2100      	movs	r1, #0
 810461e:	4618      	mov	r0, r3
 8104620:	f001 fa3a 	bl	8105a98 <RCCEx_PLL3_Config>
 8104624:	4603      	mov	r3, r0
 8104626:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104628:	e003      	b.n	8104632 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810462a:	2301      	movs	r3, #1
 810462c:	75fb      	strb	r3, [r7, #23]
      break;
 810462e:	e000      	b.n	8104632 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8104630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104632:	7dfb      	ldrb	r3, [r7, #23]
 8104634:	2b00      	cmp	r3, #0
 8104636:	d109      	bne.n	810464c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104638:	4b71      	ldr	r3, [pc, #452]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810463a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810463c:	f023 0207 	bic.w	r2, r3, #7
 8104640:	687b      	ldr	r3, [r7, #4]
 8104642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104644:	496e      	ldr	r1, [pc, #440]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104646:	4313      	orrs	r3, r2
 8104648:	650b      	str	r3, [r1, #80]	; 0x50
 810464a:	e001      	b.n	8104650 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810464c:	7dfb      	ldrb	r3, [r7, #23]
 810464e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104650:	687b      	ldr	r3, [r7, #4]
 8104652:	681b      	ldr	r3, [r3, #0]
 8104654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104658:	2b00      	cmp	r3, #0
 810465a:	d042      	beq.n	81046e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 810465c:	687b      	ldr	r3, [r7, #4]
 810465e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104664:	d02b      	beq.n	81046be <HAL_RCCEx_PeriphCLKConfig+0x192>
 8104666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810466a:	d825      	bhi.n	81046b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810466c:	2bc0      	cmp	r3, #192	; 0xc0
 810466e:	d028      	beq.n	81046c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8104670:	2bc0      	cmp	r3, #192	; 0xc0
 8104672:	d821      	bhi.n	81046b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104674:	2b80      	cmp	r3, #128	; 0x80
 8104676:	d016      	beq.n	81046a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8104678:	2b80      	cmp	r3, #128	; 0x80
 810467a:	d81d      	bhi.n	81046b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810467c:	2b00      	cmp	r3, #0
 810467e:	d002      	beq.n	8104686 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8104680:	2b40      	cmp	r3, #64	; 0x40
 8104682:	d007      	beq.n	8104694 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8104684:	e018      	b.n	81046b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104686:	4b5e      	ldr	r3, [pc, #376]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810468a:	4a5d      	ldr	r2, [pc, #372]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810468c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104690:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8104692:	e017      	b.n	81046c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	3304      	adds	r3, #4
 8104698:	2100      	movs	r1, #0
 810469a:	4618      	mov	r0, r3
 810469c:	f001 f94a 	bl	8105934 <RCCEx_PLL2_Config>
 81046a0:	4603      	mov	r3, r0
 81046a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81046a4:	e00e      	b.n	81046c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	3324      	adds	r3, #36	; 0x24
 81046aa:	2100      	movs	r1, #0
 81046ac:	4618      	mov	r0, r3
 81046ae:	f001 f9f3 	bl	8105a98 <RCCEx_PLL3_Config>
 81046b2:	4603      	mov	r3, r0
 81046b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81046b6:	e005      	b.n	81046c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81046b8:	2301      	movs	r3, #1
 81046ba:	75fb      	strb	r3, [r7, #23]
      break;
 81046bc:	e002      	b.n	81046c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81046be:	bf00      	nop
 81046c0:	e000      	b.n	81046c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81046c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81046c4:	7dfb      	ldrb	r3, [r7, #23]
 81046c6:	2b00      	cmp	r3, #0
 81046c8:	d109      	bne.n	81046de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81046ca:	4b4d      	ldr	r3, [pc, #308]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81046cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81046ce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81046d2:	687b      	ldr	r3, [r7, #4]
 81046d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81046d6:	494a      	ldr	r1, [pc, #296]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81046d8:	4313      	orrs	r3, r2
 81046da:	650b      	str	r3, [r1, #80]	; 0x50
 81046dc:	e001      	b.n	81046e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046de:	7dfb      	ldrb	r3, [r7, #23]
 81046e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81046e2:	687b      	ldr	r3, [r7, #4]
 81046e4:	681b      	ldr	r3, [r3, #0]
 81046e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81046ea:	2b00      	cmp	r3, #0
 81046ec:	d049      	beq.n	8104782 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81046ee:	687b      	ldr	r3, [r7, #4]
 81046f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81046f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81046f8:	d030      	beq.n	810475c <HAL_RCCEx_PeriphCLKConfig+0x230>
 81046fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81046fe:	d82a      	bhi.n	8104756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104700:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104704:	d02c      	beq.n	8104760 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8104706:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810470a:	d824      	bhi.n	8104756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810470c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104710:	d018      	beq.n	8104744 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8104712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104716:	d81e      	bhi.n	8104756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8104718:	2b00      	cmp	r3, #0
 810471a:	d003      	beq.n	8104724 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 810471c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104720:	d007      	beq.n	8104732 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8104722:	e018      	b.n	8104756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104724:	4b36      	ldr	r3, [pc, #216]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104728:	4a35      	ldr	r2, [pc, #212]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810472a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810472e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104730:	e017      	b.n	8104762 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104732:	687b      	ldr	r3, [r7, #4]
 8104734:	3304      	adds	r3, #4
 8104736:	2100      	movs	r1, #0
 8104738:	4618      	mov	r0, r3
 810473a:	f001 f8fb 	bl	8105934 <RCCEx_PLL2_Config>
 810473e:	4603      	mov	r3, r0
 8104740:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8104742:	e00e      	b.n	8104762 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	3324      	adds	r3, #36	; 0x24
 8104748:	2100      	movs	r1, #0
 810474a:	4618      	mov	r0, r3
 810474c:	f001 f9a4 	bl	8105a98 <RCCEx_PLL3_Config>
 8104750:	4603      	mov	r3, r0
 8104752:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8104754:	e005      	b.n	8104762 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8104756:	2301      	movs	r3, #1
 8104758:	75fb      	strb	r3, [r7, #23]
      break;
 810475a:	e002      	b.n	8104762 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810475c:	bf00      	nop
 810475e:	e000      	b.n	8104762 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8104760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104762:	7dfb      	ldrb	r3, [r7, #23]
 8104764:	2b00      	cmp	r3, #0
 8104766:	d10a      	bne.n	810477e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104768:	4b25      	ldr	r3, [pc, #148]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810476a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810476c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104776:	4922      	ldr	r1, [pc, #136]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8104778:	4313      	orrs	r3, r2
 810477a:	658b      	str	r3, [r1, #88]	; 0x58
 810477c:	e001      	b.n	8104782 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810477e:	7dfb      	ldrb	r3, [r7, #23]
 8104780:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	681b      	ldr	r3, [r3, #0]
 8104786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810478a:	2b00      	cmp	r3, #0
 810478c:	d04b      	beq.n	8104826 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810478e:	687b      	ldr	r3, [r7, #4]
 8104790:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104794:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104798:	d030      	beq.n	81047fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810479a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810479e:	d82a      	bhi.n	81047f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81047a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81047a4:	d02e      	beq.n	8104804 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 81047a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81047aa:	d824      	bhi.n	81047f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81047ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81047b0:	d018      	beq.n	81047e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81047b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81047b6:	d81e      	bhi.n	81047f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81047b8:	2b00      	cmp	r3, #0
 81047ba:	d003      	beq.n	81047c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81047bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81047c0:	d007      	beq.n	81047d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81047c2:	e018      	b.n	81047f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81047c4:	4b0e      	ldr	r3, [pc, #56]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81047c8:	4a0d      	ldr	r2, [pc, #52]	; (8104800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81047ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81047ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81047d0:	e019      	b.n	8104806 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	3304      	adds	r3, #4
 81047d6:	2100      	movs	r1, #0
 81047d8:	4618      	mov	r0, r3
 81047da:	f001 f8ab 	bl	8105934 <RCCEx_PLL2_Config>
 81047de:	4603      	mov	r3, r0
 81047e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81047e2:	e010      	b.n	8104806 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81047e4:	687b      	ldr	r3, [r7, #4]
 81047e6:	3324      	adds	r3, #36	; 0x24
 81047e8:	2100      	movs	r1, #0
 81047ea:	4618      	mov	r0, r3
 81047ec:	f001 f954 	bl	8105a98 <RCCEx_PLL3_Config>
 81047f0:	4603      	mov	r3, r0
 81047f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81047f4:	e007      	b.n	8104806 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81047f6:	2301      	movs	r3, #1
 81047f8:	75fb      	strb	r3, [r7, #23]
      break;
 81047fa:	e004      	b.n	8104806 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 81047fc:	bf00      	nop
 81047fe:	e002      	b.n	8104806 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8104800:	58024400 	.word	0x58024400
      break;
 8104804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104806:	7dfb      	ldrb	r3, [r7, #23]
 8104808:	2b00      	cmp	r3, #0
 810480a:	d10a      	bne.n	8104822 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810480c:	4b99      	ldr	r3, [pc, #612]	; (8104a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104810:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8104814:	687b      	ldr	r3, [r7, #4]
 8104816:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810481a:	4996      	ldr	r1, [pc, #600]	; (8104a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810481c:	4313      	orrs	r3, r2
 810481e:	658b      	str	r3, [r1, #88]	; 0x58
 8104820:	e001      	b.n	8104826 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104822:	7dfb      	ldrb	r3, [r7, #23]
 8104824:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104826:	687b      	ldr	r3, [r7, #4]
 8104828:	681b      	ldr	r3, [r3, #0]
 810482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810482e:	2b00      	cmp	r3, #0
 8104830:	d032      	beq.n	8104898 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8104832:	687b      	ldr	r3, [r7, #4]
 8104834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104836:	2b30      	cmp	r3, #48	; 0x30
 8104838:	d01c      	beq.n	8104874 <HAL_RCCEx_PeriphCLKConfig+0x348>
 810483a:	2b30      	cmp	r3, #48	; 0x30
 810483c:	d817      	bhi.n	810486e <HAL_RCCEx_PeriphCLKConfig+0x342>
 810483e:	2b20      	cmp	r3, #32
 8104840:	d00c      	beq.n	810485c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8104842:	2b20      	cmp	r3, #32
 8104844:	d813      	bhi.n	810486e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8104846:	2b00      	cmp	r3, #0
 8104848:	d016      	beq.n	8104878 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 810484a:	2b10      	cmp	r3, #16
 810484c:	d10f      	bne.n	810486e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810484e:	4b89      	ldr	r3, [pc, #548]	; (8104a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104852:	4a88      	ldr	r2, [pc, #544]	; (8104a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104858:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810485a:	e00e      	b.n	810487a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810485c:	687b      	ldr	r3, [r7, #4]
 810485e:	3304      	adds	r3, #4
 8104860:	2102      	movs	r1, #2
 8104862:	4618      	mov	r0, r3
 8104864:	f001 f866 	bl	8105934 <RCCEx_PLL2_Config>
 8104868:	4603      	mov	r3, r0
 810486a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810486c:	e005      	b.n	810487a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810486e:	2301      	movs	r3, #1
 8104870:	75fb      	strb	r3, [r7, #23]
      break;
 8104872:	e002      	b.n	810487a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8104874:	bf00      	nop
 8104876:	e000      	b.n	810487a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8104878:	bf00      	nop
    }

    if(ret == HAL_OK)
 810487a:	7dfb      	ldrb	r3, [r7, #23]
 810487c:	2b00      	cmp	r3, #0
 810487e:	d109      	bne.n	8104894 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104880:	4b7c      	ldr	r3, [pc, #496]	; (8104a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104884:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810488c:	4979      	ldr	r1, [pc, #484]	; (8104a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810488e:	4313      	orrs	r3, r2
 8104890:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104892:	e001      	b.n	8104898 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104894:	7dfb      	ldrb	r3, [r7, #23]
 8104896:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104898:	687b      	ldr	r3, [r7, #4]
 810489a:	681b      	ldr	r3, [r3, #0]
 810489c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81048a0:	2b00      	cmp	r3, #0
 81048a2:	d047      	beq.n	8104934 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81048a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81048ac:	d030      	beq.n	8104910 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 81048ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81048b2:	d82a      	bhi.n	810490a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81048b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81048b8:	d02c      	beq.n	8104914 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 81048ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81048be:	d824      	bhi.n	810490a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81048c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81048c4:	d018      	beq.n	81048f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 81048c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81048ca:	d81e      	bhi.n	810490a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81048cc:	2b00      	cmp	r3, #0
 81048ce:	d003      	beq.n	81048d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 81048d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81048d4:	d007      	beq.n	81048e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 81048d6:	e018      	b.n	810490a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81048d8:	4b66      	ldr	r3, [pc, #408]	; (8104a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048dc:	4a65      	ldr	r2, [pc, #404]	; (8104a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81048de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81048e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81048e4:	e017      	b.n	8104916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81048e6:	687b      	ldr	r3, [r7, #4]
 81048e8:	3304      	adds	r3, #4
 81048ea:	2100      	movs	r1, #0
 81048ec:	4618      	mov	r0, r3
 81048ee:	f001 f821 	bl	8105934 <RCCEx_PLL2_Config>
 81048f2:	4603      	mov	r3, r0
 81048f4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81048f6:	e00e      	b.n	8104916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81048f8:	687b      	ldr	r3, [r7, #4]
 81048fa:	3324      	adds	r3, #36	; 0x24
 81048fc:	2100      	movs	r1, #0
 81048fe:	4618      	mov	r0, r3
 8104900:	f001 f8ca 	bl	8105a98 <RCCEx_PLL3_Config>
 8104904:	4603      	mov	r3, r0
 8104906:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104908:	e005      	b.n	8104916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810490a:	2301      	movs	r3, #1
 810490c:	75fb      	strb	r3, [r7, #23]
      break;
 810490e:	e002      	b.n	8104916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8104910:	bf00      	nop
 8104912:	e000      	b.n	8104916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8104914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104916:	7dfb      	ldrb	r3, [r7, #23]
 8104918:	2b00      	cmp	r3, #0
 810491a:	d109      	bne.n	8104930 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810491c:	4b55      	ldr	r3, [pc, #340]	; (8104a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810491e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104920:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8104924:	687b      	ldr	r3, [r7, #4]
 8104926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104928:	4952      	ldr	r1, [pc, #328]	; (8104a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810492a:	4313      	orrs	r3, r2
 810492c:	650b      	str	r3, [r1, #80]	; 0x50
 810492e:	e001      	b.n	8104934 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104930:	7dfb      	ldrb	r3, [r7, #23]
 8104932:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104934:	687b      	ldr	r3, [r7, #4]
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810493c:	2b00      	cmp	r3, #0
 810493e:	d049      	beq.n	81049d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8104940:	687b      	ldr	r3, [r7, #4]
 8104942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104948:	d02e      	beq.n	81049a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 810494a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810494e:	d828      	bhi.n	81049a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104950:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104954:	d02a      	beq.n	81049ac <HAL_RCCEx_PeriphCLKConfig+0x480>
 8104956:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810495a:	d822      	bhi.n	81049a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 810495c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104960:	d026      	beq.n	81049b0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8104962:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104966:	d81c      	bhi.n	81049a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810496c:	d010      	beq.n	8104990 <HAL_RCCEx_PeriphCLKConfig+0x464>
 810496e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104972:	d816      	bhi.n	81049a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8104974:	2b00      	cmp	r3, #0
 8104976:	d01d      	beq.n	81049b4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8104978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810497c:	d111      	bne.n	81049a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810497e:	687b      	ldr	r3, [r7, #4]
 8104980:	3304      	adds	r3, #4
 8104982:	2101      	movs	r1, #1
 8104984:	4618      	mov	r0, r3
 8104986:	f000 ffd5 	bl	8105934 <RCCEx_PLL2_Config>
 810498a:	4603      	mov	r3, r0
 810498c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810498e:	e012      	b.n	81049b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104990:	687b      	ldr	r3, [r7, #4]
 8104992:	3324      	adds	r3, #36	; 0x24
 8104994:	2101      	movs	r1, #1
 8104996:	4618      	mov	r0, r3
 8104998:	f001 f87e 	bl	8105a98 <RCCEx_PLL3_Config>
 810499c:	4603      	mov	r3, r0
 810499e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81049a0:	e009      	b.n	81049b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81049a2:	2301      	movs	r3, #1
 81049a4:	75fb      	strb	r3, [r7, #23]
      break;
 81049a6:	e006      	b.n	81049b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81049a8:	bf00      	nop
 81049aa:	e004      	b.n	81049b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81049ac:	bf00      	nop
 81049ae:	e002      	b.n	81049b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81049b0:	bf00      	nop
 81049b2:	e000      	b.n	81049b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81049b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81049b6:	7dfb      	ldrb	r3, [r7, #23]
 81049b8:	2b00      	cmp	r3, #0
 81049ba:	d109      	bne.n	81049d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81049bc:	4b2d      	ldr	r3, [pc, #180]	; (8104a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81049be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81049c0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81049c4:	687b      	ldr	r3, [r7, #4]
 81049c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81049c8:	492a      	ldr	r1, [pc, #168]	; (8104a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81049ca:	4313      	orrs	r3, r2
 81049cc:	650b      	str	r3, [r1, #80]	; 0x50
 81049ce:	e001      	b.n	81049d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049d0:	7dfb      	ldrb	r3, [r7, #23]
 81049d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	681b      	ldr	r3, [r3, #0]
 81049d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81049dc:	2b00      	cmp	r3, #0
 81049de:	d04d      	beq.n	8104a7c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81049e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81049ea:	d02e      	beq.n	8104a4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 81049ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81049f0:	d828      	bhi.n	8104a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81049f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81049f6:	d02a      	beq.n	8104a4e <HAL_RCCEx_PeriphCLKConfig+0x522>
 81049f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81049fc:	d822      	bhi.n	8104a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81049fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104a02:	d026      	beq.n	8104a52 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8104a04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104a08:	d81c      	bhi.n	8104a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104a0e:	d010      	beq.n	8104a32 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8104a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104a14:	d816      	bhi.n	8104a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8104a16:	2b00      	cmp	r3, #0
 8104a18:	d01d      	beq.n	8104a56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8104a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104a1e:	d111      	bne.n	8104a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104a20:	687b      	ldr	r3, [r7, #4]
 8104a22:	3304      	adds	r3, #4
 8104a24:	2101      	movs	r1, #1
 8104a26:	4618      	mov	r0, r3
 8104a28:	f000 ff84 	bl	8105934 <RCCEx_PLL2_Config>
 8104a2c:	4603      	mov	r3, r0
 8104a2e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8104a30:	e012      	b.n	8104a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104a32:	687b      	ldr	r3, [r7, #4]
 8104a34:	3324      	adds	r3, #36	; 0x24
 8104a36:	2101      	movs	r1, #1
 8104a38:	4618      	mov	r0, r3
 8104a3a:	f001 f82d 	bl	8105a98 <RCCEx_PLL3_Config>
 8104a3e:	4603      	mov	r3, r0
 8104a40:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8104a42:	e009      	b.n	8104a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8104a44:	2301      	movs	r3, #1
 8104a46:	75fb      	strb	r3, [r7, #23]
      break;
 8104a48:	e006      	b.n	8104a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104a4a:	bf00      	nop
 8104a4c:	e004      	b.n	8104a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104a4e:	bf00      	nop
 8104a50:	e002      	b.n	8104a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104a52:	bf00      	nop
 8104a54:	e000      	b.n	8104a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8104a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104a58:	7dfb      	ldrb	r3, [r7, #23]
 8104a5a:	2b00      	cmp	r3, #0
 8104a5c:	d10c      	bne.n	8104a78 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8104a5e:	4b05      	ldr	r3, [pc, #20]	; (8104a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104a62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8104a66:	687b      	ldr	r3, [r7, #4]
 8104a68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104a6c:	4901      	ldr	r1, [pc, #4]	; (8104a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8104a6e:	4313      	orrs	r3, r2
 8104a70:	658b      	str	r3, [r1, #88]	; 0x58
 8104a72:	e003      	b.n	8104a7c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8104a74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a78:	7dfb      	ldrb	r3, [r7, #23]
 8104a7a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104a7c:	687b      	ldr	r3, [r7, #4]
 8104a7e:	681b      	ldr	r3, [r3, #0]
 8104a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104a84:	2b00      	cmp	r3, #0
 8104a86:	d02f      	beq.n	8104ae8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8104a88:	687b      	ldr	r3, [r7, #4]
 8104a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104a90:	d00e      	beq.n	8104ab0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8104a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104a96:	d814      	bhi.n	8104ac2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8104a98:	2b00      	cmp	r3, #0
 8104a9a:	d015      	beq.n	8104ac8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8104a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104aa0:	d10f      	bne.n	8104ac2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104aa2:	4bb0      	ldr	r3, [pc, #704]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104aa6:	4aaf      	ldr	r2, [pc, #700]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104aac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8104aae:	e00c      	b.n	8104aca <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104ab0:	687b      	ldr	r3, [r7, #4]
 8104ab2:	3304      	adds	r3, #4
 8104ab4:	2101      	movs	r1, #1
 8104ab6:	4618      	mov	r0, r3
 8104ab8:	f000 ff3c 	bl	8105934 <RCCEx_PLL2_Config>
 8104abc:	4603      	mov	r3, r0
 8104abe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8104ac0:	e003      	b.n	8104aca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104ac2:	2301      	movs	r3, #1
 8104ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8104ac6:	e000      	b.n	8104aca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8104ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104aca:	7dfb      	ldrb	r3, [r7, #23]
 8104acc:	2b00      	cmp	r3, #0
 8104ace:	d109      	bne.n	8104ae4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104ad0:	4ba4      	ldr	r3, [pc, #656]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104ad4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104ad8:	687b      	ldr	r3, [r7, #4]
 8104ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104adc:	49a1      	ldr	r1, [pc, #644]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104ade:	4313      	orrs	r3, r2
 8104ae0:	650b      	str	r3, [r1, #80]	; 0x50
 8104ae2:	e001      	b.n	8104ae8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ae4:	7dfb      	ldrb	r3, [r7, #23]
 8104ae6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104ae8:	687b      	ldr	r3, [r7, #4]
 8104aea:	681b      	ldr	r3, [r3, #0]
 8104aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104af0:	2b00      	cmp	r3, #0
 8104af2:	d032      	beq.n	8104b5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8104af4:	687b      	ldr	r3, [r7, #4]
 8104af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104af8:	2b03      	cmp	r3, #3
 8104afa:	d81b      	bhi.n	8104b34 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8104afc:	a201      	add	r2, pc, #4	; (adr r2, 8104b04 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8104afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b02:	bf00      	nop
 8104b04:	08104b3b 	.word	0x08104b3b
 8104b08:	08104b15 	.word	0x08104b15
 8104b0c:	08104b23 	.word	0x08104b23
 8104b10:	08104b3b 	.word	0x08104b3b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104b14:	4b93      	ldr	r3, [pc, #588]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b18:	4a92      	ldr	r2, [pc, #584]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8104b20:	e00c      	b.n	8104b3c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8104b22:	687b      	ldr	r3, [r7, #4]
 8104b24:	3304      	adds	r3, #4
 8104b26:	2102      	movs	r1, #2
 8104b28:	4618      	mov	r0, r3
 8104b2a:	f000 ff03 	bl	8105934 <RCCEx_PLL2_Config>
 8104b2e:	4603      	mov	r3, r0
 8104b30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8104b32:	e003      	b.n	8104b3c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8104b34:	2301      	movs	r3, #1
 8104b36:	75fb      	strb	r3, [r7, #23]
      break;
 8104b38:	e000      	b.n	8104b3c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8104b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104b3c:	7dfb      	ldrb	r3, [r7, #23]
 8104b3e:	2b00      	cmp	r3, #0
 8104b40:	d109      	bne.n	8104b56 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8104b42:	4b88      	ldr	r3, [pc, #544]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104b46:	f023 0203 	bic.w	r2, r3, #3
 8104b4a:	687b      	ldr	r3, [r7, #4]
 8104b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104b4e:	4985      	ldr	r1, [pc, #532]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104b50:	4313      	orrs	r3, r2
 8104b52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104b54:	e001      	b.n	8104b5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b56:	7dfb      	ldrb	r3, [r7, #23]
 8104b58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	681b      	ldr	r3, [r3, #0]
 8104b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8104b62:	2b00      	cmp	r3, #0
 8104b64:	f000 8088 	beq.w	8104c78 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8104b68:	4b7f      	ldr	r3, [pc, #508]	; (8104d68 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104b6a:	681b      	ldr	r3, [r3, #0]
 8104b6c:	4a7e      	ldr	r2, [pc, #504]	; (8104d68 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104b72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8104b74:	f7fd faa2 	bl	81020bc <HAL_GetTick>
 8104b78:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104b7a:	e009      	b.n	8104b90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104b7c:	f7fd fa9e 	bl	81020bc <HAL_GetTick>
 8104b80:	4602      	mov	r2, r0
 8104b82:	693b      	ldr	r3, [r7, #16]
 8104b84:	1ad3      	subs	r3, r2, r3
 8104b86:	2b64      	cmp	r3, #100	; 0x64
 8104b88:	d902      	bls.n	8104b90 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8104b8a:	2303      	movs	r3, #3
 8104b8c:	75fb      	strb	r3, [r7, #23]
        break;
 8104b8e:	e005      	b.n	8104b9c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104b90:	4b75      	ldr	r3, [pc, #468]	; (8104d68 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8104b92:	681b      	ldr	r3, [r3, #0]
 8104b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104b98:	2b00      	cmp	r3, #0
 8104b9a:	d0ef      	beq.n	8104b7c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8104b9c:	7dfb      	ldrb	r3, [r7, #23]
 8104b9e:	2b00      	cmp	r3, #0
 8104ba0:	d168      	bne.n	8104c74 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104ba2:	4b70      	ldr	r3, [pc, #448]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104ba4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104ba6:	687b      	ldr	r3, [r7, #4]
 8104ba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104bac:	4053      	eors	r3, r2
 8104bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104bb2:	2b00      	cmp	r3, #0
 8104bb4:	d013      	beq.n	8104bde <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104bb6:	4b6b      	ldr	r3, [pc, #428]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104bbe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104bc0:	4b68      	ldr	r3, [pc, #416]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104bc4:	4a67      	ldr	r2, [pc, #412]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8104bca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104bcc:	4b65      	ldr	r3, [pc, #404]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104bd0:	4a64      	ldr	r2, [pc, #400]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104bd6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8104bd8:	4a62      	ldr	r2, [pc, #392]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104bda:	68fb      	ldr	r3, [r7, #12]
 8104bdc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104bde:	687b      	ldr	r3, [r7, #4]
 8104be0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104be8:	d115      	bne.n	8104c16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104bea:	f7fd fa67 	bl	81020bc <HAL_GetTick>
 8104bee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104bf0:	e00b      	b.n	8104c0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104bf2:	f7fd fa63 	bl	81020bc <HAL_GetTick>
 8104bf6:	4602      	mov	r2, r0
 8104bf8:	693b      	ldr	r3, [r7, #16]
 8104bfa:	1ad3      	subs	r3, r2, r3
 8104bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8104c00:	4293      	cmp	r3, r2
 8104c02:	d902      	bls.n	8104c0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8104c04:	2303      	movs	r3, #3
 8104c06:	75fb      	strb	r3, [r7, #23]
            break;
 8104c08:	e005      	b.n	8104c16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104c0a:	4b56      	ldr	r3, [pc, #344]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104c0e:	f003 0302 	and.w	r3, r3, #2
 8104c12:	2b00      	cmp	r3, #0
 8104c14:	d0ed      	beq.n	8104bf2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8104c16:	7dfb      	ldrb	r3, [r7, #23]
 8104c18:	2b00      	cmp	r3, #0
 8104c1a:	d128      	bne.n	8104c6e <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104c1c:	687b      	ldr	r3, [r7, #4]
 8104c1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104c2a:	d10f      	bne.n	8104c4c <HAL_RCCEx_PeriphCLKConfig+0x720>
 8104c2c:	4b4d      	ldr	r3, [pc, #308]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104c2e:	691b      	ldr	r3, [r3, #16]
 8104c30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8104c34:	687b      	ldr	r3, [r7, #4]
 8104c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104c3a:	091b      	lsrs	r3, r3, #4
 8104c3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8104c40:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8104c44:	4947      	ldr	r1, [pc, #284]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104c46:	4313      	orrs	r3, r2
 8104c48:	610b      	str	r3, [r1, #16]
 8104c4a:	e005      	b.n	8104c58 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8104c4c:	4b45      	ldr	r3, [pc, #276]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104c4e:	691b      	ldr	r3, [r3, #16]
 8104c50:	4a44      	ldr	r2, [pc, #272]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104c52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8104c56:	6113      	str	r3, [r2, #16]
 8104c58:	4b42      	ldr	r3, [pc, #264]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104c5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104c5c:	687b      	ldr	r3, [r7, #4]
 8104c5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104c66:	493f      	ldr	r1, [pc, #252]	; (8104d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104c68:	4313      	orrs	r3, r2
 8104c6a:	670b      	str	r3, [r1, #112]	; 0x70
 8104c6c:	e004      	b.n	8104c78 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104c6e:	7dfb      	ldrb	r3, [r7, #23]
 8104c70:	75bb      	strb	r3, [r7, #22]
 8104c72:	e001      	b.n	8104c78 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c74:	7dfb      	ldrb	r3, [r7, #23]
 8104c76:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104c78:	687b      	ldr	r3, [r7, #4]
 8104c7a:	681b      	ldr	r3, [r3, #0]
 8104c7c:	f003 0301 	and.w	r3, r3, #1
 8104c80:	2b00      	cmp	r3, #0
 8104c82:	f000 8083 	beq.w	8104d8c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8104c86:	687b      	ldr	r3, [r7, #4]
 8104c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104c8a:	2b28      	cmp	r3, #40	; 0x28
 8104c8c:	d866      	bhi.n	8104d5c <HAL_RCCEx_PeriphCLKConfig+0x830>
 8104c8e:	a201      	add	r2, pc, #4	; (adr r2, 8104c94 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8104c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c94:	08104d6d 	.word	0x08104d6d
 8104c98:	08104d5d 	.word	0x08104d5d
 8104c9c:	08104d5d 	.word	0x08104d5d
 8104ca0:	08104d5d 	.word	0x08104d5d
 8104ca4:	08104d5d 	.word	0x08104d5d
 8104ca8:	08104d5d 	.word	0x08104d5d
 8104cac:	08104d5d 	.word	0x08104d5d
 8104cb0:	08104d5d 	.word	0x08104d5d
 8104cb4:	08104d39 	.word	0x08104d39
 8104cb8:	08104d5d 	.word	0x08104d5d
 8104cbc:	08104d5d 	.word	0x08104d5d
 8104cc0:	08104d5d 	.word	0x08104d5d
 8104cc4:	08104d5d 	.word	0x08104d5d
 8104cc8:	08104d5d 	.word	0x08104d5d
 8104ccc:	08104d5d 	.word	0x08104d5d
 8104cd0:	08104d5d 	.word	0x08104d5d
 8104cd4:	08104d4b 	.word	0x08104d4b
 8104cd8:	08104d5d 	.word	0x08104d5d
 8104cdc:	08104d5d 	.word	0x08104d5d
 8104ce0:	08104d5d 	.word	0x08104d5d
 8104ce4:	08104d5d 	.word	0x08104d5d
 8104ce8:	08104d5d 	.word	0x08104d5d
 8104cec:	08104d5d 	.word	0x08104d5d
 8104cf0:	08104d5d 	.word	0x08104d5d
 8104cf4:	08104d6d 	.word	0x08104d6d
 8104cf8:	08104d5d 	.word	0x08104d5d
 8104cfc:	08104d5d 	.word	0x08104d5d
 8104d00:	08104d5d 	.word	0x08104d5d
 8104d04:	08104d5d 	.word	0x08104d5d
 8104d08:	08104d5d 	.word	0x08104d5d
 8104d0c:	08104d5d 	.word	0x08104d5d
 8104d10:	08104d5d 	.word	0x08104d5d
 8104d14:	08104d6d 	.word	0x08104d6d
 8104d18:	08104d5d 	.word	0x08104d5d
 8104d1c:	08104d5d 	.word	0x08104d5d
 8104d20:	08104d5d 	.word	0x08104d5d
 8104d24:	08104d5d 	.word	0x08104d5d
 8104d28:	08104d5d 	.word	0x08104d5d
 8104d2c:	08104d5d 	.word	0x08104d5d
 8104d30:	08104d5d 	.word	0x08104d5d
 8104d34:	08104d6d 	.word	0x08104d6d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104d38:	687b      	ldr	r3, [r7, #4]
 8104d3a:	3304      	adds	r3, #4
 8104d3c:	2101      	movs	r1, #1
 8104d3e:	4618      	mov	r0, r3
 8104d40:	f000 fdf8 	bl	8105934 <RCCEx_PLL2_Config>
 8104d44:	4603      	mov	r3, r0
 8104d46:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8104d48:	e011      	b.n	8104d6e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	3324      	adds	r3, #36	; 0x24
 8104d4e:	2101      	movs	r1, #1
 8104d50:	4618      	mov	r0, r3
 8104d52:	f000 fea1 	bl	8105a98 <RCCEx_PLL3_Config>
 8104d56:	4603      	mov	r3, r0
 8104d58:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8104d5a:	e008      	b.n	8104d6e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104d5c:	2301      	movs	r3, #1
 8104d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8104d60:	e005      	b.n	8104d6e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8104d62:	bf00      	nop
 8104d64:	58024400 	.word	0x58024400
 8104d68:	58024800 	.word	0x58024800
      break;
 8104d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104d6e:	7dfb      	ldrb	r3, [r7, #23]
 8104d70:	2b00      	cmp	r3, #0
 8104d72:	d109      	bne.n	8104d88 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104d74:	4b96      	ldr	r3, [pc, #600]	; (8104fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104d78:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8104d7c:	687b      	ldr	r3, [r7, #4]
 8104d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104d80:	4993      	ldr	r1, [pc, #588]	; (8104fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104d82:	4313      	orrs	r3, r2
 8104d84:	654b      	str	r3, [r1, #84]	; 0x54
 8104d86:	e001      	b.n	8104d8c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d88:	7dfb      	ldrb	r3, [r7, #23]
 8104d8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104d8c:	687b      	ldr	r3, [r7, #4]
 8104d8e:	681b      	ldr	r3, [r3, #0]
 8104d90:	f003 0302 	and.w	r3, r3, #2
 8104d94:	2b00      	cmp	r3, #0
 8104d96:	d038      	beq.n	8104e0a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104d9c:	2b05      	cmp	r3, #5
 8104d9e:	d821      	bhi.n	8104de4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8104da0:	a201      	add	r2, pc, #4	; (adr r2, 8104da8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8104da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104da6:	bf00      	nop
 8104da8:	08104deb 	.word	0x08104deb
 8104dac:	08104dc1 	.word	0x08104dc1
 8104db0:	08104dd3 	.word	0x08104dd3
 8104db4:	08104deb 	.word	0x08104deb
 8104db8:	08104deb 	.word	0x08104deb
 8104dbc:	08104deb 	.word	0x08104deb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	3304      	adds	r3, #4
 8104dc4:	2101      	movs	r1, #1
 8104dc6:	4618      	mov	r0, r3
 8104dc8:	f000 fdb4 	bl	8105934 <RCCEx_PLL2_Config>
 8104dcc:	4603      	mov	r3, r0
 8104dce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8104dd0:	e00c      	b.n	8104dec <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104dd2:	687b      	ldr	r3, [r7, #4]
 8104dd4:	3324      	adds	r3, #36	; 0x24
 8104dd6:	2101      	movs	r1, #1
 8104dd8:	4618      	mov	r0, r3
 8104dda:	f000 fe5d 	bl	8105a98 <RCCEx_PLL3_Config>
 8104dde:	4603      	mov	r3, r0
 8104de0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8104de2:	e003      	b.n	8104dec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104de4:	2301      	movs	r3, #1
 8104de6:	75fb      	strb	r3, [r7, #23]
      break;
 8104de8:	e000      	b.n	8104dec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8104dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104dec:	7dfb      	ldrb	r3, [r7, #23]
 8104dee:	2b00      	cmp	r3, #0
 8104df0:	d109      	bne.n	8104e06 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8104df2:	4b77      	ldr	r3, [pc, #476]	; (8104fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104df6:	f023 0207 	bic.w	r2, r3, #7
 8104dfa:	687b      	ldr	r3, [r7, #4]
 8104dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104dfe:	4974      	ldr	r1, [pc, #464]	; (8104fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104e00:	4313      	orrs	r3, r2
 8104e02:	654b      	str	r3, [r1, #84]	; 0x54
 8104e04:	e001      	b.n	8104e0a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e06:	7dfb      	ldrb	r3, [r7, #23]
 8104e08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104e0a:	687b      	ldr	r3, [r7, #4]
 8104e0c:	681b      	ldr	r3, [r3, #0]
 8104e0e:	f003 0304 	and.w	r3, r3, #4
 8104e12:	2b00      	cmp	r3, #0
 8104e14:	d03a      	beq.n	8104e8c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8104e16:	687b      	ldr	r3, [r7, #4]
 8104e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104e1c:	2b05      	cmp	r3, #5
 8104e1e:	d821      	bhi.n	8104e64 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8104e20:	a201      	add	r2, pc, #4	; (adr r2, 8104e28 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8104e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e26:	bf00      	nop
 8104e28:	08104e6b 	.word	0x08104e6b
 8104e2c:	08104e41 	.word	0x08104e41
 8104e30:	08104e53 	.word	0x08104e53
 8104e34:	08104e6b 	.word	0x08104e6b
 8104e38:	08104e6b 	.word	0x08104e6b
 8104e3c:	08104e6b 	.word	0x08104e6b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104e40:	687b      	ldr	r3, [r7, #4]
 8104e42:	3304      	adds	r3, #4
 8104e44:	2101      	movs	r1, #1
 8104e46:	4618      	mov	r0, r3
 8104e48:	f000 fd74 	bl	8105934 <RCCEx_PLL2_Config>
 8104e4c:	4603      	mov	r3, r0
 8104e4e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104e50:	e00c      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104e52:	687b      	ldr	r3, [r7, #4]
 8104e54:	3324      	adds	r3, #36	; 0x24
 8104e56:	2101      	movs	r1, #1
 8104e58:	4618      	mov	r0, r3
 8104e5a:	f000 fe1d 	bl	8105a98 <RCCEx_PLL3_Config>
 8104e5e:	4603      	mov	r3, r0
 8104e60:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104e62:	e003      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104e64:	2301      	movs	r3, #1
 8104e66:	75fb      	strb	r3, [r7, #23]
      break;
 8104e68:	e000      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8104e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104e6c:	7dfb      	ldrb	r3, [r7, #23]
 8104e6e:	2b00      	cmp	r3, #0
 8104e70:	d10a      	bne.n	8104e88 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104e72:	4b57      	ldr	r3, [pc, #348]	; (8104fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104e76:	f023 0207 	bic.w	r2, r3, #7
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104e80:	4953      	ldr	r1, [pc, #332]	; (8104fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104e82:	4313      	orrs	r3, r2
 8104e84:	658b      	str	r3, [r1, #88]	; 0x58
 8104e86:	e001      	b.n	8104e8c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e88:	7dfb      	ldrb	r3, [r7, #23]
 8104e8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	681b      	ldr	r3, [r3, #0]
 8104e90:	f003 0320 	and.w	r3, r3, #32
 8104e94:	2b00      	cmp	r3, #0
 8104e96:	d04b      	beq.n	8104f30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104ea2:	d02e      	beq.n	8104f02 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8104ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104ea8:	d828      	bhi.n	8104efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104eae:	d02a      	beq.n	8104f06 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8104eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104eb4:	d822      	bhi.n	8104efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104eb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104eba:	d026      	beq.n	8104f0a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8104ebc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104ec0:	d81c      	bhi.n	8104efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104ec6:	d010      	beq.n	8104eea <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8104ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104ecc:	d816      	bhi.n	8104efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104ece:	2b00      	cmp	r3, #0
 8104ed0:	d01d      	beq.n	8104f0e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8104ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104ed6:	d111      	bne.n	8104efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104ed8:	687b      	ldr	r3, [r7, #4]
 8104eda:	3304      	adds	r3, #4
 8104edc:	2100      	movs	r1, #0
 8104ede:	4618      	mov	r0, r3
 8104ee0:	f000 fd28 	bl	8105934 <RCCEx_PLL2_Config>
 8104ee4:	4603      	mov	r3, r0
 8104ee6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8104ee8:	e012      	b.n	8104f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104eea:	687b      	ldr	r3, [r7, #4]
 8104eec:	3324      	adds	r3, #36	; 0x24
 8104eee:	2102      	movs	r1, #2
 8104ef0:	4618      	mov	r0, r3
 8104ef2:	f000 fdd1 	bl	8105a98 <RCCEx_PLL3_Config>
 8104ef6:	4603      	mov	r3, r0
 8104ef8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8104efa:	e009      	b.n	8104f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104efc:	2301      	movs	r3, #1
 8104efe:	75fb      	strb	r3, [r7, #23]
      break;
 8104f00:	e006      	b.n	8104f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8104f02:	bf00      	nop
 8104f04:	e004      	b.n	8104f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8104f06:	bf00      	nop
 8104f08:	e002      	b.n	8104f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8104f0a:	bf00      	nop
 8104f0c:	e000      	b.n	8104f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8104f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104f10:	7dfb      	ldrb	r3, [r7, #23]
 8104f12:	2b00      	cmp	r3, #0
 8104f14:	d10a      	bne.n	8104f2c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8104f16:	4b2e      	ldr	r3, [pc, #184]	; (8104fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104f1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8104f1e:	687b      	ldr	r3, [r7, #4]
 8104f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104f24:	492a      	ldr	r1, [pc, #168]	; (8104fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104f26:	4313      	orrs	r3, r2
 8104f28:	654b      	str	r3, [r1, #84]	; 0x54
 8104f2a:	e001      	b.n	8104f30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f2c:	7dfb      	ldrb	r3, [r7, #23]
 8104f2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104f30:	687b      	ldr	r3, [r7, #4]
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104f38:	2b00      	cmp	r3, #0
 8104f3a:	d04d      	beq.n	8104fd8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104f42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104f46:	d02e      	beq.n	8104fa6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8104f48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104f4c:	d828      	bhi.n	8104fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104f52:	d02a      	beq.n	8104faa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8104f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104f58:	d822      	bhi.n	8104fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104f5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104f5e:	d026      	beq.n	8104fae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8104f60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104f64:	d81c      	bhi.n	8104fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104f6a:	d010      	beq.n	8104f8e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8104f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104f70:	d816      	bhi.n	8104fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104f72:	2b00      	cmp	r3, #0
 8104f74:	d01d      	beq.n	8104fb2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8104f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104f7a:	d111      	bne.n	8104fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104f7c:	687b      	ldr	r3, [r7, #4]
 8104f7e:	3304      	adds	r3, #4
 8104f80:	2100      	movs	r1, #0
 8104f82:	4618      	mov	r0, r3
 8104f84:	f000 fcd6 	bl	8105934 <RCCEx_PLL2_Config>
 8104f88:	4603      	mov	r3, r0
 8104f8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104f8c:	e012      	b.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104f8e:	687b      	ldr	r3, [r7, #4]
 8104f90:	3324      	adds	r3, #36	; 0x24
 8104f92:	2102      	movs	r1, #2
 8104f94:	4618      	mov	r0, r3
 8104f96:	f000 fd7f 	bl	8105a98 <RCCEx_PLL3_Config>
 8104f9a:	4603      	mov	r3, r0
 8104f9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104f9e:	e009      	b.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104fa0:	2301      	movs	r3, #1
 8104fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8104fa4:	e006      	b.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104fa6:	bf00      	nop
 8104fa8:	e004      	b.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104faa:	bf00      	nop
 8104fac:	e002      	b.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104fae:	bf00      	nop
 8104fb0:	e000      	b.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104fb4:	7dfb      	ldrb	r3, [r7, #23]
 8104fb6:	2b00      	cmp	r3, #0
 8104fb8:	d10c      	bne.n	8104fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8104fba:	4b05      	ldr	r3, [pc, #20]	; (8104fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104fbe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8104fc2:	687b      	ldr	r3, [r7, #4]
 8104fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104fc8:	4901      	ldr	r1, [pc, #4]	; (8104fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104fca:	4313      	orrs	r3, r2
 8104fcc:	658b      	str	r3, [r1, #88]	; 0x58
 8104fce:	e003      	b.n	8104fd8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8104fd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104fd4:	7dfb      	ldrb	r3, [r7, #23]
 8104fd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104fd8:	687b      	ldr	r3, [r7, #4]
 8104fda:	681b      	ldr	r3, [r3, #0]
 8104fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104fe0:	2b00      	cmp	r3, #0
 8104fe2:	d04b      	beq.n	810507c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8104fe4:	687b      	ldr	r3, [r7, #4]
 8104fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104fea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104fee:	d02e      	beq.n	810504e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8104ff0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104ff4:	d828      	bhi.n	8105048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104ffa:	d02a      	beq.n	8105052 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8104ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105000:	d822      	bhi.n	8105048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8105002:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8105006:	d026      	beq.n	8105056 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8105008:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810500c:	d81c      	bhi.n	8105048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810500e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105012:	d010      	beq.n	8105036 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8105014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105018:	d816      	bhi.n	8105048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810501a:	2b00      	cmp	r3, #0
 810501c:	d01d      	beq.n	810505a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 810501e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105022:	d111      	bne.n	8105048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	3304      	adds	r3, #4
 8105028:	2100      	movs	r1, #0
 810502a:	4618      	mov	r0, r3
 810502c:	f000 fc82 	bl	8105934 <RCCEx_PLL2_Config>
 8105030:	4603      	mov	r3, r0
 8105032:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8105034:	e012      	b.n	810505c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105036:	687b      	ldr	r3, [r7, #4]
 8105038:	3324      	adds	r3, #36	; 0x24
 810503a:	2102      	movs	r1, #2
 810503c:	4618      	mov	r0, r3
 810503e:	f000 fd2b 	bl	8105a98 <RCCEx_PLL3_Config>
 8105042:	4603      	mov	r3, r0
 8105044:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8105046:	e009      	b.n	810505c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105048:	2301      	movs	r3, #1
 810504a:	75fb      	strb	r3, [r7, #23]
      break;
 810504c:	e006      	b.n	810505c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810504e:	bf00      	nop
 8105050:	e004      	b.n	810505c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105052:	bf00      	nop
 8105054:	e002      	b.n	810505c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8105056:	bf00      	nop
 8105058:	e000      	b.n	810505c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810505a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810505c:	7dfb      	ldrb	r3, [r7, #23]
 810505e:	2b00      	cmp	r3, #0
 8105060:	d10a      	bne.n	8105078 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8105062:	4b9d      	ldr	r3, [pc, #628]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105066:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810506a:	687b      	ldr	r3, [r7, #4]
 810506c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105070:	4999      	ldr	r1, [pc, #612]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105072:	4313      	orrs	r3, r2
 8105074:	658b      	str	r3, [r1, #88]	; 0x58
 8105076:	e001      	b.n	810507c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105078:	7dfb      	ldrb	r3, [r7, #23]
 810507a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	681b      	ldr	r3, [r3, #0]
 8105080:	f003 0308 	and.w	r3, r3, #8
 8105084:	2b00      	cmp	r3, #0
 8105086:	d01a      	beq.n	81050be <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810508e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105092:	d10a      	bne.n	81050aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105094:	687b      	ldr	r3, [r7, #4]
 8105096:	3324      	adds	r3, #36	; 0x24
 8105098:	2102      	movs	r1, #2
 810509a:	4618      	mov	r0, r3
 810509c:	f000 fcfc 	bl	8105a98 <RCCEx_PLL3_Config>
 81050a0:	4603      	mov	r3, r0
 81050a2:	2b00      	cmp	r3, #0
 81050a4:	d001      	beq.n	81050aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 81050a6:	2301      	movs	r3, #1
 81050a8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81050aa:	4b8b      	ldr	r3, [pc, #556]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81050ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81050ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81050b2:	687b      	ldr	r3, [r7, #4]
 81050b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81050b8:	4987      	ldr	r1, [pc, #540]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81050ba:	4313      	orrs	r3, r2
 81050bc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81050be:	687b      	ldr	r3, [r7, #4]
 81050c0:	681b      	ldr	r3, [r3, #0]
 81050c2:	f003 0310 	and.w	r3, r3, #16
 81050c6:	2b00      	cmp	r3, #0
 81050c8:	d01a      	beq.n	8105100 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81050ca:	687b      	ldr	r3, [r7, #4]
 81050cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81050d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81050d4:	d10a      	bne.n	81050ec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81050d6:	687b      	ldr	r3, [r7, #4]
 81050d8:	3324      	adds	r3, #36	; 0x24
 81050da:	2102      	movs	r1, #2
 81050dc:	4618      	mov	r0, r3
 81050de:	f000 fcdb 	bl	8105a98 <RCCEx_PLL3_Config>
 81050e2:	4603      	mov	r3, r0
 81050e4:	2b00      	cmp	r3, #0
 81050e6:	d001      	beq.n	81050ec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81050e8:	2301      	movs	r3, #1
 81050ea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81050ec:	4b7a      	ldr	r3, [pc, #488]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81050ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81050f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81050f4:	687b      	ldr	r3, [r7, #4]
 81050f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81050fa:	4977      	ldr	r1, [pc, #476]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81050fc:	4313      	orrs	r3, r2
 81050fe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105100:	687b      	ldr	r3, [r7, #4]
 8105102:	681b      	ldr	r3, [r3, #0]
 8105104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105108:	2b00      	cmp	r3, #0
 810510a:	d034      	beq.n	8105176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 810510c:	687b      	ldr	r3, [r7, #4]
 810510e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105112:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105116:	d01d      	beq.n	8105154 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8105118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810511c:	d817      	bhi.n	810514e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 810511e:	2b00      	cmp	r3, #0
 8105120:	d003      	beq.n	810512a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8105122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105126:	d009      	beq.n	810513c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8105128:	e011      	b.n	810514e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	3304      	adds	r3, #4
 810512e:	2100      	movs	r1, #0
 8105130:	4618      	mov	r0, r3
 8105132:	f000 fbff 	bl	8105934 <RCCEx_PLL2_Config>
 8105136:	4603      	mov	r3, r0
 8105138:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810513a:	e00c      	b.n	8105156 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810513c:	687b      	ldr	r3, [r7, #4]
 810513e:	3324      	adds	r3, #36	; 0x24
 8105140:	2102      	movs	r1, #2
 8105142:	4618      	mov	r0, r3
 8105144:	f000 fca8 	bl	8105a98 <RCCEx_PLL3_Config>
 8105148:	4603      	mov	r3, r0
 810514a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810514c:	e003      	b.n	8105156 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810514e:	2301      	movs	r3, #1
 8105150:	75fb      	strb	r3, [r7, #23]
      break;
 8105152:	e000      	b.n	8105156 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8105154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105156:	7dfb      	ldrb	r3, [r7, #23]
 8105158:	2b00      	cmp	r3, #0
 810515a:	d10a      	bne.n	8105172 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810515c:	4b5e      	ldr	r3, [pc, #376]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810516a:	495b      	ldr	r1, [pc, #364]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810516c:	4313      	orrs	r3, r2
 810516e:	658b      	str	r3, [r1, #88]	; 0x58
 8105170:	e001      	b.n	8105176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105172:	7dfb      	ldrb	r3, [r7, #23]
 8105174:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105176:	687b      	ldr	r3, [r7, #4]
 8105178:	681b      	ldr	r3, [r3, #0]
 810517a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810517e:	2b00      	cmp	r3, #0
 8105180:	d033      	beq.n	81051ea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8105182:	687b      	ldr	r3, [r7, #4]
 8105184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105188:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810518c:	d01c      	beq.n	81051c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 810518e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105192:	d816      	bhi.n	81051c2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8105194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105198:	d003      	beq.n	81051a2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 810519a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810519e:	d007      	beq.n	81051b0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 81051a0:	e00f      	b.n	81051c2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81051a2:	4b4d      	ldr	r3, [pc, #308]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051a6:	4a4c      	ldr	r2, [pc, #304]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81051a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81051ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81051ae:	e00c      	b.n	81051ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81051b0:	687b      	ldr	r3, [r7, #4]
 81051b2:	3324      	adds	r3, #36	; 0x24
 81051b4:	2101      	movs	r1, #1
 81051b6:	4618      	mov	r0, r3
 81051b8:	f000 fc6e 	bl	8105a98 <RCCEx_PLL3_Config>
 81051bc:	4603      	mov	r3, r0
 81051be:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81051c0:	e003      	b.n	81051ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81051c2:	2301      	movs	r3, #1
 81051c4:	75fb      	strb	r3, [r7, #23]
      break;
 81051c6:	e000      	b.n	81051ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 81051c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81051ca:	7dfb      	ldrb	r3, [r7, #23]
 81051cc:	2b00      	cmp	r3, #0
 81051ce:	d10a      	bne.n	81051e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81051d0:	4b41      	ldr	r3, [pc, #260]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81051d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81051d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81051d8:	687b      	ldr	r3, [r7, #4]
 81051da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81051de:	493e      	ldr	r1, [pc, #248]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81051e0:	4313      	orrs	r3, r2
 81051e2:	654b      	str	r3, [r1, #84]	; 0x54
 81051e4:	e001      	b.n	81051ea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81051e6:	7dfb      	ldrb	r3, [r7, #23]
 81051e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81051ea:	687b      	ldr	r3, [r7, #4]
 81051ec:	681b      	ldr	r3, [r3, #0]
 81051ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81051f2:	2b00      	cmp	r3, #0
 81051f4:	d029      	beq.n	810524a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81051f6:	687b      	ldr	r3, [r7, #4]
 81051f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81051fa:	2b00      	cmp	r3, #0
 81051fc:	d003      	beq.n	8105206 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81051fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105202:	d007      	beq.n	8105214 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8105204:	e00f      	b.n	8105226 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105206:	4b34      	ldr	r3, [pc, #208]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810520a:	4a33      	ldr	r2, [pc, #204]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810520c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105210:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8105212:	e00b      	b.n	810522c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105214:	687b      	ldr	r3, [r7, #4]
 8105216:	3304      	adds	r3, #4
 8105218:	2102      	movs	r1, #2
 810521a:	4618      	mov	r0, r3
 810521c:	f000 fb8a 	bl	8105934 <RCCEx_PLL2_Config>
 8105220:	4603      	mov	r3, r0
 8105222:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8105224:	e002      	b.n	810522c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8105226:	2301      	movs	r3, #1
 8105228:	75fb      	strb	r3, [r7, #23]
      break;
 810522a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810522c:	7dfb      	ldrb	r3, [r7, #23]
 810522e:	2b00      	cmp	r3, #0
 8105230:	d109      	bne.n	8105246 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105232:	4b29      	ldr	r3, [pc, #164]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810523a:	687b      	ldr	r3, [r7, #4]
 810523c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810523e:	4926      	ldr	r1, [pc, #152]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8105240:	4313      	orrs	r3, r2
 8105242:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105244:	e001      	b.n	810524a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105246:	7dfb      	ldrb	r3, [r7, #23]
 8105248:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810524a:	687b      	ldr	r3, [r7, #4]
 810524c:	681b      	ldr	r3, [r3, #0]
 810524e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105252:	2b00      	cmp	r3, #0
 8105254:	d00a      	beq.n	810526c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8105256:	687b      	ldr	r3, [r7, #4]
 8105258:	3324      	adds	r3, #36	; 0x24
 810525a:	2102      	movs	r1, #2
 810525c:	4618      	mov	r0, r3
 810525e:	f000 fc1b 	bl	8105a98 <RCCEx_PLL3_Config>
 8105262:	4603      	mov	r3, r0
 8105264:	2b00      	cmp	r3, #0
 8105266:	d001      	beq.n	810526c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8105268:	2301      	movs	r3, #1
 810526a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810526c:	687b      	ldr	r3, [r7, #4]
 810526e:	681b      	ldr	r3, [r3, #0]
 8105270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105274:	2b00      	cmp	r3, #0
 8105276:	d033      	beq.n	81052e0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8105278:	687b      	ldr	r3, [r7, #4]
 810527a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810527c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105280:	d017      	beq.n	81052b2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8105282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105286:	d811      	bhi.n	81052ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8105288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810528c:	d013      	beq.n	81052b6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810528e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105292:	d80b      	bhi.n	81052ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8105294:	2b00      	cmp	r3, #0
 8105296:	d010      	beq.n	81052ba <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8105298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810529c:	d106      	bne.n	81052ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810529e:	4b0e      	ldr	r3, [pc, #56]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81052a2:	4a0d      	ldr	r2, [pc, #52]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81052a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81052a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81052aa:	e007      	b.n	81052bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81052ac:	2301      	movs	r3, #1
 81052ae:	75fb      	strb	r3, [r7, #23]
      break;
 81052b0:	e004      	b.n	81052bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81052b2:	bf00      	nop
 81052b4:	e002      	b.n	81052bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81052b6:	bf00      	nop
 81052b8:	e000      	b.n	81052bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81052ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 81052bc:	7dfb      	ldrb	r3, [r7, #23]
 81052be:	2b00      	cmp	r3, #0
 81052c0:	d10c      	bne.n	81052dc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81052c2:	4b05      	ldr	r3, [pc, #20]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81052c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81052ca:	687b      	ldr	r3, [r7, #4]
 81052cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81052ce:	4902      	ldr	r1, [pc, #8]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81052d0:	4313      	orrs	r3, r2
 81052d2:	654b      	str	r3, [r1, #84]	; 0x54
 81052d4:	e004      	b.n	81052e0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81052d6:	bf00      	nop
 81052d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81052dc:	7dfb      	ldrb	r3, [r7, #23]
 81052de:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81052e0:	687b      	ldr	r3, [r7, #4]
 81052e2:	681b      	ldr	r3, [r3, #0]
 81052e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81052e8:	2b00      	cmp	r3, #0
 81052ea:	d008      	beq.n	81052fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81052ec:	4b31      	ldr	r3, [pc, #196]	; (81053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81052ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81052f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81052f4:	687b      	ldr	r3, [r7, #4]
 81052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81052f8:	492e      	ldr	r1, [pc, #184]	; (81053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81052fa:	4313      	orrs	r3, r2
 81052fc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81052fe:	687b      	ldr	r3, [r7, #4]
 8105300:	681b      	ldr	r3, [r3, #0]
 8105302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8105306:	2b00      	cmp	r3, #0
 8105308:	d009      	beq.n	810531e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810530a:	4b2a      	ldr	r3, [pc, #168]	; (81053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810530c:	691b      	ldr	r3, [r3, #16]
 810530e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8105312:	687b      	ldr	r3, [r7, #4]
 8105314:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105318:	4926      	ldr	r1, [pc, #152]	; (81053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810531a:	4313      	orrs	r3, r2
 810531c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810531e:	687b      	ldr	r3, [r7, #4]
 8105320:	681b      	ldr	r3, [r3, #0]
 8105322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8105326:	2b00      	cmp	r3, #0
 8105328:	d008      	beq.n	810533c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810532a:	4b22      	ldr	r3, [pc, #136]	; (81053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810532c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810532e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105336:	491f      	ldr	r1, [pc, #124]	; (81053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105338:	4313      	orrs	r3, r2
 810533a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810533c:	687b      	ldr	r3, [r7, #4]
 810533e:	681b      	ldr	r3, [r3, #0]
 8105340:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8105344:	2b00      	cmp	r3, #0
 8105346:	d00d      	beq.n	8105364 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105348:	4b1a      	ldr	r3, [pc, #104]	; (81053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810534a:	691b      	ldr	r3, [r3, #16]
 810534c:	4a19      	ldr	r2, [pc, #100]	; (81053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810534e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8105352:	6113      	str	r3, [r2, #16]
 8105354:	4b17      	ldr	r3, [pc, #92]	; (81053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105356:	691a      	ldr	r2, [r3, #16]
 8105358:	687b      	ldr	r3, [r7, #4]
 810535a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810535e:	4915      	ldr	r1, [pc, #84]	; (81053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8105360:	4313      	orrs	r3, r2
 8105362:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105364:	687b      	ldr	r3, [r7, #4]
 8105366:	681b      	ldr	r3, [r3, #0]
 8105368:	2b00      	cmp	r3, #0
 810536a:	da08      	bge.n	810537e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810536c:	4b11      	ldr	r3, [pc, #68]	; (81053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810536e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105370:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105378:	490e      	ldr	r1, [pc, #56]	; (81053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810537a:	4313      	orrs	r3, r2
 810537c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	681b      	ldr	r3, [r3, #0]
 8105382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8105386:	2b00      	cmp	r3, #0
 8105388:	d009      	beq.n	810539e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810538a:	4b0a      	ldr	r3, [pc, #40]	; (81053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810538e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8105392:	687b      	ldr	r3, [r7, #4]
 8105394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105398:	4906      	ldr	r1, [pc, #24]	; (81053b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810539a:	4313      	orrs	r3, r2
 810539c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810539e:	7dbb      	ldrb	r3, [r7, #22]
 81053a0:	2b00      	cmp	r3, #0
 81053a2:	d101      	bne.n	81053a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 81053a4:	2300      	movs	r3, #0
 81053a6:	e000      	b.n	81053aa <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 81053a8:	2301      	movs	r3, #1
}
 81053aa:	4618      	mov	r0, r3
 81053ac:	3718      	adds	r7, #24
 81053ae:	46bd      	mov	sp, r7
 81053b0:	bd80      	pop	{r7, pc}
 81053b2:	bf00      	nop
 81053b4:	58024400 	.word	0x58024400

081053b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81053b8:	b580      	push	{r7, lr}
 81053ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81053bc:	f7ff f858 	bl	8104470 <HAL_RCC_GetHCLKFreq>
 81053c0:	4602      	mov	r2, r0
 81053c2:	4b06      	ldr	r3, [pc, #24]	; (81053dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81053c4:	6a1b      	ldr	r3, [r3, #32]
 81053c6:	091b      	lsrs	r3, r3, #4
 81053c8:	f003 0307 	and.w	r3, r3, #7
 81053cc:	4904      	ldr	r1, [pc, #16]	; (81053e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81053ce:	5ccb      	ldrb	r3, [r1, r3]
 81053d0:	f003 031f 	and.w	r3, r3, #31
 81053d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81053d8:	4618      	mov	r0, r3
 81053da:	bd80      	pop	{r7, pc}
 81053dc:	58024400 	.word	0x58024400
 81053e0:	0810bba8 	.word	0x0810bba8

081053e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81053e4:	b480      	push	{r7}
 81053e6:	b089      	sub	sp, #36	; 0x24
 81053e8:	af00      	add	r7, sp, #0
 81053ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81053ec:	4ba1      	ldr	r3, [pc, #644]	; (8105674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81053ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81053f0:	f003 0303 	and.w	r3, r3, #3
 81053f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81053f6:	4b9f      	ldr	r3, [pc, #636]	; (8105674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81053fa:	0b1b      	lsrs	r3, r3, #12
 81053fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105400:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105402:	4b9c      	ldr	r3, [pc, #624]	; (8105674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105406:	091b      	lsrs	r3, r3, #4
 8105408:	f003 0301 	and.w	r3, r3, #1
 810540c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810540e:	4b99      	ldr	r3, [pc, #612]	; (8105674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105412:	08db      	lsrs	r3, r3, #3
 8105414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105418:	693a      	ldr	r2, [r7, #16]
 810541a:	fb02 f303 	mul.w	r3, r2, r3
 810541e:	ee07 3a90 	vmov	s15, r3
 8105422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105426:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810542a:	697b      	ldr	r3, [r7, #20]
 810542c:	2b00      	cmp	r3, #0
 810542e:	f000 8111 	beq.w	8105654 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8105432:	69bb      	ldr	r3, [r7, #24]
 8105434:	2b02      	cmp	r3, #2
 8105436:	f000 8083 	beq.w	8105540 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810543a:	69bb      	ldr	r3, [r7, #24]
 810543c:	2b02      	cmp	r3, #2
 810543e:	f200 80a1 	bhi.w	8105584 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8105442:	69bb      	ldr	r3, [r7, #24]
 8105444:	2b00      	cmp	r3, #0
 8105446:	d003      	beq.n	8105450 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105448:	69bb      	ldr	r3, [r7, #24]
 810544a:	2b01      	cmp	r3, #1
 810544c:	d056      	beq.n	81054fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810544e:	e099      	b.n	8105584 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105450:	4b88      	ldr	r3, [pc, #544]	; (8105674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105452:	681b      	ldr	r3, [r3, #0]
 8105454:	f003 0320 	and.w	r3, r3, #32
 8105458:	2b00      	cmp	r3, #0
 810545a:	d02d      	beq.n	81054b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810545c:	4b85      	ldr	r3, [pc, #532]	; (8105674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810545e:	681b      	ldr	r3, [r3, #0]
 8105460:	08db      	lsrs	r3, r3, #3
 8105462:	f003 0303 	and.w	r3, r3, #3
 8105466:	4a84      	ldr	r2, [pc, #528]	; (8105678 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8105468:	fa22 f303 	lsr.w	r3, r2, r3
 810546c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810546e:	68bb      	ldr	r3, [r7, #8]
 8105470:	ee07 3a90 	vmov	s15, r3
 8105474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105478:	697b      	ldr	r3, [r7, #20]
 810547a:	ee07 3a90 	vmov	s15, r3
 810547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105486:	4b7b      	ldr	r3, [pc, #492]	; (8105674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810548a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810548e:	ee07 3a90 	vmov	s15, r3
 8105492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105496:	ed97 6a03 	vldr	s12, [r7, #12]
 810549a:	eddf 5a78 	vldr	s11, [pc, #480]	; 810567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810549e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81054a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81054a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81054aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81054ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81054b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81054b6:	e087      	b.n	81055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81054b8:	697b      	ldr	r3, [r7, #20]
 81054ba:	ee07 3a90 	vmov	s15, r3
 81054be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105680 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81054c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81054ca:	4b6a      	ldr	r3, [pc, #424]	; (8105674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81054ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81054d2:	ee07 3a90 	vmov	s15, r3
 81054d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81054da:	ed97 6a03 	vldr	s12, [r7, #12]
 81054de:	eddf 5a67 	vldr	s11, [pc, #412]	; 810567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81054e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81054e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81054ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81054ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81054f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81054f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81054fa:	e065      	b.n	81055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81054fc:	697b      	ldr	r3, [r7, #20]
 81054fe:	ee07 3a90 	vmov	s15, r3
 8105502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105506:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810550a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810550e:	4b59      	ldr	r3, [pc, #356]	; (8105674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105516:	ee07 3a90 	vmov	s15, r3
 810551a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810551e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105522:	eddf 5a56 	vldr	s11, [pc, #344]	; 810567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810552a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810552e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105536:	ee67 7a27 	vmul.f32	s15, s14, s15
 810553a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810553e:	e043      	b.n	81055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105540:	697b      	ldr	r3, [r7, #20]
 8105542:	ee07 3a90 	vmov	s15, r3
 8105546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810554a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105688 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810554e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105552:	4b48      	ldr	r3, [pc, #288]	; (8105674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810555a:	ee07 3a90 	vmov	s15, r3
 810555e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105562:	ed97 6a03 	vldr	s12, [r7, #12]
 8105566:	eddf 5a45 	vldr	s11, [pc, #276]	; 810567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810556a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810556e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810557a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810557e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105582:	e021      	b.n	81055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105584:	697b      	ldr	r3, [r7, #20]
 8105586:	ee07 3a90 	vmov	s15, r3
 810558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810558e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105596:	4b37      	ldr	r3, [pc, #220]	; (8105674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810559a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810559e:	ee07 3a90 	vmov	s15, r3
 81055a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81055aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 810567c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81055ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81055ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81055be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81055c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81055c8:	4b2a      	ldr	r3, [pc, #168]	; (8105674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81055cc:	0a5b      	lsrs	r3, r3, #9
 81055ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81055d2:	ee07 3a90 	vmov	s15, r3
 81055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81055de:	ee37 7a87 	vadd.f32	s14, s15, s14
 81055e2:	edd7 6a07 	vldr	s13, [r7, #28]
 81055e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81055ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81055ee:	ee17 2a90 	vmov	r2, s15
 81055f2:	687b      	ldr	r3, [r7, #4]
 81055f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 81055f6:	4b1f      	ldr	r3, [pc, #124]	; (8105674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81055fa:	0c1b      	lsrs	r3, r3, #16
 81055fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105600:	ee07 3a90 	vmov	s15, r3
 8105604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810560c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105610:	edd7 6a07 	vldr	s13, [r7, #28]
 8105614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810561c:	ee17 2a90 	vmov	r2, s15
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8105624:	4b13      	ldr	r3, [pc, #76]	; (8105674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105628:	0e1b      	lsrs	r3, r3, #24
 810562a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810562e:	ee07 3a90 	vmov	s15, r3
 8105632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810563a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810563e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810564a:	ee17 2a90 	vmov	r2, s15
 810564e:	687b      	ldr	r3, [r7, #4]
 8105650:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105652:	e008      	b.n	8105666 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	2200      	movs	r2, #0
 8105658:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810565a:	687b      	ldr	r3, [r7, #4]
 810565c:	2200      	movs	r2, #0
 810565e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105660:	687b      	ldr	r3, [r7, #4]
 8105662:	2200      	movs	r2, #0
 8105664:	609a      	str	r2, [r3, #8]
}
 8105666:	bf00      	nop
 8105668:	3724      	adds	r7, #36	; 0x24
 810566a:	46bd      	mov	sp, r7
 810566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105670:	4770      	bx	lr
 8105672:	bf00      	nop
 8105674:	58024400 	.word	0x58024400
 8105678:	03d09000 	.word	0x03d09000
 810567c:	46000000 	.word	0x46000000
 8105680:	4c742400 	.word	0x4c742400
 8105684:	4a742400 	.word	0x4a742400
 8105688:	4af42400 	.word	0x4af42400

0810568c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 810568c:	b480      	push	{r7}
 810568e:	b089      	sub	sp, #36	; 0x24
 8105690:	af00      	add	r7, sp, #0
 8105692:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105694:	4ba1      	ldr	r3, [pc, #644]	; (810591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105698:	f003 0303 	and.w	r3, r3, #3
 810569c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810569e:	4b9f      	ldr	r3, [pc, #636]	; (810591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81056a2:	0d1b      	lsrs	r3, r3, #20
 81056a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81056a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81056aa:	4b9c      	ldr	r3, [pc, #624]	; (810591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81056ae:	0a1b      	lsrs	r3, r3, #8
 81056b0:	f003 0301 	and.w	r3, r3, #1
 81056b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81056b6:	4b99      	ldr	r3, [pc, #612]	; (810591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81056b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81056ba:	08db      	lsrs	r3, r3, #3
 81056bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81056c0:	693a      	ldr	r2, [r7, #16]
 81056c2:	fb02 f303 	mul.w	r3, r2, r3
 81056c6:	ee07 3a90 	vmov	s15, r3
 81056ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81056d2:	697b      	ldr	r3, [r7, #20]
 81056d4:	2b00      	cmp	r3, #0
 81056d6:	f000 8111 	beq.w	81058fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81056da:	69bb      	ldr	r3, [r7, #24]
 81056dc:	2b02      	cmp	r3, #2
 81056de:	f000 8083 	beq.w	81057e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81056e2:	69bb      	ldr	r3, [r7, #24]
 81056e4:	2b02      	cmp	r3, #2
 81056e6:	f200 80a1 	bhi.w	810582c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81056ea:	69bb      	ldr	r3, [r7, #24]
 81056ec:	2b00      	cmp	r3, #0
 81056ee:	d003      	beq.n	81056f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81056f0:	69bb      	ldr	r3, [r7, #24]
 81056f2:	2b01      	cmp	r3, #1
 81056f4:	d056      	beq.n	81057a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81056f6:	e099      	b.n	810582c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81056f8:	4b88      	ldr	r3, [pc, #544]	; (810591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81056fa:	681b      	ldr	r3, [r3, #0]
 81056fc:	f003 0320 	and.w	r3, r3, #32
 8105700:	2b00      	cmp	r3, #0
 8105702:	d02d      	beq.n	8105760 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105704:	4b85      	ldr	r3, [pc, #532]	; (810591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105706:	681b      	ldr	r3, [r3, #0]
 8105708:	08db      	lsrs	r3, r3, #3
 810570a:	f003 0303 	and.w	r3, r3, #3
 810570e:	4a84      	ldr	r2, [pc, #528]	; (8105920 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105710:	fa22 f303 	lsr.w	r3, r2, r3
 8105714:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105716:	68bb      	ldr	r3, [r7, #8]
 8105718:	ee07 3a90 	vmov	s15, r3
 810571c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105720:	697b      	ldr	r3, [r7, #20]
 8105722:	ee07 3a90 	vmov	s15, r3
 8105726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810572a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810572e:	4b7b      	ldr	r3, [pc, #492]	; (810591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105736:	ee07 3a90 	vmov	s15, r3
 810573a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810573e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105742:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810574a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810574e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105756:	ee67 7a27 	vmul.f32	s15, s14, s15
 810575a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810575e:	e087      	b.n	8105870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105760:	697b      	ldr	r3, [r7, #20]
 8105762:	ee07 3a90 	vmov	s15, r3
 8105766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810576a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105928 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810576e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105772:	4b6a      	ldr	r3, [pc, #424]	; (810591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810577a:	ee07 3a90 	vmov	s15, r3
 810577e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105782:	ed97 6a03 	vldr	s12, [r7, #12]
 8105786:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810578a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810578e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810579a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810579e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81057a2:	e065      	b.n	8105870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81057a4:	697b      	ldr	r3, [r7, #20]
 81057a6:	ee07 3a90 	vmov	s15, r3
 81057aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810592c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81057b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057b6:	4b59      	ldr	r3, [pc, #356]	; (810591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81057ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057be:	ee07 3a90 	vmov	s15, r3
 81057c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81057ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81057ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81057da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81057e6:	e043      	b.n	8105870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81057e8:	697b      	ldr	r3, [r7, #20]
 81057ea:	ee07 3a90 	vmov	s15, r3
 81057ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105930 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81057f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057fa:	4b48      	ldr	r3, [pc, #288]	; (810591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81057fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105802:	ee07 3a90 	vmov	s15, r3
 8105806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810580a:	ed97 6a03 	vldr	s12, [r7, #12]
 810580e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810581a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810581e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105826:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810582a:	e021      	b.n	8105870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810582c:	697b      	ldr	r3, [r7, #20]
 810582e:	ee07 3a90 	vmov	s15, r3
 8105832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105836:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810592c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810583a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810583e:	4b37      	ldr	r3, [pc, #220]	; (810591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105846:	ee07 3a90 	vmov	s15, r3
 810584a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810584e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105852:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810585a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810585e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105866:	ee67 7a27 	vmul.f32	s15, s14, s15
 810586a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810586e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8105870:	4b2a      	ldr	r3, [pc, #168]	; (810591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105874:	0a5b      	lsrs	r3, r3, #9
 8105876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810587a:	ee07 3a90 	vmov	s15, r3
 810587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105886:	ee37 7a87 	vadd.f32	s14, s15, s14
 810588a:	edd7 6a07 	vldr	s13, [r7, #28]
 810588e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105896:	ee17 2a90 	vmov	r2, s15
 810589a:	687b      	ldr	r3, [r7, #4]
 810589c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810589e:	4b1f      	ldr	r3, [pc, #124]	; (810591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81058a2:	0c1b      	lsrs	r3, r3, #16
 81058a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81058a8:	ee07 3a90 	vmov	s15, r3
 81058ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81058b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81058b8:	edd7 6a07 	vldr	s13, [r7, #28]
 81058bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81058c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81058c4:	ee17 2a90 	vmov	r2, s15
 81058c8:	687b      	ldr	r3, [r7, #4]
 81058ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81058cc:	4b13      	ldr	r3, [pc, #76]	; (810591c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81058d0:	0e1b      	lsrs	r3, r3, #24
 81058d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81058d6:	ee07 3a90 	vmov	s15, r3
 81058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81058e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81058e6:	edd7 6a07 	vldr	s13, [r7, #28]
 81058ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81058ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81058f2:	ee17 2a90 	vmov	r2, s15
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81058fa:	e008      	b.n	810590e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	2200      	movs	r2, #0
 8105900:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105902:	687b      	ldr	r3, [r7, #4]
 8105904:	2200      	movs	r2, #0
 8105906:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105908:	687b      	ldr	r3, [r7, #4]
 810590a:	2200      	movs	r2, #0
 810590c:	609a      	str	r2, [r3, #8]
}
 810590e:	bf00      	nop
 8105910:	3724      	adds	r7, #36	; 0x24
 8105912:	46bd      	mov	sp, r7
 8105914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105918:	4770      	bx	lr
 810591a:	bf00      	nop
 810591c:	58024400 	.word	0x58024400
 8105920:	03d09000 	.word	0x03d09000
 8105924:	46000000 	.word	0x46000000
 8105928:	4c742400 	.word	0x4c742400
 810592c:	4a742400 	.word	0x4a742400
 8105930:	4af42400 	.word	0x4af42400

08105934 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105934:	b580      	push	{r7, lr}
 8105936:	b084      	sub	sp, #16
 8105938:	af00      	add	r7, sp, #0
 810593a:	6078      	str	r0, [r7, #4]
 810593c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810593e:	2300      	movs	r3, #0
 8105940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105942:	4b54      	ldr	r3, [pc, #336]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105946:	f003 0303 	and.w	r3, r3, #3
 810594a:	2b03      	cmp	r3, #3
 810594c:	d101      	bne.n	8105952 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810594e:	2301      	movs	r3, #1
 8105950:	e09b      	b.n	8105a8a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8105952:	4b50      	ldr	r3, [pc, #320]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105954:	681b      	ldr	r3, [r3, #0]
 8105956:	4a4f      	ldr	r2, [pc, #316]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105958:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810595c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810595e:	f7fc fbad 	bl	81020bc <HAL_GetTick>
 8105962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105964:	e008      	b.n	8105978 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8105966:	f7fc fba9 	bl	81020bc <HAL_GetTick>
 810596a:	4602      	mov	r2, r0
 810596c:	68bb      	ldr	r3, [r7, #8]
 810596e:	1ad3      	subs	r3, r2, r3
 8105970:	2b02      	cmp	r3, #2
 8105972:	d901      	bls.n	8105978 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105974:	2303      	movs	r3, #3
 8105976:	e088      	b.n	8105a8a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105978:	4b46      	ldr	r3, [pc, #280]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 810597a:	681b      	ldr	r3, [r3, #0]
 810597c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105980:	2b00      	cmp	r3, #0
 8105982:	d1f0      	bne.n	8105966 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105984:	4b43      	ldr	r3, [pc, #268]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105988:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810598c:	687b      	ldr	r3, [r7, #4]
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	031b      	lsls	r3, r3, #12
 8105992:	4940      	ldr	r1, [pc, #256]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105994:	4313      	orrs	r3, r2
 8105996:	628b      	str	r3, [r1, #40]	; 0x28
 8105998:	687b      	ldr	r3, [r7, #4]
 810599a:	685b      	ldr	r3, [r3, #4]
 810599c:	3b01      	subs	r3, #1
 810599e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81059a2:	687b      	ldr	r3, [r7, #4]
 81059a4:	689b      	ldr	r3, [r3, #8]
 81059a6:	3b01      	subs	r3, #1
 81059a8:	025b      	lsls	r3, r3, #9
 81059aa:	b29b      	uxth	r3, r3
 81059ac:	431a      	orrs	r2, r3
 81059ae:	687b      	ldr	r3, [r7, #4]
 81059b0:	68db      	ldr	r3, [r3, #12]
 81059b2:	3b01      	subs	r3, #1
 81059b4:	041b      	lsls	r3, r3, #16
 81059b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81059ba:	431a      	orrs	r2, r3
 81059bc:	687b      	ldr	r3, [r7, #4]
 81059be:	691b      	ldr	r3, [r3, #16]
 81059c0:	3b01      	subs	r3, #1
 81059c2:	061b      	lsls	r3, r3, #24
 81059c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81059c8:	4932      	ldr	r1, [pc, #200]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 81059ca:	4313      	orrs	r3, r2
 81059cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81059ce:	4b31      	ldr	r3, [pc, #196]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 81059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81059d6:	687b      	ldr	r3, [r7, #4]
 81059d8:	695b      	ldr	r3, [r3, #20]
 81059da:	492e      	ldr	r1, [pc, #184]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 81059dc:	4313      	orrs	r3, r2
 81059de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81059e0:	4b2c      	ldr	r3, [pc, #176]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 81059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059e4:	f023 0220 	bic.w	r2, r3, #32
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	699b      	ldr	r3, [r3, #24]
 81059ec:	4929      	ldr	r1, [pc, #164]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 81059ee:	4313      	orrs	r3, r2
 81059f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81059f2:	4b28      	ldr	r3, [pc, #160]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 81059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059f6:	4a27      	ldr	r2, [pc, #156]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 81059f8:	f023 0310 	bic.w	r3, r3, #16
 81059fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81059fe:	4b25      	ldr	r3, [pc, #148]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105a06:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105a0a:	687a      	ldr	r2, [r7, #4]
 8105a0c:	69d2      	ldr	r2, [r2, #28]
 8105a0e:	00d2      	lsls	r2, r2, #3
 8105a10:	4920      	ldr	r1, [pc, #128]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105a12:	4313      	orrs	r3, r2
 8105a14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105a16:	4b1f      	ldr	r3, [pc, #124]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a1a:	4a1e      	ldr	r2, [pc, #120]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105a1c:	f043 0310 	orr.w	r3, r3, #16
 8105a20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8105a22:	683b      	ldr	r3, [r7, #0]
 8105a24:	2b00      	cmp	r3, #0
 8105a26:	d106      	bne.n	8105a36 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105a28:	4b1a      	ldr	r3, [pc, #104]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a2c:	4a19      	ldr	r2, [pc, #100]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105a2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105a32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105a34:	e00f      	b.n	8105a56 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105a36:	683b      	ldr	r3, [r7, #0]
 8105a38:	2b01      	cmp	r3, #1
 8105a3a:	d106      	bne.n	8105a4a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105a3c:	4b15      	ldr	r3, [pc, #84]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a40:	4a14      	ldr	r2, [pc, #80]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105a46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105a48:	e005      	b.n	8105a56 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105a4a:	4b12      	ldr	r3, [pc, #72]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a4e:	4a11      	ldr	r2, [pc, #68]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105a54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8105a56:	4b0f      	ldr	r3, [pc, #60]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105a58:	681b      	ldr	r3, [r3, #0]
 8105a5a:	4a0e      	ldr	r2, [pc, #56]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105a5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8105a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105a62:	f7fc fb2b 	bl	81020bc <HAL_GetTick>
 8105a66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105a68:	e008      	b.n	8105a7c <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8105a6a:	f7fc fb27 	bl	81020bc <HAL_GetTick>
 8105a6e:	4602      	mov	r2, r0
 8105a70:	68bb      	ldr	r3, [r7, #8]
 8105a72:	1ad3      	subs	r3, r2, r3
 8105a74:	2b02      	cmp	r3, #2
 8105a76:	d901      	bls.n	8105a7c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105a78:	2303      	movs	r3, #3
 8105a7a:	e006      	b.n	8105a8a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105a7c:	4b05      	ldr	r3, [pc, #20]	; (8105a94 <RCCEx_PLL2_Config+0x160>)
 8105a7e:	681b      	ldr	r3, [r3, #0]
 8105a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105a84:	2b00      	cmp	r3, #0
 8105a86:	d0f0      	beq.n	8105a6a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8105a8a:	4618      	mov	r0, r3
 8105a8c:	3710      	adds	r7, #16
 8105a8e:	46bd      	mov	sp, r7
 8105a90:	bd80      	pop	{r7, pc}
 8105a92:	bf00      	nop
 8105a94:	58024400 	.word	0x58024400

08105a98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105a98:	b580      	push	{r7, lr}
 8105a9a:	b084      	sub	sp, #16
 8105a9c:	af00      	add	r7, sp, #0
 8105a9e:	6078      	str	r0, [r7, #4]
 8105aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105aa2:	2300      	movs	r3, #0
 8105aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105aa6:	4b54      	ldr	r3, [pc, #336]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105aaa:	f003 0303 	and.w	r3, r3, #3
 8105aae:	2b03      	cmp	r3, #3
 8105ab0:	d101      	bne.n	8105ab6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8105ab2:	2301      	movs	r3, #1
 8105ab4:	e09b      	b.n	8105bee <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8105ab6:	4b50      	ldr	r3, [pc, #320]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105ab8:	681b      	ldr	r3, [r3, #0]
 8105aba:	4a4f      	ldr	r2, [pc, #316]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105ac2:	f7fc fafb 	bl	81020bc <HAL_GetTick>
 8105ac6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105ac8:	e008      	b.n	8105adc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8105aca:	f7fc faf7 	bl	81020bc <HAL_GetTick>
 8105ace:	4602      	mov	r2, r0
 8105ad0:	68bb      	ldr	r3, [r7, #8]
 8105ad2:	1ad3      	subs	r3, r2, r3
 8105ad4:	2b02      	cmp	r3, #2
 8105ad6:	d901      	bls.n	8105adc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105ad8:	2303      	movs	r3, #3
 8105ada:	e088      	b.n	8105bee <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105adc:	4b46      	ldr	r3, [pc, #280]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105ade:	681b      	ldr	r3, [r3, #0]
 8105ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105ae4:	2b00      	cmp	r3, #0
 8105ae6:	d1f0      	bne.n	8105aca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105ae8:	4b43      	ldr	r3, [pc, #268]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105aec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	681b      	ldr	r3, [r3, #0]
 8105af4:	051b      	lsls	r3, r3, #20
 8105af6:	4940      	ldr	r1, [pc, #256]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105af8:	4313      	orrs	r3, r2
 8105afa:	628b      	str	r3, [r1, #40]	; 0x28
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	685b      	ldr	r3, [r3, #4]
 8105b00:	3b01      	subs	r3, #1
 8105b02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	689b      	ldr	r3, [r3, #8]
 8105b0a:	3b01      	subs	r3, #1
 8105b0c:	025b      	lsls	r3, r3, #9
 8105b0e:	b29b      	uxth	r3, r3
 8105b10:	431a      	orrs	r2, r3
 8105b12:	687b      	ldr	r3, [r7, #4]
 8105b14:	68db      	ldr	r3, [r3, #12]
 8105b16:	3b01      	subs	r3, #1
 8105b18:	041b      	lsls	r3, r3, #16
 8105b1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105b1e:	431a      	orrs	r2, r3
 8105b20:	687b      	ldr	r3, [r7, #4]
 8105b22:	691b      	ldr	r3, [r3, #16]
 8105b24:	3b01      	subs	r3, #1
 8105b26:	061b      	lsls	r3, r3, #24
 8105b28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105b2c:	4932      	ldr	r1, [pc, #200]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105b2e:	4313      	orrs	r3, r2
 8105b30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105b32:	4b31      	ldr	r3, [pc, #196]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8105b3a:	687b      	ldr	r3, [r7, #4]
 8105b3c:	695b      	ldr	r3, [r3, #20]
 8105b3e:	492e      	ldr	r1, [pc, #184]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105b40:	4313      	orrs	r3, r2
 8105b42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105b44:	4b2c      	ldr	r3, [pc, #176]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	699b      	ldr	r3, [r3, #24]
 8105b50:	4929      	ldr	r1, [pc, #164]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105b52:	4313      	orrs	r3, r2
 8105b54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105b56:	4b28      	ldr	r3, [pc, #160]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b5a:	4a27      	ldr	r2, [pc, #156]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105b60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8105b62:	4b25      	ldr	r3, [pc, #148]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105b6a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105b6e:	687a      	ldr	r2, [r7, #4]
 8105b70:	69d2      	ldr	r2, [r2, #28]
 8105b72:	00d2      	lsls	r2, r2, #3
 8105b74:	4920      	ldr	r1, [pc, #128]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105b76:	4313      	orrs	r3, r2
 8105b78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105b7a:	4b1f      	ldr	r3, [pc, #124]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b7e:	4a1e      	ldr	r2, [pc, #120]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105b84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8105b86:	683b      	ldr	r3, [r7, #0]
 8105b88:	2b00      	cmp	r3, #0
 8105b8a:	d106      	bne.n	8105b9a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105b8c:	4b1a      	ldr	r3, [pc, #104]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b90:	4a19      	ldr	r2, [pc, #100]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105b92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8105b96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105b98:	e00f      	b.n	8105bba <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105b9a:	683b      	ldr	r3, [r7, #0]
 8105b9c:	2b01      	cmp	r3, #1
 8105b9e:	d106      	bne.n	8105bae <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105ba0:	4b15      	ldr	r3, [pc, #84]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ba4:	4a14      	ldr	r2, [pc, #80]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105ba6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105baa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105bac:	e005      	b.n	8105bba <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105bae:	4b12      	ldr	r3, [pc, #72]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bb2:	4a11      	ldr	r2, [pc, #68]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105bb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105bb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8105bba:	4b0f      	ldr	r3, [pc, #60]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105bbc:	681b      	ldr	r3, [r3, #0]
 8105bbe:	4a0e      	ldr	r2, [pc, #56]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105bc6:	f7fc fa79 	bl	81020bc <HAL_GetTick>
 8105bca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105bcc:	e008      	b.n	8105be0 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8105bce:	f7fc fa75 	bl	81020bc <HAL_GetTick>
 8105bd2:	4602      	mov	r2, r0
 8105bd4:	68bb      	ldr	r3, [r7, #8]
 8105bd6:	1ad3      	subs	r3, r2, r3
 8105bd8:	2b02      	cmp	r3, #2
 8105bda:	d901      	bls.n	8105be0 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105bdc:	2303      	movs	r3, #3
 8105bde:	e006      	b.n	8105bee <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105be0:	4b05      	ldr	r3, [pc, #20]	; (8105bf8 <RCCEx_PLL3_Config+0x160>)
 8105be2:	681b      	ldr	r3, [r3, #0]
 8105be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105be8:	2b00      	cmp	r3, #0
 8105bea:	d0f0      	beq.n	8105bce <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8105bee:	4618      	mov	r0, r3
 8105bf0:	3710      	adds	r7, #16
 8105bf2:	46bd      	mov	sp, r7
 8105bf4:	bd80      	pop	{r7, pc}
 8105bf6:	bf00      	nop
 8105bf8:	58024400 	.word	0x58024400

08105bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8105bfc:	b580      	push	{r7, lr}
 8105bfe:	b082      	sub	sp, #8
 8105c00:	af00      	add	r7, sp, #0
 8105c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8105c04:	687b      	ldr	r3, [r7, #4]
 8105c06:	2b00      	cmp	r3, #0
 8105c08:	d101      	bne.n	8105c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8105c0a:	2301      	movs	r3, #1
 8105c0c:	e042      	b.n	8105c94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8105c0e:	687b      	ldr	r3, [r7, #4]
 8105c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105c14:	2b00      	cmp	r3, #0
 8105c16:	d106      	bne.n	8105c26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8105c18:	687b      	ldr	r3, [r7, #4]
 8105c1a:	2200      	movs	r2, #0
 8105c1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8105c20:	6878      	ldr	r0, [r7, #4]
 8105c22:	f7fc f81d 	bl	8101c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8105c26:	687b      	ldr	r3, [r7, #4]
 8105c28:	2224      	movs	r2, #36	; 0x24
 8105c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8105c2e:	687b      	ldr	r3, [r7, #4]
 8105c30:	681b      	ldr	r3, [r3, #0]
 8105c32:	681a      	ldr	r2, [r3, #0]
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	681b      	ldr	r3, [r3, #0]
 8105c38:	f022 0201 	bic.w	r2, r2, #1
 8105c3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8105c3e:	6878      	ldr	r0, [r7, #4]
 8105c40:	f000 f8c2 	bl	8105dc8 <UART_SetConfig>
 8105c44:	4603      	mov	r3, r0
 8105c46:	2b01      	cmp	r3, #1
 8105c48:	d101      	bne.n	8105c4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8105c4a:	2301      	movs	r3, #1
 8105c4c:	e022      	b.n	8105c94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8105c4e:	687b      	ldr	r3, [r7, #4]
 8105c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105c52:	2b00      	cmp	r3, #0
 8105c54:	d002      	beq.n	8105c5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8105c56:	6878      	ldr	r0, [r7, #4]
 8105c58:	f000 fe1e 	bl	8106898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8105c5c:	687b      	ldr	r3, [r7, #4]
 8105c5e:	681b      	ldr	r3, [r3, #0]
 8105c60:	685a      	ldr	r2, [r3, #4]
 8105c62:	687b      	ldr	r3, [r7, #4]
 8105c64:	681b      	ldr	r3, [r3, #0]
 8105c66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8105c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8105c6c:	687b      	ldr	r3, [r7, #4]
 8105c6e:	681b      	ldr	r3, [r3, #0]
 8105c70:	689a      	ldr	r2, [r3, #8]
 8105c72:	687b      	ldr	r3, [r7, #4]
 8105c74:	681b      	ldr	r3, [r3, #0]
 8105c76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8105c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8105c7c:	687b      	ldr	r3, [r7, #4]
 8105c7e:	681b      	ldr	r3, [r3, #0]
 8105c80:	681a      	ldr	r2, [r3, #0]
 8105c82:	687b      	ldr	r3, [r7, #4]
 8105c84:	681b      	ldr	r3, [r3, #0]
 8105c86:	f042 0201 	orr.w	r2, r2, #1
 8105c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8105c8c:	6878      	ldr	r0, [r7, #4]
 8105c8e:	f000 fea5 	bl	81069dc <UART_CheckIdleState>
 8105c92:	4603      	mov	r3, r0
}
 8105c94:	4618      	mov	r0, r3
 8105c96:	3708      	adds	r7, #8
 8105c98:	46bd      	mov	sp, r7
 8105c9a:	bd80      	pop	{r7, pc}

08105c9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105c9c:	b580      	push	{r7, lr}
 8105c9e:	b08a      	sub	sp, #40	; 0x28
 8105ca0:	af02      	add	r7, sp, #8
 8105ca2:	60f8      	str	r0, [r7, #12]
 8105ca4:	60b9      	str	r1, [r7, #8]
 8105ca6:	603b      	str	r3, [r7, #0]
 8105ca8:	4613      	mov	r3, r2
 8105caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8105cac:	68fb      	ldr	r3, [r7, #12]
 8105cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105cb2:	2b20      	cmp	r3, #32
 8105cb4:	f040 8083 	bne.w	8105dbe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8105cb8:	68bb      	ldr	r3, [r7, #8]
 8105cba:	2b00      	cmp	r3, #0
 8105cbc:	d002      	beq.n	8105cc4 <HAL_UART_Transmit+0x28>
 8105cbe:	88fb      	ldrh	r3, [r7, #6]
 8105cc0:	2b00      	cmp	r3, #0
 8105cc2:	d101      	bne.n	8105cc8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8105cc4:	2301      	movs	r3, #1
 8105cc6:	e07b      	b.n	8105dc0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8105cc8:	68fb      	ldr	r3, [r7, #12]
 8105cca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105cce:	2b01      	cmp	r3, #1
 8105cd0:	d101      	bne.n	8105cd6 <HAL_UART_Transmit+0x3a>
 8105cd2:	2302      	movs	r3, #2
 8105cd4:	e074      	b.n	8105dc0 <HAL_UART_Transmit+0x124>
 8105cd6:	68fb      	ldr	r3, [r7, #12]
 8105cd8:	2201      	movs	r2, #1
 8105cda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105cde:	68fb      	ldr	r3, [r7, #12]
 8105ce0:	2200      	movs	r2, #0
 8105ce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8105ce6:	68fb      	ldr	r3, [r7, #12]
 8105ce8:	2221      	movs	r2, #33	; 0x21
 8105cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8105cee:	f7fc f9e5 	bl	81020bc <HAL_GetTick>
 8105cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8105cf4:	68fb      	ldr	r3, [r7, #12]
 8105cf6:	88fa      	ldrh	r2, [r7, #6]
 8105cf8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8105cfc:	68fb      	ldr	r3, [r7, #12]
 8105cfe:	88fa      	ldrh	r2, [r7, #6]
 8105d00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8105d04:	68fb      	ldr	r3, [r7, #12]
 8105d06:	689b      	ldr	r3, [r3, #8]
 8105d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105d0c:	d108      	bne.n	8105d20 <HAL_UART_Transmit+0x84>
 8105d0e:	68fb      	ldr	r3, [r7, #12]
 8105d10:	691b      	ldr	r3, [r3, #16]
 8105d12:	2b00      	cmp	r3, #0
 8105d14:	d104      	bne.n	8105d20 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8105d16:	2300      	movs	r3, #0
 8105d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8105d1a:	68bb      	ldr	r3, [r7, #8]
 8105d1c:	61bb      	str	r3, [r7, #24]
 8105d1e:	e003      	b.n	8105d28 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8105d20:	68bb      	ldr	r3, [r7, #8]
 8105d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8105d24:	2300      	movs	r3, #0
 8105d26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8105d28:	68fb      	ldr	r3, [r7, #12]
 8105d2a:	2200      	movs	r2, #0
 8105d2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8105d30:	e02c      	b.n	8105d8c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8105d32:	683b      	ldr	r3, [r7, #0]
 8105d34:	9300      	str	r3, [sp, #0]
 8105d36:	697b      	ldr	r3, [r7, #20]
 8105d38:	2200      	movs	r2, #0
 8105d3a:	2180      	movs	r1, #128	; 0x80
 8105d3c:	68f8      	ldr	r0, [r7, #12]
 8105d3e:	f000 fe98 	bl	8106a72 <UART_WaitOnFlagUntilTimeout>
 8105d42:	4603      	mov	r3, r0
 8105d44:	2b00      	cmp	r3, #0
 8105d46:	d001      	beq.n	8105d4c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8105d48:	2303      	movs	r3, #3
 8105d4a:	e039      	b.n	8105dc0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8105d4c:	69fb      	ldr	r3, [r7, #28]
 8105d4e:	2b00      	cmp	r3, #0
 8105d50:	d10b      	bne.n	8105d6a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8105d52:	69bb      	ldr	r3, [r7, #24]
 8105d54:	881b      	ldrh	r3, [r3, #0]
 8105d56:	461a      	mov	r2, r3
 8105d58:	68fb      	ldr	r3, [r7, #12]
 8105d5a:	681b      	ldr	r3, [r3, #0]
 8105d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8105d60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8105d62:	69bb      	ldr	r3, [r7, #24]
 8105d64:	3302      	adds	r3, #2
 8105d66:	61bb      	str	r3, [r7, #24]
 8105d68:	e007      	b.n	8105d7a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8105d6a:	69fb      	ldr	r3, [r7, #28]
 8105d6c:	781a      	ldrb	r2, [r3, #0]
 8105d6e:	68fb      	ldr	r3, [r7, #12]
 8105d70:	681b      	ldr	r3, [r3, #0]
 8105d72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8105d74:	69fb      	ldr	r3, [r7, #28]
 8105d76:	3301      	adds	r3, #1
 8105d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8105d7a:	68fb      	ldr	r3, [r7, #12]
 8105d7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8105d80:	b29b      	uxth	r3, r3
 8105d82:	3b01      	subs	r3, #1
 8105d84:	b29a      	uxth	r2, r3
 8105d86:	68fb      	ldr	r3, [r7, #12]
 8105d88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8105d8c:	68fb      	ldr	r3, [r7, #12]
 8105d8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8105d92:	b29b      	uxth	r3, r3
 8105d94:	2b00      	cmp	r3, #0
 8105d96:	d1cc      	bne.n	8105d32 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8105d98:	683b      	ldr	r3, [r7, #0]
 8105d9a:	9300      	str	r3, [sp, #0]
 8105d9c:	697b      	ldr	r3, [r7, #20]
 8105d9e:	2200      	movs	r2, #0
 8105da0:	2140      	movs	r1, #64	; 0x40
 8105da2:	68f8      	ldr	r0, [r7, #12]
 8105da4:	f000 fe65 	bl	8106a72 <UART_WaitOnFlagUntilTimeout>
 8105da8:	4603      	mov	r3, r0
 8105daa:	2b00      	cmp	r3, #0
 8105dac:	d001      	beq.n	8105db2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8105dae:	2303      	movs	r3, #3
 8105db0:	e006      	b.n	8105dc0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8105db2:	68fb      	ldr	r3, [r7, #12]
 8105db4:	2220      	movs	r2, #32
 8105db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8105dba:	2300      	movs	r3, #0
 8105dbc:	e000      	b.n	8105dc0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8105dbe:	2302      	movs	r3, #2
  }
}
 8105dc0:	4618      	mov	r0, r3
 8105dc2:	3720      	adds	r7, #32
 8105dc4:	46bd      	mov	sp, r7
 8105dc6:	bd80      	pop	{r7, pc}

08105dc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8105dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8105dcc:	b092      	sub	sp, #72	; 0x48
 8105dce:	af00      	add	r7, sp, #0
 8105dd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8105dd2:	2300      	movs	r3, #0
 8105dd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8105dd8:	697b      	ldr	r3, [r7, #20]
 8105dda:	689a      	ldr	r2, [r3, #8]
 8105ddc:	697b      	ldr	r3, [r7, #20]
 8105dde:	691b      	ldr	r3, [r3, #16]
 8105de0:	431a      	orrs	r2, r3
 8105de2:	697b      	ldr	r3, [r7, #20]
 8105de4:	695b      	ldr	r3, [r3, #20]
 8105de6:	431a      	orrs	r2, r3
 8105de8:	697b      	ldr	r3, [r7, #20]
 8105dea:	69db      	ldr	r3, [r3, #28]
 8105dec:	4313      	orrs	r3, r2
 8105dee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8105df0:	697b      	ldr	r3, [r7, #20]
 8105df2:	681b      	ldr	r3, [r3, #0]
 8105df4:	681a      	ldr	r2, [r3, #0]
 8105df6:	4bbd      	ldr	r3, [pc, #756]	; (81060ec <UART_SetConfig+0x324>)
 8105df8:	4013      	ands	r3, r2
 8105dfa:	697a      	ldr	r2, [r7, #20]
 8105dfc:	6812      	ldr	r2, [r2, #0]
 8105dfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105e00:	430b      	orrs	r3, r1
 8105e02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8105e04:	697b      	ldr	r3, [r7, #20]
 8105e06:	681b      	ldr	r3, [r3, #0]
 8105e08:	685b      	ldr	r3, [r3, #4]
 8105e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8105e0e:	697b      	ldr	r3, [r7, #20]
 8105e10:	68da      	ldr	r2, [r3, #12]
 8105e12:	697b      	ldr	r3, [r7, #20]
 8105e14:	681b      	ldr	r3, [r3, #0]
 8105e16:	430a      	orrs	r2, r1
 8105e18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8105e1a:	697b      	ldr	r3, [r7, #20]
 8105e1c:	699b      	ldr	r3, [r3, #24]
 8105e1e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8105e20:	697b      	ldr	r3, [r7, #20]
 8105e22:	681b      	ldr	r3, [r3, #0]
 8105e24:	4ab2      	ldr	r2, [pc, #712]	; (81060f0 <UART_SetConfig+0x328>)
 8105e26:	4293      	cmp	r3, r2
 8105e28:	d004      	beq.n	8105e34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8105e2a:	697b      	ldr	r3, [r7, #20]
 8105e2c:	6a1b      	ldr	r3, [r3, #32]
 8105e2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8105e30:	4313      	orrs	r3, r2
 8105e32:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8105e34:	697b      	ldr	r3, [r7, #20]
 8105e36:	681b      	ldr	r3, [r3, #0]
 8105e38:	689b      	ldr	r3, [r3, #8]
 8105e3a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8105e3e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8105e42:	697a      	ldr	r2, [r7, #20]
 8105e44:	6812      	ldr	r2, [r2, #0]
 8105e46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105e48:	430b      	orrs	r3, r1
 8105e4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8105e4c:	697b      	ldr	r3, [r7, #20]
 8105e4e:	681b      	ldr	r3, [r3, #0]
 8105e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e52:	f023 010f 	bic.w	r1, r3, #15
 8105e56:	697b      	ldr	r3, [r7, #20]
 8105e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105e5a:	697b      	ldr	r3, [r7, #20]
 8105e5c:	681b      	ldr	r3, [r3, #0]
 8105e5e:	430a      	orrs	r2, r1
 8105e60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8105e62:	697b      	ldr	r3, [r7, #20]
 8105e64:	681b      	ldr	r3, [r3, #0]
 8105e66:	4aa3      	ldr	r2, [pc, #652]	; (81060f4 <UART_SetConfig+0x32c>)
 8105e68:	4293      	cmp	r3, r2
 8105e6a:	d177      	bne.n	8105f5c <UART_SetConfig+0x194>
 8105e6c:	4ba2      	ldr	r3, [pc, #648]	; (81060f8 <UART_SetConfig+0x330>)
 8105e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105e70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105e74:	2b28      	cmp	r3, #40	; 0x28
 8105e76:	d86d      	bhi.n	8105f54 <UART_SetConfig+0x18c>
 8105e78:	a201      	add	r2, pc, #4	; (adr r2, 8105e80 <UART_SetConfig+0xb8>)
 8105e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e7e:	bf00      	nop
 8105e80:	08105f25 	.word	0x08105f25
 8105e84:	08105f55 	.word	0x08105f55
 8105e88:	08105f55 	.word	0x08105f55
 8105e8c:	08105f55 	.word	0x08105f55
 8105e90:	08105f55 	.word	0x08105f55
 8105e94:	08105f55 	.word	0x08105f55
 8105e98:	08105f55 	.word	0x08105f55
 8105e9c:	08105f55 	.word	0x08105f55
 8105ea0:	08105f2d 	.word	0x08105f2d
 8105ea4:	08105f55 	.word	0x08105f55
 8105ea8:	08105f55 	.word	0x08105f55
 8105eac:	08105f55 	.word	0x08105f55
 8105eb0:	08105f55 	.word	0x08105f55
 8105eb4:	08105f55 	.word	0x08105f55
 8105eb8:	08105f55 	.word	0x08105f55
 8105ebc:	08105f55 	.word	0x08105f55
 8105ec0:	08105f35 	.word	0x08105f35
 8105ec4:	08105f55 	.word	0x08105f55
 8105ec8:	08105f55 	.word	0x08105f55
 8105ecc:	08105f55 	.word	0x08105f55
 8105ed0:	08105f55 	.word	0x08105f55
 8105ed4:	08105f55 	.word	0x08105f55
 8105ed8:	08105f55 	.word	0x08105f55
 8105edc:	08105f55 	.word	0x08105f55
 8105ee0:	08105f3d 	.word	0x08105f3d
 8105ee4:	08105f55 	.word	0x08105f55
 8105ee8:	08105f55 	.word	0x08105f55
 8105eec:	08105f55 	.word	0x08105f55
 8105ef0:	08105f55 	.word	0x08105f55
 8105ef4:	08105f55 	.word	0x08105f55
 8105ef8:	08105f55 	.word	0x08105f55
 8105efc:	08105f55 	.word	0x08105f55
 8105f00:	08105f45 	.word	0x08105f45
 8105f04:	08105f55 	.word	0x08105f55
 8105f08:	08105f55 	.word	0x08105f55
 8105f0c:	08105f55 	.word	0x08105f55
 8105f10:	08105f55 	.word	0x08105f55
 8105f14:	08105f55 	.word	0x08105f55
 8105f18:	08105f55 	.word	0x08105f55
 8105f1c:	08105f55 	.word	0x08105f55
 8105f20:	08105f4d 	.word	0x08105f4d
 8105f24:	2301      	movs	r3, #1
 8105f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f2a:	e220      	b.n	810636e <UART_SetConfig+0x5a6>
 8105f2c:	2304      	movs	r3, #4
 8105f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f32:	e21c      	b.n	810636e <UART_SetConfig+0x5a6>
 8105f34:	2308      	movs	r3, #8
 8105f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f3a:	e218      	b.n	810636e <UART_SetConfig+0x5a6>
 8105f3c:	2310      	movs	r3, #16
 8105f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f42:	e214      	b.n	810636e <UART_SetConfig+0x5a6>
 8105f44:	2320      	movs	r3, #32
 8105f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f4a:	e210      	b.n	810636e <UART_SetConfig+0x5a6>
 8105f4c:	2340      	movs	r3, #64	; 0x40
 8105f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f52:	e20c      	b.n	810636e <UART_SetConfig+0x5a6>
 8105f54:	2380      	movs	r3, #128	; 0x80
 8105f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f5a:	e208      	b.n	810636e <UART_SetConfig+0x5a6>
 8105f5c:	697b      	ldr	r3, [r7, #20]
 8105f5e:	681b      	ldr	r3, [r3, #0]
 8105f60:	4a66      	ldr	r2, [pc, #408]	; (81060fc <UART_SetConfig+0x334>)
 8105f62:	4293      	cmp	r3, r2
 8105f64:	d130      	bne.n	8105fc8 <UART_SetConfig+0x200>
 8105f66:	4b64      	ldr	r3, [pc, #400]	; (81060f8 <UART_SetConfig+0x330>)
 8105f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105f6a:	f003 0307 	and.w	r3, r3, #7
 8105f6e:	2b05      	cmp	r3, #5
 8105f70:	d826      	bhi.n	8105fc0 <UART_SetConfig+0x1f8>
 8105f72:	a201      	add	r2, pc, #4	; (adr r2, 8105f78 <UART_SetConfig+0x1b0>)
 8105f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105f78:	08105f91 	.word	0x08105f91
 8105f7c:	08105f99 	.word	0x08105f99
 8105f80:	08105fa1 	.word	0x08105fa1
 8105f84:	08105fa9 	.word	0x08105fa9
 8105f88:	08105fb1 	.word	0x08105fb1
 8105f8c:	08105fb9 	.word	0x08105fb9
 8105f90:	2300      	movs	r3, #0
 8105f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f96:	e1ea      	b.n	810636e <UART_SetConfig+0x5a6>
 8105f98:	2304      	movs	r3, #4
 8105f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105f9e:	e1e6      	b.n	810636e <UART_SetConfig+0x5a6>
 8105fa0:	2308      	movs	r3, #8
 8105fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105fa6:	e1e2      	b.n	810636e <UART_SetConfig+0x5a6>
 8105fa8:	2310      	movs	r3, #16
 8105faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105fae:	e1de      	b.n	810636e <UART_SetConfig+0x5a6>
 8105fb0:	2320      	movs	r3, #32
 8105fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105fb6:	e1da      	b.n	810636e <UART_SetConfig+0x5a6>
 8105fb8:	2340      	movs	r3, #64	; 0x40
 8105fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105fbe:	e1d6      	b.n	810636e <UART_SetConfig+0x5a6>
 8105fc0:	2380      	movs	r3, #128	; 0x80
 8105fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105fc6:	e1d2      	b.n	810636e <UART_SetConfig+0x5a6>
 8105fc8:	697b      	ldr	r3, [r7, #20]
 8105fca:	681b      	ldr	r3, [r3, #0]
 8105fcc:	4a4c      	ldr	r2, [pc, #304]	; (8106100 <UART_SetConfig+0x338>)
 8105fce:	4293      	cmp	r3, r2
 8105fd0:	d130      	bne.n	8106034 <UART_SetConfig+0x26c>
 8105fd2:	4b49      	ldr	r3, [pc, #292]	; (81060f8 <UART_SetConfig+0x330>)
 8105fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105fd6:	f003 0307 	and.w	r3, r3, #7
 8105fda:	2b05      	cmp	r3, #5
 8105fdc:	d826      	bhi.n	810602c <UART_SetConfig+0x264>
 8105fde:	a201      	add	r2, pc, #4	; (adr r2, 8105fe4 <UART_SetConfig+0x21c>)
 8105fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105fe4:	08105ffd 	.word	0x08105ffd
 8105fe8:	08106005 	.word	0x08106005
 8105fec:	0810600d 	.word	0x0810600d
 8105ff0:	08106015 	.word	0x08106015
 8105ff4:	0810601d 	.word	0x0810601d
 8105ff8:	08106025 	.word	0x08106025
 8105ffc:	2300      	movs	r3, #0
 8105ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106002:	e1b4      	b.n	810636e <UART_SetConfig+0x5a6>
 8106004:	2304      	movs	r3, #4
 8106006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810600a:	e1b0      	b.n	810636e <UART_SetConfig+0x5a6>
 810600c:	2308      	movs	r3, #8
 810600e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106012:	e1ac      	b.n	810636e <UART_SetConfig+0x5a6>
 8106014:	2310      	movs	r3, #16
 8106016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810601a:	e1a8      	b.n	810636e <UART_SetConfig+0x5a6>
 810601c:	2320      	movs	r3, #32
 810601e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106022:	e1a4      	b.n	810636e <UART_SetConfig+0x5a6>
 8106024:	2340      	movs	r3, #64	; 0x40
 8106026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810602a:	e1a0      	b.n	810636e <UART_SetConfig+0x5a6>
 810602c:	2380      	movs	r3, #128	; 0x80
 810602e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106032:	e19c      	b.n	810636e <UART_SetConfig+0x5a6>
 8106034:	697b      	ldr	r3, [r7, #20]
 8106036:	681b      	ldr	r3, [r3, #0]
 8106038:	4a32      	ldr	r2, [pc, #200]	; (8106104 <UART_SetConfig+0x33c>)
 810603a:	4293      	cmp	r3, r2
 810603c:	d130      	bne.n	81060a0 <UART_SetConfig+0x2d8>
 810603e:	4b2e      	ldr	r3, [pc, #184]	; (81060f8 <UART_SetConfig+0x330>)
 8106040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106042:	f003 0307 	and.w	r3, r3, #7
 8106046:	2b05      	cmp	r3, #5
 8106048:	d826      	bhi.n	8106098 <UART_SetConfig+0x2d0>
 810604a:	a201      	add	r2, pc, #4	; (adr r2, 8106050 <UART_SetConfig+0x288>)
 810604c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106050:	08106069 	.word	0x08106069
 8106054:	08106071 	.word	0x08106071
 8106058:	08106079 	.word	0x08106079
 810605c:	08106081 	.word	0x08106081
 8106060:	08106089 	.word	0x08106089
 8106064:	08106091 	.word	0x08106091
 8106068:	2300      	movs	r3, #0
 810606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810606e:	e17e      	b.n	810636e <UART_SetConfig+0x5a6>
 8106070:	2304      	movs	r3, #4
 8106072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106076:	e17a      	b.n	810636e <UART_SetConfig+0x5a6>
 8106078:	2308      	movs	r3, #8
 810607a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810607e:	e176      	b.n	810636e <UART_SetConfig+0x5a6>
 8106080:	2310      	movs	r3, #16
 8106082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106086:	e172      	b.n	810636e <UART_SetConfig+0x5a6>
 8106088:	2320      	movs	r3, #32
 810608a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810608e:	e16e      	b.n	810636e <UART_SetConfig+0x5a6>
 8106090:	2340      	movs	r3, #64	; 0x40
 8106092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106096:	e16a      	b.n	810636e <UART_SetConfig+0x5a6>
 8106098:	2380      	movs	r3, #128	; 0x80
 810609a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810609e:	e166      	b.n	810636e <UART_SetConfig+0x5a6>
 81060a0:	697b      	ldr	r3, [r7, #20]
 81060a2:	681b      	ldr	r3, [r3, #0]
 81060a4:	4a18      	ldr	r2, [pc, #96]	; (8106108 <UART_SetConfig+0x340>)
 81060a6:	4293      	cmp	r3, r2
 81060a8:	d140      	bne.n	810612c <UART_SetConfig+0x364>
 81060aa:	4b13      	ldr	r3, [pc, #76]	; (81060f8 <UART_SetConfig+0x330>)
 81060ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81060ae:	f003 0307 	and.w	r3, r3, #7
 81060b2:	2b05      	cmp	r3, #5
 81060b4:	d836      	bhi.n	8106124 <UART_SetConfig+0x35c>
 81060b6:	a201      	add	r2, pc, #4	; (adr r2, 81060bc <UART_SetConfig+0x2f4>)
 81060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81060bc:	081060d5 	.word	0x081060d5
 81060c0:	081060dd 	.word	0x081060dd
 81060c4:	081060e5 	.word	0x081060e5
 81060c8:	0810610d 	.word	0x0810610d
 81060cc:	08106115 	.word	0x08106115
 81060d0:	0810611d 	.word	0x0810611d
 81060d4:	2300      	movs	r3, #0
 81060d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81060da:	e148      	b.n	810636e <UART_SetConfig+0x5a6>
 81060dc:	2304      	movs	r3, #4
 81060de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81060e2:	e144      	b.n	810636e <UART_SetConfig+0x5a6>
 81060e4:	2308      	movs	r3, #8
 81060e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81060ea:	e140      	b.n	810636e <UART_SetConfig+0x5a6>
 81060ec:	cfff69f3 	.word	0xcfff69f3
 81060f0:	58000c00 	.word	0x58000c00
 81060f4:	40011000 	.word	0x40011000
 81060f8:	58024400 	.word	0x58024400
 81060fc:	40004400 	.word	0x40004400
 8106100:	40004800 	.word	0x40004800
 8106104:	40004c00 	.word	0x40004c00
 8106108:	40005000 	.word	0x40005000
 810610c:	2310      	movs	r3, #16
 810610e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106112:	e12c      	b.n	810636e <UART_SetConfig+0x5a6>
 8106114:	2320      	movs	r3, #32
 8106116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810611a:	e128      	b.n	810636e <UART_SetConfig+0x5a6>
 810611c:	2340      	movs	r3, #64	; 0x40
 810611e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106122:	e124      	b.n	810636e <UART_SetConfig+0x5a6>
 8106124:	2380      	movs	r3, #128	; 0x80
 8106126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810612a:	e120      	b.n	810636e <UART_SetConfig+0x5a6>
 810612c:	697b      	ldr	r3, [r7, #20]
 810612e:	681b      	ldr	r3, [r3, #0]
 8106130:	4acb      	ldr	r2, [pc, #812]	; (8106460 <UART_SetConfig+0x698>)
 8106132:	4293      	cmp	r3, r2
 8106134:	d176      	bne.n	8106224 <UART_SetConfig+0x45c>
 8106136:	4bcb      	ldr	r3, [pc, #812]	; (8106464 <UART_SetConfig+0x69c>)
 8106138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810613a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810613e:	2b28      	cmp	r3, #40	; 0x28
 8106140:	d86c      	bhi.n	810621c <UART_SetConfig+0x454>
 8106142:	a201      	add	r2, pc, #4	; (adr r2, 8106148 <UART_SetConfig+0x380>)
 8106144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106148:	081061ed 	.word	0x081061ed
 810614c:	0810621d 	.word	0x0810621d
 8106150:	0810621d 	.word	0x0810621d
 8106154:	0810621d 	.word	0x0810621d
 8106158:	0810621d 	.word	0x0810621d
 810615c:	0810621d 	.word	0x0810621d
 8106160:	0810621d 	.word	0x0810621d
 8106164:	0810621d 	.word	0x0810621d
 8106168:	081061f5 	.word	0x081061f5
 810616c:	0810621d 	.word	0x0810621d
 8106170:	0810621d 	.word	0x0810621d
 8106174:	0810621d 	.word	0x0810621d
 8106178:	0810621d 	.word	0x0810621d
 810617c:	0810621d 	.word	0x0810621d
 8106180:	0810621d 	.word	0x0810621d
 8106184:	0810621d 	.word	0x0810621d
 8106188:	081061fd 	.word	0x081061fd
 810618c:	0810621d 	.word	0x0810621d
 8106190:	0810621d 	.word	0x0810621d
 8106194:	0810621d 	.word	0x0810621d
 8106198:	0810621d 	.word	0x0810621d
 810619c:	0810621d 	.word	0x0810621d
 81061a0:	0810621d 	.word	0x0810621d
 81061a4:	0810621d 	.word	0x0810621d
 81061a8:	08106205 	.word	0x08106205
 81061ac:	0810621d 	.word	0x0810621d
 81061b0:	0810621d 	.word	0x0810621d
 81061b4:	0810621d 	.word	0x0810621d
 81061b8:	0810621d 	.word	0x0810621d
 81061bc:	0810621d 	.word	0x0810621d
 81061c0:	0810621d 	.word	0x0810621d
 81061c4:	0810621d 	.word	0x0810621d
 81061c8:	0810620d 	.word	0x0810620d
 81061cc:	0810621d 	.word	0x0810621d
 81061d0:	0810621d 	.word	0x0810621d
 81061d4:	0810621d 	.word	0x0810621d
 81061d8:	0810621d 	.word	0x0810621d
 81061dc:	0810621d 	.word	0x0810621d
 81061e0:	0810621d 	.word	0x0810621d
 81061e4:	0810621d 	.word	0x0810621d
 81061e8:	08106215 	.word	0x08106215
 81061ec:	2301      	movs	r3, #1
 81061ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81061f2:	e0bc      	b.n	810636e <UART_SetConfig+0x5a6>
 81061f4:	2304      	movs	r3, #4
 81061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81061fa:	e0b8      	b.n	810636e <UART_SetConfig+0x5a6>
 81061fc:	2308      	movs	r3, #8
 81061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106202:	e0b4      	b.n	810636e <UART_SetConfig+0x5a6>
 8106204:	2310      	movs	r3, #16
 8106206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810620a:	e0b0      	b.n	810636e <UART_SetConfig+0x5a6>
 810620c:	2320      	movs	r3, #32
 810620e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106212:	e0ac      	b.n	810636e <UART_SetConfig+0x5a6>
 8106214:	2340      	movs	r3, #64	; 0x40
 8106216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810621a:	e0a8      	b.n	810636e <UART_SetConfig+0x5a6>
 810621c:	2380      	movs	r3, #128	; 0x80
 810621e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106222:	e0a4      	b.n	810636e <UART_SetConfig+0x5a6>
 8106224:	697b      	ldr	r3, [r7, #20]
 8106226:	681b      	ldr	r3, [r3, #0]
 8106228:	4a8f      	ldr	r2, [pc, #572]	; (8106468 <UART_SetConfig+0x6a0>)
 810622a:	4293      	cmp	r3, r2
 810622c:	d130      	bne.n	8106290 <UART_SetConfig+0x4c8>
 810622e:	4b8d      	ldr	r3, [pc, #564]	; (8106464 <UART_SetConfig+0x69c>)
 8106230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106232:	f003 0307 	and.w	r3, r3, #7
 8106236:	2b05      	cmp	r3, #5
 8106238:	d826      	bhi.n	8106288 <UART_SetConfig+0x4c0>
 810623a:	a201      	add	r2, pc, #4	; (adr r2, 8106240 <UART_SetConfig+0x478>)
 810623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106240:	08106259 	.word	0x08106259
 8106244:	08106261 	.word	0x08106261
 8106248:	08106269 	.word	0x08106269
 810624c:	08106271 	.word	0x08106271
 8106250:	08106279 	.word	0x08106279
 8106254:	08106281 	.word	0x08106281
 8106258:	2300      	movs	r3, #0
 810625a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810625e:	e086      	b.n	810636e <UART_SetConfig+0x5a6>
 8106260:	2304      	movs	r3, #4
 8106262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106266:	e082      	b.n	810636e <UART_SetConfig+0x5a6>
 8106268:	2308      	movs	r3, #8
 810626a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810626e:	e07e      	b.n	810636e <UART_SetConfig+0x5a6>
 8106270:	2310      	movs	r3, #16
 8106272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106276:	e07a      	b.n	810636e <UART_SetConfig+0x5a6>
 8106278:	2320      	movs	r3, #32
 810627a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810627e:	e076      	b.n	810636e <UART_SetConfig+0x5a6>
 8106280:	2340      	movs	r3, #64	; 0x40
 8106282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106286:	e072      	b.n	810636e <UART_SetConfig+0x5a6>
 8106288:	2380      	movs	r3, #128	; 0x80
 810628a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810628e:	e06e      	b.n	810636e <UART_SetConfig+0x5a6>
 8106290:	697b      	ldr	r3, [r7, #20]
 8106292:	681b      	ldr	r3, [r3, #0]
 8106294:	4a75      	ldr	r2, [pc, #468]	; (810646c <UART_SetConfig+0x6a4>)
 8106296:	4293      	cmp	r3, r2
 8106298:	d130      	bne.n	81062fc <UART_SetConfig+0x534>
 810629a:	4b72      	ldr	r3, [pc, #456]	; (8106464 <UART_SetConfig+0x69c>)
 810629c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810629e:	f003 0307 	and.w	r3, r3, #7
 81062a2:	2b05      	cmp	r3, #5
 81062a4:	d826      	bhi.n	81062f4 <UART_SetConfig+0x52c>
 81062a6:	a201      	add	r2, pc, #4	; (adr r2, 81062ac <UART_SetConfig+0x4e4>)
 81062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81062ac:	081062c5 	.word	0x081062c5
 81062b0:	081062cd 	.word	0x081062cd
 81062b4:	081062d5 	.word	0x081062d5
 81062b8:	081062dd 	.word	0x081062dd
 81062bc:	081062e5 	.word	0x081062e5
 81062c0:	081062ed 	.word	0x081062ed
 81062c4:	2300      	movs	r3, #0
 81062c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81062ca:	e050      	b.n	810636e <UART_SetConfig+0x5a6>
 81062cc:	2304      	movs	r3, #4
 81062ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81062d2:	e04c      	b.n	810636e <UART_SetConfig+0x5a6>
 81062d4:	2308      	movs	r3, #8
 81062d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81062da:	e048      	b.n	810636e <UART_SetConfig+0x5a6>
 81062dc:	2310      	movs	r3, #16
 81062de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81062e2:	e044      	b.n	810636e <UART_SetConfig+0x5a6>
 81062e4:	2320      	movs	r3, #32
 81062e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81062ea:	e040      	b.n	810636e <UART_SetConfig+0x5a6>
 81062ec:	2340      	movs	r3, #64	; 0x40
 81062ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81062f2:	e03c      	b.n	810636e <UART_SetConfig+0x5a6>
 81062f4:	2380      	movs	r3, #128	; 0x80
 81062f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81062fa:	e038      	b.n	810636e <UART_SetConfig+0x5a6>
 81062fc:	697b      	ldr	r3, [r7, #20]
 81062fe:	681b      	ldr	r3, [r3, #0]
 8106300:	4a5b      	ldr	r2, [pc, #364]	; (8106470 <UART_SetConfig+0x6a8>)
 8106302:	4293      	cmp	r3, r2
 8106304:	d130      	bne.n	8106368 <UART_SetConfig+0x5a0>
 8106306:	4b57      	ldr	r3, [pc, #348]	; (8106464 <UART_SetConfig+0x69c>)
 8106308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810630a:	f003 0307 	and.w	r3, r3, #7
 810630e:	2b05      	cmp	r3, #5
 8106310:	d826      	bhi.n	8106360 <UART_SetConfig+0x598>
 8106312:	a201      	add	r2, pc, #4	; (adr r2, 8106318 <UART_SetConfig+0x550>)
 8106314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106318:	08106331 	.word	0x08106331
 810631c:	08106339 	.word	0x08106339
 8106320:	08106341 	.word	0x08106341
 8106324:	08106349 	.word	0x08106349
 8106328:	08106351 	.word	0x08106351
 810632c:	08106359 	.word	0x08106359
 8106330:	2302      	movs	r3, #2
 8106332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106336:	e01a      	b.n	810636e <UART_SetConfig+0x5a6>
 8106338:	2304      	movs	r3, #4
 810633a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810633e:	e016      	b.n	810636e <UART_SetConfig+0x5a6>
 8106340:	2308      	movs	r3, #8
 8106342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106346:	e012      	b.n	810636e <UART_SetConfig+0x5a6>
 8106348:	2310      	movs	r3, #16
 810634a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810634e:	e00e      	b.n	810636e <UART_SetConfig+0x5a6>
 8106350:	2320      	movs	r3, #32
 8106352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106356:	e00a      	b.n	810636e <UART_SetConfig+0x5a6>
 8106358:	2340      	movs	r3, #64	; 0x40
 810635a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810635e:	e006      	b.n	810636e <UART_SetConfig+0x5a6>
 8106360:	2380      	movs	r3, #128	; 0x80
 8106362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8106366:	e002      	b.n	810636e <UART_SetConfig+0x5a6>
 8106368:	2380      	movs	r3, #128	; 0x80
 810636a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810636e:	697b      	ldr	r3, [r7, #20]
 8106370:	681b      	ldr	r3, [r3, #0]
 8106372:	4a3f      	ldr	r2, [pc, #252]	; (8106470 <UART_SetConfig+0x6a8>)
 8106374:	4293      	cmp	r3, r2
 8106376:	f040 80f8 	bne.w	810656a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810637a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810637e:	2b20      	cmp	r3, #32
 8106380:	dc46      	bgt.n	8106410 <UART_SetConfig+0x648>
 8106382:	2b02      	cmp	r3, #2
 8106384:	f2c0 8082 	blt.w	810648c <UART_SetConfig+0x6c4>
 8106388:	3b02      	subs	r3, #2
 810638a:	2b1e      	cmp	r3, #30
 810638c:	d87e      	bhi.n	810648c <UART_SetConfig+0x6c4>
 810638e:	a201      	add	r2, pc, #4	; (adr r2, 8106394 <UART_SetConfig+0x5cc>)
 8106390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106394:	08106417 	.word	0x08106417
 8106398:	0810648d 	.word	0x0810648d
 810639c:	0810641f 	.word	0x0810641f
 81063a0:	0810648d 	.word	0x0810648d
 81063a4:	0810648d 	.word	0x0810648d
 81063a8:	0810648d 	.word	0x0810648d
 81063ac:	0810642f 	.word	0x0810642f
 81063b0:	0810648d 	.word	0x0810648d
 81063b4:	0810648d 	.word	0x0810648d
 81063b8:	0810648d 	.word	0x0810648d
 81063bc:	0810648d 	.word	0x0810648d
 81063c0:	0810648d 	.word	0x0810648d
 81063c4:	0810648d 	.word	0x0810648d
 81063c8:	0810648d 	.word	0x0810648d
 81063cc:	0810643f 	.word	0x0810643f
 81063d0:	0810648d 	.word	0x0810648d
 81063d4:	0810648d 	.word	0x0810648d
 81063d8:	0810648d 	.word	0x0810648d
 81063dc:	0810648d 	.word	0x0810648d
 81063e0:	0810648d 	.word	0x0810648d
 81063e4:	0810648d 	.word	0x0810648d
 81063e8:	0810648d 	.word	0x0810648d
 81063ec:	0810648d 	.word	0x0810648d
 81063f0:	0810648d 	.word	0x0810648d
 81063f4:	0810648d 	.word	0x0810648d
 81063f8:	0810648d 	.word	0x0810648d
 81063fc:	0810648d 	.word	0x0810648d
 8106400:	0810648d 	.word	0x0810648d
 8106404:	0810648d 	.word	0x0810648d
 8106408:	0810648d 	.word	0x0810648d
 810640c:	0810647f 	.word	0x0810647f
 8106410:	2b40      	cmp	r3, #64	; 0x40
 8106412:	d037      	beq.n	8106484 <UART_SetConfig+0x6bc>
 8106414:	e03a      	b.n	810648c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8106416:	f7fe ffcf 	bl	81053b8 <HAL_RCCEx_GetD3PCLK1Freq>
 810641a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810641c:	e03c      	b.n	8106498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810641e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106422:	4618      	mov	r0, r3
 8106424:	f7fe ffde 	bl	81053e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810642a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810642c:	e034      	b.n	8106498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810642e:	f107 0318 	add.w	r3, r7, #24
 8106432:	4618      	mov	r0, r3
 8106434:	f7ff f92a 	bl	810568c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106438:	69fb      	ldr	r3, [r7, #28]
 810643a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810643c:	e02c      	b.n	8106498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810643e:	4b09      	ldr	r3, [pc, #36]	; (8106464 <UART_SetConfig+0x69c>)
 8106440:	681b      	ldr	r3, [r3, #0]
 8106442:	f003 0320 	and.w	r3, r3, #32
 8106446:	2b00      	cmp	r3, #0
 8106448:	d016      	beq.n	8106478 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810644a:	4b06      	ldr	r3, [pc, #24]	; (8106464 <UART_SetConfig+0x69c>)
 810644c:	681b      	ldr	r3, [r3, #0]
 810644e:	08db      	lsrs	r3, r3, #3
 8106450:	f003 0303 	and.w	r3, r3, #3
 8106454:	4a07      	ldr	r2, [pc, #28]	; (8106474 <UART_SetConfig+0x6ac>)
 8106456:	fa22 f303 	lsr.w	r3, r2, r3
 810645a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810645c:	e01c      	b.n	8106498 <UART_SetConfig+0x6d0>
 810645e:	bf00      	nop
 8106460:	40011400 	.word	0x40011400
 8106464:	58024400 	.word	0x58024400
 8106468:	40007800 	.word	0x40007800
 810646c:	40007c00 	.word	0x40007c00
 8106470:	58000c00 	.word	0x58000c00
 8106474:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8106478:	4b9d      	ldr	r3, [pc, #628]	; (81066f0 <UART_SetConfig+0x928>)
 810647a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810647c:	e00c      	b.n	8106498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810647e:	4b9d      	ldr	r3, [pc, #628]	; (81066f4 <UART_SetConfig+0x92c>)
 8106480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106482:	e009      	b.n	8106498 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810648a:	e005      	b.n	8106498 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810648c:	2300      	movs	r3, #0
 810648e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8106490:	2301      	movs	r3, #1
 8106492:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8106496:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8106498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810649a:	2b00      	cmp	r3, #0
 810649c:	f000 81de 	beq.w	810685c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81064a0:	697b      	ldr	r3, [r7, #20]
 81064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81064a4:	4a94      	ldr	r2, [pc, #592]	; (81066f8 <UART_SetConfig+0x930>)
 81064a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81064aa:	461a      	mov	r2, r3
 81064ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81064ae:	fbb3 f3f2 	udiv	r3, r3, r2
 81064b2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81064b4:	697b      	ldr	r3, [r7, #20]
 81064b6:	685a      	ldr	r2, [r3, #4]
 81064b8:	4613      	mov	r3, r2
 81064ba:	005b      	lsls	r3, r3, #1
 81064bc:	4413      	add	r3, r2
 81064be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81064c0:	429a      	cmp	r2, r3
 81064c2:	d305      	bcc.n	81064d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81064c4:	697b      	ldr	r3, [r7, #20]
 81064c6:	685b      	ldr	r3, [r3, #4]
 81064c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81064ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81064cc:	429a      	cmp	r2, r3
 81064ce:	d903      	bls.n	81064d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81064d0:	2301      	movs	r3, #1
 81064d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81064d6:	e1c1      	b.n	810685c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81064d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81064da:	2200      	movs	r2, #0
 81064dc:	60bb      	str	r3, [r7, #8]
 81064de:	60fa      	str	r2, [r7, #12]
 81064e0:	697b      	ldr	r3, [r7, #20]
 81064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81064e4:	4a84      	ldr	r2, [pc, #528]	; (81066f8 <UART_SetConfig+0x930>)
 81064e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81064ea:	b29b      	uxth	r3, r3
 81064ec:	2200      	movs	r2, #0
 81064ee:	603b      	str	r3, [r7, #0]
 81064f0:	607a      	str	r2, [r7, #4]
 81064f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81064f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81064fa:	f7fa fc4d 	bl	8100d98 <__aeabi_uldivmod>
 81064fe:	4602      	mov	r2, r0
 8106500:	460b      	mov	r3, r1
 8106502:	4610      	mov	r0, r2
 8106504:	4619      	mov	r1, r3
 8106506:	f04f 0200 	mov.w	r2, #0
 810650a:	f04f 0300 	mov.w	r3, #0
 810650e:	020b      	lsls	r3, r1, #8
 8106510:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8106514:	0202      	lsls	r2, r0, #8
 8106516:	6979      	ldr	r1, [r7, #20]
 8106518:	6849      	ldr	r1, [r1, #4]
 810651a:	0849      	lsrs	r1, r1, #1
 810651c:	2000      	movs	r0, #0
 810651e:	460c      	mov	r4, r1
 8106520:	4605      	mov	r5, r0
 8106522:	eb12 0804 	adds.w	r8, r2, r4
 8106526:	eb43 0905 	adc.w	r9, r3, r5
 810652a:	697b      	ldr	r3, [r7, #20]
 810652c:	685b      	ldr	r3, [r3, #4]
 810652e:	2200      	movs	r2, #0
 8106530:	469a      	mov	sl, r3
 8106532:	4693      	mov	fp, r2
 8106534:	4652      	mov	r2, sl
 8106536:	465b      	mov	r3, fp
 8106538:	4640      	mov	r0, r8
 810653a:	4649      	mov	r1, r9
 810653c:	f7fa fc2c 	bl	8100d98 <__aeabi_uldivmod>
 8106540:	4602      	mov	r2, r0
 8106542:	460b      	mov	r3, r1
 8106544:	4613      	mov	r3, r2
 8106546:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8106548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810654a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810654e:	d308      	bcc.n	8106562 <UART_SetConfig+0x79a>
 8106550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106556:	d204      	bcs.n	8106562 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8106558:	697b      	ldr	r3, [r7, #20]
 810655a:	681b      	ldr	r3, [r3, #0]
 810655c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810655e:	60da      	str	r2, [r3, #12]
 8106560:	e17c      	b.n	810685c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8106562:	2301      	movs	r3, #1
 8106564:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8106568:	e178      	b.n	810685c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810656a:	697b      	ldr	r3, [r7, #20]
 810656c:	69db      	ldr	r3, [r3, #28]
 810656e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106572:	f040 80c5 	bne.w	8106700 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8106576:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810657a:	2b20      	cmp	r3, #32
 810657c:	dc48      	bgt.n	8106610 <UART_SetConfig+0x848>
 810657e:	2b00      	cmp	r3, #0
 8106580:	db7b      	blt.n	810667a <UART_SetConfig+0x8b2>
 8106582:	2b20      	cmp	r3, #32
 8106584:	d879      	bhi.n	810667a <UART_SetConfig+0x8b2>
 8106586:	a201      	add	r2, pc, #4	; (adr r2, 810658c <UART_SetConfig+0x7c4>)
 8106588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810658c:	08106617 	.word	0x08106617
 8106590:	0810661f 	.word	0x0810661f
 8106594:	0810667b 	.word	0x0810667b
 8106598:	0810667b 	.word	0x0810667b
 810659c:	08106627 	.word	0x08106627
 81065a0:	0810667b 	.word	0x0810667b
 81065a4:	0810667b 	.word	0x0810667b
 81065a8:	0810667b 	.word	0x0810667b
 81065ac:	08106637 	.word	0x08106637
 81065b0:	0810667b 	.word	0x0810667b
 81065b4:	0810667b 	.word	0x0810667b
 81065b8:	0810667b 	.word	0x0810667b
 81065bc:	0810667b 	.word	0x0810667b
 81065c0:	0810667b 	.word	0x0810667b
 81065c4:	0810667b 	.word	0x0810667b
 81065c8:	0810667b 	.word	0x0810667b
 81065cc:	08106647 	.word	0x08106647
 81065d0:	0810667b 	.word	0x0810667b
 81065d4:	0810667b 	.word	0x0810667b
 81065d8:	0810667b 	.word	0x0810667b
 81065dc:	0810667b 	.word	0x0810667b
 81065e0:	0810667b 	.word	0x0810667b
 81065e4:	0810667b 	.word	0x0810667b
 81065e8:	0810667b 	.word	0x0810667b
 81065ec:	0810667b 	.word	0x0810667b
 81065f0:	0810667b 	.word	0x0810667b
 81065f4:	0810667b 	.word	0x0810667b
 81065f8:	0810667b 	.word	0x0810667b
 81065fc:	0810667b 	.word	0x0810667b
 8106600:	0810667b 	.word	0x0810667b
 8106604:	0810667b 	.word	0x0810667b
 8106608:	0810667b 	.word	0x0810667b
 810660c:	0810666d 	.word	0x0810666d
 8106610:	2b40      	cmp	r3, #64	; 0x40
 8106612:	d02e      	beq.n	8106672 <UART_SetConfig+0x8aa>
 8106614:	e031      	b.n	810667a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8106616:	f7fd ff5d 	bl	81044d4 <HAL_RCC_GetPCLK1Freq>
 810661a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810661c:	e033      	b.n	8106686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810661e:	f7fd ff6f 	bl	8104500 <HAL_RCC_GetPCLK2Freq>
 8106622:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8106624:	e02f      	b.n	8106686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810662a:	4618      	mov	r0, r3
 810662c:	f7fe feda 	bl	81053e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106634:	e027      	b.n	8106686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106636:	f107 0318 	add.w	r3, r7, #24
 810663a:	4618      	mov	r0, r3
 810663c:	f7ff f826 	bl	810568c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106640:	69fb      	ldr	r3, [r7, #28]
 8106642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106644:	e01f      	b.n	8106686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106646:	4b2d      	ldr	r3, [pc, #180]	; (81066fc <UART_SetConfig+0x934>)
 8106648:	681b      	ldr	r3, [r3, #0]
 810664a:	f003 0320 	and.w	r3, r3, #32
 810664e:	2b00      	cmp	r3, #0
 8106650:	d009      	beq.n	8106666 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106652:	4b2a      	ldr	r3, [pc, #168]	; (81066fc <UART_SetConfig+0x934>)
 8106654:	681b      	ldr	r3, [r3, #0]
 8106656:	08db      	lsrs	r3, r3, #3
 8106658:	f003 0303 	and.w	r3, r3, #3
 810665c:	4a24      	ldr	r2, [pc, #144]	; (81066f0 <UART_SetConfig+0x928>)
 810665e:	fa22 f303 	lsr.w	r3, r2, r3
 8106662:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106664:	e00f      	b.n	8106686 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8106666:	4b22      	ldr	r3, [pc, #136]	; (81066f0 <UART_SetConfig+0x928>)
 8106668:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810666a:	e00c      	b.n	8106686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810666c:	4b21      	ldr	r3, [pc, #132]	; (81066f4 <UART_SetConfig+0x92c>)
 810666e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106670:	e009      	b.n	8106686 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106678:	e005      	b.n	8106686 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810667a:	2300      	movs	r3, #0
 810667c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810667e:	2301      	movs	r3, #1
 8106680:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8106684:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8106686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106688:	2b00      	cmp	r3, #0
 810668a:	f000 80e7 	beq.w	810685c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810668e:	697b      	ldr	r3, [r7, #20]
 8106690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106692:	4a19      	ldr	r2, [pc, #100]	; (81066f8 <UART_SetConfig+0x930>)
 8106694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106698:	461a      	mov	r2, r3
 810669a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810669c:	fbb3 f3f2 	udiv	r3, r3, r2
 81066a0:	005a      	lsls	r2, r3, #1
 81066a2:	697b      	ldr	r3, [r7, #20]
 81066a4:	685b      	ldr	r3, [r3, #4]
 81066a6:	085b      	lsrs	r3, r3, #1
 81066a8:	441a      	add	r2, r3
 81066aa:	697b      	ldr	r3, [r7, #20]
 81066ac:	685b      	ldr	r3, [r3, #4]
 81066ae:	fbb2 f3f3 	udiv	r3, r2, r3
 81066b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81066b6:	2b0f      	cmp	r3, #15
 81066b8:	d916      	bls.n	81066e8 <UART_SetConfig+0x920>
 81066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81066bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81066c0:	d212      	bcs.n	81066e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81066c4:	b29b      	uxth	r3, r3
 81066c6:	f023 030f 	bic.w	r3, r3, #15
 81066ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81066cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81066ce:	085b      	lsrs	r3, r3, #1
 81066d0:	b29b      	uxth	r3, r3
 81066d2:	f003 0307 	and.w	r3, r3, #7
 81066d6:	b29a      	uxth	r2, r3
 81066d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81066da:	4313      	orrs	r3, r2
 81066dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 81066de:	697b      	ldr	r3, [r7, #20]
 81066e0:	681b      	ldr	r3, [r3, #0]
 81066e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81066e4:	60da      	str	r2, [r3, #12]
 81066e6:	e0b9      	b.n	810685c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81066e8:	2301      	movs	r3, #1
 81066ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81066ee:	e0b5      	b.n	810685c <UART_SetConfig+0xa94>
 81066f0:	03d09000 	.word	0x03d09000
 81066f4:	003d0900 	.word	0x003d0900
 81066f8:	0810bbb8 	.word	0x0810bbb8
 81066fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8106700:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8106704:	2b20      	cmp	r3, #32
 8106706:	dc49      	bgt.n	810679c <UART_SetConfig+0x9d4>
 8106708:	2b00      	cmp	r3, #0
 810670a:	db7c      	blt.n	8106806 <UART_SetConfig+0xa3e>
 810670c:	2b20      	cmp	r3, #32
 810670e:	d87a      	bhi.n	8106806 <UART_SetConfig+0xa3e>
 8106710:	a201      	add	r2, pc, #4	; (adr r2, 8106718 <UART_SetConfig+0x950>)
 8106712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106716:	bf00      	nop
 8106718:	081067a3 	.word	0x081067a3
 810671c:	081067ab 	.word	0x081067ab
 8106720:	08106807 	.word	0x08106807
 8106724:	08106807 	.word	0x08106807
 8106728:	081067b3 	.word	0x081067b3
 810672c:	08106807 	.word	0x08106807
 8106730:	08106807 	.word	0x08106807
 8106734:	08106807 	.word	0x08106807
 8106738:	081067c3 	.word	0x081067c3
 810673c:	08106807 	.word	0x08106807
 8106740:	08106807 	.word	0x08106807
 8106744:	08106807 	.word	0x08106807
 8106748:	08106807 	.word	0x08106807
 810674c:	08106807 	.word	0x08106807
 8106750:	08106807 	.word	0x08106807
 8106754:	08106807 	.word	0x08106807
 8106758:	081067d3 	.word	0x081067d3
 810675c:	08106807 	.word	0x08106807
 8106760:	08106807 	.word	0x08106807
 8106764:	08106807 	.word	0x08106807
 8106768:	08106807 	.word	0x08106807
 810676c:	08106807 	.word	0x08106807
 8106770:	08106807 	.word	0x08106807
 8106774:	08106807 	.word	0x08106807
 8106778:	08106807 	.word	0x08106807
 810677c:	08106807 	.word	0x08106807
 8106780:	08106807 	.word	0x08106807
 8106784:	08106807 	.word	0x08106807
 8106788:	08106807 	.word	0x08106807
 810678c:	08106807 	.word	0x08106807
 8106790:	08106807 	.word	0x08106807
 8106794:	08106807 	.word	0x08106807
 8106798:	081067f9 	.word	0x081067f9
 810679c:	2b40      	cmp	r3, #64	; 0x40
 810679e:	d02e      	beq.n	81067fe <UART_SetConfig+0xa36>
 81067a0:	e031      	b.n	8106806 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81067a2:	f7fd fe97 	bl	81044d4 <HAL_RCC_GetPCLK1Freq>
 81067a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81067a8:	e033      	b.n	8106812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81067aa:	f7fd fea9 	bl	8104500 <HAL_RCC_GetPCLK2Freq>
 81067ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81067b0:	e02f      	b.n	8106812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81067b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81067b6:	4618      	mov	r0, r3
 81067b8:	f7fe fe14 	bl	81053e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81067be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81067c0:	e027      	b.n	8106812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81067c2:	f107 0318 	add.w	r3, r7, #24
 81067c6:	4618      	mov	r0, r3
 81067c8:	f7fe ff60 	bl	810568c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81067cc:	69fb      	ldr	r3, [r7, #28]
 81067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81067d0:	e01f      	b.n	8106812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81067d2:	4b2d      	ldr	r3, [pc, #180]	; (8106888 <UART_SetConfig+0xac0>)
 81067d4:	681b      	ldr	r3, [r3, #0]
 81067d6:	f003 0320 	and.w	r3, r3, #32
 81067da:	2b00      	cmp	r3, #0
 81067dc:	d009      	beq.n	81067f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81067de:	4b2a      	ldr	r3, [pc, #168]	; (8106888 <UART_SetConfig+0xac0>)
 81067e0:	681b      	ldr	r3, [r3, #0]
 81067e2:	08db      	lsrs	r3, r3, #3
 81067e4:	f003 0303 	and.w	r3, r3, #3
 81067e8:	4a28      	ldr	r2, [pc, #160]	; (810688c <UART_SetConfig+0xac4>)
 81067ea:	fa22 f303 	lsr.w	r3, r2, r3
 81067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81067f0:	e00f      	b.n	8106812 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81067f2:	4b26      	ldr	r3, [pc, #152]	; (810688c <UART_SetConfig+0xac4>)
 81067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81067f6:	e00c      	b.n	8106812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81067f8:	4b25      	ldr	r3, [pc, #148]	; (8106890 <UART_SetConfig+0xac8>)
 81067fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81067fc:	e009      	b.n	8106812 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81067fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106804:	e005      	b.n	8106812 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8106806:	2300      	movs	r3, #0
 8106808:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810680a:	2301      	movs	r3, #1
 810680c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8106810:	bf00      	nop
    }

    if (pclk != 0U)
 8106812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106814:	2b00      	cmp	r3, #0
 8106816:	d021      	beq.n	810685c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106818:	697b      	ldr	r3, [r7, #20]
 810681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810681c:	4a1d      	ldr	r2, [pc, #116]	; (8106894 <UART_SetConfig+0xacc>)
 810681e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106822:	461a      	mov	r2, r3
 8106824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106826:	fbb3 f2f2 	udiv	r2, r3, r2
 810682a:	697b      	ldr	r3, [r7, #20]
 810682c:	685b      	ldr	r3, [r3, #4]
 810682e:	085b      	lsrs	r3, r3, #1
 8106830:	441a      	add	r2, r3
 8106832:	697b      	ldr	r3, [r7, #20]
 8106834:	685b      	ldr	r3, [r3, #4]
 8106836:	fbb2 f3f3 	udiv	r3, r2, r3
 810683a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810683e:	2b0f      	cmp	r3, #15
 8106840:	d909      	bls.n	8106856 <UART_SetConfig+0xa8e>
 8106842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106848:	d205      	bcs.n	8106856 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810684c:	b29a      	uxth	r2, r3
 810684e:	697b      	ldr	r3, [r7, #20]
 8106850:	681b      	ldr	r3, [r3, #0]
 8106852:	60da      	str	r2, [r3, #12]
 8106854:	e002      	b.n	810685c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8106856:	2301      	movs	r3, #1
 8106858:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810685c:	697b      	ldr	r3, [r7, #20]
 810685e:	2201      	movs	r2, #1
 8106860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8106864:	697b      	ldr	r3, [r7, #20]
 8106866:	2201      	movs	r2, #1
 8106868:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810686c:	697b      	ldr	r3, [r7, #20]
 810686e:	2200      	movs	r2, #0
 8106870:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8106872:	697b      	ldr	r3, [r7, #20]
 8106874:	2200      	movs	r2, #0
 8106876:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8106878:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 810687c:	4618      	mov	r0, r3
 810687e:	3748      	adds	r7, #72	; 0x48
 8106880:	46bd      	mov	sp, r7
 8106882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8106886:	bf00      	nop
 8106888:	58024400 	.word	0x58024400
 810688c:	03d09000 	.word	0x03d09000
 8106890:	003d0900 	.word	0x003d0900
 8106894:	0810bbb8 	.word	0x0810bbb8

08106898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8106898:	b480      	push	{r7}
 810689a:	b083      	sub	sp, #12
 810689c:	af00      	add	r7, sp, #0
 810689e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81068a4:	f003 0301 	and.w	r3, r3, #1
 81068a8:	2b00      	cmp	r3, #0
 81068aa:	d00a      	beq.n	81068c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81068ac:	687b      	ldr	r3, [r7, #4]
 81068ae:	681b      	ldr	r3, [r3, #0]
 81068b0:	685b      	ldr	r3, [r3, #4]
 81068b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81068b6:	687b      	ldr	r3, [r7, #4]
 81068b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81068ba:	687b      	ldr	r3, [r7, #4]
 81068bc:	681b      	ldr	r3, [r3, #0]
 81068be:	430a      	orrs	r2, r1
 81068c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81068c2:	687b      	ldr	r3, [r7, #4]
 81068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81068c6:	f003 0302 	and.w	r3, r3, #2
 81068ca:	2b00      	cmp	r3, #0
 81068cc:	d00a      	beq.n	81068e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81068ce:	687b      	ldr	r3, [r7, #4]
 81068d0:	681b      	ldr	r3, [r3, #0]
 81068d2:	685b      	ldr	r3, [r3, #4]
 81068d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	681b      	ldr	r3, [r3, #0]
 81068e0:	430a      	orrs	r2, r1
 81068e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81068e4:	687b      	ldr	r3, [r7, #4]
 81068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81068e8:	f003 0304 	and.w	r3, r3, #4
 81068ec:	2b00      	cmp	r3, #0
 81068ee:	d00a      	beq.n	8106906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81068f0:	687b      	ldr	r3, [r7, #4]
 81068f2:	681b      	ldr	r3, [r3, #0]
 81068f4:	685b      	ldr	r3, [r3, #4]
 81068f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81068fa:	687b      	ldr	r3, [r7, #4]
 81068fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81068fe:	687b      	ldr	r3, [r7, #4]
 8106900:	681b      	ldr	r3, [r3, #0]
 8106902:	430a      	orrs	r2, r1
 8106904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810690a:	f003 0308 	and.w	r3, r3, #8
 810690e:	2b00      	cmp	r3, #0
 8106910:	d00a      	beq.n	8106928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8106912:	687b      	ldr	r3, [r7, #4]
 8106914:	681b      	ldr	r3, [r3, #0]
 8106916:	685b      	ldr	r3, [r3, #4]
 8106918:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810691c:	687b      	ldr	r3, [r7, #4]
 810691e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106920:	687b      	ldr	r3, [r7, #4]
 8106922:	681b      	ldr	r3, [r3, #0]
 8106924:	430a      	orrs	r2, r1
 8106926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106928:	687b      	ldr	r3, [r7, #4]
 810692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810692c:	f003 0310 	and.w	r3, r3, #16
 8106930:	2b00      	cmp	r3, #0
 8106932:	d00a      	beq.n	810694a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8106934:	687b      	ldr	r3, [r7, #4]
 8106936:	681b      	ldr	r3, [r3, #0]
 8106938:	689b      	ldr	r3, [r3, #8]
 810693a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810693e:	687b      	ldr	r3, [r7, #4]
 8106940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	681b      	ldr	r3, [r3, #0]
 8106946:	430a      	orrs	r2, r1
 8106948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810694a:	687b      	ldr	r3, [r7, #4]
 810694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810694e:	f003 0320 	and.w	r3, r3, #32
 8106952:	2b00      	cmp	r3, #0
 8106954:	d00a      	beq.n	810696c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8106956:	687b      	ldr	r3, [r7, #4]
 8106958:	681b      	ldr	r3, [r3, #0]
 810695a:	689b      	ldr	r3, [r3, #8]
 810695c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8106960:	687b      	ldr	r3, [r7, #4]
 8106962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8106964:	687b      	ldr	r3, [r7, #4]
 8106966:	681b      	ldr	r3, [r3, #0]
 8106968:	430a      	orrs	r2, r1
 810696a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810696c:	687b      	ldr	r3, [r7, #4]
 810696e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106974:	2b00      	cmp	r3, #0
 8106976:	d01a      	beq.n	81069ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106978:	687b      	ldr	r3, [r7, #4]
 810697a:	681b      	ldr	r3, [r3, #0]
 810697c:	685b      	ldr	r3, [r3, #4]
 810697e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8106982:	687b      	ldr	r3, [r7, #4]
 8106984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8106986:	687b      	ldr	r3, [r7, #4]
 8106988:	681b      	ldr	r3, [r3, #0]
 810698a:	430a      	orrs	r2, r1
 810698c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810698e:	687b      	ldr	r3, [r7, #4]
 8106990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106996:	d10a      	bne.n	81069ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8106998:	687b      	ldr	r3, [r7, #4]
 810699a:	681b      	ldr	r3, [r3, #0]
 810699c:	685b      	ldr	r3, [r3, #4]
 810699e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81069a2:	687b      	ldr	r3, [r7, #4]
 81069a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81069a6:	687b      	ldr	r3, [r7, #4]
 81069a8:	681b      	ldr	r3, [r3, #0]
 81069aa:	430a      	orrs	r2, r1
 81069ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81069ae:	687b      	ldr	r3, [r7, #4]
 81069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81069b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81069b6:	2b00      	cmp	r3, #0
 81069b8:	d00a      	beq.n	81069d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81069ba:	687b      	ldr	r3, [r7, #4]
 81069bc:	681b      	ldr	r3, [r3, #0]
 81069be:	685b      	ldr	r3, [r3, #4]
 81069c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 81069c4:	687b      	ldr	r3, [r7, #4]
 81069c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	681b      	ldr	r3, [r3, #0]
 81069cc:	430a      	orrs	r2, r1
 81069ce:	605a      	str	r2, [r3, #4]
  }
}
 81069d0:	bf00      	nop
 81069d2:	370c      	adds	r7, #12
 81069d4:	46bd      	mov	sp, r7
 81069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069da:	4770      	bx	lr

081069dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81069dc:	b580      	push	{r7, lr}
 81069de:	b086      	sub	sp, #24
 81069e0:	af02      	add	r7, sp, #8
 81069e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81069e4:	687b      	ldr	r3, [r7, #4]
 81069e6:	2200      	movs	r2, #0
 81069e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81069ec:	f7fb fb66 	bl	81020bc <HAL_GetTick>
 81069f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81069f2:	687b      	ldr	r3, [r7, #4]
 81069f4:	681b      	ldr	r3, [r3, #0]
 81069f6:	681b      	ldr	r3, [r3, #0]
 81069f8:	f003 0308 	and.w	r3, r3, #8
 81069fc:	2b08      	cmp	r3, #8
 81069fe:	d10e      	bne.n	8106a1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8106a04:	9300      	str	r3, [sp, #0]
 8106a06:	68fb      	ldr	r3, [r7, #12]
 8106a08:	2200      	movs	r2, #0
 8106a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8106a0e:	6878      	ldr	r0, [r7, #4]
 8106a10:	f000 f82f 	bl	8106a72 <UART_WaitOnFlagUntilTimeout>
 8106a14:	4603      	mov	r3, r0
 8106a16:	2b00      	cmp	r3, #0
 8106a18:	d001      	beq.n	8106a1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106a1a:	2303      	movs	r3, #3
 8106a1c:	e025      	b.n	8106a6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8106a1e:	687b      	ldr	r3, [r7, #4]
 8106a20:	681b      	ldr	r3, [r3, #0]
 8106a22:	681b      	ldr	r3, [r3, #0]
 8106a24:	f003 0304 	and.w	r3, r3, #4
 8106a28:	2b04      	cmp	r3, #4
 8106a2a:	d10e      	bne.n	8106a4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8106a30:	9300      	str	r3, [sp, #0]
 8106a32:	68fb      	ldr	r3, [r7, #12]
 8106a34:	2200      	movs	r2, #0
 8106a36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8106a3a:	6878      	ldr	r0, [r7, #4]
 8106a3c:	f000 f819 	bl	8106a72 <UART_WaitOnFlagUntilTimeout>
 8106a40:	4603      	mov	r3, r0
 8106a42:	2b00      	cmp	r3, #0
 8106a44:	d001      	beq.n	8106a4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106a46:	2303      	movs	r3, #3
 8106a48:	e00f      	b.n	8106a6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8106a4a:	687b      	ldr	r3, [r7, #4]
 8106a4c:	2220      	movs	r2, #32
 8106a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8106a52:	687b      	ldr	r3, [r7, #4]
 8106a54:	2220      	movs	r2, #32
 8106a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106a5a:	687b      	ldr	r3, [r7, #4]
 8106a5c:	2200      	movs	r2, #0
 8106a5e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8106a60:	687b      	ldr	r3, [r7, #4]
 8106a62:	2200      	movs	r2, #0
 8106a64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106a68:	2300      	movs	r3, #0
}
 8106a6a:	4618      	mov	r0, r3
 8106a6c:	3710      	adds	r7, #16
 8106a6e:	46bd      	mov	sp, r7
 8106a70:	bd80      	pop	{r7, pc}

08106a72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8106a72:	b580      	push	{r7, lr}
 8106a74:	b09c      	sub	sp, #112	; 0x70
 8106a76:	af00      	add	r7, sp, #0
 8106a78:	60f8      	str	r0, [r7, #12]
 8106a7a:	60b9      	str	r1, [r7, #8]
 8106a7c:	603b      	str	r3, [r7, #0]
 8106a7e:	4613      	mov	r3, r2
 8106a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106a82:	e0a9      	b.n	8106bd8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106a8a:	f000 80a5 	beq.w	8106bd8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106a8e:	f7fb fb15 	bl	81020bc <HAL_GetTick>
 8106a92:	4602      	mov	r2, r0
 8106a94:	683b      	ldr	r3, [r7, #0]
 8106a96:	1ad3      	subs	r3, r2, r3
 8106a98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8106a9a:	429a      	cmp	r2, r3
 8106a9c:	d302      	bcc.n	8106aa4 <UART_WaitOnFlagUntilTimeout+0x32>
 8106a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106aa0:	2b00      	cmp	r3, #0
 8106aa2:	d140      	bne.n	8106b26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8106aa4:	68fb      	ldr	r3, [r7, #12]
 8106aa6:	681b      	ldr	r3, [r3, #0]
 8106aa8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8106aac:	e853 3f00 	ldrex	r3, [r3]
 8106ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8106ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106ab4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8106ab8:	667b      	str	r3, [r7, #100]	; 0x64
 8106aba:	68fb      	ldr	r3, [r7, #12]
 8106abc:	681b      	ldr	r3, [r3, #0]
 8106abe:	461a      	mov	r2, r3
 8106ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8106ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8106ac4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106ac6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8106ac8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8106aca:	e841 2300 	strex	r3, r2, [r1]
 8106ace:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8106ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8106ad2:	2b00      	cmp	r3, #0
 8106ad4:	d1e6      	bne.n	8106aa4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106ad6:	68fb      	ldr	r3, [r7, #12]
 8106ad8:	681b      	ldr	r3, [r3, #0]
 8106ada:	3308      	adds	r3, #8
 8106adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106ae0:	e853 3f00 	ldrex	r3, [r3]
 8106ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8106ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106ae8:	f023 0301 	bic.w	r3, r3, #1
 8106aec:	663b      	str	r3, [r7, #96]	; 0x60
 8106aee:	68fb      	ldr	r3, [r7, #12]
 8106af0:	681b      	ldr	r3, [r3, #0]
 8106af2:	3308      	adds	r3, #8
 8106af4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8106af6:	64ba      	str	r2, [r7, #72]	; 0x48
 8106af8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106afa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8106afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8106afe:	e841 2300 	strex	r3, r2, [r1]
 8106b02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8106b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106b06:	2b00      	cmp	r3, #0
 8106b08:	d1e5      	bne.n	8106ad6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8106b0a:	68fb      	ldr	r3, [r7, #12]
 8106b0c:	2220      	movs	r2, #32
 8106b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8106b12:	68fb      	ldr	r3, [r7, #12]
 8106b14:	2220      	movs	r2, #32
 8106b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8106b1a:	68fb      	ldr	r3, [r7, #12]
 8106b1c:	2200      	movs	r2, #0
 8106b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8106b22:	2303      	movs	r3, #3
 8106b24:	e069      	b.n	8106bfa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8106b26:	68fb      	ldr	r3, [r7, #12]
 8106b28:	681b      	ldr	r3, [r3, #0]
 8106b2a:	681b      	ldr	r3, [r3, #0]
 8106b2c:	f003 0304 	and.w	r3, r3, #4
 8106b30:	2b00      	cmp	r3, #0
 8106b32:	d051      	beq.n	8106bd8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8106b34:	68fb      	ldr	r3, [r7, #12]
 8106b36:	681b      	ldr	r3, [r3, #0]
 8106b38:	69db      	ldr	r3, [r3, #28]
 8106b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8106b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106b42:	d149      	bne.n	8106bd8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8106b44:	68fb      	ldr	r3, [r7, #12]
 8106b46:	681b      	ldr	r3, [r3, #0]
 8106b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8106b4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8106b4e:	68fb      	ldr	r3, [r7, #12]
 8106b50:	681b      	ldr	r3, [r3, #0]
 8106b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106b56:	e853 3f00 	ldrex	r3, [r3]
 8106b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8106b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106b5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8106b62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8106b64:	68fb      	ldr	r3, [r7, #12]
 8106b66:	681b      	ldr	r3, [r3, #0]
 8106b68:	461a      	mov	r2, r3
 8106b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8106b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8106b6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106b70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8106b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106b74:	e841 2300 	strex	r3, r2, [r1]
 8106b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8106b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106b7c:	2b00      	cmp	r3, #0
 8106b7e:	d1e6      	bne.n	8106b4e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106b80:	68fb      	ldr	r3, [r7, #12]
 8106b82:	681b      	ldr	r3, [r3, #0]
 8106b84:	3308      	adds	r3, #8
 8106b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106b88:	697b      	ldr	r3, [r7, #20]
 8106b8a:	e853 3f00 	ldrex	r3, [r3]
 8106b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8106b90:	693b      	ldr	r3, [r7, #16]
 8106b92:	f023 0301 	bic.w	r3, r3, #1
 8106b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8106b98:	68fb      	ldr	r3, [r7, #12]
 8106b9a:	681b      	ldr	r3, [r3, #0]
 8106b9c:	3308      	adds	r3, #8
 8106b9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8106ba0:	623a      	str	r2, [r7, #32]
 8106ba2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106ba4:	69f9      	ldr	r1, [r7, #28]
 8106ba6:	6a3a      	ldr	r2, [r7, #32]
 8106ba8:	e841 2300 	strex	r3, r2, [r1]
 8106bac:	61bb      	str	r3, [r7, #24]
   return(result);
 8106bae:	69bb      	ldr	r3, [r7, #24]
 8106bb0:	2b00      	cmp	r3, #0
 8106bb2:	d1e5      	bne.n	8106b80 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8106bb4:	68fb      	ldr	r3, [r7, #12]
 8106bb6:	2220      	movs	r2, #32
 8106bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8106bbc:	68fb      	ldr	r3, [r7, #12]
 8106bbe:	2220      	movs	r2, #32
 8106bc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8106bc4:	68fb      	ldr	r3, [r7, #12]
 8106bc6:	2220      	movs	r2, #32
 8106bc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106bcc:	68fb      	ldr	r3, [r7, #12]
 8106bce:	2200      	movs	r2, #0
 8106bd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8106bd4:	2303      	movs	r3, #3
 8106bd6:	e010      	b.n	8106bfa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106bd8:	68fb      	ldr	r3, [r7, #12]
 8106bda:	681b      	ldr	r3, [r3, #0]
 8106bdc:	69da      	ldr	r2, [r3, #28]
 8106bde:	68bb      	ldr	r3, [r7, #8]
 8106be0:	4013      	ands	r3, r2
 8106be2:	68ba      	ldr	r2, [r7, #8]
 8106be4:	429a      	cmp	r2, r3
 8106be6:	bf0c      	ite	eq
 8106be8:	2301      	moveq	r3, #1
 8106bea:	2300      	movne	r3, #0
 8106bec:	b2db      	uxtb	r3, r3
 8106bee:	461a      	mov	r2, r3
 8106bf0:	79fb      	ldrb	r3, [r7, #7]
 8106bf2:	429a      	cmp	r2, r3
 8106bf4:	f43f af46 	beq.w	8106a84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8106bf8:	2300      	movs	r3, #0
}
 8106bfa:	4618      	mov	r0, r3
 8106bfc:	3770      	adds	r7, #112	; 0x70
 8106bfe:	46bd      	mov	sp, r7
 8106c00:	bd80      	pop	{r7, pc}

08106c02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8106c02:	b480      	push	{r7}
 8106c04:	b085      	sub	sp, #20
 8106c06:	af00      	add	r7, sp, #0
 8106c08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106c0a:	687b      	ldr	r3, [r7, #4]
 8106c0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106c10:	2b01      	cmp	r3, #1
 8106c12:	d101      	bne.n	8106c18 <HAL_UARTEx_DisableFifoMode+0x16>
 8106c14:	2302      	movs	r3, #2
 8106c16:	e027      	b.n	8106c68 <HAL_UARTEx_DisableFifoMode+0x66>
 8106c18:	687b      	ldr	r3, [r7, #4]
 8106c1a:	2201      	movs	r2, #1
 8106c1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8106c20:	687b      	ldr	r3, [r7, #4]
 8106c22:	2224      	movs	r2, #36	; 0x24
 8106c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106c28:	687b      	ldr	r3, [r7, #4]
 8106c2a:	681b      	ldr	r3, [r3, #0]
 8106c2c:	681b      	ldr	r3, [r3, #0]
 8106c2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106c30:	687b      	ldr	r3, [r7, #4]
 8106c32:	681b      	ldr	r3, [r3, #0]
 8106c34:	681a      	ldr	r2, [r3, #0]
 8106c36:	687b      	ldr	r3, [r7, #4]
 8106c38:	681b      	ldr	r3, [r3, #0]
 8106c3a:	f022 0201 	bic.w	r2, r2, #1
 8106c3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8106c40:	68fb      	ldr	r3, [r7, #12]
 8106c42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8106c46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	2200      	movs	r2, #0
 8106c4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106c4e:	687b      	ldr	r3, [r7, #4]
 8106c50:	681b      	ldr	r3, [r3, #0]
 8106c52:	68fa      	ldr	r2, [r7, #12]
 8106c54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106c56:	687b      	ldr	r3, [r7, #4]
 8106c58:	2220      	movs	r2, #32
 8106c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106c5e:	687b      	ldr	r3, [r7, #4]
 8106c60:	2200      	movs	r2, #0
 8106c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106c66:	2300      	movs	r3, #0
}
 8106c68:	4618      	mov	r0, r3
 8106c6a:	3714      	adds	r7, #20
 8106c6c:	46bd      	mov	sp, r7
 8106c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c72:	4770      	bx	lr

08106c74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106c74:	b580      	push	{r7, lr}
 8106c76:	b084      	sub	sp, #16
 8106c78:	af00      	add	r7, sp, #0
 8106c7a:	6078      	str	r0, [r7, #4]
 8106c7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106c7e:	687b      	ldr	r3, [r7, #4]
 8106c80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106c84:	2b01      	cmp	r3, #1
 8106c86:	d101      	bne.n	8106c8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8106c88:	2302      	movs	r3, #2
 8106c8a:	e02d      	b.n	8106ce8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	2201      	movs	r2, #1
 8106c90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8106c94:	687b      	ldr	r3, [r7, #4]
 8106c96:	2224      	movs	r2, #36	; 0x24
 8106c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106c9c:	687b      	ldr	r3, [r7, #4]
 8106c9e:	681b      	ldr	r3, [r3, #0]
 8106ca0:	681b      	ldr	r3, [r3, #0]
 8106ca2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106ca4:	687b      	ldr	r3, [r7, #4]
 8106ca6:	681b      	ldr	r3, [r3, #0]
 8106ca8:	681a      	ldr	r2, [r3, #0]
 8106caa:	687b      	ldr	r3, [r7, #4]
 8106cac:	681b      	ldr	r3, [r3, #0]
 8106cae:	f022 0201 	bic.w	r2, r2, #1
 8106cb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8106cb4:	687b      	ldr	r3, [r7, #4]
 8106cb6:	681b      	ldr	r3, [r3, #0]
 8106cb8:	689b      	ldr	r3, [r3, #8]
 8106cba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8106cbe:	687b      	ldr	r3, [r7, #4]
 8106cc0:	681b      	ldr	r3, [r3, #0]
 8106cc2:	683a      	ldr	r2, [r7, #0]
 8106cc4:	430a      	orrs	r2, r1
 8106cc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106cc8:	6878      	ldr	r0, [r7, #4]
 8106cca:	f000 f84f 	bl	8106d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106cce:	687b      	ldr	r3, [r7, #4]
 8106cd0:	681b      	ldr	r3, [r3, #0]
 8106cd2:	68fa      	ldr	r2, [r7, #12]
 8106cd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106cd6:	687b      	ldr	r3, [r7, #4]
 8106cd8:	2220      	movs	r2, #32
 8106cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106cde:	687b      	ldr	r3, [r7, #4]
 8106ce0:	2200      	movs	r2, #0
 8106ce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106ce6:	2300      	movs	r3, #0
}
 8106ce8:	4618      	mov	r0, r3
 8106cea:	3710      	adds	r7, #16
 8106cec:	46bd      	mov	sp, r7
 8106cee:	bd80      	pop	{r7, pc}

08106cf0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106cf0:	b580      	push	{r7, lr}
 8106cf2:	b084      	sub	sp, #16
 8106cf4:	af00      	add	r7, sp, #0
 8106cf6:	6078      	str	r0, [r7, #4]
 8106cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106cfa:	687b      	ldr	r3, [r7, #4]
 8106cfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106d00:	2b01      	cmp	r3, #1
 8106d02:	d101      	bne.n	8106d08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8106d04:	2302      	movs	r3, #2
 8106d06:	e02d      	b.n	8106d64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8106d08:	687b      	ldr	r3, [r7, #4]
 8106d0a:	2201      	movs	r2, #1
 8106d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8106d10:	687b      	ldr	r3, [r7, #4]
 8106d12:	2224      	movs	r2, #36	; 0x24
 8106d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106d18:	687b      	ldr	r3, [r7, #4]
 8106d1a:	681b      	ldr	r3, [r3, #0]
 8106d1c:	681b      	ldr	r3, [r3, #0]
 8106d1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	681b      	ldr	r3, [r3, #0]
 8106d24:	681a      	ldr	r2, [r3, #0]
 8106d26:	687b      	ldr	r3, [r7, #4]
 8106d28:	681b      	ldr	r3, [r3, #0]
 8106d2a:	f022 0201 	bic.w	r2, r2, #1
 8106d2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8106d30:	687b      	ldr	r3, [r7, #4]
 8106d32:	681b      	ldr	r3, [r3, #0]
 8106d34:	689b      	ldr	r3, [r3, #8]
 8106d36:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8106d3a:	687b      	ldr	r3, [r7, #4]
 8106d3c:	681b      	ldr	r3, [r3, #0]
 8106d3e:	683a      	ldr	r2, [r7, #0]
 8106d40:	430a      	orrs	r2, r1
 8106d42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106d44:	6878      	ldr	r0, [r7, #4]
 8106d46:	f000 f811 	bl	8106d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106d4a:	687b      	ldr	r3, [r7, #4]
 8106d4c:	681b      	ldr	r3, [r3, #0]
 8106d4e:	68fa      	ldr	r2, [r7, #12]
 8106d50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106d52:	687b      	ldr	r3, [r7, #4]
 8106d54:	2220      	movs	r2, #32
 8106d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106d5a:	687b      	ldr	r3, [r7, #4]
 8106d5c:	2200      	movs	r2, #0
 8106d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106d62:	2300      	movs	r3, #0
}
 8106d64:	4618      	mov	r0, r3
 8106d66:	3710      	adds	r7, #16
 8106d68:	46bd      	mov	sp, r7
 8106d6a:	bd80      	pop	{r7, pc}

08106d6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8106d6c:	b480      	push	{r7}
 8106d6e:	b085      	sub	sp, #20
 8106d70:	af00      	add	r7, sp, #0
 8106d72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8106d74:	687b      	ldr	r3, [r7, #4]
 8106d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106d78:	2b00      	cmp	r3, #0
 8106d7a:	d108      	bne.n	8106d8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8106d7c:	687b      	ldr	r3, [r7, #4]
 8106d7e:	2201      	movs	r2, #1
 8106d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8106d84:	687b      	ldr	r3, [r7, #4]
 8106d86:	2201      	movs	r2, #1
 8106d88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8106d8c:	e031      	b.n	8106df2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8106d8e:	2310      	movs	r3, #16
 8106d90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8106d92:	2310      	movs	r3, #16
 8106d94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8106d96:	687b      	ldr	r3, [r7, #4]
 8106d98:	681b      	ldr	r3, [r3, #0]
 8106d9a:	689b      	ldr	r3, [r3, #8]
 8106d9c:	0e5b      	lsrs	r3, r3, #25
 8106d9e:	b2db      	uxtb	r3, r3
 8106da0:	f003 0307 	and.w	r3, r3, #7
 8106da4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8106da6:	687b      	ldr	r3, [r7, #4]
 8106da8:	681b      	ldr	r3, [r3, #0]
 8106daa:	689b      	ldr	r3, [r3, #8]
 8106dac:	0f5b      	lsrs	r3, r3, #29
 8106dae:	b2db      	uxtb	r3, r3
 8106db0:	f003 0307 	and.w	r3, r3, #7
 8106db4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106db6:	7bbb      	ldrb	r3, [r7, #14]
 8106db8:	7b3a      	ldrb	r2, [r7, #12]
 8106dba:	4911      	ldr	r1, [pc, #68]	; (8106e00 <UARTEx_SetNbDataToProcess+0x94>)
 8106dbc:	5c8a      	ldrb	r2, [r1, r2]
 8106dbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8106dc2:	7b3a      	ldrb	r2, [r7, #12]
 8106dc4:	490f      	ldr	r1, [pc, #60]	; (8106e04 <UARTEx_SetNbDataToProcess+0x98>)
 8106dc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106dc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8106dcc:	b29a      	uxth	r2, r3
 8106dce:	687b      	ldr	r3, [r7, #4]
 8106dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106dd4:	7bfb      	ldrb	r3, [r7, #15]
 8106dd6:	7b7a      	ldrb	r2, [r7, #13]
 8106dd8:	4909      	ldr	r1, [pc, #36]	; (8106e00 <UARTEx_SetNbDataToProcess+0x94>)
 8106dda:	5c8a      	ldrb	r2, [r1, r2]
 8106ddc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8106de0:	7b7a      	ldrb	r2, [r7, #13]
 8106de2:	4908      	ldr	r1, [pc, #32]	; (8106e04 <UARTEx_SetNbDataToProcess+0x98>)
 8106de4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106de6:	fb93 f3f2 	sdiv	r3, r3, r2
 8106dea:	b29a      	uxth	r2, r3
 8106dec:	687b      	ldr	r3, [r7, #4]
 8106dee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8106df2:	bf00      	nop
 8106df4:	3714      	adds	r7, #20
 8106df6:	46bd      	mov	sp, r7
 8106df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106dfc:	4770      	bx	lr
 8106dfe:	bf00      	nop
 8106e00:	0810bbd0 	.word	0x0810bbd0
 8106e04:	0810bbd8 	.word	0x0810bbd8

08106e08 <__errno>:
 8106e08:	4b01      	ldr	r3, [pc, #4]	; (8106e10 <__errno+0x8>)
 8106e0a:	6818      	ldr	r0, [r3, #0]
 8106e0c:	4770      	bx	lr
 8106e0e:	bf00      	nop
 8106e10:	1000001c 	.word	0x1000001c

08106e14 <__libc_init_array>:
 8106e14:	b570      	push	{r4, r5, r6, lr}
 8106e16:	4d0d      	ldr	r5, [pc, #52]	; (8106e4c <__libc_init_array+0x38>)
 8106e18:	4c0d      	ldr	r4, [pc, #52]	; (8106e50 <__libc_init_array+0x3c>)
 8106e1a:	1b64      	subs	r4, r4, r5
 8106e1c:	10a4      	asrs	r4, r4, #2
 8106e1e:	2600      	movs	r6, #0
 8106e20:	42a6      	cmp	r6, r4
 8106e22:	d109      	bne.n	8106e38 <__libc_init_array+0x24>
 8106e24:	4d0b      	ldr	r5, [pc, #44]	; (8106e54 <__libc_init_array+0x40>)
 8106e26:	4c0c      	ldr	r4, [pc, #48]	; (8106e58 <__libc_init_array+0x44>)
 8106e28:	f004 fd78 	bl	810b91c <_init>
 8106e2c:	1b64      	subs	r4, r4, r5
 8106e2e:	10a4      	asrs	r4, r4, #2
 8106e30:	2600      	movs	r6, #0
 8106e32:	42a6      	cmp	r6, r4
 8106e34:	d105      	bne.n	8106e42 <__libc_init_array+0x2e>
 8106e36:	bd70      	pop	{r4, r5, r6, pc}
 8106e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8106e3c:	4798      	blx	r3
 8106e3e:	3601      	adds	r6, #1
 8106e40:	e7ee      	b.n	8106e20 <__libc_init_array+0xc>
 8106e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8106e46:	4798      	blx	r3
 8106e48:	3601      	adds	r6, #1
 8106e4a:	e7f2      	b.n	8106e32 <__libc_init_array+0x1e>
 8106e4c:	0810c094 	.word	0x0810c094
 8106e50:	0810c094 	.word	0x0810c094
 8106e54:	0810c094 	.word	0x0810c094
 8106e58:	0810c098 	.word	0x0810c098

08106e5c <memcpy>:
 8106e5c:	440a      	add	r2, r1
 8106e5e:	4291      	cmp	r1, r2
 8106e60:	f100 33ff 	add.w	r3, r0, #4294967295
 8106e64:	d100      	bne.n	8106e68 <memcpy+0xc>
 8106e66:	4770      	bx	lr
 8106e68:	b510      	push	{r4, lr}
 8106e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8106e6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8106e72:	4291      	cmp	r1, r2
 8106e74:	d1f9      	bne.n	8106e6a <memcpy+0xe>
 8106e76:	bd10      	pop	{r4, pc}

08106e78 <memset>:
 8106e78:	4402      	add	r2, r0
 8106e7a:	4603      	mov	r3, r0
 8106e7c:	4293      	cmp	r3, r2
 8106e7e:	d100      	bne.n	8106e82 <memset+0xa>
 8106e80:	4770      	bx	lr
 8106e82:	f803 1b01 	strb.w	r1, [r3], #1
 8106e86:	e7f9      	b.n	8106e7c <memset+0x4>

08106e88 <__cvt>:
 8106e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106e8c:	ec55 4b10 	vmov	r4, r5, d0
 8106e90:	2d00      	cmp	r5, #0
 8106e92:	460e      	mov	r6, r1
 8106e94:	4619      	mov	r1, r3
 8106e96:	462b      	mov	r3, r5
 8106e98:	bfbb      	ittet	lt
 8106e9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8106e9e:	461d      	movlt	r5, r3
 8106ea0:	2300      	movge	r3, #0
 8106ea2:	232d      	movlt	r3, #45	; 0x2d
 8106ea4:	700b      	strb	r3, [r1, #0]
 8106ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8106ea8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8106eac:	4691      	mov	r9, r2
 8106eae:	f023 0820 	bic.w	r8, r3, #32
 8106eb2:	bfbc      	itt	lt
 8106eb4:	4622      	movlt	r2, r4
 8106eb6:	4614      	movlt	r4, r2
 8106eb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8106ebc:	d005      	beq.n	8106eca <__cvt+0x42>
 8106ebe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8106ec2:	d100      	bne.n	8106ec6 <__cvt+0x3e>
 8106ec4:	3601      	adds	r6, #1
 8106ec6:	2102      	movs	r1, #2
 8106ec8:	e000      	b.n	8106ecc <__cvt+0x44>
 8106eca:	2103      	movs	r1, #3
 8106ecc:	ab03      	add	r3, sp, #12
 8106ece:	9301      	str	r3, [sp, #4]
 8106ed0:	ab02      	add	r3, sp, #8
 8106ed2:	9300      	str	r3, [sp, #0]
 8106ed4:	ec45 4b10 	vmov	d0, r4, r5
 8106ed8:	4653      	mov	r3, sl
 8106eda:	4632      	mov	r2, r6
 8106edc:	f001 ff10 	bl	8108d00 <_dtoa_r>
 8106ee0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8106ee4:	4607      	mov	r7, r0
 8106ee6:	d102      	bne.n	8106eee <__cvt+0x66>
 8106ee8:	f019 0f01 	tst.w	r9, #1
 8106eec:	d022      	beq.n	8106f34 <__cvt+0xac>
 8106eee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8106ef2:	eb07 0906 	add.w	r9, r7, r6
 8106ef6:	d110      	bne.n	8106f1a <__cvt+0x92>
 8106ef8:	783b      	ldrb	r3, [r7, #0]
 8106efa:	2b30      	cmp	r3, #48	; 0x30
 8106efc:	d10a      	bne.n	8106f14 <__cvt+0x8c>
 8106efe:	2200      	movs	r2, #0
 8106f00:	2300      	movs	r3, #0
 8106f02:	4620      	mov	r0, r4
 8106f04:	4629      	mov	r1, r5
 8106f06:	f7f9 fe67 	bl	8100bd8 <__aeabi_dcmpeq>
 8106f0a:	b918      	cbnz	r0, 8106f14 <__cvt+0x8c>
 8106f0c:	f1c6 0601 	rsb	r6, r6, #1
 8106f10:	f8ca 6000 	str.w	r6, [sl]
 8106f14:	f8da 3000 	ldr.w	r3, [sl]
 8106f18:	4499      	add	r9, r3
 8106f1a:	2200      	movs	r2, #0
 8106f1c:	2300      	movs	r3, #0
 8106f1e:	4620      	mov	r0, r4
 8106f20:	4629      	mov	r1, r5
 8106f22:	f7f9 fe59 	bl	8100bd8 <__aeabi_dcmpeq>
 8106f26:	b108      	cbz	r0, 8106f2c <__cvt+0xa4>
 8106f28:	f8cd 900c 	str.w	r9, [sp, #12]
 8106f2c:	2230      	movs	r2, #48	; 0x30
 8106f2e:	9b03      	ldr	r3, [sp, #12]
 8106f30:	454b      	cmp	r3, r9
 8106f32:	d307      	bcc.n	8106f44 <__cvt+0xbc>
 8106f34:	9b03      	ldr	r3, [sp, #12]
 8106f36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8106f38:	1bdb      	subs	r3, r3, r7
 8106f3a:	4638      	mov	r0, r7
 8106f3c:	6013      	str	r3, [r2, #0]
 8106f3e:	b004      	add	sp, #16
 8106f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106f44:	1c59      	adds	r1, r3, #1
 8106f46:	9103      	str	r1, [sp, #12]
 8106f48:	701a      	strb	r2, [r3, #0]
 8106f4a:	e7f0      	b.n	8106f2e <__cvt+0xa6>

08106f4c <__exponent>:
 8106f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8106f4e:	4603      	mov	r3, r0
 8106f50:	2900      	cmp	r1, #0
 8106f52:	bfb8      	it	lt
 8106f54:	4249      	neglt	r1, r1
 8106f56:	f803 2b02 	strb.w	r2, [r3], #2
 8106f5a:	bfb4      	ite	lt
 8106f5c:	222d      	movlt	r2, #45	; 0x2d
 8106f5e:	222b      	movge	r2, #43	; 0x2b
 8106f60:	2909      	cmp	r1, #9
 8106f62:	7042      	strb	r2, [r0, #1]
 8106f64:	dd2a      	ble.n	8106fbc <__exponent+0x70>
 8106f66:	f10d 0407 	add.w	r4, sp, #7
 8106f6a:	46a4      	mov	ip, r4
 8106f6c:	270a      	movs	r7, #10
 8106f6e:	46a6      	mov	lr, r4
 8106f70:	460a      	mov	r2, r1
 8106f72:	fb91 f6f7 	sdiv	r6, r1, r7
 8106f76:	fb07 1516 	mls	r5, r7, r6, r1
 8106f7a:	3530      	adds	r5, #48	; 0x30
 8106f7c:	2a63      	cmp	r2, #99	; 0x63
 8106f7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8106f82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8106f86:	4631      	mov	r1, r6
 8106f88:	dcf1      	bgt.n	8106f6e <__exponent+0x22>
 8106f8a:	3130      	adds	r1, #48	; 0x30
 8106f8c:	f1ae 0502 	sub.w	r5, lr, #2
 8106f90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8106f94:	1c44      	adds	r4, r0, #1
 8106f96:	4629      	mov	r1, r5
 8106f98:	4561      	cmp	r1, ip
 8106f9a:	d30a      	bcc.n	8106fb2 <__exponent+0x66>
 8106f9c:	f10d 0209 	add.w	r2, sp, #9
 8106fa0:	eba2 020e 	sub.w	r2, r2, lr
 8106fa4:	4565      	cmp	r5, ip
 8106fa6:	bf88      	it	hi
 8106fa8:	2200      	movhi	r2, #0
 8106faa:	4413      	add	r3, r2
 8106fac:	1a18      	subs	r0, r3, r0
 8106fae:	b003      	add	sp, #12
 8106fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8106fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8106fb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8106fba:	e7ed      	b.n	8106f98 <__exponent+0x4c>
 8106fbc:	2330      	movs	r3, #48	; 0x30
 8106fbe:	3130      	adds	r1, #48	; 0x30
 8106fc0:	7083      	strb	r3, [r0, #2]
 8106fc2:	70c1      	strb	r1, [r0, #3]
 8106fc4:	1d03      	adds	r3, r0, #4
 8106fc6:	e7f1      	b.n	8106fac <__exponent+0x60>

08106fc8 <_printf_float>:
 8106fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106fcc:	ed2d 8b02 	vpush	{d8}
 8106fd0:	b08d      	sub	sp, #52	; 0x34
 8106fd2:	460c      	mov	r4, r1
 8106fd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8106fd8:	4616      	mov	r6, r2
 8106fda:	461f      	mov	r7, r3
 8106fdc:	4605      	mov	r5, r0
 8106fde:	f003 f9a3 	bl	810a328 <_localeconv_r>
 8106fe2:	f8d0 a000 	ldr.w	sl, [r0]
 8106fe6:	4650      	mov	r0, sl
 8106fe8:	f7f9 f97a 	bl	81002e0 <strlen>
 8106fec:	2300      	movs	r3, #0
 8106fee:	930a      	str	r3, [sp, #40]	; 0x28
 8106ff0:	6823      	ldr	r3, [r4, #0]
 8106ff2:	9305      	str	r3, [sp, #20]
 8106ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8106ff8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8106ffc:	3307      	adds	r3, #7
 8106ffe:	f023 0307 	bic.w	r3, r3, #7
 8107002:	f103 0208 	add.w	r2, r3, #8
 8107006:	f8c8 2000 	str.w	r2, [r8]
 810700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810700e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8107012:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8107016:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810701a:	9307      	str	r3, [sp, #28]
 810701c:	f8cd 8018 	str.w	r8, [sp, #24]
 8107020:	ee08 0a10 	vmov	s16, r0
 8107024:	4b9f      	ldr	r3, [pc, #636]	; (81072a4 <_printf_float+0x2dc>)
 8107026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810702a:	f04f 32ff 	mov.w	r2, #4294967295
 810702e:	f7f9 fe05 	bl	8100c3c <__aeabi_dcmpun>
 8107032:	bb88      	cbnz	r0, 8107098 <_printf_float+0xd0>
 8107034:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107038:	4b9a      	ldr	r3, [pc, #616]	; (81072a4 <_printf_float+0x2dc>)
 810703a:	f04f 32ff 	mov.w	r2, #4294967295
 810703e:	f7f9 fddf 	bl	8100c00 <__aeabi_dcmple>
 8107042:	bb48      	cbnz	r0, 8107098 <_printf_float+0xd0>
 8107044:	2200      	movs	r2, #0
 8107046:	2300      	movs	r3, #0
 8107048:	4640      	mov	r0, r8
 810704a:	4649      	mov	r1, r9
 810704c:	f7f9 fdce 	bl	8100bec <__aeabi_dcmplt>
 8107050:	b110      	cbz	r0, 8107058 <_printf_float+0x90>
 8107052:	232d      	movs	r3, #45	; 0x2d
 8107054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107058:	4b93      	ldr	r3, [pc, #588]	; (81072a8 <_printf_float+0x2e0>)
 810705a:	4894      	ldr	r0, [pc, #592]	; (81072ac <_printf_float+0x2e4>)
 810705c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8107060:	bf94      	ite	ls
 8107062:	4698      	movls	r8, r3
 8107064:	4680      	movhi	r8, r0
 8107066:	2303      	movs	r3, #3
 8107068:	6123      	str	r3, [r4, #16]
 810706a:	9b05      	ldr	r3, [sp, #20]
 810706c:	f023 0204 	bic.w	r2, r3, #4
 8107070:	6022      	str	r2, [r4, #0]
 8107072:	f04f 0900 	mov.w	r9, #0
 8107076:	9700      	str	r7, [sp, #0]
 8107078:	4633      	mov	r3, r6
 810707a:	aa0b      	add	r2, sp, #44	; 0x2c
 810707c:	4621      	mov	r1, r4
 810707e:	4628      	mov	r0, r5
 8107080:	f000 f9d8 	bl	8107434 <_printf_common>
 8107084:	3001      	adds	r0, #1
 8107086:	f040 8090 	bne.w	81071aa <_printf_float+0x1e2>
 810708a:	f04f 30ff 	mov.w	r0, #4294967295
 810708e:	b00d      	add	sp, #52	; 0x34
 8107090:	ecbd 8b02 	vpop	{d8}
 8107094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107098:	4642      	mov	r2, r8
 810709a:	464b      	mov	r3, r9
 810709c:	4640      	mov	r0, r8
 810709e:	4649      	mov	r1, r9
 81070a0:	f7f9 fdcc 	bl	8100c3c <__aeabi_dcmpun>
 81070a4:	b140      	cbz	r0, 81070b8 <_printf_float+0xf0>
 81070a6:	464b      	mov	r3, r9
 81070a8:	2b00      	cmp	r3, #0
 81070aa:	bfbc      	itt	lt
 81070ac:	232d      	movlt	r3, #45	; 0x2d
 81070ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 81070b2:	487f      	ldr	r0, [pc, #508]	; (81072b0 <_printf_float+0x2e8>)
 81070b4:	4b7f      	ldr	r3, [pc, #508]	; (81072b4 <_printf_float+0x2ec>)
 81070b6:	e7d1      	b.n	810705c <_printf_float+0x94>
 81070b8:	6863      	ldr	r3, [r4, #4]
 81070ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 81070be:	9206      	str	r2, [sp, #24]
 81070c0:	1c5a      	adds	r2, r3, #1
 81070c2:	d13f      	bne.n	8107144 <_printf_float+0x17c>
 81070c4:	2306      	movs	r3, #6
 81070c6:	6063      	str	r3, [r4, #4]
 81070c8:	9b05      	ldr	r3, [sp, #20]
 81070ca:	6861      	ldr	r1, [r4, #4]
 81070cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81070d0:	2300      	movs	r3, #0
 81070d2:	9303      	str	r3, [sp, #12]
 81070d4:	ab0a      	add	r3, sp, #40	; 0x28
 81070d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 81070da:	ab09      	add	r3, sp, #36	; 0x24
 81070dc:	ec49 8b10 	vmov	d0, r8, r9
 81070e0:	9300      	str	r3, [sp, #0]
 81070e2:	6022      	str	r2, [r4, #0]
 81070e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 81070e8:	4628      	mov	r0, r5
 81070ea:	f7ff fecd 	bl	8106e88 <__cvt>
 81070ee:	9b06      	ldr	r3, [sp, #24]
 81070f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 81070f2:	2b47      	cmp	r3, #71	; 0x47
 81070f4:	4680      	mov	r8, r0
 81070f6:	d108      	bne.n	810710a <_printf_float+0x142>
 81070f8:	1cc8      	adds	r0, r1, #3
 81070fa:	db02      	blt.n	8107102 <_printf_float+0x13a>
 81070fc:	6863      	ldr	r3, [r4, #4]
 81070fe:	4299      	cmp	r1, r3
 8107100:	dd41      	ble.n	8107186 <_printf_float+0x1be>
 8107102:	f1ab 0b02 	sub.w	fp, fp, #2
 8107106:	fa5f fb8b 	uxtb.w	fp, fp
 810710a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810710e:	d820      	bhi.n	8107152 <_printf_float+0x18a>
 8107110:	3901      	subs	r1, #1
 8107112:	465a      	mov	r2, fp
 8107114:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8107118:	9109      	str	r1, [sp, #36]	; 0x24
 810711a:	f7ff ff17 	bl	8106f4c <__exponent>
 810711e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107120:	1813      	adds	r3, r2, r0
 8107122:	2a01      	cmp	r2, #1
 8107124:	4681      	mov	r9, r0
 8107126:	6123      	str	r3, [r4, #16]
 8107128:	dc02      	bgt.n	8107130 <_printf_float+0x168>
 810712a:	6822      	ldr	r2, [r4, #0]
 810712c:	07d2      	lsls	r2, r2, #31
 810712e:	d501      	bpl.n	8107134 <_printf_float+0x16c>
 8107130:	3301      	adds	r3, #1
 8107132:	6123      	str	r3, [r4, #16]
 8107134:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8107138:	2b00      	cmp	r3, #0
 810713a:	d09c      	beq.n	8107076 <_printf_float+0xae>
 810713c:	232d      	movs	r3, #45	; 0x2d
 810713e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107142:	e798      	b.n	8107076 <_printf_float+0xae>
 8107144:	9a06      	ldr	r2, [sp, #24]
 8107146:	2a47      	cmp	r2, #71	; 0x47
 8107148:	d1be      	bne.n	81070c8 <_printf_float+0x100>
 810714a:	2b00      	cmp	r3, #0
 810714c:	d1bc      	bne.n	81070c8 <_printf_float+0x100>
 810714e:	2301      	movs	r3, #1
 8107150:	e7b9      	b.n	81070c6 <_printf_float+0xfe>
 8107152:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8107156:	d118      	bne.n	810718a <_printf_float+0x1c2>
 8107158:	2900      	cmp	r1, #0
 810715a:	6863      	ldr	r3, [r4, #4]
 810715c:	dd0b      	ble.n	8107176 <_printf_float+0x1ae>
 810715e:	6121      	str	r1, [r4, #16]
 8107160:	b913      	cbnz	r3, 8107168 <_printf_float+0x1a0>
 8107162:	6822      	ldr	r2, [r4, #0]
 8107164:	07d0      	lsls	r0, r2, #31
 8107166:	d502      	bpl.n	810716e <_printf_float+0x1a6>
 8107168:	3301      	adds	r3, #1
 810716a:	440b      	add	r3, r1
 810716c:	6123      	str	r3, [r4, #16]
 810716e:	65a1      	str	r1, [r4, #88]	; 0x58
 8107170:	f04f 0900 	mov.w	r9, #0
 8107174:	e7de      	b.n	8107134 <_printf_float+0x16c>
 8107176:	b913      	cbnz	r3, 810717e <_printf_float+0x1b6>
 8107178:	6822      	ldr	r2, [r4, #0]
 810717a:	07d2      	lsls	r2, r2, #31
 810717c:	d501      	bpl.n	8107182 <_printf_float+0x1ba>
 810717e:	3302      	adds	r3, #2
 8107180:	e7f4      	b.n	810716c <_printf_float+0x1a4>
 8107182:	2301      	movs	r3, #1
 8107184:	e7f2      	b.n	810716c <_printf_float+0x1a4>
 8107186:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810718a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810718c:	4299      	cmp	r1, r3
 810718e:	db05      	blt.n	810719c <_printf_float+0x1d4>
 8107190:	6823      	ldr	r3, [r4, #0]
 8107192:	6121      	str	r1, [r4, #16]
 8107194:	07d8      	lsls	r0, r3, #31
 8107196:	d5ea      	bpl.n	810716e <_printf_float+0x1a6>
 8107198:	1c4b      	adds	r3, r1, #1
 810719a:	e7e7      	b.n	810716c <_printf_float+0x1a4>
 810719c:	2900      	cmp	r1, #0
 810719e:	bfd4      	ite	le
 81071a0:	f1c1 0202 	rsble	r2, r1, #2
 81071a4:	2201      	movgt	r2, #1
 81071a6:	4413      	add	r3, r2
 81071a8:	e7e0      	b.n	810716c <_printf_float+0x1a4>
 81071aa:	6823      	ldr	r3, [r4, #0]
 81071ac:	055a      	lsls	r2, r3, #21
 81071ae:	d407      	bmi.n	81071c0 <_printf_float+0x1f8>
 81071b0:	6923      	ldr	r3, [r4, #16]
 81071b2:	4642      	mov	r2, r8
 81071b4:	4631      	mov	r1, r6
 81071b6:	4628      	mov	r0, r5
 81071b8:	47b8      	blx	r7
 81071ba:	3001      	adds	r0, #1
 81071bc:	d12c      	bne.n	8107218 <_printf_float+0x250>
 81071be:	e764      	b.n	810708a <_printf_float+0xc2>
 81071c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81071c4:	f240 80e0 	bls.w	8107388 <_printf_float+0x3c0>
 81071c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81071cc:	2200      	movs	r2, #0
 81071ce:	2300      	movs	r3, #0
 81071d0:	f7f9 fd02 	bl	8100bd8 <__aeabi_dcmpeq>
 81071d4:	2800      	cmp	r0, #0
 81071d6:	d034      	beq.n	8107242 <_printf_float+0x27a>
 81071d8:	4a37      	ldr	r2, [pc, #220]	; (81072b8 <_printf_float+0x2f0>)
 81071da:	2301      	movs	r3, #1
 81071dc:	4631      	mov	r1, r6
 81071de:	4628      	mov	r0, r5
 81071e0:	47b8      	blx	r7
 81071e2:	3001      	adds	r0, #1
 81071e4:	f43f af51 	beq.w	810708a <_printf_float+0xc2>
 81071e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81071ec:	429a      	cmp	r2, r3
 81071ee:	db02      	blt.n	81071f6 <_printf_float+0x22e>
 81071f0:	6823      	ldr	r3, [r4, #0]
 81071f2:	07d8      	lsls	r0, r3, #31
 81071f4:	d510      	bpl.n	8107218 <_printf_float+0x250>
 81071f6:	ee18 3a10 	vmov	r3, s16
 81071fa:	4652      	mov	r2, sl
 81071fc:	4631      	mov	r1, r6
 81071fe:	4628      	mov	r0, r5
 8107200:	47b8      	blx	r7
 8107202:	3001      	adds	r0, #1
 8107204:	f43f af41 	beq.w	810708a <_printf_float+0xc2>
 8107208:	f04f 0800 	mov.w	r8, #0
 810720c:	f104 091a 	add.w	r9, r4, #26
 8107210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107212:	3b01      	subs	r3, #1
 8107214:	4543      	cmp	r3, r8
 8107216:	dc09      	bgt.n	810722c <_printf_float+0x264>
 8107218:	6823      	ldr	r3, [r4, #0]
 810721a:	079b      	lsls	r3, r3, #30
 810721c:	f100 8105 	bmi.w	810742a <_printf_float+0x462>
 8107220:	68e0      	ldr	r0, [r4, #12]
 8107222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107224:	4298      	cmp	r0, r3
 8107226:	bfb8      	it	lt
 8107228:	4618      	movlt	r0, r3
 810722a:	e730      	b.n	810708e <_printf_float+0xc6>
 810722c:	2301      	movs	r3, #1
 810722e:	464a      	mov	r2, r9
 8107230:	4631      	mov	r1, r6
 8107232:	4628      	mov	r0, r5
 8107234:	47b8      	blx	r7
 8107236:	3001      	adds	r0, #1
 8107238:	f43f af27 	beq.w	810708a <_printf_float+0xc2>
 810723c:	f108 0801 	add.w	r8, r8, #1
 8107240:	e7e6      	b.n	8107210 <_printf_float+0x248>
 8107242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107244:	2b00      	cmp	r3, #0
 8107246:	dc39      	bgt.n	81072bc <_printf_float+0x2f4>
 8107248:	4a1b      	ldr	r2, [pc, #108]	; (81072b8 <_printf_float+0x2f0>)
 810724a:	2301      	movs	r3, #1
 810724c:	4631      	mov	r1, r6
 810724e:	4628      	mov	r0, r5
 8107250:	47b8      	blx	r7
 8107252:	3001      	adds	r0, #1
 8107254:	f43f af19 	beq.w	810708a <_printf_float+0xc2>
 8107258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810725c:	4313      	orrs	r3, r2
 810725e:	d102      	bne.n	8107266 <_printf_float+0x29e>
 8107260:	6823      	ldr	r3, [r4, #0]
 8107262:	07d9      	lsls	r1, r3, #31
 8107264:	d5d8      	bpl.n	8107218 <_printf_float+0x250>
 8107266:	ee18 3a10 	vmov	r3, s16
 810726a:	4652      	mov	r2, sl
 810726c:	4631      	mov	r1, r6
 810726e:	4628      	mov	r0, r5
 8107270:	47b8      	blx	r7
 8107272:	3001      	adds	r0, #1
 8107274:	f43f af09 	beq.w	810708a <_printf_float+0xc2>
 8107278:	f04f 0900 	mov.w	r9, #0
 810727c:	f104 0a1a 	add.w	sl, r4, #26
 8107280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107282:	425b      	negs	r3, r3
 8107284:	454b      	cmp	r3, r9
 8107286:	dc01      	bgt.n	810728c <_printf_float+0x2c4>
 8107288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810728a:	e792      	b.n	81071b2 <_printf_float+0x1ea>
 810728c:	2301      	movs	r3, #1
 810728e:	4652      	mov	r2, sl
 8107290:	4631      	mov	r1, r6
 8107292:	4628      	mov	r0, r5
 8107294:	47b8      	blx	r7
 8107296:	3001      	adds	r0, #1
 8107298:	f43f aef7 	beq.w	810708a <_printf_float+0xc2>
 810729c:	f109 0901 	add.w	r9, r9, #1
 81072a0:	e7ee      	b.n	8107280 <_printf_float+0x2b8>
 81072a2:	bf00      	nop
 81072a4:	7fefffff 	.word	0x7fefffff
 81072a8:	0810bbe4 	.word	0x0810bbe4
 81072ac:	0810bbe8 	.word	0x0810bbe8
 81072b0:	0810bbf0 	.word	0x0810bbf0
 81072b4:	0810bbec 	.word	0x0810bbec
 81072b8:	0810bbf4 	.word	0x0810bbf4
 81072bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81072be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81072c0:	429a      	cmp	r2, r3
 81072c2:	bfa8      	it	ge
 81072c4:	461a      	movge	r2, r3
 81072c6:	2a00      	cmp	r2, #0
 81072c8:	4691      	mov	r9, r2
 81072ca:	dc37      	bgt.n	810733c <_printf_float+0x374>
 81072cc:	f04f 0b00 	mov.w	fp, #0
 81072d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81072d4:	f104 021a 	add.w	r2, r4, #26
 81072d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81072da:	9305      	str	r3, [sp, #20]
 81072dc:	eba3 0309 	sub.w	r3, r3, r9
 81072e0:	455b      	cmp	r3, fp
 81072e2:	dc33      	bgt.n	810734c <_printf_float+0x384>
 81072e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81072e8:	429a      	cmp	r2, r3
 81072ea:	db3b      	blt.n	8107364 <_printf_float+0x39c>
 81072ec:	6823      	ldr	r3, [r4, #0]
 81072ee:	07da      	lsls	r2, r3, #31
 81072f0:	d438      	bmi.n	8107364 <_printf_float+0x39c>
 81072f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81072f4:	9a05      	ldr	r2, [sp, #20]
 81072f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 81072f8:	1a9a      	subs	r2, r3, r2
 81072fa:	eba3 0901 	sub.w	r9, r3, r1
 81072fe:	4591      	cmp	r9, r2
 8107300:	bfa8      	it	ge
 8107302:	4691      	movge	r9, r2
 8107304:	f1b9 0f00 	cmp.w	r9, #0
 8107308:	dc35      	bgt.n	8107376 <_printf_float+0x3ae>
 810730a:	f04f 0800 	mov.w	r8, #0
 810730e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107312:	f104 0a1a 	add.w	sl, r4, #26
 8107316:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810731a:	1a9b      	subs	r3, r3, r2
 810731c:	eba3 0309 	sub.w	r3, r3, r9
 8107320:	4543      	cmp	r3, r8
 8107322:	f77f af79 	ble.w	8107218 <_printf_float+0x250>
 8107326:	2301      	movs	r3, #1
 8107328:	4652      	mov	r2, sl
 810732a:	4631      	mov	r1, r6
 810732c:	4628      	mov	r0, r5
 810732e:	47b8      	blx	r7
 8107330:	3001      	adds	r0, #1
 8107332:	f43f aeaa 	beq.w	810708a <_printf_float+0xc2>
 8107336:	f108 0801 	add.w	r8, r8, #1
 810733a:	e7ec      	b.n	8107316 <_printf_float+0x34e>
 810733c:	4613      	mov	r3, r2
 810733e:	4631      	mov	r1, r6
 8107340:	4642      	mov	r2, r8
 8107342:	4628      	mov	r0, r5
 8107344:	47b8      	blx	r7
 8107346:	3001      	adds	r0, #1
 8107348:	d1c0      	bne.n	81072cc <_printf_float+0x304>
 810734a:	e69e      	b.n	810708a <_printf_float+0xc2>
 810734c:	2301      	movs	r3, #1
 810734e:	4631      	mov	r1, r6
 8107350:	4628      	mov	r0, r5
 8107352:	9205      	str	r2, [sp, #20]
 8107354:	47b8      	blx	r7
 8107356:	3001      	adds	r0, #1
 8107358:	f43f ae97 	beq.w	810708a <_printf_float+0xc2>
 810735c:	9a05      	ldr	r2, [sp, #20]
 810735e:	f10b 0b01 	add.w	fp, fp, #1
 8107362:	e7b9      	b.n	81072d8 <_printf_float+0x310>
 8107364:	ee18 3a10 	vmov	r3, s16
 8107368:	4652      	mov	r2, sl
 810736a:	4631      	mov	r1, r6
 810736c:	4628      	mov	r0, r5
 810736e:	47b8      	blx	r7
 8107370:	3001      	adds	r0, #1
 8107372:	d1be      	bne.n	81072f2 <_printf_float+0x32a>
 8107374:	e689      	b.n	810708a <_printf_float+0xc2>
 8107376:	9a05      	ldr	r2, [sp, #20]
 8107378:	464b      	mov	r3, r9
 810737a:	4442      	add	r2, r8
 810737c:	4631      	mov	r1, r6
 810737e:	4628      	mov	r0, r5
 8107380:	47b8      	blx	r7
 8107382:	3001      	adds	r0, #1
 8107384:	d1c1      	bne.n	810730a <_printf_float+0x342>
 8107386:	e680      	b.n	810708a <_printf_float+0xc2>
 8107388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810738a:	2a01      	cmp	r2, #1
 810738c:	dc01      	bgt.n	8107392 <_printf_float+0x3ca>
 810738e:	07db      	lsls	r3, r3, #31
 8107390:	d538      	bpl.n	8107404 <_printf_float+0x43c>
 8107392:	2301      	movs	r3, #1
 8107394:	4642      	mov	r2, r8
 8107396:	4631      	mov	r1, r6
 8107398:	4628      	mov	r0, r5
 810739a:	47b8      	blx	r7
 810739c:	3001      	adds	r0, #1
 810739e:	f43f ae74 	beq.w	810708a <_printf_float+0xc2>
 81073a2:	ee18 3a10 	vmov	r3, s16
 81073a6:	4652      	mov	r2, sl
 81073a8:	4631      	mov	r1, r6
 81073aa:	4628      	mov	r0, r5
 81073ac:	47b8      	blx	r7
 81073ae:	3001      	adds	r0, #1
 81073b0:	f43f ae6b 	beq.w	810708a <_printf_float+0xc2>
 81073b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81073b8:	2200      	movs	r2, #0
 81073ba:	2300      	movs	r3, #0
 81073bc:	f7f9 fc0c 	bl	8100bd8 <__aeabi_dcmpeq>
 81073c0:	b9d8      	cbnz	r0, 81073fa <_printf_float+0x432>
 81073c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81073c4:	f108 0201 	add.w	r2, r8, #1
 81073c8:	3b01      	subs	r3, #1
 81073ca:	4631      	mov	r1, r6
 81073cc:	4628      	mov	r0, r5
 81073ce:	47b8      	blx	r7
 81073d0:	3001      	adds	r0, #1
 81073d2:	d10e      	bne.n	81073f2 <_printf_float+0x42a>
 81073d4:	e659      	b.n	810708a <_printf_float+0xc2>
 81073d6:	2301      	movs	r3, #1
 81073d8:	4652      	mov	r2, sl
 81073da:	4631      	mov	r1, r6
 81073dc:	4628      	mov	r0, r5
 81073de:	47b8      	blx	r7
 81073e0:	3001      	adds	r0, #1
 81073e2:	f43f ae52 	beq.w	810708a <_printf_float+0xc2>
 81073e6:	f108 0801 	add.w	r8, r8, #1
 81073ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81073ec:	3b01      	subs	r3, #1
 81073ee:	4543      	cmp	r3, r8
 81073f0:	dcf1      	bgt.n	81073d6 <_printf_float+0x40e>
 81073f2:	464b      	mov	r3, r9
 81073f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 81073f8:	e6dc      	b.n	81071b4 <_printf_float+0x1ec>
 81073fa:	f04f 0800 	mov.w	r8, #0
 81073fe:	f104 0a1a 	add.w	sl, r4, #26
 8107402:	e7f2      	b.n	81073ea <_printf_float+0x422>
 8107404:	2301      	movs	r3, #1
 8107406:	4642      	mov	r2, r8
 8107408:	e7df      	b.n	81073ca <_printf_float+0x402>
 810740a:	2301      	movs	r3, #1
 810740c:	464a      	mov	r2, r9
 810740e:	4631      	mov	r1, r6
 8107410:	4628      	mov	r0, r5
 8107412:	47b8      	blx	r7
 8107414:	3001      	adds	r0, #1
 8107416:	f43f ae38 	beq.w	810708a <_printf_float+0xc2>
 810741a:	f108 0801 	add.w	r8, r8, #1
 810741e:	68e3      	ldr	r3, [r4, #12]
 8107420:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8107422:	1a5b      	subs	r3, r3, r1
 8107424:	4543      	cmp	r3, r8
 8107426:	dcf0      	bgt.n	810740a <_printf_float+0x442>
 8107428:	e6fa      	b.n	8107220 <_printf_float+0x258>
 810742a:	f04f 0800 	mov.w	r8, #0
 810742e:	f104 0919 	add.w	r9, r4, #25
 8107432:	e7f4      	b.n	810741e <_printf_float+0x456>

08107434 <_printf_common>:
 8107434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107438:	4616      	mov	r6, r2
 810743a:	4699      	mov	r9, r3
 810743c:	688a      	ldr	r2, [r1, #8]
 810743e:	690b      	ldr	r3, [r1, #16]
 8107440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8107444:	4293      	cmp	r3, r2
 8107446:	bfb8      	it	lt
 8107448:	4613      	movlt	r3, r2
 810744a:	6033      	str	r3, [r6, #0]
 810744c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8107450:	4607      	mov	r7, r0
 8107452:	460c      	mov	r4, r1
 8107454:	b10a      	cbz	r2, 810745a <_printf_common+0x26>
 8107456:	3301      	adds	r3, #1
 8107458:	6033      	str	r3, [r6, #0]
 810745a:	6823      	ldr	r3, [r4, #0]
 810745c:	0699      	lsls	r1, r3, #26
 810745e:	bf42      	ittt	mi
 8107460:	6833      	ldrmi	r3, [r6, #0]
 8107462:	3302      	addmi	r3, #2
 8107464:	6033      	strmi	r3, [r6, #0]
 8107466:	6825      	ldr	r5, [r4, #0]
 8107468:	f015 0506 	ands.w	r5, r5, #6
 810746c:	d106      	bne.n	810747c <_printf_common+0x48>
 810746e:	f104 0a19 	add.w	sl, r4, #25
 8107472:	68e3      	ldr	r3, [r4, #12]
 8107474:	6832      	ldr	r2, [r6, #0]
 8107476:	1a9b      	subs	r3, r3, r2
 8107478:	42ab      	cmp	r3, r5
 810747a:	dc26      	bgt.n	81074ca <_printf_common+0x96>
 810747c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8107480:	1e13      	subs	r3, r2, #0
 8107482:	6822      	ldr	r2, [r4, #0]
 8107484:	bf18      	it	ne
 8107486:	2301      	movne	r3, #1
 8107488:	0692      	lsls	r2, r2, #26
 810748a:	d42b      	bmi.n	81074e4 <_printf_common+0xb0>
 810748c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8107490:	4649      	mov	r1, r9
 8107492:	4638      	mov	r0, r7
 8107494:	47c0      	blx	r8
 8107496:	3001      	adds	r0, #1
 8107498:	d01e      	beq.n	81074d8 <_printf_common+0xa4>
 810749a:	6823      	ldr	r3, [r4, #0]
 810749c:	68e5      	ldr	r5, [r4, #12]
 810749e:	6832      	ldr	r2, [r6, #0]
 81074a0:	f003 0306 	and.w	r3, r3, #6
 81074a4:	2b04      	cmp	r3, #4
 81074a6:	bf08      	it	eq
 81074a8:	1aad      	subeq	r5, r5, r2
 81074aa:	68a3      	ldr	r3, [r4, #8]
 81074ac:	6922      	ldr	r2, [r4, #16]
 81074ae:	bf0c      	ite	eq
 81074b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81074b4:	2500      	movne	r5, #0
 81074b6:	4293      	cmp	r3, r2
 81074b8:	bfc4      	itt	gt
 81074ba:	1a9b      	subgt	r3, r3, r2
 81074bc:	18ed      	addgt	r5, r5, r3
 81074be:	2600      	movs	r6, #0
 81074c0:	341a      	adds	r4, #26
 81074c2:	42b5      	cmp	r5, r6
 81074c4:	d11a      	bne.n	81074fc <_printf_common+0xc8>
 81074c6:	2000      	movs	r0, #0
 81074c8:	e008      	b.n	81074dc <_printf_common+0xa8>
 81074ca:	2301      	movs	r3, #1
 81074cc:	4652      	mov	r2, sl
 81074ce:	4649      	mov	r1, r9
 81074d0:	4638      	mov	r0, r7
 81074d2:	47c0      	blx	r8
 81074d4:	3001      	adds	r0, #1
 81074d6:	d103      	bne.n	81074e0 <_printf_common+0xac>
 81074d8:	f04f 30ff 	mov.w	r0, #4294967295
 81074dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81074e0:	3501      	adds	r5, #1
 81074e2:	e7c6      	b.n	8107472 <_printf_common+0x3e>
 81074e4:	18e1      	adds	r1, r4, r3
 81074e6:	1c5a      	adds	r2, r3, #1
 81074e8:	2030      	movs	r0, #48	; 0x30
 81074ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81074ee:	4422      	add	r2, r4
 81074f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81074f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81074f8:	3302      	adds	r3, #2
 81074fa:	e7c7      	b.n	810748c <_printf_common+0x58>
 81074fc:	2301      	movs	r3, #1
 81074fe:	4622      	mov	r2, r4
 8107500:	4649      	mov	r1, r9
 8107502:	4638      	mov	r0, r7
 8107504:	47c0      	blx	r8
 8107506:	3001      	adds	r0, #1
 8107508:	d0e6      	beq.n	81074d8 <_printf_common+0xa4>
 810750a:	3601      	adds	r6, #1
 810750c:	e7d9      	b.n	81074c2 <_printf_common+0x8e>
	...

08107510 <_printf_i>:
 8107510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107514:	7e0f      	ldrb	r7, [r1, #24]
 8107516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8107518:	2f78      	cmp	r7, #120	; 0x78
 810751a:	4691      	mov	r9, r2
 810751c:	4680      	mov	r8, r0
 810751e:	460c      	mov	r4, r1
 8107520:	469a      	mov	sl, r3
 8107522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8107526:	d807      	bhi.n	8107538 <_printf_i+0x28>
 8107528:	2f62      	cmp	r7, #98	; 0x62
 810752a:	d80a      	bhi.n	8107542 <_printf_i+0x32>
 810752c:	2f00      	cmp	r7, #0
 810752e:	f000 80d8 	beq.w	81076e2 <_printf_i+0x1d2>
 8107532:	2f58      	cmp	r7, #88	; 0x58
 8107534:	f000 80a3 	beq.w	810767e <_printf_i+0x16e>
 8107538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810753c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8107540:	e03a      	b.n	81075b8 <_printf_i+0xa8>
 8107542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8107546:	2b15      	cmp	r3, #21
 8107548:	d8f6      	bhi.n	8107538 <_printf_i+0x28>
 810754a:	a101      	add	r1, pc, #4	; (adr r1, 8107550 <_printf_i+0x40>)
 810754c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8107550:	081075a9 	.word	0x081075a9
 8107554:	081075bd 	.word	0x081075bd
 8107558:	08107539 	.word	0x08107539
 810755c:	08107539 	.word	0x08107539
 8107560:	08107539 	.word	0x08107539
 8107564:	08107539 	.word	0x08107539
 8107568:	081075bd 	.word	0x081075bd
 810756c:	08107539 	.word	0x08107539
 8107570:	08107539 	.word	0x08107539
 8107574:	08107539 	.word	0x08107539
 8107578:	08107539 	.word	0x08107539
 810757c:	081076c9 	.word	0x081076c9
 8107580:	081075ed 	.word	0x081075ed
 8107584:	081076ab 	.word	0x081076ab
 8107588:	08107539 	.word	0x08107539
 810758c:	08107539 	.word	0x08107539
 8107590:	081076eb 	.word	0x081076eb
 8107594:	08107539 	.word	0x08107539
 8107598:	081075ed 	.word	0x081075ed
 810759c:	08107539 	.word	0x08107539
 81075a0:	08107539 	.word	0x08107539
 81075a4:	081076b3 	.word	0x081076b3
 81075a8:	682b      	ldr	r3, [r5, #0]
 81075aa:	1d1a      	adds	r2, r3, #4
 81075ac:	681b      	ldr	r3, [r3, #0]
 81075ae:	602a      	str	r2, [r5, #0]
 81075b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81075b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81075b8:	2301      	movs	r3, #1
 81075ba:	e0a3      	b.n	8107704 <_printf_i+0x1f4>
 81075bc:	6820      	ldr	r0, [r4, #0]
 81075be:	6829      	ldr	r1, [r5, #0]
 81075c0:	0606      	lsls	r6, r0, #24
 81075c2:	f101 0304 	add.w	r3, r1, #4
 81075c6:	d50a      	bpl.n	81075de <_printf_i+0xce>
 81075c8:	680e      	ldr	r6, [r1, #0]
 81075ca:	602b      	str	r3, [r5, #0]
 81075cc:	2e00      	cmp	r6, #0
 81075ce:	da03      	bge.n	81075d8 <_printf_i+0xc8>
 81075d0:	232d      	movs	r3, #45	; 0x2d
 81075d2:	4276      	negs	r6, r6
 81075d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81075d8:	485e      	ldr	r0, [pc, #376]	; (8107754 <_printf_i+0x244>)
 81075da:	230a      	movs	r3, #10
 81075dc:	e019      	b.n	8107612 <_printf_i+0x102>
 81075de:	680e      	ldr	r6, [r1, #0]
 81075e0:	602b      	str	r3, [r5, #0]
 81075e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 81075e6:	bf18      	it	ne
 81075e8:	b236      	sxthne	r6, r6
 81075ea:	e7ef      	b.n	81075cc <_printf_i+0xbc>
 81075ec:	682b      	ldr	r3, [r5, #0]
 81075ee:	6820      	ldr	r0, [r4, #0]
 81075f0:	1d19      	adds	r1, r3, #4
 81075f2:	6029      	str	r1, [r5, #0]
 81075f4:	0601      	lsls	r1, r0, #24
 81075f6:	d501      	bpl.n	81075fc <_printf_i+0xec>
 81075f8:	681e      	ldr	r6, [r3, #0]
 81075fa:	e002      	b.n	8107602 <_printf_i+0xf2>
 81075fc:	0646      	lsls	r6, r0, #25
 81075fe:	d5fb      	bpl.n	81075f8 <_printf_i+0xe8>
 8107600:	881e      	ldrh	r6, [r3, #0]
 8107602:	4854      	ldr	r0, [pc, #336]	; (8107754 <_printf_i+0x244>)
 8107604:	2f6f      	cmp	r7, #111	; 0x6f
 8107606:	bf0c      	ite	eq
 8107608:	2308      	moveq	r3, #8
 810760a:	230a      	movne	r3, #10
 810760c:	2100      	movs	r1, #0
 810760e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8107612:	6865      	ldr	r5, [r4, #4]
 8107614:	60a5      	str	r5, [r4, #8]
 8107616:	2d00      	cmp	r5, #0
 8107618:	bfa2      	ittt	ge
 810761a:	6821      	ldrge	r1, [r4, #0]
 810761c:	f021 0104 	bicge.w	r1, r1, #4
 8107620:	6021      	strge	r1, [r4, #0]
 8107622:	b90e      	cbnz	r6, 8107628 <_printf_i+0x118>
 8107624:	2d00      	cmp	r5, #0
 8107626:	d04d      	beq.n	81076c4 <_printf_i+0x1b4>
 8107628:	4615      	mov	r5, r2
 810762a:	fbb6 f1f3 	udiv	r1, r6, r3
 810762e:	fb03 6711 	mls	r7, r3, r1, r6
 8107632:	5dc7      	ldrb	r7, [r0, r7]
 8107634:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8107638:	4637      	mov	r7, r6
 810763a:	42bb      	cmp	r3, r7
 810763c:	460e      	mov	r6, r1
 810763e:	d9f4      	bls.n	810762a <_printf_i+0x11a>
 8107640:	2b08      	cmp	r3, #8
 8107642:	d10b      	bne.n	810765c <_printf_i+0x14c>
 8107644:	6823      	ldr	r3, [r4, #0]
 8107646:	07de      	lsls	r6, r3, #31
 8107648:	d508      	bpl.n	810765c <_printf_i+0x14c>
 810764a:	6923      	ldr	r3, [r4, #16]
 810764c:	6861      	ldr	r1, [r4, #4]
 810764e:	4299      	cmp	r1, r3
 8107650:	bfde      	ittt	le
 8107652:	2330      	movle	r3, #48	; 0x30
 8107654:	f805 3c01 	strble.w	r3, [r5, #-1]
 8107658:	f105 35ff 	addle.w	r5, r5, #4294967295
 810765c:	1b52      	subs	r2, r2, r5
 810765e:	6122      	str	r2, [r4, #16]
 8107660:	f8cd a000 	str.w	sl, [sp]
 8107664:	464b      	mov	r3, r9
 8107666:	aa03      	add	r2, sp, #12
 8107668:	4621      	mov	r1, r4
 810766a:	4640      	mov	r0, r8
 810766c:	f7ff fee2 	bl	8107434 <_printf_common>
 8107670:	3001      	adds	r0, #1
 8107672:	d14c      	bne.n	810770e <_printf_i+0x1fe>
 8107674:	f04f 30ff 	mov.w	r0, #4294967295
 8107678:	b004      	add	sp, #16
 810767a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810767e:	4835      	ldr	r0, [pc, #212]	; (8107754 <_printf_i+0x244>)
 8107680:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8107684:	6829      	ldr	r1, [r5, #0]
 8107686:	6823      	ldr	r3, [r4, #0]
 8107688:	f851 6b04 	ldr.w	r6, [r1], #4
 810768c:	6029      	str	r1, [r5, #0]
 810768e:	061d      	lsls	r5, r3, #24
 8107690:	d514      	bpl.n	81076bc <_printf_i+0x1ac>
 8107692:	07df      	lsls	r7, r3, #31
 8107694:	bf44      	itt	mi
 8107696:	f043 0320 	orrmi.w	r3, r3, #32
 810769a:	6023      	strmi	r3, [r4, #0]
 810769c:	b91e      	cbnz	r6, 81076a6 <_printf_i+0x196>
 810769e:	6823      	ldr	r3, [r4, #0]
 81076a0:	f023 0320 	bic.w	r3, r3, #32
 81076a4:	6023      	str	r3, [r4, #0]
 81076a6:	2310      	movs	r3, #16
 81076a8:	e7b0      	b.n	810760c <_printf_i+0xfc>
 81076aa:	6823      	ldr	r3, [r4, #0]
 81076ac:	f043 0320 	orr.w	r3, r3, #32
 81076b0:	6023      	str	r3, [r4, #0]
 81076b2:	2378      	movs	r3, #120	; 0x78
 81076b4:	4828      	ldr	r0, [pc, #160]	; (8107758 <_printf_i+0x248>)
 81076b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81076ba:	e7e3      	b.n	8107684 <_printf_i+0x174>
 81076bc:	0659      	lsls	r1, r3, #25
 81076be:	bf48      	it	mi
 81076c0:	b2b6      	uxthmi	r6, r6
 81076c2:	e7e6      	b.n	8107692 <_printf_i+0x182>
 81076c4:	4615      	mov	r5, r2
 81076c6:	e7bb      	b.n	8107640 <_printf_i+0x130>
 81076c8:	682b      	ldr	r3, [r5, #0]
 81076ca:	6826      	ldr	r6, [r4, #0]
 81076cc:	6961      	ldr	r1, [r4, #20]
 81076ce:	1d18      	adds	r0, r3, #4
 81076d0:	6028      	str	r0, [r5, #0]
 81076d2:	0635      	lsls	r5, r6, #24
 81076d4:	681b      	ldr	r3, [r3, #0]
 81076d6:	d501      	bpl.n	81076dc <_printf_i+0x1cc>
 81076d8:	6019      	str	r1, [r3, #0]
 81076da:	e002      	b.n	81076e2 <_printf_i+0x1d2>
 81076dc:	0670      	lsls	r0, r6, #25
 81076de:	d5fb      	bpl.n	81076d8 <_printf_i+0x1c8>
 81076e0:	8019      	strh	r1, [r3, #0]
 81076e2:	2300      	movs	r3, #0
 81076e4:	6123      	str	r3, [r4, #16]
 81076e6:	4615      	mov	r5, r2
 81076e8:	e7ba      	b.n	8107660 <_printf_i+0x150>
 81076ea:	682b      	ldr	r3, [r5, #0]
 81076ec:	1d1a      	adds	r2, r3, #4
 81076ee:	602a      	str	r2, [r5, #0]
 81076f0:	681d      	ldr	r5, [r3, #0]
 81076f2:	6862      	ldr	r2, [r4, #4]
 81076f4:	2100      	movs	r1, #0
 81076f6:	4628      	mov	r0, r5
 81076f8:	f7f8 fdfa 	bl	81002f0 <memchr>
 81076fc:	b108      	cbz	r0, 8107702 <_printf_i+0x1f2>
 81076fe:	1b40      	subs	r0, r0, r5
 8107700:	6060      	str	r0, [r4, #4]
 8107702:	6863      	ldr	r3, [r4, #4]
 8107704:	6123      	str	r3, [r4, #16]
 8107706:	2300      	movs	r3, #0
 8107708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810770c:	e7a8      	b.n	8107660 <_printf_i+0x150>
 810770e:	6923      	ldr	r3, [r4, #16]
 8107710:	462a      	mov	r2, r5
 8107712:	4649      	mov	r1, r9
 8107714:	4640      	mov	r0, r8
 8107716:	47d0      	blx	sl
 8107718:	3001      	adds	r0, #1
 810771a:	d0ab      	beq.n	8107674 <_printf_i+0x164>
 810771c:	6823      	ldr	r3, [r4, #0]
 810771e:	079b      	lsls	r3, r3, #30
 8107720:	d413      	bmi.n	810774a <_printf_i+0x23a>
 8107722:	68e0      	ldr	r0, [r4, #12]
 8107724:	9b03      	ldr	r3, [sp, #12]
 8107726:	4298      	cmp	r0, r3
 8107728:	bfb8      	it	lt
 810772a:	4618      	movlt	r0, r3
 810772c:	e7a4      	b.n	8107678 <_printf_i+0x168>
 810772e:	2301      	movs	r3, #1
 8107730:	4632      	mov	r2, r6
 8107732:	4649      	mov	r1, r9
 8107734:	4640      	mov	r0, r8
 8107736:	47d0      	blx	sl
 8107738:	3001      	adds	r0, #1
 810773a:	d09b      	beq.n	8107674 <_printf_i+0x164>
 810773c:	3501      	adds	r5, #1
 810773e:	68e3      	ldr	r3, [r4, #12]
 8107740:	9903      	ldr	r1, [sp, #12]
 8107742:	1a5b      	subs	r3, r3, r1
 8107744:	42ab      	cmp	r3, r5
 8107746:	dcf2      	bgt.n	810772e <_printf_i+0x21e>
 8107748:	e7eb      	b.n	8107722 <_printf_i+0x212>
 810774a:	2500      	movs	r5, #0
 810774c:	f104 0619 	add.w	r6, r4, #25
 8107750:	e7f5      	b.n	810773e <_printf_i+0x22e>
 8107752:	bf00      	nop
 8107754:	0810bbf6 	.word	0x0810bbf6
 8107758:	0810bc07 	.word	0x0810bc07

0810775c <_scanf_float>:
 810775c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107760:	b087      	sub	sp, #28
 8107762:	4617      	mov	r7, r2
 8107764:	9303      	str	r3, [sp, #12]
 8107766:	688b      	ldr	r3, [r1, #8]
 8107768:	1e5a      	subs	r2, r3, #1
 810776a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810776e:	bf83      	ittte	hi
 8107770:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8107774:	195b      	addhi	r3, r3, r5
 8107776:	9302      	strhi	r3, [sp, #8]
 8107778:	2300      	movls	r3, #0
 810777a:	bf86      	itte	hi
 810777c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8107780:	608b      	strhi	r3, [r1, #8]
 8107782:	9302      	strls	r3, [sp, #8]
 8107784:	680b      	ldr	r3, [r1, #0]
 8107786:	468b      	mov	fp, r1
 8107788:	2500      	movs	r5, #0
 810778a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810778e:	f84b 3b1c 	str.w	r3, [fp], #28
 8107792:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8107796:	4680      	mov	r8, r0
 8107798:	460c      	mov	r4, r1
 810779a:	465e      	mov	r6, fp
 810779c:	46aa      	mov	sl, r5
 810779e:	46a9      	mov	r9, r5
 81077a0:	9501      	str	r5, [sp, #4]
 81077a2:	68a2      	ldr	r2, [r4, #8]
 81077a4:	b152      	cbz	r2, 81077bc <_scanf_float+0x60>
 81077a6:	683b      	ldr	r3, [r7, #0]
 81077a8:	781b      	ldrb	r3, [r3, #0]
 81077aa:	2b4e      	cmp	r3, #78	; 0x4e
 81077ac:	d864      	bhi.n	8107878 <_scanf_float+0x11c>
 81077ae:	2b40      	cmp	r3, #64	; 0x40
 81077b0:	d83c      	bhi.n	810782c <_scanf_float+0xd0>
 81077b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 81077b6:	b2c8      	uxtb	r0, r1
 81077b8:	280e      	cmp	r0, #14
 81077ba:	d93a      	bls.n	8107832 <_scanf_float+0xd6>
 81077bc:	f1b9 0f00 	cmp.w	r9, #0
 81077c0:	d003      	beq.n	81077ca <_scanf_float+0x6e>
 81077c2:	6823      	ldr	r3, [r4, #0]
 81077c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81077c8:	6023      	str	r3, [r4, #0]
 81077ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 81077ce:	f1ba 0f01 	cmp.w	sl, #1
 81077d2:	f200 8113 	bhi.w	81079fc <_scanf_float+0x2a0>
 81077d6:	455e      	cmp	r6, fp
 81077d8:	f200 8105 	bhi.w	81079e6 <_scanf_float+0x28a>
 81077dc:	2501      	movs	r5, #1
 81077de:	4628      	mov	r0, r5
 81077e0:	b007      	add	sp, #28
 81077e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81077e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 81077ea:	2a0d      	cmp	r2, #13
 81077ec:	d8e6      	bhi.n	81077bc <_scanf_float+0x60>
 81077ee:	a101      	add	r1, pc, #4	; (adr r1, 81077f4 <_scanf_float+0x98>)
 81077f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 81077f4:	08107933 	.word	0x08107933
 81077f8:	081077bd 	.word	0x081077bd
 81077fc:	081077bd 	.word	0x081077bd
 8107800:	081077bd 	.word	0x081077bd
 8107804:	08107993 	.word	0x08107993
 8107808:	0810796b 	.word	0x0810796b
 810780c:	081077bd 	.word	0x081077bd
 8107810:	081077bd 	.word	0x081077bd
 8107814:	08107941 	.word	0x08107941
 8107818:	081077bd 	.word	0x081077bd
 810781c:	081077bd 	.word	0x081077bd
 8107820:	081077bd 	.word	0x081077bd
 8107824:	081077bd 	.word	0x081077bd
 8107828:	081078f9 	.word	0x081078f9
 810782c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8107830:	e7db      	b.n	81077ea <_scanf_float+0x8e>
 8107832:	290e      	cmp	r1, #14
 8107834:	d8c2      	bhi.n	81077bc <_scanf_float+0x60>
 8107836:	a001      	add	r0, pc, #4	; (adr r0, 810783c <_scanf_float+0xe0>)
 8107838:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810783c:	081078eb 	.word	0x081078eb
 8107840:	081077bd 	.word	0x081077bd
 8107844:	081078eb 	.word	0x081078eb
 8107848:	0810797f 	.word	0x0810797f
 810784c:	081077bd 	.word	0x081077bd
 8107850:	08107899 	.word	0x08107899
 8107854:	081078d5 	.word	0x081078d5
 8107858:	081078d5 	.word	0x081078d5
 810785c:	081078d5 	.word	0x081078d5
 8107860:	081078d5 	.word	0x081078d5
 8107864:	081078d5 	.word	0x081078d5
 8107868:	081078d5 	.word	0x081078d5
 810786c:	081078d5 	.word	0x081078d5
 8107870:	081078d5 	.word	0x081078d5
 8107874:	081078d5 	.word	0x081078d5
 8107878:	2b6e      	cmp	r3, #110	; 0x6e
 810787a:	d809      	bhi.n	8107890 <_scanf_float+0x134>
 810787c:	2b60      	cmp	r3, #96	; 0x60
 810787e:	d8b2      	bhi.n	81077e6 <_scanf_float+0x8a>
 8107880:	2b54      	cmp	r3, #84	; 0x54
 8107882:	d077      	beq.n	8107974 <_scanf_float+0x218>
 8107884:	2b59      	cmp	r3, #89	; 0x59
 8107886:	d199      	bne.n	81077bc <_scanf_float+0x60>
 8107888:	2d07      	cmp	r5, #7
 810788a:	d197      	bne.n	81077bc <_scanf_float+0x60>
 810788c:	2508      	movs	r5, #8
 810788e:	e029      	b.n	81078e4 <_scanf_float+0x188>
 8107890:	2b74      	cmp	r3, #116	; 0x74
 8107892:	d06f      	beq.n	8107974 <_scanf_float+0x218>
 8107894:	2b79      	cmp	r3, #121	; 0x79
 8107896:	e7f6      	b.n	8107886 <_scanf_float+0x12a>
 8107898:	6821      	ldr	r1, [r4, #0]
 810789a:	05c8      	lsls	r0, r1, #23
 810789c:	d51a      	bpl.n	81078d4 <_scanf_float+0x178>
 810789e:	9b02      	ldr	r3, [sp, #8]
 81078a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 81078a4:	6021      	str	r1, [r4, #0]
 81078a6:	f109 0901 	add.w	r9, r9, #1
 81078aa:	b11b      	cbz	r3, 81078b4 <_scanf_float+0x158>
 81078ac:	3b01      	subs	r3, #1
 81078ae:	3201      	adds	r2, #1
 81078b0:	9302      	str	r3, [sp, #8]
 81078b2:	60a2      	str	r2, [r4, #8]
 81078b4:	68a3      	ldr	r3, [r4, #8]
 81078b6:	3b01      	subs	r3, #1
 81078b8:	60a3      	str	r3, [r4, #8]
 81078ba:	6923      	ldr	r3, [r4, #16]
 81078bc:	3301      	adds	r3, #1
 81078be:	6123      	str	r3, [r4, #16]
 81078c0:	687b      	ldr	r3, [r7, #4]
 81078c2:	3b01      	subs	r3, #1
 81078c4:	2b00      	cmp	r3, #0
 81078c6:	607b      	str	r3, [r7, #4]
 81078c8:	f340 8084 	ble.w	81079d4 <_scanf_float+0x278>
 81078cc:	683b      	ldr	r3, [r7, #0]
 81078ce:	3301      	adds	r3, #1
 81078d0:	603b      	str	r3, [r7, #0]
 81078d2:	e766      	b.n	81077a2 <_scanf_float+0x46>
 81078d4:	eb1a 0f05 	cmn.w	sl, r5
 81078d8:	f47f af70 	bne.w	81077bc <_scanf_float+0x60>
 81078dc:	6822      	ldr	r2, [r4, #0]
 81078de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 81078e2:	6022      	str	r2, [r4, #0]
 81078e4:	f806 3b01 	strb.w	r3, [r6], #1
 81078e8:	e7e4      	b.n	81078b4 <_scanf_float+0x158>
 81078ea:	6822      	ldr	r2, [r4, #0]
 81078ec:	0610      	lsls	r0, r2, #24
 81078ee:	f57f af65 	bpl.w	81077bc <_scanf_float+0x60>
 81078f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81078f6:	e7f4      	b.n	81078e2 <_scanf_float+0x186>
 81078f8:	f1ba 0f00 	cmp.w	sl, #0
 81078fc:	d10e      	bne.n	810791c <_scanf_float+0x1c0>
 81078fe:	f1b9 0f00 	cmp.w	r9, #0
 8107902:	d10e      	bne.n	8107922 <_scanf_float+0x1c6>
 8107904:	6822      	ldr	r2, [r4, #0]
 8107906:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810790a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810790e:	d108      	bne.n	8107922 <_scanf_float+0x1c6>
 8107910:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8107914:	6022      	str	r2, [r4, #0]
 8107916:	f04f 0a01 	mov.w	sl, #1
 810791a:	e7e3      	b.n	81078e4 <_scanf_float+0x188>
 810791c:	f1ba 0f02 	cmp.w	sl, #2
 8107920:	d055      	beq.n	81079ce <_scanf_float+0x272>
 8107922:	2d01      	cmp	r5, #1
 8107924:	d002      	beq.n	810792c <_scanf_float+0x1d0>
 8107926:	2d04      	cmp	r5, #4
 8107928:	f47f af48 	bne.w	81077bc <_scanf_float+0x60>
 810792c:	3501      	adds	r5, #1
 810792e:	b2ed      	uxtb	r5, r5
 8107930:	e7d8      	b.n	81078e4 <_scanf_float+0x188>
 8107932:	f1ba 0f01 	cmp.w	sl, #1
 8107936:	f47f af41 	bne.w	81077bc <_scanf_float+0x60>
 810793a:	f04f 0a02 	mov.w	sl, #2
 810793e:	e7d1      	b.n	81078e4 <_scanf_float+0x188>
 8107940:	b97d      	cbnz	r5, 8107962 <_scanf_float+0x206>
 8107942:	f1b9 0f00 	cmp.w	r9, #0
 8107946:	f47f af3c 	bne.w	81077c2 <_scanf_float+0x66>
 810794a:	6822      	ldr	r2, [r4, #0]
 810794c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8107950:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8107954:	f47f af39 	bne.w	81077ca <_scanf_float+0x6e>
 8107958:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810795c:	6022      	str	r2, [r4, #0]
 810795e:	2501      	movs	r5, #1
 8107960:	e7c0      	b.n	81078e4 <_scanf_float+0x188>
 8107962:	2d03      	cmp	r5, #3
 8107964:	d0e2      	beq.n	810792c <_scanf_float+0x1d0>
 8107966:	2d05      	cmp	r5, #5
 8107968:	e7de      	b.n	8107928 <_scanf_float+0x1cc>
 810796a:	2d02      	cmp	r5, #2
 810796c:	f47f af26 	bne.w	81077bc <_scanf_float+0x60>
 8107970:	2503      	movs	r5, #3
 8107972:	e7b7      	b.n	81078e4 <_scanf_float+0x188>
 8107974:	2d06      	cmp	r5, #6
 8107976:	f47f af21 	bne.w	81077bc <_scanf_float+0x60>
 810797a:	2507      	movs	r5, #7
 810797c:	e7b2      	b.n	81078e4 <_scanf_float+0x188>
 810797e:	6822      	ldr	r2, [r4, #0]
 8107980:	0591      	lsls	r1, r2, #22
 8107982:	f57f af1b 	bpl.w	81077bc <_scanf_float+0x60>
 8107986:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810798a:	6022      	str	r2, [r4, #0]
 810798c:	f8cd 9004 	str.w	r9, [sp, #4]
 8107990:	e7a8      	b.n	81078e4 <_scanf_float+0x188>
 8107992:	6822      	ldr	r2, [r4, #0]
 8107994:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8107998:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810799c:	d006      	beq.n	81079ac <_scanf_float+0x250>
 810799e:	0550      	lsls	r0, r2, #21
 81079a0:	f57f af0c 	bpl.w	81077bc <_scanf_float+0x60>
 81079a4:	f1b9 0f00 	cmp.w	r9, #0
 81079a8:	f43f af0f 	beq.w	81077ca <_scanf_float+0x6e>
 81079ac:	0591      	lsls	r1, r2, #22
 81079ae:	bf58      	it	pl
 81079b0:	9901      	ldrpl	r1, [sp, #4]
 81079b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81079b6:	bf58      	it	pl
 81079b8:	eba9 0101 	subpl.w	r1, r9, r1
 81079bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 81079c0:	bf58      	it	pl
 81079c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 81079c6:	6022      	str	r2, [r4, #0]
 81079c8:	f04f 0900 	mov.w	r9, #0
 81079cc:	e78a      	b.n	81078e4 <_scanf_float+0x188>
 81079ce:	f04f 0a03 	mov.w	sl, #3
 81079d2:	e787      	b.n	81078e4 <_scanf_float+0x188>
 81079d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 81079d8:	4639      	mov	r1, r7
 81079da:	4640      	mov	r0, r8
 81079dc:	4798      	blx	r3
 81079de:	2800      	cmp	r0, #0
 81079e0:	f43f aedf 	beq.w	81077a2 <_scanf_float+0x46>
 81079e4:	e6ea      	b.n	81077bc <_scanf_float+0x60>
 81079e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81079ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81079ee:	463a      	mov	r2, r7
 81079f0:	4640      	mov	r0, r8
 81079f2:	4798      	blx	r3
 81079f4:	6923      	ldr	r3, [r4, #16]
 81079f6:	3b01      	subs	r3, #1
 81079f8:	6123      	str	r3, [r4, #16]
 81079fa:	e6ec      	b.n	81077d6 <_scanf_float+0x7a>
 81079fc:	1e6b      	subs	r3, r5, #1
 81079fe:	2b06      	cmp	r3, #6
 8107a00:	d825      	bhi.n	8107a4e <_scanf_float+0x2f2>
 8107a02:	2d02      	cmp	r5, #2
 8107a04:	d836      	bhi.n	8107a74 <_scanf_float+0x318>
 8107a06:	455e      	cmp	r6, fp
 8107a08:	f67f aee8 	bls.w	81077dc <_scanf_float+0x80>
 8107a0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107a10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8107a14:	463a      	mov	r2, r7
 8107a16:	4640      	mov	r0, r8
 8107a18:	4798      	blx	r3
 8107a1a:	6923      	ldr	r3, [r4, #16]
 8107a1c:	3b01      	subs	r3, #1
 8107a1e:	6123      	str	r3, [r4, #16]
 8107a20:	e7f1      	b.n	8107a06 <_scanf_float+0x2aa>
 8107a22:	9802      	ldr	r0, [sp, #8]
 8107a24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107a28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8107a2c:	9002      	str	r0, [sp, #8]
 8107a2e:	463a      	mov	r2, r7
 8107a30:	4640      	mov	r0, r8
 8107a32:	4798      	blx	r3
 8107a34:	6923      	ldr	r3, [r4, #16]
 8107a36:	3b01      	subs	r3, #1
 8107a38:	6123      	str	r3, [r4, #16]
 8107a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8107a3e:	fa5f fa8a 	uxtb.w	sl, sl
 8107a42:	f1ba 0f02 	cmp.w	sl, #2
 8107a46:	d1ec      	bne.n	8107a22 <_scanf_float+0x2c6>
 8107a48:	3d03      	subs	r5, #3
 8107a4a:	b2ed      	uxtb	r5, r5
 8107a4c:	1b76      	subs	r6, r6, r5
 8107a4e:	6823      	ldr	r3, [r4, #0]
 8107a50:	05da      	lsls	r2, r3, #23
 8107a52:	d52f      	bpl.n	8107ab4 <_scanf_float+0x358>
 8107a54:	055b      	lsls	r3, r3, #21
 8107a56:	d510      	bpl.n	8107a7a <_scanf_float+0x31e>
 8107a58:	455e      	cmp	r6, fp
 8107a5a:	f67f aebf 	bls.w	81077dc <_scanf_float+0x80>
 8107a5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107a62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8107a66:	463a      	mov	r2, r7
 8107a68:	4640      	mov	r0, r8
 8107a6a:	4798      	blx	r3
 8107a6c:	6923      	ldr	r3, [r4, #16]
 8107a6e:	3b01      	subs	r3, #1
 8107a70:	6123      	str	r3, [r4, #16]
 8107a72:	e7f1      	b.n	8107a58 <_scanf_float+0x2fc>
 8107a74:	46aa      	mov	sl, r5
 8107a76:	9602      	str	r6, [sp, #8]
 8107a78:	e7df      	b.n	8107a3a <_scanf_float+0x2de>
 8107a7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8107a7e:	6923      	ldr	r3, [r4, #16]
 8107a80:	2965      	cmp	r1, #101	; 0x65
 8107a82:	f103 33ff 	add.w	r3, r3, #4294967295
 8107a86:	f106 35ff 	add.w	r5, r6, #4294967295
 8107a8a:	6123      	str	r3, [r4, #16]
 8107a8c:	d00c      	beq.n	8107aa8 <_scanf_float+0x34c>
 8107a8e:	2945      	cmp	r1, #69	; 0x45
 8107a90:	d00a      	beq.n	8107aa8 <_scanf_float+0x34c>
 8107a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107a96:	463a      	mov	r2, r7
 8107a98:	4640      	mov	r0, r8
 8107a9a:	4798      	blx	r3
 8107a9c:	6923      	ldr	r3, [r4, #16]
 8107a9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8107aa2:	3b01      	subs	r3, #1
 8107aa4:	1eb5      	subs	r5, r6, #2
 8107aa6:	6123      	str	r3, [r4, #16]
 8107aa8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107aac:	463a      	mov	r2, r7
 8107aae:	4640      	mov	r0, r8
 8107ab0:	4798      	blx	r3
 8107ab2:	462e      	mov	r6, r5
 8107ab4:	6825      	ldr	r5, [r4, #0]
 8107ab6:	f015 0510 	ands.w	r5, r5, #16
 8107aba:	d159      	bne.n	8107b70 <_scanf_float+0x414>
 8107abc:	7035      	strb	r5, [r6, #0]
 8107abe:	6823      	ldr	r3, [r4, #0]
 8107ac0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8107ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8107ac8:	d11b      	bne.n	8107b02 <_scanf_float+0x3a6>
 8107aca:	9b01      	ldr	r3, [sp, #4]
 8107acc:	454b      	cmp	r3, r9
 8107ace:	eba3 0209 	sub.w	r2, r3, r9
 8107ad2:	d123      	bne.n	8107b1c <_scanf_float+0x3c0>
 8107ad4:	2200      	movs	r2, #0
 8107ad6:	4659      	mov	r1, fp
 8107ad8:	4640      	mov	r0, r8
 8107ada:	f000 ff3b 	bl	8108954 <_strtod_r>
 8107ade:	6822      	ldr	r2, [r4, #0]
 8107ae0:	9b03      	ldr	r3, [sp, #12]
 8107ae2:	f012 0f02 	tst.w	r2, #2
 8107ae6:	ec57 6b10 	vmov	r6, r7, d0
 8107aea:	681b      	ldr	r3, [r3, #0]
 8107aec:	d021      	beq.n	8107b32 <_scanf_float+0x3d6>
 8107aee:	9903      	ldr	r1, [sp, #12]
 8107af0:	1d1a      	adds	r2, r3, #4
 8107af2:	600a      	str	r2, [r1, #0]
 8107af4:	681b      	ldr	r3, [r3, #0]
 8107af6:	e9c3 6700 	strd	r6, r7, [r3]
 8107afa:	68e3      	ldr	r3, [r4, #12]
 8107afc:	3301      	adds	r3, #1
 8107afe:	60e3      	str	r3, [r4, #12]
 8107b00:	e66d      	b.n	81077de <_scanf_float+0x82>
 8107b02:	9b04      	ldr	r3, [sp, #16]
 8107b04:	2b00      	cmp	r3, #0
 8107b06:	d0e5      	beq.n	8107ad4 <_scanf_float+0x378>
 8107b08:	9905      	ldr	r1, [sp, #20]
 8107b0a:	230a      	movs	r3, #10
 8107b0c:	462a      	mov	r2, r5
 8107b0e:	3101      	adds	r1, #1
 8107b10:	4640      	mov	r0, r8
 8107b12:	f000 ffa7 	bl	8108a64 <_strtol_r>
 8107b16:	9b04      	ldr	r3, [sp, #16]
 8107b18:	9e05      	ldr	r6, [sp, #20]
 8107b1a:	1ac2      	subs	r2, r0, r3
 8107b1c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8107b20:	429e      	cmp	r6, r3
 8107b22:	bf28      	it	cs
 8107b24:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8107b28:	4912      	ldr	r1, [pc, #72]	; (8107b74 <_scanf_float+0x418>)
 8107b2a:	4630      	mov	r0, r6
 8107b2c:	f000 f8d0 	bl	8107cd0 <siprintf>
 8107b30:	e7d0      	b.n	8107ad4 <_scanf_float+0x378>
 8107b32:	9903      	ldr	r1, [sp, #12]
 8107b34:	f012 0f04 	tst.w	r2, #4
 8107b38:	f103 0204 	add.w	r2, r3, #4
 8107b3c:	600a      	str	r2, [r1, #0]
 8107b3e:	d1d9      	bne.n	8107af4 <_scanf_float+0x398>
 8107b40:	f8d3 8000 	ldr.w	r8, [r3]
 8107b44:	ee10 2a10 	vmov	r2, s0
 8107b48:	ee10 0a10 	vmov	r0, s0
 8107b4c:	463b      	mov	r3, r7
 8107b4e:	4639      	mov	r1, r7
 8107b50:	f7f9 f874 	bl	8100c3c <__aeabi_dcmpun>
 8107b54:	b128      	cbz	r0, 8107b62 <_scanf_float+0x406>
 8107b56:	4808      	ldr	r0, [pc, #32]	; (8107b78 <_scanf_float+0x41c>)
 8107b58:	f000 f8b4 	bl	8107cc4 <nanf>
 8107b5c:	ed88 0a00 	vstr	s0, [r8]
 8107b60:	e7cb      	b.n	8107afa <_scanf_float+0x39e>
 8107b62:	4630      	mov	r0, r6
 8107b64:	4639      	mov	r1, r7
 8107b66:	f7f9 f8c7 	bl	8100cf8 <__aeabi_d2f>
 8107b6a:	f8c8 0000 	str.w	r0, [r8]
 8107b6e:	e7c4      	b.n	8107afa <_scanf_float+0x39e>
 8107b70:	2500      	movs	r5, #0
 8107b72:	e634      	b.n	81077de <_scanf_float+0x82>
 8107b74:	0810bc18 	.word	0x0810bc18
 8107b78:	0810c088 	.word	0x0810c088

08107b7c <iprintf>:
 8107b7c:	b40f      	push	{r0, r1, r2, r3}
 8107b7e:	4b0a      	ldr	r3, [pc, #40]	; (8107ba8 <iprintf+0x2c>)
 8107b80:	b513      	push	{r0, r1, r4, lr}
 8107b82:	681c      	ldr	r4, [r3, #0]
 8107b84:	b124      	cbz	r4, 8107b90 <iprintf+0x14>
 8107b86:	69a3      	ldr	r3, [r4, #24]
 8107b88:	b913      	cbnz	r3, 8107b90 <iprintf+0x14>
 8107b8a:	4620      	mov	r0, r4
 8107b8c:	f001 ffc0 	bl	8109b10 <__sinit>
 8107b90:	ab05      	add	r3, sp, #20
 8107b92:	9a04      	ldr	r2, [sp, #16]
 8107b94:	68a1      	ldr	r1, [r4, #8]
 8107b96:	9301      	str	r3, [sp, #4]
 8107b98:	4620      	mov	r0, r4
 8107b9a:	f003 fb89 	bl	810b2b0 <_vfiprintf_r>
 8107b9e:	b002      	add	sp, #8
 8107ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107ba4:	b004      	add	sp, #16
 8107ba6:	4770      	bx	lr
 8107ba8:	1000001c 	.word	0x1000001c

08107bac <putchar>:
 8107bac:	4b09      	ldr	r3, [pc, #36]	; (8107bd4 <putchar+0x28>)
 8107bae:	b513      	push	{r0, r1, r4, lr}
 8107bb0:	681c      	ldr	r4, [r3, #0]
 8107bb2:	4601      	mov	r1, r0
 8107bb4:	b134      	cbz	r4, 8107bc4 <putchar+0x18>
 8107bb6:	69a3      	ldr	r3, [r4, #24]
 8107bb8:	b923      	cbnz	r3, 8107bc4 <putchar+0x18>
 8107bba:	9001      	str	r0, [sp, #4]
 8107bbc:	4620      	mov	r0, r4
 8107bbe:	f001 ffa7 	bl	8109b10 <__sinit>
 8107bc2:	9901      	ldr	r1, [sp, #4]
 8107bc4:	68a2      	ldr	r2, [r4, #8]
 8107bc6:	4620      	mov	r0, r4
 8107bc8:	b002      	add	sp, #8
 8107bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107bce:	f003 bc9f 	b.w	810b510 <_putc_r>
 8107bd2:	bf00      	nop
 8107bd4:	1000001c 	.word	0x1000001c

08107bd8 <_puts_r>:
 8107bd8:	b570      	push	{r4, r5, r6, lr}
 8107bda:	460e      	mov	r6, r1
 8107bdc:	4605      	mov	r5, r0
 8107bde:	b118      	cbz	r0, 8107be8 <_puts_r+0x10>
 8107be0:	6983      	ldr	r3, [r0, #24]
 8107be2:	b90b      	cbnz	r3, 8107be8 <_puts_r+0x10>
 8107be4:	f001 ff94 	bl	8109b10 <__sinit>
 8107be8:	69ab      	ldr	r3, [r5, #24]
 8107bea:	68ac      	ldr	r4, [r5, #8]
 8107bec:	b913      	cbnz	r3, 8107bf4 <_puts_r+0x1c>
 8107bee:	4628      	mov	r0, r5
 8107bf0:	f001 ff8e 	bl	8109b10 <__sinit>
 8107bf4:	4b2c      	ldr	r3, [pc, #176]	; (8107ca8 <_puts_r+0xd0>)
 8107bf6:	429c      	cmp	r4, r3
 8107bf8:	d120      	bne.n	8107c3c <_puts_r+0x64>
 8107bfa:	686c      	ldr	r4, [r5, #4]
 8107bfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107bfe:	07db      	lsls	r3, r3, #31
 8107c00:	d405      	bmi.n	8107c0e <_puts_r+0x36>
 8107c02:	89a3      	ldrh	r3, [r4, #12]
 8107c04:	0598      	lsls	r0, r3, #22
 8107c06:	d402      	bmi.n	8107c0e <_puts_r+0x36>
 8107c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8107c0a:	f002 fb92 	bl	810a332 <__retarget_lock_acquire_recursive>
 8107c0e:	89a3      	ldrh	r3, [r4, #12]
 8107c10:	0719      	lsls	r1, r3, #28
 8107c12:	d51d      	bpl.n	8107c50 <_puts_r+0x78>
 8107c14:	6923      	ldr	r3, [r4, #16]
 8107c16:	b1db      	cbz	r3, 8107c50 <_puts_r+0x78>
 8107c18:	3e01      	subs	r6, #1
 8107c1a:	68a3      	ldr	r3, [r4, #8]
 8107c1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8107c20:	3b01      	subs	r3, #1
 8107c22:	60a3      	str	r3, [r4, #8]
 8107c24:	bb39      	cbnz	r1, 8107c76 <_puts_r+0x9e>
 8107c26:	2b00      	cmp	r3, #0
 8107c28:	da38      	bge.n	8107c9c <_puts_r+0xc4>
 8107c2a:	4622      	mov	r2, r4
 8107c2c:	210a      	movs	r1, #10
 8107c2e:	4628      	mov	r0, r5
 8107c30:	f000 ff1a 	bl	8108a68 <__swbuf_r>
 8107c34:	3001      	adds	r0, #1
 8107c36:	d011      	beq.n	8107c5c <_puts_r+0x84>
 8107c38:	250a      	movs	r5, #10
 8107c3a:	e011      	b.n	8107c60 <_puts_r+0x88>
 8107c3c:	4b1b      	ldr	r3, [pc, #108]	; (8107cac <_puts_r+0xd4>)
 8107c3e:	429c      	cmp	r4, r3
 8107c40:	d101      	bne.n	8107c46 <_puts_r+0x6e>
 8107c42:	68ac      	ldr	r4, [r5, #8]
 8107c44:	e7da      	b.n	8107bfc <_puts_r+0x24>
 8107c46:	4b1a      	ldr	r3, [pc, #104]	; (8107cb0 <_puts_r+0xd8>)
 8107c48:	429c      	cmp	r4, r3
 8107c4a:	bf08      	it	eq
 8107c4c:	68ec      	ldreq	r4, [r5, #12]
 8107c4e:	e7d5      	b.n	8107bfc <_puts_r+0x24>
 8107c50:	4621      	mov	r1, r4
 8107c52:	4628      	mov	r0, r5
 8107c54:	f000 ff5a 	bl	8108b0c <__swsetup_r>
 8107c58:	2800      	cmp	r0, #0
 8107c5a:	d0dd      	beq.n	8107c18 <_puts_r+0x40>
 8107c5c:	f04f 35ff 	mov.w	r5, #4294967295
 8107c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107c62:	07da      	lsls	r2, r3, #31
 8107c64:	d405      	bmi.n	8107c72 <_puts_r+0x9a>
 8107c66:	89a3      	ldrh	r3, [r4, #12]
 8107c68:	059b      	lsls	r3, r3, #22
 8107c6a:	d402      	bmi.n	8107c72 <_puts_r+0x9a>
 8107c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8107c6e:	f002 fb61 	bl	810a334 <__retarget_lock_release_recursive>
 8107c72:	4628      	mov	r0, r5
 8107c74:	bd70      	pop	{r4, r5, r6, pc}
 8107c76:	2b00      	cmp	r3, #0
 8107c78:	da04      	bge.n	8107c84 <_puts_r+0xac>
 8107c7a:	69a2      	ldr	r2, [r4, #24]
 8107c7c:	429a      	cmp	r2, r3
 8107c7e:	dc06      	bgt.n	8107c8e <_puts_r+0xb6>
 8107c80:	290a      	cmp	r1, #10
 8107c82:	d004      	beq.n	8107c8e <_puts_r+0xb6>
 8107c84:	6823      	ldr	r3, [r4, #0]
 8107c86:	1c5a      	adds	r2, r3, #1
 8107c88:	6022      	str	r2, [r4, #0]
 8107c8a:	7019      	strb	r1, [r3, #0]
 8107c8c:	e7c5      	b.n	8107c1a <_puts_r+0x42>
 8107c8e:	4622      	mov	r2, r4
 8107c90:	4628      	mov	r0, r5
 8107c92:	f000 fee9 	bl	8108a68 <__swbuf_r>
 8107c96:	3001      	adds	r0, #1
 8107c98:	d1bf      	bne.n	8107c1a <_puts_r+0x42>
 8107c9a:	e7df      	b.n	8107c5c <_puts_r+0x84>
 8107c9c:	6823      	ldr	r3, [r4, #0]
 8107c9e:	250a      	movs	r5, #10
 8107ca0:	1c5a      	adds	r2, r3, #1
 8107ca2:	6022      	str	r2, [r4, #0]
 8107ca4:	701d      	strb	r5, [r3, #0]
 8107ca6:	e7db      	b.n	8107c60 <_puts_r+0x88>
 8107ca8:	0810be24 	.word	0x0810be24
 8107cac:	0810be44 	.word	0x0810be44
 8107cb0:	0810be04 	.word	0x0810be04

08107cb4 <puts>:
 8107cb4:	4b02      	ldr	r3, [pc, #8]	; (8107cc0 <puts+0xc>)
 8107cb6:	4601      	mov	r1, r0
 8107cb8:	6818      	ldr	r0, [r3, #0]
 8107cba:	f7ff bf8d 	b.w	8107bd8 <_puts_r>
 8107cbe:	bf00      	nop
 8107cc0:	1000001c 	.word	0x1000001c

08107cc4 <nanf>:
 8107cc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8107ccc <nanf+0x8>
 8107cc8:	4770      	bx	lr
 8107cca:	bf00      	nop
 8107ccc:	7fc00000 	.word	0x7fc00000

08107cd0 <siprintf>:
 8107cd0:	b40e      	push	{r1, r2, r3}
 8107cd2:	b500      	push	{lr}
 8107cd4:	b09c      	sub	sp, #112	; 0x70
 8107cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8107cd8:	9002      	str	r0, [sp, #8]
 8107cda:	9006      	str	r0, [sp, #24]
 8107cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8107ce0:	4809      	ldr	r0, [pc, #36]	; (8107d08 <siprintf+0x38>)
 8107ce2:	9107      	str	r1, [sp, #28]
 8107ce4:	9104      	str	r1, [sp, #16]
 8107ce6:	4909      	ldr	r1, [pc, #36]	; (8107d0c <siprintf+0x3c>)
 8107ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8107cec:	9105      	str	r1, [sp, #20]
 8107cee:	6800      	ldr	r0, [r0, #0]
 8107cf0:	9301      	str	r3, [sp, #4]
 8107cf2:	a902      	add	r1, sp, #8
 8107cf4:	f003 f9b2 	bl	810b05c <_svfiprintf_r>
 8107cf8:	9b02      	ldr	r3, [sp, #8]
 8107cfa:	2200      	movs	r2, #0
 8107cfc:	701a      	strb	r2, [r3, #0]
 8107cfe:	b01c      	add	sp, #112	; 0x70
 8107d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8107d04:	b003      	add	sp, #12
 8107d06:	4770      	bx	lr
 8107d08:	1000001c 	.word	0x1000001c
 8107d0c:	ffff0208 	.word	0xffff0208

08107d10 <sulp>:
 8107d10:	b570      	push	{r4, r5, r6, lr}
 8107d12:	4604      	mov	r4, r0
 8107d14:	460d      	mov	r5, r1
 8107d16:	ec45 4b10 	vmov	d0, r4, r5
 8107d1a:	4616      	mov	r6, r2
 8107d1c:	f002 fefc 	bl	810ab18 <__ulp>
 8107d20:	ec51 0b10 	vmov	r0, r1, d0
 8107d24:	b17e      	cbz	r6, 8107d46 <sulp+0x36>
 8107d26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8107d2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8107d2e:	2b00      	cmp	r3, #0
 8107d30:	dd09      	ble.n	8107d46 <sulp+0x36>
 8107d32:	051b      	lsls	r3, r3, #20
 8107d34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8107d38:	2400      	movs	r4, #0
 8107d3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8107d3e:	4622      	mov	r2, r4
 8107d40:	462b      	mov	r3, r5
 8107d42:	f7f8 fce1 	bl	8100708 <__aeabi_dmul>
 8107d46:	bd70      	pop	{r4, r5, r6, pc}

08107d48 <_strtod_l>:
 8107d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107d4c:	ed2d 8b02 	vpush	{d8}
 8107d50:	b09d      	sub	sp, #116	; 0x74
 8107d52:	461f      	mov	r7, r3
 8107d54:	2300      	movs	r3, #0
 8107d56:	9318      	str	r3, [sp, #96]	; 0x60
 8107d58:	4ba2      	ldr	r3, [pc, #648]	; (8107fe4 <_strtod_l+0x29c>)
 8107d5a:	9213      	str	r2, [sp, #76]	; 0x4c
 8107d5c:	681b      	ldr	r3, [r3, #0]
 8107d5e:	9305      	str	r3, [sp, #20]
 8107d60:	4604      	mov	r4, r0
 8107d62:	4618      	mov	r0, r3
 8107d64:	4688      	mov	r8, r1
 8107d66:	f7f8 fabb 	bl	81002e0 <strlen>
 8107d6a:	f04f 0a00 	mov.w	sl, #0
 8107d6e:	4605      	mov	r5, r0
 8107d70:	f04f 0b00 	mov.w	fp, #0
 8107d74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8107d78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107d7a:	781a      	ldrb	r2, [r3, #0]
 8107d7c:	2a2b      	cmp	r2, #43	; 0x2b
 8107d7e:	d04e      	beq.n	8107e1e <_strtod_l+0xd6>
 8107d80:	d83b      	bhi.n	8107dfa <_strtod_l+0xb2>
 8107d82:	2a0d      	cmp	r2, #13
 8107d84:	d834      	bhi.n	8107df0 <_strtod_l+0xa8>
 8107d86:	2a08      	cmp	r2, #8
 8107d88:	d834      	bhi.n	8107df4 <_strtod_l+0xac>
 8107d8a:	2a00      	cmp	r2, #0
 8107d8c:	d03e      	beq.n	8107e0c <_strtod_l+0xc4>
 8107d8e:	2300      	movs	r3, #0
 8107d90:	930a      	str	r3, [sp, #40]	; 0x28
 8107d92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8107d94:	7833      	ldrb	r3, [r6, #0]
 8107d96:	2b30      	cmp	r3, #48	; 0x30
 8107d98:	f040 80b0 	bne.w	8107efc <_strtod_l+0x1b4>
 8107d9c:	7873      	ldrb	r3, [r6, #1]
 8107d9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8107da2:	2b58      	cmp	r3, #88	; 0x58
 8107da4:	d168      	bne.n	8107e78 <_strtod_l+0x130>
 8107da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107da8:	9301      	str	r3, [sp, #4]
 8107daa:	ab18      	add	r3, sp, #96	; 0x60
 8107dac:	9702      	str	r7, [sp, #8]
 8107dae:	9300      	str	r3, [sp, #0]
 8107db0:	4a8d      	ldr	r2, [pc, #564]	; (8107fe8 <_strtod_l+0x2a0>)
 8107db2:	ab19      	add	r3, sp, #100	; 0x64
 8107db4:	a917      	add	r1, sp, #92	; 0x5c
 8107db6:	4620      	mov	r0, r4
 8107db8:	f001 ffae 	bl	8109d18 <__gethex>
 8107dbc:	f010 0707 	ands.w	r7, r0, #7
 8107dc0:	4605      	mov	r5, r0
 8107dc2:	d005      	beq.n	8107dd0 <_strtod_l+0x88>
 8107dc4:	2f06      	cmp	r7, #6
 8107dc6:	d12c      	bne.n	8107e22 <_strtod_l+0xda>
 8107dc8:	3601      	adds	r6, #1
 8107dca:	2300      	movs	r3, #0
 8107dcc:	9617      	str	r6, [sp, #92]	; 0x5c
 8107dce:	930a      	str	r3, [sp, #40]	; 0x28
 8107dd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8107dd2:	2b00      	cmp	r3, #0
 8107dd4:	f040 8590 	bne.w	81088f8 <_strtod_l+0xbb0>
 8107dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107dda:	b1eb      	cbz	r3, 8107e18 <_strtod_l+0xd0>
 8107ddc:	4652      	mov	r2, sl
 8107dde:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8107de2:	ec43 2b10 	vmov	d0, r2, r3
 8107de6:	b01d      	add	sp, #116	; 0x74
 8107de8:	ecbd 8b02 	vpop	{d8}
 8107dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107df0:	2a20      	cmp	r2, #32
 8107df2:	d1cc      	bne.n	8107d8e <_strtod_l+0x46>
 8107df4:	3301      	adds	r3, #1
 8107df6:	9317      	str	r3, [sp, #92]	; 0x5c
 8107df8:	e7be      	b.n	8107d78 <_strtod_l+0x30>
 8107dfa:	2a2d      	cmp	r2, #45	; 0x2d
 8107dfc:	d1c7      	bne.n	8107d8e <_strtod_l+0x46>
 8107dfe:	2201      	movs	r2, #1
 8107e00:	920a      	str	r2, [sp, #40]	; 0x28
 8107e02:	1c5a      	adds	r2, r3, #1
 8107e04:	9217      	str	r2, [sp, #92]	; 0x5c
 8107e06:	785b      	ldrb	r3, [r3, #1]
 8107e08:	2b00      	cmp	r3, #0
 8107e0a:	d1c2      	bne.n	8107d92 <_strtod_l+0x4a>
 8107e0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8107e0e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8107e12:	2b00      	cmp	r3, #0
 8107e14:	f040 856e 	bne.w	81088f4 <_strtod_l+0xbac>
 8107e18:	4652      	mov	r2, sl
 8107e1a:	465b      	mov	r3, fp
 8107e1c:	e7e1      	b.n	8107de2 <_strtod_l+0x9a>
 8107e1e:	2200      	movs	r2, #0
 8107e20:	e7ee      	b.n	8107e00 <_strtod_l+0xb8>
 8107e22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8107e24:	b13a      	cbz	r2, 8107e36 <_strtod_l+0xee>
 8107e26:	2135      	movs	r1, #53	; 0x35
 8107e28:	a81a      	add	r0, sp, #104	; 0x68
 8107e2a:	f002 ff80 	bl	810ad2e <__copybits>
 8107e2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8107e30:	4620      	mov	r0, r4
 8107e32:	f002 fb3f 	bl	810a4b4 <_Bfree>
 8107e36:	3f01      	subs	r7, #1
 8107e38:	2f04      	cmp	r7, #4
 8107e3a:	d806      	bhi.n	8107e4a <_strtod_l+0x102>
 8107e3c:	e8df f007 	tbb	[pc, r7]
 8107e40:	1714030a 	.word	0x1714030a
 8107e44:	0a          	.byte	0x0a
 8107e45:	00          	.byte	0x00
 8107e46:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8107e4a:	0728      	lsls	r0, r5, #28
 8107e4c:	d5c0      	bpl.n	8107dd0 <_strtod_l+0x88>
 8107e4e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8107e52:	e7bd      	b.n	8107dd0 <_strtod_l+0x88>
 8107e54:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8107e58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8107e5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8107e5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8107e62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8107e66:	e7f0      	b.n	8107e4a <_strtod_l+0x102>
 8107e68:	f8df b180 	ldr.w	fp, [pc, #384]	; 8107fec <_strtod_l+0x2a4>
 8107e6c:	e7ed      	b.n	8107e4a <_strtod_l+0x102>
 8107e6e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8107e72:	f04f 3aff 	mov.w	sl, #4294967295
 8107e76:	e7e8      	b.n	8107e4a <_strtod_l+0x102>
 8107e78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107e7a:	1c5a      	adds	r2, r3, #1
 8107e7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8107e7e:	785b      	ldrb	r3, [r3, #1]
 8107e80:	2b30      	cmp	r3, #48	; 0x30
 8107e82:	d0f9      	beq.n	8107e78 <_strtod_l+0x130>
 8107e84:	2b00      	cmp	r3, #0
 8107e86:	d0a3      	beq.n	8107dd0 <_strtod_l+0x88>
 8107e88:	2301      	movs	r3, #1
 8107e8a:	f04f 0900 	mov.w	r9, #0
 8107e8e:	9304      	str	r3, [sp, #16]
 8107e90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107e92:	9308      	str	r3, [sp, #32]
 8107e94:	f8cd 901c 	str.w	r9, [sp, #28]
 8107e98:	464f      	mov	r7, r9
 8107e9a:	220a      	movs	r2, #10
 8107e9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8107e9e:	7806      	ldrb	r6, [r0, #0]
 8107ea0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8107ea4:	b2d9      	uxtb	r1, r3
 8107ea6:	2909      	cmp	r1, #9
 8107ea8:	d92a      	bls.n	8107f00 <_strtod_l+0x1b8>
 8107eaa:	9905      	ldr	r1, [sp, #20]
 8107eac:	462a      	mov	r2, r5
 8107eae:	f003 fbd2 	bl	810b656 <strncmp>
 8107eb2:	b398      	cbz	r0, 8107f1c <_strtod_l+0x1d4>
 8107eb4:	2000      	movs	r0, #0
 8107eb6:	4632      	mov	r2, r6
 8107eb8:	463d      	mov	r5, r7
 8107eba:	9005      	str	r0, [sp, #20]
 8107ebc:	4603      	mov	r3, r0
 8107ebe:	2a65      	cmp	r2, #101	; 0x65
 8107ec0:	d001      	beq.n	8107ec6 <_strtod_l+0x17e>
 8107ec2:	2a45      	cmp	r2, #69	; 0x45
 8107ec4:	d118      	bne.n	8107ef8 <_strtod_l+0x1b0>
 8107ec6:	b91d      	cbnz	r5, 8107ed0 <_strtod_l+0x188>
 8107ec8:	9a04      	ldr	r2, [sp, #16]
 8107eca:	4302      	orrs	r2, r0
 8107ecc:	d09e      	beq.n	8107e0c <_strtod_l+0xc4>
 8107ece:	2500      	movs	r5, #0
 8107ed0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8107ed4:	f108 0201 	add.w	r2, r8, #1
 8107ed8:	9217      	str	r2, [sp, #92]	; 0x5c
 8107eda:	f898 2001 	ldrb.w	r2, [r8, #1]
 8107ede:	2a2b      	cmp	r2, #43	; 0x2b
 8107ee0:	d075      	beq.n	8107fce <_strtod_l+0x286>
 8107ee2:	2a2d      	cmp	r2, #45	; 0x2d
 8107ee4:	d07b      	beq.n	8107fde <_strtod_l+0x296>
 8107ee6:	f04f 0c00 	mov.w	ip, #0
 8107eea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8107eee:	2909      	cmp	r1, #9
 8107ef0:	f240 8082 	bls.w	8107ff8 <_strtod_l+0x2b0>
 8107ef4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8107ef8:	2600      	movs	r6, #0
 8107efa:	e09d      	b.n	8108038 <_strtod_l+0x2f0>
 8107efc:	2300      	movs	r3, #0
 8107efe:	e7c4      	b.n	8107e8a <_strtod_l+0x142>
 8107f00:	2f08      	cmp	r7, #8
 8107f02:	bfd8      	it	le
 8107f04:	9907      	ldrle	r1, [sp, #28]
 8107f06:	f100 0001 	add.w	r0, r0, #1
 8107f0a:	bfda      	itte	le
 8107f0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8107f10:	9307      	strle	r3, [sp, #28]
 8107f12:	fb02 3909 	mlagt	r9, r2, r9, r3
 8107f16:	3701      	adds	r7, #1
 8107f18:	9017      	str	r0, [sp, #92]	; 0x5c
 8107f1a:	e7bf      	b.n	8107e9c <_strtod_l+0x154>
 8107f1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107f1e:	195a      	adds	r2, r3, r5
 8107f20:	9217      	str	r2, [sp, #92]	; 0x5c
 8107f22:	5d5a      	ldrb	r2, [r3, r5]
 8107f24:	2f00      	cmp	r7, #0
 8107f26:	d037      	beq.n	8107f98 <_strtod_l+0x250>
 8107f28:	9005      	str	r0, [sp, #20]
 8107f2a:	463d      	mov	r5, r7
 8107f2c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8107f30:	2b09      	cmp	r3, #9
 8107f32:	d912      	bls.n	8107f5a <_strtod_l+0x212>
 8107f34:	2301      	movs	r3, #1
 8107f36:	e7c2      	b.n	8107ebe <_strtod_l+0x176>
 8107f38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107f3a:	1c5a      	adds	r2, r3, #1
 8107f3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8107f3e:	785a      	ldrb	r2, [r3, #1]
 8107f40:	3001      	adds	r0, #1
 8107f42:	2a30      	cmp	r2, #48	; 0x30
 8107f44:	d0f8      	beq.n	8107f38 <_strtod_l+0x1f0>
 8107f46:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8107f4a:	2b08      	cmp	r3, #8
 8107f4c:	f200 84d9 	bhi.w	8108902 <_strtod_l+0xbba>
 8107f50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107f52:	9005      	str	r0, [sp, #20]
 8107f54:	2000      	movs	r0, #0
 8107f56:	9308      	str	r3, [sp, #32]
 8107f58:	4605      	mov	r5, r0
 8107f5a:	3a30      	subs	r2, #48	; 0x30
 8107f5c:	f100 0301 	add.w	r3, r0, #1
 8107f60:	d014      	beq.n	8107f8c <_strtod_l+0x244>
 8107f62:	9905      	ldr	r1, [sp, #20]
 8107f64:	4419      	add	r1, r3
 8107f66:	9105      	str	r1, [sp, #20]
 8107f68:	462b      	mov	r3, r5
 8107f6a:	eb00 0e05 	add.w	lr, r0, r5
 8107f6e:	210a      	movs	r1, #10
 8107f70:	4573      	cmp	r3, lr
 8107f72:	d113      	bne.n	8107f9c <_strtod_l+0x254>
 8107f74:	182b      	adds	r3, r5, r0
 8107f76:	2b08      	cmp	r3, #8
 8107f78:	f105 0501 	add.w	r5, r5, #1
 8107f7c:	4405      	add	r5, r0
 8107f7e:	dc1c      	bgt.n	8107fba <_strtod_l+0x272>
 8107f80:	9907      	ldr	r1, [sp, #28]
 8107f82:	230a      	movs	r3, #10
 8107f84:	fb03 2301 	mla	r3, r3, r1, r2
 8107f88:	9307      	str	r3, [sp, #28]
 8107f8a:	2300      	movs	r3, #0
 8107f8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8107f8e:	1c51      	adds	r1, r2, #1
 8107f90:	9117      	str	r1, [sp, #92]	; 0x5c
 8107f92:	7852      	ldrb	r2, [r2, #1]
 8107f94:	4618      	mov	r0, r3
 8107f96:	e7c9      	b.n	8107f2c <_strtod_l+0x1e4>
 8107f98:	4638      	mov	r0, r7
 8107f9a:	e7d2      	b.n	8107f42 <_strtod_l+0x1fa>
 8107f9c:	2b08      	cmp	r3, #8
 8107f9e:	dc04      	bgt.n	8107faa <_strtod_l+0x262>
 8107fa0:	9e07      	ldr	r6, [sp, #28]
 8107fa2:	434e      	muls	r6, r1
 8107fa4:	9607      	str	r6, [sp, #28]
 8107fa6:	3301      	adds	r3, #1
 8107fa8:	e7e2      	b.n	8107f70 <_strtod_l+0x228>
 8107faa:	f103 0c01 	add.w	ip, r3, #1
 8107fae:	f1bc 0f10 	cmp.w	ip, #16
 8107fb2:	bfd8      	it	le
 8107fb4:	fb01 f909 	mulle.w	r9, r1, r9
 8107fb8:	e7f5      	b.n	8107fa6 <_strtod_l+0x25e>
 8107fba:	2d10      	cmp	r5, #16
 8107fbc:	bfdc      	itt	le
 8107fbe:	230a      	movle	r3, #10
 8107fc0:	fb03 2909 	mlale	r9, r3, r9, r2
 8107fc4:	e7e1      	b.n	8107f8a <_strtod_l+0x242>
 8107fc6:	2300      	movs	r3, #0
 8107fc8:	9305      	str	r3, [sp, #20]
 8107fca:	2301      	movs	r3, #1
 8107fcc:	e77c      	b.n	8107ec8 <_strtod_l+0x180>
 8107fce:	f04f 0c00 	mov.w	ip, #0
 8107fd2:	f108 0202 	add.w	r2, r8, #2
 8107fd6:	9217      	str	r2, [sp, #92]	; 0x5c
 8107fd8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8107fdc:	e785      	b.n	8107eea <_strtod_l+0x1a2>
 8107fde:	f04f 0c01 	mov.w	ip, #1
 8107fe2:	e7f6      	b.n	8107fd2 <_strtod_l+0x28a>
 8107fe4:	0810becc 	.word	0x0810becc
 8107fe8:	0810bc20 	.word	0x0810bc20
 8107fec:	7ff00000 	.word	0x7ff00000
 8107ff0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8107ff2:	1c51      	adds	r1, r2, #1
 8107ff4:	9117      	str	r1, [sp, #92]	; 0x5c
 8107ff6:	7852      	ldrb	r2, [r2, #1]
 8107ff8:	2a30      	cmp	r2, #48	; 0x30
 8107ffa:	d0f9      	beq.n	8107ff0 <_strtod_l+0x2a8>
 8107ffc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8108000:	2908      	cmp	r1, #8
 8108002:	f63f af79 	bhi.w	8107ef8 <_strtod_l+0x1b0>
 8108006:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810800a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810800c:	9206      	str	r2, [sp, #24]
 810800e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8108010:	1c51      	adds	r1, r2, #1
 8108012:	9117      	str	r1, [sp, #92]	; 0x5c
 8108014:	7852      	ldrb	r2, [r2, #1]
 8108016:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 810801a:	2e09      	cmp	r6, #9
 810801c:	d937      	bls.n	810808e <_strtod_l+0x346>
 810801e:	9e06      	ldr	r6, [sp, #24]
 8108020:	1b89      	subs	r1, r1, r6
 8108022:	2908      	cmp	r1, #8
 8108024:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8108028:	dc02      	bgt.n	8108030 <_strtod_l+0x2e8>
 810802a:	4576      	cmp	r6, lr
 810802c:	bfa8      	it	ge
 810802e:	4676      	movge	r6, lr
 8108030:	f1bc 0f00 	cmp.w	ip, #0
 8108034:	d000      	beq.n	8108038 <_strtod_l+0x2f0>
 8108036:	4276      	negs	r6, r6
 8108038:	2d00      	cmp	r5, #0
 810803a:	d14d      	bne.n	81080d8 <_strtod_l+0x390>
 810803c:	9904      	ldr	r1, [sp, #16]
 810803e:	4301      	orrs	r1, r0
 8108040:	f47f aec6 	bne.w	8107dd0 <_strtod_l+0x88>
 8108044:	2b00      	cmp	r3, #0
 8108046:	f47f aee1 	bne.w	8107e0c <_strtod_l+0xc4>
 810804a:	2a69      	cmp	r2, #105	; 0x69
 810804c:	d027      	beq.n	810809e <_strtod_l+0x356>
 810804e:	dc24      	bgt.n	810809a <_strtod_l+0x352>
 8108050:	2a49      	cmp	r2, #73	; 0x49
 8108052:	d024      	beq.n	810809e <_strtod_l+0x356>
 8108054:	2a4e      	cmp	r2, #78	; 0x4e
 8108056:	f47f aed9 	bne.w	8107e0c <_strtod_l+0xc4>
 810805a:	499f      	ldr	r1, [pc, #636]	; (81082d8 <_strtod_l+0x590>)
 810805c:	a817      	add	r0, sp, #92	; 0x5c
 810805e:	f002 f8b3 	bl	810a1c8 <__match>
 8108062:	2800      	cmp	r0, #0
 8108064:	f43f aed2 	beq.w	8107e0c <_strtod_l+0xc4>
 8108068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810806a:	781b      	ldrb	r3, [r3, #0]
 810806c:	2b28      	cmp	r3, #40	; 0x28
 810806e:	d12d      	bne.n	81080cc <_strtod_l+0x384>
 8108070:	499a      	ldr	r1, [pc, #616]	; (81082dc <_strtod_l+0x594>)
 8108072:	aa1a      	add	r2, sp, #104	; 0x68
 8108074:	a817      	add	r0, sp, #92	; 0x5c
 8108076:	f002 f8bb 	bl	810a1f0 <__hexnan>
 810807a:	2805      	cmp	r0, #5
 810807c:	d126      	bne.n	81080cc <_strtod_l+0x384>
 810807e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8108080:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8108084:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8108088:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 810808c:	e6a0      	b.n	8107dd0 <_strtod_l+0x88>
 810808e:	210a      	movs	r1, #10
 8108090:	fb01 2e0e 	mla	lr, r1, lr, r2
 8108094:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8108098:	e7b9      	b.n	810800e <_strtod_l+0x2c6>
 810809a:	2a6e      	cmp	r2, #110	; 0x6e
 810809c:	e7db      	b.n	8108056 <_strtod_l+0x30e>
 810809e:	4990      	ldr	r1, [pc, #576]	; (81082e0 <_strtod_l+0x598>)
 81080a0:	a817      	add	r0, sp, #92	; 0x5c
 81080a2:	f002 f891 	bl	810a1c8 <__match>
 81080a6:	2800      	cmp	r0, #0
 81080a8:	f43f aeb0 	beq.w	8107e0c <_strtod_l+0xc4>
 81080ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81080ae:	498d      	ldr	r1, [pc, #564]	; (81082e4 <_strtod_l+0x59c>)
 81080b0:	3b01      	subs	r3, #1
 81080b2:	a817      	add	r0, sp, #92	; 0x5c
 81080b4:	9317      	str	r3, [sp, #92]	; 0x5c
 81080b6:	f002 f887 	bl	810a1c8 <__match>
 81080ba:	b910      	cbnz	r0, 81080c2 <_strtod_l+0x37a>
 81080bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81080be:	3301      	adds	r3, #1
 81080c0:	9317      	str	r3, [sp, #92]	; 0x5c
 81080c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 81082f4 <_strtod_l+0x5ac>
 81080c6:	f04f 0a00 	mov.w	sl, #0
 81080ca:	e681      	b.n	8107dd0 <_strtod_l+0x88>
 81080cc:	4886      	ldr	r0, [pc, #536]	; (81082e8 <_strtod_l+0x5a0>)
 81080ce:	f003 fa67 	bl	810b5a0 <nan>
 81080d2:	ec5b ab10 	vmov	sl, fp, d0
 81080d6:	e67b      	b.n	8107dd0 <_strtod_l+0x88>
 81080d8:	9b05      	ldr	r3, [sp, #20]
 81080da:	9807      	ldr	r0, [sp, #28]
 81080dc:	1af3      	subs	r3, r6, r3
 81080de:	2f00      	cmp	r7, #0
 81080e0:	bf08      	it	eq
 81080e2:	462f      	moveq	r7, r5
 81080e4:	2d10      	cmp	r5, #16
 81080e6:	9306      	str	r3, [sp, #24]
 81080e8:	46a8      	mov	r8, r5
 81080ea:	bfa8      	it	ge
 81080ec:	f04f 0810 	movge.w	r8, #16
 81080f0:	f7f8 fa90 	bl	8100614 <__aeabi_ui2d>
 81080f4:	2d09      	cmp	r5, #9
 81080f6:	4682      	mov	sl, r0
 81080f8:	468b      	mov	fp, r1
 81080fa:	dd13      	ble.n	8108124 <_strtod_l+0x3dc>
 81080fc:	4b7b      	ldr	r3, [pc, #492]	; (81082ec <_strtod_l+0x5a4>)
 81080fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8108102:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8108106:	f7f8 faff 	bl	8100708 <__aeabi_dmul>
 810810a:	4682      	mov	sl, r0
 810810c:	4648      	mov	r0, r9
 810810e:	468b      	mov	fp, r1
 8108110:	f7f8 fa80 	bl	8100614 <__aeabi_ui2d>
 8108114:	4602      	mov	r2, r0
 8108116:	460b      	mov	r3, r1
 8108118:	4650      	mov	r0, sl
 810811a:	4659      	mov	r1, fp
 810811c:	f7f8 f93e 	bl	810039c <__adddf3>
 8108120:	4682      	mov	sl, r0
 8108122:	468b      	mov	fp, r1
 8108124:	2d0f      	cmp	r5, #15
 8108126:	dc38      	bgt.n	810819a <_strtod_l+0x452>
 8108128:	9b06      	ldr	r3, [sp, #24]
 810812a:	2b00      	cmp	r3, #0
 810812c:	f43f ae50 	beq.w	8107dd0 <_strtod_l+0x88>
 8108130:	dd24      	ble.n	810817c <_strtod_l+0x434>
 8108132:	2b16      	cmp	r3, #22
 8108134:	dc0b      	bgt.n	810814e <_strtod_l+0x406>
 8108136:	496d      	ldr	r1, [pc, #436]	; (81082ec <_strtod_l+0x5a4>)
 8108138:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810813c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108140:	4652      	mov	r2, sl
 8108142:	465b      	mov	r3, fp
 8108144:	f7f8 fae0 	bl	8100708 <__aeabi_dmul>
 8108148:	4682      	mov	sl, r0
 810814a:	468b      	mov	fp, r1
 810814c:	e640      	b.n	8107dd0 <_strtod_l+0x88>
 810814e:	9a06      	ldr	r2, [sp, #24]
 8108150:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8108154:	4293      	cmp	r3, r2
 8108156:	db20      	blt.n	810819a <_strtod_l+0x452>
 8108158:	4c64      	ldr	r4, [pc, #400]	; (81082ec <_strtod_l+0x5a4>)
 810815a:	f1c5 050f 	rsb	r5, r5, #15
 810815e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8108162:	4652      	mov	r2, sl
 8108164:	465b      	mov	r3, fp
 8108166:	e9d1 0100 	ldrd	r0, r1, [r1]
 810816a:	f7f8 facd 	bl	8100708 <__aeabi_dmul>
 810816e:	9b06      	ldr	r3, [sp, #24]
 8108170:	1b5d      	subs	r5, r3, r5
 8108172:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8108176:	e9d4 2300 	ldrd	r2, r3, [r4]
 810817a:	e7e3      	b.n	8108144 <_strtod_l+0x3fc>
 810817c:	9b06      	ldr	r3, [sp, #24]
 810817e:	3316      	adds	r3, #22
 8108180:	db0b      	blt.n	810819a <_strtod_l+0x452>
 8108182:	9b05      	ldr	r3, [sp, #20]
 8108184:	1b9e      	subs	r6, r3, r6
 8108186:	4b59      	ldr	r3, [pc, #356]	; (81082ec <_strtod_l+0x5a4>)
 8108188:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 810818c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8108190:	4650      	mov	r0, sl
 8108192:	4659      	mov	r1, fp
 8108194:	f7f8 fbe2 	bl	810095c <__aeabi_ddiv>
 8108198:	e7d6      	b.n	8108148 <_strtod_l+0x400>
 810819a:	9b06      	ldr	r3, [sp, #24]
 810819c:	eba5 0808 	sub.w	r8, r5, r8
 81081a0:	4498      	add	r8, r3
 81081a2:	f1b8 0f00 	cmp.w	r8, #0
 81081a6:	dd74      	ble.n	8108292 <_strtod_l+0x54a>
 81081a8:	f018 030f 	ands.w	r3, r8, #15
 81081ac:	d00a      	beq.n	81081c4 <_strtod_l+0x47c>
 81081ae:	494f      	ldr	r1, [pc, #316]	; (81082ec <_strtod_l+0x5a4>)
 81081b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 81081b4:	4652      	mov	r2, sl
 81081b6:	465b      	mov	r3, fp
 81081b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 81081bc:	f7f8 faa4 	bl	8100708 <__aeabi_dmul>
 81081c0:	4682      	mov	sl, r0
 81081c2:	468b      	mov	fp, r1
 81081c4:	f038 080f 	bics.w	r8, r8, #15
 81081c8:	d04f      	beq.n	810826a <_strtod_l+0x522>
 81081ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 81081ce:	dd22      	ble.n	8108216 <_strtod_l+0x4ce>
 81081d0:	2500      	movs	r5, #0
 81081d2:	462e      	mov	r6, r5
 81081d4:	9507      	str	r5, [sp, #28]
 81081d6:	9505      	str	r5, [sp, #20]
 81081d8:	2322      	movs	r3, #34	; 0x22
 81081da:	f8df b118 	ldr.w	fp, [pc, #280]	; 81082f4 <_strtod_l+0x5ac>
 81081de:	6023      	str	r3, [r4, #0]
 81081e0:	f04f 0a00 	mov.w	sl, #0
 81081e4:	9b07      	ldr	r3, [sp, #28]
 81081e6:	2b00      	cmp	r3, #0
 81081e8:	f43f adf2 	beq.w	8107dd0 <_strtod_l+0x88>
 81081ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 81081ee:	4620      	mov	r0, r4
 81081f0:	f002 f960 	bl	810a4b4 <_Bfree>
 81081f4:	9905      	ldr	r1, [sp, #20]
 81081f6:	4620      	mov	r0, r4
 81081f8:	f002 f95c 	bl	810a4b4 <_Bfree>
 81081fc:	4631      	mov	r1, r6
 81081fe:	4620      	mov	r0, r4
 8108200:	f002 f958 	bl	810a4b4 <_Bfree>
 8108204:	9907      	ldr	r1, [sp, #28]
 8108206:	4620      	mov	r0, r4
 8108208:	f002 f954 	bl	810a4b4 <_Bfree>
 810820c:	4629      	mov	r1, r5
 810820e:	4620      	mov	r0, r4
 8108210:	f002 f950 	bl	810a4b4 <_Bfree>
 8108214:	e5dc      	b.n	8107dd0 <_strtod_l+0x88>
 8108216:	4b36      	ldr	r3, [pc, #216]	; (81082f0 <_strtod_l+0x5a8>)
 8108218:	9304      	str	r3, [sp, #16]
 810821a:	2300      	movs	r3, #0
 810821c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8108220:	4650      	mov	r0, sl
 8108222:	4659      	mov	r1, fp
 8108224:	4699      	mov	r9, r3
 8108226:	f1b8 0f01 	cmp.w	r8, #1
 810822a:	dc21      	bgt.n	8108270 <_strtod_l+0x528>
 810822c:	b10b      	cbz	r3, 8108232 <_strtod_l+0x4ea>
 810822e:	4682      	mov	sl, r0
 8108230:	468b      	mov	fp, r1
 8108232:	4b2f      	ldr	r3, [pc, #188]	; (81082f0 <_strtod_l+0x5a8>)
 8108234:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8108238:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 810823c:	4652      	mov	r2, sl
 810823e:	465b      	mov	r3, fp
 8108240:	e9d9 0100 	ldrd	r0, r1, [r9]
 8108244:	f7f8 fa60 	bl	8100708 <__aeabi_dmul>
 8108248:	4b2a      	ldr	r3, [pc, #168]	; (81082f4 <_strtod_l+0x5ac>)
 810824a:	460a      	mov	r2, r1
 810824c:	400b      	ands	r3, r1
 810824e:	492a      	ldr	r1, [pc, #168]	; (81082f8 <_strtod_l+0x5b0>)
 8108250:	428b      	cmp	r3, r1
 8108252:	4682      	mov	sl, r0
 8108254:	d8bc      	bhi.n	81081d0 <_strtod_l+0x488>
 8108256:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810825a:	428b      	cmp	r3, r1
 810825c:	bf86      	itte	hi
 810825e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 81082fc <_strtod_l+0x5b4>
 8108262:	f04f 3aff 	movhi.w	sl, #4294967295
 8108266:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 810826a:	2300      	movs	r3, #0
 810826c:	9304      	str	r3, [sp, #16]
 810826e:	e084      	b.n	810837a <_strtod_l+0x632>
 8108270:	f018 0f01 	tst.w	r8, #1
 8108274:	d005      	beq.n	8108282 <_strtod_l+0x53a>
 8108276:	9b04      	ldr	r3, [sp, #16]
 8108278:	e9d3 2300 	ldrd	r2, r3, [r3]
 810827c:	f7f8 fa44 	bl	8100708 <__aeabi_dmul>
 8108280:	2301      	movs	r3, #1
 8108282:	9a04      	ldr	r2, [sp, #16]
 8108284:	3208      	adds	r2, #8
 8108286:	f109 0901 	add.w	r9, r9, #1
 810828a:	ea4f 0868 	mov.w	r8, r8, asr #1
 810828e:	9204      	str	r2, [sp, #16]
 8108290:	e7c9      	b.n	8108226 <_strtod_l+0x4de>
 8108292:	d0ea      	beq.n	810826a <_strtod_l+0x522>
 8108294:	f1c8 0800 	rsb	r8, r8, #0
 8108298:	f018 020f 	ands.w	r2, r8, #15
 810829c:	d00a      	beq.n	81082b4 <_strtod_l+0x56c>
 810829e:	4b13      	ldr	r3, [pc, #76]	; (81082ec <_strtod_l+0x5a4>)
 81082a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81082a4:	4650      	mov	r0, sl
 81082a6:	4659      	mov	r1, fp
 81082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81082ac:	f7f8 fb56 	bl	810095c <__aeabi_ddiv>
 81082b0:	4682      	mov	sl, r0
 81082b2:	468b      	mov	fp, r1
 81082b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 81082b8:	d0d7      	beq.n	810826a <_strtod_l+0x522>
 81082ba:	f1b8 0f1f 	cmp.w	r8, #31
 81082be:	dd1f      	ble.n	8108300 <_strtod_l+0x5b8>
 81082c0:	2500      	movs	r5, #0
 81082c2:	462e      	mov	r6, r5
 81082c4:	9507      	str	r5, [sp, #28]
 81082c6:	9505      	str	r5, [sp, #20]
 81082c8:	2322      	movs	r3, #34	; 0x22
 81082ca:	f04f 0a00 	mov.w	sl, #0
 81082ce:	f04f 0b00 	mov.w	fp, #0
 81082d2:	6023      	str	r3, [r4, #0]
 81082d4:	e786      	b.n	81081e4 <_strtod_l+0x49c>
 81082d6:	bf00      	nop
 81082d8:	0810bbf1 	.word	0x0810bbf1
 81082dc:	0810bc34 	.word	0x0810bc34
 81082e0:	0810bbe9 	.word	0x0810bbe9
 81082e4:	0810bd74 	.word	0x0810bd74
 81082e8:	0810c088 	.word	0x0810c088
 81082ec:	0810bf68 	.word	0x0810bf68
 81082f0:	0810bf40 	.word	0x0810bf40
 81082f4:	7ff00000 	.word	0x7ff00000
 81082f8:	7ca00000 	.word	0x7ca00000
 81082fc:	7fefffff 	.word	0x7fefffff
 8108300:	f018 0310 	ands.w	r3, r8, #16
 8108304:	bf18      	it	ne
 8108306:	236a      	movne	r3, #106	; 0x6a
 8108308:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 81086b8 <_strtod_l+0x970>
 810830c:	9304      	str	r3, [sp, #16]
 810830e:	4650      	mov	r0, sl
 8108310:	4659      	mov	r1, fp
 8108312:	2300      	movs	r3, #0
 8108314:	f018 0f01 	tst.w	r8, #1
 8108318:	d004      	beq.n	8108324 <_strtod_l+0x5dc>
 810831a:	e9d9 2300 	ldrd	r2, r3, [r9]
 810831e:	f7f8 f9f3 	bl	8100708 <__aeabi_dmul>
 8108322:	2301      	movs	r3, #1
 8108324:	ea5f 0868 	movs.w	r8, r8, asr #1
 8108328:	f109 0908 	add.w	r9, r9, #8
 810832c:	d1f2      	bne.n	8108314 <_strtod_l+0x5cc>
 810832e:	b10b      	cbz	r3, 8108334 <_strtod_l+0x5ec>
 8108330:	4682      	mov	sl, r0
 8108332:	468b      	mov	fp, r1
 8108334:	9b04      	ldr	r3, [sp, #16]
 8108336:	b1c3      	cbz	r3, 810836a <_strtod_l+0x622>
 8108338:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810833c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8108340:	2b00      	cmp	r3, #0
 8108342:	4659      	mov	r1, fp
 8108344:	dd11      	ble.n	810836a <_strtod_l+0x622>
 8108346:	2b1f      	cmp	r3, #31
 8108348:	f340 8124 	ble.w	8108594 <_strtod_l+0x84c>
 810834c:	2b34      	cmp	r3, #52	; 0x34
 810834e:	bfde      	ittt	le
 8108350:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8108354:	f04f 33ff 	movle.w	r3, #4294967295
 8108358:	fa03 f202 	lslle.w	r2, r3, r2
 810835c:	f04f 0a00 	mov.w	sl, #0
 8108360:	bfcc      	ite	gt
 8108362:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8108366:	ea02 0b01 	andle.w	fp, r2, r1
 810836a:	2200      	movs	r2, #0
 810836c:	2300      	movs	r3, #0
 810836e:	4650      	mov	r0, sl
 8108370:	4659      	mov	r1, fp
 8108372:	f7f8 fc31 	bl	8100bd8 <__aeabi_dcmpeq>
 8108376:	2800      	cmp	r0, #0
 8108378:	d1a2      	bne.n	81082c0 <_strtod_l+0x578>
 810837a:	9b07      	ldr	r3, [sp, #28]
 810837c:	9300      	str	r3, [sp, #0]
 810837e:	9908      	ldr	r1, [sp, #32]
 8108380:	462b      	mov	r3, r5
 8108382:	463a      	mov	r2, r7
 8108384:	4620      	mov	r0, r4
 8108386:	f002 f8fd 	bl	810a584 <__s2b>
 810838a:	9007      	str	r0, [sp, #28]
 810838c:	2800      	cmp	r0, #0
 810838e:	f43f af1f 	beq.w	81081d0 <_strtod_l+0x488>
 8108392:	9b05      	ldr	r3, [sp, #20]
 8108394:	1b9e      	subs	r6, r3, r6
 8108396:	9b06      	ldr	r3, [sp, #24]
 8108398:	2b00      	cmp	r3, #0
 810839a:	bfb4      	ite	lt
 810839c:	4633      	movlt	r3, r6
 810839e:	2300      	movge	r3, #0
 81083a0:	930c      	str	r3, [sp, #48]	; 0x30
 81083a2:	9b06      	ldr	r3, [sp, #24]
 81083a4:	2500      	movs	r5, #0
 81083a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 81083aa:	9312      	str	r3, [sp, #72]	; 0x48
 81083ac:	462e      	mov	r6, r5
 81083ae:	9b07      	ldr	r3, [sp, #28]
 81083b0:	4620      	mov	r0, r4
 81083b2:	6859      	ldr	r1, [r3, #4]
 81083b4:	f002 f83e 	bl	810a434 <_Balloc>
 81083b8:	9005      	str	r0, [sp, #20]
 81083ba:	2800      	cmp	r0, #0
 81083bc:	f43f af0c 	beq.w	81081d8 <_strtod_l+0x490>
 81083c0:	9b07      	ldr	r3, [sp, #28]
 81083c2:	691a      	ldr	r2, [r3, #16]
 81083c4:	3202      	adds	r2, #2
 81083c6:	f103 010c 	add.w	r1, r3, #12
 81083ca:	0092      	lsls	r2, r2, #2
 81083cc:	300c      	adds	r0, #12
 81083ce:	f7fe fd45 	bl	8106e5c <memcpy>
 81083d2:	ec4b ab10 	vmov	d0, sl, fp
 81083d6:	aa1a      	add	r2, sp, #104	; 0x68
 81083d8:	a919      	add	r1, sp, #100	; 0x64
 81083da:	4620      	mov	r0, r4
 81083dc:	f002 fc18 	bl	810ac10 <__d2b>
 81083e0:	ec4b ab18 	vmov	d8, sl, fp
 81083e4:	9018      	str	r0, [sp, #96]	; 0x60
 81083e6:	2800      	cmp	r0, #0
 81083e8:	f43f aef6 	beq.w	81081d8 <_strtod_l+0x490>
 81083ec:	2101      	movs	r1, #1
 81083ee:	4620      	mov	r0, r4
 81083f0:	f002 f962 	bl	810a6b8 <__i2b>
 81083f4:	4606      	mov	r6, r0
 81083f6:	2800      	cmp	r0, #0
 81083f8:	f43f aeee 	beq.w	81081d8 <_strtod_l+0x490>
 81083fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 81083fe:	9904      	ldr	r1, [sp, #16]
 8108400:	2b00      	cmp	r3, #0
 8108402:	bfab      	itete	ge
 8108404:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8108406:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8108408:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810840a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 810840e:	bfac      	ite	ge
 8108410:	eb03 0902 	addge.w	r9, r3, r2
 8108414:	1ad7      	sublt	r7, r2, r3
 8108416:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8108418:	eba3 0801 	sub.w	r8, r3, r1
 810841c:	4490      	add	r8, r2
 810841e:	4ba1      	ldr	r3, [pc, #644]	; (81086a4 <_strtod_l+0x95c>)
 8108420:	f108 38ff 	add.w	r8, r8, #4294967295
 8108424:	4598      	cmp	r8, r3
 8108426:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810842a:	f280 80c7 	bge.w	81085bc <_strtod_l+0x874>
 810842e:	eba3 0308 	sub.w	r3, r3, r8
 8108432:	2b1f      	cmp	r3, #31
 8108434:	eba2 0203 	sub.w	r2, r2, r3
 8108438:	f04f 0101 	mov.w	r1, #1
 810843c:	f300 80b1 	bgt.w	81085a2 <_strtod_l+0x85a>
 8108440:	fa01 f303 	lsl.w	r3, r1, r3
 8108444:	930d      	str	r3, [sp, #52]	; 0x34
 8108446:	2300      	movs	r3, #0
 8108448:	9308      	str	r3, [sp, #32]
 810844a:	eb09 0802 	add.w	r8, r9, r2
 810844e:	9b04      	ldr	r3, [sp, #16]
 8108450:	45c1      	cmp	r9, r8
 8108452:	4417      	add	r7, r2
 8108454:	441f      	add	r7, r3
 8108456:	464b      	mov	r3, r9
 8108458:	bfa8      	it	ge
 810845a:	4643      	movge	r3, r8
 810845c:	42bb      	cmp	r3, r7
 810845e:	bfa8      	it	ge
 8108460:	463b      	movge	r3, r7
 8108462:	2b00      	cmp	r3, #0
 8108464:	bfc2      	ittt	gt
 8108466:	eba8 0803 	subgt.w	r8, r8, r3
 810846a:	1aff      	subgt	r7, r7, r3
 810846c:	eba9 0903 	subgt.w	r9, r9, r3
 8108470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8108472:	2b00      	cmp	r3, #0
 8108474:	dd17      	ble.n	81084a6 <_strtod_l+0x75e>
 8108476:	4631      	mov	r1, r6
 8108478:	461a      	mov	r2, r3
 810847a:	4620      	mov	r0, r4
 810847c:	f002 f9dc 	bl	810a838 <__pow5mult>
 8108480:	4606      	mov	r6, r0
 8108482:	2800      	cmp	r0, #0
 8108484:	f43f aea8 	beq.w	81081d8 <_strtod_l+0x490>
 8108488:	4601      	mov	r1, r0
 810848a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810848c:	4620      	mov	r0, r4
 810848e:	f002 f929 	bl	810a6e4 <__multiply>
 8108492:	900b      	str	r0, [sp, #44]	; 0x2c
 8108494:	2800      	cmp	r0, #0
 8108496:	f43f ae9f 	beq.w	81081d8 <_strtod_l+0x490>
 810849a:	9918      	ldr	r1, [sp, #96]	; 0x60
 810849c:	4620      	mov	r0, r4
 810849e:	f002 f809 	bl	810a4b4 <_Bfree>
 81084a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81084a4:	9318      	str	r3, [sp, #96]	; 0x60
 81084a6:	f1b8 0f00 	cmp.w	r8, #0
 81084aa:	f300 808c 	bgt.w	81085c6 <_strtod_l+0x87e>
 81084ae:	9b06      	ldr	r3, [sp, #24]
 81084b0:	2b00      	cmp	r3, #0
 81084b2:	dd08      	ble.n	81084c6 <_strtod_l+0x77e>
 81084b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 81084b6:	9905      	ldr	r1, [sp, #20]
 81084b8:	4620      	mov	r0, r4
 81084ba:	f002 f9bd 	bl	810a838 <__pow5mult>
 81084be:	9005      	str	r0, [sp, #20]
 81084c0:	2800      	cmp	r0, #0
 81084c2:	f43f ae89 	beq.w	81081d8 <_strtod_l+0x490>
 81084c6:	2f00      	cmp	r7, #0
 81084c8:	dd08      	ble.n	81084dc <_strtod_l+0x794>
 81084ca:	9905      	ldr	r1, [sp, #20]
 81084cc:	463a      	mov	r2, r7
 81084ce:	4620      	mov	r0, r4
 81084d0:	f002 fa0c 	bl	810a8ec <__lshift>
 81084d4:	9005      	str	r0, [sp, #20]
 81084d6:	2800      	cmp	r0, #0
 81084d8:	f43f ae7e 	beq.w	81081d8 <_strtod_l+0x490>
 81084dc:	f1b9 0f00 	cmp.w	r9, #0
 81084e0:	dd08      	ble.n	81084f4 <_strtod_l+0x7ac>
 81084e2:	4631      	mov	r1, r6
 81084e4:	464a      	mov	r2, r9
 81084e6:	4620      	mov	r0, r4
 81084e8:	f002 fa00 	bl	810a8ec <__lshift>
 81084ec:	4606      	mov	r6, r0
 81084ee:	2800      	cmp	r0, #0
 81084f0:	f43f ae72 	beq.w	81081d8 <_strtod_l+0x490>
 81084f4:	9a05      	ldr	r2, [sp, #20]
 81084f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 81084f8:	4620      	mov	r0, r4
 81084fa:	f002 fa83 	bl	810aa04 <__mdiff>
 81084fe:	4605      	mov	r5, r0
 8108500:	2800      	cmp	r0, #0
 8108502:	f43f ae69 	beq.w	81081d8 <_strtod_l+0x490>
 8108506:	68c3      	ldr	r3, [r0, #12]
 8108508:	930b      	str	r3, [sp, #44]	; 0x2c
 810850a:	2300      	movs	r3, #0
 810850c:	60c3      	str	r3, [r0, #12]
 810850e:	4631      	mov	r1, r6
 8108510:	f002 fa5c 	bl	810a9cc <__mcmp>
 8108514:	2800      	cmp	r0, #0
 8108516:	da60      	bge.n	81085da <_strtod_l+0x892>
 8108518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810851a:	ea53 030a 	orrs.w	r3, r3, sl
 810851e:	f040 8082 	bne.w	8108626 <_strtod_l+0x8de>
 8108522:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108526:	2b00      	cmp	r3, #0
 8108528:	d17d      	bne.n	8108626 <_strtod_l+0x8de>
 810852a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810852e:	0d1b      	lsrs	r3, r3, #20
 8108530:	051b      	lsls	r3, r3, #20
 8108532:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8108536:	d976      	bls.n	8108626 <_strtod_l+0x8de>
 8108538:	696b      	ldr	r3, [r5, #20]
 810853a:	b913      	cbnz	r3, 8108542 <_strtod_l+0x7fa>
 810853c:	692b      	ldr	r3, [r5, #16]
 810853e:	2b01      	cmp	r3, #1
 8108540:	dd71      	ble.n	8108626 <_strtod_l+0x8de>
 8108542:	4629      	mov	r1, r5
 8108544:	2201      	movs	r2, #1
 8108546:	4620      	mov	r0, r4
 8108548:	f002 f9d0 	bl	810a8ec <__lshift>
 810854c:	4631      	mov	r1, r6
 810854e:	4605      	mov	r5, r0
 8108550:	f002 fa3c 	bl	810a9cc <__mcmp>
 8108554:	2800      	cmp	r0, #0
 8108556:	dd66      	ble.n	8108626 <_strtod_l+0x8de>
 8108558:	9904      	ldr	r1, [sp, #16]
 810855a:	4a53      	ldr	r2, [pc, #332]	; (81086a8 <_strtod_l+0x960>)
 810855c:	465b      	mov	r3, fp
 810855e:	2900      	cmp	r1, #0
 8108560:	f000 8081 	beq.w	8108666 <_strtod_l+0x91e>
 8108564:	ea02 010b 	and.w	r1, r2, fp
 8108568:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810856c:	dc7b      	bgt.n	8108666 <_strtod_l+0x91e>
 810856e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8108572:	f77f aea9 	ble.w	81082c8 <_strtod_l+0x580>
 8108576:	4b4d      	ldr	r3, [pc, #308]	; (81086ac <_strtod_l+0x964>)
 8108578:	4650      	mov	r0, sl
 810857a:	4659      	mov	r1, fp
 810857c:	2200      	movs	r2, #0
 810857e:	f7f8 f8c3 	bl	8100708 <__aeabi_dmul>
 8108582:	460b      	mov	r3, r1
 8108584:	4303      	orrs	r3, r0
 8108586:	bf08      	it	eq
 8108588:	2322      	moveq	r3, #34	; 0x22
 810858a:	4682      	mov	sl, r0
 810858c:	468b      	mov	fp, r1
 810858e:	bf08      	it	eq
 8108590:	6023      	streq	r3, [r4, #0]
 8108592:	e62b      	b.n	81081ec <_strtod_l+0x4a4>
 8108594:	f04f 32ff 	mov.w	r2, #4294967295
 8108598:	fa02 f303 	lsl.w	r3, r2, r3
 810859c:	ea03 0a0a 	and.w	sl, r3, sl
 81085a0:	e6e3      	b.n	810836a <_strtod_l+0x622>
 81085a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 81085a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 81085aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 81085ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 81085b2:	fa01 f308 	lsl.w	r3, r1, r8
 81085b6:	9308      	str	r3, [sp, #32]
 81085b8:	910d      	str	r1, [sp, #52]	; 0x34
 81085ba:	e746      	b.n	810844a <_strtod_l+0x702>
 81085bc:	2300      	movs	r3, #0
 81085be:	9308      	str	r3, [sp, #32]
 81085c0:	2301      	movs	r3, #1
 81085c2:	930d      	str	r3, [sp, #52]	; 0x34
 81085c4:	e741      	b.n	810844a <_strtod_l+0x702>
 81085c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 81085c8:	4642      	mov	r2, r8
 81085ca:	4620      	mov	r0, r4
 81085cc:	f002 f98e 	bl	810a8ec <__lshift>
 81085d0:	9018      	str	r0, [sp, #96]	; 0x60
 81085d2:	2800      	cmp	r0, #0
 81085d4:	f47f af6b 	bne.w	81084ae <_strtod_l+0x766>
 81085d8:	e5fe      	b.n	81081d8 <_strtod_l+0x490>
 81085da:	465f      	mov	r7, fp
 81085dc:	d16e      	bne.n	81086bc <_strtod_l+0x974>
 81085de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 81085e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81085e4:	b342      	cbz	r2, 8108638 <_strtod_l+0x8f0>
 81085e6:	4a32      	ldr	r2, [pc, #200]	; (81086b0 <_strtod_l+0x968>)
 81085e8:	4293      	cmp	r3, r2
 81085ea:	d128      	bne.n	810863e <_strtod_l+0x8f6>
 81085ec:	9b04      	ldr	r3, [sp, #16]
 81085ee:	4651      	mov	r1, sl
 81085f0:	b1eb      	cbz	r3, 810862e <_strtod_l+0x8e6>
 81085f2:	4b2d      	ldr	r3, [pc, #180]	; (81086a8 <_strtod_l+0x960>)
 81085f4:	403b      	ands	r3, r7
 81085f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 81085fa:	f04f 32ff 	mov.w	r2, #4294967295
 81085fe:	d819      	bhi.n	8108634 <_strtod_l+0x8ec>
 8108600:	0d1b      	lsrs	r3, r3, #20
 8108602:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8108606:	fa02 f303 	lsl.w	r3, r2, r3
 810860a:	4299      	cmp	r1, r3
 810860c:	d117      	bne.n	810863e <_strtod_l+0x8f6>
 810860e:	4b29      	ldr	r3, [pc, #164]	; (81086b4 <_strtod_l+0x96c>)
 8108610:	429f      	cmp	r7, r3
 8108612:	d102      	bne.n	810861a <_strtod_l+0x8d2>
 8108614:	3101      	adds	r1, #1
 8108616:	f43f addf 	beq.w	81081d8 <_strtod_l+0x490>
 810861a:	4b23      	ldr	r3, [pc, #140]	; (81086a8 <_strtod_l+0x960>)
 810861c:	403b      	ands	r3, r7
 810861e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8108622:	f04f 0a00 	mov.w	sl, #0
 8108626:	9b04      	ldr	r3, [sp, #16]
 8108628:	2b00      	cmp	r3, #0
 810862a:	d1a4      	bne.n	8108576 <_strtod_l+0x82e>
 810862c:	e5de      	b.n	81081ec <_strtod_l+0x4a4>
 810862e:	f04f 33ff 	mov.w	r3, #4294967295
 8108632:	e7ea      	b.n	810860a <_strtod_l+0x8c2>
 8108634:	4613      	mov	r3, r2
 8108636:	e7e8      	b.n	810860a <_strtod_l+0x8c2>
 8108638:	ea53 030a 	orrs.w	r3, r3, sl
 810863c:	d08c      	beq.n	8108558 <_strtod_l+0x810>
 810863e:	9b08      	ldr	r3, [sp, #32]
 8108640:	b1db      	cbz	r3, 810867a <_strtod_l+0x932>
 8108642:	423b      	tst	r3, r7
 8108644:	d0ef      	beq.n	8108626 <_strtod_l+0x8de>
 8108646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108648:	9a04      	ldr	r2, [sp, #16]
 810864a:	4650      	mov	r0, sl
 810864c:	4659      	mov	r1, fp
 810864e:	b1c3      	cbz	r3, 8108682 <_strtod_l+0x93a>
 8108650:	f7ff fb5e 	bl	8107d10 <sulp>
 8108654:	4602      	mov	r2, r0
 8108656:	460b      	mov	r3, r1
 8108658:	ec51 0b18 	vmov	r0, r1, d8
 810865c:	f7f7 fe9e 	bl	810039c <__adddf3>
 8108660:	4682      	mov	sl, r0
 8108662:	468b      	mov	fp, r1
 8108664:	e7df      	b.n	8108626 <_strtod_l+0x8de>
 8108666:	4013      	ands	r3, r2
 8108668:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810866c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8108670:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8108674:	f04f 3aff 	mov.w	sl, #4294967295
 8108678:	e7d5      	b.n	8108626 <_strtod_l+0x8de>
 810867a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810867c:	ea13 0f0a 	tst.w	r3, sl
 8108680:	e7e0      	b.n	8108644 <_strtod_l+0x8fc>
 8108682:	f7ff fb45 	bl	8107d10 <sulp>
 8108686:	4602      	mov	r2, r0
 8108688:	460b      	mov	r3, r1
 810868a:	ec51 0b18 	vmov	r0, r1, d8
 810868e:	f7f7 fe83 	bl	8100398 <__aeabi_dsub>
 8108692:	2200      	movs	r2, #0
 8108694:	2300      	movs	r3, #0
 8108696:	4682      	mov	sl, r0
 8108698:	468b      	mov	fp, r1
 810869a:	f7f8 fa9d 	bl	8100bd8 <__aeabi_dcmpeq>
 810869e:	2800      	cmp	r0, #0
 81086a0:	d0c1      	beq.n	8108626 <_strtod_l+0x8de>
 81086a2:	e611      	b.n	81082c8 <_strtod_l+0x580>
 81086a4:	fffffc02 	.word	0xfffffc02
 81086a8:	7ff00000 	.word	0x7ff00000
 81086ac:	39500000 	.word	0x39500000
 81086b0:	000fffff 	.word	0x000fffff
 81086b4:	7fefffff 	.word	0x7fefffff
 81086b8:	0810bc48 	.word	0x0810bc48
 81086bc:	4631      	mov	r1, r6
 81086be:	4628      	mov	r0, r5
 81086c0:	f002 fb02 	bl	810acc8 <__ratio>
 81086c4:	ec59 8b10 	vmov	r8, r9, d0
 81086c8:	ee10 0a10 	vmov	r0, s0
 81086cc:	2200      	movs	r2, #0
 81086ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81086d2:	4649      	mov	r1, r9
 81086d4:	f7f8 fa94 	bl	8100c00 <__aeabi_dcmple>
 81086d8:	2800      	cmp	r0, #0
 81086da:	d07a      	beq.n	81087d2 <_strtod_l+0xa8a>
 81086dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81086de:	2b00      	cmp	r3, #0
 81086e0:	d04a      	beq.n	8108778 <_strtod_l+0xa30>
 81086e2:	4b95      	ldr	r3, [pc, #596]	; (8108938 <_strtod_l+0xbf0>)
 81086e4:	2200      	movs	r2, #0
 81086e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 81086ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8108938 <_strtod_l+0xbf0>
 81086ee:	f04f 0800 	mov.w	r8, #0
 81086f2:	4b92      	ldr	r3, [pc, #584]	; (810893c <_strtod_l+0xbf4>)
 81086f4:	403b      	ands	r3, r7
 81086f6:	930d      	str	r3, [sp, #52]	; 0x34
 81086f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 81086fa:	4b91      	ldr	r3, [pc, #580]	; (8108940 <_strtod_l+0xbf8>)
 81086fc:	429a      	cmp	r2, r3
 81086fe:	f040 80b0 	bne.w	8108862 <_strtod_l+0xb1a>
 8108702:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8108706:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810870a:	ec4b ab10 	vmov	d0, sl, fp
 810870e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8108712:	f002 fa01 	bl	810ab18 <__ulp>
 8108716:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810871a:	ec53 2b10 	vmov	r2, r3, d0
 810871e:	f7f7 fff3 	bl	8100708 <__aeabi_dmul>
 8108722:	4652      	mov	r2, sl
 8108724:	465b      	mov	r3, fp
 8108726:	f7f7 fe39 	bl	810039c <__adddf3>
 810872a:	460b      	mov	r3, r1
 810872c:	4983      	ldr	r1, [pc, #524]	; (810893c <_strtod_l+0xbf4>)
 810872e:	4a85      	ldr	r2, [pc, #532]	; (8108944 <_strtod_l+0xbfc>)
 8108730:	4019      	ands	r1, r3
 8108732:	4291      	cmp	r1, r2
 8108734:	4682      	mov	sl, r0
 8108736:	d960      	bls.n	81087fa <_strtod_l+0xab2>
 8108738:	ee18 3a90 	vmov	r3, s17
 810873c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8108740:	4293      	cmp	r3, r2
 8108742:	d104      	bne.n	810874e <_strtod_l+0xa06>
 8108744:	ee18 3a10 	vmov	r3, s16
 8108748:	3301      	adds	r3, #1
 810874a:	f43f ad45 	beq.w	81081d8 <_strtod_l+0x490>
 810874e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8108950 <_strtod_l+0xc08>
 8108752:	f04f 3aff 	mov.w	sl, #4294967295
 8108756:	9918      	ldr	r1, [sp, #96]	; 0x60
 8108758:	4620      	mov	r0, r4
 810875a:	f001 feab 	bl	810a4b4 <_Bfree>
 810875e:	9905      	ldr	r1, [sp, #20]
 8108760:	4620      	mov	r0, r4
 8108762:	f001 fea7 	bl	810a4b4 <_Bfree>
 8108766:	4631      	mov	r1, r6
 8108768:	4620      	mov	r0, r4
 810876a:	f001 fea3 	bl	810a4b4 <_Bfree>
 810876e:	4629      	mov	r1, r5
 8108770:	4620      	mov	r0, r4
 8108772:	f001 fe9f 	bl	810a4b4 <_Bfree>
 8108776:	e61a      	b.n	81083ae <_strtod_l+0x666>
 8108778:	f1ba 0f00 	cmp.w	sl, #0
 810877c:	d11b      	bne.n	81087b6 <_strtod_l+0xa6e>
 810877e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108782:	b9f3      	cbnz	r3, 81087c2 <_strtod_l+0xa7a>
 8108784:	4b6c      	ldr	r3, [pc, #432]	; (8108938 <_strtod_l+0xbf0>)
 8108786:	2200      	movs	r2, #0
 8108788:	4640      	mov	r0, r8
 810878a:	4649      	mov	r1, r9
 810878c:	f7f8 fa2e 	bl	8100bec <__aeabi_dcmplt>
 8108790:	b9d0      	cbnz	r0, 81087c8 <_strtod_l+0xa80>
 8108792:	4640      	mov	r0, r8
 8108794:	4649      	mov	r1, r9
 8108796:	4b6c      	ldr	r3, [pc, #432]	; (8108948 <_strtod_l+0xc00>)
 8108798:	2200      	movs	r2, #0
 810879a:	f7f7 ffb5 	bl	8100708 <__aeabi_dmul>
 810879e:	4680      	mov	r8, r0
 81087a0:	4689      	mov	r9, r1
 81087a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 81087a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 81087aa:	9315      	str	r3, [sp, #84]	; 0x54
 81087ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 81087b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 81087b4:	e79d      	b.n	81086f2 <_strtod_l+0x9aa>
 81087b6:	f1ba 0f01 	cmp.w	sl, #1
 81087ba:	d102      	bne.n	81087c2 <_strtod_l+0xa7a>
 81087bc:	2f00      	cmp	r7, #0
 81087be:	f43f ad83 	beq.w	81082c8 <_strtod_l+0x580>
 81087c2:	4b62      	ldr	r3, [pc, #392]	; (810894c <_strtod_l+0xc04>)
 81087c4:	2200      	movs	r2, #0
 81087c6:	e78e      	b.n	81086e6 <_strtod_l+0x99e>
 81087c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8108948 <_strtod_l+0xc00>
 81087cc:	f04f 0800 	mov.w	r8, #0
 81087d0:	e7e7      	b.n	81087a2 <_strtod_l+0xa5a>
 81087d2:	4b5d      	ldr	r3, [pc, #372]	; (8108948 <_strtod_l+0xc00>)
 81087d4:	4640      	mov	r0, r8
 81087d6:	4649      	mov	r1, r9
 81087d8:	2200      	movs	r2, #0
 81087da:	f7f7 ff95 	bl	8100708 <__aeabi_dmul>
 81087de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81087e0:	4680      	mov	r8, r0
 81087e2:	4689      	mov	r9, r1
 81087e4:	b933      	cbnz	r3, 81087f4 <_strtod_l+0xaac>
 81087e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81087ea:	900e      	str	r0, [sp, #56]	; 0x38
 81087ec:	930f      	str	r3, [sp, #60]	; 0x3c
 81087ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 81087f2:	e7dd      	b.n	81087b0 <_strtod_l+0xa68>
 81087f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 81087f8:	e7f9      	b.n	81087ee <_strtod_l+0xaa6>
 81087fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 81087fe:	9b04      	ldr	r3, [sp, #16]
 8108800:	2b00      	cmp	r3, #0
 8108802:	d1a8      	bne.n	8108756 <_strtod_l+0xa0e>
 8108804:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8108808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810880a:	0d1b      	lsrs	r3, r3, #20
 810880c:	051b      	lsls	r3, r3, #20
 810880e:	429a      	cmp	r2, r3
 8108810:	d1a1      	bne.n	8108756 <_strtod_l+0xa0e>
 8108812:	4640      	mov	r0, r8
 8108814:	4649      	mov	r1, r9
 8108816:	f7f8 fad7 	bl	8100dc8 <__aeabi_d2lz>
 810881a:	f7f7 ff47 	bl	81006ac <__aeabi_l2d>
 810881e:	4602      	mov	r2, r0
 8108820:	460b      	mov	r3, r1
 8108822:	4640      	mov	r0, r8
 8108824:	4649      	mov	r1, r9
 8108826:	f7f7 fdb7 	bl	8100398 <__aeabi_dsub>
 810882a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810882c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108830:	ea43 030a 	orr.w	r3, r3, sl
 8108834:	4313      	orrs	r3, r2
 8108836:	4680      	mov	r8, r0
 8108838:	4689      	mov	r9, r1
 810883a:	d055      	beq.n	81088e8 <_strtod_l+0xba0>
 810883c:	a336      	add	r3, pc, #216	; (adr r3, 8108918 <_strtod_l+0xbd0>)
 810883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108842:	f7f8 f9d3 	bl	8100bec <__aeabi_dcmplt>
 8108846:	2800      	cmp	r0, #0
 8108848:	f47f acd0 	bne.w	81081ec <_strtod_l+0x4a4>
 810884c:	a334      	add	r3, pc, #208	; (adr r3, 8108920 <_strtod_l+0xbd8>)
 810884e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108852:	4640      	mov	r0, r8
 8108854:	4649      	mov	r1, r9
 8108856:	f7f8 f9e7 	bl	8100c28 <__aeabi_dcmpgt>
 810885a:	2800      	cmp	r0, #0
 810885c:	f43f af7b 	beq.w	8108756 <_strtod_l+0xa0e>
 8108860:	e4c4      	b.n	81081ec <_strtod_l+0x4a4>
 8108862:	9b04      	ldr	r3, [sp, #16]
 8108864:	b333      	cbz	r3, 81088b4 <_strtod_l+0xb6c>
 8108866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108868:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810886c:	d822      	bhi.n	81088b4 <_strtod_l+0xb6c>
 810886e:	a32e      	add	r3, pc, #184	; (adr r3, 8108928 <_strtod_l+0xbe0>)
 8108870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108874:	4640      	mov	r0, r8
 8108876:	4649      	mov	r1, r9
 8108878:	f7f8 f9c2 	bl	8100c00 <__aeabi_dcmple>
 810887c:	b1a0      	cbz	r0, 81088a8 <_strtod_l+0xb60>
 810887e:	4649      	mov	r1, r9
 8108880:	4640      	mov	r0, r8
 8108882:	f7f8 fa19 	bl	8100cb8 <__aeabi_d2uiz>
 8108886:	2801      	cmp	r0, #1
 8108888:	bf38      	it	cc
 810888a:	2001      	movcc	r0, #1
 810888c:	f7f7 fec2 	bl	8100614 <__aeabi_ui2d>
 8108890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108892:	4680      	mov	r8, r0
 8108894:	4689      	mov	r9, r1
 8108896:	bb23      	cbnz	r3, 81088e2 <_strtod_l+0xb9a>
 8108898:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810889c:	9010      	str	r0, [sp, #64]	; 0x40
 810889e:	9311      	str	r3, [sp, #68]	; 0x44
 81088a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 81088a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 81088a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81088aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 81088ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 81088b0:	1a9b      	subs	r3, r3, r2
 81088b2:	9309      	str	r3, [sp, #36]	; 0x24
 81088b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 81088b8:	eeb0 0a48 	vmov.f32	s0, s16
 81088bc:	eef0 0a68 	vmov.f32	s1, s17
 81088c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 81088c4:	f002 f928 	bl	810ab18 <__ulp>
 81088c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 81088cc:	ec53 2b10 	vmov	r2, r3, d0
 81088d0:	f7f7 ff1a 	bl	8100708 <__aeabi_dmul>
 81088d4:	ec53 2b18 	vmov	r2, r3, d8
 81088d8:	f7f7 fd60 	bl	810039c <__adddf3>
 81088dc:	4682      	mov	sl, r0
 81088de:	468b      	mov	fp, r1
 81088e0:	e78d      	b.n	81087fe <_strtod_l+0xab6>
 81088e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 81088e6:	e7db      	b.n	81088a0 <_strtod_l+0xb58>
 81088e8:	a311      	add	r3, pc, #68	; (adr r3, 8108930 <_strtod_l+0xbe8>)
 81088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81088ee:	f7f8 f97d 	bl	8100bec <__aeabi_dcmplt>
 81088f2:	e7b2      	b.n	810885a <_strtod_l+0xb12>
 81088f4:	2300      	movs	r3, #0
 81088f6:	930a      	str	r3, [sp, #40]	; 0x28
 81088f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 81088fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81088fc:	6013      	str	r3, [r2, #0]
 81088fe:	f7ff ba6b 	b.w	8107dd8 <_strtod_l+0x90>
 8108902:	2a65      	cmp	r2, #101	; 0x65
 8108904:	f43f ab5f 	beq.w	8107fc6 <_strtod_l+0x27e>
 8108908:	2a45      	cmp	r2, #69	; 0x45
 810890a:	f43f ab5c 	beq.w	8107fc6 <_strtod_l+0x27e>
 810890e:	2301      	movs	r3, #1
 8108910:	f7ff bb94 	b.w	810803c <_strtod_l+0x2f4>
 8108914:	f3af 8000 	nop.w
 8108918:	94a03595 	.word	0x94a03595
 810891c:	3fdfffff 	.word	0x3fdfffff
 8108920:	35afe535 	.word	0x35afe535
 8108924:	3fe00000 	.word	0x3fe00000
 8108928:	ffc00000 	.word	0xffc00000
 810892c:	41dfffff 	.word	0x41dfffff
 8108930:	94a03595 	.word	0x94a03595
 8108934:	3fcfffff 	.word	0x3fcfffff
 8108938:	3ff00000 	.word	0x3ff00000
 810893c:	7ff00000 	.word	0x7ff00000
 8108940:	7fe00000 	.word	0x7fe00000
 8108944:	7c9fffff 	.word	0x7c9fffff
 8108948:	3fe00000 	.word	0x3fe00000
 810894c:	bff00000 	.word	0xbff00000
 8108950:	7fefffff 	.word	0x7fefffff

08108954 <_strtod_r>:
 8108954:	4b01      	ldr	r3, [pc, #4]	; (810895c <_strtod_r+0x8>)
 8108956:	f7ff b9f7 	b.w	8107d48 <_strtod_l>
 810895a:	bf00      	nop
 810895c:	10000084 	.word	0x10000084

08108960 <_strtol_l.constprop.0>:
 8108960:	2b01      	cmp	r3, #1
 8108962:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108966:	d001      	beq.n	810896c <_strtol_l.constprop.0+0xc>
 8108968:	2b24      	cmp	r3, #36	; 0x24
 810896a:	d906      	bls.n	810897a <_strtol_l.constprop.0+0x1a>
 810896c:	f7fe fa4c 	bl	8106e08 <__errno>
 8108970:	2316      	movs	r3, #22
 8108972:	6003      	str	r3, [r0, #0]
 8108974:	2000      	movs	r0, #0
 8108976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810897a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8108a60 <_strtol_l.constprop.0+0x100>
 810897e:	460d      	mov	r5, r1
 8108980:	462e      	mov	r6, r5
 8108982:	f815 4b01 	ldrb.w	r4, [r5], #1
 8108986:	f814 700c 	ldrb.w	r7, [r4, ip]
 810898a:	f017 0708 	ands.w	r7, r7, #8
 810898e:	d1f7      	bne.n	8108980 <_strtol_l.constprop.0+0x20>
 8108990:	2c2d      	cmp	r4, #45	; 0x2d
 8108992:	d132      	bne.n	81089fa <_strtol_l.constprop.0+0x9a>
 8108994:	782c      	ldrb	r4, [r5, #0]
 8108996:	2701      	movs	r7, #1
 8108998:	1cb5      	adds	r5, r6, #2
 810899a:	2b00      	cmp	r3, #0
 810899c:	d05b      	beq.n	8108a56 <_strtol_l.constprop.0+0xf6>
 810899e:	2b10      	cmp	r3, #16
 81089a0:	d109      	bne.n	81089b6 <_strtol_l.constprop.0+0x56>
 81089a2:	2c30      	cmp	r4, #48	; 0x30
 81089a4:	d107      	bne.n	81089b6 <_strtol_l.constprop.0+0x56>
 81089a6:	782c      	ldrb	r4, [r5, #0]
 81089a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 81089ac:	2c58      	cmp	r4, #88	; 0x58
 81089ae:	d14d      	bne.n	8108a4c <_strtol_l.constprop.0+0xec>
 81089b0:	786c      	ldrb	r4, [r5, #1]
 81089b2:	2310      	movs	r3, #16
 81089b4:	3502      	adds	r5, #2
 81089b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 81089ba:	f108 38ff 	add.w	r8, r8, #4294967295
 81089be:	f04f 0c00 	mov.w	ip, #0
 81089c2:	fbb8 f9f3 	udiv	r9, r8, r3
 81089c6:	4666      	mov	r6, ip
 81089c8:	fb03 8a19 	mls	sl, r3, r9, r8
 81089cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 81089d0:	f1be 0f09 	cmp.w	lr, #9
 81089d4:	d816      	bhi.n	8108a04 <_strtol_l.constprop.0+0xa4>
 81089d6:	4674      	mov	r4, lr
 81089d8:	42a3      	cmp	r3, r4
 81089da:	dd24      	ble.n	8108a26 <_strtol_l.constprop.0+0xc6>
 81089dc:	f1bc 0f00 	cmp.w	ip, #0
 81089e0:	db1e      	blt.n	8108a20 <_strtol_l.constprop.0+0xc0>
 81089e2:	45b1      	cmp	r9, r6
 81089e4:	d31c      	bcc.n	8108a20 <_strtol_l.constprop.0+0xc0>
 81089e6:	d101      	bne.n	81089ec <_strtol_l.constprop.0+0x8c>
 81089e8:	45a2      	cmp	sl, r4
 81089ea:	db19      	blt.n	8108a20 <_strtol_l.constprop.0+0xc0>
 81089ec:	fb06 4603 	mla	r6, r6, r3, r4
 81089f0:	f04f 0c01 	mov.w	ip, #1
 81089f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 81089f8:	e7e8      	b.n	81089cc <_strtol_l.constprop.0+0x6c>
 81089fa:	2c2b      	cmp	r4, #43	; 0x2b
 81089fc:	bf04      	itt	eq
 81089fe:	782c      	ldrbeq	r4, [r5, #0]
 8108a00:	1cb5      	addeq	r5, r6, #2
 8108a02:	e7ca      	b.n	810899a <_strtol_l.constprop.0+0x3a>
 8108a04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8108a08:	f1be 0f19 	cmp.w	lr, #25
 8108a0c:	d801      	bhi.n	8108a12 <_strtol_l.constprop.0+0xb2>
 8108a0e:	3c37      	subs	r4, #55	; 0x37
 8108a10:	e7e2      	b.n	81089d8 <_strtol_l.constprop.0+0x78>
 8108a12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8108a16:	f1be 0f19 	cmp.w	lr, #25
 8108a1a:	d804      	bhi.n	8108a26 <_strtol_l.constprop.0+0xc6>
 8108a1c:	3c57      	subs	r4, #87	; 0x57
 8108a1e:	e7db      	b.n	81089d8 <_strtol_l.constprop.0+0x78>
 8108a20:	f04f 3cff 	mov.w	ip, #4294967295
 8108a24:	e7e6      	b.n	81089f4 <_strtol_l.constprop.0+0x94>
 8108a26:	f1bc 0f00 	cmp.w	ip, #0
 8108a2a:	da05      	bge.n	8108a38 <_strtol_l.constprop.0+0xd8>
 8108a2c:	2322      	movs	r3, #34	; 0x22
 8108a2e:	6003      	str	r3, [r0, #0]
 8108a30:	4646      	mov	r6, r8
 8108a32:	b942      	cbnz	r2, 8108a46 <_strtol_l.constprop.0+0xe6>
 8108a34:	4630      	mov	r0, r6
 8108a36:	e79e      	b.n	8108976 <_strtol_l.constprop.0+0x16>
 8108a38:	b107      	cbz	r7, 8108a3c <_strtol_l.constprop.0+0xdc>
 8108a3a:	4276      	negs	r6, r6
 8108a3c:	2a00      	cmp	r2, #0
 8108a3e:	d0f9      	beq.n	8108a34 <_strtol_l.constprop.0+0xd4>
 8108a40:	f1bc 0f00 	cmp.w	ip, #0
 8108a44:	d000      	beq.n	8108a48 <_strtol_l.constprop.0+0xe8>
 8108a46:	1e69      	subs	r1, r5, #1
 8108a48:	6011      	str	r1, [r2, #0]
 8108a4a:	e7f3      	b.n	8108a34 <_strtol_l.constprop.0+0xd4>
 8108a4c:	2430      	movs	r4, #48	; 0x30
 8108a4e:	2b00      	cmp	r3, #0
 8108a50:	d1b1      	bne.n	81089b6 <_strtol_l.constprop.0+0x56>
 8108a52:	2308      	movs	r3, #8
 8108a54:	e7af      	b.n	81089b6 <_strtol_l.constprop.0+0x56>
 8108a56:	2c30      	cmp	r4, #48	; 0x30
 8108a58:	d0a5      	beq.n	81089a6 <_strtol_l.constprop.0+0x46>
 8108a5a:	230a      	movs	r3, #10
 8108a5c:	e7ab      	b.n	81089b6 <_strtol_l.constprop.0+0x56>
 8108a5e:	bf00      	nop
 8108a60:	0810bc71 	.word	0x0810bc71

08108a64 <_strtol_r>:
 8108a64:	f7ff bf7c 	b.w	8108960 <_strtol_l.constprop.0>

08108a68 <__swbuf_r>:
 8108a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108a6a:	460e      	mov	r6, r1
 8108a6c:	4614      	mov	r4, r2
 8108a6e:	4605      	mov	r5, r0
 8108a70:	b118      	cbz	r0, 8108a7a <__swbuf_r+0x12>
 8108a72:	6983      	ldr	r3, [r0, #24]
 8108a74:	b90b      	cbnz	r3, 8108a7a <__swbuf_r+0x12>
 8108a76:	f001 f84b 	bl	8109b10 <__sinit>
 8108a7a:	4b21      	ldr	r3, [pc, #132]	; (8108b00 <__swbuf_r+0x98>)
 8108a7c:	429c      	cmp	r4, r3
 8108a7e:	d12b      	bne.n	8108ad8 <__swbuf_r+0x70>
 8108a80:	686c      	ldr	r4, [r5, #4]
 8108a82:	69a3      	ldr	r3, [r4, #24]
 8108a84:	60a3      	str	r3, [r4, #8]
 8108a86:	89a3      	ldrh	r3, [r4, #12]
 8108a88:	071a      	lsls	r2, r3, #28
 8108a8a:	d52f      	bpl.n	8108aec <__swbuf_r+0x84>
 8108a8c:	6923      	ldr	r3, [r4, #16]
 8108a8e:	b36b      	cbz	r3, 8108aec <__swbuf_r+0x84>
 8108a90:	6923      	ldr	r3, [r4, #16]
 8108a92:	6820      	ldr	r0, [r4, #0]
 8108a94:	1ac0      	subs	r0, r0, r3
 8108a96:	6963      	ldr	r3, [r4, #20]
 8108a98:	b2f6      	uxtb	r6, r6
 8108a9a:	4283      	cmp	r3, r0
 8108a9c:	4637      	mov	r7, r6
 8108a9e:	dc04      	bgt.n	8108aaa <__swbuf_r+0x42>
 8108aa0:	4621      	mov	r1, r4
 8108aa2:	4628      	mov	r0, r5
 8108aa4:	f000 ffa0 	bl	81099e8 <_fflush_r>
 8108aa8:	bb30      	cbnz	r0, 8108af8 <__swbuf_r+0x90>
 8108aaa:	68a3      	ldr	r3, [r4, #8]
 8108aac:	3b01      	subs	r3, #1
 8108aae:	60a3      	str	r3, [r4, #8]
 8108ab0:	6823      	ldr	r3, [r4, #0]
 8108ab2:	1c5a      	adds	r2, r3, #1
 8108ab4:	6022      	str	r2, [r4, #0]
 8108ab6:	701e      	strb	r6, [r3, #0]
 8108ab8:	6963      	ldr	r3, [r4, #20]
 8108aba:	3001      	adds	r0, #1
 8108abc:	4283      	cmp	r3, r0
 8108abe:	d004      	beq.n	8108aca <__swbuf_r+0x62>
 8108ac0:	89a3      	ldrh	r3, [r4, #12]
 8108ac2:	07db      	lsls	r3, r3, #31
 8108ac4:	d506      	bpl.n	8108ad4 <__swbuf_r+0x6c>
 8108ac6:	2e0a      	cmp	r6, #10
 8108ac8:	d104      	bne.n	8108ad4 <__swbuf_r+0x6c>
 8108aca:	4621      	mov	r1, r4
 8108acc:	4628      	mov	r0, r5
 8108ace:	f000 ff8b 	bl	81099e8 <_fflush_r>
 8108ad2:	b988      	cbnz	r0, 8108af8 <__swbuf_r+0x90>
 8108ad4:	4638      	mov	r0, r7
 8108ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108ad8:	4b0a      	ldr	r3, [pc, #40]	; (8108b04 <__swbuf_r+0x9c>)
 8108ada:	429c      	cmp	r4, r3
 8108adc:	d101      	bne.n	8108ae2 <__swbuf_r+0x7a>
 8108ade:	68ac      	ldr	r4, [r5, #8]
 8108ae0:	e7cf      	b.n	8108a82 <__swbuf_r+0x1a>
 8108ae2:	4b09      	ldr	r3, [pc, #36]	; (8108b08 <__swbuf_r+0xa0>)
 8108ae4:	429c      	cmp	r4, r3
 8108ae6:	bf08      	it	eq
 8108ae8:	68ec      	ldreq	r4, [r5, #12]
 8108aea:	e7ca      	b.n	8108a82 <__swbuf_r+0x1a>
 8108aec:	4621      	mov	r1, r4
 8108aee:	4628      	mov	r0, r5
 8108af0:	f000 f80c 	bl	8108b0c <__swsetup_r>
 8108af4:	2800      	cmp	r0, #0
 8108af6:	d0cb      	beq.n	8108a90 <__swbuf_r+0x28>
 8108af8:	f04f 37ff 	mov.w	r7, #4294967295
 8108afc:	e7ea      	b.n	8108ad4 <__swbuf_r+0x6c>
 8108afe:	bf00      	nop
 8108b00:	0810be24 	.word	0x0810be24
 8108b04:	0810be44 	.word	0x0810be44
 8108b08:	0810be04 	.word	0x0810be04

08108b0c <__swsetup_r>:
 8108b0c:	4b32      	ldr	r3, [pc, #200]	; (8108bd8 <__swsetup_r+0xcc>)
 8108b0e:	b570      	push	{r4, r5, r6, lr}
 8108b10:	681d      	ldr	r5, [r3, #0]
 8108b12:	4606      	mov	r6, r0
 8108b14:	460c      	mov	r4, r1
 8108b16:	b125      	cbz	r5, 8108b22 <__swsetup_r+0x16>
 8108b18:	69ab      	ldr	r3, [r5, #24]
 8108b1a:	b913      	cbnz	r3, 8108b22 <__swsetup_r+0x16>
 8108b1c:	4628      	mov	r0, r5
 8108b1e:	f000 fff7 	bl	8109b10 <__sinit>
 8108b22:	4b2e      	ldr	r3, [pc, #184]	; (8108bdc <__swsetup_r+0xd0>)
 8108b24:	429c      	cmp	r4, r3
 8108b26:	d10f      	bne.n	8108b48 <__swsetup_r+0x3c>
 8108b28:	686c      	ldr	r4, [r5, #4]
 8108b2a:	89a3      	ldrh	r3, [r4, #12]
 8108b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8108b30:	0719      	lsls	r1, r3, #28
 8108b32:	d42c      	bmi.n	8108b8e <__swsetup_r+0x82>
 8108b34:	06dd      	lsls	r5, r3, #27
 8108b36:	d411      	bmi.n	8108b5c <__swsetup_r+0x50>
 8108b38:	2309      	movs	r3, #9
 8108b3a:	6033      	str	r3, [r6, #0]
 8108b3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8108b40:	81a3      	strh	r3, [r4, #12]
 8108b42:	f04f 30ff 	mov.w	r0, #4294967295
 8108b46:	e03e      	b.n	8108bc6 <__swsetup_r+0xba>
 8108b48:	4b25      	ldr	r3, [pc, #148]	; (8108be0 <__swsetup_r+0xd4>)
 8108b4a:	429c      	cmp	r4, r3
 8108b4c:	d101      	bne.n	8108b52 <__swsetup_r+0x46>
 8108b4e:	68ac      	ldr	r4, [r5, #8]
 8108b50:	e7eb      	b.n	8108b2a <__swsetup_r+0x1e>
 8108b52:	4b24      	ldr	r3, [pc, #144]	; (8108be4 <__swsetup_r+0xd8>)
 8108b54:	429c      	cmp	r4, r3
 8108b56:	bf08      	it	eq
 8108b58:	68ec      	ldreq	r4, [r5, #12]
 8108b5a:	e7e6      	b.n	8108b2a <__swsetup_r+0x1e>
 8108b5c:	0758      	lsls	r0, r3, #29
 8108b5e:	d512      	bpl.n	8108b86 <__swsetup_r+0x7a>
 8108b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8108b62:	b141      	cbz	r1, 8108b76 <__swsetup_r+0x6a>
 8108b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8108b68:	4299      	cmp	r1, r3
 8108b6a:	d002      	beq.n	8108b72 <__swsetup_r+0x66>
 8108b6c:	4630      	mov	r0, r6
 8108b6e:	f002 f939 	bl	810ade4 <_free_r>
 8108b72:	2300      	movs	r3, #0
 8108b74:	6363      	str	r3, [r4, #52]	; 0x34
 8108b76:	89a3      	ldrh	r3, [r4, #12]
 8108b78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8108b7c:	81a3      	strh	r3, [r4, #12]
 8108b7e:	2300      	movs	r3, #0
 8108b80:	6063      	str	r3, [r4, #4]
 8108b82:	6923      	ldr	r3, [r4, #16]
 8108b84:	6023      	str	r3, [r4, #0]
 8108b86:	89a3      	ldrh	r3, [r4, #12]
 8108b88:	f043 0308 	orr.w	r3, r3, #8
 8108b8c:	81a3      	strh	r3, [r4, #12]
 8108b8e:	6923      	ldr	r3, [r4, #16]
 8108b90:	b94b      	cbnz	r3, 8108ba6 <__swsetup_r+0x9a>
 8108b92:	89a3      	ldrh	r3, [r4, #12]
 8108b94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8108b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8108b9c:	d003      	beq.n	8108ba6 <__swsetup_r+0x9a>
 8108b9e:	4621      	mov	r1, r4
 8108ba0:	4630      	mov	r0, r6
 8108ba2:	f001 fbed 	bl	810a380 <__smakebuf_r>
 8108ba6:	89a0      	ldrh	r0, [r4, #12]
 8108ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8108bac:	f010 0301 	ands.w	r3, r0, #1
 8108bb0:	d00a      	beq.n	8108bc8 <__swsetup_r+0xbc>
 8108bb2:	2300      	movs	r3, #0
 8108bb4:	60a3      	str	r3, [r4, #8]
 8108bb6:	6963      	ldr	r3, [r4, #20]
 8108bb8:	425b      	negs	r3, r3
 8108bba:	61a3      	str	r3, [r4, #24]
 8108bbc:	6923      	ldr	r3, [r4, #16]
 8108bbe:	b943      	cbnz	r3, 8108bd2 <__swsetup_r+0xc6>
 8108bc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8108bc4:	d1ba      	bne.n	8108b3c <__swsetup_r+0x30>
 8108bc6:	bd70      	pop	{r4, r5, r6, pc}
 8108bc8:	0781      	lsls	r1, r0, #30
 8108bca:	bf58      	it	pl
 8108bcc:	6963      	ldrpl	r3, [r4, #20]
 8108bce:	60a3      	str	r3, [r4, #8]
 8108bd0:	e7f4      	b.n	8108bbc <__swsetup_r+0xb0>
 8108bd2:	2000      	movs	r0, #0
 8108bd4:	e7f7      	b.n	8108bc6 <__swsetup_r+0xba>
 8108bd6:	bf00      	nop
 8108bd8:	1000001c 	.word	0x1000001c
 8108bdc:	0810be24 	.word	0x0810be24
 8108be0:	0810be44 	.word	0x0810be44
 8108be4:	0810be04 	.word	0x0810be04

08108be8 <quorem>:
 8108be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108bec:	6903      	ldr	r3, [r0, #16]
 8108bee:	690c      	ldr	r4, [r1, #16]
 8108bf0:	42a3      	cmp	r3, r4
 8108bf2:	4607      	mov	r7, r0
 8108bf4:	f2c0 8081 	blt.w	8108cfa <quorem+0x112>
 8108bf8:	3c01      	subs	r4, #1
 8108bfa:	f101 0814 	add.w	r8, r1, #20
 8108bfe:	f100 0514 	add.w	r5, r0, #20
 8108c02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8108c06:	9301      	str	r3, [sp, #4]
 8108c08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8108c0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8108c10:	3301      	adds	r3, #1
 8108c12:	429a      	cmp	r2, r3
 8108c14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8108c18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8108c1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8108c20:	d331      	bcc.n	8108c86 <quorem+0x9e>
 8108c22:	f04f 0e00 	mov.w	lr, #0
 8108c26:	4640      	mov	r0, r8
 8108c28:	46ac      	mov	ip, r5
 8108c2a:	46f2      	mov	sl, lr
 8108c2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8108c30:	b293      	uxth	r3, r2
 8108c32:	fb06 e303 	mla	r3, r6, r3, lr
 8108c36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8108c3a:	b29b      	uxth	r3, r3
 8108c3c:	ebaa 0303 	sub.w	r3, sl, r3
 8108c40:	f8dc a000 	ldr.w	sl, [ip]
 8108c44:	0c12      	lsrs	r2, r2, #16
 8108c46:	fa13 f38a 	uxtah	r3, r3, sl
 8108c4a:	fb06 e202 	mla	r2, r6, r2, lr
 8108c4e:	9300      	str	r3, [sp, #0]
 8108c50:	9b00      	ldr	r3, [sp, #0]
 8108c52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8108c56:	b292      	uxth	r2, r2
 8108c58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8108c5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8108c60:	f8bd 3000 	ldrh.w	r3, [sp]
 8108c64:	4581      	cmp	r9, r0
 8108c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8108c6a:	f84c 3b04 	str.w	r3, [ip], #4
 8108c6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8108c72:	d2db      	bcs.n	8108c2c <quorem+0x44>
 8108c74:	f855 300b 	ldr.w	r3, [r5, fp]
 8108c78:	b92b      	cbnz	r3, 8108c86 <quorem+0x9e>
 8108c7a:	9b01      	ldr	r3, [sp, #4]
 8108c7c:	3b04      	subs	r3, #4
 8108c7e:	429d      	cmp	r5, r3
 8108c80:	461a      	mov	r2, r3
 8108c82:	d32e      	bcc.n	8108ce2 <quorem+0xfa>
 8108c84:	613c      	str	r4, [r7, #16]
 8108c86:	4638      	mov	r0, r7
 8108c88:	f001 fea0 	bl	810a9cc <__mcmp>
 8108c8c:	2800      	cmp	r0, #0
 8108c8e:	db24      	blt.n	8108cda <quorem+0xf2>
 8108c90:	3601      	adds	r6, #1
 8108c92:	4628      	mov	r0, r5
 8108c94:	f04f 0c00 	mov.w	ip, #0
 8108c98:	f858 2b04 	ldr.w	r2, [r8], #4
 8108c9c:	f8d0 e000 	ldr.w	lr, [r0]
 8108ca0:	b293      	uxth	r3, r2
 8108ca2:	ebac 0303 	sub.w	r3, ip, r3
 8108ca6:	0c12      	lsrs	r2, r2, #16
 8108ca8:	fa13 f38e 	uxtah	r3, r3, lr
 8108cac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8108cb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8108cb4:	b29b      	uxth	r3, r3
 8108cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8108cba:	45c1      	cmp	r9, r8
 8108cbc:	f840 3b04 	str.w	r3, [r0], #4
 8108cc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8108cc4:	d2e8      	bcs.n	8108c98 <quorem+0xb0>
 8108cc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8108cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8108cce:	b922      	cbnz	r2, 8108cda <quorem+0xf2>
 8108cd0:	3b04      	subs	r3, #4
 8108cd2:	429d      	cmp	r5, r3
 8108cd4:	461a      	mov	r2, r3
 8108cd6:	d30a      	bcc.n	8108cee <quorem+0x106>
 8108cd8:	613c      	str	r4, [r7, #16]
 8108cda:	4630      	mov	r0, r6
 8108cdc:	b003      	add	sp, #12
 8108cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108ce2:	6812      	ldr	r2, [r2, #0]
 8108ce4:	3b04      	subs	r3, #4
 8108ce6:	2a00      	cmp	r2, #0
 8108ce8:	d1cc      	bne.n	8108c84 <quorem+0x9c>
 8108cea:	3c01      	subs	r4, #1
 8108cec:	e7c7      	b.n	8108c7e <quorem+0x96>
 8108cee:	6812      	ldr	r2, [r2, #0]
 8108cf0:	3b04      	subs	r3, #4
 8108cf2:	2a00      	cmp	r2, #0
 8108cf4:	d1f0      	bne.n	8108cd8 <quorem+0xf0>
 8108cf6:	3c01      	subs	r4, #1
 8108cf8:	e7eb      	b.n	8108cd2 <quorem+0xea>
 8108cfa:	2000      	movs	r0, #0
 8108cfc:	e7ee      	b.n	8108cdc <quorem+0xf4>
	...

08108d00 <_dtoa_r>:
 8108d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108d04:	ed2d 8b04 	vpush	{d8-d9}
 8108d08:	ec57 6b10 	vmov	r6, r7, d0
 8108d0c:	b093      	sub	sp, #76	; 0x4c
 8108d0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8108d10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8108d14:	9106      	str	r1, [sp, #24]
 8108d16:	ee10 aa10 	vmov	sl, s0
 8108d1a:	4604      	mov	r4, r0
 8108d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8108d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8108d20:	46bb      	mov	fp, r7
 8108d22:	b975      	cbnz	r5, 8108d42 <_dtoa_r+0x42>
 8108d24:	2010      	movs	r0, #16
 8108d26:	f001 fb6b 	bl	810a400 <malloc>
 8108d2a:	4602      	mov	r2, r0
 8108d2c:	6260      	str	r0, [r4, #36]	; 0x24
 8108d2e:	b920      	cbnz	r0, 8108d3a <_dtoa_r+0x3a>
 8108d30:	4ba7      	ldr	r3, [pc, #668]	; (8108fd0 <_dtoa_r+0x2d0>)
 8108d32:	21ea      	movs	r1, #234	; 0xea
 8108d34:	48a7      	ldr	r0, [pc, #668]	; (8108fd4 <_dtoa_r+0x2d4>)
 8108d36:	f002 fcc1 	bl	810b6bc <__assert_func>
 8108d3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8108d3e:	6005      	str	r5, [r0, #0]
 8108d40:	60c5      	str	r5, [r0, #12]
 8108d42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8108d44:	6819      	ldr	r1, [r3, #0]
 8108d46:	b151      	cbz	r1, 8108d5e <_dtoa_r+0x5e>
 8108d48:	685a      	ldr	r2, [r3, #4]
 8108d4a:	604a      	str	r2, [r1, #4]
 8108d4c:	2301      	movs	r3, #1
 8108d4e:	4093      	lsls	r3, r2
 8108d50:	608b      	str	r3, [r1, #8]
 8108d52:	4620      	mov	r0, r4
 8108d54:	f001 fbae 	bl	810a4b4 <_Bfree>
 8108d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8108d5a:	2200      	movs	r2, #0
 8108d5c:	601a      	str	r2, [r3, #0]
 8108d5e:	1e3b      	subs	r3, r7, #0
 8108d60:	bfaa      	itet	ge
 8108d62:	2300      	movge	r3, #0
 8108d64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8108d68:	f8c8 3000 	strge.w	r3, [r8]
 8108d6c:	4b9a      	ldr	r3, [pc, #616]	; (8108fd8 <_dtoa_r+0x2d8>)
 8108d6e:	bfbc      	itt	lt
 8108d70:	2201      	movlt	r2, #1
 8108d72:	f8c8 2000 	strlt.w	r2, [r8]
 8108d76:	ea33 030b 	bics.w	r3, r3, fp
 8108d7a:	d11b      	bne.n	8108db4 <_dtoa_r+0xb4>
 8108d7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8108d7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8108d82:	6013      	str	r3, [r2, #0]
 8108d84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108d88:	4333      	orrs	r3, r6
 8108d8a:	f000 8592 	beq.w	81098b2 <_dtoa_r+0xbb2>
 8108d8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108d90:	b963      	cbnz	r3, 8108dac <_dtoa_r+0xac>
 8108d92:	4b92      	ldr	r3, [pc, #584]	; (8108fdc <_dtoa_r+0x2dc>)
 8108d94:	e022      	b.n	8108ddc <_dtoa_r+0xdc>
 8108d96:	4b92      	ldr	r3, [pc, #584]	; (8108fe0 <_dtoa_r+0x2e0>)
 8108d98:	9301      	str	r3, [sp, #4]
 8108d9a:	3308      	adds	r3, #8
 8108d9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8108d9e:	6013      	str	r3, [r2, #0]
 8108da0:	9801      	ldr	r0, [sp, #4]
 8108da2:	b013      	add	sp, #76	; 0x4c
 8108da4:	ecbd 8b04 	vpop	{d8-d9}
 8108da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108dac:	4b8b      	ldr	r3, [pc, #556]	; (8108fdc <_dtoa_r+0x2dc>)
 8108dae:	9301      	str	r3, [sp, #4]
 8108db0:	3303      	adds	r3, #3
 8108db2:	e7f3      	b.n	8108d9c <_dtoa_r+0x9c>
 8108db4:	2200      	movs	r2, #0
 8108db6:	2300      	movs	r3, #0
 8108db8:	4650      	mov	r0, sl
 8108dba:	4659      	mov	r1, fp
 8108dbc:	f7f7 ff0c 	bl	8100bd8 <__aeabi_dcmpeq>
 8108dc0:	ec4b ab19 	vmov	d9, sl, fp
 8108dc4:	4680      	mov	r8, r0
 8108dc6:	b158      	cbz	r0, 8108de0 <_dtoa_r+0xe0>
 8108dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8108dca:	2301      	movs	r3, #1
 8108dcc:	6013      	str	r3, [r2, #0]
 8108dce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108dd0:	2b00      	cmp	r3, #0
 8108dd2:	f000 856b 	beq.w	81098ac <_dtoa_r+0xbac>
 8108dd6:	4883      	ldr	r0, [pc, #524]	; (8108fe4 <_dtoa_r+0x2e4>)
 8108dd8:	6018      	str	r0, [r3, #0]
 8108dda:	1e43      	subs	r3, r0, #1
 8108ddc:	9301      	str	r3, [sp, #4]
 8108dde:	e7df      	b.n	8108da0 <_dtoa_r+0xa0>
 8108de0:	ec4b ab10 	vmov	d0, sl, fp
 8108de4:	aa10      	add	r2, sp, #64	; 0x40
 8108de6:	a911      	add	r1, sp, #68	; 0x44
 8108de8:	4620      	mov	r0, r4
 8108dea:	f001 ff11 	bl	810ac10 <__d2b>
 8108dee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8108df2:	ee08 0a10 	vmov	s16, r0
 8108df6:	2d00      	cmp	r5, #0
 8108df8:	f000 8084 	beq.w	8108f04 <_dtoa_r+0x204>
 8108dfc:	ee19 3a90 	vmov	r3, s19
 8108e00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8108e04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8108e08:	4656      	mov	r6, sl
 8108e0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8108e0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8108e12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8108e16:	4b74      	ldr	r3, [pc, #464]	; (8108fe8 <_dtoa_r+0x2e8>)
 8108e18:	2200      	movs	r2, #0
 8108e1a:	4630      	mov	r0, r6
 8108e1c:	4639      	mov	r1, r7
 8108e1e:	f7f7 fabb 	bl	8100398 <__aeabi_dsub>
 8108e22:	a365      	add	r3, pc, #404	; (adr r3, 8108fb8 <_dtoa_r+0x2b8>)
 8108e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108e28:	f7f7 fc6e 	bl	8100708 <__aeabi_dmul>
 8108e2c:	a364      	add	r3, pc, #400	; (adr r3, 8108fc0 <_dtoa_r+0x2c0>)
 8108e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108e32:	f7f7 fab3 	bl	810039c <__adddf3>
 8108e36:	4606      	mov	r6, r0
 8108e38:	4628      	mov	r0, r5
 8108e3a:	460f      	mov	r7, r1
 8108e3c:	f7f7 fbfa 	bl	8100634 <__aeabi_i2d>
 8108e40:	a361      	add	r3, pc, #388	; (adr r3, 8108fc8 <_dtoa_r+0x2c8>)
 8108e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108e46:	f7f7 fc5f 	bl	8100708 <__aeabi_dmul>
 8108e4a:	4602      	mov	r2, r0
 8108e4c:	460b      	mov	r3, r1
 8108e4e:	4630      	mov	r0, r6
 8108e50:	4639      	mov	r1, r7
 8108e52:	f7f7 faa3 	bl	810039c <__adddf3>
 8108e56:	4606      	mov	r6, r0
 8108e58:	460f      	mov	r7, r1
 8108e5a:	f7f7 ff05 	bl	8100c68 <__aeabi_d2iz>
 8108e5e:	2200      	movs	r2, #0
 8108e60:	9000      	str	r0, [sp, #0]
 8108e62:	2300      	movs	r3, #0
 8108e64:	4630      	mov	r0, r6
 8108e66:	4639      	mov	r1, r7
 8108e68:	f7f7 fec0 	bl	8100bec <__aeabi_dcmplt>
 8108e6c:	b150      	cbz	r0, 8108e84 <_dtoa_r+0x184>
 8108e6e:	9800      	ldr	r0, [sp, #0]
 8108e70:	f7f7 fbe0 	bl	8100634 <__aeabi_i2d>
 8108e74:	4632      	mov	r2, r6
 8108e76:	463b      	mov	r3, r7
 8108e78:	f7f7 feae 	bl	8100bd8 <__aeabi_dcmpeq>
 8108e7c:	b910      	cbnz	r0, 8108e84 <_dtoa_r+0x184>
 8108e7e:	9b00      	ldr	r3, [sp, #0]
 8108e80:	3b01      	subs	r3, #1
 8108e82:	9300      	str	r3, [sp, #0]
 8108e84:	9b00      	ldr	r3, [sp, #0]
 8108e86:	2b16      	cmp	r3, #22
 8108e88:	d85a      	bhi.n	8108f40 <_dtoa_r+0x240>
 8108e8a:	9a00      	ldr	r2, [sp, #0]
 8108e8c:	4b57      	ldr	r3, [pc, #348]	; (8108fec <_dtoa_r+0x2ec>)
 8108e8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108e96:	ec51 0b19 	vmov	r0, r1, d9
 8108e9a:	f7f7 fea7 	bl	8100bec <__aeabi_dcmplt>
 8108e9e:	2800      	cmp	r0, #0
 8108ea0:	d050      	beq.n	8108f44 <_dtoa_r+0x244>
 8108ea2:	9b00      	ldr	r3, [sp, #0]
 8108ea4:	3b01      	subs	r3, #1
 8108ea6:	9300      	str	r3, [sp, #0]
 8108ea8:	2300      	movs	r3, #0
 8108eaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8108eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8108eae:	1b5d      	subs	r5, r3, r5
 8108eb0:	1e6b      	subs	r3, r5, #1
 8108eb2:	9305      	str	r3, [sp, #20]
 8108eb4:	bf45      	ittet	mi
 8108eb6:	f1c5 0301 	rsbmi	r3, r5, #1
 8108eba:	9304      	strmi	r3, [sp, #16]
 8108ebc:	2300      	movpl	r3, #0
 8108ebe:	2300      	movmi	r3, #0
 8108ec0:	bf4c      	ite	mi
 8108ec2:	9305      	strmi	r3, [sp, #20]
 8108ec4:	9304      	strpl	r3, [sp, #16]
 8108ec6:	9b00      	ldr	r3, [sp, #0]
 8108ec8:	2b00      	cmp	r3, #0
 8108eca:	db3d      	blt.n	8108f48 <_dtoa_r+0x248>
 8108ecc:	9b05      	ldr	r3, [sp, #20]
 8108ece:	9a00      	ldr	r2, [sp, #0]
 8108ed0:	920a      	str	r2, [sp, #40]	; 0x28
 8108ed2:	4413      	add	r3, r2
 8108ed4:	9305      	str	r3, [sp, #20]
 8108ed6:	2300      	movs	r3, #0
 8108ed8:	9307      	str	r3, [sp, #28]
 8108eda:	9b06      	ldr	r3, [sp, #24]
 8108edc:	2b09      	cmp	r3, #9
 8108ede:	f200 8089 	bhi.w	8108ff4 <_dtoa_r+0x2f4>
 8108ee2:	2b05      	cmp	r3, #5
 8108ee4:	bfc4      	itt	gt
 8108ee6:	3b04      	subgt	r3, #4
 8108ee8:	9306      	strgt	r3, [sp, #24]
 8108eea:	9b06      	ldr	r3, [sp, #24]
 8108eec:	f1a3 0302 	sub.w	r3, r3, #2
 8108ef0:	bfcc      	ite	gt
 8108ef2:	2500      	movgt	r5, #0
 8108ef4:	2501      	movle	r5, #1
 8108ef6:	2b03      	cmp	r3, #3
 8108ef8:	f200 8087 	bhi.w	810900a <_dtoa_r+0x30a>
 8108efc:	e8df f003 	tbb	[pc, r3]
 8108f00:	59383a2d 	.word	0x59383a2d
 8108f04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8108f08:	441d      	add	r5, r3
 8108f0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8108f0e:	2b20      	cmp	r3, #32
 8108f10:	bfc1      	itttt	gt
 8108f12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8108f16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8108f1a:	fa0b f303 	lslgt.w	r3, fp, r3
 8108f1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8108f22:	bfda      	itte	le
 8108f24:	f1c3 0320 	rsble	r3, r3, #32
 8108f28:	fa06 f003 	lslle.w	r0, r6, r3
 8108f2c:	4318      	orrgt	r0, r3
 8108f2e:	f7f7 fb71 	bl	8100614 <__aeabi_ui2d>
 8108f32:	2301      	movs	r3, #1
 8108f34:	4606      	mov	r6, r0
 8108f36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8108f3a:	3d01      	subs	r5, #1
 8108f3c:	930e      	str	r3, [sp, #56]	; 0x38
 8108f3e:	e76a      	b.n	8108e16 <_dtoa_r+0x116>
 8108f40:	2301      	movs	r3, #1
 8108f42:	e7b2      	b.n	8108eaa <_dtoa_r+0x1aa>
 8108f44:	900b      	str	r0, [sp, #44]	; 0x2c
 8108f46:	e7b1      	b.n	8108eac <_dtoa_r+0x1ac>
 8108f48:	9b04      	ldr	r3, [sp, #16]
 8108f4a:	9a00      	ldr	r2, [sp, #0]
 8108f4c:	1a9b      	subs	r3, r3, r2
 8108f4e:	9304      	str	r3, [sp, #16]
 8108f50:	4253      	negs	r3, r2
 8108f52:	9307      	str	r3, [sp, #28]
 8108f54:	2300      	movs	r3, #0
 8108f56:	930a      	str	r3, [sp, #40]	; 0x28
 8108f58:	e7bf      	b.n	8108eda <_dtoa_r+0x1da>
 8108f5a:	2300      	movs	r3, #0
 8108f5c:	9308      	str	r3, [sp, #32]
 8108f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108f60:	2b00      	cmp	r3, #0
 8108f62:	dc55      	bgt.n	8109010 <_dtoa_r+0x310>
 8108f64:	2301      	movs	r3, #1
 8108f66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8108f6a:	461a      	mov	r2, r3
 8108f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8108f6e:	e00c      	b.n	8108f8a <_dtoa_r+0x28a>
 8108f70:	2301      	movs	r3, #1
 8108f72:	e7f3      	b.n	8108f5c <_dtoa_r+0x25c>
 8108f74:	2300      	movs	r3, #0
 8108f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8108f78:	9308      	str	r3, [sp, #32]
 8108f7a:	9b00      	ldr	r3, [sp, #0]
 8108f7c:	4413      	add	r3, r2
 8108f7e:	9302      	str	r3, [sp, #8]
 8108f80:	3301      	adds	r3, #1
 8108f82:	2b01      	cmp	r3, #1
 8108f84:	9303      	str	r3, [sp, #12]
 8108f86:	bfb8      	it	lt
 8108f88:	2301      	movlt	r3, #1
 8108f8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8108f8c:	2200      	movs	r2, #0
 8108f8e:	6042      	str	r2, [r0, #4]
 8108f90:	2204      	movs	r2, #4
 8108f92:	f102 0614 	add.w	r6, r2, #20
 8108f96:	429e      	cmp	r6, r3
 8108f98:	6841      	ldr	r1, [r0, #4]
 8108f9a:	d93d      	bls.n	8109018 <_dtoa_r+0x318>
 8108f9c:	4620      	mov	r0, r4
 8108f9e:	f001 fa49 	bl	810a434 <_Balloc>
 8108fa2:	9001      	str	r0, [sp, #4]
 8108fa4:	2800      	cmp	r0, #0
 8108fa6:	d13b      	bne.n	8109020 <_dtoa_r+0x320>
 8108fa8:	4b11      	ldr	r3, [pc, #68]	; (8108ff0 <_dtoa_r+0x2f0>)
 8108faa:	4602      	mov	r2, r0
 8108fac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8108fb0:	e6c0      	b.n	8108d34 <_dtoa_r+0x34>
 8108fb2:	2301      	movs	r3, #1
 8108fb4:	e7df      	b.n	8108f76 <_dtoa_r+0x276>
 8108fb6:	bf00      	nop
 8108fb8:	636f4361 	.word	0x636f4361
 8108fbc:	3fd287a7 	.word	0x3fd287a7
 8108fc0:	8b60c8b3 	.word	0x8b60c8b3
 8108fc4:	3fc68a28 	.word	0x3fc68a28
 8108fc8:	509f79fb 	.word	0x509f79fb
 8108fcc:	3fd34413 	.word	0x3fd34413
 8108fd0:	0810bd7e 	.word	0x0810bd7e
 8108fd4:	0810bd95 	.word	0x0810bd95
 8108fd8:	7ff00000 	.word	0x7ff00000
 8108fdc:	0810bd7a 	.word	0x0810bd7a
 8108fe0:	0810bd71 	.word	0x0810bd71
 8108fe4:	0810bbf5 	.word	0x0810bbf5
 8108fe8:	3ff80000 	.word	0x3ff80000
 8108fec:	0810bf68 	.word	0x0810bf68
 8108ff0:	0810bdf0 	.word	0x0810bdf0
 8108ff4:	2501      	movs	r5, #1
 8108ff6:	2300      	movs	r3, #0
 8108ff8:	9306      	str	r3, [sp, #24]
 8108ffa:	9508      	str	r5, [sp, #32]
 8108ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8109000:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8109004:	2200      	movs	r2, #0
 8109006:	2312      	movs	r3, #18
 8109008:	e7b0      	b.n	8108f6c <_dtoa_r+0x26c>
 810900a:	2301      	movs	r3, #1
 810900c:	9308      	str	r3, [sp, #32]
 810900e:	e7f5      	b.n	8108ffc <_dtoa_r+0x2fc>
 8109010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109012:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8109016:	e7b8      	b.n	8108f8a <_dtoa_r+0x28a>
 8109018:	3101      	adds	r1, #1
 810901a:	6041      	str	r1, [r0, #4]
 810901c:	0052      	lsls	r2, r2, #1
 810901e:	e7b8      	b.n	8108f92 <_dtoa_r+0x292>
 8109020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109022:	9a01      	ldr	r2, [sp, #4]
 8109024:	601a      	str	r2, [r3, #0]
 8109026:	9b03      	ldr	r3, [sp, #12]
 8109028:	2b0e      	cmp	r3, #14
 810902a:	f200 809d 	bhi.w	8109168 <_dtoa_r+0x468>
 810902e:	2d00      	cmp	r5, #0
 8109030:	f000 809a 	beq.w	8109168 <_dtoa_r+0x468>
 8109034:	9b00      	ldr	r3, [sp, #0]
 8109036:	2b00      	cmp	r3, #0
 8109038:	dd32      	ble.n	81090a0 <_dtoa_r+0x3a0>
 810903a:	4ab7      	ldr	r2, [pc, #732]	; (8109318 <_dtoa_r+0x618>)
 810903c:	f003 030f 	and.w	r3, r3, #15
 8109040:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8109044:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109048:	9b00      	ldr	r3, [sp, #0]
 810904a:	05d8      	lsls	r0, r3, #23
 810904c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8109050:	d516      	bpl.n	8109080 <_dtoa_r+0x380>
 8109052:	4bb2      	ldr	r3, [pc, #712]	; (810931c <_dtoa_r+0x61c>)
 8109054:	ec51 0b19 	vmov	r0, r1, d9
 8109058:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810905c:	f7f7 fc7e 	bl	810095c <__aeabi_ddiv>
 8109060:	f007 070f 	and.w	r7, r7, #15
 8109064:	4682      	mov	sl, r0
 8109066:	468b      	mov	fp, r1
 8109068:	2503      	movs	r5, #3
 810906a:	4eac      	ldr	r6, [pc, #688]	; (810931c <_dtoa_r+0x61c>)
 810906c:	b957      	cbnz	r7, 8109084 <_dtoa_r+0x384>
 810906e:	4642      	mov	r2, r8
 8109070:	464b      	mov	r3, r9
 8109072:	4650      	mov	r0, sl
 8109074:	4659      	mov	r1, fp
 8109076:	f7f7 fc71 	bl	810095c <__aeabi_ddiv>
 810907a:	4682      	mov	sl, r0
 810907c:	468b      	mov	fp, r1
 810907e:	e028      	b.n	81090d2 <_dtoa_r+0x3d2>
 8109080:	2502      	movs	r5, #2
 8109082:	e7f2      	b.n	810906a <_dtoa_r+0x36a>
 8109084:	07f9      	lsls	r1, r7, #31
 8109086:	d508      	bpl.n	810909a <_dtoa_r+0x39a>
 8109088:	4640      	mov	r0, r8
 810908a:	4649      	mov	r1, r9
 810908c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8109090:	f7f7 fb3a 	bl	8100708 <__aeabi_dmul>
 8109094:	3501      	adds	r5, #1
 8109096:	4680      	mov	r8, r0
 8109098:	4689      	mov	r9, r1
 810909a:	107f      	asrs	r7, r7, #1
 810909c:	3608      	adds	r6, #8
 810909e:	e7e5      	b.n	810906c <_dtoa_r+0x36c>
 81090a0:	f000 809b 	beq.w	81091da <_dtoa_r+0x4da>
 81090a4:	9b00      	ldr	r3, [sp, #0]
 81090a6:	4f9d      	ldr	r7, [pc, #628]	; (810931c <_dtoa_r+0x61c>)
 81090a8:	425e      	negs	r6, r3
 81090aa:	4b9b      	ldr	r3, [pc, #620]	; (8109318 <_dtoa_r+0x618>)
 81090ac:	f006 020f 	and.w	r2, r6, #15
 81090b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81090b8:	ec51 0b19 	vmov	r0, r1, d9
 81090bc:	f7f7 fb24 	bl	8100708 <__aeabi_dmul>
 81090c0:	1136      	asrs	r6, r6, #4
 81090c2:	4682      	mov	sl, r0
 81090c4:	468b      	mov	fp, r1
 81090c6:	2300      	movs	r3, #0
 81090c8:	2502      	movs	r5, #2
 81090ca:	2e00      	cmp	r6, #0
 81090cc:	d17a      	bne.n	81091c4 <_dtoa_r+0x4c4>
 81090ce:	2b00      	cmp	r3, #0
 81090d0:	d1d3      	bne.n	810907a <_dtoa_r+0x37a>
 81090d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81090d4:	2b00      	cmp	r3, #0
 81090d6:	f000 8082 	beq.w	81091de <_dtoa_r+0x4de>
 81090da:	4b91      	ldr	r3, [pc, #580]	; (8109320 <_dtoa_r+0x620>)
 81090dc:	2200      	movs	r2, #0
 81090de:	4650      	mov	r0, sl
 81090e0:	4659      	mov	r1, fp
 81090e2:	f7f7 fd83 	bl	8100bec <__aeabi_dcmplt>
 81090e6:	2800      	cmp	r0, #0
 81090e8:	d079      	beq.n	81091de <_dtoa_r+0x4de>
 81090ea:	9b03      	ldr	r3, [sp, #12]
 81090ec:	2b00      	cmp	r3, #0
 81090ee:	d076      	beq.n	81091de <_dtoa_r+0x4de>
 81090f0:	9b02      	ldr	r3, [sp, #8]
 81090f2:	2b00      	cmp	r3, #0
 81090f4:	dd36      	ble.n	8109164 <_dtoa_r+0x464>
 81090f6:	9b00      	ldr	r3, [sp, #0]
 81090f8:	4650      	mov	r0, sl
 81090fa:	4659      	mov	r1, fp
 81090fc:	1e5f      	subs	r7, r3, #1
 81090fe:	2200      	movs	r2, #0
 8109100:	4b88      	ldr	r3, [pc, #544]	; (8109324 <_dtoa_r+0x624>)
 8109102:	f7f7 fb01 	bl	8100708 <__aeabi_dmul>
 8109106:	9e02      	ldr	r6, [sp, #8]
 8109108:	4682      	mov	sl, r0
 810910a:	468b      	mov	fp, r1
 810910c:	3501      	adds	r5, #1
 810910e:	4628      	mov	r0, r5
 8109110:	f7f7 fa90 	bl	8100634 <__aeabi_i2d>
 8109114:	4652      	mov	r2, sl
 8109116:	465b      	mov	r3, fp
 8109118:	f7f7 faf6 	bl	8100708 <__aeabi_dmul>
 810911c:	4b82      	ldr	r3, [pc, #520]	; (8109328 <_dtoa_r+0x628>)
 810911e:	2200      	movs	r2, #0
 8109120:	f7f7 f93c 	bl	810039c <__adddf3>
 8109124:	46d0      	mov	r8, sl
 8109126:	46d9      	mov	r9, fp
 8109128:	4682      	mov	sl, r0
 810912a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 810912e:	2e00      	cmp	r6, #0
 8109130:	d158      	bne.n	81091e4 <_dtoa_r+0x4e4>
 8109132:	4b7e      	ldr	r3, [pc, #504]	; (810932c <_dtoa_r+0x62c>)
 8109134:	2200      	movs	r2, #0
 8109136:	4640      	mov	r0, r8
 8109138:	4649      	mov	r1, r9
 810913a:	f7f7 f92d 	bl	8100398 <__aeabi_dsub>
 810913e:	4652      	mov	r2, sl
 8109140:	465b      	mov	r3, fp
 8109142:	4680      	mov	r8, r0
 8109144:	4689      	mov	r9, r1
 8109146:	f7f7 fd6f 	bl	8100c28 <__aeabi_dcmpgt>
 810914a:	2800      	cmp	r0, #0
 810914c:	f040 8295 	bne.w	810967a <_dtoa_r+0x97a>
 8109150:	4652      	mov	r2, sl
 8109152:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8109156:	4640      	mov	r0, r8
 8109158:	4649      	mov	r1, r9
 810915a:	f7f7 fd47 	bl	8100bec <__aeabi_dcmplt>
 810915e:	2800      	cmp	r0, #0
 8109160:	f040 8289 	bne.w	8109676 <_dtoa_r+0x976>
 8109164:	ec5b ab19 	vmov	sl, fp, d9
 8109168:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810916a:	2b00      	cmp	r3, #0
 810916c:	f2c0 8148 	blt.w	8109400 <_dtoa_r+0x700>
 8109170:	9a00      	ldr	r2, [sp, #0]
 8109172:	2a0e      	cmp	r2, #14
 8109174:	f300 8144 	bgt.w	8109400 <_dtoa_r+0x700>
 8109178:	4b67      	ldr	r3, [pc, #412]	; (8109318 <_dtoa_r+0x618>)
 810917a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810917e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109184:	2b00      	cmp	r3, #0
 8109186:	f280 80d5 	bge.w	8109334 <_dtoa_r+0x634>
 810918a:	9b03      	ldr	r3, [sp, #12]
 810918c:	2b00      	cmp	r3, #0
 810918e:	f300 80d1 	bgt.w	8109334 <_dtoa_r+0x634>
 8109192:	f040 826f 	bne.w	8109674 <_dtoa_r+0x974>
 8109196:	4b65      	ldr	r3, [pc, #404]	; (810932c <_dtoa_r+0x62c>)
 8109198:	2200      	movs	r2, #0
 810919a:	4640      	mov	r0, r8
 810919c:	4649      	mov	r1, r9
 810919e:	f7f7 fab3 	bl	8100708 <__aeabi_dmul>
 81091a2:	4652      	mov	r2, sl
 81091a4:	465b      	mov	r3, fp
 81091a6:	f7f7 fd35 	bl	8100c14 <__aeabi_dcmpge>
 81091aa:	9e03      	ldr	r6, [sp, #12]
 81091ac:	4637      	mov	r7, r6
 81091ae:	2800      	cmp	r0, #0
 81091b0:	f040 8245 	bne.w	810963e <_dtoa_r+0x93e>
 81091b4:	9d01      	ldr	r5, [sp, #4]
 81091b6:	2331      	movs	r3, #49	; 0x31
 81091b8:	f805 3b01 	strb.w	r3, [r5], #1
 81091bc:	9b00      	ldr	r3, [sp, #0]
 81091be:	3301      	adds	r3, #1
 81091c0:	9300      	str	r3, [sp, #0]
 81091c2:	e240      	b.n	8109646 <_dtoa_r+0x946>
 81091c4:	07f2      	lsls	r2, r6, #31
 81091c6:	d505      	bpl.n	81091d4 <_dtoa_r+0x4d4>
 81091c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81091cc:	f7f7 fa9c 	bl	8100708 <__aeabi_dmul>
 81091d0:	3501      	adds	r5, #1
 81091d2:	2301      	movs	r3, #1
 81091d4:	1076      	asrs	r6, r6, #1
 81091d6:	3708      	adds	r7, #8
 81091d8:	e777      	b.n	81090ca <_dtoa_r+0x3ca>
 81091da:	2502      	movs	r5, #2
 81091dc:	e779      	b.n	81090d2 <_dtoa_r+0x3d2>
 81091de:	9f00      	ldr	r7, [sp, #0]
 81091e0:	9e03      	ldr	r6, [sp, #12]
 81091e2:	e794      	b.n	810910e <_dtoa_r+0x40e>
 81091e4:	9901      	ldr	r1, [sp, #4]
 81091e6:	4b4c      	ldr	r3, [pc, #304]	; (8109318 <_dtoa_r+0x618>)
 81091e8:	4431      	add	r1, r6
 81091ea:	910d      	str	r1, [sp, #52]	; 0x34
 81091ec:	9908      	ldr	r1, [sp, #32]
 81091ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 81091f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81091f6:	2900      	cmp	r1, #0
 81091f8:	d043      	beq.n	8109282 <_dtoa_r+0x582>
 81091fa:	494d      	ldr	r1, [pc, #308]	; (8109330 <_dtoa_r+0x630>)
 81091fc:	2000      	movs	r0, #0
 81091fe:	f7f7 fbad 	bl	810095c <__aeabi_ddiv>
 8109202:	4652      	mov	r2, sl
 8109204:	465b      	mov	r3, fp
 8109206:	f7f7 f8c7 	bl	8100398 <__aeabi_dsub>
 810920a:	9d01      	ldr	r5, [sp, #4]
 810920c:	4682      	mov	sl, r0
 810920e:	468b      	mov	fp, r1
 8109210:	4649      	mov	r1, r9
 8109212:	4640      	mov	r0, r8
 8109214:	f7f7 fd28 	bl	8100c68 <__aeabi_d2iz>
 8109218:	4606      	mov	r6, r0
 810921a:	f7f7 fa0b 	bl	8100634 <__aeabi_i2d>
 810921e:	4602      	mov	r2, r0
 8109220:	460b      	mov	r3, r1
 8109222:	4640      	mov	r0, r8
 8109224:	4649      	mov	r1, r9
 8109226:	f7f7 f8b7 	bl	8100398 <__aeabi_dsub>
 810922a:	3630      	adds	r6, #48	; 0x30
 810922c:	f805 6b01 	strb.w	r6, [r5], #1
 8109230:	4652      	mov	r2, sl
 8109232:	465b      	mov	r3, fp
 8109234:	4680      	mov	r8, r0
 8109236:	4689      	mov	r9, r1
 8109238:	f7f7 fcd8 	bl	8100bec <__aeabi_dcmplt>
 810923c:	2800      	cmp	r0, #0
 810923e:	d163      	bne.n	8109308 <_dtoa_r+0x608>
 8109240:	4642      	mov	r2, r8
 8109242:	464b      	mov	r3, r9
 8109244:	4936      	ldr	r1, [pc, #216]	; (8109320 <_dtoa_r+0x620>)
 8109246:	2000      	movs	r0, #0
 8109248:	f7f7 f8a6 	bl	8100398 <__aeabi_dsub>
 810924c:	4652      	mov	r2, sl
 810924e:	465b      	mov	r3, fp
 8109250:	f7f7 fccc 	bl	8100bec <__aeabi_dcmplt>
 8109254:	2800      	cmp	r0, #0
 8109256:	f040 80b5 	bne.w	81093c4 <_dtoa_r+0x6c4>
 810925a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810925c:	429d      	cmp	r5, r3
 810925e:	d081      	beq.n	8109164 <_dtoa_r+0x464>
 8109260:	4b30      	ldr	r3, [pc, #192]	; (8109324 <_dtoa_r+0x624>)
 8109262:	2200      	movs	r2, #0
 8109264:	4650      	mov	r0, sl
 8109266:	4659      	mov	r1, fp
 8109268:	f7f7 fa4e 	bl	8100708 <__aeabi_dmul>
 810926c:	4b2d      	ldr	r3, [pc, #180]	; (8109324 <_dtoa_r+0x624>)
 810926e:	4682      	mov	sl, r0
 8109270:	468b      	mov	fp, r1
 8109272:	4640      	mov	r0, r8
 8109274:	4649      	mov	r1, r9
 8109276:	2200      	movs	r2, #0
 8109278:	f7f7 fa46 	bl	8100708 <__aeabi_dmul>
 810927c:	4680      	mov	r8, r0
 810927e:	4689      	mov	r9, r1
 8109280:	e7c6      	b.n	8109210 <_dtoa_r+0x510>
 8109282:	4650      	mov	r0, sl
 8109284:	4659      	mov	r1, fp
 8109286:	f7f7 fa3f 	bl	8100708 <__aeabi_dmul>
 810928a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810928c:	9d01      	ldr	r5, [sp, #4]
 810928e:	930f      	str	r3, [sp, #60]	; 0x3c
 8109290:	4682      	mov	sl, r0
 8109292:	468b      	mov	fp, r1
 8109294:	4649      	mov	r1, r9
 8109296:	4640      	mov	r0, r8
 8109298:	f7f7 fce6 	bl	8100c68 <__aeabi_d2iz>
 810929c:	4606      	mov	r6, r0
 810929e:	f7f7 f9c9 	bl	8100634 <__aeabi_i2d>
 81092a2:	3630      	adds	r6, #48	; 0x30
 81092a4:	4602      	mov	r2, r0
 81092a6:	460b      	mov	r3, r1
 81092a8:	4640      	mov	r0, r8
 81092aa:	4649      	mov	r1, r9
 81092ac:	f7f7 f874 	bl	8100398 <__aeabi_dsub>
 81092b0:	f805 6b01 	strb.w	r6, [r5], #1
 81092b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81092b6:	429d      	cmp	r5, r3
 81092b8:	4680      	mov	r8, r0
 81092ba:	4689      	mov	r9, r1
 81092bc:	f04f 0200 	mov.w	r2, #0
 81092c0:	d124      	bne.n	810930c <_dtoa_r+0x60c>
 81092c2:	4b1b      	ldr	r3, [pc, #108]	; (8109330 <_dtoa_r+0x630>)
 81092c4:	4650      	mov	r0, sl
 81092c6:	4659      	mov	r1, fp
 81092c8:	f7f7 f868 	bl	810039c <__adddf3>
 81092cc:	4602      	mov	r2, r0
 81092ce:	460b      	mov	r3, r1
 81092d0:	4640      	mov	r0, r8
 81092d2:	4649      	mov	r1, r9
 81092d4:	f7f7 fca8 	bl	8100c28 <__aeabi_dcmpgt>
 81092d8:	2800      	cmp	r0, #0
 81092da:	d173      	bne.n	81093c4 <_dtoa_r+0x6c4>
 81092dc:	4652      	mov	r2, sl
 81092de:	465b      	mov	r3, fp
 81092e0:	4913      	ldr	r1, [pc, #76]	; (8109330 <_dtoa_r+0x630>)
 81092e2:	2000      	movs	r0, #0
 81092e4:	f7f7 f858 	bl	8100398 <__aeabi_dsub>
 81092e8:	4602      	mov	r2, r0
 81092ea:	460b      	mov	r3, r1
 81092ec:	4640      	mov	r0, r8
 81092ee:	4649      	mov	r1, r9
 81092f0:	f7f7 fc7c 	bl	8100bec <__aeabi_dcmplt>
 81092f4:	2800      	cmp	r0, #0
 81092f6:	f43f af35 	beq.w	8109164 <_dtoa_r+0x464>
 81092fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 81092fc:	1e6b      	subs	r3, r5, #1
 81092fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8109300:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8109304:	2b30      	cmp	r3, #48	; 0x30
 8109306:	d0f8      	beq.n	81092fa <_dtoa_r+0x5fa>
 8109308:	9700      	str	r7, [sp, #0]
 810930a:	e049      	b.n	81093a0 <_dtoa_r+0x6a0>
 810930c:	4b05      	ldr	r3, [pc, #20]	; (8109324 <_dtoa_r+0x624>)
 810930e:	f7f7 f9fb 	bl	8100708 <__aeabi_dmul>
 8109312:	4680      	mov	r8, r0
 8109314:	4689      	mov	r9, r1
 8109316:	e7bd      	b.n	8109294 <_dtoa_r+0x594>
 8109318:	0810bf68 	.word	0x0810bf68
 810931c:	0810bf40 	.word	0x0810bf40
 8109320:	3ff00000 	.word	0x3ff00000
 8109324:	40240000 	.word	0x40240000
 8109328:	401c0000 	.word	0x401c0000
 810932c:	40140000 	.word	0x40140000
 8109330:	3fe00000 	.word	0x3fe00000
 8109334:	9d01      	ldr	r5, [sp, #4]
 8109336:	4656      	mov	r6, sl
 8109338:	465f      	mov	r7, fp
 810933a:	4642      	mov	r2, r8
 810933c:	464b      	mov	r3, r9
 810933e:	4630      	mov	r0, r6
 8109340:	4639      	mov	r1, r7
 8109342:	f7f7 fb0b 	bl	810095c <__aeabi_ddiv>
 8109346:	f7f7 fc8f 	bl	8100c68 <__aeabi_d2iz>
 810934a:	4682      	mov	sl, r0
 810934c:	f7f7 f972 	bl	8100634 <__aeabi_i2d>
 8109350:	4642      	mov	r2, r8
 8109352:	464b      	mov	r3, r9
 8109354:	f7f7 f9d8 	bl	8100708 <__aeabi_dmul>
 8109358:	4602      	mov	r2, r0
 810935a:	460b      	mov	r3, r1
 810935c:	4630      	mov	r0, r6
 810935e:	4639      	mov	r1, r7
 8109360:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8109364:	f7f7 f818 	bl	8100398 <__aeabi_dsub>
 8109368:	f805 6b01 	strb.w	r6, [r5], #1
 810936c:	9e01      	ldr	r6, [sp, #4]
 810936e:	9f03      	ldr	r7, [sp, #12]
 8109370:	1bae      	subs	r6, r5, r6
 8109372:	42b7      	cmp	r7, r6
 8109374:	4602      	mov	r2, r0
 8109376:	460b      	mov	r3, r1
 8109378:	d135      	bne.n	81093e6 <_dtoa_r+0x6e6>
 810937a:	f7f7 f80f 	bl	810039c <__adddf3>
 810937e:	4642      	mov	r2, r8
 8109380:	464b      	mov	r3, r9
 8109382:	4606      	mov	r6, r0
 8109384:	460f      	mov	r7, r1
 8109386:	f7f7 fc4f 	bl	8100c28 <__aeabi_dcmpgt>
 810938a:	b9d0      	cbnz	r0, 81093c2 <_dtoa_r+0x6c2>
 810938c:	4642      	mov	r2, r8
 810938e:	464b      	mov	r3, r9
 8109390:	4630      	mov	r0, r6
 8109392:	4639      	mov	r1, r7
 8109394:	f7f7 fc20 	bl	8100bd8 <__aeabi_dcmpeq>
 8109398:	b110      	cbz	r0, 81093a0 <_dtoa_r+0x6a0>
 810939a:	f01a 0f01 	tst.w	sl, #1
 810939e:	d110      	bne.n	81093c2 <_dtoa_r+0x6c2>
 81093a0:	4620      	mov	r0, r4
 81093a2:	ee18 1a10 	vmov	r1, s16
 81093a6:	f001 f885 	bl	810a4b4 <_Bfree>
 81093aa:	2300      	movs	r3, #0
 81093ac:	9800      	ldr	r0, [sp, #0]
 81093ae:	702b      	strb	r3, [r5, #0]
 81093b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81093b2:	3001      	adds	r0, #1
 81093b4:	6018      	str	r0, [r3, #0]
 81093b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81093b8:	2b00      	cmp	r3, #0
 81093ba:	f43f acf1 	beq.w	8108da0 <_dtoa_r+0xa0>
 81093be:	601d      	str	r5, [r3, #0]
 81093c0:	e4ee      	b.n	8108da0 <_dtoa_r+0xa0>
 81093c2:	9f00      	ldr	r7, [sp, #0]
 81093c4:	462b      	mov	r3, r5
 81093c6:	461d      	mov	r5, r3
 81093c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81093cc:	2a39      	cmp	r2, #57	; 0x39
 81093ce:	d106      	bne.n	81093de <_dtoa_r+0x6de>
 81093d0:	9a01      	ldr	r2, [sp, #4]
 81093d2:	429a      	cmp	r2, r3
 81093d4:	d1f7      	bne.n	81093c6 <_dtoa_r+0x6c6>
 81093d6:	9901      	ldr	r1, [sp, #4]
 81093d8:	2230      	movs	r2, #48	; 0x30
 81093da:	3701      	adds	r7, #1
 81093dc:	700a      	strb	r2, [r1, #0]
 81093de:	781a      	ldrb	r2, [r3, #0]
 81093e0:	3201      	adds	r2, #1
 81093e2:	701a      	strb	r2, [r3, #0]
 81093e4:	e790      	b.n	8109308 <_dtoa_r+0x608>
 81093e6:	4ba6      	ldr	r3, [pc, #664]	; (8109680 <_dtoa_r+0x980>)
 81093e8:	2200      	movs	r2, #0
 81093ea:	f7f7 f98d 	bl	8100708 <__aeabi_dmul>
 81093ee:	2200      	movs	r2, #0
 81093f0:	2300      	movs	r3, #0
 81093f2:	4606      	mov	r6, r0
 81093f4:	460f      	mov	r7, r1
 81093f6:	f7f7 fbef 	bl	8100bd8 <__aeabi_dcmpeq>
 81093fa:	2800      	cmp	r0, #0
 81093fc:	d09d      	beq.n	810933a <_dtoa_r+0x63a>
 81093fe:	e7cf      	b.n	81093a0 <_dtoa_r+0x6a0>
 8109400:	9a08      	ldr	r2, [sp, #32]
 8109402:	2a00      	cmp	r2, #0
 8109404:	f000 80d7 	beq.w	81095b6 <_dtoa_r+0x8b6>
 8109408:	9a06      	ldr	r2, [sp, #24]
 810940a:	2a01      	cmp	r2, #1
 810940c:	f300 80ba 	bgt.w	8109584 <_dtoa_r+0x884>
 8109410:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8109412:	2a00      	cmp	r2, #0
 8109414:	f000 80b2 	beq.w	810957c <_dtoa_r+0x87c>
 8109418:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810941c:	9e07      	ldr	r6, [sp, #28]
 810941e:	9d04      	ldr	r5, [sp, #16]
 8109420:	9a04      	ldr	r2, [sp, #16]
 8109422:	441a      	add	r2, r3
 8109424:	9204      	str	r2, [sp, #16]
 8109426:	9a05      	ldr	r2, [sp, #20]
 8109428:	2101      	movs	r1, #1
 810942a:	441a      	add	r2, r3
 810942c:	4620      	mov	r0, r4
 810942e:	9205      	str	r2, [sp, #20]
 8109430:	f001 f942 	bl	810a6b8 <__i2b>
 8109434:	4607      	mov	r7, r0
 8109436:	2d00      	cmp	r5, #0
 8109438:	dd0c      	ble.n	8109454 <_dtoa_r+0x754>
 810943a:	9b05      	ldr	r3, [sp, #20]
 810943c:	2b00      	cmp	r3, #0
 810943e:	dd09      	ble.n	8109454 <_dtoa_r+0x754>
 8109440:	42ab      	cmp	r3, r5
 8109442:	9a04      	ldr	r2, [sp, #16]
 8109444:	bfa8      	it	ge
 8109446:	462b      	movge	r3, r5
 8109448:	1ad2      	subs	r2, r2, r3
 810944a:	9204      	str	r2, [sp, #16]
 810944c:	9a05      	ldr	r2, [sp, #20]
 810944e:	1aed      	subs	r5, r5, r3
 8109450:	1ad3      	subs	r3, r2, r3
 8109452:	9305      	str	r3, [sp, #20]
 8109454:	9b07      	ldr	r3, [sp, #28]
 8109456:	b31b      	cbz	r3, 81094a0 <_dtoa_r+0x7a0>
 8109458:	9b08      	ldr	r3, [sp, #32]
 810945a:	2b00      	cmp	r3, #0
 810945c:	f000 80af 	beq.w	81095be <_dtoa_r+0x8be>
 8109460:	2e00      	cmp	r6, #0
 8109462:	dd13      	ble.n	810948c <_dtoa_r+0x78c>
 8109464:	4639      	mov	r1, r7
 8109466:	4632      	mov	r2, r6
 8109468:	4620      	mov	r0, r4
 810946a:	f001 f9e5 	bl	810a838 <__pow5mult>
 810946e:	ee18 2a10 	vmov	r2, s16
 8109472:	4601      	mov	r1, r0
 8109474:	4607      	mov	r7, r0
 8109476:	4620      	mov	r0, r4
 8109478:	f001 f934 	bl	810a6e4 <__multiply>
 810947c:	ee18 1a10 	vmov	r1, s16
 8109480:	4680      	mov	r8, r0
 8109482:	4620      	mov	r0, r4
 8109484:	f001 f816 	bl	810a4b4 <_Bfree>
 8109488:	ee08 8a10 	vmov	s16, r8
 810948c:	9b07      	ldr	r3, [sp, #28]
 810948e:	1b9a      	subs	r2, r3, r6
 8109490:	d006      	beq.n	81094a0 <_dtoa_r+0x7a0>
 8109492:	ee18 1a10 	vmov	r1, s16
 8109496:	4620      	mov	r0, r4
 8109498:	f001 f9ce 	bl	810a838 <__pow5mult>
 810949c:	ee08 0a10 	vmov	s16, r0
 81094a0:	2101      	movs	r1, #1
 81094a2:	4620      	mov	r0, r4
 81094a4:	f001 f908 	bl	810a6b8 <__i2b>
 81094a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81094aa:	2b00      	cmp	r3, #0
 81094ac:	4606      	mov	r6, r0
 81094ae:	f340 8088 	ble.w	81095c2 <_dtoa_r+0x8c2>
 81094b2:	461a      	mov	r2, r3
 81094b4:	4601      	mov	r1, r0
 81094b6:	4620      	mov	r0, r4
 81094b8:	f001 f9be 	bl	810a838 <__pow5mult>
 81094bc:	9b06      	ldr	r3, [sp, #24]
 81094be:	2b01      	cmp	r3, #1
 81094c0:	4606      	mov	r6, r0
 81094c2:	f340 8081 	ble.w	81095c8 <_dtoa_r+0x8c8>
 81094c6:	f04f 0800 	mov.w	r8, #0
 81094ca:	6933      	ldr	r3, [r6, #16]
 81094cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 81094d0:	6918      	ldr	r0, [r3, #16]
 81094d2:	f001 f8a1 	bl	810a618 <__hi0bits>
 81094d6:	f1c0 0020 	rsb	r0, r0, #32
 81094da:	9b05      	ldr	r3, [sp, #20]
 81094dc:	4418      	add	r0, r3
 81094de:	f010 001f 	ands.w	r0, r0, #31
 81094e2:	f000 8092 	beq.w	810960a <_dtoa_r+0x90a>
 81094e6:	f1c0 0320 	rsb	r3, r0, #32
 81094ea:	2b04      	cmp	r3, #4
 81094ec:	f340 808a 	ble.w	8109604 <_dtoa_r+0x904>
 81094f0:	f1c0 001c 	rsb	r0, r0, #28
 81094f4:	9b04      	ldr	r3, [sp, #16]
 81094f6:	4403      	add	r3, r0
 81094f8:	9304      	str	r3, [sp, #16]
 81094fa:	9b05      	ldr	r3, [sp, #20]
 81094fc:	4403      	add	r3, r0
 81094fe:	4405      	add	r5, r0
 8109500:	9305      	str	r3, [sp, #20]
 8109502:	9b04      	ldr	r3, [sp, #16]
 8109504:	2b00      	cmp	r3, #0
 8109506:	dd07      	ble.n	8109518 <_dtoa_r+0x818>
 8109508:	ee18 1a10 	vmov	r1, s16
 810950c:	461a      	mov	r2, r3
 810950e:	4620      	mov	r0, r4
 8109510:	f001 f9ec 	bl	810a8ec <__lshift>
 8109514:	ee08 0a10 	vmov	s16, r0
 8109518:	9b05      	ldr	r3, [sp, #20]
 810951a:	2b00      	cmp	r3, #0
 810951c:	dd05      	ble.n	810952a <_dtoa_r+0x82a>
 810951e:	4631      	mov	r1, r6
 8109520:	461a      	mov	r2, r3
 8109522:	4620      	mov	r0, r4
 8109524:	f001 f9e2 	bl	810a8ec <__lshift>
 8109528:	4606      	mov	r6, r0
 810952a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810952c:	2b00      	cmp	r3, #0
 810952e:	d06e      	beq.n	810960e <_dtoa_r+0x90e>
 8109530:	ee18 0a10 	vmov	r0, s16
 8109534:	4631      	mov	r1, r6
 8109536:	f001 fa49 	bl	810a9cc <__mcmp>
 810953a:	2800      	cmp	r0, #0
 810953c:	da67      	bge.n	810960e <_dtoa_r+0x90e>
 810953e:	9b00      	ldr	r3, [sp, #0]
 8109540:	3b01      	subs	r3, #1
 8109542:	ee18 1a10 	vmov	r1, s16
 8109546:	9300      	str	r3, [sp, #0]
 8109548:	220a      	movs	r2, #10
 810954a:	2300      	movs	r3, #0
 810954c:	4620      	mov	r0, r4
 810954e:	f000 ffd3 	bl	810a4f8 <__multadd>
 8109552:	9b08      	ldr	r3, [sp, #32]
 8109554:	ee08 0a10 	vmov	s16, r0
 8109558:	2b00      	cmp	r3, #0
 810955a:	f000 81b1 	beq.w	81098c0 <_dtoa_r+0xbc0>
 810955e:	2300      	movs	r3, #0
 8109560:	4639      	mov	r1, r7
 8109562:	220a      	movs	r2, #10
 8109564:	4620      	mov	r0, r4
 8109566:	f000 ffc7 	bl	810a4f8 <__multadd>
 810956a:	9b02      	ldr	r3, [sp, #8]
 810956c:	2b00      	cmp	r3, #0
 810956e:	4607      	mov	r7, r0
 8109570:	f300 808e 	bgt.w	8109690 <_dtoa_r+0x990>
 8109574:	9b06      	ldr	r3, [sp, #24]
 8109576:	2b02      	cmp	r3, #2
 8109578:	dc51      	bgt.n	810961e <_dtoa_r+0x91e>
 810957a:	e089      	b.n	8109690 <_dtoa_r+0x990>
 810957c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810957e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8109582:	e74b      	b.n	810941c <_dtoa_r+0x71c>
 8109584:	9b03      	ldr	r3, [sp, #12]
 8109586:	1e5e      	subs	r6, r3, #1
 8109588:	9b07      	ldr	r3, [sp, #28]
 810958a:	42b3      	cmp	r3, r6
 810958c:	bfbf      	itttt	lt
 810958e:	9b07      	ldrlt	r3, [sp, #28]
 8109590:	9607      	strlt	r6, [sp, #28]
 8109592:	1af2      	sublt	r2, r6, r3
 8109594:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8109596:	bfb6      	itet	lt
 8109598:	189b      	addlt	r3, r3, r2
 810959a:	1b9e      	subge	r6, r3, r6
 810959c:	930a      	strlt	r3, [sp, #40]	; 0x28
 810959e:	9b03      	ldr	r3, [sp, #12]
 81095a0:	bfb8      	it	lt
 81095a2:	2600      	movlt	r6, #0
 81095a4:	2b00      	cmp	r3, #0
 81095a6:	bfb7      	itett	lt
 81095a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 81095ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 81095b0:	1a9d      	sublt	r5, r3, r2
 81095b2:	2300      	movlt	r3, #0
 81095b4:	e734      	b.n	8109420 <_dtoa_r+0x720>
 81095b6:	9e07      	ldr	r6, [sp, #28]
 81095b8:	9d04      	ldr	r5, [sp, #16]
 81095ba:	9f08      	ldr	r7, [sp, #32]
 81095bc:	e73b      	b.n	8109436 <_dtoa_r+0x736>
 81095be:	9a07      	ldr	r2, [sp, #28]
 81095c0:	e767      	b.n	8109492 <_dtoa_r+0x792>
 81095c2:	9b06      	ldr	r3, [sp, #24]
 81095c4:	2b01      	cmp	r3, #1
 81095c6:	dc18      	bgt.n	81095fa <_dtoa_r+0x8fa>
 81095c8:	f1ba 0f00 	cmp.w	sl, #0
 81095cc:	d115      	bne.n	81095fa <_dtoa_r+0x8fa>
 81095ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81095d2:	b993      	cbnz	r3, 81095fa <_dtoa_r+0x8fa>
 81095d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 81095d8:	0d1b      	lsrs	r3, r3, #20
 81095da:	051b      	lsls	r3, r3, #20
 81095dc:	b183      	cbz	r3, 8109600 <_dtoa_r+0x900>
 81095de:	9b04      	ldr	r3, [sp, #16]
 81095e0:	3301      	adds	r3, #1
 81095e2:	9304      	str	r3, [sp, #16]
 81095e4:	9b05      	ldr	r3, [sp, #20]
 81095e6:	3301      	adds	r3, #1
 81095e8:	9305      	str	r3, [sp, #20]
 81095ea:	f04f 0801 	mov.w	r8, #1
 81095ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81095f0:	2b00      	cmp	r3, #0
 81095f2:	f47f af6a 	bne.w	81094ca <_dtoa_r+0x7ca>
 81095f6:	2001      	movs	r0, #1
 81095f8:	e76f      	b.n	81094da <_dtoa_r+0x7da>
 81095fa:	f04f 0800 	mov.w	r8, #0
 81095fe:	e7f6      	b.n	81095ee <_dtoa_r+0x8ee>
 8109600:	4698      	mov	r8, r3
 8109602:	e7f4      	b.n	81095ee <_dtoa_r+0x8ee>
 8109604:	f43f af7d 	beq.w	8109502 <_dtoa_r+0x802>
 8109608:	4618      	mov	r0, r3
 810960a:	301c      	adds	r0, #28
 810960c:	e772      	b.n	81094f4 <_dtoa_r+0x7f4>
 810960e:	9b03      	ldr	r3, [sp, #12]
 8109610:	2b00      	cmp	r3, #0
 8109612:	dc37      	bgt.n	8109684 <_dtoa_r+0x984>
 8109614:	9b06      	ldr	r3, [sp, #24]
 8109616:	2b02      	cmp	r3, #2
 8109618:	dd34      	ble.n	8109684 <_dtoa_r+0x984>
 810961a:	9b03      	ldr	r3, [sp, #12]
 810961c:	9302      	str	r3, [sp, #8]
 810961e:	9b02      	ldr	r3, [sp, #8]
 8109620:	b96b      	cbnz	r3, 810963e <_dtoa_r+0x93e>
 8109622:	4631      	mov	r1, r6
 8109624:	2205      	movs	r2, #5
 8109626:	4620      	mov	r0, r4
 8109628:	f000 ff66 	bl	810a4f8 <__multadd>
 810962c:	4601      	mov	r1, r0
 810962e:	4606      	mov	r6, r0
 8109630:	ee18 0a10 	vmov	r0, s16
 8109634:	f001 f9ca 	bl	810a9cc <__mcmp>
 8109638:	2800      	cmp	r0, #0
 810963a:	f73f adbb 	bgt.w	81091b4 <_dtoa_r+0x4b4>
 810963e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109640:	9d01      	ldr	r5, [sp, #4]
 8109642:	43db      	mvns	r3, r3
 8109644:	9300      	str	r3, [sp, #0]
 8109646:	f04f 0800 	mov.w	r8, #0
 810964a:	4631      	mov	r1, r6
 810964c:	4620      	mov	r0, r4
 810964e:	f000 ff31 	bl	810a4b4 <_Bfree>
 8109652:	2f00      	cmp	r7, #0
 8109654:	f43f aea4 	beq.w	81093a0 <_dtoa_r+0x6a0>
 8109658:	f1b8 0f00 	cmp.w	r8, #0
 810965c:	d005      	beq.n	810966a <_dtoa_r+0x96a>
 810965e:	45b8      	cmp	r8, r7
 8109660:	d003      	beq.n	810966a <_dtoa_r+0x96a>
 8109662:	4641      	mov	r1, r8
 8109664:	4620      	mov	r0, r4
 8109666:	f000 ff25 	bl	810a4b4 <_Bfree>
 810966a:	4639      	mov	r1, r7
 810966c:	4620      	mov	r0, r4
 810966e:	f000 ff21 	bl	810a4b4 <_Bfree>
 8109672:	e695      	b.n	81093a0 <_dtoa_r+0x6a0>
 8109674:	2600      	movs	r6, #0
 8109676:	4637      	mov	r7, r6
 8109678:	e7e1      	b.n	810963e <_dtoa_r+0x93e>
 810967a:	9700      	str	r7, [sp, #0]
 810967c:	4637      	mov	r7, r6
 810967e:	e599      	b.n	81091b4 <_dtoa_r+0x4b4>
 8109680:	40240000 	.word	0x40240000
 8109684:	9b08      	ldr	r3, [sp, #32]
 8109686:	2b00      	cmp	r3, #0
 8109688:	f000 80ca 	beq.w	8109820 <_dtoa_r+0xb20>
 810968c:	9b03      	ldr	r3, [sp, #12]
 810968e:	9302      	str	r3, [sp, #8]
 8109690:	2d00      	cmp	r5, #0
 8109692:	dd05      	ble.n	81096a0 <_dtoa_r+0x9a0>
 8109694:	4639      	mov	r1, r7
 8109696:	462a      	mov	r2, r5
 8109698:	4620      	mov	r0, r4
 810969a:	f001 f927 	bl	810a8ec <__lshift>
 810969e:	4607      	mov	r7, r0
 81096a0:	f1b8 0f00 	cmp.w	r8, #0
 81096a4:	d05b      	beq.n	810975e <_dtoa_r+0xa5e>
 81096a6:	6879      	ldr	r1, [r7, #4]
 81096a8:	4620      	mov	r0, r4
 81096aa:	f000 fec3 	bl	810a434 <_Balloc>
 81096ae:	4605      	mov	r5, r0
 81096b0:	b928      	cbnz	r0, 81096be <_dtoa_r+0x9be>
 81096b2:	4b87      	ldr	r3, [pc, #540]	; (81098d0 <_dtoa_r+0xbd0>)
 81096b4:	4602      	mov	r2, r0
 81096b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 81096ba:	f7ff bb3b 	b.w	8108d34 <_dtoa_r+0x34>
 81096be:	693a      	ldr	r2, [r7, #16]
 81096c0:	3202      	adds	r2, #2
 81096c2:	0092      	lsls	r2, r2, #2
 81096c4:	f107 010c 	add.w	r1, r7, #12
 81096c8:	300c      	adds	r0, #12
 81096ca:	f7fd fbc7 	bl	8106e5c <memcpy>
 81096ce:	2201      	movs	r2, #1
 81096d0:	4629      	mov	r1, r5
 81096d2:	4620      	mov	r0, r4
 81096d4:	f001 f90a 	bl	810a8ec <__lshift>
 81096d8:	9b01      	ldr	r3, [sp, #4]
 81096da:	f103 0901 	add.w	r9, r3, #1
 81096de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 81096e2:	4413      	add	r3, r2
 81096e4:	9305      	str	r3, [sp, #20]
 81096e6:	f00a 0301 	and.w	r3, sl, #1
 81096ea:	46b8      	mov	r8, r7
 81096ec:	9304      	str	r3, [sp, #16]
 81096ee:	4607      	mov	r7, r0
 81096f0:	4631      	mov	r1, r6
 81096f2:	ee18 0a10 	vmov	r0, s16
 81096f6:	f7ff fa77 	bl	8108be8 <quorem>
 81096fa:	4641      	mov	r1, r8
 81096fc:	9002      	str	r0, [sp, #8]
 81096fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8109702:	ee18 0a10 	vmov	r0, s16
 8109706:	f001 f961 	bl	810a9cc <__mcmp>
 810970a:	463a      	mov	r2, r7
 810970c:	9003      	str	r0, [sp, #12]
 810970e:	4631      	mov	r1, r6
 8109710:	4620      	mov	r0, r4
 8109712:	f001 f977 	bl	810aa04 <__mdiff>
 8109716:	68c2      	ldr	r2, [r0, #12]
 8109718:	f109 3bff 	add.w	fp, r9, #4294967295
 810971c:	4605      	mov	r5, r0
 810971e:	bb02      	cbnz	r2, 8109762 <_dtoa_r+0xa62>
 8109720:	4601      	mov	r1, r0
 8109722:	ee18 0a10 	vmov	r0, s16
 8109726:	f001 f951 	bl	810a9cc <__mcmp>
 810972a:	4602      	mov	r2, r0
 810972c:	4629      	mov	r1, r5
 810972e:	4620      	mov	r0, r4
 8109730:	9207      	str	r2, [sp, #28]
 8109732:	f000 febf 	bl	810a4b4 <_Bfree>
 8109736:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810973a:	ea43 0102 	orr.w	r1, r3, r2
 810973e:	9b04      	ldr	r3, [sp, #16]
 8109740:	430b      	orrs	r3, r1
 8109742:	464d      	mov	r5, r9
 8109744:	d10f      	bne.n	8109766 <_dtoa_r+0xa66>
 8109746:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810974a:	d02a      	beq.n	81097a2 <_dtoa_r+0xaa2>
 810974c:	9b03      	ldr	r3, [sp, #12]
 810974e:	2b00      	cmp	r3, #0
 8109750:	dd02      	ble.n	8109758 <_dtoa_r+0xa58>
 8109752:	9b02      	ldr	r3, [sp, #8]
 8109754:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8109758:	f88b a000 	strb.w	sl, [fp]
 810975c:	e775      	b.n	810964a <_dtoa_r+0x94a>
 810975e:	4638      	mov	r0, r7
 8109760:	e7ba      	b.n	81096d8 <_dtoa_r+0x9d8>
 8109762:	2201      	movs	r2, #1
 8109764:	e7e2      	b.n	810972c <_dtoa_r+0xa2c>
 8109766:	9b03      	ldr	r3, [sp, #12]
 8109768:	2b00      	cmp	r3, #0
 810976a:	db04      	blt.n	8109776 <_dtoa_r+0xa76>
 810976c:	9906      	ldr	r1, [sp, #24]
 810976e:	430b      	orrs	r3, r1
 8109770:	9904      	ldr	r1, [sp, #16]
 8109772:	430b      	orrs	r3, r1
 8109774:	d122      	bne.n	81097bc <_dtoa_r+0xabc>
 8109776:	2a00      	cmp	r2, #0
 8109778:	ddee      	ble.n	8109758 <_dtoa_r+0xa58>
 810977a:	ee18 1a10 	vmov	r1, s16
 810977e:	2201      	movs	r2, #1
 8109780:	4620      	mov	r0, r4
 8109782:	f001 f8b3 	bl	810a8ec <__lshift>
 8109786:	4631      	mov	r1, r6
 8109788:	ee08 0a10 	vmov	s16, r0
 810978c:	f001 f91e 	bl	810a9cc <__mcmp>
 8109790:	2800      	cmp	r0, #0
 8109792:	dc03      	bgt.n	810979c <_dtoa_r+0xa9c>
 8109794:	d1e0      	bne.n	8109758 <_dtoa_r+0xa58>
 8109796:	f01a 0f01 	tst.w	sl, #1
 810979a:	d0dd      	beq.n	8109758 <_dtoa_r+0xa58>
 810979c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 81097a0:	d1d7      	bne.n	8109752 <_dtoa_r+0xa52>
 81097a2:	2339      	movs	r3, #57	; 0x39
 81097a4:	f88b 3000 	strb.w	r3, [fp]
 81097a8:	462b      	mov	r3, r5
 81097aa:	461d      	mov	r5, r3
 81097ac:	3b01      	subs	r3, #1
 81097ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 81097b2:	2a39      	cmp	r2, #57	; 0x39
 81097b4:	d071      	beq.n	810989a <_dtoa_r+0xb9a>
 81097b6:	3201      	adds	r2, #1
 81097b8:	701a      	strb	r2, [r3, #0]
 81097ba:	e746      	b.n	810964a <_dtoa_r+0x94a>
 81097bc:	2a00      	cmp	r2, #0
 81097be:	dd07      	ble.n	81097d0 <_dtoa_r+0xad0>
 81097c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 81097c4:	d0ed      	beq.n	81097a2 <_dtoa_r+0xaa2>
 81097c6:	f10a 0301 	add.w	r3, sl, #1
 81097ca:	f88b 3000 	strb.w	r3, [fp]
 81097ce:	e73c      	b.n	810964a <_dtoa_r+0x94a>
 81097d0:	9b05      	ldr	r3, [sp, #20]
 81097d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 81097d6:	4599      	cmp	r9, r3
 81097d8:	d047      	beq.n	810986a <_dtoa_r+0xb6a>
 81097da:	ee18 1a10 	vmov	r1, s16
 81097de:	2300      	movs	r3, #0
 81097e0:	220a      	movs	r2, #10
 81097e2:	4620      	mov	r0, r4
 81097e4:	f000 fe88 	bl	810a4f8 <__multadd>
 81097e8:	45b8      	cmp	r8, r7
 81097ea:	ee08 0a10 	vmov	s16, r0
 81097ee:	f04f 0300 	mov.w	r3, #0
 81097f2:	f04f 020a 	mov.w	r2, #10
 81097f6:	4641      	mov	r1, r8
 81097f8:	4620      	mov	r0, r4
 81097fa:	d106      	bne.n	810980a <_dtoa_r+0xb0a>
 81097fc:	f000 fe7c 	bl	810a4f8 <__multadd>
 8109800:	4680      	mov	r8, r0
 8109802:	4607      	mov	r7, r0
 8109804:	f109 0901 	add.w	r9, r9, #1
 8109808:	e772      	b.n	81096f0 <_dtoa_r+0x9f0>
 810980a:	f000 fe75 	bl	810a4f8 <__multadd>
 810980e:	4639      	mov	r1, r7
 8109810:	4680      	mov	r8, r0
 8109812:	2300      	movs	r3, #0
 8109814:	220a      	movs	r2, #10
 8109816:	4620      	mov	r0, r4
 8109818:	f000 fe6e 	bl	810a4f8 <__multadd>
 810981c:	4607      	mov	r7, r0
 810981e:	e7f1      	b.n	8109804 <_dtoa_r+0xb04>
 8109820:	9b03      	ldr	r3, [sp, #12]
 8109822:	9302      	str	r3, [sp, #8]
 8109824:	9d01      	ldr	r5, [sp, #4]
 8109826:	ee18 0a10 	vmov	r0, s16
 810982a:	4631      	mov	r1, r6
 810982c:	f7ff f9dc 	bl	8108be8 <quorem>
 8109830:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8109834:	9b01      	ldr	r3, [sp, #4]
 8109836:	f805 ab01 	strb.w	sl, [r5], #1
 810983a:	1aea      	subs	r2, r5, r3
 810983c:	9b02      	ldr	r3, [sp, #8]
 810983e:	4293      	cmp	r3, r2
 8109840:	dd09      	ble.n	8109856 <_dtoa_r+0xb56>
 8109842:	ee18 1a10 	vmov	r1, s16
 8109846:	2300      	movs	r3, #0
 8109848:	220a      	movs	r2, #10
 810984a:	4620      	mov	r0, r4
 810984c:	f000 fe54 	bl	810a4f8 <__multadd>
 8109850:	ee08 0a10 	vmov	s16, r0
 8109854:	e7e7      	b.n	8109826 <_dtoa_r+0xb26>
 8109856:	9b02      	ldr	r3, [sp, #8]
 8109858:	2b00      	cmp	r3, #0
 810985a:	bfc8      	it	gt
 810985c:	461d      	movgt	r5, r3
 810985e:	9b01      	ldr	r3, [sp, #4]
 8109860:	bfd8      	it	le
 8109862:	2501      	movle	r5, #1
 8109864:	441d      	add	r5, r3
 8109866:	f04f 0800 	mov.w	r8, #0
 810986a:	ee18 1a10 	vmov	r1, s16
 810986e:	2201      	movs	r2, #1
 8109870:	4620      	mov	r0, r4
 8109872:	f001 f83b 	bl	810a8ec <__lshift>
 8109876:	4631      	mov	r1, r6
 8109878:	ee08 0a10 	vmov	s16, r0
 810987c:	f001 f8a6 	bl	810a9cc <__mcmp>
 8109880:	2800      	cmp	r0, #0
 8109882:	dc91      	bgt.n	81097a8 <_dtoa_r+0xaa8>
 8109884:	d102      	bne.n	810988c <_dtoa_r+0xb8c>
 8109886:	f01a 0f01 	tst.w	sl, #1
 810988a:	d18d      	bne.n	81097a8 <_dtoa_r+0xaa8>
 810988c:	462b      	mov	r3, r5
 810988e:	461d      	mov	r5, r3
 8109890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8109894:	2a30      	cmp	r2, #48	; 0x30
 8109896:	d0fa      	beq.n	810988e <_dtoa_r+0xb8e>
 8109898:	e6d7      	b.n	810964a <_dtoa_r+0x94a>
 810989a:	9a01      	ldr	r2, [sp, #4]
 810989c:	429a      	cmp	r2, r3
 810989e:	d184      	bne.n	81097aa <_dtoa_r+0xaaa>
 81098a0:	9b00      	ldr	r3, [sp, #0]
 81098a2:	3301      	adds	r3, #1
 81098a4:	9300      	str	r3, [sp, #0]
 81098a6:	2331      	movs	r3, #49	; 0x31
 81098a8:	7013      	strb	r3, [r2, #0]
 81098aa:	e6ce      	b.n	810964a <_dtoa_r+0x94a>
 81098ac:	4b09      	ldr	r3, [pc, #36]	; (81098d4 <_dtoa_r+0xbd4>)
 81098ae:	f7ff ba95 	b.w	8108ddc <_dtoa_r+0xdc>
 81098b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81098b4:	2b00      	cmp	r3, #0
 81098b6:	f47f aa6e 	bne.w	8108d96 <_dtoa_r+0x96>
 81098ba:	4b07      	ldr	r3, [pc, #28]	; (81098d8 <_dtoa_r+0xbd8>)
 81098bc:	f7ff ba8e 	b.w	8108ddc <_dtoa_r+0xdc>
 81098c0:	9b02      	ldr	r3, [sp, #8]
 81098c2:	2b00      	cmp	r3, #0
 81098c4:	dcae      	bgt.n	8109824 <_dtoa_r+0xb24>
 81098c6:	9b06      	ldr	r3, [sp, #24]
 81098c8:	2b02      	cmp	r3, #2
 81098ca:	f73f aea8 	bgt.w	810961e <_dtoa_r+0x91e>
 81098ce:	e7a9      	b.n	8109824 <_dtoa_r+0xb24>
 81098d0:	0810bdf0 	.word	0x0810bdf0
 81098d4:	0810bbf4 	.word	0x0810bbf4
 81098d8:	0810bd71 	.word	0x0810bd71

081098dc <__sflush_r>:
 81098dc:	898a      	ldrh	r2, [r1, #12]
 81098de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81098e2:	4605      	mov	r5, r0
 81098e4:	0710      	lsls	r0, r2, #28
 81098e6:	460c      	mov	r4, r1
 81098e8:	d458      	bmi.n	810999c <__sflush_r+0xc0>
 81098ea:	684b      	ldr	r3, [r1, #4]
 81098ec:	2b00      	cmp	r3, #0
 81098ee:	dc05      	bgt.n	81098fc <__sflush_r+0x20>
 81098f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81098f2:	2b00      	cmp	r3, #0
 81098f4:	dc02      	bgt.n	81098fc <__sflush_r+0x20>
 81098f6:	2000      	movs	r0, #0
 81098f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81098fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81098fe:	2e00      	cmp	r6, #0
 8109900:	d0f9      	beq.n	81098f6 <__sflush_r+0x1a>
 8109902:	2300      	movs	r3, #0
 8109904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8109908:	682f      	ldr	r7, [r5, #0]
 810990a:	602b      	str	r3, [r5, #0]
 810990c:	d032      	beq.n	8109974 <__sflush_r+0x98>
 810990e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8109910:	89a3      	ldrh	r3, [r4, #12]
 8109912:	075a      	lsls	r2, r3, #29
 8109914:	d505      	bpl.n	8109922 <__sflush_r+0x46>
 8109916:	6863      	ldr	r3, [r4, #4]
 8109918:	1ac0      	subs	r0, r0, r3
 810991a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810991c:	b10b      	cbz	r3, 8109922 <__sflush_r+0x46>
 810991e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8109920:	1ac0      	subs	r0, r0, r3
 8109922:	2300      	movs	r3, #0
 8109924:	4602      	mov	r2, r0
 8109926:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8109928:	6a21      	ldr	r1, [r4, #32]
 810992a:	4628      	mov	r0, r5
 810992c:	47b0      	blx	r6
 810992e:	1c43      	adds	r3, r0, #1
 8109930:	89a3      	ldrh	r3, [r4, #12]
 8109932:	d106      	bne.n	8109942 <__sflush_r+0x66>
 8109934:	6829      	ldr	r1, [r5, #0]
 8109936:	291d      	cmp	r1, #29
 8109938:	d82c      	bhi.n	8109994 <__sflush_r+0xb8>
 810993a:	4a2a      	ldr	r2, [pc, #168]	; (81099e4 <__sflush_r+0x108>)
 810993c:	40ca      	lsrs	r2, r1
 810993e:	07d6      	lsls	r6, r2, #31
 8109940:	d528      	bpl.n	8109994 <__sflush_r+0xb8>
 8109942:	2200      	movs	r2, #0
 8109944:	6062      	str	r2, [r4, #4]
 8109946:	04d9      	lsls	r1, r3, #19
 8109948:	6922      	ldr	r2, [r4, #16]
 810994a:	6022      	str	r2, [r4, #0]
 810994c:	d504      	bpl.n	8109958 <__sflush_r+0x7c>
 810994e:	1c42      	adds	r2, r0, #1
 8109950:	d101      	bne.n	8109956 <__sflush_r+0x7a>
 8109952:	682b      	ldr	r3, [r5, #0]
 8109954:	b903      	cbnz	r3, 8109958 <__sflush_r+0x7c>
 8109956:	6560      	str	r0, [r4, #84]	; 0x54
 8109958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810995a:	602f      	str	r7, [r5, #0]
 810995c:	2900      	cmp	r1, #0
 810995e:	d0ca      	beq.n	81098f6 <__sflush_r+0x1a>
 8109960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8109964:	4299      	cmp	r1, r3
 8109966:	d002      	beq.n	810996e <__sflush_r+0x92>
 8109968:	4628      	mov	r0, r5
 810996a:	f001 fa3b 	bl	810ade4 <_free_r>
 810996e:	2000      	movs	r0, #0
 8109970:	6360      	str	r0, [r4, #52]	; 0x34
 8109972:	e7c1      	b.n	81098f8 <__sflush_r+0x1c>
 8109974:	6a21      	ldr	r1, [r4, #32]
 8109976:	2301      	movs	r3, #1
 8109978:	4628      	mov	r0, r5
 810997a:	47b0      	blx	r6
 810997c:	1c41      	adds	r1, r0, #1
 810997e:	d1c7      	bne.n	8109910 <__sflush_r+0x34>
 8109980:	682b      	ldr	r3, [r5, #0]
 8109982:	2b00      	cmp	r3, #0
 8109984:	d0c4      	beq.n	8109910 <__sflush_r+0x34>
 8109986:	2b1d      	cmp	r3, #29
 8109988:	d001      	beq.n	810998e <__sflush_r+0xb2>
 810998a:	2b16      	cmp	r3, #22
 810998c:	d101      	bne.n	8109992 <__sflush_r+0xb6>
 810998e:	602f      	str	r7, [r5, #0]
 8109990:	e7b1      	b.n	81098f6 <__sflush_r+0x1a>
 8109992:	89a3      	ldrh	r3, [r4, #12]
 8109994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8109998:	81a3      	strh	r3, [r4, #12]
 810999a:	e7ad      	b.n	81098f8 <__sflush_r+0x1c>
 810999c:	690f      	ldr	r7, [r1, #16]
 810999e:	2f00      	cmp	r7, #0
 81099a0:	d0a9      	beq.n	81098f6 <__sflush_r+0x1a>
 81099a2:	0793      	lsls	r3, r2, #30
 81099a4:	680e      	ldr	r6, [r1, #0]
 81099a6:	bf08      	it	eq
 81099a8:	694b      	ldreq	r3, [r1, #20]
 81099aa:	600f      	str	r7, [r1, #0]
 81099ac:	bf18      	it	ne
 81099ae:	2300      	movne	r3, #0
 81099b0:	eba6 0807 	sub.w	r8, r6, r7
 81099b4:	608b      	str	r3, [r1, #8]
 81099b6:	f1b8 0f00 	cmp.w	r8, #0
 81099ba:	dd9c      	ble.n	81098f6 <__sflush_r+0x1a>
 81099bc:	6a21      	ldr	r1, [r4, #32]
 81099be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 81099c0:	4643      	mov	r3, r8
 81099c2:	463a      	mov	r2, r7
 81099c4:	4628      	mov	r0, r5
 81099c6:	47b0      	blx	r6
 81099c8:	2800      	cmp	r0, #0
 81099ca:	dc06      	bgt.n	81099da <__sflush_r+0xfe>
 81099cc:	89a3      	ldrh	r3, [r4, #12]
 81099ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81099d2:	81a3      	strh	r3, [r4, #12]
 81099d4:	f04f 30ff 	mov.w	r0, #4294967295
 81099d8:	e78e      	b.n	81098f8 <__sflush_r+0x1c>
 81099da:	4407      	add	r7, r0
 81099dc:	eba8 0800 	sub.w	r8, r8, r0
 81099e0:	e7e9      	b.n	81099b6 <__sflush_r+0xda>
 81099e2:	bf00      	nop
 81099e4:	20400001 	.word	0x20400001

081099e8 <_fflush_r>:
 81099e8:	b538      	push	{r3, r4, r5, lr}
 81099ea:	690b      	ldr	r3, [r1, #16]
 81099ec:	4605      	mov	r5, r0
 81099ee:	460c      	mov	r4, r1
 81099f0:	b913      	cbnz	r3, 81099f8 <_fflush_r+0x10>
 81099f2:	2500      	movs	r5, #0
 81099f4:	4628      	mov	r0, r5
 81099f6:	bd38      	pop	{r3, r4, r5, pc}
 81099f8:	b118      	cbz	r0, 8109a02 <_fflush_r+0x1a>
 81099fa:	6983      	ldr	r3, [r0, #24]
 81099fc:	b90b      	cbnz	r3, 8109a02 <_fflush_r+0x1a>
 81099fe:	f000 f887 	bl	8109b10 <__sinit>
 8109a02:	4b14      	ldr	r3, [pc, #80]	; (8109a54 <_fflush_r+0x6c>)
 8109a04:	429c      	cmp	r4, r3
 8109a06:	d11b      	bne.n	8109a40 <_fflush_r+0x58>
 8109a08:	686c      	ldr	r4, [r5, #4]
 8109a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8109a0e:	2b00      	cmp	r3, #0
 8109a10:	d0ef      	beq.n	81099f2 <_fflush_r+0xa>
 8109a12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8109a14:	07d0      	lsls	r0, r2, #31
 8109a16:	d404      	bmi.n	8109a22 <_fflush_r+0x3a>
 8109a18:	0599      	lsls	r1, r3, #22
 8109a1a:	d402      	bmi.n	8109a22 <_fflush_r+0x3a>
 8109a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8109a1e:	f000 fc88 	bl	810a332 <__retarget_lock_acquire_recursive>
 8109a22:	4628      	mov	r0, r5
 8109a24:	4621      	mov	r1, r4
 8109a26:	f7ff ff59 	bl	81098dc <__sflush_r>
 8109a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8109a2c:	07da      	lsls	r2, r3, #31
 8109a2e:	4605      	mov	r5, r0
 8109a30:	d4e0      	bmi.n	81099f4 <_fflush_r+0xc>
 8109a32:	89a3      	ldrh	r3, [r4, #12]
 8109a34:	059b      	lsls	r3, r3, #22
 8109a36:	d4dd      	bmi.n	81099f4 <_fflush_r+0xc>
 8109a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8109a3a:	f000 fc7b 	bl	810a334 <__retarget_lock_release_recursive>
 8109a3e:	e7d9      	b.n	81099f4 <_fflush_r+0xc>
 8109a40:	4b05      	ldr	r3, [pc, #20]	; (8109a58 <_fflush_r+0x70>)
 8109a42:	429c      	cmp	r4, r3
 8109a44:	d101      	bne.n	8109a4a <_fflush_r+0x62>
 8109a46:	68ac      	ldr	r4, [r5, #8]
 8109a48:	e7df      	b.n	8109a0a <_fflush_r+0x22>
 8109a4a:	4b04      	ldr	r3, [pc, #16]	; (8109a5c <_fflush_r+0x74>)
 8109a4c:	429c      	cmp	r4, r3
 8109a4e:	bf08      	it	eq
 8109a50:	68ec      	ldreq	r4, [r5, #12]
 8109a52:	e7da      	b.n	8109a0a <_fflush_r+0x22>
 8109a54:	0810be24 	.word	0x0810be24
 8109a58:	0810be44 	.word	0x0810be44
 8109a5c:	0810be04 	.word	0x0810be04

08109a60 <std>:
 8109a60:	2300      	movs	r3, #0
 8109a62:	b510      	push	{r4, lr}
 8109a64:	4604      	mov	r4, r0
 8109a66:	e9c0 3300 	strd	r3, r3, [r0]
 8109a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8109a6e:	6083      	str	r3, [r0, #8]
 8109a70:	8181      	strh	r1, [r0, #12]
 8109a72:	6643      	str	r3, [r0, #100]	; 0x64
 8109a74:	81c2      	strh	r2, [r0, #14]
 8109a76:	6183      	str	r3, [r0, #24]
 8109a78:	4619      	mov	r1, r3
 8109a7a:	2208      	movs	r2, #8
 8109a7c:	305c      	adds	r0, #92	; 0x5c
 8109a7e:	f7fd f9fb 	bl	8106e78 <memset>
 8109a82:	4b05      	ldr	r3, [pc, #20]	; (8109a98 <std+0x38>)
 8109a84:	6263      	str	r3, [r4, #36]	; 0x24
 8109a86:	4b05      	ldr	r3, [pc, #20]	; (8109a9c <std+0x3c>)
 8109a88:	62a3      	str	r3, [r4, #40]	; 0x28
 8109a8a:	4b05      	ldr	r3, [pc, #20]	; (8109aa0 <std+0x40>)
 8109a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8109a8e:	4b05      	ldr	r3, [pc, #20]	; (8109aa4 <std+0x44>)
 8109a90:	6224      	str	r4, [r4, #32]
 8109a92:	6323      	str	r3, [r4, #48]	; 0x30
 8109a94:	bd10      	pop	{r4, pc}
 8109a96:	bf00      	nop
 8109a98:	0810b5d1 	.word	0x0810b5d1
 8109a9c:	0810b5f3 	.word	0x0810b5f3
 8109aa0:	0810b62b 	.word	0x0810b62b
 8109aa4:	0810b64f 	.word	0x0810b64f

08109aa8 <_cleanup_r>:
 8109aa8:	4901      	ldr	r1, [pc, #4]	; (8109ab0 <_cleanup_r+0x8>)
 8109aaa:	f000 b8af 	b.w	8109c0c <_fwalk_reent>
 8109aae:	bf00      	nop
 8109ab0:	081099e9 	.word	0x081099e9

08109ab4 <__sfmoreglue>:
 8109ab4:	b570      	push	{r4, r5, r6, lr}
 8109ab6:	2268      	movs	r2, #104	; 0x68
 8109ab8:	1e4d      	subs	r5, r1, #1
 8109aba:	4355      	muls	r5, r2
 8109abc:	460e      	mov	r6, r1
 8109abe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8109ac2:	f001 f9fb 	bl	810aebc <_malloc_r>
 8109ac6:	4604      	mov	r4, r0
 8109ac8:	b140      	cbz	r0, 8109adc <__sfmoreglue+0x28>
 8109aca:	2100      	movs	r1, #0
 8109acc:	e9c0 1600 	strd	r1, r6, [r0]
 8109ad0:	300c      	adds	r0, #12
 8109ad2:	60a0      	str	r0, [r4, #8]
 8109ad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8109ad8:	f7fd f9ce 	bl	8106e78 <memset>
 8109adc:	4620      	mov	r0, r4
 8109ade:	bd70      	pop	{r4, r5, r6, pc}

08109ae0 <__sfp_lock_acquire>:
 8109ae0:	4801      	ldr	r0, [pc, #4]	; (8109ae8 <__sfp_lock_acquire+0x8>)
 8109ae2:	f000 bc26 	b.w	810a332 <__retarget_lock_acquire_recursive>
 8109ae6:	bf00      	nop
 8109ae8:	100002f5 	.word	0x100002f5

08109aec <__sfp_lock_release>:
 8109aec:	4801      	ldr	r0, [pc, #4]	; (8109af4 <__sfp_lock_release+0x8>)
 8109aee:	f000 bc21 	b.w	810a334 <__retarget_lock_release_recursive>
 8109af2:	bf00      	nop
 8109af4:	100002f5 	.word	0x100002f5

08109af8 <__sinit_lock_acquire>:
 8109af8:	4801      	ldr	r0, [pc, #4]	; (8109b00 <__sinit_lock_acquire+0x8>)
 8109afa:	f000 bc1a 	b.w	810a332 <__retarget_lock_acquire_recursive>
 8109afe:	bf00      	nop
 8109b00:	100002f6 	.word	0x100002f6

08109b04 <__sinit_lock_release>:
 8109b04:	4801      	ldr	r0, [pc, #4]	; (8109b0c <__sinit_lock_release+0x8>)
 8109b06:	f000 bc15 	b.w	810a334 <__retarget_lock_release_recursive>
 8109b0a:	bf00      	nop
 8109b0c:	100002f6 	.word	0x100002f6

08109b10 <__sinit>:
 8109b10:	b510      	push	{r4, lr}
 8109b12:	4604      	mov	r4, r0
 8109b14:	f7ff fff0 	bl	8109af8 <__sinit_lock_acquire>
 8109b18:	69a3      	ldr	r3, [r4, #24]
 8109b1a:	b11b      	cbz	r3, 8109b24 <__sinit+0x14>
 8109b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109b20:	f7ff bff0 	b.w	8109b04 <__sinit_lock_release>
 8109b24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8109b28:	6523      	str	r3, [r4, #80]	; 0x50
 8109b2a:	4b13      	ldr	r3, [pc, #76]	; (8109b78 <__sinit+0x68>)
 8109b2c:	4a13      	ldr	r2, [pc, #76]	; (8109b7c <__sinit+0x6c>)
 8109b2e:	681b      	ldr	r3, [r3, #0]
 8109b30:	62a2      	str	r2, [r4, #40]	; 0x28
 8109b32:	42a3      	cmp	r3, r4
 8109b34:	bf04      	itt	eq
 8109b36:	2301      	moveq	r3, #1
 8109b38:	61a3      	streq	r3, [r4, #24]
 8109b3a:	4620      	mov	r0, r4
 8109b3c:	f000 f820 	bl	8109b80 <__sfp>
 8109b40:	6060      	str	r0, [r4, #4]
 8109b42:	4620      	mov	r0, r4
 8109b44:	f000 f81c 	bl	8109b80 <__sfp>
 8109b48:	60a0      	str	r0, [r4, #8]
 8109b4a:	4620      	mov	r0, r4
 8109b4c:	f000 f818 	bl	8109b80 <__sfp>
 8109b50:	2200      	movs	r2, #0
 8109b52:	60e0      	str	r0, [r4, #12]
 8109b54:	2104      	movs	r1, #4
 8109b56:	6860      	ldr	r0, [r4, #4]
 8109b58:	f7ff ff82 	bl	8109a60 <std>
 8109b5c:	68a0      	ldr	r0, [r4, #8]
 8109b5e:	2201      	movs	r2, #1
 8109b60:	2109      	movs	r1, #9
 8109b62:	f7ff ff7d 	bl	8109a60 <std>
 8109b66:	68e0      	ldr	r0, [r4, #12]
 8109b68:	2202      	movs	r2, #2
 8109b6a:	2112      	movs	r1, #18
 8109b6c:	f7ff ff78 	bl	8109a60 <std>
 8109b70:	2301      	movs	r3, #1
 8109b72:	61a3      	str	r3, [r4, #24]
 8109b74:	e7d2      	b.n	8109b1c <__sinit+0xc>
 8109b76:	bf00      	nop
 8109b78:	0810bbe0 	.word	0x0810bbe0
 8109b7c:	08109aa9 	.word	0x08109aa9

08109b80 <__sfp>:
 8109b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109b82:	4607      	mov	r7, r0
 8109b84:	f7ff ffac 	bl	8109ae0 <__sfp_lock_acquire>
 8109b88:	4b1e      	ldr	r3, [pc, #120]	; (8109c04 <__sfp+0x84>)
 8109b8a:	681e      	ldr	r6, [r3, #0]
 8109b8c:	69b3      	ldr	r3, [r6, #24]
 8109b8e:	b913      	cbnz	r3, 8109b96 <__sfp+0x16>
 8109b90:	4630      	mov	r0, r6
 8109b92:	f7ff ffbd 	bl	8109b10 <__sinit>
 8109b96:	3648      	adds	r6, #72	; 0x48
 8109b98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8109b9c:	3b01      	subs	r3, #1
 8109b9e:	d503      	bpl.n	8109ba8 <__sfp+0x28>
 8109ba0:	6833      	ldr	r3, [r6, #0]
 8109ba2:	b30b      	cbz	r3, 8109be8 <__sfp+0x68>
 8109ba4:	6836      	ldr	r6, [r6, #0]
 8109ba6:	e7f7      	b.n	8109b98 <__sfp+0x18>
 8109ba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8109bac:	b9d5      	cbnz	r5, 8109be4 <__sfp+0x64>
 8109bae:	4b16      	ldr	r3, [pc, #88]	; (8109c08 <__sfp+0x88>)
 8109bb0:	60e3      	str	r3, [r4, #12]
 8109bb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8109bb6:	6665      	str	r5, [r4, #100]	; 0x64
 8109bb8:	f000 fbba 	bl	810a330 <__retarget_lock_init_recursive>
 8109bbc:	f7ff ff96 	bl	8109aec <__sfp_lock_release>
 8109bc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8109bc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8109bc8:	6025      	str	r5, [r4, #0]
 8109bca:	61a5      	str	r5, [r4, #24]
 8109bcc:	2208      	movs	r2, #8
 8109bce:	4629      	mov	r1, r5
 8109bd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8109bd4:	f7fd f950 	bl	8106e78 <memset>
 8109bd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8109bdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8109be0:	4620      	mov	r0, r4
 8109be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8109be4:	3468      	adds	r4, #104	; 0x68
 8109be6:	e7d9      	b.n	8109b9c <__sfp+0x1c>
 8109be8:	2104      	movs	r1, #4
 8109bea:	4638      	mov	r0, r7
 8109bec:	f7ff ff62 	bl	8109ab4 <__sfmoreglue>
 8109bf0:	4604      	mov	r4, r0
 8109bf2:	6030      	str	r0, [r6, #0]
 8109bf4:	2800      	cmp	r0, #0
 8109bf6:	d1d5      	bne.n	8109ba4 <__sfp+0x24>
 8109bf8:	f7ff ff78 	bl	8109aec <__sfp_lock_release>
 8109bfc:	230c      	movs	r3, #12
 8109bfe:	603b      	str	r3, [r7, #0]
 8109c00:	e7ee      	b.n	8109be0 <__sfp+0x60>
 8109c02:	bf00      	nop
 8109c04:	0810bbe0 	.word	0x0810bbe0
 8109c08:	ffff0001 	.word	0xffff0001

08109c0c <_fwalk_reent>:
 8109c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109c10:	4606      	mov	r6, r0
 8109c12:	4688      	mov	r8, r1
 8109c14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8109c18:	2700      	movs	r7, #0
 8109c1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8109c1e:	f1b9 0901 	subs.w	r9, r9, #1
 8109c22:	d505      	bpl.n	8109c30 <_fwalk_reent+0x24>
 8109c24:	6824      	ldr	r4, [r4, #0]
 8109c26:	2c00      	cmp	r4, #0
 8109c28:	d1f7      	bne.n	8109c1a <_fwalk_reent+0xe>
 8109c2a:	4638      	mov	r0, r7
 8109c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109c30:	89ab      	ldrh	r3, [r5, #12]
 8109c32:	2b01      	cmp	r3, #1
 8109c34:	d907      	bls.n	8109c46 <_fwalk_reent+0x3a>
 8109c36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8109c3a:	3301      	adds	r3, #1
 8109c3c:	d003      	beq.n	8109c46 <_fwalk_reent+0x3a>
 8109c3e:	4629      	mov	r1, r5
 8109c40:	4630      	mov	r0, r6
 8109c42:	47c0      	blx	r8
 8109c44:	4307      	orrs	r7, r0
 8109c46:	3568      	adds	r5, #104	; 0x68
 8109c48:	e7e9      	b.n	8109c1e <_fwalk_reent+0x12>

08109c4a <rshift>:
 8109c4a:	6903      	ldr	r3, [r0, #16]
 8109c4c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8109c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8109c54:	ea4f 1261 	mov.w	r2, r1, asr #5
 8109c58:	f100 0414 	add.w	r4, r0, #20
 8109c5c:	dd45      	ble.n	8109cea <rshift+0xa0>
 8109c5e:	f011 011f 	ands.w	r1, r1, #31
 8109c62:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8109c66:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8109c6a:	d10c      	bne.n	8109c86 <rshift+0x3c>
 8109c6c:	f100 0710 	add.w	r7, r0, #16
 8109c70:	4629      	mov	r1, r5
 8109c72:	42b1      	cmp	r1, r6
 8109c74:	d334      	bcc.n	8109ce0 <rshift+0x96>
 8109c76:	1a9b      	subs	r3, r3, r2
 8109c78:	009b      	lsls	r3, r3, #2
 8109c7a:	1eea      	subs	r2, r5, #3
 8109c7c:	4296      	cmp	r6, r2
 8109c7e:	bf38      	it	cc
 8109c80:	2300      	movcc	r3, #0
 8109c82:	4423      	add	r3, r4
 8109c84:	e015      	b.n	8109cb2 <rshift+0x68>
 8109c86:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8109c8a:	f1c1 0820 	rsb	r8, r1, #32
 8109c8e:	40cf      	lsrs	r7, r1
 8109c90:	f105 0e04 	add.w	lr, r5, #4
 8109c94:	46a1      	mov	r9, r4
 8109c96:	4576      	cmp	r6, lr
 8109c98:	46f4      	mov	ip, lr
 8109c9a:	d815      	bhi.n	8109cc8 <rshift+0x7e>
 8109c9c:	1a9a      	subs	r2, r3, r2
 8109c9e:	0092      	lsls	r2, r2, #2
 8109ca0:	3a04      	subs	r2, #4
 8109ca2:	3501      	adds	r5, #1
 8109ca4:	42ae      	cmp	r6, r5
 8109ca6:	bf38      	it	cc
 8109ca8:	2200      	movcc	r2, #0
 8109caa:	18a3      	adds	r3, r4, r2
 8109cac:	50a7      	str	r7, [r4, r2]
 8109cae:	b107      	cbz	r7, 8109cb2 <rshift+0x68>
 8109cb0:	3304      	adds	r3, #4
 8109cb2:	1b1a      	subs	r2, r3, r4
 8109cb4:	42a3      	cmp	r3, r4
 8109cb6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8109cba:	bf08      	it	eq
 8109cbc:	2300      	moveq	r3, #0
 8109cbe:	6102      	str	r2, [r0, #16]
 8109cc0:	bf08      	it	eq
 8109cc2:	6143      	streq	r3, [r0, #20]
 8109cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8109cc8:	f8dc c000 	ldr.w	ip, [ip]
 8109ccc:	fa0c fc08 	lsl.w	ip, ip, r8
 8109cd0:	ea4c 0707 	orr.w	r7, ip, r7
 8109cd4:	f849 7b04 	str.w	r7, [r9], #4
 8109cd8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8109cdc:	40cf      	lsrs	r7, r1
 8109cde:	e7da      	b.n	8109c96 <rshift+0x4c>
 8109ce0:	f851 cb04 	ldr.w	ip, [r1], #4
 8109ce4:	f847 cf04 	str.w	ip, [r7, #4]!
 8109ce8:	e7c3      	b.n	8109c72 <rshift+0x28>
 8109cea:	4623      	mov	r3, r4
 8109cec:	e7e1      	b.n	8109cb2 <rshift+0x68>

08109cee <__hexdig_fun>:
 8109cee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8109cf2:	2b09      	cmp	r3, #9
 8109cf4:	d802      	bhi.n	8109cfc <__hexdig_fun+0xe>
 8109cf6:	3820      	subs	r0, #32
 8109cf8:	b2c0      	uxtb	r0, r0
 8109cfa:	4770      	bx	lr
 8109cfc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8109d00:	2b05      	cmp	r3, #5
 8109d02:	d801      	bhi.n	8109d08 <__hexdig_fun+0x1a>
 8109d04:	3847      	subs	r0, #71	; 0x47
 8109d06:	e7f7      	b.n	8109cf8 <__hexdig_fun+0xa>
 8109d08:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8109d0c:	2b05      	cmp	r3, #5
 8109d0e:	d801      	bhi.n	8109d14 <__hexdig_fun+0x26>
 8109d10:	3827      	subs	r0, #39	; 0x27
 8109d12:	e7f1      	b.n	8109cf8 <__hexdig_fun+0xa>
 8109d14:	2000      	movs	r0, #0
 8109d16:	4770      	bx	lr

08109d18 <__gethex>:
 8109d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109d1c:	ed2d 8b02 	vpush	{d8}
 8109d20:	b089      	sub	sp, #36	; 0x24
 8109d22:	ee08 0a10 	vmov	s16, r0
 8109d26:	9304      	str	r3, [sp, #16]
 8109d28:	4bb4      	ldr	r3, [pc, #720]	; (8109ffc <__gethex+0x2e4>)
 8109d2a:	681b      	ldr	r3, [r3, #0]
 8109d2c:	9301      	str	r3, [sp, #4]
 8109d2e:	4618      	mov	r0, r3
 8109d30:	468b      	mov	fp, r1
 8109d32:	4690      	mov	r8, r2
 8109d34:	f7f6 fad4 	bl	81002e0 <strlen>
 8109d38:	9b01      	ldr	r3, [sp, #4]
 8109d3a:	f8db 2000 	ldr.w	r2, [fp]
 8109d3e:	4403      	add	r3, r0
 8109d40:	4682      	mov	sl, r0
 8109d42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8109d46:	9305      	str	r3, [sp, #20]
 8109d48:	1c93      	adds	r3, r2, #2
 8109d4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8109d4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8109d52:	32fe      	adds	r2, #254	; 0xfe
 8109d54:	18d1      	adds	r1, r2, r3
 8109d56:	461f      	mov	r7, r3
 8109d58:	f813 0b01 	ldrb.w	r0, [r3], #1
 8109d5c:	9100      	str	r1, [sp, #0]
 8109d5e:	2830      	cmp	r0, #48	; 0x30
 8109d60:	d0f8      	beq.n	8109d54 <__gethex+0x3c>
 8109d62:	f7ff ffc4 	bl	8109cee <__hexdig_fun>
 8109d66:	4604      	mov	r4, r0
 8109d68:	2800      	cmp	r0, #0
 8109d6a:	d13a      	bne.n	8109de2 <__gethex+0xca>
 8109d6c:	9901      	ldr	r1, [sp, #4]
 8109d6e:	4652      	mov	r2, sl
 8109d70:	4638      	mov	r0, r7
 8109d72:	f001 fc70 	bl	810b656 <strncmp>
 8109d76:	4605      	mov	r5, r0
 8109d78:	2800      	cmp	r0, #0
 8109d7a:	d168      	bne.n	8109e4e <__gethex+0x136>
 8109d7c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8109d80:	eb07 060a 	add.w	r6, r7, sl
 8109d84:	f7ff ffb3 	bl	8109cee <__hexdig_fun>
 8109d88:	2800      	cmp	r0, #0
 8109d8a:	d062      	beq.n	8109e52 <__gethex+0x13a>
 8109d8c:	4633      	mov	r3, r6
 8109d8e:	7818      	ldrb	r0, [r3, #0]
 8109d90:	2830      	cmp	r0, #48	; 0x30
 8109d92:	461f      	mov	r7, r3
 8109d94:	f103 0301 	add.w	r3, r3, #1
 8109d98:	d0f9      	beq.n	8109d8e <__gethex+0x76>
 8109d9a:	f7ff ffa8 	bl	8109cee <__hexdig_fun>
 8109d9e:	2301      	movs	r3, #1
 8109da0:	fab0 f480 	clz	r4, r0
 8109da4:	0964      	lsrs	r4, r4, #5
 8109da6:	4635      	mov	r5, r6
 8109da8:	9300      	str	r3, [sp, #0]
 8109daa:	463a      	mov	r2, r7
 8109dac:	4616      	mov	r6, r2
 8109dae:	3201      	adds	r2, #1
 8109db0:	7830      	ldrb	r0, [r6, #0]
 8109db2:	f7ff ff9c 	bl	8109cee <__hexdig_fun>
 8109db6:	2800      	cmp	r0, #0
 8109db8:	d1f8      	bne.n	8109dac <__gethex+0x94>
 8109dba:	9901      	ldr	r1, [sp, #4]
 8109dbc:	4652      	mov	r2, sl
 8109dbe:	4630      	mov	r0, r6
 8109dc0:	f001 fc49 	bl	810b656 <strncmp>
 8109dc4:	b980      	cbnz	r0, 8109de8 <__gethex+0xd0>
 8109dc6:	b94d      	cbnz	r5, 8109ddc <__gethex+0xc4>
 8109dc8:	eb06 050a 	add.w	r5, r6, sl
 8109dcc:	462a      	mov	r2, r5
 8109dce:	4616      	mov	r6, r2
 8109dd0:	3201      	adds	r2, #1
 8109dd2:	7830      	ldrb	r0, [r6, #0]
 8109dd4:	f7ff ff8b 	bl	8109cee <__hexdig_fun>
 8109dd8:	2800      	cmp	r0, #0
 8109dda:	d1f8      	bne.n	8109dce <__gethex+0xb6>
 8109ddc:	1bad      	subs	r5, r5, r6
 8109dde:	00ad      	lsls	r5, r5, #2
 8109de0:	e004      	b.n	8109dec <__gethex+0xd4>
 8109de2:	2400      	movs	r4, #0
 8109de4:	4625      	mov	r5, r4
 8109de6:	e7e0      	b.n	8109daa <__gethex+0x92>
 8109de8:	2d00      	cmp	r5, #0
 8109dea:	d1f7      	bne.n	8109ddc <__gethex+0xc4>
 8109dec:	7833      	ldrb	r3, [r6, #0]
 8109dee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8109df2:	2b50      	cmp	r3, #80	; 0x50
 8109df4:	d13b      	bne.n	8109e6e <__gethex+0x156>
 8109df6:	7873      	ldrb	r3, [r6, #1]
 8109df8:	2b2b      	cmp	r3, #43	; 0x2b
 8109dfa:	d02c      	beq.n	8109e56 <__gethex+0x13e>
 8109dfc:	2b2d      	cmp	r3, #45	; 0x2d
 8109dfe:	d02e      	beq.n	8109e5e <__gethex+0x146>
 8109e00:	1c71      	adds	r1, r6, #1
 8109e02:	f04f 0900 	mov.w	r9, #0
 8109e06:	7808      	ldrb	r0, [r1, #0]
 8109e08:	f7ff ff71 	bl	8109cee <__hexdig_fun>
 8109e0c:	1e43      	subs	r3, r0, #1
 8109e0e:	b2db      	uxtb	r3, r3
 8109e10:	2b18      	cmp	r3, #24
 8109e12:	d82c      	bhi.n	8109e6e <__gethex+0x156>
 8109e14:	f1a0 0210 	sub.w	r2, r0, #16
 8109e18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8109e1c:	f7ff ff67 	bl	8109cee <__hexdig_fun>
 8109e20:	1e43      	subs	r3, r0, #1
 8109e22:	b2db      	uxtb	r3, r3
 8109e24:	2b18      	cmp	r3, #24
 8109e26:	d91d      	bls.n	8109e64 <__gethex+0x14c>
 8109e28:	f1b9 0f00 	cmp.w	r9, #0
 8109e2c:	d000      	beq.n	8109e30 <__gethex+0x118>
 8109e2e:	4252      	negs	r2, r2
 8109e30:	4415      	add	r5, r2
 8109e32:	f8cb 1000 	str.w	r1, [fp]
 8109e36:	b1e4      	cbz	r4, 8109e72 <__gethex+0x15a>
 8109e38:	9b00      	ldr	r3, [sp, #0]
 8109e3a:	2b00      	cmp	r3, #0
 8109e3c:	bf14      	ite	ne
 8109e3e:	2700      	movne	r7, #0
 8109e40:	2706      	moveq	r7, #6
 8109e42:	4638      	mov	r0, r7
 8109e44:	b009      	add	sp, #36	; 0x24
 8109e46:	ecbd 8b02 	vpop	{d8}
 8109e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109e4e:	463e      	mov	r6, r7
 8109e50:	4625      	mov	r5, r4
 8109e52:	2401      	movs	r4, #1
 8109e54:	e7ca      	b.n	8109dec <__gethex+0xd4>
 8109e56:	f04f 0900 	mov.w	r9, #0
 8109e5a:	1cb1      	adds	r1, r6, #2
 8109e5c:	e7d3      	b.n	8109e06 <__gethex+0xee>
 8109e5e:	f04f 0901 	mov.w	r9, #1
 8109e62:	e7fa      	b.n	8109e5a <__gethex+0x142>
 8109e64:	230a      	movs	r3, #10
 8109e66:	fb03 0202 	mla	r2, r3, r2, r0
 8109e6a:	3a10      	subs	r2, #16
 8109e6c:	e7d4      	b.n	8109e18 <__gethex+0x100>
 8109e6e:	4631      	mov	r1, r6
 8109e70:	e7df      	b.n	8109e32 <__gethex+0x11a>
 8109e72:	1bf3      	subs	r3, r6, r7
 8109e74:	3b01      	subs	r3, #1
 8109e76:	4621      	mov	r1, r4
 8109e78:	2b07      	cmp	r3, #7
 8109e7a:	dc0b      	bgt.n	8109e94 <__gethex+0x17c>
 8109e7c:	ee18 0a10 	vmov	r0, s16
 8109e80:	f000 fad8 	bl	810a434 <_Balloc>
 8109e84:	4604      	mov	r4, r0
 8109e86:	b940      	cbnz	r0, 8109e9a <__gethex+0x182>
 8109e88:	4b5d      	ldr	r3, [pc, #372]	; (810a000 <__gethex+0x2e8>)
 8109e8a:	4602      	mov	r2, r0
 8109e8c:	21de      	movs	r1, #222	; 0xde
 8109e8e:	485d      	ldr	r0, [pc, #372]	; (810a004 <__gethex+0x2ec>)
 8109e90:	f001 fc14 	bl	810b6bc <__assert_func>
 8109e94:	3101      	adds	r1, #1
 8109e96:	105b      	asrs	r3, r3, #1
 8109e98:	e7ee      	b.n	8109e78 <__gethex+0x160>
 8109e9a:	f100 0914 	add.w	r9, r0, #20
 8109e9e:	f04f 0b00 	mov.w	fp, #0
 8109ea2:	f1ca 0301 	rsb	r3, sl, #1
 8109ea6:	f8cd 9008 	str.w	r9, [sp, #8]
 8109eaa:	f8cd b000 	str.w	fp, [sp]
 8109eae:	9306      	str	r3, [sp, #24]
 8109eb0:	42b7      	cmp	r7, r6
 8109eb2:	d340      	bcc.n	8109f36 <__gethex+0x21e>
 8109eb4:	9802      	ldr	r0, [sp, #8]
 8109eb6:	9b00      	ldr	r3, [sp, #0]
 8109eb8:	f840 3b04 	str.w	r3, [r0], #4
 8109ebc:	eba0 0009 	sub.w	r0, r0, r9
 8109ec0:	1080      	asrs	r0, r0, #2
 8109ec2:	0146      	lsls	r6, r0, #5
 8109ec4:	6120      	str	r0, [r4, #16]
 8109ec6:	4618      	mov	r0, r3
 8109ec8:	f000 fba6 	bl	810a618 <__hi0bits>
 8109ecc:	1a30      	subs	r0, r6, r0
 8109ece:	f8d8 6000 	ldr.w	r6, [r8]
 8109ed2:	42b0      	cmp	r0, r6
 8109ed4:	dd63      	ble.n	8109f9e <__gethex+0x286>
 8109ed6:	1b87      	subs	r7, r0, r6
 8109ed8:	4639      	mov	r1, r7
 8109eda:	4620      	mov	r0, r4
 8109edc:	f000 ff4a 	bl	810ad74 <__any_on>
 8109ee0:	4682      	mov	sl, r0
 8109ee2:	b1a8      	cbz	r0, 8109f10 <__gethex+0x1f8>
 8109ee4:	1e7b      	subs	r3, r7, #1
 8109ee6:	1159      	asrs	r1, r3, #5
 8109ee8:	f003 021f 	and.w	r2, r3, #31
 8109eec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8109ef0:	f04f 0a01 	mov.w	sl, #1
 8109ef4:	fa0a f202 	lsl.w	r2, sl, r2
 8109ef8:	420a      	tst	r2, r1
 8109efa:	d009      	beq.n	8109f10 <__gethex+0x1f8>
 8109efc:	4553      	cmp	r3, sl
 8109efe:	dd05      	ble.n	8109f0c <__gethex+0x1f4>
 8109f00:	1eb9      	subs	r1, r7, #2
 8109f02:	4620      	mov	r0, r4
 8109f04:	f000 ff36 	bl	810ad74 <__any_on>
 8109f08:	2800      	cmp	r0, #0
 8109f0a:	d145      	bne.n	8109f98 <__gethex+0x280>
 8109f0c:	f04f 0a02 	mov.w	sl, #2
 8109f10:	4639      	mov	r1, r7
 8109f12:	4620      	mov	r0, r4
 8109f14:	f7ff fe99 	bl	8109c4a <rshift>
 8109f18:	443d      	add	r5, r7
 8109f1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8109f1e:	42ab      	cmp	r3, r5
 8109f20:	da4c      	bge.n	8109fbc <__gethex+0x2a4>
 8109f22:	ee18 0a10 	vmov	r0, s16
 8109f26:	4621      	mov	r1, r4
 8109f28:	f000 fac4 	bl	810a4b4 <_Bfree>
 8109f2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8109f2e:	2300      	movs	r3, #0
 8109f30:	6013      	str	r3, [r2, #0]
 8109f32:	27a3      	movs	r7, #163	; 0xa3
 8109f34:	e785      	b.n	8109e42 <__gethex+0x12a>
 8109f36:	1e73      	subs	r3, r6, #1
 8109f38:	9a05      	ldr	r2, [sp, #20]
 8109f3a:	9303      	str	r3, [sp, #12]
 8109f3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8109f40:	4293      	cmp	r3, r2
 8109f42:	d019      	beq.n	8109f78 <__gethex+0x260>
 8109f44:	f1bb 0f20 	cmp.w	fp, #32
 8109f48:	d107      	bne.n	8109f5a <__gethex+0x242>
 8109f4a:	9b02      	ldr	r3, [sp, #8]
 8109f4c:	9a00      	ldr	r2, [sp, #0]
 8109f4e:	f843 2b04 	str.w	r2, [r3], #4
 8109f52:	9302      	str	r3, [sp, #8]
 8109f54:	2300      	movs	r3, #0
 8109f56:	9300      	str	r3, [sp, #0]
 8109f58:	469b      	mov	fp, r3
 8109f5a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8109f5e:	f7ff fec6 	bl	8109cee <__hexdig_fun>
 8109f62:	9b00      	ldr	r3, [sp, #0]
 8109f64:	f000 000f 	and.w	r0, r0, #15
 8109f68:	fa00 f00b 	lsl.w	r0, r0, fp
 8109f6c:	4303      	orrs	r3, r0
 8109f6e:	9300      	str	r3, [sp, #0]
 8109f70:	f10b 0b04 	add.w	fp, fp, #4
 8109f74:	9b03      	ldr	r3, [sp, #12]
 8109f76:	e00d      	b.n	8109f94 <__gethex+0x27c>
 8109f78:	9b03      	ldr	r3, [sp, #12]
 8109f7a:	9a06      	ldr	r2, [sp, #24]
 8109f7c:	4413      	add	r3, r2
 8109f7e:	42bb      	cmp	r3, r7
 8109f80:	d3e0      	bcc.n	8109f44 <__gethex+0x22c>
 8109f82:	4618      	mov	r0, r3
 8109f84:	9901      	ldr	r1, [sp, #4]
 8109f86:	9307      	str	r3, [sp, #28]
 8109f88:	4652      	mov	r2, sl
 8109f8a:	f001 fb64 	bl	810b656 <strncmp>
 8109f8e:	9b07      	ldr	r3, [sp, #28]
 8109f90:	2800      	cmp	r0, #0
 8109f92:	d1d7      	bne.n	8109f44 <__gethex+0x22c>
 8109f94:	461e      	mov	r6, r3
 8109f96:	e78b      	b.n	8109eb0 <__gethex+0x198>
 8109f98:	f04f 0a03 	mov.w	sl, #3
 8109f9c:	e7b8      	b.n	8109f10 <__gethex+0x1f8>
 8109f9e:	da0a      	bge.n	8109fb6 <__gethex+0x29e>
 8109fa0:	1a37      	subs	r7, r6, r0
 8109fa2:	4621      	mov	r1, r4
 8109fa4:	ee18 0a10 	vmov	r0, s16
 8109fa8:	463a      	mov	r2, r7
 8109faa:	f000 fc9f 	bl	810a8ec <__lshift>
 8109fae:	1bed      	subs	r5, r5, r7
 8109fb0:	4604      	mov	r4, r0
 8109fb2:	f100 0914 	add.w	r9, r0, #20
 8109fb6:	f04f 0a00 	mov.w	sl, #0
 8109fba:	e7ae      	b.n	8109f1a <__gethex+0x202>
 8109fbc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8109fc0:	42a8      	cmp	r0, r5
 8109fc2:	dd72      	ble.n	810a0aa <__gethex+0x392>
 8109fc4:	1b45      	subs	r5, r0, r5
 8109fc6:	42ae      	cmp	r6, r5
 8109fc8:	dc36      	bgt.n	810a038 <__gethex+0x320>
 8109fca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8109fce:	2b02      	cmp	r3, #2
 8109fd0:	d02a      	beq.n	810a028 <__gethex+0x310>
 8109fd2:	2b03      	cmp	r3, #3
 8109fd4:	d02c      	beq.n	810a030 <__gethex+0x318>
 8109fd6:	2b01      	cmp	r3, #1
 8109fd8:	d11c      	bne.n	810a014 <__gethex+0x2fc>
 8109fda:	42ae      	cmp	r6, r5
 8109fdc:	d11a      	bne.n	810a014 <__gethex+0x2fc>
 8109fde:	2e01      	cmp	r6, #1
 8109fe0:	d112      	bne.n	810a008 <__gethex+0x2f0>
 8109fe2:	9a04      	ldr	r2, [sp, #16]
 8109fe4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8109fe8:	6013      	str	r3, [r2, #0]
 8109fea:	2301      	movs	r3, #1
 8109fec:	6123      	str	r3, [r4, #16]
 8109fee:	f8c9 3000 	str.w	r3, [r9]
 8109ff2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8109ff4:	2762      	movs	r7, #98	; 0x62
 8109ff6:	601c      	str	r4, [r3, #0]
 8109ff8:	e723      	b.n	8109e42 <__gethex+0x12a>
 8109ffa:	bf00      	nop
 8109ffc:	0810becc 	.word	0x0810becc
 810a000:	0810bdf0 	.word	0x0810bdf0
 810a004:	0810be64 	.word	0x0810be64
 810a008:	1e71      	subs	r1, r6, #1
 810a00a:	4620      	mov	r0, r4
 810a00c:	f000 feb2 	bl	810ad74 <__any_on>
 810a010:	2800      	cmp	r0, #0
 810a012:	d1e6      	bne.n	8109fe2 <__gethex+0x2ca>
 810a014:	ee18 0a10 	vmov	r0, s16
 810a018:	4621      	mov	r1, r4
 810a01a:	f000 fa4b 	bl	810a4b4 <_Bfree>
 810a01e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810a020:	2300      	movs	r3, #0
 810a022:	6013      	str	r3, [r2, #0]
 810a024:	2750      	movs	r7, #80	; 0x50
 810a026:	e70c      	b.n	8109e42 <__gethex+0x12a>
 810a028:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a02a:	2b00      	cmp	r3, #0
 810a02c:	d1f2      	bne.n	810a014 <__gethex+0x2fc>
 810a02e:	e7d8      	b.n	8109fe2 <__gethex+0x2ca>
 810a030:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a032:	2b00      	cmp	r3, #0
 810a034:	d1d5      	bne.n	8109fe2 <__gethex+0x2ca>
 810a036:	e7ed      	b.n	810a014 <__gethex+0x2fc>
 810a038:	1e6f      	subs	r7, r5, #1
 810a03a:	f1ba 0f00 	cmp.w	sl, #0
 810a03e:	d131      	bne.n	810a0a4 <__gethex+0x38c>
 810a040:	b127      	cbz	r7, 810a04c <__gethex+0x334>
 810a042:	4639      	mov	r1, r7
 810a044:	4620      	mov	r0, r4
 810a046:	f000 fe95 	bl	810ad74 <__any_on>
 810a04a:	4682      	mov	sl, r0
 810a04c:	117b      	asrs	r3, r7, #5
 810a04e:	2101      	movs	r1, #1
 810a050:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810a054:	f007 071f 	and.w	r7, r7, #31
 810a058:	fa01 f707 	lsl.w	r7, r1, r7
 810a05c:	421f      	tst	r7, r3
 810a05e:	4629      	mov	r1, r5
 810a060:	4620      	mov	r0, r4
 810a062:	bf18      	it	ne
 810a064:	f04a 0a02 	orrne.w	sl, sl, #2
 810a068:	1b76      	subs	r6, r6, r5
 810a06a:	f7ff fdee 	bl	8109c4a <rshift>
 810a06e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810a072:	2702      	movs	r7, #2
 810a074:	f1ba 0f00 	cmp.w	sl, #0
 810a078:	d048      	beq.n	810a10c <__gethex+0x3f4>
 810a07a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810a07e:	2b02      	cmp	r3, #2
 810a080:	d015      	beq.n	810a0ae <__gethex+0x396>
 810a082:	2b03      	cmp	r3, #3
 810a084:	d017      	beq.n	810a0b6 <__gethex+0x39e>
 810a086:	2b01      	cmp	r3, #1
 810a088:	d109      	bne.n	810a09e <__gethex+0x386>
 810a08a:	f01a 0f02 	tst.w	sl, #2
 810a08e:	d006      	beq.n	810a09e <__gethex+0x386>
 810a090:	f8d9 0000 	ldr.w	r0, [r9]
 810a094:	ea4a 0a00 	orr.w	sl, sl, r0
 810a098:	f01a 0f01 	tst.w	sl, #1
 810a09c:	d10e      	bne.n	810a0bc <__gethex+0x3a4>
 810a09e:	f047 0710 	orr.w	r7, r7, #16
 810a0a2:	e033      	b.n	810a10c <__gethex+0x3f4>
 810a0a4:	f04f 0a01 	mov.w	sl, #1
 810a0a8:	e7d0      	b.n	810a04c <__gethex+0x334>
 810a0aa:	2701      	movs	r7, #1
 810a0ac:	e7e2      	b.n	810a074 <__gethex+0x35c>
 810a0ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a0b0:	f1c3 0301 	rsb	r3, r3, #1
 810a0b4:	9315      	str	r3, [sp, #84]	; 0x54
 810a0b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a0b8:	2b00      	cmp	r3, #0
 810a0ba:	d0f0      	beq.n	810a09e <__gethex+0x386>
 810a0bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810a0c0:	f104 0314 	add.w	r3, r4, #20
 810a0c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810a0c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810a0cc:	f04f 0c00 	mov.w	ip, #0
 810a0d0:	4618      	mov	r0, r3
 810a0d2:	f853 2b04 	ldr.w	r2, [r3], #4
 810a0d6:	f1b2 3fff 	cmp.w	r2, #4294967295
 810a0da:	d01c      	beq.n	810a116 <__gethex+0x3fe>
 810a0dc:	3201      	adds	r2, #1
 810a0de:	6002      	str	r2, [r0, #0]
 810a0e0:	2f02      	cmp	r7, #2
 810a0e2:	f104 0314 	add.w	r3, r4, #20
 810a0e6:	d13f      	bne.n	810a168 <__gethex+0x450>
 810a0e8:	f8d8 2000 	ldr.w	r2, [r8]
 810a0ec:	3a01      	subs	r2, #1
 810a0ee:	42b2      	cmp	r2, r6
 810a0f0:	d10a      	bne.n	810a108 <__gethex+0x3f0>
 810a0f2:	1171      	asrs	r1, r6, #5
 810a0f4:	2201      	movs	r2, #1
 810a0f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810a0fa:	f006 061f 	and.w	r6, r6, #31
 810a0fe:	fa02 f606 	lsl.w	r6, r2, r6
 810a102:	421e      	tst	r6, r3
 810a104:	bf18      	it	ne
 810a106:	4617      	movne	r7, r2
 810a108:	f047 0720 	orr.w	r7, r7, #32
 810a10c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810a10e:	601c      	str	r4, [r3, #0]
 810a110:	9b04      	ldr	r3, [sp, #16]
 810a112:	601d      	str	r5, [r3, #0]
 810a114:	e695      	b.n	8109e42 <__gethex+0x12a>
 810a116:	4299      	cmp	r1, r3
 810a118:	f843 cc04 	str.w	ip, [r3, #-4]
 810a11c:	d8d8      	bhi.n	810a0d0 <__gethex+0x3b8>
 810a11e:	68a3      	ldr	r3, [r4, #8]
 810a120:	459b      	cmp	fp, r3
 810a122:	db19      	blt.n	810a158 <__gethex+0x440>
 810a124:	6861      	ldr	r1, [r4, #4]
 810a126:	ee18 0a10 	vmov	r0, s16
 810a12a:	3101      	adds	r1, #1
 810a12c:	f000 f982 	bl	810a434 <_Balloc>
 810a130:	4681      	mov	r9, r0
 810a132:	b918      	cbnz	r0, 810a13c <__gethex+0x424>
 810a134:	4b1a      	ldr	r3, [pc, #104]	; (810a1a0 <__gethex+0x488>)
 810a136:	4602      	mov	r2, r0
 810a138:	2184      	movs	r1, #132	; 0x84
 810a13a:	e6a8      	b.n	8109e8e <__gethex+0x176>
 810a13c:	6922      	ldr	r2, [r4, #16]
 810a13e:	3202      	adds	r2, #2
 810a140:	f104 010c 	add.w	r1, r4, #12
 810a144:	0092      	lsls	r2, r2, #2
 810a146:	300c      	adds	r0, #12
 810a148:	f7fc fe88 	bl	8106e5c <memcpy>
 810a14c:	4621      	mov	r1, r4
 810a14e:	ee18 0a10 	vmov	r0, s16
 810a152:	f000 f9af 	bl	810a4b4 <_Bfree>
 810a156:	464c      	mov	r4, r9
 810a158:	6923      	ldr	r3, [r4, #16]
 810a15a:	1c5a      	adds	r2, r3, #1
 810a15c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810a160:	6122      	str	r2, [r4, #16]
 810a162:	2201      	movs	r2, #1
 810a164:	615a      	str	r2, [r3, #20]
 810a166:	e7bb      	b.n	810a0e0 <__gethex+0x3c8>
 810a168:	6922      	ldr	r2, [r4, #16]
 810a16a:	455a      	cmp	r2, fp
 810a16c:	dd0b      	ble.n	810a186 <__gethex+0x46e>
 810a16e:	2101      	movs	r1, #1
 810a170:	4620      	mov	r0, r4
 810a172:	f7ff fd6a 	bl	8109c4a <rshift>
 810a176:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810a17a:	3501      	adds	r5, #1
 810a17c:	42ab      	cmp	r3, r5
 810a17e:	f6ff aed0 	blt.w	8109f22 <__gethex+0x20a>
 810a182:	2701      	movs	r7, #1
 810a184:	e7c0      	b.n	810a108 <__gethex+0x3f0>
 810a186:	f016 061f 	ands.w	r6, r6, #31
 810a18a:	d0fa      	beq.n	810a182 <__gethex+0x46a>
 810a18c:	4453      	add	r3, sl
 810a18e:	f1c6 0620 	rsb	r6, r6, #32
 810a192:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810a196:	f000 fa3f 	bl	810a618 <__hi0bits>
 810a19a:	42b0      	cmp	r0, r6
 810a19c:	dbe7      	blt.n	810a16e <__gethex+0x456>
 810a19e:	e7f0      	b.n	810a182 <__gethex+0x46a>
 810a1a0:	0810bdf0 	.word	0x0810bdf0

0810a1a4 <L_shift>:
 810a1a4:	f1c2 0208 	rsb	r2, r2, #8
 810a1a8:	0092      	lsls	r2, r2, #2
 810a1aa:	b570      	push	{r4, r5, r6, lr}
 810a1ac:	f1c2 0620 	rsb	r6, r2, #32
 810a1b0:	6843      	ldr	r3, [r0, #4]
 810a1b2:	6804      	ldr	r4, [r0, #0]
 810a1b4:	fa03 f506 	lsl.w	r5, r3, r6
 810a1b8:	432c      	orrs	r4, r5
 810a1ba:	40d3      	lsrs	r3, r2
 810a1bc:	6004      	str	r4, [r0, #0]
 810a1be:	f840 3f04 	str.w	r3, [r0, #4]!
 810a1c2:	4288      	cmp	r0, r1
 810a1c4:	d3f4      	bcc.n	810a1b0 <L_shift+0xc>
 810a1c6:	bd70      	pop	{r4, r5, r6, pc}

0810a1c8 <__match>:
 810a1c8:	b530      	push	{r4, r5, lr}
 810a1ca:	6803      	ldr	r3, [r0, #0]
 810a1cc:	3301      	adds	r3, #1
 810a1ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a1d2:	b914      	cbnz	r4, 810a1da <__match+0x12>
 810a1d4:	6003      	str	r3, [r0, #0]
 810a1d6:	2001      	movs	r0, #1
 810a1d8:	bd30      	pop	{r4, r5, pc}
 810a1da:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a1de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810a1e2:	2d19      	cmp	r5, #25
 810a1e4:	bf98      	it	ls
 810a1e6:	3220      	addls	r2, #32
 810a1e8:	42a2      	cmp	r2, r4
 810a1ea:	d0f0      	beq.n	810a1ce <__match+0x6>
 810a1ec:	2000      	movs	r0, #0
 810a1ee:	e7f3      	b.n	810a1d8 <__match+0x10>

0810a1f0 <__hexnan>:
 810a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a1f4:	680b      	ldr	r3, [r1, #0]
 810a1f6:	115e      	asrs	r6, r3, #5
 810a1f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810a1fc:	f013 031f 	ands.w	r3, r3, #31
 810a200:	b087      	sub	sp, #28
 810a202:	bf18      	it	ne
 810a204:	3604      	addne	r6, #4
 810a206:	2500      	movs	r5, #0
 810a208:	1f37      	subs	r7, r6, #4
 810a20a:	4690      	mov	r8, r2
 810a20c:	6802      	ldr	r2, [r0, #0]
 810a20e:	9301      	str	r3, [sp, #4]
 810a210:	4682      	mov	sl, r0
 810a212:	f846 5c04 	str.w	r5, [r6, #-4]
 810a216:	46b9      	mov	r9, r7
 810a218:	463c      	mov	r4, r7
 810a21a:	9502      	str	r5, [sp, #8]
 810a21c:	46ab      	mov	fp, r5
 810a21e:	7851      	ldrb	r1, [r2, #1]
 810a220:	1c53      	adds	r3, r2, #1
 810a222:	9303      	str	r3, [sp, #12]
 810a224:	b341      	cbz	r1, 810a278 <__hexnan+0x88>
 810a226:	4608      	mov	r0, r1
 810a228:	9205      	str	r2, [sp, #20]
 810a22a:	9104      	str	r1, [sp, #16]
 810a22c:	f7ff fd5f 	bl	8109cee <__hexdig_fun>
 810a230:	2800      	cmp	r0, #0
 810a232:	d14f      	bne.n	810a2d4 <__hexnan+0xe4>
 810a234:	9904      	ldr	r1, [sp, #16]
 810a236:	9a05      	ldr	r2, [sp, #20]
 810a238:	2920      	cmp	r1, #32
 810a23a:	d818      	bhi.n	810a26e <__hexnan+0x7e>
 810a23c:	9b02      	ldr	r3, [sp, #8]
 810a23e:	459b      	cmp	fp, r3
 810a240:	dd13      	ble.n	810a26a <__hexnan+0x7a>
 810a242:	454c      	cmp	r4, r9
 810a244:	d206      	bcs.n	810a254 <__hexnan+0x64>
 810a246:	2d07      	cmp	r5, #7
 810a248:	dc04      	bgt.n	810a254 <__hexnan+0x64>
 810a24a:	462a      	mov	r2, r5
 810a24c:	4649      	mov	r1, r9
 810a24e:	4620      	mov	r0, r4
 810a250:	f7ff ffa8 	bl	810a1a4 <L_shift>
 810a254:	4544      	cmp	r4, r8
 810a256:	d950      	bls.n	810a2fa <__hexnan+0x10a>
 810a258:	2300      	movs	r3, #0
 810a25a:	f1a4 0904 	sub.w	r9, r4, #4
 810a25e:	f844 3c04 	str.w	r3, [r4, #-4]
 810a262:	f8cd b008 	str.w	fp, [sp, #8]
 810a266:	464c      	mov	r4, r9
 810a268:	461d      	mov	r5, r3
 810a26a:	9a03      	ldr	r2, [sp, #12]
 810a26c:	e7d7      	b.n	810a21e <__hexnan+0x2e>
 810a26e:	2929      	cmp	r1, #41	; 0x29
 810a270:	d156      	bne.n	810a320 <__hexnan+0x130>
 810a272:	3202      	adds	r2, #2
 810a274:	f8ca 2000 	str.w	r2, [sl]
 810a278:	f1bb 0f00 	cmp.w	fp, #0
 810a27c:	d050      	beq.n	810a320 <__hexnan+0x130>
 810a27e:	454c      	cmp	r4, r9
 810a280:	d206      	bcs.n	810a290 <__hexnan+0xa0>
 810a282:	2d07      	cmp	r5, #7
 810a284:	dc04      	bgt.n	810a290 <__hexnan+0xa0>
 810a286:	462a      	mov	r2, r5
 810a288:	4649      	mov	r1, r9
 810a28a:	4620      	mov	r0, r4
 810a28c:	f7ff ff8a 	bl	810a1a4 <L_shift>
 810a290:	4544      	cmp	r4, r8
 810a292:	d934      	bls.n	810a2fe <__hexnan+0x10e>
 810a294:	f1a8 0204 	sub.w	r2, r8, #4
 810a298:	4623      	mov	r3, r4
 810a29a:	f853 1b04 	ldr.w	r1, [r3], #4
 810a29e:	f842 1f04 	str.w	r1, [r2, #4]!
 810a2a2:	429f      	cmp	r7, r3
 810a2a4:	d2f9      	bcs.n	810a29a <__hexnan+0xaa>
 810a2a6:	1b3b      	subs	r3, r7, r4
 810a2a8:	f023 0303 	bic.w	r3, r3, #3
 810a2ac:	3304      	adds	r3, #4
 810a2ae:	3401      	adds	r4, #1
 810a2b0:	3e03      	subs	r6, #3
 810a2b2:	42b4      	cmp	r4, r6
 810a2b4:	bf88      	it	hi
 810a2b6:	2304      	movhi	r3, #4
 810a2b8:	4443      	add	r3, r8
 810a2ba:	2200      	movs	r2, #0
 810a2bc:	f843 2b04 	str.w	r2, [r3], #4
 810a2c0:	429f      	cmp	r7, r3
 810a2c2:	d2fb      	bcs.n	810a2bc <__hexnan+0xcc>
 810a2c4:	683b      	ldr	r3, [r7, #0]
 810a2c6:	b91b      	cbnz	r3, 810a2d0 <__hexnan+0xe0>
 810a2c8:	4547      	cmp	r7, r8
 810a2ca:	d127      	bne.n	810a31c <__hexnan+0x12c>
 810a2cc:	2301      	movs	r3, #1
 810a2ce:	603b      	str	r3, [r7, #0]
 810a2d0:	2005      	movs	r0, #5
 810a2d2:	e026      	b.n	810a322 <__hexnan+0x132>
 810a2d4:	3501      	adds	r5, #1
 810a2d6:	2d08      	cmp	r5, #8
 810a2d8:	f10b 0b01 	add.w	fp, fp, #1
 810a2dc:	dd06      	ble.n	810a2ec <__hexnan+0xfc>
 810a2de:	4544      	cmp	r4, r8
 810a2e0:	d9c3      	bls.n	810a26a <__hexnan+0x7a>
 810a2e2:	2300      	movs	r3, #0
 810a2e4:	f844 3c04 	str.w	r3, [r4, #-4]
 810a2e8:	2501      	movs	r5, #1
 810a2ea:	3c04      	subs	r4, #4
 810a2ec:	6822      	ldr	r2, [r4, #0]
 810a2ee:	f000 000f 	and.w	r0, r0, #15
 810a2f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810a2f6:	6022      	str	r2, [r4, #0]
 810a2f8:	e7b7      	b.n	810a26a <__hexnan+0x7a>
 810a2fa:	2508      	movs	r5, #8
 810a2fc:	e7b5      	b.n	810a26a <__hexnan+0x7a>
 810a2fe:	9b01      	ldr	r3, [sp, #4]
 810a300:	2b00      	cmp	r3, #0
 810a302:	d0df      	beq.n	810a2c4 <__hexnan+0xd4>
 810a304:	f04f 32ff 	mov.w	r2, #4294967295
 810a308:	f1c3 0320 	rsb	r3, r3, #32
 810a30c:	fa22 f303 	lsr.w	r3, r2, r3
 810a310:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810a314:	401a      	ands	r2, r3
 810a316:	f846 2c04 	str.w	r2, [r6, #-4]
 810a31a:	e7d3      	b.n	810a2c4 <__hexnan+0xd4>
 810a31c:	3f04      	subs	r7, #4
 810a31e:	e7d1      	b.n	810a2c4 <__hexnan+0xd4>
 810a320:	2004      	movs	r0, #4
 810a322:	b007      	add	sp, #28
 810a324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810a328 <_localeconv_r>:
 810a328:	4800      	ldr	r0, [pc, #0]	; (810a32c <_localeconv_r+0x4>)
 810a32a:	4770      	bx	lr
 810a32c:	10000174 	.word	0x10000174

0810a330 <__retarget_lock_init_recursive>:
 810a330:	4770      	bx	lr

0810a332 <__retarget_lock_acquire_recursive>:
 810a332:	4770      	bx	lr

0810a334 <__retarget_lock_release_recursive>:
 810a334:	4770      	bx	lr

0810a336 <__swhatbuf_r>:
 810a336:	b570      	push	{r4, r5, r6, lr}
 810a338:	460e      	mov	r6, r1
 810a33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a33e:	2900      	cmp	r1, #0
 810a340:	b096      	sub	sp, #88	; 0x58
 810a342:	4614      	mov	r4, r2
 810a344:	461d      	mov	r5, r3
 810a346:	da08      	bge.n	810a35a <__swhatbuf_r+0x24>
 810a348:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810a34c:	2200      	movs	r2, #0
 810a34e:	602a      	str	r2, [r5, #0]
 810a350:	061a      	lsls	r2, r3, #24
 810a352:	d410      	bmi.n	810a376 <__swhatbuf_r+0x40>
 810a354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810a358:	e00e      	b.n	810a378 <__swhatbuf_r+0x42>
 810a35a:	466a      	mov	r2, sp
 810a35c:	f001 f9ee 	bl	810b73c <_fstat_r>
 810a360:	2800      	cmp	r0, #0
 810a362:	dbf1      	blt.n	810a348 <__swhatbuf_r+0x12>
 810a364:	9a01      	ldr	r2, [sp, #4]
 810a366:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810a36a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810a36e:	425a      	negs	r2, r3
 810a370:	415a      	adcs	r2, r3
 810a372:	602a      	str	r2, [r5, #0]
 810a374:	e7ee      	b.n	810a354 <__swhatbuf_r+0x1e>
 810a376:	2340      	movs	r3, #64	; 0x40
 810a378:	2000      	movs	r0, #0
 810a37a:	6023      	str	r3, [r4, #0]
 810a37c:	b016      	add	sp, #88	; 0x58
 810a37e:	bd70      	pop	{r4, r5, r6, pc}

0810a380 <__smakebuf_r>:
 810a380:	898b      	ldrh	r3, [r1, #12]
 810a382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810a384:	079d      	lsls	r5, r3, #30
 810a386:	4606      	mov	r6, r0
 810a388:	460c      	mov	r4, r1
 810a38a:	d507      	bpl.n	810a39c <__smakebuf_r+0x1c>
 810a38c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810a390:	6023      	str	r3, [r4, #0]
 810a392:	6123      	str	r3, [r4, #16]
 810a394:	2301      	movs	r3, #1
 810a396:	6163      	str	r3, [r4, #20]
 810a398:	b002      	add	sp, #8
 810a39a:	bd70      	pop	{r4, r5, r6, pc}
 810a39c:	ab01      	add	r3, sp, #4
 810a39e:	466a      	mov	r2, sp
 810a3a0:	f7ff ffc9 	bl	810a336 <__swhatbuf_r>
 810a3a4:	9900      	ldr	r1, [sp, #0]
 810a3a6:	4605      	mov	r5, r0
 810a3a8:	4630      	mov	r0, r6
 810a3aa:	f000 fd87 	bl	810aebc <_malloc_r>
 810a3ae:	b948      	cbnz	r0, 810a3c4 <__smakebuf_r+0x44>
 810a3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a3b4:	059a      	lsls	r2, r3, #22
 810a3b6:	d4ef      	bmi.n	810a398 <__smakebuf_r+0x18>
 810a3b8:	f023 0303 	bic.w	r3, r3, #3
 810a3bc:	f043 0302 	orr.w	r3, r3, #2
 810a3c0:	81a3      	strh	r3, [r4, #12]
 810a3c2:	e7e3      	b.n	810a38c <__smakebuf_r+0xc>
 810a3c4:	4b0d      	ldr	r3, [pc, #52]	; (810a3fc <__smakebuf_r+0x7c>)
 810a3c6:	62b3      	str	r3, [r6, #40]	; 0x28
 810a3c8:	89a3      	ldrh	r3, [r4, #12]
 810a3ca:	6020      	str	r0, [r4, #0]
 810a3cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810a3d0:	81a3      	strh	r3, [r4, #12]
 810a3d2:	9b00      	ldr	r3, [sp, #0]
 810a3d4:	6163      	str	r3, [r4, #20]
 810a3d6:	9b01      	ldr	r3, [sp, #4]
 810a3d8:	6120      	str	r0, [r4, #16]
 810a3da:	b15b      	cbz	r3, 810a3f4 <__smakebuf_r+0x74>
 810a3dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a3e0:	4630      	mov	r0, r6
 810a3e2:	f001 f9bd 	bl	810b760 <_isatty_r>
 810a3e6:	b128      	cbz	r0, 810a3f4 <__smakebuf_r+0x74>
 810a3e8:	89a3      	ldrh	r3, [r4, #12]
 810a3ea:	f023 0303 	bic.w	r3, r3, #3
 810a3ee:	f043 0301 	orr.w	r3, r3, #1
 810a3f2:	81a3      	strh	r3, [r4, #12]
 810a3f4:	89a0      	ldrh	r0, [r4, #12]
 810a3f6:	4305      	orrs	r5, r0
 810a3f8:	81a5      	strh	r5, [r4, #12]
 810a3fa:	e7cd      	b.n	810a398 <__smakebuf_r+0x18>
 810a3fc:	08109aa9 	.word	0x08109aa9

0810a400 <malloc>:
 810a400:	4b02      	ldr	r3, [pc, #8]	; (810a40c <malloc+0xc>)
 810a402:	4601      	mov	r1, r0
 810a404:	6818      	ldr	r0, [r3, #0]
 810a406:	f000 bd59 	b.w	810aebc <_malloc_r>
 810a40a:	bf00      	nop
 810a40c:	1000001c 	.word	0x1000001c

0810a410 <__ascii_mbtowc>:
 810a410:	b082      	sub	sp, #8
 810a412:	b901      	cbnz	r1, 810a416 <__ascii_mbtowc+0x6>
 810a414:	a901      	add	r1, sp, #4
 810a416:	b142      	cbz	r2, 810a42a <__ascii_mbtowc+0x1a>
 810a418:	b14b      	cbz	r3, 810a42e <__ascii_mbtowc+0x1e>
 810a41a:	7813      	ldrb	r3, [r2, #0]
 810a41c:	600b      	str	r3, [r1, #0]
 810a41e:	7812      	ldrb	r2, [r2, #0]
 810a420:	1e10      	subs	r0, r2, #0
 810a422:	bf18      	it	ne
 810a424:	2001      	movne	r0, #1
 810a426:	b002      	add	sp, #8
 810a428:	4770      	bx	lr
 810a42a:	4610      	mov	r0, r2
 810a42c:	e7fb      	b.n	810a426 <__ascii_mbtowc+0x16>
 810a42e:	f06f 0001 	mvn.w	r0, #1
 810a432:	e7f8      	b.n	810a426 <__ascii_mbtowc+0x16>

0810a434 <_Balloc>:
 810a434:	b570      	push	{r4, r5, r6, lr}
 810a436:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810a438:	4604      	mov	r4, r0
 810a43a:	460d      	mov	r5, r1
 810a43c:	b976      	cbnz	r6, 810a45c <_Balloc+0x28>
 810a43e:	2010      	movs	r0, #16
 810a440:	f7ff ffde 	bl	810a400 <malloc>
 810a444:	4602      	mov	r2, r0
 810a446:	6260      	str	r0, [r4, #36]	; 0x24
 810a448:	b920      	cbnz	r0, 810a454 <_Balloc+0x20>
 810a44a:	4b18      	ldr	r3, [pc, #96]	; (810a4ac <_Balloc+0x78>)
 810a44c:	4818      	ldr	r0, [pc, #96]	; (810a4b0 <_Balloc+0x7c>)
 810a44e:	2166      	movs	r1, #102	; 0x66
 810a450:	f001 f934 	bl	810b6bc <__assert_func>
 810a454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810a458:	6006      	str	r6, [r0, #0]
 810a45a:	60c6      	str	r6, [r0, #12]
 810a45c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810a45e:	68f3      	ldr	r3, [r6, #12]
 810a460:	b183      	cbz	r3, 810a484 <_Balloc+0x50>
 810a462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a464:	68db      	ldr	r3, [r3, #12]
 810a466:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810a46a:	b9b8      	cbnz	r0, 810a49c <_Balloc+0x68>
 810a46c:	2101      	movs	r1, #1
 810a46e:	fa01 f605 	lsl.w	r6, r1, r5
 810a472:	1d72      	adds	r2, r6, #5
 810a474:	0092      	lsls	r2, r2, #2
 810a476:	4620      	mov	r0, r4
 810a478:	f000 fc9d 	bl	810adb6 <_calloc_r>
 810a47c:	b160      	cbz	r0, 810a498 <_Balloc+0x64>
 810a47e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810a482:	e00e      	b.n	810a4a2 <_Balloc+0x6e>
 810a484:	2221      	movs	r2, #33	; 0x21
 810a486:	2104      	movs	r1, #4
 810a488:	4620      	mov	r0, r4
 810a48a:	f000 fc94 	bl	810adb6 <_calloc_r>
 810a48e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a490:	60f0      	str	r0, [r6, #12]
 810a492:	68db      	ldr	r3, [r3, #12]
 810a494:	2b00      	cmp	r3, #0
 810a496:	d1e4      	bne.n	810a462 <_Balloc+0x2e>
 810a498:	2000      	movs	r0, #0
 810a49a:	bd70      	pop	{r4, r5, r6, pc}
 810a49c:	6802      	ldr	r2, [r0, #0]
 810a49e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810a4a2:	2300      	movs	r3, #0
 810a4a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810a4a8:	e7f7      	b.n	810a49a <_Balloc+0x66>
 810a4aa:	bf00      	nop
 810a4ac:	0810bd7e 	.word	0x0810bd7e
 810a4b0:	0810bee0 	.word	0x0810bee0

0810a4b4 <_Bfree>:
 810a4b4:	b570      	push	{r4, r5, r6, lr}
 810a4b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810a4b8:	4605      	mov	r5, r0
 810a4ba:	460c      	mov	r4, r1
 810a4bc:	b976      	cbnz	r6, 810a4dc <_Bfree+0x28>
 810a4be:	2010      	movs	r0, #16
 810a4c0:	f7ff ff9e 	bl	810a400 <malloc>
 810a4c4:	4602      	mov	r2, r0
 810a4c6:	6268      	str	r0, [r5, #36]	; 0x24
 810a4c8:	b920      	cbnz	r0, 810a4d4 <_Bfree+0x20>
 810a4ca:	4b09      	ldr	r3, [pc, #36]	; (810a4f0 <_Bfree+0x3c>)
 810a4cc:	4809      	ldr	r0, [pc, #36]	; (810a4f4 <_Bfree+0x40>)
 810a4ce:	218a      	movs	r1, #138	; 0x8a
 810a4d0:	f001 f8f4 	bl	810b6bc <__assert_func>
 810a4d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810a4d8:	6006      	str	r6, [r0, #0]
 810a4da:	60c6      	str	r6, [r0, #12]
 810a4dc:	b13c      	cbz	r4, 810a4ee <_Bfree+0x3a>
 810a4de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810a4e0:	6862      	ldr	r2, [r4, #4]
 810a4e2:	68db      	ldr	r3, [r3, #12]
 810a4e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810a4e8:	6021      	str	r1, [r4, #0]
 810a4ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810a4ee:	bd70      	pop	{r4, r5, r6, pc}
 810a4f0:	0810bd7e 	.word	0x0810bd7e
 810a4f4:	0810bee0 	.word	0x0810bee0

0810a4f8 <__multadd>:
 810a4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a4fc:	690d      	ldr	r5, [r1, #16]
 810a4fe:	4607      	mov	r7, r0
 810a500:	460c      	mov	r4, r1
 810a502:	461e      	mov	r6, r3
 810a504:	f101 0c14 	add.w	ip, r1, #20
 810a508:	2000      	movs	r0, #0
 810a50a:	f8dc 3000 	ldr.w	r3, [ip]
 810a50e:	b299      	uxth	r1, r3
 810a510:	fb02 6101 	mla	r1, r2, r1, r6
 810a514:	0c1e      	lsrs	r6, r3, #16
 810a516:	0c0b      	lsrs	r3, r1, #16
 810a518:	fb02 3306 	mla	r3, r2, r6, r3
 810a51c:	b289      	uxth	r1, r1
 810a51e:	3001      	adds	r0, #1
 810a520:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810a524:	4285      	cmp	r5, r0
 810a526:	f84c 1b04 	str.w	r1, [ip], #4
 810a52a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810a52e:	dcec      	bgt.n	810a50a <__multadd+0x12>
 810a530:	b30e      	cbz	r6, 810a576 <__multadd+0x7e>
 810a532:	68a3      	ldr	r3, [r4, #8]
 810a534:	42ab      	cmp	r3, r5
 810a536:	dc19      	bgt.n	810a56c <__multadd+0x74>
 810a538:	6861      	ldr	r1, [r4, #4]
 810a53a:	4638      	mov	r0, r7
 810a53c:	3101      	adds	r1, #1
 810a53e:	f7ff ff79 	bl	810a434 <_Balloc>
 810a542:	4680      	mov	r8, r0
 810a544:	b928      	cbnz	r0, 810a552 <__multadd+0x5a>
 810a546:	4602      	mov	r2, r0
 810a548:	4b0c      	ldr	r3, [pc, #48]	; (810a57c <__multadd+0x84>)
 810a54a:	480d      	ldr	r0, [pc, #52]	; (810a580 <__multadd+0x88>)
 810a54c:	21b5      	movs	r1, #181	; 0xb5
 810a54e:	f001 f8b5 	bl	810b6bc <__assert_func>
 810a552:	6922      	ldr	r2, [r4, #16]
 810a554:	3202      	adds	r2, #2
 810a556:	f104 010c 	add.w	r1, r4, #12
 810a55a:	0092      	lsls	r2, r2, #2
 810a55c:	300c      	adds	r0, #12
 810a55e:	f7fc fc7d 	bl	8106e5c <memcpy>
 810a562:	4621      	mov	r1, r4
 810a564:	4638      	mov	r0, r7
 810a566:	f7ff ffa5 	bl	810a4b4 <_Bfree>
 810a56a:	4644      	mov	r4, r8
 810a56c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810a570:	3501      	adds	r5, #1
 810a572:	615e      	str	r6, [r3, #20]
 810a574:	6125      	str	r5, [r4, #16]
 810a576:	4620      	mov	r0, r4
 810a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a57c:	0810bdf0 	.word	0x0810bdf0
 810a580:	0810bee0 	.word	0x0810bee0

0810a584 <__s2b>:
 810a584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a588:	460c      	mov	r4, r1
 810a58a:	4615      	mov	r5, r2
 810a58c:	461f      	mov	r7, r3
 810a58e:	2209      	movs	r2, #9
 810a590:	3308      	adds	r3, #8
 810a592:	4606      	mov	r6, r0
 810a594:	fb93 f3f2 	sdiv	r3, r3, r2
 810a598:	2100      	movs	r1, #0
 810a59a:	2201      	movs	r2, #1
 810a59c:	429a      	cmp	r2, r3
 810a59e:	db09      	blt.n	810a5b4 <__s2b+0x30>
 810a5a0:	4630      	mov	r0, r6
 810a5a2:	f7ff ff47 	bl	810a434 <_Balloc>
 810a5a6:	b940      	cbnz	r0, 810a5ba <__s2b+0x36>
 810a5a8:	4602      	mov	r2, r0
 810a5aa:	4b19      	ldr	r3, [pc, #100]	; (810a610 <__s2b+0x8c>)
 810a5ac:	4819      	ldr	r0, [pc, #100]	; (810a614 <__s2b+0x90>)
 810a5ae:	21ce      	movs	r1, #206	; 0xce
 810a5b0:	f001 f884 	bl	810b6bc <__assert_func>
 810a5b4:	0052      	lsls	r2, r2, #1
 810a5b6:	3101      	adds	r1, #1
 810a5b8:	e7f0      	b.n	810a59c <__s2b+0x18>
 810a5ba:	9b08      	ldr	r3, [sp, #32]
 810a5bc:	6143      	str	r3, [r0, #20]
 810a5be:	2d09      	cmp	r5, #9
 810a5c0:	f04f 0301 	mov.w	r3, #1
 810a5c4:	6103      	str	r3, [r0, #16]
 810a5c6:	dd16      	ble.n	810a5f6 <__s2b+0x72>
 810a5c8:	f104 0909 	add.w	r9, r4, #9
 810a5cc:	46c8      	mov	r8, r9
 810a5ce:	442c      	add	r4, r5
 810a5d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 810a5d4:	4601      	mov	r1, r0
 810a5d6:	3b30      	subs	r3, #48	; 0x30
 810a5d8:	220a      	movs	r2, #10
 810a5da:	4630      	mov	r0, r6
 810a5dc:	f7ff ff8c 	bl	810a4f8 <__multadd>
 810a5e0:	45a0      	cmp	r8, r4
 810a5e2:	d1f5      	bne.n	810a5d0 <__s2b+0x4c>
 810a5e4:	f1a5 0408 	sub.w	r4, r5, #8
 810a5e8:	444c      	add	r4, r9
 810a5ea:	1b2d      	subs	r5, r5, r4
 810a5ec:	1963      	adds	r3, r4, r5
 810a5ee:	42bb      	cmp	r3, r7
 810a5f0:	db04      	blt.n	810a5fc <__s2b+0x78>
 810a5f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a5f6:	340a      	adds	r4, #10
 810a5f8:	2509      	movs	r5, #9
 810a5fa:	e7f6      	b.n	810a5ea <__s2b+0x66>
 810a5fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 810a600:	4601      	mov	r1, r0
 810a602:	3b30      	subs	r3, #48	; 0x30
 810a604:	220a      	movs	r2, #10
 810a606:	4630      	mov	r0, r6
 810a608:	f7ff ff76 	bl	810a4f8 <__multadd>
 810a60c:	e7ee      	b.n	810a5ec <__s2b+0x68>
 810a60e:	bf00      	nop
 810a610:	0810bdf0 	.word	0x0810bdf0
 810a614:	0810bee0 	.word	0x0810bee0

0810a618 <__hi0bits>:
 810a618:	0c03      	lsrs	r3, r0, #16
 810a61a:	041b      	lsls	r3, r3, #16
 810a61c:	b9d3      	cbnz	r3, 810a654 <__hi0bits+0x3c>
 810a61e:	0400      	lsls	r0, r0, #16
 810a620:	2310      	movs	r3, #16
 810a622:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810a626:	bf04      	itt	eq
 810a628:	0200      	lsleq	r0, r0, #8
 810a62a:	3308      	addeq	r3, #8
 810a62c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810a630:	bf04      	itt	eq
 810a632:	0100      	lsleq	r0, r0, #4
 810a634:	3304      	addeq	r3, #4
 810a636:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810a63a:	bf04      	itt	eq
 810a63c:	0080      	lsleq	r0, r0, #2
 810a63e:	3302      	addeq	r3, #2
 810a640:	2800      	cmp	r0, #0
 810a642:	db05      	blt.n	810a650 <__hi0bits+0x38>
 810a644:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810a648:	f103 0301 	add.w	r3, r3, #1
 810a64c:	bf08      	it	eq
 810a64e:	2320      	moveq	r3, #32
 810a650:	4618      	mov	r0, r3
 810a652:	4770      	bx	lr
 810a654:	2300      	movs	r3, #0
 810a656:	e7e4      	b.n	810a622 <__hi0bits+0xa>

0810a658 <__lo0bits>:
 810a658:	6803      	ldr	r3, [r0, #0]
 810a65a:	f013 0207 	ands.w	r2, r3, #7
 810a65e:	4601      	mov	r1, r0
 810a660:	d00b      	beq.n	810a67a <__lo0bits+0x22>
 810a662:	07da      	lsls	r2, r3, #31
 810a664:	d423      	bmi.n	810a6ae <__lo0bits+0x56>
 810a666:	0798      	lsls	r0, r3, #30
 810a668:	bf49      	itett	mi
 810a66a:	085b      	lsrmi	r3, r3, #1
 810a66c:	089b      	lsrpl	r3, r3, #2
 810a66e:	2001      	movmi	r0, #1
 810a670:	600b      	strmi	r3, [r1, #0]
 810a672:	bf5c      	itt	pl
 810a674:	600b      	strpl	r3, [r1, #0]
 810a676:	2002      	movpl	r0, #2
 810a678:	4770      	bx	lr
 810a67a:	b298      	uxth	r0, r3
 810a67c:	b9a8      	cbnz	r0, 810a6aa <__lo0bits+0x52>
 810a67e:	0c1b      	lsrs	r3, r3, #16
 810a680:	2010      	movs	r0, #16
 810a682:	b2da      	uxtb	r2, r3
 810a684:	b90a      	cbnz	r2, 810a68a <__lo0bits+0x32>
 810a686:	3008      	adds	r0, #8
 810a688:	0a1b      	lsrs	r3, r3, #8
 810a68a:	071a      	lsls	r2, r3, #28
 810a68c:	bf04      	itt	eq
 810a68e:	091b      	lsreq	r3, r3, #4
 810a690:	3004      	addeq	r0, #4
 810a692:	079a      	lsls	r2, r3, #30
 810a694:	bf04      	itt	eq
 810a696:	089b      	lsreq	r3, r3, #2
 810a698:	3002      	addeq	r0, #2
 810a69a:	07da      	lsls	r2, r3, #31
 810a69c:	d403      	bmi.n	810a6a6 <__lo0bits+0x4e>
 810a69e:	085b      	lsrs	r3, r3, #1
 810a6a0:	f100 0001 	add.w	r0, r0, #1
 810a6a4:	d005      	beq.n	810a6b2 <__lo0bits+0x5a>
 810a6a6:	600b      	str	r3, [r1, #0]
 810a6a8:	4770      	bx	lr
 810a6aa:	4610      	mov	r0, r2
 810a6ac:	e7e9      	b.n	810a682 <__lo0bits+0x2a>
 810a6ae:	2000      	movs	r0, #0
 810a6b0:	4770      	bx	lr
 810a6b2:	2020      	movs	r0, #32
 810a6b4:	4770      	bx	lr
	...

0810a6b8 <__i2b>:
 810a6b8:	b510      	push	{r4, lr}
 810a6ba:	460c      	mov	r4, r1
 810a6bc:	2101      	movs	r1, #1
 810a6be:	f7ff feb9 	bl	810a434 <_Balloc>
 810a6c2:	4602      	mov	r2, r0
 810a6c4:	b928      	cbnz	r0, 810a6d2 <__i2b+0x1a>
 810a6c6:	4b05      	ldr	r3, [pc, #20]	; (810a6dc <__i2b+0x24>)
 810a6c8:	4805      	ldr	r0, [pc, #20]	; (810a6e0 <__i2b+0x28>)
 810a6ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810a6ce:	f000 fff5 	bl	810b6bc <__assert_func>
 810a6d2:	2301      	movs	r3, #1
 810a6d4:	6144      	str	r4, [r0, #20]
 810a6d6:	6103      	str	r3, [r0, #16]
 810a6d8:	bd10      	pop	{r4, pc}
 810a6da:	bf00      	nop
 810a6dc:	0810bdf0 	.word	0x0810bdf0
 810a6e0:	0810bee0 	.word	0x0810bee0

0810a6e4 <__multiply>:
 810a6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a6e8:	4691      	mov	r9, r2
 810a6ea:	690a      	ldr	r2, [r1, #16]
 810a6ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810a6f0:	429a      	cmp	r2, r3
 810a6f2:	bfb8      	it	lt
 810a6f4:	460b      	movlt	r3, r1
 810a6f6:	460c      	mov	r4, r1
 810a6f8:	bfbc      	itt	lt
 810a6fa:	464c      	movlt	r4, r9
 810a6fc:	4699      	movlt	r9, r3
 810a6fe:	6927      	ldr	r7, [r4, #16]
 810a700:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810a704:	68a3      	ldr	r3, [r4, #8]
 810a706:	6861      	ldr	r1, [r4, #4]
 810a708:	eb07 060a 	add.w	r6, r7, sl
 810a70c:	42b3      	cmp	r3, r6
 810a70e:	b085      	sub	sp, #20
 810a710:	bfb8      	it	lt
 810a712:	3101      	addlt	r1, #1
 810a714:	f7ff fe8e 	bl	810a434 <_Balloc>
 810a718:	b930      	cbnz	r0, 810a728 <__multiply+0x44>
 810a71a:	4602      	mov	r2, r0
 810a71c:	4b44      	ldr	r3, [pc, #272]	; (810a830 <__multiply+0x14c>)
 810a71e:	4845      	ldr	r0, [pc, #276]	; (810a834 <__multiply+0x150>)
 810a720:	f240 115d 	movw	r1, #349	; 0x15d
 810a724:	f000 ffca 	bl	810b6bc <__assert_func>
 810a728:	f100 0514 	add.w	r5, r0, #20
 810a72c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810a730:	462b      	mov	r3, r5
 810a732:	2200      	movs	r2, #0
 810a734:	4543      	cmp	r3, r8
 810a736:	d321      	bcc.n	810a77c <__multiply+0x98>
 810a738:	f104 0314 	add.w	r3, r4, #20
 810a73c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810a740:	f109 0314 	add.w	r3, r9, #20
 810a744:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810a748:	9202      	str	r2, [sp, #8]
 810a74a:	1b3a      	subs	r2, r7, r4
 810a74c:	3a15      	subs	r2, #21
 810a74e:	f022 0203 	bic.w	r2, r2, #3
 810a752:	3204      	adds	r2, #4
 810a754:	f104 0115 	add.w	r1, r4, #21
 810a758:	428f      	cmp	r7, r1
 810a75a:	bf38      	it	cc
 810a75c:	2204      	movcc	r2, #4
 810a75e:	9201      	str	r2, [sp, #4]
 810a760:	9a02      	ldr	r2, [sp, #8]
 810a762:	9303      	str	r3, [sp, #12]
 810a764:	429a      	cmp	r2, r3
 810a766:	d80c      	bhi.n	810a782 <__multiply+0x9e>
 810a768:	2e00      	cmp	r6, #0
 810a76a:	dd03      	ble.n	810a774 <__multiply+0x90>
 810a76c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810a770:	2b00      	cmp	r3, #0
 810a772:	d05a      	beq.n	810a82a <__multiply+0x146>
 810a774:	6106      	str	r6, [r0, #16]
 810a776:	b005      	add	sp, #20
 810a778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a77c:	f843 2b04 	str.w	r2, [r3], #4
 810a780:	e7d8      	b.n	810a734 <__multiply+0x50>
 810a782:	f8b3 a000 	ldrh.w	sl, [r3]
 810a786:	f1ba 0f00 	cmp.w	sl, #0
 810a78a:	d024      	beq.n	810a7d6 <__multiply+0xf2>
 810a78c:	f104 0e14 	add.w	lr, r4, #20
 810a790:	46a9      	mov	r9, r5
 810a792:	f04f 0c00 	mov.w	ip, #0
 810a796:	f85e 2b04 	ldr.w	r2, [lr], #4
 810a79a:	f8d9 1000 	ldr.w	r1, [r9]
 810a79e:	fa1f fb82 	uxth.w	fp, r2
 810a7a2:	b289      	uxth	r1, r1
 810a7a4:	fb0a 110b 	mla	r1, sl, fp, r1
 810a7a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810a7ac:	f8d9 2000 	ldr.w	r2, [r9]
 810a7b0:	4461      	add	r1, ip
 810a7b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810a7b6:	fb0a c20b 	mla	r2, sl, fp, ip
 810a7ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810a7be:	b289      	uxth	r1, r1
 810a7c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810a7c4:	4577      	cmp	r7, lr
 810a7c6:	f849 1b04 	str.w	r1, [r9], #4
 810a7ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810a7ce:	d8e2      	bhi.n	810a796 <__multiply+0xb2>
 810a7d0:	9a01      	ldr	r2, [sp, #4]
 810a7d2:	f845 c002 	str.w	ip, [r5, r2]
 810a7d6:	9a03      	ldr	r2, [sp, #12]
 810a7d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810a7dc:	3304      	adds	r3, #4
 810a7de:	f1b9 0f00 	cmp.w	r9, #0
 810a7e2:	d020      	beq.n	810a826 <__multiply+0x142>
 810a7e4:	6829      	ldr	r1, [r5, #0]
 810a7e6:	f104 0c14 	add.w	ip, r4, #20
 810a7ea:	46ae      	mov	lr, r5
 810a7ec:	f04f 0a00 	mov.w	sl, #0
 810a7f0:	f8bc b000 	ldrh.w	fp, [ip]
 810a7f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810a7f8:	fb09 220b 	mla	r2, r9, fp, r2
 810a7fc:	4492      	add	sl, r2
 810a7fe:	b289      	uxth	r1, r1
 810a800:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810a804:	f84e 1b04 	str.w	r1, [lr], #4
 810a808:	f85c 2b04 	ldr.w	r2, [ip], #4
 810a80c:	f8be 1000 	ldrh.w	r1, [lr]
 810a810:	0c12      	lsrs	r2, r2, #16
 810a812:	fb09 1102 	mla	r1, r9, r2, r1
 810a816:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810a81a:	4567      	cmp	r7, ip
 810a81c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810a820:	d8e6      	bhi.n	810a7f0 <__multiply+0x10c>
 810a822:	9a01      	ldr	r2, [sp, #4]
 810a824:	50a9      	str	r1, [r5, r2]
 810a826:	3504      	adds	r5, #4
 810a828:	e79a      	b.n	810a760 <__multiply+0x7c>
 810a82a:	3e01      	subs	r6, #1
 810a82c:	e79c      	b.n	810a768 <__multiply+0x84>
 810a82e:	bf00      	nop
 810a830:	0810bdf0 	.word	0x0810bdf0
 810a834:	0810bee0 	.word	0x0810bee0

0810a838 <__pow5mult>:
 810a838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a83c:	4615      	mov	r5, r2
 810a83e:	f012 0203 	ands.w	r2, r2, #3
 810a842:	4606      	mov	r6, r0
 810a844:	460f      	mov	r7, r1
 810a846:	d007      	beq.n	810a858 <__pow5mult+0x20>
 810a848:	4c25      	ldr	r4, [pc, #148]	; (810a8e0 <__pow5mult+0xa8>)
 810a84a:	3a01      	subs	r2, #1
 810a84c:	2300      	movs	r3, #0
 810a84e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810a852:	f7ff fe51 	bl	810a4f8 <__multadd>
 810a856:	4607      	mov	r7, r0
 810a858:	10ad      	asrs	r5, r5, #2
 810a85a:	d03d      	beq.n	810a8d8 <__pow5mult+0xa0>
 810a85c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810a85e:	b97c      	cbnz	r4, 810a880 <__pow5mult+0x48>
 810a860:	2010      	movs	r0, #16
 810a862:	f7ff fdcd 	bl	810a400 <malloc>
 810a866:	4602      	mov	r2, r0
 810a868:	6270      	str	r0, [r6, #36]	; 0x24
 810a86a:	b928      	cbnz	r0, 810a878 <__pow5mult+0x40>
 810a86c:	4b1d      	ldr	r3, [pc, #116]	; (810a8e4 <__pow5mult+0xac>)
 810a86e:	481e      	ldr	r0, [pc, #120]	; (810a8e8 <__pow5mult+0xb0>)
 810a870:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810a874:	f000 ff22 	bl	810b6bc <__assert_func>
 810a878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810a87c:	6004      	str	r4, [r0, #0]
 810a87e:	60c4      	str	r4, [r0, #12]
 810a880:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810a884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810a888:	b94c      	cbnz	r4, 810a89e <__pow5mult+0x66>
 810a88a:	f240 2171 	movw	r1, #625	; 0x271
 810a88e:	4630      	mov	r0, r6
 810a890:	f7ff ff12 	bl	810a6b8 <__i2b>
 810a894:	2300      	movs	r3, #0
 810a896:	f8c8 0008 	str.w	r0, [r8, #8]
 810a89a:	4604      	mov	r4, r0
 810a89c:	6003      	str	r3, [r0, #0]
 810a89e:	f04f 0900 	mov.w	r9, #0
 810a8a2:	07eb      	lsls	r3, r5, #31
 810a8a4:	d50a      	bpl.n	810a8bc <__pow5mult+0x84>
 810a8a6:	4639      	mov	r1, r7
 810a8a8:	4622      	mov	r2, r4
 810a8aa:	4630      	mov	r0, r6
 810a8ac:	f7ff ff1a 	bl	810a6e4 <__multiply>
 810a8b0:	4639      	mov	r1, r7
 810a8b2:	4680      	mov	r8, r0
 810a8b4:	4630      	mov	r0, r6
 810a8b6:	f7ff fdfd 	bl	810a4b4 <_Bfree>
 810a8ba:	4647      	mov	r7, r8
 810a8bc:	106d      	asrs	r5, r5, #1
 810a8be:	d00b      	beq.n	810a8d8 <__pow5mult+0xa0>
 810a8c0:	6820      	ldr	r0, [r4, #0]
 810a8c2:	b938      	cbnz	r0, 810a8d4 <__pow5mult+0x9c>
 810a8c4:	4622      	mov	r2, r4
 810a8c6:	4621      	mov	r1, r4
 810a8c8:	4630      	mov	r0, r6
 810a8ca:	f7ff ff0b 	bl	810a6e4 <__multiply>
 810a8ce:	6020      	str	r0, [r4, #0]
 810a8d0:	f8c0 9000 	str.w	r9, [r0]
 810a8d4:	4604      	mov	r4, r0
 810a8d6:	e7e4      	b.n	810a8a2 <__pow5mult+0x6a>
 810a8d8:	4638      	mov	r0, r7
 810a8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a8de:	bf00      	nop
 810a8e0:	0810c030 	.word	0x0810c030
 810a8e4:	0810bd7e 	.word	0x0810bd7e
 810a8e8:	0810bee0 	.word	0x0810bee0

0810a8ec <__lshift>:
 810a8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a8f0:	460c      	mov	r4, r1
 810a8f2:	6849      	ldr	r1, [r1, #4]
 810a8f4:	6923      	ldr	r3, [r4, #16]
 810a8f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810a8fa:	68a3      	ldr	r3, [r4, #8]
 810a8fc:	4607      	mov	r7, r0
 810a8fe:	4691      	mov	r9, r2
 810a900:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810a904:	f108 0601 	add.w	r6, r8, #1
 810a908:	42b3      	cmp	r3, r6
 810a90a:	db0b      	blt.n	810a924 <__lshift+0x38>
 810a90c:	4638      	mov	r0, r7
 810a90e:	f7ff fd91 	bl	810a434 <_Balloc>
 810a912:	4605      	mov	r5, r0
 810a914:	b948      	cbnz	r0, 810a92a <__lshift+0x3e>
 810a916:	4602      	mov	r2, r0
 810a918:	4b2a      	ldr	r3, [pc, #168]	; (810a9c4 <__lshift+0xd8>)
 810a91a:	482b      	ldr	r0, [pc, #172]	; (810a9c8 <__lshift+0xdc>)
 810a91c:	f240 11d9 	movw	r1, #473	; 0x1d9
 810a920:	f000 fecc 	bl	810b6bc <__assert_func>
 810a924:	3101      	adds	r1, #1
 810a926:	005b      	lsls	r3, r3, #1
 810a928:	e7ee      	b.n	810a908 <__lshift+0x1c>
 810a92a:	2300      	movs	r3, #0
 810a92c:	f100 0114 	add.w	r1, r0, #20
 810a930:	f100 0210 	add.w	r2, r0, #16
 810a934:	4618      	mov	r0, r3
 810a936:	4553      	cmp	r3, sl
 810a938:	db37      	blt.n	810a9aa <__lshift+0xbe>
 810a93a:	6920      	ldr	r0, [r4, #16]
 810a93c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810a940:	f104 0314 	add.w	r3, r4, #20
 810a944:	f019 091f 	ands.w	r9, r9, #31
 810a948:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810a94c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810a950:	d02f      	beq.n	810a9b2 <__lshift+0xc6>
 810a952:	f1c9 0e20 	rsb	lr, r9, #32
 810a956:	468a      	mov	sl, r1
 810a958:	f04f 0c00 	mov.w	ip, #0
 810a95c:	681a      	ldr	r2, [r3, #0]
 810a95e:	fa02 f209 	lsl.w	r2, r2, r9
 810a962:	ea42 020c 	orr.w	r2, r2, ip
 810a966:	f84a 2b04 	str.w	r2, [sl], #4
 810a96a:	f853 2b04 	ldr.w	r2, [r3], #4
 810a96e:	4298      	cmp	r0, r3
 810a970:	fa22 fc0e 	lsr.w	ip, r2, lr
 810a974:	d8f2      	bhi.n	810a95c <__lshift+0x70>
 810a976:	1b03      	subs	r3, r0, r4
 810a978:	3b15      	subs	r3, #21
 810a97a:	f023 0303 	bic.w	r3, r3, #3
 810a97e:	3304      	adds	r3, #4
 810a980:	f104 0215 	add.w	r2, r4, #21
 810a984:	4290      	cmp	r0, r2
 810a986:	bf38      	it	cc
 810a988:	2304      	movcc	r3, #4
 810a98a:	f841 c003 	str.w	ip, [r1, r3]
 810a98e:	f1bc 0f00 	cmp.w	ip, #0
 810a992:	d001      	beq.n	810a998 <__lshift+0xac>
 810a994:	f108 0602 	add.w	r6, r8, #2
 810a998:	3e01      	subs	r6, #1
 810a99a:	4638      	mov	r0, r7
 810a99c:	612e      	str	r6, [r5, #16]
 810a99e:	4621      	mov	r1, r4
 810a9a0:	f7ff fd88 	bl	810a4b4 <_Bfree>
 810a9a4:	4628      	mov	r0, r5
 810a9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a9aa:	f842 0f04 	str.w	r0, [r2, #4]!
 810a9ae:	3301      	adds	r3, #1
 810a9b0:	e7c1      	b.n	810a936 <__lshift+0x4a>
 810a9b2:	3904      	subs	r1, #4
 810a9b4:	f853 2b04 	ldr.w	r2, [r3], #4
 810a9b8:	f841 2f04 	str.w	r2, [r1, #4]!
 810a9bc:	4298      	cmp	r0, r3
 810a9be:	d8f9      	bhi.n	810a9b4 <__lshift+0xc8>
 810a9c0:	e7ea      	b.n	810a998 <__lshift+0xac>
 810a9c2:	bf00      	nop
 810a9c4:	0810bdf0 	.word	0x0810bdf0
 810a9c8:	0810bee0 	.word	0x0810bee0

0810a9cc <__mcmp>:
 810a9cc:	b530      	push	{r4, r5, lr}
 810a9ce:	6902      	ldr	r2, [r0, #16]
 810a9d0:	690c      	ldr	r4, [r1, #16]
 810a9d2:	1b12      	subs	r2, r2, r4
 810a9d4:	d10e      	bne.n	810a9f4 <__mcmp+0x28>
 810a9d6:	f100 0314 	add.w	r3, r0, #20
 810a9da:	3114      	adds	r1, #20
 810a9dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810a9e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810a9e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810a9e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810a9ec:	42a5      	cmp	r5, r4
 810a9ee:	d003      	beq.n	810a9f8 <__mcmp+0x2c>
 810a9f0:	d305      	bcc.n	810a9fe <__mcmp+0x32>
 810a9f2:	2201      	movs	r2, #1
 810a9f4:	4610      	mov	r0, r2
 810a9f6:	bd30      	pop	{r4, r5, pc}
 810a9f8:	4283      	cmp	r3, r0
 810a9fa:	d3f3      	bcc.n	810a9e4 <__mcmp+0x18>
 810a9fc:	e7fa      	b.n	810a9f4 <__mcmp+0x28>
 810a9fe:	f04f 32ff 	mov.w	r2, #4294967295
 810aa02:	e7f7      	b.n	810a9f4 <__mcmp+0x28>

0810aa04 <__mdiff>:
 810aa04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aa08:	460c      	mov	r4, r1
 810aa0a:	4606      	mov	r6, r0
 810aa0c:	4611      	mov	r1, r2
 810aa0e:	4620      	mov	r0, r4
 810aa10:	4690      	mov	r8, r2
 810aa12:	f7ff ffdb 	bl	810a9cc <__mcmp>
 810aa16:	1e05      	subs	r5, r0, #0
 810aa18:	d110      	bne.n	810aa3c <__mdiff+0x38>
 810aa1a:	4629      	mov	r1, r5
 810aa1c:	4630      	mov	r0, r6
 810aa1e:	f7ff fd09 	bl	810a434 <_Balloc>
 810aa22:	b930      	cbnz	r0, 810aa32 <__mdiff+0x2e>
 810aa24:	4b3a      	ldr	r3, [pc, #232]	; (810ab10 <__mdiff+0x10c>)
 810aa26:	4602      	mov	r2, r0
 810aa28:	f240 2132 	movw	r1, #562	; 0x232
 810aa2c:	4839      	ldr	r0, [pc, #228]	; (810ab14 <__mdiff+0x110>)
 810aa2e:	f000 fe45 	bl	810b6bc <__assert_func>
 810aa32:	2301      	movs	r3, #1
 810aa34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810aa38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810aa3c:	bfa4      	itt	ge
 810aa3e:	4643      	movge	r3, r8
 810aa40:	46a0      	movge	r8, r4
 810aa42:	4630      	mov	r0, r6
 810aa44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810aa48:	bfa6      	itte	ge
 810aa4a:	461c      	movge	r4, r3
 810aa4c:	2500      	movge	r5, #0
 810aa4e:	2501      	movlt	r5, #1
 810aa50:	f7ff fcf0 	bl	810a434 <_Balloc>
 810aa54:	b920      	cbnz	r0, 810aa60 <__mdiff+0x5c>
 810aa56:	4b2e      	ldr	r3, [pc, #184]	; (810ab10 <__mdiff+0x10c>)
 810aa58:	4602      	mov	r2, r0
 810aa5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 810aa5e:	e7e5      	b.n	810aa2c <__mdiff+0x28>
 810aa60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810aa64:	6926      	ldr	r6, [r4, #16]
 810aa66:	60c5      	str	r5, [r0, #12]
 810aa68:	f104 0914 	add.w	r9, r4, #20
 810aa6c:	f108 0514 	add.w	r5, r8, #20
 810aa70:	f100 0e14 	add.w	lr, r0, #20
 810aa74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810aa78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810aa7c:	f108 0210 	add.w	r2, r8, #16
 810aa80:	46f2      	mov	sl, lr
 810aa82:	2100      	movs	r1, #0
 810aa84:	f859 3b04 	ldr.w	r3, [r9], #4
 810aa88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810aa8c:	fa1f f883 	uxth.w	r8, r3
 810aa90:	fa11 f18b 	uxtah	r1, r1, fp
 810aa94:	0c1b      	lsrs	r3, r3, #16
 810aa96:	eba1 0808 	sub.w	r8, r1, r8
 810aa9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810aa9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810aaa2:	fa1f f888 	uxth.w	r8, r8
 810aaa6:	1419      	asrs	r1, r3, #16
 810aaa8:	454e      	cmp	r6, r9
 810aaaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810aaae:	f84a 3b04 	str.w	r3, [sl], #4
 810aab2:	d8e7      	bhi.n	810aa84 <__mdiff+0x80>
 810aab4:	1b33      	subs	r3, r6, r4
 810aab6:	3b15      	subs	r3, #21
 810aab8:	f023 0303 	bic.w	r3, r3, #3
 810aabc:	3304      	adds	r3, #4
 810aabe:	3415      	adds	r4, #21
 810aac0:	42a6      	cmp	r6, r4
 810aac2:	bf38      	it	cc
 810aac4:	2304      	movcc	r3, #4
 810aac6:	441d      	add	r5, r3
 810aac8:	4473      	add	r3, lr
 810aaca:	469e      	mov	lr, r3
 810aacc:	462e      	mov	r6, r5
 810aace:	4566      	cmp	r6, ip
 810aad0:	d30e      	bcc.n	810aaf0 <__mdiff+0xec>
 810aad2:	f10c 0203 	add.w	r2, ip, #3
 810aad6:	1b52      	subs	r2, r2, r5
 810aad8:	f022 0203 	bic.w	r2, r2, #3
 810aadc:	3d03      	subs	r5, #3
 810aade:	45ac      	cmp	ip, r5
 810aae0:	bf38      	it	cc
 810aae2:	2200      	movcc	r2, #0
 810aae4:	441a      	add	r2, r3
 810aae6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810aaea:	b17b      	cbz	r3, 810ab0c <__mdiff+0x108>
 810aaec:	6107      	str	r7, [r0, #16]
 810aaee:	e7a3      	b.n	810aa38 <__mdiff+0x34>
 810aaf0:	f856 8b04 	ldr.w	r8, [r6], #4
 810aaf4:	fa11 f288 	uxtah	r2, r1, r8
 810aaf8:	1414      	asrs	r4, r2, #16
 810aafa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810aafe:	b292      	uxth	r2, r2
 810ab00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810ab04:	f84e 2b04 	str.w	r2, [lr], #4
 810ab08:	1421      	asrs	r1, r4, #16
 810ab0a:	e7e0      	b.n	810aace <__mdiff+0xca>
 810ab0c:	3f01      	subs	r7, #1
 810ab0e:	e7ea      	b.n	810aae6 <__mdiff+0xe2>
 810ab10:	0810bdf0 	.word	0x0810bdf0
 810ab14:	0810bee0 	.word	0x0810bee0

0810ab18 <__ulp>:
 810ab18:	b082      	sub	sp, #8
 810ab1a:	ed8d 0b00 	vstr	d0, [sp]
 810ab1e:	9b01      	ldr	r3, [sp, #4]
 810ab20:	4912      	ldr	r1, [pc, #72]	; (810ab6c <__ulp+0x54>)
 810ab22:	4019      	ands	r1, r3
 810ab24:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810ab28:	2900      	cmp	r1, #0
 810ab2a:	dd05      	ble.n	810ab38 <__ulp+0x20>
 810ab2c:	2200      	movs	r2, #0
 810ab2e:	460b      	mov	r3, r1
 810ab30:	ec43 2b10 	vmov	d0, r2, r3
 810ab34:	b002      	add	sp, #8
 810ab36:	4770      	bx	lr
 810ab38:	4249      	negs	r1, r1
 810ab3a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810ab3e:	ea4f 5021 	mov.w	r0, r1, asr #20
 810ab42:	f04f 0200 	mov.w	r2, #0
 810ab46:	f04f 0300 	mov.w	r3, #0
 810ab4a:	da04      	bge.n	810ab56 <__ulp+0x3e>
 810ab4c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810ab50:	fa41 f300 	asr.w	r3, r1, r0
 810ab54:	e7ec      	b.n	810ab30 <__ulp+0x18>
 810ab56:	f1a0 0114 	sub.w	r1, r0, #20
 810ab5a:	291e      	cmp	r1, #30
 810ab5c:	bfda      	itte	le
 810ab5e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810ab62:	fa20 f101 	lsrle.w	r1, r0, r1
 810ab66:	2101      	movgt	r1, #1
 810ab68:	460a      	mov	r2, r1
 810ab6a:	e7e1      	b.n	810ab30 <__ulp+0x18>
 810ab6c:	7ff00000 	.word	0x7ff00000

0810ab70 <__b2d>:
 810ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ab72:	6905      	ldr	r5, [r0, #16]
 810ab74:	f100 0714 	add.w	r7, r0, #20
 810ab78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810ab7c:	1f2e      	subs	r6, r5, #4
 810ab7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810ab82:	4620      	mov	r0, r4
 810ab84:	f7ff fd48 	bl	810a618 <__hi0bits>
 810ab88:	f1c0 0320 	rsb	r3, r0, #32
 810ab8c:	280a      	cmp	r0, #10
 810ab8e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810ac0c <__b2d+0x9c>
 810ab92:	600b      	str	r3, [r1, #0]
 810ab94:	dc14      	bgt.n	810abc0 <__b2d+0x50>
 810ab96:	f1c0 0e0b 	rsb	lr, r0, #11
 810ab9a:	fa24 f10e 	lsr.w	r1, r4, lr
 810ab9e:	42b7      	cmp	r7, r6
 810aba0:	ea41 030c 	orr.w	r3, r1, ip
 810aba4:	bf34      	ite	cc
 810aba6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810abaa:	2100      	movcs	r1, #0
 810abac:	3015      	adds	r0, #21
 810abae:	fa04 f000 	lsl.w	r0, r4, r0
 810abb2:	fa21 f10e 	lsr.w	r1, r1, lr
 810abb6:	ea40 0201 	orr.w	r2, r0, r1
 810abba:	ec43 2b10 	vmov	d0, r2, r3
 810abbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810abc0:	42b7      	cmp	r7, r6
 810abc2:	bf3a      	itte	cc
 810abc4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810abc8:	f1a5 0608 	subcc.w	r6, r5, #8
 810abcc:	2100      	movcs	r1, #0
 810abce:	380b      	subs	r0, #11
 810abd0:	d017      	beq.n	810ac02 <__b2d+0x92>
 810abd2:	f1c0 0c20 	rsb	ip, r0, #32
 810abd6:	fa04 f500 	lsl.w	r5, r4, r0
 810abda:	42be      	cmp	r6, r7
 810abdc:	fa21 f40c 	lsr.w	r4, r1, ip
 810abe0:	ea45 0504 	orr.w	r5, r5, r4
 810abe4:	bf8c      	ite	hi
 810abe6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810abea:	2400      	movls	r4, #0
 810abec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810abf0:	fa01 f000 	lsl.w	r0, r1, r0
 810abf4:	fa24 f40c 	lsr.w	r4, r4, ip
 810abf8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810abfc:	ea40 0204 	orr.w	r2, r0, r4
 810ac00:	e7db      	b.n	810abba <__b2d+0x4a>
 810ac02:	ea44 030c 	orr.w	r3, r4, ip
 810ac06:	460a      	mov	r2, r1
 810ac08:	e7d7      	b.n	810abba <__b2d+0x4a>
 810ac0a:	bf00      	nop
 810ac0c:	3ff00000 	.word	0x3ff00000

0810ac10 <__d2b>:
 810ac10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810ac14:	4689      	mov	r9, r1
 810ac16:	2101      	movs	r1, #1
 810ac18:	ec57 6b10 	vmov	r6, r7, d0
 810ac1c:	4690      	mov	r8, r2
 810ac1e:	f7ff fc09 	bl	810a434 <_Balloc>
 810ac22:	4604      	mov	r4, r0
 810ac24:	b930      	cbnz	r0, 810ac34 <__d2b+0x24>
 810ac26:	4602      	mov	r2, r0
 810ac28:	4b25      	ldr	r3, [pc, #148]	; (810acc0 <__d2b+0xb0>)
 810ac2a:	4826      	ldr	r0, [pc, #152]	; (810acc4 <__d2b+0xb4>)
 810ac2c:	f240 310a 	movw	r1, #778	; 0x30a
 810ac30:	f000 fd44 	bl	810b6bc <__assert_func>
 810ac34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810ac38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810ac3c:	bb35      	cbnz	r5, 810ac8c <__d2b+0x7c>
 810ac3e:	2e00      	cmp	r6, #0
 810ac40:	9301      	str	r3, [sp, #4]
 810ac42:	d028      	beq.n	810ac96 <__d2b+0x86>
 810ac44:	4668      	mov	r0, sp
 810ac46:	9600      	str	r6, [sp, #0]
 810ac48:	f7ff fd06 	bl	810a658 <__lo0bits>
 810ac4c:	9900      	ldr	r1, [sp, #0]
 810ac4e:	b300      	cbz	r0, 810ac92 <__d2b+0x82>
 810ac50:	9a01      	ldr	r2, [sp, #4]
 810ac52:	f1c0 0320 	rsb	r3, r0, #32
 810ac56:	fa02 f303 	lsl.w	r3, r2, r3
 810ac5a:	430b      	orrs	r3, r1
 810ac5c:	40c2      	lsrs	r2, r0
 810ac5e:	6163      	str	r3, [r4, #20]
 810ac60:	9201      	str	r2, [sp, #4]
 810ac62:	9b01      	ldr	r3, [sp, #4]
 810ac64:	61a3      	str	r3, [r4, #24]
 810ac66:	2b00      	cmp	r3, #0
 810ac68:	bf14      	ite	ne
 810ac6a:	2202      	movne	r2, #2
 810ac6c:	2201      	moveq	r2, #1
 810ac6e:	6122      	str	r2, [r4, #16]
 810ac70:	b1d5      	cbz	r5, 810aca8 <__d2b+0x98>
 810ac72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810ac76:	4405      	add	r5, r0
 810ac78:	f8c9 5000 	str.w	r5, [r9]
 810ac7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810ac80:	f8c8 0000 	str.w	r0, [r8]
 810ac84:	4620      	mov	r0, r4
 810ac86:	b003      	add	sp, #12
 810ac88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810ac8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810ac90:	e7d5      	b.n	810ac3e <__d2b+0x2e>
 810ac92:	6161      	str	r1, [r4, #20]
 810ac94:	e7e5      	b.n	810ac62 <__d2b+0x52>
 810ac96:	a801      	add	r0, sp, #4
 810ac98:	f7ff fcde 	bl	810a658 <__lo0bits>
 810ac9c:	9b01      	ldr	r3, [sp, #4]
 810ac9e:	6163      	str	r3, [r4, #20]
 810aca0:	2201      	movs	r2, #1
 810aca2:	6122      	str	r2, [r4, #16]
 810aca4:	3020      	adds	r0, #32
 810aca6:	e7e3      	b.n	810ac70 <__d2b+0x60>
 810aca8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810acac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810acb0:	f8c9 0000 	str.w	r0, [r9]
 810acb4:	6918      	ldr	r0, [r3, #16]
 810acb6:	f7ff fcaf 	bl	810a618 <__hi0bits>
 810acba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810acbe:	e7df      	b.n	810ac80 <__d2b+0x70>
 810acc0:	0810bdf0 	.word	0x0810bdf0
 810acc4:	0810bee0 	.word	0x0810bee0

0810acc8 <__ratio>:
 810acc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810accc:	4688      	mov	r8, r1
 810acce:	4669      	mov	r1, sp
 810acd0:	4681      	mov	r9, r0
 810acd2:	f7ff ff4d 	bl	810ab70 <__b2d>
 810acd6:	a901      	add	r1, sp, #4
 810acd8:	4640      	mov	r0, r8
 810acda:	ec55 4b10 	vmov	r4, r5, d0
 810acde:	f7ff ff47 	bl	810ab70 <__b2d>
 810ace2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810ace6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810acea:	eba3 0c02 	sub.w	ip, r3, r2
 810acee:	e9dd 3200 	ldrd	r3, r2, [sp]
 810acf2:	1a9b      	subs	r3, r3, r2
 810acf4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810acf8:	ec51 0b10 	vmov	r0, r1, d0
 810acfc:	2b00      	cmp	r3, #0
 810acfe:	bfd6      	itet	le
 810ad00:	460a      	movle	r2, r1
 810ad02:	462a      	movgt	r2, r5
 810ad04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810ad08:	468b      	mov	fp, r1
 810ad0a:	462f      	mov	r7, r5
 810ad0c:	bfd4      	ite	le
 810ad0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810ad12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810ad16:	4620      	mov	r0, r4
 810ad18:	ee10 2a10 	vmov	r2, s0
 810ad1c:	465b      	mov	r3, fp
 810ad1e:	4639      	mov	r1, r7
 810ad20:	f7f5 fe1c 	bl	810095c <__aeabi_ddiv>
 810ad24:	ec41 0b10 	vmov	d0, r0, r1
 810ad28:	b003      	add	sp, #12
 810ad2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ad2e <__copybits>:
 810ad2e:	3901      	subs	r1, #1
 810ad30:	b570      	push	{r4, r5, r6, lr}
 810ad32:	1149      	asrs	r1, r1, #5
 810ad34:	6914      	ldr	r4, [r2, #16]
 810ad36:	3101      	adds	r1, #1
 810ad38:	f102 0314 	add.w	r3, r2, #20
 810ad3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810ad40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810ad44:	1f05      	subs	r5, r0, #4
 810ad46:	42a3      	cmp	r3, r4
 810ad48:	d30c      	bcc.n	810ad64 <__copybits+0x36>
 810ad4a:	1aa3      	subs	r3, r4, r2
 810ad4c:	3b11      	subs	r3, #17
 810ad4e:	f023 0303 	bic.w	r3, r3, #3
 810ad52:	3211      	adds	r2, #17
 810ad54:	42a2      	cmp	r2, r4
 810ad56:	bf88      	it	hi
 810ad58:	2300      	movhi	r3, #0
 810ad5a:	4418      	add	r0, r3
 810ad5c:	2300      	movs	r3, #0
 810ad5e:	4288      	cmp	r0, r1
 810ad60:	d305      	bcc.n	810ad6e <__copybits+0x40>
 810ad62:	bd70      	pop	{r4, r5, r6, pc}
 810ad64:	f853 6b04 	ldr.w	r6, [r3], #4
 810ad68:	f845 6f04 	str.w	r6, [r5, #4]!
 810ad6c:	e7eb      	b.n	810ad46 <__copybits+0x18>
 810ad6e:	f840 3b04 	str.w	r3, [r0], #4
 810ad72:	e7f4      	b.n	810ad5e <__copybits+0x30>

0810ad74 <__any_on>:
 810ad74:	f100 0214 	add.w	r2, r0, #20
 810ad78:	6900      	ldr	r0, [r0, #16]
 810ad7a:	114b      	asrs	r3, r1, #5
 810ad7c:	4298      	cmp	r0, r3
 810ad7e:	b510      	push	{r4, lr}
 810ad80:	db11      	blt.n	810ada6 <__any_on+0x32>
 810ad82:	dd0a      	ble.n	810ad9a <__any_on+0x26>
 810ad84:	f011 011f 	ands.w	r1, r1, #31
 810ad88:	d007      	beq.n	810ad9a <__any_on+0x26>
 810ad8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810ad8e:	fa24 f001 	lsr.w	r0, r4, r1
 810ad92:	fa00 f101 	lsl.w	r1, r0, r1
 810ad96:	428c      	cmp	r4, r1
 810ad98:	d10b      	bne.n	810adb2 <__any_on+0x3e>
 810ad9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810ad9e:	4293      	cmp	r3, r2
 810ada0:	d803      	bhi.n	810adaa <__any_on+0x36>
 810ada2:	2000      	movs	r0, #0
 810ada4:	bd10      	pop	{r4, pc}
 810ada6:	4603      	mov	r3, r0
 810ada8:	e7f7      	b.n	810ad9a <__any_on+0x26>
 810adaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810adae:	2900      	cmp	r1, #0
 810adb0:	d0f5      	beq.n	810ad9e <__any_on+0x2a>
 810adb2:	2001      	movs	r0, #1
 810adb4:	e7f6      	b.n	810ada4 <__any_on+0x30>

0810adb6 <_calloc_r>:
 810adb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810adb8:	fba1 2402 	umull	r2, r4, r1, r2
 810adbc:	b94c      	cbnz	r4, 810add2 <_calloc_r+0x1c>
 810adbe:	4611      	mov	r1, r2
 810adc0:	9201      	str	r2, [sp, #4]
 810adc2:	f000 f87b 	bl	810aebc <_malloc_r>
 810adc6:	9a01      	ldr	r2, [sp, #4]
 810adc8:	4605      	mov	r5, r0
 810adca:	b930      	cbnz	r0, 810adda <_calloc_r+0x24>
 810adcc:	4628      	mov	r0, r5
 810adce:	b003      	add	sp, #12
 810add0:	bd30      	pop	{r4, r5, pc}
 810add2:	220c      	movs	r2, #12
 810add4:	6002      	str	r2, [r0, #0]
 810add6:	2500      	movs	r5, #0
 810add8:	e7f8      	b.n	810adcc <_calloc_r+0x16>
 810adda:	4621      	mov	r1, r4
 810addc:	f7fc f84c 	bl	8106e78 <memset>
 810ade0:	e7f4      	b.n	810adcc <_calloc_r+0x16>
	...

0810ade4 <_free_r>:
 810ade4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810ade6:	2900      	cmp	r1, #0
 810ade8:	d044      	beq.n	810ae74 <_free_r+0x90>
 810adea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810adee:	9001      	str	r0, [sp, #4]
 810adf0:	2b00      	cmp	r3, #0
 810adf2:	f1a1 0404 	sub.w	r4, r1, #4
 810adf6:	bfb8      	it	lt
 810adf8:	18e4      	addlt	r4, r4, r3
 810adfa:	f000 fced 	bl	810b7d8 <__malloc_lock>
 810adfe:	4a1e      	ldr	r2, [pc, #120]	; (810ae78 <_free_r+0x94>)
 810ae00:	9801      	ldr	r0, [sp, #4]
 810ae02:	6813      	ldr	r3, [r2, #0]
 810ae04:	b933      	cbnz	r3, 810ae14 <_free_r+0x30>
 810ae06:	6063      	str	r3, [r4, #4]
 810ae08:	6014      	str	r4, [r2, #0]
 810ae0a:	b003      	add	sp, #12
 810ae0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810ae10:	f000 bce8 	b.w	810b7e4 <__malloc_unlock>
 810ae14:	42a3      	cmp	r3, r4
 810ae16:	d908      	bls.n	810ae2a <_free_r+0x46>
 810ae18:	6825      	ldr	r5, [r4, #0]
 810ae1a:	1961      	adds	r1, r4, r5
 810ae1c:	428b      	cmp	r3, r1
 810ae1e:	bf01      	itttt	eq
 810ae20:	6819      	ldreq	r1, [r3, #0]
 810ae22:	685b      	ldreq	r3, [r3, #4]
 810ae24:	1949      	addeq	r1, r1, r5
 810ae26:	6021      	streq	r1, [r4, #0]
 810ae28:	e7ed      	b.n	810ae06 <_free_r+0x22>
 810ae2a:	461a      	mov	r2, r3
 810ae2c:	685b      	ldr	r3, [r3, #4]
 810ae2e:	b10b      	cbz	r3, 810ae34 <_free_r+0x50>
 810ae30:	42a3      	cmp	r3, r4
 810ae32:	d9fa      	bls.n	810ae2a <_free_r+0x46>
 810ae34:	6811      	ldr	r1, [r2, #0]
 810ae36:	1855      	adds	r5, r2, r1
 810ae38:	42a5      	cmp	r5, r4
 810ae3a:	d10b      	bne.n	810ae54 <_free_r+0x70>
 810ae3c:	6824      	ldr	r4, [r4, #0]
 810ae3e:	4421      	add	r1, r4
 810ae40:	1854      	adds	r4, r2, r1
 810ae42:	42a3      	cmp	r3, r4
 810ae44:	6011      	str	r1, [r2, #0]
 810ae46:	d1e0      	bne.n	810ae0a <_free_r+0x26>
 810ae48:	681c      	ldr	r4, [r3, #0]
 810ae4a:	685b      	ldr	r3, [r3, #4]
 810ae4c:	6053      	str	r3, [r2, #4]
 810ae4e:	4421      	add	r1, r4
 810ae50:	6011      	str	r1, [r2, #0]
 810ae52:	e7da      	b.n	810ae0a <_free_r+0x26>
 810ae54:	d902      	bls.n	810ae5c <_free_r+0x78>
 810ae56:	230c      	movs	r3, #12
 810ae58:	6003      	str	r3, [r0, #0]
 810ae5a:	e7d6      	b.n	810ae0a <_free_r+0x26>
 810ae5c:	6825      	ldr	r5, [r4, #0]
 810ae5e:	1961      	adds	r1, r4, r5
 810ae60:	428b      	cmp	r3, r1
 810ae62:	bf04      	itt	eq
 810ae64:	6819      	ldreq	r1, [r3, #0]
 810ae66:	685b      	ldreq	r3, [r3, #4]
 810ae68:	6063      	str	r3, [r4, #4]
 810ae6a:	bf04      	itt	eq
 810ae6c:	1949      	addeq	r1, r1, r5
 810ae6e:	6021      	streq	r1, [r4, #0]
 810ae70:	6054      	str	r4, [r2, #4]
 810ae72:	e7ca      	b.n	810ae0a <_free_r+0x26>
 810ae74:	b003      	add	sp, #12
 810ae76:	bd30      	pop	{r4, r5, pc}
 810ae78:	100002f8 	.word	0x100002f8

0810ae7c <sbrk_aligned>:
 810ae7c:	b570      	push	{r4, r5, r6, lr}
 810ae7e:	4e0e      	ldr	r6, [pc, #56]	; (810aeb8 <sbrk_aligned+0x3c>)
 810ae80:	460c      	mov	r4, r1
 810ae82:	6831      	ldr	r1, [r6, #0]
 810ae84:	4605      	mov	r5, r0
 810ae86:	b911      	cbnz	r1, 810ae8e <sbrk_aligned+0x12>
 810ae88:	f000 fb92 	bl	810b5b0 <_sbrk_r>
 810ae8c:	6030      	str	r0, [r6, #0]
 810ae8e:	4621      	mov	r1, r4
 810ae90:	4628      	mov	r0, r5
 810ae92:	f000 fb8d 	bl	810b5b0 <_sbrk_r>
 810ae96:	1c43      	adds	r3, r0, #1
 810ae98:	d00a      	beq.n	810aeb0 <sbrk_aligned+0x34>
 810ae9a:	1cc4      	adds	r4, r0, #3
 810ae9c:	f024 0403 	bic.w	r4, r4, #3
 810aea0:	42a0      	cmp	r0, r4
 810aea2:	d007      	beq.n	810aeb4 <sbrk_aligned+0x38>
 810aea4:	1a21      	subs	r1, r4, r0
 810aea6:	4628      	mov	r0, r5
 810aea8:	f000 fb82 	bl	810b5b0 <_sbrk_r>
 810aeac:	3001      	adds	r0, #1
 810aeae:	d101      	bne.n	810aeb4 <sbrk_aligned+0x38>
 810aeb0:	f04f 34ff 	mov.w	r4, #4294967295
 810aeb4:	4620      	mov	r0, r4
 810aeb6:	bd70      	pop	{r4, r5, r6, pc}
 810aeb8:	100002fc 	.word	0x100002fc

0810aebc <_malloc_r>:
 810aebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810aec0:	1ccd      	adds	r5, r1, #3
 810aec2:	f025 0503 	bic.w	r5, r5, #3
 810aec6:	3508      	adds	r5, #8
 810aec8:	2d0c      	cmp	r5, #12
 810aeca:	bf38      	it	cc
 810aecc:	250c      	movcc	r5, #12
 810aece:	2d00      	cmp	r5, #0
 810aed0:	4607      	mov	r7, r0
 810aed2:	db01      	blt.n	810aed8 <_malloc_r+0x1c>
 810aed4:	42a9      	cmp	r1, r5
 810aed6:	d905      	bls.n	810aee4 <_malloc_r+0x28>
 810aed8:	230c      	movs	r3, #12
 810aeda:	603b      	str	r3, [r7, #0]
 810aedc:	2600      	movs	r6, #0
 810aede:	4630      	mov	r0, r6
 810aee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810aee4:	4e2e      	ldr	r6, [pc, #184]	; (810afa0 <_malloc_r+0xe4>)
 810aee6:	f000 fc77 	bl	810b7d8 <__malloc_lock>
 810aeea:	6833      	ldr	r3, [r6, #0]
 810aeec:	461c      	mov	r4, r3
 810aeee:	bb34      	cbnz	r4, 810af3e <_malloc_r+0x82>
 810aef0:	4629      	mov	r1, r5
 810aef2:	4638      	mov	r0, r7
 810aef4:	f7ff ffc2 	bl	810ae7c <sbrk_aligned>
 810aef8:	1c43      	adds	r3, r0, #1
 810aefa:	4604      	mov	r4, r0
 810aefc:	d14d      	bne.n	810af9a <_malloc_r+0xde>
 810aefe:	6834      	ldr	r4, [r6, #0]
 810af00:	4626      	mov	r6, r4
 810af02:	2e00      	cmp	r6, #0
 810af04:	d140      	bne.n	810af88 <_malloc_r+0xcc>
 810af06:	6823      	ldr	r3, [r4, #0]
 810af08:	4631      	mov	r1, r6
 810af0a:	4638      	mov	r0, r7
 810af0c:	eb04 0803 	add.w	r8, r4, r3
 810af10:	f000 fb4e 	bl	810b5b0 <_sbrk_r>
 810af14:	4580      	cmp	r8, r0
 810af16:	d13a      	bne.n	810af8e <_malloc_r+0xd2>
 810af18:	6821      	ldr	r1, [r4, #0]
 810af1a:	3503      	adds	r5, #3
 810af1c:	1a6d      	subs	r5, r5, r1
 810af1e:	f025 0503 	bic.w	r5, r5, #3
 810af22:	3508      	adds	r5, #8
 810af24:	2d0c      	cmp	r5, #12
 810af26:	bf38      	it	cc
 810af28:	250c      	movcc	r5, #12
 810af2a:	4629      	mov	r1, r5
 810af2c:	4638      	mov	r0, r7
 810af2e:	f7ff ffa5 	bl	810ae7c <sbrk_aligned>
 810af32:	3001      	adds	r0, #1
 810af34:	d02b      	beq.n	810af8e <_malloc_r+0xd2>
 810af36:	6823      	ldr	r3, [r4, #0]
 810af38:	442b      	add	r3, r5
 810af3a:	6023      	str	r3, [r4, #0]
 810af3c:	e00e      	b.n	810af5c <_malloc_r+0xa0>
 810af3e:	6822      	ldr	r2, [r4, #0]
 810af40:	1b52      	subs	r2, r2, r5
 810af42:	d41e      	bmi.n	810af82 <_malloc_r+0xc6>
 810af44:	2a0b      	cmp	r2, #11
 810af46:	d916      	bls.n	810af76 <_malloc_r+0xba>
 810af48:	1961      	adds	r1, r4, r5
 810af4a:	42a3      	cmp	r3, r4
 810af4c:	6025      	str	r5, [r4, #0]
 810af4e:	bf18      	it	ne
 810af50:	6059      	strne	r1, [r3, #4]
 810af52:	6863      	ldr	r3, [r4, #4]
 810af54:	bf08      	it	eq
 810af56:	6031      	streq	r1, [r6, #0]
 810af58:	5162      	str	r2, [r4, r5]
 810af5a:	604b      	str	r3, [r1, #4]
 810af5c:	4638      	mov	r0, r7
 810af5e:	f104 060b 	add.w	r6, r4, #11
 810af62:	f000 fc3f 	bl	810b7e4 <__malloc_unlock>
 810af66:	f026 0607 	bic.w	r6, r6, #7
 810af6a:	1d23      	adds	r3, r4, #4
 810af6c:	1af2      	subs	r2, r6, r3
 810af6e:	d0b6      	beq.n	810aede <_malloc_r+0x22>
 810af70:	1b9b      	subs	r3, r3, r6
 810af72:	50a3      	str	r3, [r4, r2]
 810af74:	e7b3      	b.n	810aede <_malloc_r+0x22>
 810af76:	6862      	ldr	r2, [r4, #4]
 810af78:	42a3      	cmp	r3, r4
 810af7a:	bf0c      	ite	eq
 810af7c:	6032      	streq	r2, [r6, #0]
 810af7e:	605a      	strne	r2, [r3, #4]
 810af80:	e7ec      	b.n	810af5c <_malloc_r+0xa0>
 810af82:	4623      	mov	r3, r4
 810af84:	6864      	ldr	r4, [r4, #4]
 810af86:	e7b2      	b.n	810aeee <_malloc_r+0x32>
 810af88:	4634      	mov	r4, r6
 810af8a:	6876      	ldr	r6, [r6, #4]
 810af8c:	e7b9      	b.n	810af02 <_malloc_r+0x46>
 810af8e:	230c      	movs	r3, #12
 810af90:	603b      	str	r3, [r7, #0]
 810af92:	4638      	mov	r0, r7
 810af94:	f000 fc26 	bl	810b7e4 <__malloc_unlock>
 810af98:	e7a1      	b.n	810aede <_malloc_r+0x22>
 810af9a:	6025      	str	r5, [r4, #0]
 810af9c:	e7de      	b.n	810af5c <_malloc_r+0xa0>
 810af9e:	bf00      	nop
 810afa0:	100002f8 	.word	0x100002f8

0810afa4 <__ssputs_r>:
 810afa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810afa8:	688e      	ldr	r6, [r1, #8]
 810afaa:	429e      	cmp	r6, r3
 810afac:	4682      	mov	sl, r0
 810afae:	460c      	mov	r4, r1
 810afb0:	4690      	mov	r8, r2
 810afb2:	461f      	mov	r7, r3
 810afb4:	d838      	bhi.n	810b028 <__ssputs_r+0x84>
 810afb6:	898a      	ldrh	r2, [r1, #12]
 810afb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810afbc:	d032      	beq.n	810b024 <__ssputs_r+0x80>
 810afbe:	6825      	ldr	r5, [r4, #0]
 810afc0:	6909      	ldr	r1, [r1, #16]
 810afc2:	eba5 0901 	sub.w	r9, r5, r1
 810afc6:	6965      	ldr	r5, [r4, #20]
 810afc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810afcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810afd0:	3301      	adds	r3, #1
 810afd2:	444b      	add	r3, r9
 810afd4:	106d      	asrs	r5, r5, #1
 810afd6:	429d      	cmp	r5, r3
 810afd8:	bf38      	it	cc
 810afda:	461d      	movcc	r5, r3
 810afdc:	0553      	lsls	r3, r2, #21
 810afde:	d531      	bpl.n	810b044 <__ssputs_r+0xa0>
 810afe0:	4629      	mov	r1, r5
 810afe2:	f7ff ff6b 	bl	810aebc <_malloc_r>
 810afe6:	4606      	mov	r6, r0
 810afe8:	b950      	cbnz	r0, 810b000 <__ssputs_r+0x5c>
 810afea:	230c      	movs	r3, #12
 810afec:	f8ca 3000 	str.w	r3, [sl]
 810aff0:	89a3      	ldrh	r3, [r4, #12]
 810aff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810aff6:	81a3      	strh	r3, [r4, #12]
 810aff8:	f04f 30ff 	mov.w	r0, #4294967295
 810affc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b000:	6921      	ldr	r1, [r4, #16]
 810b002:	464a      	mov	r2, r9
 810b004:	f7fb ff2a 	bl	8106e5c <memcpy>
 810b008:	89a3      	ldrh	r3, [r4, #12]
 810b00a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810b00e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810b012:	81a3      	strh	r3, [r4, #12]
 810b014:	6126      	str	r6, [r4, #16]
 810b016:	6165      	str	r5, [r4, #20]
 810b018:	444e      	add	r6, r9
 810b01a:	eba5 0509 	sub.w	r5, r5, r9
 810b01e:	6026      	str	r6, [r4, #0]
 810b020:	60a5      	str	r5, [r4, #8]
 810b022:	463e      	mov	r6, r7
 810b024:	42be      	cmp	r6, r7
 810b026:	d900      	bls.n	810b02a <__ssputs_r+0x86>
 810b028:	463e      	mov	r6, r7
 810b02a:	6820      	ldr	r0, [r4, #0]
 810b02c:	4632      	mov	r2, r6
 810b02e:	4641      	mov	r1, r8
 810b030:	f000 fbb8 	bl	810b7a4 <memmove>
 810b034:	68a3      	ldr	r3, [r4, #8]
 810b036:	1b9b      	subs	r3, r3, r6
 810b038:	60a3      	str	r3, [r4, #8]
 810b03a:	6823      	ldr	r3, [r4, #0]
 810b03c:	4433      	add	r3, r6
 810b03e:	6023      	str	r3, [r4, #0]
 810b040:	2000      	movs	r0, #0
 810b042:	e7db      	b.n	810affc <__ssputs_r+0x58>
 810b044:	462a      	mov	r2, r5
 810b046:	f000 fbd3 	bl	810b7f0 <_realloc_r>
 810b04a:	4606      	mov	r6, r0
 810b04c:	2800      	cmp	r0, #0
 810b04e:	d1e1      	bne.n	810b014 <__ssputs_r+0x70>
 810b050:	6921      	ldr	r1, [r4, #16]
 810b052:	4650      	mov	r0, sl
 810b054:	f7ff fec6 	bl	810ade4 <_free_r>
 810b058:	e7c7      	b.n	810afea <__ssputs_r+0x46>
	...

0810b05c <_svfiprintf_r>:
 810b05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b060:	4698      	mov	r8, r3
 810b062:	898b      	ldrh	r3, [r1, #12]
 810b064:	061b      	lsls	r3, r3, #24
 810b066:	b09d      	sub	sp, #116	; 0x74
 810b068:	4607      	mov	r7, r0
 810b06a:	460d      	mov	r5, r1
 810b06c:	4614      	mov	r4, r2
 810b06e:	d50e      	bpl.n	810b08e <_svfiprintf_r+0x32>
 810b070:	690b      	ldr	r3, [r1, #16]
 810b072:	b963      	cbnz	r3, 810b08e <_svfiprintf_r+0x32>
 810b074:	2140      	movs	r1, #64	; 0x40
 810b076:	f7ff ff21 	bl	810aebc <_malloc_r>
 810b07a:	6028      	str	r0, [r5, #0]
 810b07c:	6128      	str	r0, [r5, #16]
 810b07e:	b920      	cbnz	r0, 810b08a <_svfiprintf_r+0x2e>
 810b080:	230c      	movs	r3, #12
 810b082:	603b      	str	r3, [r7, #0]
 810b084:	f04f 30ff 	mov.w	r0, #4294967295
 810b088:	e0d1      	b.n	810b22e <_svfiprintf_r+0x1d2>
 810b08a:	2340      	movs	r3, #64	; 0x40
 810b08c:	616b      	str	r3, [r5, #20]
 810b08e:	2300      	movs	r3, #0
 810b090:	9309      	str	r3, [sp, #36]	; 0x24
 810b092:	2320      	movs	r3, #32
 810b094:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810b098:	f8cd 800c 	str.w	r8, [sp, #12]
 810b09c:	2330      	movs	r3, #48	; 0x30
 810b09e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810b248 <_svfiprintf_r+0x1ec>
 810b0a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810b0a6:	f04f 0901 	mov.w	r9, #1
 810b0aa:	4623      	mov	r3, r4
 810b0ac:	469a      	mov	sl, r3
 810b0ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b0b2:	b10a      	cbz	r2, 810b0b8 <_svfiprintf_r+0x5c>
 810b0b4:	2a25      	cmp	r2, #37	; 0x25
 810b0b6:	d1f9      	bne.n	810b0ac <_svfiprintf_r+0x50>
 810b0b8:	ebba 0b04 	subs.w	fp, sl, r4
 810b0bc:	d00b      	beq.n	810b0d6 <_svfiprintf_r+0x7a>
 810b0be:	465b      	mov	r3, fp
 810b0c0:	4622      	mov	r2, r4
 810b0c2:	4629      	mov	r1, r5
 810b0c4:	4638      	mov	r0, r7
 810b0c6:	f7ff ff6d 	bl	810afa4 <__ssputs_r>
 810b0ca:	3001      	adds	r0, #1
 810b0cc:	f000 80aa 	beq.w	810b224 <_svfiprintf_r+0x1c8>
 810b0d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b0d2:	445a      	add	r2, fp
 810b0d4:	9209      	str	r2, [sp, #36]	; 0x24
 810b0d6:	f89a 3000 	ldrb.w	r3, [sl]
 810b0da:	2b00      	cmp	r3, #0
 810b0dc:	f000 80a2 	beq.w	810b224 <_svfiprintf_r+0x1c8>
 810b0e0:	2300      	movs	r3, #0
 810b0e2:	f04f 32ff 	mov.w	r2, #4294967295
 810b0e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810b0ea:	f10a 0a01 	add.w	sl, sl, #1
 810b0ee:	9304      	str	r3, [sp, #16]
 810b0f0:	9307      	str	r3, [sp, #28]
 810b0f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810b0f6:	931a      	str	r3, [sp, #104]	; 0x68
 810b0f8:	4654      	mov	r4, sl
 810b0fa:	2205      	movs	r2, #5
 810b0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b100:	4851      	ldr	r0, [pc, #324]	; (810b248 <_svfiprintf_r+0x1ec>)
 810b102:	f7f5 f8f5 	bl	81002f0 <memchr>
 810b106:	9a04      	ldr	r2, [sp, #16]
 810b108:	b9d8      	cbnz	r0, 810b142 <_svfiprintf_r+0xe6>
 810b10a:	06d0      	lsls	r0, r2, #27
 810b10c:	bf44      	itt	mi
 810b10e:	2320      	movmi	r3, #32
 810b110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b114:	0711      	lsls	r1, r2, #28
 810b116:	bf44      	itt	mi
 810b118:	232b      	movmi	r3, #43	; 0x2b
 810b11a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b11e:	f89a 3000 	ldrb.w	r3, [sl]
 810b122:	2b2a      	cmp	r3, #42	; 0x2a
 810b124:	d015      	beq.n	810b152 <_svfiprintf_r+0xf6>
 810b126:	9a07      	ldr	r2, [sp, #28]
 810b128:	4654      	mov	r4, sl
 810b12a:	2000      	movs	r0, #0
 810b12c:	f04f 0c0a 	mov.w	ip, #10
 810b130:	4621      	mov	r1, r4
 810b132:	f811 3b01 	ldrb.w	r3, [r1], #1
 810b136:	3b30      	subs	r3, #48	; 0x30
 810b138:	2b09      	cmp	r3, #9
 810b13a:	d94e      	bls.n	810b1da <_svfiprintf_r+0x17e>
 810b13c:	b1b0      	cbz	r0, 810b16c <_svfiprintf_r+0x110>
 810b13e:	9207      	str	r2, [sp, #28]
 810b140:	e014      	b.n	810b16c <_svfiprintf_r+0x110>
 810b142:	eba0 0308 	sub.w	r3, r0, r8
 810b146:	fa09 f303 	lsl.w	r3, r9, r3
 810b14a:	4313      	orrs	r3, r2
 810b14c:	9304      	str	r3, [sp, #16]
 810b14e:	46a2      	mov	sl, r4
 810b150:	e7d2      	b.n	810b0f8 <_svfiprintf_r+0x9c>
 810b152:	9b03      	ldr	r3, [sp, #12]
 810b154:	1d19      	adds	r1, r3, #4
 810b156:	681b      	ldr	r3, [r3, #0]
 810b158:	9103      	str	r1, [sp, #12]
 810b15a:	2b00      	cmp	r3, #0
 810b15c:	bfbb      	ittet	lt
 810b15e:	425b      	neglt	r3, r3
 810b160:	f042 0202 	orrlt.w	r2, r2, #2
 810b164:	9307      	strge	r3, [sp, #28]
 810b166:	9307      	strlt	r3, [sp, #28]
 810b168:	bfb8      	it	lt
 810b16a:	9204      	strlt	r2, [sp, #16]
 810b16c:	7823      	ldrb	r3, [r4, #0]
 810b16e:	2b2e      	cmp	r3, #46	; 0x2e
 810b170:	d10c      	bne.n	810b18c <_svfiprintf_r+0x130>
 810b172:	7863      	ldrb	r3, [r4, #1]
 810b174:	2b2a      	cmp	r3, #42	; 0x2a
 810b176:	d135      	bne.n	810b1e4 <_svfiprintf_r+0x188>
 810b178:	9b03      	ldr	r3, [sp, #12]
 810b17a:	1d1a      	adds	r2, r3, #4
 810b17c:	681b      	ldr	r3, [r3, #0]
 810b17e:	9203      	str	r2, [sp, #12]
 810b180:	2b00      	cmp	r3, #0
 810b182:	bfb8      	it	lt
 810b184:	f04f 33ff 	movlt.w	r3, #4294967295
 810b188:	3402      	adds	r4, #2
 810b18a:	9305      	str	r3, [sp, #20]
 810b18c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810b258 <_svfiprintf_r+0x1fc>
 810b190:	7821      	ldrb	r1, [r4, #0]
 810b192:	2203      	movs	r2, #3
 810b194:	4650      	mov	r0, sl
 810b196:	f7f5 f8ab 	bl	81002f0 <memchr>
 810b19a:	b140      	cbz	r0, 810b1ae <_svfiprintf_r+0x152>
 810b19c:	2340      	movs	r3, #64	; 0x40
 810b19e:	eba0 000a 	sub.w	r0, r0, sl
 810b1a2:	fa03 f000 	lsl.w	r0, r3, r0
 810b1a6:	9b04      	ldr	r3, [sp, #16]
 810b1a8:	4303      	orrs	r3, r0
 810b1aa:	3401      	adds	r4, #1
 810b1ac:	9304      	str	r3, [sp, #16]
 810b1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b1b2:	4826      	ldr	r0, [pc, #152]	; (810b24c <_svfiprintf_r+0x1f0>)
 810b1b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810b1b8:	2206      	movs	r2, #6
 810b1ba:	f7f5 f899 	bl	81002f0 <memchr>
 810b1be:	2800      	cmp	r0, #0
 810b1c0:	d038      	beq.n	810b234 <_svfiprintf_r+0x1d8>
 810b1c2:	4b23      	ldr	r3, [pc, #140]	; (810b250 <_svfiprintf_r+0x1f4>)
 810b1c4:	bb1b      	cbnz	r3, 810b20e <_svfiprintf_r+0x1b2>
 810b1c6:	9b03      	ldr	r3, [sp, #12]
 810b1c8:	3307      	adds	r3, #7
 810b1ca:	f023 0307 	bic.w	r3, r3, #7
 810b1ce:	3308      	adds	r3, #8
 810b1d0:	9303      	str	r3, [sp, #12]
 810b1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b1d4:	4433      	add	r3, r6
 810b1d6:	9309      	str	r3, [sp, #36]	; 0x24
 810b1d8:	e767      	b.n	810b0aa <_svfiprintf_r+0x4e>
 810b1da:	fb0c 3202 	mla	r2, ip, r2, r3
 810b1de:	460c      	mov	r4, r1
 810b1e0:	2001      	movs	r0, #1
 810b1e2:	e7a5      	b.n	810b130 <_svfiprintf_r+0xd4>
 810b1e4:	2300      	movs	r3, #0
 810b1e6:	3401      	adds	r4, #1
 810b1e8:	9305      	str	r3, [sp, #20]
 810b1ea:	4619      	mov	r1, r3
 810b1ec:	f04f 0c0a 	mov.w	ip, #10
 810b1f0:	4620      	mov	r0, r4
 810b1f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b1f6:	3a30      	subs	r2, #48	; 0x30
 810b1f8:	2a09      	cmp	r2, #9
 810b1fa:	d903      	bls.n	810b204 <_svfiprintf_r+0x1a8>
 810b1fc:	2b00      	cmp	r3, #0
 810b1fe:	d0c5      	beq.n	810b18c <_svfiprintf_r+0x130>
 810b200:	9105      	str	r1, [sp, #20]
 810b202:	e7c3      	b.n	810b18c <_svfiprintf_r+0x130>
 810b204:	fb0c 2101 	mla	r1, ip, r1, r2
 810b208:	4604      	mov	r4, r0
 810b20a:	2301      	movs	r3, #1
 810b20c:	e7f0      	b.n	810b1f0 <_svfiprintf_r+0x194>
 810b20e:	ab03      	add	r3, sp, #12
 810b210:	9300      	str	r3, [sp, #0]
 810b212:	462a      	mov	r2, r5
 810b214:	4b0f      	ldr	r3, [pc, #60]	; (810b254 <_svfiprintf_r+0x1f8>)
 810b216:	a904      	add	r1, sp, #16
 810b218:	4638      	mov	r0, r7
 810b21a:	f7fb fed5 	bl	8106fc8 <_printf_float>
 810b21e:	1c42      	adds	r2, r0, #1
 810b220:	4606      	mov	r6, r0
 810b222:	d1d6      	bne.n	810b1d2 <_svfiprintf_r+0x176>
 810b224:	89ab      	ldrh	r3, [r5, #12]
 810b226:	065b      	lsls	r3, r3, #25
 810b228:	f53f af2c 	bmi.w	810b084 <_svfiprintf_r+0x28>
 810b22c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810b22e:	b01d      	add	sp, #116	; 0x74
 810b230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b234:	ab03      	add	r3, sp, #12
 810b236:	9300      	str	r3, [sp, #0]
 810b238:	462a      	mov	r2, r5
 810b23a:	4b06      	ldr	r3, [pc, #24]	; (810b254 <_svfiprintf_r+0x1f8>)
 810b23c:	a904      	add	r1, sp, #16
 810b23e:	4638      	mov	r0, r7
 810b240:	f7fc f966 	bl	8107510 <_printf_i>
 810b244:	e7eb      	b.n	810b21e <_svfiprintf_r+0x1c2>
 810b246:	bf00      	nop
 810b248:	0810c03c 	.word	0x0810c03c
 810b24c:	0810c046 	.word	0x0810c046
 810b250:	08106fc9 	.word	0x08106fc9
 810b254:	0810afa5 	.word	0x0810afa5
 810b258:	0810c042 	.word	0x0810c042

0810b25c <__sfputc_r>:
 810b25c:	6893      	ldr	r3, [r2, #8]
 810b25e:	3b01      	subs	r3, #1
 810b260:	2b00      	cmp	r3, #0
 810b262:	b410      	push	{r4}
 810b264:	6093      	str	r3, [r2, #8]
 810b266:	da08      	bge.n	810b27a <__sfputc_r+0x1e>
 810b268:	6994      	ldr	r4, [r2, #24]
 810b26a:	42a3      	cmp	r3, r4
 810b26c:	db01      	blt.n	810b272 <__sfputc_r+0x16>
 810b26e:	290a      	cmp	r1, #10
 810b270:	d103      	bne.n	810b27a <__sfputc_r+0x1e>
 810b272:	f85d 4b04 	ldr.w	r4, [sp], #4
 810b276:	f7fd bbf7 	b.w	8108a68 <__swbuf_r>
 810b27a:	6813      	ldr	r3, [r2, #0]
 810b27c:	1c58      	adds	r0, r3, #1
 810b27e:	6010      	str	r0, [r2, #0]
 810b280:	7019      	strb	r1, [r3, #0]
 810b282:	4608      	mov	r0, r1
 810b284:	f85d 4b04 	ldr.w	r4, [sp], #4
 810b288:	4770      	bx	lr

0810b28a <__sfputs_r>:
 810b28a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b28c:	4606      	mov	r6, r0
 810b28e:	460f      	mov	r7, r1
 810b290:	4614      	mov	r4, r2
 810b292:	18d5      	adds	r5, r2, r3
 810b294:	42ac      	cmp	r4, r5
 810b296:	d101      	bne.n	810b29c <__sfputs_r+0x12>
 810b298:	2000      	movs	r0, #0
 810b29a:	e007      	b.n	810b2ac <__sfputs_r+0x22>
 810b29c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b2a0:	463a      	mov	r2, r7
 810b2a2:	4630      	mov	r0, r6
 810b2a4:	f7ff ffda 	bl	810b25c <__sfputc_r>
 810b2a8:	1c43      	adds	r3, r0, #1
 810b2aa:	d1f3      	bne.n	810b294 <__sfputs_r+0xa>
 810b2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810b2b0 <_vfiprintf_r>:
 810b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b2b4:	460d      	mov	r5, r1
 810b2b6:	b09d      	sub	sp, #116	; 0x74
 810b2b8:	4614      	mov	r4, r2
 810b2ba:	4698      	mov	r8, r3
 810b2bc:	4606      	mov	r6, r0
 810b2be:	b118      	cbz	r0, 810b2c8 <_vfiprintf_r+0x18>
 810b2c0:	6983      	ldr	r3, [r0, #24]
 810b2c2:	b90b      	cbnz	r3, 810b2c8 <_vfiprintf_r+0x18>
 810b2c4:	f7fe fc24 	bl	8109b10 <__sinit>
 810b2c8:	4b89      	ldr	r3, [pc, #548]	; (810b4f0 <_vfiprintf_r+0x240>)
 810b2ca:	429d      	cmp	r5, r3
 810b2cc:	d11b      	bne.n	810b306 <_vfiprintf_r+0x56>
 810b2ce:	6875      	ldr	r5, [r6, #4]
 810b2d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810b2d2:	07d9      	lsls	r1, r3, #31
 810b2d4:	d405      	bmi.n	810b2e2 <_vfiprintf_r+0x32>
 810b2d6:	89ab      	ldrh	r3, [r5, #12]
 810b2d8:	059a      	lsls	r2, r3, #22
 810b2da:	d402      	bmi.n	810b2e2 <_vfiprintf_r+0x32>
 810b2dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810b2de:	f7ff f828 	bl	810a332 <__retarget_lock_acquire_recursive>
 810b2e2:	89ab      	ldrh	r3, [r5, #12]
 810b2e4:	071b      	lsls	r3, r3, #28
 810b2e6:	d501      	bpl.n	810b2ec <_vfiprintf_r+0x3c>
 810b2e8:	692b      	ldr	r3, [r5, #16]
 810b2ea:	b9eb      	cbnz	r3, 810b328 <_vfiprintf_r+0x78>
 810b2ec:	4629      	mov	r1, r5
 810b2ee:	4630      	mov	r0, r6
 810b2f0:	f7fd fc0c 	bl	8108b0c <__swsetup_r>
 810b2f4:	b1c0      	cbz	r0, 810b328 <_vfiprintf_r+0x78>
 810b2f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810b2f8:	07dc      	lsls	r4, r3, #31
 810b2fa:	d50e      	bpl.n	810b31a <_vfiprintf_r+0x6a>
 810b2fc:	f04f 30ff 	mov.w	r0, #4294967295
 810b300:	b01d      	add	sp, #116	; 0x74
 810b302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b306:	4b7b      	ldr	r3, [pc, #492]	; (810b4f4 <_vfiprintf_r+0x244>)
 810b308:	429d      	cmp	r5, r3
 810b30a:	d101      	bne.n	810b310 <_vfiprintf_r+0x60>
 810b30c:	68b5      	ldr	r5, [r6, #8]
 810b30e:	e7df      	b.n	810b2d0 <_vfiprintf_r+0x20>
 810b310:	4b79      	ldr	r3, [pc, #484]	; (810b4f8 <_vfiprintf_r+0x248>)
 810b312:	429d      	cmp	r5, r3
 810b314:	bf08      	it	eq
 810b316:	68f5      	ldreq	r5, [r6, #12]
 810b318:	e7da      	b.n	810b2d0 <_vfiprintf_r+0x20>
 810b31a:	89ab      	ldrh	r3, [r5, #12]
 810b31c:	0598      	lsls	r0, r3, #22
 810b31e:	d4ed      	bmi.n	810b2fc <_vfiprintf_r+0x4c>
 810b320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810b322:	f7ff f807 	bl	810a334 <__retarget_lock_release_recursive>
 810b326:	e7e9      	b.n	810b2fc <_vfiprintf_r+0x4c>
 810b328:	2300      	movs	r3, #0
 810b32a:	9309      	str	r3, [sp, #36]	; 0x24
 810b32c:	2320      	movs	r3, #32
 810b32e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810b332:	f8cd 800c 	str.w	r8, [sp, #12]
 810b336:	2330      	movs	r3, #48	; 0x30
 810b338:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810b4fc <_vfiprintf_r+0x24c>
 810b33c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810b340:	f04f 0901 	mov.w	r9, #1
 810b344:	4623      	mov	r3, r4
 810b346:	469a      	mov	sl, r3
 810b348:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b34c:	b10a      	cbz	r2, 810b352 <_vfiprintf_r+0xa2>
 810b34e:	2a25      	cmp	r2, #37	; 0x25
 810b350:	d1f9      	bne.n	810b346 <_vfiprintf_r+0x96>
 810b352:	ebba 0b04 	subs.w	fp, sl, r4
 810b356:	d00b      	beq.n	810b370 <_vfiprintf_r+0xc0>
 810b358:	465b      	mov	r3, fp
 810b35a:	4622      	mov	r2, r4
 810b35c:	4629      	mov	r1, r5
 810b35e:	4630      	mov	r0, r6
 810b360:	f7ff ff93 	bl	810b28a <__sfputs_r>
 810b364:	3001      	adds	r0, #1
 810b366:	f000 80aa 	beq.w	810b4be <_vfiprintf_r+0x20e>
 810b36a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b36c:	445a      	add	r2, fp
 810b36e:	9209      	str	r2, [sp, #36]	; 0x24
 810b370:	f89a 3000 	ldrb.w	r3, [sl]
 810b374:	2b00      	cmp	r3, #0
 810b376:	f000 80a2 	beq.w	810b4be <_vfiprintf_r+0x20e>
 810b37a:	2300      	movs	r3, #0
 810b37c:	f04f 32ff 	mov.w	r2, #4294967295
 810b380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810b384:	f10a 0a01 	add.w	sl, sl, #1
 810b388:	9304      	str	r3, [sp, #16]
 810b38a:	9307      	str	r3, [sp, #28]
 810b38c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810b390:	931a      	str	r3, [sp, #104]	; 0x68
 810b392:	4654      	mov	r4, sl
 810b394:	2205      	movs	r2, #5
 810b396:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b39a:	4858      	ldr	r0, [pc, #352]	; (810b4fc <_vfiprintf_r+0x24c>)
 810b39c:	f7f4 ffa8 	bl	81002f0 <memchr>
 810b3a0:	9a04      	ldr	r2, [sp, #16]
 810b3a2:	b9d8      	cbnz	r0, 810b3dc <_vfiprintf_r+0x12c>
 810b3a4:	06d1      	lsls	r1, r2, #27
 810b3a6:	bf44      	itt	mi
 810b3a8:	2320      	movmi	r3, #32
 810b3aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b3ae:	0713      	lsls	r3, r2, #28
 810b3b0:	bf44      	itt	mi
 810b3b2:	232b      	movmi	r3, #43	; 0x2b
 810b3b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b3b8:	f89a 3000 	ldrb.w	r3, [sl]
 810b3bc:	2b2a      	cmp	r3, #42	; 0x2a
 810b3be:	d015      	beq.n	810b3ec <_vfiprintf_r+0x13c>
 810b3c0:	9a07      	ldr	r2, [sp, #28]
 810b3c2:	4654      	mov	r4, sl
 810b3c4:	2000      	movs	r0, #0
 810b3c6:	f04f 0c0a 	mov.w	ip, #10
 810b3ca:	4621      	mov	r1, r4
 810b3cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 810b3d0:	3b30      	subs	r3, #48	; 0x30
 810b3d2:	2b09      	cmp	r3, #9
 810b3d4:	d94e      	bls.n	810b474 <_vfiprintf_r+0x1c4>
 810b3d6:	b1b0      	cbz	r0, 810b406 <_vfiprintf_r+0x156>
 810b3d8:	9207      	str	r2, [sp, #28]
 810b3da:	e014      	b.n	810b406 <_vfiprintf_r+0x156>
 810b3dc:	eba0 0308 	sub.w	r3, r0, r8
 810b3e0:	fa09 f303 	lsl.w	r3, r9, r3
 810b3e4:	4313      	orrs	r3, r2
 810b3e6:	9304      	str	r3, [sp, #16]
 810b3e8:	46a2      	mov	sl, r4
 810b3ea:	e7d2      	b.n	810b392 <_vfiprintf_r+0xe2>
 810b3ec:	9b03      	ldr	r3, [sp, #12]
 810b3ee:	1d19      	adds	r1, r3, #4
 810b3f0:	681b      	ldr	r3, [r3, #0]
 810b3f2:	9103      	str	r1, [sp, #12]
 810b3f4:	2b00      	cmp	r3, #0
 810b3f6:	bfbb      	ittet	lt
 810b3f8:	425b      	neglt	r3, r3
 810b3fa:	f042 0202 	orrlt.w	r2, r2, #2
 810b3fe:	9307      	strge	r3, [sp, #28]
 810b400:	9307      	strlt	r3, [sp, #28]
 810b402:	bfb8      	it	lt
 810b404:	9204      	strlt	r2, [sp, #16]
 810b406:	7823      	ldrb	r3, [r4, #0]
 810b408:	2b2e      	cmp	r3, #46	; 0x2e
 810b40a:	d10c      	bne.n	810b426 <_vfiprintf_r+0x176>
 810b40c:	7863      	ldrb	r3, [r4, #1]
 810b40e:	2b2a      	cmp	r3, #42	; 0x2a
 810b410:	d135      	bne.n	810b47e <_vfiprintf_r+0x1ce>
 810b412:	9b03      	ldr	r3, [sp, #12]
 810b414:	1d1a      	adds	r2, r3, #4
 810b416:	681b      	ldr	r3, [r3, #0]
 810b418:	9203      	str	r2, [sp, #12]
 810b41a:	2b00      	cmp	r3, #0
 810b41c:	bfb8      	it	lt
 810b41e:	f04f 33ff 	movlt.w	r3, #4294967295
 810b422:	3402      	adds	r4, #2
 810b424:	9305      	str	r3, [sp, #20]
 810b426:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810b50c <_vfiprintf_r+0x25c>
 810b42a:	7821      	ldrb	r1, [r4, #0]
 810b42c:	2203      	movs	r2, #3
 810b42e:	4650      	mov	r0, sl
 810b430:	f7f4 ff5e 	bl	81002f0 <memchr>
 810b434:	b140      	cbz	r0, 810b448 <_vfiprintf_r+0x198>
 810b436:	2340      	movs	r3, #64	; 0x40
 810b438:	eba0 000a 	sub.w	r0, r0, sl
 810b43c:	fa03 f000 	lsl.w	r0, r3, r0
 810b440:	9b04      	ldr	r3, [sp, #16]
 810b442:	4303      	orrs	r3, r0
 810b444:	3401      	adds	r4, #1
 810b446:	9304      	str	r3, [sp, #16]
 810b448:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b44c:	482c      	ldr	r0, [pc, #176]	; (810b500 <_vfiprintf_r+0x250>)
 810b44e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810b452:	2206      	movs	r2, #6
 810b454:	f7f4 ff4c 	bl	81002f0 <memchr>
 810b458:	2800      	cmp	r0, #0
 810b45a:	d03f      	beq.n	810b4dc <_vfiprintf_r+0x22c>
 810b45c:	4b29      	ldr	r3, [pc, #164]	; (810b504 <_vfiprintf_r+0x254>)
 810b45e:	bb1b      	cbnz	r3, 810b4a8 <_vfiprintf_r+0x1f8>
 810b460:	9b03      	ldr	r3, [sp, #12]
 810b462:	3307      	adds	r3, #7
 810b464:	f023 0307 	bic.w	r3, r3, #7
 810b468:	3308      	adds	r3, #8
 810b46a:	9303      	str	r3, [sp, #12]
 810b46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b46e:	443b      	add	r3, r7
 810b470:	9309      	str	r3, [sp, #36]	; 0x24
 810b472:	e767      	b.n	810b344 <_vfiprintf_r+0x94>
 810b474:	fb0c 3202 	mla	r2, ip, r2, r3
 810b478:	460c      	mov	r4, r1
 810b47a:	2001      	movs	r0, #1
 810b47c:	e7a5      	b.n	810b3ca <_vfiprintf_r+0x11a>
 810b47e:	2300      	movs	r3, #0
 810b480:	3401      	adds	r4, #1
 810b482:	9305      	str	r3, [sp, #20]
 810b484:	4619      	mov	r1, r3
 810b486:	f04f 0c0a 	mov.w	ip, #10
 810b48a:	4620      	mov	r0, r4
 810b48c:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b490:	3a30      	subs	r2, #48	; 0x30
 810b492:	2a09      	cmp	r2, #9
 810b494:	d903      	bls.n	810b49e <_vfiprintf_r+0x1ee>
 810b496:	2b00      	cmp	r3, #0
 810b498:	d0c5      	beq.n	810b426 <_vfiprintf_r+0x176>
 810b49a:	9105      	str	r1, [sp, #20]
 810b49c:	e7c3      	b.n	810b426 <_vfiprintf_r+0x176>
 810b49e:	fb0c 2101 	mla	r1, ip, r1, r2
 810b4a2:	4604      	mov	r4, r0
 810b4a4:	2301      	movs	r3, #1
 810b4a6:	e7f0      	b.n	810b48a <_vfiprintf_r+0x1da>
 810b4a8:	ab03      	add	r3, sp, #12
 810b4aa:	9300      	str	r3, [sp, #0]
 810b4ac:	462a      	mov	r2, r5
 810b4ae:	4b16      	ldr	r3, [pc, #88]	; (810b508 <_vfiprintf_r+0x258>)
 810b4b0:	a904      	add	r1, sp, #16
 810b4b2:	4630      	mov	r0, r6
 810b4b4:	f7fb fd88 	bl	8106fc8 <_printf_float>
 810b4b8:	4607      	mov	r7, r0
 810b4ba:	1c78      	adds	r0, r7, #1
 810b4bc:	d1d6      	bne.n	810b46c <_vfiprintf_r+0x1bc>
 810b4be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810b4c0:	07d9      	lsls	r1, r3, #31
 810b4c2:	d405      	bmi.n	810b4d0 <_vfiprintf_r+0x220>
 810b4c4:	89ab      	ldrh	r3, [r5, #12]
 810b4c6:	059a      	lsls	r2, r3, #22
 810b4c8:	d402      	bmi.n	810b4d0 <_vfiprintf_r+0x220>
 810b4ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810b4cc:	f7fe ff32 	bl	810a334 <__retarget_lock_release_recursive>
 810b4d0:	89ab      	ldrh	r3, [r5, #12]
 810b4d2:	065b      	lsls	r3, r3, #25
 810b4d4:	f53f af12 	bmi.w	810b2fc <_vfiprintf_r+0x4c>
 810b4d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 810b4da:	e711      	b.n	810b300 <_vfiprintf_r+0x50>
 810b4dc:	ab03      	add	r3, sp, #12
 810b4de:	9300      	str	r3, [sp, #0]
 810b4e0:	462a      	mov	r2, r5
 810b4e2:	4b09      	ldr	r3, [pc, #36]	; (810b508 <_vfiprintf_r+0x258>)
 810b4e4:	a904      	add	r1, sp, #16
 810b4e6:	4630      	mov	r0, r6
 810b4e8:	f7fc f812 	bl	8107510 <_printf_i>
 810b4ec:	e7e4      	b.n	810b4b8 <_vfiprintf_r+0x208>
 810b4ee:	bf00      	nop
 810b4f0:	0810be24 	.word	0x0810be24
 810b4f4:	0810be44 	.word	0x0810be44
 810b4f8:	0810be04 	.word	0x0810be04
 810b4fc:	0810c03c 	.word	0x0810c03c
 810b500:	0810c046 	.word	0x0810c046
 810b504:	08106fc9 	.word	0x08106fc9
 810b508:	0810b28b 	.word	0x0810b28b
 810b50c:	0810c042 	.word	0x0810c042

0810b510 <_putc_r>:
 810b510:	b570      	push	{r4, r5, r6, lr}
 810b512:	460d      	mov	r5, r1
 810b514:	4614      	mov	r4, r2
 810b516:	4606      	mov	r6, r0
 810b518:	b118      	cbz	r0, 810b522 <_putc_r+0x12>
 810b51a:	6983      	ldr	r3, [r0, #24]
 810b51c:	b90b      	cbnz	r3, 810b522 <_putc_r+0x12>
 810b51e:	f7fe faf7 	bl	8109b10 <__sinit>
 810b522:	4b1c      	ldr	r3, [pc, #112]	; (810b594 <_putc_r+0x84>)
 810b524:	429c      	cmp	r4, r3
 810b526:	d124      	bne.n	810b572 <_putc_r+0x62>
 810b528:	6874      	ldr	r4, [r6, #4]
 810b52a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810b52c:	07d8      	lsls	r0, r3, #31
 810b52e:	d405      	bmi.n	810b53c <_putc_r+0x2c>
 810b530:	89a3      	ldrh	r3, [r4, #12]
 810b532:	0599      	lsls	r1, r3, #22
 810b534:	d402      	bmi.n	810b53c <_putc_r+0x2c>
 810b536:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b538:	f7fe fefb 	bl	810a332 <__retarget_lock_acquire_recursive>
 810b53c:	68a3      	ldr	r3, [r4, #8]
 810b53e:	3b01      	subs	r3, #1
 810b540:	2b00      	cmp	r3, #0
 810b542:	60a3      	str	r3, [r4, #8]
 810b544:	da05      	bge.n	810b552 <_putc_r+0x42>
 810b546:	69a2      	ldr	r2, [r4, #24]
 810b548:	4293      	cmp	r3, r2
 810b54a:	db1c      	blt.n	810b586 <_putc_r+0x76>
 810b54c:	b2eb      	uxtb	r3, r5
 810b54e:	2b0a      	cmp	r3, #10
 810b550:	d019      	beq.n	810b586 <_putc_r+0x76>
 810b552:	6823      	ldr	r3, [r4, #0]
 810b554:	1c5a      	adds	r2, r3, #1
 810b556:	6022      	str	r2, [r4, #0]
 810b558:	701d      	strb	r5, [r3, #0]
 810b55a:	b2ed      	uxtb	r5, r5
 810b55c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810b55e:	07da      	lsls	r2, r3, #31
 810b560:	d405      	bmi.n	810b56e <_putc_r+0x5e>
 810b562:	89a3      	ldrh	r3, [r4, #12]
 810b564:	059b      	lsls	r3, r3, #22
 810b566:	d402      	bmi.n	810b56e <_putc_r+0x5e>
 810b568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b56a:	f7fe fee3 	bl	810a334 <__retarget_lock_release_recursive>
 810b56e:	4628      	mov	r0, r5
 810b570:	bd70      	pop	{r4, r5, r6, pc}
 810b572:	4b09      	ldr	r3, [pc, #36]	; (810b598 <_putc_r+0x88>)
 810b574:	429c      	cmp	r4, r3
 810b576:	d101      	bne.n	810b57c <_putc_r+0x6c>
 810b578:	68b4      	ldr	r4, [r6, #8]
 810b57a:	e7d6      	b.n	810b52a <_putc_r+0x1a>
 810b57c:	4b07      	ldr	r3, [pc, #28]	; (810b59c <_putc_r+0x8c>)
 810b57e:	429c      	cmp	r4, r3
 810b580:	bf08      	it	eq
 810b582:	68f4      	ldreq	r4, [r6, #12]
 810b584:	e7d1      	b.n	810b52a <_putc_r+0x1a>
 810b586:	4629      	mov	r1, r5
 810b588:	4622      	mov	r2, r4
 810b58a:	4630      	mov	r0, r6
 810b58c:	f7fd fa6c 	bl	8108a68 <__swbuf_r>
 810b590:	4605      	mov	r5, r0
 810b592:	e7e3      	b.n	810b55c <_putc_r+0x4c>
 810b594:	0810be24 	.word	0x0810be24
 810b598:	0810be44 	.word	0x0810be44
 810b59c:	0810be04 	.word	0x0810be04

0810b5a0 <nan>:
 810b5a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810b5a8 <nan+0x8>
 810b5a4:	4770      	bx	lr
 810b5a6:	bf00      	nop
 810b5a8:	00000000 	.word	0x00000000
 810b5ac:	7ff80000 	.word	0x7ff80000

0810b5b0 <_sbrk_r>:
 810b5b0:	b538      	push	{r3, r4, r5, lr}
 810b5b2:	4d06      	ldr	r5, [pc, #24]	; (810b5cc <_sbrk_r+0x1c>)
 810b5b4:	2300      	movs	r3, #0
 810b5b6:	4604      	mov	r4, r0
 810b5b8:	4608      	mov	r0, r1
 810b5ba:	602b      	str	r3, [r5, #0]
 810b5bc:	f7f6 fc76 	bl	8101eac <_sbrk>
 810b5c0:	1c43      	adds	r3, r0, #1
 810b5c2:	d102      	bne.n	810b5ca <_sbrk_r+0x1a>
 810b5c4:	682b      	ldr	r3, [r5, #0]
 810b5c6:	b103      	cbz	r3, 810b5ca <_sbrk_r+0x1a>
 810b5c8:	6023      	str	r3, [r4, #0]
 810b5ca:	bd38      	pop	{r3, r4, r5, pc}
 810b5cc:	10000300 	.word	0x10000300

0810b5d0 <__sread>:
 810b5d0:	b510      	push	{r4, lr}
 810b5d2:	460c      	mov	r4, r1
 810b5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b5d8:	f000 f93a 	bl	810b850 <_read_r>
 810b5dc:	2800      	cmp	r0, #0
 810b5de:	bfab      	itete	ge
 810b5e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810b5e2:	89a3      	ldrhlt	r3, [r4, #12]
 810b5e4:	181b      	addge	r3, r3, r0
 810b5e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810b5ea:	bfac      	ite	ge
 810b5ec:	6563      	strge	r3, [r4, #84]	; 0x54
 810b5ee:	81a3      	strhlt	r3, [r4, #12]
 810b5f0:	bd10      	pop	{r4, pc}

0810b5f2 <__swrite>:
 810b5f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b5f6:	461f      	mov	r7, r3
 810b5f8:	898b      	ldrh	r3, [r1, #12]
 810b5fa:	05db      	lsls	r3, r3, #23
 810b5fc:	4605      	mov	r5, r0
 810b5fe:	460c      	mov	r4, r1
 810b600:	4616      	mov	r6, r2
 810b602:	d505      	bpl.n	810b610 <__swrite+0x1e>
 810b604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b608:	2302      	movs	r3, #2
 810b60a:	2200      	movs	r2, #0
 810b60c:	f000 f8b8 	bl	810b780 <_lseek_r>
 810b610:	89a3      	ldrh	r3, [r4, #12]
 810b612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810b61a:	81a3      	strh	r3, [r4, #12]
 810b61c:	4632      	mov	r2, r6
 810b61e:	463b      	mov	r3, r7
 810b620:	4628      	mov	r0, r5
 810b622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810b626:	f000 b837 	b.w	810b698 <_write_r>

0810b62a <__sseek>:
 810b62a:	b510      	push	{r4, lr}
 810b62c:	460c      	mov	r4, r1
 810b62e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b632:	f000 f8a5 	bl	810b780 <_lseek_r>
 810b636:	1c43      	adds	r3, r0, #1
 810b638:	89a3      	ldrh	r3, [r4, #12]
 810b63a:	bf15      	itete	ne
 810b63c:	6560      	strne	r0, [r4, #84]	; 0x54
 810b63e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810b642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810b646:	81a3      	strheq	r3, [r4, #12]
 810b648:	bf18      	it	ne
 810b64a:	81a3      	strhne	r3, [r4, #12]
 810b64c:	bd10      	pop	{r4, pc}

0810b64e <__sclose>:
 810b64e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b652:	f000 b851 	b.w	810b6f8 <_close_r>

0810b656 <strncmp>:
 810b656:	b510      	push	{r4, lr}
 810b658:	b17a      	cbz	r2, 810b67a <strncmp+0x24>
 810b65a:	4603      	mov	r3, r0
 810b65c:	3901      	subs	r1, #1
 810b65e:	1884      	adds	r4, r0, r2
 810b660:	f813 0b01 	ldrb.w	r0, [r3], #1
 810b664:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810b668:	4290      	cmp	r0, r2
 810b66a:	d101      	bne.n	810b670 <strncmp+0x1a>
 810b66c:	42a3      	cmp	r3, r4
 810b66e:	d101      	bne.n	810b674 <strncmp+0x1e>
 810b670:	1a80      	subs	r0, r0, r2
 810b672:	bd10      	pop	{r4, pc}
 810b674:	2800      	cmp	r0, #0
 810b676:	d1f3      	bne.n	810b660 <strncmp+0xa>
 810b678:	e7fa      	b.n	810b670 <strncmp+0x1a>
 810b67a:	4610      	mov	r0, r2
 810b67c:	e7f9      	b.n	810b672 <strncmp+0x1c>

0810b67e <__ascii_wctomb>:
 810b67e:	b149      	cbz	r1, 810b694 <__ascii_wctomb+0x16>
 810b680:	2aff      	cmp	r2, #255	; 0xff
 810b682:	bf85      	ittet	hi
 810b684:	238a      	movhi	r3, #138	; 0x8a
 810b686:	6003      	strhi	r3, [r0, #0]
 810b688:	700a      	strbls	r2, [r1, #0]
 810b68a:	f04f 30ff 	movhi.w	r0, #4294967295
 810b68e:	bf98      	it	ls
 810b690:	2001      	movls	r0, #1
 810b692:	4770      	bx	lr
 810b694:	4608      	mov	r0, r1
 810b696:	4770      	bx	lr

0810b698 <_write_r>:
 810b698:	b538      	push	{r3, r4, r5, lr}
 810b69a:	4d07      	ldr	r5, [pc, #28]	; (810b6b8 <_write_r+0x20>)
 810b69c:	4604      	mov	r4, r0
 810b69e:	4608      	mov	r0, r1
 810b6a0:	4611      	mov	r1, r2
 810b6a2:	2200      	movs	r2, #0
 810b6a4:	602a      	str	r2, [r5, #0]
 810b6a6:	461a      	mov	r2, r3
 810b6a8:	f7f6 fbb0 	bl	8101e0c <_write>
 810b6ac:	1c43      	adds	r3, r0, #1
 810b6ae:	d102      	bne.n	810b6b6 <_write_r+0x1e>
 810b6b0:	682b      	ldr	r3, [r5, #0]
 810b6b2:	b103      	cbz	r3, 810b6b6 <_write_r+0x1e>
 810b6b4:	6023      	str	r3, [r4, #0]
 810b6b6:	bd38      	pop	{r3, r4, r5, pc}
 810b6b8:	10000300 	.word	0x10000300

0810b6bc <__assert_func>:
 810b6bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810b6be:	4614      	mov	r4, r2
 810b6c0:	461a      	mov	r2, r3
 810b6c2:	4b09      	ldr	r3, [pc, #36]	; (810b6e8 <__assert_func+0x2c>)
 810b6c4:	681b      	ldr	r3, [r3, #0]
 810b6c6:	4605      	mov	r5, r0
 810b6c8:	68d8      	ldr	r0, [r3, #12]
 810b6ca:	b14c      	cbz	r4, 810b6e0 <__assert_func+0x24>
 810b6cc:	4b07      	ldr	r3, [pc, #28]	; (810b6ec <__assert_func+0x30>)
 810b6ce:	9100      	str	r1, [sp, #0]
 810b6d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810b6d4:	4906      	ldr	r1, [pc, #24]	; (810b6f0 <__assert_func+0x34>)
 810b6d6:	462b      	mov	r3, r5
 810b6d8:	f000 f81e 	bl	810b718 <fiprintf>
 810b6dc:	f000 f8ca 	bl	810b874 <abort>
 810b6e0:	4b04      	ldr	r3, [pc, #16]	; (810b6f4 <__assert_func+0x38>)
 810b6e2:	461c      	mov	r4, r3
 810b6e4:	e7f3      	b.n	810b6ce <__assert_func+0x12>
 810b6e6:	bf00      	nop
 810b6e8:	1000001c 	.word	0x1000001c
 810b6ec:	0810c04d 	.word	0x0810c04d
 810b6f0:	0810c05a 	.word	0x0810c05a
 810b6f4:	0810c088 	.word	0x0810c088

0810b6f8 <_close_r>:
 810b6f8:	b538      	push	{r3, r4, r5, lr}
 810b6fa:	4d06      	ldr	r5, [pc, #24]	; (810b714 <_close_r+0x1c>)
 810b6fc:	2300      	movs	r3, #0
 810b6fe:	4604      	mov	r4, r0
 810b700:	4608      	mov	r0, r1
 810b702:	602b      	str	r3, [r5, #0]
 810b704:	f7f6 fb9e 	bl	8101e44 <_close>
 810b708:	1c43      	adds	r3, r0, #1
 810b70a:	d102      	bne.n	810b712 <_close_r+0x1a>
 810b70c:	682b      	ldr	r3, [r5, #0]
 810b70e:	b103      	cbz	r3, 810b712 <_close_r+0x1a>
 810b710:	6023      	str	r3, [r4, #0]
 810b712:	bd38      	pop	{r3, r4, r5, pc}
 810b714:	10000300 	.word	0x10000300

0810b718 <fiprintf>:
 810b718:	b40e      	push	{r1, r2, r3}
 810b71a:	b503      	push	{r0, r1, lr}
 810b71c:	4601      	mov	r1, r0
 810b71e:	ab03      	add	r3, sp, #12
 810b720:	4805      	ldr	r0, [pc, #20]	; (810b738 <fiprintf+0x20>)
 810b722:	f853 2b04 	ldr.w	r2, [r3], #4
 810b726:	6800      	ldr	r0, [r0, #0]
 810b728:	9301      	str	r3, [sp, #4]
 810b72a:	f7ff fdc1 	bl	810b2b0 <_vfiprintf_r>
 810b72e:	b002      	add	sp, #8
 810b730:	f85d eb04 	ldr.w	lr, [sp], #4
 810b734:	b003      	add	sp, #12
 810b736:	4770      	bx	lr
 810b738:	1000001c 	.word	0x1000001c

0810b73c <_fstat_r>:
 810b73c:	b538      	push	{r3, r4, r5, lr}
 810b73e:	4d07      	ldr	r5, [pc, #28]	; (810b75c <_fstat_r+0x20>)
 810b740:	2300      	movs	r3, #0
 810b742:	4604      	mov	r4, r0
 810b744:	4608      	mov	r0, r1
 810b746:	4611      	mov	r1, r2
 810b748:	602b      	str	r3, [r5, #0]
 810b74a:	f7f6 fb87 	bl	8101e5c <_fstat>
 810b74e:	1c43      	adds	r3, r0, #1
 810b750:	d102      	bne.n	810b758 <_fstat_r+0x1c>
 810b752:	682b      	ldr	r3, [r5, #0]
 810b754:	b103      	cbz	r3, 810b758 <_fstat_r+0x1c>
 810b756:	6023      	str	r3, [r4, #0]
 810b758:	bd38      	pop	{r3, r4, r5, pc}
 810b75a:	bf00      	nop
 810b75c:	10000300 	.word	0x10000300

0810b760 <_isatty_r>:
 810b760:	b538      	push	{r3, r4, r5, lr}
 810b762:	4d06      	ldr	r5, [pc, #24]	; (810b77c <_isatty_r+0x1c>)
 810b764:	2300      	movs	r3, #0
 810b766:	4604      	mov	r4, r0
 810b768:	4608      	mov	r0, r1
 810b76a:	602b      	str	r3, [r5, #0]
 810b76c:	f7f6 fb86 	bl	8101e7c <_isatty>
 810b770:	1c43      	adds	r3, r0, #1
 810b772:	d102      	bne.n	810b77a <_isatty_r+0x1a>
 810b774:	682b      	ldr	r3, [r5, #0]
 810b776:	b103      	cbz	r3, 810b77a <_isatty_r+0x1a>
 810b778:	6023      	str	r3, [r4, #0]
 810b77a:	bd38      	pop	{r3, r4, r5, pc}
 810b77c:	10000300 	.word	0x10000300

0810b780 <_lseek_r>:
 810b780:	b538      	push	{r3, r4, r5, lr}
 810b782:	4d07      	ldr	r5, [pc, #28]	; (810b7a0 <_lseek_r+0x20>)
 810b784:	4604      	mov	r4, r0
 810b786:	4608      	mov	r0, r1
 810b788:	4611      	mov	r1, r2
 810b78a:	2200      	movs	r2, #0
 810b78c:	602a      	str	r2, [r5, #0]
 810b78e:	461a      	mov	r2, r3
 810b790:	f7f6 fb7f 	bl	8101e92 <_lseek>
 810b794:	1c43      	adds	r3, r0, #1
 810b796:	d102      	bne.n	810b79e <_lseek_r+0x1e>
 810b798:	682b      	ldr	r3, [r5, #0]
 810b79a:	b103      	cbz	r3, 810b79e <_lseek_r+0x1e>
 810b79c:	6023      	str	r3, [r4, #0]
 810b79e:	bd38      	pop	{r3, r4, r5, pc}
 810b7a0:	10000300 	.word	0x10000300

0810b7a4 <memmove>:
 810b7a4:	4288      	cmp	r0, r1
 810b7a6:	b510      	push	{r4, lr}
 810b7a8:	eb01 0402 	add.w	r4, r1, r2
 810b7ac:	d902      	bls.n	810b7b4 <memmove+0x10>
 810b7ae:	4284      	cmp	r4, r0
 810b7b0:	4623      	mov	r3, r4
 810b7b2:	d807      	bhi.n	810b7c4 <memmove+0x20>
 810b7b4:	1e43      	subs	r3, r0, #1
 810b7b6:	42a1      	cmp	r1, r4
 810b7b8:	d008      	beq.n	810b7cc <memmove+0x28>
 810b7ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 810b7be:	f803 2f01 	strb.w	r2, [r3, #1]!
 810b7c2:	e7f8      	b.n	810b7b6 <memmove+0x12>
 810b7c4:	4402      	add	r2, r0
 810b7c6:	4601      	mov	r1, r0
 810b7c8:	428a      	cmp	r2, r1
 810b7ca:	d100      	bne.n	810b7ce <memmove+0x2a>
 810b7cc:	bd10      	pop	{r4, pc}
 810b7ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810b7d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810b7d6:	e7f7      	b.n	810b7c8 <memmove+0x24>

0810b7d8 <__malloc_lock>:
 810b7d8:	4801      	ldr	r0, [pc, #4]	; (810b7e0 <__malloc_lock+0x8>)
 810b7da:	f7fe bdaa 	b.w	810a332 <__retarget_lock_acquire_recursive>
 810b7de:	bf00      	nop
 810b7e0:	100002f4 	.word	0x100002f4

0810b7e4 <__malloc_unlock>:
 810b7e4:	4801      	ldr	r0, [pc, #4]	; (810b7ec <__malloc_unlock+0x8>)
 810b7e6:	f7fe bda5 	b.w	810a334 <__retarget_lock_release_recursive>
 810b7ea:	bf00      	nop
 810b7ec:	100002f4 	.word	0x100002f4

0810b7f0 <_realloc_r>:
 810b7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b7f4:	4680      	mov	r8, r0
 810b7f6:	4614      	mov	r4, r2
 810b7f8:	460e      	mov	r6, r1
 810b7fa:	b921      	cbnz	r1, 810b806 <_realloc_r+0x16>
 810b7fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810b800:	4611      	mov	r1, r2
 810b802:	f7ff bb5b 	b.w	810aebc <_malloc_r>
 810b806:	b92a      	cbnz	r2, 810b814 <_realloc_r+0x24>
 810b808:	f7ff faec 	bl	810ade4 <_free_r>
 810b80c:	4625      	mov	r5, r4
 810b80e:	4628      	mov	r0, r5
 810b810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b814:	f000 f835 	bl	810b882 <_malloc_usable_size_r>
 810b818:	4284      	cmp	r4, r0
 810b81a:	4607      	mov	r7, r0
 810b81c:	d802      	bhi.n	810b824 <_realloc_r+0x34>
 810b81e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810b822:	d812      	bhi.n	810b84a <_realloc_r+0x5a>
 810b824:	4621      	mov	r1, r4
 810b826:	4640      	mov	r0, r8
 810b828:	f7ff fb48 	bl	810aebc <_malloc_r>
 810b82c:	4605      	mov	r5, r0
 810b82e:	2800      	cmp	r0, #0
 810b830:	d0ed      	beq.n	810b80e <_realloc_r+0x1e>
 810b832:	42bc      	cmp	r4, r7
 810b834:	4622      	mov	r2, r4
 810b836:	4631      	mov	r1, r6
 810b838:	bf28      	it	cs
 810b83a:	463a      	movcs	r2, r7
 810b83c:	f7fb fb0e 	bl	8106e5c <memcpy>
 810b840:	4631      	mov	r1, r6
 810b842:	4640      	mov	r0, r8
 810b844:	f7ff face 	bl	810ade4 <_free_r>
 810b848:	e7e1      	b.n	810b80e <_realloc_r+0x1e>
 810b84a:	4635      	mov	r5, r6
 810b84c:	e7df      	b.n	810b80e <_realloc_r+0x1e>
	...

0810b850 <_read_r>:
 810b850:	b538      	push	{r3, r4, r5, lr}
 810b852:	4d07      	ldr	r5, [pc, #28]	; (810b870 <_read_r+0x20>)
 810b854:	4604      	mov	r4, r0
 810b856:	4608      	mov	r0, r1
 810b858:	4611      	mov	r1, r2
 810b85a:	2200      	movs	r2, #0
 810b85c:	602a      	str	r2, [r5, #0]
 810b85e:	461a      	mov	r2, r3
 810b860:	f7f6 fab7 	bl	8101dd2 <_read>
 810b864:	1c43      	adds	r3, r0, #1
 810b866:	d102      	bne.n	810b86e <_read_r+0x1e>
 810b868:	682b      	ldr	r3, [r5, #0]
 810b86a:	b103      	cbz	r3, 810b86e <_read_r+0x1e>
 810b86c:	6023      	str	r3, [r4, #0]
 810b86e:	bd38      	pop	{r3, r4, r5, pc}
 810b870:	10000300 	.word	0x10000300

0810b874 <abort>:
 810b874:	b508      	push	{r3, lr}
 810b876:	2006      	movs	r0, #6
 810b878:	f000 f834 	bl	810b8e4 <raise>
 810b87c:	2001      	movs	r0, #1
 810b87e:	f7f6 fa9e 	bl	8101dbe <_exit>

0810b882 <_malloc_usable_size_r>:
 810b882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b886:	1f18      	subs	r0, r3, #4
 810b888:	2b00      	cmp	r3, #0
 810b88a:	bfbc      	itt	lt
 810b88c:	580b      	ldrlt	r3, [r1, r0]
 810b88e:	18c0      	addlt	r0, r0, r3
 810b890:	4770      	bx	lr

0810b892 <_raise_r>:
 810b892:	291f      	cmp	r1, #31
 810b894:	b538      	push	{r3, r4, r5, lr}
 810b896:	4604      	mov	r4, r0
 810b898:	460d      	mov	r5, r1
 810b89a:	d904      	bls.n	810b8a6 <_raise_r+0x14>
 810b89c:	2316      	movs	r3, #22
 810b89e:	6003      	str	r3, [r0, #0]
 810b8a0:	f04f 30ff 	mov.w	r0, #4294967295
 810b8a4:	bd38      	pop	{r3, r4, r5, pc}
 810b8a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810b8a8:	b112      	cbz	r2, 810b8b0 <_raise_r+0x1e>
 810b8aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810b8ae:	b94b      	cbnz	r3, 810b8c4 <_raise_r+0x32>
 810b8b0:	4620      	mov	r0, r4
 810b8b2:	f000 f831 	bl	810b918 <_getpid_r>
 810b8b6:	462a      	mov	r2, r5
 810b8b8:	4601      	mov	r1, r0
 810b8ba:	4620      	mov	r0, r4
 810b8bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b8c0:	f000 b818 	b.w	810b8f4 <_kill_r>
 810b8c4:	2b01      	cmp	r3, #1
 810b8c6:	d00a      	beq.n	810b8de <_raise_r+0x4c>
 810b8c8:	1c59      	adds	r1, r3, #1
 810b8ca:	d103      	bne.n	810b8d4 <_raise_r+0x42>
 810b8cc:	2316      	movs	r3, #22
 810b8ce:	6003      	str	r3, [r0, #0]
 810b8d0:	2001      	movs	r0, #1
 810b8d2:	e7e7      	b.n	810b8a4 <_raise_r+0x12>
 810b8d4:	2400      	movs	r4, #0
 810b8d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810b8da:	4628      	mov	r0, r5
 810b8dc:	4798      	blx	r3
 810b8de:	2000      	movs	r0, #0
 810b8e0:	e7e0      	b.n	810b8a4 <_raise_r+0x12>
	...

0810b8e4 <raise>:
 810b8e4:	4b02      	ldr	r3, [pc, #8]	; (810b8f0 <raise+0xc>)
 810b8e6:	4601      	mov	r1, r0
 810b8e8:	6818      	ldr	r0, [r3, #0]
 810b8ea:	f7ff bfd2 	b.w	810b892 <_raise_r>
 810b8ee:	bf00      	nop
 810b8f0:	1000001c 	.word	0x1000001c

0810b8f4 <_kill_r>:
 810b8f4:	b538      	push	{r3, r4, r5, lr}
 810b8f6:	4d07      	ldr	r5, [pc, #28]	; (810b914 <_kill_r+0x20>)
 810b8f8:	2300      	movs	r3, #0
 810b8fa:	4604      	mov	r4, r0
 810b8fc:	4608      	mov	r0, r1
 810b8fe:	4611      	mov	r1, r2
 810b900:	602b      	str	r3, [r5, #0]
 810b902:	f7f6 fa4c 	bl	8101d9e <_kill>
 810b906:	1c43      	adds	r3, r0, #1
 810b908:	d102      	bne.n	810b910 <_kill_r+0x1c>
 810b90a:	682b      	ldr	r3, [r5, #0]
 810b90c:	b103      	cbz	r3, 810b910 <_kill_r+0x1c>
 810b90e:	6023      	str	r3, [r4, #0]
 810b910:	bd38      	pop	{r3, r4, r5, pc}
 810b912:	bf00      	nop
 810b914:	10000300 	.word	0x10000300

0810b918 <_getpid_r>:
 810b918:	f7f6 ba39 	b.w	8101d8e <_getpid>

0810b91c <_init>:
 810b91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b91e:	bf00      	nop
 810b920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b922:	bc08      	pop	{r3}
 810b924:	469e      	mov	lr, r3
 810b926:	4770      	bx	lr

0810b928 <_fini>:
 810b928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b92a:	bf00      	nop
 810b92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b92e:	bc08      	pop	{r3}
 810b930:	469e      	mov	lr, r3
 810b932:	4770      	bx	lr
