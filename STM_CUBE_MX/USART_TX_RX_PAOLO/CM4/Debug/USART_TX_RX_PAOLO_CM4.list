
USART_TX_RX_PAOLO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000483c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08104adc  08104adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08104b6c  08104b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08104b74  08104b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08104b78  08104b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  10000000  08104b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c4  10000074  08104bf0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000138  08104bf0  00020138  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000115a5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f01  00000000  00000000  00031649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b28  00000000  00000000  00033550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a70  00000000  00000000  00034078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039227  00000000  00000000  00034ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000eb6a  00000000  00000000  0006dd0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017bf5b  00000000  00000000  0007c879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f87d4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000314c  00000000  00000000  001f8824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000074 	.word	0x10000074
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08104ac4 	.word	0x08104ac4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000078 	.word	0x10000078
 81002dc:	08104ac4 	.word	0x08104ac4

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_uldivmod>:
 8100380:	b953      	cbnz	r3, 8100398 <__aeabi_uldivmod+0x18>
 8100382:	b94a      	cbnz	r2, 8100398 <__aeabi_uldivmod+0x18>
 8100384:	2900      	cmp	r1, #0
 8100386:	bf08      	it	eq
 8100388:	2800      	cmpeq	r0, #0
 810038a:	bf1c      	itt	ne
 810038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8100390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8100394:	f000 b974 	b.w	8100680 <__aeabi_idiv0>
 8100398:	f1ad 0c08 	sub.w	ip, sp, #8
 810039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003a0:	f000 f806 	bl	81003b0 <__udivmoddi4>
 81003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003ac:	b004      	add	sp, #16
 81003ae:	4770      	bx	lr

081003b0 <__udivmoddi4>:
 81003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003b4:	9d08      	ldr	r5, [sp, #32]
 81003b6:	4604      	mov	r4, r0
 81003b8:	468e      	mov	lr, r1
 81003ba:	2b00      	cmp	r3, #0
 81003bc:	d14d      	bne.n	810045a <__udivmoddi4+0xaa>
 81003be:	428a      	cmp	r2, r1
 81003c0:	4694      	mov	ip, r2
 81003c2:	d969      	bls.n	8100498 <__udivmoddi4+0xe8>
 81003c4:	fab2 f282 	clz	r2, r2
 81003c8:	b152      	cbz	r2, 81003e0 <__udivmoddi4+0x30>
 81003ca:	fa01 f302 	lsl.w	r3, r1, r2
 81003ce:	f1c2 0120 	rsb	r1, r2, #32
 81003d2:	fa20 f101 	lsr.w	r1, r0, r1
 81003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 81003da:	ea41 0e03 	orr.w	lr, r1, r3
 81003de:	4094      	lsls	r4, r2
 81003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81003e4:	0c21      	lsrs	r1, r4, #16
 81003e6:	fbbe f6f8 	udiv	r6, lr, r8
 81003ea:	fa1f f78c 	uxth.w	r7, ip
 81003ee:	fb08 e316 	mls	r3, r8, r6, lr
 81003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 81003f6:	fb06 f107 	mul.w	r1, r6, r7
 81003fa:	4299      	cmp	r1, r3
 81003fc:	d90a      	bls.n	8100414 <__udivmoddi4+0x64>
 81003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8100402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8100406:	f080 811f 	bcs.w	8100648 <__udivmoddi4+0x298>
 810040a:	4299      	cmp	r1, r3
 810040c:	f240 811c 	bls.w	8100648 <__udivmoddi4+0x298>
 8100410:	3e02      	subs	r6, #2
 8100412:	4463      	add	r3, ip
 8100414:	1a5b      	subs	r3, r3, r1
 8100416:	b2a4      	uxth	r4, r4
 8100418:	fbb3 f0f8 	udiv	r0, r3, r8
 810041c:	fb08 3310 	mls	r3, r8, r0, r3
 8100420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100424:	fb00 f707 	mul.w	r7, r0, r7
 8100428:	42a7      	cmp	r7, r4
 810042a:	d90a      	bls.n	8100442 <__udivmoddi4+0x92>
 810042c:	eb1c 0404 	adds.w	r4, ip, r4
 8100430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100434:	f080 810a 	bcs.w	810064c <__udivmoddi4+0x29c>
 8100438:	42a7      	cmp	r7, r4
 810043a:	f240 8107 	bls.w	810064c <__udivmoddi4+0x29c>
 810043e:	4464      	add	r4, ip
 8100440:	3802      	subs	r0, #2
 8100442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100446:	1be4      	subs	r4, r4, r7
 8100448:	2600      	movs	r6, #0
 810044a:	b11d      	cbz	r5, 8100454 <__udivmoddi4+0xa4>
 810044c:	40d4      	lsrs	r4, r2
 810044e:	2300      	movs	r3, #0
 8100450:	e9c5 4300 	strd	r4, r3, [r5]
 8100454:	4631      	mov	r1, r6
 8100456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810045a:	428b      	cmp	r3, r1
 810045c:	d909      	bls.n	8100472 <__udivmoddi4+0xc2>
 810045e:	2d00      	cmp	r5, #0
 8100460:	f000 80ef 	beq.w	8100642 <__udivmoddi4+0x292>
 8100464:	2600      	movs	r6, #0
 8100466:	e9c5 0100 	strd	r0, r1, [r5]
 810046a:	4630      	mov	r0, r6
 810046c:	4631      	mov	r1, r6
 810046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100472:	fab3 f683 	clz	r6, r3
 8100476:	2e00      	cmp	r6, #0
 8100478:	d14a      	bne.n	8100510 <__udivmoddi4+0x160>
 810047a:	428b      	cmp	r3, r1
 810047c:	d302      	bcc.n	8100484 <__udivmoddi4+0xd4>
 810047e:	4282      	cmp	r2, r0
 8100480:	f200 80f9 	bhi.w	8100676 <__udivmoddi4+0x2c6>
 8100484:	1a84      	subs	r4, r0, r2
 8100486:	eb61 0303 	sbc.w	r3, r1, r3
 810048a:	2001      	movs	r0, #1
 810048c:	469e      	mov	lr, r3
 810048e:	2d00      	cmp	r5, #0
 8100490:	d0e0      	beq.n	8100454 <__udivmoddi4+0xa4>
 8100492:	e9c5 4e00 	strd	r4, lr, [r5]
 8100496:	e7dd      	b.n	8100454 <__udivmoddi4+0xa4>
 8100498:	b902      	cbnz	r2, 810049c <__udivmoddi4+0xec>
 810049a:	deff      	udf	#255	; 0xff
 810049c:	fab2 f282 	clz	r2, r2
 81004a0:	2a00      	cmp	r2, #0
 81004a2:	f040 8092 	bne.w	81005ca <__udivmoddi4+0x21a>
 81004a6:	eba1 010c 	sub.w	r1, r1, ip
 81004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81004ae:	fa1f fe8c 	uxth.w	lr, ip
 81004b2:	2601      	movs	r6, #1
 81004b4:	0c20      	lsrs	r0, r4, #16
 81004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 81004ba:	fb07 1113 	mls	r1, r7, r3, r1
 81004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 81004c2:	fb0e f003 	mul.w	r0, lr, r3
 81004c6:	4288      	cmp	r0, r1
 81004c8:	d908      	bls.n	81004dc <__udivmoddi4+0x12c>
 81004ca:	eb1c 0101 	adds.w	r1, ip, r1
 81004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 81004d2:	d202      	bcs.n	81004da <__udivmoddi4+0x12a>
 81004d4:	4288      	cmp	r0, r1
 81004d6:	f200 80cb 	bhi.w	8100670 <__udivmoddi4+0x2c0>
 81004da:	4643      	mov	r3, r8
 81004dc:	1a09      	subs	r1, r1, r0
 81004de:	b2a4      	uxth	r4, r4
 81004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 81004e4:	fb07 1110 	mls	r1, r7, r0, r1
 81004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 81004ec:	fb0e fe00 	mul.w	lr, lr, r0
 81004f0:	45a6      	cmp	lr, r4
 81004f2:	d908      	bls.n	8100506 <__udivmoddi4+0x156>
 81004f4:	eb1c 0404 	adds.w	r4, ip, r4
 81004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 81004fc:	d202      	bcs.n	8100504 <__udivmoddi4+0x154>
 81004fe:	45a6      	cmp	lr, r4
 8100500:	f200 80bb 	bhi.w	810067a <__udivmoddi4+0x2ca>
 8100504:	4608      	mov	r0, r1
 8100506:	eba4 040e 	sub.w	r4, r4, lr
 810050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 810050e:	e79c      	b.n	810044a <__udivmoddi4+0x9a>
 8100510:	f1c6 0720 	rsb	r7, r6, #32
 8100514:	40b3      	lsls	r3, r6
 8100516:	fa22 fc07 	lsr.w	ip, r2, r7
 810051a:	ea4c 0c03 	orr.w	ip, ip, r3
 810051e:	fa20 f407 	lsr.w	r4, r0, r7
 8100522:	fa01 f306 	lsl.w	r3, r1, r6
 8100526:	431c      	orrs	r4, r3
 8100528:	40f9      	lsrs	r1, r7
 810052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 810052e:	fa00 f306 	lsl.w	r3, r0, r6
 8100532:	fbb1 f8f9 	udiv	r8, r1, r9
 8100536:	0c20      	lsrs	r0, r4, #16
 8100538:	fa1f fe8c 	uxth.w	lr, ip
 810053c:	fb09 1118 	mls	r1, r9, r8, r1
 8100540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100544:	fb08 f00e 	mul.w	r0, r8, lr
 8100548:	4288      	cmp	r0, r1
 810054a:	fa02 f206 	lsl.w	r2, r2, r6
 810054e:	d90b      	bls.n	8100568 <__udivmoddi4+0x1b8>
 8100550:	eb1c 0101 	adds.w	r1, ip, r1
 8100554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8100558:	f080 8088 	bcs.w	810066c <__udivmoddi4+0x2bc>
 810055c:	4288      	cmp	r0, r1
 810055e:	f240 8085 	bls.w	810066c <__udivmoddi4+0x2bc>
 8100562:	f1a8 0802 	sub.w	r8, r8, #2
 8100566:	4461      	add	r1, ip
 8100568:	1a09      	subs	r1, r1, r0
 810056a:	b2a4      	uxth	r4, r4
 810056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8100570:	fb09 1110 	mls	r1, r9, r0, r1
 8100574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100578:	fb00 fe0e 	mul.w	lr, r0, lr
 810057c:	458e      	cmp	lr, r1
 810057e:	d908      	bls.n	8100592 <__udivmoddi4+0x1e2>
 8100580:	eb1c 0101 	adds.w	r1, ip, r1
 8100584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8100588:	d26c      	bcs.n	8100664 <__udivmoddi4+0x2b4>
 810058a:	458e      	cmp	lr, r1
 810058c:	d96a      	bls.n	8100664 <__udivmoddi4+0x2b4>
 810058e:	3802      	subs	r0, #2
 8100590:	4461      	add	r1, ip
 8100592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8100596:	fba0 9402 	umull	r9, r4, r0, r2
 810059a:	eba1 010e 	sub.w	r1, r1, lr
 810059e:	42a1      	cmp	r1, r4
 81005a0:	46c8      	mov	r8, r9
 81005a2:	46a6      	mov	lr, r4
 81005a4:	d356      	bcc.n	8100654 <__udivmoddi4+0x2a4>
 81005a6:	d053      	beq.n	8100650 <__udivmoddi4+0x2a0>
 81005a8:	b15d      	cbz	r5, 81005c2 <__udivmoddi4+0x212>
 81005aa:	ebb3 0208 	subs.w	r2, r3, r8
 81005ae:	eb61 010e 	sbc.w	r1, r1, lr
 81005b2:	fa01 f707 	lsl.w	r7, r1, r7
 81005b6:	fa22 f306 	lsr.w	r3, r2, r6
 81005ba:	40f1      	lsrs	r1, r6
 81005bc:	431f      	orrs	r7, r3
 81005be:	e9c5 7100 	strd	r7, r1, [r5]
 81005c2:	2600      	movs	r6, #0
 81005c4:	4631      	mov	r1, r6
 81005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81005ca:	f1c2 0320 	rsb	r3, r2, #32
 81005ce:	40d8      	lsrs	r0, r3
 81005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 81005d4:	fa21 f303 	lsr.w	r3, r1, r3
 81005d8:	4091      	lsls	r1, r2
 81005da:	4301      	orrs	r1, r0
 81005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81005e0:	fa1f fe8c 	uxth.w	lr, ip
 81005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 81005e8:	fb07 3610 	mls	r6, r7, r0, r3
 81005ec:	0c0b      	lsrs	r3, r1, #16
 81005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 81005f2:	fb00 f60e 	mul.w	r6, r0, lr
 81005f6:	429e      	cmp	r6, r3
 81005f8:	fa04 f402 	lsl.w	r4, r4, r2
 81005fc:	d908      	bls.n	8100610 <__udivmoddi4+0x260>
 81005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8100602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8100606:	d22f      	bcs.n	8100668 <__udivmoddi4+0x2b8>
 8100608:	429e      	cmp	r6, r3
 810060a:	d92d      	bls.n	8100668 <__udivmoddi4+0x2b8>
 810060c:	3802      	subs	r0, #2
 810060e:	4463      	add	r3, ip
 8100610:	1b9b      	subs	r3, r3, r6
 8100612:	b289      	uxth	r1, r1
 8100614:	fbb3 f6f7 	udiv	r6, r3, r7
 8100618:	fb07 3316 	mls	r3, r7, r6, r3
 810061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100620:	fb06 f30e 	mul.w	r3, r6, lr
 8100624:	428b      	cmp	r3, r1
 8100626:	d908      	bls.n	810063a <__udivmoddi4+0x28a>
 8100628:	eb1c 0101 	adds.w	r1, ip, r1
 810062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8100630:	d216      	bcs.n	8100660 <__udivmoddi4+0x2b0>
 8100632:	428b      	cmp	r3, r1
 8100634:	d914      	bls.n	8100660 <__udivmoddi4+0x2b0>
 8100636:	3e02      	subs	r6, #2
 8100638:	4461      	add	r1, ip
 810063a:	1ac9      	subs	r1, r1, r3
 810063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100640:	e738      	b.n	81004b4 <__udivmoddi4+0x104>
 8100642:	462e      	mov	r6, r5
 8100644:	4628      	mov	r0, r5
 8100646:	e705      	b.n	8100454 <__udivmoddi4+0xa4>
 8100648:	4606      	mov	r6, r0
 810064a:	e6e3      	b.n	8100414 <__udivmoddi4+0x64>
 810064c:	4618      	mov	r0, r3
 810064e:	e6f8      	b.n	8100442 <__udivmoddi4+0x92>
 8100650:	454b      	cmp	r3, r9
 8100652:	d2a9      	bcs.n	81005a8 <__udivmoddi4+0x1f8>
 8100654:	ebb9 0802 	subs.w	r8, r9, r2
 8100658:	eb64 0e0c 	sbc.w	lr, r4, ip
 810065c:	3801      	subs	r0, #1
 810065e:	e7a3      	b.n	81005a8 <__udivmoddi4+0x1f8>
 8100660:	4646      	mov	r6, r8
 8100662:	e7ea      	b.n	810063a <__udivmoddi4+0x28a>
 8100664:	4620      	mov	r0, r4
 8100666:	e794      	b.n	8100592 <__udivmoddi4+0x1e2>
 8100668:	4640      	mov	r0, r8
 810066a:	e7d1      	b.n	8100610 <__udivmoddi4+0x260>
 810066c:	46d0      	mov	r8, sl
 810066e:	e77b      	b.n	8100568 <__udivmoddi4+0x1b8>
 8100670:	3b02      	subs	r3, #2
 8100672:	4461      	add	r1, ip
 8100674:	e732      	b.n	81004dc <__udivmoddi4+0x12c>
 8100676:	4630      	mov	r0, r6
 8100678:	e709      	b.n	810048e <__udivmoddi4+0xde>
 810067a:	4464      	add	r4, ip
 810067c:	3802      	subs	r0, #2
 810067e:	e742      	b.n	8100506 <__udivmoddi4+0x156>

08100680 <__aeabi_idiv0>:
 8100680:	4770      	bx	lr
 8100682:	bf00      	nop

08100684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100684:	b480      	push	{r7}
 8100686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100688:	4b09      	ldr	r3, [pc, #36]	; (81006b0 <SystemInit+0x2c>)
 810068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810068e:	4a08      	ldr	r2, [pc, #32]	; (81006b0 <SystemInit+0x2c>)
 8100690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100698:	4b05      	ldr	r3, [pc, #20]	; (81006b0 <SystemInit+0x2c>)
 810069a:	691b      	ldr	r3, [r3, #16]
 810069c:	4a04      	ldr	r2, [pc, #16]	; (81006b0 <SystemInit+0x2c>)
 810069e:	f043 0310 	orr.w	r3, r3, #16
 81006a2:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81006a4:	bf00      	nop
 81006a6:	46bd      	mov	sp, r7
 81006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006ac:	4770      	bx	lr
 81006ae:	bf00      	nop
 81006b0:	e000ed00 	.word	0xe000ed00

081006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81006b4:	b580      	push	{r7, lr}
 81006b6:	b08e      	sub	sp, #56	; 0x38
 81006b8:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81006ba:	4b33      	ldr	r3, [pc, #204]	; (8100788 <main+0xd4>)
 81006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006c0:	4a31      	ldr	r2, [pc, #196]	; (8100788 <main+0xd4>)
 81006c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81006c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006ca:	4b2f      	ldr	r3, [pc, #188]	; (8100788 <main+0xd4>)
 81006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81006d4:	637b      	str	r3, [r7, #52]	; 0x34
 81006d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006d8:	2001      	movs	r0, #1
 81006da:	f000 fd9f 	bl	810121c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81006de:	f000 fe29 	bl	8101334 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81006e2:	2201      	movs	r2, #1
 81006e4:	2102      	movs	r1, #2
 81006e6:	2000      	movs	r0, #0
 81006e8:	f000 fdaa 	bl	8101240 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006ec:	4b27      	ldr	r3, [pc, #156]	; (810078c <main+0xd8>)
 81006ee:	681b      	ldr	r3, [r3, #0]
 81006f0:	091b      	lsrs	r3, r3, #4
 81006f2:	f003 030f 	and.w	r3, r3, #15
 81006f6:	2b07      	cmp	r3, #7
 81006f8:	d108      	bne.n	810070c <main+0x58>
 81006fa:	4b25      	ldr	r3, [pc, #148]	; (8100790 <main+0xdc>)
 81006fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100700:	4a23      	ldr	r2, [pc, #140]	; (8100790 <main+0xdc>)
 8100702:	f043 0301 	orr.w	r3, r3, #1
 8100706:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810070a:	e007      	b.n	810071c <main+0x68>
 810070c:	4b20      	ldr	r3, [pc, #128]	; (8100790 <main+0xdc>)
 810070e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100712:	4a1f      	ldr	r2, [pc, #124]	; (8100790 <main+0xdc>)
 8100714:	f043 0301 	orr.w	r3, r3, #1
 8100718:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810071c:	f000 fa22 	bl	8100b64 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100720:	f000 f888 	bl	8100834 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8100724:	f000 f83a 	bl	810079c <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //TEST NEW FUNCTION WITH UART
	  uint8_t msg_t[35] = {'\0'};
 8100728:	2300      	movs	r3, #0
 810072a:	603b      	str	r3, [r7, #0]
 810072c:	1d3b      	adds	r3, r7, #4
 810072e:	221f      	movs	r2, #31
 8100730:	2100      	movs	r1, #0
 8100732:	4618      	mov	r0, r3
 8100734:	f003 fd50 	bl	81041d8 <memset>
	  uint8_t msg_r[15] = {'\0'};
 8100738:	2300      	movs	r3, #0
 810073a:	627b      	str	r3, [r7, #36]	; 0x24
 810073c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8100740:	2200      	movs	r2, #0
 8100742:	601a      	str	r2, [r3, #0]
 8100744:	605a      	str	r2, [r3, #4]
 8100746:	f8c3 2007 	str.w	r2, [r3, #7]
	  sprintf(msg_t, "Insert max %d char:", sizeof(msg_r)-1);
 810074a:	463b      	mov	r3, r7
 810074c:	220e      	movs	r2, #14
 810074e:	4911      	ldr	r1, [pc, #68]	; (8100794 <main+0xe0>)
 8100750:	4618      	mov	r0, r3
 8100752:	f003 fd49 	bl	81041e8 <siprintf>
	  Test_COM_Tx(msg_t);
 8100756:	463b      	mov	r3, r7
 8100758:	4618      	mov	r0, r3
 810075a:	f000 f885 	bl	8100868 <Test_COM_Tx>
	  Test_COM_Rx(msg_r,sizeof(msg_r));
 810075e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100762:	210f      	movs	r1, #15
 8100764:	4618      	mov	r0, r3
 8100766:	f000 f8ab 	bl	81008c0 <Test_COM_Rx>
	  sprintf(msg_t, "Written msg:");
 810076a:	463b      	mov	r3, r7
 810076c:	490a      	ldr	r1, [pc, #40]	; (8100798 <main+0xe4>)
 810076e:	4618      	mov	r0, r3
 8100770:	f003 fd3a 	bl	81041e8 <siprintf>
	  Test_COM_Tx(msg_t);
 8100774:	463b      	mov	r3, r7
 8100776:	4618      	mov	r0, r3
 8100778:	f000 f876 	bl	8100868 <Test_COM_Tx>
	  Test_COM_Tx(msg_r);
 810077c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100780:	4618      	mov	r0, r3
 8100782:	f000 f871 	bl	8100868 <Test_COM_Tx>
  {
 8100786:	e7cf      	b.n	8100728 <main+0x74>
 8100788:	58024400 	.word	0x58024400
 810078c:	e000ed00 	.word	0xe000ed00
 8100790:	58026400 	.word	0x58026400
 8100794:	08104adc 	.word	0x08104adc
 8100798:	08104af0 	.word	0x08104af0

0810079c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 810079c:	b580      	push	{r7, lr}
 810079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81007a0:	4b22      	ldr	r3, [pc, #136]	; (810082c <MX_USART3_UART_Init+0x90>)
 81007a2:	4a23      	ldr	r2, [pc, #140]	; (8100830 <MX_USART3_UART_Init+0x94>)
 81007a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81007a6:	4b21      	ldr	r3, [pc, #132]	; (810082c <MX_USART3_UART_Init+0x90>)
 81007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81007ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81007ae:	4b1f      	ldr	r3, [pc, #124]	; (810082c <MX_USART3_UART_Init+0x90>)
 81007b0:	2200      	movs	r2, #0
 81007b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81007b4:	4b1d      	ldr	r3, [pc, #116]	; (810082c <MX_USART3_UART_Init+0x90>)
 81007b6:	2200      	movs	r2, #0
 81007b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81007ba:	4b1c      	ldr	r3, [pc, #112]	; (810082c <MX_USART3_UART_Init+0x90>)
 81007bc:	2200      	movs	r2, #0
 81007be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81007c0:	4b1a      	ldr	r3, [pc, #104]	; (810082c <MX_USART3_UART_Init+0x90>)
 81007c2:	220c      	movs	r2, #12
 81007c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81007c6:	4b19      	ldr	r3, [pc, #100]	; (810082c <MX_USART3_UART_Init+0x90>)
 81007c8:	2200      	movs	r2, #0
 81007ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81007cc:	4b17      	ldr	r3, [pc, #92]	; (810082c <MX_USART3_UART_Init+0x90>)
 81007ce:	2200      	movs	r2, #0
 81007d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81007d2:	4b16      	ldr	r3, [pc, #88]	; (810082c <MX_USART3_UART_Init+0x90>)
 81007d4:	2200      	movs	r2, #0
 81007d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81007d8:	4b14      	ldr	r3, [pc, #80]	; (810082c <MX_USART3_UART_Init+0x90>)
 81007da:	2200      	movs	r2, #0
 81007dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81007de:	4b13      	ldr	r3, [pc, #76]	; (810082c <MX_USART3_UART_Init+0x90>)
 81007e0:	2200      	movs	r2, #0
 81007e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81007e4:	4811      	ldr	r0, [pc, #68]	; (810082c <MX_USART3_UART_Init+0x90>)
 81007e6:	f002 faf3 	bl	8102dd0 <HAL_UART_Init>
 81007ea:	4603      	mov	r3, r0
 81007ec:	2b00      	cmp	r3, #0
 81007ee:	d001      	beq.n	81007f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81007f0:	f000 f8a8 	bl	8100944 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81007f4:	2100      	movs	r1, #0
 81007f6:	480d      	ldr	r0, [pc, #52]	; (810082c <MX_USART3_UART_Init+0x90>)
 81007f8:	f003 fbfa 	bl	8103ff0 <HAL_UARTEx_SetTxFifoThreshold>
 81007fc:	4603      	mov	r3, r0
 81007fe:	2b00      	cmp	r3, #0
 8100800:	d001      	beq.n	8100806 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100802:	f000 f89f 	bl	8100944 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100806:	2100      	movs	r1, #0
 8100808:	4808      	ldr	r0, [pc, #32]	; (810082c <MX_USART3_UART_Init+0x90>)
 810080a:	f003 fc2f 	bl	810406c <HAL_UARTEx_SetRxFifoThreshold>
 810080e:	4603      	mov	r3, r0
 8100810:	2b00      	cmp	r3, #0
 8100812:	d001      	beq.n	8100818 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100814:	f000 f896 	bl	8100944 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100818:	4804      	ldr	r0, [pc, #16]	; (810082c <MX_USART3_UART_Init+0x90>)
 810081a:	f003 fbb0 	bl	8103f7e <HAL_UARTEx_DisableFifoMode>
 810081e:	4603      	mov	r3, r0
 8100820:	2b00      	cmp	r3, #0
 8100822:	d001      	beq.n	8100828 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100824:	f000 f88e 	bl	8100944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100828:	bf00      	nop
 810082a:	bd80      	pop	{r7, pc}
 810082c:	10000090 	.word	0x10000090
 8100830:	40004800 	.word	0x40004800

08100834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100834:	b480      	push	{r7}
 8100836:	b083      	sub	sp, #12
 8100838:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810083a:	4b0a      	ldr	r3, [pc, #40]	; (8100864 <MX_GPIO_Init+0x30>)
 810083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100840:	4a08      	ldr	r2, [pc, #32]	; (8100864 <MX_GPIO_Init+0x30>)
 8100842:	f043 0308 	orr.w	r3, r3, #8
 8100846:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810084a:	4b06      	ldr	r3, [pc, #24]	; (8100864 <MX_GPIO_Init+0x30>)
 810084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100850:	f003 0308 	and.w	r3, r3, #8
 8100854:	607b      	str	r3, [r7, #4]
 8100856:	687b      	ldr	r3, [r7, #4]

}
 8100858:	bf00      	nop
 810085a:	370c      	adds	r7, #12
 810085c:	46bd      	mov	sp, r7
 810085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100862:	4770      	bx	lr
 8100864:	58024400 	.word	0x58024400

08100868 <Test_COM_Tx>:

/* USER CODE BEGIN 4 */

void Test_COM_Tx(uint8_t* msg){
 8100868:	b580      	push	{r7, lr}
 810086a:	b084      	sub	sp, #16
 810086c:	af00      	add	r7, sp, #0
 810086e:	6078      	str	r0, [r7, #4]
	//Transmit string till \0
	//max value for timeout
	uint16_t timeout = 0xFFFF;
 8100870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8100874:	817b      	strh	r3, [r7, #10]
	int i=0;
 8100876:	2300      	movs	r3, #0
 8100878:	60fb      	str	r3, [r7, #12]
	while(msg[i]!='\0'){
 810087a:	e00a      	b.n	8100892 <Test_COM_Tx+0x2a>
		HAL_UART_Transmit(&huart3, &msg[i], 1, timeout);
 810087c:	68fb      	ldr	r3, [r7, #12]
 810087e:	687a      	ldr	r2, [r7, #4]
 8100880:	18d1      	adds	r1, r2, r3
 8100882:	897b      	ldrh	r3, [r7, #10]
 8100884:	2201      	movs	r2, #1
 8100886:	480d      	ldr	r0, [pc, #52]	; (81008bc <Test_COM_Tx+0x54>)
 8100888:	f002 faf2 	bl	8102e70 <HAL_UART_Transmit>
		i++;
 810088c:	68fb      	ldr	r3, [r7, #12]
 810088e:	3301      	adds	r3, #1
 8100890:	60fb      	str	r3, [r7, #12]
	while(msg[i]!='\0'){
 8100892:	68fb      	ldr	r3, [r7, #12]
 8100894:	687a      	ldr	r2, [r7, #4]
 8100896:	4413      	add	r3, r2
 8100898:	781b      	ldrb	r3, [r3, #0]
 810089a:	2b00      	cmp	r3, #0
 810089c:	d1ee      	bne.n	810087c <Test_COM_Tx+0x14>
	}
	//Add end of line \r\n
	uint8_t eol [2]= "\r\n";
 810089e:	f640 230d 	movw	r3, #2573	; 0xa0d
 81008a2:	813b      	strh	r3, [r7, #8]
	HAL_UART_Transmit(&huart3, eol, sizeof(eol), timeout);
 81008a4:	897b      	ldrh	r3, [r7, #10]
 81008a6:	f107 0108 	add.w	r1, r7, #8
 81008aa:	2202      	movs	r2, #2
 81008ac:	4803      	ldr	r0, [pc, #12]	; (81008bc <Test_COM_Tx+0x54>)
 81008ae:	f002 fadf 	bl	8102e70 <HAL_UART_Transmit>
}
 81008b2:	bf00      	nop
 81008b4:	3710      	adds	r7, #16
 81008b6:	46bd      	mov	sp, r7
 81008b8:	bd80      	pop	{r7, pc}
 81008ba:	bf00      	nop
 81008bc:	10000090 	.word	0x10000090

081008c0 <Test_COM_Rx>:



void Test_COM_Rx(uint8_t* msg, uint32_t max_size){
 81008c0:	b580      	push	{r7, lr}
 81008c2:	b086      	sub	sp, #24
 81008c4:	af00      	add	r7, sp, #0
 81008c6:	6078      	str	r0, [r7, #4]
 81008c8:	6039      	str	r1, [r7, #0]
	//Stop read after max_size-1 (dim array + \0 end string) or after \r\n
	//Discard \r\n (NB receive only \r}
	//max value for timeout

	uint16_t timeout = 0xFFFF;
 81008ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81008ce:	827b      	strh	r3, [r7, #18]
	uint8_t app = '/0';
 81008d0:	2330      	movs	r3, #48	; 0x30
 81008d2:	747b      	strb	r3, [r7, #17]

	int i=0;
 81008d4:	2300      	movs	r3, #0
 81008d6:	617b      	str	r3, [r7, #20]

	while(app!='\r' && i<max_size-1){
 81008d8:	e018      	b.n	810090c <Test_COM_Rx+0x4c>
		HAL_UART_Receive(&huart3, &app, 1, timeout);
 81008da:	8a7b      	ldrh	r3, [r7, #18]
 81008dc:	f107 0111 	add.w	r1, r7, #17
 81008e0:	2201      	movs	r2, #1
 81008e2:	4817      	ldr	r0, [pc, #92]	; (8100940 <Test_COM_Rx+0x80>)
 81008e4:	f002 fb5a 	bl	8102f9c <HAL_UART_Receive>
		//Echo
		HAL_UART_Transmit(&huart3, &app, 1, timeout);
 81008e8:	8a7b      	ldrh	r3, [r7, #18]
 81008ea:	f107 0111 	add.w	r1, r7, #17
 81008ee:	2201      	movs	r2, #1
 81008f0:	4813      	ldr	r0, [pc, #76]	; (8100940 <Test_COM_Rx+0x80>)
 81008f2:	f002 fabd 	bl	8102e70 <HAL_UART_Transmit>
		if (app !='\r'){
 81008f6:	7c7b      	ldrb	r3, [r7, #17]
 81008f8:	2b0d      	cmp	r3, #13
 81008fa:	d004      	beq.n	8100906 <Test_COM_Rx+0x46>
			msg[i] = app;
 81008fc:	697b      	ldr	r3, [r7, #20]
 81008fe:	687a      	ldr	r2, [r7, #4]
 8100900:	4413      	add	r3, r2
 8100902:	7c7a      	ldrb	r2, [r7, #17]
 8100904:	701a      	strb	r2, [r3, #0]
		}
		i++;
 8100906:	697b      	ldr	r3, [r7, #20]
 8100908:	3301      	adds	r3, #1
 810090a:	617b      	str	r3, [r7, #20]
	while(app!='\r' && i<max_size-1){
 810090c:	7c7b      	ldrb	r3, [r7, #17]
 810090e:	2b0d      	cmp	r3, #13
 8100910:	d004      	beq.n	810091c <Test_COM_Rx+0x5c>
 8100912:	683b      	ldr	r3, [r7, #0]
 8100914:	1e5a      	subs	r2, r3, #1
 8100916:	697b      	ldr	r3, [r7, #20]
 8100918:	429a      	cmp	r2, r3
 810091a:	d8de      	bhi.n	81008da <Test_COM_Rx+0x1a>
	}

	//put end string

	msg[i]='\0';
 810091c:	697b      	ldr	r3, [r7, #20]
 810091e:	687a      	ldr	r2, [r7, #4]
 8100920:	4413      	add	r3, r2
 8100922:	2200      	movs	r2, #0
 8100924:	701a      	strb	r2, [r3, #0]
	//{Add end of line \n
	uint8_t eol [2]= "\n";
 8100926:	230a      	movs	r3, #10
 8100928:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, eol, sizeof(eol), timeout);
 810092a:	8a7b      	ldrh	r3, [r7, #18]
 810092c:	f107 010c 	add.w	r1, r7, #12
 8100930:	2202      	movs	r2, #2
 8100932:	4803      	ldr	r0, [pc, #12]	; (8100940 <Test_COM_Rx+0x80>)
 8100934:	f002 fa9c 	bl	8102e70 <HAL_UART_Transmit>

}
 8100938:	bf00      	nop
 810093a:	3718      	adds	r7, #24
 810093c:	46bd      	mov	sp, r7
 810093e:	bd80      	pop	{r7, pc}
 8100940:	10000090 	.word	0x10000090

08100944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100944:	b480      	push	{r7}
 8100946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100948:	b672      	cpsid	i
}
 810094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810094c:	e7fe      	b.n	810094c <Error_Handler+0x8>
	...

08100950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100950:	b480      	push	{r7}
 8100952:	b083      	sub	sp, #12
 8100954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100956:	4b0a      	ldr	r3, [pc, #40]	; (8100980 <HAL_MspInit+0x30>)
 8100958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810095c:	4a08      	ldr	r2, [pc, #32]	; (8100980 <HAL_MspInit+0x30>)
 810095e:	f043 0302 	orr.w	r3, r3, #2
 8100962:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100966:	4b06      	ldr	r3, [pc, #24]	; (8100980 <HAL_MspInit+0x30>)
 8100968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810096c:	f003 0302 	and.w	r3, r3, #2
 8100970:	607b      	str	r3, [r7, #4]
 8100972:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100974:	bf00      	nop
 8100976:	370c      	adds	r7, #12
 8100978:	46bd      	mov	sp, r7
 810097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810097e:	4770      	bx	lr
 8100980:	58024400 	.word	0x58024400

08100984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8100984:	b580      	push	{r7, lr}
 8100986:	b0b8      	sub	sp, #224	; 0xe0
 8100988:	af00      	add	r7, sp, #0
 810098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810098c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100990:	2200      	movs	r2, #0
 8100992:	601a      	str	r2, [r3, #0]
 8100994:	605a      	str	r2, [r3, #4]
 8100996:	609a      	str	r2, [r3, #8]
 8100998:	60da      	str	r2, [r3, #12]
 810099a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810099c:	f107 0310 	add.w	r3, r7, #16
 81009a0:	22bc      	movs	r2, #188	; 0xbc
 81009a2:	2100      	movs	r1, #0
 81009a4:	4618      	mov	r0, r3
 81009a6:	f003 fc17 	bl	81041d8 <memset>
  if(huart->Instance==USART3)
 81009aa:	687b      	ldr	r3, [r7, #4]
 81009ac:	681b      	ldr	r3, [r3, #0]
 81009ae:	4a25      	ldr	r2, [pc, #148]	; (8100a44 <HAL_UART_MspInit+0xc0>)
 81009b0:	4293      	cmp	r3, r2
 81009b2:	d142      	bne.n	8100a3a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81009b4:	2302      	movs	r3, #2
 81009b6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81009b8:	2300      	movs	r3, #0
 81009ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81009be:	f107 0310 	add.w	r3, r7, #16
 81009c2:	4618      	mov	r0, r3
 81009c4:	f000 fe9c 	bl	8101700 <HAL_RCCEx_PeriphCLKConfig>
 81009c8:	4603      	mov	r3, r0
 81009ca:	2b00      	cmp	r3, #0
 81009cc:	d001      	beq.n	81009d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 81009ce:	f7ff ffb9 	bl	8100944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 81009d2:	4b1d      	ldr	r3, [pc, #116]	; (8100a48 <HAL_UART_MspInit+0xc4>)
 81009d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81009d8:	4a1b      	ldr	r2, [pc, #108]	; (8100a48 <HAL_UART_MspInit+0xc4>)
 81009da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81009de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81009e2:	4b19      	ldr	r3, [pc, #100]	; (8100a48 <HAL_UART_MspInit+0xc4>)
 81009e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81009e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81009ec:	60fb      	str	r3, [r7, #12]
 81009ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81009f0:	4b15      	ldr	r3, [pc, #84]	; (8100a48 <HAL_UART_MspInit+0xc4>)
 81009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81009f6:	4a14      	ldr	r2, [pc, #80]	; (8100a48 <HAL_UART_MspInit+0xc4>)
 81009f8:	f043 0308 	orr.w	r3, r3, #8
 81009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a00:	4b11      	ldr	r3, [pc, #68]	; (8100a48 <HAL_UART_MspInit+0xc4>)
 8100a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a06:	f003 0308 	and.w	r3, r3, #8
 8100a0a:	60bb      	str	r3, [r7, #8]
 8100a0c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8100a0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8100a12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100a16:	2302      	movs	r3, #2
 8100a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100a1c:	2300      	movs	r3, #0
 8100a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a22:	2300      	movs	r3, #0
 8100a24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8100a28:	2307      	movs	r3, #7
 8100a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100a2e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100a32:	4619      	mov	r1, r3
 8100a34:	4805      	ldr	r0, [pc, #20]	; (8100a4c <HAL_UART_MspInit+0xc8>)
 8100a36:	f000 fa41 	bl	8100ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8100a3a:	bf00      	nop
 8100a3c:	37e0      	adds	r7, #224	; 0xe0
 8100a3e:	46bd      	mov	sp, r7
 8100a40:	bd80      	pop	{r7, pc}
 8100a42:	bf00      	nop
 8100a44:	40004800 	.word	0x40004800
 8100a48:	58024400 	.word	0x58024400
 8100a4c:	58020c00 	.word	0x58020c00

08100a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100a50:	b480      	push	{r7}
 8100a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100a54:	e7fe      	b.n	8100a54 <NMI_Handler+0x4>

08100a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100a56:	b480      	push	{r7}
 8100a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100a5a:	e7fe      	b.n	8100a5a <HardFault_Handler+0x4>

08100a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100a5c:	b480      	push	{r7}
 8100a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100a60:	e7fe      	b.n	8100a60 <MemManage_Handler+0x4>

08100a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100a62:	b480      	push	{r7}
 8100a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100a66:	e7fe      	b.n	8100a66 <BusFault_Handler+0x4>

08100a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100a68:	b480      	push	{r7}
 8100a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100a6c:	e7fe      	b.n	8100a6c <UsageFault_Handler+0x4>

08100a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100a6e:	b480      	push	{r7}
 8100a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100a72:	bf00      	nop
 8100a74:	46bd      	mov	sp, r7
 8100a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a7a:	4770      	bx	lr

08100a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100a7c:	b480      	push	{r7}
 8100a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100a80:	bf00      	nop
 8100a82:	46bd      	mov	sp, r7
 8100a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a88:	4770      	bx	lr

08100a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100a8a:	b480      	push	{r7}
 8100a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100a8e:	bf00      	nop
 8100a90:	46bd      	mov	sp, r7
 8100a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a96:	4770      	bx	lr

08100a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100a98:	b580      	push	{r7, lr}
 8100a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100a9c:	f000 f8f6 	bl	8100c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100aa0:	bf00      	nop
 8100aa2:	bd80      	pop	{r7, pc}

08100aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100aa4:	b580      	push	{r7, lr}
 8100aa6:	b086      	sub	sp, #24
 8100aa8:	af00      	add	r7, sp, #0
 8100aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100aac:	4a14      	ldr	r2, [pc, #80]	; (8100b00 <_sbrk+0x5c>)
 8100aae:	4b15      	ldr	r3, [pc, #84]	; (8100b04 <_sbrk+0x60>)
 8100ab0:	1ad3      	subs	r3, r2, r3
 8100ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100ab4:	697b      	ldr	r3, [r7, #20]
 8100ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100ab8:	4b13      	ldr	r3, [pc, #76]	; (8100b08 <_sbrk+0x64>)
 8100aba:	681b      	ldr	r3, [r3, #0]
 8100abc:	2b00      	cmp	r3, #0
 8100abe:	d102      	bne.n	8100ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100ac0:	4b11      	ldr	r3, [pc, #68]	; (8100b08 <_sbrk+0x64>)
 8100ac2:	4a12      	ldr	r2, [pc, #72]	; (8100b0c <_sbrk+0x68>)
 8100ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100ac6:	4b10      	ldr	r3, [pc, #64]	; (8100b08 <_sbrk+0x64>)
 8100ac8:	681a      	ldr	r2, [r3, #0]
 8100aca:	687b      	ldr	r3, [r7, #4]
 8100acc:	4413      	add	r3, r2
 8100ace:	693a      	ldr	r2, [r7, #16]
 8100ad0:	429a      	cmp	r2, r3
 8100ad2:	d207      	bcs.n	8100ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8100ad4:	f003 fb56 	bl	8104184 <__errno>
 8100ad8:	4603      	mov	r3, r0
 8100ada:	220c      	movs	r2, #12
 8100adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8100ae2:	e009      	b.n	8100af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8100ae4:	4b08      	ldr	r3, [pc, #32]	; (8100b08 <_sbrk+0x64>)
 8100ae6:	681b      	ldr	r3, [r3, #0]
 8100ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100aea:	4b07      	ldr	r3, [pc, #28]	; (8100b08 <_sbrk+0x64>)
 8100aec:	681a      	ldr	r2, [r3, #0]
 8100aee:	687b      	ldr	r3, [r7, #4]
 8100af0:	4413      	add	r3, r2
 8100af2:	4a05      	ldr	r2, [pc, #20]	; (8100b08 <_sbrk+0x64>)
 8100af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100af6:	68fb      	ldr	r3, [r7, #12]
}
 8100af8:	4618      	mov	r0, r3
 8100afa:	3718      	adds	r7, #24
 8100afc:	46bd      	mov	sp, r7
 8100afe:	bd80      	pop	{r7, pc}
 8100b00:	10048000 	.word	0x10048000
 8100b04:	00000400 	.word	0x00000400
 8100b08:	10000120 	.word	0x10000120
 8100b0c:	10000138 	.word	0x10000138

08100b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100b48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100b14:	f7ff fdb6 	bl	8100684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100b18:	480c      	ldr	r0, [pc, #48]	; (8100b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100b1a:	490d      	ldr	r1, [pc, #52]	; (8100b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100b1c:	4a0d      	ldr	r2, [pc, #52]	; (8100b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100b20:	e002      	b.n	8100b28 <LoopCopyDataInit>

08100b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100b26:	3304      	adds	r3, #4

08100b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100b2c:	d3f9      	bcc.n	8100b22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100b2e:	4a0a      	ldr	r2, [pc, #40]	; (8100b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100b30:	4c0a      	ldr	r4, [pc, #40]	; (8100b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8100b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100b34:	e001      	b.n	8100b3a <LoopFillZerobss>

08100b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100b38:	3204      	adds	r2, #4

08100b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100b3c:	d3fb      	bcc.n	8100b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100b3e:	f003 fb27 	bl	8104190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100b42:	f7ff fdb7 	bl	81006b4 <main>
  bx  lr
 8100b46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100b48:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100b4c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100b50:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 8100b54:	08104b7c 	.word	0x08104b7c
  ldr r2, =_sbss
 8100b58:	10000074 	.word	0x10000074
  ldr r4, =_ebss
 8100b5c:	10000138 	.word	0x10000138

08100b60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100b60:	e7fe      	b.n	8100b60 <ADC3_IRQHandler>
	...

08100b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100b64:	b580      	push	{r7, lr}
 8100b66:	b082      	sub	sp, #8
 8100b68:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100b6a:	4b28      	ldr	r3, [pc, #160]	; (8100c0c <HAL_Init+0xa8>)
 8100b6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100b70:	4a26      	ldr	r2, [pc, #152]	; (8100c0c <HAL_Init+0xa8>)
 8100b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100b76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100b7a:	4b24      	ldr	r3, [pc, #144]	; (8100c0c <HAL_Init+0xa8>)
 8100b7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100b84:	603b      	str	r3, [r7, #0]
 8100b86:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100b88:	4b21      	ldr	r3, [pc, #132]	; (8100c10 <HAL_Init+0xac>)
 8100b8a:	681b      	ldr	r3, [r3, #0]
 8100b8c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100b90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100b94:	4a1e      	ldr	r2, [pc, #120]	; (8100c10 <HAL_Init+0xac>)
 8100b96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100b9a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100b9c:	4b1c      	ldr	r3, [pc, #112]	; (8100c10 <HAL_Init+0xac>)
 8100b9e:	681b      	ldr	r3, [r3, #0]
 8100ba0:	4a1b      	ldr	r2, [pc, #108]	; (8100c10 <HAL_Init+0xac>)
 8100ba2:	f043 0301 	orr.w	r3, r3, #1
 8100ba6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100ba8:	2003      	movs	r0, #3
 8100baa:	f000 f941 	bl	8100e30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100bae:	f000 fbcf 	bl	8101350 <HAL_RCC_GetSysClockFreq>
 8100bb2:	4602      	mov	r2, r0
 8100bb4:	4b15      	ldr	r3, [pc, #84]	; (8100c0c <HAL_Init+0xa8>)
 8100bb6:	699b      	ldr	r3, [r3, #24]
 8100bb8:	0a1b      	lsrs	r3, r3, #8
 8100bba:	f003 030f 	and.w	r3, r3, #15
 8100bbe:	4915      	ldr	r1, [pc, #84]	; (8100c14 <HAL_Init+0xb0>)
 8100bc0:	5ccb      	ldrb	r3, [r1, r3]
 8100bc2:	f003 031f 	and.w	r3, r3, #31
 8100bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8100bca:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100bcc:	4b0f      	ldr	r3, [pc, #60]	; (8100c0c <HAL_Init+0xa8>)
 8100bce:	699b      	ldr	r3, [r3, #24]
 8100bd0:	f003 030f 	and.w	r3, r3, #15
 8100bd4:	4a0f      	ldr	r2, [pc, #60]	; (8100c14 <HAL_Init+0xb0>)
 8100bd6:	5cd3      	ldrb	r3, [r2, r3]
 8100bd8:	f003 031f 	and.w	r3, r3, #31
 8100bdc:	687a      	ldr	r2, [r7, #4]
 8100bde:	fa22 f303 	lsr.w	r3, r2, r3
 8100be2:	4a0d      	ldr	r2, [pc, #52]	; (8100c18 <HAL_Init+0xb4>)
 8100be4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100be6:	4b0c      	ldr	r3, [pc, #48]	; (8100c18 <HAL_Init+0xb4>)
 8100be8:	681b      	ldr	r3, [r3, #0]
 8100bea:	4a0c      	ldr	r2, [pc, #48]	; (8100c1c <HAL_Init+0xb8>)
 8100bec:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100bee:	2000      	movs	r0, #0
 8100bf0:	f000 f816 	bl	8100c20 <HAL_InitTick>
 8100bf4:	4603      	mov	r3, r0
 8100bf6:	2b00      	cmp	r3, #0
 8100bf8:	d001      	beq.n	8100bfe <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100bfa:	2301      	movs	r3, #1
 8100bfc:	e002      	b.n	8100c04 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100bfe:	f7ff fea7 	bl	8100950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100c02:	2300      	movs	r3, #0
}
 8100c04:	4618      	mov	r0, r3
 8100c06:	3708      	adds	r7, #8
 8100c08:	46bd      	mov	sp, r7
 8100c0a:	bd80      	pop	{r7, pc}
 8100c0c:	58024400 	.word	0x58024400
 8100c10:	40024400 	.word	0x40024400
 8100c14:	08104b00 	.word	0x08104b00
 8100c18:	10000004 	.word	0x10000004
 8100c1c:	10000000 	.word	0x10000000

08100c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100c20:	b580      	push	{r7, lr}
 8100c22:	b082      	sub	sp, #8
 8100c24:	af00      	add	r7, sp, #0
 8100c26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100c28:	4b15      	ldr	r3, [pc, #84]	; (8100c80 <HAL_InitTick+0x60>)
 8100c2a:	781b      	ldrb	r3, [r3, #0]
 8100c2c:	2b00      	cmp	r3, #0
 8100c2e:	d101      	bne.n	8100c34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100c30:	2301      	movs	r3, #1
 8100c32:	e021      	b.n	8100c78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100c34:	4b13      	ldr	r3, [pc, #76]	; (8100c84 <HAL_InitTick+0x64>)
 8100c36:	681a      	ldr	r2, [r3, #0]
 8100c38:	4b11      	ldr	r3, [pc, #68]	; (8100c80 <HAL_InitTick+0x60>)
 8100c3a:	781b      	ldrb	r3, [r3, #0]
 8100c3c:	4619      	mov	r1, r3
 8100c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8100c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8100c4a:	4618      	mov	r0, r3
 8100c4c:	f000 f915 	bl	8100e7a <HAL_SYSTICK_Config>
 8100c50:	4603      	mov	r3, r0
 8100c52:	2b00      	cmp	r3, #0
 8100c54:	d001      	beq.n	8100c5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100c56:	2301      	movs	r3, #1
 8100c58:	e00e      	b.n	8100c78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100c5a:	687b      	ldr	r3, [r7, #4]
 8100c5c:	2b0f      	cmp	r3, #15
 8100c5e:	d80a      	bhi.n	8100c76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100c60:	2200      	movs	r2, #0
 8100c62:	6879      	ldr	r1, [r7, #4]
 8100c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100c68:	f000 f8ed 	bl	8100e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100c6c:	4a06      	ldr	r2, [pc, #24]	; (8100c88 <HAL_InitTick+0x68>)
 8100c6e:	687b      	ldr	r3, [r7, #4]
 8100c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100c72:	2300      	movs	r3, #0
 8100c74:	e000      	b.n	8100c78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100c76:	2301      	movs	r3, #1
}
 8100c78:	4618      	mov	r0, r3
 8100c7a:	3708      	adds	r7, #8
 8100c7c:	46bd      	mov	sp, r7
 8100c7e:	bd80      	pop	{r7, pc}
 8100c80:	1000000c 	.word	0x1000000c
 8100c84:	10000000 	.word	0x10000000
 8100c88:	10000008 	.word	0x10000008

08100c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100c8c:	b480      	push	{r7}
 8100c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100c90:	4b06      	ldr	r3, [pc, #24]	; (8100cac <HAL_IncTick+0x20>)
 8100c92:	781b      	ldrb	r3, [r3, #0]
 8100c94:	461a      	mov	r2, r3
 8100c96:	4b06      	ldr	r3, [pc, #24]	; (8100cb0 <HAL_IncTick+0x24>)
 8100c98:	681b      	ldr	r3, [r3, #0]
 8100c9a:	4413      	add	r3, r2
 8100c9c:	4a04      	ldr	r2, [pc, #16]	; (8100cb0 <HAL_IncTick+0x24>)
 8100c9e:	6013      	str	r3, [r2, #0]
}
 8100ca0:	bf00      	nop
 8100ca2:	46bd      	mov	sp, r7
 8100ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ca8:	4770      	bx	lr
 8100caa:	bf00      	nop
 8100cac:	1000000c 	.word	0x1000000c
 8100cb0:	10000124 	.word	0x10000124

08100cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100cb4:	b480      	push	{r7}
 8100cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8100cb8:	4b03      	ldr	r3, [pc, #12]	; (8100cc8 <HAL_GetTick+0x14>)
 8100cba:	681b      	ldr	r3, [r3, #0]
}
 8100cbc:	4618      	mov	r0, r3
 8100cbe:	46bd      	mov	sp, r7
 8100cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cc4:	4770      	bx	lr
 8100cc6:	bf00      	nop
 8100cc8:	10000124 	.word	0x10000124

08100ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100ccc:	b480      	push	{r7}
 8100cce:	b085      	sub	sp, #20
 8100cd0:	af00      	add	r7, sp, #0
 8100cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100cd4:	687b      	ldr	r3, [r7, #4]
 8100cd6:	f003 0307 	and.w	r3, r3, #7
 8100cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100cdc:	4b0c      	ldr	r3, [pc, #48]	; (8100d10 <__NVIC_SetPriorityGrouping+0x44>)
 8100cde:	68db      	ldr	r3, [r3, #12]
 8100ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100ce2:	68ba      	ldr	r2, [r7, #8]
 8100ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100ce8:	4013      	ands	r3, r2
 8100cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100cec:	68fb      	ldr	r3, [r7, #12]
 8100cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100cf0:	68bb      	ldr	r3, [r7, #8]
 8100cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100cfe:	4a04      	ldr	r2, [pc, #16]	; (8100d10 <__NVIC_SetPriorityGrouping+0x44>)
 8100d00:	68bb      	ldr	r3, [r7, #8]
 8100d02:	60d3      	str	r3, [r2, #12]
}
 8100d04:	bf00      	nop
 8100d06:	3714      	adds	r7, #20
 8100d08:	46bd      	mov	sp, r7
 8100d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d0e:	4770      	bx	lr
 8100d10:	e000ed00 	.word	0xe000ed00

08100d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100d14:	b480      	push	{r7}
 8100d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100d18:	4b04      	ldr	r3, [pc, #16]	; (8100d2c <__NVIC_GetPriorityGrouping+0x18>)
 8100d1a:	68db      	ldr	r3, [r3, #12]
 8100d1c:	0a1b      	lsrs	r3, r3, #8
 8100d1e:	f003 0307 	and.w	r3, r3, #7
}
 8100d22:	4618      	mov	r0, r3
 8100d24:	46bd      	mov	sp, r7
 8100d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d2a:	4770      	bx	lr
 8100d2c:	e000ed00 	.word	0xe000ed00

08100d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100d30:	b480      	push	{r7}
 8100d32:	b083      	sub	sp, #12
 8100d34:	af00      	add	r7, sp, #0
 8100d36:	4603      	mov	r3, r0
 8100d38:	6039      	str	r1, [r7, #0]
 8100d3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100d40:	2b00      	cmp	r3, #0
 8100d42:	db0a      	blt.n	8100d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100d44:	683b      	ldr	r3, [r7, #0]
 8100d46:	b2da      	uxtb	r2, r3
 8100d48:	490c      	ldr	r1, [pc, #48]	; (8100d7c <__NVIC_SetPriority+0x4c>)
 8100d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100d4e:	0112      	lsls	r2, r2, #4
 8100d50:	b2d2      	uxtb	r2, r2
 8100d52:	440b      	add	r3, r1
 8100d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100d58:	e00a      	b.n	8100d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100d5a:	683b      	ldr	r3, [r7, #0]
 8100d5c:	b2da      	uxtb	r2, r3
 8100d5e:	4908      	ldr	r1, [pc, #32]	; (8100d80 <__NVIC_SetPriority+0x50>)
 8100d60:	88fb      	ldrh	r3, [r7, #6]
 8100d62:	f003 030f 	and.w	r3, r3, #15
 8100d66:	3b04      	subs	r3, #4
 8100d68:	0112      	lsls	r2, r2, #4
 8100d6a:	b2d2      	uxtb	r2, r2
 8100d6c:	440b      	add	r3, r1
 8100d6e:	761a      	strb	r2, [r3, #24]
}
 8100d70:	bf00      	nop
 8100d72:	370c      	adds	r7, #12
 8100d74:	46bd      	mov	sp, r7
 8100d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d7a:	4770      	bx	lr
 8100d7c:	e000e100 	.word	0xe000e100
 8100d80:	e000ed00 	.word	0xe000ed00

08100d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100d84:	b480      	push	{r7}
 8100d86:	b089      	sub	sp, #36	; 0x24
 8100d88:	af00      	add	r7, sp, #0
 8100d8a:	60f8      	str	r0, [r7, #12]
 8100d8c:	60b9      	str	r1, [r7, #8]
 8100d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100d90:	68fb      	ldr	r3, [r7, #12]
 8100d92:	f003 0307 	and.w	r3, r3, #7
 8100d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100d98:	69fb      	ldr	r3, [r7, #28]
 8100d9a:	f1c3 0307 	rsb	r3, r3, #7
 8100d9e:	2b04      	cmp	r3, #4
 8100da0:	bf28      	it	cs
 8100da2:	2304      	movcs	r3, #4
 8100da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100da6:	69fb      	ldr	r3, [r7, #28]
 8100da8:	3304      	adds	r3, #4
 8100daa:	2b06      	cmp	r3, #6
 8100dac:	d902      	bls.n	8100db4 <NVIC_EncodePriority+0x30>
 8100dae:	69fb      	ldr	r3, [r7, #28]
 8100db0:	3b03      	subs	r3, #3
 8100db2:	e000      	b.n	8100db6 <NVIC_EncodePriority+0x32>
 8100db4:	2300      	movs	r3, #0
 8100db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8100dbc:	69bb      	ldr	r3, [r7, #24]
 8100dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8100dc2:	43da      	mvns	r2, r3
 8100dc4:	68bb      	ldr	r3, [r7, #8]
 8100dc6:	401a      	ands	r2, r3
 8100dc8:	697b      	ldr	r3, [r7, #20]
 8100dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100dcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8100dd0:	697b      	ldr	r3, [r7, #20]
 8100dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8100dd6:	43d9      	mvns	r1, r3
 8100dd8:	687b      	ldr	r3, [r7, #4]
 8100dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100ddc:	4313      	orrs	r3, r2
         );
}
 8100dde:	4618      	mov	r0, r3
 8100de0:	3724      	adds	r7, #36	; 0x24
 8100de2:	46bd      	mov	sp, r7
 8100de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100de8:	4770      	bx	lr
	...

08100dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100dec:	b580      	push	{r7, lr}
 8100dee:	b082      	sub	sp, #8
 8100df0:	af00      	add	r7, sp, #0
 8100df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100df4:	687b      	ldr	r3, [r7, #4]
 8100df6:	3b01      	subs	r3, #1
 8100df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100dfc:	d301      	bcc.n	8100e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100dfe:	2301      	movs	r3, #1
 8100e00:	e00f      	b.n	8100e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100e02:	4a0a      	ldr	r2, [pc, #40]	; (8100e2c <SysTick_Config+0x40>)
 8100e04:	687b      	ldr	r3, [r7, #4]
 8100e06:	3b01      	subs	r3, #1
 8100e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100e0a:	210f      	movs	r1, #15
 8100e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100e10:	f7ff ff8e 	bl	8100d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100e14:	4b05      	ldr	r3, [pc, #20]	; (8100e2c <SysTick_Config+0x40>)
 8100e16:	2200      	movs	r2, #0
 8100e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100e1a:	4b04      	ldr	r3, [pc, #16]	; (8100e2c <SysTick_Config+0x40>)
 8100e1c:	2207      	movs	r2, #7
 8100e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100e20:	2300      	movs	r3, #0
}
 8100e22:	4618      	mov	r0, r3
 8100e24:	3708      	adds	r7, #8
 8100e26:	46bd      	mov	sp, r7
 8100e28:	bd80      	pop	{r7, pc}
 8100e2a:	bf00      	nop
 8100e2c:	e000e010 	.word	0xe000e010

08100e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100e30:	b580      	push	{r7, lr}
 8100e32:	b082      	sub	sp, #8
 8100e34:	af00      	add	r7, sp, #0
 8100e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100e38:	6878      	ldr	r0, [r7, #4]
 8100e3a:	f7ff ff47 	bl	8100ccc <__NVIC_SetPriorityGrouping>
}
 8100e3e:	bf00      	nop
 8100e40:	3708      	adds	r7, #8
 8100e42:	46bd      	mov	sp, r7
 8100e44:	bd80      	pop	{r7, pc}

08100e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100e46:	b580      	push	{r7, lr}
 8100e48:	b086      	sub	sp, #24
 8100e4a:	af00      	add	r7, sp, #0
 8100e4c:	4603      	mov	r3, r0
 8100e4e:	60b9      	str	r1, [r7, #8]
 8100e50:	607a      	str	r2, [r7, #4]
 8100e52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100e54:	f7ff ff5e 	bl	8100d14 <__NVIC_GetPriorityGrouping>
 8100e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100e5a:	687a      	ldr	r2, [r7, #4]
 8100e5c:	68b9      	ldr	r1, [r7, #8]
 8100e5e:	6978      	ldr	r0, [r7, #20]
 8100e60:	f7ff ff90 	bl	8100d84 <NVIC_EncodePriority>
 8100e64:	4602      	mov	r2, r0
 8100e66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100e6a:	4611      	mov	r1, r2
 8100e6c:	4618      	mov	r0, r3
 8100e6e:	f7ff ff5f 	bl	8100d30 <__NVIC_SetPriority>
}
 8100e72:	bf00      	nop
 8100e74:	3718      	adds	r7, #24
 8100e76:	46bd      	mov	sp, r7
 8100e78:	bd80      	pop	{r7, pc}

08100e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100e7a:	b580      	push	{r7, lr}
 8100e7c:	b082      	sub	sp, #8
 8100e7e:	af00      	add	r7, sp, #0
 8100e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100e82:	6878      	ldr	r0, [r7, #4]
 8100e84:	f7ff ffb2 	bl	8100dec <SysTick_Config>
 8100e88:	4603      	mov	r3, r0
}
 8100e8a:	4618      	mov	r0, r3
 8100e8c:	3708      	adds	r7, #8
 8100e8e:	46bd      	mov	sp, r7
 8100e90:	bd80      	pop	{r7, pc}
	...

08100e94 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100e94:	b480      	push	{r7}
 8100e96:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100e98:	4b07      	ldr	r3, [pc, #28]	; (8100eb8 <HAL_GetCurrentCPUID+0x24>)
 8100e9a:	681b      	ldr	r3, [r3, #0]
 8100e9c:	091b      	lsrs	r3, r3, #4
 8100e9e:	f003 030f 	and.w	r3, r3, #15
 8100ea2:	2b07      	cmp	r3, #7
 8100ea4:	d101      	bne.n	8100eaa <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100ea6:	2303      	movs	r3, #3
 8100ea8:	e000      	b.n	8100eac <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100eaa:	2301      	movs	r3, #1
  }
}
 8100eac:	4618      	mov	r0, r3
 8100eae:	46bd      	mov	sp, r7
 8100eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100eb4:	4770      	bx	lr
 8100eb6:	bf00      	nop
 8100eb8:	e000ed00 	.word	0xe000ed00

08100ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100ebc:	b480      	push	{r7}
 8100ebe:	b089      	sub	sp, #36	; 0x24
 8100ec0:	af00      	add	r7, sp, #0
 8100ec2:	6078      	str	r0, [r7, #4]
 8100ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100ec6:	2300      	movs	r3, #0
 8100ec8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100eca:	4b89      	ldr	r3, [pc, #548]	; (81010f0 <HAL_GPIO_Init+0x234>)
 8100ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100ece:	e194      	b.n	81011fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100ed0:	683b      	ldr	r3, [r7, #0]
 8100ed2:	681a      	ldr	r2, [r3, #0]
 8100ed4:	2101      	movs	r1, #1
 8100ed6:	69fb      	ldr	r3, [r7, #28]
 8100ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8100edc:	4013      	ands	r3, r2
 8100ede:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100ee0:	693b      	ldr	r3, [r7, #16]
 8100ee2:	2b00      	cmp	r3, #0
 8100ee4:	f000 8186 	beq.w	81011f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100ee8:	683b      	ldr	r3, [r7, #0]
 8100eea:	685b      	ldr	r3, [r3, #4]
 8100eec:	f003 0303 	and.w	r3, r3, #3
 8100ef0:	2b01      	cmp	r3, #1
 8100ef2:	d005      	beq.n	8100f00 <HAL_GPIO_Init+0x44>
 8100ef4:	683b      	ldr	r3, [r7, #0]
 8100ef6:	685b      	ldr	r3, [r3, #4]
 8100ef8:	f003 0303 	and.w	r3, r3, #3
 8100efc:	2b02      	cmp	r3, #2
 8100efe:	d130      	bne.n	8100f62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100f00:	687b      	ldr	r3, [r7, #4]
 8100f02:	689b      	ldr	r3, [r3, #8]
 8100f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100f06:	69fb      	ldr	r3, [r7, #28]
 8100f08:	005b      	lsls	r3, r3, #1
 8100f0a:	2203      	movs	r2, #3
 8100f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8100f10:	43db      	mvns	r3, r3
 8100f12:	69ba      	ldr	r2, [r7, #24]
 8100f14:	4013      	ands	r3, r2
 8100f16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100f18:	683b      	ldr	r3, [r7, #0]
 8100f1a:	68da      	ldr	r2, [r3, #12]
 8100f1c:	69fb      	ldr	r3, [r7, #28]
 8100f1e:	005b      	lsls	r3, r3, #1
 8100f20:	fa02 f303 	lsl.w	r3, r2, r3
 8100f24:	69ba      	ldr	r2, [r7, #24]
 8100f26:	4313      	orrs	r3, r2
 8100f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100f2a:	687b      	ldr	r3, [r7, #4]
 8100f2c:	69ba      	ldr	r2, [r7, #24]
 8100f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100f30:	687b      	ldr	r3, [r7, #4]
 8100f32:	685b      	ldr	r3, [r3, #4]
 8100f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100f36:	2201      	movs	r2, #1
 8100f38:	69fb      	ldr	r3, [r7, #28]
 8100f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8100f3e:	43db      	mvns	r3, r3
 8100f40:	69ba      	ldr	r2, [r7, #24]
 8100f42:	4013      	ands	r3, r2
 8100f44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100f46:	683b      	ldr	r3, [r7, #0]
 8100f48:	685b      	ldr	r3, [r3, #4]
 8100f4a:	091b      	lsrs	r3, r3, #4
 8100f4c:	f003 0201 	and.w	r2, r3, #1
 8100f50:	69fb      	ldr	r3, [r7, #28]
 8100f52:	fa02 f303 	lsl.w	r3, r2, r3
 8100f56:	69ba      	ldr	r2, [r7, #24]
 8100f58:	4313      	orrs	r3, r2
 8100f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100f5c:	687b      	ldr	r3, [r7, #4]
 8100f5e:	69ba      	ldr	r2, [r7, #24]
 8100f60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100f62:	683b      	ldr	r3, [r7, #0]
 8100f64:	685b      	ldr	r3, [r3, #4]
 8100f66:	f003 0303 	and.w	r3, r3, #3
 8100f6a:	2b03      	cmp	r3, #3
 8100f6c:	d017      	beq.n	8100f9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100f6e:	687b      	ldr	r3, [r7, #4]
 8100f70:	68db      	ldr	r3, [r3, #12]
 8100f72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100f74:	69fb      	ldr	r3, [r7, #28]
 8100f76:	005b      	lsls	r3, r3, #1
 8100f78:	2203      	movs	r2, #3
 8100f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8100f7e:	43db      	mvns	r3, r3
 8100f80:	69ba      	ldr	r2, [r7, #24]
 8100f82:	4013      	ands	r3, r2
 8100f84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100f86:	683b      	ldr	r3, [r7, #0]
 8100f88:	689a      	ldr	r2, [r3, #8]
 8100f8a:	69fb      	ldr	r3, [r7, #28]
 8100f8c:	005b      	lsls	r3, r3, #1
 8100f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8100f92:	69ba      	ldr	r2, [r7, #24]
 8100f94:	4313      	orrs	r3, r2
 8100f96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100f98:	687b      	ldr	r3, [r7, #4]
 8100f9a:	69ba      	ldr	r2, [r7, #24]
 8100f9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100f9e:	683b      	ldr	r3, [r7, #0]
 8100fa0:	685b      	ldr	r3, [r3, #4]
 8100fa2:	f003 0303 	and.w	r3, r3, #3
 8100fa6:	2b02      	cmp	r3, #2
 8100fa8:	d123      	bne.n	8100ff2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100faa:	69fb      	ldr	r3, [r7, #28]
 8100fac:	08da      	lsrs	r2, r3, #3
 8100fae:	687b      	ldr	r3, [r7, #4]
 8100fb0:	3208      	adds	r2, #8
 8100fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100fb8:	69fb      	ldr	r3, [r7, #28]
 8100fba:	f003 0307 	and.w	r3, r3, #7
 8100fbe:	009b      	lsls	r3, r3, #2
 8100fc0:	220f      	movs	r2, #15
 8100fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8100fc6:	43db      	mvns	r3, r3
 8100fc8:	69ba      	ldr	r2, [r7, #24]
 8100fca:	4013      	ands	r3, r2
 8100fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100fce:	683b      	ldr	r3, [r7, #0]
 8100fd0:	691a      	ldr	r2, [r3, #16]
 8100fd2:	69fb      	ldr	r3, [r7, #28]
 8100fd4:	f003 0307 	and.w	r3, r3, #7
 8100fd8:	009b      	lsls	r3, r3, #2
 8100fda:	fa02 f303 	lsl.w	r3, r2, r3
 8100fde:	69ba      	ldr	r2, [r7, #24]
 8100fe0:	4313      	orrs	r3, r2
 8100fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100fe4:	69fb      	ldr	r3, [r7, #28]
 8100fe6:	08da      	lsrs	r2, r3, #3
 8100fe8:	687b      	ldr	r3, [r7, #4]
 8100fea:	3208      	adds	r2, #8
 8100fec:	69b9      	ldr	r1, [r7, #24]
 8100fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100ff2:	687b      	ldr	r3, [r7, #4]
 8100ff4:	681b      	ldr	r3, [r3, #0]
 8100ff6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100ff8:	69fb      	ldr	r3, [r7, #28]
 8100ffa:	005b      	lsls	r3, r3, #1
 8100ffc:	2203      	movs	r2, #3
 8100ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8101002:	43db      	mvns	r3, r3
 8101004:	69ba      	ldr	r2, [r7, #24]
 8101006:	4013      	ands	r3, r2
 8101008:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810100a:	683b      	ldr	r3, [r7, #0]
 810100c:	685b      	ldr	r3, [r3, #4]
 810100e:	f003 0203 	and.w	r2, r3, #3
 8101012:	69fb      	ldr	r3, [r7, #28]
 8101014:	005b      	lsls	r3, r3, #1
 8101016:	fa02 f303 	lsl.w	r3, r2, r3
 810101a:	69ba      	ldr	r2, [r7, #24]
 810101c:	4313      	orrs	r3, r2
 810101e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101020:	687b      	ldr	r3, [r7, #4]
 8101022:	69ba      	ldr	r2, [r7, #24]
 8101024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101026:	683b      	ldr	r3, [r7, #0]
 8101028:	685b      	ldr	r3, [r3, #4]
 810102a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810102e:	2b00      	cmp	r3, #0
 8101030:	f000 80e0 	beq.w	81011f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101034:	4b2f      	ldr	r3, [pc, #188]	; (81010f4 <HAL_GPIO_Init+0x238>)
 8101036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810103a:	4a2e      	ldr	r2, [pc, #184]	; (81010f4 <HAL_GPIO_Init+0x238>)
 810103c:	f043 0302 	orr.w	r3, r3, #2
 8101040:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101044:	4b2b      	ldr	r3, [pc, #172]	; (81010f4 <HAL_GPIO_Init+0x238>)
 8101046:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810104a:	f003 0302 	and.w	r3, r3, #2
 810104e:	60fb      	str	r3, [r7, #12]
 8101050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101052:	4a29      	ldr	r2, [pc, #164]	; (81010f8 <HAL_GPIO_Init+0x23c>)
 8101054:	69fb      	ldr	r3, [r7, #28]
 8101056:	089b      	lsrs	r3, r3, #2
 8101058:	3302      	adds	r3, #2
 810105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101060:	69fb      	ldr	r3, [r7, #28]
 8101062:	f003 0303 	and.w	r3, r3, #3
 8101066:	009b      	lsls	r3, r3, #2
 8101068:	220f      	movs	r2, #15
 810106a:	fa02 f303 	lsl.w	r3, r2, r3
 810106e:	43db      	mvns	r3, r3
 8101070:	69ba      	ldr	r2, [r7, #24]
 8101072:	4013      	ands	r3, r2
 8101074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101076:	687b      	ldr	r3, [r7, #4]
 8101078:	4a20      	ldr	r2, [pc, #128]	; (81010fc <HAL_GPIO_Init+0x240>)
 810107a:	4293      	cmp	r3, r2
 810107c:	d052      	beq.n	8101124 <HAL_GPIO_Init+0x268>
 810107e:	687b      	ldr	r3, [r7, #4]
 8101080:	4a1f      	ldr	r2, [pc, #124]	; (8101100 <HAL_GPIO_Init+0x244>)
 8101082:	4293      	cmp	r3, r2
 8101084:	d031      	beq.n	81010ea <HAL_GPIO_Init+0x22e>
 8101086:	687b      	ldr	r3, [r7, #4]
 8101088:	4a1e      	ldr	r2, [pc, #120]	; (8101104 <HAL_GPIO_Init+0x248>)
 810108a:	4293      	cmp	r3, r2
 810108c:	d02b      	beq.n	81010e6 <HAL_GPIO_Init+0x22a>
 810108e:	687b      	ldr	r3, [r7, #4]
 8101090:	4a1d      	ldr	r2, [pc, #116]	; (8101108 <HAL_GPIO_Init+0x24c>)
 8101092:	4293      	cmp	r3, r2
 8101094:	d025      	beq.n	81010e2 <HAL_GPIO_Init+0x226>
 8101096:	687b      	ldr	r3, [r7, #4]
 8101098:	4a1c      	ldr	r2, [pc, #112]	; (810110c <HAL_GPIO_Init+0x250>)
 810109a:	4293      	cmp	r3, r2
 810109c:	d01f      	beq.n	81010de <HAL_GPIO_Init+0x222>
 810109e:	687b      	ldr	r3, [r7, #4]
 81010a0:	4a1b      	ldr	r2, [pc, #108]	; (8101110 <HAL_GPIO_Init+0x254>)
 81010a2:	4293      	cmp	r3, r2
 81010a4:	d019      	beq.n	81010da <HAL_GPIO_Init+0x21e>
 81010a6:	687b      	ldr	r3, [r7, #4]
 81010a8:	4a1a      	ldr	r2, [pc, #104]	; (8101114 <HAL_GPIO_Init+0x258>)
 81010aa:	4293      	cmp	r3, r2
 81010ac:	d013      	beq.n	81010d6 <HAL_GPIO_Init+0x21a>
 81010ae:	687b      	ldr	r3, [r7, #4]
 81010b0:	4a19      	ldr	r2, [pc, #100]	; (8101118 <HAL_GPIO_Init+0x25c>)
 81010b2:	4293      	cmp	r3, r2
 81010b4:	d00d      	beq.n	81010d2 <HAL_GPIO_Init+0x216>
 81010b6:	687b      	ldr	r3, [r7, #4]
 81010b8:	4a18      	ldr	r2, [pc, #96]	; (810111c <HAL_GPIO_Init+0x260>)
 81010ba:	4293      	cmp	r3, r2
 81010bc:	d007      	beq.n	81010ce <HAL_GPIO_Init+0x212>
 81010be:	687b      	ldr	r3, [r7, #4]
 81010c0:	4a17      	ldr	r2, [pc, #92]	; (8101120 <HAL_GPIO_Init+0x264>)
 81010c2:	4293      	cmp	r3, r2
 81010c4:	d101      	bne.n	81010ca <HAL_GPIO_Init+0x20e>
 81010c6:	2309      	movs	r3, #9
 81010c8:	e02d      	b.n	8101126 <HAL_GPIO_Init+0x26a>
 81010ca:	230a      	movs	r3, #10
 81010cc:	e02b      	b.n	8101126 <HAL_GPIO_Init+0x26a>
 81010ce:	2308      	movs	r3, #8
 81010d0:	e029      	b.n	8101126 <HAL_GPIO_Init+0x26a>
 81010d2:	2307      	movs	r3, #7
 81010d4:	e027      	b.n	8101126 <HAL_GPIO_Init+0x26a>
 81010d6:	2306      	movs	r3, #6
 81010d8:	e025      	b.n	8101126 <HAL_GPIO_Init+0x26a>
 81010da:	2305      	movs	r3, #5
 81010dc:	e023      	b.n	8101126 <HAL_GPIO_Init+0x26a>
 81010de:	2304      	movs	r3, #4
 81010e0:	e021      	b.n	8101126 <HAL_GPIO_Init+0x26a>
 81010e2:	2303      	movs	r3, #3
 81010e4:	e01f      	b.n	8101126 <HAL_GPIO_Init+0x26a>
 81010e6:	2302      	movs	r3, #2
 81010e8:	e01d      	b.n	8101126 <HAL_GPIO_Init+0x26a>
 81010ea:	2301      	movs	r3, #1
 81010ec:	e01b      	b.n	8101126 <HAL_GPIO_Init+0x26a>
 81010ee:	bf00      	nop
 81010f0:	580000c0 	.word	0x580000c0
 81010f4:	58024400 	.word	0x58024400
 81010f8:	58000400 	.word	0x58000400
 81010fc:	58020000 	.word	0x58020000
 8101100:	58020400 	.word	0x58020400
 8101104:	58020800 	.word	0x58020800
 8101108:	58020c00 	.word	0x58020c00
 810110c:	58021000 	.word	0x58021000
 8101110:	58021400 	.word	0x58021400
 8101114:	58021800 	.word	0x58021800
 8101118:	58021c00 	.word	0x58021c00
 810111c:	58022000 	.word	0x58022000
 8101120:	58022400 	.word	0x58022400
 8101124:	2300      	movs	r3, #0
 8101126:	69fa      	ldr	r2, [r7, #28]
 8101128:	f002 0203 	and.w	r2, r2, #3
 810112c:	0092      	lsls	r2, r2, #2
 810112e:	4093      	lsls	r3, r2
 8101130:	69ba      	ldr	r2, [r7, #24]
 8101132:	4313      	orrs	r3, r2
 8101134:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101136:	4938      	ldr	r1, [pc, #224]	; (8101218 <HAL_GPIO_Init+0x35c>)
 8101138:	69fb      	ldr	r3, [r7, #28]
 810113a:	089b      	lsrs	r3, r3, #2
 810113c:	3302      	adds	r3, #2
 810113e:	69ba      	ldr	r2, [r7, #24]
 8101140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101148:	681b      	ldr	r3, [r3, #0]
 810114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810114c:	693b      	ldr	r3, [r7, #16]
 810114e:	43db      	mvns	r3, r3
 8101150:	69ba      	ldr	r2, [r7, #24]
 8101152:	4013      	ands	r3, r2
 8101154:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101156:	683b      	ldr	r3, [r7, #0]
 8101158:	685b      	ldr	r3, [r3, #4]
 810115a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810115e:	2b00      	cmp	r3, #0
 8101160:	d003      	beq.n	810116a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101162:	69ba      	ldr	r2, [r7, #24]
 8101164:	693b      	ldr	r3, [r7, #16]
 8101166:	4313      	orrs	r3, r2
 8101168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810116a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810116e:	69bb      	ldr	r3, [r7, #24]
 8101170:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101176:	685b      	ldr	r3, [r3, #4]
 8101178:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810117a:	693b      	ldr	r3, [r7, #16]
 810117c:	43db      	mvns	r3, r3
 810117e:	69ba      	ldr	r2, [r7, #24]
 8101180:	4013      	ands	r3, r2
 8101182:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101184:	683b      	ldr	r3, [r7, #0]
 8101186:	685b      	ldr	r3, [r3, #4]
 8101188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810118c:	2b00      	cmp	r3, #0
 810118e:	d003      	beq.n	8101198 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101190:	69ba      	ldr	r2, [r7, #24]
 8101192:	693b      	ldr	r3, [r7, #16]
 8101194:	4313      	orrs	r3, r2
 8101196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810119c:	69bb      	ldr	r3, [r7, #24]
 810119e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81011a0:	697b      	ldr	r3, [r7, #20]
 81011a2:	685b      	ldr	r3, [r3, #4]
 81011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81011a6:	693b      	ldr	r3, [r7, #16]
 81011a8:	43db      	mvns	r3, r3
 81011aa:	69ba      	ldr	r2, [r7, #24]
 81011ac:	4013      	ands	r3, r2
 81011ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81011b0:	683b      	ldr	r3, [r7, #0]
 81011b2:	685b      	ldr	r3, [r3, #4]
 81011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81011b8:	2b00      	cmp	r3, #0
 81011ba:	d003      	beq.n	81011c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81011bc:	69ba      	ldr	r2, [r7, #24]
 81011be:	693b      	ldr	r3, [r7, #16]
 81011c0:	4313      	orrs	r3, r2
 81011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81011c4:	697b      	ldr	r3, [r7, #20]
 81011c6:	69ba      	ldr	r2, [r7, #24]
 81011c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81011ca:	697b      	ldr	r3, [r7, #20]
 81011cc:	681b      	ldr	r3, [r3, #0]
 81011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81011d0:	693b      	ldr	r3, [r7, #16]
 81011d2:	43db      	mvns	r3, r3
 81011d4:	69ba      	ldr	r2, [r7, #24]
 81011d6:	4013      	ands	r3, r2
 81011d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81011da:	683b      	ldr	r3, [r7, #0]
 81011dc:	685b      	ldr	r3, [r3, #4]
 81011de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81011e2:	2b00      	cmp	r3, #0
 81011e4:	d003      	beq.n	81011ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81011e6:	69ba      	ldr	r2, [r7, #24]
 81011e8:	693b      	ldr	r3, [r7, #16]
 81011ea:	4313      	orrs	r3, r2
 81011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81011ee:	697b      	ldr	r3, [r7, #20]
 81011f0:	69ba      	ldr	r2, [r7, #24]
 81011f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81011f4:	69fb      	ldr	r3, [r7, #28]
 81011f6:	3301      	adds	r3, #1
 81011f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81011fa:	683b      	ldr	r3, [r7, #0]
 81011fc:	681a      	ldr	r2, [r3, #0]
 81011fe:	69fb      	ldr	r3, [r7, #28]
 8101200:	fa22 f303 	lsr.w	r3, r2, r3
 8101204:	2b00      	cmp	r3, #0
 8101206:	f47f ae63 	bne.w	8100ed0 <HAL_GPIO_Init+0x14>
  }
}
 810120a:	bf00      	nop
 810120c:	bf00      	nop
 810120e:	3724      	adds	r7, #36	; 0x24
 8101210:	46bd      	mov	sp, r7
 8101212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101216:	4770      	bx	lr
 8101218:	58000400 	.word	0x58000400

0810121c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810121c:	b480      	push	{r7}
 810121e:	b083      	sub	sp, #12
 8101220:	af00      	add	r7, sp, #0
 8101222:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101224:	4b05      	ldr	r3, [pc, #20]	; (810123c <HAL_HSEM_ActivateNotification+0x20>)
 8101226:	681a      	ldr	r2, [r3, #0]
 8101228:	4904      	ldr	r1, [pc, #16]	; (810123c <HAL_HSEM_ActivateNotification+0x20>)
 810122a:	687b      	ldr	r3, [r7, #4]
 810122c:	4313      	orrs	r3, r2
 810122e:	600b      	str	r3, [r1, #0]
#endif
}
 8101230:	bf00      	nop
 8101232:	370c      	adds	r7, #12
 8101234:	46bd      	mov	sp, r7
 8101236:	f85d 7b04 	ldr.w	r7, [sp], #4
 810123a:	4770      	bx	lr
 810123c:	58026510 	.word	0x58026510

08101240 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101240:	b580      	push	{r7, lr}
 8101242:	b084      	sub	sp, #16
 8101244:	af00      	add	r7, sp, #0
 8101246:	60f8      	str	r0, [r7, #12]
 8101248:	460b      	mov	r3, r1
 810124a:	607a      	str	r2, [r7, #4]
 810124c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810124e:	4b37      	ldr	r3, [pc, #220]	; (810132c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101250:	681b      	ldr	r3, [r3, #0]
 8101252:	f023 0201 	bic.w	r2, r3, #1
 8101256:	4935      	ldr	r1, [pc, #212]	; (810132c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101258:	68fb      	ldr	r3, [r7, #12]
 810125a:	4313      	orrs	r3, r2
 810125c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810125e:	687b      	ldr	r3, [r7, #4]
 8101260:	2b00      	cmp	r3, #0
 8101262:	d123      	bne.n	81012ac <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101264:	f7ff fe16 	bl	8100e94 <HAL_GetCurrentCPUID>
 8101268:	4603      	mov	r3, r0
 810126a:	2b03      	cmp	r3, #3
 810126c:	d158      	bne.n	8101320 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810126e:	4b2f      	ldr	r3, [pc, #188]	; (810132c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101270:	691b      	ldr	r3, [r3, #16]
 8101272:	4a2e      	ldr	r2, [pc, #184]	; (810132c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101274:	f023 0301 	bic.w	r3, r3, #1
 8101278:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810127a:	4b2d      	ldr	r3, [pc, #180]	; (8101330 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810127c:	691b      	ldr	r3, [r3, #16]
 810127e:	4a2c      	ldr	r2, [pc, #176]	; (8101330 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101280:	f043 0304 	orr.w	r3, r3, #4
 8101284:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101286:	f3bf 8f4f 	dsb	sy
}
 810128a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810128c:	f3bf 8f6f 	isb	sy
}
 8101290:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101292:	7afb      	ldrb	r3, [r7, #11]
 8101294:	2b01      	cmp	r3, #1
 8101296:	d101      	bne.n	810129c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101298:	bf30      	wfi
 810129a:	e000      	b.n	810129e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810129c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810129e:	4b24      	ldr	r3, [pc, #144]	; (8101330 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81012a0:	691b      	ldr	r3, [r3, #16]
 81012a2:	4a23      	ldr	r2, [pc, #140]	; (8101330 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81012a4:	f023 0304 	bic.w	r3, r3, #4
 81012a8:	6113      	str	r3, [r2, #16]
 81012aa:	e03c      	b.n	8101326 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81012ac:	687b      	ldr	r3, [r7, #4]
 81012ae:	2b01      	cmp	r3, #1
 81012b0:	d123      	bne.n	81012fa <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81012b2:	f7ff fdef 	bl	8100e94 <HAL_GetCurrentCPUID>
 81012b6:	4603      	mov	r3, r0
 81012b8:	2b01      	cmp	r3, #1
 81012ba:	d133      	bne.n	8101324 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81012bc:	4b1b      	ldr	r3, [pc, #108]	; (810132c <HAL_PWREx_EnterSTOPMode+0xec>)
 81012be:	695b      	ldr	r3, [r3, #20]
 81012c0:	4a1a      	ldr	r2, [pc, #104]	; (810132c <HAL_PWREx_EnterSTOPMode+0xec>)
 81012c2:	f023 0302 	bic.w	r3, r3, #2
 81012c6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81012c8:	4b19      	ldr	r3, [pc, #100]	; (8101330 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81012ca:	691b      	ldr	r3, [r3, #16]
 81012cc:	4a18      	ldr	r2, [pc, #96]	; (8101330 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81012ce:	f043 0304 	orr.w	r3, r3, #4
 81012d2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81012d4:	f3bf 8f4f 	dsb	sy
}
 81012d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81012da:	f3bf 8f6f 	isb	sy
}
 81012de:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81012e0:	7afb      	ldrb	r3, [r7, #11]
 81012e2:	2b01      	cmp	r3, #1
 81012e4:	d101      	bne.n	81012ea <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81012e6:	bf30      	wfi
 81012e8:	e000      	b.n	81012ec <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81012ea:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81012ec:	4b10      	ldr	r3, [pc, #64]	; (8101330 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81012ee:	691b      	ldr	r3, [r3, #16]
 81012f0:	4a0f      	ldr	r2, [pc, #60]	; (8101330 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81012f2:	f023 0304 	bic.w	r3, r3, #4
 81012f6:	6113      	str	r3, [r2, #16]
 81012f8:	e015      	b.n	8101326 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81012fa:	f7ff fdcb 	bl	8100e94 <HAL_GetCurrentCPUID>
 81012fe:	4603      	mov	r3, r0
 8101300:	2b03      	cmp	r3, #3
 8101302:	d106      	bne.n	8101312 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101304:	4b09      	ldr	r3, [pc, #36]	; (810132c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101306:	691b      	ldr	r3, [r3, #16]
 8101308:	4a08      	ldr	r2, [pc, #32]	; (810132c <HAL_PWREx_EnterSTOPMode+0xec>)
 810130a:	f023 0304 	bic.w	r3, r3, #4
 810130e:	6113      	str	r3, [r2, #16]
 8101310:	e009      	b.n	8101326 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101312:	4b06      	ldr	r3, [pc, #24]	; (810132c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101314:	695b      	ldr	r3, [r3, #20]
 8101316:	4a05      	ldr	r2, [pc, #20]	; (810132c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101318:	f023 0304 	bic.w	r3, r3, #4
 810131c:	6153      	str	r3, [r2, #20]
 810131e:	e002      	b.n	8101326 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101320:	bf00      	nop
 8101322:	e000      	b.n	8101326 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101324:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101326:	3710      	adds	r7, #16
 8101328:	46bd      	mov	sp, r7
 810132a:	bd80      	pop	{r7, pc}
 810132c:	58024800 	.word	0x58024800
 8101330:	e000ed00 	.word	0xe000ed00

08101334 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101334:	b580      	push	{r7, lr}
 8101336:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101338:	f7ff fdac 	bl	8100e94 <HAL_GetCurrentCPUID>
 810133c:	4603      	mov	r3, r0
 810133e:	2b03      	cmp	r3, #3
 8101340:	d101      	bne.n	8101346 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101342:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101344:	e001      	b.n	810134a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101346:	bf40      	sev
    __WFE ();
 8101348:	bf20      	wfe
}
 810134a:	bf00      	nop
 810134c:	bd80      	pop	{r7, pc}
	...

08101350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101350:	b480      	push	{r7}
 8101352:	b089      	sub	sp, #36	; 0x24
 8101354:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101356:	4bb3      	ldr	r3, [pc, #716]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101358:	691b      	ldr	r3, [r3, #16]
 810135a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810135e:	2b18      	cmp	r3, #24
 8101360:	f200 8155 	bhi.w	810160e <HAL_RCC_GetSysClockFreq+0x2be>
 8101364:	a201      	add	r2, pc, #4	; (adr r2, 810136c <HAL_RCC_GetSysClockFreq+0x1c>)
 8101366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810136a:	bf00      	nop
 810136c:	081013d1 	.word	0x081013d1
 8101370:	0810160f 	.word	0x0810160f
 8101374:	0810160f 	.word	0x0810160f
 8101378:	0810160f 	.word	0x0810160f
 810137c:	0810160f 	.word	0x0810160f
 8101380:	0810160f 	.word	0x0810160f
 8101384:	0810160f 	.word	0x0810160f
 8101388:	0810160f 	.word	0x0810160f
 810138c:	081013f7 	.word	0x081013f7
 8101390:	0810160f 	.word	0x0810160f
 8101394:	0810160f 	.word	0x0810160f
 8101398:	0810160f 	.word	0x0810160f
 810139c:	0810160f 	.word	0x0810160f
 81013a0:	0810160f 	.word	0x0810160f
 81013a4:	0810160f 	.word	0x0810160f
 81013a8:	0810160f 	.word	0x0810160f
 81013ac:	081013fd 	.word	0x081013fd
 81013b0:	0810160f 	.word	0x0810160f
 81013b4:	0810160f 	.word	0x0810160f
 81013b8:	0810160f 	.word	0x0810160f
 81013bc:	0810160f 	.word	0x0810160f
 81013c0:	0810160f 	.word	0x0810160f
 81013c4:	0810160f 	.word	0x0810160f
 81013c8:	0810160f 	.word	0x0810160f
 81013cc:	08101403 	.word	0x08101403
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81013d0:	4b94      	ldr	r3, [pc, #592]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013d2:	681b      	ldr	r3, [r3, #0]
 81013d4:	f003 0320 	and.w	r3, r3, #32
 81013d8:	2b00      	cmp	r3, #0
 81013da:	d009      	beq.n	81013f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81013dc:	4b91      	ldr	r3, [pc, #580]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013de:	681b      	ldr	r3, [r3, #0]
 81013e0:	08db      	lsrs	r3, r3, #3
 81013e2:	f003 0303 	and.w	r3, r3, #3
 81013e6:	4a90      	ldr	r2, [pc, #576]	; (8101628 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81013e8:	fa22 f303 	lsr.w	r3, r2, r3
 81013ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81013ee:	e111      	b.n	8101614 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81013f0:	4b8d      	ldr	r3, [pc, #564]	; (8101628 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81013f2:	61bb      	str	r3, [r7, #24]
    break;
 81013f4:	e10e      	b.n	8101614 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81013f6:	4b8d      	ldr	r3, [pc, #564]	; (810162c <HAL_RCC_GetSysClockFreq+0x2dc>)
 81013f8:	61bb      	str	r3, [r7, #24]
    break;
 81013fa:	e10b      	b.n	8101614 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81013fc:	4b8c      	ldr	r3, [pc, #560]	; (8101630 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81013fe:	61bb      	str	r3, [r7, #24]
    break;
 8101400:	e108      	b.n	8101614 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101402:	4b88      	ldr	r3, [pc, #544]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101406:	f003 0303 	and.w	r3, r3, #3
 810140a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810140c:	4b85      	ldr	r3, [pc, #532]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101410:	091b      	lsrs	r3, r3, #4
 8101412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101416:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101418:	4b82      	ldr	r3, [pc, #520]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810141c:	f003 0301 	and.w	r3, r3, #1
 8101420:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8101422:	4b80      	ldr	r3, [pc, #512]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101426:	08db      	lsrs	r3, r3, #3
 8101428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810142c:	68fa      	ldr	r2, [r7, #12]
 810142e:	fb02 f303 	mul.w	r3, r2, r3
 8101432:	ee07 3a90 	vmov	s15, r3
 8101436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810143a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810143e:	693b      	ldr	r3, [r7, #16]
 8101440:	2b00      	cmp	r3, #0
 8101442:	f000 80e1 	beq.w	8101608 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101446:	697b      	ldr	r3, [r7, #20]
 8101448:	2b02      	cmp	r3, #2
 810144a:	f000 8083 	beq.w	8101554 <HAL_RCC_GetSysClockFreq+0x204>
 810144e:	697b      	ldr	r3, [r7, #20]
 8101450:	2b02      	cmp	r3, #2
 8101452:	f200 80a1 	bhi.w	8101598 <HAL_RCC_GetSysClockFreq+0x248>
 8101456:	697b      	ldr	r3, [r7, #20]
 8101458:	2b00      	cmp	r3, #0
 810145a:	d003      	beq.n	8101464 <HAL_RCC_GetSysClockFreq+0x114>
 810145c:	697b      	ldr	r3, [r7, #20]
 810145e:	2b01      	cmp	r3, #1
 8101460:	d056      	beq.n	8101510 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101462:	e099      	b.n	8101598 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101464:	4b6f      	ldr	r3, [pc, #444]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101466:	681b      	ldr	r3, [r3, #0]
 8101468:	f003 0320 	and.w	r3, r3, #32
 810146c:	2b00      	cmp	r3, #0
 810146e:	d02d      	beq.n	81014cc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101470:	4b6c      	ldr	r3, [pc, #432]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101472:	681b      	ldr	r3, [r3, #0]
 8101474:	08db      	lsrs	r3, r3, #3
 8101476:	f003 0303 	and.w	r3, r3, #3
 810147a:	4a6b      	ldr	r2, [pc, #428]	; (8101628 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810147c:	fa22 f303 	lsr.w	r3, r2, r3
 8101480:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101482:	687b      	ldr	r3, [r7, #4]
 8101484:	ee07 3a90 	vmov	s15, r3
 8101488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810148c:	693b      	ldr	r3, [r7, #16]
 810148e:	ee07 3a90 	vmov	s15, r3
 8101492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810149a:	4b62      	ldr	r3, [pc, #392]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810149e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014a2:	ee07 3a90 	vmov	s15, r3
 81014a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81014aa:	ed97 6a02 	vldr	s12, [r7, #8]
 81014ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101634 <HAL_RCC_GetSysClockFreq+0x2e4>
 81014b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81014be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81014c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81014c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81014ca:	e087      	b.n	81015dc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81014cc:	693b      	ldr	r3, [r7, #16]
 81014ce:	ee07 3a90 	vmov	s15, r3
 81014d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101638 <HAL_RCC_GetSysClockFreq+0x2e8>
 81014da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81014de:	4b51      	ldr	r3, [pc, #324]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81014e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014e6:	ee07 3a90 	vmov	s15, r3
 81014ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81014ee:	ed97 6a02 	vldr	s12, [r7, #8]
 81014f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101634 <HAL_RCC_GetSysClockFreq+0x2e4>
 81014f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101506:	ee67 7a27 	vmul.f32	s15, s14, s15
 810150a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810150e:	e065      	b.n	81015dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101510:	693b      	ldr	r3, [r7, #16]
 8101512:	ee07 3a90 	vmov	s15, r3
 8101516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810151a:	eddf 6a48 	vldr	s13, [pc, #288]	; 810163c <HAL_RCC_GetSysClockFreq+0x2ec>
 810151e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101522:	4b40      	ldr	r3, [pc, #256]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810152a:	ee07 3a90 	vmov	s15, r3
 810152e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101532:	ed97 6a02 	vldr	s12, [r7, #8]
 8101536:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101634 <HAL_RCC_GetSysClockFreq+0x2e4>
 810153a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810153e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810154a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810154e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101552:	e043      	b.n	81015dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101554:	693b      	ldr	r3, [r7, #16]
 8101556:	ee07 3a90 	vmov	s15, r3
 810155a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810155e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101640 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101566:	4b2f      	ldr	r3, [pc, #188]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810156a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810156e:	ee07 3a90 	vmov	s15, r3
 8101572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101576:	ed97 6a02 	vldr	s12, [r7, #8]
 810157a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101634 <HAL_RCC_GetSysClockFreq+0x2e4>
 810157e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810158a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810158e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101596:	e021      	b.n	81015dc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101598:	693b      	ldr	r3, [r7, #16]
 810159a:	ee07 3a90 	vmov	s15, r3
 810159e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81015a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 810163c <HAL_RCC_GetSysClockFreq+0x2ec>
 81015a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81015aa:	4b1e      	ldr	r3, [pc, #120]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81015ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81015b2:	ee07 3a90 	vmov	s15, r3
 81015b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81015ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81015be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101634 <HAL_RCC_GetSysClockFreq+0x2e4>
 81015c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81015c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81015ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81015ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81015d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81015d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81015da:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81015dc:	4b11      	ldr	r3, [pc, #68]	; (8101624 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81015e0:	0a5b      	lsrs	r3, r3, #9
 81015e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81015e6:	3301      	adds	r3, #1
 81015e8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81015ea:	683b      	ldr	r3, [r7, #0]
 81015ec:	ee07 3a90 	vmov	s15, r3
 81015f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81015f4:	edd7 6a07 	vldr	s13, [r7, #28]
 81015f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81015fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101600:	ee17 3a90 	vmov	r3, s15
 8101604:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101606:	e005      	b.n	8101614 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101608:	2300      	movs	r3, #0
 810160a:	61bb      	str	r3, [r7, #24]
    break;
 810160c:	e002      	b.n	8101614 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810160e:	4b07      	ldr	r3, [pc, #28]	; (810162c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101610:	61bb      	str	r3, [r7, #24]
    break;
 8101612:	bf00      	nop
  }

  return sysclockfreq;
 8101614:	69bb      	ldr	r3, [r7, #24]
}
 8101616:	4618      	mov	r0, r3
 8101618:	3724      	adds	r7, #36	; 0x24
 810161a:	46bd      	mov	sp, r7
 810161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101620:	4770      	bx	lr
 8101622:	bf00      	nop
 8101624:	58024400 	.word	0x58024400
 8101628:	03d09000 	.word	0x03d09000
 810162c:	003d0900 	.word	0x003d0900
 8101630:	007a1200 	.word	0x007a1200
 8101634:	46000000 	.word	0x46000000
 8101638:	4c742400 	.word	0x4c742400
 810163c:	4a742400 	.word	0x4a742400
 8101640:	4af42400 	.word	0x4af42400

08101644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101644:	b580      	push	{r7, lr}
 8101646:	b082      	sub	sp, #8
 8101648:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810164a:	f7ff fe81 	bl	8101350 <HAL_RCC_GetSysClockFreq>
 810164e:	4602      	mov	r2, r0
 8101650:	4b11      	ldr	r3, [pc, #68]	; (8101698 <HAL_RCC_GetHCLKFreq+0x54>)
 8101652:	699b      	ldr	r3, [r3, #24]
 8101654:	0a1b      	lsrs	r3, r3, #8
 8101656:	f003 030f 	and.w	r3, r3, #15
 810165a:	4910      	ldr	r1, [pc, #64]	; (810169c <HAL_RCC_GetHCLKFreq+0x58>)
 810165c:	5ccb      	ldrb	r3, [r1, r3]
 810165e:	f003 031f 	and.w	r3, r3, #31
 8101662:	fa22 f303 	lsr.w	r3, r2, r3
 8101666:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101668:	4b0b      	ldr	r3, [pc, #44]	; (8101698 <HAL_RCC_GetHCLKFreq+0x54>)
 810166a:	699b      	ldr	r3, [r3, #24]
 810166c:	f003 030f 	and.w	r3, r3, #15
 8101670:	4a0a      	ldr	r2, [pc, #40]	; (810169c <HAL_RCC_GetHCLKFreq+0x58>)
 8101672:	5cd3      	ldrb	r3, [r2, r3]
 8101674:	f003 031f 	and.w	r3, r3, #31
 8101678:	687a      	ldr	r2, [r7, #4]
 810167a:	fa22 f303 	lsr.w	r3, r2, r3
 810167e:	4a08      	ldr	r2, [pc, #32]	; (81016a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101680:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101682:	4b07      	ldr	r3, [pc, #28]	; (81016a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101684:	681b      	ldr	r3, [r3, #0]
 8101686:	4a07      	ldr	r2, [pc, #28]	; (81016a4 <HAL_RCC_GetHCLKFreq+0x60>)
 8101688:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810168a:	4b05      	ldr	r3, [pc, #20]	; (81016a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 810168c:	681b      	ldr	r3, [r3, #0]
}
 810168e:	4618      	mov	r0, r3
 8101690:	3708      	adds	r7, #8
 8101692:	46bd      	mov	sp, r7
 8101694:	bd80      	pop	{r7, pc}
 8101696:	bf00      	nop
 8101698:	58024400 	.word	0x58024400
 810169c:	08104b00 	.word	0x08104b00
 81016a0:	10000004 	.word	0x10000004
 81016a4:	10000000 	.word	0x10000000

081016a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81016a8:	b580      	push	{r7, lr}
 81016aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81016ac:	f7ff ffca 	bl	8101644 <HAL_RCC_GetHCLKFreq>
 81016b0:	4602      	mov	r2, r0
 81016b2:	4b06      	ldr	r3, [pc, #24]	; (81016cc <HAL_RCC_GetPCLK1Freq+0x24>)
 81016b4:	69db      	ldr	r3, [r3, #28]
 81016b6:	091b      	lsrs	r3, r3, #4
 81016b8:	f003 0307 	and.w	r3, r3, #7
 81016bc:	4904      	ldr	r1, [pc, #16]	; (81016d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 81016be:	5ccb      	ldrb	r3, [r1, r3]
 81016c0:	f003 031f 	and.w	r3, r3, #31
 81016c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81016c8:	4618      	mov	r0, r3
 81016ca:	bd80      	pop	{r7, pc}
 81016cc:	58024400 	.word	0x58024400
 81016d0:	08104b00 	.word	0x08104b00

081016d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81016d4:	b580      	push	{r7, lr}
 81016d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81016d8:	f7ff ffb4 	bl	8101644 <HAL_RCC_GetHCLKFreq>
 81016dc:	4602      	mov	r2, r0
 81016de:	4b06      	ldr	r3, [pc, #24]	; (81016f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 81016e0:	69db      	ldr	r3, [r3, #28]
 81016e2:	0a1b      	lsrs	r3, r3, #8
 81016e4:	f003 0307 	and.w	r3, r3, #7
 81016e8:	4904      	ldr	r1, [pc, #16]	; (81016fc <HAL_RCC_GetPCLK2Freq+0x28>)
 81016ea:	5ccb      	ldrb	r3, [r1, r3]
 81016ec:	f003 031f 	and.w	r3, r3, #31
 81016f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81016f4:	4618      	mov	r0, r3
 81016f6:	bd80      	pop	{r7, pc}
 81016f8:	58024400 	.word	0x58024400
 81016fc:	08104b00 	.word	0x08104b00

08101700 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101700:	b580      	push	{r7, lr}
 8101702:	b086      	sub	sp, #24
 8101704:	af00      	add	r7, sp, #0
 8101706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101708:	2300      	movs	r3, #0
 810170a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810170c:	2300      	movs	r3, #0
 810170e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101710:	687b      	ldr	r3, [r7, #4]
 8101712:	681b      	ldr	r3, [r3, #0]
 8101714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101718:	2b00      	cmp	r3, #0
 810171a:	d03f      	beq.n	810179c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 810171c:	687b      	ldr	r3, [r7, #4]
 810171e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101720:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101724:	d02a      	beq.n	810177c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8101726:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810172a:	d824      	bhi.n	8101776 <HAL_RCCEx_PeriphCLKConfig+0x76>
 810172c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101730:	d018      	beq.n	8101764 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8101732:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101736:	d81e      	bhi.n	8101776 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101738:	2b00      	cmp	r3, #0
 810173a:	d003      	beq.n	8101744 <HAL_RCCEx_PeriphCLKConfig+0x44>
 810173c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101740:	d007      	beq.n	8101752 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8101742:	e018      	b.n	8101776 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101744:	4ba3      	ldr	r3, [pc, #652]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101748:	4aa2      	ldr	r2, [pc, #648]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810174a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810174e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101750:	e015      	b.n	810177e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101752:	687b      	ldr	r3, [r7, #4]
 8101754:	3304      	adds	r3, #4
 8101756:	2102      	movs	r1, #2
 8101758:	4618      	mov	r0, r3
 810175a:	f001 f9d5 	bl	8102b08 <RCCEx_PLL2_Config>
 810175e:	4603      	mov	r3, r0
 8101760:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101762:	e00c      	b.n	810177e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101764:	687b      	ldr	r3, [r7, #4]
 8101766:	3324      	adds	r3, #36	; 0x24
 8101768:	2102      	movs	r1, #2
 810176a:	4618      	mov	r0, r3
 810176c:	f001 fa7e 	bl	8102c6c <RCCEx_PLL3_Config>
 8101770:	4603      	mov	r3, r0
 8101772:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101774:	e003      	b.n	810177e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101776:	2301      	movs	r3, #1
 8101778:	75fb      	strb	r3, [r7, #23]
      break;
 810177a:	e000      	b.n	810177e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 810177c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810177e:	7dfb      	ldrb	r3, [r7, #23]
 8101780:	2b00      	cmp	r3, #0
 8101782:	d109      	bne.n	8101798 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101784:	4b93      	ldr	r3, [pc, #588]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101788:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810178c:	687b      	ldr	r3, [r7, #4]
 810178e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101790:	4990      	ldr	r1, [pc, #576]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101792:	4313      	orrs	r3, r2
 8101794:	650b      	str	r3, [r1, #80]	; 0x50
 8101796:	e001      	b.n	810179c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101798:	7dfb      	ldrb	r3, [r7, #23]
 810179a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810179c:	687b      	ldr	r3, [r7, #4]
 810179e:	681b      	ldr	r3, [r3, #0]
 81017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81017a4:	2b00      	cmp	r3, #0
 81017a6:	d03d      	beq.n	8101824 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81017a8:	687b      	ldr	r3, [r7, #4]
 81017aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81017ac:	2b04      	cmp	r3, #4
 81017ae:	d826      	bhi.n	81017fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81017b0:	a201      	add	r2, pc, #4	; (adr r2, 81017b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81017b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81017b6:	bf00      	nop
 81017b8:	081017cd 	.word	0x081017cd
 81017bc:	081017db 	.word	0x081017db
 81017c0:	081017ed 	.word	0x081017ed
 81017c4:	08101805 	.word	0x08101805
 81017c8:	08101805 	.word	0x08101805
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81017cc:	4b81      	ldr	r3, [pc, #516]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81017d0:	4a80      	ldr	r2, [pc, #512]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81017d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81017d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81017d8:	e015      	b.n	8101806 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81017da:	687b      	ldr	r3, [r7, #4]
 81017dc:	3304      	adds	r3, #4
 81017de:	2100      	movs	r1, #0
 81017e0:	4618      	mov	r0, r3
 81017e2:	f001 f991 	bl	8102b08 <RCCEx_PLL2_Config>
 81017e6:	4603      	mov	r3, r0
 81017e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81017ea:	e00c      	b.n	8101806 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81017ec:	687b      	ldr	r3, [r7, #4]
 81017ee:	3324      	adds	r3, #36	; 0x24
 81017f0:	2100      	movs	r1, #0
 81017f2:	4618      	mov	r0, r3
 81017f4:	f001 fa3a 	bl	8102c6c <RCCEx_PLL3_Config>
 81017f8:	4603      	mov	r3, r0
 81017fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81017fc:	e003      	b.n	8101806 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81017fe:	2301      	movs	r3, #1
 8101800:	75fb      	strb	r3, [r7, #23]
      break;
 8101802:	e000      	b.n	8101806 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8101804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101806:	7dfb      	ldrb	r3, [r7, #23]
 8101808:	2b00      	cmp	r3, #0
 810180a:	d109      	bne.n	8101820 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810180c:	4b71      	ldr	r3, [pc, #452]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810180e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101810:	f023 0207 	bic.w	r2, r3, #7
 8101814:	687b      	ldr	r3, [r7, #4]
 8101816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101818:	496e      	ldr	r1, [pc, #440]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810181a:	4313      	orrs	r3, r2
 810181c:	650b      	str	r3, [r1, #80]	; 0x50
 810181e:	e001      	b.n	8101824 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101820:	7dfb      	ldrb	r3, [r7, #23]
 8101822:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101824:	687b      	ldr	r3, [r7, #4]
 8101826:	681b      	ldr	r3, [r3, #0]
 8101828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810182c:	2b00      	cmp	r3, #0
 810182e:	d042      	beq.n	81018b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8101830:	687b      	ldr	r3, [r7, #4]
 8101832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101838:	d02b      	beq.n	8101892 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810183a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810183e:	d825      	bhi.n	810188c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101840:	2bc0      	cmp	r3, #192	; 0xc0
 8101842:	d028      	beq.n	8101896 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8101844:	2bc0      	cmp	r3, #192	; 0xc0
 8101846:	d821      	bhi.n	810188c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101848:	2b80      	cmp	r3, #128	; 0x80
 810184a:	d016      	beq.n	810187a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 810184c:	2b80      	cmp	r3, #128	; 0x80
 810184e:	d81d      	bhi.n	810188c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101850:	2b00      	cmp	r3, #0
 8101852:	d002      	beq.n	810185a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8101854:	2b40      	cmp	r3, #64	; 0x40
 8101856:	d007      	beq.n	8101868 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8101858:	e018      	b.n	810188c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810185a:	4b5e      	ldr	r3, [pc, #376]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810185e:	4a5d      	ldr	r2, [pc, #372]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101866:	e017      	b.n	8101898 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101868:	687b      	ldr	r3, [r7, #4]
 810186a:	3304      	adds	r3, #4
 810186c:	2100      	movs	r1, #0
 810186e:	4618      	mov	r0, r3
 8101870:	f001 f94a 	bl	8102b08 <RCCEx_PLL2_Config>
 8101874:	4603      	mov	r3, r0
 8101876:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101878:	e00e      	b.n	8101898 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810187a:	687b      	ldr	r3, [r7, #4]
 810187c:	3324      	adds	r3, #36	; 0x24
 810187e:	2100      	movs	r1, #0
 8101880:	4618      	mov	r0, r3
 8101882:	f001 f9f3 	bl	8102c6c <RCCEx_PLL3_Config>
 8101886:	4603      	mov	r3, r0
 8101888:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810188a:	e005      	b.n	8101898 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810188c:	2301      	movs	r3, #1
 810188e:	75fb      	strb	r3, [r7, #23]
      break;
 8101890:	e002      	b.n	8101898 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8101892:	bf00      	nop
 8101894:	e000      	b.n	8101898 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8101896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101898:	7dfb      	ldrb	r3, [r7, #23]
 810189a:	2b00      	cmp	r3, #0
 810189c:	d109      	bne.n	81018b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810189e:	4b4d      	ldr	r3, [pc, #308]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81018a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81018a2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81018a6:	687b      	ldr	r3, [r7, #4]
 81018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81018aa:	494a      	ldr	r1, [pc, #296]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81018ac:	4313      	orrs	r3, r2
 81018ae:	650b      	str	r3, [r1, #80]	; 0x50
 81018b0:	e001      	b.n	81018b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81018b2:	7dfb      	ldrb	r3, [r7, #23]
 81018b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81018b6:	687b      	ldr	r3, [r7, #4]
 81018b8:	681b      	ldr	r3, [r3, #0]
 81018ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81018be:	2b00      	cmp	r3, #0
 81018c0:	d049      	beq.n	8101956 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81018c2:	687b      	ldr	r3, [r7, #4]
 81018c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81018c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81018cc:	d030      	beq.n	8101930 <HAL_RCCEx_PeriphCLKConfig+0x230>
 81018ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81018d2:	d82a      	bhi.n	810192a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81018d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81018d8:	d02c      	beq.n	8101934 <HAL_RCCEx_PeriphCLKConfig+0x234>
 81018da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81018de:	d824      	bhi.n	810192a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81018e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81018e4:	d018      	beq.n	8101918 <HAL_RCCEx_PeriphCLKConfig+0x218>
 81018e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81018ea:	d81e      	bhi.n	810192a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81018ec:	2b00      	cmp	r3, #0
 81018ee:	d003      	beq.n	81018f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 81018f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81018f4:	d007      	beq.n	8101906 <HAL_RCCEx_PeriphCLKConfig+0x206>
 81018f6:	e018      	b.n	810192a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81018f8:	4b36      	ldr	r3, [pc, #216]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81018fc:	4a35      	ldr	r2, [pc, #212]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81018fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101902:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101904:	e017      	b.n	8101936 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101906:	687b      	ldr	r3, [r7, #4]
 8101908:	3304      	adds	r3, #4
 810190a:	2100      	movs	r1, #0
 810190c:	4618      	mov	r0, r3
 810190e:	f001 f8fb 	bl	8102b08 <RCCEx_PLL2_Config>
 8101912:	4603      	mov	r3, r0
 8101914:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8101916:	e00e      	b.n	8101936 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101918:	687b      	ldr	r3, [r7, #4]
 810191a:	3324      	adds	r3, #36	; 0x24
 810191c:	2100      	movs	r1, #0
 810191e:	4618      	mov	r0, r3
 8101920:	f001 f9a4 	bl	8102c6c <RCCEx_PLL3_Config>
 8101924:	4603      	mov	r3, r0
 8101926:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101928:	e005      	b.n	8101936 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810192a:	2301      	movs	r3, #1
 810192c:	75fb      	strb	r3, [r7, #23]
      break;
 810192e:	e002      	b.n	8101936 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101930:	bf00      	nop
 8101932:	e000      	b.n	8101936 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101936:	7dfb      	ldrb	r3, [r7, #23]
 8101938:	2b00      	cmp	r3, #0
 810193a:	d10a      	bne.n	8101952 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810193c:	4b25      	ldr	r3, [pc, #148]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101940:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8101944:	687b      	ldr	r3, [r7, #4]
 8101946:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810194a:	4922      	ldr	r1, [pc, #136]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810194c:	4313      	orrs	r3, r2
 810194e:	658b      	str	r3, [r1, #88]	; 0x58
 8101950:	e001      	b.n	8101956 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101952:	7dfb      	ldrb	r3, [r7, #23]
 8101954:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101956:	687b      	ldr	r3, [r7, #4]
 8101958:	681b      	ldr	r3, [r3, #0]
 810195a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810195e:	2b00      	cmp	r3, #0
 8101960:	d04b      	beq.n	81019fa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8101962:	687b      	ldr	r3, [r7, #4]
 8101964:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810196c:	d030      	beq.n	81019d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810196e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101972:	d82a      	bhi.n	81019ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101974:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101978:	d02e      	beq.n	81019d8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 810197a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810197e:	d824      	bhi.n	81019ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101980:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101984:	d018      	beq.n	81019b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8101986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810198a:	d81e      	bhi.n	81019ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810198c:	2b00      	cmp	r3, #0
 810198e:	d003      	beq.n	8101998 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8101990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101994:	d007      	beq.n	81019a6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8101996:	e018      	b.n	81019ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101998:	4b0e      	ldr	r3, [pc, #56]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810199c:	4a0d      	ldr	r2, [pc, #52]	; (81019d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810199e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81019a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81019a4:	e019      	b.n	81019da <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81019a6:	687b      	ldr	r3, [r7, #4]
 81019a8:	3304      	adds	r3, #4
 81019aa:	2100      	movs	r1, #0
 81019ac:	4618      	mov	r0, r3
 81019ae:	f001 f8ab 	bl	8102b08 <RCCEx_PLL2_Config>
 81019b2:	4603      	mov	r3, r0
 81019b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81019b6:	e010      	b.n	81019da <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81019b8:	687b      	ldr	r3, [r7, #4]
 81019ba:	3324      	adds	r3, #36	; 0x24
 81019bc:	2100      	movs	r1, #0
 81019be:	4618      	mov	r0, r3
 81019c0:	f001 f954 	bl	8102c6c <RCCEx_PLL3_Config>
 81019c4:	4603      	mov	r3, r0
 81019c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81019c8:	e007      	b.n	81019da <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81019ca:	2301      	movs	r3, #1
 81019cc:	75fb      	strb	r3, [r7, #23]
      break;
 81019ce:	e004      	b.n	81019da <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 81019d0:	bf00      	nop
 81019d2:	e002      	b.n	81019da <HAL_RCCEx_PeriphCLKConfig+0x2da>
 81019d4:	58024400 	.word	0x58024400
      break;
 81019d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81019da:	7dfb      	ldrb	r3, [r7, #23]
 81019dc:	2b00      	cmp	r3, #0
 81019de:	d10a      	bne.n	81019f6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81019e0:	4b99      	ldr	r3, [pc, #612]	; (8101c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81019e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 81019e8:	687b      	ldr	r3, [r7, #4]
 81019ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81019ee:	4996      	ldr	r1, [pc, #600]	; (8101c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81019f0:	4313      	orrs	r3, r2
 81019f2:	658b      	str	r3, [r1, #88]	; 0x58
 81019f4:	e001      	b.n	81019fa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81019f6:	7dfb      	ldrb	r3, [r7, #23]
 81019f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81019fa:	687b      	ldr	r3, [r7, #4]
 81019fc:	681b      	ldr	r3, [r3, #0]
 81019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101a02:	2b00      	cmp	r3, #0
 8101a04:	d032      	beq.n	8101a6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8101a06:	687b      	ldr	r3, [r7, #4]
 8101a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101a0a:	2b30      	cmp	r3, #48	; 0x30
 8101a0c:	d01c      	beq.n	8101a48 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8101a0e:	2b30      	cmp	r3, #48	; 0x30
 8101a10:	d817      	bhi.n	8101a42 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8101a12:	2b20      	cmp	r3, #32
 8101a14:	d00c      	beq.n	8101a30 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8101a16:	2b20      	cmp	r3, #32
 8101a18:	d813      	bhi.n	8101a42 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8101a1a:	2b00      	cmp	r3, #0
 8101a1c:	d016      	beq.n	8101a4c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8101a1e:	2b10      	cmp	r3, #16
 8101a20:	d10f      	bne.n	8101a42 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101a22:	4b89      	ldr	r3, [pc, #548]	; (8101c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101a26:	4a88      	ldr	r2, [pc, #544]	; (8101c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8101a2e:	e00e      	b.n	8101a4e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101a30:	687b      	ldr	r3, [r7, #4]
 8101a32:	3304      	adds	r3, #4
 8101a34:	2102      	movs	r1, #2
 8101a36:	4618      	mov	r0, r3
 8101a38:	f001 f866 	bl	8102b08 <RCCEx_PLL2_Config>
 8101a3c:	4603      	mov	r3, r0
 8101a3e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8101a40:	e005      	b.n	8101a4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101a42:	2301      	movs	r3, #1
 8101a44:	75fb      	strb	r3, [r7, #23]
      break;
 8101a46:	e002      	b.n	8101a4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8101a48:	bf00      	nop
 8101a4a:	e000      	b.n	8101a4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8101a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101a4e:	7dfb      	ldrb	r3, [r7, #23]
 8101a50:	2b00      	cmp	r3, #0
 8101a52:	d109      	bne.n	8101a68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101a54:	4b7c      	ldr	r3, [pc, #496]	; (8101c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101a58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8101a5c:	687b      	ldr	r3, [r7, #4]
 8101a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101a60:	4979      	ldr	r1, [pc, #484]	; (8101c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101a62:	4313      	orrs	r3, r2
 8101a64:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101a66:	e001      	b.n	8101a6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a68:	7dfb      	ldrb	r3, [r7, #23]
 8101a6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101a6c:	687b      	ldr	r3, [r7, #4]
 8101a6e:	681b      	ldr	r3, [r3, #0]
 8101a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101a74:	2b00      	cmp	r3, #0
 8101a76:	d047      	beq.n	8101b08 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8101a78:	687b      	ldr	r3, [r7, #4]
 8101a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101a80:	d030      	beq.n	8101ae4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8101a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101a86:	d82a      	bhi.n	8101ade <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8101a88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101a8c:	d02c      	beq.n	8101ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8101a8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101a92:	d824      	bhi.n	8101ade <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8101a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101a98:	d018      	beq.n	8101acc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8101a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101a9e:	d81e      	bhi.n	8101ade <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8101aa0:	2b00      	cmp	r3, #0
 8101aa2:	d003      	beq.n	8101aac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8101aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101aa8:	d007      	beq.n	8101aba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8101aaa:	e018      	b.n	8101ade <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101aac:	4b66      	ldr	r3, [pc, #408]	; (8101c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101ab0:	4a65      	ldr	r2, [pc, #404]	; (8101c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101ab8:	e017      	b.n	8101aea <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101aba:	687b      	ldr	r3, [r7, #4]
 8101abc:	3304      	adds	r3, #4
 8101abe:	2100      	movs	r1, #0
 8101ac0:	4618      	mov	r0, r3
 8101ac2:	f001 f821 	bl	8102b08 <RCCEx_PLL2_Config>
 8101ac6:	4603      	mov	r3, r0
 8101ac8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101aca:	e00e      	b.n	8101aea <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101acc:	687b      	ldr	r3, [r7, #4]
 8101ace:	3324      	adds	r3, #36	; 0x24
 8101ad0:	2100      	movs	r1, #0
 8101ad2:	4618      	mov	r0, r3
 8101ad4:	f001 f8ca 	bl	8102c6c <RCCEx_PLL3_Config>
 8101ad8:	4603      	mov	r3, r0
 8101ada:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101adc:	e005      	b.n	8101aea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101ade:	2301      	movs	r3, #1
 8101ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8101ae2:	e002      	b.n	8101aea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8101ae4:	bf00      	nop
 8101ae6:	e000      	b.n	8101aea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8101ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101aea:	7dfb      	ldrb	r3, [r7, #23]
 8101aec:	2b00      	cmp	r3, #0
 8101aee:	d109      	bne.n	8101b04 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101af0:	4b55      	ldr	r3, [pc, #340]	; (8101c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101af4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8101af8:	687b      	ldr	r3, [r7, #4]
 8101afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101afc:	4952      	ldr	r1, [pc, #328]	; (8101c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101afe:	4313      	orrs	r3, r2
 8101b00:	650b      	str	r3, [r1, #80]	; 0x50
 8101b02:	e001      	b.n	8101b08 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b04:	7dfb      	ldrb	r3, [r7, #23]
 8101b06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101b08:	687b      	ldr	r3, [r7, #4]
 8101b0a:	681b      	ldr	r3, [r3, #0]
 8101b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101b10:	2b00      	cmp	r3, #0
 8101b12:	d049      	beq.n	8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8101b14:	687b      	ldr	r3, [r7, #4]
 8101b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101b1c:	d02e      	beq.n	8101b7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8101b1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101b22:	d828      	bhi.n	8101b76 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101b24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101b28:	d02a      	beq.n	8101b80 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8101b2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101b2e:	d822      	bhi.n	8101b76 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101b30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101b34:	d026      	beq.n	8101b84 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8101b36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101b3a:	d81c      	bhi.n	8101b76 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101b3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101b40:	d010      	beq.n	8101b64 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8101b42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101b46:	d816      	bhi.n	8101b76 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101b48:	2b00      	cmp	r3, #0
 8101b4a:	d01d      	beq.n	8101b88 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8101b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101b50:	d111      	bne.n	8101b76 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101b52:	687b      	ldr	r3, [r7, #4]
 8101b54:	3304      	adds	r3, #4
 8101b56:	2101      	movs	r1, #1
 8101b58:	4618      	mov	r0, r3
 8101b5a:	f000 ffd5 	bl	8102b08 <RCCEx_PLL2_Config>
 8101b5e:	4603      	mov	r3, r0
 8101b60:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101b62:	e012      	b.n	8101b8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101b64:	687b      	ldr	r3, [r7, #4]
 8101b66:	3324      	adds	r3, #36	; 0x24
 8101b68:	2101      	movs	r1, #1
 8101b6a:	4618      	mov	r0, r3
 8101b6c:	f001 f87e 	bl	8102c6c <RCCEx_PLL3_Config>
 8101b70:	4603      	mov	r3, r0
 8101b72:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101b74:	e009      	b.n	8101b8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101b76:	2301      	movs	r3, #1
 8101b78:	75fb      	strb	r3, [r7, #23]
      break;
 8101b7a:	e006      	b.n	8101b8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101b7c:	bf00      	nop
 8101b7e:	e004      	b.n	8101b8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101b80:	bf00      	nop
 8101b82:	e002      	b.n	8101b8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101b84:	bf00      	nop
 8101b86:	e000      	b.n	8101b8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101b8a:	7dfb      	ldrb	r3, [r7, #23]
 8101b8c:	2b00      	cmp	r3, #0
 8101b8e:	d109      	bne.n	8101ba4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101b90:	4b2d      	ldr	r3, [pc, #180]	; (8101c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101b94:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8101b98:	687b      	ldr	r3, [r7, #4]
 8101b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101b9c:	492a      	ldr	r1, [pc, #168]	; (8101c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101b9e:	4313      	orrs	r3, r2
 8101ba0:	650b      	str	r3, [r1, #80]	; 0x50
 8101ba2:	e001      	b.n	8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ba4:	7dfb      	ldrb	r3, [r7, #23]
 8101ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101ba8:	687b      	ldr	r3, [r7, #4]
 8101baa:	681b      	ldr	r3, [r3, #0]
 8101bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101bb0:	2b00      	cmp	r3, #0
 8101bb2:	d04d      	beq.n	8101c50 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8101bb4:	687b      	ldr	r3, [r7, #4]
 8101bb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101bbe:	d02e      	beq.n	8101c1e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8101bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101bc4:	d828      	bhi.n	8101c18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8101bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101bca:	d02a      	beq.n	8101c22 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8101bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101bd0:	d822      	bhi.n	8101c18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8101bd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101bd6:	d026      	beq.n	8101c26 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8101bd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101bdc:	d81c      	bhi.n	8101c18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8101bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101be2:	d010      	beq.n	8101c06 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8101be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101be8:	d816      	bhi.n	8101c18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8101bea:	2b00      	cmp	r3, #0
 8101bec:	d01d      	beq.n	8101c2a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8101bee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101bf2:	d111      	bne.n	8101c18 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101bf4:	687b      	ldr	r3, [r7, #4]
 8101bf6:	3304      	adds	r3, #4
 8101bf8:	2101      	movs	r1, #1
 8101bfa:	4618      	mov	r0, r3
 8101bfc:	f000 ff84 	bl	8102b08 <RCCEx_PLL2_Config>
 8101c00:	4603      	mov	r3, r0
 8101c02:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101c04:	e012      	b.n	8101c2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101c06:	687b      	ldr	r3, [r7, #4]
 8101c08:	3324      	adds	r3, #36	; 0x24
 8101c0a:	2101      	movs	r1, #1
 8101c0c:	4618      	mov	r0, r3
 8101c0e:	f001 f82d 	bl	8102c6c <RCCEx_PLL3_Config>
 8101c12:	4603      	mov	r3, r0
 8101c14:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101c16:	e009      	b.n	8101c2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8101c18:	2301      	movs	r3, #1
 8101c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8101c1c:	e006      	b.n	8101c2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101c1e:	bf00      	nop
 8101c20:	e004      	b.n	8101c2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101c22:	bf00      	nop
 8101c24:	e002      	b.n	8101c2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101c26:	bf00      	nop
 8101c28:	e000      	b.n	8101c2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101c2c:	7dfb      	ldrb	r3, [r7, #23]
 8101c2e:	2b00      	cmp	r3, #0
 8101c30:	d10c      	bne.n	8101c4c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8101c32:	4b05      	ldr	r3, [pc, #20]	; (8101c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101c36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8101c3a:	687b      	ldr	r3, [r7, #4]
 8101c3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101c40:	4901      	ldr	r1, [pc, #4]	; (8101c48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101c42:	4313      	orrs	r3, r2
 8101c44:	658b      	str	r3, [r1, #88]	; 0x58
 8101c46:	e003      	b.n	8101c50 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8101c48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c4c:	7dfb      	ldrb	r3, [r7, #23]
 8101c4e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8101c50:	687b      	ldr	r3, [r7, #4]
 8101c52:	681b      	ldr	r3, [r3, #0]
 8101c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101c58:	2b00      	cmp	r3, #0
 8101c5a:	d02f      	beq.n	8101cbc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8101c5c:	687b      	ldr	r3, [r7, #4]
 8101c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101c64:	d00e      	beq.n	8101c84 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8101c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101c6a:	d814      	bhi.n	8101c96 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8101c6c:	2b00      	cmp	r3, #0
 8101c6e:	d015      	beq.n	8101c9c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8101c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101c74:	d10f      	bne.n	8101c96 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101c76:	4bb0      	ldr	r3, [pc, #704]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101c7a:	4aaf      	ldr	r2, [pc, #700]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101c82:	e00c      	b.n	8101c9e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101c84:	687b      	ldr	r3, [r7, #4]
 8101c86:	3304      	adds	r3, #4
 8101c88:	2101      	movs	r1, #1
 8101c8a:	4618      	mov	r0, r3
 8101c8c:	f000 ff3c 	bl	8102b08 <RCCEx_PLL2_Config>
 8101c90:	4603      	mov	r3, r0
 8101c92:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101c94:	e003      	b.n	8101c9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101c96:	2301      	movs	r3, #1
 8101c98:	75fb      	strb	r3, [r7, #23]
      break;
 8101c9a:	e000      	b.n	8101c9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8101c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101c9e:	7dfb      	ldrb	r3, [r7, #23]
 8101ca0:	2b00      	cmp	r3, #0
 8101ca2:	d109      	bne.n	8101cb8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8101ca4:	4ba4      	ldr	r3, [pc, #656]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101ca8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8101cac:	687b      	ldr	r3, [r7, #4]
 8101cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101cb0:	49a1      	ldr	r1, [pc, #644]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101cb2:	4313      	orrs	r3, r2
 8101cb4:	650b      	str	r3, [r1, #80]	; 0x50
 8101cb6:	e001      	b.n	8101cbc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101cb8:	7dfb      	ldrb	r3, [r7, #23]
 8101cba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8101cbc:	687b      	ldr	r3, [r7, #4]
 8101cbe:	681b      	ldr	r3, [r3, #0]
 8101cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101cc4:	2b00      	cmp	r3, #0
 8101cc6:	d032      	beq.n	8101d2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8101cc8:	687b      	ldr	r3, [r7, #4]
 8101cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101ccc:	2b03      	cmp	r3, #3
 8101cce:	d81b      	bhi.n	8101d08 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8101cd0:	a201      	add	r2, pc, #4	; (adr r2, 8101cd8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8101cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101cd6:	bf00      	nop
 8101cd8:	08101d0f 	.word	0x08101d0f
 8101cdc:	08101ce9 	.word	0x08101ce9
 8101ce0:	08101cf7 	.word	0x08101cf7
 8101ce4:	08101d0f 	.word	0x08101d0f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101ce8:	4b93      	ldr	r3, [pc, #588]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101cec:	4a92      	ldr	r2, [pc, #584]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101cf4:	e00c      	b.n	8101d10 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101cf6:	687b      	ldr	r3, [r7, #4]
 8101cf8:	3304      	adds	r3, #4
 8101cfa:	2102      	movs	r1, #2
 8101cfc:	4618      	mov	r0, r3
 8101cfe:	f000 ff03 	bl	8102b08 <RCCEx_PLL2_Config>
 8101d02:	4603      	mov	r3, r0
 8101d04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101d06:	e003      	b.n	8101d10 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101d08:	2301      	movs	r3, #1
 8101d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8101d0c:	e000      	b.n	8101d10 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8101d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101d10:	7dfb      	ldrb	r3, [r7, #23]
 8101d12:	2b00      	cmp	r3, #0
 8101d14:	d109      	bne.n	8101d2a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101d16:	4b88      	ldr	r3, [pc, #544]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101d1a:	f023 0203 	bic.w	r2, r3, #3
 8101d1e:	687b      	ldr	r3, [r7, #4]
 8101d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101d22:	4985      	ldr	r1, [pc, #532]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101d24:	4313      	orrs	r3, r2
 8101d26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101d28:	e001      	b.n	8101d2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d2a:	7dfb      	ldrb	r3, [r7, #23]
 8101d2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8101d2e:	687b      	ldr	r3, [r7, #4]
 8101d30:	681b      	ldr	r3, [r3, #0]
 8101d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101d36:	2b00      	cmp	r3, #0
 8101d38:	f000 8088 	beq.w	8101e4c <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8101d3c:	4b7f      	ldr	r3, [pc, #508]	; (8101f3c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8101d3e:	681b      	ldr	r3, [r3, #0]
 8101d40:	4a7e      	ldr	r2, [pc, #504]	; (8101f3c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8101d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101d46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101d48:	f7fe ffb4 	bl	8100cb4 <HAL_GetTick>
 8101d4c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101d4e:	e009      	b.n	8101d64 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101d50:	f7fe ffb0 	bl	8100cb4 <HAL_GetTick>
 8101d54:	4602      	mov	r2, r0
 8101d56:	693b      	ldr	r3, [r7, #16]
 8101d58:	1ad3      	subs	r3, r2, r3
 8101d5a:	2b64      	cmp	r3, #100	; 0x64
 8101d5c:	d902      	bls.n	8101d64 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8101d5e:	2303      	movs	r3, #3
 8101d60:	75fb      	strb	r3, [r7, #23]
        break;
 8101d62:	e005      	b.n	8101d70 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101d64:	4b75      	ldr	r3, [pc, #468]	; (8101f3c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8101d66:	681b      	ldr	r3, [r3, #0]
 8101d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101d6c:	2b00      	cmp	r3, #0
 8101d6e:	d0ef      	beq.n	8101d50 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8101d70:	7dfb      	ldrb	r3, [r7, #23]
 8101d72:	2b00      	cmp	r3, #0
 8101d74:	d168      	bne.n	8101e48 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101d76:	4b70      	ldr	r3, [pc, #448]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101d78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101d7a:	687b      	ldr	r3, [r7, #4]
 8101d7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d80:	4053      	eors	r3, r2
 8101d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101d86:	2b00      	cmp	r3, #0
 8101d88:	d013      	beq.n	8101db2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8101d8a:	4b6b      	ldr	r3, [pc, #428]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101d92:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8101d94:	4b68      	ldr	r3, [pc, #416]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101d98:	4a67      	ldr	r2, [pc, #412]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101d9e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8101da0:	4b65      	ldr	r3, [pc, #404]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101da4:	4a64      	ldr	r2, [pc, #400]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8101daa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8101dac:	4a62      	ldr	r2, [pc, #392]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101dae:	68fb      	ldr	r3, [r7, #12]
 8101db0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8101db2:	687b      	ldr	r3, [r7, #4]
 8101db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101dbc:	d115      	bne.n	8101dea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101dbe:	f7fe ff79 	bl	8100cb4 <HAL_GetTick>
 8101dc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101dc4:	e00b      	b.n	8101dde <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101dc6:	f7fe ff75 	bl	8100cb4 <HAL_GetTick>
 8101dca:	4602      	mov	r2, r0
 8101dcc:	693b      	ldr	r3, [r7, #16]
 8101dce:	1ad3      	subs	r3, r2, r3
 8101dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8101dd4:	4293      	cmp	r3, r2
 8101dd6:	d902      	bls.n	8101dde <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8101dd8:	2303      	movs	r3, #3
 8101dda:	75fb      	strb	r3, [r7, #23]
            break;
 8101ddc:	e005      	b.n	8101dea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101dde:	4b56      	ldr	r3, [pc, #344]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101de2:	f003 0302 	and.w	r3, r3, #2
 8101de6:	2b00      	cmp	r3, #0
 8101de8:	d0ed      	beq.n	8101dc6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8101dea:	7dfb      	ldrb	r3, [r7, #23]
 8101dec:	2b00      	cmp	r3, #0
 8101dee:	d128      	bne.n	8101e42 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8101dfe:	d10f      	bne.n	8101e20 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8101e00:	4b4d      	ldr	r3, [pc, #308]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101e02:	691b      	ldr	r3, [r3, #16]
 8101e04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101e0e:	091b      	lsrs	r3, r3, #4
 8101e10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8101e14:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8101e18:	4947      	ldr	r1, [pc, #284]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101e1a:	4313      	orrs	r3, r2
 8101e1c:	610b      	str	r3, [r1, #16]
 8101e1e:	e005      	b.n	8101e2c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8101e20:	4b45      	ldr	r3, [pc, #276]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101e22:	691b      	ldr	r3, [r3, #16]
 8101e24:	4a44      	ldr	r2, [pc, #272]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101e26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8101e2a:	6113      	str	r3, [r2, #16]
 8101e2c:	4b42      	ldr	r3, [pc, #264]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101e2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101e30:	687b      	ldr	r3, [r7, #4]
 8101e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8101e3a:	493f      	ldr	r1, [pc, #252]	; (8101f38 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101e3c:	4313      	orrs	r3, r2
 8101e3e:	670b      	str	r3, [r1, #112]	; 0x70
 8101e40:	e004      	b.n	8101e4c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8101e42:	7dfb      	ldrb	r3, [r7, #23]
 8101e44:	75bb      	strb	r3, [r7, #22]
 8101e46:	e001      	b.n	8101e4c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e48:	7dfb      	ldrb	r3, [r7, #23]
 8101e4a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8101e4c:	687b      	ldr	r3, [r7, #4]
 8101e4e:	681b      	ldr	r3, [r3, #0]
 8101e50:	f003 0301 	and.w	r3, r3, #1
 8101e54:	2b00      	cmp	r3, #0
 8101e56:	f000 8083 	beq.w	8101f60 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8101e5a:	687b      	ldr	r3, [r7, #4]
 8101e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101e5e:	2b28      	cmp	r3, #40	; 0x28
 8101e60:	d866      	bhi.n	8101f30 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8101e62:	a201      	add	r2, pc, #4	; (adr r2, 8101e68 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8101e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101e68:	08101f41 	.word	0x08101f41
 8101e6c:	08101f31 	.word	0x08101f31
 8101e70:	08101f31 	.word	0x08101f31
 8101e74:	08101f31 	.word	0x08101f31
 8101e78:	08101f31 	.word	0x08101f31
 8101e7c:	08101f31 	.word	0x08101f31
 8101e80:	08101f31 	.word	0x08101f31
 8101e84:	08101f31 	.word	0x08101f31
 8101e88:	08101f0d 	.word	0x08101f0d
 8101e8c:	08101f31 	.word	0x08101f31
 8101e90:	08101f31 	.word	0x08101f31
 8101e94:	08101f31 	.word	0x08101f31
 8101e98:	08101f31 	.word	0x08101f31
 8101e9c:	08101f31 	.word	0x08101f31
 8101ea0:	08101f31 	.word	0x08101f31
 8101ea4:	08101f31 	.word	0x08101f31
 8101ea8:	08101f1f 	.word	0x08101f1f
 8101eac:	08101f31 	.word	0x08101f31
 8101eb0:	08101f31 	.word	0x08101f31
 8101eb4:	08101f31 	.word	0x08101f31
 8101eb8:	08101f31 	.word	0x08101f31
 8101ebc:	08101f31 	.word	0x08101f31
 8101ec0:	08101f31 	.word	0x08101f31
 8101ec4:	08101f31 	.word	0x08101f31
 8101ec8:	08101f41 	.word	0x08101f41
 8101ecc:	08101f31 	.word	0x08101f31
 8101ed0:	08101f31 	.word	0x08101f31
 8101ed4:	08101f31 	.word	0x08101f31
 8101ed8:	08101f31 	.word	0x08101f31
 8101edc:	08101f31 	.word	0x08101f31
 8101ee0:	08101f31 	.word	0x08101f31
 8101ee4:	08101f31 	.word	0x08101f31
 8101ee8:	08101f41 	.word	0x08101f41
 8101eec:	08101f31 	.word	0x08101f31
 8101ef0:	08101f31 	.word	0x08101f31
 8101ef4:	08101f31 	.word	0x08101f31
 8101ef8:	08101f31 	.word	0x08101f31
 8101efc:	08101f31 	.word	0x08101f31
 8101f00:	08101f31 	.word	0x08101f31
 8101f04:	08101f31 	.word	0x08101f31
 8101f08:	08101f41 	.word	0x08101f41
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101f0c:	687b      	ldr	r3, [r7, #4]
 8101f0e:	3304      	adds	r3, #4
 8101f10:	2101      	movs	r1, #1
 8101f12:	4618      	mov	r0, r3
 8101f14:	f000 fdf8 	bl	8102b08 <RCCEx_PLL2_Config>
 8101f18:	4603      	mov	r3, r0
 8101f1a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101f1c:	e011      	b.n	8101f42 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101f1e:	687b      	ldr	r3, [r7, #4]
 8101f20:	3324      	adds	r3, #36	; 0x24
 8101f22:	2101      	movs	r1, #1
 8101f24:	4618      	mov	r0, r3
 8101f26:	f000 fea1 	bl	8102c6c <RCCEx_PLL3_Config>
 8101f2a:	4603      	mov	r3, r0
 8101f2c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101f2e:	e008      	b.n	8101f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101f30:	2301      	movs	r3, #1
 8101f32:	75fb      	strb	r3, [r7, #23]
      break;
 8101f34:	e005      	b.n	8101f42 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8101f36:	bf00      	nop
 8101f38:	58024400 	.word	0x58024400
 8101f3c:	58024800 	.word	0x58024800
      break;
 8101f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101f42:	7dfb      	ldrb	r3, [r7, #23]
 8101f44:	2b00      	cmp	r3, #0
 8101f46:	d109      	bne.n	8101f5c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8101f48:	4b96      	ldr	r3, [pc, #600]	; (81021a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101f4c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8101f50:	687b      	ldr	r3, [r7, #4]
 8101f52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101f54:	4993      	ldr	r1, [pc, #588]	; (81021a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101f56:	4313      	orrs	r3, r2
 8101f58:	654b      	str	r3, [r1, #84]	; 0x54
 8101f5a:	e001      	b.n	8101f60 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f5c:	7dfb      	ldrb	r3, [r7, #23]
 8101f5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	681b      	ldr	r3, [r3, #0]
 8101f64:	f003 0302 	and.w	r3, r3, #2
 8101f68:	2b00      	cmp	r3, #0
 8101f6a:	d038      	beq.n	8101fde <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101f70:	2b05      	cmp	r3, #5
 8101f72:	d821      	bhi.n	8101fb8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8101f74:	a201      	add	r2, pc, #4	; (adr r2, 8101f7c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8101f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101f7a:	bf00      	nop
 8101f7c:	08101fbf 	.word	0x08101fbf
 8101f80:	08101f95 	.word	0x08101f95
 8101f84:	08101fa7 	.word	0x08101fa7
 8101f88:	08101fbf 	.word	0x08101fbf
 8101f8c:	08101fbf 	.word	0x08101fbf
 8101f90:	08101fbf 	.word	0x08101fbf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	3304      	adds	r3, #4
 8101f98:	2101      	movs	r1, #1
 8101f9a:	4618      	mov	r0, r3
 8101f9c:	f000 fdb4 	bl	8102b08 <RCCEx_PLL2_Config>
 8101fa0:	4603      	mov	r3, r0
 8101fa2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101fa4:	e00c      	b.n	8101fc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101fa6:	687b      	ldr	r3, [r7, #4]
 8101fa8:	3324      	adds	r3, #36	; 0x24
 8101faa:	2101      	movs	r1, #1
 8101fac:	4618      	mov	r0, r3
 8101fae:	f000 fe5d 	bl	8102c6c <RCCEx_PLL3_Config>
 8101fb2:	4603      	mov	r3, r0
 8101fb4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101fb6:	e003      	b.n	8101fc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101fb8:	2301      	movs	r3, #1
 8101fba:	75fb      	strb	r3, [r7, #23]
      break;
 8101fbc:	e000      	b.n	8101fc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8101fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101fc0:	7dfb      	ldrb	r3, [r7, #23]
 8101fc2:	2b00      	cmp	r3, #0
 8101fc4:	d109      	bne.n	8101fda <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8101fc6:	4b77      	ldr	r3, [pc, #476]	; (81021a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101fca:	f023 0207 	bic.w	r2, r3, #7
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101fd2:	4974      	ldr	r1, [pc, #464]	; (81021a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8101fd4:	4313      	orrs	r3, r2
 8101fd6:	654b      	str	r3, [r1, #84]	; 0x54
 8101fd8:	e001      	b.n	8101fde <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101fda:	7dfb      	ldrb	r3, [r7, #23]
 8101fdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	681b      	ldr	r3, [r3, #0]
 8101fe2:	f003 0304 	and.w	r3, r3, #4
 8101fe6:	2b00      	cmp	r3, #0
 8101fe8:	d03a      	beq.n	8102060 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8101fea:	687b      	ldr	r3, [r7, #4]
 8101fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101ff0:	2b05      	cmp	r3, #5
 8101ff2:	d821      	bhi.n	8102038 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8101ff4:	a201      	add	r2, pc, #4	; (adr r2, 8101ffc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8101ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101ffa:	bf00      	nop
 8101ffc:	0810203f 	.word	0x0810203f
 8102000:	08102015 	.word	0x08102015
 8102004:	08102027 	.word	0x08102027
 8102008:	0810203f 	.word	0x0810203f
 810200c:	0810203f 	.word	0x0810203f
 8102010:	0810203f 	.word	0x0810203f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	3304      	adds	r3, #4
 8102018:	2101      	movs	r1, #1
 810201a:	4618      	mov	r0, r3
 810201c:	f000 fd74 	bl	8102b08 <RCCEx_PLL2_Config>
 8102020:	4603      	mov	r3, r0
 8102022:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8102024:	e00c      	b.n	8102040 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	3324      	adds	r3, #36	; 0x24
 810202a:	2101      	movs	r1, #1
 810202c:	4618      	mov	r0, r3
 810202e:	f000 fe1d 	bl	8102c6c <RCCEx_PLL3_Config>
 8102032:	4603      	mov	r3, r0
 8102034:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8102036:	e003      	b.n	8102040 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102038:	2301      	movs	r3, #1
 810203a:	75fb      	strb	r3, [r7, #23]
      break;
 810203c:	e000      	b.n	8102040 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 810203e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102040:	7dfb      	ldrb	r3, [r7, #23]
 8102042:	2b00      	cmp	r3, #0
 8102044:	d10a      	bne.n	810205c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102046:	4b57      	ldr	r3, [pc, #348]	; (81021a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810204a:	f023 0207 	bic.w	r2, r3, #7
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102054:	4953      	ldr	r1, [pc, #332]	; (81021a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102056:	4313      	orrs	r3, r2
 8102058:	658b      	str	r3, [r1, #88]	; 0x58
 810205a:	e001      	b.n	8102060 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810205c:	7dfb      	ldrb	r3, [r7, #23]
 810205e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	681b      	ldr	r3, [r3, #0]
 8102064:	f003 0320 	and.w	r3, r3, #32
 8102068:	2b00      	cmp	r3, #0
 810206a:	d04b      	beq.n	8102104 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102076:	d02e      	beq.n	81020d6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8102078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810207c:	d828      	bhi.n	81020d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810207e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102082:	d02a      	beq.n	81020da <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8102084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102088:	d822      	bhi.n	81020d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810208a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810208e:	d026      	beq.n	81020de <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8102090:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102094:	d81c      	bhi.n	81020d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8102096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810209a:	d010      	beq.n	81020be <HAL_RCCEx_PeriphCLKConfig+0x9be>
 810209c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81020a0:	d816      	bhi.n	81020d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81020a2:	2b00      	cmp	r3, #0
 81020a4:	d01d      	beq.n	81020e2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 81020a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81020aa:	d111      	bne.n	81020d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81020ac:	687b      	ldr	r3, [r7, #4]
 81020ae:	3304      	adds	r3, #4
 81020b0:	2100      	movs	r1, #0
 81020b2:	4618      	mov	r0, r3
 81020b4:	f000 fd28 	bl	8102b08 <RCCEx_PLL2_Config>
 81020b8:	4603      	mov	r3, r0
 81020ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81020bc:	e012      	b.n	81020e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81020be:	687b      	ldr	r3, [r7, #4]
 81020c0:	3324      	adds	r3, #36	; 0x24
 81020c2:	2102      	movs	r1, #2
 81020c4:	4618      	mov	r0, r3
 81020c6:	f000 fdd1 	bl	8102c6c <RCCEx_PLL3_Config>
 81020ca:	4603      	mov	r3, r0
 81020cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81020ce:	e009      	b.n	81020e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81020d0:	2301      	movs	r3, #1
 81020d2:	75fb      	strb	r3, [r7, #23]
      break;
 81020d4:	e006      	b.n	81020e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81020d6:	bf00      	nop
 81020d8:	e004      	b.n	81020e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81020da:	bf00      	nop
 81020dc:	e002      	b.n	81020e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81020de:	bf00      	nop
 81020e0:	e000      	b.n	81020e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81020e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81020e4:	7dfb      	ldrb	r3, [r7, #23]
 81020e6:	2b00      	cmp	r3, #0
 81020e8:	d10a      	bne.n	8102100 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81020ea:	4b2e      	ldr	r3, [pc, #184]	; (81021a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81020ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81020f2:	687b      	ldr	r3, [r7, #4]
 81020f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81020f8:	492a      	ldr	r1, [pc, #168]	; (81021a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81020fa:	4313      	orrs	r3, r2
 81020fc:	654b      	str	r3, [r1, #84]	; 0x54
 81020fe:	e001      	b.n	8102104 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102100:	7dfb      	ldrb	r3, [r7, #23]
 8102102:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102104:	687b      	ldr	r3, [r7, #4]
 8102106:	681b      	ldr	r3, [r3, #0]
 8102108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810210c:	2b00      	cmp	r3, #0
 810210e:	d04d      	beq.n	81021ac <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102116:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810211a:	d02e      	beq.n	810217a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 810211c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102120:	d828      	bhi.n	8102174 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8102122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102126:	d02a      	beq.n	810217e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8102128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810212c:	d822      	bhi.n	8102174 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810212e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102132:	d026      	beq.n	8102182 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8102134:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102138:	d81c      	bhi.n	8102174 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810213a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810213e:	d010      	beq.n	8102162 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8102140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102144:	d816      	bhi.n	8102174 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8102146:	2b00      	cmp	r3, #0
 8102148:	d01d      	beq.n	8102186 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 810214a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810214e:	d111      	bne.n	8102174 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102150:	687b      	ldr	r3, [r7, #4]
 8102152:	3304      	adds	r3, #4
 8102154:	2100      	movs	r1, #0
 8102156:	4618      	mov	r0, r3
 8102158:	f000 fcd6 	bl	8102b08 <RCCEx_PLL2_Config>
 810215c:	4603      	mov	r3, r0
 810215e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102160:	e012      	b.n	8102188 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102162:	687b      	ldr	r3, [r7, #4]
 8102164:	3324      	adds	r3, #36	; 0x24
 8102166:	2102      	movs	r1, #2
 8102168:	4618      	mov	r0, r3
 810216a:	f000 fd7f 	bl	8102c6c <RCCEx_PLL3_Config>
 810216e:	4603      	mov	r3, r0
 8102170:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102172:	e009      	b.n	8102188 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102174:	2301      	movs	r3, #1
 8102176:	75fb      	strb	r3, [r7, #23]
      break;
 8102178:	e006      	b.n	8102188 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810217a:	bf00      	nop
 810217c:	e004      	b.n	8102188 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810217e:	bf00      	nop
 8102180:	e002      	b.n	8102188 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8102182:	bf00      	nop
 8102184:	e000      	b.n	8102188 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8102186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102188:	7dfb      	ldrb	r3, [r7, #23]
 810218a:	2b00      	cmp	r3, #0
 810218c:	d10c      	bne.n	81021a8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810218e:	4b05      	ldr	r3, [pc, #20]	; (81021a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102192:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8102196:	687b      	ldr	r3, [r7, #4]
 8102198:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810219c:	4901      	ldr	r1, [pc, #4]	; (81021a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810219e:	4313      	orrs	r3, r2
 81021a0:	658b      	str	r3, [r1, #88]	; 0x58
 81021a2:	e003      	b.n	81021ac <HAL_RCCEx_PeriphCLKConfig+0xaac>
 81021a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021a8:	7dfb      	ldrb	r3, [r7, #23]
 81021aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81021ac:	687b      	ldr	r3, [r7, #4]
 81021ae:	681b      	ldr	r3, [r3, #0]
 81021b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81021b4:	2b00      	cmp	r3, #0
 81021b6:	d04b      	beq.n	8102250 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81021b8:	687b      	ldr	r3, [r7, #4]
 81021ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81021be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81021c2:	d02e      	beq.n	8102222 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81021c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81021c8:	d828      	bhi.n	810221c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81021ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81021ce:	d02a      	beq.n	8102226 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81021d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81021d4:	d822      	bhi.n	810221c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81021d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81021da:	d026      	beq.n	810222a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 81021dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81021e0:	d81c      	bhi.n	810221c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81021e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81021e6:	d010      	beq.n	810220a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81021e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81021ec:	d816      	bhi.n	810221c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81021ee:	2b00      	cmp	r3, #0
 81021f0:	d01d      	beq.n	810222e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81021f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81021f6:	d111      	bne.n	810221c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81021f8:	687b      	ldr	r3, [r7, #4]
 81021fa:	3304      	adds	r3, #4
 81021fc:	2100      	movs	r1, #0
 81021fe:	4618      	mov	r0, r3
 8102200:	f000 fc82 	bl	8102b08 <RCCEx_PLL2_Config>
 8102204:	4603      	mov	r3, r0
 8102206:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102208:	e012      	b.n	8102230 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	3324      	adds	r3, #36	; 0x24
 810220e:	2102      	movs	r1, #2
 8102210:	4618      	mov	r0, r3
 8102212:	f000 fd2b 	bl	8102c6c <RCCEx_PLL3_Config>
 8102216:	4603      	mov	r3, r0
 8102218:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810221a:	e009      	b.n	8102230 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810221c:	2301      	movs	r3, #1
 810221e:	75fb      	strb	r3, [r7, #23]
      break;
 8102220:	e006      	b.n	8102230 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8102222:	bf00      	nop
 8102224:	e004      	b.n	8102230 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8102226:	bf00      	nop
 8102228:	e002      	b.n	8102230 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810222a:	bf00      	nop
 810222c:	e000      	b.n	8102230 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810222e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102230:	7dfb      	ldrb	r3, [r7, #23]
 8102232:	2b00      	cmp	r3, #0
 8102234:	d10a      	bne.n	810224c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102236:	4b9d      	ldr	r3, [pc, #628]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810223a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810223e:	687b      	ldr	r3, [r7, #4]
 8102240:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102244:	4999      	ldr	r1, [pc, #612]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102246:	4313      	orrs	r3, r2
 8102248:	658b      	str	r3, [r1, #88]	; 0x58
 810224a:	e001      	b.n	8102250 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810224c:	7dfb      	ldrb	r3, [r7, #23]
 810224e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	681b      	ldr	r3, [r3, #0]
 8102254:	f003 0308 	and.w	r3, r3, #8
 8102258:	2b00      	cmp	r3, #0
 810225a:	d01a      	beq.n	8102292 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 810225c:	687b      	ldr	r3, [r7, #4]
 810225e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102266:	d10a      	bne.n	810227e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102268:	687b      	ldr	r3, [r7, #4]
 810226a:	3324      	adds	r3, #36	; 0x24
 810226c:	2102      	movs	r1, #2
 810226e:	4618      	mov	r0, r3
 8102270:	f000 fcfc 	bl	8102c6c <RCCEx_PLL3_Config>
 8102274:	4603      	mov	r3, r0
 8102276:	2b00      	cmp	r3, #0
 8102278:	d001      	beq.n	810227e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 810227a:	2301      	movs	r3, #1
 810227c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810227e:	4b8b      	ldr	r3, [pc, #556]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102282:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8102286:	687b      	ldr	r3, [r7, #4]
 8102288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810228c:	4987      	ldr	r1, [pc, #540]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810228e:	4313      	orrs	r3, r2
 8102290:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	681b      	ldr	r3, [r3, #0]
 8102296:	f003 0310 	and.w	r3, r3, #16
 810229a:	2b00      	cmp	r3, #0
 810229c:	d01a      	beq.n	81022d4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810229e:	687b      	ldr	r3, [r7, #4]
 81022a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81022a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81022a8:	d10a      	bne.n	81022c0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81022aa:	687b      	ldr	r3, [r7, #4]
 81022ac:	3324      	adds	r3, #36	; 0x24
 81022ae:	2102      	movs	r1, #2
 81022b0:	4618      	mov	r0, r3
 81022b2:	f000 fcdb 	bl	8102c6c <RCCEx_PLL3_Config>
 81022b6:	4603      	mov	r3, r0
 81022b8:	2b00      	cmp	r3, #0
 81022ba:	d001      	beq.n	81022c0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81022bc:	2301      	movs	r3, #1
 81022be:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81022c0:	4b7a      	ldr	r3, [pc, #488]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81022c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81022c8:	687b      	ldr	r3, [r7, #4]
 81022ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81022ce:	4977      	ldr	r1, [pc, #476]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81022d0:	4313      	orrs	r3, r2
 81022d2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81022d4:	687b      	ldr	r3, [r7, #4]
 81022d6:	681b      	ldr	r3, [r3, #0]
 81022d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81022dc:	2b00      	cmp	r3, #0
 81022de:	d034      	beq.n	810234a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81022e0:	687b      	ldr	r3, [r7, #4]
 81022e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81022e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81022ea:	d01d      	beq.n	8102328 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81022ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81022f0:	d817      	bhi.n	8102322 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81022f2:	2b00      	cmp	r3, #0
 81022f4:	d003      	beq.n	81022fe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81022f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81022fa:	d009      	beq.n	8102310 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81022fc:	e011      	b.n	8102322 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81022fe:	687b      	ldr	r3, [r7, #4]
 8102300:	3304      	adds	r3, #4
 8102302:	2100      	movs	r1, #0
 8102304:	4618      	mov	r0, r3
 8102306:	f000 fbff 	bl	8102b08 <RCCEx_PLL2_Config>
 810230a:	4603      	mov	r3, r0
 810230c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810230e:	e00c      	b.n	810232a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102310:	687b      	ldr	r3, [r7, #4]
 8102312:	3324      	adds	r3, #36	; 0x24
 8102314:	2102      	movs	r1, #2
 8102316:	4618      	mov	r0, r3
 8102318:	f000 fca8 	bl	8102c6c <RCCEx_PLL3_Config>
 810231c:	4603      	mov	r3, r0
 810231e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102320:	e003      	b.n	810232a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102322:	2301      	movs	r3, #1
 8102324:	75fb      	strb	r3, [r7, #23]
      break;
 8102326:	e000      	b.n	810232a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8102328:	bf00      	nop
    }

    if(ret == HAL_OK)
 810232a:	7dfb      	ldrb	r3, [r7, #23]
 810232c:	2b00      	cmp	r3, #0
 810232e:	d10a      	bne.n	8102346 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102330:	4b5e      	ldr	r3, [pc, #376]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102334:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8102338:	687b      	ldr	r3, [r7, #4]
 810233a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810233e:	495b      	ldr	r1, [pc, #364]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102340:	4313      	orrs	r3, r2
 8102342:	658b      	str	r3, [r1, #88]	; 0x58
 8102344:	e001      	b.n	810234a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102346:	7dfb      	ldrb	r3, [r7, #23]
 8102348:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	681b      	ldr	r3, [r3, #0]
 810234e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102352:	2b00      	cmp	r3, #0
 8102354:	d033      	beq.n	81023be <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810235c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102360:	d01c      	beq.n	810239c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8102362:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102366:	d816      	bhi.n	8102396 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8102368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810236c:	d003      	beq.n	8102376 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 810236e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102372:	d007      	beq.n	8102384 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8102374:	e00f      	b.n	8102396 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102376:	4b4d      	ldr	r3, [pc, #308]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810237a:	4a4c      	ldr	r2, [pc, #304]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102380:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8102382:	e00c      	b.n	810239e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102384:	687b      	ldr	r3, [r7, #4]
 8102386:	3324      	adds	r3, #36	; 0x24
 8102388:	2101      	movs	r1, #1
 810238a:	4618      	mov	r0, r3
 810238c:	f000 fc6e 	bl	8102c6c <RCCEx_PLL3_Config>
 8102390:	4603      	mov	r3, r0
 8102392:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8102394:	e003      	b.n	810239e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102396:	2301      	movs	r3, #1
 8102398:	75fb      	strb	r3, [r7, #23]
      break;
 810239a:	e000      	b.n	810239e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 810239c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810239e:	7dfb      	ldrb	r3, [r7, #23]
 81023a0:	2b00      	cmp	r3, #0
 81023a2:	d10a      	bne.n	81023ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81023a4:	4b41      	ldr	r3, [pc, #260]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81023a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81023ac:	687b      	ldr	r3, [r7, #4]
 81023ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81023b2:	493e      	ldr	r1, [pc, #248]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81023b4:	4313      	orrs	r3, r2
 81023b6:	654b      	str	r3, [r1, #84]	; 0x54
 81023b8:	e001      	b.n	81023be <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023ba:	7dfb      	ldrb	r3, [r7, #23]
 81023bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81023be:	687b      	ldr	r3, [r7, #4]
 81023c0:	681b      	ldr	r3, [r3, #0]
 81023c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81023c6:	2b00      	cmp	r3, #0
 81023c8:	d029      	beq.n	810241e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81023ca:	687b      	ldr	r3, [r7, #4]
 81023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81023ce:	2b00      	cmp	r3, #0
 81023d0:	d003      	beq.n	81023da <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81023d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81023d6:	d007      	beq.n	81023e8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81023d8:	e00f      	b.n	81023fa <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81023da:	4b34      	ldr	r3, [pc, #208]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81023de:	4a33      	ldr	r2, [pc, #204]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81023e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81023e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81023e6:	e00b      	b.n	8102400 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	3304      	adds	r3, #4
 81023ec:	2102      	movs	r1, #2
 81023ee:	4618      	mov	r0, r3
 81023f0:	f000 fb8a 	bl	8102b08 <RCCEx_PLL2_Config>
 81023f4:	4603      	mov	r3, r0
 81023f6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81023f8:	e002      	b.n	8102400 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 81023fa:	2301      	movs	r3, #1
 81023fc:	75fb      	strb	r3, [r7, #23]
      break;
 81023fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102400:	7dfb      	ldrb	r3, [r7, #23]
 8102402:	2b00      	cmp	r3, #0
 8102404:	d109      	bne.n	810241a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8102406:	4b29      	ldr	r3, [pc, #164]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810240a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810240e:	687b      	ldr	r3, [r7, #4]
 8102410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102412:	4926      	ldr	r1, [pc, #152]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102414:	4313      	orrs	r3, r2
 8102416:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102418:	e001      	b.n	810241e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810241a:	7dfb      	ldrb	r3, [r7, #23]
 810241c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	681b      	ldr	r3, [r3, #0]
 8102422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102426:	2b00      	cmp	r3, #0
 8102428:	d00a      	beq.n	8102440 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810242a:	687b      	ldr	r3, [r7, #4]
 810242c:	3324      	adds	r3, #36	; 0x24
 810242e:	2102      	movs	r1, #2
 8102430:	4618      	mov	r0, r3
 8102432:	f000 fc1b 	bl	8102c6c <RCCEx_PLL3_Config>
 8102436:	4603      	mov	r3, r0
 8102438:	2b00      	cmp	r3, #0
 810243a:	d001      	beq.n	8102440 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 810243c:	2301      	movs	r3, #1
 810243e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102440:	687b      	ldr	r3, [r7, #4]
 8102442:	681b      	ldr	r3, [r3, #0]
 8102444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102448:	2b00      	cmp	r3, #0
 810244a:	d033      	beq.n	81024b4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 810244c:	687b      	ldr	r3, [r7, #4]
 810244e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102454:	d017      	beq.n	8102486 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8102456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810245a:	d811      	bhi.n	8102480 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 810245c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102460:	d013      	beq.n	810248a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8102462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102466:	d80b      	bhi.n	8102480 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8102468:	2b00      	cmp	r3, #0
 810246a:	d010      	beq.n	810248e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 810246c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102470:	d106      	bne.n	8102480 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102472:	4b0e      	ldr	r3, [pc, #56]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102476:	4a0d      	ldr	r2, [pc, #52]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810247c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810247e:	e007      	b.n	8102490 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102480:	2301      	movs	r3, #1
 8102482:	75fb      	strb	r3, [r7, #23]
      break;
 8102484:	e004      	b.n	8102490 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8102486:	bf00      	nop
 8102488:	e002      	b.n	8102490 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810248a:	bf00      	nop
 810248c:	e000      	b.n	8102490 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810248e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102490:	7dfb      	ldrb	r3, [r7, #23]
 8102492:	2b00      	cmp	r3, #0
 8102494:	d10c      	bne.n	81024b0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102496:	4b05      	ldr	r3, [pc, #20]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810249a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81024a2:	4902      	ldr	r1, [pc, #8]	; (81024ac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81024a4:	4313      	orrs	r3, r2
 81024a6:	654b      	str	r3, [r1, #84]	; 0x54
 81024a8:	e004      	b.n	81024b4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81024aa:	bf00      	nop
 81024ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024b0:	7dfb      	ldrb	r3, [r7, #23]
 81024b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	681b      	ldr	r3, [r3, #0]
 81024b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81024bc:	2b00      	cmp	r3, #0
 81024be:	d008      	beq.n	81024d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81024c0:	4b31      	ldr	r3, [pc, #196]	; (8102588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81024c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81024c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81024cc:	492e      	ldr	r1, [pc, #184]	; (8102588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81024ce:	4313      	orrs	r3, r2
 81024d0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	681b      	ldr	r3, [r3, #0]
 81024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81024da:	2b00      	cmp	r3, #0
 81024dc:	d009      	beq.n	81024f2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81024de:	4b2a      	ldr	r3, [pc, #168]	; (8102588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81024e0:	691b      	ldr	r3, [r3, #16]
 81024e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81024e6:	687b      	ldr	r3, [r7, #4]
 81024e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81024ec:	4926      	ldr	r1, [pc, #152]	; (8102588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81024ee:	4313      	orrs	r3, r2
 81024f0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81024f2:	687b      	ldr	r3, [r7, #4]
 81024f4:	681b      	ldr	r3, [r3, #0]
 81024f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81024fa:	2b00      	cmp	r3, #0
 81024fc:	d008      	beq.n	8102510 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81024fe:	4b22      	ldr	r3, [pc, #136]	; (8102588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102502:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8102506:	687b      	ldr	r3, [r7, #4]
 8102508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810250a:	491f      	ldr	r1, [pc, #124]	; (8102588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810250c:	4313      	orrs	r3, r2
 810250e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	681b      	ldr	r3, [r3, #0]
 8102514:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8102518:	2b00      	cmp	r3, #0
 810251a:	d00d      	beq.n	8102538 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810251c:	4b1a      	ldr	r3, [pc, #104]	; (8102588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810251e:	691b      	ldr	r3, [r3, #16]
 8102520:	4a19      	ldr	r2, [pc, #100]	; (8102588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102522:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8102526:	6113      	str	r3, [r2, #16]
 8102528:	4b17      	ldr	r3, [pc, #92]	; (8102588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810252a:	691a      	ldr	r2, [r3, #16]
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8102532:	4915      	ldr	r1, [pc, #84]	; (8102588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102534:	4313      	orrs	r3, r2
 8102536:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102538:	687b      	ldr	r3, [r7, #4]
 810253a:	681b      	ldr	r3, [r3, #0]
 810253c:	2b00      	cmp	r3, #0
 810253e:	da08      	bge.n	8102552 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102540:	4b11      	ldr	r3, [pc, #68]	; (8102588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102544:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810254c:	490e      	ldr	r1, [pc, #56]	; (8102588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810254e:	4313      	orrs	r3, r2
 8102550:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810255a:	2b00      	cmp	r3, #0
 810255c:	d009      	beq.n	8102572 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810255e:	4b0a      	ldr	r3, [pc, #40]	; (8102588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102562:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8102566:	687b      	ldr	r3, [r7, #4]
 8102568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810256c:	4906      	ldr	r1, [pc, #24]	; (8102588 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810256e:	4313      	orrs	r3, r2
 8102570:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8102572:	7dbb      	ldrb	r3, [r7, #22]
 8102574:	2b00      	cmp	r3, #0
 8102576:	d101      	bne.n	810257c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8102578:	2300      	movs	r3, #0
 810257a:	e000      	b.n	810257e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 810257c:	2301      	movs	r3, #1
}
 810257e:	4618      	mov	r0, r3
 8102580:	3718      	adds	r7, #24
 8102582:	46bd      	mov	sp, r7
 8102584:	bd80      	pop	{r7, pc}
 8102586:	bf00      	nop
 8102588:	58024400 	.word	0x58024400

0810258c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810258c:	b580      	push	{r7, lr}
 810258e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8102590:	f7ff f858 	bl	8101644 <HAL_RCC_GetHCLKFreq>
 8102594:	4602      	mov	r2, r0
 8102596:	4b06      	ldr	r3, [pc, #24]	; (81025b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8102598:	6a1b      	ldr	r3, [r3, #32]
 810259a:	091b      	lsrs	r3, r3, #4
 810259c:	f003 0307 	and.w	r3, r3, #7
 81025a0:	4904      	ldr	r1, [pc, #16]	; (81025b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81025a2:	5ccb      	ldrb	r3, [r1, r3]
 81025a4:	f003 031f 	and.w	r3, r3, #31
 81025a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81025ac:	4618      	mov	r0, r3
 81025ae:	bd80      	pop	{r7, pc}
 81025b0:	58024400 	.word	0x58024400
 81025b4:	08104b00 	.word	0x08104b00

081025b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81025b8:	b480      	push	{r7}
 81025ba:	b089      	sub	sp, #36	; 0x24
 81025bc:	af00      	add	r7, sp, #0
 81025be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81025c0:	4ba1      	ldr	r3, [pc, #644]	; (8102848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81025c4:	f003 0303 	and.w	r3, r3, #3
 81025c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81025ca:	4b9f      	ldr	r3, [pc, #636]	; (8102848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81025ce:	0b1b      	lsrs	r3, r3, #12
 81025d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81025d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81025d6:	4b9c      	ldr	r3, [pc, #624]	; (8102848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81025da:	091b      	lsrs	r3, r3, #4
 81025dc:	f003 0301 	and.w	r3, r3, #1
 81025e0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81025e2:	4b99      	ldr	r3, [pc, #612]	; (8102848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81025e6:	08db      	lsrs	r3, r3, #3
 81025e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81025ec:	693a      	ldr	r2, [r7, #16]
 81025ee:	fb02 f303 	mul.w	r3, r2, r3
 81025f2:	ee07 3a90 	vmov	s15, r3
 81025f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81025fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81025fe:	697b      	ldr	r3, [r7, #20]
 8102600:	2b00      	cmp	r3, #0
 8102602:	f000 8111 	beq.w	8102828 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8102606:	69bb      	ldr	r3, [r7, #24]
 8102608:	2b02      	cmp	r3, #2
 810260a:	f000 8083 	beq.w	8102714 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810260e:	69bb      	ldr	r3, [r7, #24]
 8102610:	2b02      	cmp	r3, #2
 8102612:	f200 80a1 	bhi.w	8102758 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8102616:	69bb      	ldr	r3, [r7, #24]
 8102618:	2b00      	cmp	r3, #0
 810261a:	d003      	beq.n	8102624 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810261c:	69bb      	ldr	r3, [r7, #24]
 810261e:	2b01      	cmp	r3, #1
 8102620:	d056      	beq.n	81026d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8102622:	e099      	b.n	8102758 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102624:	4b88      	ldr	r3, [pc, #544]	; (8102848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102626:	681b      	ldr	r3, [r3, #0]
 8102628:	f003 0320 	and.w	r3, r3, #32
 810262c:	2b00      	cmp	r3, #0
 810262e:	d02d      	beq.n	810268c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102630:	4b85      	ldr	r3, [pc, #532]	; (8102848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102632:	681b      	ldr	r3, [r3, #0]
 8102634:	08db      	lsrs	r3, r3, #3
 8102636:	f003 0303 	and.w	r3, r3, #3
 810263a:	4a84      	ldr	r2, [pc, #528]	; (810284c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810263c:	fa22 f303 	lsr.w	r3, r2, r3
 8102640:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102642:	68bb      	ldr	r3, [r7, #8]
 8102644:	ee07 3a90 	vmov	s15, r3
 8102648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810264c:	697b      	ldr	r3, [r7, #20]
 810264e:	ee07 3a90 	vmov	s15, r3
 8102652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810265a:	4b7b      	ldr	r3, [pc, #492]	; (8102848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810265c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810265e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102662:	ee07 3a90 	vmov	s15, r3
 8102666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810266a:	ed97 6a03 	vldr	s12, [r7, #12]
 810266e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8102850 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810267a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810267e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102686:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810268a:	e087      	b.n	810279c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810268c:	697b      	ldr	r3, [r7, #20]
 810268e:	ee07 3a90 	vmov	s15, r3
 8102692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102696:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8102854 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810269a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810269e:	4b6a      	ldr	r3, [pc, #424]	; (8102848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81026a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81026a6:	ee07 3a90 	vmov	s15, r3
 81026aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81026ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81026b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8102850 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81026b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81026ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81026be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81026c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81026c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81026ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81026ce:	e065      	b.n	810279c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81026d0:	697b      	ldr	r3, [r7, #20]
 81026d2:	ee07 3a90 	vmov	s15, r3
 81026d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81026da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8102858 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81026de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81026e2:	4b59      	ldr	r3, [pc, #356]	; (8102848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81026e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81026ea:	ee07 3a90 	vmov	s15, r3
 81026ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81026f2:	ed97 6a03 	vldr	s12, [r7, #12]
 81026f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8102850 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81026fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81026fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810270a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810270e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102712:	e043      	b.n	810279c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102714:	697b      	ldr	r3, [r7, #20]
 8102716:	ee07 3a90 	vmov	s15, r3
 810271a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810271e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810285c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8102722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102726:	4b48      	ldr	r3, [pc, #288]	; (8102848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810272a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810272e:	ee07 3a90 	vmov	s15, r3
 8102732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102736:	ed97 6a03 	vldr	s12, [r7, #12]
 810273a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8102850 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810273e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810274a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810274e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102756:	e021      	b.n	810279c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102758:	697b      	ldr	r3, [r7, #20]
 810275a:	ee07 3a90 	vmov	s15, r3
 810275e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102762:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8102858 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8102766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810276a:	4b37      	ldr	r3, [pc, #220]	; (8102848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810276e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102772:	ee07 3a90 	vmov	s15, r3
 8102776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810277a:	ed97 6a03 	vldr	s12, [r7, #12]
 810277e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8102850 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810278a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810278e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102796:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810279a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810279c:	4b2a      	ldr	r3, [pc, #168]	; (8102848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81027a0:	0a5b      	lsrs	r3, r3, #9
 81027a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81027a6:	ee07 3a90 	vmov	s15, r3
 81027aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81027ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81027b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81027b6:	edd7 6a07 	vldr	s13, [r7, #28]
 81027ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81027be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81027c2:	ee17 2a90 	vmov	r2, s15
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 81027ca:	4b1f      	ldr	r3, [pc, #124]	; (8102848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81027ce:	0c1b      	lsrs	r3, r3, #16
 81027d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81027d4:	ee07 3a90 	vmov	s15, r3
 81027d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81027dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81027e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81027e4:	edd7 6a07 	vldr	s13, [r7, #28]
 81027e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81027ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81027f0:	ee17 2a90 	vmov	r2, s15
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81027f8:	4b13      	ldr	r3, [pc, #76]	; (8102848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81027fc:	0e1b      	lsrs	r3, r3, #24
 81027fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102802:	ee07 3a90 	vmov	s15, r3
 8102806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810280a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810280e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102812:	edd7 6a07 	vldr	s13, [r7, #28]
 8102816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810281a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810281e:	ee17 2a90 	vmov	r2, s15
 8102822:	687b      	ldr	r3, [r7, #4]
 8102824:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8102826:	e008      	b.n	810283a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	2200      	movs	r2, #0
 810282c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	2200      	movs	r2, #0
 8102832:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	2200      	movs	r2, #0
 8102838:	609a      	str	r2, [r3, #8]
}
 810283a:	bf00      	nop
 810283c:	3724      	adds	r7, #36	; 0x24
 810283e:	46bd      	mov	sp, r7
 8102840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102844:	4770      	bx	lr
 8102846:	bf00      	nop
 8102848:	58024400 	.word	0x58024400
 810284c:	03d09000 	.word	0x03d09000
 8102850:	46000000 	.word	0x46000000
 8102854:	4c742400 	.word	0x4c742400
 8102858:	4a742400 	.word	0x4a742400
 810285c:	4af42400 	.word	0x4af42400

08102860 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8102860:	b480      	push	{r7}
 8102862:	b089      	sub	sp, #36	; 0x24
 8102864:	af00      	add	r7, sp, #0
 8102866:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102868:	4ba1      	ldr	r3, [pc, #644]	; (8102af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810286c:	f003 0303 	and.w	r3, r3, #3
 8102870:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8102872:	4b9f      	ldr	r3, [pc, #636]	; (8102af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102876:	0d1b      	lsrs	r3, r3, #20
 8102878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810287c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810287e:	4b9c      	ldr	r3, [pc, #624]	; (8102af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102882:	0a1b      	lsrs	r3, r3, #8
 8102884:	f003 0301 	and.w	r3, r3, #1
 8102888:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810288a:	4b99      	ldr	r3, [pc, #612]	; (8102af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810288e:	08db      	lsrs	r3, r3, #3
 8102890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102894:	693a      	ldr	r2, [r7, #16]
 8102896:	fb02 f303 	mul.w	r3, r2, r3
 810289a:	ee07 3a90 	vmov	s15, r3
 810289e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81028a6:	697b      	ldr	r3, [r7, #20]
 81028a8:	2b00      	cmp	r3, #0
 81028aa:	f000 8111 	beq.w	8102ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81028ae:	69bb      	ldr	r3, [r7, #24]
 81028b0:	2b02      	cmp	r3, #2
 81028b2:	f000 8083 	beq.w	81029bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81028b6:	69bb      	ldr	r3, [r7, #24]
 81028b8:	2b02      	cmp	r3, #2
 81028ba:	f200 80a1 	bhi.w	8102a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81028be:	69bb      	ldr	r3, [r7, #24]
 81028c0:	2b00      	cmp	r3, #0
 81028c2:	d003      	beq.n	81028cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81028c4:	69bb      	ldr	r3, [r7, #24]
 81028c6:	2b01      	cmp	r3, #1
 81028c8:	d056      	beq.n	8102978 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81028ca:	e099      	b.n	8102a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81028cc:	4b88      	ldr	r3, [pc, #544]	; (8102af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81028ce:	681b      	ldr	r3, [r3, #0]
 81028d0:	f003 0320 	and.w	r3, r3, #32
 81028d4:	2b00      	cmp	r3, #0
 81028d6:	d02d      	beq.n	8102934 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81028d8:	4b85      	ldr	r3, [pc, #532]	; (8102af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81028da:	681b      	ldr	r3, [r3, #0]
 81028dc:	08db      	lsrs	r3, r3, #3
 81028de:	f003 0303 	and.w	r3, r3, #3
 81028e2:	4a84      	ldr	r2, [pc, #528]	; (8102af4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81028e4:	fa22 f303 	lsr.w	r3, r2, r3
 81028e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81028ea:	68bb      	ldr	r3, [r7, #8]
 81028ec:	ee07 3a90 	vmov	s15, r3
 81028f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028f4:	697b      	ldr	r3, [r7, #20]
 81028f6:	ee07 3a90 	vmov	s15, r3
 81028fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102902:	4b7b      	ldr	r3, [pc, #492]	; (8102af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810290a:	ee07 3a90 	vmov	s15, r3
 810290e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102912:	ed97 6a03 	vldr	s12, [r7, #12]
 8102916:	eddf 5a78 	vldr	s11, [pc, #480]	; 8102af8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810291a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810291e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810292a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810292e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8102932:	e087      	b.n	8102a44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102934:	697b      	ldr	r3, [r7, #20]
 8102936:	ee07 3a90 	vmov	s15, r3
 810293a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810293e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8102afc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8102942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102946:	4b6a      	ldr	r3, [pc, #424]	; (8102af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810294e:	ee07 3a90 	vmov	s15, r3
 8102952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102956:	ed97 6a03 	vldr	s12, [r7, #12]
 810295a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8102af8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810295e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810296a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102976:	e065      	b.n	8102a44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102978:	697b      	ldr	r3, [r7, #20]
 810297a:	ee07 3a90 	vmov	s15, r3
 810297e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102982:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8102b00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8102986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810298a:	4b59      	ldr	r3, [pc, #356]	; (8102af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810298e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102992:	ee07 3a90 	vmov	s15, r3
 8102996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810299a:	ed97 6a03 	vldr	s12, [r7, #12]
 810299e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8102af8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81029a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81029a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81029aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81029ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81029b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81029b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81029ba:	e043      	b.n	8102a44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81029bc:	697b      	ldr	r3, [r7, #20]
 81029be:	ee07 3a90 	vmov	s15, r3
 81029c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8102b04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81029ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81029ce:	4b48      	ldr	r3, [pc, #288]	; (8102af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81029d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81029d6:	ee07 3a90 	vmov	s15, r3
 81029da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81029de:	ed97 6a03 	vldr	s12, [r7, #12]
 81029e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8102af8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81029e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81029ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81029ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81029f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81029f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81029fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81029fe:	e021      	b.n	8102a44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102a00:	697b      	ldr	r3, [r7, #20]
 8102a02:	ee07 3a90 	vmov	s15, r3
 8102a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8102b00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8102a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102a12:	4b37      	ldr	r3, [pc, #220]	; (8102af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102a1a:	ee07 3a90 	vmov	s15, r3
 8102a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8102a26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8102af8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102a3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102a42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8102a44:	4b2a      	ldr	r3, [pc, #168]	; (8102af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102a48:	0a5b      	lsrs	r3, r3, #9
 8102a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102a4e:	ee07 3a90 	vmov	s15, r3
 8102a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102a5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102a5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8102a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102a6a:	ee17 2a90 	vmov	r2, s15
 8102a6e:	687b      	ldr	r3, [r7, #4]
 8102a70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8102a72:	4b1f      	ldr	r3, [pc, #124]	; (8102af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102a76:	0c1b      	lsrs	r3, r3, #16
 8102a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102a7c:	ee07 3a90 	vmov	s15, r3
 8102a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102a88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102a8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8102a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102a98:	ee17 2a90 	vmov	r2, s15
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8102aa0:	4b13      	ldr	r3, [pc, #76]	; (8102af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102aa4:	0e1b      	lsrs	r3, r3, #24
 8102aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102aaa:	ee07 3a90 	vmov	s15, r3
 8102aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102ab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102aba:	edd7 6a07 	vldr	s13, [r7, #28]
 8102abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102ac6:	ee17 2a90 	vmov	r2, s15
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8102ace:	e008      	b.n	8102ae2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8102ad0:	687b      	ldr	r3, [r7, #4]
 8102ad2:	2200      	movs	r2, #0
 8102ad4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8102ad6:	687b      	ldr	r3, [r7, #4]
 8102ad8:	2200      	movs	r2, #0
 8102ada:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8102adc:	687b      	ldr	r3, [r7, #4]
 8102ade:	2200      	movs	r2, #0
 8102ae0:	609a      	str	r2, [r3, #8]
}
 8102ae2:	bf00      	nop
 8102ae4:	3724      	adds	r7, #36	; 0x24
 8102ae6:	46bd      	mov	sp, r7
 8102ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aec:	4770      	bx	lr
 8102aee:	bf00      	nop
 8102af0:	58024400 	.word	0x58024400
 8102af4:	03d09000 	.word	0x03d09000
 8102af8:	46000000 	.word	0x46000000
 8102afc:	4c742400 	.word	0x4c742400
 8102b00:	4a742400 	.word	0x4a742400
 8102b04:	4af42400 	.word	0x4af42400

08102b08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102b08:	b580      	push	{r7, lr}
 8102b0a:	b084      	sub	sp, #16
 8102b0c:	af00      	add	r7, sp, #0
 8102b0e:	6078      	str	r0, [r7, #4]
 8102b10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102b12:	2300      	movs	r3, #0
 8102b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102b16:	4b54      	ldr	r3, [pc, #336]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102b1a:	f003 0303 	and.w	r3, r3, #3
 8102b1e:	2b03      	cmp	r3, #3
 8102b20:	d101      	bne.n	8102b26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8102b22:	2301      	movs	r3, #1
 8102b24:	e09b      	b.n	8102c5e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102b26:	4b50      	ldr	r3, [pc, #320]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102b28:	681b      	ldr	r3, [r3, #0]
 8102b2a:	4a4f      	ldr	r2, [pc, #316]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102b2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8102b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102b32:	f7fe f8bf 	bl	8100cb4 <HAL_GetTick>
 8102b36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102b38:	e008      	b.n	8102b4c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102b3a:	f7fe f8bb 	bl	8100cb4 <HAL_GetTick>
 8102b3e:	4602      	mov	r2, r0
 8102b40:	68bb      	ldr	r3, [r7, #8]
 8102b42:	1ad3      	subs	r3, r2, r3
 8102b44:	2b02      	cmp	r3, #2
 8102b46:	d901      	bls.n	8102b4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102b48:	2303      	movs	r3, #3
 8102b4a:	e088      	b.n	8102c5e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102b4c:	4b46      	ldr	r3, [pc, #280]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102b4e:	681b      	ldr	r3, [r3, #0]
 8102b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102b54:	2b00      	cmp	r3, #0
 8102b56:	d1f0      	bne.n	8102b3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102b58:	4b43      	ldr	r3, [pc, #268]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102b5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8102b60:	687b      	ldr	r3, [r7, #4]
 8102b62:	681b      	ldr	r3, [r3, #0]
 8102b64:	031b      	lsls	r3, r3, #12
 8102b66:	4940      	ldr	r1, [pc, #256]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102b68:	4313      	orrs	r3, r2
 8102b6a:	628b      	str	r3, [r1, #40]	; 0x28
 8102b6c:	687b      	ldr	r3, [r7, #4]
 8102b6e:	685b      	ldr	r3, [r3, #4]
 8102b70:	3b01      	subs	r3, #1
 8102b72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102b76:	687b      	ldr	r3, [r7, #4]
 8102b78:	689b      	ldr	r3, [r3, #8]
 8102b7a:	3b01      	subs	r3, #1
 8102b7c:	025b      	lsls	r3, r3, #9
 8102b7e:	b29b      	uxth	r3, r3
 8102b80:	431a      	orrs	r2, r3
 8102b82:	687b      	ldr	r3, [r7, #4]
 8102b84:	68db      	ldr	r3, [r3, #12]
 8102b86:	3b01      	subs	r3, #1
 8102b88:	041b      	lsls	r3, r3, #16
 8102b8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102b8e:	431a      	orrs	r2, r3
 8102b90:	687b      	ldr	r3, [r7, #4]
 8102b92:	691b      	ldr	r3, [r3, #16]
 8102b94:	3b01      	subs	r3, #1
 8102b96:	061b      	lsls	r3, r3, #24
 8102b98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102b9c:	4932      	ldr	r1, [pc, #200]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102b9e:	4313      	orrs	r3, r2
 8102ba0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102ba2:	4b31      	ldr	r3, [pc, #196]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ba6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8102baa:	687b      	ldr	r3, [r7, #4]
 8102bac:	695b      	ldr	r3, [r3, #20]
 8102bae:	492e      	ldr	r1, [pc, #184]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102bb0:	4313      	orrs	r3, r2
 8102bb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8102bb4:	4b2c      	ldr	r3, [pc, #176]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bb8:	f023 0220 	bic.w	r2, r3, #32
 8102bbc:	687b      	ldr	r3, [r7, #4]
 8102bbe:	699b      	ldr	r3, [r3, #24]
 8102bc0:	4929      	ldr	r1, [pc, #164]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102bc2:	4313      	orrs	r3, r2
 8102bc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8102bc6:	4b28      	ldr	r3, [pc, #160]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bca:	4a27      	ldr	r2, [pc, #156]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102bcc:	f023 0310 	bic.w	r3, r3, #16
 8102bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8102bd2:	4b25      	ldr	r3, [pc, #148]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102bda:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102bde:	687a      	ldr	r2, [r7, #4]
 8102be0:	69d2      	ldr	r2, [r2, #28]
 8102be2:	00d2      	lsls	r2, r2, #3
 8102be4:	4920      	ldr	r1, [pc, #128]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102be6:	4313      	orrs	r3, r2
 8102be8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8102bea:	4b1f      	ldr	r3, [pc, #124]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bee:	4a1e      	ldr	r2, [pc, #120]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102bf0:	f043 0310 	orr.w	r3, r3, #16
 8102bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102bf6:	683b      	ldr	r3, [r7, #0]
 8102bf8:	2b00      	cmp	r3, #0
 8102bfa:	d106      	bne.n	8102c0a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8102bfc:	4b1a      	ldr	r3, [pc, #104]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c00:	4a19      	ldr	r2, [pc, #100]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102c02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8102c06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102c08:	e00f      	b.n	8102c2a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102c0a:	683b      	ldr	r3, [r7, #0]
 8102c0c:	2b01      	cmp	r3, #1
 8102c0e:	d106      	bne.n	8102c1e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8102c10:	4b15      	ldr	r3, [pc, #84]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c14:	4a14      	ldr	r2, [pc, #80]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102c1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102c1c:	e005      	b.n	8102c2a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8102c1e:	4b12      	ldr	r3, [pc, #72]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c22:	4a11      	ldr	r2, [pc, #68]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102c24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102c28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8102c2a:	4b0f      	ldr	r3, [pc, #60]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102c2c:	681b      	ldr	r3, [r3, #0]
 8102c2e:	4a0e      	ldr	r2, [pc, #56]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102c30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8102c34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102c36:	f7fe f83d 	bl	8100cb4 <HAL_GetTick>
 8102c3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102c3c:	e008      	b.n	8102c50 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102c3e:	f7fe f839 	bl	8100cb4 <HAL_GetTick>
 8102c42:	4602      	mov	r2, r0
 8102c44:	68bb      	ldr	r3, [r7, #8]
 8102c46:	1ad3      	subs	r3, r2, r3
 8102c48:	2b02      	cmp	r3, #2
 8102c4a:	d901      	bls.n	8102c50 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102c4c:	2303      	movs	r3, #3
 8102c4e:	e006      	b.n	8102c5e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102c50:	4b05      	ldr	r3, [pc, #20]	; (8102c68 <RCCEx_PLL2_Config+0x160>)
 8102c52:	681b      	ldr	r3, [r3, #0]
 8102c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102c58:	2b00      	cmp	r3, #0
 8102c5a:	d0f0      	beq.n	8102c3e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8102c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8102c5e:	4618      	mov	r0, r3
 8102c60:	3710      	adds	r7, #16
 8102c62:	46bd      	mov	sp, r7
 8102c64:	bd80      	pop	{r7, pc}
 8102c66:	bf00      	nop
 8102c68:	58024400 	.word	0x58024400

08102c6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8102c6c:	b580      	push	{r7, lr}
 8102c6e:	b084      	sub	sp, #16
 8102c70:	af00      	add	r7, sp, #0
 8102c72:	6078      	str	r0, [r7, #4]
 8102c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102c76:	2300      	movs	r3, #0
 8102c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102c7a:	4b54      	ldr	r3, [pc, #336]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c7e:	f003 0303 	and.w	r3, r3, #3
 8102c82:	2b03      	cmp	r3, #3
 8102c84:	d101      	bne.n	8102c8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8102c86:	2301      	movs	r3, #1
 8102c88:	e09b      	b.n	8102dc2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8102c8a:	4b50      	ldr	r3, [pc, #320]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102c8c:	681b      	ldr	r3, [r3, #0]
 8102c8e:	4a4f      	ldr	r2, [pc, #316]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8102c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102c96:	f7fe f80d 	bl	8100cb4 <HAL_GetTick>
 8102c9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102c9c:	e008      	b.n	8102cb0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8102c9e:	f7fe f809 	bl	8100cb4 <HAL_GetTick>
 8102ca2:	4602      	mov	r2, r0
 8102ca4:	68bb      	ldr	r3, [r7, #8]
 8102ca6:	1ad3      	subs	r3, r2, r3
 8102ca8:	2b02      	cmp	r3, #2
 8102caa:	d901      	bls.n	8102cb0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102cac:	2303      	movs	r3, #3
 8102cae:	e088      	b.n	8102dc2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102cb0:	4b46      	ldr	r3, [pc, #280]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102cb2:	681b      	ldr	r3, [r3, #0]
 8102cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102cb8:	2b00      	cmp	r3, #0
 8102cba:	d1f0      	bne.n	8102c9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8102cbc:	4b43      	ldr	r3, [pc, #268]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102cc0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8102cc4:	687b      	ldr	r3, [r7, #4]
 8102cc6:	681b      	ldr	r3, [r3, #0]
 8102cc8:	051b      	lsls	r3, r3, #20
 8102cca:	4940      	ldr	r1, [pc, #256]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102ccc:	4313      	orrs	r3, r2
 8102cce:	628b      	str	r3, [r1, #40]	; 0x28
 8102cd0:	687b      	ldr	r3, [r7, #4]
 8102cd2:	685b      	ldr	r3, [r3, #4]
 8102cd4:	3b01      	subs	r3, #1
 8102cd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102cda:	687b      	ldr	r3, [r7, #4]
 8102cdc:	689b      	ldr	r3, [r3, #8]
 8102cde:	3b01      	subs	r3, #1
 8102ce0:	025b      	lsls	r3, r3, #9
 8102ce2:	b29b      	uxth	r3, r3
 8102ce4:	431a      	orrs	r2, r3
 8102ce6:	687b      	ldr	r3, [r7, #4]
 8102ce8:	68db      	ldr	r3, [r3, #12]
 8102cea:	3b01      	subs	r3, #1
 8102cec:	041b      	lsls	r3, r3, #16
 8102cee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102cf2:	431a      	orrs	r2, r3
 8102cf4:	687b      	ldr	r3, [r7, #4]
 8102cf6:	691b      	ldr	r3, [r3, #16]
 8102cf8:	3b01      	subs	r3, #1
 8102cfa:	061b      	lsls	r3, r3, #24
 8102cfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102d00:	4932      	ldr	r1, [pc, #200]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d02:	4313      	orrs	r3, r2
 8102d04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8102d06:	4b31      	ldr	r3, [pc, #196]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8102d0e:	687b      	ldr	r3, [r7, #4]
 8102d10:	695b      	ldr	r3, [r3, #20]
 8102d12:	492e      	ldr	r1, [pc, #184]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d14:	4313      	orrs	r3, r2
 8102d16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8102d18:	4b2c      	ldr	r3, [pc, #176]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8102d20:	687b      	ldr	r3, [r7, #4]
 8102d22:	699b      	ldr	r3, [r3, #24]
 8102d24:	4929      	ldr	r1, [pc, #164]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d26:	4313      	orrs	r3, r2
 8102d28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8102d2a:	4b28      	ldr	r3, [pc, #160]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d2e:	4a27      	ldr	r2, [pc, #156]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102d34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8102d36:	4b25      	ldr	r3, [pc, #148]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102d3e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102d42:	687a      	ldr	r2, [r7, #4]
 8102d44:	69d2      	ldr	r2, [r2, #28]
 8102d46:	00d2      	lsls	r2, r2, #3
 8102d48:	4920      	ldr	r1, [pc, #128]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d4a:	4313      	orrs	r3, r2
 8102d4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8102d4e:	4b1f      	ldr	r3, [pc, #124]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d52:	4a1e      	ldr	r2, [pc, #120]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102d58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102d5a:	683b      	ldr	r3, [r7, #0]
 8102d5c:	2b00      	cmp	r3, #0
 8102d5e:	d106      	bne.n	8102d6e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8102d60:	4b1a      	ldr	r3, [pc, #104]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d64:	4a19      	ldr	r2, [pc, #100]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102d6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102d6c:	e00f      	b.n	8102d8e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102d6e:	683b      	ldr	r3, [r7, #0]
 8102d70:	2b01      	cmp	r3, #1
 8102d72:	d106      	bne.n	8102d82 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8102d74:	4b15      	ldr	r3, [pc, #84]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d78:	4a14      	ldr	r2, [pc, #80]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102d80:	e005      	b.n	8102d8e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8102d82:	4b12      	ldr	r3, [pc, #72]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d86:	4a11      	ldr	r2, [pc, #68]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8102d8e:	4b0f      	ldr	r3, [pc, #60]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d90:	681b      	ldr	r3, [r3, #0]
 8102d92:	4a0e      	ldr	r2, [pc, #56]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102d98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102d9a:	f7fd ff8b 	bl	8100cb4 <HAL_GetTick>
 8102d9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102da0:	e008      	b.n	8102db4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8102da2:	f7fd ff87 	bl	8100cb4 <HAL_GetTick>
 8102da6:	4602      	mov	r2, r0
 8102da8:	68bb      	ldr	r3, [r7, #8]
 8102daa:	1ad3      	subs	r3, r2, r3
 8102dac:	2b02      	cmp	r3, #2
 8102dae:	d901      	bls.n	8102db4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102db0:	2303      	movs	r3, #3
 8102db2:	e006      	b.n	8102dc2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102db4:	4b05      	ldr	r3, [pc, #20]	; (8102dcc <RCCEx_PLL3_Config+0x160>)
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102dbc:	2b00      	cmp	r3, #0
 8102dbe:	d0f0      	beq.n	8102da2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8102dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8102dc2:	4618      	mov	r0, r3
 8102dc4:	3710      	adds	r7, #16
 8102dc6:	46bd      	mov	sp, r7
 8102dc8:	bd80      	pop	{r7, pc}
 8102dca:	bf00      	nop
 8102dcc:	58024400 	.word	0x58024400

08102dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8102dd0:	b580      	push	{r7, lr}
 8102dd2:	b082      	sub	sp, #8
 8102dd4:	af00      	add	r7, sp, #0
 8102dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8102dd8:	687b      	ldr	r3, [r7, #4]
 8102dda:	2b00      	cmp	r3, #0
 8102ddc:	d101      	bne.n	8102de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8102dde:	2301      	movs	r3, #1
 8102de0:	e042      	b.n	8102e68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8102de2:	687b      	ldr	r3, [r7, #4]
 8102de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102de8:	2b00      	cmp	r3, #0
 8102dea:	d106      	bne.n	8102dfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8102dec:	687b      	ldr	r3, [r7, #4]
 8102dee:	2200      	movs	r2, #0
 8102df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8102df4:	6878      	ldr	r0, [r7, #4]
 8102df6:	f7fd fdc5 	bl	8100984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8102dfa:	687b      	ldr	r3, [r7, #4]
 8102dfc:	2224      	movs	r2, #36	; 0x24
 8102dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8102e02:	687b      	ldr	r3, [r7, #4]
 8102e04:	681b      	ldr	r3, [r3, #0]
 8102e06:	681a      	ldr	r2, [r3, #0]
 8102e08:	687b      	ldr	r3, [r7, #4]
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	f022 0201 	bic.w	r2, r2, #1
 8102e10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8102e12:	6878      	ldr	r0, [r7, #4]
 8102e14:	f000 f996 	bl	8103144 <UART_SetConfig>
 8102e18:	4603      	mov	r3, r0
 8102e1a:	2b01      	cmp	r3, #1
 8102e1c:	d101      	bne.n	8102e22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8102e1e:	2301      	movs	r3, #1
 8102e20:	e022      	b.n	8102e68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8102e22:	687b      	ldr	r3, [r7, #4]
 8102e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102e26:	2b00      	cmp	r3, #0
 8102e28:	d002      	beq.n	8102e30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8102e2a:	6878      	ldr	r0, [r7, #4]
 8102e2c:	f000 fef2 	bl	8103c14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8102e30:	687b      	ldr	r3, [r7, #4]
 8102e32:	681b      	ldr	r3, [r3, #0]
 8102e34:	685a      	ldr	r2, [r3, #4]
 8102e36:	687b      	ldr	r3, [r7, #4]
 8102e38:	681b      	ldr	r3, [r3, #0]
 8102e3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8102e3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8102e40:	687b      	ldr	r3, [r7, #4]
 8102e42:	681b      	ldr	r3, [r3, #0]
 8102e44:	689a      	ldr	r2, [r3, #8]
 8102e46:	687b      	ldr	r3, [r7, #4]
 8102e48:	681b      	ldr	r3, [r3, #0]
 8102e4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8102e4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8102e50:	687b      	ldr	r3, [r7, #4]
 8102e52:	681b      	ldr	r3, [r3, #0]
 8102e54:	681a      	ldr	r2, [r3, #0]
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	681b      	ldr	r3, [r3, #0]
 8102e5a:	f042 0201 	orr.w	r2, r2, #1
 8102e5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8102e60:	6878      	ldr	r0, [r7, #4]
 8102e62:	f000 ff79 	bl	8103d58 <UART_CheckIdleState>
 8102e66:	4603      	mov	r3, r0
}
 8102e68:	4618      	mov	r0, r3
 8102e6a:	3708      	adds	r7, #8
 8102e6c:	46bd      	mov	sp, r7
 8102e6e:	bd80      	pop	{r7, pc}

08102e70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102e70:	b580      	push	{r7, lr}
 8102e72:	b08a      	sub	sp, #40	; 0x28
 8102e74:	af02      	add	r7, sp, #8
 8102e76:	60f8      	str	r0, [r7, #12]
 8102e78:	60b9      	str	r1, [r7, #8]
 8102e7a:	603b      	str	r3, [r7, #0]
 8102e7c:	4613      	mov	r3, r2
 8102e7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102e86:	2b20      	cmp	r3, #32
 8102e88:	f040 8083 	bne.w	8102f92 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8102e8c:	68bb      	ldr	r3, [r7, #8]
 8102e8e:	2b00      	cmp	r3, #0
 8102e90:	d002      	beq.n	8102e98 <HAL_UART_Transmit+0x28>
 8102e92:	88fb      	ldrh	r3, [r7, #6]
 8102e94:	2b00      	cmp	r3, #0
 8102e96:	d101      	bne.n	8102e9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8102e98:	2301      	movs	r3, #1
 8102e9a:	e07b      	b.n	8102f94 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8102e9c:	68fb      	ldr	r3, [r7, #12]
 8102e9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8102ea2:	2b01      	cmp	r3, #1
 8102ea4:	d101      	bne.n	8102eaa <HAL_UART_Transmit+0x3a>
 8102ea6:	2302      	movs	r3, #2
 8102ea8:	e074      	b.n	8102f94 <HAL_UART_Transmit+0x124>
 8102eaa:	68fb      	ldr	r3, [r7, #12]
 8102eac:	2201      	movs	r2, #1
 8102eae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8102eb2:	68fb      	ldr	r3, [r7, #12]
 8102eb4:	2200      	movs	r2, #0
 8102eb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8102eba:	68fb      	ldr	r3, [r7, #12]
 8102ebc:	2221      	movs	r2, #33	; 0x21
 8102ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8102ec2:	f7fd fef7 	bl	8100cb4 <HAL_GetTick>
 8102ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8102ec8:	68fb      	ldr	r3, [r7, #12]
 8102eca:	88fa      	ldrh	r2, [r7, #6]
 8102ecc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8102ed0:	68fb      	ldr	r3, [r7, #12]
 8102ed2:	88fa      	ldrh	r2, [r7, #6]
 8102ed4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8102ed8:	68fb      	ldr	r3, [r7, #12]
 8102eda:	689b      	ldr	r3, [r3, #8]
 8102edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102ee0:	d108      	bne.n	8102ef4 <HAL_UART_Transmit+0x84>
 8102ee2:	68fb      	ldr	r3, [r7, #12]
 8102ee4:	691b      	ldr	r3, [r3, #16]
 8102ee6:	2b00      	cmp	r3, #0
 8102ee8:	d104      	bne.n	8102ef4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8102eea:	2300      	movs	r3, #0
 8102eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8102eee:	68bb      	ldr	r3, [r7, #8]
 8102ef0:	61bb      	str	r3, [r7, #24]
 8102ef2:	e003      	b.n	8102efc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8102ef4:	68bb      	ldr	r3, [r7, #8]
 8102ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8102ef8:	2300      	movs	r3, #0
 8102efa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8102efc:	68fb      	ldr	r3, [r7, #12]
 8102efe:	2200      	movs	r2, #0
 8102f00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8102f04:	e02c      	b.n	8102f60 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8102f06:	683b      	ldr	r3, [r7, #0]
 8102f08:	9300      	str	r3, [sp, #0]
 8102f0a:	697b      	ldr	r3, [r7, #20]
 8102f0c:	2200      	movs	r2, #0
 8102f0e:	2180      	movs	r1, #128	; 0x80
 8102f10:	68f8      	ldr	r0, [r7, #12]
 8102f12:	f000 ff6c 	bl	8103dee <UART_WaitOnFlagUntilTimeout>
 8102f16:	4603      	mov	r3, r0
 8102f18:	2b00      	cmp	r3, #0
 8102f1a:	d001      	beq.n	8102f20 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8102f1c:	2303      	movs	r3, #3
 8102f1e:	e039      	b.n	8102f94 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8102f20:	69fb      	ldr	r3, [r7, #28]
 8102f22:	2b00      	cmp	r3, #0
 8102f24:	d10b      	bne.n	8102f3e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8102f26:	69bb      	ldr	r3, [r7, #24]
 8102f28:	881b      	ldrh	r3, [r3, #0]
 8102f2a:	461a      	mov	r2, r3
 8102f2c:	68fb      	ldr	r3, [r7, #12]
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8102f34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8102f36:	69bb      	ldr	r3, [r7, #24]
 8102f38:	3302      	adds	r3, #2
 8102f3a:	61bb      	str	r3, [r7, #24]
 8102f3c:	e007      	b.n	8102f4e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8102f3e:	69fb      	ldr	r3, [r7, #28]
 8102f40:	781a      	ldrb	r2, [r3, #0]
 8102f42:	68fb      	ldr	r3, [r7, #12]
 8102f44:	681b      	ldr	r3, [r3, #0]
 8102f46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8102f48:	69fb      	ldr	r3, [r7, #28]
 8102f4a:	3301      	adds	r3, #1
 8102f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8102f4e:	68fb      	ldr	r3, [r7, #12]
 8102f50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8102f54:	b29b      	uxth	r3, r3
 8102f56:	3b01      	subs	r3, #1
 8102f58:	b29a      	uxth	r2, r3
 8102f5a:	68fb      	ldr	r3, [r7, #12]
 8102f5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8102f60:	68fb      	ldr	r3, [r7, #12]
 8102f62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8102f66:	b29b      	uxth	r3, r3
 8102f68:	2b00      	cmp	r3, #0
 8102f6a:	d1cc      	bne.n	8102f06 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8102f6c:	683b      	ldr	r3, [r7, #0]
 8102f6e:	9300      	str	r3, [sp, #0]
 8102f70:	697b      	ldr	r3, [r7, #20]
 8102f72:	2200      	movs	r2, #0
 8102f74:	2140      	movs	r1, #64	; 0x40
 8102f76:	68f8      	ldr	r0, [r7, #12]
 8102f78:	f000 ff39 	bl	8103dee <UART_WaitOnFlagUntilTimeout>
 8102f7c:	4603      	mov	r3, r0
 8102f7e:	2b00      	cmp	r3, #0
 8102f80:	d001      	beq.n	8102f86 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8102f82:	2303      	movs	r3, #3
 8102f84:	e006      	b.n	8102f94 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8102f86:	68fb      	ldr	r3, [r7, #12]
 8102f88:	2220      	movs	r2, #32
 8102f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8102f8e:	2300      	movs	r3, #0
 8102f90:	e000      	b.n	8102f94 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8102f92:	2302      	movs	r3, #2
  }
}
 8102f94:	4618      	mov	r0, r3
 8102f96:	3720      	adds	r7, #32
 8102f98:	46bd      	mov	sp, r7
 8102f9a:	bd80      	pop	{r7, pc}

08102f9c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102f9c:	b580      	push	{r7, lr}
 8102f9e:	b08a      	sub	sp, #40	; 0x28
 8102fa0:	af02      	add	r7, sp, #8
 8102fa2:	60f8      	str	r0, [r7, #12]
 8102fa4:	60b9      	str	r1, [r7, #8]
 8102fa6:	603b      	str	r3, [r7, #0]
 8102fa8:	4613      	mov	r3, r2
 8102faa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8102fac:	68fb      	ldr	r3, [r7, #12]
 8102fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8102fb2:	2b20      	cmp	r3, #32
 8102fb4:	f040 80c0 	bne.w	8103138 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8102fb8:	68bb      	ldr	r3, [r7, #8]
 8102fba:	2b00      	cmp	r3, #0
 8102fbc:	d002      	beq.n	8102fc4 <HAL_UART_Receive+0x28>
 8102fbe:	88fb      	ldrh	r3, [r7, #6]
 8102fc0:	2b00      	cmp	r3, #0
 8102fc2:	d101      	bne.n	8102fc8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8102fc4:	2301      	movs	r3, #1
 8102fc6:	e0b8      	b.n	810313a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8102fc8:	68fb      	ldr	r3, [r7, #12]
 8102fca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8102fce:	2b01      	cmp	r3, #1
 8102fd0:	d101      	bne.n	8102fd6 <HAL_UART_Receive+0x3a>
 8102fd2:	2302      	movs	r3, #2
 8102fd4:	e0b1      	b.n	810313a <HAL_UART_Receive+0x19e>
 8102fd6:	68fb      	ldr	r3, [r7, #12]
 8102fd8:	2201      	movs	r2, #1
 8102fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8102fde:	68fb      	ldr	r3, [r7, #12]
 8102fe0:	2200      	movs	r2, #0
 8102fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8102fe6:	68fb      	ldr	r3, [r7, #12]
 8102fe8:	2222      	movs	r2, #34	; 0x22
 8102fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8102fee:	68fb      	ldr	r3, [r7, #12]
 8102ff0:	2200      	movs	r2, #0
 8102ff2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8102ff4:	f7fd fe5e 	bl	8100cb4 <HAL_GetTick>
 8102ff8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8102ffa:	68fb      	ldr	r3, [r7, #12]
 8102ffc:	88fa      	ldrh	r2, [r7, #6]
 8102ffe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8103002:	68fb      	ldr	r3, [r7, #12]
 8103004:	88fa      	ldrh	r2, [r7, #6]
 8103006:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 810300a:	68fb      	ldr	r3, [r7, #12]
 810300c:	689b      	ldr	r3, [r3, #8]
 810300e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103012:	d10e      	bne.n	8103032 <HAL_UART_Receive+0x96>
 8103014:	68fb      	ldr	r3, [r7, #12]
 8103016:	691b      	ldr	r3, [r3, #16]
 8103018:	2b00      	cmp	r3, #0
 810301a:	d105      	bne.n	8103028 <HAL_UART_Receive+0x8c>
 810301c:	68fb      	ldr	r3, [r7, #12]
 810301e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8103022:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8103026:	e02d      	b.n	8103084 <HAL_UART_Receive+0xe8>
 8103028:	68fb      	ldr	r3, [r7, #12]
 810302a:	22ff      	movs	r2, #255	; 0xff
 810302c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8103030:	e028      	b.n	8103084 <HAL_UART_Receive+0xe8>
 8103032:	68fb      	ldr	r3, [r7, #12]
 8103034:	689b      	ldr	r3, [r3, #8]
 8103036:	2b00      	cmp	r3, #0
 8103038:	d10d      	bne.n	8103056 <HAL_UART_Receive+0xba>
 810303a:	68fb      	ldr	r3, [r7, #12]
 810303c:	691b      	ldr	r3, [r3, #16]
 810303e:	2b00      	cmp	r3, #0
 8103040:	d104      	bne.n	810304c <HAL_UART_Receive+0xb0>
 8103042:	68fb      	ldr	r3, [r7, #12]
 8103044:	22ff      	movs	r2, #255	; 0xff
 8103046:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810304a:	e01b      	b.n	8103084 <HAL_UART_Receive+0xe8>
 810304c:	68fb      	ldr	r3, [r7, #12]
 810304e:	227f      	movs	r2, #127	; 0x7f
 8103050:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8103054:	e016      	b.n	8103084 <HAL_UART_Receive+0xe8>
 8103056:	68fb      	ldr	r3, [r7, #12]
 8103058:	689b      	ldr	r3, [r3, #8]
 810305a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810305e:	d10d      	bne.n	810307c <HAL_UART_Receive+0xe0>
 8103060:	68fb      	ldr	r3, [r7, #12]
 8103062:	691b      	ldr	r3, [r3, #16]
 8103064:	2b00      	cmp	r3, #0
 8103066:	d104      	bne.n	8103072 <HAL_UART_Receive+0xd6>
 8103068:	68fb      	ldr	r3, [r7, #12]
 810306a:	227f      	movs	r2, #127	; 0x7f
 810306c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8103070:	e008      	b.n	8103084 <HAL_UART_Receive+0xe8>
 8103072:	68fb      	ldr	r3, [r7, #12]
 8103074:	223f      	movs	r2, #63	; 0x3f
 8103076:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810307a:	e003      	b.n	8103084 <HAL_UART_Receive+0xe8>
 810307c:	68fb      	ldr	r3, [r7, #12]
 810307e:	2200      	movs	r2, #0
 8103080:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8103084:	68fb      	ldr	r3, [r7, #12]
 8103086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 810308a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810308c:	68fb      	ldr	r3, [r7, #12]
 810308e:	689b      	ldr	r3, [r3, #8]
 8103090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103094:	d108      	bne.n	81030a8 <HAL_UART_Receive+0x10c>
 8103096:	68fb      	ldr	r3, [r7, #12]
 8103098:	691b      	ldr	r3, [r3, #16]
 810309a:	2b00      	cmp	r3, #0
 810309c:	d104      	bne.n	81030a8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 810309e:	2300      	movs	r3, #0
 81030a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 81030a2:	68bb      	ldr	r3, [r7, #8]
 81030a4:	61bb      	str	r3, [r7, #24]
 81030a6:	e003      	b.n	81030b0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 81030a8:	68bb      	ldr	r3, [r7, #8]
 81030aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81030ac:	2300      	movs	r3, #0
 81030ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 81030b0:	68fb      	ldr	r3, [r7, #12]
 81030b2:	2200      	movs	r2, #0
 81030b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 81030b8:	e032      	b.n	8103120 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 81030ba:	683b      	ldr	r3, [r7, #0]
 81030bc:	9300      	str	r3, [sp, #0]
 81030be:	697b      	ldr	r3, [r7, #20]
 81030c0:	2200      	movs	r2, #0
 81030c2:	2120      	movs	r1, #32
 81030c4:	68f8      	ldr	r0, [r7, #12]
 81030c6:	f000 fe92 	bl	8103dee <UART_WaitOnFlagUntilTimeout>
 81030ca:	4603      	mov	r3, r0
 81030cc:	2b00      	cmp	r3, #0
 81030ce:	d001      	beq.n	81030d4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 81030d0:	2303      	movs	r3, #3
 81030d2:	e032      	b.n	810313a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 81030d4:	69fb      	ldr	r3, [r7, #28]
 81030d6:	2b00      	cmp	r3, #0
 81030d8:	d10c      	bne.n	81030f4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 81030da:	68fb      	ldr	r3, [r7, #12]
 81030dc:	681b      	ldr	r3, [r3, #0]
 81030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81030e0:	b29a      	uxth	r2, r3
 81030e2:	8a7b      	ldrh	r3, [r7, #18]
 81030e4:	4013      	ands	r3, r2
 81030e6:	b29a      	uxth	r2, r3
 81030e8:	69bb      	ldr	r3, [r7, #24]
 81030ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 81030ec:	69bb      	ldr	r3, [r7, #24]
 81030ee:	3302      	adds	r3, #2
 81030f0:	61bb      	str	r3, [r7, #24]
 81030f2:	e00c      	b.n	810310e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 81030f4:	68fb      	ldr	r3, [r7, #12]
 81030f6:	681b      	ldr	r3, [r3, #0]
 81030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81030fa:	b2da      	uxtb	r2, r3
 81030fc:	8a7b      	ldrh	r3, [r7, #18]
 81030fe:	b2db      	uxtb	r3, r3
 8103100:	4013      	ands	r3, r2
 8103102:	b2da      	uxtb	r2, r3
 8103104:	69fb      	ldr	r3, [r7, #28]
 8103106:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8103108:	69fb      	ldr	r3, [r7, #28]
 810310a:	3301      	adds	r3, #1
 810310c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810310e:	68fb      	ldr	r3, [r7, #12]
 8103110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8103114:	b29b      	uxth	r3, r3
 8103116:	3b01      	subs	r3, #1
 8103118:	b29a      	uxth	r2, r3
 810311a:	68fb      	ldr	r3, [r7, #12]
 810311c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8103120:	68fb      	ldr	r3, [r7, #12]
 8103122:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8103126:	b29b      	uxth	r3, r3
 8103128:	2b00      	cmp	r3, #0
 810312a:	d1c6      	bne.n	81030ba <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810312c:	68fb      	ldr	r3, [r7, #12]
 810312e:	2220      	movs	r2, #32
 8103130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8103134:	2300      	movs	r3, #0
 8103136:	e000      	b.n	810313a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8103138:	2302      	movs	r3, #2
  }
}
 810313a:	4618      	mov	r0, r3
 810313c:	3720      	adds	r7, #32
 810313e:	46bd      	mov	sp, r7
 8103140:	bd80      	pop	{r7, pc}
	...

08103144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8103144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103148:	b092      	sub	sp, #72	; 0x48
 810314a:	af00      	add	r7, sp, #0
 810314c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810314e:	2300      	movs	r3, #0
 8103150:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8103154:	697b      	ldr	r3, [r7, #20]
 8103156:	689a      	ldr	r2, [r3, #8]
 8103158:	697b      	ldr	r3, [r7, #20]
 810315a:	691b      	ldr	r3, [r3, #16]
 810315c:	431a      	orrs	r2, r3
 810315e:	697b      	ldr	r3, [r7, #20]
 8103160:	695b      	ldr	r3, [r3, #20]
 8103162:	431a      	orrs	r2, r3
 8103164:	697b      	ldr	r3, [r7, #20]
 8103166:	69db      	ldr	r3, [r3, #28]
 8103168:	4313      	orrs	r3, r2
 810316a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810316c:	697b      	ldr	r3, [r7, #20]
 810316e:	681b      	ldr	r3, [r3, #0]
 8103170:	681a      	ldr	r2, [r3, #0]
 8103172:	4bbd      	ldr	r3, [pc, #756]	; (8103468 <UART_SetConfig+0x324>)
 8103174:	4013      	ands	r3, r2
 8103176:	697a      	ldr	r2, [r7, #20]
 8103178:	6812      	ldr	r2, [r2, #0]
 810317a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810317c:	430b      	orrs	r3, r1
 810317e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8103180:	697b      	ldr	r3, [r7, #20]
 8103182:	681b      	ldr	r3, [r3, #0]
 8103184:	685b      	ldr	r3, [r3, #4]
 8103186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810318a:	697b      	ldr	r3, [r7, #20]
 810318c:	68da      	ldr	r2, [r3, #12]
 810318e:	697b      	ldr	r3, [r7, #20]
 8103190:	681b      	ldr	r3, [r3, #0]
 8103192:	430a      	orrs	r2, r1
 8103194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8103196:	697b      	ldr	r3, [r7, #20]
 8103198:	699b      	ldr	r3, [r3, #24]
 810319a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810319c:	697b      	ldr	r3, [r7, #20]
 810319e:	681b      	ldr	r3, [r3, #0]
 81031a0:	4ab2      	ldr	r2, [pc, #712]	; (810346c <UART_SetConfig+0x328>)
 81031a2:	4293      	cmp	r3, r2
 81031a4:	d004      	beq.n	81031b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81031a6:	697b      	ldr	r3, [r7, #20]
 81031a8:	6a1b      	ldr	r3, [r3, #32]
 81031aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81031ac:	4313      	orrs	r3, r2
 81031ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81031b0:	697b      	ldr	r3, [r7, #20]
 81031b2:	681b      	ldr	r3, [r3, #0]
 81031b4:	689b      	ldr	r3, [r3, #8]
 81031b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81031ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81031be:	697a      	ldr	r2, [r7, #20]
 81031c0:	6812      	ldr	r2, [r2, #0]
 81031c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81031c4:	430b      	orrs	r3, r1
 81031c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81031c8:	697b      	ldr	r3, [r7, #20]
 81031ca:	681b      	ldr	r3, [r3, #0]
 81031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031ce:	f023 010f 	bic.w	r1, r3, #15
 81031d2:	697b      	ldr	r3, [r7, #20]
 81031d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81031d6:	697b      	ldr	r3, [r7, #20]
 81031d8:	681b      	ldr	r3, [r3, #0]
 81031da:	430a      	orrs	r2, r1
 81031dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81031de:	697b      	ldr	r3, [r7, #20]
 81031e0:	681b      	ldr	r3, [r3, #0]
 81031e2:	4aa3      	ldr	r2, [pc, #652]	; (8103470 <UART_SetConfig+0x32c>)
 81031e4:	4293      	cmp	r3, r2
 81031e6:	d177      	bne.n	81032d8 <UART_SetConfig+0x194>
 81031e8:	4ba2      	ldr	r3, [pc, #648]	; (8103474 <UART_SetConfig+0x330>)
 81031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81031f0:	2b28      	cmp	r3, #40	; 0x28
 81031f2:	d86d      	bhi.n	81032d0 <UART_SetConfig+0x18c>
 81031f4:	a201      	add	r2, pc, #4	; (adr r2, 81031fc <UART_SetConfig+0xb8>)
 81031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81031fa:	bf00      	nop
 81031fc:	081032a1 	.word	0x081032a1
 8103200:	081032d1 	.word	0x081032d1
 8103204:	081032d1 	.word	0x081032d1
 8103208:	081032d1 	.word	0x081032d1
 810320c:	081032d1 	.word	0x081032d1
 8103210:	081032d1 	.word	0x081032d1
 8103214:	081032d1 	.word	0x081032d1
 8103218:	081032d1 	.word	0x081032d1
 810321c:	081032a9 	.word	0x081032a9
 8103220:	081032d1 	.word	0x081032d1
 8103224:	081032d1 	.word	0x081032d1
 8103228:	081032d1 	.word	0x081032d1
 810322c:	081032d1 	.word	0x081032d1
 8103230:	081032d1 	.word	0x081032d1
 8103234:	081032d1 	.word	0x081032d1
 8103238:	081032d1 	.word	0x081032d1
 810323c:	081032b1 	.word	0x081032b1
 8103240:	081032d1 	.word	0x081032d1
 8103244:	081032d1 	.word	0x081032d1
 8103248:	081032d1 	.word	0x081032d1
 810324c:	081032d1 	.word	0x081032d1
 8103250:	081032d1 	.word	0x081032d1
 8103254:	081032d1 	.word	0x081032d1
 8103258:	081032d1 	.word	0x081032d1
 810325c:	081032b9 	.word	0x081032b9
 8103260:	081032d1 	.word	0x081032d1
 8103264:	081032d1 	.word	0x081032d1
 8103268:	081032d1 	.word	0x081032d1
 810326c:	081032d1 	.word	0x081032d1
 8103270:	081032d1 	.word	0x081032d1
 8103274:	081032d1 	.word	0x081032d1
 8103278:	081032d1 	.word	0x081032d1
 810327c:	081032c1 	.word	0x081032c1
 8103280:	081032d1 	.word	0x081032d1
 8103284:	081032d1 	.word	0x081032d1
 8103288:	081032d1 	.word	0x081032d1
 810328c:	081032d1 	.word	0x081032d1
 8103290:	081032d1 	.word	0x081032d1
 8103294:	081032d1 	.word	0x081032d1
 8103298:	081032d1 	.word	0x081032d1
 810329c:	081032c9 	.word	0x081032c9
 81032a0:	2301      	movs	r3, #1
 81032a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81032a6:	e220      	b.n	81036ea <UART_SetConfig+0x5a6>
 81032a8:	2304      	movs	r3, #4
 81032aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81032ae:	e21c      	b.n	81036ea <UART_SetConfig+0x5a6>
 81032b0:	2308      	movs	r3, #8
 81032b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81032b6:	e218      	b.n	81036ea <UART_SetConfig+0x5a6>
 81032b8:	2310      	movs	r3, #16
 81032ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81032be:	e214      	b.n	81036ea <UART_SetConfig+0x5a6>
 81032c0:	2320      	movs	r3, #32
 81032c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81032c6:	e210      	b.n	81036ea <UART_SetConfig+0x5a6>
 81032c8:	2340      	movs	r3, #64	; 0x40
 81032ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81032ce:	e20c      	b.n	81036ea <UART_SetConfig+0x5a6>
 81032d0:	2380      	movs	r3, #128	; 0x80
 81032d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81032d6:	e208      	b.n	81036ea <UART_SetConfig+0x5a6>
 81032d8:	697b      	ldr	r3, [r7, #20]
 81032da:	681b      	ldr	r3, [r3, #0]
 81032dc:	4a66      	ldr	r2, [pc, #408]	; (8103478 <UART_SetConfig+0x334>)
 81032de:	4293      	cmp	r3, r2
 81032e0:	d130      	bne.n	8103344 <UART_SetConfig+0x200>
 81032e2:	4b64      	ldr	r3, [pc, #400]	; (8103474 <UART_SetConfig+0x330>)
 81032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032e6:	f003 0307 	and.w	r3, r3, #7
 81032ea:	2b05      	cmp	r3, #5
 81032ec:	d826      	bhi.n	810333c <UART_SetConfig+0x1f8>
 81032ee:	a201      	add	r2, pc, #4	; (adr r2, 81032f4 <UART_SetConfig+0x1b0>)
 81032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032f4:	0810330d 	.word	0x0810330d
 81032f8:	08103315 	.word	0x08103315
 81032fc:	0810331d 	.word	0x0810331d
 8103300:	08103325 	.word	0x08103325
 8103304:	0810332d 	.word	0x0810332d
 8103308:	08103335 	.word	0x08103335
 810330c:	2300      	movs	r3, #0
 810330e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103312:	e1ea      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103314:	2304      	movs	r3, #4
 8103316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810331a:	e1e6      	b.n	81036ea <UART_SetConfig+0x5a6>
 810331c:	2308      	movs	r3, #8
 810331e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103322:	e1e2      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103324:	2310      	movs	r3, #16
 8103326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810332a:	e1de      	b.n	81036ea <UART_SetConfig+0x5a6>
 810332c:	2320      	movs	r3, #32
 810332e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103332:	e1da      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103334:	2340      	movs	r3, #64	; 0x40
 8103336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810333a:	e1d6      	b.n	81036ea <UART_SetConfig+0x5a6>
 810333c:	2380      	movs	r3, #128	; 0x80
 810333e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103342:	e1d2      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103344:	697b      	ldr	r3, [r7, #20]
 8103346:	681b      	ldr	r3, [r3, #0]
 8103348:	4a4c      	ldr	r2, [pc, #304]	; (810347c <UART_SetConfig+0x338>)
 810334a:	4293      	cmp	r3, r2
 810334c:	d130      	bne.n	81033b0 <UART_SetConfig+0x26c>
 810334e:	4b49      	ldr	r3, [pc, #292]	; (8103474 <UART_SetConfig+0x330>)
 8103350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103352:	f003 0307 	and.w	r3, r3, #7
 8103356:	2b05      	cmp	r3, #5
 8103358:	d826      	bhi.n	81033a8 <UART_SetConfig+0x264>
 810335a:	a201      	add	r2, pc, #4	; (adr r2, 8103360 <UART_SetConfig+0x21c>)
 810335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103360:	08103379 	.word	0x08103379
 8103364:	08103381 	.word	0x08103381
 8103368:	08103389 	.word	0x08103389
 810336c:	08103391 	.word	0x08103391
 8103370:	08103399 	.word	0x08103399
 8103374:	081033a1 	.word	0x081033a1
 8103378:	2300      	movs	r3, #0
 810337a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810337e:	e1b4      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103380:	2304      	movs	r3, #4
 8103382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103386:	e1b0      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103388:	2308      	movs	r3, #8
 810338a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810338e:	e1ac      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103390:	2310      	movs	r3, #16
 8103392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103396:	e1a8      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103398:	2320      	movs	r3, #32
 810339a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810339e:	e1a4      	b.n	81036ea <UART_SetConfig+0x5a6>
 81033a0:	2340      	movs	r3, #64	; 0x40
 81033a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81033a6:	e1a0      	b.n	81036ea <UART_SetConfig+0x5a6>
 81033a8:	2380      	movs	r3, #128	; 0x80
 81033aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81033ae:	e19c      	b.n	81036ea <UART_SetConfig+0x5a6>
 81033b0:	697b      	ldr	r3, [r7, #20]
 81033b2:	681b      	ldr	r3, [r3, #0]
 81033b4:	4a32      	ldr	r2, [pc, #200]	; (8103480 <UART_SetConfig+0x33c>)
 81033b6:	4293      	cmp	r3, r2
 81033b8:	d130      	bne.n	810341c <UART_SetConfig+0x2d8>
 81033ba:	4b2e      	ldr	r3, [pc, #184]	; (8103474 <UART_SetConfig+0x330>)
 81033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033be:	f003 0307 	and.w	r3, r3, #7
 81033c2:	2b05      	cmp	r3, #5
 81033c4:	d826      	bhi.n	8103414 <UART_SetConfig+0x2d0>
 81033c6:	a201      	add	r2, pc, #4	; (adr r2, 81033cc <UART_SetConfig+0x288>)
 81033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81033cc:	081033e5 	.word	0x081033e5
 81033d0:	081033ed 	.word	0x081033ed
 81033d4:	081033f5 	.word	0x081033f5
 81033d8:	081033fd 	.word	0x081033fd
 81033dc:	08103405 	.word	0x08103405
 81033e0:	0810340d 	.word	0x0810340d
 81033e4:	2300      	movs	r3, #0
 81033e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81033ea:	e17e      	b.n	81036ea <UART_SetConfig+0x5a6>
 81033ec:	2304      	movs	r3, #4
 81033ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81033f2:	e17a      	b.n	81036ea <UART_SetConfig+0x5a6>
 81033f4:	2308      	movs	r3, #8
 81033f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81033fa:	e176      	b.n	81036ea <UART_SetConfig+0x5a6>
 81033fc:	2310      	movs	r3, #16
 81033fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103402:	e172      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103404:	2320      	movs	r3, #32
 8103406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810340a:	e16e      	b.n	81036ea <UART_SetConfig+0x5a6>
 810340c:	2340      	movs	r3, #64	; 0x40
 810340e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103412:	e16a      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103414:	2380      	movs	r3, #128	; 0x80
 8103416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810341a:	e166      	b.n	81036ea <UART_SetConfig+0x5a6>
 810341c:	697b      	ldr	r3, [r7, #20]
 810341e:	681b      	ldr	r3, [r3, #0]
 8103420:	4a18      	ldr	r2, [pc, #96]	; (8103484 <UART_SetConfig+0x340>)
 8103422:	4293      	cmp	r3, r2
 8103424:	d140      	bne.n	81034a8 <UART_SetConfig+0x364>
 8103426:	4b13      	ldr	r3, [pc, #76]	; (8103474 <UART_SetConfig+0x330>)
 8103428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810342a:	f003 0307 	and.w	r3, r3, #7
 810342e:	2b05      	cmp	r3, #5
 8103430:	d836      	bhi.n	81034a0 <UART_SetConfig+0x35c>
 8103432:	a201      	add	r2, pc, #4	; (adr r2, 8103438 <UART_SetConfig+0x2f4>)
 8103434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103438:	08103451 	.word	0x08103451
 810343c:	08103459 	.word	0x08103459
 8103440:	08103461 	.word	0x08103461
 8103444:	08103489 	.word	0x08103489
 8103448:	08103491 	.word	0x08103491
 810344c:	08103499 	.word	0x08103499
 8103450:	2300      	movs	r3, #0
 8103452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103456:	e148      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103458:	2304      	movs	r3, #4
 810345a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810345e:	e144      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103460:	2308      	movs	r3, #8
 8103462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103466:	e140      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103468:	cfff69f3 	.word	0xcfff69f3
 810346c:	58000c00 	.word	0x58000c00
 8103470:	40011000 	.word	0x40011000
 8103474:	58024400 	.word	0x58024400
 8103478:	40004400 	.word	0x40004400
 810347c:	40004800 	.word	0x40004800
 8103480:	40004c00 	.word	0x40004c00
 8103484:	40005000 	.word	0x40005000
 8103488:	2310      	movs	r3, #16
 810348a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810348e:	e12c      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103490:	2320      	movs	r3, #32
 8103492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103496:	e128      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103498:	2340      	movs	r3, #64	; 0x40
 810349a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810349e:	e124      	b.n	81036ea <UART_SetConfig+0x5a6>
 81034a0:	2380      	movs	r3, #128	; 0x80
 81034a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81034a6:	e120      	b.n	81036ea <UART_SetConfig+0x5a6>
 81034a8:	697b      	ldr	r3, [r7, #20]
 81034aa:	681b      	ldr	r3, [r3, #0]
 81034ac:	4acb      	ldr	r2, [pc, #812]	; (81037dc <UART_SetConfig+0x698>)
 81034ae:	4293      	cmp	r3, r2
 81034b0:	d176      	bne.n	81035a0 <UART_SetConfig+0x45c>
 81034b2:	4bcb      	ldr	r3, [pc, #812]	; (81037e0 <UART_SetConfig+0x69c>)
 81034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81034ba:	2b28      	cmp	r3, #40	; 0x28
 81034bc:	d86c      	bhi.n	8103598 <UART_SetConfig+0x454>
 81034be:	a201      	add	r2, pc, #4	; (adr r2, 81034c4 <UART_SetConfig+0x380>)
 81034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81034c4:	08103569 	.word	0x08103569
 81034c8:	08103599 	.word	0x08103599
 81034cc:	08103599 	.word	0x08103599
 81034d0:	08103599 	.word	0x08103599
 81034d4:	08103599 	.word	0x08103599
 81034d8:	08103599 	.word	0x08103599
 81034dc:	08103599 	.word	0x08103599
 81034e0:	08103599 	.word	0x08103599
 81034e4:	08103571 	.word	0x08103571
 81034e8:	08103599 	.word	0x08103599
 81034ec:	08103599 	.word	0x08103599
 81034f0:	08103599 	.word	0x08103599
 81034f4:	08103599 	.word	0x08103599
 81034f8:	08103599 	.word	0x08103599
 81034fc:	08103599 	.word	0x08103599
 8103500:	08103599 	.word	0x08103599
 8103504:	08103579 	.word	0x08103579
 8103508:	08103599 	.word	0x08103599
 810350c:	08103599 	.word	0x08103599
 8103510:	08103599 	.word	0x08103599
 8103514:	08103599 	.word	0x08103599
 8103518:	08103599 	.word	0x08103599
 810351c:	08103599 	.word	0x08103599
 8103520:	08103599 	.word	0x08103599
 8103524:	08103581 	.word	0x08103581
 8103528:	08103599 	.word	0x08103599
 810352c:	08103599 	.word	0x08103599
 8103530:	08103599 	.word	0x08103599
 8103534:	08103599 	.word	0x08103599
 8103538:	08103599 	.word	0x08103599
 810353c:	08103599 	.word	0x08103599
 8103540:	08103599 	.word	0x08103599
 8103544:	08103589 	.word	0x08103589
 8103548:	08103599 	.word	0x08103599
 810354c:	08103599 	.word	0x08103599
 8103550:	08103599 	.word	0x08103599
 8103554:	08103599 	.word	0x08103599
 8103558:	08103599 	.word	0x08103599
 810355c:	08103599 	.word	0x08103599
 8103560:	08103599 	.word	0x08103599
 8103564:	08103591 	.word	0x08103591
 8103568:	2301      	movs	r3, #1
 810356a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810356e:	e0bc      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103570:	2304      	movs	r3, #4
 8103572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103576:	e0b8      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103578:	2308      	movs	r3, #8
 810357a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810357e:	e0b4      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103580:	2310      	movs	r3, #16
 8103582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103586:	e0b0      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103588:	2320      	movs	r3, #32
 810358a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810358e:	e0ac      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103590:	2340      	movs	r3, #64	; 0x40
 8103592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103596:	e0a8      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103598:	2380      	movs	r3, #128	; 0x80
 810359a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810359e:	e0a4      	b.n	81036ea <UART_SetConfig+0x5a6>
 81035a0:	697b      	ldr	r3, [r7, #20]
 81035a2:	681b      	ldr	r3, [r3, #0]
 81035a4:	4a8f      	ldr	r2, [pc, #572]	; (81037e4 <UART_SetConfig+0x6a0>)
 81035a6:	4293      	cmp	r3, r2
 81035a8:	d130      	bne.n	810360c <UART_SetConfig+0x4c8>
 81035aa:	4b8d      	ldr	r3, [pc, #564]	; (81037e0 <UART_SetConfig+0x69c>)
 81035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81035ae:	f003 0307 	and.w	r3, r3, #7
 81035b2:	2b05      	cmp	r3, #5
 81035b4:	d826      	bhi.n	8103604 <UART_SetConfig+0x4c0>
 81035b6:	a201      	add	r2, pc, #4	; (adr r2, 81035bc <UART_SetConfig+0x478>)
 81035b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81035bc:	081035d5 	.word	0x081035d5
 81035c0:	081035dd 	.word	0x081035dd
 81035c4:	081035e5 	.word	0x081035e5
 81035c8:	081035ed 	.word	0x081035ed
 81035cc:	081035f5 	.word	0x081035f5
 81035d0:	081035fd 	.word	0x081035fd
 81035d4:	2300      	movs	r3, #0
 81035d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81035da:	e086      	b.n	81036ea <UART_SetConfig+0x5a6>
 81035dc:	2304      	movs	r3, #4
 81035de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81035e2:	e082      	b.n	81036ea <UART_SetConfig+0x5a6>
 81035e4:	2308      	movs	r3, #8
 81035e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81035ea:	e07e      	b.n	81036ea <UART_SetConfig+0x5a6>
 81035ec:	2310      	movs	r3, #16
 81035ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81035f2:	e07a      	b.n	81036ea <UART_SetConfig+0x5a6>
 81035f4:	2320      	movs	r3, #32
 81035f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81035fa:	e076      	b.n	81036ea <UART_SetConfig+0x5a6>
 81035fc:	2340      	movs	r3, #64	; 0x40
 81035fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103602:	e072      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103604:	2380      	movs	r3, #128	; 0x80
 8103606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810360a:	e06e      	b.n	81036ea <UART_SetConfig+0x5a6>
 810360c:	697b      	ldr	r3, [r7, #20]
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	4a75      	ldr	r2, [pc, #468]	; (81037e8 <UART_SetConfig+0x6a4>)
 8103612:	4293      	cmp	r3, r2
 8103614:	d130      	bne.n	8103678 <UART_SetConfig+0x534>
 8103616:	4b72      	ldr	r3, [pc, #456]	; (81037e0 <UART_SetConfig+0x69c>)
 8103618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810361a:	f003 0307 	and.w	r3, r3, #7
 810361e:	2b05      	cmp	r3, #5
 8103620:	d826      	bhi.n	8103670 <UART_SetConfig+0x52c>
 8103622:	a201      	add	r2, pc, #4	; (adr r2, 8103628 <UART_SetConfig+0x4e4>)
 8103624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103628:	08103641 	.word	0x08103641
 810362c:	08103649 	.word	0x08103649
 8103630:	08103651 	.word	0x08103651
 8103634:	08103659 	.word	0x08103659
 8103638:	08103661 	.word	0x08103661
 810363c:	08103669 	.word	0x08103669
 8103640:	2300      	movs	r3, #0
 8103642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103646:	e050      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103648:	2304      	movs	r3, #4
 810364a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810364e:	e04c      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103650:	2308      	movs	r3, #8
 8103652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103656:	e048      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103658:	2310      	movs	r3, #16
 810365a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810365e:	e044      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103660:	2320      	movs	r3, #32
 8103662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103666:	e040      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103668:	2340      	movs	r3, #64	; 0x40
 810366a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810366e:	e03c      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103670:	2380      	movs	r3, #128	; 0x80
 8103672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103676:	e038      	b.n	81036ea <UART_SetConfig+0x5a6>
 8103678:	697b      	ldr	r3, [r7, #20]
 810367a:	681b      	ldr	r3, [r3, #0]
 810367c:	4a5b      	ldr	r2, [pc, #364]	; (81037ec <UART_SetConfig+0x6a8>)
 810367e:	4293      	cmp	r3, r2
 8103680:	d130      	bne.n	81036e4 <UART_SetConfig+0x5a0>
 8103682:	4b57      	ldr	r3, [pc, #348]	; (81037e0 <UART_SetConfig+0x69c>)
 8103684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103686:	f003 0307 	and.w	r3, r3, #7
 810368a:	2b05      	cmp	r3, #5
 810368c:	d826      	bhi.n	81036dc <UART_SetConfig+0x598>
 810368e:	a201      	add	r2, pc, #4	; (adr r2, 8103694 <UART_SetConfig+0x550>)
 8103690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103694:	081036ad 	.word	0x081036ad
 8103698:	081036b5 	.word	0x081036b5
 810369c:	081036bd 	.word	0x081036bd
 81036a0:	081036c5 	.word	0x081036c5
 81036a4:	081036cd 	.word	0x081036cd
 81036a8:	081036d5 	.word	0x081036d5
 81036ac:	2302      	movs	r3, #2
 81036ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81036b2:	e01a      	b.n	81036ea <UART_SetConfig+0x5a6>
 81036b4:	2304      	movs	r3, #4
 81036b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81036ba:	e016      	b.n	81036ea <UART_SetConfig+0x5a6>
 81036bc:	2308      	movs	r3, #8
 81036be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81036c2:	e012      	b.n	81036ea <UART_SetConfig+0x5a6>
 81036c4:	2310      	movs	r3, #16
 81036c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81036ca:	e00e      	b.n	81036ea <UART_SetConfig+0x5a6>
 81036cc:	2320      	movs	r3, #32
 81036ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81036d2:	e00a      	b.n	81036ea <UART_SetConfig+0x5a6>
 81036d4:	2340      	movs	r3, #64	; 0x40
 81036d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81036da:	e006      	b.n	81036ea <UART_SetConfig+0x5a6>
 81036dc:	2380      	movs	r3, #128	; 0x80
 81036de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81036e2:	e002      	b.n	81036ea <UART_SetConfig+0x5a6>
 81036e4:	2380      	movs	r3, #128	; 0x80
 81036e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81036ea:	697b      	ldr	r3, [r7, #20]
 81036ec:	681b      	ldr	r3, [r3, #0]
 81036ee:	4a3f      	ldr	r2, [pc, #252]	; (81037ec <UART_SetConfig+0x6a8>)
 81036f0:	4293      	cmp	r3, r2
 81036f2:	f040 80f8 	bne.w	81038e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81036f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81036fa:	2b20      	cmp	r3, #32
 81036fc:	dc46      	bgt.n	810378c <UART_SetConfig+0x648>
 81036fe:	2b02      	cmp	r3, #2
 8103700:	f2c0 8082 	blt.w	8103808 <UART_SetConfig+0x6c4>
 8103704:	3b02      	subs	r3, #2
 8103706:	2b1e      	cmp	r3, #30
 8103708:	d87e      	bhi.n	8103808 <UART_SetConfig+0x6c4>
 810370a:	a201      	add	r2, pc, #4	; (adr r2, 8103710 <UART_SetConfig+0x5cc>)
 810370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103710:	08103793 	.word	0x08103793
 8103714:	08103809 	.word	0x08103809
 8103718:	0810379b 	.word	0x0810379b
 810371c:	08103809 	.word	0x08103809
 8103720:	08103809 	.word	0x08103809
 8103724:	08103809 	.word	0x08103809
 8103728:	081037ab 	.word	0x081037ab
 810372c:	08103809 	.word	0x08103809
 8103730:	08103809 	.word	0x08103809
 8103734:	08103809 	.word	0x08103809
 8103738:	08103809 	.word	0x08103809
 810373c:	08103809 	.word	0x08103809
 8103740:	08103809 	.word	0x08103809
 8103744:	08103809 	.word	0x08103809
 8103748:	081037bb 	.word	0x081037bb
 810374c:	08103809 	.word	0x08103809
 8103750:	08103809 	.word	0x08103809
 8103754:	08103809 	.word	0x08103809
 8103758:	08103809 	.word	0x08103809
 810375c:	08103809 	.word	0x08103809
 8103760:	08103809 	.word	0x08103809
 8103764:	08103809 	.word	0x08103809
 8103768:	08103809 	.word	0x08103809
 810376c:	08103809 	.word	0x08103809
 8103770:	08103809 	.word	0x08103809
 8103774:	08103809 	.word	0x08103809
 8103778:	08103809 	.word	0x08103809
 810377c:	08103809 	.word	0x08103809
 8103780:	08103809 	.word	0x08103809
 8103784:	08103809 	.word	0x08103809
 8103788:	081037fb 	.word	0x081037fb
 810378c:	2b40      	cmp	r3, #64	; 0x40
 810378e:	d037      	beq.n	8103800 <UART_SetConfig+0x6bc>
 8103790:	e03a      	b.n	8103808 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8103792:	f7fe fefb 	bl	810258c <HAL_RCCEx_GetD3PCLK1Freq>
 8103796:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8103798:	e03c      	b.n	8103814 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810379a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810379e:	4618      	mov	r0, r3
 81037a0:	f7fe ff0a 	bl	81025b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81037a8:	e034      	b.n	8103814 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81037aa:	f107 0318 	add.w	r3, r7, #24
 81037ae:	4618      	mov	r0, r3
 81037b0:	f7ff f856 	bl	8102860 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81037b4:	69fb      	ldr	r3, [r7, #28]
 81037b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81037b8:	e02c      	b.n	8103814 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81037ba:	4b09      	ldr	r3, [pc, #36]	; (81037e0 <UART_SetConfig+0x69c>)
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	f003 0320 	and.w	r3, r3, #32
 81037c2:	2b00      	cmp	r3, #0
 81037c4:	d016      	beq.n	81037f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81037c6:	4b06      	ldr	r3, [pc, #24]	; (81037e0 <UART_SetConfig+0x69c>)
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	08db      	lsrs	r3, r3, #3
 81037cc:	f003 0303 	and.w	r3, r3, #3
 81037d0:	4a07      	ldr	r2, [pc, #28]	; (81037f0 <UART_SetConfig+0x6ac>)
 81037d2:	fa22 f303 	lsr.w	r3, r2, r3
 81037d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81037d8:	e01c      	b.n	8103814 <UART_SetConfig+0x6d0>
 81037da:	bf00      	nop
 81037dc:	40011400 	.word	0x40011400
 81037e0:	58024400 	.word	0x58024400
 81037e4:	40007800 	.word	0x40007800
 81037e8:	40007c00 	.word	0x40007c00
 81037ec:	58000c00 	.word	0x58000c00
 81037f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 81037f4:	4b9d      	ldr	r3, [pc, #628]	; (8103a6c <UART_SetConfig+0x928>)
 81037f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81037f8:	e00c      	b.n	8103814 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81037fa:	4b9d      	ldr	r3, [pc, #628]	; (8103a70 <UART_SetConfig+0x92c>)
 81037fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81037fe:	e009      	b.n	8103814 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103800:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8103804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103806:	e005      	b.n	8103814 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8103808:	2300      	movs	r3, #0
 810380a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810380c:	2301      	movs	r3, #1
 810380e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8103812:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8103814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103816:	2b00      	cmp	r3, #0
 8103818:	f000 81de 	beq.w	8103bd8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810381c:	697b      	ldr	r3, [r7, #20]
 810381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103820:	4a94      	ldr	r2, [pc, #592]	; (8103a74 <UART_SetConfig+0x930>)
 8103822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103826:	461a      	mov	r2, r3
 8103828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810382a:	fbb3 f3f2 	udiv	r3, r3, r2
 810382e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103830:	697b      	ldr	r3, [r7, #20]
 8103832:	685a      	ldr	r2, [r3, #4]
 8103834:	4613      	mov	r3, r2
 8103836:	005b      	lsls	r3, r3, #1
 8103838:	4413      	add	r3, r2
 810383a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810383c:	429a      	cmp	r2, r3
 810383e:	d305      	bcc.n	810384c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8103840:	697b      	ldr	r3, [r7, #20]
 8103842:	685b      	ldr	r3, [r3, #4]
 8103844:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103848:	429a      	cmp	r2, r3
 810384a:	d903      	bls.n	8103854 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810384c:	2301      	movs	r3, #1
 810384e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8103852:	e1c1      	b.n	8103bd8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103856:	2200      	movs	r2, #0
 8103858:	60bb      	str	r3, [r7, #8]
 810385a:	60fa      	str	r2, [r7, #12]
 810385c:	697b      	ldr	r3, [r7, #20]
 810385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103860:	4a84      	ldr	r2, [pc, #528]	; (8103a74 <UART_SetConfig+0x930>)
 8103862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103866:	b29b      	uxth	r3, r3
 8103868:	2200      	movs	r2, #0
 810386a:	603b      	str	r3, [r7, #0]
 810386c:	607a      	str	r2, [r7, #4]
 810386e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103872:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8103876:	f7fc fd83 	bl	8100380 <__aeabi_uldivmod>
 810387a:	4602      	mov	r2, r0
 810387c:	460b      	mov	r3, r1
 810387e:	4610      	mov	r0, r2
 8103880:	4619      	mov	r1, r3
 8103882:	f04f 0200 	mov.w	r2, #0
 8103886:	f04f 0300 	mov.w	r3, #0
 810388a:	020b      	lsls	r3, r1, #8
 810388c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8103890:	0202      	lsls	r2, r0, #8
 8103892:	6979      	ldr	r1, [r7, #20]
 8103894:	6849      	ldr	r1, [r1, #4]
 8103896:	0849      	lsrs	r1, r1, #1
 8103898:	2000      	movs	r0, #0
 810389a:	460c      	mov	r4, r1
 810389c:	4605      	mov	r5, r0
 810389e:	eb12 0804 	adds.w	r8, r2, r4
 81038a2:	eb43 0905 	adc.w	r9, r3, r5
 81038a6:	697b      	ldr	r3, [r7, #20]
 81038a8:	685b      	ldr	r3, [r3, #4]
 81038aa:	2200      	movs	r2, #0
 81038ac:	469a      	mov	sl, r3
 81038ae:	4693      	mov	fp, r2
 81038b0:	4652      	mov	r2, sl
 81038b2:	465b      	mov	r3, fp
 81038b4:	4640      	mov	r0, r8
 81038b6:	4649      	mov	r1, r9
 81038b8:	f7fc fd62 	bl	8100380 <__aeabi_uldivmod>
 81038bc:	4602      	mov	r2, r0
 81038be:	460b      	mov	r3, r1
 81038c0:	4613      	mov	r3, r2
 81038c2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81038c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81038c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81038ca:	d308      	bcc.n	81038de <UART_SetConfig+0x79a>
 81038cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81038ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81038d2:	d204      	bcs.n	81038de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 81038d4:	697b      	ldr	r3, [r7, #20]
 81038d6:	681b      	ldr	r3, [r3, #0]
 81038d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81038da:	60da      	str	r2, [r3, #12]
 81038dc:	e17c      	b.n	8103bd8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 81038de:	2301      	movs	r3, #1
 81038e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81038e4:	e178      	b.n	8103bd8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81038e6:	697b      	ldr	r3, [r7, #20]
 81038e8:	69db      	ldr	r3, [r3, #28]
 81038ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81038ee:	f040 80c5 	bne.w	8103a7c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81038f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81038f6:	2b20      	cmp	r3, #32
 81038f8:	dc48      	bgt.n	810398c <UART_SetConfig+0x848>
 81038fa:	2b00      	cmp	r3, #0
 81038fc:	db7b      	blt.n	81039f6 <UART_SetConfig+0x8b2>
 81038fe:	2b20      	cmp	r3, #32
 8103900:	d879      	bhi.n	81039f6 <UART_SetConfig+0x8b2>
 8103902:	a201      	add	r2, pc, #4	; (adr r2, 8103908 <UART_SetConfig+0x7c4>)
 8103904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103908:	08103993 	.word	0x08103993
 810390c:	0810399b 	.word	0x0810399b
 8103910:	081039f7 	.word	0x081039f7
 8103914:	081039f7 	.word	0x081039f7
 8103918:	081039a3 	.word	0x081039a3
 810391c:	081039f7 	.word	0x081039f7
 8103920:	081039f7 	.word	0x081039f7
 8103924:	081039f7 	.word	0x081039f7
 8103928:	081039b3 	.word	0x081039b3
 810392c:	081039f7 	.word	0x081039f7
 8103930:	081039f7 	.word	0x081039f7
 8103934:	081039f7 	.word	0x081039f7
 8103938:	081039f7 	.word	0x081039f7
 810393c:	081039f7 	.word	0x081039f7
 8103940:	081039f7 	.word	0x081039f7
 8103944:	081039f7 	.word	0x081039f7
 8103948:	081039c3 	.word	0x081039c3
 810394c:	081039f7 	.word	0x081039f7
 8103950:	081039f7 	.word	0x081039f7
 8103954:	081039f7 	.word	0x081039f7
 8103958:	081039f7 	.word	0x081039f7
 810395c:	081039f7 	.word	0x081039f7
 8103960:	081039f7 	.word	0x081039f7
 8103964:	081039f7 	.word	0x081039f7
 8103968:	081039f7 	.word	0x081039f7
 810396c:	081039f7 	.word	0x081039f7
 8103970:	081039f7 	.word	0x081039f7
 8103974:	081039f7 	.word	0x081039f7
 8103978:	081039f7 	.word	0x081039f7
 810397c:	081039f7 	.word	0x081039f7
 8103980:	081039f7 	.word	0x081039f7
 8103984:	081039f7 	.word	0x081039f7
 8103988:	081039e9 	.word	0x081039e9
 810398c:	2b40      	cmp	r3, #64	; 0x40
 810398e:	d02e      	beq.n	81039ee <UART_SetConfig+0x8aa>
 8103990:	e031      	b.n	81039f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103992:	f7fd fe89 	bl	81016a8 <HAL_RCC_GetPCLK1Freq>
 8103996:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8103998:	e033      	b.n	8103a02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810399a:	f7fd fe9b 	bl	81016d4 <HAL_RCC_GetPCLK2Freq>
 810399e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81039a0:	e02f      	b.n	8103a02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81039a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81039a6:	4618      	mov	r0, r3
 81039a8:	f7fe fe06 	bl	81025b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81039ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81039b0:	e027      	b.n	8103a02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81039b2:	f107 0318 	add.w	r3, r7, #24
 81039b6:	4618      	mov	r0, r3
 81039b8:	f7fe ff52 	bl	8102860 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81039bc:	69fb      	ldr	r3, [r7, #28]
 81039be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81039c0:	e01f      	b.n	8103a02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81039c2:	4b2d      	ldr	r3, [pc, #180]	; (8103a78 <UART_SetConfig+0x934>)
 81039c4:	681b      	ldr	r3, [r3, #0]
 81039c6:	f003 0320 	and.w	r3, r3, #32
 81039ca:	2b00      	cmp	r3, #0
 81039cc:	d009      	beq.n	81039e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81039ce:	4b2a      	ldr	r3, [pc, #168]	; (8103a78 <UART_SetConfig+0x934>)
 81039d0:	681b      	ldr	r3, [r3, #0]
 81039d2:	08db      	lsrs	r3, r3, #3
 81039d4:	f003 0303 	and.w	r3, r3, #3
 81039d8:	4a24      	ldr	r2, [pc, #144]	; (8103a6c <UART_SetConfig+0x928>)
 81039da:	fa22 f303 	lsr.w	r3, r2, r3
 81039de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81039e0:	e00f      	b.n	8103a02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 81039e2:	4b22      	ldr	r3, [pc, #136]	; (8103a6c <UART_SetConfig+0x928>)
 81039e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81039e6:	e00c      	b.n	8103a02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81039e8:	4b21      	ldr	r3, [pc, #132]	; (8103a70 <UART_SetConfig+0x92c>)
 81039ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81039ec:	e009      	b.n	8103a02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81039ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81039f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81039f4:	e005      	b.n	8103a02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81039f6:	2300      	movs	r3, #0
 81039f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81039fa:	2301      	movs	r3, #1
 81039fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8103a00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8103a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103a04:	2b00      	cmp	r3, #0
 8103a06:	f000 80e7 	beq.w	8103bd8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103a0a:	697b      	ldr	r3, [r7, #20]
 8103a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a0e:	4a19      	ldr	r2, [pc, #100]	; (8103a74 <UART_SetConfig+0x930>)
 8103a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103a14:	461a      	mov	r2, r3
 8103a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103a18:	fbb3 f3f2 	udiv	r3, r3, r2
 8103a1c:	005a      	lsls	r2, r3, #1
 8103a1e:	697b      	ldr	r3, [r7, #20]
 8103a20:	685b      	ldr	r3, [r3, #4]
 8103a22:	085b      	lsrs	r3, r3, #1
 8103a24:	441a      	add	r2, r3
 8103a26:	697b      	ldr	r3, [r7, #20]
 8103a28:	685b      	ldr	r3, [r3, #4]
 8103a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8103a2e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103a32:	2b0f      	cmp	r3, #15
 8103a34:	d916      	bls.n	8103a64 <UART_SetConfig+0x920>
 8103a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103a3c:	d212      	bcs.n	8103a64 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8103a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103a40:	b29b      	uxth	r3, r3
 8103a42:	f023 030f 	bic.w	r3, r3, #15
 8103a46:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8103a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103a4a:	085b      	lsrs	r3, r3, #1
 8103a4c:	b29b      	uxth	r3, r3
 8103a4e:	f003 0307 	and.w	r3, r3, #7
 8103a52:	b29a      	uxth	r2, r3
 8103a54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8103a56:	4313      	orrs	r3, r2
 8103a58:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8103a5a:	697b      	ldr	r3, [r7, #20]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8103a60:	60da      	str	r2, [r3, #12]
 8103a62:	e0b9      	b.n	8103bd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8103a64:	2301      	movs	r3, #1
 8103a66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8103a6a:	e0b5      	b.n	8103bd8 <UART_SetConfig+0xa94>
 8103a6c:	03d09000 	.word	0x03d09000
 8103a70:	003d0900 	.word	0x003d0900
 8103a74:	08104b10 	.word	0x08104b10
 8103a78:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8103a7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8103a80:	2b20      	cmp	r3, #32
 8103a82:	dc49      	bgt.n	8103b18 <UART_SetConfig+0x9d4>
 8103a84:	2b00      	cmp	r3, #0
 8103a86:	db7c      	blt.n	8103b82 <UART_SetConfig+0xa3e>
 8103a88:	2b20      	cmp	r3, #32
 8103a8a:	d87a      	bhi.n	8103b82 <UART_SetConfig+0xa3e>
 8103a8c:	a201      	add	r2, pc, #4	; (adr r2, 8103a94 <UART_SetConfig+0x950>)
 8103a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a92:	bf00      	nop
 8103a94:	08103b1f 	.word	0x08103b1f
 8103a98:	08103b27 	.word	0x08103b27
 8103a9c:	08103b83 	.word	0x08103b83
 8103aa0:	08103b83 	.word	0x08103b83
 8103aa4:	08103b2f 	.word	0x08103b2f
 8103aa8:	08103b83 	.word	0x08103b83
 8103aac:	08103b83 	.word	0x08103b83
 8103ab0:	08103b83 	.word	0x08103b83
 8103ab4:	08103b3f 	.word	0x08103b3f
 8103ab8:	08103b83 	.word	0x08103b83
 8103abc:	08103b83 	.word	0x08103b83
 8103ac0:	08103b83 	.word	0x08103b83
 8103ac4:	08103b83 	.word	0x08103b83
 8103ac8:	08103b83 	.word	0x08103b83
 8103acc:	08103b83 	.word	0x08103b83
 8103ad0:	08103b83 	.word	0x08103b83
 8103ad4:	08103b4f 	.word	0x08103b4f
 8103ad8:	08103b83 	.word	0x08103b83
 8103adc:	08103b83 	.word	0x08103b83
 8103ae0:	08103b83 	.word	0x08103b83
 8103ae4:	08103b83 	.word	0x08103b83
 8103ae8:	08103b83 	.word	0x08103b83
 8103aec:	08103b83 	.word	0x08103b83
 8103af0:	08103b83 	.word	0x08103b83
 8103af4:	08103b83 	.word	0x08103b83
 8103af8:	08103b83 	.word	0x08103b83
 8103afc:	08103b83 	.word	0x08103b83
 8103b00:	08103b83 	.word	0x08103b83
 8103b04:	08103b83 	.word	0x08103b83
 8103b08:	08103b83 	.word	0x08103b83
 8103b0c:	08103b83 	.word	0x08103b83
 8103b10:	08103b83 	.word	0x08103b83
 8103b14:	08103b75 	.word	0x08103b75
 8103b18:	2b40      	cmp	r3, #64	; 0x40
 8103b1a:	d02e      	beq.n	8103b7a <UART_SetConfig+0xa36>
 8103b1c:	e031      	b.n	8103b82 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103b1e:	f7fd fdc3 	bl	81016a8 <HAL_RCC_GetPCLK1Freq>
 8103b22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8103b24:	e033      	b.n	8103b8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8103b26:	f7fd fdd5 	bl	81016d4 <HAL_RCC_GetPCLK2Freq>
 8103b2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8103b2c:	e02f      	b.n	8103b8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8103b32:	4618      	mov	r0, r3
 8103b34:	f7fe fd40 	bl	81025b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103b3c:	e027      	b.n	8103b8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103b3e:	f107 0318 	add.w	r3, r7, #24
 8103b42:	4618      	mov	r0, r3
 8103b44:	f7fe fe8c 	bl	8102860 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103b48:	69fb      	ldr	r3, [r7, #28]
 8103b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103b4c:	e01f      	b.n	8103b8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103b4e:	4b2d      	ldr	r3, [pc, #180]	; (8103c04 <UART_SetConfig+0xac0>)
 8103b50:	681b      	ldr	r3, [r3, #0]
 8103b52:	f003 0320 	and.w	r3, r3, #32
 8103b56:	2b00      	cmp	r3, #0
 8103b58:	d009      	beq.n	8103b6e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103b5a:	4b2a      	ldr	r3, [pc, #168]	; (8103c04 <UART_SetConfig+0xac0>)
 8103b5c:	681b      	ldr	r3, [r3, #0]
 8103b5e:	08db      	lsrs	r3, r3, #3
 8103b60:	f003 0303 	and.w	r3, r3, #3
 8103b64:	4a28      	ldr	r2, [pc, #160]	; (8103c08 <UART_SetConfig+0xac4>)
 8103b66:	fa22 f303 	lsr.w	r3, r2, r3
 8103b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103b6c:	e00f      	b.n	8103b8e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8103b6e:	4b26      	ldr	r3, [pc, #152]	; (8103c08 <UART_SetConfig+0xac4>)
 8103b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103b72:	e00c      	b.n	8103b8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103b74:	4b25      	ldr	r3, [pc, #148]	; (8103c0c <UART_SetConfig+0xac8>)
 8103b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103b78:	e009      	b.n	8103b8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8103b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103b80:	e005      	b.n	8103b8e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8103b82:	2300      	movs	r3, #0
 8103b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8103b86:	2301      	movs	r3, #1
 8103b88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8103b8c:	bf00      	nop
    }

    if (pclk != 0U)
 8103b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103b90:	2b00      	cmp	r3, #0
 8103b92:	d021      	beq.n	8103bd8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103b94:	697b      	ldr	r3, [r7, #20]
 8103b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b98:	4a1d      	ldr	r2, [pc, #116]	; (8103c10 <UART_SetConfig+0xacc>)
 8103b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103b9e:	461a      	mov	r2, r3
 8103ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103ba2:	fbb3 f2f2 	udiv	r2, r3, r2
 8103ba6:	697b      	ldr	r3, [r7, #20]
 8103ba8:	685b      	ldr	r3, [r3, #4]
 8103baa:	085b      	lsrs	r3, r3, #1
 8103bac:	441a      	add	r2, r3
 8103bae:	697b      	ldr	r3, [r7, #20]
 8103bb0:	685b      	ldr	r3, [r3, #4]
 8103bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8103bb6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103bba:	2b0f      	cmp	r3, #15
 8103bbc:	d909      	bls.n	8103bd2 <UART_SetConfig+0xa8e>
 8103bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103bc4:	d205      	bcs.n	8103bd2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8103bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103bc8:	b29a      	uxth	r2, r3
 8103bca:	697b      	ldr	r3, [r7, #20]
 8103bcc:	681b      	ldr	r3, [r3, #0]
 8103bce:	60da      	str	r2, [r3, #12]
 8103bd0:	e002      	b.n	8103bd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8103bd2:	2301      	movs	r3, #1
 8103bd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8103bd8:	697b      	ldr	r3, [r7, #20]
 8103bda:	2201      	movs	r2, #1
 8103bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8103be0:	697b      	ldr	r3, [r7, #20]
 8103be2:	2201      	movs	r2, #1
 8103be4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8103be8:	697b      	ldr	r3, [r7, #20]
 8103bea:	2200      	movs	r2, #0
 8103bec:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8103bee:	697b      	ldr	r3, [r7, #20]
 8103bf0:	2200      	movs	r2, #0
 8103bf2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8103bf4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8103bf8:	4618      	mov	r0, r3
 8103bfa:	3748      	adds	r7, #72	; 0x48
 8103bfc:	46bd      	mov	sp, r7
 8103bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103c02:	bf00      	nop
 8103c04:	58024400 	.word	0x58024400
 8103c08:	03d09000 	.word	0x03d09000
 8103c0c:	003d0900 	.word	0x003d0900
 8103c10:	08104b10 	.word	0x08104b10

08103c14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8103c14:	b480      	push	{r7}
 8103c16:	b083      	sub	sp, #12
 8103c18:	af00      	add	r7, sp, #0
 8103c1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8103c1c:	687b      	ldr	r3, [r7, #4]
 8103c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c20:	f003 0301 	and.w	r3, r3, #1
 8103c24:	2b00      	cmp	r3, #0
 8103c26:	d00a      	beq.n	8103c3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8103c28:	687b      	ldr	r3, [r7, #4]
 8103c2a:	681b      	ldr	r3, [r3, #0]
 8103c2c:	685b      	ldr	r3, [r3, #4]
 8103c2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	681b      	ldr	r3, [r3, #0]
 8103c3a:	430a      	orrs	r2, r1
 8103c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c42:	f003 0302 	and.w	r3, r3, #2
 8103c46:	2b00      	cmp	r3, #0
 8103c48:	d00a      	beq.n	8103c60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	685b      	ldr	r3, [r3, #4]
 8103c50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8103c58:	687b      	ldr	r3, [r7, #4]
 8103c5a:	681b      	ldr	r3, [r3, #0]
 8103c5c:	430a      	orrs	r2, r1
 8103c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8103c60:	687b      	ldr	r3, [r7, #4]
 8103c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c64:	f003 0304 	and.w	r3, r3, #4
 8103c68:	2b00      	cmp	r3, #0
 8103c6a:	d00a      	beq.n	8103c82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8103c6c:	687b      	ldr	r3, [r7, #4]
 8103c6e:	681b      	ldr	r3, [r3, #0]
 8103c70:	685b      	ldr	r3, [r3, #4]
 8103c72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8103c76:	687b      	ldr	r3, [r7, #4]
 8103c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	681b      	ldr	r3, [r3, #0]
 8103c7e:	430a      	orrs	r2, r1
 8103c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c86:	f003 0308 	and.w	r3, r3, #8
 8103c8a:	2b00      	cmp	r3, #0
 8103c8c:	d00a      	beq.n	8103ca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8103c8e:	687b      	ldr	r3, [r7, #4]
 8103c90:	681b      	ldr	r3, [r3, #0]
 8103c92:	685b      	ldr	r3, [r3, #4]
 8103c94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8103c9c:	687b      	ldr	r3, [r7, #4]
 8103c9e:	681b      	ldr	r3, [r3, #0]
 8103ca0:	430a      	orrs	r2, r1
 8103ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ca8:	f003 0310 	and.w	r3, r3, #16
 8103cac:	2b00      	cmp	r3, #0
 8103cae:	d00a      	beq.n	8103cc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8103cb0:	687b      	ldr	r3, [r7, #4]
 8103cb2:	681b      	ldr	r3, [r3, #0]
 8103cb4:	689b      	ldr	r3, [r3, #8]
 8103cb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8103cba:	687b      	ldr	r3, [r7, #4]
 8103cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	681b      	ldr	r3, [r3, #0]
 8103cc2:	430a      	orrs	r2, r1
 8103cc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8103cc6:	687b      	ldr	r3, [r7, #4]
 8103cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103cca:	f003 0320 	and.w	r3, r3, #32
 8103cce:	2b00      	cmp	r3, #0
 8103cd0:	d00a      	beq.n	8103ce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	681b      	ldr	r3, [r3, #0]
 8103cd6:	689b      	ldr	r3, [r3, #8]
 8103cd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8103ce0:	687b      	ldr	r3, [r7, #4]
 8103ce2:	681b      	ldr	r3, [r3, #0]
 8103ce4:	430a      	orrs	r2, r1
 8103ce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103cf0:	2b00      	cmp	r3, #0
 8103cf2:	d01a      	beq.n	8103d2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8103cf4:	687b      	ldr	r3, [r7, #4]
 8103cf6:	681b      	ldr	r3, [r3, #0]
 8103cf8:	685b      	ldr	r3, [r3, #4]
 8103cfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8103cfe:	687b      	ldr	r3, [r7, #4]
 8103d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8103d02:	687b      	ldr	r3, [r7, #4]
 8103d04:	681b      	ldr	r3, [r3, #0]
 8103d06:	430a      	orrs	r2, r1
 8103d08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103d12:	d10a      	bne.n	8103d2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8103d14:	687b      	ldr	r3, [r7, #4]
 8103d16:	681b      	ldr	r3, [r3, #0]
 8103d18:	685b      	ldr	r3, [r3, #4]
 8103d1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8103d1e:	687b      	ldr	r3, [r7, #4]
 8103d20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	681b      	ldr	r3, [r3, #0]
 8103d26:	430a      	orrs	r2, r1
 8103d28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103d32:	2b00      	cmp	r3, #0
 8103d34:	d00a      	beq.n	8103d4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8103d36:	687b      	ldr	r3, [r7, #4]
 8103d38:	681b      	ldr	r3, [r3, #0]
 8103d3a:	685b      	ldr	r3, [r3, #4]
 8103d3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8103d40:	687b      	ldr	r3, [r7, #4]
 8103d42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8103d44:	687b      	ldr	r3, [r7, #4]
 8103d46:	681b      	ldr	r3, [r3, #0]
 8103d48:	430a      	orrs	r2, r1
 8103d4a:	605a      	str	r2, [r3, #4]
  }
}
 8103d4c:	bf00      	nop
 8103d4e:	370c      	adds	r7, #12
 8103d50:	46bd      	mov	sp, r7
 8103d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d56:	4770      	bx	lr

08103d58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8103d58:	b580      	push	{r7, lr}
 8103d5a:	b086      	sub	sp, #24
 8103d5c:	af02      	add	r7, sp, #8
 8103d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	2200      	movs	r2, #0
 8103d64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8103d68:	f7fc ffa4 	bl	8100cb4 <HAL_GetTick>
 8103d6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8103d6e:	687b      	ldr	r3, [r7, #4]
 8103d70:	681b      	ldr	r3, [r3, #0]
 8103d72:	681b      	ldr	r3, [r3, #0]
 8103d74:	f003 0308 	and.w	r3, r3, #8
 8103d78:	2b08      	cmp	r3, #8
 8103d7a:	d10e      	bne.n	8103d9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103d7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8103d80:	9300      	str	r3, [sp, #0]
 8103d82:	68fb      	ldr	r3, [r7, #12]
 8103d84:	2200      	movs	r2, #0
 8103d86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8103d8a:	6878      	ldr	r0, [r7, #4]
 8103d8c:	f000 f82f 	bl	8103dee <UART_WaitOnFlagUntilTimeout>
 8103d90:	4603      	mov	r3, r0
 8103d92:	2b00      	cmp	r3, #0
 8103d94:	d001      	beq.n	8103d9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8103d96:	2303      	movs	r3, #3
 8103d98:	e025      	b.n	8103de6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8103d9a:	687b      	ldr	r3, [r7, #4]
 8103d9c:	681b      	ldr	r3, [r3, #0]
 8103d9e:	681b      	ldr	r3, [r3, #0]
 8103da0:	f003 0304 	and.w	r3, r3, #4
 8103da4:	2b04      	cmp	r3, #4
 8103da6:	d10e      	bne.n	8103dc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103da8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8103dac:	9300      	str	r3, [sp, #0]
 8103dae:	68fb      	ldr	r3, [r7, #12]
 8103db0:	2200      	movs	r2, #0
 8103db2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8103db6:	6878      	ldr	r0, [r7, #4]
 8103db8:	f000 f819 	bl	8103dee <UART_WaitOnFlagUntilTimeout>
 8103dbc:	4603      	mov	r3, r0
 8103dbe:	2b00      	cmp	r3, #0
 8103dc0:	d001      	beq.n	8103dc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8103dc2:	2303      	movs	r3, #3
 8103dc4:	e00f      	b.n	8103de6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8103dc6:	687b      	ldr	r3, [r7, #4]
 8103dc8:	2220      	movs	r2, #32
 8103dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	2220      	movs	r2, #32
 8103dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8103dd6:	687b      	ldr	r3, [r7, #4]
 8103dd8:	2200      	movs	r2, #0
 8103dda:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8103ddc:	687b      	ldr	r3, [r7, #4]
 8103dde:	2200      	movs	r2, #0
 8103de0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103de4:	2300      	movs	r3, #0
}
 8103de6:	4618      	mov	r0, r3
 8103de8:	3710      	adds	r7, #16
 8103dea:	46bd      	mov	sp, r7
 8103dec:	bd80      	pop	{r7, pc}

08103dee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8103dee:	b580      	push	{r7, lr}
 8103df0:	b09c      	sub	sp, #112	; 0x70
 8103df2:	af00      	add	r7, sp, #0
 8103df4:	60f8      	str	r0, [r7, #12]
 8103df6:	60b9      	str	r1, [r7, #8]
 8103df8:	603b      	str	r3, [r7, #0]
 8103dfa:	4613      	mov	r3, r2
 8103dfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103dfe:	e0a9      	b.n	8103f54 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8103e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8103e06:	f000 80a5 	beq.w	8103f54 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103e0a:	f7fc ff53 	bl	8100cb4 <HAL_GetTick>
 8103e0e:	4602      	mov	r2, r0
 8103e10:	683b      	ldr	r3, [r7, #0]
 8103e12:	1ad3      	subs	r3, r2, r3
 8103e14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8103e16:	429a      	cmp	r2, r3
 8103e18:	d302      	bcc.n	8103e20 <UART_WaitOnFlagUntilTimeout+0x32>
 8103e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8103e1c:	2b00      	cmp	r3, #0
 8103e1e:	d140      	bne.n	8103ea2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8103e20:	68fb      	ldr	r3, [r7, #12]
 8103e22:	681b      	ldr	r3, [r3, #0]
 8103e24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103e28:	e853 3f00 	ldrex	r3, [r3]
 8103e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8103e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103e30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8103e34:	667b      	str	r3, [r7, #100]	; 0x64
 8103e36:	68fb      	ldr	r3, [r7, #12]
 8103e38:	681b      	ldr	r3, [r3, #0]
 8103e3a:	461a      	mov	r2, r3
 8103e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8103e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8103e40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103e42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8103e44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8103e46:	e841 2300 	strex	r3, r2, [r1]
 8103e4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8103e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103e4e:	2b00      	cmp	r3, #0
 8103e50:	d1e6      	bne.n	8103e20 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103e52:	68fb      	ldr	r3, [r7, #12]
 8103e54:	681b      	ldr	r3, [r3, #0]
 8103e56:	3308      	adds	r3, #8
 8103e58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103e5c:	e853 3f00 	ldrex	r3, [r3]
 8103e60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8103e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103e64:	f023 0301 	bic.w	r3, r3, #1
 8103e68:	663b      	str	r3, [r7, #96]	; 0x60
 8103e6a:	68fb      	ldr	r3, [r7, #12]
 8103e6c:	681b      	ldr	r3, [r3, #0]
 8103e6e:	3308      	adds	r3, #8
 8103e70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8103e72:	64ba      	str	r2, [r7, #72]	; 0x48
 8103e74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103e76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8103e78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8103e7a:	e841 2300 	strex	r3, r2, [r1]
 8103e7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8103e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103e82:	2b00      	cmp	r3, #0
 8103e84:	d1e5      	bne.n	8103e52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8103e86:	68fb      	ldr	r3, [r7, #12]
 8103e88:	2220      	movs	r2, #32
 8103e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8103e8e:	68fb      	ldr	r3, [r7, #12]
 8103e90:	2220      	movs	r2, #32
 8103e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8103e96:	68fb      	ldr	r3, [r7, #12]
 8103e98:	2200      	movs	r2, #0
 8103e9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8103e9e:	2303      	movs	r3, #3
 8103ea0:	e069      	b.n	8103f76 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8103ea2:	68fb      	ldr	r3, [r7, #12]
 8103ea4:	681b      	ldr	r3, [r3, #0]
 8103ea6:	681b      	ldr	r3, [r3, #0]
 8103ea8:	f003 0304 	and.w	r3, r3, #4
 8103eac:	2b00      	cmp	r3, #0
 8103eae:	d051      	beq.n	8103f54 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8103eb0:	68fb      	ldr	r3, [r7, #12]
 8103eb2:	681b      	ldr	r3, [r3, #0]
 8103eb4:	69db      	ldr	r3, [r3, #28]
 8103eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103ebe:	d149      	bne.n	8103f54 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8103ec0:	68fb      	ldr	r3, [r7, #12]
 8103ec2:	681b      	ldr	r3, [r3, #0]
 8103ec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8103ec8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8103eca:	68fb      	ldr	r3, [r7, #12]
 8103ecc:	681b      	ldr	r3, [r3, #0]
 8103ece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103ed2:	e853 3f00 	ldrex	r3, [r3]
 8103ed6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8103ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103eda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8103ede:	66fb      	str	r3, [r7, #108]	; 0x6c
 8103ee0:	68fb      	ldr	r3, [r7, #12]
 8103ee2:	681b      	ldr	r3, [r3, #0]
 8103ee4:	461a      	mov	r2, r3
 8103ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8103eea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103eec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8103eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103ef0:	e841 2300 	strex	r3, r2, [r1]
 8103ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8103ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103ef8:	2b00      	cmp	r3, #0
 8103efa:	d1e6      	bne.n	8103eca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103efc:	68fb      	ldr	r3, [r7, #12]
 8103efe:	681b      	ldr	r3, [r3, #0]
 8103f00:	3308      	adds	r3, #8
 8103f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103f04:	697b      	ldr	r3, [r7, #20]
 8103f06:	e853 3f00 	ldrex	r3, [r3]
 8103f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8103f0c:	693b      	ldr	r3, [r7, #16]
 8103f0e:	f023 0301 	bic.w	r3, r3, #1
 8103f12:	66bb      	str	r3, [r7, #104]	; 0x68
 8103f14:	68fb      	ldr	r3, [r7, #12]
 8103f16:	681b      	ldr	r3, [r3, #0]
 8103f18:	3308      	adds	r3, #8
 8103f1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8103f1c:	623a      	str	r2, [r7, #32]
 8103f1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103f20:	69f9      	ldr	r1, [r7, #28]
 8103f22:	6a3a      	ldr	r2, [r7, #32]
 8103f24:	e841 2300 	strex	r3, r2, [r1]
 8103f28:	61bb      	str	r3, [r7, #24]
   return(result);
 8103f2a:	69bb      	ldr	r3, [r7, #24]
 8103f2c:	2b00      	cmp	r3, #0
 8103f2e:	d1e5      	bne.n	8103efc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8103f30:	68fb      	ldr	r3, [r7, #12]
 8103f32:	2220      	movs	r2, #32
 8103f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8103f38:	68fb      	ldr	r3, [r7, #12]
 8103f3a:	2220      	movs	r2, #32
 8103f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8103f40:	68fb      	ldr	r3, [r7, #12]
 8103f42:	2220      	movs	r2, #32
 8103f44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8103f48:	68fb      	ldr	r3, [r7, #12]
 8103f4a:	2200      	movs	r2, #0
 8103f4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8103f50:	2303      	movs	r3, #3
 8103f52:	e010      	b.n	8103f76 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103f54:	68fb      	ldr	r3, [r7, #12]
 8103f56:	681b      	ldr	r3, [r3, #0]
 8103f58:	69da      	ldr	r2, [r3, #28]
 8103f5a:	68bb      	ldr	r3, [r7, #8]
 8103f5c:	4013      	ands	r3, r2
 8103f5e:	68ba      	ldr	r2, [r7, #8]
 8103f60:	429a      	cmp	r2, r3
 8103f62:	bf0c      	ite	eq
 8103f64:	2301      	moveq	r3, #1
 8103f66:	2300      	movne	r3, #0
 8103f68:	b2db      	uxtb	r3, r3
 8103f6a:	461a      	mov	r2, r3
 8103f6c:	79fb      	ldrb	r3, [r7, #7]
 8103f6e:	429a      	cmp	r2, r3
 8103f70:	f43f af46 	beq.w	8103e00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8103f74:	2300      	movs	r3, #0
}
 8103f76:	4618      	mov	r0, r3
 8103f78:	3770      	adds	r7, #112	; 0x70
 8103f7a:	46bd      	mov	sp, r7
 8103f7c:	bd80      	pop	{r7, pc}

08103f7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8103f7e:	b480      	push	{r7}
 8103f80:	b085      	sub	sp, #20
 8103f82:	af00      	add	r7, sp, #0
 8103f84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8103f86:	687b      	ldr	r3, [r7, #4]
 8103f88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103f8c:	2b01      	cmp	r3, #1
 8103f8e:	d101      	bne.n	8103f94 <HAL_UARTEx_DisableFifoMode+0x16>
 8103f90:	2302      	movs	r3, #2
 8103f92:	e027      	b.n	8103fe4 <HAL_UARTEx_DisableFifoMode+0x66>
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	2201      	movs	r2, #1
 8103f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8103f9c:	687b      	ldr	r3, [r7, #4]
 8103f9e:	2224      	movs	r2, #36	; 0x24
 8103fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	681b      	ldr	r3, [r3, #0]
 8103fa8:	681b      	ldr	r3, [r3, #0]
 8103faa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8103fac:	687b      	ldr	r3, [r7, #4]
 8103fae:	681b      	ldr	r3, [r3, #0]
 8103fb0:	681a      	ldr	r2, [r3, #0]
 8103fb2:	687b      	ldr	r3, [r7, #4]
 8103fb4:	681b      	ldr	r3, [r3, #0]
 8103fb6:	f022 0201 	bic.w	r2, r2, #1
 8103fba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8103fbc:	68fb      	ldr	r3, [r7, #12]
 8103fbe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8103fc2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8103fc4:	687b      	ldr	r3, [r7, #4]
 8103fc6:	2200      	movs	r2, #0
 8103fc8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103fca:	687b      	ldr	r3, [r7, #4]
 8103fcc:	681b      	ldr	r3, [r3, #0]
 8103fce:	68fa      	ldr	r2, [r7, #12]
 8103fd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8103fd2:	687b      	ldr	r3, [r7, #4]
 8103fd4:	2220      	movs	r2, #32
 8103fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8103fda:	687b      	ldr	r3, [r7, #4]
 8103fdc:	2200      	movs	r2, #0
 8103fde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103fe2:	2300      	movs	r3, #0
}
 8103fe4:	4618      	mov	r0, r3
 8103fe6:	3714      	adds	r7, #20
 8103fe8:	46bd      	mov	sp, r7
 8103fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fee:	4770      	bx	lr

08103ff0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8103ff0:	b580      	push	{r7, lr}
 8103ff2:	b084      	sub	sp, #16
 8103ff4:	af00      	add	r7, sp, #0
 8103ff6:	6078      	str	r0, [r7, #4]
 8103ff8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8103ffa:	687b      	ldr	r3, [r7, #4]
 8103ffc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104000:	2b01      	cmp	r3, #1
 8104002:	d101      	bne.n	8104008 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8104004:	2302      	movs	r3, #2
 8104006:	e02d      	b.n	8104064 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8104008:	687b      	ldr	r3, [r7, #4]
 810400a:	2201      	movs	r2, #1
 810400c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	2224      	movs	r2, #36	; 0x24
 8104014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8104018:	687b      	ldr	r3, [r7, #4]
 810401a:	681b      	ldr	r3, [r3, #0]
 810401c:	681b      	ldr	r3, [r3, #0]
 810401e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104020:	687b      	ldr	r3, [r7, #4]
 8104022:	681b      	ldr	r3, [r3, #0]
 8104024:	681a      	ldr	r2, [r3, #0]
 8104026:	687b      	ldr	r3, [r7, #4]
 8104028:	681b      	ldr	r3, [r3, #0]
 810402a:	f022 0201 	bic.w	r2, r2, #1
 810402e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8104030:	687b      	ldr	r3, [r7, #4]
 8104032:	681b      	ldr	r3, [r3, #0]
 8104034:	689b      	ldr	r3, [r3, #8]
 8104036:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810403a:	687b      	ldr	r3, [r7, #4]
 810403c:	681b      	ldr	r3, [r3, #0]
 810403e:	683a      	ldr	r2, [r7, #0]
 8104040:	430a      	orrs	r2, r1
 8104042:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8104044:	6878      	ldr	r0, [r7, #4]
 8104046:	f000 f84f 	bl	81040e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810404a:	687b      	ldr	r3, [r7, #4]
 810404c:	681b      	ldr	r3, [r3, #0]
 810404e:	68fa      	ldr	r2, [r7, #12]
 8104050:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8104052:	687b      	ldr	r3, [r7, #4]
 8104054:	2220      	movs	r2, #32
 8104056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810405a:	687b      	ldr	r3, [r7, #4]
 810405c:	2200      	movs	r2, #0
 810405e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8104062:	2300      	movs	r3, #0
}
 8104064:	4618      	mov	r0, r3
 8104066:	3710      	adds	r7, #16
 8104068:	46bd      	mov	sp, r7
 810406a:	bd80      	pop	{r7, pc}

0810406c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810406c:	b580      	push	{r7, lr}
 810406e:	b084      	sub	sp, #16
 8104070:	af00      	add	r7, sp, #0
 8104072:	6078      	str	r0, [r7, #4]
 8104074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8104076:	687b      	ldr	r3, [r7, #4]
 8104078:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810407c:	2b01      	cmp	r3, #1
 810407e:	d101      	bne.n	8104084 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8104080:	2302      	movs	r3, #2
 8104082:	e02d      	b.n	81040e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8104084:	687b      	ldr	r3, [r7, #4]
 8104086:	2201      	movs	r2, #1
 8104088:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810408c:	687b      	ldr	r3, [r7, #4]
 810408e:	2224      	movs	r2, #36	; 0x24
 8104090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	681b      	ldr	r3, [r3, #0]
 8104098:	681b      	ldr	r3, [r3, #0]
 810409a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	681a      	ldr	r2, [r3, #0]
 81040a2:	687b      	ldr	r3, [r7, #4]
 81040a4:	681b      	ldr	r3, [r3, #0]
 81040a6:	f022 0201 	bic.w	r2, r2, #1
 81040aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81040ac:	687b      	ldr	r3, [r7, #4]
 81040ae:	681b      	ldr	r3, [r3, #0]
 81040b0:	689b      	ldr	r3, [r3, #8]
 81040b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81040b6:	687b      	ldr	r3, [r7, #4]
 81040b8:	681b      	ldr	r3, [r3, #0]
 81040ba:	683a      	ldr	r2, [r7, #0]
 81040bc:	430a      	orrs	r2, r1
 81040be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81040c0:	6878      	ldr	r0, [r7, #4]
 81040c2:	f000 f811 	bl	81040e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81040c6:	687b      	ldr	r3, [r7, #4]
 81040c8:	681b      	ldr	r3, [r3, #0]
 81040ca:	68fa      	ldr	r2, [r7, #12]
 81040cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81040ce:	687b      	ldr	r3, [r7, #4]
 81040d0:	2220      	movs	r2, #32
 81040d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	2200      	movs	r2, #0
 81040da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81040de:	2300      	movs	r3, #0
}
 81040e0:	4618      	mov	r0, r3
 81040e2:	3710      	adds	r7, #16
 81040e4:	46bd      	mov	sp, r7
 81040e6:	bd80      	pop	{r7, pc}

081040e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81040e8:	b480      	push	{r7}
 81040ea:	b085      	sub	sp, #20
 81040ec:	af00      	add	r7, sp, #0
 81040ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81040f4:	2b00      	cmp	r3, #0
 81040f6:	d108      	bne.n	810410a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81040f8:	687b      	ldr	r3, [r7, #4]
 81040fa:	2201      	movs	r2, #1
 81040fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	2201      	movs	r2, #1
 8104104:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8104108:	e031      	b.n	810416e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810410a:	2310      	movs	r3, #16
 810410c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810410e:	2310      	movs	r3, #16
 8104110:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8104112:	687b      	ldr	r3, [r7, #4]
 8104114:	681b      	ldr	r3, [r3, #0]
 8104116:	689b      	ldr	r3, [r3, #8]
 8104118:	0e5b      	lsrs	r3, r3, #25
 810411a:	b2db      	uxtb	r3, r3
 810411c:	f003 0307 	and.w	r3, r3, #7
 8104120:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8104122:	687b      	ldr	r3, [r7, #4]
 8104124:	681b      	ldr	r3, [r3, #0]
 8104126:	689b      	ldr	r3, [r3, #8]
 8104128:	0f5b      	lsrs	r3, r3, #29
 810412a:	b2db      	uxtb	r3, r3
 810412c:	f003 0307 	and.w	r3, r3, #7
 8104130:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8104132:	7bbb      	ldrb	r3, [r7, #14]
 8104134:	7b3a      	ldrb	r2, [r7, #12]
 8104136:	4911      	ldr	r1, [pc, #68]	; (810417c <UARTEx_SetNbDataToProcess+0x94>)
 8104138:	5c8a      	ldrb	r2, [r1, r2]
 810413a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810413e:	7b3a      	ldrb	r2, [r7, #12]
 8104140:	490f      	ldr	r1, [pc, #60]	; (8104180 <UARTEx_SetNbDataToProcess+0x98>)
 8104142:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8104144:	fb93 f3f2 	sdiv	r3, r3, r2
 8104148:	b29a      	uxth	r2, r3
 810414a:	687b      	ldr	r3, [r7, #4]
 810414c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8104150:	7bfb      	ldrb	r3, [r7, #15]
 8104152:	7b7a      	ldrb	r2, [r7, #13]
 8104154:	4909      	ldr	r1, [pc, #36]	; (810417c <UARTEx_SetNbDataToProcess+0x94>)
 8104156:	5c8a      	ldrb	r2, [r1, r2]
 8104158:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810415c:	7b7a      	ldrb	r2, [r7, #13]
 810415e:	4908      	ldr	r1, [pc, #32]	; (8104180 <UARTEx_SetNbDataToProcess+0x98>)
 8104160:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8104162:	fb93 f3f2 	sdiv	r3, r3, r2
 8104166:	b29a      	uxth	r2, r3
 8104168:	687b      	ldr	r3, [r7, #4]
 810416a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810416e:	bf00      	nop
 8104170:	3714      	adds	r7, #20
 8104172:	46bd      	mov	sp, r7
 8104174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104178:	4770      	bx	lr
 810417a:	bf00      	nop
 810417c:	08104b28 	.word	0x08104b28
 8104180:	08104b30 	.word	0x08104b30

08104184 <__errno>:
 8104184:	4b01      	ldr	r3, [pc, #4]	; (810418c <__errno+0x8>)
 8104186:	6818      	ldr	r0, [r3, #0]
 8104188:	4770      	bx	lr
 810418a:	bf00      	nop
 810418c:	10000010 	.word	0x10000010

08104190 <__libc_init_array>:
 8104190:	b570      	push	{r4, r5, r6, lr}
 8104192:	4d0d      	ldr	r5, [pc, #52]	; (81041c8 <__libc_init_array+0x38>)
 8104194:	4c0d      	ldr	r4, [pc, #52]	; (81041cc <__libc_init_array+0x3c>)
 8104196:	1b64      	subs	r4, r4, r5
 8104198:	10a4      	asrs	r4, r4, #2
 810419a:	2600      	movs	r6, #0
 810419c:	42a6      	cmp	r6, r4
 810419e:	d109      	bne.n	81041b4 <__libc_init_array+0x24>
 81041a0:	4d0b      	ldr	r5, [pc, #44]	; (81041d0 <__libc_init_array+0x40>)
 81041a2:	4c0c      	ldr	r4, [pc, #48]	; (81041d4 <__libc_init_array+0x44>)
 81041a4:	f000 fc8e 	bl	8104ac4 <_init>
 81041a8:	1b64      	subs	r4, r4, r5
 81041aa:	10a4      	asrs	r4, r4, #2
 81041ac:	2600      	movs	r6, #0
 81041ae:	42a6      	cmp	r6, r4
 81041b0:	d105      	bne.n	81041be <__libc_init_array+0x2e>
 81041b2:	bd70      	pop	{r4, r5, r6, pc}
 81041b4:	f855 3b04 	ldr.w	r3, [r5], #4
 81041b8:	4798      	blx	r3
 81041ba:	3601      	adds	r6, #1
 81041bc:	e7ee      	b.n	810419c <__libc_init_array+0xc>
 81041be:	f855 3b04 	ldr.w	r3, [r5], #4
 81041c2:	4798      	blx	r3
 81041c4:	3601      	adds	r6, #1
 81041c6:	e7f2      	b.n	81041ae <__libc_init_array+0x1e>
 81041c8:	08104b74 	.word	0x08104b74
 81041cc:	08104b74 	.word	0x08104b74
 81041d0:	08104b74 	.word	0x08104b74
 81041d4:	08104b78 	.word	0x08104b78

081041d8 <memset>:
 81041d8:	4402      	add	r2, r0
 81041da:	4603      	mov	r3, r0
 81041dc:	4293      	cmp	r3, r2
 81041de:	d100      	bne.n	81041e2 <memset+0xa>
 81041e0:	4770      	bx	lr
 81041e2:	f803 1b01 	strb.w	r1, [r3], #1
 81041e6:	e7f9      	b.n	81041dc <memset+0x4>

081041e8 <siprintf>:
 81041e8:	b40e      	push	{r1, r2, r3}
 81041ea:	b500      	push	{lr}
 81041ec:	b09c      	sub	sp, #112	; 0x70
 81041ee:	ab1d      	add	r3, sp, #116	; 0x74
 81041f0:	9002      	str	r0, [sp, #8]
 81041f2:	9006      	str	r0, [sp, #24]
 81041f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 81041f8:	4809      	ldr	r0, [pc, #36]	; (8104220 <siprintf+0x38>)
 81041fa:	9107      	str	r1, [sp, #28]
 81041fc:	9104      	str	r1, [sp, #16]
 81041fe:	4909      	ldr	r1, [pc, #36]	; (8104224 <siprintf+0x3c>)
 8104200:	f853 2b04 	ldr.w	r2, [r3], #4
 8104204:	9105      	str	r1, [sp, #20]
 8104206:	6800      	ldr	r0, [r0, #0]
 8104208:	9301      	str	r3, [sp, #4]
 810420a:	a902      	add	r1, sp, #8
 810420c:	f000 f868 	bl	81042e0 <_svfiprintf_r>
 8104210:	9b02      	ldr	r3, [sp, #8]
 8104212:	2200      	movs	r2, #0
 8104214:	701a      	strb	r2, [r3, #0]
 8104216:	b01c      	add	sp, #112	; 0x70
 8104218:	f85d eb04 	ldr.w	lr, [sp], #4
 810421c:	b003      	add	sp, #12
 810421e:	4770      	bx	lr
 8104220:	10000010 	.word	0x10000010
 8104224:	ffff0208 	.word	0xffff0208

08104228 <__ssputs_r>:
 8104228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810422c:	688e      	ldr	r6, [r1, #8]
 810422e:	429e      	cmp	r6, r3
 8104230:	4682      	mov	sl, r0
 8104232:	460c      	mov	r4, r1
 8104234:	4690      	mov	r8, r2
 8104236:	461f      	mov	r7, r3
 8104238:	d838      	bhi.n	81042ac <__ssputs_r+0x84>
 810423a:	898a      	ldrh	r2, [r1, #12]
 810423c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8104240:	d032      	beq.n	81042a8 <__ssputs_r+0x80>
 8104242:	6825      	ldr	r5, [r4, #0]
 8104244:	6909      	ldr	r1, [r1, #16]
 8104246:	eba5 0901 	sub.w	r9, r5, r1
 810424a:	6965      	ldr	r5, [r4, #20]
 810424c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8104250:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8104254:	3301      	adds	r3, #1
 8104256:	444b      	add	r3, r9
 8104258:	106d      	asrs	r5, r5, #1
 810425a:	429d      	cmp	r5, r3
 810425c:	bf38      	it	cc
 810425e:	461d      	movcc	r5, r3
 8104260:	0553      	lsls	r3, r2, #21
 8104262:	d531      	bpl.n	81042c8 <__ssputs_r+0xa0>
 8104264:	4629      	mov	r1, r5
 8104266:	f000 fb63 	bl	8104930 <_malloc_r>
 810426a:	4606      	mov	r6, r0
 810426c:	b950      	cbnz	r0, 8104284 <__ssputs_r+0x5c>
 810426e:	230c      	movs	r3, #12
 8104270:	f8ca 3000 	str.w	r3, [sl]
 8104274:	89a3      	ldrh	r3, [r4, #12]
 8104276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810427a:	81a3      	strh	r3, [r4, #12]
 810427c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8104280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8104284:	6921      	ldr	r1, [r4, #16]
 8104286:	464a      	mov	r2, r9
 8104288:	f000 fabe 	bl	8104808 <memcpy>
 810428c:	89a3      	ldrh	r3, [r4, #12]
 810428e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8104292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8104296:	81a3      	strh	r3, [r4, #12]
 8104298:	6126      	str	r6, [r4, #16]
 810429a:	6165      	str	r5, [r4, #20]
 810429c:	444e      	add	r6, r9
 810429e:	eba5 0509 	sub.w	r5, r5, r9
 81042a2:	6026      	str	r6, [r4, #0]
 81042a4:	60a5      	str	r5, [r4, #8]
 81042a6:	463e      	mov	r6, r7
 81042a8:	42be      	cmp	r6, r7
 81042aa:	d900      	bls.n	81042ae <__ssputs_r+0x86>
 81042ac:	463e      	mov	r6, r7
 81042ae:	6820      	ldr	r0, [r4, #0]
 81042b0:	4632      	mov	r2, r6
 81042b2:	4641      	mov	r1, r8
 81042b4:	f000 fab6 	bl	8104824 <memmove>
 81042b8:	68a3      	ldr	r3, [r4, #8]
 81042ba:	1b9b      	subs	r3, r3, r6
 81042bc:	60a3      	str	r3, [r4, #8]
 81042be:	6823      	ldr	r3, [r4, #0]
 81042c0:	4433      	add	r3, r6
 81042c2:	6023      	str	r3, [r4, #0]
 81042c4:	2000      	movs	r0, #0
 81042c6:	e7db      	b.n	8104280 <__ssputs_r+0x58>
 81042c8:	462a      	mov	r2, r5
 81042ca:	f000 fba5 	bl	8104a18 <_realloc_r>
 81042ce:	4606      	mov	r6, r0
 81042d0:	2800      	cmp	r0, #0
 81042d2:	d1e1      	bne.n	8104298 <__ssputs_r+0x70>
 81042d4:	6921      	ldr	r1, [r4, #16]
 81042d6:	4650      	mov	r0, sl
 81042d8:	f000 fabe 	bl	8104858 <_free_r>
 81042dc:	e7c7      	b.n	810426e <__ssputs_r+0x46>
	...

081042e0 <_svfiprintf_r>:
 81042e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81042e4:	4698      	mov	r8, r3
 81042e6:	898b      	ldrh	r3, [r1, #12]
 81042e8:	061b      	lsls	r3, r3, #24
 81042ea:	b09d      	sub	sp, #116	; 0x74
 81042ec:	4607      	mov	r7, r0
 81042ee:	460d      	mov	r5, r1
 81042f0:	4614      	mov	r4, r2
 81042f2:	d50e      	bpl.n	8104312 <_svfiprintf_r+0x32>
 81042f4:	690b      	ldr	r3, [r1, #16]
 81042f6:	b963      	cbnz	r3, 8104312 <_svfiprintf_r+0x32>
 81042f8:	2140      	movs	r1, #64	; 0x40
 81042fa:	f000 fb19 	bl	8104930 <_malloc_r>
 81042fe:	6028      	str	r0, [r5, #0]
 8104300:	6128      	str	r0, [r5, #16]
 8104302:	b920      	cbnz	r0, 810430e <_svfiprintf_r+0x2e>
 8104304:	230c      	movs	r3, #12
 8104306:	603b      	str	r3, [r7, #0]
 8104308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810430c:	e0d1      	b.n	81044b2 <_svfiprintf_r+0x1d2>
 810430e:	2340      	movs	r3, #64	; 0x40
 8104310:	616b      	str	r3, [r5, #20]
 8104312:	2300      	movs	r3, #0
 8104314:	9309      	str	r3, [sp, #36]	; 0x24
 8104316:	2320      	movs	r3, #32
 8104318:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810431c:	f8cd 800c 	str.w	r8, [sp, #12]
 8104320:	2330      	movs	r3, #48	; 0x30
 8104322:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 81044cc <_svfiprintf_r+0x1ec>
 8104326:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810432a:	f04f 0901 	mov.w	r9, #1
 810432e:	4623      	mov	r3, r4
 8104330:	469a      	mov	sl, r3
 8104332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8104336:	b10a      	cbz	r2, 810433c <_svfiprintf_r+0x5c>
 8104338:	2a25      	cmp	r2, #37	; 0x25
 810433a:	d1f9      	bne.n	8104330 <_svfiprintf_r+0x50>
 810433c:	ebba 0b04 	subs.w	fp, sl, r4
 8104340:	d00b      	beq.n	810435a <_svfiprintf_r+0x7a>
 8104342:	465b      	mov	r3, fp
 8104344:	4622      	mov	r2, r4
 8104346:	4629      	mov	r1, r5
 8104348:	4638      	mov	r0, r7
 810434a:	f7ff ff6d 	bl	8104228 <__ssputs_r>
 810434e:	3001      	adds	r0, #1
 8104350:	f000 80aa 	beq.w	81044a8 <_svfiprintf_r+0x1c8>
 8104354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8104356:	445a      	add	r2, fp
 8104358:	9209      	str	r2, [sp, #36]	; 0x24
 810435a:	f89a 3000 	ldrb.w	r3, [sl]
 810435e:	2b00      	cmp	r3, #0
 8104360:	f000 80a2 	beq.w	81044a8 <_svfiprintf_r+0x1c8>
 8104364:	2300      	movs	r3, #0
 8104366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810436a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810436e:	f10a 0a01 	add.w	sl, sl, #1
 8104372:	9304      	str	r3, [sp, #16]
 8104374:	9307      	str	r3, [sp, #28]
 8104376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810437a:	931a      	str	r3, [sp, #104]	; 0x68
 810437c:	4654      	mov	r4, sl
 810437e:	2205      	movs	r2, #5
 8104380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8104384:	4851      	ldr	r0, [pc, #324]	; (81044cc <_svfiprintf_r+0x1ec>)
 8104386:	f7fb ffab 	bl	81002e0 <memchr>
 810438a:	9a04      	ldr	r2, [sp, #16]
 810438c:	b9d8      	cbnz	r0, 81043c6 <_svfiprintf_r+0xe6>
 810438e:	06d0      	lsls	r0, r2, #27
 8104390:	bf44      	itt	mi
 8104392:	2320      	movmi	r3, #32
 8104394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8104398:	0711      	lsls	r1, r2, #28
 810439a:	bf44      	itt	mi
 810439c:	232b      	movmi	r3, #43	; 0x2b
 810439e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81043a2:	f89a 3000 	ldrb.w	r3, [sl]
 81043a6:	2b2a      	cmp	r3, #42	; 0x2a
 81043a8:	d015      	beq.n	81043d6 <_svfiprintf_r+0xf6>
 81043aa:	9a07      	ldr	r2, [sp, #28]
 81043ac:	4654      	mov	r4, sl
 81043ae:	2000      	movs	r0, #0
 81043b0:	f04f 0c0a 	mov.w	ip, #10
 81043b4:	4621      	mov	r1, r4
 81043b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 81043ba:	3b30      	subs	r3, #48	; 0x30
 81043bc:	2b09      	cmp	r3, #9
 81043be:	d94e      	bls.n	810445e <_svfiprintf_r+0x17e>
 81043c0:	b1b0      	cbz	r0, 81043f0 <_svfiprintf_r+0x110>
 81043c2:	9207      	str	r2, [sp, #28]
 81043c4:	e014      	b.n	81043f0 <_svfiprintf_r+0x110>
 81043c6:	eba0 0308 	sub.w	r3, r0, r8
 81043ca:	fa09 f303 	lsl.w	r3, r9, r3
 81043ce:	4313      	orrs	r3, r2
 81043d0:	9304      	str	r3, [sp, #16]
 81043d2:	46a2      	mov	sl, r4
 81043d4:	e7d2      	b.n	810437c <_svfiprintf_r+0x9c>
 81043d6:	9b03      	ldr	r3, [sp, #12]
 81043d8:	1d19      	adds	r1, r3, #4
 81043da:	681b      	ldr	r3, [r3, #0]
 81043dc:	9103      	str	r1, [sp, #12]
 81043de:	2b00      	cmp	r3, #0
 81043e0:	bfbb      	ittet	lt
 81043e2:	425b      	neglt	r3, r3
 81043e4:	f042 0202 	orrlt.w	r2, r2, #2
 81043e8:	9307      	strge	r3, [sp, #28]
 81043ea:	9307      	strlt	r3, [sp, #28]
 81043ec:	bfb8      	it	lt
 81043ee:	9204      	strlt	r2, [sp, #16]
 81043f0:	7823      	ldrb	r3, [r4, #0]
 81043f2:	2b2e      	cmp	r3, #46	; 0x2e
 81043f4:	d10c      	bne.n	8104410 <_svfiprintf_r+0x130>
 81043f6:	7863      	ldrb	r3, [r4, #1]
 81043f8:	2b2a      	cmp	r3, #42	; 0x2a
 81043fa:	d135      	bne.n	8104468 <_svfiprintf_r+0x188>
 81043fc:	9b03      	ldr	r3, [sp, #12]
 81043fe:	1d1a      	adds	r2, r3, #4
 8104400:	681b      	ldr	r3, [r3, #0]
 8104402:	9203      	str	r2, [sp, #12]
 8104404:	2b00      	cmp	r3, #0
 8104406:	bfb8      	it	lt
 8104408:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810440c:	3402      	adds	r4, #2
 810440e:	9305      	str	r3, [sp, #20]
 8104410:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 81044dc <_svfiprintf_r+0x1fc>
 8104414:	7821      	ldrb	r1, [r4, #0]
 8104416:	2203      	movs	r2, #3
 8104418:	4650      	mov	r0, sl
 810441a:	f7fb ff61 	bl	81002e0 <memchr>
 810441e:	b140      	cbz	r0, 8104432 <_svfiprintf_r+0x152>
 8104420:	2340      	movs	r3, #64	; 0x40
 8104422:	eba0 000a 	sub.w	r0, r0, sl
 8104426:	fa03 f000 	lsl.w	r0, r3, r0
 810442a:	9b04      	ldr	r3, [sp, #16]
 810442c:	4303      	orrs	r3, r0
 810442e:	3401      	adds	r4, #1
 8104430:	9304      	str	r3, [sp, #16]
 8104432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8104436:	4826      	ldr	r0, [pc, #152]	; (81044d0 <_svfiprintf_r+0x1f0>)
 8104438:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810443c:	2206      	movs	r2, #6
 810443e:	f7fb ff4f 	bl	81002e0 <memchr>
 8104442:	2800      	cmp	r0, #0
 8104444:	d038      	beq.n	81044b8 <_svfiprintf_r+0x1d8>
 8104446:	4b23      	ldr	r3, [pc, #140]	; (81044d4 <_svfiprintf_r+0x1f4>)
 8104448:	bb1b      	cbnz	r3, 8104492 <_svfiprintf_r+0x1b2>
 810444a:	9b03      	ldr	r3, [sp, #12]
 810444c:	3307      	adds	r3, #7
 810444e:	f023 0307 	bic.w	r3, r3, #7
 8104452:	3308      	adds	r3, #8
 8104454:	9303      	str	r3, [sp, #12]
 8104456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8104458:	4433      	add	r3, r6
 810445a:	9309      	str	r3, [sp, #36]	; 0x24
 810445c:	e767      	b.n	810432e <_svfiprintf_r+0x4e>
 810445e:	fb0c 3202 	mla	r2, ip, r2, r3
 8104462:	460c      	mov	r4, r1
 8104464:	2001      	movs	r0, #1
 8104466:	e7a5      	b.n	81043b4 <_svfiprintf_r+0xd4>
 8104468:	2300      	movs	r3, #0
 810446a:	3401      	adds	r4, #1
 810446c:	9305      	str	r3, [sp, #20]
 810446e:	4619      	mov	r1, r3
 8104470:	f04f 0c0a 	mov.w	ip, #10
 8104474:	4620      	mov	r0, r4
 8104476:	f810 2b01 	ldrb.w	r2, [r0], #1
 810447a:	3a30      	subs	r2, #48	; 0x30
 810447c:	2a09      	cmp	r2, #9
 810447e:	d903      	bls.n	8104488 <_svfiprintf_r+0x1a8>
 8104480:	2b00      	cmp	r3, #0
 8104482:	d0c5      	beq.n	8104410 <_svfiprintf_r+0x130>
 8104484:	9105      	str	r1, [sp, #20]
 8104486:	e7c3      	b.n	8104410 <_svfiprintf_r+0x130>
 8104488:	fb0c 2101 	mla	r1, ip, r1, r2
 810448c:	4604      	mov	r4, r0
 810448e:	2301      	movs	r3, #1
 8104490:	e7f0      	b.n	8104474 <_svfiprintf_r+0x194>
 8104492:	ab03      	add	r3, sp, #12
 8104494:	9300      	str	r3, [sp, #0]
 8104496:	462a      	mov	r2, r5
 8104498:	4b0f      	ldr	r3, [pc, #60]	; (81044d8 <_svfiprintf_r+0x1f8>)
 810449a:	a904      	add	r1, sp, #16
 810449c:	4638      	mov	r0, r7
 810449e:	f3af 8000 	nop.w
 81044a2:	1c42      	adds	r2, r0, #1
 81044a4:	4606      	mov	r6, r0
 81044a6:	d1d6      	bne.n	8104456 <_svfiprintf_r+0x176>
 81044a8:	89ab      	ldrh	r3, [r5, #12]
 81044aa:	065b      	lsls	r3, r3, #25
 81044ac:	f53f af2c 	bmi.w	8104308 <_svfiprintf_r+0x28>
 81044b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 81044b2:	b01d      	add	sp, #116	; 0x74
 81044b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81044b8:	ab03      	add	r3, sp, #12
 81044ba:	9300      	str	r3, [sp, #0]
 81044bc:	462a      	mov	r2, r5
 81044be:	4b06      	ldr	r3, [pc, #24]	; (81044d8 <_svfiprintf_r+0x1f8>)
 81044c0:	a904      	add	r1, sp, #16
 81044c2:	4638      	mov	r0, r7
 81044c4:	f000 f87a 	bl	81045bc <_printf_i>
 81044c8:	e7eb      	b.n	81044a2 <_svfiprintf_r+0x1c2>
 81044ca:	bf00      	nop
 81044cc:	08104b38 	.word	0x08104b38
 81044d0:	08104b42 	.word	0x08104b42
 81044d4:	00000000 	.word	0x00000000
 81044d8:	08104229 	.word	0x08104229
 81044dc:	08104b3e 	.word	0x08104b3e

081044e0 <_printf_common>:
 81044e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81044e4:	4616      	mov	r6, r2
 81044e6:	4699      	mov	r9, r3
 81044e8:	688a      	ldr	r2, [r1, #8]
 81044ea:	690b      	ldr	r3, [r1, #16]
 81044ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81044f0:	4293      	cmp	r3, r2
 81044f2:	bfb8      	it	lt
 81044f4:	4613      	movlt	r3, r2
 81044f6:	6033      	str	r3, [r6, #0]
 81044f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81044fc:	4607      	mov	r7, r0
 81044fe:	460c      	mov	r4, r1
 8104500:	b10a      	cbz	r2, 8104506 <_printf_common+0x26>
 8104502:	3301      	adds	r3, #1
 8104504:	6033      	str	r3, [r6, #0]
 8104506:	6823      	ldr	r3, [r4, #0]
 8104508:	0699      	lsls	r1, r3, #26
 810450a:	bf42      	ittt	mi
 810450c:	6833      	ldrmi	r3, [r6, #0]
 810450e:	3302      	addmi	r3, #2
 8104510:	6033      	strmi	r3, [r6, #0]
 8104512:	6825      	ldr	r5, [r4, #0]
 8104514:	f015 0506 	ands.w	r5, r5, #6
 8104518:	d106      	bne.n	8104528 <_printf_common+0x48>
 810451a:	f104 0a19 	add.w	sl, r4, #25
 810451e:	68e3      	ldr	r3, [r4, #12]
 8104520:	6832      	ldr	r2, [r6, #0]
 8104522:	1a9b      	subs	r3, r3, r2
 8104524:	42ab      	cmp	r3, r5
 8104526:	dc26      	bgt.n	8104576 <_printf_common+0x96>
 8104528:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810452c:	1e13      	subs	r3, r2, #0
 810452e:	6822      	ldr	r2, [r4, #0]
 8104530:	bf18      	it	ne
 8104532:	2301      	movne	r3, #1
 8104534:	0692      	lsls	r2, r2, #26
 8104536:	d42b      	bmi.n	8104590 <_printf_common+0xb0>
 8104538:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810453c:	4649      	mov	r1, r9
 810453e:	4638      	mov	r0, r7
 8104540:	47c0      	blx	r8
 8104542:	3001      	adds	r0, #1
 8104544:	d01e      	beq.n	8104584 <_printf_common+0xa4>
 8104546:	6823      	ldr	r3, [r4, #0]
 8104548:	68e5      	ldr	r5, [r4, #12]
 810454a:	6832      	ldr	r2, [r6, #0]
 810454c:	f003 0306 	and.w	r3, r3, #6
 8104550:	2b04      	cmp	r3, #4
 8104552:	bf08      	it	eq
 8104554:	1aad      	subeq	r5, r5, r2
 8104556:	68a3      	ldr	r3, [r4, #8]
 8104558:	6922      	ldr	r2, [r4, #16]
 810455a:	bf0c      	ite	eq
 810455c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8104560:	2500      	movne	r5, #0
 8104562:	4293      	cmp	r3, r2
 8104564:	bfc4      	itt	gt
 8104566:	1a9b      	subgt	r3, r3, r2
 8104568:	18ed      	addgt	r5, r5, r3
 810456a:	2600      	movs	r6, #0
 810456c:	341a      	adds	r4, #26
 810456e:	42b5      	cmp	r5, r6
 8104570:	d11a      	bne.n	81045a8 <_printf_common+0xc8>
 8104572:	2000      	movs	r0, #0
 8104574:	e008      	b.n	8104588 <_printf_common+0xa8>
 8104576:	2301      	movs	r3, #1
 8104578:	4652      	mov	r2, sl
 810457a:	4649      	mov	r1, r9
 810457c:	4638      	mov	r0, r7
 810457e:	47c0      	blx	r8
 8104580:	3001      	adds	r0, #1
 8104582:	d103      	bne.n	810458c <_printf_common+0xac>
 8104584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8104588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810458c:	3501      	adds	r5, #1
 810458e:	e7c6      	b.n	810451e <_printf_common+0x3e>
 8104590:	18e1      	adds	r1, r4, r3
 8104592:	1c5a      	adds	r2, r3, #1
 8104594:	2030      	movs	r0, #48	; 0x30
 8104596:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810459a:	4422      	add	r2, r4
 810459c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81045a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81045a4:	3302      	adds	r3, #2
 81045a6:	e7c7      	b.n	8104538 <_printf_common+0x58>
 81045a8:	2301      	movs	r3, #1
 81045aa:	4622      	mov	r2, r4
 81045ac:	4649      	mov	r1, r9
 81045ae:	4638      	mov	r0, r7
 81045b0:	47c0      	blx	r8
 81045b2:	3001      	adds	r0, #1
 81045b4:	d0e6      	beq.n	8104584 <_printf_common+0xa4>
 81045b6:	3601      	adds	r6, #1
 81045b8:	e7d9      	b.n	810456e <_printf_common+0x8e>
	...

081045bc <_printf_i>:
 81045bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81045c0:	7e0f      	ldrb	r7, [r1, #24]
 81045c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 81045c4:	2f78      	cmp	r7, #120	; 0x78
 81045c6:	4691      	mov	r9, r2
 81045c8:	4680      	mov	r8, r0
 81045ca:	460c      	mov	r4, r1
 81045cc:	469a      	mov	sl, r3
 81045ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 81045d2:	d807      	bhi.n	81045e4 <_printf_i+0x28>
 81045d4:	2f62      	cmp	r7, #98	; 0x62
 81045d6:	d80a      	bhi.n	81045ee <_printf_i+0x32>
 81045d8:	2f00      	cmp	r7, #0
 81045da:	f000 80d8 	beq.w	810478e <_printf_i+0x1d2>
 81045de:	2f58      	cmp	r7, #88	; 0x58
 81045e0:	f000 80a3 	beq.w	810472a <_printf_i+0x16e>
 81045e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81045e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81045ec:	e03a      	b.n	8104664 <_printf_i+0xa8>
 81045ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81045f2:	2b15      	cmp	r3, #21
 81045f4:	d8f6      	bhi.n	81045e4 <_printf_i+0x28>
 81045f6:	a101      	add	r1, pc, #4	; (adr r1, 81045fc <_printf_i+0x40>)
 81045f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81045fc:	08104655 	.word	0x08104655
 8104600:	08104669 	.word	0x08104669
 8104604:	081045e5 	.word	0x081045e5
 8104608:	081045e5 	.word	0x081045e5
 810460c:	081045e5 	.word	0x081045e5
 8104610:	081045e5 	.word	0x081045e5
 8104614:	08104669 	.word	0x08104669
 8104618:	081045e5 	.word	0x081045e5
 810461c:	081045e5 	.word	0x081045e5
 8104620:	081045e5 	.word	0x081045e5
 8104624:	081045e5 	.word	0x081045e5
 8104628:	08104775 	.word	0x08104775
 810462c:	08104699 	.word	0x08104699
 8104630:	08104757 	.word	0x08104757
 8104634:	081045e5 	.word	0x081045e5
 8104638:	081045e5 	.word	0x081045e5
 810463c:	08104797 	.word	0x08104797
 8104640:	081045e5 	.word	0x081045e5
 8104644:	08104699 	.word	0x08104699
 8104648:	081045e5 	.word	0x081045e5
 810464c:	081045e5 	.word	0x081045e5
 8104650:	0810475f 	.word	0x0810475f
 8104654:	682b      	ldr	r3, [r5, #0]
 8104656:	1d1a      	adds	r2, r3, #4
 8104658:	681b      	ldr	r3, [r3, #0]
 810465a:	602a      	str	r2, [r5, #0]
 810465c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8104660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8104664:	2301      	movs	r3, #1
 8104666:	e0a3      	b.n	81047b0 <_printf_i+0x1f4>
 8104668:	6820      	ldr	r0, [r4, #0]
 810466a:	6829      	ldr	r1, [r5, #0]
 810466c:	0606      	lsls	r6, r0, #24
 810466e:	f101 0304 	add.w	r3, r1, #4
 8104672:	d50a      	bpl.n	810468a <_printf_i+0xce>
 8104674:	680e      	ldr	r6, [r1, #0]
 8104676:	602b      	str	r3, [r5, #0]
 8104678:	2e00      	cmp	r6, #0
 810467a:	da03      	bge.n	8104684 <_printf_i+0xc8>
 810467c:	232d      	movs	r3, #45	; 0x2d
 810467e:	4276      	negs	r6, r6
 8104680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8104684:	485e      	ldr	r0, [pc, #376]	; (8104800 <_printf_i+0x244>)
 8104686:	230a      	movs	r3, #10
 8104688:	e019      	b.n	81046be <_printf_i+0x102>
 810468a:	680e      	ldr	r6, [r1, #0]
 810468c:	602b      	str	r3, [r5, #0]
 810468e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8104692:	bf18      	it	ne
 8104694:	b236      	sxthne	r6, r6
 8104696:	e7ef      	b.n	8104678 <_printf_i+0xbc>
 8104698:	682b      	ldr	r3, [r5, #0]
 810469a:	6820      	ldr	r0, [r4, #0]
 810469c:	1d19      	adds	r1, r3, #4
 810469e:	6029      	str	r1, [r5, #0]
 81046a0:	0601      	lsls	r1, r0, #24
 81046a2:	d501      	bpl.n	81046a8 <_printf_i+0xec>
 81046a4:	681e      	ldr	r6, [r3, #0]
 81046a6:	e002      	b.n	81046ae <_printf_i+0xf2>
 81046a8:	0646      	lsls	r6, r0, #25
 81046aa:	d5fb      	bpl.n	81046a4 <_printf_i+0xe8>
 81046ac:	881e      	ldrh	r6, [r3, #0]
 81046ae:	4854      	ldr	r0, [pc, #336]	; (8104800 <_printf_i+0x244>)
 81046b0:	2f6f      	cmp	r7, #111	; 0x6f
 81046b2:	bf0c      	ite	eq
 81046b4:	2308      	moveq	r3, #8
 81046b6:	230a      	movne	r3, #10
 81046b8:	2100      	movs	r1, #0
 81046ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81046be:	6865      	ldr	r5, [r4, #4]
 81046c0:	60a5      	str	r5, [r4, #8]
 81046c2:	2d00      	cmp	r5, #0
 81046c4:	bfa2      	ittt	ge
 81046c6:	6821      	ldrge	r1, [r4, #0]
 81046c8:	f021 0104 	bicge.w	r1, r1, #4
 81046cc:	6021      	strge	r1, [r4, #0]
 81046ce:	b90e      	cbnz	r6, 81046d4 <_printf_i+0x118>
 81046d0:	2d00      	cmp	r5, #0
 81046d2:	d04d      	beq.n	8104770 <_printf_i+0x1b4>
 81046d4:	4615      	mov	r5, r2
 81046d6:	fbb6 f1f3 	udiv	r1, r6, r3
 81046da:	fb03 6711 	mls	r7, r3, r1, r6
 81046de:	5dc7      	ldrb	r7, [r0, r7]
 81046e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 81046e4:	4637      	mov	r7, r6
 81046e6:	42bb      	cmp	r3, r7
 81046e8:	460e      	mov	r6, r1
 81046ea:	d9f4      	bls.n	81046d6 <_printf_i+0x11a>
 81046ec:	2b08      	cmp	r3, #8
 81046ee:	d10b      	bne.n	8104708 <_printf_i+0x14c>
 81046f0:	6823      	ldr	r3, [r4, #0]
 81046f2:	07de      	lsls	r6, r3, #31
 81046f4:	d508      	bpl.n	8104708 <_printf_i+0x14c>
 81046f6:	6923      	ldr	r3, [r4, #16]
 81046f8:	6861      	ldr	r1, [r4, #4]
 81046fa:	4299      	cmp	r1, r3
 81046fc:	bfde      	ittt	le
 81046fe:	2330      	movle	r3, #48	; 0x30
 8104700:	f805 3c01 	strble.w	r3, [r5, #-1]
 8104704:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8104708:	1b52      	subs	r2, r2, r5
 810470a:	6122      	str	r2, [r4, #16]
 810470c:	f8cd a000 	str.w	sl, [sp]
 8104710:	464b      	mov	r3, r9
 8104712:	aa03      	add	r2, sp, #12
 8104714:	4621      	mov	r1, r4
 8104716:	4640      	mov	r0, r8
 8104718:	f7ff fee2 	bl	81044e0 <_printf_common>
 810471c:	3001      	adds	r0, #1
 810471e:	d14c      	bne.n	81047ba <_printf_i+0x1fe>
 8104720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8104724:	b004      	add	sp, #16
 8104726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810472a:	4835      	ldr	r0, [pc, #212]	; (8104800 <_printf_i+0x244>)
 810472c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8104730:	6829      	ldr	r1, [r5, #0]
 8104732:	6823      	ldr	r3, [r4, #0]
 8104734:	f851 6b04 	ldr.w	r6, [r1], #4
 8104738:	6029      	str	r1, [r5, #0]
 810473a:	061d      	lsls	r5, r3, #24
 810473c:	d514      	bpl.n	8104768 <_printf_i+0x1ac>
 810473e:	07df      	lsls	r7, r3, #31
 8104740:	bf44      	itt	mi
 8104742:	f043 0320 	orrmi.w	r3, r3, #32
 8104746:	6023      	strmi	r3, [r4, #0]
 8104748:	b91e      	cbnz	r6, 8104752 <_printf_i+0x196>
 810474a:	6823      	ldr	r3, [r4, #0]
 810474c:	f023 0320 	bic.w	r3, r3, #32
 8104750:	6023      	str	r3, [r4, #0]
 8104752:	2310      	movs	r3, #16
 8104754:	e7b0      	b.n	81046b8 <_printf_i+0xfc>
 8104756:	6823      	ldr	r3, [r4, #0]
 8104758:	f043 0320 	orr.w	r3, r3, #32
 810475c:	6023      	str	r3, [r4, #0]
 810475e:	2378      	movs	r3, #120	; 0x78
 8104760:	4828      	ldr	r0, [pc, #160]	; (8104804 <_printf_i+0x248>)
 8104762:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8104766:	e7e3      	b.n	8104730 <_printf_i+0x174>
 8104768:	0659      	lsls	r1, r3, #25
 810476a:	bf48      	it	mi
 810476c:	b2b6      	uxthmi	r6, r6
 810476e:	e7e6      	b.n	810473e <_printf_i+0x182>
 8104770:	4615      	mov	r5, r2
 8104772:	e7bb      	b.n	81046ec <_printf_i+0x130>
 8104774:	682b      	ldr	r3, [r5, #0]
 8104776:	6826      	ldr	r6, [r4, #0]
 8104778:	6961      	ldr	r1, [r4, #20]
 810477a:	1d18      	adds	r0, r3, #4
 810477c:	6028      	str	r0, [r5, #0]
 810477e:	0635      	lsls	r5, r6, #24
 8104780:	681b      	ldr	r3, [r3, #0]
 8104782:	d501      	bpl.n	8104788 <_printf_i+0x1cc>
 8104784:	6019      	str	r1, [r3, #0]
 8104786:	e002      	b.n	810478e <_printf_i+0x1d2>
 8104788:	0670      	lsls	r0, r6, #25
 810478a:	d5fb      	bpl.n	8104784 <_printf_i+0x1c8>
 810478c:	8019      	strh	r1, [r3, #0]
 810478e:	2300      	movs	r3, #0
 8104790:	6123      	str	r3, [r4, #16]
 8104792:	4615      	mov	r5, r2
 8104794:	e7ba      	b.n	810470c <_printf_i+0x150>
 8104796:	682b      	ldr	r3, [r5, #0]
 8104798:	1d1a      	adds	r2, r3, #4
 810479a:	602a      	str	r2, [r5, #0]
 810479c:	681d      	ldr	r5, [r3, #0]
 810479e:	6862      	ldr	r2, [r4, #4]
 81047a0:	2100      	movs	r1, #0
 81047a2:	4628      	mov	r0, r5
 81047a4:	f7fb fd9c 	bl	81002e0 <memchr>
 81047a8:	b108      	cbz	r0, 81047ae <_printf_i+0x1f2>
 81047aa:	1b40      	subs	r0, r0, r5
 81047ac:	6060      	str	r0, [r4, #4]
 81047ae:	6863      	ldr	r3, [r4, #4]
 81047b0:	6123      	str	r3, [r4, #16]
 81047b2:	2300      	movs	r3, #0
 81047b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81047b8:	e7a8      	b.n	810470c <_printf_i+0x150>
 81047ba:	6923      	ldr	r3, [r4, #16]
 81047bc:	462a      	mov	r2, r5
 81047be:	4649      	mov	r1, r9
 81047c0:	4640      	mov	r0, r8
 81047c2:	47d0      	blx	sl
 81047c4:	3001      	adds	r0, #1
 81047c6:	d0ab      	beq.n	8104720 <_printf_i+0x164>
 81047c8:	6823      	ldr	r3, [r4, #0]
 81047ca:	079b      	lsls	r3, r3, #30
 81047cc:	d413      	bmi.n	81047f6 <_printf_i+0x23a>
 81047ce:	68e0      	ldr	r0, [r4, #12]
 81047d0:	9b03      	ldr	r3, [sp, #12]
 81047d2:	4298      	cmp	r0, r3
 81047d4:	bfb8      	it	lt
 81047d6:	4618      	movlt	r0, r3
 81047d8:	e7a4      	b.n	8104724 <_printf_i+0x168>
 81047da:	2301      	movs	r3, #1
 81047dc:	4632      	mov	r2, r6
 81047de:	4649      	mov	r1, r9
 81047e0:	4640      	mov	r0, r8
 81047e2:	47d0      	blx	sl
 81047e4:	3001      	adds	r0, #1
 81047e6:	d09b      	beq.n	8104720 <_printf_i+0x164>
 81047e8:	3501      	adds	r5, #1
 81047ea:	68e3      	ldr	r3, [r4, #12]
 81047ec:	9903      	ldr	r1, [sp, #12]
 81047ee:	1a5b      	subs	r3, r3, r1
 81047f0:	42ab      	cmp	r3, r5
 81047f2:	dcf2      	bgt.n	81047da <_printf_i+0x21e>
 81047f4:	e7eb      	b.n	81047ce <_printf_i+0x212>
 81047f6:	2500      	movs	r5, #0
 81047f8:	f104 0619 	add.w	r6, r4, #25
 81047fc:	e7f5      	b.n	81047ea <_printf_i+0x22e>
 81047fe:	bf00      	nop
 8104800:	08104b49 	.word	0x08104b49
 8104804:	08104b5a 	.word	0x08104b5a

08104808 <memcpy>:
 8104808:	440a      	add	r2, r1
 810480a:	4291      	cmp	r1, r2
 810480c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8104810:	d100      	bne.n	8104814 <memcpy+0xc>
 8104812:	4770      	bx	lr
 8104814:	b510      	push	{r4, lr}
 8104816:	f811 4b01 	ldrb.w	r4, [r1], #1
 810481a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810481e:	4291      	cmp	r1, r2
 8104820:	d1f9      	bne.n	8104816 <memcpy+0xe>
 8104822:	bd10      	pop	{r4, pc}

08104824 <memmove>:
 8104824:	4288      	cmp	r0, r1
 8104826:	b510      	push	{r4, lr}
 8104828:	eb01 0402 	add.w	r4, r1, r2
 810482c:	d902      	bls.n	8104834 <memmove+0x10>
 810482e:	4284      	cmp	r4, r0
 8104830:	4623      	mov	r3, r4
 8104832:	d807      	bhi.n	8104844 <memmove+0x20>
 8104834:	1e43      	subs	r3, r0, #1
 8104836:	42a1      	cmp	r1, r4
 8104838:	d008      	beq.n	810484c <memmove+0x28>
 810483a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810483e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8104842:	e7f8      	b.n	8104836 <memmove+0x12>
 8104844:	4402      	add	r2, r0
 8104846:	4601      	mov	r1, r0
 8104848:	428a      	cmp	r2, r1
 810484a:	d100      	bne.n	810484e <memmove+0x2a>
 810484c:	bd10      	pop	{r4, pc}
 810484e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8104852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8104856:	e7f7      	b.n	8104848 <memmove+0x24>

08104858 <_free_r>:
 8104858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810485a:	2900      	cmp	r1, #0
 810485c:	d044      	beq.n	81048e8 <_free_r+0x90>
 810485e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8104862:	9001      	str	r0, [sp, #4]
 8104864:	2b00      	cmp	r3, #0
 8104866:	f1a1 0404 	sub.w	r4, r1, #4
 810486a:	bfb8      	it	lt
 810486c:	18e4      	addlt	r4, r4, r3
 810486e:	f000 f913 	bl	8104a98 <__malloc_lock>
 8104872:	4a1e      	ldr	r2, [pc, #120]	; (81048ec <_free_r+0x94>)
 8104874:	9801      	ldr	r0, [sp, #4]
 8104876:	6813      	ldr	r3, [r2, #0]
 8104878:	b933      	cbnz	r3, 8104888 <_free_r+0x30>
 810487a:	6063      	str	r3, [r4, #4]
 810487c:	6014      	str	r4, [r2, #0]
 810487e:	b003      	add	sp, #12
 8104880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8104884:	f000 b90e 	b.w	8104aa4 <__malloc_unlock>
 8104888:	42a3      	cmp	r3, r4
 810488a:	d908      	bls.n	810489e <_free_r+0x46>
 810488c:	6825      	ldr	r5, [r4, #0]
 810488e:	1961      	adds	r1, r4, r5
 8104890:	428b      	cmp	r3, r1
 8104892:	bf01      	itttt	eq
 8104894:	6819      	ldreq	r1, [r3, #0]
 8104896:	685b      	ldreq	r3, [r3, #4]
 8104898:	1949      	addeq	r1, r1, r5
 810489a:	6021      	streq	r1, [r4, #0]
 810489c:	e7ed      	b.n	810487a <_free_r+0x22>
 810489e:	461a      	mov	r2, r3
 81048a0:	685b      	ldr	r3, [r3, #4]
 81048a2:	b10b      	cbz	r3, 81048a8 <_free_r+0x50>
 81048a4:	42a3      	cmp	r3, r4
 81048a6:	d9fa      	bls.n	810489e <_free_r+0x46>
 81048a8:	6811      	ldr	r1, [r2, #0]
 81048aa:	1855      	adds	r5, r2, r1
 81048ac:	42a5      	cmp	r5, r4
 81048ae:	d10b      	bne.n	81048c8 <_free_r+0x70>
 81048b0:	6824      	ldr	r4, [r4, #0]
 81048b2:	4421      	add	r1, r4
 81048b4:	1854      	adds	r4, r2, r1
 81048b6:	42a3      	cmp	r3, r4
 81048b8:	6011      	str	r1, [r2, #0]
 81048ba:	d1e0      	bne.n	810487e <_free_r+0x26>
 81048bc:	681c      	ldr	r4, [r3, #0]
 81048be:	685b      	ldr	r3, [r3, #4]
 81048c0:	6053      	str	r3, [r2, #4]
 81048c2:	4421      	add	r1, r4
 81048c4:	6011      	str	r1, [r2, #0]
 81048c6:	e7da      	b.n	810487e <_free_r+0x26>
 81048c8:	d902      	bls.n	81048d0 <_free_r+0x78>
 81048ca:	230c      	movs	r3, #12
 81048cc:	6003      	str	r3, [r0, #0]
 81048ce:	e7d6      	b.n	810487e <_free_r+0x26>
 81048d0:	6825      	ldr	r5, [r4, #0]
 81048d2:	1961      	adds	r1, r4, r5
 81048d4:	428b      	cmp	r3, r1
 81048d6:	bf04      	itt	eq
 81048d8:	6819      	ldreq	r1, [r3, #0]
 81048da:	685b      	ldreq	r3, [r3, #4]
 81048dc:	6063      	str	r3, [r4, #4]
 81048de:	bf04      	itt	eq
 81048e0:	1949      	addeq	r1, r1, r5
 81048e2:	6021      	streq	r1, [r4, #0]
 81048e4:	6054      	str	r4, [r2, #4]
 81048e6:	e7ca      	b.n	810487e <_free_r+0x26>
 81048e8:	b003      	add	sp, #12
 81048ea:	bd30      	pop	{r4, r5, pc}
 81048ec:	10000128 	.word	0x10000128

081048f0 <sbrk_aligned>:
 81048f0:	b570      	push	{r4, r5, r6, lr}
 81048f2:	4e0e      	ldr	r6, [pc, #56]	; (810492c <sbrk_aligned+0x3c>)
 81048f4:	460c      	mov	r4, r1
 81048f6:	6831      	ldr	r1, [r6, #0]
 81048f8:	4605      	mov	r5, r0
 81048fa:	b911      	cbnz	r1, 8104902 <sbrk_aligned+0x12>
 81048fc:	f000 f8bc 	bl	8104a78 <_sbrk_r>
 8104900:	6030      	str	r0, [r6, #0]
 8104902:	4621      	mov	r1, r4
 8104904:	4628      	mov	r0, r5
 8104906:	f000 f8b7 	bl	8104a78 <_sbrk_r>
 810490a:	1c43      	adds	r3, r0, #1
 810490c:	d00a      	beq.n	8104924 <sbrk_aligned+0x34>
 810490e:	1cc4      	adds	r4, r0, #3
 8104910:	f024 0403 	bic.w	r4, r4, #3
 8104914:	42a0      	cmp	r0, r4
 8104916:	d007      	beq.n	8104928 <sbrk_aligned+0x38>
 8104918:	1a21      	subs	r1, r4, r0
 810491a:	4628      	mov	r0, r5
 810491c:	f000 f8ac 	bl	8104a78 <_sbrk_r>
 8104920:	3001      	adds	r0, #1
 8104922:	d101      	bne.n	8104928 <sbrk_aligned+0x38>
 8104924:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8104928:	4620      	mov	r0, r4
 810492a:	bd70      	pop	{r4, r5, r6, pc}
 810492c:	1000012c 	.word	0x1000012c

08104930 <_malloc_r>:
 8104930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8104934:	1ccd      	adds	r5, r1, #3
 8104936:	f025 0503 	bic.w	r5, r5, #3
 810493a:	3508      	adds	r5, #8
 810493c:	2d0c      	cmp	r5, #12
 810493e:	bf38      	it	cc
 8104940:	250c      	movcc	r5, #12
 8104942:	2d00      	cmp	r5, #0
 8104944:	4607      	mov	r7, r0
 8104946:	db01      	blt.n	810494c <_malloc_r+0x1c>
 8104948:	42a9      	cmp	r1, r5
 810494a:	d905      	bls.n	8104958 <_malloc_r+0x28>
 810494c:	230c      	movs	r3, #12
 810494e:	603b      	str	r3, [r7, #0]
 8104950:	2600      	movs	r6, #0
 8104952:	4630      	mov	r0, r6
 8104954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8104958:	4e2e      	ldr	r6, [pc, #184]	; (8104a14 <_malloc_r+0xe4>)
 810495a:	f000 f89d 	bl	8104a98 <__malloc_lock>
 810495e:	6833      	ldr	r3, [r6, #0]
 8104960:	461c      	mov	r4, r3
 8104962:	bb34      	cbnz	r4, 81049b2 <_malloc_r+0x82>
 8104964:	4629      	mov	r1, r5
 8104966:	4638      	mov	r0, r7
 8104968:	f7ff ffc2 	bl	81048f0 <sbrk_aligned>
 810496c:	1c43      	adds	r3, r0, #1
 810496e:	4604      	mov	r4, r0
 8104970:	d14d      	bne.n	8104a0e <_malloc_r+0xde>
 8104972:	6834      	ldr	r4, [r6, #0]
 8104974:	4626      	mov	r6, r4
 8104976:	2e00      	cmp	r6, #0
 8104978:	d140      	bne.n	81049fc <_malloc_r+0xcc>
 810497a:	6823      	ldr	r3, [r4, #0]
 810497c:	4631      	mov	r1, r6
 810497e:	4638      	mov	r0, r7
 8104980:	eb04 0803 	add.w	r8, r4, r3
 8104984:	f000 f878 	bl	8104a78 <_sbrk_r>
 8104988:	4580      	cmp	r8, r0
 810498a:	d13a      	bne.n	8104a02 <_malloc_r+0xd2>
 810498c:	6821      	ldr	r1, [r4, #0]
 810498e:	3503      	adds	r5, #3
 8104990:	1a6d      	subs	r5, r5, r1
 8104992:	f025 0503 	bic.w	r5, r5, #3
 8104996:	3508      	adds	r5, #8
 8104998:	2d0c      	cmp	r5, #12
 810499a:	bf38      	it	cc
 810499c:	250c      	movcc	r5, #12
 810499e:	4629      	mov	r1, r5
 81049a0:	4638      	mov	r0, r7
 81049a2:	f7ff ffa5 	bl	81048f0 <sbrk_aligned>
 81049a6:	3001      	adds	r0, #1
 81049a8:	d02b      	beq.n	8104a02 <_malloc_r+0xd2>
 81049aa:	6823      	ldr	r3, [r4, #0]
 81049ac:	442b      	add	r3, r5
 81049ae:	6023      	str	r3, [r4, #0]
 81049b0:	e00e      	b.n	81049d0 <_malloc_r+0xa0>
 81049b2:	6822      	ldr	r2, [r4, #0]
 81049b4:	1b52      	subs	r2, r2, r5
 81049b6:	d41e      	bmi.n	81049f6 <_malloc_r+0xc6>
 81049b8:	2a0b      	cmp	r2, #11
 81049ba:	d916      	bls.n	81049ea <_malloc_r+0xba>
 81049bc:	1961      	adds	r1, r4, r5
 81049be:	42a3      	cmp	r3, r4
 81049c0:	6025      	str	r5, [r4, #0]
 81049c2:	bf18      	it	ne
 81049c4:	6059      	strne	r1, [r3, #4]
 81049c6:	6863      	ldr	r3, [r4, #4]
 81049c8:	bf08      	it	eq
 81049ca:	6031      	streq	r1, [r6, #0]
 81049cc:	5162      	str	r2, [r4, r5]
 81049ce:	604b      	str	r3, [r1, #4]
 81049d0:	4638      	mov	r0, r7
 81049d2:	f104 060b 	add.w	r6, r4, #11
 81049d6:	f000 f865 	bl	8104aa4 <__malloc_unlock>
 81049da:	f026 0607 	bic.w	r6, r6, #7
 81049de:	1d23      	adds	r3, r4, #4
 81049e0:	1af2      	subs	r2, r6, r3
 81049e2:	d0b6      	beq.n	8104952 <_malloc_r+0x22>
 81049e4:	1b9b      	subs	r3, r3, r6
 81049e6:	50a3      	str	r3, [r4, r2]
 81049e8:	e7b3      	b.n	8104952 <_malloc_r+0x22>
 81049ea:	6862      	ldr	r2, [r4, #4]
 81049ec:	42a3      	cmp	r3, r4
 81049ee:	bf0c      	ite	eq
 81049f0:	6032      	streq	r2, [r6, #0]
 81049f2:	605a      	strne	r2, [r3, #4]
 81049f4:	e7ec      	b.n	81049d0 <_malloc_r+0xa0>
 81049f6:	4623      	mov	r3, r4
 81049f8:	6864      	ldr	r4, [r4, #4]
 81049fa:	e7b2      	b.n	8104962 <_malloc_r+0x32>
 81049fc:	4634      	mov	r4, r6
 81049fe:	6876      	ldr	r6, [r6, #4]
 8104a00:	e7b9      	b.n	8104976 <_malloc_r+0x46>
 8104a02:	230c      	movs	r3, #12
 8104a04:	603b      	str	r3, [r7, #0]
 8104a06:	4638      	mov	r0, r7
 8104a08:	f000 f84c 	bl	8104aa4 <__malloc_unlock>
 8104a0c:	e7a1      	b.n	8104952 <_malloc_r+0x22>
 8104a0e:	6025      	str	r5, [r4, #0]
 8104a10:	e7de      	b.n	81049d0 <_malloc_r+0xa0>
 8104a12:	bf00      	nop
 8104a14:	10000128 	.word	0x10000128

08104a18 <_realloc_r>:
 8104a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8104a1c:	4680      	mov	r8, r0
 8104a1e:	4614      	mov	r4, r2
 8104a20:	460e      	mov	r6, r1
 8104a22:	b921      	cbnz	r1, 8104a2e <_realloc_r+0x16>
 8104a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8104a28:	4611      	mov	r1, r2
 8104a2a:	f7ff bf81 	b.w	8104930 <_malloc_r>
 8104a2e:	b92a      	cbnz	r2, 8104a3c <_realloc_r+0x24>
 8104a30:	f7ff ff12 	bl	8104858 <_free_r>
 8104a34:	4625      	mov	r5, r4
 8104a36:	4628      	mov	r0, r5
 8104a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8104a3c:	f000 f838 	bl	8104ab0 <_malloc_usable_size_r>
 8104a40:	4284      	cmp	r4, r0
 8104a42:	4607      	mov	r7, r0
 8104a44:	d802      	bhi.n	8104a4c <_realloc_r+0x34>
 8104a46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8104a4a:	d812      	bhi.n	8104a72 <_realloc_r+0x5a>
 8104a4c:	4621      	mov	r1, r4
 8104a4e:	4640      	mov	r0, r8
 8104a50:	f7ff ff6e 	bl	8104930 <_malloc_r>
 8104a54:	4605      	mov	r5, r0
 8104a56:	2800      	cmp	r0, #0
 8104a58:	d0ed      	beq.n	8104a36 <_realloc_r+0x1e>
 8104a5a:	42bc      	cmp	r4, r7
 8104a5c:	4622      	mov	r2, r4
 8104a5e:	4631      	mov	r1, r6
 8104a60:	bf28      	it	cs
 8104a62:	463a      	movcs	r2, r7
 8104a64:	f7ff fed0 	bl	8104808 <memcpy>
 8104a68:	4631      	mov	r1, r6
 8104a6a:	4640      	mov	r0, r8
 8104a6c:	f7ff fef4 	bl	8104858 <_free_r>
 8104a70:	e7e1      	b.n	8104a36 <_realloc_r+0x1e>
 8104a72:	4635      	mov	r5, r6
 8104a74:	e7df      	b.n	8104a36 <_realloc_r+0x1e>
	...

08104a78 <_sbrk_r>:
 8104a78:	b538      	push	{r3, r4, r5, lr}
 8104a7a:	4d06      	ldr	r5, [pc, #24]	; (8104a94 <_sbrk_r+0x1c>)
 8104a7c:	2300      	movs	r3, #0
 8104a7e:	4604      	mov	r4, r0
 8104a80:	4608      	mov	r0, r1
 8104a82:	602b      	str	r3, [r5, #0]
 8104a84:	f7fc f80e 	bl	8100aa4 <_sbrk>
 8104a88:	1c43      	adds	r3, r0, #1
 8104a8a:	d102      	bne.n	8104a92 <_sbrk_r+0x1a>
 8104a8c:	682b      	ldr	r3, [r5, #0]
 8104a8e:	b103      	cbz	r3, 8104a92 <_sbrk_r+0x1a>
 8104a90:	6023      	str	r3, [r4, #0]
 8104a92:	bd38      	pop	{r3, r4, r5, pc}
 8104a94:	10000130 	.word	0x10000130

08104a98 <__malloc_lock>:
 8104a98:	4801      	ldr	r0, [pc, #4]	; (8104aa0 <__malloc_lock+0x8>)
 8104a9a:	f000 b811 	b.w	8104ac0 <__retarget_lock_acquire_recursive>
 8104a9e:	bf00      	nop
 8104aa0:	10000134 	.word	0x10000134

08104aa4 <__malloc_unlock>:
 8104aa4:	4801      	ldr	r0, [pc, #4]	; (8104aac <__malloc_unlock+0x8>)
 8104aa6:	f000 b80c 	b.w	8104ac2 <__retarget_lock_release_recursive>
 8104aaa:	bf00      	nop
 8104aac:	10000134 	.word	0x10000134

08104ab0 <_malloc_usable_size_r>:
 8104ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8104ab4:	1f18      	subs	r0, r3, #4
 8104ab6:	2b00      	cmp	r3, #0
 8104ab8:	bfbc      	itt	lt
 8104aba:	580b      	ldrlt	r3, [r1, r0]
 8104abc:	18c0      	addlt	r0, r0, r3
 8104abe:	4770      	bx	lr

08104ac0 <__retarget_lock_acquire_recursive>:
 8104ac0:	4770      	bx	lr

08104ac2 <__retarget_lock_release_recursive>:
 8104ac2:	4770      	bx	lr

08104ac4 <_init>:
 8104ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104ac6:	bf00      	nop
 8104ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104aca:	bc08      	pop	{r3}
 8104acc:	469e      	mov	lr, r3
 8104ace:	4770      	bx	lr

08104ad0 <_fini>:
 8104ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104ad2:	bf00      	nop
 8104ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104ad6:	bc08      	pop	{r3}
 8104ad8:	469e      	mov	lr, r3
 8104ada:	4770      	bx	lr
