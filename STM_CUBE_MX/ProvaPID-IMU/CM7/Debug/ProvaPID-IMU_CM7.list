
ProvaPID-IMU_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006670  08006670  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08006670  08006670  00016670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006678  08006678  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800667c  0800667c  0001667c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08006690  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  080066f0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006b0  240000d0  08006750  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000780  08006750  00020780  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000193aa  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028e2  00000000  00000000  000394a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001038  00000000  00000000  0003bd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f50  00000000  00000000  0003cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a379  00000000  00000000  0003dd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000148ad  00000000  00000000  00078091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0017f176  00000000  00000000  0008c93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0020bab4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000044e4  00000000  00000000  0020bb04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006620 	.word	0x08006620

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006620 	.word	0x08006620

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <main+0x9c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 f9e1 	bl	8000af8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fbe7 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f835 	bl	80007a8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <main+0x9c>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <main+0x9c>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <main+0x9c>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fb61 	bl	8001e24 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f001 fb77 	bl	8001e58 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <main+0x9c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 f9b3 	bl	8000af8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f95b 	bl	8000a4c <MX_GPIO_Init>
  MX_ETH_Init();
 8000796:	f000 f88f 	bl	80008b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f8d9 	bl	8000950 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079e:	f000 f923 	bl	80009e8 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <main+0x9a>
 80007a4:	58024400 	.word	0x58024400

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09c      	sub	sp, #112	; 0x70
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	224c      	movs	r2, #76	; 0x4c
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f005 ff2a 	bl	8006610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2220      	movs	r2, #32
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f005 ff24 	bl	8006610 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007c8:	2004      	movs	r0, #4
 80007ca:	f001 fca1 	bl	8002110 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b36      	ldr	r3, [pc, #216]	; (80008ac <SystemClock_Config+0x104>)
 80007d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d6:	4a35      	ldr	r2, [pc, #212]	; (80008ac <SystemClock_Config+0x104>)
 80007d8:	f023 0301 	bic.w	r3, r3, #1
 80007dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007de:	4b33      	ldr	r3, [pc, #204]	; (80008ac <SystemClock_Config+0x104>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <SystemClock_Config+0x108>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f0:	4a2f      	ldr	r2, [pc, #188]	; (80008b0 <SystemClock_Config+0x108>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <SystemClock_Config+0x108>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000804:	bf00      	nop
 8000806:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <SystemClock_Config+0x108>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000812:	d1f8      	bne.n	8000806 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <SystemClock_Config+0x10c>)
 8000816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000818:	f023 0303 	bic.w	r3, r3, #3
 800081c:	4a25      	ldr	r2, [pc, #148]	; (80008b4 <SystemClock_Config+0x10c>)
 800081e:	f043 0302 	orr.w	r3, r3, #2
 8000822:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000824:	2301      	movs	r3, #1
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000828:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	2302      	movs	r3, #2
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800083a:	2312      	movs	r3, #18
 800083c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800084a:	230c      	movs	r3, #12
 800084c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800084e:	2302      	movs	r3, #2
 8000850:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000852:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000856:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fcc1 	bl	80021e4 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000868:	f000 f946 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	233f      	movs	r3, #63	; 0x3f
 800086e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2303      	movs	r3, #3
 8000872:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800087c:	2340      	movs	r3, #64	; 0x40
 800087e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000880:	2340      	movs	r3, #64	; 0x40
 8000882:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000888:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800088a:	2340      	movs	r3, #64	; 0x40
 800088c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2101      	movs	r1, #1
 8000892:	4618      	mov	r0, r3
 8000894:	f002 f900 	bl	8002a98 <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800089e:	f000 f92b 	bl	8000af8 <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	3770      	adds	r7, #112	; 0x70
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	58000400 	.word	0x58000400
 80008b0:	58024800 	.word	0x58024800
 80008b4:	58024400 	.word	0x58024400

080008b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008bc:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_ETH_Init+0x80>)
 80008be:	4a1f      	ldr	r2, [pc, #124]	; (800093c <MX_ETH_Init+0x84>)
 80008c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_ETH_Init+0x88>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_ETH_Init+0x88>)
 80008ca:	2280      	movs	r2, #128	; 0x80
 80008cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_ETH_Init+0x88>)
 80008d0:	22e1      	movs	r2, #225	; 0xe1
 80008d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_ETH_Init+0x88>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_ETH_Init+0x88>)
 80008dc:	2200      	movs	r2, #0
 80008de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_ETH_Init+0x88>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_ETH_Init+0x80>)
 80008e8:	4a15      	ldr	r2, [pc, #84]	; (8000940 <MX_ETH_Init+0x88>)
 80008ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_ETH_Init+0x80>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_ETH_Init+0x80>)
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <MX_ETH_Init+0x8c>)
 80008f6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_ETH_Init+0x80>)
 80008fa:	4a13      	ldr	r2, [pc, #76]	; (8000948 <MX_ETH_Init+0x90>)
 80008fc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_ETH_Init+0x80>)
 8000900:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000904:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_ETH_Init+0x80>)
 8000908:	f000 fcb8 	bl	800127c <HAL_ETH_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000912:	f000 f8f1 	bl	8000af8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000916:	2238      	movs	r2, #56	; 0x38
 8000918:	2100      	movs	r1, #0
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_ETH_Init+0x94>)
 800091c:	f005 fe78 	bl	8006610 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_ETH_Init+0x94>)
 8000922:	2221      	movs	r2, #33	; 0x21
 8000924:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_ETH_Init+0x94>)
 8000928:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800092c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_ETH_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	24000124 	.word	0x24000124
 800093c:	40028000 	.word	0x40028000
 8000940:	24000774 	.word	0x24000774
 8000944:	24000070 	.word	0x24000070
 8000948:	24000010 	.word	0x24000010
 800094c:	240000ec 	.word	0x240000ec

08000950 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <MX_USART3_UART_Init+0x94>)
 8000958:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800099a:	f004 fa35 	bl	8004e08 <HAL_UART_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009a4:	f000 f8a8 	bl	8000af8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009ac:	f005 fa37 	bl	8005e1e <HAL_UARTEx_SetTxFifoThreshold>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009b6:	f000 f89f 	bl	8000af8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009be:	f005 fa6c 	bl	8005e9a <HAL_UARTEx_SetRxFifoThreshold>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009c8:	f000 f896 	bl	8000af8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009ce:	f005 f9ed 	bl	8005dac <HAL_UARTEx_DisableFifoMode>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 f88e 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	240001d4 	.word	0x240001d4
 80009e4:	40004800 	.word	0x40004800

080009e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f4:	2209      	movs	r2, #9
 80009f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a06:	2202      	movs	r2, #2
 8000a08:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a30:	f001 fa26 	bl	8001e80 <HAL_PCD_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a3a:	f000 f85d 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	24000268 	.word	0x24000268
 8000a48:	40080000 	.word	0x40080000

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a58:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	f003 0304 	and.w	r3, r3, #4
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a76:	4a1f      	ldr	r2, [pc, #124]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_GPIO_Init+0xa8>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]

}
 8000ae8:	bf00      	nop
 8000aea:	371c      	adds	r7, #28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	58024400 	.word	0x58024400

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_MspInit+0x30>)
 8000b0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b10:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x30>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x30>)
 8000b1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	58024400 	.word	0x58024400

08000b38 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	; 0x38
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a59      	ldr	r2, [pc, #356]	; (8000cbc <HAL_ETH_MspInit+0x184>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	f040 80ab 	bne.w	8000cb2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b5c:	4b58      	ldr	r3, [pc, #352]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000b5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b62:	4a57      	ldr	r2, [pc, #348]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b68:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b6c:	4b54      	ldr	r3, [pc, #336]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000b6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b76:	623b      	str	r3, [r7, #32]
 8000b78:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b7a:	4b51      	ldr	r3, [pc, #324]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000b7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b80:	4a4f      	ldr	r2, [pc, #316]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b8a:	4b4d      	ldr	r3, [pc, #308]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000b8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b94:	61fb      	str	r3, [r7, #28]
 8000b96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b98:	4b49      	ldr	r3, [pc, #292]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000b9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b9e:	4a48      	ldr	r2, [pc, #288]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ba8:	4b45      	ldr	r3, [pc, #276]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000baa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b42      	ldr	r3, [pc, #264]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a40      	ldr	r2, [pc, #256]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b3e      	ldr	r3, [pc, #248]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	4a39      	ldr	r2, [pc, #228]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be4:	4b36      	ldr	r3, [pc, #216]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b33      	ldr	r3, [pc, #204]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a31      	ldr	r2, [pc, #196]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c10:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a2a      	ldr	r2, [pc, #168]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <HAL_ETH_MspInit+0x188>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c2e:	2332      	movs	r3, #50	; 0x32
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c3e:	230b      	movs	r3, #11
 8000c40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	481e      	ldr	r0, [pc, #120]	; (8000cc4 <HAL_ETH_MspInit+0x18c>)
 8000c4a:	f000 ff3b 	bl	8001ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c4e:	2386      	movs	r3, #134	; 0x86
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5e:	230b      	movs	r3, #11
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	4817      	ldr	r0, [pc, #92]	; (8000cc8 <HAL_ETH_MspInit+0x190>)
 8000c6a:	f000 ff2b 	bl	8001ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c80:	230b      	movs	r3, #11
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4810      	ldr	r0, [pc, #64]	; (8000ccc <HAL_ETH_MspInit+0x194>)
 8000c8c:	f000 ff1a 	bl	8001ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c90:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca2:	230b      	movs	r3, #11
 8000ca4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <HAL_ETH_MspInit+0x198>)
 8000cae:	f000 ff09 	bl	8001ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	3738      	adds	r7, #56	; 0x38
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40028000 	.word	0x40028000
 8000cc0:	58024400 	.word	0x58024400
 8000cc4:	58020800 	.word	0x58020800
 8000cc8:	58020000 	.word	0x58020000
 8000ccc:	58020400 	.word	0x58020400
 8000cd0:	58021800 	.word	0x58021800

08000cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0b4      	sub	sp, #208	; 0xd0
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	22c0      	movs	r2, #192	; 0xc0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f005 fc93 	bl	8006610 <memset>
  if(huart->Instance==USART3)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <HAL_UART_MspInit+0x6c>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d121      	bne.n	8000d38 <HAL_UART_MspInit+0x64>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cf4:	f04f 0202 	mov.w	r2, #2
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 fa50 	bl	80031b0 <HAL_RCCEx_PeriphCLKConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_UART_MspInit+0x46>
    {
      Error_Handler();
 8000d16:	f7ff feef 	bl	8000af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_UART_MspInit+0x70>)
 8000d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d20:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_UART_MspInit+0x70>)
 8000d22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_UART_MspInit+0x70>)
 8000d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	37d0      	adds	r7, #208	; 0xd0
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40004800 	.word	0x40004800
 8000d44:	58024400 	.word	0x58024400

08000d48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b0ba      	sub	sp, #232	; 0xe8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	22c0      	movs	r2, #192	; 0xc0
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f005 fc51 	bl	8006610 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a38      	ldr	r2, [pc, #224]	; (8000e54 <HAL_PCD_MspInit+0x10c>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d169      	bne.n	8000e4c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d78:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000d88:	2312      	movs	r3, #18
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000d90:	2303      	movs	r3, #3
 8000d92:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000d98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000d9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000da2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000da4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4618      	mov	r0, r3
 8000db2:	f002 f9fd 	bl	80031b0 <HAL_RCCEx_PeriphCLKConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000dbc:	f7ff fe9c 	bl	8000af8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000dc0:	f001 fa00 	bl	80021c4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <HAL_PCD_MspInit+0x110>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <HAL_PCD_MspInit+0x110>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <HAL_PCD_MspInit+0x110>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000de2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4814      	ldr	r0, [pc, #80]	; (8000e5c <HAL_PCD_MspInit+0x114>)
 8000e0a:	f000 fe5b 	bl	8001ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e26:	4619      	mov	r1, r3
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <HAL_PCD_MspInit+0x114>)
 8000e2a:	f000 fe4b 	bl	8001ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_PCD_MspInit+0x110>)
 8000e30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e34:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <HAL_PCD_MspInit+0x110>)
 8000e36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_PCD_MspInit+0x110>)
 8000e40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	37e8      	adds	r7, #232	; 0xe8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40080000 	.word	0x40080000
 8000e58:	58024400 	.word	0x58024400
 8000e5c:	58020000 	.word	0x58020000

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 f89e 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eb8:	f7ff fb90 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	; (8000f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f005 fb71 	bl	80065c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fc0f 	bl	8000708 <main>
  bx  lr
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ef0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ef4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ef8:	08006680 	.word	0x08006680
  ldr r2, =_sbss
 8000efc:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000f00:	24000780 	.word	0x24000780

08000f04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC3_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f000 f982 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f14:	f001 ff76 	bl	8002e04 <HAL_RCC_GetSysClockFreq>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_Init+0x68>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	4913      	ldr	r1, [pc, #76]	; (8000f74 <HAL_Init+0x6c>)
 8000f26:	5ccb      	ldrb	r3, [r1, r3]
 8000f28:	f003 031f 	and.w	r3, r3, #31
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_Init+0x68>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_Init+0x6c>)
 8000f3c:	5cd3      	ldrb	r3, [r2, r3]
 8000f3e:	f003 031f 	and.w	r3, r3, #31
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	fa22 f303 	lsr.w	r3, r2, r3
 8000f48:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <HAL_Init+0x70>)
 8000f4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_Init+0x74>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f814 	bl	8000f80 <HAL_InitTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e002      	b.n	8000f68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f62:	f7ff fdcf 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58024400 	.word	0x58024400
 8000f74:	08006638 	.word	0x08006638
 8000f78:	24000004 	.word	0x24000004
 8000f7c:	24000000 	.word	0x24000000

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_InitTick+0x60>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e021      	b.n	8000fd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_InitTick+0x64>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_InitTick+0x60>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f959 	bl	8001262 <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 f931 	bl	800122e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_InitTick+0x68>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2400000c 	.word	0x2400000c
 8000fe4:	24000000 	.word	0x24000000
 8000fe8:	24000008 	.word	0x24000008

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2400000c 	.word	0x2400000c
 8001010:	2400077c 	.word	0x2400077c

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	2400077c 	.word	0x2400077c

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_Delay+0x44>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2400000c 	.word	0x2400000c

08001074 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetREVID+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	0c1b      	lsrs	r3, r3, #16
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	5c001000 	.word	0x5c001000

0800108c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800109c:	4904      	ldr	r1, [pc, #16]	; (80010b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	58000400 	.word	0x58000400

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <__NVIC_SetPriorityGrouping+0x40>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <__NVIC_SetPriorityGrouping+0x40>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00
 80010f8:	05fa0000 	.word	0x05fa0000

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e4:	d301      	bcc.n	80011ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00f      	b.n	800120a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <SysTick_Config+0x40>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f2:	210f      	movs	r1, #15
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f7ff ff8e 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SysTick_Config+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SysTick_Config+0x40>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff47 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff5e 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff90 	bl	800116c <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5f 	bl	8001118 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffb2 	bl	80011d4 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e0cf      	b.n	800142e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001294:	2b00      	cmp	r3, #0
 8001296:	d106      	bne.n	80012a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2223      	movs	r2, #35	; 0x23
 800129c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff fc49 	bl	8000b38 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b64      	ldr	r3, [pc, #400]	; (8001438 <HAL_ETH_Init+0x1bc>)
 80012a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012ac:	4a62      	ldr	r2, [pc, #392]	; (8001438 <HAL_ETH_Init+0x1bc>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012b6:	4b60      	ldr	r3, [pc, #384]	; (8001438 <HAL_ETH_Init+0x1bc>)
 80012b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7a1b      	ldrb	r3, [r3, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d103      	bne.n	80012d4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff fedd 	bl	800108c <HAL_SYSCFG_ETHInterfaceSelect>
 80012d2:	e003      	b.n	80012dc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80012d4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80012d8:	f7ff fed8 	bl	800108c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80012dc:	4b57      	ldr	r3, [pc, #348]	; (800143c <HAL_ETH_Init+0x1c0>)
 80012de:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012f8:	f7ff fe8c 	bl	8001014 <HAL_GetTick>
 80012fc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80012fe:	e011      	b.n	8001324 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001300:	f7ff fe88 	bl	8001014 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800130e:	d909      	bls.n	8001324 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2204      	movs	r2, #4
 8001314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	22e0      	movs	r2, #224	; 0xe0
 800131c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e084      	b.n	800142e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1e4      	bne.n	8001300 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 f886 	bl	8001448 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800133c:	f001 fedc 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8001340:	4603      	mov	r3, r0
 8001342:	4a3f      	ldr	r2, [pc, #252]	; (8001440 <HAL_ETH_Init+0x1c4>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	0c9a      	lsrs	r2, r3, #18
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3a01      	subs	r2, #1
 8001350:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 fa71 	bl	800183c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001362:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001366:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001372:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001376:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d009      	beq.n	800139a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	22e0      	movs	r2, #224	; 0xe0
 8001392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e049      	b.n	800142e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80013a6:	4b27      	ldr	r3, [pc, #156]	; (8001444 <HAL_ETH_Init+0x1c8>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6952      	ldr	r2, [r2, #20]
 80013ae:	0051      	lsls	r1, r2, #1
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	430b      	orrs	r3, r1
 80013b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013ba:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 fad9 	bl	8001976 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 fb1f 	bl	8001a08 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	3305      	adds	r3, #5
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	021a      	lsls	r2, r3, #8
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	3304      	adds	r3, #4
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	3303      	adds	r3, #3
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	061a      	lsls	r2, r3, #24
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	3302      	adds	r3, #2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	041b      	lsls	r3, r3, #16
 80013fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	3301      	adds	r3, #1
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001408:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001416:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001418:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2210      	movs	r2, #16
 8001428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	58024400 	.word	0x58024400
 800143c:	58000400 	.word	0x58000400
 8001440:	431bde83 	.word	0x431bde83
 8001444:	ffff8001 	.word	0xffff8001

08001448 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001458:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001460:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001462:	f001 fe49 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8001466:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4a1e      	ldr	r2, [pc, #120]	; (80014e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d908      	bls.n	8001482 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d804      	bhi.n	8001482 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	e027      	b.n	80014d2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d908      	bls.n	800149c <HAL_ETH_SetMDIOClockRange+0x54>
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	4a17      	ldr	r2, [pc, #92]	; (80014ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d204      	bcs.n	800149c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	e01a      	b.n	80014d2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4a13      	ldr	r2, [pc, #76]	; (80014ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d303      	bcc.n	80014ac <HAL_ETH_SetMDIOClockRange+0x64>
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d911      	bls.n	80014d0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4a10      	ldr	r2, [pc, #64]	; (80014f0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d908      	bls.n	80014c6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <HAL_ETH_SetMDIOClockRange+0xac>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d804      	bhi.n	80014c6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	e005      	b.n	80014d2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	e000      	b.n	80014d2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80014d0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	01312cff 	.word	0x01312cff
 80014e8:	02160ebf 	.word	0x02160ebf
 80014ec:	03938700 	.word	0x03938700
 80014f0:	05f5e0ff 	.word	0x05f5e0ff
 80014f4:	08f0d17f 	.word	0x08f0d17f

080014f8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800150a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	791b      	ldrb	r3, [r3, #4]
 8001510:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001512:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	7b1b      	ldrb	r3, [r3, #12]
 8001518:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800151a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	7b5b      	ldrb	r3, [r3, #13]
 8001520:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001522:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	7b9b      	ldrb	r3, [r3, #14]
 8001528:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800152a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	7bdb      	ldrb	r3, [r3, #15]
 8001530:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001532:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	7c12      	ldrb	r2, [r2, #16]
 8001538:	2a00      	cmp	r2, #0
 800153a:	d102      	bne.n	8001542 <ETH_SetMACConfig+0x4a>
 800153c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001540:	e000      	b.n	8001544 <ETH_SetMACConfig+0x4c>
 8001542:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001544:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	7c52      	ldrb	r2, [r2, #17]
 800154a:	2a00      	cmp	r2, #0
 800154c:	d102      	bne.n	8001554 <ETH_SetMACConfig+0x5c>
 800154e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001552:	e000      	b.n	8001556 <ETH_SetMACConfig+0x5e>
 8001554:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001556:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	7c9b      	ldrb	r3, [r3, #18]
 800155c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800155e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001564:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800156a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	7f1b      	ldrb	r3, [r3, #28]
 8001570:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001572:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	7f5b      	ldrb	r3, [r3, #29]
 8001578:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800157a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	7f92      	ldrb	r2, [r2, #30]
 8001580:	2a00      	cmp	r2, #0
 8001582:	d102      	bne.n	800158a <ETH_SetMACConfig+0x92>
 8001584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001588:	e000      	b.n	800158c <ETH_SetMACConfig+0x94>
 800158a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800158c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	7fdb      	ldrb	r3, [r3, #31]
 8001592:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001594:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	f892 2020 	ldrb.w	r2, [r2, #32]
 800159c:	2a00      	cmp	r2, #0
 800159e:	d102      	bne.n	80015a6 <ETH_SetMACConfig+0xae>
 80015a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a4:	e000      	b.n	80015a8 <ETH_SetMACConfig+0xb0>
 80015a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80015a8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80015ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015b6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80015b8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80015be:	4313      	orrs	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b56      	ldr	r3, [pc, #344]	; (8001724 <ETH_SetMACConfig+0x22c>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	68f9      	ldr	r1, [r7, #12]
 80015d2:	430b      	orrs	r3, r1
 80015d4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015da:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015e2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80015e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015ec:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80015ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80015f6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80015f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001600:	2a00      	cmp	r2, #0
 8001602:	d102      	bne.n	800160a <ETH_SetMACConfig+0x112>
 8001604:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001608:	e000      	b.n	800160c <ETH_SetMACConfig+0x114>
 800160a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800160c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001612:	4313      	orrs	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4b42      	ldr	r3, [pc, #264]	; (8001728 <ETH_SetMACConfig+0x230>)
 800161e:	4013      	ands	r3, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	68f9      	ldr	r1, [r7, #12]
 8001626:	430b      	orrs	r3, r1
 8001628:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001630:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001636:	4313      	orrs	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	4b3a      	ldr	r3, [pc, #232]	; (800172c <ETH_SetMACConfig+0x234>)
 8001642:	4013      	ands	r3, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	68f9      	ldr	r1, [r7, #12]
 800164a:	430b      	orrs	r3, r1
 800164c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001654:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800165a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001662:	2a00      	cmp	r2, #0
 8001664:	d101      	bne.n	800166a <ETH_SetMACConfig+0x172>
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	e000      	b.n	800166c <ETH_SetMACConfig+0x174>
 800166a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800166c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001672:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001674:	4313      	orrs	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800167e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001682:	4013      	ands	r3, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	68f9      	ldr	r1, [r7, #12]
 800168a:	430b      	orrs	r3, r1
 800168c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001694:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800169c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800169e:	4313      	orrs	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016aa:	f023 0103 	bic.w	r1, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80016c2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80016de:	2a00      	cmp	r2, #0
 80016e0:	d101      	bne.n	80016e6 <ETH_SetMACConfig+0x1ee>
 80016e2:	2240      	movs	r2, #64	; 0x40
 80016e4:	e000      	b.n	80016e8 <ETH_SetMACConfig+0x1f0>
 80016e6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80016e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80016f0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80016f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80016fa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001708:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	430a      	orrs	r2, r1
 8001714:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	00048083 	.word	0x00048083
 8001728:	c0f88000 	.word	0xc0f88000
 800172c:	fffffef0 	.word	0xfffffef0

08001730 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b38      	ldr	r3, [pc, #224]	; (8001828 <ETH_SetDMAConfig+0xf8>)
 8001746:	4013      	ands	r3, r2
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	6811      	ldr	r1, [r2, #0]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	430b      	orrs	r3, r1
 8001752:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001756:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	791b      	ldrb	r3, [r3, #4]
 800175c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001762:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	7b1b      	ldrb	r3, [r3, #12]
 8001768:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800176a:	4313      	orrs	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4b2c      	ldr	r3, [pc, #176]	; (800182c <ETH_SetDMAConfig+0xfc>)
 800177a:	4013      	ands	r3, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	68f9      	ldr	r1, [r7, #12]
 8001782:	430b      	orrs	r3, r1
 8001784:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001788:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	7b5b      	ldrb	r3, [r3, #13]
 800178e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001794:	4313      	orrs	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80017a4:	4b22      	ldr	r3, [pc, #136]	; (8001830 <ETH_SetDMAConfig+0x100>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	68f9      	ldr	r1, [r7, #12]
 80017ae:	430b      	orrs	r3, r1
 80017b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017b4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	7d1b      	ldrb	r3, [r3, #20]
 80017c0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80017c2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	7f5b      	ldrb	r3, [r3, #29]
 80017c8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <ETH_SetDMAConfig+0x104>)
 80017dc:	4013      	ands	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	68f9      	ldr	r1, [r7, #12]
 80017e4:	430b      	orrs	r3, r1
 80017e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	7f1b      	ldrb	r3, [r3, #28]
 80017f2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001804:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <ETH_SetDMAConfig+0x108>)
 800180a:	4013      	ands	r3, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	430b      	orrs	r3, r1
 8001814:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001818:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	ffff87fd 	.word	0xffff87fd
 800182c:	ffff2ffe 	.word	0xffff2ffe
 8001830:	fffec000 	.word	0xfffec000
 8001834:	ffc0efef 	.word	0xffc0efef
 8001838:	7fc0ffff 	.word	0x7fc0ffff

0800183c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0a4      	sub	sp, #144	; 0x90
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001844:	2301      	movs	r3, #1
 8001846:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800184a:	2300      	movs	r3, #0
 800184c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800185a:	2301      	movs	r3, #1
 800185c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001860:	2301      	movs	r3, #1
 8001862:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001866:	2301      	movs	r3, #1
 8001868:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001872:	2301      	movs	r3, #1
 8001874:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001884:	2300      	movs	r3, #0
 8001886:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001894:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001898:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80018a0:	2300      	movs	r3, #0
 80018a2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80018a4:	2301      	movs	r3, #1
 80018a6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80018b6:	2300      	movs	r3, #0
 80018b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80018be:	2300      	movs	r3, #0
 80018c0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80018d4:	2320      	movs	r3, #32
 80018d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80018da:	2301      	movs	r3, #1
 80018dc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80018e6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80018ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018f0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80018f8:	2302      	movs	r3, #2
 80018fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001910:	2301      	movs	r3, #1
 8001912:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001916:	2300      	movs	r3, #0
 8001918:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fde6 	bl	80014f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800192c:	2301      	movs	r3, #1
 800192e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001930:	2301      	movs	r3, #1
 8001932:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001946:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800194a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001950:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001954:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800195c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001962:	f107 0308 	add.w	r3, r7, #8
 8001966:	4619      	mov	r1, r3
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff fee1 	bl	8001730 <ETH_SetDMAConfig>
}
 800196e:	bf00      	nop
 8001970:	3790      	adds	r7, #144	; 0x90
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001976:	b480      	push	{r7}
 8001978:	b085      	sub	sp, #20
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e01d      	b.n	80019c0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68d9      	ldr	r1, [r3, #12]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2200      	movs	r2, #0
 80019a0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80019ae:	68b9      	ldr	r1, [r7, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	3206      	adds	r2, #6
 80019b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3301      	adds	r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d9de      	bls.n	8001984 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d4:	461a      	mov	r2, r3
 80019d6:	2303      	movs	r3, #3
 80019d8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e023      	b.n	8001a5e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6919      	ldr	r1, [r3, #16]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2200      	movs	r2, #0
 8001a32:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	3212      	adds	r2, #18
 8001a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d9d8      	bls.n	8001a16 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ad2:	4b89      	ldr	r3, [pc, #548]	; (8001cf8 <HAL_GPIO_Init+0x234>)
 8001ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ad6:	e194      	b.n	8001e02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2101      	movs	r1, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8186 	beq.w	8001dfc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d005      	beq.n	8001b08 <HAL_GPIO_Init+0x44>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d130      	bne.n	8001b6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b3e:	2201      	movs	r2, #1
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	091b      	lsrs	r3, r3, #4
 8001b54:	f003 0201 	and.w	r2, r3, #1
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d017      	beq.n	8001ba6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d123      	bne.n	8001bfa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	08da      	lsrs	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3208      	adds	r2, #8
 8001bf4:	69b9      	ldr	r1, [r7, #24]
 8001bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0203 	and.w	r2, r3, #3
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 80e0 	beq.w	8001dfc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <HAL_GPIO_Init+0x238>)
 8001c3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c42:	4a2e      	ldr	r2, [pc, #184]	; (8001cfc <HAL_GPIO_Init+0x238>)
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_GPIO_Init+0x238>)
 8001c4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c5a:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <HAL_GPIO_Init+0x23c>)
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	3302      	adds	r3, #2
 8001c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	220f      	movs	r2, #15
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a20      	ldr	r2, [pc, #128]	; (8001d04 <HAL_GPIO_Init+0x240>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d052      	beq.n	8001d2c <HAL_GPIO_Init+0x268>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a1f      	ldr	r2, [pc, #124]	; (8001d08 <HAL_GPIO_Init+0x244>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d031      	beq.n	8001cf2 <HAL_GPIO_Init+0x22e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <HAL_GPIO_Init+0x248>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d02b      	beq.n	8001cee <HAL_GPIO_Init+0x22a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <HAL_GPIO_Init+0x24c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d025      	beq.n	8001cea <HAL_GPIO_Init+0x226>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <HAL_GPIO_Init+0x250>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01f      	beq.n	8001ce6 <HAL_GPIO_Init+0x222>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <HAL_GPIO_Init+0x254>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d019      	beq.n	8001ce2 <HAL_GPIO_Init+0x21e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a1a      	ldr	r2, [pc, #104]	; (8001d1c <HAL_GPIO_Init+0x258>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_GPIO_Init+0x21a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_GPIO_Init+0x25c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00d      	beq.n	8001cda <HAL_GPIO_Init+0x216>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <HAL_GPIO_Init+0x260>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d007      	beq.n	8001cd6 <HAL_GPIO_Init+0x212>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_GPIO_Init+0x264>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d101      	bne.n	8001cd2 <HAL_GPIO_Init+0x20e>
 8001cce:	2309      	movs	r3, #9
 8001cd0:	e02d      	b.n	8001d2e <HAL_GPIO_Init+0x26a>
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	e02b      	b.n	8001d2e <HAL_GPIO_Init+0x26a>
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	e029      	b.n	8001d2e <HAL_GPIO_Init+0x26a>
 8001cda:	2307      	movs	r3, #7
 8001cdc:	e027      	b.n	8001d2e <HAL_GPIO_Init+0x26a>
 8001cde:	2306      	movs	r3, #6
 8001ce0:	e025      	b.n	8001d2e <HAL_GPIO_Init+0x26a>
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	e023      	b.n	8001d2e <HAL_GPIO_Init+0x26a>
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	e021      	b.n	8001d2e <HAL_GPIO_Init+0x26a>
 8001cea:	2303      	movs	r3, #3
 8001cec:	e01f      	b.n	8001d2e <HAL_GPIO_Init+0x26a>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e01d      	b.n	8001d2e <HAL_GPIO_Init+0x26a>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e01b      	b.n	8001d2e <HAL_GPIO_Init+0x26a>
 8001cf6:	bf00      	nop
 8001cf8:	58000080 	.word	0x58000080
 8001cfc:	58024400 	.word	0x58024400
 8001d00:	58000400 	.word	0x58000400
 8001d04:	58020000 	.word	0x58020000
 8001d08:	58020400 	.word	0x58020400
 8001d0c:	58020800 	.word	0x58020800
 8001d10:	58020c00 	.word	0x58020c00
 8001d14:	58021000 	.word	0x58021000
 8001d18:	58021400 	.word	0x58021400
 8001d1c:	58021800 	.word	0x58021800
 8001d20:	58021c00 	.word	0x58021c00
 8001d24:	58022000 	.word	0x58022000
 8001d28:	58022400 	.word	0x58022400
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	f002 0203 	and.w	r2, r2, #3
 8001d34:	0092      	lsls	r2, r2, #2
 8001d36:	4093      	lsls	r3, r2
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d3e:	4938      	ldr	r1, [pc, #224]	; (8001e20 <HAL_GPIO_Init+0x35c>)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f47f ae63 	bne.w	8001ad8 <HAL_GPIO_Init+0x14>
  }
}
 8001e12:	bf00      	nop
 8001e14:	bf00      	nop
 8001e16:	3724      	adds	r7, #36	; 0x24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	58000400 	.word	0x58000400

08001e24 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001e2c:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <HAL_HSEM_FastTake+0x2c>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3320      	adds	r3, #32
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e36:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <HAL_HSEM_FastTake+0x30>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d101      	bne.n	8001e40 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e000      	b.n	8001e42 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	58026400 	.word	0x58026400
 8001e54:	80000300 	.word	0x80000300

08001e58 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001e62:	4906      	ldr	r1, [pc, #24]	; (8001e7c <HAL_HSEM_Release+0x24>)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	58026400 	.word	0x58026400

08001e80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e82:	b08f      	sub	sp, #60	; 0x3c
 8001e84:	af0a      	add	r7, sp, #40	; 0x28
 8001e86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e116      	b.n	80020c0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d106      	bne.n	8001eb2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7fe ff4b 	bl	8000d48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f004 f8dd 	bl	8006090 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	687e      	ldr	r6, [r7, #4]
 8001ede:	466d      	mov	r5, sp
 8001ee0:	f106 0410 	add.w	r4, r6, #16
 8001ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ef0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ef4:	1d33      	adds	r3, r6, #4
 8001ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef8:	6838      	ldr	r0, [r7, #0]
 8001efa:	f004 f85b 	bl	8005fb4 <USB_CoreInit>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0d7      	b.n	80020c0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 f8cb 	bl	80060b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e04a      	b.n	8001fb8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	333d      	adds	r3, #61	; 0x3d
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	333c      	adds	r3, #60	; 0x3c
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	b298      	uxth	r0, r3
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3356      	adds	r3, #86	; 0x56
 8001f5e:	4602      	mov	r2, r0
 8001f60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	3340      	adds	r3, #64	; 0x40
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	3344      	adds	r3, #68	; 0x44
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	3348      	adds	r3, #72	; 0x48
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	334c      	adds	r3, #76	; 0x4c
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d3af      	bcc.n	8001f22 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73fb      	strb	r3, [r7, #15]
 8001fc6:	e044      	b.n	8002052 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	3301      	adds	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d3b5      	bcc.n	8001fc8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	687e      	ldr	r6, [r7, #4]
 8002064:	466d      	mov	r5, sp
 8002066:	f106 0410 	add.w	r4, r6, #16
 800206a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002072:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002076:	e885 0003 	stmia.w	r5, {r0, r1}
 800207a:	1d33      	adds	r3, r6, #4
 800207c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800207e:	6838      	ldr	r0, [r7, #0]
 8002080:	f004 f864 	bl	800614c <USB_DevInit>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2202      	movs	r2, #2
 800208e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e014      	b.n	80020c0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d102      	bne.n	80020b4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f80a 	bl	80020c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 fa22 	bl	8006502 <USB_DevDisconnect>

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_PCDEx_ActivateLPM+0x44>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	10000003 	.word	0x10000003

08002110 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002118:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	2b06      	cmp	r3, #6
 8002122:	d00a      	beq.n	800213a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002124:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e040      	b.n	80021b8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	e03e      	b.n	80021b8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002142:	491f      	ldr	r1, [pc, #124]	; (80021c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4313      	orrs	r3, r2
 8002148:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800214a:	f7fe ff63 	bl	8001014 <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002150:	e009      	b.n	8002166 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002152:	f7fe ff5f 	bl	8001014 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002160:	d901      	bls.n	8002166 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e028      	b.n	80021b8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002166:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800216e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002172:	d1ee      	bne.n	8002152 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b1e      	cmp	r3, #30
 8002178:	d008      	beq.n	800218c <HAL_PWREx_ConfigSupply+0x7c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b2e      	cmp	r3, #46	; 0x2e
 800217e:	d005      	beq.n	800218c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b1d      	cmp	r3, #29
 8002184:	d002      	beq.n	800218c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b2d      	cmp	r3, #45	; 0x2d
 800218a:	d114      	bne.n	80021b6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800218c:	f7fe ff42 	bl	8001014 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002192:	e009      	b.n	80021a8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002194:	f7fe ff3e 	bl	8001014 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a2:	d901      	bls.n	80021a8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e007      	b.n	80021b8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_PWREx_ConfigSupply+0xb0>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b4:	d1ee      	bne.n	8002194 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	58024800 	.word	0x58024800

080021c4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80021ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d2:	60d3      	str	r3, [r2, #12]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	58024800 	.word	0x58024800

080021e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08c      	sub	sp, #48	; 0x30
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d102      	bne.n	80021f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	f000 bc48 	b.w	8002a88 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 8088 	beq.w	8002316 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002206:	4b99      	ldr	r3, [pc, #612]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002210:	4b96      	ldr	r3, [pc, #600]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	2b10      	cmp	r3, #16
 800221a:	d007      	beq.n	800222c <HAL_RCC_OscConfig+0x48>
 800221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221e:	2b18      	cmp	r3, #24
 8002220:	d111      	bne.n	8002246 <HAL_RCC_OscConfig+0x62>
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d10c      	bne.n	8002246 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	4b8f      	ldr	r3, [pc, #572]	; (800246c <HAL_RCC_OscConfig+0x288>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d06d      	beq.n	8002314 <HAL_RCC_OscConfig+0x130>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d169      	bne.n	8002314 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	f000 bc21 	b.w	8002a88 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224e:	d106      	bne.n	800225e <HAL_RCC_OscConfig+0x7a>
 8002250:	4b86      	ldr	r3, [pc, #536]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a85      	ldr	r2, [pc, #532]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	e02e      	b.n	80022bc <HAL_RCC_OscConfig+0xd8>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x9c>
 8002266:	4b81      	ldr	r3, [pc, #516]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a80      	ldr	r2, [pc, #512]	; (800246c <HAL_RCC_OscConfig+0x288>)
 800226c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b7e      	ldr	r3, [pc, #504]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a7d      	ldr	r2, [pc, #500]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002278:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e01d      	b.n	80022bc <HAL_RCC_OscConfig+0xd8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0xc0>
 800228a:	4b78      	ldr	r3, [pc, #480]	; (800246c <HAL_RCC_OscConfig+0x288>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a77      	ldr	r2, [pc, #476]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b75      	ldr	r3, [pc, #468]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a74      	ldr	r2, [pc, #464]	; (800246c <HAL_RCC_OscConfig+0x288>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e00b      	b.n	80022bc <HAL_RCC_OscConfig+0xd8>
 80022a4:	4b71      	ldr	r3, [pc, #452]	; (800246c <HAL_RCC_OscConfig+0x288>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a70      	ldr	r2, [pc, #448]	; (800246c <HAL_RCC_OscConfig+0x288>)
 80022aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4b6e      	ldr	r3, [pc, #440]	; (800246c <HAL_RCC_OscConfig+0x288>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a6d      	ldr	r2, [pc, #436]	; (800246c <HAL_RCC_OscConfig+0x288>)
 80022b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d013      	beq.n	80022ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe fea6 	bl	8001014 <HAL_GetTick>
 80022c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe fea2 	bl	8001014 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e3d4      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022de:	4b63      	ldr	r3, [pc, #396]	; (800246c <HAL_RCC_OscConfig+0x288>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0xe8>
 80022ea:	e014      	b.n	8002316 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe fe92 	bl	8001014 <HAL_GetTick>
 80022f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f4:	f7fe fe8e 	bl	8001014 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e3c0      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002306:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x110>
 8002312:	e000      	b.n	8002316 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80ca 	beq.w	80024b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002324:	4b51      	ldr	r3, [pc, #324]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800232c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800232e:	4b4f      	ldr	r3, [pc, #316]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <HAL_RCC_OscConfig+0x166>
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	2b18      	cmp	r3, #24
 800233e:	d156      	bne.n	80023ee <HAL_RCC_OscConfig+0x20a>
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d151      	bne.n	80023ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800234a:	4b48      	ldr	r3, [pc, #288]	; (800246c <HAL_RCC_OscConfig+0x288>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_RCC_OscConfig+0x17e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e392      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002362:	4b42      	ldr	r3, [pc, #264]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 0219 	bic.w	r2, r3, #25
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	493f      	ldr	r1, [pc, #252]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7fe fe4e 	bl	8001014 <HAL_GetTick>
 8002378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237c:	f7fe fe4a 	bl	8001014 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e37c      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800238e:	4b37      	ldr	r3, [pc, #220]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	f7fe fe6b 	bl	8001074 <HAL_GetREVID>
 800239e:	4603      	mov	r3, r0
 80023a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d817      	bhi.n	80023d8 <HAL_RCC_OscConfig+0x1f4>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b40      	cmp	r3, #64	; 0x40
 80023ae:	d108      	bne.n	80023c2 <HAL_RCC_OscConfig+0x1de>
 80023b0:	4b2e      	ldr	r3, [pc, #184]	; (800246c <HAL_RCC_OscConfig+0x288>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80023b8:	4a2c      	ldr	r2, [pc, #176]	; (800246c <HAL_RCC_OscConfig+0x288>)
 80023ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c0:	e07a      	b.n	80024b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c2:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_RCC_OscConfig+0x288>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	031b      	lsls	r3, r3, #12
 80023d0:	4926      	ldr	r1, [pc, #152]	; (800246c <HAL_RCC_OscConfig+0x288>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d6:	e06f      	b.n	80024b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d8:	4b24      	ldr	r3, [pc, #144]	; (800246c <HAL_RCC_OscConfig+0x288>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	061b      	lsls	r3, r3, #24
 80023e6:	4921      	ldr	r1, [pc, #132]	; (800246c <HAL_RCC_OscConfig+0x288>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ec:	e064      	b.n	80024b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d047      	beq.n	8002486 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_RCC_OscConfig+0x288>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 0219 	bic.w	r2, r3, #25
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	491a      	ldr	r1, [pc, #104]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe fe04 	bl	8001014 <HAL_GetTick>
 800240c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002410:	f7fe fe00 	bl	8001014 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e332      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242e:	f7fe fe21 	bl	8001074 <HAL_GetREVID>
 8002432:	4603      	mov	r3, r0
 8002434:	f241 0203 	movw	r2, #4099	; 0x1003
 8002438:	4293      	cmp	r3, r2
 800243a:	d819      	bhi.n	8002470 <HAL_RCC_OscConfig+0x28c>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	2b40      	cmp	r3, #64	; 0x40
 8002442:	d108      	bne.n	8002456 <HAL_RCC_OscConfig+0x272>
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800244c:	4a07      	ldr	r2, [pc, #28]	; (800246c <HAL_RCC_OscConfig+0x288>)
 800244e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002452:	6053      	str	r3, [r2, #4]
 8002454:	e030      	b.n	80024b8 <HAL_RCC_OscConfig+0x2d4>
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	031b      	lsls	r3, r3, #12
 8002464:	4901      	ldr	r1, [pc, #4]	; (800246c <HAL_RCC_OscConfig+0x288>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
 800246a:	e025      	b.n	80024b8 <HAL_RCC_OscConfig+0x2d4>
 800246c:	58024400 	.word	0x58024400
 8002470:	4b9a      	ldr	r3, [pc, #616]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	061b      	lsls	r3, r3, #24
 800247e:	4997      	ldr	r1, [pc, #604]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
 8002484:	e018      	b.n	80024b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002486:	4b95      	ldr	r3, [pc, #596]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a94      	ldr	r2, [pc, #592]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdbf 	bl	8001014 <HAL_GetTick>
 8002496:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249a:	f7fe fdbb 	bl	8001014 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e2ed      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024ac:	4b8b      	ldr	r3, [pc, #556]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a9 	beq.w	8002618 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024c6:	4b85      	ldr	r3, [pc, #532]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024d0:	4b82      	ldr	r3, [pc, #520]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d007      	beq.n	80024ec <HAL_RCC_OscConfig+0x308>
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2b18      	cmp	r3, #24
 80024e0:	d13a      	bne.n	8002558 <HAL_RCC_OscConfig+0x374>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d135      	bne.n	8002558 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024ec:	4b7b      	ldr	r3, [pc, #492]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_OscConfig+0x320>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b80      	cmp	r3, #128	; 0x80
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e2c1      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002504:	f7fe fdb6 	bl	8001074 <HAL_GetREVID>
 8002508:	4603      	mov	r3, r0
 800250a:	f241 0203 	movw	r2, #4099	; 0x1003
 800250e:	4293      	cmp	r3, r2
 8002510:	d817      	bhi.n	8002542 <HAL_RCC_OscConfig+0x35e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	2b20      	cmp	r3, #32
 8002518:	d108      	bne.n	800252c <HAL_RCC_OscConfig+0x348>
 800251a:	4b70      	ldr	r3, [pc, #448]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002522:	4a6e      	ldr	r2, [pc, #440]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002524:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002528:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800252a:	e075      	b.n	8002618 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800252c:	4b6b      	ldr	r3, [pc, #428]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	069b      	lsls	r3, r3, #26
 800253a:	4968      	ldr	r1, [pc, #416]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002540:	e06a      	b.n	8002618 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002542:	4b66      	ldr	r3, [pc, #408]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	061b      	lsls	r3, r3, #24
 8002550:	4962      	ldr	r1, [pc, #392]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002552:	4313      	orrs	r3, r2
 8002554:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002556:	e05f      	b.n	8002618 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d042      	beq.n	80025e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002560:	4b5e      	ldr	r3, [pc, #376]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a5d      	ldr	r2, [pc, #372]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7fe fd52 	bl	8001014 <HAL_GetTick>
 8002570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002574:	f7fe fd4e 	bl	8001014 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e280      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002586:	4b55      	ldr	r3, [pc, #340]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002592:	f7fe fd6f 	bl	8001074 <HAL_GetREVID>
 8002596:	4603      	mov	r3, r0
 8002598:	f241 0203 	movw	r2, #4099	; 0x1003
 800259c:	4293      	cmp	r3, r2
 800259e:	d817      	bhi.n	80025d0 <HAL_RCC_OscConfig+0x3ec>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d108      	bne.n	80025ba <HAL_RCC_OscConfig+0x3d6>
 80025a8:	4b4c      	ldr	r3, [pc, #304]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80025b0:	4a4a      	ldr	r2, [pc, #296]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80025b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025b6:	6053      	str	r3, [r2, #4]
 80025b8:	e02e      	b.n	8002618 <HAL_RCC_OscConfig+0x434>
 80025ba:	4b48      	ldr	r3, [pc, #288]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	069b      	lsls	r3, r3, #26
 80025c8:	4944      	ldr	r1, [pc, #272]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
 80025ce:	e023      	b.n	8002618 <HAL_RCC_OscConfig+0x434>
 80025d0:	4b42      	ldr	r3, [pc, #264]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	061b      	lsls	r3, r3, #24
 80025de:	493f      	ldr	r1, [pc, #252]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60cb      	str	r3, [r1, #12]
 80025e4:	e018      	b.n	8002618 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025e6:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a3c      	ldr	r2, [pc, #240]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80025ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7fe fd0f 	bl	8001014 <HAL_GetTick>
 80025f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025fa:	f7fe fd0b 	bl	8001014 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e23d      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800260c:	4b33      	ldr	r3, [pc, #204]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f0      	bne.n	80025fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d036      	beq.n	8002692 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d019      	beq.n	8002660 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 800262e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002630:	4a2a      	ldr	r2, [pc, #168]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7fe fcec 	bl	8001014 <HAL_GetTick>
 800263c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002640:	f7fe fce8 	bl	8001014 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e21a      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002652:	4b22      	ldr	r3, [pc, #136]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x45c>
 800265e:	e018      	b.n	8002692 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002664:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7fe fcd2 	bl	8001014 <HAL_GetTick>
 8002670:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002674:	f7fe fcce 	bl	8001014 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e200      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	2b00      	cmp	r3, #0
 800269c:	d039      	beq.n	8002712 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01c      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80026ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026b2:	f7fe fcaf 	bl	8001014 <HAL_GetTick>
 80026b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ba:	f7fe fcab 	bl	8001014 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e1dd      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x4d6>
 80026d8:	e01b      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
 80026da:	bf00      	nop
 80026dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026e0:	4b9b      	ldr	r3, [pc, #620]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a9a      	ldr	r2, [pc, #616]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80026e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026ec:	f7fe fc92 	bl	8001014 <HAL_GetTick>
 80026f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026f4:	f7fe fc8e 	bl	8001014 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e1c0      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002706:	4b92      	ldr	r3, [pc, #584]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8081 	beq.w	8002822 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002720:	4b8c      	ldr	r3, [pc, #560]	; (8002954 <HAL_RCC_OscConfig+0x770>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a8b      	ldr	r2, [pc, #556]	; (8002954 <HAL_RCC_OscConfig+0x770>)
 8002726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800272c:	f7fe fc72 	bl	8001014 <HAL_GetTick>
 8002730:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002734:	f7fe fc6e 	bl	8001014 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e1a0      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002746:	4b83      	ldr	r3, [pc, #524]	; (8002954 <HAL_RCC_OscConfig+0x770>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d106      	bne.n	8002768 <HAL_RCC_OscConfig+0x584>
 800275a:	4b7d      	ldr	r3, [pc, #500]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	4a7c      	ldr	r2, [pc, #496]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6713      	str	r3, [r2, #112]	; 0x70
 8002766:	e02d      	b.n	80027c4 <HAL_RCC_OscConfig+0x5e0>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10c      	bne.n	800278a <HAL_RCC_OscConfig+0x5a6>
 8002770:	4b77      	ldr	r3, [pc, #476]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a76      	ldr	r2, [pc, #472]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
 800277c:	4b74      	ldr	r3, [pc, #464]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4a73      	ldr	r2, [pc, #460]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002782:	f023 0304 	bic.w	r3, r3, #4
 8002786:	6713      	str	r3, [r2, #112]	; 0x70
 8002788:	e01c      	b.n	80027c4 <HAL_RCC_OscConfig+0x5e0>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b05      	cmp	r3, #5
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x5c8>
 8002792:	4b6f      	ldr	r3, [pc, #444]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a6e      	ldr	r2, [pc, #440]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002798:	f043 0304 	orr.w	r3, r3, #4
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
 800279e:	4b6c      	ldr	r3, [pc, #432]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a6b      	ldr	r2, [pc, #428]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0x5e0>
 80027ac:	4b68      	ldr	r3, [pc, #416]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a67      	ldr	r2, [pc, #412]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
 80027b8:	4b65      	ldr	r3, [pc, #404]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	4a64      	ldr	r2, [pc, #400]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80027be:	f023 0304 	bic.w	r3, r3, #4
 80027c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d015      	beq.n	80027f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7fe fc22 	bl	8001014 <HAL_GetTick>
 80027d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d4:	f7fe fc1e 	bl	8001014 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e14e      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027ea:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0ee      	beq.n	80027d4 <HAL_RCC_OscConfig+0x5f0>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7fe fc0c 	bl	8001014 <HAL_GetTick>
 80027fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002800:	f7fe fc08 	bl	8001014 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e138      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002816:	4b4e      	ldr	r3, [pc, #312]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1ee      	bne.n	8002800 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 812d 	beq.w	8002a86 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800282c:	4b48      	ldr	r3, [pc, #288]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002834:	2b18      	cmp	r3, #24
 8002836:	f000 80bd 	beq.w	80029b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	2b02      	cmp	r3, #2
 8002840:	f040 809e 	bne.w	8002980 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002844:	4b42      	ldr	r3, [pc, #264]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a41      	ldr	r2, [pc, #260]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 800284a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800284e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe fbe0 	bl	8001014 <HAL_GetTick>
 8002854:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe fbdc 	bl	8001014 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e10e      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800286a:	4b39      	ldr	r3, [pc, #228]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002876:	4b36      	ldr	r3, [pc, #216]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800287a:	4b37      	ldr	r3, [pc, #220]	; (8002958 <HAL_RCC_OscConfig+0x774>)
 800287c:	4013      	ands	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002886:	0112      	lsls	r2, r2, #4
 8002888:	430a      	orrs	r2, r1
 800288a:	4931      	ldr	r1, [pc, #196]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 800288c:	4313      	orrs	r3, r2
 800288e:	628b      	str	r3, [r1, #40]	; 0x28
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	3b01      	subs	r3, #1
 8002896:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289e:	3b01      	subs	r3, #1
 80028a0:	025b      	lsls	r3, r3, #9
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	3b01      	subs	r3, #1
 80028ac:	041b      	lsls	r3, r3, #16
 80028ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b8:	3b01      	subs	r3, #1
 80028ba:	061b      	lsls	r3, r3, #24
 80028bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80028c0:	4923      	ldr	r1, [pc, #140]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80028c6:	4b22      	ldr	r3, [pc, #136]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	4a21      	ldr	r2, [pc, #132]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028d2:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80028d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d6:	4b21      	ldr	r3, [pc, #132]	; (800295c <HAL_RCC_OscConfig+0x778>)
 80028d8:	4013      	ands	r3, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028de:	00d2      	lsls	r2, r2, #3
 80028e0:	491b      	ldr	r1, [pc, #108]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	f023 020c 	bic.w	r2, r3, #12
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4917      	ldr	r1, [pc, #92]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028f8:	4b15      	ldr	r3, [pc, #84]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	f023 0202 	bic.w	r2, r3, #2
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	4912      	ldr	r1, [pc, #72]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002906:	4313      	orrs	r3, r2
 8002908:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	4a10      	ldr	r2, [pc, #64]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002914:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002916:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 800291c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002920:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800292c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800292e:	4b08      	ldr	r3, [pc, #32]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	4a07      	ldr	r2, [pc, #28]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_RCC_OscConfig+0x76c>)
 8002940:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7fe fb65 	bl	8001014 <HAL_GetTick>
 800294a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800294c:	e011      	b.n	8002972 <HAL_RCC_OscConfig+0x78e>
 800294e:	bf00      	nop
 8002950:	58024400 	.word	0x58024400
 8002954:	58024800 	.word	0x58024800
 8002958:	fffffc0c 	.word	0xfffffc0c
 800295c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fb58 	bl	8001014 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e08a      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002972:	4b47      	ldr	r3, [pc, #284]	; (8002a90 <HAL_RCC_OscConfig+0x8ac>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x77c>
 800297e:	e082      	b.n	8002a86 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002980:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <HAL_RCC_OscConfig+0x8ac>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a42      	ldr	r2, [pc, #264]	; (8002a90 <HAL_RCC_OscConfig+0x8ac>)
 8002986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800298a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fb42 	bl	8001014 <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002994:	f7fe fb3e 	bl	8001014 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e070      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029a6:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <HAL_RCC_OscConfig+0x8ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x7b0>
 80029b2:	e068      	b.n	8002a86 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80029b4:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <HAL_RCC_OscConfig+0x8ac>)
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029ba:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <HAL_RCC_OscConfig+0x8ac>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d031      	beq.n	8002a2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f003 0203 	and.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d12a      	bne.n	8002a2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d122      	bne.n	8002a2c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d11a      	bne.n	8002a2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	0a5b      	lsrs	r3, r3, #9
 80029fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d111      	bne.n	8002a2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	0c1b      	lsrs	r3, r3, #16
 8002a0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d108      	bne.n	8002a2c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	0e1b      	lsrs	r3, r3, #24
 8002a1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e02b      	b.n	8002a88 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a30:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_RCC_OscConfig+0x8ac>)
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	08db      	lsrs	r3, r3, #3
 8002a36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a3a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d01f      	beq.n	8002a86 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_RCC_OscConfig+0x8ac>)
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	4a11      	ldr	r2, [pc, #68]	; (8002a90 <HAL_RCC_OscConfig+0x8ac>)
 8002a4c:	f023 0301 	bic.w	r3, r3, #1
 8002a50:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a52:	f7fe fadf 	bl	8001014 <HAL_GetTick>
 8002a56:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a58:	bf00      	nop
 8002a5a:	f7fe fadb 	bl	8001014 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d0f9      	beq.n	8002a5a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_RCC_OscConfig+0x8ac>)
 8002a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_RCC_OscConfig+0x8b0>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a72:	00d2      	lsls	r2, r2, #3
 8002a74:	4906      	ldr	r1, [pc, #24]	; (8002a90 <HAL_RCC_OscConfig+0x8ac>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_OscConfig+0x8ac>)
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_RCC_OscConfig+0x8ac>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3730      	adds	r7, #48	; 0x30
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	58024400 	.word	0x58024400
 8002a94:	ffff0007 	.word	0xffff0007

08002a98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e19c      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aac:	4b8a      	ldr	r3, [pc, #552]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d910      	bls.n	8002adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b87      	ldr	r3, [pc, #540]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 020f 	bic.w	r2, r3, #15
 8002ac2:	4985      	ldr	r1, [pc, #532]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b83      	ldr	r3, [pc, #524]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e184      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d010      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	4b7b      	ldr	r3, [pc, #492]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d908      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002af8:	4b78      	ldr	r3, [pc, #480]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	4975      	ldr	r1, [pc, #468]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d010      	beq.n	8002b38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	4b70      	ldr	r3, [pc, #448]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d908      	bls.n	8002b38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b26:	4b6d      	ldr	r3, [pc, #436]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	496a      	ldr	r1, [pc, #424]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699a      	ldr	r2, [r3, #24]
 8002b48:	4b64      	ldr	r3, [pc, #400]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d908      	bls.n	8002b66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b54:	4b61      	ldr	r3, [pc, #388]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	495e      	ldr	r1, [pc, #376]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d010      	beq.n	8002b94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69da      	ldr	r2, [r3, #28]
 8002b76:	4b59      	ldr	r3, [pc, #356]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d908      	bls.n	8002b94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b82:	4b56      	ldr	r3, [pc, #344]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	4953      	ldr	r1, [pc, #332]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d010      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	4b4d      	ldr	r3, [pc, #308]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d908      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f023 020f 	bic.w	r2, r3, #15
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4947      	ldr	r1, [pc, #284]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d055      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	4940      	ldr	r1, [pc, #256]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d107      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002be8:	4b3c      	ldr	r3, [pc, #240]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d121      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0f6      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d115      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0ea      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c18:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0de      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c28:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0d6      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f023 0207 	bic.w	r2, r3, #7
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4925      	ldr	r1, [pc, #148]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c4a:	f7fe f9e3 	bl	8001014 <HAL_GetTick>
 8002c4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c52:	f7fe f9df 	bl	8001014 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e0be      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c68:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d1eb      	bne.n	8002c52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d010      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d208      	bcs.n	8002ca8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c96:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f023 020f 	bic.w	r2, r3, #15
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	490e      	ldr	r1, [pc, #56]	; (8002cdc <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d214      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 020f 	bic.w	r2, r3, #15
 8002cbe:	4906      	ldr	r1, [pc, #24]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <HAL_RCC_ClockConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e086      	b.n	8002de6 <HAL_RCC_ClockConfig+0x34e>
 8002cd8:	52002000 	.word	0x52002000
 8002cdc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d208      	bcs.n	8002d0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cfc:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	4939      	ldr	r1, [pc, #228]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	4b34      	ldr	r3, [pc, #208]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d208      	bcs.n	8002d3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d2a:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	492e      	ldr	r1, [pc, #184]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d208      	bcs.n	8002d6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	4922      	ldr	r1, [pc, #136]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d010      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d208      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	4917      	ldr	r1, [pc, #92]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d98:	f000 f834 	bl	8002e04 <HAL_RCC_GetSysClockFreq>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	4912      	ldr	r1, [pc, #72]	; (8002df4 <HAL_RCC_ClockConfig+0x35c>)
 8002daa:	5ccb      	ldrb	r3, [r1, r3]
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_RCC_ClockConfig+0x358>)
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <HAL_RCC_ClockConfig+0x35c>)
 8002dc0:	5cd3      	ldrb	r3, [r2, r3]
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dcc:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <HAL_RCC_ClockConfig+0x360>)
 8002dce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dd0:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <HAL_RCC_ClockConfig+0x364>)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_RCC_ClockConfig+0x368>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe f8d0 	bl	8000f80 <HAL_InitTick>
 8002de0:	4603      	mov	r3, r0
 8002de2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	58024400 	.word	0x58024400
 8002df4:	08006638 	.word	0x08006638
 8002df8:	24000004 	.word	0x24000004
 8002dfc:	24000000 	.word	0x24000000
 8002e00:	24000008 	.word	0x24000008

08002e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	; 0x24
 8002e08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e0a:	4bb3      	ldr	r3, [pc, #716]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e12:	2b18      	cmp	r3, #24
 8002e14:	f200 8155 	bhi.w	80030c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e18:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e85 	.word	0x08002e85
 8002e24:	080030c3 	.word	0x080030c3
 8002e28:	080030c3 	.word	0x080030c3
 8002e2c:	080030c3 	.word	0x080030c3
 8002e30:	080030c3 	.word	0x080030c3
 8002e34:	080030c3 	.word	0x080030c3
 8002e38:	080030c3 	.word	0x080030c3
 8002e3c:	080030c3 	.word	0x080030c3
 8002e40:	08002eab 	.word	0x08002eab
 8002e44:	080030c3 	.word	0x080030c3
 8002e48:	080030c3 	.word	0x080030c3
 8002e4c:	080030c3 	.word	0x080030c3
 8002e50:	080030c3 	.word	0x080030c3
 8002e54:	080030c3 	.word	0x080030c3
 8002e58:	080030c3 	.word	0x080030c3
 8002e5c:	080030c3 	.word	0x080030c3
 8002e60:	08002eb1 	.word	0x08002eb1
 8002e64:	080030c3 	.word	0x080030c3
 8002e68:	080030c3 	.word	0x080030c3
 8002e6c:	080030c3 	.word	0x080030c3
 8002e70:	080030c3 	.word	0x080030c3
 8002e74:	080030c3 	.word	0x080030c3
 8002e78:	080030c3 	.word	0x080030c3
 8002e7c:	080030c3 	.word	0x080030c3
 8002e80:	08002eb7 	.word	0x08002eb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e84:	4b94      	ldr	r3, [pc, #592]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d009      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e90:	4b91      	ldr	r3, [pc, #580]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	08db      	lsrs	r3, r3, #3
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	4a90      	ldr	r2, [pc, #576]	; (80030dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ea2:	e111      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ea4:	4b8d      	ldr	r3, [pc, #564]	; (80030dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ea6:	61bb      	str	r3, [r7, #24]
      break;
 8002ea8:	e10e      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002eaa:	4b8d      	ldr	r3, [pc, #564]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002eac:	61bb      	str	r3, [r7, #24]
      break;
 8002eae:	e10b      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002eb0:	4b8c      	ldr	r3, [pc, #560]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002eb2:	61bb      	str	r3, [r7, #24]
      break;
 8002eb4:	e108      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002eb6:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ec0:	4b85      	ldr	r3, [pc, #532]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ecc:	4b82      	ldr	r3, [pc, #520]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002ed6:	4b80      	ldr	r3, [pc, #512]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	08db      	lsrs	r3, r3, #3
 8002edc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80e1 	beq.w	80030bc <HAL_RCC_GetSysClockFreq+0x2b8>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	f000 8083 	beq.w	8003008 <HAL_RCC_GetSysClockFreq+0x204>
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	f200 80a1 	bhi.w	800304c <HAL_RCC_GetSysClockFreq+0x248>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x114>
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d056      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f16:	e099      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f18:	4b6f      	ldr	r3, [pc, #444]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d02d      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f24:	4b6c      	ldr	r3, [pc, #432]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	08db      	lsrs	r3, r3, #3
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	4a6b      	ldr	r2, [pc, #428]	; (80030dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
 8002f34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	ee07 3a90 	vmov	s15, r3
 8002f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f4e:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f62:	eddf 5a61 	vldr	s11, [pc, #388]	; 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f7e:	e087      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80030ec <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f92:	4b51      	ldr	r3, [pc, #324]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fa6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fc2:	e065      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80030f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fd6:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003006:	e043      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	eddf 6a38 	vldr	s13, [pc, #224]	; 80030f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800301a:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800302a:	ed97 6a02 	vldr	s12, [r7, #8]
 800302e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800303a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800303e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003046:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800304a:	e021      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	ee07 3a90 	vmov	s15, r3
 8003052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003056:	eddf 6a26 	vldr	s13, [pc, #152]	; 80030f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800305a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800305e:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800306e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003072:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80030e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800307a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800307e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800308e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	0a5b      	lsrs	r3, r3, #9
 8003096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800309a:	3301      	adds	r3, #1
 800309c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	ee07 3a90 	vmov	s15, r3
 80030a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80030ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030b4:	ee17 3a90 	vmov	r3, s15
 80030b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80030ba:	e005      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]
      break;
 80030c0:	e002      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80030c2:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030c4:	61bb      	str	r3, [r7, #24]
      break;
 80030c6:	bf00      	nop
  }

  return sysclockfreq;
 80030c8:	69bb      	ldr	r3, [r7, #24]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	58024400 	.word	0x58024400
 80030dc:	03d09000 	.word	0x03d09000
 80030e0:	003d0900 	.word	0x003d0900
 80030e4:	007a1200 	.word	0x007a1200
 80030e8:	46000000 	.word	0x46000000
 80030ec:	4c742400 	.word	0x4c742400
 80030f0:	4a742400 	.word	0x4a742400
 80030f4:	4af42400 	.word	0x4af42400

080030f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80030fe:	f7ff fe81 	bl	8002e04 <HAL_RCC_GetSysClockFreq>
 8003102:	4602      	mov	r2, r0
 8003104:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_RCC_GetHCLKFreq+0x50>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	490f      	ldr	r1, [pc, #60]	; (800314c <HAL_RCC_GetHCLKFreq+0x54>)
 8003110:	5ccb      	ldrb	r3, [r1, r3]
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800311c:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_RCC_GetHCLKFreq+0x50>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	4a09      	ldr	r2, [pc, #36]	; (800314c <HAL_RCC_GetHCLKFreq+0x54>)
 8003126:	5cd3      	ldrb	r3, [r2, r3]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	fa22 f303 	lsr.w	r3, r2, r3
 8003132:	4a07      	ldr	r2, [pc, #28]	; (8003150 <HAL_RCC_GetHCLKFreq+0x58>)
 8003134:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003136:	4a07      	ldr	r2, [pc, #28]	; (8003154 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <HAL_RCC_GetHCLKFreq+0x58>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	58024400 	.word	0x58024400
 800314c:	08006638 	.word	0x08006638
 8003150:	24000004 	.word	0x24000004
 8003154:	24000000 	.word	0x24000000

08003158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800315c:	f7ff ffcc 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4904      	ldr	r1, [pc, #16]	; (8003180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	58024400 	.word	0x58024400
 8003180:	08006638 	.word	0x08006638

08003184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003188:	f7ff ffb6 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	4904      	ldr	r1, [pc, #16]	; (80031ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	58024400 	.word	0x58024400
 80031ac:	08006638 	.word	0x08006638

080031b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b4:	b0ca      	sub	sp, #296	; 0x128
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031bc:	2300      	movs	r3, #0
 80031be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80031d4:	2500      	movs	r5, #0
 80031d6:	ea54 0305 	orrs.w	r3, r4, r5
 80031da:	d049      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80031dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031e6:	d02f      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80031e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031ec:	d828      	bhi.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80031ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031f2:	d01a      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031f8:	d822      	bhi.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80031fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003202:	d007      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003204:	e01c      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003206:	4bb8      	ldr	r3, [pc, #736]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	4ab7      	ldr	r2, [pc, #732]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800320c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003210:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003212:	e01a      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003218:	3308      	adds	r3, #8
 800321a:	2102      	movs	r1, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f001 fc8f 	bl	8004b40 <RCCEx_PLL2_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003228:	e00f      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800322a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800322e:	3328      	adds	r3, #40	; 0x28
 8003230:	2102      	movs	r1, #2
 8003232:	4618      	mov	r0, r3
 8003234:	f001 fd36 	bl	8004ca4 <RCCEx_PLL3_Config>
 8003238:	4603      	mov	r3, r0
 800323a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800323e:	e004      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003246:	e000      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003252:	4ba5      	ldr	r3, [pc, #660]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003256:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800325a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800325e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003260:	4aa1      	ldr	r2, [pc, #644]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003262:	430b      	orrs	r3, r1
 8003264:	6513      	str	r3, [r2, #80]	; 0x50
 8003266:	e003      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003268:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800326c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800327c:	f04f 0900 	mov.w	r9, #0
 8003280:	ea58 0309 	orrs.w	r3, r8, r9
 8003284:	d047      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	2b04      	cmp	r3, #4
 800328e:	d82a      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003290:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003296:	bf00      	nop
 8003298:	080032ad 	.word	0x080032ad
 800329c:	080032bb 	.word	0x080032bb
 80032a0:	080032d1 	.word	0x080032d1
 80032a4:	080032ef 	.word	0x080032ef
 80032a8:	080032ef 	.word	0x080032ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ac:	4b8e      	ldr	r3, [pc, #568]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	4a8d      	ldr	r2, [pc, #564]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032b8:	e01a      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032be:	3308      	adds	r3, #8
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 fc3c 	bl	8004b40 <RCCEx_PLL2_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032ce:	e00f      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032d4:	3328      	adds	r3, #40	; 0x28
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 fce3 	bl	8004ca4 <RCCEx_PLL3_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032e4:	e004      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032ec:	e000      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80032ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10a      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032f8:	4b7b      	ldr	r3, [pc, #492]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fc:	f023 0107 	bic.w	r1, r3, #7
 8003300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	4a78      	ldr	r2, [pc, #480]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003308:	430b      	orrs	r3, r1
 800330a:	6513      	str	r3, [r2, #80]	; 0x50
 800330c:	e003      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003312:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003322:	f04f 0b00 	mov.w	fp, #0
 8003326:	ea5a 030b 	orrs.w	r3, sl, fp
 800332a:	d04c      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800332c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003336:	d030      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333c:	d829      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800333e:	2bc0      	cmp	r3, #192	; 0xc0
 8003340:	d02d      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003342:	2bc0      	cmp	r3, #192	; 0xc0
 8003344:	d825      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003346:	2b80      	cmp	r3, #128	; 0x80
 8003348:	d018      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800334a:	2b80      	cmp	r3, #128	; 0x80
 800334c:	d821      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003352:	2b40      	cmp	r3, #64	; 0x40
 8003354:	d007      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003356:	e01c      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003358:	4b63      	ldr	r3, [pc, #396]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	4a62      	ldr	r2, [pc, #392]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800335e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003362:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003364:	e01c      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800336a:	3308      	adds	r3, #8
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f001 fbe6 	bl	8004b40 <RCCEx_PLL2_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800337a:	e011      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800337c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003380:	3328      	adds	r3, #40	; 0x28
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f001 fc8d 	bl	8004ca4 <RCCEx_PLL3_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003390:	e006      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003398:	e002      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800339a:	bf00      	nop
 800339c:	e000      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800339e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80033a8:	4b4f      	ldr	r3, [pc, #316]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ac:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b6:	4a4c      	ldr	r2, [pc, #304]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6513      	str	r3, [r2, #80]	; 0x50
 80033bc:	e003      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80033d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80033dc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80033e0:	460b      	mov	r3, r1
 80033e2:	4313      	orrs	r3, r2
 80033e4:	d053      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80033e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033f2:	d035      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80033f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033f8:	d82e      	bhi.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80033fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80033fe:	d031      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003400:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003404:	d828      	bhi.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340a:	d01a      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800340c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003410:	d822      	bhi.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003416:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800341a:	d007      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800341c:	e01c      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800341e:	4b32      	ldr	r3, [pc, #200]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	4a31      	ldr	r2, [pc, #196]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003428:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800342a:	e01c      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003430:	3308      	adds	r3, #8
 8003432:	2100      	movs	r1, #0
 8003434:	4618      	mov	r0, r3
 8003436:	f001 fb83 	bl	8004b40 <RCCEx_PLL2_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003440:	e011      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003446:	3328      	adds	r3, #40	; 0x28
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f001 fc2a 	bl	8004ca4 <RCCEx_PLL3_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003456:	e006      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800345e:	e002      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003460:	bf00      	nop
 8003462:	e000      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10b      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800347a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800347e:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003480:	430b      	orrs	r3, r1
 8003482:	6593      	str	r3, [r2, #88]	; 0x58
 8003484:	e003      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003486:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800348a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800348e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800349a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80034a4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80034a8:	460b      	mov	r3, r1
 80034aa:	4313      	orrs	r3, r2
 80034ac:	d056      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80034ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ba:	d038      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80034bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034c0:	d831      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80034c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034c6:	d034      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80034c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034cc:	d82b      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80034ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034d2:	d01d      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80034d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034d8:	d825      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d006      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80034de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80034e4:	e01f      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80034e6:	bf00      	nop
 80034e8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ec:	4ba2      	ldr	r3, [pc, #648]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	4aa1      	ldr	r2, [pc, #644]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034f8:	e01c      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034fe:	3308      	adds	r3, #8
 8003500:	2100      	movs	r1, #0
 8003502:	4618      	mov	r0, r3
 8003504:	f001 fb1c 	bl	8004b40 <RCCEx_PLL2_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800350e:	e011      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003514:	3328      	adds	r3, #40	; 0x28
 8003516:	2100      	movs	r1, #0
 8003518:	4618      	mov	r0, r3
 800351a:	f001 fbc3 	bl	8004ca4 <RCCEx_PLL3_Config>
 800351e:	4603      	mov	r3, r0
 8003520:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003524:	e006      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800352c:	e002      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800352e:	bf00      	nop
 8003530:	e000      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003534:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800353c:	4b8e      	ldr	r3, [pc, #568]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800353e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003540:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003548:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800354c:	4a8a      	ldr	r2, [pc, #552]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800354e:	430b      	orrs	r3, r1
 8003550:	6593      	str	r3, [r2, #88]	; 0x58
 8003552:	e003      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003554:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003558:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800355c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003568:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800356c:	2300      	movs	r3, #0
 800356e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003572:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003576:	460b      	mov	r3, r1
 8003578:	4313      	orrs	r3, r2
 800357a:	d03a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800357c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	2b30      	cmp	r3, #48	; 0x30
 8003584:	d01f      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003586:	2b30      	cmp	r3, #48	; 0x30
 8003588:	d819      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800358a:	2b20      	cmp	r3, #32
 800358c:	d00c      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800358e:	2b20      	cmp	r3, #32
 8003590:	d815      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003592:	2b00      	cmp	r3, #0
 8003594:	d019      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003596:	2b10      	cmp	r3, #16
 8003598:	d111      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359a:	4b77      	ldr	r3, [pc, #476]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	4a76      	ldr	r2, [pc, #472]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80035a6:	e011      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ac:	3308      	adds	r3, #8
 80035ae:	2102      	movs	r1, #2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f001 fac5 	bl	8004b40 <RCCEx_PLL2_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80035bc:	e006      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035c4:	e002      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80035ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80035d4:	4b68      	ldr	r3, [pc, #416]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80035dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e2:	4a65      	ldr	r2, [pc, #404]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035e4:	430b      	orrs	r3, r1
 80035e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035e8:	e003      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80035f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80035fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003602:	2300      	movs	r3, #0
 8003604:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003608:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800360c:	460b      	mov	r3, r1
 800360e:	4313      	orrs	r3, r2
 8003610:	d051      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800361c:	d035      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800361e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003622:	d82e      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003624:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003628:	d031      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800362a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800362e:	d828      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003634:	d01a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363a:	d822      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003644:	d007      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003646:	e01c      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003648:	4b4b      	ldr	r3, [pc, #300]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	4a4a      	ldr	r2, [pc, #296]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800364e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003652:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003654:	e01c      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365a:	3308      	adds	r3, #8
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f001 fa6e 	bl	8004b40 <RCCEx_PLL2_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800366a:	e011      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800366c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003670:	3328      	adds	r3, #40	; 0x28
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f001 fb15 	bl	8004ca4 <RCCEx_PLL3_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003680:	e006      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003688:	e002      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800368a:	bf00      	nop
 800368c:	e000      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800368e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003690:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10a      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003698:	4b37      	ldr	r3, [pc, #220]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800369a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80036a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a6:	4a34      	ldr	r2, [pc, #208]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6513      	str	r3, [r2, #80]	; 0x50
 80036ac:	e003      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80036c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036c6:	2300      	movs	r3, #0
 80036c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80036cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80036d0:	460b      	mov	r3, r1
 80036d2:	4313      	orrs	r3, r2
 80036d4:	d056      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80036d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e0:	d033      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80036e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e6:	d82c      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80036e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036ec:	d02f      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80036ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036f2:	d826      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80036f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036f8:	d02b      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80036fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036fe:	d820      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003704:	d012      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003706:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800370a:	d81a      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d022      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003714:	d115      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371a:	3308      	adds	r3, #8
 800371c:	2101      	movs	r1, #1
 800371e:	4618      	mov	r0, r3
 8003720:	f001 fa0e 	bl	8004b40 <RCCEx_PLL2_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800372a:	e015      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003730:	3328      	adds	r3, #40	; 0x28
 8003732:	2101      	movs	r1, #1
 8003734:	4618      	mov	r0, r3
 8003736:	f001 fab5 	bl	8004ca4 <RCCEx_PLL3_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003740:	e00a      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003748:	e006      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800374a:	bf00      	nop
 800374c:	e004      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800374e:	bf00      	nop
 8003750:	e002      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003752:	bf00      	nop
 8003754:	e000      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10d      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003764:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800376e:	4a02      	ldr	r2, [pc, #8]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003770:	430b      	orrs	r3, r1
 8003772:	6513      	str	r3, [r2, #80]	; 0x50
 8003774:	e006      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003776:	bf00      	nop
 8003778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003780:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003794:	2300      	movs	r3, #0
 8003796:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800379a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800379e:	460b      	mov	r3, r1
 80037a0:	4313      	orrs	r3, r2
 80037a2:	d055      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037b0:	d033      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80037b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037b6:	d82c      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80037b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037bc:	d02f      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c2:	d826      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80037c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037c8:	d02b      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80037ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037ce:	d820      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80037d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d4:	d012      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80037d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037da:	d81a      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d022      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80037e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037e4:	d115      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ea:	3308      	adds	r3, #8
 80037ec:	2101      	movs	r1, #1
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 f9a6 	bl	8004b40 <RCCEx_PLL2_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80037fa:	e015      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003800:	3328      	adds	r3, #40	; 0x28
 8003802:	2101      	movs	r1, #1
 8003804:	4618      	mov	r0, r3
 8003806:	f001 fa4d 	bl	8004ca4 <RCCEx_PLL3_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003810:	e00a      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003818:	e006      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800381a:	bf00      	nop
 800381c:	e004      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800381e:	bf00      	nop
 8003820:	e002      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10b      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003830:	4ba3      	ldr	r3, [pc, #652]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003840:	4a9f      	ldr	r2, [pc, #636]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003842:	430b      	orrs	r3, r1
 8003844:	6593      	str	r3, [r2, #88]	; 0x58
 8003846:	e003      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003848:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800384c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003858:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800385c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003860:	2300      	movs	r3, #0
 8003862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003866:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800386a:	460b      	mov	r3, r1
 800386c:	4313      	orrs	r3, r2
 800386e:	d037      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800387a:	d00e      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800387c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003880:	d816      	bhi.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d018      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003886:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800388a:	d111      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800388c:	4b8c      	ldr	r3, [pc, #560]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	4a8b      	ldr	r2, [pc, #556]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003898:	e00f      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800389e:	3308      	adds	r3, #8
 80038a0:	2101      	movs	r1, #1
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 f94c 	bl	8004b40 <RCCEx_PLL2_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038ae:	e004      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80038b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038c2:	4b7f      	ldr	r3, [pc, #508]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	4a7b      	ldr	r2, [pc, #492]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d2:	430b      	orrs	r3, r1
 80038d4:	6513      	str	r3, [r2, #80]	; 0x50
 80038d6:	e003      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80038ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80038f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4313      	orrs	r3, r2
 80038fe:	d039      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003906:	2b03      	cmp	r3, #3
 8003908:	d81c      	bhi.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	0800394d 	.word	0x0800394d
 8003914:	08003921 	.word	0x08003921
 8003918:	0800392f 	.word	0x0800392f
 800391c:	0800394d 	.word	0x0800394d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003920:	4b67      	ldr	r3, [pc, #412]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	4a66      	ldr	r2, [pc, #408]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800392c:	e00f      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003932:	3308      	adds	r3, #8
 8003934:	2102      	movs	r1, #2
 8003936:	4618      	mov	r0, r3
 8003938:	f001 f902 	bl	8004b40 <RCCEx_PLL2_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003942:	e004      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800394a:	e000      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800394c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10a      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003956:	4b5a      	ldr	r3, [pc, #360]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	f023 0103 	bic.w	r1, r3, #3
 800395e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003964:	4a56      	ldr	r2, [pc, #344]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003966:	430b      	orrs	r3, r1
 8003968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800396a:	e003      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003970:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003980:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003984:	2300      	movs	r3, #0
 8003986:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800398a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800398e:	460b      	mov	r3, r1
 8003990:	4313      	orrs	r3, r2
 8003992:	f000 809f 	beq.w	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003996:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a4a      	ldr	r2, [pc, #296]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800399c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039a2:	f7fd fb37 	bl	8001014 <HAL_GetTick>
 80039a6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039aa:	e00b      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ac:	f7fd fb32 	bl	8001014 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b64      	cmp	r3, #100	; 0x64
 80039ba:	d903      	bls.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039c2:	e005      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039c4:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ed      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80039d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d179      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80039d8:	4b39      	ldr	r3, [pc, #228]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039e4:	4053      	eors	r3, r2
 80039e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d015      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039ee:	4b34      	ldr	r3, [pc, #208]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039fa:	4b31      	ldr	r3, [pc, #196]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	4a30      	ldr	r2, [pc, #192]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a06:	4b2e      	ldr	r3, [pc, #184]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	4a2d      	ldr	r2, [pc, #180]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a10:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a12:	4a2b      	ldr	r2, [pc, #172]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a26:	d118      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fd faf4 	bl	8001014 <HAL_GetTick>
 8003a2c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a30:	e00d      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fd faef 	bl	8001014 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a3c:	1ad2      	subs	r2, r2, r3
 8003a3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d903      	bls.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003a4c:	e005      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0eb      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d129      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a72:	d10e      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003a74:	4b12      	ldr	r3, [pc, #72]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a84:	091a      	lsrs	r2, r3, #4
 8003a86:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	4a0d      	ldr	r2, [pc, #52]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	6113      	str	r3, [r2, #16]
 8003a90:	e005      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	4a0a      	ldr	r2, [pc, #40]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a9c:	6113      	str	r3, [r2, #16]
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aae:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab4:	e00e      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003abe:	e009      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ac0:	58024400 	.word	0x58024400
 8003ac4:	58024800 	.word	0x58024800
 8003ac8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f002 0301 	and.w	r3, r2, #1
 8003ae0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003aea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f000 8089 	beq.w	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003afc:	2b28      	cmp	r3, #40	; 0x28
 8003afe:	d86b      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b00:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003be1 	.word	0x08003be1
 8003b0c:	08003bd9 	.word	0x08003bd9
 8003b10:	08003bd9 	.word	0x08003bd9
 8003b14:	08003bd9 	.word	0x08003bd9
 8003b18:	08003bd9 	.word	0x08003bd9
 8003b1c:	08003bd9 	.word	0x08003bd9
 8003b20:	08003bd9 	.word	0x08003bd9
 8003b24:	08003bd9 	.word	0x08003bd9
 8003b28:	08003bad 	.word	0x08003bad
 8003b2c:	08003bd9 	.word	0x08003bd9
 8003b30:	08003bd9 	.word	0x08003bd9
 8003b34:	08003bd9 	.word	0x08003bd9
 8003b38:	08003bd9 	.word	0x08003bd9
 8003b3c:	08003bd9 	.word	0x08003bd9
 8003b40:	08003bd9 	.word	0x08003bd9
 8003b44:	08003bd9 	.word	0x08003bd9
 8003b48:	08003bc3 	.word	0x08003bc3
 8003b4c:	08003bd9 	.word	0x08003bd9
 8003b50:	08003bd9 	.word	0x08003bd9
 8003b54:	08003bd9 	.word	0x08003bd9
 8003b58:	08003bd9 	.word	0x08003bd9
 8003b5c:	08003bd9 	.word	0x08003bd9
 8003b60:	08003bd9 	.word	0x08003bd9
 8003b64:	08003bd9 	.word	0x08003bd9
 8003b68:	08003be1 	.word	0x08003be1
 8003b6c:	08003bd9 	.word	0x08003bd9
 8003b70:	08003bd9 	.word	0x08003bd9
 8003b74:	08003bd9 	.word	0x08003bd9
 8003b78:	08003bd9 	.word	0x08003bd9
 8003b7c:	08003bd9 	.word	0x08003bd9
 8003b80:	08003bd9 	.word	0x08003bd9
 8003b84:	08003bd9 	.word	0x08003bd9
 8003b88:	08003be1 	.word	0x08003be1
 8003b8c:	08003bd9 	.word	0x08003bd9
 8003b90:	08003bd9 	.word	0x08003bd9
 8003b94:	08003bd9 	.word	0x08003bd9
 8003b98:	08003bd9 	.word	0x08003bd9
 8003b9c:	08003bd9 	.word	0x08003bd9
 8003ba0:	08003bd9 	.word	0x08003bd9
 8003ba4:	08003bd9 	.word	0x08003bd9
 8003ba8:	08003be1 	.word	0x08003be1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb0:	3308      	adds	r3, #8
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 ffc3 	bl	8004b40 <RCCEx_PLL2_Config>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003bc0:	e00f      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc6:	3328      	adds	r3, #40	; 0x28
 8003bc8:	2101      	movs	r1, #1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f001 f86a 	bl	8004ca4 <RCCEx_PLL3_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003bd6:	e004      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bde:	e000      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003bea:	4bbf      	ldr	r3, [pc, #764]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bf8:	4abb      	ldr	r2, [pc, #748]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	6553      	str	r3, [r2, #84]	; 0x54
 8003bfe:	e003      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	f002 0302 	and.w	r3, r2, #2
 8003c14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003c1e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003c22:	460b      	mov	r3, r1
 8003c24:	4313      	orrs	r3, r2
 8003c26:	d041      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c2e:	2b05      	cmp	r3, #5
 8003c30:	d824      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003c32:	a201      	add	r2, pc, #4	; (adr r2, 8003c38 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003c85 	.word	0x08003c85
 8003c3c:	08003c51 	.word	0x08003c51
 8003c40:	08003c67 	.word	0x08003c67
 8003c44:	08003c85 	.word	0x08003c85
 8003c48:	08003c85 	.word	0x08003c85
 8003c4c:	08003c85 	.word	0x08003c85
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c54:	3308      	adds	r3, #8
 8003c56:	2101      	movs	r1, #1
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 ff71 	bl	8004b40 <RCCEx_PLL2_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c64:	e00f      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6a:	3328      	adds	r3, #40	; 0x28
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 f818 	bl	8004ca4 <RCCEx_PLL3_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c7a:	e004      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c82:	e000      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10a      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c8e:	4b96      	ldr	r3, [pc, #600]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c92:	f023 0107 	bic.w	r1, r3, #7
 8003c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c9c:	4a92      	ldr	r2, [pc, #584]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	6553      	str	r3, [r2, #84]	; 0x54
 8003ca2:	e003      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ca8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb4:	f002 0304 	and.w	r3, r2, #4
 8003cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cc2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	d044      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd4:	2b05      	cmp	r3, #5
 8003cd6:	d825      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003d2d 	.word	0x08003d2d
 8003ce4:	08003cf9 	.word	0x08003cf9
 8003ce8:	08003d0f 	.word	0x08003d0f
 8003cec:	08003d2d 	.word	0x08003d2d
 8003cf0:	08003d2d 	.word	0x08003d2d
 8003cf4:	08003d2d 	.word	0x08003d2d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	2101      	movs	r1, #1
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 ff1d 	bl	8004b40 <RCCEx_PLL2_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d0c:	e00f      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d12:	3328      	adds	r3, #40	; 0x28
 8003d14:	2101      	movs	r1, #1
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 ffc4 	bl	8004ca4 <RCCEx_PLL3_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d22:	e004      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d2a:	e000      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10b      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d36:	4b6c      	ldr	r3, [pc, #432]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3a:	f023 0107 	bic.w	r1, r3, #7
 8003d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d46:	4a68      	ldr	r2, [pc, #416]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d4c:	e003      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	f002 0320 	and.w	r3, r2, #32
 8003d62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d66:	2300      	movs	r3, #0
 8003d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d70:	460b      	mov	r3, r1
 8003d72:	4313      	orrs	r3, r2
 8003d74:	d055      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d82:	d033      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d88:	d82c      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8e:	d02f      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d94:	d826      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003d96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d9a:	d02b      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003d9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003da0:	d820      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da6:	d012      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dac:	d81a      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d022      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003db2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003db6:	d115      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 febd 	bl	8004b40 <RCCEx_PLL2_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003dcc:	e015      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd2:	3328      	adds	r3, #40	; 0x28
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 ff64 	bl	8004ca4 <RCCEx_PLL3_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003de2:	e00a      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dea:	e006      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003dec:	bf00      	nop
 8003dee:	e004      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003df0:	bf00      	nop
 8003df2:	e002      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003df4:	bf00      	nop
 8003df6:	e000      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e02:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	4a35      	ldr	r2, [pc, #212]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6553      	str	r3, [r2, #84]	; 0x54
 8003e18:	e003      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e32:	2300      	movs	r3, #0
 8003e34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003e38:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	d058      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e4e:	d033      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003e50:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e54:	d82c      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5a:	d02f      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e60:	d826      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e66:	d02b      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003e68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e6c:	d820      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e72:	d012      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e78:	d81a      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d022      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e82:	d115      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e88:	3308      	adds	r3, #8
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fe57 	bl	8004b40 <RCCEx_PLL2_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e98:	e015      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e9e:	3328      	adds	r3, #40	; 0x28
 8003ea0:	2102      	movs	r1, #2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fefe 	bl	8004ca4 <RCCEx_PLL3_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003eb6:	e006      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003eb8:	bf00      	nop
 8003eba:	e004      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ebc:	bf00      	nop
 8003ebe:	e002      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ec0:	bf00      	nop
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10e      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ede:	4a02      	ldr	r2, [pc, #8]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee4:	e006      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003ee6:	bf00      	nop
 8003ee8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ef0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f0a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4313      	orrs	r3, r2
 8003f12:	d055      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f1c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f20:	d033      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003f22:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f26:	d82c      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2c:	d02f      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f32:	d826      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f34:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f38:	d02b      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003f3a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f3e:	d820      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f44:	d012      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f4a:	d81a      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d022      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f54:	d115      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fdee 	bl	8004b40 <RCCEx_PLL2_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f6a:	e015      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f70:	3328      	adds	r3, #40	; 0x28
 8003f72:	2102      	movs	r1, #2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fe95 	bl	8004ca4 <RCCEx_PLL3_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f80:	e00a      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f88:	e006      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003f8a:	bf00      	nop
 8003f8c:	e004      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003f8e:	bf00      	nop
 8003f90:	e002      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003f92:	bf00      	nop
 8003f94:	e000      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10b      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fa0:	4ba1      	ldr	r3, [pc, #644]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fb0:	4a9d      	ldr	r2, [pc, #628]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fb2:	430b      	orrs	r3, r1
 8003fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb6:	e003      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f002 0308 	and.w	r3, r2, #8
 8003fcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fd6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	d01e      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fec:	d10c      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff2:	3328      	adds	r3, #40	; 0x28
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fe54 	bl	8004ca4 <RCCEx_PLL3_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004008:	4b87      	ldr	r3, [pc, #540]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004018:	4a83      	ldr	r2, [pc, #524]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800401a:	430b      	orrs	r3, r1
 800401c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	f002 0310 	and.w	r3, r2, #16
 800402a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800402e:	2300      	movs	r3, #0
 8004030:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004034:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004038:	460b      	mov	r3, r1
 800403a:	4313      	orrs	r3, r2
 800403c:	d01e      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004042:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404a:	d10c      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800404c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004050:	3328      	adds	r3, #40	; 0x28
 8004052:	2102      	movs	r1, #2
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fe25 	bl	8004ca4 <RCCEx_PLL3_Config>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004066:	4b70      	ldr	r3, [pc, #448]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004072:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004076:	4a6c      	ldr	r2, [pc, #432]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004078:	430b      	orrs	r3, r1
 800407a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800407c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004092:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004096:	460b      	mov	r3, r1
 8004098:	4313      	orrs	r3, r2
 800409a:	d03e      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800409c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040a8:	d022      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80040aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ae:	d81b      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80040b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b8:	d00b      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80040ba:	e015      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c0:	3308      	adds	r3, #8
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fd3b 	bl	8004b40 <RCCEx_PLL2_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80040d0:	e00f      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d6:	3328      	adds	r3, #40	; 0x28
 80040d8:	2102      	movs	r1, #2
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fde2 	bl	8004ca4 <RCCEx_PLL3_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80040e6:	e004      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040ee:	e000      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80040f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040fa:	4b4b      	ldr	r3, [pc, #300]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004106:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800410a:	4a47      	ldr	r2, [pc, #284]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800410c:	430b      	orrs	r3, r1
 800410e:	6593      	str	r3, [r2, #88]	; 0x58
 8004110:	e003      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004116:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800411a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004126:	67bb      	str	r3, [r7, #120]	; 0x78
 8004128:	2300      	movs	r3, #0
 800412a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800412c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004130:	460b      	mov	r3, r1
 8004132:	4313      	orrs	r3, r2
 8004134:	d03b      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004142:	d01f      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004144:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004148:	d818      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800414a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800414e:	d003      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004150:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004154:	d007      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004156:	e011      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004158:	4b33      	ldr	r3, [pc, #204]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	4a32      	ldr	r2, [pc, #200]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800415e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004162:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004164:	e00f      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416a:	3328      	adds	r3, #40	; 0x28
 800416c:	2101      	movs	r1, #1
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fd98 	bl	8004ca4 <RCCEx_PLL3_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800417a:	e004      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004182:	e000      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10b      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800418e:	4b26      	ldr	r3, [pc, #152]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	4a22      	ldr	r2, [pc, #136]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6553      	str	r3, [r2, #84]	; 0x54
 80041a4:	e003      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80041ba:	673b      	str	r3, [r7, #112]	; 0x70
 80041bc:	2300      	movs	r3, #0
 80041be:	677b      	str	r3, [r7, #116]	; 0x74
 80041c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80041c4:	460b      	mov	r3, r1
 80041c6:	4313      	orrs	r3, r2
 80041c8:	d034      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d8:	d007      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80041da:	e011      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041dc:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	4a11      	ldr	r2, [pc, #68]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041e8:	e00e      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ee:	3308      	adds	r3, #8
 80041f0:	2102      	movs	r1, #2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fca4 	bl	8004b40 <RCCEx_PLL2_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041fe:	e003      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004208:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10d      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800421c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421e:	4a02      	ldr	r2, [pc, #8]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004220:	430b      	orrs	r3, r1
 8004222:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004224:	e006      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004226:	bf00      	nop
 8004228:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004230:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004240:	66bb      	str	r3, [r7, #104]	; 0x68
 8004242:	2300      	movs	r3, #0
 8004244:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004246:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800424a:	460b      	mov	r3, r1
 800424c:	4313      	orrs	r3, r2
 800424e:	d00c      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004254:	3328      	adds	r3, #40	; 0x28
 8004256:	2102      	movs	r1, #2
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fd23 	bl	8004ca4 <RCCEx_PLL3_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004276:	663b      	str	r3, [r7, #96]	; 0x60
 8004278:	2300      	movs	r3, #0
 800427a:	667b      	str	r3, [r7, #100]	; 0x64
 800427c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004280:	460b      	mov	r3, r1
 8004282:	4313      	orrs	r3, r2
 8004284:	d038      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800428e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004292:	d018      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004298:	d811      	bhi.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800429a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800429e:	d014      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80042a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a4:	d80b      	bhi.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d011      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80042aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ae:	d106      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b0:	4bc3      	ldr	r3, [pc, #780]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	4ac2      	ldr	r2, [pc, #776]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80042bc:	e008      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042c4:	e004      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80042c6:	bf00      	nop
 80042c8:	e002      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80042ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10b      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042d8:	4bb9      	ldr	r3, [pc, #740]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e8:	4ab5      	ldr	r2, [pc, #724]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042ea:	430b      	orrs	r3, r1
 80042ec:	6553      	str	r3, [r2, #84]	; 0x54
 80042ee:	e003      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004304:	65bb      	str	r3, [r7, #88]	; 0x58
 8004306:	2300      	movs	r3, #0
 8004308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800430a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800430e:	460b      	mov	r3, r1
 8004310:	4313      	orrs	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004314:	4baa      	ldr	r3, [pc, #680]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004318:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004322:	4aa7      	ldr	r2, [pc, #668]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004324:	430b      	orrs	r3, r1
 8004326:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004334:	653b      	str	r3, [r7, #80]	; 0x50
 8004336:	2300      	movs	r3, #0
 8004338:	657b      	str	r3, [r7, #84]	; 0x54
 800433a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800433e:	460b      	mov	r3, r1
 8004340:	4313      	orrs	r3, r2
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004344:	4b9e      	ldr	r3, [pc, #632]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800434c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004350:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004354:	4a9a      	ldr	r2, [pc, #616]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004356:	430b      	orrs	r3, r1
 8004358:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004366:	64bb      	str	r3, [r7, #72]	; 0x48
 8004368:	2300      	movs	r3, #0
 800436a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800436c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004370:	460b      	mov	r3, r1
 8004372:	4313      	orrs	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004376:	4b92      	ldr	r3, [pc, #584]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004384:	4a8e      	ldr	r2, [pc, #568]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004386:	430b      	orrs	r3, r1
 8004388:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004396:	643b      	str	r3, [r7, #64]	; 0x40
 8004398:	2300      	movs	r3, #0
 800439a:	647b      	str	r3, [r7, #68]	; 0x44
 800439c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80043a0:	460b      	mov	r3, r1
 80043a2:	4313      	orrs	r3, r2
 80043a4:	d00e      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043a6:	4b86      	ldr	r3, [pc, #536]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	4a85      	ldr	r2, [pc, #532]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043b0:	6113      	str	r3, [r2, #16]
 80043b2:	4b83      	ldr	r3, [pc, #524]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043b4:	6919      	ldr	r1, [r3, #16]
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043be:	4a80      	ldr	r2, [pc, #512]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043c0:	430b      	orrs	r3, r1
 80043c2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80043d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80043d2:	2300      	movs	r3, #0
 80043d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80043da:	460b      	mov	r3, r1
 80043dc:	4313      	orrs	r3, r2
 80043de:	d009      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043e0:	4b77      	ldr	r3, [pc, #476]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	4a74      	ldr	r2, [pc, #464]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043f0:	430b      	orrs	r3, r1
 80043f2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
 8004402:	2300      	movs	r3, #0
 8004404:	637b      	str	r3, [r7, #52]	; 0x34
 8004406:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800440a:	460b      	mov	r3, r1
 800440c:	4313      	orrs	r3, r2
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004410:	4b6b      	ldr	r3, [pc, #428]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800441c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004420:	4a67      	ldr	r2, [pc, #412]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004422:	430b      	orrs	r3, r1
 8004424:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	2100      	movs	r1, #0
 8004430:	62b9      	str	r1, [r7, #40]	; 0x28
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004438:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800443c:	460b      	mov	r3, r1
 800443e:	4313      	orrs	r3, r2
 8004440:	d011      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004446:	3308      	adds	r3, #8
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fb78 	bl	8004b40 <RCCEx_PLL2_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004462:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	2100      	movs	r1, #0
 8004470:	6239      	str	r1, [r7, #32]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
 8004478:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800447c:	460b      	mov	r3, r1
 800447e:	4313      	orrs	r3, r2
 8004480:	d011      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004486:	3308      	adds	r3, #8
 8004488:	2101      	movs	r1, #1
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fb58 	bl	8004b40 <RCCEx_PLL2_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80044a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	2100      	movs	r1, #0
 80044b0:	61b9      	str	r1, [r7, #24]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80044bc:	460b      	mov	r3, r1
 80044be:	4313      	orrs	r3, r2
 80044c0:	d011      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c6:	3308      	adds	r3, #8
 80044c8:	2102      	movs	r1, #2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fb38 	bl	8004b40 <RCCEx_PLL2_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80044d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80044e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ee:	2100      	movs	r1, #0
 80044f0:	6139      	str	r1, [r7, #16]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80044fc:	460b      	mov	r3, r1
 80044fe:	4313      	orrs	r3, r2
 8004500:	d011      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004506:	3328      	adds	r3, #40	; 0x28
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fbca 	bl	8004ca4 <RCCEx_PLL3_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004522:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	2100      	movs	r1, #0
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800453c:	460b      	mov	r3, r1
 800453e:	4313      	orrs	r3, r2
 8004540:	d011      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004546:	3328      	adds	r3, #40	; 0x28
 8004548:	2101      	movs	r1, #1
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fbaa 	bl	8004ca4 <RCCEx_PLL3_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004562:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	2100      	movs	r1, #0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	607b      	str	r3, [r7, #4]
 8004578:	e9d7 1200 	ldrd	r1, r2, [r7]
 800457c:	460b      	mov	r3, r1
 800457e:	4313      	orrs	r3, r2
 8004580:	d011      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004586:	3328      	adds	r3, #40	; 0x28
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fb8a 	bl	8004ca4 <RCCEx_PLL3_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004596:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80045a6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e000      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80045ba:	46bd      	mov	sp, r7
 80045bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c0:	58024400 	.word	0x58024400

080045c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80045c8:	f7fe fd96 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 80045cc:	4602      	mov	r2, r0
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	091b      	lsrs	r3, r3, #4
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	4904      	ldr	r1, [pc, #16]	; (80045ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80045da:	5ccb      	ldrb	r3, [r1, r3]
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	58024400 	.word	0x58024400
 80045ec:	08006638 	.word	0x08006638

080045f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b089      	sub	sp, #36	; 0x24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045f8:	4ba1      	ldr	r3, [pc, #644]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004602:	4b9f      	ldr	r3, [pc, #636]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004606:	0b1b      	lsrs	r3, r3, #12
 8004608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800460c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800460e:	4b9c      	ldr	r3, [pc, #624]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	091b      	lsrs	r3, r3, #4
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800461a:	4b99      	ldr	r3, [pc, #612]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800461c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461e:	08db      	lsrs	r3, r3, #3
 8004620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	fb02 f303 	mul.w	r3, r2, r3
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004632:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8111 	beq.w	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b02      	cmp	r3, #2
 8004642:	f000 8083 	beq.w	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b02      	cmp	r3, #2
 800464a:	f200 80a1 	bhi.w	8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d056      	beq.n	8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800465a:	e099      	b.n	8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800465c:	4b88      	ldr	r3, [pc, #544]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d02d      	beq.n	80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004668:	4b85      	ldr	r3, [pc, #532]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	08db      	lsrs	r3, r3, #3
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	4a84      	ldr	r2, [pc, #528]	; (8004884 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
 8004678:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	ee07 3a90 	vmov	s15, r3
 8004680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004692:	4b7b      	ldr	r3, [pc, #492]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80046c2:	e087      	b.n	80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800488c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d6:	4b6a      	ldr	r3, [pc, #424]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004706:	e065      	b.n	80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b59      	ldr	r3, [pc, #356]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a03 	vldr	s12, [r7, #12]
 800472e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800474a:	e043      	b.n	80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004894 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475e:	4b48      	ldr	r3, [pc, #288]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004772:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800478e:	e021      	b.n	80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800479e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a2:	4b37      	ldr	r3, [pc, #220]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004888 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80047d4:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	0a5b      	lsrs	r3, r3, #9
 80047da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80047f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047fa:	ee17 2a90 	vmov	r2, s15
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004802:	4b1f      	ldr	r3, [pc, #124]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	0c1b      	lsrs	r3, r3, #16
 8004808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800480c:	ee07 3a90 	vmov	s15, r3
 8004810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800481c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004828:	ee17 2a90 	vmov	r2, s15
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004830:	4b13      	ldr	r3, [pc, #76]	; (8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	0e1b      	lsrs	r3, r3, #24
 8004836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800484a:	edd7 6a07 	vldr	s13, [r7, #28]
 800484e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004856:	ee17 2a90 	vmov	r2, s15
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800485e:	e008      	b.n	8004872 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	609a      	str	r2, [r3, #8]
}
 8004872:	bf00      	nop
 8004874:	3724      	adds	r7, #36	; 0x24
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	58024400 	.word	0x58024400
 8004884:	03d09000 	.word	0x03d09000
 8004888:	46000000 	.word	0x46000000
 800488c:	4c742400 	.word	0x4c742400
 8004890:	4a742400 	.word	0x4a742400
 8004894:	4af42400 	.word	0x4af42400

08004898 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004898:	b480      	push	{r7}
 800489a:	b089      	sub	sp, #36	; 0x24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048a0:	4ba1      	ldr	r3, [pc, #644]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80048aa:	4b9f      	ldr	r3, [pc, #636]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	0d1b      	lsrs	r3, r3, #20
 80048b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80048b6:	4b9c      	ldr	r3, [pc, #624]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80048c2:	4b99      	ldr	r3, [pc, #612]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	08db      	lsrs	r3, r3, #3
 80048c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8111 	beq.w	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	f000 8083 	beq.w	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	f200 80a1 	bhi.w	8004a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d056      	beq.n	80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004902:	e099      	b.n	8004a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004904:	4b88      	ldr	r3, [pc, #544]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d02d      	beq.n	800496c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004910:	4b85      	ldr	r3, [pc, #532]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	08db      	lsrs	r3, r3, #3
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	4a84      	ldr	r2, [pc, #528]	; (8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
 8004920:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	ee07 3a90 	vmov	s15, r3
 8004928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493a:	4b7b      	ldr	r3, [pc, #492]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494a:	ed97 6a03 	vldr	s12, [r7, #12]
 800494e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800495e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004966:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800496a:	e087      	b.n	8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800497a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497e:	4b6a      	ldr	r3, [pc, #424]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004992:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ae:	e065      	b.n	8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c2:	4b59      	ldr	r3, [pc, #356]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049f2:	e043      	b.n	8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a06:	4b48      	ldr	r3, [pc, #288]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a36:	e021      	b.n	8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4a:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004a7c:	4b2a      	ldr	r3, [pc, #168]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	0a5b      	lsrs	r3, r3, #9
 8004a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aa2:	ee17 2a90 	vmov	r2, s15
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004aaa:	4b1f      	ldr	r3, [pc, #124]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	0c1b      	lsrs	r3, r3, #16
 8004ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab4:	ee07 3a90 	vmov	s15, r3
 8004ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad0:	ee17 2a90 	vmov	r2, s15
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ad8:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	0e1b      	lsrs	r3, r3, #24
 8004ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004afe:	ee17 2a90 	vmov	r2, s15
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b06:	e008      	b.n	8004b1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	609a      	str	r2, [r3, #8]
}
 8004b1a:	bf00      	nop
 8004b1c:	3724      	adds	r7, #36	; 0x24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	58024400 	.word	0x58024400
 8004b2c:	03d09000 	.word	0x03d09000
 8004b30:	46000000 	.word	0x46000000
 8004b34:	4c742400 	.word	0x4c742400
 8004b38:	4a742400 	.word	0x4a742400
 8004b3c:	4af42400 	.word	0x4af42400

08004b40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b4e:	4b53      	ldr	r3, [pc, #332]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d101      	bne.n	8004b5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e099      	b.n	8004c92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b5e:	4b4f      	ldr	r3, [pc, #316]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a4e      	ldr	r2, [pc, #312]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004b64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6a:	f7fc fa53 	bl	8001014 <HAL_GetTick>
 8004b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b70:	e008      	b.n	8004b84 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b72:	f7fc fa4f 	bl	8001014 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e086      	b.n	8004c92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b84:	4b45      	ldr	r3, [pc, #276]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f0      	bne.n	8004b72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b90:	4b42      	ldr	r3, [pc, #264]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	031b      	lsls	r3, r3, #12
 8004b9e:	493f      	ldr	r1, [pc, #252]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	628b      	str	r3, [r1, #40]	; 0x28
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	025b      	lsls	r3, r3, #9
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	041b      	lsls	r3, r3, #16
 8004bc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	061b      	lsls	r3, r3, #24
 8004bd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bd4:	4931      	ldr	r1, [pc, #196]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004bda:	4b30      	ldr	r3, [pc, #192]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	492d      	ldr	r1, [pc, #180]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004bec:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	f023 0220 	bic.w	r2, r3, #32
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	4928      	ldr	r1, [pc, #160]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004bfe:	4b27      	ldr	r3, [pc, #156]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	4a26      	ldr	r2, [pc, #152]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c04:	f023 0310 	bic.w	r3, r3, #16
 8004c08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c0a:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c0e:	4b24      	ldr	r3, [pc, #144]	; (8004ca0 <RCCEx_PLL2_Config+0x160>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	69d2      	ldr	r2, [r2, #28]
 8004c16:	00d2      	lsls	r2, r2, #3
 8004c18:	4920      	ldr	r1, [pc, #128]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c1e:	4b1f      	ldr	r3, [pc, #124]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	4a1e      	ldr	r2, [pc, #120]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c24:	f043 0310 	orr.w	r3, r3, #16
 8004c28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c30:	4b1a      	ldr	r3, [pc, #104]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c3c:	e00f      	b.n	8004c5e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d106      	bne.n	8004c52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c44:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c50:	e005      	b.n	8004c5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c52:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	4a11      	ldr	r2, [pc, #68]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c5e:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a0e      	ldr	r2, [pc, #56]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6a:	f7fc f9d3 	bl	8001014 <HAL_GetTick>
 8004c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c70:	e008      	b.n	8004c84 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c72:	f7fc f9cf 	bl	8001014 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e006      	b.n	8004c92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <RCCEx_PLL2_Config+0x15c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0f0      	beq.n	8004c72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	58024400 	.word	0x58024400
 8004ca0:	ffff0007 	.word	0xffff0007

08004ca4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cb2:	4b53      	ldr	r3, [pc, #332]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d101      	bne.n	8004cc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e099      	b.n	8004df6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004cc2:	4b4f      	ldr	r3, [pc, #316]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a4e      	ldr	r2, [pc, #312]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cce:	f7fc f9a1 	bl	8001014 <HAL_GetTick>
 8004cd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cd4:	e008      	b.n	8004ce8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cd6:	f7fc f99d 	bl	8001014 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e086      	b.n	8004df6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ce8:	4b45      	ldr	r3, [pc, #276]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f0      	bne.n	8004cd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004cf4:	4b42      	ldr	r3, [pc, #264]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	051b      	lsls	r3, r3, #20
 8004d02:	493f      	ldr	r1, [pc, #252]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	628b      	str	r3, [r1, #40]	; 0x28
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	025b      	lsls	r3, r3, #9
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	041b      	lsls	r3, r3, #16
 8004d26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	061b      	lsls	r3, r3, #24
 8004d34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d38:	4931      	ldr	r1, [pc, #196]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d3e:	4b30      	ldr	r3, [pc, #192]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	492d      	ldr	r1, [pc, #180]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d50:	4b2b      	ldr	r3, [pc, #172]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	4928      	ldr	r1, [pc, #160]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d62:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	4a26      	ldr	r2, [pc, #152]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d6e:	4b24      	ldr	r3, [pc, #144]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d72:	4b24      	ldr	r3, [pc, #144]	; (8004e04 <RCCEx_PLL3_Config+0x160>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	69d2      	ldr	r2, [r2, #28]
 8004d7a:	00d2      	lsls	r2, r2, #3
 8004d7c:	4920      	ldr	r1, [pc, #128]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d82:	4b1f      	ldr	r3, [pc, #124]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	4a1e      	ldr	r2, [pc, #120]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d106      	bne.n	8004da2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d94:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	4a19      	ldr	r2, [pc, #100]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004d9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004da0:	e00f      	b.n	8004dc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004da8:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004dae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004db2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004db4:	e005      	b.n	8004dc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004db6:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	4a11      	ldr	r2, [pc, #68]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004dc2:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a0e      	ldr	r2, [pc, #56]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dce:	f7fc f921 	bl	8001014 <HAL_GetTick>
 8004dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004dd4:	e008      	b.n	8004de8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dd6:	f7fc f91d 	bl	8001014 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e006      	b.n	8004df6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <RCCEx_PLL3_Config+0x15c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0f0      	beq.n	8004dd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	58024400 	.word	0x58024400
 8004e04:	ffff0007 	.word	0xffff0007

08004e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e042      	b.n	8004ea0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7fb ff51 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2224      	movs	r2, #36	; 0x24
 8004e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0201 	bic.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f82c 	bl	8004ea8 <UART_SetConfig>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e022      	b.n	8004ea0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fd88 	bl	8005978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fe0f 	bl	8005abc <UART_CheckIdleState>
 8004e9e:	4603      	mov	r3, r0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eac:	b092      	sub	sp, #72	; 0x48
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	4bbe      	ldr	r3, [pc, #760]	; (80051d0 <UART_SetConfig+0x328>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4ab3      	ldr	r2, [pc, #716]	; (80051d4 <UART_SetConfig+0x32c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f10:	4313      	orrs	r3, r2
 8004f12:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	4baf      	ldr	r3, [pc, #700]	; (80051d8 <UART_SetConfig+0x330>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f24:	430b      	orrs	r3, r1
 8004f26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	f023 010f 	bic.w	r1, r3, #15
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4aa6      	ldr	r2, [pc, #664]	; (80051dc <UART_SetConfig+0x334>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d177      	bne.n	8005038 <UART_SetConfig+0x190>
 8004f48:	4ba5      	ldr	r3, [pc, #660]	; (80051e0 <UART_SetConfig+0x338>)
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f50:	2b28      	cmp	r3, #40	; 0x28
 8004f52:	d86d      	bhi.n	8005030 <UART_SetConfig+0x188>
 8004f54:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <UART_SetConfig+0xb4>)
 8004f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5a:	bf00      	nop
 8004f5c:	08005001 	.word	0x08005001
 8004f60:	08005031 	.word	0x08005031
 8004f64:	08005031 	.word	0x08005031
 8004f68:	08005031 	.word	0x08005031
 8004f6c:	08005031 	.word	0x08005031
 8004f70:	08005031 	.word	0x08005031
 8004f74:	08005031 	.word	0x08005031
 8004f78:	08005031 	.word	0x08005031
 8004f7c:	08005009 	.word	0x08005009
 8004f80:	08005031 	.word	0x08005031
 8004f84:	08005031 	.word	0x08005031
 8004f88:	08005031 	.word	0x08005031
 8004f8c:	08005031 	.word	0x08005031
 8004f90:	08005031 	.word	0x08005031
 8004f94:	08005031 	.word	0x08005031
 8004f98:	08005031 	.word	0x08005031
 8004f9c:	08005011 	.word	0x08005011
 8004fa0:	08005031 	.word	0x08005031
 8004fa4:	08005031 	.word	0x08005031
 8004fa8:	08005031 	.word	0x08005031
 8004fac:	08005031 	.word	0x08005031
 8004fb0:	08005031 	.word	0x08005031
 8004fb4:	08005031 	.word	0x08005031
 8004fb8:	08005031 	.word	0x08005031
 8004fbc:	08005019 	.word	0x08005019
 8004fc0:	08005031 	.word	0x08005031
 8004fc4:	08005031 	.word	0x08005031
 8004fc8:	08005031 	.word	0x08005031
 8004fcc:	08005031 	.word	0x08005031
 8004fd0:	08005031 	.word	0x08005031
 8004fd4:	08005031 	.word	0x08005031
 8004fd8:	08005031 	.word	0x08005031
 8004fdc:	08005021 	.word	0x08005021
 8004fe0:	08005031 	.word	0x08005031
 8004fe4:	08005031 	.word	0x08005031
 8004fe8:	08005031 	.word	0x08005031
 8004fec:	08005031 	.word	0x08005031
 8004ff0:	08005031 	.word	0x08005031
 8004ff4:	08005031 	.word	0x08005031
 8004ff8:	08005031 	.word	0x08005031
 8004ffc:	08005029 	.word	0x08005029
 8005000:	2301      	movs	r3, #1
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005006:	e222      	b.n	800544e <UART_SetConfig+0x5a6>
 8005008:	2304      	movs	r3, #4
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e21e      	b.n	800544e <UART_SetConfig+0x5a6>
 8005010:	2308      	movs	r3, #8
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005016:	e21a      	b.n	800544e <UART_SetConfig+0x5a6>
 8005018:	2310      	movs	r3, #16
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501e:	e216      	b.n	800544e <UART_SetConfig+0x5a6>
 8005020:	2320      	movs	r3, #32
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e212      	b.n	800544e <UART_SetConfig+0x5a6>
 8005028:	2340      	movs	r3, #64	; 0x40
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e20e      	b.n	800544e <UART_SetConfig+0x5a6>
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005036:	e20a      	b.n	800544e <UART_SetConfig+0x5a6>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a69      	ldr	r2, [pc, #420]	; (80051e4 <UART_SetConfig+0x33c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d130      	bne.n	80050a4 <UART_SetConfig+0x1fc>
 8005042:	4b67      	ldr	r3, [pc, #412]	; (80051e0 <UART_SetConfig+0x338>)
 8005044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b05      	cmp	r3, #5
 800504c:	d826      	bhi.n	800509c <UART_SetConfig+0x1f4>
 800504e:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <UART_SetConfig+0x1ac>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	0800506d 	.word	0x0800506d
 8005058:	08005075 	.word	0x08005075
 800505c:	0800507d 	.word	0x0800507d
 8005060:	08005085 	.word	0x08005085
 8005064:	0800508d 	.word	0x0800508d
 8005068:	08005095 	.word	0x08005095
 800506c:	2300      	movs	r3, #0
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005072:	e1ec      	b.n	800544e <UART_SetConfig+0x5a6>
 8005074:	2304      	movs	r3, #4
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507a:	e1e8      	b.n	800544e <UART_SetConfig+0x5a6>
 800507c:	2308      	movs	r3, #8
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005082:	e1e4      	b.n	800544e <UART_SetConfig+0x5a6>
 8005084:	2310      	movs	r3, #16
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508a:	e1e0      	b.n	800544e <UART_SetConfig+0x5a6>
 800508c:	2320      	movs	r3, #32
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005092:	e1dc      	b.n	800544e <UART_SetConfig+0x5a6>
 8005094:	2340      	movs	r3, #64	; 0x40
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509a:	e1d8      	b.n	800544e <UART_SetConfig+0x5a6>
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a2:	e1d4      	b.n	800544e <UART_SetConfig+0x5a6>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a4f      	ldr	r2, [pc, #316]	; (80051e8 <UART_SetConfig+0x340>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d130      	bne.n	8005110 <UART_SetConfig+0x268>
 80050ae:	4b4c      	ldr	r3, [pc, #304]	; (80051e0 <UART_SetConfig+0x338>)
 80050b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	2b05      	cmp	r3, #5
 80050b8:	d826      	bhi.n	8005108 <UART_SetConfig+0x260>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x218>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050d9 	.word	0x080050d9
 80050c4:	080050e1 	.word	0x080050e1
 80050c8:	080050e9 	.word	0x080050e9
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	080050f9 	.word	0x080050f9
 80050d4:	08005101 	.word	0x08005101
 80050d8:	2300      	movs	r3, #0
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050de:	e1b6      	b.n	800544e <UART_SetConfig+0x5a6>
 80050e0:	2304      	movs	r3, #4
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e6:	e1b2      	b.n	800544e <UART_SetConfig+0x5a6>
 80050e8:	2308      	movs	r3, #8
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ee:	e1ae      	b.n	800544e <UART_SetConfig+0x5a6>
 80050f0:	2310      	movs	r3, #16
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f6:	e1aa      	b.n	800544e <UART_SetConfig+0x5a6>
 80050f8:	2320      	movs	r3, #32
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fe:	e1a6      	b.n	800544e <UART_SetConfig+0x5a6>
 8005100:	2340      	movs	r3, #64	; 0x40
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005106:	e1a2      	b.n	800544e <UART_SetConfig+0x5a6>
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510e:	e19e      	b.n	800544e <UART_SetConfig+0x5a6>
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a35      	ldr	r2, [pc, #212]	; (80051ec <UART_SetConfig+0x344>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d130      	bne.n	800517c <UART_SetConfig+0x2d4>
 800511a:	4b31      	ldr	r3, [pc, #196]	; (80051e0 <UART_SetConfig+0x338>)
 800511c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	2b05      	cmp	r3, #5
 8005124:	d826      	bhi.n	8005174 <UART_SetConfig+0x2cc>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <UART_SetConfig+0x284>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	08005145 	.word	0x08005145
 8005130:	0800514d 	.word	0x0800514d
 8005134:	08005155 	.word	0x08005155
 8005138:	0800515d 	.word	0x0800515d
 800513c:	08005165 	.word	0x08005165
 8005140:	0800516d 	.word	0x0800516d
 8005144:	2300      	movs	r3, #0
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800514a:	e180      	b.n	800544e <UART_SetConfig+0x5a6>
 800514c:	2304      	movs	r3, #4
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005152:	e17c      	b.n	800544e <UART_SetConfig+0x5a6>
 8005154:	2308      	movs	r3, #8
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515a:	e178      	b.n	800544e <UART_SetConfig+0x5a6>
 800515c:	2310      	movs	r3, #16
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005162:	e174      	b.n	800544e <UART_SetConfig+0x5a6>
 8005164:	2320      	movs	r3, #32
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516a:	e170      	b.n	800544e <UART_SetConfig+0x5a6>
 800516c:	2340      	movs	r3, #64	; 0x40
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005172:	e16c      	b.n	800544e <UART_SetConfig+0x5a6>
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517a:	e168      	b.n	800544e <UART_SetConfig+0x5a6>
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1b      	ldr	r2, [pc, #108]	; (80051f0 <UART_SetConfig+0x348>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d142      	bne.n	800520c <UART_SetConfig+0x364>
 8005186:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <UART_SetConfig+0x338>)
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	2b05      	cmp	r3, #5
 8005190:	d838      	bhi.n	8005204 <UART_SetConfig+0x35c>
 8005192:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <UART_SetConfig+0x2f0>)
 8005194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005198:	080051b1 	.word	0x080051b1
 800519c:	080051b9 	.word	0x080051b9
 80051a0:	080051c1 	.word	0x080051c1
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	080051f5 	.word	0x080051f5
 80051ac:	080051fd 	.word	0x080051fd
 80051b0:	2300      	movs	r3, #0
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b6:	e14a      	b.n	800544e <UART_SetConfig+0x5a6>
 80051b8:	2304      	movs	r3, #4
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051be:	e146      	b.n	800544e <UART_SetConfig+0x5a6>
 80051c0:	2308      	movs	r3, #8
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c6:	e142      	b.n	800544e <UART_SetConfig+0x5a6>
 80051c8:	2310      	movs	r3, #16
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ce:	e13e      	b.n	800544e <UART_SetConfig+0x5a6>
 80051d0:	cfff69f3 	.word	0xcfff69f3
 80051d4:	58000c00 	.word	0x58000c00
 80051d8:	11fff4ff 	.word	0x11fff4ff
 80051dc:	40011000 	.word	0x40011000
 80051e0:	58024400 	.word	0x58024400
 80051e4:	40004400 	.word	0x40004400
 80051e8:	40004800 	.word	0x40004800
 80051ec:	40004c00 	.word	0x40004c00
 80051f0:	40005000 	.word	0x40005000
 80051f4:	2320      	movs	r3, #32
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fa:	e128      	b.n	800544e <UART_SetConfig+0x5a6>
 80051fc:	2340      	movs	r3, #64	; 0x40
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005202:	e124      	b.n	800544e <UART_SetConfig+0x5a6>
 8005204:	2380      	movs	r3, #128	; 0x80
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520a:	e120      	b.n	800544e <UART_SetConfig+0x5a6>
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4acb      	ldr	r2, [pc, #812]	; (8005540 <UART_SetConfig+0x698>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d176      	bne.n	8005304 <UART_SetConfig+0x45c>
 8005216:	4bcb      	ldr	r3, [pc, #812]	; (8005544 <UART_SetConfig+0x69c>)
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800521e:	2b28      	cmp	r3, #40	; 0x28
 8005220:	d86c      	bhi.n	80052fc <UART_SetConfig+0x454>
 8005222:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <UART_SetConfig+0x380>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	080052cd 	.word	0x080052cd
 800522c:	080052fd 	.word	0x080052fd
 8005230:	080052fd 	.word	0x080052fd
 8005234:	080052fd 	.word	0x080052fd
 8005238:	080052fd 	.word	0x080052fd
 800523c:	080052fd 	.word	0x080052fd
 8005240:	080052fd 	.word	0x080052fd
 8005244:	080052fd 	.word	0x080052fd
 8005248:	080052d5 	.word	0x080052d5
 800524c:	080052fd 	.word	0x080052fd
 8005250:	080052fd 	.word	0x080052fd
 8005254:	080052fd 	.word	0x080052fd
 8005258:	080052fd 	.word	0x080052fd
 800525c:	080052fd 	.word	0x080052fd
 8005260:	080052fd 	.word	0x080052fd
 8005264:	080052fd 	.word	0x080052fd
 8005268:	080052dd 	.word	0x080052dd
 800526c:	080052fd 	.word	0x080052fd
 8005270:	080052fd 	.word	0x080052fd
 8005274:	080052fd 	.word	0x080052fd
 8005278:	080052fd 	.word	0x080052fd
 800527c:	080052fd 	.word	0x080052fd
 8005280:	080052fd 	.word	0x080052fd
 8005284:	080052fd 	.word	0x080052fd
 8005288:	080052e5 	.word	0x080052e5
 800528c:	080052fd 	.word	0x080052fd
 8005290:	080052fd 	.word	0x080052fd
 8005294:	080052fd 	.word	0x080052fd
 8005298:	080052fd 	.word	0x080052fd
 800529c:	080052fd 	.word	0x080052fd
 80052a0:	080052fd 	.word	0x080052fd
 80052a4:	080052fd 	.word	0x080052fd
 80052a8:	080052ed 	.word	0x080052ed
 80052ac:	080052fd 	.word	0x080052fd
 80052b0:	080052fd 	.word	0x080052fd
 80052b4:	080052fd 	.word	0x080052fd
 80052b8:	080052fd 	.word	0x080052fd
 80052bc:	080052fd 	.word	0x080052fd
 80052c0:	080052fd 	.word	0x080052fd
 80052c4:	080052fd 	.word	0x080052fd
 80052c8:	080052f5 	.word	0x080052f5
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d2:	e0bc      	b.n	800544e <UART_SetConfig+0x5a6>
 80052d4:	2304      	movs	r3, #4
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052da:	e0b8      	b.n	800544e <UART_SetConfig+0x5a6>
 80052dc:	2308      	movs	r3, #8
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e2:	e0b4      	b.n	800544e <UART_SetConfig+0x5a6>
 80052e4:	2310      	movs	r3, #16
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ea:	e0b0      	b.n	800544e <UART_SetConfig+0x5a6>
 80052ec:	2320      	movs	r3, #32
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f2:	e0ac      	b.n	800544e <UART_SetConfig+0x5a6>
 80052f4:	2340      	movs	r3, #64	; 0x40
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fa:	e0a8      	b.n	800544e <UART_SetConfig+0x5a6>
 80052fc:	2380      	movs	r3, #128	; 0x80
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005302:	e0a4      	b.n	800544e <UART_SetConfig+0x5a6>
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a8f      	ldr	r2, [pc, #572]	; (8005548 <UART_SetConfig+0x6a0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d130      	bne.n	8005370 <UART_SetConfig+0x4c8>
 800530e:	4b8d      	ldr	r3, [pc, #564]	; (8005544 <UART_SetConfig+0x69c>)
 8005310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	2b05      	cmp	r3, #5
 8005318:	d826      	bhi.n	8005368 <UART_SetConfig+0x4c0>
 800531a:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <UART_SetConfig+0x478>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005339 	.word	0x08005339
 8005324:	08005341 	.word	0x08005341
 8005328:	08005349 	.word	0x08005349
 800532c:	08005351 	.word	0x08005351
 8005330:	08005359 	.word	0x08005359
 8005334:	08005361 	.word	0x08005361
 8005338:	2300      	movs	r3, #0
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800533e:	e086      	b.n	800544e <UART_SetConfig+0x5a6>
 8005340:	2304      	movs	r3, #4
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005346:	e082      	b.n	800544e <UART_SetConfig+0x5a6>
 8005348:	2308      	movs	r3, #8
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534e:	e07e      	b.n	800544e <UART_SetConfig+0x5a6>
 8005350:	2310      	movs	r3, #16
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005356:	e07a      	b.n	800544e <UART_SetConfig+0x5a6>
 8005358:	2320      	movs	r3, #32
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535e:	e076      	b.n	800544e <UART_SetConfig+0x5a6>
 8005360:	2340      	movs	r3, #64	; 0x40
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005366:	e072      	b.n	800544e <UART_SetConfig+0x5a6>
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536e:	e06e      	b.n	800544e <UART_SetConfig+0x5a6>
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a75      	ldr	r2, [pc, #468]	; (800554c <UART_SetConfig+0x6a4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d130      	bne.n	80053dc <UART_SetConfig+0x534>
 800537a:	4b72      	ldr	r3, [pc, #456]	; (8005544 <UART_SetConfig+0x69c>)
 800537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	2b05      	cmp	r3, #5
 8005384:	d826      	bhi.n	80053d4 <UART_SetConfig+0x52c>
 8005386:	a201      	add	r2, pc, #4	; (adr r2, 800538c <UART_SetConfig+0x4e4>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	080053a5 	.word	0x080053a5
 8005390:	080053ad 	.word	0x080053ad
 8005394:	080053b5 	.word	0x080053b5
 8005398:	080053bd 	.word	0x080053bd
 800539c:	080053c5 	.word	0x080053c5
 80053a0:	080053cd 	.word	0x080053cd
 80053a4:	2300      	movs	r3, #0
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053aa:	e050      	b.n	800544e <UART_SetConfig+0x5a6>
 80053ac:	2304      	movs	r3, #4
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b2:	e04c      	b.n	800544e <UART_SetConfig+0x5a6>
 80053b4:	2308      	movs	r3, #8
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ba:	e048      	b.n	800544e <UART_SetConfig+0x5a6>
 80053bc:	2310      	movs	r3, #16
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c2:	e044      	b.n	800544e <UART_SetConfig+0x5a6>
 80053c4:	2320      	movs	r3, #32
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ca:	e040      	b.n	800544e <UART_SetConfig+0x5a6>
 80053cc:	2340      	movs	r3, #64	; 0x40
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d2:	e03c      	b.n	800544e <UART_SetConfig+0x5a6>
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053da:	e038      	b.n	800544e <UART_SetConfig+0x5a6>
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a5b      	ldr	r2, [pc, #364]	; (8005550 <UART_SetConfig+0x6a8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d130      	bne.n	8005448 <UART_SetConfig+0x5a0>
 80053e6:	4b57      	ldr	r3, [pc, #348]	; (8005544 <UART_SetConfig+0x69c>)
 80053e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	2b05      	cmp	r3, #5
 80053f0:	d826      	bhi.n	8005440 <UART_SetConfig+0x598>
 80053f2:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <UART_SetConfig+0x550>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	08005411 	.word	0x08005411
 80053fc:	08005419 	.word	0x08005419
 8005400:	08005421 	.word	0x08005421
 8005404:	08005429 	.word	0x08005429
 8005408:	08005431 	.word	0x08005431
 800540c:	08005439 	.word	0x08005439
 8005410:	2302      	movs	r3, #2
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005416:	e01a      	b.n	800544e <UART_SetConfig+0x5a6>
 8005418:	2304      	movs	r3, #4
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541e:	e016      	b.n	800544e <UART_SetConfig+0x5a6>
 8005420:	2308      	movs	r3, #8
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005426:	e012      	b.n	800544e <UART_SetConfig+0x5a6>
 8005428:	2310      	movs	r3, #16
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542e:	e00e      	b.n	800544e <UART_SetConfig+0x5a6>
 8005430:	2320      	movs	r3, #32
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005436:	e00a      	b.n	800544e <UART_SetConfig+0x5a6>
 8005438:	2340      	movs	r3, #64	; 0x40
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543e:	e006      	b.n	800544e <UART_SetConfig+0x5a6>
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005446:	e002      	b.n	800544e <UART_SetConfig+0x5a6>
 8005448:	2380      	movs	r3, #128	; 0x80
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a3f      	ldr	r2, [pc, #252]	; (8005550 <UART_SetConfig+0x6a8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	f040 80f8 	bne.w	800564a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800545a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800545e:	2b20      	cmp	r3, #32
 8005460:	dc46      	bgt.n	80054f0 <UART_SetConfig+0x648>
 8005462:	2b02      	cmp	r3, #2
 8005464:	f2c0 8082 	blt.w	800556c <UART_SetConfig+0x6c4>
 8005468:	3b02      	subs	r3, #2
 800546a:	2b1e      	cmp	r3, #30
 800546c:	d87e      	bhi.n	800556c <UART_SetConfig+0x6c4>
 800546e:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <UART_SetConfig+0x5cc>)
 8005470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005474:	080054f7 	.word	0x080054f7
 8005478:	0800556d 	.word	0x0800556d
 800547c:	080054ff 	.word	0x080054ff
 8005480:	0800556d 	.word	0x0800556d
 8005484:	0800556d 	.word	0x0800556d
 8005488:	0800556d 	.word	0x0800556d
 800548c:	0800550f 	.word	0x0800550f
 8005490:	0800556d 	.word	0x0800556d
 8005494:	0800556d 	.word	0x0800556d
 8005498:	0800556d 	.word	0x0800556d
 800549c:	0800556d 	.word	0x0800556d
 80054a0:	0800556d 	.word	0x0800556d
 80054a4:	0800556d 	.word	0x0800556d
 80054a8:	0800556d 	.word	0x0800556d
 80054ac:	0800551f 	.word	0x0800551f
 80054b0:	0800556d 	.word	0x0800556d
 80054b4:	0800556d 	.word	0x0800556d
 80054b8:	0800556d 	.word	0x0800556d
 80054bc:	0800556d 	.word	0x0800556d
 80054c0:	0800556d 	.word	0x0800556d
 80054c4:	0800556d 	.word	0x0800556d
 80054c8:	0800556d 	.word	0x0800556d
 80054cc:	0800556d 	.word	0x0800556d
 80054d0:	0800556d 	.word	0x0800556d
 80054d4:	0800556d 	.word	0x0800556d
 80054d8:	0800556d 	.word	0x0800556d
 80054dc:	0800556d 	.word	0x0800556d
 80054e0:	0800556d 	.word	0x0800556d
 80054e4:	0800556d 	.word	0x0800556d
 80054e8:	0800556d 	.word	0x0800556d
 80054ec:	0800555f 	.word	0x0800555f
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d037      	beq.n	8005564 <UART_SetConfig+0x6bc>
 80054f4:	e03a      	b.n	800556c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80054f6:	f7ff f865 	bl	80045c4 <HAL_RCCEx_GetD3PCLK1Freq>
 80054fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054fc:	e03c      	b.n	8005578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff f874 	bl	80045f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800550c:	e034      	b.n	8005578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800550e:	f107 0318 	add.w	r3, r7, #24
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff f9c0 	bl	8004898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800551c:	e02c      	b.n	8005578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800551e:	4b09      	ldr	r3, [pc, #36]	; (8005544 <UART_SetConfig+0x69c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d016      	beq.n	8005558 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800552a:	4b06      	ldr	r3, [pc, #24]	; (8005544 <UART_SetConfig+0x69c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	08db      	lsrs	r3, r3, #3
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	4a07      	ldr	r2, [pc, #28]	; (8005554 <UART_SetConfig+0x6ac>)
 8005536:	fa22 f303 	lsr.w	r3, r2, r3
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800553c:	e01c      	b.n	8005578 <UART_SetConfig+0x6d0>
 800553e:	bf00      	nop
 8005540:	40011400 	.word	0x40011400
 8005544:	58024400 	.word	0x58024400
 8005548:	40007800 	.word	0x40007800
 800554c:	40007c00 	.word	0x40007c00
 8005550:	58000c00 	.word	0x58000c00
 8005554:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005558:	4b9d      	ldr	r3, [pc, #628]	; (80057d0 <UART_SetConfig+0x928>)
 800555a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800555c:	e00c      	b.n	8005578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800555e:	4b9d      	ldr	r3, [pc, #628]	; (80057d4 <UART_SetConfig+0x92c>)
 8005560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005562:	e009      	b.n	8005578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800556a:	e005      	b.n	8005578 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005576:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 81de 	beq.w	800593c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	4a94      	ldr	r2, [pc, #592]	; (80057d8 <UART_SetConfig+0x930>)
 8005586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800558a:	461a      	mov	r2, r3
 800558c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005592:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	4413      	add	r3, r2
 800559e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d305      	bcc.n	80055b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d903      	bls.n	80055b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80055b6:	e1c1      	b.n	800593c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ba:	2200      	movs	r2, #0
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	60fa      	str	r2, [r7, #12]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	4a84      	ldr	r2, [pc, #528]	; (80057d8 <UART_SetConfig+0x930>)
 80055c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2200      	movs	r2, #0
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	607a      	str	r2, [r7, #4]
 80055d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055da:	f7fa fe7d 	bl	80002d8 <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4610      	mov	r0, r2
 80055e4:	4619      	mov	r1, r3
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	020b      	lsls	r3, r1, #8
 80055f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055f4:	0202      	lsls	r2, r0, #8
 80055f6:	6979      	ldr	r1, [r7, #20]
 80055f8:	6849      	ldr	r1, [r1, #4]
 80055fa:	0849      	lsrs	r1, r1, #1
 80055fc:	2000      	movs	r0, #0
 80055fe:	460c      	mov	r4, r1
 8005600:	4605      	mov	r5, r0
 8005602:	eb12 0804 	adds.w	r8, r2, r4
 8005606:	eb43 0905 	adc.w	r9, r3, r5
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	469a      	mov	sl, r3
 8005612:	4693      	mov	fp, r2
 8005614:	4652      	mov	r2, sl
 8005616:	465b      	mov	r3, fp
 8005618:	4640      	mov	r0, r8
 800561a:	4649      	mov	r1, r9
 800561c:	f7fa fe5c 	bl	80002d8 <__aeabi_uldivmod>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4613      	mov	r3, r2
 8005626:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800562e:	d308      	bcc.n	8005642 <UART_SetConfig+0x79a>
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005636:	d204      	bcs.n	8005642 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800563e:	60da      	str	r2, [r3, #12]
 8005640:	e17c      	b.n	800593c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005648:	e178      	b.n	800593c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005652:	f040 80c5 	bne.w	80057e0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005656:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800565a:	2b20      	cmp	r3, #32
 800565c:	dc48      	bgt.n	80056f0 <UART_SetConfig+0x848>
 800565e:	2b00      	cmp	r3, #0
 8005660:	db7b      	blt.n	800575a <UART_SetConfig+0x8b2>
 8005662:	2b20      	cmp	r3, #32
 8005664:	d879      	bhi.n	800575a <UART_SetConfig+0x8b2>
 8005666:	a201      	add	r2, pc, #4	; (adr r2, 800566c <UART_SetConfig+0x7c4>)
 8005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566c:	080056f7 	.word	0x080056f7
 8005670:	080056ff 	.word	0x080056ff
 8005674:	0800575b 	.word	0x0800575b
 8005678:	0800575b 	.word	0x0800575b
 800567c:	08005707 	.word	0x08005707
 8005680:	0800575b 	.word	0x0800575b
 8005684:	0800575b 	.word	0x0800575b
 8005688:	0800575b 	.word	0x0800575b
 800568c:	08005717 	.word	0x08005717
 8005690:	0800575b 	.word	0x0800575b
 8005694:	0800575b 	.word	0x0800575b
 8005698:	0800575b 	.word	0x0800575b
 800569c:	0800575b 	.word	0x0800575b
 80056a0:	0800575b 	.word	0x0800575b
 80056a4:	0800575b 	.word	0x0800575b
 80056a8:	0800575b 	.word	0x0800575b
 80056ac:	08005727 	.word	0x08005727
 80056b0:	0800575b 	.word	0x0800575b
 80056b4:	0800575b 	.word	0x0800575b
 80056b8:	0800575b 	.word	0x0800575b
 80056bc:	0800575b 	.word	0x0800575b
 80056c0:	0800575b 	.word	0x0800575b
 80056c4:	0800575b 	.word	0x0800575b
 80056c8:	0800575b 	.word	0x0800575b
 80056cc:	0800575b 	.word	0x0800575b
 80056d0:	0800575b 	.word	0x0800575b
 80056d4:	0800575b 	.word	0x0800575b
 80056d8:	0800575b 	.word	0x0800575b
 80056dc:	0800575b 	.word	0x0800575b
 80056e0:	0800575b 	.word	0x0800575b
 80056e4:	0800575b 	.word	0x0800575b
 80056e8:	0800575b 	.word	0x0800575b
 80056ec:	0800574d 	.word	0x0800574d
 80056f0:	2b40      	cmp	r3, #64	; 0x40
 80056f2:	d02e      	beq.n	8005752 <UART_SetConfig+0x8aa>
 80056f4:	e031      	b.n	800575a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f6:	f7fd fd2f 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 80056fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80056fc:	e033      	b.n	8005766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056fe:	f7fd fd41 	bl	8003184 <HAL_RCC_GetPCLK2Freq>
 8005702:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005704:	e02f      	b.n	8005766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800570a:	4618      	mov	r0, r3
 800570c:	f7fe ff70 	bl	80045f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005714:	e027      	b.n	8005766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005716:	f107 0318 	add.w	r3, r7, #24
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff f8bc 	bl	8004898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005724:	e01f      	b.n	8005766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005726:	4b2d      	ldr	r3, [pc, #180]	; (80057dc <UART_SetConfig+0x934>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005732:	4b2a      	ldr	r3, [pc, #168]	; (80057dc <UART_SetConfig+0x934>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	08db      	lsrs	r3, r3, #3
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	4a24      	ldr	r2, [pc, #144]	; (80057d0 <UART_SetConfig+0x928>)
 800573e:	fa22 f303 	lsr.w	r3, r2, r3
 8005742:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005744:	e00f      	b.n	8005766 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005746:	4b22      	ldr	r3, [pc, #136]	; (80057d0 <UART_SetConfig+0x928>)
 8005748:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800574a:	e00c      	b.n	8005766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800574c:	4b21      	ldr	r3, [pc, #132]	; (80057d4 <UART_SetConfig+0x92c>)
 800574e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005750:	e009      	b.n	8005766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005758:	e005      	b.n	8005766 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005764:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 80e7 	beq.w	800593c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	4a19      	ldr	r2, [pc, #100]	; (80057d8 <UART_SetConfig+0x930>)
 8005774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005778:	461a      	mov	r2, r3
 800577a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005780:	005a      	lsls	r2, r3, #1
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	441a      	add	r2, r3
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005792:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	2b0f      	cmp	r3, #15
 8005798:	d916      	bls.n	80057c8 <UART_SetConfig+0x920>
 800579a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a0:	d212      	bcs.n	80057c8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f023 030f 	bic.w	r3, r3, #15
 80057aa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ae:	085b      	lsrs	r3, r3, #1
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057ba:	4313      	orrs	r3, r2
 80057bc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80057c4:	60da      	str	r2, [r3, #12]
 80057c6:	e0b9      	b.n	800593c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80057ce:	e0b5      	b.n	800593c <UART_SetConfig+0xa94>
 80057d0:	03d09000 	.word	0x03d09000
 80057d4:	003d0900 	.word	0x003d0900
 80057d8:	08006648 	.word	0x08006648
 80057dc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80057e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	dc49      	bgt.n	800587c <UART_SetConfig+0x9d4>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	db7c      	blt.n	80058e6 <UART_SetConfig+0xa3e>
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d87a      	bhi.n	80058e6 <UART_SetConfig+0xa3e>
 80057f0:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <UART_SetConfig+0x950>)
 80057f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f6:	bf00      	nop
 80057f8:	08005883 	.word	0x08005883
 80057fc:	0800588b 	.word	0x0800588b
 8005800:	080058e7 	.word	0x080058e7
 8005804:	080058e7 	.word	0x080058e7
 8005808:	08005893 	.word	0x08005893
 800580c:	080058e7 	.word	0x080058e7
 8005810:	080058e7 	.word	0x080058e7
 8005814:	080058e7 	.word	0x080058e7
 8005818:	080058a3 	.word	0x080058a3
 800581c:	080058e7 	.word	0x080058e7
 8005820:	080058e7 	.word	0x080058e7
 8005824:	080058e7 	.word	0x080058e7
 8005828:	080058e7 	.word	0x080058e7
 800582c:	080058e7 	.word	0x080058e7
 8005830:	080058e7 	.word	0x080058e7
 8005834:	080058e7 	.word	0x080058e7
 8005838:	080058b3 	.word	0x080058b3
 800583c:	080058e7 	.word	0x080058e7
 8005840:	080058e7 	.word	0x080058e7
 8005844:	080058e7 	.word	0x080058e7
 8005848:	080058e7 	.word	0x080058e7
 800584c:	080058e7 	.word	0x080058e7
 8005850:	080058e7 	.word	0x080058e7
 8005854:	080058e7 	.word	0x080058e7
 8005858:	080058e7 	.word	0x080058e7
 800585c:	080058e7 	.word	0x080058e7
 8005860:	080058e7 	.word	0x080058e7
 8005864:	080058e7 	.word	0x080058e7
 8005868:	080058e7 	.word	0x080058e7
 800586c:	080058e7 	.word	0x080058e7
 8005870:	080058e7 	.word	0x080058e7
 8005874:	080058e7 	.word	0x080058e7
 8005878:	080058d9 	.word	0x080058d9
 800587c:	2b40      	cmp	r3, #64	; 0x40
 800587e:	d02e      	beq.n	80058de <UART_SetConfig+0xa36>
 8005880:	e031      	b.n	80058e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005882:	f7fd fc69 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8005886:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005888:	e033      	b.n	80058f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800588a:	f7fd fc7b 	bl	8003184 <HAL_RCC_GetPCLK2Freq>
 800588e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005890:	e02f      	b.n	80058f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe feaa 	bl	80045f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a0:	e027      	b.n	80058f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058a2:	f107 0318 	add.w	r3, r7, #24
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe fff6 	bl	8004898 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058b0:	e01f      	b.n	80058f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058b2:	4b2d      	ldr	r3, [pc, #180]	; (8005968 <UART_SetConfig+0xac0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058be:	4b2a      	ldr	r3, [pc, #168]	; (8005968 <UART_SetConfig+0xac0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	08db      	lsrs	r3, r3, #3
 80058c4:	f003 0303 	and.w	r3, r3, #3
 80058c8:	4a28      	ldr	r2, [pc, #160]	; (800596c <UART_SetConfig+0xac4>)
 80058ca:	fa22 f303 	lsr.w	r3, r2, r3
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058d0:	e00f      	b.n	80058f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80058d2:	4b26      	ldr	r3, [pc, #152]	; (800596c <UART_SetConfig+0xac4>)
 80058d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058d6:	e00c      	b.n	80058f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058d8:	4b25      	ldr	r3, [pc, #148]	; (8005970 <UART_SetConfig+0xac8>)
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058dc:	e009      	b.n	80058f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058e4:	e005      	b.n	80058f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80058f0:	bf00      	nop
    }

    if (pclk != 0U)
 80058f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d021      	beq.n	800593c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	4a1d      	ldr	r2, [pc, #116]	; (8005974 <UART_SetConfig+0xacc>)
 80058fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005902:	461a      	mov	r2, r3
 8005904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005906:	fbb3 f2f2 	udiv	r2, r3, r2
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	441a      	add	r2, r3
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	fbb2 f3f3 	udiv	r3, r2, r3
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	2b0f      	cmp	r3, #15
 8005920:	d909      	bls.n	8005936 <UART_SetConfig+0xa8e>
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005928:	d205      	bcs.n	8005936 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800592a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592c:	b29a      	uxth	r2, r3
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60da      	str	r2, [r3, #12]
 8005934:	e002      	b.n	800593c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2201      	movs	r2, #1
 8005940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2201      	movs	r2, #1
 8005948:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2200      	movs	r2, #0
 8005950:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2200      	movs	r2, #0
 8005956:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005958:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800595c:	4618      	mov	r0, r3
 800595e:	3748      	adds	r7, #72	; 0x48
 8005960:	46bd      	mov	sp, r7
 8005962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005966:	bf00      	nop
 8005968:	58024400 	.word	0x58024400
 800596c:	03d09000 	.word	0x03d09000
 8005970:	003d0900 	.word	0x003d0900
 8005974:	08006648 	.word	0x08006648

08005978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01a      	beq.n	8005a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a76:	d10a      	bne.n	8005a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	605a      	str	r2, [r3, #4]
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b098      	sub	sp, #96	; 0x60
 8005ac0:	af02      	add	r7, sp, #8
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005acc:	f7fb faa2 	bl	8001014 <HAL_GetTick>
 8005ad0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d12f      	bne.n	8005b40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f88e 	bl	8005c10 <UART_WaitOnFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d022      	beq.n	8005b40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b0e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b18:	647b      	str	r3, [r7, #68]	; 0x44
 8005b1a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e6      	bne.n	8005afa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e063      	b.n	8005c08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d149      	bne.n	8005be2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b56:	2200      	movs	r2, #0
 8005b58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f857 	bl	8005c10 <UART_WaitOnFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d03c      	beq.n	8005be2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	623b      	str	r3, [r7, #32]
   return(result);
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b86:	633b      	str	r3, [r7, #48]	; 0x30
 8005b88:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e6      	bne.n	8005b68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bba:	61fa      	str	r2, [r7, #28]
 8005bbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	69b9      	ldr	r1, [r7, #24]
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e5      	bne.n	8005b9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e012      	b.n	8005c08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3758      	adds	r7, #88	; 0x58
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c20:	e049      	b.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c28:	d045      	beq.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c2a:	f7fb f9f3 	bl	8001014 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d302      	bcc.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e048      	b.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d031      	beq.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d110      	bne.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2208      	movs	r2, #8
 8005c66:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 f839 	bl	8005ce0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2208      	movs	r2, #8
 8005c72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e029      	b.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c90:	d111      	bne.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f81f 	bl	8005ce0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e00f      	b.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69da      	ldr	r2, [r3, #28]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	bf0c      	ite	eq
 8005cc6:	2301      	moveq	r3, #1
 8005cc8:	2300      	movne	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d0a6      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b095      	sub	sp, #84	; 0x54
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d06:	643b      	str	r3, [r7, #64]	; 0x40
 8005d08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e6      	bne.n	8005ce8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3308      	adds	r3, #8
 8005d20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d2a:	69fa      	ldr	r2, [r7, #28]
 8005d2c:	4b1e      	ldr	r3, [pc, #120]	; (8005da8 <UART_EndRxTransfer+0xc8>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3308      	adds	r3, #8
 8005d38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e5      	bne.n	8005d1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d118      	bne.n	8005d88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f023 0310 	bic.w	r3, r3, #16
 8005d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d74:	61bb      	str	r3, [r7, #24]
 8005d76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6979      	ldr	r1, [r7, #20]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	613b      	str	r3, [r7, #16]
   return(result);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e6      	bne.n	8005d56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005d9c:	bf00      	nop
 8005d9e:	3754      	adds	r7, #84	; 0x54
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	effffffe 	.word	0xeffffffe

08005dac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_UARTEx_DisableFifoMode+0x16>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e027      	b.n	8005e12 <HAL_UARTEx_DisableFifoMode+0x66>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2224      	movs	r2, #36	; 0x24
 8005dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005df0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e02d      	b.n	8005e92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2224      	movs	r2, #36	; 0x24
 8005e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f850 	bl	8005f18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e02d      	b.n	8005f0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2224      	movs	r2, #36	; 0x24
 8005ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f812 	bl	8005f18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d108      	bne.n	8005f3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f38:	e031      	b.n	8005f9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f3a:	2310      	movs	r3, #16
 8005f3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f3e:	2310      	movs	r3, #16
 8005f40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	0e5b      	lsrs	r3, r3, #25
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	0f5b      	lsrs	r3, r3, #29
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f62:	7bbb      	ldrb	r3, [r7, #14]
 8005f64:	7b3a      	ldrb	r2, [r7, #12]
 8005f66:	4911      	ldr	r1, [pc, #68]	; (8005fac <UARTEx_SetNbDataToProcess+0x94>)
 8005f68:	5c8a      	ldrb	r2, [r1, r2]
 8005f6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f6e:	7b3a      	ldrb	r2, [r7, #12]
 8005f70:	490f      	ldr	r1, [pc, #60]	; (8005fb0 <UARTEx_SetNbDataToProcess+0x98>)
 8005f72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f74:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	7b7a      	ldrb	r2, [r7, #13]
 8005f84:	4909      	ldr	r1, [pc, #36]	; (8005fac <UARTEx_SetNbDataToProcess+0x94>)
 8005f86:	5c8a      	ldrb	r2, [r1, r2]
 8005f88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f8c:	7b7a      	ldrb	r2, [r7, #13]
 8005f8e:	4908      	ldr	r1, [pc, #32]	; (8005fb0 <UARTEx_SetNbDataToProcess+0x98>)
 8005f90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f92:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	08006660 	.word	0x08006660
 8005fb0:	08006668 	.word	0x08006668

08005fb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	f107 001c 	add.w	r0, r7, #28
 8005fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d120      	bne.n	800600e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	4b2a      	ldr	r3, [pc, #168]	; (8006088 <USB_CoreInit+0xd4>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d105      	bne.n	8006002 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 faac 	bl	8006560 <USB_CoreReset>
 8006008:	4603      	mov	r3, r0
 800600a:	73fb      	strb	r3, [r7, #15]
 800600c:	e01a      	b.n	8006044 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 faa0 	bl	8006560 <USB_CoreReset>
 8006020:	4603      	mov	r3, r0
 8006022:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	639a      	str	r2, [r3, #56]	; 0x38
 8006036:	e005      	b.n	8006044 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	2b01      	cmp	r3, #1
 8006048:	d116      	bne.n	8006078 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604e:	b29a      	uxth	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006058:	4b0c      	ldr	r3, [pc, #48]	; (800608c <USB_CoreInit+0xd8>)
 800605a:	4313      	orrs	r3, r2
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f043 0206 	orr.w	r2, r3, #6
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006084:	b004      	add	sp, #16
 8006086:	4770      	bx	lr
 8006088:	ffbdffbf 	.word	0xffbdffbf
 800608c:	03ee0000 	.word	0x03ee0000

08006090 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f023 0201 	bic.w	r2, r3, #1
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	460b      	mov	r3, r1
 80060bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060ce:	78fb      	ldrb	r3, [r7, #3]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d115      	bne.n	8006100 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060e0:	2001      	movs	r0, #1
 80060e2:	f7fa ffa3 	bl	800102c <HAL_Delay>
      ms++;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3301      	adds	r3, #1
 80060ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fa29 	bl	8006544 <USB_GetMode>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d01e      	beq.n	8006136 <USB_SetCurrentMode+0x84>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b31      	cmp	r3, #49	; 0x31
 80060fc:	d9f0      	bls.n	80060e0 <USB_SetCurrentMode+0x2e>
 80060fe:	e01a      	b.n	8006136 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d115      	bne.n	8006132 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006112:	2001      	movs	r0, #1
 8006114:	f7fa ff8a 	bl	800102c <HAL_Delay>
      ms++;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3301      	adds	r3, #1
 800611c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fa10 	bl	8006544 <USB_GetMode>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d005      	beq.n	8006136 <USB_SetCurrentMode+0x84>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b31      	cmp	r3, #49	; 0x31
 800612e:	d9f0      	bls.n	8006112 <USB_SetCurrentMode+0x60>
 8006130:	e001      	b.n	8006136 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e005      	b.n	8006142 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b32      	cmp	r3, #50	; 0x32
 800613a:	d101      	bne.n	8006140 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e000      	b.n	8006142 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800614c:	b084      	sub	sp, #16
 800614e:	b580      	push	{r7, lr}
 8006150:	b086      	sub	sp, #24
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800615a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006166:	2300      	movs	r3, #0
 8006168:	613b      	str	r3, [r7, #16]
 800616a:	e009      	b.n	8006180 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	3340      	adds	r3, #64	; 0x40
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	2200      	movs	r2, #0
 8006178:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	3301      	adds	r3, #1
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2b0e      	cmp	r3, #14
 8006184:	d9f2      	bls.n	800616c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006188:	2b00      	cmp	r3, #0
 800618a:	d11c      	bne.n	80061c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800619a:	f043 0302 	orr.w	r3, r3, #2
 800619e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	e005      	b.n	80061d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061d8:	461a      	mov	r2, r3
 80061da:	2300      	movs	r3, #0
 80061dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e4:	4619      	mov	r1, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ec:	461a      	mov	r2, r3
 80061ee:	680b      	ldr	r3, [r1, #0]
 80061f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d10c      	bne.n	8006212 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d104      	bne.n	8006208 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061fe:	2100      	movs	r1, #0
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f965 	bl	80064d0 <USB_SetDevSpeed>
 8006206:	e008      	b.n	800621a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006208:	2101      	movs	r1, #1
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f960 	bl	80064d0 <USB_SetDevSpeed>
 8006210:	e003      	b.n	800621a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006212:	2103      	movs	r1, #3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f95b 	bl	80064d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800621a:	2110      	movs	r1, #16
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f8f3 	bl	8006408 <USB_FlushTxFifo>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f91f 	bl	8006470 <USB_FlushRxFifo>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006242:	461a      	mov	r2, r3
 8006244:	2300      	movs	r3, #0
 8006246:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624e:	461a      	mov	r2, r3
 8006250:	2300      	movs	r3, #0
 8006252:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625a:	461a      	mov	r2, r3
 800625c:	2300      	movs	r3, #0
 800625e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006260:	2300      	movs	r3, #0
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	e043      	b.n	80062ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800627c:	d118      	bne.n	80062b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10a      	bne.n	800629a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006290:	461a      	mov	r2, r3
 8006292:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	e013      	b.n	80062c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a6:	461a      	mov	r2, r3
 80062a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	e008      	b.n	80062c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062bc:	461a      	mov	r2, r3
 80062be:	2300      	movs	r3, #0
 80062c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ce:	461a      	mov	r2, r3
 80062d0:	2300      	movs	r3, #0
 80062d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e0:	461a      	mov	r2, r3
 80062e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	3301      	adds	r3, #1
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d3b7      	bcc.n	8006266 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062f6:	2300      	movs	r3, #0
 80062f8:	613b      	str	r3, [r7, #16]
 80062fa:	e043      	b.n	8006384 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800630e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006312:	d118      	bne.n	8006346 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006326:	461a      	mov	r2, r3
 8006328:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	e013      	b.n	8006358 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	461a      	mov	r2, r3
 800633e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	e008      	b.n	8006358 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006352:	461a      	mov	r2, r3
 8006354:	2300      	movs	r3, #0
 8006356:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006364:	461a      	mov	r2, r3
 8006366:	2300      	movs	r3, #0
 8006368:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006376:	461a      	mov	r2, r3
 8006378:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800637c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	3301      	adds	r3, #1
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	429a      	cmp	r2, r3
 800638a:	d3b7      	bcc.n	80062fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800639a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800639e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80063ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d105      	bne.n	80063c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	f043 0210 	orr.w	r2, r3, #16
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699a      	ldr	r2, [r3, #24]
 80063c4:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <USB_DevInit+0x2b4>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d005      	beq.n	80063de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f043 0208 	orr.w	r2, r3, #8
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d105      	bne.n	80063f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699a      	ldr	r2, [r3, #24]
 80063e8:	4b06      	ldr	r3, [pc, #24]	; (8006404 <USB_DevInit+0x2b8>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063fc:	b004      	add	sp, #16
 80063fe:	4770      	bx	lr
 8006400:	803c3800 	.word	0x803c3800
 8006404:	40000004 	.word	0x40000004

08006408 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3301      	adds	r3, #1
 800641a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4a13      	ldr	r2, [pc, #76]	; (800646c <USB_FlushTxFifo+0x64>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d901      	bls.n	8006428 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e01b      	b.n	8006460 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	daf2      	bge.n	8006416 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	019b      	lsls	r3, r3, #6
 8006438:	f043 0220 	orr.w	r2, r3, #32
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3301      	adds	r3, #1
 8006444:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4a08      	ldr	r2, [pc, #32]	; (800646c <USB_FlushTxFifo+0x64>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d901      	bls.n	8006452 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e006      	b.n	8006460 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b20      	cmp	r3, #32
 800645c:	d0f0      	beq.n	8006440 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	00030d40 	.word	0x00030d40

08006470 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3301      	adds	r3, #1
 8006480:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4a11      	ldr	r2, [pc, #68]	; (80064cc <USB_FlushRxFifo+0x5c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d901      	bls.n	800648e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e018      	b.n	80064c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	daf2      	bge.n	800647c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2210      	movs	r2, #16
 800649e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3301      	adds	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4a08      	ldr	r2, [pc, #32]	; (80064cc <USB_FlushRxFifo+0x5c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d901      	bls.n	80064b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e006      	b.n	80064c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0310 	and.w	r3, r3, #16
 80064ba:	2b10      	cmp	r3, #16
 80064bc:	d0f0      	beq.n	80064a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	00030d40 	.word	0x00030d40

080064d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	68f9      	ldr	r1, [r7, #12]
 80064ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064f0:	4313      	orrs	r3, r2
 80064f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006502:	b480      	push	{r7}
 8006504:	b085      	sub	sp, #20
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800651c:	f023 0303 	bic.w	r3, r3, #3
 8006520:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006530:	f043 0302 	orr.w	r3, r3, #2
 8006534:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	f003 0301 	and.w	r3, r3, #1
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3301      	adds	r3, #1
 8006570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4a13      	ldr	r2, [pc, #76]	; (80065c4 <USB_CoreReset+0x64>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d901      	bls.n	800657e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e01b      	b.n	80065b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	daf2      	bge.n	800656c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f043 0201 	orr.w	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3301      	adds	r3, #1
 800659a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4a09      	ldr	r2, [pc, #36]	; (80065c4 <USB_CoreReset+0x64>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d901      	bls.n	80065a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e006      	b.n	80065b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d0f0      	beq.n	8006596 <USB_CoreReset+0x36>

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	00030d40 	.word	0x00030d40

080065c8 <__libc_init_array>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	4d0d      	ldr	r5, [pc, #52]	; (8006600 <__libc_init_array+0x38>)
 80065cc:	4c0d      	ldr	r4, [pc, #52]	; (8006604 <__libc_init_array+0x3c>)
 80065ce:	1b64      	subs	r4, r4, r5
 80065d0:	10a4      	asrs	r4, r4, #2
 80065d2:	2600      	movs	r6, #0
 80065d4:	42a6      	cmp	r6, r4
 80065d6:	d109      	bne.n	80065ec <__libc_init_array+0x24>
 80065d8:	4d0b      	ldr	r5, [pc, #44]	; (8006608 <__libc_init_array+0x40>)
 80065da:	4c0c      	ldr	r4, [pc, #48]	; (800660c <__libc_init_array+0x44>)
 80065dc:	f000 f820 	bl	8006620 <_init>
 80065e0:	1b64      	subs	r4, r4, r5
 80065e2:	10a4      	asrs	r4, r4, #2
 80065e4:	2600      	movs	r6, #0
 80065e6:	42a6      	cmp	r6, r4
 80065e8:	d105      	bne.n	80065f6 <__libc_init_array+0x2e>
 80065ea:	bd70      	pop	{r4, r5, r6, pc}
 80065ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f0:	4798      	blx	r3
 80065f2:	3601      	adds	r6, #1
 80065f4:	e7ee      	b.n	80065d4 <__libc_init_array+0xc>
 80065f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fa:	4798      	blx	r3
 80065fc:	3601      	adds	r6, #1
 80065fe:	e7f2      	b.n	80065e6 <__libc_init_array+0x1e>
 8006600:	08006678 	.word	0x08006678
 8006604:	08006678 	.word	0x08006678
 8006608:	08006678 	.word	0x08006678
 800660c:	0800667c 	.word	0x0800667c

08006610 <memset>:
 8006610:	4402      	add	r2, r0
 8006612:	4603      	mov	r3, r0
 8006614:	4293      	cmp	r3, r2
 8006616:	d100      	bne.n	800661a <memset+0xa>
 8006618:	4770      	bx	lr
 800661a:	f803 1b01 	strb.w	r1, [r3], #1
 800661e:	e7f9      	b.n	8006614 <memset+0x4>

08006620 <_init>:
 8006620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006622:	bf00      	nop
 8006624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006626:	bc08      	pop	{r3}
 8006628:	469e      	mov	lr, r3
 800662a:	4770      	bx	lr

0800662c <_fini>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	bf00      	nop
 8006630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006632:	bc08      	pop	{r3}
 8006634:	469e      	mov	lr, r3
 8006636:	4770      	bx	lr
