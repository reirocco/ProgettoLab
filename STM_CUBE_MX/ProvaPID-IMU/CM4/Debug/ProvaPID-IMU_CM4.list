
ProvaPID-IMU_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f64c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0810f8f0  0810f8f0  0001f8f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0811001c  0811001c  0002001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08110024  08110024  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08110028  08110028  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  10000000  0811002c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002c4  100001f4  08110220  000301f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  100004b8  08110220  000304b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022cd5  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003b28  00000000  00000000  00052ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b20  00000000  00000000  00056a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001978  00000000  00000000  00058548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003fb2c  00000000  00000000  00059ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023a92  00000000  00000000  000999ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a0892  00000000  00000000  000bd47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0025dd10  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008a78  00000000  00000000  0025dd60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001f4 	.word	0x100001f4
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810f8d4 	.word	0x0810f8d4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001f8 	.word	0x100001f8
 81002dc:	0810f8d4 	.word	0x0810f8d4

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <init_tune_PID_Pitch>:
#include "PID_Pitch.h"

void init_tune_PID_Pitch(PID_Pitch* p,float Tc,float Kp,float Ki,float Kd){
 8101138:	b480      	push	{r7}
 810113a:	b087      	sub	sp, #28
 810113c:	af00      	add	r7, sp, #0
 810113e:	6178      	str	r0, [r7, #20]
 8101140:	ed87 0a04 	vstr	s0, [r7, #16]
 8101144:	edc7 0a03 	vstr	s1, [r7, #12]
 8101148:	ed87 1a02 	vstr	s2, [r7, #8]
 810114c:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Tc=Tc;
 8101150:	697b      	ldr	r3, [r7, #20]
 8101152:	693a      	ldr	r2, [r7, #16]
 8101154:	60da      	str	r2, [r3, #12]
	p->u_max= 32.3017; // coppia massima
 8101156:	697b      	ldr	r3, [r7, #20]
 8101158:	4a09      	ldr	r2, [pc, #36]	; (8101180 <init_tune_PID_Pitch+0x48>)
 810115a:	611a      	str	r2, [r3, #16]
	p->u_min= -32.3017;  // coppia minima
 810115c:	697b      	ldr	r3, [r7, #20]
 810115e:	4a09      	ldr	r2, [pc, #36]	; (8101184 <init_tune_PID_Pitch+0x4c>)
 8101160:	615a      	str	r2, [r3, #20]

	p->Kp=Kp;
 8101162:	697b      	ldr	r3, [r7, #20]
 8101164:	68fa      	ldr	r2, [r7, #12]
 8101166:	601a      	str	r2, [r3, #0]
	p->Ki=Ki;
 8101168:	697b      	ldr	r3, [r7, #20]
 810116a:	68ba      	ldr	r2, [r7, #8]
 810116c:	605a      	str	r2, [r3, #4]
	p->Kd=Kd;
 810116e:	697b      	ldr	r3, [r7, #20]
 8101170:	687a      	ldr	r2, [r7, #4]
 8101172:	609a      	str	r2, [r3, #8]
}
 8101174:	bf00      	nop
 8101176:	371c      	adds	r7, #28
 8101178:	46bd      	mov	sp, r7
 810117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810117e:	4770      	bx	lr
 8101180:	420134f1 	.word	0x420134f1
 8101184:	c20134f1 	.word	0xc20134f1

08101188 <PID_controller_Pitch>:

float PID_controller_Pitch(PID_Pitch* p,float y,float r){
 8101188:	b480      	push	{r7}
 810118a:	b08b      	sub	sp, #44	; 0x2c
 810118c:	af00      	add	r7, sp, #0
 810118e:	60f8      	str	r0, [r7, #12]
 8101190:	ed87 0a02 	vstr	s0, [r7, #8]
 8101194:	edc7 0a01 	vstr	s1, [r7, #4]
	static float e_old=0,Iterm=0;
	float u;
	float newIterm;
	float e=r-y;
 8101198:	ed97 7a01 	vldr	s14, [r7, #4]
 810119c:	edd7 7a02 	vldr	s15, [r7, #8]
 81011a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 81011a4:	edc7 7a08 	vstr	s15, [r7, #32]
	float Pterm = p->Kp*e;
 81011a8:	68fb      	ldr	r3, [r7, #12]
 81011aa:	edd3 7a00 	vldr	s15, [r3]
 81011ae:	ed97 7a08 	vldr	s14, [r7, #32]
 81011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81011b6:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm=Iterm+(p->Ki)*p->Tc*e_old;
 81011ba:	68fb      	ldr	r3, [r7, #12]
 81011bc:	ed93 7a01 	vldr	s14, [r3, #4]
 81011c0:	68fb      	ldr	r3, [r7, #12]
 81011c2:	edd3 7a03 	vldr	s15, [r3, #12]
 81011c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 81011ca:	4b2b      	ldr	r3, [pc, #172]	; (8101278 <PID_controller_Pitch+0xf0>)
 81011cc:	edd3 7a00 	vldr	s15, [r3]
 81011d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 81011d4:	4b29      	ldr	r3, [pc, #164]	; (810127c <PID_controller_Pitch+0xf4>)
 81011d6:	edd3 7a00 	vldr	s15, [r3]
 81011da:	ee77 7a27 	vadd.f32	s15, s14, s15
 81011de:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm=(p->Kd/p->Tc)*(e-e_old);
 81011e2:	68fb      	ldr	r3, [r7, #12]
 81011e4:	edd3 6a02 	vldr	s13, [r3, #8]
 81011e8:	68fb      	ldr	r3, [r7, #12]
 81011ea:	edd3 7a03 	vldr	s15, [r3, #12]
 81011ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81011f2:	4b21      	ldr	r3, [pc, #132]	; (8101278 <PID_controller_Pitch+0xf0>)
 81011f4:	edd3 7a00 	vldr	s15, [r3]
 81011f8:	edd7 6a08 	vldr	s13, [r7, #32]
 81011fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8101200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101204:	edc7 7a05 	vstr	s15, [r7, #20]
	e_old=e;
 8101208:	4a1b      	ldr	r2, [pc, #108]	; (8101278 <PID_controller_Pitch+0xf0>)
 810120a:	6a3b      	ldr	r3, [r7, #32]
 810120c:	6013      	str	r3, [r2, #0]
	u=Pterm+newIterm+Dterm;
 810120e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101212:	edd7 7a06 	vldr	s15, [r7, #24]
 8101216:	ee77 7a27 	vadd.f32	s15, s14, s15
 810121a:	ed97 7a05 	vldr	s14, [r7, #20]
 810121e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101222:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(u>p->u_max){
 8101226:	68fb      	ldr	r3, [r7, #12]
 8101228:	edd3 7a04 	vldr	s15, [r3, #16]
 810122c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101238:	dd03      	ble.n	8101242 <PID_controller_Pitch+0xba>
		u=p->u_max;
 810123a:	68fb      	ldr	r3, [r7, #12]
 810123c:	691b      	ldr	r3, [r3, #16]
 810123e:	627b      	str	r3, [r7, #36]	; 0x24
 8101240:	e010      	b.n	8101264 <PID_controller_Pitch+0xdc>
	}else if(u<p->u_min){
 8101242:	68fb      	ldr	r3, [r7, #12]
 8101244:	edd3 7a05 	vldr	s15, [r3, #20]
 8101248:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 810124c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101254:	d503      	bpl.n	810125e <PID_controller_Pitch+0xd6>
		u=p->u_min;
 8101256:	68fb      	ldr	r3, [r7, #12]
 8101258:	695b      	ldr	r3, [r3, #20]
 810125a:	627b      	str	r3, [r7, #36]	; 0x24
 810125c:	e002      	b.n	8101264 <PID_controller_Pitch+0xdc>
	}else{
		Iterm= newIterm;
 810125e:	4a07      	ldr	r2, [pc, #28]	; (810127c <PID_controller_Pitch+0xf4>)
 8101260:	69bb      	ldr	r3, [r7, #24]
 8101262:	6013      	str	r3, [r2, #0]
	}
	return u;
 8101264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101266:	ee07 3a90 	vmov	s15, r3

}
 810126a:	eeb0 0a67 	vmov.f32	s0, s15
 810126e:	372c      	adds	r7, #44	; 0x2c
 8101270:	46bd      	mov	sp, r7
 8101272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101276:	4770      	bx	lr
 8101278:	10000210 	.word	0x10000210
 810127c:	10000214 	.word	0x10000214

08101280 <init_tune_PID_Roll>:
#include "PID_Roll.h"
void init_tune_PID_Roll(PID_Roll* p,float Tc,float Kp,float Ki,float Kd){
 8101280:	b480      	push	{r7}
 8101282:	b087      	sub	sp, #28
 8101284:	af00      	add	r7, sp, #0
 8101286:	6178      	str	r0, [r7, #20]
 8101288:	ed87 0a04 	vstr	s0, [r7, #16]
 810128c:	edc7 0a03 	vstr	s1, [r7, #12]
 8101290:	ed87 1a02 	vstr	s2, [r7, #8]
 8101294:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Tc=Tc;
 8101298:	697b      	ldr	r3, [r7, #20]
 810129a:	693a      	ldr	r2, [r7, #16]
 810129c:	60da      	str	r2, [r3, #12]
	p->u_max= 32.6800; // coppia massima
 810129e:	697b      	ldr	r3, [r7, #20]
 81012a0:	4a09      	ldr	r2, [pc, #36]	; (81012c8 <init_tune_PID_Roll+0x48>)
 81012a2:	611a      	str	r2, [r3, #16]
	p->u_min= -32.6800;  // coppia minima
 81012a4:	697b      	ldr	r3, [r7, #20]
 81012a6:	4a09      	ldr	r2, [pc, #36]	; (81012cc <init_tune_PID_Roll+0x4c>)
 81012a8:	615a      	str	r2, [r3, #20]

	p->Kp=Kp;
 81012aa:	697b      	ldr	r3, [r7, #20]
 81012ac:	68fa      	ldr	r2, [r7, #12]
 81012ae:	601a      	str	r2, [r3, #0]
	p->Ki=Ki;
 81012b0:	697b      	ldr	r3, [r7, #20]
 81012b2:	68ba      	ldr	r2, [r7, #8]
 81012b4:	605a      	str	r2, [r3, #4]
	p->Kd=Kd;
 81012b6:	697b      	ldr	r3, [r7, #20]
 81012b8:	687a      	ldr	r2, [r7, #4]
 81012ba:	609a      	str	r2, [r3, #8]
}
 81012bc:	bf00      	nop
 81012be:	371c      	adds	r7, #28
 81012c0:	46bd      	mov	sp, r7
 81012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012c6:	4770      	bx	lr
 81012c8:	4202b852 	.word	0x4202b852
 81012cc:	c202b852 	.word	0xc202b852

081012d0 <PID_controller_Roll>:
// metodo per il calcolo del PID
float PID_controller_Roll(PID_Roll* p,float y,float r){
 81012d0:	b480      	push	{r7}
 81012d2:	b08b      	sub	sp, #44	; 0x2c
 81012d4:	af00      	add	r7, sp, #0
 81012d6:	60f8      	str	r0, [r7, #12]
 81012d8:	ed87 0a02 	vstr	s0, [r7, #8]
 81012dc:	edc7 0a01 	vstr	s1, [r7, #4]

	static float e_old=0,Iterm=0;
	float u;
	float newIterm;
	float e=r-y;
 81012e0:	ed97 7a01 	vldr	s14, [r7, #4]
 81012e4:	edd7 7a02 	vldr	s15, [r7, #8]
 81012e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 81012ec:	edc7 7a08 	vstr	s15, [r7, #32]
	float Pterm = p->Kp*e;
 81012f0:	68fb      	ldr	r3, [r7, #12]
 81012f2:	edd3 7a00 	vldr	s15, [r3]
 81012f6:	ed97 7a08 	vldr	s14, [r7, #32]
 81012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012fe:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm=Iterm+(p->Ki)*p->Tc*e_old;
 8101302:	68fb      	ldr	r3, [r7, #12]
 8101304:	ed93 7a01 	vldr	s14, [r3, #4]
 8101308:	68fb      	ldr	r3, [r7, #12]
 810130a:	edd3 7a03 	vldr	s15, [r3, #12]
 810130e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101312:	4b2b      	ldr	r3, [pc, #172]	; (81013c0 <PID_controller_Roll+0xf0>)
 8101314:	edd3 7a00 	vldr	s15, [r3]
 8101318:	ee27 7a27 	vmul.f32	s14, s14, s15
 810131c:	4b29      	ldr	r3, [pc, #164]	; (81013c4 <PID_controller_Roll+0xf4>)
 810131e:	edd3 7a00 	vldr	s15, [r3]
 8101322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101326:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm=(p->Kd/p->Tc)*(e-e_old);
 810132a:	68fb      	ldr	r3, [r7, #12]
 810132c:	edd3 6a02 	vldr	s13, [r3, #8]
 8101330:	68fb      	ldr	r3, [r7, #12]
 8101332:	edd3 7a03 	vldr	s15, [r3, #12]
 8101336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810133a:	4b21      	ldr	r3, [pc, #132]	; (81013c0 <PID_controller_Roll+0xf0>)
 810133c:	edd3 7a00 	vldr	s15, [r3]
 8101340:	edd7 6a08 	vldr	s13, [r7, #32]
 8101344:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8101348:	ee67 7a27 	vmul.f32	s15, s14, s15
 810134c:	edc7 7a05 	vstr	s15, [r7, #20]
	e_old=e;
 8101350:	4a1b      	ldr	r2, [pc, #108]	; (81013c0 <PID_controller_Roll+0xf0>)
 8101352:	6a3b      	ldr	r3, [r7, #32]
 8101354:	6013      	str	r3, [r2, #0]
	u=Pterm+newIterm+Dterm;
 8101356:	ed97 7a07 	vldr	s14, [r7, #28]
 810135a:	edd7 7a06 	vldr	s15, [r7, #24]
 810135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101362:	ed97 7a05 	vldr	s14, [r7, #20]
 8101366:	ee77 7a27 	vadd.f32	s15, s14, s15
 810136a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if(u>p->u_max){
 810136e:	68fb      	ldr	r3, [r7, #12]
 8101370:	edd3 7a04 	vldr	s15, [r3, #16]
 8101374:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 810137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101380:	dd03      	ble.n	810138a <PID_controller_Roll+0xba>
		u=p->u_max;
 8101382:	68fb      	ldr	r3, [r7, #12]
 8101384:	691b      	ldr	r3, [r3, #16]
 8101386:	627b      	str	r3, [r7, #36]	; 0x24
 8101388:	e010      	b.n	81013ac <PID_controller_Roll+0xdc>

	}else if(u<p->u_min){
 810138a:	68fb      	ldr	r3, [r7, #12]
 810138c:	edd3 7a05 	vldr	s15, [r3, #20]
 8101390:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101394:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810139c:	d503      	bpl.n	81013a6 <PID_controller_Roll+0xd6>
		u=p->u_min;
 810139e:	68fb      	ldr	r3, [r7, #12]
 81013a0:	695b      	ldr	r3, [r3, #20]
 81013a2:	627b      	str	r3, [r7, #36]	; 0x24
 81013a4:	e002      	b.n	81013ac <PID_controller_Roll+0xdc>
	}else{
		Iterm= newIterm;
 81013a6:	4a07      	ldr	r2, [pc, #28]	; (81013c4 <PID_controller_Roll+0xf4>)
 81013a8:	69bb      	ldr	r3, [r7, #24]
 81013aa:	6013      	str	r3, [r2, #0]
	}
	return u;
 81013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81013ae:	ee07 3a90 	vmov	s15, r3

}
 81013b2:	eeb0 0a67 	vmov.f32	s0, s15
 81013b6:	372c      	adds	r7, #44	; 0x2c
 81013b8:	46bd      	mov	sp, r7
 81013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013be:	4770      	bx	lr
 81013c0:	10000218 	.word	0x10000218
 81013c4:	1000021c 	.word	0x1000021c

081013c8 <init_tune_PID_Yaw>:
#include "PID_Yaw.h"

void init_tune_PID_Yaw(PID_Yaw* p,float Tc,float Kp,float Ki,float Kd){
 81013c8:	b480      	push	{r7}
 81013ca:	b087      	sub	sp, #28
 81013cc:	af00      	add	r7, sp, #0
 81013ce:	6178      	str	r0, [r7, #20]
 81013d0:	ed87 0a04 	vstr	s0, [r7, #16]
 81013d4:	edc7 0a03 	vstr	s1, [r7, #12]
 81013d8:	ed87 1a02 	vstr	s2, [r7, #8]
 81013dc:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Tc=Tc;
 81013e0:	697b      	ldr	r3, [r7, #20]
 81013e2:	693a      	ldr	r2, [r7, #16]
 81013e4:	60da      	str	r2, [r3, #12]
	p->u_max= 17.8418; // coppia massima
 81013e6:	697b      	ldr	r3, [r7, #20]
 81013e8:	4a09      	ldr	r2, [pc, #36]	; (8101410 <init_tune_PID_Yaw+0x48>)
 81013ea:	611a      	str	r2, [r3, #16]
	p->u_min= -17.8418;  // coppia minima
 81013ec:	697b      	ldr	r3, [r7, #20]
 81013ee:	4a09      	ldr	r2, [pc, #36]	; (8101414 <init_tune_PID_Yaw+0x4c>)
 81013f0:	615a      	str	r2, [r3, #20]

	p->Kp=Kp;
 81013f2:	697b      	ldr	r3, [r7, #20]
 81013f4:	68fa      	ldr	r2, [r7, #12]
 81013f6:	601a      	str	r2, [r3, #0]
	p->Ki=Ki;
 81013f8:	697b      	ldr	r3, [r7, #20]
 81013fa:	68ba      	ldr	r2, [r7, #8]
 81013fc:	605a      	str	r2, [r3, #4]
	p->Kd=Kd;
 81013fe:	697b      	ldr	r3, [r7, #20]
 8101400:	687a      	ldr	r2, [r7, #4]
 8101402:	609a      	str	r2, [r3, #8]
}
 8101404:	bf00      	nop
 8101406:	371c      	adds	r7, #28
 8101408:	46bd      	mov	sp, r7
 810140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810140e:	4770      	bx	lr
 8101410:	418ebc02 	.word	0x418ebc02
 8101414:	c18ebc02 	.word	0xc18ebc02

08101418 <CtoD_M1>:
#include "PWM_Motor1.h"
float CtoD_M1(float u){
 8101418:	b580      	push	{r7, lr}
 810141a:	b084      	sub	sp, #16
 810141c:	af00      	add	r7, sp, #0
 810141e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0)
 8101422:	edd7 7a01 	vldr	s15, [r7, #4]
 8101426:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810142e:	d805      	bhi.n	810143c <CtoD_M1+0x24>
		u = -u;
 8101430:	edd7 7a01 	vldr	s15, [r7, #4]
 8101434:	eef1 7a67 	vneg.f32	s15, s15
 8101438:	edc7 7a01 	vstr	s15, [r7, #4]
	float duty = 100*u/7.68;
 810143c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101440:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 81014b0 <CtoD_M1+0x98>
 8101444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101448:	ee17 0a90 	vmov	r0, s15
 810144c:	f7ff f904 	bl	8100658 <__aeabi_f2d>
 8101450:	a315      	add	r3, pc, #84	; (adr r3, 81014a8 <CtoD_M1+0x90>)
 8101452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101456:	f7ff fa81 	bl	810095c <__aeabi_ddiv>
 810145a:	4602      	mov	r2, r0
 810145c:	460b      	mov	r3, r1
 810145e:	4610      	mov	r0, r2
 8101460:	4619      	mov	r1, r3
 8101462:	f7ff fc49 	bl	8100cf8 <__aeabi_d2f>
 8101466:	4603      	mov	r3, r0
 8101468:	60fb      	str	r3, [r7, #12]
	if(duty > 100){
 810146a:	edd7 7a03 	vldr	s15, [r7, #12]
 810146e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 81014b0 <CtoD_M1+0x98>
 8101472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810147a:	dd02      	ble.n	8101482 <CtoD_M1+0x6a>
			duty = 100;
 810147c:	4b0d      	ldr	r3, [pc, #52]	; (81014b4 <CtoD_M1+0x9c>)
 810147e:	60fb      	str	r3, [r7, #12]
 8101480:	e009      	b.n	8101496 <CtoD_M1+0x7e>
	}else if(duty < 0){
 8101482:	edd7 7a03 	vldr	s15, [r7, #12]
 8101486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810148e:	d502      	bpl.n	8101496 <CtoD_M1+0x7e>
		duty = 0;
 8101490:	f04f 0300 	mov.w	r3, #0
 8101494:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 8101496:	68fb      	ldr	r3, [r7, #12]
 8101498:	ee07 3a90 	vmov	s15, r3

}
 810149c:	eeb0 0a67 	vmov.f32	s0, s15
 81014a0:	3710      	adds	r7, #16
 81014a2:	46bd      	mov	sp, r7
 81014a4:	bd80      	pop	{r7, pc}
 81014a6:	bf00      	nop
 81014a8:	eb851eb8 	.word	0xeb851eb8
 81014ac:	401eb851 	.word	0x401eb851
 81014b0:	42c80000 	.word	0x42c80000
 81014b4:	42c80000 	.word	0x42c80000

081014b8 <ReftoDir_M1>:
	}
	return duty;
}


uint8_t ReftoDir_M1(float u){
 81014b8:	b480      	push	{r7}
 81014ba:	b085      	sub	sp, #20
 81014bc:	af00      	add	r7, sp, #0
 81014be:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t dir;
	if(u >= 0){
 81014c2:	edd7 7a01 	vldr	s15, [r7, #4]
 81014c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81014ce:	db02      	blt.n	81014d6 <ReftoDir_M1+0x1e>
		dir=0;//senso orario
 81014d0:	2300      	movs	r3, #0
 81014d2:	73fb      	strb	r3, [r7, #15]
 81014d4:	e001      	b.n	81014da <ReftoDir_M1+0x22>
	}else{
		dir=1;//senso antiorario
 81014d6:	2301      	movs	r3, #1
 81014d8:	73fb      	strb	r3, [r7, #15]
	}
	return dir;
 81014da:	7bfb      	ldrb	r3, [r7, #15]

}
 81014dc:	4618      	mov	r0, r3
 81014de:	3714      	adds	r7, #20
 81014e0:	46bd      	mov	sp, r7
 81014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014e6:	4770      	bx	lr

081014e8 <set_PWM_dir_M1>:

void set_PWM_dir_M1(uint32_t duty,uint8_t dir){
 81014e8:	b580      	push	{r7, lr}
 81014ea:	b082      	sub	sp, #8
 81014ec:	af00      	add	r7, sp, #0
 81014ee:	6078      	str	r0, [r7, #4]
 81014f0:	460b      	mov	r3, r1
 81014f2:	70fb      	strb	r3, [r7, #3]
	TIM1->CCR1 = ((float)duty/100)*TIM1->ARR;
 81014f4:	687b      	ldr	r3, [r7, #4]
 81014f6:	ee07 3a90 	vmov	s15, r3
 81014fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014fe:	eddf 6a12 	vldr	s13, [pc, #72]	; 8101548 <set_PWM_dir_M1+0x60>
 8101502:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101506:	4b11      	ldr	r3, [pc, #68]	; (810154c <set_PWM_dir_M1+0x64>)
 8101508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810150a:	ee07 3a90 	vmov	s15, r3
 810150e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101516:	4b0d      	ldr	r3, [pc, #52]	; (810154c <set_PWM_dir_M1+0x64>)
 8101518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810151c:	ee17 2a90 	vmov	r2, s15
 8101520:	635a      	str	r2, [r3, #52]	; 0x34


	if(dir!=0){
 8101522:	78fb      	ldrb	r3, [r7, #3]
 8101524:	2b00      	cmp	r3, #0
 8101526:	d005      	beq.n	8101534 <set_PWM_dir_M1+0x4c>
		HAL_GPIO_WritePin(GPIOA, DIR1_Pin,GPIO_PIN_SET);//cambia senso di rotazione
 8101528:	2201      	movs	r2, #1
 810152a:	2110      	movs	r1, #16
 810152c:	4808      	ldr	r0, [pc, #32]	; (8101550 <set_PWM_dir_M1+0x68>)
 810152e:	f003 f95d 	bl	81047ec <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOA, DIR1_Pin,GPIO_PIN_RESET);
	}
}
 8101532:	e004      	b.n	810153e <set_PWM_dir_M1+0x56>
		HAL_GPIO_WritePin(GPIOA, DIR1_Pin,GPIO_PIN_RESET);
 8101534:	2200      	movs	r2, #0
 8101536:	2110      	movs	r1, #16
 8101538:	4805      	ldr	r0, [pc, #20]	; (8101550 <set_PWM_dir_M1+0x68>)
 810153a:	f003 f957 	bl	81047ec <HAL_GPIO_WritePin>
}
 810153e:	bf00      	nop
 8101540:	3708      	adds	r7, #8
 8101542:	46bd      	mov	sp, r7
 8101544:	bd80      	pop	{r7, pc}
 8101546:	bf00      	nop
 8101548:	42c80000 	.word	0x42c80000
 810154c:	40010000 	.word	0x40010000
 8101550:	58020000 	.word	0x58020000
 8101554:	00000000 	.word	0x00000000

08101558 <CtoD_M2>:
#include "PWM_Motor2.h"
float CtoD_M2(float u){
 8101558:	b580      	push	{r7, lr}
 810155a:	b084      	sub	sp, #16
 810155c:	af00      	add	r7, sp, #0
 810155e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0)
 8101562:	edd7 7a01 	vldr	s15, [r7, #4]
 8101566:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810156e:	d805      	bhi.n	810157c <CtoD_M2+0x24>
		u = -u;
 8101570:	edd7 7a01 	vldr	s15, [r7, #4]
 8101574:	eef1 7a67 	vneg.f32	s15, s15
 8101578:	edc7 7a01 	vstr	s15, [r7, #4]
	float duty = 100*u/7.68;
 810157c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101580:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 81015f0 <CtoD_M2+0x98>
 8101584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101588:	ee17 0a90 	vmov	r0, s15
 810158c:	f7ff f864 	bl	8100658 <__aeabi_f2d>
 8101590:	a315      	add	r3, pc, #84	; (adr r3, 81015e8 <CtoD_M2+0x90>)
 8101592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101596:	f7ff f9e1 	bl	810095c <__aeabi_ddiv>
 810159a:	4602      	mov	r2, r0
 810159c:	460b      	mov	r3, r1
 810159e:	4610      	mov	r0, r2
 81015a0:	4619      	mov	r1, r3
 81015a2:	f7ff fba9 	bl	8100cf8 <__aeabi_d2f>
 81015a6:	4603      	mov	r3, r0
 81015a8:	60fb      	str	r3, [r7, #12]
	if(duty > 100){
 81015aa:	edd7 7a03 	vldr	s15, [r7, #12]
 81015ae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 81015f0 <CtoD_M2+0x98>
 81015b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 81015b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81015ba:	dd02      	ble.n	81015c2 <CtoD_M2+0x6a>
			duty = 100;
 81015bc:	4b0d      	ldr	r3, [pc, #52]	; (81015f4 <CtoD_M2+0x9c>)
 81015be:	60fb      	str	r3, [r7, #12]
 81015c0:	e009      	b.n	81015d6 <CtoD_M2+0x7e>
	}else if(duty < 0){
 81015c2:	edd7 7a03 	vldr	s15, [r7, #12]
 81015c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81015ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81015ce:	d502      	bpl.n	81015d6 <CtoD_M2+0x7e>
		duty = 0;
 81015d0:	f04f 0300 	mov.w	r3, #0
 81015d4:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 81015d6:	68fb      	ldr	r3, [r7, #12]
 81015d8:	ee07 3a90 	vmov	s15, r3

}
 81015dc:	eeb0 0a67 	vmov.f32	s0, s15
 81015e0:	3710      	adds	r7, #16
 81015e2:	46bd      	mov	sp, r7
 81015e4:	bd80      	pop	{r7, pc}
 81015e6:	bf00      	nop
 81015e8:	eb851eb8 	.word	0xeb851eb8
 81015ec:	401eb851 	.word	0x401eb851
 81015f0:	42c80000 	.word	0x42c80000
 81015f4:	42c80000 	.word	0x42c80000

081015f8 <ReftoDir_M2>:
	}
	return duty;
}


uint8_t ReftoDir_M2(float u){
 81015f8:	b480      	push	{r7}
 81015fa:	b085      	sub	sp, #20
 81015fc:	af00      	add	r7, sp, #0
 81015fe:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t dir;
	if(u<0){
 8101602:	edd7 7a01 	vldr	s15, [r7, #4]
 8101606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810160e:	d502      	bpl.n	8101616 <ReftoDir_M2+0x1e>
		dir=0;//senso orario
 8101610:	2300      	movs	r3, #0
 8101612:	73fb      	strb	r3, [r7, #15]
 8101614:	e001      	b.n	810161a <ReftoDir_M2+0x22>
	}else{
		dir=1;//senso antiorario
 8101616:	2301      	movs	r3, #1
 8101618:	73fb      	strb	r3, [r7, #15]
	}
	return dir;
 810161a:	7bfb      	ldrb	r3, [r7, #15]

}
 810161c:	4618      	mov	r0, r3
 810161e:	3714      	adds	r7, #20
 8101620:	46bd      	mov	sp, r7
 8101622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101626:	4770      	bx	lr

08101628 <set_PWM_dir_M2>:

void set_PWM_dir_M2(uint32_t duty,uint8_t dir){
 8101628:	b580      	push	{r7, lr}
 810162a:	b082      	sub	sp, #8
 810162c:	af00      	add	r7, sp, #0
 810162e:	6078      	str	r0, [r7, #4]
 8101630:	460b      	mov	r3, r1
 8101632:	70fb      	strb	r3, [r7, #3]
	TIM1->CCR2 = ((float)duty/100)*TIM1->ARR;
 8101634:	687b      	ldr	r3, [r7, #4]
 8101636:	ee07 3a90 	vmov	s15, r3
 810163a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810163e:	eddf 6a13 	vldr	s13, [pc, #76]	; 810168c <set_PWM_dir_M2+0x64>
 8101642:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101646:	4b12      	ldr	r3, [pc, #72]	; (8101690 <set_PWM_dir_M2+0x68>)
 8101648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810164a:	ee07 3a90 	vmov	s15, r3
 810164e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101656:	4b0e      	ldr	r3, [pc, #56]	; (8101690 <set_PWM_dir_M2+0x68>)
 8101658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810165c:	ee17 2a90 	vmov	r2, s15
 8101660:	639a      	str	r2, [r3, #56]	; 0x38


	if(dir!=0){
 8101662:	78fb      	ldrb	r3, [r7, #3]
 8101664:	2b00      	cmp	r3, #0
 8101666:	d006      	beq.n	8101676 <set_PWM_dir_M2+0x4e>
		HAL_GPIO_WritePin(GPIOE, DIR2_Pin,GPIO_PIN_SET);//cambia senso di rotazione
 8101668:	2201      	movs	r2, #1
 810166a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 810166e:	4809      	ldr	r0, [pc, #36]	; (8101694 <set_PWM_dir_M2+0x6c>)
 8101670:	f003 f8bc 	bl	81047ec <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, DIR2_Pin,GPIO_PIN_RESET);
	}


}
 8101674:	e005      	b.n	8101682 <set_PWM_dir_M2+0x5a>
		HAL_GPIO_WritePin(GPIOE, DIR2_Pin,GPIO_PIN_RESET);
 8101676:	2200      	movs	r2, #0
 8101678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 810167c:	4805      	ldr	r0, [pc, #20]	; (8101694 <set_PWM_dir_M2+0x6c>)
 810167e:	f003 f8b5 	bl	81047ec <HAL_GPIO_WritePin>
}
 8101682:	bf00      	nop
 8101684:	3708      	adds	r7, #8
 8101686:	46bd      	mov	sp, r7
 8101688:	bd80      	pop	{r7, pc}
 810168a:	bf00      	nop
 810168c:	42c80000 	.word	0x42c80000
 8101690:	40010000 	.word	0x40010000
 8101694:	58021000 	.word	0x58021000

08101698 <CtoD_M3>:
#include "PWM_Motor3.h"
float CtoD_M3(float u){
 8101698:	b580      	push	{r7, lr}
 810169a:	b084      	sub	sp, #16
 810169c:	af00      	add	r7, sp, #0
 810169e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0)
 81016a2:	edd7 7a01 	vldr	s15, [r7, #4]
 81016a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81016ae:	d805      	bhi.n	81016bc <CtoD_M3+0x24>
		u = -u;
 81016b0:	edd7 7a01 	vldr	s15, [r7, #4]
 81016b4:	eef1 7a67 	vneg.f32	s15, s15
 81016b8:	edc7 7a01 	vstr	s15, [r7, #4]
	float duty = 100*u/7.68;
 81016bc:	edd7 7a01 	vldr	s15, [r7, #4]
 81016c0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8101730 <CtoD_M3+0x98>
 81016c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 81016c8:	ee17 0a90 	vmov	r0, s15
 81016cc:	f7fe ffc4 	bl	8100658 <__aeabi_f2d>
 81016d0:	a315      	add	r3, pc, #84	; (adr r3, 8101728 <CtoD_M3+0x90>)
 81016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016d6:	f7ff f941 	bl	810095c <__aeabi_ddiv>
 81016da:	4602      	mov	r2, r0
 81016dc:	460b      	mov	r3, r1
 81016de:	4610      	mov	r0, r2
 81016e0:	4619      	mov	r1, r3
 81016e2:	f7ff fb09 	bl	8100cf8 <__aeabi_d2f>
 81016e6:	4603      	mov	r3, r0
 81016e8:	60fb      	str	r3, [r7, #12]
	if(duty > 100){
 81016ea:	edd7 7a03 	vldr	s15, [r7, #12]
 81016ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8101730 <CtoD_M3+0x98>
 81016f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 81016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81016fa:	dd02      	ble.n	8101702 <CtoD_M3+0x6a>
			duty = 100;
 81016fc:	4b0d      	ldr	r3, [pc, #52]	; (8101734 <CtoD_M3+0x9c>)
 81016fe:	60fb      	str	r3, [r7, #12]
 8101700:	e009      	b.n	8101716 <CtoD_M3+0x7e>
	}else if(duty < 0){
 8101702:	edd7 7a03 	vldr	s15, [r7, #12]
 8101706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810170e:	d502      	bpl.n	8101716 <CtoD_M3+0x7e>
		duty = 0;
 8101710:	f04f 0300 	mov.w	r3, #0
 8101714:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 8101716:	68fb      	ldr	r3, [r7, #12]
 8101718:	ee07 3a90 	vmov	s15, r3

}
 810171c:	eeb0 0a67 	vmov.f32	s0, s15
 8101720:	3710      	adds	r7, #16
 8101722:	46bd      	mov	sp, r7
 8101724:	bd80      	pop	{r7, pc}
 8101726:	bf00      	nop
 8101728:	eb851eb8 	.word	0xeb851eb8
 810172c:	401eb851 	.word	0x401eb851
 8101730:	42c80000 	.word	0x42c80000
 8101734:	42c80000 	.word	0x42c80000

08101738 <ReftoDir_M3>:
	}
	return duty;
}


uint8_t ReftoDir_M3(float u){
 8101738:	b480      	push	{r7}
 810173a:	b085      	sub	sp, #20
 810173c:	af00      	add	r7, sp, #0
 810173e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t dir;
	if(u<0){
 8101742:	edd7 7a01 	vldr	s15, [r7, #4]
 8101746:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810174e:	d502      	bpl.n	8101756 <ReftoDir_M3+0x1e>
		dir=0;//senso orario
 8101750:	2300      	movs	r3, #0
 8101752:	73fb      	strb	r3, [r7, #15]
 8101754:	e001      	b.n	810175a <ReftoDir_M3+0x22>
	}else{
		dir=1;//senso antiorario
 8101756:	2301      	movs	r3, #1
 8101758:	73fb      	strb	r3, [r7, #15]
	}
	return dir;
 810175a:	7bfb      	ldrb	r3, [r7, #15]

}
 810175c:	4618      	mov	r0, r3
 810175e:	3714      	adds	r7, #20
 8101760:	46bd      	mov	sp, r7
 8101762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101766:	4770      	bx	lr

08101768 <set_PWM_dir_M3>:

void set_PWM_dir_M3(uint32_t duty,uint8_t dir){
 8101768:	b580      	push	{r7, lr}
 810176a:	b082      	sub	sp, #8
 810176c:	af00      	add	r7, sp, #0
 810176e:	6078      	str	r0, [r7, #4]
 8101770:	460b      	mov	r3, r1
 8101772:	70fb      	strb	r3, [r7, #3]
	TIM1->CCR3 = ((float)duty/100)*TIM1->ARR;
 8101774:	687b      	ldr	r3, [r7, #4]
 8101776:	ee07 3a90 	vmov	s15, r3
 810177a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810177e:	eddf 6a13 	vldr	s13, [pc, #76]	; 81017cc <set_PWM_dir_M3+0x64>
 8101782:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101786:	4b12      	ldr	r3, [pc, #72]	; (81017d0 <set_PWM_dir_M3+0x68>)
 8101788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810178a:	ee07 3a90 	vmov	s15, r3
 810178e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101796:	4b0e      	ldr	r3, [pc, #56]	; (81017d0 <set_PWM_dir_M3+0x68>)
 8101798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810179c:	ee17 2a90 	vmov	r2, s15
 81017a0:	63da      	str	r2, [r3, #60]	; 0x3c
	//printf("%d \r\n", dir);

	if(dir!=0){
 81017a2:	78fb      	ldrb	r3, [r7, #3]
 81017a4:	2b00      	cmp	r3, #0
 81017a6:	d006      	beq.n	81017b6 <set_PWM_dir_M3+0x4e>
		HAL_GPIO_WritePin(GPIOE, DIR3_Pin,GPIO_PIN_SET);//cambia senso di rotazione
 81017a8:	2201      	movs	r2, #1
 81017aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 81017ae:	4809      	ldr	r0, [pc, #36]	; (81017d4 <set_PWM_dir_M3+0x6c>)
 81017b0:	f003 f81c 	bl	81047ec <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, DIR3_Pin,GPIO_PIN_RESET);
	}
}
 81017b4:	e005      	b.n	81017c2 <set_PWM_dir_M3+0x5a>
		HAL_GPIO_WritePin(GPIOE, DIR3_Pin,GPIO_PIN_RESET);
 81017b6:	2200      	movs	r2, #0
 81017b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 81017bc:	4805      	ldr	r0, [pc, #20]	; (81017d4 <set_PWM_dir_M3+0x6c>)
 81017be:	f003 f815 	bl	81047ec <HAL_GPIO_WritePin>
}
 81017c2:	bf00      	nop
 81017c4:	3708      	adds	r7, #8
 81017c6:	46bd      	mov	sp, r7
 81017c8:	bd80      	pop	{r7, pc}
 81017ca:	bf00      	nop
 81017cc:	42c80000 	.word	0x42c80000
 81017d0:	40010000 	.word	0x40010000
 81017d4:	58021000 	.word	0x58021000

081017d8 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 81017d8:	b580      	push	{r7, lr}
 81017da:	b082      	sub	sp, #8
 81017dc:	af00      	add	r7, sp, #0
 81017de:	4603      	mov	r3, r0
 81017e0:	71fb      	strb	r3, [r7, #7]
 81017e2:	79fb      	ldrb	r3, [r7, #7]
 81017e4:	4619      	mov	r1, r3
 81017e6:	2007      	movs	r0, #7
 81017e8:	f000 fa02 	bl	8101bf0 <bno055_writeData>
 81017ec:	bf00      	nop
 81017ee:	3708      	adds	r7, #8
 81017f0:	46bd      	mov	sp, r7
 81017f2:	bd80      	pop	{r7, pc}

081017f4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 81017f4:	b580      	push	{r7, lr}
 81017f6:	b082      	sub	sp, #8
 81017f8:	af00      	add	r7, sp, #0
 81017fa:	4603      	mov	r3, r0
 81017fc:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 81017fe:	79fb      	ldrb	r3, [r7, #7]
 8101800:	4619      	mov	r1, r3
 8101802:	203d      	movs	r0, #61	; 0x3d
 8101804:	f000 f9f4 	bl	8101bf0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8101808:	79fb      	ldrb	r3, [r7, #7]
 810180a:	2b00      	cmp	r3, #0
 810180c:	d103      	bne.n	8101816 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 810180e:	2013      	movs	r0, #19
 8101810:	f000 f9e2 	bl	8101bd8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8101814:	e002      	b.n	810181c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8101816:	2007      	movs	r0, #7
 8101818:	f000 f9de 	bl	8101bd8 <bno055_delay>
}
 810181c:	bf00      	nop
 810181e:	3708      	adds	r7, #8
 8101820:	46bd      	mov	sp, r7
 8101822:	bd80      	pop	{r7, pc}

08101824 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8101824:	b580      	push	{r7, lr}
 8101826:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8101828:	2000      	movs	r0, #0
 810182a:	f7ff ffe3 	bl	81017f4 <bno055_setOperationMode>
}
 810182e:	bf00      	nop
 8101830:	bd80      	pop	{r7, pc}

08101832 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8101832:	b580      	push	{r7, lr}
 8101834:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8101836:	200c      	movs	r0, #12
 8101838:	f7ff ffdc 	bl	81017f4 <bno055_setOperationMode>
}
 810183c:	bf00      	nop
 810183e:	bd80      	pop	{r7, pc}

08101840 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8101840:	b580      	push	{r7, lr}
 8101842:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8101844:	2120      	movs	r1, #32
 8101846:	203f      	movs	r0, #63	; 0x3f
 8101848:	f000 f9d2 	bl	8101bf0 <bno055_writeData>
  bno055_delay(700);
 810184c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8101850:	f000 f9c2 	bl	8101bd8 <bno055_delay>
}
 8101854:	bf00      	nop
 8101856:	bd80      	pop	{r7, pc}

08101858 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8101858:	b580      	push	{r7, lr}
 810185a:	b082      	sub	sp, #8
 810185c:	af00      	add	r7, sp, #0
  bno055_reset();
 810185e:	f7ff ffef 	bl	8101840 <bno055_reset>

  uint8_t id = 0;
 8101862:	2300      	movs	r3, #0
 8101864:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8101866:	1dfb      	adds	r3, r7, #7
 8101868:	2201      	movs	r2, #1
 810186a:	4619      	mov	r1, r3
 810186c:	2000      	movs	r0, #0
 810186e:	f000 faab 	bl	8101dc8 <bno055_readData>
  if (id != BNO055_ID) {
 8101872:	79fb      	ldrb	r3, [r7, #7]
 8101874:	2ba0      	cmp	r3, #160	; 0xa0
 8101876:	d004      	beq.n	8101882 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8101878:	79fb      	ldrb	r3, [r7, #7]
 810187a:	4619      	mov	r1, r3
 810187c:	4809      	ldr	r0, [pc, #36]	; (81018a4 <bno055_setup+0x4c>)
 810187e:	f00a fa9d 	bl	810bdbc <iprintf>
  }
  bno055_setPage(0);
 8101882:	2000      	movs	r0, #0
 8101884:	f7ff ffa8 	bl	81017d8 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8101888:	2100      	movs	r1, #0
 810188a:	203f      	movs	r0, #63	; 0x3f
 810188c:	f000 f9b0 	bl	8101bf0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8101890:	f7ff ffc8 	bl	8101824 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8101894:	200a      	movs	r0, #10
 8101896:	f000 f99f 	bl	8101bd8 <bno055_delay>
}
 810189a:	bf00      	nop
 810189c:	3708      	adds	r7, #8
 810189e:	46bd      	mov	sp, r7
 81018a0:	bd80      	pop	{r7, pc}
 81018a2:	bf00      	nop
 81018a4:	0810f8f0 	.word	0x0810f8f0

081018a8 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 81018a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81018ac:	b09e      	sub	sp, #120	; 0x78
 81018ae:	af00      	add	r7, sp, #0
 81018b0:	4603      	mov	r3, r0
 81018b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 81018b6:	2000      	movs	r0, #0
 81018b8:	f7ff ff8e 	bl	81017d8 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 81018bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81018c0:	2b20      	cmp	r3, #32
 81018c2:	d108      	bne.n	81018d6 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 81018c4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 81018c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81018cc:	2208      	movs	r2, #8
 81018ce:	4618      	mov	r0, r3
 81018d0:	f000 fa7a 	bl	8101dc8 <bno055_readData>
 81018d4:	e007      	b.n	81018e6 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 81018d6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 81018da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81018de:	2206      	movs	r2, #6
 81018e0:	4618      	mov	r0, r3
 81018e2:	f000 fa71 	bl	8101dc8 <bno055_readData>

  double scale = 1;
 81018e6:	f04f 0200 	mov.w	r2, #0
 81018ea:	4b8b      	ldr	r3, [pc, #556]	; (8101b18 <bno055_getVector+0x270>)
 81018ec:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 81018f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81018f4:	2b0e      	cmp	r3, #14
 81018f6:	d109      	bne.n	810190c <bno055_getVector+0x64>
    scale = magScale;
 81018f8:	4b88      	ldr	r3, [pc, #544]	; (8101b1c <bno055_getVector+0x274>)
 81018fa:	881b      	ldrh	r3, [r3, #0]
 81018fc:	4618      	mov	r0, r3
 81018fe:	f7fe fe89 	bl	8100614 <__aeabi_ui2d>
 8101902:	4602      	mov	r2, r0
 8101904:	460b      	mov	r3, r1
 8101906:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810190a:	e03e      	b.n	810198a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 810190c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101910:	2b08      	cmp	r3, #8
 8101912:	d007      	beq.n	8101924 <bno055_getVector+0x7c>
 8101914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101918:	2b28      	cmp	r3, #40	; 0x28
 810191a:	d003      	beq.n	8101924 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 810191c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101920:	2b2e      	cmp	r3, #46	; 0x2e
 8101922:	d109      	bne.n	8101938 <bno055_getVector+0x90>
    scale = accelScale;
 8101924:	4b7e      	ldr	r3, [pc, #504]	; (8101b20 <bno055_getVector+0x278>)
 8101926:	881b      	ldrh	r3, [r3, #0]
 8101928:	4618      	mov	r0, r3
 810192a:	f7fe fe73 	bl	8100614 <__aeabi_ui2d>
 810192e:	4602      	mov	r2, r0
 8101930:	460b      	mov	r3, r1
 8101932:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101936:	e028      	b.n	810198a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8101938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810193c:	2b14      	cmp	r3, #20
 810193e:	d109      	bne.n	8101954 <bno055_getVector+0xac>
    scale = angularRateScale;
 8101940:	4b78      	ldr	r3, [pc, #480]	; (8101b24 <bno055_getVector+0x27c>)
 8101942:	881b      	ldrh	r3, [r3, #0]
 8101944:	4618      	mov	r0, r3
 8101946:	f7fe fe65 	bl	8100614 <__aeabi_ui2d>
 810194a:	4602      	mov	r2, r0
 810194c:	460b      	mov	r3, r1
 810194e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101952:	e01a      	b.n	810198a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8101954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101958:	2b1a      	cmp	r3, #26
 810195a:	d109      	bne.n	8101970 <bno055_getVector+0xc8>
    scale = eulerScale;
 810195c:	4b72      	ldr	r3, [pc, #456]	; (8101b28 <bno055_getVector+0x280>)
 810195e:	881b      	ldrh	r3, [r3, #0]
 8101960:	4618      	mov	r0, r3
 8101962:	f7fe fe57 	bl	8100614 <__aeabi_ui2d>
 8101966:	4602      	mov	r2, r0
 8101968:	460b      	mov	r3, r1
 810196a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810196e:	e00c      	b.n	810198a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8101970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101974:	2b20      	cmp	r3, #32
 8101976:	d108      	bne.n	810198a <bno055_getVector+0xe2>
    scale = quaScale;
 8101978:	4b6c      	ldr	r3, [pc, #432]	; (8101b2c <bno055_getVector+0x284>)
 810197a:	881b      	ldrh	r3, [r3, #0]
 810197c:	4618      	mov	r0, r3
 810197e:	f7fe fe49 	bl	8100614 <__aeabi_ui2d>
 8101982:	4602      	mov	r2, r0
 8101984:	460b      	mov	r3, r1
 8101986:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810198a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810198e:	2220      	movs	r2, #32
 8101990:	2100      	movs	r1, #0
 8101992:	4618      	mov	r0, r3
 8101994:	f009 fab0 	bl	810aef8 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8101998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810199c:	2b20      	cmp	r3, #32
 810199e:	d150      	bne.n	8101a42 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 81019a0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 81019a4:	021b      	lsls	r3, r3, #8
 81019a6:	b21a      	sxth	r2, r3
 81019a8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 81019ac:	b21b      	sxth	r3, r3
 81019ae:	4313      	orrs	r3, r2
 81019b0:	b21b      	sxth	r3, r3
 81019b2:	4618      	mov	r0, r3
 81019b4:	f7fe fe3e 	bl	8100634 <__aeabi_i2d>
 81019b8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81019bc:	f7fe ffce 	bl	810095c <__aeabi_ddiv>
 81019c0:	4602      	mov	r2, r0
 81019c2:	460b      	mov	r3, r1
 81019c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 81019c8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 81019cc:	021b      	lsls	r3, r3, #8
 81019ce:	b21a      	sxth	r2, r3
 81019d0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 81019d4:	b21b      	sxth	r3, r3
 81019d6:	4313      	orrs	r3, r2
 81019d8:	b21b      	sxth	r3, r3
 81019da:	4618      	mov	r0, r3
 81019dc:	f7fe fe2a 	bl	8100634 <__aeabi_i2d>
 81019e0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81019e4:	f7fe ffba 	bl	810095c <__aeabi_ddiv>
 81019e8:	4602      	mov	r2, r0
 81019ea:	460b      	mov	r3, r1
 81019ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81019f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 81019f4:	021b      	lsls	r3, r3, #8
 81019f6:	b21a      	sxth	r2, r3
 81019f8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 81019fc:	b21b      	sxth	r3, r3
 81019fe:	4313      	orrs	r3, r2
 8101a00:	b21b      	sxth	r3, r3
 8101a02:	4618      	mov	r0, r3
 8101a04:	f7fe fe16 	bl	8100634 <__aeabi_i2d>
 8101a08:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101a0c:	f7fe ffa6 	bl	810095c <__aeabi_ddiv>
 8101a10:	4602      	mov	r2, r0
 8101a12:	460b      	mov	r3, r1
 8101a14:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8101a18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8101a1c:	021b      	lsls	r3, r3, #8
 8101a1e:	b21a      	sxth	r2, r3
 8101a20:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8101a24:	b21b      	sxth	r3, r3
 8101a26:	4313      	orrs	r3, r2
 8101a28:	b21b      	sxth	r3, r3
 8101a2a:	4618      	mov	r0, r3
 8101a2c:	f7fe fe02 	bl	8100634 <__aeabi_i2d>
 8101a30:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101a34:	f7fe ff92 	bl	810095c <__aeabi_ddiv>
 8101a38:	4602      	mov	r2, r0
 8101a3a:	460b      	mov	r3, r1
 8101a3c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8101a40:	e03b      	b.n	8101aba <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101a42:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8101a46:	021b      	lsls	r3, r3, #8
 8101a48:	b21a      	sxth	r2, r3
 8101a4a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8101a4e:	b21b      	sxth	r3, r3
 8101a50:	4313      	orrs	r3, r2
 8101a52:	b21b      	sxth	r3, r3
 8101a54:	4618      	mov	r0, r3
 8101a56:	f7fe fded 	bl	8100634 <__aeabi_i2d>
 8101a5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101a5e:	f7fe ff7d 	bl	810095c <__aeabi_ddiv>
 8101a62:	4602      	mov	r2, r0
 8101a64:	460b      	mov	r3, r1
 8101a66:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8101a6a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8101a6e:	021b      	lsls	r3, r3, #8
 8101a70:	b21a      	sxth	r2, r3
 8101a72:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8101a76:	b21b      	sxth	r3, r3
 8101a78:	4313      	orrs	r3, r2
 8101a7a:	b21b      	sxth	r3, r3
 8101a7c:	4618      	mov	r0, r3
 8101a7e:	f7fe fdd9 	bl	8100634 <__aeabi_i2d>
 8101a82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101a86:	f7fe ff69 	bl	810095c <__aeabi_ddiv>
 8101a8a:	4602      	mov	r2, r0
 8101a8c:	460b      	mov	r3, r1
 8101a8e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101a92:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8101a96:	021b      	lsls	r3, r3, #8
 8101a98:	b21a      	sxth	r2, r3
 8101a9a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8101a9e:	b21b      	sxth	r3, r3
 8101aa0:	4313      	orrs	r3, r2
 8101aa2:	b21b      	sxth	r3, r3
 8101aa4:	4618      	mov	r0, r3
 8101aa6:	f7fe fdc5 	bl	8100634 <__aeabi_i2d>
 8101aaa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101aae:	f7fe ff55 	bl	810095c <__aeabi_ddiv>
 8101ab2:	4602      	mov	r2, r0
 8101ab4:	460b      	mov	r3, r1
 8101ab6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8101aba:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8101abe:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8101ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101ac6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8101aca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101ace:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8101ad2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8101ad6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8101ada:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8101ade:	ec49 8b14 	vmov	d4, r8, r9
 8101ae2:	ec45 4b15 	vmov	d5, r4, r5
 8101ae6:	ec41 0b16 	vmov	d6, r0, r1
 8101aea:	ec43 2b17 	vmov	d7, r2, r3
}
 8101aee:	eeb0 0a44 	vmov.f32	s0, s8
 8101af2:	eef0 0a64 	vmov.f32	s1, s9
 8101af6:	eeb0 1a45 	vmov.f32	s2, s10
 8101afa:	eef0 1a65 	vmov.f32	s3, s11
 8101afe:	eeb0 2a46 	vmov.f32	s4, s12
 8101b02:	eef0 2a66 	vmov.f32	s5, s13
 8101b06:	eeb0 3a47 	vmov.f32	s6, s14
 8101b0a:	eef0 3a67 	vmov.f32	s7, s15
 8101b0e:	3778      	adds	r7, #120	; 0x78
 8101b10:	46bd      	mov	sp, r7
 8101b12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8101b16:	bf00      	nop
 8101b18:	3ff00000 	.word	0x3ff00000
 8101b1c:	1000000e 	.word	0x1000000e
 8101b20:	10000008 	.word	0x10000008
 8101b24:	1000000a 	.word	0x1000000a
 8101b28:	1000000c 	.word	0x1000000c
 8101b2c:	10000010 	.word	0x10000010

08101b30 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8101b30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101b34:	b090      	sub	sp, #64	; 0x40
 8101b36:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8101b38:	201a      	movs	r0, #26
 8101b3a:	f7ff feb5 	bl	81018a8 <bno055_getVector>
 8101b3e:	eeb0 4a40 	vmov.f32	s8, s0
 8101b42:	eef0 4a60 	vmov.f32	s9, s1
 8101b46:	eeb0 5a41 	vmov.f32	s10, s2
 8101b4a:	eef0 5a61 	vmov.f32	s11, s3
 8101b4e:	eeb0 6a42 	vmov.f32	s12, s4
 8101b52:	eef0 6a62 	vmov.f32	s13, s5
 8101b56:	eeb0 7a43 	vmov.f32	s14, s6
 8101b5a:	eef0 7a63 	vmov.f32	s15, s7
 8101b5e:	ed87 4b08 	vstr	d4, [r7, #32]
 8101b62:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8101b66:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8101b6a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8101b6e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8101b72:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8101b76:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8101b7a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8101b7e:	ec49 8b14 	vmov	d4, r8, r9
 8101b82:	ec45 4b15 	vmov	d5, r4, r5
 8101b86:	ec41 0b16 	vmov	d6, r0, r1
 8101b8a:	ec43 2b17 	vmov	d7, r2, r3
}
 8101b8e:	eeb0 0a44 	vmov.f32	s0, s8
 8101b92:	eef0 0a64 	vmov.f32	s1, s9
 8101b96:	eeb0 1a45 	vmov.f32	s2, s10
 8101b9a:	eef0 1a65 	vmov.f32	s3, s11
 8101b9e:	eeb0 2a46 	vmov.f32	s4, s12
 8101ba2:	eef0 2a66 	vmov.f32	s5, s13
 8101ba6:	eeb0 3a47 	vmov.f32	s6, s14
 8101baa:	eef0 3a67 	vmov.f32	s7, s15
 8101bae:	3740      	adds	r7, #64	; 0x40
 8101bb0:	46bd      	mov	sp, r7
 8101bb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08101bb8 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8101bb8:	b480      	push	{r7}
 8101bba:	b083      	sub	sp, #12
 8101bbc:	af00      	add	r7, sp, #0
 8101bbe:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101bc0:	4a04      	ldr	r2, [pc, #16]	; (8101bd4 <bno055_assignI2C+0x1c>)
 8101bc2:	687b      	ldr	r3, [r7, #4]
 8101bc4:	6013      	str	r3, [r2, #0]
}
 8101bc6:	bf00      	nop
 8101bc8:	370c      	adds	r7, #12
 8101bca:	46bd      	mov	sp, r7
 8101bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bd0:	4770      	bx	lr
 8101bd2:	bf00      	nop
 8101bd4:	10000220 	.word	0x10000220

08101bd8 <bno055_delay>:

void bno055_delay(int time) {
 8101bd8:	b580      	push	{r7, lr}
 8101bda:	b082      	sub	sp, #8
 8101bdc:	af00      	add	r7, sp, #0
 8101bde:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8101be0:	687b      	ldr	r3, [r7, #4]
 8101be2:	4618      	mov	r0, r3
 8101be4:	f001 fa6c 	bl	81030c0 <HAL_Delay>
#endif
}
 8101be8:	bf00      	nop
 8101bea:	3708      	adds	r7, #8
 8101bec:	46bd      	mov	sp, r7
 8101bee:	bd80      	pop	{r7, pc}

08101bf0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8101bf0:	b580      	push	{r7, lr}
 8101bf2:	b088      	sub	sp, #32
 8101bf4:	af02      	add	r7, sp, #8
 8101bf6:	4603      	mov	r3, r0
 8101bf8:	460a      	mov	r2, r1
 8101bfa:	71fb      	strb	r3, [r7, #7]
 8101bfc:	4613      	mov	r3, r2
 8101bfe:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8101c00:	79fb      	ldrb	r3, [r7, #7]
 8101c02:	733b      	strb	r3, [r7, #12]
 8101c04:	79bb      	ldrb	r3, [r7, #6]
 8101c06:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8101c08:	4b5a      	ldr	r3, [pc, #360]	; (8101d74 <bno055_writeData+0x184>)
 8101c0a:	6818      	ldr	r0, [r3, #0]
 8101c0c:	f107 020c 	add.w	r2, r7, #12
 8101c10:	230a      	movs	r3, #10
 8101c12:	9300      	str	r3, [sp, #0]
 8101c14:	2302      	movs	r3, #2
 8101c16:	2150      	movs	r1, #80	; 0x50
 8101c18:	f002 fea4 	bl	8104964 <HAL_I2C_Master_Transmit>
 8101c1c:	4603      	mov	r3, r0
 8101c1e:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8101c20:	7dfb      	ldrb	r3, [r7, #23]
 8101c22:	2b00      	cmp	r3, #0
 8101c24:	f000 80a0 	beq.w	8101d68 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8101c28:	7dfb      	ldrb	r3, [r7, #23]
 8101c2a:	2b01      	cmp	r3, #1
 8101c2c:	d103      	bne.n	8101c36 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8101c2e:	4852      	ldr	r0, [pc, #328]	; (8101d78 <bno055_writeData+0x188>)
 8101c30:	f00a f94a 	bl	810bec8 <puts>
 8101c34:	e012      	b.n	8101c5c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8101c36:	7dfb      	ldrb	r3, [r7, #23]
 8101c38:	2b03      	cmp	r3, #3
 8101c3a:	d103      	bne.n	8101c44 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101c3c:	484f      	ldr	r0, [pc, #316]	; (8101d7c <bno055_writeData+0x18c>)
 8101c3e:	f00a f943 	bl	810bec8 <puts>
 8101c42:	e00b      	b.n	8101c5c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8101c44:	7dfb      	ldrb	r3, [r7, #23]
 8101c46:	2b02      	cmp	r3, #2
 8101c48:	d103      	bne.n	8101c52 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101c4a:	484d      	ldr	r0, [pc, #308]	; (8101d80 <bno055_writeData+0x190>)
 8101c4c:	f00a f93c 	bl	810bec8 <puts>
 8101c50:	e004      	b.n	8101c5c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8101c52:	7dfb      	ldrb	r3, [r7, #23]
 8101c54:	4619      	mov	r1, r3
 8101c56:	484b      	ldr	r0, [pc, #300]	; (8101d84 <bno055_writeData+0x194>)
 8101c58:	f00a f8b0 	bl	810bdbc <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8101c5c:	4b45      	ldr	r3, [pc, #276]	; (8101d74 <bno055_writeData+0x184>)
 8101c5e:	681b      	ldr	r3, [r3, #0]
 8101c60:	4618      	mov	r0, r3
 8101c62:	f003 f97e 	bl	8104f62 <HAL_I2C_GetError>
 8101c66:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8101c68:	693b      	ldr	r3, [r7, #16]
 8101c6a:	2b00      	cmp	r3, #0
 8101c6c:	d07e      	beq.n	8101d6c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8101c6e:	693b      	ldr	r3, [r7, #16]
 8101c70:	2b01      	cmp	r3, #1
 8101c72:	d103      	bne.n	8101c7c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8101c74:	4844      	ldr	r0, [pc, #272]	; (8101d88 <bno055_writeData+0x198>)
 8101c76:	f00a f927 	bl	810bec8 <puts>
 8101c7a:	e021      	b.n	8101cc0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8101c7c:	693b      	ldr	r3, [r7, #16]
 8101c7e:	2b02      	cmp	r3, #2
 8101c80:	d103      	bne.n	8101c8a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8101c82:	4842      	ldr	r0, [pc, #264]	; (8101d8c <bno055_writeData+0x19c>)
 8101c84:	f00a f920 	bl	810bec8 <puts>
 8101c88:	e01a      	b.n	8101cc0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8101c8a:	693b      	ldr	r3, [r7, #16]
 8101c8c:	2b04      	cmp	r3, #4
 8101c8e:	d103      	bne.n	8101c98 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8101c90:	483f      	ldr	r0, [pc, #252]	; (8101d90 <bno055_writeData+0x1a0>)
 8101c92:	f00a f919 	bl	810bec8 <puts>
 8101c96:	e013      	b.n	8101cc0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8101c98:	693b      	ldr	r3, [r7, #16]
 8101c9a:	2b08      	cmp	r3, #8
 8101c9c:	d103      	bne.n	8101ca6 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8101c9e:	483d      	ldr	r0, [pc, #244]	; (8101d94 <bno055_writeData+0x1a4>)
 8101ca0:	f00a f912 	bl	810bec8 <puts>
 8101ca4:	e00c      	b.n	8101cc0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8101ca6:	693b      	ldr	r3, [r7, #16]
 8101ca8:	2b10      	cmp	r3, #16
 8101caa:	d103      	bne.n	8101cb4 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8101cac:	483a      	ldr	r0, [pc, #232]	; (8101d98 <bno055_writeData+0x1a8>)
 8101cae:	f00a f90b 	bl	810bec8 <puts>
 8101cb2:	e005      	b.n	8101cc0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8101cb4:	693b      	ldr	r3, [r7, #16]
 8101cb6:	2b20      	cmp	r3, #32
 8101cb8:	d102      	bne.n	8101cc0 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8101cba:	4838      	ldr	r0, [pc, #224]	; (8101d9c <bno055_writeData+0x1ac>)
 8101cbc:	f00a f904 	bl	810bec8 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8101cc0:	4b2c      	ldr	r3, [pc, #176]	; (8101d74 <bno055_writeData+0x184>)
 8101cc2:	681b      	ldr	r3, [r3, #0]
 8101cc4:	4618      	mov	r0, r3
 8101cc6:	f003 f93e 	bl	8104f46 <HAL_I2C_GetState>
 8101cca:	4603      	mov	r3, r0
 8101ccc:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8101cce:	7bfb      	ldrb	r3, [r7, #15]
 8101cd0:	2b00      	cmp	r3, #0
 8101cd2:	d103      	bne.n	8101cdc <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101cd4:	4832      	ldr	r0, [pc, #200]	; (8101da0 <bno055_writeData+0x1b0>)
 8101cd6:	f00a f8f7 	bl	810bec8 <puts>
 8101cda:	e048      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8101cdc:	7bfb      	ldrb	r3, [r7, #15]
 8101cde:	2b20      	cmp	r3, #32
 8101ce0:	d103      	bne.n	8101cea <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101ce2:	482f      	ldr	r0, [pc, #188]	; (8101da0 <bno055_writeData+0x1b0>)
 8101ce4:	f00a f8f0 	bl	810bec8 <puts>
 8101ce8:	e041      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8101cea:	7bfb      	ldrb	r3, [r7, #15]
 8101cec:	2b24      	cmp	r3, #36	; 0x24
 8101cee:	d103      	bne.n	8101cf8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8101cf0:	482c      	ldr	r0, [pc, #176]	; (8101da4 <bno055_writeData+0x1b4>)
 8101cf2:	f00a f8e9 	bl	810bec8 <puts>
 8101cf6:	e03a      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8101cf8:	7bfb      	ldrb	r3, [r7, #15]
 8101cfa:	2b21      	cmp	r3, #33	; 0x21
 8101cfc:	d103      	bne.n	8101d06 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8101cfe:	482a      	ldr	r0, [pc, #168]	; (8101da8 <bno055_writeData+0x1b8>)
 8101d00:	f00a f8e2 	bl	810bec8 <puts>
 8101d04:	e033      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8101d06:	7bfb      	ldrb	r3, [r7, #15]
 8101d08:	2b22      	cmp	r3, #34	; 0x22
 8101d0a:	d103      	bne.n	8101d14 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8101d0c:	4827      	ldr	r0, [pc, #156]	; (8101dac <bno055_writeData+0x1bc>)
 8101d0e:	f00a f8db 	bl	810bec8 <puts>
 8101d12:	e02c      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8101d14:	7bfb      	ldrb	r3, [r7, #15]
 8101d16:	2b28      	cmp	r3, #40	; 0x28
 8101d18:	d103      	bne.n	8101d22 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8101d1a:	4825      	ldr	r0, [pc, #148]	; (8101db0 <bno055_writeData+0x1c0>)
 8101d1c:	f00a f8d4 	bl	810bec8 <puts>
 8101d20:	e025      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8101d22:	7bfb      	ldrb	r3, [r7, #15]
 8101d24:	2b29      	cmp	r3, #41	; 0x29
 8101d26:	d103      	bne.n	8101d30 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8101d28:	4822      	ldr	r0, [pc, #136]	; (8101db4 <bno055_writeData+0x1c4>)
 8101d2a:	f00a f8cd 	bl	810bec8 <puts>
 8101d2e:	e01e      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8101d30:	7bfb      	ldrb	r3, [r7, #15]
 8101d32:	2b2a      	cmp	r3, #42	; 0x2a
 8101d34:	d103      	bne.n	8101d3e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8101d36:	4820      	ldr	r0, [pc, #128]	; (8101db8 <bno055_writeData+0x1c8>)
 8101d38:	f00a f8c6 	bl	810bec8 <puts>
 8101d3c:	e017      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8101d3e:	7bfb      	ldrb	r3, [r7, #15]
 8101d40:	2b60      	cmp	r3, #96	; 0x60
 8101d42:	d103      	bne.n	8101d4c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8101d44:	481d      	ldr	r0, [pc, #116]	; (8101dbc <bno055_writeData+0x1cc>)
 8101d46:	f00a f8bf 	bl	810bec8 <puts>
 8101d4a:	e010      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8101d4c:	7bfb      	ldrb	r3, [r7, #15]
 8101d4e:	2ba0      	cmp	r3, #160	; 0xa0
 8101d50:	d103      	bne.n	8101d5a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8101d52:	481b      	ldr	r0, [pc, #108]	; (8101dc0 <bno055_writeData+0x1d0>)
 8101d54:	f00a f8b8 	bl	810bec8 <puts>
 8101d58:	e009      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8101d5a:	7bfb      	ldrb	r3, [r7, #15]
 8101d5c:	2be0      	cmp	r3, #224	; 0xe0
 8101d5e:	d106      	bne.n	8101d6e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8101d60:	4818      	ldr	r0, [pc, #96]	; (8101dc4 <bno055_writeData+0x1d4>)
 8101d62:	f00a f8b1 	bl	810bec8 <puts>
 8101d66:	e002      	b.n	8101d6e <bno055_writeData+0x17e>
    return;
 8101d68:	bf00      	nop
 8101d6a:	e000      	b.n	8101d6e <bno055_writeData+0x17e>
    return;
 8101d6c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8101d6e:	3718      	adds	r7, #24
 8101d70:	46bd      	mov	sp, r7
 8101d72:	bd80      	pop	{r7, pc}
 8101d74:	10000220 	.word	0x10000220
 8101d78:	0810f92c 	.word	0x0810f92c
 8101d7c:	0810f950 	.word	0x0810f950
 8101d80:	0810f978 	.word	0x0810f978
 8101d84:	0810f99c 	.word	0x0810f99c
 8101d88:	0810f9b4 	.word	0x0810f9b4
 8101d8c:	0810f9c8 	.word	0x0810f9c8
 8101d90:	0810f9dc 	.word	0x0810f9dc
 8101d94:	0810f9f0 	.word	0x0810f9f0
 8101d98:	0810fa04 	.word	0x0810fa04
 8101d9c:	0810fa18 	.word	0x0810fa18
 8101da0:	0810fa30 	.word	0x0810fa30
 8101da4:	0810fa48 	.word	0x0810fa48
 8101da8:	0810fa5c 	.word	0x0810fa5c
 8101dac:	0810fa74 	.word	0x0810fa74
 8101db0:	0810fa8c 	.word	0x0810fa8c
 8101db4:	0810faa4 	.word	0x0810faa4
 8101db8:	0810fac4 	.word	0x0810fac4
 8101dbc:	0810fae4 	.word	0x0810fae4
 8101dc0:	0810fafc 	.word	0x0810fafc
 8101dc4:	0810fb14 	.word	0x0810fb14

08101dc8 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8101dc8:	b580      	push	{r7, lr}
 8101dca:	b086      	sub	sp, #24
 8101dcc:	af02      	add	r7, sp, #8
 8101dce:	4603      	mov	r3, r0
 8101dd0:	6039      	str	r1, [r7, #0]
 8101dd2:	71fb      	strb	r3, [r7, #7]
 8101dd4:	4613      	mov	r3, r2
 8101dd6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8101dd8:	4b0d      	ldr	r3, [pc, #52]	; (8101e10 <bno055_readData+0x48>)
 8101dda:	6818      	ldr	r0, [r3, #0]
 8101ddc:	1dfa      	adds	r2, r7, #7
 8101dde:	2364      	movs	r3, #100	; 0x64
 8101de0:	9300      	str	r3, [sp, #0]
 8101de2:	2301      	movs	r3, #1
 8101de4:	2150      	movs	r1, #80	; 0x50
 8101de6:	f002 fdbd 	bl	8104964 <HAL_I2C_Master_Transmit>
 8101dea:	4603      	mov	r3, r0
 8101dec:	73fb      	strb	r3, [r7, #15]
                          100);
  ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101dee:	4b08      	ldr	r3, [pc, #32]	; (8101e10 <bno055_readData+0x48>)
 8101df0:	6818      	ldr	r0, [r3, #0]
 8101df2:	79bb      	ldrb	r3, [r7, #6]
 8101df4:	b29b      	uxth	r3, r3
 8101df6:	2264      	movs	r2, #100	; 0x64
 8101df8:	9200      	str	r2, [sp, #0]
 8101dfa:	683a      	ldr	r2, [r7, #0]
 8101dfc:	2150      	movs	r1, #80	; 0x50
 8101dfe:	f002 fea5 	bl	8104b4c <HAL_I2C_Master_Receive>
 8101e02:	4603      	mov	r3, r0
 8101e04:	73fb      	strb	r3, [r7, #15]
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8101e06:	bf00      	nop
 8101e08:	3710      	adds	r7, #16
 8101e0a:	46bd      	mov	sp, r7
 8101e0c:	bd80      	pop	{r7, pc}
 8101e0e:	bf00      	nop
 8101e10:	10000220 	.word	0x10000220

08101e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101e14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101e18:	b09e      	sub	sp, #120	; 0x78
 8101e1a:	af04      	add	r7, sp, #16

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101e1c:	4bb5      	ldr	r3, [pc, #724]	; (81020f4 <main+0x2e0>)
 8101e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e22:	4ab4      	ldr	r2, [pc, #720]	; (81020f4 <main+0x2e0>)
 8101e24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e2c:	4bb1      	ldr	r3, [pc, #708]	; (81020f4 <main+0x2e0>)
 8101e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101e36:	627b      	str	r3, [r7, #36]	; 0x24
 8101e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101e3a:	2001      	movs	r0, #1
 8101e3c:	f002 fcf0 	bl	8104820 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101e40:	f003 fc3e 	bl	81056c0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101e44:	2201      	movs	r2, #1
 8101e46:	2102      	movs	r1, #2
 8101e48:	2000      	movs	r0, #0
 8101e4a:	f003 fbbf 	bl	81055cc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101e4e:	4baa      	ldr	r3, [pc, #680]	; (81020f8 <main+0x2e4>)
 8101e50:	681b      	ldr	r3, [r3, #0]
 8101e52:	091b      	lsrs	r3, r3, #4
 8101e54:	f003 030f 	and.w	r3, r3, #15
 8101e58:	2b07      	cmp	r3, #7
 8101e5a:	d108      	bne.n	8101e6e <main+0x5a>
 8101e5c:	4ba7      	ldr	r3, [pc, #668]	; (81020fc <main+0x2e8>)
 8101e5e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101e62:	4aa6      	ldr	r2, [pc, #664]	; (81020fc <main+0x2e8>)
 8101e64:	f043 0301 	orr.w	r3, r3, #1
 8101e68:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101e6c:	e007      	b.n	8101e7e <main+0x6a>
 8101e6e:	4ba3      	ldr	r3, [pc, #652]	; (81020fc <main+0x2e8>)
 8101e70:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101e74:	4aa1      	ldr	r2, [pc, #644]	; (81020fc <main+0x2e8>)
 8101e76:	f043 0301 	orr.w	r3, r3, #1
 8101e7a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101e7e:	f001 f86b 	bl	8102f58 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101e82:	f000 fbc5 	bl	8102610 <MX_GPIO_Init>
  MX_I2C1_Init();
 8101e86:	f000 f9cf 	bl	8102228 <MX_I2C1_Init>
  MX_TIM1_Init();
 8101e8a:	f000 fa0d 	bl	81022a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8101e8e:	f000 facf 	bl	8102430 <MX_TIM2_Init>
  MX_ADC1_Init();
 8101e92:	f000 f94d 	bl	8102130 <MX_ADC1_Init>
  MX_TIM4_Init();
 8101e96:	f000 fb19 	bl	81024cc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  MX_USART3_UART_Init();
 8101e9a:	f000 fb6d 	bl	8102578 <MX_USART3_UART_Init>

  HAL_TIM_Base_Start_IT(&htim2);
 8101e9e:	4898      	ldr	r0, [pc, #608]	; (8102100 <main+0x2ec>)
 8101ea0:	f006 fb4a 	bl	8108538 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8101ea4:	2100      	movs	r1, #0
 8101ea6:	4897      	ldr	r0, [pc, #604]	; (8102104 <main+0x2f0>)
 8101ea8:	f006 fc20 	bl	81086ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8101eac:	2104      	movs	r1, #4
 8101eae:	4895      	ldr	r0, [pc, #596]	; (8102104 <main+0x2f0>)
 8101eb0:	f006 fc1c 	bl	81086ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8101eb4:	2108      	movs	r1, #8
 8101eb6:	4893      	ldr	r0, [pc, #588]	; (8102104 <main+0x2f0>)
 8101eb8:	f006 fc18 	bl	81086ec <HAL_TIM_PWM_Start>

  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, BNO055_I2C_ADDR << 1,5,1000);
 8101ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101ec0:	2205      	movs	r2, #5
 8101ec2:	2150      	movs	r1, #80	; 0x50
 8101ec4:	4890      	ldr	r0, [pc, #576]	; (8102108 <main+0x2f4>)
 8101ec6:	f002 ff37 	bl	8104d38 <HAL_I2C_IsDeviceReady>
 8101eca:	4603      	mov	r3, r0
 8101ecc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  bno055_assignI2C(&hi2c1);
 8101ed0:	488d      	ldr	r0, [pc, #564]	; (8102108 <main+0x2f4>)
 8101ed2:	f7ff fe71 	bl	8101bb8 <bno055_assignI2C>
  bno055_setup();
 8101ed6:	f7ff fcbf 	bl	8101858 <bno055_setup>
  bno055_setOperationModeNDOF();
 8101eda:	f7ff fcaa 	bl	8101832 <bno055_setOperationModeNDOF>

  //init_tune_PID(&pid, dt, 0.05, 1, 0);

  init_tune_PID_Pitch(&pid_pitch, dt, 1,0.02, 0.0);
 8101ede:	4b8b      	ldr	r3, [pc, #556]	; (810210c <main+0x2f8>)
 8101ee0:	edd3 7a00 	vldr	s15, [r3]
 8101ee4:	eddf 1a8a 	vldr	s3, [pc, #552]	; 8102110 <main+0x2fc>
 8101ee8:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 8102114 <main+0x300>
 8101eec:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8101ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8101ef4:	4888      	ldr	r0, [pc, #544]	; (8102118 <main+0x304>)
 8101ef6:	f7ff f91f 	bl	8101138 <init_tune_PID_Pitch>
  init_tune_PID_Roll(&pid_roll, dt, 1,0.02 , 0.0);
 8101efa:	4b84      	ldr	r3, [pc, #528]	; (810210c <main+0x2f8>)
 8101efc:	edd3 7a00 	vldr	s15, [r3]
 8101f00:	eddf 1a83 	vldr	s3, [pc, #524]	; 8102110 <main+0x2fc>
 8101f04:	ed9f 1a83 	vldr	s2, [pc, #524]	; 8102114 <main+0x300>
 8101f08:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8101f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8101f10:	4882      	ldr	r0, [pc, #520]	; (810211c <main+0x308>)
 8101f12:	f7ff f9b5 	bl	8101280 <init_tune_PID_Roll>
  init_tune_PID_Yaw(&pid_yaw, dt, 1, 0.02, 0.0);
 8101f16:	4b7d      	ldr	r3, [pc, #500]	; (810210c <main+0x2f8>)
 8101f18:	edd3 7a00 	vldr	s15, [r3]
 8101f1c:	eddf 1a7c 	vldr	s3, [pc, #496]	; 8102110 <main+0x2fc>
 8101f20:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8102114 <main+0x300>
 8101f24:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8101f28:	eeb0 0a67 	vmov.f32	s0, s15
 8101f2c:	487c      	ldr	r0, [pc, #496]	; (8102120 <main+0x30c>)
 8101f2e:	f7ff fa4b 	bl	81013c8 <init_tune_PID_Yaw>
  float u_roll,u_pitch,u_yaw;
  float duty_roll,duty_pitch,duty_yaw;
  float u_c1,u_c2,u_c3;
  double c1,c2,c3;
  float c1_ref,c2_ref,c3_ref;
  float k = 0.64;
 8101f32:	4b7c      	ldr	r3, [pc, #496]	; (8102124 <main+0x310>)
 8101f34:	663b      	str	r3, [r7, #96]	; 0x60
  uint8_t dir1,dir2,dir3;
  float roll,pitch,yaw;
  float *Tout;
  int volt = 12;
 8101f36:	230c      	movs	r3, #12
 8101f38:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_Tc==1){
 8101f3a:	4b7b      	ldr	r3, [pc, #492]	; (8102128 <main+0x314>)
 8101f3c:	edd3 7a00 	vldr	s15, [r3]
 8101f40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101f44:	eef4 7a47 	vcmp.f32	s15, s14
 8101f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101f4c:	d1f5      	bne.n	8101f3a <main+0x126>
		flag_Tc = 0;
 8101f4e:	4b76      	ldr	r3, [pc, #472]	; (8102128 <main+0x314>)
 8101f50:	f04f 0200 	mov.w	r2, #0
 8101f54:	601a      	str	r2, [r3, #0]
		bno055_vector_t v = bno055_getVectorEuler();
 8101f56:	f7ff fdeb 	bl	8101b30 <bno055_getVectorEuler>
 8101f5a:	eeb0 4a40 	vmov.f32	s8, s0
 8101f5e:	eef0 4a60 	vmov.f32	s9, s1
 8101f62:	eeb0 5a41 	vmov.f32	s10, s2
 8101f66:	eef0 5a61 	vmov.f32	s11, s3
 8101f6a:	eeb0 6a42 	vmov.f32	s12, s4
 8101f6e:	eef0 6a62 	vmov.f32	s13, s5
 8101f72:	eeb0 7a43 	vmov.f32	s14, s6
 8101f76:	eef0 7a63 	vmov.f32	s15, s7
 8101f7a:	ed87 4b00 	vstr	d4, [r7]
 8101f7e:	ed87 5b02 	vstr	d5, [r7, #8]
 8101f82:	ed87 6b04 	vstr	d6, [r7, #16]
 8101f86:	ed87 7b06 	vstr	d7, [r7, #24]

		pitch = (float)v.y; // v.y --> x
 8101f8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8101f8e:	4610      	mov	r0, r2
 8101f90:	4619      	mov	r1, r3
 8101f92:	f7fe feb1 	bl	8100cf8 <__aeabi_d2f>
 8101f96:	4603      	mov	r3, r0
 8101f98:	65bb      	str	r3, [r7, #88]	; 0x58
		roll = (float)v.z; // v.z --> y
 8101f9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101f9e:	4610      	mov	r0, r2
 8101fa0:	4619      	mov	r1, r3
 8101fa2:	f7fe fea9 	bl	8100cf8 <__aeabi_d2f>
 8101fa6:	4603      	mov	r3, r0
 8101fa8:	657b      	str	r3, [r7, #84]	; 0x54
		yaw = (float)v.x; // v.x --> z
 8101faa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101fae:	4610      	mov	r0, r2
 8101fb0:	4619      	mov	r1, r3
 8101fb2:	f7fe fea1 	bl	8100cf8 <__aeabi_d2f>
 8101fb6:	4603      	mov	r3, r0
 8101fb8:	653b      	str	r3, [r7, #80]	; 0x50
		//printf("%f %f %f\r\n",roll,pitch,yaw);
		  //printf("Angoli: %f %f %f\r\n",roll,pitch,yaw);
		u_roll = PID_controller_Roll(&pid_roll, roll, 0.0);
 8101fba:	eddf 0a55 	vldr	s1, [pc, #340]	; 8102110 <main+0x2fc>
 8101fbe:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8101fc2:	4856      	ldr	r0, [pc, #344]	; (810211c <main+0x308>)
 8101fc4:	f7ff f984 	bl	81012d0 <PID_controller_Roll>
 8101fc8:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
		u_pitch = PID_controller_Pitch(&pid_pitch, pitch, 0.0);
 8101fcc:	eddf 0a50 	vldr	s1, [pc, #320]	; 8102110 <main+0x2fc>
 8101fd0:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8101fd4:	4850      	ldr	r0, [pc, #320]	; (8102118 <main+0x304>)
 8101fd6:	f7ff f8d7 	bl	8101188 <PID_controller_Pitch>
 8101fda:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
		  //u_yaw = PID_controller_Yaw(&pid_yaw, yaw, 0.0);
		u_yaw = 0;
 8101fde:	f04f 0300 	mov.w	r3, #0
 8101fe2:	647b      	str	r3, [r7, #68]	; 0x44
		  /*c1 = getCurrentValue(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
		  c2 = getCurrentValue(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
		  c3 = getCurrentValue(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
			*/

		Tout = matriceT(u_roll, u_pitch, u_yaw);
 8101fe4:	ed97 1a11 	vldr	s2, [r7, #68]	; 0x44
 8101fe8:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 8101fec:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8101ff0:	f000 fbb6 	bl	8102760 <matriceT>
 8101ff4:	6438      	str	r0, [r7, #64]	; 0x40
		printf("%f %f %f\r\n",Tout[0],Tout[1],Tout[2]);
 8101ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101ff8:	681b      	ldr	r3, [r3, #0]
 8101ffa:	4618      	mov	r0, r3
 8101ffc:	f7fe fb2c 	bl	8100658 <__aeabi_f2d>
 8102000:	4680      	mov	r8, r0
 8102002:	4689      	mov	r9, r1
 8102004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102006:	3304      	adds	r3, #4
 8102008:	681b      	ldr	r3, [r3, #0]
 810200a:	4618      	mov	r0, r3
 810200c:	f7fe fb24 	bl	8100658 <__aeabi_f2d>
 8102010:	4604      	mov	r4, r0
 8102012:	460d      	mov	r5, r1
 8102014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102016:	3308      	adds	r3, #8
 8102018:	681b      	ldr	r3, [r3, #0]
 810201a:	4618      	mov	r0, r3
 810201c:	f7fe fb1c 	bl	8100658 <__aeabi_f2d>
 8102020:	4602      	mov	r2, r0
 8102022:	460b      	mov	r3, r1
 8102024:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8102028:	e9cd 4500 	strd	r4, r5, [sp]
 810202c:	4642      	mov	r2, r8
 810202e:	464b      	mov	r3, r9
 8102030:	483e      	ldr	r0, [pc, #248]	; (810212c <main+0x318>)
 8102032:	f009 fec3 	bl	810bdbc <iprintf>
		duty1= CtoD_M1(Tout[0]);
 8102036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102038:	edd3 7a00 	vldr	s15, [r3]
 810203c:	eeb0 0a67 	vmov.f32	s0, s15
 8102040:	f7ff f9ea 	bl	8101418 <CtoD_M1>
 8102044:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		dir1 = ReftoDir_M1(Tout[0]);
 8102048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810204a:	edd3 7a00 	vldr	s15, [r3]
 810204e:	eeb0 0a67 	vmov.f32	s0, s15
 8102052:	f7ff fa31 	bl	81014b8 <ReftoDir_M1>
 8102056:	4603      	mov	r3, r0
 8102058:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		duty2 = CtoD_M2(Tout[1]);
 810205c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810205e:	3304      	adds	r3, #4
 8102060:	edd3 7a00 	vldr	s15, [r3]
 8102064:	eeb0 0a67 	vmov.f32	s0, s15
 8102068:	f7ff fa76 	bl	8101558 <CtoD_M2>
 810206c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		dir2 = ReftoDir_M2(Tout[1]);
 8102070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102072:	3304      	adds	r3, #4
 8102074:	edd3 7a00 	vldr	s15, [r3]
 8102078:	eeb0 0a67 	vmov.f32	s0, s15
 810207c:	f7ff fabc 	bl	81015f8 <ReftoDir_M2>
 8102080:	4603      	mov	r3, r0
 8102082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		duty3 = CtoD_M3(Tout[2]);
 8102086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102088:	3308      	adds	r3, #8
 810208a:	edd3 7a00 	vldr	s15, [r3]
 810208e:	eeb0 0a67 	vmov.f32	s0, s15
 8102092:	f7ff fb01 	bl	8101698 <CtoD_M3>
 8102096:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
		dir3 = ReftoDir_M3(Tout[2]);
 810209a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810209c:	3308      	adds	r3, #8
 810209e:	edd3 7a00 	vldr	s15, [r3]
 81020a2:	eeb0 0a67 	vmov.f32	s0, s15
 81020a6:	f7ff fb47 	bl	8101738 <ReftoDir_M3>
 81020aa:	4603      	mov	r3, r0
 81020ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		set_PWM_dir_M1(duty1, dir1);
 81020b0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 81020b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81020b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 81020bc:	4619      	mov	r1, r3
 81020be:	ee17 0a90 	vmov	r0, s15
 81020c2:	f7ff fa11 	bl	81014e8 <set_PWM_dir_M1>
		set_PWM_dir_M2(duty2, dir2);
 81020c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 81020ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81020ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81020d2:	4619      	mov	r1, r3
 81020d4:	ee17 0a90 	vmov	r0, s15
 81020d8:	f7ff faa6 	bl	8101628 <set_PWM_dir_M2>
		set_PWM_dir_M3(duty3, dir3);
 81020dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 81020e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81020e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81020e8:	4619      	mov	r1, r3
 81020ea:	ee17 0a90 	vmov	r0, s15
 81020ee:	f7ff fb3b 	bl	8101768 <set_PWM_dir_M3>
	  if(flag_Tc==1){
 81020f2:	e722      	b.n	8101f3a <main+0x126>
 81020f4:	58024400 	.word	0x58024400
 81020f8:	e000ed00 	.word	0xe000ed00
 81020fc:	58026400 	.word	0x58026400
 8102100:	10000328 	.word	0x10000328
 8102104:	100002dc 	.word	0x100002dc
 8102108:	10000288 	.word	0x10000288
 810210c:	10000014 	.word	0x10000014
 8102110:	00000000 	.word	0x00000000
 8102114:	3ca3d70a 	.word	0x3ca3d70a
 8102118:	1000046c 	.word	0x1000046c
 810211c:	10000454 	.word	0x10000454
 8102120:	10000484 	.word	0x10000484
 8102124:	3f23d70a 	.word	0x3f23d70a
 8102128:	1000049c 	.word	0x1000049c
 810212c:	0810fb2c 	.word	0x0810fb2c

08102130 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8102130:	b580      	push	{r7, lr}
 8102132:	b08a      	sub	sp, #40	; 0x28
 8102134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8102136:	f107 031c 	add.w	r3, r7, #28
 810213a:	2200      	movs	r2, #0
 810213c:	601a      	str	r2, [r3, #0]
 810213e:	605a      	str	r2, [r3, #4]
 8102140:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8102142:	463b      	mov	r3, r7
 8102144:	2200      	movs	r2, #0
 8102146:	601a      	str	r2, [r3, #0]
 8102148:	605a      	str	r2, [r3, #4]
 810214a:	609a      	str	r2, [r3, #8]
 810214c:	60da      	str	r2, [r3, #12]
 810214e:	611a      	str	r2, [r3, #16]
 8102150:	615a      	str	r2, [r3, #20]
 8102152:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8102154:	4b31      	ldr	r3, [pc, #196]	; (810221c <MX_ADC1_Init+0xec>)
 8102156:	4a32      	ldr	r2, [pc, #200]	; (8102220 <MX_ADC1_Init+0xf0>)
 8102158:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 810215a:	4b30      	ldr	r3, [pc, #192]	; (810221c <MX_ADC1_Init+0xec>)
 810215c:	2200      	movs	r2, #0
 810215e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8102160:	4b2e      	ldr	r3, [pc, #184]	; (810221c <MX_ADC1_Init+0xec>)
 8102162:	2200      	movs	r2, #0
 8102164:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8102166:	4b2d      	ldr	r3, [pc, #180]	; (810221c <MX_ADC1_Init+0xec>)
 8102168:	2200      	movs	r2, #0
 810216a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810216c:	4b2b      	ldr	r3, [pc, #172]	; (810221c <MX_ADC1_Init+0xec>)
 810216e:	2204      	movs	r2, #4
 8102170:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8102172:	4b2a      	ldr	r3, [pc, #168]	; (810221c <MX_ADC1_Init+0xec>)
 8102174:	2200      	movs	r2, #0
 8102176:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8102178:	4b28      	ldr	r3, [pc, #160]	; (810221c <MX_ADC1_Init+0xec>)
 810217a:	2200      	movs	r2, #0
 810217c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 810217e:	4b27      	ldr	r3, [pc, #156]	; (810221c <MX_ADC1_Init+0xec>)
 8102180:	2201      	movs	r2, #1
 8102182:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8102184:	4b25      	ldr	r3, [pc, #148]	; (810221c <MX_ADC1_Init+0xec>)
 8102186:	2201      	movs	r2, #1
 8102188:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 1;
 810218a:	4b24      	ldr	r3, [pc, #144]	; (810221c <MX_ADC1_Init+0xec>)
 810218c:	2201      	movs	r2, #1
 810218e:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8102190:	4b22      	ldr	r3, [pc, #136]	; (810221c <MX_ADC1_Init+0xec>)
 8102192:	2200      	movs	r2, #0
 8102194:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8102196:	4b21      	ldr	r3, [pc, #132]	; (810221c <MX_ADC1_Init+0xec>)
 8102198:	2200      	movs	r2, #0
 810219a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 810219c:	4b1f      	ldr	r3, [pc, #124]	; (810221c <MX_ADC1_Init+0xec>)
 810219e:	2200      	movs	r2, #0
 81021a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81021a2:	4b1e      	ldr	r3, [pc, #120]	; (810221c <MX_ADC1_Init+0xec>)
 81021a4:	2200      	movs	r2, #0
 81021a6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81021a8:	4b1c      	ldr	r3, [pc, #112]	; (810221c <MX_ADC1_Init+0xec>)
 81021aa:	2200      	movs	r2, #0
 81021ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81021ae:	4b1b      	ldr	r3, [pc, #108]	; (810221c <MX_ADC1_Init+0xec>)
 81021b0:	2200      	movs	r2, #0
 81021b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81021b6:	4819      	ldr	r0, [pc, #100]	; (810221c <MX_ADC1_Init+0xec>)
 81021b8:	f001 f93e 	bl	8103438 <HAL_ADC_Init>
 81021bc:	4603      	mov	r3, r0
 81021be:	2b00      	cmp	r3, #0
 81021c0:	d001      	beq.n	81021c6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 81021c2:	f000 fac7 	bl	8102754 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81021c6:	2300      	movs	r3, #0
 81021c8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81021ca:	f107 031c 	add.w	r3, r7, #28
 81021ce:	4619      	mov	r1, r3
 81021d0:	4812      	ldr	r0, [pc, #72]	; (810221c <MX_ADC1_Init+0xec>)
 81021d2:	f001 ff55 	bl	8104080 <HAL_ADCEx_MultiModeConfigChannel>
 81021d6:	4603      	mov	r3, r0
 81021d8:	2b00      	cmp	r3, #0
 81021da:	d001      	beq.n	81021e0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 81021dc:	f000 faba 	bl	8102754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 81021e0:	4b10      	ldr	r3, [pc, #64]	; (8102224 <MX_ADC1_Init+0xf4>)
 81021e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81021e4:	2306      	movs	r3, #6
 81021e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81021e8:	2300      	movs	r3, #0
 81021ea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81021ec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81021f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81021f2:	2304      	movs	r3, #4
 81021f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81021f6:	2300      	movs	r3, #0
 81021f8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81021fa:	2300      	movs	r3, #0
 81021fc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81021fe:	463b      	mov	r3, r7
 8102200:	4619      	mov	r1, r3
 8102202:	4806      	ldr	r0, [pc, #24]	; (810221c <MX_ADC1_Init+0xec>)
 8102204:	f001 faba 	bl	810377c <HAL_ADC_ConfigChannel>
 8102208:	4603      	mov	r3, r0
 810220a:	2b00      	cmp	r3, #0
 810220c:	d001      	beq.n	8102212 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 810220e:	f000 faa1 	bl	8102754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8102212:	bf00      	nop
 8102214:	3728      	adds	r7, #40	; 0x28
 8102216:	46bd      	mov	sp, r7
 8102218:	bd80      	pop	{r7, pc}
 810221a:	bf00      	nop
 810221c:	10000224 	.word	0x10000224
 8102220:	40022000 	.word	0x40022000
 8102224:	3ef08000 	.word	0x3ef08000

08102228 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8102228:	b580      	push	{r7, lr}
 810222a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 810222c:	4b1b      	ldr	r3, [pc, #108]	; (810229c <MX_I2C1_Init+0x74>)
 810222e:	4a1c      	ldr	r2, [pc, #112]	; (81022a0 <MX_I2C1_Init+0x78>)
 8102230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 8102232:	4b1a      	ldr	r3, [pc, #104]	; (810229c <MX_I2C1_Init+0x74>)
 8102234:	4a1b      	ldr	r2, [pc, #108]	; (81022a4 <MX_I2C1_Init+0x7c>)
 8102236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8102238:	4b18      	ldr	r3, [pc, #96]	; (810229c <MX_I2C1_Init+0x74>)
 810223a:	2200      	movs	r2, #0
 810223c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810223e:	4b17      	ldr	r3, [pc, #92]	; (810229c <MX_I2C1_Init+0x74>)
 8102240:	2201      	movs	r2, #1
 8102242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8102244:	4b15      	ldr	r3, [pc, #84]	; (810229c <MX_I2C1_Init+0x74>)
 8102246:	2200      	movs	r2, #0
 8102248:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 810224a:	4b14      	ldr	r3, [pc, #80]	; (810229c <MX_I2C1_Init+0x74>)
 810224c:	2200      	movs	r2, #0
 810224e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8102250:	4b12      	ldr	r3, [pc, #72]	; (810229c <MX_I2C1_Init+0x74>)
 8102252:	2200      	movs	r2, #0
 8102254:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8102256:	4b11      	ldr	r3, [pc, #68]	; (810229c <MX_I2C1_Init+0x74>)
 8102258:	2200      	movs	r2, #0
 810225a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 810225c:	4b0f      	ldr	r3, [pc, #60]	; (810229c <MX_I2C1_Init+0x74>)
 810225e:	2200      	movs	r2, #0
 8102260:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8102262:	480e      	ldr	r0, [pc, #56]	; (810229c <MX_I2C1_Init+0x74>)
 8102264:	f002 faee 	bl	8104844 <HAL_I2C_Init>
 8102268:	4603      	mov	r3, r0
 810226a:	2b00      	cmp	r3, #0
 810226c:	d001      	beq.n	8102272 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810226e:	f000 fa71 	bl	8102754 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8102272:	2100      	movs	r1, #0
 8102274:	4809      	ldr	r0, [pc, #36]	; (810229c <MX_I2C1_Init+0x74>)
 8102276:	f003 f911 	bl	810549c <HAL_I2CEx_ConfigAnalogFilter>
 810227a:	4603      	mov	r3, r0
 810227c:	2b00      	cmp	r3, #0
 810227e:	d001      	beq.n	8102284 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8102280:	f000 fa68 	bl	8102754 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8102284:	2100      	movs	r1, #0
 8102286:	4805      	ldr	r0, [pc, #20]	; (810229c <MX_I2C1_Init+0x74>)
 8102288:	f003 f953 	bl	8105532 <HAL_I2CEx_ConfigDigitalFilter>
 810228c:	4603      	mov	r3, r0
 810228e:	2b00      	cmp	r3, #0
 8102290:	d001      	beq.n	8102296 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8102292:	f000 fa5f 	bl	8102754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8102296:	bf00      	nop
 8102298:	bd80      	pop	{r7, pc}
 810229a:	bf00      	nop
 810229c:	10000288 	.word	0x10000288
 81022a0:	40005400 	.word	0x40005400
 81022a4:	00909fce 	.word	0x00909fce

081022a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81022a8:	b580      	push	{r7, lr}
 81022aa:	b09a      	sub	sp, #104	; 0x68
 81022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81022ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 81022b2:	2200      	movs	r2, #0
 81022b4:	601a      	str	r2, [r3, #0]
 81022b6:	605a      	str	r2, [r3, #4]
 81022b8:	609a      	str	r2, [r3, #8]
 81022ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81022bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81022c0:	2200      	movs	r2, #0
 81022c2:	601a      	str	r2, [r3, #0]
 81022c4:	605a      	str	r2, [r3, #4]
 81022c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81022c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81022cc:	2200      	movs	r2, #0
 81022ce:	601a      	str	r2, [r3, #0]
 81022d0:	605a      	str	r2, [r3, #4]
 81022d2:	609a      	str	r2, [r3, #8]
 81022d4:	60da      	str	r2, [r3, #12]
 81022d6:	611a      	str	r2, [r3, #16]
 81022d8:	615a      	str	r2, [r3, #20]
 81022da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81022dc:	1d3b      	adds	r3, r7, #4
 81022de:	222c      	movs	r2, #44	; 0x2c
 81022e0:	2100      	movs	r1, #0
 81022e2:	4618      	mov	r0, r3
 81022e4:	f008 fe08 	bl	810aef8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81022e8:	4b4f      	ldr	r3, [pc, #316]	; (8102428 <MX_TIM1_Init+0x180>)
 81022ea:	4a50      	ldr	r2, [pc, #320]	; (810242c <MX_TIM1_Init+0x184>)
 81022ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 81022ee:	4b4e      	ldr	r3, [pc, #312]	; (8102428 <MX_TIM1_Init+0x180>)
 81022f0:	22ef      	movs	r2, #239	; 0xef
 81022f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81022f4:	4b4c      	ldr	r3, [pc, #304]	; (8102428 <MX_TIM1_Init+0x180>)
 81022f6:	2200      	movs	r2, #0
 81022f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 81022fa:	4b4b      	ldr	r3, [pc, #300]	; (8102428 <MX_TIM1_Init+0x180>)
 81022fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8102300:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102302:	4b49      	ldr	r3, [pc, #292]	; (8102428 <MX_TIM1_Init+0x180>)
 8102304:	2200      	movs	r2, #0
 8102306:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8102308:	4b47      	ldr	r3, [pc, #284]	; (8102428 <MX_TIM1_Init+0x180>)
 810230a:	2200      	movs	r2, #0
 810230c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810230e:	4b46      	ldr	r3, [pc, #280]	; (8102428 <MX_TIM1_Init+0x180>)
 8102310:	2200      	movs	r2, #0
 8102312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8102314:	4844      	ldr	r0, [pc, #272]	; (8102428 <MX_TIM1_Init+0x180>)
 8102316:	f006 f8b7 	bl	8108488 <HAL_TIM_Base_Init>
 810231a:	4603      	mov	r3, r0
 810231c:	2b00      	cmp	r3, #0
 810231e:	d001      	beq.n	8102324 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8102320:	f000 fa18 	bl	8102754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102328:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 810232a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810232e:	4619      	mov	r1, r3
 8102330:	483d      	ldr	r0, [pc, #244]	; (8102428 <MX_TIM1_Init+0x180>)
 8102332:	f006 fdc3 	bl	8108ebc <HAL_TIM_ConfigClockSource>
 8102336:	4603      	mov	r3, r0
 8102338:	2b00      	cmp	r3, #0
 810233a:	d001      	beq.n	8102340 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 810233c:	f000 fa0a 	bl	8102754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8102340:	4839      	ldr	r0, [pc, #228]	; (8102428 <MX_TIM1_Init+0x180>)
 8102342:	f006 f971 	bl	8108628 <HAL_TIM_PWM_Init>
 8102346:	4603      	mov	r3, r0
 8102348:	2b00      	cmp	r3, #0
 810234a:	d001      	beq.n	8102350 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 810234c:	f000 fa02 	bl	8102754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102350:	2300      	movs	r3, #0
 8102352:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8102354:	2300      	movs	r3, #0
 8102356:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102358:	2300      	movs	r3, #0
 810235a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 810235c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8102360:	4619      	mov	r1, r3
 8102362:	4831      	ldr	r0, [pc, #196]	; (8102428 <MX_TIM1_Init+0x180>)
 8102364:	f007 fafc 	bl	8109960 <HAL_TIMEx_MasterConfigSynchronization>
 8102368:	4603      	mov	r3, r0
 810236a:	2b00      	cmp	r3, #0
 810236c:	d001      	beq.n	8102372 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 810236e:	f000 f9f1 	bl	8102754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8102372:	2360      	movs	r3, #96	; 0x60
 8102374:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8102376:	2300      	movs	r3, #0
 8102378:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810237a:	2300      	movs	r3, #0
 810237c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 810237e:	2300      	movs	r3, #0
 8102380:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102382:	2300      	movs	r3, #0
 8102384:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8102386:	2300      	movs	r3, #0
 8102388:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 810238a:	2300      	movs	r3, #0
 810238c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810238e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8102392:	2200      	movs	r2, #0
 8102394:	4619      	mov	r1, r3
 8102396:	4824      	ldr	r0, [pc, #144]	; (8102428 <MX_TIM1_Init+0x180>)
 8102398:	f006 fc7c 	bl	8108c94 <HAL_TIM_PWM_ConfigChannel>
 810239c:	4603      	mov	r3, r0
 810239e:	2b00      	cmp	r3, #0
 81023a0:	d001      	beq.n	81023a6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 81023a2:	f000 f9d7 	bl	8102754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 81023a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81023aa:	2204      	movs	r2, #4
 81023ac:	4619      	mov	r1, r3
 81023ae:	481e      	ldr	r0, [pc, #120]	; (8102428 <MX_TIM1_Init+0x180>)
 81023b0:	f006 fc70 	bl	8108c94 <HAL_TIM_PWM_ConfigChannel>
 81023b4:	4603      	mov	r3, r0
 81023b6:	2b00      	cmp	r3, #0
 81023b8:	d001      	beq.n	81023be <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 81023ba:	f000 f9cb 	bl	8102754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 81023be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81023c2:	2208      	movs	r2, #8
 81023c4:	4619      	mov	r1, r3
 81023c6:	4818      	ldr	r0, [pc, #96]	; (8102428 <MX_TIM1_Init+0x180>)
 81023c8:	f006 fc64 	bl	8108c94 <HAL_TIM_PWM_ConfigChannel>
 81023cc:	4603      	mov	r3, r0
 81023ce:	2b00      	cmp	r3, #0
 81023d0:	d001      	beq.n	81023d6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 81023d2:	f000 f9bf 	bl	8102754 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81023d6:	2300      	movs	r3, #0
 81023d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81023da:	2300      	movs	r3, #0
 81023dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81023de:	2300      	movs	r3, #0
 81023e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81023e2:	2300      	movs	r3, #0
 81023e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81023e6:	2300      	movs	r3, #0
 81023e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81023ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81023ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81023f0:	2300      	movs	r3, #0
 81023f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81023f4:	2300      	movs	r3, #0
 81023f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81023f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81023fc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81023fe:	2300      	movs	r3, #0
 8102400:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8102402:	2300      	movs	r3, #0
 8102404:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8102406:	1d3b      	adds	r3, r7, #4
 8102408:	4619      	mov	r1, r3
 810240a:	4807      	ldr	r0, [pc, #28]	; (8102428 <MX_TIM1_Init+0x180>)
 810240c:	f007 fb36 	bl	8109a7c <HAL_TIMEx_ConfigBreakDeadTime>
 8102410:	4603      	mov	r3, r0
 8102412:	2b00      	cmp	r3, #0
 8102414:	d001      	beq.n	810241a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8102416:	f000 f99d 	bl	8102754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 810241a:	4803      	ldr	r0, [pc, #12]	; (8102428 <MX_TIM1_Init+0x180>)
 810241c:	f000 fbd2 	bl	8102bc4 <HAL_TIM_MspPostInit>

}
 8102420:	bf00      	nop
 8102422:	3768      	adds	r7, #104	; 0x68
 8102424:	46bd      	mov	sp, r7
 8102426:	bd80      	pop	{r7, pc}
 8102428:	100002dc 	.word	0x100002dc
 810242c:	40010000 	.word	0x40010000

08102430 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8102430:	b580      	push	{r7, lr}
 8102432:	b088      	sub	sp, #32
 8102434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102436:	f107 0310 	add.w	r3, r7, #16
 810243a:	2200      	movs	r2, #0
 810243c:	601a      	str	r2, [r3, #0]
 810243e:	605a      	str	r2, [r3, #4]
 8102440:	609a      	str	r2, [r3, #8]
 8102442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102444:	1d3b      	adds	r3, r7, #4
 8102446:	2200      	movs	r2, #0
 8102448:	601a      	str	r2, [r3, #0]
 810244a:	605a      	str	r2, [r3, #4]
 810244c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 810244e:	4b1e      	ldr	r3, [pc, #120]	; (81024c8 <MX_TIM2_Init+0x98>)
 8102450:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8102454:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8102456:	4b1c      	ldr	r3, [pc, #112]	; (81024c8 <MX_TIM2_Init+0x98>)
 8102458:	22ef      	movs	r2, #239	; 0xef
 810245a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810245c:	4b1a      	ldr	r3, [pc, #104]	; (81024c8 <MX_TIM2_Init+0x98>)
 810245e:	2200      	movs	r2, #0
 8102460:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8102462:	4b19      	ldr	r3, [pc, #100]	; (81024c8 <MX_TIM2_Init+0x98>)
 8102464:	f242 720f 	movw	r2, #9999	; 0x270f
 8102468:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810246a:	4b17      	ldr	r3, [pc, #92]	; (81024c8 <MX_TIM2_Init+0x98>)
 810246c:	2200      	movs	r2, #0
 810246e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102470:	4b15      	ldr	r3, [pc, #84]	; (81024c8 <MX_TIM2_Init+0x98>)
 8102472:	2200      	movs	r2, #0
 8102474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8102476:	4814      	ldr	r0, [pc, #80]	; (81024c8 <MX_TIM2_Init+0x98>)
 8102478:	f006 f806 	bl	8108488 <HAL_TIM_Base_Init>
 810247c:	4603      	mov	r3, r0
 810247e:	2b00      	cmp	r3, #0
 8102480:	d001      	beq.n	8102486 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8102482:	f000 f967 	bl	8102754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810248a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 810248c:	f107 0310 	add.w	r3, r7, #16
 8102490:	4619      	mov	r1, r3
 8102492:	480d      	ldr	r0, [pc, #52]	; (81024c8 <MX_TIM2_Init+0x98>)
 8102494:	f006 fd12 	bl	8108ebc <HAL_TIM_ConfigClockSource>
 8102498:	4603      	mov	r3, r0
 810249a:	2b00      	cmp	r3, #0
 810249c:	d001      	beq.n	81024a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 810249e:	f000 f959 	bl	8102754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81024a2:	2300      	movs	r3, #0
 81024a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81024a6:	2300      	movs	r3, #0
 81024a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 81024aa:	1d3b      	adds	r3, r7, #4
 81024ac:	4619      	mov	r1, r3
 81024ae:	4806      	ldr	r0, [pc, #24]	; (81024c8 <MX_TIM2_Init+0x98>)
 81024b0:	f007 fa56 	bl	8109960 <HAL_TIMEx_MasterConfigSynchronization>
 81024b4:	4603      	mov	r3, r0
 81024b6:	2b00      	cmp	r3, #0
 81024b8:	d001      	beq.n	81024be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 81024ba:	f000 f94b 	bl	8102754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 81024be:	bf00      	nop
 81024c0:	3720      	adds	r7, #32
 81024c2:	46bd      	mov	sp, r7
 81024c4:	bd80      	pop	{r7, pc}
 81024c6:	bf00      	nop
 81024c8:	10000328 	.word	0x10000328

081024cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 81024cc:	b580      	push	{r7, lr}
 81024ce:	b08c      	sub	sp, #48	; 0x30
 81024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81024d2:	f107 030c 	add.w	r3, r7, #12
 81024d6:	2224      	movs	r2, #36	; 0x24
 81024d8:	2100      	movs	r1, #0
 81024da:	4618      	mov	r0, r3
 81024dc:	f008 fd0c 	bl	810aef8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81024e0:	463b      	mov	r3, r7
 81024e2:	2200      	movs	r2, #0
 81024e4:	601a      	str	r2, [r3, #0]
 81024e6:	605a      	str	r2, [r3, #4]
 81024e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 81024ea:	4b21      	ldr	r3, [pc, #132]	; (8102570 <MX_TIM4_Init+0xa4>)
 81024ec:	4a21      	ldr	r2, [pc, #132]	; (8102574 <MX_TIM4_Init+0xa8>)
 81024ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 81024f0:	4b1f      	ldr	r3, [pc, #124]	; (8102570 <MX_TIM4_Init+0xa4>)
 81024f2:	2200      	movs	r2, #0
 81024f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 81024f6:	4b1e      	ldr	r3, [pc, #120]	; (8102570 <MX_TIM4_Init+0xa4>)
 81024f8:	2200      	movs	r2, #0
 81024fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 81024fc:	4b1c      	ldr	r3, [pc, #112]	; (8102570 <MX_TIM4_Init+0xa4>)
 81024fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8102502:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102504:	4b1a      	ldr	r3, [pc, #104]	; (8102570 <MX_TIM4_Init+0xa4>)
 8102506:	2200      	movs	r2, #0
 8102508:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810250a:	4b19      	ldr	r3, [pc, #100]	; (8102570 <MX_TIM4_Init+0xa4>)
 810250c:	2200      	movs	r2, #0
 810250e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8102510:	2301      	movs	r3, #1
 8102512:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8102514:	2300      	movs	r3, #0
 8102516:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8102518:	2301      	movs	r3, #1
 810251a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 810251c:	2300      	movs	r3, #0
 810251e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8102520:	2300      	movs	r3, #0
 8102522:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8102524:	2300      	movs	r3, #0
 8102526:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8102528:	2301      	movs	r3, #1
 810252a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 810252c:	2300      	movs	r3, #0
 810252e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8102530:	2300      	movs	r3, #0
 8102532:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8102534:	f107 030c 	add.w	r3, r7, #12
 8102538:	4619      	mov	r1, r3
 810253a:	480d      	ldr	r0, [pc, #52]	; (8102570 <MX_TIM4_Init+0xa4>)
 810253c:	f006 f9e4 	bl	8108908 <HAL_TIM_Encoder_Init>
 8102540:	4603      	mov	r3, r0
 8102542:	2b00      	cmp	r3, #0
 8102544:	d001      	beq.n	810254a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8102546:	f000 f905 	bl	8102754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810254a:	2300      	movs	r3, #0
 810254c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810254e:	2300      	movs	r3, #0
 8102550:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8102552:	463b      	mov	r3, r7
 8102554:	4619      	mov	r1, r3
 8102556:	4806      	ldr	r0, [pc, #24]	; (8102570 <MX_TIM4_Init+0xa4>)
 8102558:	f007 fa02 	bl	8109960 <HAL_TIMEx_MasterConfigSynchronization>
 810255c:	4603      	mov	r3, r0
 810255e:	2b00      	cmp	r3, #0
 8102560:	d001      	beq.n	8102566 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8102562:	f000 f8f7 	bl	8102754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8102566:	bf00      	nop
 8102568:	3730      	adds	r7, #48	; 0x30
 810256a:	46bd      	mov	sp, r7
 810256c:	bd80      	pop	{r7, pc}
 810256e:	bf00      	nop
 8102570:	10000374 	.word	0x10000374
 8102574:	40000800 	.word	0x40000800

08102578 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8102578:	b580      	push	{r7, lr}
 810257a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810257c:	4b22      	ldr	r3, [pc, #136]	; (8102608 <MX_USART3_UART_Init+0x90>)
 810257e:	4a23      	ldr	r2, [pc, #140]	; (810260c <MX_USART3_UART_Init+0x94>)
 8102580:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102582:	4b21      	ldr	r3, [pc, #132]	; (8102608 <MX_USART3_UART_Init+0x90>)
 8102584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8102588:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810258a:	4b1f      	ldr	r3, [pc, #124]	; (8102608 <MX_USART3_UART_Init+0x90>)
 810258c:	2200      	movs	r2, #0
 810258e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102590:	4b1d      	ldr	r3, [pc, #116]	; (8102608 <MX_USART3_UART_Init+0x90>)
 8102592:	2200      	movs	r2, #0
 8102594:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102596:	4b1c      	ldr	r3, [pc, #112]	; (8102608 <MX_USART3_UART_Init+0x90>)
 8102598:	2200      	movs	r2, #0
 810259a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810259c:	4b1a      	ldr	r3, [pc, #104]	; (8102608 <MX_USART3_UART_Init+0x90>)
 810259e:	220c      	movs	r2, #12
 81025a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81025a2:	4b19      	ldr	r3, [pc, #100]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025a4:	2200      	movs	r2, #0
 81025a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81025a8:	4b17      	ldr	r3, [pc, #92]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025aa:	2200      	movs	r2, #0
 81025ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81025ae:	4b16      	ldr	r3, [pc, #88]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025b0:	2200      	movs	r2, #0
 81025b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81025b4:	4b14      	ldr	r3, [pc, #80]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025b6:	2200      	movs	r2, #0
 81025b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81025ba:	4b13      	ldr	r3, [pc, #76]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025bc:	2200      	movs	r2, #0
 81025be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81025c0:	4811      	ldr	r0, [pc, #68]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025c2:	f007 faf7 	bl	8109bb4 <HAL_UART_Init>
 81025c6:	4603      	mov	r3, r0
 81025c8:	2b00      	cmp	r3, #0
 81025ca:	d001      	beq.n	81025d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81025cc:	f000 f8c2 	bl	8102754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81025d0:	2100      	movs	r1, #0
 81025d2:	480d      	ldr	r0, [pc, #52]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025d4:	f008 fb86 	bl	810ace4 <HAL_UARTEx_SetTxFifoThreshold>
 81025d8:	4603      	mov	r3, r0
 81025da:	2b00      	cmp	r3, #0
 81025dc:	d001      	beq.n	81025e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81025de:	f000 f8b9 	bl	8102754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81025e2:	2100      	movs	r1, #0
 81025e4:	4808      	ldr	r0, [pc, #32]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025e6:	f008 fbbb 	bl	810ad60 <HAL_UARTEx_SetRxFifoThreshold>
 81025ea:	4603      	mov	r3, r0
 81025ec:	2b00      	cmp	r3, #0
 81025ee:	d001      	beq.n	81025f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81025f0:	f000 f8b0 	bl	8102754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81025f4:	4804      	ldr	r0, [pc, #16]	; (8102608 <MX_USART3_UART_Init+0x90>)
 81025f6:	f008 fb3c 	bl	810ac72 <HAL_UARTEx_DisableFifoMode>
 81025fa:	4603      	mov	r3, r0
 81025fc:	2b00      	cmp	r3, #0
 81025fe:	d001      	beq.n	8102604 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102600:	f000 f8a8 	bl	8102754 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102604:	bf00      	nop
 8102606:	bd80      	pop	{r7, pc}
 8102608:	100003c0 	.word	0x100003c0
 810260c:	40004800 	.word	0x40004800

08102610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8102610:	b580      	push	{r7, lr}
 8102612:	b08a      	sub	sp, #40	; 0x28
 8102614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102616:	f107 0314 	add.w	r3, r7, #20
 810261a:	2200      	movs	r2, #0
 810261c:	601a      	str	r2, [r3, #0]
 810261e:	605a      	str	r2, [r3, #4]
 8102620:	609a      	str	r2, [r3, #8]
 8102622:	60da      	str	r2, [r3, #12]
 8102624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8102626:	4b34      	ldr	r3, [pc, #208]	; (81026f8 <MX_GPIO_Init+0xe8>)
 8102628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810262c:	4a32      	ldr	r2, [pc, #200]	; (81026f8 <MX_GPIO_Init+0xe8>)
 810262e:	f043 0301 	orr.w	r3, r3, #1
 8102632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102636:	4b30      	ldr	r3, [pc, #192]	; (81026f8 <MX_GPIO_Init+0xe8>)
 8102638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810263c:	f003 0301 	and.w	r3, r3, #1
 8102640:	613b      	str	r3, [r7, #16]
 8102642:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8102644:	4b2c      	ldr	r3, [pc, #176]	; (81026f8 <MX_GPIO_Init+0xe8>)
 8102646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810264a:	4a2b      	ldr	r2, [pc, #172]	; (81026f8 <MX_GPIO_Init+0xe8>)
 810264c:	f043 0310 	orr.w	r3, r3, #16
 8102650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102654:	4b28      	ldr	r3, [pc, #160]	; (81026f8 <MX_GPIO_Init+0xe8>)
 8102656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810265a:	f003 0310 	and.w	r3, r3, #16
 810265e:	60fb      	str	r3, [r7, #12]
 8102660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8102662:	4b25      	ldr	r3, [pc, #148]	; (81026f8 <MX_GPIO_Init+0xe8>)
 8102664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102668:	4a23      	ldr	r2, [pc, #140]	; (81026f8 <MX_GPIO_Init+0xe8>)
 810266a:	f043 0308 	orr.w	r3, r3, #8
 810266e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102672:	4b21      	ldr	r3, [pc, #132]	; (81026f8 <MX_GPIO_Init+0xe8>)
 8102674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102678:	f003 0308 	and.w	r3, r3, #8
 810267c:	60bb      	str	r3, [r7, #8]
 810267e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8102680:	4b1d      	ldr	r3, [pc, #116]	; (81026f8 <MX_GPIO_Init+0xe8>)
 8102682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102686:	4a1c      	ldr	r2, [pc, #112]	; (81026f8 <MX_GPIO_Init+0xe8>)
 8102688:	f043 0302 	orr.w	r3, r3, #2
 810268c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102690:	4b19      	ldr	r3, [pc, #100]	; (81026f8 <MX_GPIO_Init+0xe8>)
 8102692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102696:	f003 0302 	and.w	r3, r3, #2
 810269a:	607b      	str	r3, [r7, #4]
 810269c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 810269e:	2200      	movs	r2, #0
 81026a0:	2110      	movs	r1, #16
 81026a2:	4816      	ldr	r0, [pc, #88]	; (81026fc <MX_GPIO_Init+0xec>)
 81026a4:	f002 f8a2 	bl	81047ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR2_Pin, GPIO_PIN_RESET);
 81026a8:	2200      	movs	r2, #0
 81026aa:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 81026ae:	4814      	ldr	r0, [pc, #80]	; (8102700 <MX_GPIO_Init+0xf0>)
 81026b0:	f002 f89c 	bl	81047ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR1_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin;
 81026b4:	2310      	movs	r3, #16
 81026b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81026b8:	2301      	movs	r3, #1
 81026ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81026bc:	2300      	movs	r3, #0
 81026be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81026c0:	2300      	movs	r3, #0
 81026c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR1_GPIO_Port, &GPIO_InitStruct);
 81026c4:	f107 0314 	add.w	r3, r7, #20
 81026c8:	4619      	mov	r1, r3
 81026ca:	480c      	ldr	r0, [pc, #48]	; (81026fc <MX_GPIO_Init+0xec>)
 81026cc:	f001 fede 	bl	810448c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR3_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR2_Pin;
 81026d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 81026d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81026d6:	2301      	movs	r3, #1
 81026d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81026da:	2300      	movs	r3, #0
 81026dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81026de:	2300      	movs	r3, #0
 81026e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81026e2:	f107 0314 	add.w	r3, r7, #20
 81026e6:	4619      	mov	r1, r3
 81026e8:	4805      	ldr	r0, [pc, #20]	; (8102700 <MX_GPIO_Init+0xf0>)
 81026ea:	f001 fecf 	bl	810448c <HAL_GPIO_Init>

}
 81026ee:	bf00      	nop
 81026f0:	3728      	adds	r7, #40	; 0x28
 81026f2:	46bd      	mov	sp, r7
 81026f4:	bd80      	pop	{r7, pc}
 81026f6:	bf00      	nop
 81026f8:	58024400 	.word	0x58024400
 81026fc:	58020000 	.word	0x58020000
 8102700:	58021000 	.word	0x58021000

08102704 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 8102704:	b580      	push	{r7, lr}
 8102706:	b082      	sub	sp, #8
 8102708:	af00      	add	r7, sp, #0
 810270a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 810270c:	1d39      	adds	r1, r7, #4
 810270e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8102712:	2201      	movs	r2, #1
 8102714:	4803      	ldr	r0, [pc, #12]	; (8102724 <__io_putchar+0x20>)
 8102716:	f007 fa9d 	bl	8109c54 <HAL_UART_Transmit>
	return ch;
 810271a:	687b      	ldr	r3, [r7, #4]
}
 810271c:	4618      	mov	r0, r3
 810271e:	3708      	adds	r7, #8
 8102720:	46bd      	mov	sp, r7
 8102722:	bd80      	pop	{r7, pc}
 8102724:	100003c0 	.word	0x100003c0

08102728 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8102728:	b480      	push	{r7}
 810272a:	b083      	sub	sp, #12
 810272c:	af00      	add	r7, sp, #0
 810272e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8102730:	687b      	ldr	r3, [r7, #4]
 8102732:	4a06      	ldr	r2, [pc, #24]	; (810274c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8102734:	4293      	cmp	r3, r2
 8102736:	d103      	bne.n	8102740 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_Tc = 1;
 8102738:	4b05      	ldr	r3, [pc, #20]	; (8102750 <HAL_TIM_PeriodElapsedCallback+0x28>)
 810273a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 810273e:	601a      	str	r2, [r3, #0]
	}
}
 8102740:	bf00      	nop
 8102742:	370c      	adds	r7, #12
 8102744:	46bd      	mov	sp, r7
 8102746:	f85d 7b04 	ldr.w	r7, [sp], #4
 810274a:	4770      	bx	lr
 810274c:	10000328 	.word	0x10000328
 8102750:	1000049c 	.word	0x1000049c

08102754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102754:	b480      	push	{r7}
 8102756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102758:	b672      	cpsid	i
}
 810275a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810275c:	e7fe      	b.n	810275c <Error_Handler+0x8>
	...

08102760 <matriceT>:
#include "matrice.h"
#include "math.h"
float* matriceT(float u_roll,float u_pitch,float u_yaw){
 8102760:	b5b0      	push	{r4, r5, r7, lr}
 8102762:	b086      	sub	sp, #24
 8102764:	af00      	add	r7, sp, #0
 8102766:	ed87 0a03 	vstr	s0, [r7, #12]
 810276a:	edc7 0a02 	vstr	s1, [r7, #8]
 810276e:	ed87 1a01 	vstr	s2, [r7, #4]
	float *Tout = malloc(sizeof(int)*3);
 8102772:	200c      	movs	r0, #12
 8102774:	f008 fbaa 	bl	810aecc <malloc>
 8102778:	4603      	mov	r3, r0
 810277a:	617b      	str	r3, [r7, #20]

	Tout[0] = 0.4304*u_yaw - 0.3133*u_roll;
 810277c:	6878      	ldr	r0, [r7, #4]
 810277e:	f7fd ff6b 	bl	8100658 <__aeabi_f2d>
 8102782:	a349      	add	r3, pc, #292	; (adr r3, 81028a8 <matriceT+0x148>)
 8102784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102788:	f7fd ffbe 	bl	8100708 <__aeabi_dmul>
 810278c:	4602      	mov	r2, r0
 810278e:	460b      	mov	r3, r1
 8102790:	4614      	mov	r4, r2
 8102792:	461d      	mov	r5, r3
 8102794:	68f8      	ldr	r0, [r7, #12]
 8102796:	f7fd ff5f 	bl	8100658 <__aeabi_f2d>
 810279a:	a345      	add	r3, pc, #276	; (adr r3, 81028b0 <matriceT+0x150>)
 810279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027a0:	f7fd ffb2 	bl	8100708 <__aeabi_dmul>
 81027a4:	4602      	mov	r2, r0
 81027a6:	460b      	mov	r3, r1
 81027a8:	4620      	mov	r0, r4
 81027aa:	4629      	mov	r1, r5
 81027ac:	f7fd fdf4 	bl	8100398 <__aeabi_dsub>
 81027b0:	4602      	mov	r2, r0
 81027b2:	460b      	mov	r3, r1
 81027b4:	4610      	mov	r0, r2
 81027b6:	4619      	mov	r1, r3
 81027b8:	f7fe fa9e 	bl	8100cf8 <__aeabi_d2f>
 81027bc:	4602      	mov	r2, r0
 81027be:	697b      	ldr	r3, [r7, #20]
 81027c0:	601a      	str	r2, [r3, #0]
	Tout[1] = 0.1567*u_roll - 0.2714*u_pitch + 0.4304*u_yaw;
 81027c2:	68f8      	ldr	r0, [r7, #12]
 81027c4:	f7fd ff48 	bl	8100658 <__aeabi_f2d>
 81027c8:	a33b      	add	r3, pc, #236	; (adr r3, 81028b8 <matriceT+0x158>)
 81027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027ce:	f7fd ff9b 	bl	8100708 <__aeabi_dmul>
 81027d2:	4602      	mov	r2, r0
 81027d4:	460b      	mov	r3, r1
 81027d6:	4614      	mov	r4, r2
 81027d8:	461d      	mov	r5, r3
 81027da:	68b8      	ldr	r0, [r7, #8]
 81027dc:	f7fd ff3c 	bl	8100658 <__aeabi_f2d>
 81027e0:	a337      	add	r3, pc, #220	; (adr r3, 81028c0 <matriceT+0x160>)
 81027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027e6:	f7fd ff8f 	bl	8100708 <__aeabi_dmul>
 81027ea:	4602      	mov	r2, r0
 81027ec:	460b      	mov	r3, r1
 81027ee:	4620      	mov	r0, r4
 81027f0:	4629      	mov	r1, r5
 81027f2:	f7fd fdd1 	bl	8100398 <__aeabi_dsub>
 81027f6:	4602      	mov	r2, r0
 81027f8:	460b      	mov	r3, r1
 81027fa:	4614      	mov	r4, r2
 81027fc:	461d      	mov	r5, r3
 81027fe:	6878      	ldr	r0, [r7, #4]
 8102800:	f7fd ff2a 	bl	8100658 <__aeabi_f2d>
 8102804:	a328      	add	r3, pc, #160	; (adr r3, 81028a8 <matriceT+0x148>)
 8102806:	e9d3 2300 	ldrd	r2, r3, [r3]
 810280a:	f7fd ff7d 	bl	8100708 <__aeabi_dmul>
 810280e:	4602      	mov	r2, r0
 8102810:	460b      	mov	r3, r1
 8102812:	4620      	mov	r0, r4
 8102814:	4629      	mov	r1, r5
 8102816:	f7fd fdc1 	bl	810039c <__adddf3>
 810281a:	4602      	mov	r2, r0
 810281c:	460b      	mov	r3, r1
 810281e:	4610      	mov	r0, r2
 8102820:	4619      	mov	r1, r3
 8102822:	697b      	ldr	r3, [r7, #20]
 8102824:	1d1c      	adds	r4, r3, #4
 8102826:	f7fe fa67 	bl	8100cf8 <__aeabi_d2f>
 810282a:	4603      	mov	r3, r0
 810282c:	6023      	str	r3, [r4, #0]
	Tout[2] = 0.2714*u_pitch + 0.1567*u_roll + 0.4304*u_yaw;
 810282e:	68b8      	ldr	r0, [r7, #8]
 8102830:	f7fd ff12 	bl	8100658 <__aeabi_f2d>
 8102834:	a322      	add	r3, pc, #136	; (adr r3, 81028c0 <matriceT+0x160>)
 8102836:	e9d3 2300 	ldrd	r2, r3, [r3]
 810283a:	f7fd ff65 	bl	8100708 <__aeabi_dmul>
 810283e:	4602      	mov	r2, r0
 8102840:	460b      	mov	r3, r1
 8102842:	4614      	mov	r4, r2
 8102844:	461d      	mov	r5, r3
 8102846:	68f8      	ldr	r0, [r7, #12]
 8102848:	f7fd ff06 	bl	8100658 <__aeabi_f2d>
 810284c:	a31a      	add	r3, pc, #104	; (adr r3, 81028b8 <matriceT+0x158>)
 810284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102852:	f7fd ff59 	bl	8100708 <__aeabi_dmul>
 8102856:	4602      	mov	r2, r0
 8102858:	460b      	mov	r3, r1
 810285a:	4620      	mov	r0, r4
 810285c:	4629      	mov	r1, r5
 810285e:	f7fd fd9d 	bl	810039c <__adddf3>
 8102862:	4602      	mov	r2, r0
 8102864:	460b      	mov	r3, r1
 8102866:	4614      	mov	r4, r2
 8102868:	461d      	mov	r5, r3
 810286a:	6878      	ldr	r0, [r7, #4]
 810286c:	f7fd fef4 	bl	8100658 <__aeabi_f2d>
 8102870:	a30d      	add	r3, pc, #52	; (adr r3, 81028a8 <matriceT+0x148>)
 8102872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102876:	f7fd ff47 	bl	8100708 <__aeabi_dmul>
 810287a:	4602      	mov	r2, r0
 810287c:	460b      	mov	r3, r1
 810287e:	4620      	mov	r0, r4
 8102880:	4629      	mov	r1, r5
 8102882:	f7fd fd8b 	bl	810039c <__adddf3>
 8102886:	4602      	mov	r2, r0
 8102888:	460b      	mov	r3, r1
 810288a:	4610      	mov	r0, r2
 810288c:	4619      	mov	r1, r3
 810288e:	697b      	ldr	r3, [r7, #20]
 8102890:	f103 0408 	add.w	r4, r3, #8
 8102894:	f7fe fa30 	bl	8100cf8 <__aeabi_d2f>
 8102898:	4603      	mov	r3, r0
 810289a:	6023      	str	r3, [r4, #0]

	return Tout;
 810289c:	697b      	ldr	r3, [r7, #20]

}
 810289e:	4618      	mov	r0, r3
 81028a0:	3718      	adds	r7, #24
 81028a2:	46bd      	mov	sp, r7
 81028a4:	bdb0      	pop	{r4, r5, r7, pc}
 81028a6:	bf00      	nop
 81028a8:	710cb296 	.word	0x710cb296
 81028ac:	3fdb8bac 	.word	0x3fdb8bac
 81028b0:	71758e22 	.word	0x71758e22
 81028b4:	3fd40d1b 	.word	0x3fd40d1b
 81028b8:	dfa43fe6 	.word	0xdfa43fe6
 81028bc:	3fc40ebe 	.word	0x3fc40ebe
 81028c0:	1b089a02 	.word	0x1b089a02
 81028c4:	3fd15e9e 	.word	0x3fd15e9e

081028c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81028c8:	b480      	push	{r7}
 81028ca:	b083      	sub	sp, #12
 81028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81028ce:	4b0a      	ldr	r3, [pc, #40]	; (81028f8 <HAL_MspInit+0x30>)
 81028d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81028d4:	4a08      	ldr	r2, [pc, #32]	; (81028f8 <HAL_MspInit+0x30>)
 81028d6:	f043 0302 	orr.w	r3, r3, #2
 81028da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81028de:	4b06      	ldr	r3, [pc, #24]	; (81028f8 <HAL_MspInit+0x30>)
 81028e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81028e4:	f003 0302 	and.w	r3, r3, #2
 81028e8:	607b      	str	r3, [r7, #4]
 81028ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81028ec:	bf00      	nop
 81028ee:	370c      	adds	r7, #12
 81028f0:	46bd      	mov	sp, r7
 81028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028f6:	4770      	bx	lr
 81028f8:	58024400 	.word	0x58024400

081028fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 81028fc:	b580      	push	{r7, lr}
 81028fe:	b0ba      	sub	sp, #232	; 0xe8
 8102900:	af00      	add	r7, sp, #0
 8102902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102904:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102908:	2200      	movs	r2, #0
 810290a:	601a      	str	r2, [r3, #0]
 810290c:	605a      	str	r2, [r3, #4]
 810290e:	609a      	str	r2, [r3, #8]
 8102910:	60da      	str	r2, [r3, #12]
 8102912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102914:	f107 0310 	add.w	r3, r7, #16
 8102918:	22c0      	movs	r2, #192	; 0xc0
 810291a:	2100      	movs	r1, #0
 810291c:	4618      	mov	r0, r3
 810291e:	f008 faeb 	bl	810aef8 <memset>
  if(hadc->Instance==ADC1)
 8102922:	687b      	ldr	r3, [r7, #4]
 8102924:	681b      	ldr	r3, [r3, #0]
 8102926:	4a2c      	ldr	r2, [pc, #176]	; (81029d8 <HAL_ADC_MspInit+0xdc>)
 8102928:	4293      	cmp	r3, r2
 810292a:	d150      	bne.n	81029ce <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 810292c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8102930:	f04f 0300 	mov.w	r3, #0
 8102934:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8102938:	2301      	movs	r3, #1
 810293a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 810293c:	2312      	movs	r3, #18
 810293e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8102940:	2304      	movs	r3, #4
 8102942:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8102944:	2302      	movs	r3, #2
 8102946:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8102948:	2302      	movs	r3, #2
 810294a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 810294c:	23c0      	movs	r3, #192	; 0xc0
 810294e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8102950:	2320      	movs	r3, #32
 8102952:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8102954:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8102958:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 810295a:	2300      	movs	r3, #0
 810295c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102960:	f107 0310 	add.w	r3, r7, #16
 8102964:	4618      	mov	r0, r3
 8102966:	f003 f891 	bl	8105a8c <HAL_RCCEx_PeriphCLKConfig>
 810296a:	4603      	mov	r3, r0
 810296c:	2b00      	cmp	r3, #0
 810296e:	d001      	beq.n	8102974 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8102970:	f7ff fef0 	bl	8102754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8102974:	4b19      	ldr	r3, [pc, #100]	; (81029dc <HAL_ADC_MspInit+0xe0>)
 8102976:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810297a:	4a18      	ldr	r2, [pc, #96]	; (81029dc <HAL_ADC_MspInit+0xe0>)
 810297c:	f043 0320 	orr.w	r3, r3, #32
 8102980:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102984:	4b15      	ldr	r3, [pc, #84]	; (81029dc <HAL_ADC_MspInit+0xe0>)
 8102986:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810298a:	f003 0320 	and.w	r3, r3, #32
 810298e:	60fb      	str	r3, [r7, #12]
 8102990:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102992:	4b12      	ldr	r3, [pc, #72]	; (81029dc <HAL_ADC_MspInit+0xe0>)
 8102994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102998:	4a10      	ldr	r2, [pc, #64]	; (81029dc <HAL_ADC_MspInit+0xe0>)
 810299a:	f043 0301 	orr.w	r3, r3, #1
 810299e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81029a2:	4b0e      	ldr	r3, [pc, #56]	; (81029dc <HAL_ADC_MspInit+0xe0>)
 81029a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81029a8:	f003 0301 	and.w	r3, r3, #1
 81029ac:	60bb      	str	r3, [r7, #8]
 81029ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 81029b0:	2308      	movs	r3, #8
 81029b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81029b6:	2303      	movs	r3, #3
 81029b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81029bc:	2300      	movs	r3, #0
 81029be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81029c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81029c6:	4619      	mov	r1, r3
 81029c8:	4805      	ldr	r0, [pc, #20]	; (81029e0 <HAL_ADC_MspInit+0xe4>)
 81029ca:	f001 fd5f 	bl	810448c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 81029ce:	bf00      	nop
 81029d0:	37e8      	adds	r7, #232	; 0xe8
 81029d2:	46bd      	mov	sp, r7
 81029d4:	bd80      	pop	{r7, pc}
 81029d6:	bf00      	nop
 81029d8:	40022000 	.word	0x40022000
 81029dc:	58024400 	.word	0x58024400
 81029e0:	58020000 	.word	0x58020000

081029e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 81029e4:	b580      	push	{r7, lr}
 81029e6:	b0ba      	sub	sp, #232	; 0xe8
 81029e8:	af00      	add	r7, sp, #0
 81029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81029ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81029f0:	2200      	movs	r2, #0
 81029f2:	601a      	str	r2, [r3, #0]
 81029f4:	605a      	str	r2, [r3, #4]
 81029f6:	609a      	str	r2, [r3, #8]
 81029f8:	60da      	str	r2, [r3, #12]
 81029fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81029fc:	f107 0310 	add.w	r3, r7, #16
 8102a00:	22c0      	movs	r2, #192	; 0xc0
 8102a02:	2100      	movs	r1, #0
 8102a04:	4618      	mov	r0, r3
 8102a06:	f008 fa77 	bl	810aef8 <memset>
  if(hi2c->Instance==I2C1)
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	681b      	ldr	r3, [r3, #0]
 8102a0e:	4a26      	ldr	r2, [pc, #152]	; (8102aa8 <HAL_I2C_MspInit+0xc4>)
 8102a10:	4293      	cmp	r3, r2
 8102a12:	d145      	bne.n	8102aa0 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8102a14:	f04f 0208 	mov.w	r2, #8
 8102a18:	f04f 0300 	mov.w	r3, #0
 8102a1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102a20:	2300      	movs	r3, #0
 8102a22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102a26:	f107 0310 	add.w	r3, r7, #16
 8102a2a:	4618      	mov	r0, r3
 8102a2c:	f003 f82e 	bl	8105a8c <HAL_RCCEx_PeriphCLKConfig>
 8102a30:	4603      	mov	r3, r0
 8102a32:	2b00      	cmp	r3, #0
 8102a34:	d001      	beq.n	8102a3a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8102a36:	f7ff fe8d 	bl	8102754 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102a3a:	4b1c      	ldr	r3, [pc, #112]	; (8102aac <HAL_I2C_MspInit+0xc8>)
 8102a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102a40:	4a1a      	ldr	r2, [pc, #104]	; (8102aac <HAL_I2C_MspInit+0xc8>)
 8102a42:	f043 0302 	orr.w	r3, r3, #2
 8102a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102a4a:	4b18      	ldr	r3, [pc, #96]	; (8102aac <HAL_I2C_MspInit+0xc8>)
 8102a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102a50:	f003 0302 	and.w	r3, r3, #2
 8102a54:	60fb      	str	r3, [r7, #12]
 8102a56:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8102a58:	23c0      	movs	r3, #192	; 0xc0
 8102a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102a5e:	2312      	movs	r3, #18
 8102a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102a64:	2300      	movs	r3, #0
 8102a66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102a6a:	2300      	movs	r3, #0
 8102a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8102a70:	2304      	movs	r3, #4
 8102a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102a76:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102a7a:	4619      	mov	r1, r3
 8102a7c:	480c      	ldr	r0, [pc, #48]	; (8102ab0 <HAL_I2C_MspInit+0xcc>)
 8102a7e:	f001 fd05 	bl	810448c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8102a82:	4b0a      	ldr	r3, [pc, #40]	; (8102aac <HAL_I2C_MspInit+0xc8>)
 8102a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a88:	4a08      	ldr	r2, [pc, #32]	; (8102aac <HAL_I2C_MspInit+0xc8>)
 8102a8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102a8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102a92:	4b06      	ldr	r3, [pc, #24]	; (8102aac <HAL_I2C_MspInit+0xc8>)
 8102a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102a9c:	60bb      	str	r3, [r7, #8]
 8102a9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8102aa0:	bf00      	nop
 8102aa2:	37e8      	adds	r7, #232	; 0xe8
 8102aa4:	46bd      	mov	sp, r7
 8102aa6:	bd80      	pop	{r7, pc}
 8102aa8:	40005400 	.word	0x40005400
 8102aac:	58024400 	.word	0x58024400
 8102ab0:	58020400 	.word	0x58020400

08102ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8102ab4:	b580      	push	{r7, lr}
 8102ab6:	b084      	sub	sp, #16
 8102ab8:	af00      	add	r7, sp, #0
 8102aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8102abc:	687b      	ldr	r3, [r7, #4]
 8102abe:	681b      	ldr	r3, [r3, #0]
 8102ac0:	4a19      	ldr	r2, [pc, #100]	; (8102b28 <HAL_TIM_Base_MspInit+0x74>)
 8102ac2:	4293      	cmp	r3, r2
 8102ac4:	d10f      	bne.n	8102ae6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8102ac6:	4b19      	ldr	r3, [pc, #100]	; (8102b2c <HAL_TIM_Base_MspInit+0x78>)
 8102ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102acc:	4a17      	ldr	r2, [pc, #92]	; (8102b2c <HAL_TIM_Base_MspInit+0x78>)
 8102ace:	f043 0301 	orr.w	r3, r3, #1
 8102ad2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102ad6:	4b15      	ldr	r3, [pc, #84]	; (8102b2c <HAL_TIM_Base_MspInit+0x78>)
 8102ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102adc:	f003 0301 	and.w	r3, r3, #1
 8102ae0:	60fb      	str	r3, [r7, #12]
 8102ae2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8102ae4:	e01b      	b.n	8102b1e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM2)
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	681b      	ldr	r3, [r3, #0]
 8102aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102aee:	d116      	bne.n	8102b1e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8102af0:	4b0e      	ldr	r3, [pc, #56]	; (8102b2c <HAL_TIM_Base_MspInit+0x78>)
 8102af2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102af6:	4a0d      	ldr	r2, [pc, #52]	; (8102b2c <HAL_TIM_Base_MspInit+0x78>)
 8102af8:	f043 0301 	orr.w	r3, r3, #1
 8102afc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102b00:	4b0a      	ldr	r3, [pc, #40]	; (8102b2c <HAL_TIM_Base_MspInit+0x78>)
 8102b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102b06:	f003 0301 	and.w	r3, r3, #1
 8102b0a:	60bb      	str	r3, [r7, #8]
 8102b0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8102b0e:	2200      	movs	r2, #0
 8102b10:	2100      	movs	r1, #0
 8102b12:	201c      	movs	r0, #28
 8102b14:	f001 fc71 	bl	81043fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8102b18:	201c      	movs	r0, #28
 8102b1a:	f001 fc88 	bl	810442e <HAL_NVIC_EnableIRQ>
}
 8102b1e:	bf00      	nop
 8102b20:	3710      	adds	r7, #16
 8102b22:	46bd      	mov	sp, r7
 8102b24:	bd80      	pop	{r7, pc}
 8102b26:	bf00      	nop
 8102b28:	40010000 	.word	0x40010000
 8102b2c:	58024400 	.word	0x58024400

08102b30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8102b30:	b580      	push	{r7, lr}
 8102b32:	b08a      	sub	sp, #40	; 0x28
 8102b34:	af00      	add	r7, sp, #0
 8102b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102b38:	f107 0314 	add.w	r3, r7, #20
 8102b3c:	2200      	movs	r2, #0
 8102b3e:	601a      	str	r2, [r3, #0]
 8102b40:	605a      	str	r2, [r3, #4]
 8102b42:	609a      	str	r2, [r3, #8]
 8102b44:	60da      	str	r2, [r3, #12]
 8102b46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8102b48:	687b      	ldr	r3, [r7, #4]
 8102b4a:	681b      	ldr	r3, [r3, #0]
 8102b4c:	4a1a      	ldr	r2, [pc, #104]	; (8102bb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8102b4e:	4293      	cmp	r3, r2
 8102b50:	d12e      	bne.n	8102bb0 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8102b52:	4b1a      	ldr	r3, [pc, #104]	; (8102bbc <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102b58:	4a18      	ldr	r2, [pc, #96]	; (8102bbc <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b5a:	f043 0304 	orr.w	r3, r3, #4
 8102b5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102b62:	4b16      	ldr	r3, [pc, #88]	; (8102bbc <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102b68:	f003 0304 	and.w	r3, r3, #4
 8102b6c:	613b      	str	r3, [r7, #16]
 8102b6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102b70:	4b12      	ldr	r3, [pc, #72]	; (8102bbc <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b76:	4a11      	ldr	r2, [pc, #68]	; (8102bbc <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b78:	f043 0308 	orr.w	r3, r3, #8
 8102b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b80:	4b0e      	ldr	r3, [pc, #56]	; (8102bbc <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b86:	f003 0308 	and.w	r3, r3, #8
 8102b8a:	60fb      	str	r3, [r7, #12]
 8102b8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8102b8e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8102b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102b94:	2302      	movs	r3, #2
 8102b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102b98:	2300      	movs	r3, #0
 8102b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102b9c:	2300      	movs	r3, #0
 8102b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8102ba0:	2302      	movs	r3, #2
 8102ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102ba4:	f107 0314 	add.w	r3, r7, #20
 8102ba8:	4619      	mov	r1, r3
 8102baa:	4805      	ldr	r0, [pc, #20]	; (8102bc0 <HAL_TIM_Encoder_MspInit+0x90>)
 8102bac:	f001 fc6e 	bl	810448c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8102bb0:	bf00      	nop
 8102bb2:	3728      	adds	r7, #40	; 0x28
 8102bb4:	46bd      	mov	sp, r7
 8102bb6:	bd80      	pop	{r7, pc}
 8102bb8:	40000800 	.word	0x40000800
 8102bbc:	58024400 	.word	0x58024400
 8102bc0:	58020c00 	.word	0x58020c00

08102bc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102bc4:	b580      	push	{r7, lr}
 8102bc6:	b088      	sub	sp, #32
 8102bc8:	af00      	add	r7, sp, #0
 8102bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102bcc:	f107 030c 	add.w	r3, r7, #12
 8102bd0:	2200      	movs	r2, #0
 8102bd2:	601a      	str	r2, [r3, #0]
 8102bd4:	605a      	str	r2, [r3, #4]
 8102bd6:	609a      	str	r2, [r3, #8]
 8102bd8:	60da      	str	r2, [r3, #12]
 8102bda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	681b      	ldr	r3, [r3, #0]
 8102be0:	4a13      	ldr	r2, [pc, #76]	; (8102c30 <HAL_TIM_MspPostInit+0x6c>)
 8102be2:	4293      	cmp	r3, r2
 8102be4:	d11f      	bne.n	8102c26 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8102be6:	4b13      	ldr	r3, [pc, #76]	; (8102c34 <HAL_TIM_MspPostInit+0x70>)
 8102be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102bec:	4a11      	ldr	r2, [pc, #68]	; (8102c34 <HAL_TIM_MspPostInit+0x70>)
 8102bee:	f043 0310 	orr.w	r3, r3, #16
 8102bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102bf6:	4b0f      	ldr	r3, [pc, #60]	; (8102c34 <HAL_TIM_MspPostInit+0x70>)
 8102bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102bfc:	f003 0310 	and.w	r3, r3, #16
 8102c00:	60bb      	str	r3, [r7, #8]
 8102c02:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8102c04:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8102c08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102c0a:	2302      	movs	r3, #2
 8102c0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102c0e:	2300      	movs	r3, #0
 8102c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102c12:	2300      	movs	r3, #0
 8102c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8102c16:	2301      	movs	r3, #1
 8102c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8102c1a:	f107 030c 	add.w	r3, r7, #12
 8102c1e:	4619      	mov	r1, r3
 8102c20:	4805      	ldr	r0, [pc, #20]	; (8102c38 <HAL_TIM_MspPostInit+0x74>)
 8102c22:	f001 fc33 	bl	810448c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8102c26:	bf00      	nop
 8102c28:	3720      	adds	r7, #32
 8102c2a:	46bd      	mov	sp, r7
 8102c2c:	bd80      	pop	{r7, pc}
 8102c2e:	bf00      	nop
 8102c30:	40010000 	.word	0x40010000
 8102c34:	58024400 	.word	0x58024400
 8102c38:	58021000 	.word	0x58021000

08102c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102c3c:	b580      	push	{r7, lr}
 8102c3e:	b0ba      	sub	sp, #232	; 0xe8
 8102c40:	af00      	add	r7, sp, #0
 8102c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102c44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102c48:	2200      	movs	r2, #0
 8102c4a:	601a      	str	r2, [r3, #0]
 8102c4c:	605a      	str	r2, [r3, #4]
 8102c4e:	609a      	str	r2, [r3, #8]
 8102c50:	60da      	str	r2, [r3, #12]
 8102c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102c54:	f107 0310 	add.w	r3, r7, #16
 8102c58:	22c0      	movs	r2, #192	; 0xc0
 8102c5a:	2100      	movs	r1, #0
 8102c5c:	4618      	mov	r0, r3
 8102c5e:	f008 f94b 	bl	810aef8 <memset>
  if(huart->Instance==USART3)
 8102c62:	687b      	ldr	r3, [r7, #4]
 8102c64:	681b      	ldr	r3, [r3, #0]
 8102c66:	4a27      	ldr	r2, [pc, #156]	; (8102d04 <HAL_UART_MspInit+0xc8>)
 8102c68:	4293      	cmp	r3, r2
 8102c6a:	d146      	bne.n	8102cfa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102c6c:	f04f 0202 	mov.w	r2, #2
 8102c70:	f04f 0300 	mov.w	r3, #0
 8102c74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102c78:	2300      	movs	r3, #0
 8102c7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102c7e:	f107 0310 	add.w	r3, r7, #16
 8102c82:	4618      	mov	r0, r3
 8102c84:	f002 ff02 	bl	8105a8c <HAL_RCCEx_PeriphCLKConfig>
 8102c88:	4603      	mov	r3, r0
 8102c8a:	2b00      	cmp	r3, #0
 8102c8c:	d001      	beq.n	8102c92 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8102c8e:	f7ff fd61 	bl	8102754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102c92:	4b1d      	ldr	r3, [pc, #116]	; (8102d08 <HAL_UART_MspInit+0xcc>)
 8102c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c98:	4a1b      	ldr	r2, [pc, #108]	; (8102d08 <HAL_UART_MspInit+0xcc>)
 8102c9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102c9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102ca2:	4b19      	ldr	r3, [pc, #100]	; (8102d08 <HAL_UART_MspInit+0xcc>)
 8102ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102cac:	60fb      	str	r3, [r7, #12]
 8102cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102cb0:	4b15      	ldr	r3, [pc, #84]	; (8102d08 <HAL_UART_MspInit+0xcc>)
 8102cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102cb6:	4a14      	ldr	r2, [pc, #80]	; (8102d08 <HAL_UART_MspInit+0xcc>)
 8102cb8:	f043 0308 	orr.w	r3, r3, #8
 8102cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102cc0:	4b11      	ldr	r3, [pc, #68]	; (8102d08 <HAL_UART_MspInit+0xcc>)
 8102cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102cc6:	f003 0308 	and.w	r3, r3, #8
 8102cca:	60bb      	str	r3, [r7, #8]
 8102ccc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8102cce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102cd6:	2302      	movs	r3, #2
 8102cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102cdc:	2300      	movs	r3, #0
 8102cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102ce2:	2300      	movs	r3, #0
 8102ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102ce8:	2307      	movs	r3, #7
 8102cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102cee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102cf2:	4619      	mov	r1, r3
 8102cf4:	4805      	ldr	r0, [pc, #20]	; (8102d0c <HAL_UART_MspInit+0xd0>)
 8102cf6:	f001 fbc9 	bl	810448c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8102cfa:	bf00      	nop
 8102cfc:	37e8      	adds	r7, #232	; 0xe8
 8102cfe:	46bd      	mov	sp, r7
 8102d00:	bd80      	pop	{r7, pc}
 8102d02:	bf00      	nop
 8102d04:	40004800 	.word	0x40004800
 8102d08:	58024400 	.word	0x58024400
 8102d0c:	58020c00 	.word	0x58020c00

08102d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102d10:	b480      	push	{r7}
 8102d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102d14:	e7fe      	b.n	8102d14 <NMI_Handler+0x4>

08102d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102d16:	b480      	push	{r7}
 8102d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102d1a:	e7fe      	b.n	8102d1a <HardFault_Handler+0x4>

08102d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102d1c:	b480      	push	{r7}
 8102d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102d20:	e7fe      	b.n	8102d20 <MemManage_Handler+0x4>

08102d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102d22:	b480      	push	{r7}
 8102d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102d26:	e7fe      	b.n	8102d26 <BusFault_Handler+0x4>

08102d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102d28:	b480      	push	{r7}
 8102d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102d2c:	e7fe      	b.n	8102d2c <UsageFault_Handler+0x4>

08102d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102d2e:	b480      	push	{r7}
 8102d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102d32:	bf00      	nop
 8102d34:	46bd      	mov	sp, r7
 8102d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d3a:	4770      	bx	lr

08102d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102d3c:	b480      	push	{r7}
 8102d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102d40:	bf00      	nop
 8102d42:	46bd      	mov	sp, r7
 8102d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d48:	4770      	bx	lr

08102d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102d4a:	b480      	push	{r7}
 8102d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102d4e:	bf00      	nop
 8102d50:	46bd      	mov	sp, r7
 8102d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d56:	4770      	bx	lr

08102d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102d58:	b580      	push	{r7, lr}
 8102d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102d5c:	f000 f990 	bl	8103080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102d60:	bf00      	nop
 8102d62:	bd80      	pop	{r7, pc}

08102d64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8102d64:	b580      	push	{r7, lr}
 8102d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8102d68:	4802      	ldr	r0, [pc, #8]	; (8102d74 <TIM2_IRQHandler+0x10>)
 8102d6a:	f005 fe73 	bl	8108a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8102d6e:	bf00      	nop
 8102d70:	bd80      	pop	{r7, pc}
 8102d72:	bf00      	nop
 8102d74:	10000328 	.word	0x10000328

08102d78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102d78:	b480      	push	{r7}
 8102d7a:	af00      	add	r7, sp, #0
  return 1;
 8102d7c:	2301      	movs	r3, #1
}
 8102d7e:	4618      	mov	r0, r3
 8102d80:	46bd      	mov	sp, r7
 8102d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d86:	4770      	bx	lr

08102d88 <_kill>:

int _kill(int pid, int sig)
{
 8102d88:	b580      	push	{r7, lr}
 8102d8a:	b082      	sub	sp, #8
 8102d8c:	af00      	add	r7, sp, #0
 8102d8e:	6078      	str	r0, [r7, #4]
 8102d90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8102d92:	f008 f871 	bl	810ae78 <__errno>
 8102d96:	4603      	mov	r3, r0
 8102d98:	2216      	movs	r2, #22
 8102d9a:	601a      	str	r2, [r3, #0]
  return -1;
 8102d9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102da0:	4618      	mov	r0, r3
 8102da2:	3708      	adds	r7, #8
 8102da4:	46bd      	mov	sp, r7
 8102da6:	bd80      	pop	{r7, pc}

08102da8 <_exit>:

void _exit (int status)
{
 8102da8:	b580      	push	{r7, lr}
 8102daa:	b082      	sub	sp, #8
 8102dac:	af00      	add	r7, sp, #0
 8102dae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8102db0:	f04f 31ff 	mov.w	r1, #4294967295
 8102db4:	6878      	ldr	r0, [r7, #4]
 8102db6:	f7ff ffe7 	bl	8102d88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8102dba:	e7fe      	b.n	8102dba <_exit+0x12>

08102dbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102dbc:	b580      	push	{r7, lr}
 8102dbe:	b086      	sub	sp, #24
 8102dc0:	af00      	add	r7, sp, #0
 8102dc2:	60f8      	str	r0, [r7, #12]
 8102dc4:	60b9      	str	r1, [r7, #8]
 8102dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102dc8:	2300      	movs	r3, #0
 8102dca:	617b      	str	r3, [r7, #20]
 8102dcc:	e00a      	b.n	8102de4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8102dce:	f3af 8000 	nop.w
 8102dd2:	4601      	mov	r1, r0
 8102dd4:	68bb      	ldr	r3, [r7, #8]
 8102dd6:	1c5a      	adds	r2, r3, #1
 8102dd8:	60ba      	str	r2, [r7, #8]
 8102dda:	b2ca      	uxtb	r2, r1
 8102ddc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102dde:	697b      	ldr	r3, [r7, #20]
 8102de0:	3301      	adds	r3, #1
 8102de2:	617b      	str	r3, [r7, #20]
 8102de4:	697a      	ldr	r2, [r7, #20]
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	429a      	cmp	r2, r3
 8102dea:	dbf0      	blt.n	8102dce <_read+0x12>
  }

  return len;
 8102dec:	687b      	ldr	r3, [r7, #4]
}
 8102dee:	4618      	mov	r0, r3
 8102df0:	3718      	adds	r7, #24
 8102df2:	46bd      	mov	sp, r7
 8102df4:	bd80      	pop	{r7, pc}

08102df6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8102df6:	b580      	push	{r7, lr}
 8102df8:	b086      	sub	sp, #24
 8102dfa:	af00      	add	r7, sp, #0
 8102dfc:	60f8      	str	r0, [r7, #12]
 8102dfe:	60b9      	str	r1, [r7, #8]
 8102e00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102e02:	2300      	movs	r3, #0
 8102e04:	617b      	str	r3, [r7, #20]
 8102e06:	e009      	b.n	8102e1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8102e08:	68bb      	ldr	r3, [r7, #8]
 8102e0a:	1c5a      	adds	r2, r3, #1
 8102e0c:	60ba      	str	r2, [r7, #8]
 8102e0e:	781b      	ldrb	r3, [r3, #0]
 8102e10:	4618      	mov	r0, r3
 8102e12:	f7ff fc77 	bl	8102704 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102e16:	697b      	ldr	r3, [r7, #20]
 8102e18:	3301      	adds	r3, #1
 8102e1a:	617b      	str	r3, [r7, #20]
 8102e1c:	697a      	ldr	r2, [r7, #20]
 8102e1e:	687b      	ldr	r3, [r7, #4]
 8102e20:	429a      	cmp	r2, r3
 8102e22:	dbf1      	blt.n	8102e08 <_write+0x12>
  }
  return len;
 8102e24:	687b      	ldr	r3, [r7, #4]
}
 8102e26:	4618      	mov	r0, r3
 8102e28:	3718      	adds	r7, #24
 8102e2a:	46bd      	mov	sp, r7
 8102e2c:	bd80      	pop	{r7, pc}

08102e2e <_close>:

int _close(int file)
{
 8102e2e:	b480      	push	{r7}
 8102e30:	b083      	sub	sp, #12
 8102e32:	af00      	add	r7, sp, #0
 8102e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8102e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102e3a:	4618      	mov	r0, r3
 8102e3c:	370c      	adds	r7, #12
 8102e3e:	46bd      	mov	sp, r7
 8102e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e44:	4770      	bx	lr

08102e46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8102e46:	b480      	push	{r7}
 8102e48:	b083      	sub	sp, #12
 8102e4a:	af00      	add	r7, sp, #0
 8102e4c:	6078      	str	r0, [r7, #4]
 8102e4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8102e50:	683b      	ldr	r3, [r7, #0]
 8102e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8102e56:	605a      	str	r2, [r3, #4]
  return 0;
 8102e58:	2300      	movs	r3, #0
}
 8102e5a:	4618      	mov	r0, r3
 8102e5c:	370c      	adds	r7, #12
 8102e5e:	46bd      	mov	sp, r7
 8102e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e64:	4770      	bx	lr

08102e66 <_isatty>:

int _isatty(int file)
{
 8102e66:	b480      	push	{r7}
 8102e68:	b083      	sub	sp, #12
 8102e6a:	af00      	add	r7, sp, #0
 8102e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8102e6e:	2301      	movs	r3, #1
}
 8102e70:	4618      	mov	r0, r3
 8102e72:	370c      	adds	r7, #12
 8102e74:	46bd      	mov	sp, r7
 8102e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e7a:	4770      	bx	lr

08102e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102e7c:	b480      	push	{r7}
 8102e7e:	b085      	sub	sp, #20
 8102e80:	af00      	add	r7, sp, #0
 8102e82:	60f8      	str	r0, [r7, #12]
 8102e84:	60b9      	str	r1, [r7, #8]
 8102e86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8102e88:	2300      	movs	r3, #0
}
 8102e8a:	4618      	mov	r0, r3
 8102e8c:	3714      	adds	r7, #20
 8102e8e:	46bd      	mov	sp, r7
 8102e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e94:	4770      	bx	lr
	...

08102e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102e98:	b580      	push	{r7, lr}
 8102e9a:	b086      	sub	sp, #24
 8102e9c:	af00      	add	r7, sp, #0
 8102e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102ea0:	4a14      	ldr	r2, [pc, #80]	; (8102ef4 <_sbrk+0x5c>)
 8102ea2:	4b15      	ldr	r3, [pc, #84]	; (8102ef8 <_sbrk+0x60>)
 8102ea4:	1ad3      	subs	r3, r2, r3
 8102ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102ea8:	697b      	ldr	r3, [r7, #20]
 8102eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102eac:	4b13      	ldr	r3, [pc, #76]	; (8102efc <_sbrk+0x64>)
 8102eae:	681b      	ldr	r3, [r3, #0]
 8102eb0:	2b00      	cmp	r3, #0
 8102eb2:	d102      	bne.n	8102eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102eb4:	4b11      	ldr	r3, [pc, #68]	; (8102efc <_sbrk+0x64>)
 8102eb6:	4a12      	ldr	r2, [pc, #72]	; (8102f00 <_sbrk+0x68>)
 8102eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102eba:	4b10      	ldr	r3, [pc, #64]	; (8102efc <_sbrk+0x64>)
 8102ebc:	681a      	ldr	r2, [r3, #0]
 8102ebe:	687b      	ldr	r3, [r7, #4]
 8102ec0:	4413      	add	r3, r2
 8102ec2:	693a      	ldr	r2, [r7, #16]
 8102ec4:	429a      	cmp	r2, r3
 8102ec6:	d207      	bcs.n	8102ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102ec8:	f007 ffd6 	bl	810ae78 <__errno>
 8102ecc:	4603      	mov	r3, r0
 8102ece:	220c      	movs	r2, #12
 8102ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8102ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8102ed6:	e009      	b.n	8102eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8102ed8:	4b08      	ldr	r3, [pc, #32]	; (8102efc <_sbrk+0x64>)
 8102eda:	681b      	ldr	r3, [r3, #0]
 8102edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8102ede:	4b07      	ldr	r3, [pc, #28]	; (8102efc <_sbrk+0x64>)
 8102ee0:	681a      	ldr	r2, [r3, #0]
 8102ee2:	687b      	ldr	r3, [r7, #4]
 8102ee4:	4413      	add	r3, r2
 8102ee6:	4a05      	ldr	r2, [pc, #20]	; (8102efc <_sbrk+0x64>)
 8102ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8102eea:	68fb      	ldr	r3, [r7, #12]
}
 8102eec:	4618      	mov	r0, r3
 8102eee:	3718      	adds	r7, #24
 8102ef0:	46bd      	mov	sp, r7
 8102ef2:	bd80      	pop	{r7, pc}
 8102ef4:	10048000 	.word	0x10048000
 8102ef8:	00000400 	.word	0x00000400
 8102efc:	100004a0 	.word	0x100004a0
 8102f00:	100004b8 	.word	0x100004b8

08102f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102f3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102f08:	f7fe f8fe 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102f0c:	480c      	ldr	r0, [pc, #48]	; (8102f40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102f0e:	490d      	ldr	r1, [pc, #52]	; (8102f44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102f10:	4a0d      	ldr	r2, [pc, #52]	; (8102f48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102f14:	e002      	b.n	8102f1c <LoopCopyDataInit>

08102f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102f1a:	3304      	adds	r3, #4

08102f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102f20:	d3f9      	bcc.n	8102f16 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102f22:	4a0a      	ldr	r2, [pc, #40]	; (8102f4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102f24:	4c0a      	ldr	r4, [pc, #40]	; (8102f50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102f28:	e001      	b.n	8102f2e <LoopFillZerobss>

08102f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102f2c:	3204      	adds	r2, #4

08102f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102f30:	d3fb      	bcc.n	8102f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102f32:	f007 ffa7 	bl	810ae84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102f36:	f7fe ff6d 	bl	8101e14 <main>
  bx  lr
 8102f3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102f3c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102f40:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102f44:	100001f4 	.word	0x100001f4
  ldr r2, =_sidata
 8102f48:	0811002c 	.word	0x0811002c
  ldr r2, =_sbss
 8102f4c:	100001f4 	.word	0x100001f4
  ldr r4, =_ebss
 8102f50:	100004b8 	.word	0x100004b8

08102f54 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102f54:	e7fe      	b.n	8102f54 <ADC3_IRQHandler>
	...

08102f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102f58:	b580      	push	{r7, lr}
 8102f5a:	b082      	sub	sp, #8
 8102f5c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102f5e:	4b28      	ldr	r3, [pc, #160]	; (8103000 <HAL_Init+0xa8>)
 8102f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102f64:	4a26      	ldr	r2, [pc, #152]	; (8103000 <HAL_Init+0xa8>)
 8102f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102f6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102f6e:	4b24      	ldr	r3, [pc, #144]	; (8103000 <HAL_Init+0xa8>)
 8102f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102f78:	603b      	str	r3, [r7, #0]
 8102f7a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102f7c:	4b21      	ldr	r3, [pc, #132]	; (8103004 <HAL_Init+0xac>)
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102f84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102f88:	4a1e      	ldr	r2, [pc, #120]	; (8103004 <HAL_Init+0xac>)
 8102f8a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102f8e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102f90:	4b1c      	ldr	r3, [pc, #112]	; (8103004 <HAL_Init+0xac>)
 8102f92:	681b      	ldr	r3, [r3, #0]
 8102f94:	4a1b      	ldr	r2, [pc, #108]	; (8103004 <HAL_Init+0xac>)
 8102f96:	f043 0301 	orr.w	r3, r3, #1
 8102f9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102f9c:	2003      	movs	r0, #3
 8102f9e:	f001 fa21 	bl	81043e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102fa2:	f002 fb9b 	bl	81056dc <HAL_RCC_GetSysClockFreq>
 8102fa6:	4602      	mov	r2, r0
 8102fa8:	4b15      	ldr	r3, [pc, #84]	; (8103000 <HAL_Init+0xa8>)
 8102faa:	699b      	ldr	r3, [r3, #24]
 8102fac:	0a1b      	lsrs	r3, r3, #8
 8102fae:	f003 030f 	and.w	r3, r3, #15
 8102fb2:	4915      	ldr	r1, [pc, #84]	; (8103008 <HAL_Init+0xb0>)
 8102fb4:	5ccb      	ldrb	r3, [r1, r3]
 8102fb6:	f003 031f 	and.w	r3, r3, #31
 8102fba:	fa22 f303 	lsr.w	r3, r2, r3
 8102fbe:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102fc0:	4b0f      	ldr	r3, [pc, #60]	; (8103000 <HAL_Init+0xa8>)
 8102fc2:	699b      	ldr	r3, [r3, #24]
 8102fc4:	f003 030f 	and.w	r3, r3, #15
 8102fc8:	4a0f      	ldr	r2, [pc, #60]	; (8103008 <HAL_Init+0xb0>)
 8102fca:	5cd3      	ldrb	r3, [r2, r3]
 8102fcc:	f003 031f 	and.w	r3, r3, #31
 8102fd0:	687a      	ldr	r2, [r7, #4]
 8102fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8102fd6:	4a0d      	ldr	r2, [pc, #52]	; (810300c <HAL_Init+0xb4>)
 8102fd8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102fda:	4b0c      	ldr	r3, [pc, #48]	; (810300c <HAL_Init+0xb4>)
 8102fdc:	681b      	ldr	r3, [r3, #0]
 8102fde:	4a0c      	ldr	r2, [pc, #48]	; (8103010 <HAL_Init+0xb8>)
 8102fe0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102fe2:	2000      	movs	r0, #0
 8102fe4:	f000 f816 	bl	8103014 <HAL_InitTick>
 8102fe8:	4603      	mov	r3, r0
 8102fea:	2b00      	cmp	r3, #0
 8102fec:	d001      	beq.n	8102ff2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102fee:	2301      	movs	r3, #1
 8102ff0:	e002      	b.n	8102ff8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102ff2:	f7ff fc69 	bl	81028c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102ff6:	2300      	movs	r3, #0
}
 8102ff8:	4618      	mov	r0, r3
 8102ffa:	3708      	adds	r7, #8
 8102ffc:	46bd      	mov	sp, r7
 8102ffe:	bd80      	pop	{r7, pc}
 8103000:	58024400 	.word	0x58024400
 8103004:	40024400 	.word	0x40024400
 8103008:	0810fb38 	.word	0x0810fb38
 810300c:	10000004 	.word	0x10000004
 8103010:	10000000 	.word	0x10000000

08103014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103014:	b580      	push	{r7, lr}
 8103016:	b082      	sub	sp, #8
 8103018:	af00      	add	r7, sp, #0
 810301a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810301c:	4b15      	ldr	r3, [pc, #84]	; (8103074 <HAL_InitTick+0x60>)
 810301e:	781b      	ldrb	r3, [r3, #0]
 8103020:	2b00      	cmp	r3, #0
 8103022:	d101      	bne.n	8103028 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8103024:	2301      	movs	r3, #1
 8103026:	e021      	b.n	810306c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8103028:	4b13      	ldr	r3, [pc, #76]	; (8103078 <HAL_InitTick+0x64>)
 810302a:	681a      	ldr	r2, [r3, #0]
 810302c:	4b11      	ldr	r3, [pc, #68]	; (8103074 <HAL_InitTick+0x60>)
 810302e:	781b      	ldrb	r3, [r3, #0]
 8103030:	4619      	mov	r1, r3
 8103032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8103036:	fbb3 f3f1 	udiv	r3, r3, r1
 810303a:	fbb2 f3f3 	udiv	r3, r2, r3
 810303e:	4618      	mov	r0, r3
 8103040:	f001 fa03 	bl	810444a <HAL_SYSTICK_Config>
 8103044:	4603      	mov	r3, r0
 8103046:	2b00      	cmp	r3, #0
 8103048:	d001      	beq.n	810304e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810304a:	2301      	movs	r3, #1
 810304c:	e00e      	b.n	810306c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	2b0f      	cmp	r3, #15
 8103052:	d80a      	bhi.n	810306a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103054:	2200      	movs	r2, #0
 8103056:	6879      	ldr	r1, [r7, #4]
 8103058:	f04f 30ff 	mov.w	r0, #4294967295
 810305c:	f001 f9cd 	bl	81043fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103060:	4a06      	ldr	r2, [pc, #24]	; (810307c <HAL_InitTick+0x68>)
 8103062:	687b      	ldr	r3, [r7, #4]
 8103064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8103066:	2300      	movs	r3, #0
 8103068:	e000      	b.n	810306c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810306a:	2301      	movs	r3, #1
}
 810306c:	4618      	mov	r0, r3
 810306e:	3708      	adds	r7, #8
 8103070:	46bd      	mov	sp, r7
 8103072:	bd80      	pop	{r7, pc}
 8103074:	1000001c 	.word	0x1000001c
 8103078:	10000000 	.word	0x10000000
 810307c:	10000018 	.word	0x10000018

08103080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103080:	b480      	push	{r7}
 8103082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103084:	4b06      	ldr	r3, [pc, #24]	; (81030a0 <HAL_IncTick+0x20>)
 8103086:	781b      	ldrb	r3, [r3, #0]
 8103088:	461a      	mov	r2, r3
 810308a:	4b06      	ldr	r3, [pc, #24]	; (81030a4 <HAL_IncTick+0x24>)
 810308c:	681b      	ldr	r3, [r3, #0]
 810308e:	4413      	add	r3, r2
 8103090:	4a04      	ldr	r2, [pc, #16]	; (81030a4 <HAL_IncTick+0x24>)
 8103092:	6013      	str	r3, [r2, #0]
}
 8103094:	bf00      	nop
 8103096:	46bd      	mov	sp, r7
 8103098:	f85d 7b04 	ldr.w	r7, [sp], #4
 810309c:	4770      	bx	lr
 810309e:	bf00      	nop
 81030a0:	1000001c 	.word	0x1000001c
 81030a4:	100004a4 	.word	0x100004a4

081030a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81030a8:	b480      	push	{r7}
 81030aa:	af00      	add	r7, sp, #0
  return uwTick;
 81030ac:	4b03      	ldr	r3, [pc, #12]	; (81030bc <HAL_GetTick+0x14>)
 81030ae:	681b      	ldr	r3, [r3, #0]
}
 81030b0:	4618      	mov	r0, r3
 81030b2:	46bd      	mov	sp, r7
 81030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030b8:	4770      	bx	lr
 81030ba:	bf00      	nop
 81030bc:	100004a4 	.word	0x100004a4

081030c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81030c0:	b580      	push	{r7, lr}
 81030c2:	b084      	sub	sp, #16
 81030c4:	af00      	add	r7, sp, #0
 81030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81030c8:	f7ff ffee 	bl	81030a8 <HAL_GetTick>
 81030cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81030ce:	687b      	ldr	r3, [r7, #4]
 81030d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81030d2:	68fb      	ldr	r3, [r7, #12]
 81030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81030d8:	d005      	beq.n	81030e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81030da:	4b0a      	ldr	r3, [pc, #40]	; (8103104 <HAL_Delay+0x44>)
 81030dc:	781b      	ldrb	r3, [r3, #0]
 81030de:	461a      	mov	r2, r3
 81030e0:	68fb      	ldr	r3, [r7, #12]
 81030e2:	4413      	add	r3, r2
 81030e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81030e6:	bf00      	nop
 81030e8:	f7ff ffde 	bl	81030a8 <HAL_GetTick>
 81030ec:	4602      	mov	r2, r0
 81030ee:	68bb      	ldr	r3, [r7, #8]
 81030f0:	1ad3      	subs	r3, r2, r3
 81030f2:	68fa      	ldr	r2, [r7, #12]
 81030f4:	429a      	cmp	r2, r3
 81030f6:	d8f7      	bhi.n	81030e8 <HAL_Delay+0x28>
  {
  }
}
 81030f8:	bf00      	nop
 81030fa:	bf00      	nop
 81030fc:	3710      	adds	r7, #16
 81030fe:	46bd      	mov	sp, r7
 8103100:	bd80      	pop	{r7, pc}
 8103102:	bf00      	nop
 8103104:	1000001c 	.word	0x1000001c

08103108 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8103108:	b480      	push	{r7}
 810310a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 810310c:	4b03      	ldr	r3, [pc, #12]	; (810311c <HAL_GetREVID+0x14>)
 810310e:	681b      	ldr	r3, [r3, #0]
 8103110:	0c1b      	lsrs	r3, r3, #16
}
 8103112:	4618      	mov	r0, r3
 8103114:	46bd      	mov	sp, r7
 8103116:	f85d 7b04 	ldr.w	r7, [sp], #4
 810311a:	4770      	bx	lr
 810311c:	5c001000 	.word	0x5c001000

08103120 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8103120:	b480      	push	{r7}
 8103122:	b083      	sub	sp, #12
 8103124:	af00      	add	r7, sp, #0
 8103126:	6078      	str	r0, [r7, #4]
 8103128:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 810312a:	687b      	ldr	r3, [r7, #4]
 810312c:	689b      	ldr	r3, [r3, #8]
 810312e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8103132:	683b      	ldr	r3, [r7, #0]
 8103134:	431a      	orrs	r2, r3
 8103136:	687b      	ldr	r3, [r7, #4]
 8103138:	609a      	str	r2, [r3, #8]
}
 810313a:	bf00      	nop
 810313c:	370c      	adds	r7, #12
 810313e:	46bd      	mov	sp, r7
 8103140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103144:	4770      	bx	lr

08103146 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8103146:	b480      	push	{r7}
 8103148:	b083      	sub	sp, #12
 810314a:	af00      	add	r7, sp, #0
 810314c:	6078      	str	r0, [r7, #4]
 810314e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8103150:	687b      	ldr	r3, [r7, #4]
 8103152:	689b      	ldr	r3, [r3, #8]
 8103154:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8103158:	683b      	ldr	r3, [r7, #0]
 810315a:	431a      	orrs	r2, r3
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	609a      	str	r2, [r3, #8]
}
 8103160:	bf00      	nop
 8103162:	370c      	adds	r7, #12
 8103164:	46bd      	mov	sp, r7
 8103166:	f85d 7b04 	ldr.w	r7, [sp], #4
 810316a:	4770      	bx	lr

0810316c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 810316c:	b480      	push	{r7}
 810316e:	b083      	sub	sp, #12
 8103170:	af00      	add	r7, sp, #0
 8103172:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	689b      	ldr	r3, [r3, #8]
 8103178:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 810317c:	4618      	mov	r0, r3
 810317e:	370c      	adds	r7, #12
 8103180:	46bd      	mov	sp, r7
 8103182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103186:	4770      	bx	lr

08103188 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8103188:	b480      	push	{r7}
 810318a:	b087      	sub	sp, #28
 810318c:	af00      	add	r7, sp, #0
 810318e:	60f8      	str	r0, [r7, #12]
 8103190:	60b9      	str	r1, [r7, #8]
 8103192:	607a      	str	r2, [r7, #4]
 8103194:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8103196:	68fb      	ldr	r3, [r7, #12]
 8103198:	3360      	adds	r3, #96	; 0x60
 810319a:	461a      	mov	r2, r3
 810319c:	68bb      	ldr	r3, [r7, #8]
 810319e:	009b      	lsls	r3, r3, #2
 81031a0:	4413      	add	r3, r2
 81031a2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 81031a4:	697b      	ldr	r3, [r7, #20]
 81031a6:	681b      	ldr	r3, [r3, #0]
 81031a8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 81031b2:	683b      	ldr	r3, [r7, #0]
 81031b4:	430b      	orrs	r3, r1
 81031b6:	431a      	orrs	r2, r3
 81031b8:	697b      	ldr	r3, [r7, #20]
 81031ba:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 81031bc:	bf00      	nop
 81031be:	371c      	adds	r7, #28
 81031c0:	46bd      	mov	sp, r7
 81031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031c6:	4770      	bx	lr

081031c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 81031c8:	b480      	push	{r7}
 81031ca:	b085      	sub	sp, #20
 81031cc:	af00      	add	r7, sp, #0
 81031ce:	60f8      	str	r0, [r7, #12]
 81031d0:	60b9      	str	r1, [r7, #8]
 81031d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 81031d4:	68fb      	ldr	r3, [r7, #12]
 81031d6:	691b      	ldr	r3, [r3, #16]
 81031d8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 81031dc:	68bb      	ldr	r3, [r7, #8]
 81031de:	f003 031f 	and.w	r3, r3, #31
 81031e2:	6879      	ldr	r1, [r7, #4]
 81031e4:	fa01 f303 	lsl.w	r3, r1, r3
 81031e8:	431a      	orrs	r2, r3
 81031ea:	68fb      	ldr	r3, [r7, #12]
 81031ec:	611a      	str	r2, [r3, #16]
}
 81031ee:	bf00      	nop
 81031f0:	3714      	adds	r7, #20
 81031f2:	46bd      	mov	sp, r7
 81031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031f8:	4770      	bx	lr

081031fa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 81031fa:	b480      	push	{r7}
 81031fc:	b087      	sub	sp, #28
 81031fe:	af00      	add	r7, sp, #0
 8103200:	60f8      	str	r0, [r7, #12]
 8103202:	60b9      	str	r1, [r7, #8]
 8103204:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8103206:	68fb      	ldr	r3, [r7, #12]
 8103208:	3360      	adds	r3, #96	; 0x60
 810320a:	461a      	mov	r2, r3
 810320c:	68bb      	ldr	r3, [r7, #8]
 810320e:	009b      	lsls	r3, r3, #2
 8103210:	4413      	add	r3, r2
 8103212:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8103214:	697b      	ldr	r3, [r7, #20]
 8103216:	681b      	ldr	r3, [r3, #0]
 8103218:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810321c:	687b      	ldr	r3, [r7, #4]
 810321e:	431a      	orrs	r2, r3
 8103220:	697b      	ldr	r3, [r7, #20]
 8103222:	601a      	str	r2, [r3, #0]
  }
}
 8103224:	bf00      	nop
 8103226:	371c      	adds	r7, #28
 8103228:	46bd      	mov	sp, r7
 810322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810322e:	4770      	bx	lr

08103230 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8103230:	b480      	push	{r7}
 8103232:	b087      	sub	sp, #28
 8103234:	af00      	add	r7, sp, #0
 8103236:	60f8      	str	r0, [r7, #12]
 8103238:	60b9      	str	r1, [r7, #8]
 810323a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 810323c:	68fb      	ldr	r3, [r7, #12]
 810323e:	3330      	adds	r3, #48	; 0x30
 8103240:	461a      	mov	r2, r3
 8103242:	68bb      	ldr	r3, [r7, #8]
 8103244:	0a1b      	lsrs	r3, r3, #8
 8103246:	009b      	lsls	r3, r3, #2
 8103248:	f003 030c 	and.w	r3, r3, #12
 810324c:	4413      	add	r3, r2
 810324e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8103250:	697b      	ldr	r3, [r7, #20]
 8103252:	681a      	ldr	r2, [r3, #0]
 8103254:	68bb      	ldr	r3, [r7, #8]
 8103256:	f003 031f 	and.w	r3, r3, #31
 810325a:	211f      	movs	r1, #31
 810325c:	fa01 f303 	lsl.w	r3, r1, r3
 8103260:	43db      	mvns	r3, r3
 8103262:	401a      	ands	r2, r3
 8103264:	687b      	ldr	r3, [r7, #4]
 8103266:	0e9b      	lsrs	r3, r3, #26
 8103268:	f003 011f 	and.w	r1, r3, #31
 810326c:	68bb      	ldr	r3, [r7, #8]
 810326e:	f003 031f 	and.w	r3, r3, #31
 8103272:	fa01 f303 	lsl.w	r3, r1, r3
 8103276:	431a      	orrs	r2, r3
 8103278:	697b      	ldr	r3, [r7, #20]
 810327a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 810327c:	bf00      	nop
 810327e:	371c      	adds	r7, #28
 8103280:	46bd      	mov	sp, r7
 8103282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103286:	4770      	bx	lr

08103288 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8103288:	b480      	push	{r7}
 810328a:	b087      	sub	sp, #28
 810328c:	af00      	add	r7, sp, #0
 810328e:	60f8      	str	r0, [r7, #12]
 8103290:	60b9      	str	r1, [r7, #8]
 8103292:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8103294:	68fb      	ldr	r3, [r7, #12]
 8103296:	3314      	adds	r3, #20
 8103298:	461a      	mov	r2, r3
 810329a:	68bb      	ldr	r3, [r7, #8]
 810329c:	0e5b      	lsrs	r3, r3, #25
 810329e:	009b      	lsls	r3, r3, #2
 81032a0:	f003 0304 	and.w	r3, r3, #4
 81032a4:	4413      	add	r3, r2
 81032a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81032a8:	697b      	ldr	r3, [r7, #20]
 81032aa:	681a      	ldr	r2, [r3, #0]
 81032ac:	68bb      	ldr	r3, [r7, #8]
 81032ae:	0d1b      	lsrs	r3, r3, #20
 81032b0:	f003 031f 	and.w	r3, r3, #31
 81032b4:	2107      	movs	r1, #7
 81032b6:	fa01 f303 	lsl.w	r3, r1, r3
 81032ba:	43db      	mvns	r3, r3
 81032bc:	401a      	ands	r2, r3
 81032be:	68bb      	ldr	r3, [r7, #8]
 81032c0:	0d1b      	lsrs	r3, r3, #20
 81032c2:	f003 031f 	and.w	r3, r3, #31
 81032c6:	6879      	ldr	r1, [r7, #4]
 81032c8:	fa01 f303 	lsl.w	r3, r1, r3
 81032cc:	431a      	orrs	r2, r3
 81032ce:	697b      	ldr	r3, [r7, #20]
 81032d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 81032d2:	bf00      	nop
 81032d4:	371c      	adds	r7, #28
 81032d6:	46bd      	mov	sp, r7
 81032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032dc:	4770      	bx	lr
	...

081032e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81032e0:	b480      	push	{r7}
 81032e2:	b085      	sub	sp, #20
 81032e4:	af00      	add	r7, sp, #0
 81032e6:	60f8      	str	r0, [r7, #12]
 81032e8:	60b9      	str	r1, [r7, #8]
 81032ea:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81032ec:	68fb      	ldr	r3, [r7, #12]
 81032ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 81032f2:	68bb      	ldr	r3, [r7, #8]
 81032f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81032f8:	43db      	mvns	r3, r3
 81032fa:	401a      	ands	r2, r3
 81032fc:	687b      	ldr	r3, [r7, #4]
 81032fe:	f003 0318 	and.w	r3, r3, #24
 8103302:	4908      	ldr	r1, [pc, #32]	; (8103324 <LL_ADC_SetChannelSingleDiff+0x44>)
 8103304:	40d9      	lsrs	r1, r3
 8103306:	68bb      	ldr	r3, [r7, #8]
 8103308:	400b      	ands	r3, r1
 810330a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810330e:	431a      	orrs	r2, r3
 8103310:	68fb      	ldr	r3, [r7, #12]
 8103312:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8103316:	bf00      	nop
 8103318:	3714      	adds	r7, #20
 810331a:	46bd      	mov	sp, r7
 810331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103320:	4770      	bx	lr
 8103322:	bf00      	nop
 8103324:	000fffff 	.word	0x000fffff

08103328 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8103328:	b480      	push	{r7}
 810332a:	b083      	sub	sp, #12
 810332c:	af00      	add	r7, sp, #0
 810332e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	689b      	ldr	r3, [r3, #8]
 8103334:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8103338:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 810333c:	687a      	ldr	r2, [r7, #4]
 810333e:	6093      	str	r3, [r2, #8]
}
 8103340:	bf00      	nop
 8103342:	370c      	adds	r7, #12
 8103344:	46bd      	mov	sp, r7
 8103346:	f85d 7b04 	ldr.w	r7, [sp], #4
 810334a:	4770      	bx	lr

0810334c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 810334c:	b480      	push	{r7}
 810334e:	b083      	sub	sp, #12
 8103350:	af00      	add	r7, sp, #0
 8103352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8103354:	687b      	ldr	r3, [r7, #4]
 8103356:	689b      	ldr	r3, [r3, #8]
 8103358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810335c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103360:	d101      	bne.n	8103366 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8103362:	2301      	movs	r3, #1
 8103364:	e000      	b.n	8103368 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8103366:	2300      	movs	r3, #0
}
 8103368:	4618      	mov	r0, r3
 810336a:	370c      	adds	r7, #12
 810336c:	46bd      	mov	sp, r7
 810336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103372:	4770      	bx	lr

08103374 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8103374:	b480      	push	{r7}
 8103376:	b083      	sub	sp, #12
 8103378:	af00      	add	r7, sp, #0
 810337a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	689b      	ldr	r3, [r3, #8]
 8103380:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8103384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8103388:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810338c:	687b      	ldr	r3, [r7, #4]
 810338e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8103390:	bf00      	nop
 8103392:	370c      	adds	r7, #12
 8103394:	46bd      	mov	sp, r7
 8103396:	f85d 7b04 	ldr.w	r7, [sp], #4
 810339a:	4770      	bx	lr

0810339c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 810339c:	b480      	push	{r7}
 810339e:	b083      	sub	sp, #12
 81033a0:	af00      	add	r7, sp, #0
 81033a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	689b      	ldr	r3, [r3, #8]
 81033a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81033ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81033b0:	d101      	bne.n	81033b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 81033b2:	2301      	movs	r3, #1
 81033b4:	e000      	b.n	81033b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 81033b6:	2300      	movs	r3, #0
}
 81033b8:	4618      	mov	r0, r3
 81033ba:	370c      	adds	r7, #12
 81033bc:	46bd      	mov	sp, r7
 81033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033c2:	4770      	bx	lr

081033c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 81033c4:	b480      	push	{r7}
 81033c6:	b083      	sub	sp, #12
 81033c8:	af00      	add	r7, sp, #0
 81033ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	689b      	ldr	r3, [r3, #8]
 81033d0:	f003 0301 	and.w	r3, r3, #1
 81033d4:	2b01      	cmp	r3, #1
 81033d6:	d101      	bne.n	81033dc <LL_ADC_IsEnabled+0x18>
 81033d8:	2301      	movs	r3, #1
 81033da:	e000      	b.n	81033de <LL_ADC_IsEnabled+0x1a>
 81033dc:	2300      	movs	r3, #0
}
 81033de:	4618      	mov	r0, r3
 81033e0:	370c      	adds	r7, #12
 81033e2:	46bd      	mov	sp, r7
 81033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033e8:	4770      	bx	lr

081033ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81033ea:	b480      	push	{r7}
 81033ec:	b083      	sub	sp, #12
 81033ee:	af00      	add	r7, sp, #0
 81033f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	689b      	ldr	r3, [r3, #8]
 81033f6:	f003 0304 	and.w	r3, r3, #4
 81033fa:	2b04      	cmp	r3, #4
 81033fc:	d101      	bne.n	8103402 <LL_ADC_REG_IsConversionOngoing+0x18>
 81033fe:	2301      	movs	r3, #1
 8103400:	e000      	b.n	8103404 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103402:	2300      	movs	r3, #0
}
 8103404:	4618      	mov	r0, r3
 8103406:	370c      	adds	r7, #12
 8103408:	46bd      	mov	sp, r7
 810340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810340e:	4770      	bx	lr

08103410 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8103410:	b480      	push	{r7}
 8103412:	b083      	sub	sp, #12
 8103414:	af00      	add	r7, sp, #0
 8103416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8103418:	687b      	ldr	r3, [r7, #4]
 810341a:	689b      	ldr	r3, [r3, #8]
 810341c:	f003 0308 	and.w	r3, r3, #8
 8103420:	2b08      	cmp	r3, #8
 8103422:	d101      	bne.n	8103428 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8103424:	2301      	movs	r3, #1
 8103426:	e000      	b.n	810342a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8103428:	2300      	movs	r3, #0
}
 810342a:	4618      	mov	r0, r3
 810342c:	370c      	adds	r7, #12
 810342e:	46bd      	mov	sp, r7
 8103430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103434:	4770      	bx	lr
	...

08103438 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8103438:	b590      	push	{r4, r7, lr}
 810343a:	b089      	sub	sp, #36	; 0x24
 810343c:	af00      	add	r7, sp, #0
 810343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103440:	2300      	movs	r3, #0
 8103442:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8103444:	2300      	movs	r3, #0
 8103446:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	2b00      	cmp	r3, #0
 810344c:	d101      	bne.n	8103452 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 810344e:	2301      	movs	r3, #1
 8103450:	e18f      	b.n	8103772 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	68db      	ldr	r3, [r3, #12]
 8103456:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810345c:	2b00      	cmp	r3, #0
 810345e:	d109      	bne.n	8103474 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8103460:	6878      	ldr	r0, [r7, #4]
 8103462:	f7ff fa4b 	bl	81028fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	2200      	movs	r2, #0
 810346a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	2200      	movs	r2, #0
 8103470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8103474:	687b      	ldr	r3, [r7, #4]
 8103476:	681b      	ldr	r3, [r3, #0]
 8103478:	4618      	mov	r0, r3
 810347a:	f7ff ff67 	bl	810334c <LL_ADC_IsDeepPowerDownEnabled>
 810347e:	4603      	mov	r3, r0
 8103480:	2b00      	cmp	r3, #0
 8103482:	d004      	beq.n	810348e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	681b      	ldr	r3, [r3, #0]
 8103488:	4618      	mov	r0, r3
 810348a:	f7ff ff4d 	bl	8103328 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	681b      	ldr	r3, [r3, #0]
 8103492:	4618      	mov	r0, r3
 8103494:	f7ff ff82 	bl	810339c <LL_ADC_IsInternalRegulatorEnabled>
 8103498:	4603      	mov	r3, r0
 810349a:	2b00      	cmp	r3, #0
 810349c:	d114      	bne.n	81034c8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810349e:	687b      	ldr	r3, [r7, #4]
 81034a0:	681b      	ldr	r3, [r3, #0]
 81034a2:	4618      	mov	r0, r3
 81034a4:	f7ff ff66 	bl	8103374 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81034a8:	4b88      	ldr	r3, [pc, #544]	; (81036cc <HAL_ADC_Init+0x294>)
 81034aa:	681b      	ldr	r3, [r3, #0]
 81034ac:	099b      	lsrs	r3, r3, #6
 81034ae:	4a88      	ldr	r2, [pc, #544]	; (81036d0 <HAL_ADC_Init+0x298>)
 81034b0:	fba2 2303 	umull	r2, r3, r2, r3
 81034b4:	099b      	lsrs	r3, r3, #6
 81034b6:	3301      	adds	r3, #1
 81034b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81034ba:	e002      	b.n	81034c2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 81034bc:	68bb      	ldr	r3, [r7, #8]
 81034be:	3b01      	subs	r3, #1
 81034c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81034c2:	68bb      	ldr	r3, [r7, #8]
 81034c4:	2b00      	cmp	r3, #0
 81034c6:	d1f9      	bne.n	81034bc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	681b      	ldr	r3, [r3, #0]
 81034cc:	4618      	mov	r0, r3
 81034ce:	f7ff ff65 	bl	810339c <LL_ADC_IsInternalRegulatorEnabled>
 81034d2:	4603      	mov	r3, r0
 81034d4:	2b00      	cmp	r3, #0
 81034d6:	d10d      	bne.n	81034f4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81034d8:	687b      	ldr	r3, [r7, #4]
 81034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034dc:	f043 0210 	orr.w	r2, r3, #16
 81034e0:	687b      	ldr	r3, [r7, #4]
 81034e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81034e4:	687b      	ldr	r3, [r7, #4]
 81034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034e8:	f043 0201 	orr.w	r2, r3, #1
 81034ec:	687b      	ldr	r3, [r7, #4]
 81034ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 81034f0:	2301      	movs	r3, #1
 81034f2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81034f4:	687b      	ldr	r3, [r7, #4]
 81034f6:	681b      	ldr	r3, [r3, #0]
 81034f8:	4618      	mov	r0, r3
 81034fa:	f7ff ff76 	bl	81033ea <LL_ADC_REG_IsConversionOngoing>
 81034fe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103504:	f003 0310 	and.w	r3, r3, #16
 8103508:	2b00      	cmp	r3, #0
 810350a:	f040 8129 	bne.w	8103760 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 810350e:	697b      	ldr	r3, [r7, #20]
 8103510:	2b00      	cmp	r3, #0
 8103512:	f040 8125 	bne.w	8103760 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8103516:	687b      	ldr	r3, [r7, #4]
 8103518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810351a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 810351e:	f043 0202 	orr.w	r2, r3, #2
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	681b      	ldr	r3, [r3, #0]
 810352a:	4618      	mov	r0, r3
 810352c:	f7ff ff4a 	bl	81033c4 <LL_ADC_IsEnabled>
 8103530:	4603      	mov	r3, r0
 8103532:	2b00      	cmp	r3, #0
 8103534:	d136      	bne.n	81035a4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	681b      	ldr	r3, [r3, #0]
 810353a:	4a66      	ldr	r2, [pc, #408]	; (81036d4 <HAL_ADC_Init+0x29c>)
 810353c:	4293      	cmp	r3, r2
 810353e:	d004      	beq.n	810354a <HAL_ADC_Init+0x112>
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	681b      	ldr	r3, [r3, #0]
 8103544:	4a64      	ldr	r2, [pc, #400]	; (81036d8 <HAL_ADC_Init+0x2a0>)
 8103546:	4293      	cmp	r3, r2
 8103548:	d10e      	bne.n	8103568 <HAL_ADC_Init+0x130>
 810354a:	4862      	ldr	r0, [pc, #392]	; (81036d4 <HAL_ADC_Init+0x29c>)
 810354c:	f7ff ff3a 	bl	81033c4 <LL_ADC_IsEnabled>
 8103550:	4604      	mov	r4, r0
 8103552:	4861      	ldr	r0, [pc, #388]	; (81036d8 <HAL_ADC_Init+0x2a0>)
 8103554:	f7ff ff36 	bl	81033c4 <LL_ADC_IsEnabled>
 8103558:	4603      	mov	r3, r0
 810355a:	4323      	orrs	r3, r4
 810355c:	2b00      	cmp	r3, #0
 810355e:	bf0c      	ite	eq
 8103560:	2301      	moveq	r3, #1
 8103562:	2300      	movne	r3, #0
 8103564:	b2db      	uxtb	r3, r3
 8103566:	e008      	b.n	810357a <HAL_ADC_Init+0x142>
 8103568:	485c      	ldr	r0, [pc, #368]	; (81036dc <HAL_ADC_Init+0x2a4>)
 810356a:	f7ff ff2b 	bl	81033c4 <LL_ADC_IsEnabled>
 810356e:	4603      	mov	r3, r0
 8103570:	2b00      	cmp	r3, #0
 8103572:	bf0c      	ite	eq
 8103574:	2301      	moveq	r3, #1
 8103576:	2300      	movne	r3, #0
 8103578:	b2db      	uxtb	r3, r3
 810357a:	2b00      	cmp	r3, #0
 810357c:	d012      	beq.n	81035a4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	681b      	ldr	r3, [r3, #0]
 8103582:	4a54      	ldr	r2, [pc, #336]	; (81036d4 <HAL_ADC_Init+0x29c>)
 8103584:	4293      	cmp	r3, r2
 8103586:	d004      	beq.n	8103592 <HAL_ADC_Init+0x15a>
 8103588:	687b      	ldr	r3, [r7, #4]
 810358a:	681b      	ldr	r3, [r3, #0]
 810358c:	4a52      	ldr	r2, [pc, #328]	; (81036d8 <HAL_ADC_Init+0x2a0>)
 810358e:	4293      	cmp	r3, r2
 8103590:	d101      	bne.n	8103596 <HAL_ADC_Init+0x15e>
 8103592:	4a53      	ldr	r2, [pc, #332]	; (81036e0 <HAL_ADC_Init+0x2a8>)
 8103594:	e000      	b.n	8103598 <HAL_ADC_Init+0x160>
 8103596:	4a53      	ldr	r2, [pc, #332]	; (81036e4 <HAL_ADC_Init+0x2ac>)
 8103598:	687b      	ldr	r3, [r7, #4]
 810359a:	685b      	ldr	r3, [r3, #4]
 810359c:	4619      	mov	r1, r3
 810359e:	4610      	mov	r0, r2
 81035a0:	f7ff fdbe 	bl	8103120 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 81035a4:	f7ff fdb0 	bl	8103108 <HAL_GetREVID>
 81035a8:	4603      	mov	r3, r0
 81035aa:	f241 0203 	movw	r2, #4099	; 0x1003
 81035ae:	4293      	cmp	r3, r2
 81035b0:	d914      	bls.n	81035dc <HAL_ADC_Init+0x1a4>
 81035b2:	687b      	ldr	r3, [r7, #4]
 81035b4:	689b      	ldr	r3, [r3, #8]
 81035b6:	2b10      	cmp	r3, #16
 81035b8:	d110      	bne.n	81035dc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	7d5b      	ldrb	r3, [r3, #21]
 81035be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81035c0:	687b      	ldr	r3, [r7, #4]
 81035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81035c4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81035c6:	687b      	ldr	r3, [r7, #4]
 81035c8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81035ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	7f1b      	ldrb	r3, [r3, #28]
 81035d0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81035d2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81035d4:	f043 030c 	orr.w	r3, r3, #12
 81035d8:	61bb      	str	r3, [r7, #24]
 81035da:	e00d      	b.n	81035f8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	7d5b      	ldrb	r3, [r3, #21]
 81035e0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81035e6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 81035e8:	687b      	ldr	r3, [r7, #4]
 81035ea:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81035ec:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	7f1b      	ldrb	r3, [r3, #28]
 81035f2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81035f4:	4313      	orrs	r3, r2
 81035f6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	7f1b      	ldrb	r3, [r3, #28]
 81035fc:	2b01      	cmp	r3, #1
 81035fe:	d106      	bne.n	810360e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	6a1b      	ldr	r3, [r3, #32]
 8103604:	3b01      	subs	r3, #1
 8103606:	045b      	lsls	r3, r3, #17
 8103608:	69ba      	ldr	r2, [r7, #24]
 810360a:	4313      	orrs	r3, r2
 810360c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 810360e:	687b      	ldr	r3, [r7, #4]
 8103610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103612:	2b00      	cmp	r3, #0
 8103614:	d009      	beq.n	810362a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810361a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 810361e:	687b      	ldr	r3, [r7, #4]
 8103620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103622:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103624:	69ba      	ldr	r2, [r7, #24]
 8103626:	4313      	orrs	r3, r2
 8103628:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	681b      	ldr	r3, [r3, #0]
 810362e:	68da      	ldr	r2, [r3, #12]
 8103630:	4b2d      	ldr	r3, [pc, #180]	; (81036e8 <HAL_ADC_Init+0x2b0>)
 8103632:	4013      	ands	r3, r2
 8103634:	687a      	ldr	r2, [r7, #4]
 8103636:	6812      	ldr	r2, [r2, #0]
 8103638:	69b9      	ldr	r1, [r7, #24]
 810363a:	430b      	orrs	r3, r1
 810363c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	681b      	ldr	r3, [r3, #0]
 8103642:	4618      	mov	r0, r3
 8103644:	f7ff fed1 	bl	81033ea <LL_ADC_REG_IsConversionOngoing>
 8103648:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 810364a:	687b      	ldr	r3, [r7, #4]
 810364c:	681b      	ldr	r3, [r3, #0]
 810364e:	4618      	mov	r0, r3
 8103650:	f7ff fede 	bl	8103410 <LL_ADC_INJ_IsConversionOngoing>
 8103654:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8103656:	693b      	ldr	r3, [r7, #16]
 8103658:	2b00      	cmp	r3, #0
 810365a:	d15f      	bne.n	810371c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 810365c:	68fb      	ldr	r3, [r7, #12]
 810365e:	2b00      	cmp	r3, #0
 8103660:	d15c      	bne.n	810371c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8103662:	687b      	ldr	r3, [r7, #4]
 8103664:	7d1b      	ldrb	r3, [r3, #20]
 8103666:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 810366c:	4313      	orrs	r3, r2
 810366e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	681b      	ldr	r3, [r3, #0]
 8103674:	68db      	ldr	r3, [r3, #12]
 8103676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810367a:	f023 0303 	bic.w	r3, r3, #3
 810367e:	687a      	ldr	r2, [r7, #4]
 8103680:	6812      	ldr	r2, [r2, #0]
 8103682:	69b9      	ldr	r1, [r7, #24]
 8103684:	430b      	orrs	r3, r1
 8103686:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8103688:	687b      	ldr	r3, [r7, #4]
 810368a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 810368e:	2b01      	cmp	r3, #1
 8103690:	d12e      	bne.n	81036f0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8103692:	687b      	ldr	r3, [r7, #4]
 8103694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103696:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	691a      	ldr	r2, [r3, #16]
 810369e:	4b13      	ldr	r3, [pc, #76]	; (81036ec <HAL_ADC_Init+0x2b4>)
 81036a0:	4013      	ands	r3, r2
 81036a2:	687a      	ldr	r2, [r7, #4]
 81036a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 81036a6:	3a01      	subs	r2, #1
 81036a8:	0411      	lsls	r1, r2, #16
 81036aa:	687a      	ldr	r2, [r7, #4]
 81036ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 81036ae:	4311      	orrs	r1, r2
 81036b0:	687a      	ldr	r2, [r7, #4]
 81036b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 81036b4:	4311      	orrs	r1, r2
 81036b6:	687a      	ldr	r2, [r7, #4]
 81036b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 81036ba:	430a      	orrs	r2, r1
 81036bc:	431a      	orrs	r2, r3
 81036be:	687b      	ldr	r3, [r7, #4]
 81036c0:	681b      	ldr	r3, [r3, #0]
 81036c2:	f042 0201 	orr.w	r2, r2, #1
 81036c6:	611a      	str	r2, [r3, #16]
 81036c8:	e01a      	b.n	8103700 <HAL_ADC_Init+0x2c8>
 81036ca:	bf00      	nop
 81036cc:	10000000 	.word	0x10000000
 81036d0:	053e2d63 	.word	0x053e2d63
 81036d4:	40022000 	.word	0x40022000
 81036d8:	40022100 	.word	0x40022100
 81036dc:	58026000 	.word	0x58026000
 81036e0:	40022300 	.word	0x40022300
 81036e4:	58026300 	.word	0x58026300
 81036e8:	fff0c003 	.word	0xfff0c003
 81036ec:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 81036f0:	687b      	ldr	r3, [r7, #4]
 81036f2:	681b      	ldr	r3, [r3, #0]
 81036f4:	691a      	ldr	r2, [r3, #16]
 81036f6:	687b      	ldr	r3, [r7, #4]
 81036f8:	681b      	ldr	r3, [r3, #0]
 81036fa:	f022 0201 	bic.w	r2, r2, #1
 81036fe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8103700:	687b      	ldr	r3, [r7, #4]
 8103702:	681b      	ldr	r3, [r3, #0]
 8103704:	691b      	ldr	r3, [r3, #16]
 8103706:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 810370a:	687b      	ldr	r3, [r7, #4]
 810370c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810370e:	687b      	ldr	r3, [r7, #4]
 8103710:	681b      	ldr	r3, [r3, #0]
 8103712:	430a      	orrs	r2, r1
 8103714:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8103716:	6878      	ldr	r0, [r7, #4]
 8103718:	f000 fb80 	bl	8103e1c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 810371c:	687b      	ldr	r3, [r7, #4]
 810371e:	68db      	ldr	r3, [r3, #12]
 8103720:	2b01      	cmp	r3, #1
 8103722:	d10c      	bne.n	810373e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	681b      	ldr	r3, [r3, #0]
 8103728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810372a:	f023 010f 	bic.w	r1, r3, #15
 810372e:	687b      	ldr	r3, [r7, #4]
 8103730:	699b      	ldr	r3, [r3, #24]
 8103732:	1e5a      	subs	r2, r3, #1
 8103734:	687b      	ldr	r3, [r7, #4]
 8103736:	681b      	ldr	r3, [r3, #0]
 8103738:	430a      	orrs	r2, r1
 810373a:	631a      	str	r2, [r3, #48]	; 0x30
 810373c:	e007      	b.n	810374e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8103744:	687b      	ldr	r3, [r7, #4]
 8103746:	681b      	ldr	r3, [r3, #0]
 8103748:	f022 020f 	bic.w	r2, r2, #15
 810374c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 810374e:	687b      	ldr	r3, [r7, #4]
 8103750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103752:	f023 0303 	bic.w	r3, r3, #3
 8103756:	f043 0201 	orr.w	r2, r3, #1
 810375a:	687b      	ldr	r3, [r7, #4]
 810375c:	655a      	str	r2, [r3, #84]	; 0x54
 810375e:	e007      	b.n	8103770 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103760:	687b      	ldr	r3, [r7, #4]
 8103762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103764:	f043 0210 	orr.w	r2, r3, #16
 8103768:	687b      	ldr	r3, [r7, #4]
 810376a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 810376c:	2301      	movs	r3, #1
 810376e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8103770:	7ffb      	ldrb	r3, [r7, #31]
}
 8103772:	4618      	mov	r0, r3
 8103774:	3724      	adds	r7, #36	; 0x24
 8103776:	46bd      	mov	sp, r7
 8103778:	bd90      	pop	{r4, r7, pc}
 810377a:	bf00      	nop

0810377c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 810377c:	b590      	push	{r4, r7, lr}
 810377e:	b0a1      	sub	sp, #132	; 0x84
 8103780:	af00      	add	r7, sp, #0
 8103782:	6078      	str	r0, [r7, #4]
 8103784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103786:	2300      	movs	r3, #0
 8103788:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 810378c:	2300      	movs	r3, #0
 810378e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8103790:	683b      	ldr	r3, [r7, #0]
 8103792:	68db      	ldr	r3, [r3, #12]
 8103794:	4a9d      	ldr	r2, [pc, #628]	; (8103a0c <HAL_ADC_ConfigChannel+0x290>)
 8103796:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810379e:	2b01      	cmp	r3, #1
 81037a0:	d101      	bne.n	81037a6 <HAL_ADC_ConfigChannel+0x2a>
 81037a2:	2302      	movs	r3, #2
 81037a4:	e321      	b.n	8103dea <HAL_ADC_ConfigChannel+0x66e>
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	2201      	movs	r2, #1
 81037aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	681b      	ldr	r3, [r3, #0]
 81037b2:	4618      	mov	r0, r3
 81037b4:	f7ff fe19 	bl	81033ea <LL_ADC_REG_IsConversionOngoing>
 81037b8:	4603      	mov	r3, r0
 81037ba:	2b00      	cmp	r3, #0
 81037bc:	f040 8306 	bne.w	8103dcc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81037c0:	683b      	ldr	r3, [r7, #0]
 81037c2:	681b      	ldr	r3, [r3, #0]
 81037c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81037c8:	2b00      	cmp	r3, #0
 81037ca:	d108      	bne.n	81037de <HAL_ADC_ConfigChannel+0x62>
 81037cc:	683b      	ldr	r3, [r7, #0]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	0e9b      	lsrs	r3, r3, #26
 81037d2:	f003 031f 	and.w	r3, r3, #31
 81037d6:	2201      	movs	r2, #1
 81037d8:	fa02 f303 	lsl.w	r3, r2, r3
 81037dc:	e016      	b.n	810380c <HAL_ADC_ConfigChannel+0x90>
 81037de:	683b      	ldr	r3, [r7, #0]
 81037e0:	681b      	ldr	r3, [r3, #0]
 81037e2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81037e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81037e6:	fa93 f3a3 	rbit	r3, r3
 81037ea:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81037ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81037ee:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81037f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81037f2:	2b00      	cmp	r3, #0
 81037f4:	d101      	bne.n	81037fa <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 81037f6:	2320      	movs	r3, #32
 81037f8:	e003      	b.n	8103802 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 81037fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81037fc:	fab3 f383 	clz	r3, r3
 8103800:	b2db      	uxtb	r3, r3
 8103802:	f003 031f 	and.w	r3, r3, #31
 8103806:	2201      	movs	r2, #1
 8103808:	fa02 f303 	lsl.w	r3, r2, r3
 810380c:	687a      	ldr	r2, [r7, #4]
 810380e:	6812      	ldr	r2, [r2, #0]
 8103810:	69d1      	ldr	r1, [r2, #28]
 8103812:	687a      	ldr	r2, [r7, #4]
 8103814:	6812      	ldr	r2, [r2, #0]
 8103816:	430b      	orrs	r3, r1
 8103818:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 810381a:	687b      	ldr	r3, [r7, #4]
 810381c:	6818      	ldr	r0, [r3, #0]
 810381e:	683b      	ldr	r3, [r7, #0]
 8103820:	6859      	ldr	r1, [r3, #4]
 8103822:	683b      	ldr	r3, [r7, #0]
 8103824:	681b      	ldr	r3, [r3, #0]
 8103826:	461a      	mov	r2, r3
 8103828:	f7ff fd02 	bl	8103230 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	4618      	mov	r0, r3
 8103832:	f7ff fdda 	bl	81033ea <LL_ADC_REG_IsConversionOngoing>
 8103836:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103838:	687b      	ldr	r3, [r7, #4]
 810383a:	681b      	ldr	r3, [r3, #0]
 810383c:	4618      	mov	r0, r3
 810383e:	f7ff fde7 	bl	8103410 <LL_ADC_INJ_IsConversionOngoing>
 8103842:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8103844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8103846:	2b00      	cmp	r3, #0
 8103848:	f040 80b3 	bne.w	81039b2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 810384c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 810384e:	2b00      	cmp	r3, #0
 8103850:	f040 80af 	bne.w	81039b2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	6818      	ldr	r0, [r3, #0]
 8103858:	683b      	ldr	r3, [r7, #0]
 810385a:	6819      	ldr	r1, [r3, #0]
 810385c:	683b      	ldr	r3, [r7, #0]
 810385e:	689b      	ldr	r3, [r3, #8]
 8103860:	461a      	mov	r2, r3
 8103862:	f7ff fd11 	bl	8103288 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8103866:	4b6a      	ldr	r3, [pc, #424]	; (8103a10 <HAL_ADC_ConfigChannel+0x294>)
 8103868:	681b      	ldr	r3, [r3, #0]
 810386a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 810386e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103872:	d10b      	bne.n	810388c <HAL_ADC_ConfigChannel+0x110>
 8103874:	683b      	ldr	r3, [r7, #0]
 8103876:	695a      	ldr	r2, [r3, #20]
 8103878:	687b      	ldr	r3, [r7, #4]
 810387a:	681b      	ldr	r3, [r3, #0]
 810387c:	68db      	ldr	r3, [r3, #12]
 810387e:	089b      	lsrs	r3, r3, #2
 8103880:	f003 0307 	and.w	r3, r3, #7
 8103884:	005b      	lsls	r3, r3, #1
 8103886:	fa02 f303 	lsl.w	r3, r2, r3
 810388a:	e01d      	b.n	81038c8 <HAL_ADC_ConfigChannel+0x14c>
 810388c:	687b      	ldr	r3, [r7, #4]
 810388e:	681b      	ldr	r3, [r3, #0]
 8103890:	68db      	ldr	r3, [r3, #12]
 8103892:	f003 0310 	and.w	r3, r3, #16
 8103896:	2b00      	cmp	r3, #0
 8103898:	d10b      	bne.n	81038b2 <HAL_ADC_ConfigChannel+0x136>
 810389a:	683b      	ldr	r3, [r7, #0]
 810389c:	695a      	ldr	r2, [r3, #20]
 810389e:	687b      	ldr	r3, [r7, #4]
 81038a0:	681b      	ldr	r3, [r3, #0]
 81038a2:	68db      	ldr	r3, [r3, #12]
 81038a4:	089b      	lsrs	r3, r3, #2
 81038a6:	f003 0307 	and.w	r3, r3, #7
 81038aa:	005b      	lsls	r3, r3, #1
 81038ac:	fa02 f303 	lsl.w	r3, r2, r3
 81038b0:	e00a      	b.n	81038c8 <HAL_ADC_ConfigChannel+0x14c>
 81038b2:	683b      	ldr	r3, [r7, #0]
 81038b4:	695a      	ldr	r2, [r3, #20]
 81038b6:	687b      	ldr	r3, [r7, #4]
 81038b8:	681b      	ldr	r3, [r3, #0]
 81038ba:	68db      	ldr	r3, [r3, #12]
 81038bc:	089b      	lsrs	r3, r3, #2
 81038be:	f003 0304 	and.w	r3, r3, #4
 81038c2:	005b      	lsls	r3, r3, #1
 81038c4:	fa02 f303 	lsl.w	r3, r2, r3
 81038c8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81038ca:	683b      	ldr	r3, [r7, #0]
 81038cc:	691b      	ldr	r3, [r3, #16]
 81038ce:	2b04      	cmp	r3, #4
 81038d0:	d027      	beq.n	8103922 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 81038d2:	687b      	ldr	r3, [r7, #4]
 81038d4:	6818      	ldr	r0, [r3, #0]
 81038d6:	683b      	ldr	r3, [r7, #0]
 81038d8:	6919      	ldr	r1, [r3, #16]
 81038da:	683b      	ldr	r3, [r7, #0]
 81038dc:	681a      	ldr	r2, [r3, #0]
 81038de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81038e0:	f7ff fc52 	bl	8103188 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	6818      	ldr	r0, [r3, #0]
 81038e8:	683b      	ldr	r3, [r7, #0]
 81038ea:	6919      	ldr	r1, [r3, #16]
 81038ec:	683b      	ldr	r3, [r7, #0]
 81038ee:	7e5b      	ldrb	r3, [r3, #25]
 81038f0:	2b01      	cmp	r3, #1
 81038f2:	d102      	bne.n	81038fa <HAL_ADC_ConfigChannel+0x17e>
 81038f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81038f8:	e000      	b.n	81038fc <HAL_ADC_ConfigChannel+0x180>
 81038fa:	2300      	movs	r3, #0
 81038fc:	461a      	mov	r2, r3
 81038fe:	f7ff fc7c 	bl	81031fa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	6818      	ldr	r0, [r3, #0]
 8103906:	683b      	ldr	r3, [r7, #0]
 8103908:	6919      	ldr	r1, [r3, #16]
 810390a:	683b      	ldr	r3, [r7, #0]
 810390c:	7e1b      	ldrb	r3, [r3, #24]
 810390e:	2b01      	cmp	r3, #1
 8103910:	d102      	bne.n	8103918 <HAL_ADC_ConfigChannel+0x19c>
 8103912:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8103916:	e000      	b.n	810391a <HAL_ADC_ConfigChannel+0x19e>
 8103918:	2300      	movs	r3, #0
 810391a:	461a      	mov	r2, r3
 810391c:	f7ff fc54 	bl	81031c8 <LL_ADC_SetDataRightShift>
 8103920:	e047      	b.n	81039b2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103922:	687b      	ldr	r3, [r7, #4]
 8103924:	681b      	ldr	r3, [r3, #0]
 8103926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103928:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810392c:	683b      	ldr	r3, [r7, #0]
 810392e:	681b      	ldr	r3, [r3, #0]
 8103930:	069b      	lsls	r3, r3, #26
 8103932:	429a      	cmp	r2, r3
 8103934:	d107      	bne.n	8103946 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8103936:	687b      	ldr	r3, [r7, #4]
 8103938:	681b      	ldr	r3, [r3, #0]
 810393a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 810393c:	687b      	ldr	r3, [r7, #4]
 810393e:	681b      	ldr	r3, [r3, #0]
 8103940:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103944:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103946:	687b      	ldr	r3, [r7, #4]
 8103948:	681b      	ldr	r3, [r3, #0]
 810394a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810394c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103950:	683b      	ldr	r3, [r7, #0]
 8103952:	681b      	ldr	r3, [r3, #0]
 8103954:	069b      	lsls	r3, r3, #26
 8103956:	429a      	cmp	r2, r3
 8103958:	d107      	bne.n	810396a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	681b      	ldr	r3, [r3, #0]
 810395e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	681b      	ldr	r3, [r3, #0]
 8103964:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103968:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103970:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103974:	683b      	ldr	r3, [r7, #0]
 8103976:	681b      	ldr	r3, [r3, #0]
 8103978:	069b      	lsls	r3, r3, #26
 810397a:	429a      	cmp	r2, r3
 810397c:	d107      	bne.n	810398e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	681b      	ldr	r3, [r3, #0]
 8103982:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 810398c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103994:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103998:	683b      	ldr	r3, [r7, #0]
 810399a:	681b      	ldr	r3, [r3, #0]
 810399c:	069b      	lsls	r3, r3, #26
 810399e:	429a      	cmp	r2, r3
 81039a0:	d107      	bne.n	81039b2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	681b      	ldr	r3, [r3, #0]
 81039ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81039b0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	681b      	ldr	r3, [r3, #0]
 81039b6:	4618      	mov	r0, r3
 81039b8:	f7ff fd04 	bl	81033c4 <LL_ADC_IsEnabled>
 81039bc:	4603      	mov	r3, r0
 81039be:	2b00      	cmp	r3, #0
 81039c0:	f040 820d 	bne.w	8103dde <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	6818      	ldr	r0, [r3, #0]
 81039c8:	683b      	ldr	r3, [r7, #0]
 81039ca:	6819      	ldr	r1, [r3, #0]
 81039cc:	683b      	ldr	r3, [r7, #0]
 81039ce:	68db      	ldr	r3, [r3, #12]
 81039d0:	461a      	mov	r2, r3
 81039d2:	f7ff fc85 	bl	81032e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 81039d6:	683b      	ldr	r3, [r7, #0]
 81039d8:	68db      	ldr	r3, [r3, #12]
 81039da:	4a0c      	ldr	r2, [pc, #48]	; (8103a0c <HAL_ADC_ConfigChannel+0x290>)
 81039dc:	4293      	cmp	r3, r2
 81039de:	f040 8133 	bne.w	8103c48 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81039e6:	683b      	ldr	r3, [r7, #0]
 81039e8:	681b      	ldr	r3, [r3, #0]
 81039ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81039ee:	2b00      	cmp	r3, #0
 81039f0:	d110      	bne.n	8103a14 <HAL_ADC_ConfigChannel+0x298>
 81039f2:	683b      	ldr	r3, [r7, #0]
 81039f4:	681b      	ldr	r3, [r3, #0]
 81039f6:	0e9b      	lsrs	r3, r3, #26
 81039f8:	3301      	adds	r3, #1
 81039fa:	f003 031f 	and.w	r3, r3, #31
 81039fe:	2b09      	cmp	r3, #9
 8103a00:	bf94      	ite	ls
 8103a02:	2301      	movls	r3, #1
 8103a04:	2300      	movhi	r3, #0
 8103a06:	b2db      	uxtb	r3, r3
 8103a08:	e01e      	b.n	8103a48 <HAL_ADC_ConfigChannel+0x2cc>
 8103a0a:	bf00      	nop
 8103a0c:	47ff0000 	.word	0x47ff0000
 8103a10:	5c001000 	.word	0x5c001000
 8103a14:	683b      	ldr	r3, [r7, #0]
 8103a16:	681b      	ldr	r3, [r3, #0]
 8103a18:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8103a1c:	fa93 f3a3 	rbit	r3, r3
 8103a20:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8103a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103a24:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8103a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103a28:	2b00      	cmp	r3, #0
 8103a2a:	d101      	bne.n	8103a30 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8103a2c:	2320      	movs	r3, #32
 8103a2e:	e003      	b.n	8103a38 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8103a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103a32:	fab3 f383 	clz	r3, r3
 8103a36:	b2db      	uxtb	r3, r3
 8103a38:	3301      	adds	r3, #1
 8103a3a:	f003 031f 	and.w	r3, r3, #31
 8103a3e:	2b09      	cmp	r3, #9
 8103a40:	bf94      	ite	ls
 8103a42:	2301      	movls	r3, #1
 8103a44:	2300      	movhi	r3, #0
 8103a46:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103a48:	2b00      	cmp	r3, #0
 8103a4a:	d079      	beq.n	8103b40 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103a4c:	683b      	ldr	r3, [r7, #0]
 8103a4e:	681b      	ldr	r3, [r3, #0]
 8103a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a54:	2b00      	cmp	r3, #0
 8103a56:	d107      	bne.n	8103a68 <HAL_ADC_ConfigChannel+0x2ec>
 8103a58:	683b      	ldr	r3, [r7, #0]
 8103a5a:	681b      	ldr	r3, [r3, #0]
 8103a5c:	0e9b      	lsrs	r3, r3, #26
 8103a5e:	3301      	adds	r3, #1
 8103a60:	069b      	lsls	r3, r3, #26
 8103a62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103a66:	e015      	b.n	8103a94 <HAL_ADC_ConfigChannel+0x318>
 8103a68:	683b      	ldr	r3, [r7, #0]
 8103a6a:	681b      	ldr	r3, [r3, #0]
 8103a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103a70:	fa93 f3a3 	rbit	r3, r3
 8103a74:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8103a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103a78:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8103a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103a7c:	2b00      	cmp	r3, #0
 8103a7e:	d101      	bne.n	8103a84 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8103a80:	2320      	movs	r3, #32
 8103a82:	e003      	b.n	8103a8c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8103a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103a86:	fab3 f383 	clz	r3, r3
 8103a8a:	b2db      	uxtb	r3, r3
 8103a8c:	3301      	adds	r3, #1
 8103a8e:	069b      	lsls	r3, r3, #26
 8103a90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103a94:	683b      	ldr	r3, [r7, #0]
 8103a96:	681b      	ldr	r3, [r3, #0]
 8103a98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a9c:	2b00      	cmp	r3, #0
 8103a9e:	d109      	bne.n	8103ab4 <HAL_ADC_ConfigChannel+0x338>
 8103aa0:	683b      	ldr	r3, [r7, #0]
 8103aa2:	681b      	ldr	r3, [r3, #0]
 8103aa4:	0e9b      	lsrs	r3, r3, #26
 8103aa6:	3301      	adds	r3, #1
 8103aa8:	f003 031f 	and.w	r3, r3, #31
 8103aac:	2101      	movs	r1, #1
 8103aae:	fa01 f303 	lsl.w	r3, r1, r3
 8103ab2:	e017      	b.n	8103ae4 <HAL_ADC_ConfigChannel+0x368>
 8103ab4:	683b      	ldr	r3, [r7, #0]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103abc:	fa93 f3a3 	rbit	r3, r3
 8103ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8103ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103ac4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8103ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103ac8:	2b00      	cmp	r3, #0
 8103aca:	d101      	bne.n	8103ad0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8103acc:	2320      	movs	r3, #32
 8103ace:	e003      	b.n	8103ad8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8103ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103ad2:	fab3 f383 	clz	r3, r3
 8103ad6:	b2db      	uxtb	r3, r3
 8103ad8:	3301      	adds	r3, #1
 8103ada:	f003 031f 	and.w	r3, r3, #31
 8103ade:	2101      	movs	r1, #1
 8103ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8103ae4:	ea42 0103 	orr.w	r1, r2, r3
 8103ae8:	683b      	ldr	r3, [r7, #0]
 8103aea:	681b      	ldr	r3, [r3, #0]
 8103aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103af0:	2b00      	cmp	r3, #0
 8103af2:	d10a      	bne.n	8103b0a <HAL_ADC_ConfigChannel+0x38e>
 8103af4:	683b      	ldr	r3, [r7, #0]
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	0e9b      	lsrs	r3, r3, #26
 8103afa:	3301      	adds	r3, #1
 8103afc:	f003 021f 	and.w	r2, r3, #31
 8103b00:	4613      	mov	r3, r2
 8103b02:	005b      	lsls	r3, r3, #1
 8103b04:	4413      	add	r3, r2
 8103b06:	051b      	lsls	r3, r3, #20
 8103b08:	e018      	b.n	8103b3c <HAL_ADC_ConfigChannel+0x3c0>
 8103b0a:	683b      	ldr	r3, [r7, #0]
 8103b0c:	681b      	ldr	r3, [r3, #0]
 8103b0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103b12:	fa93 f3a3 	rbit	r3, r3
 8103b16:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8103b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103b1a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8103b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103b1e:	2b00      	cmp	r3, #0
 8103b20:	d101      	bne.n	8103b26 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8103b22:	2320      	movs	r3, #32
 8103b24:	e003      	b.n	8103b2e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8103b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103b28:	fab3 f383 	clz	r3, r3
 8103b2c:	b2db      	uxtb	r3, r3
 8103b2e:	3301      	adds	r3, #1
 8103b30:	f003 021f 	and.w	r2, r3, #31
 8103b34:	4613      	mov	r3, r2
 8103b36:	005b      	lsls	r3, r3, #1
 8103b38:	4413      	add	r3, r2
 8103b3a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103b3c:	430b      	orrs	r3, r1
 8103b3e:	e07e      	b.n	8103c3e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103b40:	683b      	ldr	r3, [r7, #0]
 8103b42:	681b      	ldr	r3, [r3, #0]
 8103b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103b48:	2b00      	cmp	r3, #0
 8103b4a:	d107      	bne.n	8103b5c <HAL_ADC_ConfigChannel+0x3e0>
 8103b4c:	683b      	ldr	r3, [r7, #0]
 8103b4e:	681b      	ldr	r3, [r3, #0]
 8103b50:	0e9b      	lsrs	r3, r3, #26
 8103b52:	3301      	adds	r3, #1
 8103b54:	069b      	lsls	r3, r3, #26
 8103b56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103b5a:	e015      	b.n	8103b88 <HAL_ADC_ConfigChannel+0x40c>
 8103b5c:	683b      	ldr	r3, [r7, #0]
 8103b5e:	681b      	ldr	r3, [r3, #0]
 8103b60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103b64:	fa93 f3a3 	rbit	r3, r3
 8103b68:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8103b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8103b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103b70:	2b00      	cmp	r3, #0
 8103b72:	d101      	bne.n	8103b78 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8103b74:	2320      	movs	r3, #32
 8103b76:	e003      	b.n	8103b80 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8103b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103b7a:	fab3 f383 	clz	r3, r3
 8103b7e:	b2db      	uxtb	r3, r3
 8103b80:	3301      	adds	r3, #1
 8103b82:	069b      	lsls	r3, r3, #26
 8103b84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103b88:	683b      	ldr	r3, [r7, #0]
 8103b8a:	681b      	ldr	r3, [r3, #0]
 8103b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103b90:	2b00      	cmp	r3, #0
 8103b92:	d109      	bne.n	8103ba8 <HAL_ADC_ConfigChannel+0x42c>
 8103b94:	683b      	ldr	r3, [r7, #0]
 8103b96:	681b      	ldr	r3, [r3, #0]
 8103b98:	0e9b      	lsrs	r3, r3, #26
 8103b9a:	3301      	adds	r3, #1
 8103b9c:	f003 031f 	and.w	r3, r3, #31
 8103ba0:	2101      	movs	r1, #1
 8103ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8103ba6:	e017      	b.n	8103bd8 <HAL_ADC_ConfigChannel+0x45c>
 8103ba8:	683b      	ldr	r3, [r7, #0]
 8103baa:	681b      	ldr	r3, [r3, #0]
 8103bac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103bae:	69fb      	ldr	r3, [r7, #28]
 8103bb0:	fa93 f3a3 	rbit	r3, r3
 8103bb4:	61bb      	str	r3, [r7, #24]
  return result;
 8103bb6:	69bb      	ldr	r3, [r7, #24]
 8103bb8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8103bba:	6a3b      	ldr	r3, [r7, #32]
 8103bbc:	2b00      	cmp	r3, #0
 8103bbe:	d101      	bne.n	8103bc4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8103bc0:	2320      	movs	r3, #32
 8103bc2:	e003      	b.n	8103bcc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8103bc4:	6a3b      	ldr	r3, [r7, #32]
 8103bc6:	fab3 f383 	clz	r3, r3
 8103bca:	b2db      	uxtb	r3, r3
 8103bcc:	3301      	adds	r3, #1
 8103bce:	f003 031f 	and.w	r3, r3, #31
 8103bd2:	2101      	movs	r1, #1
 8103bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8103bd8:	ea42 0103 	orr.w	r1, r2, r3
 8103bdc:	683b      	ldr	r3, [r7, #0]
 8103bde:	681b      	ldr	r3, [r3, #0]
 8103be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103be4:	2b00      	cmp	r3, #0
 8103be6:	d10d      	bne.n	8103c04 <HAL_ADC_ConfigChannel+0x488>
 8103be8:	683b      	ldr	r3, [r7, #0]
 8103bea:	681b      	ldr	r3, [r3, #0]
 8103bec:	0e9b      	lsrs	r3, r3, #26
 8103bee:	3301      	adds	r3, #1
 8103bf0:	f003 021f 	and.w	r2, r3, #31
 8103bf4:	4613      	mov	r3, r2
 8103bf6:	005b      	lsls	r3, r3, #1
 8103bf8:	4413      	add	r3, r2
 8103bfa:	3b1e      	subs	r3, #30
 8103bfc:	051b      	lsls	r3, r3, #20
 8103bfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103c02:	e01b      	b.n	8103c3c <HAL_ADC_ConfigChannel+0x4c0>
 8103c04:	683b      	ldr	r3, [r7, #0]
 8103c06:	681b      	ldr	r3, [r3, #0]
 8103c08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103c0a:	693b      	ldr	r3, [r7, #16]
 8103c0c:	fa93 f3a3 	rbit	r3, r3
 8103c10:	60fb      	str	r3, [r7, #12]
  return result;
 8103c12:	68fb      	ldr	r3, [r7, #12]
 8103c14:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8103c16:	697b      	ldr	r3, [r7, #20]
 8103c18:	2b00      	cmp	r3, #0
 8103c1a:	d101      	bne.n	8103c20 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8103c1c:	2320      	movs	r3, #32
 8103c1e:	e003      	b.n	8103c28 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8103c20:	697b      	ldr	r3, [r7, #20]
 8103c22:	fab3 f383 	clz	r3, r3
 8103c26:	b2db      	uxtb	r3, r3
 8103c28:	3301      	adds	r3, #1
 8103c2a:	f003 021f 	and.w	r2, r3, #31
 8103c2e:	4613      	mov	r3, r2
 8103c30:	005b      	lsls	r3, r3, #1
 8103c32:	4413      	add	r3, r2
 8103c34:	3b1e      	subs	r3, #30
 8103c36:	051b      	lsls	r3, r3, #20
 8103c38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103c3c:	430b      	orrs	r3, r1
 8103c3e:	683a      	ldr	r2, [r7, #0]
 8103c40:	6892      	ldr	r2, [r2, #8]
 8103c42:	4619      	mov	r1, r3
 8103c44:	f7ff fb20 	bl	8103288 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103c48:	683b      	ldr	r3, [r7, #0]
 8103c4a:	681b      	ldr	r3, [r3, #0]
 8103c4c:	2b00      	cmp	r3, #0
 8103c4e:	f280 80c6 	bge.w	8103dde <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103c52:	687b      	ldr	r3, [r7, #4]
 8103c54:	681b      	ldr	r3, [r3, #0]
 8103c56:	4a67      	ldr	r2, [pc, #412]	; (8103df4 <HAL_ADC_ConfigChannel+0x678>)
 8103c58:	4293      	cmp	r3, r2
 8103c5a:	d004      	beq.n	8103c66 <HAL_ADC_ConfigChannel+0x4ea>
 8103c5c:	687b      	ldr	r3, [r7, #4]
 8103c5e:	681b      	ldr	r3, [r3, #0]
 8103c60:	4a65      	ldr	r2, [pc, #404]	; (8103df8 <HAL_ADC_ConfigChannel+0x67c>)
 8103c62:	4293      	cmp	r3, r2
 8103c64:	d101      	bne.n	8103c6a <HAL_ADC_ConfigChannel+0x4ee>
 8103c66:	4b65      	ldr	r3, [pc, #404]	; (8103dfc <HAL_ADC_ConfigChannel+0x680>)
 8103c68:	e000      	b.n	8103c6c <HAL_ADC_ConfigChannel+0x4f0>
 8103c6a:	4b65      	ldr	r3, [pc, #404]	; (8103e00 <HAL_ADC_ConfigChannel+0x684>)
 8103c6c:	4618      	mov	r0, r3
 8103c6e:	f7ff fa7d 	bl	810316c <LL_ADC_GetCommonPathInternalCh>
 8103c72:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103c74:	687b      	ldr	r3, [r7, #4]
 8103c76:	681b      	ldr	r3, [r3, #0]
 8103c78:	4a5e      	ldr	r2, [pc, #376]	; (8103df4 <HAL_ADC_ConfigChannel+0x678>)
 8103c7a:	4293      	cmp	r3, r2
 8103c7c:	d004      	beq.n	8103c88 <HAL_ADC_ConfigChannel+0x50c>
 8103c7e:	687b      	ldr	r3, [r7, #4]
 8103c80:	681b      	ldr	r3, [r3, #0]
 8103c82:	4a5d      	ldr	r2, [pc, #372]	; (8103df8 <HAL_ADC_ConfigChannel+0x67c>)
 8103c84:	4293      	cmp	r3, r2
 8103c86:	d10e      	bne.n	8103ca6 <HAL_ADC_ConfigChannel+0x52a>
 8103c88:	485a      	ldr	r0, [pc, #360]	; (8103df4 <HAL_ADC_ConfigChannel+0x678>)
 8103c8a:	f7ff fb9b 	bl	81033c4 <LL_ADC_IsEnabled>
 8103c8e:	4604      	mov	r4, r0
 8103c90:	4859      	ldr	r0, [pc, #356]	; (8103df8 <HAL_ADC_ConfigChannel+0x67c>)
 8103c92:	f7ff fb97 	bl	81033c4 <LL_ADC_IsEnabled>
 8103c96:	4603      	mov	r3, r0
 8103c98:	4323      	orrs	r3, r4
 8103c9a:	2b00      	cmp	r3, #0
 8103c9c:	bf0c      	ite	eq
 8103c9e:	2301      	moveq	r3, #1
 8103ca0:	2300      	movne	r3, #0
 8103ca2:	b2db      	uxtb	r3, r3
 8103ca4:	e008      	b.n	8103cb8 <HAL_ADC_ConfigChannel+0x53c>
 8103ca6:	4857      	ldr	r0, [pc, #348]	; (8103e04 <HAL_ADC_ConfigChannel+0x688>)
 8103ca8:	f7ff fb8c 	bl	81033c4 <LL_ADC_IsEnabled>
 8103cac:	4603      	mov	r3, r0
 8103cae:	2b00      	cmp	r3, #0
 8103cb0:	bf0c      	ite	eq
 8103cb2:	2301      	moveq	r3, #1
 8103cb4:	2300      	movne	r3, #0
 8103cb6:	b2db      	uxtb	r3, r3
 8103cb8:	2b00      	cmp	r3, #0
 8103cba:	d07d      	beq.n	8103db8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103cbc:	683b      	ldr	r3, [r7, #0]
 8103cbe:	681b      	ldr	r3, [r3, #0]
 8103cc0:	4a51      	ldr	r2, [pc, #324]	; (8103e08 <HAL_ADC_ConfigChannel+0x68c>)
 8103cc2:	4293      	cmp	r3, r2
 8103cc4:	d130      	bne.n	8103d28 <HAL_ADC_ConfigChannel+0x5ac>
 8103cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103ccc:	2b00      	cmp	r3, #0
 8103cce:	d12b      	bne.n	8103d28 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	681b      	ldr	r3, [r3, #0]
 8103cd4:	4a4b      	ldr	r2, [pc, #300]	; (8103e04 <HAL_ADC_ConfigChannel+0x688>)
 8103cd6:	4293      	cmp	r3, r2
 8103cd8:	f040 8081 	bne.w	8103dde <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	681b      	ldr	r3, [r3, #0]
 8103ce0:	4a44      	ldr	r2, [pc, #272]	; (8103df4 <HAL_ADC_ConfigChannel+0x678>)
 8103ce2:	4293      	cmp	r3, r2
 8103ce4:	d004      	beq.n	8103cf0 <HAL_ADC_ConfigChannel+0x574>
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	681b      	ldr	r3, [r3, #0]
 8103cea:	4a43      	ldr	r2, [pc, #268]	; (8103df8 <HAL_ADC_ConfigChannel+0x67c>)
 8103cec:	4293      	cmp	r3, r2
 8103cee:	d101      	bne.n	8103cf4 <HAL_ADC_ConfigChannel+0x578>
 8103cf0:	4a42      	ldr	r2, [pc, #264]	; (8103dfc <HAL_ADC_ConfigChannel+0x680>)
 8103cf2:	e000      	b.n	8103cf6 <HAL_ADC_ConfigChannel+0x57a>
 8103cf4:	4a42      	ldr	r2, [pc, #264]	; (8103e00 <HAL_ADC_ConfigChannel+0x684>)
 8103cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103cf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103cfc:	4619      	mov	r1, r3
 8103cfe:	4610      	mov	r0, r2
 8103d00:	f7ff fa21 	bl	8103146 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103d04:	4b41      	ldr	r3, [pc, #260]	; (8103e0c <HAL_ADC_ConfigChannel+0x690>)
 8103d06:	681b      	ldr	r3, [r3, #0]
 8103d08:	099b      	lsrs	r3, r3, #6
 8103d0a:	4a41      	ldr	r2, [pc, #260]	; (8103e10 <HAL_ADC_ConfigChannel+0x694>)
 8103d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8103d10:	099b      	lsrs	r3, r3, #6
 8103d12:	3301      	adds	r3, #1
 8103d14:	005b      	lsls	r3, r3, #1
 8103d16:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103d18:	e002      	b.n	8103d20 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8103d1a:	68bb      	ldr	r3, [r7, #8]
 8103d1c:	3b01      	subs	r3, #1
 8103d1e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103d20:	68bb      	ldr	r3, [r7, #8]
 8103d22:	2b00      	cmp	r3, #0
 8103d24:	d1f9      	bne.n	8103d1a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103d26:	e05a      	b.n	8103dde <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103d28:	683b      	ldr	r3, [r7, #0]
 8103d2a:	681b      	ldr	r3, [r3, #0]
 8103d2c:	4a39      	ldr	r2, [pc, #228]	; (8103e14 <HAL_ADC_ConfigChannel+0x698>)
 8103d2e:	4293      	cmp	r3, r2
 8103d30:	d11e      	bne.n	8103d70 <HAL_ADC_ConfigChannel+0x5f4>
 8103d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103d38:	2b00      	cmp	r3, #0
 8103d3a:	d119      	bne.n	8103d70 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103d3c:	687b      	ldr	r3, [r7, #4]
 8103d3e:	681b      	ldr	r3, [r3, #0]
 8103d40:	4a30      	ldr	r2, [pc, #192]	; (8103e04 <HAL_ADC_ConfigChannel+0x688>)
 8103d42:	4293      	cmp	r3, r2
 8103d44:	d14b      	bne.n	8103dde <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103d46:	687b      	ldr	r3, [r7, #4]
 8103d48:	681b      	ldr	r3, [r3, #0]
 8103d4a:	4a2a      	ldr	r2, [pc, #168]	; (8103df4 <HAL_ADC_ConfigChannel+0x678>)
 8103d4c:	4293      	cmp	r3, r2
 8103d4e:	d004      	beq.n	8103d5a <HAL_ADC_ConfigChannel+0x5de>
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	681b      	ldr	r3, [r3, #0]
 8103d54:	4a28      	ldr	r2, [pc, #160]	; (8103df8 <HAL_ADC_ConfigChannel+0x67c>)
 8103d56:	4293      	cmp	r3, r2
 8103d58:	d101      	bne.n	8103d5e <HAL_ADC_ConfigChannel+0x5e2>
 8103d5a:	4a28      	ldr	r2, [pc, #160]	; (8103dfc <HAL_ADC_ConfigChannel+0x680>)
 8103d5c:	e000      	b.n	8103d60 <HAL_ADC_ConfigChannel+0x5e4>
 8103d5e:	4a28      	ldr	r2, [pc, #160]	; (8103e00 <HAL_ADC_ConfigChannel+0x684>)
 8103d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103d66:	4619      	mov	r1, r3
 8103d68:	4610      	mov	r0, r2
 8103d6a:	f7ff f9ec 	bl	8103146 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103d6e:	e036      	b.n	8103dde <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103d70:	683b      	ldr	r3, [r7, #0]
 8103d72:	681b      	ldr	r3, [r3, #0]
 8103d74:	4a28      	ldr	r2, [pc, #160]	; (8103e18 <HAL_ADC_ConfigChannel+0x69c>)
 8103d76:	4293      	cmp	r3, r2
 8103d78:	d131      	bne.n	8103dde <HAL_ADC_ConfigChannel+0x662>
 8103d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103d80:	2b00      	cmp	r3, #0
 8103d82:	d12c      	bne.n	8103dde <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103d84:	687b      	ldr	r3, [r7, #4]
 8103d86:	681b      	ldr	r3, [r3, #0]
 8103d88:	4a1e      	ldr	r2, [pc, #120]	; (8103e04 <HAL_ADC_ConfigChannel+0x688>)
 8103d8a:	4293      	cmp	r3, r2
 8103d8c:	d127      	bne.n	8103dde <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	681b      	ldr	r3, [r3, #0]
 8103d92:	4a18      	ldr	r2, [pc, #96]	; (8103df4 <HAL_ADC_ConfigChannel+0x678>)
 8103d94:	4293      	cmp	r3, r2
 8103d96:	d004      	beq.n	8103da2 <HAL_ADC_ConfigChannel+0x626>
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	681b      	ldr	r3, [r3, #0]
 8103d9c:	4a16      	ldr	r2, [pc, #88]	; (8103df8 <HAL_ADC_ConfigChannel+0x67c>)
 8103d9e:	4293      	cmp	r3, r2
 8103da0:	d101      	bne.n	8103da6 <HAL_ADC_ConfigChannel+0x62a>
 8103da2:	4a16      	ldr	r2, [pc, #88]	; (8103dfc <HAL_ADC_ConfigChannel+0x680>)
 8103da4:	e000      	b.n	8103da8 <HAL_ADC_ConfigChannel+0x62c>
 8103da6:	4a16      	ldr	r2, [pc, #88]	; (8103e00 <HAL_ADC_ConfigChannel+0x684>)
 8103da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103daa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103dae:	4619      	mov	r1, r3
 8103db0:	4610      	mov	r0, r2
 8103db2:	f7ff f9c8 	bl	8103146 <LL_ADC_SetCommonPathInternalCh>
 8103db6:	e012      	b.n	8103dde <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103db8:	687b      	ldr	r3, [r7, #4]
 8103dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103dbc:	f043 0220 	orr.w	r2, r3, #32
 8103dc0:	687b      	ldr	r3, [r7, #4]
 8103dc2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8103dc4:	2301      	movs	r3, #1
 8103dc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8103dca:	e008      	b.n	8103dde <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103dcc:	687b      	ldr	r3, [r7, #4]
 8103dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103dd0:	f043 0220 	orr.w	r2, r3, #32
 8103dd4:	687b      	ldr	r3, [r7, #4]
 8103dd6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103dd8:	2301      	movs	r3, #1
 8103dda:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	2200      	movs	r2, #0
 8103de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103de6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8103dea:	4618      	mov	r0, r3
 8103dec:	3784      	adds	r7, #132	; 0x84
 8103dee:	46bd      	mov	sp, r7
 8103df0:	bd90      	pop	{r4, r7, pc}
 8103df2:	bf00      	nop
 8103df4:	40022000 	.word	0x40022000
 8103df8:	40022100 	.word	0x40022100
 8103dfc:	40022300 	.word	0x40022300
 8103e00:	58026300 	.word	0x58026300
 8103e04:	58026000 	.word	0x58026000
 8103e08:	cb840000 	.word	0xcb840000
 8103e0c:	10000000 	.word	0x10000000
 8103e10:	053e2d63 	.word	0x053e2d63
 8103e14:	c7520000 	.word	0xc7520000
 8103e18:	cfb80000 	.word	0xcfb80000

08103e1c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103e1c:	b580      	push	{r7, lr}
 8103e1e:	b084      	sub	sp, #16
 8103e20:	af00      	add	r7, sp, #0
 8103e22:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	681b      	ldr	r3, [r3, #0]
 8103e28:	4a7a      	ldr	r2, [pc, #488]	; (8104014 <ADC_ConfigureBoostMode+0x1f8>)
 8103e2a:	4293      	cmp	r3, r2
 8103e2c:	d004      	beq.n	8103e38 <ADC_ConfigureBoostMode+0x1c>
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	4a79      	ldr	r2, [pc, #484]	; (8104018 <ADC_ConfigureBoostMode+0x1fc>)
 8103e34:	4293      	cmp	r3, r2
 8103e36:	d109      	bne.n	8103e4c <ADC_ConfigureBoostMode+0x30>
 8103e38:	4b78      	ldr	r3, [pc, #480]	; (810401c <ADC_ConfigureBoostMode+0x200>)
 8103e3a:	689b      	ldr	r3, [r3, #8]
 8103e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103e40:	2b00      	cmp	r3, #0
 8103e42:	bf14      	ite	ne
 8103e44:	2301      	movne	r3, #1
 8103e46:	2300      	moveq	r3, #0
 8103e48:	b2db      	uxtb	r3, r3
 8103e4a:	e008      	b.n	8103e5e <ADC_ConfigureBoostMode+0x42>
 8103e4c:	4b74      	ldr	r3, [pc, #464]	; (8104020 <ADC_ConfigureBoostMode+0x204>)
 8103e4e:	689b      	ldr	r3, [r3, #8]
 8103e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103e54:	2b00      	cmp	r3, #0
 8103e56:	bf14      	ite	ne
 8103e58:	2301      	movne	r3, #1
 8103e5a:	2300      	moveq	r3, #0
 8103e5c:	b2db      	uxtb	r3, r3
 8103e5e:	2b00      	cmp	r3, #0
 8103e60:	d01c      	beq.n	8103e9c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103e62:	f001 fdb5 	bl	81059d0 <HAL_RCC_GetHCLKFreq>
 8103e66:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103e68:	687b      	ldr	r3, [r7, #4]
 8103e6a:	685b      	ldr	r3, [r3, #4]
 8103e6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103e70:	d010      	beq.n	8103e94 <ADC_ConfigureBoostMode+0x78>
 8103e72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103e76:	d873      	bhi.n	8103f60 <ADC_ConfigureBoostMode+0x144>
 8103e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103e7c:	d002      	beq.n	8103e84 <ADC_ConfigureBoostMode+0x68>
 8103e7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e82:	d16d      	bne.n	8103f60 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103e84:	687b      	ldr	r3, [r7, #4]
 8103e86:	685b      	ldr	r3, [r3, #4]
 8103e88:	0c1b      	lsrs	r3, r3, #16
 8103e8a:	68fa      	ldr	r2, [r7, #12]
 8103e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8103e90:	60fb      	str	r3, [r7, #12]
        break;
 8103e92:	e068      	b.n	8103f66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103e94:	68fb      	ldr	r3, [r7, #12]
 8103e96:	089b      	lsrs	r3, r3, #2
 8103e98:	60fb      	str	r3, [r7, #12]
        break;
 8103e9a:	e064      	b.n	8103f66 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103e9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8103ea0:	f04f 0100 	mov.w	r1, #0
 8103ea4:	f002 fffc 	bl	8106ea0 <HAL_RCCEx_GetPeriphCLKFreq>
 8103ea8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103eaa:	687b      	ldr	r3, [r7, #4]
 8103eac:	685b      	ldr	r3, [r3, #4]
 8103eae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103eb2:	d051      	beq.n	8103f58 <ADC_ConfigureBoostMode+0x13c>
 8103eb4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103eb8:	d854      	bhi.n	8103f64 <ADC_ConfigureBoostMode+0x148>
 8103eba:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103ebe:	d047      	beq.n	8103f50 <ADC_ConfigureBoostMode+0x134>
 8103ec0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103ec4:	d84e      	bhi.n	8103f64 <ADC_ConfigureBoostMode+0x148>
 8103ec6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103eca:	d03d      	beq.n	8103f48 <ADC_ConfigureBoostMode+0x12c>
 8103ecc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103ed0:	d848      	bhi.n	8103f64 <ADC_ConfigureBoostMode+0x148>
 8103ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103ed6:	d033      	beq.n	8103f40 <ADC_ConfigureBoostMode+0x124>
 8103ed8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103edc:	d842      	bhi.n	8103f64 <ADC_ConfigureBoostMode+0x148>
 8103ede:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103ee2:	d029      	beq.n	8103f38 <ADC_ConfigureBoostMode+0x11c>
 8103ee4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103ee8:	d83c      	bhi.n	8103f64 <ADC_ConfigureBoostMode+0x148>
 8103eea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103eee:	d01a      	beq.n	8103f26 <ADC_ConfigureBoostMode+0x10a>
 8103ef0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103ef4:	d836      	bhi.n	8103f64 <ADC_ConfigureBoostMode+0x148>
 8103ef6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103efa:	d014      	beq.n	8103f26 <ADC_ConfigureBoostMode+0x10a>
 8103efc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103f00:	d830      	bhi.n	8103f64 <ADC_ConfigureBoostMode+0x148>
 8103f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103f06:	d00e      	beq.n	8103f26 <ADC_ConfigureBoostMode+0x10a>
 8103f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103f0c:	d82a      	bhi.n	8103f64 <ADC_ConfigureBoostMode+0x148>
 8103f0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103f12:	d008      	beq.n	8103f26 <ADC_ConfigureBoostMode+0x10a>
 8103f14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103f18:	d824      	bhi.n	8103f64 <ADC_ConfigureBoostMode+0x148>
 8103f1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103f1e:	d002      	beq.n	8103f26 <ADC_ConfigureBoostMode+0x10a>
 8103f20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8103f24:	d11e      	bne.n	8103f64 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103f26:	687b      	ldr	r3, [r7, #4]
 8103f28:	685b      	ldr	r3, [r3, #4]
 8103f2a:	0c9b      	lsrs	r3, r3, #18
 8103f2c:	005b      	lsls	r3, r3, #1
 8103f2e:	68fa      	ldr	r2, [r7, #12]
 8103f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8103f34:	60fb      	str	r3, [r7, #12]
        break;
 8103f36:	e016      	b.n	8103f66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103f38:	68fb      	ldr	r3, [r7, #12]
 8103f3a:	091b      	lsrs	r3, r3, #4
 8103f3c:	60fb      	str	r3, [r7, #12]
        break;
 8103f3e:	e012      	b.n	8103f66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103f40:	68fb      	ldr	r3, [r7, #12]
 8103f42:	095b      	lsrs	r3, r3, #5
 8103f44:	60fb      	str	r3, [r7, #12]
        break;
 8103f46:	e00e      	b.n	8103f66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103f48:	68fb      	ldr	r3, [r7, #12]
 8103f4a:	099b      	lsrs	r3, r3, #6
 8103f4c:	60fb      	str	r3, [r7, #12]
        break;
 8103f4e:	e00a      	b.n	8103f66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103f50:	68fb      	ldr	r3, [r7, #12]
 8103f52:	09db      	lsrs	r3, r3, #7
 8103f54:	60fb      	str	r3, [r7, #12]
        break;
 8103f56:	e006      	b.n	8103f66 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103f58:	68fb      	ldr	r3, [r7, #12]
 8103f5a:	0a1b      	lsrs	r3, r3, #8
 8103f5c:	60fb      	str	r3, [r7, #12]
        break;
 8103f5e:	e002      	b.n	8103f66 <ADC_ConfigureBoostMode+0x14a>
        break;
 8103f60:	bf00      	nop
 8103f62:	e000      	b.n	8103f66 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8103f64:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103f66:	f7ff f8cf 	bl	8103108 <HAL_GetREVID>
 8103f6a:	4603      	mov	r3, r0
 8103f6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8103f70:	4293      	cmp	r3, r2
 8103f72:	d815      	bhi.n	8103fa0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8103f74:	68fb      	ldr	r3, [r7, #12]
 8103f76:	4a2b      	ldr	r2, [pc, #172]	; (8104024 <ADC_ConfigureBoostMode+0x208>)
 8103f78:	4293      	cmp	r3, r2
 8103f7a:	d908      	bls.n	8103f8e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	681b      	ldr	r3, [r3, #0]
 8103f80:	689a      	ldr	r2, [r3, #8]
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	681b      	ldr	r3, [r3, #0]
 8103f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103f8a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103f8c:	e03e      	b.n	810400c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103f8e:	687b      	ldr	r3, [r7, #4]
 8103f90:	681b      	ldr	r3, [r3, #0]
 8103f92:	689a      	ldr	r2, [r3, #8]
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	681b      	ldr	r3, [r3, #0]
 8103f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103f9c:	609a      	str	r2, [r3, #8]
}
 8103f9e:	e035      	b.n	810400c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103fa0:	68fb      	ldr	r3, [r7, #12]
 8103fa2:	085b      	lsrs	r3, r3, #1
 8103fa4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103fa6:	68fb      	ldr	r3, [r7, #12]
 8103fa8:	4a1f      	ldr	r2, [pc, #124]	; (8104028 <ADC_ConfigureBoostMode+0x20c>)
 8103faa:	4293      	cmp	r3, r2
 8103fac:	d808      	bhi.n	8103fc0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103fae:	687b      	ldr	r3, [r7, #4]
 8103fb0:	681b      	ldr	r3, [r3, #0]
 8103fb2:	689a      	ldr	r2, [r3, #8]
 8103fb4:	687b      	ldr	r3, [r7, #4]
 8103fb6:	681b      	ldr	r3, [r3, #0]
 8103fb8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8103fbc:	609a      	str	r2, [r3, #8]
}
 8103fbe:	e025      	b.n	810400c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8103fc0:	68fb      	ldr	r3, [r7, #12]
 8103fc2:	4a1a      	ldr	r2, [pc, #104]	; (810402c <ADC_ConfigureBoostMode+0x210>)
 8103fc4:	4293      	cmp	r3, r2
 8103fc6:	d80a      	bhi.n	8103fde <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103fc8:	687b      	ldr	r3, [r7, #4]
 8103fca:	681b      	ldr	r3, [r3, #0]
 8103fcc:	689b      	ldr	r3, [r3, #8]
 8103fce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103fd2:	687b      	ldr	r3, [r7, #4]
 8103fd4:	681b      	ldr	r3, [r3, #0]
 8103fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103fda:	609a      	str	r2, [r3, #8]
}
 8103fdc:	e016      	b.n	810400c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8103fde:	68fb      	ldr	r3, [r7, #12]
 8103fe0:	4a13      	ldr	r2, [pc, #76]	; (8104030 <ADC_ConfigureBoostMode+0x214>)
 8103fe2:	4293      	cmp	r3, r2
 8103fe4:	d80a      	bhi.n	8103ffc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103fe6:	687b      	ldr	r3, [r7, #4]
 8103fe8:	681b      	ldr	r3, [r3, #0]
 8103fea:	689b      	ldr	r3, [r3, #8]
 8103fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103ff0:	687b      	ldr	r3, [r7, #4]
 8103ff2:	681b      	ldr	r3, [r3, #0]
 8103ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103ff8:	609a      	str	r2, [r3, #8]
}
 8103ffa:	e007      	b.n	810400c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103ffc:	687b      	ldr	r3, [r7, #4]
 8103ffe:	681b      	ldr	r3, [r3, #0]
 8104000:	689a      	ldr	r2, [r3, #8]
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	681b      	ldr	r3, [r3, #0]
 8104006:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 810400a:	609a      	str	r2, [r3, #8]
}
 810400c:	bf00      	nop
 810400e:	3710      	adds	r7, #16
 8104010:	46bd      	mov	sp, r7
 8104012:	bd80      	pop	{r7, pc}
 8104014:	40022000 	.word	0x40022000
 8104018:	40022100 	.word	0x40022100
 810401c:	40022300 	.word	0x40022300
 8104020:	58026300 	.word	0x58026300
 8104024:	01312d00 	.word	0x01312d00
 8104028:	005f5e10 	.word	0x005f5e10
 810402c:	00bebc20 	.word	0x00bebc20
 8104030:	017d7840 	.word	0x017d7840

08104034 <LL_ADC_IsEnabled>:
{
 8104034:	b480      	push	{r7}
 8104036:	b083      	sub	sp, #12
 8104038:	af00      	add	r7, sp, #0
 810403a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	689b      	ldr	r3, [r3, #8]
 8104040:	f003 0301 	and.w	r3, r3, #1
 8104044:	2b01      	cmp	r3, #1
 8104046:	d101      	bne.n	810404c <LL_ADC_IsEnabled+0x18>
 8104048:	2301      	movs	r3, #1
 810404a:	e000      	b.n	810404e <LL_ADC_IsEnabled+0x1a>
 810404c:	2300      	movs	r3, #0
}
 810404e:	4618      	mov	r0, r3
 8104050:	370c      	adds	r7, #12
 8104052:	46bd      	mov	sp, r7
 8104054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104058:	4770      	bx	lr

0810405a <LL_ADC_REG_IsConversionOngoing>:
{
 810405a:	b480      	push	{r7}
 810405c:	b083      	sub	sp, #12
 810405e:	af00      	add	r7, sp, #0
 8104060:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8104062:	687b      	ldr	r3, [r7, #4]
 8104064:	689b      	ldr	r3, [r3, #8]
 8104066:	f003 0304 	and.w	r3, r3, #4
 810406a:	2b04      	cmp	r3, #4
 810406c:	d101      	bne.n	8104072 <LL_ADC_REG_IsConversionOngoing+0x18>
 810406e:	2301      	movs	r3, #1
 8104070:	e000      	b.n	8104074 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8104072:	2300      	movs	r3, #0
}
 8104074:	4618      	mov	r0, r3
 8104076:	370c      	adds	r7, #12
 8104078:	46bd      	mov	sp, r7
 810407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810407e:	4770      	bx	lr

08104080 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8104080:	b590      	push	{r4, r7, lr}
 8104082:	b09f      	sub	sp, #124	; 0x7c
 8104084:	af00      	add	r7, sp, #0
 8104086:	6078      	str	r0, [r7, #4]
 8104088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810408a:	2300      	movs	r3, #0
 810408c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8104090:	687b      	ldr	r3, [r7, #4]
 8104092:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8104096:	2b01      	cmp	r3, #1
 8104098:	d101      	bne.n	810409e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 810409a:	2302      	movs	r3, #2
 810409c:	e0c4      	b.n	8104228 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 810409e:	687b      	ldr	r3, [r7, #4]
 81040a0:	2201      	movs	r2, #1
 81040a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81040a6:	2300      	movs	r3, #0
 81040a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81040aa:	2300      	movs	r3, #0
 81040ac:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	681b      	ldr	r3, [r3, #0]
 81040b2:	4a5f      	ldr	r2, [pc, #380]	; (8104230 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81040b4:	4293      	cmp	r3, r2
 81040b6:	d102      	bne.n	81040be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81040b8:	4b5e      	ldr	r3, [pc, #376]	; (8104234 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81040ba:	60bb      	str	r3, [r7, #8]
 81040bc:	e001      	b.n	81040c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81040be:	2300      	movs	r3, #0
 81040c0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81040c2:	68bb      	ldr	r3, [r7, #8]
 81040c4:	2b00      	cmp	r3, #0
 81040c6:	d10b      	bne.n	81040e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81040c8:	687b      	ldr	r3, [r7, #4]
 81040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81040cc:	f043 0220 	orr.w	r2, r3, #32
 81040d0:	687b      	ldr	r3, [r7, #4]
 81040d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	2200      	movs	r2, #0
 81040d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 81040dc:	2301      	movs	r3, #1
 81040de:	e0a3      	b.n	8104228 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81040e0:	68bb      	ldr	r3, [r7, #8]
 81040e2:	4618      	mov	r0, r3
 81040e4:	f7ff ffb9 	bl	810405a <LL_ADC_REG_IsConversionOngoing>
 81040e8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	681b      	ldr	r3, [r3, #0]
 81040ee:	4618      	mov	r0, r3
 81040f0:	f7ff ffb3 	bl	810405a <LL_ADC_REG_IsConversionOngoing>
 81040f4:	4603      	mov	r3, r0
 81040f6:	2b00      	cmp	r3, #0
 81040f8:	f040 8085 	bne.w	8104206 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81040fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81040fe:	2b00      	cmp	r3, #0
 8104100:	f040 8081 	bne.w	8104206 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8104104:	687b      	ldr	r3, [r7, #4]
 8104106:	681b      	ldr	r3, [r3, #0]
 8104108:	4a49      	ldr	r2, [pc, #292]	; (8104230 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810410a:	4293      	cmp	r3, r2
 810410c:	d004      	beq.n	8104118 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 810410e:	687b      	ldr	r3, [r7, #4]
 8104110:	681b      	ldr	r3, [r3, #0]
 8104112:	4a48      	ldr	r2, [pc, #288]	; (8104234 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104114:	4293      	cmp	r3, r2
 8104116:	d101      	bne.n	810411c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8104118:	4b47      	ldr	r3, [pc, #284]	; (8104238 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 810411a:	e000      	b.n	810411e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 810411c:	4b47      	ldr	r3, [pc, #284]	; (810423c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 810411e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104120:	683b      	ldr	r3, [r7, #0]
 8104122:	681b      	ldr	r3, [r3, #0]
 8104124:	2b00      	cmp	r3, #0
 8104126:	d03b      	beq.n	81041a0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8104128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810412a:	689b      	ldr	r3, [r3, #8]
 810412c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8104130:	683b      	ldr	r3, [r7, #0]
 8104132:	685b      	ldr	r3, [r3, #4]
 8104134:	431a      	orrs	r2, r3
 8104136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104138:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810413a:	687b      	ldr	r3, [r7, #4]
 810413c:	681b      	ldr	r3, [r3, #0]
 810413e:	4a3c      	ldr	r2, [pc, #240]	; (8104230 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104140:	4293      	cmp	r3, r2
 8104142:	d004      	beq.n	810414e <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	681b      	ldr	r3, [r3, #0]
 8104148:	4a3a      	ldr	r2, [pc, #232]	; (8104234 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810414a:	4293      	cmp	r3, r2
 810414c:	d10e      	bne.n	810416c <HAL_ADCEx_MultiModeConfigChannel+0xec>
 810414e:	4838      	ldr	r0, [pc, #224]	; (8104230 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104150:	f7ff ff70 	bl	8104034 <LL_ADC_IsEnabled>
 8104154:	4604      	mov	r4, r0
 8104156:	4837      	ldr	r0, [pc, #220]	; (8104234 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104158:	f7ff ff6c 	bl	8104034 <LL_ADC_IsEnabled>
 810415c:	4603      	mov	r3, r0
 810415e:	4323      	orrs	r3, r4
 8104160:	2b00      	cmp	r3, #0
 8104162:	bf0c      	ite	eq
 8104164:	2301      	moveq	r3, #1
 8104166:	2300      	movne	r3, #0
 8104168:	b2db      	uxtb	r3, r3
 810416a:	e008      	b.n	810417e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 810416c:	4834      	ldr	r0, [pc, #208]	; (8104240 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810416e:	f7ff ff61 	bl	8104034 <LL_ADC_IsEnabled>
 8104172:	4603      	mov	r3, r0
 8104174:	2b00      	cmp	r3, #0
 8104176:	bf0c      	ite	eq
 8104178:	2301      	moveq	r3, #1
 810417a:	2300      	movne	r3, #0
 810417c:	b2db      	uxtb	r3, r3
 810417e:	2b00      	cmp	r3, #0
 8104180:	d04b      	beq.n	810421a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8104182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104184:	689b      	ldr	r3, [r3, #8]
 8104186:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 810418a:	f023 030f 	bic.w	r3, r3, #15
 810418e:	683a      	ldr	r2, [r7, #0]
 8104190:	6811      	ldr	r1, [r2, #0]
 8104192:	683a      	ldr	r2, [r7, #0]
 8104194:	6892      	ldr	r2, [r2, #8]
 8104196:	430a      	orrs	r2, r1
 8104198:	431a      	orrs	r2, r3
 810419a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810419c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810419e:	e03c      	b.n	810421a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81041a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81041a2:	689b      	ldr	r3, [r3, #8]
 81041a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81041a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81041aa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81041ac:	687b      	ldr	r3, [r7, #4]
 81041ae:	681b      	ldr	r3, [r3, #0]
 81041b0:	4a1f      	ldr	r2, [pc, #124]	; (8104230 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81041b2:	4293      	cmp	r3, r2
 81041b4:	d004      	beq.n	81041c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81041b6:	687b      	ldr	r3, [r7, #4]
 81041b8:	681b      	ldr	r3, [r3, #0]
 81041ba:	4a1e      	ldr	r2, [pc, #120]	; (8104234 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81041bc:	4293      	cmp	r3, r2
 81041be:	d10e      	bne.n	81041de <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81041c0:	481b      	ldr	r0, [pc, #108]	; (8104230 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81041c2:	f7ff ff37 	bl	8104034 <LL_ADC_IsEnabled>
 81041c6:	4604      	mov	r4, r0
 81041c8:	481a      	ldr	r0, [pc, #104]	; (8104234 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81041ca:	f7ff ff33 	bl	8104034 <LL_ADC_IsEnabled>
 81041ce:	4603      	mov	r3, r0
 81041d0:	4323      	orrs	r3, r4
 81041d2:	2b00      	cmp	r3, #0
 81041d4:	bf0c      	ite	eq
 81041d6:	2301      	moveq	r3, #1
 81041d8:	2300      	movne	r3, #0
 81041da:	b2db      	uxtb	r3, r3
 81041dc:	e008      	b.n	81041f0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81041de:	4818      	ldr	r0, [pc, #96]	; (8104240 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81041e0:	f7ff ff28 	bl	8104034 <LL_ADC_IsEnabled>
 81041e4:	4603      	mov	r3, r0
 81041e6:	2b00      	cmp	r3, #0
 81041e8:	bf0c      	ite	eq
 81041ea:	2301      	moveq	r3, #1
 81041ec:	2300      	movne	r3, #0
 81041ee:	b2db      	uxtb	r3, r3
 81041f0:	2b00      	cmp	r3, #0
 81041f2:	d012      	beq.n	810421a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81041f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81041f6:	689b      	ldr	r3, [r3, #8]
 81041f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81041fc:	f023 030f 	bic.w	r3, r3, #15
 8104200:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8104202:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104204:	e009      	b.n	810421a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104206:	687b      	ldr	r3, [r7, #4]
 8104208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810420a:	f043 0220 	orr.w	r2, r3, #32
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8104212:	2301      	movs	r3, #1
 8104214:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8104218:	e000      	b.n	810421c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810421a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810421c:	687b      	ldr	r3, [r7, #4]
 810421e:	2200      	movs	r2, #0
 8104220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8104224:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8104228:	4618      	mov	r0, r3
 810422a:	377c      	adds	r7, #124	; 0x7c
 810422c:	46bd      	mov	sp, r7
 810422e:	bd90      	pop	{r4, r7, pc}
 8104230:	40022000 	.word	0x40022000
 8104234:	40022100 	.word	0x40022100
 8104238:	40022300 	.word	0x40022300
 810423c:	58026300 	.word	0x58026300
 8104240:	58026000 	.word	0x58026000

08104244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104244:	b480      	push	{r7}
 8104246:	b085      	sub	sp, #20
 8104248:	af00      	add	r7, sp, #0
 810424a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810424c:	687b      	ldr	r3, [r7, #4]
 810424e:	f003 0307 	and.w	r3, r3, #7
 8104252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8104254:	4b0c      	ldr	r3, [pc, #48]	; (8104288 <__NVIC_SetPriorityGrouping+0x44>)
 8104256:	68db      	ldr	r3, [r3, #12]
 8104258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810425a:	68ba      	ldr	r2, [r7, #8]
 810425c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8104260:	4013      	ands	r3, r2
 8104262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8104264:	68fb      	ldr	r3, [r7, #12]
 8104266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104268:	68bb      	ldr	r3, [r7, #8]
 810426a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810426c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8104270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8104276:	4a04      	ldr	r2, [pc, #16]	; (8104288 <__NVIC_SetPriorityGrouping+0x44>)
 8104278:	68bb      	ldr	r3, [r7, #8]
 810427a:	60d3      	str	r3, [r2, #12]
}
 810427c:	bf00      	nop
 810427e:	3714      	adds	r7, #20
 8104280:	46bd      	mov	sp, r7
 8104282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104286:	4770      	bx	lr
 8104288:	e000ed00 	.word	0xe000ed00

0810428c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810428c:	b480      	push	{r7}
 810428e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104290:	4b04      	ldr	r3, [pc, #16]	; (81042a4 <__NVIC_GetPriorityGrouping+0x18>)
 8104292:	68db      	ldr	r3, [r3, #12]
 8104294:	0a1b      	lsrs	r3, r3, #8
 8104296:	f003 0307 	and.w	r3, r3, #7
}
 810429a:	4618      	mov	r0, r3
 810429c:	46bd      	mov	sp, r7
 810429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042a2:	4770      	bx	lr
 81042a4:	e000ed00 	.word	0xe000ed00

081042a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81042a8:	b480      	push	{r7}
 81042aa:	b083      	sub	sp, #12
 81042ac:	af00      	add	r7, sp, #0
 81042ae:	4603      	mov	r3, r0
 81042b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81042b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81042b6:	2b00      	cmp	r3, #0
 81042b8:	db0b      	blt.n	81042d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81042ba:	88fb      	ldrh	r3, [r7, #6]
 81042bc:	f003 021f 	and.w	r2, r3, #31
 81042c0:	4907      	ldr	r1, [pc, #28]	; (81042e0 <__NVIC_EnableIRQ+0x38>)
 81042c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81042c6:	095b      	lsrs	r3, r3, #5
 81042c8:	2001      	movs	r0, #1
 81042ca:	fa00 f202 	lsl.w	r2, r0, r2
 81042ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81042d2:	bf00      	nop
 81042d4:	370c      	adds	r7, #12
 81042d6:	46bd      	mov	sp, r7
 81042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042dc:	4770      	bx	lr
 81042de:	bf00      	nop
 81042e0:	e000e100 	.word	0xe000e100

081042e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81042e4:	b480      	push	{r7}
 81042e6:	b083      	sub	sp, #12
 81042e8:	af00      	add	r7, sp, #0
 81042ea:	4603      	mov	r3, r0
 81042ec:	6039      	str	r1, [r7, #0]
 81042ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81042f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81042f4:	2b00      	cmp	r3, #0
 81042f6:	db0a      	blt.n	810430e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81042f8:	683b      	ldr	r3, [r7, #0]
 81042fa:	b2da      	uxtb	r2, r3
 81042fc:	490c      	ldr	r1, [pc, #48]	; (8104330 <__NVIC_SetPriority+0x4c>)
 81042fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104302:	0112      	lsls	r2, r2, #4
 8104304:	b2d2      	uxtb	r2, r2
 8104306:	440b      	add	r3, r1
 8104308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810430c:	e00a      	b.n	8104324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810430e:	683b      	ldr	r3, [r7, #0]
 8104310:	b2da      	uxtb	r2, r3
 8104312:	4908      	ldr	r1, [pc, #32]	; (8104334 <__NVIC_SetPriority+0x50>)
 8104314:	88fb      	ldrh	r3, [r7, #6]
 8104316:	f003 030f 	and.w	r3, r3, #15
 810431a:	3b04      	subs	r3, #4
 810431c:	0112      	lsls	r2, r2, #4
 810431e:	b2d2      	uxtb	r2, r2
 8104320:	440b      	add	r3, r1
 8104322:	761a      	strb	r2, [r3, #24]
}
 8104324:	bf00      	nop
 8104326:	370c      	adds	r7, #12
 8104328:	46bd      	mov	sp, r7
 810432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810432e:	4770      	bx	lr
 8104330:	e000e100 	.word	0xe000e100
 8104334:	e000ed00 	.word	0xe000ed00

08104338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104338:	b480      	push	{r7}
 810433a:	b089      	sub	sp, #36	; 0x24
 810433c:	af00      	add	r7, sp, #0
 810433e:	60f8      	str	r0, [r7, #12]
 8104340:	60b9      	str	r1, [r7, #8]
 8104342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8104344:	68fb      	ldr	r3, [r7, #12]
 8104346:	f003 0307 	and.w	r3, r3, #7
 810434a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810434c:	69fb      	ldr	r3, [r7, #28]
 810434e:	f1c3 0307 	rsb	r3, r3, #7
 8104352:	2b04      	cmp	r3, #4
 8104354:	bf28      	it	cs
 8104356:	2304      	movcs	r3, #4
 8104358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810435a:	69fb      	ldr	r3, [r7, #28]
 810435c:	3304      	adds	r3, #4
 810435e:	2b06      	cmp	r3, #6
 8104360:	d902      	bls.n	8104368 <NVIC_EncodePriority+0x30>
 8104362:	69fb      	ldr	r3, [r7, #28]
 8104364:	3b03      	subs	r3, #3
 8104366:	e000      	b.n	810436a <NVIC_EncodePriority+0x32>
 8104368:	2300      	movs	r3, #0
 810436a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810436c:	f04f 32ff 	mov.w	r2, #4294967295
 8104370:	69bb      	ldr	r3, [r7, #24]
 8104372:	fa02 f303 	lsl.w	r3, r2, r3
 8104376:	43da      	mvns	r2, r3
 8104378:	68bb      	ldr	r3, [r7, #8]
 810437a:	401a      	ands	r2, r3
 810437c:	697b      	ldr	r3, [r7, #20]
 810437e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104380:	f04f 31ff 	mov.w	r1, #4294967295
 8104384:	697b      	ldr	r3, [r7, #20]
 8104386:	fa01 f303 	lsl.w	r3, r1, r3
 810438a:	43d9      	mvns	r1, r3
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104390:	4313      	orrs	r3, r2
         );
}
 8104392:	4618      	mov	r0, r3
 8104394:	3724      	adds	r7, #36	; 0x24
 8104396:	46bd      	mov	sp, r7
 8104398:	f85d 7b04 	ldr.w	r7, [sp], #4
 810439c:	4770      	bx	lr
	...

081043a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81043a0:	b580      	push	{r7, lr}
 81043a2:	b082      	sub	sp, #8
 81043a4:	af00      	add	r7, sp, #0
 81043a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81043a8:	687b      	ldr	r3, [r7, #4]
 81043aa:	3b01      	subs	r3, #1
 81043ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81043b0:	d301      	bcc.n	81043b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81043b2:	2301      	movs	r3, #1
 81043b4:	e00f      	b.n	81043d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81043b6:	4a0a      	ldr	r2, [pc, #40]	; (81043e0 <SysTick_Config+0x40>)
 81043b8:	687b      	ldr	r3, [r7, #4]
 81043ba:	3b01      	subs	r3, #1
 81043bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81043be:	210f      	movs	r1, #15
 81043c0:	f04f 30ff 	mov.w	r0, #4294967295
 81043c4:	f7ff ff8e 	bl	81042e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81043c8:	4b05      	ldr	r3, [pc, #20]	; (81043e0 <SysTick_Config+0x40>)
 81043ca:	2200      	movs	r2, #0
 81043cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81043ce:	4b04      	ldr	r3, [pc, #16]	; (81043e0 <SysTick_Config+0x40>)
 81043d0:	2207      	movs	r2, #7
 81043d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81043d4:	2300      	movs	r3, #0
}
 81043d6:	4618      	mov	r0, r3
 81043d8:	3708      	adds	r7, #8
 81043da:	46bd      	mov	sp, r7
 81043dc:	bd80      	pop	{r7, pc}
 81043de:	bf00      	nop
 81043e0:	e000e010 	.word	0xe000e010

081043e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81043e4:	b580      	push	{r7, lr}
 81043e6:	b082      	sub	sp, #8
 81043e8:	af00      	add	r7, sp, #0
 81043ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81043ec:	6878      	ldr	r0, [r7, #4]
 81043ee:	f7ff ff29 	bl	8104244 <__NVIC_SetPriorityGrouping>
}
 81043f2:	bf00      	nop
 81043f4:	3708      	adds	r7, #8
 81043f6:	46bd      	mov	sp, r7
 81043f8:	bd80      	pop	{r7, pc}

081043fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81043fa:	b580      	push	{r7, lr}
 81043fc:	b086      	sub	sp, #24
 81043fe:	af00      	add	r7, sp, #0
 8104400:	4603      	mov	r3, r0
 8104402:	60b9      	str	r1, [r7, #8]
 8104404:	607a      	str	r2, [r7, #4]
 8104406:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8104408:	f7ff ff40 	bl	810428c <__NVIC_GetPriorityGrouping>
 810440c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810440e:	687a      	ldr	r2, [r7, #4]
 8104410:	68b9      	ldr	r1, [r7, #8]
 8104412:	6978      	ldr	r0, [r7, #20]
 8104414:	f7ff ff90 	bl	8104338 <NVIC_EncodePriority>
 8104418:	4602      	mov	r2, r0
 810441a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810441e:	4611      	mov	r1, r2
 8104420:	4618      	mov	r0, r3
 8104422:	f7ff ff5f 	bl	81042e4 <__NVIC_SetPriority>
}
 8104426:	bf00      	nop
 8104428:	3718      	adds	r7, #24
 810442a:	46bd      	mov	sp, r7
 810442c:	bd80      	pop	{r7, pc}

0810442e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810442e:	b580      	push	{r7, lr}
 8104430:	b082      	sub	sp, #8
 8104432:	af00      	add	r7, sp, #0
 8104434:	4603      	mov	r3, r0
 8104436:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8104438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810443c:	4618      	mov	r0, r3
 810443e:	f7ff ff33 	bl	81042a8 <__NVIC_EnableIRQ>
}
 8104442:	bf00      	nop
 8104444:	3708      	adds	r7, #8
 8104446:	46bd      	mov	sp, r7
 8104448:	bd80      	pop	{r7, pc}

0810444a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810444a:	b580      	push	{r7, lr}
 810444c:	b082      	sub	sp, #8
 810444e:	af00      	add	r7, sp, #0
 8104450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8104452:	6878      	ldr	r0, [r7, #4]
 8104454:	f7ff ffa4 	bl	81043a0 <SysTick_Config>
 8104458:	4603      	mov	r3, r0
}
 810445a:	4618      	mov	r0, r3
 810445c:	3708      	adds	r7, #8
 810445e:	46bd      	mov	sp, r7
 8104460:	bd80      	pop	{r7, pc}
	...

08104464 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8104464:	b480      	push	{r7}
 8104466:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104468:	4b07      	ldr	r3, [pc, #28]	; (8104488 <HAL_GetCurrentCPUID+0x24>)
 810446a:	681b      	ldr	r3, [r3, #0]
 810446c:	091b      	lsrs	r3, r3, #4
 810446e:	f003 030f 	and.w	r3, r3, #15
 8104472:	2b07      	cmp	r3, #7
 8104474:	d101      	bne.n	810447a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8104476:	2303      	movs	r3, #3
 8104478:	e000      	b.n	810447c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810447a:	2301      	movs	r3, #1
  }
}
 810447c:	4618      	mov	r0, r3
 810447e:	46bd      	mov	sp, r7
 8104480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104484:	4770      	bx	lr
 8104486:	bf00      	nop
 8104488:	e000ed00 	.word	0xe000ed00

0810448c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810448c:	b480      	push	{r7}
 810448e:	b089      	sub	sp, #36	; 0x24
 8104490:	af00      	add	r7, sp, #0
 8104492:	6078      	str	r0, [r7, #4]
 8104494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104496:	2300      	movs	r3, #0
 8104498:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810449a:	4b89      	ldr	r3, [pc, #548]	; (81046c0 <HAL_GPIO_Init+0x234>)
 810449c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810449e:	e194      	b.n	81047ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81044a0:	683b      	ldr	r3, [r7, #0]
 81044a2:	681a      	ldr	r2, [r3, #0]
 81044a4:	2101      	movs	r1, #1
 81044a6:	69fb      	ldr	r3, [r7, #28]
 81044a8:	fa01 f303 	lsl.w	r3, r1, r3
 81044ac:	4013      	ands	r3, r2
 81044ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81044b0:	693b      	ldr	r3, [r7, #16]
 81044b2:	2b00      	cmp	r3, #0
 81044b4:	f000 8186 	beq.w	81047c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81044b8:	683b      	ldr	r3, [r7, #0]
 81044ba:	685b      	ldr	r3, [r3, #4]
 81044bc:	f003 0303 	and.w	r3, r3, #3
 81044c0:	2b01      	cmp	r3, #1
 81044c2:	d005      	beq.n	81044d0 <HAL_GPIO_Init+0x44>
 81044c4:	683b      	ldr	r3, [r7, #0]
 81044c6:	685b      	ldr	r3, [r3, #4]
 81044c8:	f003 0303 	and.w	r3, r3, #3
 81044cc:	2b02      	cmp	r3, #2
 81044ce:	d130      	bne.n	8104532 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	689b      	ldr	r3, [r3, #8]
 81044d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81044d6:	69fb      	ldr	r3, [r7, #28]
 81044d8:	005b      	lsls	r3, r3, #1
 81044da:	2203      	movs	r2, #3
 81044dc:	fa02 f303 	lsl.w	r3, r2, r3
 81044e0:	43db      	mvns	r3, r3
 81044e2:	69ba      	ldr	r2, [r7, #24]
 81044e4:	4013      	ands	r3, r2
 81044e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81044e8:	683b      	ldr	r3, [r7, #0]
 81044ea:	68da      	ldr	r2, [r3, #12]
 81044ec:	69fb      	ldr	r3, [r7, #28]
 81044ee:	005b      	lsls	r3, r3, #1
 81044f0:	fa02 f303 	lsl.w	r3, r2, r3
 81044f4:	69ba      	ldr	r2, [r7, #24]
 81044f6:	4313      	orrs	r3, r2
 81044f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	69ba      	ldr	r2, [r7, #24]
 81044fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	685b      	ldr	r3, [r3, #4]
 8104504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104506:	2201      	movs	r2, #1
 8104508:	69fb      	ldr	r3, [r7, #28]
 810450a:	fa02 f303 	lsl.w	r3, r2, r3
 810450e:	43db      	mvns	r3, r3
 8104510:	69ba      	ldr	r2, [r7, #24]
 8104512:	4013      	ands	r3, r2
 8104514:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104516:	683b      	ldr	r3, [r7, #0]
 8104518:	685b      	ldr	r3, [r3, #4]
 810451a:	091b      	lsrs	r3, r3, #4
 810451c:	f003 0201 	and.w	r2, r3, #1
 8104520:	69fb      	ldr	r3, [r7, #28]
 8104522:	fa02 f303 	lsl.w	r3, r2, r3
 8104526:	69ba      	ldr	r2, [r7, #24]
 8104528:	4313      	orrs	r3, r2
 810452a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810452c:	687b      	ldr	r3, [r7, #4]
 810452e:	69ba      	ldr	r2, [r7, #24]
 8104530:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8104532:	683b      	ldr	r3, [r7, #0]
 8104534:	685b      	ldr	r3, [r3, #4]
 8104536:	f003 0303 	and.w	r3, r3, #3
 810453a:	2b03      	cmp	r3, #3
 810453c:	d017      	beq.n	810456e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810453e:	687b      	ldr	r3, [r7, #4]
 8104540:	68db      	ldr	r3, [r3, #12]
 8104542:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104544:	69fb      	ldr	r3, [r7, #28]
 8104546:	005b      	lsls	r3, r3, #1
 8104548:	2203      	movs	r2, #3
 810454a:	fa02 f303 	lsl.w	r3, r2, r3
 810454e:	43db      	mvns	r3, r3
 8104550:	69ba      	ldr	r2, [r7, #24]
 8104552:	4013      	ands	r3, r2
 8104554:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104556:	683b      	ldr	r3, [r7, #0]
 8104558:	689a      	ldr	r2, [r3, #8]
 810455a:	69fb      	ldr	r3, [r7, #28]
 810455c:	005b      	lsls	r3, r3, #1
 810455e:	fa02 f303 	lsl.w	r3, r2, r3
 8104562:	69ba      	ldr	r2, [r7, #24]
 8104564:	4313      	orrs	r3, r2
 8104566:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104568:	687b      	ldr	r3, [r7, #4]
 810456a:	69ba      	ldr	r2, [r7, #24]
 810456c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810456e:	683b      	ldr	r3, [r7, #0]
 8104570:	685b      	ldr	r3, [r3, #4]
 8104572:	f003 0303 	and.w	r3, r3, #3
 8104576:	2b02      	cmp	r3, #2
 8104578:	d123      	bne.n	81045c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810457a:	69fb      	ldr	r3, [r7, #28]
 810457c:	08da      	lsrs	r2, r3, #3
 810457e:	687b      	ldr	r3, [r7, #4]
 8104580:	3208      	adds	r2, #8
 8104582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104588:	69fb      	ldr	r3, [r7, #28]
 810458a:	f003 0307 	and.w	r3, r3, #7
 810458e:	009b      	lsls	r3, r3, #2
 8104590:	220f      	movs	r2, #15
 8104592:	fa02 f303 	lsl.w	r3, r2, r3
 8104596:	43db      	mvns	r3, r3
 8104598:	69ba      	ldr	r2, [r7, #24]
 810459a:	4013      	ands	r3, r2
 810459c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810459e:	683b      	ldr	r3, [r7, #0]
 81045a0:	691a      	ldr	r2, [r3, #16]
 81045a2:	69fb      	ldr	r3, [r7, #28]
 81045a4:	f003 0307 	and.w	r3, r3, #7
 81045a8:	009b      	lsls	r3, r3, #2
 81045aa:	fa02 f303 	lsl.w	r3, r2, r3
 81045ae:	69ba      	ldr	r2, [r7, #24]
 81045b0:	4313      	orrs	r3, r2
 81045b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81045b4:	69fb      	ldr	r3, [r7, #28]
 81045b6:	08da      	lsrs	r2, r3, #3
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	3208      	adds	r2, #8
 81045bc:	69b9      	ldr	r1, [r7, #24]
 81045be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81045c2:	687b      	ldr	r3, [r7, #4]
 81045c4:	681b      	ldr	r3, [r3, #0]
 81045c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81045c8:	69fb      	ldr	r3, [r7, #28]
 81045ca:	005b      	lsls	r3, r3, #1
 81045cc:	2203      	movs	r2, #3
 81045ce:	fa02 f303 	lsl.w	r3, r2, r3
 81045d2:	43db      	mvns	r3, r3
 81045d4:	69ba      	ldr	r2, [r7, #24]
 81045d6:	4013      	ands	r3, r2
 81045d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81045da:	683b      	ldr	r3, [r7, #0]
 81045dc:	685b      	ldr	r3, [r3, #4]
 81045de:	f003 0203 	and.w	r2, r3, #3
 81045e2:	69fb      	ldr	r3, [r7, #28]
 81045e4:	005b      	lsls	r3, r3, #1
 81045e6:	fa02 f303 	lsl.w	r3, r2, r3
 81045ea:	69ba      	ldr	r2, [r7, #24]
 81045ec:	4313      	orrs	r3, r2
 81045ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81045f0:	687b      	ldr	r3, [r7, #4]
 81045f2:	69ba      	ldr	r2, [r7, #24]
 81045f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81045f6:	683b      	ldr	r3, [r7, #0]
 81045f8:	685b      	ldr	r3, [r3, #4]
 81045fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81045fe:	2b00      	cmp	r3, #0
 8104600:	f000 80e0 	beq.w	81047c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104604:	4b2f      	ldr	r3, [pc, #188]	; (81046c4 <HAL_GPIO_Init+0x238>)
 8104606:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810460a:	4a2e      	ldr	r2, [pc, #184]	; (81046c4 <HAL_GPIO_Init+0x238>)
 810460c:	f043 0302 	orr.w	r3, r3, #2
 8104610:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104614:	4b2b      	ldr	r3, [pc, #172]	; (81046c4 <HAL_GPIO_Init+0x238>)
 8104616:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810461a:	f003 0302 	and.w	r3, r3, #2
 810461e:	60fb      	str	r3, [r7, #12]
 8104620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104622:	4a29      	ldr	r2, [pc, #164]	; (81046c8 <HAL_GPIO_Init+0x23c>)
 8104624:	69fb      	ldr	r3, [r7, #28]
 8104626:	089b      	lsrs	r3, r3, #2
 8104628:	3302      	adds	r3, #2
 810462a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810462e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104630:	69fb      	ldr	r3, [r7, #28]
 8104632:	f003 0303 	and.w	r3, r3, #3
 8104636:	009b      	lsls	r3, r3, #2
 8104638:	220f      	movs	r2, #15
 810463a:	fa02 f303 	lsl.w	r3, r2, r3
 810463e:	43db      	mvns	r3, r3
 8104640:	69ba      	ldr	r2, [r7, #24]
 8104642:	4013      	ands	r3, r2
 8104644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	4a20      	ldr	r2, [pc, #128]	; (81046cc <HAL_GPIO_Init+0x240>)
 810464a:	4293      	cmp	r3, r2
 810464c:	d052      	beq.n	81046f4 <HAL_GPIO_Init+0x268>
 810464e:	687b      	ldr	r3, [r7, #4]
 8104650:	4a1f      	ldr	r2, [pc, #124]	; (81046d0 <HAL_GPIO_Init+0x244>)
 8104652:	4293      	cmp	r3, r2
 8104654:	d031      	beq.n	81046ba <HAL_GPIO_Init+0x22e>
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	4a1e      	ldr	r2, [pc, #120]	; (81046d4 <HAL_GPIO_Init+0x248>)
 810465a:	4293      	cmp	r3, r2
 810465c:	d02b      	beq.n	81046b6 <HAL_GPIO_Init+0x22a>
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	4a1d      	ldr	r2, [pc, #116]	; (81046d8 <HAL_GPIO_Init+0x24c>)
 8104662:	4293      	cmp	r3, r2
 8104664:	d025      	beq.n	81046b2 <HAL_GPIO_Init+0x226>
 8104666:	687b      	ldr	r3, [r7, #4]
 8104668:	4a1c      	ldr	r2, [pc, #112]	; (81046dc <HAL_GPIO_Init+0x250>)
 810466a:	4293      	cmp	r3, r2
 810466c:	d01f      	beq.n	81046ae <HAL_GPIO_Init+0x222>
 810466e:	687b      	ldr	r3, [r7, #4]
 8104670:	4a1b      	ldr	r2, [pc, #108]	; (81046e0 <HAL_GPIO_Init+0x254>)
 8104672:	4293      	cmp	r3, r2
 8104674:	d019      	beq.n	81046aa <HAL_GPIO_Init+0x21e>
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	4a1a      	ldr	r2, [pc, #104]	; (81046e4 <HAL_GPIO_Init+0x258>)
 810467a:	4293      	cmp	r3, r2
 810467c:	d013      	beq.n	81046a6 <HAL_GPIO_Init+0x21a>
 810467e:	687b      	ldr	r3, [r7, #4]
 8104680:	4a19      	ldr	r2, [pc, #100]	; (81046e8 <HAL_GPIO_Init+0x25c>)
 8104682:	4293      	cmp	r3, r2
 8104684:	d00d      	beq.n	81046a2 <HAL_GPIO_Init+0x216>
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	4a18      	ldr	r2, [pc, #96]	; (81046ec <HAL_GPIO_Init+0x260>)
 810468a:	4293      	cmp	r3, r2
 810468c:	d007      	beq.n	810469e <HAL_GPIO_Init+0x212>
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	4a17      	ldr	r2, [pc, #92]	; (81046f0 <HAL_GPIO_Init+0x264>)
 8104692:	4293      	cmp	r3, r2
 8104694:	d101      	bne.n	810469a <HAL_GPIO_Init+0x20e>
 8104696:	2309      	movs	r3, #9
 8104698:	e02d      	b.n	81046f6 <HAL_GPIO_Init+0x26a>
 810469a:	230a      	movs	r3, #10
 810469c:	e02b      	b.n	81046f6 <HAL_GPIO_Init+0x26a>
 810469e:	2308      	movs	r3, #8
 81046a0:	e029      	b.n	81046f6 <HAL_GPIO_Init+0x26a>
 81046a2:	2307      	movs	r3, #7
 81046a4:	e027      	b.n	81046f6 <HAL_GPIO_Init+0x26a>
 81046a6:	2306      	movs	r3, #6
 81046a8:	e025      	b.n	81046f6 <HAL_GPIO_Init+0x26a>
 81046aa:	2305      	movs	r3, #5
 81046ac:	e023      	b.n	81046f6 <HAL_GPIO_Init+0x26a>
 81046ae:	2304      	movs	r3, #4
 81046b0:	e021      	b.n	81046f6 <HAL_GPIO_Init+0x26a>
 81046b2:	2303      	movs	r3, #3
 81046b4:	e01f      	b.n	81046f6 <HAL_GPIO_Init+0x26a>
 81046b6:	2302      	movs	r3, #2
 81046b8:	e01d      	b.n	81046f6 <HAL_GPIO_Init+0x26a>
 81046ba:	2301      	movs	r3, #1
 81046bc:	e01b      	b.n	81046f6 <HAL_GPIO_Init+0x26a>
 81046be:	bf00      	nop
 81046c0:	580000c0 	.word	0x580000c0
 81046c4:	58024400 	.word	0x58024400
 81046c8:	58000400 	.word	0x58000400
 81046cc:	58020000 	.word	0x58020000
 81046d0:	58020400 	.word	0x58020400
 81046d4:	58020800 	.word	0x58020800
 81046d8:	58020c00 	.word	0x58020c00
 81046dc:	58021000 	.word	0x58021000
 81046e0:	58021400 	.word	0x58021400
 81046e4:	58021800 	.word	0x58021800
 81046e8:	58021c00 	.word	0x58021c00
 81046ec:	58022000 	.word	0x58022000
 81046f0:	58022400 	.word	0x58022400
 81046f4:	2300      	movs	r3, #0
 81046f6:	69fa      	ldr	r2, [r7, #28]
 81046f8:	f002 0203 	and.w	r2, r2, #3
 81046fc:	0092      	lsls	r2, r2, #2
 81046fe:	4093      	lsls	r3, r2
 8104700:	69ba      	ldr	r2, [r7, #24]
 8104702:	4313      	orrs	r3, r2
 8104704:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104706:	4938      	ldr	r1, [pc, #224]	; (81047e8 <HAL_GPIO_Init+0x35c>)
 8104708:	69fb      	ldr	r3, [r7, #28]
 810470a:	089b      	lsrs	r3, r3, #2
 810470c:	3302      	adds	r3, #2
 810470e:	69ba      	ldr	r2, [r7, #24]
 8104710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104718:	681b      	ldr	r3, [r3, #0]
 810471a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810471c:	693b      	ldr	r3, [r7, #16]
 810471e:	43db      	mvns	r3, r3
 8104720:	69ba      	ldr	r2, [r7, #24]
 8104722:	4013      	ands	r3, r2
 8104724:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8104726:	683b      	ldr	r3, [r7, #0]
 8104728:	685b      	ldr	r3, [r3, #4]
 810472a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810472e:	2b00      	cmp	r3, #0
 8104730:	d003      	beq.n	810473a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8104732:	69ba      	ldr	r2, [r7, #24]
 8104734:	693b      	ldr	r3, [r7, #16]
 8104736:	4313      	orrs	r3, r2
 8104738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810473a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810473e:	69bb      	ldr	r3, [r7, #24]
 8104740:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104746:	685b      	ldr	r3, [r3, #4]
 8104748:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810474a:	693b      	ldr	r3, [r7, #16]
 810474c:	43db      	mvns	r3, r3
 810474e:	69ba      	ldr	r2, [r7, #24]
 8104750:	4013      	ands	r3, r2
 8104752:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104754:	683b      	ldr	r3, [r7, #0]
 8104756:	685b      	ldr	r3, [r3, #4]
 8104758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810475c:	2b00      	cmp	r3, #0
 810475e:	d003      	beq.n	8104768 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8104760:	69ba      	ldr	r2, [r7, #24]
 8104762:	693b      	ldr	r3, [r7, #16]
 8104764:	4313      	orrs	r3, r2
 8104766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810476c:	69bb      	ldr	r3, [r7, #24]
 810476e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104770:	697b      	ldr	r3, [r7, #20]
 8104772:	685b      	ldr	r3, [r3, #4]
 8104774:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104776:	693b      	ldr	r3, [r7, #16]
 8104778:	43db      	mvns	r3, r3
 810477a:	69ba      	ldr	r2, [r7, #24]
 810477c:	4013      	ands	r3, r2
 810477e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104780:	683b      	ldr	r3, [r7, #0]
 8104782:	685b      	ldr	r3, [r3, #4]
 8104784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104788:	2b00      	cmp	r3, #0
 810478a:	d003      	beq.n	8104794 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810478c:	69ba      	ldr	r2, [r7, #24]
 810478e:	693b      	ldr	r3, [r7, #16]
 8104790:	4313      	orrs	r3, r2
 8104792:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104794:	697b      	ldr	r3, [r7, #20]
 8104796:	69ba      	ldr	r2, [r7, #24]
 8104798:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810479a:	697b      	ldr	r3, [r7, #20]
 810479c:	681b      	ldr	r3, [r3, #0]
 810479e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81047a0:	693b      	ldr	r3, [r7, #16]
 81047a2:	43db      	mvns	r3, r3
 81047a4:	69ba      	ldr	r2, [r7, #24]
 81047a6:	4013      	ands	r3, r2
 81047a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81047aa:	683b      	ldr	r3, [r7, #0]
 81047ac:	685b      	ldr	r3, [r3, #4]
 81047ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81047b2:	2b00      	cmp	r3, #0
 81047b4:	d003      	beq.n	81047be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81047b6:	69ba      	ldr	r2, [r7, #24]
 81047b8:	693b      	ldr	r3, [r7, #16]
 81047ba:	4313      	orrs	r3, r2
 81047bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81047be:	697b      	ldr	r3, [r7, #20]
 81047c0:	69ba      	ldr	r2, [r7, #24]
 81047c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81047c4:	69fb      	ldr	r3, [r7, #28]
 81047c6:	3301      	adds	r3, #1
 81047c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81047ca:	683b      	ldr	r3, [r7, #0]
 81047cc:	681a      	ldr	r2, [r3, #0]
 81047ce:	69fb      	ldr	r3, [r7, #28]
 81047d0:	fa22 f303 	lsr.w	r3, r2, r3
 81047d4:	2b00      	cmp	r3, #0
 81047d6:	f47f ae63 	bne.w	81044a0 <HAL_GPIO_Init+0x14>
  }
}
 81047da:	bf00      	nop
 81047dc:	bf00      	nop
 81047de:	3724      	adds	r7, #36	; 0x24
 81047e0:	46bd      	mov	sp, r7
 81047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047e6:	4770      	bx	lr
 81047e8:	58000400 	.word	0x58000400

081047ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81047ec:	b480      	push	{r7}
 81047ee:	b083      	sub	sp, #12
 81047f0:	af00      	add	r7, sp, #0
 81047f2:	6078      	str	r0, [r7, #4]
 81047f4:	460b      	mov	r3, r1
 81047f6:	807b      	strh	r3, [r7, #2]
 81047f8:	4613      	mov	r3, r2
 81047fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81047fc:	787b      	ldrb	r3, [r7, #1]
 81047fe:	2b00      	cmp	r3, #0
 8104800:	d003      	beq.n	810480a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8104802:	887a      	ldrh	r2, [r7, #2]
 8104804:	687b      	ldr	r3, [r7, #4]
 8104806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8104808:	e003      	b.n	8104812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810480a:	887b      	ldrh	r3, [r7, #2]
 810480c:	041a      	lsls	r2, r3, #16
 810480e:	687b      	ldr	r3, [r7, #4]
 8104810:	619a      	str	r2, [r3, #24]
}
 8104812:	bf00      	nop
 8104814:	370c      	adds	r7, #12
 8104816:	46bd      	mov	sp, r7
 8104818:	f85d 7b04 	ldr.w	r7, [sp], #4
 810481c:	4770      	bx	lr
	...

08104820 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104820:	b480      	push	{r7}
 8104822:	b083      	sub	sp, #12
 8104824:	af00      	add	r7, sp, #0
 8104826:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104828:	4b05      	ldr	r3, [pc, #20]	; (8104840 <HAL_HSEM_ActivateNotification+0x20>)
 810482a:	681a      	ldr	r2, [r3, #0]
 810482c:	4904      	ldr	r1, [pc, #16]	; (8104840 <HAL_HSEM_ActivateNotification+0x20>)
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	4313      	orrs	r3, r2
 8104832:	600b      	str	r3, [r1, #0]
#endif
}
 8104834:	bf00      	nop
 8104836:	370c      	adds	r7, #12
 8104838:	46bd      	mov	sp, r7
 810483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810483e:	4770      	bx	lr
 8104840:	58026510 	.word	0x58026510

08104844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104844:	b580      	push	{r7, lr}
 8104846:	b082      	sub	sp, #8
 8104848:	af00      	add	r7, sp, #0
 810484a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	2b00      	cmp	r3, #0
 8104850:	d101      	bne.n	8104856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8104852:	2301      	movs	r3, #1
 8104854:	e081      	b.n	810495a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810485c:	b2db      	uxtb	r3, r3
 810485e:	2b00      	cmp	r3, #0
 8104860:	d106      	bne.n	8104870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8104862:	687b      	ldr	r3, [r7, #4]
 8104864:	2200      	movs	r2, #0
 8104866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810486a:	6878      	ldr	r0, [r7, #4]
 810486c:	f7fe f8ba 	bl	81029e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104870:	687b      	ldr	r3, [r7, #4]
 8104872:	2224      	movs	r2, #36	; 0x24
 8104874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	681b      	ldr	r3, [r3, #0]
 810487c:	681a      	ldr	r2, [r3, #0]
 810487e:	687b      	ldr	r3, [r7, #4]
 8104880:	681b      	ldr	r3, [r3, #0]
 8104882:	f022 0201 	bic.w	r2, r2, #1
 8104886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	685a      	ldr	r2, [r3, #4]
 810488c:	687b      	ldr	r3, [r7, #4]
 810488e:	681b      	ldr	r3, [r3, #0]
 8104890:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8104894:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8104896:	687b      	ldr	r3, [r7, #4]
 8104898:	681b      	ldr	r3, [r3, #0]
 810489a:	689a      	ldr	r2, [r3, #8]
 810489c:	687b      	ldr	r3, [r7, #4]
 810489e:	681b      	ldr	r3, [r3, #0]
 81048a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81048a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81048a6:	687b      	ldr	r3, [r7, #4]
 81048a8:	68db      	ldr	r3, [r3, #12]
 81048aa:	2b01      	cmp	r3, #1
 81048ac:	d107      	bne.n	81048be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81048ae:	687b      	ldr	r3, [r7, #4]
 81048b0:	689a      	ldr	r2, [r3, #8]
 81048b2:	687b      	ldr	r3, [r7, #4]
 81048b4:	681b      	ldr	r3, [r3, #0]
 81048b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81048ba:	609a      	str	r2, [r3, #8]
 81048bc:	e006      	b.n	81048cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81048be:	687b      	ldr	r3, [r7, #4]
 81048c0:	689a      	ldr	r2, [r3, #8]
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	681b      	ldr	r3, [r3, #0]
 81048c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81048ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81048cc:	687b      	ldr	r3, [r7, #4]
 81048ce:	68db      	ldr	r3, [r3, #12]
 81048d0:	2b02      	cmp	r3, #2
 81048d2:	d104      	bne.n	81048de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81048d4:	687b      	ldr	r3, [r7, #4]
 81048d6:	681b      	ldr	r3, [r3, #0]
 81048d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81048dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81048de:	687b      	ldr	r3, [r7, #4]
 81048e0:	681b      	ldr	r3, [r3, #0]
 81048e2:	685b      	ldr	r3, [r3, #4]
 81048e4:	687a      	ldr	r2, [r7, #4]
 81048e6:	6812      	ldr	r2, [r2, #0]
 81048e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81048ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81048f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81048f2:	687b      	ldr	r3, [r7, #4]
 81048f4:	681b      	ldr	r3, [r3, #0]
 81048f6:	68da      	ldr	r2, [r3, #12]
 81048f8:	687b      	ldr	r3, [r7, #4]
 81048fa:	681b      	ldr	r3, [r3, #0]
 81048fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104900:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8104902:	687b      	ldr	r3, [r7, #4]
 8104904:	691a      	ldr	r2, [r3, #16]
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	695b      	ldr	r3, [r3, #20]
 810490a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810490e:	687b      	ldr	r3, [r7, #4]
 8104910:	699b      	ldr	r3, [r3, #24]
 8104912:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8104914:	687b      	ldr	r3, [r7, #4]
 8104916:	681b      	ldr	r3, [r3, #0]
 8104918:	430a      	orrs	r2, r1
 810491a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810491c:	687b      	ldr	r3, [r7, #4]
 810491e:	69d9      	ldr	r1, [r3, #28]
 8104920:	687b      	ldr	r3, [r7, #4]
 8104922:	6a1a      	ldr	r2, [r3, #32]
 8104924:	687b      	ldr	r3, [r7, #4]
 8104926:	681b      	ldr	r3, [r3, #0]
 8104928:	430a      	orrs	r2, r1
 810492a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810492c:	687b      	ldr	r3, [r7, #4]
 810492e:	681b      	ldr	r3, [r3, #0]
 8104930:	681a      	ldr	r2, [r3, #0]
 8104932:	687b      	ldr	r3, [r7, #4]
 8104934:	681b      	ldr	r3, [r3, #0]
 8104936:	f042 0201 	orr.w	r2, r2, #1
 810493a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810493c:	687b      	ldr	r3, [r7, #4]
 810493e:	2200      	movs	r2, #0
 8104940:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8104942:	687b      	ldr	r3, [r7, #4]
 8104944:	2220      	movs	r2, #32
 8104946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810494a:	687b      	ldr	r3, [r7, #4]
 810494c:	2200      	movs	r2, #0
 810494e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104950:	687b      	ldr	r3, [r7, #4]
 8104952:	2200      	movs	r2, #0
 8104954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8104958:	2300      	movs	r3, #0
}
 810495a:	4618      	mov	r0, r3
 810495c:	3708      	adds	r7, #8
 810495e:	46bd      	mov	sp, r7
 8104960:	bd80      	pop	{r7, pc}
	...

08104964 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8104964:	b580      	push	{r7, lr}
 8104966:	b088      	sub	sp, #32
 8104968:	af02      	add	r7, sp, #8
 810496a:	60f8      	str	r0, [r7, #12]
 810496c:	607a      	str	r2, [r7, #4]
 810496e:	461a      	mov	r2, r3
 8104970:	460b      	mov	r3, r1
 8104972:	817b      	strh	r3, [r7, #10]
 8104974:	4613      	mov	r3, r2
 8104976:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104978:	68fb      	ldr	r3, [r7, #12]
 810497a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810497e:	b2db      	uxtb	r3, r3
 8104980:	2b20      	cmp	r3, #32
 8104982:	f040 80da 	bne.w	8104b3a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104986:	68fb      	ldr	r3, [r7, #12]
 8104988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810498c:	2b01      	cmp	r3, #1
 810498e:	d101      	bne.n	8104994 <HAL_I2C_Master_Transmit+0x30>
 8104990:	2302      	movs	r3, #2
 8104992:	e0d3      	b.n	8104b3c <HAL_I2C_Master_Transmit+0x1d8>
 8104994:	68fb      	ldr	r3, [r7, #12]
 8104996:	2201      	movs	r2, #1
 8104998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810499c:	f7fe fb84 	bl	81030a8 <HAL_GetTick>
 81049a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81049a2:	697b      	ldr	r3, [r7, #20]
 81049a4:	9300      	str	r3, [sp, #0]
 81049a6:	2319      	movs	r3, #25
 81049a8:	2201      	movs	r2, #1
 81049aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81049ae:	68f8      	ldr	r0, [r7, #12]
 81049b0:	f000 fb07 	bl	8104fc2 <I2C_WaitOnFlagUntilTimeout>
 81049b4:	4603      	mov	r3, r0
 81049b6:	2b00      	cmp	r3, #0
 81049b8:	d001      	beq.n	81049be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 81049ba:	2301      	movs	r3, #1
 81049bc:	e0be      	b.n	8104b3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81049be:	68fb      	ldr	r3, [r7, #12]
 81049c0:	2221      	movs	r2, #33	; 0x21
 81049c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81049c6:	68fb      	ldr	r3, [r7, #12]
 81049c8:	2210      	movs	r2, #16
 81049ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81049ce:	68fb      	ldr	r3, [r7, #12]
 81049d0:	2200      	movs	r2, #0
 81049d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81049d4:	68fb      	ldr	r3, [r7, #12]
 81049d6:	687a      	ldr	r2, [r7, #4]
 81049d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81049da:	68fb      	ldr	r3, [r7, #12]
 81049dc:	893a      	ldrh	r2, [r7, #8]
 81049de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81049e0:	68fb      	ldr	r3, [r7, #12]
 81049e2:	2200      	movs	r2, #0
 81049e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81049e6:	68fb      	ldr	r3, [r7, #12]
 81049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81049ea:	b29b      	uxth	r3, r3
 81049ec:	2bff      	cmp	r3, #255	; 0xff
 81049ee:	d90e      	bls.n	8104a0e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81049f0:	68fb      	ldr	r3, [r7, #12]
 81049f2:	22ff      	movs	r2, #255	; 0xff
 81049f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81049f6:	68fb      	ldr	r3, [r7, #12]
 81049f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81049fa:	b2da      	uxtb	r2, r3
 81049fc:	8979      	ldrh	r1, [r7, #10]
 81049fe:	4b51      	ldr	r3, [pc, #324]	; (8104b44 <HAL_I2C_Master_Transmit+0x1e0>)
 8104a00:	9300      	str	r3, [sp, #0]
 8104a02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104a06:	68f8      	ldr	r0, [r7, #12]
 8104a08:	f000 fd16 	bl	8105438 <I2C_TransferConfig>
 8104a0c:	e06c      	b.n	8104ae8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104a0e:	68fb      	ldr	r3, [r7, #12]
 8104a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a12:	b29a      	uxth	r2, r3
 8104a14:	68fb      	ldr	r3, [r7, #12]
 8104a16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104a18:	68fb      	ldr	r3, [r7, #12]
 8104a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104a1c:	b2da      	uxtb	r2, r3
 8104a1e:	8979      	ldrh	r1, [r7, #10]
 8104a20:	4b48      	ldr	r3, [pc, #288]	; (8104b44 <HAL_I2C_Master_Transmit+0x1e0>)
 8104a22:	9300      	str	r3, [sp, #0]
 8104a24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104a28:	68f8      	ldr	r0, [r7, #12]
 8104a2a:	f000 fd05 	bl	8105438 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8104a2e:	e05b      	b.n	8104ae8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104a30:	697a      	ldr	r2, [r7, #20]
 8104a32:	6a39      	ldr	r1, [r7, #32]
 8104a34:	68f8      	ldr	r0, [r7, #12]
 8104a36:	f000 fb13 	bl	8105060 <I2C_WaitOnTXISFlagUntilTimeout>
 8104a3a:	4603      	mov	r3, r0
 8104a3c:	2b00      	cmp	r3, #0
 8104a3e:	d001      	beq.n	8104a44 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8104a40:	2301      	movs	r3, #1
 8104a42:	e07b      	b.n	8104b3c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8104a44:	68fb      	ldr	r3, [r7, #12]
 8104a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a48:	781a      	ldrb	r2, [r3, #0]
 8104a4a:	68fb      	ldr	r3, [r7, #12]
 8104a4c:	681b      	ldr	r3, [r3, #0]
 8104a4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104a50:	68fb      	ldr	r3, [r7, #12]
 8104a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a54:	1c5a      	adds	r2, r3, #1
 8104a56:	68fb      	ldr	r3, [r7, #12]
 8104a58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8104a5a:	68fb      	ldr	r3, [r7, #12]
 8104a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a5e:	b29b      	uxth	r3, r3
 8104a60:	3b01      	subs	r3, #1
 8104a62:	b29a      	uxth	r2, r3
 8104a64:	68fb      	ldr	r3, [r7, #12]
 8104a66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8104a68:	68fb      	ldr	r3, [r7, #12]
 8104a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104a6c:	3b01      	subs	r3, #1
 8104a6e:	b29a      	uxth	r2, r3
 8104a70:	68fb      	ldr	r3, [r7, #12]
 8104a72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104a74:	68fb      	ldr	r3, [r7, #12]
 8104a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a78:	b29b      	uxth	r3, r3
 8104a7a:	2b00      	cmp	r3, #0
 8104a7c:	d034      	beq.n	8104ae8 <HAL_I2C_Master_Transmit+0x184>
 8104a7e:	68fb      	ldr	r3, [r7, #12]
 8104a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104a82:	2b00      	cmp	r3, #0
 8104a84:	d130      	bne.n	8104ae8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104a86:	697b      	ldr	r3, [r7, #20]
 8104a88:	9300      	str	r3, [sp, #0]
 8104a8a:	6a3b      	ldr	r3, [r7, #32]
 8104a8c:	2200      	movs	r2, #0
 8104a8e:	2180      	movs	r1, #128	; 0x80
 8104a90:	68f8      	ldr	r0, [r7, #12]
 8104a92:	f000 fa96 	bl	8104fc2 <I2C_WaitOnFlagUntilTimeout>
 8104a96:	4603      	mov	r3, r0
 8104a98:	2b00      	cmp	r3, #0
 8104a9a:	d001      	beq.n	8104aa0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8104a9c:	2301      	movs	r3, #1
 8104a9e:	e04d      	b.n	8104b3c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104aa0:	68fb      	ldr	r3, [r7, #12]
 8104aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104aa4:	b29b      	uxth	r3, r3
 8104aa6:	2bff      	cmp	r3, #255	; 0xff
 8104aa8:	d90e      	bls.n	8104ac8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104aaa:	68fb      	ldr	r3, [r7, #12]
 8104aac:	22ff      	movs	r2, #255	; 0xff
 8104aae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104ab0:	68fb      	ldr	r3, [r7, #12]
 8104ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104ab4:	b2da      	uxtb	r2, r3
 8104ab6:	8979      	ldrh	r1, [r7, #10]
 8104ab8:	2300      	movs	r3, #0
 8104aba:	9300      	str	r3, [sp, #0]
 8104abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104ac0:	68f8      	ldr	r0, [r7, #12]
 8104ac2:	f000 fcb9 	bl	8105438 <I2C_TransferConfig>
 8104ac6:	e00f      	b.n	8104ae8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104ac8:	68fb      	ldr	r3, [r7, #12]
 8104aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104acc:	b29a      	uxth	r2, r3
 8104ace:	68fb      	ldr	r3, [r7, #12]
 8104ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104ad2:	68fb      	ldr	r3, [r7, #12]
 8104ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104ad6:	b2da      	uxtb	r2, r3
 8104ad8:	8979      	ldrh	r1, [r7, #10]
 8104ada:	2300      	movs	r3, #0
 8104adc:	9300      	str	r3, [sp, #0]
 8104ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104ae2:	68f8      	ldr	r0, [r7, #12]
 8104ae4:	f000 fca8 	bl	8105438 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8104ae8:	68fb      	ldr	r3, [r7, #12]
 8104aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104aec:	b29b      	uxth	r3, r3
 8104aee:	2b00      	cmp	r3, #0
 8104af0:	d19e      	bne.n	8104a30 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104af2:	697a      	ldr	r2, [r7, #20]
 8104af4:	6a39      	ldr	r1, [r7, #32]
 8104af6:	68f8      	ldr	r0, [r7, #12]
 8104af8:	f000 faf9 	bl	81050ee <I2C_WaitOnSTOPFlagUntilTimeout>
 8104afc:	4603      	mov	r3, r0
 8104afe:	2b00      	cmp	r3, #0
 8104b00:	d001      	beq.n	8104b06 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8104b02:	2301      	movs	r3, #1
 8104b04:	e01a      	b.n	8104b3c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104b06:	68fb      	ldr	r3, [r7, #12]
 8104b08:	681b      	ldr	r3, [r3, #0]
 8104b0a:	2220      	movs	r2, #32
 8104b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104b0e:	68fb      	ldr	r3, [r7, #12]
 8104b10:	681b      	ldr	r3, [r3, #0]
 8104b12:	6859      	ldr	r1, [r3, #4]
 8104b14:	68fb      	ldr	r3, [r7, #12]
 8104b16:	681a      	ldr	r2, [r3, #0]
 8104b18:	4b0b      	ldr	r3, [pc, #44]	; (8104b48 <HAL_I2C_Master_Transmit+0x1e4>)
 8104b1a:	400b      	ands	r3, r1
 8104b1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104b1e:	68fb      	ldr	r3, [r7, #12]
 8104b20:	2220      	movs	r2, #32
 8104b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104b26:	68fb      	ldr	r3, [r7, #12]
 8104b28:	2200      	movs	r2, #0
 8104b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104b2e:	68fb      	ldr	r3, [r7, #12]
 8104b30:	2200      	movs	r2, #0
 8104b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104b36:	2300      	movs	r3, #0
 8104b38:	e000      	b.n	8104b3c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8104b3a:	2302      	movs	r3, #2
  }
}
 8104b3c:	4618      	mov	r0, r3
 8104b3e:	3718      	adds	r7, #24
 8104b40:	46bd      	mov	sp, r7
 8104b42:	bd80      	pop	{r7, pc}
 8104b44:	80002000 	.word	0x80002000
 8104b48:	fe00e800 	.word	0xfe00e800

08104b4c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8104b4c:	b580      	push	{r7, lr}
 8104b4e:	b088      	sub	sp, #32
 8104b50:	af02      	add	r7, sp, #8
 8104b52:	60f8      	str	r0, [r7, #12]
 8104b54:	607a      	str	r2, [r7, #4]
 8104b56:	461a      	mov	r2, r3
 8104b58:	460b      	mov	r3, r1
 8104b5a:	817b      	strh	r3, [r7, #10]
 8104b5c:	4613      	mov	r3, r2
 8104b5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104b60:	68fb      	ldr	r3, [r7, #12]
 8104b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104b66:	b2db      	uxtb	r3, r3
 8104b68:	2b20      	cmp	r3, #32
 8104b6a:	f040 80db 	bne.w	8104d24 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104b6e:	68fb      	ldr	r3, [r7, #12]
 8104b70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104b74:	2b01      	cmp	r3, #1
 8104b76:	d101      	bne.n	8104b7c <HAL_I2C_Master_Receive+0x30>
 8104b78:	2302      	movs	r3, #2
 8104b7a:	e0d4      	b.n	8104d26 <HAL_I2C_Master_Receive+0x1da>
 8104b7c:	68fb      	ldr	r3, [r7, #12]
 8104b7e:	2201      	movs	r2, #1
 8104b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104b84:	f7fe fa90 	bl	81030a8 <HAL_GetTick>
 8104b88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104b8a:	697b      	ldr	r3, [r7, #20]
 8104b8c:	9300      	str	r3, [sp, #0]
 8104b8e:	2319      	movs	r3, #25
 8104b90:	2201      	movs	r2, #1
 8104b92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104b96:	68f8      	ldr	r0, [r7, #12]
 8104b98:	f000 fa13 	bl	8104fc2 <I2C_WaitOnFlagUntilTimeout>
 8104b9c:	4603      	mov	r3, r0
 8104b9e:	2b00      	cmp	r3, #0
 8104ba0:	d001      	beq.n	8104ba6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8104ba2:	2301      	movs	r3, #1
 8104ba4:	e0bf      	b.n	8104d26 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8104ba6:	68fb      	ldr	r3, [r7, #12]
 8104ba8:	2222      	movs	r2, #34	; 0x22
 8104baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8104bae:	68fb      	ldr	r3, [r7, #12]
 8104bb0:	2210      	movs	r2, #16
 8104bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104bb6:	68fb      	ldr	r3, [r7, #12]
 8104bb8:	2200      	movs	r2, #0
 8104bba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104bbc:	68fb      	ldr	r3, [r7, #12]
 8104bbe:	687a      	ldr	r2, [r7, #4]
 8104bc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104bc2:	68fb      	ldr	r3, [r7, #12]
 8104bc4:	893a      	ldrh	r2, [r7, #8]
 8104bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104bc8:	68fb      	ldr	r3, [r7, #12]
 8104bca:	2200      	movs	r2, #0
 8104bcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104bce:	68fb      	ldr	r3, [r7, #12]
 8104bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104bd2:	b29b      	uxth	r3, r3
 8104bd4:	2bff      	cmp	r3, #255	; 0xff
 8104bd6:	d90e      	bls.n	8104bf6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104bd8:	68fb      	ldr	r3, [r7, #12]
 8104bda:	22ff      	movs	r2, #255	; 0xff
 8104bdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104bde:	68fb      	ldr	r3, [r7, #12]
 8104be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104be2:	b2da      	uxtb	r2, r3
 8104be4:	8979      	ldrh	r1, [r7, #10]
 8104be6:	4b52      	ldr	r3, [pc, #328]	; (8104d30 <HAL_I2C_Master_Receive+0x1e4>)
 8104be8:	9300      	str	r3, [sp, #0]
 8104bea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104bee:	68f8      	ldr	r0, [r7, #12]
 8104bf0:	f000 fc22 	bl	8105438 <I2C_TransferConfig>
 8104bf4:	e06d      	b.n	8104cd2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104bf6:	68fb      	ldr	r3, [r7, #12]
 8104bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104bfa:	b29a      	uxth	r2, r3
 8104bfc:	68fb      	ldr	r3, [r7, #12]
 8104bfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104c00:	68fb      	ldr	r3, [r7, #12]
 8104c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c04:	b2da      	uxtb	r2, r3
 8104c06:	8979      	ldrh	r1, [r7, #10]
 8104c08:	4b49      	ldr	r3, [pc, #292]	; (8104d30 <HAL_I2C_Master_Receive+0x1e4>)
 8104c0a:	9300      	str	r3, [sp, #0]
 8104c0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104c10:	68f8      	ldr	r0, [r7, #12]
 8104c12:	f000 fc11 	bl	8105438 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8104c16:	e05c      	b.n	8104cd2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104c18:	697a      	ldr	r2, [r7, #20]
 8104c1a:	6a39      	ldr	r1, [r7, #32]
 8104c1c:	68f8      	ldr	r0, [r7, #12]
 8104c1e:	f000 faa9 	bl	8105174 <I2C_WaitOnRXNEFlagUntilTimeout>
 8104c22:	4603      	mov	r3, r0
 8104c24:	2b00      	cmp	r3, #0
 8104c26:	d001      	beq.n	8104c2c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8104c28:	2301      	movs	r3, #1
 8104c2a:	e07c      	b.n	8104d26 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104c2c:	68fb      	ldr	r3, [r7, #12]
 8104c2e:	681b      	ldr	r3, [r3, #0]
 8104c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104c32:	68fb      	ldr	r3, [r7, #12]
 8104c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c36:	b2d2      	uxtb	r2, r2
 8104c38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104c3a:	68fb      	ldr	r3, [r7, #12]
 8104c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c3e:	1c5a      	adds	r2, r3, #1
 8104c40:	68fb      	ldr	r3, [r7, #12]
 8104c42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8104c44:	68fb      	ldr	r3, [r7, #12]
 8104c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c48:	3b01      	subs	r3, #1
 8104c4a:	b29a      	uxth	r2, r3
 8104c4c:	68fb      	ldr	r3, [r7, #12]
 8104c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8104c50:	68fb      	ldr	r3, [r7, #12]
 8104c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c54:	b29b      	uxth	r3, r3
 8104c56:	3b01      	subs	r3, #1
 8104c58:	b29a      	uxth	r2, r3
 8104c5a:	68fb      	ldr	r3, [r7, #12]
 8104c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104c5e:	68fb      	ldr	r3, [r7, #12]
 8104c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c62:	b29b      	uxth	r3, r3
 8104c64:	2b00      	cmp	r3, #0
 8104c66:	d034      	beq.n	8104cd2 <HAL_I2C_Master_Receive+0x186>
 8104c68:	68fb      	ldr	r3, [r7, #12]
 8104c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c6c:	2b00      	cmp	r3, #0
 8104c6e:	d130      	bne.n	8104cd2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104c70:	697b      	ldr	r3, [r7, #20]
 8104c72:	9300      	str	r3, [sp, #0]
 8104c74:	6a3b      	ldr	r3, [r7, #32]
 8104c76:	2200      	movs	r2, #0
 8104c78:	2180      	movs	r1, #128	; 0x80
 8104c7a:	68f8      	ldr	r0, [r7, #12]
 8104c7c:	f000 f9a1 	bl	8104fc2 <I2C_WaitOnFlagUntilTimeout>
 8104c80:	4603      	mov	r3, r0
 8104c82:	2b00      	cmp	r3, #0
 8104c84:	d001      	beq.n	8104c8a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8104c86:	2301      	movs	r3, #1
 8104c88:	e04d      	b.n	8104d26 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104c8a:	68fb      	ldr	r3, [r7, #12]
 8104c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c8e:	b29b      	uxth	r3, r3
 8104c90:	2bff      	cmp	r3, #255	; 0xff
 8104c92:	d90e      	bls.n	8104cb2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104c94:	68fb      	ldr	r3, [r7, #12]
 8104c96:	22ff      	movs	r2, #255	; 0xff
 8104c98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104c9a:	68fb      	ldr	r3, [r7, #12]
 8104c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c9e:	b2da      	uxtb	r2, r3
 8104ca0:	8979      	ldrh	r1, [r7, #10]
 8104ca2:	2300      	movs	r3, #0
 8104ca4:	9300      	str	r3, [sp, #0]
 8104ca6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104caa:	68f8      	ldr	r0, [r7, #12]
 8104cac:	f000 fbc4 	bl	8105438 <I2C_TransferConfig>
 8104cb0:	e00f      	b.n	8104cd2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104cb2:	68fb      	ldr	r3, [r7, #12]
 8104cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104cb6:	b29a      	uxth	r2, r3
 8104cb8:	68fb      	ldr	r3, [r7, #12]
 8104cba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104cbc:	68fb      	ldr	r3, [r7, #12]
 8104cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104cc0:	b2da      	uxtb	r2, r3
 8104cc2:	8979      	ldrh	r1, [r7, #10]
 8104cc4:	2300      	movs	r3, #0
 8104cc6:	9300      	str	r3, [sp, #0]
 8104cc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104ccc:	68f8      	ldr	r0, [r7, #12]
 8104cce:	f000 fbb3 	bl	8105438 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8104cd2:	68fb      	ldr	r3, [r7, #12]
 8104cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104cd6:	b29b      	uxth	r3, r3
 8104cd8:	2b00      	cmp	r3, #0
 8104cda:	d19d      	bne.n	8104c18 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104cdc:	697a      	ldr	r2, [r7, #20]
 8104cde:	6a39      	ldr	r1, [r7, #32]
 8104ce0:	68f8      	ldr	r0, [r7, #12]
 8104ce2:	f000 fa04 	bl	81050ee <I2C_WaitOnSTOPFlagUntilTimeout>
 8104ce6:	4603      	mov	r3, r0
 8104ce8:	2b00      	cmp	r3, #0
 8104cea:	d001      	beq.n	8104cf0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8104cec:	2301      	movs	r3, #1
 8104cee:	e01a      	b.n	8104d26 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104cf0:	68fb      	ldr	r3, [r7, #12]
 8104cf2:	681b      	ldr	r3, [r3, #0]
 8104cf4:	2220      	movs	r2, #32
 8104cf6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104cf8:	68fb      	ldr	r3, [r7, #12]
 8104cfa:	681b      	ldr	r3, [r3, #0]
 8104cfc:	6859      	ldr	r1, [r3, #4]
 8104cfe:	68fb      	ldr	r3, [r7, #12]
 8104d00:	681a      	ldr	r2, [r3, #0]
 8104d02:	4b0c      	ldr	r3, [pc, #48]	; (8104d34 <HAL_I2C_Master_Receive+0x1e8>)
 8104d04:	400b      	ands	r3, r1
 8104d06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104d08:	68fb      	ldr	r3, [r7, #12]
 8104d0a:	2220      	movs	r2, #32
 8104d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104d10:	68fb      	ldr	r3, [r7, #12]
 8104d12:	2200      	movs	r2, #0
 8104d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104d18:	68fb      	ldr	r3, [r7, #12]
 8104d1a:	2200      	movs	r2, #0
 8104d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104d20:	2300      	movs	r3, #0
 8104d22:	e000      	b.n	8104d26 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8104d24:	2302      	movs	r3, #2
  }
}
 8104d26:	4618      	mov	r0, r3
 8104d28:	3718      	adds	r7, #24
 8104d2a:	46bd      	mov	sp, r7
 8104d2c:	bd80      	pop	{r7, pc}
 8104d2e:	bf00      	nop
 8104d30:	80002400 	.word	0x80002400
 8104d34:	fe00e800 	.word	0xfe00e800

08104d38 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8104d38:	b580      	push	{r7, lr}
 8104d3a:	b08a      	sub	sp, #40	; 0x28
 8104d3c:	af02      	add	r7, sp, #8
 8104d3e:	60f8      	str	r0, [r7, #12]
 8104d40:	607a      	str	r2, [r7, #4]
 8104d42:	603b      	str	r3, [r7, #0]
 8104d44:	460b      	mov	r3, r1
 8104d46:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8104d48:	2300      	movs	r3, #0
 8104d4a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104d4c:	68fb      	ldr	r3, [r7, #12]
 8104d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104d52:	b2db      	uxtb	r3, r3
 8104d54:	2b20      	cmp	r3, #32
 8104d56:	f040 80f1 	bne.w	8104f3c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8104d5a:	68fb      	ldr	r3, [r7, #12]
 8104d5c:	681b      	ldr	r3, [r3, #0]
 8104d5e:	699b      	ldr	r3, [r3, #24]
 8104d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104d68:	d101      	bne.n	8104d6e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8104d6a:	2302      	movs	r3, #2
 8104d6c:	e0e7      	b.n	8104f3e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104d6e:	68fb      	ldr	r3, [r7, #12]
 8104d70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104d74:	2b01      	cmp	r3, #1
 8104d76:	d101      	bne.n	8104d7c <HAL_I2C_IsDeviceReady+0x44>
 8104d78:	2302      	movs	r3, #2
 8104d7a:	e0e0      	b.n	8104f3e <HAL_I2C_IsDeviceReady+0x206>
 8104d7c:	68fb      	ldr	r3, [r7, #12]
 8104d7e:	2201      	movs	r2, #1
 8104d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104d84:	68fb      	ldr	r3, [r7, #12]
 8104d86:	2224      	movs	r2, #36	; 0x24
 8104d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104d8c:	68fb      	ldr	r3, [r7, #12]
 8104d8e:	2200      	movs	r2, #0
 8104d90:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8104d92:	68fb      	ldr	r3, [r7, #12]
 8104d94:	68db      	ldr	r3, [r3, #12]
 8104d96:	2b01      	cmp	r3, #1
 8104d98:	d107      	bne.n	8104daa <HAL_I2C_IsDeviceReady+0x72>
 8104d9a:	897b      	ldrh	r3, [r7, #10]
 8104d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8104da0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104da4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8104da8:	e004      	b.n	8104db4 <HAL_I2C_IsDeviceReady+0x7c>
 8104daa:	897b      	ldrh	r3, [r7, #10]
 8104dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8104db0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8104db4:	68fa      	ldr	r2, [r7, #12]
 8104db6:	6812      	ldr	r2, [r2, #0]
 8104db8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8104dba:	f7fe f975 	bl	81030a8 <HAL_GetTick>
 8104dbe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8104dc0:	68fb      	ldr	r3, [r7, #12]
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	699b      	ldr	r3, [r3, #24]
 8104dc6:	f003 0320 	and.w	r3, r3, #32
 8104dca:	2b20      	cmp	r3, #32
 8104dcc:	bf0c      	ite	eq
 8104dce:	2301      	moveq	r3, #1
 8104dd0:	2300      	movne	r3, #0
 8104dd2:	b2db      	uxtb	r3, r3
 8104dd4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8104dd6:	68fb      	ldr	r3, [r7, #12]
 8104dd8:	681b      	ldr	r3, [r3, #0]
 8104dda:	699b      	ldr	r3, [r3, #24]
 8104ddc:	f003 0310 	and.w	r3, r3, #16
 8104de0:	2b10      	cmp	r3, #16
 8104de2:	bf0c      	ite	eq
 8104de4:	2301      	moveq	r3, #1
 8104de6:	2300      	movne	r3, #0
 8104de8:	b2db      	uxtb	r3, r3
 8104dea:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8104dec:	e034      	b.n	8104e58 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8104dee:	683b      	ldr	r3, [r7, #0]
 8104df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104df4:	d01a      	beq.n	8104e2c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8104df6:	f7fe f957 	bl	81030a8 <HAL_GetTick>
 8104dfa:	4602      	mov	r2, r0
 8104dfc:	69bb      	ldr	r3, [r7, #24]
 8104dfe:	1ad3      	subs	r3, r2, r3
 8104e00:	683a      	ldr	r2, [r7, #0]
 8104e02:	429a      	cmp	r2, r3
 8104e04:	d302      	bcc.n	8104e0c <HAL_I2C_IsDeviceReady+0xd4>
 8104e06:	683b      	ldr	r3, [r7, #0]
 8104e08:	2b00      	cmp	r3, #0
 8104e0a:	d10f      	bne.n	8104e2c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8104e0c:	68fb      	ldr	r3, [r7, #12]
 8104e0e:	2220      	movs	r2, #32
 8104e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104e14:	68fb      	ldr	r3, [r7, #12]
 8104e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104e18:	f043 0220 	orr.w	r2, r3, #32
 8104e1c:	68fb      	ldr	r3, [r7, #12]
 8104e1e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8104e20:	68fb      	ldr	r3, [r7, #12]
 8104e22:	2200      	movs	r2, #0
 8104e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8104e28:	2301      	movs	r3, #1
 8104e2a:	e088      	b.n	8104f3e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8104e2c:	68fb      	ldr	r3, [r7, #12]
 8104e2e:	681b      	ldr	r3, [r3, #0]
 8104e30:	699b      	ldr	r3, [r3, #24]
 8104e32:	f003 0320 	and.w	r3, r3, #32
 8104e36:	2b20      	cmp	r3, #32
 8104e38:	bf0c      	ite	eq
 8104e3a:	2301      	moveq	r3, #1
 8104e3c:	2300      	movne	r3, #0
 8104e3e:	b2db      	uxtb	r3, r3
 8104e40:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8104e42:	68fb      	ldr	r3, [r7, #12]
 8104e44:	681b      	ldr	r3, [r3, #0]
 8104e46:	699b      	ldr	r3, [r3, #24]
 8104e48:	f003 0310 	and.w	r3, r3, #16
 8104e4c:	2b10      	cmp	r3, #16
 8104e4e:	bf0c      	ite	eq
 8104e50:	2301      	moveq	r3, #1
 8104e52:	2300      	movne	r3, #0
 8104e54:	b2db      	uxtb	r3, r3
 8104e56:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8104e58:	7ffb      	ldrb	r3, [r7, #31]
 8104e5a:	2b00      	cmp	r3, #0
 8104e5c:	d102      	bne.n	8104e64 <HAL_I2C_IsDeviceReady+0x12c>
 8104e5e:	7fbb      	ldrb	r3, [r7, #30]
 8104e60:	2b00      	cmp	r3, #0
 8104e62:	d0c4      	beq.n	8104dee <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8104e64:	68fb      	ldr	r3, [r7, #12]
 8104e66:	681b      	ldr	r3, [r3, #0]
 8104e68:	699b      	ldr	r3, [r3, #24]
 8104e6a:	f003 0310 	and.w	r3, r3, #16
 8104e6e:	2b10      	cmp	r3, #16
 8104e70:	d01a      	beq.n	8104ea8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104e72:	69bb      	ldr	r3, [r7, #24]
 8104e74:	9300      	str	r3, [sp, #0]
 8104e76:	683b      	ldr	r3, [r7, #0]
 8104e78:	2200      	movs	r2, #0
 8104e7a:	2120      	movs	r1, #32
 8104e7c:	68f8      	ldr	r0, [r7, #12]
 8104e7e:	f000 f8a0 	bl	8104fc2 <I2C_WaitOnFlagUntilTimeout>
 8104e82:	4603      	mov	r3, r0
 8104e84:	2b00      	cmp	r3, #0
 8104e86:	d001      	beq.n	8104e8c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8104e88:	2301      	movs	r3, #1
 8104e8a:	e058      	b.n	8104f3e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104e8c:	68fb      	ldr	r3, [r7, #12]
 8104e8e:	681b      	ldr	r3, [r3, #0]
 8104e90:	2220      	movs	r2, #32
 8104e92:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8104e94:	68fb      	ldr	r3, [r7, #12]
 8104e96:	2220      	movs	r2, #32
 8104e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104e9c:	68fb      	ldr	r3, [r7, #12]
 8104e9e:	2200      	movs	r2, #0
 8104ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8104ea4:	2300      	movs	r3, #0
 8104ea6:	e04a      	b.n	8104f3e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104ea8:	69bb      	ldr	r3, [r7, #24]
 8104eaa:	9300      	str	r3, [sp, #0]
 8104eac:	683b      	ldr	r3, [r7, #0]
 8104eae:	2200      	movs	r2, #0
 8104eb0:	2120      	movs	r1, #32
 8104eb2:	68f8      	ldr	r0, [r7, #12]
 8104eb4:	f000 f885 	bl	8104fc2 <I2C_WaitOnFlagUntilTimeout>
 8104eb8:	4603      	mov	r3, r0
 8104eba:	2b00      	cmp	r3, #0
 8104ebc:	d001      	beq.n	8104ec2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8104ebe:	2301      	movs	r3, #1
 8104ec0:	e03d      	b.n	8104f3e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104ec2:	68fb      	ldr	r3, [r7, #12]
 8104ec4:	681b      	ldr	r3, [r3, #0]
 8104ec6:	2210      	movs	r2, #16
 8104ec8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104eca:	68fb      	ldr	r3, [r7, #12]
 8104ecc:	681b      	ldr	r3, [r3, #0]
 8104ece:	2220      	movs	r2, #32
 8104ed0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8104ed2:	697b      	ldr	r3, [r7, #20]
 8104ed4:	687a      	ldr	r2, [r7, #4]
 8104ed6:	429a      	cmp	r2, r3
 8104ed8:	d118      	bne.n	8104f0c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8104eda:	68fb      	ldr	r3, [r7, #12]
 8104edc:	681b      	ldr	r3, [r3, #0]
 8104ede:	685a      	ldr	r2, [r3, #4]
 8104ee0:	68fb      	ldr	r3, [r7, #12]
 8104ee2:	681b      	ldr	r3, [r3, #0]
 8104ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8104ee8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104eea:	69bb      	ldr	r3, [r7, #24]
 8104eec:	9300      	str	r3, [sp, #0]
 8104eee:	683b      	ldr	r3, [r7, #0]
 8104ef0:	2200      	movs	r2, #0
 8104ef2:	2120      	movs	r1, #32
 8104ef4:	68f8      	ldr	r0, [r7, #12]
 8104ef6:	f000 f864 	bl	8104fc2 <I2C_WaitOnFlagUntilTimeout>
 8104efa:	4603      	mov	r3, r0
 8104efc:	2b00      	cmp	r3, #0
 8104efe:	d001      	beq.n	8104f04 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8104f00:	2301      	movs	r3, #1
 8104f02:	e01c      	b.n	8104f3e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104f04:	68fb      	ldr	r3, [r7, #12]
 8104f06:	681b      	ldr	r3, [r3, #0]
 8104f08:	2220      	movs	r2, #32
 8104f0a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8104f0c:	697b      	ldr	r3, [r7, #20]
 8104f0e:	3301      	adds	r3, #1
 8104f10:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8104f12:	697b      	ldr	r3, [r7, #20]
 8104f14:	687a      	ldr	r2, [r7, #4]
 8104f16:	429a      	cmp	r2, r3
 8104f18:	f63f af3b 	bhi.w	8104d92 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8104f1c:	68fb      	ldr	r3, [r7, #12]
 8104f1e:	2220      	movs	r2, #32
 8104f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104f24:	68fb      	ldr	r3, [r7, #12]
 8104f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104f28:	f043 0220 	orr.w	r2, r3, #32
 8104f2c:	68fb      	ldr	r3, [r7, #12]
 8104f2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104f30:	68fb      	ldr	r3, [r7, #12]
 8104f32:	2200      	movs	r2, #0
 8104f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8104f38:	2301      	movs	r3, #1
 8104f3a:	e000      	b.n	8104f3e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8104f3c:	2302      	movs	r3, #2
  }
}
 8104f3e:	4618      	mov	r0, r3
 8104f40:	3720      	adds	r7, #32
 8104f42:	46bd      	mov	sp, r7
 8104f44:	bd80      	pop	{r7, pc}

08104f46 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8104f46:	b480      	push	{r7}
 8104f48:	b083      	sub	sp, #12
 8104f4a:	af00      	add	r7, sp, #0
 8104f4c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8104f4e:	687b      	ldr	r3, [r7, #4]
 8104f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104f54:	b2db      	uxtb	r3, r3
}
 8104f56:	4618      	mov	r0, r3
 8104f58:	370c      	adds	r7, #12
 8104f5a:	46bd      	mov	sp, r7
 8104f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f60:	4770      	bx	lr

08104f62 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8104f62:	b480      	push	{r7}
 8104f64:	b083      	sub	sp, #12
 8104f66:	af00      	add	r7, sp, #0
 8104f68:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8104f6a:	687b      	ldr	r3, [r7, #4]
 8104f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8104f6e:	4618      	mov	r0, r3
 8104f70:	370c      	adds	r7, #12
 8104f72:	46bd      	mov	sp, r7
 8104f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f78:	4770      	bx	lr

08104f7a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8104f7a:	b480      	push	{r7}
 8104f7c:	b083      	sub	sp, #12
 8104f7e:	af00      	add	r7, sp, #0
 8104f80:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104f82:	687b      	ldr	r3, [r7, #4]
 8104f84:	681b      	ldr	r3, [r3, #0]
 8104f86:	699b      	ldr	r3, [r3, #24]
 8104f88:	f003 0302 	and.w	r3, r3, #2
 8104f8c:	2b02      	cmp	r3, #2
 8104f8e:	d103      	bne.n	8104f98 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	681b      	ldr	r3, [r3, #0]
 8104f94:	2200      	movs	r2, #0
 8104f96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8104f98:	687b      	ldr	r3, [r7, #4]
 8104f9a:	681b      	ldr	r3, [r3, #0]
 8104f9c:	699b      	ldr	r3, [r3, #24]
 8104f9e:	f003 0301 	and.w	r3, r3, #1
 8104fa2:	2b01      	cmp	r3, #1
 8104fa4:	d007      	beq.n	8104fb6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8104fa6:	687b      	ldr	r3, [r7, #4]
 8104fa8:	681b      	ldr	r3, [r3, #0]
 8104faa:	699a      	ldr	r2, [r3, #24]
 8104fac:	687b      	ldr	r3, [r7, #4]
 8104fae:	681b      	ldr	r3, [r3, #0]
 8104fb0:	f042 0201 	orr.w	r2, r2, #1
 8104fb4:	619a      	str	r2, [r3, #24]
  }
}
 8104fb6:	bf00      	nop
 8104fb8:	370c      	adds	r7, #12
 8104fba:	46bd      	mov	sp, r7
 8104fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fc0:	4770      	bx	lr

08104fc2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8104fc2:	b580      	push	{r7, lr}
 8104fc4:	b084      	sub	sp, #16
 8104fc6:	af00      	add	r7, sp, #0
 8104fc8:	60f8      	str	r0, [r7, #12]
 8104fca:	60b9      	str	r1, [r7, #8]
 8104fcc:	603b      	str	r3, [r7, #0]
 8104fce:	4613      	mov	r3, r2
 8104fd0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104fd2:	e031      	b.n	8105038 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104fd4:	683b      	ldr	r3, [r7, #0]
 8104fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104fda:	d02d      	beq.n	8105038 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104fdc:	f7fe f864 	bl	81030a8 <HAL_GetTick>
 8104fe0:	4602      	mov	r2, r0
 8104fe2:	69bb      	ldr	r3, [r7, #24]
 8104fe4:	1ad3      	subs	r3, r2, r3
 8104fe6:	683a      	ldr	r2, [r7, #0]
 8104fe8:	429a      	cmp	r2, r3
 8104fea:	d302      	bcc.n	8104ff2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8104fec:	683b      	ldr	r3, [r7, #0]
 8104fee:	2b00      	cmp	r3, #0
 8104ff0:	d122      	bne.n	8105038 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8104ff2:	68fb      	ldr	r3, [r7, #12]
 8104ff4:	681b      	ldr	r3, [r3, #0]
 8104ff6:	699a      	ldr	r2, [r3, #24]
 8104ff8:	68bb      	ldr	r3, [r7, #8]
 8104ffa:	4013      	ands	r3, r2
 8104ffc:	68ba      	ldr	r2, [r7, #8]
 8104ffe:	429a      	cmp	r2, r3
 8105000:	bf0c      	ite	eq
 8105002:	2301      	moveq	r3, #1
 8105004:	2300      	movne	r3, #0
 8105006:	b2db      	uxtb	r3, r3
 8105008:	461a      	mov	r2, r3
 810500a:	79fb      	ldrb	r3, [r7, #7]
 810500c:	429a      	cmp	r2, r3
 810500e:	d113      	bne.n	8105038 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105010:	68fb      	ldr	r3, [r7, #12]
 8105012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105014:	f043 0220 	orr.w	r2, r3, #32
 8105018:	68fb      	ldr	r3, [r7, #12]
 810501a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810501c:	68fb      	ldr	r3, [r7, #12]
 810501e:	2220      	movs	r2, #32
 8105020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8105024:	68fb      	ldr	r3, [r7, #12]
 8105026:	2200      	movs	r2, #0
 8105028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810502c:	68fb      	ldr	r3, [r7, #12]
 810502e:	2200      	movs	r2, #0
 8105030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8105034:	2301      	movs	r3, #1
 8105036:	e00f      	b.n	8105058 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105038:	68fb      	ldr	r3, [r7, #12]
 810503a:	681b      	ldr	r3, [r3, #0]
 810503c:	699a      	ldr	r2, [r3, #24]
 810503e:	68bb      	ldr	r3, [r7, #8]
 8105040:	4013      	ands	r3, r2
 8105042:	68ba      	ldr	r2, [r7, #8]
 8105044:	429a      	cmp	r2, r3
 8105046:	bf0c      	ite	eq
 8105048:	2301      	moveq	r3, #1
 810504a:	2300      	movne	r3, #0
 810504c:	b2db      	uxtb	r3, r3
 810504e:	461a      	mov	r2, r3
 8105050:	79fb      	ldrb	r3, [r7, #7]
 8105052:	429a      	cmp	r2, r3
 8105054:	d0be      	beq.n	8104fd4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8105056:	2300      	movs	r3, #0
}
 8105058:	4618      	mov	r0, r3
 810505a:	3710      	adds	r7, #16
 810505c:	46bd      	mov	sp, r7
 810505e:	bd80      	pop	{r7, pc}

08105060 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105060:	b580      	push	{r7, lr}
 8105062:	b084      	sub	sp, #16
 8105064:	af00      	add	r7, sp, #0
 8105066:	60f8      	str	r0, [r7, #12]
 8105068:	60b9      	str	r1, [r7, #8]
 810506a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810506c:	e033      	b.n	81050d6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810506e:	687a      	ldr	r2, [r7, #4]
 8105070:	68b9      	ldr	r1, [r7, #8]
 8105072:	68f8      	ldr	r0, [r7, #12]
 8105074:	f000 f900 	bl	8105278 <I2C_IsErrorOccurred>
 8105078:	4603      	mov	r3, r0
 810507a:	2b00      	cmp	r3, #0
 810507c:	d001      	beq.n	8105082 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810507e:	2301      	movs	r3, #1
 8105080:	e031      	b.n	81050e6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105082:	68bb      	ldr	r3, [r7, #8]
 8105084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105088:	d025      	beq.n	81050d6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810508a:	f7fe f80d 	bl	81030a8 <HAL_GetTick>
 810508e:	4602      	mov	r2, r0
 8105090:	687b      	ldr	r3, [r7, #4]
 8105092:	1ad3      	subs	r3, r2, r3
 8105094:	68ba      	ldr	r2, [r7, #8]
 8105096:	429a      	cmp	r2, r3
 8105098:	d302      	bcc.n	81050a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810509a:	68bb      	ldr	r3, [r7, #8]
 810509c:	2b00      	cmp	r3, #0
 810509e:	d11a      	bne.n	81050d6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 81050a0:	68fb      	ldr	r3, [r7, #12]
 81050a2:	681b      	ldr	r3, [r3, #0]
 81050a4:	699b      	ldr	r3, [r3, #24]
 81050a6:	f003 0302 	and.w	r3, r3, #2
 81050aa:	2b02      	cmp	r3, #2
 81050ac:	d013      	beq.n	81050d6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81050ae:	68fb      	ldr	r3, [r7, #12]
 81050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81050b2:	f043 0220 	orr.w	r2, r3, #32
 81050b6:	68fb      	ldr	r3, [r7, #12]
 81050b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81050ba:	68fb      	ldr	r3, [r7, #12]
 81050bc:	2220      	movs	r2, #32
 81050be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81050c2:	68fb      	ldr	r3, [r7, #12]
 81050c4:	2200      	movs	r2, #0
 81050c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81050ca:	68fb      	ldr	r3, [r7, #12]
 81050cc:	2200      	movs	r2, #0
 81050ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 81050d2:	2301      	movs	r3, #1
 81050d4:	e007      	b.n	81050e6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81050d6:	68fb      	ldr	r3, [r7, #12]
 81050d8:	681b      	ldr	r3, [r3, #0]
 81050da:	699b      	ldr	r3, [r3, #24]
 81050dc:	f003 0302 	and.w	r3, r3, #2
 81050e0:	2b02      	cmp	r3, #2
 81050e2:	d1c4      	bne.n	810506e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 81050e4:	2300      	movs	r3, #0
}
 81050e6:	4618      	mov	r0, r3
 81050e8:	3710      	adds	r7, #16
 81050ea:	46bd      	mov	sp, r7
 81050ec:	bd80      	pop	{r7, pc}

081050ee <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81050ee:	b580      	push	{r7, lr}
 81050f0:	b084      	sub	sp, #16
 81050f2:	af00      	add	r7, sp, #0
 81050f4:	60f8      	str	r0, [r7, #12]
 81050f6:	60b9      	str	r1, [r7, #8]
 81050f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81050fa:	e02f      	b.n	810515c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81050fc:	687a      	ldr	r2, [r7, #4]
 81050fe:	68b9      	ldr	r1, [r7, #8]
 8105100:	68f8      	ldr	r0, [r7, #12]
 8105102:	f000 f8b9 	bl	8105278 <I2C_IsErrorOccurred>
 8105106:	4603      	mov	r3, r0
 8105108:	2b00      	cmp	r3, #0
 810510a:	d001      	beq.n	8105110 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810510c:	2301      	movs	r3, #1
 810510e:	e02d      	b.n	810516c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105110:	f7fd ffca 	bl	81030a8 <HAL_GetTick>
 8105114:	4602      	mov	r2, r0
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	1ad3      	subs	r3, r2, r3
 810511a:	68ba      	ldr	r2, [r7, #8]
 810511c:	429a      	cmp	r2, r3
 810511e:	d302      	bcc.n	8105126 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8105120:	68bb      	ldr	r3, [r7, #8]
 8105122:	2b00      	cmp	r3, #0
 8105124:	d11a      	bne.n	810515c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8105126:	68fb      	ldr	r3, [r7, #12]
 8105128:	681b      	ldr	r3, [r3, #0]
 810512a:	699b      	ldr	r3, [r3, #24]
 810512c:	f003 0320 	and.w	r3, r3, #32
 8105130:	2b20      	cmp	r3, #32
 8105132:	d013      	beq.n	810515c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105134:	68fb      	ldr	r3, [r7, #12]
 8105136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105138:	f043 0220 	orr.w	r2, r3, #32
 810513c:	68fb      	ldr	r3, [r7, #12]
 810513e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105140:	68fb      	ldr	r3, [r7, #12]
 8105142:	2220      	movs	r2, #32
 8105144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105148:	68fb      	ldr	r3, [r7, #12]
 810514a:	2200      	movs	r2, #0
 810514c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105150:	68fb      	ldr	r3, [r7, #12]
 8105152:	2200      	movs	r2, #0
 8105154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8105158:	2301      	movs	r3, #1
 810515a:	e007      	b.n	810516c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810515c:	68fb      	ldr	r3, [r7, #12]
 810515e:	681b      	ldr	r3, [r3, #0]
 8105160:	699b      	ldr	r3, [r3, #24]
 8105162:	f003 0320 	and.w	r3, r3, #32
 8105166:	2b20      	cmp	r3, #32
 8105168:	d1c8      	bne.n	81050fc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810516a:	2300      	movs	r3, #0
}
 810516c:	4618      	mov	r0, r3
 810516e:	3710      	adds	r7, #16
 8105170:	46bd      	mov	sp, r7
 8105172:	bd80      	pop	{r7, pc}

08105174 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105174:	b580      	push	{r7, lr}
 8105176:	b084      	sub	sp, #16
 8105178:	af00      	add	r7, sp, #0
 810517a:	60f8      	str	r0, [r7, #12]
 810517c:	60b9      	str	r1, [r7, #8]
 810517e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8105180:	e06b      	b.n	810525a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8105182:	687a      	ldr	r2, [r7, #4]
 8105184:	68b9      	ldr	r1, [r7, #8]
 8105186:	68f8      	ldr	r0, [r7, #12]
 8105188:	f000 f876 	bl	8105278 <I2C_IsErrorOccurred>
 810518c:	4603      	mov	r3, r0
 810518e:	2b00      	cmp	r3, #0
 8105190:	d001      	beq.n	8105196 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105192:	2301      	movs	r3, #1
 8105194:	e069      	b.n	810526a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8105196:	68fb      	ldr	r3, [r7, #12]
 8105198:	681b      	ldr	r3, [r3, #0]
 810519a:	699b      	ldr	r3, [r3, #24]
 810519c:	f003 0320 	and.w	r3, r3, #32
 81051a0:	2b20      	cmp	r3, #32
 81051a2:	d138      	bne.n	8105216 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 81051a4:	68fb      	ldr	r3, [r7, #12]
 81051a6:	681b      	ldr	r3, [r3, #0]
 81051a8:	699b      	ldr	r3, [r3, #24]
 81051aa:	f003 0304 	and.w	r3, r3, #4
 81051ae:	2b04      	cmp	r3, #4
 81051b0:	d105      	bne.n	81051be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 81051b2:	68fb      	ldr	r3, [r7, #12]
 81051b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81051b6:	2b00      	cmp	r3, #0
 81051b8:	d001      	beq.n	81051be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 81051ba:	2300      	movs	r3, #0
 81051bc:	e055      	b.n	810526a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81051be:	68fb      	ldr	r3, [r7, #12]
 81051c0:	681b      	ldr	r3, [r3, #0]
 81051c2:	699b      	ldr	r3, [r3, #24]
 81051c4:	f003 0310 	and.w	r3, r3, #16
 81051c8:	2b10      	cmp	r3, #16
 81051ca:	d107      	bne.n	81051dc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81051cc:	68fb      	ldr	r3, [r7, #12]
 81051ce:	681b      	ldr	r3, [r3, #0]
 81051d0:	2210      	movs	r2, #16
 81051d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 81051d4:	68fb      	ldr	r3, [r7, #12]
 81051d6:	2204      	movs	r2, #4
 81051d8:	645a      	str	r2, [r3, #68]	; 0x44
 81051da:	e002      	b.n	81051e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81051dc:	68fb      	ldr	r3, [r7, #12]
 81051de:	2200      	movs	r2, #0
 81051e0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81051e2:	68fb      	ldr	r3, [r7, #12]
 81051e4:	681b      	ldr	r3, [r3, #0]
 81051e6:	2220      	movs	r2, #32
 81051e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 81051ea:	68fb      	ldr	r3, [r7, #12]
 81051ec:	681b      	ldr	r3, [r3, #0]
 81051ee:	6859      	ldr	r1, [r3, #4]
 81051f0:	68fb      	ldr	r3, [r7, #12]
 81051f2:	681a      	ldr	r2, [r3, #0]
 81051f4:	4b1f      	ldr	r3, [pc, #124]	; (8105274 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 81051f6:	400b      	ands	r3, r1
 81051f8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 81051fa:	68fb      	ldr	r3, [r7, #12]
 81051fc:	2220      	movs	r2, #32
 81051fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105202:	68fb      	ldr	r3, [r7, #12]
 8105204:	2200      	movs	r2, #0
 8105206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810520a:	68fb      	ldr	r3, [r7, #12]
 810520c:	2200      	movs	r2, #0
 810520e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8105212:	2301      	movs	r3, #1
 8105214:	e029      	b.n	810526a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105216:	f7fd ff47 	bl	81030a8 <HAL_GetTick>
 810521a:	4602      	mov	r2, r0
 810521c:	687b      	ldr	r3, [r7, #4]
 810521e:	1ad3      	subs	r3, r2, r3
 8105220:	68ba      	ldr	r2, [r7, #8]
 8105222:	429a      	cmp	r2, r3
 8105224:	d302      	bcc.n	810522c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8105226:	68bb      	ldr	r3, [r7, #8]
 8105228:	2b00      	cmp	r3, #0
 810522a:	d116      	bne.n	810525a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 810522c:	68fb      	ldr	r3, [r7, #12]
 810522e:	681b      	ldr	r3, [r3, #0]
 8105230:	699b      	ldr	r3, [r3, #24]
 8105232:	f003 0304 	and.w	r3, r3, #4
 8105236:	2b04      	cmp	r3, #4
 8105238:	d00f      	beq.n	810525a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810523a:	68fb      	ldr	r3, [r7, #12]
 810523c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810523e:	f043 0220 	orr.w	r2, r3, #32
 8105242:	68fb      	ldr	r3, [r7, #12]
 8105244:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105246:	68fb      	ldr	r3, [r7, #12]
 8105248:	2220      	movs	r2, #32
 810524a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810524e:	68fb      	ldr	r3, [r7, #12]
 8105250:	2200      	movs	r2, #0
 8105252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8105256:	2301      	movs	r3, #1
 8105258:	e007      	b.n	810526a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 810525a:	68fb      	ldr	r3, [r7, #12]
 810525c:	681b      	ldr	r3, [r3, #0]
 810525e:	699b      	ldr	r3, [r3, #24]
 8105260:	f003 0304 	and.w	r3, r3, #4
 8105264:	2b04      	cmp	r3, #4
 8105266:	d18c      	bne.n	8105182 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8105268:	2300      	movs	r3, #0
}
 810526a:	4618      	mov	r0, r3
 810526c:	3710      	adds	r7, #16
 810526e:	46bd      	mov	sp, r7
 8105270:	bd80      	pop	{r7, pc}
 8105272:	bf00      	nop
 8105274:	fe00e800 	.word	0xfe00e800

08105278 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105278:	b580      	push	{r7, lr}
 810527a:	b08a      	sub	sp, #40	; 0x28
 810527c:	af00      	add	r7, sp, #0
 810527e:	60f8      	str	r0, [r7, #12]
 8105280:	60b9      	str	r1, [r7, #8]
 8105282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105284:	2300      	movs	r3, #0
 8105286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 810528a:	68fb      	ldr	r3, [r7, #12]
 810528c:	681b      	ldr	r3, [r3, #0]
 810528e:	699b      	ldr	r3, [r3, #24]
 8105290:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8105292:	2300      	movs	r3, #0
 8105294:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8105296:	687b      	ldr	r3, [r7, #4]
 8105298:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 810529a:	69bb      	ldr	r3, [r7, #24]
 810529c:	f003 0310 	and.w	r3, r3, #16
 81052a0:	2b00      	cmp	r3, #0
 81052a2:	d068      	beq.n	8105376 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81052a4:	68fb      	ldr	r3, [r7, #12]
 81052a6:	681b      	ldr	r3, [r3, #0]
 81052a8:	2210      	movs	r2, #16
 81052aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81052ac:	e049      	b.n	8105342 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81052ae:	68bb      	ldr	r3, [r7, #8]
 81052b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81052b4:	d045      	beq.n	8105342 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81052b6:	f7fd fef7 	bl	81030a8 <HAL_GetTick>
 81052ba:	4602      	mov	r2, r0
 81052bc:	69fb      	ldr	r3, [r7, #28]
 81052be:	1ad3      	subs	r3, r2, r3
 81052c0:	68ba      	ldr	r2, [r7, #8]
 81052c2:	429a      	cmp	r2, r3
 81052c4:	d302      	bcc.n	81052cc <I2C_IsErrorOccurred+0x54>
 81052c6:	68bb      	ldr	r3, [r7, #8]
 81052c8:	2b00      	cmp	r3, #0
 81052ca:	d13a      	bne.n	8105342 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 81052cc:	68fb      	ldr	r3, [r7, #12]
 81052ce:	681b      	ldr	r3, [r3, #0]
 81052d0:	685b      	ldr	r3, [r3, #4]
 81052d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81052d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 81052d8:	68fb      	ldr	r3, [r7, #12]
 81052da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81052de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81052e0:	68fb      	ldr	r3, [r7, #12]
 81052e2:	681b      	ldr	r3, [r3, #0]
 81052e4:	699b      	ldr	r3, [r3, #24]
 81052e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81052ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81052ee:	d121      	bne.n	8105334 <I2C_IsErrorOccurred+0xbc>
 81052f0:	697b      	ldr	r3, [r7, #20]
 81052f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81052f6:	d01d      	beq.n	8105334 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 81052f8:	7cfb      	ldrb	r3, [r7, #19]
 81052fa:	2b20      	cmp	r3, #32
 81052fc:	d01a      	beq.n	8105334 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81052fe:	68fb      	ldr	r3, [r7, #12]
 8105300:	681b      	ldr	r3, [r3, #0]
 8105302:	685a      	ldr	r2, [r3, #4]
 8105304:	68fb      	ldr	r3, [r7, #12]
 8105306:	681b      	ldr	r3, [r3, #0]
 8105308:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810530c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 810530e:	f7fd fecb 	bl	81030a8 <HAL_GetTick>
 8105312:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105314:	e00e      	b.n	8105334 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8105316:	f7fd fec7 	bl	81030a8 <HAL_GetTick>
 810531a:	4602      	mov	r2, r0
 810531c:	69fb      	ldr	r3, [r7, #28]
 810531e:	1ad3      	subs	r3, r2, r3
 8105320:	2b19      	cmp	r3, #25
 8105322:	d907      	bls.n	8105334 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8105324:	6a3b      	ldr	r3, [r7, #32]
 8105326:	f043 0320 	orr.w	r3, r3, #32
 810532a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 810532c:	2301      	movs	r3, #1
 810532e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8105332:	e006      	b.n	8105342 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105334:	68fb      	ldr	r3, [r7, #12]
 8105336:	681b      	ldr	r3, [r3, #0]
 8105338:	699b      	ldr	r3, [r3, #24]
 810533a:	f003 0320 	and.w	r3, r3, #32
 810533e:	2b20      	cmp	r3, #32
 8105340:	d1e9      	bne.n	8105316 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8105342:	68fb      	ldr	r3, [r7, #12]
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	699b      	ldr	r3, [r3, #24]
 8105348:	f003 0320 	and.w	r3, r3, #32
 810534c:	2b20      	cmp	r3, #32
 810534e:	d003      	beq.n	8105358 <I2C_IsErrorOccurred+0xe0>
 8105350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8105354:	2b00      	cmp	r3, #0
 8105356:	d0aa      	beq.n	81052ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8105358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810535c:	2b00      	cmp	r3, #0
 810535e:	d103      	bne.n	8105368 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105360:	68fb      	ldr	r3, [r7, #12]
 8105362:	681b      	ldr	r3, [r3, #0]
 8105364:	2220      	movs	r2, #32
 8105366:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8105368:	6a3b      	ldr	r3, [r7, #32]
 810536a:	f043 0304 	orr.w	r3, r3, #4
 810536e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8105370:	2301      	movs	r3, #1
 8105372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8105376:	68fb      	ldr	r3, [r7, #12]
 8105378:	681b      	ldr	r3, [r3, #0]
 810537a:	699b      	ldr	r3, [r3, #24]
 810537c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 810537e:	69bb      	ldr	r3, [r7, #24]
 8105380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105384:	2b00      	cmp	r3, #0
 8105386:	d00b      	beq.n	81053a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8105388:	6a3b      	ldr	r3, [r7, #32]
 810538a:	f043 0301 	orr.w	r3, r3, #1
 810538e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8105390:	68fb      	ldr	r3, [r7, #12]
 8105392:	681b      	ldr	r3, [r3, #0]
 8105394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8105398:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810539a:	2301      	movs	r3, #1
 810539c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 81053a0:	69bb      	ldr	r3, [r7, #24]
 81053a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81053a6:	2b00      	cmp	r3, #0
 81053a8:	d00b      	beq.n	81053c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 81053aa:	6a3b      	ldr	r3, [r7, #32]
 81053ac:	f043 0308 	orr.w	r3, r3, #8
 81053b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 81053b2:	68fb      	ldr	r3, [r7, #12]
 81053b4:	681b      	ldr	r3, [r3, #0]
 81053b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81053ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81053bc:	2301      	movs	r3, #1
 81053be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 81053c2:	69bb      	ldr	r3, [r7, #24]
 81053c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81053c8:	2b00      	cmp	r3, #0
 81053ca:	d00b      	beq.n	81053e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 81053cc:	6a3b      	ldr	r3, [r7, #32]
 81053ce:	f043 0302 	orr.w	r3, r3, #2
 81053d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81053d4:	68fb      	ldr	r3, [r7, #12]
 81053d6:	681b      	ldr	r3, [r3, #0]
 81053d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 81053dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81053de:	2301      	movs	r3, #1
 81053e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 81053e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81053e8:	2b00      	cmp	r3, #0
 81053ea:	d01c      	beq.n	8105426 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81053ec:	68f8      	ldr	r0, [r7, #12]
 81053ee:	f7ff fdc4 	bl	8104f7a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81053f2:	68fb      	ldr	r3, [r7, #12]
 81053f4:	681b      	ldr	r3, [r3, #0]
 81053f6:	6859      	ldr	r1, [r3, #4]
 81053f8:	68fb      	ldr	r3, [r7, #12]
 81053fa:	681a      	ldr	r2, [r3, #0]
 81053fc:	4b0d      	ldr	r3, [pc, #52]	; (8105434 <I2C_IsErrorOccurred+0x1bc>)
 81053fe:	400b      	ands	r3, r1
 8105400:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8105402:	68fb      	ldr	r3, [r7, #12]
 8105404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105406:	6a3b      	ldr	r3, [r7, #32]
 8105408:	431a      	orrs	r2, r3
 810540a:	68fb      	ldr	r3, [r7, #12]
 810540c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810540e:	68fb      	ldr	r3, [r7, #12]
 8105410:	2220      	movs	r2, #32
 8105412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8105416:	68fb      	ldr	r3, [r7, #12]
 8105418:	2200      	movs	r2, #0
 810541a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810541e:	68fb      	ldr	r3, [r7, #12]
 8105420:	2200      	movs	r2, #0
 8105422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8105426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 810542a:	4618      	mov	r0, r3
 810542c:	3728      	adds	r7, #40	; 0x28
 810542e:	46bd      	mov	sp, r7
 8105430:	bd80      	pop	{r7, pc}
 8105432:	bf00      	nop
 8105434:	fe00e800 	.word	0xfe00e800

08105438 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8105438:	b480      	push	{r7}
 810543a:	b087      	sub	sp, #28
 810543c:	af00      	add	r7, sp, #0
 810543e:	60f8      	str	r0, [r7, #12]
 8105440:	607b      	str	r3, [r7, #4]
 8105442:	460b      	mov	r3, r1
 8105444:	817b      	strh	r3, [r7, #10]
 8105446:	4613      	mov	r3, r2
 8105448:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810544a:	897b      	ldrh	r3, [r7, #10]
 810544c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8105450:	7a7b      	ldrb	r3, [r7, #9]
 8105452:	041b      	lsls	r3, r3, #16
 8105454:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105458:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810545e:	6a3b      	ldr	r3, [r7, #32]
 8105460:	4313      	orrs	r3, r2
 8105462:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8105466:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8105468:	68fb      	ldr	r3, [r7, #12]
 810546a:	681b      	ldr	r3, [r3, #0]
 810546c:	685a      	ldr	r2, [r3, #4]
 810546e:	6a3b      	ldr	r3, [r7, #32]
 8105470:	0d5b      	lsrs	r3, r3, #21
 8105472:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8105476:	4b08      	ldr	r3, [pc, #32]	; (8105498 <I2C_TransferConfig+0x60>)
 8105478:	430b      	orrs	r3, r1
 810547a:	43db      	mvns	r3, r3
 810547c:	ea02 0103 	and.w	r1, r2, r3
 8105480:	68fb      	ldr	r3, [r7, #12]
 8105482:	681b      	ldr	r3, [r3, #0]
 8105484:	697a      	ldr	r2, [r7, #20]
 8105486:	430a      	orrs	r2, r1
 8105488:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 810548a:	bf00      	nop
 810548c:	371c      	adds	r7, #28
 810548e:	46bd      	mov	sp, r7
 8105490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105494:	4770      	bx	lr
 8105496:	bf00      	nop
 8105498:	03ff63ff 	.word	0x03ff63ff

0810549c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810549c:	b480      	push	{r7}
 810549e:	b083      	sub	sp, #12
 81054a0:	af00      	add	r7, sp, #0
 81054a2:	6078      	str	r0, [r7, #4]
 81054a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81054a6:	687b      	ldr	r3, [r7, #4]
 81054a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81054ac:	b2db      	uxtb	r3, r3
 81054ae:	2b20      	cmp	r3, #32
 81054b0:	d138      	bne.n	8105524 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81054b2:	687b      	ldr	r3, [r7, #4]
 81054b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81054b8:	2b01      	cmp	r3, #1
 81054ba:	d101      	bne.n	81054c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81054bc:	2302      	movs	r3, #2
 81054be:	e032      	b.n	8105526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81054c0:	687b      	ldr	r3, [r7, #4]
 81054c2:	2201      	movs	r2, #1
 81054c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81054c8:	687b      	ldr	r3, [r7, #4]
 81054ca:	2224      	movs	r2, #36	; 0x24
 81054cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	681b      	ldr	r3, [r3, #0]
 81054d4:	681a      	ldr	r2, [r3, #0]
 81054d6:	687b      	ldr	r3, [r7, #4]
 81054d8:	681b      	ldr	r3, [r3, #0]
 81054da:	f022 0201 	bic.w	r2, r2, #1
 81054de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81054e0:	687b      	ldr	r3, [r7, #4]
 81054e2:	681b      	ldr	r3, [r3, #0]
 81054e4:	681a      	ldr	r2, [r3, #0]
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	681b      	ldr	r3, [r3, #0]
 81054ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81054ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81054f0:	687b      	ldr	r3, [r7, #4]
 81054f2:	681b      	ldr	r3, [r3, #0]
 81054f4:	6819      	ldr	r1, [r3, #0]
 81054f6:	687b      	ldr	r3, [r7, #4]
 81054f8:	681b      	ldr	r3, [r3, #0]
 81054fa:	683a      	ldr	r2, [r7, #0]
 81054fc:	430a      	orrs	r2, r1
 81054fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105500:	687b      	ldr	r3, [r7, #4]
 8105502:	681b      	ldr	r3, [r3, #0]
 8105504:	681a      	ldr	r2, [r3, #0]
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	681b      	ldr	r3, [r3, #0]
 810550a:	f042 0201 	orr.w	r2, r2, #1
 810550e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105510:	687b      	ldr	r3, [r7, #4]
 8105512:	2220      	movs	r2, #32
 8105514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105518:	687b      	ldr	r3, [r7, #4]
 810551a:	2200      	movs	r2, #0
 810551c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105520:	2300      	movs	r3, #0
 8105522:	e000      	b.n	8105526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8105524:	2302      	movs	r3, #2
  }
}
 8105526:	4618      	mov	r0, r3
 8105528:	370c      	adds	r7, #12
 810552a:	46bd      	mov	sp, r7
 810552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105530:	4770      	bx	lr

08105532 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8105532:	b480      	push	{r7}
 8105534:	b085      	sub	sp, #20
 8105536:	af00      	add	r7, sp, #0
 8105538:	6078      	str	r0, [r7, #4]
 810553a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810553c:	687b      	ldr	r3, [r7, #4]
 810553e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105542:	b2db      	uxtb	r3, r3
 8105544:	2b20      	cmp	r3, #32
 8105546:	d139      	bne.n	81055bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105548:	687b      	ldr	r3, [r7, #4]
 810554a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810554e:	2b01      	cmp	r3, #1
 8105550:	d101      	bne.n	8105556 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8105552:	2302      	movs	r3, #2
 8105554:	e033      	b.n	81055be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8105556:	687b      	ldr	r3, [r7, #4]
 8105558:	2201      	movs	r2, #1
 810555a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	2224      	movs	r2, #36	; 0x24
 8105562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105566:	687b      	ldr	r3, [r7, #4]
 8105568:	681b      	ldr	r3, [r3, #0]
 810556a:	681a      	ldr	r2, [r3, #0]
 810556c:	687b      	ldr	r3, [r7, #4]
 810556e:	681b      	ldr	r3, [r3, #0]
 8105570:	f022 0201 	bic.w	r2, r2, #1
 8105574:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8105576:	687b      	ldr	r3, [r7, #4]
 8105578:	681b      	ldr	r3, [r3, #0]
 810557a:	681b      	ldr	r3, [r3, #0]
 810557c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810557e:	68fb      	ldr	r3, [r7, #12]
 8105580:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8105584:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8105586:	683b      	ldr	r3, [r7, #0]
 8105588:	021b      	lsls	r3, r3, #8
 810558a:	68fa      	ldr	r2, [r7, #12]
 810558c:	4313      	orrs	r3, r2
 810558e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8105590:	687b      	ldr	r3, [r7, #4]
 8105592:	681b      	ldr	r3, [r3, #0]
 8105594:	68fa      	ldr	r2, [r7, #12]
 8105596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	681b      	ldr	r3, [r3, #0]
 810559c:	681a      	ldr	r2, [r3, #0]
 810559e:	687b      	ldr	r3, [r7, #4]
 81055a0:	681b      	ldr	r3, [r3, #0]
 81055a2:	f042 0201 	orr.w	r2, r2, #1
 81055a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81055a8:	687b      	ldr	r3, [r7, #4]
 81055aa:	2220      	movs	r2, #32
 81055ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	2200      	movs	r2, #0
 81055b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81055b8:	2300      	movs	r3, #0
 81055ba:	e000      	b.n	81055be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81055bc:	2302      	movs	r3, #2
  }
}
 81055be:	4618      	mov	r0, r3
 81055c0:	3714      	adds	r7, #20
 81055c2:	46bd      	mov	sp, r7
 81055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055c8:	4770      	bx	lr
	...

081055cc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81055cc:	b580      	push	{r7, lr}
 81055ce:	b084      	sub	sp, #16
 81055d0:	af00      	add	r7, sp, #0
 81055d2:	60f8      	str	r0, [r7, #12]
 81055d4:	460b      	mov	r3, r1
 81055d6:	607a      	str	r2, [r7, #4]
 81055d8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81055da:	4b37      	ldr	r3, [pc, #220]	; (81056b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055dc:	681b      	ldr	r3, [r3, #0]
 81055de:	f023 0201 	bic.w	r2, r3, #1
 81055e2:	4935      	ldr	r1, [pc, #212]	; (81056b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055e4:	68fb      	ldr	r3, [r7, #12]
 81055e6:	4313      	orrs	r3, r2
 81055e8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81055ea:	687b      	ldr	r3, [r7, #4]
 81055ec:	2b00      	cmp	r3, #0
 81055ee:	d123      	bne.n	8105638 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81055f0:	f7fe ff38 	bl	8104464 <HAL_GetCurrentCPUID>
 81055f4:	4603      	mov	r3, r0
 81055f6:	2b03      	cmp	r3, #3
 81055f8:	d158      	bne.n	81056ac <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81055fa:	4b2f      	ldr	r3, [pc, #188]	; (81056b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055fc:	691b      	ldr	r3, [r3, #16]
 81055fe:	4a2e      	ldr	r2, [pc, #184]	; (81056b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105600:	f023 0301 	bic.w	r3, r3, #1
 8105604:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105606:	4b2d      	ldr	r3, [pc, #180]	; (81056bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105608:	691b      	ldr	r3, [r3, #16]
 810560a:	4a2c      	ldr	r2, [pc, #176]	; (81056bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810560c:	f043 0304 	orr.w	r3, r3, #4
 8105610:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105612:	f3bf 8f4f 	dsb	sy
}
 8105616:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105618:	f3bf 8f6f 	isb	sy
}
 810561c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810561e:	7afb      	ldrb	r3, [r7, #11]
 8105620:	2b01      	cmp	r3, #1
 8105622:	d101      	bne.n	8105628 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105624:	bf30      	wfi
 8105626:	e000      	b.n	810562a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105628:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810562a:	4b24      	ldr	r3, [pc, #144]	; (81056bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810562c:	691b      	ldr	r3, [r3, #16]
 810562e:	4a23      	ldr	r2, [pc, #140]	; (81056bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105630:	f023 0304 	bic.w	r3, r3, #4
 8105634:	6113      	str	r3, [r2, #16]
 8105636:	e03c      	b.n	81056b2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105638:	687b      	ldr	r3, [r7, #4]
 810563a:	2b01      	cmp	r3, #1
 810563c:	d123      	bne.n	8105686 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810563e:	f7fe ff11 	bl	8104464 <HAL_GetCurrentCPUID>
 8105642:	4603      	mov	r3, r0
 8105644:	2b01      	cmp	r3, #1
 8105646:	d133      	bne.n	81056b0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105648:	4b1b      	ldr	r3, [pc, #108]	; (81056b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810564a:	695b      	ldr	r3, [r3, #20]
 810564c:	4a1a      	ldr	r2, [pc, #104]	; (81056b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810564e:	f023 0302 	bic.w	r3, r3, #2
 8105652:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105654:	4b19      	ldr	r3, [pc, #100]	; (81056bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105656:	691b      	ldr	r3, [r3, #16]
 8105658:	4a18      	ldr	r2, [pc, #96]	; (81056bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810565a:	f043 0304 	orr.w	r3, r3, #4
 810565e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105660:	f3bf 8f4f 	dsb	sy
}
 8105664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105666:	f3bf 8f6f 	isb	sy
}
 810566a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810566c:	7afb      	ldrb	r3, [r7, #11]
 810566e:	2b01      	cmp	r3, #1
 8105670:	d101      	bne.n	8105676 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105672:	bf30      	wfi
 8105674:	e000      	b.n	8105678 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105676:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105678:	4b10      	ldr	r3, [pc, #64]	; (81056bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810567a:	691b      	ldr	r3, [r3, #16]
 810567c:	4a0f      	ldr	r2, [pc, #60]	; (81056bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810567e:	f023 0304 	bic.w	r3, r3, #4
 8105682:	6113      	str	r3, [r2, #16]
 8105684:	e015      	b.n	81056b2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105686:	f7fe feed 	bl	8104464 <HAL_GetCurrentCPUID>
 810568a:	4603      	mov	r3, r0
 810568c:	2b03      	cmp	r3, #3
 810568e:	d106      	bne.n	810569e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105690:	4b09      	ldr	r3, [pc, #36]	; (81056b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105692:	691b      	ldr	r3, [r3, #16]
 8105694:	4a08      	ldr	r2, [pc, #32]	; (81056b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105696:	f023 0304 	bic.w	r3, r3, #4
 810569a:	6113      	str	r3, [r2, #16]
 810569c:	e009      	b.n	81056b2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810569e:	4b06      	ldr	r3, [pc, #24]	; (81056b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81056a0:	695b      	ldr	r3, [r3, #20]
 81056a2:	4a05      	ldr	r2, [pc, #20]	; (81056b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81056a4:	f023 0304 	bic.w	r3, r3, #4
 81056a8:	6153      	str	r3, [r2, #20]
 81056aa:	e002      	b.n	81056b2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81056ac:	bf00      	nop
 81056ae:	e000      	b.n	81056b2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81056b0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81056b2:	3710      	adds	r7, #16
 81056b4:	46bd      	mov	sp, r7
 81056b6:	bd80      	pop	{r7, pc}
 81056b8:	58024800 	.word	0x58024800
 81056bc:	e000ed00 	.word	0xe000ed00

081056c0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81056c0:	b580      	push	{r7, lr}
 81056c2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81056c4:	f7fe fece 	bl	8104464 <HAL_GetCurrentCPUID>
 81056c8:	4603      	mov	r3, r0
 81056ca:	2b03      	cmp	r3, #3
 81056cc:	d101      	bne.n	81056d2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81056ce:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81056d0:	e001      	b.n	81056d6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81056d2:	bf40      	sev
    __WFE ();
 81056d4:	bf20      	wfe
}
 81056d6:	bf00      	nop
 81056d8:	bd80      	pop	{r7, pc}
	...

081056dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81056dc:	b480      	push	{r7}
 81056de:	b089      	sub	sp, #36	; 0x24
 81056e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81056e2:	4bb3      	ldr	r3, [pc, #716]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056e4:	691b      	ldr	r3, [r3, #16]
 81056e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81056ea:	2b18      	cmp	r3, #24
 81056ec:	f200 8155 	bhi.w	810599a <HAL_RCC_GetSysClockFreq+0x2be>
 81056f0:	a201      	add	r2, pc, #4	; (adr r2, 81056f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81056f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81056f6:	bf00      	nop
 81056f8:	0810575d 	.word	0x0810575d
 81056fc:	0810599b 	.word	0x0810599b
 8105700:	0810599b 	.word	0x0810599b
 8105704:	0810599b 	.word	0x0810599b
 8105708:	0810599b 	.word	0x0810599b
 810570c:	0810599b 	.word	0x0810599b
 8105710:	0810599b 	.word	0x0810599b
 8105714:	0810599b 	.word	0x0810599b
 8105718:	08105783 	.word	0x08105783
 810571c:	0810599b 	.word	0x0810599b
 8105720:	0810599b 	.word	0x0810599b
 8105724:	0810599b 	.word	0x0810599b
 8105728:	0810599b 	.word	0x0810599b
 810572c:	0810599b 	.word	0x0810599b
 8105730:	0810599b 	.word	0x0810599b
 8105734:	0810599b 	.word	0x0810599b
 8105738:	08105789 	.word	0x08105789
 810573c:	0810599b 	.word	0x0810599b
 8105740:	0810599b 	.word	0x0810599b
 8105744:	0810599b 	.word	0x0810599b
 8105748:	0810599b 	.word	0x0810599b
 810574c:	0810599b 	.word	0x0810599b
 8105750:	0810599b 	.word	0x0810599b
 8105754:	0810599b 	.word	0x0810599b
 8105758:	0810578f 	.word	0x0810578f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810575c:	4b94      	ldr	r3, [pc, #592]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810575e:	681b      	ldr	r3, [r3, #0]
 8105760:	f003 0320 	and.w	r3, r3, #32
 8105764:	2b00      	cmp	r3, #0
 8105766:	d009      	beq.n	810577c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105768:	4b91      	ldr	r3, [pc, #580]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810576a:	681b      	ldr	r3, [r3, #0]
 810576c:	08db      	lsrs	r3, r3, #3
 810576e:	f003 0303 	and.w	r3, r3, #3
 8105772:	4a90      	ldr	r2, [pc, #576]	; (81059b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105774:	fa22 f303 	lsr.w	r3, r2, r3
 8105778:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810577a:	e111      	b.n	81059a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810577c:	4b8d      	ldr	r3, [pc, #564]	; (81059b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810577e:	61bb      	str	r3, [r7, #24]
      break;
 8105780:	e10e      	b.n	81059a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8105782:	4b8d      	ldr	r3, [pc, #564]	; (81059b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105784:	61bb      	str	r3, [r7, #24]
      break;
 8105786:	e10b      	b.n	81059a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8105788:	4b8c      	ldr	r3, [pc, #560]	; (81059bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 810578a:	61bb      	str	r3, [r7, #24]
      break;
 810578c:	e108      	b.n	81059a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810578e:	4b88      	ldr	r3, [pc, #544]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105792:	f003 0303 	and.w	r3, r3, #3
 8105796:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8105798:	4b85      	ldr	r3, [pc, #532]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810579a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810579c:	091b      	lsrs	r3, r3, #4
 810579e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81057a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81057a4:	4b82      	ldr	r3, [pc, #520]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057a8:	f003 0301 	and.w	r3, r3, #1
 81057ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81057ae:	4b80      	ldr	r3, [pc, #512]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81057b2:	08db      	lsrs	r3, r3, #3
 81057b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81057b8:	68fa      	ldr	r2, [r7, #12]
 81057ba:	fb02 f303 	mul.w	r3, r2, r3
 81057be:	ee07 3a90 	vmov	s15, r3
 81057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81057ca:	693b      	ldr	r3, [r7, #16]
 81057cc:	2b00      	cmp	r3, #0
 81057ce:	f000 80e1 	beq.w	8105994 <HAL_RCC_GetSysClockFreq+0x2b8>
 81057d2:	697b      	ldr	r3, [r7, #20]
 81057d4:	2b02      	cmp	r3, #2
 81057d6:	f000 8083 	beq.w	81058e0 <HAL_RCC_GetSysClockFreq+0x204>
 81057da:	697b      	ldr	r3, [r7, #20]
 81057dc:	2b02      	cmp	r3, #2
 81057de:	f200 80a1 	bhi.w	8105924 <HAL_RCC_GetSysClockFreq+0x248>
 81057e2:	697b      	ldr	r3, [r7, #20]
 81057e4:	2b00      	cmp	r3, #0
 81057e6:	d003      	beq.n	81057f0 <HAL_RCC_GetSysClockFreq+0x114>
 81057e8:	697b      	ldr	r3, [r7, #20]
 81057ea:	2b01      	cmp	r3, #1
 81057ec:	d056      	beq.n	810589c <HAL_RCC_GetSysClockFreq+0x1c0>
 81057ee:	e099      	b.n	8105924 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81057f0:	4b6f      	ldr	r3, [pc, #444]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057f2:	681b      	ldr	r3, [r3, #0]
 81057f4:	f003 0320 	and.w	r3, r3, #32
 81057f8:	2b00      	cmp	r3, #0
 81057fa:	d02d      	beq.n	8105858 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81057fc:	4b6c      	ldr	r3, [pc, #432]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057fe:	681b      	ldr	r3, [r3, #0]
 8105800:	08db      	lsrs	r3, r3, #3
 8105802:	f003 0303 	and.w	r3, r3, #3
 8105806:	4a6b      	ldr	r2, [pc, #428]	; (81059b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105808:	fa22 f303 	lsr.w	r3, r2, r3
 810580c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810580e:	687b      	ldr	r3, [r7, #4]
 8105810:	ee07 3a90 	vmov	s15, r3
 8105814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105818:	693b      	ldr	r3, [r7, #16]
 810581a:	ee07 3a90 	vmov	s15, r3
 810581e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105826:	4b62      	ldr	r3, [pc, #392]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810582a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810582e:	ee07 3a90 	vmov	s15, r3
 8105832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105836:	ed97 6a02 	vldr	s12, [r7, #8]
 810583a:	eddf 5a61 	vldr	s11, [pc, #388]	; 81059c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810583e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810584a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810584e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105852:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8105856:	e087      	b.n	8105968 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105858:	693b      	ldr	r3, [r7, #16]
 810585a:	ee07 3a90 	vmov	s15, r3
 810585e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105862:	eddf 6a58 	vldr	s13, [pc, #352]	; 81059c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810586a:	4b51      	ldr	r3, [pc, #324]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810586e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105872:	ee07 3a90 	vmov	s15, r3
 8105876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810587a:	ed97 6a02 	vldr	s12, [r7, #8]
 810587e:	eddf 5a50 	vldr	s11, [pc, #320]	; 81059c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810588a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810588e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105896:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810589a:	e065      	b.n	8105968 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810589c:	693b      	ldr	r3, [r7, #16]
 810589e:	ee07 3a90 	vmov	s15, r3
 81058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 81059c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 81058aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058ae:	4b40      	ldr	r3, [pc, #256]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058b6:	ee07 3a90 	vmov	s15, r3
 81058ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058be:	ed97 6a02 	vldr	s12, [r7, #8]
 81058c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81059c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81058c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81058de:	e043      	b.n	8105968 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81058e0:	693b      	ldr	r3, [r7, #16]
 81058e2:	ee07 3a90 	vmov	s15, r3
 81058e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 81059cc <HAL_RCC_GetSysClockFreq+0x2f0>
 81058ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058f2:	4b2f      	ldr	r3, [pc, #188]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058fa:	ee07 3a90 	vmov	s15, r3
 81058fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105902:	ed97 6a02 	vldr	s12, [r7, #8]
 8105906:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81059c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810590a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810590e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810591a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810591e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105922:	e021      	b.n	8105968 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105924:	693b      	ldr	r3, [r7, #16]
 8105926:	ee07 3a90 	vmov	s15, r3
 810592a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810592e:	eddf 6a26 	vldr	s13, [pc, #152]	; 81059c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105936:	4b1e      	ldr	r3, [pc, #120]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810593a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810593e:	ee07 3a90 	vmov	s15, r3
 8105942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105946:	ed97 6a02 	vldr	s12, [r7, #8]
 810594a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81059c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810594e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810595a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810595e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105962:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105966:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8105968:	4b11      	ldr	r3, [pc, #68]	; (81059b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810596c:	0a5b      	lsrs	r3, r3, #9
 810596e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105972:	3301      	adds	r3, #1
 8105974:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8105976:	683b      	ldr	r3, [r7, #0]
 8105978:	ee07 3a90 	vmov	s15, r3
 810597c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8105980:	edd7 6a07 	vldr	s13, [r7, #28]
 8105984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810598c:	ee17 3a90 	vmov	r3, s15
 8105990:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8105992:	e005      	b.n	81059a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8105994:	2300      	movs	r3, #0
 8105996:	61bb      	str	r3, [r7, #24]
      break;
 8105998:	e002      	b.n	81059a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810599a:	4b07      	ldr	r3, [pc, #28]	; (81059b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810599c:	61bb      	str	r3, [r7, #24]
      break;
 810599e:	bf00      	nop
  }

  return sysclockfreq;
 81059a0:	69bb      	ldr	r3, [r7, #24]
}
 81059a2:	4618      	mov	r0, r3
 81059a4:	3724      	adds	r7, #36	; 0x24
 81059a6:	46bd      	mov	sp, r7
 81059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059ac:	4770      	bx	lr
 81059ae:	bf00      	nop
 81059b0:	58024400 	.word	0x58024400
 81059b4:	03d09000 	.word	0x03d09000
 81059b8:	003d0900 	.word	0x003d0900
 81059bc:	007a1200 	.word	0x007a1200
 81059c0:	46000000 	.word	0x46000000
 81059c4:	4c742400 	.word	0x4c742400
 81059c8:	4a742400 	.word	0x4a742400
 81059cc:	4af42400 	.word	0x4af42400

081059d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81059d0:	b580      	push	{r7, lr}
 81059d2:	b082      	sub	sp, #8
 81059d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81059d6:	f7ff fe81 	bl	81056dc <HAL_RCC_GetSysClockFreq>
 81059da:	4602      	mov	r2, r0
 81059dc:	4b11      	ldr	r3, [pc, #68]	; (8105a24 <HAL_RCC_GetHCLKFreq+0x54>)
 81059de:	699b      	ldr	r3, [r3, #24]
 81059e0:	0a1b      	lsrs	r3, r3, #8
 81059e2:	f003 030f 	and.w	r3, r3, #15
 81059e6:	4910      	ldr	r1, [pc, #64]	; (8105a28 <HAL_RCC_GetHCLKFreq+0x58>)
 81059e8:	5ccb      	ldrb	r3, [r1, r3]
 81059ea:	f003 031f 	and.w	r3, r3, #31
 81059ee:	fa22 f303 	lsr.w	r3, r2, r3
 81059f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81059f4:	4b0b      	ldr	r3, [pc, #44]	; (8105a24 <HAL_RCC_GetHCLKFreq+0x54>)
 81059f6:	699b      	ldr	r3, [r3, #24]
 81059f8:	f003 030f 	and.w	r3, r3, #15
 81059fc:	4a0a      	ldr	r2, [pc, #40]	; (8105a28 <HAL_RCC_GetHCLKFreq+0x58>)
 81059fe:	5cd3      	ldrb	r3, [r2, r3]
 8105a00:	f003 031f 	and.w	r3, r3, #31
 8105a04:	687a      	ldr	r2, [r7, #4]
 8105a06:	fa22 f303 	lsr.w	r3, r2, r3
 8105a0a:	4a08      	ldr	r2, [pc, #32]	; (8105a2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8105a0c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105a0e:	4b07      	ldr	r3, [pc, #28]	; (8105a2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8105a10:	681b      	ldr	r3, [r3, #0]
 8105a12:	4a07      	ldr	r2, [pc, #28]	; (8105a30 <HAL_RCC_GetHCLKFreq+0x60>)
 8105a14:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105a16:	4b05      	ldr	r3, [pc, #20]	; (8105a2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8105a18:	681b      	ldr	r3, [r3, #0]
}
 8105a1a:	4618      	mov	r0, r3
 8105a1c:	3708      	adds	r7, #8
 8105a1e:	46bd      	mov	sp, r7
 8105a20:	bd80      	pop	{r7, pc}
 8105a22:	bf00      	nop
 8105a24:	58024400 	.word	0x58024400
 8105a28:	0810fb38 	.word	0x0810fb38
 8105a2c:	10000004 	.word	0x10000004
 8105a30:	10000000 	.word	0x10000000

08105a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105a34:	b580      	push	{r7, lr}
 8105a36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105a38:	f7ff ffca 	bl	81059d0 <HAL_RCC_GetHCLKFreq>
 8105a3c:	4602      	mov	r2, r0
 8105a3e:	4b06      	ldr	r3, [pc, #24]	; (8105a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8105a40:	69db      	ldr	r3, [r3, #28]
 8105a42:	091b      	lsrs	r3, r3, #4
 8105a44:	f003 0307 	and.w	r3, r3, #7
 8105a48:	4904      	ldr	r1, [pc, #16]	; (8105a5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8105a4a:	5ccb      	ldrb	r3, [r1, r3]
 8105a4c:	f003 031f 	and.w	r3, r3, #31
 8105a50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105a54:	4618      	mov	r0, r3
 8105a56:	bd80      	pop	{r7, pc}
 8105a58:	58024400 	.word	0x58024400
 8105a5c:	0810fb38 	.word	0x0810fb38

08105a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105a60:	b580      	push	{r7, lr}
 8105a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105a64:	f7ff ffb4 	bl	81059d0 <HAL_RCC_GetHCLKFreq>
 8105a68:	4602      	mov	r2, r0
 8105a6a:	4b06      	ldr	r3, [pc, #24]	; (8105a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8105a6c:	69db      	ldr	r3, [r3, #28]
 8105a6e:	0a1b      	lsrs	r3, r3, #8
 8105a70:	f003 0307 	and.w	r3, r3, #7
 8105a74:	4904      	ldr	r1, [pc, #16]	; (8105a88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8105a76:	5ccb      	ldrb	r3, [r1, r3]
 8105a78:	f003 031f 	and.w	r3, r3, #31
 8105a7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8105a80:	4618      	mov	r0, r3
 8105a82:	bd80      	pop	{r7, pc}
 8105a84:	58024400 	.word	0x58024400
 8105a88:	0810fb38 	.word	0x0810fb38

08105a8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8105a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8105a90:	b0ca      	sub	sp, #296	; 0x128
 8105a92:	af00      	add	r7, sp, #0
 8105a94:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8105a98:	2300      	movs	r3, #0
 8105a9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8105a9e:	2300      	movs	r3, #0
 8105aa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105aac:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8105ab0:	2500      	movs	r5, #0
 8105ab2:	ea54 0305 	orrs.w	r3, r4, r5
 8105ab6:	d049      	beq.n	8105b4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8105ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105abe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105ac2:	d02f      	beq.n	8105b24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8105ac4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105ac8:	d828      	bhi.n	8105b1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8105aca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105ace:	d01a      	beq.n	8105b06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8105ad0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105ad4:	d822      	bhi.n	8105b1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8105ad6:	2b00      	cmp	r3, #0
 8105ad8:	d003      	beq.n	8105ae2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8105ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105ade:	d007      	beq.n	8105af0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105ae0:	e01c      	b.n	8105b1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ae2:	4bb8      	ldr	r3, [pc, #736]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ae6:	4ab7      	ldr	r2, [pc, #732]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105aec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105aee:	e01a      	b.n	8105b26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105af4:	3308      	adds	r3, #8
 8105af6:	2102      	movs	r1, #2
 8105af8:	4618      	mov	r0, r3
 8105afa:	f002 fb61 	bl	81081c0 <RCCEx_PLL2_Config>
 8105afe:	4603      	mov	r3, r0
 8105b00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105b04:	e00f      	b.n	8105b26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b0a:	3328      	adds	r3, #40	; 0x28
 8105b0c:	2102      	movs	r1, #2
 8105b0e:	4618      	mov	r0, r3
 8105b10:	f002 fc08 	bl	8108324 <RCCEx_PLL3_Config>
 8105b14:	4603      	mov	r3, r0
 8105b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105b1a:	e004      	b.n	8105b26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105b1c:	2301      	movs	r3, #1
 8105b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105b22:	e000      	b.n	8105b26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8105b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b2a:	2b00      	cmp	r3, #0
 8105b2c:	d10a      	bne.n	8105b44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105b2e:	4ba5      	ldr	r3, [pc, #660]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105b32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8105b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105b3c:	4aa1      	ldr	r2, [pc, #644]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b3e:	430b      	orrs	r3, r1
 8105b40:	6513      	str	r3, [r2, #80]	; 0x50
 8105b42:	e003      	b.n	8105b4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b54:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8105b58:	f04f 0900 	mov.w	r9, #0
 8105b5c:	ea58 0309 	orrs.w	r3, r8, r9
 8105b60:	d047      	beq.n	8105bf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8105b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105b68:	2b04      	cmp	r3, #4
 8105b6a:	d82a      	bhi.n	8105bc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8105b6c:	a201      	add	r2, pc, #4	; (adr r2, 8105b74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8105b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b72:	bf00      	nop
 8105b74:	08105b89 	.word	0x08105b89
 8105b78:	08105b97 	.word	0x08105b97
 8105b7c:	08105bad 	.word	0x08105bad
 8105b80:	08105bcb 	.word	0x08105bcb
 8105b84:	08105bcb 	.word	0x08105bcb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b88:	4b8e      	ldr	r3, [pc, #568]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b8c:	4a8d      	ldr	r2, [pc, #564]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105b94:	e01a      	b.n	8105bcc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b9a:	3308      	adds	r3, #8
 8105b9c:	2100      	movs	r1, #0
 8105b9e:	4618      	mov	r0, r3
 8105ba0:	f002 fb0e 	bl	81081c0 <RCCEx_PLL2_Config>
 8105ba4:	4603      	mov	r3, r0
 8105ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105baa:	e00f      	b.n	8105bcc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bb0:	3328      	adds	r3, #40	; 0x28
 8105bb2:	2100      	movs	r1, #0
 8105bb4:	4618      	mov	r0, r3
 8105bb6:	f002 fbb5 	bl	8108324 <RCCEx_PLL3_Config>
 8105bba:	4603      	mov	r3, r0
 8105bbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105bc0:	e004      	b.n	8105bcc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105bc2:	2301      	movs	r3, #1
 8105bc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105bc8:	e000      	b.n	8105bcc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8105bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105bd0:	2b00      	cmp	r3, #0
 8105bd2:	d10a      	bne.n	8105bea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8105bd4:	4b7b      	ldr	r3, [pc, #492]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105bd8:	f023 0107 	bic.w	r1, r3, #7
 8105bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105be2:	4a78      	ldr	r2, [pc, #480]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105be4:	430b      	orrs	r3, r1
 8105be6:	6513      	str	r3, [r2, #80]	; 0x50
 8105be8:	e003      	b.n	8105bf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105bee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bfa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8105bfe:	f04f 0b00 	mov.w	fp, #0
 8105c02:	ea5a 030b 	orrs.w	r3, sl, fp
 8105c06:	d04c      	beq.n	8105ca2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8105c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105c12:	d030      	beq.n	8105c76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8105c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105c18:	d829      	bhi.n	8105c6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105c1a:	2bc0      	cmp	r3, #192	; 0xc0
 8105c1c:	d02d      	beq.n	8105c7a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8105c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8105c20:	d825      	bhi.n	8105c6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105c22:	2b80      	cmp	r3, #128	; 0x80
 8105c24:	d018      	beq.n	8105c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8105c26:	2b80      	cmp	r3, #128	; 0x80
 8105c28:	d821      	bhi.n	8105c6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105c2a:	2b00      	cmp	r3, #0
 8105c2c:	d002      	beq.n	8105c34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8105c2e:	2b40      	cmp	r3, #64	; 0x40
 8105c30:	d007      	beq.n	8105c42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8105c32:	e01c      	b.n	8105c6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c34:	4b63      	ldr	r3, [pc, #396]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c38:	4a62      	ldr	r2, [pc, #392]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105c40:	e01c      	b.n	8105c7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c46:	3308      	adds	r3, #8
 8105c48:	2100      	movs	r1, #0
 8105c4a:	4618      	mov	r0, r3
 8105c4c:	f002 fab8 	bl	81081c0 <RCCEx_PLL2_Config>
 8105c50:	4603      	mov	r3, r0
 8105c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105c56:	e011      	b.n	8105c7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c5c:	3328      	adds	r3, #40	; 0x28
 8105c5e:	2100      	movs	r1, #0
 8105c60:	4618      	mov	r0, r3
 8105c62:	f002 fb5f 	bl	8108324 <RCCEx_PLL3_Config>
 8105c66:	4603      	mov	r3, r0
 8105c68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105c6c:	e006      	b.n	8105c7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105c6e:	2301      	movs	r3, #1
 8105c70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105c74:	e002      	b.n	8105c7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105c76:	bf00      	nop
 8105c78:	e000      	b.n	8105c7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105c80:	2b00      	cmp	r3, #0
 8105c82:	d10a      	bne.n	8105c9a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105c84:	4b4f      	ldr	r3, [pc, #316]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105c88:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8105c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c92:	4a4c      	ldr	r2, [pc, #304]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c94:	430b      	orrs	r3, r1
 8105c96:	6513      	str	r3, [r2, #80]	; 0x50
 8105c98:	e003      	b.n	8105ca2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105c9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105caa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8105cae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8105cb2:	2300      	movs	r3, #0
 8105cb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8105cb8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8105cbc:	460b      	mov	r3, r1
 8105cbe:	4313      	orrs	r3, r2
 8105cc0:	d053      	beq.n	8105d6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8105cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105cc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105cca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105cce:	d035      	beq.n	8105d3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8105cd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105cd4:	d82e      	bhi.n	8105d34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105cd6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105cda:	d031      	beq.n	8105d40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8105cdc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105ce0:	d828      	bhi.n	8105d34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105ce6:	d01a      	beq.n	8105d1e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8105ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105cec:	d822      	bhi.n	8105d34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105cee:	2b00      	cmp	r3, #0
 8105cf0:	d003      	beq.n	8105cfa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8105cf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105cf6:	d007      	beq.n	8105d08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8105cf8:	e01c      	b.n	8105d34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105cfa:	4b32      	ldr	r3, [pc, #200]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105cfe:	4a31      	ldr	r2, [pc, #196]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105d04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105d06:	e01c      	b.n	8105d42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d0c:	3308      	adds	r3, #8
 8105d0e:	2100      	movs	r1, #0
 8105d10:	4618      	mov	r0, r3
 8105d12:	f002 fa55 	bl	81081c0 <RCCEx_PLL2_Config>
 8105d16:	4603      	mov	r3, r0
 8105d18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105d1c:	e011      	b.n	8105d42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d22:	3328      	adds	r3, #40	; 0x28
 8105d24:	2100      	movs	r1, #0
 8105d26:	4618      	mov	r0, r3
 8105d28:	f002 fafc 	bl	8108324 <RCCEx_PLL3_Config>
 8105d2c:	4603      	mov	r3, r0
 8105d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105d32:	e006      	b.n	8105d42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105d34:	2301      	movs	r3, #1
 8105d36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105d3a:	e002      	b.n	8105d42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105d3c:	bf00      	nop
 8105d3e:	e000      	b.n	8105d42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105d42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105d46:	2b00      	cmp	r3, #0
 8105d48:	d10b      	bne.n	8105d62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105d4a:	4b1e      	ldr	r3, [pc, #120]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105d4e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8105d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105d5a:	4a1a      	ldr	r2, [pc, #104]	; (8105dc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105d5c:	430b      	orrs	r3, r1
 8105d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8105d60:	e003      	b.n	8105d6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105d66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d72:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8105d76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8105d7a:	2300      	movs	r3, #0
 8105d7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8105d80:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8105d84:	460b      	mov	r3, r1
 8105d86:	4313      	orrs	r3, r2
 8105d88:	d056      	beq.n	8105e38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8105d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105d92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105d96:	d038      	beq.n	8105e0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8105d98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105d9c:	d831      	bhi.n	8105e02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105d9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105da2:	d034      	beq.n	8105e0e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8105da4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105da8:	d82b      	bhi.n	8105e02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105daa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105dae:	d01d      	beq.n	8105dec <HAL_RCCEx_PeriphCLKConfig+0x360>
 8105db0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105db4:	d825      	bhi.n	8105e02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105db6:	2b00      	cmp	r3, #0
 8105db8:	d006      	beq.n	8105dc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8105dba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105dbe:	d00a      	beq.n	8105dd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8105dc0:	e01f      	b.n	8105e02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105dc2:	bf00      	nop
 8105dc4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105dc8:	4ba2      	ldr	r3, [pc, #648]	; (8106054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105dcc:	4aa1      	ldr	r2, [pc, #644]	; (8106054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105dd4:	e01c      	b.n	8105e10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105dda:	3308      	adds	r3, #8
 8105ddc:	2100      	movs	r1, #0
 8105dde:	4618      	mov	r0, r3
 8105de0:	f002 f9ee 	bl	81081c0 <RCCEx_PLL2_Config>
 8105de4:	4603      	mov	r3, r0
 8105de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105dea:	e011      	b.n	8105e10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105df0:	3328      	adds	r3, #40	; 0x28
 8105df2:	2100      	movs	r1, #0
 8105df4:	4618      	mov	r0, r3
 8105df6:	f002 fa95 	bl	8108324 <RCCEx_PLL3_Config>
 8105dfa:	4603      	mov	r3, r0
 8105dfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105e00:	e006      	b.n	8105e10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105e02:	2301      	movs	r3, #1
 8105e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105e08:	e002      	b.n	8105e10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105e0a:	bf00      	nop
 8105e0c:	e000      	b.n	8105e10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105e10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e14:	2b00      	cmp	r3, #0
 8105e16:	d10b      	bne.n	8105e30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105e18:	4b8e      	ldr	r3, [pc, #568]	; (8106054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105e1c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8105e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105e28:	4a8a      	ldr	r2, [pc, #552]	; (8106054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e2a:	430b      	orrs	r3, r1
 8105e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8105e2e:	e003      	b.n	8105e38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e40:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8105e44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8105e48:	2300      	movs	r3, #0
 8105e4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8105e4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8105e52:	460b      	mov	r3, r1
 8105e54:	4313      	orrs	r3, r2
 8105e56:	d03a      	beq.n	8105ece <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8105e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e5e:	2b30      	cmp	r3, #48	; 0x30
 8105e60:	d01f      	beq.n	8105ea2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8105e62:	2b30      	cmp	r3, #48	; 0x30
 8105e64:	d819      	bhi.n	8105e9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105e66:	2b20      	cmp	r3, #32
 8105e68:	d00c      	beq.n	8105e84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8105e6a:	2b20      	cmp	r3, #32
 8105e6c:	d815      	bhi.n	8105e9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105e6e:	2b00      	cmp	r3, #0
 8105e70:	d019      	beq.n	8105ea6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8105e72:	2b10      	cmp	r3, #16
 8105e74:	d111      	bne.n	8105e9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e76:	4b77      	ldr	r3, [pc, #476]	; (8106054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e7a:	4a76      	ldr	r2, [pc, #472]	; (8106054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105e80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8105e82:	e011      	b.n	8105ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e88:	3308      	adds	r3, #8
 8105e8a:	2102      	movs	r1, #2
 8105e8c:	4618      	mov	r0, r3
 8105e8e:	f002 f997 	bl	81081c0 <RCCEx_PLL2_Config>
 8105e92:	4603      	mov	r3, r0
 8105e94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8105e98:	e006      	b.n	8105ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105e9a:	2301      	movs	r3, #1
 8105e9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105ea0:	e002      	b.n	8105ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8105ea2:	bf00      	nop
 8105ea4:	e000      	b.n	8105ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8105ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105eac:	2b00      	cmp	r3, #0
 8105eae:	d10a      	bne.n	8105ec6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105eb0:	4b68      	ldr	r3, [pc, #416]	; (8106054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105eb4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8105eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105ebe:	4a65      	ldr	r2, [pc, #404]	; (8106054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105ec0:	430b      	orrs	r3, r1
 8105ec2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8105ec4:	e003      	b.n	8105ece <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105eca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ed6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8105eda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8105ede:	2300      	movs	r3, #0
 8105ee0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8105ee4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8105ee8:	460b      	mov	r3, r1
 8105eea:	4313      	orrs	r3, r2
 8105eec:	d051      	beq.n	8105f92 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8105eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105ef8:	d035      	beq.n	8105f66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8105efa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105efe:	d82e      	bhi.n	8105f5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105f00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105f04:	d031      	beq.n	8105f6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8105f06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105f0a:	d828      	bhi.n	8105f5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105f10:	d01a      	beq.n	8105f48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8105f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105f16:	d822      	bhi.n	8105f5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105f18:	2b00      	cmp	r3, #0
 8105f1a:	d003      	beq.n	8105f24 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8105f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105f20:	d007      	beq.n	8105f32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8105f22:	e01c      	b.n	8105f5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105f24:	4b4b      	ldr	r3, [pc, #300]	; (8106054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f28:	4a4a      	ldr	r2, [pc, #296]	; (8106054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105f30:	e01c      	b.n	8105f6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f36:	3308      	adds	r3, #8
 8105f38:	2100      	movs	r1, #0
 8105f3a:	4618      	mov	r0, r3
 8105f3c:	f002 f940 	bl	81081c0 <RCCEx_PLL2_Config>
 8105f40:	4603      	mov	r3, r0
 8105f42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105f46:	e011      	b.n	8105f6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f4c:	3328      	adds	r3, #40	; 0x28
 8105f4e:	2100      	movs	r1, #0
 8105f50:	4618      	mov	r0, r3
 8105f52:	f002 f9e7 	bl	8108324 <RCCEx_PLL3_Config>
 8105f56:	4603      	mov	r3, r0
 8105f58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105f5c:	e006      	b.n	8105f6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105f5e:	2301      	movs	r3, #1
 8105f60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105f64:	e002      	b.n	8105f6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105f66:	bf00      	nop
 8105f68:	e000      	b.n	8105f6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105f70:	2b00      	cmp	r3, #0
 8105f72:	d10a      	bne.n	8105f8a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105f74:	4b37      	ldr	r3, [pc, #220]	; (8106054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105f78:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8105f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105f82:	4a34      	ldr	r2, [pc, #208]	; (8106054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105f84:	430b      	orrs	r3, r1
 8105f86:	6513      	str	r3, [r2, #80]	; 0x50
 8105f88:	e003      	b.n	8105f92 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105f8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f9a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8105f9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8105fa2:	2300      	movs	r3, #0
 8105fa4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8105fa8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8105fac:	460b      	mov	r3, r1
 8105fae:	4313      	orrs	r3, r2
 8105fb0:	d056      	beq.n	8106060 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8105fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105fbc:	d033      	beq.n	8106026 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8105fbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105fc2:	d82c      	bhi.n	810601e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105fc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105fc8:	d02f      	beq.n	810602a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8105fca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105fce:	d826      	bhi.n	810601e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105fd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105fd4:	d02b      	beq.n	810602e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8105fd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105fda:	d820      	bhi.n	810601e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105fe0:	d012      	beq.n	8106008 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8105fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105fe6:	d81a      	bhi.n	810601e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105fe8:	2b00      	cmp	r3, #0
 8105fea:	d022      	beq.n	8106032 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8105fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105ff0:	d115      	bne.n	810601e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ff6:	3308      	adds	r3, #8
 8105ff8:	2101      	movs	r1, #1
 8105ffa:	4618      	mov	r0, r3
 8105ffc:	f002 f8e0 	bl	81081c0 <RCCEx_PLL2_Config>
 8106000:	4603      	mov	r3, r0
 8106002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106006:	e015      	b.n	8106034 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810600c:	3328      	adds	r3, #40	; 0x28
 810600e:	2101      	movs	r1, #1
 8106010:	4618      	mov	r0, r3
 8106012:	f002 f987 	bl	8108324 <RCCEx_PLL3_Config>
 8106016:	4603      	mov	r3, r0
 8106018:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810601c:	e00a      	b.n	8106034 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810601e:	2301      	movs	r3, #1
 8106020:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106024:	e006      	b.n	8106034 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106026:	bf00      	nop
 8106028:	e004      	b.n	8106034 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810602a:	bf00      	nop
 810602c:	e002      	b.n	8106034 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810602e:	bf00      	nop
 8106030:	e000      	b.n	8106034 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106034:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106038:	2b00      	cmp	r3, #0
 810603a:	d10d      	bne.n	8106058 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810603c:	4b05      	ldr	r3, [pc, #20]	; (8106054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810603e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106040:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8106044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810604a:	4a02      	ldr	r2, [pc, #8]	; (8106054 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810604c:	430b      	orrs	r3, r1
 810604e:	6513      	str	r3, [r2, #80]	; 0x50
 8106050:	e006      	b.n	8106060 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8106052:	bf00      	nop
 8106054:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106058:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810605c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106068:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 810606c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8106070:	2300      	movs	r3, #0
 8106072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8106076:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 810607a:	460b      	mov	r3, r1
 810607c:	4313      	orrs	r3, r2
 810607e:	d055      	beq.n	810612c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8106080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106084:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810608c:	d033      	beq.n	81060f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810608e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106092:	d82c      	bhi.n	81060ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106098:	d02f      	beq.n	81060fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810609a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810609e:	d826      	bhi.n	81060ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 81060a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81060a4:	d02b      	beq.n	81060fe <HAL_RCCEx_PeriphCLKConfig+0x672>
 81060a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81060aa:	d820      	bhi.n	81060ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 81060ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81060b0:	d012      	beq.n	81060d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81060b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81060b6:	d81a      	bhi.n	81060ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 81060b8:	2b00      	cmp	r3, #0
 81060ba:	d022      	beq.n	8106102 <HAL_RCCEx_PeriphCLKConfig+0x676>
 81060bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81060c0:	d115      	bne.n	81060ee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81060c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060c6:	3308      	adds	r3, #8
 81060c8:	2101      	movs	r1, #1
 81060ca:	4618      	mov	r0, r3
 81060cc:	f002 f878 	bl	81081c0 <RCCEx_PLL2_Config>
 81060d0:	4603      	mov	r3, r0
 81060d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81060d6:	e015      	b.n	8106104 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81060d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060dc:	3328      	adds	r3, #40	; 0x28
 81060de:	2101      	movs	r1, #1
 81060e0:	4618      	mov	r0, r3
 81060e2:	f002 f91f 	bl	8108324 <RCCEx_PLL3_Config>
 81060e6:	4603      	mov	r3, r0
 81060e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81060ec:	e00a      	b.n	8106104 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81060ee:	2301      	movs	r3, #1
 81060f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81060f4:	e006      	b.n	8106104 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81060f6:	bf00      	nop
 81060f8:	e004      	b.n	8106104 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81060fa:	bf00      	nop
 81060fc:	e002      	b.n	8106104 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81060fe:	bf00      	nop
 8106100:	e000      	b.n	8106104 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106108:	2b00      	cmp	r3, #0
 810610a:	d10b      	bne.n	8106124 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810610c:	4ba4      	ldr	r3, [pc, #656]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810610e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106110:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8106114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106118:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810611c:	4aa0      	ldr	r2, [pc, #640]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810611e:	430b      	orrs	r3, r1
 8106120:	6593      	str	r3, [r2, #88]	; 0x58
 8106122:	e003      	b.n	810612c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106124:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106128:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810612c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106134:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8106138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 810613c:	2300      	movs	r3, #0
 810613e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8106142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8106146:	460b      	mov	r3, r1
 8106148:	4313      	orrs	r3, r2
 810614a:	d037      	beq.n	81061bc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810614c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106156:	d00e      	beq.n	8106176 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8106158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810615c:	d816      	bhi.n	810618c <HAL_RCCEx_PeriphCLKConfig+0x700>
 810615e:	2b00      	cmp	r3, #0
 8106160:	d018      	beq.n	8106194 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8106162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106166:	d111      	bne.n	810618c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106168:	4b8d      	ldr	r3, [pc, #564]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810616c:	4a8c      	ldr	r2, [pc, #560]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810616e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106174:	e00f      	b.n	8106196 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810617a:	3308      	adds	r3, #8
 810617c:	2101      	movs	r1, #1
 810617e:	4618      	mov	r0, r3
 8106180:	f002 f81e 	bl	81081c0 <RCCEx_PLL2_Config>
 8106184:	4603      	mov	r3, r0
 8106186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810618a:	e004      	b.n	8106196 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810618c:	2301      	movs	r3, #1
 810618e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106192:	e000      	b.n	8106196 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8106194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106196:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810619a:	2b00      	cmp	r3, #0
 810619c:	d10a      	bne.n	81061b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810619e:	4b80      	ldr	r3, [pc, #512]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81061a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81061a2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 81061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81061ac:	4a7c      	ldr	r2, [pc, #496]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81061ae:	430b      	orrs	r3, r1
 81061b0:	6513      	str	r3, [r2, #80]	; 0x50
 81061b2:	e003      	b.n	81061bc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81061b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81061b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81061bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81061c4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 81061c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 81061cc:	2300      	movs	r3, #0
 81061ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 81061d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 81061d6:	460b      	mov	r3, r1
 81061d8:	4313      	orrs	r3, r2
 81061da:	d039      	beq.n	8106250 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81061e2:	2b03      	cmp	r3, #3
 81061e4:	d81c      	bhi.n	8106220 <HAL_RCCEx_PeriphCLKConfig+0x794>
 81061e6:	a201      	add	r2, pc, #4	; (adr r2, 81061ec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061ec:	08106229 	.word	0x08106229
 81061f0:	081061fd 	.word	0x081061fd
 81061f4:	0810620b 	.word	0x0810620b
 81061f8:	08106229 	.word	0x08106229
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81061fc:	4b68      	ldr	r3, [pc, #416]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106200:	4a67      	ldr	r2, [pc, #412]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106206:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106208:	e00f      	b.n	810622a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810620a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810620e:	3308      	adds	r3, #8
 8106210:	2102      	movs	r1, #2
 8106212:	4618      	mov	r0, r3
 8106214:	f001 ffd4 	bl	81081c0 <RCCEx_PLL2_Config>
 8106218:	4603      	mov	r3, r0
 810621a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 810621e:	e004      	b.n	810622a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106220:	2301      	movs	r3, #1
 8106222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106226:	e000      	b.n	810622a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8106228:	bf00      	nop
    }

    if (ret == HAL_OK)
 810622a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810622e:	2b00      	cmp	r3, #0
 8106230:	d10a      	bne.n	8106248 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106232:	4b5b      	ldr	r3, [pc, #364]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106236:	f023 0103 	bic.w	r1, r3, #3
 810623a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810623e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106240:	4a57      	ldr	r2, [pc, #348]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106242:	430b      	orrs	r3, r1
 8106244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8106246:	e003      	b.n	8106250 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106248:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810624c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106258:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 810625c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8106260:	2300      	movs	r3, #0
 8106262:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8106266:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 810626a:	460b      	mov	r3, r1
 810626c:	4313      	orrs	r3, r2
 810626e:	f000 809f 	beq.w	81063b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106272:	4b4c      	ldr	r3, [pc, #304]	; (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106274:	681b      	ldr	r3, [r3, #0]
 8106276:	4a4b      	ldr	r2, [pc, #300]	; (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810627c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810627e:	f7fc ff13 	bl	81030a8 <HAL_GetTick>
 8106282:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106286:	e00b      	b.n	81062a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106288:	f7fc ff0e 	bl	81030a8 <HAL_GetTick>
 810628c:	4602      	mov	r2, r0
 810628e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8106292:	1ad3      	subs	r3, r2, r3
 8106294:	2b64      	cmp	r3, #100	; 0x64
 8106296:	d903      	bls.n	81062a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8106298:	2303      	movs	r3, #3
 810629a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810629e:	e005      	b.n	81062ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81062a0:	4b40      	ldr	r3, [pc, #256]	; (81063a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81062a2:	681b      	ldr	r3, [r3, #0]
 81062a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81062a8:	2b00      	cmp	r3, #0
 81062aa:	d0ed      	beq.n	8106288 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81062ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81062b0:	2b00      	cmp	r3, #0
 81062b2:	d179      	bne.n	81063a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81062b4:	4b3a      	ldr	r3, [pc, #232]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81062b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81062bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81062c0:	4053      	eors	r3, r2
 81062c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81062c6:	2b00      	cmp	r3, #0
 81062c8:	d015      	beq.n	81062f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81062ca:	4b35      	ldr	r3, [pc, #212]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81062ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81062d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81062d6:	4b32      	ldr	r3, [pc, #200]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81062da:	4a31      	ldr	r2, [pc, #196]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81062e0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81062e2:	4b2f      	ldr	r3, [pc, #188]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81062e6:	4a2e      	ldr	r2, [pc, #184]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81062ec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81062ee:	4a2c      	ldr	r2, [pc, #176]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81062f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81062fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81062fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106302:	d118      	bne.n	8106336 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106304:	f7fc fed0 	bl	81030a8 <HAL_GetTick>
 8106308:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810630c:	e00d      	b.n	810632a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810630e:	f7fc fecb 	bl	81030a8 <HAL_GetTick>
 8106312:	4602      	mov	r2, r0
 8106314:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8106318:	1ad2      	subs	r2, r2, r3
 810631a:	f241 3388 	movw	r3, #5000	; 0x1388
 810631e:	429a      	cmp	r2, r3
 8106320:	d903      	bls.n	810632a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8106322:	2303      	movs	r3, #3
 8106324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8106328:	e005      	b.n	8106336 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810632a:	4b1d      	ldr	r3, [pc, #116]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810632c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810632e:	f003 0302 	and.w	r3, r3, #2
 8106332:	2b00      	cmp	r3, #0
 8106334:	d0eb      	beq.n	810630e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8106336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810633a:	2b00      	cmp	r3, #0
 810633c:	d12b      	bne.n	8106396 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810633e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106342:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810634a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810634e:	d110      	bne.n	8106372 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8106350:	4b13      	ldr	r3, [pc, #76]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106352:	691b      	ldr	r3, [r3, #16]
 8106354:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8106358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810635c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106360:	091b      	lsrs	r3, r3, #4
 8106362:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8106366:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810636a:	4a0d      	ldr	r2, [pc, #52]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810636c:	430b      	orrs	r3, r1
 810636e:	6113      	str	r3, [r2, #16]
 8106370:	e005      	b.n	810637e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8106372:	4b0b      	ldr	r3, [pc, #44]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106374:	691b      	ldr	r3, [r3, #16]
 8106376:	4a0a      	ldr	r2, [pc, #40]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106378:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810637c:	6113      	str	r3, [r2, #16]
 810637e:	4b08      	ldr	r3, [pc, #32]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106380:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8106382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106386:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810638a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810638e:	4a04      	ldr	r2, [pc, #16]	; (81063a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106390:	430b      	orrs	r3, r1
 8106392:	6713      	str	r3, [r2, #112]	; 0x70
 8106394:	e00c      	b.n	81063b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810639a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 810639e:	e007      	b.n	81063b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81063a0:	58024400 	.word	0x58024400
 81063a4:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81063ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81063b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81063b8:	f002 0301 	and.w	r3, r2, #1
 81063bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 81063c0:	2300      	movs	r3, #0
 81063c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 81063c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 81063ca:	460b      	mov	r3, r1
 81063cc:	4313      	orrs	r3, r2
 81063ce:	f000 8089 	beq.w	81064e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81063d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81063d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81063d8:	2b28      	cmp	r3, #40	; 0x28
 81063da:	d86b      	bhi.n	81064b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 81063dc:	a201      	add	r2, pc, #4	; (adr r2, 81063e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 81063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81063e2:	bf00      	nop
 81063e4:	081064bd 	.word	0x081064bd
 81063e8:	081064b5 	.word	0x081064b5
 81063ec:	081064b5 	.word	0x081064b5
 81063f0:	081064b5 	.word	0x081064b5
 81063f4:	081064b5 	.word	0x081064b5
 81063f8:	081064b5 	.word	0x081064b5
 81063fc:	081064b5 	.word	0x081064b5
 8106400:	081064b5 	.word	0x081064b5
 8106404:	08106489 	.word	0x08106489
 8106408:	081064b5 	.word	0x081064b5
 810640c:	081064b5 	.word	0x081064b5
 8106410:	081064b5 	.word	0x081064b5
 8106414:	081064b5 	.word	0x081064b5
 8106418:	081064b5 	.word	0x081064b5
 810641c:	081064b5 	.word	0x081064b5
 8106420:	081064b5 	.word	0x081064b5
 8106424:	0810649f 	.word	0x0810649f
 8106428:	081064b5 	.word	0x081064b5
 810642c:	081064b5 	.word	0x081064b5
 8106430:	081064b5 	.word	0x081064b5
 8106434:	081064b5 	.word	0x081064b5
 8106438:	081064b5 	.word	0x081064b5
 810643c:	081064b5 	.word	0x081064b5
 8106440:	081064b5 	.word	0x081064b5
 8106444:	081064bd 	.word	0x081064bd
 8106448:	081064b5 	.word	0x081064b5
 810644c:	081064b5 	.word	0x081064b5
 8106450:	081064b5 	.word	0x081064b5
 8106454:	081064b5 	.word	0x081064b5
 8106458:	081064b5 	.word	0x081064b5
 810645c:	081064b5 	.word	0x081064b5
 8106460:	081064b5 	.word	0x081064b5
 8106464:	081064bd 	.word	0x081064bd
 8106468:	081064b5 	.word	0x081064b5
 810646c:	081064b5 	.word	0x081064b5
 8106470:	081064b5 	.word	0x081064b5
 8106474:	081064b5 	.word	0x081064b5
 8106478:	081064b5 	.word	0x081064b5
 810647c:	081064b5 	.word	0x081064b5
 8106480:	081064b5 	.word	0x081064b5
 8106484:	081064bd 	.word	0x081064bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810648c:	3308      	adds	r3, #8
 810648e:	2101      	movs	r1, #1
 8106490:	4618      	mov	r0, r3
 8106492:	f001 fe95 	bl	81081c0 <RCCEx_PLL2_Config>
 8106496:	4603      	mov	r3, r0
 8106498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810649c:	e00f      	b.n	81064be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810649e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81064a2:	3328      	adds	r3, #40	; 0x28
 81064a4:	2101      	movs	r1, #1
 81064a6:	4618      	mov	r0, r3
 81064a8:	f001 ff3c 	bl	8108324 <RCCEx_PLL3_Config>
 81064ac:	4603      	mov	r3, r0
 81064ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81064b2:	e004      	b.n	81064be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81064b4:	2301      	movs	r3, #1
 81064b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81064ba:	e000      	b.n	81064be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81064bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81064be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81064c2:	2b00      	cmp	r3, #0
 81064c4:	d10a      	bne.n	81064dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81064c6:	4bbf      	ldr	r3, [pc, #764]	; (81067c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81064c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81064ca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 81064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81064d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81064d4:	4abb      	ldr	r2, [pc, #748]	; (81067c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81064d6:	430b      	orrs	r3, r1
 81064d8:	6553      	str	r3, [r2, #84]	; 0x54
 81064da:	e003      	b.n	81064e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81064dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81064e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81064e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81064ec:	f002 0302 	and.w	r3, r2, #2
 81064f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 81064f4:	2300      	movs	r3, #0
 81064f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 81064fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 81064fe:	460b      	mov	r3, r1
 8106500:	4313      	orrs	r3, r2
 8106502:	d041      	beq.n	8106588 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8106504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810650a:	2b05      	cmp	r3, #5
 810650c:	d824      	bhi.n	8106558 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 810650e:	a201      	add	r2, pc, #4	; (adr r2, 8106514 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8106510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106514:	08106561 	.word	0x08106561
 8106518:	0810652d 	.word	0x0810652d
 810651c:	08106543 	.word	0x08106543
 8106520:	08106561 	.word	0x08106561
 8106524:	08106561 	.word	0x08106561
 8106528:	08106561 	.word	0x08106561
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810652c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106530:	3308      	adds	r3, #8
 8106532:	2101      	movs	r1, #1
 8106534:	4618      	mov	r0, r3
 8106536:	f001 fe43 	bl	81081c0 <RCCEx_PLL2_Config>
 810653a:	4603      	mov	r3, r0
 810653c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106540:	e00f      	b.n	8106562 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106546:	3328      	adds	r3, #40	; 0x28
 8106548:	2101      	movs	r1, #1
 810654a:	4618      	mov	r0, r3
 810654c:	f001 feea 	bl	8108324 <RCCEx_PLL3_Config>
 8106550:	4603      	mov	r3, r0
 8106552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106556:	e004      	b.n	8106562 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106558:	2301      	movs	r3, #1
 810655a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810655e:	e000      	b.n	8106562 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8106560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106566:	2b00      	cmp	r3, #0
 8106568:	d10a      	bne.n	8106580 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810656a:	4b96      	ldr	r3, [pc, #600]	; (81067c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810656e:	f023 0107 	bic.w	r1, r3, #7
 8106572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106578:	4a92      	ldr	r2, [pc, #584]	; (81067c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810657a:	430b      	orrs	r3, r1
 810657c:	6553      	str	r3, [r2, #84]	; 0x54
 810657e:	e003      	b.n	8106588 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106580:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106584:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106590:	f002 0304 	and.w	r3, r2, #4
 8106594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8106598:	2300      	movs	r3, #0
 810659a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 810659e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 81065a2:	460b      	mov	r3, r1
 81065a4:	4313      	orrs	r3, r2
 81065a6:	d044      	beq.n	8106632 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81065a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81065b0:	2b05      	cmp	r3, #5
 81065b2:	d825      	bhi.n	8106600 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81065b4:	a201      	add	r2, pc, #4	; (adr r2, 81065bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81065b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81065ba:	bf00      	nop
 81065bc:	08106609 	.word	0x08106609
 81065c0:	081065d5 	.word	0x081065d5
 81065c4:	081065eb 	.word	0x081065eb
 81065c8:	08106609 	.word	0x08106609
 81065cc:	08106609 	.word	0x08106609
 81065d0:	08106609 	.word	0x08106609
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81065d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065d8:	3308      	adds	r3, #8
 81065da:	2101      	movs	r1, #1
 81065dc:	4618      	mov	r0, r3
 81065de:	f001 fdef 	bl	81081c0 <RCCEx_PLL2_Config>
 81065e2:	4603      	mov	r3, r0
 81065e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81065e8:	e00f      	b.n	810660a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065ee:	3328      	adds	r3, #40	; 0x28
 81065f0:	2101      	movs	r1, #1
 81065f2:	4618      	mov	r0, r3
 81065f4:	f001 fe96 	bl	8108324 <RCCEx_PLL3_Config>
 81065f8:	4603      	mov	r3, r0
 81065fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81065fe:	e004      	b.n	810660a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106600:	2301      	movs	r3, #1
 8106602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106606:	e000      	b.n	810660a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8106608:	bf00      	nop
    }

    if (ret == HAL_OK)
 810660a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810660e:	2b00      	cmp	r3, #0
 8106610:	d10b      	bne.n	810662a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8106612:	4b6c      	ldr	r3, [pc, #432]	; (81067c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106616:	f023 0107 	bic.w	r1, r3, #7
 810661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810661e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106622:	4a68      	ldr	r2, [pc, #416]	; (81067c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106624:	430b      	orrs	r3, r1
 8106626:	6593      	str	r3, [r2, #88]	; 0x58
 8106628:	e003      	b.n	8106632 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810662a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810662e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106636:	e9d3 2300 	ldrd	r2, r3, [r3]
 810663a:	f002 0320 	and.w	r3, r2, #32
 810663e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8106642:	2300      	movs	r3, #0
 8106644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8106648:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 810664c:	460b      	mov	r3, r1
 810664e:	4313      	orrs	r3, r2
 8106650:	d055      	beq.n	81066fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8106652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810665a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810665e:	d033      	beq.n	81066c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8106660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106664:	d82c      	bhi.n	81066c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810666a:	d02f      	beq.n	81066cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 810666c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106670:	d826      	bhi.n	81066c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106672:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106676:	d02b      	beq.n	81066d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8106678:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810667c:	d820      	bhi.n	81066c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810667e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106682:	d012      	beq.n	81066aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8106684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106688:	d81a      	bhi.n	81066c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810668a:	2b00      	cmp	r3, #0
 810668c:	d022      	beq.n	81066d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810668e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106692:	d115      	bne.n	81066c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106698:	3308      	adds	r3, #8
 810669a:	2100      	movs	r1, #0
 810669c:	4618      	mov	r0, r3
 810669e:	f001 fd8f 	bl	81081c0 <RCCEx_PLL2_Config>
 81066a2:	4603      	mov	r3, r0
 81066a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81066a8:	e015      	b.n	81066d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81066ae:	3328      	adds	r3, #40	; 0x28
 81066b0:	2102      	movs	r1, #2
 81066b2:	4618      	mov	r0, r3
 81066b4:	f001 fe36 	bl	8108324 <RCCEx_PLL3_Config>
 81066b8:	4603      	mov	r3, r0
 81066ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81066be:	e00a      	b.n	81066d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81066c0:	2301      	movs	r3, #1
 81066c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81066c6:	e006      	b.n	81066d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81066c8:	bf00      	nop
 81066ca:	e004      	b.n	81066d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81066cc:	bf00      	nop
 81066ce:	e002      	b.n	81066d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81066d0:	bf00      	nop
 81066d2:	e000      	b.n	81066d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81066d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81066d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81066da:	2b00      	cmp	r3, #0
 81066dc:	d10b      	bne.n	81066f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81066de:	4b39      	ldr	r3, [pc, #228]	; (81067c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81066e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066e2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 81066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81066ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81066ee:	4a35      	ldr	r2, [pc, #212]	; (81067c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81066f0:	430b      	orrs	r3, r1
 81066f2:	6553      	str	r3, [r2, #84]	; 0x54
 81066f4:	e003      	b.n	81066fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81066fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81066fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106706:	f002 0340 	and.w	r3, r2, #64	; 0x40
 810670a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 810670e:	2300      	movs	r3, #0
 8106710:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8106714:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8106718:	460b      	mov	r3, r1
 810671a:	4313      	orrs	r3, r2
 810671c:	d058      	beq.n	81067d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810671e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106722:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8106726:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810672a:	d033      	beq.n	8106794 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 810672c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106730:	d82c      	bhi.n	810678c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106736:	d02f      	beq.n	8106798 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8106738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810673c:	d826      	bhi.n	810678c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810673e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8106742:	d02b      	beq.n	810679c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8106744:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8106748:	d820      	bhi.n	810678c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810674a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810674e:	d012      	beq.n	8106776 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8106750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106754:	d81a      	bhi.n	810678c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106756:	2b00      	cmp	r3, #0
 8106758:	d022      	beq.n	81067a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810675a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810675e:	d115      	bne.n	810678c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106764:	3308      	adds	r3, #8
 8106766:	2100      	movs	r1, #0
 8106768:	4618      	mov	r0, r3
 810676a:	f001 fd29 	bl	81081c0 <RCCEx_PLL2_Config>
 810676e:	4603      	mov	r3, r0
 8106770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106774:	e015      	b.n	81067a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810677a:	3328      	adds	r3, #40	; 0x28
 810677c:	2102      	movs	r1, #2
 810677e:	4618      	mov	r0, r3
 8106780:	f001 fdd0 	bl	8108324 <RCCEx_PLL3_Config>
 8106784:	4603      	mov	r3, r0
 8106786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810678a:	e00a      	b.n	81067a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810678c:	2301      	movs	r3, #1
 810678e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106792:	e006      	b.n	81067a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106794:	bf00      	nop
 8106796:	e004      	b.n	81067a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106798:	bf00      	nop
 810679a:	e002      	b.n	81067a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810679c:	bf00      	nop
 810679e:	e000      	b.n	81067a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81067a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81067a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81067a6:	2b00      	cmp	r3, #0
 81067a8:	d10e      	bne.n	81067c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81067aa:	4b06      	ldr	r3, [pc, #24]	; (81067c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81067ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81067ae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 81067b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81067ba:	4a02      	ldr	r2, [pc, #8]	; (81067c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81067bc:	430b      	orrs	r3, r1
 81067be:	6593      	str	r3, [r2, #88]	; 0x58
 81067c0:	e006      	b.n	81067d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81067c2:	bf00      	nop
 81067c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81067cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067d8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 81067dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 81067e0:	2300      	movs	r3, #0
 81067e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 81067e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 81067ea:	460b      	mov	r3, r1
 81067ec:	4313      	orrs	r3, r2
 81067ee:	d055      	beq.n	810689c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81067f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81067f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81067fc:	d033      	beq.n	8106866 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81067fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8106802:	d82c      	bhi.n	810685e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106808:	d02f      	beq.n	810686a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810680a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810680e:	d826      	bhi.n	810685e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106810:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106814:	d02b      	beq.n	810686e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8106816:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810681a:	d820      	bhi.n	810685e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810681c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106820:	d012      	beq.n	8106848 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8106822:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106826:	d81a      	bhi.n	810685e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106828:	2b00      	cmp	r3, #0
 810682a:	d022      	beq.n	8106872 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 810682c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106830:	d115      	bne.n	810685e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106836:	3308      	adds	r3, #8
 8106838:	2100      	movs	r1, #0
 810683a:	4618      	mov	r0, r3
 810683c:	f001 fcc0 	bl	81081c0 <RCCEx_PLL2_Config>
 8106840:	4603      	mov	r3, r0
 8106842:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106846:	e015      	b.n	8106874 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810684c:	3328      	adds	r3, #40	; 0x28
 810684e:	2102      	movs	r1, #2
 8106850:	4618      	mov	r0, r3
 8106852:	f001 fd67 	bl	8108324 <RCCEx_PLL3_Config>
 8106856:	4603      	mov	r3, r0
 8106858:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810685c:	e00a      	b.n	8106874 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810685e:	2301      	movs	r3, #1
 8106860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106864:	e006      	b.n	8106874 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106866:	bf00      	nop
 8106868:	e004      	b.n	8106874 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810686a:	bf00      	nop
 810686c:	e002      	b.n	8106874 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810686e:	bf00      	nop
 8106870:	e000      	b.n	8106874 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106878:	2b00      	cmp	r3, #0
 810687a:	d10b      	bne.n	8106894 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810687c:	4ba1      	ldr	r3, [pc, #644]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810687e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106880:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8106884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106888:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810688c:	4a9d      	ldr	r2, [pc, #628]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810688e:	430b      	orrs	r3, r1
 8106890:	6593      	str	r3, [r2, #88]	; 0x58
 8106892:	e003      	b.n	810689c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106898:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810689c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81068a4:	f002 0308 	and.w	r3, r2, #8
 81068a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 81068ac:	2300      	movs	r3, #0
 81068ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 81068b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 81068b6:	460b      	mov	r3, r1
 81068b8:	4313      	orrs	r3, r2
 81068ba:	d01e      	beq.n	81068fa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81068bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81068c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81068c8:	d10c      	bne.n	81068e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068ce:	3328      	adds	r3, #40	; 0x28
 81068d0:	2102      	movs	r1, #2
 81068d2:	4618      	mov	r0, r3
 81068d4:	f001 fd26 	bl	8108324 <RCCEx_PLL3_Config>
 81068d8:	4603      	mov	r3, r0
 81068da:	2b00      	cmp	r3, #0
 81068dc:	d002      	beq.n	81068e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81068de:	2301      	movs	r3, #1
 81068e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81068e4:	4b87      	ldr	r3, [pc, #540]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81068e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81068e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81068ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81068f4:	4a83      	ldr	r2, [pc, #524]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81068f6:	430b      	orrs	r3, r1
 81068f8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81068fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106902:	f002 0310 	and.w	r3, r2, #16
 8106906:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 810690a:	2300      	movs	r3, #0
 810690c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8106910:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8106914:	460b      	mov	r3, r1
 8106916:	4313      	orrs	r3, r2
 8106918:	d01e      	beq.n	8106958 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810691a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810691e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8106922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106926:	d10c      	bne.n	8106942 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810692c:	3328      	adds	r3, #40	; 0x28
 810692e:	2102      	movs	r1, #2
 8106930:	4618      	mov	r0, r3
 8106932:	f001 fcf7 	bl	8108324 <RCCEx_PLL3_Config>
 8106936:	4603      	mov	r3, r0
 8106938:	2b00      	cmp	r3, #0
 810693a:	d002      	beq.n	8106942 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 810693c:	2301      	movs	r3, #1
 810693e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8106942:	4b70      	ldr	r3, [pc, #448]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106946:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 810694a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810694e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8106952:	4a6c      	ldr	r2, [pc, #432]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106954:	430b      	orrs	r3, r1
 8106956:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106960:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8106964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8106968:	2300      	movs	r3, #0
 810696a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 810696e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8106972:	460b      	mov	r3, r1
 8106974:	4313      	orrs	r3, r2
 8106976:	d03e      	beq.n	81069f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8106978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810697c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8106980:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106984:	d022      	beq.n	81069cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8106986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810698a:	d81b      	bhi.n	81069c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 810698c:	2b00      	cmp	r3, #0
 810698e:	d003      	beq.n	8106998 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8106990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106994:	d00b      	beq.n	81069ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8106996:	e015      	b.n	81069c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810699c:	3308      	adds	r3, #8
 810699e:	2100      	movs	r1, #0
 81069a0:	4618      	mov	r0, r3
 81069a2:	f001 fc0d 	bl	81081c0 <RCCEx_PLL2_Config>
 81069a6:	4603      	mov	r3, r0
 81069a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81069ac:	e00f      	b.n	81069ce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81069ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069b2:	3328      	adds	r3, #40	; 0x28
 81069b4:	2102      	movs	r1, #2
 81069b6:	4618      	mov	r0, r3
 81069b8:	f001 fcb4 	bl	8108324 <RCCEx_PLL3_Config>
 81069bc:	4603      	mov	r3, r0
 81069be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81069c2:	e004      	b.n	81069ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81069c4:	2301      	movs	r3, #1
 81069c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81069ca:	e000      	b.n	81069ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81069cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81069ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81069d2:	2b00      	cmp	r3, #0
 81069d4:	d10b      	bne.n	81069ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81069d6:	4b4b      	ldr	r3, [pc, #300]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81069d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81069da:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 81069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81069e6:	4a47      	ldr	r2, [pc, #284]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81069e8:	430b      	orrs	r3, r1
 81069ea:	6593      	str	r3, [r2, #88]	; 0x58
 81069ec:	e003      	b.n	81069f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81069ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81069f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81069f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81069fe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8106a02:	67bb      	str	r3, [r7, #120]	; 0x78
 8106a04:	2300      	movs	r3, #0
 8106a06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8106a08:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8106a0c:	460b      	mov	r3, r1
 8106a0e:	4313      	orrs	r3, r2
 8106a10:	d03b      	beq.n	8106a8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8106a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106a1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106a1e:	d01f      	beq.n	8106a60 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8106a20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106a24:	d818      	bhi.n	8106a58 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8106a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106a2a:	d003      	beq.n	8106a34 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8106a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106a30:	d007      	beq.n	8106a42 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8106a32:	e011      	b.n	8106a58 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106a34:	4b33      	ldr	r3, [pc, #204]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a38:	4a32      	ldr	r2, [pc, #200]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8106a40:	e00f      	b.n	8106a62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a46:	3328      	adds	r3, #40	; 0x28
 8106a48:	2101      	movs	r1, #1
 8106a4a:	4618      	mov	r0, r3
 8106a4c:	f001 fc6a 	bl	8108324 <RCCEx_PLL3_Config>
 8106a50:	4603      	mov	r3, r0
 8106a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8106a56:	e004      	b.n	8106a62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106a58:	2301      	movs	r3, #1
 8106a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106a5e:	e000      	b.n	8106a62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8106a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106a66:	2b00      	cmp	r3, #0
 8106a68:	d10b      	bne.n	8106a82 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106a6a:	4b26      	ldr	r3, [pc, #152]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106a6e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8106a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106a7a:	4a22      	ldr	r2, [pc, #136]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a7c:	430b      	orrs	r3, r1
 8106a7e:	6553      	str	r3, [r2, #84]	; 0x54
 8106a80:	e003      	b.n	8106a8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106a86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8106a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a92:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8106a96:	673b      	str	r3, [r7, #112]	; 0x70
 8106a98:	2300      	movs	r3, #0
 8106a9a:	677b      	str	r3, [r7, #116]	; 0x74
 8106a9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8106aa0:	460b      	mov	r3, r1
 8106aa2:	4313      	orrs	r3, r2
 8106aa4:	d034      	beq.n	8106b10 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8106aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106aac:	2b00      	cmp	r3, #0
 8106aae:	d003      	beq.n	8106ab8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8106ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106ab4:	d007      	beq.n	8106ac6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8106ab6:	e011      	b.n	8106adc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106ab8:	4b12      	ldr	r3, [pc, #72]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106abc:	4a11      	ldr	r2, [pc, #68]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106ac4:	e00e      	b.n	8106ae4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106aca:	3308      	adds	r3, #8
 8106acc:	2102      	movs	r1, #2
 8106ace:	4618      	mov	r0, r3
 8106ad0:	f001 fb76 	bl	81081c0 <RCCEx_PLL2_Config>
 8106ad4:	4603      	mov	r3, r0
 8106ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106ada:	e003      	b.n	8106ae4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8106adc:	2301      	movs	r3, #1
 8106ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106ae8:	2b00      	cmp	r3, #0
 8106aea:	d10d      	bne.n	8106b08 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106aec:	4b05      	ldr	r3, [pc, #20]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8106af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106afa:	4a02      	ldr	r2, [pc, #8]	; (8106b04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106afc:	430b      	orrs	r3, r1
 8106afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8106b00:	e006      	b.n	8106b10 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8106b02:	bf00      	nop
 8106b04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106b0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8106b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b18:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8106b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8106b1e:	2300      	movs	r3, #0
 8106b20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8106b22:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8106b26:	460b      	mov	r3, r1
 8106b28:	4313      	orrs	r3, r2
 8106b2a:	d00c      	beq.n	8106b46 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b30:	3328      	adds	r3, #40	; 0x28
 8106b32:	2102      	movs	r1, #2
 8106b34:	4618      	mov	r0, r3
 8106b36:	f001 fbf5 	bl	8108324 <RCCEx_PLL3_Config>
 8106b3a:	4603      	mov	r3, r0
 8106b3c:	2b00      	cmp	r3, #0
 8106b3e:	d002      	beq.n	8106b46 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8106b40:	2301      	movs	r3, #1
 8106b42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8106b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b4e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8106b52:	663b      	str	r3, [r7, #96]	; 0x60
 8106b54:	2300      	movs	r3, #0
 8106b56:	667b      	str	r3, [r7, #100]	; 0x64
 8106b58:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8106b5c:	460b      	mov	r3, r1
 8106b5e:	4313      	orrs	r3, r2
 8106b60:	d038      	beq.n	8106bd4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8106b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106b6e:	d018      	beq.n	8106ba2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8106b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106b74:	d811      	bhi.n	8106b9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8106b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106b7a:	d014      	beq.n	8106ba6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8106b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106b80:	d80b      	bhi.n	8106b9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8106b82:	2b00      	cmp	r3, #0
 8106b84:	d011      	beq.n	8106baa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8106b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106b8a:	d106      	bne.n	8106b9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106b8c:	4bc3      	ldr	r3, [pc, #780]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b90:	4ac2      	ldr	r2, [pc, #776]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106b96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8106b98:	e008      	b.n	8106bac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106b9a:	2301      	movs	r3, #1
 8106b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106ba0:	e004      	b.n	8106bac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106ba2:	bf00      	nop
 8106ba4:	e002      	b.n	8106bac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106ba6:	bf00      	nop
 8106ba8:	e000      	b.n	8106bac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106bac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106bb0:	2b00      	cmp	r3, #0
 8106bb2:	d10b      	bne.n	8106bcc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106bb4:	4bb9      	ldr	r3, [pc, #740]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106bb8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8106bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106bc4:	4ab5      	ldr	r2, [pc, #724]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106bc6:	430b      	orrs	r3, r1
 8106bc8:	6553      	str	r3, [r2, #84]	; 0x54
 8106bca:	e003      	b.n	8106bd4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106bd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8106bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106bdc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8106be0:	65bb      	str	r3, [r7, #88]	; 0x58
 8106be2:	2300      	movs	r3, #0
 8106be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8106be6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8106bea:	460b      	mov	r3, r1
 8106bec:	4313      	orrs	r3, r2
 8106bee:	d009      	beq.n	8106c04 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106bf0:	4baa      	ldr	r3, [pc, #680]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106bf4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8106bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106bfe:	4aa7      	ldr	r2, [pc, #668]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c00:	430b      	orrs	r3, r1
 8106c02:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c0c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8106c10:	653b      	str	r3, [r7, #80]	; 0x50
 8106c12:	2300      	movs	r3, #0
 8106c14:	657b      	str	r3, [r7, #84]	; 0x54
 8106c16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8106c1a:	460b      	mov	r3, r1
 8106c1c:	4313      	orrs	r3, r2
 8106c1e:	d00a      	beq.n	8106c36 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106c20:	4b9e      	ldr	r3, [pc, #632]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c22:	691b      	ldr	r3, [r3, #16]
 8106c24:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8106c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8106c30:	4a9a      	ldr	r2, [pc, #616]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c32:	430b      	orrs	r3, r1
 8106c34:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8106c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c3e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8106c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8106c44:	2300      	movs	r3, #0
 8106c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8106c48:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8106c4c:	460b      	mov	r3, r1
 8106c4e:	4313      	orrs	r3, r2
 8106c50:	d009      	beq.n	8106c66 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8106c52:	4b92      	ldr	r3, [pc, #584]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106c56:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8106c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106c60:	4a8e      	ldr	r2, [pc, #568]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c62:	430b      	orrs	r3, r1
 8106c64:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8106c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c6e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8106c72:	643b      	str	r3, [r7, #64]	; 0x40
 8106c74:	2300      	movs	r3, #0
 8106c76:	647b      	str	r3, [r7, #68]	; 0x44
 8106c78:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8106c7c:	460b      	mov	r3, r1
 8106c7e:	4313      	orrs	r3, r2
 8106c80:	d00e      	beq.n	8106ca0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8106c82:	4b86      	ldr	r3, [pc, #536]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c84:	691b      	ldr	r3, [r3, #16]
 8106c86:	4a85      	ldr	r2, [pc, #532]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8106c8c:	6113      	str	r3, [r2, #16]
 8106c8e:	4b83      	ldr	r3, [pc, #524]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c90:	6919      	ldr	r1, [r3, #16]
 8106c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8106c9a:	4a80      	ldr	r2, [pc, #512]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c9c:	430b      	orrs	r3, r1
 8106c9e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8106ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ca8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8106cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8106cae:	2300      	movs	r3, #0
 8106cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106cb2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8106cb6:	460b      	mov	r3, r1
 8106cb8:	4313      	orrs	r3, r2
 8106cba:	d009      	beq.n	8106cd0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8106cbc:	4b77      	ldr	r3, [pc, #476]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106cc0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8106cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106cca:	4a74      	ldr	r2, [pc, #464]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106ccc:	430b      	orrs	r3, r1
 8106cce:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8106cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106cd8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8106cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8106cde:	2300      	movs	r3, #0
 8106ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8106ce2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8106ce6:	460b      	mov	r3, r1
 8106ce8:	4313      	orrs	r3, r2
 8106cea:	d00a      	beq.n	8106d02 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106cec:	4b6b      	ldr	r3, [pc, #428]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106cf0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8106cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106cfc:	4a67      	ldr	r2, [pc, #412]	; (8106e9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106cfe:	430b      	orrs	r3, r1
 8106d00:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8106d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d0a:	2100      	movs	r1, #0
 8106d0c:	62b9      	str	r1, [r7, #40]	; 0x28
 8106d0e:	f003 0301 	and.w	r3, r3, #1
 8106d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8106d14:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8106d18:	460b      	mov	r3, r1
 8106d1a:	4313      	orrs	r3, r2
 8106d1c:	d011      	beq.n	8106d42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d22:	3308      	adds	r3, #8
 8106d24:	2100      	movs	r1, #0
 8106d26:	4618      	mov	r0, r3
 8106d28:	f001 fa4a 	bl	81081c0 <RCCEx_PLL2_Config>
 8106d2c:	4603      	mov	r3, r0
 8106d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106d32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d36:	2b00      	cmp	r3, #0
 8106d38:	d003      	beq.n	8106d42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8106d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d4a:	2100      	movs	r1, #0
 8106d4c:	6239      	str	r1, [r7, #32]
 8106d4e:	f003 0302 	and.w	r3, r3, #2
 8106d52:	627b      	str	r3, [r7, #36]	; 0x24
 8106d54:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8106d58:	460b      	mov	r3, r1
 8106d5a:	4313      	orrs	r3, r2
 8106d5c:	d011      	beq.n	8106d82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d62:	3308      	adds	r3, #8
 8106d64:	2101      	movs	r1, #1
 8106d66:	4618      	mov	r0, r3
 8106d68:	f001 fa2a 	bl	81081c0 <RCCEx_PLL2_Config>
 8106d6c:	4603      	mov	r3, r0
 8106d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106d72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d76:	2b00      	cmp	r3, #0
 8106d78:	d003      	beq.n	8106d82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8106d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d8a:	2100      	movs	r1, #0
 8106d8c:	61b9      	str	r1, [r7, #24]
 8106d8e:	f003 0304 	and.w	r3, r3, #4
 8106d92:	61fb      	str	r3, [r7, #28]
 8106d94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8106d98:	460b      	mov	r3, r1
 8106d9a:	4313      	orrs	r3, r2
 8106d9c:	d011      	beq.n	8106dc2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106da2:	3308      	adds	r3, #8
 8106da4:	2102      	movs	r1, #2
 8106da6:	4618      	mov	r0, r3
 8106da8:	f001 fa0a 	bl	81081c0 <RCCEx_PLL2_Config>
 8106dac:	4603      	mov	r3, r0
 8106dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106db2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106db6:	2b00      	cmp	r3, #0
 8106db8:	d003      	beq.n	8106dc2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106dba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106dbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8106dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106dca:	2100      	movs	r1, #0
 8106dcc:	6139      	str	r1, [r7, #16]
 8106dce:	f003 0308 	and.w	r3, r3, #8
 8106dd2:	617b      	str	r3, [r7, #20]
 8106dd4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8106dd8:	460b      	mov	r3, r1
 8106dda:	4313      	orrs	r3, r2
 8106ddc:	d011      	beq.n	8106e02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106de2:	3328      	adds	r3, #40	; 0x28
 8106de4:	2100      	movs	r1, #0
 8106de6:	4618      	mov	r0, r3
 8106de8:	f001 fa9c 	bl	8108324 <RCCEx_PLL3_Config>
 8106dec:	4603      	mov	r3, r0
 8106dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8106df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106df6:	2b00      	cmp	r3, #0
 8106df8:	d003      	beq.n	8106e02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106dfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8106e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e0a:	2100      	movs	r1, #0
 8106e0c:	60b9      	str	r1, [r7, #8]
 8106e0e:	f003 0310 	and.w	r3, r3, #16
 8106e12:	60fb      	str	r3, [r7, #12]
 8106e14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8106e18:	460b      	mov	r3, r1
 8106e1a:	4313      	orrs	r3, r2
 8106e1c:	d011      	beq.n	8106e42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e22:	3328      	adds	r3, #40	; 0x28
 8106e24:	2101      	movs	r1, #1
 8106e26:	4618      	mov	r0, r3
 8106e28:	f001 fa7c 	bl	8108324 <RCCEx_PLL3_Config>
 8106e2c:	4603      	mov	r3, r0
 8106e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e36:	2b00      	cmp	r3, #0
 8106e38:	d003      	beq.n	8106e42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8106e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e4a:	2100      	movs	r1, #0
 8106e4c:	6039      	str	r1, [r7, #0]
 8106e4e:	f003 0320 	and.w	r3, r3, #32
 8106e52:	607b      	str	r3, [r7, #4]
 8106e54:	e9d7 1200 	ldrd	r1, r2, [r7]
 8106e58:	460b      	mov	r3, r1
 8106e5a:	4313      	orrs	r3, r2
 8106e5c:	d011      	beq.n	8106e82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e62:	3328      	adds	r3, #40	; 0x28
 8106e64:	2102      	movs	r1, #2
 8106e66:	4618      	mov	r0, r3
 8106e68:	f001 fa5c 	bl	8108324 <RCCEx_PLL3_Config>
 8106e6c:	4603      	mov	r3, r0
 8106e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e76:	2b00      	cmp	r3, #0
 8106e78:	d003      	beq.n	8106e82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8106e82:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8106e86:	2b00      	cmp	r3, #0
 8106e88:	d101      	bne.n	8106e8e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8106e8a:	2300      	movs	r3, #0
 8106e8c:	e000      	b.n	8106e90 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8106e8e:	2301      	movs	r3, #1
}
 8106e90:	4618      	mov	r0, r3
 8106e92:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8106e96:	46bd      	mov	sp, r7
 8106e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8106e9c:	58024400 	.word	0x58024400

08106ea0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8106ea0:	b580      	push	{r7, lr}
 8106ea2:	b090      	sub	sp, #64	; 0x40
 8106ea4:	af00      	add	r7, sp, #0
 8106ea6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8106eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106eae:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8106eb2:	430b      	orrs	r3, r1
 8106eb4:	f040 8094 	bne.w	8106fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8106eb8:	4b9e      	ldr	r3, [pc, #632]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106ebc:	f003 0307 	and.w	r3, r3, #7
 8106ec0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8106ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ec4:	2b04      	cmp	r3, #4
 8106ec6:	f200 8087 	bhi.w	8106fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8106eca:	a201      	add	r2, pc, #4	; (adr r2, 8106ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8106ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106ed0:	08106ee5 	.word	0x08106ee5
 8106ed4:	08106f0d 	.word	0x08106f0d
 8106ed8:	08106f35 	.word	0x08106f35
 8106edc:	08106fd1 	.word	0x08106fd1
 8106ee0:	08106f5d 	.word	0x08106f5d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106ee4:	4b93      	ldr	r3, [pc, #588]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106ee6:	681b      	ldr	r3, [r3, #0]
 8106ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106eec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106ef0:	d108      	bne.n	8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106ef6:	4618      	mov	r0, r3
 8106ef8:	f001 f810 	bl	8107f1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f00:	f000 bd45 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f04:	2300      	movs	r3, #0
 8106f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106f08:	f000 bd41 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106f0c:	4b89      	ldr	r3, [pc, #548]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f0e:	681b      	ldr	r3, [r3, #0]
 8106f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106f18:	d108      	bne.n	8106f2c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106f1a:	f107 0318 	add.w	r3, r7, #24
 8106f1e:	4618      	mov	r0, r3
 8106f20:	f000 fd54 	bl	81079cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106f24:	69bb      	ldr	r3, [r7, #24]
 8106f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f28:	f000 bd31 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f2c:	2300      	movs	r3, #0
 8106f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106f30:	f000 bd2d 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106f34:	4b7f      	ldr	r3, [pc, #508]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f36:	681b      	ldr	r3, [r3, #0]
 8106f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106f40:	d108      	bne.n	8106f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106f42:	f107 030c 	add.w	r3, r7, #12
 8106f46:	4618      	mov	r0, r3
 8106f48:	f000 fe94 	bl	8107c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106f4c:	68fb      	ldr	r3, [r7, #12]
 8106f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f50:	f000 bd1d 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f54:	2300      	movs	r3, #0
 8106f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106f58:	f000 bd19 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106f5c:	4b75      	ldr	r3, [pc, #468]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106f64:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106f66:	4b73      	ldr	r3, [pc, #460]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f68:	681b      	ldr	r3, [r3, #0]
 8106f6a:	f003 0304 	and.w	r3, r3, #4
 8106f6e:	2b04      	cmp	r3, #4
 8106f70:	d10c      	bne.n	8106f8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8106f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106f74:	2b00      	cmp	r3, #0
 8106f76:	d109      	bne.n	8106f8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106f78:	4b6e      	ldr	r3, [pc, #440]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f7a:	681b      	ldr	r3, [r3, #0]
 8106f7c:	08db      	lsrs	r3, r3, #3
 8106f7e:	f003 0303 	and.w	r3, r3, #3
 8106f82:	4a6d      	ldr	r2, [pc, #436]	; (8107138 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8106f84:	fa22 f303 	lsr.w	r3, r2, r3
 8106f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106f8a:	e01f      	b.n	8106fcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106f8c:	4b69      	ldr	r3, [pc, #420]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f8e:	681b      	ldr	r3, [r3, #0]
 8106f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106f98:	d106      	bne.n	8106fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8106f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106fa0:	d102      	bne.n	8106fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106fa2:	4b66      	ldr	r3, [pc, #408]	; (810713c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8106fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106fa6:	e011      	b.n	8106fcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106fa8:	4b62      	ldr	r3, [pc, #392]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106faa:	681b      	ldr	r3, [r3, #0]
 8106fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106fb4:	d106      	bne.n	8106fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8106fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106fbc:	d102      	bne.n	8106fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106fbe:	4b60      	ldr	r3, [pc, #384]	; (8107140 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8106fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106fc2:	e003      	b.n	8106fcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106fc4:	2300      	movs	r3, #0
 8106fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8106fc8:	f000 bce1 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106fcc:	f000 bcdf 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106fd0:	4b5c      	ldr	r3, [pc, #368]	; (8107144 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8106fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106fd4:	f000 bcdb 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106fd8:	2300      	movs	r3, #0
 8106fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106fdc:	f000 bcd7 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8106fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106fe4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8106fe8:	430b      	orrs	r3, r1
 8106fea:	f040 80ad 	bne.w	8107148 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8106fee:	4b51      	ldr	r3, [pc, #324]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106ff2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8106ff6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8106ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106ffe:	d056      	beq.n	81070ae <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8107000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107006:	f200 8090 	bhi.w	810712a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810700c:	2bc0      	cmp	r3, #192	; 0xc0
 810700e:	f000 8088 	beq.w	8107122 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8107012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107014:	2bc0      	cmp	r3, #192	; 0xc0
 8107016:	f200 8088 	bhi.w	810712a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810701a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810701c:	2b80      	cmp	r3, #128	; 0x80
 810701e:	d032      	beq.n	8107086 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8107020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107022:	2b80      	cmp	r3, #128	; 0x80
 8107024:	f200 8081 	bhi.w	810712a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810702a:	2b00      	cmp	r3, #0
 810702c:	d003      	beq.n	8107036 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107030:	2b40      	cmp	r3, #64	; 0x40
 8107032:	d014      	beq.n	810705e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8107034:	e079      	b.n	810712a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107036:	4b3f      	ldr	r3, [pc, #252]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107038:	681b      	ldr	r3, [r3, #0]
 810703a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810703e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107042:	d108      	bne.n	8107056 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107048:	4618      	mov	r0, r3
 810704a:	f000 ff67 	bl	8107f1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107050:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107052:	f000 bc9c 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107056:	2300      	movs	r3, #0
 8107058:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810705a:	f000 bc98 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810705e:	4b35      	ldr	r3, [pc, #212]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107060:	681b      	ldr	r3, [r3, #0]
 8107062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810706a:	d108      	bne.n	810707e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810706c:	f107 0318 	add.w	r3, r7, #24
 8107070:	4618      	mov	r0, r3
 8107072:	f000 fcab 	bl	81079cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107076:	69bb      	ldr	r3, [r7, #24]
 8107078:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810707a:	f000 bc88 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810707e:	2300      	movs	r3, #0
 8107080:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107082:	f000 bc84 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107086:	4b2b      	ldr	r3, [pc, #172]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107088:	681b      	ldr	r3, [r3, #0]
 810708a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810708e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107092:	d108      	bne.n	81070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107094:	f107 030c 	add.w	r3, r7, #12
 8107098:	4618      	mov	r0, r3
 810709a:	f000 fdeb 	bl	8107c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810709e:	68fb      	ldr	r3, [r7, #12]
 81070a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81070a2:	f000 bc74 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81070a6:	2300      	movs	r3, #0
 81070a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81070aa:	f000 bc70 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81070ae:	4b21      	ldr	r3, [pc, #132]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81070b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81070b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81070b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81070b8:	4b1e      	ldr	r3, [pc, #120]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81070ba:	681b      	ldr	r3, [r3, #0]
 81070bc:	f003 0304 	and.w	r3, r3, #4
 81070c0:	2b04      	cmp	r3, #4
 81070c2:	d10c      	bne.n	81070de <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 81070c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81070c6:	2b00      	cmp	r3, #0
 81070c8:	d109      	bne.n	81070de <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81070ca:	4b1a      	ldr	r3, [pc, #104]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81070cc:	681b      	ldr	r3, [r3, #0]
 81070ce:	08db      	lsrs	r3, r3, #3
 81070d0:	f003 0303 	and.w	r3, r3, #3
 81070d4:	4a18      	ldr	r2, [pc, #96]	; (8107138 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81070d6:	fa22 f303 	lsr.w	r3, r2, r3
 81070da:	63fb      	str	r3, [r7, #60]	; 0x3c
 81070dc:	e01f      	b.n	810711e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81070de:	4b15      	ldr	r3, [pc, #84]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81070e0:	681b      	ldr	r3, [r3, #0]
 81070e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81070e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81070ea:	d106      	bne.n	81070fa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 81070ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81070ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81070f2:	d102      	bne.n	81070fa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81070f4:	4b11      	ldr	r3, [pc, #68]	; (810713c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81070f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81070f8:	e011      	b.n	810711e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81070fa:	4b0e      	ldr	r3, [pc, #56]	; (8107134 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81070fc:	681b      	ldr	r3, [r3, #0]
 81070fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107106:	d106      	bne.n	8107116 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8107108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810710a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810710e:	d102      	bne.n	8107116 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107110:	4b0b      	ldr	r3, [pc, #44]	; (8107140 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107114:	e003      	b.n	810711e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107116:	2300      	movs	r3, #0
 8107118:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810711a:	f000 bc38 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810711e:	f000 bc36 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107122:	4b08      	ldr	r3, [pc, #32]	; (8107144 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107124:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107126:	f000 bc32 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810712a:	2300      	movs	r3, #0
 810712c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810712e:	f000 bc2e 	b.w	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107132:	bf00      	nop
 8107134:	58024400 	.word	0x58024400
 8107138:	03d09000 	.word	0x03d09000
 810713c:	003d0900 	.word	0x003d0900
 8107140:	007a1200 	.word	0x007a1200
 8107144:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107148:	e9d7 2300 	ldrd	r2, r3, [r7]
 810714c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8107150:	430b      	orrs	r3, r1
 8107152:	f040 809c 	bne.w	810728e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8107156:	4b9e      	ldr	r3, [pc, #632]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810715a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 810715e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8107160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107162:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8107166:	d054      	beq.n	8107212 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8107168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810716a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810716e:	f200 808b 	bhi.w	8107288 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107174:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8107178:	f000 8083 	beq.w	8107282 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 810717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810717e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8107182:	f200 8081 	bhi.w	8107288 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810718c:	d02f      	beq.n	81071ee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 810718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107194:	d878      	bhi.n	8107288 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107198:	2b00      	cmp	r3, #0
 810719a:	d004      	beq.n	81071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 810719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810719e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81071a2:	d012      	beq.n	81071ca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 81071a4:	e070      	b.n	8107288 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81071a6:	4b8a      	ldr	r3, [pc, #552]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071a8:	681b      	ldr	r3, [r3, #0]
 81071aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81071ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81071b2:	d107      	bne.n	81071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81071b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81071b8:	4618      	mov	r0, r3
 81071ba:	f000 feaf 	bl	8107f1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81071be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81071c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071c2:	e3e4      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071c4:	2300      	movs	r3, #0
 81071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81071c8:	e3e1      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81071ca:	4b81      	ldr	r3, [pc, #516]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071cc:	681b      	ldr	r3, [r3, #0]
 81071ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81071d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81071d6:	d107      	bne.n	81071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81071d8:	f107 0318 	add.w	r3, r7, #24
 81071dc:	4618      	mov	r0, r3
 81071de:	f000 fbf5 	bl	81079cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81071e2:	69bb      	ldr	r3, [r7, #24]
 81071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071e6:	e3d2      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071e8:	2300      	movs	r3, #0
 81071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81071ec:	e3cf      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81071ee:	4b78      	ldr	r3, [pc, #480]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071f0:	681b      	ldr	r3, [r3, #0]
 81071f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81071f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81071fa:	d107      	bne.n	810720c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81071fc:	f107 030c 	add.w	r3, r7, #12
 8107200:	4618      	mov	r0, r3
 8107202:	f000 fd37 	bl	8107c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107206:	68fb      	ldr	r3, [r7, #12]
 8107208:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810720a:	e3c0      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810720c:	2300      	movs	r3, #0
 810720e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107210:	e3bd      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107212:	4b6f      	ldr	r3, [pc, #444]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107216:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810721a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810721c:	4b6c      	ldr	r3, [pc, #432]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810721e:	681b      	ldr	r3, [r3, #0]
 8107220:	f003 0304 	and.w	r3, r3, #4
 8107224:	2b04      	cmp	r3, #4
 8107226:	d10c      	bne.n	8107242 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8107228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810722a:	2b00      	cmp	r3, #0
 810722c:	d109      	bne.n	8107242 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810722e:	4b68      	ldr	r3, [pc, #416]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107230:	681b      	ldr	r3, [r3, #0]
 8107232:	08db      	lsrs	r3, r3, #3
 8107234:	f003 0303 	and.w	r3, r3, #3
 8107238:	4a66      	ldr	r2, [pc, #408]	; (81073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810723a:	fa22 f303 	lsr.w	r3, r2, r3
 810723e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107240:	e01e      	b.n	8107280 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107242:	4b63      	ldr	r3, [pc, #396]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107244:	681b      	ldr	r3, [r3, #0]
 8107246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810724a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810724e:	d106      	bne.n	810725e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8107250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107256:	d102      	bne.n	810725e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107258:	4b5f      	ldr	r3, [pc, #380]	; (81073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810725a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810725c:	e010      	b.n	8107280 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810725e:	4b5c      	ldr	r3, [pc, #368]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107260:	681b      	ldr	r3, [r3, #0]
 8107262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810726a:	d106      	bne.n	810727a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 810726c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810726e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107272:	d102      	bne.n	810727a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107274:	4b59      	ldr	r3, [pc, #356]	; (81073dc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107278:	e002      	b.n	8107280 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810727a:	2300      	movs	r3, #0
 810727c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810727e:	e386      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107280:	e385      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107282:	4b57      	ldr	r3, [pc, #348]	; (81073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107286:	e382      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107288:	2300      	movs	r3, #0
 810728a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810728c:	e37f      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810728e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107292:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8107296:	430b      	orrs	r3, r1
 8107298:	f040 80a7 	bne.w	81073ea <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 810729c:	4b4c      	ldr	r3, [pc, #304]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810729e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81072a0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 81072a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 81072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81072ac:	d055      	beq.n	810735a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 81072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81072b4:	f200 8096 	bhi.w	81073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81072be:	f000 8084 	beq.w	81073ca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 81072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81072c8:	f200 808c 	bhi.w	81073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81072d2:	d030      	beq.n	8107336 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 81072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81072da:	f200 8083 	bhi.w	81073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072e0:	2b00      	cmp	r3, #0
 81072e2:	d004      	beq.n	81072ee <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 81072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81072ea:	d012      	beq.n	8107312 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 81072ec:	e07a      	b.n	81073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81072ee:	4b38      	ldr	r3, [pc, #224]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81072f0:	681b      	ldr	r3, [r3, #0]
 81072f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81072f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81072fa:	d107      	bne.n	810730c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81072fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107300:	4618      	mov	r0, r3
 8107302:	f000 fe0b 	bl	8107f1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107308:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810730a:	e340      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810730c:	2300      	movs	r3, #0
 810730e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107310:	e33d      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107312:	4b2f      	ldr	r3, [pc, #188]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107314:	681b      	ldr	r3, [r3, #0]
 8107316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810731a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810731e:	d107      	bne.n	8107330 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107320:	f107 0318 	add.w	r3, r7, #24
 8107324:	4618      	mov	r0, r3
 8107326:	f000 fb51 	bl	81079cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810732a:	69bb      	ldr	r3, [r7, #24]
 810732c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810732e:	e32e      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107330:	2300      	movs	r3, #0
 8107332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107334:	e32b      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107336:	4b26      	ldr	r3, [pc, #152]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107338:	681b      	ldr	r3, [r3, #0]
 810733a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810733e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107342:	d107      	bne.n	8107354 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107344:	f107 030c 	add.w	r3, r7, #12
 8107348:	4618      	mov	r0, r3
 810734a:	f000 fc93 	bl	8107c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810734e:	68fb      	ldr	r3, [r7, #12]
 8107350:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107352:	e31c      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107354:	2300      	movs	r3, #0
 8107356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107358:	e319      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810735a:	4b1d      	ldr	r3, [pc, #116]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810735c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810735e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107362:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107364:	4b1a      	ldr	r3, [pc, #104]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107366:	681b      	ldr	r3, [r3, #0]
 8107368:	f003 0304 	and.w	r3, r3, #4
 810736c:	2b04      	cmp	r3, #4
 810736e:	d10c      	bne.n	810738a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8107370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107372:	2b00      	cmp	r3, #0
 8107374:	d109      	bne.n	810738a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107376:	4b16      	ldr	r3, [pc, #88]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107378:	681b      	ldr	r3, [r3, #0]
 810737a:	08db      	lsrs	r3, r3, #3
 810737c:	f003 0303 	and.w	r3, r3, #3
 8107380:	4a14      	ldr	r2, [pc, #80]	; (81073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107382:	fa22 f303 	lsr.w	r3, r2, r3
 8107386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107388:	e01e      	b.n	81073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810738a:	4b11      	ldr	r3, [pc, #68]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810738c:	681b      	ldr	r3, [r3, #0]
 810738e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107396:	d106      	bne.n	81073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8107398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810739a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810739e:	d102      	bne.n	81073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81073a0:	4b0d      	ldr	r3, [pc, #52]	; (81073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81073a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81073a4:	e010      	b.n	81073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81073a6:	4b0a      	ldr	r3, [pc, #40]	; (81073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81073a8:	681b      	ldr	r3, [r3, #0]
 81073aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81073ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81073b2:	d106      	bne.n	81073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 81073b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81073b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81073ba:	d102      	bne.n	81073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81073bc:	4b07      	ldr	r3, [pc, #28]	; (81073dc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81073be:	63fb      	str	r3, [r7, #60]	; 0x3c
 81073c0:	e002      	b.n	81073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81073c2:	2300      	movs	r3, #0
 81073c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81073c6:	e2e2      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81073c8:	e2e1      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81073ca:	4b05      	ldr	r3, [pc, #20]	; (81073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81073cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81073ce:	e2de      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81073d0:	58024400 	.word	0x58024400
 81073d4:	03d09000 	.word	0x03d09000
 81073d8:	003d0900 	.word	0x003d0900
 81073dc:	007a1200 	.word	0x007a1200
 81073e0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 81073e4:	2300      	movs	r3, #0
 81073e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81073e8:	e2d1      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 81073ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 81073ee:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 81073f2:	430b      	orrs	r3, r1
 81073f4:	f040 809c 	bne.w	8107530 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 81073f8:	4b93      	ldr	r3, [pc, #588]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81073fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81073fc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8107400:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8107402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107408:	d054      	beq.n	81074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 810740a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810740c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107410:	f200 808b 	bhi.w	810752a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107416:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810741a:	f000 8083 	beq.w	8107524 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 810741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107420:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8107424:	f200 8081 	bhi.w	810752a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810742a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810742e:	d02f      	beq.n	8107490 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8107430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107436:	d878      	bhi.n	810752a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810743a:	2b00      	cmp	r3, #0
 810743c:	d004      	beq.n	8107448 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 810743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107444:	d012      	beq.n	810746c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8107446:	e070      	b.n	810752a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107448:	4b7f      	ldr	r3, [pc, #508]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810744a:	681b      	ldr	r3, [r3, #0]
 810744c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107450:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107454:	d107      	bne.n	8107466 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810745a:	4618      	mov	r0, r3
 810745c:	f000 fd5e 	bl	8107f1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107462:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107464:	e293      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107466:	2300      	movs	r3, #0
 8107468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810746a:	e290      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810746c:	4b76      	ldr	r3, [pc, #472]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810746e:	681b      	ldr	r3, [r3, #0]
 8107470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107478:	d107      	bne.n	810748a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810747a:	f107 0318 	add.w	r3, r7, #24
 810747e:	4618      	mov	r0, r3
 8107480:	f000 faa4 	bl	81079cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107484:	69bb      	ldr	r3, [r7, #24]
 8107486:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107488:	e281      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810748a:	2300      	movs	r3, #0
 810748c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810748e:	e27e      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107490:	4b6d      	ldr	r3, [pc, #436]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107492:	681b      	ldr	r3, [r3, #0]
 8107494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810749c:	d107      	bne.n	81074ae <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810749e:	f107 030c 	add.w	r3, r7, #12
 81074a2:	4618      	mov	r0, r3
 81074a4:	f000 fbe6 	bl	8107c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81074a8:	68fb      	ldr	r3, [r7, #12]
 81074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81074ac:	e26f      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81074ae:	2300      	movs	r3, #0
 81074b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81074b2:	e26c      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81074b4:	4b64      	ldr	r3, [pc, #400]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81074b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81074b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81074bc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81074be:	4b62      	ldr	r3, [pc, #392]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81074c0:	681b      	ldr	r3, [r3, #0]
 81074c2:	f003 0304 	and.w	r3, r3, #4
 81074c6:	2b04      	cmp	r3, #4
 81074c8:	d10c      	bne.n	81074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 81074ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81074cc:	2b00      	cmp	r3, #0
 81074ce:	d109      	bne.n	81074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81074d0:	4b5d      	ldr	r3, [pc, #372]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81074d2:	681b      	ldr	r3, [r3, #0]
 81074d4:	08db      	lsrs	r3, r3, #3
 81074d6:	f003 0303 	and.w	r3, r3, #3
 81074da:	4a5c      	ldr	r2, [pc, #368]	; (810764c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81074dc:	fa22 f303 	lsr.w	r3, r2, r3
 81074e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81074e2:	e01e      	b.n	8107522 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81074e4:	4b58      	ldr	r3, [pc, #352]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81074e6:	681b      	ldr	r3, [r3, #0]
 81074e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81074ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81074f0:	d106      	bne.n	8107500 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 81074f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81074f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81074f8:	d102      	bne.n	8107500 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81074fa:	4b55      	ldr	r3, [pc, #340]	; (8107650 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81074fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 81074fe:	e010      	b.n	8107522 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107500:	4b51      	ldr	r3, [pc, #324]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107502:	681b      	ldr	r3, [r3, #0]
 8107504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810750c:	d106      	bne.n	810751c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 810750e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107514:	d102      	bne.n	810751c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107516:	4b4f      	ldr	r3, [pc, #316]	; (8107654 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107518:	63fb      	str	r3, [r7, #60]	; 0x3c
 810751a:	e002      	b.n	8107522 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810751c:	2300      	movs	r3, #0
 810751e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8107520:	e235      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107522:	e234      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107524:	4b4c      	ldr	r3, [pc, #304]	; (8107658 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8107526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107528:	e231      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810752a:	2300      	movs	r3, #0
 810752c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810752e:	e22e      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8107530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107534:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8107538:	430b      	orrs	r3, r1
 810753a:	f040 808f 	bne.w	810765c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 810753e:	4b42      	ldr	r3, [pc, #264]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107542:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8107546:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8107548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810754a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810754e:	d06b      	beq.n	8107628 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8107550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8107556:	d874      	bhi.n	8107642 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810755a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810755e:	d056      	beq.n	810760e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8107560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107562:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8107566:	d86c      	bhi.n	8107642 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810756a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810756e:	d03b      	beq.n	81075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8107570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107572:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8107576:	d864      	bhi.n	8107642 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810757a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810757e:	d021      	beq.n	81075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8107580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107586:	d85c      	bhi.n	8107642 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810758a:	2b00      	cmp	r3, #0
 810758c:	d004      	beq.n	8107598 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 810758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107594:	d004      	beq.n	81075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8107596:	e054      	b.n	8107642 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8107598:	f7fe fa4c 	bl	8105a34 <HAL_RCC_GetPCLK1Freq>
 810759c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810759e:	e1f6      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81075a0:	4b29      	ldr	r3, [pc, #164]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075a2:	681b      	ldr	r3, [r3, #0]
 81075a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81075a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81075ac:	d107      	bne.n	81075be <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81075ae:	f107 0318 	add.w	r3, r7, #24
 81075b2:	4618      	mov	r0, r3
 81075b4:	f000 fa0a 	bl	81079cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81075b8:	69fb      	ldr	r3, [r7, #28]
 81075ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075bc:	e1e7      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075be:	2300      	movs	r3, #0
 81075c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81075c2:	e1e4      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81075c4:	4b20      	ldr	r3, [pc, #128]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075c6:	681b      	ldr	r3, [r3, #0]
 81075c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81075cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81075d0:	d107      	bne.n	81075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81075d2:	f107 030c 	add.w	r3, r7, #12
 81075d6:	4618      	mov	r0, r3
 81075d8:	f000 fb4c 	bl	8107c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81075dc:	693b      	ldr	r3, [r7, #16]
 81075de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075e0:	e1d5      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075e2:	2300      	movs	r3, #0
 81075e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81075e6:	e1d2      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81075e8:	4b17      	ldr	r3, [pc, #92]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075ea:	681b      	ldr	r3, [r3, #0]
 81075ec:	f003 0304 	and.w	r3, r3, #4
 81075f0:	2b04      	cmp	r3, #4
 81075f2:	d109      	bne.n	8107608 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81075f4:	4b14      	ldr	r3, [pc, #80]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075f6:	681b      	ldr	r3, [r3, #0]
 81075f8:	08db      	lsrs	r3, r3, #3
 81075fa:	f003 0303 	and.w	r3, r3, #3
 81075fe:	4a13      	ldr	r2, [pc, #76]	; (810764c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8107600:	fa22 f303 	lsr.w	r3, r2, r3
 8107604:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107606:	e1c2      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107608:	2300      	movs	r3, #0
 810760a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810760c:	e1bf      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810760e:	4b0e      	ldr	r3, [pc, #56]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107610:	681b      	ldr	r3, [r3, #0]
 8107612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810761a:	d102      	bne.n	8107622 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 810761c:	4b0c      	ldr	r3, [pc, #48]	; (8107650 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810761e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107620:	e1b5      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107622:	2300      	movs	r3, #0
 8107624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107626:	e1b2      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107628:	4b07      	ldr	r3, [pc, #28]	; (8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810762a:	681b      	ldr	r3, [r3, #0]
 810762c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107634:	d102      	bne.n	810763c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8107636:	4b07      	ldr	r3, [pc, #28]	; (8107654 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107638:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810763a:	e1a8      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810763c:	2300      	movs	r3, #0
 810763e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107640:	e1a5      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107642:	2300      	movs	r3, #0
 8107644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107646:	e1a2      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107648:	58024400 	.word	0x58024400
 810764c:	03d09000 	.word	0x03d09000
 8107650:	003d0900 	.word	0x003d0900
 8107654:	007a1200 	.word	0x007a1200
 8107658:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 810765c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107660:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8107664:	430b      	orrs	r3, r1
 8107666:	d173      	bne.n	8107750 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8107668:	4b9c      	ldr	r3, [pc, #624]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810766a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810766c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8107670:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8107672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107678:	d02f      	beq.n	81076da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 810767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810767c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107680:	d863      	bhi.n	810774a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8107682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107684:	2b00      	cmp	r3, #0
 8107686:	d004      	beq.n	8107692 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8107688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810768a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810768e:	d012      	beq.n	81076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8107690:	e05b      	b.n	810774a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107692:	4b92      	ldr	r3, [pc, #584]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107694:	681b      	ldr	r3, [r3, #0]
 8107696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810769a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810769e:	d107      	bne.n	81076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81076a0:	f107 0318 	add.w	r3, r7, #24
 81076a4:	4618      	mov	r0, r3
 81076a6:	f000 f991 	bl	81079cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81076aa:	69bb      	ldr	r3, [r7, #24]
 81076ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81076ae:	e16e      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81076b0:	2300      	movs	r3, #0
 81076b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81076b4:	e16b      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81076b6:	4b89      	ldr	r3, [pc, #548]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076b8:	681b      	ldr	r3, [r3, #0]
 81076ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81076be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81076c2:	d107      	bne.n	81076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81076c4:	f107 030c 	add.w	r3, r7, #12
 81076c8:	4618      	mov	r0, r3
 81076ca:	f000 fad3 	bl	8107c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81076ce:	697b      	ldr	r3, [r7, #20]
 81076d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81076d2:	e15c      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81076d4:	2300      	movs	r3, #0
 81076d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81076d8:	e159      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81076da:	4b80      	ldr	r3, [pc, #512]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81076de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81076e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81076e4:	4b7d      	ldr	r3, [pc, #500]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076e6:	681b      	ldr	r3, [r3, #0]
 81076e8:	f003 0304 	and.w	r3, r3, #4
 81076ec:	2b04      	cmp	r3, #4
 81076ee:	d10c      	bne.n	810770a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 81076f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81076f2:	2b00      	cmp	r3, #0
 81076f4:	d109      	bne.n	810770a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81076f6:	4b79      	ldr	r3, [pc, #484]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076f8:	681b      	ldr	r3, [r3, #0]
 81076fa:	08db      	lsrs	r3, r3, #3
 81076fc:	f003 0303 	and.w	r3, r3, #3
 8107700:	4a77      	ldr	r2, [pc, #476]	; (81078e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8107702:	fa22 f303 	lsr.w	r3, r2, r3
 8107706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107708:	e01e      	b.n	8107748 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810770a:	4b74      	ldr	r3, [pc, #464]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810770c:	681b      	ldr	r3, [r3, #0]
 810770e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107716:	d106      	bne.n	8107726 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8107718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810771a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810771e:	d102      	bne.n	8107726 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107720:	4b70      	ldr	r3, [pc, #448]	; (81078e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8107722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107724:	e010      	b.n	8107748 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107726:	4b6d      	ldr	r3, [pc, #436]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107728:	681b      	ldr	r3, [r3, #0]
 810772a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810772e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107732:	d106      	bne.n	8107742 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8107734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810773a:	d102      	bne.n	8107742 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810773c:	4b6a      	ldr	r3, [pc, #424]	; (81078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810773e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107740:	e002      	b.n	8107748 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107742:	2300      	movs	r3, #0
 8107744:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8107746:	e122      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107748:	e121      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810774a:	2300      	movs	r3, #0
 810774c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810774e:	e11e      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8107750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107754:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8107758:	430b      	orrs	r3, r1
 810775a:	d133      	bne.n	81077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 810775c:	4b5f      	ldr	r3, [pc, #380]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810775e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107764:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8107766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107768:	2b00      	cmp	r3, #0
 810776a:	d004      	beq.n	8107776 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 810776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810776e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107772:	d012      	beq.n	810779a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8107774:	e023      	b.n	81077be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107776:	4b59      	ldr	r3, [pc, #356]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107778:	681b      	ldr	r3, [r3, #0]
 810777a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810777e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107782:	d107      	bne.n	8107794 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107788:	4618      	mov	r0, r3
 810778a:	f000 fbc7 	bl	8107f1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107790:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107792:	e0fc      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107794:	2300      	movs	r3, #0
 8107796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107798:	e0f9      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810779a:	4b50      	ldr	r3, [pc, #320]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810779c:	681b      	ldr	r3, [r3, #0]
 810779e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81077a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81077a6:	d107      	bne.n	81077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81077a8:	f107 0318 	add.w	r3, r7, #24
 81077ac:	4618      	mov	r0, r3
 81077ae:	f000 f90d 	bl	81079cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81077b2:	6a3b      	ldr	r3, [r7, #32]
 81077b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81077b6:	e0ea      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81077b8:	2300      	movs	r3, #0
 81077ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81077bc:	e0e7      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81077be:	2300      	movs	r3, #0
 81077c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81077c2:	e0e4      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81077c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81077c8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 81077cc:	430b      	orrs	r3, r1
 81077ce:	f040 808d 	bne.w	81078ec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 81077d2:	4b42      	ldr	r3, [pc, #264]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81077d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81077d6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 81077da:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81077dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81077e2:	d06b      	beq.n	81078bc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 81077e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81077ea:	d874      	bhi.n	81078d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81077ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81077f2:	d056      	beq.n	81078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 81077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81077fa:	d86c      	bhi.n	81078d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81077fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8107802:	d03b      	beq.n	810787c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8107804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107806:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810780a:	d864      	bhi.n	81078d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810780c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810780e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107812:	d021      	beq.n	8107858 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8107814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810781a:	d85c      	bhi.n	81078d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810781e:	2b00      	cmp	r3, #0
 8107820:	d004      	beq.n	810782c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8107822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107824:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107828:	d004      	beq.n	8107834 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 810782a:	e054      	b.n	81078d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810782c:	f000 f8b8 	bl	81079a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8107830:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107832:	e0ac      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107834:	4b29      	ldr	r3, [pc, #164]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107836:	681b      	ldr	r3, [r3, #0]
 8107838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810783c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107840:	d107      	bne.n	8107852 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107842:	f107 0318 	add.w	r3, r7, #24
 8107846:	4618      	mov	r0, r3
 8107848:	f000 f8c0 	bl	81079cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810784c:	69fb      	ldr	r3, [r7, #28]
 810784e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107850:	e09d      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107852:	2300      	movs	r3, #0
 8107854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107856:	e09a      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107858:	4b20      	ldr	r3, [pc, #128]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810785a:	681b      	ldr	r3, [r3, #0]
 810785c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107864:	d107      	bne.n	8107876 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107866:	f107 030c 	add.w	r3, r7, #12
 810786a:	4618      	mov	r0, r3
 810786c:	f000 fa02 	bl	8107c74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107870:	693b      	ldr	r3, [r7, #16]
 8107872:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107874:	e08b      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107876:	2300      	movs	r3, #0
 8107878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810787a:	e088      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810787c:	4b17      	ldr	r3, [pc, #92]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810787e:	681b      	ldr	r3, [r3, #0]
 8107880:	f003 0304 	and.w	r3, r3, #4
 8107884:	2b04      	cmp	r3, #4
 8107886:	d109      	bne.n	810789c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107888:	4b14      	ldr	r3, [pc, #80]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810788a:	681b      	ldr	r3, [r3, #0]
 810788c:	08db      	lsrs	r3, r3, #3
 810788e:	f003 0303 	and.w	r3, r3, #3
 8107892:	4a13      	ldr	r2, [pc, #76]	; (81078e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8107894:	fa22 f303 	lsr.w	r3, r2, r3
 8107898:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810789a:	e078      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810789c:	2300      	movs	r3, #0
 810789e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81078a0:	e075      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81078a2:	4b0e      	ldr	r3, [pc, #56]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81078a4:	681b      	ldr	r3, [r3, #0]
 81078a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81078aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81078ae:	d102      	bne.n	81078b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 81078b0:	4b0c      	ldr	r3, [pc, #48]	; (81078e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81078b4:	e06b      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81078b6:	2300      	movs	r3, #0
 81078b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81078ba:	e068      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81078bc:	4b07      	ldr	r3, [pc, #28]	; (81078dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81078be:	681b      	ldr	r3, [r3, #0]
 81078c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81078c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81078c8:	d102      	bne.n	81078d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 81078ca:	4b07      	ldr	r3, [pc, #28]	; (81078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81078cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81078ce:	e05e      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81078d0:	2300      	movs	r3, #0
 81078d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81078d4:	e05b      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 81078d6:	2300      	movs	r3, #0
 81078d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81078da:	e058      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81078dc:	58024400 	.word	0x58024400
 81078e0:	03d09000 	.word	0x03d09000
 81078e4:	003d0900 	.word	0x003d0900
 81078e8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81078ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 81078f0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 81078f4:	430b      	orrs	r3, r1
 81078f6:	d148      	bne.n	810798a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 81078f8:	4b27      	ldr	r3, [pc, #156]	; (8107998 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81078fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81078fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107900:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8107902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107908:	d02a      	beq.n	8107960 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810790c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107910:	d838      	bhi.n	8107984 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8107912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107914:	2b00      	cmp	r3, #0
 8107916:	d004      	beq.n	8107922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8107918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810791a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810791e:	d00d      	beq.n	810793c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8107920:	e030      	b.n	8107984 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107922:	4b1d      	ldr	r3, [pc, #116]	; (8107998 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107924:	681b      	ldr	r3, [r3, #0]
 8107926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810792a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810792e:	d102      	bne.n	8107936 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8107930:	4b1a      	ldr	r3, [pc, #104]	; (810799c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8107932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107934:	e02b      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107936:	2300      	movs	r3, #0
 8107938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810793a:	e028      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810793c:	4b16      	ldr	r3, [pc, #88]	; (8107998 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810793e:	681b      	ldr	r3, [r3, #0]
 8107940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107944:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107948:	d107      	bne.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810794a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810794e:	4618      	mov	r0, r3
 8107950:	f000 fae4 	bl	8107f1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107956:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107958:	e019      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810795a:	2300      	movs	r3, #0
 810795c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810795e:	e016      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107960:	4b0d      	ldr	r3, [pc, #52]	; (8107998 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107962:	681b      	ldr	r3, [r3, #0]
 8107964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810796c:	d107      	bne.n	810797e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810796e:	f107 0318 	add.w	r3, r7, #24
 8107972:	4618      	mov	r0, r3
 8107974:	f000 f82a 	bl	81079cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107978:	69fb      	ldr	r3, [r7, #28]
 810797a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810797c:	e007      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810797e:	2300      	movs	r3, #0
 8107980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107982:	e004      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107984:	2300      	movs	r3, #0
 8107986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107988:	e001      	b.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 810798a:	2300      	movs	r3, #0
 810798c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 810798e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8107990:	4618      	mov	r0, r3
 8107992:	3740      	adds	r7, #64	; 0x40
 8107994:	46bd      	mov	sp, r7
 8107996:	bd80      	pop	{r7, pc}
 8107998:	58024400 	.word	0x58024400
 810799c:	007a1200 	.word	0x007a1200

081079a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81079a0:	b580      	push	{r7, lr}
 81079a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81079a4:	f7fe f814 	bl	81059d0 <HAL_RCC_GetHCLKFreq>
 81079a8:	4602      	mov	r2, r0
 81079aa:	4b06      	ldr	r3, [pc, #24]	; (81079c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81079ac:	6a1b      	ldr	r3, [r3, #32]
 81079ae:	091b      	lsrs	r3, r3, #4
 81079b0:	f003 0307 	and.w	r3, r3, #7
 81079b4:	4904      	ldr	r1, [pc, #16]	; (81079c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81079b6:	5ccb      	ldrb	r3, [r1, r3]
 81079b8:	f003 031f 	and.w	r3, r3, #31
 81079bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81079c0:	4618      	mov	r0, r3
 81079c2:	bd80      	pop	{r7, pc}
 81079c4:	58024400 	.word	0x58024400
 81079c8:	0810fb38 	.word	0x0810fb38

081079cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81079cc:	b480      	push	{r7}
 81079ce:	b089      	sub	sp, #36	; 0x24
 81079d0:	af00      	add	r7, sp, #0
 81079d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81079d4:	4ba1      	ldr	r3, [pc, #644]	; (8107c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81079d8:	f003 0303 	and.w	r3, r3, #3
 81079dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81079de:	4b9f      	ldr	r3, [pc, #636]	; (8107c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81079e2:	0b1b      	lsrs	r3, r3, #12
 81079e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81079e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81079ea:	4b9c      	ldr	r3, [pc, #624]	; (8107c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81079ee:	091b      	lsrs	r3, r3, #4
 81079f0:	f003 0301 	and.w	r3, r3, #1
 81079f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81079f6:	4b99      	ldr	r3, [pc, #612]	; (8107c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81079fa:	08db      	lsrs	r3, r3, #3
 81079fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107a00:	693a      	ldr	r2, [r7, #16]
 8107a02:	fb02 f303 	mul.w	r3, r2, r3
 8107a06:	ee07 3a90 	vmov	s15, r3
 8107a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8107a12:	697b      	ldr	r3, [r7, #20]
 8107a14:	2b00      	cmp	r3, #0
 8107a16:	f000 8111 	beq.w	8107c3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8107a1a:	69bb      	ldr	r3, [r7, #24]
 8107a1c:	2b02      	cmp	r3, #2
 8107a1e:	f000 8083 	beq.w	8107b28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8107a22:	69bb      	ldr	r3, [r7, #24]
 8107a24:	2b02      	cmp	r3, #2
 8107a26:	f200 80a1 	bhi.w	8107b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8107a2a:	69bb      	ldr	r3, [r7, #24]
 8107a2c:	2b00      	cmp	r3, #0
 8107a2e:	d003      	beq.n	8107a38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8107a30:	69bb      	ldr	r3, [r7, #24]
 8107a32:	2b01      	cmp	r3, #1
 8107a34:	d056      	beq.n	8107ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8107a36:	e099      	b.n	8107b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107a38:	4b88      	ldr	r3, [pc, #544]	; (8107c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a3a:	681b      	ldr	r3, [r3, #0]
 8107a3c:	f003 0320 	and.w	r3, r3, #32
 8107a40:	2b00      	cmp	r3, #0
 8107a42:	d02d      	beq.n	8107aa0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107a44:	4b85      	ldr	r3, [pc, #532]	; (8107c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a46:	681b      	ldr	r3, [r3, #0]
 8107a48:	08db      	lsrs	r3, r3, #3
 8107a4a:	f003 0303 	and.w	r3, r3, #3
 8107a4e:	4a84      	ldr	r2, [pc, #528]	; (8107c60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8107a50:	fa22 f303 	lsr.w	r3, r2, r3
 8107a54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107a56:	68bb      	ldr	r3, [r7, #8]
 8107a58:	ee07 3a90 	vmov	s15, r3
 8107a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a60:	697b      	ldr	r3, [r7, #20]
 8107a62:	ee07 3a90 	vmov	s15, r3
 8107a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a6e:	4b7b      	ldr	r3, [pc, #492]	; (8107c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a76:	ee07 3a90 	vmov	s15, r3
 8107a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a82:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107a9e:	e087      	b.n	8107bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107aa0:	697b      	ldr	r3, [r7, #20]
 8107aa2:	ee07 3a90 	vmov	s15, r3
 8107aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107aaa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107c68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8107aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107ab2:	4b6a      	ldr	r3, [pc, #424]	; (8107c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107aba:	ee07 3a90 	vmov	s15, r3
 8107abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8107ac6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107ae2:	e065      	b.n	8107bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107ae4:	697b      	ldr	r3, [r7, #20]
 8107ae6:	ee07 3a90 	vmov	s15, r3
 8107aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107aee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107af6:	4b59      	ldr	r3, [pc, #356]	; (8107c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107afe:	ee07 3a90 	vmov	s15, r3
 8107b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8107b0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107b26:	e043      	b.n	8107bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107b28:	697b      	ldr	r3, [r7, #20]
 8107b2a:	ee07 3a90 	vmov	s15, r3
 8107b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8107b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107b3a:	4b48      	ldr	r3, [pc, #288]	; (8107c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107b42:	ee07 3a90 	vmov	s15, r3
 8107b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8107b4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107b6a:	e021      	b.n	8107bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107b6c:	697b      	ldr	r3, [r7, #20]
 8107b6e:	ee07 3a90 	vmov	s15, r3
 8107b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107b7e:	4b37      	ldr	r3, [pc, #220]	; (8107c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107b86:	ee07 3a90 	vmov	s15, r3
 8107b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107b92:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107c64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107bae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8107bb0:	4b2a      	ldr	r3, [pc, #168]	; (8107c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bb4:	0a5b      	lsrs	r3, r3, #9
 8107bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107bba:	ee07 3a90 	vmov	s15, r3
 8107bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8107bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107bd6:	ee17 2a90 	vmov	r2, s15
 8107bda:	687b      	ldr	r3, [r7, #4]
 8107bdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8107bde:	4b1f      	ldr	r3, [pc, #124]	; (8107c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107be2:	0c1b      	lsrs	r3, r3, #16
 8107be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107be8:	ee07 3a90 	vmov	s15, r3
 8107bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107bf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107bf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8107bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107c04:	ee17 2a90 	vmov	r2, s15
 8107c08:	687b      	ldr	r3, [r7, #4]
 8107c0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8107c0c:	4b13      	ldr	r3, [pc, #76]	; (8107c5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c10:	0e1b      	lsrs	r3, r3, #24
 8107c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107c16:	ee07 3a90 	vmov	s15, r3
 8107c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107c1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107c22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107c26:	edd7 6a07 	vldr	s13, [r7, #28]
 8107c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107c32:	ee17 2a90 	vmov	r2, s15
 8107c36:	687b      	ldr	r3, [r7, #4]
 8107c38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8107c3a:	e008      	b.n	8107c4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107c3c:	687b      	ldr	r3, [r7, #4]
 8107c3e:	2200      	movs	r2, #0
 8107c40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8107c42:	687b      	ldr	r3, [r7, #4]
 8107c44:	2200      	movs	r2, #0
 8107c46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8107c48:	687b      	ldr	r3, [r7, #4]
 8107c4a:	2200      	movs	r2, #0
 8107c4c:	609a      	str	r2, [r3, #8]
}
 8107c4e:	bf00      	nop
 8107c50:	3724      	adds	r7, #36	; 0x24
 8107c52:	46bd      	mov	sp, r7
 8107c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c58:	4770      	bx	lr
 8107c5a:	bf00      	nop
 8107c5c:	58024400 	.word	0x58024400
 8107c60:	03d09000 	.word	0x03d09000
 8107c64:	46000000 	.word	0x46000000
 8107c68:	4c742400 	.word	0x4c742400
 8107c6c:	4a742400 	.word	0x4a742400
 8107c70:	4af42400 	.word	0x4af42400

08107c74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8107c74:	b480      	push	{r7}
 8107c76:	b089      	sub	sp, #36	; 0x24
 8107c78:	af00      	add	r7, sp, #0
 8107c7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107c7c:	4ba1      	ldr	r3, [pc, #644]	; (8107f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c80:	f003 0303 	and.w	r3, r3, #3
 8107c84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8107c86:	4b9f      	ldr	r3, [pc, #636]	; (8107f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c8a:	0d1b      	lsrs	r3, r3, #20
 8107c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107c90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8107c92:	4b9c      	ldr	r3, [pc, #624]	; (8107f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c96:	0a1b      	lsrs	r3, r3, #8
 8107c98:	f003 0301 	and.w	r3, r3, #1
 8107c9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8107c9e:	4b99      	ldr	r3, [pc, #612]	; (8107f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107ca2:	08db      	lsrs	r3, r3, #3
 8107ca4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107ca8:	693a      	ldr	r2, [r7, #16]
 8107caa:	fb02 f303 	mul.w	r3, r2, r3
 8107cae:	ee07 3a90 	vmov	s15, r3
 8107cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107cb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8107cba:	697b      	ldr	r3, [r7, #20]
 8107cbc:	2b00      	cmp	r3, #0
 8107cbe:	f000 8111 	beq.w	8107ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8107cc2:	69bb      	ldr	r3, [r7, #24]
 8107cc4:	2b02      	cmp	r3, #2
 8107cc6:	f000 8083 	beq.w	8107dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8107cca:	69bb      	ldr	r3, [r7, #24]
 8107ccc:	2b02      	cmp	r3, #2
 8107cce:	f200 80a1 	bhi.w	8107e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8107cd2:	69bb      	ldr	r3, [r7, #24]
 8107cd4:	2b00      	cmp	r3, #0
 8107cd6:	d003      	beq.n	8107ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8107cd8:	69bb      	ldr	r3, [r7, #24]
 8107cda:	2b01      	cmp	r3, #1
 8107cdc:	d056      	beq.n	8107d8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8107cde:	e099      	b.n	8107e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107ce0:	4b88      	ldr	r3, [pc, #544]	; (8107f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107ce2:	681b      	ldr	r3, [r3, #0]
 8107ce4:	f003 0320 	and.w	r3, r3, #32
 8107ce8:	2b00      	cmp	r3, #0
 8107cea:	d02d      	beq.n	8107d48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107cec:	4b85      	ldr	r3, [pc, #532]	; (8107f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107cee:	681b      	ldr	r3, [r3, #0]
 8107cf0:	08db      	lsrs	r3, r3, #3
 8107cf2:	f003 0303 	and.w	r3, r3, #3
 8107cf6:	4a84      	ldr	r2, [pc, #528]	; (8107f08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8107cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8107cfc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107cfe:	68bb      	ldr	r3, [r7, #8]
 8107d00:	ee07 3a90 	vmov	s15, r3
 8107d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d08:	697b      	ldr	r3, [r7, #20]
 8107d0a:	ee07 3a90 	vmov	s15, r3
 8107d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d16:	4b7b      	ldr	r3, [pc, #492]	; (8107f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d1e:	ee07 3a90 	vmov	s15, r3
 8107d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107d46:	e087      	b.n	8107e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107d48:	697b      	ldr	r3, [r7, #20]
 8107d4a:	ee07 3a90 	vmov	s15, r3
 8107d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107f10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8107d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d5a:	4b6a      	ldr	r3, [pc, #424]	; (8107f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d62:	ee07 3a90 	vmov	s15, r3
 8107d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107d8a:	e065      	b.n	8107e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107d8c:	697b      	ldr	r3, [r7, #20]
 8107d8e:	ee07 3a90 	vmov	s15, r3
 8107d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107f14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d9e:	4b59      	ldr	r3, [pc, #356]	; (8107f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107da6:	ee07 3a90 	vmov	s15, r3
 8107daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8107db2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107dce:	e043      	b.n	8107e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107dd0:	697b      	ldr	r3, [r7, #20]
 8107dd2:	ee07 3a90 	vmov	s15, r3
 8107dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107dda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107f18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8107dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107de2:	4b48      	ldr	r3, [pc, #288]	; (8107f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107dea:	ee07 3a90 	vmov	s15, r3
 8107dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8107df6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107e12:	e021      	b.n	8107e58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107e14:	697b      	ldr	r3, [r7, #20]
 8107e16:	ee07 3a90 	vmov	s15, r3
 8107e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107f14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107e26:	4b37      	ldr	r3, [pc, #220]	; (8107f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107e2e:	ee07 3a90 	vmov	s15, r3
 8107e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8107e3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107f0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107e56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8107e58:	4b2a      	ldr	r3, [pc, #168]	; (8107f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107e5c:	0a5b      	lsrs	r3, r3, #9
 8107e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107e62:	ee07 3a90 	vmov	s15, r3
 8107e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107e6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107e72:	edd7 6a07 	vldr	s13, [r7, #28]
 8107e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107e7e:	ee17 2a90 	vmov	r2, s15
 8107e82:	687b      	ldr	r3, [r7, #4]
 8107e84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8107e86:	4b1f      	ldr	r3, [pc, #124]	; (8107f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107e8a:	0c1b      	lsrs	r3, r3, #16
 8107e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107e90:	ee07 3a90 	vmov	s15, r3
 8107e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107e9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107ea0:	edd7 6a07 	vldr	s13, [r7, #28]
 8107ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107eac:	ee17 2a90 	vmov	r2, s15
 8107eb0:	687b      	ldr	r3, [r7, #4]
 8107eb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8107eb4:	4b13      	ldr	r3, [pc, #76]	; (8107f04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107eb8:	0e1b      	lsrs	r3, r3, #24
 8107eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107ebe:	ee07 3a90 	vmov	s15, r3
 8107ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107eca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107ece:	edd7 6a07 	vldr	s13, [r7, #28]
 8107ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107eda:	ee17 2a90 	vmov	r2, s15
 8107ede:	687b      	ldr	r3, [r7, #4]
 8107ee0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8107ee2:	e008      	b.n	8107ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8107ee4:	687b      	ldr	r3, [r7, #4]
 8107ee6:	2200      	movs	r2, #0
 8107ee8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8107eea:	687b      	ldr	r3, [r7, #4]
 8107eec:	2200      	movs	r2, #0
 8107eee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107ef0:	687b      	ldr	r3, [r7, #4]
 8107ef2:	2200      	movs	r2, #0
 8107ef4:	609a      	str	r2, [r3, #8]
}
 8107ef6:	bf00      	nop
 8107ef8:	3724      	adds	r7, #36	; 0x24
 8107efa:	46bd      	mov	sp, r7
 8107efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f00:	4770      	bx	lr
 8107f02:	bf00      	nop
 8107f04:	58024400 	.word	0x58024400
 8107f08:	03d09000 	.word	0x03d09000
 8107f0c:	46000000 	.word	0x46000000
 8107f10:	4c742400 	.word	0x4c742400
 8107f14:	4a742400 	.word	0x4a742400
 8107f18:	4af42400 	.word	0x4af42400

08107f1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8107f1c:	b480      	push	{r7}
 8107f1e:	b089      	sub	sp, #36	; 0x24
 8107f20:	af00      	add	r7, sp, #0
 8107f22:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107f24:	4ba0      	ldr	r3, [pc, #640]	; (81081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f28:	f003 0303 	and.w	r3, r3, #3
 8107f2c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8107f2e:	4b9e      	ldr	r3, [pc, #632]	; (81081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f32:	091b      	lsrs	r3, r3, #4
 8107f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107f38:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8107f3a:	4b9b      	ldr	r3, [pc, #620]	; (81081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107f3e:	f003 0301 	and.w	r3, r3, #1
 8107f42:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8107f44:	4b98      	ldr	r3, [pc, #608]	; (81081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107f48:	08db      	lsrs	r3, r3, #3
 8107f4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107f4e:	693a      	ldr	r2, [r7, #16]
 8107f50:	fb02 f303 	mul.w	r3, r2, r3
 8107f54:	ee07 3a90 	vmov	s15, r3
 8107f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f5c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8107f60:	697b      	ldr	r3, [r7, #20]
 8107f62:	2b00      	cmp	r3, #0
 8107f64:	f000 8111 	beq.w	810818a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8107f68:	69bb      	ldr	r3, [r7, #24]
 8107f6a:	2b02      	cmp	r3, #2
 8107f6c:	f000 8083 	beq.w	8108076 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8107f70:	69bb      	ldr	r3, [r7, #24]
 8107f72:	2b02      	cmp	r3, #2
 8107f74:	f200 80a1 	bhi.w	81080ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8107f78:	69bb      	ldr	r3, [r7, #24]
 8107f7a:	2b00      	cmp	r3, #0
 8107f7c:	d003      	beq.n	8107f86 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8107f7e:	69bb      	ldr	r3, [r7, #24]
 8107f80:	2b01      	cmp	r3, #1
 8107f82:	d056      	beq.n	8108032 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8107f84:	e099      	b.n	81080ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107f86:	4b88      	ldr	r3, [pc, #544]	; (81081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f88:	681b      	ldr	r3, [r3, #0]
 8107f8a:	f003 0320 	and.w	r3, r3, #32
 8107f8e:	2b00      	cmp	r3, #0
 8107f90:	d02d      	beq.n	8107fee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107f92:	4b85      	ldr	r3, [pc, #532]	; (81081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f94:	681b      	ldr	r3, [r3, #0]
 8107f96:	08db      	lsrs	r3, r3, #3
 8107f98:	f003 0303 	and.w	r3, r3, #3
 8107f9c:	4a83      	ldr	r2, [pc, #524]	; (81081ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8107f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8107fa2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107fa4:	68bb      	ldr	r3, [r7, #8]
 8107fa6:	ee07 3a90 	vmov	s15, r3
 8107faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107fae:	697b      	ldr	r3, [r7, #20]
 8107fb0:	ee07 3a90 	vmov	s15, r3
 8107fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107fb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107fbc:	4b7a      	ldr	r3, [pc, #488]	; (81081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107fc4:	ee07 3a90 	vmov	s15, r3
 8107fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107fcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8107fd0:	eddf 5a77 	vldr	s11, [pc, #476]	; 81081b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107fd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107fd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107fdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107fe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107fe8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107fec:	e087      	b.n	81080fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107fee:	697b      	ldr	r3, [r7, #20]
 8107ff0:	ee07 3a90 	vmov	s15, r3
 8107ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ff8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107ffc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108000:	4b69      	ldr	r3, [pc, #420]	; (81081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108008:	ee07 3a90 	vmov	s15, r3
 810800c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108010:	ed97 6a03 	vldr	s12, [r7, #12]
 8108014:	eddf 5a66 	vldr	s11, [pc, #408]	; 81081b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108018:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810801c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108020:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108024:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108028:	ee67 7a27 	vmul.f32	s15, s14, s15
 810802c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108030:	e065      	b.n	81080fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108032:	697b      	ldr	r3, [r7, #20]
 8108034:	ee07 3a90 	vmov	s15, r3
 8108038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810803c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81081b8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8108040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108044:	4b58      	ldr	r3, [pc, #352]	; (81081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810804c:	ee07 3a90 	vmov	s15, r3
 8108050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108054:	ed97 6a03 	vldr	s12, [r7, #12]
 8108058:	eddf 5a55 	vldr	s11, [pc, #340]	; 81081b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810805c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108060:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810806c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108070:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108074:	e043      	b.n	81080fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108076:	697b      	ldr	r3, [r7, #20]
 8108078:	ee07 3a90 	vmov	s15, r3
 810807c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108080:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81081bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8108084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108088:	4b47      	ldr	r3, [pc, #284]	; (81081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810808a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810808c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108090:	ee07 3a90 	vmov	s15, r3
 8108094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108098:	ed97 6a03 	vldr	s12, [r7, #12]
 810809c:	eddf 5a44 	vldr	s11, [pc, #272]	; 81081b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81080a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81080a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81080a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81080ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81080b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81080b8:	e021      	b.n	81080fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81080ba:	697b      	ldr	r3, [r7, #20]
 81080bc:	ee07 3a90 	vmov	s15, r3
 81080c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080c4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 81081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81080c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81080cc:	4b36      	ldr	r3, [pc, #216]	; (81081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81080ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81080d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81080d4:	ee07 3a90 	vmov	s15, r3
 81080d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81080dc:	ed97 6a03 	vldr	s12, [r7, #12]
 81080e0:	eddf 5a33 	vldr	s11, [pc, #204]	; 81081b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81080e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81080e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81080ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81080f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81080f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81080fc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81080fe:	4b2a      	ldr	r3, [pc, #168]	; (81081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108102:	0a5b      	lsrs	r3, r3, #9
 8108104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108108:	ee07 3a90 	vmov	s15, r3
 810810c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108114:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108118:	edd7 6a07 	vldr	s13, [r7, #28]
 810811c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108124:	ee17 2a90 	vmov	r2, s15
 8108128:	687b      	ldr	r3, [r7, #4]
 810812a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810812c:	4b1e      	ldr	r3, [pc, #120]	; (81081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810812e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108130:	0c1b      	lsrs	r3, r3, #16
 8108132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108136:	ee07 3a90 	vmov	s15, r3
 810813a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810813e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108142:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108146:	edd7 6a07 	vldr	s13, [r7, #28]
 810814a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810814e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108152:	ee17 2a90 	vmov	r2, s15
 8108156:	687b      	ldr	r3, [r7, #4]
 8108158:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810815a:	4b13      	ldr	r3, [pc, #76]	; (81081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810815c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810815e:	0e1b      	lsrs	r3, r3, #24
 8108160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108164:	ee07 3a90 	vmov	s15, r3
 8108168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810816c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108170:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108174:	edd7 6a07 	vldr	s13, [r7, #28]
 8108178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810817c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108180:	ee17 2a90 	vmov	r2, s15
 8108184:	687b      	ldr	r3, [r7, #4]
 8108186:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8108188:	e008      	b.n	810819c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810818a:	687b      	ldr	r3, [r7, #4]
 810818c:	2200      	movs	r2, #0
 810818e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8108190:	687b      	ldr	r3, [r7, #4]
 8108192:	2200      	movs	r2, #0
 8108194:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8108196:	687b      	ldr	r3, [r7, #4]
 8108198:	2200      	movs	r2, #0
 810819a:	609a      	str	r2, [r3, #8]
}
 810819c:	bf00      	nop
 810819e:	3724      	adds	r7, #36	; 0x24
 81081a0:	46bd      	mov	sp, r7
 81081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081a6:	4770      	bx	lr
 81081a8:	58024400 	.word	0x58024400
 81081ac:	03d09000 	.word	0x03d09000
 81081b0:	46000000 	.word	0x46000000
 81081b4:	4c742400 	.word	0x4c742400
 81081b8:	4a742400 	.word	0x4a742400
 81081bc:	4af42400 	.word	0x4af42400

081081c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81081c0:	b580      	push	{r7, lr}
 81081c2:	b084      	sub	sp, #16
 81081c4:	af00      	add	r7, sp, #0
 81081c6:	6078      	str	r0, [r7, #4]
 81081c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81081ca:	2300      	movs	r3, #0
 81081cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81081ce:	4b54      	ldr	r3, [pc, #336]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 81081d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81081d2:	f003 0303 	and.w	r3, r3, #3
 81081d6:	2b03      	cmp	r3, #3
 81081d8:	d101      	bne.n	81081de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81081da:	2301      	movs	r3, #1
 81081dc:	e09b      	b.n	8108316 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81081de:	4b50      	ldr	r3, [pc, #320]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 81081e0:	681b      	ldr	r3, [r3, #0]
 81081e2:	4a4f      	ldr	r2, [pc, #316]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 81081e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81081e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81081ea:	f7fa ff5d 	bl	81030a8 <HAL_GetTick>
 81081ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81081f0:	e008      	b.n	8108204 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81081f2:	f7fa ff59 	bl	81030a8 <HAL_GetTick>
 81081f6:	4602      	mov	r2, r0
 81081f8:	68bb      	ldr	r3, [r7, #8]
 81081fa:	1ad3      	subs	r3, r2, r3
 81081fc:	2b02      	cmp	r3, #2
 81081fe:	d901      	bls.n	8108204 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108200:	2303      	movs	r3, #3
 8108202:	e088      	b.n	8108316 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108204:	4b46      	ldr	r3, [pc, #280]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 8108206:	681b      	ldr	r3, [r3, #0]
 8108208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810820c:	2b00      	cmp	r3, #0
 810820e:	d1f0      	bne.n	81081f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8108210:	4b43      	ldr	r3, [pc, #268]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 8108212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108214:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8108218:	687b      	ldr	r3, [r7, #4]
 810821a:	681b      	ldr	r3, [r3, #0]
 810821c:	031b      	lsls	r3, r3, #12
 810821e:	4940      	ldr	r1, [pc, #256]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 8108220:	4313      	orrs	r3, r2
 8108222:	628b      	str	r3, [r1, #40]	; 0x28
 8108224:	687b      	ldr	r3, [r7, #4]
 8108226:	685b      	ldr	r3, [r3, #4]
 8108228:	3b01      	subs	r3, #1
 810822a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810822e:	687b      	ldr	r3, [r7, #4]
 8108230:	689b      	ldr	r3, [r3, #8]
 8108232:	3b01      	subs	r3, #1
 8108234:	025b      	lsls	r3, r3, #9
 8108236:	b29b      	uxth	r3, r3
 8108238:	431a      	orrs	r2, r3
 810823a:	687b      	ldr	r3, [r7, #4]
 810823c:	68db      	ldr	r3, [r3, #12]
 810823e:	3b01      	subs	r3, #1
 8108240:	041b      	lsls	r3, r3, #16
 8108242:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8108246:	431a      	orrs	r2, r3
 8108248:	687b      	ldr	r3, [r7, #4]
 810824a:	691b      	ldr	r3, [r3, #16]
 810824c:	3b01      	subs	r3, #1
 810824e:	061b      	lsls	r3, r3, #24
 8108250:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8108254:	4932      	ldr	r1, [pc, #200]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 8108256:	4313      	orrs	r3, r2
 8108258:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810825a:	4b31      	ldr	r3, [pc, #196]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 810825c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810825e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8108262:	687b      	ldr	r3, [r7, #4]
 8108264:	695b      	ldr	r3, [r3, #20]
 8108266:	492e      	ldr	r1, [pc, #184]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 8108268:	4313      	orrs	r3, r2
 810826a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810826c:	4b2c      	ldr	r3, [pc, #176]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 810826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108270:	f023 0220 	bic.w	r2, r3, #32
 8108274:	687b      	ldr	r3, [r7, #4]
 8108276:	699b      	ldr	r3, [r3, #24]
 8108278:	4929      	ldr	r1, [pc, #164]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 810827a:	4313      	orrs	r3, r2
 810827c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810827e:	4b28      	ldr	r3, [pc, #160]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 8108280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108282:	4a27      	ldr	r2, [pc, #156]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 8108284:	f023 0310 	bic.w	r3, r3, #16
 8108288:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810828a:	4b25      	ldr	r3, [pc, #148]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 810828c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810828e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8108292:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8108296:	687a      	ldr	r2, [r7, #4]
 8108298:	69d2      	ldr	r2, [r2, #28]
 810829a:	00d2      	lsls	r2, r2, #3
 810829c:	4920      	ldr	r1, [pc, #128]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 810829e:	4313      	orrs	r3, r2
 81082a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81082a2:	4b1f      	ldr	r3, [pc, #124]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 81082a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81082a6:	4a1e      	ldr	r2, [pc, #120]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 81082a8:	f043 0310 	orr.w	r3, r3, #16
 81082ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81082ae:	683b      	ldr	r3, [r7, #0]
 81082b0:	2b00      	cmp	r3, #0
 81082b2:	d106      	bne.n	81082c2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81082b4:	4b1a      	ldr	r3, [pc, #104]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 81082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81082b8:	4a19      	ldr	r2, [pc, #100]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 81082ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81082be:	62d3      	str	r3, [r2, #44]	; 0x2c
 81082c0:	e00f      	b.n	81082e2 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81082c2:	683b      	ldr	r3, [r7, #0]
 81082c4:	2b01      	cmp	r3, #1
 81082c6:	d106      	bne.n	81082d6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81082c8:	4b15      	ldr	r3, [pc, #84]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 81082ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81082cc:	4a14      	ldr	r2, [pc, #80]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 81082ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81082d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81082d4:	e005      	b.n	81082e2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81082d6:	4b12      	ldr	r3, [pc, #72]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 81082d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81082da:	4a11      	ldr	r2, [pc, #68]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 81082dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81082e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81082e2:	4b0f      	ldr	r3, [pc, #60]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 81082e4:	681b      	ldr	r3, [r3, #0]
 81082e6:	4a0e      	ldr	r2, [pc, #56]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 81082e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81082ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81082ee:	f7fa fedb 	bl	81030a8 <HAL_GetTick>
 81082f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81082f4:	e008      	b.n	8108308 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81082f6:	f7fa fed7 	bl	81030a8 <HAL_GetTick>
 81082fa:	4602      	mov	r2, r0
 81082fc:	68bb      	ldr	r3, [r7, #8]
 81082fe:	1ad3      	subs	r3, r2, r3
 8108300:	2b02      	cmp	r3, #2
 8108302:	d901      	bls.n	8108308 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108304:	2303      	movs	r3, #3
 8108306:	e006      	b.n	8108316 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108308:	4b05      	ldr	r3, [pc, #20]	; (8108320 <RCCEx_PLL2_Config+0x160>)
 810830a:	681b      	ldr	r3, [r3, #0]
 810830c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108310:	2b00      	cmp	r3, #0
 8108312:	d0f0      	beq.n	81082f6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8108314:	7bfb      	ldrb	r3, [r7, #15]
}
 8108316:	4618      	mov	r0, r3
 8108318:	3710      	adds	r7, #16
 810831a:	46bd      	mov	sp, r7
 810831c:	bd80      	pop	{r7, pc}
 810831e:	bf00      	nop
 8108320:	58024400 	.word	0x58024400

08108324 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8108324:	b580      	push	{r7, lr}
 8108326:	b084      	sub	sp, #16
 8108328:	af00      	add	r7, sp, #0
 810832a:	6078      	str	r0, [r7, #4]
 810832c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810832e:	2300      	movs	r3, #0
 8108330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108332:	4b54      	ldr	r3, [pc, #336]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 8108334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108336:	f003 0303 	and.w	r3, r3, #3
 810833a:	2b03      	cmp	r3, #3
 810833c:	d101      	bne.n	8108342 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810833e:	2301      	movs	r3, #1
 8108340:	e09b      	b.n	810847a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8108342:	4b50      	ldr	r3, [pc, #320]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 8108344:	681b      	ldr	r3, [r3, #0]
 8108346:	4a4f      	ldr	r2, [pc, #316]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 8108348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810834c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810834e:	f7fa feab 	bl	81030a8 <HAL_GetTick>
 8108352:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108354:	e008      	b.n	8108368 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108356:	f7fa fea7 	bl	81030a8 <HAL_GetTick>
 810835a:	4602      	mov	r2, r0
 810835c:	68bb      	ldr	r3, [r7, #8]
 810835e:	1ad3      	subs	r3, r2, r3
 8108360:	2b02      	cmp	r3, #2
 8108362:	d901      	bls.n	8108368 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108364:	2303      	movs	r3, #3
 8108366:	e088      	b.n	810847a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108368:	4b46      	ldr	r3, [pc, #280]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 810836a:	681b      	ldr	r3, [r3, #0]
 810836c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108370:	2b00      	cmp	r3, #0
 8108372:	d1f0      	bne.n	8108356 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8108374:	4b43      	ldr	r3, [pc, #268]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 8108376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108378:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810837c:	687b      	ldr	r3, [r7, #4]
 810837e:	681b      	ldr	r3, [r3, #0]
 8108380:	051b      	lsls	r3, r3, #20
 8108382:	4940      	ldr	r1, [pc, #256]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 8108384:	4313      	orrs	r3, r2
 8108386:	628b      	str	r3, [r1, #40]	; 0x28
 8108388:	687b      	ldr	r3, [r7, #4]
 810838a:	685b      	ldr	r3, [r3, #4]
 810838c:	3b01      	subs	r3, #1
 810838e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108392:	687b      	ldr	r3, [r7, #4]
 8108394:	689b      	ldr	r3, [r3, #8]
 8108396:	3b01      	subs	r3, #1
 8108398:	025b      	lsls	r3, r3, #9
 810839a:	b29b      	uxth	r3, r3
 810839c:	431a      	orrs	r2, r3
 810839e:	687b      	ldr	r3, [r7, #4]
 81083a0:	68db      	ldr	r3, [r3, #12]
 81083a2:	3b01      	subs	r3, #1
 81083a4:	041b      	lsls	r3, r3, #16
 81083a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81083aa:	431a      	orrs	r2, r3
 81083ac:	687b      	ldr	r3, [r7, #4]
 81083ae:	691b      	ldr	r3, [r3, #16]
 81083b0:	3b01      	subs	r3, #1
 81083b2:	061b      	lsls	r3, r3, #24
 81083b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81083b8:	4932      	ldr	r1, [pc, #200]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 81083ba:	4313      	orrs	r3, r2
 81083bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81083be:	4b31      	ldr	r3, [pc, #196]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 81083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81083c6:	687b      	ldr	r3, [r7, #4]
 81083c8:	695b      	ldr	r3, [r3, #20]
 81083ca:	492e      	ldr	r1, [pc, #184]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 81083cc:	4313      	orrs	r3, r2
 81083ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81083d0:	4b2c      	ldr	r3, [pc, #176]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 81083d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81083d8:	687b      	ldr	r3, [r7, #4]
 81083da:	699b      	ldr	r3, [r3, #24]
 81083dc:	4929      	ldr	r1, [pc, #164]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 81083de:	4313      	orrs	r3, r2
 81083e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81083e2:	4b28      	ldr	r3, [pc, #160]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 81083e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083e6:	4a27      	ldr	r2, [pc, #156]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 81083e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81083ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81083ee:	4b25      	ldr	r3, [pc, #148]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 81083f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81083f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81083f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81083fa:	687a      	ldr	r2, [r7, #4]
 81083fc:	69d2      	ldr	r2, [r2, #28]
 81083fe:	00d2      	lsls	r2, r2, #3
 8108400:	4920      	ldr	r1, [pc, #128]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 8108402:	4313      	orrs	r3, r2
 8108404:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8108406:	4b1f      	ldr	r3, [pc, #124]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 8108408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810840a:	4a1e      	ldr	r2, [pc, #120]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 810840c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8108410:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108412:	683b      	ldr	r3, [r7, #0]
 8108414:	2b00      	cmp	r3, #0
 8108416:	d106      	bne.n	8108426 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8108418:	4b1a      	ldr	r3, [pc, #104]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 810841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810841c:	4a19      	ldr	r2, [pc, #100]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 810841e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8108422:	62d3      	str	r3, [r2, #44]	; 0x2c
 8108424:	e00f      	b.n	8108446 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108426:	683b      	ldr	r3, [r7, #0]
 8108428:	2b01      	cmp	r3, #1
 810842a:	d106      	bne.n	810843a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810842c:	4b15      	ldr	r3, [pc, #84]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 810842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108430:	4a14      	ldr	r2, [pc, #80]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 8108432:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8108436:	62d3      	str	r3, [r2, #44]	; 0x2c
 8108438:	e005      	b.n	8108446 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810843a:	4b12      	ldr	r3, [pc, #72]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 810843c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810843e:	4a11      	ldr	r2, [pc, #68]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 8108440:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8108444:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8108446:	4b0f      	ldr	r3, [pc, #60]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 8108448:	681b      	ldr	r3, [r3, #0]
 810844a:	4a0e      	ldr	r2, [pc, #56]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 810844c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8108450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108452:	f7fa fe29 	bl	81030a8 <HAL_GetTick>
 8108456:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108458:	e008      	b.n	810846c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810845a:	f7fa fe25 	bl	81030a8 <HAL_GetTick>
 810845e:	4602      	mov	r2, r0
 8108460:	68bb      	ldr	r3, [r7, #8]
 8108462:	1ad3      	subs	r3, r2, r3
 8108464:	2b02      	cmp	r3, #2
 8108466:	d901      	bls.n	810846c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108468:	2303      	movs	r3, #3
 810846a:	e006      	b.n	810847a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810846c:	4b05      	ldr	r3, [pc, #20]	; (8108484 <RCCEx_PLL3_Config+0x160>)
 810846e:	681b      	ldr	r3, [r3, #0]
 8108470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108474:	2b00      	cmp	r3, #0
 8108476:	d0f0      	beq.n	810845a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8108478:	7bfb      	ldrb	r3, [r7, #15]
}
 810847a:	4618      	mov	r0, r3
 810847c:	3710      	adds	r7, #16
 810847e:	46bd      	mov	sp, r7
 8108480:	bd80      	pop	{r7, pc}
 8108482:	bf00      	nop
 8108484:	58024400 	.word	0x58024400

08108488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8108488:	b580      	push	{r7, lr}
 810848a:	b082      	sub	sp, #8
 810848c:	af00      	add	r7, sp, #0
 810848e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8108490:	687b      	ldr	r3, [r7, #4]
 8108492:	2b00      	cmp	r3, #0
 8108494:	d101      	bne.n	810849a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8108496:	2301      	movs	r3, #1
 8108498:	e049      	b.n	810852e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810849a:	687b      	ldr	r3, [r7, #4]
 810849c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81084a0:	b2db      	uxtb	r3, r3
 81084a2:	2b00      	cmp	r3, #0
 81084a4:	d106      	bne.n	81084b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81084a6:	687b      	ldr	r3, [r7, #4]
 81084a8:	2200      	movs	r2, #0
 81084aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81084ae:	6878      	ldr	r0, [r7, #4]
 81084b0:	f7fa fb00 	bl	8102ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81084b4:	687b      	ldr	r3, [r7, #4]
 81084b6:	2202      	movs	r2, #2
 81084b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	681a      	ldr	r2, [r3, #0]
 81084c0:	687b      	ldr	r3, [r7, #4]
 81084c2:	3304      	adds	r3, #4
 81084c4:	4619      	mov	r1, r3
 81084c6:	4610      	mov	r0, r2
 81084c8:	f000 fe18 	bl	81090fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81084cc:	687b      	ldr	r3, [r7, #4]
 81084ce:	2201      	movs	r2, #1
 81084d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81084d4:	687b      	ldr	r3, [r7, #4]
 81084d6:	2201      	movs	r2, #1
 81084d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81084dc:	687b      	ldr	r3, [r7, #4]
 81084de:	2201      	movs	r2, #1
 81084e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81084e4:	687b      	ldr	r3, [r7, #4]
 81084e6:	2201      	movs	r2, #1
 81084e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81084ec:	687b      	ldr	r3, [r7, #4]
 81084ee:	2201      	movs	r2, #1
 81084f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81084f4:	687b      	ldr	r3, [r7, #4]
 81084f6:	2201      	movs	r2, #1
 81084f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81084fc:	687b      	ldr	r3, [r7, #4]
 81084fe:	2201      	movs	r2, #1
 8108500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8108504:	687b      	ldr	r3, [r7, #4]
 8108506:	2201      	movs	r2, #1
 8108508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810850c:	687b      	ldr	r3, [r7, #4]
 810850e:	2201      	movs	r2, #1
 8108510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8108514:	687b      	ldr	r3, [r7, #4]
 8108516:	2201      	movs	r2, #1
 8108518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810851c:	687b      	ldr	r3, [r7, #4]
 810851e:	2201      	movs	r2, #1
 8108520:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8108524:	687b      	ldr	r3, [r7, #4]
 8108526:	2201      	movs	r2, #1
 8108528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810852c:	2300      	movs	r3, #0
}
 810852e:	4618      	mov	r0, r3
 8108530:	3708      	adds	r7, #8
 8108532:	46bd      	mov	sp, r7
 8108534:	bd80      	pop	{r7, pc}
	...

08108538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8108538:	b480      	push	{r7}
 810853a:	b085      	sub	sp, #20
 810853c:	af00      	add	r7, sp, #0
 810853e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8108540:	687b      	ldr	r3, [r7, #4]
 8108542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8108546:	b2db      	uxtb	r3, r3
 8108548:	2b01      	cmp	r3, #1
 810854a:	d001      	beq.n	8108550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810854c:	2301      	movs	r3, #1
 810854e:	e054      	b.n	81085fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108550:	687b      	ldr	r3, [r7, #4]
 8108552:	2202      	movs	r2, #2
 8108554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8108558:	687b      	ldr	r3, [r7, #4]
 810855a:	681b      	ldr	r3, [r3, #0]
 810855c:	68da      	ldr	r2, [r3, #12]
 810855e:	687b      	ldr	r3, [r7, #4]
 8108560:	681b      	ldr	r3, [r3, #0]
 8108562:	f042 0201 	orr.w	r2, r2, #1
 8108566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108568:	687b      	ldr	r3, [r7, #4]
 810856a:	681b      	ldr	r3, [r3, #0]
 810856c:	4a26      	ldr	r2, [pc, #152]	; (8108608 <HAL_TIM_Base_Start_IT+0xd0>)
 810856e:	4293      	cmp	r3, r2
 8108570:	d022      	beq.n	81085b8 <HAL_TIM_Base_Start_IT+0x80>
 8108572:	687b      	ldr	r3, [r7, #4]
 8108574:	681b      	ldr	r3, [r3, #0]
 8108576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810857a:	d01d      	beq.n	81085b8 <HAL_TIM_Base_Start_IT+0x80>
 810857c:	687b      	ldr	r3, [r7, #4]
 810857e:	681b      	ldr	r3, [r3, #0]
 8108580:	4a22      	ldr	r2, [pc, #136]	; (810860c <HAL_TIM_Base_Start_IT+0xd4>)
 8108582:	4293      	cmp	r3, r2
 8108584:	d018      	beq.n	81085b8 <HAL_TIM_Base_Start_IT+0x80>
 8108586:	687b      	ldr	r3, [r7, #4]
 8108588:	681b      	ldr	r3, [r3, #0]
 810858a:	4a21      	ldr	r2, [pc, #132]	; (8108610 <HAL_TIM_Base_Start_IT+0xd8>)
 810858c:	4293      	cmp	r3, r2
 810858e:	d013      	beq.n	81085b8 <HAL_TIM_Base_Start_IT+0x80>
 8108590:	687b      	ldr	r3, [r7, #4]
 8108592:	681b      	ldr	r3, [r3, #0]
 8108594:	4a1f      	ldr	r2, [pc, #124]	; (8108614 <HAL_TIM_Base_Start_IT+0xdc>)
 8108596:	4293      	cmp	r3, r2
 8108598:	d00e      	beq.n	81085b8 <HAL_TIM_Base_Start_IT+0x80>
 810859a:	687b      	ldr	r3, [r7, #4]
 810859c:	681b      	ldr	r3, [r3, #0]
 810859e:	4a1e      	ldr	r2, [pc, #120]	; (8108618 <HAL_TIM_Base_Start_IT+0xe0>)
 81085a0:	4293      	cmp	r3, r2
 81085a2:	d009      	beq.n	81085b8 <HAL_TIM_Base_Start_IT+0x80>
 81085a4:	687b      	ldr	r3, [r7, #4]
 81085a6:	681b      	ldr	r3, [r3, #0]
 81085a8:	4a1c      	ldr	r2, [pc, #112]	; (810861c <HAL_TIM_Base_Start_IT+0xe4>)
 81085aa:	4293      	cmp	r3, r2
 81085ac:	d004      	beq.n	81085b8 <HAL_TIM_Base_Start_IT+0x80>
 81085ae:	687b      	ldr	r3, [r7, #4]
 81085b0:	681b      	ldr	r3, [r3, #0]
 81085b2:	4a1b      	ldr	r2, [pc, #108]	; (8108620 <HAL_TIM_Base_Start_IT+0xe8>)
 81085b4:	4293      	cmp	r3, r2
 81085b6:	d115      	bne.n	81085e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81085b8:	687b      	ldr	r3, [r7, #4]
 81085ba:	681b      	ldr	r3, [r3, #0]
 81085bc:	689a      	ldr	r2, [r3, #8]
 81085be:	4b19      	ldr	r3, [pc, #100]	; (8108624 <HAL_TIM_Base_Start_IT+0xec>)
 81085c0:	4013      	ands	r3, r2
 81085c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81085c4:	68fb      	ldr	r3, [r7, #12]
 81085c6:	2b06      	cmp	r3, #6
 81085c8:	d015      	beq.n	81085f6 <HAL_TIM_Base_Start_IT+0xbe>
 81085ca:	68fb      	ldr	r3, [r7, #12]
 81085cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81085d0:	d011      	beq.n	81085f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81085d2:	687b      	ldr	r3, [r7, #4]
 81085d4:	681b      	ldr	r3, [r3, #0]
 81085d6:	681a      	ldr	r2, [r3, #0]
 81085d8:	687b      	ldr	r3, [r7, #4]
 81085da:	681b      	ldr	r3, [r3, #0]
 81085dc:	f042 0201 	orr.w	r2, r2, #1
 81085e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81085e2:	e008      	b.n	81085f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81085e4:	687b      	ldr	r3, [r7, #4]
 81085e6:	681b      	ldr	r3, [r3, #0]
 81085e8:	681a      	ldr	r2, [r3, #0]
 81085ea:	687b      	ldr	r3, [r7, #4]
 81085ec:	681b      	ldr	r3, [r3, #0]
 81085ee:	f042 0201 	orr.w	r2, r2, #1
 81085f2:	601a      	str	r2, [r3, #0]
 81085f4:	e000      	b.n	81085f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81085f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81085f8:	2300      	movs	r3, #0
}
 81085fa:	4618      	mov	r0, r3
 81085fc:	3714      	adds	r7, #20
 81085fe:	46bd      	mov	sp, r7
 8108600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108604:	4770      	bx	lr
 8108606:	bf00      	nop
 8108608:	40010000 	.word	0x40010000
 810860c:	40000400 	.word	0x40000400
 8108610:	40000800 	.word	0x40000800
 8108614:	40000c00 	.word	0x40000c00
 8108618:	40010400 	.word	0x40010400
 810861c:	40001800 	.word	0x40001800
 8108620:	40014000 	.word	0x40014000
 8108624:	00010007 	.word	0x00010007

08108628 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8108628:	b580      	push	{r7, lr}
 810862a:	b082      	sub	sp, #8
 810862c:	af00      	add	r7, sp, #0
 810862e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8108630:	687b      	ldr	r3, [r7, #4]
 8108632:	2b00      	cmp	r3, #0
 8108634:	d101      	bne.n	810863a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8108636:	2301      	movs	r3, #1
 8108638:	e049      	b.n	81086ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810863a:	687b      	ldr	r3, [r7, #4]
 810863c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8108640:	b2db      	uxtb	r3, r3
 8108642:	2b00      	cmp	r3, #0
 8108644:	d106      	bne.n	8108654 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8108646:	687b      	ldr	r3, [r7, #4]
 8108648:	2200      	movs	r2, #0
 810864a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810864e:	6878      	ldr	r0, [r7, #4]
 8108650:	f000 f841 	bl	81086d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108654:	687b      	ldr	r3, [r7, #4]
 8108656:	2202      	movs	r2, #2
 8108658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810865c:	687b      	ldr	r3, [r7, #4]
 810865e:	681a      	ldr	r2, [r3, #0]
 8108660:	687b      	ldr	r3, [r7, #4]
 8108662:	3304      	adds	r3, #4
 8108664:	4619      	mov	r1, r3
 8108666:	4610      	mov	r0, r2
 8108668:	f000 fd48 	bl	81090fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810866c:	687b      	ldr	r3, [r7, #4]
 810866e:	2201      	movs	r2, #1
 8108670:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8108674:	687b      	ldr	r3, [r7, #4]
 8108676:	2201      	movs	r2, #1
 8108678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810867c:	687b      	ldr	r3, [r7, #4]
 810867e:	2201      	movs	r2, #1
 8108680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8108684:	687b      	ldr	r3, [r7, #4]
 8108686:	2201      	movs	r2, #1
 8108688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810868c:	687b      	ldr	r3, [r7, #4]
 810868e:	2201      	movs	r2, #1
 8108690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8108694:	687b      	ldr	r3, [r7, #4]
 8108696:	2201      	movs	r2, #1
 8108698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810869c:	687b      	ldr	r3, [r7, #4]
 810869e:	2201      	movs	r2, #1
 81086a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81086a4:	687b      	ldr	r3, [r7, #4]
 81086a6:	2201      	movs	r2, #1
 81086a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81086ac:	687b      	ldr	r3, [r7, #4]
 81086ae:	2201      	movs	r2, #1
 81086b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81086b4:	687b      	ldr	r3, [r7, #4]
 81086b6:	2201      	movs	r2, #1
 81086b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81086bc:	687b      	ldr	r3, [r7, #4]
 81086be:	2201      	movs	r2, #1
 81086c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81086c4:	687b      	ldr	r3, [r7, #4]
 81086c6:	2201      	movs	r2, #1
 81086c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81086cc:	2300      	movs	r3, #0
}
 81086ce:	4618      	mov	r0, r3
 81086d0:	3708      	adds	r7, #8
 81086d2:	46bd      	mov	sp, r7
 81086d4:	bd80      	pop	{r7, pc}

081086d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 81086d6:	b480      	push	{r7}
 81086d8:	b083      	sub	sp, #12
 81086da:	af00      	add	r7, sp, #0
 81086dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 81086de:	bf00      	nop
 81086e0:	370c      	adds	r7, #12
 81086e2:	46bd      	mov	sp, r7
 81086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086e8:	4770      	bx	lr
	...

081086ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81086ec:	b580      	push	{r7, lr}
 81086ee:	b084      	sub	sp, #16
 81086f0:	af00      	add	r7, sp, #0
 81086f2:	6078      	str	r0, [r7, #4]
 81086f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 81086f6:	683b      	ldr	r3, [r7, #0]
 81086f8:	2b00      	cmp	r3, #0
 81086fa:	d109      	bne.n	8108710 <HAL_TIM_PWM_Start+0x24>
 81086fc:	687b      	ldr	r3, [r7, #4]
 81086fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8108702:	b2db      	uxtb	r3, r3
 8108704:	2b01      	cmp	r3, #1
 8108706:	bf14      	ite	ne
 8108708:	2301      	movne	r3, #1
 810870a:	2300      	moveq	r3, #0
 810870c:	b2db      	uxtb	r3, r3
 810870e:	e03c      	b.n	810878a <HAL_TIM_PWM_Start+0x9e>
 8108710:	683b      	ldr	r3, [r7, #0]
 8108712:	2b04      	cmp	r3, #4
 8108714:	d109      	bne.n	810872a <HAL_TIM_PWM_Start+0x3e>
 8108716:	687b      	ldr	r3, [r7, #4]
 8108718:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 810871c:	b2db      	uxtb	r3, r3
 810871e:	2b01      	cmp	r3, #1
 8108720:	bf14      	ite	ne
 8108722:	2301      	movne	r3, #1
 8108724:	2300      	moveq	r3, #0
 8108726:	b2db      	uxtb	r3, r3
 8108728:	e02f      	b.n	810878a <HAL_TIM_PWM_Start+0x9e>
 810872a:	683b      	ldr	r3, [r7, #0]
 810872c:	2b08      	cmp	r3, #8
 810872e:	d109      	bne.n	8108744 <HAL_TIM_PWM_Start+0x58>
 8108730:	687b      	ldr	r3, [r7, #4]
 8108732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108736:	b2db      	uxtb	r3, r3
 8108738:	2b01      	cmp	r3, #1
 810873a:	bf14      	ite	ne
 810873c:	2301      	movne	r3, #1
 810873e:	2300      	moveq	r3, #0
 8108740:	b2db      	uxtb	r3, r3
 8108742:	e022      	b.n	810878a <HAL_TIM_PWM_Start+0x9e>
 8108744:	683b      	ldr	r3, [r7, #0]
 8108746:	2b0c      	cmp	r3, #12
 8108748:	d109      	bne.n	810875e <HAL_TIM_PWM_Start+0x72>
 810874a:	687b      	ldr	r3, [r7, #4]
 810874c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108750:	b2db      	uxtb	r3, r3
 8108752:	2b01      	cmp	r3, #1
 8108754:	bf14      	ite	ne
 8108756:	2301      	movne	r3, #1
 8108758:	2300      	moveq	r3, #0
 810875a:	b2db      	uxtb	r3, r3
 810875c:	e015      	b.n	810878a <HAL_TIM_PWM_Start+0x9e>
 810875e:	683b      	ldr	r3, [r7, #0]
 8108760:	2b10      	cmp	r3, #16
 8108762:	d109      	bne.n	8108778 <HAL_TIM_PWM_Start+0x8c>
 8108764:	687b      	ldr	r3, [r7, #4]
 8108766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810876a:	b2db      	uxtb	r3, r3
 810876c:	2b01      	cmp	r3, #1
 810876e:	bf14      	ite	ne
 8108770:	2301      	movne	r3, #1
 8108772:	2300      	moveq	r3, #0
 8108774:	b2db      	uxtb	r3, r3
 8108776:	e008      	b.n	810878a <HAL_TIM_PWM_Start+0x9e>
 8108778:	687b      	ldr	r3, [r7, #4]
 810877a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 810877e:	b2db      	uxtb	r3, r3
 8108780:	2b01      	cmp	r3, #1
 8108782:	bf14      	ite	ne
 8108784:	2301      	movne	r3, #1
 8108786:	2300      	moveq	r3, #0
 8108788:	b2db      	uxtb	r3, r3
 810878a:	2b00      	cmp	r3, #0
 810878c:	d001      	beq.n	8108792 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 810878e:	2301      	movs	r3, #1
 8108790:	e0a1      	b.n	81088d6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8108792:	683b      	ldr	r3, [r7, #0]
 8108794:	2b00      	cmp	r3, #0
 8108796:	d104      	bne.n	81087a2 <HAL_TIM_PWM_Start+0xb6>
 8108798:	687b      	ldr	r3, [r7, #4]
 810879a:	2202      	movs	r2, #2
 810879c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81087a0:	e023      	b.n	81087ea <HAL_TIM_PWM_Start+0xfe>
 81087a2:	683b      	ldr	r3, [r7, #0]
 81087a4:	2b04      	cmp	r3, #4
 81087a6:	d104      	bne.n	81087b2 <HAL_TIM_PWM_Start+0xc6>
 81087a8:	687b      	ldr	r3, [r7, #4]
 81087aa:	2202      	movs	r2, #2
 81087ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81087b0:	e01b      	b.n	81087ea <HAL_TIM_PWM_Start+0xfe>
 81087b2:	683b      	ldr	r3, [r7, #0]
 81087b4:	2b08      	cmp	r3, #8
 81087b6:	d104      	bne.n	81087c2 <HAL_TIM_PWM_Start+0xd6>
 81087b8:	687b      	ldr	r3, [r7, #4]
 81087ba:	2202      	movs	r2, #2
 81087bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81087c0:	e013      	b.n	81087ea <HAL_TIM_PWM_Start+0xfe>
 81087c2:	683b      	ldr	r3, [r7, #0]
 81087c4:	2b0c      	cmp	r3, #12
 81087c6:	d104      	bne.n	81087d2 <HAL_TIM_PWM_Start+0xe6>
 81087c8:	687b      	ldr	r3, [r7, #4]
 81087ca:	2202      	movs	r2, #2
 81087cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81087d0:	e00b      	b.n	81087ea <HAL_TIM_PWM_Start+0xfe>
 81087d2:	683b      	ldr	r3, [r7, #0]
 81087d4:	2b10      	cmp	r3, #16
 81087d6:	d104      	bne.n	81087e2 <HAL_TIM_PWM_Start+0xf6>
 81087d8:	687b      	ldr	r3, [r7, #4]
 81087da:	2202      	movs	r2, #2
 81087dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81087e0:	e003      	b.n	81087ea <HAL_TIM_PWM_Start+0xfe>
 81087e2:	687b      	ldr	r3, [r7, #4]
 81087e4:	2202      	movs	r2, #2
 81087e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 81087ea:	687b      	ldr	r3, [r7, #4]
 81087ec:	681b      	ldr	r3, [r3, #0]
 81087ee:	2201      	movs	r2, #1
 81087f0:	6839      	ldr	r1, [r7, #0]
 81087f2:	4618      	mov	r0, r3
 81087f4:	f001 f88e 	bl	8109914 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 81087f8:	687b      	ldr	r3, [r7, #4]
 81087fa:	681b      	ldr	r3, [r3, #0]
 81087fc:	4a38      	ldr	r2, [pc, #224]	; (81088e0 <HAL_TIM_PWM_Start+0x1f4>)
 81087fe:	4293      	cmp	r3, r2
 8108800:	d013      	beq.n	810882a <HAL_TIM_PWM_Start+0x13e>
 8108802:	687b      	ldr	r3, [r7, #4]
 8108804:	681b      	ldr	r3, [r3, #0]
 8108806:	4a37      	ldr	r2, [pc, #220]	; (81088e4 <HAL_TIM_PWM_Start+0x1f8>)
 8108808:	4293      	cmp	r3, r2
 810880a:	d00e      	beq.n	810882a <HAL_TIM_PWM_Start+0x13e>
 810880c:	687b      	ldr	r3, [r7, #4]
 810880e:	681b      	ldr	r3, [r3, #0]
 8108810:	4a35      	ldr	r2, [pc, #212]	; (81088e8 <HAL_TIM_PWM_Start+0x1fc>)
 8108812:	4293      	cmp	r3, r2
 8108814:	d009      	beq.n	810882a <HAL_TIM_PWM_Start+0x13e>
 8108816:	687b      	ldr	r3, [r7, #4]
 8108818:	681b      	ldr	r3, [r3, #0]
 810881a:	4a34      	ldr	r2, [pc, #208]	; (81088ec <HAL_TIM_PWM_Start+0x200>)
 810881c:	4293      	cmp	r3, r2
 810881e:	d004      	beq.n	810882a <HAL_TIM_PWM_Start+0x13e>
 8108820:	687b      	ldr	r3, [r7, #4]
 8108822:	681b      	ldr	r3, [r3, #0]
 8108824:	4a32      	ldr	r2, [pc, #200]	; (81088f0 <HAL_TIM_PWM_Start+0x204>)
 8108826:	4293      	cmp	r3, r2
 8108828:	d101      	bne.n	810882e <HAL_TIM_PWM_Start+0x142>
 810882a:	2301      	movs	r3, #1
 810882c:	e000      	b.n	8108830 <HAL_TIM_PWM_Start+0x144>
 810882e:	2300      	movs	r3, #0
 8108830:	2b00      	cmp	r3, #0
 8108832:	d007      	beq.n	8108844 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8108834:	687b      	ldr	r3, [r7, #4]
 8108836:	681b      	ldr	r3, [r3, #0]
 8108838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810883a:	687b      	ldr	r3, [r7, #4]
 810883c:	681b      	ldr	r3, [r3, #0]
 810883e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8108842:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108844:	687b      	ldr	r3, [r7, #4]
 8108846:	681b      	ldr	r3, [r3, #0]
 8108848:	4a25      	ldr	r2, [pc, #148]	; (81088e0 <HAL_TIM_PWM_Start+0x1f4>)
 810884a:	4293      	cmp	r3, r2
 810884c:	d022      	beq.n	8108894 <HAL_TIM_PWM_Start+0x1a8>
 810884e:	687b      	ldr	r3, [r7, #4]
 8108850:	681b      	ldr	r3, [r3, #0]
 8108852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108856:	d01d      	beq.n	8108894 <HAL_TIM_PWM_Start+0x1a8>
 8108858:	687b      	ldr	r3, [r7, #4]
 810885a:	681b      	ldr	r3, [r3, #0]
 810885c:	4a25      	ldr	r2, [pc, #148]	; (81088f4 <HAL_TIM_PWM_Start+0x208>)
 810885e:	4293      	cmp	r3, r2
 8108860:	d018      	beq.n	8108894 <HAL_TIM_PWM_Start+0x1a8>
 8108862:	687b      	ldr	r3, [r7, #4]
 8108864:	681b      	ldr	r3, [r3, #0]
 8108866:	4a24      	ldr	r2, [pc, #144]	; (81088f8 <HAL_TIM_PWM_Start+0x20c>)
 8108868:	4293      	cmp	r3, r2
 810886a:	d013      	beq.n	8108894 <HAL_TIM_PWM_Start+0x1a8>
 810886c:	687b      	ldr	r3, [r7, #4]
 810886e:	681b      	ldr	r3, [r3, #0]
 8108870:	4a22      	ldr	r2, [pc, #136]	; (81088fc <HAL_TIM_PWM_Start+0x210>)
 8108872:	4293      	cmp	r3, r2
 8108874:	d00e      	beq.n	8108894 <HAL_TIM_PWM_Start+0x1a8>
 8108876:	687b      	ldr	r3, [r7, #4]
 8108878:	681b      	ldr	r3, [r3, #0]
 810887a:	4a1a      	ldr	r2, [pc, #104]	; (81088e4 <HAL_TIM_PWM_Start+0x1f8>)
 810887c:	4293      	cmp	r3, r2
 810887e:	d009      	beq.n	8108894 <HAL_TIM_PWM_Start+0x1a8>
 8108880:	687b      	ldr	r3, [r7, #4]
 8108882:	681b      	ldr	r3, [r3, #0]
 8108884:	4a1e      	ldr	r2, [pc, #120]	; (8108900 <HAL_TIM_PWM_Start+0x214>)
 8108886:	4293      	cmp	r3, r2
 8108888:	d004      	beq.n	8108894 <HAL_TIM_PWM_Start+0x1a8>
 810888a:	687b      	ldr	r3, [r7, #4]
 810888c:	681b      	ldr	r3, [r3, #0]
 810888e:	4a16      	ldr	r2, [pc, #88]	; (81088e8 <HAL_TIM_PWM_Start+0x1fc>)
 8108890:	4293      	cmp	r3, r2
 8108892:	d115      	bne.n	81088c0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8108894:	687b      	ldr	r3, [r7, #4]
 8108896:	681b      	ldr	r3, [r3, #0]
 8108898:	689a      	ldr	r2, [r3, #8]
 810889a:	4b1a      	ldr	r3, [pc, #104]	; (8108904 <HAL_TIM_PWM_Start+0x218>)
 810889c:	4013      	ands	r3, r2
 810889e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81088a0:	68fb      	ldr	r3, [r7, #12]
 81088a2:	2b06      	cmp	r3, #6
 81088a4:	d015      	beq.n	81088d2 <HAL_TIM_PWM_Start+0x1e6>
 81088a6:	68fb      	ldr	r3, [r7, #12]
 81088a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81088ac:	d011      	beq.n	81088d2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 81088ae:	687b      	ldr	r3, [r7, #4]
 81088b0:	681b      	ldr	r3, [r3, #0]
 81088b2:	681a      	ldr	r2, [r3, #0]
 81088b4:	687b      	ldr	r3, [r7, #4]
 81088b6:	681b      	ldr	r3, [r3, #0]
 81088b8:	f042 0201 	orr.w	r2, r2, #1
 81088bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81088be:	e008      	b.n	81088d2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81088c0:	687b      	ldr	r3, [r7, #4]
 81088c2:	681b      	ldr	r3, [r3, #0]
 81088c4:	681a      	ldr	r2, [r3, #0]
 81088c6:	687b      	ldr	r3, [r7, #4]
 81088c8:	681b      	ldr	r3, [r3, #0]
 81088ca:	f042 0201 	orr.w	r2, r2, #1
 81088ce:	601a      	str	r2, [r3, #0]
 81088d0:	e000      	b.n	81088d4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81088d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81088d4:	2300      	movs	r3, #0
}
 81088d6:	4618      	mov	r0, r3
 81088d8:	3710      	adds	r7, #16
 81088da:	46bd      	mov	sp, r7
 81088dc:	bd80      	pop	{r7, pc}
 81088de:	bf00      	nop
 81088e0:	40010000 	.word	0x40010000
 81088e4:	40010400 	.word	0x40010400
 81088e8:	40014000 	.word	0x40014000
 81088ec:	40014400 	.word	0x40014400
 81088f0:	40014800 	.word	0x40014800
 81088f4:	40000400 	.word	0x40000400
 81088f8:	40000800 	.word	0x40000800
 81088fc:	40000c00 	.word	0x40000c00
 8108900:	40001800 	.word	0x40001800
 8108904:	00010007 	.word	0x00010007

08108908 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8108908:	b580      	push	{r7, lr}
 810890a:	b086      	sub	sp, #24
 810890c:	af00      	add	r7, sp, #0
 810890e:	6078      	str	r0, [r7, #4]
 8108910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8108912:	687b      	ldr	r3, [r7, #4]
 8108914:	2b00      	cmp	r3, #0
 8108916:	d101      	bne.n	810891c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8108918:	2301      	movs	r3, #1
 810891a:	e097      	b.n	8108a4c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 810891c:	687b      	ldr	r3, [r7, #4]
 810891e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8108922:	b2db      	uxtb	r3, r3
 8108924:	2b00      	cmp	r3, #0
 8108926:	d106      	bne.n	8108936 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8108928:	687b      	ldr	r3, [r7, #4]
 810892a:	2200      	movs	r2, #0
 810892c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8108930:	6878      	ldr	r0, [r7, #4]
 8108932:	f7fa f8fd 	bl	8102b30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108936:	687b      	ldr	r3, [r7, #4]
 8108938:	2202      	movs	r2, #2
 810893a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 810893e:	687b      	ldr	r3, [r7, #4]
 8108940:	681b      	ldr	r3, [r3, #0]
 8108942:	689b      	ldr	r3, [r3, #8]
 8108944:	687a      	ldr	r2, [r7, #4]
 8108946:	6812      	ldr	r2, [r2, #0]
 8108948:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 810894c:	f023 0307 	bic.w	r3, r3, #7
 8108950:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8108952:	687b      	ldr	r3, [r7, #4]
 8108954:	681a      	ldr	r2, [r3, #0]
 8108956:	687b      	ldr	r3, [r7, #4]
 8108958:	3304      	adds	r3, #4
 810895a:	4619      	mov	r1, r3
 810895c:	4610      	mov	r0, r2
 810895e:	f000 fbcd 	bl	81090fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8108962:	687b      	ldr	r3, [r7, #4]
 8108964:	681b      	ldr	r3, [r3, #0]
 8108966:	689b      	ldr	r3, [r3, #8]
 8108968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 810896a:	687b      	ldr	r3, [r7, #4]
 810896c:	681b      	ldr	r3, [r3, #0]
 810896e:	699b      	ldr	r3, [r3, #24]
 8108970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8108972:	687b      	ldr	r3, [r7, #4]
 8108974:	681b      	ldr	r3, [r3, #0]
 8108976:	6a1b      	ldr	r3, [r3, #32]
 8108978:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 810897a:	683b      	ldr	r3, [r7, #0]
 810897c:	681b      	ldr	r3, [r3, #0]
 810897e:	697a      	ldr	r2, [r7, #20]
 8108980:	4313      	orrs	r3, r2
 8108982:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8108984:	693b      	ldr	r3, [r7, #16]
 8108986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810898a:	f023 0303 	bic.w	r3, r3, #3
 810898e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8108990:	683b      	ldr	r3, [r7, #0]
 8108992:	689a      	ldr	r2, [r3, #8]
 8108994:	683b      	ldr	r3, [r7, #0]
 8108996:	699b      	ldr	r3, [r3, #24]
 8108998:	021b      	lsls	r3, r3, #8
 810899a:	4313      	orrs	r3, r2
 810899c:	693a      	ldr	r2, [r7, #16]
 810899e:	4313      	orrs	r3, r2
 81089a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 81089a2:	693b      	ldr	r3, [r7, #16]
 81089a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 81089a8:	f023 030c 	bic.w	r3, r3, #12
 81089ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 81089ae:	693b      	ldr	r3, [r7, #16]
 81089b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81089b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81089b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 81089ba:	683b      	ldr	r3, [r7, #0]
 81089bc:	68da      	ldr	r2, [r3, #12]
 81089be:	683b      	ldr	r3, [r7, #0]
 81089c0:	69db      	ldr	r3, [r3, #28]
 81089c2:	021b      	lsls	r3, r3, #8
 81089c4:	4313      	orrs	r3, r2
 81089c6:	693a      	ldr	r2, [r7, #16]
 81089c8:	4313      	orrs	r3, r2
 81089ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 81089cc:	683b      	ldr	r3, [r7, #0]
 81089ce:	691b      	ldr	r3, [r3, #16]
 81089d0:	011a      	lsls	r2, r3, #4
 81089d2:	683b      	ldr	r3, [r7, #0]
 81089d4:	6a1b      	ldr	r3, [r3, #32]
 81089d6:	031b      	lsls	r3, r3, #12
 81089d8:	4313      	orrs	r3, r2
 81089da:	693a      	ldr	r2, [r7, #16]
 81089dc:	4313      	orrs	r3, r2
 81089de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 81089e0:	68fb      	ldr	r3, [r7, #12]
 81089e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 81089e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 81089e8:	68fb      	ldr	r3, [r7, #12]
 81089ea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 81089ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 81089f0:	683b      	ldr	r3, [r7, #0]
 81089f2:	685a      	ldr	r2, [r3, #4]
 81089f4:	683b      	ldr	r3, [r7, #0]
 81089f6:	695b      	ldr	r3, [r3, #20]
 81089f8:	011b      	lsls	r3, r3, #4
 81089fa:	4313      	orrs	r3, r2
 81089fc:	68fa      	ldr	r2, [r7, #12]
 81089fe:	4313      	orrs	r3, r2
 8108a00:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8108a02:	687b      	ldr	r3, [r7, #4]
 8108a04:	681b      	ldr	r3, [r3, #0]
 8108a06:	697a      	ldr	r2, [r7, #20]
 8108a08:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8108a0a:	687b      	ldr	r3, [r7, #4]
 8108a0c:	681b      	ldr	r3, [r3, #0]
 8108a0e:	693a      	ldr	r2, [r7, #16]
 8108a10:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8108a12:	687b      	ldr	r3, [r7, #4]
 8108a14:	681b      	ldr	r3, [r3, #0]
 8108a16:	68fa      	ldr	r2, [r7, #12]
 8108a18:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8108a1a:	687b      	ldr	r3, [r7, #4]
 8108a1c:	2201      	movs	r2, #1
 8108a1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8108a22:	687b      	ldr	r3, [r7, #4]
 8108a24:	2201      	movs	r2, #1
 8108a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8108a2a:	687b      	ldr	r3, [r7, #4]
 8108a2c:	2201      	movs	r2, #1
 8108a2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8108a32:	687b      	ldr	r3, [r7, #4]
 8108a34:	2201      	movs	r2, #1
 8108a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8108a3a:	687b      	ldr	r3, [r7, #4]
 8108a3c:	2201      	movs	r2, #1
 8108a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8108a42:	687b      	ldr	r3, [r7, #4]
 8108a44:	2201      	movs	r2, #1
 8108a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8108a4a:	2300      	movs	r3, #0
}
 8108a4c:	4618      	mov	r0, r3
 8108a4e:	3718      	adds	r7, #24
 8108a50:	46bd      	mov	sp, r7
 8108a52:	bd80      	pop	{r7, pc}

08108a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8108a54:	b580      	push	{r7, lr}
 8108a56:	b082      	sub	sp, #8
 8108a58:	af00      	add	r7, sp, #0
 8108a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8108a5c:	687b      	ldr	r3, [r7, #4]
 8108a5e:	681b      	ldr	r3, [r3, #0]
 8108a60:	691b      	ldr	r3, [r3, #16]
 8108a62:	f003 0302 	and.w	r3, r3, #2
 8108a66:	2b02      	cmp	r3, #2
 8108a68:	d122      	bne.n	8108ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8108a6a:	687b      	ldr	r3, [r7, #4]
 8108a6c:	681b      	ldr	r3, [r3, #0]
 8108a6e:	68db      	ldr	r3, [r3, #12]
 8108a70:	f003 0302 	and.w	r3, r3, #2
 8108a74:	2b02      	cmp	r3, #2
 8108a76:	d11b      	bne.n	8108ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8108a78:	687b      	ldr	r3, [r7, #4]
 8108a7a:	681b      	ldr	r3, [r3, #0]
 8108a7c:	f06f 0202 	mvn.w	r2, #2
 8108a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8108a82:	687b      	ldr	r3, [r7, #4]
 8108a84:	2201      	movs	r2, #1
 8108a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8108a88:	687b      	ldr	r3, [r7, #4]
 8108a8a:	681b      	ldr	r3, [r3, #0]
 8108a8c:	699b      	ldr	r3, [r3, #24]
 8108a8e:	f003 0303 	and.w	r3, r3, #3
 8108a92:	2b00      	cmp	r3, #0
 8108a94:	d003      	beq.n	8108a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8108a96:	6878      	ldr	r0, [r7, #4]
 8108a98:	f000 fb12 	bl	81090c0 <HAL_TIM_IC_CaptureCallback>
 8108a9c:	e005      	b.n	8108aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8108a9e:	6878      	ldr	r0, [r7, #4]
 8108aa0:	f000 fb04 	bl	81090ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108aa4:	6878      	ldr	r0, [r7, #4]
 8108aa6:	f000 fb15 	bl	81090d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108aaa:	687b      	ldr	r3, [r7, #4]
 8108aac:	2200      	movs	r2, #0
 8108aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8108ab0:	687b      	ldr	r3, [r7, #4]
 8108ab2:	681b      	ldr	r3, [r3, #0]
 8108ab4:	691b      	ldr	r3, [r3, #16]
 8108ab6:	f003 0304 	and.w	r3, r3, #4
 8108aba:	2b04      	cmp	r3, #4
 8108abc:	d122      	bne.n	8108b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8108abe:	687b      	ldr	r3, [r7, #4]
 8108ac0:	681b      	ldr	r3, [r3, #0]
 8108ac2:	68db      	ldr	r3, [r3, #12]
 8108ac4:	f003 0304 	and.w	r3, r3, #4
 8108ac8:	2b04      	cmp	r3, #4
 8108aca:	d11b      	bne.n	8108b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8108acc:	687b      	ldr	r3, [r7, #4]
 8108ace:	681b      	ldr	r3, [r3, #0]
 8108ad0:	f06f 0204 	mvn.w	r2, #4
 8108ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8108ad6:	687b      	ldr	r3, [r7, #4]
 8108ad8:	2202      	movs	r2, #2
 8108ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8108adc:	687b      	ldr	r3, [r7, #4]
 8108ade:	681b      	ldr	r3, [r3, #0]
 8108ae0:	699b      	ldr	r3, [r3, #24]
 8108ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108ae6:	2b00      	cmp	r3, #0
 8108ae8:	d003      	beq.n	8108af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108aea:	6878      	ldr	r0, [r7, #4]
 8108aec:	f000 fae8 	bl	81090c0 <HAL_TIM_IC_CaptureCallback>
 8108af0:	e005      	b.n	8108afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108af2:	6878      	ldr	r0, [r7, #4]
 8108af4:	f000 fada 	bl	81090ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108af8:	6878      	ldr	r0, [r7, #4]
 8108afa:	f000 faeb 	bl	81090d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108afe:	687b      	ldr	r3, [r7, #4]
 8108b00:	2200      	movs	r2, #0
 8108b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8108b04:	687b      	ldr	r3, [r7, #4]
 8108b06:	681b      	ldr	r3, [r3, #0]
 8108b08:	691b      	ldr	r3, [r3, #16]
 8108b0a:	f003 0308 	and.w	r3, r3, #8
 8108b0e:	2b08      	cmp	r3, #8
 8108b10:	d122      	bne.n	8108b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8108b12:	687b      	ldr	r3, [r7, #4]
 8108b14:	681b      	ldr	r3, [r3, #0]
 8108b16:	68db      	ldr	r3, [r3, #12]
 8108b18:	f003 0308 	and.w	r3, r3, #8
 8108b1c:	2b08      	cmp	r3, #8
 8108b1e:	d11b      	bne.n	8108b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8108b20:	687b      	ldr	r3, [r7, #4]
 8108b22:	681b      	ldr	r3, [r3, #0]
 8108b24:	f06f 0208 	mvn.w	r2, #8
 8108b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8108b2a:	687b      	ldr	r3, [r7, #4]
 8108b2c:	2204      	movs	r2, #4
 8108b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8108b30:	687b      	ldr	r3, [r7, #4]
 8108b32:	681b      	ldr	r3, [r3, #0]
 8108b34:	69db      	ldr	r3, [r3, #28]
 8108b36:	f003 0303 	and.w	r3, r3, #3
 8108b3a:	2b00      	cmp	r3, #0
 8108b3c:	d003      	beq.n	8108b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108b3e:	6878      	ldr	r0, [r7, #4]
 8108b40:	f000 fabe 	bl	81090c0 <HAL_TIM_IC_CaptureCallback>
 8108b44:	e005      	b.n	8108b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108b46:	6878      	ldr	r0, [r7, #4]
 8108b48:	f000 fab0 	bl	81090ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108b4c:	6878      	ldr	r0, [r7, #4]
 8108b4e:	f000 fac1 	bl	81090d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108b52:	687b      	ldr	r3, [r7, #4]
 8108b54:	2200      	movs	r2, #0
 8108b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8108b58:	687b      	ldr	r3, [r7, #4]
 8108b5a:	681b      	ldr	r3, [r3, #0]
 8108b5c:	691b      	ldr	r3, [r3, #16]
 8108b5e:	f003 0310 	and.w	r3, r3, #16
 8108b62:	2b10      	cmp	r3, #16
 8108b64:	d122      	bne.n	8108bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8108b66:	687b      	ldr	r3, [r7, #4]
 8108b68:	681b      	ldr	r3, [r3, #0]
 8108b6a:	68db      	ldr	r3, [r3, #12]
 8108b6c:	f003 0310 	and.w	r3, r3, #16
 8108b70:	2b10      	cmp	r3, #16
 8108b72:	d11b      	bne.n	8108bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8108b74:	687b      	ldr	r3, [r7, #4]
 8108b76:	681b      	ldr	r3, [r3, #0]
 8108b78:	f06f 0210 	mvn.w	r2, #16
 8108b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8108b7e:	687b      	ldr	r3, [r7, #4]
 8108b80:	2208      	movs	r2, #8
 8108b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8108b84:	687b      	ldr	r3, [r7, #4]
 8108b86:	681b      	ldr	r3, [r3, #0]
 8108b88:	69db      	ldr	r3, [r3, #28]
 8108b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108b8e:	2b00      	cmp	r3, #0
 8108b90:	d003      	beq.n	8108b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108b92:	6878      	ldr	r0, [r7, #4]
 8108b94:	f000 fa94 	bl	81090c0 <HAL_TIM_IC_CaptureCallback>
 8108b98:	e005      	b.n	8108ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108b9a:	6878      	ldr	r0, [r7, #4]
 8108b9c:	f000 fa86 	bl	81090ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108ba0:	6878      	ldr	r0, [r7, #4]
 8108ba2:	f000 fa97 	bl	81090d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108ba6:	687b      	ldr	r3, [r7, #4]
 8108ba8:	2200      	movs	r2, #0
 8108baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8108bac:	687b      	ldr	r3, [r7, #4]
 8108bae:	681b      	ldr	r3, [r3, #0]
 8108bb0:	691b      	ldr	r3, [r3, #16]
 8108bb2:	f003 0301 	and.w	r3, r3, #1
 8108bb6:	2b01      	cmp	r3, #1
 8108bb8:	d10e      	bne.n	8108bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8108bba:	687b      	ldr	r3, [r7, #4]
 8108bbc:	681b      	ldr	r3, [r3, #0]
 8108bbe:	68db      	ldr	r3, [r3, #12]
 8108bc0:	f003 0301 	and.w	r3, r3, #1
 8108bc4:	2b01      	cmp	r3, #1
 8108bc6:	d107      	bne.n	8108bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8108bc8:	687b      	ldr	r3, [r7, #4]
 8108bca:	681b      	ldr	r3, [r3, #0]
 8108bcc:	f06f 0201 	mvn.w	r2, #1
 8108bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8108bd2:	6878      	ldr	r0, [r7, #4]
 8108bd4:	f7f9 fda8 	bl	8102728 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8108bd8:	687b      	ldr	r3, [r7, #4]
 8108bda:	681b      	ldr	r3, [r3, #0]
 8108bdc:	691b      	ldr	r3, [r3, #16]
 8108bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108be2:	2b80      	cmp	r3, #128	; 0x80
 8108be4:	d10e      	bne.n	8108c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8108be6:	687b      	ldr	r3, [r7, #4]
 8108be8:	681b      	ldr	r3, [r3, #0]
 8108bea:	68db      	ldr	r3, [r3, #12]
 8108bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108bf0:	2b80      	cmp	r3, #128	; 0x80
 8108bf2:	d107      	bne.n	8108c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8108bf4:	687b      	ldr	r3, [r7, #4]
 8108bf6:	681b      	ldr	r3, [r3, #0]
 8108bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8108bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8108bfe:	6878      	ldr	r0, [r7, #4]
 8108c00:	f000 ffc4 	bl	8109b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8108c04:	687b      	ldr	r3, [r7, #4]
 8108c06:	681b      	ldr	r3, [r3, #0]
 8108c08:	691b      	ldr	r3, [r3, #16]
 8108c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108c12:	d10e      	bne.n	8108c32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8108c14:	687b      	ldr	r3, [r7, #4]
 8108c16:	681b      	ldr	r3, [r3, #0]
 8108c18:	68db      	ldr	r3, [r3, #12]
 8108c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108c1e:	2b80      	cmp	r3, #128	; 0x80
 8108c20:	d107      	bne.n	8108c32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8108c22:	687b      	ldr	r3, [r7, #4]
 8108c24:	681b      	ldr	r3, [r3, #0]
 8108c26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8108c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8108c2c:	6878      	ldr	r0, [r7, #4]
 8108c2e:	f000 ffb7 	bl	8109ba0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8108c32:	687b      	ldr	r3, [r7, #4]
 8108c34:	681b      	ldr	r3, [r3, #0]
 8108c36:	691b      	ldr	r3, [r3, #16]
 8108c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108c3c:	2b40      	cmp	r3, #64	; 0x40
 8108c3e:	d10e      	bne.n	8108c5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8108c40:	687b      	ldr	r3, [r7, #4]
 8108c42:	681b      	ldr	r3, [r3, #0]
 8108c44:	68db      	ldr	r3, [r3, #12]
 8108c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108c4a:	2b40      	cmp	r3, #64	; 0x40
 8108c4c:	d107      	bne.n	8108c5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8108c4e:	687b      	ldr	r3, [r7, #4]
 8108c50:	681b      	ldr	r3, [r3, #0]
 8108c52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8108c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8108c58:	6878      	ldr	r0, [r7, #4]
 8108c5a:	f000 fa45 	bl	81090e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8108c5e:	687b      	ldr	r3, [r7, #4]
 8108c60:	681b      	ldr	r3, [r3, #0]
 8108c62:	691b      	ldr	r3, [r3, #16]
 8108c64:	f003 0320 	and.w	r3, r3, #32
 8108c68:	2b20      	cmp	r3, #32
 8108c6a:	d10e      	bne.n	8108c8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8108c6c:	687b      	ldr	r3, [r7, #4]
 8108c6e:	681b      	ldr	r3, [r3, #0]
 8108c70:	68db      	ldr	r3, [r3, #12]
 8108c72:	f003 0320 	and.w	r3, r3, #32
 8108c76:	2b20      	cmp	r3, #32
 8108c78:	d107      	bne.n	8108c8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8108c7a:	687b      	ldr	r3, [r7, #4]
 8108c7c:	681b      	ldr	r3, [r3, #0]
 8108c7e:	f06f 0220 	mvn.w	r2, #32
 8108c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8108c84:	6878      	ldr	r0, [r7, #4]
 8108c86:	f000 ff77 	bl	8109b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8108c8a:	bf00      	nop
 8108c8c:	3708      	adds	r7, #8
 8108c8e:	46bd      	mov	sp, r7
 8108c90:	bd80      	pop	{r7, pc}
	...

08108c94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8108c94:	b580      	push	{r7, lr}
 8108c96:	b086      	sub	sp, #24
 8108c98:	af00      	add	r7, sp, #0
 8108c9a:	60f8      	str	r0, [r7, #12]
 8108c9c:	60b9      	str	r1, [r7, #8]
 8108c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8108ca0:	2300      	movs	r3, #0
 8108ca2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8108ca4:	68fb      	ldr	r3, [r7, #12]
 8108ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8108caa:	2b01      	cmp	r3, #1
 8108cac:	d101      	bne.n	8108cb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8108cae:	2302      	movs	r3, #2
 8108cb0:	e0ff      	b.n	8108eb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8108cb2:	68fb      	ldr	r3, [r7, #12]
 8108cb4:	2201      	movs	r2, #1
 8108cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8108cba:	687b      	ldr	r3, [r7, #4]
 8108cbc:	2b14      	cmp	r3, #20
 8108cbe:	f200 80f0 	bhi.w	8108ea2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8108cc2:	a201      	add	r2, pc, #4	; (adr r2, 8108cc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8108cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108cc8:	08108d1d 	.word	0x08108d1d
 8108ccc:	08108ea3 	.word	0x08108ea3
 8108cd0:	08108ea3 	.word	0x08108ea3
 8108cd4:	08108ea3 	.word	0x08108ea3
 8108cd8:	08108d5d 	.word	0x08108d5d
 8108cdc:	08108ea3 	.word	0x08108ea3
 8108ce0:	08108ea3 	.word	0x08108ea3
 8108ce4:	08108ea3 	.word	0x08108ea3
 8108ce8:	08108d9f 	.word	0x08108d9f
 8108cec:	08108ea3 	.word	0x08108ea3
 8108cf0:	08108ea3 	.word	0x08108ea3
 8108cf4:	08108ea3 	.word	0x08108ea3
 8108cf8:	08108ddf 	.word	0x08108ddf
 8108cfc:	08108ea3 	.word	0x08108ea3
 8108d00:	08108ea3 	.word	0x08108ea3
 8108d04:	08108ea3 	.word	0x08108ea3
 8108d08:	08108e21 	.word	0x08108e21
 8108d0c:	08108ea3 	.word	0x08108ea3
 8108d10:	08108ea3 	.word	0x08108ea3
 8108d14:	08108ea3 	.word	0x08108ea3
 8108d18:	08108e61 	.word	0x08108e61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8108d1c:	68fb      	ldr	r3, [r7, #12]
 8108d1e:	681b      	ldr	r3, [r3, #0]
 8108d20:	68b9      	ldr	r1, [r7, #8]
 8108d22:	4618      	mov	r0, r3
 8108d24:	f000 fa84 	bl	8109230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8108d28:	68fb      	ldr	r3, [r7, #12]
 8108d2a:	681b      	ldr	r3, [r3, #0]
 8108d2c:	699a      	ldr	r2, [r3, #24]
 8108d2e:	68fb      	ldr	r3, [r7, #12]
 8108d30:	681b      	ldr	r3, [r3, #0]
 8108d32:	f042 0208 	orr.w	r2, r2, #8
 8108d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8108d38:	68fb      	ldr	r3, [r7, #12]
 8108d3a:	681b      	ldr	r3, [r3, #0]
 8108d3c:	699a      	ldr	r2, [r3, #24]
 8108d3e:	68fb      	ldr	r3, [r7, #12]
 8108d40:	681b      	ldr	r3, [r3, #0]
 8108d42:	f022 0204 	bic.w	r2, r2, #4
 8108d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8108d48:	68fb      	ldr	r3, [r7, #12]
 8108d4a:	681b      	ldr	r3, [r3, #0]
 8108d4c:	6999      	ldr	r1, [r3, #24]
 8108d4e:	68bb      	ldr	r3, [r7, #8]
 8108d50:	691a      	ldr	r2, [r3, #16]
 8108d52:	68fb      	ldr	r3, [r7, #12]
 8108d54:	681b      	ldr	r3, [r3, #0]
 8108d56:	430a      	orrs	r2, r1
 8108d58:	619a      	str	r2, [r3, #24]
      break;
 8108d5a:	e0a5      	b.n	8108ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8108d5c:	68fb      	ldr	r3, [r7, #12]
 8108d5e:	681b      	ldr	r3, [r3, #0]
 8108d60:	68b9      	ldr	r1, [r7, #8]
 8108d62:	4618      	mov	r0, r3
 8108d64:	f000 faf4 	bl	8109350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8108d68:	68fb      	ldr	r3, [r7, #12]
 8108d6a:	681b      	ldr	r3, [r3, #0]
 8108d6c:	699a      	ldr	r2, [r3, #24]
 8108d6e:	68fb      	ldr	r3, [r7, #12]
 8108d70:	681b      	ldr	r3, [r3, #0]
 8108d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8108d78:	68fb      	ldr	r3, [r7, #12]
 8108d7a:	681b      	ldr	r3, [r3, #0]
 8108d7c:	699a      	ldr	r2, [r3, #24]
 8108d7e:	68fb      	ldr	r3, [r7, #12]
 8108d80:	681b      	ldr	r3, [r3, #0]
 8108d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8108d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8108d88:	68fb      	ldr	r3, [r7, #12]
 8108d8a:	681b      	ldr	r3, [r3, #0]
 8108d8c:	6999      	ldr	r1, [r3, #24]
 8108d8e:	68bb      	ldr	r3, [r7, #8]
 8108d90:	691b      	ldr	r3, [r3, #16]
 8108d92:	021a      	lsls	r2, r3, #8
 8108d94:	68fb      	ldr	r3, [r7, #12]
 8108d96:	681b      	ldr	r3, [r3, #0]
 8108d98:	430a      	orrs	r2, r1
 8108d9a:	619a      	str	r2, [r3, #24]
      break;
 8108d9c:	e084      	b.n	8108ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8108d9e:	68fb      	ldr	r3, [r7, #12]
 8108da0:	681b      	ldr	r3, [r3, #0]
 8108da2:	68b9      	ldr	r1, [r7, #8]
 8108da4:	4618      	mov	r0, r3
 8108da6:	f000 fb5d 	bl	8109464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8108daa:	68fb      	ldr	r3, [r7, #12]
 8108dac:	681b      	ldr	r3, [r3, #0]
 8108dae:	69da      	ldr	r2, [r3, #28]
 8108db0:	68fb      	ldr	r3, [r7, #12]
 8108db2:	681b      	ldr	r3, [r3, #0]
 8108db4:	f042 0208 	orr.w	r2, r2, #8
 8108db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8108dba:	68fb      	ldr	r3, [r7, #12]
 8108dbc:	681b      	ldr	r3, [r3, #0]
 8108dbe:	69da      	ldr	r2, [r3, #28]
 8108dc0:	68fb      	ldr	r3, [r7, #12]
 8108dc2:	681b      	ldr	r3, [r3, #0]
 8108dc4:	f022 0204 	bic.w	r2, r2, #4
 8108dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8108dca:	68fb      	ldr	r3, [r7, #12]
 8108dcc:	681b      	ldr	r3, [r3, #0]
 8108dce:	69d9      	ldr	r1, [r3, #28]
 8108dd0:	68bb      	ldr	r3, [r7, #8]
 8108dd2:	691a      	ldr	r2, [r3, #16]
 8108dd4:	68fb      	ldr	r3, [r7, #12]
 8108dd6:	681b      	ldr	r3, [r3, #0]
 8108dd8:	430a      	orrs	r2, r1
 8108dda:	61da      	str	r2, [r3, #28]
      break;
 8108ddc:	e064      	b.n	8108ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8108dde:	68fb      	ldr	r3, [r7, #12]
 8108de0:	681b      	ldr	r3, [r3, #0]
 8108de2:	68b9      	ldr	r1, [r7, #8]
 8108de4:	4618      	mov	r0, r3
 8108de6:	f000 fbc5 	bl	8109574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8108dea:	68fb      	ldr	r3, [r7, #12]
 8108dec:	681b      	ldr	r3, [r3, #0]
 8108dee:	69da      	ldr	r2, [r3, #28]
 8108df0:	68fb      	ldr	r3, [r7, #12]
 8108df2:	681b      	ldr	r3, [r3, #0]
 8108df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8108dfa:	68fb      	ldr	r3, [r7, #12]
 8108dfc:	681b      	ldr	r3, [r3, #0]
 8108dfe:	69da      	ldr	r2, [r3, #28]
 8108e00:	68fb      	ldr	r3, [r7, #12]
 8108e02:	681b      	ldr	r3, [r3, #0]
 8108e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8108e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8108e0a:	68fb      	ldr	r3, [r7, #12]
 8108e0c:	681b      	ldr	r3, [r3, #0]
 8108e0e:	69d9      	ldr	r1, [r3, #28]
 8108e10:	68bb      	ldr	r3, [r7, #8]
 8108e12:	691b      	ldr	r3, [r3, #16]
 8108e14:	021a      	lsls	r2, r3, #8
 8108e16:	68fb      	ldr	r3, [r7, #12]
 8108e18:	681b      	ldr	r3, [r3, #0]
 8108e1a:	430a      	orrs	r2, r1
 8108e1c:	61da      	str	r2, [r3, #28]
      break;
 8108e1e:	e043      	b.n	8108ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8108e20:	68fb      	ldr	r3, [r7, #12]
 8108e22:	681b      	ldr	r3, [r3, #0]
 8108e24:	68b9      	ldr	r1, [r7, #8]
 8108e26:	4618      	mov	r0, r3
 8108e28:	f000 fc0e 	bl	8109648 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8108e2c:	68fb      	ldr	r3, [r7, #12]
 8108e2e:	681b      	ldr	r3, [r3, #0]
 8108e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108e32:	68fb      	ldr	r3, [r7, #12]
 8108e34:	681b      	ldr	r3, [r3, #0]
 8108e36:	f042 0208 	orr.w	r2, r2, #8
 8108e3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8108e3c:	68fb      	ldr	r3, [r7, #12]
 8108e3e:	681b      	ldr	r3, [r3, #0]
 8108e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108e42:	68fb      	ldr	r3, [r7, #12]
 8108e44:	681b      	ldr	r3, [r3, #0]
 8108e46:	f022 0204 	bic.w	r2, r2, #4
 8108e4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8108e4c:	68fb      	ldr	r3, [r7, #12]
 8108e4e:	681b      	ldr	r3, [r3, #0]
 8108e50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8108e52:	68bb      	ldr	r3, [r7, #8]
 8108e54:	691a      	ldr	r2, [r3, #16]
 8108e56:	68fb      	ldr	r3, [r7, #12]
 8108e58:	681b      	ldr	r3, [r3, #0]
 8108e5a:	430a      	orrs	r2, r1
 8108e5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8108e5e:	e023      	b.n	8108ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8108e60:	68fb      	ldr	r3, [r7, #12]
 8108e62:	681b      	ldr	r3, [r3, #0]
 8108e64:	68b9      	ldr	r1, [r7, #8]
 8108e66:	4618      	mov	r0, r3
 8108e68:	f000 fc52 	bl	8109710 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8108e6c:	68fb      	ldr	r3, [r7, #12]
 8108e6e:	681b      	ldr	r3, [r3, #0]
 8108e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108e72:	68fb      	ldr	r3, [r7, #12]
 8108e74:	681b      	ldr	r3, [r3, #0]
 8108e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108e7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8108e7c:	68fb      	ldr	r3, [r7, #12]
 8108e7e:	681b      	ldr	r3, [r3, #0]
 8108e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108e82:	68fb      	ldr	r3, [r7, #12]
 8108e84:	681b      	ldr	r3, [r3, #0]
 8108e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8108e8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8108e8c:	68fb      	ldr	r3, [r7, #12]
 8108e8e:	681b      	ldr	r3, [r3, #0]
 8108e90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8108e92:	68bb      	ldr	r3, [r7, #8]
 8108e94:	691b      	ldr	r3, [r3, #16]
 8108e96:	021a      	lsls	r2, r3, #8
 8108e98:	68fb      	ldr	r3, [r7, #12]
 8108e9a:	681b      	ldr	r3, [r3, #0]
 8108e9c:	430a      	orrs	r2, r1
 8108e9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8108ea0:	e002      	b.n	8108ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8108ea2:	2301      	movs	r3, #1
 8108ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8108ea6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8108ea8:	68fb      	ldr	r3, [r7, #12]
 8108eaa:	2200      	movs	r2, #0
 8108eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8108eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8108eb2:	4618      	mov	r0, r3
 8108eb4:	3718      	adds	r7, #24
 8108eb6:	46bd      	mov	sp, r7
 8108eb8:	bd80      	pop	{r7, pc}
 8108eba:	bf00      	nop

08108ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8108ebc:	b580      	push	{r7, lr}
 8108ebe:	b084      	sub	sp, #16
 8108ec0:	af00      	add	r7, sp, #0
 8108ec2:	6078      	str	r0, [r7, #4]
 8108ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8108ec6:	2300      	movs	r3, #0
 8108ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8108eca:	687b      	ldr	r3, [r7, #4]
 8108ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8108ed0:	2b01      	cmp	r3, #1
 8108ed2:	d101      	bne.n	8108ed8 <HAL_TIM_ConfigClockSource+0x1c>
 8108ed4:	2302      	movs	r3, #2
 8108ed6:	e0de      	b.n	8109096 <HAL_TIM_ConfigClockSource+0x1da>
 8108ed8:	687b      	ldr	r3, [r7, #4]
 8108eda:	2201      	movs	r2, #1
 8108edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8108ee0:	687b      	ldr	r3, [r7, #4]
 8108ee2:	2202      	movs	r2, #2
 8108ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	681b      	ldr	r3, [r3, #0]
 8108eec:	689b      	ldr	r3, [r3, #8]
 8108eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8108ef0:	68bb      	ldr	r3, [r7, #8]
 8108ef2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8108ef6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8108efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8108efc:	68bb      	ldr	r3, [r7, #8]
 8108efe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8108f02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8108f04:	687b      	ldr	r3, [r7, #4]
 8108f06:	681b      	ldr	r3, [r3, #0]
 8108f08:	68ba      	ldr	r2, [r7, #8]
 8108f0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8108f0c:	683b      	ldr	r3, [r7, #0]
 8108f0e:	681b      	ldr	r3, [r3, #0]
 8108f10:	4a63      	ldr	r2, [pc, #396]	; (81090a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8108f12:	4293      	cmp	r3, r2
 8108f14:	f000 80a9 	beq.w	810906a <HAL_TIM_ConfigClockSource+0x1ae>
 8108f18:	4a61      	ldr	r2, [pc, #388]	; (81090a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8108f1a:	4293      	cmp	r3, r2
 8108f1c:	f200 80ae 	bhi.w	810907c <HAL_TIM_ConfigClockSource+0x1c0>
 8108f20:	4a60      	ldr	r2, [pc, #384]	; (81090a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8108f22:	4293      	cmp	r3, r2
 8108f24:	f000 80a1 	beq.w	810906a <HAL_TIM_ConfigClockSource+0x1ae>
 8108f28:	4a5e      	ldr	r2, [pc, #376]	; (81090a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8108f2a:	4293      	cmp	r3, r2
 8108f2c:	f200 80a6 	bhi.w	810907c <HAL_TIM_ConfigClockSource+0x1c0>
 8108f30:	4a5d      	ldr	r2, [pc, #372]	; (81090a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8108f32:	4293      	cmp	r3, r2
 8108f34:	f000 8099 	beq.w	810906a <HAL_TIM_ConfigClockSource+0x1ae>
 8108f38:	4a5b      	ldr	r2, [pc, #364]	; (81090a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8108f3a:	4293      	cmp	r3, r2
 8108f3c:	f200 809e 	bhi.w	810907c <HAL_TIM_ConfigClockSource+0x1c0>
 8108f40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8108f44:	f000 8091 	beq.w	810906a <HAL_TIM_ConfigClockSource+0x1ae>
 8108f48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8108f4c:	f200 8096 	bhi.w	810907c <HAL_TIM_ConfigClockSource+0x1c0>
 8108f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108f54:	f000 8089 	beq.w	810906a <HAL_TIM_ConfigClockSource+0x1ae>
 8108f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108f5c:	f200 808e 	bhi.w	810907c <HAL_TIM_ConfigClockSource+0x1c0>
 8108f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108f64:	d03e      	beq.n	8108fe4 <HAL_TIM_ConfigClockSource+0x128>
 8108f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108f6a:	f200 8087 	bhi.w	810907c <HAL_TIM_ConfigClockSource+0x1c0>
 8108f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108f72:	f000 8086 	beq.w	8109082 <HAL_TIM_ConfigClockSource+0x1c6>
 8108f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108f7a:	d87f      	bhi.n	810907c <HAL_TIM_ConfigClockSource+0x1c0>
 8108f7c:	2b70      	cmp	r3, #112	; 0x70
 8108f7e:	d01a      	beq.n	8108fb6 <HAL_TIM_ConfigClockSource+0xfa>
 8108f80:	2b70      	cmp	r3, #112	; 0x70
 8108f82:	d87b      	bhi.n	810907c <HAL_TIM_ConfigClockSource+0x1c0>
 8108f84:	2b60      	cmp	r3, #96	; 0x60
 8108f86:	d050      	beq.n	810902a <HAL_TIM_ConfigClockSource+0x16e>
 8108f88:	2b60      	cmp	r3, #96	; 0x60
 8108f8a:	d877      	bhi.n	810907c <HAL_TIM_ConfigClockSource+0x1c0>
 8108f8c:	2b50      	cmp	r3, #80	; 0x50
 8108f8e:	d03c      	beq.n	810900a <HAL_TIM_ConfigClockSource+0x14e>
 8108f90:	2b50      	cmp	r3, #80	; 0x50
 8108f92:	d873      	bhi.n	810907c <HAL_TIM_ConfigClockSource+0x1c0>
 8108f94:	2b40      	cmp	r3, #64	; 0x40
 8108f96:	d058      	beq.n	810904a <HAL_TIM_ConfigClockSource+0x18e>
 8108f98:	2b40      	cmp	r3, #64	; 0x40
 8108f9a:	d86f      	bhi.n	810907c <HAL_TIM_ConfigClockSource+0x1c0>
 8108f9c:	2b30      	cmp	r3, #48	; 0x30
 8108f9e:	d064      	beq.n	810906a <HAL_TIM_ConfigClockSource+0x1ae>
 8108fa0:	2b30      	cmp	r3, #48	; 0x30
 8108fa2:	d86b      	bhi.n	810907c <HAL_TIM_ConfigClockSource+0x1c0>
 8108fa4:	2b20      	cmp	r3, #32
 8108fa6:	d060      	beq.n	810906a <HAL_TIM_ConfigClockSource+0x1ae>
 8108fa8:	2b20      	cmp	r3, #32
 8108faa:	d867      	bhi.n	810907c <HAL_TIM_ConfigClockSource+0x1c0>
 8108fac:	2b00      	cmp	r3, #0
 8108fae:	d05c      	beq.n	810906a <HAL_TIM_ConfigClockSource+0x1ae>
 8108fb0:	2b10      	cmp	r3, #16
 8108fb2:	d05a      	beq.n	810906a <HAL_TIM_ConfigClockSource+0x1ae>
 8108fb4:	e062      	b.n	810907c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8108fb6:	687b      	ldr	r3, [r7, #4]
 8108fb8:	6818      	ldr	r0, [r3, #0]
 8108fba:	683b      	ldr	r3, [r7, #0]
 8108fbc:	6899      	ldr	r1, [r3, #8]
 8108fbe:	683b      	ldr	r3, [r7, #0]
 8108fc0:	685a      	ldr	r2, [r3, #4]
 8108fc2:	683b      	ldr	r3, [r7, #0]
 8108fc4:	68db      	ldr	r3, [r3, #12]
 8108fc6:	f000 fc85 	bl	81098d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8108fca:	687b      	ldr	r3, [r7, #4]
 8108fcc:	681b      	ldr	r3, [r3, #0]
 8108fce:	689b      	ldr	r3, [r3, #8]
 8108fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8108fd2:	68bb      	ldr	r3, [r7, #8]
 8108fd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8108fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8108fda:	687b      	ldr	r3, [r7, #4]
 8108fdc:	681b      	ldr	r3, [r3, #0]
 8108fde:	68ba      	ldr	r2, [r7, #8]
 8108fe0:	609a      	str	r2, [r3, #8]
      break;
 8108fe2:	e04f      	b.n	8109084 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8108fe4:	687b      	ldr	r3, [r7, #4]
 8108fe6:	6818      	ldr	r0, [r3, #0]
 8108fe8:	683b      	ldr	r3, [r7, #0]
 8108fea:	6899      	ldr	r1, [r3, #8]
 8108fec:	683b      	ldr	r3, [r7, #0]
 8108fee:	685a      	ldr	r2, [r3, #4]
 8108ff0:	683b      	ldr	r3, [r7, #0]
 8108ff2:	68db      	ldr	r3, [r3, #12]
 8108ff4:	f000 fc6e 	bl	81098d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8108ff8:	687b      	ldr	r3, [r7, #4]
 8108ffa:	681b      	ldr	r3, [r3, #0]
 8108ffc:	689a      	ldr	r2, [r3, #8]
 8108ffe:	687b      	ldr	r3, [r7, #4]
 8109000:	681b      	ldr	r3, [r3, #0]
 8109002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8109006:	609a      	str	r2, [r3, #8]
      break;
 8109008:	e03c      	b.n	8109084 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810900a:	687b      	ldr	r3, [r7, #4]
 810900c:	6818      	ldr	r0, [r3, #0]
 810900e:	683b      	ldr	r3, [r7, #0]
 8109010:	6859      	ldr	r1, [r3, #4]
 8109012:	683b      	ldr	r3, [r7, #0]
 8109014:	68db      	ldr	r3, [r3, #12]
 8109016:	461a      	mov	r2, r3
 8109018:	f000 fbe0 	bl	81097dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810901c:	687b      	ldr	r3, [r7, #4]
 810901e:	681b      	ldr	r3, [r3, #0]
 8109020:	2150      	movs	r1, #80	; 0x50
 8109022:	4618      	mov	r0, r3
 8109024:	f000 fc39 	bl	810989a <TIM_ITRx_SetConfig>
      break;
 8109028:	e02c      	b.n	8109084 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810902a:	687b      	ldr	r3, [r7, #4]
 810902c:	6818      	ldr	r0, [r3, #0]
 810902e:	683b      	ldr	r3, [r7, #0]
 8109030:	6859      	ldr	r1, [r3, #4]
 8109032:	683b      	ldr	r3, [r7, #0]
 8109034:	68db      	ldr	r3, [r3, #12]
 8109036:	461a      	mov	r2, r3
 8109038:	f000 fbff 	bl	810983a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810903c:	687b      	ldr	r3, [r7, #4]
 810903e:	681b      	ldr	r3, [r3, #0]
 8109040:	2160      	movs	r1, #96	; 0x60
 8109042:	4618      	mov	r0, r3
 8109044:	f000 fc29 	bl	810989a <TIM_ITRx_SetConfig>
      break;
 8109048:	e01c      	b.n	8109084 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810904a:	687b      	ldr	r3, [r7, #4]
 810904c:	6818      	ldr	r0, [r3, #0]
 810904e:	683b      	ldr	r3, [r7, #0]
 8109050:	6859      	ldr	r1, [r3, #4]
 8109052:	683b      	ldr	r3, [r7, #0]
 8109054:	68db      	ldr	r3, [r3, #12]
 8109056:	461a      	mov	r2, r3
 8109058:	f000 fbc0 	bl	81097dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810905c:	687b      	ldr	r3, [r7, #4]
 810905e:	681b      	ldr	r3, [r3, #0]
 8109060:	2140      	movs	r1, #64	; 0x40
 8109062:	4618      	mov	r0, r3
 8109064:	f000 fc19 	bl	810989a <TIM_ITRx_SetConfig>
      break;
 8109068:	e00c      	b.n	8109084 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810906a:	687b      	ldr	r3, [r7, #4]
 810906c:	681a      	ldr	r2, [r3, #0]
 810906e:	683b      	ldr	r3, [r7, #0]
 8109070:	681b      	ldr	r3, [r3, #0]
 8109072:	4619      	mov	r1, r3
 8109074:	4610      	mov	r0, r2
 8109076:	f000 fc10 	bl	810989a <TIM_ITRx_SetConfig>
      break;
 810907a:	e003      	b.n	8109084 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 810907c:	2301      	movs	r3, #1
 810907e:	73fb      	strb	r3, [r7, #15]
      break;
 8109080:	e000      	b.n	8109084 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8109082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8109084:	687b      	ldr	r3, [r7, #4]
 8109086:	2201      	movs	r2, #1
 8109088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810908c:	687b      	ldr	r3, [r7, #4]
 810908e:	2200      	movs	r2, #0
 8109090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8109094:	7bfb      	ldrb	r3, [r7, #15]
}
 8109096:	4618      	mov	r0, r3
 8109098:	3710      	adds	r7, #16
 810909a:	46bd      	mov	sp, r7
 810909c:	bd80      	pop	{r7, pc}
 810909e:	bf00      	nop
 81090a0:	00100040 	.word	0x00100040
 81090a4:	00100030 	.word	0x00100030
 81090a8:	00100020 	.word	0x00100020

081090ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81090ac:	b480      	push	{r7}
 81090ae:	b083      	sub	sp, #12
 81090b0:	af00      	add	r7, sp, #0
 81090b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81090b4:	bf00      	nop
 81090b6:	370c      	adds	r7, #12
 81090b8:	46bd      	mov	sp, r7
 81090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090be:	4770      	bx	lr

081090c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81090c0:	b480      	push	{r7}
 81090c2:	b083      	sub	sp, #12
 81090c4:	af00      	add	r7, sp, #0
 81090c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81090c8:	bf00      	nop
 81090ca:	370c      	adds	r7, #12
 81090cc:	46bd      	mov	sp, r7
 81090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090d2:	4770      	bx	lr

081090d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81090d4:	b480      	push	{r7}
 81090d6:	b083      	sub	sp, #12
 81090d8:	af00      	add	r7, sp, #0
 81090da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81090dc:	bf00      	nop
 81090de:	370c      	adds	r7, #12
 81090e0:	46bd      	mov	sp, r7
 81090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090e6:	4770      	bx	lr

081090e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81090e8:	b480      	push	{r7}
 81090ea:	b083      	sub	sp, #12
 81090ec:	af00      	add	r7, sp, #0
 81090ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81090f0:	bf00      	nop
 81090f2:	370c      	adds	r7, #12
 81090f4:	46bd      	mov	sp, r7
 81090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090fa:	4770      	bx	lr

081090fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81090fc:	b480      	push	{r7}
 81090fe:	b085      	sub	sp, #20
 8109100:	af00      	add	r7, sp, #0
 8109102:	6078      	str	r0, [r7, #4]
 8109104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8109106:	687b      	ldr	r3, [r7, #4]
 8109108:	681b      	ldr	r3, [r3, #0]
 810910a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810910c:	687b      	ldr	r3, [r7, #4]
 810910e:	4a40      	ldr	r2, [pc, #256]	; (8109210 <TIM_Base_SetConfig+0x114>)
 8109110:	4293      	cmp	r3, r2
 8109112:	d013      	beq.n	810913c <TIM_Base_SetConfig+0x40>
 8109114:	687b      	ldr	r3, [r7, #4]
 8109116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810911a:	d00f      	beq.n	810913c <TIM_Base_SetConfig+0x40>
 810911c:	687b      	ldr	r3, [r7, #4]
 810911e:	4a3d      	ldr	r2, [pc, #244]	; (8109214 <TIM_Base_SetConfig+0x118>)
 8109120:	4293      	cmp	r3, r2
 8109122:	d00b      	beq.n	810913c <TIM_Base_SetConfig+0x40>
 8109124:	687b      	ldr	r3, [r7, #4]
 8109126:	4a3c      	ldr	r2, [pc, #240]	; (8109218 <TIM_Base_SetConfig+0x11c>)
 8109128:	4293      	cmp	r3, r2
 810912a:	d007      	beq.n	810913c <TIM_Base_SetConfig+0x40>
 810912c:	687b      	ldr	r3, [r7, #4]
 810912e:	4a3b      	ldr	r2, [pc, #236]	; (810921c <TIM_Base_SetConfig+0x120>)
 8109130:	4293      	cmp	r3, r2
 8109132:	d003      	beq.n	810913c <TIM_Base_SetConfig+0x40>
 8109134:	687b      	ldr	r3, [r7, #4]
 8109136:	4a3a      	ldr	r2, [pc, #232]	; (8109220 <TIM_Base_SetConfig+0x124>)
 8109138:	4293      	cmp	r3, r2
 810913a:	d108      	bne.n	810914e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810913c:	68fb      	ldr	r3, [r7, #12]
 810913e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8109144:	683b      	ldr	r3, [r7, #0]
 8109146:	685b      	ldr	r3, [r3, #4]
 8109148:	68fa      	ldr	r2, [r7, #12]
 810914a:	4313      	orrs	r3, r2
 810914c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810914e:	687b      	ldr	r3, [r7, #4]
 8109150:	4a2f      	ldr	r2, [pc, #188]	; (8109210 <TIM_Base_SetConfig+0x114>)
 8109152:	4293      	cmp	r3, r2
 8109154:	d01f      	beq.n	8109196 <TIM_Base_SetConfig+0x9a>
 8109156:	687b      	ldr	r3, [r7, #4]
 8109158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810915c:	d01b      	beq.n	8109196 <TIM_Base_SetConfig+0x9a>
 810915e:	687b      	ldr	r3, [r7, #4]
 8109160:	4a2c      	ldr	r2, [pc, #176]	; (8109214 <TIM_Base_SetConfig+0x118>)
 8109162:	4293      	cmp	r3, r2
 8109164:	d017      	beq.n	8109196 <TIM_Base_SetConfig+0x9a>
 8109166:	687b      	ldr	r3, [r7, #4]
 8109168:	4a2b      	ldr	r2, [pc, #172]	; (8109218 <TIM_Base_SetConfig+0x11c>)
 810916a:	4293      	cmp	r3, r2
 810916c:	d013      	beq.n	8109196 <TIM_Base_SetConfig+0x9a>
 810916e:	687b      	ldr	r3, [r7, #4]
 8109170:	4a2a      	ldr	r2, [pc, #168]	; (810921c <TIM_Base_SetConfig+0x120>)
 8109172:	4293      	cmp	r3, r2
 8109174:	d00f      	beq.n	8109196 <TIM_Base_SetConfig+0x9a>
 8109176:	687b      	ldr	r3, [r7, #4]
 8109178:	4a29      	ldr	r2, [pc, #164]	; (8109220 <TIM_Base_SetConfig+0x124>)
 810917a:	4293      	cmp	r3, r2
 810917c:	d00b      	beq.n	8109196 <TIM_Base_SetConfig+0x9a>
 810917e:	687b      	ldr	r3, [r7, #4]
 8109180:	4a28      	ldr	r2, [pc, #160]	; (8109224 <TIM_Base_SetConfig+0x128>)
 8109182:	4293      	cmp	r3, r2
 8109184:	d007      	beq.n	8109196 <TIM_Base_SetConfig+0x9a>
 8109186:	687b      	ldr	r3, [r7, #4]
 8109188:	4a27      	ldr	r2, [pc, #156]	; (8109228 <TIM_Base_SetConfig+0x12c>)
 810918a:	4293      	cmp	r3, r2
 810918c:	d003      	beq.n	8109196 <TIM_Base_SetConfig+0x9a>
 810918e:	687b      	ldr	r3, [r7, #4]
 8109190:	4a26      	ldr	r2, [pc, #152]	; (810922c <TIM_Base_SetConfig+0x130>)
 8109192:	4293      	cmp	r3, r2
 8109194:	d108      	bne.n	81091a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8109196:	68fb      	ldr	r3, [r7, #12]
 8109198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810919c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810919e:	683b      	ldr	r3, [r7, #0]
 81091a0:	68db      	ldr	r3, [r3, #12]
 81091a2:	68fa      	ldr	r2, [r7, #12]
 81091a4:	4313      	orrs	r3, r2
 81091a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81091a8:	68fb      	ldr	r3, [r7, #12]
 81091aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81091ae:	683b      	ldr	r3, [r7, #0]
 81091b0:	695b      	ldr	r3, [r3, #20]
 81091b2:	4313      	orrs	r3, r2
 81091b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81091b6:	687b      	ldr	r3, [r7, #4]
 81091b8:	68fa      	ldr	r2, [r7, #12]
 81091ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81091bc:	683b      	ldr	r3, [r7, #0]
 81091be:	689a      	ldr	r2, [r3, #8]
 81091c0:	687b      	ldr	r3, [r7, #4]
 81091c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81091c4:	683b      	ldr	r3, [r7, #0]
 81091c6:	681a      	ldr	r2, [r3, #0]
 81091c8:	687b      	ldr	r3, [r7, #4]
 81091ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81091cc:	687b      	ldr	r3, [r7, #4]
 81091ce:	4a10      	ldr	r2, [pc, #64]	; (8109210 <TIM_Base_SetConfig+0x114>)
 81091d0:	4293      	cmp	r3, r2
 81091d2:	d00f      	beq.n	81091f4 <TIM_Base_SetConfig+0xf8>
 81091d4:	687b      	ldr	r3, [r7, #4]
 81091d6:	4a12      	ldr	r2, [pc, #72]	; (8109220 <TIM_Base_SetConfig+0x124>)
 81091d8:	4293      	cmp	r3, r2
 81091da:	d00b      	beq.n	81091f4 <TIM_Base_SetConfig+0xf8>
 81091dc:	687b      	ldr	r3, [r7, #4]
 81091de:	4a11      	ldr	r2, [pc, #68]	; (8109224 <TIM_Base_SetConfig+0x128>)
 81091e0:	4293      	cmp	r3, r2
 81091e2:	d007      	beq.n	81091f4 <TIM_Base_SetConfig+0xf8>
 81091e4:	687b      	ldr	r3, [r7, #4]
 81091e6:	4a10      	ldr	r2, [pc, #64]	; (8109228 <TIM_Base_SetConfig+0x12c>)
 81091e8:	4293      	cmp	r3, r2
 81091ea:	d003      	beq.n	81091f4 <TIM_Base_SetConfig+0xf8>
 81091ec:	687b      	ldr	r3, [r7, #4]
 81091ee:	4a0f      	ldr	r2, [pc, #60]	; (810922c <TIM_Base_SetConfig+0x130>)
 81091f0:	4293      	cmp	r3, r2
 81091f2:	d103      	bne.n	81091fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81091f4:	683b      	ldr	r3, [r7, #0]
 81091f6:	691a      	ldr	r2, [r3, #16]
 81091f8:	687b      	ldr	r3, [r7, #4]
 81091fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81091fc:	687b      	ldr	r3, [r7, #4]
 81091fe:	2201      	movs	r2, #1
 8109200:	615a      	str	r2, [r3, #20]
}
 8109202:	bf00      	nop
 8109204:	3714      	adds	r7, #20
 8109206:	46bd      	mov	sp, r7
 8109208:	f85d 7b04 	ldr.w	r7, [sp], #4
 810920c:	4770      	bx	lr
 810920e:	bf00      	nop
 8109210:	40010000 	.word	0x40010000
 8109214:	40000400 	.word	0x40000400
 8109218:	40000800 	.word	0x40000800
 810921c:	40000c00 	.word	0x40000c00
 8109220:	40010400 	.word	0x40010400
 8109224:	40014000 	.word	0x40014000
 8109228:	40014400 	.word	0x40014400
 810922c:	40014800 	.word	0x40014800

08109230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109230:	b480      	push	{r7}
 8109232:	b087      	sub	sp, #28
 8109234:	af00      	add	r7, sp, #0
 8109236:	6078      	str	r0, [r7, #4]
 8109238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810923a:	687b      	ldr	r3, [r7, #4]
 810923c:	6a1b      	ldr	r3, [r3, #32]
 810923e:	f023 0201 	bic.w	r2, r3, #1
 8109242:	687b      	ldr	r3, [r7, #4]
 8109244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109246:	687b      	ldr	r3, [r7, #4]
 8109248:	6a1b      	ldr	r3, [r3, #32]
 810924a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810924c:	687b      	ldr	r3, [r7, #4]
 810924e:	685b      	ldr	r3, [r3, #4]
 8109250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8109252:	687b      	ldr	r3, [r7, #4]
 8109254:	699b      	ldr	r3, [r3, #24]
 8109256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8109258:	68fb      	ldr	r3, [r7, #12]
 810925a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810925e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8109264:	68fb      	ldr	r3, [r7, #12]
 8109266:	f023 0303 	bic.w	r3, r3, #3
 810926a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810926c:	683b      	ldr	r3, [r7, #0]
 810926e:	681b      	ldr	r3, [r3, #0]
 8109270:	68fa      	ldr	r2, [r7, #12]
 8109272:	4313      	orrs	r3, r2
 8109274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8109276:	697b      	ldr	r3, [r7, #20]
 8109278:	f023 0302 	bic.w	r3, r3, #2
 810927c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810927e:	683b      	ldr	r3, [r7, #0]
 8109280:	689b      	ldr	r3, [r3, #8]
 8109282:	697a      	ldr	r2, [r7, #20]
 8109284:	4313      	orrs	r3, r2
 8109286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8109288:	687b      	ldr	r3, [r7, #4]
 810928a:	4a2c      	ldr	r2, [pc, #176]	; (810933c <TIM_OC1_SetConfig+0x10c>)
 810928c:	4293      	cmp	r3, r2
 810928e:	d00f      	beq.n	81092b0 <TIM_OC1_SetConfig+0x80>
 8109290:	687b      	ldr	r3, [r7, #4]
 8109292:	4a2b      	ldr	r2, [pc, #172]	; (8109340 <TIM_OC1_SetConfig+0x110>)
 8109294:	4293      	cmp	r3, r2
 8109296:	d00b      	beq.n	81092b0 <TIM_OC1_SetConfig+0x80>
 8109298:	687b      	ldr	r3, [r7, #4]
 810929a:	4a2a      	ldr	r2, [pc, #168]	; (8109344 <TIM_OC1_SetConfig+0x114>)
 810929c:	4293      	cmp	r3, r2
 810929e:	d007      	beq.n	81092b0 <TIM_OC1_SetConfig+0x80>
 81092a0:	687b      	ldr	r3, [r7, #4]
 81092a2:	4a29      	ldr	r2, [pc, #164]	; (8109348 <TIM_OC1_SetConfig+0x118>)
 81092a4:	4293      	cmp	r3, r2
 81092a6:	d003      	beq.n	81092b0 <TIM_OC1_SetConfig+0x80>
 81092a8:	687b      	ldr	r3, [r7, #4]
 81092aa:	4a28      	ldr	r2, [pc, #160]	; (810934c <TIM_OC1_SetConfig+0x11c>)
 81092ac:	4293      	cmp	r3, r2
 81092ae:	d10c      	bne.n	81092ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 81092b0:	697b      	ldr	r3, [r7, #20]
 81092b2:	f023 0308 	bic.w	r3, r3, #8
 81092b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 81092b8:	683b      	ldr	r3, [r7, #0]
 81092ba:	68db      	ldr	r3, [r3, #12]
 81092bc:	697a      	ldr	r2, [r7, #20]
 81092be:	4313      	orrs	r3, r2
 81092c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 81092c2:	697b      	ldr	r3, [r7, #20]
 81092c4:	f023 0304 	bic.w	r3, r3, #4
 81092c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81092ca:	687b      	ldr	r3, [r7, #4]
 81092cc:	4a1b      	ldr	r2, [pc, #108]	; (810933c <TIM_OC1_SetConfig+0x10c>)
 81092ce:	4293      	cmp	r3, r2
 81092d0:	d00f      	beq.n	81092f2 <TIM_OC1_SetConfig+0xc2>
 81092d2:	687b      	ldr	r3, [r7, #4]
 81092d4:	4a1a      	ldr	r2, [pc, #104]	; (8109340 <TIM_OC1_SetConfig+0x110>)
 81092d6:	4293      	cmp	r3, r2
 81092d8:	d00b      	beq.n	81092f2 <TIM_OC1_SetConfig+0xc2>
 81092da:	687b      	ldr	r3, [r7, #4]
 81092dc:	4a19      	ldr	r2, [pc, #100]	; (8109344 <TIM_OC1_SetConfig+0x114>)
 81092de:	4293      	cmp	r3, r2
 81092e0:	d007      	beq.n	81092f2 <TIM_OC1_SetConfig+0xc2>
 81092e2:	687b      	ldr	r3, [r7, #4]
 81092e4:	4a18      	ldr	r2, [pc, #96]	; (8109348 <TIM_OC1_SetConfig+0x118>)
 81092e6:	4293      	cmp	r3, r2
 81092e8:	d003      	beq.n	81092f2 <TIM_OC1_SetConfig+0xc2>
 81092ea:	687b      	ldr	r3, [r7, #4]
 81092ec:	4a17      	ldr	r2, [pc, #92]	; (810934c <TIM_OC1_SetConfig+0x11c>)
 81092ee:	4293      	cmp	r3, r2
 81092f0:	d111      	bne.n	8109316 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 81092f2:	693b      	ldr	r3, [r7, #16]
 81092f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81092f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81092fa:	693b      	ldr	r3, [r7, #16]
 81092fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8109300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8109302:	683b      	ldr	r3, [r7, #0]
 8109304:	695b      	ldr	r3, [r3, #20]
 8109306:	693a      	ldr	r2, [r7, #16]
 8109308:	4313      	orrs	r3, r2
 810930a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810930c:	683b      	ldr	r3, [r7, #0]
 810930e:	699b      	ldr	r3, [r3, #24]
 8109310:	693a      	ldr	r2, [r7, #16]
 8109312:	4313      	orrs	r3, r2
 8109314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8109316:	687b      	ldr	r3, [r7, #4]
 8109318:	693a      	ldr	r2, [r7, #16]
 810931a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810931c:	687b      	ldr	r3, [r7, #4]
 810931e:	68fa      	ldr	r2, [r7, #12]
 8109320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8109322:	683b      	ldr	r3, [r7, #0]
 8109324:	685a      	ldr	r2, [r3, #4]
 8109326:	687b      	ldr	r3, [r7, #4]
 8109328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810932a:	687b      	ldr	r3, [r7, #4]
 810932c:	697a      	ldr	r2, [r7, #20]
 810932e:	621a      	str	r2, [r3, #32]
}
 8109330:	bf00      	nop
 8109332:	371c      	adds	r7, #28
 8109334:	46bd      	mov	sp, r7
 8109336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810933a:	4770      	bx	lr
 810933c:	40010000 	.word	0x40010000
 8109340:	40010400 	.word	0x40010400
 8109344:	40014000 	.word	0x40014000
 8109348:	40014400 	.word	0x40014400
 810934c:	40014800 	.word	0x40014800

08109350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109350:	b480      	push	{r7}
 8109352:	b087      	sub	sp, #28
 8109354:	af00      	add	r7, sp, #0
 8109356:	6078      	str	r0, [r7, #4]
 8109358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810935a:	687b      	ldr	r3, [r7, #4]
 810935c:	6a1b      	ldr	r3, [r3, #32]
 810935e:	f023 0210 	bic.w	r2, r3, #16
 8109362:	687b      	ldr	r3, [r7, #4]
 8109364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109366:	687b      	ldr	r3, [r7, #4]
 8109368:	6a1b      	ldr	r3, [r3, #32]
 810936a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810936c:	687b      	ldr	r3, [r7, #4]
 810936e:	685b      	ldr	r3, [r3, #4]
 8109370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8109372:	687b      	ldr	r3, [r7, #4]
 8109374:	699b      	ldr	r3, [r3, #24]
 8109376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8109378:	68fb      	ldr	r3, [r7, #12]
 810937a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810937e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8109382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8109384:	68fb      	ldr	r3, [r7, #12]
 8109386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810938a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810938c:	683b      	ldr	r3, [r7, #0]
 810938e:	681b      	ldr	r3, [r3, #0]
 8109390:	021b      	lsls	r3, r3, #8
 8109392:	68fa      	ldr	r2, [r7, #12]
 8109394:	4313      	orrs	r3, r2
 8109396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8109398:	697b      	ldr	r3, [r7, #20]
 810939a:	f023 0320 	bic.w	r3, r3, #32
 810939e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 81093a0:	683b      	ldr	r3, [r7, #0]
 81093a2:	689b      	ldr	r3, [r3, #8]
 81093a4:	011b      	lsls	r3, r3, #4
 81093a6:	697a      	ldr	r2, [r7, #20]
 81093a8:	4313      	orrs	r3, r2
 81093aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 81093ac:	687b      	ldr	r3, [r7, #4]
 81093ae:	4a28      	ldr	r2, [pc, #160]	; (8109450 <TIM_OC2_SetConfig+0x100>)
 81093b0:	4293      	cmp	r3, r2
 81093b2:	d003      	beq.n	81093bc <TIM_OC2_SetConfig+0x6c>
 81093b4:	687b      	ldr	r3, [r7, #4]
 81093b6:	4a27      	ldr	r2, [pc, #156]	; (8109454 <TIM_OC2_SetConfig+0x104>)
 81093b8:	4293      	cmp	r3, r2
 81093ba:	d10d      	bne.n	81093d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 81093bc:	697b      	ldr	r3, [r7, #20]
 81093be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81093c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 81093c4:	683b      	ldr	r3, [r7, #0]
 81093c6:	68db      	ldr	r3, [r3, #12]
 81093c8:	011b      	lsls	r3, r3, #4
 81093ca:	697a      	ldr	r2, [r7, #20]
 81093cc:	4313      	orrs	r3, r2
 81093ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 81093d0:	697b      	ldr	r3, [r7, #20]
 81093d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81093d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81093d8:	687b      	ldr	r3, [r7, #4]
 81093da:	4a1d      	ldr	r2, [pc, #116]	; (8109450 <TIM_OC2_SetConfig+0x100>)
 81093dc:	4293      	cmp	r3, r2
 81093de:	d00f      	beq.n	8109400 <TIM_OC2_SetConfig+0xb0>
 81093e0:	687b      	ldr	r3, [r7, #4]
 81093e2:	4a1c      	ldr	r2, [pc, #112]	; (8109454 <TIM_OC2_SetConfig+0x104>)
 81093e4:	4293      	cmp	r3, r2
 81093e6:	d00b      	beq.n	8109400 <TIM_OC2_SetConfig+0xb0>
 81093e8:	687b      	ldr	r3, [r7, #4]
 81093ea:	4a1b      	ldr	r2, [pc, #108]	; (8109458 <TIM_OC2_SetConfig+0x108>)
 81093ec:	4293      	cmp	r3, r2
 81093ee:	d007      	beq.n	8109400 <TIM_OC2_SetConfig+0xb0>
 81093f0:	687b      	ldr	r3, [r7, #4]
 81093f2:	4a1a      	ldr	r2, [pc, #104]	; (810945c <TIM_OC2_SetConfig+0x10c>)
 81093f4:	4293      	cmp	r3, r2
 81093f6:	d003      	beq.n	8109400 <TIM_OC2_SetConfig+0xb0>
 81093f8:	687b      	ldr	r3, [r7, #4]
 81093fa:	4a19      	ldr	r2, [pc, #100]	; (8109460 <TIM_OC2_SetConfig+0x110>)
 81093fc:	4293      	cmp	r3, r2
 81093fe:	d113      	bne.n	8109428 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8109400:	693b      	ldr	r3, [r7, #16]
 8109402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8109406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8109408:	693b      	ldr	r3, [r7, #16]
 810940a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810940e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8109410:	683b      	ldr	r3, [r7, #0]
 8109412:	695b      	ldr	r3, [r3, #20]
 8109414:	009b      	lsls	r3, r3, #2
 8109416:	693a      	ldr	r2, [r7, #16]
 8109418:	4313      	orrs	r3, r2
 810941a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810941c:	683b      	ldr	r3, [r7, #0]
 810941e:	699b      	ldr	r3, [r3, #24]
 8109420:	009b      	lsls	r3, r3, #2
 8109422:	693a      	ldr	r2, [r7, #16]
 8109424:	4313      	orrs	r3, r2
 8109426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8109428:	687b      	ldr	r3, [r7, #4]
 810942a:	693a      	ldr	r2, [r7, #16]
 810942c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810942e:	687b      	ldr	r3, [r7, #4]
 8109430:	68fa      	ldr	r2, [r7, #12]
 8109432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8109434:	683b      	ldr	r3, [r7, #0]
 8109436:	685a      	ldr	r2, [r3, #4]
 8109438:	687b      	ldr	r3, [r7, #4]
 810943a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810943c:	687b      	ldr	r3, [r7, #4]
 810943e:	697a      	ldr	r2, [r7, #20]
 8109440:	621a      	str	r2, [r3, #32]
}
 8109442:	bf00      	nop
 8109444:	371c      	adds	r7, #28
 8109446:	46bd      	mov	sp, r7
 8109448:	f85d 7b04 	ldr.w	r7, [sp], #4
 810944c:	4770      	bx	lr
 810944e:	bf00      	nop
 8109450:	40010000 	.word	0x40010000
 8109454:	40010400 	.word	0x40010400
 8109458:	40014000 	.word	0x40014000
 810945c:	40014400 	.word	0x40014400
 8109460:	40014800 	.word	0x40014800

08109464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109464:	b480      	push	{r7}
 8109466:	b087      	sub	sp, #28
 8109468:	af00      	add	r7, sp, #0
 810946a:	6078      	str	r0, [r7, #4]
 810946c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810946e:	687b      	ldr	r3, [r7, #4]
 8109470:	6a1b      	ldr	r3, [r3, #32]
 8109472:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8109476:	687b      	ldr	r3, [r7, #4]
 8109478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810947a:	687b      	ldr	r3, [r7, #4]
 810947c:	6a1b      	ldr	r3, [r3, #32]
 810947e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109480:	687b      	ldr	r3, [r7, #4]
 8109482:	685b      	ldr	r3, [r3, #4]
 8109484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8109486:	687b      	ldr	r3, [r7, #4]
 8109488:	69db      	ldr	r3, [r3, #28]
 810948a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810948c:	68fb      	ldr	r3, [r7, #12]
 810948e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8109492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8109498:	68fb      	ldr	r3, [r7, #12]
 810949a:	f023 0303 	bic.w	r3, r3, #3
 810949e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81094a0:	683b      	ldr	r3, [r7, #0]
 81094a2:	681b      	ldr	r3, [r3, #0]
 81094a4:	68fa      	ldr	r2, [r7, #12]
 81094a6:	4313      	orrs	r3, r2
 81094a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 81094aa:	697b      	ldr	r3, [r7, #20]
 81094ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81094b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 81094b2:	683b      	ldr	r3, [r7, #0]
 81094b4:	689b      	ldr	r3, [r3, #8]
 81094b6:	021b      	lsls	r3, r3, #8
 81094b8:	697a      	ldr	r2, [r7, #20]
 81094ba:	4313      	orrs	r3, r2
 81094bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 81094be:	687b      	ldr	r3, [r7, #4]
 81094c0:	4a27      	ldr	r2, [pc, #156]	; (8109560 <TIM_OC3_SetConfig+0xfc>)
 81094c2:	4293      	cmp	r3, r2
 81094c4:	d003      	beq.n	81094ce <TIM_OC3_SetConfig+0x6a>
 81094c6:	687b      	ldr	r3, [r7, #4]
 81094c8:	4a26      	ldr	r2, [pc, #152]	; (8109564 <TIM_OC3_SetConfig+0x100>)
 81094ca:	4293      	cmp	r3, r2
 81094cc:	d10d      	bne.n	81094ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 81094ce:	697b      	ldr	r3, [r7, #20]
 81094d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81094d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81094d6:	683b      	ldr	r3, [r7, #0]
 81094d8:	68db      	ldr	r3, [r3, #12]
 81094da:	021b      	lsls	r3, r3, #8
 81094dc:	697a      	ldr	r2, [r7, #20]
 81094de:	4313      	orrs	r3, r2
 81094e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 81094e2:	697b      	ldr	r3, [r7, #20]
 81094e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81094e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81094ea:	687b      	ldr	r3, [r7, #4]
 81094ec:	4a1c      	ldr	r2, [pc, #112]	; (8109560 <TIM_OC3_SetConfig+0xfc>)
 81094ee:	4293      	cmp	r3, r2
 81094f0:	d00f      	beq.n	8109512 <TIM_OC3_SetConfig+0xae>
 81094f2:	687b      	ldr	r3, [r7, #4]
 81094f4:	4a1b      	ldr	r2, [pc, #108]	; (8109564 <TIM_OC3_SetConfig+0x100>)
 81094f6:	4293      	cmp	r3, r2
 81094f8:	d00b      	beq.n	8109512 <TIM_OC3_SetConfig+0xae>
 81094fa:	687b      	ldr	r3, [r7, #4]
 81094fc:	4a1a      	ldr	r2, [pc, #104]	; (8109568 <TIM_OC3_SetConfig+0x104>)
 81094fe:	4293      	cmp	r3, r2
 8109500:	d007      	beq.n	8109512 <TIM_OC3_SetConfig+0xae>
 8109502:	687b      	ldr	r3, [r7, #4]
 8109504:	4a19      	ldr	r2, [pc, #100]	; (810956c <TIM_OC3_SetConfig+0x108>)
 8109506:	4293      	cmp	r3, r2
 8109508:	d003      	beq.n	8109512 <TIM_OC3_SetConfig+0xae>
 810950a:	687b      	ldr	r3, [r7, #4]
 810950c:	4a18      	ldr	r2, [pc, #96]	; (8109570 <TIM_OC3_SetConfig+0x10c>)
 810950e:	4293      	cmp	r3, r2
 8109510:	d113      	bne.n	810953a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8109512:	693b      	ldr	r3, [r7, #16]
 8109514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8109518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810951a:	693b      	ldr	r3, [r7, #16]
 810951c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8109520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8109522:	683b      	ldr	r3, [r7, #0]
 8109524:	695b      	ldr	r3, [r3, #20]
 8109526:	011b      	lsls	r3, r3, #4
 8109528:	693a      	ldr	r2, [r7, #16]
 810952a:	4313      	orrs	r3, r2
 810952c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810952e:	683b      	ldr	r3, [r7, #0]
 8109530:	699b      	ldr	r3, [r3, #24]
 8109532:	011b      	lsls	r3, r3, #4
 8109534:	693a      	ldr	r2, [r7, #16]
 8109536:	4313      	orrs	r3, r2
 8109538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810953a:	687b      	ldr	r3, [r7, #4]
 810953c:	693a      	ldr	r2, [r7, #16]
 810953e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8109540:	687b      	ldr	r3, [r7, #4]
 8109542:	68fa      	ldr	r2, [r7, #12]
 8109544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8109546:	683b      	ldr	r3, [r7, #0]
 8109548:	685a      	ldr	r2, [r3, #4]
 810954a:	687b      	ldr	r3, [r7, #4]
 810954c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810954e:	687b      	ldr	r3, [r7, #4]
 8109550:	697a      	ldr	r2, [r7, #20]
 8109552:	621a      	str	r2, [r3, #32]
}
 8109554:	bf00      	nop
 8109556:	371c      	adds	r7, #28
 8109558:	46bd      	mov	sp, r7
 810955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810955e:	4770      	bx	lr
 8109560:	40010000 	.word	0x40010000
 8109564:	40010400 	.word	0x40010400
 8109568:	40014000 	.word	0x40014000
 810956c:	40014400 	.word	0x40014400
 8109570:	40014800 	.word	0x40014800

08109574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109574:	b480      	push	{r7}
 8109576:	b087      	sub	sp, #28
 8109578:	af00      	add	r7, sp, #0
 810957a:	6078      	str	r0, [r7, #4]
 810957c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810957e:	687b      	ldr	r3, [r7, #4]
 8109580:	6a1b      	ldr	r3, [r3, #32]
 8109582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8109586:	687b      	ldr	r3, [r7, #4]
 8109588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810958a:	687b      	ldr	r3, [r7, #4]
 810958c:	6a1b      	ldr	r3, [r3, #32]
 810958e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109590:	687b      	ldr	r3, [r7, #4]
 8109592:	685b      	ldr	r3, [r3, #4]
 8109594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8109596:	687b      	ldr	r3, [r7, #4]
 8109598:	69db      	ldr	r3, [r3, #28]
 810959a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810959c:	68fb      	ldr	r3, [r7, #12]
 810959e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81095a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81095a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 81095a8:	68fb      	ldr	r3, [r7, #12]
 81095aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81095ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81095b0:	683b      	ldr	r3, [r7, #0]
 81095b2:	681b      	ldr	r3, [r3, #0]
 81095b4:	021b      	lsls	r3, r3, #8
 81095b6:	68fa      	ldr	r2, [r7, #12]
 81095b8:	4313      	orrs	r3, r2
 81095ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 81095bc:	693b      	ldr	r3, [r7, #16]
 81095be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81095c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81095c4:	683b      	ldr	r3, [r7, #0]
 81095c6:	689b      	ldr	r3, [r3, #8]
 81095c8:	031b      	lsls	r3, r3, #12
 81095ca:	693a      	ldr	r2, [r7, #16]
 81095cc:	4313      	orrs	r3, r2
 81095ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81095d0:	687b      	ldr	r3, [r7, #4]
 81095d2:	4a18      	ldr	r2, [pc, #96]	; (8109634 <TIM_OC4_SetConfig+0xc0>)
 81095d4:	4293      	cmp	r3, r2
 81095d6:	d00f      	beq.n	81095f8 <TIM_OC4_SetConfig+0x84>
 81095d8:	687b      	ldr	r3, [r7, #4]
 81095da:	4a17      	ldr	r2, [pc, #92]	; (8109638 <TIM_OC4_SetConfig+0xc4>)
 81095dc:	4293      	cmp	r3, r2
 81095de:	d00b      	beq.n	81095f8 <TIM_OC4_SetConfig+0x84>
 81095e0:	687b      	ldr	r3, [r7, #4]
 81095e2:	4a16      	ldr	r2, [pc, #88]	; (810963c <TIM_OC4_SetConfig+0xc8>)
 81095e4:	4293      	cmp	r3, r2
 81095e6:	d007      	beq.n	81095f8 <TIM_OC4_SetConfig+0x84>
 81095e8:	687b      	ldr	r3, [r7, #4]
 81095ea:	4a15      	ldr	r2, [pc, #84]	; (8109640 <TIM_OC4_SetConfig+0xcc>)
 81095ec:	4293      	cmp	r3, r2
 81095ee:	d003      	beq.n	81095f8 <TIM_OC4_SetConfig+0x84>
 81095f0:	687b      	ldr	r3, [r7, #4]
 81095f2:	4a14      	ldr	r2, [pc, #80]	; (8109644 <TIM_OC4_SetConfig+0xd0>)
 81095f4:	4293      	cmp	r3, r2
 81095f6:	d109      	bne.n	810960c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81095f8:	697b      	ldr	r3, [r7, #20]
 81095fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81095fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8109600:	683b      	ldr	r3, [r7, #0]
 8109602:	695b      	ldr	r3, [r3, #20]
 8109604:	019b      	lsls	r3, r3, #6
 8109606:	697a      	ldr	r2, [r7, #20]
 8109608:	4313      	orrs	r3, r2
 810960a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810960c:	687b      	ldr	r3, [r7, #4]
 810960e:	697a      	ldr	r2, [r7, #20]
 8109610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8109612:	687b      	ldr	r3, [r7, #4]
 8109614:	68fa      	ldr	r2, [r7, #12]
 8109616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8109618:	683b      	ldr	r3, [r7, #0]
 810961a:	685a      	ldr	r2, [r3, #4]
 810961c:	687b      	ldr	r3, [r7, #4]
 810961e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109620:	687b      	ldr	r3, [r7, #4]
 8109622:	693a      	ldr	r2, [r7, #16]
 8109624:	621a      	str	r2, [r3, #32]
}
 8109626:	bf00      	nop
 8109628:	371c      	adds	r7, #28
 810962a:	46bd      	mov	sp, r7
 810962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109630:	4770      	bx	lr
 8109632:	bf00      	nop
 8109634:	40010000 	.word	0x40010000
 8109638:	40010400 	.word	0x40010400
 810963c:	40014000 	.word	0x40014000
 8109640:	40014400 	.word	0x40014400
 8109644:	40014800 	.word	0x40014800

08109648 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8109648:	b480      	push	{r7}
 810964a:	b087      	sub	sp, #28
 810964c:	af00      	add	r7, sp, #0
 810964e:	6078      	str	r0, [r7, #4]
 8109650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8109652:	687b      	ldr	r3, [r7, #4]
 8109654:	6a1b      	ldr	r3, [r3, #32]
 8109656:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810965a:	687b      	ldr	r3, [r7, #4]
 810965c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810965e:	687b      	ldr	r3, [r7, #4]
 8109660:	6a1b      	ldr	r3, [r3, #32]
 8109662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109664:	687b      	ldr	r3, [r7, #4]
 8109666:	685b      	ldr	r3, [r3, #4]
 8109668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810966a:	687b      	ldr	r3, [r7, #4]
 810966c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810966e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8109670:	68fb      	ldr	r3, [r7, #12]
 8109672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8109676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810967a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810967c:	683b      	ldr	r3, [r7, #0]
 810967e:	681b      	ldr	r3, [r3, #0]
 8109680:	68fa      	ldr	r2, [r7, #12]
 8109682:	4313      	orrs	r3, r2
 8109684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8109686:	693b      	ldr	r3, [r7, #16]
 8109688:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810968c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810968e:	683b      	ldr	r3, [r7, #0]
 8109690:	689b      	ldr	r3, [r3, #8]
 8109692:	041b      	lsls	r3, r3, #16
 8109694:	693a      	ldr	r2, [r7, #16]
 8109696:	4313      	orrs	r3, r2
 8109698:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810969a:	687b      	ldr	r3, [r7, #4]
 810969c:	4a17      	ldr	r2, [pc, #92]	; (81096fc <TIM_OC5_SetConfig+0xb4>)
 810969e:	4293      	cmp	r3, r2
 81096a0:	d00f      	beq.n	81096c2 <TIM_OC5_SetConfig+0x7a>
 81096a2:	687b      	ldr	r3, [r7, #4]
 81096a4:	4a16      	ldr	r2, [pc, #88]	; (8109700 <TIM_OC5_SetConfig+0xb8>)
 81096a6:	4293      	cmp	r3, r2
 81096a8:	d00b      	beq.n	81096c2 <TIM_OC5_SetConfig+0x7a>
 81096aa:	687b      	ldr	r3, [r7, #4]
 81096ac:	4a15      	ldr	r2, [pc, #84]	; (8109704 <TIM_OC5_SetConfig+0xbc>)
 81096ae:	4293      	cmp	r3, r2
 81096b0:	d007      	beq.n	81096c2 <TIM_OC5_SetConfig+0x7a>
 81096b2:	687b      	ldr	r3, [r7, #4]
 81096b4:	4a14      	ldr	r2, [pc, #80]	; (8109708 <TIM_OC5_SetConfig+0xc0>)
 81096b6:	4293      	cmp	r3, r2
 81096b8:	d003      	beq.n	81096c2 <TIM_OC5_SetConfig+0x7a>
 81096ba:	687b      	ldr	r3, [r7, #4]
 81096bc:	4a13      	ldr	r2, [pc, #76]	; (810970c <TIM_OC5_SetConfig+0xc4>)
 81096be:	4293      	cmp	r3, r2
 81096c0:	d109      	bne.n	81096d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81096c2:	697b      	ldr	r3, [r7, #20]
 81096c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81096c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81096ca:	683b      	ldr	r3, [r7, #0]
 81096cc:	695b      	ldr	r3, [r3, #20]
 81096ce:	021b      	lsls	r3, r3, #8
 81096d0:	697a      	ldr	r2, [r7, #20]
 81096d2:	4313      	orrs	r3, r2
 81096d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81096d6:	687b      	ldr	r3, [r7, #4]
 81096d8:	697a      	ldr	r2, [r7, #20]
 81096da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81096dc:	687b      	ldr	r3, [r7, #4]
 81096de:	68fa      	ldr	r2, [r7, #12]
 81096e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81096e2:	683b      	ldr	r3, [r7, #0]
 81096e4:	685a      	ldr	r2, [r3, #4]
 81096e6:	687b      	ldr	r3, [r7, #4]
 81096e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81096ea:	687b      	ldr	r3, [r7, #4]
 81096ec:	693a      	ldr	r2, [r7, #16]
 81096ee:	621a      	str	r2, [r3, #32]
}
 81096f0:	bf00      	nop
 81096f2:	371c      	adds	r7, #28
 81096f4:	46bd      	mov	sp, r7
 81096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096fa:	4770      	bx	lr
 81096fc:	40010000 	.word	0x40010000
 8109700:	40010400 	.word	0x40010400
 8109704:	40014000 	.word	0x40014000
 8109708:	40014400 	.word	0x40014400
 810970c:	40014800 	.word	0x40014800

08109710 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8109710:	b480      	push	{r7}
 8109712:	b087      	sub	sp, #28
 8109714:	af00      	add	r7, sp, #0
 8109716:	6078      	str	r0, [r7, #4]
 8109718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810971a:	687b      	ldr	r3, [r7, #4]
 810971c:	6a1b      	ldr	r3, [r3, #32]
 810971e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8109722:	687b      	ldr	r3, [r7, #4]
 8109724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109726:	687b      	ldr	r3, [r7, #4]
 8109728:	6a1b      	ldr	r3, [r3, #32]
 810972a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810972c:	687b      	ldr	r3, [r7, #4]
 810972e:	685b      	ldr	r3, [r3, #4]
 8109730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8109732:	687b      	ldr	r3, [r7, #4]
 8109734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8109738:	68fb      	ldr	r3, [r7, #12]
 810973a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810973e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8109742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8109744:	683b      	ldr	r3, [r7, #0]
 8109746:	681b      	ldr	r3, [r3, #0]
 8109748:	021b      	lsls	r3, r3, #8
 810974a:	68fa      	ldr	r2, [r7, #12]
 810974c:	4313      	orrs	r3, r2
 810974e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8109750:	693b      	ldr	r3, [r7, #16]
 8109752:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8109756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8109758:	683b      	ldr	r3, [r7, #0]
 810975a:	689b      	ldr	r3, [r3, #8]
 810975c:	051b      	lsls	r3, r3, #20
 810975e:	693a      	ldr	r2, [r7, #16]
 8109760:	4313      	orrs	r3, r2
 8109762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109764:	687b      	ldr	r3, [r7, #4]
 8109766:	4a18      	ldr	r2, [pc, #96]	; (81097c8 <TIM_OC6_SetConfig+0xb8>)
 8109768:	4293      	cmp	r3, r2
 810976a:	d00f      	beq.n	810978c <TIM_OC6_SetConfig+0x7c>
 810976c:	687b      	ldr	r3, [r7, #4]
 810976e:	4a17      	ldr	r2, [pc, #92]	; (81097cc <TIM_OC6_SetConfig+0xbc>)
 8109770:	4293      	cmp	r3, r2
 8109772:	d00b      	beq.n	810978c <TIM_OC6_SetConfig+0x7c>
 8109774:	687b      	ldr	r3, [r7, #4]
 8109776:	4a16      	ldr	r2, [pc, #88]	; (81097d0 <TIM_OC6_SetConfig+0xc0>)
 8109778:	4293      	cmp	r3, r2
 810977a:	d007      	beq.n	810978c <TIM_OC6_SetConfig+0x7c>
 810977c:	687b      	ldr	r3, [r7, #4]
 810977e:	4a15      	ldr	r2, [pc, #84]	; (81097d4 <TIM_OC6_SetConfig+0xc4>)
 8109780:	4293      	cmp	r3, r2
 8109782:	d003      	beq.n	810978c <TIM_OC6_SetConfig+0x7c>
 8109784:	687b      	ldr	r3, [r7, #4]
 8109786:	4a14      	ldr	r2, [pc, #80]	; (81097d8 <TIM_OC6_SetConfig+0xc8>)
 8109788:	4293      	cmp	r3, r2
 810978a:	d109      	bne.n	81097a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810978c:	697b      	ldr	r3, [r7, #20]
 810978e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8109792:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8109794:	683b      	ldr	r3, [r7, #0]
 8109796:	695b      	ldr	r3, [r3, #20]
 8109798:	029b      	lsls	r3, r3, #10
 810979a:	697a      	ldr	r2, [r7, #20]
 810979c:	4313      	orrs	r3, r2
 810979e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81097a0:	687b      	ldr	r3, [r7, #4]
 81097a2:	697a      	ldr	r2, [r7, #20]
 81097a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81097a6:	687b      	ldr	r3, [r7, #4]
 81097a8:	68fa      	ldr	r2, [r7, #12]
 81097aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 81097ac:	683b      	ldr	r3, [r7, #0]
 81097ae:	685a      	ldr	r2, [r3, #4]
 81097b0:	687b      	ldr	r3, [r7, #4]
 81097b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81097b4:	687b      	ldr	r3, [r7, #4]
 81097b6:	693a      	ldr	r2, [r7, #16]
 81097b8:	621a      	str	r2, [r3, #32]
}
 81097ba:	bf00      	nop
 81097bc:	371c      	adds	r7, #28
 81097be:	46bd      	mov	sp, r7
 81097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097c4:	4770      	bx	lr
 81097c6:	bf00      	nop
 81097c8:	40010000 	.word	0x40010000
 81097cc:	40010400 	.word	0x40010400
 81097d0:	40014000 	.word	0x40014000
 81097d4:	40014400 	.word	0x40014400
 81097d8:	40014800 	.word	0x40014800

081097dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81097dc:	b480      	push	{r7}
 81097de:	b087      	sub	sp, #28
 81097e0:	af00      	add	r7, sp, #0
 81097e2:	60f8      	str	r0, [r7, #12]
 81097e4:	60b9      	str	r1, [r7, #8]
 81097e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81097e8:	68fb      	ldr	r3, [r7, #12]
 81097ea:	6a1b      	ldr	r3, [r3, #32]
 81097ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81097ee:	68fb      	ldr	r3, [r7, #12]
 81097f0:	6a1b      	ldr	r3, [r3, #32]
 81097f2:	f023 0201 	bic.w	r2, r3, #1
 81097f6:	68fb      	ldr	r3, [r7, #12]
 81097f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81097fa:	68fb      	ldr	r3, [r7, #12]
 81097fc:	699b      	ldr	r3, [r3, #24]
 81097fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8109800:	693b      	ldr	r3, [r7, #16]
 8109802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8109806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8109808:	687b      	ldr	r3, [r7, #4]
 810980a:	011b      	lsls	r3, r3, #4
 810980c:	693a      	ldr	r2, [r7, #16]
 810980e:	4313      	orrs	r3, r2
 8109810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8109812:	697b      	ldr	r3, [r7, #20]
 8109814:	f023 030a 	bic.w	r3, r3, #10
 8109818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810981a:	697a      	ldr	r2, [r7, #20]
 810981c:	68bb      	ldr	r3, [r7, #8]
 810981e:	4313      	orrs	r3, r2
 8109820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8109822:	68fb      	ldr	r3, [r7, #12]
 8109824:	693a      	ldr	r2, [r7, #16]
 8109826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8109828:	68fb      	ldr	r3, [r7, #12]
 810982a:	697a      	ldr	r2, [r7, #20]
 810982c:	621a      	str	r2, [r3, #32]
}
 810982e:	bf00      	nop
 8109830:	371c      	adds	r7, #28
 8109832:	46bd      	mov	sp, r7
 8109834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109838:	4770      	bx	lr

0810983a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810983a:	b480      	push	{r7}
 810983c:	b087      	sub	sp, #28
 810983e:	af00      	add	r7, sp, #0
 8109840:	60f8      	str	r0, [r7, #12]
 8109842:	60b9      	str	r1, [r7, #8]
 8109844:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8109846:	68fb      	ldr	r3, [r7, #12]
 8109848:	6a1b      	ldr	r3, [r3, #32]
 810984a:	f023 0210 	bic.w	r2, r3, #16
 810984e:	68fb      	ldr	r3, [r7, #12]
 8109850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8109852:	68fb      	ldr	r3, [r7, #12]
 8109854:	699b      	ldr	r3, [r3, #24]
 8109856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8109858:	68fb      	ldr	r3, [r7, #12]
 810985a:	6a1b      	ldr	r3, [r3, #32]
 810985c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810985e:	697b      	ldr	r3, [r7, #20]
 8109860:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8109864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8109866:	687b      	ldr	r3, [r7, #4]
 8109868:	031b      	lsls	r3, r3, #12
 810986a:	697a      	ldr	r2, [r7, #20]
 810986c:	4313      	orrs	r3, r2
 810986e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8109870:	693b      	ldr	r3, [r7, #16]
 8109872:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8109876:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8109878:	68bb      	ldr	r3, [r7, #8]
 810987a:	011b      	lsls	r3, r3, #4
 810987c:	693a      	ldr	r2, [r7, #16]
 810987e:	4313      	orrs	r3, r2
 8109880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8109882:	68fb      	ldr	r3, [r7, #12]
 8109884:	697a      	ldr	r2, [r7, #20]
 8109886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8109888:	68fb      	ldr	r3, [r7, #12]
 810988a:	693a      	ldr	r2, [r7, #16]
 810988c:	621a      	str	r2, [r3, #32]
}
 810988e:	bf00      	nop
 8109890:	371c      	adds	r7, #28
 8109892:	46bd      	mov	sp, r7
 8109894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109898:	4770      	bx	lr

0810989a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810989a:	b480      	push	{r7}
 810989c:	b085      	sub	sp, #20
 810989e:	af00      	add	r7, sp, #0
 81098a0:	6078      	str	r0, [r7, #4]
 81098a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 81098a4:	687b      	ldr	r3, [r7, #4]
 81098a6:	689b      	ldr	r3, [r3, #8]
 81098a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 81098aa:	68fb      	ldr	r3, [r7, #12]
 81098ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81098b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81098b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81098b6:	683a      	ldr	r2, [r7, #0]
 81098b8:	68fb      	ldr	r3, [r7, #12]
 81098ba:	4313      	orrs	r3, r2
 81098bc:	f043 0307 	orr.w	r3, r3, #7
 81098c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81098c2:	687b      	ldr	r3, [r7, #4]
 81098c4:	68fa      	ldr	r2, [r7, #12]
 81098c6:	609a      	str	r2, [r3, #8]
}
 81098c8:	bf00      	nop
 81098ca:	3714      	adds	r7, #20
 81098cc:	46bd      	mov	sp, r7
 81098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098d2:	4770      	bx	lr

081098d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 81098d4:	b480      	push	{r7}
 81098d6:	b087      	sub	sp, #28
 81098d8:	af00      	add	r7, sp, #0
 81098da:	60f8      	str	r0, [r7, #12]
 81098dc:	60b9      	str	r1, [r7, #8]
 81098de:	607a      	str	r2, [r7, #4]
 81098e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 81098e2:	68fb      	ldr	r3, [r7, #12]
 81098e4:	689b      	ldr	r3, [r3, #8]
 81098e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81098e8:	697b      	ldr	r3, [r7, #20]
 81098ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81098ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81098f0:	683b      	ldr	r3, [r7, #0]
 81098f2:	021a      	lsls	r2, r3, #8
 81098f4:	687b      	ldr	r3, [r7, #4]
 81098f6:	431a      	orrs	r2, r3
 81098f8:	68bb      	ldr	r3, [r7, #8]
 81098fa:	4313      	orrs	r3, r2
 81098fc:	697a      	ldr	r2, [r7, #20]
 81098fe:	4313      	orrs	r3, r2
 8109900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8109902:	68fb      	ldr	r3, [r7, #12]
 8109904:	697a      	ldr	r2, [r7, #20]
 8109906:	609a      	str	r2, [r3, #8]
}
 8109908:	bf00      	nop
 810990a:	371c      	adds	r7, #28
 810990c:	46bd      	mov	sp, r7
 810990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109912:	4770      	bx	lr

08109914 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8109914:	b480      	push	{r7}
 8109916:	b087      	sub	sp, #28
 8109918:	af00      	add	r7, sp, #0
 810991a:	60f8      	str	r0, [r7, #12]
 810991c:	60b9      	str	r1, [r7, #8]
 810991e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8109920:	68bb      	ldr	r3, [r7, #8]
 8109922:	f003 031f 	and.w	r3, r3, #31
 8109926:	2201      	movs	r2, #1
 8109928:	fa02 f303 	lsl.w	r3, r2, r3
 810992c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810992e:	68fb      	ldr	r3, [r7, #12]
 8109930:	6a1a      	ldr	r2, [r3, #32]
 8109932:	697b      	ldr	r3, [r7, #20]
 8109934:	43db      	mvns	r3, r3
 8109936:	401a      	ands	r2, r3
 8109938:	68fb      	ldr	r3, [r7, #12]
 810993a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 810993c:	68fb      	ldr	r3, [r7, #12]
 810993e:	6a1a      	ldr	r2, [r3, #32]
 8109940:	68bb      	ldr	r3, [r7, #8]
 8109942:	f003 031f 	and.w	r3, r3, #31
 8109946:	6879      	ldr	r1, [r7, #4]
 8109948:	fa01 f303 	lsl.w	r3, r1, r3
 810994c:	431a      	orrs	r2, r3
 810994e:	68fb      	ldr	r3, [r7, #12]
 8109950:	621a      	str	r2, [r3, #32]
}
 8109952:	bf00      	nop
 8109954:	371c      	adds	r7, #28
 8109956:	46bd      	mov	sp, r7
 8109958:	f85d 7b04 	ldr.w	r7, [sp], #4
 810995c:	4770      	bx	lr
	...

08109960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8109960:	b480      	push	{r7}
 8109962:	b085      	sub	sp, #20
 8109964:	af00      	add	r7, sp, #0
 8109966:	6078      	str	r0, [r7, #4]
 8109968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810996a:	687b      	ldr	r3, [r7, #4]
 810996c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8109970:	2b01      	cmp	r3, #1
 8109972:	d101      	bne.n	8109978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8109974:	2302      	movs	r3, #2
 8109976:	e06d      	b.n	8109a54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8109978:	687b      	ldr	r3, [r7, #4]
 810997a:	2201      	movs	r2, #1
 810997c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109980:	687b      	ldr	r3, [r7, #4]
 8109982:	2202      	movs	r2, #2
 8109984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8109988:	687b      	ldr	r3, [r7, #4]
 810998a:	681b      	ldr	r3, [r3, #0]
 810998c:	685b      	ldr	r3, [r3, #4]
 810998e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8109990:	687b      	ldr	r3, [r7, #4]
 8109992:	681b      	ldr	r3, [r3, #0]
 8109994:	689b      	ldr	r3, [r3, #8]
 8109996:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8109998:	687b      	ldr	r3, [r7, #4]
 810999a:	681b      	ldr	r3, [r3, #0]
 810999c:	4a30      	ldr	r2, [pc, #192]	; (8109a60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810999e:	4293      	cmp	r3, r2
 81099a0:	d004      	beq.n	81099ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81099a2:	687b      	ldr	r3, [r7, #4]
 81099a4:	681b      	ldr	r3, [r3, #0]
 81099a6:	4a2f      	ldr	r2, [pc, #188]	; (8109a64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81099a8:	4293      	cmp	r3, r2
 81099aa:	d108      	bne.n	81099be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81099ac:	68fb      	ldr	r3, [r7, #12]
 81099ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81099b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81099b4:	683b      	ldr	r3, [r7, #0]
 81099b6:	685b      	ldr	r3, [r3, #4]
 81099b8:	68fa      	ldr	r2, [r7, #12]
 81099ba:	4313      	orrs	r3, r2
 81099bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81099be:	68fb      	ldr	r3, [r7, #12]
 81099c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81099c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81099c6:	683b      	ldr	r3, [r7, #0]
 81099c8:	681b      	ldr	r3, [r3, #0]
 81099ca:	68fa      	ldr	r2, [r7, #12]
 81099cc:	4313      	orrs	r3, r2
 81099ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81099d0:	687b      	ldr	r3, [r7, #4]
 81099d2:	681b      	ldr	r3, [r3, #0]
 81099d4:	68fa      	ldr	r2, [r7, #12]
 81099d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81099d8:	687b      	ldr	r3, [r7, #4]
 81099da:	681b      	ldr	r3, [r3, #0]
 81099dc:	4a20      	ldr	r2, [pc, #128]	; (8109a60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81099de:	4293      	cmp	r3, r2
 81099e0:	d022      	beq.n	8109a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099e2:	687b      	ldr	r3, [r7, #4]
 81099e4:	681b      	ldr	r3, [r3, #0]
 81099e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81099ea:	d01d      	beq.n	8109a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099ec:	687b      	ldr	r3, [r7, #4]
 81099ee:	681b      	ldr	r3, [r3, #0]
 81099f0:	4a1d      	ldr	r2, [pc, #116]	; (8109a68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81099f2:	4293      	cmp	r3, r2
 81099f4:	d018      	beq.n	8109a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099f6:	687b      	ldr	r3, [r7, #4]
 81099f8:	681b      	ldr	r3, [r3, #0]
 81099fa:	4a1c      	ldr	r2, [pc, #112]	; (8109a6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81099fc:	4293      	cmp	r3, r2
 81099fe:	d013      	beq.n	8109a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109a00:	687b      	ldr	r3, [r7, #4]
 8109a02:	681b      	ldr	r3, [r3, #0]
 8109a04:	4a1a      	ldr	r2, [pc, #104]	; (8109a70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8109a06:	4293      	cmp	r3, r2
 8109a08:	d00e      	beq.n	8109a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109a0a:	687b      	ldr	r3, [r7, #4]
 8109a0c:	681b      	ldr	r3, [r3, #0]
 8109a0e:	4a15      	ldr	r2, [pc, #84]	; (8109a64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8109a10:	4293      	cmp	r3, r2
 8109a12:	d009      	beq.n	8109a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109a14:	687b      	ldr	r3, [r7, #4]
 8109a16:	681b      	ldr	r3, [r3, #0]
 8109a18:	4a16      	ldr	r2, [pc, #88]	; (8109a74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8109a1a:	4293      	cmp	r3, r2
 8109a1c:	d004      	beq.n	8109a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109a1e:	687b      	ldr	r3, [r7, #4]
 8109a20:	681b      	ldr	r3, [r3, #0]
 8109a22:	4a15      	ldr	r2, [pc, #84]	; (8109a78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8109a24:	4293      	cmp	r3, r2
 8109a26:	d10c      	bne.n	8109a42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8109a28:	68bb      	ldr	r3, [r7, #8]
 8109a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8109a2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8109a30:	683b      	ldr	r3, [r7, #0]
 8109a32:	689b      	ldr	r3, [r3, #8]
 8109a34:	68ba      	ldr	r2, [r7, #8]
 8109a36:	4313      	orrs	r3, r2
 8109a38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8109a3a:	687b      	ldr	r3, [r7, #4]
 8109a3c:	681b      	ldr	r3, [r3, #0]
 8109a3e:	68ba      	ldr	r2, [r7, #8]
 8109a40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8109a42:	687b      	ldr	r3, [r7, #4]
 8109a44:	2201      	movs	r2, #1
 8109a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8109a4a:	687b      	ldr	r3, [r7, #4]
 8109a4c:	2200      	movs	r2, #0
 8109a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8109a52:	2300      	movs	r3, #0
}
 8109a54:	4618      	mov	r0, r3
 8109a56:	3714      	adds	r7, #20
 8109a58:	46bd      	mov	sp, r7
 8109a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a5e:	4770      	bx	lr
 8109a60:	40010000 	.word	0x40010000
 8109a64:	40010400 	.word	0x40010400
 8109a68:	40000400 	.word	0x40000400
 8109a6c:	40000800 	.word	0x40000800
 8109a70:	40000c00 	.word	0x40000c00
 8109a74:	40001800 	.word	0x40001800
 8109a78:	40014000 	.word	0x40014000

08109a7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8109a7c:	b480      	push	{r7}
 8109a7e:	b085      	sub	sp, #20
 8109a80:	af00      	add	r7, sp, #0
 8109a82:	6078      	str	r0, [r7, #4]
 8109a84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8109a86:	2300      	movs	r3, #0
 8109a88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8109a8a:	687b      	ldr	r3, [r7, #4]
 8109a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8109a90:	2b01      	cmp	r3, #1
 8109a92:	d101      	bne.n	8109a98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8109a94:	2302      	movs	r3, #2
 8109a96:	e065      	b.n	8109b64 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8109a98:	687b      	ldr	r3, [r7, #4]
 8109a9a:	2201      	movs	r2, #1
 8109a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8109aa0:	68fb      	ldr	r3, [r7, #12]
 8109aa2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8109aa6:	683b      	ldr	r3, [r7, #0]
 8109aa8:	68db      	ldr	r3, [r3, #12]
 8109aaa:	4313      	orrs	r3, r2
 8109aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8109aae:	68fb      	ldr	r3, [r7, #12]
 8109ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8109ab4:	683b      	ldr	r3, [r7, #0]
 8109ab6:	689b      	ldr	r3, [r3, #8]
 8109ab8:	4313      	orrs	r3, r2
 8109aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8109abc:	68fb      	ldr	r3, [r7, #12]
 8109abe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8109ac2:	683b      	ldr	r3, [r7, #0]
 8109ac4:	685b      	ldr	r3, [r3, #4]
 8109ac6:	4313      	orrs	r3, r2
 8109ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8109aca:	68fb      	ldr	r3, [r7, #12]
 8109acc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8109ad0:	683b      	ldr	r3, [r7, #0]
 8109ad2:	681b      	ldr	r3, [r3, #0]
 8109ad4:	4313      	orrs	r3, r2
 8109ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8109ad8:	68fb      	ldr	r3, [r7, #12]
 8109ada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8109ade:	683b      	ldr	r3, [r7, #0]
 8109ae0:	691b      	ldr	r3, [r3, #16]
 8109ae2:	4313      	orrs	r3, r2
 8109ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8109ae6:	68fb      	ldr	r3, [r7, #12]
 8109ae8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8109aec:	683b      	ldr	r3, [r7, #0]
 8109aee:	695b      	ldr	r3, [r3, #20]
 8109af0:	4313      	orrs	r3, r2
 8109af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8109af4:	68fb      	ldr	r3, [r7, #12]
 8109af6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8109afa:	683b      	ldr	r3, [r7, #0]
 8109afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109afe:	4313      	orrs	r3, r2
 8109b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8109b02:	68fb      	ldr	r3, [r7, #12]
 8109b04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8109b08:	683b      	ldr	r3, [r7, #0]
 8109b0a:	699b      	ldr	r3, [r3, #24]
 8109b0c:	041b      	lsls	r3, r3, #16
 8109b0e:	4313      	orrs	r3, r2
 8109b10:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8109b12:	687b      	ldr	r3, [r7, #4]
 8109b14:	681b      	ldr	r3, [r3, #0]
 8109b16:	4a16      	ldr	r2, [pc, #88]	; (8109b70 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8109b18:	4293      	cmp	r3, r2
 8109b1a:	d004      	beq.n	8109b26 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8109b1c:	687b      	ldr	r3, [r7, #4]
 8109b1e:	681b      	ldr	r3, [r3, #0]
 8109b20:	4a14      	ldr	r2, [pc, #80]	; (8109b74 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8109b22:	4293      	cmp	r3, r2
 8109b24:	d115      	bne.n	8109b52 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8109b26:	68fb      	ldr	r3, [r7, #12]
 8109b28:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8109b2c:	683b      	ldr	r3, [r7, #0]
 8109b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109b30:	051b      	lsls	r3, r3, #20
 8109b32:	4313      	orrs	r3, r2
 8109b34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8109b36:	68fb      	ldr	r3, [r7, #12]
 8109b38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8109b3c:	683b      	ldr	r3, [r7, #0]
 8109b3e:	69db      	ldr	r3, [r3, #28]
 8109b40:	4313      	orrs	r3, r2
 8109b42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8109b44:	68fb      	ldr	r3, [r7, #12]
 8109b46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8109b4a:	683b      	ldr	r3, [r7, #0]
 8109b4c:	6a1b      	ldr	r3, [r3, #32]
 8109b4e:	4313      	orrs	r3, r2
 8109b50:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8109b52:	687b      	ldr	r3, [r7, #4]
 8109b54:	681b      	ldr	r3, [r3, #0]
 8109b56:	68fa      	ldr	r2, [r7, #12]
 8109b58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8109b5a:	687b      	ldr	r3, [r7, #4]
 8109b5c:	2200      	movs	r2, #0
 8109b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8109b62:	2300      	movs	r3, #0
}
 8109b64:	4618      	mov	r0, r3
 8109b66:	3714      	adds	r7, #20
 8109b68:	46bd      	mov	sp, r7
 8109b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b6e:	4770      	bx	lr
 8109b70:	40010000 	.word	0x40010000
 8109b74:	40010400 	.word	0x40010400

08109b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8109b78:	b480      	push	{r7}
 8109b7a:	b083      	sub	sp, #12
 8109b7c:	af00      	add	r7, sp, #0
 8109b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8109b80:	bf00      	nop
 8109b82:	370c      	adds	r7, #12
 8109b84:	46bd      	mov	sp, r7
 8109b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b8a:	4770      	bx	lr

08109b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8109b8c:	b480      	push	{r7}
 8109b8e:	b083      	sub	sp, #12
 8109b90:	af00      	add	r7, sp, #0
 8109b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8109b94:	bf00      	nop
 8109b96:	370c      	adds	r7, #12
 8109b98:	46bd      	mov	sp, r7
 8109b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b9e:	4770      	bx	lr

08109ba0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8109ba0:	b480      	push	{r7}
 8109ba2:	b083      	sub	sp, #12
 8109ba4:	af00      	add	r7, sp, #0
 8109ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8109ba8:	bf00      	nop
 8109baa:	370c      	adds	r7, #12
 8109bac:	46bd      	mov	sp, r7
 8109bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bb2:	4770      	bx	lr

08109bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8109bb4:	b580      	push	{r7, lr}
 8109bb6:	b082      	sub	sp, #8
 8109bb8:	af00      	add	r7, sp, #0
 8109bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8109bbc:	687b      	ldr	r3, [r7, #4]
 8109bbe:	2b00      	cmp	r3, #0
 8109bc0:	d101      	bne.n	8109bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8109bc2:	2301      	movs	r3, #1
 8109bc4:	e042      	b.n	8109c4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8109bc6:	687b      	ldr	r3, [r7, #4]
 8109bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109bcc:	2b00      	cmp	r3, #0
 8109bce:	d106      	bne.n	8109bde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8109bd0:	687b      	ldr	r3, [r7, #4]
 8109bd2:	2200      	movs	r2, #0
 8109bd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8109bd8:	6878      	ldr	r0, [r7, #4]
 8109bda:	f7f9 f82f 	bl	8102c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8109bde:	687b      	ldr	r3, [r7, #4]
 8109be0:	2224      	movs	r2, #36	; 0x24
 8109be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8109be6:	687b      	ldr	r3, [r7, #4]
 8109be8:	681b      	ldr	r3, [r3, #0]
 8109bea:	681a      	ldr	r2, [r3, #0]
 8109bec:	687b      	ldr	r3, [r7, #4]
 8109bee:	681b      	ldr	r3, [r3, #0]
 8109bf0:	f022 0201 	bic.w	r2, r2, #1
 8109bf4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8109bf6:	6878      	ldr	r0, [r7, #4]
 8109bf8:	f000 f8ba 	bl	8109d70 <UART_SetConfig>
 8109bfc:	4603      	mov	r3, r0
 8109bfe:	2b01      	cmp	r3, #1
 8109c00:	d101      	bne.n	8109c06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8109c02:	2301      	movs	r3, #1
 8109c04:	e022      	b.n	8109c4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8109c06:	687b      	ldr	r3, [r7, #4]
 8109c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109c0a:	2b00      	cmp	r3, #0
 8109c0c:	d002      	beq.n	8109c14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8109c0e:	6878      	ldr	r0, [r7, #4]
 8109c10:	f000 fe16 	bl	810a840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8109c14:	687b      	ldr	r3, [r7, #4]
 8109c16:	681b      	ldr	r3, [r3, #0]
 8109c18:	685a      	ldr	r2, [r3, #4]
 8109c1a:	687b      	ldr	r3, [r7, #4]
 8109c1c:	681b      	ldr	r3, [r3, #0]
 8109c1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8109c22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8109c24:	687b      	ldr	r3, [r7, #4]
 8109c26:	681b      	ldr	r3, [r3, #0]
 8109c28:	689a      	ldr	r2, [r3, #8]
 8109c2a:	687b      	ldr	r3, [r7, #4]
 8109c2c:	681b      	ldr	r3, [r3, #0]
 8109c2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8109c32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8109c34:	687b      	ldr	r3, [r7, #4]
 8109c36:	681b      	ldr	r3, [r3, #0]
 8109c38:	681a      	ldr	r2, [r3, #0]
 8109c3a:	687b      	ldr	r3, [r7, #4]
 8109c3c:	681b      	ldr	r3, [r3, #0]
 8109c3e:	f042 0201 	orr.w	r2, r2, #1
 8109c42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8109c44:	6878      	ldr	r0, [r7, #4]
 8109c46:	f000 fe9d 	bl	810a984 <UART_CheckIdleState>
 8109c4a:	4603      	mov	r3, r0
}
 8109c4c:	4618      	mov	r0, r3
 8109c4e:	3708      	adds	r7, #8
 8109c50:	46bd      	mov	sp, r7
 8109c52:	bd80      	pop	{r7, pc}

08109c54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8109c54:	b580      	push	{r7, lr}
 8109c56:	b08a      	sub	sp, #40	; 0x28
 8109c58:	af02      	add	r7, sp, #8
 8109c5a:	60f8      	str	r0, [r7, #12]
 8109c5c:	60b9      	str	r1, [r7, #8]
 8109c5e:	603b      	str	r3, [r7, #0]
 8109c60:	4613      	mov	r3, r2
 8109c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8109c64:	68fb      	ldr	r3, [r7, #12]
 8109c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109c6a:	2b20      	cmp	r3, #32
 8109c6c:	d17b      	bne.n	8109d66 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8109c6e:	68bb      	ldr	r3, [r7, #8]
 8109c70:	2b00      	cmp	r3, #0
 8109c72:	d002      	beq.n	8109c7a <HAL_UART_Transmit+0x26>
 8109c74:	88fb      	ldrh	r3, [r7, #6]
 8109c76:	2b00      	cmp	r3, #0
 8109c78:	d101      	bne.n	8109c7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8109c7a:	2301      	movs	r3, #1
 8109c7c:	e074      	b.n	8109d68 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109c7e:	68fb      	ldr	r3, [r7, #12]
 8109c80:	2200      	movs	r2, #0
 8109c82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8109c86:	68fb      	ldr	r3, [r7, #12]
 8109c88:	2221      	movs	r2, #33	; 0x21
 8109c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8109c8e:	f7f9 fa0b 	bl	81030a8 <HAL_GetTick>
 8109c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8109c94:	68fb      	ldr	r3, [r7, #12]
 8109c96:	88fa      	ldrh	r2, [r7, #6]
 8109c98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8109c9c:	68fb      	ldr	r3, [r7, #12]
 8109c9e:	88fa      	ldrh	r2, [r7, #6]
 8109ca0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8109ca4:	68fb      	ldr	r3, [r7, #12]
 8109ca6:	689b      	ldr	r3, [r3, #8]
 8109ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109cac:	d108      	bne.n	8109cc0 <HAL_UART_Transmit+0x6c>
 8109cae:	68fb      	ldr	r3, [r7, #12]
 8109cb0:	691b      	ldr	r3, [r3, #16]
 8109cb2:	2b00      	cmp	r3, #0
 8109cb4:	d104      	bne.n	8109cc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8109cb6:	2300      	movs	r3, #0
 8109cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8109cba:	68bb      	ldr	r3, [r7, #8]
 8109cbc:	61bb      	str	r3, [r7, #24]
 8109cbe:	e003      	b.n	8109cc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8109cc0:	68bb      	ldr	r3, [r7, #8]
 8109cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8109cc4:	2300      	movs	r3, #0
 8109cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8109cc8:	e030      	b.n	8109d2c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8109cca:	683b      	ldr	r3, [r7, #0]
 8109ccc:	9300      	str	r3, [sp, #0]
 8109cce:	697b      	ldr	r3, [r7, #20]
 8109cd0:	2200      	movs	r2, #0
 8109cd2:	2180      	movs	r1, #128	; 0x80
 8109cd4:	68f8      	ldr	r0, [r7, #12]
 8109cd6:	f000 feff 	bl	810aad8 <UART_WaitOnFlagUntilTimeout>
 8109cda:	4603      	mov	r3, r0
 8109cdc:	2b00      	cmp	r3, #0
 8109cde:	d005      	beq.n	8109cec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8109ce0:	68fb      	ldr	r3, [r7, #12]
 8109ce2:	2220      	movs	r2, #32
 8109ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8109ce8:	2303      	movs	r3, #3
 8109cea:	e03d      	b.n	8109d68 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8109cec:	69fb      	ldr	r3, [r7, #28]
 8109cee:	2b00      	cmp	r3, #0
 8109cf0:	d10b      	bne.n	8109d0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8109cf2:	69bb      	ldr	r3, [r7, #24]
 8109cf4:	881b      	ldrh	r3, [r3, #0]
 8109cf6:	461a      	mov	r2, r3
 8109cf8:	68fb      	ldr	r3, [r7, #12]
 8109cfa:	681b      	ldr	r3, [r3, #0]
 8109cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8109d00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8109d02:	69bb      	ldr	r3, [r7, #24]
 8109d04:	3302      	adds	r3, #2
 8109d06:	61bb      	str	r3, [r7, #24]
 8109d08:	e007      	b.n	8109d1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8109d0a:	69fb      	ldr	r3, [r7, #28]
 8109d0c:	781a      	ldrb	r2, [r3, #0]
 8109d0e:	68fb      	ldr	r3, [r7, #12]
 8109d10:	681b      	ldr	r3, [r3, #0]
 8109d12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8109d14:	69fb      	ldr	r3, [r7, #28]
 8109d16:	3301      	adds	r3, #1
 8109d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8109d1a:	68fb      	ldr	r3, [r7, #12]
 8109d1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8109d20:	b29b      	uxth	r3, r3
 8109d22:	3b01      	subs	r3, #1
 8109d24:	b29a      	uxth	r2, r3
 8109d26:	68fb      	ldr	r3, [r7, #12]
 8109d28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8109d2c:	68fb      	ldr	r3, [r7, #12]
 8109d2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8109d32:	b29b      	uxth	r3, r3
 8109d34:	2b00      	cmp	r3, #0
 8109d36:	d1c8      	bne.n	8109cca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8109d38:	683b      	ldr	r3, [r7, #0]
 8109d3a:	9300      	str	r3, [sp, #0]
 8109d3c:	697b      	ldr	r3, [r7, #20]
 8109d3e:	2200      	movs	r2, #0
 8109d40:	2140      	movs	r1, #64	; 0x40
 8109d42:	68f8      	ldr	r0, [r7, #12]
 8109d44:	f000 fec8 	bl	810aad8 <UART_WaitOnFlagUntilTimeout>
 8109d48:	4603      	mov	r3, r0
 8109d4a:	2b00      	cmp	r3, #0
 8109d4c:	d005      	beq.n	8109d5a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8109d4e:	68fb      	ldr	r3, [r7, #12]
 8109d50:	2220      	movs	r2, #32
 8109d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8109d56:	2303      	movs	r3, #3
 8109d58:	e006      	b.n	8109d68 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8109d5a:	68fb      	ldr	r3, [r7, #12]
 8109d5c:	2220      	movs	r2, #32
 8109d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8109d62:	2300      	movs	r3, #0
 8109d64:	e000      	b.n	8109d68 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8109d66:	2302      	movs	r3, #2
  }
}
 8109d68:	4618      	mov	r0, r3
 8109d6a:	3720      	adds	r7, #32
 8109d6c:	46bd      	mov	sp, r7
 8109d6e:	bd80      	pop	{r7, pc}

08109d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8109d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8109d74:	b092      	sub	sp, #72	; 0x48
 8109d76:	af00      	add	r7, sp, #0
 8109d78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8109d7a:	2300      	movs	r3, #0
 8109d7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8109d80:	697b      	ldr	r3, [r7, #20]
 8109d82:	689a      	ldr	r2, [r3, #8]
 8109d84:	697b      	ldr	r3, [r7, #20]
 8109d86:	691b      	ldr	r3, [r3, #16]
 8109d88:	431a      	orrs	r2, r3
 8109d8a:	697b      	ldr	r3, [r7, #20]
 8109d8c:	695b      	ldr	r3, [r3, #20]
 8109d8e:	431a      	orrs	r2, r3
 8109d90:	697b      	ldr	r3, [r7, #20]
 8109d92:	69db      	ldr	r3, [r3, #28]
 8109d94:	4313      	orrs	r3, r2
 8109d96:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8109d98:	697b      	ldr	r3, [r7, #20]
 8109d9a:	681b      	ldr	r3, [r3, #0]
 8109d9c:	681a      	ldr	r2, [r3, #0]
 8109d9e:	4bbd      	ldr	r3, [pc, #756]	; (810a094 <UART_SetConfig+0x324>)
 8109da0:	4013      	ands	r3, r2
 8109da2:	697a      	ldr	r2, [r7, #20]
 8109da4:	6812      	ldr	r2, [r2, #0]
 8109da6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109da8:	430b      	orrs	r3, r1
 8109daa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8109dac:	697b      	ldr	r3, [r7, #20]
 8109dae:	681b      	ldr	r3, [r3, #0]
 8109db0:	685b      	ldr	r3, [r3, #4]
 8109db2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8109db6:	697b      	ldr	r3, [r7, #20]
 8109db8:	68da      	ldr	r2, [r3, #12]
 8109dba:	697b      	ldr	r3, [r7, #20]
 8109dbc:	681b      	ldr	r3, [r3, #0]
 8109dbe:	430a      	orrs	r2, r1
 8109dc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8109dc2:	697b      	ldr	r3, [r7, #20]
 8109dc4:	699b      	ldr	r3, [r3, #24]
 8109dc6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8109dc8:	697b      	ldr	r3, [r7, #20]
 8109dca:	681b      	ldr	r3, [r3, #0]
 8109dcc:	4ab2      	ldr	r2, [pc, #712]	; (810a098 <UART_SetConfig+0x328>)
 8109dce:	4293      	cmp	r3, r2
 8109dd0:	d004      	beq.n	8109ddc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8109dd2:	697b      	ldr	r3, [r7, #20]
 8109dd4:	6a1b      	ldr	r3, [r3, #32]
 8109dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8109dd8:	4313      	orrs	r3, r2
 8109dda:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8109ddc:	697b      	ldr	r3, [r7, #20]
 8109dde:	681b      	ldr	r3, [r3, #0]
 8109de0:	689b      	ldr	r3, [r3, #8]
 8109de2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8109de6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8109dea:	697a      	ldr	r2, [r7, #20]
 8109dec:	6812      	ldr	r2, [r2, #0]
 8109dee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109df0:	430b      	orrs	r3, r1
 8109df2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8109df4:	697b      	ldr	r3, [r7, #20]
 8109df6:	681b      	ldr	r3, [r3, #0]
 8109df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109dfa:	f023 010f 	bic.w	r1, r3, #15
 8109dfe:	697b      	ldr	r3, [r7, #20]
 8109e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8109e02:	697b      	ldr	r3, [r7, #20]
 8109e04:	681b      	ldr	r3, [r3, #0]
 8109e06:	430a      	orrs	r2, r1
 8109e08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8109e0a:	697b      	ldr	r3, [r7, #20]
 8109e0c:	681b      	ldr	r3, [r3, #0]
 8109e0e:	4aa3      	ldr	r2, [pc, #652]	; (810a09c <UART_SetConfig+0x32c>)
 8109e10:	4293      	cmp	r3, r2
 8109e12:	d177      	bne.n	8109f04 <UART_SetConfig+0x194>
 8109e14:	4ba2      	ldr	r3, [pc, #648]	; (810a0a0 <UART_SetConfig+0x330>)
 8109e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109e1c:	2b28      	cmp	r3, #40	; 0x28
 8109e1e:	d86d      	bhi.n	8109efc <UART_SetConfig+0x18c>
 8109e20:	a201      	add	r2, pc, #4	; (adr r2, 8109e28 <UART_SetConfig+0xb8>)
 8109e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109e26:	bf00      	nop
 8109e28:	08109ecd 	.word	0x08109ecd
 8109e2c:	08109efd 	.word	0x08109efd
 8109e30:	08109efd 	.word	0x08109efd
 8109e34:	08109efd 	.word	0x08109efd
 8109e38:	08109efd 	.word	0x08109efd
 8109e3c:	08109efd 	.word	0x08109efd
 8109e40:	08109efd 	.word	0x08109efd
 8109e44:	08109efd 	.word	0x08109efd
 8109e48:	08109ed5 	.word	0x08109ed5
 8109e4c:	08109efd 	.word	0x08109efd
 8109e50:	08109efd 	.word	0x08109efd
 8109e54:	08109efd 	.word	0x08109efd
 8109e58:	08109efd 	.word	0x08109efd
 8109e5c:	08109efd 	.word	0x08109efd
 8109e60:	08109efd 	.word	0x08109efd
 8109e64:	08109efd 	.word	0x08109efd
 8109e68:	08109edd 	.word	0x08109edd
 8109e6c:	08109efd 	.word	0x08109efd
 8109e70:	08109efd 	.word	0x08109efd
 8109e74:	08109efd 	.word	0x08109efd
 8109e78:	08109efd 	.word	0x08109efd
 8109e7c:	08109efd 	.word	0x08109efd
 8109e80:	08109efd 	.word	0x08109efd
 8109e84:	08109efd 	.word	0x08109efd
 8109e88:	08109ee5 	.word	0x08109ee5
 8109e8c:	08109efd 	.word	0x08109efd
 8109e90:	08109efd 	.word	0x08109efd
 8109e94:	08109efd 	.word	0x08109efd
 8109e98:	08109efd 	.word	0x08109efd
 8109e9c:	08109efd 	.word	0x08109efd
 8109ea0:	08109efd 	.word	0x08109efd
 8109ea4:	08109efd 	.word	0x08109efd
 8109ea8:	08109eed 	.word	0x08109eed
 8109eac:	08109efd 	.word	0x08109efd
 8109eb0:	08109efd 	.word	0x08109efd
 8109eb4:	08109efd 	.word	0x08109efd
 8109eb8:	08109efd 	.word	0x08109efd
 8109ebc:	08109efd 	.word	0x08109efd
 8109ec0:	08109efd 	.word	0x08109efd
 8109ec4:	08109efd 	.word	0x08109efd
 8109ec8:	08109ef5 	.word	0x08109ef5
 8109ecc:	2301      	movs	r3, #1
 8109ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ed2:	e220      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109ed4:	2304      	movs	r3, #4
 8109ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109eda:	e21c      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109edc:	2308      	movs	r3, #8
 8109ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ee2:	e218      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109ee4:	2310      	movs	r3, #16
 8109ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109eea:	e214      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109eec:	2320      	movs	r3, #32
 8109eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ef2:	e210      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109ef4:	2340      	movs	r3, #64	; 0x40
 8109ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109efa:	e20c      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109efc:	2380      	movs	r3, #128	; 0x80
 8109efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f02:	e208      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109f04:	697b      	ldr	r3, [r7, #20]
 8109f06:	681b      	ldr	r3, [r3, #0]
 8109f08:	4a66      	ldr	r2, [pc, #408]	; (810a0a4 <UART_SetConfig+0x334>)
 8109f0a:	4293      	cmp	r3, r2
 8109f0c:	d130      	bne.n	8109f70 <UART_SetConfig+0x200>
 8109f0e:	4b64      	ldr	r3, [pc, #400]	; (810a0a0 <UART_SetConfig+0x330>)
 8109f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109f12:	f003 0307 	and.w	r3, r3, #7
 8109f16:	2b05      	cmp	r3, #5
 8109f18:	d826      	bhi.n	8109f68 <UART_SetConfig+0x1f8>
 8109f1a:	a201      	add	r2, pc, #4	; (adr r2, 8109f20 <UART_SetConfig+0x1b0>)
 8109f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109f20:	08109f39 	.word	0x08109f39
 8109f24:	08109f41 	.word	0x08109f41
 8109f28:	08109f49 	.word	0x08109f49
 8109f2c:	08109f51 	.word	0x08109f51
 8109f30:	08109f59 	.word	0x08109f59
 8109f34:	08109f61 	.word	0x08109f61
 8109f38:	2300      	movs	r3, #0
 8109f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f3e:	e1ea      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109f40:	2304      	movs	r3, #4
 8109f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f46:	e1e6      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109f48:	2308      	movs	r3, #8
 8109f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f4e:	e1e2      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109f50:	2310      	movs	r3, #16
 8109f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f56:	e1de      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109f58:	2320      	movs	r3, #32
 8109f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f5e:	e1da      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109f60:	2340      	movs	r3, #64	; 0x40
 8109f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f66:	e1d6      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109f68:	2380      	movs	r3, #128	; 0x80
 8109f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f6e:	e1d2      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109f70:	697b      	ldr	r3, [r7, #20]
 8109f72:	681b      	ldr	r3, [r3, #0]
 8109f74:	4a4c      	ldr	r2, [pc, #304]	; (810a0a8 <UART_SetConfig+0x338>)
 8109f76:	4293      	cmp	r3, r2
 8109f78:	d130      	bne.n	8109fdc <UART_SetConfig+0x26c>
 8109f7a:	4b49      	ldr	r3, [pc, #292]	; (810a0a0 <UART_SetConfig+0x330>)
 8109f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109f7e:	f003 0307 	and.w	r3, r3, #7
 8109f82:	2b05      	cmp	r3, #5
 8109f84:	d826      	bhi.n	8109fd4 <UART_SetConfig+0x264>
 8109f86:	a201      	add	r2, pc, #4	; (adr r2, 8109f8c <UART_SetConfig+0x21c>)
 8109f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109f8c:	08109fa5 	.word	0x08109fa5
 8109f90:	08109fad 	.word	0x08109fad
 8109f94:	08109fb5 	.word	0x08109fb5
 8109f98:	08109fbd 	.word	0x08109fbd
 8109f9c:	08109fc5 	.word	0x08109fc5
 8109fa0:	08109fcd 	.word	0x08109fcd
 8109fa4:	2300      	movs	r3, #0
 8109fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109faa:	e1b4      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109fac:	2304      	movs	r3, #4
 8109fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fb2:	e1b0      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109fb4:	2308      	movs	r3, #8
 8109fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fba:	e1ac      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109fbc:	2310      	movs	r3, #16
 8109fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fc2:	e1a8      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109fc4:	2320      	movs	r3, #32
 8109fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fca:	e1a4      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109fcc:	2340      	movs	r3, #64	; 0x40
 8109fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fd2:	e1a0      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109fd4:	2380      	movs	r3, #128	; 0x80
 8109fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fda:	e19c      	b.n	810a316 <UART_SetConfig+0x5a6>
 8109fdc:	697b      	ldr	r3, [r7, #20]
 8109fde:	681b      	ldr	r3, [r3, #0]
 8109fe0:	4a32      	ldr	r2, [pc, #200]	; (810a0ac <UART_SetConfig+0x33c>)
 8109fe2:	4293      	cmp	r3, r2
 8109fe4:	d130      	bne.n	810a048 <UART_SetConfig+0x2d8>
 8109fe6:	4b2e      	ldr	r3, [pc, #184]	; (810a0a0 <UART_SetConfig+0x330>)
 8109fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109fea:	f003 0307 	and.w	r3, r3, #7
 8109fee:	2b05      	cmp	r3, #5
 8109ff0:	d826      	bhi.n	810a040 <UART_SetConfig+0x2d0>
 8109ff2:	a201      	add	r2, pc, #4	; (adr r2, 8109ff8 <UART_SetConfig+0x288>)
 8109ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109ff8:	0810a011 	.word	0x0810a011
 8109ffc:	0810a019 	.word	0x0810a019
 810a000:	0810a021 	.word	0x0810a021
 810a004:	0810a029 	.word	0x0810a029
 810a008:	0810a031 	.word	0x0810a031
 810a00c:	0810a039 	.word	0x0810a039
 810a010:	2300      	movs	r3, #0
 810a012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a016:	e17e      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a018:	2304      	movs	r3, #4
 810a01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a01e:	e17a      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a020:	2308      	movs	r3, #8
 810a022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a026:	e176      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a028:	2310      	movs	r3, #16
 810a02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a02e:	e172      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a030:	2320      	movs	r3, #32
 810a032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a036:	e16e      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a038:	2340      	movs	r3, #64	; 0x40
 810a03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a03e:	e16a      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a040:	2380      	movs	r3, #128	; 0x80
 810a042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a046:	e166      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a048:	697b      	ldr	r3, [r7, #20]
 810a04a:	681b      	ldr	r3, [r3, #0]
 810a04c:	4a18      	ldr	r2, [pc, #96]	; (810a0b0 <UART_SetConfig+0x340>)
 810a04e:	4293      	cmp	r3, r2
 810a050:	d140      	bne.n	810a0d4 <UART_SetConfig+0x364>
 810a052:	4b13      	ldr	r3, [pc, #76]	; (810a0a0 <UART_SetConfig+0x330>)
 810a054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a056:	f003 0307 	and.w	r3, r3, #7
 810a05a:	2b05      	cmp	r3, #5
 810a05c:	d836      	bhi.n	810a0cc <UART_SetConfig+0x35c>
 810a05e:	a201      	add	r2, pc, #4	; (adr r2, 810a064 <UART_SetConfig+0x2f4>)
 810a060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a064:	0810a07d 	.word	0x0810a07d
 810a068:	0810a085 	.word	0x0810a085
 810a06c:	0810a08d 	.word	0x0810a08d
 810a070:	0810a0b5 	.word	0x0810a0b5
 810a074:	0810a0bd 	.word	0x0810a0bd
 810a078:	0810a0c5 	.word	0x0810a0c5
 810a07c:	2300      	movs	r3, #0
 810a07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a082:	e148      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a084:	2304      	movs	r3, #4
 810a086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a08a:	e144      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a08c:	2308      	movs	r3, #8
 810a08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a092:	e140      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a094:	cfff69f3 	.word	0xcfff69f3
 810a098:	58000c00 	.word	0x58000c00
 810a09c:	40011000 	.word	0x40011000
 810a0a0:	58024400 	.word	0x58024400
 810a0a4:	40004400 	.word	0x40004400
 810a0a8:	40004800 	.word	0x40004800
 810a0ac:	40004c00 	.word	0x40004c00
 810a0b0:	40005000 	.word	0x40005000
 810a0b4:	2310      	movs	r3, #16
 810a0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0ba:	e12c      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a0bc:	2320      	movs	r3, #32
 810a0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0c2:	e128      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a0c4:	2340      	movs	r3, #64	; 0x40
 810a0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0ca:	e124      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a0cc:	2380      	movs	r3, #128	; 0x80
 810a0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0d2:	e120      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a0d4:	697b      	ldr	r3, [r7, #20]
 810a0d6:	681b      	ldr	r3, [r3, #0]
 810a0d8:	4acb      	ldr	r2, [pc, #812]	; (810a408 <UART_SetConfig+0x698>)
 810a0da:	4293      	cmp	r3, r2
 810a0dc:	d176      	bne.n	810a1cc <UART_SetConfig+0x45c>
 810a0de:	4bcb      	ldr	r3, [pc, #812]	; (810a40c <UART_SetConfig+0x69c>)
 810a0e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a0e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810a0e6:	2b28      	cmp	r3, #40	; 0x28
 810a0e8:	d86c      	bhi.n	810a1c4 <UART_SetConfig+0x454>
 810a0ea:	a201      	add	r2, pc, #4	; (adr r2, 810a0f0 <UART_SetConfig+0x380>)
 810a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a0f0:	0810a195 	.word	0x0810a195
 810a0f4:	0810a1c5 	.word	0x0810a1c5
 810a0f8:	0810a1c5 	.word	0x0810a1c5
 810a0fc:	0810a1c5 	.word	0x0810a1c5
 810a100:	0810a1c5 	.word	0x0810a1c5
 810a104:	0810a1c5 	.word	0x0810a1c5
 810a108:	0810a1c5 	.word	0x0810a1c5
 810a10c:	0810a1c5 	.word	0x0810a1c5
 810a110:	0810a19d 	.word	0x0810a19d
 810a114:	0810a1c5 	.word	0x0810a1c5
 810a118:	0810a1c5 	.word	0x0810a1c5
 810a11c:	0810a1c5 	.word	0x0810a1c5
 810a120:	0810a1c5 	.word	0x0810a1c5
 810a124:	0810a1c5 	.word	0x0810a1c5
 810a128:	0810a1c5 	.word	0x0810a1c5
 810a12c:	0810a1c5 	.word	0x0810a1c5
 810a130:	0810a1a5 	.word	0x0810a1a5
 810a134:	0810a1c5 	.word	0x0810a1c5
 810a138:	0810a1c5 	.word	0x0810a1c5
 810a13c:	0810a1c5 	.word	0x0810a1c5
 810a140:	0810a1c5 	.word	0x0810a1c5
 810a144:	0810a1c5 	.word	0x0810a1c5
 810a148:	0810a1c5 	.word	0x0810a1c5
 810a14c:	0810a1c5 	.word	0x0810a1c5
 810a150:	0810a1ad 	.word	0x0810a1ad
 810a154:	0810a1c5 	.word	0x0810a1c5
 810a158:	0810a1c5 	.word	0x0810a1c5
 810a15c:	0810a1c5 	.word	0x0810a1c5
 810a160:	0810a1c5 	.word	0x0810a1c5
 810a164:	0810a1c5 	.word	0x0810a1c5
 810a168:	0810a1c5 	.word	0x0810a1c5
 810a16c:	0810a1c5 	.word	0x0810a1c5
 810a170:	0810a1b5 	.word	0x0810a1b5
 810a174:	0810a1c5 	.word	0x0810a1c5
 810a178:	0810a1c5 	.word	0x0810a1c5
 810a17c:	0810a1c5 	.word	0x0810a1c5
 810a180:	0810a1c5 	.word	0x0810a1c5
 810a184:	0810a1c5 	.word	0x0810a1c5
 810a188:	0810a1c5 	.word	0x0810a1c5
 810a18c:	0810a1c5 	.word	0x0810a1c5
 810a190:	0810a1bd 	.word	0x0810a1bd
 810a194:	2301      	movs	r3, #1
 810a196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a19a:	e0bc      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a19c:	2304      	movs	r3, #4
 810a19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1a2:	e0b8      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a1a4:	2308      	movs	r3, #8
 810a1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1aa:	e0b4      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a1ac:	2310      	movs	r3, #16
 810a1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1b2:	e0b0      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a1b4:	2320      	movs	r3, #32
 810a1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1ba:	e0ac      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a1bc:	2340      	movs	r3, #64	; 0x40
 810a1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1c2:	e0a8      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a1c4:	2380      	movs	r3, #128	; 0x80
 810a1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1ca:	e0a4      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a1cc:	697b      	ldr	r3, [r7, #20]
 810a1ce:	681b      	ldr	r3, [r3, #0]
 810a1d0:	4a8f      	ldr	r2, [pc, #572]	; (810a410 <UART_SetConfig+0x6a0>)
 810a1d2:	4293      	cmp	r3, r2
 810a1d4:	d130      	bne.n	810a238 <UART_SetConfig+0x4c8>
 810a1d6:	4b8d      	ldr	r3, [pc, #564]	; (810a40c <UART_SetConfig+0x69c>)
 810a1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a1da:	f003 0307 	and.w	r3, r3, #7
 810a1de:	2b05      	cmp	r3, #5
 810a1e0:	d826      	bhi.n	810a230 <UART_SetConfig+0x4c0>
 810a1e2:	a201      	add	r2, pc, #4	; (adr r2, 810a1e8 <UART_SetConfig+0x478>)
 810a1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a1e8:	0810a201 	.word	0x0810a201
 810a1ec:	0810a209 	.word	0x0810a209
 810a1f0:	0810a211 	.word	0x0810a211
 810a1f4:	0810a219 	.word	0x0810a219
 810a1f8:	0810a221 	.word	0x0810a221
 810a1fc:	0810a229 	.word	0x0810a229
 810a200:	2300      	movs	r3, #0
 810a202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a206:	e086      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a208:	2304      	movs	r3, #4
 810a20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a20e:	e082      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a210:	2308      	movs	r3, #8
 810a212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a216:	e07e      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a218:	2310      	movs	r3, #16
 810a21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a21e:	e07a      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a220:	2320      	movs	r3, #32
 810a222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a226:	e076      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a228:	2340      	movs	r3, #64	; 0x40
 810a22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a22e:	e072      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a230:	2380      	movs	r3, #128	; 0x80
 810a232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a236:	e06e      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a238:	697b      	ldr	r3, [r7, #20]
 810a23a:	681b      	ldr	r3, [r3, #0]
 810a23c:	4a75      	ldr	r2, [pc, #468]	; (810a414 <UART_SetConfig+0x6a4>)
 810a23e:	4293      	cmp	r3, r2
 810a240:	d130      	bne.n	810a2a4 <UART_SetConfig+0x534>
 810a242:	4b72      	ldr	r3, [pc, #456]	; (810a40c <UART_SetConfig+0x69c>)
 810a244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a246:	f003 0307 	and.w	r3, r3, #7
 810a24a:	2b05      	cmp	r3, #5
 810a24c:	d826      	bhi.n	810a29c <UART_SetConfig+0x52c>
 810a24e:	a201      	add	r2, pc, #4	; (adr r2, 810a254 <UART_SetConfig+0x4e4>)
 810a250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a254:	0810a26d 	.word	0x0810a26d
 810a258:	0810a275 	.word	0x0810a275
 810a25c:	0810a27d 	.word	0x0810a27d
 810a260:	0810a285 	.word	0x0810a285
 810a264:	0810a28d 	.word	0x0810a28d
 810a268:	0810a295 	.word	0x0810a295
 810a26c:	2300      	movs	r3, #0
 810a26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a272:	e050      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a274:	2304      	movs	r3, #4
 810a276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a27a:	e04c      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a27c:	2308      	movs	r3, #8
 810a27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a282:	e048      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a284:	2310      	movs	r3, #16
 810a286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a28a:	e044      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a28c:	2320      	movs	r3, #32
 810a28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a292:	e040      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a294:	2340      	movs	r3, #64	; 0x40
 810a296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a29a:	e03c      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a29c:	2380      	movs	r3, #128	; 0x80
 810a29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2a2:	e038      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a2a4:	697b      	ldr	r3, [r7, #20]
 810a2a6:	681b      	ldr	r3, [r3, #0]
 810a2a8:	4a5b      	ldr	r2, [pc, #364]	; (810a418 <UART_SetConfig+0x6a8>)
 810a2aa:	4293      	cmp	r3, r2
 810a2ac:	d130      	bne.n	810a310 <UART_SetConfig+0x5a0>
 810a2ae:	4b57      	ldr	r3, [pc, #348]	; (810a40c <UART_SetConfig+0x69c>)
 810a2b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a2b2:	f003 0307 	and.w	r3, r3, #7
 810a2b6:	2b05      	cmp	r3, #5
 810a2b8:	d826      	bhi.n	810a308 <UART_SetConfig+0x598>
 810a2ba:	a201      	add	r2, pc, #4	; (adr r2, 810a2c0 <UART_SetConfig+0x550>)
 810a2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a2c0:	0810a2d9 	.word	0x0810a2d9
 810a2c4:	0810a2e1 	.word	0x0810a2e1
 810a2c8:	0810a2e9 	.word	0x0810a2e9
 810a2cc:	0810a2f1 	.word	0x0810a2f1
 810a2d0:	0810a2f9 	.word	0x0810a2f9
 810a2d4:	0810a301 	.word	0x0810a301
 810a2d8:	2302      	movs	r3, #2
 810a2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2de:	e01a      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a2e0:	2304      	movs	r3, #4
 810a2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2e6:	e016      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a2e8:	2308      	movs	r3, #8
 810a2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2ee:	e012      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a2f0:	2310      	movs	r3, #16
 810a2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2f6:	e00e      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a2f8:	2320      	movs	r3, #32
 810a2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2fe:	e00a      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a300:	2340      	movs	r3, #64	; 0x40
 810a302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a306:	e006      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a308:	2380      	movs	r3, #128	; 0x80
 810a30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a30e:	e002      	b.n	810a316 <UART_SetConfig+0x5a6>
 810a310:	2380      	movs	r3, #128	; 0x80
 810a312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810a316:	697b      	ldr	r3, [r7, #20]
 810a318:	681b      	ldr	r3, [r3, #0]
 810a31a:	4a3f      	ldr	r2, [pc, #252]	; (810a418 <UART_SetConfig+0x6a8>)
 810a31c:	4293      	cmp	r3, r2
 810a31e:	f040 80f8 	bne.w	810a512 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810a322:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a326:	2b20      	cmp	r3, #32
 810a328:	dc46      	bgt.n	810a3b8 <UART_SetConfig+0x648>
 810a32a:	2b02      	cmp	r3, #2
 810a32c:	f2c0 8082 	blt.w	810a434 <UART_SetConfig+0x6c4>
 810a330:	3b02      	subs	r3, #2
 810a332:	2b1e      	cmp	r3, #30
 810a334:	d87e      	bhi.n	810a434 <UART_SetConfig+0x6c4>
 810a336:	a201      	add	r2, pc, #4	; (adr r2, 810a33c <UART_SetConfig+0x5cc>)
 810a338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a33c:	0810a3bf 	.word	0x0810a3bf
 810a340:	0810a435 	.word	0x0810a435
 810a344:	0810a3c7 	.word	0x0810a3c7
 810a348:	0810a435 	.word	0x0810a435
 810a34c:	0810a435 	.word	0x0810a435
 810a350:	0810a435 	.word	0x0810a435
 810a354:	0810a3d7 	.word	0x0810a3d7
 810a358:	0810a435 	.word	0x0810a435
 810a35c:	0810a435 	.word	0x0810a435
 810a360:	0810a435 	.word	0x0810a435
 810a364:	0810a435 	.word	0x0810a435
 810a368:	0810a435 	.word	0x0810a435
 810a36c:	0810a435 	.word	0x0810a435
 810a370:	0810a435 	.word	0x0810a435
 810a374:	0810a3e7 	.word	0x0810a3e7
 810a378:	0810a435 	.word	0x0810a435
 810a37c:	0810a435 	.word	0x0810a435
 810a380:	0810a435 	.word	0x0810a435
 810a384:	0810a435 	.word	0x0810a435
 810a388:	0810a435 	.word	0x0810a435
 810a38c:	0810a435 	.word	0x0810a435
 810a390:	0810a435 	.word	0x0810a435
 810a394:	0810a435 	.word	0x0810a435
 810a398:	0810a435 	.word	0x0810a435
 810a39c:	0810a435 	.word	0x0810a435
 810a3a0:	0810a435 	.word	0x0810a435
 810a3a4:	0810a435 	.word	0x0810a435
 810a3a8:	0810a435 	.word	0x0810a435
 810a3ac:	0810a435 	.word	0x0810a435
 810a3b0:	0810a435 	.word	0x0810a435
 810a3b4:	0810a427 	.word	0x0810a427
 810a3b8:	2b40      	cmp	r3, #64	; 0x40
 810a3ba:	d037      	beq.n	810a42c <UART_SetConfig+0x6bc>
 810a3bc:	e03a      	b.n	810a434 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810a3be:	f7fd faef 	bl	81079a0 <HAL_RCCEx_GetD3PCLK1Freq>
 810a3c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a3c4:	e03c      	b.n	810a440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a3c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a3ca:	4618      	mov	r0, r3
 810a3cc:	f7fd fafe 	bl	81079cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a3d4:	e034      	b.n	810a440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a3d6:	f107 0318 	add.w	r3, r7, #24
 810a3da:	4618      	mov	r0, r3
 810a3dc:	f7fd fc4a 	bl	8107c74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a3e0:	69fb      	ldr	r3, [r7, #28]
 810a3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a3e4:	e02c      	b.n	810a440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a3e6:	4b09      	ldr	r3, [pc, #36]	; (810a40c <UART_SetConfig+0x69c>)
 810a3e8:	681b      	ldr	r3, [r3, #0]
 810a3ea:	f003 0320 	and.w	r3, r3, #32
 810a3ee:	2b00      	cmp	r3, #0
 810a3f0:	d016      	beq.n	810a420 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a3f2:	4b06      	ldr	r3, [pc, #24]	; (810a40c <UART_SetConfig+0x69c>)
 810a3f4:	681b      	ldr	r3, [r3, #0]
 810a3f6:	08db      	lsrs	r3, r3, #3
 810a3f8:	f003 0303 	and.w	r3, r3, #3
 810a3fc:	4a07      	ldr	r2, [pc, #28]	; (810a41c <UART_SetConfig+0x6ac>)
 810a3fe:	fa22 f303 	lsr.w	r3, r2, r3
 810a402:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a404:	e01c      	b.n	810a440 <UART_SetConfig+0x6d0>
 810a406:	bf00      	nop
 810a408:	40011400 	.word	0x40011400
 810a40c:	58024400 	.word	0x58024400
 810a410:	40007800 	.word	0x40007800
 810a414:	40007c00 	.word	0x40007c00
 810a418:	58000c00 	.word	0x58000c00
 810a41c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810a420:	4b9d      	ldr	r3, [pc, #628]	; (810a698 <UART_SetConfig+0x928>)
 810a422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a424:	e00c      	b.n	810a440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a426:	4b9d      	ldr	r3, [pc, #628]	; (810a69c <UART_SetConfig+0x92c>)
 810a428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a42a:	e009      	b.n	810a440 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a42c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a432:	e005      	b.n	810a440 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810a434:	2300      	movs	r3, #0
 810a436:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a438:	2301      	movs	r3, #1
 810a43a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a43e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810a440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a442:	2b00      	cmp	r3, #0
 810a444:	f000 81de 	beq.w	810a804 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810a448:	697b      	ldr	r3, [r7, #20]
 810a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a44c:	4a94      	ldr	r2, [pc, #592]	; (810a6a0 <UART_SetConfig+0x930>)
 810a44e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a452:	461a      	mov	r2, r3
 810a454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a456:	fbb3 f3f2 	udiv	r3, r3, r2
 810a45a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a45c:	697b      	ldr	r3, [r7, #20]
 810a45e:	685a      	ldr	r2, [r3, #4]
 810a460:	4613      	mov	r3, r2
 810a462:	005b      	lsls	r3, r3, #1
 810a464:	4413      	add	r3, r2
 810a466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a468:	429a      	cmp	r2, r3
 810a46a:	d305      	bcc.n	810a478 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810a46c:	697b      	ldr	r3, [r7, #20]
 810a46e:	685b      	ldr	r3, [r3, #4]
 810a470:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a474:	429a      	cmp	r2, r3
 810a476:	d903      	bls.n	810a480 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810a478:	2301      	movs	r3, #1
 810a47a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a47e:	e1c1      	b.n	810a804 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a482:	2200      	movs	r2, #0
 810a484:	60bb      	str	r3, [r7, #8]
 810a486:	60fa      	str	r2, [r7, #12]
 810a488:	697b      	ldr	r3, [r7, #20]
 810a48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a48c:	4a84      	ldr	r2, [pc, #528]	; (810a6a0 <UART_SetConfig+0x930>)
 810a48e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a492:	b29b      	uxth	r3, r3
 810a494:	2200      	movs	r2, #0
 810a496:	603b      	str	r3, [r7, #0]
 810a498:	607a      	str	r2, [r7, #4]
 810a49a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a49e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810a4a2:	f7f6 fc79 	bl	8100d98 <__aeabi_uldivmod>
 810a4a6:	4602      	mov	r2, r0
 810a4a8:	460b      	mov	r3, r1
 810a4aa:	4610      	mov	r0, r2
 810a4ac:	4619      	mov	r1, r3
 810a4ae:	f04f 0200 	mov.w	r2, #0
 810a4b2:	f04f 0300 	mov.w	r3, #0
 810a4b6:	020b      	lsls	r3, r1, #8
 810a4b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810a4bc:	0202      	lsls	r2, r0, #8
 810a4be:	6979      	ldr	r1, [r7, #20]
 810a4c0:	6849      	ldr	r1, [r1, #4]
 810a4c2:	0849      	lsrs	r1, r1, #1
 810a4c4:	2000      	movs	r0, #0
 810a4c6:	460c      	mov	r4, r1
 810a4c8:	4605      	mov	r5, r0
 810a4ca:	eb12 0804 	adds.w	r8, r2, r4
 810a4ce:	eb43 0905 	adc.w	r9, r3, r5
 810a4d2:	697b      	ldr	r3, [r7, #20]
 810a4d4:	685b      	ldr	r3, [r3, #4]
 810a4d6:	2200      	movs	r2, #0
 810a4d8:	469a      	mov	sl, r3
 810a4da:	4693      	mov	fp, r2
 810a4dc:	4652      	mov	r2, sl
 810a4de:	465b      	mov	r3, fp
 810a4e0:	4640      	mov	r0, r8
 810a4e2:	4649      	mov	r1, r9
 810a4e4:	f7f6 fc58 	bl	8100d98 <__aeabi_uldivmod>
 810a4e8:	4602      	mov	r2, r0
 810a4ea:	460b      	mov	r3, r1
 810a4ec:	4613      	mov	r3, r2
 810a4ee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810a4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a4f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810a4f6:	d308      	bcc.n	810a50a <UART_SetConfig+0x79a>
 810a4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a4fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a4fe:	d204      	bcs.n	810a50a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810a500:	697b      	ldr	r3, [r7, #20]
 810a502:	681b      	ldr	r3, [r3, #0]
 810a504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810a506:	60da      	str	r2, [r3, #12]
 810a508:	e17c      	b.n	810a804 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810a50a:	2301      	movs	r3, #1
 810a50c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a510:	e178      	b.n	810a804 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810a512:	697b      	ldr	r3, [r7, #20]
 810a514:	69db      	ldr	r3, [r3, #28]
 810a516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810a51a:	f040 80c5 	bne.w	810a6a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810a51e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a522:	2b20      	cmp	r3, #32
 810a524:	dc48      	bgt.n	810a5b8 <UART_SetConfig+0x848>
 810a526:	2b00      	cmp	r3, #0
 810a528:	db7b      	blt.n	810a622 <UART_SetConfig+0x8b2>
 810a52a:	2b20      	cmp	r3, #32
 810a52c:	d879      	bhi.n	810a622 <UART_SetConfig+0x8b2>
 810a52e:	a201      	add	r2, pc, #4	; (adr r2, 810a534 <UART_SetConfig+0x7c4>)
 810a530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a534:	0810a5bf 	.word	0x0810a5bf
 810a538:	0810a5c7 	.word	0x0810a5c7
 810a53c:	0810a623 	.word	0x0810a623
 810a540:	0810a623 	.word	0x0810a623
 810a544:	0810a5cf 	.word	0x0810a5cf
 810a548:	0810a623 	.word	0x0810a623
 810a54c:	0810a623 	.word	0x0810a623
 810a550:	0810a623 	.word	0x0810a623
 810a554:	0810a5df 	.word	0x0810a5df
 810a558:	0810a623 	.word	0x0810a623
 810a55c:	0810a623 	.word	0x0810a623
 810a560:	0810a623 	.word	0x0810a623
 810a564:	0810a623 	.word	0x0810a623
 810a568:	0810a623 	.word	0x0810a623
 810a56c:	0810a623 	.word	0x0810a623
 810a570:	0810a623 	.word	0x0810a623
 810a574:	0810a5ef 	.word	0x0810a5ef
 810a578:	0810a623 	.word	0x0810a623
 810a57c:	0810a623 	.word	0x0810a623
 810a580:	0810a623 	.word	0x0810a623
 810a584:	0810a623 	.word	0x0810a623
 810a588:	0810a623 	.word	0x0810a623
 810a58c:	0810a623 	.word	0x0810a623
 810a590:	0810a623 	.word	0x0810a623
 810a594:	0810a623 	.word	0x0810a623
 810a598:	0810a623 	.word	0x0810a623
 810a59c:	0810a623 	.word	0x0810a623
 810a5a0:	0810a623 	.word	0x0810a623
 810a5a4:	0810a623 	.word	0x0810a623
 810a5a8:	0810a623 	.word	0x0810a623
 810a5ac:	0810a623 	.word	0x0810a623
 810a5b0:	0810a623 	.word	0x0810a623
 810a5b4:	0810a615 	.word	0x0810a615
 810a5b8:	2b40      	cmp	r3, #64	; 0x40
 810a5ba:	d02e      	beq.n	810a61a <UART_SetConfig+0x8aa>
 810a5bc:	e031      	b.n	810a622 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a5be:	f7fb fa39 	bl	8105a34 <HAL_RCC_GetPCLK1Freq>
 810a5c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a5c4:	e033      	b.n	810a62e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a5c6:	f7fb fa4b 	bl	8105a60 <HAL_RCC_GetPCLK2Freq>
 810a5ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a5cc:	e02f      	b.n	810a62e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a5ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a5d2:	4618      	mov	r0, r3
 810a5d4:	f7fd f9fa 	bl	81079cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a5dc:	e027      	b.n	810a62e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a5de:	f107 0318 	add.w	r3, r7, #24
 810a5e2:	4618      	mov	r0, r3
 810a5e4:	f7fd fb46 	bl	8107c74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a5e8:	69fb      	ldr	r3, [r7, #28]
 810a5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a5ec:	e01f      	b.n	810a62e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a5ee:	4b2d      	ldr	r3, [pc, #180]	; (810a6a4 <UART_SetConfig+0x934>)
 810a5f0:	681b      	ldr	r3, [r3, #0]
 810a5f2:	f003 0320 	and.w	r3, r3, #32
 810a5f6:	2b00      	cmp	r3, #0
 810a5f8:	d009      	beq.n	810a60e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a5fa:	4b2a      	ldr	r3, [pc, #168]	; (810a6a4 <UART_SetConfig+0x934>)
 810a5fc:	681b      	ldr	r3, [r3, #0]
 810a5fe:	08db      	lsrs	r3, r3, #3
 810a600:	f003 0303 	and.w	r3, r3, #3
 810a604:	4a24      	ldr	r2, [pc, #144]	; (810a698 <UART_SetConfig+0x928>)
 810a606:	fa22 f303 	lsr.w	r3, r2, r3
 810a60a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a60c:	e00f      	b.n	810a62e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810a60e:	4b22      	ldr	r3, [pc, #136]	; (810a698 <UART_SetConfig+0x928>)
 810a610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a612:	e00c      	b.n	810a62e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a614:	4b21      	ldr	r3, [pc, #132]	; (810a69c <UART_SetConfig+0x92c>)
 810a616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a618:	e009      	b.n	810a62e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a61a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a620:	e005      	b.n	810a62e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810a622:	2300      	movs	r3, #0
 810a624:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a626:	2301      	movs	r3, #1
 810a628:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a62c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810a62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a630:	2b00      	cmp	r3, #0
 810a632:	f000 80e7 	beq.w	810a804 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a636:	697b      	ldr	r3, [r7, #20]
 810a638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a63a:	4a19      	ldr	r2, [pc, #100]	; (810a6a0 <UART_SetConfig+0x930>)
 810a63c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a640:	461a      	mov	r2, r3
 810a642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a644:	fbb3 f3f2 	udiv	r3, r3, r2
 810a648:	005a      	lsls	r2, r3, #1
 810a64a:	697b      	ldr	r3, [r7, #20]
 810a64c:	685b      	ldr	r3, [r3, #4]
 810a64e:	085b      	lsrs	r3, r3, #1
 810a650:	441a      	add	r2, r3
 810a652:	697b      	ldr	r3, [r7, #20]
 810a654:	685b      	ldr	r3, [r3, #4]
 810a656:	fbb2 f3f3 	udiv	r3, r2, r3
 810a65a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a65e:	2b0f      	cmp	r3, #15
 810a660:	d916      	bls.n	810a690 <UART_SetConfig+0x920>
 810a662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a668:	d212      	bcs.n	810a690 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810a66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a66c:	b29b      	uxth	r3, r3
 810a66e:	f023 030f 	bic.w	r3, r3, #15
 810a672:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810a674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a676:	085b      	lsrs	r3, r3, #1
 810a678:	b29b      	uxth	r3, r3
 810a67a:	f003 0307 	and.w	r3, r3, #7
 810a67e:	b29a      	uxth	r2, r3
 810a680:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810a682:	4313      	orrs	r3, r2
 810a684:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810a686:	697b      	ldr	r3, [r7, #20]
 810a688:	681b      	ldr	r3, [r3, #0]
 810a68a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 810a68c:	60da      	str	r2, [r3, #12]
 810a68e:	e0b9      	b.n	810a804 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a690:	2301      	movs	r3, #1
 810a692:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a696:	e0b5      	b.n	810a804 <UART_SetConfig+0xa94>
 810a698:	03d09000 	.word	0x03d09000
 810a69c:	003d0900 	.word	0x003d0900
 810a6a0:	0810fb48 	.word	0x0810fb48
 810a6a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810a6a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a6ac:	2b20      	cmp	r3, #32
 810a6ae:	dc49      	bgt.n	810a744 <UART_SetConfig+0x9d4>
 810a6b0:	2b00      	cmp	r3, #0
 810a6b2:	db7c      	blt.n	810a7ae <UART_SetConfig+0xa3e>
 810a6b4:	2b20      	cmp	r3, #32
 810a6b6:	d87a      	bhi.n	810a7ae <UART_SetConfig+0xa3e>
 810a6b8:	a201      	add	r2, pc, #4	; (adr r2, 810a6c0 <UART_SetConfig+0x950>)
 810a6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a6be:	bf00      	nop
 810a6c0:	0810a74b 	.word	0x0810a74b
 810a6c4:	0810a753 	.word	0x0810a753
 810a6c8:	0810a7af 	.word	0x0810a7af
 810a6cc:	0810a7af 	.word	0x0810a7af
 810a6d0:	0810a75b 	.word	0x0810a75b
 810a6d4:	0810a7af 	.word	0x0810a7af
 810a6d8:	0810a7af 	.word	0x0810a7af
 810a6dc:	0810a7af 	.word	0x0810a7af
 810a6e0:	0810a76b 	.word	0x0810a76b
 810a6e4:	0810a7af 	.word	0x0810a7af
 810a6e8:	0810a7af 	.word	0x0810a7af
 810a6ec:	0810a7af 	.word	0x0810a7af
 810a6f0:	0810a7af 	.word	0x0810a7af
 810a6f4:	0810a7af 	.word	0x0810a7af
 810a6f8:	0810a7af 	.word	0x0810a7af
 810a6fc:	0810a7af 	.word	0x0810a7af
 810a700:	0810a77b 	.word	0x0810a77b
 810a704:	0810a7af 	.word	0x0810a7af
 810a708:	0810a7af 	.word	0x0810a7af
 810a70c:	0810a7af 	.word	0x0810a7af
 810a710:	0810a7af 	.word	0x0810a7af
 810a714:	0810a7af 	.word	0x0810a7af
 810a718:	0810a7af 	.word	0x0810a7af
 810a71c:	0810a7af 	.word	0x0810a7af
 810a720:	0810a7af 	.word	0x0810a7af
 810a724:	0810a7af 	.word	0x0810a7af
 810a728:	0810a7af 	.word	0x0810a7af
 810a72c:	0810a7af 	.word	0x0810a7af
 810a730:	0810a7af 	.word	0x0810a7af
 810a734:	0810a7af 	.word	0x0810a7af
 810a738:	0810a7af 	.word	0x0810a7af
 810a73c:	0810a7af 	.word	0x0810a7af
 810a740:	0810a7a1 	.word	0x0810a7a1
 810a744:	2b40      	cmp	r3, #64	; 0x40
 810a746:	d02e      	beq.n	810a7a6 <UART_SetConfig+0xa36>
 810a748:	e031      	b.n	810a7ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a74a:	f7fb f973 	bl	8105a34 <HAL_RCC_GetPCLK1Freq>
 810a74e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a750:	e033      	b.n	810a7ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a752:	f7fb f985 	bl	8105a60 <HAL_RCC_GetPCLK2Freq>
 810a756:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a758:	e02f      	b.n	810a7ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a75a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a75e:	4618      	mov	r0, r3
 810a760:	f7fd f934 	bl	81079cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a768:	e027      	b.n	810a7ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a76a:	f107 0318 	add.w	r3, r7, #24
 810a76e:	4618      	mov	r0, r3
 810a770:	f7fd fa80 	bl	8107c74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a774:	69fb      	ldr	r3, [r7, #28]
 810a776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a778:	e01f      	b.n	810a7ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a77a:	4b2d      	ldr	r3, [pc, #180]	; (810a830 <UART_SetConfig+0xac0>)
 810a77c:	681b      	ldr	r3, [r3, #0]
 810a77e:	f003 0320 	and.w	r3, r3, #32
 810a782:	2b00      	cmp	r3, #0
 810a784:	d009      	beq.n	810a79a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a786:	4b2a      	ldr	r3, [pc, #168]	; (810a830 <UART_SetConfig+0xac0>)
 810a788:	681b      	ldr	r3, [r3, #0]
 810a78a:	08db      	lsrs	r3, r3, #3
 810a78c:	f003 0303 	and.w	r3, r3, #3
 810a790:	4a28      	ldr	r2, [pc, #160]	; (810a834 <UART_SetConfig+0xac4>)
 810a792:	fa22 f303 	lsr.w	r3, r2, r3
 810a796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a798:	e00f      	b.n	810a7ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810a79a:	4b26      	ldr	r3, [pc, #152]	; (810a834 <UART_SetConfig+0xac4>)
 810a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a79e:	e00c      	b.n	810a7ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a7a0:	4b25      	ldr	r3, [pc, #148]	; (810a838 <UART_SetConfig+0xac8>)
 810a7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a7a4:	e009      	b.n	810a7ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a7a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a7ac:	e005      	b.n	810a7ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810a7ae:	2300      	movs	r3, #0
 810a7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a7b2:	2301      	movs	r3, #1
 810a7b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a7b8:	bf00      	nop
    }

    if (pclk != 0U)
 810a7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a7bc:	2b00      	cmp	r3, #0
 810a7be:	d021      	beq.n	810a804 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a7c0:	697b      	ldr	r3, [r7, #20]
 810a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a7c4:	4a1d      	ldr	r2, [pc, #116]	; (810a83c <UART_SetConfig+0xacc>)
 810a7c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a7ca:	461a      	mov	r2, r3
 810a7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a7ce:	fbb3 f2f2 	udiv	r2, r3, r2
 810a7d2:	697b      	ldr	r3, [r7, #20]
 810a7d4:	685b      	ldr	r3, [r3, #4]
 810a7d6:	085b      	lsrs	r3, r3, #1
 810a7d8:	441a      	add	r2, r3
 810a7da:	697b      	ldr	r3, [r7, #20]
 810a7dc:	685b      	ldr	r3, [r3, #4]
 810a7de:	fbb2 f3f3 	udiv	r3, r2, r3
 810a7e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a7e6:	2b0f      	cmp	r3, #15
 810a7e8:	d909      	bls.n	810a7fe <UART_SetConfig+0xa8e>
 810a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a7ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a7f0:	d205      	bcs.n	810a7fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810a7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a7f4:	b29a      	uxth	r2, r3
 810a7f6:	697b      	ldr	r3, [r7, #20]
 810a7f8:	681b      	ldr	r3, [r3, #0]
 810a7fa:	60da      	str	r2, [r3, #12]
 810a7fc:	e002      	b.n	810a804 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a7fe:	2301      	movs	r3, #1
 810a800:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810a804:	697b      	ldr	r3, [r7, #20]
 810a806:	2201      	movs	r2, #1
 810a808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810a80c:	697b      	ldr	r3, [r7, #20]
 810a80e:	2201      	movs	r2, #1
 810a810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810a814:	697b      	ldr	r3, [r7, #20]
 810a816:	2200      	movs	r2, #0
 810a818:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 810a81a:	697b      	ldr	r3, [r7, #20]
 810a81c:	2200      	movs	r2, #0
 810a81e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 810a820:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 810a824:	4618      	mov	r0, r3
 810a826:	3748      	adds	r7, #72	; 0x48
 810a828:	46bd      	mov	sp, r7
 810a82a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810a82e:	bf00      	nop
 810a830:	58024400 	.word	0x58024400
 810a834:	03d09000 	.word	0x03d09000
 810a838:	003d0900 	.word	0x003d0900
 810a83c:	0810fb48 	.word	0x0810fb48

0810a840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810a840:	b480      	push	{r7}
 810a842:	b083      	sub	sp, #12
 810a844:	af00      	add	r7, sp, #0
 810a846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810a848:	687b      	ldr	r3, [r7, #4]
 810a84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a84c:	f003 0301 	and.w	r3, r3, #1
 810a850:	2b00      	cmp	r3, #0
 810a852:	d00a      	beq.n	810a86a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810a854:	687b      	ldr	r3, [r7, #4]
 810a856:	681b      	ldr	r3, [r3, #0]
 810a858:	685b      	ldr	r3, [r3, #4]
 810a85a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810a85e:	687b      	ldr	r3, [r7, #4]
 810a860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a862:	687b      	ldr	r3, [r7, #4]
 810a864:	681b      	ldr	r3, [r3, #0]
 810a866:	430a      	orrs	r2, r1
 810a868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810a86a:	687b      	ldr	r3, [r7, #4]
 810a86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a86e:	f003 0302 	and.w	r3, r3, #2
 810a872:	2b00      	cmp	r3, #0
 810a874:	d00a      	beq.n	810a88c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810a876:	687b      	ldr	r3, [r7, #4]
 810a878:	681b      	ldr	r3, [r3, #0]
 810a87a:	685b      	ldr	r3, [r3, #4]
 810a87c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810a880:	687b      	ldr	r3, [r7, #4]
 810a882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810a884:	687b      	ldr	r3, [r7, #4]
 810a886:	681b      	ldr	r3, [r3, #0]
 810a888:	430a      	orrs	r2, r1
 810a88a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810a88c:	687b      	ldr	r3, [r7, #4]
 810a88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a890:	f003 0304 	and.w	r3, r3, #4
 810a894:	2b00      	cmp	r3, #0
 810a896:	d00a      	beq.n	810a8ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810a898:	687b      	ldr	r3, [r7, #4]
 810a89a:	681b      	ldr	r3, [r3, #0]
 810a89c:	685b      	ldr	r3, [r3, #4]
 810a89e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810a8a2:	687b      	ldr	r3, [r7, #4]
 810a8a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810a8a6:	687b      	ldr	r3, [r7, #4]
 810a8a8:	681b      	ldr	r3, [r3, #0]
 810a8aa:	430a      	orrs	r2, r1
 810a8ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810a8ae:	687b      	ldr	r3, [r7, #4]
 810a8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a8b2:	f003 0308 	and.w	r3, r3, #8
 810a8b6:	2b00      	cmp	r3, #0
 810a8b8:	d00a      	beq.n	810a8d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810a8ba:	687b      	ldr	r3, [r7, #4]
 810a8bc:	681b      	ldr	r3, [r3, #0]
 810a8be:	685b      	ldr	r3, [r3, #4]
 810a8c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810a8c4:	687b      	ldr	r3, [r7, #4]
 810a8c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a8c8:	687b      	ldr	r3, [r7, #4]
 810a8ca:	681b      	ldr	r3, [r3, #0]
 810a8cc:	430a      	orrs	r2, r1
 810a8ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810a8d0:	687b      	ldr	r3, [r7, #4]
 810a8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a8d4:	f003 0310 	and.w	r3, r3, #16
 810a8d8:	2b00      	cmp	r3, #0
 810a8da:	d00a      	beq.n	810a8f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810a8dc:	687b      	ldr	r3, [r7, #4]
 810a8de:	681b      	ldr	r3, [r3, #0]
 810a8e0:	689b      	ldr	r3, [r3, #8]
 810a8e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810a8e6:	687b      	ldr	r3, [r7, #4]
 810a8e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810a8ea:	687b      	ldr	r3, [r7, #4]
 810a8ec:	681b      	ldr	r3, [r3, #0]
 810a8ee:	430a      	orrs	r2, r1
 810a8f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810a8f2:	687b      	ldr	r3, [r7, #4]
 810a8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a8f6:	f003 0320 	and.w	r3, r3, #32
 810a8fa:	2b00      	cmp	r3, #0
 810a8fc:	d00a      	beq.n	810a914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810a8fe:	687b      	ldr	r3, [r7, #4]
 810a900:	681b      	ldr	r3, [r3, #0]
 810a902:	689b      	ldr	r3, [r3, #8]
 810a904:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810a908:	687b      	ldr	r3, [r7, #4]
 810a90a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810a90c:	687b      	ldr	r3, [r7, #4]
 810a90e:	681b      	ldr	r3, [r3, #0]
 810a910:	430a      	orrs	r2, r1
 810a912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810a914:	687b      	ldr	r3, [r7, #4]
 810a916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a91c:	2b00      	cmp	r3, #0
 810a91e:	d01a      	beq.n	810a956 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810a920:	687b      	ldr	r3, [r7, #4]
 810a922:	681b      	ldr	r3, [r3, #0]
 810a924:	685b      	ldr	r3, [r3, #4]
 810a926:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810a92a:	687b      	ldr	r3, [r7, #4]
 810a92c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810a92e:	687b      	ldr	r3, [r7, #4]
 810a930:	681b      	ldr	r3, [r3, #0]
 810a932:	430a      	orrs	r2, r1
 810a934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810a936:	687b      	ldr	r3, [r7, #4]
 810a938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a93a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a93e:	d10a      	bne.n	810a956 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810a940:	687b      	ldr	r3, [r7, #4]
 810a942:	681b      	ldr	r3, [r3, #0]
 810a944:	685b      	ldr	r3, [r3, #4]
 810a946:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810a94a:	687b      	ldr	r3, [r7, #4]
 810a94c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810a94e:	687b      	ldr	r3, [r7, #4]
 810a950:	681b      	ldr	r3, [r3, #0]
 810a952:	430a      	orrs	r2, r1
 810a954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810a956:	687b      	ldr	r3, [r7, #4]
 810a958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a95a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a95e:	2b00      	cmp	r3, #0
 810a960:	d00a      	beq.n	810a978 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810a962:	687b      	ldr	r3, [r7, #4]
 810a964:	681b      	ldr	r3, [r3, #0]
 810a966:	685b      	ldr	r3, [r3, #4]
 810a968:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810a96c:	687b      	ldr	r3, [r7, #4]
 810a96e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810a970:	687b      	ldr	r3, [r7, #4]
 810a972:	681b      	ldr	r3, [r3, #0]
 810a974:	430a      	orrs	r2, r1
 810a976:	605a      	str	r2, [r3, #4]
  }
}
 810a978:	bf00      	nop
 810a97a:	370c      	adds	r7, #12
 810a97c:	46bd      	mov	sp, r7
 810a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a982:	4770      	bx	lr

0810a984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810a984:	b580      	push	{r7, lr}
 810a986:	b098      	sub	sp, #96	; 0x60
 810a988:	af02      	add	r7, sp, #8
 810a98a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a98c:	687b      	ldr	r3, [r7, #4]
 810a98e:	2200      	movs	r2, #0
 810a990:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810a994:	f7f8 fb88 	bl	81030a8 <HAL_GetTick>
 810a998:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810a99a:	687b      	ldr	r3, [r7, #4]
 810a99c:	681b      	ldr	r3, [r3, #0]
 810a99e:	681b      	ldr	r3, [r3, #0]
 810a9a0:	f003 0308 	and.w	r3, r3, #8
 810a9a4:	2b08      	cmp	r3, #8
 810a9a6:	d12f      	bne.n	810aa08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a9a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a9ac:	9300      	str	r3, [sp, #0]
 810a9ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810a9b0:	2200      	movs	r2, #0
 810a9b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810a9b6:	6878      	ldr	r0, [r7, #4]
 810a9b8:	f000 f88e 	bl	810aad8 <UART_WaitOnFlagUntilTimeout>
 810a9bc:	4603      	mov	r3, r0
 810a9be:	2b00      	cmp	r3, #0
 810a9c0:	d022      	beq.n	810aa08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810a9c2:	687b      	ldr	r3, [r7, #4]
 810a9c4:	681b      	ldr	r3, [r3, #0]
 810a9c6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a9ca:	e853 3f00 	ldrex	r3, [r3]
 810a9ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 810a9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a9d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810a9d6:	653b      	str	r3, [r7, #80]	; 0x50
 810a9d8:	687b      	ldr	r3, [r7, #4]
 810a9da:	681b      	ldr	r3, [r3, #0]
 810a9dc:	461a      	mov	r2, r3
 810a9de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810a9e0:	647b      	str	r3, [r7, #68]	; 0x44
 810a9e2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a9e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810a9e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810a9e8:	e841 2300 	strex	r3, r2, [r1]
 810a9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 810a9ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a9f0:	2b00      	cmp	r3, #0
 810a9f2:	d1e6      	bne.n	810a9c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810a9f4:	687b      	ldr	r3, [r7, #4]
 810a9f6:	2220      	movs	r2, #32
 810a9f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 810a9fc:	687b      	ldr	r3, [r7, #4]
 810a9fe:	2200      	movs	r2, #0
 810aa00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810aa04:	2303      	movs	r3, #3
 810aa06:	e063      	b.n	810aad0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810aa08:	687b      	ldr	r3, [r7, #4]
 810aa0a:	681b      	ldr	r3, [r3, #0]
 810aa0c:	681b      	ldr	r3, [r3, #0]
 810aa0e:	f003 0304 	and.w	r3, r3, #4
 810aa12:	2b04      	cmp	r3, #4
 810aa14:	d149      	bne.n	810aaaa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810aa16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810aa1a:	9300      	str	r3, [sp, #0]
 810aa1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810aa1e:	2200      	movs	r2, #0
 810aa20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810aa24:	6878      	ldr	r0, [r7, #4]
 810aa26:	f000 f857 	bl	810aad8 <UART_WaitOnFlagUntilTimeout>
 810aa2a:	4603      	mov	r3, r0
 810aa2c:	2b00      	cmp	r3, #0
 810aa2e:	d03c      	beq.n	810aaaa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810aa30:	687b      	ldr	r3, [r7, #4]
 810aa32:	681b      	ldr	r3, [r3, #0]
 810aa34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810aa38:	e853 3f00 	ldrex	r3, [r3]
 810aa3c:	623b      	str	r3, [r7, #32]
   return(result);
 810aa3e:	6a3b      	ldr	r3, [r7, #32]
 810aa40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810aa44:	64fb      	str	r3, [r7, #76]	; 0x4c
 810aa46:	687b      	ldr	r3, [r7, #4]
 810aa48:	681b      	ldr	r3, [r3, #0]
 810aa4a:	461a      	mov	r2, r3
 810aa4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810aa4e:	633b      	str	r3, [r7, #48]	; 0x30
 810aa50:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aa52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810aa54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810aa56:	e841 2300 	strex	r3, r2, [r1]
 810aa5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810aa5e:	2b00      	cmp	r3, #0
 810aa60:	d1e6      	bne.n	810aa30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810aa62:	687b      	ldr	r3, [r7, #4]
 810aa64:	681b      	ldr	r3, [r3, #0]
 810aa66:	3308      	adds	r3, #8
 810aa68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aa6a:	693b      	ldr	r3, [r7, #16]
 810aa6c:	e853 3f00 	ldrex	r3, [r3]
 810aa70:	60fb      	str	r3, [r7, #12]
   return(result);
 810aa72:	68fb      	ldr	r3, [r7, #12]
 810aa74:	f023 0301 	bic.w	r3, r3, #1
 810aa78:	64bb      	str	r3, [r7, #72]	; 0x48
 810aa7a:	687b      	ldr	r3, [r7, #4]
 810aa7c:	681b      	ldr	r3, [r3, #0]
 810aa7e:	3308      	adds	r3, #8
 810aa80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810aa82:	61fa      	str	r2, [r7, #28]
 810aa84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aa86:	69b9      	ldr	r1, [r7, #24]
 810aa88:	69fa      	ldr	r2, [r7, #28]
 810aa8a:	e841 2300 	strex	r3, r2, [r1]
 810aa8e:	617b      	str	r3, [r7, #20]
   return(result);
 810aa90:	697b      	ldr	r3, [r7, #20]
 810aa92:	2b00      	cmp	r3, #0
 810aa94:	d1e5      	bne.n	810aa62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810aa96:	687b      	ldr	r3, [r7, #4]
 810aa98:	2220      	movs	r2, #32
 810aa9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810aa9e:	687b      	ldr	r3, [r7, #4]
 810aaa0:	2200      	movs	r2, #0
 810aaa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810aaa6:	2303      	movs	r3, #3
 810aaa8:	e012      	b.n	810aad0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810aaaa:	687b      	ldr	r3, [r7, #4]
 810aaac:	2220      	movs	r2, #32
 810aaae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810aab2:	687b      	ldr	r3, [r7, #4]
 810aab4:	2220      	movs	r2, #32
 810aab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810aaba:	687b      	ldr	r3, [r7, #4]
 810aabc:	2200      	movs	r2, #0
 810aabe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810aac0:	687b      	ldr	r3, [r7, #4]
 810aac2:	2200      	movs	r2, #0
 810aac4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 810aac6:	687b      	ldr	r3, [r7, #4]
 810aac8:	2200      	movs	r2, #0
 810aaca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810aace:	2300      	movs	r3, #0
}
 810aad0:	4618      	mov	r0, r3
 810aad2:	3758      	adds	r7, #88	; 0x58
 810aad4:	46bd      	mov	sp, r7
 810aad6:	bd80      	pop	{r7, pc}

0810aad8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810aad8:	b580      	push	{r7, lr}
 810aada:	b084      	sub	sp, #16
 810aadc:	af00      	add	r7, sp, #0
 810aade:	60f8      	str	r0, [r7, #12]
 810aae0:	60b9      	str	r1, [r7, #8]
 810aae2:	603b      	str	r3, [r7, #0]
 810aae4:	4613      	mov	r3, r2
 810aae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810aae8:	e049      	b.n	810ab7e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810aaea:	69bb      	ldr	r3, [r7, #24]
 810aaec:	f1b3 3fff 	cmp.w	r3, #4294967295
 810aaf0:	d045      	beq.n	810ab7e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810aaf2:	f7f8 fad9 	bl	81030a8 <HAL_GetTick>
 810aaf6:	4602      	mov	r2, r0
 810aaf8:	683b      	ldr	r3, [r7, #0]
 810aafa:	1ad3      	subs	r3, r2, r3
 810aafc:	69ba      	ldr	r2, [r7, #24]
 810aafe:	429a      	cmp	r2, r3
 810ab00:	d302      	bcc.n	810ab08 <UART_WaitOnFlagUntilTimeout+0x30>
 810ab02:	69bb      	ldr	r3, [r7, #24]
 810ab04:	2b00      	cmp	r3, #0
 810ab06:	d101      	bne.n	810ab0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810ab08:	2303      	movs	r3, #3
 810ab0a:	e048      	b.n	810ab9e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810ab0c:	68fb      	ldr	r3, [r7, #12]
 810ab0e:	681b      	ldr	r3, [r3, #0]
 810ab10:	681b      	ldr	r3, [r3, #0]
 810ab12:	f003 0304 	and.w	r3, r3, #4
 810ab16:	2b00      	cmp	r3, #0
 810ab18:	d031      	beq.n	810ab7e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810ab1a:	68fb      	ldr	r3, [r7, #12]
 810ab1c:	681b      	ldr	r3, [r3, #0]
 810ab1e:	69db      	ldr	r3, [r3, #28]
 810ab20:	f003 0308 	and.w	r3, r3, #8
 810ab24:	2b08      	cmp	r3, #8
 810ab26:	d110      	bne.n	810ab4a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810ab28:	68fb      	ldr	r3, [r7, #12]
 810ab2a:	681b      	ldr	r3, [r3, #0]
 810ab2c:	2208      	movs	r2, #8
 810ab2e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 810ab30:	68f8      	ldr	r0, [r7, #12]
 810ab32:	f000 f838 	bl	810aba6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 810ab36:	68fb      	ldr	r3, [r7, #12]
 810ab38:	2208      	movs	r2, #8
 810ab3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 810ab3e:	68fb      	ldr	r3, [r7, #12]
 810ab40:	2200      	movs	r2, #0
 810ab42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 810ab46:	2301      	movs	r3, #1
 810ab48:	e029      	b.n	810ab9e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810ab4a:	68fb      	ldr	r3, [r7, #12]
 810ab4c:	681b      	ldr	r3, [r3, #0]
 810ab4e:	69db      	ldr	r3, [r3, #28]
 810ab50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810ab54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810ab58:	d111      	bne.n	810ab7e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810ab5a:	68fb      	ldr	r3, [r7, #12]
 810ab5c:	681b      	ldr	r3, [r3, #0]
 810ab5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810ab62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810ab64:	68f8      	ldr	r0, [r7, #12]
 810ab66:	f000 f81e 	bl	810aba6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810ab6a:	68fb      	ldr	r3, [r7, #12]
 810ab6c:	2220      	movs	r2, #32
 810ab6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810ab72:	68fb      	ldr	r3, [r7, #12]
 810ab74:	2200      	movs	r2, #0
 810ab76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 810ab7a:	2303      	movs	r3, #3
 810ab7c:	e00f      	b.n	810ab9e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810ab7e:	68fb      	ldr	r3, [r7, #12]
 810ab80:	681b      	ldr	r3, [r3, #0]
 810ab82:	69da      	ldr	r2, [r3, #28]
 810ab84:	68bb      	ldr	r3, [r7, #8]
 810ab86:	4013      	ands	r3, r2
 810ab88:	68ba      	ldr	r2, [r7, #8]
 810ab8a:	429a      	cmp	r2, r3
 810ab8c:	bf0c      	ite	eq
 810ab8e:	2301      	moveq	r3, #1
 810ab90:	2300      	movne	r3, #0
 810ab92:	b2db      	uxtb	r3, r3
 810ab94:	461a      	mov	r2, r3
 810ab96:	79fb      	ldrb	r3, [r7, #7]
 810ab98:	429a      	cmp	r2, r3
 810ab9a:	d0a6      	beq.n	810aaea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810ab9c:	2300      	movs	r3, #0
}
 810ab9e:	4618      	mov	r0, r3
 810aba0:	3710      	adds	r7, #16
 810aba2:	46bd      	mov	sp, r7
 810aba4:	bd80      	pop	{r7, pc}

0810aba6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810aba6:	b480      	push	{r7}
 810aba8:	b095      	sub	sp, #84	; 0x54
 810abaa:	af00      	add	r7, sp, #0
 810abac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810abae:	687b      	ldr	r3, [r7, #4]
 810abb0:	681b      	ldr	r3, [r3, #0]
 810abb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810abb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810abb6:	e853 3f00 	ldrex	r3, [r3]
 810abba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810abbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810abc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 810abc4:	687b      	ldr	r3, [r7, #4]
 810abc6:	681b      	ldr	r3, [r3, #0]
 810abc8:	461a      	mov	r2, r3
 810abca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810abcc:	643b      	str	r3, [r7, #64]	; 0x40
 810abce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810abd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810abd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810abd4:	e841 2300 	strex	r3, r2, [r1]
 810abd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810abda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810abdc:	2b00      	cmp	r3, #0
 810abde:	d1e6      	bne.n	810abae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810abe0:	687b      	ldr	r3, [r7, #4]
 810abe2:	681b      	ldr	r3, [r3, #0]
 810abe4:	3308      	adds	r3, #8
 810abe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810abe8:	6a3b      	ldr	r3, [r7, #32]
 810abea:	e853 3f00 	ldrex	r3, [r3]
 810abee:	61fb      	str	r3, [r7, #28]
   return(result);
 810abf0:	69fb      	ldr	r3, [r7, #28]
 810abf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810abf6:	f023 0301 	bic.w	r3, r3, #1
 810abfa:	64bb      	str	r3, [r7, #72]	; 0x48
 810abfc:	687b      	ldr	r3, [r7, #4]
 810abfe:	681b      	ldr	r3, [r3, #0]
 810ac00:	3308      	adds	r3, #8
 810ac02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810ac04:	62fa      	str	r2, [r7, #44]	; 0x2c
 810ac06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ac08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810ac0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810ac0c:	e841 2300 	strex	r3, r2, [r1]
 810ac10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810ac12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ac14:	2b00      	cmp	r3, #0
 810ac16:	d1e3      	bne.n	810abe0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ac18:	687b      	ldr	r3, [r7, #4]
 810ac1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ac1c:	2b01      	cmp	r3, #1
 810ac1e:	d118      	bne.n	810ac52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ac20:	687b      	ldr	r3, [r7, #4]
 810ac22:	681b      	ldr	r3, [r3, #0]
 810ac24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ac26:	68fb      	ldr	r3, [r7, #12]
 810ac28:	e853 3f00 	ldrex	r3, [r3]
 810ac2c:	60bb      	str	r3, [r7, #8]
   return(result);
 810ac2e:	68bb      	ldr	r3, [r7, #8]
 810ac30:	f023 0310 	bic.w	r3, r3, #16
 810ac34:	647b      	str	r3, [r7, #68]	; 0x44
 810ac36:	687b      	ldr	r3, [r7, #4]
 810ac38:	681b      	ldr	r3, [r3, #0]
 810ac3a:	461a      	mov	r2, r3
 810ac3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810ac3e:	61bb      	str	r3, [r7, #24]
 810ac40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ac42:	6979      	ldr	r1, [r7, #20]
 810ac44:	69ba      	ldr	r2, [r7, #24]
 810ac46:	e841 2300 	strex	r3, r2, [r1]
 810ac4a:	613b      	str	r3, [r7, #16]
   return(result);
 810ac4c:	693b      	ldr	r3, [r7, #16]
 810ac4e:	2b00      	cmp	r3, #0
 810ac50:	d1e6      	bne.n	810ac20 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810ac52:	687b      	ldr	r3, [r7, #4]
 810ac54:	2220      	movs	r2, #32
 810ac56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ac5a:	687b      	ldr	r3, [r7, #4]
 810ac5c:	2200      	movs	r2, #0
 810ac5e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810ac60:	687b      	ldr	r3, [r7, #4]
 810ac62:	2200      	movs	r2, #0
 810ac64:	675a      	str	r2, [r3, #116]	; 0x74
}
 810ac66:	bf00      	nop
 810ac68:	3754      	adds	r7, #84	; 0x54
 810ac6a:	46bd      	mov	sp, r7
 810ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac70:	4770      	bx	lr

0810ac72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810ac72:	b480      	push	{r7}
 810ac74:	b085      	sub	sp, #20
 810ac76:	af00      	add	r7, sp, #0
 810ac78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ac7a:	687b      	ldr	r3, [r7, #4]
 810ac7c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810ac80:	2b01      	cmp	r3, #1
 810ac82:	d101      	bne.n	810ac88 <HAL_UARTEx_DisableFifoMode+0x16>
 810ac84:	2302      	movs	r3, #2
 810ac86:	e027      	b.n	810acd8 <HAL_UARTEx_DisableFifoMode+0x66>
 810ac88:	687b      	ldr	r3, [r7, #4]
 810ac8a:	2201      	movs	r2, #1
 810ac8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ac90:	687b      	ldr	r3, [r7, #4]
 810ac92:	2224      	movs	r2, #36	; 0x24
 810ac94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ac98:	687b      	ldr	r3, [r7, #4]
 810ac9a:	681b      	ldr	r3, [r3, #0]
 810ac9c:	681b      	ldr	r3, [r3, #0]
 810ac9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810aca0:	687b      	ldr	r3, [r7, #4]
 810aca2:	681b      	ldr	r3, [r3, #0]
 810aca4:	681a      	ldr	r2, [r3, #0]
 810aca6:	687b      	ldr	r3, [r7, #4]
 810aca8:	681b      	ldr	r3, [r3, #0]
 810acaa:	f022 0201 	bic.w	r2, r2, #1
 810acae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810acb0:	68fb      	ldr	r3, [r7, #12]
 810acb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810acb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810acb8:	687b      	ldr	r3, [r7, #4]
 810acba:	2200      	movs	r2, #0
 810acbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810acbe:	687b      	ldr	r3, [r7, #4]
 810acc0:	681b      	ldr	r3, [r3, #0]
 810acc2:	68fa      	ldr	r2, [r7, #12]
 810acc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810acc6:	687b      	ldr	r3, [r7, #4]
 810acc8:	2220      	movs	r2, #32
 810acca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810acce:	687b      	ldr	r3, [r7, #4]
 810acd0:	2200      	movs	r2, #0
 810acd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810acd6:	2300      	movs	r3, #0
}
 810acd8:	4618      	mov	r0, r3
 810acda:	3714      	adds	r7, #20
 810acdc:	46bd      	mov	sp, r7
 810acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ace2:	4770      	bx	lr

0810ace4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ace4:	b580      	push	{r7, lr}
 810ace6:	b084      	sub	sp, #16
 810ace8:	af00      	add	r7, sp, #0
 810acea:	6078      	str	r0, [r7, #4]
 810acec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810acee:	687b      	ldr	r3, [r7, #4]
 810acf0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810acf4:	2b01      	cmp	r3, #1
 810acf6:	d101      	bne.n	810acfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810acf8:	2302      	movs	r3, #2
 810acfa:	e02d      	b.n	810ad58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810acfc:	687b      	ldr	r3, [r7, #4]
 810acfe:	2201      	movs	r2, #1
 810ad00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ad04:	687b      	ldr	r3, [r7, #4]
 810ad06:	2224      	movs	r2, #36	; 0x24
 810ad08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ad0c:	687b      	ldr	r3, [r7, #4]
 810ad0e:	681b      	ldr	r3, [r3, #0]
 810ad10:	681b      	ldr	r3, [r3, #0]
 810ad12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ad14:	687b      	ldr	r3, [r7, #4]
 810ad16:	681b      	ldr	r3, [r3, #0]
 810ad18:	681a      	ldr	r2, [r3, #0]
 810ad1a:	687b      	ldr	r3, [r7, #4]
 810ad1c:	681b      	ldr	r3, [r3, #0]
 810ad1e:	f022 0201 	bic.w	r2, r2, #1
 810ad22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810ad24:	687b      	ldr	r3, [r7, #4]
 810ad26:	681b      	ldr	r3, [r3, #0]
 810ad28:	689b      	ldr	r3, [r3, #8]
 810ad2a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810ad2e:	687b      	ldr	r3, [r7, #4]
 810ad30:	681b      	ldr	r3, [r3, #0]
 810ad32:	683a      	ldr	r2, [r7, #0]
 810ad34:	430a      	orrs	r2, r1
 810ad36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ad38:	6878      	ldr	r0, [r7, #4]
 810ad3a:	f000 f84f 	bl	810addc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ad3e:	687b      	ldr	r3, [r7, #4]
 810ad40:	681b      	ldr	r3, [r3, #0]
 810ad42:	68fa      	ldr	r2, [r7, #12]
 810ad44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ad46:	687b      	ldr	r3, [r7, #4]
 810ad48:	2220      	movs	r2, #32
 810ad4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ad4e:	687b      	ldr	r3, [r7, #4]
 810ad50:	2200      	movs	r2, #0
 810ad52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810ad56:	2300      	movs	r3, #0
}
 810ad58:	4618      	mov	r0, r3
 810ad5a:	3710      	adds	r7, #16
 810ad5c:	46bd      	mov	sp, r7
 810ad5e:	bd80      	pop	{r7, pc}

0810ad60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ad60:	b580      	push	{r7, lr}
 810ad62:	b084      	sub	sp, #16
 810ad64:	af00      	add	r7, sp, #0
 810ad66:	6078      	str	r0, [r7, #4]
 810ad68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ad6a:	687b      	ldr	r3, [r7, #4]
 810ad6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810ad70:	2b01      	cmp	r3, #1
 810ad72:	d101      	bne.n	810ad78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810ad74:	2302      	movs	r3, #2
 810ad76:	e02d      	b.n	810add4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810ad78:	687b      	ldr	r3, [r7, #4]
 810ad7a:	2201      	movs	r2, #1
 810ad7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ad80:	687b      	ldr	r3, [r7, #4]
 810ad82:	2224      	movs	r2, #36	; 0x24
 810ad84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ad88:	687b      	ldr	r3, [r7, #4]
 810ad8a:	681b      	ldr	r3, [r3, #0]
 810ad8c:	681b      	ldr	r3, [r3, #0]
 810ad8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ad90:	687b      	ldr	r3, [r7, #4]
 810ad92:	681b      	ldr	r3, [r3, #0]
 810ad94:	681a      	ldr	r2, [r3, #0]
 810ad96:	687b      	ldr	r3, [r7, #4]
 810ad98:	681b      	ldr	r3, [r3, #0]
 810ad9a:	f022 0201 	bic.w	r2, r2, #1
 810ad9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810ada0:	687b      	ldr	r3, [r7, #4]
 810ada2:	681b      	ldr	r3, [r3, #0]
 810ada4:	689b      	ldr	r3, [r3, #8]
 810ada6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810adaa:	687b      	ldr	r3, [r7, #4]
 810adac:	681b      	ldr	r3, [r3, #0]
 810adae:	683a      	ldr	r2, [r7, #0]
 810adb0:	430a      	orrs	r2, r1
 810adb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810adb4:	6878      	ldr	r0, [r7, #4]
 810adb6:	f000 f811 	bl	810addc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810adba:	687b      	ldr	r3, [r7, #4]
 810adbc:	681b      	ldr	r3, [r3, #0]
 810adbe:	68fa      	ldr	r2, [r7, #12]
 810adc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810adc2:	687b      	ldr	r3, [r7, #4]
 810adc4:	2220      	movs	r2, #32
 810adc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810adca:	687b      	ldr	r3, [r7, #4]
 810adcc:	2200      	movs	r2, #0
 810adce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810add2:	2300      	movs	r3, #0
}
 810add4:	4618      	mov	r0, r3
 810add6:	3710      	adds	r7, #16
 810add8:	46bd      	mov	sp, r7
 810adda:	bd80      	pop	{r7, pc}

0810addc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810addc:	b480      	push	{r7}
 810adde:	b085      	sub	sp, #20
 810ade0:	af00      	add	r7, sp, #0
 810ade2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810ade4:	687b      	ldr	r3, [r7, #4]
 810ade6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ade8:	2b00      	cmp	r3, #0
 810adea:	d108      	bne.n	810adfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810adec:	687b      	ldr	r3, [r7, #4]
 810adee:	2201      	movs	r2, #1
 810adf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810adf4:	687b      	ldr	r3, [r7, #4]
 810adf6:	2201      	movs	r2, #1
 810adf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810adfc:	e031      	b.n	810ae62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810adfe:	2310      	movs	r3, #16
 810ae00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810ae02:	2310      	movs	r3, #16
 810ae04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810ae06:	687b      	ldr	r3, [r7, #4]
 810ae08:	681b      	ldr	r3, [r3, #0]
 810ae0a:	689b      	ldr	r3, [r3, #8]
 810ae0c:	0e5b      	lsrs	r3, r3, #25
 810ae0e:	b2db      	uxtb	r3, r3
 810ae10:	f003 0307 	and.w	r3, r3, #7
 810ae14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810ae16:	687b      	ldr	r3, [r7, #4]
 810ae18:	681b      	ldr	r3, [r3, #0]
 810ae1a:	689b      	ldr	r3, [r3, #8]
 810ae1c:	0f5b      	lsrs	r3, r3, #29
 810ae1e:	b2db      	uxtb	r3, r3
 810ae20:	f003 0307 	and.w	r3, r3, #7
 810ae24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ae26:	7bbb      	ldrb	r3, [r7, #14]
 810ae28:	7b3a      	ldrb	r2, [r7, #12]
 810ae2a:	4911      	ldr	r1, [pc, #68]	; (810ae70 <UARTEx_SetNbDataToProcess+0x94>)
 810ae2c:	5c8a      	ldrb	r2, [r1, r2]
 810ae2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810ae32:	7b3a      	ldrb	r2, [r7, #12]
 810ae34:	490f      	ldr	r1, [pc, #60]	; (810ae74 <UARTEx_SetNbDataToProcess+0x98>)
 810ae36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ae38:	fb93 f3f2 	sdiv	r3, r3, r2
 810ae3c:	b29a      	uxth	r2, r3
 810ae3e:	687b      	ldr	r3, [r7, #4]
 810ae40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ae44:	7bfb      	ldrb	r3, [r7, #15]
 810ae46:	7b7a      	ldrb	r2, [r7, #13]
 810ae48:	4909      	ldr	r1, [pc, #36]	; (810ae70 <UARTEx_SetNbDataToProcess+0x94>)
 810ae4a:	5c8a      	ldrb	r2, [r1, r2]
 810ae4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810ae50:	7b7a      	ldrb	r2, [r7, #13]
 810ae52:	4908      	ldr	r1, [pc, #32]	; (810ae74 <UARTEx_SetNbDataToProcess+0x98>)
 810ae54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ae56:	fb93 f3f2 	sdiv	r3, r3, r2
 810ae5a:	b29a      	uxth	r2, r3
 810ae5c:	687b      	ldr	r3, [r7, #4]
 810ae5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810ae62:	bf00      	nop
 810ae64:	3714      	adds	r7, #20
 810ae66:	46bd      	mov	sp, r7
 810ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae6c:	4770      	bx	lr
 810ae6e:	bf00      	nop
 810ae70:	0810fb60 	.word	0x0810fb60
 810ae74:	0810fb68 	.word	0x0810fb68

0810ae78 <__errno>:
 810ae78:	4b01      	ldr	r3, [pc, #4]	; (810ae80 <__errno+0x8>)
 810ae7a:	6818      	ldr	r0, [r3, #0]
 810ae7c:	4770      	bx	lr
 810ae7e:	bf00      	nop
 810ae80:	10000020 	.word	0x10000020

0810ae84 <__libc_init_array>:
 810ae84:	b570      	push	{r4, r5, r6, lr}
 810ae86:	4d0d      	ldr	r5, [pc, #52]	; (810aebc <__libc_init_array+0x38>)
 810ae88:	4c0d      	ldr	r4, [pc, #52]	; (810aec0 <__libc_init_array+0x3c>)
 810ae8a:	1b64      	subs	r4, r4, r5
 810ae8c:	10a4      	asrs	r4, r4, #2
 810ae8e:	2600      	movs	r6, #0
 810ae90:	42a6      	cmp	r6, r4
 810ae92:	d109      	bne.n	810aea8 <__libc_init_array+0x24>
 810ae94:	4d0b      	ldr	r5, [pc, #44]	; (810aec4 <__libc_init_array+0x40>)
 810ae96:	4c0c      	ldr	r4, [pc, #48]	; (810aec8 <__libc_init_array+0x44>)
 810ae98:	f004 fd1c 	bl	810f8d4 <_init>
 810ae9c:	1b64      	subs	r4, r4, r5
 810ae9e:	10a4      	asrs	r4, r4, #2
 810aea0:	2600      	movs	r6, #0
 810aea2:	42a6      	cmp	r6, r4
 810aea4:	d105      	bne.n	810aeb2 <__libc_init_array+0x2e>
 810aea6:	bd70      	pop	{r4, r5, r6, pc}
 810aea8:	f855 3b04 	ldr.w	r3, [r5], #4
 810aeac:	4798      	blx	r3
 810aeae:	3601      	adds	r6, #1
 810aeb0:	e7ee      	b.n	810ae90 <__libc_init_array+0xc>
 810aeb2:	f855 3b04 	ldr.w	r3, [r5], #4
 810aeb6:	4798      	blx	r3
 810aeb8:	3601      	adds	r6, #1
 810aeba:	e7f2      	b.n	810aea2 <__libc_init_array+0x1e>
 810aebc:	08110024 	.word	0x08110024
 810aec0:	08110024 	.word	0x08110024
 810aec4:	08110024 	.word	0x08110024
 810aec8:	08110028 	.word	0x08110028

0810aecc <malloc>:
 810aecc:	4b02      	ldr	r3, [pc, #8]	; (810aed8 <malloc+0xc>)
 810aece:	4601      	mov	r1, r0
 810aed0:	6818      	ldr	r0, [r3, #0]
 810aed2:	f000 b885 	b.w	810afe0 <_malloc_r>
 810aed6:	bf00      	nop
 810aed8:	10000020 	.word	0x10000020

0810aedc <memcpy>:
 810aedc:	440a      	add	r2, r1
 810aede:	4291      	cmp	r1, r2
 810aee0:	f100 33ff 	add.w	r3, r0, #4294967295
 810aee4:	d100      	bne.n	810aee8 <memcpy+0xc>
 810aee6:	4770      	bx	lr
 810aee8:	b510      	push	{r4, lr}
 810aeea:	f811 4b01 	ldrb.w	r4, [r1], #1
 810aeee:	f803 4f01 	strb.w	r4, [r3, #1]!
 810aef2:	4291      	cmp	r1, r2
 810aef4:	d1f9      	bne.n	810aeea <memcpy+0xe>
 810aef6:	bd10      	pop	{r4, pc}

0810aef8 <memset>:
 810aef8:	4402      	add	r2, r0
 810aefa:	4603      	mov	r3, r0
 810aefc:	4293      	cmp	r3, r2
 810aefe:	d100      	bne.n	810af02 <memset+0xa>
 810af00:	4770      	bx	lr
 810af02:	f803 1b01 	strb.w	r1, [r3], #1
 810af06:	e7f9      	b.n	810aefc <memset+0x4>

0810af08 <_free_r>:
 810af08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810af0a:	2900      	cmp	r1, #0
 810af0c:	d044      	beq.n	810af98 <_free_r+0x90>
 810af0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810af12:	9001      	str	r0, [sp, #4]
 810af14:	2b00      	cmp	r3, #0
 810af16:	f1a1 0404 	sub.w	r4, r1, #4
 810af1a:	bfb8      	it	lt
 810af1c:	18e4      	addlt	r4, r4, r3
 810af1e:	f003 fb9d 	bl	810e65c <__malloc_lock>
 810af22:	4a1e      	ldr	r2, [pc, #120]	; (810af9c <_free_r+0x94>)
 810af24:	9801      	ldr	r0, [sp, #4]
 810af26:	6813      	ldr	r3, [r2, #0]
 810af28:	b933      	cbnz	r3, 810af38 <_free_r+0x30>
 810af2a:	6063      	str	r3, [r4, #4]
 810af2c:	6014      	str	r4, [r2, #0]
 810af2e:	b003      	add	sp, #12
 810af30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810af34:	f003 bb98 	b.w	810e668 <__malloc_unlock>
 810af38:	42a3      	cmp	r3, r4
 810af3a:	d908      	bls.n	810af4e <_free_r+0x46>
 810af3c:	6825      	ldr	r5, [r4, #0]
 810af3e:	1961      	adds	r1, r4, r5
 810af40:	428b      	cmp	r3, r1
 810af42:	bf01      	itttt	eq
 810af44:	6819      	ldreq	r1, [r3, #0]
 810af46:	685b      	ldreq	r3, [r3, #4]
 810af48:	1949      	addeq	r1, r1, r5
 810af4a:	6021      	streq	r1, [r4, #0]
 810af4c:	e7ed      	b.n	810af2a <_free_r+0x22>
 810af4e:	461a      	mov	r2, r3
 810af50:	685b      	ldr	r3, [r3, #4]
 810af52:	b10b      	cbz	r3, 810af58 <_free_r+0x50>
 810af54:	42a3      	cmp	r3, r4
 810af56:	d9fa      	bls.n	810af4e <_free_r+0x46>
 810af58:	6811      	ldr	r1, [r2, #0]
 810af5a:	1855      	adds	r5, r2, r1
 810af5c:	42a5      	cmp	r5, r4
 810af5e:	d10b      	bne.n	810af78 <_free_r+0x70>
 810af60:	6824      	ldr	r4, [r4, #0]
 810af62:	4421      	add	r1, r4
 810af64:	1854      	adds	r4, r2, r1
 810af66:	42a3      	cmp	r3, r4
 810af68:	6011      	str	r1, [r2, #0]
 810af6a:	d1e0      	bne.n	810af2e <_free_r+0x26>
 810af6c:	681c      	ldr	r4, [r3, #0]
 810af6e:	685b      	ldr	r3, [r3, #4]
 810af70:	6053      	str	r3, [r2, #4]
 810af72:	4421      	add	r1, r4
 810af74:	6011      	str	r1, [r2, #0]
 810af76:	e7da      	b.n	810af2e <_free_r+0x26>
 810af78:	d902      	bls.n	810af80 <_free_r+0x78>
 810af7a:	230c      	movs	r3, #12
 810af7c:	6003      	str	r3, [r0, #0]
 810af7e:	e7d6      	b.n	810af2e <_free_r+0x26>
 810af80:	6825      	ldr	r5, [r4, #0]
 810af82:	1961      	adds	r1, r4, r5
 810af84:	428b      	cmp	r3, r1
 810af86:	bf04      	itt	eq
 810af88:	6819      	ldreq	r1, [r3, #0]
 810af8a:	685b      	ldreq	r3, [r3, #4]
 810af8c:	6063      	str	r3, [r4, #4]
 810af8e:	bf04      	itt	eq
 810af90:	1949      	addeq	r1, r1, r5
 810af92:	6021      	streq	r1, [r4, #0]
 810af94:	6054      	str	r4, [r2, #4]
 810af96:	e7ca      	b.n	810af2e <_free_r+0x26>
 810af98:	b003      	add	sp, #12
 810af9a:	bd30      	pop	{r4, r5, pc}
 810af9c:	100004a8 	.word	0x100004a8

0810afa0 <sbrk_aligned>:
 810afa0:	b570      	push	{r4, r5, r6, lr}
 810afa2:	4e0e      	ldr	r6, [pc, #56]	; (810afdc <sbrk_aligned+0x3c>)
 810afa4:	460c      	mov	r4, r1
 810afa6:	6831      	ldr	r1, [r6, #0]
 810afa8:	4605      	mov	r5, r0
 810afaa:	b911      	cbnz	r1, 810afb2 <sbrk_aligned+0x12>
 810afac:	f000 ff94 	bl	810bed8 <_sbrk_r>
 810afb0:	6030      	str	r0, [r6, #0]
 810afb2:	4621      	mov	r1, r4
 810afb4:	4628      	mov	r0, r5
 810afb6:	f000 ff8f 	bl	810bed8 <_sbrk_r>
 810afba:	1c43      	adds	r3, r0, #1
 810afbc:	d00a      	beq.n	810afd4 <sbrk_aligned+0x34>
 810afbe:	1cc4      	adds	r4, r0, #3
 810afc0:	f024 0403 	bic.w	r4, r4, #3
 810afc4:	42a0      	cmp	r0, r4
 810afc6:	d007      	beq.n	810afd8 <sbrk_aligned+0x38>
 810afc8:	1a21      	subs	r1, r4, r0
 810afca:	4628      	mov	r0, r5
 810afcc:	f000 ff84 	bl	810bed8 <_sbrk_r>
 810afd0:	3001      	adds	r0, #1
 810afd2:	d101      	bne.n	810afd8 <sbrk_aligned+0x38>
 810afd4:	f04f 34ff 	mov.w	r4, #4294967295
 810afd8:	4620      	mov	r0, r4
 810afda:	bd70      	pop	{r4, r5, r6, pc}
 810afdc:	100004ac 	.word	0x100004ac

0810afe0 <_malloc_r>:
 810afe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810afe4:	1ccd      	adds	r5, r1, #3
 810afe6:	f025 0503 	bic.w	r5, r5, #3
 810afea:	3508      	adds	r5, #8
 810afec:	2d0c      	cmp	r5, #12
 810afee:	bf38      	it	cc
 810aff0:	250c      	movcc	r5, #12
 810aff2:	2d00      	cmp	r5, #0
 810aff4:	4607      	mov	r7, r0
 810aff6:	db01      	blt.n	810affc <_malloc_r+0x1c>
 810aff8:	42a9      	cmp	r1, r5
 810affa:	d905      	bls.n	810b008 <_malloc_r+0x28>
 810affc:	230c      	movs	r3, #12
 810affe:	603b      	str	r3, [r7, #0]
 810b000:	2600      	movs	r6, #0
 810b002:	4630      	mov	r0, r6
 810b004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b008:	4e2e      	ldr	r6, [pc, #184]	; (810b0c4 <_malloc_r+0xe4>)
 810b00a:	f003 fb27 	bl	810e65c <__malloc_lock>
 810b00e:	6833      	ldr	r3, [r6, #0]
 810b010:	461c      	mov	r4, r3
 810b012:	bb34      	cbnz	r4, 810b062 <_malloc_r+0x82>
 810b014:	4629      	mov	r1, r5
 810b016:	4638      	mov	r0, r7
 810b018:	f7ff ffc2 	bl	810afa0 <sbrk_aligned>
 810b01c:	1c43      	adds	r3, r0, #1
 810b01e:	4604      	mov	r4, r0
 810b020:	d14d      	bne.n	810b0be <_malloc_r+0xde>
 810b022:	6834      	ldr	r4, [r6, #0]
 810b024:	4626      	mov	r6, r4
 810b026:	2e00      	cmp	r6, #0
 810b028:	d140      	bne.n	810b0ac <_malloc_r+0xcc>
 810b02a:	6823      	ldr	r3, [r4, #0]
 810b02c:	4631      	mov	r1, r6
 810b02e:	4638      	mov	r0, r7
 810b030:	eb04 0803 	add.w	r8, r4, r3
 810b034:	f000 ff50 	bl	810bed8 <_sbrk_r>
 810b038:	4580      	cmp	r8, r0
 810b03a:	d13a      	bne.n	810b0b2 <_malloc_r+0xd2>
 810b03c:	6821      	ldr	r1, [r4, #0]
 810b03e:	3503      	adds	r5, #3
 810b040:	1a6d      	subs	r5, r5, r1
 810b042:	f025 0503 	bic.w	r5, r5, #3
 810b046:	3508      	adds	r5, #8
 810b048:	2d0c      	cmp	r5, #12
 810b04a:	bf38      	it	cc
 810b04c:	250c      	movcc	r5, #12
 810b04e:	4629      	mov	r1, r5
 810b050:	4638      	mov	r0, r7
 810b052:	f7ff ffa5 	bl	810afa0 <sbrk_aligned>
 810b056:	3001      	adds	r0, #1
 810b058:	d02b      	beq.n	810b0b2 <_malloc_r+0xd2>
 810b05a:	6823      	ldr	r3, [r4, #0]
 810b05c:	442b      	add	r3, r5
 810b05e:	6023      	str	r3, [r4, #0]
 810b060:	e00e      	b.n	810b080 <_malloc_r+0xa0>
 810b062:	6822      	ldr	r2, [r4, #0]
 810b064:	1b52      	subs	r2, r2, r5
 810b066:	d41e      	bmi.n	810b0a6 <_malloc_r+0xc6>
 810b068:	2a0b      	cmp	r2, #11
 810b06a:	d916      	bls.n	810b09a <_malloc_r+0xba>
 810b06c:	1961      	adds	r1, r4, r5
 810b06e:	42a3      	cmp	r3, r4
 810b070:	6025      	str	r5, [r4, #0]
 810b072:	bf18      	it	ne
 810b074:	6059      	strne	r1, [r3, #4]
 810b076:	6863      	ldr	r3, [r4, #4]
 810b078:	bf08      	it	eq
 810b07a:	6031      	streq	r1, [r6, #0]
 810b07c:	5162      	str	r2, [r4, r5]
 810b07e:	604b      	str	r3, [r1, #4]
 810b080:	4638      	mov	r0, r7
 810b082:	f104 060b 	add.w	r6, r4, #11
 810b086:	f003 faef 	bl	810e668 <__malloc_unlock>
 810b08a:	f026 0607 	bic.w	r6, r6, #7
 810b08e:	1d23      	adds	r3, r4, #4
 810b090:	1af2      	subs	r2, r6, r3
 810b092:	d0b6      	beq.n	810b002 <_malloc_r+0x22>
 810b094:	1b9b      	subs	r3, r3, r6
 810b096:	50a3      	str	r3, [r4, r2]
 810b098:	e7b3      	b.n	810b002 <_malloc_r+0x22>
 810b09a:	6862      	ldr	r2, [r4, #4]
 810b09c:	42a3      	cmp	r3, r4
 810b09e:	bf0c      	ite	eq
 810b0a0:	6032      	streq	r2, [r6, #0]
 810b0a2:	605a      	strne	r2, [r3, #4]
 810b0a4:	e7ec      	b.n	810b080 <_malloc_r+0xa0>
 810b0a6:	4623      	mov	r3, r4
 810b0a8:	6864      	ldr	r4, [r4, #4]
 810b0aa:	e7b2      	b.n	810b012 <_malloc_r+0x32>
 810b0ac:	4634      	mov	r4, r6
 810b0ae:	6876      	ldr	r6, [r6, #4]
 810b0b0:	e7b9      	b.n	810b026 <_malloc_r+0x46>
 810b0b2:	230c      	movs	r3, #12
 810b0b4:	603b      	str	r3, [r7, #0]
 810b0b6:	4638      	mov	r0, r7
 810b0b8:	f003 fad6 	bl	810e668 <__malloc_unlock>
 810b0bc:	e7a1      	b.n	810b002 <_malloc_r+0x22>
 810b0be:	6025      	str	r5, [r4, #0]
 810b0c0:	e7de      	b.n	810b080 <_malloc_r+0xa0>
 810b0c2:	bf00      	nop
 810b0c4:	100004a8 	.word	0x100004a8

0810b0c8 <__cvt>:
 810b0c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810b0cc:	ec55 4b10 	vmov	r4, r5, d0
 810b0d0:	2d00      	cmp	r5, #0
 810b0d2:	460e      	mov	r6, r1
 810b0d4:	4619      	mov	r1, r3
 810b0d6:	462b      	mov	r3, r5
 810b0d8:	bfbb      	ittet	lt
 810b0da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810b0de:	461d      	movlt	r5, r3
 810b0e0:	2300      	movge	r3, #0
 810b0e2:	232d      	movlt	r3, #45	; 0x2d
 810b0e4:	700b      	strb	r3, [r1, #0]
 810b0e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b0e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810b0ec:	4691      	mov	r9, r2
 810b0ee:	f023 0820 	bic.w	r8, r3, #32
 810b0f2:	bfbc      	itt	lt
 810b0f4:	4622      	movlt	r2, r4
 810b0f6:	4614      	movlt	r4, r2
 810b0f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810b0fc:	d005      	beq.n	810b10a <__cvt+0x42>
 810b0fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810b102:	d100      	bne.n	810b106 <__cvt+0x3e>
 810b104:	3601      	adds	r6, #1
 810b106:	2102      	movs	r1, #2
 810b108:	e000      	b.n	810b10c <__cvt+0x44>
 810b10a:	2103      	movs	r1, #3
 810b10c:	ab03      	add	r3, sp, #12
 810b10e:	9301      	str	r3, [sp, #4]
 810b110:	ab02      	add	r3, sp, #8
 810b112:	9300      	str	r3, [sp, #0]
 810b114:	ec45 4b10 	vmov	d0, r4, r5
 810b118:	4653      	mov	r3, sl
 810b11a:	4632      	mov	r2, r6
 810b11c:	f001 ff0c 	bl	810cf38 <_dtoa_r>
 810b120:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810b124:	4607      	mov	r7, r0
 810b126:	d102      	bne.n	810b12e <__cvt+0x66>
 810b128:	f019 0f01 	tst.w	r9, #1
 810b12c:	d022      	beq.n	810b174 <__cvt+0xac>
 810b12e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810b132:	eb07 0906 	add.w	r9, r7, r6
 810b136:	d110      	bne.n	810b15a <__cvt+0x92>
 810b138:	783b      	ldrb	r3, [r7, #0]
 810b13a:	2b30      	cmp	r3, #48	; 0x30
 810b13c:	d10a      	bne.n	810b154 <__cvt+0x8c>
 810b13e:	2200      	movs	r2, #0
 810b140:	2300      	movs	r3, #0
 810b142:	4620      	mov	r0, r4
 810b144:	4629      	mov	r1, r5
 810b146:	f7f5 fd47 	bl	8100bd8 <__aeabi_dcmpeq>
 810b14a:	b918      	cbnz	r0, 810b154 <__cvt+0x8c>
 810b14c:	f1c6 0601 	rsb	r6, r6, #1
 810b150:	f8ca 6000 	str.w	r6, [sl]
 810b154:	f8da 3000 	ldr.w	r3, [sl]
 810b158:	4499      	add	r9, r3
 810b15a:	2200      	movs	r2, #0
 810b15c:	2300      	movs	r3, #0
 810b15e:	4620      	mov	r0, r4
 810b160:	4629      	mov	r1, r5
 810b162:	f7f5 fd39 	bl	8100bd8 <__aeabi_dcmpeq>
 810b166:	b108      	cbz	r0, 810b16c <__cvt+0xa4>
 810b168:	f8cd 900c 	str.w	r9, [sp, #12]
 810b16c:	2230      	movs	r2, #48	; 0x30
 810b16e:	9b03      	ldr	r3, [sp, #12]
 810b170:	454b      	cmp	r3, r9
 810b172:	d307      	bcc.n	810b184 <__cvt+0xbc>
 810b174:	9b03      	ldr	r3, [sp, #12]
 810b176:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810b178:	1bdb      	subs	r3, r3, r7
 810b17a:	4638      	mov	r0, r7
 810b17c:	6013      	str	r3, [r2, #0]
 810b17e:	b004      	add	sp, #16
 810b180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b184:	1c59      	adds	r1, r3, #1
 810b186:	9103      	str	r1, [sp, #12]
 810b188:	701a      	strb	r2, [r3, #0]
 810b18a:	e7f0      	b.n	810b16e <__cvt+0xa6>

0810b18c <__exponent>:
 810b18c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810b18e:	4603      	mov	r3, r0
 810b190:	2900      	cmp	r1, #0
 810b192:	bfb8      	it	lt
 810b194:	4249      	neglt	r1, r1
 810b196:	f803 2b02 	strb.w	r2, [r3], #2
 810b19a:	bfb4      	ite	lt
 810b19c:	222d      	movlt	r2, #45	; 0x2d
 810b19e:	222b      	movge	r2, #43	; 0x2b
 810b1a0:	2909      	cmp	r1, #9
 810b1a2:	7042      	strb	r2, [r0, #1]
 810b1a4:	dd2a      	ble.n	810b1fc <__exponent+0x70>
 810b1a6:	f10d 0407 	add.w	r4, sp, #7
 810b1aa:	46a4      	mov	ip, r4
 810b1ac:	270a      	movs	r7, #10
 810b1ae:	46a6      	mov	lr, r4
 810b1b0:	460a      	mov	r2, r1
 810b1b2:	fb91 f6f7 	sdiv	r6, r1, r7
 810b1b6:	fb07 1516 	mls	r5, r7, r6, r1
 810b1ba:	3530      	adds	r5, #48	; 0x30
 810b1bc:	2a63      	cmp	r2, #99	; 0x63
 810b1be:	f104 34ff 	add.w	r4, r4, #4294967295
 810b1c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 810b1c6:	4631      	mov	r1, r6
 810b1c8:	dcf1      	bgt.n	810b1ae <__exponent+0x22>
 810b1ca:	3130      	adds	r1, #48	; 0x30
 810b1cc:	f1ae 0502 	sub.w	r5, lr, #2
 810b1d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 810b1d4:	1c44      	adds	r4, r0, #1
 810b1d6:	4629      	mov	r1, r5
 810b1d8:	4561      	cmp	r1, ip
 810b1da:	d30a      	bcc.n	810b1f2 <__exponent+0x66>
 810b1dc:	f10d 0209 	add.w	r2, sp, #9
 810b1e0:	eba2 020e 	sub.w	r2, r2, lr
 810b1e4:	4565      	cmp	r5, ip
 810b1e6:	bf88      	it	hi
 810b1e8:	2200      	movhi	r2, #0
 810b1ea:	4413      	add	r3, r2
 810b1ec:	1a18      	subs	r0, r3, r0
 810b1ee:	b003      	add	sp, #12
 810b1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810b1f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 810b1f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 810b1fa:	e7ed      	b.n	810b1d8 <__exponent+0x4c>
 810b1fc:	2330      	movs	r3, #48	; 0x30
 810b1fe:	3130      	adds	r1, #48	; 0x30
 810b200:	7083      	strb	r3, [r0, #2]
 810b202:	70c1      	strb	r1, [r0, #3]
 810b204:	1d03      	adds	r3, r0, #4
 810b206:	e7f1      	b.n	810b1ec <__exponent+0x60>

0810b208 <_printf_float>:
 810b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b20c:	ed2d 8b02 	vpush	{d8}
 810b210:	b08d      	sub	sp, #52	; 0x34
 810b212:	460c      	mov	r4, r1
 810b214:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810b218:	4616      	mov	r6, r2
 810b21a:	461f      	mov	r7, r3
 810b21c:	4605      	mov	r5, r0
 810b21e:	f003 f99f 	bl	810e560 <_localeconv_r>
 810b222:	f8d0 a000 	ldr.w	sl, [r0]
 810b226:	4650      	mov	r0, sl
 810b228:	f7f5 f85a 	bl	81002e0 <strlen>
 810b22c:	2300      	movs	r3, #0
 810b22e:	930a      	str	r3, [sp, #40]	; 0x28
 810b230:	6823      	ldr	r3, [r4, #0]
 810b232:	9305      	str	r3, [sp, #20]
 810b234:	f8d8 3000 	ldr.w	r3, [r8]
 810b238:	f894 b018 	ldrb.w	fp, [r4, #24]
 810b23c:	3307      	adds	r3, #7
 810b23e:	f023 0307 	bic.w	r3, r3, #7
 810b242:	f103 0208 	add.w	r2, r3, #8
 810b246:	f8c8 2000 	str.w	r2, [r8]
 810b24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b24e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810b252:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810b256:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810b25a:	9307      	str	r3, [sp, #28]
 810b25c:	f8cd 8018 	str.w	r8, [sp, #24]
 810b260:	ee08 0a10 	vmov	s16, r0
 810b264:	4b9f      	ldr	r3, [pc, #636]	; (810b4e4 <_printf_float+0x2dc>)
 810b266:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810b26a:	f04f 32ff 	mov.w	r2, #4294967295
 810b26e:	f7f5 fce5 	bl	8100c3c <__aeabi_dcmpun>
 810b272:	bb88      	cbnz	r0, 810b2d8 <_printf_float+0xd0>
 810b274:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810b278:	4b9a      	ldr	r3, [pc, #616]	; (810b4e4 <_printf_float+0x2dc>)
 810b27a:	f04f 32ff 	mov.w	r2, #4294967295
 810b27e:	f7f5 fcbf 	bl	8100c00 <__aeabi_dcmple>
 810b282:	bb48      	cbnz	r0, 810b2d8 <_printf_float+0xd0>
 810b284:	2200      	movs	r2, #0
 810b286:	2300      	movs	r3, #0
 810b288:	4640      	mov	r0, r8
 810b28a:	4649      	mov	r1, r9
 810b28c:	f7f5 fcae 	bl	8100bec <__aeabi_dcmplt>
 810b290:	b110      	cbz	r0, 810b298 <_printf_float+0x90>
 810b292:	232d      	movs	r3, #45	; 0x2d
 810b294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b298:	4b93      	ldr	r3, [pc, #588]	; (810b4e8 <_printf_float+0x2e0>)
 810b29a:	4894      	ldr	r0, [pc, #592]	; (810b4ec <_printf_float+0x2e4>)
 810b29c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 810b2a0:	bf94      	ite	ls
 810b2a2:	4698      	movls	r8, r3
 810b2a4:	4680      	movhi	r8, r0
 810b2a6:	2303      	movs	r3, #3
 810b2a8:	6123      	str	r3, [r4, #16]
 810b2aa:	9b05      	ldr	r3, [sp, #20]
 810b2ac:	f023 0204 	bic.w	r2, r3, #4
 810b2b0:	6022      	str	r2, [r4, #0]
 810b2b2:	f04f 0900 	mov.w	r9, #0
 810b2b6:	9700      	str	r7, [sp, #0]
 810b2b8:	4633      	mov	r3, r6
 810b2ba:	aa0b      	add	r2, sp, #44	; 0x2c
 810b2bc:	4621      	mov	r1, r4
 810b2be:	4628      	mov	r0, r5
 810b2c0:	f000 f9d8 	bl	810b674 <_printf_common>
 810b2c4:	3001      	adds	r0, #1
 810b2c6:	f040 8090 	bne.w	810b3ea <_printf_float+0x1e2>
 810b2ca:	f04f 30ff 	mov.w	r0, #4294967295
 810b2ce:	b00d      	add	sp, #52	; 0x34
 810b2d0:	ecbd 8b02 	vpop	{d8}
 810b2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b2d8:	4642      	mov	r2, r8
 810b2da:	464b      	mov	r3, r9
 810b2dc:	4640      	mov	r0, r8
 810b2de:	4649      	mov	r1, r9
 810b2e0:	f7f5 fcac 	bl	8100c3c <__aeabi_dcmpun>
 810b2e4:	b140      	cbz	r0, 810b2f8 <_printf_float+0xf0>
 810b2e6:	464b      	mov	r3, r9
 810b2e8:	2b00      	cmp	r3, #0
 810b2ea:	bfbc      	itt	lt
 810b2ec:	232d      	movlt	r3, #45	; 0x2d
 810b2ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 810b2f2:	487f      	ldr	r0, [pc, #508]	; (810b4f0 <_printf_float+0x2e8>)
 810b2f4:	4b7f      	ldr	r3, [pc, #508]	; (810b4f4 <_printf_float+0x2ec>)
 810b2f6:	e7d1      	b.n	810b29c <_printf_float+0x94>
 810b2f8:	6863      	ldr	r3, [r4, #4]
 810b2fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810b2fe:	9206      	str	r2, [sp, #24]
 810b300:	1c5a      	adds	r2, r3, #1
 810b302:	d13f      	bne.n	810b384 <_printf_float+0x17c>
 810b304:	2306      	movs	r3, #6
 810b306:	6063      	str	r3, [r4, #4]
 810b308:	9b05      	ldr	r3, [sp, #20]
 810b30a:	6861      	ldr	r1, [r4, #4]
 810b30c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 810b310:	2300      	movs	r3, #0
 810b312:	9303      	str	r3, [sp, #12]
 810b314:	ab0a      	add	r3, sp, #40	; 0x28
 810b316:	e9cd b301 	strd	fp, r3, [sp, #4]
 810b31a:	ab09      	add	r3, sp, #36	; 0x24
 810b31c:	ec49 8b10 	vmov	d0, r8, r9
 810b320:	9300      	str	r3, [sp, #0]
 810b322:	6022      	str	r2, [r4, #0]
 810b324:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810b328:	4628      	mov	r0, r5
 810b32a:	f7ff fecd 	bl	810b0c8 <__cvt>
 810b32e:	9b06      	ldr	r3, [sp, #24]
 810b330:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b332:	2b47      	cmp	r3, #71	; 0x47
 810b334:	4680      	mov	r8, r0
 810b336:	d108      	bne.n	810b34a <_printf_float+0x142>
 810b338:	1cc8      	adds	r0, r1, #3
 810b33a:	db02      	blt.n	810b342 <_printf_float+0x13a>
 810b33c:	6863      	ldr	r3, [r4, #4]
 810b33e:	4299      	cmp	r1, r3
 810b340:	dd41      	ble.n	810b3c6 <_printf_float+0x1be>
 810b342:	f1ab 0b02 	sub.w	fp, fp, #2
 810b346:	fa5f fb8b 	uxtb.w	fp, fp
 810b34a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810b34e:	d820      	bhi.n	810b392 <_printf_float+0x18a>
 810b350:	3901      	subs	r1, #1
 810b352:	465a      	mov	r2, fp
 810b354:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810b358:	9109      	str	r1, [sp, #36]	; 0x24
 810b35a:	f7ff ff17 	bl	810b18c <__exponent>
 810b35e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810b360:	1813      	adds	r3, r2, r0
 810b362:	2a01      	cmp	r2, #1
 810b364:	4681      	mov	r9, r0
 810b366:	6123      	str	r3, [r4, #16]
 810b368:	dc02      	bgt.n	810b370 <_printf_float+0x168>
 810b36a:	6822      	ldr	r2, [r4, #0]
 810b36c:	07d2      	lsls	r2, r2, #31
 810b36e:	d501      	bpl.n	810b374 <_printf_float+0x16c>
 810b370:	3301      	adds	r3, #1
 810b372:	6123      	str	r3, [r4, #16]
 810b374:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810b378:	2b00      	cmp	r3, #0
 810b37a:	d09c      	beq.n	810b2b6 <_printf_float+0xae>
 810b37c:	232d      	movs	r3, #45	; 0x2d
 810b37e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b382:	e798      	b.n	810b2b6 <_printf_float+0xae>
 810b384:	9a06      	ldr	r2, [sp, #24]
 810b386:	2a47      	cmp	r2, #71	; 0x47
 810b388:	d1be      	bne.n	810b308 <_printf_float+0x100>
 810b38a:	2b00      	cmp	r3, #0
 810b38c:	d1bc      	bne.n	810b308 <_printf_float+0x100>
 810b38e:	2301      	movs	r3, #1
 810b390:	e7b9      	b.n	810b306 <_printf_float+0xfe>
 810b392:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 810b396:	d118      	bne.n	810b3ca <_printf_float+0x1c2>
 810b398:	2900      	cmp	r1, #0
 810b39a:	6863      	ldr	r3, [r4, #4]
 810b39c:	dd0b      	ble.n	810b3b6 <_printf_float+0x1ae>
 810b39e:	6121      	str	r1, [r4, #16]
 810b3a0:	b913      	cbnz	r3, 810b3a8 <_printf_float+0x1a0>
 810b3a2:	6822      	ldr	r2, [r4, #0]
 810b3a4:	07d0      	lsls	r0, r2, #31
 810b3a6:	d502      	bpl.n	810b3ae <_printf_float+0x1a6>
 810b3a8:	3301      	adds	r3, #1
 810b3aa:	440b      	add	r3, r1
 810b3ac:	6123      	str	r3, [r4, #16]
 810b3ae:	65a1      	str	r1, [r4, #88]	; 0x58
 810b3b0:	f04f 0900 	mov.w	r9, #0
 810b3b4:	e7de      	b.n	810b374 <_printf_float+0x16c>
 810b3b6:	b913      	cbnz	r3, 810b3be <_printf_float+0x1b6>
 810b3b8:	6822      	ldr	r2, [r4, #0]
 810b3ba:	07d2      	lsls	r2, r2, #31
 810b3bc:	d501      	bpl.n	810b3c2 <_printf_float+0x1ba>
 810b3be:	3302      	adds	r3, #2
 810b3c0:	e7f4      	b.n	810b3ac <_printf_float+0x1a4>
 810b3c2:	2301      	movs	r3, #1
 810b3c4:	e7f2      	b.n	810b3ac <_printf_float+0x1a4>
 810b3c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810b3ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b3cc:	4299      	cmp	r1, r3
 810b3ce:	db05      	blt.n	810b3dc <_printf_float+0x1d4>
 810b3d0:	6823      	ldr	r3, [r4, #0]
 810b3d2:	6121      	str	r1, [r4, #16]
 810b3d4:	07d8      	lsls	r0, r3, #31
 810b3d6:	d5ea      	bpl.n	810b3ae <_printf_float+0x1a6>
 810b3d8:	1c4b      	adds	r3, r1, #1
 810b3da:	e7e7      	b.n	810b3ac <_printf_float+0x1a4>
 810b3dc:	2900      	cmp	r1, #0
 810b3de:	bfd4      	ite	le
 810b3e0:	f1c1 0202 	rsble	r2, r1, #2
 810b3e4:	2201      	movgt	r2, #1
 810b3e6:	4413      	add	r3, r2
 810b3e8:	e7e0      	b.n	810b3ac <_printf_float+0x1a4>
 810b3ea:	6823      	ldr	r3, [r4, #0]
 810b3ec:	055a      	lsls	r2, r3, #21
 810b3ee:	d407      	bmi.n	810b400 <_printf_float+0x1f8>
 810b3f0:	6923      	ldr	r3, [r4, #16]
 810b3f2:	4642      	mov	r2, r8
 810b3f4:	4631      	mov	r1, r6
 810b3f6:	4628      	mov	r0, r5
 810b3f8:	47b8      	blx	r7
 810b3fa:	3001      	adds	r0, #1
 810b3fc:	d12c      	bne.n	810b458 <_printf_float+0x250>
 810b3fe:	e764      	b.n	810b2ca <_printf_float+0xc2>
 810b400:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810b404:	f240 80e0 	bls.w	810b5c8 <_printf_float+0x3c0>
 810b408:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810b40c:	2200      	movs	r2, #0
 810b40e:	2300      	movs	r3, #0
 810b410:	f7f5 fbe2 	bl	8100bd8 <__aeabi_dcmpeq>
 810b414:	2800      	cmp	r0, #0
 810b416:	d034      	beq.n	810b482 <_printf_float+0x27a>
 810b418:	4a37      	ldr	r2, [pc, #220]	; (810b4f8 <_printf_float+0x2f0>)
 810b41a:	2301      	movs	r3, #1
 810b41c:	4631      	mov	r1, r6
 810b41e:	4628      	mov	r0, r5
 810b420:	47b8      	blx	r7
 810b422:	3001      	adds	r0, #1
 810b424:	f43f af51 	beq.w	810b2ca <_printf_float+0xc2>
 810b428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b42c:	429a      	cmp	r2, r3
 810b42e:	db02      	blt.n	810b436 <_printf_float+0x22e>
 810b430:	6823      	ldr	r3, [r4, #0]
 810b432:	07d8      	lsls	r0, r3, #31
 810b434:	d510      	bpl.n	810b458 <_printf_float+0x250>
 810b436:	ee18 3a10 	vmov	r3, s16
 810b43a:	4652      	mov	r2, sl
 810b43c:	4631      	mov	r1, r6
 810b43e:	4628      	mov	r0, r5
 810b440:	47b8      	blx	r7
 810b442:	3001      	adds	r0, #1
 810b444:	f43f af41 	beq.w	810b2ca <_printf_float+0xc2>
 810b448:	f04f 0800 	mov.w	r8, #0
 810b44c:	f104 091a 	add.w	r9, r4, #26
 810b450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b452:	3b01      	subs	r3, #1
 810b454:	4543      	cmp	r3, r8
 810b456:	dc09      	bgt.n	810b46c <_printf_float+0x264>
 810b458:	6823      	ldr	r3, [r4, #0]
 810b45a:	079b      	lsls	r3, r3, #30
 810b45c:	f100 8105 	bmi.w	810b66a <_printf_float+0x462>
 810b460:	68e0      	ldr	r0, [r4, #12]
 810b462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b464:	4298      	cmp	r0, r3
 810b466:	bfb8      	it	lt
 810b468:	4618      	movlt	r0, r3
 810b46a:	e730      	b.n	810b2ce <_printf_float+0xc6>
 810b46c:	2301      	movs	r3, #1
 810b46e:	464a      	mov	r2, r9
 810b470:	4631      	mov	r1, r6
 810b472:	4628      	mov	r0, r5
 810b474:	47b8      	blx	r7
 810b476:	3001      	adds	r0, #1
 810b478:	f43f af27 	beq.w	810b2ca <_printf_float+0xc2>
 810b47c:	f108 0801 	add.w	r8, r8, #1
 810b480:	e7e6      	b.n	810b450 <_printf_float+0x248>
 810b482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b484:	2b00      	cmp	r3, #0
 810b486:	dc39      	bgt.n	810b4fc <_printf_float+0x2f4>
 810b488:	4a1b      	ldr	r2, [pc, #108]	; (810b4f8 <_printf_float+0x2f0>)
 810b48a:	2301      	movs	r3, #1
 810b48c:	4631      	mov	r1, r6
 810b48e:	4628      	mov	r0, r5
 810b490:	47b8      	blx	r7
 810b492:	3001      	adds	r0, #1
 810b494:	f43f af19 	beq.w	810b2ca <_printf_float+0xc2>
 810b498:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b49c:	4313      	orrs	r3, r2
 810b49e:	d102      	bne.n	810b4a6 <_printf_float+0x29e>
 810b4a0:	6823      	ldr	r3, [r4, #0]
 810b4a2:	07d9      	lsls	r1, r3, #31
 810b4a4:	d5d8      	bpl.n	810b458 <_printf_float+0x250>
 810b4a6:	ee18 3a10 	vmov	r3, s16
 810b4aa:	4652      	mov	r2, sl
 810b4ac:	4631      	mov	r1, r6
 810b4ae:	4628      	mov	r0, r5
 810b4b0:	47b8      	blx	r7
 810b4b2:	3001      	adds	r0, #1
 810b4b4:	f43f af09 	beq.w	810b2ca <_printf_float+0xc2>
 810b4b8:	f04f 0900 	mov.w	r9, #0
 810b4bc:	f104 0a1a 	add.w	sl, r4, #26
 810b4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b4c2:	425b      	negs	r3, r3
 810b4c4:	454b      	cmp	r3, r9
 810b4c6:	dc01      	bgt.n	810b4cc <_printf_float+0x2c4>
 810b4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b4ca:	e792      	b.n	810b3f2 <_printf_float+0x1ea>
 810b4cc:	2301      	movs	r3, #1
 810b4ce:	4652      	mov	r2, sl
 810b4d0:	4631      	mov	r1, r6
 810b4d2:	4628      	mov	r0, r5
 810b4d4:	47b8      	blx	r7
 810b4d6:	3001      	adds	r0, #1
 810b4d8:	f43f aef7 	beq.w	810b2ca <_printf_float+0xc2>
 810b4dc:	f109 0901 	add.w	r9, r9, #1
 810b4e0:	e7ee      	b.n	810b4c0 <_printf_float+0x2b8>
 810b4e2:	bf00      	nop
 810b4e4:	7fefffff 	.word	0x7fefffff
 810b4e8:	0810fb74 	.word	0x0810fb74
 810b4ec:	0810fb78 	.word	0x0810fb78
 810b4f0:	0810fb80 	.word	0x0810fb80
 810b4f4:	0810fb7c 	.word	0x0810fb7c
 810b4f8:	0810fb84 	.word	0x0810fb84
 810b4fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810b4fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810b500:	429a      	cmp	r2, r3
 810b502:	bfa8      	it	ge
 810b504:	461a      	movge	r2, r3
 810b506:	2a00      	cmp	r2, #0
 810b508:	4691      	mov	r9, r2
 810b50a:	dc37      	bgt.n	810b57c <_printf_float+0x374>
 810b50c:	f04f 0b00 	mov.w	fp, #0
 810b510:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810b514:	f104 021a 	add.w	r2, r4, #26
 810b518:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810b51a:	9305      	str	r3, [sp, #20]
 810b51c:	eba3 0309 	sub.w	r3, r3, r9
 810b520:	455b      	cmp	r3, fp
 810b522:	dc33      	bgt.n	810b58c <_printf_float+0x384>
 810b524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b528:	429a      	cmp	r2, r3
 810b52a:	db3b      	blt.n	810b5a4 <_printf_float+0x39c>
 810b52c:	6823      	ldr	r3, [r4, #0]
 810b52e:	07da      	lsls	r2, r3, #31
 810b530:	d438      	bmi.n	810b5a4 <_printf_float+0x39c>
 810b532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b534:	9a05      	ldr	r2, [sp, #20]
 810b536:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b538:	1a9a      	subs	r2, r3, r2
 810b53a:	eba3 0901 	sub.w	r9, r3, r1
 810b53e:	4591      	cmp	r9, r2
 810b540:	bfa8      	it	ge
 810b542:	4691      	movge	r9, r2
 810b544:	f1b9 0f00 	cmp.w	r9, #0
 810b548:	dc35      	bgt.n	810b5b6 <_printf_float+0x3ae>
 810b54a:	f04f 0800 	mov.w	r8, #0
 810b54e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810b552:	f104 0a1a 	add.w	sl, r4, #26
 810b556:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b55a:	1a9b      	subs	r3, r3, r2
 810b55c:	eba3 0309 	sub.w	r3, r3, r9
 810b560:	4543      	cmp	r3, r8
 810b562:	f77f af79 	ble.w	810b458 <_printf_float+0x250>
 810b566:	2301      	movs	r3, #1
 810b568:	4652      	mov	r2, sl
 810b56a:	4631      	mov	r1, r6
 810b56c:	4628      	mov	r0, r5
 810b56e:	47b8      	blx	r7
 810b570:	3001      	adds	r0, #1
 810b572:	f43f aeaa 	beq.w	810b2ca <_printf_float+0xc2>
 810b576:	f108 0801 	add.w	r8, r8, #1
 810b57a:	e7ec      	b.n	810b556 <_printf_float+0x34e>
 810b57c:	4613      	mov	r3, r2
 810b57e:	4631      	mov	r1, r6
 810b580:	4642      	mov	r2, r8
 810b582:	4628      	mov	r0, r5
 810b584:	47b8      	blx	r7
 810b586:	3001      	adds	r0, #1
 810b588:	d1c0      	bne.n	810b50c <_printf_float+0x304>
 810b58a:	e69e      	b.n	810b2ca <_printf_float+0xc2>
 810b58c:	2301      	movs	r3, #1
 810b58e:	4631      	mov	r1, r6
 810b590:	4628      	mov	r0, r5
 810b592:	9205      	str	r2, [sp, #20]
 810b594:	47b8      	blx	r7
 810b596:	3001      	adds	r0, #1
 810b598:	f43f ae97 	beq.w	810b2ca <_printf_float+0xc2>
 810b59c:	9a05      	ldr	r2, [sp, #20]
 810b59e:	f10b 0b01 	add.w	fp, fp, #1
 810b5a2:	e7b9      	b.n	810b518 <_printf_float+0x310>
 810b5a4:	ee18 3a10 	vmov	r3, s16
 810b5a8:	4652      	mov	r2, sl
 810b5aa:	4631      	mov	r1, r6
 810b5ac:	4628      	mov	r0, r5
 810b5ae:	47b8      	blx	r7
 810b5b0:	3001      	adds	r0, #1
 810b5b2:	d1be      	bne.n	810b532 <_printf_float+0x32a>
 810b5b4:	e689      	b.n	810b2ca <_printf_float+0xc2>
 810b5b6:	9a05      	ldr	r2, [sp, #20]
 810b5b8:	464b      	mov	r3, r9
 810b5ba:	4442      	add	r2, r8
 810b5bc:	4631      	mov	r1, r6
 810b5be:	4628      	mov	r0, r5
 810b5c0:	47b8      	blx	r7
 810b5c2:	3001      	adds	r0, #1
 810b5c4:	d1c1      	bne.n	810b54a <_printf_float+0x342>
 810b5c6:	e680      	b.n	810b2ca <_printf_float+0xc2>
 810b5c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810b5ca:	2a01      	cmp	r2, #1
 810b5cc:	dc01      	bgt.n	810b5d2 <_printf_float+0x3ca>
 810b5ce:	07db      	lsls	r3, r3, #31
 810b5d0:	d538      	bpl.n	810b644 <_printf_float+0x43c>
 810b5d2:	2301      	movs	r3, #1
 810b5d4:	4642      	mov	r2, r8
 810b5d6:	4631      	mov	r1, r6
 810b5d8:	4628      	mov	r0, r5
 810b5da:	47b8      	blx	r7
 810b5dc:	3001      	adds	r0, #1
 810b5de:	f43f ae74 	beq.w	810b2ca <_printf_float+0xc2>
 810b5e2:	ee18 3a10 	vmov	r3, s16
 810b5e6:	4652      	mov	r2, sl
 810b5e8:	4631      	mov	r1, r6
 810b5ea:	4628      	mov	r0, r5
 810b5ec:	47b8      	blx	r7
 810b5ee:	3001      	adds	r0, #1
 810b5f0:	f43f ae6b 	beq.w	810b2ca <_printf_float+0xc2>
 810b5f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810b5f8:	2200      	movs	r2, #0
 810b5fa:	2300      	movs	r3, #0
 810b5fc:	f7f5 faec 	bl	8100bd8 <__aeabi_dcmpeq>
 810b600:	b9d8      	cbnz	r0, 810b63a <_printf_float+0x432>
 810b602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b604:	f108 0201 	add.w	r2, r8, #1
 810b608:	3b01      	subs	r3, #1
 810b60a:	4631      	mov	r1, r6
 810b60c:	4628      	mov	r0, r5
 810b60e:	47b8      	blx	r7
 810b610:	3001      	adds	r0, #1
 810b612:	d10e      	bne.n	810b632 <_printf_float+0x42a>
 810b614:	e659      	b.n	810b2ca <_printf_float+0xc2>
 810b616:	2301      	movs	r3, #1
 810b618:	4652      	mov	r2, sl
 810b61a:	4631      	mov	r1, r6
 810b61c:	4628      	mov	r0, r5
 810b61e:	47b8      	blx	r7
 810b620:	3001      	adds	r0, #1
 810b622:	f43f ae52 	beq.w	810b2ca <_printf_float+0xc2>
 810b626:	f108 0801 	add.w	r8, r8, #1
 810b62a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b62c:	3b01      	subs	r3, #1
 810b62e:	4543      	cmp	r3, r8
 810b630:	dcf1      	bgt.n	810b616 <_printf_float+0x40e>
 810b632:	464b      	mov	r3, r9
 810b634:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810b638:	e6dc      	b.n	810b3f4 <_printf_float+0x1ec>
 810b63a:	f04f 0800 	mov.w	r8, #0
 810b63e:	f104 0a1a 	add.w	sl, r4, #26
 810b642:	e7f2      	b.n	810b62a <_printf_float+0x422>
 810b644:	2301      	movs	r3, #1
 810b646:	4642      	mov	r2, r8
 810b648:	e7df      	b.n	810b60a <_printf_float+0x402>
 810b64a:	2301      	movs	r3, #1
 810b64c:	464a      	mov	r2, r9
 810b64e:	4631      	mov	r1, r6
 810b650:	4628      	mov	r0, r5
 810b652:	47b8      	blx	r7
 810b654:	3001      	adds	r0, #1
 810b656:	f43f ae38 	beq.w	810b2ca <_printf_float+0xc2>
 810b65a:	f108 0801 	add.w	r8, r8, #1
 810b65e:	68e3      	ldr	r3, [r4, #12]
 810b660:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810b662:	1a5b      	subs	r3, r3, r1
 810b664:	4543      	cmp	r3, r8
 810b666:	dcf0      	bgt.n	810b64a <_printf_float+0x442>
 810b668:	e6fa      	b.n	810b460 <_printf_float+0x258>
 810b66a:	f04f 0800 	mov.w	r8, #0
 810b66e:	f104 0919 	add.w	r9, r4, #25
 810b672:	e7f4      	b.n	810b65e <_printf_float+0x456>

0810b674 <_printf_common>:
 810b674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b678:	4616      	mov	r6, r2
 810b67a:	4699      	mov	r9, r3
 810b67c:	688a      	ldr	r2, [r1, #8]
 810b67e:	690b      	ldr	r3, [r1, #16]
 810b680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810b684:	4293      	cmp	r3, r2
 810b686:	bfb8      	it	lt
 810b688:	4613      	movlt	r3, r2
 810b68a:	6033      	str	r3, [r6, #0]
 810b68c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810b690:	4607      	mov	r7, r0
 810b692:	460c      	mov	r4, r1
 810b694:	b10a      	cbz	r2, 810b69a <_printf_common+0x26>
 810b696:	3301      	adds	r3, #1
 810b698:	6033      	str	r3, [r6, #0]
 810b69a:	6823      	ldr	r3, [r4, #0]
 810b69c:	0699      	lsls	r1, r3, #26
 810b69e:	bf42      	ittt	mi
 810b6a0:	6833      	ldrmi	r3, [r6, #0]
 810b6a2:	3302      	addmi	r3, #2
 810b6a4:	6033      	strmi	r3, [r6, #0]
 810b6a6:	6825      	ldr	r5, [r4, #0]
 810b6a8:	f015 0506 	ands.w	r5, r5, #6
 810b6ac:	d106      	bne.n	810b6bc <_printf_common+0x48>
 810b6ae:	f104 0a19 	add.w	sl, r4, #25
 810b6b2:	68e3      	ldr	r3, [r4, #12]
 810b6b4:	6832      	ldr	r2, [r6, #0]
 810b6b6:	1a9b      	subs	r3, r3, r2
 810b6b8:	42ab      	cmp	r3, r5
 810b6ba:	dc26      	bgt.n	810b70a <_printf_common+0x96>
 810b6bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810b6c0:	1e13      	subs	r3, r2, #0
 810b6c2:	6822      	ldr	r2, [r4, #0]
 810b6c4:	bf18      	it	ne
 810b6c6:	2301      	movne	r3, #1
 810b6c8:	0692      	lsls	r2, r2, #26
 810b6ca:	d42b      	bmi.n	810b724 <_printf_common+0xb0>
 810b6cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810b6d0:	4649      	mov	r1, r9
 810b6d2:	4638      	mov	r0, r7
 810b6d4:	47c0      	blx	r8
 810b6d6:	3001      	adds	r0, #1
 810b6d8:	d01e      	beq.n	810b718 <_printf_common+0xa4>
 810b6da:	6823      	ldr	r3, [r4, #0]
 810b6dc:	68e5      	ldr	r5, [r4, #12]
 810b6de:	6832      	ldr	r2, [r6, #0]
 810b6e0:	f003 0306 	and.w	r3, r3, #6
 810b6e4:	2b04      	cmp	r3, #4
 810b6e6:	bf08      	it	eq
 810b6e8:	1aad      	subeq	r5, r5, r2
 810b6ea:	68a3      	ldr	r3, [r4, #8]
 810b6ec:	6922      	ldr	r2, [r4, #16]
 810b6ee:	bf0c      	ite	eq
 810b6f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810b6f4:	2500      	movne	r5, #0
 810b6f6:	4293      	cmp	r3, r2
 810b6f8:	bfc4      	itt	gt
 810b6fa:	1a9b      	subgt	r3, r3, r2
 810b6fc:	18ed      	addgt	r5, r5, r3
 810b6fe:	2600      	movs	r6, #0
 810b700:	341a      	adds	r4, #26
 810b702:	42b5      	cmp	r5, r6
 810b704:	d11a      	bne.n	810b73c <_printf_common+0xc8>
 810b706:	2000      	movs	r0, #0
 810b708:	e008      	b.n	810b71c <_printf_common+0xa8>
 810b70a:	2301      	movs	r3, #1
 810b70c:	4652      	mov	r2, sl
 810b70e:	4649      	mov	r1, r9
 810b710:	4638      	mov	r0, r7
 810b712:	47c0      	blx	r8
 810b714:	3001      	adds	r0, #1
 810b716:	d103      	bne.n	810b720 <_printf_common+0xac>
 810b718:	f04f 30ff 	mov.w	r0, #4294967295
 810b71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b720:	3501      	adds	r5, #1
 810b722:	e7c6      	b.n	810b6b2 <_printf_common+0x3e>
 810b724:	18e1      	adds	r1, r4, r3
 810b726:	1c5a      	adds	r2, r3, #1
 810b728:	2030      	movs	r0, #48	; 0x30
 810b72a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810b72e:	4422      	add	r2, r4
 810b730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810b734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810b738:	3302      	adds	r3, #2
 810b73a:	e7c7      	b.n	810b6cc <_printf_common+0x58>
 810b73c:	2301      	movs	r3, #1
 810b73e:	4622      	mov	r2, r4
 810b740:	4649      	mov	r1, r9
 810b742:	4638      	mov	r0, r7
 810b744:	47c0      	blx	r8
 810b746:	3001      	adds	r0, #1
 810b748:	d0e6      	beq.n	810b718 <_printf_common+0xa4>
 810b74a:	3601      	adds	r6, #1
 810b74c:	e7d9      	b.n	810b702 <_printf_common+0x8e>
	...

0810b750 <_printf_i>:
 810b750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810b754:	7e0f      	ldrb	r7, [r1, #24]
 810b756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810b758:	2f78      	cmp	r7, #120	; 0x78
 810b75a:	4691      	mov	r9, r2
 810b75c:	4680      	mov	r8, r0
 810b75e:	460c      	mov	r4, r1
 810b760:	469a      	mov	sl, r3
 810b762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810b766:	d807      	bhi.n	810b778 <_printf_i+0x28>
 810b768:	2f62      	cmp	r7, #98	; 0x62
 810b76a:	d80a      	bhi.n	810b782 <_printf_i+0x32>
 810b76c:	2f00      	cmp	r7, #0
 810b76e:	f000 80d8 	beq.w	810b922 <_printf_i+0x1d2>
 810b772:	2f58      	cmp	r7, #88	; 0x58
 810b774:	f000 80a3 	beq.w	810b8be <_printf_i+0x16e>
 810b778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810b77c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810b780:	e03a      	b.n	810b7f8 <_printf_i+0xa8>
 810b782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810b786:	2b15      	cmp	r3, #21
 810b788:	d8f6      	bhi.n	810b778 <_printf_i+0x28>
 810b78a:	a101      	add	r1, pc, #4	; (adr r1, 810b790 <_printf_i+0x40>)
 810b78c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810b790:	0810b7e9 	.word	0x0810b7e9
 810b794:	0810b7fd 	.word	0x0810b7fd
 810b798:	0810b779 	.word	0x0810b779
 810b79c:	0810b779 	.word	0x0810b779
 810b7a0:	0810b779 	.word	0x0810b779
 810b7a4:	0810b779 	.word	0x0810b779
 810b7a8:	0810b7fd 	.word	0x0810b7fd
 810b7ac:	0810b779 	.word	0x0810b779
 810b7b0:	0810b779 	.word	0x0810b779
 810b7b4:	0810b779 	.word	0x0810b779
 810b7b8:	0810b779 	.word	0x0810b779
 810b7bc:	0810b909 	.word	0x0810b909
 810b7c0:	0810b82d 	.word	0x0810b82d
 810b7c4:	0810b8eb 	.word	0x0810b8eb
 810b7c8:	0810b779 	.word	0x0810b779
 810b7cc:	0810b779 	.word	0x0810b779
 810b7d0:	0810b92b 	.word	0x0810b92b
 810b7d4:	0810b779 	.word	0x0810b779
 810b7d8:	0810b82d 	.word	0x0810b82d
 810b7dc:	0810b779 	.word	0x0810b779
 810b7e0:	0810b779 	.word	0x0810b779
 810b7e4:	0810b8f3 	.word	0x0810b8f3
 810b7e8:	682b      	ldr	r3, [r5, #0]
 810b7ea:	1d1a      	adds	r2, r3, #4
 810b7ec:	681b      	ldr	r3, [r3, #0]
 810b7ee:	602a      	str	r2, [r5, #0]
 810b7f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810b7f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810b7f8:	2301      	movs	r3, #1
 810b7fa:	e0a3      	b.n	810b944 <_printf_i+0x1f4>
 810b7fc:	6820      	ldr	r0, [r4, #0]
 810b7fe:	6829      	ldr	r1, [r5, #0]
 810b800:	0606      	lsls	r6, r0, #24
 810b802:	f101 0304 	add.w	r3, r1, #4
 810b806:	d50a      	bpl.n	810b81e <_printf_i+0xce>
 810b808:	680e      	ldr	r6, [r1, #0]
 810b80a:	602b      	str	r3, [r5, #0]
 810b80c:	2e00      	cmp	r6, #0
 810b80e:	da03      	bge.n	810b818 <_printf_i+0xc8>
 810b810:	232d      	movs	r3, #45	; 0x2d
 810b812:	4276      	negs	r6, r6
 810b814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b818:	485e      	ldr	r0, [pc, #376]	; (810b994 <_printf_i+0x244>)
 810b81a:	230a      	movs	r3, #10
 810b81c:	e019      	b.n	810b852 <_printf_i+0x102>
 810b81e:	680e      	ldr	r6, [r1, #0]
 810b820:	602b      	str	r3, [r5, #0]
 810b822:	f010 0f40 	tst.w	r0, #64	; 0x40
 810b826:	bf18      	it	ne
 810b828:	b236      	sxthne	r6, r6
 810b82a:	e7ef      	b.n	810b80c <_printf_i+0xbc>
 810b82c:	682b      	ldr	r3, [r5, #0]
 810b82e:	6820      	ldr	r0, [r4, #0]
 810b830:	1d19      	adds	r1, r3, #4
 810b832:	6029      	str	r1, [r5, #0]
 810b834:	0601      	lsls	r1, r0, #24
 810b836:	d501      	bpl.n	810b83c <_printf_i+0xec>
 810b838:	681e      	ldr	r6, [r3, #0]
 810b83a:	e002      	b.n	810b842 <_printf_i+0xf2>
 810b83c:	0646      	lsls	r6, r0, #25
 810b83e:	d5fb      	bpl.n	810b838 <_printf_i+0xe8>
 810b840:	881e      	ldrh	r6, [r3, #0]
 810b842:	4854      	ldr	r0, [pc, #336]	; (810b994 <_printf_i+0x244>)
 810b844:	2f6f      	cmp	r7, #111	; 0x6f
 810b846:	bf0c      	ite	eq
 810b848:	2308      	moveq	r3, #8
 810b84a:	230a      	movne	r3, #10
 810b84c:	2100      	movs	r1, #0
 810b84e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810b852:	6865      	ldr	r5, [r4, #4]
 810b854:	60a5      	str	r5, [r4, #8]
 810b856:	2d00      	cmp	r5, #0
 810b858:	bfa2      	ittt	ge
 810b85a:	6821      	ldrge	r1, [r4, #0]
 810b85c:	f021 0104 	bicge.w	r1, r1, #4
 810b860:	6021      	strge	r1, [r4, #0]
 810b862:	b90e      	cbnz	r6, 810b868 <_printf_i+0x118>
 810b864:	2d00      	cmp	r5, #0
 810b866:	d04d      	beq.n	810b904 <_printf_i+0x1b4>
 810b868:	4615      	mov	r5, r2
 810b86a:	fbb6 f1f3 	udiv	r1, r6, r3
 810b86e:	fb03 6711 	mls	r7, r3, r1, r6
 810b872:	5dc7      	ldrb	r7, [r0, r7]
 810b874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810b878:	4637      	mov	r7, r6
 810b87a:	42bb      	cmp	r3, r7
 810b87c:	460e      	mov	r6, r1
 810b87e:	d9f4      	bls.n	810b86a <_printf_i+0x11a>
 810b880:	2b08      	cmp	r3, #8
 810b882:	d10b      	bne.n	810b89c <_printf_i+0x14c>
 810b884:	6823      	ldr	r3, [r4, #0]
 810b886:	07de      	lsls	r6, r3, #31
 810b888:	d508      	bpl.n	810b89c <_printf_i+0x14c>
 810b88a:	6923      	ldr	r3, [r4, #16]
 810b88c:	6861      	ldr	r1, [r4, #4]
 810b88e:	4299      	cmp	r1, r3
 810b890:	bfde      	ittt	le
 810b892:	2330      	movle	r3, #48	; 0x30
 810b894:	f805 3c01 	strble.w	r3, [r5, #-1]
 810b898:	f105 35ff 	addle.w	r5, r5, #4294967295
 810b89c:	1b52      	subs	r2, r2, r5
 810b89e:	6122      	str	r2, [r4, #16]
 810b8a0:	f8cd a000 	str.w	sl, [sp]
 810b8a4:	464b      	mov	r3, r9
 810b8a6:	aa03      	add	r2, sp, #12
 810b8a8:	4621      	mov	r1, r4
 810b8aa:	4640      	mov	r0, r8
 810b8ac:	f7ff fee2 	bl	810b674 <_printf_common>
 810b8b0:	3001      	adds	r0, #1
 810b8b2:	d14c      	bne.n	810b94e <_printf_i+0x1fe>
 810b8b4:	f04f 30ff 	mov.w	r0, #4294967295
 810b8b8:	b004      	add	sp, #16
 810b8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b8be:	4835      	ldr	r0, [pc, #212]	; (810b994 <_printf_i+0x244>)
 810b8c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 810b8c4:	6829      	ldr	r1, [r5, #0]
 810b8c6:	6823      	ldr	r3, [r4, #0]
 810b8c8:	f851 6b04 	ldr.w	r6, [r1], #4
 810b8cc:	6029      	str	r1, [r5, #0]
 810b8ce:	061d      	lsls	r5, r3, #24
 810b8d0:	d514      	bpl.n	810b8fc <_printf_i+0x1ac>
 810b8d2:	07df      	lsls	r7, r3, #31
 810b8d4:	bf44      	itt	mi
 810b8d6:	f043 0320 	orrmi.w	r3, r3, #32
 810b8da:	6023      	strmi	r3, [r4, #0]
 810b8dc:	b91e      	cbnz	r6, 810b8e6 <_printf_i+0x196>
 810b8de:	6823      	ldr	r3, [r4, #0]
 810b8e0:	f023 0320 	bic.w	r3, r3, #32
 810b8e4:	6023      	str	r3, [r4, #0]
 810b8e6:	2310      	movs	r3, #16
 810b8e8:	e7b0      	b.n	810b84c <_printf_i+0xfc>
 810b8ea:	6823      	ldr	r3, [r4, #0]
 810b8ec:	f043 0320 	orr.w	r3, r3, #32
 810b8f0:	6023      	str	r3, [r4, #0]
 810b8f2:	2378      	movs	r3, #120	; 0x78
 810b8f4:	4828      	ldr	r0, [pc, #160]	; (810b998 <_printf_i+0x248>)
 810b8f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810b8fa:	e7e3      	b.n	810b8c4 <_printf_i+0x174>
 810b8fc:	0659      	lsls	r1, r3, #25
 810b8fe:	bf48      	it	mi
 810b900:	b2b6      	uxthmi	r6, r6
 810b902:	e7e6      	b.n	810b8d2 <_printf_i+0x182>
 810b904:	4615      	mov	r5, r2
 810b906:	e7bb      	b.n	810b880 <_printf_i+0x130>
 810b908:	682b      	ldr	r3, [r5, #0]
 810b90a:	6826      	ldr	r6, [r4, #0]
 810b90c:	6961      	ldr	r1, [r4, #20]
 810b90e:	1d18      	adds	r0, r3, #4
 810b910:	6028      	str	r0, [r5, #0]
 810b912:	0635      	lsls	r5, r6, #24
 810b914:	681b      	ldr	r3, [r3, #0]
 810b916:	d501      	bpl.n	810b91c <_printf_i+0x1cc>
 810b918:	6019      	str	r1, [r3, #0]
 810b91a:	e002      	b.n	810b922 <_printf_i+0x1d2>
 810b91c:	0670      	lsls	r0, r6, #25
 810b91e:	d5fb      	bpl.n	810b918 <_printf_i+0x1c8>
 810b920:	8019      	strh	r1, [r3, #0]
 810b922:	2300      	movs	r3, #0
 810b924:	6123      	str	r3, [r4, #16]
 810b926:	4615      	mov	r5, r2
 810b928:	e7ba      	b.n	810b8a0 <_printf_i+0x150>
 810b92a:	682b      	ldr	r3, [r5, #0]
 810b92c:	1d1a      	adds	r2, r3, #4
 810b92e:	602a      	str	r2, [r5, #0]
 810b930:	681d      	ldr	r5, [r3, #0]
 810b932:	6862      	ldr	r2, [r4, #4]
 810b934:	2100      	movs	r1, #0
 810b936:	4628      	mov	r0, r5
 810b938:	f7f4 fcda 	bl	81002f0 <memchr>
 810b93c:	b108      	cbz	r0, 810b942 <_printf_i+0x1f2>
 810b93e:	1b40      	subs	r0, r0, r5
 810b940:	6060      	str	r0, [r4, #4]
 810b942:	6863      	ldr	r3, [r4, #4]
 810b944:	6123      	str	r3, [r4, #16]
 810b946:	2300      	movs	r3, #0
 810b948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b94c:	e7a8      	b.n	810b8a0 <_printf_i+0x150>
 810b94e:	6923      	ldr	r3, [r4, #16]
 810b950:	462a      	mov	r2, r5
 810b952:	4649      	mov	r1, r9
 810b954:	4640      	mov	r0, r8
 810b956:	47d0      	blx	sl
 810b958:	3001      	adds	r0, #1
 810b95a:	d0ab      	beq.n	810b8b4 <_printf_i+0x164>
 810b95c:	6823      	ldr	r3, [r4, #0]
 810b95e:	079b      	lsls	r3, r3, #30
 810b960:	d413      	bmi.n	810b98a <_printf_i+0x23a>
 810b962:	68e0      	ldr	r0, [r4, #12]
 810b964:	9b03      	ldr	r3, [sp, #12]
 810b966:	4298      	cmp	r0, r3
 810b968:	bfb8      	it	lt
 810b96a:	4618      	movlt	r0, r3
 810b96c:	e7a4      	b.n	810b8b8 <_printf_i+0x168>
 810b96e:	2301      	movs	r3, #1
 810b970:	4632      	mov	r2, r6
 810b972:	4649      	mov	r1, r9
 810b974:	4640      	mov	r0, r8
 810b976:	47d0      	blx	sl
 810b978:	3001      	adds	r0, #1
 810b97a:	d09b      	beq.n	810b8b4 <_printf_i+0x164>
 810b97c:	3501      	adds	r5, #1
 810b97e:	68e3      	ldr	r3, [r4, #12]
 810b980:	9903      	ldr	r1, [sp, #12]
 810b982:	1a5b      	subs	r3, r3, r1
 810b984:	42ab      	cmp	r3, r5
 810b986:	dcf2      	bgt.n	810b96e <_printf_i+0x21e>
 810b988:	e7eb      	b.n	810b962 <_printf_i+0x212>
 810b98a:	2500      	movs	r5, #0
 810b98c:	f104 0619 	add.w	r6, r4, #25
 810b990:	e7f5      	b.n	810b97e <_printf_i+0x22e>
 810b992:	bf00      	nop
 810b994:	0810fb86 	.word	0x0810fb86
 810b998:	0810fb97 	.word	0x0810fb97

0810b99c <_scanf_float>:
 810b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b9a0:	b087      	sub	sp, #28
 810b9a2:	4617      	mov	r7, r2
 810b9a4:	9303      	str	r3, [sp, #12]
 810b9a6:	688b      	ldr	r3, [r1, #8]
 810b9a8:	1e5a      	subs	r2, r3, #1
 810b9aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810b9ae:	bf83      	ittte	hi
 810b9b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810b9b4:	195b      	addhi	r3, r3, r5
 810b9b6:	9302      	strhi	r3, [sp, #8]
 810b9b8:	2300      	movls	r3, #0
 810b9ba:	bf86      	itte	hi
 810b9bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 810b9c0:	608b      	strhi	r3, [r1, #8]
 810b9c2:	9302      	strls	r3, [sp, #8]
 810b9c4:	680b      	ldr	r3, [r1, #0]
 810b9c6:	468b      	mov	fp, r1
 810b9c8:	2500      	movs	r5, #0
 810b9ca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810b9ce:	f84b 3b1c 	str.w	r3, [fp], #28
 810b9d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810b9d6:	4680      	mov	r8, r0
 810b9d8:	460c      	mov	r4, r1
 810b9da:	465e      	mov	r6, fp
 810b9dc:	46aa      	mov	sl, r5
 810b9de:	46a9      	mov	r9, r5
 810b9e0:	9501      	str	r5, [sp, #4]
 810b9e2:	68a2      	ldr	r2, [r4, #8]
 810b9e4:	b152      	cbz	r2, 810b9fc <_scanf_float+0x60>
 810b9e6:	683b      	ldr	r3, [r7, #0]
 810b9e8:	781b      	ldrb	r3, [r3, #0]
 810b9ea:	2b4e      	cmp	r3, #78	; 0x4e
 810b9ec:	d864      	bhi.n	810bab8 <_scanf_float+0x11c>
 810b9ee:	2b40      	cmp	r3, #64	; 0x40
 810b9f0:	d83c      	bhi.n	810ba6c <_scanf_float+0xd0>
 810b9f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810b9f6:	b2c8      	uxtb	r0, r1
 810b9f8:	280e      	cmp	r0, #14
 810b9fa:	d93a      	bls.n	810ba72 <_scanf_float+0xd6>
 810b9fc:	f1b9 0f00 	cmp.w	r9, #0
 810ba00:	d003      	beq.n	810ba0a <_scanf_float+0x6e>
 810ba02:	6823      	ldr	r3, [r4, #0]
 810ba04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810ba08:	6023      	str	r3, [r4, #0]
 810ba0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810ba0e:	f1ba 0f01 	cmp.w	sl, #1
 810ba12:	f200 8113 	bhi.w	810bc3c <_scanf_float+0x2a0>
 810ba16:	455e      	cmp	r6, fp
 810ba18:	f200 8105 	bhi.w	810bc26 <_scanf_float+0x28a>
 810ba1c:	2501      	movs	r5, #1
 810ba1e:	4628      	mov	r0, r5
 810ba20:	b007      	add	sp, #28
 810ba22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ba26:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810ba2a:	2a0d      	cmp	r2, #13
 810ba2c:	d8e6      	bhi.n	810b9fc <_scanf_float+0x60>
 810ba2e:	a101      	add	r1, pc, #4	; (adr r1, 810ba34 <_scanf_float+0x98>)
 810ba30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810ba34:	0810bb73 	.word	0x0810bb73
 810ba38:	0810b9fd 	.word	0x0810b9fd
 810ba3c:	0810b9fd 	.word	0x0810b9fd
 810ba40:	0810b9fd 	.word	0x0810b9fd
 810ba44:	0810bbd3 	.word	0x0810bbd3
 810ba48:	0810bbab 	.word	0x0810bbab
 810ba4c:	0810b9fd 	.word	0x0810b9fd
 810ba50:	0810b9fd 	.word	0x0810b9fd
 810ba54:	0810bb81 	.word	0x0810bb81
 810ba58:	0810b9fd 	.word	0x0810b9fd
 810ba5c:	0810b9fd 	.word	0x0810b9fd
 810ba60:	0810b9fd 	.word	0x0810b9fd
 810ba64:	0810b9fd 	.word	0x0810b9fd
 810ba68:	0810bb39 	.word	0x0810bb39
 810ba6c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810ba70:	e7db      	b.n	810ba2a <_scanf_float+0x8e>
 810ba72:	290e      	cmp	r1, #14
 810ba74:	d8c2      	bhi.n	810b9fc <_scanf_float+0x60>
 810ba76:	a001      	add	r0, pc, #4	; (adr r0, 810ba7c <_scanf_float+0xe0>)
 810ba78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810ba7c:	0810bb2b 	.word	0x0810bb2b
 810ba80:	0810b9fd 	.word	0x0810b9fd
 810ba84:	0810bb2b 	.word	0x0810bb2b
 810ba88:	0810bbbf 	.word	0x0810bbbf
 810ba8c:	0810b9fd 	.word	0x0810b9fd
 810ba90:	0810bad9 	.word	0x0810bad9
 810ba94:	0810bb15 	.word	0x0810bb15
 810ba98:	0810bb15 	.word	0x0810bb15
 810ba9c:	0810bb15 	.word	0x0810bb15
 810baa0:	0810bb15 	.word	0x0810bb15
 810baa4:	0810bb15 	.word	0x0810bb15
 810baa8:	0810bb15 	.word	0x0810bb15
 810baac:	0810bb15 	.word	0x0810bb15
 810bab0:	0810bb15 	.word	0x0810bb15
 810bab4:	0810bb15 	.word	0x0810bb15
 810bab8:	2b6e      	cmp	r3, #110	; 0x6e
 810baba:	d809      	bhi.n	810bad0 <_scanf_float+0x134>
 810babc:	2b60      	cmp	r3, #96	; 0x60
 810babe:	d8b2      	bhi.n	810ba26 <_scanf_float+0x8a>
 810bac0:	2b54      	cmp	r3, #84	; 0x54
 810bac2:	d077      	beq.n	810bbb4 <_scanf_float+0x218>
 810bac4:	2b59      	cmp	r3, #89	; 0x59
 810bac6:	d199      	bne.n	810b9fc <_scanf_float+0x60>
 810bac8:	2d07      	cmp	r5, #7
 810baca:	d197      	bne.n	810b9fc <_scanf_float+0x60>
 810bacc:	2508      	movs	r5, #8
 810bace:	e029      	b.n	810bb24 <_scanf_float+0x188>
 810bad0:	2b74      	cmp	r3, #116	; 0x74
 810bad2:	d06f      	beq.n	810bbb4 <_scanf_float+0x218>
 810bad4:	2b79      	cmp	r3, #121	; 0x79
 810bad6:	e7f6      	b.n	810bac6 <_scanf_float+0x12a>
 810bad8:	6821      	ldr	r1, [r4, #0]
 810bada:	05c8      	lsls	r0, r1, #23
 810badc:	d51a      	bpl.n	810bb14 <_scanf_float+0x178>
 810bade:	9b02      	ldr	r3, [sp, #8]
 810bae0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 810bae4:	6021      	str	r1, [r4, #0]
 810bae6:	f109 0901 	add.w	r9, r9, #1
 810baea:	b11b      	cbz	r3, 810baf4 <_scanf_float+0x158>
 810baec:	3b01      	subs	r3, #1
 810baee:	3201      	adds	r2, #1
 810baf0:	9302      	str	r3, [sp, #8]
 810baf2:	60a2      	str	r2, [r4, #8]
 810baf4:	68a3      	ldr	r3, [r4, #8]
 810baf6:	3b01      	subs	r3, #1
 810baf8:	60a3      	str	r3, [r4, #8]
 810bafa:	6923      	ldr	r3, [r4, #16]
 810bafc:	3301      	adds	r3, #1
 810bafe:	6123      	str	r3, [r4, #16]
 810bb00:	687b      	ldr	r3, [r7, #4]
 810bb02:	3b01      	subs	r3, #1
 810bb04:	2b00      	cmp	r3, #0
 810bb06:	607b      	str	r3, [r7, #4]
 810bb08:	f340 8084 	ble.w	810bc14 <_scanf_float+0x278>
 810bb0c:	683b      	ldr	r3, [r7, #0]
 810bb0e:	3301      	adds	r3, #1
 810bb10:	603b      	str	r3, [r7, #0]
 810bb12:	e766      	b.n	810b9e2 <_scanf_float+0x46>
 810bb14:	eb1a 0f05 	cmn.w	sl, r5
 810bb18:	f47f af70 	bne.w	810b9fc <_scanf_float+0x60>
 810bb1c:	6822      	ldr	r2, [r4, #0]
 810bb1e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810bb22:	6022      	str	r2, [r4, #0]
 810bb24:	f806 3b01 	strb.w	r3, [r6], #1
 810bb28:	e7e4      	b.n	810baf4 <_scanf_float+0x158>
 810bb2a:	6822      	ldr	r2, [r4, #0]
 810bb2c:	0610      	lsls	r0, r2, #24
 810bb2e:	f57f af65 	bpl.w	810b9fc <_scanf_float+0x60>
 810bb32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810bb36:	e7f4      	b.n	810bb22 <_scanf_float+0x186>
 810bb38:	f1ba 0f00 	cmp.w	sl, #0
 810bb3c:	d10e      	bne.n	810bb5c <_scanf_float+0x1c0>
 810bb3e:	f1b9 0f00 	cmp.w	r9, #0
 810bb42:	d10e      	bne.n	810bb62 <_scanf_float+0x1c6>
 810bb44:	6822      	ldr	r2, [r4, #0]
 810bb46:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810bb4a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810bb4e:	d108      	bne.n	810bb62 <_scanf_float+0x1c6>
 810bb50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810bb54:	6022      	str	r2, [r4, #0]
 810bb56:	f04f 0a01 	mov.w	sl, #1
 810bb5a:	e7e3      	b.n	810bb24 <_scanf_float+0x188>
 810bb5c:	f1ba 0f02 	cmp.w	sl, #2
 810bb60:	d055      	beq.n	810bc0e <_scanf_float+0x272>
 810bb62:	2d01      	cmp	r5, #1
 810bb64:	d002      	beq.n	810bb6c <_scanf_float+0x1d0>
 810bb66:	2d04      	cmp	r5, #4
 810bb68:	f47f af48 	bne.w	810b9fc <_scanf_float+0x60>
 810bb6c:	3501      	adds	r5, #1
 810bb6e:	b2ed      	uxtb	r5, r5
 810bb70:	e7d8      	b.n	810bb24 <_scanf_float+0x188>
 810bb72:	f1ba 0f01 	cmp.w	sl, #1
 810bb76:	f47f af41 	bne.w	810b9fc <_scanf_float+0x60>
 810bb7a:	f04f 0a02 	mov.w	sl, #2
 810bb7e:	e7d1      	b.n	810bb24 <_scanf_float+0x188>
 810bb80:	b97d      	cbnz	r5, 810bba2 <_scanf_float+0x206>
 810bb82:	f1b9 0f00 	cmp.w	r9, #0
 810bb86:	f47f af3c 	bne.w	810ba02 <_scanf_float+0x66>
 810bb8a:	6822      	ldr	r2, [r4, #0]
 810bb8c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810bb90:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810bb94:	f47f af39 	bne.w	810ba0a <_scanf_float+0x6e>
 810bb98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810bb9c:	6022      	str	r2, [r4, #0]
 810bb9e:	2501      	movs	r5, #1
 810bba0:	e7c0      	b.n	810bb24 <_scanf_float+0x188>
 810bba2:	2d03      	cmp	r5, #3
 810bba4:	d0e2      	beq.n	810bb6c <_scanf_float+0x1d0>
 810bba6:	2d05      	cmp	r5, #5
 810bba8:	e7de      	b.n	810bb68 <_scanf_float+0x1cc>
 810bbaa:	2d02      	cmp	r5, #2
 810bbac:	f47f af26 	bne.w	810b9fc <_scanf_float+0x60>
 810bbb0:	2503      	movs	r5, #3
 810bbb2:	e7b7      	b.n	810bb24 <_scanf_float+0x188>
 810bbb4:	2d06      	cmp	r5, #6
 810bbb6:	f47f af21 	bne.w	810b9fc <_scanf_float+0x60>
 810bbba:	2507      	movs	r5, #7
 810bbbc:	e7b2      	b.n	810bb24 <_scanf_float+0x188>
 810bbbe:	6822      	ldr	r2, [r4, #0]
 810bbc0:	0591      	lsls	r1, r2, #22
 810bbc2:	f57f af1b 	bpl.w	810b9fc <_scanf_float+0x60>
 810bbc6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810bbca:	6022      	str	r2, [r4, #0]
 810bbcc:	f8cd 9004 	str.w	r9, [sp, #4]
 810bbd0:	e7a8      	b.n	810bb24 <_scanf_float+0x188>
 810bbd2:	6822      	ldr	r2, [r4, #0]
 810bbd4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 810bbd8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810bbdc:	d006      	beq.n	810bbec <_scanf_float+0x250>
 810bbde:	0550      	lsls	r0, r2, #21
 810bbe0:	f57f af0c 	bpl.w	810b9fc <_scanf_float+0x60>
 810bbe4:	f1b9 0f00 	cmp.w	r9, #0
 810bbe8:	f43f af0f 	beq.w	810ba0a <_scanf_float+0x6e>
 810bbec:	0591      	lsls	r1, r2, #22
 810bbee:	bf58      	it	pl
 810bbf0:	9901      	ldrpl	r1, [sp, #4]
 810bbf2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810bbf6:	bf58      	it	pl
 810bbf8:	eba9 0101 	subpl.w	r1, r9, r1
 810bbfc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810bc00:	bf58      	it	pl
 810bc02:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810bc06:	6022      	str	r2, [r4, #0]
 810bc08:	f04f 0900 	mov.w	r9, #0
 810bc0c:	e78a      	b.n	810bb24 <_scanf_float+0x188>
 810bc0e:	f04f 0a03 	mov.w	sl, #3
 810bc12:	e787      	b.n	810bb24 <_scanf_float+0x188>
 810bc14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810bc18:	4639      	mov	r1, r7
 810bc1a:	4640      	mov	r0, r8
 810bc1c:	4798      	blx	r3
 810bc1e:	2800      	cmp	r0, #0
 810bc20:	f43f aedf 	beq.w	810b9e2 <_scanf_float+0x46>
 810bc24:	e6ea      	b.n	810b9fc <_scanf_float+0x60>
 810bc26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bc2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810bc2e:	463a      	mov	r2, r7
 810bc30:	4640      	mov	r0, r8
 810bc32:	4798      	blx	r3
 810bc34:	6923      	ldr	r3, [r4, #16]
 810bc36:	3b01      	subs	r3, #1
 810bc38:	6123      	str	r3, [r4, #16]
 810bc3a:	e6ec      	b.n	810ba16 <_scanf_float+0x7a>
 810bc3c:	1e6b      	subs	r3, r5, #1
 810bc3e:	2b06      	cmp	r3, #6
 810bc40:	d825      	bhi.n	810bc8e <_scanf_float+0x2f2>
 810bc42:	2d02      	cmp	r5, #2
 810bc44:	d836      	bhi.n	810bcb4 <_scanf_float+0x318>
 810bc46:	455e      	cmp	r6, fp
 810bc48:	f67f aee8 	bls.w	810ba1c <_scanf_float+0x80>
 810bc4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bc50:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810bc54:	463a      	mov	r2, r7
 810bc56:	4640      	mov	r0, r8
 810bc58:	4798      	blx	r3
 810bc5a:	6923      	ldr	r3, [r4, #16]
 810bc5c:	3b01      	subs	r3, #1
 810bc5e:	6123      	str	r3, [r4, #16]
 810bc60:	e7f1      	b.n	810bc46 <_scanf_float+0x2aa>
 810bc62:	9802      	ldr	r0, [sp, #8]
 810bc64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bc68:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 810bc6c:	9002      	str	r0, [sp, #8]
 810bc6e:	463a      	mov	r2, r7
 810bc70:	4640      	mov	r0, r8
 810bc72:	4798      	blx	r3
 810bc74:	6923      	ldr	r3, [r4, #16]
 810bc76:	3b01      	subs	r3, #1
 810bc78:	6123      	str	r3, [r4, #16]
 810bc7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810bc7e:	fa5f fa8a 	uxtb.w	sl, sl
 810bc82:	f1ba 0f02 	cmp.w	sl, #2
 810bc86:	d1ec      	bne.n	810bc62 <_scanf_float+0x2c6>
 810bc88:	3d03      	subs	r5, #3
 810bc8a:	b2ed      	uxtb	r5, r5
 810bc8c:	1b76      	subs	r6, r6, r5
 810bc8e:	6823      	ldr	r3, [r4, #0]
 810bc90:	05da      	lsls	r2, r3, #23
 810bc92:	d52f      	bpl.n	810bcf4 <_scanf_float+0x358>
 810bc94:	055b      	lsls	r3, r3, #21
 810bc96:	d510      	bpl.n	810bcba <_scanf_float+0x31e>
 810bc98:	455e      	cmp	r6, fp
 810bc9a:	f67f aebf 	bls.w	810ba1c <_scanf_float+0x80>
 810bc9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bca2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810bca6:	463a      	mov	r2, r7
 810bca8:	4640      	mov	r0, r8
 810bcaa:	4798      	blx	r3
 810bcac:	6923      	ldr	r3, [r4, #16]
 810bcae:	3b01      	subs	r3, #1
 810bcb0:	6123      	str	r3, [r4, #16]
 810bcb2:	e7f1      	b.n	810bc98 <_scanf_float+0x2fc>
 810bcb4:	46aa      	mov	sl, r5
 810bcb6:	9602      	str	r6, [sp, #8]
 810bcb8:	e7df      	b.n	810bc7a <_scanf_float+0x2de>
 810bcba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810bcbe:	6923      	ldr	r3, [r4, #16]
 810bcc0:	2965      	cmp	r1, #101	; 0x65
 810bcc2:	f103 33ff 	add.w	r3, r3, #4294967295
 810bcc6:	f106 35ff 	add.w	r5, r6, #4294967295
 810bcca:	6123      	str	r3, [r4, #16]
 810bccc:	d00c      	beq.n	810bce8 <_scanf_float+0x34c>
 810bcce:	2945      	cmp	r1, #69	; 0x45
 810bcd0:	d00a      	beq.n	810bce8 <_scanf_float+0x34c>
 810bcd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bcd6:	463a      	mov	r2, r7
 810bcd8:	4640      	mov	r0, r8
 810bcda:	4798      	blx	r3
 810bcdc:	6923      	ldr	r3, [r4, #16]
 810bcde:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810bce2:	3b01      	subs	r3, #1
 810bce4:	1eb5      	subs	r5, r6, #2
 810bce6:	6123      	str	r3, [r4, #16]
 810bce8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bcec:	463a      	mov	r2, r7
 810bcee:	4640      	mov	r0, r8
 810bcf0:	4798      	blx	r3
 810bcf2:	462e      	mov	r6, r5
 810bcf4:	6825      	ldr	r5, [r4, #0]
 810bcf6:	f015 0510 	ands.w	r5, r5, #16
 810bcfa:	d159      	bne.n	810bdb0 <_scanf_float+0x414>
 810bcfc:	7035      	strb	r5, [r6, #0]
 810bcfe:	6823      	ldr	r3, [r4, #0]
 810bd00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810bd04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810bd08:	d11b      	bne.n	810bd42 <_scanf_float+0x3a6>
 810bd0a:	9b01      	ldr	r3, [sp, #4]
 810bd0c:	454b      	cmp	r3, r9
 810bd0e:	eba3 0209 	sub.w	r2, r3, r9
 810bd12:	d123      	bne.n	810bd5c <_scanf_float+0x3c0>
 810bd14:	2200      	movs	r2, #0
 810bd16:	4659      	mov	r1, fp
 810bd18:	4640      	mov	r0, r8
 810bd1a:	f000 ff37 	bl	810cb8c <_strtod_r>
 810bd1e:	6822      	ldr	r2, [r4, #0]
 810bd20:	9b03      	ldr	r3, [sp, #12]
 810bd22:	f012 0f02 	tst.w	r2, #2
 810bd26:	ec57 6b10 	vmov	r6, r7, d0
 810bd2a:	681b      	ldr	r3, [r3, #0]
 810bd2c:	d021      	beq.n	810bd72 <_scanf_float+0x3d6>
 810bd2e:	9903      	ldr	r1, [sp, #12]
 810bd30:	1d1a      	adds	r2, r3, #4
 810bd32:	600a      	str	r2, [r1, #0]
 810bd34:	681b      	ldr	r3, [r3, #0]
 810bd36:	e9c3 6700 	strd	r6, r7, [r3]
 810bd3a:	68e3      	ldr	r3, [r4, #12]
 810bd3c:	3301      	adds	r3, #1
 810bd3e:	60e3      	str	r3, [r4, #12]
 810bd40:	e66d      	b.n	810ba1e <_scanf_float+0x82>
 810bd42:	9b04      	ldr	r3, [sp, #16]
 810bd44:	2b00      	cmp	r3, #0
 810bd46:	d0e5      	beq.n	810bd14 <_scanf_float+0x378>
 810bd48:	9905      	ldr	r1, [sp, #20]
 810bd4a:	230a      	movs	r3, #10
 810bd4c:	462a      	mov	r2, r5
 810bd4e:	3101      	adds	r1, #1
 810bd50:	4640      	mov	r0, r8
 810bd52:	f000 ffa3 	bl	810cc9c <_strtol_r>
 810bd56:	9b04      	ldr	r3, [sp, #16]
 810bd58:	9e05      	ldr	r6, [sp, #20]
 810bd5a:	1ac2      	subs	r2, r0, r3
 810bd5c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810bd60:	429e      	cmp	r6, r3
 810bd62:	bf28      	it	cs
 810bd64:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 810bd68:	4912      	ldr	r1, [pc, #72]	; (810bdb4 <_scanf_float+0x418>)
 810bd6a:	4630      	mov	r0, r6
 810bd6c:	f000 f8ca 	bl	810bf04 <siprintf>
 810bd70:	e7d0      	b.n	810bd14 <_scanf_float+0x378>
 810bd72:	9903      	ldr	r1, [sp, #12]
 810bd74:	f012 0f04 	tst.w	r2, #4
 810bd78:	f103 0204 	add.w	r2, r3, #4
 810bd7c:	600a      	str	r2, [r1, #0]
 810bd7e:	d1d9      	bne.n	810bd34 <_scanf_float+0x398>
 810bd80:	f8d3 8000 	ldr.w	r8, [r3]
 810bd84:	ee10 2a10 	vmov	r2, s0
 810bd88:	ee10 0a10 	vmov	r0, s0
 810bd8c:	463b      	mov	r3, r7
 810bd8e:	4639      	mov	r1, r7
 810bd90:	f7f4 ff54 	bl	8100c3c <__aeabi_dcmpun>
 810bd94:	b128      	cbz	r0, 810bda2 <_scanf_float+0x406>
 810bd96:	4808      	ldr	r0, [pc, #32]	; (810bdb8 <_scanf_float+0x41c>)
 810bd98:	f000 f8ae 	bl	810bef8 <nanf>
 810bd9c:	ed88 0a00 	vstr	s0, [r8]
 810bda0:	e7cb      	b.n	810bd3a <_scanf_float+0x39e>
 810bda2:	4630      	mov	r0, r6
 810bda4:	4639      	mov	r1, r7
 810bda6:	f7f4 ffa7 	bl	8100cf8 <__aeabi_d2f>
 810bdaa:	f8c8 0000 	str.w	r0, [r8]
 810bdae:	e7c4      	b.n	810bd3a <_scanf_float+0x39e>
 810bdb0:	2500      	movs	r5, #0
 810bdb2:	e634      	b.n	810ba1e <_scanf_float+0x82>
 810bdb4:	0810fba8 	.word	0x0810fba8
 810bdb8:	08110018 	.word	0x08110018

0810bdbc <iprintf>:
 810bdbc:	b40f      	push	{r0, r1, r2, r3}
 810bdbe:	4b0a      	ldr	r3, [pc, #40]	; (810bde8 <iprintf+0x2c>)
 810bdc0:	b513      	push	{r0, r1, r4, lr}
 810bdc2:	681c      	ldr	r4, [r3, #0]
 810bdc4:	b124      	cbz	r4, 810bdd0 <iprintf+0x14>
 810bdc6:	69a3      	ldr	r3, [r4, #24]
 810bdc8:	b913      	cbnz	r3, 810bdd0 <iprintf+0x14>
 810bdca:	4620      	mov	r0, r4
 810bdcc:	f001 ffbc 	bl	810dd48 <__sinit>
 810bdd0:	ab05      	add	r3, sp, #20
 810bdd2:	9a04      	ldr	r2, [sp, #16]
 810bdd4:	68a1      	ldr	r1, [r4, #8]
 810bdd6:	9301      	str	r3, [sp, #4]
 810bdd8:	4620      	mov	r0, r4
 810bdda:	f003 faa7 	bl	810f32c <_vfiprintf_r>
 810bdde:	b002      	add	sp, #8
 810bde0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810bde4:	b004      	add	sp, #16
 810bde6:	4770      	bx	lr
 810bde8:	10000020 	.word	0x10000020

0810bdec <_puts_r>:
 810bdec:	b570      	push	{r4, r5, r6, lr}
 810bdee:	460e      	mov	r6, r1
 810bdf0:	4605      	mov	r5, r0
 810bdf2:	b118      	cbz	r0, 810bdfc <_puts_r+0x10>
 810bdf4:	6983      	ldr	r3, [r0, #24]
 810bdf6:	b90b      	cbnz	r3, 810bdfc <_puts_r+0x10>
 810bdf8:	f001 ffa6 	bl	810dd48 <__sinit>
 810bdfc:	69ab      	ldr	r3, [r5, #24]
 810bdfe:	68ac      	ldr	r4, [r5, #8]
 810be00:	b913      	cbnz	r3, 810be08 <_puts_r+0x1c>
 810be02:	4628      	mov	r0, r5
 810be04:	f001 ffa0 	bl	810dd48 <__sinit>
 810be08:	4b2c      	ldr	r3, [pc, #176]	; (810bebc <_puts_r+0xd0>)
 810be0a:	429c      	cmp	r4, r3
 810be0c:	d120      	bne.n	810be50 <_puts_r+0x64>
 810be0e:	686c      	ldr	r4, [r5, #4]
 810be10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810be12:	07db      	lsls	r3, r3, #31
 810be14:	d405      	bmi.n	810be22 <_puts_r+0x36>
 810be16:	89a3      	ldrh	r3, [r4, #12]
 810be18:	0598      	lsls	r0, r3, #22
 810be1a:	d402      	bmi.n	810be22 <_puts_r+0x36>
 810be1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810be1e:	f002 fba4 	bl	810e56a <__retarget_lock_acquire_recursive>
 810be22:	89a3      	ldrh	r3, [r4, #12]
 810be24:	0719      	lsls	r1, r3, #28
 810be26:	d51d      	bpl.n	810be64 <_puts_r+0x78>
 810be28:	6923      	ldr	r3, [r4, #16]
 810be2a:	b1db      	cbz	r3, 810be64 <_puts_r+0x78>
 810be2c:	3e01      	subs	r6, #1
 810be2e:	68a3      	ldr	r3, [r4, #8]
 810be30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810be34:	3b01      	subs	r3, #1
 810be36:	60a3      	str	r3, [r4, #8]
 810be38:	bb39      	cbnz	r1, 810be8a <_puts_r+0x9e>
 810be3a:	2b00      	cmp	r3, #0
 810be3c:	da38      	bge.n	810beb0 <_puts_r+0xc4>
 810be3e:	4622      	mov	r2, r4
 810be40:	210a      	movs	r1, #10
 810be42:	4628      	mov	r0, r5
 810be44:	f000 ff2c 	bl	810cca0 <__swbuf_r>
 810be48:	3001      	adds	r0, #1
 810be4a:	d011      	beq.n	810be70 <_puts_r+0x84>
 810be4c:	250a      	movs	r5, #10
 810be4e:	e011      	b.n	810be74 <_puts_r+0x88>
 810be50:	4b1b      	ldr	r3, [pc, #108]	; (810bec0 <_puts_r+0xd4>)
 810be52:	429c      	cmp	r4, r3
 810be54:	d101      	bne.n	810be5a <_puts_r+0x6e>
 810be56:	68ac      	ldr	r4, [r5, #8]
 810be58:	e7da      	b.n	810be10 <_puts_r+0x24>
 810be5a:	4b1a      	ldr	r3, [pc, #104]	; (810bec4 <_puts_r+0xd8>)
 810be5c:	429c      	cmp	r4, r3
 810be5e:	bf08      	it	eq
 810be60:	68ec      	ldreq	r4, [r5, #12]
 810be62:	e7d5      	b.n	810be10 <_puts_r+0x24>
 810be64:	4621      	mov	r1, r4
 810be66:	4628      	mov	r0, r5
 810be68:	f000 ff6c 	bl	810cd44 <__swsetup_r>
 810be6c:	2800      	cmp	r0, #0
 810be6e:	d0dd      	beq.n	810be2c <_puts_r+0x40>
 810be70:	f04f 35ff 	mov.w	r5, #4294967295
 810be74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810be76:	07da      	lsls	r2, r3, #31
 810be78:	d405      	bmi.n	810be86 <_puts_r+0x9a>
 810be7a:	89a3      	ldrh	r3, [r4, #12]
 810be7c:	059b      	lsls	r3, r3, #22
 810be7e:	d402      	bmi.n	810be86 <_puts_r+0x9a>
 810be80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810be82:	f002 fb73 	bl	810e56c <__retarget_lock_release_recursive>
 810be86:	4628      	mov	r0, r5
 810be88:	bd70      	pop	{r4, r5, r6, pc}
 810be8a:	2b00      	cmp	r3, #0
 810be8c:	da04      	bge.n	810be98 <_puts_r+0xac>
 810be8e:	69a2      	ldr	r2, [r4, #24]
 810be90:	429a      	cmp	r2, r3
 810be92:	dc06      	bgt.n	810bea2 <_puts_r+0xb6>
 810be94:	290a      	cmp	r1, #10
 810be96:	d004      	beq.n	810bea2 <_puts_r+0xb6>
 810be98:	6823      	ldr	r3, [r4, #0]
 810be9a:	1c5a      	adds	r2, r3, #1
 810be9c:	6022      	str	r2, [r4, #0]
 810be9e:	7019      	strb	r1, [r3, #0]
 810bea0:	e7c5      	b.n	810be2e <_puts_r+0x42>
 810bea2:	4622      	mov	r2, r4
 810bea4:	4628      	mov	r0, r5
 810bea6:	f000 fefb 	bl	810cca0 <__swbuf_r>
 810beaa:	3001      	adds	r0, #1
 810beac:	d1bf      	bne.n	810be2e <_puts_r+0x42>
 810beae:	e7df      	b.n	810be70 <_puts_r+0x84>
 810beb0:	6823      	ldr	r3, [r4, #0]
 810beb2:	250a      	movs	r5, #10
 810beb4:	1c5a      	adds	r2, r3, #1
 810beb6:	6022      	str	r2, [r4, #0]
 810beb8:	701d      	strb	r5, [r3, #0]
 810beba:	e7db      	b.n	810be74 <_puts_r+0x88>
 810bebc:	0810fdb4 	.word	0x0810fdb4
 810bec0:	0810fdd4 	.word	0x0810fdd4
 810bec4:	0810fd94 	.word	0x0810fd94

0810bec8 <puts>:
 810bec8:	4b02      	ldr	r3, [pc, #8]	; (810bed4 <puts+0xc>)
 810beca:	4601      	mov	r1, r0
 810becc:	6818      	ldr	r0, [r3, #0]
 810bece:	f7ff bf8d 	b.w	810bdec <_puts_r>
 810bed2:	bf00      	nop
 810bed4:	10000020 	.word	0x10000020

0810bed8 <_sbrk_r>:
 810bed8:	b538      	push	{r3, r4, r5, lr}
 810beda:	4d06      	ldr	r5, [pc, #24]	; (810bef4 <_sbrk_r+0x1c>)
 810bedc:	2300      	movs	r3, #0
 810bede:	4604      	mov	r4, r0
 810bee0:	4608      	mov	r0, r1
 810bee2:	602b      	str	r3, [r5, #0]
 810bee4:	f7f6 ffd8 	bl	8102e98 <_sbrk>
 810bee8:	1c43      	adds	r3, r0, #1
 810beea:	d102      	bne.n	810bef2 <_sbrk_r+0x1a>
 810beec:	682b      	ldr	r3, [r5, #0]
 810beee:	b103      	cbz	r3, 810bef2 <_sbrk_r+0x1a>
 810bef0:	6023      	str	r3, [r4, #0]
 810bef2:	bd38      	pop	{r3, r4, r5, pc}
 810bef4:	100004b4 	.word	0x100004b4

0810bef8 <nanf>:
 810bef8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810bf00 <nanf+0x8>
 810befc:	4770      	bx	lr
 810befe:	bf00      	nop
 810bf00:	7fc00000 	.word	0x7fc00000

0810bf04 <siprintf>:
 810bf04:	b40e      	push	{r1, r2, r3}
 810bf06:	b500      	push	{lr}
 810bf08:	b09c      	sub	sp, #112	; 0x70
 810bf0a:	ab1d      	add	r3, sp, #116	; 0x74
 810bf0c:	9002      	str	r0, [sp, #8]
 810bf0e:	9006      	str	r0, [sp, #24]
 810bf10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810bf14:	4809      	ldr	r0, [pc, #36]	; (810bf3c <siprintf+0x38>)
 810bf16:	9107      	str	r1, [sp, #28]
 810bf18:	9104      	str	r1, [sp, #16]
 810bf1a:	4909      	ldr	r1, [pc, #36]	; (810bf40 <siprintf+0x3c>)
 810bf1c:	f853 2b04 	ldr.w	r2, [r3], #4
 810bf20:	9105      	str	r1, [sp, #20]
 810bf22:	6800      	ldr	r0, [r0, #0]
 810bf24:	9301      	str	r3, [sp, #4]
 810bf26:	a902      	add	r1, sp, #8
 810bf28:	f003 f8d6 	bl	810f0d8 <_svfiprintf_r>
 810bf2c:	9b02      	ldr	r3, [sp, #8]
 810bf2e:	2200      	movs	r2, #0
 810bf30:	701a      	strb	r2, [r3, #0]
 810bf32:	b01c      	add	sp, #112	; 0x70
 810bf34:	f85d eb04 	ldr.w	lr, [sp], #4
 810bf38:	b003      	add	sp, #12
 810bf3a:	4770      	bx	lr
 810bf3c:	10000020 	.word	0x10000020
 810bf40:	ffff0208 	.word	0xffff0208

0810bf44 <sulp>:
 810bf44:	b570      	push	{r4, r5, r6, lr}
 810bf46:	4604      	mov	r4, r0
 810bf48:	460d      	mov	r5, r1
 810bf4a:	ec45 4b10 	vmov	d0, r4, r5
 810bf4e:	4616      	mov	r6, r2
 810bf50:	f002 ff02 	bl	810ed58 <__ulp>
 810bf54:	ec51 0b10 	vmov	r0, r1, d0
 810bf58:	b17e      	cbz	r6, 810bf7a <sulp+0x36>
 810bf5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810bf5e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810bf62:	2b00      	cmp	r3, #0
 810bf64:	dd09      	ble.n	810bf7a <sulp+0x36>
 810bf66:	051b      	lsls	r3, r3, #20
 810bf68:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810bf6c:	2400      	movs	r4, #0
 810bf6e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810bf72:	4622      	mov	r2, r4
 810bf74:	462b      	mov	r3, r5
 810bf76:	f7f4 fbc7 	bl	8100708 <__aeabi_dmul>
 810bf7a:	bd70      	pop	{r4, r5, r6, pc}
 810bf7c:	0000      	movs	r0, r0
	...

0810bf80 <_strtod_l>:
 810bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bf84:	ed2d 8b02 	vpush	{d8}
 810bf88:	b09d      	sub	sp, #116	; 0x74
 810bf8a:	461f      	mov	r7, r3
 810bf8c:	2300      	movs	r3, #0
 810bf8e:	9318      	str	r3, [sp, #96]	; 0x60
 810bf90:	4ba2      	ldr	r3, [pc, #648]	; (810c21c <_strtod_l+0x29c>)
 810bf92:	9213      	str	r2, [sp, #76]	; 0x4c
 810bf94:	681b      	ldr	r3, [r3, #0]
 810bf96:	9305      	str	r3, [sp, #20]
 810bf98:	4604      	mov	r4, r0
 810bf9a:	4618      	mov	r0, r3
 810bf9c:	4688      	mov	r8, r1
 810bf9e:	f7f4 f99f 	bl	81002e0 <strlen>
 810bfa2:	f04f 0a00 	mov.w	sl, #0
 810bfa6:	4605      	mov	r5, r0
 810bfa8:	f04f 0b00 	mov.w	fp, #0
 810bfac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810bfb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810bfb2:	781a      	ldrb	r2, [r3, #0]
 810bfb4:	2a2b      	cmp	r2, #43	; 0x2b
 810bfb6:	d04e      	beq.n	810c056 <_strtod_l+0xd6>
 810bfb8:	d83b      	bhi.n	810c032 <_strtod_l+0xb2>
 810bfba:	2a0d      	cmp	r2, #13
 810bfbc:	d834      	bhi.n	810c028 <_strtod_l+0xa8>
 810bfbe:	2a08      	cmp	r2, #8
 810bfc0:	d834      	bhi.n	810c02c <_strtod_l+0xac>
 810bfc2:	2a00      	cmp	r2, #0
 810bfc4:	d03e      	beq.n	810c044 <_strtod_l+0xc4>
 810bfc6:	2300      	movs	r3, #0
 810bfc8:	930a      	str	r3, [sp, #40]	; 0x28
 810bfca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810bfcc:	7833      	ldrb	r3, [r6, #0]
 810bfce:	2b30      	cmp	r3, #48	; 0x30
 810bfd0:	f040 80b0 	bne.w	810c134 <_strtod_l+0x1b4>
 810bfd4:	7873      	ldrb	r3, [r6, #1]
 810bfd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810bfda:	2b58      	cmp	r3, #88	; 0x58
 810bfdc:	d168      	bne.n	810c0b0 <_strtod_l+0x130>
 810bfde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810bfe0:	9301      	str	r3, [sp, #4]
 810bfe2:	ab18      	add	r3, sp, #96	; 0x60
 810bfe4:	9702      	str	r7, [sp, #8]
 810bfe6:	9300      	str	r3, [sp, #0]
 810bfe8:	4a8d      	ldr	r2, [pc, #564]	; (810c220 <_strtod_l+0x2a0>)
 810bfea:	ab19      	add	r3, sp, #100	; 0x64
 810bfec:	a917      	add	r1, sp, #92	; 0x5c
 810bfee:	4620      	mov	r0, r4
 810bff0:	f001 ffae 	bl	810df50 <__gethex>
 810bff4:	f010 0707 	ands.w	r7, r0, #7
 810bff8:	4605      	mov	r5, r0
 810bffa:	d005      	beq.n	810c008 <_strtod_l+0x88>
 810bffc:	2f06      	cmp	r7, #6
 810bffe:	d12c      	bne.n	810c05a <_strtod_l+0xda>
 810c000:	3601      	adds	r6, #1
 810c002:	2300      	movs	r3, #0
 810c004:	9617      	str	r6, [sp, #92]	; 0x5c
 810c006:	930a      	str	r3, [sp, #40]	; 0x28
 810c008:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810c00a:	2b00      	cmp	r3, #0
 810c00c:	f040 8590 	bne.w	810cb30 <_strtod_l+0xbb0>
 810c010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c012:	b1eb      	cbz	r3, 810c050 <_strtod_l+0xd0>
 810c014:	4652      	mov	r2, sl
 810c016:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810c01a:	ec43 2b10 	vmov	d0, r2, r3
 810c01e:	b01d      	add	sp, #116	; 0x74
 810c020:	ecbd 8b02 	vpop	{d8}
 810c024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c028:	2a20      	cmp	r2, #32
 810c02a:	d1cc      	bne.n	810bfc6 <_strtod_l+0x46>
 810c02c:	3301      	adds	r3, #1
 810c02e:	9317      	str	r3, [sp, #92]	; 0x5c
 810c030:	e7be      	b.n	810bfb0 <_strtod_l+0x30>
 810c032:	2a2d      	cmp	r2, #45	; 0x2d
 810c034:	d1c7      	bne.n	810bfc6 <_strtod_l+0x46>
 810c036:	2201      	movs	r2, #1
 810c038:	920a      	str	r2, [sp, #40]	; 0x28
 810c03a:	1c5a      	adds	r2, r3, #1
 810c03c:	9217      	str	r2, [sp, #92]	; 0x5c
 810c03e:	785b      	ldrb	r3, [r3, #1]
 810c040:	2b00      	cmp	r3, #0
 810c042:	d1c2      	bne.n	810bfca <_strtod_l+0x4a>
 810c044:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810c046:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810c04a:	2b00      	cmp	r3, #0
 810c04c:	f040 856e 	bne.w	810cb2c <_strtod_l+0xbac>
 810c050:	4652      	mov	r2, sl
 810c052:	465b      	mov	r3, fp
 810c054:	e7e1      	b.n	810c01a <_strtod_l+0x9a>
 810c056:	2200      	movs	r2, #0
 810c058:	e7ee      	b.n	810c038 <_strtod_l+0xb8>
 810c05a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810c05c:	b13a      	cbz	r2, 810c06e <_strtod_l+0xee>
 810c05e:	2135      	movs	r1, #53	; 0x35
 810c060:	a81a      	add	r0, sp, #104	; 0x68
 810c062:	f002 ff84 	bl	810ef6e <__copybits>
 810c066:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c068:	4620      	mov	r0, r4
 810c06a:	f002 fb43 	bl	810e6f4 <_Bfree>
 810c06e:	3f01      	subs	r7, #1
 810c070:	2f04      	cmp	r7, #4
 810c072:	d806      	bhi.n	810c082 <_strtod_l+0x102>
 810c074:	e8df f007 	tbb	[pc, r7]
 810c078:	1714030a 	.word	0x1714030a
 810c07c:	0a          	.byte	0x0a
 810c07d:	00          	.byte	0x00
 810c07e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 810c082:	0728      	lsls	r0, r5, #28
 810c084:	d5c0      	bpl.n	810c008 <_strtod_l+0x88>
 810c086:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 810c08a:	e7bd      	b.n	810c008 <_strtod_l+0x88>
 810c08c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 810c090:	9a19      	ldr	r2, [sp, #100]	; 0x64
 810c092:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810c096:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810c09a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810c09e:	e7f0      	b.n	810c082 <_strtod_l+0x102>
 810c0a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 810c224 <_strtod_l+0x2a4>
 810c0a4:	e7ed      	b.n	810c082 <_strtod_l+0x102>
 810c0a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 810c0aa:	f04f 3aff 	mov.w	sl, #4294967295
 810c0ae:	e7e8      	b.n	810c082 <_strtod_l+0x102>
 810c0b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c0b2:	1c5a      	adds	r2, r3, #1
 810c0b4:	9217      	str	r2, [sp, #92]	; 0x5c
 810c0b6:	785b      	ldrb	r3, [r3, #1]
 810c0b8:	2b30      	cmp	r3, #48	; 0x30
 810c0ba:	d0f9      	beq.n	810c0b0 <_strtod_l+0x130>
 810c0bc:	2b00      	cmp	r3, #0
 810c0be:	d0a3      	beq.n	810c008 <_strtod_l+0x88>
 810c0c0:	2301      	movs	r3, #1
 810c0c2:	f04f 0900 	mov.w	r9, #0
 810c0c6:	9304      	str	r3, [sp, #16]
 810c0c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c0ca:	9308      	str	r3, [sp, #32]
 810c0cc:	f8cd 901c 	str.w	r9, [sp, #28]
 810c0d0:	464f      	mov	r7, r9
 810c0d2:	220a      	movs	r2, #10
 810c0d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 810c0d6:	7806      	ldrb	r6, [r0, #0]
 810c0d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810c0dc:	b2d9      	uxtb	r1, r3
 810c0de:	2909      	cmp	r1, #9
 810c0e0:	d92a      	bls.n	810c138 <_strtod_l+0x1b8>
 810c0e2:	9905      	ldr	r1, [sp, #20]
 810c0e4:	462a      	mov	r2, r5
 810c0e6:	f003 fa9e 	bl	810f626 <strncmp>
 810c0ea:	b398      	cbz	r0, 810c154 <_strtod_l+0x1d4>
 810c0ec:	2000      	movs	r0, #0
 810c0ee:	4632      	mov	r2, r6
 810c0f0:	463d      	mov	r5, r7
 810c0f2:	9005      	str	r0, [sp, #20]
 810c0f4:	4603      	mov	r3, r0
 810c0f6:	2a65      	cmp	r2, #101	; 0x65
 810c0f8:	d001      	beq.n	810c0fe <_strtod_l+0x17e>
 810c0fa:	2a45      	cmp	r2, #69	; 0x45
 810c0fc:	d118      	bne.n	810c130 <_strtod_l+0x1b0>
 810c0fe:	b91d      	cbnz	r5, 810c108 <_strtod_l+0x188>
 810c100:	9a04      	ldr	r2, [sp, #16]
 810c102:	4302      	orrs	r2, r0
 810c104:	d09e      	beq.n	810c044 <_strtod_l+0xc4>
 810c106:	2500      	movs	r5, #0
 810c108:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 810c10c:	f108 0201 	add.w	r2, r8, #1
 810c110:	9217      	str	r2, [sp, #92]	; 0x5c
 810c112:	f898 2001 	ldrb.w	r2, [r8, #1]
 810c116:	2a2b      	cmp	r2, #43	; 0x2b
 810c118:	d075      	beq.n	810c206 <_strtod_l+0x286>
 810c11a:	2a2d      	cmp	r2, #45	; 0x2d
 810c11c:	d07b      	beq.n	810c216 <_strtod_l+0x296>
 810c11e:	f04f 0c00 	mov.w	ip, #0
 810c122:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810c126:	2909      	cmp	r1, #9
 810c128:	f240 8082 	bls.w	810c230 <_strtod_l+0x2b0>
 810c12c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810c130:	2600      	movs	r6, #0
 810c132:	e09d      	b.n	810c270 <_strtod_l+0x2f0>
 810c134:	2300      	movs	r3, #0
 810c136:	e7c4      	b.n	810c0c2 <_strtod_l+0x142>
 810c138:	2f08      	cmp	r7, #8
 810c13a:	bfd8      	it	le
 810c13c:	9907      	ldrle	r1, [sp, #28]
 810c13e:	f100 0001 	add.w	r0, r0, #1
 810c142:	bfda      	itte	le
 810c144:	fb02 3301 	mlale	r3, r2, r1, r3
 810c148:	9307      	strle	r3, [sp, #28]
 810c14a:	fb02 3909 	mlagt	r9, r2, r9, r3
 810c14e:	3701      	adds	r7, #1
 810c150:	9017      	str	r0, [sp, #92]	; 0x5c
 810c152:	e7bf      	b.n	810c0d4 <_strtod_l+0x154>
 810c154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c156:	195a      	adds	r2, r3, r5
 810c158:	9217      	str	r2, [sp, #92]	; 0x5c
 810c15a:	5d5a      	ldrb	r2, [r3, r5]
 810c15c:	2f00      	cmp	r7, #0
 810c15e:	d037      	beq.n	810c1d0 <_strtod_l+0x250>
 810c160:	9005      	str	r0, [sp, #20]
 810c162:	463d      	mov	r5, r7
 810c164:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810c168:	2b09      	cmp	r3, #9
 810c16a:	d912      	bls.n	810c192 <_strtod_l+0x212>
 810c16c:	2301      	movs	r3, #1
 810c16e:	e7c2      	b.n	810c0f6 <_strtod_l+0x176>
 810c170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c172:	1c5a      	adds	r2, r3, #1
 810c174:	9217      	str	r2, [sp, #92]	; 0x5c
 810c176:	785a      	ldrb	r2, [r3, #1]
 810c178:	3001      	adds	r0, #1
 810c17a:	2a30      	cmp	r2, #48	; 0x30
 810c17c:	d0f8      	beq.n	810c170 <_strtod_l+0x1f0>
 810c17e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810c182:	2b08      	cmp	r3, #8
 810c184:	f200 84d9 	bhi.w	810cb3a <_strtod_l+0xbba>
 810c188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c18a:	9005      	str	r0, [sp, #20]
 810c18c:	2000      	movs	r0, #0
 810c18e:	9308      	str	r3, [sp, #32]
 810c190:	4605      	mov	r5, r0
 810c192:	3a30      	subs	r2, #48	; 0x30
 810c194:	f100 0301 	add.w	r3, r0, #1
 810c198:	d014      	beq.n	810c1c4 <_strtod_l+0x244>
 810c19a:	9905      	ldr	r1, [sp, #20]
 810c19c:	4419      	add	r1, r3
 810c19e:	9105      	str	r1, [sp, #20]
 810c1a0:	462b      	mov	r3, r5
 810c1a2:	eb00 0e05 	add.w	lr, r0, r5
 810c1a6:	210a      	movs	r1, #10
 810c1a8:	4573      	cmp	r3, lr
 810c1aa:	d113      	bne.n	810c1d4 <_strtod_l+0x254>
 810c1ac:	182b      	adds	r3, r5, r0
 810c1ae:	2b08      	cmp	r3, #8
 810c1b0:	f105 0501 	add.w	r5, r5, #1
 810c1b4:	4405      	add	r5, r0
 810c1b6:	dc1c      	bgt.n	810c1f2 <_strtod_l+0x272>
 810c1b8:	9907      	ldr	r1, [sp, #28]
 810c1ba:	230a      	movs	r3, #10
 810c1bc:	fb03 2301 	mla	r3, r3, r1, r2
 810c1c0:	9307      	str	r3, [sp, #28]
 810c1c2:	2300      	movs	r3, #0
 810c1c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810c1c6:	1c51      	adds	r1, r2, #1
 810c1c8:	9117      	str	r1, [sp, #92]	; 0x5c
 810c1ca:	7852      	ldrb	r2, [r2, #1]
 810c1cc:	4618      	mov	r0, r3
 810c1ce:	e7c9      	b.n	810c164 <_strtod_l+0x1e4>
 810c1d0:	4638      	mov	r0, r7
 810c1d2:	e7d2      	b.n	810c17a <_strtod_l+0x1fa>
 810c1d4:	2b08      	cmp	r3, #8
 810c1d6:	dc04      	bgt.n	810c1e2 <_strtod_l+0x262>
 810c1d8:	9e07      	ldr	r6, [sp, #28]
 810c1da:	434e      	muls	r6, r1
 810c1dc:	9607      	str	r6, [sp, #28]
 810c1de:	3301      	adds	r3, #1
 810c1e0:	e7e2      	b.n	810c1a8 <_strtod_l+0x228>
 810c1e2:	f103 0c01 	add.w	ip, r3, #1
 810c1e6:	f1bc 0f10 	cmp.w	ip, #16
 810c1ea:	bfd8      	it	le
 810c1ec:	fb01 f909 	mulle.w	r9, r1, r9
 810c1f0:	e7f5      	b.n	810c1de <_strtod_l+0x25e>
 810c1f2:	2d10      	cmp	r5, #16
 810c1f4:	bfdc      	itt	le
 810c1f6:	230a      	movle	r3, #10
 810c1f8:	fb03 2909 	mlale	r9, r3, r9, r2
 810c1fc:	e7e1      	b.n	810c1c2 <_strtod_l+0x242>
 810c1fe:	2300      	movs	r3, #0
 810c200:	9305      	str	r3, [sp, #20]
 810c202:	2301      	movs	r3, #1
 810c204:	e77c      	b.n	810c100 <_strtod_l+0x180>
 810c206:	f04f 0c00 	mov.w	ip, #0
 810c20a:	f108 0202 	add.w	r2, r8, #2
 810c20e:	9217      	str	r2, [sp, #92]	; 0x5c
 810c210:	f898 2002 	ldrb.w	r2, [r8, #2]
 810c214:	e785      	b.n	810c122 <_strtod_l+0x1a2>
 810c216:	f04f 0c01 	mov.w	ip, #1
 810c21a:	e7f6      	b.n	810c20a <_strtod_l+0x28a>
 810c21c:	0810fe5c 	.word	0x0810fe5c
 810c220:	0810fbb0 	.word	0x0810fbb0
 810c224:	7ff00000 	.word	0x7ff00000
 810c228:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810c22a:	1c51      	adds	r1, r2, #1
 810c22c:	9117      	str	r1, [sp, #92]	; 0x5c
 810c22e:	7852      	ldrb	r2, [r2, #1]
 810c230:	2a30      	cmp	r2, #48	; 0x30
 810c232:	d0f9      	beq.n	810c228 <_strtod_l+0x2a8>
 810c234:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810c238:	2908      	cmp	r1, #8
 810c23a:	f63f af79 	bhi.w	810c130 <_strtod_l+0x1b0>
 810c23e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810c242:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810c244:	9206      	str	r2, [sp, #24]
 810c246:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810c248:	1c51      	adds	r1, r2, #1
 810c24a:	9117      	str	r1, [sp, #92]	; 0x5c
 810c24c:	7852      	ldrb	r2, [r2, #1]
 810c24e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 810c252:	2e09      	cmp	r6, #9
 810c254:	d937      	bls.n	810c2c6 <_strtod_l+0x346>
 810c256:	9e06      	ldr	r6, [sp, #24]
 810c258:	1b89      	subs	r1, r1, r6
 810c25a:	2908      	cmp	r1, #8
 810c25c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810c260:	dc02      	bgt.n	810c268 <_strtod_l+0x2e8>
 810c262:	4576      	cmp	r6, lr
 810c264:	bfa8      	it	ge
 810c266:	4676      	movge	r6, lr
 810c268:	f1bc 0f00 	cmp.w	ip, #0
 810c26c:	d000      	beq.n	810c270 <_strtod_l+0x2f0>
 810c26e:	4276      	negs	r6, r6
 810c270:	2d00      	cmp	r5, #0
 810c272:	d14d      	bne.n	810c310 <_strtod_l+0x390>
 810c274:	9904      	ldr	r1, [sp, #16]
 810c276:	4301      	orrs	r1, r0
 810c278:	f47f aec6 	bne.w	810c008 <_strtod_l+0x88>
 810c27c:	2b00      	cmp	r3, #0
 810c27e:	f47f aee1 	bne.w	810c044 <_strtod_l+0xc4>
 810c282:	2a69      	cmp	r2, #105	; 0x69
 810c284:	d027      	beq.n	810c2d6 <_strtod_l+0x356>
 810c286:	dc24      	bgt.n	810c2d2 <_strtod_l+0x352>
 810c288:	2a49      	cmp	r2, #73	; 0x49
 810c28a:	d024      	beq.n	810c2d6 <_strtod_l+0x356>
 810c28c:	2a4e      	cmp	r2, #78	; 0x4e
 810c28e:	f47f aed9 	bne.w	810c044 <_strtod_l+0xc4>
 810c292:	499f      	ldr	r1, [pc, #636]	; (810c510 <_strtod_l+0x590>)
 810c294:	a817      	add	r0, sp, #92	; 0x5c
 810c296:	f002 f8b3 	bl	810e400 <__match>
 810c29a:	2800      	cmp	r0, #0
 810c29c:	f43f aed2 	beq.w	810c044 <_strtod_l+0xc4>
 810c2a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c2a2:	781b      	ldrb	r3, [r3, #0]
 810c2a4:	2b28      	cmp	r3, #40	; 0x28
 810c2a6:	d12d      	bne.n	810c304 <_strtod_l+0x384>
 810c2a8:	499a      	ldr	r1, [pc, #616]	; (810c514 <_strtod_l+0x594>)
 810c2aa:	aa1a      	add	r2, sp, #104	; 0x68
 810c2ac:	a817      	add	r0, sp, #92	; 0x5c
 810c2ae:	f002 f8bb 	bl	810e428 <__hexnan>
 810c2b2:	2805      	cmp	r0, #5
 810c2b4:	d126      	bne.n	810c304 <_strtod_l+0x384>
 810c2b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810c2b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 810c2bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 810c2c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 810c2c4:	e6a0      	b.n	810c008 <_strtod_l+0x88>
 810c2c6:	210a      	movs	r1, #10
 810c2c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 810c2cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 810c2d0:	e7b9      	b.n	810c246 <_strtod_l+0x2c6>
 810c2d2:	2a6e      	cmp	r2, #110	; 0x6e
 810c2d4:	e7db      	b.n	810c28e <_strtod_l+0x30e>
 810c2d6:	4990      	ldr	r1, [pc, #576]	; (810c518 <_strtod_l+0x598>)
 810c2d8:	a817      	add	r0, sp, #92	; 0x5c
 810c2da:	f002 f891 	bl	810e400 <__match>
 810c2de:	2800      	cmp	r0, #0
 810c2e0:	f43f aeb0 	beq.w	810c044 <_strtod_l+0xc4>
 810c2e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c2e6:	498d      	ldr	r1, [pc, #564]	; (810c51c <_strtod_l+0x59c>)
 810c2e8:	3b01      	subs	r3, #1
 810c2ea:	a817      	add	r0, sp, #92	; 0x5c
 810c2ec:	9317      	str	r3, [sp, #92]	; 0x5c
 810c2ee:	f002 f887 	bl	810e400 <__match>
 810c2f2:	b910      	cbnz	r0, 810c2fa <_strtod_l+0x37a>
 810c2f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c2f6:	3301      	adds	r3, #1
 810c2f8:	9317      	str	r3, [sp, #92]	; 0x5c
 810c2fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 810c52c <_strtod_l+0x5ac>
 810c2fe:	f04f 0a00 	mov.w	sl, #0
 810c302:	e681      	b.n	810c008 <_strtod_l+0x88>
 810c304:	4886      	ldr	r0, [pc, #536]	; (810c520 <_strtod_l+0x5a0>)
 810c306:	f003 f943 	bl	810f590 <nan>
 810c30a:	ec5b ab10 	vmov	sl, fp, d0
 810c30e:	e67b      	b.n	810c008 <_strtod_l+0x88>
 810c310:	9b05      	ldr	r3, [sp, #20]
 810c312:	9807      	ldr	r0, [sp, #28]
 810c314:	1af3      	subs	r3, r6, r3
 810c316:	2f00      	cmp	r7, #0
 810c318:	bf08      	it	eq
 810c31a:	462f      	moveq	r7, r5
 810c31c:	2d10      	cmp	r5, #16
 810c31e:	9306      	str	r3, [sp, #24]
 810c320:	46a8      	mov	r8, r5
 810c322:	bfa8      	it	ge
 810c324:	f04f 0810 	movge.w	r8, #16
 810c328:	f7f4 f974 	bl	8100614 <__aeabi_ui2d>
 810c32c:	2d09      	cmp	r5, #9
 810c32e:	4682      	mov	sl, r0
 810c330:	468b      	mov	fp, r1
 810c332:	dd13      	ble.n	810c35c <_strtod_l+0x3dc>
 810c334:	4b7b      	ldr	r3, [pc, #492]	; (810c524 <_strtod_l+0x5a4>)
 810c336:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810c33a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810c33e:	f7f4 f9e3 	bl	8100708 <__aeabi_dmul>
 810c342:	4682      	mov	sl, r0
 810c344:	4648      	mov	r0, r9
 810c346:	468b      	mov	fp, r1
 810c348:	f7f4 f964 	bl	8100614 <__aeabi_ui2d>
 810c34c:	4602      	mov	r2, r0
 810c34e:	460b      	mov	r3, r1
 810c350:	4650      	mov	r0, sl
 810c352:	4659      	mov	r1, fp
 810c354:	f7f4 f822 	bl	810039c <__adddf3>
 810c358:	4682      	mov	sl, r0
 810c35a:	468b      	mov	fp, r1
 810c35c:	2d0f      	cmp	r5, #15
 810c35e:	dc38      	bgt.n	810c3d2 <_strtod_l+0x452>
 810c360:	9b06      	ldr	r3, [sp, #24]
 810c362:	2b00      	cmp	r3, #0
 810c364:	f43f ae50 	beq.w	810c008 <_strtod_l+0x88>
 810c368:	dd24      	ble.n	810c3b4 <_strtod_l+0x434>
 810c36a:	2b16      	cmp	r3, #22
 810c36c:	dc0b      	bgt.n	810c386 <_strtod_l+0x406>
 810c36e:	496d      	ldr	r1, [pc, #436]	; (810c524 <_strtod_l+0x5a4>)
 810c370:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c374:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c378:	4652      	mov	r2, sl
 810c37a:	465b      	mov	r3, fp
 810c37c:	f7f4 f9c4 	bl	8100708 <__aeabi_dmul>
 810c380:	4682      	mov	sl, r0
 810c382:	468b      	mov	fp, r1
 810c384:	e640      	b.n	810c008 <_strtod_l+0x88>
 810c386:	9a06      	ldr	r2, [sp, #24]
 810c388:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 810c38c:	4293      	cmp	r3, r2
 810c38e:	db20      	blt.n	810c3d2 <_strtod_l+0x452>
 810c390:	4c64      	ldr	r4, [pc, #400]	; (810c524 <_strtod_l+0x5a4>)
 810c392:	f1c5 050f 	rsb	r5, r5, #15
 810c396:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810c39a:	4652      	mov	r2, sl
 810c39c:	465b      	mov	r3, fp
 810c39e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c3a2:	f7f4 f9b1 	bl	8100708 <__aeabi_dmul>
 810c3a6:	9b06      	ldr	r3, [sp, #24]
 810c3a8:	1b5d      	subs	r5, r3, r5
 810c3aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810c3ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 810c3b2:	e7e3      	b.n	810c37c <_strtod_l+0x3fc>
 810c3b4:	9b06      	ldr	r3, [sp, #24]
 810c3b6:	3316      	adds	r3, #22
 810c3b8:	db0b      	blt.n	810c3d2 <_strtod_l+0x452>
 810c3ba:	9b05      	ldr	r3, [sp, #20]
 810c3bc:	1b9e      	subs	r6, r3, r6
 810c3be:	4b59      	ldr	r3, [pc, #356]	; (810c524 <_strtod_l+0x5a4>)
 810c3c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 810c3c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 810c3c8:	4650      	mov	r0, sl
 810c3ca:	4659      	mov	r1, fp
 810c3cc:	f7f4 fac6 	bl	810095c <__aeabi_ddiv>
 810c3d0:	e7d6      	b.n	810c380 <_strtod_l+0x400>
 810c3d2:	9b06      	ldr	r3, [sp, #24]
 810c3d4:	eba5 0808 	sub.w	r8, r5, r8
 810c3d8:	4498      	add	r8, r3
 810c3da:	f1b8 0f00 	cmp.w	r8, #0
 810c3de:	dd74      	ble.n	810c4ca <_strtod_l+0x54a>
 810c3e0:	f018 030f 	ands.w	r3, r8, #15
 810c3e4:	d00a      	beq.n	810c3fc <_strtod_l+0x47c>
 810c3e6:	494f      	ldr	r1, [pc, #316]	; (810c524 <_strtod_l+0x5a4>)
 810c3e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c3ec:	4652      	mov	r2, sl
 810c3ee:	465b      	mov	r3, fp
 810c3f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c3f4:	f7f4 f988 	bl	8100708 <__aeabi_dmul>
 810c3f8:	4682      	mov	sl, r0
 810c3fa:	468b      	mov	fp, r1
 810c3fc:	f038 080f 	bics.w	r8, r8, #15
 810c400:	d04f      	beq.n	810c4a2 <_strtod_l+0x522>
 810c402:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 810c406:	dd22      	ble.n	810c44e <_strtod_l+0x4ce>
 810c408:	2500      	movs	r5, #0
 810c40a:	462e      	mov	r6, r5
 810c40c:	9507      	str	r5, [sp, #28]
 810c40e:	9505      	str	r5, [sp, #20]
 810c410:	2322      	movs	r3, #34	; 0x22
 810c412:	f8df b118 	ldr.w	fp, [pc, #280]	; 810c52c <_strtod_l+0x5ac>
 810c416:	6023      	str	r3, [r4, #0]
 810c418:	f04f 0a00 	mov.w	sl, #0
 810c41c:	9b07      	ldr	r3, [sp, #28]
 810c41e:	2b00      	cmp	r3, #0
 810c420:	f43f adf2 	beq.w	810c008 <_strtod_l+0x88>
 810c424:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c426:	4620      	mov	r0, r4
 810c428:	f002 f964 	bl	810e6f4 <_Bfree>
 810c42c:	9905      	ldr	r1, [sp, #20]
 810c42e:	4620      	mov	r0, r4
 810c430:	f002 f960 	bl	810e6f4 <_Bfree>
 810c434:	4631      	mov	r1, r6
 810c436:	4620      	mov	r0, r4
 810c438:	f002 f95c 	bl	810e6f4 <_Bfree>
 810c43c:	9907      	ldr	r1, [sp, #28]
 810c43e:	4620      	mov	r0, r4
 810c440:	f002 f958 	bl	810e6f4 <_Bfree>
 810c444:	4629      	mov	r1, r5
 810c446:	4620      	mov	r0, r4
 810c448:	f002 f954 	bl	810e6f4 <_Bfree>
 810c44c:	e5dc      	b.n	810c008 <_strtod_l+0x88>
 810c44e:	4b36      	ldr	r3, [pc, #216]	; (810c528 <_strtod_l+0x5a8>)
 810c450:	9304      	str	r3, [sp, #16]
 810c452:	2300      	movs	r3, #0
 810c454:	ea4f 1828 	mov.w	r8, r8, asr #4
 810c458:	4650      	mov	r0, sl
 810c45a:	4659      	mov	r1, fp
 810c45c:	4699      	mov	r9, r3
 810c45e:	f1b8 0f01 	cmp.w	r8, #1
 810c462:	dc21      	bgt.n	810c4a8 <_strtod_l+0x528>
 810c464:	b10b      	cbz	r3, 810c46a <_strtod_l+0x4ea>
 810c466:	4682      	mov	sl, r0
 810c468:	468b      	mov	fp, r1
 810c46a:	4b2f      	ldr	r3, [pc, #188]	; (810c528 <_strtod_l+0x5a8>)
 810c46c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 810c470:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 810c474:	4652      	mov	r2, sl
 810c476:	465b      	mov	r3, fp
 810c478:	e9d9 0100 	ldrd	r0, r1, [r9]
 810c47c:	f7f4 f944 	bl	8100708 <__aeabi_dmul>
 810c480:	4b2a      	ldr	r3, [pc, #168]	; (810c52c <_strtod_l+0x5ac>)
 810c482:	460a      	mov	r2, r1
 810c484:	400b      	ands	r3, r1
 810c486:	492a      	ldr	r1, [pc, #168]	; (810c530 <_strtod_l+0x5b0>)
 810c488:	428b      	cmp	r3, r1
 810c48a:	4682      	mov	sl, r0
 810c48c:	d8bc      	bhi.n	810c408 <_strtod_l+0x488>
 810c48e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810c492:	428b      	cmp	r3, r1
 810c494:	bf86      	itte	hi
 810c496:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 810c534 <_strtod_l+0x5b4>
 810c49a:	f04f 3aff 	movhi.w	sl, #4294967295
 810c49e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 810c4a2:	2300      	movs	r3, #0
 810c4a4:	9304      	str	r3, [sp, #16]
 810c4a6:	e084      	b.n	810c5b2 <_strtod_l+0x632>
 810c4a8:	f018 0f01 	tst.w	r8, #1
 810c4ac:	d005      	beq.n	810c4ba <_strtod_l+0x53a>
 810c4ae:	9b04      	ldr	r3, [sp, #16]
 810c4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c4b4:	f7f4 f928 	bl	8100708 <__aeabi_dmul>
 810c4b8:	2301      	movs	r3, #1
 810c4ba:	9a04      	ldr	r2, [sp, #16]
 810c4bc:	3208      	adds	r2, #8
 810c4be:	f109 0901 	add.w	r9, r9, #1
 810c4c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 810c4c6:	9204      	str	r2, [sp, #16]
 810c4c8:	e7c9      	b.n	810c45e <_strtod_l+0x4de>
 810c4ca:	d0ea      	beq.n	810c4a2 <_strtod_l+0x522>
 810c4cc:	f1c8 0800 	rsb	r8, r8, #0
 810c4d0:	f018 020f 	ands.w	r2, r8, #15
 810c4d4:	d00a      	beq.n	810c4ec <_strtod_l+0x56c>
 810c4d6:	4b13      	ldr	r3, [pc, #76]	; (810c524 <_strtod_l+0x5a4>)
 810c4d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810c4dc:	4650      	mov	r0, sl
 810c4de:	4659      	mov	r1, fp
 810c4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c4e4:	f7f4 fa3a 	bl	810095c <__aeabi_ddiv>
 810c4e8:	4682      	mov	sl, r0
 810c4ea:	468b      	mov	fp, r1
 810c4ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 810c4f0:	d0d7      	beq.n	810c4a2 <_strtod_l+0x522>
 810c4f2:	f1b8 0f1f 	cmp.w	r8, #31
 810c4f6:	dd1f      	ble.n	810c538 <_strtod_l+0x5b8>
 810c4f8:	2500      	movs	r5, #0
 810c4fa:	462e      	mov	r6, r5
 810c4fc:	9507      	str	r5, [sp, #28]
 810c4fe:	9505      	str	r5, [sp, #20]
 810c500:	2322      	movs	r3, #34	; 0x22
 810c502:	f04f 0a00 	mov.w	sl, #0
 810c506:	f04f 0b00 	mov.w	fp, #0
 810c50a:	6023      	str	r3, [r4, #0]
 810c50c:	e786      	b.n	810c41c <_strtod_l+0x49c>
 810c50e:	bf00      	nop
 810c510:	0810fb81 	.word	0x0810fb81
 810c514:	0810fbc4 	.word	0x0810fbc4
 810c518:	0810fb79 	.word	0x0810fb79
 810c51c:	0810fd04 	.word	0x0810fd04
 810c520:	08110018 	.word	0x08110018
 810c524:	0810fef8 	.word	0x0810fef8
 810c528:	0810fed0 	.word	0x0810fed0
 810c52c:	7ff00000 	.word	0x7ff00000
 810c530:	7ca00000 	.word	0x7ca00000
 810c534:	7fefffff 	.word	0x7fefffff
 810c538:	f018 0310 	ands.w	r3, r8, #16
 810c53c:	bf18      	it	ne
 810c53e:	236a      	movne	r3, #106	; 0x6a
 810c540:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 810c8f0 <_strtod_l+0x970>
 810c544:	9304      	str	r3, [sp, #16]
 810c546:	4650      	mov	r0, sl
 810c548:	4659      	mov	r1, fp
 810c54a:	2300      	movs	r3, #0
 810c54c:	f018 0f01 	tst.w	r8, #1
 810c550:	d004      	beq.n	810c55c <_strtod_l+0x5dc>
 810c552:	e9d9 2300 	ldrd	r2, r3, [r9]
 810c556:	f7f4 f8d7 	bl	8100708 <__aeabi_dmul>
 810c55a:	2301      	movs	r3, #1
 810c55c:	ea5f 0868 	movs.w	r8, r8, asr #1
 810c560:	f109 0908 	add.w	r9, r9, #8
 810c564:	d1f2      	bne.n	810c54c <_strtod_l+0x5cc>
 810c566:	b10b      	cbz	r3, 810c56c <_strtod_l+0x5ec>
 810c568:	4682      	mov	sl, r0
 810c56a:	468b      	mov	fp, r1
 810c56c:	9b04      	ldr	r3, [sp, #16]
 810c56e:	b1c3      	cbz	r3, 810c5a2 <_strtod_l+0x622>
 810c570:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810c574:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810c578:	2b00      	cmp	r3, #0
 810c57a:	4659      	mov	r1, fp
 810c57c:	dd11      	ble.n	810c5a2 <_strtod_l+0x622>
 810c57e:	2b1f      	cmp	r3, #31
 810c580:	f340 8124 	ble.w	810c7cc <_strtod_l+0x84c>
 810c584:	2b34      	cmp	r3, #52	; 0x34
 810c586:	bfde      	ittt	le
 810c588:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810c58c:	f04f 33ff 	movle.w	r3, #4294967295
 810c590:	fa03 f202 	lslle.w	r2, r3, r2
 810c594:	f04f 0a00 	mov.w	sl, #0
 810c598:	bfcc      	ite	gt
 810c59a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 810c59e:	ea02 0b01 	andle.w	fp, r2, r1
 810c5a2:	2200      	movs	r2, #0
 810c5a4:	2300      	movs	r3, #0
 810c5a6:	4650      	mov	r0, sl
 810c5a8:	4659      	mov	r1, fp
 810c5aa:	f7f4 fb15 	bl	8100bd8 <__aeabi_dcmpeq>
 810c5ae:	2800      	cmp	r0, #0
 810c5b0:	d1a2      	bne.n	810c4f8 <_strtod_l+0x578>
 810c5b2:	9b07      	ldr	r3, [sp, #28]
 810c5b4:	9300      	str	r3, [sp, #0]
 810c5b6:	9908      	ldr	r1, [sp, #32]
 810c5b8:	462b      	mov	r3, r5
 810c5ba:	463a      	mov	r2, r7
 810c5bc:	4620      	mov	r0, r4
 810c5be:	f002 f901 	bl	810e7c4 <__s2b>
 810c5c2:	9007      	str	r0, [sp, #28]
 810c5c4:	2800      	cmp	r0, #0
 810c5c6:	f43f af1f 	beq.w	810c408 <_strtod_l+0x488>
 810c5ca:	9b05      	ldr	r3, [sp, #20]
 810c5cc:	1b9e      	subs	r6, r3, r6
 810c5ce:	9b06      	ldr	r3, [sp, #24]
 810c5d0:	2b00      	cmp	r3, #0
 810c5d2:	bfb4      	ite	lt
 810c5d4:	4633      	movlt	r3, r6
 810c5d6:	2300      	movge	r3, #0
 810c5d8:	930c      	str	r3, [sp, #48]	; 0x30
 810c5da:	9b06      	ldr	r3, [sp, #24]
 810c5dc:	2500      	movs	r5, #0
 810c5de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810c5e2:	9312      	str	r3, [sp, #72]	; 0x48
 810c5e4:	462e      	mov	r6, r5
 810c5e6:	9b07      	ldr	r3, [sp, #28]
 810c5e8:	4620      	mov	r0, r4
 810c5ea:	6859      	ldr	r1, [r3, #4]
 810c5ec:	f002 f842 	bl	810e674 <_Balloc>
 810c5f0:	9005      	str	r0, [sp, #20]
 810c5f2:	2800      	cmp	r0, #0
 810c5f4:	f43f af0c 	beq.w	810c410 <_strtod_l+0x490>
 810c5f8:	9b07      	ldr	r3, [sp, #28]
 810c5fa:	691a      	ldr	r2, [r3, #16]
 810c5fc:	3202      	adds	r2, #2
 810c5fe:	f103 010c 	add.w	r1, r3, #12
 810c602:	0092      	lsls	r2, r2, #2
 810c604:	300c      	adds	r0, #12
 810c606:	f7fe fc69 	bl	810aedc <memcpy>
 810c60a:	ec4b ab10 	vmov	d0, sl, fp
 810c60e:	aa1a      	add	r2, sp, #104	; 0x68
 810c610:	a919      	add	r1, sp, #100	; 0x64
 810c612:	4620      	mov	r0, r4
 810c614:	f002 fc1c 	bl	810ee50 <__d2b>
 810c618:	ec4b ab18 	vmov	d8, sl, fp
 810c61c:	9018      	str	r0, [sp, #96]	; 0x60
 810c61e:	2800      	cmp	r0, #0
 810c620:	f43f aef6 	beq.w	810c410 <_strtod_l+0x490>
 810c624:	2101      	movs	r1, #1
 810c626:	4620      	mov	r0, r4
 810c628:	f002 f966 	bl	810e8f8 <__i2b>
 810c62c:	4606      	mov	r6, r0
 810c62e:	2800      	cmp	r0, #0
 810c630:	f43f aeee 	beq.w	810c410 <_strtod_l+0x490>
 810c634:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810c636:	9904      	ldr	r1, [sp, #16]
 810c638:	2b00      	cmp	r3, #0
 810c63a:	bfab      	itete	ge
 810c63c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 810c63e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 810c640:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810c642:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 810c646:	bfac      	ite	ge
 810c648:	eb03 0902 	addge.w	r9, r3, r2
 810c64c:	1ad7      	sublt	r7, r2, r3
 810c64e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 810c650:	eba3 0801 	sub.w	r8, r3, r1
 810c654:	4490      	add	r8, r2
 810c656:	4ba1      	ldr	r3, [pc, #644]	; (810c8dc <_strtod_l+0x95c>)
 810c658:	f108 38ff 	add.w	r8, r8, #4294967295
 810c65c:	4598      	cmp	r8, r3
 810c65e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810c662:	f280 80c7 	bge.w	810c7f4 <_strtod_l+0x874>
 810c666:	eba3 0308 	sub.w	r3, r3, r8
 810c66a:	2b1f      	cmp	r3, #31
 810c66c:	eba2 0203 	sub.w	r2, r2, r3
 810c670:	f04f 0101 	mov.w	r1, #1
 810c674:	f300 80b1 	bgt.w	810c7da <_strtod_l+0x85a>
 810c678:	fa01 f303 	lsl.w	r3, r1, r3
 810c67c:	930d      	str	r3, [sp, #52]	; 0x34
 810c67e:	2300      	movs	r3, #0
 810c680:	9308      	str	r3, [sp, #32]
 810c682:	eb09 0802 	add.w	r8, r9, r2
 810c686:	9b04      	ldr	r3, [sp, #16]
 810c688:	45c1      	cmp	r9, r8
 810c68a:	4417      	add	r7, r2
 810c68c:	441f      	add	r7, r3
 810c68e:	464b      	mov	r3, r9
 810c690:	bfa8      	it	ge
 810c692:	4643      	movge	r3, r8
 810c694:	42bb      	cmp	r3, r7
 810c696:	bfa8      	it	ge
 810c698:	463b      	movge	r3, r7
 810c69a:	2b00      	cmp	r3, #0
 810c69c:	bfc2      	ittt	gt
 810c69e:	eba8 0803 	subgt.w	r8, r8, r3
 810c6a2:	1aff      	subgt	r7, r7, r3
 810c6a4:	eba9 0903 	subgt.w	r9, r9, r3
 810c6a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810c6aa:	2b00      	cmp	r3, #0
 810c6ac:	dd17      	ble.n	810c6de <_strtod_l+0x75e>
 810c6ae:	4631      	mov	r1, r6
 810c6b0:	461a      	mov	r2, r3
 810c6b2:	4620      	mov	r0, r4
 810c6b4:	f002 f9e0 	bl	810ea78 <__pow5mult>
 810c6b8:	4606      	mov	r6, r0
 810c6ba:	2800      	cmp	r0, #0
 810c6bc:	f43f aea8 	beq.w	810c410 <_strtod_l+0x490>
 810c6c0:	4601      	mov	r1, r0
 810c6c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810c6c4:	4620      	mov	r0, r4
 810c6c6:	f002 f92d 	bl	810e924 <__multiply>
 810c6ca:	900b      	str	r0, [sp, #44]	; 0x2c
 810c6cc:	2800      	cmp	r0, #0
 810c6ce:	f43f ae9f 	beq.w	810c410 <_strtod_l+0x490>
 810c6d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c6d4:	4620      	mov	r0, r4
 810c6d6:	f002 f80d 	bl	810e6f4 <_Bfree>
 810c6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c6dc:	9318      	str	r3, [sp, #96]	; 0x60
 810c6de:	f1b8 0f00 	cmp.w	r8, #0
 810c6e2:	f300 808c 	bgt.w	810c7fe <_strtod_l+0x87e>
 810c6e6:	9b06      	ldr	r3, [sp, #24]
 810c6e8:	2b00      	cmp	r3, #0
 810c6ea:	dd08      	ble.n	810c6fe <_strtod_l+0x77e>
 810c6ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810c6ee:	9905      	ldr	r1, [sp, #20]
 810c6f0:	4620      	mov	r0, r4
 810c6f2:	f002 f9c1 	bl	810ea78 <__pow5mult>
 810c6f6:	9005      	str	r0, [sp, #20]
 810c6f8:	2800      	cmp	r0, #0
 810c6fa:	f43f ae89 	beq.w	810c410 <_strtod_l+0x490>
 810c6fe:	2f00      	cmp	r7, #0
 810c700:	dd08      	ble.n	810c714 <_strtod_l+0x794>
 810c702:	9905      	ldr	r1, [sp, #20]
 810c704:	463a      	mov	r2, r7
 810c706:	4620      	mov	r0, r4
 810c708:	f002 fa10 	bl	810eb2c <__lshift>
 810c70c:	9005      	str	r0, [sp, #20]
 810c70e:	2800      	cmp	r0, #0
 810c710:	f43f ae7e 	beq.w	810c410 <_strtod_l+0x490>
 810c714:	f1b9 0f00 	cmp.w	r9, #0
 810c718:	dd08      	ble.n	810c72c <_strtod_l+0x7ac>
 810c71a:	4631      	mov	r1, r6
 810c71c:	464a      	mov	r2, r9
 810c71e:	4620      	mov	r0, r4
 810c720:	f002 fa04 	bl	810eb2c <__lshift>
 810c724:	4606      	mov	r6, r0
 810c726:	2800      	cmp	r0, #0
 810c728:	f43f ae72 	beq.w	810c410 <_strtod_l+0x490>
 810c72c:	9a05      	ldr	r2, [sp, #20]
 810c72e:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c730:	4620      	mov	r0, r4
 810c732:	f002 fa87 	bl	810ec44 <__mdiff>
 810c736:	4605      	mov	r5, r0
 810c738:	2800      	cmp	r0, #0
 810c73a:	f43f ae69 	beq.w	810c410 <_strtod_l+0x490>
 810c73e:	68c3      	ldr	r3, [r0, #12]
 810c740:	930b      	str	r3, [sp, #44]	; 0x2c
 810c742:	2300      	movs	r3, #0
 810c744:	60c3      	str	r3, [r0, #12]
 810c746:	4631      	mov	r1, r6
 810c748:	f002 fa60 	bl	810ec0c <__mcmp>
 810c74c:	2800      	cmp	r0, #0
 810c74e:	da60      	bge.n	810c812 <_strtod_l+0x892>
 810c750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c752:	ea53 030a 	orrs.w	r3, r3, sl
 810c756:	f040 8082 	bne.w	810c85e <_strtod_l+0x8de>
 810c75a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c75e:	2b00      	cmp	r3, #0
 810c760:	d17d      	bne.n	810c85e <_strtod_l+0x8de>
 810c762:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810c766:	0d1b      	lsrs	r3, r3, #20
 810c768:	051b      	lsls	r3, r3, #20
 810c76a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810c76e:	d976      	bls.n	810c85e <_strtod_l+0x8de>
 810c770:	696b      	ldr	r3, [r5, #20]
 810c772:	b913      	cbnz	r3, 810c77a <_strtod_l+0x7fa>
 810c774:	692b      	ldr	r3, [r5, #16]
 810c776:	2b01      	cmp	r3, #1
 810c778:	dd71      	ble.n	810c85e <_strtod_l+0x8de>
 810c77a:	4629      	mov	r1, r5
 810c77c:	2201      	movs	r2, #1
 810c77e:	4620      	mov	r0, r4
 810c780:	f002 f9d4 	bl	810eb2c <__lshift>
 810c784:	4631      	mov	r1, r6
 810c786:	4605      	mov	r5, r0
 810c788:	f002 fa40 	bl	810ec0c <__mcmp>
 810c78c:	2800      	cmp	r0, #0
 810c78e:	dd66      	ble.n	810c85e <_strtod_l+0x8de>
 810c790:	9904      	ldr	r1, [sp, #16]
 810c792:	4a53      	ldr	r2, [pc, #332]	; (810c8e0 <_strtod_l+0x960>)
 810c794:	465b      	mov	r3, fp
 810c796:	2900      	cmp	r1, #0
 810c798:	f000 8081 	beq.w	810c89e <_strtod_l+0x91e>
 810c79c:	ea02 010b 	and.w	r1, r2, fp
 810c7a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810c7a4:	dc7b      	bgt.n	810c89e <_strtod_l+0x91e>
 810c7a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810c7aa:	f77f aea9 	ble.w	810c500 <_strtod_l+0x580>
 810c7ae:	4b4d      	ldr	r3, [pc, #308]	; (810c8e4 <_strtod_l+0x964>)
 810c7b0:	4650      	mov	r0, sl
 810c7b2:	4659      	mov	r1, fp
 810c7b4:	2200      	movs	r2, #0
 810c7b6:	f7f3 ffa7 	bl	8100708 <__aeabi_dmul>
 810c7ba:	460b      	mov	r3, r1
 810c7bc:	4303      	orrs	r3, r0
 810c7be:	bf08      	it	eq
 810c7c0:	2322      	moveq	r3, #34	; 0x22
 810c7c2:	4682      	mov	sl, r0
 810c7c4:	468b      	mov	fp, r1
 810c7c6:	bf08      	it	eq
 810c7c8:	6023      	streq	r3, [r4, #0]
 810c7ca:	e62b      	b.n	810c424 <_strtod_l+0x4a4>
 810c7cc:	f04f 32ff 	mov.w	r2, #4294967295
 810c7d0:	fa02 f303 	lsl.w	r3, r2, r3
 810c7d4:	ea03 0a0a 	and.w	sl, r3, sl
 810c7d8:	e6e3      	b.n	810c5a2 <_strtod_l+0x622>
 810c7da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810c7de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 810c7e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 810c7e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810c7ea:	fa01 f308 	lsl.w	r3, r1, r8
 810c7ee:	9308      	str	r3, [sp, #32]
 810c7f0:	910d      	str	r1, [sp, #52]	; 0x34
 810c7f2:	e746      	b.n	810c682 <_strtod_l+0x702>
 810c7f4:	2300      	movs	r3, #0
 810c7f6:	9308      	str	r3, [sp, #32]
 810c7f8:	2301      	movs	r3, #1
 810c7fa:	930d      	str	r3, [sp, #52]	; 0x34
 810c7fc:	e741      	b.n	810c682 <_strtod_l+0x702>
 810c7fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c800:	4642      	mov	r2, r8
 810c802:	4620      	mov	r0, r4
 810c804:	f002 f992 	bl	810eb2c <__lshift>
 810c808:	9018      	str	r0, [sp, #96]	; 0x60
 810c80a:	2800      	cmp	r0, #0
 810c80c:	f47f af6b 	bne.w	810c6e6 <_strtod_l+0x766>
 810c810:	e5fe      	b.n	810c410 <_strtod_l+0x490>
 810c812:	465f      	mov	r7, fp
 810c814:	d16e      	bne.n	810c8f4 <_strtod_l+0x974>
 810c816:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810c818:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c81c:	b342      	cbz	r2, 810c870 <_strtod_l+0x8f0>
 810c81e:	4a32      	ldr	r2, [pc, #200]	; (810c8e8 <_strtod_l+0x968>)
 810c820:	4293      	cmp	r3, r2
 810c822:	d128      	bne.n	810c876 <_strtod_l+0x8f6>
 810c824:	9b04      	ldr	r3, [sp, #16]
 810c826:	4651      	mov	r1, sl
 810c828:	b1eb      	cbz	r3, 810c866 <_strtod_l+0x8e6>
 810c82a:	4b2d      	ldr	r3, [pc, #180]	; (810c8e0 <_strtod_l+0x960>)
 810c82c:	403b      	ands	r3, r7
 810c82e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810c832:	f04f 32ff 	mov.w	r2, #4294967295
 810c836:	d819      	bhi.n	810c86c <_strtod_l+0x8ec>
 810c838:	0d1b      	lsrs	r3, r3, #20
 810c83a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810c83e:	fa02 f303 	lsl.w	r3, r2, r3
 810c842:	4299      	cmp	r1, r3
 810c844:	d117      	bne.n	810c876 <_strtod_l+0x8f6>
 810c846:	4b29      	ldr	r3, [pc, #164]	; (810c8ec <_strtod_l+0x96c>)
 810c848:	429f      	cmp	r7, r3
 810c84a:	d102      	bne.n	810c852 <_strtod_l+0x8d2>
 810c84c:	3101      	adds	r1, #1
 810c84e:	f43f addf 	beq.w	810c410 <_strtod_l+0x490>
 810c852:	4b23      	ldr	r3, [pc, #140]	; (810c8e0 <_strtod_l+0x960>)
 810c854:	403b      	ands	r3, r7
 810c856:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810c85a:	f04f 0a00 	mov.w	sl, #0
 810c85e:	9b04      	ldr	r3, [sp, #16]
 810c860:	2b00      	cmp	r3, #0
 810c862:	d1a4      	bne.n	810c7ae <_strtod_l+0x82e>
 810c864:	e5de      	b.n	810c424 <_strtod_l+0x4a4>
 810c866:	f04f 33ff 	mov.w	r3, #4294967295
 810c86a:	e7ea      	b.n	810c842 <_strtod_l+0x8c2>
 810c86c:	4613      	mov	r3, r2
 810c86e:	e7e8      	b.n	810c842 <_strtod_l+0x8c2>
 810c870:	ea53 030a 	orrs.w	r3, r3, sl
 810c874:	d08c      	beq.n	810c790 <_strtod_l+0x810>
 810c876:	9b08      	ldr	r3, [sp, #32]
 810c878:	b1db      	cbz	r3, 810c8b2 <_strtod_l+0x932>
 810c87a:	423b      	tst	r3, r7
 810c87c:	d0ef      	beq.n	810c85e <_strtod_l+0x8de>
 810c87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c880:	9a04      	ldr	r2, [sp, #16]
 810c882:	4650      	mov	r0, sl
 810c884:	4659      	mov	r1, fp
 810c886:	b1c3      	cbz	r3, 810c8ba <_strtod_l+0x93a>
 810c888:	f7ff fb5c 	bl	810bf44 <sulp>
 810c88c:	4602      	mov	r2, r0
 810c88e:	460b      	mov	r3, r1
 810c890:	ec51 0b18 	vmov	r0, r1, d8
 810c894:	f7f3 fd82 	bl	810039c <__adddf3>
 810c898:	4682      	mov	sl, r0
 810c89a:	468b      	mov	fp, r1
 810c89c:	e7df      	b.n	810c85e <_strtod_l+0x8de>
 810c89e:	4013      	ands	r3, r2
 810c8a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810c8a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810c8a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810c8ac:	f04f 3aff 	mov.w	sl, #4294967295
 810c8b0:	e7d5      	b.n	810c85e <_strtod_l+0x8de>
 810c8b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810c8b4:	ea13 0f0a 	tst.w	r3, sl
 810c8b8:	e7e0      	b.n	810c87c <_strtod_l+0x8fc>
 810c8ba:	f7ff fb43 	bl	810bf44 <sulp>
 810c8be:	4602      	mov	r2, r0
 810c8c0:	460b      	mov	r3, r1
 810c8c2:	ec51 0b18 	vmov	r0, r1, d8
 810c8c6:	f7f3 fd67 	bl	8100398 <__aeabi_dsub>
 810c8ca:	2200      	movs	r2, #0
 810c8cc:	2300      	movs	r3, #0
 810c8ce:	4682      	mov	sl, r0
 810c8d0:	468b      	mov	fp, r1
 810c8d2:	f7f4 f981 	bl	8100bd8 <__aeabi_dcmpeq>
 810c8d6:	2800      	cmp	r0, #0
 810c8d8:	d0c1      	beq.n	810c85e <_strtod_l+0x8de>
 810c8da:	e611      	b.n	810c500 <_strtod_l+0x580>
 810c8dc:	fffffc02 	.word	0xfffffc02
 810c8e0:	7ff00000 	.word	0x7ff00000
 810c8e4:	39500000 	.word	0x39500000
 810c8e8:	000fffff 	.word	0x000fffff
 810c8ec:	7fefffff 	.word	0x7fefffff
 810c8f0:	0810fbd8 	.word	0x0810fbd8
 810c8f4:	4631      	mov	r1, r6
 810c8f6:	4628      	mov	r0, r5
 810c8f8:	f002 fb06 	bl	810ef08 <__ratio>
 810c8fc:	ec59 8b10 	vmov	r8, r9, d0
 810c900:	ee10 0a10 	vmov	r0, s0
 810c904:	2200      	movs	r2, #0
 810c906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810c90a:	4649      	mov	r1, r9
 810c90c:	f7f4 f978 	bl	8100c00 <__aeabi_dcmple>
 810c910:	2800      	cmp	r0, #0
 810c912:	d07a      	beq.n	810ca0a <_strtod_l+0xa8a>
 810c914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c916:	2b00      	cmp	r3, #0
 810c918:	d04a      	beq.n	810c9b0 <_strtod_l+0xa30>
 810c91a:	4b95      	ldr	r3, [pc, #596]	; (810cb70 <_strtod_l+0xbf0>)
 810c91c:	2200      	movs	r2, #0
 810c91e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810c922:	f8df 924c 	ldr.w	r9, [pc, #588]	; 810cb70 <_strtod_l+0xbf0>
 810c926:	f04f 0800 	mov.w	r8, #0
 810c92a:	4b92      	ldr	r3, [pc, #584]	; (810cb74 <_strtod_l+0xbf4>)
 810c92c:	403b      	ands	r3, r7
 810c92e:	930d      	str	r3, [sp, #52]	; 0x34
 810c930:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810c932:	4b91      	ldr	r3, [pc, #580]	; (810cb78 <_strtod_l+0xbf8>)
 810c934:	429a      	cmp	r2, r3
 810c936:	f040 80b0 	bne.w	810ca9a <_strtod_l+0xb1a>
 810c93a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810c93e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810c942:	ec4b ab10 	vmov	d0, sl, fp
 810c946:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810c94a:	f002 fa05 	bl	810ed58 <__ulp>
 810c94e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810c952:	ec53 2b10 	vmov	r2, r3, d0
 810c956:	f7f3 fed7 	bl	8100708 <__aeabi_dmul>
 810c95a:	4652      	mov	r2, sl
 810c95c:	465b      	mov	r3, fp
 810c95e:	f7f3 fd1d 	bl	810039c <__adddf3>
 810c962:	460b      	mov	r3, r1
 810c964:	4983      	ldr	r1, [pc, #524]	; (810cb74 <_strtod_l+0xbf4>)
 810c966:	4a85      	ldr	r2, [pc, #532]	; (810cb7c <_strtod_l+0xbfc>)
 810c968:	4019      	ands	r1, r3
 810c96a:	4291      	cmp	r1, r2
 810c96c:	4682      	mov	sl, r0
 810c96e:	d960      	bls.n	810ca32 <_strtod_l+0xab2>
 810c970:	ee18 3a90 	vmov	r3, s17
 810c974:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 810c978:	4293      	cmp	r3, r2
 810c97a:	d104      	bne.n	810c986 <_strtod_l+0xa06>
 810c97c:	ee18 3a10 	vmov	r3, s16
 810c980:	3301      	adds	r3, #1
 810c982:	f43f ad45 	beq.w	810c410 <_strtod_l+0x490>
 810c986:	f8df b200 	ldr.w	fp, [pc, #512]	; 810cb88 <_strtod_l+0xc08>
 810c98a:	f04f 3aff 	mov.w	sl, #4294967295
 810c98e:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c990:	4620      	mov	r0, r4
 810c992:	f001 feaf 	bl	810e6f4 <_Bfree>
 810c996:	9905      	ldr	r1, [sp, #20]
 810c998:	4620      	mov	r0, r4
 810c99a:	f001 feab 	bl	810e6f4 <_Bfree>
 810c99e:	4631      	mov	r1, r6
 810c9a0:	4620      	mov	r0, r4
 810c9a2:	f001 fea7 	bl	810e6f4 <_Bfree>
 810c9a6:	4629      	mov	r1, r5
 810c9a8:	4620      	mov	r0, r4
 810c9aa:	f001 fea3 	bl	810e6f4 <_Bfree>
 810c9ae:	e61a      	b.n	810c5e6 <_strtod_l+0x666>
 810c9b0:	f1ba 0f00 	cmp.w	sl, #0
 810c9b4:	d11b      	bne.n	810c9ee <_strtod_l+0xa6e>
 810c9b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c9ba:	b9f3      	cbnz	r3, 810c9fa <_strtod_l+0xa7a>
 810c9bc:	4b6c      	ldr	r3, [pc, #432]	; (810cb70 <_strtod_l+0xbf0>)
 810c9be:	2200      	movs	r2, #0
 810c9c0:	4640      	mov	r0, r8
 810c9c2:	4649      	mov	r1, r9
 810c9c4:	f7f4 f912 	bl	8100bec <__aeabi_dcmplt>
 810c9c8:	b9d0      	cbnz	r0, 810ca00 <_strtod_l+0xa80>
 810c9ca:	4640      	mov	r0, r8
 810c9cc:	4649      	mov	r1, r9
 810c9ce:	4b6c      	ldr	r3, [pc, #432]	; (810cb80 <_strtod_l+0xc00>)
 810c9d0:	2200      	movs	r2, #0
 810c9d2:	f7f3 fe99 	bl	8100708 <__aeabi_dmul>
 810c9d6:	4680      	mov	r8, r0
 810c9d8:	4689      	mov	r9, r1
 810c9da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810c9de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 810c9e2:	9315      	str	r3, [sp, #84]	; 0x54
 810c9e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 810c9e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810c9ec:	e79d      	b.n	810c92a <_strtod_l+0x9aa>
 810c9ee:	f1ba 0f01 	cmp.w	sl, #1
 810c9f2:	d102      	bne.n	810c9fa <_strtod_l+0xa7a>
 810c9f4:	2f00      	cmp	r7, #0
 810c9f6:	f43f ad83 	beq.w	810c500 <_strtod_l+0x580>
 810c9fa:	4b62      	ldr	r3, [pc, #392]	; (810cb84 <_strtod_l+0xc04>)
 810c9fc:	2200      	movs	r2, #0
 810c9fe:	e78e      	b.n	810c91e <_strtod_l+0x99e>
 810ca00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 810cb80 <_strtod_l+0xc00>
 810ca04:	f04f 0800 	mov.w	r8, #0
 810ca08:	e7e7      	b.n	810c9da <_strtod_l+0xa5a>
 810ca0a:	4b5d      	ldr	r3, [pc, #372]	; (810cb80 <_strtod_l+0xc00>)
 810ca0c:	4640      	mov	r0, r8
 810ca0e:	4649      	mov	r1, r9
 810ca10:	2200      	movs	r2, #0
 810ca12:	f7f3 fe79 	bl	8100708 <__aeabi_dmul>
 810ca16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ca18:	4680      	mov	r8, r0
 810ca1a:	4689      	mov	r9, r1
 810ca1c:	b933      	cbnz	r3, 810ca2c <_strtod_l+0xaac>
 810ca1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810ca22:	900e      	str	r0, [sp, #56]	; 0x38
 810ca24:	930f      	str	r3, [sp, #60]	; 0x3c
 810ca26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 810ca2a:	e7dd      	b.n	810c9e8 <_strtod_l+0xa68>
 810ca2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 810ca30:	e7f9      	b.n	810ca26 <_strtod_l+0xaa6>
 810ca32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810ca36:	9b04      	ldr	r3, [sp, #16]
 810ca38:	2b00      	cmp	r3, #0
 810ca3a:	d1a8      	bne.n	810c98e <_strtod_l+0xa0e>
 810ca3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810ca40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810ca42:	0d1b      	lsrs	r3, r3, #20
 810ca44:	051b      	lsls	r3, r3, #20
 810ca46:	429a      	cmp	r2, r3
 810ca48:	d1a1      	bne.n	810c98e <_strtod_l+0xa0e>
 810ca4a:	4640      	mov	r0, r8
 810ca4c:	4649      	mov	r1, r9
 810ca4e:	f7f4 f9bb 	bl	8100dc8 <__aeabi_d2lz>
 810ca52:	f7f3 fe2b 	bl	81006ac <__aeabi_l2d>
 810ca56:	4602      	mov	r2, r0
 810ca58:	460b      	mov	r3, r1
 810ca5a:	4640      	mov	r0, r8
 810ca5c:	4649      	mov	r1, r9
 810ca5e:	f7f3 fc9b 	bl	8100398 <__aeabi_dsub>
 810ca62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810ca64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810ca68:	ea43 030a 	orr.w	r3, r3, sl
 810ca6c:	4313      	orrs	r3, r2
 810ca6e:	4680      	mov	r8, r0
 810ca70:	4689      	mov	r9, r1
 810ca72:	d055      	beq.n	810cb20 <_strtod_l+0xba0>
 810ca74:	a336      	add	r3, pc, #216	; (adr r3, 810cb50 <_strtod_l+0xbd0>)
 810ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca7a:	f7f4 f8b7 	bl	8100bec <__aeabi_dcmplt>
 810ca7e:	2800      	cmp	r0, #0
 810ca80:	f47f acd0 	bne.w	810c424 <_strtod_l+0x4a4>
 810ca84:	a334      	add	r3, pc, #208	; (adr r3, 810cb58 <_strtod_l+0xbd8>)
 810ca86:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca8a:	4640      	mov	r0, r8
 810ca8c:	4649      	mov	r1, r9
 810ca8e:	f7f4 f8cb 	bl	8100c28 <__aeabi_dcmpgt>
 810ca92:	2800      	cmp	r0, #0
 810ca94:	f43f af7b 	beq.w	810c98e <_strtod_l+0xa0e>
 810ca98:	e4c4      	b.n	810c424 <_strtod_l+0x4a4>
 810ca9a:	9b04      	ldr	r3, [sp, #16]
 810ca9c:	b333      	cbz	r3, 810caec <_strtod_l+0xb6c>
 810ca9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810caa0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810caa4:	d822      	bhi.n	810caec <_strtod_l+0xb6c>
 810caa6:	a32e      	add	r3, pc, #184	; (adr r3, 810cb60 <_strtod_l+0xbe0>)
 810caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810caac:	4640      	mov	r0, r8
 810caae:	4649      	mov	r1, r9
 810cab0:	f7f4 f8a6 	bl	8100c00 <__aeabi_dcmple>
 810cab4:	b1a0      	cbz	r0, 810cae0 <_strtod_l+0xb60>
 810cab6:	4649      	mov	r1, r9
 810cab8:	4640      	mov	r0, r8
 810caba:	f7f4 f8fd 	bl	8100cb8 <__aeabi_d2uiz>
 810cabe:	2801      	cmp	r0, #1
 810cac0:	bf38      	it	cc
 810cac2:	2001      	movcc	r0, #1
 810cac4:	f7f3 fda6 	bl	8100614 <__aeabi_ui2d>
 810cac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810caca:	4680      	mov	r8, r0
 810cacc:	4689      	mov	r9, r1
 810cace:	bb23      	cbnz	r3, 810cb1a <_strtod_l+0xb9a>
 810cad0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810cad4:	9010      	str	r0, [sp, #64]	; 0x40
 810cad6:	9311      	str	r3, [sp, #68]	; 0x44
 810cad8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810cadc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810cae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cae2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810cae4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810cae8:	1a9b      	subs	r3, r3, r2
 810caea:	9309      	str	r3, [sp, #36]	; 0x24
 810caec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810caf0:	eeb0 0a48 	vmov.f32	s0, s16
 810caf4:	eef0 0a68 	vmov.f32	s1, s17
 810caf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810cafc:	f002 f92c 	bl	810ed58 <__ulp>
 810cb00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810cb04:	ec53 2b10 	vmov	r2, r3, d0
 810cb08:	f7f3 fdfe 	bl	8100708 <__aeabi_dmul>
 810cb0c:	ec53 2b18 	vmov	r2, r3, d8
 810cb10:	f7f3 fc44 	bl	810039c <__adddf3>
 810cb14:	4682      	mov	sl, r0
 810cb16:	468b      	mov	fp, r1
 810cb18:	e78d      	b.n	810ca36 <_strtod_l+0xab6>
 810cb1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 810cb1e:	e7db      	b.n	810cad8 <_strtod_l+0xb58>
 810cb20:	a311      	add	r3, pc, #68	; (adr r3, 810cb68 <_strtod_l+0xbe8>)
 810cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cb26:	f7f4 f861 	bl	8100bec <__aeabi_dcmplt>
 810cb2a:	e7b2      	b.n	810ca92 <_strtod_l+0xb12>
 810cb2c:	2300      	movs	r3, #0
 810cb2e:	930a      	str	r3, [sp, #40]	; 0x28
 810cb30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810cb32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810cb34:	6013      	str	r3, [r2, #0]
 810cb36:	f7ff ba6b 	b.w	810c010 <_strtod_l+0x90>
 810cb3a:	2a65      	cmp	r2, #101	; 0x65
 810cb3c:	f43f ab5f 	beq.w	810c1fe <_strtod_l+0x27e>
 810cb40:	2a45      	cmp	r2, #69	; 0x45
 810cb42:	f43f ab5c 	beq.w	810c1fe <_strtod_l+0x27e>
 810cb46:	2301      	movs	r3, #1
 810cb48:	f7ff bb94 	b.w	810c274 <_strtod_l+0x2f4>
 810cb4c:	f3af 8000 	nop.w
 810cb50:	94a03595 	.word	0x94a03595
 810cb54:	3fdfffff 	.word	0x3fdfffff
 810cb58:	35afe535 	.word	0x35afe535
 810cb5c:	3fe00000 	.word	0x3fe00000
 810cb60:	ffc00000 	.word	0xffc00000
 810cb64:	41dfffff 	.word	0x41dfffff
 810cb68:	94a03595 	.word	0x94a03595
 810cb6c:	3fcfffff 	.word	0x3fcfffff
 810cb70:	3ff00000 	.word	0x3ff00000
 810cb74:	7ff00000 	.word	0x7ff00000
 810cb78:	7fe00000 	.word	0x7fe00000
 810cb7c:	7c9fffff 	.word	0x7c9fffff
 810cb80:	3fe00000 	.word	0x3fe00000
 810cb84:	bff00000 	.word	0xbff00000
 810cb88:	7fefffff 	.word	0x7fefffff

0810cb8c <_strtod_r>:
 810cb8c:	4b01      	ldr	r3, [pc, #4]	; (810cb94 <_strtod_r+0x8>)
 810cb8e:	f7ff b9f7 	b.w	810bf80 <_strtod_l>
 810cb92:	bf00      	nop
 810cb94:	10000088 	.word	0x10000088

0810cb98 <_strtol_l.constprop.0>:
 810cb98:	2b01      	cmp	r3, #1
 810cb9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810cb9e:	d001      	beq.n	810cba4 <_strtol_l.constprop.0+0xc>
 810cba0:	2b24      	cmp	r3, #36	; 0x24
 810cba2:	d906      	bls.n	810cbb2 <_strtol_l.constprop.0+0x1a>
 810cba4:	f7fe f968 	bl	810ae78 <__errno>
 810cba8:	2316      	movs	r3, #22
 810cbaa:	6003      	str	r3, [r0, #0]
 810cbac:	2000      	movs	r0, #0
 810cbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cbb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810cc98 <_strtol_l.constprop.0+0x100>
 810cbb6:	460d      	mov	r5, r1
 810cbb8:	462e      	mov	r6, r5
 810cbba:	f815 4b01 	ldrb.w	r4, [r5], #1
 810cbbe:	f814 700c 	ldrb.w	r7, [r4, ip]
 810cbc2:	f017 0708 	ands.w	r7, r7, #8
 810cbc6:	d1f7      	bne.n	810cbb8 <_strtol_l.constprop.0+0x20>
 810cbc8:	2c2d      	cmp	r4, #45	; 0x2d
 810cbca:	d132      	bne.n	810cc32 <_strtol_l.constprop.0+0x9a>
 810cbcc:	782c      	ldrb	r4, [r5, #0]
 810cbce:	2701      	movs	r7, #1
 810cbd0:	1cb5      	adds	r5, r6, #2
 810cbd2:	2b00      	cmp	r3, #0
 810cbd4:	d05b      	beq.n	810cc8e <_strtol_l.constprop.0+0xf6>
 810cbd6:	2b10      	cmp	r3, #16
 810cbd8:	d109      	bne.n	810cbee <_strtol_l.constprop.0+0x56>
 810cbda:	2c30      	cmp	r4, #48	; 0x30
 810cbdc:	d107      	bne.n	810cbee <_strtol_l.constprop.0+0x56>
 810cbde:	782c      	ldrb	r4, [r5, #0]
 810cbe0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810cbe4:	2c58      	cmp	r4, #88	; 0x58
 810cbe6:	d14d      	bne.n	810cc84 <_strtol_l.constprop.0+0xec>
 810cbe8:	786c      	ldrb	r4, [r5, #1]
 810cbea:	2310      	movs	r3, #16
 810cbec:	3502      	adds	r5, #2
 810cbee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810cbf2:	f108 38ff 	add.w	r8, r8, #4294967295
 810cbf6:	f04f 0c00 	mov.w	ip, #0
 810cbfa:	fbb8 f9f3 	udiv	r9, r8, r3
 810cbfe:	4666      	mov	r6, ip
 810cc00:	fb03 8a19 	mls	sl, r3, r9, r8
 810cc04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 810cc08:	f1be 0f09 	cmp.w	lr, #9
 810cc0c:	d816      	bhi.n	810cc3c <_strtol_l.constprop.0+0xa4>
 810cc0e:	4674      	mov	r4, lr
 810cc10:	42a3      	cmp	r3, r4
 810cc12:	dd24      	ble.n	810cc5e <_strtol_l.constprop.0+0xc6>
 810cc14:	f1bc 0f00 	cmp.w	ip, #0
 810cc18:	db1e      	blt.n	810cc58 <_strtol_l.constprop.0+0xc0>
 810cc1a:	45b1      	cmp	r9, r6
 810cc1c:	d31c      	bcc.n	810cc58 <_strtol_l.constprop.0+0xc0>
 810cc1e:	d101      	bne.n	810cc24 <_strtol_l.constprop.0+0x8c>
 810cc20:	45a2      	cmp	sl, r4
 810cc22:	db19      	blt.n	810cc58 <_strtol_l.constprop.0+0xc0>
 810cc24:	fb06 4603 	mla	r6, r6, r3, r4
 810cc28:	f04f 0c01 	mov.w	ip, #1
 810cc2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 810cc30:	e7e8      	b.n	810cc04 <_strtol_l.constprop.0+0x6c>
 810cc32:	2c2b      	cmp	r4, #43	; 0x2b
 810cc34:	bf04      	itt	eq
 810cc36:	782c      	ldrbeq	r4, [r5, #0]
 810cc38:	1cb5      	addeq	r5, r6, #2
 810cc3a:	e7ca      	b.n	810cbd2 <_strtol_l.constprop.0+0x3a>
 810cc3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 810cc40:	f1be 0f19 	cmp.w	lr, #25
 810cc44:	d801      	bhi.n	810cc4a <_strtol_l.constprop.0+0xb2>
 810cc46:	3c37      	subs	r4, #55	; 0x37
 810cc48:	e7e2      	b.n	810cc10 <_strtol_l.constprop.0+0x78>
 810cc4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 810cc4e:	f1be 0f19 	cmp.w	lr, #25
 810cc52:	d804      	bhi.n	810cc5e <_strtol_l.constprop.0+0xc6>
 810cc54:	3c57      	subs	r4, #87	; 0x57
 810cc56:	e7db      	b.n	810cc10 <_strtol_l.constprop.0+0x78>
 810cc58:	f04f 3cff 	mov.w	ip, #4294967295
 810cc5c:	e7e6      	b.n	810cc2c <_strtol_l.constprop.0+0x94>
 810cc5e:	f1bc 0f00 	cmp.w	ip, #0
 810cc62:	da05      	bge.n	810cc70 <_strtol_l.constprop.0+0xd8>
 810cc64:	2322      	movs	r3, #34	; 0x22
 810cc66:	6003      	str	r3, [r0, #0]
 810cc68:	4646      	mov	r6, r8
 810cc6a:	b942      	cbnz	r2, 810cc7e <_strtol_l.constprop.0+0xe6>
 810cc6c:	4630      	mov	r0, r6
 810cc6e:	e79e      	b.n	810cbae <_strtol_l.constprop.0+0x16>
 810cc70:	b107      	cbz	r7, 810cc74 <_strtol_l.constprop.0+0xdc>
 810cc72:	4276      	negs	r6, r6
 810cc74:	2a00      	cmp	r2, #0
 810cc76:	d0f9      	beq.n	810cc6c <_strtol_l.constprop.0+0xd4>
 810cc78:	f1bc 0f00 	cmp.w	ip, #0
 810cc7c:	d000      	beq.n	810cc80 <_strtol_l.constprop.0+0xe8>
 810cc7e:	1e69      	subs	r1, r5, #1
 810cc80:	6011      	str	r1, [r2, #0]
 810cc82:	e7f3      	b.n	810cc6c <_strtol_l.constprop.0+0xd4>
 810cc84:	2430      	movs	r4, #48	; 0x30
 810cc86:	2b00      	cmp	r3, #0
 810cc88:	d1b1      	bne.n	810cbee <_strtol_l.constprop.0+0x56>
 810cc8a:	2308      	movs	r3, #8
 810cc8c:	e7af      	b.n	810cbee <_strtol_l.constprop.0+0x56>
 810cc8e:	2c30      	cmp	r4, #48	; 0x30
 810cc90:	d0a5      	beq.n	810cbde <_strtol_l.constprop.0+0x46>
 810cc92:	230a      	movs	r3, #10
 810cc94:	e7ab      	b.n	810cbee <_strtol_l.constprop.0+0x56>
 810cc96:	bf00      	nop
 810cc98:	0810fc01 	.word	0x0810fc01

0810cc9c <_strtol_r>:
 810cc9c:	f7ff bf7c 	b.w	810cb98 <_strtol_l.constprop.0>

0810cca0 <__swbuf_r>:
 810cca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cca2:	460e      	mov	r6, r1
 810cca4:	4614      	mov	r4, r2
 810cca6:	4605      	mov	r5, r0
 810cca8:	b118      	cbz	r0, 810ccb2 <__swbuf_r+0x12>
 810ccaa:	6983      	ldr	r3, [r0, #24]
 810ccac:	b90b      	cbnz	r3, 810ccb2 <__swbuf_r+0x12>
 810ccae:	f001 f84b 	bl	810dd48 <__sinit>
 810ccb2:	4b21      	ldr	r3, [pc, #132]	; (810cd38 <__swbuf_r+0x98>)
 810ccb4:	429c      	cmp	r4, r3
 810ccb6:	d12b      	bne.n	810cd10 <__swbuf_r+0x70>
 810ccb8:	686c      	ldr	r4, [r5, #4]
 810ccba:	69a3      	ldr	r3, [r4, #24]
 810ccbc:	60a3      	str	r3, [r4, #8]
 810ccbe:	89a3      	ldrh	r3, [r4, #12]
 810ccc0:	071a      	lsls	r2, r3, #28
 810ccc2:	d52f      	bpl.n	810cd24 <__swbuf_r+0x84>
 810ccc4:	6923      	ldr	r3, [r4, #16]
 810ccc6:	b36b      	cbz	r3, 810cd24 <__swbuf_r+0x84>
 810ccc8:	6923      	ldr	r3, [r4, #16]
 810ccca:	6820      	ldr	r0, [r4, #0]
 810cccc:	1ac0      	subs	r0, r0, r3
 810ccce:	6963      	ldr	r3, [r4, #20]
 810ccd0:	b2f6      	uxtb	r6, r6
 810ccd2:	4283      	cmp	r3, r0
 810ccd4:	4637      	mov	r7, r6
 810ccd6:	dc04      	bgt.n	810cce2 <__swbuf_r+0x42>
 810ccd8:	4621      	mov	r1, r4
 810ccda:	4628      	mov	r0, r5
 810ccdc:	f000 ffa0 	bl	810dc20 <_fflush_r>
 810cce0:	bb30      	cbnz	r0, 810cd30 <__swbuf_r+0x90>
 810cce2:	68a3      	ldr	r3, [r4, #8]
 810cce4:	3b01      	subs	r3, #1
 810cce6:	60a3      	str	r3, [r4, #8]
 810cce8:	6823      	ldr	r3, [r4, #0]
 810ccea:	1c5a      	adds	r2, r3, #1
 810ccec:	6022      	str	r2, [r4, #0]
 810ccee:	701e      	strb	r6, [r3, #0]
 810ccf0:	6963      	ldr	r3, [r4, #20]
 810ccf2:	3001      	adds	r0, #1
 810ccf4:	4283      	cmp	r3, r0
 810ccf6:	d004      	beq.n	810cd02 <__swbuf_r+0x62>
 810ccf8:	89a3      	ldrh	r3, [r4, #12]
 810ccfa:	07db      	lsls	r3, r3, #31
 810ccfc:	d506      	bpl.n	810cd0c <__swbuf_r+0x6c>
 810ccfe:	2e0a      	cmp	r6, #10
 810cd00:	d104      	bne.n	810cd0c <__swbuf_r+0x6c>
 810cd02:	4621      	mov	r1, r4
 810cd04:	4628      	mov	r0, r5
 810cd06:	f000 ff8b 	bl	810dc20 <_fflush_r>
 810cd0a:	b988      	cbnz	r0, 810cd30 <__swbuf_r+0x90>
 810cd0c:	4638      	mov	r0, r7
 810cd0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810cd10:	4b0a      	ldr	r3, [pc, #40]	; (810cd3c <__swbuf_r+0x9c>)
 810cd12:	429c      	cmp	r4, r3
 810cd14:	d101      	bne.n	810cd1a <__swbuf_r+0x7a>
 810cd16:	68ac      	ldr	r4, [r5, #8]
 810cd18:	e7cf      	b.n	810ccba <__swbuf_r+0x1a>
 810cd1a:	4b09      	ldr	r3, [pc, #36]	; (810cd40 <__swbuf_r+0xa0>)
 810cd1c:	429c      	cmp	r4, r3
 810cd1e:	bf08      	it	eq
 810cd20:	68ec      	ldreq	r4, [r5, #12]
 810cd22:	e7ca      	b.n	810ccba <__swbuf_r+0x1a>
 810cd24:	4621      	mov	r1, r4
 810cd26:	4628      	mov	r0, r5
 810cd28:	f000 f80c 	bl	810cd44 <__swsetup_r>
 810cd2c:	2800      	cmp	r0, #0
 810cd2e:	d0cb      	beq.n	810ccc8 <__swbuf_r+0x28>
 810cd30:	f04f 37ff 	mov.w	r7, #4294967295
 810cd34:	e7ea      	b.n	810cd0c <__swbuf_r+0x6c>
 810cd36:	bf00      	nop
 810cd38:	0810fdb4 	.word	0x0810fdb4
 810cd3c:	0810fdd4 	.word	0x0810fdd4
 810cd40:	0810fd94 	.word	0x0810fd94

0810cd44 <__swsetup_r>:
 810cd44:	4b32      	ldr	r3, [pc, #200]	; (810ce10 <__swsetup_r+0xcc>)
 810cd46:	b570      	push	{r4, r5, r6, lr}
 810cd48:	681d      	ldr	r5, [r3, #0]
 810cd4a:	4606      	mov	r6, r0
 810cd4c:	460c      	mov	r4, r1
 810cd4e:	b125      	cbz	r5, 810cd5a <__swsetup_r+0x16>
 810cd50:	69ab      	ldr	r3, [r5, #24]
 810cd52:	b913      	cbnz	r3, 810cd5a <__swsetup_r+0x16>
 810cd54:	4628      	mov	r0, r5
 810cd56:	f000 fff7 	bl	810dd48 <__sinit>
 810cd5a:	4b2e      	ldr	r3, [pc, #184]	; (810ce14 <__swsetup_r+0xd0>)
 810cd5c:	429c      	cmp	r4, r3
 810cd5e:	d10f      	bne.n	810cd80 <__swsetup_r+0x3c>
 810cd60:	686c      	ldr	r4, [r5, #4]
 810cd62:	89a3      	ldrh	r3, [r4, #12]
 810cd64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810cd68:	0719      	lsls	r1, r3, #28
 810cd6a:	d42c      	bmi.n	810cdc6 <__swsetup_r+0x82>
 810cd6c:	06dd      	lsls	r5, r3, #27
 810cd6e:	d411      	bmi.n	810cd94 <__swsetup_r+0x50>
 810cd70:	2309      	movs	r3, #9
 810cd72:	6033      	str	r3, [r6, #0]
 810cd74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810cd78:	81a3      	strh	r3, [r4, #12]
 810cd7a:	f04f 30ff 	mov.w	r0, #4294967295
 810cd7e:	e03e      	b.n	810cdfe <__swsetup_r+0xba>
 810cd80:	4b25      	ldr	r3, [pc, #148]	; (810ce18 <__swsetup_r+0xd4>)
 810cd82:	429c      	cmp	r4, r3
 810cd84:	d101      	bne.n	810cd8a <__swsetup_r+0x46>
 810cd86:	68ac      	ldr	r4, [r5, #8]
 810cd88:	e7eb      	b.n	810cd62 <__swsetup_r+0x1e>
 810cd8a:	4b24      	ldr	r3, [pc, #144]	; (810ce1c <__swsetup_r+0xd8>)
 810cd8c:	429c      	cmp	r4, r3
 810cd8e:	bf08      	it	eq
 810cd90:	68ec      	ldreq	r4, [r5, #12]
 810cd92:	e7e6      	b.n	810cd62 <__swsetup_r+0x1e>
 810cd94:	0758      	lsls	r0, r3, #29
 810cd96:	d512      	bpl.n	810cdbe <__swsetup_r+0x7a>
 810cd98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810cd9a:	b141      	cbz	r1, 810cdae <__swsetup_r+0x6a>
 810cd9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810cda0:	4299      	cmp	r1, r3
 810cda2:	d002      	beq.n	810cdaa <__swsetup_r+0x66>
 810cda4:	4630      	mov	r0, r6
 810cda6:	f7fe f8af 	bl	810af08 <_free_r>
 810cdaa:	2300      	movs	r3, #0
 810cdac:	6363      	str	r3, [r4, #52]	; 0x34
 810cdae:	89a3      	ldrh	r3, [r4, #12]
 810cdb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810cdb4:	81a3      	strh	r3, [r4, #12]
 810cdb6:	2300      	movs	r3, #0
 810cdb8:	6063      	str	r3, [r4, #4]
 810cdba:	6923      	ldr	r3, [r4, #16]
 810cdbc:	6023      	str	r3, [r4, #0]
 810cdbe:	89a3      	ldrh	r3, [r4, #12]
 810cdc0:	f043 0308 	orr.w	r3, r3, #8
 810cdc4:	81a3      	strh	r3, [r4, #12]
 810cdc6:	6923      	ldr	r3, [r4, #16]
 810cdc8:	b94b      	cbnz	r3, 810cdde <__swsetup_r+0x9a>
 810cdca:	89a3      	ldrh	r3, [r4, #12]
 810cdcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810cdd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810cdd4:	d003      	beq.n	810cdde <__swsetup_r+0x9a>
 810cdd6:	4621      	mov	r1, r4
 810cdd8:	4630      	mov	r0, r6
 810cdda:	f001 fbed 	bl	810e5b8 <__smakebuf_r>
 810cdde:	89a0      	ldrh	r0, [r4, #12]
 810cde0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810cde4:	f010 0301 	ands.w	r3, r0, #1
 810cde8:	d00a      	beq.n	810ce00 <__swsetup_r+0xbc>
 810cdea:	2300      	movs	r3, #0
 810cdec:	60a3      	str	r3, [r4, #8]
 810cdee:	6963      	ldr	r3, [r4, #20]
 810cdf0:	425b      	negs	r3, r3
 810cdf2:	61a3      	str	r3, [r4, #24]
 810cdf4:	6923      	ldr	r3, [r4, #16]
 810cdf6:	b943      	cbnz	r3, 810ce0a <__swsetup_r+0xc6>
 810cdf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810cdfc:	d1ba      	bne.n	810cd74 <__swsetup_r+0x30>
 810cdfe:	bd70      	pop	{r4, r5, r6, pc}
 810ce00:	0781      	lsls	r1, r0, #30
 810ce02:	bf58      	it	pl
 810ce04:	6963      	ldrpl	r3, [r4, #20]
 810ce06:	60a3      	str	r3, [r4, #8]
 810ce08:	e7f4      	b.n	810cdf4 <__swsetup_r+0xb0>
 810ce0a:	2000      	movs	r0, #0
 810ce0c:	e7f7      	b.n	810cdfe <__swsetup_r+0xba>
 810ce0e:	bf00      	nop
 810ce10:	10000020 	.word	0x10000020
 810ce14:	0810fdb4 	.word	0x0810fdb4
 810ce18:	0810fdd4 	.word	0x0810fdd4
 810ce1c:	0810fd94 	.word	0x0810fd94

0810ce20 <quorem>:
 810ce20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ce24:	6903      	ldr	r3, [r0, #16]
 810ce26:	690c      	ldr	r4, [r1, #16]
 810ce28:	42a3      	cmp	r3, r4
 810ce2a:	4607      	mov	r7, r0
 810ce2c:	f2c0 8081 	blt.w	810cf32 <quorem+0x112>
 810ce30:	3c01      	subs	r4, #1
 810ce32:	f101 0814 	add.w	r8, r1, #20
 810ce36:	f100 0514 	add.w	r5, r0, #20
 810ce3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ce3e:	9301      	str	r3, [sp, #4]
 810ce40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810ce44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ce48:	3301      	adds	r3, #1
 810ce4a:	429a      	cmp	r2, r3
 810ce4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810ce50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810ce54:	fbb2 f6f3 	udiv	r6, r2, r3
 810ce58:	d331      	bcc.n	810cebe <quorem+0x9e>
 810ce5a:	f04f 0e00 	mov.w	lr, #0
 810ce5e:	4640      	mov	r0, r8
 810ce60:	46ac      	mov	ip, r5
 810ce62:	46f2      	mov	sl, lr
 810ce64:	f850 2b04 	ldr.w	r2, [r0], #4
 810ce68:	b293      	uxth	r3, r2
 810ce6a:	fb06 e303 	mla	r3, r6, r3, lr
 810ce6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810ce72:	b29b      	uxth	r3, r3
 810ce74:	ebaa 0303 	sub.w	r3, sl, r3
 810ce78:	f8dc a000 	ldr.w	sl, [ip]
 810ce7c:	0c12      	lsrs	r2, r2, #16
 810ce7e:	fa13 f38a 	uxtah	r3, r3, sl
 810ce82:	fb06 e202 	mla	r2, r6, r2, lr
 810ce86:	9300      	str	r3, [sp, #0]
 810ce88:	9b00      	ldr	r3, [sp, #0]
 810ce8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810ce8e:	b292      	uxth	r2, r2
 810ce90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810ce94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ce98:	f8bd 3000 	ldrh.w	r3, [sp]
 810ce9c:	4581      	cmp	r9, r0
 810ce9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810cea2:	f84c 3b04 	str.w	r3, [ip], #4
 810cea6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810ceaa:	d2db      	bcs.n	810ce64 <quorem+0x44>
 810ceac:	f855 300b 	ldr.w	r3, [r5, fp]
 810ceb0:	b92b      	cbnz	r3, 810cebe <quorem+0x9e>
 810ceb2:	9b01      	ldr	r3, [sp, #4]
 810ceb4:	3b04      	subs	r3, #4
 810ceb6:	429d      	cmp	r5, r3
 810ceb8:	461a      	mov	r2, r3
 810ceba:	d32e      	bcc.n	810cf1a <quorem+0xfa>
 810cebc:	613c      	str	r4, [r7, #16]
 810cebe:	4638      	mov	r0, r7
 810cec0:	f001 fea4 	bl	810ec0c <__mcmp>
 810cec4:	2800      	cmp	r0, #0
 810cec6:	db24      	blt.n	810cf12 <quorem+0xf2>
 810cec8:	3601      	adds	r6, #1
 810ceca:	4628      	mov	r0, r5
 810cecc:	f04f 0c00 	mov.w	ip, #0
 810ced0:	f858 2b04 	ldr.w	r2, [r8], #4
 810ced4:	f8d0 e000 	ldr.w	lr, [r0]
 810ced8:	b293      	uxth	r3, r2
 810ceda:	ebac 0303 	sub.w	r3, ip, r3
 810cede:	0c12      	lsrs	r2, r2, #16
 810cee0:	fa13 f38e 	uxtah	r3, r3, lr
 810cee4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810cee8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ceec:	b29b      	uxth	r3, r3
 810ceee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810cef2:	45c1      	cmp	r9, r8
 810cef4:	f840 3b04 	str.w	r3, [r0], #4
 810cef8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810cefc:	d2e8      	bcs.n	810ced0 <quorem+0xb0>
 810cefe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810cf02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810cf06:	b922      	cbnz	r2, 810cf12 <quorem+0xf2>
 810cf08:	3b04      	subs	r3, #4
 810cf0a:	429d      	cmp	r5, r3
 810cf0c:	461a      	mov	r2, r3
 810cf0e:	d30a      	bcc.n	810cf26 <quorem+0x106>
 810cf10:	613c      	str	r4, [r7, #16]
 810cf12:	4630      	mov	r0, r6
 810cf14:	b003      	add	sp, #12
 810cf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cf1a:	6812      	ldr	r2, [r2, #0]
 810cf1c:	3b04      	subs	r3, #4
 810cf1e:	2a00      	cmp	r2, #0
 810cf20:	d1cc      	bne.n	810cebc <quorem+0x9c>
 810cf22:	3c01      	subs	r4, #1
 810cf24:	e7c7      	b.n	810ceb6 <quorem+0x96>
 810cf26:	6812      	ldr	r2, [r2, #0]
 810cf28:	3b04      	subs	r3, #4
 810cf2a:	2a00      	cmp	r2, #0
 810cf2c:	d1f0      	bne.n	810cf10 <quorem+0xf0>
 810cf2e:	3c01      	subs	r4, #1
 810cf30:	e7eb      	b.n	810cf0a <quorem+0xea>
 810cf32:	2000      	movs	r0, #0
 810cf34:	e7ee      	b.n	810cf14 <quorem+0xf4>
	...

0810cf38 <_dtoa_r>:
 810cf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cf3c:	ed2d 8b04 	vpush	{d8-d9}
 810cf40:	ec57 6b10 	vmov	r6, r7, d0
 810cf44:	b093      	sub	sp, #76	; 0x4c
 810cf46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810cf48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810cf4c:	9106      	str	r1, [sp, #24]
 810cf4e:	ee10 aa10 	vmov	sl, s0
 810cf52:	4604      	mov	r4, r0
 810cf54:	9209      	str	r2, [sp, #36]	; 0x24
 810cf56:	930c      	str	r3, [sp, #48]	; 0x30
 810cf58:	46bb      	mov	fp, r7
 810cf5a:	b975      	cbnz	r5, 810cf7a <_dtoa_r+0x42>
 810cf5c:	2010      	movs	r0, #16
 810cf5e:	f7fd ffb5 	bl	810aecc <malloc>
 810cf62:	4602      	mov	r2, r0
 810cf64:	6260      	str	r0, [r4, #36]	; 0x24
 810cf66:	b920      	cbnz	r0, 810cf72 <_dtoa_r+0x3a>
 810cf68:	4ba7      	ldr	r3, [pc, #668]	; (810d208 <_dtoa_r+0x2d0>)
 810cf6a:	21ea      	movs	r1, #234	; 0xea
 810cf6c:	48a7      	ldr	r0, [pc, #668]	; (810d20c <_dtoa_r+0x2d4>)
 810cf6e:	f002 fb8d 	bl	810f68c <__assert_func>
 810cf72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810cf76:	6005      	str	r5, [r0, #0]
 810cf78:	60c5      	str	r5, [r0, #12]
 810cf7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810cf7c:	6819      	ldr	r1, [r3, #0]
 810cf7e:	b151      	cbz	r1, 810cf96 <_dtoa_r+0x5e>
 810cf80:	685a      	ldr	r2, [r3, #4]
 810cf82:	604a      	str	r2, [r1, #4]
 810cf84:	2301      	movs	r3, #1
 810cf86:	4093      	lsls	r3, r2
 810cf88:	608b      	str	r3, [r1, #8]
 810cf8a:	4620      	mov	r0, r4
 810cf8c:	f001 fbb2 	bl	810e6f4 <_Bfree>
 810cf90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810cf92:	2200      	movs	r2, #0
 810cf94:	601a      	str	r2, [r3, #0]
 810cf96:	1e3b      	subs	r3, r7, #0
 810cf98:	bfaa      	itet	ge
 810cf9a:	2300      	movge	r3, #0
 810cf9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 810cfa0:	f8c8 3000 	strge.w	r3, [r8]
 810cfa4:	4b9a      	ldr	r3, [pc, #616]	; (810d210 <_dtoa_r+0x2d8>)
 810cfa6:	bfbc      	itt	lt
 810cfa8:	2201      	movlt	r2, #1
 810cfaa:	f8c8 2000 	strlt.w	r2, [r8]
 810cfae:	ea33 030b 	bics.w	r3, r3, fp
 810cfb2:	d11b      	bne.n	810cfec <_dtoa_r+0xb4>
 810cfb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810cfb6:	f242 730f 	movw	r3, #9999	; 0x270f
 810cfba:	6013      	str	r3, [r2, #0]
 810cfbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810cfc0:	4333      	orrs	r3, r6
 810cfc2:	f000 8592 	beq.w	810daea <_dtoa_r+0xbb2>
 810cfc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810cfc8:	b963      	cbnz	r3, 810cfe4 <_dtoa_r+0xac>
 810cfca:	4b92      	ldr	r3, [pc, #584]	; (810d214 <_dtoa_r+0x2dc>)
 810cfcc:	e022      	b.n	810d014 <_dtoa_r+0xdc>
 810cfce:	4b92      	ldr	r3, [pc, #584]	; (810d218 <_dtoa_r+0x2e0>)
 810cfd0:	9301      	str	r3, [sp, #4]
 810cfd2:	3308      	adds	r3, #8
 810cfd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810cfd6:	6013      	str	r3, [r2, #0]
 810cfd8:	9801      	ldr	r0, [sp, #4]
 810cfda:	b013      	add	sp, #76	; 0x4c
 810cfdc:	ecbd 8b04 	vpop	{d8-d9}
 810cfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cfe4:	4b8b      	ldr	r3, [pc, #556]	; (810d214 <_dtoa_r+0x2dc>)
 810cfe6:	9301      	str	r3, [sp, #4]
 810cfe8:	3303      	adds	r3, #3
 810cfea:	e7f3      	b.n	810cfd4 <_dtoa_r+0x9c>
 810cfec:	2200      	movs	r2, #0
 810cfee:	2300      	movs	r3, #0
 810cff0:	4650      	mov	r0, sl
 810cff2:	4659      	mov	r1, fp
 810cff4:	f7f3 fdf0 	bl	8100bd8 <__aeabi_dcmpeq>
 810cff8:	ec4b ab19 	vmov	d9, sl, fp
 810cffc:	4680      	mov	r8, r0
 810cffe:	b158      	cbz	r0, 810d018 <_dtoa_r+0xe0>
 810d000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810d002:	2301      	movs	r3, #1
 810d004:	6013      	str	r3, [r2, #0]
 810d006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810d008:	2b00      	cmp	r3, #0
 810d00a:	f000 856b 	beq.w	810dae4 <_dtoa_r+0xbac>
 810d00e:	4883      	ldr	r0, [pc, #524]	; (810d21c <_dtoa_r+0x2e4>)
 810d010:	6018      	str	r0, [r3, #0]
 810d012:	1e43      	subs	r3, r0, #1
 810d014:	9301      	str	r3, [sp, #4]
 810d016:	e7df      	b.n	810cfd8 <_dtoa_r+0xa0>
 810d018:	ec4b ab10 	vmov	d0, sl, fp
 810d01c:	aa10      	add	r2, sp, #64	; 0x40
 810d01e:	a911      	add	r1, sp, #68	; 0x44
 810d020:	4620      	mov	r0, r4
 810d022:	f001 ff15 	bl	810ee50 <__d2b>
 810d026:	f3cb 550a 	ubfx	r5, fp, #20, #11
 810d02a:	ee08 0a10 	vmov	s16, r0
 810d02e:	2d00      	cmp	r5, #0
 810d030:	f000 8084 	beq.w	810d13c <_dtoa_r+0x204>
 810d034:	ee19 3a90 	vmov	r3, s19
 810d038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810d03c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810d040:	4656      	mov	r6, sl
 810d042:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810d046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810d04a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 810d04e:	4b74      	ldr	r3, [pc, #464]	; (810d220 <_dtoa_r+0x2e8>)
 810d050:	2200      	movs	r2, #0
 810d052:	4630      	mov	r0, r6
 810d054:	4639      	mov	r1, r7
 810d056:	f7f3 f99f 	bl	8100398 <__aeabi_dsub>
 810d05a:	a365      	add	r3, pc, #404	; (adr r3, 810d1f0 <_dtoa_r+0x2b8>)
 810d05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d060:	f7f3 fb52 	bl	8100708 <__aeabi_dmul>
 810d064:	a364      	add	r3, pc, #400	; (adr r3, 810d1f8 <_dtoa_r+0x2c0>)
 810d066:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d06a:	f7f3 f997 	bl	810039c <__adddf3>
 810d06e:	4606      	mov	r6, r0
 810d070:	4628      	mov	r0, r5
 810d072:	460f      	mov	r7, r1
 810d074:	f7f3 fade 	bl	8100634 <__aeabi_i2d>
 810d078:	a361      	add	r3, pc, #388	; (adr r3, 810d200 <_dtoa_r+0x2c8>)
 810d07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d07e:	f7f3 fb43 	bl	8100708 <__aeabi_dmul>
 810d082:	4602      	mov	r2, r0
 810d084:	460b      	mov	r3, r1
 810d086:	4630      	mov	r0, r6
 810d088:	4639      	mov	r1, r7
 810d08a:	f7f3 f987 	bl	810039c <__adddf3>
 810d08e:	4606      	mov	r6, r0
 810d090:	460f      	mov	r7, r1
 810d092:	f7f3 fde9 	bl	8100c68 <__aeabi_d2iz>
 810d096:	2200      	movs	r2, #0
 810d098:	9000      	str	r0, [sp, #0]
 810d09a:	2300      	movs	r3, #0
 810d09c:	4630      	mov	r0, r6
 810d09e:	4639      	mov	r1, r7
 810d0a0:	f7f3 fda4 	bl	8100bec <__aeabi_dcmplt>
 810d0a4:	b150      	cbz	r0, 810d0bc <_dtoa_r+0x184>
 810d0a6:	9800      	ldr	r0, [sp, #0]
 810d0a8:	f7f3 fac4 	bl	8100634 <__aeabi_i2d>
 810d0ac:	4632      	mov	r2, r6
 810d0ae:	463b      	mov	r3, r7
 810d0b0:	f7f3 fd92 	bl	8100bd8 <__aeabi_dcmpeq>
 810d0b4:	b910      	cbnz	r0, 810d0bc <_dtoa_r+0x184>
 810d0b6:	9b00      	ldr	r3, [sp, #0]
 810d0b8:	3b01      	subs	r3, #1
 810d0ba:	9300      	str	r3, [sp, #0]
 810d0bc:	9b00      	ldr	r3, [sp, #0]
 810d0be:	2b16      	cmp	r3, #22
 810d0c0:	d85a      	bhi.n	810d178 <_dtoa_r+0x240>
 810d0c2:	9a00      	ldr	r2, [sp, #0]
 810d0c4:	4b57      	ldr	r3, [pc, #348]	; (810d224 <_dtoa_r+0x2ec>)
 810d0c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0ce:	ec51 0b19 	vmov	r0, r1, d9
 810d0d2:	f7f3 fd8b 	bl	8100bec <__aeabi_dcmplt>
 810d0d6:	2800      	cmp	r0, #0
 810d0d8:	d050      	beq.n	810d17c <_dtoa_r+0x244>
 810d0da:	9b00      	ldr	r3, [sp, #0]
 810d0dc:	3b01      	subs	r3, #1
 810d0de:	9300      	str	r3, [sp, #0]
 810d0e0:	2300      	movs	r3, #0
 810d0e2:	930b      	str	r3, [sp, #44]	; 0x2c
 810d0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810d0e6:	1b5d      	subs	r5, r3, r5
 810d0e8:	1e6b      	subs	r3, r5, #1
 810d0ea:	9305      	str	r3, [sp, #20]
 810d0ec:	bf45      	ittet	mi
 810d0ee:	f1c5 0301 	rsbmi	r3, r5, #1
 810d0f2:	9304      	strmi	r3, [sp, #16]
 810d0f4:	2300      	movpl	r3, #0
 810d0f6:	2300      	movmi	r3, #0
 810d0f8:	bf4c      	ite	mi
 810d0fa:	9305      	strmi	r3, [sp, #20]
 810d0fc:	9304      	strpl	r3, [sp, #16]
 810d0fe:	9b00      	ldr	r3, [sp, #0]
 810d100:	2b00      	cmp	r3, #0
 810d102:	db3d      	blt.n	810d180 <_dtoa_r+0x248>
 810d104:	9b05      	ldr	r3, [sp, #20]
 810d106:	9a00      	ldr	r2, [sp, #0]
 810d108:	920a      	str	r2, [sp, #40]	; 0x28
 810d10a:	4413      	add	r3, r2
 810d10c:	9305      	str	r3, [sp, #20]
 810d10e:	2300      	movs	r3, #0
 810d110:	9307      	str	r3, [sp, #28]
 810d112:	9b06      	ldr	r3, [sp, #24]
 810d114:	2b09      	cmp	r3, #9
 810d116:	f200 8089 	bhi.w	810d22c <_dtoa_r+0x2f4>
 810d11a:	2b05      	cmp	r3, #5
 810d11c:	bfc4      	itt	gt
 810d11e:	3b04      	subgt	r3, #4
 810d120:	9306      	strgt	r3, [sp, #24]
 810d122:	9b06      	ldr	r3, [sp, #24]
 810d124:	f1a3 0302 	sub.w	r3, r3, #2
 810d128:	bfcc      	ite	gt
 810d12a:	2500      	movgt	r5, #0
 810d12c:	2501      	movle	r5, #1
 810d12e:	2b03      	cmp	r3, #3
 810d130:	f200 8087 	bhi.w	810d242 <_dtoa_r+0x30a>
 810d134:	e8df f003 	tbb	[pc, r3]
 810d138:	59383a2d 	.word	0x59383a2d
 810d13c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810d140:	441d      	add	r5, r3
 810d142:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810d146:	2b20      	cmp	r3, #32
 810d148:	bfc1      	itttt	gt
 810d14a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810d14e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810d152:	fa0b f303 	lslgt.w	r3, fp, r3
 810d156:	fa26 f000 	lsrgt.w	r0, r6, r0
 810d15a:	bfda      	itte	le
 810d15c:	f1c3 0320 	rsble	r3, r3, #32
 810d160:	fa06 f003 	lslle.w	r0, r6, r3
 810d164:	4318      	orrgt	r0, r3
 810d166:	f7f3 fa55 	bl	8100614 <__aeabi_ui2d>
 810d16a:	2301      	movs	r3, #1
 810d16c:	4606      	mov	r6, r0
 810d16e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810d172:	3d01      	subs	r5, #1
 810d174:	930e      	str	r3, [sp, #56]	; 0x38
 810d176:	e76a      	b.n	810d04e <_dtoa_r+0x116>
 810d178:	2301      	movs	r3, #1
 810d17a:	e7b2      	b.n	810d0e2 <_dtoa_r+0x1aa>
 810d17c:	900b      	str	r0, [sp, #44]	; 0x2c
 810d17e:	e7b1      	b.n	810d0e4 <_dtoa_r+0x1ac>
 810d180:	9b04      	ldr	r3, [sp, #16]
 810d182:	9a00      	ldr	r2, [sp, #0]
 810d184:	1a9b      	subs	r3, r3, r2
 810d186:	9304      	str	r3, [sp, #16]
 810d188:	4253      	negs	r3, r2
 810d18a:	9307      	str	r3, [sp, #28]
 810d18c:	2300      	movs	r3, #0
 810d18e:	930a      	str	r3, [sp, #40]	; 0x28
 810d190:	e7bf      	b.n	810d112 <_dtoa_r+0x1da>
 810d192:	2300      	movs	r3, #0
 810d194:	9308      	str	r3, [sp, #32]
 810d196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d198:	2b00      	cmp	r3, #0
 810d19a:	dc55      	bgt.n	810d248 <_dtoa_r+0x310>
 810d19c:	2301      	movs	r3, #1
 810d19e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810d1a2:	461a      	mov	r2, r3
 810d1a4:	9209      	str	r2, [sp, #36]	; 0x24
 810d1a6:	e00c      	b.n	810d1c2 <_dtoa_r+0x28a>
 810d1a8:	2301      	movs	r3, #1
 810d1aa:	e7f3      	b.n	810d194 <_dtoa_r+0x25c>
 810d1ac:	2300      	movs	r3, #0
 810d1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d1b0:	9308      	str	r3, [sp, #32]
 810d1b2:	9b00      	ldr	r3, [sp, #0]
 810d1b4:	4413      	add	r3, r2
 810d1b6:	9302      	str	r3, [sp, #8]
 810d1b8:	3301      	adds	r3, #1
 810d1ba:	2b01      	cmp	r3, #1
 810d1bc:	9303      	str	r3, [sp, #12]
 810d1be:	bfb8      	it	lt
 810d1c0:	2301      	movlt	r3, #1
 810d1c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810d1c4:	2200      	movs	r2, #0
 810d1c6:	6042      	str	r2, [r0, #4]
 810d1c8:	2204      	movs	r2, #4
 810d1ca:	f102 0614 	add.w	r6, r2, #20
 810d1ce:	429e      	cmp	r6, r3
 810d1d0:	6841      	ldr	r1, [r0, #4]
 810d1d2:	d93d      	bls.n	810d250 <_dtoa_r+0x318>
 810d1d4:	4620      	mov	r0, r4
 810d1d6:	f001 fa4d 	bl	810e674 <_Balloc>
 810d1da:	9001      	str	r0, [sp, #4]
 810d1dc:	2800      	cmp	r0, #0
 810d1de:	d13b      	bne.n	810d258 <_dtoa_r+0x320>
 810d1e0:	4b11      	ldr	r3, [pc, #68]	; (810d228 <_dtoa_r+0x2f0>)
 810d1e2:	4602      	mov	r2, r0
 810d1e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810d1e8:	e6c0      	b.n	810cf6c <_dtoa_r+0x34>
 810d1ea:	2301      	movs	r3, #1
 810d1ec:	e7df      	b.n	810d1ae <_dtoa_r+0x276>
 810d1ee:	bf00      	nop
 810d1f0:	636f4361 	.word	0x636f4361
 810d1f4:	3fd287a7 	.word	0x3fd287a7
 810d1f8:	8b60c8b3 	.word	0x8b60c8b3
 810d1fc:	3fc68a28 	.word	0x3fc68a28
 810d200:	509f79fb 	.word	0x509f79fb
 810d204:	3fd34413 	.word	0x3fd34413
 810d208:	0810fd0e 	.word	0x0810fd0e
 810d20c:	0810fd25 	.word	0x0810fd25
 810d210:	7ff00000 	.word	0x7ff00000
 810d214:	0810fd0a 	.word	0x0810fd0a
 810d218:	0810fd01 	.word	0x0810fd01
 810d21c:	0810fb85 	.word	0x0810fb85
 810d220:	3ff80000 	.word	0x3ff80000
 810d224:	0810fef8 	.word	0x0810fef8
 810d228:	0810fd80 	.word	0x0810fd80
 810d22c:	2501      	movs	r5, #1
 810d22e:	2300      	movs	r3, #0
 810d230:	9306      	str	r3, [sp, #24]
 810d232:	9508      	str	r5, [sp, #32]
 810d234:	f04f 33ff 	mov.w	r3, #4294967295
 810d238:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810d23c:	2200      	movs	r2, #0
 810d23e:	2312      	movs	r3, #18
 810d240:	e7b0      	b.n	810d1a4 <_dtoa_r+0x26c>
 810d242:	2301      	movs	r3, #1
 810d244:	9308      	str	r3, [sp, #32]
 810d246:	e7f5      	b.n	810d234 <_dtoa_r+0x2fc>
 810d248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d24a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810d24e:	e7b8      	b.n	810d1c2 <_dtoa_r+0x28a>
 810d250:	3101      	adds	r1, #1
 810d252:	6041      	str	r1, [r0, #4]
 810d254:	0052      	lsls	r2, r2, #1
 810d256:	e7b8      	b.n	810d1ca <_dtoa_r+0x292>
 810d258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810d25a:	9a01      	ldr	r2, [sp, #4]
 810d25c:	601a      	str	r2, [r3, #0]
 810d25e:	9b03      	ldr	r3, [sp, #12]
 810d260:	2b0e      	cmp	r3, #14
 810d262:	f200 809d 	bhi.w	810d3a0 <_dtoa_r+0x468>
 810d266:	2d00      	cmp	r5, #0
 810d268:	f000 809a 	beq.w	810d3a0 <_dtoa_r+0x468>
 810d26c:	9b00      	ldr	r3, [sp, #0]
 810d26e:	2b00      	cmp	r3, #0
 810d270:	dd32      	ble.n	810d2d8 <_dtoa_r+0x3a0>
 810d272:	4ab7      	ldr	r2, [pc, #732]	; (810d550 <_dtoa_r+0x618>)
 810d274:	f003 030f 	and.w	r3, r3, #15
 810d278:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810d27c:	e9d3 8900 	ldrd	r8, r9, [r3]
 810d280:	9b00      	ldr	r3, [sp, #0]
 810d282:	05d8      	lsls	r0, r3, #23
 810d284:	ea4f 1723 	mov.w	r7, r3, asr #4
 810d288:	d516      	bpl.n	810d2b8 <_dtoa_r+0x380>
 810d28a:	4bb2      	ldr	r3, [pc, #712]	; (810d554 <_dtoa_r+0x61c>)
 810d28c:	ec51 0b19 	vmov	r0, r1, d9
 810d290:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810d294:	f7f3 fb62 	bl	810095c <__aeabi_ddiv>
 810d298:	f007 070f 	and.w	r7, r7, #15
 810d29c:	4682      	mov	sl, r0
 810d29e:	468b      	mov	fp, r1
 810d2a0:	2503      	movs	r5, #3
 810d2a2:	4eac      	ldr	r6, [pc, #688]	; (810d554 <_dtoa_r+0x61c>)
 810d2a4:	b957      	cbnz	r7, 810d2bc <_dtoa_r+0x384>
 810d2a6:	4642      	mov	r2, r8
 810d2a8:	464b      	mov	r3, r9
 810d2aa:	4650      	mov	r0, sl
 810d2ac:	4659      	mov	r1, fp
 810d2ae:	f7f3 fb55 	bl	810095c <__aeabi_ddiv>
 810d2b2:	4682      	mov	sl, r0
 810d2b4:	468b      	mov	fp, r1
 810d2b6:	e028      	b.n	810d30a <_dtoa_r+0x3d2>
 810d2b8:	2502      	movs	r5, #2
 810d2ba:	e7f2      	b.n	810d2a2 <_dtoa_r+0x36a>
 810d2bc:	07f9      	lsls	r1, r7, #31
 810d2be:	d508      	bpl.n	810d2d2 <_dtoa_r+0x39a>
 810d2c0:	4640      	mov	r0, r8
 810d2c2:	4649      	mov	r1, r9
 810d2c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 810d2c8:	f7f3 fa1e 	bl	8100708 <__aeabi_dmul>
 810d2cc:	3501      	adds	r5, #1
 810d2ce:	4680      	mov	r8, r0
 810d2d0:	4689      	mov	r9, r1
 810d2d2:	107f      	asrs	r7, r7, #1
 810d2d4:	3608      	adds	r6, #8
 810d2d6:	e7e5      	b.n	810d2a4 <_dtoa_r+0x36c>
 810d2d8:	f000 809b 	beq.w	810d412 <_dtoa_r+0x4da>
 810d2dc:	9b00      	ldr	r3, [sp, #0]
 810d2de:	4f9d      	ldr	r7, [pc, #628]	; (810d554 <_dtoa_r+0x61c>)
 810d2e0:	425e      	negs	r6, r3
 810d2e2:	4b9b      	ldr	r3, [pc, #620]	; (810d550 <_dtoa_r+0x618>)
 810d2e4:	f006 020f 	and.w	r2, r6, #15
 810d2e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d2f0:	ec51 0b19 	vmov	r0, r1, d9
 810d2f4:	f7f3 fa08 	bl	8100708 <__aeabi_dmul>
 810d2f8:	1136      	asrs	r6, r6, #4
 810d2fa:	4682      	mov	sl, r0
 810d2fc:	468b      	mov	fp, r1
 810d2fe:	2300      	movs	r3, #0
 810d300:	2502      	movs	r5, #2
 810d302:	2e00      	cmp	r6, #0
 810d304:	d17a      	bne.n	810d3fc <_dtoa_r+0x4c4>
 810d306:	2b00      	cmp	r3, #0
 810d308:	d1d3      	bne.n	810d2b2 <_dtoa_r+0x37a>
 810d30a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d30c:	2b00      	cmp	r3, #0
 810d30e:	f000 8082 	beq.w	810d416 <_dtoa_r+0x4de>
 810d312:	4b91      	ldr	r3, [pc, #580]	; (810d558 <_dtoa_r+0x620>)
 810d314:	2200      	movs	r2, #0
 810d316:	4650      	mov	r0, sl
 810d318:	4659      	mov	r1, fp
 810d31a:	f7f3 fc67 	bl	8100bec <__aeabi_dcmplt>
 810d31e:	2800      	cmp	r0, #0
 810d320:	d079      	beq.n	810d416 <_dtoa_r+0x4de>
 810d322:	9b03      	ldr	r3, [sp, #12]
 810d324:	2b00      	cmp	r3, #0
 810d326:	d076      	beq.n	810d416 <_dtoa_r+0x4de>
 810d328:	9b02      	ldr	r3, [sp, #8]
 810d32a:	2b00      	cmp	r3, #0
 810d32c:	dd36      	ble.n	810d39c <_dtoa_r+0x464>
 810d32e:	9b00      	ldr	r3, [sp, #0]
 810d330:	4650      	mov	r0, sl
 810d332:	4659      	mov	r1, fp
 810d334:	1e5f      	subs	r7, r3, #1
 810d336:	2200      	movs	r2, #0
 810d338:	4b88      	ldr	r3, [pc, #544]	; (810d55c <_dtoa_r+0x624>)
 810d33a:	f7f3 f9e5 	bl	8100708 <__aeabi_dmul>
 810d33e:	9e02      	ldr	r6, [sp, #8]
 810d340:	4682      	mov	sl, r0
 810d342:	468b      	mov	fp, r1
 810d344:	3501      	adds	r5, #1
 810d346:	4628      	mov	r0, r5
 810d348:	f7f3 f974 	bl	8100634 <__aeabi_i2d>
 810d34c:	4652      	mov	r2, sl
 810d34e:	465b      	mov	r3, fp
 810d350:	f7f3 f9da 	bl	8100708 <__aeabi_dmul>
 810d354:	4b82      	ldr	r3, [pc, #520]	; (810d560 <_dtoa_r+0x628>)
 810d356:	2200      	movs	r2, #0
 810d358:	f7f3 f820 	bl	810039c <__adddf3>
 810d35c:	46d0      	mov	r8, sl
 810d35e:	46d9      	mov	r9, fp
 810d360:	4682      	mov	sl, r0
 810d362:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 810d366:	2e00      	cmp	r6, #0
 810d368:	d158      	bne.n	810d41c <_dtoa_r+0x4e4>
 810d36a:	4b7e      	ldr	r3, [pc, #504]	; (810d564 <_dtoa_r+0x62c>)
 810d36c:	2200      	movs	r2, #0
 810d36e:	4640      	mov	r0, r8
 810d370:	4649      	mov	r1, r9
 810d372:	f7f3 f811 	bl	8100398 <__aeabi_dsub>
 810d376:	4652      	mov	r2, sl
 810d378:	465b      	mov	r3, fp
 810d37a:	4680      	mov	r8, r0
 810d37c:	4689      	mov	r9, r1
 810d37e:	f7f3 fc53 	bl	8100c28 <__aeabi_dcmpgt>
 810d382:	2800      	cmp	r0, #0
 810d384:	f040 8295 	bne.w	810d8b2 <_dtoa_r+0x97a>
 810d388:	4652      	mov	r2, sl
 810d38a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810d38e:	4640      	mov	r0, r8
 810d390:	4649      	mov	r1, r9
 810d392:	f7f3 fc2b 	bl	8100bec <__aeabi_dcmplt>
 810d396:	2800      	cmp	r0, #0
 810d398:	f040 8289 	bne.w	810d8ae <_dtoa_r+0x976>
 810d39c:	ec5b ab19 	vmov	sl, fp, d9
 810d3a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810d3a2:	2b00      	cmp	r3, #0
 810d3a4:	f2c0 8148 	blt.w	810d638 <_dtoa_r+0x700>
 810d3a8:	9a00      	ldr	r2, [sp, #0]
 810d3aa:	2a0e      	cmp	r2, #14
 810d3ac:	f300 8144 	bgt.w	810d638 <_dtoa_r+0x700>
 810d3b0:	4b67      	ldr	r3, [pc, #412]	; (810d550 <_dtoa_r+0x618>)
 810d3b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d3b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 810d3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d3bc:	2b00      	cmp	r3, #0
 810d3be:	f280 80d5 	bge.w	810d56c <_dtoa_r+0x634>
 810d3c2:	9b03      	ldr	r3, [sp, #12]
 810d3c4:	2b00      	cmp	r3, #0
 810d3c6:	f300 80d1 	bgt.w	810d56c <_dtoa_r+0x634>
 810d3ca:	f040 826f 	bne.w	810d8ac <_dtoa_r+0x974>
 810d3ce:	4b65      	ldr	r3, [pc, #404]	; (810d564 <_dtoa_r+0x62c>)
 810d3d0:	2200      	movs	r2, #0
 810d3d2:	4640      	mov	r0, r8
 810d3d4:	4649      	mov	r1, r9
 810d3d6:	f7f3 f997 	bl	8100708 <__aeabi_dmul>
 810d3da:	4652      	mov	r2, sl
 810d3dc:	465b      	mov	r3, fp
 810d3de:	f7f3 fc19 	bl	8100c14 <__aeabi_dcmpge>
 810d3e2:	9e03      	ldr	r6, [sp, #12]
 810d3e4:	4637      	mov	r7, r6
 810d3e6:	2800      	cmp	r0, #0
 810d3e8:	f040 8245 	bne.w	810d876 <_dtoa_r+0x93e>
 810d3ec:	9d01      	ldr	r5, [sp, #4]
 810d3ee:	2331      	movs	r3, #49	; 0x31
 810d3f0:	f805 3b01 	strb.w	r3, [r5], #1
 810d3f4:	9b00      	ldr	r3, [sp, #0]
 810d3f6:	3301      	adds	r3, #1
 810d3f8:	9300      	str	r3, [sp, #0]
 810d3fa:	e240      	b.n	810d87e <_dtoa_r+0x946>
 810d3fc:	07f2      	lsls	r2, r6, #31
 810d3fe:	d505      	bpl.n	810d40c <_dtoa_r+0x4d4>
 810d400:	e9d7 2300 	ldrd	r2, r3, [r7]
 810d404:	f7f3 f980 	bl	8100708 <__aeabi_dmul>
 810d408:	3501      	adds	r5, #1
 810d40a:	2301      	movs	r3, #1
 810d40c:	1076      	asrs	r6, r6, #1
 810d40e:	3708      	adds	r7, #8
 810d410:	e777      	b.n	810d302 <_dtoa_r+0x3ca>
 810d412:	2502      	movs	r5, #2
 810d414:	e779      	b.n	810d30a <_dtoa_r+0x3d2>
 810d416:	9f00      	ldr	r7, [sp, #0]
 810d418:	9e03      	ldr	r6, [sp, #12]
 810d41a:	e794      	b.n	810d346 <_dtoa_r+0x40e>
 810d41c:	9901      	ldr	r1, [sp, #4]
 810d41e:	4b4c      	ldr	r3, [pc, #304]	; (810d550 <_dtoa_r+0x618>)
 810d420:	4431      	add	r1, r6
 810d422:	910d      	str	r1, [sp, #52]	; 0x34
 810d424:	9908      	ldr	r1, [sp, #32]
 810d426:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810d42a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810d42e:	2900      	cmp	r1, #0
 810d430:	d043      	beq.n	810d4ba <_dtoa_r+0x582>
 810d432:	494d      	ldr	r1, [pc, #308]	; (810d568 <_dtoa_r+0x630>)
 810d434:	2000      	movs	r0, #0
 810d436:	f7f3 fa91 	bl	810095c <__aeabi_ddiv>
 810d43a:	4652      	mov	r2, sl
 810d43c:	465b      	mov	r3, fp
 810d43e:	f7f2 ffab 	bl	8100398 <__aeabi_dsub>
 810d442:	9d01      	ldr	r5, [sp, #4]
 810d444:	4682      	mov	sl, r0
 810d446:	468b      	mov	fp, r1
 810d448:	4649      	mov	r1, r9
 810d44a:	4640      	mov	r0, r8
 810d44c:	f7f3 fc0c 	bl	8100c68 <__aeabi_d2iz>
 810d450:	4606      	mov	r6, r0
 810d452:	f7f3 f8ef 	bl	8100634 <__aeabi_i2d>
 810d456:	4602      	mov	r2, r0
 810d458:	460b      	mov	r3, r1
 810d45a:	4640      	mov	r0, r8
 810d45c:	4649      	mov	r1, r9
 810d45e:	f7f2 ff9b 	bl	8100398 <__aeabi_dsub>
 810d462:	3630      	adds	r6, #48	; 0x30
 810d464:	f805 6b01 	strb.w	r6, [r5], #1
 810d468:	4652      	mov	r2, sl
 810d46a:	465b      	mov	r3, fp
 810d46c:	4680      	mov	r8, r0
 810d46e:	4689      	mov	r9, r1
 810d470:	f7f3 fbbc 	bl	8100bec <__aeabi_dcmplt>
 810d474:	2800      	cmp	r0, #0
 810d476:	d163      	bne.n	810d540 <_dtoa_r+0x608>
 810d478:	4642      	mov	r2, r8
 810d47a:	464b      	mov	r3, r9
 810d47c:	4936      	ldr	r1, [pc, #216]	; (810d558 <_dtoa_r+0x620>)
 810d47e:	2000      	movs	r0, #0
 810d480:	f7f2 ff8a 	bl	8100398 <__aeabi_dsub>
 810d484:	4652      	mov	r2, sl
 810d486:	465b      	mov	r3, fp
 810d488:	f7f3 fbb0 	bl	8100bec <__aeabi_dcmplt>
 810d48c:	2800      	cmp	r0, #0
 810d48e:	f040 80b5 	bne.w	810d5fc <_dtoa_r+0x6c4>
 810d492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d494:	429d      	cmp	r5, r3
 810d496:	d081      	beq.n	810d39c <_dtoa_r+0x464>
 810d498:	4b30      	ldr	r3, [pc, #192]	; (810d55c <_dtoa_r+0x624>)
 810d49a:	2200      	movs	r2, #0
 810d49c:	4650      	mov	r0, sl
 810d49e:	4659      	mov	r1, fp
 810d4a0:	f7f3 f932 	bl	8100708 <__aeabi_dmul>
 810d4a4:	4b2d      	ldr	r3, [pc, #180]	; (810d55c <_dtoa_r+0x624>)
 810d4a6:	4682      	mov	sl, r0
 810d4a8:	468b      	mov	fp, r1
 810d4aa:	4640      	mov	r0, r8
 810d4ac:	4649      	mov	r1, r9
 810d4ae:	2200      	movs	r2, #0
 810d4b0:	f7f3 f92a 	bl	8100708 <__aeabi_dmul>
 810d4b4:	4680      	mov	r8, r0
 810d4b6:	4689      	mov	r9, r1
 810d4b8:	e7c6      	b.n	810d448 <_dtoa_r+0x510>
 810d4ba:	4650      	mov	r0, sl
 810d4bc:	4659      	mov	r1, fp
 810d4be:	f7f3 f923 	bl	8100708 <__aeabi_dmul>
 810d4c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d4c4:	9d01      	ldr	r5, [sp, #4]
 810d4c6:	930f      	str	r3, [sp, #60]	; 0x3c
 810d4c8:	4682      	mov	sl, r0
 810d4ca:	468b      	mov	fp, r1
 810d4cc:	4649      	mov	r1, r9
 810d4ce:	4640      	mov	r0, r8
 810d4d0:	f7f3 fbca 	bl	8100c68 <__aeabi_d2iz>
 810d4d4:	4606      	mov	r6, r0
 810d4d6:	f7f3 f8ad 	bl	8100634 <__aeabi_i2d>
 810d4da:	3630      	adds	r6, #48	; 0x30
 810d4dc:	4602      	mov	r2, r0
 810d4de:	460b      	mov	r3, r1
 810d4e0:	4640      	mov	r0, r8
 810d4e2:	4649      	mov	r1, r9
 810d4e4:	f7f2 ff58 	bl	8100398 <__aeabi_dsub>
 810d4e8:	f805 6b01 	strb.w	r6, [r5], #1
 810d4ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d4ee:	429d      	cmp	r5, r3
 810d4f0:	4680      	mov	r8, r0
 810d4f2:	4689      	mov	r9, r1
 810d4f4:	f04f 0200 	mov.w	r2, #0
 810d4f8:	d124      	bne.n	810d544 <_dtoa_r+0x60c>
 810d4fa:	4b1b      	ldr	r3, [pc, #108]	; (810d568 <_dtoa_r+0x630>)
 810d4fc:	4650      	mov	r0, sl
 810d4fe:	4659      	mov	r1, fp
 810d500:	f7f2 ff4c 	bl	810039c <__adddf3>
 810d504:	4602      	mov	r2, r0
 810d506:	460b      	mov	r3, r1
 810d508:	4640      	mov	r0, r8
 810d50a:	4649      	mov	r1, r9
 810d50c:	f7f3 fb8c 	bl	8100c28 <__aeabi_dcmpgt>
 810d510:	2800      	cmp	r0, #0
 810d512:	d173      	bne.n	810d5fc <_dtoa_r+0x6c4>
 810d514:	4652      	mov	r2, sl
 810d516:	465b      	mov	r3, fp
 810d518:	4913      	ldr	r1, [pc, #76]	; (810d568 <_dtoa_r+0x630>)
 810d51a:	2000      	movs	r0, #0
 810d51c:	f7f2 ff3c 	bl	8100398 <__aeabi_dsub>
 810d520:	4602      	mov	r2, r0
 810d522:	460b      	mov	r3, r1
 810d524:	4640      	mov	r0, r8
 810d526:	4649      	mov	r1, r9
 810d528:	f7f3 fb60 	bl	8100bec <__aeabi_dcmplt>
 810d52c:	2800      	cmp	r0, #0
 810d52e:	f43f af35 	beq.w	810d39c <_dtoa_r+0x464>
 810d532:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810d534:	1e6b      	subs	r3, r5, #1
 810d536:	930f      	str	r3, [sp, #60]	; 0x3c
 810d538:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810d53c:	2b30      	cmp	r3, #48	; 0x30
 810d53e:	d0f8      	beq.n	810d532 <_dtoa_r+0x5fa>
 810d540:	9700      	str	r7, [sp, #0]
 810d542:	e049      	b.n	810d5d8 <_dtoa_r+0x6a0>
 810d544:	4b05      	ldr	r3, [pc, #20]	; (810d55c <_dtoa_r+0x624>)
 810d546:	f7f3 f8df 	bl	8100708 <__aeabi_dmul>
 810d54a:	4680      	mov	r8, r0
 810d54c:	4689      	mov	r9, r1
 810d54e:	e7bd      	b.n	810d4cc <_dtoa_r+0x594>
 810d550:	0810fef8 	.word	0x0810fef8
 810d554:	0810fed0 	.word	0x0810fed0
 810d558:	3ff00000 	.word	0x3ff00000
 810d55c:	40240000 	.word	0x40240000
 810d560:	401c0000 	.word	0x401c0000
 810d564:	40140000 	.word	0x40140000
 810d568:	3fe00000 	.word	0x3fe00000
 810d56c:	9d01      	ldr	r5, [sp, #4]
 810d56e:	4656      	mov	r6, sl
 810d570:	465f      	mov	r7, fp
 810d572:	4642      	mov	r2, r8
 810d574:	464b      	mov	r3, r9
 810d576:	4630      	mov	r0, r6
 810d578:	4639      	mov	r1, r7
 810d57a:	f7f3 f9ef 	bl	810095c <__aeabi_ddiv>
 810d57e:	f7f3 fb73 	bl	8100c68 <__aeabi_d2iz>
 810d582:	4682      	mov	sl, r0
 810d584:	f7f3 f856 	bl	8100634 <__aeabi_i2d>
 810d588:	4642      	mov	r2, r8
 810d58a:	464b      	mov	r3, r9
 810d58c:	f7f3 f8bc 	bl	8100708 <__aeabi_dmul>
 810d590:	4602      	mov	r2, r0
 810d592:	460b      	mov	r3, r1
 810d594:	4630      	mov	r0, r6
 810d596:	4639      	mov	r1, r7
 810d598:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 810d59c:	f7f2 fefc 	bl	8100398 <__aeabi_dsub>
 810d5a0:	f805 6b01 	strb.w	r6, [r5], #1
 810d5a4:	9e01      	ldr	r6, [sp, #4]
 810d5a6:	9f03      	ldr	r7, [sp, #12]
 810d5a8:	1bae      	subs	r6, r5, r6
 810d5aa:	42b7      	cmp	r7, r6
 810d5ac:	4602      	mov	r2, r0
 810d5ae:	460b      	mov	r3, r1
 810d5b0:	d135      	bne.n	810d61e <_dtoa_r+0x6e6>
 810d5b2:	f7f2 fef3 	bl	810039c <__adddf3>
 810d5b6:	4642      	mov	r2, r8
 810d5b8:	464b      	mov	r3, r9
 810d5ba:	4606      	mov	r6, r0
 810d5bc:	460f      	mov	r7, r1
 810d5be:	f7f3 fb33 	bl	8100c28 <__aeabi_dcmpgt>
 810d5c2:	b9d0      	cbnz	r0, 810d5fa <_dtoa_r+0x6c2>
 810d5c4:	4642      	mov	r2, r8
 810d5c6:	464b      	mov	r3, r9
 810d5c8:	4630      	mov	r0, r6
 810d5ca:	4639      	mov	r1, r7
 810d5cc:	f7f3 fb04 	bl	8100bd8 <__aeabi_dcmpeq>
 810d5d0:	b110      	cbz	r0, 810d5d8 <_dtoa_r+0x6a0>
 810d5d2:	f01a 0f01 	tst.w	sl, #1
 810d5d6:	d110      	bne.n	810d5fa <_dtoa_r+0x6c2>
 810d5d8:	4620      	mov	r0, r4
 810d5da:	ee18 1a10 	vmov	r1, s16
 810d5de:	f001 f889 	bl	810e6f4 <_Bfree>
 810d5e2:	2300      	movs	r3, #0
 810d5e4:	9800      	ldr	r0, [sp, #0]
 810d5e6:	702b      	strb	r3, [r5, #0]
 810d5e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810d5ea:	3001      	adds	r0, #1
 810d5ec:	6018      	str	r0, [r3, #0]
 810d5ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810d5f0:	2b00      	cmp	r3, #0
 810d5f2:	f43f acf1 	beq.w	810cfd8 <_dtoa_r+0xa0>
 810d5f6:	601d      	str	r5, [r3, #0]
 810d5f8:	e4ee      	b.n	810cfd8 <_dtoa_r+0xa0>
 810d5fa:	9f00      	ldr	r7, [sp, #0]
 810d5fc:	462b      	mov	r3, r5
 810d5fe:	461d      	mov	r5, r3
 810d600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810d604:	2a39      	cmp	r2, #57	; 0x39
 810d606:	d106      	bne.n	810d616 <_dtoa_r+0x6de>
 810d608:	9a01      	ldr	r2, [sp, #4]
 810d60a:	429a      	cmp	r2, r3
 810d60c:	d1f7      	bne.n	810d5fe <_dtoa_r+0x6c6>
 810d60e:	9901      	ldr	r1, [sp, #4]
 810d610:	2230      	movs	r2, #48	; 0x30
 810d612:	3701      	adds	r7, #1
 810d614:	700a      	strb	r2, [r1, #0]
 810d616:	781a      	ldrb	r2, [r3, #0]
 810d618:	3201      	adds	r2, #1
 810d61a:	701a      	strb	r2, [r3, #0]
 810d61c:	e790      	b.n	810d540 <_dtoa_r+0x608>
 810d61e:	4ba6      	ldr	r3, [pc, #664]	; (810d8b8 <_dtoa_r+0x980>)
 810d620:	2200      	movs	r2, #0
 810d622:	f7f3 f871 	bl	8100708 <__aeabi_dmul>
 810d626:	2200      	movs	r2, #0
 810d628:	2300      	movs	r3, #0
 810d62a:	4606      	mov	r6, r0
 810d62c:	460f      	mov	r7, r1
 810d62e:	f7f3 fad3 	bl	8100bd8 <__aeabi_dcmpeq>
 810d632:	2800      	cmp	r0, #0
 810d634:	d09d      	beq.n	810d572 <_dtoa_r+0x63a>
 810d636:	e7cf      	b.n	810d5d8 <_dtoa_r+0x6a0>
 810d638:	9a08      	ldr	r2, [sp, #32]
 810d63a:	2a00      	cmp	r2, #0
 810d63c:	f000 80d7 	beq.w	810d7ee <_dtoa_r+0x8b6>
 810d640:	9a06      	ldr	r2, [sp, #24]
 810d642:	2a01      	cmp	r2, #1
 810d644:	f300 80ba 	bgt.w	810d7bc <_dtoa_r+0x884>
 810d648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810d64a:	2a00      	cmp	r2, #0
 810d64c:	f000 80b2 	beq.w	810d7b4 <_dtoa_r+0x87c>
 810d650:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810d654:	9e07      	ldr	r6, [sp, #28]
 810d656:	9d04      	ldr	r5, [sp, #16]
 810d658:	9a04      	ldr	r2, [sp, #16]
 810d65a:	441a      	add	r2, r3
 810d65c:	9204      	str	r2, [sp, #16]
 810d65e:	9a05      	ldr	r2, [sp, #20]
 810d660:	2101      	movs	r1, #1
 810d662:	441a      	add	r2, r3
 810d664:	4620      	mov	r0, r4
 810d666:	9205      	str	r2, [sp, #20]
 810d668:	f001 f946 	bl	810e8f8 <__i2b>
 810d66c:	4607      	mov	r7, r0
 810d66e:	2d00      	cmp	r5, #0
 810d670:	dd0c      	ble.n	810d68c <_dtoa_r+0x754>
 810d672:	9b05      	ldr	r3, [sp, #20]
 810d674:	2b00      	cmp	r3, #0
 810d676:	dd09      	ble.n	810d68c <_dtoa_r+0x754>
 810d678:	42ab      	cmp	r3, r5
 810d67a:	9a04      	ldr	r2, [sp, #16]
 810d67c:	bfa8      	it	ge
 810d67e:	462b      	movge	r3, r5
 810d680:	1ad2      	subs	r2, r2, r3
 810d682:	9204      	str	r2, [sp, #16]
 810d684:	9a05      	ldr	r2, [sp, #20]
 810d686:	1aed      	subs	r5, r5, r3
 810d688:	1ad3      	subs	r3, r2, r3
 810d68a:	9305      	str	r3, [sp, #20]
 810d68c:	9b07      	ldr	r3, [sp, #28]
 810d68e:	b31b      	cbz	r3, 810d6d8 <_dtoa_r+0x7a0>
 810d690:	9b08      	ldr	r3, [sp, #32]
 810d692:	2b00      	cmp	r3, #0
 810d694:	f000 80af 	beq.w	810d7f6 <_dtoa_r+0x8be>
 810d698:	2e00      	cmp	r6, #0
 810d69a:	dd13      	ble.n	810d6c4 <_dtoa_r+0x78c>
 810d69c:	4639      	mov	r1, r7
 810d69e:	4632      	mov	r2, r6
 810d6a0:	4620      	mov	r0, r4
 810d6a2:	f001 f9e9 	bl	810ea78 <__pow5mult>
 810d6a6:	ee18 2a10 	vmov	r2, s16
 810d6aa:	4601      	mov	r1, r0
 810d6ac:	4607      	mov	r7, r0
 810d6ae:	4620      	mov	r0, r4
 810d6b0:	f001 f938 	bl	810e924 <__multiply>
 810d6b4:	ee18 1a10 	vmov	r1, s16
 810d6b8:	4680      	mov	r8, r0
 810d6ba:	4620      	mov	r0, r4
 810d6bc:	f001 f81a 	bl	810e6f4 <_Bfree>
 810d6c0:	ee08 8a10 	vmov	s16, r8
 810d6c4:	9b07      	ldr	r3, [sp, #28]
 810d6c6:	1b9a      	subs	r2, r3, r6
 810d6c8:	d006      	beq.n	810d6d8 <_dtoa_r+0x7a0>
 810d6ca:	ee18 1a10 	vmov	r1, s16
 810d6ce:	4620      	mov	r0, r4
 810d6d0:	f001 f9d2 	bl	810ea78 <__pow5mult>
 810d6d4:	ee08 0a10 	vmov	s16, r0
 810d6d8:	2101      	movs	r1, #1
 810d6da:	4620      	mov	r0, r4
 810d6dc:	f001 f90c 	bl	810e8f8 <__i2b>
 810d6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d6e2:	2b00      	cmp	r3, #0
 810d6e4:	4606      	mov	r6, r0
 810d6e6:	f340 8088 	ble.w	810d7fa <_dtoa_r+0x8c2>
 810d6ea:	461a      	mov	r2, r3
 810d6ec:	4601      	mov	r1, r0
 810d6ee:	4620      	mov	r0, r4
 810d6f0:	f001 f9c2 	bl	810ea78 <__pow5mult>
 810d6f4:	9b06      	ldr	r3, [sp, #24]
 810d6f6:	2b01      	cmp	r3, #1
 810d6f8:	4606      	mov	r6, r0
 810d6fa:	f340 8081 	ble.w	810d800 <_dtoa_r+0x8c8>
 810d6fe:	f04f 0800 	mov.w	r8, #0
 810d702:	6933      	ldr	r3, [r6, #16]
 810d704:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810d708:	6918      	ldr	r0, [r3, #16]
 810d70a:	f001 f8a5 	bl	810e858 <__hi0bits>
 810d70e:	f1c0 0020 	rsb	r0, r0, #32
 810d712:	9b05      	ldr	r3, [sp, #20]
 810d714:	4418      	add	r0, r3
 810d716:	f010 001f 	ands.w	r0, r0, #31
 810d71a:	f000 8092 	beq.w	810d842 <_dtoa_r+0x90a>
 810d71e:	f1c0 0320 	rsb	r3, r0, #32
 810d722:	2b04      	cmp	r3, #4
 810d724:	f340 808a 	ble.w	810d83c <_dtoa_r+0x904>
 810d728:	f1c0 001c 	rsb	r0, r0, #28
 810d72c:	9b04      	ldr	r3, [sp, #16]
 810d72e:	4403      	add	r3, r0
 810d730:	9304      	str	r3, [sp, #16]
 810d732:	9b05      	ldr	r3, [sp, #20]
 810d734:	4403      	add	r3, r0
 810d736:	4405      	add	r5, r0
 810d738:	9305      	str	r3, [sp, #20]
 810d73a:	9b04      	ldr	r3, [sp, #16]
 810d73c:	2b00      	cmp	r3, #0
 810d73e:	dd07      	ble.n	810d750 <_dtoa_r+0x818>
 810d740:	ee18 1a10 	vmov	r1, s16
 810d744:	461a      	mov	r2, r3
 810d746:	4620      	mov	r0, r4
 810d748:	f001 f9f0 	bl	810eb2c <__lshift>
 810d74c:	ee08 0a10 	vmov	s16, r0
 810d750:	9b05      	ldr	r3, [sp, #20]
 810d752:	2b00      	cmp	r3, #0
 810d754:	dd05      	ble.n	810d762 <_dtoa_r+0x82a>
 810d756:	4631      	mov	r1, r6
 810d758:	461a      	mov	r2, r3
 810d75a:	4620      	mov	r0, r4
 810d75c:	f001 f9e6 	bl	810eb2c <__lshift>
 810d760:	4606      	mov	r6, r0
 810d762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d764:	2b00      	cmp	r3, #0
 810d766:	d06e      	beq.n	810d846 <_dtoa_r+0x90e>
 810d768:	ee18 0a10 	vmov	r0, s16
 810d76c:	4631      	mov	r1, r6
 810d76e:	f001 fa4d 	bl	810ec0c <__mcmp>
 810d772:	2800      	cmp	r0, #0
 810d774:	da67      	bge.n	810d846 <_dtoa_r+0x90e>
 810d776:	9b00      	ldr	r3, [sp, #0]
 810d778:	3b01      	subs	r3, #1
 810d77a:	ee18 1a10 	vmov	r1, s16
 810d77e:	9300      	str	r3, [sp, #0]
 810d780:	220a      	movs	r2, #10
 810d782:	2300      	movs	r3, #0
 810d784:	4620      	mov	r0, r4
 810d786:	f000 ffd7 	bl	810e738 <__multadd>
 810d78a:	9b08      	ldr	r3, [sp, #32]
 810d78c:	ee08 0a10 	vmov	s16, r0
 810d790:	2b00      	cmp	r3, #0
 810d792:	f000 81b1 	beq.w	810daf8 <_dtoa_r+0xbc0>
 810d796:	2300      	movs	r3, #0
 810d798:	4639      	mov	r1, r7
 810d79a:	220a      	movs	r2, #10
 810d79c:	4620      	mov	r0, r4
 810d79e:	f000 ffcb 	bl	810e738 <__multadd>
 810d7a2:	9b02      	ldr	r3, [sp, #8]
 810d7a4:	2b00      	cmp	r3, #0
 810d7a6:	4607      	mov	r7, r0
 810d7a8:	f300 808e 	bgt.w	810d8c8 <_dtoa_r+0x990>
 810d7ac:	9b06      	ldr	r3, [sp, #24]
 810d7ae:	2b02      	cmp	r3, #2
 810d7b0:	dc51      	bgt.n	810d856 <_dtoa_r+0x91e>
 810d7b2:	e089      	b.n	810d8c8 <_dtoa_r+0x990>
 810d7b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810d7b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810d7ba:	e74b      	b.n	810d654 <_dtoa_r+0x71c>
 810d7bc:	9b03      	ldr	r3, [sp, #12]
 810d7be:	1e5e      	subs	r6, r3, #1
 810d7c0:	9b07      	ldr	r3, [sp, #28]
 810d7c2:	42b3      	cmp	r3, r6
 810d7c4:	bfbf      	itttt	lt
 810d7c6:	9b07      	ldrlt	r3, [sp, #28]
 810d7c8:	9607      	strlt	r6, [sp, #28]
 810d7ca:	1af2      	sublt	r2, r6, r3
 810d7cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 810d7ce:	bfb6      	itet	lt
 810d7d0:	189b      	addlt	r3, r3, r2
 810d7d2:	1b9e      	subge	r6, r3, r6
 810d7d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 810d7d6:	9b03      	ldr	r3, [sp, #12]
 810d7d8:	bfb8      	it	lt
 810d7da:	2600      	movlt	r6, #0
 810d7dc:	2b00      	cmp	r3, #0
 810d7de:	bfb7      	itett	lt
 810d7e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 810d7e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 810d7e8:	1a9d      	sublt	r5, r3, r2
 810d7ea:	2300      	movlt	r3, #0
 810d7ec:	e734      	b.n	810d658 <_dtoa_r+0x720>
 810d7ee:	9e07      	ldr	r6, [sp, #28]
 810d7f0:	9d04      	ldr	r5, [sp, #16]
 810d7f2:	9f08      	ldr	r7, [sp, #32]
 810d7f4:	e73b      	b.n	810d66e <_dtoa_r+0x736>
 810d7f6:	9a07      	ldr	r2, [sp, #28]
 810d7f8:	e767      	b.n	810d6ca <_dtoa_r+0x792>
 810d7fa:	9b06      	ldr	r3, [sp, #24]
 810d7fc:	2b01      	cmp	r3, #1
 810d7fe:	dc18      	bgt.n	810d832 <_dtoa_r+0x8fa>
 810d800:	f1ba 0f00 	cmp.w	sl, #0
 810d804:	d115      	bne.n	810d832 <_dtoa_r+0x8fa>
 810d806:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810d80a:	b993      	cbnz	r3, 810d832 <_dtoa_r+0x8fa>
 810d80c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810d810:	0d1b      	lsrs	r3, r3, #20
 810d812:	051b      	lsls	r3, r3, #20
 810d814:	b183      	cbz	r3, 810d838 <_dtoa_r+0x900>
 810d816:	9b04      	ldr	r3, [sp, #16]
 810d818:	3301      	adds	r3, #1
 810d81a:	9304      	str	r3, [sp, #16]
 810d81c:	9b05      	ldr	r3, [sp, #20]
 810d81e:	3301      	adds	r3, #1
 810d820:	9305      	str	r3, [sp, #20]
 810d822:	f04f 0801 	mov.w	r8, #1
 810d826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d828:	2b00      	cmp	r3, #0
 810d82a:	f47f af6a 	bne.w	810d702 <_dtoa_r+0x7ca>
 810d82e:	2001      	movs	r0, #1
 810d830:	e76f      	b.n	810d712 <_dtoa_r+0x7da>
 810d832:	f04f 0800 	mov.w	r8, #0
 810d836:	e7f6      	b.n	810d826 <_dtoa_r+0x8ee>
 810d838:	4698      	mov	r8, r3
 810d83a:	e7f4      	b.n	810d826 <_dtoa_r+0x8ee>
 810d83c:	f43f af7d 	beq.w	810d73a <_dtoa_r+0x802>
 810d840:	4618      	mov	r0, r3
 810d842:	301c      	adds	r0, #28
 810d844:	e772      	b.n	810d72c <_dtoa_r+0x7f4>
 810d846:	9b03      	ldr	r3, [sp, #12]
 810d848:	2b00      	cmp	r3, #0
 810d84a:	dc37      	bgt.n	810d8bc <_dtoa_r+0x984>
 810d84c:	9b06      	ldr	r3, [sp, #24]
 810d84e:	2b02      	cmp	r3, #2
 810d850:	dd34      	ble.n	810d8bc <_dtoa_r+0x984>
 810d852:	9b03      	ldr	r3, [sp, #12]
 810d854:	9302      	str	r3, [sp, #8]
 810d856:	9b02      	ldr	r3, [sp, #8]
 810d858:	b96b      	cbnz	r3, 810d876 <_dtoa_r+0x93e>
 810d85a:	4631      	mov	r1, r6
 810d85c:	2205      	movs	r2, #5
 810d85e:	4620      	mov	r0, r4
 810d860:	f000 ff6a 	bl	810e738 <__multadd>
 810d864:	4601      	mov	r1, r0
 810d866:	4606      	mov	r6, r0
 810d868:	ee18 0a10 	vmov	r0, s16
 810d86c:	f001 f9ce 	bl	810ec0c <__mcmp>
 810d870:	2800      	cmp	r0, #0
 810d872:	f73f adbb 	bgt.w	810d3ec <_dtoa_r+0x4b4>
 810d876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d878:	9d01      	ldr	r5, [sp, #4]
 810d87a:	43db      	mvns	r3, r3
 810d87c:	9300      	str	r3, [sp, #0]
 810d87e:	f04f 0800 	mov.w	r8, #0
 810d882:	4631      	mov	r1, r6
 810d884:	4620      	mov	r0, r4
 810d886:	f000 ff35 	bl	810e6f4 <_Bfree>
 810d88a:	2f00      	cmp	r7, #0
 810d88c:	f43f aea4 	beq.w	810d5d8 <_dtoa_r+0x6a0>
 810d890:	f1b8 0f00 	cmp.w	r8, #0
 810d894:	d005      	beq.n	810d8a2 <_dtoa_r+0x96a>
 810d896:	45b8      	cmp	r8, r7
 810d898:	d003      	beq.n	810d8a2 <_dtoa_r+0x96a>
 810d89a:	4641      	mov	r1, r8
 810d89c:	4620      	mov	r0, r4
 810d89e:	f000 ff29 	bl	810e6f4 <_Bfree>
 810d8a2:	4639      	mov	r1, r7
 810d8a4:	4620      	mov	r0, r4
 810d8a6:	f000 ff25 	bl	810e6f4 <_Bfree>
 810d8aa:	e695      	b.n	810d5d8 <_dtoa_r+0x6a0>
 810d8ac:	2600      	movs	r6, #0
 810d8ae:	4637      	mov	r7, r6
 810d8b0:	e7e1      	b.n	810d876 <_dtoa_r+0x93e>
 810d8b2:	9700      	str	r7, [sp, #0]
 810d8b4:	4637      	mov	r7, r6
 810d8b6:	e599      	b.n	810d3ec <_dtoa_r+0x4b4>
 810d8b8:	40240000 	.word	0x40240000
 810d8bc:	9b08      	ldr	r3, [sp, #32]
 810d8be:	2b00      	cmp	r3, #0
 810d8c0:	f000 80ca 	beq.w	810da58 <_dtoa_r+0xb20>
 810d8c4:	9b03      	ldr	r3, [sp, #12]
 810d8c6:	9302      	str	r3, [sp, #8]
 810d8c8:	2d00      	cmp	r5, #0
 810d8ca:	dd05      	ble.n	810d8d8 <_dtoa_r+0x9a0>
 810d8cc:	4639      	mov	r1, r7
 810d8ce:	462a      	mov	r2, r5
 810d8d0:	4620      	mov	r0, r4
 810d8d2:	f001 f92b 	bl	810eb2c <__lshift>
 810d8d6:	4607      	mov	r7, r0
 810d8d8:	f1b8 0f00 	cmp.w	r8, #0
 810d8dc:	d05b      	beq.n	810d996 <_dtoa_r+0xa5e>
 810d8de:	6879      	ldr	r1, [r7, #4]
 810d8e0:	4620      	mov	r0, r4
 810d8e2:	f000 fec7 	bl	810e674 <_Balloc>
 810d8e6:	4605      	mov	r5, r0
 810d8e8:	b928      	cbnz	r0, 810d8f6 <_dtoa_r+0x9be>
 810d8ea:	4b87      	ldr	r3, [pc, #540]	; (810db08 <_dtoa_r+0xbd0>)
 810d8ec:	4602      	mov	r2, r0
 810d8ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 810d8f2:	f7ff bb3b 	b.w	810cf6c <_dtoa_r+0x34>
 810d8f6:	693a      	ldr	r2, [r7, #16]
 810d8f8:	3202      	adds	r2, #2
 810d8fa:	0092      	lsls	r2, r2, #2
 810d8fc:	f107 010c 	add.w	r1, r7, #12
 810d900:	300c      	adds	r0, #12
 810d902:	f7fd faeb 	bl	810aedc <memcpy>
 810d906:	2201      	movs	r2, #1
 810d908:	4629      	mov	r1, r5
 810d90a:	4620      	mov	r0, r4
 810d90c:	f001 f90e 	bl	810eb2c <__lshift>
 810d910:	9b01      	ldr	r3, [sp, #4]
 810d912:	f103 0901 	add.w	r9, r3, #1
 810d916:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810d91a:	4413      	add	r3, r2
 810d91c:	9305      	str	r3, [sp, #20]
 810d91e:	f00a 0301 	and.w	r3, sl, #1
 810d922:	46b8      	mov	r8, r7
 810d924:	9304      	str	r3, [sp, #16]
 810d926:	4607      	mov	r7, r0
 810d928:	4631      	mov	r1, r6
 810d92a:	ee18 0a10 	vmov	r0, s16
 810d92e:	f7ff fa77 	bl	810ce20 <quorem>
 810d932:	4641      	mov	r1, r8
 810d934:	9002      	str	r0, [sp, #8]
 810d936:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810d93a:	ee18 0a10 	vmov	r0, s16
 810d93e:	f001 f965 	bl	810ec0c <__mcmp>
 810d942:	463a      	mov	r2, r7
 810d944:	9003      	str	r0, [sp, #12]
 810d946:	4631      	mov	r1, r6
 810d948:	4620      	mov	r0, r4
 810d94a:	f001 f97b 	bl	810ec44 <__mdiff>
 810d94e:	68c2      	ldr	r2, [r0, #12]
 810d950:	f109 3bff 	add.w	fp, r9, #4294967295
 810d954:	4605      	mov	r5, r0
 810d956:	bb02      	cbnz	r2, 810d99a <_dtoa_r+0xa62>
 810d958:	4601      	mov	r1, r0
 810d95a:	ee18 0a10 	vmov	r0, s16
 810d95e:	f001 f955 	bl	810ec0c <__mcmp>
 810d962:	4602      	mov	r2, r0
 810d964:	4629      	mov	r1, r5
 810d966:	4620      	mov	r0, r4
 810d968:	9207      	str	r2, [sp, #28]
 810d96a:	f000 fec3 	bl	810e6f4 <_Bfree>
 810d96e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810d972:	ea43 0102 	orr.w	r1, r3, r2
 810d976:	9b04      	ldr	r3, [sp, #16]
 810d978:	430b      	orrs	r3, r1
 810d97a:	464d      	mov	r5, r9
 810d97c:	d10f      	bne.n	810d99e <_dtoa_r+0xa66>
 810d97e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810d982:	d02a      	beq.n	810d9da <_dtoa_r+0xaa2>
 810d984:	9b03      	ldr	r3, [sp, #12]
 810d986:	2b00      	cmp	r3, #0
 810d988:	dd02      	ble.n	810d990 <_dtoa_r+0xa58>
 810d98a:	9b02      	ldr	r3, [sp, #8]
 810d98c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 810d990:	f88b a000 	strb.w	sl, [fp]
 810d994:	e775      	b.n	810d882 <_dtoa_r+0x94a>
 810d996:	4638      	mov	r0, r7
 810d998:	e7ba      	b.n	810d910 <_dtoa_r+0x9d8>
 810d99a:	2201      	movs	r2, #1
 810d99c:	e7e2      	b.n	810d964 <_dtoa_r+0xa2c>
 810d99e:	9b03      	ldr	r3, [sp, #12]
 810d9a0:	2b00      	cmp	r3, #0
 810d9a2:	db04      	blt.n	810d9ae <_dtoa_r+0xa76>
 810d9a4:	9906      	ldr	r1, [sp, #24]
 810d9a6:	430b      	orrs	r3, r1
 810d9a8:	9904      	ldr	r1, [sp, #16]
 810d9aa:	430b      	orrs	r3, r1
 810d9ac:	d122      	bne.n	810d9f4 <_dtoa_r+0xabc>
 810d9ae:	2a00      	cmp	r2, #0
 810d9b0:	ddee      	ble.n	810d990 <_dtoa_r+0xa58>
 810d9b2:	ee18 1a10 	vmov	r1, s16
 810d9b6:	2201      	movs	r2, #1
 810d9b8:	4620      	mov	r0, r4
 810d9ba:	f001 f8b7 	bl	810eb2c <__lshift>
 810d9be:	4631      	mov	r1, r6
 810d9c0:	ee08 0a10 	vmov	s16, r0
 810d9c4:	f001 f922 	bl	810ec0c <__mcmp>
 810d9c8:	2800      	cmp	r0, #0
 810d9ca:	dc03      	bgt.n	810d9d4 <_dtoa_r+0xa9c>
 810d9cc:	d1e0      	bne.n	810d990 <_dtoa_r+0xa58>
 810d9ce:	f01a 0f01 	tst.w	sl, #1
 810d9d2:	d0dd      	beq.n	810d990 <_dtoa_r+0xa58>
 810d9d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810d9d8:	d1d7      	bne.n	810d98a <_dtoa_r+0xa52>
 810d9da:	2339      	movs	r3, #57	; 0x39
 810d9dc:	f88b 3000 	strb.w	r3, [fp]
 810d9e0:	462b      	mov	r3, r5
 810d9e2:	461d      	mov	r5, r3
 810d9e4:	3b01      	subs	r3, #1
 810d9e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810d9ea:	2a39      	cmp	r2, #57	; 0x39
 810d9ec:	d071      	beq.n	810dad2 <_dtoa_r+0xb9a>
 810d9ee:	3201      	adds	r2, #1
 810d9f0:	701a      	strb	r2, [r3, #0]
 810d9f2:	e746      	b.n	810d882 <_dtoa_r+0x94a>
 810d9f4:	2a00      	cmp	r2, #0
 810d9f6:	dd07      	ble.n	810da08 <_dtoa_r+0xad0>
 810d9f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810d9fc:	d0ed      	beq.n	810d9da <_dtoa_r+0xaa2>
 810d9fe:	f10a 0301 	add.w	r3, sl, #1
 810da02:	f88b 3000 	strb.w	r3, [fp]
 810da06:	e73c      	b.n	810d882 <_dtoa_r+0x94a>
 810da08:	9b05      	ldr	r3, [sp, #20]
 810da0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 810da0e:	4599      	cmp	r9, r3
 810da10:	d047      	beq.n	810daa2 <_dtoa_r+0xb6a>
 810da12:	ee18 1a10 	vmov	r1, s16
 810da16:	2300      	movs	r3, #0
 810da18:	220a      	movs	r2, #10
 810da1a:	4620      	mov	r0, r4
 810da1c:	f000 fe8c 	bl	810e738 <__multadd>
 810da20:	45b8      	cmp	r8, r7
 810da22:	ee08 0a10 	vmov	s16, r0
 810da26:	f04f 0300 	mov.w	r3, #0
 810da2a:	f04f 020a 	mov.w	r2, #10
 810da2e:	4641      	mov	r1, r8
 810da30:	4620      	mov	r0, r4
 810da32:	d106      	bne.n	810da42 <_dtoa_r+0xb0a>
 810da34:	f000 fe80 	bl	810e738 <__multadd>
 810da38:	4680      	mov	r8, r0
 810da3a:	4607      	mov	r7, r0
 810da3c:	f109 0901 	add.w	r9, r9, #1
 810da40:	e772      	b.n	810d928 <_dtoa_r+0x9f0>
 810da42:	f000 fe79 	bl	810e738 <__multadd>
 810da46:	4639      	mov	r1, r7
 810da48:	4680      	mov	r8, r0
 810da4a:	2300      	movs	r3, #0
 810da4c:	220a      	movs	r2, #10
 810da4e:	4620      	mov	r0, r4
 810da50:	f000 fe72 	bl	810e738 <__multadd>
 810da54:	4607      	mov	r7, r0
 810da56:	e7f1      	b.n	810da3c <_dtoa_r+0xb04>
 810da58:	9b03      	ldr	r3, [sp, #12]
 810da5a:	9302      	str	r3, [sp, #8]
 810da5c:	9d01      	ldr	r5, [sp, #4]
 810da5e:	ee18 0a10 	vmov	r0, s16
 810da62:	4631      	mov	r1, r6
 810da64:	f7ff f9dc 	bl	810ce20 <quorem>
 810da68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810da6c:	9b01      	ldr	r3, [sp, #4]
 810da6e:	f805 ab01 	strb.w	sl, [r5], #1
 810da72:	1aea      	subs	r2, r5, r3
 810da74:	9b02      	ldr	r3, [sp, #8]
 810da76:	4293      	cmp	r3, r2
 810da78:	dd09      	ble.n	810da8e <_dtoa_r+0xb56>
 810da7a:	ee18 1a10 	vmov	r1, s16
 810da7e:	2300      	movs	r3, #0
 810da80:	220a      	movs	r2, #10
 810da82:	4620      	mov	r0, r4
 810da84:	f000 fe58 	bl	810e738 <__multadd>
 810da88:	ee08 0a10 	vmov	s16, r0
 810da8c:	e7e7      	b.n	810da5e <_dtoa_r+0xb26>
 810da8e:	9b02      	ldr	r3, [sp, #8]
 810da90:	2b00      	cmp	r3, #0
 810da92:	bfc8      	it	gt
 810da94:	461d      	movgt	r5, r3
 810da96:	9b01      	ldr	r3, [sp, #4]
 810da98:	bfd8      	it	le
 810da9a:	2501      	movle	r5, #1
 810da9c:	441d      	add	r5, r3
 810da9e:	f04f 0800 	mov.w	r8, #0
 810daa2:	ee18 1a10 	vmov	r1, s16
 810daa6:	2201      	movs	r2, #1
 810daa8:	4620      	mov	r0, r4
 810daaa:	f001 f83f 	bl	810eb2c <__lshift>
 810daae:	4631      	mov	r1, r6
 810dab0:	ee08 0a10 	vmov	s16, r0
 810dab4:	f001 f8aa 	bl	810ec0c <__mcmp>
 810dab8:	2800      	cmp	r0, #0
 810daba:	dc91      	bgt.n	810d9e0 <_dtoa_r+0xaa8>
 810dabc:	d102      	bne.n	810dac4 <_dtoa_r+0xb8c>
 810dabe:	f01a 0f01 	tst.w	sl, #1
 810dac2:	d18d      	bne.n	810d9e0 <_dtoa_r+0xaa8>
 810dac4:	462b      	mov	r3, r5
 810dac6:	461d      	mov	r5, r3
 810dac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810dacc:	2a30      	cmp	r2, #48	; 0x30
 810dace:	d0fa      	beq.n	810dac6 <_dtoa_r+0xb8e>
 810dad0:	e6d7      	b.n	810d882 <_dtoa_r+0x94a>
 810dad2:	9a01      	ldr	r2, [sp, #4]
 810dad4:	429a      	cmp	r2, r3
 810dad6:	d184      	bne.n	810d9e2 <_dtoa_r+0xaaa>
 810dad8:	9b00      	ldr	r3, [sp, #0]
 810dada:	3301      	adds	r3, #1
 810dadc:	9300      	str	r3, [sp, #0]
 810dade:	2331      	movs	r3, #49	; 0x31
 810dae0:	7013      	strb	r3, [r2, #0]
 810dae2:	e6ce      	b.n	810d882 <_dtoa_r+0x94a>
 810dae4:	4b09      	ldr	r3, [pc, #36]	; (810db0c <_dtoa_r+0xbd4>)
 810dae6:	f7ff ba95 	b.w	810d014 <_dtoa_r+0xdc>
 810daea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810daec:	2b00      	cmp	r3, #0
 810daee:	f47f aa6e 	bne.w	810cfce <_dtoa_r+0x96>
 810daf2:	4b07      	ldr	r3, [pc, #28]	; (810db10 <_dtoa_r+0xbd8>)
 810daf4:	f7ff ba8e 	b.w	810d014 <_dtoa_r+0xdc>
 810daf8:	9b02      	ldr	r3, [sp, #8]
 810dafa:	2b00      	cmp	r3, #0
 810dafc:	dcae      	bgt.n	810da5c <_dtoa_r+0xb24>
 810dafe:	9b06      	ldr	r3, [sp, #24]
 810db00:	2b02      	cmp	r3, #2
 810db02:	f73f aea8 	bgt.w	810d856 <_dtoa_r+0x91e>
 810db06:	e7a9      	b.n	810da5c <_dtoa_r+0xb24>
 810db08:	0810fd80 	.word	0x0810fd80
 810db0c:	0810fb84 	.word	0x0810fb84
 810db10:	0810fd01 	.word	0x0810fd01

0810db14 <__sflush_r>:
 810db14:	898a      	ldrh	r2, [r1, #12]
 810db16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810db1a:	4605      	mov	r5, r0
 810db1c:	0710      	lsls	r0, r2, #28
 810db1e:	460c      	mov	r4, r1
 810db20:	d458      	bmi.n	810dbd4 <__sflush_r+0xc0>
 810db22:	684b      	ldr	r3, [r1, #4]
 810db24:	2b00      	cmp	r3, #0
 810db26:	dc05      	bgt.n	810db34 <__sflush_r+0x20>
 810db28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810db2a:	2b00      	cmp	r3, #0
 810db2c:	dc02      	bgt.n	810db34 <__sflush_r+0x20>
 810db2e:	2000      	movs	r0, #0
 810db30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810db34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810db36:	2e00      	cmp	r6, #0
 810db38:	d0f9      	beq.n	810db2e <__sflush_r+0x1a>
 810db3a:	2300      	movs	r3, #0
 810db3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810db40:	682f      	ldr	r7, [r5, #0]
 810db42:	602b      	str	r3, [r5, #0]
 810db44:	d032      	beq.n	810dbac <__sflush_r+0x98>
 810db46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810db48:	89a3      	ldrh	r3, [r4, #12]
 810db4a:	075a      	lsls	r2, r3, #29
 810db4c:	d505      	bpl.n	810db5a <__sflush_r+0x46>
 810db4e:	6863      	ldr	r3, [r4, #4]
 810db50:	1ac0      	subs	r0, r0, r3
 810db52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810db54:	b10b      	cbz	r3, 810db5a <__sflush_r+0x46>
 810db56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810db58:	1ac0      	subs	r0, r0, r3
 810db5a:	2300      	movs	r3, #0
 810db5c:	4602      	mov	r2, r0
 810db5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810db60:	6a21      	ldr	r1, [r4, #32]
 810db62:	4628      	mov	r0, r5
 810db64:	47b0      	blx	r6
 810db66:	1c43      	adds	r3, r0, #1
 810db68:	89a3      	ldrh	r3, [r4, #12]
 810db6a:	d106      	bne.n	810db7a <__sflush_r+0x66>
 810db6c:	6829      	ldr	r1, [r5, #0]
 810db6e:	291d      	cmp	r1, #29
 810db70:	d82c      	bhi.n	810dbcc <__sflush_r+0xb8>
 810db72:	4a2a      	ldr	r2, [pc, #168]	; (810dc1c <__sflush_r+0x108>)
 810db74:	40ca      	lsrs	r2, r1
 810db76:	07d6      	lsls	r6, r2, #31
 810db78:	d528      	bpl.n	810dbcc <__sflush_r+0xb8>
 810db7a:	2200      	movs	r2, #0
 810db7c:	6062      	str	r2, [r4, #4]
 810db7e:	04d9      	lsls	r1, r3, #19
 810db80:	6922      	ldr	r2, [r4, #16]
 810db82:	6022      	str	r2, [r4, #0]
 810db84:	d504      	bpl.n	810db90 <__sflush_r+0x7c>
 810db86:	1c42      	adds	r2, r0, #1
 810db88:	d101      	bne.n	810db8e <__sflush_r+0x7a>
 810db8a:	682b      	ldr	r3, [r5, #0]
 810db8c:	b903      	cbnz	r3, 810db90 <__sflush_r+0x7c>
 810db8e:	6560      	str	r0, [r4, #84]	; 0x54
 810db90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810db92:	602f      	str	r7, [r5, #0]
 810db94:	2900      	cmp	r1, #0
 810db96:	d0ca      	beq.n	810db2e <__sflush_r+0x1a>
 810db98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810db9c:	4299      	cmp	r1, r3
 810db9e:	d002      	beq.n	810dba6 <__sflush_r+0x92>
 810dba0:	4628      	mov	r0, r5
 810dba2:	f7fd f9b1 	bl	810af08 <_free_r>
 810dba6:	2000      	movs	r0, #0
 810dba8:	6360      	str	r0, [r4, #52]	; 0x34
 810dbaa:	e7c1      	b.n	810db30 <__sflush_r+0x1c>
 810dbac:	6a21      	ldr	r1, [r4, #32]
 810dbae:	2301      	movs	r3, #1
 810dbb0:	4628      	mov	r0, r5
 810dbb2:	47b0      	blx	r6
 810dbb4:	1c41      	adds	r1, r0, #1
 810dbb6:	d1c7      	bne.n	810db48 <__sflush_r+0x34>
 810dbb8:	682b      	ldr	r3, [r5, #0]
 810dbba:	2b00      	cmp	r3, #0
 810dbbc:	d0c4      	beq.n	810db48 <__sflush_r+0x34>
 810dbbe:	2b1d      	cmp	r3, #29
 810dbc0:	d001      	beq.n	810dbc6 <__sflush_r+0xb2>
 810dbc2:	2b16      	cmp	r3, #22
 810dbc4:	d101      	bne.n	810dbca <__sflush_r+0xb6>
 810dbc6:	602f      	str	r7, [r5, #0]
 810dbc8:	e7b1      	b.n	810db2e <__sflush_r+0x1a>
 810dbca:	89a3      	ldrh	r3, [r4, #12]
 810dbcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810dbd0:	81a3      	strh	r3, [r4, #12]
 810dbd2:	e7ad      	b.n	810db30 <__sflush_r+0x1c>
 810dbd4:	690f      	ldr	r7, [r1, #16]
 810dbd6:	2f00      	cmp	r7, #0
 810dbd8:	d0a9      	beq.n	810db2e <__sflush_r+0x1a>
 810dbda:	0793      	lsls	r3, r2, #30
 810dbdc:	680e      	ldr	r6, [r1, #0]
 810dbde:	bf08      	it	eq
 810dbe0:	694b      	ldreq	r3, [r1, #20]
 810dbe2:	600f      	str	r7, [r1, #0]
 810dbe4:	bf18      	it	ne
 810dbe6:	2300      	movne	r3, #0
 810dbe8:	eba6 0807 	sub.w	r8, r6, r7
 810dbec:	608b      	str	r3, [r1, #8]
 810dbee:	f1b8 0f00 	cmp.w	r8, #0
 810dbf2:	dd9c      	ble.n	810db2e <__sflush_r+0x1a>
 810dbf4:	6a21      	ldr	r1, [r4, #32]
 810dbf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810dbf8:	4643      	mov	r3, r8
 810dbfa:	463a      	mov	r2, r7
 810dbfc:	4628      	mov	r0, r5
 810dbfe:	47b0      	blx	r6
 810dc00:	2800      	cmp	r0, #0
 810dc02:	dc06      	bgt.n	810dc12 <__sflush_r+0xfe>
 810dc04:	89a3      	ldrh	r3, [r4, #12]
 810dc06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810dc0a:	81a3      	strh	r3, [r4, #12]
 810dc0c:	f04f 30ff 	mov.w	r0, #4294967295
 810dc10:	e78e      	b.n	810db30 <__sflush_r+0x1c>
 810dc12:	4407      	add	r7, r0
 810dc14:	eba8 0800 	sub.w	r8, r8, r0
 810dc18:	e7e9      	b.n	810dbee <__sflush_r+0xda>
 810dc1a:	bf00      	nop
 810dc1c:	20400001 	.word	0x20400001

0810dc20 <_fflush_r>:
 810dc20:	b538      	push	{r3, r4, r5, lr}
 810dc22:	690b      	ldr	r3, [r1, #16]
 810dc24:	4605      	mov	r5, r0
 810dc26:	460c      	mov	r4, r1
 810dc28:	b913      	cbnz	r3, 810dc30 <_fflush_r+0x10>
 810dc2a:	2500      	movs	r5, #0
 810dc2c:	4628      	mov	r0, r5
 810dc2e:	bd38      	pop	{r3, r4, r5, pc}
 810dc30:	b118      	cbz	r0, 810dc3a <_fflush_r+0x1a>
 810dc32:	6983      	ldr	r3, [r0, #24]
 810dc34:	b90b      	cbnz	r3, 810dc3a <_fflush_r+0x1a>
 810dc36:	f000 f887 	bl	810dd48 <__sinit>
 810dc3a:	4b14      	ldr	r3, [pc, #80]	; (810dc8c <_fflush_r+0x6c>)
 810dc3c:	429c      	cmp	r4, r3
 810dc3e:	d11b      	bne.n	810dc78 <_fflush_r+0x58>
 810dc40:	686c      	ldr	r4, [r5, #4]
 810dc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810dc46:	2b00      	cmp	r3, #0
 810dc48:	d0ef      	beq.n	810dc2a <_fflush_r+0xa>
 810dc4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810dc4c:	07d0      	lsls	r0, r2, #31
 810dc4e:	d404      	bmi.n	810dc5a <_fflush_r+0x3a>
 810dc50:	0599      	lsls	r1, r3, #22
 810dc52:	d402      	bmi.n	810dc5a <_fflush_r+0x3a>
 810dc54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810dc56:	f000 fc88 	bl	810e56a <__retarget_lock_acquire_recursive>
 810dc5a:	4628      	mov	r0, r5
 810dc5c:	4621      	mov	r1, r4
 810dc5e:	f7ff ff59 	bl	810db14 <__sflush_r>
 810dc62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810dc64:	07da      	lsls	r2, r3, #31
 810dc66:	4605      	mov	r5, r0
 810dc68:	d4e0      	bmi.n	810dc2c <_fflush_r+0xc>
 810dc6a:	89a3      	ldrh	r3, [r4, #12]
 810dc6c:	059b      	lsls	r3, r3, #22
 810dc6e:	d4dd      	bmi.n	810dc2c <_fflush_r+0xc>
 810dc70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810dc72:	f000 fc7b 	bl	810e56c <__retarget_lock_release_recursive>
 810dc76:	e7d9      	b.n	810dc2c <_fflush_r+0xc>
 810dc78:	4b05      	ldr	r3, [pc, #20]	; (810dc90 <_fflush_r+0x70>)
 810dc7a:	429c      	cmp	r4, r3
 810dc7c:	d101      	bne.n	810dc82 <_fflush_r+0x62>
 810dc7e:	68ac      	ldr	r4, [r5, #8]
 810dc80:	e7df      	b.n	810dc42 <_fflush_r+0x22>
 810dc82:	4b04      	ldr	r3, [pc, #16]	; (810dc94 <_fflush_r+0x74>)
 810dc84:	429c      	cmp	r4, r3
 810dc86:	bf08      	it	eq
 810dc88:	68ec      	ldreq	r4, [r5, #12]
 810dc8a:	e7da      	b.n	810dc42 <_fflush_r+0x22>
 810dc8c:	0810fdb4 	.word	0x0810fdb4
 810dc90:	0810fdd4 	.word	0x0810fdd4
 810dc94:	0810fd94 	.word	0x0810fd94

0810dc98 <std>:
 810dc98:	2300      	movs	r3, #0
 810dc9a:	b510      	push	{r4, lr}
 810dc9c:	4604      	mov	r4, r0
 810dc9e:	e9c0 3300 	strd	r3, r3, [r0]
 810dca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810dca6:	6083      	str	r3, [r0, #8]
 810dca8:	8181      	strh	r1, [r0, #12]
 810dcaa:	6643      	str	r3, [r0, #100]	; 0x64
 810dcac:	81c2      	strh	r2, [r0, #14]
 810dcae:	6183      	str	r3, [r0, #24]
 810dcb0:	4619      	mov	r1, r3
 810dcb2:	2208      	movs	r2, #8
 810dcb4:	305c      	adds	r0, #92	; 0x5c
 810dcb6:	f7fd f91f 	bl	810aef8 <memset>
 810dcba:	4b05      	ldr	r3, [pc, #20]	; (810dcd0 <std+0x38>)
 810dcbc:	6263      	str	r3, [r4, #36]	; 0x24
 810dcbe:	4b05      	ldr	r3, [pc, #20]	; (810dcd4 <std+0x3c>)
 810dcc0:	62a3      	str	r3, [r4, #40]	; 0x28
 810dcc2:	4b05      	ldr	r3, [pc, #20]	; (810dcd8 <std+0x40>)
 810dcc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 810dcc6:	4b05      	ldr	r3, [pc, #20]	; (810dcdc <std+0x44>)
 810dcc8:	6224      	str	r4, [r4, #32]
 810dcca:	6323      	str	r3, [r4, #48]	; 0x30
 810dccc:	bd10      	pop	{r4, pc}
 810dcce:	bf00      	nop
 810dcd0:	0810f5a1 	.word	0x0810f5a1
 810dcd4:	0810f5c3 	.word	0x0810f5c3
 810dcd8:	0810f5fb 	.word	0x0810f5fb
 810dcdc:	0810f61f 	.word	0x0810f61f

0810dce0 <_cleanup_r>:
 810dce0:	4901      	ldr	r1, [pc, #4]	; (810dce8 <_cleanup_r+0x8>)
 810dce2:	f000 b8af 	b.w	810de44 <_fwalk_reent>
 810dce6:	bf00      	nop
 810dce8:	0810dc21 	.word	0x0810dc21

0810dcec <__sfmoreglue>:
 810dcec:	b570      	push	{r4, r5, r6, lr}
 810dcee:	2268      	movs	r2, #104	; 0x68
 810dcf0:	1e4d      	subs	r5, r1, #1
 810dcf2:	4355      	muls	r5, r2
 810dcf4:	460e      	mov	r6, r1
 810dcf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810dcfa:	f7fd f971 	bl	810afe0 <_malloc_r>
 810dcfe:	4604      	mov	r4, r0
 810dd00:	b140      	cbz	r0, 810dd14 <__sfmoreglue+0x28>
 810dd02:	2100      	movs	r1, #0
 810dd04:	e9c0 1600 	strd	r1, r6, [r0]
 810dd08:	300c      	adds	r0, #12
 810dd0a:	60a0      	str	r0, [r4, #8]
 810dd0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810dd10:	f7fd f8f2 	bl	810aef8 <memset>
 810dd14:	4620      	mov	r0, r4
 810dd16:	bd70      	pop	{r4, r5, r6, pc}

0810dd18 <__sfp_lock_acquire>:
 810dd18:	4801      	ldr	r0, [pc, #4]	; (810dd20 <__sfp_lock_acquire+0x8>)
 810dd1a:	f000 bc26 	b.w	810e56a <__retarget_lock_acquire_recursive>
 810dd1e:	bf00      	nop
 810dd20:	100004b1 	.word	0x100004b1

0810dd24 <__sfp_lock_release>:
 810dd24:	4801      	ldr	r0, [pc, #4]	; (810dd2c <__sfp_lock_release+0x8>)
 810dd26:	f000 bc21 	b.w	810e56c <__retarget_lock_release_recursive>
 810dd2a:	bf00      	nop
 810dd2c:	100004b1 	.word	0x100004b1

0810dd30 <__sinit_lock_acquire>:
 810dd30:	4801      	ldr	r0, [pc, #4]	; (810dd38 <__sinit_lock_acquire+0x8>)
 810dd32:	f000 bc1a 	b.w	810e56a <__retarget_lock_acquire_recursive>
 810dd36:	bf00      	nop
 810dd38:	100004b2 	.word	0x100004b2

0810dd3c <__sinit_lock_release>:
 810dd3c:	4801      	ldr	r0, [pc, #4]	; (810dd44 <__sinit_lock_release+0x8>)
 810dd3e:	f000 bc15 	b.w	810e56c <__retarget_lock_release_recursive>
 810dd42:	bf00      	nop
 810dd44:	100004b2 	.word	0x100004b2

0810dd48 <__sinit>:
 810dd48:	b510      	push	{r4, lr}
 810dd4a:	4604      	mov	r4, r0
 810dd4c:	f7ff fff0 	bl	810dd30 <__sinit_lock_acquire>
 810dd50:	69a3      	ldr	r3, [r4, #24]
 810dd52:	b11b      	cbz	r3, 810dd5c <__sinit+0x14>
 810dd54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810dd58:	f7ff bff0 	b.w	810dd3c <__sinit_lock_release>
 810dd5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810dd60:	6523      	str	r3, [r4, #80]	; 0x50
 810dd62:	4b13      	ldr	r3, [pc, #76]	; (810ddb0 <__sinit+0x68>)
 810dd64:	4a13      	ldr	r2, [pc, #76]	; (810ddb4 <__sinit+0x6c>)
 810dd66:	681b      	ldr	r3, [r3, #0]
 810dd68:	62a2      	str	r2, [r4, #40]	; 0x28
 810dd6a:	42a3      	cmp	r3, r4
 810dd6c:	bf04      	itt	eq
 810dd6e:	2301      	moveq	r3, #1
 810dd70:	61a3      	streq	r3, [r4, #24]
 810dd72:	4620      	mov	r0, r4
 810dd74:	f000 f820 	bl	810ddb8 <__sfp>
 810dd78:	6060      	str	r0, [r4, #4]
 810dd7a:	4620      	mov	r0, r4
 810dd7c:	f000 f81c 	bl	810ddb8 <__sfp>
 810dd80:	60a0      	str	r0, [r4, #8]
 810dd82:	4620      	mov	r0, r4
 810dd84:	f000 f818 	bl	810ddb8 <__sfp>
 810dd88:	2200      	movs	r2, #0
 810dd8a:	60e0      	str	r0, [r4, #12]
 810dd8c:	2104      	movs	r1, #4
 810dd8e:	6860      	ldr	r0, [r4, #4]
 810dd90:	f7ff ff82 	bl	810dc98 <std>
 810dd94:	68a0      	ldr	r0, [r4, #8]
 810dd96:	2201      	movs	r2, #1
 810dd98:	2109      	movs	r1, #9
 810dd9a:	f7ff ff7d 	bl	810dc98 <std>
 810dd9e:	68e0      	ldr	r0, [r4, #12]
 810dda0:	2202      	movs	r2, #2
 810dda2:	2112      	movs	r1, #18
 810dda4:	f7ff ff78 	bl	810dc98 <std>
 810dda8:	2301      	movs	r3, #1
 810ddaa:	61a3      	str	r3, [r4, #24]
 810ddac:	e7d2      	b.n	810dd54 <__sinit+0xc>
 810ddae:	bf00      	nop
 810ddb0:	0810fb70 	.word	0x0810fb70
 810ddb4:	0810dce1 	.word	0x0810dce1

0810ddb8 <__sfp>:
 810ddb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ddba:	4607      	mov	r7, r0
 810ddbc:	f7ff ffac 	bl	810dd18 <__sfp_lock_acquire>
 810ddc0:	4b1e      	ldr	r3, [pc, #120]	; (810de3c <__sfp+0x84>)
 810ddc2:	681e      	ldr	r6, [r3, #0]
 810ddc4:	69b3      	ldr	r3, [r6, #24]
 810ddc6:	b913      	cbnz	r3, 810ddce <__sfp+0x16>
 810ddc8:	4630      	mov	r0, r6
 810ddca:	f7ff ffbd 	bl	810dd48 <__sinit>
 810ddce:	3648      	adds	r6, #72	; 0x48
 810ddd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810ddd4:	3b01      	subs	r3, #1
 810ddd6:	d503      	bpl.n	810dde0 <__sfp+0x28>
 810ddd8:	6833      	ldr	r3, [r6, #0]
 810ddda:	b30b      	cbz	r3, 810de20 <__sfp+0x68>
 810dddc:	6836      	ldr	r6, [r6, #0]
 810ddde:	e7f7      	b.n	810ddd0 <__sfp+0x18>
 810dde0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810dde4:	b9d5      	cbnz	r5, 810de1c <__sfp+0x64>
 810dde6:	4b16      	ldr	r3, [pc, #88]	; (810de40 <__sfp+0x88>)
 810dde8:	60e3      	str	r3, [r4, #12]
 810ddea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810ddee:	6665      	str	r5, [r4, #100]	; 0x64
 810ddf0:	f000 fbba 	bl	810e568 <__retarget_lock_init_recursive>
 810ddf4:	f7ff ff96 	bl	810dd24 <__sfp_lock_release>
 810ddf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810ddfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810de00:	6025      	str	r5, [r4, #0]
 810de02:	61a5      	str	r5, [r4, #24]
 810de04:	2208      	movs	r2, #8
 810de06:	4629      	mov	r1, r5
 810de08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810de0c:	f7fd f874 	bl	810aef8 <memset>
 810de10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810de14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810de18:	4620      	mov	r0, r4
 810de1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810de1c:	3468      	adds	r4, #104	; 0x68
 810de1e:	e7d9      	b.n	810ddd4 <__sfp+0x1c>
 810de20:	2104      	movs	r1, #4
 810de22:	4638      	mov	r0, r7
 810de24:	f7ff ff62 	bl	810dcec <__sfmoreglue>
 810de28:	4604      	mov	r4, r0
 810de2a:	6030      	str	r0, [r6, #0]
 810de2c:	2800      	cmp	r0, #0
 810de2e:	d1d5      	bne.n	810dddc <__sfp+0x24>
 810de30:	f7ff ff78 	bl	810dd24 <__sfp_lock_release>
 810de34:	230c      	movs	r3, #12
 810de36:	603b      	str	r3, [r7, #0]
 810de38:	e7ee      	b.n	810de18 <__sfp+0x60>
 810de3a:	bf00      	nop
 810de3c:	0810fb70 	.word	0x0810fb70
 810de40:	ffff0001 	.word	0xffff0001

0810de44 <_fwalk_reent>:
 810de44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810de48:	4606      	mov	r6, r0
 810de4a:	4688      	mov	r8, r1
 810de4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810de50:	2700      	movs	r7, #0
 810de52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810de56:	f1b9 0901 	subs.w	r9, r9, #1
 810de5a:	d505      	bpl.n	810de68 <_fwalk_reent+0x24>
 810de5c:	6824      	ldr	r4, [r4, #0]
 810de5e:	2c00      	cmp	r4, #0
 810de60:	d1f7      	bne.n	810de52 <_fwalk_reent+0xe>
 810de62:	4638      	mov	r0, r7
 810de64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810de68:	89ab      	ldrh	r3, [r5, #12]
 810de6a:	2b01      	cmp	r3, #1
 810de6c:	d907      	bls.n	810de7e <_fwalk_reent+0x3a>
 810de6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810de72:	3301      	adds	r3, #1
 810de74:	d003      	beq.n	810de7e <_fwalk_reent+0x3a>
 810de76:	4629      	mov	r1, r5
 810de78:	4630      	mov	r0, r6
 810de7a:	47c0      	blx	r8
 810de7c:	4307      	orrs	r7, r0
 810de7e:	3568      	adds	r5, #104	; 0x68
 810de80:	e7e9      	b.n	810de56 <_fwalk_reent+0x12>

0810de82 <rshift>:
 810de82:	6903      	ldr	r3, [r0, #16]
 810de84:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810de88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810de8c:	ea4f 1261 	mov.w	r2, r1, asr #5
 810de90:	f100 0414 	add.w	r4, r0, #20
 810de94:	dd45      	ble.n	810df22 <rshift+0xa0>
 810de96:	f011 011f 	ands.w	r1, r1, #31
 810de9a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810de9e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810dea2:	d10c      	bne.n	810debe <rshift+0x3c>
 810dea4:	f100 0710 	add.w	r7, r0, #16
 810dea8:	4629      	mov	r1, r5
 810deaa:	42b1      	cmp	r1, r6
 810deac:	d334      	bcc.n	810df18 <rshift+0x96>
 810deae:	1a9b      	subs	r3, r3, r2
 810deb0:	009b      	lsls	r3, r3, #2
 810deb2:	1eea      	subs	r2, r5, #3
 810deb4:	4296      	cmp	r6, r2
 810deb6:	bf38      	it	cc
 810deb8:	2300      	movcc	r3, #0
 810deba:	4423      	add	r3, r4
 810debc:	e015      	b.n	810deea <rshift+0x68>
 810debe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810dec2:	f1c1 0820 	rsb	r8, r1, #32
 810dec6:	40cf      	lsrs	r7, r1
 810dec8:	f105 0e04 	add.w	lr, r5, #4
 810decc:	46a1      	mov	r9, r4
 810dece:	4576      	cmp	r6, lr
 810ded0:	46f4      	mov	ip, lr
 810ded2:	d815      	bhi.n	810df00 <rshift+0x7e>
 810ded4:	1a9a      	subs	r2, r3, r2
 810ded6:	0092      	lsls	r2, r2, #2
 810ded8:	3a04      	subs	r2, #4
 810deda:	3501      	adds	r5, #1
 810dedc:	42ae      	cmp	r6, r5
 810dede:	bf38      	it	cc
 810dee0:	2200      	movcc	r2, #0
 810dee2:	18a3      	adds	r3, r4, r2
 810dee4:	50a7      	str	r7, [r4, r2]
 810dee6:	b107      	cbz	r7, 810deea <rshift+0x68>
 810dee8:	3304      	adds	r3, #4
 810deea:	1b1a      	subs	r2, r3, r4
 810deec:	42a3      	cmp	r3, r4
 810deee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810def2:	bf08      	it	eq
 810def4:	2300      	moveq	r3, #0
 810def6:	6102      	str	r2, [r0, #16]
 810def8:	bf08      	it	eq
 810defa:	6143      	streq	r3, [r0, #20]
 810defc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810df00:	f8dc c000 	ldr.w	ip, [ip]
 810df04:	fa0c fc08 	lsl.w	ip, ip, r8
 810df08:	ea4c 0707 	orr.w	r7, ip, r7
 810df0c:	f849 7b04 	str.w	r7, [r9], #4
 810df10:	f85e 7b04 	ldr.w	r7, [lr], #4
 810df14:	40cf      	lsrs	r7, r1
 810df16:	e7da      	b.n	810dece <rshift+0x4c>
 810df18:	f851 cb04 	ldr.w	ip, [r1], #4
 810df1c:	f847 cf04 	str.w	ip, [r7, #4]!
 810df20:	e7c3      	b.n	810deaa <rshift+0x28>
 810df22:	4623      	mov	r3, r4
 810df24:	e7e1      	b.n	810deea <rshift+0x68>

0810df26 <__hexdig_fun>:
 810df26:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810df2a:	2b09      	cmp	r3, #9
 810df2c:	d802      	bhi.n	810df34 <__hexdig_fun+0xe>
 810df2e:	3820      	subs	r0, #32
 810df30:	b2c0      	uxtb	r0, r0
 810df32:	4770      	bx	lr
 810df34:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810df38:	2b05      	cmp	r3, #5
 810df3a:	d801      	bhi.n	810df40 <__hexdig_fun+0x1a>
 810df3c:	3847      	subs	r0, #71	; 0x47
 810df3e:	e7f7      	b.n	810df30 <__hexdig_fun+0xa>
 810df40:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810df44:	2b05      	cmp	r3, #5
 810df46:	d801      	bhi.n	810df4c <__hexdig_fun+0x26>
 810df48:	3827      	subs	r0, #39	; 0x27
 810df4a:	e7f1      	b.n	810df30 <__hexdig_fun+0xa>
 810df4c:	2000      	movs	r0, #0
 810df4e:	4770      	bx	lr

0810df50 <__gethex>:
 810df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810df54:	ed2d 8b02 	vpush	{d8}
 810df58:	b089      	sub	sp, #36	; 0x24
 810df5a:	ee08 0a10 	vmov	s16, r0
 810df5e:	9304      	str	r3, [sp, #16]
 810df60:	4bb4      	ldr	r3, [pc, #720]	; (810e234 <__gethex+0x2e4>)
 810df62:	681b      	ldr	r3, [r3, #0]
 810df64:	9301      	str	r3, [sp, #4]
 810df66:	4618      	mov	r0, r3
 810df68:	468b      	mov	fp, r1
 810df6a:	4690      	mov	r8, r2
 810df6c:	f7f2 f9b8 	bl	81002e0 <strlen>
 810df70:	9b01      	ldr	r3, [sp, #4]
 810df72:	f8db 2000 	ldr.w	r2, [fp]
 810df76:	4403      	add	r3, r0
 810df78:	4682      	mov	sl, r0
 810df7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810df7e:	9305      	str	r3, [sp, #20]
 810df80:	1c93      	adds	r3, r2, #2
 810df82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810df86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810df8a:	32fe      	adds	r2, #254	; 0xfe
 810df8c:	18d1      	adds	r1, r2, r3
 810df8e:	461f      	mov	r7, r3
 810df90:	f813 0b01 	ldrb.w	r0, [r3], #1
 810df94:	9100      	str	r1, [sp, #0]
 810df96:	2830      	cmp	r0, #48	; 0x30
 810df98:	d0f8      	beq.n	810df8c <__gethex+0x3c>
 810df9a:	f7ff ffc4 	bl	810df26 <__hexdig_fun>
 810df9e:	4604      	mov	r4, r0
 810dfa0:	2800      	cmp	r0, #0
 810dfa2:	d13a      	bne.n	810e01a <__gethex+0xca>
 810dfa4:	9901      	ldr	r1, [sp, #4]
 810dfa6:	4652      	mov	r2, sl
 810dfa8:	4638      	mov	r0, r7
 810dfaa:	f001 fb3c 	bl	810f626 <strncmp>
 810dfae:	4605      	mov	r5, r0
 810dfb0:	2800      	cmp	r0, #0
 810dfb2:	d168      	bne.n	810e086 <__gethex+0x136>
 810dfb4:	f817 000a 	ldrb.w	r0, [r7, sl]
 810dfb8:	eb07 060a 	add.w	r6, r7, sl
 810dfbc:	f7ff ffb3 	bl	810df26 <__hexdig_fun>
 810dfc0:	2800      	cmp	r0, #0
 810dfc2:	d062      	beq.n	810e08a <__gethex+0x13a>
 810dfc4:	4633      	mov	r3, r6
 810dfc6:	7818      	ldrb	r0, [r3, #0]
 810dfc8:	2830      	cmp	r0, #48	; 0x30
 810dfca:	461f      	mov	r7, r3
 810dfcc:	f103 0301 	add.w	r3, r3, #1
 810dfd0:	d0f9      	beq.n	810dfc6 <__gethex+0x76>
 810dfd2:	f7ff ffa8 	bl	810df26 <__hexdig_fun>
 810dfd6:	2301      	movs	r3, #1
 810dfd8:	fab0 f480 	clz	r4, r0
 810dfdc:	0964      	lsrs	r4, r4, #5
 810dfde:	4635      	mov	r5, r6
 810dfe0:	9300      	str	r3, [sp, #0]
 810dfe2:	463a      	mov	r2, r7
 810dfe4:	4616      	mov	r6, r2
 810dfe6:	3201      	adds	r2, #1
 810dfe8:	7830      	ldrb	r0, [r6, #0]
 810dfea:	f7ff ff9c 	bl	810df26 <__hexdig_fun>
 810dfee:	2800      	cmp	r0, #0
 810dff0:	d1f8      	bne.n	810dfe4 <__gethex+0x94>
 810dff2:	9901      	ldr	r1, [sp, #4]
 810dff4:	4652      	mov	r2, sl
 810dff6:	4630      	mov	r0, r6
 810dff8:	f001 fb15 	bl	810f626 <strncmp>
 810dffc:	b980      	cbnz	r0, 810e020 <__gethex+0xd0>
 810dffe:	b94d      	cbnz	r5, 810e014 <__gethex+0xc4>
 810e000:	eb06 050a 	add.w	r5, r6, sl
 810e004:	462a      	mov	r2, r5
 810e006:	4616      	mov	r6, r2
 810e008:	3201      	adds	r2, #1
 810e00a:	7830      	ldrb	r0, [r6, #0]
 810e00c:	f7ff ff8b 	bl	810df26 <__hexdig_fun>
 810e010:	2800      	cmp	r0, #0
 810e012:	d1f8      	bne.n	810e006 <__gethex+0xb6>
 810e014:	1bad      	subs	r5, r5, r6
 810e016:	00ad      	lsls	r5, r5, #2
 810e018:	e004      	b.n	810e024 <__gethex+0xd4>
 810e01a:	2400      	movs	r4, #0
 810e01c:	4625      	mov	r5, r4
 810e01e:	e7e0      	b.n	810dfe2 <__gethex+0x92>
 810e020:	2d00      	cmp	r5, #0
 810e022:	d1f7      	bne.n	810e014 <__gethex+0xc4>
 810e024:	7833      	ldrb	r3, [r6, #0]
 810e026:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810e02a:	2b50      	cmp	r3, #80	; 0x50
 810e02c:	d13b      	bne.n	810e0a6 <__gethex+0x156>
 810e02e:	7873      	ldrb	r3, [r6, #1]
 810e030:	2b2b      	cmp	r3, #43	; 0x2b
 810e032:	d02c      	beq.n	810e08e <__gethex+0x13e>
 810e034:	2b2d      	cmp	r3, #45	; 0x2d
 810e036:	d02e      	beq.n	810e096 <__gethex+0x146>
 810e038:	1c71      	adds	r1, r6, #1
 810e03a:	f04f 0900 	mov.w	r9, #0
 810e03e:	7808      	ldrb	r0, [r1, #0]
 810e040:	f7ff ff71 	bl	810df26 <__hexdig_fun>
 810e044:	1e43      	subs	r3, r0, #1
 810e046:	b2db      	uxtb	r3, r3
 810e048:	2b18      	cmp	r3, #24
 810e04a:	d82c      	bhi.n	810e0a6 <__gethex+0x156>
 810e04c:	f1a0 0210 	sub.w	r2, r0, #16
 810e050:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810e054:	f7ff ff67 	bl	810df26 <__hexdig_fun>
 810e058:	1e43      	subs	r3, r0, #1
 810e05a:	b2db      	uxtb	r3, r3
 810e05c:	2b18      	cmp	r3, #24
 810e05e:	d91d      	bls.n	810e09c <__gethex+0x14c>
 810e060:	f1b9 0f00 	cmp.w	r9, #0
 810e064:	d000      	beq.n	810e068 <__gethex+0x118>
 810e066:	4252      	negs	r2, r2
 810e068:	4415      	add	r5, r2
 810e06a:	f8cb 1000 	str.w	r1, [fp]
 810e06e:	b1e4      	cbz	r4, 810e0aa <__gethex+0x15a>
 810e070:	9b00      	ldr	r3, [sp, #0]
 810e072:	2b00      	cmp	r3, #0
 810e074:	bf14      	ite	ne
 810e076:	2700      	movne	r7, #0
 810e078:	2706      	moveq	r7, #6
 810e07a:	4638      	mov	r0, r7
 810e07c:	b009      	add	sp, #36	; 0x24
 810e07e:	ecbd 8b02 	vpop	{d8}
 810e082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e086:	463e      	mov	r6, r7
 810e088:	4625      	mov	r5, r4
 810e08a:	2401      	movs	r4, #1
 810e08c:	e7ca      	b.n	810e024 <__gethex+0xd4>
 810e08e:	f04f 0900 	mov.w	r9, #0
 810e092:	1cb1      	adds	r1, r6, #2
 810e094:	e7d3      	b.n	810e03e <__gethex+0xee>
 810e096:	f04f 0901 	mov.w	r9, #1
 810e09a:	e7fa      	b.n	810e092 <__gethex+0x142>
 810e09c:	230a      	movs	r3, #10
 810e09e:	fb03 0202 	mla	r2, r3, r2, r0
 810e0a2:	3a10      	subs	r2, #16
 810e0a4:	e7d4      	b.n	810e050 <__gethex+0x100>
 810e0a6:	4631      	mov	r1, r6
 810e0a8:	e7df      	b.n	810e06a <__gethex+0x11a>
 810e0aa:	1bf3      	subs	r3, r6, r7
 810e0ac:	3b01      	subs	r3, #1
 810e0ae:	4621      	mov	r1, r4
 810e0b0:	2b07      	cmp	r3, #7
 810e0b2:	dc0b      	bgt.n	810e0cc <__gethex+0x17c>
 810e0b4:	ee18 0a10 	vmov	r0, s16
 810e0b8:	f000 fadc 	bl	810e674 <_Balloc>
 810e0bc:	4604      	mov	r4, r0
 810e0be:	b940      	cbnz	r0, 810e0d2 <__gethex+0x182>
 810e0c0:	4b5d      	ldr	r3, [pc, #372]	; (810e238 <__gethex+0x2e8>)
 810e0c2:	4602      	mov	r2, r0
 810e0c4:	21de      	movs	r1, #222	; 0xde
 810e0c6:	485d      	ldr	r0, [pc, #372]	; (810e23c <__gethex+0x2ec>)
 810e0c8:	f001 fae0 	bl	810f68c <__assert_func>
 810e0cc:	3101      	adds	r1, #1
 810e0ce:	105b      	asrs	r3, r3, #1
 810e0d0:	e7ee      	b.n	810e0b0 <__gethex+0x160>
 810e0d2:	f100 0914 	add.w	r9, r0, #20
 810e0d6:	f04f 0b00 	mov.w	fp, #0
 810e0da:	f1ca 0301 	rsb	r3, sl, #1
 810e0de:	f8cd 9008 	str.w	r9, [sp, #8]
 810e0e2:	f8cd b000 	str.w	fp, [sp]
 810e0e6:	9306      	str	r3, [sp, #24]
 810e0e8:	42b7      	cmp	r7, r6
 810e0ea:	d340      	bcc.n	810e16e <__gethex+0x21e>
 810e0ec:	9802      	ldr	r0, [sp, #8]
 810e0ee:	9b00      	ldr	r3, [sp, #0]
 810e0f0:	f840 3b04 	str.w	r3, [r0], #4
 810e0f4:	eba0 0009 	sub.w	r0, r0, r9
 810e0f8:	1080      	asrs	r0, r0, #2
 810e0fa:	0146      	lsls	r6, r0, #5
 810e0fc:	6120      	str	r0, [r4, #16]
 810e0fe:	4618      	mov	r0, r3
 810e100:	f000 fbaa 	bl	810e858 <__hi0bits>
 810e104:	1a30      	subs	r0, r6, r0
 810e106:	f8d8 6000 	ldr.w	r6, [r8]
 810e10a:	42b0      	cmp	r0, r6
 810e10c:	dd63      	ble.n	810e1d6 <__gethex+0x286>
 810e10e:	1b87      	subs	r7, r0, r6
 810e110:	4639      	mov	r1, r7
 810e112:	4620      	mov	r0, r4
 810e114:	f000 ff4e 	bl	810efb4 <__any_on>
 810e118:	4682      	mov	sl, r0
 810e11a:	b1a8      	cbz	r0, 810e148 <__gethex+0x1f8>
 810e11c:	1e7b      	subs	r3, r7, #1
 810e11e:	1159      	asrs	r1, r3, #5
 810e120:	f003 021f 	and.w	r2, r3, #31
 810e124:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810e128:	f04f 0a01 	mov.w	sl, #1
 810e12c:	fa0a f202 	lsl.w	r2, sl, r2
 810e130:	420a      	tst	r2, r1
 810e132:	d009      	beq.n	810e148 <__gethex+0x1f8>
 810e134:	4553      	cmp	r3, sl
 810e136:	dd05      	ble.n	810e144 <__gethex+0x1f4>
 810e138:	1eb9      	subs	r1, r7, #2
 810e13a:	4620      	mov	r0, r4
 810e13c:	f000 ff3a 	bl	810efb4 <__any_on>
 810e140:	2800      	cmp	r0, #0
 810e142:	d145      	bne.n	810e1d0 <__gethex+0x280>
 810e144:	f04f 0a02 	mov.w	sl, #2
 810e148:	4639      	mov	r1, r7
 810e14a:	4620      	mov	r0, r4
 810e14c:	f7ff fe99 	bl	810de82 <rshift>
 810e150:	443d      	add	r5, r7
 810e152:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810e156:	42ab      	cmp	r3, r5
 810e158:	da4c      	bge.n	810e1f4 <__gethex+0x2a4>
 810e15a:	ee18 0a10 	vmov	r0, s16
 810e15e:	4621      	mov	r1, r4
 810e160:	f000 fac8 	bl	810e6f4 <_Bfree>
 810e164:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810e166:	2300      	movs	r3, #0
 810e168:	6013      	str	r3, [r2, #0]
 810e16a:	27a3      	movs	r7, #163	; 0xa3
 810e16c:	e785      	b.n	810e07a <__gethex+0x12a>
 810e16e:	1e73      	subs	r3, r6, #1
 810e170:	9a05      	ldr	r2, [sp, #20]
 810e172:	9303      	str	r3, [sp, #12]
 810e174:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810e178:	4293      	cmp	r3, r2
 810e17a:	d019      	beq.n	810e1b0 <__gethex+0x260>
 810e17c:	f1bb 0f20 	cmp.w	fp, #32
 810e180:	d107      	bne.n	810e192 <__gethex+0x242>
 810e182:	9b02      	ldr	r3, [sp, #8]
 810e184:	9a00      	ldr	r2, [sp, #0]
 810e186:	f843 2b04 	str.w	r2, [r3], #4
 810e18a:	9302      	str	r3, [sp, #8]
 810e18c:	2300      	movs	r3, #0
 810e18e:	9300      	str	r3, [sp, #0]
 810e190:	469b      	mov	fp, r3
 810e192:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810e196:	f7ff fec6 	bl	810df26 <__hexdig_fun>
 810e19a:	9b00      	ldr	r3, [sp, #0]
 810e19c:	f000 000f 	and.w	r0, r0, #15
 810e1a0:	fa00 f00b 	lsl.w	r0, r0, fp
 810e1a4:	4303      	orrs	r3, r0
 810e1a6:	9300      	str	r3, [sp, #0]
 810e1a8:	f10b 0b04 	add.w	fp, fp, #4
 810e1ac:	9b03      	ldr	r3, [sp, #12]
 810e1ae:	e00d      	b.n	810e1cc <__gethex+0x27c>
 810e1b0:	9b03      	ldr	r3, [sp, #12]
 810e1b2:	9a06      	ldr	r2, [sp, #24]
 810e1b4:	4413      	add	r3, r2
 810e1b6:	42bb      	cmp	r3, r7
 810e1b8:	d3e0      	bcc.n	810e17c <__gethex+0x22c>
 810e1ba:	4618      	mov	r0, r3
 810e1bc:	9901      	ldr	r1, [sp, #4]
 810e1be:	9307      	str	r3, [sp, #28]
 810e1c0:	4652      	mov	r2, sl
 810e1c2:	f001 fa30 	bl	810f626 <strncmp>
 810e1c6:	9b07      	ldr	r3, [sp, #28]
 810e1c8:	2800      	cmp	r0, #0
 810e1ca:	d1d7      	bne.n	810e17c <__gethex+0x22c>
 810e1cc:	461e      	mov	r6, r3
 810e1ce:	e78b      	b.n	810e0e8 <__gethex+0x198>
 810e1d0:	f04f 0a03 	mov.w	sl, #3
 810e1d4:	e7b8      	b.n	810e148 <__gethex+0x1f8>
 810e1d6:	da0a      	bge.n	810e1ee <__gethex+0x29e>
 810e1d8:	1a37      	subs	r7, r6, r0
 810e1da:	4621      	mov	r1, r4
 810e1dc:	ee18 0a10 	vmov	r0, s16
 810e1e0:	463a      	mov	r2, r7
 810e1e2:	f000 fca3 	bl	810eb2c <__lshift>
 810e1e6:	1bed      	subs	r5, r5, r7
 810e1e8:	4604      	mov	r4, r0
 810e1ea:	f100 0914 	add.w	r9, r0, #20
 810e1ee:	f04f 0a00 	mov.w	sl, #0
 810e1f2:	e7ae      	b.n	810e152 <__gethex+0x202>
 810e1f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810e1f8:	42a8      	cmp	r0, r5
 810e1fa:	dd72      	ble.n	810e2e2 <__gethex+0x392>
 810e1fc:	1b45      	subs	r5, r0, r5
 810e1fe:	42ae      	cmp	r6, r5
 810e200:	dc36      	bgt.n	810e270 <__gethex+0x320>
 810e202:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810e206:	2b02      	cmp	r3, #2
 810e208:	d02a      	beq.n	810e260 <__gethex+0x310>
 810e20a:	2b03      	cmp	r3, #3
 810e20c:	d02c      	beq.n	810e268 <__gethex+0x318>
 810e20e:	2b01      	cmp	r3, #1
 810e210:	d11c      	bne.n	810e24c <__gethex+0x2fc>
 810e212:	42ae      	cmp	r6, r5
 810e214:	d11a      	bne.n	810e24c <__gethex+0x2fc>
 810e216:	2e01      	cmp	r6, #1
 810e218:	d112      	bne.n	810e240 <__gethex+0x2f0>
 810e21a:	9a04      	ldr	r2, [sp, #16]
 810e21c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810e220:	6013      	str	r3, [r2, #0]
 810e222:	2301      	movs	r3, #1
 810e224:	6123      	str	r3, [r4, #16]
 810e226:	f8c9 3000 	str.w	r3, [r9]
 810e22a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810e22c:	2762      	movs	r7, #98	; 0x62
 810e22e:	601c      	str	r4, [r3, #0]
 810e230:	e723      	b.n	810e07a <__gethex+0x12a>
 810e232:	bf00      	nop
 810e234:	0810fe5c 	.word	0x0810fe5c
 810e238:	0810fd80 	.word	0x0810fd80
 810e23c:	0810fdf4 	.word	0x0810fdf4
 810e240:	1e71      	subs	r1, r6, #1
 810e242:	4620      	mov	r0, r4
 810e244:	f000 feb6 	bl	810efb4 <__any_on>
 810e248:	2800      	cmp	r0, #0
 810e24a:	d1e6      	bne.n	810e21a <__gethex+0x2ca>
 810e24c:	ee18 0a10 	vmov	r0, s16
 810e250:	4621      	mov	r1, r4
 810e252:	f000 fa4f 	bl	810e6f4 <_Bfree>
 810e256:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810e258:	2300      	movs	r3, #0
 810e25a:	6013      	str	r3, [r2, #0]
 810e25c:	2750      	movs	r7, #80	; 0x50
 810e25e:	e70c      	b.n	810e07a <__gethex+0x12a>
 810e260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810e262:	2b00      	cmp	r3, #0
 810e264:	d1f2      	bne.n	810e24c <__gethex+0x2fc>
 810e266:	e7d8      	b.n	810e21a <__gethex+0x2ca>
 810e268:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810e26a:	2b00      	cmp	r3, #0
 810e26c:	d1d5      	bne.n	810e21a <__gethex+0x2ca>
 810e26e:	e7ed      	b.n	810e24c <__gethex+0x2fc>
 810e270:	1e6f      	subs	r7, r5, #1
 810e272:	f1ba 0f00 	cmp.w	sl, #0
 810e276:	d131      	bne.n	810e2dc <__gethex+0x38c>
 810e278:	b127      	cbz	r7, 810e284 <__gethex+0x334>
 810e27a:	4639      	mov	r1, r7
 810e27c:	4620      	mov	r0, r4
 810e27e:	f000 fe99 	bl	810efb4 <__any_on>
 810e282:	4682      	mov	sl, r0
 810e284:	117b      	asrs	r3, r7, #5
 810e286:	2101      	movs	r1, #1
 810e288:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810e28c:	f007 071f 	and.w	r7, r7, #31
 810e290:	fa01 f707 	lsl.w	r7, r1, r7
 810e294:	421f      	tst	r7, r3
 810e296:	4629      	mov	r1, r5
 810e298:	4620      	mov	r0, r4
 810e29a:	bf18      	it	ne
 810e29c:	f04a 0a02 	orrne.w	sl, sl, #2
 810e2a0:	1b76      	subs	r6, r6, r5
 810e2a2:	f7ff fdee 	bl	810de82 <rshift>
 810e2a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810e2aa:	2702      	movs	r7, #2
 810e2ac:	f1ba 0f00 	cmp.w	sl, #0
 810e2b0:	d048      	beq.n	810e344 <__gethex+0x3f4>
 810e2b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810e2b6:	2b02      	cmp	r3, #2
 810e2b8:	d015      	beq.n	810e2e6 <__gethex+0x396>
 810e2ba:	2b03      	cmp	r3, #3
 810e2bc:	d017      	beq.n	810e2ee <__gethex+0x39e>
 810e2be:	2b01      	cmp	r3, #1
 810e2c0:	d109      	bne.n	810e2d6 <__gethex+0x386>
 810e2c2:	f01a 0f02 	tst.w	sl, #2
 810e2c6:	d006      	beq.n	810e2d6 <__gethex+0x386>
 810e2c8:	f8d9 0000 	ldr.w	r0, [r9]
 810e2cc:	ea4a 0a00 	orr.w	sl, sl, r0
 810e2d0:	f01a 0f01 	tst.w	sl, #1
 810e2d4:	d10e      	bne.n	810e2f4 <__gethex+0x3a4>
 810e2d6:	f047 0710 	orr.w	r7, r7, #16
 810e2da:	e033      	b.n	810e344 <__gethex+0x3f4>
 810e2dc:	f04f 0a01 	mov.w	sl, #1
 810e2e0:	e7d0      	b.n	810e284 <__gethex+0x334>
 810e2e2:	2701      	movs	r7, #1
 810e2e4:	e7e2      	b.n	810e2ac <__gethex+0x35c>
 810e2e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810e2e8:	f1c3 0301 	rsb	r3, r3, #1
 810e2ec:	9315      	str	r3, [sp, #84]	; 0x54
 810e2ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810e2f0:	2b00      	cmp	r3, #0
 810e2f2:	d0f0      	beq.n	810e2d6 <__gethex+0x386>
 810e2f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810e2f8:	f104 0314 	add.w	r3, r4, #20
 810e2fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810e300:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810e304:	f04f 0c00 	mov.w	ip, #0
 810e308:	4618      	mov	r0, r3
 810e30a:	f853 2b04 	ldr.w	r2, [r3], #4
 810e30e:	f1b2 3fff 	cmp.w	r2, #4294967295
 810e312:	d01c      	beq.n	810e34e <__gethex+0x3fe>
 810e314:	3201      	adds	r2, #1
 810e316:	6002      	str	r2, [r0, #0]
 810e318:	2f02      	cmp	r7, #2
 810e31a:	f104 0314 	add.w	r3, r4, #20
 810e31e:	d13f      	bne.n	810e3a0 <__gethex+0x450>
 810e320:	f8d8 2000 	ldr.w	r2, [r8]
 810e324:	3a01      	subs	r2, #1
 810e326:	42b2      	cmp	r2, r6
 810e328:	d10a      	bne.n	810e340 <__gethex+0x3f0>
 810e32a:	1171      	asrs	r1, r6, #5
 810e32c:	2201      	movs	r2, #1
 810e32e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810e332:	f006 061f 	and.w	r6, r6, #31
 810e336:	fa02 f606 	lsl.w	r6, r2, r6
 810e33a:	421e      	tst	r6, r3
 810e33c:	bf18      	it	ne
 810e33e:	4617      	movne	r7, r2
 810e340:	f047 0720 	orr.w	r7, r7, #32
 810e344:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810e346:	601c      	str	r4, [r3, #0]
 810e348:	9b04      	ldr	r3, [sp, #16]
 810e34a:	601d      	str	r5, [r3, #0]
 810e34c:	e695      	b.n	810e07a <__gethex+0x12a>
 810e34e:	4299      	cmp	r1, r3
 810e350:	f843 cc04 	str.w	ip, [r3, #-4]
 810e354:	d8d8      	bhi.n	810e308 <__gethex+0x3b8>
 810e356:	68a3      	ldr	r3, [r4, #8]
 810e358:	459b      	cmp	fp, r3
 810e35a:	db19      	blt.n	810e390 <__gethex+0x440>
 810e35c:	6861      	ldr	r1, [r4, #4]
 810e35e:	ee18 0a10 	vmov	r0, s16
 810e362:	3101      	adds	r1, #1
 810e364:	f000 f986 	bl	810e674 <_Balloc>
 810e368:	4681      	mov	r9, r0
 810e36a:	b918      	cbnz	r0, 810e374 <__gethex+0x424>
 810e36c:	4b1a      	ldr	r3, [pc, #104]	; (810e3d8 <__gethex+0x488>)
 810e36e:	4602      	mov	r2, r0
 810e370:	2184      	movs	r1, #132	; 0x84
 810e372:	e6a8      	b.n	810e0c6 <__gethex+0x176>
 810e374:	6922      	ldr	r2, [r4, #16]
 810e376:	3202      	adds	r2, #2
 810e378:	f104 010c 	add.w	r1, r4, #12
 810e37c:	0092      	lsls	r2, r2, #2
 810e37e:	300c      	adds	r0, #12
 810e380:	f7fc fdac 	bl	810aedc <memcpy>
 810e384:	4621      	mov	r1, r4
 810e386:	ee18 0a10 	vmov	r0, s16
 810e38a:	f000 f9b3 	bl	810e6f4 <_Bfree>
 810e38e:	464c      	mov	r4, r9
 810e390:	6923      	ldr	r3, [r4, #16]
 810e392:	1c5a      	adds	r2, r3, #1
 810e394:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810e398:	6122      	str	r2, [r4, #16]
 810e39a:	2201      	movs	r2, #1
 810e39c:	615a      	str	r2, [r3, #20]
 810e39e:	e7bb      	b.n	810e318 <__gethex+0x3c8>
 810e3a0:	6922      	ldr	r2, [r4, #16]
 810e3a2:	455a      	cmp	r2, fp
 810e3a4:	dd0b      	ble.n	810e3be <__gethex+0x46e>
 810e3a6:	2101      	movs	r1, #1
 810e3a8:	4620      	mov	r0, r4
 810e3aa:	f7ff fd6a 	bl	810de82 <rshift>
 810e3ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810e3b2:	3501      	adds	r5, #1
 810e3b4:	42ab      	cmp	r3, r5
 810e3b6:	f6ff aed0 	blt.w	810e15a <__gethex+0x20a>
 810e3ba:	2701      	movs	r7, #1
 810e3bc:	e7c0      	b.n	810e340 <__gethex+0x3f0>
 810e3be:	f016 061f 	ands.w	r6, r6, #31
 810e3c2:	d0fa      	beq.n	810e3ba <__gethex+0x46a>
 810e3c4:	4453      	add	r3, sl
 810e3c6:	f1c6 0620 	rsb	r6, r6, #32
 810e3ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810e3ce:	f000 fa43 	bl	810e858 <__hi0bits>
 810e3d2:	42b0      	cmp	r0, r6
 810e3d4:	dbe7      	blt.n	810e3a6 <__gethex+0x456>
 810e3d6:	e7f0      	b.n	810e3ba <__gethex+0x46a>
 810e3d8:	0810fd80 	.word	0x0810fd80

0810e3dc <L_shift>:
 810e3dc:	f1c2 0208 	rsb	r2, r2, #8
 810e3e0:	0092      	lsls	r2, r2, #2
 810e3e2:	b570      	push	{r4, r5, r6, lr}
 810e3e4:	f1c2 0620 	rsb	r6, r2, #32
 810e3e8:	6843      	ldr	r3, [r0, #4]
 810e3ea:	6804      	ldr	r4, [r0, #0]
 810e3ec:	fa03 f506 	lsl.w	r5, r3, r6
 810e3f0:	432c      	orrs	r4, r5
 810e3f2:	40d3      	lsrs	r3, r2
 810e3f4:	6004      	str	r4, [r0, #0]
 810e3f6:	f840 3f04 	str.w	r3, [r0, #4]!
 810e3fa:	4288      	cmp	r0, r1
 810e3fc:	d3f4      	bcc.n	810e3e8 <L_shift+0xc>
 810e3fe:	bd70      	pop	{r4, r5, r6, pc}

0810e400 <__match>:
 810e400:	b530      	push	{r4, r5, lr}
 810e402:	6803      	ldr	r3, [r0, #0]
 810e404:	3301      	adds	r3, #1
 810e406:	f811 4b01 	ldrb.w	r4, [r1], #1
 810e40a:	b914      	cbnz	r4, 810e412 <__match+0x12>
 810e40c:	6003      	str	r3, [r0, #0]
 810e40e:	2001      	movs	r0, #1
 810e410:	bd30      	pop	{r4, r5, pc}
 810e412:	f813 2b01 	ldrb.w	r2, [r3], #1
 810e416:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810e41a:	2d19      	cmp	r5, #25
 810e41c:	bf98      	it	ls
 810e41e:	3220      	addls	r2, #32
 810e420:	42a2      	cmp	r2, r4
 810e422:	d0f0      	beq.n	810e406 <__match+0x6>
 810e424:	2000      	movs	r0, #0
 810e426:	e7f3      	b.n	810e410 <__match+0x10>

0810e428 <__hexnan>:
 810e428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e42c:	680b      	ldr	r3, [r1, #0]
 810e42e:	115e      	asrs	r6, r3, #5
 810e430:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810e434:	f013 031f 	ands.w	r3, r3, #31
 810e438:	b087      	sub	sp, #28
 810e43a:	bf18      	it	ne
 810e43c:	3604      	addne	r6, #4
 810e43e:	2500      	movs	r5, #0
 810e440:	1f37      	subs	r7, r6, #4
 810e442:	4690      	mov	r8, r2
 810e444:	6802      	ldr	r2, [r0, #0]
 810e446:	9301      	str	r3, [sp, #4]
 810e448:	4682      	mov	sl, r0
 810e44a:	f846 5c04 	str.w	r5, [r6, #-4]
 810e44e:	46b9      	mov	r9, r7
 810e450:	463c      	mov	r4, r7
 810e452:	9502      	str	r5, [sp, #8]
 810e454:	46ab      	mov	fp, r5
 810e456:	7851      	ldrb	r1, [r2, #1]
 810e458:	1c53      	adds	r3, r2, #1
 810e45a:	9303      	str	r3, [sp, #12]
 810e45c:	b341      	cbz	r1, 810e4b0 <__hexnan+0x88>
 810e45e:	4608      	mov	r0, r1
 810e460:	9205      	str	r2, [sp, #20]
 810e462:	9104      	str	r1, [sp, #16]
 810e464:	f7ff fd5f 	bl	810df26 <__hexdig_fun>
 810e468:	2800      	cmp	r0, #0
 810e46a:	d14f      	bne.n	810e50c <__hexnan+0xe4>
 810e46c:	9904      	ldr	r1, [sp, #16]
 810e46e:	9a05      	ldr	r2, [sp, #20]
 810e470:	2920      	cmp	r1, #32
 810e472:	d818      	bhi.n	810e4a6 <__hexnan+0x7e>
 810e474:	9b02      	ldr	r3, [sp, #8]
 810e476:	459b      	cmp	fp, r3
 810e478:	dd13      	ble.n	810e4a2 <__hexnan+0x7a>
 810e47a:	454c      	cmp	r4, r9
 810e47c:	d206      	bcs.n	810e48c <__hexnan+0x64>
 810e47e:	2d07      	cmp	r5, #7
 810e480:	dc04      	bgt.n	810e48c <__hexnan+0x64>
 810e482:	462a      	mov	r2, r5
 810e484:	4649      	mov	r1, r9
 810e486:	4620      	mov	r0, r4
 810e488:	f7ff ffa8 	bl	810e3dc <L_shift>
 810e48c:	4544      	cmp	r4, r8
 810e48e:	d950      	bls.n	810e532 <__hexnan+0x10a>
 810e490:	2300      	movs	r3, #0
 810e492:	f1a4 0904 	sub.w	r9, r4, #4
 810e496:	f844 3c04 	str.w	r3, [r4, #-4]
 810e49a:	f8cd b008 	str.w	fp, [sp, #8]
 810e49e:	464c      	mov	r4, r9
 810e4a0:	461d      	mov	r5, r3
 810e4a2:	9a03      	ldr	r2, [sp, #12]
 810e4a4:	e7d7      	b.n	810e456 <__hexnan+0x2e>
 810e4a6:	2929      	cmp	r1, #41	; 0x29
 810e4a8:	d156      	bne.n	810e558 <__hexnan+0x130>
 810e4aa:	3202      	adds	r2, #2
 810e4ac:	f8ca 2000 	str.w	r2, [sl]
 810e4b0:	f1bb 0f00 	cmp.w	fp, #0
 810e4b4:	d050      	beq.n	810e558 <__hexnan+0x130>
 810e4b6:	454c      	cmp	r4, r9
 810e4b8:	d206      	bcs.n	810e4c8 <__hexnan+0xa0>
 810e4ba:	2d07      	cmp	r5, #7
 810e4bc:	dc04      	bgt.n	810e4c8 <__hexnan+0xa0>
 810e4be:	462a      	mov	r2, r5
 810e4c0:	4649      	mov	r1, r9
 810e4c2:	4620      	mov	r0, r4
 810e4c4:	f7ff ff8a 	bl	810e3dc <L_shift>
 810e4c8:	4544      	cmp	r4, r8
 810e4ca:	d934      	bls.n	810e536 <__hexnan+0x10e>
 810e4cc:	f1a8 0204 	sub.w	r2, r8, #4
 810e4d0:	4623      	mov	r3, r4
 810e4d2:	f853 1b04 	ldr.w	r1, [r3], #4
 810e4d6:	f842 1f04 	str.w	r1, [r2, #4]!
 810e4da:	429f      	cmp	r7, r3
 810e4dc:	d2f9      	bcs.n	810e4d2 <__hexnan+0xaa>
 810e4de:	1b3b      	subs	r3, r7, r4
 810e4e0:	f023 0303 	bic.w	r3, r3, #3
 810e4e4:	3304      	adds	r3, #4
 810e4e6:	3401      	adds	r4, #1
 810e4e8:	3e03      	subs	r6, #3
 810e4ea:	42b4      	cmp	r4, r6
 810e4ec:	bf88      	it	hi
 810e4ee:	2304      	movhi	r3, #4
 810e4f0:	4443      	add	r3, r8
 810e4f2:	2200      	movs	r2, #0
 810e4f4:	f843 2b04 	str.w	r2, [r3], #4
 810e4f8:	429f      	cmp	r7, r3
 810e4fa:	d2fb      	bcs.n	810e4f4 <__hexnan+0xcc>
 810e4fc:	683b      	ldr	r3, [r7, #0]
 810e4fe:	b91b      	cbnz	r3, 810e508 <__hexnan+0xe0>
 810e500:	4547      	cmp	r7, r8
 810e502:	d127      	bne.n	810e554 <__hexnan+0x12c>
 810e504:	2301      	movs	r3, #1
 810e506:	603b      	str	r3, [r7, #0]
 810e508:	2005      	movs	r0, #5
 810e50a:	e026      	b.n	810e55a <__hexnan+0x132>
 810e50c:	3501      	adds	r5, #1
 810e50e:	2d08      	cmp	r5, #8
 810e510:	f10b 0b01 	add.w	fp, fp, #1
 810e514:	dd06      	ble.n	810e524 <__hexnan+0xfc>
 810e516:	4544      	cmp	r4, r8
 810e518:	d9c3      	bls.n	810e4a2 <__hexnan+0x7a>
 810e51a:	2300      	movs	r3, #0
 810e51c:	f844 3c04 	str.w	r3, [r4, #-4]
 810e520:	2501      	movs	r5, #1
 810e522:	3c04      	subs	r4, #4
 810e524:	6822      	ldr	r2, [r4, #0]
 810e526:	f000 000f 	and.w	r0, r0, #15
 810e52a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810e52e:	6022      	str	r2, [r4, #0]
 810e530:	e7b7      	b.n	810e4a2 <__hexnan+0x7a>
 810e532:	2508      	movs	r5, #8
 810e534:	e7b5      	b.n	810e4a2 <__hexnan+0x7a>
 810e536:	9b01      	ldr	r3, [sp, #4]
 810e538:	2b00      	cmp	r3, #0
 810e53a:	d0df      	beq.n	810e4fc <__hexnan+0xd4>
 810e53c:	f04f 32ff 	mov.w	r2, #4294967295
 810e540:	f1c3 0320 	rsb	r3, r3, #32
 810e544:	fa22 f303 	lsr.w	r3, r2, r3
 810e548:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810e54c:	401a      	ands	r2, r3
 810e54e:	f846 2c04 	str.w	r2, [r6, #-4]
 810e552:	e7d3      	b.n	810e4fc <__hexnan+0xd4>
 810e554:	3f04      	subs	r7, #4
 810e556:	e7d1      	b.n	810e4fc <__hexnan+0xd4>
 810e558:	2004      	movs	r0, #4
 810e55a:	b007      	add	sp, #28
 810e55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810e560 <_localeconv_r>:
 810e560:	4800      	ldr	r0, [pc, #0]	; (810e564 <_localeconv_r+0x4>)
 810e562:	4770      	bx	lr
 810e564:	10000178 	.word	0x10000178

0810e568 <__retarget_lock_init_recursive>:
 810e568:	4770      	bx	lr

0810e56a <__retarget_lock_acquire_recursive>:
 810e56a:	4770      	bx	lr

0810e56c <__retarget_lock_release_recursive>:
 810e56c:	4770      	bx	lr

0810e56e <__swhatbuf_r>:
 810e56e:	b570      	push	{r4, r5, r6, lr}
 810e570:	460e      	mov	r6, r1
 810e572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e576:	2900      	cmp	r1, #0
 810e578:	b096      	sub	sp, #88	; 0x58
 810e57a:	4614      	mov	r4, r2
 810e57c:	461d      	mov	r5, r3
 810e57e:	da08      	bge.n	810e592 <__swhatbuf_r+0x24>
 810e580:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810e584:	2200      	movs	r2, #0
 810e586:	602a      	str	r2, [r5, #0]
 810e588:	061a      	lsls	r2, r3, #24
 810e58a:	d410      	bmi.n	810e5ae <__swhatbuf_r+0x40>
 810e58c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810e590:	e00e      	b.n	810e5b0 <__swhatbuf_r+0x42>
 810e592:	466a      	mov	r2, sp
 810e594:	f001 f8ba 	bl	810f70c <_fstat_r>
 810e598:	2800      	cmp	r0, #0
 810e59a:	dbf1      	blt.n	810e580 <__swhatbuf_r+0x12>
 810e59c:	9a01      	ldr	r2, [sp, #4]
 810e59e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810e5a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810e5a6:	425a      	negs	r2, r3
 810e5a8:	415a      	adcs	r2, r3
 810e5aa:	602a      	str	r2, [r5, #0]
 810e5ac:	e7ee      	b.n	810e58c <__swhatbuf_r+0x1e>
 810e5ae:	2340      	movs	r3, #64	; 0x40
 810e5b0:	2000      	movs	r0, #0
 810e5b2:	6023      	str	r3, [r4, #0]
 810e5b4:	b016      	add	sp, #88	; 0x58
 810e5b6:	bd70      	pop	{r4, r5, r6, pc}

0810e5b8 <__smakebuf_r>:
 810e5b8:	898b      	ldrh	r3, [r1, #12]
 810e5ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810e5bc:	079d      	lsls	r5, r3, #30
 810e5be:	4606      	mov	r6, r0
 810e5c0:	460c      	mov	r4, r1
 810e5c2:	d507      	bpl.n	810e5d4 <__smakebuf_r+0x1c>
 810e5c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810e5c8:	6023      	str	r3, [r4, #0]
 810e5ca:	6123      	str	r3, [r4, #16]
 810e5cc:	2301      	movs	r3, #1
 810e5ce:	6163      	str	r3, [r4, #20]
 810e5d0:	b002      	add	sp, #8
 810e5d2:	bd70      	pop	{r4, r5, r6, pc}
 810e5d4:	ab01      	add	r3, sp, #4
 810e5d6:	466a      	mov	r2, sp
 810e5d8:	f7ff ffc9 	bl	810e56e <__swhatbuf_r>
 810e5dc:	9900      	ldr	r1, [sp, #0]
 810e5de:	4605      	mov	r5, r0
 810e5e0:	4630      	mov	r0, r6
 810e5e2:	f7fc fcfd 	bl	810afe0 <_malloc_r>
 810e5e6:	b948      	cbnz	r0, 810e5fc <__smakebuf_r+0x44>
 810e5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e5ec:	059a      	lsls	r2, r3, #22
 810e5ee:	d4ef      	bmi.n	810e5d0 <__smakebuf_r+0x18>
 810e5f0:	f023 0303 	bic.w	r3, r3, #3
 810e5f4:	f043 0302 	orr.w	r3, r3, #2
 810e5f8:	81a3      	strh	r3, [r4, #12]
 810e5fa:	e7e3      	b.n	810e5c4 <__smakebuf_r+0xc>
 810e5fc:	4b0d      	ldr	r3, [pc, #52]	; (810e634 <__smakebuf_r+0x7c>)
 810e5fe:	62b3      	str	r3, [r6, #40]	; 0x28
 810e600:	89a3      	ldrh	r3, [r4, #12]
 810e602:	6020      	str	r0, [r4, #0]
 810e604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810e608:	81a3      	strh	r3, [r4, #12]
 810e60a:	9b00      	ldr	r3, [sp, #0]
 810e60c:	6163      	str	r3, [r4, #20]
 810e60e:	9b01      	ldr	r3, [sp, #4]
 810e610:	6120      	str	r0, [r4, #16]
 810e612:	b15b      	cbz	r3, 810e62c <__smakebuf_r+0x74>
 810e614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810e618:	4630      	mov	r0, r6
 810e61a:	f001 f889 	bl	810f730 <_isatty_r>
 810e61e:	b128      	cbz	r0, 810e62c <__smakebuf_r+0x74>
 810e620:	89a3      	ldrh	r3, [r4, #12]
 810e622:	f023 0303 	bic.w	r3, r3, #3
 810e626:	f043 0301 	orr.w	r3, r3, #1
 810e62a:	81a3      	strh	r3, [r4, #12]
 810e62c:	89a0      	ldrh	r0, [r4, #12]
 810e62e:	4305      	orrs	r5, r0
 810e630:	81a5      	strh	r5, [r4, #12]
 810e632:	e7cd      	b.n	810e5d0 <__smakebuf_r+0x18>
 810e634:	0810dce1 	.word	0x0810dce1

0810e638 <__ascii_mbtowc>:
 810e638:	b082      	sub	sp, #8
 810e63a:	b901      	cbnz	r1, 810e63e <__ascii_mbtowc+0x6>
 810e63c:	a901      	add	r1, sp, #4
 810e63e:	b142      	cbz	r2, 810e652 <__ascii_mbtowc+0x1a>
 810e640:	b14b      	cbz	r3, 810e656 <__ascii_mbtowc+0x1e>
 810e642:	7813      	ldrb	r3, [r2, #0]
 810e644:	600b      	str	r3, [r1, #0]
 810e646:	7812      	ldrb	r2, [r2, #0]
 810e648:	1e10      	subs	r0, r2, #0
 810e64a:	bf18      	it	ne
 810e64c:	2001      	movne	r0, #1
 810e64e:	b002      	add	sp, #8
 810e650:	4770      	bx	lr
 810e652:	4610      	mov	r0, r2
 810e654:	e7fb      	b.n	810e64e <__ascii_mbtowc+0x16>
 810e656:	f06f 0001 	mvn.w	r0, #1
 810e65a:	e7f8      	b.n	810e64e <__ascii_mbtowc+0x16>

0810e65c <__malloc_lock>:
 810e65c:	4801      	ldr	r0, [pc, #4]	; (810e664 <__malloc_lock+0x8>)
 810e65e:	f7ff bf84 	b.w	810e56a <__retarget_lock_acquire_recursive>
 810e662:	bf00      	nop
 810e664:	100004b0 	.word	0x100004b0

0810e668 <__malloc_unlock>:
 810e668:	4801      	ldr	r0, [pc, #4]	; (810e670 <__malloc_unlock+0x8>)
 810e66a:	f7ff bf7f 	b.w	810e56c <__retarget_lock_release_recursive>
 810e66e:	bf00      	nop
 810e670:	100004b0 	.word	0x100004b0

0810e674 <_Balloc>:
 810e674:	b570      	push	{r4, r5, r6, lr}
 810e676:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810e678:	4604      	mov	r4, r0
 810e67a:	460d      	mov	r5, r1
 810e67c:	b976      	cbnz	r6, 810e69c <_Balloc+0x28>
 810e67e:	2010      	movs	r0, #16
 810e680:	f7fc fc24 	bl	810aecc <malloc>
 810e684:	4602      	mov	r2, r0
 810e686:	6260      	str	r0, [r4, #36]	; 0x24
 810e688:	b920      	cbnz	r0, 810e694 <_Balloc+0x20>
 810e68a:	4b18      	ldr	r3, [pc, #96]	; (810e6ec <_Balloc+0x78>)
 810e68c:	4818      	ldr	r0, [pc, #96]	; (810e6f0 <_Balloc+0x7c>)
 810e68e:	2166      	movs	r1, #102	; 0x66
 810e690:	f000 fffc 	bl	810f68c <__assert_func>
 810e694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810e698:	6006      	str	r6, [r0, #0]
 810e69a:	60c6      	str	r6, [r0, #12]
 810e69c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810e69e:	68f3      	ldr	r3, [r6, #12]
 810e6a0:	b183      	cbz	r3, 810e6c4 <_Balloc+0x50>
 810e6a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810e6a4:	68db      	ldr	r3, [r3, #12]
 810e6a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810e6aa:	b9b8      	cbnz	r0, 810e6dc <_Balloc+0x68>
 810e6ac:	2101      	movs	r1, #1
 810e6ae:	fa01 f605 	lsl.w	r6, r1, r5
 810e6b2:	1d72      	adds	r2, r6, #5
 810e6b4:	0092      	lsls	r2, r2, #2
 810e6b6:	4620      	mov	r0, r4
 810e6b8:	f000 fc9d 	bl	810eff6 <_calloc_r>
 810e6bc:	b160      	cbz	r0, 810e6d8 <_Balloc+0x64>
 810e6be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810e6c2:	e00e      	b.n	810e6e2 <_Balloc+0x6e>
 810e6c4:	2221      	movs	r2, #33	; 0x21
 810e6c6:	2104      	movs	r1, #4
 810e6c8:	4620      	mov	r0, r4
 810e6ca:	f000 fc94 	bl	810eff6 <_calloc_r>
 810e6ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810e6d0:	60f0      	str	r0, [r6, #12]
 810e6d2:	68db      	ldr	r3, [r3, #12]
 810e6d4:	2b00      	cmp	r3, #0
 810e6d6:	d1e4      	bne.n	810e6a2 <_Balloc+0x2e>
 810e6d8:	2000      	movs	r0, #0
 810e6da:	bd70      	pop	{r4, r5, r6, pc}
 810e6dc:	6802      	ldr	r2, [r0, #0]
 810e6de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810e6e2:	2300      	movs	r3, #0
 810e6e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810e6e8:	e7f7      	b.n	810e6da <_Balloc+0x66>
 810e6ea:	bf00      	nop
 810e6ec:	0810fd0e 	.word	0x0810fd0e
 810e6f0:	0810fe70 	.word	0x0810fe70

0810e6f4 <_Bfree>:
 810e6f4:	b570      	push	{r4, r5, r6, lr}
 810e6f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810e6f8:	4605      	mov	r5, r0
 810e6fa:	460c      	mov	r4, r1
 810e6fc:	b976      	cbnz	r6, 810e71c <_Bfree+0x28>
 810e6fe:	2010      	movs	r0, #16
 810e700:	f7fc fbe4 	bl	810aecc <malloc>
 810e704:	4602      	mov	r2, r0
 810e706:	6268      	str	r0, [r5, #36]	; 0x24
 810e708:	b920      	cbnz	r0, 810e714 <_Bfree+0x20>
 810e70a:	4b09      	ldr	r3, [pc, #36]	; (810e730 <_Bfree+0x3c>)
 810e70c:	4809      	ldr	r0, [pc, #36]	; (810e734 <_Bfree+0x40>)
 810e70e:	218a      	movs	r1, #138	; 0x8a
 810e710:	f000 ffbc 	bl	810f68c <__assert_func>
 810e714:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810e718:	6006      	str	r6, [r0, #0]
 810e71a:	60c6      	str	r6, [r0, #12]
 810e71c:	b13c      	cbz	r4, 810e72e <_Bfree+0x3a>
 810e71e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810e720:	6862      	ldr	r2, [r4, #4]
 810e722:	68db      	ldr	r3, [r3, #12]
 810e724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810e728:	6021      	str	r1, [r4, #0]
 810e72a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810e72e:	bd70      	pop	{r4, r5, r6, pc}
 810e730:	0810fd0e 	.word	0x0810fd0e
 810e734:	0810fe70 	.word	0x0810fe70

0810e738 <__multadd>:
 810e738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e73c:	690d      	ldr	r5, [r1, #16]
 810e73e:	4607      	mov	r7, r0
 810e740:	460c      	mov	r4, r1
 810e742:	461e      	mov	r6, r3
 810e744:	f101 0c14 	add.w	ip, r1, #20
 810e748:	2000      	movs	r0, #0
 810e74a:	f8dc 3000 	ldr.w	r3, [ip]
 810e74e:	b299      	uxth	r1, r3
 810e750:	fb02 6101 	mla	r1, r2, r1, r6
 810e754:	0c1e      	lsrs	r6, r3, #16
 810e756:	0c0b      	lsrs	r3, r1, #16
 810e758:	fb02 3306 	mla	r3, r2, r6, r3
 810e75c:	b289      	uxth	r1, r1
 810e75e:	3001      	adds	r0, #1
 810e760:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810e764:	4285      	cmp	r5, r0
 810e766:	f84c 1b04 	str.w	r1, [ip], #4
 810e76a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810e76e:	dcec      	bgt.n	810e74a <__multadd+0x12>
 810e770:	b30e      	cbz	r6, 810e7b6 <__multadd+0x7e>
 810e772:	68a3      	ldr	r3, [r4, #8]
 810e774:	42ab      	cmp	r3, r5
 810e776:	dc19      	bgt.n	810e7ac <__multadd+0x74>
 810e778:	6861      	ldr	r1, [r4, #4]
 810e77a:	4638      	mov	r0, r7
 810e77c:	3101      	adds	r1, #1
 810e77e:	f7ff ff79 	bl	810e674 <_Balloc>
 810e782:	4680      	mov	r8, r0
 810e784:	b928      	cbnz	r0, 810e792 <__multadd+0x5a>
 810e786:	4602      	mov	r2, r0
 810e788:	4b0c      	ldr	r3, [pc, #48]	; (810e7bc <__multadd+0x84>)
 810e78a:	480d      	ldr	r0, [pc, #52]	; (810e7c0 <__multadd+0x88>)
 810e78c:	21b5      	movs	r1, #181	; 0xb5
 810e78e:	f000 ff7d 	bl	810f68c <__assert_func>
 810e792:	6922      	ldr	r2, [r4, #16]
 810e794:	3202      	adds	r2, #2
 810e796:	f104 010c 	add.w	r1, r4, #12
 810e79a:	0092      	lsls	r2, r2, #2
 810e79c:	300c      	adds	r0, #12
 810e79e:	f7fc fb9d 	bl	810aedc <memcpy>
 810e7a2:	4621      	mov	r1, r4
 810e7a4:	4638      	mov	r0, r7
 810e7a6:	f7ff ffa5 	bl	810e6f4 <_Bfree>
 810e7aa:	4644      	mov	r4, r8
 810e7ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810e7b0:	3501      	adds	r5, #1
 810e7b2:	615e      	str	r6, [r3, #20]
 810e7b4:	6125      	str	r5, [r4, #16]
 810e7b6:	4620      	mov	r0, r4
 810e7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e7bc:	0810fd80 	.word	0x0810fd80
 810e7c0:	0810fe70 	.word	0x0810fe70

0810e7c4 <__s2b>:
 810e7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e7c8:	460c      	mov	r4, r1
 810e7ca:	4615      	mov	r5, r2
 810e7cc:	461f      	mov	r7, r3
 810e7ce:	2209      	movs	r2, #9
 810e7d0:	3308      	adds	r3, #8
 810e7d2:	4606      	mov	r6, r0
 810e7d4:	fb93 f3f2 	sdiv	r3, r3, r2
 810e7d8:	2100      	movs	r1, #0
 810e7da:	2201      	movs	r2, #1
 810e7dc:	429a      	cmp	r2, r3
 810e7de:	db09      	blt.n	810e7f4 <__s2b+0x30>
 810e7e0:	4630      	mov	r0, r6
 810e7e2:	f7ff ff47 	bl	810e674 <_Balloc>
 810e7e6:	b940      	cbnz	r0, 810e7fa <__s2b+0x36>
 810e7e8:	4602      	mov	r2, r0
 810e7ea:	4b19      	ldr	r3, [pc, #100]	; (810e850 <__s2b+0x8c>)
 810e7ec:	4819      	ldr	r0, [pc, #100]	; (810e854 <__s2b+0x90>)
 810e7ee:	21ce      	movs	r1, #206	; 0xce
 810e7f0:	f000 ff4c 	bl	810f68c <__assert_func>
 810e7f4:	0052      	lsls	r2, r2, #1
 810e7f6:	3101      	adds	r1, #1
 810e7f8:	e7f0      	b.n	810e7dc <__s2b+0x18>
 810e7fa:	9b08      	ldr	r3, [sp, #32]
 810e7fc:	6143      	str	r3, [r0, #20]
 810e7fe:	2d09      	cmp	r5, #9
 810e800:	f04f 0301 	mov.w	r3, #1
 810e804:	6103      	str	r3, [r0, #16]
 810e806:	dd16      	ble.n	810e836 <__s2b+0x72>
 810e808:	f104 0909 	add.w	r9, r4, #9
 810e80c:	46c8      	mov	r8, r9
 810e80e:	442c      	add	r4, r5
 810e810:	f818 3b01 	ldrb.w	r3, [r8], #1
 810e814:	4601      	mov	r1, r0
 810e816:	3b30      	subs	r3, #48	; 0x30
 810e818:	220a      	movs	r2, #10
 810e81a:	4630      	mov	r0, r6
 810e81c:	f7ff ff8c 	bl	810e738 <__multadd>
 810e820:	45a0      	cmp	r8, r4
 810e822:	d1f5      	bne.n	810e810 <__s2b+0x4c>
 810e824:	f1a5 0408 	sub.w	r4, r5, #8
 810e828:	444c      	add	r4, r9
 810e82a:	1b2d      	subs	r5, r5, r4
 810e82c:	1963      	adds	r3, r4, r5
 810e82e:	42bb      	cmp	r3, r7
 810e830:	db04      	blt.n	810e83c <__s2b+0x78>
 810e832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e836:	340a      	adds	r4, #10
 810e838:	2509      	movs	r5, #9
 810e83a:	e7f6      	b.n	810e82a <__s2b+0x66>
 810e83c:	f814 3b01 	ldrb.w	r3, [r4], #1
 810e840:	4601      	mov	r1, r0
 810e842:	3b30      	subs	r3, #48	; 0x30
 810e844:	220a      	movs	r2, #10
 810e846:	4630      	mov	r0, r6
 810e848:	f7ff ff76 	bl	810e738 <__multadd>
 810e84c:	e7ee      	b.n	810e82c <__s2b+0x68>
 810e84e:	bf00      	nop
 810e850:	0810fd80 	.word	0x0810fd80
 810e854:	0810fe70 	.word	0x0810fe70

0810e858 <__hi0bits>:
 810e858:	0c03      	lsrs	r3, r0, #16
 810e85a:	041b      	lsls	r3, r3, #16
 810e85c:	b9d3      	cbnz	r3, 810e894 <__hi0bits+0x3c>
 810e85e:	0400      	lsls	r0, r0, #16
 810e860:	2310      	movs	r3, #16
 810e862:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810e866:	bf04      	itt	eq
 810e868:	0200      	lsleq	r0, r0, #8
 810e86a:	3308      	addeq	r3, #8
 810e86c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810e870:	bf04      	itt	eq
 810e872:	0100      	lsleq	r0, r0, #4
 810e874:	3304      	addeq	r3, #4
 810e876:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810e87a:	bf04      	itt	eq
 810e87c:	0080      	lsleq	r0, r0, #2
 810e87e:	3302      	addeq	r3, #2
 810e880:	2800      	cmp	r0, #0
 810e882:	db05      	blt.n	810e890 <__hi0bits+0x38>
 810e884:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810e888:	f103 0301 	add.w	r3, r3, #1
 810e88c:	bf08      	it	eq
 810e88e:	2320      	moveq	r3, #32
 810e890:	4618      	mov	r0, r3
 810e892:	4770      	bx	lr
 810e894:	2300      	movs	r3, #0
 810e896:	e7e4      	b.n	810e862 <__hi0bits+0xa>

0810e898 <__lo0bits>:
 810e898:	6803      	ldr	r3, [r0, #0]
 810e89a:	f013 0207 	ands.w	r2, r3, #7
 810e89e:	4601      	mov	r1, r0
 810e8a0:	d00b      	beq.n	810e8ba <__lo0bits+0x22>
 810e8a2:	07da      	lsls	r2, r3, #31
 810e8a4:	d423      	bmi.n	810e8ee <__lo0bits+0x56>
 810e8a6:	0798      	lsls	r0, r3, #30
 810e8a8:	bf49      	itett	mi
 810e8aa:	085b      	lsrmi	r3, r3, #1
 810e8ac:	089b      	lsrpl	r3, r3, #2
 810e8ae:	2001      	movmi	r0, #1
 810e8b0:	600b      	strmi	r3, [r1, #0]
 810e8b2:	bf5c      	itt	pl
 810e8b4:	600b      	strpl	r3, [r1, #0]
 810e8b6:	2002      	movpl	r0, #2
 810e8b8:	4770      	bx	lr
 810e8ba:	b298      	uxth	r0, r3
 810e8bc:	b9a8      	cbnz	r0, 810e8ea <__lo0bits+0x52>
 810e8be:	0c1b      	lsrs	r3, r3, #16
 810e8c0:	2010      	movs	r0, #16
 810e8c2:	b2da      	uxtb	r2, r3
 810e8c4:	b90a      	cbnz	r2, 810e8ca <__lo0bits+0x32>
 810e8c6:	3008      	adds	r0, #8
 810e8c8:	0a1b      	lsrs	r3, r3, #8
 810e8ca:	071a      	lsls	r2, r3, #28
 810e8cc:	bf04      	itt	eq
 810e8ce:	091b      	lsreq	r3, r3, #4
 810e8d0:	3004      	addeq	r0, #4
 810e8d2:	079a      	lsls	r2, r3, #30
 810e8d4:	bf04      	itt	eq
 810e8d6:	089b      	lsreq	r3, r3, #2
 810e8d8:	3002      	addeq	r0, #2
 810e8da:	07da      	lsls	r2, r3, #31
 810e8dc:	d403      	bmi.n	810e8e6 <__lo0bits+0x4e>
 810e8de:	085b      	lsrs	r3, r3, #1
 810e8e0:	f100 0001 	add.w	r0, r0, #1
 810e8e4:	d005      	beq.n	810e8f2 <__lo0bits+0x5a>
 810e8e6:	600b      	str	r3, [r1, #0]
 810e8e8:	4770      	bx	lr
 810e8ea:	4610      	mov	r0, r2
 810e8ec:	e7e9      	b.n	810e8c2 <__lo0bits+0x2a>
 810e8ee:	2000      	movs	r0, #0
 810e8f0:	4770      	bx	lr
 810e8f2:	2020      	movs	r0, #32
 810e8f4:	4770      	bx	lr
	...

0810e8f8 <__i2b>:
 810e8f8:	b510      	push	{r4, lr}
 810e8fa:	460c      	mov	r4, r1
 810e8fc:	2101      	movs	r1, #1
 810e8fe:	f7ff feb9 	bl	810e674 <_Balloc>
 810e902:	4602      	mov	r2, r0
 810e904:	b928      	cbnz	r0, 810e912 <__i2b+0x1a>
 810e906:	4b05      	ldr	r3, [pc, #20]	; (810e91c <__i2b+0x24>)
 810e908:	4805      	ldr	r0, [pc, #20]	; (810e920 <__i2b+0x28>)
 810e90a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810e90e:	f000 febd 	bl	810f68c <__assert_func>
 810e912:	2301      	movs	r3, #1
 810e914:	6144      	str	r4, [r0, #20]
 810e916:	6103      	str	r3, [r0, #16]
 810e918:	bd10      	pop	{r4, pc}
 810e91a:	bf00      	nop
 810e91c:	0810fd80 	.word	0x0810fd80
 810e920:	0810fe70 	.word	0x0810fe70

0810e924 <__multiply>:
 810e924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e928:	4691      	mov	r9, r2
 810e92a:	690a      	ldr	r2, [r1, #16]
 810e92c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810e930:	429a      	cmp	r2, r3
 810e932:	bfb8      	it	lt
 810e934:	460b      	movlt	r3, r1
 810e936:	460c      	mov	r4, r1
 810e938:	bfbc      	itt	lt
 810e93a:	464c      	movlt	r4, r9
 810e93c:	4699      	movlt	r9, r3
 810e93e:	6927      	ldr	r7, [r4, #16]
 810e940:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810e944:	68a3      	ldr	r3, [r4, #8]
 810e946:	6861      	ldr	r1, [r4, #4]
 810e948:	eb07 060a 	add.w	r6, r7, sl
 810e94c:	42b3      	cmp	r3, r6
 810e94e:	b085      	sub	sp, #20
 810e950:	bfb8      	it	lt
 810e952:	3101      	addlt	r1, #1
 810e954:	f7ff fe8e 	bl	810e674 <_Balloc>
 810e958:	b930      	cbnz	r0, 810e968 <__multiply+0x44>
 810e95a:	4602      	mov	r2, r0
 810e95c:	4b44      	ldr	r3, [pc, #272]	; (810ea70 <__multiply+0x14c>)
 810e95e:	4845      	ldr	r0, [pc, #276]	; (810ea74 <__multiply+0x150>)
 810e960:	f240 115d 	movw	r1, #349	; 0x15d
 810e964:	f000 fe92 	bl	810f68c <__assert_func>
 810e968:	f100 0514 	add.w	r5, r0, #20
 810e96c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810e970:	462b      	mov	r3, r5
 810e972:	2200      	movs	r2, #0
 810e974:	4543      	cmp	r3, r8
 810e976:	d321      	bcc.n	810e9bc <__multiply+0x98>
 810e978:	f104 0314 	add.w	r3, r4, #20
 810e97c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810e980:	f109 0314 	add.w	r3, r9, #20
 810e984:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810e988:	9202      	str	r2, [sp, #8]
 810e98a:	1b3a      	subs	r2, r7, r4
 810e98c:	3a15      	subs	r2, #21
 810e98e:	f022 0203 	bic.w	r2, r2, #3
 810e992:	3204      	adds	r2, #4
 810e994:	f104 0115 	add.w	r1, r4, #21
 810e998:	428f      	cmp	r7, r1
 810e99a:	bf38      	it	cc
 810e99c:	2204      	movcc	r2, #4
 810e99e:	9201      	str	r2, [sp, #4]
 810e9a0:	9a02      	ldr	r2, [sp, #8]
 810e9a2:	9303      	str	r3, [sp, #12]
 810e9a4:	429a      	cmp	r2, r3
 810e9a6:	d80c      	bhi.n	810e9c2 <__multiply+0x9e>
 810e9a8:	2e00      	cmp	r6, #0
 810e9aa:	dd03      	ble.n	810e9b4 <__multiply+0x90>
 810e9ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810e9b0:	2b00      	cmp	r3, #0
 810e9b2:	d05a      	beq.n	810ea6a <__multiply+0x146>
 810e9b4:	6106      	str	r6, [r0, #16]
 810e9b6:	b005      	add	sp, #20
 810e9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e9bc:	f843 2b04 	str.w	r2, [r3], #4
 810e9c0:	e7d8      	b.n	810e974 <__multiply+0x50>
 810e9c2:	f8b3 a000 	ldrh.w	sl, [r3]
 810e9c6:	f1ba 0f00 	cmp.w	sl, #0
 810e9ca:	d024      	beq.n	810ea16 <__multiply+0xf2>
 810e9cc:	f104 0e14 	add.w	lr, r4, #20
 810e9d0:	46a9      	mov	r9, r5
 810e9d2:	f04f 0c00 	mov.w	ip, #0
 810e9d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 810e9da:	f8d9 1000 	ldr.w	r1, [r9]
 810e9de:	fa1f fb82 	uxth.w	fp, r2
 810e9e2:	b289      	uxth	r1, r1
 810e9e4:	fb0a 110b 	mla	r1, sl, fp, r1
 810e9e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810e9ec:	f8d9 2000 	ldr.w	r2, [r9]
 810e9f0:	4461      	add	r1, ip
 810e9f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810e9f6:	fb0a c20b 	mla	r2, sl, fp, ip
 810e9fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810e9fe:	b289      	uxth	r1, r1
 810ea00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810ea04:	4577      	cmp	r7, lr
 810ea06:	f849 1b04 	str.w	r1, [r9], #4
 810ea0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810ea0e:	d8e2      	bhi.n	810e9d6 <__multiply+0xb2>
 810ea10:	9a01      	ldr	r2, [sp, #4]
 810ea12:	f845 c002 	str.w	ip, [r5, r2]
 810ea16:	9a03      	ldr	r2, [sp, #12]
 810ea18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810ea1c:	3304      	adds	r3, #4
 810ea1e:	f1b9 0f00 	cmp.w	r9, #0
 810ea22:	d020      	beq.n	810ea66 <__multiply+0x142>
 810ea24:	6829      	ldr	r1, [r5, #0]
 810ea26:	f104 0c14 	add.w	ip, r4, #20
 810ea2a:	46ae      	mov	lr, r5
 810ea2c:	f04f 0a00 	mov.w	sl, #0
 810ea30:	f8bc b000 	ldrh.w	fp, [ip]
 810ea34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810ea38:	fb09 220b 	mla	r2, r9, fp, r2
 810ea3c:	4492      	add	sl, r2
 810ea3e:	b289      	uxth	r1, r1
 810ea40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810ea44:	f84e 1b04 	str.w	r1, [lr], #4
 810ea48:	f85c 2b04 	ldr.w	r2, [ip], #4
 810ea4c:	f8be 1000 	ldrh.w	r1, [lr]
 810ea50:	0c12      	lsrs	r2, r2, #16
 810ea52:	fb09 1102 	mla	r1, r9, r2, r1
 810ea56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810ea5a:	4567      	cmp	r7, ip
 810ea5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810ea60:	d8e6      	bhi.n	810ea30 <__multiply+0x10c>
 810ea62:	9a01      	ldr	r2, [sp, #4]
 810ea64:	50a9      	str	r1, [r5, r2]
 810ea66:	3504      	adds	r5, #4
 810ea68:	e79a      	b.n	810e9a0 <__multiply+0x7c>
 810ea6a:	3e01      	subs	r6, #1
 810ea6c:	e79c      	b.n	810e9a8 <__multiply+0x84>
 810ea6e:	bf00      	nop
 810ea70:	0810fd80 	.word	0x0810fd80
 810ea74:	0810fe70 	.word	0x0810fe70

0810ea78 <__pow5mult>:
 810ea78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ea7c:	4615      	mov	r5, r2
 810ea7e:	f012 0203 	ands.w	r2, r2, #3
 810ea82:	4606      	mov	r6, r0
 810ea84:	460f      	mov	r7, r1
 810ea86:	d007      	beq.n	810ea98 <__pow5mult+0x20>
 810ea88:	4c25      	ldr	r4, [pc, #148]	; (810eb20 <__pow5mult+0xa8>)
 810ea8a:	3a01      	subs	r2, #1
 810ea8c:	2300      	movs	r3, #0
 810ea8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810ea92:	f7ff fe51 	bl	810e738 <__multadd>
 810ea96:	4607      	mov	r7, r0
 810ea98:	10ad      	asrs	r5, r5, #2
 810ea9a:	d03d      	beq.n	810eb18 <__pow5mult+0xa0>
 810ea9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810ea9e:	b97c      	cbnz	r4, 810eac0 <__pow5mult+0x48>
 810eaa0:	2010      	movs	r0, #16
 810eaa2:	f7fc fa13 	bl	810aecc <malloc>
 810eaa6:	4602      	mov	r2, r0
 810eaa8:	6270      	str	r0, [r6, #36]	; 0x24
 810eaaa:	b928      	cbnz	r0, 810eab8 <__pow5mult+0x40>
 810eaac:	4b1d      	ldr	r3, [pc, #116]	; (810eb24 <__pow5mult+0xac>)
 810eaae:	481e      	ldr	r0, [pc, #120]	; (810eb28 <__pow5mult+0xb0>)
 810eab0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810eab4:	f000 fdea 	bl	810f68c <__assert_func>
 810eab8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810eabc:	6004      	str	r4, [r0, #0]
 810eabe:	60c4      	str	r4, [r0, #12]
 810eac0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810eac4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810eac8:	b94c      	cbnz	r4, 810eade <__pow5mult+0x66>
 810eaca:	f240 2171 	movw	r1, #625	; 0x271
 810eace:	4630      	mov	r0, r6
 810ead0:	f7ff ff12 	bl	810e8f8 <__i2b>
 810ead4:	2300      	movs	r3, #0
 810ead6:	f8c8 0008 	str.w	r0, [r8, #8]
 810eada:	4604      	mov	r4, r0
 810eadc:	6003      	str	r3, [r0, #0]
 810eade:	f04f 0900 	mov.w	r9, #0
 810eae2:	07eb      	lsls	r3, r5, #31
 810eae4:	d50a      	bpl.n	810eafc <__pow5mult+0x84>
 810eae6:	4639      	mov	r1, r7
 810eae8:	4622      	mov	r2, r4
 810eaea:	4630      	mov	r0, r6
 810eaec:	f7ff ff1a 	bl	810e924 <__multiply>
 810eaf0:	4639      	mov	r1, r7
 810eaf2:	4680      	mov	r8, r0
 810eaf4:	4630      	mov	r0, r6
 810eaf6:	f7ff fdfd 	bl	810e6f4 <_Bfree>
 810eafa:	4647      	mov	r7, r8
 810eafc:	106d      	asrs	r5, r5, #1
 810eafe:	d00b      	beq.n	810eb18 <__pow5mult+0xa0>
 810eb00:	6820      	ldr	r0, [r4, #0]
 810eb02:	b938      	cbnz	r0, 810eb14 <__pow5mult+0x9c>
 810eb04:	4622      	mov	r2, r4
 810eb06:	4621      	mov	r1, r4
 810eb08:	4630      	mov	r0, r6
 810eb0a:	f7ff ff0b 	bl	810e924 <__multiply>
 810eb0e:	6020      	str	r0, [r4, #0]
 810eb10:	f8c0 9000 	str.w	r9, [r0]
 810eb14:	4604      	mov	r4, r0
 810eb16:	e7e4      	b.n	810eae2 <__pow5mult+0x6a>
 810eb18:	4638      	mov	r0, r7
 810eb1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810eb1e:	bf00      	nop
 810eb20:	0810ffc0 	.word	0x0810ffc0
 810eb24:	0810fd0e 	.word	0x0810fd0e
 810eb28:	0810fe70 	.word	0x0810fe70

0810eb2c <__lshift>:
 810eb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810eb30:	460c      	mov	r4, r1
 810eb32:	6849      	ldr	r1, [r1, #4]
 810eb34:	6923      	ldr	r3, [r4, #16]
 810eb36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810eb3a:	68a3      	ldr	r3, [r4, #8]
 810eb3c:	4607      	mov	r7, r0
 810eb3e:	4691      	mov	r9, r2
 810eb40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810eb44:	f108 0601 	add.w	r6, r8, #1
 810eb48:	42b3      	cmp	r3, r6
 810eb4a:	db0b      	blt.n	810eb64 <__lshift+0x38>
 810eb4c:	4638      	mov	r0, r7
 810eb4e:	f7ff fd91 	bl	810e674 <_Balloc>
 810eb52:	4605      	mov	r5, r0
 810eb54:	b948      	cbnz	r0, 810eb6a <__lshift+0x3e>
 810eb56:	4602      	mov	r2, r0
 810eb58:	4b2a      	ldr	r3, [pc, #168]	; (810ec04 <__lshift+0xd8>)
 810eb5a:	482b      	ldr	r0, [pc, #172]	; (810ec08 <__lshift+0xdc>)
 810eb5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 810eb60:	f000 fd94 	bl	810f68c <__assert_func>
 810eb64:	3101      	adds	r1, #1
 810eb66:	005b      	lsls	r3, r3, #1
 810eb68:	e7ee      	b.n	810eb48 <__lshift+0x1c>
 810eb6a:	2300      	movs	r3, #0
 810eb6c:	f100 0114 	add.w	r1, r0, #20
 810eb70:	f100 0210 	add.w	r2, r0, #16
 810eb74:	4618      	mov	r0, r3
 810eb76:	4553      	cmp	r3, sl
 810eb78:	db37      	blt.n	810ebea <__lshift+0xbe>
 810eb7a:	6920      	ldr	r0, [r4, #16]
 810eb7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810eb80:	f104 0314 	add.w	r3, r4, #20
 810eb84:	f019 091f 	ands.w	r9, r9, #31
 810eb88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810eb8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810eb90:	d02f      	beq.n	810ebf2 <__lshift+0xc6>
 810eb92:	f1c9 0e20 	rsb	lr, r9, #32
 810eb96:	468a      	mov	sl, r1
 810eb98:	f04f 0c00 	mov.w	ip, #0
 810eb9c:	681a      	ldr	r2, [r3, #0]
 810eb9e:	fa02 f209 	lsl.w	r2, r2, r9
 810eba2:	ea42 020c 	orr.w	r2, r2, ip
 810eba6:	f84a 2b04 	str.w	r2, [sl], #4
 810ebaa:	f853 2b04 	ldr.w	r2, [r3], #4
 810ebae:	4298      	cmp	r0, r3
 810ebb0:	fa22 fc0e 	lsr.w	ip, r2, lr
 810ebb4:	d8f2      	bhi.n	810eb9c <__lshift+0x70>
 810ebb6:	1b03      	subs	r3, r0, r4
 810ebb8:	3b15      	subs	r3, #21
 810ebba:	f023 0303 	bic.w	r3, r3, #3
 810ebbe:	3304      	adds	r3, #4
 810ebc0:	f104 0215 	add.w	r2, r4, #21
 810ebc4:	4290      	cmp	r0, r2
 810ebc6:	bf38      	it	cc
 810ebc8:	2304      	movcc	r3, #4
 810ebca:	f841 c003 	str.w	ip, [r1, r3]
 810ebce:	f1bc 0f00 	cmp.w	ip, #0
 810ebd2:	d001      	beq.n	810ebd8 <__lshift+0xac>
 810ebd4:	f108 0602 	add.w	r6, r8, #2
 810ebd8:	3e01      	subs	r6, #1
 810ebda:	4638      	mov	r0, r7
 810ebdc:	612e      	str	r6, [r5, #16]
 810ebde:	4621      	mov	r1, r4
 810ebe0:	f7ff fd88 	bl	810e6f4 <_Bfree>
 810ebe4:	4628      	mov	r0, r5
 810ebe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ebea:	f842 0f04 	str.w	r0, [r2, #4]!
 810ebee:	3301      	adds	r3, #1
 810ebf0:	e7c1      	b.n	810eb76 <__lshift+0x4a>
 810ebf2:	3904      	subs	r1, #4
 810ebf4:	f853 2b04 	ldr.w	r2, [r3], #4
 810ebf8:	f841 2f04 	str.w	r2, [r1, #4]!
 810ebfc:	4298      	cmp	r0, r3
 810ebfe:	d8f9      	bhi.n	810ebf4 <__lshift+0xc8>
 810ec00:	e7ea      	b.n	810ebd8 <__lshift+0xac>
 810ec02:	bf00      	nop
 810ec04:	0810fd80 	.word	0x0810fd80
 810ec08:	0810fe70 	.word	0x0810fe70

0810ec0c <__mcmp>:
 810ec0c:	b530      	push	{r4, r5, lr}
 810ec0e:	6902      	ldr	r2, [r0, #16]
 810ec10:	690c      	ldr	r4, [r1, #16]
 810ec12:	1b12      	subs	r2, r2, r4
 810ec14:	d10e      	bne.n	810ec34 <__mcmp+0x28>
 810ec16:	f100 0314 	add.w	r3, r0, #20
 810ec1a:	3114      	adds	r1, #20
 810ec1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810ec20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810ec24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810ec28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810ec2c:	42a5      	cmp	r5, r4
 810ec2e:	d003      	beq.n	810ec38 <__mcmp+0x2c>
 810ec30:	d305      	bcc.n	810ec3e <__mcmp+0x32>
 810ec32:	2201      	movs	r2, #1
 810ec34:	4610      	mov	r0, r2
 810ec36:	bd30      	pop	{r4, r5, pc}
 810ec38:	4283      	cmp	r3, r0
 810ec3a:	d3f3      	bcc.n	810ec24 <__mcmp+0x18>
 810ec3c:	e7fa      	b.n	810ec34 <__mcmp+0x28>
 810ec3e:	f04f 32ff 	mov.w	r2, #4294967295
 810ec42:	e7f7      	b.n	810ec34 <__mcmp+0x28>

0810ec44 <__mdiff>:
 810ec44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ec48:	460c      	mov	r4, r1
 810ec4a:	4606      	mov	r6, r0
 810ec4c:	4611      	mov	r1, r2
 810ec4e:	4620      	mov	r0, r4
 810ec50:	4690      	mov	r8, r2
 810ec52:	f7ff ffdb 	bl	810ec0c <__mcmp>
 810ec56:	1e05      	subs	r5, r0, #0
 810ec58:	d110      	bne.n	810ec7c <__mdiff+0x38>
 810ec5a:	4629      	mov	r1, r5
 810ec5c:	4630      	mov	r0, r6
 810ec5e:	f7ff fd09 	bl	810e674 <_Balloc>
 810ec62:	b930      	cbnz	r0, 810ec72 <__mdiff+0x2e>
 810ec64:	4b3a      	ldr	r3, [pc, #232]	; (810ed50 <__mdiff+0x10c>)
 810ec66:	4602      	mov	r2, r0
 810ec68:	f240 2132 	movw	r1, #562	; 0x232
 810ec6c:	4839      	ldr	r0, [pc, #228]	; (810ed54 <__mdiff+0x110>)
 810ec6e:	f000 fd0d 	bl	810f68c <__assert_func>
 810ec72:	2301      	movs	r3, #1
 810ec74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810ec78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ec7c:	bfa4      	itt	ge
 810ec7e:	4643      	movge	r3, r8
 810ec80:	46a0      	movge	r8, r4
 810ec82:	4630      	mov	r0, r6
 810ec84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810ec88:	bfa6      	itte	ge
 810ec8a:	461c      	movge	r4, r3
 810ec8c:	2500      	movge	r5, #0
 810ec8e:	2501      	movlt	r5, #1
 810ec90:	f7ff fcf0 	bl	810e674 <_Balloc>
 810ec94:	b920      	cbnz	r0, 810eca0 <__mdiff+0x5c>
 810ec96:	4b2e      	ldr	r3, [pc, #184]	; (810ed50 <__mdiff+0x10c>)
 810ec98:	4602      	mov	r2, r0
 810ec9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 810ec9e:	e7e5      	b.n	810ec6c <__mdiff+0x28>
 810eca0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810eca4:	6926      	ldr	r6, [r4, #16]
 810eca6:	60c5      	str	r5, [r0, #12]
 810eca8:	f104 0914 	add.w	r9, r4, #20
 810ecac:	f108 0514 	add.w	r5, r8, #20
 810ecb0:	f100 0e14 	add.w	lr, r0, #20
 810ecb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810ecb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810ecbc:	f108 0210 	add.w	r2, r8, #16
 810ecc0:	46f2      	mov	sl, lr
 810ecc2:	2100      	movs	r1, #0
 810ecc4:	f859 3b04 	ldr.w	r3, [r9], #4
 810ecc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810eccc:	fa1f f883 	uxth.w	r8, r3
 810ecd0:	fa11 f18b 	uxtah	r1, r1, fp
 810ecd4:	0c1b      	lsrs	r3, r3, #16
 810ecd6:	eba1 0808 	sub.w	r8, r1, r8
 810ecda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810ecde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810ece2:	fa1f f888 	uxth.w	r8, r8
 810ece6:	1419      	asrs	r1, r3, #16
 810ece8:	454e      	cmp	r6, r9
 810ecea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810ecee:	f84a 3b04 	str.w	r3, [sl], #4
 810ecf2:	d8e7      	bhi.n	810ecc4 <__mdiff+0x80>
 810ecf4:	1b33      	subs	r3, r6, r4
 810ecf6:	3b15      	subs	r3, #21
 810ecf8:	f023 0303 	bic.w	r3, r3, #3
 810ecfc:	3304      	adds	r3, #4
 810ecfe:	3415      	adds	r4, #21
 810ed00:	42a6      	cmp	r6, r4
 810ed02:	bf38      	it	cc
 810ed04:	2304      	movcc	r3, #4
 810ed06:	441d      	add	r5, r3
 810ed08:	4473      	add	r3, lr
 810ed0a:	469e      	mov	lr, r3
 810ed0c:	462e      	mov	r6, r5
 810ed0e:	4566      	cmp	r6, ip
 810ed10:	d30e      	bcc.n	810ed30 <__mdiff+0xec>
 810ed12:	f10c 0203 	add.w	r2, ip, #3
 810ed16:	1b52      	subs	r2, r2, r5
 810ed18:	f022 0203 	bic.w	r2, r2, #3
 810ed1c:	3d03      	subs	r5, #3
 810ed1e:	45ac      	cmp	ip, r5
 810ed20:	bf38      	it	cc
 810ed22:	2200      	movcc	r2, #0
 810ed24:	441a      	add	r2, r3
 810ed26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810ed2a:	b17b      	cbz	r3, 810ed4c <__mdiff+0x108>
 810ed2c:	6107      	str	r7, [r0, #16]
 810ed2e:	e7a3      	b.n	810ec78 <__mdiff+0x34>
 810ed30:	f856 8b04 	ldr.w	r8, [r6], #4
 810ed34:	fa11 f288 	uxtah	r2, r1, r8
 810ed38:	1414      	asrs	r4, r2, #16
 810ed3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810ed3e:	b292      	uxth	r2, r2
 810ed40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810ed44:	f84e 2b04 	str.w	r2, [lr], #4
 810ed48:	1421      	asrs	r1, r4, #16
 810ed4a:	e7e0      	b.n	810ed0e <__mdiff+0xca>
 810ed4c:	3f01      	subs	r7, #1
 810ed4e:	e7ea      	b.n	810ed26 <__mdiff+0xe2>
 810ed50:	0810fd80 	.word	0x0810fd80
 810ed54:	0810fe70 	.word	0x0810fe70

0810ed58 <__ulp>:
 810ed58:	b082      	sub	sp, #8
 810ed5a:	ed8d 0b00 	vstr	d0, [sp]
 810ed5e:	9b01      	ldr	r3, [sp, #4]
 810ed60:	4912      	ldr	r1, [pc, #72]	; (810edac <__ulp+0x54>)
 810ed62:	4019      	ands	r1, r3
 810ed64:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810ed68:	2900      	cmp	r1, #0
 810ed6a:	dd05      	ble.n	810ed78 <__ulp+0x20>
 810ed6c:	2200      	movs	r2, #0
 810ed6e:	460b      	mov	r3, r1
 810ed70:	ec43 2b10 	vmov	d0, r2, r3
 810ed74:	b002      	add	sp, #8
 810ed76:	4770      	bx	lr
 810ed78:	4249      	negs	r1, r1
 810ed7a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810ed7e:	ea4f 5021 	mov.w	r0, r1, asr #20
 810ed82:	f04f 0200 	mov.w	r2, #0
 810ed86:	f04f 0300 	mov.w	r3, #0
 810ed8a:	da04      	bge.n	810ed96 <__ulp+0x3e>
 810ed8c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810ed90:	fa41 f300 	asr.w	r3, r1, r0
 810ed94:	e7ec      	b.n	810ed70 <__ulp+0x18>
 810ed96:	f1a0 0114 	sub.w	r1, r0, #20
 810ed9a:	291e      	cmp	r1, #30
 810ed9c:	bfda      	itte	le
 810ed9e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810eda2:	fa20 f101 	lsrle.w	r1, r0, r1
 810eda6:	2101      	movgt	r1, #1
 810eda8:	460a      	mov	r2, r1
 810edaa:	e7e1      	b.n	810ed70 <__ulp+0x18>
 810edac:	7ff00000 	.word	0x7ff00000

0810edb0 <__b2d>:
 810edb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810edb2:	6905      	ldr	r5, [r0, #16]
 810edb4:	f100 0714 	add.w	r7, r0, #20
 810edb8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810edbc:	1f2e      	subs	r6, r5, #4
 810edbe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810edc2:	4620      	mov	r0, r4
 810edc4:	f7ff fd48 	bl	810e858 <__hi0bits>
 810edc8:	f1c0 0320 	rsb	r3, r0, #32
 810edcc:	280a      	cmp	r0, #10
 810edce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810ee4c <__b2d+0x9c>
 810edd2:	600b      	str	r3, [r1, #0]
 810edd4:	dc14      	bgt.n	810ee00 <__b2d+0x50>
 810edd6:	f1c0 0e0b 	rsb	lr, r0, #11
 810edda:	fa24 f10e 	lsr.w	r1, r4, lr
 810edde:	42b7      	cmp	r7, r6
 810ede0:	ea41 030c 	orr.w	r3, r1, ip
 810ede4:	bf34      	ite	cc
 810ede6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810edea:	2100      	movcs	r1, #0
 810edec:	3015      	adds	r0, #21
 810edee:	fa04 f000 	lsl.w	r0, r4, r0
 810edf2:	fa21 f10e 	lsr.w	r1, r1, lr
 810edf6:	ea40 0201 	orr.w	r2, r0, r1
 810edfa:	ec43 2b10 	vmov	d0, r2, r3
 810edfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810ee00:	42b7      	cmp	r7, r6
 810ee02:	bf3a      	itte	cc
 810ee04:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810ee08:	f1a5 0608 	subcc.w	r6, r5, #8
 810ee0c:	2100      	movcs	r1, #0
 810ee0e:	380b      	subs	r0, #11
 810ee10:	d017      	beq.n	810ee42 <__b2d+0x92>
 810ee12:	f1c0 0c20 	rsb	ip, r0, #32
 810ee16:	fa04 f500 	lsl.w	r5, r4, r0
 810ee1a:	42be      	cmp	r6, r7
 810ee1c:	fa21 f40c 	lsr.w	r4, r1, ip
 810ee20:	ea45 0504 	orr.w	r5, r5, r4
 810ee24:	bf8c      	ite	hi
 810ee26:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810ee2a:	2400      	movls	r4, #0
 810ee2c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810ee30:	fa01 f000 	lsl.w	r0, r1, r0
 810ee34:	fa24 f40c 	lsr.w	r4, r4, ip
 810ee38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810ee3c:	ea40 0204 	orr.w	r2, r0, r4
 810ee40:	e7db      	b.n	810edfa <__b2d+0x4a>
 810ee42:	ea44 030c 	orr.w	r3, r4, ip
 810ee46:	460a      	mov	r2, r1
 810ee48:	e7d7      	b.n	810edfa <__b2d+0x4a>
 810ee4a:	bf00      	nop
 810ee4c:	3ff00000 	.word	0x3ff00000

0810ee50 <__d2b>:
 810ee50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810ee54:	4689      	mov	r9, r1
 810ee56:	2101      	movs	r1, #1
 810ee58:	ec57 6b10 	vmov	r6, r7, d0
 810ee5c:	4690      	mov	r8, r2
 810ee5e:	f7ff fc09 	bl	810e674 <_Balloc>
 810ee62:	4604      	mov	r4, r0
 810ee64:	b930      	cbnz	r0, 810ee74 <__d2b+0x24>
 810ee66:	4602      	mov	r2, r0
 810ee68:	4b25      	ldr	r3, [pc, #148]	; (810ef00 <__d2b+0xb0>)
 810ee6a:	4826      	ldr	r0, [pc, #152]	; (810ef04 <__d2b+0xb4>)
 810ee6c:	f240 310a 	movw	r1, #778	; 0x30a
 810ee70:	f000 fc0c 	bl	810f68c <__assert_func>
 810ee74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810ee78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810ee7c:	bb35      	cbnz	r5, 810eecc <__d2b+0x7c>
 810ee7e:	2e00      	cmp	r6, #0
 810ee80:	9301      	str	r3, [sp, #4]
 810ee82:	d028      	beq.n	810eed6 <__d2b+0x86>
 810ee84:	4668      	mov	r0, sp
 810ee86:	9600      	str	r6, [sp, #0]
 810ee88:	f7ff fd06 	bl	810e898 <__lo0bits>
 810ee8c:	9900      	ldr	r1, [sp, #0]
 810ee8e:	b300      	cbz	r0, 810eed2 <__d2b+0x82>
 810ee90:	9a01      	ldr	r2, [sp, #4]
 810ee92:	f1c0 0320 	rsb	r3, r0, #32
 810ee96:	fa02 f303 	lsl.w	r3, r2, r3
 810ee9a:	430b      	orrs	r3, r1
 810ee9c:	40c2      	lsrs	r2, r0
 810ee9e:	6163      	str	r3, [r4, #20]
 810eea0:	9201      	str	r2, [sp, #4]
 810eea2:	9b01      	ldr	r3, [sp, #4]
 810eea4:	61a3      	str	r3, [r4, #24]
 810eea6:	2b00      	cmp	r3, #0
 810eea8:	bf14      	ite	ne
 810eeaa:	2202      	movne	r2, #2
 810eeac:	2201      	moveq	r2, #1
 810eeae:	6122      	str	r2, [r4, #16]
 810eeb0:	b1d5      	cbz	r5, 810eee8 <__d2b+0x98>
 810eeb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810eeb6:	4405      	add	r5, r0
 810eeb8:	f8c9 5000 	str.w	r5, [r9]
 810eebc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810eec0:	f8c8 0000 	str.w	r0, [r8]
 810eec4:	4620      	mov	r0, r4
 810eec6:	b003      	add	sp, #12
 810eec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810eecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810eed0:	e7d5      	b.n	810ee7e <__d2b+0x2e>
 810eed2:	6161      	str	r1, [r4, #20]
 810eed4:	e7e5      	b.n	810eea2 <__d2b+0x52>
 810eed6:	a801      	add	r0, sp, #4
 810eed8:	f7ff fcde 	bl	810e898 <__lo0bits>
 810eedc:	9b01      	ldr	r3, [sp, #4]
 810eede:	6163      	str	r3, [r4, #20]
 810eee0:	2201      	movs	r2, #1
 810eee2:	6122      	str	r2, [r4, #16]
 810eee4:	3020      	adds	r0, #32
 810eee6:	e7e3      	b.n	810eeb0 <__d2b+0x60>
 810eee8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810eeec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810eef0:	f8c9 0000 	str.w	r0, [r9]
 810eef4:	6918      	ldr	r0, [r3, #16]
 810eef6:	f7ff fcaf 	bl	810e858 <__hi0bits>
 810eefa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810eefe:	e7df      	b.n	810eec0 <__d2b+0x70>
 810ef00:	0810fd80 	.word	0x0810fd80
 810ef04:	0810fe70 	.word	0x0810fe70

0810ef08 <__ratio>:
 810ef08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ef0c:	4688      	mov	r8, r1
 810ef0e:	4669      	mov	r1, sp
 810ef10:	4681      	mov	r9, r0
 810ef12:	f7ff ff4d 	bl	810edb0 <__b2d>
 810ef16:	a901      	add	r1, sp, #4
 810ef18:	4640      	mov	r0, r8
 810ef1a:	ec55 4b10 	vmov	r4, r5, d0
 810ef1e:	f7ff ff47 	bl	810edb0 <__b2d>
 810ef22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810ef26:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810ef2a:	eba3 0c02 	sub.w	ip, r3, r2
 810ef2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 810ef32:	1a9b      	subs	r3, r3, r2
 810ef34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810ef38:	ec51 0b10 	vmov	r0, r1, d0
 810ef3c:	2b00      	cmp	r3, #0
 810ef3e:	bfd6      	itet	le
 810ef40:	460a      	movle	r2, r1
 810ef42:	462a      	movgt	r2, r5
 810ef44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810ef48:	468b      	mov	fp, r1
 810ef4a:	462f      	mov	r7, r5
 810ef4c:	bfd4      	ite	le
 810ef4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810ef52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810ef56:	4620      	mov	r0, r4
 810ef58:	ee10 2a10 	vmov	r2, s0
 810ef5c:	465b      	mov	r3, fp
 810ef5e:	4639      	mov	r1, r7
 810ef60:	f7f1 fcfc 	bl	810095c <__aeabi_ddiv>
 810ef64:	ec41 0b10 	vmov	d0, r0, r1
 810ef68:	b003      	add	sp, #12
 810ef6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ef6e <__copybits>:
 810ef6e:	3901      	subs	r1, #1
 810ef70:	b570      	push	{r4, r5, r6, lr}
 810ef72:	1149      	asrs	r1, r1, #5
 810ef74:	6914      	ldr	r4, [r2, #16]
 810ef76:	3101      	adds	r1, #1
 810ef78:	f102 0314 	add.w	r3, r2, #20
 810ef7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810ef80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810ef84:	1f05      	subs	r5, r0, #4
 810ef86:	42a3      	cmp	r3, r4
 810ef88:	d30c      	bcc.n	810efa4 <__copybits+0x36>
 810ef8a:	1aa3      	subs	r3, r4, r2
 810ef8c:	3b11      	subs	r3, #17
 810ef8e:	f023 0303 	bic.w	r3, r3, #3
 810ef92:	3211      	adds	r2, #17
 810ef94:	42a2      	cmp	r2, r4
 810ef96:	bf88      	it	hi
 810ef98:	2300      	movhi	r3, #0
 810ef9a:	4418      	add	r0, r3
 810ef9c:	2300      	movs	r3, #0
 810ef9e:	4288      	cmp	r0, r1
 810efa0:	d305      	bcc.n	810efae <__copybits+0x40>
 810efa2:	bd70      	pop	{r4, r5, r6, pc}
 810efa4:	f853 6b04 	ldr.w	r6, [r3], #4
 810efa8:	f845 6f04 	str.w	r6, [r5, #4]!
 810efac:	e7eb      	b.n	810ef86 <__copybits+0x18>
 810efae:	f840 3b04 	str.w	r3, [r0], #4
 810efb2:	e7f4      	b.n	810ef9e <__copybits+0x30>

0810efb4 <__any_on>:
 810efb4:	f100 0214 	add.w	r2, r0, #20
 810efb8:	6900      	ldr	r0, [r0, #16]
 810efba:	114b      	asrs	r3, r1, #5
 810efbc:	4298      	cmp	r0, r3
 810efbe:	b510      	push	{r4, lr}
 810efc0:	db11      	blt.n	810efe6 <__any_on+0x32>
 810efc2:	dd0a      	ble.n	810efda <__any_on+0x26>
 810efc4:	f011 011f 	ands.w	r1, r1, #31
 810efc8:	d007      	beq.n	810efda <__any_on+0x26>
 810efca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810efce:	fa24 f001 	lsr.w	r0, r4, r1
 810efd2:	fa00 f101 	lsl.w	r1, r0, r1
 810efd6:	428c      	cmp	r4, r1
 810efd8:	d10b      	bne.n	810eff2 <__any_on+0x3e>
 810efda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810efde:	4293      	cmp	r3, r2
 810efe0:	d803      	bhi.n	810efea <__any_on+0x36>
 810efe2:	2000      	movs	r0, #0
 810efe4:	bd10      	pop	{r4, pc}
 810efe6:	4603      	mov	r3, r0
 810efe8:	e7f7      	b.n	810efda <__any_on+0x26>
 810efea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810efee:	2900      	cmp	r1, #0
 810eff0:	d0f5      	beq.n	810efde <__any_on+0x2a>
 810eff2:	2001      	movs	r0, #1
 810eff4:	e7f6      	b.n	810efe4 <__any_on+0x30>

0810eff6 <_calloc_r>:
 810eff6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810eff8:	fba1 2402 	umull	r2, r4, r1, r2
 810effc:	b94c      	cbnz	r4, 810f012 <_calloc_r+0x1c>
 810effe:	4611      	mov	r1, r2
 810f000:	9201      	str	r2, [sp, #4]
 810f002:	f7fb ffed 	bl	810afe0 <_malloc_r>
 810f006:	9a01      	ldr	r2, [sp, #4]
 810f008:	4605      	mov	r5, r0
 810f00a:	b930      	cbnz	r0, 810f01a <_calloc_r+0x24>
 810f00c:	4628      	mov	r0, r5
 810f00e:	b003      	add	sp, #12
 810f010:	bd30      	pop	{r4, r5, pc}
 810f012:	220c      	movs	r2, #12
 810f014:	6002      	str	r2, [r0, #0]
 810f016:	2500      	movs	r5, #0
 810f018:	e7f8      	b.n	810f00c <_calloc_r+0x16>
 810f01a:	4621      	mov	r1, r4
 810f01c:	f7fb ff6c 	bl	810aef8 <memset>
 810f020:	e7f4      	b.n	810f00c <_calloc_r+0x16>

0810f022 <__ssputs_r>:
 810f022:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810f026:	688e      	ldr	r6, [r1, #8]
 810f028:	429e      	cmp	r6, r3
 810f02a:	4682      	mov	sl, r0
 810f02c:	460c      	mov	r4, r1
 810f02e:	4690      	mov	r8, r2
 810f030:	461f      	mov	r7, r3
 810f032:	d838      	bhi.n	810f0a6 <__ssputs_r+0x84>
 810f034:	898a      	ldrh	r2, [r1, #12]
 810f036:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810f03a:	d032      	beq.n	810f0a2 <__ssputs_r+0x80>
 810f03c:	6825      	ldr	r5, [r4, #0]
 810f03e:	6909      	ldr	r1, [r1, #16]
 810f040:	eba5 0901 	sub.w	r9, r5, r1
 810f044:	6965      	ldr	r5, [r4, #20]
 810f046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810f04a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810f04e:	3301      	adds	r3, #1
 810f050:	444b      	add	r3, r9
 810f052:	106d      	asrs	r5, r5, #1
 810f054:	429d      	cmp	r5, r3
 810f056:	bf38      	it	cc
 810f058:	461d      	movcc	r5, r3
 810f05a:	0553      	lsls	r3, r2, #21
 810f05c:	d531      	bpl.n	810f0c2 <__ssputs_r+0xa0>
 810f05e:	4629      	mov	r1, r5
 810f060:	f7fb ffbe 	bl	810afe0 <_malloc_r>
 810f064:	4606      	mov	r6, r0
 810f066:	b950      	cbnz	r0, 810f07e <__ssputs_r+0x5c>
 810f068:	230c      	movs	r3, #12
 810f06a:	f8ca 3000 	str.w	r3, [sl]
 810f06e:	89a3      	ldrh	r3, [r4, #12]
 810f070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810f074:	81a3      	strh	r3, [r4, #12]
 810f076:	f04f 30ff 	mov.w	r0, #4294967295
 810f07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f07e:	6921      	ldr	r1, [r4, #16]
 810f080:	464a      	mov	r2, r9
 810f082:	f7fb ff2b 	bl	810aedc <memcpy>
 810f086:	89a3      	ldrh	r3, [r4, #12]
 810f088:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810f08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810f090:	81a3      	strh	r3, [r4, #12]
 810f092:	6126      	str	r6, [r4, #16]
 810f094:	6165      	str	r5, [r4, #20]
 810f096:	444e      	add	r6, r9
 810f098:	eba5 0509 	sub.w	r5, r5, r9
 810f09c:	6026      	str	r6, [r4, #0]
 810f09e:	60a5      	str	r5, [r4, #8]
 810f0a0:	463e      	mov	r6, r7
 810f0a2:	42be      	cmp	r6, r7
 810f0a4:	d900      	bls.n	810f0a8 <__ssputs_r+0x86>
 810f0a6:	463e      	mov	r6, r7
 810f0a8:	6820      	ldr	r0, [r4, #0]
 810f0aa:	4632      	mov	r2, r6
 810f0ac:	4641      	mov	r1, r8
 810f0ae:	f000 fb61 	bl	810f774 <memmove>
 810f0b2:	68a3      	ldr	r3, [r4, #8]
 810f0b4:	1b9b      	subs	r3, r3, r6
 810f0b6:	60a3      	str	r3, [r4, #8]
 810f0b8:	6823      	ldr	r3, [r4, #0]
 810f0ba:	4433      	add	r3, r6
 810f0bc:	6023      	str	r3, [r4, #0]
 810f0be:	2000      	movs	r0, #0
 810f0c0:	e7db      	b.n	810f07a <__ssputs_r+0x58>
 810f0c2:	462a      	mov	r2, r5
 810f0c4:	f000 fb70 	bl	810f7a8 <_realloc_r>
 810f0c8:	4606      	mov	r6, r0
 810f0ca:	2800      	cmp	r0, #0
 810f0cc:	d1e1      	bne.n	810f092 <__ssputs_r+0x70>
 810f0ce:	6921      	ldr	r1, [r4, #16]
 810f0d0:	4650      	mov	r0, sl
 810f0d2:	f7fb ff19 	bl	810af08 <_free_r>
 810f0d6:	e7c7      	b.n	810f068 <__ssputs_r+0x46>

0810f0d8 <_svfiprintf_r>:
 810f0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f0dc:	4698      	mov	r8, r3
 810f0de:	898b      	ldrh	r3, [r1, #12]
 810f0e0:	061b      	lsls	r3, r3, #24
 810f0e2:	b09d      	sub	sp, #116	; 0x74
 810f0e4:	4607      	mov	r7, r0
 810f0e6:	460d      	mov	r5, r1
 810f0e8:	4614      	mov	r4, r2
 810f0ea:	d50e      	bpl.n	810f10a <_svfiprintf_r+0x32>
 810f0ec:	690b      	ldr	r3, [r1, #16]
 810f0ee:	b963      	cbnz	r3, 810f10a <_svfiprintf_r+0x32>
 810f0f0:	2140      	movs	r1, #64	; 0x40
 810f0f2:	f7fb ff75 	bl	810afe0 <_malloc_r>
 810f0f6:	6028      	str	r0, [r5, #0]
 810f0f8:	6128      	str	r0, [r5, #16]
 810f0fa:	b920      	cbnz	r0, 810f106 <_svfiprintf_r+0x2e>
 810f0fc:	230c      	movs	r3, #12
 810f0fe:	603b      	str	r3, [r7, #0]
 810f100:	f04f 30ff 	mov.w	r0, #4294967295
 810f104:	e0d1      	b.n	810f2aa <_svfiprintf_r+0x1d2>
 810f106:	2340      	movs	r3, #64	; 0x40
 810f108:	616b      	str	r3, [r5, #20]
 810f10a:	2300      	movs	r3, #0
 810f10c:	9309      	str	r3, [sp, #36]	; 0x24
 810f10e:	2320      	movs	r3, #32
 810f110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810f114:	f8cd 800c 	str.w	r8, [sp, #12]
 810f118:	2330      	movs	r3, #48	; 0x30
 810f11a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810f2c4 <_svfiprintf_r+0x1ec>
 810f11e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810f122:	f04f 0901 	mov.w	r9, #1
 810f126:	4623      	mov	r3, r4
 810f128:	469a      	mov	sl, r3
 810f12a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810f12e:	b10a      	cbz	r2, 810f134 <_svfiprintf_r+0x5c>
 810f130:	2a25      	cmp	r2, #37	; 0x25
 810f132:	d1f9      	bne.n	810f128 <_svfiprintf_r+0x50>
 810f134:	ebba 0b04 	subs.w	fp, sl, r4
 810f138:	d00b      	beq.n	810f152 <_svfiprintf_r+0x7a>
 810f13a:	465b      	mov	r3, fp
 810f13c:	4622      	mov	r2, r4
 810f13e:	4629      	mov	r1, r5
 810f140:	4638      	mov	r0, r7
 810f142:	f7ff ff6e 	bl	810f022 <__ssputs_r>
 810f146:	3001      	adds	r0, #1
 810f148:	f000 80aa 	beq.w	810f2a0 <_svfiprintf_r+0x1c8>
 810f14c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810f14e:	445a      	add	r2, fp
 810f150:	9209      	str	r2, [sp, #36]	; 0x24
 810f152:	f89a 3000 	ldrb.w	r3, [sl]
 810f156:	2b00      	cmp	r3, #0
 810f158:	f000 80a2 	beq.w	810f2a0 <_svfiprintf_r+0x1c8>
 810f15c:	2300      	movs	r3, #0
 810f15e:	f04f 32ff 	mov.w	r2, #4294967295
 810f162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810f166:	f10a 0a01 	add.w	sl, sl, #1
 810f16a:	9304      	str	r3, [sp, #16]
 810f16c:	9307      	str	r3, [sp, #28]
 810f16e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810f172:	931a      	str	r3, [sp, #104]	; 0x68
 810f174:	4654      	mov	r4, sl
 810f176:	2205      	movs	r2, #5
 810f178:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f17c:	4851      	ldr	r0, [pc, #324]	; (810f2c4 <_svfiprintf_r+0x1ec>)
 810f17e:	f7f1 f8b7 	bl	81002f0 <memchr>
 810f182:	9a04      	ldr	r2, [sp, #16]
 810f184:	b9d8      	cbnz	r0, 810f1be <_svfiprintf_r+0xe6>
 810f186:	06d0      	lsls	r0, r2, #27
 810f188:	bf44      	itt	mi
 810f18a:	2320      	movmi	r3, #32
 810f18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810f190:	0711      	lsls	r1, r2, #28
 810f192:	bf44      	itt	mi
 810f194:	232b      	movmi	r3, #43	; 0x2b
 810f196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810f19a:	f89a 3000 	ldrb.w	r3, [sl]
 810f19e:	2b2a      	cmp	r3, #42	; 0x2a
 810f1a0:	d015      	beq.n	810f1ce <_svfiprintf_r+0xf6>
 810f1a2:	9a07      	ldr	r2, [sp, #28]
 810f1a4:	4654      	mov	r4, sl
 810f1a6:	2000      	movs	r0, #0
 810f1a8:	f04f 0c0a 	mov.w	ip, #10
 810f1ac:	4621      	mov	r1, r4
 810f1ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 810f1b2:	3b30      	subs	r3, #48	; 0x30
 810f1b4:	2b09      	cmp	r3, #9
 810f1b6:	d94e      	bls.n	810f256 <_svfiprintf_r+0x17e>
 810f1b8:	b1b0      	cbz	r0, 810f1e8 <_svfiprintf_r+0x110>
 810f1ba:	9207      	str	r2, [sp, #28]
 810f1bc:	e014      	b.n	810f1e8 <_svfiprintf_r+0x110>
 810f1be:	eba0 0308 	sub.w	r3, r0, r8
 810f1c2:	fa09 f303 	lsl.w	r3, r9, r3
 810f1c6:	4313      	orrs	r3, r2
 810f1c8:	9304      	str	r3, [sp, #16]
 810f1ca:	46a2      	mov	sl, r4
 810f1cc:	e7d2      	b.n	810f174 <_svfiprintf_r+0x9c>
 810f1ce:	9b03      	ldr	r3, [sp, #12]
 810f1d0:	1d19      	adds	r1, r3, #4
 810f1d2:	681b      	ldr	r3, [r3, #0]
 810f1d4:	9103      	str	r1, [sp, #12]
 810f1d6:	2b00      	cmp	r3, #0
 810f1d8:	bfbb      	ittet	lt
 810f1da:	425b      	neglt	r3, r3
 810f1dc:	f042 0202 	orrlt.w	r2, r2, #2
 810f1e0:	9307      	strge	r3, [sp, #28]
 810f1e2:	9307      	strlt	r3, [sp, #28]
 810f1e4:	bfb8      	it	lt
 810f1e6:	9204      	strlt	r2, [sp, #16]
 810f1e8:	7823      	ldrb	r3, [r4, #0]
 810f1ea:	2b2e      	cmp	r3, #46	; 0x2e
 810f1ec:	d10c      	bne.n	810f208 <_svfiprintf_r+0x130>
 810f1ee:	7863      	ldrb	r3, [r4, #1]
 810f1f0:	2b2a      	cmp	r3, #42	; 0x2a
 810f1f2:	d135      	bne.n	810f260 <_svfiprintf_r+0x188>
 810f1f4:	9b03      	ldr	r3, [sp, #12]
 810f1f6:	1d1a      	adds	r2, r3, #4
 810f1f8:	681b      	ldr	r3, [r3, #0]
 810f1fa:	9203      	str	r2, [sp, #12]
 810f1fc:	2b00      	cmp	r3, #0
 810f1fe:	bfb8      	it	lt
 810f200:	f04f 33ff 	movlt.w	r3, #4294967295
 810f204:	3402      	adds	r4, #2
 810f206:	9305      	str	r3, [sp, #20]
 810f208:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810f2d4 <_svfiprintf_r+0x1fc>
 810f20c:	7821      	ldrb	r1, [r4, #0]
 810f20e:	2203      	movs	r2, #3
 810f210:	4650      	mov	r0, sl
 810f212:	f7f1 f86d 	bl	81002f0 <memchr>
 810f216:	b140      	cbz	r0, 810f22a <_svfiprintf_r+0x152>
 810f218:	2340      	movs	r3, #64	; 0x40
 810f21a:	eba0 000a 	sub.w	r0, r0, sl
 810f21e:	fa03 f000 	lsl.w	r0, r3, r0
 810f222:	9b04      	ldr	r3, [sp, #16]
 810f224:	4303      	orrs	r3, r0
 810f226:	3401      	adds	r4, #1
 810f228:	9304      	str	r3, [sp, #16]
 810f22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f22e:	4826      	ldr	r0, [pc, #152]	; (810f2c8 <_svfiprintf_r+0x1f0>)
 810f230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810f234:	2206      	movs	r2, #6
 810f236:	f7f1 f85b 	bl	81002f0 <memchr>
 810f23a:	2800      	cmp	r0, #0
 810f23c:	d038      	beq.n	810f2b0 <_svfiprintf_r+0x1d8>
 810f23e:	4b23      	ldr	r3, [pc, #140]	; (810f2cc <_svfiprintf_r+0x1f4>)
 810f240:	bb1b      	cbnz	r3, 810f28a <_svfiprintf_r+0x1b2>
 810f242:	9b03      	ldr	r3, [sp, #12]
 810f244:	3307      	adds	r3, #7
 810f246:	f023 0307 	bic.w	r3, r3, #7
 810f24a:	3308      	adds	r3, #8
 810f24c:	9303      	str	r3, [sp, #12]
 810f24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f250:	4433      	add	r3, r6
 810f252:	9309      	str	r3, [sp, #36]	; 0x24
 810f254:	e767      	b.n	810f126 <_svfiprintf_r+0x4e>
 810f256:	fb0c 3202 	mla	r2, ip, r2, r3
 810f25a:	460c      	mov	r4, r1
 810f25c:	2001      	movs	r0, #1
 810f25e:	e7a5      	b.n	810f1ac <_svfiprintf_r+0xd4>
 810f260:	2300      	movs	r3, #0
 810f262:	3401      	adds	r4, #1
 810f264:	9305      	str	r3, [sp, #20]
 810f266:	4619      	mov	r1, r3
 810f268:	f04f 0c0a 	mov.w	ip, #10
 810f26c:	4620      	mov	r0, r4
 810f26e:	f810 2b01 	ldrb.w	r2, [r0], #1
 810f272:	3a30      	subs	r2, #48	; 0x30
 810f274:	2a09      	cmp	r2, #9
 810f276:	d903      	bls.n	810f280 <_svfiprintf_r+0x1a8>
 810f278:	2b00      	cmp	r3, #0
 810f27a:	d0c5      	beq.n	810f208 <_svfiprintf_r+0x130>
 810f27c:	9105      	str	r1, [sp, #20]
 810f27e:	e7c3      	b.n	810f208 <_svfiprintf_r+0x130>
 810f280:	fb0c 2101 	mla	r1, ip, r1, r2
 810f284:	4604      	mov	r4, r0
 810f286:	2301      	movs	r3, #1
 810f288:	e7f0      	b.n	810f26c <_svfiprintf_r+0x194>
 810f28a:	ab03      	add	r3, sp, #12
 810f28c:	9300      	str	r3, [sp, #0]
 810f28e:	462a      	mov	r2, r5
 810f290:	4b0f      	ldr	r3, [pc, #60]	; (810f2d0 <_svfiprintf_r+0x1f8>)
 810f292:	a904      	add	r1, sp, #16
 810f294:	4638      	mov	r0, r7
 810f296:	f7fb ffb7 	bl	810b208 <_printf_float>
 810f29a:	1c42      	adds	r2, r0, #1
 810f29c:	4606      	mov	r6, r0
 810f29e:	d1d6      	bne.n	810f24e <_svfiprintf_r+0x176>
 810f2a0:	89ab      	ldrh	r3, [r5, #12]
 810f2a2:	065b      	lsls	r3, r3, #25
 810f2a4:	f53f af2c 	bmi.w	810f100 <_svfiprintf_r+0x28>
 810f2a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 810f2aa:	b01d      	add	sp, #116	; 0x74
 810f2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f2b0:	ab03      	add	r3, sp, #12
 810f2b2:	9300      	str	r3, [sp, #0]
 810f2b4:	462a      	mov	r2, r5
 810f2b6:	4b06      	ldr	r3, [pc, #24]	; (810f2d0 <_svfiprintf_r+0x1f8>)
 810f2b8:	a904      	add	r1, sp, #16
 810f2ba:	4638      	mov	r0, r7
 810f2bc:	f7fc fa48 	bl	810b750 <_printf_i>
 810f2c0:	e7eb      	b.n	810f29a <_svfiprintf_r+0x1c2>
 810f2c2:	bf00      	nop
 810f2c4:	0810ffcc 	.word	0x0810ffcc
 810f2c8:	0810ffd6 	.word	0x0810ffd6
 810f2cc:	0810b209 	.word	0x0810b209
 810f2d0:	0810f023 	.word	0x0810f023
 810f2d4:	0810ffd2 	.word	0x0810ffd2

0810f2d8 <__sfputc_r>:
 810f2d8:	6893      	ldr	r3, [r2, #8]
 810f2da:	3b01      	subs	r3, #1
 810f2dc:	2b00      	cmp	r3, #0
 810f2de:	b410      	push	{r4}
 810f2e0:	6093      	str	r3, [r2, #8]
 810f2e2:	da08      	bge.n	810f2f6 <__sfputc_r+0x1e>
 810f2e4:	6994      	ldr	r4, [r2, #24]
 810f2e6:	42a3      	cmp	r3, r4
 810f2e8:	db01      	blt.n	810f2ee <__sfputc_r+0x16>
 810f2ea:	290a      	cmp	r1, #10
 810f2ec:	d103      	bne.n	810f2f6 <__sfputc_r+0x1e>
 810f2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 810f2f2:	f7fd bcd5 	b.w	810cca0 <__swbuf_r>
 810f2f6:	6813      	ldr	r3, [r2, #0]
 810f2f8:	1c58      	adds	r0, r3, #1
 810f2fa:	6010      	str	r0, [r2, #0]
 810f2fc:	7019      	strb	r1, [r3, #0]
 810f2fe:	4608      	mov	r0, r1
 810f300:	f85d 4b04 	ldr.w	r4, [sp], #4
 810f304:	4770      	bx	lr

0810f306 <__sfputs_r>:
 810f306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810f308:	4606      	mov	r6, r0
 810f30a:	460f      	mov	r7, r1
 810f30c:	4614      	mov	r4, r2
 810f30e:	18d5      	adds	r5, r2, r3
 810f310:	42ac      	cmp	r4, r5
 810f312:	d101      	bne.n	810f318 <__sfputs_r+0x12>
 810f314:	2000      	movs	r0, #0
 810f316:	e007      	b.n	810f328 <__sfputs_r+0x22>
 810f318:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f31c:	463a      	mov	r2, r7
 810f31e:	4630      	mov	r0, r6
 810f320:	f7ff ffda 	bl	810f2d8 <__sfputc_r>
 810f324:	1c43      	adds	r3, r0, #1
 810f326:	d1f3      	bne.n	810f310 <__sfputs_r+0xa>
 810f328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810f32c <_vfiprintf_r>:
 810f32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f330:	460d      	mov	r5, r1
 810f332:	b09d      	sub	sp, #116	; 0x74
 810f334:	4614      	mov	r4, r2
 810f336:	4698      	mov	r8, r3
 810f338:	4606      	mov	r6, r0
 810f33a:	b118      	cbz	r0, 810f344 <_vfiprintf_r+0x18>
 810f33c:	6983      	ldr	r3, [r0, #24]
 810f33e:	b90b      	cbnz	r3, 810f344 <_vfiprintf_r+0x18>
 810f340:	f7fe fd02 	bl	810dd48 <__sinit>
 810f344:	4b89      	ldr	r3, [pc, #548]	; (810f56c <_vfiprintf_r+0x240>)
 810f346:	429d      	cmp	r5, r3
 810f348:	d11b      	bne.n	810f382 <_vfiprintf_r+0x56>
 810f34a:	6875      	ldr	r5, [r6, #4]
 810f34c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810f34e:	07d9      	lsls	r1, r3, #31
 810f350:	d405      	bmi.n	810f35e <_vfiprintf_r+0x32>
 810f352:	89ab      	ldrh	r3, [r5, #12]
 810f354:	059a      	lsls	r2, r3, #22
 810f356:	d402      	bmi.n	810f35e <_vfiprintf_r+0x32>
 810f358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810f35a:	f7ff f906 	bl	810e56a <__retarget_lock_acquire_recursive>
 810f35e:	89ab      	ldrh	r3, [r5, #12]
 810f360:	071b      	lsls	r3, r3, #28
 810f362:	d501      	bpl.n	810f368 <_vfiprintf_r+0x3c>
 810f364:	692b      	ldr	r3, [r5, #16]
 810f366:	b9eb      	cbnz	r3, 810f3a4 <_vfiprintf_r+0x78>
 810f368:	4629      	mov	r1, r5
 810f36a:	4630      	mov	r0, r6
 810f36c:	f7fd fcea 	bl	810cd44 <__swsetup_r>
 810f370:	b1c0      	cbz	r0, 810f3a4 <_vfiprintf_r+0x78>
 810f372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810f374:	07dc      	lsls	r4, r3, #31
 810f376:	d50e      	bpl.n	810f396 <_vfiprintf_r+0x6a>
 810f378:	f04f 30ff 	mov.w	r0, #4294967295
 810f37c:	b01d      	add	sp, #116	; 0x74
 810f37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f382:	4b7b      	ldr	r3, [pc, #492]	; (810f570 <_vfiprintf_r+0x244>)
 810f384:	429d      	cmp	r5, r3
 810f386:	d101      	bne.n	810f38c <_vfiprintf_r+0x60>
 810f388:	68b5      	ldr	r5, [r6, #8]
 810f38a:	e7df      	b.n	810f34c <_vfiprintf_r+0x20>
 810f38c:	4b79      	ldr	r3, [pc, #484]	; (810f574 <_vfiprintf_r+0x248>)
 810f38e:	429d      	cmp	r5, r3
 810f390:	bf08      	it	eq
 810f392:	68f5      	ldreq	r5, [r6, #12]
 810f394:	e7da      	b.n	810f34c <_vfiprintf_r+0x20>
 810f396:	89ab      	ldrh	r3, [r5, #12]
 810f398:	0598      	lsls	r0, r3, #22
 810f39a:	d4ed      	bmi.n	810f378 <_vfiprintf_r+0x4c>
 810f39c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810f39e:	f7ff f8e5 	bl	810e56c <__retarget_lock_release_recursive>
 810f3a2:	e7e9      	b.n	810f378 <_vfiprintf_r+0x4c>
 810f3a4:	2300      	movs	r3, #0
 810f3a6:	9309      	str	r3, [sp, #36]	; 0x24
 810f3a8:	2320      	movs	r3, #32
 810f3aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810f3ae:	f8cd 800c 	str.w	r8, [sp, #12]
 810f3b2:	2330      	movs	r3, #48	; 0x30
 810f3b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810f578 <_vfiprintf_r+0x24c>
 810f3b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810f3bc:	f04f 0901 	mov.w	r9, #1
 810f3c0:	4623      	mov	r3, r4
 810f3c2:	469a      	mov	sl, r3
 810f3c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 810f3c8:	b10a      	cbz	r2, 810f3ce <_vfiprintf_r+0xa2>
 810f3ca:	2a25      	cmp	r2, #37	; 0x25
 810f3cc:	d1f9      	bne.n	810f3c2 <_vfiprintf_r+0x96>
 810f3ce:	ebba 0b04 	subs.w	fp, sl, r4
 810f3d2:	d00b      	beq.n	810f3ec <_vfiprintf_r+0xc0>
 810f3d4:	465b      	mov	r3, fp
 810f3d6:	4622      	mov	r2, r4
 810f3d8:	4629      	mov	r1, r5
 810f3da:	4630      	mov	r0, r6
 810f3dc:	f7ff ff93 	bl	810f306 <__sfputs_r>
 810f3e0:	3001      	adds	r0, #1
 810f3e2:	f000 80aa 	beq.w	810f53a <_vfiprintf_r+0x20e>
 810f3e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810f3e8:	445a      	add	r2, fp
 810f3ea:	9209      	str	r2, [sp, #36]	; 0x24
 810f3ec:	f89a 3000 	ldrb.w	r3, [sl]
 810f3f0:	2b00      	cmp	r3, #0
 810f3f2:	f000 80a2 	beq.w	810f53a <_vfiprintf_r+0x20e>
 810f3f6:	2300      	movs	r3, #0
 810f3f8:	f04f 32ff 	mov.w	r2, #4294967295
 810f3fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810f400:	f10a 0a01 	add.w	sl, sl, #1
 810f404:	9304      	str	r3, [sp, #16]
 810f406:	9307      	str	r3, [sp, #28]
 810f408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810f40c:	931a      	str	r3, [sp, #104]	; 0x68
 810f40e:	4654      	mov	r4, sl
 810f410:	2205      	movs	r2, #5
 810f412:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f416:	4858      	ldr	r0, [pc, #352]	; (810f578 <_vfiprintf_r+0x24c>)
 810f418:	f7f0 ff6a 	bl	81002f0 <memchr>
 810f41c:	9a04      	ldr	r2, [sp, #16]
 810f41e:	b9d8      	cbnz	r0, 810f458 <_vfiprintf_r+0x12c>
 810f420:	06d1      	lsls	r1, r2, #27
 810f422:	bf44      	itt	mi
 810f424:	2320      	movmi	r3, #32
 810f426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810f42a:	0713      	lsls	r3, r2, #28
 810f42c:	bf44      	itt	mi
 810f42e:	232b      	movmi	r3, #43	; 0x2b
 810f430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810f434:	f89a 3000 	ldrb.w	r3, [sl]
 810f438:	2b2a      	cmp	r3, #42	; 0x2a
 810f43a:	d015      	beq.n	810f468 <_vfiprintf_r+0x13c>
 810f43c:	9a07      	ldr	r2, [sp, #28]
 810f43e:	4654      	mov	r4, sl
 810f440:	2000      	movs	r0, #0
 810f442:	f04f 0c0a 	mov.w	ip, #10
 810f446:	4621      	mov	r1, r4
 810f448:	f811 3b01 	ldrb.w	r3, [r1], #1
 810f44c:	3b30      	subs	r3, #48	; 0x30
 810f44e:	2b09      	cmp	r3, #9
 810f450:	d94e      	bls.n	810f4f0 <_vfiprintf_r+0x1c4>
 810f452:	b1b0      	cbz	r0, 810f482 <_vfiprintf_r+0x156>
 810f454:	9207      	str	r2, [sp, #28]
 810f456:	e014      	b.n	810f482 <_vfiprintf_r+0x156>
 810f458:	eba0 0308 	sub.w	r3, r0, r8
 810f45c:	fa09 f303 	lsl.w	r3, r9, r3
 810f460:	4313      	orrs	r3, r2
 810f462:	9304      	str	r3, [sp, #16]
 810f464:	46a2      	mov	sl, r4
 810f466:	e7d2      	b.n	810f40e <_vfiprintf_r+0xe2>
 810f468:	9b03      	ldr	r3, [sp, #12]
 810f46a:	1d19      	adds	r1, r3, #4
 810f46c:	681b      	ldr	r3, [r3, #0]
 810f46e:	9103      	str	r1, [sp, #12]
 810f470:	2b00      	cmp	r3, #0
 810f472:	bfbb      	ittet	lt
 810f474:	425b      	neglt	r3, r3
 810f476:	f042 0202 	orrlt.w	r2, r2, #2
 810f47a:	9307      	strge	r3, [sp, #28]
 810f47c:	9307      	strlt	r3, [sp, #28]
 810f47e:	bfb8      	it	lt
 810f480:	9204      	strlt	r2, [sp, #16]
 810f482:	7823      	ldrb	r3, [r4, #0]
 810f484:	2b2e      	cmp	r3, #46	; 0x2e
 810f486:	d10c      	bne.n	810f4a2 <_vfiprintf_r+0x176>
 810f488:	7863      	ldrb	r3, [r4, #1]
 810f48a:	2b2a      	cmp	r3, #42	; 0x2a
 810f48c:	d135      	bne.n	810f4fa <_vfiprintf_r+0x1ce>
 810f48e:	9b03      	ldr	r3, [sp, #12]
 810f490:	1d1a      	adds	r2, r3, #4
 810f492:	681b      	ldr	r3, [r3, #0]
 810f494:	9203      	str	r2, [sp, #12]
 810f496:	2b00      	cmp	r3, #0
 810f498:	bfb8      	it	lt
 810f49a:	f04f 33ff 	movlt.w	r3, #4294967295
 810f49e:	3402      	adds	r4, #2
 810f4a0:	9305      	str	r3, [sp, #20]
 810f4a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810f588 <_vfiprintf_r+0x25c>
 810f4a6:	7821      	ldrb	r1, [r4, #0]
 810f4a8:	2203      	movs	r2, #3
 810f4aa:	4650      	mov	r0, sl
 810f4ac:	f7f0 ff20 	bl	81002f0 <memchr>
 810f4b0:	b140      	cbz	r0, 810f4c4 <_vfiprintf_r+0x198>
 810f4b2:	2340      	movs	r3, #64	; 0x40
 810f4b4:	eba0 000a 	sub.w	r0, r0, sl
 810f4b8:	fa03 f000 	lsl.w	r0, r3, r0
 810f4bc:	9b04      	ldr	r3, [sp, #16]
 810f4be:	4303      	orrs	r3, r0
 810f4c0:	3401      	adds	r4, #1
 810f4c2:	9304      	str	r3, [sp, #16]
 810f4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f4c8:	482c      	ldr	r0, [pc, #176]	; (810f57c <_vfiprintf_r+0x250>)
 810f4ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810f4ce:	2206      	movs	r2, #6
 810f4d0:	f7f0 ff0e 	bl	81002f0 <memchr>
 810f4d4:	2800      	cmp	r0, #0
 810f4d6:	d03f      	beq.n	810f558 <_vfiprintf_r+0x22c>
 810f4d8:	4b29      	ldr	r3, [pc, #164]	; (810f580 <_vfiprintf_r+0x254>)
 810f4da:	bb1b      	cbnz	r3, 810f524 <_vfiprintf_r+0x1f8>
 810f4dc:	9b03      	ldr	r3, [sp, #12]
 810f4de:	3307      	adds	r3, #7
 810f4e0:	f023 0307 	bic.w	r3, r3, #7
 810f4e4:	3308      	adds	r3, #8
 810f4e6:	9303      	str	r3, [sp, #12]
 810f4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f4ea:	443b      	add	r3, r7
 810f4ec:	9309      	str	r3, [sp, #36]	; 0x24
 810f4ee:	e767      	b.n	810f3c0 <_vfiprintf_r+0x94>
 810f4f0:	fb0c 3202 	mla	r2, ip, r2, r3
 810f4f4:	460c      	mov	r4, r1
 810f4f6:	2001      	movs	r0, #1
 810f4f8:	e7a5      	b.n	810f446 <_vfiprintf_r+0x11a>
 810f4fa:	2300      	movs	r3, #0
 810f4fc:	3401      	adds	r4, #1
 810f4fe:	9305      	str	r3, [sp, #20]
 810f500:	4619      	mov	r1, r3
 810f502:	f04f 0c0a 	mov.w	ip, #10
 810f506:	4620      	mov	r0, r4
 810f508:	f810 2b01 	ldrb.w	r2, [r0], #1
 810f50c:	3a30      	subs	r2, #48	; 0x30
 810f50e:	2a09      	cmp	r2, #9
 810f510:	d903      	bls.n	810f51a <_vfiprintf_r+0x1ee>
 810f512:	2b00      	cmp	r3, #0
 810f514:	d0c5      	beq.n	810f4a2 <_vfiprintf_r+0x176>
 810f516:	9105      	str	r1, [sp, #20]
 810f518:	e7c3      	b.n	810f4a2 <_vfiprintf_r+0x176>
 810f51a:	fb0c 2101 	mla	r1, ip, r1, r2
 810f51e:	4604      	mov	r4, r0
 810f520:	2301      	movs	r3, #1
 810f522:	e7f0      	b.n	810f506 <_vfiprintf_r+0x1da>
 810f524:	ab03      	add	r3, sp, #12
 810f526:	9300      	str	r3, [sp, #0]
 810f528:	462a      	mov	r2, r5
 810f52a:	4b16      	ldr	r3, [pc, #88]	; (810f584 <_vfiprintf_r+0x258>)
 810f52c:	a904      	add	r1, sp, #16
 810f52e:	4630      	mov	r0, r6
 810f530:	f7fb fe6a 	bl	810b208 <_printf_float>
 810f534:	4607      	mov	r7, r0
 810f536:	1c78      	adds	r0, r7, #1
 810f538:	d1d6      	bne.n	810f4e8 <_vfiprintf_r+0x1bc>
 810f53a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810f53c:	07d9      	lsls	r1, r3, #31
 810f53e:	d405      	bmi.n	810f54c <_vfiprintf_r+0x220>
 810f540:	89ab      	ldrh	r3, [r5, #12]
 810f542:	059a      	lsls	r2, r3, #22
 810f544:	d402      	bmi.n	810f54c <_vfiprintf_r+0x220>
 810f546:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810f548:	f7ff f810 	bl	810e56c <__retarget_lock_release_recursive>
 810f54c:	89ab      	ldrh	r3, [r5, #12]
 810f54e:	065b      	lsls	r3, r3, #25
 810f550:	f53f af12 	bmi.w	810f378 <_vfiprintf_r+0x4c>
 810f554:	9809      	ldr	r0, [sp, #36]	; 0x24
 810f556:	e711      	b.n	810f37c <_vfiprintf_r+0x50>
 810f558:	ab03      	add	r3, sp, #12
 810f55a:	9300      	str	r3, [sp, #0]
 810f55c:	462a      	mov	r2, r5
 810f55e:	4b09      	ldr	r3, [pc, #36]	; (810f584 <_vfiprintf_r+0x258>)
 810f560:	a904      	add	r1, sp, #16
 810f562:	4630      	mov	r0, r6
 810f564:	f7fc f8f4 	bl	810b750 <_printf_i>
 810f568:	e7e4      	b.n	810f534 <_vfiprintf_r+0x208>
 810f56a:	bf00      	nop
 810f56c:	0810fdb4 	.word	0x0810fdb4
 810f570:	0810fdd4 	.word	0x0810fdd4
 810f574:	0810fd94 	.word	0x0810fd94
 810f578:	0810ffcc 	.word	0x0810ffcc
 810f57c:	0810ffd6 	.word	0x0810ffd6
 810f580:	0810b209 	.word	0x0810b209
 810f584:	0810f307 	.word	0x0810f307
 810f588:	0810ffd2 	.word	0x0810ffd2
 810f58c:	00000000 	.word	0x00000000

0810f590 <nan>:
 810f590:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810f598 <nan+0x8>
 810f594:	4770      	bx	lr
 810f596:	bf00      	nop
 810f598:	00000000 	.word	0x00000000
 810f59c:	7ff80000 	.word	0x7ff80000

0810f5a0 <__sread>:
 810f5a0:	b510      	push	{r4, lr}
 810f5a2:	460c      	mov	r4, r1
 810f5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f5a8:	f000 f92e 	bl	810f808 <_read_r>
 810f5ac:	2800      	cmp	r0, #0
 810f5ae:	bfab      	itete	ge
 810f5b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810f5b2:	89a3      	ldrhlt	r3, [r4, #12]
 810f5b4:	181b      	addge	r3, r3, r0
 810f5b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810f5ba:	bfac      	ite	ge
 810f5bc:	6563      	strge	r3, [r4, #84]	; 0x54
 810f5be:	81a3      	strhlt	r3, [r4, #12]
 810f5c0:	bd10      	pop	{r4, pc}

0810f5c2 <__swrite>:
 810f5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f5c6:	461f      	mov	r7, r3
 810f5c8:	898b      	ldrh	r3, [r1, #12]
 810f5ca:	05db      	lsls	r3, r3, #23
 810f5cc:	4605      	mov	r5, r0
 810f5ce:	460c      	mov	r4, r1
 810f5d0:	4616      	mov	r6, r2
 810f5d2:	d505      	bpl.n	810f5e0 <__swrite+0x1e>
 810f5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f5d8:	2302      	movs	r3, #2
 810f5da:	2200      	movs	r2, #0
 810f5dc:	f000 f8b8 	bl	810f750 <_lseek_r>
 810f5e0:	89a3      	ldrh	r3, [r4, #12]
 810f5e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810f5e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810f5ea:	81a3      	strh	r3, [r4, #12]
 810f5ec:	4632      	mov	r2, r6
 810f5ee:	463b      	mov	r3, r7
 810f5f0:	4628      	mov	r0, r5
 810f5f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f5f6:	f000 b837 	b.w	810f668 <_write_r>

0810f5fa <__sseek>:
 810f5fa:	b510      	push	{r4, lr}
 810f5fc:	460c      	mov	r4, r1
 810f5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f602:	f000 f8a5 	bl	810f750 <_lseek_r>
 810f606:	1c43      	adds	r3, r0, #1
 810f608:	89a3      	ldrh	r3, [r4, #12]
 810f60a:	bf15      	itete	ne
 810f60c:	6560      	strne	r0, [r4, #84]	; 0x54
 810f60e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810f612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810f616:	81a3      	strheq	r3, [r4, #12]
 810f618:	bf18      	it	ne
 810f61a:	81a3      	strhne	r3, [r4, #12]
 810f61c:	bd10      	pop	{r4, pc}

0810f61e <__sclose>:
 810f61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f622:	f000 b851 	b.w	810f6c8 <_close_r>

0810f626 <strncmp>:
 810f626:	b510      	push	{r4, lr}
 810f628:	b17a      	cbz	r2, 810f64a <strncmp+0x24>
 810f62a:	4603      	mov	r3, r0
 810f62c:	3901      	subs	r1, #1
 810f62e:	1884      	adds	r4, r0, r2
 810f630:	f813 0b01 	ldrb.w	r0, [r3], #1
 810f634:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810f638:	4290      	cmp	r0, r2
 810f63a:	d101      	bne.n	810f640 <strncmp+0x1a>
 810f63c:	42a3      	cmp	r3, r4
 810f63e:	d101      	bne.n	810f644 <strncmp+0x1e>
 810f640:	1a80      	subs	r0, r0, r2
 810f642:	bd10      	pop	{r4, pc}
 810f644:	2800      	cmp	r0, #0
 810f646:	d1f3      	bne.n	810f630 <strncmp+0xa>
 810f648:	e7fa      	b.n	810f640 <strncmp+0x1a>
 810f64a:	4610      	mov	r0, r2
 810f64c:	e7f9      	b.n	810f642 <strncmp+0x1c>

0810f64e <__ascii_wctomb>:
 810f64e:	b149      	cbz	r1, 810f664 <__ascii_wctomb+0x16>
 810f650:	2aff      	cmp	r2, #255	; 0xff
 810f652:	bf85      	ittet	hi
 810f654:	238a      	movhi	r3, #138	; 0x8a
 810f656:	6003      	strhi	r3, [r0, #0]
 810f658:	700a      	strbls	r2, [r1, #0]
 810f65a:	f04f 30ff 	movhi.w	r0, #4294967295
 810f65e:	bf98      	it	ls
 810f660:	2001      	movls	r0, #1
 810f662:	4770      	bx	lr
 810f664:	4608      	mov	r0, r1
 810f666:	4770      	bx	lr

0810f668 <_write_r>:
 810f668:	b538      	push	{r3, r4, r5, lr}
 810f66a:	4d07      	ldr	r5, [pc, #28]	; (810f688 <_write_r+0x20>)
 810f66c:	4604      	mov	r4, r0
 810f66e:	4608      	mov	r0, r1
 810f670:	4611      	mov	r1, r2
 810f672:	2200      	movs	r2, #0
 810f674:	602a      	str	r2, [r5, #0]
 810f676:	461a      	mov	r2, r3
 810f678:	f7f3 fbbd 	bl	8102df6 <_write>
 810f67c:	1c43      	adds	r3, r0, #1
 810f67e:	d102      	bne.n	810f686 <_write_r+0x1e>
 810f680:	682b      	ldr	r3, [r5, #0]
 810f682:	b103      	cbz	r3, 810f686 <_write_r+0x1e>
 810f684:	6023      	str	r3, [r4, #0]
 810f686:	bd38      	pop	{r3, r4, r5, pc}
 810f688:	100004b4 	.word	0x100004b4

0810f68c <__assert_func>:
 810f68c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810f68e:	4614      	mov	r4, r2
 810f690:	461a      	mov	r2, r3
 810f692:	4b09      	ldr	r3, [pc, #36]	; (810f6b8 <__assert_func+0x2c>)
 810f694:	681b      	ldr	r3, [r3, #0]
 810f696:	4605      	mov	r5, r0
 810f698:	68d8      	ldr	r0, [r3, #12]
 810f69a:	b14c      	cbz	r4, 810f6b0 <__assert_func+0x24>
 810f69c:	4b07      	ldr	r3, [pc, #28]	; (810f6bc <__assert_func+0x30>)
 810f69e:	9100      	str	r1, [sp, #0]
 810f6a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810f6a4:	4906      	ldr	r1, [pc, #24]	; (810f6c0 <__assert_func+0x34>)
 810f6a6:	462b      	mov	r3, r5
 810f6a8:	f000 f81e 	bl	810f6e8 <fiprintf>
 810f6ac:	f000 f8be 	bl	810f82c <abort>
 810f6b0:	4b04      	ldr	r3, [pc, #16]	; (810f6c4 <__assert_func+0x38>)
 810f6b2:	461c      	mov	r4, r3
 810f6b4:	e7f3      	b.n	810f69e <__assert_func+0x12>
 810f6b6:	bf00      	nop
 810f6b8:	10000020 	.word	0x10000020
 810f6bc:	0810ffdd 	.word	0x0810ffdd
 810f6c0:	0810ffea 	.word	0x0810ffea
 810f6c4:	08110018 	.word	0x08110018

0810f6c8 <_close_r>:
 810f6c8:	b538      	push	{r3, r4, r5, lr}
 810f6ca:	4d06      	ldr	r5, [pc, #24]	; (810f6e4 <_close_r+0x1c>)
 810f6cc:	2300      	movs	r3, #0
 810f6ce:	4604      	mov	r4, r0
 810f6d0:	4608      	mov	r0, r1
 810f6d2:	602b      	str	r3, [r5, #0]
 810f6d4:	f7f3 fbab 	bl	8102e2e <_close>
 810f6d8:	1c43      	adds	r3, r0, #1
 810f6da:	d102      	bne.n	810f6e2 <_close_r+0x1a>
 810f6dc:	682b      	ldr	r3, [r5, #0]
 810f6de:	b103      	cbz	r3, 810f6e2 <_close_r+0x1a>
 810f6e0:	6023      	str	r3, [r4, #0]
 810f6e2:	bd38      	pop	{r3, r4, r5, pc}
 810f6e4:	100004b4 	.word	0x100004b4

0810f6e8 <fiprintf>:
 810f6e8:	b40e      	push	{r1, r2, r3}
 810f6ea:	b503      	push	{r0, r1, lr}
 810f6ec:	4601      	mov	r1, r0
 810f6ee:	ab03      	add	r3, sp, #12
 810f6f0:	4805      	ldr	r0, [pc, #20]	; (810f708 <fiprintf+0x20>)
 810f6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 810f6f6:	6800      	ldr	r0, [r0, #0]
 810f6f8:	9301      	str	r3, [sp, #4]
 810f6fa:	f7ff fe17 	bl	810f32c <_vfiprintf_r>
 810f6fe:	b002      	add	sp, #8
 810f700:	f85d eb04 	ldr.w	lr, [sp], #4
 810f704:	b003      	add	sp, #12
 810f706:	4770      	bx	lr
 810f708:	10000020 	.word	0x10000020

0810f70c <_fstat_r>:
 810f70c:	b538      	push	{r3, r4, r5, lr}
 810f70e:	4d07      	ldr	r5, [pc, #28]	; (810f72c <_fstat_r+0x20>)
 810f710:	2300      	movs	r3, #0
 810f712:	4604      	mov	r4, r0
 810f714:	4608      	mov	r0, r1
 810f716:	4611      	mov	r1, r2
 810f718:	602b      	str	r3, [r5, #0]
 810f71a:	f7f3 fb94 	bl	8102e46 <_fstat>
 810f71e:	1c43      	adds	r3, r0, #1
 810f720:	d102      	bne.n	810f728 <_fstat_r+0x1c>
 810f722:	682b      	ldr	r3, [r5, #0]
 810f724:	b103      	cbz	r3, 810f728 <_fstat_r+0x1c>
 810f726:	6023      	str	r3, [r4, #0]
 810f728:	bd38      	pop	{r3, r4, r5, pc}
 810f72a:	bf00      	nop
 810f72c:	100004b4 	.word	0x100004b4

0810f730 <_isatty_r>:
 810f730:	b538      	push	{r3, r4, r5, lr}
 810f732:	4d06      	ldr	r5, [pc, #24]	; (810f74c <_isatty_r+0x1c>)
 810f734:	2300      	movs	r3, #0
 810f736:	4604      	mov	r4, r0
 810f738:	4608      	mov	r0, r1
 810f73a:	602b      	str	r3, [r5, #0]
 810f73c:	f7f3 fb93 	bl	8102e66 <_isatty>
 810f740:	1c43      	adds	r3, r0, #1
 810f742:	d102      	bne.n	810f74a <_isatty_r+0x1a>
 810f744:	682b      	ldr	r3, [r5, #0]
 810f746:	b103      	cbz	r3, 810f74a <_isatty_r+0x1a>
 810f748:	6023      	str	r3, [r4, #0]
 810f74a:	bd38      	pop	{r3, r4, r5, pc}
 810f74c:	100004b4 	.word	0x100004b4

0810f750 <_lseek_r>:
 810f750:	b538      	push	{r3, r4, r5, lr}
 810f752:	4d07      	ldr	r5, [pc, #28]	; (810f770 <_lseek_r+0x20>)
 810f754:	4604      	mov	r4, r0
 810f756:	4608      	mov	r0, r1
 810f758:	4611      	mov	r1, r2
 810f75a:	2200      	movs	r2, #0
 810f75c:	602a      	str	r2, [r5, #0]
 810f75e:	461a      	mov	r2, r3
 810f760:	f7f3 fb8c 	bl	8102e7c <_lseek>
 810f764:	1c43      	adds	r3, r0, #1
 810f766:	d102      	bne.n	810f76e <_lseek_r+0x1e>
 810f768:	682b      	ldr	r3, [r5, #0]
 810f76a:	b103      	cbz	r3, 810f76e <_lseek_r+0x1e>
 810f76c:	6023      	str	r3, [r4, #0]
 810f76e:	bd38      	pop	{r3, r4, r5, pc}
 810f770:	100004b4 	.word	0x100004b4

0810f774 <memmove>:
 810f774:	4288      	cmp	r0, r1
 810f776:	b510      	push	{r4, lr}
 810f778:	eb01 0402 	add.w	r4, r1, r2
 810f77c:	d902      	bls.n	810f784 <memmove+0x10>
 810f77e:	4284      	cmp	r4, r0
 810f780:	4623      	mov	r3, r4
 810f782:	d807      	bhi.n	810f794 <memmove+0x20>
 810f784:	1e43      	subs	r3, r0, #1
 810f786:	42a1      	cmp	r1, r4
 810f788:	d008      	beq.n	810f79c <memmove+0x28>
 810f78a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810f78e:	f803 2f01 	strb.w	r2, [r3, #1]!
 810f792:	e7f8      	b.n	810f786 <memmove+0x12>
 810f794:	4402      	add	r2, r0
 810f796:	4601      	mov	r1, r0
 810f798:	428a      	cmp	r2, r1
 810f79a:	d100      	bne.n	810f79e <memmove+0x2a>
 810f79c:	bd10      	pop	{r4, pc}
 810f79e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810f7a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810f7a6:	e7f7      	b.n	810f798 <memmove+0x24>

0810f7a8 <_realloc_r>:
 810f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f7ac:	4680      	mov	r8, r0
 810f7ae:	4614      	mov	r4, r2
 810f7b0:	460e      	mov	r6, r1
 810f7b2:	b921      	cbnz	r1, 810f7be <_realloc_r+0x16>
 810f7b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f7b8:	4611      	mov	r1, r2
 810f7ba:	f7fb bc11 	b.w	810afe0 <_malloc_r>
 810f7be:	b92a      	cbnz	r2, 810f7cc <_realloc_r+0x24>
 810f7c0:	f7fb fba2 	bl	810af08 <_free_r>
 810f7c4:	4625      	mov	r5, r4
 810f7c6:	4628      	mov	r0, r5
 810f7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810f7cc:	f000 f835 	bl	810f83a <_malloc_usable_size_r>
 810f7d0:	4284      	cmp	r4, r0
 810f7d2:	4607      	mov	r7, r0
 810f7d4:	d802      	bhi.n	810f7dc <_realloc_r+0x34>
 810f7d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810f7da:	d812      	bhi.n	810f802 <_realloc_r+0x5a>
 810f7dc:	4621      	mov	r1, r4
 810f7de:	4640      	mov	r0, r8
 810f7e0:	f7fb fbfe 	bl	810afe0 <_malloc_r>
 810f7e4:	4605      	mov	r5, r0
 810f7e6:	2800      	cmp	r0, #0
 810f7e8:	d0ed      	beq.n	810f7c6 <_realloc_r+0x1e>
 810f7ea:	42bc      	cmp	r4, r7
 810f7ec:	4622      	mov	r2, r4
 810f7ee:	4631      	mov	r1, r6
 810f7f0:	bf28      	it	cs
 810f7f2:	463a      	movcs	r2, r7
 810f7f4:	f7fb fb72 	bl	810aedc <memcpy>
 810f7f8:	4631      	mov	r1, r6
 810f7fa:	4640      	mov	r0, r8
 810f7fc:	f7fb fb84 	bl	810af08 <_free_r>
 810f800:	e7e1      	b.n	810f7c6 <_realloc_r+0x1e>
 810f802:	4635      	mov	r5, r6
 810f804:	e7df      	b.n	810f7c6 <_realloc_r+0x1e>
	...

0810f808 <_read_r>:
 810f808:	b538      	push	{r3, r4, r5, lr}
 810f80a:	4d07      	ldr	r5, [pc, #28]	; (810f828 <_read_r+0x20>)
 810f80c:	4604      	mov	r4, r0
 810f80e:	4608      	mov	r0, r1
 810f810:	4611      	mov	r1, r2
 810f812:	2200      	movs	r2, #0
 810f814:	602a      	str	r2, [r5, #0]
 810f816:	461a      	mov	r2, r3
 810f818:	f7f3 fad0 	bl	8102dbc <_read>
 810f81c:	1c43      	adds	r3, r0, #1
 810f81e:	d102      	bne.n	810f826 <_read_r+0x1e>
 810f820:	682b      	ldr	r3, [r5, #0]
 810f822:	b103      	cbz	r3, 810f826 <_read_r+0x1e>
 810f824:	6023      	str	r3, [r4, #0]
 810f826:	bd38      	pop	{r3, r4, r5, pc}
 810f828:	100004b4 	.word	0x100004b4

0810f82c <abort>:
 810f82c:	b508      	push	{r3, lr}
 810f82e:	2006      	movs	r0, #6
 810f830:	f000 f834 	bl	810f89c <raise>
 810f834:	2001      	movs	r0, #1
 810f836:	f7f3 fab7 	bl	8102da8 <_exit>

0810f83a <_malloc_usable_size_r>:
 810f83a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810f83e:	1f18      	subs	r0, r3, #4
 810f840:	2b00      	cmp	r3, #0
 810f842:	bfbc      	itt	lt
 810f844:	580b      	ldrlt	r3, [r1, r0]
 810f846:	18c0      	addlt	r0, r0, r3
 810f848:	4770      	bx	lr

0810f84a <_raise_r>:
 810f84a:	291f      	cmp	r1, #31
 810f84c:	b538      	push	{r3, r4, r5, lr}
 810f84e:	4604      	mov	r4, r0
 810f850:	460d      	mov	r5, r1
 810f852:	d904      	bls.n	810f85e <_raise_r+0x14>
 810f854:	2316      	movs	r3, #22
 810f856:	6003      	str	r3, [r0, #0]
 810f858:	f04f 30ff 	mov.w	r0, #4294967295
 810f85c:	bd38      	pop	{r3, r4, r5, pc}
 810f85e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810f860:	b112      	cbz	r2, 810f868 <_raise_r+0x1e>
 810f862:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810f866:	b94b      	cbnz	r3, 810f87c <_raise_r+0x32>
 810f868:	4620      	mov	r0, r4
 810f86a:	f000 f831 	bl	810f8d0 <_getpid_r>
 810f86e:	462a      	mov	r2, r5
 810f870:	4601      	mov	r1, r0
 810f872:	4620      	mov	r0, r4
 810f874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810f878:	f000 b818 	b.w	810f8ac <_kill_r>
 810f87c:	2b01      	cmp	r3, #1
 810f87e:	d00a      	beq.n	810f896 <_raise_r+0x4c>
 810f880:	1c59      	adds	r1, r3, #1
 810f882:	d103      	bne.n	810f88c <_raise_r+0x42>
 810f884:	2316      	movs	r3, #22
 810f886:	6003      	str	r3, [r0, #0]
 810f888:	2001      	movs	r0, #1
 810f88a:	e7e7      	b.n	810f85c <_raise_r+0x12>
 810f88c:	2400      	movs	r4, #0
 810f88e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810f892:	4628      	mov	r0, r5
 810f894:	4798      	blx	r3
 810f896:	2000      	movs	r0, #0
 810f898:	e7e0      	b.n	810f85c <_raise_r+0x12>
	...

0810f89c <raise>:
 810f89c:	4b02      	ldr	r3, [pc, #8]	; (810f8a8 <raise+0xc>)
 810f89e:	4601      	mov	r1, r0
 810f8a0:	6818      	ldr	r0, [r3, #0]
 810f8a2:	f7ff bfd2 	b.w	810f84a <_raise_r>
 810f8a6:	bf00      	nop
 810f8a8:	10000020 	.word	0x10000020

0810f8ac <_kill_r>:
 810f8ac:	b538      	push	{r3, r4, r5, lr}
 810f8ae:	4d07      	ldr	r5, [pc, #28]	; (810f8cc <_kill_r+0x20>)
 810f8b0:	2300      	movs	r3, #0
 810f8b2:	4604      	mov	r4, r0
 810f8b4:	4608      	mov	r0, r1
 810f8b6:	4611      	mov	r1, r2
 810f8b8:	602b      	str	r3, [r5, #0]
 810f8ba:	f7f3 fa65 	bl	8102d88 <_kill>
 810f8be:	1c43      	adds	r3, r0, #1
 810f8c0:	d102      	bne.n	810f8c8 <_kill_r+0x1c>
 810f8c2:	682b      	ldr	r3, [r5, #0]
 810f8c4:	b103      	cbz	r3, 810f8c8 <_kill_r+0x1c>
 810f8c6:	6023      	str	r3, [r4, #0]
 810f8c8:	bd38      	pop	{r3, r4, r5, pc}
 810f8ca:	bf00      	nop
 810f8cc:	100004b4 	.word	0x100004b4

0810f8d0 <_getpid_r>:
 810f8d0:	f7f3 ba52 	b.w	8102d78 <_getpid>

0810f8d4 <_init>:
 810f8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810f8d6:	bf00      	nop
 810f8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810f8da:	bc08      	pop	{r3}
 810f8dc:	469e      	mov	lr, r3
 810f8de:	4770      	bx	lr

0810f8e0 <_fini>:
 810f8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810f8e2:	bf00      	nop
 810f8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810f8e6:	bc08      	pop	{r3}
 810f8e8:	469e      	mov	lr, r3
 810f8ea:	4770      	bx	lr
