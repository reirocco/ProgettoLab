
ProvaPID-IMU_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f634  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000073c  0810f8d8  0810f8d8  0001f8d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08110014  08110014  00020014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0811001c  0811001c  0002001c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08110020  08110020  00020020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  10000000  08110024  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002c4  100001f4  08110218  000301f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  100004b8  08110218  000304b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022cd4  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003b0e  00000000  00000000  00052ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b20  00000000  00000000  00056a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001978  00000000  00000000  00058528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003fb2c  00000000  00000000  00059ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023b22  00000000  00000000  000999cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a093c  00000000  00000000  000bd4ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0025de2a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008a74  00000000  00000000  0025de7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001f4 	.word	0x100001f4
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810f8bc 	.word	0x0810f8bc

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001f8 	.word	0x100001f8
 81002dc:	0810f8bc 	.word	0x0810f8bc

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <init_tune_PID_Pitch>:
#include "PID_Pitch.h"

void init_tune_PID_Pitch(PID_Pitch* p,float Tc,float Kp,float Ki,float Kd){
 8101138:	b480      	push	{r7}
 810113a:	b087      	sub	sp, #28
 810113c:	af00      	add	r7, sp, #0
 810113e:	6178      	str	r0, [r7, #20]
 8101140:	ed87 0a04 	vstr	s0, [r7, #16]
 8101144:	edc7 0a03 	vstr	s1, [r7, #12]
 8101148:	ed87 1a02 	vstr	s2, [r7, #8]
 810114c:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Tc=Tc;
 8101150:	697b      	ldr	r3, [r7, #20]
 8101152:	693a      	ldr	r2, [r7, #16]
 8101154:	60da      	str	r2, [r3, #12]
	p->u_max= 32.3017; // coppia massima
 8101156:	697b      	ldr	r3, [r7, #20]
 8101158:	4a09      	ldr	r2, [pc, #36]	; (8101180 <init_tune_PID_Pitch+0x48>)
 810115a:	611a      	str	r2, [r3, #16]
	p->u_min= -32.3017;  // coppia minima
 810115c:	697b      	ldr	r3, [r7, #20]
 810115e:	4a09      	ldr	r2, [pc, #36]	; (8101184 <init_tune_PID_Pitch+0x4c>)
 8101160:	615a      	str	r2, [r3, #20]

	p->Kp=Kp;
 8101162:	697b      	ldr	r3, [r7, #20]
 8101164:	68fa      	ldr	r2, [r7, #12]
 8101166:	601a      	str	r2, [r3, #0]
	p->Ki=Ki;
 8101168:	697b      	ldr	r3, [r7, #20]
 810116a:	68ba      	ldr	r2, [r7, #8]
 810116c:	605a      	str	r2, [r3, #4]
	p->Kd=Kd;
 810116e:	697b      	ldr	r3, [r7, #20]
 8101170:	687a      	ldr	r2, [r7, #4]
 8101172:	609a      	str	r2, [r3, #8]
}
 8101174:	bf00      	nop
 8101176:	371c      	adds	r7, #28
 8101178:	46bd      	mov	sp, r7
 810117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810117e:	4770      	bx	lr
 8101180:	420134f1 	.word	0x420134f1
 8101184:	c20134f1 	.word	0xc20134f1

08101188 <PID_controller_Pitch>:

float PID_controller_Pitch(PID_Pitch* p,float y,float r){
 8101188:	b480      	push	{r7}
 810118a:	b08b      	sub	sp, #44	; 0x2c
 810118c:	af00      	add	r7, sp, #0
 810118e:	60f8      	str	r0, [r7, #12]
 8101190:	ed87 0a02 	vstr	s0, [r7, #8]
 8101194:	edc7 0a01 	vstr	s1, [r7, #4]
	static float e_old=0,Iterm=0;
	float u;
	float newIterm;
	float e=r-y;
 8101198:	ed97 7a01 	vldr	s14, [r7, #4]
 810119c:	edd7 7a02 	vldr	s15, [r7, #8]
 81011a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 81011a4:	edc7 7a08 	vstr	s15, [r7, #32]
	float Pterm = p->Kp*e;
 81011a8:	68fb      	ldr	r3, [r7, #12]
 81011aa:	edd3 7a00 	vldr	s15, [r3]
 81011ae:	ed97 7a08 	vldr	s14, [r7, #32]
 81011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81011b6:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm=Iterm+(p->Ki)*p->Tc*e_old;
 81011ba:	68fb      	ldr	r3, [r7, #12]
 81011bc:	ed93 7a01 	vldr	s14, [r3, #4]
 81011c0:	68fb      	ldr	r3, [r7, #12]
 81011c2:	edd3 7a03 	vldr	s15, [r3, #12]
 81011c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 81011ca:	4b2b      	ldr	r3, [pc, #172]	; (8101278 <PID_controller_Pitch+0xf0>)
 81011cc:	edd3 7a00 	vldr	s15, [r3]
 81011d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 81011d4:	4b29      	ldr	r3, [pc, #164]	; (810127c <PID_controller_Pitch+0xf4>)
 81011d6:	edd3 7a00 	vldr	s15, [r3]
 81011da:	ee77 7a27 	vadd.f32	s15, s14, s15
 81011de:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm=(p->Kd/p->Tc)*(e-e_old);
 81011e2:	68fb      	ldr	r3, [r7, #12]
 81011e4:	edd3 6a02 	vldr	s13, [r3, #8]
 81011e8:	68fb      	ldr	r3, [r7, #12]
 81011ea:	edd3 7a03 	vldr	s15, [r3, #12]
 81011ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81011f2:	4b21      	ldr	r3, [pc, #132]	; (8101278 <PID_controller_Pitch+0xf0>)
 81011f4:	edd3 7a00 	vldr	s15, [r3]
 81011f8:	edd7 6a08 	vldr	s13, [r7, #32]
 81011fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8101200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101204:	edc7 7a05 	vstr	s15, [r7, #20]
	e_old=e;
 8101208:	4a1b      	ldr	r2, [pc, #108]	; (8101278 <PID_controller_Pitch+0xf0>)
 810120a:	6a3b      	ldr	r3, [r7, #32]
 810120c:	6013      	str	r3, [r2, #0]
	u=Pterm+newIterm+Dterm;
 810120e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101212:	edd7 7a06 	vldr	s15, [r7, #24]
 8101216:	ee77 7a27 	vadd.f32	s15, s14, s15
 810121a:	ed97 7a05 	vldr	s14, [r7, #20]
 810121e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101222:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(u>p->u_max){
 8101226:	68fb      	ldr	r3, [r7, #12]
 8101228:	edd3 7a04 	vldr	s15, [r3, #16]
 810122c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101238:	dd03      	ble.n	8101242 <PID_controller_Pitch+0xba>
		u=p->u_max;
 810123a:	68fb      	ldr	r3, [r7, #12]
 810123c:	691b      	ldr	r3, [r3, #16]
 810123e:	627b      	str	r3, [r7, #36]	; 0x24
 8101240:	e010      	b.n	8101264 <PID_controller_Pitch+0xdc>
	}else if(u<p->u_min){
 8101242:	68fb      	ldr	r3, [r7, #12]
 8101244:	edd3 7a05 	vldr	s15, [r3, #20]
 8101248:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 810124c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101254:	d503      	bpl.n	810125e <PID_controller_Pitch+0xd6>
		u=p->u_min;
 8101256:	68fb      	ldr	r3, [r7, #12]
 8101258:	695b      	ldr	r3, [r3, #20]
 810125a:	627b      	str	r3, [r7, #36]	; 0x24
 810125c:	e002      	b.n	8101264 <PID_controller_Pitch+0xdc>
	}else{
		Iterm= newIterm;
 810125e:	4a07      	ldr	r2, [pc, #28]	; (810127c <PID_controller_Pitch+0xf4>)
 8101260:	69bb      	ldr	r3, [r7, #24]
 8101262:	6013      	str	r3, [r2, #0]
	}
	return u;
 8101264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101266:	ee07 3a90 	vmov	s15, r3

}
 810126a:	eeb0 0a67 	vmov.f32	s0, s15
 810126e:	372c      	adds	r7, #44	; 0x2c
 8101270:	46bd      	mov	sp, r7
 8101272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101276:	4770      	bx	lr
 8101278:	10000210 	.word	0x10000210
 810127c:	10000214 	.word	0x10000214

08101280 <init_tune_PID_Roll>:
#include "PID_Roll.h"
void init_tune_PID_Roll(PID_Roll* p,float Tc,float Kp,float Ki,float Kd){
 8101280:	b480      	push	{r7}
 8101282:	b087      	sub	sp, #28
 8101284:	af00      	add	r7, sp, #0
 8101286:	6178      	str	r0, [r7, #20]
 8101288:	ed87 0a04 	vstr	s0, [r7, #16]
 810128c:	edc7 0a03 	vstr	s1, [r7, #12]
 8101290:	ed87 1a02 	vstr	s2, [r7, #8]
 8101294:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Tc=Tc;
 8101298:	697b      	ldr	r3, [r7, #20]
 810129a:	693a      	ldr	r2, [r7, #16]
 810129c:	60da      	str	r2, [r3, #12]
	p->u_max= 28.3017; // coppia massima
 810129e:	697b      	ldr	r3, [r7, #20]
 81012a0:	4a09      	ldr	r2, [pc, #36]	; (81012c8 <init_tune_PID_Roll+0x48>)
 81012a2:	611a      	str	r2, [r3, #16]
	p->u_min= -28.3017;  // coppia minima
 81012a4:	697b      	ldr	r3, [r7, #20]
 81012a6:	4a09      	ldr	r2, [pc, #36]	; (81012cc <init_tune_PID_Roll+0x4c>)
 81012a8:	615a      	str	r2, [r3, #20]

	p->Kp=Kp;
 81012aa:	697b      	ldr	r3, [r7, #20]
 81012ac:	68fa      	ldr	r2, [r7, #12]
 81012ae:	601a      	str	r2, [r3, #0]
	p->Ki=Ki;
 81012b0:	697b      	ldr	r3, [r7, #20]
 81012b2:	68ba      	ldr	r2, [r7, #8]
 81012b4:	605a      	str	r2, [r3, #4]
	p->Kd=Kd;
 81012b6:	697b      	ldr	r3, [r7, #20]
 81012b8:	687a      	ldr	r2, [r7, #4]
 81012ba:	609a      	str	r2, [r3, #8]
}
 81012bc:	bf00      	nop
 81012be:	371c      	adds	r7, #28
 81012c0:	46bd      	mov	sp, r7
 81012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012c6:	4770      	bx	lr
 81012c8:	41e269e2 	.word	0x41e269e2
 81012cc:	c1e269e2 	.word	0xc1e269e2

081012d0 <PID_controller_Roll>:
// metodo per il calcolo del PID
float PID_controller_Roll(PID_Roll* p,float y,float r){
 81012d0:	b480      	push	{r7}
 81012d2:	b08b      	sub	sp, #44	; 0x2c
 81012d4:	af00      	add	r7, sp, #0
 81012d6:	60f8      	str	r0, [r7, #12]
 81012d8:	ed87 0a02 	vstr	s0, [r7, #8]
 81012dc:	edc7 0a01 	vstr	s1, [r7, #4]

	static float e_old=0,Iterm=0;
	float u;
	float newIterm;
	float e=r-y;
 81012e0:	ed97 7a01 	vldr	s14, [r7, #4]
 81012e4:	edd7 7a02 	vldr	s15, [r7, #8]
 81012e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 81012ec:	edc7 7a08 	vstr	s15, [r7, #32]
	float Pterm = p->Kp*e;
 81012f0:	68fb      	ldr	r3, [r7, #12]
 81012f2:	edd3 7a00 	vldr	s15, [r3]
 81012f6:	ed97 7a08 	vldr	s14, [r7, #32]
 81012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012fe:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm=Iterm+(p->Ki)*p->Tc*e_old;
 8101302:	68fb      	ldr	r3, [r7, #12]
 8101304:	ed93 7a01 	vldr	s14, [r3, #4]
 8101308:	68fb      	ldr	r3, [r7, #12]
 810130a:	edd3 7a03 	vldr	s15, [r3, #12]
 810130e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101312:	4b2b      	ldr	r3, [pc, #172]	; (81013c0 <PID_controller_Roll+0xf0>)
 8101314:	edd3 7a00 	vldr	s15, [r3]
 8101318:	ee27 7a27 	vmul.f32	s14, s14, s15
 810131c:	4b29      	ldr	r3, [pc, #164]	; (81013c4 <PID_controller_Roll+0xf4>)
 810131e:	edd3 7a00 	vldr	s15, [r3]
 8101322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101326:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm=(p->Kd/p->Tc)*(e-e_old);
 810132a:	68fb      	ldr	r3, [r7, #12]
 810132c:	edd3 6a02 	vldr	s13, [r3, #8]
 8101330:	68fb      	ldr	r3, [r7, #12]
 8101332:	edd3 7a03 	vldr	s15, [r3, #12]
 8101336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810133a:	4b21      	ldr	r3, [pc, #132]	; (81013c0 <PID_controller_Roll+0xf0>)
 810133c:	edd3 7a00 	vldr	s15, [r3]
 8101340:	edd7 6a08 	vldr	s13, [r7, #32]
 8101344:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8101348:	ee67 7a27 	vmul.f32	s15, s14, s15
 810134c:	edc7 7a05 	vstr	s15, [r7, #20]
	e_old=e;
 8101350:	4a1b      	ldr	r2, [pc, #108]	; (81013c0 <PID_controller_Roll+0xf0>)
 8101352:	6a3b      	ldr	r3, [r7, #32]
 8101354:	6013      	str	r3, [r2, #0]
	u=Pterm+newIterm+Dterm;
 8101356:	ed97 7a07 	vldr	s14, [r7, #28]
 810135a:	edd7 7a06 	vldr	s15, [r7, #24]
 810135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101362:	ed97 7a05 	vldr	s14, [r7, #20]
 8101366:	ee77 7a27 	vadd.f32	s15, s14, s15
 810136a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if(u>p->u_max){
 810136e:	68fb      	ldr	r3, [r7, #12]
 8101370:	edd3 7a04 	vldr	s15, [r3, #16]
 8101374:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 810137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101380:	dd03      	ble.n	810138a <PID_controller_Roll+0xba>
		u=p->u_max;
 8101382:	68fb      	ldr	r3, [r7, #12]
 8101384:	691b      	ldr	r3, [r3, #16]
 8101386:	627b      	str	r3, [r7, #36]	; 0x24
 8101388:	e010      	b.n	81013ac <PID_controller_Roll+0xdc>

	}else if(u<p->u_min){
 810138a:	68fb      	ldr	r3, [r7, #12]
 810138c:	edd3 7a05 	vldr	s15, [r3, #20]
 8101390:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101394:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810139c:	d503      	bpl.n	81013a6 <PID_controller_Roll+0xd6>
		u=p->u_min;
 810139e:	68fb      	ldr	r3, [r7, #12]
 81013a0:	695b      	ldr	r3, [r3, #20]
 81013a2:	627b      	str	r3, [r7, #36]	; 0x24
 81013a4:	e002      	b.n	81013ac <PID_controller_Roll+0xdc>
	}else{
		Iterm= newIterm;
 81013a6:	4a07      	ldr	r2, [pc, #28]	; (81013c4 <PID_controller_Roll+0xf4>)
 81013a8:	69bb      	ldr	r3, [r7, #24]
 81013aa:	6013      	str	r3, [r2, #0]
	}
	return u;
 81013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81013ae:	ee07 3a90 	vmov	s15, r3

}
 81013b2:	eeb0 0a67 	vmov.f32	s0, s15
 81013b6:	372c      	adds	r7, #44	; 0x2c
 81013b8:	46bd      	mov	sp, r7
 81013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013be:	4770      	bx	lr
 81013c0:	10000218 	.word	0x10000218
 81013c4:	1000021c 	.word	0x1000021c

081013c8 <init_tune_PID_Yaw>:
#include "PID_Yaw.h"

void init_tune_PID_Yaw(PID_Yaw* p,float Tc,float Kp,float Ki,float Kd){
 81013c8:	b480      	push	{r7}
 81013ca:	b087      	sub	sp, #28
 81013cc:	af00      	add	r7, sp, #0
 81013ce:	6178      	str	r0, [r7, #20]
 81013d0:	ed87 0a04 	vstr	s0, [r7, #16]
 81013d4:	edc7 0a03 	vstr	s1, [r7, #12]
 81013d8:	ed87 1a02 	vstr	s2, [r7, #8]
 81013dc:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Tc=Tc;
 81013e0:	697b      	ldr	r3, [r7, #20]
 81013e2:	693a      	ldr	r2, [r7, #16]
 81013e4:	60da      	str	r2, [r3, #12]
	p->u_max= 17.8418; // coppia massima
 81013e6:	697b      	ldr	r3, [r7, #20]
 81013e8:	4a09      	ldr	r2, [pc, #36]	; (8101410 <init_tune_PID_Yaw+0x48>)
 81013ea:	611a      	str	r2, [r3, #16]
	p->u_min= -17.8418;  // coppia minima
 81013ec:	697b      	ldr	r3, [r7, #20]
 81013ee:	4a09      	ldr	r2, [pc, #36]	; (8101414 <init_tune_PID_Yaw+0x4c>)
 81013f0:	615a      	str	r2, [r3, #20]

	p->Kp=Kp;
 81013f2:	697b      	ldr	r3, [r7, #20]
 81013f4:	68fa      	ldr	r2, [r7, #12]
 81013f6:	601a      	str	r2, [r3, #0]
	p->Ki=Ki;
 81013f8:	697b      	ldr	r3, [r7, #20]
 81013fa:	68ba      	ldr	r2, [r7, #8]
 81013fc:	605a      	str	r2, [r3, #4]
	p->Kd=Kd;
 81013fe:	697b      	ldr	r3, [r7, #20]
 8101400:	687a      	ldr	r2, [r7, #4]
 8101402:	609a      	str	r2, [r3, #8]
}
 8101404:	bf00      	nop
 8101406:	371c      	adds	r7, #28
 8101408:	46bd      	mov	sp, r7
 810140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810140e:	4770      	bx	lr
 8101410:	418ebc02 	.word	0x418ebc02
 8101414:	c18ebc02 	.word	0xc18ebc02

08101418 <CtoD_M1>:
#include "PWM_Motor1.h"
float CtoD_M1(float u){
 8101418:	b580      	push	{r7, lr}
 810141a:	b084      	sub	sp, #16
 810141c:	af00      	add	r7, sp, #0
 810141e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0)
 8101422:	edd7 7a01 	vldr	s15, [r7, #4]
 8101426:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810142e:	d805      	bhi.n	810143c <CtoD_M1+0x24>
		u = -u;
 8101430:	edd7 7a01 	vldr	s15, [r7, #4]
 8101434:	eef1 7a67 	vneg.f32	s15, s15
 8101438:	edc7 7a01 	vstr	s15, [r7, #4]
	float duty = 100*u/7.68;
 810143c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101440:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 81014b0 <CtoD_M1+0x98>
 8101444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101448:	ee17 0a90 	vmov	r0, s15
 810144c:	f7ff f904 	bl	8100658 <__aeabi_f2d>
 8101450:	a315      	add	r3, pc, #84	; (adr r3, 81014a8 <CtoD_M1+0x90>)
 8101452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101456:	f7ff fa81 	bl	810095c <__aeabi_ddiv>
 810145a:	4602      	mov	r2, r0
 810145c:	460b      	mov	r3, r1
 810145e:	4610      	mov	r0, r2
 8101460:	4619      	mov	r1, r3
 8101462:	f7ff fc49 	bl	8100cf8 <__aeabi_d2f>
 8101466:	4603      	mov	r3, r0
 8101468:	60fb      	str	r3, [r7, #12]
	if(duty > 100){
 810146a:	edd7 7a03 	vldr	s15, [r7, #12]
 810146e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 81014b0 <CtoD_M1+0x98>
 8101472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810147a:	dd02      	ble.n	8101482 <CtoD_M1+0x6a>
			duty = 100;
 810147c:	4b0d      	ldr	r3, [pc, #52]	; (81014b4 <CtoD_M1+0x9c>)
 810147e:	60fb      	str	r3, [r7, #12]
 8101480:	e009      	b.n	8101496 <CtoD_M1+0x7e>
	}else if(duty < 0){
 8101482:	edd7 7a03 	vldr	s15, [r7, #12]
 8101486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810148e:	d502      	bpl.n	8101496 <CtoD_M1+0x7e>
		duty = 0;
 8101490:	f04f 0300 	mov.w	r3, #0
 8101494:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 8101496:	68fb      	ldr	r3, [r7, #12]
 8101498:	ee07 3a90 	vmov	s15, r3

}
 810149c:	eeb0 0a67 	vmov.f32	s0, s15
 81014a0:	3710      	adds	r7, #16
 81014a2:	46bd      	mov	sp, r7
 81014a4:	bd80      	pop	{r7, pc}
 81014a6:	bf00      	nop
 81014a8:	eb851eb8 	.word	0xeb851eb8
 81014ac:	401eb851 	.word	0x401eb851
 81014b0:	42c80000 	.word	0x42c80000
 81014b4:	42c80000 	.word	0x42c80000

081014b8 <ReftoDir_M1>:
	}
	return duty;
}


uint8_t ReftoDir_M1(float u){
 81014b8:	b480      	push	{r7}
 81014ba:	b085      	sub	sp, #20
 81014bc:	af00      	add	r7, sp, #0
 81014be:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t dir;
	if(u >= 0){
 81014c2:	edd7 7a01 	vldr	s15, [r7, #4]
 81014c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81014ce:	db02      	blt.n	81014d6 <ReftoDir_M1+0x1e>
		dir=0;//senso orario
 81014d0:	2300      	movs	r3, #0
 81014d2:	73fb      	strb	r3, [r7, #15]
 81014d4:	e001      	b.n	81014da <ReftoDir_M1+0x22>
	}else{
		dir=1;//senso antiorario
 81014d6:	2301      	movs	r3, #1
 81014d8:	73fb      	strb	r3, [r7, #15]
	}
	return dir;
 81014da:	7bfb      	ldrb	r3, [r7, #15]

}
 81014dc:	4618      	mov	r0, r3
 81014de:	3714      	adds	r7, #20
 81014e0:	46bd      	mov	sp, r7
 81014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014e6:	4770      	bx	lr

081014e8 <set_PWM_dir_M1>:

void set_PWM_dir_M1(uint32_t duty,uint8_t dir){
 81014e8:	b580      	push	{r7, lr}
 81014ea:	b082      	sub	sp, #8
 81014ec:	af00      	add	r7, sp, #0
 81014ee:	6078      	str	r0, [r7, #4]
 81014f0:	460b      	mov	r3, r1
 81014f2:	70fb      	strb	r3, [r7, #3]
	TIM1->CCR1 = ((float)duty/100)*TIM1->ARR;
 81014f4:	687b      	ldr	r3, [r7, #4]
 81014f6:	ee07 3a90 	vmov	s15, r3
 81014fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014fe:	eddf 6a12 	vldr	s13, [pc, #72]	; 8101548 <set_PWM_dir_M1+0x60>
 8101502:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101506:	4b11      	ldr	r3, [pc, #68]	; (810154c <set_PWM_dir_M1+0x64>)
 8101508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810150a:	ee07 3a90 	vmov	s15, r3
 810150e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101516:	4b0d      	ldr	r3, [pc, #52]	; (810154c <set_PWM_dir_M1+0x64>)
 8101518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810151c:	ee17 2a90 	vmov	r2, s15
 8101520:	635a      	str	r2, [r3, #52]	; 0x34


	if(dir==1){
 8101522:	78fb      	ldrb	r3, [r7, #3]
 8101524:	2b01      	cmp	r3, #1
 8101526:	d105      	bne.n	8101534 <set_PWM_dir_M1+0x4c>
		HAL_GPIO_WritePin(GPIOA, DIR1_Pin,GPIO_PIN_SET);//cambia senso di rotazione
 8101528:	2201      	movs	r2, #1
 810152a:	2110      	movs	r1, #16
 810152c:	4808      	ldr	r0, [pc, #32]	; (8101550 <set_PWM_dir_M1+0x68>)
 810152e:	f003 f951 	bl	81047d4 <HAL_GPIO_WritePin>
		// coppia negativa antiorario
	}else{
		HAL_GPIO_WritePin(GPIOA, DIR1_Pin,GPIO_PIN_RESET);
		//coppia positiva orario
	}
}
 8101532:	e004      	b.n	810153e <set_PWM_dir_M1+0x56>
		HAL_GPIO_WritePin(GPIOA, DIR1_Pin,GPIO_PIN_RESET);
 8101534:	2200      	movs	r2, #0
 8101536:	2110      	movs	r1, #16
 8101538:	4805      	ldr	r0, [pc, #20]	; (8101550 <set_PWM_dir_M1+0x68>)
 810153a:	f003 f94b 	bl	81047d4 <HAL_GPIO_WritePin>
}
 810153e:	bf00      	nop
 8101540:	3708      	adds	r7, #8
 8101542:	46bd      	mov	sp, r7
 8101544:	bd80      	pop	{r7, pc}
 8101546:	bf00      	nop
 8101548:	42c80000 	.word	0x42c80000
 810154c:	40010000 	.word	0x40010000
 8101550:	58020000 	.word	0x58020000
 8101554:	00000000 	.word	0x00000000

08101558 <CtoD_M2>:
#include "PWM_Motor2.h"
float CtoD_M2(float u){
 8101558:	b580      	push	{r7, lr}
 810155a:	b084      	sub	sp, #16
 810155c:	af00      	add	r7, sp, #0
 810155e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0)
 8101562:	edd7 7a01 	vldr	s15, [r7, #4]
 8101566:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810156e:	d805      	bhi.n	810157c <CtoD_M2+0x24>
		u = -u;
 8101570:	edd7 7a01 	vldr	s15, [r7, #4]
 8101574:	eef1 7a67 	vneg.f32	s15, s15
 8101578:	edc7 7a01 	vstr	s15, [r7, #4]
	float duty = 100*u/7.68;
 810157c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101580:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 81015f0 <CtoD_M2+0x98>
 8101584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101588:	ee17 0a90 	vmov	r0, s15
 810158c:	f7ff f864 	bl	8100658 <__aeabi_f2d>
 8101590:	a315      	add	r3, pc, #84	; (adr r3, 81015e8 <CtoD_M2+0x90>)
 8101592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101596:	f7ff f9e1 	bl	810095c <__aeabi_ddiv>
 810159a:	4602      	mov	r2, r0
 810159c:	460b      	mov	r3, r1
 810159e:	4610      	mov	r0, r2
 81015a0:	4619      	mov	r1, r3
 81015a2:	f7ff fba9 	bl	8100cf8 <__aeabi_d2f>
 81015a6:	4603      	mov	r3, r0
 81015a8:	60fb      	str	r3, [r7, #12]
	if(duty > 100){
 81015aa:	edd7 7a03 	vldr	s15, [r7, #12]
 81015ae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 81015f0 <CtoD_M2+0x98>
 81015b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 81015b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81015ba:	dd02      	ble.n	81015c2 <CtoD_M2+0x6a>
			duty = 100;
 81015bc:	4b0d      	ldr	r3, [pc, #52]	; (81015f4 <CtoD_M2+0x9c>)
 81015be:	60fb      	str	r3, [r7, #12]
 81015c0:	e009      	b.n	81015d6 <CtoD_M2+0x7e>
	}else if(duty < 0){
 81015c2:	edd7 7a03 	vldr	s15, [r7, #12]
 81015c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81015ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81015ce:	d502      	bpl.n	81015d6 <CtoD_M2+0x7e>
		duty = 0;
 81015d0:	f04f 0300 	mov.w	r3, #0
 81015d4:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 81015d6:	68fb      	ldr	r3, [r7, #12]
 81015d8:	ee07 3a90 	vmov	s15, r3

}
 81015dc:	eeb0 0a67 	vmov.f32	s0, s15
 81015e0:	3710      	adds	r7, #16
 81015e2:	46bd      	mov	sp, r7
 81015e4:	bd80      	pop	{r7, pc}
 81015e6:	bf00      	nop
 81015e8:	eb851eb8 	.word	0xeb851eb8
 81015ec:	401eb851 	.word	0x401eb851
 81015f0:	42c80000 	.word	0x42c80000
 81015f4:	42c80000 	.word	0x42c80000

081015f8 <ReftoDir_M2>:
	}
	return duty;
}


uint8_t ReftoDir_M2(float u){
 81015f8:	b480      	push	{r7}
 81015fa:	b085      	sub	sp, #20
 81015fc:	af00      	add	r7, sp, #0
 81015fe:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t dir;
	if(u>=0){
 8101602:	edd7 7a01 	vldr	s15, [r7, #4]
 8101606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810160e:	db02      	blt.n	8101616 <ReftoDir_M2+0x1e>
		dir=0;//senso orario
 8101610:	2300      	movs	r3, #0
 8101612:	73fb      	strb	r3, [r7, #15]
 8101614:	e001      	b.n	810161a <ReftoDir_M2+0x22>
	}else{
		dir=1;//senso antiorario
 8101616:	2301      	movs	r3, #1
 8101618:	73fb      	strb	r3, [r7, #15]
	}
	return dir;
 810161a:	7bfb      	ldrb	r3, [r7, #15]

}
 810161c:	4618      	mov	r0, r3
 810161e:	3714      	adds	r7, #20
 8101620:	46bd      	mov	sp, r7
 8101622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101626:	4770      	bx	lr

08101628 <set_PWM_dir_M2>:

void set_PWM_dir_M2(uint32_t duty,uint8_t dir){
 8101628:	b580      	push	{r7, lr}
 810162a:	b082      	sub	sp, #8
 810162c:	af00      	add	r7, sp, #0
 810162e:	6078      	str	r0, [r7, #4]
 8101630:	460b      	mov	r3, r1
 8101632:	70fb      	strb	r3, [r7, #3]
	TIM1->CCR2 = ((float)duty/100)*TIM1->ARR;
 8101634:	687b      	ldr	r3, [r7, #4]
 8101636:	ee07 3a90 	vmov	s15, r3
 810163a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810163e:	eddf 6a13 	vldr	s13, [pc, #76]	; 810168c <set_PWM_dir_M2+0x64>
 8101642:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101646:	4b12      	ldr	r3, [pc, #72]	; (8101690 <set_PWM_dir_M2+0x68>)
 8101648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810164a:	ee07 3a90 	vmov	s15, r3
 810164e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101656:	4b0e      	ldr	r3, [pc, #56]	; (8101690 <set_PWM_dir_M2+0x68>)
 8101658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810165c:	ee17 2a90 	vmov	r2, s15
 8101660:	639a      	str	r2, [r3, #56]	; 0x38


	if(dir==1){
 8101662:	78fb      	ldrb	r3, [r7, #3]
 8101664:	2b01      	cmp	r3, #1
 8101666:	d106      	bne.n	8101676 <set_PWM_dir_M2+0x4e>
		HAL_GPIO_WritePin(GPIOE, DIR2_Pin,GPIO_PIN_SET);//cambia senso di rotazione
 8101668:	2201      	movs	r2, #1
 810166a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 810166e:	4809      	ldr	r0, [pc, #36]	; (8101694 <set_PWM_dir_M2+0x6c>)
 8101670:	f003 f8b0 	bl	81047d4 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, DIR2_Pin,GPIO_PIN_RESET);
	}


}
 8101674:	e005      	b.n	8101682 <set_PWM_dir_M2+0x5a>
		HAL_GPIO_WritePin(GPIOE, DIR2_Pin,GPIO_PIN_RESET);
 8101676:	2200      	movs	r2, #0
 8101678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 810167c:	4805      	ldr	r0, [pc, #20]	; (8101694 <set_PWM_dir_M2+0x6c>)
 810167e:	f003 f8a9 	bl	81047d4 <HAL_GPIO_WritePin>
}
 8101682:	bf00      	nop
 8101684:	3708      	adds	r7, #8
 8101686:	46bd      	mov	sp, r7
 8101688:	bd80      	pop	{r7, pc}
 810168a:	bf00      	nop
 810168c:	42c80000 	.word	0x42c80000
 8101690:	40010000 	.word	0x40010000
 8101694:	58021000 	.word	0x58021000

08101698 <CtoD_M3>:
#include "PWM_Motor3.h"
float CtoD_M3(float u){
 8101698:	b580      	push	{r7, lr}
 810169a:	b084      	sub	sp, #16
 810169c:	af00      	add	r7, sp, #0
 810169e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0)
 81016a2:	edd7 7a01 	vldr	s15, [r7, #4]
 81016a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81016ae:	d805      	bhi.n	81016bc <CtoD_M3+0x24>
		u = -u;
 81016b0:	edd7 7a01 	vldr	s15, [r7, #4]
 81016b4:	eef1 7a67 	vneg.f32	s15, s15
 81016b8:	edc7 7a01 	vstr	s15, [r7, #4]
	float duty = 100*u/7.68;
 81016bc:	edd7 7a01 	vldr	s15, [r7, #4]
 81016c0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8101730 <CtoD_M3+0x98>
 81016c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 81016c8:	ee17 0a90 	vmov	r0, s15
 81016cc:	f7fe ffc4 	bl	8100658 <__aeabi_f2d>
 81016d0:	a315      	add	r3, pc, #84	; (adr r3, 8101728 <CtoD_M3+0x90>)
 81016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016d6:	f7ff f941 	bl	810095c <__aeabi_ddiv>
 81016da:	4602      	mov	r2, r0
 81016dc:	460b      	mov	r3, r1
 81016de:	4610      	mov	r0, r2
 81016e0:	4619      	mov	r1, r3
 81016e2:	f7ff fb09 	bl	8100cf8 <__aeabi_d2f>
 81016e6:	4603      	mov	r3, r0
 81016e8:	60fb      	str	r3, [r7, #12]
	if(duty > 100){
 81016ea:	edd7 7a03 	vldr	s15, [r7, #12]
 81016ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8101730 <CtoD_M3+0x98>
 81016f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 81016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81016fa:	dd02      	ble.n	8101702 <CtoD_M3+0x6a>
			duty = 100;
 81016fc:	4b0d      	ldr	r3, [pc, #52]	; (8101734 <CtoD_M3+0x9c>)
 81016fe:	60fb      	str	r3, [r7, #12]
 8101700:	e009      	b.n	8101716 <CtoD_M3+0x7e>
	}else if(duty < 0){
 8101702:	edd7 7a03 	vldr	s15, [r7, #12]
 8101706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810170e:	d502      	bpl.n	8101716 <CtoD_M3+0x7e>
		duty = 0;
 8101710:	f04f 0300 	mov.w	r3, #0
 8101714:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 8101716:	68fb      	ldr	r3, [r7, #12]
 8101718:	ee07 3a90 	vmov	s15, r3

}
 810171c:	eeb0 0a67 	vmov.f32	s0, s15
 8101720:	3710      	adds	r7, #16
 8101722:	46bd      	mov	sp, r7
 8101724:	bd80      	pop	{r7, pc}
 8101726:	bf00      	nop
 8101728:	eb851eb8 	.word	0xeb851eb8
 810172c:	401eb851 	.word	0x401eb851
 8101730:	42c80000 	.word	0x42c80000
 8101734:	42c80000 	.word	0x42c80000

08101738 <ReftoDir_M3>:
	}
	return duty;
}


uint8_t ReftoDir_M3(float u){
 8101738:	b480      	push	{r7}
 810173a:	b085      	sub	sp, #20
 810173c:	af00      	add	r7, sp, #0
 810173e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t dir;
	if(u>=0){
 8101742:	edd7 7a01 	vldr	s15, [r7, #4]
 8101746:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810174e:	db02      	blt.n	8101756 <ReftoDir_M3+0x1e>
		dir=0;//senso orario
 8101750:	2300      	movs	r3, #0
 8101752:	73fb      	strb	r3, [r7, #15]
 8101754:	e001      	b.n	810175a <ReftoDir_M3+0x22>
	}else{
		dir=1;//senso antiorario
 8101756:	2301      	movs	r3, #1
 8101758:	73fb      	strb	r3, [r7, #15]
	}
	return dir;
 810175a:	7bfb      	ldrb	r3, [r7, #15]

}
 810175c:	4618      	mov	r0, r3
 810175e:	3714      	adds	r7, #20
 8101760:	46bd      	mov	sp, r7
 8101762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101766:	4770      	bx	lr

08101768 <set_PWM_dir_M3>:

void set_PWM_dir_M3(uint32_t duty,uint8_t dir){
 8101768:	b580      	push	{r7, lr}
 810176a:	b082      	sub	sp, #8
 810176c:	af00      	add	r7, sp, #0
 810176e:	6078      	str	r0, [r7, #4]
 8101770:	460b      	mov	r3, r1
 8101772:	70fb      	strb	r3, [r7, #3]
	TIM1->CCR3 = ((float)duty/100)*TIM1->ARR;
 8101774:	687b      	ldr	r3, [r7, #4]
 8101776:	ee07 3a90 	vmov	s15, r3
 810177a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810177e:	eddf 6a13 	vldr	s13, [pc, #76]	; 81017cc <set_PWM_dir_M3+0x64>
 8101782:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101786:	4b12      	ldr	r3, [pc, #72]	; (81017d0 <set_PWM_dir_M3+0x68>)
 8101788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810178a:	ee07 3a90 	vmov	s15, r3
 810178e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101796:	4b0e      	ldr	r3, [pc, #56]	; (81017d0 <set_PWM_dir_M3+0x68>)
 8101798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810179c:	ee17 2a90 	vmov	r2, s15
 81017a0:	63da      	str	r2, [r3, #60]	; 0x3c
	//printf("%d \r\n", dir);

	if(dir==1){
 81017a2:	78fb      	ldrb	r3, [r7, #3]
 81017a4:	2b01      	cmp	r3, #1
 81017a6:	d106      	bne.n	81017b6 <set_PWM_dir_M3+0x4e>
		HAL_GPIO_WritePin(GPIOE, DIR3_Pin,GPIO_PIN_SET);//cambia senso di rotazione
 81017a8:	2201      	movs	r2, #1
 81017aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 81017ae:	4809      	ldr	r0, [pc, #36]	; (81017d4 <set_PWM_dir_M3+0x6c>)
 81017b0:	f003 f810 	bl	81047d4 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, DIR3_Pin,GPIO_PIN_RESET);
	}
}
 81017b4:	e005      	b.n	81017c2 <set_PWM_dir_M3+0x5a>
		HAL_GPIO_WritePin(GPIOE, DIR3_Pin,GPIO_PIN_RESET);
 81017b6:	2200      	movs	r2, #0
 81017b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 81017bc:	4805      	ldr	r0, [pc, #20]	; (81017d4 <set_PWM_dir_M3+0x6c>)
 81017be:	f003 f809 	bl	81047d4 <HAL_GPIO_WritePin>
}
 81017c2:	bf00      	nop
 81017c4:	3708      	adds	r7, #8
 81017c6:	46bd      	mov	sp, r7
 81017c8:	bd80      	pop	{r7, pc}
 81017ca:	bf00      	nop
 81017cc:	42c80000 	.word	0x42c80000
 81017d0:	40010000 	.word	0x40010000
 81017d4:	58021000 	.word	0x58021000

081017d8 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 81017d8:	b580      	push	{r7, lr}
 81017da:	b082      	sub	sp, #8
 81017dc:	af00      	add	r7, sp, #0
 81017de:	4603      	mov	r3, r0
 81017e0:	71fb      	strb	r3, [r7, #7]
 81017e2:	79fb      	ldrb	r3, [r7, #7]
 81017e4:	4619      	mov	r1, r3
 81017e6:	2007      	movs	r0, #7
 81017e8:	f000 fa02 	bl	8101bf0 <bno055_writeData>
 81017ec:	bf00      	nop
 81017ee:	3708      	adds	r7, #8
 81017f0:	46bd      	mov	sp, r7
 81017f2:	bd80      	pop	{r7, pc}

081017f4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 81017f4:	b580      	push	{r7, lr}
 81017f6:	b082      	sub	sp, #8
 81017f8:	af00      	add	r7, sp, #0
 81017fa:	4603      	mov	r3, r0
 81017fc:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 81017fe:	79fb      	ldrb	r3, [r7, #7]
 8101800:	4619      	mov	r1, r3
 8101802:	203d      	movs	r0, #61	; 0x3d
 8101804:	f000 f9f4 	bl	8101bf0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8101808:	79fb      	ldrb	r3, [r7, #7]
 810180a:	2b00      	cmp	r3, #0
 810180c:	d103      	bne.n	8101816 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 810180e:	2013      	movs	r0, #19
 8101810:	f000 f9e2 	bl	8101bd8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8101814:	e002      	b.n	810181c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8101816:	2007      	movs	r0, #7
 8101818:	f000 f9de 	bl	8101bd8 <bno055_delay>
}
 810181c:	bf00      	nop
 810181e:	3708      	adds	r7, #8
 8101820:	46bd      	mov	sp, r7
 8101822:	bd80      	pop	{r7, pc}

08101824 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8101824:	b580      	push	{r7, lr}
 8101826:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8101828:	2000      	movs	r0, #0
 810182a:	f7ff ffe3 	bl	81017f4 <bno055_setOperationMode>
}
 810182e:	bf00      	nop
 8101830:	bd80      	pop	{r7, pc}

08101832 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8101832:	b580      	push	{r7, lr}
 8101834:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8101836:	200c      	movs	r0, #12
 8101838:	f7ff ffdc 	bl	81017f4 <bno055_setOperationMode>
}
 810183c:	bf00      	nop
 810183e:	bd80      	pop	{r7, pc}

08101840 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8101840:	b580      	push	{r7, lr}
 8101842:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8101844:	2120      	movs	r1, #32
 8101846:	203f      	movs	r0, #63	; 0x3f
 8101848:	f000 f9d2 	bl	8101bf0 <bno055_writeData>
  bno055_delay(700);
 810184c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8101850:	f000 f9c2 	bl	8101bd8 <bno055_delay>
}
 8101854:	bf00      	nop
 8101856:	bd80      	pop	{r7, pc}

08101858 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8101858:	b580      	push	{r7, lr}
 810185a:	b082      	sub	sp, #8
 810185c:	af00      	add	r7, sp, #0
  bno055_reset();
 810185e:	f7ff ffef 	bl	8101840 <bno055_reset>

  uint8_t id = 0;
 8101862:	2300      	movs	r3, #0
 8101864:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8101866:	1dfb      	adds	r3, r7, #7
 8101868:	2201      	movs	r2, #1
 810186a:	4619      	mov	r1, r3
 810186c:	2000      	movs	r0, #0
 810186e:	f000 faab 	bl	8101dc8 <bno055_readData>
  if (id != BNO055_ID) {
 8101872:	79fb      	ldrb	r3, [r7, #7]
 8101874:	2ba0      	cmp	r3, #160	; 0xa0
 8101876:	d004      	beq.n	8101882 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8101878:	79fb      	ldrb	r3, [r7, #7]
 810187a:	4619      	mov	r1, r3
 810187c:	4809      	ldr	r0, [pc, #36]	; (81018a4 <bno055_setup+0x4c>)
 810187e:	f00a fa91 	bl	810bda4 <iprintf>
  }
  bno055_setPage(0);
 8101882:	2000      	movs	r0, #0
 8101884:	f7ff ffa8 	bl	81017d8 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8101888:	2100      	movs	r1, #0
 810188a:	203f      	movs	r0, #63	; 0x3f
 810188c:	f000 f9b0 	bl	8101bf0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8101890:	f7ff ffc8 	bl	8101824 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8101894:	200a      	movs	r0, #10
 8101896:	f000 f99f 	bl	8101bd8 <bno055_delay>
}
 810189a:	bf00      	nop
 810189c:	3708      	adds	r7, #8
 810189e:	46bd      	mov	sp, r7
 81018a0:	bd80      	pop	{r7, pc}
 81018a2:	bf00      	nop
 81018a4:	0810f8d8 	.word	0x0810f8d8

081018a8 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 81018a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81018ac:	b09e      	sub	sp, #120	; 0x78
 81018ae:	af00      	add	r7, sp, #0
 81018b0:	4603      	mov	r3, r0
 81018b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 81018b6:	2000      	movs	r0, #0
 81018b8:	f7ff ff8e 	bl	81017d8 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 81018bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81018c0:	2b20      	cmp	r3, #32
 81018c2:	d108      	bne.n	81018d6 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 81018c4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 81018c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81018cc:	2208      	movs	r2, #8
 81018ce:	4618      	mov	r0, r3
 81018d0:	f000 fa7a 	bl	8101dc8 <bno055_readData>
 81018d4:	e007      	b.n	81018e6 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 81018d6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 81018da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81018de:	2206      	movs	r2, #6
 81018e0:	4618      	mov	r0, r3
 81018e2:	f000 fa71 	bl	8101dc8 <bno055_readData>

  double scale = 1;
 81018e6:	f04f 0200 	mov.w	r2, #0
 81018ea:	4b8b      	ldr	r3, [pc, #556]	; (8101b18 <bno055_getVector+0x270>)
 81018ec:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 81018f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81018f4:	2b0e      	cmp	r3, #14
 81018f6:	d109      	bne.n	810190c <bno055_getVector+0x64>
    scale = magScale;
 81018f8:	4b88      	ldr	r3, [pc, #544]	; (8101b1c <bno055_getVector+0x274>)
 81018fa:	881b      	ldrh	r3, [r3, #0]
 81018fc:	4618      	mov	r0, r3
 81018fe:	f7fe fe89 	bl	8100614 <__aeabi_ui2d>
 8101902:	4602      	mov	r2, r0
 8101904:	460b      	mov	r3, r1
 8101906:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810190a:	e03e      	b.n	810198a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 810190c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101910:	2b08      	cmp	r3, #8
 8101912:	d007      	beq.n	8101924 <bno055_getVector+0x7c>
 8101914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101918:	2b28      	cmp	r3, #40	; 0x28
 810191a:	d003      	beq.n	8101924 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 810191c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101920:	2b2e      	cmp	r3, #46	; 0x2e
 8101922:	d109      	bne.n	8101938 <bno055_getVector+0x90>
    scale = accelScale;
 8101924:	4b7e      	ldr	r3, [pc, #504]	; (8101b20 <bno055_getVector+0x278>)
 8101926:	881b      	ldrh	r3, [r3, #0]
 8101928:	4618      	mov	r0, r3
 810192a:	f7fe fe73 	bl	8100614 <__aeabi_ui2d>
 810192e:	4602      	mov	r2, r0
 8101930:	460b      	mov	r3, r1
 8101932:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101936:	e028      	b.n	810198a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8101938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810193c:	2b14      	cmp	r3, #20
 810193e:	d109      	bne.n	8101954 <bno055_getVector+0xac>
    scale = angularRateScale;
 8101940:	4b78      	ldr	r3, [pc, #480]	; (8101b24 <bno055_getVector+0x27c>)
 8101942:	881b      	ldrh	r3, [r3, #0]
 8101944:	4618      	mov	r0, r3
 8101946:	f7fe fe65 	bl	8100614 <__aeabi_ui2d>
 810194a:	4602      	mov	r2, r0
 810194c:	460b      	mov	r3, r1
 810194e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101952:	e01a      	b.n	810198a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8101954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101958:	2b1a      	cmp	r3, #26
 810195a:	d109      	bne.n	8101970 <bno055_getVector+0xc8>
    scale = eulerScale;
 810195c:	4b72      	ldr	r3, [pc, #456]	; (8101b28 <bno055_getVector+0x280>)
 810195e:	881b      	ldrh	r3, [r3, #0]
 8101960:	4618      	mov	r0, r3
 8101962:	f7fe fe57 	bl	8100614 <__aeabi_ui2d>
 8101966:	4602      	mov	r2, r0
 8101968:	460b      	mov	r3, r1
 810196a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810196e:	e00c      	b.n	810198a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8101970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101974:	2b20      	cmp	r3, #32
 8101976:	d108      	bne.n	810198a <bno055_getVector+0xe2>
    scale = quaScale;
 8101978:	4b6c      	ldr	r3, [pc, #432]	; (8101b2c <bno055_getVector+0x284>)
 810197a:	881b      	ldrh	r3, [r3, #0]
 810197c:	4618      	mov	r0, r3
 810197e:	f7fe fe49 	bl	8100614 <__aeabi_ui2d>
 8101982:	4602      	mov	r2, r0
 8101984:	460b      	mov	r3, r1
 8101986:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810198a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810198e:	2220      	movs	r2, #32
 8101990:	2100      	movs	r1, #0
 8101992:	4618      	mov	r0, r3
 8101994:	f009 faa4 	bl	810aee0 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8101998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810199c:	2b20      	cmp	r3, #32
 810199e:	d150      	bne.n	8101a42 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 81019a0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 81019a4:	021b      	lsls	r3, r3, #8
 81019a6:	b21a      	sxth	r2, r3
 81019a8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 81019ac:	b21b      	sxth	r3, r3
 81019ae:	4313      	orrs	r3, r2
 81019b0:	b21b      	sxth	r3, r3
 81019b2:	4618      	mov	r0, r3
 81019b4:	f7fe fe3e 	bl	8100634 <__aeabi_i2d>
 81019b8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81019bc:	f7fe ffce 	bl	810095c <__aeabi_ddiv>
 81019c0:	4602      	mov	r2, r0
 81019c2:	460b      	mov	r3, r1
 81019c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 81019c8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 81019cc:	021b      	lsls	r3, r3, #8
 81019ce:	b21a      	sxth	r2, r3
 81019d0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 81019d4:	b21b      	sxth	r3, r3
 81019d6:	4313      	orrs	r3, r2
 81019d8:	b21b      	sxth	r3, r3
 81019da:	4618      	mov	r0, r3
 81019dc:	f7fe fe2a 	bl	8100634 <__aeabi_i2d>
 81019e0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81019e4:	f7fe ffba 	bl	810095c <__aeabi_ddiv>
 81019e8:	4602      	mov	r2, r0
 81019ea:	460b      	mov	r3, r1
 81019ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81019f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 81019f4:	021b      	lsls	r3, r3, #8
 81019f6:	b21a      	sxth	r2, r3
 81019f8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 81019fc:	b21b      	sxth	r3, r3
 81019fe:	4313      	orrs	r3, r2
 8101a00:	b21b      	sxth	r3, r3
 8101a02:	4618      	mov	r0, r3
 8101a04:	f7fe fe16 	bl	8100634 <__aeabi_i2d>
 8101a08:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101a0c:	f7fe ffa6 	bl	810095c <__aeabi_ddiv>
 8101a10:	4602      	mov	r2, r0
 8101a12:	460b      	mov	r3, r1
 8101a14:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8101a18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8101a1c:	021b      	lsls	r3, r3, #8
 8101a1e:	b21a      	sxth	r2, r3
 8101a20:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8101a24:	b21b      	sxth	r3, r3
 8101a26:	4313      	orrs	r3, r2
 8101a28:	b21b      	sxth	r3, r3
 8101a2a:	4618      	mov	r0, r3
 8101a2c:	f7fe fe02 	bl	8100634 <__aeabi_i2d>
 8101a30:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101a34:	f7fe ff92 	bl	810095c <__aeabi_ddiv>
 8101a38:	4602      	mov	r2, r0
 8101a3a:	460b      	mov	r3, r1
 8101a3c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8101a40:	e03b      	b.n	8101aba <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101a42:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8101a46:	021b      	lsls	r3, r3, #8
 8101a48:	b21a      	sxth	r2, r3
 8101a4a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8101a4e:	b21b      	sxth	r3, r3
 8101a50:	4313      	orrs	r3, r2
 8101a52:	b21b      	sxth	r3, r3
 8101a54:	4618      	mov	r0, r3
 8101a56:	f7fe fded 	bl	8100634 <__aeabi_i2d>
 8101a5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101a5e:	f7fe ff7d 	bl	810095c <__aeabi_ddiv>
 8101a62:	4602      	mov	r2, r0
 8101a64:	460b      	mov	r3, r1
 8101a66:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8101a6a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8101a6e:	021b      	lsls	r3, r3, #8
 8101a70:	b21a      	sxth	r2, r3
 8101a72:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8101a76:	b21b      	sxth	r3, r3
 8101a78:	4313      	orrs	r3, r2
 8101a7a:	b21b      	sxth	r3, r3
 8101a7c:	4618      	mov	r0, r3
 8101a7e:	f7fe fdd9 	bl	8100634 <__aeabi_i2d>
 8101a82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101a86:	f7fe ff69 	bl	810095c <__aeabi_ddiv>
 8101a8a:	4602      	mov	r2, r0
 8101a8c:	460b      	mov	r3, r1
 8101a8e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101a92:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8101a96:	021b      	lsls	r3, r3, #8
 8101a98:	b21a      	sxth	r2, r3
 8101a9a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8101a9e:	b21b      	sxth	r3, r3
 8101aa0:	4313      	orrs	r3, r2
 8101aa2:	b21b      	sxth	r3, r3
 8101aa4:	4618      	mov	r0, r3
 8101aa6:	f7fe fdc5 	bl	8100634 <__aeabi_i2d>
 8101aaa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101aae:	f7fe ff55 	bl	810095c <__aeabi_ddiv>
 8101ab2:	4602      	mov	r2, r0
 8101ab4:	460b      	mov	r3, r1
 8101ab6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8101aba:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8101abe:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8101ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101ac6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8101aca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101ace:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8101ad2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8101ad6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8101ada:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8101ade:	ec49 8b14 	vmov	d4, r8, r9
 8101ae2:	ec45 4b15 	vmov	d5, r4, r5
 8101ae6:	ec41 0b16 	vmov	d6, r0, r1
 8101aea:	ec43 2b17 	vmov	d7, r2, r3
}
 8101aee:	eeb0 0a44 	vmov.f32	s0, s8
 8101af2:	eef0 0a64 	vmov.f32	s1, s9
 8101af6:	eeb0 1a45 	vmov.f32	s2, s10
 8101afa:	eef0 1a65 	vmov.f32	s3, s11
 8101afe:	eeb0 2a46 	vmov.f32	s4, s12
 8101b02:	eef0 2a66 	vmov.f32	s5, s13
 8101b06:	eeb0 3a47 	vmov.f32	s6, s14
 8101b0a:	eef0 3a67 	vmov.f32	s7, s15
 8101b0e:	3778      	adds	r7, #120	; 0x78
 8101b10:	46bd      	mov	sp, r7
 8101b12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8101b16:	bf00      	nop
 8101b18:	3ff00000 	.word	0x3ff00000
 8101b1c:	1000000e 	.word	0x1000000e
 8101b20:	10000008 	.word	0x10000008
 8101b24:	1000000a 	.word	0x1000000a
 8101b28:	1000000c 	.word	0x1000000c
 8101b2c:	10000010 	.word	0x10000010

08101b30 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8101b30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101b34:	b090      	sub	sp, #64	; 0x40
 8101b36:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8101b38:	201a      	movs	r0, #26
 8101b3a:	f7ff feb5 	bl	81018a8 <bno055_getVector>
 8101b3e:	eeb0 4a40 	vmov.f32	s8, s0
 8101b42:	eef0 4a60 	vmov.f32	s9, s1
 8101b46:	eeb0 5a41 	vmov.f32	s10, s2
 8101b4a:	eef0 5a61 	vmov.f32	s11, s3
 8101b4e:	eeb0 6a42 	vmov.f32	s12, s4
 8101b52:	eef0 6a62 	vmov.f32	s13, s5
 8101b56:	eeb0 7a43 	vmov.f32	s14, s6
 8101b5a:	eef0 7a63 	vmov.f32	s15, s7
 8101b5e:	ed87 4b08 	vstr	d4, [r7, #32]
 8101b62:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8101b66:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8101b6a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8101b6e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8101b72:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8101b76:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8101b7a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8101b7e:	ec49 8b14 	vmov	d4, r8, r9
 8101b82:	ec45 4b15 	vmov	d5, r4, r5
 8101b86:	ec41 0b16 	vmov	d6, r0, r1
 8101b8a:	ec43 2b17 	vmov	d7, r2, r3
}
 8101b8e:	eeb0 0a44 	vmov.f32	s0, s8
 8101b92:	eef0 0a64 	vmov.f32	s1, s9
 8101b96:	eeb0 1a45 	vmov.f32	s2, s10
 8101b9a:	eef0 1a65 	vmov.f32	s3, s11
 8101b9e:	eeb0 2a46 	vmov.f32	s4, s12
 8101ba2:	eef0 2a66 	vmov.f32	s5, s13
 8101ba6:	eeb0 3a47 	vmov.f32	s6, s14
 8101baa:	eef0 3a67 	vmov.f32	s7, s15
 8101bae:	3740      	adds	r7, #64	; 0x40
 8101bb0:	46bd      	mov	sp, r7
 8101bb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08101bb8 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8101bb8:	b480      	push	{r7}
 8101bba:	b083      	sub	sp, #12
 8101bbc:	af00      	add	r7, sp, #0
 8101bbe:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101bc0:	4a04      	ldr	r2, [pc, #16]	; (8101bd4 <bno055_assignI2C+0x1c>)
 8101bc2:	687b      	ldr	r3, [r7, #4]
 8101bc4:	6013      	str	r3, [r2, #0]
}
 8101bc6:	bf00      	nop
 8101bc8:	370c      	adds	r7, #12
 8101bca:	46bd      	mov	sp, r7
 8101bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bd0:	4770      	bx	lr
 8101bd2:	bf00      	nop
 8101bd4:	10000220 	.word	0x10000220

08101bd8 <bno055_delay>:

void bno055_delay(int time) {
 8101bd8:	b580      	push	{r7, lr}
 8101bda:	b082      	sub	sp, #8
 8101bdc:	af00      	add	r7, sp, #0
 8101bde:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8101be0:	687b      	ldr	r3, [r7, #4]
 8101be2:	4618      	mov	r0, r3
 8101be4:	f001 fa60 	bl	81030a8 <HAL_Delay>
#endif
}
 8101be8:	bf00      	nop
 8101bea:	3708      	adds	r7, #8
 8101bec:	46bd      	mov	sp, r7
 8101bee:	bd80      	pop	{r7, pc}

08101bf0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8101bf0:	b580      	push	{r7, lr}
 8101bf2:	b088      	sub	sp, #32
 8101bf4:	af02      	add	r7, sp, #8
 8101bf6:	4603      	mov	r3, r0
 8101bf8:	460a      	mov	r2, r1
 8101bfa:	71fb      	strb	r3, [r7, #7]
 8101bfc:	4613      	mov	r3, r2
 8101bfe:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8101c00:	79fb      	ldrb	r3, [r7, #7]
 8101c02:	733b      	strb	r3, [r7, #12]
 8101c04:	79bb      	ldrb	r3, [r7, #6]
 8101c06:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8101c08:	4b5a      	ldr	r3, [pc, #360]	; (8101d74 <bno055_writeData+0x184>)
 8101c0a:	6818      	ldr	r0, [r3, #0]
 8101c0c:	f107 020c 	add.w	r2, r7, #12
 8101c10:	230a      	movs	r3, #10
 8101c12:	9300      	str	r3, [sp, #0]
 8101c14:	2302      	movs	r3, #2
 8101c16:	2150      	movs	r1, #80	; 0x50
 8101c18:	f002 fe98 	bl	810494c <HAL_I2C_Master_Transmit>
 8101c1c:	4603      	mov	r3, r0
 8101c1e:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8101c20:	7dfb      	ldrb	r3, [r7, #23]
 8101c22:	2b00      	cmp	r3, #0
 8101c24:	f000 80a0 	beq.w	8101d68 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8101c28:	7dfb      	ldrb	r3, [r7, #23]
 8101c2a:	2b01      	cmp	r3, #1
 8101c2c:	d103      	bne.n	8101c36 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8101c2e:	4852      	ldr	r0, [pc, #328]	; (8101d78 <bno055_writeData+0x188>)
 8101c30:	f00a f93e 	bl	810beb0 <puts>
 8101c34:	e012      	b.n	8101c5c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8101c36:	7dfb      	ldrb	r3, [r7, #23]
 8101c38:	2b03      	cmp	r3, #3
 8101c3a:	d103      	bne.n	8101c44 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101c3c:	484f      	ldr	r0, [pc, #316]	; (8101d7c <bno055_writeData+0x18c>)
 8101c3e:	f00a f937 	bl	810beb0 <puts>
 8101c42:	e00b      	b.n	8101c5c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8101c44:	7dfb      	ldrb	r3, [r7, #23]
 8101c46:	2b02      	cmp	r3, #2
 8101c48:	d103      	bne.n	8101c52 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101c4a:	484d      	ldr	r0, [pc, #308]	; (8101d80 <bno055_writeData+0x190>)
 8101c4c:	f00a f930 	bl	810beb0 <puts>
 8101c50:	e004      	b.n	8101c5c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8101c52:	7dfb      	ldrb	r3, [r7, #23]
 8101c54:	4619      	mov	r1, r3
 8101c56:	484b      	ldr	r0, [pc, #300]	; (8101d84 <bno055_writeData+0x194>)
 8101c58:	f00a f8a4 	bl	810bda4 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8101c5c:	4b45      	ldr	r3, [pc, #276]	; (8101d74 <bno055_writeData+0x184>)
 8101c5e:	681b      	ldr	r3, [r3, #0]
 8101c60:	4618      	mov	r0, r3
 8101c62:	f003 f972 	bl	8104f4a <HAL_I2C_GetError>
 8101c66:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8101c68:	693b      	ldr	r3, [r7, #16]
 8101c6a:	2b00      	cmp	r3, #0
 8101c6c:	d07e      	beq.n	8101d6c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8101c6e:	693b      	ldr	r3, [r7, #16]
 8101c70:	2b01      	cmp	r3, #1
 8101c72:	d103      	bne.n	8101c7c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8101c74:	4844      	ldr	r0, [pc, #272]	; (8101d88 <bno055_writeData+0x198>)
 8101c76:	f00a f91b 	bl	810beb0 <puts>
 8101c7a:	e021      	b.n	8101cc0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8101c7c:	693b      	ldr	r3, [r7, #16]
 8101c7e:	2b02      	cmp	r3, #2
 8101c80:	d103      	bne.n	8101c8a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8101c82:	4842      	ldr	r0, [pc, #264]	; (8101d8c <bno055_writeData+0x19c>)
 8101c84:	f00a f914 	bl	810beb0 <puts>
 8101c88:	e01a      	b.n	8101cc0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8101c8a:	693b      	ldr	r3, [r7, #16]
 8101c8c:	2b04      	cmp	r3, #4
 8101c8e:	d103      	bne.n	8101c98 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8101c90:	483f      	ldr	r0, [pc, #252]	; (8101d90 <bno055_writeData+0x1a0>)
 8101c92:	f00a f90d 	bl	810beb0 <puts>
 8101c96:	e013      	b.n	8101cc0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8101c98:	693b      	ldr	r3, [r7, #16]
 8101c9a:	2b08      	cmp	r3, #8
 8101c9c:	d103      	bne.n	8101ca6 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8101c9e:	483d      	ldr	r0, [pc, #244]	; (8101d94 <bno055_writeData+0x1a4>)
 8101ca0:	f00a f906 	bl	810beb0 <puts>
 8101ca4:	e00c      	b.n	8101cc0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8101ca6:	693b      	ldr	r3, [r7, #16]
 8101ca8:	2b10      	cmp	r3, #16
 8101caa:	d103      	bne.n	8101cb4 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8101cac:	483a      	ldr	r0, [pc, #232]	; (8101d98 <bno055_writeData+0x1a8>)
 8101cae:	f00a f8ff 	bl	810beb0 <puts>
 8101cb2:	e005      	b.n	8101cc0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8101cb4:	693b      	ldr	r3, [r7, #16]
 8101cb6:	2b20      	cmp	r3, #32
 8101cb8:	d102      	bne.n	8101cc0 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8101cba:	4838      	ldr	r0, [pc, #224]	; (8101d9c <bno055_writeData+0x1ac>)
 8101cbc:	f00a f8f8 	bl	810beb0 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8101cc0:	4b2c      	ldr	r3, [pc, #176]	; (8101d74 <bno055_writeData+0x184>)
 8101cc2:	681b      	ldr	r3, [r3, #0]
 8101cc4:	4618      	mov	r0, r3
 8101cc6:	f003 f932 	bl	8104f2e <HAL_I2C_GetState>
 8101cca:	4603      	mov	r3, r0
 8101ccc:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8101cce:	7bfb      	ldrb	r3, [r7, #15]
 8101cd0:	2b00      	cmp	r3, #0
 8101cd2:	d103      	bne.n	8101cdc <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101cd4:	4832      	ldr	r0, [pc, #200]	; (8101da0 <bno055_writeData+0x1b0>)
 8101cd6:	f00a f8eb 	bl	810beb0 <puts>
 8101cda:	e048      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8101cdc:	7bfb      	ldrb	r3, [r7, #15]
 8101cde:	2b20      	cmp	r3, #32
 8101ce0:	d103      	bne.n	8101cea <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101ce2:	482f      	ldr	r0, [pc, #188]	; (8101da0 <bno055_writeData+0x1b0>)
 8101ce4:	f00a f8e4 	bl	810beb0 <puts>
 8101ce8:	e041      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8101cea:	7bfb      	ldrb	r3, [r7, #15]
 8101cec:	2b24      	cmp	r3, #36	; 0x24
 8101cee:	d103      	bne.n	8101cf8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8101cf0:	482c      	ldr	r0, [pc, #176]	; (8101da4 <bno055_writeData+0x1b4>)
 8101cf2:	f00a f8dd 	bl	810beb0 <puts>
 8101cf6:	e03a      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8101cf8:	7bfb      	ldrb	r3, [r7, #15]
 8101cfa:	2b21      	cmp	r3, #33	; 0x21
 8101cfc:	d103      	bne.n	8101d06 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8101cfe:	482a      	ldr	r0, [pc, #168]	; (8101da8 <bno055_writeData+0x1b8>)
 8101d00:	f00a f8d6 	bl	810beb0 <puts>
 8101d04:	e033      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8101d06:	7bfb      	ldrb	r3, [r7, #15]
 8101d08:	2b22      	cmp	r3, #34	; 0x22
 8101d0a:	d103      	bne.n	8101d14 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8101d0c:	4827      	ldr	r0, [pc, #156]	; (8101dac <bno055_writeData+0x1bc>)
 8101d0e:	f00a f8cf 	bl	810beb0 <puts>
 8101d12:	e02c      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8101d14:	7bfb      	ldrb	r3, [r7, #15]
 8101d16:	2b28      	cmp	r3, #40	; 0x28
 8101d18:	d103      	bne.n	8101d22 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8101d1a:	4825      	ldr	r0, [pc, #148]	; (8101db0 <bno055_writeData+0x1c0>)
 8101d1c:	f00a f8c8 	bl	810beb0 <puts>
 8101d20:	e025      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8101d22:	7bfb      	ldrb	r3, [r7, #15]
 8101d24:	2b29      	cmp	r3, #41	; 0x29
 8101d26:	d103      	bne.n	8101d30 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8101d28:	4822      	ldr	r0, [pc, #136]	; (8101db4 <bno055_writeData+0x1c4>)
 8101d2a:	f00a f8c1 	bl	810beb0 <puts>
 8101d2e:	e01e      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8101d30:	7bfb      	ldrb	r3, [r7, #15]
 8101d32:	2b2a      	cmp	r3, #42	; 0x2a
 8101d34:	d103      	bne.n	8101d3e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8101d36:	4820      	ldr	r0, [pc, #128]	; (8101db8 <bno055_writeData+0x1c8>)
 8101d38:	f00a f8ba 	bl	810beb0 <puts>
 8101d3c:	e017      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8101d3e:	7bfb      	ldrb	r3, [r7, #15]
 8101d40:	2b60      	cmp	r3, #96	; 0x60
 8101d42:	d103      	bne.n	8101d4c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8101d44:	481d      	ldr	r0, [pc, #116]	; (8101dbc <bno055_writeData+0x1cc>)
 8101d46:	f00a f8b3 	bl	810beb0 <puts>
 8101d4a:	e010      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8101d4c:	7bfb      	ldrb	r3, [r7, #15]
 8101d4e:	2ba0      	cmp	r3, #160	; 0xa0
 8101d50:	d103      	bne.n	8101d5a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8101d52:	481b      	ldr	r0, [pc, #108]	; (8101dc0 <bno055_writeData+0x1d0>)
 8101d54:	f00a f8ac 	bl	810beb0 <puts>
 8101d58:	e009      	b.n	8101d6e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8101d5a:	7bfb      	ldrb	r3, [r7, #15]
 8101d5c:	2be0      	cmp	r3, #224	; 0xe0
 8101d5e:	d106      	bne.n	8101d6e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8101d60:	4818      	ldr	r0, [pc, #96]	; (8101dc4 <bno055_writeData+0x1d4>)
 8101d62:	f00a f8a5 	bl	810beb0 <puts>
 8101d66:	e002      	b.n	8101d6e <bno055_writeData+0x17e>
    return;
 8101d68:	bf00      	nop
 8101d6a:	e000      	b.n	8101d6e <bno055_writeData+0x17e>
    return;
 8101d6c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8101d6e:	3718      	adds	r7, #24
 8101d70:	46bd      	mov	sp, r7
 8101d72:	bd80      	pop	{r7, pc}
 8101d74:	10000220 	.word	0x10000220
 8101d78:	0810f914 	.word	0x0810f914
 8101d7c:	0810f938 	.word	0x0810f938
 8101d80:	0810f960 	.word	0x0810f960
 8101d84:	0810f984 	.word	0x0810f984
 8101d88:	0810f99c 	.word	0x0810f99c
 8101d8c:	0810f9b0 	.word	0x0810f9b0
 8101d90:	0810f9c4 	.word	0x0810f9c4
 8101d94:	0810f9d8 	.word	0x0810f9d8
 8101d98:	0810f9ec 	.word	0x0810f9ec
 8101d9c:	0810fa00 	.word	0x0810fa00
 8101da0:	0810fa18 	.word	0x0810fa18
 8101da4:	0810fa30 	.word	0x0810fa30
 8101da8:	0810fa44 	.word	0x0810fa44
 8101dac:	0810fa5c 	.word	0x0810fa5c
 8101db0:	0810fa74 	.word	0x0810fa74
 8101db4:	0810fa8c 	.word	0x0810fa8c
 8101db8:	0810faac 	.word	0x0810faac
 8101dbc:	0810facc 	.word	0x0810facc
 8101dc0:	0810fae4 	.word	0x0810fae4
 8101dc4:	0810fafc 	.word	0x0810fafc

08101dc8 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8101dc8:	b580      	push	{r7, lr}
 8101dca:	b086      	sub	sp, #24
 8101dcc:	af02      	add	r7, sp, #8
 8101dce:	4603      	mov	r3, r0
 8101dd0:	6039      	str	r1, [r7, #0]
 8101dd2:	71fb      	strb	r3, [r7, #7]
 8101dd4:	4613      	mov	r3, r2
 8101dd6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8101dd8:	4b0d      	ldr	r3, [pc, #52]	; (8101e10 <bno055_readData+0x48>)
 8101dda:	6818      	ldr	r0, [r3, #0]
 8101ddc:	1dfa      	adds	r2, r7, #7
 8101dde:	2364      	movs	r3, #100	; 0x64
 8101de0:	9300      	str	r3, [sp, #0]
 8101de2:	2301      	movs	r3, #1
 8101de4:	2150      	movs	r1, #80	; 0x50
 8101de6:	f002 fdb1 	bl	810494c <HAL_I2C_Master_Transmit>
 8101dea:	4603      	mov	r3, r0
 8101dec:	73fb      	strb	r3, [r7, #15]
                          100);
  ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101dee:	4b08      	ldr	r3, [pc, #32]	; (8101e10 <bno055_readData+0x48>)
 8101df0:	6818      	ldr	r0, [r3, #0]
 8101df2:	79bb      	ldrb	r3, [r7, #6]
 8101df4:	b29b      	uxth	r3, r3
 8101df6:	2264      	movs	r2, #100	; 0x64
 8101df8:	9200      	str	r2, [sp, #0]
 8101dfa:	683a      	ldr	r2, [r7, #0]
 8101dfc:	2150      	movs	r1, #80	; 0x50
 8101dfe:	f002 fe99 	bl	8104b34 <HAL_I2C_Master_Receive>
 8101e02:	4603      	mov	r3, r0
 8101e04:	73fb      	strb	r3, [r7, #15]
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8101e06:	bf00      	nop
 8101e08:	3710      	adds	r7, #16
 8101e0a:	46bd      	mov	sp, r7
 8101e0c:	bd80      	pop	{r7, pc}
 8101e0e:	bf00      	nop
 8101e10:	10000220 	.word	0x10000220

08101e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101e14:	b5b0      	push	{r4, r5, r7, lr}
 8101e16:	b09c      	sub	sp, #112	; 0x70
 8101e18:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101e1a:	4bae      	ldr	r3, [pc, #696]	; (81020d4 <main+0x2c0>)
 8101e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e20:	4aac      	ldr	r2, [pc, #688]	; (81020d4 <main+0x2c0>)
 8101e22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e2a:	4baa      	ldr	r3, [pc, #680]	; (81020d4 <main+0x2c0>)
 8101e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101e34:	627b      	str	r3, [r7, #36]	; 0x24
 8101e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101e38:	2001      	movs	r0, #1
 8101e3a:	f002 fce5 	bl	8104808 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101e3e:	f003 fc33 	bl	81056a8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101e42:	2201      	movs	r2, #1
 8101e44:	2102      	movs	r1, #2
 8101e46:	2000      	movs	r0, #0
 8101e48:	f003 fbb4 	bl	81055b4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101e4c:	4ba2      	ldr	r3, [pc, #648]	; (81020d8 <main+0x2c4>)
 8101e4e:	681b      	ldr	r3, [r3, #0]
 8101e50:	091b      	lsrs	r3, r3, #4
 8101e52:	f003 030f 	and.w	r3, r3, #15
 8101e56:	2b07      	cmp	r3, #7
 8101e58:	d108      	bne.n	8101e6c <main+0x58>
 8101e5a:	4ba0      	ldr	r3, [pc, #640]	; (81020dc <main+0x2c8>)
 8101e5c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101e60:	4a9e      	ldr	r2, [pc, #632]	; (81020dc <main+0x2c8>)
 8101e62:	f043 0301 	orr.w	r3, r3, #1
 8101e66:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101e6a:	e007      	b.n	8101e7c <main+0x68>
 8101e6c:	4b9b      	ldr	r3, [pc, #620]	; (81020dc <main+0x2c8>)
 8101e6e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101e72:	4a9a      	ldr	r2, [pc, #616]	; (81020dc <main+0x2c8>)
 8101e74:	f043 0301 	orr.w	r3, r3, #1
 8101e78:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101e7c:	f001 f860 	bl	8102f40 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101e80:	f000 fbb8 	bl	81025f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8101e84:	f000 f9c2 	bl	810220c <MX_I2C1_Init>
  MX_TIM1_Init();
 8101e88:	f000 fa00 	bl	810228c <MX_TIM1_Init>
  MX_TIM2_Init();
 8101e8c:	f000 fac2 	bl	8102414 <MX_TIM2_Init>
  MX_ADC1_Init();
 8101e90:	f000 f940 	bl	8102114 <MX_ADC1_Init>
  MX_TIM4_Init();
 8101e94:	f000 fb0c 	bl	81024b0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  MX_USART3_UART_Init();
 8101e98:	f000 fb60 	bl	810255c <MX_USART3_UART_Init>

  HAL_TIM_Base_Start_IT(&htim2);
 8101e9c:	4890      	ldr	r0, [pc, #576]	; (81020e0 <main+0x2cc>)
 8101e9e:	f006 fb3f 	bl	8108520 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8101ea2:	2100      	movs	r1, #0
 8101ea4:	488f      	ldr	r0, [pc, #572]	; (81020e4 <main+0x2d0>)
 8101ea6:	f006 fc15 	bl	81086d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8101eaa:	2104      	movs	r1, #4
 8101eac:	488d      	ldr	r0, [pc, #564]	; (81020e4 <main+0x2d0>)
 8101eae:	f006 fc11 	bl	81086d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8101eb2:	2108      	movs	r1, #8
 8101eb4:	488b      	ldr	r0, [pc, #556]	; (81020e4 <main+0x2d0>)
 8101eb6:	f006 fc0d 	bl	81086d4 <HAL_TIM_PWM_Start>

  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, BNO055_I2C_ADDR << 1,5,1000);
 8101eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101ebe:	2205      	movs	r2, #5
 8101ec0:	2150      	movs	r1, #80	; 0x50
 8101ec2:	4889      	ldr	r0, [pc, #548]	; (81020e8 <main+0x2d4>)
 8101ec4:	f002 ff2c 	bl	8104d20 <HAL_I2C_IsDeviceReady>
 8101ec8:	4603      	mov	r3, r0
 8101eca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  bno055_assignI2C(&hi2c1);
 8101ece:	4886      	ldr	r0, [pc, #536]	; (81020e8 <main+0x2d4>)
 8101ed0:	f7ff fe72 	bl	8101bb8 <bno055_assignI2C>
  bno055_setup();
 8101ed4:	f7ff fcc0 	bl	8101858 <bno055_setup>
  bno055_setOperationModeNDOF();
 8101ed8:	f7ff fcab 	bl	8101832 <bno055_setOperationModeNDOF>

  //init_tune_PID(&pid, dt, 0.05, 1, 0);

  init_tune_PID_Pitch(&pid_pitch, dt, 2,0.08, 0.0);
 8101edc:	4b83      	ldr	r3, [pc, #524]	; (81020ec <main+0x2d8>)
 8101ede:	edd3 7a00 	vldr	s15, [r3]
 8101ee2:	eddf 1a83 	vldr	s3, [pc, #524]	; 81020f0 <main+0x2dc>
 8101ee6:	ed9f 1a83 	vldr	s2, [pc, #524]	; 81020f4 <main+0x2e0>
 8101eea:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8101eee:	eeb0 0a67 	vmov.f32	s0, s15
 8101ef2:	4881      	ldr	r0, [pc, #516]	; (81020f8 <main+0x2e4>)
 8101ef4:	f7ff f920 	bl	8101138 <init_tune_PID_Pitch>
  init_tune_PID_Roll(&pid_roll, dt, 2,0.08 , 0.0);
 8101ef8:	4b7c      	ldr	r3, [pc, #496]	; (81020ec <main+0x2d8>)
 8101efa:	edd3 7a00 	vldr	s15, [r3]
 8101efe:	eddf 1a7c 	vldr	s3, [pc, #496]	; 81020f0 <main+0x2dc>
 8101f02:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 81020f4 <main+0x2e0>
 8101f06:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8101f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8101f0e:	487b      	ldr	r0, [pc, #492]	; (81020fc <main+0x2e8>)
 8101f10:	f7ff f9b6 	bl	8101280 <init_tune_PID_Roll>

  init_tune_PID_Yaw(&pid_yaw, dt, 1, 0.02, 0.0);
 8101f14:	4b75      	ldr	r3, [pc, #468]	; (81020ec <main+0x2d8>)
 8101f16:	edd3 7a00 	vldr	s15, [r3]
 8101f1a:	eddf 1a75 	vldr	s3, [pc, #468]	; 81020f0 <main+0x2dc>
 8101f1e:	ed9f 1a78 	vldr	s2, [pc, #480]	; 8102100 <main+0x2ec>
 8101f22:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8101f26:	eeb0 0a67 	vmov.f32	s0, s15
 8101f2a:	4876      	ldr	r0, [pc, #472]	; (8102104 <main+0x2f0>)
 8101f2c:	f7ff fa4c 	bl	81013c8 <init_tune_PID_Yaw>
  float u_roll,u_pitch,u_yaw;
  float duty_roll,duty_pitch,duty_yaw;
  float u_c1,u_c2,u_c3;
  double c1,c2,c3;
  float c1_ref,c2_ref,c3_ref;
  float k = 0.64;
 8101f30:	4b75      	ldr	r3, [pc, #468]	; (8102108 <main+0x2f4>)
 8101f32:	663b      	str	r3, [r7, #96]	; 0x60
  uint8_t dir1,dir2,dir3;
  float roll,pitch,yaw;
  float *Tout;
  int volt = 12;
 8101f34:	230c      	movs	r3, #12
 8101f36:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_Tc==1){
 8101f38:	4b74      	ldr	r3, [pc, #464]	; (810210c <main+0x2f8>)
 8101f3a:	edd3 7a00 	vldr	s15, [r3]
 8101f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101f42:	eef4 7a47 	vcmp.f32	s15, s14
 8101f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101f4a:	d1f5      	bne.n	8101f38 <main+0x124>
		flag_Tc = 0;
 8101f4c:	4b6f      	ldr	r3, [pc, #444]	; (810210c <main+0x2f8>)
 8101f4e:	f04f 0200 	mov.w	r2, #0
 8101f52:	601a      	str	r2, [r3, #0]
		bno055_vector_t v = bno055_getVectorEuler();
 8101f54:	f7ff fdec 	bl	8101b30 <bno055_getVectorEuler>
 8101f58:	eeb0 4a40 	vmov.f32	s8, s0
 8101f5c:	eef0 4a60 	vmov.f32	s9, s1
 8101f60:	eeb0 5a41 	vmov.f32	s10, s2
 8101f64:	eef0 5a61 	vmov.f32	s11, s3
 8101f68:	eeb0 6a42 	vmov.f32	s12, s4
 8101f6c:	eef0 6a62 	vmov.f32	s13, s5
 8101f70:	eeb0 7a43 	vmov.f32	s14, s6
 8101f74:	eef0 7a63 	vmov.f32	s15, s7
 8101f78:	ed87 4b00 	vstr	d4, [r7]
 8101f7c:	ed87 5b02 	vstr	d5, [r7, #8]
 8101f80:	ed87 6b04 	vstr	d6, [r7, #16]
 8101f84:	ed87 7b06 	vstr	d7, [r7, #24]

		pitch = (float)v.y; // v.y --> x opposto al motore
 8101f88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8101f8c:	4610      	mov	r0, r2
 8101f8e:	4619      	mov	r1, r3
 8101f90:	f7fe feb2 	bl	8100cf8 <__aeabi_d2f>
 8101f94:	4603      	mov	r3, r0
 8101f96:	65bb      	str	r3, [r7, #88]	; 0x58
		roll = (float)v.z; // v.z --> y
 8101f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101f9c:	4610      	mov	r0, r2
 8101f9e:	4619      	mov	r1, r3
 8101fa0:	f7fe feaa 	bl	8100cf8 <__aeabi_d2f>
 8101fa4:	4603      	mov	r3, r0
 8101fa6:	657b      	str	r3, [r7, #84]	; 0x54
		yaw = (float)v.x; // v.x --> z
 8101fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101fac:	4610      	mov	r0, r2
 8101fae:	4619      	mov	r1, r3
 8101fb0:	f7fe fea2 	bl	8100cf8 <__aeabi_d2f>
 8101fb4:	4603      	mov	r3, r0
 8101fb6:	653b      	str	r3, [r7, #80]	; 0x50
		//printf("Angoli: %f %f %f\r\n",roll,pitch,yaw);
		  //printf("Angoli: %f %f %f\r\n",roll,pitch,yaw);
		u_roll = PID_controller_Roll(&pid_roll, roll, 0.0);
 8101fb8:	eddf 0a4d 	vldr	s1, [pc, #308]	; 81020f0 <main+0x2dc>
 8101fbc:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8101fc0:	484e      	ldr	r0, [pc, #312]	; (81020fc <main+0x2e8>)
 8101fc2:	f7ff f985 	bl	81012d0 <PID_controller_Roll>
 8101fc6:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
		u_pitch = PID_controller_Pitch(&pid_pitch, pitch, 0.0);
 8101fca:	eddf 0a49 	vldr	s1, [pc, #292]	; 81020f0 <main+0x2dc>
 8101fce:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8101fd2:	4849      	ldr	r0, [pc, #292]	; (81020f8 <main+0x2e4>)
 8101fd4:	f7ff f8d8 	bl	8101188 <PID_controller_Pitch>
 8101fd8:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
		  //u_yaw = PID_controller_Yaw(&pid_yaw, yaw, 0.0);
		u_yaw = 0;
 8101fdc:	f04f 0300 	mov.w	r3, #0
 8101fe0:	647b      	str	r3, [r7, #68]	; 0x44
		  //printf("%f %f %f\r\n",u_roll,u_pitch,u_yaw);
		  /*c1 = getCurrentValue(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
		  c2 = getCurrentValue(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
		  c3 = getCurrentValue(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
			*/
		printf("Uscite pid: %f %f\r\n ",u_roll,u_pitch);
 8101fe2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8101fe4:	f7fe fb38 	bl	8100658 <__aeabi_f2d>
 8101fe8:	4604      	mov	r4, r0
 8101fea:	460d      	mov	r5, r1
 8101fec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8101fee:	f7fe fb33 	bl	8100658 <__aeabi_f2d>
 8101ff2:	4602      	mov	r2, r0
 8101ff4:	460b      	mov	r3, r1
 8101ff6:	e9cd 2300 	strd	r2, r3, [sp]
 8101ffa:	4622      	mov	r2, r4
 8101ffc:	462b      	mov	r3, r5
 8101ffe:	4844      	ldr	r0, [pc, #272]	; (8102110 <main+0x2fc>)
 8102000:	f009 fed0 	bl	810bda4 <iprintf>

		Tout = matriceT(u_roll, u_pitch, u_yaw);
 8102004:	ed97 1a11 	vldr	s2, [r7, #68]	; 0x44
 8102008:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 810200c:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8102010:	f000 fb9a 	bl	8102748 <matriceT>
 8102014:	6438      	str	r0, [r7, #64]	; 0x40
		//printf("Coppie: %f %f %f\r\n",Tout[0],Tout[1],Tout[2]);

		duty1= CtoD_M1(Tout[0]);
 8102016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102018:	edd3 7a00 	vldr	s15, [r3]
 810201c:	eeb0 0a67 	vmov.f32	s0, s15
 8102020:	f7ff f9fa 	bl	8101418 <CtoD_M1>
 8102024:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		dir1 = ReftoDir_M1(Tout[0]);
 8102028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810202a:	edd3 7a00 	vldr	s15, [r3]
 810202e:	eeb0 0a67 	vmov.f32	s0, s15
 8102032:	f7ff fa41 	bl	81014b8 <ReftoDir_M1>
 8102036:	4603      	mov	r3, r0
 8102038:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		duty2 = CtoD_M2(Tout[1]);
 810203c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810203e:	3304      	adds	r3, #4
 8102040:	edd3 7a00 	vldr	s15, [r3]
 8102044:	eeb0 0a67 	vmov.f32	s0, s15
 8102048:	f7ff fa86 	bl	8101558 <CtoD_M2>
 810204c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		dir2 = ReftoDir_M2(Tout[1]);
 8102050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102052:	3304      	adds	r3, #4
 8102054:	edd3 7a00 	vldr	s15, [r3]
 8102058:	eeb0 0a67 	vmov.f32	s0, s15
 810205c:	f7ff facc 	bl	81015f8 <ReftoDir_M2>
 8102060:	4603      	mov	r3, r0
 8102062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		duty3 = CtoD_M3(Tout[2]);
 8102066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102068:	3308      	adds	r3, #8
 810206a:	edd3 7a00 	vldr	s15, [r3]
 810206e:	eeb0 0a67 	vmov.f32	s0, s15
 8102072:	f7ff fb11 	bl	8101698 <CtoD_M3>
 8102076:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
		dir3 = ReftoDir_M3(Tout[2]);
 810207a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810207c:	3308      	adds	r3, #8
 810207e:	edd3 7a00 	vldr	s15, [r3]
 8102082:	eeb0 0a67 	vmov.f32	s0, s15
 8102086:	f7ff fb57 	bl	8101738 <ReftoDir_M3>
 810208a:	4603      	mov	r3, r0
 810208c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		set_PWM_dir_M1(duty1, dir1);
 8102090:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8102094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102098:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 810209c:	4619      	mov	r1, r3
 810209e:	ee17 0a90 	vmov	r0, s15
 81020a2:	f7ff fa21 	bl	81014e8 <set_PWM_dir_M1>
		set_PWM_dir_M2(duty2, dir2);
 81020a6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 81020aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81020ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81020b2:	4619      	mov	r1, r3
 81020b4:	ee17 0a90 	vmov	r0, s15
 81020b8:	f7ff fab6 	bl	8101628 <set_PWM_dir_M2>
		set_PWM_dir_M3(duty3, dir3);
 81020bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 81020c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81020c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81020c8:	4619      	mov	r1, r3
 81020ca:	ee17 0a90 	vmov	r0, s15
 81020ce:	f7ff fb4b 	bl	8101768 <set_PWM_dir_M3>
	  if(flag_Tc==1){
 81020d2:	e731      	b.n	8101f38 <main+0x124>
 81020d4:	58024400 	.word	0x58024400
 81020d8:	e000ed00 	.word	0xe000ed00
 81020dc:	58026400 	.word	0x58026400
 81020e0:	10000328 	.word	0x10000328
 81020e4:	100002dc 	.word	0x100002dc
 81020e8:	10000288 	.word	0x10000288
 81020ec:	10000014 	.word	0x10000014
 81020f0:	00000000 	.word	0x00000000
 81020f4:	3da3d70a 	.word	0x3da3d70a
 81020f8:	1000046c 	.word	0x1000046c
 81020fc:	10000454 	.word	0x10000454
 8102100:	3ca3d70a 	.word	0x3ca3d70a
 8102104:	10000484 	.word	0x10000484
 8102108:	3f23d70a 	.word	0x3f23d70a
 810210c:	1000049c 	.word	0x1000049c
 8102110:	0810fb14 	.word	0x0810fb14

08102114 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8102114:	b580      	push	{r7, lr}
 8102116:	b08a      	sub	sp, #40	; 0x28
 8102118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 810211a:	f107 031c 	add.w	r3, r7, #28
 810211e:	2200      	movs	r2, #0
 8102120:	601a      	str	r2, [r3, #0]
 8102122:	605a      	str	r2, [r3, #4]
 8102124:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8102126:	463b      	mov	r3, r7
 8102128:	2200      	movs	r2, #0
 810212a:	601a      	str	r2, [r3, #0]
 810212c:	605a      	str	r2, [r3, #4]
 810212e:	609a      	str	r2, [r3, #8]
 8102130:	60da      	str	r2, [r3, #12]
 8102132:	611a      	str	r2, [r3, #16]
 8102134:	615a      	str	r2, [r3, #20]
 8102136:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8102138:	4b31      	ldr	r3, [pc, #196]	; (8102200 <MX_ADC1_Init+0xec>)
 810213a:	4a32      	ldr	r2, [pc, #200]	; (8102204 <MX_ADC1_Init+0xf0>)
 810213c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 810213e:	4b30      	ldr	r3, [pc, #192]	; (8102200 <MX_ADC1_Init+0xec>)
 8102140:	2200      	movs	r2, #0
 8102142:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8102144:	4b2e      	ldr	r3, [pc, #184]	; (8102200 <MX_ADC1_Init+0xec>)
 8102146:	2200      	movs	r2, #0
 8102148:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 810214a:	4b2d      	ldr	r3, [pc, #180]	; (8102200 <MX_ADC1_Init+0xec>)
 810214c:	2200      	movs	r2, #0
 810214e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8102150:	4b2b      	ldr	r3, [pc, #172]	; (8102200 <MX_ADC1_Init+0xec>)
 8102152:	2204      	movs	r2, #4
 8102154:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8102156:	4b2a      	ldr	r3, [pc, #168]	; (8102200 <MX_ADC1_Init+0xec>)
 8102158:	2200      	movs	r2, #0
 810215a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 810215c:	4b28      	ldr	r3, [pc, #160]	; (8102200 <MX_ADC1_Init+0xec>)
 810215e:	2200      	movs	r2, #0
 8102160:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8102162:	4b27      	ldr	r3, [pc, #156]	; (8102200 <MX_ADC1_Init+0xec>)
 8102164:	2201      	movs	r2, #1
 8102166:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8102168:	4b25      	ldr	r3, [pc, #148]	; (8102200 <MX_ADC1_Init+0xec>)
 810216a:	2201      	movs	r2, #1
 810216c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 1;
 810216e:	4b24      	ldr	r3, [pc, #144]	; (8102200 <MX_ADC1_Init+0xec>)
 8102170:	2201      	movs	r2, #1
 8102172:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8102174:	4b22      	ldr	r3, [pc, #136]	; (8102200 <MX_ADC1_Init+0xec>)
 8102176:	2200      	movs	r2, #0
 8102178:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810217a:	4b21      	ldr	r3, [pc, #132]	; (8102200 <MX_ADC1_Init+0xec>)
 810217c:	2200      	movs	r2, #0
 810217e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8102180:	4b1f      	ldr	r3, [pc, #124]	; (8102200 <MX_ADC1_Init+0xec>)
 8102182:	2200      	movs	r2, #0
 8102184:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8102186:	4b1e      	ldr	r3, [pc, #120]	; (8102200 <MX_ADC1_Init+0xec>)
 8102188:	2200      	movs	r2, #0
 810218a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810218c:	4b1c      	ldr	r3, [pc, #112]	; (8102200 <MX_ADC1_Init+0xec>)
 810218e:	2200      	movs	r2, #0
 8102190:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8102192:	4b1b      	ldr	r3, [pc, #108]	; (8102200 <MX_ADC1_Init+0xec>)
 8102194:	2200      	movs	r2, #0
 8102196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810219a:	4819      	ldr	r0, [pc, #100]	; (8102200 <MX_ADC1_Init+0xec>)
 810219c:	f001 f940 	bl	8103420 <HAL_ADC_Init>
 81021a0:	4603      	mov	r3, r0
 81021a2:	2b00      	cmp	r3, #0
 81021a4:	d001      	beq.n	81021aa <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 81021a6:	f000 fac7 	bl	8102738 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81021aa:	2300      	movs	r3, #0
 81021ac:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81021ae:	f107 031c 	add.w	r3, r7, #28
 81021b2:	4619      	mov	r1, r3
 81021b4:	4812      	ldr	r0, [pc, #72]	; (8102200 <MX_ADC1_Init+0xec>)
 81021b6:	f001 ff57 	bl	8104068 <HAL_ADCEx_MultiModeConfigChannel>
 81021ba:	4603      	mov	r3, r0
 81021bc:	2b00      	cmp	r3, #0
 81021be:	d001      	beq.n	81021c4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 81021c0:	f000 faba 	bl	8102738 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 81021c4:	4b10      	ldr	r3, [pc, #64]	; (8102208 <MX_ADC1_Init+0xf4>)
 81021c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81021c8:	2306      	movs	r3, #6
 81021ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81021cc:	2300      	movs	r3, #0
 81021ce:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81021d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81021d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81021d6:	2304      	movs	r3, #4
 81021d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81021da:	2300      	movs	r3, #0
 81021dc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81021de:	2300      	movs	r3, #0
 81021e0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81021e2:	463b      	mov	r3, r7
 81021e4:	4619      	mov	r1, r3
 81021e6:	4806      	ldr	r0, [pc, #24]	; (8102200 <MX_ADC1_Init+0xec>)
 81021e8:	f001 fabc 	bl	8103764 <HAL_ADC_ConfigChannel>
 81021ec:	4603      	mov	r3, r0
 81021ee:	2b00      	cmp	r3, #0
 81021f0:	d001      	beq.n	81021f6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 81021f2:	f000 faa1 	bl	8102738 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81021f6:	bf00      	nop
 81021f8:	3728      	adds	r7, #40	; 0x28
 81021fa:	46bd      	mov	sp, r7
 81021fc:	bd80      	pop	{r7, pc}
 81021fe:	bf00      	nop
 8102200:	10000224 	.word	0x10000224
 8102204:	40022000 	.word	0x40022000
 8102208:	3ef08000 	.word	0x3ef08000

0810220c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 810220c:	b580      	push	{r7, lr}
 810220e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8102210:	4b1b      	ldr	r3, [pc, #108]	; (8102280 <MX_I2C1_Init+0x74>)
 8102212:	4a1c      	ldr	r2, [pc, #112]	; (8102284 <MX_I2C1_Init+0x78>)
 8102214:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 8102216:	4b1a      	ldr	r3, [pc, #104]	; (8102280 <MX_I2C1_Init+0x74>)
 8102218:	4a1b      	ldr	r2, [pc, #108]	; (8102288 <MX_I2C1_Init+0x7c>)
 810221a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 810221c:	4b18      	ldr	r3, [pc, #96]	; (8102280 <MX_I2C1_Init+0x74>)
 810221e:	2200      	movs	r2, #0
 8102220:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8102222:	4b17      	ldr	r3, [pc, #92]	; (8102280 <MX_I2C1_Init+0x74>)
 8102224:	2201      	movs	r2, #1
 8102226:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8102228:	4b15      	ldr	r3, [pc, #84]	; (8102280 <MX_I2C1_Init+0x74>)
 810222a:	2200      	movs	r2, #0
 810222c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 810222e:	4b14      	ldr	r3, [pc, #80]	; (8102280 <MX_I2C1_Init+0x74>)
 8102230:	2200      	movs	r2, #0
 8102232:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8102234:	4b12      	ldr	r3, [pc, #72]	; (8102280 <MX_I2C1_Init+0x74>)
 8102236:	2200      	movs	r2, #0
 8102238:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810223a:	4b11      	ldr	r3, [pc, #68]	; (8102280 <MX_I2C1_Init+0x74>)
 810223c:	2200      	movs	r2, #0
 810223e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8102240:	4b0f      	ldr	r3, [pc, #60]	; (8102280 <MX_I2C1_Init+0x74>)
 8102242:	2200      	movs	r2, #0
 8102244:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8102246:	480e      	ldr	r0, [pc, #56]	; (8102280 <MX_I2C1_Init+0x74>)
 8102248:	f002 faf0 	bl	810482c <HAL_I2C_Init>
 810224c:	4603      	mov	r3, r0
 810224e:	2b00      	cmp	r3, #0
 8102250:	d001      	beq.n	8102256 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8102252:	f000 fa71 	bl	8102738 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8102256:	2100      	movs	r1, #0
 8102258:	4809      	ldr	r0, [pc, #36]	; (8102280 <MX_I2C1_Init+0x74>)
 810225a:	f003 f913 	bl	8105484 <HAL_I2CEx_ConfigAnalogFilter>
 810225e:	4603      	mov	r3, r0
 8102260:	2b00      	cmp	r3, #0
 8102262:	d001      	beq.n	8102268 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8102264:	f000 fa68 	bl	8102738 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8102268:	2100      	movs	r1, #0
 810226a:	4805      	ldr	r0, [pc, #20]	; (8102280 <MX_I2C1_Init+0x74>)
 810226c:	f003 f955 	bl	810551a <HAL_I2CEx_ConfigDigitalFilter>
 8102270:	4603      	mov	r3, r0
 8102272:	2b00      	cmp	r3, #0
 8102274:	d001      	beq.n	810227a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8102276:	f000 fa5f 	bl	8102738 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 810227a:	bf00      	nop
 810227c:	bd80      	pop	{r7, pc}
 810227e:	bf00      	nop
 8102280:	10000288 	.word	0x10000288
 8102284:	40005400 	.word	0x40005400
 8102288:	00909fce 	.word	0x00909fce

0810228c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 810228c:	b580      	push	{r7, lr}
 810228e:	b09a      	sub	sp, #104	; 0x68
 8102290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102292:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8102296:	2200      	movs	r2, #0
 8102298:	601a      	str	r2, [r3, #0]
 810229a:	605a      	str	r2, [r3, #4]
 810229c:	609a      	str	r2, [r3, #8]
 810229e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81022a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81022a4:	2200      	movs	r2, #0
 81022a6:	601a      	str	r2, [r3, #0]
 81022a8:	605a      	str	r2, [r3, #4]
 81022aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81022ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81022b0:	2200      	movs	r2, #0
 81022b2:	601a      	str	r2, [r3, #0]
 81022b4:	605a      	str	r2, [r3, #4]
 81022b6:	609a      	str	r2, [r3, #8]
 81022b8:	60da      	str	r2, [r3, #12]
 81022ba:	611a      	str	r2, [r3, #16]
 81022bc:	615a      	str	r2, [r3, #20]
 81022be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81022c0:	1d3b      	adds	r3, r7, #4
 81022c2:	222c      	movs	r2, #44	; 0x2c
 81022c4:	2100      	movs	r1, #0
 81022c6:	4618      	mov	r0, r3
 81022c8:	f008 fe0a 	bl	810aee0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81022cc:	4b4f      	ldr	r3, [pc, #316]	; (810240c <MX_TIM1_Init+0x180>)
 81022ce:	4a50      	ldr	r2, [pc, #320]	; (8102410 <MX_TIM1_Init+0x184>)
 81022d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 81022d2:	4b4e      	ldr	r3, [pc, #312]	; (810240c <MX_TIM1_Init+0x180>)
 81022d4:	22ef      	movs	r2, #239	; 0xef
 81022d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81022d8:	4b4c      	ldr	r3, [pc, #304]	; (810240c <MX_TIM1_Init+0x180>)
 81022da:	2200      	movs	r2, #0
 81022dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 81022de:	4b4b      	ldr	r3, [pc, #300]	; (810240c <MX_TIM1_Init+0x180>)
 81022e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 81022e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81022e6:	4b49      	ldr	r3, [pc, #292]	; (810240c <MX_TIM1_Init+0x180>)
 81022e8:	2200      	movs	r2, #0
 81022ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81022ec:	4b47      	ldr	r3, [pc, #284]	; (810240c <MX_TIM1_Init+0x180>)
 81022ee:	2200      	movs	r2, #0
 81022f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81022f2:	4b46      	ldr	r3, [pc, #280]	; (810240c <MX_TIM1_Init+0x180>)
 81022f4:	2200      	movs	r2, #0
 81022f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 81022f8:	4844      	ldr	r0, [pc, #272]	; (810240c <MX_TIM1_Init+0x180>)
 81022fa:	f006 f8b9 	bl	8108470 <HAL_TIM_Base_Init>
 81022fe:	4603      	mov	r3, r0
 8102300:	2b00      	cmp	r3, #0
 8102302:	d001      	beq.n	8102308 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8102304:	f000 fa18 	bl	8102738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810230c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 810230e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8102312:	4619      	mov	r1, r3
 8102314:	483d      	ldr	r0, [pc, #244]	; (810240c <MX_TIM1_Init+0x180>)
 8102316:	f006 fdc5 	bl	8108ea4 <HAL_TIM_ConfigClockSource>
 810231a:	4603      	mov	r3, r0
 810231c:	2b00      	cmp	r3, #0
 810231e:	d001      	beq.n	8102324 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8102320:	f000 fa0a 	bl	8102738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8102324:	4839      	ldr	r0, [pc, #228]	; (810240c <MX_TIM1_Init+0x180>)
 8102326:	f006 f973 	bl	8108610 <HAL_TIM_PWM_Init>
 810232a:	4603      	mov	r3, r0
 810232c:	2b00      	cmp	r3, #0
 810232e:	d001      	beq.n	8102334 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8102330:	f000 fa02 	bl	8102738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102334:	2300      	movs	r3, #0
 8102336:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8102338:	2300      	movs	r3, #0
 810233a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810233c:	2300      	movs	r3, #0
 810233e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8102340:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8102344:	4619      	mov	r1, r3
 8102346:	4831      	ldr	r0, [pc, #196]	; (810240c <MX_TIM1_Init+0x180>)
 8102348:	f007 fafe 	bl	8109948 <HAL_TIMEx_MasterConfigSynchronization>
 810234c:	4603      	mov	r3, r0
 810234e:	2b00      	cmp	r3, #0
 8102350:	d001      	beq.n	8102356 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8102352:	f000 f9f1 	bl	8102738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8102356:	2360      	movs	r3, #96	; 0x60
 8102358:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 810235a:	2300      	movs	r3, #0
 810235c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810235e:	2300      	movs	r3, #0
 8102360:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8102362:	2300      	movs	r3, #0
 8102364:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102366:	2300      	movs	r3, #0
 8102368:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 810236a:	2300      	movs	r3, #0
 810236c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 810236e:	2300      	movs	r3, #0
 8102370:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102372:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8102376:	2200      	movs	r2, #0
 8102378:	4619      	mov	r1, r3
 810237a:	4824      	ldr	r0, [pc, #144]	; (810240c <MX_TIM1_Init+0x180>)
 810237c:	f006 fc7e 	bl	8108c7c <HAL_TIM_PWM_ConfigChannel>
 8102380:	4603      	mov	r3, r0
 8102382:	2b00      	cmp	r3, #0
 8102384:	d001      	beq.n	810238a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8102386:	f000 f9d7 	bl	8102738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 810238a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810238e:	2204      	movs	r2, #4
 8102390:	4619      	mov	r1, r3
 8102392:	481e      	ldr	r0, [pc, #120]	; (810240c <MX_TIM1_Init+0x180>)
 8102394:	f006 fc72 	bl	8108c7c <HAL_TIM_PWM_ConfigChannel>
 8102398:	4603      	mov	r3, r0
 810239a:	2b00      	cmp	r3, #0
 810239c:	d001      	beq.n	81023a2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 810239e:	f000 f9cb 	bl	8102738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 81023a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81023a6:	2208      	movs	r2, #8
 81023a8:	4619      	mov	r1, r3
 81023aa:	4818      	ldr	r0, [pc, #96]	; (810240c <MX_TIM1_Init+0x180>)
 81023ac:	f006 fc66 	bl	8108c7c <HAL_TIM_PWM_ConfigChannel>
 81023b0:	4603      	mov	r3, r0
 81023b2:	2b00      	cmp	r3, #0
 81023b4:	d001      	beq.n	81023ba <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 81023b6:	f000 f9bf 	bl	8102738 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81023ba:	2300      	movs	r3, #0
 81023bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81023be:	2300      	movs	r3, #0
 81023c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81023c2:	2300      	movs	r3, #0
 81023c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81023c6:	2300      	movs	r3, #0
 81023c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81023ca:	2300      	movs	r3, #0
 81023cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81023ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81023d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81023d4:	2300      	movs	r3, #0
 81023d6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81023d8:	2300      	movs	r3, #0
 81023da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81023dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81023e0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81023e2:	2300      	movs	r3, #0
 81023e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81023e6:	2300      	movs	r3, #0
 81023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 81023ea:	1d3b      	adds	r3, r7, #4
 81023ec:	4619      	mov	r1, r3
 81023ee:	4807      	ldr	r0, [pc, #28]	; (810240c <MX_TIM1_Init+0x180>)
 81023f0:	f007 fb38 	bl	8109a64 <HAL_TIMEx_ConfigBreakDeadTime>
 81023f4:	4603      	mov	r3, r0
 81023f6:	2b00      	cmp	r3, #0
 81023f8:	d001      	beq.n	81023fe <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 81023fa:	f000 f99d 	bl	8102738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 81023fe:	4803      	ldr	r0, [pc, #12]	; (810240c <MX_TIM1_Init+0x180>)
 8102400:	f000 fbd4 	bl	8102bac <HAL_TIM_MspPostInit>

}
 8102404:	bf00      	nop
 8102406:	3768      	adds	r7, #104	; 0x68
 8102408:	46bd      	mov	sp, r7
 810240a:	bd80      	pop	{r7, pc}
 810240c:	100002dc 	.word	0x100002dc
 8102410:	40010000 	.word	0x40010000

08102414 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8102414:	b580      	push	{r7, lr}
 8102416:	b088      	sub	sp, #32
 8102418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810241a:	f107 0310 	add.w	r3, r7, #16
 810241e:	2200      	movs	r2, #0
 8102420:	601a      	str	r2, [r3, #0]
 8102422:	605a      	str	r2, [r3, #4]
 8102424:	609a      	str	r2, [r3, #8]
 8102426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102428:	1d3b      	adds	r3, r7, #4
 810242a:	2200      	movs	r2, #0
 810242c:	601a      	str	r2, [r3, #0]
 810242e:	605a      	str	r2, [r3, #4]
 8102430:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8102432:	4b1e      	ldr	r3, [pc, #120]	; (81024ac <MX_TIM2_Init+0x98>)
 8102434:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8102438:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 810243a:	4b1c      	ldr	r3, [pc, #112]	; (81024ac <MX_TIM2_Init+0x98>)
 810243c:	22ef      	movs	r2, #239	; 0xef
 810243e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102440:	4b1a      	ldr	r3, [pc, #104]	; (81024ac <MX_TIM2_Init+0x98>)
 8102442:	2200      	movs	r2, #0
 8102444:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8102446:	4b19      	ldr	r3, [pc, #100]	; (81024ac <MX_TIM2_Init+0x98>)
 8102448:	f242 720f 	movw	r2, #9999	; 0x270f
 810244c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810244e:	4b17      	ldr	r3, [pc, #92]	; (81024ac <MX_TIM2_Init+0x98>)
 8102450:	2200      	movs	r2, #0
 8102452:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102454:	4b15      	ldr	r3, [pc, #84]	; (81024ac <MX_TIM2_Init+0x98>)
 8102456:	2200      	movs	r2, #0
 8102458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 810245a:	4814      	ldr	r0, [pc, #80]	; (81024ac <MX_TIM2_Init+0x98>)
 810245c:	f006 f808 	bl	8108470 <HAL_TIM_Base_Init>
 8102460:	4603      	mov	r3, r0
 8102462:	2b00      	cmp	r3, #0
 8102464:	d001      	beq.n	810246a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8102466:	f000 f967 	bl	8102738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810246a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810246e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8102470:	f107 0310 	add.w	r3, r7, #16
 8102474:	4619      	mov	r1, r3
 8102476:	480d      	ldr	r0, [pc, #52]	; (81024ac <MX_TIM2_Init+0x98>)
 8102478:	f006 fd14 	bl	8108ea4 <HAL_TIM_ConfigClockSource>
 810247c:	4603      	mov	r3, r0
 810247e:	2b00      	cmp	r3, #0
 8102480:	d001      	beq.n	8102486 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8102482:	f000 f959 	bl	8102738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102486:	2300      	movs	r3, #0
 8102488:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810248a:	2300      	movs	r3, #0
 810248c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 810248e:	1d3b      	adds	r3, r7, #4
 8102490:	4619      	mov	r1, r3
 8102492:	4806      	ldr	r0, [pc, #24]	; (81024ac <MX_TIM2_Init+0x98>)
 8102494:	f007 fa58 	bl	8109948 <HAL_TIMEx_MasterConfigSynchronization>
 8102498:	4603      	mov	r3, r0
 810249a:	2b00      	cmp	r3, #0
 810249c:	d001      	beq.n	81024a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 810249e:	f000 f94b 	bl	8102738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 81024a2:	bf00      	nop
 81024a4:	3720      	adds	r7, #32
 81024a6:	46bd      	mov	sp, r7
 81024a8:	bd80      	pop	{r7, pc}
 81024aa:	bf00      	nop
 81024ac:	10000328 	.word	0x10000328

081024b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 81024b0:	b580      	push	{r7, lr}
 81024b2:	b08c      	sub	sp, #48	; 0x30
 81024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81024b6:	f107 030c 	add.w	r3, r7, #12
 81024ba:	2224      	movs	r2, #36	; 0x24
 81024bc:	2100      	movs	r1, #0
 81024be:	4618      	mov	r0, r3
 81024c0:	f008 fd0e 	bl	810aee0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81024c4:	463b      	mov	r3, r7
 81024c6:	2200      	movs	r2, #0
 81024c8:	601a      	str	r2, [r3, #0]
 81024ca:	605a      	str	r2, [r3, #4]
 81024cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 81024ce:	4b21      	ldr	r3, [pc, #132]	; (8102554 <MX_TIM4_Init+0xa4>)
 81024d0:	4a21      	ldr	r2, [pc, #132]	; (8102558 <MX_TIM4_Init+0xa8>)
 81024d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 81024d4:	4b1f      	ldr	r3, [pc, #124]	; (8102554 <MX_TIM4_Init+0xa4>)
 81024d6:	2200      	movs	r2, #0
 81024d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 81024da:	4b1e      	ldr	r3, [pc, #120]	; (8102554 <MX_TIM4_Init+0xa4>)
 81024dc:	2200      	movs	r2, #0
 81024de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 81024e0:	4b1c      	ldr	r3, [pc, #112]	; (8102554 <MX_TIM4_Init+0xa4>)
 81024e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81024e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81024e8:	4b1a      	ldr	r3, [pc, #104]	; (8102554 <MX_TIM4_Init+0xa4>)
 81024ea:	2200      	movs	r2, #0
 81024ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81024ee:	4b19      	ldr	r3, [pc, #100]	; (8102554 <MX_TIM4_Init+0xa4>)
 81024f0:	2200      	movs	r2, #0
 81024f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 81024f4:	2301      	movs	r3, #1
 81024f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 81024f8:	2300      	movs	r3, #0
 81024fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 81024fc:	2301      	movs	r3, #1
 81024fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8102500:	2300      	movs	r3, #0
 8102502:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8102504:	2300      	movs	r3, #0
 8102506:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8102508:	2300      	movs	r3, #0
 810250a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 810250c:	2301      	movs	r3, #1
 810250e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8102510:	2300      	movs	r3, #0
 8102512:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8102514:	2300      	movs	r3, #0
 8102516:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8102518:	f107 030c 	add.w	r3, r7, #12
 810251c:	4619      	mov	r1, r3
 810251e:	480d      	ldr	r0, [pc, #52]	; (8102554 <MX_TIM4_Init+0xa4>)
 8102520:	f006 f9e6 	bl	81088f0 <HAL_TIM_Encoder_Init>
 8102524:	4603      	mov	r3, r0
 8102526:	2b00      	cmp	r3, #0
 8102528:	d001      	beq.n	810252e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 810252a:	f000 f905 	bl	8102738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810252e:	2300      	movs	r3, #0
 8102530:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102532:	2300      	movs	r3, #0
 8102534:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8102536:	463b      	mov	r3, r7
 8102538:	4619      	mov	r1, r3
 810253a:	4806      	ldr	r0, [pc, #24]	; (8102554 <MX_TIM4_Init+0xa4>)
 810253c:	f007 fa04 	bl	8109948 <HAL_TIMEx_MasterConfigSynchronization>
 8102540:	4603      	mov	r3, r0
 8102542:	2b00      	cmp	r3, #0
 8102544:	d001      	beq.n	810254a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8102546:	f000 f8f7 	bl	8102738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 810254a:	bf00      	nop
 810254c:	3730      	adds	r7, #48	; 0x30
 810254e:	46bd      	mov	sp, r7
 8102550:	bd80      	pop	{r7, pc}
 8102552:	bf00      	nop
 8102554:	10000374 	.word	0x10000374
 8102558:	40000800 	.word	0x40000800

0810255c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 810255c:	b580      	push	{r7, lr}
 810255e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102560:	4b22      	ldr	r3, [pc, #136]	; (81025ec <MX_USART3_UART_Init+0x90>)
 8102562:	4a23      	ldr	r2, [pc, #140]	; (81025f0 <MX_USART3_UART_Init+0x94>)
 8102564:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102566:	4b21      	ldr	r3, [pc, #132]	; (81025ec <MX_USART3_UART_Init+0x90>)
 8102568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 810256c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810256e:	4b1f      	ldr	r3, [pc, #124]	; (81025ec <MX_USART3_UART_Init+0x90>)
 8102570:	2200      	movs	r2, #0
 8102572:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102574:	4b1d      	ldr	r3, [pc, #116]	; (81025ec <MX_USART3_UART_Init+0x90>)
 8102576:	2200      	movs	r2, #0
 8102578:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810257a:	4b1c      	ldr	r3, [pc, #112]	; (81025ec <MX_USART3_UART_Init+0x90>)
 810257c:	2200      	movs	r2, #0
 810257e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102580:	4b1a      	ldr	r3, [pc, #104]	; (81025ec <MX_USART3_UART_Init+0x90>)
 8102582:	220c      	movs	r2, #12
 8102584:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102586:	4b19      	ldr	r3, [pc, #100]	; (81025ec <MX_USART3_UART_Init+0x90>)
 8102588:	2200      	movs	r2, #0
 810258a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 810258c:	4b17      	ldr	r3, [pc, #92]	; (81025ec <MX_USART3_UART_Init+0x90>)
 810258e:	2200      	movs	r2, #0
 8102590:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8102592:	4b16      	ldr	r3, [pc, #88]	; (81025ec <MX_USART3_UART_Init+0x90>)
 8102594:	2200      	movs	r2, #0
 8102596:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102598:	4b14      	ldr	r3, [pc, #80]	; (81025ec <MX_USART3_UART_Init+0x90>)
 810259a:	2200      	movs	r2, #0
 810259c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810259e:	4b13      	ldr	r3, [pc, #76]	; (81025ec <MX_USART3_UART_Init+0x90>)
 81025a0:	2200      	movs	r2, #0
 81025a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81025a4:	4811      	ldr	r0, [pc, #68]	; (81025ec <MX_USART3_UART_Init+0x90>)
 81025a6:	f007 faf9 	bl	8109b9c <HAL_UART_Init>
 81025aa:	4603      	mov	r3, r0
 81025ac:	2b00      	cmp	r3, #0
 81025ae:	d001      	beq.n	81025b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81025b0:	f000 f8c2 	bl	8102738 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81025b4:	2100      	movs	r1, #0
 81025b6:	480d      	ldr	r0, [pc, #52]	; (81025ec <MX_USART3_UART_Init+0x90>)
 81025b8:	f008 fb88 	bl	810accc <HAL_UARTEx_SetTxFifoThreshold>
 81025bc:	4603      	mov	r3, r0
 81025be:	2b00      	cmp	r3, #0
 81025c0:	d001      	beq.n	81025c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81025c2:	f000 f8b9 	bl	8102738 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81025c6:	2100      	movs	r1, #0
 81025c8:	4808      	ldr	r0, [pc, #32]	; (81025ec <MX_USART3_UART_Init+0x90>)
 81025ca:	f008 fbbd 	bl	810ad48 <HAL_UARTEx_SetRxFifoThreshold>
 81025ce:	4603      	mov	r3, r0
 81025d0:	2b00      	cmp	r3, #0
 81025d2:	d001      	beq.n	81025d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81025d4:	f000 f8b0 	bl	8102738 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81025d8:	4804      	ldr	r0, [pc, #16]	; (81025ec <MX_USART3_UART_Init+0x90>)
 81025da:	f008 fb3e 	bl	810ac5a <HAL_UARTEx_DisableFifoMode>
 81025de:	4603      	mov	r3, r0
 81025e0:	2b00      	cmp	r3, #0
 81025e2:	d001      	beq.n	81025e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81025e4:	f000 f8a8 	bl	8102738 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81025e8:	bf00      	nop
 81025ea:	bd80      	pop	{r7, pc}
 81025ec:	100003c0 	.word	0x100003c0
 81025f0:	40004800 	.word	0x40004800

081025f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81025f4:	b580      	push	{r7, lr}
 81025f6:	b08a      	sub	sp, #40	; 0x28
 81025f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81025fa:	f107 0314 	add.w	r3, r7, #20
 81025fe:	2200      	movs	r2, #0
 8102600:	601a      	str	r2, [r3, #0]
 8102602:	605a      	str	r2, [r3, #4]
 8102604:	609a      	str	r2, [r3, #8]
 8102606:	60da      	str	r2, [r3, #12]
 8102608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810260a:	4b34      	ldr	r3, [pc, #208]	; (81026dc <MX_GPIO_Init+0xe8>)
 810260c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102610:	4a32      	ldr	r2, [pc, #200]	; (81026dc <MX_GPIO_Init+0xe8>)
 8102612:	f043 0301 	orr.w	r3, r3, #1
 8102616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810261a:	4b30      	ldr	r3, [pc, #192]	; (81026dc <MX_GPIO_Init+0xe8>)
 810261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102620:	f003 0301 	and.w	r3, r3, #1
 8102624:	613b      	str	r3, [r7, #16]
 8102626:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8102628:	4b2c      	ldr	r3, [pc, #176]	; (81026dc <MX_GPIO_Init+0xe8>)
 810262a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810262e:	4a2b      	ldr	r2, [pc, #172]	; (81026dc <MX_GPIO_Init+0xe8>)
 8102630:	f043 0310 	orr.w	r3, r3, #16
 8102634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102638:	4b28      	ldr	r3, [pc, #160]	; (81026dc <MX_GPIO_Init+0xe8>)
 810263a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810263e:	f003 0310 	and.w	r3, r3, #16
 8102642:	60fb      	str	r3, [r7, #12]
 8102644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8102646:	4b25      	ldr	r3, [pc, #148]	; (81026dc <MX_GPIO_Init+0xe8>)
 8102648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810264c:	4a23      	ldr	r2, [pc, #140]	; (81026dc <MX_GPIO_Init+0xe8>)
 810264e:	f043 0308 	orr.w	r3, r3, #8
 8102652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102656:	4b21      	ldr	r3, [pc, #132]	; (81026dc <MX_GPIO_Init+0xe8>)
 8102658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810265c:	f003 0308 	and.w	r3, r3, #8
 8102660:	60bb      	str	r3, [r7, #8]
 8102662:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8102664:	4b1d      	ldr	r3, [pc, #116]	; (81026dc <MX_GPIO_Init+0xe8>)
 8102666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810266a:	4a1c      	ldr	r2, [pc, #112]	; (81026dc <MX_GPIO_Init+0xe8>)
 810266c:	f043 0302 	orr.w	r3, r3, #2
 8102670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102674:	4b19      	ldr	r3, [pc, #100]	; (81026dc <MX_GPIO_Init+0xe8>)
 8102676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810267a:	f003 0302 	and.w	r3, r3, #2
 810267e:	607b      	str	r3, [r7, #4]
 8102680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 8102682:	2200      	movs	r2, #0
 8102684:	2110      	movs	r1, #16
 8102686:	4816      	ldr	r0, [pc, #88]	; (81026e0 <MX_GPIO_Init+0xec>)
 8102688:	f002 f8a4 	bl	81047d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR2_Pin, GPIO_PIN_RESET);
 810268c:	2200      	movs	r2, #0
 810268e:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8102692:	4814      	ldr	r0, [pc, #80]	; (81026e4 <MX_GPIO_Init+0xf0>)
 8102694:	f002 f89e 	bl	81047d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR1_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin;
 8102698:	2310      	movs	r3, #16
 810269a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810269c:	2301      	movs	r3, #1
 810269e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81026a0:	2300      	movs	r3, #0
 81026a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81026a4:	2300      	movs	r3, #0
 81026a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR1_GPIO_Port, &GPIO_InitStruct);
 81026a8:	f107 0314 	add.w	r3, r7, #20
 81026ac:	4619      	mov	r1, r3
 81026ae:	480c      	ldr	r0, [pc, #48]	; (81026e0 <MX_GPIO_Init+0xec>)
 81026b0:	f001 fee0 	bl	8104474 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR3_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR2_Pin;
 81026b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 81026b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81026ba:	2301      	movs	r3, #1
 81026bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81026be:	2300      	movs	r3, #0
 81026c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81026c2:	2300      	movs	r3, #0
 81026c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81026c6:	f107 0314 	add.w	r3, r7, #20
 81026ca:	4619      	mov	r1, r3
 81026cc:	4805      	ldr	r0, [pc, #20]	; (81026e4 <MX_GPIO_Init+0xf0>)
 81026ce:	f001 fed1 	bl	8104474 <HAL_GPIO_Init>

}
 81026d2:	bf00      	nop
 81026d4:	3728      	adds	r7, #40	; 0x28
 81026d6:	46bd      	mov	sp, r7
 81026d8:	bd80      	pop	{r7, pc}
 81026da:	bf00      	nop
 81026dc:	58024400 	.word	0x58024400
 81026e0:	58020000 	.word	0x58020000
 81026e4:	58021000 	.word	0x58021000

081026e8 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 81026e8:	b580      	push	{r7, lr}
 81026ea:	b082      	sub	sp, #8
 81026ec:	af00      	add	r7, sp, #0
 81026ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 81026f0:	1d39      	adds	r1, r7, #4
 81026f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81026f6:	2201      	movs	r2, #1
 81026f8:	4803      	ldr	r0, [pc, #12]	; (8102708 <__io_putchar+0x20>)
 81026fa:	f007 fa9f 	bl	8109c3c <HAL_UART_Transmit>
	return ch;
 81026fe:	687b      	ldr	r3, [r7, #4]
}
 8102700:	4618      	mov	r0, r3
 8102702:	3708      	adds	r7, #8
 8102704:	46bd      	mov	sp, r7
 8102706:	bd80      	pop	{r7, pc}
 8102708:	100003c0 	.word	0x100003c0

0810270c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 810270c:	b480      	push	{r7}
 810270e:	b083      	sub	sp, #12
 8102710:	af00      	add	r7, sp, #0
 8102712:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8102714:	687b      	ldr	r3, [r7, #4]
 8102716:	4a06      	ldr	r2, [pc, #24]	; (8102730 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8102718:	4293      	cmp	r3, r2
 810271a:	d103      	bne.n	8102724 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_Tc = 1;
 810271c:	4b05      	ldr	r3, [pc, #20]	; (8102734 <HAL_TIM_PeriodElapsedCallback+0x28>)
 810271e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8102722:	601a      	str	r2, [r3, #0]
	}
}
 8102724:	bf00      	nop
 8102726:	370c      	adds	r7, #12
 8102728:	46bd      	mov	sp, r7
 810272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810272e:	4770      	bx	lr
 8102730:	10000328 	.word	0x10000328
 8102734:	1000049c 	.word	0x1000049c

08102738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102738:	b480      	push	{r7}
 810273a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810273c:	b672      	cpsid	i
}
 810273e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102740:	e7fe      	b.n	8102740 <Error_Handler+0x8>
 8102742:	0000      	movs	r0, r0
 8102744:	0000      	movs	r0, r0
	...

08102748 <matriceT>:
#include "matrice.h"
#include "math.h"
float* matriceT(float u_roll,float u_pitch,float u_yaw){
 8102748:	b5b0      	push	{r4, r5, r7, lr}
 810274a:	b086      	sub	sp, #24
 810274c:	af00      	add	r7, sp, #0
 810274e:	ed87 0a03 	vstr	s0, [r7, #12]
 8102752:	edc7 0a02 	vstr	s1, [r7, #8]
 8102756:	ed87 1a01 	vstr	s2, [r7, #4]
	float *Tout = malloc(sizeof(int)*3);
 810275a:	200c      	movs	r0, #12
 810275c:	f008 fbaa 	bl	810aeb4 <malloc>
 8102760:	4603      	mov	r3, r0
 8102762:	617b      	str	r3, [r7, #20]

	Tout[0] = 0.4304*u_yaw - 0.3133*u_roll;
 8102764:	6878      	ldr	r0, [r7, #4]
 8102766:	f7fd ff77 	bl	8100658 <__aeabi_f2d>
 810276a:	a349      	add	r3, pc, #292	; (adr r3, 8102890 <matriceT+0x148>)
 810276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102770:	f7fd ffca 	bl	8100708 <__aeabi_dmul>
 8102774:	4602      	mov	r2, r0
 8102776:	460b      	mov	r3, r1
 8102778:	4614      	mov	r4, r2
 810277a:	461d      	mov	r5, r3
 810277c:	68f8      	ldr	r0, [r7, #12]
 810277e:	f7fd ff6b 	bl	8100658 <__aeabi_f2d>
 8102782:	a345      	add	r3, pc, #276	; (adr r3, 8102898 <matriceT+0x150>)
 8102784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102788:	f7fd ffbe 	bl	8100708 <__aeabi_dmul>
 810278c:	4602      	mov	r2, r0
 810278e:	460b      	mov	r3, r1
 8102790:	4620      	mov	r0, r4
 8102792:	4629      	mov	r1, r5
 8102794:	f7fd fe00 	bl	8100398 <__aeabi_dsub>
 8102798:	4602      	mov	r2, r0
 810279a:	460b      	mov	r3, r1
 810279c:	4610      	mov	r0, r2
 810279e:	4619      	mov	r1, r3
 81027a0:	f7fe faaa 	bl	8100cf8 <__aeabi_d2f>
 81027a4:	4602      	mov	r2, r0
 81027a6:	697b      	ldr	r3, [r7, #20]
 81027a8:	601a      	str	r2, [r3, #0]
	Tout[1] = 0.1567*u_roll - 0.2714*u_pitch + 0.4304*u_yaw;
 81027aa:	68f8      	ldr	r0, [r7, #12]
 81027ac:	f7fd ff54 	bl	8100658 <__aeabi_f2d>
 81027b0:	a33b      	add	r3, pc, #236	; (adr r3, 81028a0 <matriceT+0x158>)
 81027b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027b6:	f7fd ffa7 	bl	8100708 <__aeabi_dmul>
 81027ba:	4602      	mov	r2, r0
 81027bc:	460b      	mov	r3, r1
 81027be:	4614      	mov	r4, r2
 81027c0:	461d      	mov	r5, r3
 81027c2:	68b8      	ldr	r0, [r7, #8]
 81027c4:	f7fd ff48 	bl	8100658 <__aeabi_f2d>
 81027c8:	a337      	add	r3, pc, #220	; (adr r3, 81028a8 <matriceT+0x160>)
 81027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027ce:	f7fd ff9b 	bl	8100708 <__aeabi_dmul>
 81027d2:	4602      	mov	r2, r0
 81027d4:	460b      	mov	r3, r1
 81027d6:	4620      	mov	r0, r4
 81027d8:	4629      	mov	r1, r5
 81027da:	f7fd fddd 	bl	8100398 <__aeabi_dsub>
 81027de:	4602      	mov	r2, r0
 81027e0:	460b      	mov	r3, r1
 81027e2:	4614      	mov	r4, r2
 81027e4:	461d      	mov	r5, r3
 81027e6:	6878      	ldr	r0, [r7, #4]
 81027e8:	f7fd ff36 	bl	8100658 <__aeabi_f2d>
 81027ec:	a328      	add	r3, pc, #160	; (adr r3, 8102890 <matriceT+0x148>)
 81027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027f2:	f7fd ff89 	bl	8100708 <__aeabi_dmul>
 81027f6:	4602      	mov	r2, r0
 81027f8:	460b      	mov	r3, r1
 81027fa:	4620      	mov	r0, r4
 81027fc:	4629      	mov	r1, r5
 81027fe:	f7fd fdcd 	bl	810039c <__adddf3>
 8102802:	4602      	mov	r2, r0
 8102804:	460b      	mov	r3, r1
 8102806:	4610      	mov	r0, r2
 8102808:	4619      	mov	r1, r3
 810280a:	697b      	ldr	r3, [r7, #20]
 810280c:	1d1c      	adds	r4, r3, #4
 810280e:	f7fe fa73 	bl	8100cf8 <__aeabi_d2f>
 8102812:	4603      	mov	r3, r0
 8102814:	6023      	str	r3, [r4, #0]
	Tout[2] = 0.2714*u_pitch + 0.1567*u_roll + 0.4304*u_yaw;
 8102816:	68b8      	ldr	r0, [r7, #8]
 8102818:	f7fd ff1e 	bl	8100658 <__aeabi_f2d>
 810281c:	a322      	add	r3, pc, #136	; (adr r3, 81028a8 <matriceT+0x160>)
 810281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102822:	f7fd ff71 	bl	8100708 <__aeabi_dmul>
 8102826:	4602      	mov	r2, r0
 8102828:	460b      	mov	r3, r1
 810282a:	4614      	mov	r4, r2
 810282c:	461d      	mov	r5, r3
 810282e:	68f8      	ldr	r0, [r7, #12]
 8102830:	f7fd ff12 	bl	8100658 <__aeabi_f2d>
 8102834:	a31a      	add	r3, pc, #104	; (adr r3, 81028a0 <matriceT+0x158>)
 8102836:	e9d3 2300 	ldrd	r2, r3, [r3]
 810283a:	f7fd ff65 	bl	8100708 <__aeabi_dmul>
 810283e:	4602      	mov	r2, r0
 8102840:	460b      	mov	r3, r1
 8102842:	4620      	mov	r0, r4
 8102844:	4629      	mov	r1, r5
 8102846:	f7fd fda9 	bl	810039c <__adddf3>
 810284a:	4602      	mov	r2, r0
 810284c:	460b      	mov	r3, r1
 810284e:	4614      	mov	r4, r2
 8102850:	461d      	mov	r5, r3
 8102852:	6878      	ldr	r0, [r7, #4]
 8102854:	f7fd ff00 	bl	8100658 <__aeabi_f2d>
 8102858:	a30d      	add	r3, pc, #52	; (adr r3, 8102890 <matriceT+0x148>)
 810285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810285e:	f7fd ff53 	bl	8100708 <__aeabi_dmul>
 8102862:	4602      	mov	r2, r0
 8102864:	460b      	mov	r3, r1
 8102866:	4620      	mov	r0, r4
 8102868:	4629      	mov	r1, r5
 810286a:	f7fd fd97 	bl	810039c <__adddf3>
 810286e:	4602      	mov	r2, r0
 8102870:	460b      	mov	r3, r1
 8102872:	4610      	mov	r0, r2
 8102874:	4619      	mov	r1, r3
 8102876:	697b      	ldr	r3, [r7, #20]
 8102878:	f103 0408 	add.w	r4, r3, #8
 810287c:	f7fe fa3c 	bl	8100cf8 <__aeabi_d2f>
 8102880:	4603      	mov	r3, r0
 8102882:	6023      	str	r3, [r4, #0]

	return Tout;
 8102884:	697b      	ldr	r3, [r7, #20]

}
 8102886:	4618      	mov	r0, r3
 8102888:	3718      	adds	r7, #24
 810288a:	46bd      	mov	sp, r7
 810288c:	bdb0      	pop	{r4, r5, r7, pc}
 810288e:	bf00      	nop
 8102890:	710cb296 	.word	0x710cb296
 8102894:	3fdb8bac 	.word	0x3fdb8bac
 8102898:	71758e22 	.word	0x71758e22
 810289c:	3fd40d1b 	.word	0x3fd40d1b
 81028a0:	dfa43fe6 	.word	0xdfa43fe6
 81028a4:	3fc40ebe 	.word	0x3fc40ebe
 81028a8:	1b089a02 	.word	0x1b089a02
 81028ac:	3fd15e9e 	.word	0x3fd15e9e

081028b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81028b0:	b480      	push	{r7}
 81028b2:	b083      	sub	sp, #12
 81028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81028b6:	4b0a      	ldr	r3, [pc, #40]	; (81028e0 <HAL_MspInit+0x30>)
 81028b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81028bc:	4a08      	ldr	r2, [pc, #32]	; (81028e0 <HAL_MspInit+0x30>)
 81028be:	f043 0302 	orr.w	r3, r3, #2
 81028c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81028c6:	4b06      	ldr	r3, [pc, #24]	; (81028e0 <HAL_MspInit+0x30>)
 81028c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81028cc:	f003 0302 	and.w	r3, r3, #2
 81028d0:	607b      	str	r3, [r7, #4]
 81028d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81028d4:	bf00      	nop
 81028d6:	370c      	adds	r7, #12
 81028d8:	46bd      	mov	sp, r7
 81028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028de:	4770      	bx	lr
 81028e0:	58024400 	.word	0x58024400

081028e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 81028e4:	b580      	push	{r7, lr}
 81028e6:	b0ba      	sub	sp, #232	; 0xe8
 81028e8:	af00      	add	r7, sp, #0
 81028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81028ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81028f0:	2200      	movs	r2, #0
 81028f2:	601a      	str	r2, [r3, #0]
 81028f4:	605a      	str	r2, [r3, #4]
 81028f6:	609a      	str	r2, [r3, #8]
 81028f8:	60da      	str	r2, [r3, #12]
 81028fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81028fc:	f107 0310 	add.w	r3, r7, #16
 8102900:	22c0      	movs	r2, #192	; 0xc0
 8102902:	2100      	movs	r1, #0
 8102904:	4618      	mov	r0, r3
 8102906:	f008 faeb 	bl	810aee0 <memset>
  if(hadc->Instance==ADC1)
 810290a:	687b      	ldr	r3, [r7, #4]
 810290c:	681b      	ldr	r3, [r3, #0]
 810290e:	4a2c      	ldr	r2, [pc, #176]	; (81029c0 <HAL_ADC_MspInit+0xdc>)
 8102910:	4293      	cmp	r3, r2
 8102912:	d150      	bne.n	81029b6 <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8102914:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8102918:	f04f 0300 	mov.w	r3, #0
 810291c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8102920:	2301      	movs	r3, #1
 8102922:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8102924:	2312      	movs	r3, #18
 8102926:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8102928:	2304      	movs	r3, #4
 810292a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 810292c:	2302      	movs	r3, #2
 810292e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8102930:	2302      	movs	r3, #2
 8102932:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8102934:	23c0      	movs	r3, #192	; 0xc0
 8102936:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8102938:	2320      	movs	r3, #32
 810293a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 810293c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8102940:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8102942:	2300      	movs	r3, #0
 8102944:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102948:	f107 0310 	add.w	r3, r7, #16
 810294c:	4618      	mov	r0, r3
 810294e:	f003 f891 	bl	8105a74 <HAL_RCCEx_PeriphCLKConfig>
 8102952:	4603      	mov	r3, r0
 8102954:	2b00      	cmp	r3, #0
 8102956:	d001      	beq.n	810295c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8102958:	f7ff feee 	bl	8102738 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 810295c:	4b19      	ldr	r3, [pc, #100]	; (81029c4 <HAL_ADC_MspInit+0xe0>)
 810295e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102962:	4a18      	ldr	r2, [pc, #96]	; (81029c4 <HAL_ADC_MspInit+0xe0>)
 8102964:	f043 0320 	orr.w	r3, r3, #32
 8102968:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810296c:	4b15      	ldr	r3, [pc, #84]	; (81029c4 <HAL_ADC_MspInit+0xe0>)
 810296e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102972:	f003 0320 	and.w	r3, r3, #32
 8102976:	60fb      	str	r3, [r7, #12]
 8102978:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810297a:	4b12      	ldr	r3, [pc, #72]	; (81029c4 <HAL_ADC_MspInit+0xe0>)
 810297c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102980:	4a10      	ldr	r2, [pc, #64]	; (81029c4 <HAL_ADC_MspInit+0xe0>)
 8102982:	f043 0301 	orr.w	r3, r3, #1
 8102986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810298a:	4b0e      	ldr	r3, [pc, #56]	; (81029c4 <HAL_ADC_MspInit+0xe0>)
 810298c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102990:	f003 0301 	and.w	r3, r3, #1
 8102994:	60bb      	str	r3, [r7, #8]
 8102996:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8102998:	2308      	movs	r3, #8
 810299a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 810299e:	2303      	movs	r3, #3
 81029a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81029a4:	2300      	movs	r3, #0
 81029a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81029aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81029ae:	4619      	mov	r1, r3
 81029b0:	4805      	ldr	r0, [pc, #20]	; (81029c8 <HAL_ADC_MspInit+0xe4>)
 81029b2:	f001 fd5f 	bl	8104474 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 81029b6:	bf00      	nop
 81029b8:	37e8      	adds	r7, #232	; 0xe8
 81029ba:	46bd      	mov	sp, r7
 81029bc:	bd80      	pop	{r7, pc}
 81029be:	bf00      	nop
 81029c0:	40022000 	.word	0x40022000
 81029c4:	58024400 	.word	0x58024400
 81029c8:	58020000 	.word	0x58020000

081029cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 81029cc:	b580      	push	{r7, lr}
 81029ce:	b0ba      	sub	sp, #232	; 0xe8
 81029d0:	af00      	add	r7, sp, #0
 81029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81029d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81029d8:	2200      	movs	r2, #0
 81029da:	601a      	str	r2, [r3, #0]
 81029dc:	605a      	str	r2, [r3, #4]
 81029de:	609a      	str	r2, [r3, #8]
 81029e0:	60da      	str	r2, [r3, #12]
 81029e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81029e4:	f107 0310 	add.w	r3, r7, #16
 81029e8:	22c0      	movs	r2, #192	; 0xc0
 81029ea:	2100      	movs	r1, #0
 81029ec:	4618      	mov	r0, r3
 81029ee:	f008 fa77 	bl	810aee0 <memset>
  if(hi2c->Instance==I2C1)
 81029f2:	687b      	ldr	r3, [r7, #4]
 81029f4:	681b      	ldr	r3, [r3, #0]
 81029f6:	4a26      	ldr	r2, [pc, #152]	; (8102a90 <HAL_I2C_MspInit+0xc4>)
 81029f8:	4293      	cmp	r3, r2
 81029fa:	d145      	bne.n	8102a88 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 81029fc:	f04f 0208 	mov.w	r2, #8
 8102a00:	f04f 0300 	mov.w	r3, #0
 8102a04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102a08:	2300      	movs	r3, #0
 8102a0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102a0e:	f107 0310 	add.w	r3, r7, #16
 8102a12:	4618      	mov	r0, r3
 8102a14:	f003 f82e 	bl	8105a74 <HAL_RCCEx_PeriphCLKConfig>
 8102a18:	4603      	mov	r3, r0
 8102a1a:	2b00      	cmp	r3, #0
 8102a1c:	d001      	beq.n	8102a22 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8102a1e:	f7ff fe8b 	bl	8102738 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102a22:	4b1c      	ldr	r3, [pc, #112]	; (8102a94 <HAL_I2C_MspInit+0xc8>)
 8102a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102a28:	4a1a      	ldr	r2, [pc, #104]	; (8102a94 <HAL_I2C_MspInit+0xc8>)
 8102a2a:	f043 0302 	orr.w	r3, r3, #2
 8102a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102a32:	4b18      	ldr	r3, [pc, #96]	; (8102a94 <HAL_I2C_MspInit+0xc8>)
 8102a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102a38:	f003 0302 	and.w	r3, r3, #2
 8102a3c:	60fb      	str	r3, [r7, #12]
 8102a3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8102a40:	23c0      	movs	r3, #192	; 0xc0
 8102a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102a46:	2312      	movs	r3, #18
 8102a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102a4c:	2300      	movs	r3, #0
 8102a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102a52:	2300      	movs	r3, #0
 8102a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8102a58:	2304      	movs	r3, #4
 8102a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102a5e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102a62:	4619      	mov	r1, r3
 8102a64:	480c      	ldr	r0, [pc, #48]	; (8102a98 <HAL_I2C_MspInit+0xcc>)
 8102a66:	f001 fd05 	bl	8104474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8102a6a:	4b0a      	ldr	r3, [pc, #40]	; (8102a94 <HAL_I2C_MspInit+0xc8>)
 8102a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a70:	4a08      	ldr	r2, [pc, #32]	; (8102a94 <HAL_I2C_MspInit+0xc8>)
 8102a72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102a76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102a7a:	4b06      	ldr	r3, [pc, #24]	; (8102a94 <HAL_I2C_MspInit+0xc8>)
 8102a7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102a84:	60bb      	str	r3, [r7, #8]
 8102a86:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8102a88:	bf00      	nop
 8102a8a:	37e8      	adds	r7, #232	; 0xe8
 8102a8c:	46bd      	mov	sp, r7
 8102a8e:	bd80      	pop	{r7, pc}
 8102a90:	40005400 	.word	0x40005400
 8102a94:	58024400 	.word	0x58024400
 8102a98:	58020400 	.word	0x58020400

08102a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8102a9c:	b580      	push	{r7, lr}
 8102a9e:	b084      	sub	sp, #16
 8102aa0:	af00      	add	r7, sp, #0
 8102aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	4a19      	ldr	r2, [pc, #100]	; (8102b10 <HAL_TIM_Base_MspInit+0x74>)
 8102aaa:	4293      	cmp	r3, r2
 8102aac:	d10f      	bne.n	8102ace <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8102aae:	4b19      	ldr	r3, [pc, #100]	; (8102b14 <HAL_TIM_Base_MspInit+0x78>)
 8102ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102ab4:	4a17      	ldr	r2, [pc, #92]	; (8102b14 <HAL_TIM_Base_MspInit+0x78>)
 8102ab6:	f043 0301 	orr.w	r3, r3, #1
 8102aba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102abe:	4b15      	ldr	r3, [pc, #84]	; (8102b14 <HAL_TIM_Base_MspInit+0x78>)
 8102ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102ac4:	f003 0301 	and.w	r3, r3, #1
 8102ac8:	60fb      	str	r3, [r7, #12]
 8102aca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8102acc:	e01b      	b.n	8102b06 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM2)
 8102ace:	687b      	ldr	r3, [r7, #4]
 8102ad0:	681b      	ldr	r3, [r3, #0]
 8102ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102ad6:	d116      	bne.n	8102b06 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8102ad8:	4b0e      	ldr	r3, [pc, #56]	; (8102b14 <HAL_TIM_Base_MspInit+0x78>)
 8102ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102ade:	4a0d      	ldr	r2, [pc, #52]	; (8102b14 <HAL_TIM_Base_MspInit+0x78>)
 8102ae0:	f043 0301 	orr.w	r3, r3, #1
 8102ae4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102ae8:	4b0a      	ldr	r3, [pc, #40]	; (8102b14 <HAL_TIM_Base_MspInit+0x78>)
 8102aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102aee:	f003 0301 	and.w	r3, r3, #1
 8102af2:	60bb      	str	r3, [r7, #8]
 8102af4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8102af6:	2200      	movs	r2, #0
 8102af8:	2100      	movs	r1, #0
 8102afa:	201c      	movs	r0, #28
 8102afc:	f001 fc71 	bl	81043e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8102b00:	201c      	movs	r0, #28
 8102b02:	f001 fc88 	bl	8104416 <HAL_NVIC_EnableIRQ>
}
 8102b06:	bf00      	nop
 8102b08:	3710      	adds	r7, #16
 8102b0a:	46bd      	mov	sp, r7
 8102b0c:	bd80      	pop	{r7, pc}
 8102b0e:	bf00      	nop
 8102b10:	40010000 	.word	0x40010000
 8102b14:	58024400 	.word	0x58024400

08102b18 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8102b18:	b580      	push	{r7, lr}
 8102b1a:	b08a      	sub	sp, #40	; 0x28
 8102b1c:	af00      	add	r7, sp, #0
 8102b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102b20:	f107 0314 	add.w	r3, r7, #20
 8102b24:	2200      	movs	r2, #0
 8102b26:	601a      	str	r2, [r3, #0]
 8102b28:	605a      	str	r2, [r3, #4]
 8102b2a:	609a      	str	r2, [r3, #8]
 8102b2c:	60da      	str	r2, [r3, #12]
 8102b2e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8102b30:	687b      	ldr	r3, [r7, #4]
 8102b32:	681b      	ldr	r3, [r3, #0]
 8102b34:	4a1a      	ldr	r2, [pc, #104]	; (8102ba0 <HAL_TIM_Encoder_MspInit+0x88>)
 8102b36:	4293      	cmp	r3, r2
 8102b38:	d12e      	bne.n	8102b98 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8102b3a:	4b1a      	ldr	r3, [pc, #104]	; (8102ba4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102b40:	4a18      	ldr	r2, [pc, #96]	; (8102ba4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b42:	f043 0304 	orr.w	r3, r3, #4
 8102b46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102b4a:	4b16      	ldr	r3, [pc, #88]	; (8102ba4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102b50:	f003 0304 	and.w	r3, r3, #4
 8102b54:	613b      	str	r3, [r7, #16]
 8102b56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102b58:	4b12      	ldr	r3, [pc, #72]	; (8102ba4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b5e:	4a11      	ldr	r2, [pc, #68]	; (8102ba4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b60:	f043 0308 	orr.w	r3, r3, #8
 8102b64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b68:	4b0e      	ldr	r3, [pc, #56]	; (8102ba4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b6e:	f003 0308 	and.w	r3, r3, #8
 8102b72:	60fb      	str	r3, [r7, #12]
 8102b74:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8102b76:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8102b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102b7c:	2302      	movs	r3, #2
 8102b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102b80:	2300      	movs	r3, #0
 8102b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102b84:	2300      	movs	r3, #0
 8102b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8102b88:	2302      	movs	r3, #2
 8102b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102b8c:	f107 0314 	add.w	r3, r7, #20
 8102b90:	4619      	mov	r1, r3
 8102b92:	4805      	ldr	r0, [pc, #20]	; (8102ba8 <HAL_TIM_Encoder_MspInit+0x90>)
 8102b94:	f001 fc6e 	bl	8104474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8102b98:	bf00      	nop
 8102b9a:	3728      	adds	r7, #40	; 0x28
 8102b9c:	46bd      	mov	sp, r7
 8102b9e:	bd80      	pop	{r7, pc}
 8102ba0:	40000800 	.word	0x40000800
 8102ba4:	58024400 	.word	0x58024400
 8102ba8:	58020c00 	.word	0x58020c00

08102bac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102bac:	b580      	push	{r7, lr}
 8102bae:	b088      	sub	sp, #32
 8102bb0:	af00      	add	r7, sp, #0
 8102bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102bb4:	f107 030c 	add.w	r3, r7, #12
 8102bb8:	2200      	movs	r2, #0
 8102bba:	601a      	str	r2, [r3, #0]
 8102bbc:	605a      	str	r2, [r3, #4]
 8102bbe:	609a      	str	r2, [r3, #8]
 8102bc0:	60da      	str	r2, [r3, #12]
 8102bc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8102bc4:	687b      	ldr	r3, [r7, #4]
 8102bc6:	681b      	ldr	r3, [r3, #0]
 8102bc8:	4a13      	ldr	r2, [pc, #76]	; (8102c18 <HAL_TIM_MspPostInit+0x6c>)
 8102bca:	4293      	cmp	r3, r2
 8102bcc:	d11f      	bne.n	8102c0e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8102bce:	4b13      	ldr	r3, [pc, #76]	; (8102c1c <HAL_TIM_MspPostInit+0x70>)
 8102bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102bd4:	4a11      	ldr	r2, [pc, #68]	; (8102c1c <HAL_TIM_MspPostInit+0x70>)
 8102bd6:	f043 0310 	orr.w	r3, r3, #16
 8102bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102bde:	4b0f      	ldr	r3, [pc, #60]	; (8102c1c <HAL_TIM_MspPostInit+0x70>)
 8102be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102be4:	f003 0310 	and.w	r3, r3, #16
 8102be8:	60bb      	str	r3, [r7, #8]
 8102bea:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8102bec:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8102bf0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102bf2:	2302      	movs	r3, #2
 8102bf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102bf6:	2300      	movs	r3, #0
 8102bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102bfa:	2300      	movs	r3, #0
 8102bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8102bfe:	2301      	movs	r3, #1
 8102c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8102c02:	f107 030c 	add.w	r3, r7, #12
 8102c06:	4619      	mov	r1, r3
 8102c08:	4805      	ldr	r0, [pc, #20]	; (8102c20 <HAL_TIM_MspPostInit+0x74>)
 8102c0a:	f001 fc33 	bl	8104474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8102c0e:	bf00      	nop
 8102c10:	3720      	adds	r7, #32
 8102c12:	46bd      	mov	sp, r7
 8102c14:	bd80      	pop	{r7, pc}
 8102c16:	bf00      	nop
 8102c18:	40010000 	.word	0x40010000
 8102c1c:	58024400 	.word	0x58024400
 8102c20:	58021000 	.word	0x58021000

08102c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102c24:	b580      	push	{r7, lr}
 8102c26:	b0ba      	sub	sp, #232	; 0xe8
 8102c28:	af00      	add	r7, sp, #0
 8102c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102c2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102c30:	2200      	movs	r2, #0
 8102c32:	601a      	str	r2, [r3, #0]
 8102c34:	605a      	str	r2, [r3, #4]
 8102c36:	609a      	str	r2, [r3, #8]
 8102c38:	60da      	str	r2, [r3, #12]
 8102c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102c3c:	f107 0310 	add.w	r3, r7, #16
 8102c40:	22c0      	movs	r2, #192	; 0xc0
 8102c42:	2100      	movs	r1, #0
 8102c44:	4618      	mov	r0, r3
 8102c46:	f008 f94b 	bl	810aee0 <memset>
  if(huart->Instance==USART3)
 8102c4a:	687b      	ldr	r3, [r7, #4]
 8102c4c:	681b      	ldr	r3, [r3, #0]
 8102c4e:	4a27      	ldr	r2, [pc, #156]	; (8102cec <HAL_UART_MspInit+0xc8>)
 8102c50:	4293      	cmp	r3, r2
 8102c52:	d146      	bne.n	8102ce2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102c54:	f04f 0202 	mov.w	r2, #2
 8102c58:	f04f 0300 	mov.w	r3, #0
 8102c5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102c60:	2300      	movs	r3, #0
 8102c62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102c66:	f107 0310 	add.w	r3, r7, #16
 8102c6a:	4618      	mov	r0, r3
 8102c6c:	f002 ff02 	bl	8105a74 <HAL_RCCEx_PeriphCLKConfig>
 8102c70:	4603      	mov	r3, r0
 8102c72:	2b00      	cmp	r3, #0
 8102c74:	d001      	beq.n	8102c7a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8102c76:	f7ff fd5f 	bl	8102738 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102c7a:	4b1d      	ldr	r3, [pc, #116]	; (8102cf0 <HAL_UART_MspInit+0xcc>)
 8102c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c80:	4a1b      	ldr	r2, [pc, #108]	; (8102cf0 <HAL_UART_MspInit+0xcc>)
 8102c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102c86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102c8a:	4b19      	ldr	r3, [pc, #100]	; (8102cf0 <HAL_UART_MspInit+0xcc>)
 8102c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102c94:	60fb      	str	r3, [r7, #12]
 8102c96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102c98:	4b15      	ldr	r3, [pc, #84]	; (8102cf0 <HAL_UART_MspInit+0xcc>)
 8102c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102c9e:	4a14      	ldr	r2, [pc, #80]	; (8102cf0 <HAL_UART_MspInit+0xcc>)
 8102ca0:	f043 0308 	orr.w	r3, r3, #8
 8102ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102ca8:	4b11      	ldr	r3, [pc, #68]	; (8102cf0 <HAL_UART_MspInit+0xcc>)
 8102caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102cae:	f003 0308 	and.w	r3, r3, #8
 8102cb2:	60bb      	str	r3, [r7, #8]
 8102cb4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8102cb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102cbe:	2302      	movs	r3, #2
 8102cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102cc4:	2300      	movs	r3, #0
 8102cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102cca:	2300      	movs	r3, #0
 8102ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102cd0:	2307      	movs	r3, #7
 8102cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102cd6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102cda:	4619      	mov	r1, r3
 8102cdc:	4805      	ldr	r0, [pc, #20]	; (8102cf4 <HAL_UART_MspInit+0xd0>)
 8102cde:	f001 fbc9 	bl	8104474 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8102ce2:	bf00      	nop
 8102ce4:	37e8      	adds	r7, #232	; 0xe8
 8102ce6:	46bd      	mov	sp, r7
 8102ce8:	bd80      	pop	{r7, pc}
 8102cea:	bf00      	nop
 8102cec:	40004800 	.word	0x40004800
 8102cf0:	58024400 	.word	0x58024400
 8102cf4:	58020c00 	.word	0x58020c00

08102cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102cf8:	b480      	push	{r7}
 8102cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102cfc:	e7fe      	b.n	8102cfc <NMI_Handler+0x4>

08102cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102cfe:	b480      	push	{r7}
 8102d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102d02:	e7fe      	b.n	8102d02 <HardFault_Handler+0x4>

08102d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102d04:	b480      	push	{r7}
 8102d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102d08:	e7fe      	b.n	8102d08 <MemManage_Handler+0x4>

08102d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102d0a:	b480      	push	{r7}
 8102d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102d0e:	e7fe      	b.n	8102d0e <BusFault_Handler+0x4>

08102d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102d10:	b480      	push	{r7}
 8102d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102d14:	e7fe      	b.n	8102d14 <UsageFault_Handler+0x4>

08102d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102d16:	b480      	push	{r7}
 8102d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102d1a:	bf00      	nop
 8102d1c:	46bd      	mov	sp, r7
 8102d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d22:	4770      	bx	lr

08102d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102d24:	b480      	push	{r7}
 8102d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102d28:	bf00      	nop
 8102d2a:	46bd      	mov	sp, r7
 8102d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d30:	4770      	bx	lr

08102d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102d32:	b480      	push	{r7}
 8102d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102d36:	bf00      	nop
 8102d38:	46bd      	mov	sp, r7
 8102d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d3e:	4770      	bx	lr

08102d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102d40:	b580      	push	{r7, lr}
 8102d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102d44:	f000 f990 	bl	8103068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102d48:	bf00      	nop
 8102d4a:	bd80      	pop	{r7, pc}

08102d4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8102d4c:	b580      	push	{r7, lr}
 8102d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8102d50:	4802      	ldr	r0, [pc, #8]	; (8102d5c <TIM2_IRQHandler+0x10>)
 8102d52:	f005 fe73 	bl	8108a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8102d56:	bf00      	nop
 8102d58:	bd80      	pop	{r7, pc}
 8102d5a:	bf00      	nop
 8102d5c:	10000328 	.word	0x10000328

08102d60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102d60:	b480      	push	{r7}
 8102d62:	af00      	add	r7, sp, #0
  return 1;
 8102d64:	2301      	movs	r3, #1
}
 8102d66:	4618      	mov	r0, r3
 8102d68:	46bd      	mov	sp, r7
 8102d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d6e:	4770      	bx	lr

08102d70 <_kill>:

int _kill(int pid, int sig)
{
 8102d70:	b580      	push	{r7, lr}
 8102d72:	b082      	sub	sp, #8
 8102d74:	af00      	add	r7, sp, #0
 8102d76:	6078      	str	r0, [r7, #4]
 8102d78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8102d7a:	f008 f871 	bl	810ae60 <__errno>
 8102d7e:	4603      	mov	r3, r0
 8102d80:	2216      	movs	r2, #22
 8102d82:	601a      	str	r2, [r3, #0]
  return -1;
 8102d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102d88:	4618      	mov	r0, r3
 8102d8a:	3708      	adds	r7, #8
 8102d8c:	46bd      	mov	sp, r7
 8102d8e:	bd80      	pop	{r7, pc}

08102d90 <_exit>:

void _exit (int status)
{
 8102d90:	b580      	push	{r7, lr}
 8102d92:	b082      	sub	sp, #8
 8102d94:	af00      	add	r7, sp, #0
 8102d96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8102d98:	f04f 31ff 	mov.w	r1, #4294967295
 8102d9c:	6878      	ldr	r0, [r7, #4]
 8102d9e:	f7ff ffe7 	bl	8102d70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8102da2:	e7fe      	b.n	8102da2 <_exit+0x12>

08102da4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102da4:	b580      	push	{r7, lr}
 8102da6:	b086      	sub	sp, #24
 8102da8:	af00      	add	r7, sp, #0
 8102daa:	60f8      	str	r0, [r7, #12]
 8102dac:	60b9      	str	r1, [r7, #8]
 8102dae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102db0:	2300      	movs	r3, #0
 8102db2:	617b      	str	r3, [r7, #20]
 8102db4:	e00a      	b.n	8102dcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8102db6:	f3af 8000 	nop.w
 8102dba:	4601      	mov	r1, r0
 8102dbc:	68bb      	ldr	r3, [r7, #8]
 8102dbe:	1c5a      	adds	r2, r3, #1
 8102dc0:	60ba      	str	r2, [r7, #8]
 8102dc2:	b2ca      	uxtb	r2, r1
 8102dc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102dc6:	697b      	ldr	r3, [r7, #20]
 8102dc8:	3301      	adds	r3, #1
 8102dca:	617b      	str	r3, [r7, #20]
 8102dcc:	697a      	ldr	r2, [r7, #20]
 8102dce:	687b      	ldr	r3, [r7, #4]
 8102dd0:	429a      	cmp	r2, r3
 8102dd2:	dbf0      	blt.n	8102db6 <_read+0x12>
  }

  return len;
 8102dd4:	687b      	ldr	r3, [r7, #4]
}
 8102dd6:	4618      	mov	r0, r3
 8102dd8:	3718      	adds	r7, #24
 8102dda:	46bd      	mov	sp, r7
 8102ddc:	bd80      	pop	{r7, pc}

08102dde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8102dde:	b580      	push	{r7, lr}
 8102de0:	b086      	sub	sp, #24
 8102de2:	af00      	add	r7, sp, #0
 8102de4:	60f8      	str	r0, [r7, #12]
 8102de6:	60b9      	str	r1, [r7, #8]
 8102de8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102dea:	2300      	movs	r3, #0
 8102dec:	617b      	str	r3, [r7, #20]
 8102dee:	e009      	b.n	8102e04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8102df0:	68bb      	ldr	r3, [r7, #8]
 8102df2:	1c5a      	adds	r2, r3, #1
 8102df4:	60ba      	str	r2, [r7, #8]
 8102df6:	781b      	ldrb	r3, [r3, #0]
 8102df8:	4618      	mov	r0, r3
 8102dfa:	f7ff fc75 	bl	81026e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102dfe:	697b      	ldr	r3, [r7, #20]
 8102e00:	3301      	adds	r3, #1
 8102e02:	617b      	str	r3, [r7, #20]
 8102e04:	697a      	ldr	r2, [r7, #20]
 8102e06:	687b      	ldr	r3, [r7, #4]
 8102e08:	429a      	cmp	r2, r3
 8102e0a:	dbf1      	blt.n	8102df0 <_write+0x12>
  }
  return len;
 8102e0c:	687b      	ldr	r3, [r7, #4]
}
 8102e0e:	4618      	mov	r0, r3
 8102e10:	3718      	adds	r7, #24
 8102e12:	46bd      	mov	sp, r7
 8102e14:	bd80      	pop	{r7, pc}

08102e16 <_close>:

int _close(int file)
{
 8102e16:	b480      	push	{r7}
 8102e18:	b083      	sub	sp, #12
 8102e1a:	af00      	add	r7, sp, #0
 8102e1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8102e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102e22:	4618      	mov	r0, r3
 8102e24:	370c      	adds	r7, #12
 8102e26:	46bd      	mov	sp, r7
 8102e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e2c:	4770      	bx	lr

08102e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8102e2e:	b480      	push	{r7}
 8102e30:	b083      	sub	sp, #12
 8102e32:	af00      	add	r7, sp, #0
 8102e34:	6078      	str	r0, [r7, #4]
 8102e36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8102e38:	683b      	ldr	r3, [r7, #0]
 8102e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8102e3e:	605a      	str	r2, [r3, #4]
  return 0;
 8102e40:	2300      	movs	r3, #0
}
 8102e42:	4618      	mov	r0, r3
 8102e44:	370c      	adds	r7, #12
 8102e46:	46bd      	mov	sp, r7
 8102e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e4c:	4770      	bx	lr

08102e4e <_isatty>:

int _isatty(int file)
{
 8102e4e:	b480      	push	{r7}
 8102e50:	b083      	sub	sp, #12
 8102e52:	af00      	add	r7, sp, #0
 8102e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8102e56:	2301      	movs	r3, #1
}
 8102e58:	4618      	mov	r0, r3
 8102e5a:	370c      	adds	r7, #12
 8102e5c:	46bd      	mov	sp, r7
 8102e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e62:	4770      	bx	lr

08102e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102e64:	b480      	push	{r7}
 8102e66:	b085      	sub	sp, #20
 8102e68:	af00      	add	r7, sp, #0
 8102e6a:	60f8      	str	r0, [r7, #12]
 8102e6c:	60b9      	str	r1, [r7, #8]
 8102e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8102e70:	2300      	movs	r3, #0
}
 8102e72:	4618      	mov	r0, r3
 8102e74:	3714      	adds	r7, #20
 8102e76:	46bd      	mov	sp, r7
 8102e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e7c:	4770      	bx	lr
	...

08102e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102e80:	b580      	push	{r7, lr}
 8102e82:	b086      	sub	sp, #24
 8102e84:	af00      	add	r7, sp, #0
 8102e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102e88:	4a14      	ldr	r2, [pc, #80]	; (8102edc <_sbrk+0x5c>)
 8102e8a:	4b15      	ldr	r3, [pc, #84]	; (8102ee0 <_sbrk+0x60>)
 8102e8c:	1ad3      	subs	r3, r2, r3
 8102e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102e90:	697b      	ldr	r3, [r7, #20]
 8102e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102e94:	4b13      	ldr	r3, [pc, #76]	; (8102ee4 <_sbrk+0x64>)
 8102e96:	681b      	ldr	r3, [r3, #0]
 8102e98:	2b00      	cmp	r3, #0
 8102e9a:	d102      	bne.n	8102ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102e9c:	4b11      	ldr	r3, [pc, #68]	; (8102ee4 <_sbrk+0x64>)
 8102e9e:	4a12      	ldr	r2, [pc, #72]	; (8102ee8 <_sbrk+0x68>)
 8102ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102ea2:	4b10      	ldr	r3, [pc, #64]	; (8102ee4 <_sbrk+0x64>)
 8102ea4:	681a      	ldr	r2, [r3, #0]
 8102ea6:	687b      	ldr	r3, [r7, #4]
 8102ea8:	4413      	add	r3, r2
 8102eaa:	693a      	ldr	r2, [r7, #16]
 8102eac:	429a      	cmp	r2, r3
 8102eae:	d207      	bcs.n	8102ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102eb0:	f007 ffd6 	bl	810ae60 <__errno>
 8102eb4:	4603      	mov	r3, r0
 8102eb6:	220c      	movs	r2, #12
 8102eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8102eba:	f04f 33ff 	mov.w	r3, #4294967295
 8102ebe:	e009      	b.n	8102ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8102ec0:	4b08      	ldr	r3, [pc, #32]	; (8102ee4 <_sbrk+0x64>)
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8102ec6:	4b07      	ldr	r3, [pc, #28]	; (8102ee4 <_sbrk+0x64>)
 8102ec8:	681a      	ldr	r2, [r3, #0]
 8102eca:	687b      	ldr	r3, [r7, #4]
 8102ecc:	4413      	add	r3, r2
 8102ece:	4a05      	ldr	r2, [pc, #20]	; (8102ee4 <_sbrk+0x64>)
 8102ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8102ed2:	68fb      	ldr	r3, [r7, #12]
}
 8102ed4:	4618      	mov	r0, r3
 8102ed6:	3718      	adds	r7, #24
 8102ed8:	46bd      	mov	sp, r7
 8102eda:	bd80      	pop	{r7, pc}
 8102edc:	10048000 	.word	0x10048000
 8102ee0:	00000400 	.word	0x00000400
 8102ee4:	100004a0 	.word	0x100004a0
 8102ee8:	100004b8 	.word	0x100004b8

08102eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102f24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102ef0:	f7fe f90a 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102ef4:	480c      	ldr	r0, [pc, #48]	; (8102f28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102ef6:	490d      	ldr	r1, [pc, #52]	; (8102f2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102ef8:	4a0d      	ldr	r2, [pc, #52]	; (8102f30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102efc:	e002      	b.n	8102f04 <LoopCopyDataInit>

08102efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102f02:	3304      	adds	r3, #4

08102f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102f08:	d3f9      	bcc.n	8102efe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102f0a:	4a0a      	ldr	r2, [pc, #40]	; (8102f34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102f0c:	4c0a      	ldr	r4, [pc, #40]	; (8102f38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102f10:	e001      	b.n	8102f16 <LoopFillZerobss>

08102f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102f14:	3204      	adds	r2, #4

08102f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102f18:	d3fb      	bcc.n	8102f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102f1a:	f007 ffa7 	bl	810ae6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102f1e:	f7fe ff79 	bl	8101e14 <main>
  bx  lr
 8102f22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102f24:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102f28:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102f2c:	100001f4 	.word	0x100001f4
  ldr r2, =_sidata
 8102f30:	08110024 	.word	0x08110024
  ldr r2, =_sbss
 8102f34:	100001f4 	.word	0x100001f4
  ldr r4, =_ebss
 8102f38:	100004b8 	.word	0x100004b8

08102f3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102f3c:	e7fe      	b.n	8102f3c <ADC3_IRQHandler>
	...

08102f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102f40:	b580      	push	{r7, lr}
 8102f42:	b082      	sub	sp, #8
 8102f44:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102f46:	4b28      	ldr	r3, [pc, #160]	; (8102fe8 <HAL_Init+0xa8>)
 8102f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102f4c:	4a26      	ldr	r2, [pc, #152]	; (8102fe8 <HAL_Init+0xa8>)
 8102f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102f52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102f56:	4b24      	ldr	r3, [pc, #144]	; (8102fe8 <HAL_Init+0xa8>)
 8102f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102f60:	603b      	str	r3, [r7, #0]
 8102f62:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102f64:	4b21      	ldr	r3, [pc, #132]	; (8102fec <HAL_Init+0xac>)
 8102f66:	681b      	ldr	r3, [r3, #0]
 8102f68:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102f6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102f70:	4a1e      	ldr	r2, [pc, #120]	; (8102fec <HAL_Init+0xac>)
 8102f72:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102f76:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102f78:	4b1c      	ldr	r3, [pc, #112]	; (8102fec <HAL_Init+0xac>)
 8102f7a:	681b      	ldr	r3, [r3, #0]
 8102f7c:	4a1b      	ldr	r2, [pc, #108]	; (8102fec <HAL_Init+0xac>)
 8102f7e:	f043 0301 	orr.w	r3, r3, #1
 8102f82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102f84:	2003      	movs	r0, #3
 8102f86:	f001 fa21 	bl	81043cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102f8a:	f002 fb9b 	bl	81056c4 <HAL_RCC_GetSysClockFreq>
 8102f8e:	4602      	mov	r2, r0
 8102f90:	4b15      	ldr	r3, [pc, #84]	; (8102fe8 <HAL_Init+0xa8>)
 8102f92:	699b      	ldr	r3, [r3, #24]
 8102f94:	0a1b      	lsrs	r3, r3, #8
 8102f96:	f003 030f 	and.w	r3, r3, #15
 8102f9a:	4915      	ldr	r1, [pc, #84]	; (8102ff0 <HAL_Init+0xb0>)
 8102f9c:	5ccb      	ldrb	r3, [r1, r3]
 8102f9e:	f003 031f 	and.w	r3, r3, #31
 8102fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8102fa6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102fa8:	4b0f      	ldr	r3, [pc, #60]	; (8102fe8 <HAL_Init+0xa8>)
 8102faa:	699b      	ldr	r3, [r3, #24]
 8102fac:	f003 030f 	and.w	r3, r3, #15
 8102fb0:	4a0f      	ldr	r2, [pc, #60]	; (8102ff0 <HAL_Init+0xb0>)
 8102fb2:	5cd3      	ldrb	r3, [r2, r3]
 8102fb4:	f003 031f 	and.w	r3, r3, #31
 8102fb8:	687a      	ldr	r2, [r7, #4]
 8102fba:	fa22 f303 	lsr.w	r3, r2, r3
 8102fbe:	4a0d      	ldr	r2, [pc, #52]	; (8102ff4 <HAL_Init+0xb4>)
 8102fc0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102fc2:	4b0c      	ldr	r3, [pc, #48]	; (8102ff4 <HAL_Init+0xb4>)
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	4a0c      	ldr	r2, [pc, #48]	; (8102ff8 <HAL_Init+0xb8>)
 8102fc8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102fca:	2000      	movs	r0, #0
 8102fcc:	f000 f816 	bl	8102ffc <HAL_InitTick>
 8102fd0:	4603      	mov	r3, r0
 8102fd2:	2b00      	cmp	r3, #0
 8102fd4:	d001      	beq.n	8102fda <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102fd6:	2301      	movs	r3, #1
 8102fd8:	e002      	b.n	8102fe0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102fda:	f7ff fc69 	bl	81028b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102fde:	2300      	movs	r3, #0
}
 8102fe0:	4618      	mov	r0, r3
 8102fe2:	3708      	adds	r7, #8
 8102fe4:	46bd      	mov	sp, r7
 8102fe6:	bd80      	pop	{r7, pc}
 8102fe8:	58024400 	.word	0x58024400
 8102fec:	40024400 	.word	0x40024400
 8102ff0:	0810fb2c 	.word	0x0810fb2c
 8102ff4:	10000004 	.word	0x10000004
 8102ff8:	10000000 	.word	0x10000000

08102ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102ffc:	b580      	push	{r7, lr}
 8102ffe:	b082      	sub	sp, #8
 8103000:	af00      	add	r7, sp, #0
 8103002:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8103004:	4b15      	ldr	r3, [pc, #84]	; (810305c <HAL_InitTick+0x60>)
 8103006:	781b      	ldrb	r3, [r3, #0]
 8103008:	2b00      	cmp	r3, #0
 810300a:	d101      	bne.n	8103010 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 810300c:	2301      	movs	r3, #1
 810300e:	e021      	b.n	8103054 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8103010:	4b13      	ldr	r3, [pc, #76]	; (8103060 <HAL_InitTick+0x64>)
 8103012:	681a      	ldr	r2, [r3, #0]
 8103014:	4b11      	ldr	r3, [pc, #68]	; (810305c <HAL_InitTick+0x60>)
 8103016:	781b      	ldrb	r3, [r3, #0]
 8103018:	4619      	mov	r1, r3
 810301a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810301e:	fbb3 f3f1 	udiv	r3, r3, r1
 8103022:	fbb2 f3f3 	udiv	r3, r2, r3
 8103026:	4618      	mov	r0, r3
 8103028:	f001 fa03 	bl	8104432 <HAL_SYSTICK_Config>
 810302c:	4603      	mov	r3, r0
 810302e:	2b00      	cmp	r3, #0
 8103030:	d001      	beq.n	8103036 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103032:	2301      	movs	r3, #1
 8103034:	e00e      	b.n	8103054 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103036:	687b      	ldr	r3, [r7, #4]
 8103038:	2b0f      	cmp	r3, #15
 810303a:	d80a      	bhi.n	8103052 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810303c:	2200      	movs	r2, #0
 810303e:	6879      	ldr	r1, [r7, #4]
 8103040:	f04f 30ff 	mov.w	r0, #4294967295
 8103044:	f001 f9cd 	bl	81043e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103048:	4a06      	ldr	r2, [pc, #24]	; (8103064 <HAL_InitTick+0x68>)
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810304e:	2300      	movs	r3, #0
 8103050:	e000      	b.n	8103054 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8103052:	2301      	movs	r3, #1
}
 8103054:	4618      	mov	r0, r3
 8103056:	3708      	adds	r7, #8
 8103058:	46bd      	mov	sp, r7
 810305a:	bd80      	pop	{r7, pc}
 810305c:	1000001c 	.word	0x1000001c
 8103060:	10000000 	.word	0x10000000
 8103064:	10000018 	.word	0x10000018

08103068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103068:	b480      	push	{r7}
 810306a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810306c:	4b06      	ldr	r3, [pc, #24]	; (8103088 <HAL_IncTick+0x20>)
 810306e:	781b      	ldrb	r3, [r3, #0]
 8103070:	461a      	mov	r2, r3
 8103072:	4b06      	ldr	r3, [pc, #24]	; (810308c <HAL_IncTick+0x24>)
 8103074:	681b      	ldr	r3, [r3, #0]
 8103076:	4413      	add	r3, r2
 8103078:	4a04      	ldr	r2, [pc, #16]	; (810308c <HAL_IncTick+0x24>)
 810307a:	6013      	str	r3, [r2, #0]
}
 810307c:	bf00      	nop
 810307e:	46bd      	mov	sp, r7
 8103080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103084:	4770      	bx	lr
 8103086:	bf00      	nop
 8103088:	1000001c 	.word	0x1000001c
 810308c:	100004a4 	.word	0x100004a4

08103090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8103090:	b480      	push	{r7}
 8103092:	af00      	add	r7, sp, #0
  return uwTick;
 8103094:	4b03      	ldr	r3, [pc, #12]	; (81030a4 <HAL_GetTick+0x14>)
 8103096:	681b      	ldr	r3, [r3, #0]
}
 8103098:	4618      	mov	r0, r3
 810309a:	46bd      	mov	sp, r7
 810309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030a0:	4770      	bx	lr
 81030a2:	bf00      	nop
 81030a4:	100004a4 	.word	0x100004a4

081030a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81030a8:	b580      	push	{r7, lr}
 81030aa:	b084      	sub	sp, #16
 81030ac:	af00      	add	r7, sp, #0
 81030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81030b0:	f7ff ffee 	bl	8103090 <HAL_GetTick>
 81030b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81030ba:	68fb      	ldr	r3, [r7, #12]
 81030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81030c0:	d005      	beq.n	81030ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81030c2:	4b0a      	ldr	r3, [pc, #40]	; (81030ec <HAL_Delay+0x44>)
 81030c4:	781b      	ldrb	r3, [r3, #0]
 81030c6:	461a      	mov	r2, r3
 81030c8:	68fb      	ldr	r3, [r7, #12]
 81030ca:	4413      	add	r3, r2
 81030cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81030ce:	bf00      	nop
 81030d0:	f7ff ffde 	bl	8103090 <HAL_GetTick>
 81030d4:	4602      	mov	r2, r0
 81030d6:	68bb      	ldr	r3, [r7, #8]
 81030d8:	1ad3      	subs	r3, r2, r3
 81030da:	68fa      	ldr	r2, [r7, #12]
 81030dc:	429a      	cmp	r2, r3
 81030de:	d8f7      	bhi.n	81030d0 <HAL_Delay+0x28>
  {
  }
}
 81030e0:	bf00      	nop
 81030e2:	bf00      	nop
 81030e4:	3710      	adds	r7, #16
 81030e6:	46bd      	mov	sp, r7
 81030e8:	bd80      	pop	{r7, pc}
 81030ea:	bf00      	nop
 81030ec:	1000001c 	.word	0x1000001c

081030f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81030f0:	b480      	push	{r7}
 81030f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81030f4:	4b03      	ldr	r3, [pc, #12]	; (8103104 <HAL_GetREVID+0x14>)
 81030f6:	681b      	ldr	r3, [r3, #0]
 81030f8:	0c1b      	lsrs	r3, r3, #16
}
 81030fa:	4618      	mov	r0, r3
 81030fc:	46bd      	mov	sp, r7
 81030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103102:	4770      	bx	lr
 8103104:	5c001000 	.word	0x5c001000

08103108 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8103108:	b480      	push	{r7}
 810310a:	b083      	sub	sp, #12
 810310c:	af00      	add	r7, sp, #0
 810310e:	6078      	str	r0, [r7, #4]
 8103110:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	689b      	ldr	r3, [r3, #8]
 8103116:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 810311a:	683b      	ldr	r3, [r7, #0]
 810311c:	431a      	orrs	r2, r3
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	609a      	str	r2, [r3, #8]
}
 8103122:	bf00      	nop
 8103124:	370c      	adds	r7, #12
 8103126:	46bd      	mov	sp, r7
 8103128:	f85d 7b04 	ldr.w	r7, [sp], #4
 810312c:	4770      	bx	lr

0810312e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 810312e:	b480      	push	{r7}
 8103130:	b083      	sub	sp, #12
 8103132:	af00      	add	r7, sp, #0
 8103134:	6078      	str	r0, [r7, #4]
 8103136:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	689b      	ldr	r3, [r3, #8]
 810313c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8103140:	683b      	ldr	r3, [r7, #0]
 8103142:	431a      	orrs	r2, r3
 8103144:	687b      	ldr	r3, [r7, #4]
 8103146:	609a      	str	r2, [r3, #8]
}
 8103148:	bf00      	nop
 810314a:	370c      	adds	r7, #12
 810314c:	46bd      	mov	sp, r7
 810314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103152:	4770      	bx	lr

08103154 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103154:	b480      	push	{r7}
 8103156:	b083      	sub	sp, #12
 8103158:	af00      	add	r7, sp, #0
 810315a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	689b      	ldr	r3, [r3, #8]
 8103160:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8103164:	4618      	mov	r0, r3
 8103166:	370c      	adds	r7, #12
 8103168:	46bd      	mov	sp, r7
 810316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810316e:	4770      	bx	lr

08103170 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8103170:	b480      	push	{r7}
 8103172:	b087      	sub	sp, #28
 8103174:	af00      	add	r7, sp, #0
 8103176:	60f8      	str	r0, [r7, #12]
 8103178:	60b9      	str	r1, [r7, #8]
 810317a:	607a      	str	r2, [r7, #4]
 810317c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810317e:	68fb      	ldr	r3, [r7, #12]
 8103180:	3360      	adds	r3, #96	; 0x60
 8103182:	461a      	mov	r2, r3
 8103184:	68bb      	ldr	r3, [r7, #8]
 8103186:	009b      	lsls	r3, r3, #2
 8103188:	4413      	add	r3, r2
 810318a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 810318c:	697b      	ldr	r3, [r7, #20]
 810318e:	681b      	ldr	r3, [r3, #0]
 8103190:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8103194:	687b      	ldr	r3, [r7, #4]
 8103196:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 810319a:	683b      	ldr	r3, [r7, #0]
 810319c:	430b      	orrs	r3, r1
 810319e:	431a      	orrs	r2, r3
 81031a0:	697b      	ldr	r3, [r7, #20]
 81031a2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 81031a4:	bf00      	nop
 81031a6:	371c      	adds	r7, #28
 81031a8:	46bd      	mov	sp, r7
 81031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031ae:	4770      	bx	lr

081031b0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 81031b0:	b480      	push	{r7}
 81031b2:	b085      	sub	sp, #20
 81031b4:	af00      	add	r7, sp, #0
 81031b6:	60f8      	str	r0, [r7, #12]
 81031b8:	60b9      	str	r1, [r7, #8]
 81031ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 81031bc:	68fb      	ldr	r3, [r7, #12]
 81031be:	691b      	ldr	r3, [r3, #16]
 81031c0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 81031c4:	68bb      	ldr	r3, [r7, #8]
 81031c6:	f003 031f 	and.w	r3, r3, #31
 81031ca:	6879      	ldr	r1, [r7, #4]
 81031cc:	fa01 f303 	lsl.w	r3, r1, r3
 81031d0:	431a      	orrs	r2, r3
 81031d2:	68fb      	ldr	r3, [r7, #12]
 81031d4:	611a      	str	r2, [r3, #16]
}
 81031d6:	bf00      	nop
 81031d8:	3714      	adds	r7, #20
 81031da:	46bd      	mov	sp, r7
 81031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031e0:	4770      	bx	lr

081031e2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 81031e2:	b480      	push	{r7}
 81031e4:	b087      	sub	sp, #28
 81031e6:	af00      	add	r7, sp, #0
 81031e8:	60f8      	str	r0, [r7, #12]
 81031ea:	60b9      	str	r1, [r7, #8]
 81031ec:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81031ee:	68fb      	ldr	r3, [r7, #12]
 81031f0:	3360      	adds	r3, #96	; 0x60
 81031f2:	461a      	mov	r2, r3
 81031f4:	68bb      	ldr	r3, [r7, #8]
 81031f6:	009b      	lsls	r3, r3, #2
 81031f8:	4413      	add	r3, r2
 81031fa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81031fc:	697b      	ldr	r3, [r7, #20]
 81031fe:	681b      	ldr	r3, [r3, #0]
 8103200:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	431a      	orrs	r2, r3
 8103208:	697b      	ldr	r3, [r7, #20]
 810320a:	601a      	str	r2, [r3, #0]
  }
}
 810320c:	bf00      	nop
 810320e:	371c      	adds	r7, #28
 8103210:	46bd      	mov	sp, r7
 8103212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103216:	4770      	bx	lr

08103218 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8103218:	b480      	push	{r7}
 810321a:	b087      	sub	sp, #28
 810321c:	af00      	add	r7, sp, #0
 810321e:	60f8      	str	r0, [r7, #12]
 8103220:	60b9      	str	r1, [r7, #8]
 8103222:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8103224:	68fb      	ldr	r3, [r7, #12]
 8103226:	3330      	adds	r3, #48	; 0x30
 8103228:	461a      	mov	r2, r3
 810322a:	68bb      	ldr	r3, [r7, #8]
 810322c:	0a1b      	lsrs	r3, r3, #8
 810322e:	009b      	lsls	r3, r3, #2
 8103230:	f003 030c 	and.w	r3, r3, #12
 8103234:	4413      	add	r3, r2
 8103236:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8103238:	697b      	ldr	r3, [r7, #20]
 810323a:	681a      	ldr	r2, [r3, #0]
 810323c:	68bb      	ldr	r3, [r7, #8]
 810323e:	f003 031f 	and.w	r3, r3, #31
 8103242:	211f      	movs	r1, #31
 8103244:	fa01 f303 	lsl.w	r3, r1, r3
 8103248:	43db      	mvns	r3, r3
 810324a:	401a      	ands	r2, r3
 810324c:	687b      	ldr	r3, [r7, #4]
 810324e:	0e9b      	lsrs	r3, r3, #26
 8103250:	f003 011f 	and.w	r1, r3, #31
 8103254:	68bb      	ldr	r3, [r7, #8]
 8103256:	f003 031f 	and.w	r3, r3, #31
 810325a:	fa01 f303 	lsl.w	r3, r1, r3
 810325e:	431a      	orrs	r2, r3
 8103260:	697b      	ldr	r3, [r7, #20]
 8103262:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8103264:	bf00      	nop
 8103266:	371c      	adds	r7, #28
 8103268:	46bd      	mov	sp, r7
 810326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810326e:	4770      	bx	lr

08103270 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8103270:	b480      	push	{r7}
 8103272:	b087      	sub	sp, #28
 8103274:	af00      	add	r7, sp, #0
 8103276:	60f8      	str	r0, [r7, #12]
 8103278:	60b9      	str	r1, [r7, #8]
 810327a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 810327c:	68fb      	ldr	r3, [r7, #12]
 810327e:	3314      	adds	r3, #20
 8103280:	461a      	mov	r2, r3
 8103282:	68bb      	ldr	r3, [r7, #8]
 8103284:	0e5b      	lsrs	r3, r3, #25
 8103286:	009b      	lsls	r3, r3, #2
 8103288:	f003 0304 	and.w	r3, r3, #4
 810328c:	4413      	add	r3, r2
 810328e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8103290:	697b      	ldr	r3, [r7, #20]
 8103292:	681a      	ldr	r2, [r3, #0]
 8103294:	68bb      	ldr	r3, [r7, #8]
 8103296:	0d1b      	lsrs	r3, r3, #20
 8103298:	f003 031f 	and.w	r3, r3, #31
 810329c:	2107      	movs	r1, #7
 810329e:	fa01 f303 	lsl.w	r3, r1, r3
 81032a2:	43db      	mvns	r3, r3
 81032a4:	401a      	ands	r2, r3
 81032a6:	68bb      	ldr	r3, [r7, #8]
 81032a8:	0d1b      	lsrs	r3, r3, #20
 81032aa:	f003 031f 	and.w	r3, r3, #31
 81032ae:	6879      	ldr	r1, [r7, #4]
 81032b0:	fa01 f303 	lsl.w	r3, r1, r3
 81032b4:	431a      	orrs	r2, r3
 81032b6:	697b      	ldr	r3, [r7, #20]
 81032b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 81032ba:	bf00      	nop
 81032bc:	371c      	adds	r7, #28
 81032be:	46bd      	mov	sp, r7
 81032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032c4:	4770      	bx	lr
	...

081032c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81032c8:	b480      	push	{r7}
 81032ca:	b085      	sub	sp, #20
 81032cc:	af00      	add	r7, sp, #0
 81032ce:	60f8      	str	r0, [r7, #12]
 81032d0:	60b9      	str	r1, [r7, #8]
 81032d2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81032d4:	68fb      	ldr	r3, [r7, #12]
 81032d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 81032da:	68bb      	ldr	r3, [r7, #8]
 81032dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81032e0:	43db      	mvns	r3, r3
 81032e2:	401a      	ands	r2, r3
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	f003 0318 	and.w	r3, r3, #24
 81032ea:	4908      	ldr	r1, [pc, #32]	; (810330c <LL_ADC_SetChannelSingleDiff+0x44>)
 81032ec:	40d9      	lsrs	r1, r3
 81032ee:	68bb      	ldr	r3, [r7, #8]
 81032f0:	400b      	ands	r3, r1
 81032f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81032f6:	431a      	orrs	r2, r3
 81032f8:	68fb      	ldr	r3, [r7, #12]
 81032fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 81032fe:	bf00      	nop
 8103300:	3714      	adds	r7, #20
 8103302:	46bd      	mov	sp, r7
 8103304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103308:	4770      	bx	lr
 810330a:	bf00      	nop
 810330c:	000fffff 	.word	0x000fffff

08103310 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8103310:	b480      	push	{r7}
 8103312:	b083      	sub	sp, #12
 8103314:	af00      	add	r7, sp, #0
 8103316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	689b      	ldr	r3, [r3, #8]
 810331c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8103320:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8103324:	687a      	ldr	r2, [r7, #4]
 8103326:	6093      	str	r3, [r2, #8]
}
 8103328:	bf00      	nop
 810332a:	370c      	adds	r7, #12
 810332c:	46bd      	mov	sp, r7
 810332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103332:	4770      	bx	lr

08103334 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8103334:	b480      	push	{r7}
 8103336:	b083      	sub	sp, #12
 8103338:	af00      	add	r7, sp, #0
 810333a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	689b      	ldr	r3, [r3, #8]
 8103340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103348:	d101      	bne.n	810334e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 810334a:	2301      	movs	r3, #1
 810334c:	e000      	b.n	8103350 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 810334e:	2300      	movs	r3, #0
}
 8103350:	4618      	mov	r0, r3
 8103352:	370c      	adds	r7, #12
 8103354:	46bd      	mov	sp, r7
 8103356:	f85d 7b04 	ldr.w	r7, [sp], #4
 810335a:	4770      	bx	lr

0810335c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 810335c:	b480      	push	{r7}
 810335e:	b083      	sub	sp, #12
 8103360:	af00      	add	r7, sp, #0
 8103362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	689b      	ldr	r3, [r3, #8]
 8103368:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 810336c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8103370:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8103374:	687b      	ldr	r3, [r7, #4]
 8103376:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8103378:	bf00      	nop
 810337a:	370c      	adds	r7, #12
 810337c:	46bd      	mov	sp, r7
 810337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103382:	4770      	bx	lr

08103384 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8103384:	b480      	push	{r7}
 8103386:	b083      	sub	sp, #12
 8103388:	af00      	add	r7, sp, #0
 810338a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 810338c:	687b      	ldr	r3, [r7, #4]
 810338e:	689b      	ldr	r3, [r3, #8]
 8103390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103398:	d101      	bne.n	810339e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 810339a:	2301      	movs	r3, #1
 810339c:	e000      	b.n	81033a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 810339e:	2300      	movs	r3, #0
}
 81033a0:	4618      	mov	r0, r3
 81033a2:	370c      	adds	r7, #12
 81033a4:	46bd      	mov	sp, r7
 81033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033aa:	4770      	bx	lr

081033ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 81033ac:	b480      	push	{r7}
 81033ae:	b083      	sub	sp, #12
 81033b0:	af00      	add	r7, sp, #0
 81033b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81033b4:	687b      	ldr	r3, [r7, #4]
 81033b6:	689b      	ldr	r3, [r3, #8]
 81033b8:	f003 0301 	and.w	r3, r3, #1
 81033bc:	2b01      	cmp	r3, #1
 81033be:	d101      	bne.n	81033c4 <LL_ADC_IsEnabled+0x18>
 81033c0:	2301      	movs	r3, #1
 81033c2:	e000      	b.n	81033c6 <LL_ADC_IsEnabled+0x1a>
 81033c4:	2300      	movs	r3, #0
}
 81033c6:	4618      	mov	r0, r3
 81033c8:	370c      	adds	r7, #12
 81033ca:	46bd      	mov	sp, r7
 81033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033d0:	4770      	bx	lr

081033d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81033d2:	b480      	push	{r7}
 81033d4:	b083      	sub	sp, #12
 81033d6:	af00      	add	r7, sp, #0
 81033d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81033da:	687b      	ldr	r3, [r7, #4]
 81033dc:	689b      	ldr	r3, [r3, #8]
 81033de:	f003 0304 	and.w	r3, r3, #4
 81033e2:	2b04      	cmp	r3, #4
 81033e4:	d101      	bne.n	81033ea <LL_ADC_REG_IsConversionOngoing+0x18>
 81033e6:	2301      	movs	r3, #1
 81033e8:	e000      	b.n	81033ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 81033ea:	2300      	movs	r3, #0
}
 81033ec:	4618      	mov	r0, r3
 81033ee:	370c      	adds	r7, #12
 81033f0:	46bd      	mov	sp, r7
 81033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033f6:	4770      	bx	lr

081033f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81033f8:	b480      	push	{r7}
 81033fa:	b083      	sub	sp, #12
 81033fc:	af00      	add	r7, sp, #0
 81033fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	689b      	ldr	r3, [r3, #8]
 8103404:	f003 0308 	and.w	r3, r3, #8
 8103408:	2b08      	cmp	r3, #8
 810340a:	d101      	bne.n	8103410 <LL_ADC_INJ_IsConversionOngoing+0x18>
 810340c:	2301      	movs	r3, #1
 810340e:	e000      	b.n	8103412 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8103410:	2300      	movs	r3, #0
}
 8103412:	4618      	mov	r0, r3
 8103414:	370c      	adds	r7, #12
 8103416:	46bd      	mov	sp, r7
 8103418:	f85d 7b04 	ldr.w	r7, [sp], #4
 810341c:	4770      	bx	lr
	...

08103420 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8103420:	b590      	push	{r4, r7, lr}
 8103422:	b089      	sub	sp, #36	; 0x24
 8103424:	af00      	add	r7, sp, #0
 8103426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103428:	2300      	movs	r3, #0
 810342a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 810342c:	2300      	movs	r3, #0
 810342e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8103430:	687b      	ldr	r3, [r7, #4]
 8103432:	2b00      	cmp	r3, #0
 8103434:	d101      	bne.n	810343a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8103436:	2301      	movs	r3, #1
 8103438:	e18f      	b.n	810375a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	68db      	ldr	r3, [r3, #12]
 810343e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8103440:	687b      	ldr	r3, [r7, #4]
 8103442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103444:	2b00      	cmp	r3, #0
 8103446:	d109      	bne.n	810345c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8103448:	6878      	ldr	r0, [r7, #4]
 810344a:	f7ff fa4b 	bl	81028e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 810344e:	687b      	ldr	r3, [r7, #4]
 8103450:	2200      	movs	r2, #0
 8103452:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8103454:	687b      	ldr	r3, [r7, #4]
 8103456:	2200      	movs	r2, #0
 8103458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 810345c:	687b      	ldr	r3, [r7, #4]
 810345e:	681b      	ldr	r3, [r3, #0]
 8103460:	4618      	mov	r0, r3
 8103462:	f7ff ff67 	bl	8103334 <LL_ADC_IsDeepPowerDownEnabled>
 8103466:	4603      	mov	r3, r0
 8103468:	2b00      	cmp	r3, #0
 810346a:	d004      	beq.n	8103476 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	681b      	ldr	r3, [r3, #0]
 8103470:	4618      	mov	r0, r3
 8103472:	f7ff ff4d 	bl	8103310 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8103476:	687b      	ldr	r3, [r7, #4]
 8103478:	681b      	ldr	r3, [r3, #0]
 810347a:	4618      	mov	r0, r3
 810347c:	f7ff ff82 	bl	8103384 <LL_ADC_IsInternalRegulatorEnabled>
 8103480:	4603      	mov	r3, r0
 8103482:	2b00      	cmp	r3, #0
 8103484:	d114      	bne.n	81034b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8103486:	687b      	ldr	r3, [r7, #4]
 8103488:	681b      	ldr	r3, [r3, #0]
 810348a:	4618      	mov	r0, r3
 810348c:	f7ff ff66 	bl	810335c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103490:	4b88      	ldr	r3, [pc, #544]	; (81036b4 <HAL_ADC_Init+0x294>)
 8103492:	681b      	ldr	r3, [r3, #0]
 8103494:	099b      	lsrs	r3, r3, #6
 8103496:	4a88      	ldr	r2, [pc, #544]	; (81036b8 <HAL_ADC_Init+0x298>)
 8103498:	fba2 2303 	umull	r2, r3, r2, r3
 810349c:	099b      	lsrs	r3, r3, #6
 810349e:	3301      	adds	r3, #1
 81034a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81034a2:	e002      	b.n	81034aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 81034a4:	68bb      	ldr	r3, [r7, #8]
 81034a6:	3b01      	subs	r3, #1
 81034a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81034aa:	68bb      	ldr	r3, [r7, #8]
 81034ac:	2b00      	cmp	r3, #0
 81034ae:	d1f9      	bne.n	81034a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81034b0:	687b      	ldr	r3, [r7, #4]
 81034b2:	681b      	ldr	r3, [r3, #0]
 81034b4:	4618      	mov	r0, r3
 81034b6:	f7ff ff65 	bl	8103384 <LL_ADC_IsInternalRegulatorEnabled>
 81034ba:	4603      	mov	r3, r0
 81034bc:	2b00      	cmp	r3, #0
 81034be:	d10d      	bne.n	81034dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81034c0:	687b      	ldr	r3, [r7, #4]
 81034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034c4:	f043 0210 	orr.w	r2, r3, #16
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81034cc:	687b      	ldr	r3, [r7, #4]
 81034ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034d0:	f043 0201 	orr.w	r2, r3, #1
 81034d4:	687b      	ldr	r3, [r7, #4]
 81034d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 81034d8:	2301      	movs	r3, #1
 81034da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81034dc:	687b      	ldr	r3, [r7, #4]
 81034de:	681b      	ldr	r3, [r3, #0]
 81034e0:	4618      	mov	r0, r3
 81034e2:	f7ff ff76 	bl	81033d2 <LL_ADC_REG_IsConversionOngoing>
 81034e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034ec:	f003 0310 	and.w	r3, r3, #16
 81034f0:	2b00      	cmp	r3, #0
 81034f2:	f040 8129 	bne.w	8103748 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81034f6:	697b      	ldr	r3, [r7, #20]
 81034f8:	2b00      	cmp	r3, #0
 81034fa:	f040 8125 	bne.w	8103748 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103502:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8103506:	f043 0202 	orr.w	r2, r3, #2
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	681b      	ldr	r3, [r3, #0]
 8103512:	4618      	mov	r0, r3
 8103514:	f7ff ff4a 	bl	81033ac <LL_ADC_IsEnabled>
 8103518:	4603      	mov	r3, r0
 810351a:	2b00      	cmp	r3, #0
 810351c:	d136      	bne.n	810358c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	681b      	ldr	r3, [r3, #0]
 8103522:	4a66      	ldr	r2, [pc, #408]	; (81036bc <HAL_ADC_Init+0x29c>)
 8103524:	4293      	cmp	r3, r2
 8103526:	d004      	beq.n	8103532 <HAL_ADC_Init+0x112>
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	681b      	ldr	r3, [r3, #0]
 810352c:	4a64      	ldr	r2, [pc, #400]	; (81036c0 <HAL_ADC_Init+0x2a0>)
 810352e:	4293      	cmp	r3, r2
 8103530:	d10e      	bne.n	8103550 <HAL_ADC_Init+0x130>
 8103532:	4862      	ldr	r0, [pc, #392]	; (81036bc <HAL_ADC_Init+0x29c>)
 8103534:	f7ff ff3a 	bl	81033ac <LL_ADC_IsEnabled>
 8103538:	4604      	mov	r4, r0
 810353a:	4861      	ldr	r0, [pc, #388]	; (81036c0 <HAL_ADC_Init+0x2a0>)
 810353c:	f7ff ff36 	bl	81033ac <LL_ADC_IsEnabled>
 8103540:	4603      	mov	r3, r0
 8103542:	4323      	orrs	r3, r4
 8103544:	2b00      	cmp	r3, #0
 8103546:	bf0c      	ite	eq
 8103548:	2301      	moveq	r3, #1
 810354a:	2300      	movne	r3, #0
 810354c:	b2db      	uxtb	r3, r3
 810354e:	e008      	b.n	8103562 <HAL_ADC_Init+0x142>
 8103550:	485c      	ldr	r0, [pc, #368]	; (81036c4 <HAL_ADC_Init+0x2a4>)
 8103552:	f7ff ff2b 	bl	81033ac <LL_ADC_IsEnabled>
 8103556:	4603      	mov	r3, r0
 8103558:	2b00      	cmp	r3, #0
 810355a:	bf0c      	ite	eq
 810355c:	2301      	moveq	r3, #1
 810355e:	2300      	movne	r3, #0
 8103560:	b2db      	uxtb	r3, r3
 8103562:	2b00      	cmp	r3, #0
 8103564:	d012      	beq.n	810358c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8103566:	687b      	ldr	r3, [r7, #4]
 8103568:	681b      	ldr	r3, [r3, #0]
 810356a:	4a54      	ldr	r2, [pc, #336]	; (81036bc <HAL_ADC_Init+0x29c>)
 810356c:	4293      	cmp	r3, r2
 810356e:	d004      	beq.n	810357a <HAL_ADC_Init+0x15a>
 8103570:	687b      	ldr	r3, [r7, #4]
 8103572:	681b      	ldr	r3, [r3, #0]
 8103574:	4a52      	ldr	r2, [pc, #328]	; (81036c0 <HAL_ADC_Init+0x2a0>)
 8103576:	4293      	cmp	r3, r2
 8103578:	d101      	bne.n	810357e <HAL_ADC_Init+0x15e>
 810357a:	4a53      	ldr	r2, [pc, #332]	; (81036c8 <HAL_ADC_Init+0x2a8>)
 810357c:	e000      	b.n	8103580 <HAL_ADC_Init+0x160>
 810357e:	4a53      	ldr	r2, [pc, #332]	; (81036cc <HAL_ADC_Init+0x2ac>)
 8103580:	687b      	ldr	r3, [r7, #4]
 8103582:	685b      	ldr	r3, [r3, #4]
 8103584:	4619      	mov	r1, r3
 8103586:	4610      	mov	r0, r2
 8103588:	f7ff fdbe 	bl	8103108 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 810358c:	f7ff fdb0 	bl	81030f0 <HAL_GetREVID>
 8103590:	4603      	mov	r3, r0
 8103592:	f241 0203 	movw	r2, #4099	; 0x1003
 8103596:	4293      	cmp	r3, r2
 8103598:	d914      	bls.n	81035c4 <HAL_ADC_Init+0x1a4>
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	689b      	ldr	r3, [r3, #8]
 810359e:	2b10      	cmp	r3, #16
 81035a0:	d110      	bne.n	81035c4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81035a2:	687b      	ldr	r3, [r7, #4]
 81035a4:	7d5b      	ldrb	r3, [r3, #21]
 81035a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81035a8:	687b      	ldr	r3, [r7, #4]
 81035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81035ac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81035b2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	7f1b      	ldrb	r3, [r3, #28]
 81035b8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81035ba:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81035bc:	f043 030c 	orr.w	r3, r3, #12
 81035c0:	61bb      	str	r3, [r7, #24]
 81035c2:	e00d      	b.n	81035e0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	7d5b      	ldrb	r3, [r3, #21]
 81035c8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81035ca:	687b      	ldr	r3, [r7, #4]
 81035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81035ce:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81035d4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	7f1b      	ldrb	r3, [r3, #28]
 81035da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81035dc:	4313      	orrs	r3, r2
 81035de:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	7f1b      	ldrb	r3, [r3, #28]
 81035e4:	2b01      	cmp	r3, #1
 81035e6:	d106      	bne.n	81035f6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 81035e8:	687b      	ldr	r3, [r7, #4]
 81035ea:	6a1b      	ldr	r3, [r3, #32]
 81035ec:	3b01      	subs	r3, #1
 81035ee:	045b      	lsls	r3, r3, #17
 81035f0:	69ba      	ldr	r2, [r7, #24]
 81035f2:	4313      	orrs	r3, r2
 81035f4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 81035f6:	687b      	ldr	r3, [r7, #4]
 81035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81035fa:	2b00      	cmp	r3, #0
 81035fc:	d009      	beq.n	8103612 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103602:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8103606:	687b      	ldr	r3, [r7, #4]
 8103608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810360a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810360c:	69ba      	ldr	r2, [r7, #24]
 810360e:	4313      	orrs	r3, r2
 8103610:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	681b      	ldr	r3, [r3, #0]
 8103616:	68da      	ldr	r2, [r3, #12]
 8103618:	4b2d      	ldr	r3, [pc, #180]	; (81036d0 <HAL_ADC_Init+0x2b0>)
 810361a:	4013      	ands	r3, r2
 810361c:	687a      	ldr	r2, [r7, #4]
 810361e:	6812      	ldr	r2, [r2, #0]
 8103620:	69b9      	ldr	r1, [r7, #24]
 8103622:	430b      	orrs	r3, r1
 8103624:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	681b      	ldr	r3, [r3, #0]
 810362a:	4618      	mov	r0, r3
 810362c:	f7ff fed1 	bl	81033d2 <LL_ADC_REG_IsConversionOngoing>
 8103630:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103632:	687b      	ldr	r3, [r7, #4]
 8103634:	681b      	ldr	r3, [r3, #0]
 8103636:	4618      	mov	r0, r3
 8103638:	f7ff fede 	bl	81033f8 <LL_ADC_INJ_IsConversionOngoing>
 810363c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810363e:	693b      	ldr	r3, [r7, #16]
 8103640:	2b00      	cmp	r3, #0
 8103642:	d15f      	bne.n	8103704 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103644:	68fb      	ldr	r3, [r7, #12]
 8103646:	2b00      	cmp	r3, #0
 8103648:	d15c      	bne.n	8103704 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 810364a:	687b      	ldr	r3, [r7, #4]
 810364c:	7d1b      	ldrb	r3, [r3, #20]
 810364e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8103650:	687b      	ldr	r3, [r7, #4]
 8103652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8103654:	4313      	orrs	r3, r2
 8103656:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	68db      	ldr	r3, [r3, #12]
 810365e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8103662:	f023 0303 	bic.w	r3, r3, #3
 8103666:	687a      	ldr	r2, [r7, #4]
 8103668:	6812      	ldr	r2, [r2, #0]
 810366a:	69b9      	ldr	r1, [r7, #24]
 810366c:	430b      	orrs	r3, r1
 810366e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8103676:	2b01      	cmp	r3, #1
 8103678:	d12e      	bne.n	81036d8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 810367a:	687b      	ldr	r3, [r7, #4]
 810367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810367e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8103680:	687b      	ldr	r3, [r7, #4]
 8103682:	681b      	ldr	r3, [r3, #0]
 8103684:	691a      	ldr	r2, [r3, #16]
 8103686:	4b13      	ldr	r3, [pc, #76]	; (81036d4 <HAL_ADC_Init+0x2b4>)
 8103688:	4013      	ands	r3, r2
 810368a:	687a      	ldr	r2, [r7, #4]
 810368c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 810368e:	3a01      	subs	r2, #1
 8103690:	0411      	lsls	r1, r2, #16
 8103692:	687a      	ldr	r2, [r7, #4]
 8103694:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8103696:	4311      	orrs	r1, r2
 8103698:	687a      	ldr	r2, [r7, #4]
 810369a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 810369c:	4311      	orrs	r1, r2
 810369e:	687a      	ldr	r2, [r7, #4]
 81036a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 81036a2:	430a      	orrs	r2, r1
 81036a4:	431a      	orrs	r2, r3
 81036a6:	687b      	ldr	r3, [r7, #4]
 81036a8:	681b      	ldr	r3, [r3, #0]
 81036aa:	f042 0201 	orr.w	r2, r2, #1
 81036ae:	611a      	str	r2, [r3, #16]
 81036b0:	e01a      	b.n	81036e8 <HAL_ADC_Init+0x2c8>
 81036b2:	bf00      	nop
 81036b4:	10000000 	.word	0x10000000
 81036b8:	053e2d63 	.word	0x053e2d63
 81036bc:	40022000 	.word	0x40022000
 81036c0:	40022100 	.word	0x40022100
 81036c4:	58026000 	.word	0x58026000
 81036c8:	40022300 	.word	0x40022300
 81036cc:	58026300 	.word	0x58026300
 81036d0:	fff0c003 	.word	0xfff0c003
 81036d4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 81036d8:	687b      	ldr	r3, [r7, #4]
 81036da:	681b      	ldr	r3, [r3, #0]
 81036dc:	691a      	ldr	r2, [r3, #16]
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	681b      	ldr	r3, [r3, #0]
 81036e2:	f022 0201 	bic.w	r2, r2, #1
 81036e6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 81036e8:	687b      	ldr	r3, [r7, #4]
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	691b      	ldr	r3, [r3, #16]
 81036ee:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81036f6:	687b      	ldr	r3, [r7, #4]
 81036f8:	681b      	ldr	r3, [r3, #0]
 81036fa:	430a      	orrs	r2, r1
 81036fc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 81036fe:	6878      	ldr	r0, [r7, #4]
 8103700:	f000 fb80 	bl	8103e04 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	68db      	ldr	r3, [r3, #12]
 8103708:	2b01      	cmp	r3, #1
 810370a:	d10c      	bne.n	8103726 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 810370c:	687b      	ldr	r3, [r7, #4]
 810370e:	681b      	ldr	r3, [r3, #0]
 8103710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103712:	f023 010f 	bic.w	r1, r3, #15
 8103716:	687b      	ldr	r3, [r7, #4]
 8103718:	699b      	ldr	r3, [r3, #24]
 810371a:	1e5a      	subs	r2, r3, #1
 810371c:	687b      	ldr	r3, [r7, #4]
 810371e:	681b      	ldr	r3, [r3, #0]
 8103720:	430a      	orrs	r2, r1
 8103722:	631a      	str	r2, [r3, #48]	; 0x30
 8103724:	e007      	b.n	8103736 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8103726:	687b      	ldr	r3, [r7, #4]
 8103728:	681b      	ldr	r3, [r3, #0]
 810372a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810372c:	687b      	ldr	r3, [r7, #4]
 810372e:	681b      	ldr	r3, [r3, #0]
 8103730:	f022 020f 	bic.w	r2, r2, #15
 8103734:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8103736:	687b      	ldr	r3, [r7, #4]
 8103738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810373a:	f023 0303 	bic.w	r3, r3, #3
 810373e:	f043 0201 	orr.w	r2, r3, #1
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	655a      	str	r2, [r3, #84]	; 0x54
 8103746:	e007      	b.n	8103758 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103748:	687b      	ldr	r3, [r7, #4]
 810374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810374c:	f043 0210 	orr.w	r2, r3, #16
 8103750:	687b      	ldr	r3, [r7, #4]
 8103752:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103754:	2301      	movs	r3, #1
 8103756:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8103758:	7ffb      	ldrb	r3, [r7, #31]
}
 810375a:	4618      	mov	r0, r3
 810375c:	3724      	adds	r7, #36	; 0x24
 810375e:	46bd      	mov	sp, r7
 8103760:	bd90      	pop	{r4, r7, pc}
 8103762:	bf00      	nop

08103764 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8103764:	b590      	push	{r4, r7, lr}
 8103766:	b0a1      	sub	sp, #132	; 0x84
 8103768:	af00      	add	r7, sp, #0
 810376a:	6078      	str	r0, [r7, #4]
 810376c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810376e:	2300      	movs	r3, #0
 8103770:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8103774:	2300      	movs	r3, #0
 8103776:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8103778:	683b      	ldr	r3, [r7, #0]
 810377a:	68db      	ldr	r3, [r3, #12]
 810377c:	4a9d      	ldr	r2, [pc, #628]	; (81039f4 <HAL_ADC_ConfigChannel+0x290>)
 810377e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103780:	687b      	ldr	r3, [r7, #4]
 8103782:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8103786:	2b01      	cmp	r3, #1
 8103788:	d101      	bne.n	810378e <HAL_ADC_ConfigChannel+0x2a>
 810378a:	2302      	movs	r3, #2
 810378c:	e321      	b.n	8103dd2 <HAL_ADC_ConfigChannel+0x66e>
 810378e:	687b      	ldr	r3, [r7, #4]
 8103790:	2201      	movs	r2, #1
 8103792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103796:	687b      	ldr	r3, [r7, #4]
 8103798:	681b      	ldr	r3, [r3, #0]
 810379a:	4618      	mov	r0, r3
 810379c:	f7ff fe19 	bl	81033d2 <LL_ADC_REG_IsConversionOngoing>
 81037a0:	4603      	mov	r3, r0
 81037a2:	2b00      	cmp	r3, #0
 81037a4:	f040 8306 	bne.w	8103db4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81037a8:	683b      	ldr	r3, [r7, #0]
 81037aa:	681b      	ldr	r3, [r3, #0]
 81037ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81037b0:	2b00      	cmp	r3, #0
 81037b2:	d108      	bne.n	81037c6 <HAL_ADC_ConfigChannel+0x62>
 81037b4:	683b      	ldr	r3, [r7, #0]
 81037b6:	681b      	ldr	r3, [r3, #0]
 81037b8:	0e9b      	lsrs	r3, r3, #26
 81037ba:	f003 031f 	and.w	r3, r3, #31
 81037be:	2201      	movs	r2, #1
 81037c0:	fa02 f303 	lsl.w	r3, r2, r3
 81037c4:	e016      	b.n	81037f4 <HAL_ADC_ConfigChannel+0x90>
 81037c6:	683b      	ldr	r3, [r7, #0]
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81037cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81037ce:	fa93 f3a3 	rbit	r3, r3
 81037d2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81037d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81037d6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81037d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81037da:	2b00      	cmp	r3, #0
 81037dc:	d101      	bne.n	81037e2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 81037de:	2320      	movs	r3, #32
 81037e0:	e003      	b.n	81037ea <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 81037e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81037e4:	fab3 f383 	clz	r3, r3
 81037e8:	b2db      	uxtb	r3, r3
 81037ea:	f003 031f 	and.w	r3, r3, #31
 81037ee:	2201      	movs	r2, #1
 81037f0:	fa02 f303 	lsl.w	r3, r2, r3
 81037f4:	687a      	ldr	r2, [r7, #4]
 81037f6:	6812      	ldr	r2, [r2, #0]
 81037f8:	69d1      	ldr	r1, [r2, #28]
 81037fa:	687a      	ldr	r2, [r7, #4]
 81037fc:	6812      	ldr	r2, [r2, #0]
 81037fe:	430b      	orrs	r3, r1
 8103800:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8103802:	687b      	ldr	r3, [r7, #4]
 8103804:	6818      	ldr	r0, [r3, #0]
 8103806:	683b      	ldr	r3, [r7, #0]
 8103808:	6859      	ldr	r1, [r3, #4]
 810380a:	683b      	ldr	r3, [r7, #0]
 810380c:	681b      	ldr	r3, [r3, #0]
 810380e:	461a      	mov	r2, r3
 8103810:	f7ff fd02 	bl	8103218 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103814:	687b      	ldr	r3, [r7, #4]
 8103816:	681b      	ldr	r3, [r3, #0]
 8103818:	4618      	mov	r0, r3
 810381a:	f7ff fdda 	bl	81033d2 <LL_ADC_REG_IsConversionOngoing>
 810381e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8103820:	687b      	ldr	r3, [r7, #4]
 8103822:	681b      	ldr	r3, [r3, #0]
 8103824:	4618      	mov	r0, r3
 8103826:	f7ff fde7 	bl	81033f8 <LL_ADC_INJ_IsConversionOngoing>
 810382a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 810382c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810382e:	2b00      	cmp	r3, #0
 8103830:	f040 80b3 	bne.w	810399a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8103834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8103836:	2b00      	cmp	r3, #0
 8103838:	f040 80af 	bne.w	810399a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	6818      	ldr	r0, [r3, #0]
 8103840:	683b      	ldr	r3, [r7, #0]
 8103842:	6819      	ldr	r1, [r3, #0]
 8103844:	683b      	ldr	r3, [r7, #0]
 8103846:	689b      	ldr	r3, [r3, #8]
 8103848:	461a      	mov	r2, r3
 810384a:	f7ff fd11 	bl	8103270 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810384e:	4b6a      	ldr	r3, [pc, #424]	; (81039f8 <HAL_ADC_ConfigChannel+0x294>)
 8103850:	681b      	ldr	r3, [r3, #0]
 8103852:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8103856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810385a:	d10b      	bne.n	8103874 <HAL_ADC_ConfigChannel+0x110>
 810385c:	683b      	ldr	r3, [r7, #0]
 810385e:	695a      	ldr	r2, [r3, #20]
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	681b      	ldr	r3, [r3, #0]
 8103864:	68db      	ldr	r3, [r3, #12]
 8103866:	089b      	lsrs	r3, r3, #2
 8103868:	f003 0307 	and.w	r3, r3, #7
 810386c:	005b      	lsls	r3, r3, #1
 810386e:	fa02 f303 	lsl.w	r3, r2, r3
 8103872:	e01d      	b.n	81038b0 <HAL_ADC_ConfigChannel+0x14c>
 8103874:	687b      	ldr	r3, [r7, #4]
 8103876:	681b      	ldr	r3, [r3, #0]
 8103878:	68db      	ldr	r3, [r3, #12]
 810387a:	f003 0310 	and.w	r3, r3, #16
 810387e:	2b00      	cmp	r3, #0
 8103880:	d10b      	bne.n	810389a <HAL_ADC_ConfigChannel+0x136>
 8103882:	683b      	ldr	r3, [r7, #0]
 8103884:	695a      	ldr	r2, [r3, #20]
 8103886:	687b      	ldr	r3, [r7, #4]
 8103888:	681b      	ldr	r3, [r3, #0]
 810388a:	68db      	ldr	r3, [r3, #12]
 810388c:	089b      	lsrs	r3, r3, #2
 810388e:	f003 0307 	and.w	r3, r3, #7
 8103892:	005b      	lsls	r3, r3, #1
 8103894:	fa02 f303 	lsl.w	r3, r2, r3
 8103898:	e00a      	b.n	81038b0 <HAL_ADC_ConfigChannel+0x14c>
 810389a:	683b      	ldr	r3, [r7, #0]
 810389c:	695a      	ldr	r2, [r3, #20]
 810389e:	687b      	ldr	r3, [r7, #4]
 81038a0:	681b      	ldr	r3, [r3, #0]
 81038a2:	68db      	ldr	r3, [r3, #12]
 81038a4:	089b      	lsrs	r3, r3, #2
 81038a6:	f003 0304 	and.w	r3, r3, #4
 81038aa:	005b      	lsls	r3, r3, #1
 81038ac:	fa02 f303 	lsl.w	r3, r2, r3
 81038b0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81038b2:	683b      	ldr	r3, [r7, #0]
 81038b4:	691b      	ldr	r3, [r3, #16]
 81038b6:	2b04      	cmp	r3, #4
 81038b8:	d027      	beq.n	810390a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	6818      	ldr	r0, [r3, #0]
 81038be:	683b      	ldr	r3, [r7, #0]
 81038c0:	6919      	ldr	r1, [r3, #16]
 81038c2:	683b      	ldr	r3, [r7, #0]
 81038c4:	681a      	ldr	r2, [r3, #0]
 81038c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81038c8:	f7ff fc52 	bl	8103170 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 81038cc:	687b      	ldr	r3, [r7, #4]
 81038ce:	6818      	ldr	r0, [r3, #0]
 81038d0:	683b      	ldr	r3, [r7, #0]
 81038d2:	6919      	ldr	r1, [r3, #16]
 81038d4:	683b      	ldr	r3, [r7, #0]
 81038d6:	7e5b      	ldrb	r3, [r3, #25]
 81038d8:	2b01      	cmp	r3, #1
 81038da:	d102      	bne.n	81038e2 <HAL_ADC_ConfigChannel+0x17e>
 81038dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81038e0:	e000      	b.n	81038e4 <HAL_ADC_ConfigChannel+0x180>
 81038e2:	2300      	movs	r3, #0
 81038e4:	461a      	mov	r2, r3
 81038e6:	f7ff fc7c 	bl	81031e2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	6818      	ldr	r0, [r3, #0]
 81038ee:	683b      	ldr	r3, [r7, #0]
 81038f0:	6919      	ldr	r1, [r3, #16]
 81038f2:	683b      	ldr	r3, [r7, #0]
 81038f4:	7e1b      	ldrb	r3, [r3, #24]
 81038f6:	2b01      	cmp	r3, #1
 81038f8:	d102      	bne.n	8103900 <HAL_ADC_ConfigChannel+0x19c>
 81038fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81038fe:	e000      	b.n	8103902 <HAL_ADC_ConfigChannel+0x19e>
 8103900:	2300      	movs	r3, #0
 8103902:	461a      	mov	r2, r3
 8103904:	f7ff fc54 	bl	81031b0 <LL_ADC_SetDataRightShift>
 8103908:	e047      	b.n	810399a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810390a:	687b      	ldr	r3, [r7, #4]
 810390c:	681b      	ldr	r3, [r3, #0]
 810390e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103910:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103914:	683b      	ldr	r3, [r7, #0]
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	069b      	lsls	r3, r3, #26
 810391a:	429a      	cmp	r2, r3
 810391c:	d107      	bne.n	810392e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	681b      	ldr	r3, [r3, #0]
 8103922:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	681b      	ldr	r3, [r3, #0]
 8103928:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 810392c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	681b      	ldr	r3, [r3, #0]
 8103932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103934:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103938:	683b      	ldr	r3, [r7, #0]
 810393a:	681b      	ldr	r3, [r3, #0]
 810393c:	069b      	lsls	r3, r3, #26
 810393e:	429a      	cmp	r2, r3
 8103940:	d107      	bne.n	8103952 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	681b      	ldr	r3, [r3, #0]
 8103946:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8103948:	687b      	ldr	r3, [r7, #4]
 810394a:	681b      	ldr	r3, [r3, #0]
 810394c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103950:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	681b      	ldr	r3, [r3, #0]
 8103956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103958:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810395c:	683b      	ldr	r3, [r7, #0]
 810395e:	681b      	ldr	r3, [r3, #0]
 8103960:	069b      	lsls	r3, r3, #26
 8103962:	429a      	cmp	r2, r3
 8103964:	d107      	bne.n	8103976 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8103966:	687b      	ldr	r3, [r7, #4]
 8103968:	681b      	ldr	r3, [r3, #0]
 810396a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	681b      	ldr	r3, [r3, #0]
 8103970:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103974:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103976:	687b      	ldr	r3, [r7, #4]
 8103978:	681b      	ldr	r3, [r3, #0]
 810397a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810397c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103980:	683b      	ldr	r3, [r7, #0]
 8103982:	681b      	ldr	r3, [r3, #0]
 8103984:	069b      	lsls	r3, r3, #26
 8103986:	429a      	cmp	r2, r3
 8103988:	d107      	bne.n	810399a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 810398a:	687b      	ldr	r3, [r7, #4]
 810398c:	681b      	ldr	r3, [r3, #0]
 810398e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103998:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810399a:	687b      	ldr	r3, [r7, #4]
 810399c:	681b      	ldr	r3, [r3, #0]
 810399e:	4618      	mov	r0, r3
 81039a0:	f7ff fd04 	bl	81033ac <LL_ADC_IsEnabled>
 81039a4:	4603      	mov	r3, r0
 81039a6:	2b00      	cmp	r3, #0
 81039a8:	f040 820d 	bne.w	8103dc6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	6818      	ldr	r0, [r3, #0]
 81039b0:	683b      	ldr	r3, [r7, #0]
 81039b2:	6819      	ldr	r1, [r3, #0]
 81039b4:	683b      	ldr	r3, [r7, #0]
 81039b6:	68db      	ldr	r3, [r3, #12]
 81039b8:	461a      	mov	r2, r3
 81039ba:	f7ff fc85 	bl	81032c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 81039be:	683b      	ldr	r3, [r7, #0]
 81039c0:	68db      	ldr	r3, [r3, #12]
 81039c2:	4a0c      	ldr	r2, [pc, #48]	; (81039f4 <HAL_ADC_ConfigChannel+0x290>)
 81039c4:	4293      	cmp	r3, r2
 81039c6:	f040 8133 	bne.w	8103c30 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81039ce:	683b      	ldr	r3, [r7, #0]
 81039d0:	681b      	ldr	r3, [r3, #0]
 81039d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81039d6:	2b00      	cmp	r3, #0
 81039d8:	d110      	bne.n	81039fc <HAL_ADC_ConfigChannel+0x298>
 81039da:	683b      	ldr	r3, [r7, #0]
 81039dc:	681b      	ldr	r3, [r3, #0]
 81039de:	0e9b      	lsrs	r3, r3, #26
 81039e0:	3301      	adds	r3, #1
 81039e2:	f003 031f 	and.w	r3, r3, #31
 81039e6:	2b09      	cmp	r3, #9
 81039e8:	bf94      	ite	ls
 81039ea:	2301      	movls	r3, #1
 81039ec:	2300      	movhi	r3, #0
 81039ee:	b2db      	uxtb	r3, r3
 81039f0:	e01e      	b.n	8103a30 <HAL_ADC_ConfigChannel+0x2cc>
 81039f2:	bf00      	nop
 81039f4:	47ff0000 	.word	0x47ff0000
 81039f8:	5c001000 	.word	0x5c001000
 81039fc:	683b      	ldr	r3, [r7, #0]
 81039fe:	681b      	ldr	r3, [r3, #0]
 8103a00:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8103a04:	fa93 f3a3 	rbit	r3, r3
 8103a08:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8103a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8103a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103a10:	2b00      	cmp	r3, #0
 8103a12:	d101      	bne.n	8103a18 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8103a14:	2320      	movs	r3, #32
 8103a16:	e003      	b.n	8103a20 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8103a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103a1a:	fab3 f383 	clz	r3, r3
 8103a1e:	b2db      	uxtb	r3, r3
 8103a20:	3301      	adds	r3, #1
 8103a22:	f003 031f 	and.w	r3, r3, #31
 8103a26:	2b09      	cmp	r3, #9
 8103a28:	bf94      	ite	ls
 8103a2a:	2301      	movls	r3, #1
 8103a2c:	2300      	movhi	r3, #0
 8103a2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103a30:	2b00      	cmp	r3, #0
 8103a32:	d079      	beq.n	8103b28 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103a34:	683b      	ldr	r3, [r7, #0]
 8103a36:	681b      	ldr	r3, [r3, #0]
 8103a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a3c:	2b00      	cmp	r3, #0
 8103a3e:	d107      	bne.n	8103a50 <HAL_ADC_ConfigChannel+0x2ec>
 8103a40:	683b      	ldr	r3, [r7, #0]
 8103a42:	681b      	ldr	r3, [r3, #0]
 8103a44:	0e9b      	lsrs	r3, r3, #26
 8103a46:	3301      	adds	r3, #1
 8103a48:	069b      	lsls	r3, r3, #26
 8103a4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103a4e:	e015      	b.n	8103a7c <HAL_ADC_ConfigChannel+0x318>
 8103a50:	683b      	ldr	r3, [r7, #0]
 8103a52:	681b      	ldr	r3, [r3, #0]
 8103a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103a58:	fa93 f3a3 	rbit	r3, r3
 8103a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8103a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103a60:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8103a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103a64:	2b00      	cmp	r3, #0
 8103a66:	d101      	bne.n	8103a6c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8103a68:	2320      	movs	r3, #32
 8103a6a:	e003      	b.n	8103a74 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8103a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103a6e:	fab3 f383 	clz	r3, r3
 8103a72:	b2db      	uxtb	r3, r3
 8103a74:	3301      	adds	r3, #1
 8103a76:	069b      	lsls	r3, r3, #26
 8103a78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103a7c:	683b      	ldr	r3, [r7, #0]
 8103a7e:	681b      	ldr	r3, [r3, #0]
 8103a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a84:	2b00      	cmp	r3, #0
 8103a86:	d109      	bne.n	8103a9c <HAL_ADC_ConfigChannel+0x338>
 8103a88:	683b      	ldr	r3, [r7, #0]
 8103a8a:	681b      	ldr	r3, [r3, #0]
 8103a8c:	0e9b      	lsrs	r3, r3, #26
 8103a8e:	3301      	adds	r3, #1
 8103a90:	f003 031f 	and.w	r3, r3, #31
 8103a94:	2101      	movs	r1, #1
 8103a96:	fa01 f303 	lsl.w	r3, r1, r3
 8103a9a:	e017      	b.n	8103acc <HAL_ADC_ConfigChannel+0x368>
 8103a9c:	683b      	ldr	r3, [r7, #0]
 8103a9e:	681b      	ldr	r3, [r3, #0]
 8103aa0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103aa4:	fa93 f3a3 	rbit	r3, r3
 8103aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8103aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103aac:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8103aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103ab0:	2b00      	cmp	r3, #0
 8103ab2:	d101      	bne.n	8103ab8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8103ab4:	2320      	movs	r3, #32
 8103ab6:	e003      	b.n	8103ac0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8103ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103aba:	fab3 f383 	clz	r3, r3
 8103abe:	b2db      	uxtb	r3, r3
 8103ac0:	3301      	adds	r3, #1
 8103ac2:	f003 031f 	and.w	r3, r3, #31
 8103ac6:	2101      	movs	r1, #1
 8103ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8103acc:	ea42 0103 	orr.w	r1, r2, r3
 8103ad0:	683b      	ldr	r3, [r7, #0]
 8103ad2:	681b      	ldr	r3, [r3, #0]
 8103ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103ad8:	2b00      	cmp	r3, #0
 8103ada:	d10a      	bne.n	8103af2 <HAL_ADC_ConfigChannel+0x38e>
 8103adc:	683b      	ldr	r3, [r7, #0]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	0e9b      	lsrs	r3, r3, #26
 8103ae2:	3301      	adds	r3, #1
 8103ae4:	f003 021f 	and.w	r2, r3, #31
 8103ae8:	4613      	mov	r3, r2
 8103aea:	005b      	lsls	r3, r3, #1
 8103aec:	4413      	add	r3, r2
 8103aee:	051b      	lsls	r3, r3, #20
 8103af0:	e018      	b.n	8103b24 <HAL_ADC_ConfigChannel+0x3c0>
 8103af2:	683b      	ldr	r3, [r7, #0]
 8103af4:	681b      	ldr	r3, [r3, #0]
 8103af6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103afa:	fa93 f3a3 	rbit	r3, r3
 8103afe:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8103b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103b02:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8103b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103b06:	2b00      	cmp	r3, #0
 8103b08:	d101      	bne.n	8103b0e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8103b0a:	2320      	movs	r3, #32
 8103b0c:	e003      	b.n	8103b16 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8103b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103b10:	fab3 f383 	clz	r3, r3
 8103b14:	b2db      	uxtb	r3, r3
 8103b16:	3301      	adds	r3, #1
 8103b18:	f003 021f 	and.w	r2, r3, #31
 8103b1c:	4613      	mov	r3, r2
 8103b1e:	005b      	lsls	r3, r3, #1
 8103b20:	4413      	add	r3, r2
 8103b22:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103b24:	430b      	orrs	r3, r1
 8103b26:	e07e      	b.n	8103c26 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103b28:	683b      	ldr	r3, [r7, #0]
 8103b2a:	681b      	ldr	r3, [r3, #0]
 8103b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103b30:	2b00      	cmp	r3, #0
 8103b32:	d107      	bne.n	8103b44 <HAL_ADC_ConfigChannel+0x3e0>
 8103b34:	683b      	ldr	r3, [r7, #0]
 8103b36:	681b      	ldr	r3, [r3, #0]
 8103b38:	0e9b      	lsrs	r3, r3, #26
 8103b3a:	3301      	adds	r3, #1
 8103b3c:	069b      	lsls	r3, r3, #26
 8103b3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103b42:	e015      	b.n	8103b70 <HAL_ADC_ConfigChannel+0x40c>
 8103b44:	683b      	ldr	r3, [r7, #0]
 8103b46:	681b      	ldr	r3, [r3, #0]
 8103b48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103b4c:	fa93 f3a3 	rbit	r3, r3
 8103b50:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8103b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8103b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103b58:	2b00      	cmp	r3, #0
 8103b5a:	d101      	bne.n	8103b60 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8103b5c:	2320      	movs	r3, #32
 8103b5e:	e003      	b.n	8103b68 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8103b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103b62:	fab3 f383 	clz	r3, r3
 8103b66:	b2db      	uxtb	r3, r3
 8103b68:	3301      	adds	r3, #1
 8103b6a:	069b      	lsls	r3, r3, #26
 8103b6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103b70:	683b      	ldr	r3, [r7, #0]
 8103b72:	681b      	ldr	r3, [r3, #0]
 8103b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103b78:	2b00      	cmp	r3, #0
 8103b7a:	d109      	bne.n	8103b90 <HAL_ADC_ConfigChannel+0x42c>
 8103b7c:	683b      	ldr	r3, [r7, #0]
 8103b7e:	681b      	ldr	r3, [r3, #0]
 8103b80:	0e9b      	lsrs	r3, r3, #26
 8103b82:	3301      	adds	r3, #1
 8103b84:	f003 031f 	and.w	r3, r3, #31
 8103b88:	2101      	movs	r1, #1
 8103b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8103b8e:	e017      	b.n	8103bc0 <HAL_ADC_ConfigChannel+0x45c>
 8103b90:	683b      	ldr	r3, [r7, #0]
 8103b92:	681b      	ldr	r3, [r3, #0]
 8103b94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103b96:	69fb      	ldr	r3, [r7, #28]
 8103b98:	fa93 f3a3 	rbit	r3, r3
 8103b9c:	61bb      	str	r3, [r7, #24]
  return result;
 8103b9e:	69bb      	ldr	r3, [r7, #24]
 8103ba0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8103ba2:	6a3b      	ldr	r3, [r7, #32]
 8103ba4:	2b00      	cmp	r3, #0
 8103ba6:	d101      	bne.n	8103bac <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8103ba8:	2320      	movs	r3, #32
 8103baa:	e003      	b.n	8103bb4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8103bac:	6a3b      	ldr	r3, [r7, #32]
 8103bae:	fab3 f383 	clz	r3, r3
 8103bb2:	b2db      	uxtb	r3, r3
 8103bb4:	3301      	adds	r3, #1
 8103bb6:	f003 031f 	and.w	r3, r3, #31
 8103bba:	2101      	movs	r1, #1
 8103bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8103bc0:	ea42 0103 	orr.w	r1, r2, r3
 8103bc4:	683b      	ldr	r3, [r7, #0]
 8103bc6:	681b      	ldr	r3, [r3, #0]
 8103bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103bcc:	2b00      	cmp	r3, #0
 8103bce:	d10d      	bne.n	8103bec <HAL_ADC_ConfigChannel+0x488>
 8103bd0:	683b      	ldr	r3, [r7, #0]
 8103bd2:	681b      	ldr	r3, [r3, #0]
 8103bd4:	0e9b      	lsrs	r3, r3, #26
 8103bd6:	3301      	adds	r3, #1
 8103bd8:	f003 021f 	and.w	r2, r3, #31
 8103bdc:	4613      	mov	r3, r2
 8103bde:	005b      	lsls	r3, r3, #1
 8103be0:	4413      	add	r3, r2
 8103be2:	3b1e      	subs	r3, #30
 8103be4:	051b      	lsls	r3, r3, #20
 8103be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103bea:	e01b      	b.n	8103c24 <HAL_ADC_ConfigChannel+0x4c0>
 8103bec:	683b      	ldr	r3, [r7, #0]
 8103bee:	681b      	ldr	r3, [r3, #0]
 8103bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103bf2:	693b      	ldr	r3, [r7, #16]
 8103bf4:	fa93 f3a3 	rbit	r3, r3
 8103bf8:	60fb      	str	r3, [r7, #12]
  return result;
 8103bfa:	68fb      	ldr	r3, [r7, #12]
 8103bfc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8103bfe:	697b      	ldr	r3, [r7, #20]
 8103c00:	2b00      	cmp	r3, #0
 8103c02:	d101      	bne.n	8103c08 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8103c04:	2320      	movs	r3, #32
 8103c06:	e003      	b.n	8103c10 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8103c08:	697b      	ldr	r3, [r7, #20]
 8103c0a:	fab3 f383 	clz	r3, r3
 8103c0e:	b2db      	uxtb	r3, r3
 8103c10:	3301      	adds	r3, #1
 8103c12:	f003 021f 	and.w	r2, r3, #31
 8103c16:	4613      	mov	r3, r2
 8103c18:	005b      	lsls	r3, r3, #1
 8103c1a:	4413      	add	r3, r2
 8103c1c:	3b1e      	subs	r3, #30
 8103c1e:	051b      	lsls	r3, r3, #20
 8103c20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103c24:	430b      	orrs	r3, r1
 8103c26:	683a      	ldr	r2, [r7, #0]
 8103c28:	6892      	ldr	r2, [r2, #8]
 8103c2a:	4619      	mov	r1, r3
 8103c2c:	f7ff fb20 	bl	8103270 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103c30:	683b      	ldr	r3, [r7, #0]
 8103c32:	681b      	ldr	r3, [r3, #0]
 8103c34:	2b00      	cmp	r3, #0
 8103c36:	f280 80c6 	bge.w	8103dc6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	681b      	ldr	r3, [r3, #0]
 8103c3e:	4a67      	ldr	r2, [pc, #412]	; (8103ddc <HAL_ADC_ConfigChannel+0x678>)
 8103c40:	4293      	cmp	r3, r2
 8103c42:	d004      	beq.n	8103c4e <HAL_ADC_ConfigChannel+0x4ea>
 8103c44:	687b      	ldr	r3, [r7, #4]
 8103c46:	681b      	ldr	r3, [r3, #0]
 8103c48:	4a65      	ldr	r2, [pc, #404]	; (8103de0 <HAL_ADC_ConfigChannel+0x67c>)
 8103c4a:	4293      	cmp	r3, r2
 8103c4c:	d101      	bne.n	8103c52 <HAL_ADC_ConfigChannel+0x4ee>
 8103c4e:	4b65      	ldr	r3, [pc, #404]	; (8103de4 <HAL_ADC_ConfigChannel+0x680>)
 8103c50:	e000      	b.n	8103c54 <HAL_ADC_ConfigChannel+0x4f0>
 8103c52:	4b65      	ldr	r3, [pc, #404]	; (8103de8 <HAL_ADC_ConfigChannel+0x684>)
 8103c54:	4618      	mov	r0, r3
 8103c56:	f7ff fa7d 	bl	8103154 <LL_ADC_GetCommonPathInternalCh>
 8103c5a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103c5c:	687b      	ldr	r3, [r7, #4]
 8103c5e:	681b      	ldr	r3, [r3, #0]
 8103c60:	4a5e      	ldr	r2, [pc, #376]	; (8103ddc <HAL_ADC_ConfigChannel+0x678>)
 8103c62:	4293      	cmp	r3, r2
 8103c64:	d004      	beq.n	8103c70 <HAL_ADC_ConfigChannel+0x50c>
 8103c66:	687b      	ldr	r3, [r7, #4]
 8103c68:	681b      	ldr	r3, [r3, #0]
 8103c6a:	4a5d      	ldr	r2, [pc, #372]	; (8103de0 <HAL_ADC_ConfigChannel+0x67c>)
 8103c6c:	4293      	cmp	r3, r2
 8103c6e:	d10e      	bne.n	8103c8e <HAL_ADC_ConfigChannel+0x52a>
 8103c70:	485a      	ldr	r0, [pc, #360]	; (8103ddc <HAL_ADC_ConfigChannel+0x678>)
 8103c72:	f7ff fb9b 	bl	81033ac <LL_ADC_IsEnabled>
 8103c76:	4604      	mov	r4, r0
 8103c78:	4859      	ldr	r0, [pc, #356]	; (8103de0 <HAL_ADC_ConfigChannel+0x67c>)
 8103c7a:	f7ff fb97 	bl	81033ac <LL_ADC_IsEnabled>
 8103c7e:	4603      	mov	r3, r0
 8103c80:	4323      	orrs	r3, r4
 8103c82:	2b00      	cmp	r3, #0
 8103c84:	bf0c      	ite	eq
 8103c86:	2301      	moveq	r3, #1
 8103c88:	2300      	movne	r3, #0
 8103c8a:	b2db      	uxtb	r3, r3
 8103c8c:	e008      	b.n	8103ca0 <HAL_ADC_ConfigChannel+0x53c>
 8103c8e:	4857      	ldr	r0, [pc, #348]	; (8103dec <HAL_ADC_ConfigChannel+0x688>)
 8103c90:	f7ff fb8c 	bl	81033ac <LL_ADC_IsEnabled>
 8103c94:	4603      	mov	r3, r0
 8103c96:	2b00      	cmp	r3, #0
 8103c98:	bf0c      	ite	eq
 8103c9a:	2301      	moveq	r3, #1
 8103c9c:	2300      	movne	r3, #0
 8103c9e:	b2db      	uxtb	r3, r3
 8103ca0:	2b00      	cmp	r3, #0
 8103ca2:	d07d      	beq.n	8103da0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103ca4:	683b      	ldr	r3, [r7, #0]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	4a51      	ldr	r2, [pc, #324]	; (8103df0 <HAL_ADC_ConfigChannel+0x68c>)
 8103caa:	4293      	cmp	r3, r2
 8103cac:	d130      	bne.n	8103d10 <HAL_ADC_ConfigChannel+0x5ac>
 8103cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103cb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103cb4:	2b00      	cmp	r3, #0
 8103cb6:	d12b      	bne.n	8103d10 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	4a4b      	ldr	r2, [pc, #300]	; (8103dec <HAL_ADC_ConfigChannel+0x688>)
 8103cbe:	4293      	cmp	r3, r2
 8103cc0:	f040 8081 	bne.w	8103dc6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	681b      	ldr	r3, [r3, #0]
 8103cc8:	4a44      	ldr	r2, [pc, #272]	; (8103ddc <HAL_ADC_ConfigChannel+0x678>)
 8103cca:	4293      	cmp	r3, r2
 8103ccc:	d004      	beq.n	8103cd8 <HAL_ADC_ConfigChannel+0x574>
 8103cce:	687b      	ldr	r3, [r7, #4]
 8103cd0:	681b      	ldr	r3, [r3, #0]
 8103cd2:	4a43      	ldr	r2, [pc, #268]	; (8103de0 <HAL_ADC_ConfigChannel+0x67c>)
 8103cd4:	4293      	cmp	r3, r2
 8103cd6:	d101      	bne.n	8103cdc <HAL_ADC_ConfigChannel+0x578>
 8103cd8:	4a42      	ldr	r2, [pc, #264]	; (8103de4 <HAL_ADC_ConfigChannel+0x680>)
 8103cda:	e000      	b.n	8103cde <HAL_ADC_ConfigChannel+0x57a>
 8103cdc:	4a42      	ldr	r2, [pc, #264]	; (8103de8 <HAL_ADC_ConfigChannel+0x684>)
 8103cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103ce0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103ce4:	4619      	mov	r1, r3
 8103ce6:	4610      	mov	r0, r2
 8103ce8:	f7ff fa21 	bl	810312e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103cec:	4b41      	ldr	r3, [pc, #260]	; (8103df4 <HAL_ADC_ConfigChannel+0x690>)
 8103cee:	681b      	ldr	r3, [r3, #0]
 8103cf0:	099b      	lsrs	r3, r3, #6
 8103cf2:	4a41      	ldr	r2, [pc, #260]	; (8103df8 <HAL_ADC_ConfigChannel+0x694>)
 8103cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8103cf8:	099b      	lsrs	r3, r3, #6
 8103cfa:	3301      	adds	r3, #1
 8103cfc:	005b      	lsls	r3, r3, #1
 8103cfe:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103d00:	e002      	b.n	8103d08 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8103d02:	68bb      	ldr	r3, [r7, #8]
 8103d04:	3b01      	subs	r3, #1
 8103d06:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103d08:	68bb      	ldr	r3, [r7, #8]
 8103d0a:	2b00      	cmp	r3, #0
 8103d0c:	d1f9      	bne.n	8103d02 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103d0e:	e05a      	b.n	8103dc6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103d10:	683b      	ldr	r3, [r7, #0]
 8103d12:	681b      	ldr	r3, [r3, #0]
 8103d14:	4a39      	ldr	r2, [pc, #228]	; (8103dfc <HAL_ADC_ConfigChannel+0x698>)
 8103d16:	4293      	cmp	r3, r2
 8103d18:	d11e      	bne.n	8103d58 <HAL_ADC_ConfigChannel+0x5f4>
 8103d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103d20:	2b00      	cmp	r3, #0
 8103d22:	d119      	bne.n	8103d58 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103d24:	687b      	ldr	r3, [r7, #4]
 8103d26:	681b      	ldr	r3, [r3, #0]
 8103d28:	4a30      	ldr	r2, [pc, #192]	; (8103dec <HAL_ADC_ConfigChannel+0x688>)
 8103d2a:	4293      	cmp	r3, r2
 8103d2c:	d14b      	bne.n	8103dc6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	681b      	ldr	r3, [r3, #0]
 8103d32:	4a2a      	ldr	r2, [pc, #168]	; (8103ddc <HAL_ADC_ConfigChannel+0x678>)
 8103d34:	4293      	cmp	r3, r2
 8103d36:	d004      	beq.n	8103d42 <HAL_ADC_ConfigChannel+0x5de>
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	681b      	ldr	r3, [r3, #0]
 8103d3c:	4a28      	ldr	r2, [pc, #160]	; (8103de0 <HAL_ADC_ConfigChannel+0x67c>)
 8103d3e:	4293      	cmp	r3, r2
 8103d40:	d101      	bne.n	8103d46 <HAL_ADC_ConfigChannel+0x5e2>
 8103d42:	4a28      	ldr	r2, [pc, #160]	; (8103de4 <HAL_ADC_ConfigChannel+0x680>)
 8103d44:	e000      	b.n	8103d48 <HAL_ADC_ConfigChannel+0x5e4>
 8103d46:	4a28      	ldr	r2, [pc, #160]	; (8103de8 <HAL_ADC_ConfigChannel+0x684>)
 8103d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103d4e:	4619      	mov	r1, r3
 8103d50:	4610      	mov	r0, r2
 8103d52:	f7ff f9ec 	bl	810312e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103d56:	e036      	b.n	8103dc6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103d58:	683b      	ldr	r3, [r7, #0]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	4a28      	ldr	r2, [pc, #160]	; (8103e00 <HAL_ADC_ConfigChannel+0x69c>)
 8103d5e:	4293      	cmp	r3, r2
 8103d60:	d131      	bne.n	8103dc6 <HAL_ADC_ConfigChannel+0x662>
 8103d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103d68:	2b00      	cmp	r3, #0
 8103d6a:	d12c      	bne.n	8103dc6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	681b      	ldr	r3, [r3, #0]
 8103d70:	4a1e      	ldr	r2, [pc, #120]	; (8103dec <HAL_ADC_ConfigChannel+0x688>)
 8103d72:	4293      	cmp	r3, r2
 8103d74:	d127      	bne.n	8103dc6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	681b      	ldr	r3, [r3, #0]
 8103d7a:	4a18      	ldr	r2, [pc, #96]	; (8103ddc <HAL_ADC_ConfigChannel+0x678>)
 8103d7c:	4293      	cmp	r3, r2
 8103d7e:	d004      	beq.n	8103d8a <HAL_ADC_ConfigChannel+0x626>
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	4a16      	ldr	r2, [pc, #88]	; (8103de0 <HAL_ADC_ConfigChannel+0x67c>)
 8103d86:	4293      	cmp	r3, r2
 8103d88:	d101      	bne.n	8103d8e <HAL_ADC_ConfigChannel+0x62a>
 8103d8a:	4a16      	ldr	r2, [pc, #88]	; (8103de4 <HAL_ADC_ConfigChannel+0x680>)
 8103d8c:	e000      	b.n	8103d90 <HAL_ADC_ConfigChannel+0x62c>
 8103d8e:	4a16      	ldr	r2, [pc, #88]	; (8103de8 <HAL_ADC_ConfigChannel+0x684>)
 8103d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103d92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103d96:	4619      	mov	r1, r3
 8103d98:	4610      	mov	r0, r2
 8103d9a:	f7ff f9c8 	bl	810312e <LL_ADC_SetCommonPathInternalCh>
 8103d9e:	e012      	b.n	8103dc6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103da4:	f043 0220 	orr.w	r2, r3, #32
 8103da8:	687b      	ldr	r3, [r7, #4]
 8103daa:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8103dac:	2301      	movs	r3, #1
 8103dae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8103db2:	e008      	b.n	8103dc6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103db4:	687b      	ldr	r3, [r7, #4]
 8103db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103db8:	f043 0220 	orr.w	r2, r3, #32
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103dc0:	2301      	movs	r3, #1
 8103dc2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103dc6:	687b      	ldr	r3, [r7, #4]
 8103dc8:	2200      	movs	r2, #0
 8103dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103dce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8103dd2:	4618      	mov	r0, r3
 8103dd4:	3784      	adds	r7, #132	; 0x84
 8103dd6:	46bd      	mov	sp, r7
 8103dd8:	bd90      	pop	{r4, r7, pc}
 8103dda:	bf00      	nop
 8103ddc:	40022000 	.word	0x40022000
 8103de0:	40022100 	.word	0x40022100
 8103de4:	40022300 	.word	0x40022300
 8103de8:	58026300 	.word	0x58026300
 8103dec:	58026000 	.word	0x58026000
 8103df0:	cb840000 	.word	0xcb840000
 8103df4:	10000000 	.word	0x10000000
 8103df8:	053e2d63 	.word	0x053e2d63
 8103dfc:	c7520000 	.word	0xc7520000
 8103e00:	cfb80000 	.word	0xcfb80000

08103e04 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103e04:	b580      	push	{r7, lr}
 8103e06:	b084      	sub	sp, #16
 8103e08:	af00      	add	r7, sp, #0
 8103e0a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	681b      	ldr	r3, [r3, #0]
 8103e10:	4a7a      	ldr	r2, [pc, #488]	; (8103ffc <ADC_ConfigureBoostMode+0x1f8>)
 8103e12:	4293      	cmp	r3, r2
 8103e14:	d004      	beq.n	8103e20 <ADC_ConfigureBoostMode+0x1c>
 8103e16:	687b      	ldr	r3, [r7, #4]
 8103e18:	681b      	ldr	r3, [r3, #0]
 8103e1a:	4a79      	ldr	r2, [pc, #484]	; (8104000 <ADC_ConfigureBoostMode+0x1fc>)
 8103e1c:	4293      	cmp	r3, r2
 8103e1e:	d109      	bne.n	8103e34 <ADC_ConfigureBoostMode+0x30>
 8103e20:	4b78      	ldr	r3, [pc, #480]	; (8104004 <ADC_ConfigureBoostMode+0x200>)
 8103e22:	689b      	ldr	r3, [r3, #8]
 8103e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103e28:	2b00      	cmp	r3, #0
 8103e2a:	bf14      	ite	ne
 8103e2c:	2301      	movne	r3, #1
 8103e2e:	2300      	moveq	r3, #0
 8103e30:	b2db      	uxtb	r3, r3
 8103e32:	e008      	b.n	8103e46 <ADC_ConfigureBoostMode+0x42>
 8103e34:	4b74      	ldr	r3, [pc, #464]	; (8104008 <ADC_ConfigureBoostMode+0x204>)
 8103e36:	689b      	ldr	r3, [r3, #8]
 8103e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103e3c:	2b00      	cmp	r3, #0
 8103e3e:	bf14      	ite	ne
 8103e40:	2301      	movne	r3, #1
 8103e42:	2300      	moveq	r3, #0
 8103e44:	b2db      	uxtb	r3, r3
 8103e46:	2b00      	cmp	r3, #0
 8103e48:	d01c      	beq.n	8103e84 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103e4a:	f001 fdb5 	bl	81059b8 <HAL_RCC_GetHCLKFreq>
 8103e4e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103e50:	687b      	ldr	r3, [r7, #4]
 8103e52:	685b      	ldr	r3, [r3, #4]
 8103e54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103e58:	d010      	beq.n	8103e7c <ADC_ConfigureBoostMode+0x78>
 8103e5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103e5e:	d873      	bhi.n	8103f48 <ADC_ConfigureBoostMode+0x144>
 8103e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103e64:	d002      	beq.n	8103e6c <ADC_ConfigureBoostMode+0x68>
 8103e66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e6a:	d16d      	bne.n	8103f48 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	685b      	ldr	r3, [r3, #4]
 8103e70:	0c1b      	lsrs	r3, r3, #16
 8103e72:	68fa      	ldr	r2, [r7, #12]
 8103e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8103e78:	60fb      	str	r3, [r7, #12]
        break;
 8103e7a:	e068      	b.n	8103f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103e7c:	68fb      	ldr	r3, [r7, #12]
 8103e7e:	089b      	lsrs	r3, r3, #2
 8103e80:	60fb      	str	r3, [r7, #12]
        break;
 8103e82:	e064      	b.n	8103f4e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103e84:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8103e88:	f04f 0100 	mov.w	r1, #0
 8103e8c:	f002 fffc 	bl	8106e88 <HAL_RCCEx_GetPeriphCLKFreq>
 8103e90:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103e92:	687b      	ldr	r3, [r7, #4]
 8103e94:	685b      	ldr	r3, [r3, #4]
 8103e96:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103e9a:	d051      	beq.n	8103f40 <ADC_ConfigureBoostMode+0x13c>
 8103e9c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103ea0:	d854      	bhi.n	8103f4c <ADC_ConfigureBoostMode+0x148>
 8103ea2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103ea6:	d047      	beq.n	8103f38 <ADC_ConfigureBoostMode+0x134>
 8103ea8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103eac:	d84e      	bhi.n	8103f4c <ADC_ConfigureBoostMode+0x148>
 8103eae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103eb2:	d03d      	beq.n	8103f30 <ADC_ConfigureBoostMode+0x12c>
 8103eb4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103eb8:	d848      	bhi.n	8103f4c <ADC_ConfigureBoostMode+0x148>
 8103eba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103ebe:	d033      	beq.n	8103f28 <ADC_ConfigureBoostMode+0x124>
 8103ec0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103ec4:	d842      	bhi.n	8103f4c <ADC_ConfigureBoostMode+0x148>
 8103ec6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103eca:	d029      	beq.n	8103f20 <ADC_ConfigureBoostMode+0x11c>
 8103ecc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103ed0:	d83c      	bhi.n	8103f4c <ADC_ConfigureBoostMode+0x148>
 8103ed2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103ed6:	d01a      	beq.n	8103f0e <ADC_ConfigureBoostMode+0x10a>
 8103ed8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103edc:	d836      	bhi.n	8103f4c <ADC_ConfigureBoostMode+0x148>
 8103ede:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103ee2:	d014      	beq.n	8103f0e <ADC_ConfigureBoostMode+0x10a>
 8103ee4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103ee8:	d830      	bhi.n	8103f4c <ADC_ConfigureBoostMode+0x148>
 8103eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103eee:	d00e      	beq.n	8103f0e <ADC_ConfigureBoostMode+0x10a>
 8103ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103ef4:	d82a      	bhi.n	8103f4c <ADC_ConfigureBoostMode+0x148>
 8103ef6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103efa:	d008      	beq.n	8103f0e <ADC_ConfigureBoostMode+0x10a>
 8103efc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103f00:	d824      	bhi.n	8103f4c <ADC_ConfigureBoostMode+0x148>
 8103f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103f06:	d002      	beq.n	8103f0e <ADC_ConfigureBoostMode+0x10a>
 8103f08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8103f0c:	d11e      	bne.n	8103f4c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103f0e:	687b      	ldr	r3, [r7, #4]
 8103f10:	685b      	ldr	r3, [r3, #4]
 8103f12:	0c9b      	lsrs	r3, r3, #18
 8103f14:	005b      	lsls	r3, r3, #1
 8103f16:	68fa      	ldr	r2, [r7, #12]
 8103f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8103f1c:	60fb      	str	r3, [r7, #12]
        break;
 8103f1e:	e016      	b.n	8103f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103f20:	68fb      	ldr	r3, [r7, #12]
 8103f22:	091b      	lsrs	r3, r3, #4
 8103f24:	60fb      	str	r3, [r7, #12]
        break;
 8103f26:	e012      	b.n	8103f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103f28:	68fb      	ldr	r3, [r7, #12]
 8103f2a:	095b      	lsrs	r3, r3, #5
 8103f2c:	60fb      	str	r3, [r7, #12]
        break;
 8103f2e:	e00e      	b.n	8103f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103f30:	68fb      	ldr	r3, [r7, #12]
 8103f32:	099b      	lsrs	r3, r3, #6
 8103f34:	60fb      	str	r3, [r7, #12]
        break;
 8103f36:	e00a      	b.n	8103f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103f38:	68fb      	ldr	r3, [r7, #12]
 8103f3a:	09db      	lsrs	r3, r3, #7
 8103f3c:	60fb      	str	r3, [r7, #12]
        break;
 8103f3e:	e006      	b.n	8103f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103f40:	68fb      	ldr	r3, [r7, #12]
 8103f42:	0a1b      	lsrs	r3, r3, #8
 8103f44:	60fb      	str	r3, [r7, #12]
        break;
 8103f46:	e002      	b.n	8103f4e <ADC_ConfigureBoostMode+0x14a>
        break;
 8103f48:	bf00      	nop
 8103f4a:	e000      	b.n	8103f4e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8103f4c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103f4e:	f7ff f8cf 	bl	81030f0 <HAL_GetREVID>
 8103f52:	4603      	mov	r3, r0
 8103f54:	f241 0203 	movw	r2, #4099	; 0x1003
 8103f58:	4293      	cmp	r3, r2
 8103f5a:	d815      	bhi.n	8103f88 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8103f5c:	68fb      	ldr	r3, [r7, #12]
 8103f5e:	4a2b      	ldr	r2, [pc, #172]	; (810400c <ADC_ConfigureBoostMode+0x208>)
 8103f60:	4293      	cmp	r3, r2
 8103f62:	d908      	bls.n	8103f76 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103f64:	687b      	ldr	r3, [r7, #4]
 8103f66:	681b      	ldr	r3, [r3, #0]
 8103f68:	689a      	ldr	r2, [r3, #8]
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	681b      	ldr	r3, [r3, #0]
 8103f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103f72:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103f74:	e03e      	b.n	8103ff4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103f76:	687b      	ldr	r3, [r7, #4]
 8103f78:	681b      	ldr	r3, [r3, #0]
 8103f7a:	689a      	ldr	r2, [r3, #8]
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	681b      	ldr	r3, [r3, #0]
 8103f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103f84:	609a      	str	r2, [r3, #8]
}
 8103f86:	e035      	b.n	8103ff4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103f88:	68fb      	ldr	r3, [r7, #12]
 8103f8a:	085b      	lsrs	r3, r3, #1
 8103f8c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103f8e:	68fb      	ldr	r3, [r7, #12]
 8103f90:	4a1f      	ldr	r2, [pc, #124]	; (8104010 <ADC_ConfigureBoostMode+0x20c>)
 8103f92:	4293      	cmp	r3, r2
 8103f94:	d808      	bhi.n	8103fa8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103f96:	687b      	ldr	r3, [r7, #4]
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	689a      	ldr	r2, [r3, #8]
 8103f9c:	687b      	ldr	r3, [r7, #4]
 8103f9e:	681b      	ldr	r3, [r3, #0]
 8103fa0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8103fa4:	609a      	str	r2, [r3, #8]
}
 8103fa6:	e025      	b.n	8103ff4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8103fa8:	68fb      	ldr	r3, [r7, #12]
 8103faa:	4a1a      	ldr	r2, [pc, #104]	; (8104014 <ADC_ConfigureBoostMode+0x210>)
 8103fac:	4293      	cmp	r3, r2
 8103fae:	d80a      	bhi.n	8103fc6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103fb0:	687b      	ldr	r3, [r7, #4]
 8103fb2:	681b      	ldr	r3, [r3, #0]
 8103fb4:	689b      	ldr	r3, [r3, #8]
 8103fb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103fba:	687b      	ldr	r3, [r7, #4]
 8103fbc:	681b      	ldr	r3, [r3, #0]
 8103fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103fc2:	609a      	str	r2, [r3, #8]
}
 8103fc4:	e016      	b.n	8103ff4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8103fc6:	68fb      	ldr	r3, [r7, #12]
 8103fc8:	4a13      	ldr	r2, [pc, #76]	; (8104018 <ADC_ConfigureBoostMode+0x214>)
 8103fca:	4293      	cmp	r3, r2
 8103fcc:	d80a      	bhi.n	8103fe4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103fce:	687b      	ldr	r3, [r7, #4]
 8103fd0:	681b      	ldr	r3, [r3, #0]
 8103fd2:	689b      	ldr	r3, [r3, #8]
 8103fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103fd8:	687b      	ldr	r3, [r7, #4]
 8103fda:	681b      	ldr	r3, [r3, #0]
 8103fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103fe0:	609a      	str	r2, [r3, #8]
}
 8103fe2:	e007      	b.n	8103ff4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	681b      	ldr	r3, [r3, #0]
 8103fe8:	689a      	ldr	r2, [r3, #8]
 8103fea:	687b      	ldr	r3, [r7, #4]
 8103fec:	681b      	ldr	r3, [r3, #0]
 8103fee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8103ff2:	609a      	str	r2, [r3, #8]
}
 8103ff4:	bf00      	nop
 8103ff6:	3710      	adds	r7, #16
 8103ff8:	46bd      	mov	sp, r7
 8103ffa:	bd80      	pop	{r7, pc}
 8103ffc:	40022000 	.word	0x40022000
 8104000:	40022100 	.word	0x40022100
 8104004:	40022300 	.word	0x40022300
 8104008:	58026300 	.word	0x58026300
 810400c:	01312d00 	.word	0x01312d00
 8104010:	005f5e10 	.word	0x005f5e10
 8104014:	00bebc20 	.word	0x00bebc20
 8104018:	017d7840 	.word	0x017d7840

0810401c <LL_ADC_IsEnabled>:
{
 810401c:	b480      	push	{r7}
 810401e:	b083      	sub	sp, #12
 8104020:	af00      	add	r7, sp, #0
 8104022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	689b      	ldr	r3, [r3, #8]
 8104028:	f003 0301 	and.w	r3, r3, #1
 810402c:	2b01      	cmp	r3, #1
 810402e:	d101      	bne.n	8104034 <LL_ADC_IsEnabled+0x18>
 8104030:	2301      	movs	r3, #1
 8104032:	e000      	b.n	8104036 <LL_ADC_IsEnabled+0x1a>
 8104034:	2300      	movs	r3, #0
}
 8104036:	4618      	mov	r0, r3
 8104038:	370c      	adds	r7, #12
 810403a:	46bd      	mov	sp, r7
 810403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104040:	4770      	bx	lr

08104042 <LL_ADC_REG_IsConversionOngoing>:
{
 8104042:	b480      	push	{r7}
 8104044:	b083      	sub	sp, #12
 8104046:	af00      	add	r7, sp, #0
 8104048:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810404a:	687b      	ldr	r3, [r7, #4]
 810404c:	689b      	ldr	r3, [r3, #8]
 810404e:	f003 0304 	and.w	r3, r3, #4
 8104052:	2b04      	cmp	r3, #4
 8104054:	d101      	bne.n	810405a <LL_ADC_REG_IsConversionOngoing+0x18>
 8104056:	2301      	movs	r3, #1
 8104058:	e000      	b.n	810405c <LL_ADC_REG_IsConversionOngoing+0x1a>
 810405a:	2300      	movs	r3, #0
}
 810405c:	4618      	mov	r0, r3
 810405e:	370c      	adds	r7, #12
 8104060:	46bd      	mov	sp, r7
 8104062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104066:	4770      	bx	lr

08104068 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8104068:	b590      	push	{r4, r7, lr}
 810406a:	b09f      	sub	sp, #124	; 0x7c
 810406c:	af00      	add	r7, sp, #0
 810406e:	6078      	str	r0, [r7, #4]
 8104070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8104072:	2300      	movs	r3, #0
 8104074:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810407e:	2b01      	cmp	r3, #1
 8104080:	d101      	bne.n	8104086 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8104082:	2302      	movs	r3, #2
 8104084:	e0c4      	b.n	8104210 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8104086:	687b      	ldr	r3, [r7, #4]
 8104088:	2201      	movs	r2, #1
 810408a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 810408e:	2300      	movs	r3, #0
 8104090:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8104092:	2300      	movs	r3, #0
 8104094:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8104096:	687b      	ldr	r3, [r7, #4]
 8104098:	681b      	ldr	r3, [r3, #0]
 810409a:	4a5f      	ldr	r2, [pc, #380]	; (8104218 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810409c:	4293      	cmp	r3, r2
 810409e:	d102      	bne.n	81040a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81040a0:	4b5e      	ldr	r3, [pc, #376]	; (810421c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81040a2:	60bb      	str	r3, [r7, #8]
 81040a4:	e001      	b.n	81040aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81040a6:	2300      	movs	r3, #0
 81040a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81040aa:	68bb      	ldr	r3, [r7, #8]
 81040ac:	2b00      	cmp	r3, #0
 81040ae:	d10b      	bne.n	81040c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81040b4:	f043 0220 	orr.w	r2, r3, #32
 81040b8:	687b      	ldr	r3, [r7, #4]
 81040ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81040bc:	687b      	ldr	r3, [r7, #4]
 81040be:	2200      	movs	r2, #0
 81040c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 81040c4:	2301      	movs	r3, #1
 81040c6:	e0a3      	b.n	8104210 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81040c8:	68bb      	ldr	r3, [r7, #8]
 81040ca:	4618      	mov	r0, r3
 81040cc:	f7ff ffb9 	bl	8104042 <LL_ADC_REG_IsConversionOngoing>
 81040d0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81040d2:	687b      	ldr	r3, [r7, #4]
 81040d4:	681b      	ldr	r3, [r3, #0]
 81040d6:	4618      	mov	r0, r3
 81040d8:	f7ff ffb3 	bl	8104042 <LL_ADC_REG_IsConversionOngoing>
 81040dc:	4603      	mov	r3, r0
 81040de:	2b00      	cmp	r3, #0
 81040e0:	f040 8085 	bne.w	81041ee <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81040e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81040e6:	2b00      	cmp	r3, #0
 81040e8:	f040 8081 	bne.w	81041ee <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	4a49      	ldr	r2, [pc, #292]	; (8104218 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81040f2:	4293      	cmp	r3, r2
 81040f4:	d004      	beq.n	8104100 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 81040f6:	687b      	ldr	r3, [r7, #4]
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	4a48      	ldr	r2, [pc, #288]	; (810421c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81040fc:	4293      	cmp	r3, r2
 81040fe:	d101      	bne.n	8104104 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8104100:	4b47      	ldr	r3, [pc, #284]	; (8104220 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8104102:	e000      	b.n	8104106 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8104104:	4b47      	ldr	r3, [pc, #284]	; (8104224 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8104106:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104108:	683b      	ldr	r3, [r7, #0]
 810410a:	681b      	ldr	r3, [r3, #0]
 810410c:	2b00      	cmp	r3, #0
 810410e:	d03b      	beq.n	8104188 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8104110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104112:	689b      	ldr	r3, [r3, #8]
 8104114:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8104118:	683b      	ldr	r3, [r7, #0]
 810411a:	685b      	ldr	r3, [r3, #4]
 810411c:	431a      	orrs	r2, r3
 810411e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104120:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104122:	687b      	ldr	r3, [r7, #4]
 8104124:	681b      	ldr	r3, [r3, #0]
 8104126:	4a3c      	ldr	r2, [pc, #240]	; (8104218 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104128:	4293      	cmp	r3, r2
 810412a:	d004      	beq.n	8104136 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	681b      	ldr	r3, [r3, #0]
 8104130:	4a3a      	ldr	r2, [pc, #232]	; (810421c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104132:	4293      	cmp	r3, r2
 8104134:	d10e      	bne.n	8104154 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8104136:	4838      	ldr	r0, [pc, #224]	; (8104218 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8104138:	f7ff ff70 	bl	810401c <LL_ADC_IsEnabled>
 810413c:	4604      	mov	r4, r0
 810413e:	4837      	ldr	r0, [pc, #220]	; (810421c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104140:	f7ff ff6c 	bl	810401c <LL_ADC_IsEnabled>
 8104144:	4603      	mov	r3, r0
 8104146:	4323      	orrs	r3, r4
 8104148:	2b00      	cmp	r3, #0
 810414a:	bf0c      	ite	eq
 810414c:	2301      	moveq	r3, #1
 810414e:	2300      	movne	r3, #0
 8104150:	b2db      	uxtb	r3, r3
 8104152:	e008      	b.n	8104166 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8104154:	4834      	ldr	r0, [pc, #208]	; (8104228 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104156:	f7ff ff61 	bl	810401c <LL_ADC_IsEnabled>
 810415a:	4603      	mov	r3, r0
 810415c:	2b00      	cmp	r3, #0
 810415e:	bf0c      	ite	eq
 8104160:	2301      	moveq	r3, #1
 8104162:	2300      	movne	r3, #0
 8104164:	b2db      	uxtb	r3, r3
 8104166:	2b00      	cmp	r3, #0
 8104168:	d04b      	beq.n	8104202 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810416a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810416c:	689b      	ldr	r3, [r3, #8]
 810416e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8104172:	f023 030f 	bic.w	r3, r3, #15
 8104176:	683a      	ldr	r2, [r7, #0]
 8104178:	6811      	ldr	r1, [r2, #0]
 810417a:	683a      	ldr	r2, [r7, #0]
 810417c:	6892      	ldr	r2, [r2, #8]
 810417e:	430a      	orrs	r2, r1
 8104180:	431a      	orrs	r2, r3
 8104182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104184:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104186:	e03c      	b.n	8104202 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8104188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810418a:	689b      	ldr	r3, [r3, #8]
 810418c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8104190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104192:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104194:	687b      	ldr	r3, [r7, #4]
 8104196:	681b      	ldr	r3, [r3, #0]
 8104198:	4a1f      	ldr	r2, [pc, #124]	; (8104218 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810419a:	4293      	cmp	r3, r2
 810419c:	d004      	beq.n	81041a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	681b      	ldr	r3, [r3, #0]
 81041a2:	4a1e      	ldr	r2, [pc, #120]	; (810421c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81041a4:	4293      	cmp	r3, r2
 81041a6:	d10e      	bne.n	81041c6 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81041a8:	481b      	ldr	r0, [pc, #108]	; (8104218 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81041aa:	f7ff ff37 	bl	810401c <LL_ADC_IsEnabled>
 81041ae:	4604      	mov	r4, r0
 81041b0:	481a      	ldr	r0, [pc, #104]	; (810421c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81041b2:	f7ff ff33 	bl	810401c <LL_ADC_IsEnabled>
 81041b6:	4603      	mov	r3, r0
 81041b8:	4323      	orrs	r3, r4
 81041ba:	2b00      	cmp	r3, #0
 81041bc:	bf0c      	ite	eq
 81041be:	2301      	moveq	r3, #1
 81041c0:	2300      	movne	r3, #0
 81041c2:	b2db      	uxtb	r3, r3
 81041c4:	e008      	b.n	81041d8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81041c6:	4818      	ldr	r0, [pc, #96]	; (8104228 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81041c8:	f7ff ff28 	bl	810401c <LL_ADC_IsEnabled>
 81041cc:	4603      	mov	r3, r0
 81041ce:	2b00      	cmp	r3, #0
 81041d0:	bf0c      	ite	eq
 81041d2:	2301      	moveq	r3, #1
 81041d4:	2300      	movne	r3, #0
 81041d6:	b2db      	uxtb	r3, r3
 81041d8:	2b00      	cmp	r3, #0
 81041da:	d012      	beq.n	8104202 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81041dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81041de:	689b      	ldr	r3, [r3, #8]
 81041e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81041e4:	f023 030f 	bic.w	r3, r3, #15
 81041e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81041ea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81041ec:	e009      	b.n	8104202 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81041ee:	687b      	ldr	r3, [r7, #4]
 81041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81041f2:	f043 0220 	orr.w	r2, r3, #32
 81041f6:	687b      	ldr	r3, [r7, #4]
 81041f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81041fa:	2301      	movs	r3, #1
 81041fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8104200:	e000      	b.n	8104204 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104202:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	2200      	movs	r2, #0
 8104208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 810420c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8104210:	4618      	mov	r0, r3
 8104212:	377c      	adds	r7, #124	; 0x7c
 8104214:	46bd      	mov	sp, r7
 8104216:	bd90      	pop	{r4, r7, pc}
 8104218:	40022000 	.word	0x40022000
 810421c:	40022100 	.word	0x40022100
 8104220:	40022300 	.word	0x40022300
 8104224:	58026300 	.word	0x58026300
 8104228:	58026000 	.word	0x58026000

0810422c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810422c:	b480      	push	{r7}
 810422e:	b085      	sub	sp, #20
 8104230:	af00      	add	r7, sp, #0
 8104232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	f003 0307 	and.w	r3, r3, #7
 810423a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810423c:	4b0c      	ldr	r3, [pc, #48]	; (8104270 <__NVIC_SetPriorityGrouping+0x44>)
 810423e:	68db      	ldr	r3, [r3, #12]
 8104240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8104242:	68ba      	ldr	r2, [r7, #8]
 8104244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8104248:	4013      	ands	r3, r2
 810424a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810424c:	68fb      	ldr	r3, [r7, #12]
 810424e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104250:	68bb      	ldr	r3, [r7, #8]
 8104252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8104258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810425c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810425e:	4a04      	ldr	r2, [pc, #16]	; (8104270 <__NVIC_SetPriorityGrouping+0x44>)
 8104260:	68bb      	ldr	r3, [r7, #8]
 8104262:	60d3      	str	r3, [r2, #12]
}
 8104264:	bf00      	nop
 8104266:	3714      	adds	r7, #20
 8104268:	46bd      	mov	sp, r7
 810426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810426e:	4770      	bx	lr
 8104270:	e000ed00 	.word	0xe000ed00

08104274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8104274:	b480      	push	{r7}
 8104276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104278:	4b04      	ldr	r3, [pc, #16]	; (810428c <__NVIC_GetPriorityGrouping+0x18>)
 810427a:	68db      	ldr	r3, [r3, #12]
 810427c:	0a1b      	lsrs	r3, r3, #8
 810427e:	f003 0307 	and.w	r3, r3, #7
}
 8104282:	4618      	mov	r0, r3
 8104284:	46bd      	mov	sp, r7
 8104286:	f85d 7b04 	ldr.w	r7, [sp], #4
 810428a:	4770      	bx	lr
 810428c:	e000ed00 	.word	0xe000ed00

08104290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104290:	b480      	push	{r7}
 8104292:	b083      	sub	sp, #12
 8104294:	af00      	add	r7, sp, #0
 8104296:	4603      	mov	r3, r0
 8104298:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810429a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810429e:	2b00      	cmp	r3, #0
 81042a0:	db0b      	blt.n	81042ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81042a2:	88fb      	ldrh	r3, [r7, #6]
 81042a4:	f003 021f 	and.w	r2, r3, #31
 81042a8:	4907      	ldr	r1, [pc, #28]	; (81042c8 <__NVIC_EnableIRQ+0x38>)
 81042aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81042ae:	095b      	lsrs	r3, r3, #5
 81042b0:	2001      	movs	r0, #1
 81042b2:	fa00 f202 	lsl.w	r2, r0, r2
 81042b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81042ba:	bf00      	nop
 81042bc:	370c      	adds	r7, #12
 81042be:	46bd      	mov	sp, r7
 81042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042c4:	4770      	bx	lr
 81042c6:	bf00      	nop
 81042c8:	e000e100 	.word	0xe000e100

081042cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81042cc:	b480      	push	{r7}
 81042ce:	b083      	sub	sp, #12
 81042d0:	af00      	add	r7, sp, #0
 81042d2:	4603      	mov	r3, r0
 81042d4:	6039      	str	r1, [r7, #0]
 81042d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81042d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81042dc:	2b00      	cmp	r3, #0
 81042de:	db0a      	blt.n	81042f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81042e0:	683b      	ldr	r3, [r7, #0]
 81042e2:	b2da      	uxtb	r2, r3
 81042e4:	490c      	ldr	r1, [pc, #48]	; (8104318 <__NVIC_SetPriority+0x4c>)
 81042e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81042ea:	0112      	lsls	r2, r2, #4
 81042ec:	b2d2      	uxtb	r2, r2
 81042ee:	440b      	add	r3, r1
 81042f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81042f4:	e00a      	b.n	810430c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81042f6:	683b      	ldr	r3, [r7, #0]
 81042f8:	b2da      	uxtb	r2, r3
 81042fa:	4908      	ldr	r1, [pc, #32]	; (810431c <__NVIC_SetPriority+0x50>)
 81042fc:	88fb      	ldrh	r3, [r7, #6]
 81042fe:	f003 030f 	and.w	r3, r3, #15
 8104302:	3b04      	subs	r3, #4
 8104304:	0112      	lsls	r2, r2, #4
 8104306:	b2d2      	uxtb	r2, r2
 8104308:	440b      	add	r3, r1
 810430a:	761a      	strb	r2, [r3, #24]
}
 810430c:	bf00      	nop
 810430e:	370c      	adds	r7, #12
 8104310:	46bd      	mov	sp, r7
 8104312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104316:	4770      	bx	lr
 8104318:	e000e100 	.word	0xe000e100
 810431c:	e000ed00 	.word	0xe000ed00

08104320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104320:	b480      	push	{r7}
 8104322:	b089      	sub	sp, #36	; 0x24
 8104324:	af00      	add	r7, sp, #0
 8104326:	60f8      	str	r0, [r7, #12]
 8104328:	60b9      	str	r1, [r7, #8]
 810432a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810432c:	68fb      	ldr	r3, [r7, #12]
 810432e:	f003 0307 	and.w	r3, r3, #7
 8104332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8104334:	69fb      	ldr	r3, [r7, #28]
 8104336:	f1c3 0307 	rsb	r3, r3, #7
 810433a:	2b04      	cmp	r3, #4
 810433c:	bf28      	it	cs
 810433e:	2304      	movcs	r3, #4
 8104340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8104342:	69fb      	ldr	r3, [r7, #28]
 8104344:	3304      	adds	r3, #4
 8104346:	2b06      	cmp	r3, #6
 8104348:	d902      	bls.n	8104350 <NVIC_EncodePriority+0x30>
 810434a:	69fb      	ldr	r3, [r7, #28]
 810434c:	3b03      	subs	r3, #3
 810434e:	e000      	b.n	8104352 <NVIC_EncodePriority+0x32>
 8104350:	2300      	movs	r3, #0
 8104352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104354:	f04f 32ff 	mov.w	r2, #4294967295
 8104358:	69bb      	ldr	r3, [r7, #24]
 810435a:	fa02 f303 	lsl.w	r3, r2, r3
 810435e:	43da      	mvns	r2, r3
 8104360:	68bb      	ldr	r3, [r7, #8]
 8104362:	401a      	ands	r2, r3
 8104364:	697b      	ldr	r3, [r7, #20]
 8104366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104368:	f04f 31ff 	mov.w	r1, #4294967295
 810436c:	697b      	ldr	r3, [r7, #20]
 810436e:	fa01 f303 	lsl.w	r3, r1, r3
 8104372:	43d9      	mvns	r1, r3
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104378:	4313      	orrs	r3, r2
         );
}
 810437a:	4618      	mov	r0, r3
 810437c:	3724      	adds	r7, #36	; 0x24
 810437e:	46bd      	mov	sp, r7
 8104380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104384:	4770      	bx	lr
	...

08104388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8104388:	b580      	push	{r7, lr}
 810438a:	b082      	sub	sp, #8
 810438c:	af00      	add	r7, sp, #0
 810438e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8104390:	687b      	ldr	r3, [r7, #4]
 8104392:	3b01      	subs	r3, #1
 8104394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104398:	d301      	bcc.n	810439e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810439a:	2301      	movs	r3, #1
 810439c:	e00f      	b.n	81043be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810439e:	4a0a      	ldr	r2, [pc, #40]	; (81043c8 <SysTick_Config+0x40>)
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	3b01      	subs	r3, #1
 81043a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81043a6:	210f      	movs	r1, #15
 81043a8:	f04f 30ff 	mov.w	r0, #4294967295
 81043ac:	f7ff ff8e 	bl	81042cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81043b0:	4b05      	ldr	r3, [pc, #20]	; (81043c8 <SysTick_Config+0x40>)
 81043b2:	2200      	movs	r2, #0
 81043b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81043b6:	4b04      	ldr	r3, [pc, #16]	; (81043c8 <SysTick_Config+0x40>)
 81043b8:	2207      	movs	r2, #7
 81043ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81043bc:	2300      	movs	r3, #0
}
 81043be:	4618      	mov	r0, r3
 81043c0:	3708      	adds	r7, #8
 81043c2:	46bd      	mov	sp, r7
 81043c4:	bd80      	pop	{r7, pc}
 81043c6:	bf00      	nop
 81043c8:	e000e010 	.word	0xe000e010

081043cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81043cc:	b580      	push	{r7, lr}
 81043ce:	b082      	sub	sp, #8
 81043d0:	af00      	add	r7, sp, #0
 81043d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81043d4:	6878      	ldr	r0, [r7, #4]
 81043d6:	f7ff ff29 	bl	810422c <__NVIC_SetPriorityGrouping>
}
 81043da:	bf00      	nop
 81043dc:	3708      	adds	r7, #8
 81043de:	46bd      	mov	sp, r7
 81043e0:	bd80      	pop	{r7, pc}

081043e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81043e2:	b580      	push	{r7, lr}
 81043e4:	b086      	sub	sp, #24
 81043e6:	af00      	add	r7, sp, #0
 81043e8:	4603      	mov	r3, r0
 81043ea:	60b9      	str	r1, [r7, #8]
 81043ec:	607a      	str	r2, [r7, #4]
 81043ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81043f0:	f7ff ff40 	bl	8104274 <__NVIC_GetPriorityGrouping>
 81043f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81043f6:	687a      	ldr	r2, [r7, #4]
 81043f8:	68b9      	ldr	r1, [r7, #8]
 81043fa:	6978      	ldr	r0, [r7, #20]
 81043fc:	f7ff ff90 	bl	8104320 <NVIC_EncodePriority>
 8104400:	4602      	mov	r2, r0
 8104402:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8104406:	4611      	mov	r1, r2
 8104408:	4618      	mov	r0, r3
 810440a:	f7ff ff5f 	bl	81042cc <__NVIC_SetPriority>
}
 810440e:	bf00      	nop
 8104410:	3718      	adds	r7, #24
 8104412:	46bd      	mov	sp, r7
 8104414:	bd80      	pop	{r7, pc}

08104416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104416:	b580      	push	{r7, lr}
 8104418:	b082      	sub	sp, #8
 810441a:	af00      	add	r7, sp, #0
 810441c:	4603      	mov	r3, r0
 810441e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8104420:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104424:	4618      	mov	r0, r3
 8104426:	f7ff ff33 	bl	8104290 <__NVIC_EnableIRQ>
}
 810442a:	bf00      	nop
 810442c:	3708      	adds	r7, #8
 810442e:	46bd      	mov	sp, r7
 8104430:	bd80      	pop	{r7, pc}

08104432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8104432:	b580      	push	{r7, lr}
 8104434:	b082      	sub	sp, #8
 8104436:	af00      	add	r7, sp, #0
 8104438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810443a:	6878      	ldr	r0, [r7, #4]
 810443c:	f7ff ffa4 	bl	8104388 <SysTick_Config>
 8104440:	4603      	mov	r3, r0
}
 8104442:	4618      	mov	r0, r3
 8104444:	3708      	adds	r7, #8
 8104446:	46bd      	mov	sp, r7
 8104448:	bd80      	pop	{r7, pc}
	...

0810444c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810444c:	b480      	push	{r7}
 810444e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104450:	4b07      	ldr	r3, [pc, #28]	; (8104470 <HAL_GetCurrentCPUID+0x24>)
 8104452:	681b      	ldr	r3, [r3, #0]
 8104454:	091b      	lsrs	r3, r3, #4
 8104456:	f003 030f 	and.w	r3, r3, #15
 810445a:	2b07      	cmp	r3, #7
 810445c:	d101      	bne.n	8104462 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810445e:	2303      	movs	r3, #3
 8104460:	e000      	b.n	8104464 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8104462:	2301      	movs	r3, #1
  }
}
 8104464:	4618      	mov	r0, r3
 8104466:	46bd      	mov	sp, r7
 8104468:	f85d 7b04 	ldr.w	r7, [sp], #4
 810446c:	4770      	bx	lr
 810446e:	bf00      	nop
 8104470:	e000ed00 	.word	0xe000ed00

08104474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104474:	b480      	push	{r7}
 8104476:	b089      	sub	sp, #36	; 0x24
 8104478:	af00      	add	r7, sp, #0
 810447a:	6078      	str	r0, [r7, #4]
 810447c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810447e:	2300      	movs	r3, #0
 8104480:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104482:	4b89      	ldr	r3, [pc, #548]	; (81046a8 <HAL_GPIO_Init+0x234>)
 8104484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104486:	e194      	b.n	81047b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104488:	683b      	ldr	r3, [r7, #0]
 810448a:	681a      	ldr	r2, [r3, #0]
 810448c:	2101      	movs	r1, #1
 810448e:	69fb      	ldr	r3, [r7, #28]
 8104490:	fa01 f303 	lsl.w	r3, r1, r3
 8104494:	4013      	ands	r3, r2
 8104496:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104498:	693b      	ldr	r3, [r7, #16]
 810449a:	2b00      	cmp	r3, #0
 810449c:	f000 8186 	beq.w	81047ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81044a0:	683b      	ldr	r3, [r7, #0]
 81044a2:	685b      	ldr	r3, [r3, #4]
 81044a4:	f003 0303 	and.w	r3, r3, #3
 81044a8:	2b01      	cmp	r3, #1
 81044aa:	d005      	beq.n	81044b8 <HAL_GPIO_Init+0x44>
 81044ac:	683b      	ldr	r3, [r7, #0]
 81044ae:	685b      	ldr	r3, [r3, #4]
 81044b0:	f003 0303 	and.w	r3, r3, #3
 81044b4:	2b02      	cmp	r3, #2
 81044b6:	d130      	bne.n	810451a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81044b8:	687b      	ldr	r3, [r7, #4]
 81044ba:	689b      	ldr	r3, [r3, #8]
 81044bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81044be:	69fb      	ldr	r3, [r7, #28]
 81044c0:	005b      	lsls	r3, r3, #1
 81044c2:	2203      	movs	r2, #3
 81044c4:	fa02 f303 	lsl.w	r3, r2, r3
 81044c8:	43db      	mvns	r3, r3
 81044ca:	69ba      	ldr	r2, [r7, #24]
 81044cc:	4013      	ands	r3, r2
 81044ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81044d0:	683b      	ldr	r3, [r7, #0]
 81044d2:	68da      	ldr	r2, [r3, #12]
 81044d4:	69fb      	ldr	r3, [r7, #28]
 81044d6:	005b      	lsls	r3, r3, #1
 81044d8:	fa02 f303 	lsl.w	r3, r2, r3
 81044dc:	69ba      	ldr	r2, [r7, #24]
 81044de:	4313      	orrs	r3, r2
 81044e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81044e2:	687b      	ldr	r3, [r7, #4]
 81044e4:	69ba      	ldr	r2, [r7, #24]
 81044e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81044e8:	687b      	ldr	r3, [r7, #4]
 81044ea:	685b      	ldr	r3, [r3, #4]
 81044ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81044ee:	2201      	movs	r2, #1
 81044f0:	69fb      	ldr	r3, [r7, #28]
 81044f2:	fa02 f303 	lsl.w	r3, r2, r3
 81044f6:	43db      	mvns	r3, r3
 81044f8:	69ba      	ldr	r2, [r7, #24]
 81044fa:	4013      	ands	r3, r2
 81044fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81044fe:	683b      	ldr	r3, [r7, #0]
 8104500:	685b      	ldr	r3, [r3, #4]
 8104502:	091b      	lsrs	r3, r3, #4
 8104504:	f003 0201 	and.w	r2, r3, #1
 8104508:	69fb      	ldr	r3, [r7, #28]
 810450a:	fa02 f303 	lsl.w	r3, r2, r3
 810450e:	69ba      	ldr	r2, [r7, #24]
 8104510:	4313      	orrs	r3, r2
 8104512:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104514:	687b      	ldr	r3, [r7, #4]
 8104516:	69ba      	ldr	r2, [r7, #24]
 8104518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810451a:	683b      	ldr	r3, [r7, #0]
 810451c:	685b      	ldr	r3, [r3, #4]
 810451e:	f003 0303 	and.w	r3, r3, #3
 8104522:	2b03      	cmp	r3, #3
 8104524:	d017      	beq.n	8104556 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104526:	687b      	ldr	r3, [r7, #4]
 8104528:	68db      	ldr	r3, [r3, #12]
 810452a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810452c:	69fb      	ldr	r3, [r7, #28]
 810452e:	005b      	lsls	r3, r3, #1
 8104530:	2203      	movs	r2, #3
 8104532:	fa02 f303 	lsl.w	r3, r2, r3
 8104536:	43db      	mvns	r3, r3
 8104538:	69ba      	ldr	r2, [r7, #24]
 810453a:	4013      	ands	r3, r2
 810453c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810453e:	683b      	ldr	r3, [r7, #0]
 8104540:	689a      	ldr	r2, [r3, #8]
 8104542:	69fb      	ldr	r3, [r7, #28]
 8104544:	005b      	lsls	r3, r3, #1
 8104546:	fa02 f303 	lsl.w	r3, r2, r3
 810454a:	69ba      	ldr	r2, [r7, #24]
 810454c:	4313      	orrs	r3, r2
 810454e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104550:	687b      	ldr	r3, [r7, #4]
 8104552:	69ba      	ldr	r2, [r7, #24]
 8104554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104556:	683b      	ldr	r3, [r7, #0]
 8104558:	685b      	ldr	r3, [r3, #4]
 810455a:	f003 0303 	and.w	r3, r3, #3
 810455e:	2b02      	cmp	r3, #2
 8104560:	d123      	bne.n	81045aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104562:	69fb      	ldr	r3, [r7, #28]
 8104564:	08da      	lsrs	r2, r3, #3
 8104566:	687b      	ldr	r3, [r7, #4]
 8104568:	3208      	adds	r2, #8
 810456a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810456e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104570:	69fb      	ldr	r3, [r7, #28]
 8104572:	f003 0307 	and.w	r3, r3, #7
 8104576:	009b      	lsls	r3, r3, #2
 8104578:	220f      	movs	r2, #15
 810457a:	fa02 f303 	lsl.w	r3, r2, r3
 810457e:	43db      	mvns	r3, r3
 8104580:	69ba      	ldr	r2, [r7, #24]
 8104582:	4013      	ands	r3, r2
 8104584:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104586:	683b      	ldr	r3, [r7, #0]
 8104588:	691a      	ldr	r2, [r3, #16]
 810458a:	69fb      	ldr	r3, [r7, #28]
 810458c:	f003 0307 	and.w	r3, r3, #7
 8104590:	009b      	lsls	r3, r3, #2
 8104592:	fa02 f303 	lsl.w	r3, r2, r3
 8104596:	69ba      	ldr	r2, [r7, #24]
 8104598:	4313      	orrs	r3, r2
 810459a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810459c:	69fb      	ldr	r3, [r7, #28]
 810459e:	08da      	lsrs	r2, r3, #3
 81045a0:	687b      	ldr	r3, [r7, #4]
 81045a2:	3208      	adds	r2, #8
 81045a4:	69b9      	ldr	r1, [r7, #24]
 81045a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81045aa:	687b      	ldr	r3, [r7, #4]
 81045ac:	681b      	ldr	r3, [r3, #0]
 81045ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81045b0:	69fb      	ldr	r3, [r7, #28]
 81045b2:	005b      	lsls	r3, r3, #1
 81045b4:	2203      	movs	r2, #3
 81045b6:	fa02 f303 	lsl.w	r3, r2, r3
 81045ba:	43db      	mvns	r3, r3
 81045bc:	69ba      	ldr	r2, [r7, #24]
 81045be:	4013      	ands	r3, r2
 81045c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81045c2:	683b      	ldr	r3, [r7, #0]
 81045c4:	685b      	ldr	r3, [r3, #4]
 81045c6:	f003 0203 	and.w	r2, r3, #3
 81045ca:	69fb      	ldr	r3, [r7, #28]
 81045cc:	005b      	lsls	r3, r3, #1
 81045ce:	fa02 f303 	lsl.w	r3, r2, r3
 81045d2:	69ba      	ldr	r2, [r7, #24]
 81045d4:	4313      	orrs	r3, r2
 81045d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	69ba      	ldr	r2, [r7, #24]
 81045dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81045de:	683b      	ldr	r3, [r7, #0]
 81045e0:	685b      	ldr	r3, [r3, #4]
 81045e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81045e6:	2b00      	cmp	r3, #0
 81045e8:	f000 80e0 	beq.w	81047ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81045ec:	4b2f      	ldr	r3, [pc, #188]	; (81046ac <HAL_GPIO_Init+0x238>)
 81045ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81045f2:	4a2e      	ldr	r2, [pc, #184]	; (81046ac <HAL_GPIO_Init+0x238>)
 81045f4:	f043 0302 	orr.w	r3, r3, #2
 81045f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81045fc:	4b2b      	ldr	r3, [pc, #172]	; (81046ac <HAL_GPIO_Init+0x238>)
 81045fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104602:	f003 0302 	and.w	r3, r3, #2
 8104606:	60fb      	str	r3, [r7, #12]
 8104608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810460a:	4a29      	ldr	r2, [pc, #164]	; (81046b0 <HAL_GPIO_Init+0x23c>)
 810460c:	69fb      	ldr	r3, [r7, #28]
 810460e:	089b      	lsrs	r3, r3, #2
 8104610:	3302      	adds	r3, #2
 8104612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104618:	69fb      	ldr	r3, [r7, #28]
 810461a:	f003 0303 	and.w	r3, r3, #3
 810461e:	009b      	lsls	r3, r3, #2
 8104620:	220f      	movs	r2, #15
 8104622:	fa02 f303 	lsl.w	r3, r2, r3
 8104626:	43db      	mvns	r3, r3
 8104628:	69ba      	ldr	r2, [r7, #24]
 810462a:	4013      	ands	r3, r2
 810462c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810462e:	687b      	ldr	r3, [r7, #4]
 8104630:	4a20      	ldr	r2, [pc, #128]	; (81046b4 <HAL_GPIO_Init+0x240>)
 8104632:	4293      	cmp	r3, r2
 8104634:	d052      	beq.n	81046dc <HAL_GPIO_Init+0x268>
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	4a1f      	ldr	r2, [pc, #124]	; (81046b8 <HAL_GPIO_Init+0x244>)
 810463a:	4293      	cmp	r3, r2
 810463c:	d031      	beq.n	81046a2 <HAL_GPIO_Init+0x22e>
 810463e:	687b      	ldr	r3, [r7, #4]
 8104640:	4a1e      	ldr	r2, [pc, #120]	; (81046bc <HAL_GPIO_Init+0x248>)
 8104642:	4293      	cmp	r3, r2
 8104644:	d02b      	beq.n	810469e <HAL_GPIO_Init+0x22a>
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	4a1d      	ldr	r2, [pc, #116]	; (81046c0 <HAL_GPIO_Init+0x24c>)
 810464a:	4293      	cmp	r3, r2
 810464c:	d025      	beq.n	810469a <HAL_GPIO_Init+0x226>
 810464e:	687b      	ldr	r3, [r7, #4]
 8104650:	4a1c      	ldr	r2, [pc, #112]	; (81046c4 <HAL_GPIO_Init+0x250>)
 8104652:	4293      	cmp	r3, r2
 8104654:	d01f      	beq.n	8104696 <HAL_GPIO_Init+0x222>
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	4a1b      	ldr	r2, [pc, #108]	; (81046c8 <HAL_GPIO_Init+0x254>)
 810465a:	4293      	cmp	r3, r2
 810465c:	d019      	beq.n	8104692 <HAL_GPIO_Init+0x21e>
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	4a1a      	ldr	r2, [pc, #104]	; (81046cc <HAL_GPIO_Init+0x258>)
 8104662:	4293      	cmp	r3, r2
 8104664:	d013      	beq.n	810468e <HAL_GPIO_Init+0x21a>
 8104666:	687b      	ldr	r3, [r7, #4]
 8104668:	4a19      	ldr	r2, [pc, #100]	; (81046d0 <HAL_GPIO_Init+0x25c>)
 810466a:	4293      	cmp	r3, r2
 810466c:	d00d      	beq.n	810468a <HAL_GPIO_Init+0x216>
 810466e:	687b      	ldr	r3, [r7, #4]
 8104670:	4a18      	ldr	r2, [pc, #96]	; (81046d4 <HAL_GPIO_Init+0x260>)
 8104672:	4293      	cmp	r3, r2
 8104674:	d007      	beq.n	8104686 <HAL_GPIO_Init+0x212>
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	4a17      	ldr	r2, [pc, #92]	; (81046d8 <HAL_GPIO_Init+0x264>)
 810467a:	4293      	cmp	r3, r2
 810467c:	d101      	bne.n	8104682 <HAL_GPIO_Init+0x20e>
 810467e:	2309      	movs	r3, #9
 8104680:	e02d      	b.n	81046de <HAL_GPIO_Init+0x26a>
 8104682:	230a      	movs	r3, #10
 8104684:	e02b      	b.n	81046de <HAL_GPIO_Init+0x26a>
 8104686:	2308      	movs	r3, #8
 8104688:	e029      	b.n	81046de <HAL_GPIO_Init+0x26a>
 810468a:	2307      	movs	r3, #7
 810468c:	e027      	b.n	81046de <HAL_GPIO_Init+0x26a>
 810468e:	2306      	movs	r3, #6
 8104690:	e025      	b.n	81046de <HAL_GPIO_Init+0x26a>
 8104692:	2305      	movs	r3, #5
 8104694:	e023      	b.n	81046de <HAL_GPIO_Init+0x26a>
 8104696:	2304      	movs	r3, #4
 8104698:	e021      	b.n	81046de <HAL_GPIO_Init+0x26a>
 810469a:	2303      	movs	r3, #3
 810469c:	e01f      	b.n	81046de <HAL_GPIO_Init+0x26a>
 810469e:	2302      	movs	r3, #2
 81046a0:	e01d      	b.n	81046de <HAL_GPIO_Init+0x26a>
 81046a2:	2301      	movs	r3, #1
 81046a4:	e01b      	b.n	81046de <HAL_GPIO_Init+0x26a>
 81046a6:	bf00      	nop
 81046a8:	580000c0 	.word	0x580000c0
 81046ac:	58024400 	.word	0x58024400
 81046b0:	58000400 	.word	0x58000400
 81046b4:	58020000 	.word	0x58020000
 81046b8:	58020400 	.word	0x58020400
 81046bc:	58020800 	.word	0x58020800
 81046c0:	58020c00 	.word	0x58020c00
 81046c4:	58021000 	.word	0x58021000
 81046c8:	58021400 	.word	0x58021400
 81046cc:	58021800 	.word	0x58021800
 81046d0:	58021c00 	.word	0x58021c00
 81046d4:	58022000 	.word	0x58022000
 81046d8:	58022400 	.word	0x58022400
 81046dc:	2300      	movs	r3, #0
 81046de:	69fa      	ldr	r2, [r7, #28]
 81046e0:	f002 0203 	and.w	r2, r2, #3
 81046e4:	0092      	lsls	r2, r2, #2
 81046e6:	4093      	lsls	r3, r2
 81046e8:	69ba      	ldr	r2, [r7, #24]
 81046ea:	4313      	orrs	r3, r2
 81046ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81046ee:	4938      	ldr	r1, [pc, #224]	; (81047d0 <HAL_GPIO_Init+0x35c>)
 81046f0:	69fb      	ldr	r3, [r7, #28]
 81046f2:	089b      	lsrs	r3, r3, #2
 81046f4:	3302      	adds	r3, #2
 81046f6:	69ba      	ldr	r2, [r7, #24]
 81046f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81046fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104704:	693b      	ldr	r3, [r7, #16]
 8104706:	43db      	mvns	r3, r3
 8104708:	69ba      	ldr	r2, [r7, #24]
 810470a:	4013      	ands	r3, r2
 810470c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810470e:	683b      	ldr	r3, [r7, #0]
 8104710:	685b      	ldr	r3, [r3, #4]
 8104712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104716:	2b00      	cmp	r3, #0
 8104718:	d003      	beq.n	8104722 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810471a:	69ba      	ldr	r2, [r7, #24]
 810471c:	693b      	ldr	r3, [r7, #16]
 810471e:	4313      	orrs	r3, r2
 8104720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104726:	69bb      	ldr	r3, [r7, #24]
 8104728:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810472a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810472e:	685b      	ldr	r3, [r3, #4]
 8104730:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104732:	693b      	ldr	r3, [r7, #16]
 8104734:	43db      	mvns	r3, r3
 8104736:	69ba      	ldr	r2, [r7, #24]
 8104738:	4013      	ands	r3, r2
 810473a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810473c:	683b      	ldr	r3, [r7, #0]
 810473e:	685b      	ldr	r3, [r3, #4]
 8104740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104744:	2b00      	cmp	r3, #0
 8104746:	d003      	beq.n	8104750 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8104748:	69ba      	ldr	r2, [r7, #24]
 810474a:	693b      	ldr	r3, [r7, #16]
 810474c:	4313      	orrs	r3, r2
 810474e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104754:	69bb      	ldr	r3, [r7, #24]
 8104756:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104758:	697b      	ldr	r3, [r7, #20]
 810475a:	685b      	ldr	r3, [r3, #4]
 810475c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810475e:	693b      	ldr	r3, [r7, #16]
 8104760:	43db      	mvns	r3, r3
 8104762:	69ba      	ldr	r2, [r7, #24]
 8104764:	4013      	ands	r3, r2
 8104766:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104768:	683b      	ldr	r3, [r7, #0]
 810476a:	685b      	ldr	r3, [r3, #4]
 810476c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104770:	2b00      	cmp	r3, #0
 8104772:	d003      	beq.n	810477c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8104774:	69ba      	ldr	r2, [r7, #24]
 8104776:	693b      	ldr	r3, [r7, #16]
 8104778:	4313      	orrs	r3, r2
 810477a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810477c:	697b      	ldr	r3, [r7, #20]
 810477e:	69ba      	ldr	r2, [r7, #24]
 8104780:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104782:	697b      	ldr	r3, [r7, #20]
 8104784:	681b      	ldr	r3, [r3, #0]
 8104786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104788:	693b      	ldr	r3, [r7, #16]
 810478a:	43db      	mvns	r3, r3
 810478c:	69ba      	ldr	r2, [r7, #24]
 810478e:	4013      	ands	r3, r2
 8104790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8104792:	683b      	ldr	r3, [r7, #0]
 8104794:	685b      	ldr	r3, [r3, #4]
 8104796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810479a:	2b00      	cmp	r3, #0
 810479c:	d003      	beq.n	81047a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810479e:	69ba      	ldr	r2, [r7, #24]
 81047a0:	693b      	ldr	r3, [r7, #16]
 81047a2:	4313      	orrs	r3, r2
 81047a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81047a6:	697b      	ldr	r3, [r7, #20]
 81047a8:	69ba      	ldr	r2, [r7, #24]
 81047aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81047ac:	69fb      	ldr	r3, [r7, #28]
 81047ae:	3301      	adds	r3, #1
 81047b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81047b2:	683b      	ldr	r3, [r7, #0]
 81047b4:	681a      	ldr	r2, [r3, #0]
 81047b6:	69fb      	ldr	r3, [r7, #28]
 81047b8:	fa22 f303 	lsr.w	r3, r2, r3
 81047bc:	2b00      	cmp	r3, #0
 81047be:	f47f ae63 	bne.w	8104488 <HAL_GPIO_Init+0x14>
  }
}
 81047c2:	bf00      	nop
 81047c4:	bf00      	nop
 81047c6:	3724      	adds	r7, #36	; 0x24
 81047c8:	46bd      	mov	sp, r7
 81047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047ce:	4770      	bx	lr
 81047d0:	58000400 	.word	0x58000400

081047d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81047d4:	b480      	push	{r7}
 81047d6:	b083      	sub	sp, #12
 81047d8:	af00      	add	r7, sp, #0
 81047da:	6078      	str	r0, [r7, #4]
 81047dc:	460b      	mov	r3, r1
 81047de:	807b      	strh	r3, [r7, #2]
 81047e0:	4613      	mov	r3, r2
 81047e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81047e4:	787b      	ldrb	r3, [r7, #1]
 81047e6:	2b00      	cmp	r3, #0
 81047e8:	d003      	beq.n	81047f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81047ea:	887a      	ldrh	r2, [r7, #2]
 81047ec:	687b      	ldr	r3, [r7, #4]
 81047ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81047f0:	e003      	b.n	81047fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81047f2:	887b      	ldrh	r3, [r7, #2]
 81047f4:	041a      	lsls	r2, r3, #16
 81047f6:	687b      	ldr	r3, [r7, #4]
 81047f8:	619a      	str	r2, [r3, #24]
}
 81047fa:	bf00      	nop
 81047fc:	370c      	adds	r7, #12
 81047fe:	46bd      	mov	sp, r7
 8104800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104804:	4770      	bx	lr
	...

08104808 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104808:	b480      	push	{r7}
 810480a:	b083      	sub	sp, #12
 810480c:	af00      	add	r7, sp, #0
 810480e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104810:	4b05      	ldr	r3, [pc, #20]	; (8104828 <HAL_HSEM_ActivateNotification+0x20>)
 8104812:	681a      	ldr	r2, [r3, #0]
 8104814:	4904      	ldr	r1, [pc, #16]	; (8104828 <HAL_HSEM_ActivateNotification+0x20>)
 8104816:	687b      	ldr	r3, [r7, #4]
 8104818:	4313      	orrs	r3, r2
 810481a:	600b      	str	r3, [r1, #0]
#endif
}
 810481c:	bf00      	nop
 810481e:	370c      	adds	r7, #12
 8104820:	46bd      	mov	sp, r7
 8104822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104826:	4770      	bx	lr
 8104828:	58026510 	.word	0x58026510

0810482c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 810482c:	b580      	push	{r7, lr}
 810482e:	b082      	sub	sp, #8
 8104830:	af00      	add	r7, sp, #0
 8104832:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104834:	687b      	ldr	r3, [r7, #4]
 8104836:	2b00      	cmp	r3, #0
 8104838:	d101      	bne.n	810483e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810483a:	2301      	movs	r3, #1
 810483c:	e081      	b.n	8104942 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810483e:	687b      	ldr	r3, [r7, #4]
 8104840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104844:	b2db      	uxtb	r3, r3
 8104846:	2b00      	cmp	r3, #0
 8104848:	d106      	bne.n	8104858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	2200      	movs	r2, #0
 810484e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104852:	6878      	ldr	r0, [r7, #4]
 8104854:	f7fe f8ba 	bl	81029cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104858:	687b      	ldr	r3, [r7, #4]
 810485a:	2224      	movs	r2, #36	; 0x24
 810485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	681b      	ldr	r3, [r3, #0]
 8104864:	681a      	ldr	r2, [r3, #0]
 8104866:	687b      	ldr	r3, [r7, #4]
 8104868:	681b      	ldr	r3, [r3, #0]
 810486a:	f022 0201 	bic.w	r2, r2, #1
 810486e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104870:	687b      	ldr	r3, [r7, #4]
 8104872:	685a      	ldr	r2, [r3, #4]
 8104874:	687b      	ldr	r3, [r7, #4]
 8104876:	681b      	ldr	r3, [r3, #0]
 8104878:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 810487c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810487e:	687b      	ldr	r3, [r7, #4]
 8104880:	681b      	ldr	r3, [r3, #0]
 8104882:	689a      	ldr	r2, [r3, #8]
 8104884:	687b      	ldr	r3, [r7, #4]
 8104886:	681b      	ldr	r3, [r3, #0]
 8104888:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810488c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810488e:	687b      	ldr	r3, [r7, #4]
 8104890:	68db      	ldr	r3, [r3, #12]
 8104892:	2b01      	cmp	r3, #1
 8104894:	d107      	bne.n	81048a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104896:	687b      	ldr	r3, [r7, #4]
 8104898:	689a      	ldr	r2, [r3, #8]
 810489a:	687b      	ldr	r3, [r7, #4]
 810489c:	681b      	ldr	r3, [r3, #0]
 810489e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81048a2:	609a      	str	r2, [r3, #8]
 81048a4:	e006      	b.n	81048b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81048a6:	687b      	ldr	r3, [r7, #4]
 81048a8:	689a      	ldr	r2, [r3, #8]
 81048aa:	687b      	ldr	r3, [r7, #4]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81048b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81048b4:	687b      	ldr	r3, [r7, #4]
 81048b6:	68db      	ldr	r3, [r3, #12]
 81048b8:	2b02      	cmp	r3, #2
 81048ba:	d104      	bne.n	81048c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81048bc:	687b      	ldr	r3, [r7, #4]
 81048be:	681b      	ldr	r3, [r3, #0]
 81048c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81048c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81048c6:	687b      	ldr	r3, [r7, #4]
 81048c8:	681b      	ldr	r3, [r3, #0]
 81048ca:	685b      	ldr	r3, [r3, #4]
 81048cc:	687a      	ldr	r2, [r7, #4]
 81048ce:	6812      	ldr	r2, [r2, #0]
 81048d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81048d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81048d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81048da:	687b      	ldr	r3, [r7, #4]
 81048dc:	681b      	ldr	r3, [r3, #0]
 81048de:	68da      	ldr	r2, [r3, #12]
 81048e0:	687b      	ldr	r3, [r7, #4]
 81048e2:	681b      	ldr	r3, [r3, #0]
 81048e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81048e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81048ea:	687b      	ldr	r3, [r7, #4]
 81048ec:	691a      	ldr	r2, [r3, #16]
 81048ee:	687b      	ldr	r3, [r7, #4]
 81048f0:	695b      	ldr	r3, [r3, #20]
 81048f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81048f6:	687b      	ldr	r3, [r7, #4]
 81048f8:	699b      	ldr	r3, [r3, #24]
 81048fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81048fc:	687b      	ldr	r3, [r7, #4]
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	430a      	orrs	r2, r1
 8104902:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8104904:	687b      	ldr	r3, [r7, #4]
 8104906:	69d9      	ldr	r1, [r3, #28]
 8104908:	687b      	ldr	r3, [r7, #4]
 810490a:	6a1a      	ldr	r2, [r3, #32]
 810490c:	687b      	ldr	r3, [r7, #4]
 810490e:	681b      	ldr	r3, [r3, #0]
 8104910:	430a      	orrs	r2, r1
 8104912:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8104914:	687b      	ldr	r3, [r7, #4]
 8104916:	681b      	ldr	r3, [r3, #0]
 8104918:	681a      	ldr	r2, [r3, #0]
 810491a:	687b      	ldr	r3, [r7, #4]
 810491c:	681b      	ldr	r3, [r3, #0]
 810491e:	f042 0201 	orr.w	r2, r2, #1
 8104922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104924:	687b      	ldr	r3, [r7, #4]
 8104926:	2200      	movs	r2, #0
 8104928:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810492a:	687b      	ldr	r3, [r7, #4]
 810492c:	2220      	movs	r2, #32
 810492e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8104932:	687b      	ldr	r3, [r7, #4]
 8104934:	2200      	movs	r2, #0
 8104936:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104938:	687b      	ldr	r3, [r7, #4]
 810493a:	2200      	movs	r2, #0
 810493c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8104940:	2300      	movs	r3, #0
}
 8104942:	4618      	mov	r0, r3
 8104944:	3708      	adds	r7, #8
 8104946:	46bd      	mov	sp, r7
 8104948:	bd80      	pop	{r7, pc}
	...

0810494c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 810494c:	b580      	push	{r7, lr}
 810494e:	b088      	sub	sp, #32
 8104950:	af02      	add	r7, sp, #8
 8104952:	60f8      	str	r0, [r7, #12]
 8104954:	607a      	str	r2, [r7, #4]
 8104956:	461a      	mov	r2, r3
 8104958:	460b      	mov	r3, r1
 810495a:	817b      	strh	r3, [r7, #10]
 810495c:	4613      	mov	r3, r2
 810495e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104960:	68fb      	ldr	r3, [r7, #12]
 8104962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104966:	b2db      	uxtb	r3, r3
 8104968:	2b20      	cmp	r3, #32
 810496a:	f040 80da 	bne.w	8104b22 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810496e:	68fb      	ldr	r3, [r7, #12]
 8104970:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104974:	2b01      	cmp	r3, #1
 8104976:	d101      	bne.n	810497c <HAL_I2C_Master_Transmit+0x30>
 8104978:	2302      	movs	r3, #2
 810497a:	e0d3      	b.n	8104b24 <HAL_I2C_Master_Transmit+0x1d8>
 810497c:	68fb      	ldr	r3, [r7, #12]
 810497e:	2201      	movs	r2, #1
 8104980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104984:	f7fe fb84 	bl	8103090 <HAL_GetTick>
 8104988:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810498a:	697b      	ldr	r3, [r7, #20]
 810498c:	9300      	str	r3, [sp, #0]
 810498e:	2319      	movs	r3, #25
 8104990:	2201      	movs	r2, #1
 8104992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104996:	68f8      	ldr	r0, [r7, #12]
 8104998:	f000 fb07 	bl	8104faa <I2C_WaitOnFlagUntilTimeout>
 810499c:	4603      	mov	r3, r0
 810499e:	2b00      	cmp	r3, #0
 81049a0:	d001      	beq.n	81049a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 81049a2:	2301      	movs	r3, #1
 81049a4:	e0be      	b.n	8104b24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81049a6:	68fb      	ldr	r3, [r7, #12]
 81049a8:	2221      	movs	r2, #33	; 0x21
 81049aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81049ae:	68fb      	ldr	r3, [r7, #12]
 81049b0:	2210      	movs	r2, #16
 81049b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81049b6:	68fb      	ldr	r3, [r7, #12]
 81049b8:	2200      	movs	r2, #0
 81049ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81049bc:	68fb      	ldr	r3, [r7, #12]
 81049be:	687a      	ldr	r2, [r7, #4]
 81049c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81049c2:	68fb      	ldr	r3, [r7, #12]
 81049c4:	893a      	ldrh	r2, [r7, #8]
 81049c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81049c8:	68fb      	ldr	r3, [r7, #12]
 81049ca:	2200      	movs	r2, #0
 81049cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81049ce:	68fb      	ldr	r3, [r7, #12]
 81049d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81049d2:	b29b      	uxth	r3, r3
 81049d4:	2bff      	cmp	r3, #255	; 0xff
 81049d6:	d90e      	bls.n	81049f6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81049d8:	68fb      	ldr	r3, [r7, #12]
 81049da:	22ff      	movs	r2, #255	; 0xff
 81049dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81049de:	68fb      	ldr	r3, [r7, #12]
 81049e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81049e2:	b2da      	uxtb	r2, r3
 81049e4:	8979      	ldrh	r1, [r7, #10]
 81049e6:	4b51      	ldr	r3, [pc, #324]	; (8104b2c <HAL_I2C_Master_Transmit+0x1e0>)
 81049e8:	9300      	str	r3, [sp, #0]
 81049ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81049ee:	68f8      	ldr	r0, [r7, #12]
 81049f0:	f000 fd16 	bl	8105420 <I2C_TransferConfig>
 81049f4:	e06c      	b.n	8104ad0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81049f6:	68fb      	ldr	r3, [r7, #12]
 81049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81049fa:	b29a      	uxth	r2, r3
 81049fc:	68fb      	ldr	r3, [r7, #12]
 81049fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104a00:	68fb      	ldr	r3, [r7, #12]
 8104a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104a04:	b2da      	uxtb	r2, r3
 8104a06:	8979      	ldrh	r1, [r7, #10]
 8104a08:	4b48      	ldr	r3, [pc, #288]	; (8104b2c <HAL_I2C_Master_Transmit+0x1e0>)
 8104a0a:	9300      	str	r3, [sp, #0]
 8104a0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104a10:	68f8      	ldr	r0, [r7, #12]
 8104a12:	f000 fd05 	bl	8105420 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8104a16:	e05b      	b.n	8104ad0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104a18:	697a      	ldr	r2, [r7, #20]
 8104a1a:	6a39      	ldr	r1, [r7, #32]
 8104a1c:	68f8      	ldr	r0, [r7, #12]
 8104a1e:	f000 fb13 	bl	8105048 <I2C_WaitOnTXISFlagUntilTimeout>
 8104a22:	4603      	mov	r3, r0
 8104a24:	2b00      	cmp	r3, #0
 8104a26:	d001      	beq.n	8104a2c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8104a28:	2301      	movs	r3, #1
 8104a2a:	e07b      	b.n	8104b24 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8104a2c:	68fb      	ldr	r3, [r7, #12]
 8104a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a30:	781a      	ldrb	r2, [r3, #0]
 8104a32:	68fb      	ldr	r3, [r7, #12]
 8104a34:	681b      	ldr	r3, [r3, #0]
 8104a36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104a38:	68fb      	ldr	r3, [r7, #12]
 8104a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a3c:	1c5a      	adds	r2, r3, #1
 8104a3e:	68fb      	ldr	r3, [r7, #12]
 8104a40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8104a42:	68fb      	ldr	r3, [r7, #12]
 8104a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a46:	b29b      	uxth	r3, r3
 8104a48:	3b01      	subs	r3, #1
 8104a4a:	b29a      	uxth	r2, r3
 8104a4c:	68fb      	ldr	r3, [r7, #12]
 8104a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8104a50:	68fb      	ldr	r3, [r7, #12]
 8104a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104a54:	3b01      	subs	r3, #1
 8104a56:	b29a      	uxth	r2, r3
 8104a58:	68fb      	ldr	r3, [r7, #12]
 8104a5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104a5c:	68fb      	ldr	r3, [r7, #12]
 8104a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a60:	b29b      	uxth	r3, r3
 8104a62:	2b00      	cmp	r3, #0
 8104a64:	d034      	beq.n	8104ad0 <HAL_I2C_Master_Transmit+0x184>
 8104a66:	68fb      	ldr	r3, [r7, #12]
 8104a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104a6a:	2b00      	cmp	r3, #0
 8104a6c:	d130      	bne.n	8104ad0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104a6e:	697b      	ldr	r3, [r7, #20]
 8104a70:	9300      	str	r3, [sp, #0]
 8104a72:	6a3b      	ldr	r3, [r7, #32]
 8104a74:	2200      	movs	r2, #0
 8104a76:	2180      	movs	r1, #128	; 0x80
 8104a78:	68f8      	ldr	r0, [r7, #12]
 8104a7a:	f000 fa96 	bl	8104faa <I2C_WaitOnFlagUntilTimeout>
 8104a7e:	4603      	mov	r3, r0
 8104a80:	2b00      	cmp	r3, #0
 8104a82:	d001      	beq.n	8104a88 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8104a84:	2301      	movs	r3, #1
 8104a86:	e04d      	b.n	8104b24 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104a88:	68fb      	ldr	r3, [r7, #12]
 8104a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a8c:	b29b      	uxth	r3, r3
 8104a8e:	2bff      	cmp	r3, #255	; 0xff
 8104a90:	d90e      	bls.n	8104ab0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104a92:	68fb      	ldr	r3, [r7, #12]
 8104a94:	22ff      	movs	r2, #255	; 0xff
 8104a96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104a98:	68fb      	ldr	r3, [r7, #12]
 8104a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104a9c:	b2da      	uxtb	r2, r3
 8104a9e:	8979      	ldrh	r1, [r7, #10]
 8104aa0:	2300      	movs	r3, #0
 8104aa2:	9300      	str	r3, [sp, #0]
 8104aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104aa8:	68f8      	ldr	r0, [r7, #12]
 8104aaa:	f000 fcb9 	bl	8105420 <I2C_TransferConfig>
 8104aae:	e00f      	b.n	8104ad0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104ab0:	68fb      	ldr	r3, [r7, #12]
 8104ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ab4:	b29a      	uxth	r2, r3
 8104ab6:	68fb      	ldr	r3, [r7, #12]
 8104ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104aba:	68fb      	ldr	r3, [r7, #12]
 8104abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104abe:	b2da      	uxtb	r2, r3
 8104ac0:	8979      	ldrh	r1, [r7, #10]
 8104ac2:	2300      	movs	r3, #0
 8104ac4:	9300      	str	r3, [sp, #0]
 8104ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104aca:	68f8      	ldr	r0, [r7, #12]
 8104acc:	f000 fca8 	bl	8105420 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8104ad0:	68fb      	ldr	r3, [r7, #12]
 8104ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ad4:	b29b      	uxth	r3, r3
 8104ad6:	2b00      	cmp	r3, #0
 8104ad8:	d19e      	bne.n	8104a18 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104ada:	697a      	ldr	r2, [r7, #20]
 8104adc:	6a39      	ldr	r1, [r7, #32]
 8104ade:	68f8      	ldr	r0, [r7, #12]
 8104ae0:	f000 faf9 	bl	81050d6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104ae4:	4603      	mov	r3, r0
 8104ae6:	2b00      	cmp	r3, #0
 8104ae8:	d001      	beq.n	8104aee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8104aea:	2301      	movs	r3, #1
 8104aec:	e01a      	b.n	8104b24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104aee:	68fb      	ldr	r3, [r7, #12]
 8104af0:	681b      	ldr	r3, [r3, #0]
 8104af2:	2220      	movs	r2, #32
 8104af4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104af6:	68fb      	ldr	r3, [r7, #12]
 8104af8:	681b      	ldr	r3, [r3, #0]
 8104afa:	6859      	ldr	r1, [r3, #4]
 8104afc:	68fb      	ldr	r3, [r7, #12]
 8104afe:	681a      	ldr	r2, [r3, #0]
 8104b00:	4b0b      	ldr	r3, [pc, #44]	; (8104b30 <HAL_I2C_Master_Transmit+0x1e4>)
 8104b02:	400b      	ands	r3, r1
 8104b04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104b06:	68fb      	ldr	r3, [r7, #12]
 8104b08:	2220      	movs	r2, #32
 8104b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104b0e:	68fb      	ldr	r3, [r7, #12]
 8104b10:	2200      	movs	r2, #0
 8104b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104b16:	68fb      	ldr	r3, [r7, #12]
 8104b18:	2200      	movs	r2, #0
 8104b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104b1e:	2300      	movs	r3, #0
 8104b20:	e000      	b.n	8104b24 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8104b22:	2302      	movs	r3, #2
  }
}
 8104b24:	4618      	mov	r0, r3
 8104b26:	3718      	adds	r7, #24
 8104b28:	46bd      	mov	sp, r7
 8104b2a:	bd80      	pop	{r7, pc}
 8104b2c:	80002000 	.word	0x80002000
 8104b30:	fe00e800 	.word	0xfe00e800

08104b34 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8104b34:	b580      	push	{r7, lr}
 8104b36:	b088      	sub	sp, #32
 8104b38:	af02      	add	r7, sp, #8
 8104b3a:	60f8      	str	r0, [r7, #12]
 8104b3c:	607a      	str	r2, [r7, #4]
 8104b3e:	461a      	mov	r2, r3
 8104b40:	460b      	mov	r3, r1
 8104b42:	817b      	strh	r3, [r7, #10]
 8104b44:	4613      	mov	r3, r2
 8104b46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104b48:	68fb      	ldr	r3, [r7, #12]
 8104b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104b4e:	b2db      	uxtb	r3, r3
 8104b50:	2b20      	cmp	r3, #32
 8104b52:	f040 80db 	bne.w	8104d0c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104b56:	68fb      	ldr	r3, [r7, #12]
 8104b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104b5c:	2b01      	cmp	r3, #1
 8104b5e:	d101      	bne.n	8104b64 <HAL_I2C_Master_Receive+0x30>
 8104b60:	2302      	movs	r3, #2
 8104b62:	e0d4      	b.n	8104d0e <HAL_I2C_Master_Receive+0x1da>
 8104b64:	68fb      	ldr	r3, [r7, #12]
 8104b66:	2201      	movs	r2, #1
 8104b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104b6c:	f7fe fa90 	bl	8103090 <HAL_GetTick>
 8104b70:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104b72:	697b      	ldr	r3, [r7, #20]
 8104b74:	9300      	str	r3, [sp, #0]
 8104b76:	2319      	movs	r3, #25
 8104b78:	2201      	movs	r2, #1
 8104b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104b7e:	68f8      	ldr	r0, [r7, #12]
 8104b80:	f000 fa13 	bl	8104faa <I2C_WaitOnFlagUntilTimeout>
 8104b84:	4603      	mov	r3, r0
 8104b86:	2b00      	cmp	r3, #0
 8104b88:	d001      	beq.n	8104b8e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8104b8a:	2301      	movs	r3, #1
 8104b8c:	e0bf      	b.n	8104d0e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8104b8e:	68fb      	ldr	r3, [r7, #12]
 8104b90:	2222      	movs	r2, #34	; 0x22
 8104b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8104b96:	68fb      	ldr	r3, [r7, #12]
 8104b98:	2210      	movs	r2, #16
 8104b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104b9e:	68fb      	ldr	r3, [r7, #12]
 8104ba0:	2200      	movs	r2, #0
 8104ba2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104ba4:	68fb      	ldr	r3, [r7, #12]
 8104ba6:	687a      	ldr	r2, [r7, #4]
 8104ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104baa:	68fb      	ldr	r3, [r7, #12]
 8104bac:	893a      	ldrh	r2, [r7, #8]
 8104bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104bb0:	68fb      	ldr	r3, [r7, #12]
 8104bb2:	2200      	movs	r2, #0
 8104bb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104bb6:	68fb      	ldr	r3, [r7, #12]
 8104bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104bba:	b29b      	uxth	r3, r3
 8104bbc:	2bff      	cmp	r3, #255	; 0xff
 8104bbe:	d90e      	bls.n	8104bde <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104bc0:	68fb      	ldr	r3, [r7, #12]
 8104bc2:	22ff      	movs	r2, #255	; 0xff
 8104bc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104bc6:	68fb      	ldr	r3, [r7, #12]
 8104bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104bca:	b2da      	uxtb	r2, r3
 8104bcc:	8979      	ldrh	r1, [r7, #10]
 8104bce:	4b52      	ldr	r3, [pc, #328]	; (8104d18 <HAL_I2C_Master_Receive+0x1e4>)
 8104bd0:	9300      	str	r3, [sp, #0]
 8104bd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104bd6:	68f8      	ldr	r0, [r7, #12]
 8104bd8:	f000 fc22 	bl	8105420 <I2C_TransferConfig>
 8104bdc:	e06d      	b.n	8104cba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104bde:	68fb      	ldr	r3, [r7, #12]
 8104be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104be2:	b29a      	uxth	r2, r3
 8104be4:	68fb      	ldr	r3, [r7, #12]
 8104be6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104be8:	68fb      	ldr	r3, [r7, #12]
 8104bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104bec:	b2da      	uxtb	r2, r3
 8104bee:	8979      	ldrh	r1, [r7, #10]
 8104bf0:	4b49      	ldr	r3, [pc, #292]	; (8104d18 <HAL_I2C_Master_Receive+0x1e4>)
 8104bf2:	9300      	str	r3, [sp, #0]
 8104bf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104bf8:	68f8      	ldr	r0, [r7, #12]
 8104bfa:	f000 fc11 	bl	8105420 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8104bfe:	e05c      	b.n	8104cba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104c00:	697a      	ldr	r2, [r7, #20]
 8104c02:	6a39      	ldr	r1, [r7, #32]
 8104c04:	68f8      	ldr	r0, [r7, #12]
 8104c06:	f000 faa9 	bl	810515c <I2C_WaitOnRXNEFlagUntilTimeout>
 8104c0a:	4603      	mov	r3, r0
 8104c0c:	2b00      	cmp	r3, #0
 8104c0e:	d001      	beq.n	8104c14 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8104c10:	2301      	movs	r3, #1
 8104c12:	e07c      	b.n	8104d0e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104c14:	68fb      	ldr	r3, [r7, #12]
 8104c16:	681b      	ldr	r3, [r3, #0]
 8104c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104c1a:	68fb      	ldr	r3, [r7, #12]
 8104c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c1e:	b2d2      	uxtb	r2, r2
 8104c20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104c22:	68fb      	ldr	r3, [r7, #12]
 8104c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c26:	1c5a      	adds	r2, r3, #1
 8104c28:	68fb      	ldr	r3, [r7, #12]
 8104c2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8104c2c:	68fb      	ldr	r3, [r7, #12]
 8104c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c30:	3b01      	subs	r3, #1
 8104c32:	b29a      	uxth	r2, r3
 8104c34:	68fb      	ldr	r3, [r7, #12]
 8104c36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8104c38:	68fb      	ldr	r3, [r7, #12]
 8104c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c3c:	b29b      	uxth	r3, r3
 8104c3e:	3b01      	subs	r3, #1
 8104c40:	b29a      	uxth	r2, r3
 8104c42:	68fb      	ldr	r3, [r7, #12]
 8104c44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104c46:	68fb      	ldr	r3, [r7, #12]
 8104c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c4a:	b29b      	uxth	r3, r3
 8104c4c:	2b00      	cmp	r3, #0
 8104c4e:	d034      	beq.n	8104cba <HAL_I2C_Master_Receive+0x186>
 8104c50:	68fb      	ldr	r3, [r7, #12]
 8104c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c54:	2b00      	cmp	r3, #0
 8104c56:	d130      	bne.n	8104cba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104c58:	697b      	ldr	r3, [r7, #20]
 8104c5a:	9300      	str	r3, [sp, #0]
 8104c5c:	6a3b      	ldr	r3, [r7, #32]
 8104c5e:	2200      	movs	r2, #0
 8104c60:	2180      	movs	r1, #128	; 0x80
 8104c62:	68f8      	ldr	r0, [r7, #12]
 8104c64:	f000 f9a1 	bl	8104faa <I2C_WaitOnFlagUntilTimeout>
 8104c68:	4603      	mov	r3, r0
 8104c6a:	2b00      	cmp	r3, #0
 8104c6c:	d001      	beq.n	8104c72 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8104c6e:	2301      	movs	r3, #1
 8104c70:	e04d      	b.n	8104d0e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104c72:	68fb      	ldr	r3, [r7, #12]
 8104c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c76:	b29b      	uxth	r3, r3
 8104c78:	2bff      	cmp	r3, #255	; 0xff
 8104c7a:	d90e      	bls.n	8104c9a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104c7c:	68fb      	ldr	r3, [r7, #12]
 8104c7e:	22ff      	movs	r2, #255	; 0xff
 8104c80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104c82:	68fb      	ldr	r3, [r7, #12]
 8104c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c86:	b2da      	uxtb	r2, r3
 8104c88:	8979      	ldrh	r1, [r7, #10]
 8104c8a:	2300      	movs	r3, #0
 8104c8c:	9300      	str	r3, [sp, #0]
 8104c8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104c92:	68f8      	ldr	r0, [r7, #12]
 8104c94:	f000 fbc4 	bl	8105420 <I2C_TransferConfig>
 8104c98:	e00f      	b.n	8104cba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104c9a:	68fb      	ldr	r3, [r7, #12]
 8104c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c9e:	b29a      	uxth	r2, r3
 8104ca0:	68fb      	ldr	r3, [r7, #12]
 8104ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104ca4:	68fb      	ldr	r3, [r7, #12]
 8104ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104ca8:	b2da      	uxtb	r2, r3
 8104caa:	8979      	ldrh	r1, [r7, #10]
 8104cac:	2300      	movs	r3, #0
 8104cae:	9300      	str	r3, [sp, #0]
 8104cb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104cb4:	68f8      	ldr	r0, [r7, #12]
 8104cb6:	f000 fbb3 	bl	8105420 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8104cba:	68fb      	ldr	r3, [r7, #12]
 8104cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104cbe:	b29b      	uxth	r3, r3
 8104cc0:	2b00      	cmp	r3, #0
 8104cc2:	d19d      	bne.n	8104c00 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104cc4:	697a      	ldr	r2, [r7, #20]
 8104cc6:	6a39      	ldr	r1, [r7, #32]
 8104cc8:	68f8      	ldr	r0, [r7, #12]
 8104cca:	f000 fa04 	bl	81050d6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104cce:	4603      	mov	r3, r0
 8104cd0:	2b00      	cmp	r3, #0
 8104cd2:	d001      	beq.n	8104cd8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8104cd4:	2301      	movs	r3, #1
 8104cd6:	e01a      	b.n	8104d0e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104cd8:	68fb      	ldr	r3, [r7, #12]
 8104cda:	681b      	ldr	r3, [r3, #0]
 8104cdc:	2220      	movs	r2, #32
 8104cde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104ce0:	68fb      	ldr	r3, [r7, #12]
 8104ce2:	681b      	ldr	r3, [r3, #0]
 8104ce4:	6859      	ldr	r1, [r3, #4]
 8104ce6:	68fb      	ldr	r3, [r7, #12]
 8104ce8:	681a      	ldr	r2, [r3, #0]
 8104cea:	4b0c      	ldr	r3, [pc, #48]	; (8104d1c <HAL_I2C_Master_Receive+0x1e8>)
 8104cec:	400b      	ands	r3, r1
 8104cee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104cf0:	68fb      	ldr	r3, [r7, #12]
 8104cf2:	2220      	movs	r2, #32
 8104cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104cf8:	68fb      	ldr	r3, [r7, #12]
 8104cfa:	2200      	movs	r2, #0
 8104cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104d00:	68fb      	ldr	r3, [r7, #12]
 8104d02:	2200      	movs	r2, #0
 8104d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104d08:	2300      	movs	r3, #0
 8104d0a:	e000      	b.n	8104d0e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8104d0c:	2302      	movs	r3, #2
  }
}
 8104d0e:	4618      	mov	r0, r3
 8104d10:	3718      	adds	r7, #24
 8104d12:	46bd      	mov	sp, r7
 8104d14:	bd80      	pop	{r7, pc}
 8104d16:	bf00      	nop
 8104d18:	80002400 	.word	0x80002400
 8104d1c:	fe00e800 	.word	0xfe00e800

08104d20 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8104d20:	b580      	push	{r7, lr}
 8104d22:	b08a      	sub	sp, #40	; 0x28
 8104d24:	af02      	add	r7, sp, #8
 8104d26:	60f8      	str	r0, [r7, #12]
 8104d28:	607a      	str	r2, [r7, #4]
 8104d2a:	603b      	str	r3, [r7, #0]
 8104d2c:	460b      	mov	r3, r1
 8104d2e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8104d30:	2300      	movs	r3, #0
 8104d32:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104d34:	68fb      	ldr	r3, [r7, #12]
 8104d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104d3a:	b2db      	uxtb	r3, r3
 8104d3c:	2b20      	cmp	r3, #32
 8104d3e:	f040 80f1 	bne.w	8104f24 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8104d42:	68fb      	ldr	r3, [r7, #12]
 8104d44:	681b      	ldr	r3, [r3, #0]
 8104d46:	699b      	ldr	r3, [r3, #24]
 8104d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104d50:	d101      	bne.n	8104d56 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8104d52:	2302      	movs	r3, #2
 8104d54:	e0e7      	b.n	8104f26 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104d56:	68fb      	ldr	r3, [r7, #12]
 8104d58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104d5c:	2b01      	cmp	r3, #1
 8104d5e:	d101      	bne.n	8104d64 <HAL_I2C_IsDeviceReady+0x44>
 8104d60:	2302      	movs	r3, #2
 8104d62:	e0e0      	b.n	8104f26 <HAL_I2C_IsDeviceReady+0x206>
 8104d64:	68fb      	ldr	r3, [r7, #12]
 8104d66:	2201      	movs	r2, #1
 8104d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104d6c:	68fb      	ldr	r3, [r7, #12]
 8104d6e:	2224      	movs	r2, #36	; 0x24
 8104d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104d74:	68fb      	ldr	r3, [r7, #12]
 8104d76:	2200      	movs	r2, #0
 8104d78:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8104d7a:	68fb      	ldr	r3, [r7, #12]
 8104d7c:	68db      	ldr	r3, [r3, #12]
 8104d7e:	2b01      	cmp	r3, #1
 8104d80:	d107      	bne.n	8104d92 <HAL_I2C_IsDeviceReady+0x72>
 8104d82:	897b      	ldrh	r3, [r7, #10]
 8104d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8104d88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104d8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8104d90:	e004      	b.n	8104d9c <HAL_I2C_IsDeviceReady+0x7c>
 8104d92:	897b      	ldrh	r3, [r7, #10]
 8104d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8104d98:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8104d9c:	68fa      	ldr	r2, [r7, #12]
 8104d9e:	6812      	ldr	r2, [r2, #0]
 8104da0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8104da2:	f7fe f975 	bl	8103090 <HAL_GetTick>
 8104da6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8104da8:	68fb      	ldr	r3, [r7, #12]
 8104daa:	681b      	ldr	r3, [r3, #0]
 8104dac:	699b      	ldr	r3, [r3, #24]
 8104dae:	f003 0320 	and.w	r3, r3, #32
 8104db2:	2b20      	cmp	r3, #32
 8104db4:	bf0c      	ite	eq
 8104db6:	2301      	moveq	r3, #1
 8104db8:	2300      	movne	r3, #0
 8104dba:	b2db      	uxtb	r3, r3
 8104dbc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8104dbe:	68fb      	ldr	r3, [r7, #12]
 8104dc0:	681b      	ldr	r3, [r3, #0]
 8104dc2:	699b      	ldr	r3, [r3, #24]
 8104dc4:	f003 0310 	and.w	r3, r3, #16
 8104dc8:	2b10      	cmp	r3, #16
 8104dca:	bf0c      	ite	eq
 8104dcc:	2301      	moveq	r3, #1
 8104dce:	2300      	movne	r3, #0
 8104dd0:	b2db      	uxtb	r3, r3
 8104dd2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8104dd4:	e034      	b.n	8104e40 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8104dd6:	683b      	ldr	r3, [r7, #0]
 8104dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104ddc:	d01a      	beq.n	8104e14 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8104dde:	f7fe f957 	bl	8103090 <HAL_GetTick>
 8104de2:	4602      	mov	r2, r0
 8104de4:	69bb      	ldr	r3, [r7, #24]
 8104de6:	1ad3      	subs	r3, r2, r3
 8104de8:	683a      	ldr	r2, [r7, #0]
 8104dea:	429a      	cmp	r2, r3
 8104dec:	d302      	bcc.n	8104df4 <HAL_I2C_IsDeviceReady+0xd4>
 8104dee:	683b      	ldr	r3, [r7, #0]
 8104df0:	2b00      	cmp	r3, #0
 8104df2:	d10f      	bne.n	8104e14 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8104df4:	68fb      	ldr	r3, [r7, #12]
 8104df6:	2220      	movs	r2, #32
 8104df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104dfc:	68fb      	ldr	r3, [r7, #12]
 8104dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104e00:	f043 0220 	orr.w	r2, r3, #32
 8104e04:	68fb      	ldr	r3, [r7, #12]
 8104e06:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8104e08:	68fb      	ldr	r3, [r7, #12]
 8104e0a:	2200      	movs	r2, #0
 8104e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8104e10:	2301      	movs	r3, #1
 8104e12:	e088      	b.n	8104f26 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8104e14:	68fb      	ldr	r3, [r7, #12]
 8104e16:	681b      	ldr	r3, [r3, #0]
 8104e18:	699b      	ldr	r3, [r3, #24]
 8104e1a:	f003 0320 	and.w	r3, r3, #32
 8104e1e:	2b20      	cmp	r3, #32
 8104e20:	bf0c      	ite	eq
 8104e22:	2301      	moveq	r3, #1
 8104e24:	2300      	movne	r3, #0
 8104e26:	b2db      	uxtb	r3, r3
 8104e28:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8104e2a:	68fb      	ldr	r3, [r7, #12]
 8104e2c:	681b      	ldr	r3, [r3, #0]
 8104e2e:	699b      	ldr	r3, [r3, #24]
 8104e30:	f003 0310 	and.w	r3, r3, #16
 8104e34:	2b10      	cmp	r3, #16
 8104e36:	bf0c      	ite	eq
 8104e38:	2301      	moveq	r3, #1
 8104e3a:	2300      	movne	r3, #0
 8104e3c:	b2db      	uxtb	r3, r3
 8104e3e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8104e40:	7ffb      	ldrb	r3, [r7, #31]
 8104e42:	2b00      	cmp	r3, #0
 8104e44:	d102      	bne.n	8104e4c <HAL_I2C_IsDeviceReady+0x12c>
 8104e46:	7fbb      	ldrb	r3, [r7, #30]
 8104e48:	2b00      	cmp	r3, #0
 8104e4a:	d0c4      	beq.n	8104dd6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8104e4c:	68fb      	ldr	r3, [r7, #12]
 8104e4e:	681b      	ldr	r3, [r3, #0]
 8104e50:	699b      	ldr	r3, [r3, #24]
 8104e52:	f003 0310 	and.w	r3, r3, #16
 8104e56:	2b10      	cmp	r3, #16
 8104e58:	d01a      	beq.n	8104e90 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104e5a:	69bb      	ldr	r3, [r7, #24]
 8104e5c:	9300      	str	r3, [sp, #0]
 8104e5e:	683b      	ldr	r3, [r7, #0]
 8104e60:	2200      	movs	r2, #0
 8104e62:	2120      	movs	r1, #32
 8104e64:	68f8      	ldr	r0, [r7, #12]
 8104e66:	f000 f8a0 	bl	8104faa <I2C_WaitOnFlagUntilTimeout>
 8104e6a:	4603      	mov	r3, r0
 8104e6c:	2b00      	cmp	r3, #0
 8104e6e:	d001      	beq.n	8104e74 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8104e70:	2301      	movs	r3, #1
 8104e72:	e058      	b.n	8104f26 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104e74:	68fb      	ldr	r3, [r7, #12]
 8104e76:	681b      	ldr	r3, [r3, #0]
 8104e78:	2220      	movs	r2, #32
 8104e7a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8104e7c:	68fb      	ldr	r3, [r7, #12]
 8104e7e:	2220      	movs	r2, #32
 8104e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104e84:	68fb      	ldr	r3, [r7, #12]
 8104e86:	2200      	movs	r2, #0
 8104e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8104e8c:	2300      	movs	r3, #0
 8104e8e:	e04a      	b.n	8104f26 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104e90:	69bb      	ldr	r3, [r7, #24]
 8104e92:	9300      	str	r3, [sp, #0]
 8104e94:	683b      	ldr	r3, [r7, #0]
 8104e96:	2200      	movs	r2, #0
 8104e98:	2120      	movs	r1, #32
 8104e9a:	68f8      	ldr	r0, [r7, #12]
 8104e9c:	f000 f885 	bl	8104faa <I2C_WaitOnFlagUntilTimeout>
 8104ea0:	4603      	mov	r3, r0
 8104ea2:	2b00      	cmp	r3, #0
 8104ea4:	d001      	beq.n	8104eaa <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8104ea6:	2301      	movs	r3, #1
 8104ea8:	e03d      	b.n	8104f26 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104eaa:	68fb      	ldr	r3, [r7, #12]
 8104eac:	681b      	ldr	r3, [r3, #0]
 8104eae:	2210      	movs	r2, #16
 8104eb0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104eb2:	68fb      	ldr	r3, [r7, #12]
 8104eb4:	681b      	ldr	r3, [r3, #0]
 8104eb6:	2220      	movs	r2, #32
 8104eb8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8104eba:	697b      	ldr	r3, [r7, #20]
 8104ebc:	687a      	ldr	r2, [r7, #4]
 8104ebe:	429a      	cmp	r2, r3
 8104ec0:	d118      	bne.n	8104ef4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8104ec2:	68fb      	ldr	r3, [r7, #12]
 8104ec4:	681b      	ldr	r3, [r3, #0]
 8104ec6:	685a      	ldr	r2, [r3, #4]
 8104ec8:	68fb      	ldr	r3, [r7, #12]
 8104eca:	681b      	ldr	r3, [r3, #0]
 8104ecc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8104ed0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104ed2:	69bb      	ldr	r3, [r7, #24]
 8104ed4:	9300      	str	r3, [sp, #0]
 8104ed6:	683b      	ldr	r3, [r7, #0]
 8104ed8:	2200      	movs	r2, #0
 8104eda:	2120      	movs	r1, #32
 8104edc:	68f8      	ldr	r0, [r7, #12]
 8104ede:	f000 f864 	bl	8104faa <I2C_WaitOnFlagUntilTimeout>
 8104ee2:	4603      	mov	r3, r0
 8104ee4:	2b00      	cmp	r3, #0
 8104ee6:	d001      	beq.n	8104eec <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8104ee8:	2301      	movs	r3, #1
 8104eea:	e01c      	b.n	8104f26 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104eec:	68fb      	ldr	r3, [r7, #12]
 8104eee:	681b      	ldr	r3, [r3, #0]
 8104ef0:	2220      	movs	r2, #32
 8104ef2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8104ef4:	697b      	ldr	r3, [r7, #20]
 8104ef6:	3301      	adds	r3, #1
 8104ef8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8104efa:	697b      	ldr	r3, [r7, #20]
 8104efc:	687a      	ldr	r2, [r7, #4]
 8104efe:	429a      	cmp	r2, r3
 8104f00:	f63f af3b 	bhi.w	8104d7a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8104f04:	68fb      	ldr	r3, [r7, #12]
 8104f06:	2220      	movs	r2, #32
 8104f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104f0c:	68fb      	ldr	r3, [r7, #12]
 8104f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104f10:	f043 0220 	orr.w	r2, r3, #32
 8104f14:	68fb      	ldr	r3, [r7, #12]
 8104f16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104f18:	68fb      	ldr	r3, [r7, #12]
 8104f1a:	2200      	movs	r2, #0
 8104f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8104f20:	2301      	movs	r3, #1
 8104f22:	e000      	b.n	8104f26 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8104f24:	2302      	movs	r3, #2
  }
}
 8104f26:	4618      	mov	r0, r3
 8104f28:	3720      	adds	r7, #32
 8104f2a:	46bd      	mov	sp, r7
 8104f2c:	bd80      	pop	{r7, pc}

08104f2e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8104f2e:	b480      	push	{r7}
 8104f30:	b083      	sub	sp, #12
 8104f32:	af00      	add	r7, sp, #0
 8104f34:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8104f36:	687b      	ldr	r3, [r7, #4]
 8104f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104f3c:	b2db      	uxtb	r3, r3
}
 8104f3e:	4618      	mov	r0, r3
 8104f40:	370c      	adds	r7, #12
 8104f42:	46bd      	mov	sp, r7
 8104f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f48:	4770      	bx	lr

08104f4a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8104f4a:	b480      	push	{r7}
 8104f4c:	b083      	sub	sp, #12
 8104f4e:	af00      	add	r7, sp, #0
 8104f50:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8104f52:	687b      	ldr	r3, [r7, #4]
 8104f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8104f56:	4618      	mov	r0, r3
 8104f58:	370c      	adds	r7, #12
 8104f5a:	46bd      	mov	sp, r7
 8104f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f60:	4770      	bx	lr

08104f62 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8104f62:	b480      	push	{r7}
 8104f64:	b083      	sub	sp, #12
 8104f66:	af00      	add	r7, sp, #0
 8104f68:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104f6a:	687b      	ldr	r3, [r7, #4]
 8104f6c:	681b      	ldr	r3, [r3, #0]
 8104f6e:	699b      	ldr	r3, [r3, #24]
 8104f70:	f003 0302 	and.w	r3, r3, #2
 8104f74:	2b02      	cmp	r3, #2
 8104f76:	d103      	bne.n	8104f80 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	681b      	ldr	r3, [r3, #0]
 8104f7c:	2200      	movs	r2, #0
 8104f7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8104f80:	687b      	ldr	r3, [r7, #4]
 8104f82:	681b      	ldr	r3, [r3, #0]
 8104f84:	699b      	ldr	r3, [r3, #24]
 8104f86:	f003 0301 	and.w	r3, r3, #1
 8104f8a:	2b01      	cmp	r3, #1
 8104f8c:	d007      	beq.n	8104f9e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8104f8e:	687b      	ldr	r3, [r7, #4]
 8104f90:	681b      	ldr	r3, [r3, #0]
 8104f92:	699a      	ldr	r2, [r3, #24]
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	f042 0201 	orr.w	r2, r2, #1
 8104f9c:	619a      	str	r2, [r3, #24]
  }
}
 8104f9e:	bf00      	nop
 8104fa0:	370c      	adds	r7, #12
 8104fa2:	46bd      	mov	sp, r7
 8104fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fa8:	4770      	bx	lr

08104faa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8104faa:	b580      	push	{r7, lr}
 8104fac:	b084      	sub	sp, #16
 8104fae:	af00      	add	r7, sp, #0
 8104fb0:	60f8      	str	r0, [r7, #12]
 8104fb2:	60b9      	str	r1, [r7, #8]
 8104fb4:	603b      	str	r3, [r7, #0]
 8104fb6:	4613      	mov	r3, r2
 8104fb8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104fba:	e031      	b.n	8105020 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104fbc:	683b      	ldr	r3, [r7, #0]
 8104fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104fc2:	d02d      	beq.n	8105020 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104fc4:	f7fe f864 	bl	8103090 <HAL_GetTick>
 8104fc8:	4602      	mov	r2, r0
 8104fca:	69bb      	ldr	r3, [r7, #24]
 8104fcc:	1ad3      	subs	r3, r2, r3
 8104fce:	683a      	ldr	r2, [r7, #0]
 8104fd0:	429a      	cmp	r2, r3
 8104fd2:	d302      	bcc.n	8104fda <I2C_WaitOnFlagUntilTimeout+0x30>
 8104fd4:	683b      	ldr	r3, [r7, #0]
 8104fd6:	2b00      	cmp	r3, #0
 8104fd8:	d122      	bne.n	8105020 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8104fda:	68fb      	ldr	r3, [r7, #12]
 8104fdc:	681b      	ldr	r3, [r3, #0]
 8104fde:	699a      	ldr	r2, [r3, #24]
 8104fe0:	68bb      	ldr	r3, [r7, #8]
 8104fe2:	4013      	ands	r3, r2
 8104fe4:	68ba      	ldr	r2, [r7, #8]
 8104fe6:	429a      	cmp	r2, r3
 8104fe8:	bf0c      	ite	eq
 8104fea:	2301      	moveq	r3, #1
 8104fec:	2300      	movne	r3, #0
 8104fee:	b2db      	uxtb	r3, r3
 8104ff0:	461a      	mov	r2, r3
 8104ff2:	79fb      	ldrb	r3, [r7, #7]
 8104ff4:	429a      	cmp	r2, r3
 8104ff6:	d113      	bne.n	8105020 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104ff8:	68fb      	ldr	r3, [r7, #12]
 8104ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104ffc:	f043 0220 	orr.w	r2, r3, #32
 8105000:	68fb      	ldr	r3, [r7, #12]
 8105002:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8105004:	68fb      	ldr	r3, [r7, #12]
 8105006:	2220      	movs	r2, #32
 8105008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810500c:	68fb      	ldr	r3, [r7, #12]
 810500e:	2200      	movs	r2, #0
 8105010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8105014:	68fb      	ldr	r3, [r7, #12]
 8105016:	2200      	movs	r2, #0
 8105018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 810501c:	2301      	movs	r3, #1
 810501e:	e00f      	b.n	8105040 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105020:	68fb      	ldr	r3, [r7, #12]
 8105022:	681b      	ldr	r3, [r3, #0]
 8105024:	699a      	ldr	r2, [r3, #24]
 8105026:	68bb      	ldr	r3, [r7, #8]
 8105028:	4013      	ands	r3, r2
 810502a:	68ba      	ldr	r2, [r7, #8]
 810502c:	429a      	cmp	r2, r3
 810502e:	bf0c      	ite	eq
 8105030:	2301      	moveq	r3, #1
 8105032:	2300      	movne	r3, #0
 8105034:	b2db      	uxtb	r3, r3
 8105036:	461a      	mov	r2, r3
 8105038:	79fb      	ldrb	r3, [r7, #7]
 810503a:	429a      	cmp	r2, r3
 810503c:	d0be      	beq.n	8104fbc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810503e:	2300      	movs	r3, #0
}
 8105040:	4618      	mov	r0, r3
 8105042:	3710      	adds	r7, #16
 8105044:	46bd      	mov	sp, r7
 8105046:	bd80      	pop	{r7, pc}

08105048 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105048:	b580      	push	{r7, lr}
 810504a:	b084      	sub	sp, #16
 810504c:	af00      	add	r7, sp, #0
 810504e:	60f8      	str	r0, [r7, #12]
 8105050:	60b9      	str	r1, [r7, #8]
 8105052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105054:	e033      	b.n	81050be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8105056:	687a      	ldr	r2, [r7, #4]
 8105058:	68b9      	ldr	r1, [r7, #8]
 810505a:	68f8      	ldr	r0, [r7, #12]
 810505c:	f000 f900 	bl	8105260 <I2C_IsErrorOccurred>
 8105060:	4603      	mov	r3, r0
 8105062:	2b00      	cmp	r3, #0
 8105064:	d001      	beq.n	810506a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105066:	2301      	movs	r3, #1
 8105068:	e031      	b.n	81050ce <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810506a:	68bb      	ldr	r3, [r7, #8]
 810506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105070:	d025      	beq.n	81050be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105072:	f7fe f80d 	bl	8103090 <HAL_GetTick>
 8105076:	4602      	mov	r2, r0
 8105078:	687b      	ldr	r3, [r7, #4]
 810507a:	1ad3      	subs	r3, r2, r3
 810507c:	68ba      	ldr	r2, [r7, #8]
 810507e:	429a      	cmp	r2, r3
 8105080:	d302      	bcc.n	8105088 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8105082:	68bb      	ldr	r3, [r7, #8]
 8105084:	2b00      	cmp	r3, #0
 8105086:	d11a      	bne.n	81050be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8105088:	68fb      	ldr	r3, [r7, #12]
 810508a:	681b      	ldr	r3, [r3, #0]
 810508c:	699b      	ldr	r3, [r3, #24]
 810508e:	f003 0302 	and.w	r3, r3, #2
 8105092:	2b02      	cmp	r3, #2
 8105094:	d013      	beq.n	81050be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105096:	68fb      	ldr	r3, [r7, #12]
 8105098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810509a:	f043 0220 	orr.w	r2, r3, #32
 810509e:	68fb      	ldr	r3, [r7, #12]
 81050a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81050a2:	68fb      	ldr	r3, [r7, #12]
 81050a4:	2220      	movs	r2, #32
 81050a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81050aa:	68fb      	ldr	r3, [r7, #12]
 81050ac:	2200      	movs	r2, #0
 81050ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81050b2:	68fb      	ldr	r3, [r7, #12]
 81050b4:	2200      	movs	r2, #0
 81050b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 81050ba:	2301      	movs	r3, #1
 81050bc:	e007      	b.n	81050ce <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81050be:	68fb      	ldr	r3, [r7, #12]
 81050c0:	681b      	ldr	r3, [r3, #0]
 81050c2:	699b      	ldr	r3, [r3, #24]
 81050c4:	f003 0302 	and.w	r3, r3, #2
 81050c8:	2b02      	cmp	r3, #2
 81050ca:	d1c4      	bne.n	8105056 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 81050cc:	2300      	movs	r3, #0
}
 81050ce:	4618      	mov	r0, r3
 81050d0:	3710      	adds	r7, #16
 81050d2:	46bd      	mov	sp, r7
 81050d4:	bd80      	pop	{r7, pc}

081050d6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81050d6:	b580      	push	{r7, lr}
 81050d8:	b084      	sub	sp, #16
 81050da:	af00      	add	r7, sp, #0
 81050dc:	60f8      	str	r0, [r7, #12]
 81050de:	60b9      	str	r1, [r7, #8]
 81050e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81050e2:	e02f      	b.n	8105144 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81050e4:	687a      	ldr	r2, [r7, #4]
 81050e6:	68b9      	ldr	r1, [r7, #8]
 81050e8:	68f8      	ldr	r0, [r7, #12]
 81050ea:	f000 f8b9 	bl	8105260 <I2C_IsErrorOccurred>
 81050ee:	4603      	mov	r3, r0
 81050f0:	2b00      	cmp	r3, #0
 81050f2:	d001      	beq.n	81050f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81050f4:	2301      	movs	r3, #1
 81050f6:	e02d      	b.n	8105154 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81050f8:	f7fd ffca 	bl	8103090 <HAL_GetTick>
 81050fc:	4602      	mov	r2, r0
 81050fe:	687b      	ldr	r3, [r7, #4]
 8105100:	1ad3      	subs	r3, r2, r3
 8105102:	68ba      	ldr	r2, [r7, #8]
 8105104:	429a      	cmp	r2, r3
 8105106:	d302      	bcc.n	810510e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8105108:	68bb      	ldr	r3, [r7, #8]
 810510a:	2b00      	cmp	r3, #0
 810510c:	d11a      	bne.n	8105144 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 810510e:	68fb      	ldr	r3, [r7, #12]
 8105110:	681b      	ldr	r3, [r3, #0]
 8105112:	699b      	ldr	r3, [r3, #24]
 8105114:	f003 0320 	and.w	r3, r3, #32
 8105118:	2b20      	cmp	r3, #32
 810511a:	d013      	beq.n	8105144 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810511c:	68fb      	ldr	r3, [r7, #12]
 810511e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105120:	f043 0220 	orr.w	r2, r3, #32
 8105124:	68fb      	ldr	r3, [r7, #12]
 8105126:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105128:	68fb      	ldr	r3, [r7, #12]
 810512a:	2220      	movs	r2, #32
 810512c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105130:	68fb      	ldr	r3, [r7, #12]
 8105132:	2200      	movs	r2, #0
 8105134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105138:	68fb      	ldr	r3, [r7, #12]
 810513a:	2200      	movs	r2, #0
 810513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8105140:	2301      	movs	r3, #1
 8105142:	e007      	b.n	8105154 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105144:	68fb      	ldr	r3, [r7, #12]
 8105146:	681b      	ldr	r3, [r3, #0]
 8105148:	699b      	ldr	r3, [r3, #24]
 810514a:	f003 0320 	and.w	r3, r3, #32
 810514e:	2b20      	cmp	r3, #32
 8105150:	d1c8      	bne.n	81050e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8105152:	2300      	movs	r3, #0
}
 8105154:	4618      	mov	r0, r3
 8105156:	3710      	adds	r7, #16
 8105158:	46bd      	mov	sp, r7
 810515a:	bd80      	pop	{r7, pc}

0810515c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810515c:	b580      	push	{r7, lr}
 810515e:	b084      	sub	sp, #16
 8105160:	af00      	add	r7, sp, #0
 8105162:	60f8      	str	r0, [r7, #12]
 8105164:	60b9      	str	r1, [r7, #8]
 8105166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8105168:	e06b      	b.n	8105242 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810516a:	687a      	ldr	r2, [r7, #4]
 810516c:	68b9      	ldr	r1, [r7, #8]
 810516e:	68f8      	ldr	r0, [r7, #12]
 8105170:	f000 f876 	bl	8105260 <I2C_IsErrorOccurred>
 8105174:	4603      	mov	r3, r0
 8105176:	2b00      	cmp	r3, #0
 8105178:	d001      	beq.n	810517e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810517a:	2301      	movs	r3, #1
 810517c:	e069      	b.n	8105252 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 810517e:	68fb      	ldr	r3, [r7, #12]
 8105180:	681b      	ldr	r3, [r3, #0]
 8105182:	699b      	ldr	r3, [r3, #24]
 8105184:	f003 0320 	and.w	r3, r3, #32
 8105188:	2b20      	cmp	r3, #32
 810518a:	d138      	bne.n	81051fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 810518c:	68fb      	ldr	r3, [r7, #12]
 810518e:	681b      	ldr	r3, [r3, #0]
 8105190:	699b      	ldr	r3, [r3, #24]
 8105192:	f003 0304 	and.w	r3, r3, #4
 8105196:	2b04      	cmp	r3, #4
 8105198:	d105      	bne.n	81051a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 810519a:	68fb      	ldr	r3, [r7, #12]
 810519c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810519e:	2b00      	cmp	r3, #0
 81051a0:	d001      	beq.n	81051a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 81051a2:	2300      	movs	r3, #0
 81051a4:	e055      	b.n	8105252 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81051a6:	68fb      	ldr	r3, [r7, #12]
 81051a8:	681b      	ldr	r3, [r3, #0]
 81051aa:	699b      	ldr	r3, [r3, #24]
 81051ac:	f003 0310 	and.w	r3, r3, #16
 81051b0:	2b10      	cmp	r3, #16
 81051b2:	d107      	bne.n	81051c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81051b4:	68fb      	ldr	r3, [r7, #12]
 81051b6:	681b      	ldr	r3, [r3, #0]
 81051b8:	2210      	movs	r2, #16
 81051ba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 81051bc:	68fb      	ldr	r3, [r7, #12]
 81051be:	2204      	movs	r2, #4
 81051c0:	645a      	str	r2, [r3, #68]	; 0x44
 81051c2:	e002      	b.n	81051ca <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81051c4:	68fb      	ldr	r3, [r7, #12]
 81051c6:	2200      	movs	r2, #0
 81051c8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81051ca:	68fb      	ldr	r3, [r7, #12]
 81051cc:	681b      	ldr	r3, [r3, #0]
 81051ce:	2220      	movs	r2, #32
 81051d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 81051d2:	68fb      	ldr	r3, [r7, #12]
 81051d4:	681b      	ldr	r3, [r3, #0]
 81051d6:	6859      	ldr	r1, [r3, #4]
 81051d8:	68fb      	ldr	r3, [r7, #12]
 81051da:	681a      	ldr	r2, [r3, #0]
 81051dc:	4b1f      	ldr	r3, [pc, #124]	; (810525c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 81051de:	400b      	ands	r3, r1
 81051e0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 81051e2:	68fb      	ldr	r3, [r7, #12]
 81051e4:	2220      	movs	r2, #32
 81051e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81051ea:	68fb      	ldr	r3, [r7, #12]
 81051ec:	2200      	movs	r2, #0
 81051ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81051f2:	68fb      	ldr	r3, [r7, #12]
 81051f4:	2200      	movs	r2, #0
 81051f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81051fa:	2301      	movs	r3, #1
 81051fc:	e029      	b.n	8105252 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81051fe:	f7fd ff47 	bl	8103090 <HAL_GetTick>
 8105202:	4602      	mov	r2, r0
 8105204:	687b      	ldr	r3, [r7, #4]
 8105206:	1ad3      	subs	r3, r2, r3
 8105208:	68ba      	ldr	r2, [r7, #8]
 810520a:	429a      	cmp	r2, r3
 810520c:	d302      	bcc.n	8105214 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 810520e:	68bb      	ldr	r3, [r7, #8]
 8105210:	2b00      	cmp	r3, #0
 8105212:	d116      	bne.n	8105242 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8105214:	68fb      	ldr	r3, [r7, #12]
 8105216:	681b      	ldr	r3, [r3, #0]
 8105218:	699b      	ldr	r3, [r3, #24]
 810521a:	f003 0304 	and.w	r3, r3, #4
 810521e:	2b04      	cmp	r3, #4
 8105220:	d00f      	beq.n	8105242 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105222:	68fb      	ldr	r3, [r7, #12]
 8105224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105226:	f043 0220 	orr.w	r2, r3, #32
 810522a:	68fb      	ldr	r3, [r7, #12]
 810522c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810522e:	68fb      	ldr	r3, [r7, #12]
 8105230:	2220      	movs	r2, #32
 8105232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105236:	68fb      	ldr	r3, [r7, #12]
 8105238:	2200      	movs	r2, #0
 810523a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 810523e:	2301      	movs	r3, #1
 8105240:	e007      	b.n	8105252 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8105242:	68fb      	ldr	r3, [r7, #12]
 8105244:	681b      	ldr	r3, [r3, #0]
 8105246:	699b      	ldr	r3, [r3, #24]
 8105248:	f003 0304 	and.w	r3, r3, #4
 810524c:	2b04      	cmp	r3, #4
 810524e:	d18c      	bne.n	810516a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8105250:	2300      	movs	r3, #0
}
 8105252:	4618      	mov	r0, r3
 8105254:	3710      	adds	r7, #16
 8105256:	46bd      	mov	sp, r7
 8105258:	bd80      	pop	{r7, pc}
 810525a:	bf00      	nop
 810525c:	fe00e800 	.word	0xfe00e800

08105260 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105260:	b580      	push	{r7, lr}
 8105262:	b08a      	sub	sp, #40	; 0x28
 8105264:	af00      	add	r7, sp, #0
 8105266:	60f8      	str	r0, [r7, #12]
 8105268:	60b9      	str	r1, [r7, #8]
 810526a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810526c:	2300      	movs	r3, #0
 810526e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8105272:	68fb      	ldr	r3, [r7, #12]
 8105274:	681b      	ldr	r3, [r3, #0]
 8105276:	699b      	ldr	r3, [r3, #24]
 8105278:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810527a:	2300      	movs	r3, #0
 810527c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 810527e:	687b      	ldr	r3, [r7, #4]
 8105280:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8105282:	69bb      	ldr	r3, [r7, #24]
 8105284:	f003 0310 	and.w	r3, r3, #16
 8105288:	2b00      	cmp	r3, #0
 810528a:	d068      	beq.n	810535e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810528c:	68fb      	ldr	r3, [r7, #12]
 810528e:	681b      	ldr	r3, [r3, #0]
 8105290:	2210      	movs	r2, #16
 8105292:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8105294:	e049      	b.n	810532a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8105296:	68bb      	ldr	r3, [r7, #8]
 8105298:	f1b3 3fff 	cmp.w	r3, #4294967295
 810529c:	d045      	beq.n	810532a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810529e:	f7fd fef7 	bl	8103090 <HAL_GetTick>
 81052a2:	4602      	mov	r2, r0
 81052a4:	69fb      	ldr	r3, [r7, #28]
 81052a6:	1ad3      	subs	r3, r2, r3
 81052a8:	68ba      	ldr	r2, [r7, #8]
 81052aa:	429a      	cmp	r2, r3
 81052ac:	d302      	bcc.n	81052b4 <I2C_IsErrorOccurred+0x54>
 81052ae:	68bb      	ldr	r3, [r7, #8]
 81052b0:	2b00      	cmp	r3, #0
 81052b2:	d13a      	bne.n	810532a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 81052b4:	68fb      	ldr	r3, [r7, #12]
 81052b6:	681b      	ldr	r3, [r3, #0]
 81052b8:	685b      	ldr	r3, [r3, #4]
 81052ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81052be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 81052c0:	68fb      	ldr	r3, [r7, #12]
 81052c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81052c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81052c8:	68fb      	ldr	r3, [r7, #12]
 81052ca:	681b      	ldr	r3, [r3, #0]
 81052cc:	699b      	ldr	r3, [r3, #24]
 81052ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81052d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81052d6:	d121      	bne.n	810531c <I2C_IsErrorOccurred+0xbc>
 81052d8:	697b      	ldr	r3, [r7, #20]
 81052da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81052de:	d01d      	beq.n	810531c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 81052e0:	7cfb      	ldrb	r3, [r7, #19]
 81052e2:	2b20      	cmp	r3, #32
 81052e4:	d01a      	beq.n	810531c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81052e6:	68fb      	ldr	r3, [r7, #12]
 81052e8:	681b      	ldr	r3, [r3, #0]
 81052ea:	685a      	ldr	r2, [r3, #4]
 81052ec:	68fb      	ldr	r3, [r7, #12]
 81052ee:	681b      	ldr	r3, [r3, #0]
 81052f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81052f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 81052f6:	f7fd fecb 	bl	8103090 <HAL_GetTick>
 81052fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81052fc:	e00e      	b.n	810531c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 81052fe:	f7fd fec7 	bl	8103090 <HAL_GetTick>
 8105302:	4602      	mov	r2, r0
 8105304:	69fb      	ldr	r3, [r7, #28]
 8105306:	1ad3      	subs	r3, r2, r3
 8105308:	2b19      	cmp	r3, #25
 810530a:	d907      	bls.n	810531c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 810530c:	6a3b      	ldr	r3, [r7, #32]
 810530e:	f043 0320 	orr.w	r3, r3, #32
 8105312:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8105314:	2301      	movs	r3, #1
 8105316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 810531a:	e006      	b.n	810532a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810531c:	68fb      	ldr	r3, [r7, #12]
 810531e:	681b      	ldr	r3, [r3, #0]
 8105320:	699b      	ldr	r3, [r3, #24]
 8105322:	f003 0320 	and.w	r3, r3, #32
 8105326:	2b20      	cmp	r3, #32
 8105328:	d1e9      	bne.n	81052fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810532a:	68fb      	ldr	r3, [r7, #12]
 810532c:	681b      	ldr	r3, [r3, #0]
 810532e:	699b      	ldr	r3, [r3, #24]
 8105330:	f003 0320 	and.w	r3, r3, #32
 8105334:	2b20      	cmp	r3, #32
 8105336:	d003      	beq.n	8105340 <I2C_IsErrorOccurred+0xe0>
 8105338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810533c:	2b00      	cmp	r3, #0
 810533e:	d0aa      	beq.n	8105296 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8105340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8105344:	2b00      	cmp	r3, #0
 8105346:	d103      	bne.n	8105350 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105348:	68fb      	ldr	r3, [r7, #12]
 810534a:	681b      	ldr	r3, [r3, #0]
 810534c:	2220      	movs	r2, #32
 810534e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8105350:	6a3b      	ldr	r3, [r7, #32]
 8105352:	f043 0304 	orr.w	r3, r3, #4
 8105356:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8105358:	2301      	movs	r3, #1
 810535a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 810535e:	68fb      	ldr	r3, [r7, #12]
 8105360:	681b      	ldr	r3, [r3, #0]
 8105362:	699b      	ldr	r3, [r3, #24]
 8105364:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8105366:	69bb      	ldr	r3, [r7, #24]
 8105368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810536c:	2b00      	cmp	r3, #0
 810536e:	d00b      	beq.n	8105388 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8105370:	6a3b      	ldr	r3, [r7, #32]
 8105372:	f043 0301 	orr.w	r3, r3, #1
 8105376:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8105378:	68fb      	ldr	r3, [r7, #12]
 810537a:	681b      	ldr	r3, [r3, #0]
 810537c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8105380:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8105382:	2301      	movs	r3, #1
 8105384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8105388:	69bb      	ldr	r3, [r7, #24]
 810538a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810538e:	2b00      	cmp	r3, #0
 8105390:	d00b      	beq.n	81053aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8105392:	6a3b      	ldr	r3, [r7, #32]
 8105394:	f043 0308 	orr.w	r3, r3, #8
 8105398:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810539a:	68fb      	ldr	r3, [r7, #12]
 810539c:	681b      	ldr	r3, [r3, #0]
 810539e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81053a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81053a4:	2301      	movs	r3, #1
 81053a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 81053aa:	69bb      	ldr	r3, [r7, #24]
 81053ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81053b0:	2b00      	cmp	r3, #0
 81053b2:	d00b      	beq.n	81053cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 81053b4:	6a3b      	ldr	r3, [r7, #32]
 81053b6:	f043 0302 	orr.w	r3, r3, #2
 81053ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81053bc:	68fb      	ldr	r3, [r7, #12]
 81053be:	681b      	ldr	r3, [r3, #0]
 81053c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 81053c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81053c6:	2301      	movs	r3, #1
 81053c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 81053cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81053d0:	2b00      	cmp	r3, #0
 81053d2:	d01c      	beq.n	810540e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81053d4:	68f8      	ldr	r0, [r7, #12]
 81053d6:	f7ff fdc4 	bl	8104f62 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81053da:	68fb      	ldr	r3, [r7, #12]
 81053dc:	681b      	ldr	r3, [r3, #0]
 81053de:	6859      	ldr	r1, [r3, #4]
 81053e0:	68fb      	ldr	r3, [r7, #12]
 81053e2:	681a      	ldr	r2, [r3, #0]
 81053e4:	4b0d      	ldr	r3, [pc, #52]	; (810541c <I2C_IsErrorOccurred+0x1bc>)
 81053e6:	400b      	ands	r3, r1
 81053e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 81053ea:	68fb      	ldr	r3, [r7, #12]
 81053ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81053ee:	6a3b      	ldr	r3, [r7, #32]
 81053f0:	431a      	orrs	r2, r3
 81053f2:	68fb      	ldr	r3, [r7, #12]
 81053f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81053f6:	68fb      	ldr	r3, [r7, #12]
 81053f8:	2220      	movs	r2, #32
 81053fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81053fe:	68fb      	ldr	r3, [r7, #12]
 8105400:	2200      	movs	r2, #0
 8105402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105406:	68fb      	ldr	r3, [r7, #12]
 8105408:	2200      	movs	r2, #0
 810540a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 810540e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8105412:	4618      	mov	r0, r3
 8105414:	3728      	adds	r7, #40	; 0x28
 8105416:	46bd      	mov	sp, r7
 8105418:	bd80      	pop	{r7, pc}
 810541a:	bf00      	nop
 810541c:	fe00e800 	.word	0xfe00e800

08105420 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8105420:	b480      	push	{r7}
 8105422:	b087      	sub	sp, #28
 8105424:	af00      	add	r7, sp, #0
 8105426:	60f8      	str	r0, [r7, #12]
 8105428:	607b      	str	r3, [r7, #4]
 810542a:	460b      	mov	r3, r1
 810542c:	817b      	strh	r3, [r7, #10]
 810542e:	4613      	mov	r3, r2
 8105430:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105432:	897b      	ldrh	r3, [r7, #10]
 8105434:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8105438:	7a7b      	ldrb	r3, [r7, #9]
 810543a:	041b      	lsls	r3, r3, #16
 810543c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105440:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8105442:	687b      	ldr	r3, [r7, #4]
 8105444:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105446:	6a3b      	ldr	r3, [r7, #32]
 8105448:	4313      	orrs	r3, r2
 810544a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810544e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8105450:	68fb      	ldr	r3, [r7, #12]
 8105452:	681b      	ldr	r3, [r3, #0]
 8105454:	685a      	ldr	r2, [r3, #4]
 8105456:	6a3b      	ldr	r3, [r7, #32]
 8105458:	0d5b      	lsrs	r3, r3, #21
 810545a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 810545e:	4b08      	ldr	r3, [pc, #32]	; (8105480 <I2C_TransferConfig+0x60>)
 8105460:	430b      	orrs	r3, r1
 8105462:	43db      	mvns	r3, r3
 8105464:	ea02 0103 	and.w	r1, r2, r3
 8105468:	68fb      	ldr	r3, [r7, #12]
 810546a:	681b      	ldr	r3, [r3, #0]
 810546c:	697a      	ldr	r2, [r7, #20]
 810546e:	430a      	orrs	r2, r1
 8105470:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8105472:	bf00      	nop
 8105474:	371c      	adds	r7, #28
 8105476:	46bd      	mov	sp, r7
 8105478:	f85d 7b04 	ldr.w	r7, [sp], #4
 810547c:	4770      	bx	lr
 810547e:	bf00      	nop
 8105480:	03ff63ff 	.word	0x03ff63ff

08105484 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8105484:	b480      	push	{r7}
 8105486:	b083      	sub	sp, #12
 8105488:	af00      	add	r7, sp, #0
 810548a:	6078      	str	r0, [r7, #4]
 810548c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810548e:	687b      	ldr	r3, [r7, #4]
 8105490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105494:	b2db      	uxtb	r3, r3
 8105496:	2b20      	cmp	r3, #32
 8105498:	d138      	bne.n	810550c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810549a:	687b      	ldr	r3, [r7, #4]
 810549c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81054a0:	2b01      	cmp	r3, #1
 81054a2:	d101      	bne.n	81054a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81054a4:	2302      	movs	r3, #2
 81054a6:	e032      	b.n	810550e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81054a8:	687b      	ldr	r3, [r7, #4]
 81054aa:	2201      	movs	r2, #1
 81054ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81054b0:	687b      	ldr	r3, [r7, #4]
 81054b2:	2224      	movs	r2, #36	; 0x24
 81054b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81054b8:	687b      	ldr	r3, [r7, #4]
 81054ba:	681b      	ldr	r3, [r3, #0]
 81054bc:	681a      	ldr	r2, [r3, #0]
 81054be:	687b      	ldr	r3, [r7, #4]
 81054c0:	681b      	ldr	r3, [r3, #0]
 81054c2:	f022 0201 	bic.w	r2, r2, #1
 81054c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81054c8:	687b      	ldr	r3, [r7, #4]
 81054ca:	681b      	ldr	r3, [r3, #0]
 81054cc:	681a      	ldr	r2, [r3, #0]
 81054ce:	687b      	ldr	r3, [r7, #4]
 81054d0:	681b      	ldr	r3, [r3, #0]
 81054d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81054d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	6819      	ldr	r1, [r3, #0]
 81054de:	687b      	ldr	r3, [r7, #4]
 81054e0:	681b      	ldr	r3, [r3, #0]
 81054e2:	683a      	ldr	r2, [r7, #0]
 81054e4:	430a      	orrs	r2, r1
 81054e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81054e8:	687b      	ldr	r3, [r7, #4]
 81054ea:	681b      	ldr	r3, [r3, #0]
 81054ec:	681a      	ldr	r2, [r3, #0]
 81054ee:	687b      	ldr	r3, [r7, #4]
 81054f0:	681b      	ldr	r3, [r3, #0]
 81054f2:	f042 0201 	orr.w	r2, r2, #1
 81054f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81054f8:	687b      	ldr	r3, [r7, #4]
 81054fa:	2220      	movs	r2, #32
 81054fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105500:	687b      	ldr	r3, [r7, #4]
 8105502:	2200      	movs	r2, #0
 8105504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105508:	2300      	movs	r3, #0
 810550a:	e000      	b.n	810550e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810550c:	2302      	movs	r3, #2
  }
}
 810550e:	4618      	mov	r0, r3
 8105510:	370c      	adds	r7, #12
 8105512:	46bd      	mov	sp, r7
 8105514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105518:	4770      	bx	lr

0810551a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810551a:	b480      	push	{r7}
 810551c:	b085      	sub	sp, #20
 810551e:	af00      	add	r7, sp, #0
 8105520:	6078      	str	r0, [r7, #4]
 8105522:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105524:	687b      	ldr	r3, [r7, #4]
 8105526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810552a:	b2db      	uxtb	r3, r3
 810552c:	2b20      	cmp	r3, #32
 810552e:	d139      	bne.n	81055a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105530:	687b      	ldr	r3, [r7, #4]
 8105532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105536:	2b01      	cmp	r3, #1
 8105538:	d101      	bne.n	810553e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810553a:	2302      	movs	r3, #2
 810553c:	e033      	b.n	81055a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	2201      	movs	r2, #1
 8105542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105546:	687b      	ldr	r3, [r7, #4]
 8105548:	2224      	movs	r2, #36	; 0x24
 810554a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810554e:	687b      	ldr	r3, [r7, #4]
 8105550:	681b      	ldr	r3, [r3, #0]
 8105552:	681a      	ldr	r2, [r3, #0]
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	681b      	ldr	r3, [r3, #0]
 8105558:	f022 0201 	bic.w	r2, r2, #1
 810555c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	681b      	ldr	r3, [r3, #0]
 8105562:	681b      	ldr	r3, [r3, #0]
 8105564:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8105566:	68fb      	ldr	r3, [r7, #12]
 8105568:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810556c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810556e:	683b      	ldr	r3, [r7, #0]
 8105570:	021b      	lsls	r3, r3, #8
 8105572:	68fa      	ldr	r2, [r7, #12]
 8105574:	4313      	orrs	r3, r2
 8105576:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	681b      	ldr	r3, [r3, #0]
 810557c:	68fa      	ldr	r2, [r7, #12]
 810557e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105580:	687b      	ldr	r3, [r7, #4]
 8105582:	681b      	ldr	r3, [r3, #0]
 8105584:	681a      	ldr	r2, [r3, #0]
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	681b      	ldr	r3, [r3, #0]
 810558a:	f042 0201 	orr.w	r2, r2, #1
 810558e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105590:	687b      	ldr	r3, [r7, #4]
 8105592:	2220      	movs	r2, #32
 8105594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	2200      	movs	r2, #0
 810559c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81055a0:	2300      	movs	r3, #0
 81055a2:	e000      	b.n	81055a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81055a4:	2302      	movs	r3, #2
  }
}
 81055a6:	4618      	mov	r0, r3
 81055a8:	3714      	adds	r7, #20
 81055aa:	46bd      	mov	sp, r7
 81055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055b0:	4770      	bx	lr
	...

081055b4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81055b4:	b580      	push	{r7, lr}
 81055b6:	b084      	sub	sp, #16
 81055b8:	af00      	add	r7, sp, #0
 81055ba:	60f8      	str	r0, [r7, #12]
 81055bc:	460b      	mov	r3, r1
 81055be:	607a      	str	r2, [r7, #4]
 81055c0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81055c2:	4b37      	ldr	r3, [pc, #220]	; (81056a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055c4:	681b      	ldr	r3, [r3, #0]
 81055c6:	f023 0201 	bic.w	r2, r3, #1
 81055ca:	4935      	ldr	r1, [pc, #212]	; (81056a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055cc:	68fb      	ldr	r3, [r7, #12]
 81055ce:	4313      	orrs	r3, r2
 81055d0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	2b00      	cmp	r3, #0
 81055d6:	d123      	bne.n	8105620 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81055d8:	f7fe ff38 	bl	810444c <HAL_GetCurrentCPUID>
 81055dc:	4603      	mov	r3, r0
 81055de:	2b03      	cmp	r3, #3
 81055e0:	d158      	bne.n	8105694 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81055e2:	4b2f      	ldr	r3, [pc, #188]	; (81056a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055e4:	691b      	ldr	r3, [r3, #16]
 81055e6:	4a2e      	ldr	r2, [pc, #184]	; (81056a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055e8:	f023 0301 	bic.w	r3, r3, #1
 81055ec:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81055ee:	4b2d      	ldr	r3, [pc, #180]	; (81056a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81055f0:	691b      	ldr	r3, [r3, #16]
 81055f2:	4a2c      	ldr	r2, [pc, #176]	; (81056a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81055f4:	f043 0304 	orr.w	r3, r3, #4
 81055f8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81055fa:	f3bf 8f4f 	dsb	sy
}
 81055fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105600:	f3bf 8f6f 	isb	sy
}
 8105604:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105606:	7afb      	ldrb	r3, [r7, #11]
 8105608:	2b01      	cmp	r3, #1
 810560a:	d101      	bne.n	8105610 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810560c:	bf30      	wfi
 810560e:	e000      	b.n	8105612 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105610:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105612:	4b24      	ldr	r3, [pc, #144]	; (81056a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105614:	691b      	ldr	r3, [r3, #16]
 8105616:	4a23      	ldr	r2, [pc, #140]	; (81056a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105618:	f023 0304 	bic.w	r3, r3, #4
 810561c:	6113      	str	r3, [r2, #16]
 810561e:	e03c      	b.n	810569a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	2b01      	cmp	r3, #1
 8105624:	d123      	bne.n	810566e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105626:	f7fe ff11 	bl	810444c <HAL_GetCurrentCPUID>
 810562a:	4603      	mov	r3, r0
 810562c:	2b01      	cmp	r3, #1
 810562e:	d133      	bne.n	8105698 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105630:	4b1b      	ldr	r3, [pc, #108]	; (81056a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105632:	695b      	ldr	r3, [r3, #20]
 8105634:	4a1a      	ldr	r2, [pc, #104]	; (81056a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105636:	f023 0302 	bic.w	r3, r3, #2
 810563a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810563c:	4b19      	ldr	r3, [pc, #100]	; (81056a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810563e:	691b      	ldr	r3, [r3, #16]
 8105640:	4a18      	ldr	r2, [pc, #96]	; (81056a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105642:	f043 0304 	orr.w	r3, r3, #4
 8105646:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105648:	f3bf 8f4f 	dsb	sy
}
 810564c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810564e:	f3bf 8f6f 	isb	sy
}
 8105652:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105654:	7afb      	ldrb	r3, [r7, #11]
 8105656:	2b01      	cmp	r3, #1
 8105658:	d101      	bne.n	810565e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810565a:	bf30      	wfi
 810565c:	e000      	b.n	8105660 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810565e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105660:	4b10      	ldr	r3, [pc, #64]	; (81056a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105662:	691b      	ldr	r3, [r3, #16]
 8105664:	4a0f      	ldr	r2, [pc, #60]	; (81056a4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105666:	f023 0304 	bic.w	r3, r3, #4
 810566a:	6113      	str	r3, [r2, #16]
 810566c:	e015      	b.n	810569a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810566e:	f7fe feed 	bl	810444c <HAL_GetCurrentCPUID>
 8105672:	4603      	mov	r3, r0
 8105674:	2b03      	cmp	r3, #3
 8105676:	d106      	bne.n	8105686 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105678:	4b09      	ldr	r3, [pc, #36]	; (81056a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810567a:	691b      	ldr	r3, [r3, #16]
 810567c:	4a08      	ldr	r2, [pc, #32]	; (81056a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810567e:	f023 0304 	bic.w	r3, r3, #4
 8105682:	6113      	str	r3, [r2, #16]
 8105684:	e009      	b.n	810569a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105686:	4b06      	ldr	r3, [pc, #24]	; (81056a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105688:	695b      	ldr	r3, [r3, #20]
 810568a:	4a05      	ldr	r2, [pc, #20]	; (81056a0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810568c:	f023 0304 	bic.w	r3, r3, #4
 8105690:	6153      	str	r3, [r2, #20]
 8105692:	e002      	b.n	810569a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105694:	bf00      	nop
 8105696:	e000      	b.n	810569a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105698:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810569a:	3710      	adds	r7, #16
 810569c:	46bd      	mov	sp, r7
 810569e:	bd80      	pop	{r7, pc}
 81056a0:	58024800 	.word	0x58024800
 81056a4:	e000ed00 	.word	0xe000ed00

081056a8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81056a8:	b580      	push	{r7, lr}
 81056aa:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81056ac:	f7fe fece 	bl	810444c <HAL_GetCurrentCPUID>
 81056b0:	4603      	mov	r3, r0
 81056b2:	2b03      	cmp	r3, #3
 81056b4:	d101      	bne.n	81056ba <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81056b6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81056b8:	e001      	b.n	81056be <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81056ba:	bf40      	sev
    __WFE ();
 81056bc:	bf20      	wfe
}
 81056be:	bf00      	nop
 81056c0:	bd80      	pop	{r7, pc}
	...

081056c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81056c4:	b480      	push	{r7}
 81056c6:	b089      	sub	sp, #36	; 0x24
 81056c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81056ca:	4bb3      	ldr	r3, [pc, #716]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056cc:	691b      	ldr	r3, [r3, #16]
 81056ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81056d2:	2b18      	cmp	r3, #24
 81056d4:	f200 8155 	bhi.w	8105982 <HAL_RCC_GetSysClockFreq+0x2be>
 81056d8:	a201      	add	r2, pc, #4	; (adr r2, 81056e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81056de:	bf00      	nop
 81056e0:	08105745 	.word	0x08105745
 81056e4:	08105983 	.word	0x08105983
 81056e8:	08105983 	.word	0x08105983
 81056ec:	08105983 	.word	0x08105983
 81056f0:	08105983 	.word	0x08105983
 81056f4:	08105983 	.word	0x08105983
 81056f8:	08105983 	.word	0x08105983
 81056fc:	08105983 	.word	0x08105983
 8105700:	0810576b 	.word	0x0810576b
 8105704:	08105983 	.word	0x08105983
 8105708:	08105983 	.word	0x08105983
 810570c:	08105983 	.word	0x08105983
 8105710:	08105983 	.word	0x08105983
 8105714:	08105983 	.word	0x08105983
 8105718:	08105983 	.word	0x08105983
 810571c:	08105983 	.word	0x08105983
 8105720:	08105771 	.word	0x08105771
 8105724:	08105983 	.word	0x08105983
 8105728:	08105983 	.word	0x08105983
 810572c:	08105983 	.word	0x08105983
 8105730:	08105983 	.word	0x08105983
 8105734:	08105983 	.word	0x08105983
 8105738:	08105983 	.word	0x08105983
 810573c:	08105983 	.word	0x08105983
 8105740:	08105777 	.word	0x08105777
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105744:	4b94      	ldr	r3, [pc, #592]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105746:	681b      	ldr	r3, [r3, #0]
 8105748:	f003 0320 	and.w	r3, r3, #32
 810574c:	2b00      	cmp	r3, #0
 810574e:	d009      	beq.n	8105764 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105750:	4b91      	ldr	r3, [pc, #580]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105752:	681b      	ldr	r3, [r3, #0]
 8105754:	08db      	lsrs	r3, r3, #3
 8105756:	f003 0303 	and.w	r3, r3, #3
 810575a:	4a90      	ldr	r2, [pc, #576]	; (810599c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810575c:	fa22 f303 	lsr.w	r3, r2, r3
 8105760:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8105762:	e111      	b.n	8105988 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105764:	4b8d      	ldr	r3, [pc, #564]	; (810599c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105766:	61bb      	str	r3, [r7, #24]
      break;
 8105768:	e10e      	b.n	8105988 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810576a:	4b8d      	ldr	r3, [pc, #564]	; (81059a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810576c:	61bb      	str	r3, [r7, #24]
      break;
 810576e:	e10b      	b.n	8105988 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8105770:	4b8c      	ldr	r3, [pc, #560]	; (81059a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8105772:	61bb      	str	r3, [r7, #24]
      break;
 8105774:	e108      	b.n	8105988 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105776:	4b88      	ldr	r3, [pc, #544]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810577a:	f003 0303 	and.w	r3, r3, #3
 810577e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8105780:	4b85      	ldr	r3, [pc, #532]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105784:	091b      	lsrs	r3, r3, #4
 8105786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810578a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810578c:	4b82      	ldr	r3, [pc, #520]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105790:	f003 0301 	and.w	r3, r3, #1
 8105794:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105796:	4b80      	ldr	r3, [pc, #512]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810579a:	08db      	lsrs	r3, r3, #3
 810579c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81057a0:	68fa      	ldr	r2, [r7, #12]
 81057a2:	fb02 f303 	mul.w	r3, r2, r3
 81057a6:	ee07 3a90 	vmov	s15, r3
 81057aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81057b2:	693b      	ldr	r3, [r7, #16]
 81057b4:	2b00      	cmp	r3, #0
 81057b6:	f000 80e1 	beq.w	810597c <HAL_RCC_GetSysClockFreq+0x2b8>
 81057ba:	697b      	ldr	r3, [r7, #20]
 81057bc:	2b02      	cmp	r3, #2
 81057be:	f000 8083 	beq.w	81058c8 <HAL_RCC_GetSysClockFreq+0x204>
 81057c2:	697b      	ldr	r3, [r7, #20]
 81057c4:	2b02      	cmp	r3, #2
 81057c6:	f200 80a1 	bhi.w	810590c <HAL_RCC_GetSysClockFreq+0x248>
 81057ca:	697b      	ldr	r3, [r7, #20]
 81057cc:	2b00      	cmp	r3, #0
 81057ce:	d003      	beq.n	81057d8 <HAL_RCC_GetSysClockFreq+0x114>
 81057d0:	697b      	ldr	r3, [r7, #20]
 81057d2:	2b01      	cmp	r3, #1
 81057d4:	d056      	beq.n	8105884 <HAL_RCC_GetSysClockFreq+0x1c0>
 81057d6:	e099      	b.n	810590c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81057d8:	4b6f      	ldr	r3, [pc, #444]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057da:	681b      	ldr	r3, [r3, #0]
 81057dc:	f003 0320 	and.w	r3, r3, #32
 81057e0:	2b00      	cmp	r3, #0
 81057e2:	d02d      	beq.n	8105840 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81057e4:	4b6c      	ldr	r3, [pc, #432]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057e6:	681b      	ldr	r3, [r3, #0]
 81057e8:	08db      	lsrs	r3, r3, #3
 81057ea:	f003 0303 	and.w	r3, r3, #3
 81057ee:	4a6b      	ldr	r2, [pc, #428]	; (810599c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81057f0:	fa22 f303 	lsr.w	r3, r2, r3
 81057f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81057f6:	687b      	ldr	r3, [r7, #4]
 81057f8:	ee07 3a90 	vmov	s15, r3
 81057fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105800:	693b      	ldr	r3, [r7, #16]
 8105802:	ee07 3a90 	vmov	s15, r3
 8105806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810580a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810580e:	4b62      	ldr	r3, [pc, #392]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105816:	ee07 3a90 	vmov	s15, r3
 810581a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810581e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105822:	eddf 5a61 	vldr	s11, [pc, #388]	; 81059a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810582a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810582e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105836:	ee67 7a27 	vmul.f32	s15, s14, s15
 810583a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810583e:	e087      	b.n	8105950 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105840:	693b      	ldr	r3, [r7, #16]
 8105842:	ee07 3a90 	vmov	s15, r3
 8105846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810584a:	eddf 6a58 	vldr	s13, [pc, #352]	; 81059ac <HAL_RCC_GetSysClockFreq+0x2e8>
 810584e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105852:	4b51      	ldr	r3, [pc, #324]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810585a:	ee07 3a90 	vmov	s15, r3
 810585e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105862:	ed97 6a02 	vldr	s12, [r7, #8]
 8105866:	eddf 5a50 	vldr	s11, [pc, #320]	; 81059a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 810586a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810586e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810587e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105882:	e065      	b.n	8105950 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105884:	693b      	ldr	r3, [r7, #16]
 8105886:	ee07 3a90 	vmov	s15, r3
 810588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810588e:	eddf 6a48 	vldr	s13, [pc, #288]	; 81059b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105896:	4b40      	ldr	r3, [pc, #256]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810589a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810589e:	ee07 3a90 	vmov	s15, r3
 81058a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81058aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81059a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81058ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81058c6:	e043      	b.n	8105950 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81058c8:	693b      	ldr	r3, [r7, #16]
 81058ca:	ee07 3a90 	vmov	s15, r3
 81058ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 81059b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 81058d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058da:	4b2f      	ldr	r3, [pc, #188]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058e2:	ee07 3a90 	vmov	s15, r3
 81058e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058ea:	ed97 6a02 	vldr	s12, [r7, #8]
 81058ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81059a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81058f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810590a:	e021      	b.n	8105950 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810590c:	693b      	ldr	r3, [r7, #16]
 810590e:	ee07 3a90 	vmov	s15, r3
 8105912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105916:	eddf 6a26 	vldr	s13, [pc, #152]	; 81059b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 810591a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810591e:	4b1e      	ldr	r3, [pc, #120]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105926:	ee07 3a90 	vmov	s15, r3
 810592a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810592e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105932:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81059a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810593a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810593e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105946:	ee67 7a27 	vmul.f32	s15, s14, s15
 810594a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810594e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8105950:	4b11      	ldr	r3, [pc, #68]	; (8105998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105954:	0a5b      	lsrs	r3, r3, #9
 8105956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810595a:	3301      	adds	r3, #1
 810595c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810595e:	683b      	ldr	r3, [r7, #0]
 8105960:	ee07 3a90 	vmov	s15, r3
 8105964:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8105968:	edd7 6a07 	vldr	s13, [r7, #28]
 810596c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105974:	ee17 3a90 	vmov	r3, s15
 8105978:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810597a:	e005      	b.n	8105988 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810597c:	2300      	movs	r3, #0
 810597e:	61bb      	str	r3, [r7, #24]
      break;
 8105980:	e002      	b.n	8105988 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8105982:	4b07      	ldr	r3, [pc, #28]	; (81059a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105984:	61bb      	str	r3, [r7, #24]
      break;
 8105986:	bf00      	nop
  }

  return sysclockfreq;
 8105988:	69bb      	ldr	r3, [r7, #24]
}
 810598a:	4618      	mov	r0, r3
 810598c:	3724      	adds	r7, #36	; 0x24
 810598e:	46bd      	mov	sp, r7
 8105990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105994:	4770      	bx	lr
 8105996:	bf00      	nop
 8105998:	58024400 	.word	0x58024400
 810599c:	03d09000 	.word	0x03d09000
 81059a0:	003d0900 	.word	0x003d0900
 81059a4:	007a1200 	.word	0x007a1200
 81059a8:	46000000 	.word	0x46000000
 81059ac:	4c742400 	.word	0x4c742400
 81059b0:	4a742400 	.word	0x4a742400
 81059b4:	4af42400 	.word	0x4af42400

081059b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81059b8:	b580      	push	{r7, lr}
 81059ba:	b082      	sub	sp, #8
 81059bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81059be:	f7ff fe81 	bl	81056c4 <HAL_RCC_GetSysClockFreq>
 81059c2:	4602      	mov	r2, r0
 81059c4:	4b11      	ldr	r3, [pc, #68]	; (8105a0c <HAL_RCC_GetHCLKFreq+0x54>)
 81059c6:	699b      	ldr	r3, [r3, #24]
 81059c8:	0a1b      	lsrs	r3, r3, #8
 81059ca:	f003 030f 	and.w	r3, r3, #15
 81059ce:	4910      	ldr	r1, [pc, #64]	; (8105a10 <HAL_RCC_GetHCLKFreq+0x58>)
 81059d0:	5ccb      	ldrb	r3, [r1, r3]
 81059d2:	f003 031f 	and.w	r3, r3, #31
 81059d6:	fa22 f303 	lsr.w	r3, r2, r3
 81059da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81059dc:	4b0b      	ldr	r3, [pc, #44]	; (8105a0c <HAL_RCC_GetHCLKFreq+0x54>)
 81059de:	699b      	ldr	r3, [r3, #24]
 81059e0:	f003 030f 	and.w	r3, r3, #15
 81059e4:	4a0a      	ldr	r2, [pc, #40]	; (8105a10 <HAL_RCC_GetHCLKFreq+0x58>)
 81059e6:	5cd3      	ldrb	r3, [r2, r3]
 81059e8:	f003 031f 	and.w	r3, r3, #31
 81059ec:	687a      	ldr	r2, [r7, #4]
 81059ee:	fa22 f303 	lsr.w	r3, r2, r3
 81059f2:	4a08      	ldr	r2, [pc, #32]	; (8105a14 <HAL_RCC_GetHCLKFreq+0x5c>)
 81059f4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81059f6:	4b07      	ldr	r3, [pc, #28]	; (8105a14 <HAL_RCC_GetHCLKFreq+0x5c>)
 81059f8:	681b      	ldr	r3, [r3, #0]
 81059fa:	4a07      	ldr	r2, [pc, #28]	; (8105a18 <HAL_RCC_GetHCLKFreq+0x60>)
 81059fc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81059fe:	4b05      	ldr	r3, [pc, #20]	; (8105a14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105a00:	681b      	ldr	r3, [r3, #0]
}
 8105a02:	4618      	mov	r0, r3
 8105a04:	3708      	adds	r7, #8
 8105a06:	46bd      	mov	sp, r7
 8105a08:	bd80      	pop	{r7, pc}
 8105a0a:	bf00      	nop
 8105a0c:	58024400 	.word	0x58024400
 8105a10:	0810fb2c 	.word	0x0810fb2c
 8105a14:	10000004 	.word	0x10000004
 8105a18:	10000000 	.word	0x10000000

08105a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105a1c:	b580      	push	{r7, lr}
 8105a1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105a20:	f7ff ffca 	bl	81059b8 <HAL_RCC_GetHCLKFreq>
 8105a24:	4602      	mov	r2, r0
 8105a26:	4b06      	ldr	r3, [pc, #24]	; (8105a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8105a28:	69db      	ldr	r3, [r3, #28]
 8105a2a:	091b      	lsrs	r3, r3, #4
 8105a2c:	f003 0307 	and.w	r3, r3, #7
 8105a30:	4904      	ldr	r1, [pc, #16]	; (8105a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8105a32:	5ccb      	ldrb	r3, [r1, r3]
 8105a34:	f003 031f 	and.w	r3, r3, #31
 8105a38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105a3c:	4618      	mov	r0, r3
 8105a3e:	bd80      	pop	{r7, pc}
 8105a40:	58024400 	.word	0x58024400
 8105a44:	0810fb2c 	.word	0x0810fb2c

08105a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105a48:	b580      	push	{r7, lr}
 8105a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105a4c:	f7ff ffb4 	bl	81059b8 <HAL_RCC_GetHCLKFreq>
 8105a50:	4602      	mov	r2, r0
 8105a52:	4b06      	ldr	r3, [pc, #24]	; (8105a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8105a54:	69db      	ldr	r3, [r3, #28]
 8105a56:	0a1b      	lsrs	r3, r3, #8
 8105a58:	f003 0307 	and.w	r3, r3, #7
 8105a5c:	4904      	ldr	r1, [pc, #16]	; (8105a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8105a5e:	5ccb      	ldrb	r3, [r1, r3]
 8105a60:	f003 031f 	and.w	r3, r3, #31
 8105a64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8105a68:	4618      	mov	r0, r3
 8105a6a:	bd80      	pop	{r7, pc}
 8105a6c:	58024400 	.word	0x58024400
 8105a70:	0810fb2c 	.word	0x0810fb2c

08105a74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8105a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8105a78:	b0ca      	sub	sp, #296	; 0x128
 8105a7a:	af00      	add	r7, sp, #0
 8105a7c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8105a80:	2300      	movs	r3, #0
 8105a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8105a86:	2300      	movs	r3, #0
 8105a88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a94:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8105a98:	2500      	movs	r5, #0
 8105a9a:	ea54 0305 	orrs.w	r3, r4, r5
 8105a9e:	d049      	beq.n	8105b34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8105aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105aa6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105aaa:	d02f      	beq.n	8105b0c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8105aac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105ab0:	d828      	bhi.n	8105b04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8105ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105ab6:	d01a      	beq.n	8105aee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8105ab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105abc:	d822      	bhi.n	8105b04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8105abe:	2b00      	cmp	r3, #0
 8105ac0:	d003      	beq.n	8105aca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8105ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105ac6:	d007      	beq.n	8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105ac8:	e01c      	b.n	8105b04 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105aca:	4bb8      	ldr	r3, [pc, #736]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ace:	4ab7      	ldr	r2, [pc, #732]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105ad6:	e01a      	b.n	8105b0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105adc:	3308      	adds	r3, #8
 8105ade:	2102      	movs	r1, #2
 8105ae0:	4618      	mov	r0, r3
 8105ae2:	f002 fb61 	bl	81081a8 <RCCEx_PLL2_Config>
 8105ae6:	4603      	mov	r3, r0
 8105ae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105aec:	e00f      	b.n	8105b0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105af2:	3328      	adds	r3, #40	; 0x28
 8105af4:	2102      	movs	r1, #2
 8105af6:	4618      	mov	r0, r3
 8105af8:	f002 fc08 	bl	810830c <RCCEx_PLL3_Config>
 8105afc:	4603      	mov	r3, r0
 8105afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105b02:	e004      	b.n	8105b0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105b04:	2301      	movs	r3, #1
 8105b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105b0a:	e000      	b.n	8105b0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8105b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b12:	2b00      	cmp	r3, #0
 8105b14:	d10a      	bne.n	8105b2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105b16:	4ba5      	ldr	r3, [pc, #660]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105b1a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8105b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105b24:	4aa1      	ldr	r2, [pc, #644]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b26:	430b      	orrs	r3, r1
 8105b28:	6513      	str	r3, [r2, #80]	; 0x50
 8105b2a:	e003      	b.n	8105b34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b3c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8105b40:	f04f 0900 	mov.w	r9, #0
 8105b44:	ea58 0309 	orrs.w	r3, r8, r9
 8105b48:	d047      	beq.n	8105bda <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8105b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105b50:	2b04      	cmp	r3, #4
 8105b52:	d82a      	bhi.n	8105baa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8105b54:	a201      	add	r2, pc, #4	; (adr r2, 8105b5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8105b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b5a:	bf00      	nop
 8105b5c:	08105b71 	.word	0x08105b71
 8105b60:	08105b7f 	.word	0x08105b7f
 8105b64:	08105b95 	.word	0x08105b95
 8105b68:	08105bb3 	.word	0x08105bb3
 8105b6c:	08105bb3 	.word	0x08105bb3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b70:	4b8e      	ldr	r3, [pc, #568]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b74:	4a8d      	ldr	r2, [pc, #564]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105b7c:	e01a      	b.n	8105bb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b82:	3308      	adds	r3, #8
 8105b84:	2100      	movs	r1, #0
 8105b86:	4618      	mov	r0, r3
 8105b88:	f002 fb0e 	bl	81081a8 <RCCEx_PLL2_Config>
 8105b8c:	4603      	mov	r3, r0
 8105b8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105b92:	e00f      	b.n	8105bb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b98:	3328      	adds	r3, #40	; 0x28
 8105b9a:	2100      	movs	r1, #0
 8105b9c:	4618      	mov	r0, r3
 8105b9e:	f002 fbb5 	bl	810830c <RCCEx_PLL3_Config>
 8105ba2:	4603      	mov	r3, r0
 8105ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105ba8:	e004      	b.n	8105bb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105baa:	2301      	movs	r3, #1
 8105bac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105bb0:	e000      	b.n	8105bb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8105bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105bb8:	2b00      	cmp	r3, #0
 8105bba:	d10a      	bne.n	8105bd2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8105bbc:	4b7b      	ldr	r3, [pc, #492]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105bc0:	f023 0107 	bic.w	r1, r3, #7
 8105bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105bca:	4a78      	ldr	r2, [pc, #480]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105bcc:	430b      	orrs	r3, r1
 8105bce:	6513      	str	r3, [r2, #80]	; 0x50
 8105bd0:	e003      	b.n	8105bda <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105bd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105be2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8105be6:	f04f 0b00 	mov.w	fp, #0
 8105bea:	ea5a 030b 	orrs.w	r3, sl, fp
 8105bee:	d04c      	beq.n	8105c8a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8105bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105bfa:	d030      	beq.n	8105c5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8105bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105c00:	d829      	bhi.n	8105c56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105c02:	2bc0      	cmp	r3, #192	; 0xc0
 8105c04:	d02d      	beq.n	8105c62 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8105c06:	2bc0      	cmp	r3, #192	; 0xc0
 8105c08:	d825      	bhi.n	8105c56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105c0a:	2b80      	cmp	r3, #128	; 0x80
 8105c0c:	d018      	beq.n	8105c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8105c0e:	2b80      	cmp	r3, #128	; 0x80
 8105c10:	d821      	bhi.n	8105c56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105c12:	2b00      	cmp	r3, #0
 8105c14:	d002      	beq.n	8105c1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8105c16:	2b40      	cmp	r3, #64	; 0x40
 8105c18:	d007      	beq.n	8105c2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8105c1a:	e01c      	b.n	8105c56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c1c:	4b63      	ldr	r3, [pc, #396]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c20:	4a62      	ldr	r2, [pc, #392]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105c26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105c28:	e01c      	b.n	8105c64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c2e:	3308      	adds	r3, #8
 8105c30:	2100      	movs	r1, #0
 8105c32:	4618      	mov	r0, r3
 8105c34:	f002 fab8 	bl	81081a8 <RCCEx_PLL2_Config>
 8105c38:	4603      	mov	r3, r0
 8105c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105c3e:	e011      	b.n	8105c64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c44:	3328      	adds	r3, #40	; 0x28
 8105c46:	2100      	movs	r1, #0
 8105c48:	4618      	mov	r0, r3
 8105c4a:	f002 fb5f 	bl	810830c <RCCEx_PLL3_Config>
 8105c4e:	4603      	mov	r3, r0
 8105c50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105c54:	e006      	b.n	8105c64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105c56:	2301      	movs	r3, #1
 8105c58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105c5c:	e002      	b.n	8105c64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105c5e:	bf00      	nop
 8105c60:	e000      	b.n	8105c64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105c64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105c68:	2b00      	cmp	r3, #0
 8105c6a:	d10a      	bne.n	8105c82 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105c6c:	4b4f      	ldr	r3, [pc, #316]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105c70:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8105c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c7a:	4a4c      	ldr	r2, [pc, #304]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c7c:	430b      	orrs	r3, r1
 8105c7e:	6513      	str	r3, [r2, #80]	; 0x50
 8105c80:	e003      	b.n	8105c8a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105c86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c92:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8105c96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8105c9a:	2300      	movs	r3, #0
 8105c9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8105ca0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8105ca4:	460b      	mov	r3, r1
 8105ca6:	4313      	orrs	r3, r2
 8105ca8:	d053      	beq.n	8105d52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8105caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105cae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105cb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105cb6:	d035      	beq.n	8105d24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8105cb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105cbc:	d82e      	bhi.n	8105d1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105cbe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105cc2:	d031      	beq.n	8105d28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8105cc4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105cc8:	d828      	bhi.n	8105d1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105cce:	d01a      	beq.n	8105d06 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8105cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105cd4:	d822      	bhi.n	8105d1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105cd6:	2b00      	cmp	r3, #0
 8105cd8:	d003      	beq.n	8105ce2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8105cda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105cde:	d007      	beq.n	8105cf0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8105ce0:	e01c      	b.n	8105d1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ce2:	4b32      	ldr	r3, [pc, #200]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ce6:	4a31      	ldr	r2, [pc, #196]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105cec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105cee:	e01c      	b.n	8105d2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105cf4:	3308      	adds	r3, #8
 8105cf6:	2100      	movs	r1, #0
 8105cf8:	4618      	mov	r0, r3
 8105cfa:	f002 fa55 	bl	81081a8 <RCCEx_PLL2_Config>
 8105cfe:	4603      	mov	r3, r0
 8105d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105d04:	e011      	b.n	8105d2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d0a:	3328      	adds	r3, #40	; 0x28
 8105d0c:	2100      	movs	r1, #0
 8105d0e:	4618      	mov	r0, r3
 8105d10:	f002 fafc 	bl	810830c <RCCEx_PLL3_Config>
 8105d14:	4603      	mov	r3, r0
 8105d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105d1a:	e006      	b.n	8105d2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105d1c:	2301      	movs	r3, #1
 8105d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105d22:	e002      	b.n	8105d2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105d24:	bf00      	nop
 8105d26:	e000      	b.n	8105d2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105d2e:	2b00      	cmp	r3, #0
 8105d30:	d10b      	bne.n	8105d4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105d32:	4b1e      	ldr	r3, [pc, #120]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105d36:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8105d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105d42:	4a1a      	ldr	r2, [pc, #104]	; (8105dac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105d44:	430b      	orrs	r3, r1
 8105d46:	6593      	str	r3, [r2, #88]	; 0x58
 8105d48:	e003      	b.n	8105d52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105d4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d5a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8105d5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8105d62:	2300      	movs	r3, #0
 8105d64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8105d68:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8105d6c:	460b      	mov	r3, r1
 8105d6e:	4313      	orrs	r3, r2
 8105d70:	d056      	beq.n	8105e20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8105d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105d7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105d7e:	d038      	beq.n	8105df2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8105d80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105d84:	d831      	bhi.n	8105dea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105d86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105d8a:	d034      	beq.n	8105df6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8105d8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105d90:	d82b      	bhi.n	8105dea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105d92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105d96:	d01d      	beq.n	8105dd4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8105d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105d9c:	d825      	bhi.n	8105dea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105d9e:	2b00      	cmp	r3, #0
 8105da0:	d006      	beq.n	8105db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8105da2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105da6:	d00a      	beq.n	8105dbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8105da8:	e01f      	b.n	8105dea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105daa:	bf00      	nop
 8105dac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105db0:	4ba2      	ldr	r3, [pc, #648]	; (810603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105db4:	4aa1      	ldr	r2, [pc, #644]	; (810603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105dba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105dbc:	e01c      	b.n	8105df8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105dc2:	3308      	adds	r3, #8
 8105dc4:	2100      	movs	r1, #0
 8105dc6:	4618      	mov	r0, r3
 8105dc8:	f002 f9ee 	bl	81081a8 <RCCEx_PLL2_Config>
 8105dcc:	4603      	mov	r3, r0
 8105dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105dd2:	e011      	b.n	8105df8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105dd8:	3328      	adds	r3, #40	; 0x28
 8105dda:	2100      	movs	r1, #0
 8105ddc:	4618      	mov	r0, r3
 8105dde:	f002 fa95 	bl	810830c <RCCEx_PLL3_Config>
 8105de2:	4603      	mov	r3, r0
 8105de4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105de8:	e006      	b.n	8105df8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105dea:	2301      	movs	r3, #1
 8105dec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105df0:	e002      	b.n	8105df8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105df2:	bf00      	nop
 8105df4:	e000      	b.n	8105df8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105df8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105dfc:	2b00      	cmp	r3, #0
 8105dfe:	d10b      	bne.n	8105e18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105e00:	4b8e      	ldr	r3, [pc, #568]	; (810603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105e04:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8105e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105e10:	4a8a      	ldr	r2, [pc, #552]	; (810603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e12:	430b      	orrs	r3, r1
 8105e14:	6593      	str	r3, [r2, #88]	; 0x58
 8105e16:	e003      	b.n	8105e20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e28:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8105e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8105e30:	2300      	movs	r3, #0
 8105e32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8105e36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8105e3a:	460b      	mov	r3, r1
 8105e3c:	4313      	orrs	r3, r2
 8105e3e:	d03a      	beq.n	8105eb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8105e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e46:	2b30      	cmp	r3, #48	; 0x30
 8105e48:	d01f      	beq.n	8105e8a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8105e4a:	2b30      	cmp	r3, #48	; 0x30
 8105e4c:	d819      	bhi.n	8105e82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105e4e:	2b20      	cmp	r3, #32
 8105e50:	d00c      	beq.n	8105e6c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8105e52:	2b20      	cmp	r3, #32
 8105e54:	d815      	bhi.n	8105e82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105e56:	2b00      	cmp	r3, #0
 8105e58:	d019      	beq.n	8105e8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8105e5a:	2b10      	cmp	r3, #16
 8105e5c:	d111      	bne.n	8105e82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e5e:	4b77      	ldr	r3, [pc, #476]	; (810603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e62:	4a76      	ldr	r2, [pc, #472]	; (810603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105e68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8105e6a:	e011      	b.n	8105e90 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e70:	3308      	adds	r3, #8
 8105e72:	2102      	movs	r1, #2
 8105e74:	4618      	mov	r0, r3
 8105e76:	f002 f997 	bl	81081a8 <RCCEx_PLL2_Config>
 8105e7a:	4603      	mov	r3, r0
 8105e7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8105e80:	e006      	b.n	8105e90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105e82:	2301      	movs	r3, #1
 8105e84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105e88:	e002      	b.n	8105e90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8105e8a:	bf00      	nop
 8105e8c:	e000      	b.n	8105e90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8105e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105e90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e94:	2b00      	cmp	r3, #0
 8105e96:	d10a      	bne.n	8105eae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105e98:	4b68      	ldr	r3, [pc, #416]	; (810603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e9c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8105ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105ea6:	4a65      	ldr	r2, [pc, #404]	; (810603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105ea8:	430b      	orrs	r3, r1
 8105eaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8105eac:	e003      	b.n	8105eb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105eae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105eb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ebe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8105ec2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8105ec6:	2300      	movs	r3, #0
 8105ec8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8105ecc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8105ed0:	460b      	mov	r3, r1
 8105ed2:	4313      	orrs	r3, r2
 8105ed4:	d051      	beq.n	8105f7a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8105ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105edc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105ee0:	d035      	beq.n	8105f4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8105ee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105ee6:	d82e      	bhi.n	8105f46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105ee8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105eec:	d031      	beq.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8105eee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105ef2:	d828      	bhi.n	8105f46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105ef8:	d01a      	beq.n	8105f30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8105efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105efe:	d822      	bhi.n	8105f46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105f00:	2b00      	cmp	r3, #0
 8105f02:	d003      	beq.n	8105f0c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8105f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105f08:	d007      	beq.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8105f0a:	e01c      	b.n	8105f46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105f0c:	4b4b      	ldr	r3, [pc, #300]	; (810603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f10:	4a4a      	ldr	r2, [pc, #296]	; (810603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105f16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105f18:	e01c      	b.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f1e:	3308      	adds	r3, #8
 8105f20:	2100      	movs	r1, #0
 8105f22:	4618      	mov	r0, r3
 8105f24:	f002 f940 	bl	81081a8 <RCCEx_PLL2_Config>
 8105f28:	4603      	mov	r3, r0
 8105f2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105f2e:	e011      	b.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f34:	3328      	adds	r3, #40	; 0x28
 8105f36:	2100      	movs	r1, #0
 8105f38:	4618      	mov	r0, r3
 8105f3a:	f002 f9e7 	bl	810830c <RCCEx_PLL3_Config>
 8105f3e:	4603      	mov	r3, r0
 8105f40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105f44:	e006      	b.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105f46:	2301      	movs	r3, #1
 8105f48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105f4c:	e002      	b.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105f4e:	bf00      	nop
 8105f50:	e000      	b.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105f54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105f58:	2b00      	cmp	r3, #0
 8105f5a:	d10a      	bne.n	8105f72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105f5c:	4b37      	ldr	r3, [pc, #220]	; (810603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105f60:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8105f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105f6a:	4a34      	ldr	r2, [pc, #208]	; (810603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105f6c:	430b      	orrs	r3, r1
 8105f6e:	6513      	str	r3, [r2, #80]	; 0x50
 8105f70:	e003      	b.n	8105f7a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105f76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f82:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8105f86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8105f8a:	2300      	movs	r3, #0
 8105f8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8105f90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8105f94:	460b      	mov	r3, r1
 8105f96:	4313      	orrs	r3, r2
 8105f98:	d056      	beq.n	8106048 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8105f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105fa4:	d033      	beq.n	810600e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8105fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105faa:	d82c      	bhi.n	8106006 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105fac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105fb0:	d02f      	beq.n	8106012 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8105fb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105fb6:	d826      	bhi.n	8106006 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105fb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105fbc:	d02b      	beq.n	8106016 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8105fbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105fc2:	d820      	bhi.n	8106006 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105fc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105fc8:	d012      	beq.n	8105ff0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8105fca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105fce:	d81a      	bhi.n	8106006 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105fd0:	2b00      	cmp	r3, #0
 8105fd2:	d022      	beq.n	810601a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8105fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105fd8:	d115      	bne.n	8106006 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105fde:	3308      	adds	r3, #8
 8105fe0:	2101      	movs	r1, #1
 8105fe2:	4618      	mov	r0, r3
 8105fe4:	f002 f8e0 	bl	81081a8 <RCCEx_PLL2_Config>
 8105fe8:	4603      	mov	r3, r0
 8105fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8105fee:	e015      	b.n	810601c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ff4:	3328      	adds	r3, #40	; 0x28
 8105ff6:	2101      	movs	r1, #1
 8105ff8:	4618      	mov	r0, r3
 8105ffa:	f002 f987 	bl	810830c <RCCEx_PLL3_Config>
 8105ffe:	4603      	mov	r3, r0
 8106000:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106004:	e00a      	b.n	810601c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106006:	2301      	movs	r3, #1
 8106008:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810600c:	e006      	b.n	810601c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810600e:	bf00      	nop
 8106010:	e004      	b.n	810601c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106012:	bf00      	nop
 8106014:	e002      	b.n	810601c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106016:	bf00      	nop
 8106018:	e000      	b.n	810601c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810601a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810601c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106020:	2b00      	cmp	r3, #0
 8106022:	d10d      	bne.n	8106040 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8106024:	4b05      	ldr	r3, [pc, #20]	; (810603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106028:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 810602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106032:	4a02      	ldr	r2, [pc, #8]	; (810603c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106034:	430b      	orrs	r3, r1
 8106036:	6513      	str	r3, [r2, #80]	; 0x50
 8106038:	e006      	b.n	8106048 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810603a:	bf00      	nop
 810603c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106044:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106050:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8106054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8106058:	2300      	movs	r3, #0
 810605a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 810605e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8106062:	460b      	mov	r3, r1
 8106064:	4313      	orrs	r3, r2
 8106066:	d055      	beq.n	8106114 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8106068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810606c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106074:	d033      	beq.n	81060de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8106076:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810607a:	d82c      	bhi.n	81060d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810607c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106080:	d02f      	beq.n	81060e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8106082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106086:	d826      	bhi.n	81060d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106088:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810608c:	d02b      	beq.n	81060e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810608e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106092:	d820      	bhi.n	81060d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106098:	d012      	beq.n	81060c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810609a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810609e:	d81a      	bhi.n	81060d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81060a0:	2b00      	cmp	r3, #0
 81060a2:	d022      	beq.n	81060ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 81060a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81060a8:	d115      	bne.n	81060d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81060aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060ae:	3308      	adds	r3, #8
 81060b0:	2101      	movs	r1, #1
 81060b2:	4618      	mov	r0, r3
 81060b4:	f002 f878 	bl	81081a8 <RCCEx_PLL2_Config>
 81060b8:	4603      	mov	r3, r0
 81060ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81060be:	e015      	b.n	81060ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81060c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060c4:	3328      	adds	r3, #40	; 0x28
 81060c6:	2101      	movs	r1, #1
 81060c8:	4618      	mov	r0, r3
 81060ca:	f002 f91f 	bl	810830c <RCCEx_PLL3_Config>
 81060ce:	4603      	mov	r3, r0
 81060d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81060d4:	e00a      	b.n	81060ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81060d6:	2301      	movs	r3, #1
 81060d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81060dc:	e006      	b.n	81060ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81060de:	bf00      	nop
 81060e0:	e004      	b.n	81060ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81060e2:	bf00      	nop
 81060e4:	e002      	b.n	81060ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81060e6:	bf00      	nop
 81060e8:	e000      	b.n	81060ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81060ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 81060ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81060f0:	2b00      	cmp	r3, #0
 81060f2:	d10b      	bne.n	810610c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81060f4:	4ba4      	ldr	r3, [pc, #656]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81060f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81060f8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 81060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106100:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106104:	4aa0      	ldr	r2, [pc, #640]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106106:	430b      	orrs	r3, r1
 8106108:	6593      	str	r3, [r2, #88]	; 0x58
 810610a:	e003      	b.n	8106114 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810610c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106110:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8106114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106118:	e9d3 2300 	ldrd	r2, r3, [r3]
 810611c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8106120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8106124:	2300      	movs	r3, #0
 8106126:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 810612a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 810612e:	460b      	mov	r3, r1
 8106130:	4313      	orrs	r3, r2
 8106132:	d037      	beq.n	81061a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8106134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810613a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810613e:	d00e      	beq.n	810615e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8106140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106144:	d816      	bhi.n	8106174 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8106146:	2b00      	cmp	r3, #0
 8106148:	d018      	beq.n	810617c <HAL_RCCEx_PeriphCLKConfig+0x708>
 810614a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810614e:	d111      	bne.n	8106174 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106150:	4b8d      	ldr	r3, [pc, #564]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106154:	4a8c      	ldr	r2, [pc, #560]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810615a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810615c:	e00f      	b.n	810617e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106162:	3308      	adds	r3, #8
 8106164:	2101      	movs	r1, #1
 8106166:	4618      	mov	r0, r3
 8106168:	f002 f81e 	bl	81081a8 <RCCEx_PLL2_Config>
 810616c:	4603      	mov	r3, r0
 810616e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106172:	e004      	b.n	810617e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106174:	2301      	movs	r3, #1
 8106176:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810617a:	e000      	b.n	810617e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 810617c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810617e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106182:	2b00      	cmp	r3, #0
 8106184:	d10a      	bne.n	810619c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106186:	4b80      	ldr	r3, [pc, #512]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810618a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 810618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106194:	4a7c      	ldr	r2, [pc, #496]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106196:	430b      	orrs	r3, r1
 8106198:	6513      	str	r3, [r2, #80]	; 0x50
 810619a:	e003      	b.n	81061a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810619c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81061a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81061a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81061ac:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 81061b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 81061b4:	2300      	movs	r3, #0
 81061b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 81061ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 81061be:	460b      	mov	r3, r1
 81061c0:	4313      	orrs	r3, r2
 81061c2:	d039      	beq.n	8106238 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81061c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81061ca:	2b03      	cmp	r3, #3
 81061cc:	d81c      	bhi.n	8106208 <HAL_RCCEx_PeriphCLKConfig+0x794>
 81061ce:	a201      	add	r2, pc, #4	; (adr r2, 81061d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81061d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061d4:	08106211 	.word	0x08106211
 81061d8:	081061e5 	.word	0x081061e5
 81061dc:	081061f3 	.word	0x081061f3
 81061e0:	08106211 	.word	0x08106211
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81061e4:	4b68      	ldr	r3, [pc, #416]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81061e8:	4a67      	ldr	r2, [pc, #412]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81061ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81061ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81061f0:	e00f      	b.n	8106212 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81061f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061f6:	3308      	adds	r3, #8
 81061f8:	2102      	movs	r1, #2
 81061fa:	4618      	mov	r0, r3
 81061fc:	f001 ffd4 	bl	81081a8 <RCCEx_PLL2_Config>
 8106200:	4603      	mov	r3, r0
 8106202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106206:	e004      	b.n	8106212 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106208:	2301      	movs	r3, #1
 810620a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810620e:	e000      	b.n	8106212 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8106210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106216:	2b00      	cmp	r3, #0
 8106218:	d10a      	bne.n	8106230 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810621a:	4b5b      	ldr	r3, [pc, #364]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810621c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810621e:	f023 0103 	bic.w	r1, r3, #3
 8106222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106228:	4a57      	ldr	r2, [pc, #348]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810622a:	430b      	orrs	r3, r1
 810622c:	64d3      	str	r3, [r2, #76]	; 0x4c
 810622e:	e003      	b.n	8106238 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106230:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106234:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106240:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8106244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8106248:	2300      	movs	r3, #0
 810624a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 810624e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8106252:	460b      	mov	r3, r1
 8106254:	4313      	orrs	r3, r2
 8106256:	f000 809f 	beq.w	8106398 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810625a:	4b4c      	ldr	r3, [pc, #304]	; (810638c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810625c:	681b      	ldr	r3, [r3, #0]
 810625e:	4a4b      	ldr	r2, [pc, #300]	; (810638c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106264:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106266:	f7fc ff13 	bl	8103090 <HAL_GetTick>
 810626a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810626e:	e00b      	b.n	8106288 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106270:	f7fc ff0e 	bl	8103090 <HAL_GetTick>
 8106274:	4602      	mov	r2, r0
 8106276:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 810627a:	1ad3      	subs	r3, r2, r3
 810627c:	2b64      	cmp	r3, #100	; 0x64
 810627e:	d903      	bls.n	8106288 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8106280:	2303      	movs	r3, #3
 8106282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106286:	e005      	b.n	8106294 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106288:	4b40      	ldr	r3, [pc, #256]	; (810638c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810628a:	681b      	ldr	r3, [r3, #0]
 810628c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106290:	2b00      	cmp	r3, #0
 8106292:	d0ed      	beq.n	8106270 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8106294:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106298:	2b00      	cmp	r3, #0
 810629a:	d179      	bne.n	8106390 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810629c:	4b3a      	ldr	r3, [pc, #232]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810629e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81062a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81062a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81062a8:	4053      	eors	r3, r2
 81062aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81062ae:	2b00      	cmp	r3, #0
 81062b0:	d015      	beq.n	81062de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81062b2:	4b35      	ldr	r3, [pc, #212]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81062b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81062ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81062be:	4b32      	ldr	r3, [pc, #200]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81062c2:	4a31      	ldr	r2, [pc, #196]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81062c8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81062ca:	4b2f      	ldr	r3, [pc, #188]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81062ce:	4a2e      	ldr	r2, [pc, #184]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81062d4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81062d6:	4a2c      	ldr	r2, [pc, #176]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81062dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81062e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81062e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81062ea:	d118      	bne.n	810631e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81062ec:	f7fc fed0 	bl	8103090 <HAL_GetTick>
 81062f0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81062f4:	e00d      	b.n	8106312 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81062f6:	f7fc fecb 	bl	8103090 <HAL_GetTick>
 81062fa:	4602      	mov	r2, r0
 81062fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8106300:	1ad2      	subs	r2, r2, r3
 8106302:	f241 3388 	movw	r3, #5000	; 0x1388
 8106306:	429a      	cmp	r2, r3
 8106308:	d903      	bls.n	8106312 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810630a:	2303      	movs	r3, #3
 810630c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8106310:	e005      	b.n	810631e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106312:	4b1d      	ldr	r3, [pc, #116]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106316:	f003 0302 	and.w	r3, r3, #2
 810631a:	2b00      	cmp	r3, #0
 810631c:	d0eb      	beq.n	81062f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810631e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106322:	2b00      	cmp	r3, #0
 8106324:	d12b      	bne.n	810637e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810632a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810632e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106336:	d110      	bne.n	810635a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8106338:	4b13      	ldr	r3, [pc, #76]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810633a:	691b      	ldr	r3, [r3, #16]
 810633c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8106340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106344:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106348:	091b      	lsrs	r3, r3, #4
 810634a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810634e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8106352:	4a0d      	ldr	r2, [pc, #52]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106354:	430b      	orrs	r3, r1
 8106356:	6113      	str	r3, [r2, #16]
 8106358:	e005      	b.n	8106366 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810635a:	4b0b      	ldr	r3, [pc, #44]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810635c:	691b      	ldr	r3, [r3, #16]
 810635e:	4a0a      	ldr	r2, [pc, #40]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106360:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8106364:	6113      	str	r3, [r2, #16]
 8106366:	4b08      	ldr	r3, [pc, #32]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106368:	6f19      	ldr	r1, [r3, #112]	; 0x70
 810636a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810636e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106376:	4a04      	ldr	r2, [pc, #16]	; (8106388 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106378:	430b      	orrs	r3, r1
 810637a:	6713      	str	r3, [r2, #112]	; 0x70
 810637c:	e00c      	b.n	8106398 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810637e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106382:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8106386:	e007      	b.n	8106398 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8106388:	58024400 	.word	0x58024400
 810638c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106390:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106394:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81063a0:	f002 0301 	and.w	r3, r2, #1
 81063a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 81063a8:	2300      	movs	r3, #0
 81063aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 81063ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 81063b2:	460b      	mov	r3, r1
 81063b4:	4313      	orrs	r3, r2
 81063b6:	f000 8089 	beq.w	81064cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81063ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81063be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81063c0:	2b28      	cmp	r3, #40	; 0x28
 81063c2:	d86b      	bhi.n	810649c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 81063c4:	a201      	add	r2, pc, #4	; (adr r2, 81063cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 81063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81063ca:	bf00      	nop
 81063cc:	081064a5 	.word	0x081064a5
 81063d0:	0810649d 	.word	0x0810649d
 81063d4:	0810649d 	.word	0x0810649d
 81063d8:	0810649d 	.word	0x0810649d
 81063dc:	0810649d 	.word	0x0810649d
 81063e0:	0810649d 	.word	0x0810649d
 81063e4:	0810649d 	.word	0x0810649d
 81063e8:	0810649d 	.word	0x0810649d
 81063ec:	08106471 	.word	0x08106471
 81063f0:	0810649d 	.word	0x0810649d
 81063f4:	0810649d 	.word	0x0810649d
 81063f8:	0810649d 	.word	0x0810649d
 81063fc:	0810649d 	.word	0x0810649d
 8106400:	0810649d 	.word	0x0810649d
 8106404:	0810649d 	.word	0x0810649d
 8106408:	0810649d 	.word	0x0810649d
 810640c:	08106487 	.word	0x08106487
 8106410:	0810649d 	.word	0x0810649d
 8106414:	0810649d 	.word	0x0810649d
 8106418:	0810649d 	.word	0x0810649d
 810641c:	0810649d 	.word	0x0810649d
 8106420:	0810649d 	.word	0x0810649d
 8106424:	0810649d 	.word	0x0810649d
 8106428:	0810649d 	.word	0x0810649d
 810642c:	081064a5 	.word	0x081064a5
 8106430:	0810649d 	.word	0x0810649d
 8106434:	0810649d 	.word	0x0810649d
 8106438:	0810649d 	.word	0x0810649d
 810643c:	0810649d 	.word	0x0810649d
 8106440:	0810649d 	.word	0x0810649d
 8106444:	0810649d 	.word	0x0810649d
 8106448:	0810649d 	.word	0x0810649d
 810644c:	081064a5 	.word	0x081064a5
 8106450:	0810649d 	.word	0x0810649d
 8106454:	0810649d 	.word	0x0810649d
 8106458:	0810649d 	.word	0x0810649d
 810645c:	0810649d 	.word	0x0810649d
 8106460:	0810649d 	.word	0x0810649d
 8106464:	0810649d 	.word	0x0810649d
 8106468:	0810649d 	.word	0x0810649d
 810646c:	081064a5 	.word	0x081064a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106474:	3308      	adds	r3, #8
 8106476:	2101      	movs	r1, #1
 8106478:	4618      	mov	r0, r3
 810647a:	f001 fe95 	bl	81081a8 <RCCEx_PLL2_Config>
 810647e:	4603      	mov	r3, r0
 8106480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106484:	e00f      	b.n	81064a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810648a:	3328      	adds	r3, #40	; 0x28
 810648c:	2101      	movs	r1, #1
 810648e:	4618      	mov	r0, r3
 8106490:	f001 ff3c 	bl	810830c <RCCEx_PLL3_Config>
 8106494:	4603      	mov	r3, r0
 8106496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810649a:	e004      	b.n	81064a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810649c:	2301      	movs	r3, #1
 810649e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81064a2:	e000      	b.n	81064a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81064a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81064a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81064aa:	2b00      	cmp	r3, #0
 81064ac:	d10a      	bne.n	81064c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81064ae:	4bbf      	ldr	r3, [pc, #764]	; (81067ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81064b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81064b2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 81064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81064ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81064bc:	4abb      	ldr	r2, [pc, #748]	; (81067ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81064be:	430b      	orrs	r3, r1
 81064c0:	6553      	str	r3, [r2, #84]	; 0x54
 81064c2:	e003      	b.n	81064cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81064c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81064c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81064cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81064d4:	f002 0302 	and.w	r3, r2, #2
 81064d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 81064dc:	2300      	movs	r3, #0
 81064de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 81064e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 81064e6:	460b      	mov	r3, r1
 81064e8:	4313      	orrs	r3, r2
 81064ea:	d041      	beq.n	8106570 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81064ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81064f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81064f2:	2b05      	cmp	r3, #5
 81064f4:	d824      	bhi.n	8106540 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81064f6:	a201      	add	r2, pc, #4	; (adr r2, 81064fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81064fc:	08106549 	.word	0x08106549
 8106500:	08106515 	.word	0x08106515
 8106504:	0810652b 	.word	0x0810652b
 8106508:	08106549 	.word	0x08106549
 810650c:	08106549 	.word	0x08106549
 8106510:	08106549 	.word	0x08106549
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106518:	3308      	adds	r3, #8
 810651a:	2101      	movs	r1, #1
 810651c:	4618      	mov	r0, r3
 810651e:	f001 fe43 	bl	81081a8 <RCCEx_PLL2_Config>
 8106522:	4603      	mov	r3, r0
 8106524:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106528:	e00f      	b.n	810654a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810652e:	3328      	adds	r3, #40	; 0x28
 8106530:	2101      	movs	r1, #1
 8106532:	4618      	mov	r0, r3
 8106534:	f001 feea 	bl	810830c <RCCEx_PLL3_Config>
 8106538:	4603      	mov	r3, r0
 810653a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810653e:	e004      	b.n	810654a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106540:	2301      	movs	r3, #1
 8106542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106546:	e000      	b.n	810654a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8106548:	bf00      	nop
    }

    if (ret == HAL_OK)
 810654a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810654e:	2b00      	cmp	r3, #0
 8106550:	d10a      	bne.n	8106568 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106552:	4b96      	ldr	r3, [pc, #600]	; (81067ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106556:	f023 0107 	bic.w	r1, r3, #7
 810655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810655e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106560:	4a92      	ldr	r2, [pc, #584]	; (81067ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106562:	430b      	orrs	r3, r1
 8106564:	6553      	str	r3, [r2, #84]	; 0x54
 8106566:	e003      	b.n	8106570 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810656c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106578:	f002 0304 	and.w	r3, r2, #4
 810657c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8106580:	2300      	movs	r3, #0
 8106582:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8106586:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 810658a:	460b      	mov	r3, r1
 810658c:	4313      	orrs	r3, r2
 810658e:	d044      	beq.n	810661a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8106590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106598:	2b05      	cmp	r3, #5
 810659a:	d825      	bhi.n	81065e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 810659c:	a201      	add	r2, pc, #4	; (adr r2, 81065a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81065a2:	bf00      	nop
 81065a4:	081065f1 	.word	0x081065f1
 81065a8:	081065bd 	.word	0x081065bd
 81065ac:	081065d3 	.word	0x081065d3
 81065b0:	081065f1 	.word	0x081065f1
 81065b4:	081065f1 	.word	0x081065f1
 81065b8:	081065f1 	.word	0x081065f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81065bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065c0:	3308      	adds	r3, #8
 81065c2:	2101      	movs	r1, #1
 81065c4:	4618      	mov	r0, r3
 81065c6:	f001 fdef 	bl	81081a8 <RCCEx_PLL2_Config>
 81065ca:	4603      	mov	r3, r0
 81065cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81065d0:	e00f      	b.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065d6:	3328      	adds	r3, #40	; 0x28
 81065d8:	2101      	movs	r1, #1
 81065da:	4618      	mov	r0, r3
 81065dc:	f001 fe96 	bl	810830c <RCCEx_PLL3_Config>
 81065e0:	4603      	mov	r3, r0
 81065e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81065e6:	e004      	b.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81065e8:	2301      	movs	r3, #1
 81065ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81065ee:	e000      	b.n	81065f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81065f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81065f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81065f6:	2b00      	cmp	r3, #0
 81065f8:	d10b      	bne.n	8106612 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81065fa:	4b6c      	ldr	r3, [pc, #432]	; (81067ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81065fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81065fe:	f023 0107 	bic.w	r1, r3, #7
 8106602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810660a:	4a68      	ldr	r2, [pc, #416]	; (81067ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810660c:	430b      	orrs	r3, r1
 810660e:	6593      	str	r3, [r2, #88]	; 0x58
 8106610:	e003      	b.n	810661a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106616:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106622:	f002 0320 	and.w	r3, r2, #32
 8106626:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 810662a:	2300      	movs	r3, #0
 810662c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8106630:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8106634:	460b      	mov	r3, r1
 8106636:	4313      	orrs	r3, r2
 8106638:	d055      	beq.n	81066e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106646:	d033      	beq.n	81066b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8106648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810664c:	d82c      	bhi.n	81066a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810664e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106652:	d02f      	beq.n	81066b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8106654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106658:	d826      	bhi.n	81066a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810665a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810665e:	d02b      	beq.n	81066b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8106660:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106664:	d820      	bhi.n	81066a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810666a:	d012      	beq.n	8106692 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 810666c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106670:	d81a      	bhi.n	81066a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106672:	2b00      	cmp	r3, #0
 8106674:	d022      	beq.n	81066bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8106676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810667a:	d115      	bne.n	81066a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810667c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106680:	3308      	adds	r3, #8
 8106682:	2100      	movs	r1, #0
 8106684:	4618      	mov	r0, r3
 8106686:	f001 fd8f 	bl	81081a8 <RCCEx_PLL2_Config>
 810668a:	4603      	mov	r3, r0
 810668c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106690:	e015      	b.n	81066be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106696:	3328      	adds	r3, #40	; 0x28
 8106698:	2102      	movs	r1, #2
 810669a:	4618      	mov	r0, r3
 810669c:	f001 fe36 	bl	810830c <RCCEx_PLL3_Config>
 81066a0:	4603      	mov	r3, r0
 81066a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81066a6:	e00a      	b.n	81066be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81066a8:	2301      	movs	r3, #1
 81066aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81066ae:	e006      	b.n	81066be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81066b0:	bf00      	nop
 81066b2:	e004      	b.n	81066be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81066b4:	bf00      	nop
 81066b6:	e002      	b.n	81066be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81066b8:	bf00      	nop
 81066ba:	e000      	b.n	81066be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81066bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81066be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81066c2:	2b00      	cmp	r3, #0
 81066c4:	d10b      	bne.n	81066de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81066c6:	4b39      	ldr	r3, [pc, #228]	; (81067ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066ca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 81066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81066d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81066d6:	4a35      	ldr	r2, [pc, #212]	; (81067ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81066d8:	430b      	orrs	r3, r1
 81066da:	6553      	str	r3, [r2, #84]	; 0x54
 81066dc:	e003      	b.n	81066e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81066e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066ee:	f002 0340 	and.w	r3, r2, #64	; 0x40
 81066f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 81066f6:	2300      	movs	r3, #0
 81066f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 81066fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8106700:	460b      	mov	r3, r1
 8106702:	4313      	orrs	r3, r2
 8106704:	d058      	beq.n	81067b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8106706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810670a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810670e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106712:	d033      	beq.n	810677c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8106714:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106718:	d82c      	bhi.n	8106774 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810671a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810671e:	d02f      	beq.n	8106780 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8106720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106724:	d826      	bhi.n	8106774 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106726:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810672a:	d02b      	beq.n	8106784 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810672c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8106730:	d820      	bhi.n	8106774 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106736:	d012      	beq.n	810675e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8106738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810673c:	d81a      	bhi.n	8106774 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810673e:	2b00      	cmp	r3, #0
 8106740:	d022      	beq.n	8106788 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8106742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8106746:	d115      	bne.n	8106774 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810674c:	3308      	adds	r3, #8
 810674e:	2100      	movs	r1, #0
 8106750:	4618      	mov	r0, r3
 8106752:	f001 fd29 	bl	81081a8 <RCCEx_PLL2_Config>
 8106756:	4603      	mov	r3, r0
 8106758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810675c:	e015      	b.n	810678a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810675e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106762:	3328      	adds	r3, #40	; 0x28
 8106764:	2102      	movs	r1, #2
 8106766:	4618      	mov	r0, r3
 8106768:	f001 fdd0 	bl	810830c <RCCEx_PLL3_Config>
 810676c:	4603      	mov	r3, r0
 810676e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106772:	e00a      	b.n	810678a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106774:	2301      	movs	r3, #1
 8106776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810677a:	e006      	b.n	810678a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810677c:	bf00      	nop
 810677e:	e004      	b.n	810678a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106780:	bf00      	nop
 8106782:	e002      	b.n	810678a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106784:	bf00      	nop
 8106786:	e000      	b.n	810678a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106788:	bf00      	nop
    }

    if (ret == HAL_OK)
 810678a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810678e:	2b00      	cmp	r3, #0
 8106790:	d10e      	bne.n	81067b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106792:	4b06      	ldr	r3, [pc, #24]	; (81067ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106796:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 810679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810679e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81067a2:	4a02      	ldr	r2, [pc, #8]	; (81067ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81067a4:	430b      	orrs	r3, r1
 81067a6:	6593      	str	r3, [r2, #88]	; 0x58
 81067a8:	e006      	b.n	81067b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81067aa:	bf00      	nop
 81067ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81067b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81067b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067c0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 81067c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 81067c8:	2300      	movs	r3, #0
 81067ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 81067ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 81067d2:	460b      	mov	r3, r1
 81067d4:	4313      	orrs	r3, r2
 81067d6:	d055      	beq.n	8106884 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81067d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81067e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81067e4:	d033      	beq.n	810684e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81067e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81067ea:	d82c      	bhi.n	8106846 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81067ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81067f0:	d02f      	beq.n	8106852 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81067f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81067f6:	d826      	bhi.n	8106846 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81067f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81067fc:	d02b      	beq.n	8106856 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81067fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106802:	d820      	bhi.n	8106846 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106808:	d012      	beq.n	8106830 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810680a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810680e:	d81a      	bhi.n	8106846 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106810:	2b00      	cmp	r3, #0
 8106812:	d022      	beq.n	810685a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8106814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106818:	d115      	bne.n	8106846 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810681a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810681e:	3308      	adds	r3, #8
 8106820:	2100      	movs	r1, #0
 8106822:	4618      	mov	r0, r3
 8106824:	f001 fcc0 	bl	81081a8 <RCCEx_PLL2_Config>
 8106828:	4603      	mov	r3, r0
 810682a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810682e:	e015      	b.n	810685c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106834:	3328      	adds	r3, #40	; 0x28
 8106836:	2102      	movs	r1, #2
 8106838:	4618      	mov	r0, r3
 810683a:	f001 fd67 	bl	810830c <RCCEx_PLL3_Config>
 810683e:	4603      	mov	r3, r0
 8106840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106844:	e00a      	b.n	810685c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106846:	2301      	movs	r3, #1
 8106848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810684c:	e006      	b.n	810685c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810684e:	bf00      	nop
 8106850:	e004      	b.n	810685c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106852:	bf00      	nop
 8106854:	e002      	b.n	810685c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106856:	bf00      	nop
 8106858:	e000      	b.n	810685c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810685a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810685c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106860:	2b00      	cmp	r3, #0
 8106862:	d10b      	bne.n	810687c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8106864:	4ba1      	ldr	r3, [pc, #644]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106868:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 810686c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106870:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8106874:	4a9d      	ldr	r2, [pc, #628]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106876:	430b      	orrs	r3, r1
 8106878:	6593      	str	r3, [r2, #88]	; 0x58
 810687a:	e003      	b.n	8106884 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810687c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106880:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8106884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106888:	e9d3 2300 	ldrd	r2, r3, [r3]
 810688c:	f002 0308 	and.w	r3, r2, #8
 8106890:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8106894:	2300      	movs	r3, #0
 8106896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 810689a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 810689e:	460b      	mov	r3, r1
 81068a0:	4313      	orrs	r3, r2
 81068a2:	d01e      	beq.n	81068e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81068a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81068ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81068b0:	d10c      	bne.n	81068cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81068b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068b6:	3328      	adds	r3, #40	; 0x28
 81068b8:	2102      	movs	r1, #2
 81068ba:	4618      	mov	r0, r3
 81068bc:	f001 fd26 	bl	810830c <RCCEx_PLL3_Config>
 81068c0:	4603      	mov	r3, r0
 81068c2:	2b00      	cmp	r3, #0
 81068c4:	d002      	beq.n	81068cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81068c6:	2301      	movs	r3, #1
 81068c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81068cc:	4b87      	ldr	r3, [pc, #540]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81068ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81068d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81068d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81068dc:	4a83      	ldr	r2, [pc, #524]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81068de:	430b      	orrs	r3, r1
 81068e0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81068e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81068ea:	f002 0310 	and.w	r3, r2, #16
 81068ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 81068f2:	2300      	movs	r3, #0
 81068f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 81068f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 81068fc:	460b      	mov	r3, r1
 81068fe:	4313      	orrs	r3, r2
 8106900:	d01e      	beq.n	8106940 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8106902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810690a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810690e:	d10c      	bne.n	810692a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106914:	3328      	adds	r3, #40	; 0x28
 8106916:	2102      	movs	r1, #2
 8106918:	4618      	mov	r0, r3
 810691a:	f001 fcf7 	bl	810830c <RCCEx_PLL3_Config>
 810691e:	4603      	mov	r3, r0
 8106920:	2b00      	cmp	r3, #0
 8106922:	d002      	beq.n	810692a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8106924:	2301      	movs	r3, #1
 8106926:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810692a:	4b70      	ldr	r3, [pc, #448]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810692c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810692e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8106932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810693a:	4a6c      	ldr	r2, [pc, #432]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810693c:	430b      	orrs	r3, r1
 810693e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106948:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 810694c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8106950:	2300      	movs	r3, #0
 8106952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8106956:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 810695a:	460b      	mov	r3, r1
 810695c:	4313      	orrs	r3, r2
 810695e:	d03e      	beq.n	81069de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8106960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106964:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8106968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810696c:	d022      	beq.n	81069b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810696e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106972:	d81b      	bhi.n	81069ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8106974:	2b00      	cmp	r3, #0
 8106976:	d003      	beq.n	8106980 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8106978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810697c:	d00b      	beq.n	8106996 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810697e:	e015      	b.n	81069ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106984:	3308      	adds	r3, #8
 8106986:	2100      	movs	r1, #0
 8106988:	4618      	mov	r0, r3
 810698a:	f001 fc0d 	bl	81081a8 <RCCEx_PLL2_Config>
 810698e:	4603      	mov	r3, r0
 8106990:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8106994:	e00f      	b.n	81069b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810699a:	3328      	adds	r3, #40	; 0x28
 810699c:	2102      	movs	r1, #2
 810699e:	4618      	mov	r0, r3
 81069a0:	f001 fcb4 	bl	810830c <RCCEx_PLL3_Config>
 81069a4:	4603      	mov	r3, r0
 81069a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81069aa:	e004      	b.n	81069b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81069ac:	2301      	movs	r3, #1
 81069ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81069b2:	e000      	b.n	81069b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81069b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81069b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81069ba:	2b00      	cmp	r3, #0
 81069bc:	d10b      	bne.n	81069d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81069be:	4b4b      	ldr	r3, [pc, #300]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81069c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81069c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 81069c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81069ce:	4a47      	ldr	r2, [pc, #284]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81069d0:	430b      	orrs	r3, r1
 81069d2:	6593      	str	r3, [r2, #88]	; 0x58
 81069d4:	e003      	b.n	81069de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81069d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81069da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81069e6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 81069ea:	67bb      	str	r3, [r7, #120]	; 0x78
 81069ec:	2300      	movs	r3, #0
 81069ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 81069f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 81069f4:	460b      	mov	r3, r1
 81069f6:	4313      	orrs	r3, r2
 81069f8:	d03b      	beq.n	8106a72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106a02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106a06:	d01f      	beq.n	8106a48 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8106a08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106a0c:	d818      	bhi.n	8106a40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8106a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106a12:	d003      	beq.n	8106a1c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8106a14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106a18:	d007      	beq.n	8106a2a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8106a1a:	e011      	b.n	8106a40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106a1c:	4b33      	ldr	r3, [pc, #204]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a20:	4a32      	ldr	r2, [pc, #200]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106a26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8106a28:	e00f      	b.n	8106a4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a2e:	3328      	adds	r3, #40	; 0x28
 8106a30:	2101      	movs	r1, #1
 8106a32:	4618      	mov	r0, r3
 8106a34:	f001 fc6a 	bl	810830c <RCCEx_PLL3_Config>
 8106a38:	4603      	mov	r3, r0
 8106a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8106a3e:	e004      	b.n	8106a4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106a40:	2301      	movs	r3, #1
 8106a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106a46:	e000      	b.n	8106a4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8106a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106a4e:	2b00      	cmp	r3, #0
 8106a50:	d10b      	bne.n	8106a6a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106a52:	4b26      	ldr	r3, [pc, #152]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106a56:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8106a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106a62:	4a22      	ldr	r2, [pc, #136]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a64:	430b      	orrs	r3, r1
 8106a66:	6553      	str	r3, [r2, #84]	; 0x54
 8106a68:	e003      	b.n	8106a72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106a6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8106a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a7a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8106a7e:	673b      	str	r3, [r7, #112]	; 0x70
 8106a80:	2300      	movs	r3, #0
 8106a82:	677b      	str	r3, [r7, #116]	; 0x74
 8106a84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8106a88:	460b      	mov	r3, r1
 8106a8a:	4313      	orrs	r3, r2
 8106a8c:	d034      	beq.n	8106af8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8106a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106a94:	2b00      	cmp	r3, #0
 8106a96:	d003      	beq.n	8106aa0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8106a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106a9c:	d007      	beq.n	8106aae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8106a9e:	e011      	b.n	8106ac4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106aa0:	4b12      	ldr	r3, [pc, #72]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106aa4:	4a11      	ldr	r2, [pc, #68]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106aac:	e00e      	b.n	8106acc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ab2:	3308      	adds	r3, #8
 8106ab4:	2102      	movs	r1, #2
 8106ab6:	4618      	mov	r0, r3
 8106ab8:	f001 fb76 	bl	81081a8 <RCCEx_PLL2_Config>
 8106abc:	4603      	mov	r3, r0
 8106abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106ac2:	e003      	b.n	8106acc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8106ac4:	2301      	movs	r3, #1
 8106ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106acc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106ad0:	2b00      	cmp	r3, #0
 8106ad2:	d10d      	bne.n	8106af0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106ad4:	4b05      	ldr	r3, [pc, #20]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106ad8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8106adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106ae2:	4a02      	ldr	r2, [pc, #8]	; (8106aec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106ae4:	430b      	orrs	r3, r1
 8106ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8106ae8:	e006      	b.n	8106af8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8106aea:	bf00      	nop
 8106aec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106af0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106af4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8106af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b00:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8106b04:	66bb      	str	r3, [r7, #104]	; 0x68
 8106b06:	2300      	movs	r3, #0
 8106b08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8106b0a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8106b0e:	460b      	mov	r3, r1
 8106b10:	4313      	orrs	r3, r2
 8106b12:	d00c      	beq.n	8106b2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b18:	3328      	adds	r3, #40	; 0x28
 8106b1a:	2102      	movs	r1, #2
 8106b1c:	4618      	mov	r0, r3
 8106b1e:	f001 fbf5 	bl	810830c <RCCEx_PLL3_Config>
 8106b22:	4603      	mov	r3, r0
 8106b24:	2b00      	cmp	r3, #0
 8106b26:	d002      	beq.n	8106b2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8106b28:	2301      	movs	r3, #1
 8106b2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8106b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b36:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8106b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8106b3c:	2300      	movs	r3, #0
 8106b3e:	667b      	str	r3, [r7, #100]	; 0x64
 8106b40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8106b44:	460b      	mov	r3, r1
 8106b46:	4313      	orrs	r3, r2
 8106b48:	d038      	beq.n	8106bbc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8106b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106b56:	d018      	beq.n	8106b8a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8106b58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106b5c:	d811      	bhi.n	8106b82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8106b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106b62:	d014      	beq.n	8106b8e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8106b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106b68:	d80b      	bhi.n	8106b82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8106b6a:	2b00      	cmp	r3, #0
 8106b6c:	d011      	beq.n	8106b92 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8106b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106b72:	d106      	bne.n	8106b82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106b74:	4bc3      	ldr	r3, [pc, #780]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b78:	4ac2      	ldr	r2, [pc, #776]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8106b80:	e008      	b.n	8106b94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106b82:	2301      	movs	r3, #1
 8106b84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106b88:	e004      	b.n	8106b94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106b8a:	bf00      	nop
 8106b8c:	e002      	b.n	8106b94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106b8e:	bf00      	nop
 8106b90:	e000      	b.n	8106b94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106b94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106b98:	2b00      	cmp	r3, #0
 8106b9a:	d10b      	bne.n	8106bb4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106b9c:	4bb9      	ldr	r3, [pc, #740]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106ba0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8106ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106bac:	4ab5      	ldr	r2, [pc, #724]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106bae:	430b      	orrs	r3, r1
 8106bb0:	6553      	str	r3, [r2, #84]	; 0x54
 8106bb2:	e003      	b.n	8106bbc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106bb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8106bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106bc4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8106bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8106bca:	2300      	movs	r3, #0
 8106bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8106bce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8106bd2:	460b      	mov	r3, r1
 8106bd4:	4313      	orrs	r3, r2
 8106bd6:	d009      	beq.n	8106bec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106bd8:	4baa      	ldr	r3, [pc, #680]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106bdc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8106be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106be6:	4aa7      	ldr	r2, [pc, #668]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106be8:	430b      	orrs	r3, r1
 8106bea:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106bf4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8106bf8:	653b      	str	r3, [r7, #80]	; 0x50
 8106bfa:	2300      	movs	r3, #0
 8106bfc:	657b      	str	r3, [r7, #84]	; 0x54
 8106bfe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8106c02:	460b      	mov	r3, r1
 8106c04:	4313      	orrs	r3, r2
 8106c06:	d00a      	beq.n	8106c1e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106c08:	4b9e      	ldr	r3, [pc, #632]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c0a:	691b      	ldr	r3, [r3, #16]
 8106c0c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8106c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8106c18:	4a9a      	ldr	r2, [pc, #616]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c1a:	430b      	orrs	r3, r1
 8106c1c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8106c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c26:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8106c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8106c2c:	2300      	movs	r3, #0
 8106c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8106c30:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8106c34:	460b      	mov	r3, r1
 8106c36:	4313      	orrs	r3, r2
 8106c38:	d009      	beq.n	8106c4e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8106c3a:	4b92      	ldr	r3, [pc, #584]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106c3e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8106c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106c48:	4a8e      	ldr	r2, [pc, #568]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c4a:	430b      	orrs	r3, r1
 8106c4c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8106c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c56:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8106c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8106c5c:	2300      	movs	r3, #0
 8106c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8106c60:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8106c64:	460b      	mov	r3, r1
 8106c66:	4313      	orrs	r3, r2
 8106c68:	d00e      	beq.n	8106c88 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8106c6a:	4b86      	ldr	r3, [pc, #536]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c6c:	691b      	ldr	r3, [r3, #16]
 8106c6e:	4a85      	ldr	r2, [pc, #532]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8106c74:	6113      	str	r3, [r2, #16]
 8106c76:	4b83      	ldr	r3, [pc, #524]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c78:	6919      	ldr	r1, [r3, #16]
 8106c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8106c82:	4a80      	ldr	r2, [pc, #512]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c84:	430b      	orrs	r3, r1
 8106c86:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8106c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c90:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8106c94:	63bb      	str	r3, [r7, #56]	; 0x38
 8106c96:	2300      	movs	r3, #0
 8106c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106c9a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8106c9e:	460b      	mov	r3, r1
 8106ca0:	4313      	orrs	r3, r2
 8106ca2:	d009      	beq.n	8106cb8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8106ca4:	4b77      	ldr	r3, [pc, #476]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106ca8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8106cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106cb2:	4a74      	ldr	r2, [pc, #464]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106cb4:	430b      	orrs	r3, r1
 8106cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8106cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106cc0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8106cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8106cc6:	2300      	movs	r3, #0
 8106cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8106cca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8106cce:	460b      	mov	r3, r1
 8106cd0:	4313      	orrs	r3, r2
 8106cd2:	d00a      	beq.n	8106cea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106cd4:	4b6b      	ldr	r3, [pc, #428]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106cd8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8106cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106ce4:	4a67      	ldr	r2, [pc, #412]	; (8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106ce6:	430b      	orrs	r3, r1
 8106ce8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8106cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106cf2:	2100      	movs	r1, #0
 8106cf4:	62b9      	str	r1, [r7, #40]	; 0x28
 8106cf6:	f003 0301 	and.w	r3, r3, #1
 8106cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8106cfc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8106d00:	460b      	mov	r3, r1
 8106d02:	4313      	orrs	r3, r2
 8106d04:	d011      	beq.n	8106d2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d0a:	3308      	adds	r3, #8
 8106d0c:	2100      	movs	r1, #0
 8106d0e:	4618      	mov	r0, r3
 8106d10:	f001 fa4a 	bl	81081a8 <RCCEx_PLL2_Config>
 8106d14:	4603      	mov	r3, r0
 8106d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d1e:	2b00      	cmp	r3, #0
 8106d20:	d003      	beq.n	8106d2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8106d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d32:	2100      	movs	r1, #0
 8106d34:	6239      	str	r1, [r7, #32]
 8106d36:	f003 0302 	and.w	r3, r3, #2
 8106d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8106d3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8106d40:	460b      	mov	r3, r1
 8106d42:	4313      	orrs	r3, r2
 8106d44:	d011      	beq.n	8106d6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d4a:	3308      	adds	r3, #8
 8106d4c:	2101      	movs	r1, #1
 8106d4e:	4618      	mov	r0, r3
 8106d50:	f001 fa2a 	bl	81081a8 <RCCEx_PLL2_Config>
 8106d54:	4603      	mov	r3, r0
 8106d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d5e:	2b00      	cmp	r3, #0
 8106d60:	d003      	beq.n	8106d6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8106d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d72:	2100      	movs	r1, #0
 8106d74:	61b9      	str	r1, [r7, #24]
 8106d76:	f003 0304 	and.w	r3, r3, #4
 8106d7a:	61fb      	str	r3, [r7, #28]
 8106d7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8106d80:	460b      	mov	r3, r1
 8106d82:	4313      	orrs	r3, r2
 8106d84:	d011      	beq.n	8106daa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d8a:	3308      	adds	r3, #8
 8106d8c:	2102      	movs	r1, #2
 8106d8e:	4618      	mov	r0, r3
 8106d90:	f001 fa0a 	bl	81081a8 <RCCEx_PLL2_Config>
 8106d94:	4603      	mov	r3, r0
 8106d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d9e:	2b00      	cmp	r3, #0
 8106da0:	d003      	beq.n	8106daa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106da6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8106daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106db2:	2100      	movs	r1, #0
 8106db4:	6139      	str	r1, [r7, #16]
 8106db6:	f003 0308 	and.w	r3, r3, #8
 8106dba:	617b      	str	r3, [r7, #20]
 8106dbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8106dc0:	460b      	mov	r3, r1
 8106dc2:	4313      	orrs	r3, r2
 8106dc4:	d011      	beq.n	8106dea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106dca:	3328      	adds	r3, #40	; 0x28
 8106dcc:	2100      	movs	r1, #0
 8106dce:	4618      	mov	r0, r3
 8106dd0:	f001 fa9c 	bl	810830c <RCCEx_PLL3_Config>
 8106dd4:	4603      	mov	r3, r0
 8106dd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8106dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106dde:	2b00      	cmp	r3, #0
 8106de0:	d003      	beq.n	8106dea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106de6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8106dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106df2:	2100      	movs	r1, #0
 8106df4:	60b9      	str	r1, [r7, #8]
 8106df6:	f003 0310 	and.w	r3, r3, #16
 8106dfa:	60fb      	str	r3, [r7, #12]
 8106dfc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8106e00:	460b      	mov	r3, r1
 8106e02:	4313      	orrs	r3, r2
 8106e04:	d011      	beq.n	8106e2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e0a:	3328      	adds	r3, #40	; 0x28
 8106e0c:	2101      	movs	r1, #1
 8106e0e:	4618      	mov	r0, r3
 8106e10:	f001 fa7c 	bl	810830c <RCCEx_PLL3_Config>
 8106e14:	4603      	mov	r3, r0
 8106e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e1e:	2b00      	cmp	r3, #0
 8106e20:	d003      	beq.n	8106e2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8106e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e32:	2100      	movs	r1, #0
 8106e34:	6039      	str	r1, [r7, #0]
 8106e36:	f003 0320 	and.w	r3, r3, #32
 8106e3a:	607b      	str	r3, [r7, #4]
 8106e3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8106e40:	460b      	mov	r3, r1
 8106e42:	4313      	orrs	r3, r2
 8106e44:	d011      	beq.n	8106e6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e4a:	3328      	adds	r3, #40	; 0x28
 8106e4c:	2102      	movs	r1, #2
 8106e4e:	4618      	mov	r0, r3
 8106e50:	f001 fa5c 	bl	810830c <RCCEx_PLL3_Config>
 8106e54:	4603      	mov	r3, r0
 8106e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e5e:	2b00      	cmp	r3, #0
 8106e60:	d003      	beq.n	8106e6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8106e6a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8106e6e:	2b00      	cmp	r3, #0
 8106e70:	d101      	bne.n	8106e76 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8106e72:	2300      	movs	r3, #0
 8106e74:	e000      	b.n	8106e78 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8106e76:	2301      	movs	r3, #1
}
 8106e78:	4618      	mov	r0, r3
 8106e7a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8106e7e:	46bd      	mov	sp, r7
 8106e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8106e84:	58024400 	.word	0x58024400

08106e88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8106e88:	b580      	push	{r7, lr}
 8106e8a:	b090      	sub	sp, #64	; 0x40
 8106e8c:	af00      	add	r7, sp, #0
 8106e8e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8106e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106e96:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8106e9a:	430b      	orrs	r3, r1
 8106e9c:	f040 8094 	bne.w	8106fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8106ea0:	4b9e      	ldr	r3, [pc, #632]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106ea4:	f003 0307 	and.w	r3, r3, #7
 8106ea8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8106eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106eac:	2b04      	cmp	r3, #4
 8106eae:	f200 8087 	bhi.w	8106fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8106eb2:	a201      	add	r2, pc, #4	; (adr r2, 8106eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8106eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106eb8:	08106ecd 	.word	0x08106ecd
 8106ebc:	08106ef5 	.word	0x08106ef5
 8106ec0:	08106f1d 	.word	0x08106f1d
 8106ec4:	08106fb9 	.word	0x08106fb9
 8106ec8:	08106f45 	.word	0x08106f45
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106ecc:	4b93      	ldr	r3, [pc, #588]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106ece:	681b      	ldr	r3, [r3, #0]
 8106ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106ed4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106ed8:	d108      	bne.n	8106eec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106ede:	4618      	mov	r0, r3
 8106ee0:	f001 f810 	bl	8107f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106ee8:	f000 bd45 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106eec:	2300      	movs	r3, #0
 8106eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106ef0:	f000 bd41 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106ef4:	4b89      	ldr	r3, [pc, #548]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106ef6:	681b      	ldr	r3, [r3, #0]
 8106ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106f00:	d108      	bne.n	8106f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106f02:	f107 0318 	add.w	r3, r7, #24
 8106f06:	4618      	mov	r0, r3
 8106f08:	f000 fd54 	bl	81079b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106f0c:	69bb      	ldr	r3, [r7, #24]
 8106f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f10:	f000 bd31 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f14:	2300      	movs	r3, #0
 8106f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106f18:	f000 bd2d 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106f1c:	4b7f      	ldr	r3, [pc, #508]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f1e:	681b      	ldr	r3, [r3, #0]
 8106f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106f28:	d108      	bne.n	8106f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106f2a:	f107 030c 	add.w	r3, r7, #12
 8106f2e:	4618      	mov	r0, r3
 8106f30:	f000 fe94 	bl	8107c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106f34:	68fb      	ldr	r3, [r7, #12]
 8106f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f38:	f000 bd1d 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f3c:	2300      	movs	r3, #0
 8106f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106f40:	f000 bd19 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106f44:	4b75      	ldr	r3, [pc, #468]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106f48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106f4c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106f4e:	4b73      	ldr	r3, [pc, #460]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f50:	681b      	ldr	r3, [r3, #0]
 8106f52:	f003 0304 	and.w	r3, r3, #4
 8106f56:	2b04      	cmp	r3, #4
 8106f58:	d10c      	bne.n	8106f74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8106f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106f5c:	2b00      	cmp	r3, #0
 8106f5e:	d109      	bne.n	8106f74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106f60:	4b6e      	ldr	r3, [pc, #440]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f62:	681b      	ldr	r3, [r3, #0]
 8106f64:	08db      	lsrs	r3, r3, #3
 8106f66:	f003 0303 	and.w	r3, r3, #3
 8106f6a:	4a6d      	ldr	r2, [pc, #436]	; (8107120 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8106f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8106f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106f72:	e01f      	b.n	8106fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106f74:	4b69      	ldr	r3, [pc, #420]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f76:	681b      	ldr	r3, [r3, #0]
 8106f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106f80:	d106      	bne.n	8106f90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8106f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106f84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106f88:	d102      	bne.n	8106f90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106f8a:	4b66      	ldr	r3, [pc, #408]	; (8107124 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8106f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106f8e:	e011      	b.n	8106fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106f90:	4b62      	ldr	r3, [pc, #392]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f92:	681b      	ldr	r3, [r3, #0]
 8106f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106f9c:	d106      	bne.n	8106fac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8106f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106fa4:	d102      	bne.n	8106fac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106fa6:	4b60      	ldr	r3, [pc, #384]	; (8107128 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8106fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106faa:	e003      	b.n	8106fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106fac:	2300      	movs	r3, #0
 8106fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8106fb0:	f000 bce1 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106fb4:	f000 bcdf 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106fb8:	4b5c      	ldr	r3, [pc, #368]	; (810712c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8106fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106fbc:	f000 bcdb 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106fc0:	2300      	movs	r3, #0
 8106fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106fc4:	f000 bcd7 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8106fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106fcc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8106fd0:	430b      	orrs	r3, r1
 8106fd2:	f040 80ad 	bne.w	8107130 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8106fd6:	4b51      	ldr	r3, [pc, #324]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106fda:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8106fde:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8106fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106fe6:	d056      	beq.n	8107096 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8106fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106fee:	f200 8090 	bhi.w	8107112 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ff4:	2bc0      	cmp	r3, #192	; 0xc0
 8106ff6:	f000 8088 	beq.w	810710a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8106ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ffc:	2bc0      	cmp	r3, #192	; 0xc0
 8106ffe:	f200 8088 	bhi.w	8107112 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107004:	2b80      	cmp	r3, #128	; 0x80
 8107006:	d032      	beq.n	810706e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8107008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810700a:	2b80      	cmp	r3, #128	; 0x80
 810700c:	f200 8081 	bhi.w	8107112 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107012:	2b00      	cmp	r3, #0
 8107014:	d003      	beq.n	810701e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8107016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107018:	2b40      	cmp	r3, #64	; 0x40
 810701a:	d014      	beq.n	8107046 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 810701c:	e079      	b.n	8107112 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810701e:	4b3f      	ldr	r3, [pc, #252]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107020:	681b      	ldr	r3, [r3, #0]
 8107022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107026:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810702a:	d108      	bne.n	810703e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810702c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107030:	4618      	mov	r0, r3
 8107032:	f000 ff67 	bl	8107f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107038:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810703a:	f000 bc9c 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810703e:	2300      	movs	r3, #0
 8107040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107042:	f000 bc98 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107046:	4b35      	ldr	r3, [pc, #212]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107048:	681b      	ldr	r3, [r3, #0]
 810704a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810704e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107052:	d108      	bne.n	8107066 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107054:	f107 0318 	add.w	r3, r7, #24
 8107058:	4618      	mov	r0, r3
 810705a:	f000 fcab 	bl	81079b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810705e:	69bb      	ldr	r3, [r7, #24]
 8107060:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107062:	f000 bc88 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107066:	2300      	movs	r3, #0
 8107068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810706a:	f000 bc84 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810706e:	4b2b      	ldr	r3, [pc, #172]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107070:	681b      	ldr	r3, [r3, #0]
 8107072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810707a:	d108      	bne.n	810708e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810707c:	f107 030c 	add.w	r3, r7, #12
 8107080:	4618      	mov	r0, r3
 8107082:	f000 fdeb 	bl	8107c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107086:	68fb      	ldr	r3, [r7, #12]
 8107088:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810708a:	f000 bc74 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810708e:	2300      	movs	r3, #0
 8107090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107092:	f000 bc70 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107096:	4b21      	ldr	r3, [pc, #132]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810709a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810709e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81070a0:	4b1e      	ldr	r3, [pc, #120]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81070a2:	681b      	ldr	r3, [r3, #0]
 81070a4:	f003 0304 	and.w	r3, r3, #4
 81070a8:	2b04      	cmp	r3, #4
 81070aa:	d10c      	bne.n	81070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 81070ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81070ae:	2b00      	cmp	r3, #0
 81070b0:	d109      	bne.n	81070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81070b2:	4b1a      	ldr	r3, [pc, #104]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81070b4:	681b      	ldr	r3, [r3, #0]
 81070b6:	08db      	lsrs	r3, r3, #3
 81070b8:	f003 0303 	and.w	r3, r3, #3
 81070bc:	4a18      	ldr	r2, [pc, #96]	; (8107120 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81070be:	fa22 f303 	lsr.w	r3, r2, r3
 81070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81070c4:	e01f      	b.n	8107106 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81070c6:	4b15      	ldr	r3, [pc, #84]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81070c8:	681b      	ldr	r3, [r3, #0]
 81070ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81070ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81070d2:	d106      	bne.n	81070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 81070d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81070d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81070da:	d102      	bne.n	81070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81070dc:	4b11      	ldr	r3, [pc, #68]	; (8107124 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81070de:	63fb      	str	r3, [r7, #60]	; 0x3c
 81070e0:	e011      	b.n	8107106 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81070e2:	4b0e      	ldr	r3, [pc, #56]	; (810711c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81070e4:	681b      	ldr	r3, [r3, #0]
 81070e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81070ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81070ee:	d106      	bne.n	81070fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81070f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81070f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81070f6:	d102      	bne.n	81070fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81070f8:	4b0b      	ldr	r3, [pc, #44]	; (8107128 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81070fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 81070fc:	e003      	b.n	8107106 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81070fe:	2300      	movs	r3, #0
 8107100:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8107102:	f000 bc38 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107106:	f000 bc36 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810710a:	4b08      	ldr	r3, [pc, #32]	; (810712c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810710c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810710e:	f000 bc32 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107112:	2300      	movs	r3, #0
 8107114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107116:	f000 bc2e 	b.w	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810711a:	bf00      	nop
 810711c:	58024400 	.word	0x58024400
 8107120:	03d09000 	.word	0x03d09000
 8107124:	003d0900 	.word	0x003d0900
 8107128:	007a1200 	.word	0x007a1200
 810712c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107134:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8107138:	430b      	orrs	r3, r1
 810713a:	f040 809c 	bne.w	8107276 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810713e:	4b9e      	ldr	r3, [pc, #632]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107142:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8107146:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8107148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810714a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810714e:	d054      	beq.n	81071fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8107150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107152:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8107156:	f200 808b 	bhi.w	8107270 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810715c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8107160:	f000 8083 	beq.w	810726a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8107164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107166:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810716a:	f200 8081 	bhi.w	8107270 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107174:	d02f      	beq.n	81071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8107176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810717c:	d878      	bhi.n	8107270 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107180:	2b00      	cmp	r3, #0
 8107182:	d004      	beq.n	810718e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8107184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810718a:	d012      	beq.n	81071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 810718c:	e070      	b.n	8107270 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810718e:	4b8a      	ldr	r3, [pc, #552]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107190:	681b      	ldr	r3, [r3, #0]
 8107192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107196:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810719a:	d107      	bne.n	81071ac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810719c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81071a0:	4618      	mov	r0, r3
 81071a2:	f000 feaf 	bl	8107f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81071a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071aa:	e3e4      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071ac:	2300      	movs	r3, #0
 81071ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81071b0:	e3e1      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81071b2:	4b81      	ldr	r3, [pc, #516]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071b4:	681b      	ldr	r3, [r3, #0]
 81071b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81071ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81071be:	d107      	bne.n	81071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81071c0:	f107 0318 	add.w	r3, r7, #24
 81071c4:	4618      	mov	r0, r3
 81071c6:	f000 fbf5 	bl	81079b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81071ca:	69bb      	ldr	r3, [r7, #24]
 81071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071ce:	e3d2      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071d0:	2300      	movs	r3, #0
 81071d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81071d4:	e3cf      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81071d6:	4b78      	ldr	r3, [pc, #480]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071d8:	681b      	ldr	r3, [r3, #0]
 81071da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81071de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81071e2:	d107      	bne.n	81071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81071e4:	f107 030c 	add.w	r3, r7, #12
 81071e8:	4618      	mov	r0, r3
 81071ea:	f000 fd37 	bl	8107c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81071ee:	68fb      	ldr	r3, [r7, #12]
 81071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071f2:	e3c0      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071f4:	2300      	movs	r3, #0
 81071f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81071f8:	e3bd      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81071fa:	4b6f      	ldr	r3, [pc, #444]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81071fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107202:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107204:	4b6c      	ldr	r3, [pc, #432]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107206:	681b      	ldr	r3, [r3, #0]
 8107208:	f003 0304 	and.w	r3, r3, #4
 810720c:	2b04      	cmp	r3, #4
 810720e:	d10c      	bne.n	810722a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8107210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107212:	2b00      	cmp	r3, #0
 8107214:	d109      	bne.n	810722a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107216:	4b68      	ldr	r3, [pc, #416]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107218:	681b      	ldr	r3, [r3, #0]
 810721a:	08db      	lsrs	r3, r3, #3
 810721c:	f003 0303 	and.w	r3, r3, #3
 8107220:	4a66      	ldr	r2, [pc, #408]	; (81073bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107222:	fa22 f303 	lsr.w	r3, r2, r3
 8107226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107228:	e01e      	b.n	8107268 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810722a:	4b63      	ldr	r3, [pc, #396]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810722c:	681b      	ldr	r3, [r3, #0]
 810722e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107236:	d106      	bne.n	8107246 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8107238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810723a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810723e:	d102      	bne.n	8107246 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107240:	4b5f      	ldr	r3, [pc, #380]	; (81073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107244:	e010      	b.n	8107268 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107246:	4b5c      	ldr	r3, [pc, #368]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107248:	681b      	ldr	r3, [r3, #0]
 810724a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810724e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107252:	d106      	bne.n	8107262 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8107254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810725a:	d102      	bne.n	8107262 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810725c:	4b59      	ldr	r3, [pc, #356]	; (81073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810725e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107260:	e002      	b.n	8107268 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107262:	2300      	movs	r3, #0
 8107264:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8107266:	e386      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107268:	e385      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810726a:	4b57      	ldr	r3, [pc, #348]	; (81073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810726c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810726e:	e382      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107270:	2300      	movs	r3, #0
 8107272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107274:	e37f      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8107276:	e9d7 2300 	ldrd	r2, r3, [r7]
 810727a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 810727e:	430b      	orrs	r3, r1
 8107280:	f040 80a7 	bne.w	81073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8107284:	4b4c      	ldr	r3, [pc, #304]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107288:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 810728c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 810728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107294:	d055      	beq.n	8107342 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8107296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810729c:	f200 8096 	bhi.w	81073cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81072a6:	f000 8084 	beq.w	81073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 81072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81072b0:	f200 808c 	bhi.w	81073cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81072ba:	d030      	beq.n	810731e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 81072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81072c2:	f200 8083 	bhi.w	81073cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072c8:	2b00      	cmp	r3, #0
 81072ca:	d004      	beq.n	81072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 81072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81072d2:	d012      	beq.n	81072fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 81072d4:	e07a      	b.n	81073cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81072d6:	4b38      	ldr	r3, [pc, #224]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81072d8:	681b      	ldr	r3, [r3, #0]
 81072da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81072de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81072e2:	d107      	bne.n	81072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81072e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81072e8:	4618      	mov	r0, r3
 81072ea:	f000 fe0b 	bl	8107f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81072f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81072f2:	e340      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81072f4:	2300      	movs	r3, #0
 81072f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81072f8:	e33d      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81072fa:	4b2f      	ldr	r3, [pc, #188]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81072fc:	681b      	ldr	r3, [r3, #0]
 81072fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107306:	d107      	bne.n	8107318 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107308:	f107 0318 	add.w	r3, r7, #24
 810730c:	4618      	mov	r0, r3
 810730e:	f000 fb51 	bl	81079b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107312:	69bb      	ldr	r3, [r7, #24]
 8107314:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107316:	e32e      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107318:	2300      	movs	r3, #0
 810731a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810731c:	e32b      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810731e:	4b26      	ldr	r3, [pc, #152]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107320:	681b      	ldr	r3, [r3, #0]
 8107322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810732a:	d107      	bne.n	810733c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810732c:	f107 030c 	add.w	r3, r7, #12
 8107330:	4618      	mov	r0, r3
 8107332:	f000 fc93 	bl	8107c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107336:	68fb      	ldr	r3, [r7, #12]
 8107338:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810733a:	e31c      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810733c:	2300      	movs	r3, #0
 810733e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107340:	e319      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107342:	4b1d      	ldr	r3, [pc, #116]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107346:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810734a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810734c:	4b1a      	ldr	r3, [pc, #104]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810734e:	681b      	ldr	r3, [r3, #0]
 8107350:	f003 0304 	and.w	r3, r3, #4
 8107354:	2b04      	cmp	r3, #4
 8107356:	d10c      	bne.n	8107372 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8107358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810735a:	2b00      	cmp	r3, #0
 810735c:	d109      	bne.n	8107372 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810735e:	4b16      	ldr	r3, [pc, #88]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107360:	681b      	ldr	r3, [r3, #0]
 8107362:	08db      	lsrs	r3, r3, #3
 8107364:	f003 0303 	and.w	r3, r3, #3
 8107368:	4a14      	ldr	r2, [pc, #80]	; (81073bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810736a:	fa22 f303 	lsr.w	r3, r2, r3
 810736e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107370:	e01e      	b.n	81073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107372:	4b11      	ldr	r3, [pc, #68]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107374:	681b      	ldr	r3, [r3, #0]
 8107376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810737a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810737e:	d106      	bne.n	810738e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8107380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107386:	d102      	bne.n	810738e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107388:	4b0d      	ldr	r3, [pc, #52]	; (81073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810738a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810738c:	e010      	b.n	81073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810738e:	4b0a      	ldr	r3, [pc, #40]	; (81073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107390:	681b      	ldr	r3, [r3, #0]
 8107392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810739a:	d106      	bne.n	81073aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 810739c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810739e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81073a2:	d102      	bne.n	81073aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81073a4:	4b07      	ldr	r3, [pc, #28]	; (81073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81073a8:	e002      	b.n	81073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81073aa:	2300      	movs	r3, #0
 81073ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81073ae:	e2e2      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81073b0:	e2e1      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81073b2:	4b05      	ldr	r3, [pc, #20]	; (81073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81073b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81073b6:	e2de      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81073b8:	58024400 	.word	0x58024400
 81073bc:	03d09000 	.word	0x03d09000
 81073c0:	003d0900 	.word	0x003d0900
 81073c4:	007a1200 	.word	0x007a1200
 81073c8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 81073cc:	2300      	movs	r3, #0
 81073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81073d0:	e2d1      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 81073d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81073d6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 81073da:	430b      	orrs	r3, r1
 81073dc:	f040 809c 	bne.w	8107518 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 81073e0:	4b93      	ldr	r3, [pc, #588]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81073e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81073e4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 81073e8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81073ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81073ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81073f0:	d054      	beq.n	810749c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81073f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81073f8:	f200 808b 	bhi.w	8107512 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81073fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8107402:	f000 8083 	beq.w	810750c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8107406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107408:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810740c:	f200 8081 	bhi.w	8107512 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107416:	d02f      	beq.n	8107478 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8107418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810741a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810741e:	d878      	bhi.n	8107512 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107422:	2b00      	cmp	r3, #0
 8107424:	d004      	beq.n	8107430 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8107426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810742c:	d012      	beq.n	8107454 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 810742e:	e070      	b.n	8107512 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107430:	4b7f      	ldr	r3, [pc, #508]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107432:	681b      	ldr	r3, [r3, #0]
 8107434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810743c:	d107      	bne.n	810744e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810743e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107442:	4618      	mov	r0, r3
 8107444:	f000 fd5e 	bl	8107f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810744a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810744c:	e293      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810744e:	2300      	movs	r3, #0
 8107450:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107452:	e290      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107454:	4b76      	ldr	r3, [pc, #472]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107456:	681b      	ldr	r3, [r3, #0]
 8107458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810745c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107460:	d107      	bne.n	8107472 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107462:	f107 0318 	add.w	r3, r7, #24
 8107466:	4618      	mov	r0, r3
 8107468:	f000 faa4 	bl	81079b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810746c:	69bb      	ldr	r3, [r7, #24]
 810746e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107470:	e281      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107472:	2300      	movs	r3, #0
 8107474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107476:	e27e      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107478:	4b6d      	ldr	r3, [pc, #436]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810747a:	681b      	ldr	r3, [r3, #0]
 810747c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107484:	d107      	bne.n	8107496 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107486:	f107 030c 	add.w	r3, r7, #12
 810748a:	4618      	mov	r0, r3
 810748c:	f000 fbe6 	bl	8107c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107490:	68fb      	ldr	r3, [r7, #12]
 8107492:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107494:	e26f      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107496:	2300      	movs	r3, #0
 8107498:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810749a:	e26c      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810749c:	4b64      	ldr	r3, [pc, #400]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810749e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81074a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81074a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81074a6:	4b62      	ldr	r3, [pc, #392]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81074a8:	681b      	ldr	r3, [r3, #0]
 81074aa:	f003 0304 	and.w	r3, r3, #4
 81074ae:	2b04      	cmp	r3, #4
 81074b0:	d10c      	bne.n	81074cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 81074b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81074b4:	2b00      	cmp	r3, #0
 81074b6:	d109      	bne.n	81074cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81074b8:	4b5d      	ldr	r3, [pc, #372]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81074ba:	681b      	ldr	r3, [r3, #0]
 81074bc:	08db      	lsrs	r3, r3, #3
 81074be:	f003 0303 	and.w	r3, r3, #3
 81074c2:	4a5c      	ldr	r2, [pc, #368]	; (8107634 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81074c4:	fa22 f303 	lsr.w	r3, r2, r3
 81074c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81074ca:	e01e      	b.n	810750a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81074cc:	4b58      	ldr	r3, [pc, #352]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81074ce:	681b      	ldr	r3, [r3, #0]
 81074d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81074d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81074d8:	d106      	bne.n	81074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 81074da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81074dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81074e0:	d102      	bne.n	81074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81074e2:	4b55      	ldr	r3, [pc, #340]	; (8107638 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81074e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 81074e6:	e010      	b.n	810750a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81074e8:	4b51      	ldr	r3, [pc, #324]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81074ea:	681b      	ldr	r3, [r3, #0]
 81074ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81074f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81074f4:	d106      	bne.n	8107504 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81074f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81074f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81074fc:	d102      	bne.n	8107504 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81074fe:	4b4f      	ldr	r3, [pc, #316]	; (810763c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107502:	e002      	b.n	810750a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107504:	2300      	movs	r3, #0
 8107506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8107508:	e235      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810750a:	e234      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810750c:	4b4c      	ldr	r3, [pc, #304]	; (8107640 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 810750e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107510:	e231      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107512:	2300      	movs	r3, #0
 8107514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107516:	e22e      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8107518:	e9d7 2300 	ldrd	r2, r3, [r7]
 810751c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8107520:	430b      	orrs	r3, r1
 8107522:	f040 808f 	bne.w	8107644 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8107526:	4b42      	ldr	r3, [pc, #264]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810752a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 810752e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8107530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107532:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8107536:	d06b      	beq.n	8107610 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8107538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810753a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810753e:	d874      	bhi.n	810762a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107542:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8107546:	d056      	beq.n	81075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8107548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810754a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810754e:	d86c      	bhi.n	810762a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107552:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8107556:	d03b      	beq.n	81075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8107558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810755a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810755e:	d864      	bhi.n	810762a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107566:	d021      	beq.n	81075ac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8107568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810756a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810756e:	d85c      	bhi.n	810762a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107572:	2b00      	cmp	r3, #0
 8107574:	d004      	beq.n	8107580 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8107576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810757c:	d004      	beq.n	8107588 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810757e:	e054      	b.n	810762a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8107580:	f7fe fa4c 	bl	8105a1c <HAL_RCC_GetPCLK1Freq>
 8107584:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107586:	e1f6      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107588:	4b29      	ldr	r3, [pc, #164]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810758a:	681b      	ldr	r3, [r3, #0]
 810758c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107594:	d107      	bne.n	81075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107596:	f107 0318 	add.w	r3, r7, #24
 810759a:	4618      	mov	r0, r3
 810759c:	f000 fa0a 	bl	81079b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81075a0:	69fb      	ldr	r3, [r7, #28]
 81075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075a4:	e1e7      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075a6:	2300      	movs	r3, #0
 81075a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81075aa:	e1e4      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81075ac:	4b20      	ldr	r3, [pc, #128]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075ae:	681b      	ldr	r3, [r3, #0]
 81075b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81075b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81075b8:	d107      	bne.n	81075ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81075ba:	f107 030c 	add.w	r3, r7, #12
 81075be:	4618      	mov	r0, r3
 81075c0:	f000 fb4c 	bl	8107c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81075c4:	693b      	ldr	r3, [r7, #16]
 81075c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075c8:	e1d5      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075ca:	2300      	movs	r3, #0
 81075cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81075ce:	e1d2      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81075d0:	4b17      	ldr	r3, [pc, #92]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075d2:	681b      	ldr	r3, [r3, #0]
 81075d4:	f003 0304 	and.w	r3, r3, #4
 81075d8:	2b04      	cmp	r3, #4
 81075da:	d109      	bne.n	81075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81075dc:	4b14      	ldr	r3, [pc, #80]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075de:	681b      	ldr	r3, [r3, #0]
 81075e0:	08db      	lsrs	r3, r3, #3
 81075e2:	f003 0303 	and.w	r3, r3, #3
 81075e6:	4a13      	ldr	r2, [pc, #76]	; (8107634 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81075e8:	fa22 f303 	lsr.w	r3, r2, r3
 81075ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075ee:	e1c2      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075f0:	2300      	movs	r3, #0
 81075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81075f4:	e1bf      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81075f6:	4b0e      	ldr	r3, [pc, #56]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075f8:	681b      	ldr	r3, [r3, #0]
 81075fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81075fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107602:	d102      	bne.n	810760a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8107604:	4b0c      	ldr	r3, [pc, #48]	; (8107638 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8107606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107608:	e1b5      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810760a:	2300      	movs	r3, #0
 810760c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810760e:	e1b2      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107610:	4b07      	ldr	r3, [pc, #28]	; (8107630 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107612:	681b      	ldr	r3, [r3, #0]
 8107614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810761c:	d102      	bne.n	8107624 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 810761e:	4b07      	ldr	r3, [pc, #28]	; (810763c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107620:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107622:	e1a8      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107624:	2300      	movs	r3, #0
 8107626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107628:	e1a5      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810762a:	2300      	movs	r3, #0
 810762c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810762e:	e1a2      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107630:	58024400 	.word	0x58024400
 8107634:	03d09000 	.word	0x03d09000
 8107638:	003d0900 	.word	0x003d0900
 810763c:	007a1200 	.word	0x007a1200
 8107640:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8107644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107648:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 810764c:	430b      	orrs	r3, r1
 810764e:	d173      	bne.n	8107738 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8107650:	4b9c      	ldr	r3, [pc, #624]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107654:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8107658:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810765c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107660:	d02f      	beq.n	81076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8107662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107668:	d863      	bhi.n	8107732 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810766c:	2b00      	cmp	r3, #0
 810766e:	d004      	beq.n	810767a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8107670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107676:	d012      	beq.n	810769e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8107678:	e05b      	b.n	8107732 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810767a:	4b92      	ldr	r3, [pc, #584]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810767c:	681b      	ldr	r3, [r3, #0]
 810767e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107686:	d107      	bne.n	8107698 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107688:	f107 0318 	add.w	r3, r7, #24
 810768c:	4618      	mov	r0, r3
 810768e:	f000 f991 	bl	81079b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107692:	69bb      	ldr	r3, [r7, #24]
 8107694:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107696:	e16e      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107698:	2300      	movs	r3, #0
 810769a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810769c:	e16b      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810769e:	4b89      	ldr	r3, [pc, #548]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076a0:	681b      	ldr	r3, [r3, #0]
 81076a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81076a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81076aa:	d107      	bne.n	81076bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81076ac:	f107 030c 	add.w	r3, r7, #12
 81076b0:	4618      	mov	r0, r3
 81076b2:	f000 fad3 	bl	8107c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81076b6:	697b      	ldr	r3, [r7, #20]
 81076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81076ba:	e15c      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81076bc:	2300      	movs	r3, #0
 81076be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81076c0:	e159      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81076c2:	4b80      	ldr	r3, [pc, #512]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81076c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81076ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81076cc:	4b7d      	ldr	r3, [pc, #500]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076ce:	681b      	ldr	r3, [r3, #0]
 81076d0:	f003 0304 	and.w	r3, r3, #4
 81076d4:	2b04      	cmp	r3, #4
 81076d6:	d10c      	bne.n	81076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 81076d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81076da:	2b00      	cmp	r3, #0
 81076dc:	d109      	bne.n	81076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81076de:	4b79      	ldr	r3, [pc, #484]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076e0:	681b      	ldr	r3, [r3, #0]
 81076e2:	08db      	lsrs	r3, r3, #3
 81076e4:	f003 0303 	and.w	r3, r3, #3
 81076e8:	4a77      	ldr	r2, [pc, #476]	; (81078c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81076ea:	fa22 f303 	lsr.w	r3, r2, r3
 81076ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 81076f0:	e01e      	b.n	8107730 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81076f2:	4b74      	ldr	r3, [pc, #464]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076f4:	681b      	ldr	r3, [r3, #0]
 81076f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81076fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81076fe:	d106      	bne.n	810770e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8107700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107706:	d102      	bne.n	810770e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107708:	4b70      	ldr	r3, [pc, #448]	; (81078cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810770a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810770c:	e010      	b.n	8107730 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810770e:	4b6d      	ldr	r3, [pc, #436]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107710:	681b      	ldr	r3, [r3, #0]
 8107712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107716:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810771a:	d106      	bne.n	810772a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 810771c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810771e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107722:	d102      	bne.n	810772a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107724:	4b6a      	ldr	r3, [pc, #424]	; (81078d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8107726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107728:	e002      	b.n	8107730 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810772a:	2300      	movs	r3, #0
 810772c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810772e:	e122      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107730:	e121      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107732:	2300      	movs	r3, #0
 8107734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107736:	e11e      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8107738:	e9d7 2300 	ldrd	r2, r3, [r7]
 810773c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8107740:	430b      	orrs	r3, r1
 8107742:	d133      	bne.n	81077ac <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8107744:	4b5f      	ldr	r3, [pc, #380]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810774c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107750:	2b00      	cmp	r3, #0
 8107752:	d004      	beq.n	810775e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8107754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810775a:	d012      	beq.n	8107782 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 810775c:	e023      	b.n	81077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810775e:	4b59      	ldr	r3, [pc, #356]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107760:	681b      	ldr	r3, [r3, #0]
 8107762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810776a:	d107      	bne.n	810777c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810776c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107770:	4618      	mov	r0, r3
 8107772:	f000 fbc7 	bl	8107f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107778:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810777a:	e0fc      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810777c:	2300      	movs	r3, #0
 810777e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107780:	e0f9      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107782:	4b50      	ldr	r3, [pc, #320]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107784:	681b      	ldr	r3, [r3, #0]
 8107786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810778a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810778e:	d107      	bne.n	81077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107790:	f107 0318 	add.w	r3, r7, #24
 8107794:	4618      	mov	r0, r3
 8107796:	f000 f90d 	bl	81079b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810779a:	6a3b      	ldr	r3, [r7, #32]
 810779c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810779e:	e0ea      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81077a0:	2300      	movs	r3, #0
 81077a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81077a4:	e0e7      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81077a6:	2300      	movs	r3, #0
 81077a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81077aa:	e0e4      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81077ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 81077b0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 81077b4:	430b      	orrs	r3, r1
 81077b6:	f040 808d 	bne.w	81078d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 81077ba:	4b42      	ldr	r3, [pc, #264]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81077bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81077be:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 81077c2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81077c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81077ca:	d06b      	beq.n	81078a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 81077cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81077d2:	d874      	bhi.n	81078be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81077d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81077da:	d056      	beq.n	810788a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 81077dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81077e2:	d86c      	bhi.n	81078be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81077e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81077ea:	d03b      	beq.n	8107864 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 81077ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81077f2:	d864      	bhi.n	81078be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81077fa:	d021      	beq.n	8107840 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 81077fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107802:	d85c      	bhi.n	81078be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107806:	2b00      	cmp	r3, #0
 8107808:	d004      	beq.n	8107814 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810780c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107810:	d004      	beq.n	810781c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8107812:	e054      	b.n	81078be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8107814:	f000 f8b8 	bl	8107988 <HAL_RCCEx_GetD3PCLK1Freq>
 8107818:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810781a:	e0ac      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810781c:	4b29      	ldr	r3, [pc, #164]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810781e:	681b      	ldr	r3, [r3, #0]
 8107820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107828:	d107      	bne.n	810783a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810782a:	f107 0318 	add.w	r3, r7, #24
 810782e:	4618      	mov	r0, r3
 8107830:	f000 f8c0 	bl	81079b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107834:	69fb      	ldr	r3, [r7, #28]
 8107836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107838:	e09d      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810783a:	2300      	movs	r3, #0
 810783c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810783e:	e09a      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107840:	4b20      	ldr	r3, [pc, #128]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107842:	681b      	ldr	r3, [r3, #0]
 8107844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810784c:	d107      	bne.n	810785e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810784e:	f107 030c 	add.w	r3, r7, #12
 8107852:	4618      	mov	r0, r3
 8107854:	f000 fa02 	bl	8107c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107858:	693b      	ldr	r3, [r7, #16]
 810785a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810785c:	e08b      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810785e:	2300      	movs	r3, #0
 8107860:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107862:	e088      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8107864:	4b17      	ldr	r3, [pc, #92]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107866:	681b      	ldr	r3, [r3, #0]
 8107868:	f003 0304 	and.w	r3, r3, #4
 810786c:	2b04      	cmp	r3, #4
 810786e:	d109      	bne.n	8107884 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107870:	4b14      	ldr	r3, [pc, #80]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107872:	681b      	ldr	r3, [r3, #0]
 8107874:	08db      	lsrs	r3, r3, #3
 8107876:	f003 0303 	and.w	r3, r3, #3
 810787a:	4a13      	ldr	r2, [pc, #76]	; (81078c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810787c:	fa22 f303 	lsr.w	r3, r2, r3
 8107880:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107882:	e078      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107884:	2300      	movs	r3, #0
 8107886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107888:	e075      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810788a:	4b0e      	ldr	r3, [pc, #56]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810788c:	681b      	ldr	r3, [r3, #0]
 810788e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107896:	d102      	bne.n	810789e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8107898:	4b0c      	ldr	r3, [pc, #48]	; (81078cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810789a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810789c:	e06b      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810789e:	2300      	movs	r3, #0
 81078a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81078a2:	e068      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81078a4:	4b07      	ldr	r3, [pc, #28]	; (81078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81078a6:	681b      	ldr	r3, [r3, #0]
 81078a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81078ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81078b0:	d102      	bne.n	81078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 81078b2:	4b07      	ldr	r3, [pc, #28]	; (81078d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81078b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81078b6:	e05e      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81078b8:	2300      	movs	r3, #0
 81078ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81078bc:	e05b      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 81078be:	2300      	movs	r3, #0
 81078c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81078c2:	e058      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81078c4:	58024400 	.word	0x58024400
 81078c8:	03d09000 	.word	0x03d09000
 81078cc:	003d0900 	.word	0x003d0900
 81078d0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81078d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81078d8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 81078dc:	430b      	orrs	r3, r1
 81078de:	d148      	bne.n	8107972 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 81078e0:	4b27      	ldr	r3, [pc, #156]	; (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81078e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81078e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81078e8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81078ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81078f0:	d02a      	beq.n	8107948 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 81078f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81078f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81078f8:	d838      	bhi.n	810796c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 81078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81078fc:	2b00      	cmp	r3, #0
 81078fe:	d004      	beq.n	810790a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8107900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107906:	d00d      	beq.n	8107924 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8107908:	e030      	b.n	810796c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810790a:	4b1d      	ldr	r3, [pc, #116]	; (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810790c:	681b      	ldr	r3, [r3, #0]
 810790e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107912:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107916:	d102      	bne.n	810791e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8107918:	4b1a      	ldr	r3, [pc, #104]	; (8107984 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810791a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810791c:	e02b      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810791e:	2300      	movs	r3, #0
 8107920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107922:	e028      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107924:	4b16      	ldr	r3, [pc, #88]	; (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107926:	681b      	ldr	r3, [r3, #0]
 8107928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810792c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107930:	d107      	bne.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107936:	4618      	mov	r0, r3
 8107938:	f000 fae4 	bl	8107f04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810793e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107940:	e019      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107942:	2300      	movs	r3, #0
 8107944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107946:	e016      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107948:	4b0d      	ldr	r3, [pc, #52]	; (8107980 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810794a:	681b      	ldr	r3, [r3, #0]
 810794c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107954:	d107      	bne.n	8107966 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107956:	f107 0318 	add.w	r3, r7, #24
 810795a:	4618      	mov	r0, r3
 810795c:	f000 f82a 	bl	81079b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107960:	69fb      	ldr	r3, [r7, #28]
 8107962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107964:	e007      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107966:	2300      	movs	r3, #0
 8107968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810796a:	e004      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810796c:	2300      	movs	r3, #0
 810796e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107970:	e001      	b.n	8107976 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8107972:	2300      	movs	r3, #0
 8107974:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8107976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8107978:	4618      	mov	r0, r3
 810797a:	3740      	adds	r7, #64	; 0x40
 810797c:	46bd      	mov	sp, r7
 810797e:	bd80      	pop	{r7, pc}
 8107980:	58024400 	.word	0x58024400
 8107984:	007a1200 	.word	0x007a1200

08107988 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8107988:	b580      	push	{r7, lr}
 810798a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810798c:	f7fe f814 	bl	81059b8 <HAL_RCC_GetHCLKFreq>
 8107990:	4602      	mov	r2, r0
 8107992:	4b06      	ldr	r3, [pc, #24]	; (81079ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8107994:	6a1b      	ldr	r3, [r3, #32]
 8107996:	091b      	lsrs	r3, r3, #4
 8107998:	f003 0307 	and.w	r3, r3, #7
 810799c:	4904      	ldr	r1, [pc, #16]	; (81079b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810799e:	5ccb      	ldrb	r3, [r1, r3]
 81079a0:	f003 031f 	and.w	r3, r3, #31
 81079a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81079a8:	4618      	mov	r0, r3
 81079aa:	bd80      	pop	{r7, pc}
 81079ac:	58024400 	.word	0x58024400
 81079b0:	0810fb2c 	.word	0x0810fb2c

081079b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81079b4:	b480      	push	{r7}
 81079b6:	b089      	sub	sp, #36	; 0x24
 81079b8:	af00      	add	r7, sp, #0
 81079ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81079bc:	4ba1      	ldr	r3, [pc, #644]	; (8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81079c0:	f003 0303 	and.w	r3, r3, #3
 81079c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81079c6:	4b9f      	ldr	r3, [pc, #636]	; (8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81079ca:	0b1b      	lsrs	r3, r3, #12
 81079cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81079d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81079d2:	4b9c      	ldr	r3, [pc, #624]	; (8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81079d6:	091b      	lsrs	r3, r3, #4
 81079d8:	f003 0301 	and.w	r3, r3, #1
 81079dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81079de:	4b99      	ldr	r3, [pc, #612]	; (8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81079e2:	08db      	lsrs	r3, r3, #3
 81079e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81079e8:	693a      	ldr	r2, [r7, #16]
 81079ea:	fb02 f303 	mul.w	r3, r2, r3
 81079ee:	ee07 3a90 	vmov	s15, r3
 81079f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81079f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81079fa:	697b      	ldr	r3, [r7, #20]
 81079fc:	2b00      	cmp	r3, #0
 81079fe:	f000 8111 	beq.w	8107c24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8107a02:	69bb      	ldr	r3, [r7, #24]
 8107a04:	2b02      	cmp	r3, #2
 8107a06:	f000 8083 	beq.w	8107b10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8107a0a:	69bb      	ldr	r3, [r7, #24]
 8107a0c:	2b02      	cmp	r3, #2
 8107a0e:	f200 80a1 	bhi.w	8107b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8107a12:	69bb      	ldr	r3, [r7, #24]
 8107a14:	2b00      	cmp	r3, #0
 8107a16:	d003      	beq.n	8107a20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8107a18:	69bb      	ldr	r3, [r7, #24]
 8107a1a:	2b01      	cmp	r3, #1
 8107a1c:	d056      	beq.n	8107acc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8107a1e:	e099      	b.n	8107b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107a20:	4b88      	ldr	r3, [pc, #544]	; (8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a22:	681b      	ldr	r3, [r3, #0]
 8107a24:	f003 0320 	and.w	r3, r3, #32
 8107a28:	2b00      	cmp	r3, #0
 8107a2a:	d02d      	beq.n	8107a88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107a2c:	4b85      	ldr	r3, [pc, #532]	; (8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a2e:	681b      	ldr	r3, [r3, #0]
 8107a30:	08db      	lsrs	r3, r3, #3
 8107a32:	f003 0303 	and.w	r3, r3, #3
 8107a36:	4a84      	ldr	r2, [pc, #528]	; (8107c48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8107a38:	fa22 f303 	lsr.w	r3, r2, r3
 8107a3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107a3e:	68bb      	ldr	r3, [r7, #8]
 8107a40:	ee07 3a90 	vmov	s15, r3
 8107a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a48:	697b      	ldr	r3, [r7, #20]
 8107a4a:	ee07 3a90 	vmov	s15, r3
 8107a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a56:	4b7b      	ldr	r3, [pc, #492]	; (8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a5e:	ee07 3a90 	vmov	s15, r3
 8107a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107a86:	e087      	b.n	8107b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107a88:	697b      	ldr	r3, [r7, #20]
 8107a8a:	ee07 3a90 	vmov	s15, r3
 8107a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107c50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8107a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a9a:	4b6a      	ldr	r3, [pc, #424]	; (8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107aa2:	ee07 3a90 	vmov	s15, r3
 8107aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8107aae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107aca:	e065      	b.n	8107b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107acc:	697b      	ldr	r3, [r7, #20]
 8107ace:	ee07 3a90 	vmov	s15, r3
 8107ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ad6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107ade:	4b59      	ldr	r3, [pc, #356]	; (8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107ae6:	ee07 3a90 	vmov	s15, r3
 8107aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8107af2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107b0e:	e043      	b.n	8107b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107b10:	697b      	ldr	r3, [r7, #20]
 8107b12:	ee07 3a90 	vmov	s15, r3
 8107b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8107b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107b22:	4b48      	ldr	r3, [pc, #288]	; (8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107b2a:	ee07 3a90 	vmov	s15, r3
 8107b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8107b36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107b52:	e021      	b.n	8107b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107b54:	697b      	ldr	r3, [r7, #20]
 8107b56:	ee07 3a90 	vmov	s15, r3
 8107b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107b66:	4b37      	ldr	r3, [pc, #220]	; (8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107b6e:	ee07 3a90 	vmov	s15, r3
 8107b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8107b7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107b96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8107b98:	4b2a      	ldr	r3, [pc, #168]	; (8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b9c:	0a5b      	lsrs	r3, r3, #9
 8107b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107ba2:	ee07 3a90 	vmov	s15, r3
 8107ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8107bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107bbe:	ee17 2a90 	vmov	r2, s15
 8107bc2:	687b      	ldr	r3, [r7, #4]
 8107bc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8107bc6:	4b1f      	ldr	r3, [pc, #124]	; (8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bca:	0c1b      	lsrs	r3, r3, #16
 8107bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107bd0:	ee07 3a90 	vmov	s15, r3
 8107bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8107be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107bec:	ee17 2a90 	vmov	r2, s15
 8107bf0:	687b      	ldr	r3, [r7, #4]
 8107bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8107bf4:	4b13      	ldr	r3, [pc, #76]	; (8107c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bf8:	0e1b      	lsrs	r3, r3, #24
 8107bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107bfe:	ee07 3a90 	vmov	s15, r3
 8107c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107c1a:	ee17 2a90 	vmov	r2, s15
 8107c1e:	687b      	ldr	r3, [r7, #4]
 8107c20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8107c22:	e008      	b.n	8107c36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107c24:	687b      	ldr	r3, [r7, #4]
 8107c26:	2200      	movs	r2, #0
 8107c28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8107c2a:	687b      	ldr	r3, [r7, #4]
 8107c2c:	2200      	movs	r2, #0
 8107c2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8107c30:	687b      	ldr	r3, [r7, #4]
 8107c32:	2200      	movs	r2, #0
 8107c34:	609a      	str	r2, [r3, #8]
}
 8107c36:	bf00      	nop
 8107c38:	3724      	adds	r7, #36	; 0x24
 8107c3a:	46bd      	mov	sp, r7
 8107c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c40:	4770      	bx	lr
 8107c42:	bf00      	nop
 8107c44:	58024400 	.word	0x58024400
 8107c48:	03d09000 	.word	0x03d09000
 8107c4c:	46000000 	.word	0x46000000
 8107c50:	4c742400 	.word	0x4c742400
 8107c54:	4a742400 	.word	0x4a742400
 8107c58:	4af42400 	.word	0x4af42400

08107c5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8107c5c:	b480      	push	{r7}
 8107c5e:	b089      	sub	sp, #36	; 0x24
 8107c60:	af00      	add	r7, sp, #0
 8107c62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107c64:	4ba1      	ldr	r3, [pc, #644]	; (8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c68:	f003 0303 	and.w	r3, r3, #3
 8107c6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8107c6e:	4b9f      	ldr	r3, [pc, #636]	; (8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c72:	0d1b      	lsrs	r3, r3, #20
 8107c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107c78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8107c7a:	4b9c      	ldr	r3, [pc, #624]	; (8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c7e:	0a1b      	lsrs	r3, r3, #8
 8107c80:	f003 0301 	and.w	r3, r3, #1
 8107c84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8107c86:	4b99      	ldr	r3, [pc, #612]	; (8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107c8a:	08db      	lsrs	r3, r3, #3
 8107c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107c90:	693a      	ldr	r2, [r7, #16]
 8107c92:	fb02 f303 	mul.w	r3, r2, r3
 8107c96:	ee07 3a90 	vmov	s15, r3
 8107c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107c9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8107ca2:	697b      	ldr	r3, [r7, #20]
 8107ca4:	2b00      	cmp	r3, #0
 8107ca6:	f000 8111 	beq.w	8107ecc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8107caa:	69bb      	ldr	r3, [r7, #24]
 8107cac:	2b02      	cmp	r3, #2
 8107cae:	f000 8083 	beq.w	8107db8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8107cb2:	69bb      	ldr	r3, [r7, #24]
 8107cb4:	2b02      	cmp	r3, #2
 8107cb6:	f200 80a1 	bhi.w	8107dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8107cba:	69bb      	ldr	r3, [r7, #24]
 8107cbc:	2b00      	cmp	r3, #0
 8107cbe:	d003      	beq.n	8107cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8107cc0:	69bb      	ldr	r3, [r7, #24]
 8107cc2:	2b01      	cmp	r3, #1
 8107cc4:	d056      	beq.n	8107d74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8107cc6:	e099      	b.n	8107dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107cc8:	4b88      	ldr	r3, [pc, #544]	; (8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107cca:	681b      	ldr	r3, [r3, #0]
 8107ccc:	f003 0320 	and.w	r3, r3, #32
 8107cd0:	2b00      	cmp	r3, #0
 8107cd2:	d02d      	beq.n	8107d30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107cd4:	4b85      	ldr	r3, [pc, #532]	; (8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107cd6:	681b      	ldr	r3, [r3, #0]
 8107cd8:	08db      	lsrs	r3, r3, #3
 8107cda:	f003 0303 	and.w	r3, r3, #3
 8107cde:	4a84      	ldr	r2, [pc, #528]	; (8107ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8107ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8107ce4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107ce6:	68bb      	ldr	r3, [r7, #8]
 8107ce8:	ee07 3a90 	vmov	s15, r3
 8107cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107cf0:	697b      	ldr	r3, [r7, #20]
 8107cf2:	ee07 3a90 	vmov	s15, r3
 8107cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107cfe:	4b7b      	ldr	r3, [pc, #492]	; (8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d06:	ee07 3a90 	vmov	s15, r3
 8107d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107d2e:	e087      	b.n	8107e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107d30:	697b      	ldr	r3, [r7, #20]
 8107d32:	ee07 3a90 	vmov	s15, r3
 8107d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8107d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d42:	4b6a      	ldr	r3, [pc, #424]	; (8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d4a:	ee07 3a90 	vmov	s15, r3
 8107d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107d72:	e065      	b.n	8107e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107d74:	697b      	ldr	r3, [r7, #20]
 8107d76:	ee07 3a90 	vmov	s15, r3
 8107d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d86:	4b59      	ldr	r3, [pc, #356]	; (8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d8e:	ee07 3a90 	vmov	s15, r3
 8107d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107db6:	e043      	b.n	8107e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107db8:	697b      	ldr	r3, [r7, #20]
 8107dba:	ee07 3a90 	vmov	s15, r3
 8107dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107dc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8107dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107dca:	4b48      	ldr	r3, [pc, #288]	; (8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107dd2:	ee07 3a90 	vmov	s15, r3
 8107dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8107dde:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107df6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107dfa:	e021      	b.n	8107e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107dfc:	697b      	ldr	r3, [r7, #20]
 8107dfe:	ee07 3a90 	vmov	s15, r3
 8107e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107e0e:	4b37      	ldr	r3, [pc, #220]	; (8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107e16:	ee07 3a90 	vmov	s15, r3
 8107e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107e22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107e3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8107e40:	4b2a      	ldr	r3, [pc, #168]	; (8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107e44:	0a5b      	lsrs	r3, r3, #9
 8107e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107e4a:	ee07 3a90 	vmov	s15, r3
 8107e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8107e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107e66:	ee17 2a90 	vmov	r2, s15
 8107e6a:	687b      	ldr	r3, [r7, #4]
 8107e6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8107e6e:	4b1f      	ldr	r3, [pc, #124]	; (8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107e72:	0c1b      	lsrs	r3, r3, #16
 8107e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107e78:	ee07 3a90 	vmov	s15, r3
 8107e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107e84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8107e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107e94:	ee17 2a90 	vmov	r2, s15
 8107e98:	687b      	ldr	r3, [r7, #4]
 8107e9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8107e9c:	4b13      	ldr	r3, [pc, #76]	; (8107eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107ea0:	0e1b      	lsrs	r3, r3, #24
 8107ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107ea6:	ee07 3a90 	vmov	s15, r3
 8107eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107eae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8107eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107ec2:	ee17 2a90 	vmov	r2, s15
 8107ec6:	687b      	ldr	r3, [r7, #4]
 8107ec8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8107eca:	e008      	b.n	8107ede <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8107ecc:	687b      	ldr	r3, [r7, #4]
 8107ece:	2200      	movs	r2, #0
 8107ed0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8107ed2:	687b      	ldr	r3, [r7, #4]
 8107ed4:	2200      	movs	r2, #0
 8107ed6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107ed8:	687b      	ldr	r3, [r7, #4]
 8107eda:	2200      	movs	r2, #0
 8107edc:	609a      	str	r2, [r3, #8]
}
 8107ede:	bf00      	nop
 8107ee0:	3724      	adds	r7, #36	; 0x24
 8107ee2:	46bd      	mov	sp, r7
 8107ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ee8:	4770      	bx	lr
 8107eea:	bf00      	nop
 8107eec:	58024400 	.word	0x58024400
 8107ef0:	03d09000 	.word	0x03d09000
 8107ef4:	46000000 	.word	0x46000000
 8107ef8:	4c742400 	.word	0x4c742400
 8107efc:	4a742400 	.word	0x4a742400
 8107f00:	4af42400 	.word	0x4af42400

08107f04 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8107f04:	b480      	push	{r7}
 8107f06:	b089      	sub	sp, #36	; 0x24
 8107f08:	af00      	add	r7, sp, #0
 8107f0a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107f0c:	4ba0      	ldr	r3, [pc, #640]	; (8108190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f10:	f003 0303 	and.w	r3, r3, #3
 8107f14:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8107f16:	4b9e      	ldr	r3, [pc, #632]	; (8108190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f1a:	091b      	lsrs	r3, r3, #4
 8107f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107f20:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8107f22:	4b9b      	ldr	r3, [pc, #620]	; (8108190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107f26:	f003 0301 	and.w	r3, r3, #1
 8107f2a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8107f2c:	4b98      	ldr	r3, [pc, #608]	; (8108190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107f30:	08db      	lsrs	r3, r3, #3
 8107f32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107f36:	693a      	ldr	r2, [r7, #16]
 8107f38:	fb02 f303 	mul.w	r3, r2, r3
 8107f3c:	ee07 3a90 	vmov	s15, r3
 8107f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f44:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8107f48:	697b      	ldr	r3, [r7, #20]
 8107f4a:	2b00      	cmp	r3, #0
 8107f4c:	f000 8111 	beq.w	8108172 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8107f50:	69bb      	ldr	r3, [r7, #24]
 8107f52:	2b02      	cmp	r3, #2
 8107f54:	f000 8083 	beq.w	810805e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8107f58:	69bb      	ldr	r3, [r7, #24]
 8107f5a:	2b02      	cmp	r3, #2
 8107f5c:	f200 80a1 	bhi.w	81080a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8107f60:	69bb      	ldr	r3, [r7, #24]
 8107f62:	2b00      	cmp	r3, #0
 8107f64:	d003      	beq.n	8107f6e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8107f66:	69bb      	ldr	r3, [r7, #24]
 8107f68:	2b01      	cmp	r3, #1
 8107f6a:	d056      	beq.n	810801a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8107f6c:	e099      	b.n	81080a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107f6e:	4b88      	ldr	r3, [pc, #544]	; (8108190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f70:	681b      	ldr	r3, [r3, #0]
 8107f72:	f003 0320 	and.w	r3, r3, #32
 8107f76:	2b00      	cmp	r3, #0
 8107f78:	d02d      	beq.n	8107fd6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107f7a:	4b85      	ldr	r3, [pc, #532]	; (8108190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f7c:	681b      	ldr	r3, [r3, #0]
 8107f7e:	08db      	lsrs	r3, r3, #3
 8107f80:	f003 0303 	and.w	r3, r3, #3
 8107f84:	4a83      	ldr	r2, [pc, #524]	; (8108194 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8107f86:	fa22 f303 	lsr.w	r3, r2, r3
 8107f8a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107f8c:	68bb      	ldr	r3, [r7, #8]
 8107f8e:	ee07 3a90 	vmov	s15, r3
 8107f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107f96:	697b      	ldr	r3, [r7, #20]
 8107f98:	ee07 3a90 	vmov	s15, r3
 8107f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107fa4:	4b7a      	ldr	r3, [pc, #488]	; (8108190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107fac:	ee07 3a90 	vmov	s15, r3
 8107fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107fb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8107fb8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8108198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107fc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107fd0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107fd4:	e087      	b.n	81080e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107fd6:	697b      	ldr	r3, [r7, #20]
 8107fd8:	ee07 3a90 	vmov	s15, r3
 8107fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107fe0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 810819c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107fe8:	4b69      	ldr	r3, [pc, #420]	; (8108190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107ff0:	ee07 3a90 	vmov	s15, r3
 8107ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107ff8:	ed97 6a03 	vldr	s12, [r7, #12]
 8107ffc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8108198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810800c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108014:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108018:	e065      	b.n	81080e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810801a:	697b      	ldr	r3, [r7, #20]
 810801c:	ee07 3a90 	vmov	s15, r3
 8108020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108024:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81081a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8108028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810802c:	4b58      	ldr	r3, [pc, #352]	; (8108190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810802e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108034:	ee07 3a90 	vmov	s15, r3
 8108038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810803c:	ed97 6a03 	vldr	s12, [r7, #12]
 8108040:	eddf 5a55 	vldr	s11, [pc, #340]	; 8108198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108044:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108048:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810804c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108058:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810805c:	e043      	b.n	81080e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810805e:	697b      	ldr	r3, [r7, #20]
 8108060:	ee07 3a90 	vmov	s15, r3
 8108064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108068:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81081a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810806c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108070:	4b47      	ldr	r3, [pc, #284]	; (8108190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108078:	ee07 3a90 	vmov	s15, r3
 810807c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108080:	ed97 6a03 	vldr	s12, [r7, #12]
 8108084:	eddf 5a44 	vldr	s11, [pc, #272]	; 8108198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108088:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810808c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108098:	ee67 7a27 	vmul.f32	s15, s14, s15
 810809c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81080a0:	e021      	b.n	81080e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81080a2:	697b      	ldr	r3, [r7, #20]
 81080a4:	ee07 3a90 	vmov	s15, r3
 81080a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080ac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 810819c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81080b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81080b4:	4b36      	ldr	r3, [pc, #216]	; (8108190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81080b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81080b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81080bc:	ee07 3a90 	vmov	s15, r3
 81080c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81080c4:	ed97 6a03 	vldr	s12, [r7, #12]
 81080c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8108198 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81080cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81080d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81080d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81080d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81080dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81080e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81080e6:	4b2a      	ldr	r3, [pc, #168]	; (8108190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81080e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81080ea:	0a5b      	lsrs	r3, r3, #9
 81080ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81080f0:	ee07 3a90 	vmov	s15, r3
 81080f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81080fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108100:	edd7 6a07 	vldr	s13, [r7, #28]
 8108104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810810c:	ee17 2a90 	vmov	r2, s15
 8108110:	687b      	ldr	r3, [r7, #4]
 8108112:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8108114:	4b1e      	ldr	r3, [pc, #120]	; (8108190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108118:	0c1b      	lsrs	r3, r3, #16
 810811a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810811e:	ee07 3a90 	vmov	s15, r3
 8108122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810812a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810812e:	edd7 6a07 	vldr	s13, [r7, #28]
 8108132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810813a:	ee17 2a90 	vmov	r2, s15
 810813e:	687b      	ldr	r3, [r7, #4]
 8108140:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8108142:	4b13      	ldr	r3, [pc, #76]	; (8108190 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108146:	0e1b      	lsrs	r3, r3, #24
 8108148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810814c:	ee07 3a90 	vmov	s15, r3
 8108150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108154:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108158:	ee37 7a87 	vadd.f32	s14, s15, s14
 810815c:	edd7 6a07 	vldr	s13, [r7, #28]
 8108160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108168:	ee17 2a90 	vmov	r2, s15
 810816c:	687b      	ldr	r3, [r7, #4]
 810816e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8108170:	e008      	b.n	8108184 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8108172:	687b      	ldr	r3, [r7, #4]
 8108174:	2200      	movs	r2, #0
 8108176:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8108178:	687b      	ldr	r3, [r7, #4]
 810817a:	2200      	movs	r2, #0
 810817c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810817e:	687b      	ldr	r3, [r7, #4]
 8108180:	2200      	movs	r2, #0
 8108182:	609a      	str	r2, [r3, #8]
}
 8108184:	bf00      	nop
 8108186:	3724      	adds	r7, #36	; 0x24
 8108188:	46bd      	mov	sp, r7
 810818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810818e:	4770      	bx	lr
 8108190:	58024400 	.word	0x58024400
 8108194:	03d09000 	.word	0x03d09000
 8108198:	46000000 	.word	0x46000000
 810819c:	4c742400 	.word	0x4c742400
 81081a0:	4a742400 	.word	0x4a742400
 81081a4:	4af42400 	.word	0x4af42400

081081a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81081a8:	b580      	push	{r7, lr}
 81081aa:	b084      	sub	sp, #16
 81081ac:	af00      	add	r7, sp, #0
 81081ae:	6078      	str	r0, [r7, #4]
 81081b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81081b2:	2300      	movs	r3, #0
 81081b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81081b6:	4b54      	ldr	r3, [pc, #336]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 81081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81081ba:	f003 0303 	and.w	r3, r3, #3
 81081be:	2b03      	cmp	r3, #3
 81081c0:	d101      	bne.n	81081c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81081c2:	2301      	movs	r3, #1
 81081c4:	e09b      	b.n	81082fe <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81081c6:	4b50      	ldr	r3, [pc, #320]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 81081c8:	681b      	ldr	r3, [r3, #0]
 81081ca:	4a4f      	ldr	r2, [pc, #316]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 81081cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81081d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81081d2:	f7fa ff5d 	bl	8103090 <HAL_GetTick>
 81081d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81081d8:	e008      	b.n	81081ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81081da:	f7fa ff59 	bl	8103090 <HAL_GetTick>
 81081de:	4602      	mov	r2, r0
 81081e0:	68bb      	ldr	r3, [r7, #8]
 81081e2:	1ad3      	subs	r3, r2, r3
 81081e4:	2b02      	cmp	r3, #2
 81081e6:	d901      	bls.n	81081ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81081e8:	2303      	movs	r3, #3
 81081ea:	e088      	b.n	81082fe <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81081ec:	4b46      	ldr	r3, [pc, #280]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 81081ee:	681b      	ldr	r3, [r3, #0]
 81081f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81081f4:	2b00      	cmp	r3, #0
 81081f6:	d1f0      	bne.n	81081da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81081f8:	4b43      	ldr	r3, [pc, #268]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 81081fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81081fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8108200:	687b      	ldr	r3, [r7, #4]
 8108202:	681b      	ldr	r3, [r3, #0]
 8108204:	031b      	lsls	r3, r3, #12
 8108206:	4940      	ldr	r1, [pc, #256]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 8108208:	4313      	orrs	r3, r2
 810820a:	628b      	str	r3, [r1, #40]	; 0x28
 810820c:	687b      	ldr	r3, [r7, #4]
 810820e:	685b      	ldr	r3, [r3, #4]
 8108210:	3b01      	subs	r3, #1
 8108212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108216:	687b      	ldr	r3, [r7, #4]
 8108218:	689b      	ldr	r3, [r3, #8]
 810821a:	3b01      	subs	r3, #1
 810821c:	025b      	lsls	r3, r3, #9
 810821e:	b29b      	uxth	r3, r3
 8108220:	431a      	orrs	r2, r3
 8108222:	687b      	ldr	r3, [r7, #4]
 8108224:	68db      	ldr	r3, [r3, #12]
 8108226:	3b01      	subs	r3, #1
 8108228:	041b      	lsls	r3, r3, #16
 810822a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810822e:	431a      	orrs	r2, r3
 8108230:	687b      	ldr	r3, [r7, #4]
 8108232:	691b      	ldr	r3, [r3, #16]
 8108234:	3b01      	subs	r3, #1
 8108236:	061b      	lsls	r3, r3, #24
 8108238:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810823c:	4932      	ldr	r1, [pc, #200]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 810823e:	4313      	orrs	r3, r2
 8108240:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108242:	4b31      	ldr	r3, [pc, #196]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 8108244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108246:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810824a:	687b      	ldr	r3, [r7, #4]
 810824c:	695b      	ldr	r3, [r3, #20]
 810824e:	492e      	ldr	r1, [pc, #184]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 8108250:	4313      	orrs	r3, r2
 8108252:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108254:	4b2c      	ldr	r3, [pc, #176]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 8108256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108258:	f023 0220 	bic.w	r2, r3, #32
 810825c:	687b      	ldr	r3, [r7, #4]
 810825e:	699b      	ldr	r3, [r3, #24]
 8108260:	4929      	ldr	r1, [pc, #164]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 8108262:	4313      	orrs	r3, r2
 8108264:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8108266:	4b28      	ldr	r3, [pc, #160]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 8108268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810826a:	4a27      	ldr	r2, [pc, #156]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 810826c:	f023 0310 	bic.w	r3, r3, #16
 8108270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108272:	4b25      	ldr	r3, [pc, #148]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 8108274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810827a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810827e:	687a      	ldr	r2, [r7, #4]
 8108280:	69d2      	ldr	r2, [r2, #28]
 8108282:	00d2      	lsls	r2, r2, #3
 8108284:	4920      	ldr	r1, [pc, #128]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 8108286:	4313      	orrs	r3, r2
 8108288:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810828a:	4b1f      	ldr	r3, [pc, #124]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 810828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810828e:	4a1e      	ldr	r2, [pc, #120]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 8108290:	f043 0310 	orr.w	r3, r3, #16
 8108294:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108296:	683b      	ldr	r3, [r7, #0]
 8108298:	2b00      	cmp	r3, #0
 810829a:	d106      	bne.n	81082aa <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810829c:	4b1a      	ldr	r3, [pc, #104]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 810829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81082a0:	4a19      	ldr	r2, [pc, #100]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 81082a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81082a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81082a8:	e00f      	b.n	81082ca <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81082aa:	683b      	ldr	r3, [r7, #0]
 81082ac:	2b01      	cmp	r3, #1
 81082ae:	d106      	bne.n	81082be <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81082b0:	4b15      	ldr	r3, [pc, #84]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 81082b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81082b4:	4a14      	ldr	r2, [pc, #80]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 81082b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81082ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 81082bc:	e005      	b.n	81082ca <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81082be:	4b12      	ldr	r3, [pc, #72]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 81082c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81082c2:	4a11      	ldr	r2, [pc, #68]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 81082c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81082c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81082ca:	4b0f      	ldr	r3, [pc, #60]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 81082cc:	681b      	ldr	r3, [r3, #0]
 81082ce:	4a0e      	ldr	r2, [pc, #56]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 81082d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81082d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81082d6:	f7fa fedb 	bl	8103090 <HAL_GetTick>
 81082da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81082dc:	e008      	b.n	81082f0 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81082de:	f7fa fed7 	bl	8103090 <HAL_GetTick>
 81082e2:	4602      	mov	r2, r0
 81082e4:	68bb      	ldr	r3, [r7, #8]
 81082e6:	1ad3      	subs	r3, r2, r3
 81082e8:	2b02      	cmp	r3, #2
 81082ea:	d901      	bls.n	81082f0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81082ec:	2303      	movs	r3, #3
 81082ee:	e006      	b.n	81082fe <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81082f0:	4b05      	ldr	r3, [pc, #20]	; (8108308 <RCCEx_PLL2_Config+0x160>)
 81082f2:	681b      	ldr	r3, [r3, #0]
 81082f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81082f8:	2b00      	cmp	r3, #0
 81082fa:	d0f0      	beq.n	81082de <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 81082fe:	4618      	mov	r0, r3
 8108300:	3710      	adds	r7, #16
 8108302:	46bd      	mov	sp, r7
 8108304:	bd80      	pop	{r7, pc}
 8108306:	bf00      	nop
 8108308:	58024400 	.word	0x58024400

0810830c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810830c:	b580      	push	{r7, lr}
 810830e:	b084      	sub	sp, #16
 8108310:	af00      	add	r7, sp, #0
 8108312:	6078      	str	r0, [r7, #4]
 8108314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108316:	2300      	movs	r3, #0
 8108318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810831a:	4b54      	ldr	r3, [pc, #336]	; (810846c <RCCEx_PLL3_Config+0x160>)
 810831c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810831e:	f003 0303 	and.w	r3, r3, #3
 8108322:	2b03      	cmp	r3, #3
 8108324:	d101      	bne.n	810832a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8108326:	2301      	movs	r3, #1
 8108328:	e09b      	b.n	8108462 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810832a:	4b50      	ldr	r3, [pc, #320]	; (810846c <RCCEx_PLL3_Config+0x160>)
 810832c:	681b      	ldr	r3, [r3, #0]
 810832e:	4a4f      	ldr	r2, [pc, #316]	; (810846c <RCCEx_PLL3_Config+0x160>)
 8108330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108336:	f7fa feab 	bl	8103090 <HAL_GetTick>
 810833a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810833c:	e008      	b.n	8108350 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810833e:	f7fa fea7 	bl	8103090 <HAL_GetTick>
 8108342:	4602      	mov	r2, r0
 8108344:	68bb      	ldr	r3, [r7, #8]
 8108346:	1ad3      	subs	r3, r2, r3
 8108348:	2b02      	cmp	r3, #2
 810834a:	d901      	bls.n	8108350 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810834c:	2303      	movs	r3, #3
 810834e:	e088      	b.n	8108462 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108350:	4b46      	ldr	r3, [pc, #280]	; (810846c <RCCEx_PLL3_Config+0x160>)
 8108352:	681b      	ldr	r3, [r3, #0]
 8108354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108358:	2b00      	cmp	r3, #0
 810835a:	d1f0      	bne.n	810833e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810835c:	4b43      	ldr	r3, [pc, #268]	; (810846c <RCCEx_PLL3_Config+0x160>)
 810835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108360:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8108364:	687b      	ldr	r3, [r7, #4]
 8108366:	681b      	ldr	r3, [r3, #0]
 8108368:	051b      	lsls	r3, r3, #20
 810836a:	4940      	ldr	r1, [pc, #256]	; (810846c <RCCEx_PLL3_Config+0x160>)
 810836c:	4313      	orrs	r3, r2
 810836e:	628b      	str	r3, [r1, #40]	; 0x28
 8108370:	687b      	ldr	r3, [r7, #4]
 8108372:	685b      	ldr	r3, [r3, #4]
 8108374:	3b01      	subs	r3, #1
 8108376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810837a:	687b      	ldr	r3, [r7, #4]
 810837c:	689b      	ldr	r3, [r3, #8]
 810837e:	3b01      	subs	r3, #1
 8108380:	025b      	lsls	r3, r3, #9
 8108382:	b29b      	uxth	r3, r3
 8108384:	431a      	orrs	r2, r3
 8108386:	687b      	ldr	r3, [r7, #4]
 8108388:	68db      	ldr	r3, [r3, #12]
 810838a:	3b01      	subs	r3, #1
 810838c:	041b      	lsls	r3, r3, #16
 810838e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8108392:	431a      	orrs	r2, r3
 8108394:	687b      	ldr	r3, [r7, #4]
 8108396:	691b      	ldr	r3, [r3, #16]
 8108398:	3b01      	subs	r3, #1
 810839a:	061b      	lsls	r3, r3, #24
 810839c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81083a0:	4932      	ldr	r1, [pc, #200]	; (810846c <RCCEx_PLL3_Config+0x160>)
 81083a2:	4313      	orrs	r3, r2
 81083a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81083a6:	4b31      	ldr	r3, [pc, #196]	; (810846c <RCCEx_PLL3_Config+0x160>)
 81083a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81083ae:	687b      	ldr	r3, [r7, #4]
 81083b0:	695b      	ldr	r3, [r3, #20]
 81083b2:	492e      	ldr	r1, [pc, #184]	; (810846c <RCCEx_PLL3_Config+0x160>)
 81083b4:	4313      	orrs	r3, r2
 81083b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81083b8:	4b2c      	ldr	r3, [pc, #176]	; (810846c <RCCEx_PLL3_Config+0x160>)
 81083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81083c0:	687b      	ldr	r3, [r7, #4]
 81083c2:	699b      	ldr	r3, [r3, #24]
 81083c4:	4929      	ldr	r1, [pc, #164]	; (810846c <RCCEx_PLL3_Config+0x160>)
 81083c6:	4313      	orrs	r3, r2
 81083c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81083ca:	4b28      	ldr	r3, [pc, #160]	; (810846c <RCCEx_PLL3_Config+0x160>)
 81083cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083ce:	4a27      	ldr	r2, [pc, #156]	; (810846c <RCCEx_PLL3_Config+0x160>)
 81083d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81083d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81083d6:	4b25      	ldr	r3, [pc, #148]	; (810846c <RCCEx_PLL3_Config+0x160>)
 81083d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81083da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81083de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81083e2:	687a      	ldr	r2, [r7, #4]
 81083e4:	69d2      	ldr	r2, [r2, #28]
 81083e6:	00d2      	lsls	r2, r2, #3
 81083e8:	4920      	ldr	r1, [pc, #128]	; (810846c <RCCEx_PLL3_Config+0x160>)
 81083ea:	4313      	orrs	r3, r2
 81083ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81083ee:	4b1f      	ldr	r3, [pc, #124]	; (810846c <RCCEx_PLL3_Config+0x160>)
 81083f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083f2:	4a1e      	ldr	r2, [pc, #120]	; (810846c <RCCEx_PLL3_Config+0x160>)
 81083f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81083f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81083fa:	683b      	ldr	r3, [r7, #0]
 81083fc:	2b00      	cmp	r3, #0
 81083fe:	d106      	bne.n	810840e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8108400:	4b1a      	ldr	r3, [pc, #104]	; (810846c <RCCEx_PLL3_Config+0x160>)
 8108402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108404:	4a19      	ldr	r2, [pc, #100]	; (810846c <RCCEx_PLL3_Config+0x160>)
 8108406:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810840a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810840c:	e00f      	b.n	810842e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810840e:	683b      	ldr	r3, [r7, #0]
 8108410:	2b01      	cmp	r3, #1
 8108412:	d106      	bne.n	8108422 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8108414:	4b15      	ldr	r3, [pc, #84]	; (810846c <RCCEx_PLL3_Config+0x160>)
 8108416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108418:	4a14      	ldr	r2, [pc, #80]	; (810846c <RCCEx_PLL3_Config+0x160>)
 810841a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810841e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8108420:	e005      	b.n	810842e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8108422:	4b12      	ldr	r3, [pc, #72]	; (810846c <RCCEx_PLL3_Config+0x160>)
 8108424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108426:	4a11      	ldr	r2, [pc, #68]	; (810846c <RCCEx_PLL3_Config+0x160>)
 8108428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810842c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810842e:	4b0f      	ldr	r3, [pc, #60]	; (810846c <RCCEx_PLL3_Config+0x160>)
 8108430:	681b      	ldr	r3, [r3, #0]
 8108432:	4a0e      	ldr	r2, [pc, #56]	; (810846c <RCCEx_PLL3_Config+0x160>)
 8108434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8108438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810843a:	f7fa fe29 	bl	8103090 <HAL_GetTick>
 810843e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108440:	e008      	b.n	8108454 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108442:	f7fa fe25 	bl	8103090 <HAL_GetTick>
 8108446:	4602      	mov	r2, r0
 8108448:	68bb      	ldr	r3, [r7, #8]
 810844a:	1ad3      	subs	r3, r2, r3
 810844c:	2b02      	cmp	r3, #2
 810844e:	d901      	bls.n	8108454 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108450:	2303      	movs	r3, #3
 8108452:	e006      	b.n	8108462 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108454:	4b05      	ldr	r3, [pc, #20]	; (810846c <RCCEx_PLL3_Config+0x160>)
 8108456:	681b      	ldr	r3, [r3, #0]
 8108458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810845c:	2b00      	cmp	r3, #0
 810845e:	d0f0      	beq.n	8108442 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8108460:	7bfb      	ldrb	r3, [r7, #15]
}
 8108462:	4618      	mov	r0, r3
 8108464:	3710      	adds	r7, #16
 8108466:	46bd      	mov	sp, r7
 8108468:	bd80      	pop	{r7, pc}
 810846a:	bf00      	nop
 810846c:	58024400 	.word	0x58024400

08108470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8108470:	b580      	push	{r7, lr}
 8108472:	b082      	sub	sp, #8
 8108474:	af00      	add	r7, sp, #0
 8108476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8108478:	687b      	ldr	r3, [r7, #4]
 810847a:	2b00      	cmp	r3, #0
 810847c:	d101      	bne.n	8108482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810847e:	2301      	movs	r3, #1
 8108480:	e049      	b.n	8108516 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8108482:	687b      	ldr	r3, [r7, #4]
 8108484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8108488:	b2db      	uxtb	r3, r3
 810848a:	2b00      	cmp	r3, #0
 810848c:	d106      	bne.n	810849c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810848e:	687b      	ldr	r3, [r7, #4]
 8108490:	2200      	movs	r2, #0
 8108492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8108496:	6878      	ldr	r0, [r7, #4]
 8108498:	f7fa fb00 	bl	8102a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810849c:	687b      	ldr	r3, [r7, #4]
 810849e:	2202      	movs	r2, #2
 81084a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81084a4:	687b      	ldr	r3, [r7, #4]
 81084a6:	681a      	ldr	r2, [r3, #0]
 81084a8:	687b      	ldr	r3, [r7, #4]
 81084aa:	3304      	adds	r3, #4
 81084ac:	4619      	mov	r1, r3
 81084ae:	4610      	mov	r0, r2
 81084b0:	f000 fe18 	bl	81090e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81084b4:	687b      	ldr	r3, [r7, #4]
 81084b6:	2201      	movs	r2, #1
 81084b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	2201      	movs	r2, #1
 81084c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81084c4:	687b      	ldr	r3, [r7, #4]
 81084c6:	2201      	movs	r2, #1
 81084c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81084cc:	687b      	ldr	r3, [r7, #4]
 81084ce:	2201      	movs	r2, #1
 81084d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81084d4:	687b      	ldr	r3, [r7, #4]
 81084d6:	2201      	movs	r2, #1
 81084d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81084dc:	687b      	ldr	r3, [r7, #4]
 81084de:	2201      	movs	r2, #1
 81084e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81084e4:	687b      	ldr	r3, [r7, #4]
 81084e6:	2201      	movs	r2, #1
 81084e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81084ec:	687b      	ldr	r3, [r7, #4]
 81084ee:	2201      	movs	r2, #1
 81084f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81084f4:	687b      	ldr	r3, [r7, #4]
 81084f6:	2201      	movs	r2, #1
 81084f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81084fc:	687b      	ldr	r3, [r7, #4]
 81084fe:	2201      	movs	r2, #1
 8108500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8108504:	687b      	ldr	r3, [r7, #4]
 8108506:	2201      	movs	r2, #1
 8108508:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810850c:	687b      	ldr	r3, [r7, #4]
 810850e:	2201      	movs	r2, #1
 8108510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8108514:	2300      	movs	r3, #0
}
 8108516:	4618      	mov	r0, r3
 8108518:	3708      	adds	r7, #8
 810851a:	46bd      	mov	sp, r7
 810851c:	bd80      	pop	{r7, pc}
	...

08108520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8108520:	b480      	push	{r7}
 8108522:	b085      	sub	sp, #20
 8108524:	af00      	add	r7, sp, #0
 8108526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8108528:	687b      	ldr	r3, [r7, #4]
 810852a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810852e:	b2db      	uxtb	r3, r3
 8108530:	2b01      	cmp	r3, #1
 8108532:	d001      	beq.n	8108538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8108534:	2301      	movs	r3, #1
 8108536:	e054      	b.n	81085e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108538:	687b      	ldr	r3, [r7, #4]
 810853a:	2202      	movs	r2, #2
 810853c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8108540:	687b      	ldr	r3, [r7, #4]
 8108542:	681b      	ldr	r3, [r3, #0]
 8108544:	68da      	ldr	r2, [r3, #12]
 8108546:	687b      	ldr	r3, [r7, #4]
 8108548:	681b      	ldr	r3, [r3, #0]
 810854a:	f042 0201 	orr.w	r2, r2, #1
 810854e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108550:	687b      	ldr	r3, [r7, #4]
 8108552:	681b      	ldr	r3, [r3, #0]
 8108554:	4a26      	ldr	r2, [pc, #152]	; (81085f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8108556:	4293      	cmp	r3, r2
 8108558:	d022      	beq.n	81085a0 <HAL_TIM_Base_Start_IT+0x80>
 810855a:	687b      	ldr	r3, [r7, #4]
 810855c:	681b      	ldr	r3, [r3, #0]
 810855e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108562:	d01d      	beq.n	81085a0 <HAL_TIM_Base_Start_IT+0x80>
 8108564:	687b      	ldr	r3, [r7, #4]
 8108566:	681b      	ldr	r3, [r3, #0]
 8108568:	4a22      	ldr	r2, [pc, #136]	; (81085f4 <HAL_TIM_Base_Start_IT+0xd4>)
 810856a:	4293      	cmp	r3, r2
 810856c:	d018      	beq.n	81085a0 <HAL_TIM_Base_Start_IT+0x80>
 810856e:	687b      	ldr	r3, [r7, #4]
 8108570:	681b      	ldr	r3, [r3, #0]
 8108572:	4a21      	ldr	r2, [pc, #132]	; (81085f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8108574:	4293      	cmp	r3, r2
 8108576:	d013      	beq.n	81085a0 <HAL_TIM_Base_Start_IT+0x80>
 8108578:	687b      	ldr	r3, [r7, #4]
 810857a:	681b      	ldr	r3, [r3, #0]
 810857c:	4a1f      	ldr	r2, [pc, #124]	; (81085fc <HAL_TIM_Base_Start_IT+0xdc>)
 810857e:	4293      	cmp	r3, r2
 8108580:	d00e      	beq.n	81085a0 <HAL_TIM_Base_Start_IT+0x80>
 8108582:	687b      	ldr	r3, [r7, #4]
 8108584:	681b      	ldr	r3, [r3, #0]
 8108586:	4a1e      	ldr	r2, [pc, #120]	; (8108600 <HAL_TIM_Base_Start_IT+0xe0>)
 8108588:	4293      	cmp	r3, r2
 810858a:	d009      	beq.n	81085a0 <HAL_TIM_Base_Start_IT+0x80>
 810858c:	687b      	ldr	r3, [r7, #4]
 810858e:	681b      	ldr	r3, [r3, #0]
 8108590:	4a1c      	ldr	r2, [pc, #112]	; (8108604 <HAL_TIM_Base_Start_IT+0xe4>)
 8108592:	4293      	cmp	r3, r2
 8108594:	d004      	beq.n	81085a0 <HAL_TIM_Base_Start_IT+0x80>
 8108596:	687b      	ldr	r3, [r7, #4]
 8108598:	681b      	ldr	r3, [r3, #0]
 810859a:	4a1b      	ldr	r2, [pc, #108]	; (8108608 <HAL_TIM_Base_Start_IT+0xe8>)
 810859c:	4293      	cmp	r3, r2
 810859e:	d115      	bne.n	81085cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81085a0:	687b      	ldr	r3, [r7, #4]
 81085a2:	681b      	ldr	r3, [r3, #0]
 81085a4:	689a      	ldr	r2, [r3, #8]
 81085a6:	4b19      	ldr	r3, [pc, #100]	; (810860c <HAL_TIM_Base_Start_IT+0xec>)
 81085a8:	4013      	ands	r3, r2
 81085aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81085ac:	68fb      	ldr	r3, [r7, #12]
 81085ae:	2b06      	cmp	r3, #6
 81085b0:	d015      	beq.n	81085de <HAL_TIM_Base_Start_IT+0xbe>
 81085b2:	68fb      	ldr	r3, [r7, #12]
 81085b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81085b8:	d011      	beq.n	81085de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81085ba:	687b      	ldr	r3, [r7, #4]
 81085bc:	681b      	ldr	r3, [r3, #0]
 81085be:	681a      	ldr	r2, [r3, #0]
 81085c0:	687b      	ldr	r3, [r7, #4]
 81085c2:	681b      	ldr	r3, [r3, #0]
 81085c4:	f042 0201 	orr.w	r2, r2, #1
 81085c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81085ca:	e008      	b.n	81085de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81085cc:	687b      	ldr	r3, [r7, #4]
 81085ce:	681b      	ldr	r3, [r3, #0]
 81085d0:	681a      	ldr	r2, [r3, #0]
 81085d2:	687b      	ldr	r3, [r7, #4]
 81085d4:	681b      	ldr	r3, [r3, #0]
 81085d6:	f042 0201 	orr.w	r2, r2, #1
 81085da:	601a      	str	r2, [r3, #0]
 81085dc:	e000      	b.n	81085e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81085de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81085e0:	2300      	movs	r3, #0
}
 81085e2:	4618      	mov	r0, r3
 81085e4:	3714      	adds	r7, #20
 81085e6:	46bd      	mov	sp, r7
 81085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085ec:	4770      	bx	lr
 81085ee:	bf00      	nop
 81085f0:	40010000 	.word	0x40010000
 81085f4:	40000400 	.word	0x40000400
 81085f8:	40000800 	.word	0x40000800
 81085fc:	40000c00 	.word	0x40000c00
 8108600:	40010400 	.word	0x40010400
 8108604:	40001800 	.word	0x40001800
 8108608:	40014000 	.word	0x40014000
 810860c:	00010007 	.word	0x00010007

08108610 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8108610:	b580      	push	{r7, lr}
 8108612:	b082      	sub	sp, #8
 8108614:	af00      	add	r7, sp, #0
 8108616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8108618:	687b      	ldr	r3, [r7, #4]
 810861a:	2b00      	cmp	r3, #0
 810861c:	d101      	bne.n	8108622 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810861e:	2301      	movs	r3, #1
 8108620:	e049      	b.n	81086b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8108622:	687b      	ldr	r3, [r7, #4]
 8108624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8108628:	b2db      	uxtb	r3, r3
 810862a:	2b00      	cmp	r3, #0
 810862c:	d106      	bne.n	810863c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810862e:	687b      	ldr	r3, [r7, #4]
 8108630:	2200      	movs	r2, #0
 8108632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8108636:	6878      	ldr	r0, [r7, #4]
 8108638:	f000 f841 	bl	81086be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810863c:	687b      	ldr	r3, [r7, #4]
 810863e:	2202      	movs	r2, #2
 8108640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8108644:	687b      	ldr	r3, [r7, #4]
 8108646:	681a      	ldr	r2, [r3, #0]
 8108648:	687b      	ldr	r3, [r7, #4]
 810864a:	3304      	adds	r3, #4
 810864c:	4619      	mov	r1, r3
 810864e:	4610      	mov	r0, r2
 8108650:	f000 fd48 	bl	81090e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8108654:	687b      	ldr	r3, [r7, #4]
 8108656:	2201      	movs	r2, #1
 8108658:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810865c:	687b      	ldr	r3, [r7, #4]
 810865e:	2201      	movs	r2, #1
 8108660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8108664:	687b      	ldr	r3, [r7, #4]
 8108666:	2201      	movs	r2, #1
 8108668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810866c:	687b      	ldr	r3, [r7, #4]
 810866e:	2201      	movs	r2, #1
 8108670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8108674:	687b      	ldr	r3, [r7, #4]
 8108676:	2201      	movs	r2, #1
 8108678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810867c:	687b      	ldr	r3, [r7, #4]
 810867e:	2201      	movs	r2, #1
 8108680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8108684:	687b      	ldr	r3, [r7, #4]
 8108686:	2201      	movs	r2, #1
 8108688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810868c:	687b      	ldr	r3, [r7, #4]
 810868e:	2201      	movs	r2, #1
 8108690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8108694:	687b      	ldr	r3, [r7, #4]
 8108696:	2201      	movs	r2, #1
 8108698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810869c:	687b      	ldr	r3, [r7, #4]
 810869e:	2201      	movs	r2, #1
 81086a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81086a4:	687b      	ldr	r3, [r7, #4]
 81086a6:	2201      	movs	r2, #1
 81086a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81086ac:	687b      	ldr	r3, [r7, #4]
 81086ae:	2201      	movs	r2, #1
 81086b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81086b4:	2300      	movs	r3, #0
}
 81086b6:	4618      	mov	r0, r3
 81086b8:	3708      	adds	r7, #8
 81086ba:	46bd      	mov	sp, r7
 81086bc:	bd80      	pop	{r7, pc}

081086be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 81086be:	b480      	push	{r7}
 81086c0:	b083      	sub	sp, #12
 81086c2:	af00      	add	r7, sp, #0
 81086c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 81086c6:	bf00      	nop
 81086c8:	370c      	adds	r7, #12
 81086ca:	46bd      	mov	sp, r7
 81086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086d0:	4770      	bx	lr
	...

081086d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81086d4:	b580      	push	{r7, lr}
 81086d6:	b084      	sub	sp, #16
 81086d8:	af00      	add	r7, sp, #0
 81086da:	6078      	str	r0, [r7, #4]
 81086dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 81086de:	683b      	ldr	r3, [r7, #0]
 81086e0:	2b00      	cmp	r3, #0
 81086e2:	d109      	bne.n	81086f8 <HAL_TIM_PWM_Start+0x24>
 81086e4:	687b      	ldr	r3, [r7, #4]
 81086e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 81086ea:	b2db      	uxtb	r3, r3
 81086ec:	2b01      	cmp	r3, #1
 81086ee:	bf14      	ite	ne
 81086f0:	2301      	movne	r3, #1
 81086f2:	2300      	moveq	r3, #0
 81086f4:	b2db      	uxtb	r3, r3
 81086f6:	e03c      	b.n	8108772 <HAL_TIM_PWM_Start+0x9e>
 81086f8:	683b      	ldr	r3, [r7, #0]
 81086fa:	2b04      	cmp	r3, #4
 81086fc:	d109      	bne.n	8108712 <HAL_TIM_PWM_Start+0x3e>
 81086fe:	687b      	ldr	r3, [r7, #4]
 8108700:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8108704:	b2db      	uxtb	r3, r3
 8108706:	2b01      	cmp	r3, #1
 8108708:	bf14      	ite	ne
 810870a:	2301      	movne	r3, #1
 810870c:	2300      	moveq	r3, #0
 810870e:	b2db      	uxtb	r3, r3
 8108710:	e02f      	b.n	8108772 <HAL_TIM_PWM_Start+0x9e>
 8108712:	683b      	ldr	r3, [r7, #0]
 8108714:	2b08      	cmp	r3, #8
 8108716:	d109      	bne.n	810872c <HAL_TIM_PWM_Start+0x58>
 8108718:	687b      	ldr	r3, [r7, #4]
 810871a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810871e:	b2db      	uxtb	r3, r3
 8108720:	2b01      	cmp	r3, #1
 8108722:	bf14      	ite	ne
 8108724:	2301      	movne	r3, #1
 8108726:	2300      	moveq	r3, #0
 8108728:	b2db      	uxtb	r3, r3
 810872a:	e022      	b.n	8108772 <HAL_TIM_PWM_Start+0x9e>
 810872c:	683b      	ldr	r3, [r7, #0]
 810872e:	2b0c      	cmp	r3, #12
 8108730:	d109      	bne.n	8108746 <HAL_TIM_PWM_Start+0x72>
 8108732:	687b      	ldr	r3, [r7, #4]
 8108734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108738:	b2db      	uxtb	r3, r3
 810873a:	2b01      	cmp	r3, #1
 810873c:	bf14      	ite	ne
 810873e:	2301      	movne	r3, #1
 8108740:	2300      	moveq	r3, #0
 8108742:	b2db      	uxtb	r3, r3
 8108744:	e015      	b.n	8108772 <HAL_TIM_PWM_Start+0x9e>
 8108746:	683b      	ldr	r3, [r7, #0]
 8108748:	2b10      	cmp	r3, #16
 810874a:	d109      	bne.n	8108760 <HAL_TIM_PWM_Start+0x8c>
 810874c:	687b      	ldr	r3, [r7, #4]
 810874e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8108752:	b2db      	uxtb	r3, r3
 8108754:	2b01      	cmp	r3, #1
 8108756:	bf14      	ite	ne
 8108758:	2301      	movne	r3, #1
 810875a:	2300      	moveq	r3, #0
 810875c:	b2db      	uxtb	r3, r3
 810875e:	e008      	b.n	8108772 <HAL_TIM_PWM_Start+0x9e>
 8108760:	687b      	ldr	r3, [r7, #4]
 8108762:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8108766:	b2db      	uxtb	r3, r3
 8108768:	2b01      	cmp	r3, #1
 810876a:	bf14      	ite	ne
 810876c:	2301      	movne	r3, #1
 810876e:	2300      	moveq	r3, #0
 8108770:	b2db      	uxtb	r3, r3
 8108772:	2b00      	cmp	r3, #0
 8108774:	d001      	beq.n	810877a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8108776:	2301      	movs	r3, #1
 8108778:	e0a1      	b.n	81088be <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810877a:	683b      	ldr	r3, [r7, #0]
 810877c:	2b00      	cmp	r3, #0
 810877e:	d104      	bne.n	810878a <HAL_TIM_PWM_Start+0xb6>
 8108780:	687b      	ldr	r3, [r7, #4]
 8108782:	2202      	movs	r2, #2
 8108784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8108788:	e023      	b.n	81087d2 <HAL_TIM_PWM_Start+0xfe>
 810878a:	683b      	ldr	r3, [r7, #0]
 810878c:	2b04      	cmp	r3, #4
 810878e:	d104      	bne.n	810879a <HAL_TIM_PWM_Start+0xc6>
 8108790:	687b      	ldr	r3, [r7, #4]
 8108792:	2202      	movs	r2, #2
 8108794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8108798:	e01b      	b.n	81087d2 <HAL_TIM_PWM_Start+0xfe>
 810879a:	683b      	ldr	r3, [r7, #0]
 810879c:	2b08      	cmp	r3, #8
 810879e:	d104      	bne.n	81087aa <HAL_TIM_PWM_Start+0xd6>
 81087a0:	687b      	ldr	r3, [r7, #4]
 81087a2:	2202      	movs	r2, #2
 81087a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81087a8:	e013      	b.n	81087d2 <HAL_TIM_PWM_Start+0xfe>
 81087aa:	683b      	ldr	r3, [r7, #0]
 81087ac:	2b0c      	cmp	r3, #12
 81087ae:	d104      	bne.n	81087ba <HAL_TIM_PWM_Start+0xe6>
 81087b0:	687b      	ldr	r3, [r7, #4]
 81087b2:	2202      	movs	r2, #2
 81087b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81087b8:	e00b      	b.n	81087d2 <HAL_TIM_PWM_Start+0xfe>
 81087ba:	683b      	ldr	r3, [r7, #0]
 81087bc:	2b10      	cmp	r3, #16
 81087be:	d104      	bne.n	81087ca <HAL_TIM_PWM_Start+0xf6>
 81087c0:	687b      	ldr	r3, [r7, #4]
 81087c2:	2202      	movs	r2, #2
 81087c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81087c8:	e003      	b.n	81087d2 <HAL_TIM_PWM_Start+0xfe>
 81087ca:	687b      	ldr	r3, [r7, #4]
 81087cc:	2202      	movs	r2, #2
 81087ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 81087d2:	687b      	ldr	r3, [r7, #4]
 81087d4:	681b      	ldr	r3, [r3, #0]
 81087d6:	2201      	movs	r2, #1
 81087d8:	6839      	ldr	r1, [r7, #0]
 81087da:	4618      	mov	r0, r3
 81087dc:	f001 f88e 	bl	81098fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 81087e0:	687b      	ldr	r3, [r7, #4]
 81087e2:	681b      	ldr	r3, [r3, #0]
 81087e4:	4a38      	ldr	r2, [pc, #224]	; (81088c8 <HAL_TIM_PWM_Start+0x1f4>)
 81087e6:	4293      	cmp	r3, r2
 81087e8:	d013      	beq.n	8108812 <HAL_TIM_PWM_Start+0x13e>
 81087ea:	687b      	ldr	r3, [r7, #4]
 81087ec:	681b      	ldr	r3, [r3, #0]
 81087ee:	4a37      	ldr	r2, [pc, #220]	; (81088cc <HAL_TIM_PWM_Start+0x1f8>)
 81087f0:	4293      	cmp	r3, r2
 81087f2:	d00e      	beq.n	8108812 <HAL_TIM_PWM_Start+0x13e>
 81087f4:	687b      	ldr	r3, [r7, #4]
 81087f6:	681b      	ldr	r3, [r3, #0]
 81087f8:	4a35      	ldr	r2, [pc, #212]	; (81088d0 <HAL_TIM_PWM_Start+0x1fc>)
 81087fa:	4293      	cmp	r3, r2
 81087fc:	d009      	beq.n	8108812 <HAL_TIM_PWM_Start+0x13e>
 81087fe:	687b      	ldr	r3, [r7, #4]
 8108800:	681b      	ldr	r3, [r3, #0]
 8108802:	4a34      	ldr	r2, [pc, #208]	; (81088d4 <HAL_TIM_PWM_Start+0x200>)
 8108804:	4293      	cmp	r3, r2
 8108806:	d004      	beq.n	8108812 <HAL_TIM_PWM_Start+0x13e>
 8108808:	687b      	ldr	r3, [r7, #4]
 810880a:	681b      	ldr	r3, [r3, #0]
 810880c:	4a32      	ldr	r2, [pc, #200]	; (81088d8 <HAL_TIM_PWM_Start+0x204>)
 810880e:	4293      	cmp	r3, r2
 8108810:	d101      	bne.n	8108816 <HAL_TIM_PWM_Start+0x142>
 8108812:	2301      	movs	r3, #1
 8108814:	e000      	b.n	8108818 <HAL_TIM_PWM_Start+0x144>
 8108816:	2300      	movs	r3, #0
 8108818:	2b00      	cmp	r3, #0
 810881a:	d007      	beq.n	810882c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 810881c:	687b      	ldr	r3, [r7, #4]
 810881e:	681b      	ldr	r3, [r3, #0]
 8108820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108822:	687b      	ldr	r3, [r7, #4]
 8108824:	681b      	ldr	r3, [r3, #0]
 8108826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810882a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810882c:	687b      	ldr	r3, [r7, #4]
 810882e:	681b      	ldr	r3, [r3, #0]
 8108830:	4a25      	ldr	r2, [pc, #148]	; (81088c8 <HAL_TIM_PWM_Start+0x1f4>)
 8108832:	4293      	cmp	r3, r2
 8108834:	d022      	beq.n	810887c <HAL_TIM_PWM_Start+0x1a8>
 8108836:	687b      	ldr	r3, [r7, #4]
 8108838:	681b      	ldr	r3, [r3, #0]
 810883a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810883e:	d01d      	beq.n	810887c <HAL_TIM_PWM_Start+0x1a8>
 8108840:	687b      	ldr	r3, [r7, #4]
 8108842:	681b      	ldr	r3, [r3, #0]
 8108844:	4a25      	ldr	r2, [pc, #148]	; (81088dc <HAL_TIM_PWM_Start+0x208>)
 8108846:	4293      	cmp	r3, r2
 8108848:	d018      	beq.n	810887c <HAL_TIM_PWM_Start+0x1a8>
 810884a:	687b      	ldr	r3, [r7, #4]
 810884c:	681b      	ldr	r3, [r3, #0]
 810884e:	4a24      	ldr	r2, [pc, #144]	; (81088e0 <HAL_TIM_PWM_Start+0x20c>)
 8108850:	4293      	cmp	r3, r2
 8108852:	d013      	beq.n	810887c <HAL_TIM_PWM_Start+0x1a8>
 8108854:	687b      	ldr	r3, [r7, #4]
 8108856:	681b      	ldr	r3, [r3, #0]
 8108858:	4a22      	ldr	r2, [pc, #136]	; (81088e4 <HAL_TIM_PWM_Start+0x210>)
 810885a:	4293      	cmp	r3, r2
 810885c:	d00e      	beq.n	810887c <HAL_TIM_PWM_Start+0x1a8>
 810885e:	687b      	ldr	r3, [r7, #4]
 8108860:	681b      	ldr	r3, [r3, #0]
 8108862:	4a1a      	ldr	r2, [pc, #104]	; (81088cc <HAL_TIM_PWM_Start+0x1f8>)
 8108864:	4293      	cmp	r3, r2
 8108866:	d009      	beq.n	810887c <HAL_TIM_PWM_Start+0x1a8>
 8108868:	687b      	ldr	r3, [r7, #4]
 810886a:	681b      	ldr	r3, [r3, #0]
 810886c:	4a1e      	ldr	r2, [pc, #120]	; (81088e8 <HAL_TIM_PWM_Start+0x214>)
 810886e:	4293      	cmp	r3, r2
 8108870:	d004      	beq.n	810887c <HAL_TIM_PWM_Start+0x1a8>
 8108872:	687b      	ldr	r3, [r7, #4]
 8108874:	681b      	ldr	r3, [r3, #0]
 8108876:	4a16      	ldr	r2, [pc, #88]	; (81088d0 <HAL_TIM_PWM_Start+0x1fc>)
 8108878:	4293      	cmp	r3, r2
 810887a:	d115      	bne.n	81088a8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810887c:	687b      	ldr	r3, [r7, #4]
 810887e:	681b      	ldr	r3, [r3, #0]
 8108880:	689a      	ldr	r2, [r3, #8]
 8108882:	4b1a      	ldr	r3, [pc, #104]	; (81088ec <HAL_TIM_PWM_Start+0x218>)
 8108884:	4013      	ands	r3, r2
 8108886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8108888:	68fb      	ldr	r3, [r7, #12]
 810888a:	2b06      	cmp	r3, #6
 810888c:	d015      	beq.n	81088ba <HAL_TIM_PWM_Start+0x1e6>
 810888e:	68fb      	ldr	r3, [r7, #12]
 8108890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108894:	d011      	beq.n	81088ba <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8108896:	687b      	ldr	r3, [r7, #4]
 8108898:	681b      	ldr	r3, [r3, #0]
 810889a:	681a      	ldr	r2, [r3, #0]
 810889c:	687b      	ldr	r3, [r7, #4]
 810889e:	681b      	ldr	r3, [r3, #0]
 81088a0:	f042 0201 	orr.w	r2, r2, #1
 81088a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81088a6:	e008      	b.n	81088ba <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81088a8:	687b      	ldr	r3, [r7, #4]
 81088aa:	681b      	ldr	r3, [r3, #0]
 81088ac:	681a      	ldr	r2, [r3, #0]
 81088ae:	687b      	ldr	r3, [r7, #4]
 81088b0:	681b      	ldr	r3, [r3, #0]
 81088b2:	f042 0201 	orr.w	r2, r2, #1
 81088b6:	601a      	str	r2, [r3, #0]
 81088b8:	e000      	b.n	81088bc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81088ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81088bc:	2300      	movs	r3, #0
}
 81088be:	4618      	mov	r0, r3
 81088c0:	3710      	adds	r7, #16
 81088c2:	46bd      	mov	sp, r7
 81088c4:	bd80      	pop	{r7, pc}
 81088c6:	bf00      	nop
 81088c8:	40010000 	.word	0x40010000
 81088cc:	40010400 	.word	0x40010400
 81088d0:	40014000 	.word	0x40014000
 81088d4:	40014400 	.word	0x40014400
 81088d8:	40014800 	.word	0x40014800
 81088dc:	40000400 	.word	0x40000400
 81088e0:	40000800 	.word	0x40000800
 81088e4:	40000c00 	.word	0x40000c00
 81088e8:	40001800 	.word	0x40001800
 81088ec:	00010007 	.word	0x00010007

081088f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 81088f0:	b580      	push	{r7, lr}
 81088f2:	b086      	sub	sp, #24
 81088f4:	af00      	add	r7, sp, #0
 81088f6:	6078      	str	r0, [r7, #4]
 81088f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 81088fa:	687b      	ldr	r3, [r7, #4]
 81088fc:	2b00      	cmp	r3, #0
 81088fe:	d101      	bne.n	8108904 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8108900:	2301      	movs	r3, #1
 8108902:	e097      	b.n	8108a34 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8108904:	687b      	ldr	r3, [r7, #4]
 8108906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810890a:	b2db      	uxtb	r3, r3
 810890c:	2b00      	cmp	r3, #0
 810890e:	d106      	bne.n	810891e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8108910:	687b      	ldr	r3, [r7, #4]
 8108912:	2200      	movs	r2, #0
 8108914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8108918:	6878      	ldr	r0, [r7, #4]
 810891a:	f7fa f8fd 	bl	8102b18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810891e:	687b      	ldr	r3, [r7, #4]
 8108920:	2202      	movs	r2, #2
 8108922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8108926:	687b      	ldr	r3, [r7, #4]
 8108928:	681b      	ldr	r3, [r3, #0]
 810892a:	689b      	ldr	r3, [r3, #8]
 810892c:	687a      	ldr	r2, [r7, #4]
 810892e:	6812      	ldr	r2, [r2, #0]
 8108930:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8108934:	f023 0307 	bic.w	r3, r3, #7
 8108938:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810893a:	687b      	ldr	r3, [r7, #4]
 810893c:	681a      	ldr	r2, [r3, #0]
 810893e:	687b      	ldr	r3, [r7, #4]
 8108940:	3304      	adds	r3, #4
 8108942:	4619      	mov	r1, r3
 8108944:	4610      	mov	r0, r2
 8108946:	f000 fbcd 	bl	81090e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810894a:	687b      	ldr	r3, [r7, #4]
 810894c:	681b      	ldr	r3, [r3, #0]
 810894e:	689b      	ldr	r3, [r3, #8]
 8108950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8108952:	687b      	ldr	r3, [r7, #4]
 8108954:	681b      	ldr	r3, [r3, #0]
 8108956:	699b      	ldr	r3, [r3, #24]
 8108958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 810895a:	687b      	ldr	r3, [r7, #4]
 810895c:	681b      	ldr	r3, [r3, #0]
 810895e:	6a1b      	ldr	r3, [r3, #32]
 8108960:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8108962:	683b      	ldr	r3, [r7, #0]
 8108964:	681b      	ldr	r3, [r3, #0]
 8108966:	697a      	ldr	r2, [r7, #20]
 8108968:	4313      	orrs	r3, r2
 810896a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 810896c:	693b      	ldr	r3, [r7, #16]
 810896e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108972:	f023 0303 	bic.w	r3, r3, #3
 8108976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8108978:	683b      	ldr	r3, [r7, #0]
 810897a:	689a      	ldr	r2, [r3, #8]
 810897c:	683b      	ldr	r3, [r7, #0]
 810897e:	699b      	ldr	r3, [r3, #24]
 8108980:	021b      	lsls	r3, r3, #8
 8108982:	4313      	orrs	r3, r2
 8108984:	693a      	ldr	r2, [r7, #16]
 8108986:	4313      	orrs	r3, r2
 8108988:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 810898a:	693b      	ldr	r3, [r7, #16]
 810898c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8108990:	f023 030c 	bic.w	r3, r3, #12
 8108994:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8108996:	693b      	ldr	r3, [r7, #16]
 8108998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810899c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81089a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 81089a2:	683b      	ldr	r3, [r7, #0]
 81089a4:	68da      	ldr	r2, [r3, #12]
 81089a6:	683b      	ldr	r3, [r7, #0]
 81089a8:	69db      	ldr	r3, [r3, #28]
 81089aa:	021b      	lsls	r3, r3, #8
 81089ac:	4313      	orrs	r3, r2
 81089ae:	693a      	ldr	r2, [r7, #16]
 81089b0:	4313      	orrs	r3, r2
 81089b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 81089b4:	683b      	ldr	r3, [r7, #0]
 81089b6:	691b      	ldr	r3, [r3, #16]
 81089b8:	011a      	lsls	r2, r3, #4
 81089ba:	683b      	ldr	r3, [r7, #0]
 81089bc:	6a1b      	ldr	r3, [r3, #32]
 81089be:	031b      	lsls	r3, r3, #12
 81089c0:	4313      	orrs	r3, r2
 81089c2:	693a      	ldr	r2, [r7, #16]
 81089c4:	4313      	orrs	r3, r2
 81089c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 81089c8:	68fb      	ldr	r3, [r7, #12]
 81089ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 81089ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 81089d0:	68fb      	ldr	r3, [r7, #12]
 81089d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 81089d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 81089d8:	683b      	ldr	r3, [r7, #0]
 81089da:	685a      	ldr	r2, [r3, #4]
 81089dc:	683b      	ldr	r3, [r7, #0]
 81089de:	695b      	ldr	r3, [r3, #20]
 81089e0:	011b      	lsls	r3, r3, #4
 81089e2:	4313      	orrs	r3, r2
 81089e4:	68fa      	ldr	r2, [r7, #12]
 81089e6:	4313      	orrs	r3, r2
 81089e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 81089ea:	687b      	ldr	r3, [r7, #4]
 81089ec:	681b      	ldr	r3, [r3, #0]
 81089ee:	697a      	ldr	r2, [r7, #20]
 81089f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 81089f2:	687b      	ldr	r3, [r7, #4]
 81089f4:	681b      	ldr	r3, [r3, #0]
 81089f6:	693a      	ldr	r2, [r7, #16]
 81089f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 81089fa:	687b      	ldr	r3, [r7, #4]
 81089fc:	681b      	ldr	r3, [r3, #0]
 81089fe:	68fa      	ldr	r2, [r7, #12]
 8108a00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8108a02:	687b      	ldr	r3, [r7, #4]
 8108a04:	2201      	movs	r2, #1
 8108a06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8108a0a:	687b      	ldr	r3, [r7, #4]
 8108a0c:	2201      	movs	r2, #1
 8108a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8108a12:	687b      	ldr	r3, [r7, #4]
 8108a14:	2201      	movs	r2, #1
 8108a16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8108a1a:	687b      	ldr	r3, [r7, #4]
 8108a1c:	2201      	movs	r2, #1
 8108a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8108a22:	687b      	ldr	r3, [r7, #4]
 8108a24:	2201      	movs	r2, #1
 8108a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8108a2a:	687b      	ldr	r3, [r7, #4]
 8108a2c:	2201      	movs	r2, #1
 8108a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8108a32:	2300      	movs	r3, #0
}
 8108a34:	4618      	mov	r0, r3
 8108a36:	3718      	adds	r7, #24
 8108a38:	46bd      	mov	sp, r7
 8108a3a:	bd80      	pop	{r7, pc}

08108a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8108a3c:	b580      	push	{r7, lr}
 8108a3e:	b082      	sub	sp, #8
 8108a40:	af00      	add	r7, sp, #0
 8108a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8108a44:	687b      	ldr	r3, [r7, #4]
 8108a46:	681b      	ldr	r3, [r3, #0]
 8108a48:	691b      	ldr	r3, [r3, #16]
 8108a4a:	f003 0302 	and.w	r3, r3, #2
 8108a4e:	2b02      	cmp	r3, #2
 8108a50:	d122      	bne.n	8108a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8108a52:	687b      	ldr	r3, [r7, #4]
 8108a54:	681b      	ldr	r3, [r3, #0]
 8108a56:	68db      	ldr	r3, [r3, #12]
 8108a58:	f003 0302 	and.w	r3, r3, #2
 8108a5c:	2b02      	cmp	r3, #2
 8108a5e:	d11b      	bne.n	8108a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8108a60:	687b      	ldr	r3, [r7, #4]
 8108a62:	681b      	ldr	r3, [r3, #0]
 8108a64:	f06f 0202 	mvn.w	r2, #2
 8108a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8108a6a:	687b      	ldr	r3, [r7, #4]
 8108a6c:	2201      	movs	r2, #1
 8108a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8108a70:	687b      	ldr	r3, [r7, #4]
 8108a72:	681b      	ldr	r3, [r3, #0]
 8108a74:	699b      	ldr	r3, [r3, #24]
 8108a76:	f003 0303 	and.w	r3, r3, #3
 8108a7a:	2b00      	cmp	r3, #0
 8108a7c:	d003      	beq.n	8108a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8108a7e:	6878      	ldr	r0, [r7, #4]
 8108a80:	f000 fb12 	bl	81090a8 <HAL_TIM_IC_CaptureCallback>
 8108a84:	e005      	b.n	8108a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8108a86:	6878      	ldr	r0, [r7, #4]
 8108a88:	f000 fb04 	bl	8109094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108a8c:	6878      	ldr	r0, [r7, #4]
 8108a8e:	f000 fb15 	bl	81090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108a92:	687b      	ldr	r3, [r7, #4]
 8108a94:	2200      	movs	r2, #0
 8108a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8108a98:	687b      	ldr	r3, [r7, #4]
 8108a9a:	681b      	ldr	r3, [r3, #0]
 8108a9c:	691b      	ldr	r3, [r3, #16]
 8108a9e:	f003 0304 	and.w	r3, r3, #4
 8108aa2:	2b04      	cmp	r3, #4
 8108aa4:	d122      	bne.n	8108aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8108aa6:	687b      	ldr	r3, [r7, #4]
 8108aa8:	681b      	ldr	r3, [r3, #0]
 8108aaa:	68db      	ldr	r3, [r3, #12]
 8108aac:	f003 0304 	and.w	r3, r3, #4
 8108ab0:	2b04      	cmp	r3, #4
 8108ab2:	d11b      	bne.n	8108aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8108ab4:	687b      	ldr	r3, [r7, #4]
 8108ab6:	681b      	ldr	r3, [r3, #0]
 8108ab8:	f06f 0204 	mvn.w	r2, #4
 8108abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8108abe:	687b      	ldr	r3, [r7, #4]
 8108ac0:	2202      	movs	r2, #2
 8108ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8108ac4:	687b      	ldr	r3, [r7, #4]
 8108ac6:	681b      	ldr	r3, [r3, #0]
 8108ac8:	699b      	ldr	r3, [r3, #24]
 8108aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108ace:	2b00      	cmp	r3, #0
 8108ad0:	d003      	beq.n	8108ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108ad2:	6878      	ldr	r0, [r7, #4]
 8108ad4:	f000 fae8 	bl	81090a8 <HAL_TIM_IC_CaptureCallback>
 8108ad8:	e005      	b.n	8108ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108ada:	6878      	ldr	r0, [r7, #4]
 8108adc:	f000 fada 	bl	8109094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108ae0:	6878      	ldr	r0, [r7, #4]
 8108ae2:	f000 faeb 	bl	81090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108ae6:	687b      	ldr	r3, [r7, #4]
 8108ae8:	2200      	movs	r2, #0
 8108aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8108aec:	687b      	ldr	r3, [r7, #4]
 8108aee:	681b      	ldr	r3, [r3, #0]
 8108af0:	691b      	ldr	r3, [r3, #16]
 8108af2:	f003 0308 	and.w	r3, r3, #8
 8108af6:	2b08      	cmp	r3, #8
 8108af8:	d122      	bne.n	8108b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8108afa:	687b      	ldr	r3, [r7, #4]
 8108afc:	681b      	ldr	r3, [r3, #0]
 8108afe:	68db      	ldr	r3, [r3, #12]
 8108b00:	f003 0308 	and.w	r3, r3, #8
 8108b04:	2b08      	cmp	r3, #8
 8108b06:	d11b      	bne.n	8108b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8108b08:	687b      	ldr	r3, [r7, #4]
 8108b0a:	681b      	ldr	r3, [r3, #0]
 8108b0c:	f06f 0208 	mvn.w	r2, #8
 8108b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8108b12:	687b      	ldr	r3, [r7, #4]
 8108b14:	2204      	movs	r2, #4
 8108b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8108b18:	687b      	ldr	r3, [r7, #4]
 8108b1a:	681b      	ldr	r3, [r3, #0]
 8108b1c:	69db      	ldr	r3, [r3, #28]
 8108b1e:	f003 0303 	and.w	r3, r3, #3
 8108b22:	2b00      	cmp	r3, #0
 8108b24:	d003      	beq.n	8108b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108b26:	6878      	ldr	r0, [r7, #4]
 8108b28:	f000 fabe 	bl	81090a8 <HAL_TIM_IC_CaptureCallback>
 8108b2c:	e005      	b.n	8108b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108b2e:	6878      	ldr	r0, [r7, #4]
 8108b30:	f000 fab0 	bl	8109094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108b34:	6878      	ldr	r0, [r7, #4]
 8108b36:	f000 fac1 	bl	81090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108b3a:	687b      	ldr	r3, [r7, #4]
 8108b3c:	2200      	movs	r2, #0
 8108b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8108b40:	687b      	ldr	r3, [r7, #4]
 8108b42:	681b      	ldr	r3, [r3, #0]
 8108b44:	691b      	ldr	r3, [r3, #16]
 8108b46:	f003 0310 	and.w	r3, r3, #16
 8108b4a:	2b10      	cmp	r3, #16
 8108b4c:	d122      	bne.n	8108b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8108b4e:	687b      	ldr	r3, [r7, #4]
 8108b50:	681b      	ldr	r3, [r3, #0]
 8108b52:	68db      	ldr	r3, [r3, #12]
 8108b54:	f003 0310 	and.w	r3, r3, #16
 8108b58:	2b10      	cmp	r3, #16
 8108b5a:	d11b      	bne.n	8108b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8108b5c:	687b      	ldr	r3, [r7, #4]
 8108b5e:	681b      	ldr	r3, [r3, #0]
 8108b60:	f06f 0210 	mvn.w	r2, #16
 8108b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8108b66:	687b      	ldr	r3, [r7, #4]
 8108b68:	2208      	movs	r2, #8
 8108b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8108b6c:	687b      	ldr	r3, [r7, #4]
 8108b6e:	681b      	ldr	r3, [r3, #0]
 8108b70:	69db      	ldr	r3, [r3, #28]
 8108b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108b76:	2b00      	cmp	r3, #0
 8108b78:	d003      	beq.n	8108b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108b7a:	6878      	ldr	r0, [r7, #4]
 8108b7c:	f000 fa94 	bl	81090a8 <HAL_TIM_IC_CaptureCallback>
 8108b80:	e005      	b.n	8108b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108b82:	6878      	ldr	r0, [r7, #4]
 8108b84:	f000 fa86 	bl	8109094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108b88:	6878      	ldr	r0, [r7, #4]
 8108b8a:	f000 fa97 	bl	81090bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108b8e:	687b      	ldr	r3, [r7, #4]
 8108b90:	2200      	movs	r2, #0
 8108b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8108b94:	687b      	ldr	r3, [r7, #4]
 8108b96:	681b      	ldr	r3, [r3, #0]
 8108b98:	691b      	ldr	r3, [r3, #16]
 8108b9a:	f003 0301 	and.w	r3, r3, #1
 8108b9e:	2b01      	cmp	r3, #1
 8108ba0:	d10e      	bne.n	8108bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8108ba2:	687b      	ldr	r3, [r7, #4]
 8108ba4:	681b      	ldr	r3, [r3, #0]
 8108ba6:	68db      	ldr	r3, [r3, #12]
 8108ba8:	f003 0301 	and.w	r3, r3, #1
 8108bac:	2b01      	cmp	r3, #1
 8108bae:	d107      	bne.n	8108bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8108bb0:	687b      	ldr	r3, [r7, #4]
 8108bb2:	681b      	ldr	r3, [r3, #0]
 8108bb4:	f06f 0201 	mvn.w	r2, #1
 8108bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8108bba:	6878      	ldr	r0, [r7, #4]
 8108bbc:	f7f9 fda6 	bl	810270c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8108bc0:	687b      	ldr	r3, [r7, #4]
 8108bc2:	681b      	ldr	r3, [r3, #0]
 8108bc4:	691b      	ldr	r3, [r3, #16]
 8108bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108bca:	2b80      	cmp	r3, #128	; 0x80
 8108bcc:	d10e      	bne.n	8108bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8108bce:	687b      	ldr	r3, [r7, #4]
 8108bd0:	681b      	ldr	r3, [r3, #0]
 8108bd2:	68db      	ldr	r3, [r3, #12]
 8108bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108bd8:	2b80      	cmp	r3, #128	; 0x80
 8108bda:	d107      	bne.n	8108bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8108bdc:	687b      	ldr	r3, [r7, #4]
 8108bde:	681b      	ldr	r3, [r3, #0]
 8108be0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8108be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8108be6:	6878      	ldr	r0, [r7, #4]
 8108be8:	f000 ffc4 	bl	8109b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8108bec:	687b      	ldr	r3, [r7, #4]
 8108bee:	681b      	ldr	r3, [r3, #0]
 8108bf0:	691b      	ldr	r3, [r3, #16]
 8108bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108bfa:	d10e      	bne.n	8108c1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8108bfc:	687b      	ldr	r3, [r7, #4]
 8108bfe:	681b      	ldr	r3, [r3, #0]
 8108c00:	68db      	ldr	r3, [r3, #12]
 8108c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108c06:	2b80      	cmp	r3, #128	; 0x80
 8108c08:	d107      	bne.n	8108c1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8108c0a:	687b      	ldr	r3, [r7, #4]
 8108c0c:	681b      	ldr	r3, [r3, #0]
 8108c0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8108c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8108c14:	6878      	ldr	r0, [r7, #4]
 8108c16:	f000 ffb7 	bl	8109b88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8108c1a:	687b      	ldr	r3, [r7, #4]
 8108c1c:	681b      	ldr	r3, [r3, #0]
 8108c1e:	691b      	ldr	r3, [r3, #16]
 8108c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108c24:	2b40      	cmp	r3, #64	; 0x40
 8108c26:	d10e      	bne.n	8108c46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8108c28:	687b      	ldr	r3, [r7, #4]
 8108c2a:	681b      	ldr	r3, [r3, #0]
 8108c2c:	68db      	ldr	r3, [r3, #12]
 8108c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108c32:	2b40      	cmp	r3, #64	; 0x40
 8108c34:	d107      	bne.n	8108c46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8108c36:	687b      	ldr	r3, [r7, #4]
 8108c38:	681b      	ldr	r3, [r3, #0]
 8108c3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8108c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8108c40:	6878      	ldr	r0, [r7, #4]
 8108c42:	f000 fa45 	bl	81090d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8108c46:	687b      	ldr	r3, [r7, #4]
 8108c48:	681b      	ldr	r3, [r3, #0]
 8108c4a:	691b      	ldr	r3, [r3, #16]
 8108c4c:	f003 0320 	and.w	r3, r3, #32
 8108c50:	2b20      	cmp	r3, #32
 8108c52:	d10e      	bne.n	8108c72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8108c54:	687b      	ldr	r3, [r7, #4]
 8108c56:	681b      	ldr	r3, [r3, #0]
 8108c58:	68db      	ldr	r3, [r3, #12]
 8108c5a:	f003 0320 	and.w	r3, r3, #32
 8108c5e:	2b20      	cmp	r3, #32
 8108c60:	d107      	bne.n	8108c72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8108c62:	687b      	ldr	r3, [r7, #4]
 8108c64:	681b      	ldr	r3, [r3, #0]
 8108c66:	f06f 0220 	mvn.w	r2, #32
 8108c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8108c6c:	6878      	ldr	r0, [r7, #4]
 8108c6e:	f000 ff77 	bl	8109b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8108c72:	bf00      	nop
 8108c74:	3708      	adds	r7, #8
 8108c76:	46bd      	mov	sp, r7
 8108c78:	bd80      	pop	{r7, pc}
	...

08108c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8108c7c:	b580      	push	{r7, lr}
 8108c7e:	b086      	sub	sp, #24
 8108c80:	af00      	add	r7, sp, #0
 8108c82:	60f8      	str	r0, [r7, #12]
 8108c84:	60b9      	str	r1, [r7, #8]
 8108c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8108c88:	2300      	movs	r3, #0
 8108c8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8108c8c:	68fb      	ldr	r3, [r7, #12]
 8108c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8108c92:	2b01      	cmp	r3, #1
 8108c94:	d101      	bne.n	8108c9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8108c96:	2302      	movs	r3, #2
 8108c98:	e0ff      	b.n	8108e9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8108c9a:	68fb      	ldr	r3, [r7, #12]
 8108c9c:	2201      	movs	r2, #1
 8108c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8108ca2:	687b      	ldr	r3, [r7, #4]
 8108ca4:	2b14      	cmp	r3, #20
 8108ca6:	f200 80f0 	bhi.w	8108e8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8108caa:	a201      	add	r2, pc, #4	; (adr r2, 8108cb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8108cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108cb0:	08108d05 	.word	0x08108d05
 8108cb4:	08108e8b 	.word	0x08108e8b
 8108cb8:	08108e8b 	.word	0x08108e8b
 8108cbc:	08108e8b 	.word	0x08108e8b
 8108cc0:	08108d45 	.word	0x08108d45
 8108cc4:	08108e8b 	.word	0x08108e8b
 8108cc8:	08108e8b 	.word	0x08108e8b
 8108ccc:	08108e8b 	.word	0x08108e8b
 8108cd0:	08108d87 	.word	0x08108d87
 8108cd4:	08108e8b 	.word	0x08108e8b
 8108cd8:	08108e8b 	.word	0x08108e8b
 8108cdc:	08108e8b 	.word	0x08108e8b
 8108ce0:	08108dc7 	.word	0x08108dc7
 8108ce4:	08108e8b 	.word	0x08108e8b
 8108ce8:	08108e8b 	.word	0x08108e8b
 8108cec:	08108e8b 	.word	0x08108e8b
 8108cf0:	08108e09 	.word	0x08108e09
 8108cf4:	08108e8b 	.word	0x08108e8b
 8108cf8:	08108e8b 	.word	0x08108e8b
 8108cfc:	08108e8b 	.word	0x08108e8b
 8108d00:	08108e49 	.word	0x08108e49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8108d04:	68fb      	ldr	r3, [r7, #12]
 8108d06:	681b      	ldr	r3, [r3, #0]
 8108d08:	68b9      	ldr	r1, [r7, #8]
 8108d0a:	4618      	mov	r0, r3
 8108d0c:	f000 fa84 	bl	8109218 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8108d10:	68fb      	ldr	r3, [r7, #12]
 8108d12:	681b      	ldr	r3, [r3, #0]
 8108d14:	699a      	ldr	r2, [r3, #24]
 8108d16:	68fb      	ldr	r3, [r7, #12]
 8108d18:	681b      	ldr	r3, [r3, #0]
 8108d1a:	f042 0208 	orr.w	r2, r2, #8
 8108d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8108d20:	68fb      	ldr	r3, [r7, #12]
 8108d22:	681b      	ldr	r3, [r3, #0]
 8108d24:	699a      	ldr	r2, [r3, #24]
 8108d26:	68fb      	ldr	r3, [r7, #12]
 8108d28:	681b      	ldr	r3, [r3, #0]
 8108d2a:	f022 0204 	bic.w	r2, r2, #4
 8108d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8108d30:	68fb      	ldr	r3, [r7, #12]
 8108d32:	681b      	ldr	r3, [r3, #0]
 8108d34:	6999      	ldr	r1, [r3, #24]
 8108d36:	68bb      	ldr	r3, [r7, #8]
 8108d38:	691a      	ldr	r2, [r3, #16]
 8108d3a:	68fb      	ldr	r3, [r7, #12]
 8108d3c:	681b      	ldr	r3, [r3, #0]
 8108d3e:	430a      	orrs	r2, r1
 8108d40:	619a      	str	r2, [r3, #24]
      break;
 8108d42:	e0a5      	b.n	8108e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8108d44:	68fb      	ldr	r3, [r7, #12]
 8108d46:	681b      	ldr	r3, [r3, #0]
 8108d48:	68b9      	ldr	r1, [r7, #8]
 8108d4a:	4618      	mov	r0, r3
 8108d4c:	f000 faf4 	bl	8109338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8108d50:	68fb      	ldr	r3, [r7, #12]
 8108d52:	681b      	ldr	r3, [r3, #0]
 8108d54:	699a      	ldr	r2, [r3, #24]
 8108d56:	68fb      	ldr	r3, [r7, #12]
 8108d58:	681b      	ldr	r3, [r3, #0]
 8108d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8108d60:	68fb      	ldr	r3, [r7, #12]
 8108d62:	681b      	ldr	r3, [r3, #0]
 8108d64:	699a      	ldr	r2, [r3, #24]
 8108d66:	68fb      	ldr	r3, [r7, #12]
 8108d68:	681b      	ldr	r3, [r3, #0]
 8108d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8108d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8108d70:	68fb      	ldr	r3, [r7, #12]
 8108d72:	681b      	ldr	r3, [r3, #0]
 8108d74:	6999      	ldr	r1, [r3, #24]
 8108d76:	68bb      	ldr	r3, [r7, #8]
 8108d78:	691b      	ldr	r3, [r3, #16]
 8108d7a:	021a      	lsls	r2, r3, #8
 8108d7c:	68fb      	ldr	r3, [r7, #12]
 8108d7e:	681b      	ldr	r3, [r3, #0]
 8108d80:	430a      	orrs	r2, r1
 8108d82:	619a      	str	r2, [r3, #24]
      break;
 8108d84:	e084      	b.n	8108e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8108d86:	68fb      	ldr	r3, [r7, #12]
 8108d88:	681b      	ldr	r3, [r3, #0]
 8108d8a:	68b9      	ldr	r1, [r7, #8]
 8108d8c:	4618      	mov	r0, r3
 8108d8e:	f000 fb5d 	bl	810944c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8108d92:	68fb      	ldr	r3, [r7, #12]
 8108d94:	681b      	ldr	r3, [r3, #0]
 8108d96:	69da      	ldr	r2, [r3, #28]
 8108d98:	68fb      	ldr	r3, [r7, #12]
 8108d9a:	681b      	ldr	r3, [r3, #0]
 8108d9c:	f042 0208 	orr.w	r2, r2, #8
 8108da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8108da2:	68fb      	ldr	r3, [r7, #12]
 8108da4:	681b      	ldr	r3, [r3, #0]
 8108da6:	69da      	ldr	r2, [r3, #28]
 8108da8:	68fb      	ldr	r3, [r7, #12]
 8108daa:	681b      	ldr	r3, [r3, #0]
 8108dac:	f022 0204 	bic.w	r2, r2, #4
 8108db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8108db2:	68fb      	ldr	r3, [r7, #12]
 8108db4:	681b      	ldr	r3, [r3, #0]
 8108db6:	69d9      	ldr	r1, [r3, #28]
 8108db8:	68bb      	ldr	r3, [r7, #8]
 8108dba:	691a      	ldr	r2, [r3, #16]
 8108dbc:	68fb      	ldr	r3, [r7, #12]
 8108dbe:	681b      	ldr	r3, [r3, #0]
 8108dc0:	430a      	orrs	r2, r1
 8108dc2:	61da      	str	r2, [r3, #28]
      break;
 8108dc4:	e064      	b.n	8108e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8108dc6:	68fb      	ldr	r3, [r7, #12]
 8108dc8:	681b      	ldr	r3, [r3, #0]
 8108dca:	68b9      	ldr	r1, [r7, #8]
 8108dcc:	4618      	mov	r0, r3
 8108dce:	f000 fbc5 	bl	810955c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8108dd2:	68fb      	ldr	r3, [r7, #12]
 8108dd4:	681b      	ldr	r3, [r3, #0]
 8108dd6:	69da      	ldr	r2, [r3, #28]
 8108dd8:	68fb      	ldr	r3, [r7, #12]
 8108dda:	681b      	ldr	r3, [r3, #0]
 8108ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8108de2:	68fb      	ldr	r3, [r7, #12]
 8108de4:	681b      	ldr	r3, [r3, #0]
 8108de6:	69da      	ldr	r2, [r3, #28]
 8108de8:	68fb      	ldr	r3, [r7, #12]
 8108dea:	681b      	ldr	r3, [r3, #0]
 8108dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8108df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8108df2:	68fb      	ldr	r3, [r7, #12]
 8108df4:	681b      	ldr	r3, [r3, #0]
 8108df6:	69d9      	ldr	r1, [r3, #28]
 8108df8:	68bb      	ldr	r3, [r7, #8]
 8108dfa:	691b      	ldr	r3, [r3, #16]
 8108dfc:	021a      	lsls	r2, r3, #8
 8108dfe:	68fb      	ldr	r3, [r7, #12]
 8108e00:	681b      	ldr	r3, [r3, #0]
 8108e02:	430a      	orrs	r2, r1
 8108e04:	61da      	str	r2, [r3, #28]
      break;
 8108e06:	e043      	b.n	8108e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8108e08:	68fb      	ldr	r3, [r7, #12]
 8108e0a:	681b      	ldr	r3, [r3, #0]
 8108e0c:	68b9      	ldr	r1, [r7, #8]
 8108e0e:	4618      	mov	r0, r3
 8108e10:	f000 fc0e 	bl	8109630 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8108e14:	68fb      	ldr	r3, [r7, #12]
 8108e16:	681b      	ldr	r3, [r3, #0]
 8108e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108e1a:	68fb      	ldr	r3, [r7, #12]
 8108e1c:	681b      	ldr	r3, [r3, #0]
 8108e1e:	f042 0208 	orr.w	r2, r2, #8
 8108e22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8108e24:	68fb      	ldr	r3, [r7, #12]
 8108e26:	681b      	ldr	r3, [r3, #0]
 8108e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108e2a:	68fb      	ldr	r3, [r7, #12]
 8108e2c:	681b      	ldr	r3, [r3, #0]
 8108e2e:	f022 0204 	bic.w	r2, r2, #4
 8108e32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8108e34:	68fb      	ldr	r3, [r7, #12]
 8108e36:	681b      	ldr	r3, [r3, #0]
 8108e38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8108e3a:	68bb      	ldr	r3, [r7, #8]
 8108e3c:	691a      	ldr	r2, [r3, #16]
 8108e3e:	68fb      	ldr	r3, [r7, #12]
 8108e40:	681b      	ldr	r3, [r3, #0]
 8108e42:	430a      	orrs	r2, r1
 8108e44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8108e46:	e023      	b.n	8108e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8108e48:	68fb      	ldr	r3, [r7, #12]
 8108e4a:	681b      	ldr	r3, [r3, #0]
 8108e4c:	68b9      	ldr	r1, [r7, #8]
 8108e4e:	4618      	mov	r0, r3
 8108e50:	f000 fc52 	bl	81096f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8108e54:	68fb      	ldr	r3, [r7, #12]
 8108e56:	681b      	ldr	r3, [r3, #0]
 8108e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108e5a:	68fb      	ldr	r3, [r7, #12]
 8108e5c:	681b      	ldr	r3, [r3, #0]
 8108e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108e62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8108e64:	68fb      	ldr	r3, [r7, #12]
 8108e66:	681b      	ldr	r3, [r3, #0]
 8108e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108e6a:	68fb      	ldr	r3, [r7, #12]
 8108e6c:	681b      	ldr	r3, [r3, #0]
 8108e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8108e72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8108e74:	68fb      	ldr	r3, [r7, #12]
 8108e76:	681b      	ldr	r3, [r3, #0]
 8108e78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8108e7a:	68bb      	ldr	r3, [r7, #8]
 8108e7c:	691b      	ldr	r3, [r3, #16]
 8108e7e:	021a      	lsls	r2, r3, #8
 8108e80:	68fb      	ldr	r3, [r7, #12]
 8108e82:	681b      	ldr	r3, [r3, #0]
 8108e84:	430a      	orrs	r2, r1
 8108e86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8108e88:	e002      	b.n	8108e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8108e8a:	2301      	movs	r3, #1
 8108e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8108e8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8108e90:	68fb      	ldr	r3, [r7, #12]
 8108e92:	2200      	movs	r2, #0
 8108e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8108e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8108e9a:	4618      	mov	r0, r3
 8108e9c:	3718      	adds	r7, #24
 8108e9e:	46bd      	mov	sp, r7
 8108ea0:	bd80      	pop	{r7, pc}
 8108ea2:	bf00      	nop

08108ea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8108ea4:	b580      	push	{r7, lr}
 8108ea6:	b084      	sub	sp, #16
 8108ea8:	af00      	add	r7, sp, #0
 8108eaa:	6078      	str	r0, [r7, #4]
 8108eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8108eae:	2300      	movs	r3, #0
 8108eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8108eb2:	687b      	ldr	r3, [r7, #4]
 8108eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8108eb8:	2b01      	cmp	r3, #1
 8108eba:	d101      	bne.n	8108ec0 <HAL_TIM_ConfigClockSource+0x1c>
 8108ebc:	2302      	movs	r3, #2
 8108ebe:	e0de      	b.n	810907e <HAL_TIM_ConfigClockSource+0x1da>
 8108ec0:	687b      	ldr	r3, [r7, #4]
 8108ec2:	2201      	movs	r2, #1
 8108ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8108ec8:	687b      	ldr	r3, [r7, #4]
 8108eca:	2202      	movs	r2, #2
 8108ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8108ed0:	687b      	ldr	r3, [r7, #4]
 8108ed2:	681b      	ldr	r3, [r3, #0]
 8108ed4:	689b      	ldr	r3, [r3, #8]
 8108ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8108ed8:	68bb      	ldr	r3, [r7, #8]
 8108eda:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8108ede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8108ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8108ee4:	68bb      	ldr	r3, [r7, #8]
 8108ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8108eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8108eec:	687b      	ldr	r3, [r7, #4]
 8108eee:	681b      	ldr	r3, [r3, #0]
 8108ef0:	68ba      	ldr	r2, [r7, #8]
 8108ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8108ef4:	683b      	ldr	r3, [r7, #0]
 8108ef6:	681b      	ldr	r3, [r3, #0]
 8108ef8:	4a63      	ldr	r2, [pc, #396]	; (8109088 <HAL_TIM_ConfigClockSource+0x1e4>)
 8108efa:	4293      	cmp	r3, r2
 8108efc:	f000 80a9 	beq.w	8109052 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f00:	4a61      	ldr	r2, [pc, #388]	; (8109088 <HAL_TIM_ConfigClockSource+0x1e4>)
 8108f02:	4293      	cmp	r3, r2
 8108f04:	f200 80ae 	bhi.w	8109064 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f08:	4a60      	ldr	r2, [pc, #384]	; (810908c <HAL_TIM_ConfigClockSource+0x1e8>)
 8108f0a:	4293      	cmp	r3, r2
 8108f0c:	f000 80a1 	beq.w	8109052 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f10:	4a5e      	ldr	r2, [pc, #376]	; (810908c <HAL_TIM_ConfigClockSource+0x1e8>)
 8108f12:	4293      	cmp	r3, r2
 8108f14:	f200 80a6 	bhi.w	8109064 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f18:	4a5d      	ldr	r2, [pc, #372]	; (8109090 <HAL_TIM_ConfigClockSource+0x1ec>)
 8108f1a:	4293      	cmp	r3, r2
 8108f1c:	f000 8099 	beq.w	8109052 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f20:	4a5b      	ldr	r2, [pc, #364]	; (8109090 <HAL_TIM_ConfigClockSource+0x1ec>)
 8108f22:	4293      	cmp	r3, r2
 8108f24:	f200 809e 	bhi.w	8109064 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8108f2c:	f000 8091 	beq.w	8109052 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8108f34:	f200 8096 	bhi.w	8109064 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108f3c:	f000 8089 	beq.w	8109052 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108f44:	f200 808e 	bhi.w	8109064 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108f4c:	d03e      	beq.n	8108fcc <HAL_TIM_ConfigClockSource+0x128>
 8108f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108f52:	f200 8087 	bhi.w	8109064 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108f5a:	f000 8086 	beq.w	810906a <HAL_TIM_ConfigClockSource+0x1c6>
 8108f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108f62:	d87f      	bhi.n	8109064 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f64:	2b70      	cmp	r3, #112	; 0x70
 8108f66:	d01a      	beq.n	8108f9e <HAL_TIM_ConfigClockSource+0xfa>
 8108f68:	2b70      	cmp	r3, #112	; 0x70
 8108f6a:	d87b      	bhi.n	8109064 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f6c:	2b60      	cmp	r3, #96	; 0x60
 8108f6e:	d050      	beq.n	8109012 <HAL_TIM_ConfigClockSource+0x16e>
 8108f70:	2b60      	cmp	r3, #96	; 0x60
 8108f72:	d877      	bhi.n	8109064 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f74:	2b50      	cmp	r3, #80	; 0x50
 8108f76:	d03c      	beq.n	8108ff2 <HAL_TIM_ConfigClockSource+0x14e>
 8108f78:	2b50      	cmp	r3, #80	; 0x50
 8108f7a:	d873      	bhi.n	8109064 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f7c:	2b40      	cmp	r3, #64	; 0x40
 8108f7e:	d058      	beq.n	8109032 <HAL_TIM_ConfigClockSource+0x18e>
 8108f80:	2b40      	cmp	r3, #64	; 0x40
 8108f82:	d86f      	bhi.n	8109064 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f84:	2b30      	cmp	r3, #48	; 0x30
 8108f86:	d064      	beq.n	8109052 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f88:	2b30      	cmp	r3, #48	; 0x30
 8108f8a:	d86b      	bhi.n	8109064 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f8c:	2b20      	cmp	r3, #32
 8108f8e:	d060      	beq.n	8109052 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f90:	2b20      	cmp	r3, #32
 8108f92:	d867      	bhi.n	8109064 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f94:	2b00      	cmp	r3, #0
 8108f96:	d05c      	beq.n	8109052 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f98:	2b10      	cmp	r3, #16
 8108f9a:	d05a      	beq.n	8109052 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f9c:	e062      	b.n	8109064 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8108f9e:	687b      	ldr	r3, [r7, #4]
 8108fa0:	6818      	ldr	r0, [r3, #0]
 8108fa2:	683b      	ldr	r3, [r7, #0]
 8108fa4:	6899      	ldr	r1, [r3, #8]
 8108fa6:	683b      	ldr	r3, [r7, #0]
 8108fa8:	685a      	ldr	r2, [r3, #4]
 8108faa:	683b      	ldr	r3, [r7, #0]
 8108fac:	68db      	ldr	r3, [r3, #12]
 8108fae:	f000 fc85 	bl	81098bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8108fb2:	687b      	ldr	r3, [r7, #4]
 8108fb4:	681b      	ldr	r3, [r3, #0]
 8108fb6:	689b      	ldr	r3, [r3, #8]
 8108fb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8108fba:	68bb      	ldr	r3, [r7, #8]
 8108fbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8108fc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8108fc2:	687b      	ldr	r3, [r7, #4]
 8108fc4:	681b      	ldr	r3, [r3, #0]
 8108fc6:	68ba      	ldr	r2, [r7, #8]
 8108fc8:	609a      	str	r2, [r3, #8]
      break;
 8108fca:	e04f      	b.n	810906c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8108fcc:	687b      	ldr	r3, [r7, #4]
 8108fce:	6818      	ldr	r0, [r3, #0]
 8108fd0:	683b      	ldr	r3, [r7, #0]
 8108fd2:	6899      	ldr	r1, [r3, #8]
 8108fd4:	683b      	ldr	r3, [r7, #0]
 8108fd6:	685a      	ldr	r2, [r3, #4]
 8108fd8:	683b      	ldr	r3, [r7, #0]
 8108fda:	68db      	ldr	r3, [r3, #12]
 8108fdc:	f000 fc6e 	bl	81098bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8108fe0:	687b      	ldr	r3, [r7, #4]
 8108fe2:	681b      	ldr	r3, [r3, #0]
 8108fe4:	689a      	ldr	r2, [r3, #8]
 8108fe6:	687b      	ldr	r3, [r7, #4]
 8108fe8:	681b      	ldr	r3, [r3, #0]
 8108fea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8108fee:	609a      	str	r2, [r3, #8]
      break;
 8108ff0:	e03c      	b.n	810906c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8108ff2:	687b      	ldr	r3, [r7, #4]
 8108ff4:	6818      	ldr	r0, [r3, #0]
 8108ff6:	683b      	ldr	r3, [r7, #0]
 8108ff8:	6859      	ldr	r1, [r3, #4]
 8108ffa:	683b      	ldr	r3, [r7, #0]
 8108ffc:	68db      	ldr	r3, [r3, #12]
 8108ffe:	461a      	mov	r2, r3
 8109000:	f000 fbe0 	bl	81097c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8109004:	687b      	ldr	r3, [r7, #4]
 8109006:	681b      	ldr	r3, [r3, #0]
 8109008:	2150      	movs	r1, #80	; 0x50
 810900a:	4618      	mov	r0, r3
 810900c:	f000 fc39 	bl	8109882 <TIM_ITRx_SetConfig>
      break;
 8109010:	e02c      	b.n	810906c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8109012:	687b      	ldr	r3, [r7, #4]
 8109014:	6818      	ldr	r0, [r3, #0]
 8109016:	683b      	ldr	r3, [r7, #0]
 8109018:	6859      	ldr	r1, [r3, #4]
 810901a:	683b      	ldr	r3, [r7, #0]
 810901c:	68db      	ldr	r3, [r3, #12]
 810901e:	461a      	mov	r2, r3
 8109020:	f000 fbff 	bl	8109822 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8109024:	687b      	ldr	r3, [r7, #4]
 8109026:	681b      	ldr	r3, [r3, #0]
 8109028:	2160      	movs	r1, #96	; 0x60
 810902a:	4618      	mov	r0, r3
 810902c:	f000 fc29 	bl	8109882 <TIM_ITRx_SetConfig>
      break;
 8109030:	e01c      	b.n	810906c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8109032:	687b      	ldr	r3, [r7, #4]
 8109034:	6818      	ldr	r0, [r3, #0]
 8109036:	683b      	ldr	r3, [r7, #0]
 8109038:	6859      	ldr	r1, [r3, #4]
 810903a:	683b      	ldr	r3, [r7, #0]
 810903c:	68db      	ldr	r3, [r3, #12]
 810903e:	461a      	mov	r2, r3
 8109040:	f000 fbc0 	bl	81097c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8109044:	687b      	ldr	r3, [r7, #4]
 8109046:	681b      	ldr	r3, [r3, #0]
 8109048:	2140      	movs	r1, #64	; 0x40
 810904a:	4618      	mov	r0, r3
 810904c:	f000 fc19 	bl	8109882 <TIM_ITRx_SetConfig>
      break;
 8109050:	e00c      	b.n	810906c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8109052:	687b      	ldr	r3, [r7, #4]
 8109054:	681a      	ldr	r2, [r3, #0]
 8109056:	683b      	ldr	r3, [r7, #0]
 8109058:	681b      	ldr	r3, [r3, #0]
 810905a:	4619      	mov	r1, r3
 810905c:	4610      	mov	r0, r2
 810905e:	f000 fc10 	bl	8109882 <TIM_ITRx_SetConfig>
      break;
 8109062:	e003      	b.n	810906c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8109064:	2301      	movs	r3, #1
 8109066:	73fb      	strb	r3, [r7, #15]
      break;
 8109068:	e000      	b.n	810906c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810906a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810906c:	687b      	ldr	r3, [r7, #4]
 810906e:	2201      	movs	r2, #1
 8109070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8109074:	687b      	ldr	r3, [r7, #4]
 8109076:	2200      	movs	r2, #0
 8109078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810907c:	7bfb      	ldrb	r3, [r7, #15]
}
 810907e:	4618      	mov	r0, r3
 8109080:	3710      	adds	r7, #16
 8109082:	46bd      	mov	sp, r7
 8109084:	bd80      	pop	{r7, pc}
 8109086:	bf00      	nop
 8109088:	00100040 	.word	0x00100040
 810908c:	00100030 	.word	0x00100030
 8109090:	00100020 	.word	0x00100020

08109094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8109094:	b480      	push	{r7}
 8109096:	b083      	sub	sp, #12
 8109098:	af00      	add	r7, sp, #0
 810909a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810909c:	bf00      	nop
 810909e:	370c      	adds	r7, #12
 81090a0:	46bd      	mov	sp, r7
 81090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090a6:	4770      	bx	lr

081090a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81090a8:	b480      	push	{r7}
 81090aa:	b083      	sub	sp, #12
 81090ac:	af00      	add	r7, sp, #0
 81090ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81090b0:	bf00      	nop
 81090b2:	370c      	adds	r7, #12
 81090b4:	46bd      	mov	sp, r7
 81090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090ba:	4770      	bx	lr

081090bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81090bc:	b480      	push	{r7}
 81090be:	b083      	sub	sp, #12
 81090c0:	af00      	add	r7, sp, #0
 81090c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81090c4:	bf00      	nop
 81090c6:	370c      	adds	r7, #12
 81090c8:	46bd      	mov	sp, r7
 81090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090ce:	4770      	bx	lr

081090d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81090d0:	b480      	push	{r7}
 81090d2:	b083      	sub	sp, #12
 81090d4:	af00      	add	r7, sp, #0
 81090d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81090d8:	bf00      	nop
 81090da:	370c      	adds	r7, #12
 81090dc:	46bd      	mov	sp, r7
 81090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090e2:	4770      	bx	lr

081090e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81090e4:	b480      	push	{r7}
 81090e6:	b085      	sub	sp, #20
 81090e8:	af00      	add	r7, sp, #0
 81090ea:	6078      	str	r0, [r7, #4]
 81090ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81090ee:	687b      	ldr	r3, [r7, #4]
 81090f0:	681b      	ldr	r3, [r3, #0]
 81090f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81090f4:	687b      	ldr	r3, [r7, #4]
 81090f6:	4a40      	ldr	r2, [pc, #256]	; (81091f8 <TIM_Base_SetConfig+0x114>)
 81090f8:	4293      	cmp	r3, r2
 81090fa:	d013      	beq.n	8109124 <TIM_Base_SetConfig+0x40>
 81090fc:	687b      	ldr	r3, [r7, #4]
 81090fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109102:	d00f      	beq.n	8109124 <TIM_Base_SetConfig+0x40>
 8109104:	687b      	ldr	r3, [r7, #4]
 8109106:	4a3d      	ldr	r2, [pc, #244]	; (81091fc <TIM_Base_SetConfig+0x118>)
 8109108:	4293      	cmp	r3, r2
 810910a:	d00b      	beq.n	8109124 <TIM_Base_SetConfig+0x40>
 810910c:	687b      	ldr	r3, [r7, #4]
 810910e:	4a3c      	ldr	r2, [pc, #240]	; (8109200 <TIM_Base_SetConfig+0x11c>)
 8109110:	4293      	cmp	r3, r2
 8109112:	d007      	beq.n	8109124 <TIM_Base_SetConfig+0x40>
 8109114:	687b      	ldr	r3, [r7, #4]
 8109116:	4a3b      	ldr	r2, [pc, #236]	; (8109204 <TIM_Base_SetConfig+0x120>)
 8109118:	4293      	cmp	r3, r2
 810911a:	d003      	beq.n	8109124 <TIM_Base_SetConfig+0x40>
 810911c:	687b      	ldr	r3, [r7, #4]
 810911e:	4a3a      	ldr	r2, [pc, #232]	; (8109208 <TIM_Base_SetConfig+0x124>)
 8109120:	4293      	cmp	r3, r2
 8109122:	d108      	bne.n	8109136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8109124:	68fb      	ldr	r3, [r7, #12]
 8109126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810912a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810912c:	683b      	ldr	r3, [r7, #0]
 810912e:	685b      	ldr	r3, [r3, #4]
 8109130:	68fa      	ldr	r2, [r7, #12]
 8109132:	4313      	orrs	r3, r2
 8109134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8109136:	687b      	ldr	r3, [r7, #4]
 8109138:	4a2f      	ldr	r2, [pc, #188]	; (81091f8 <TIM_Base_SetConfig+0x114>)
 810913a:	4293      	cmp	r3, r2
 810913c:	d01f      	beq.n	810917e <TIM_Base_SetConfig+0x9a>
 810913e:	687b      	ldr	r3, [r7, #4]
 8109140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109144:	d01b      	beq.n	810917e <TIM_Base_SetConfig+0x9a>
 8109146:	687b      	ldr	r3, [r7, #4]
 8109148:	4a2c      	ldr	r2, [pc, #176]	; (81091fc <TIM_Base_SetConfig+0x118>)
 810914a:	4293      	cmp	r3, r2
 810914c:	d017      	beq.n	810917e <TIM_Base_SetConfig+0x9a>
 810914e:	687b      	ldr	r3, [r7, #4]
 8109150:	4a2b      	ldr	r2, [pc, #172]	; (8109200 <TIM_Base_SetConfig+0x11c>)
 8109152:	4293      	cmp	r3, r2
 8109154:	d013      	beq.n	810917e <TIM_Base_SetConfig+0x9a>
 8109156:	687b      	ldr	r3, [r7, #4]
 8109158:	4a2a      	ldr	r2, [pc, #168]	; (8109204 <TIM_Base_SetConfig+0x120>)
 810915a:	4293      	cmp	r3, r2
 810915c:	d00f      	beq.n	810917e <TIM_Base_SetConfig+0x9a>
 810915e:	687b      	ldr	r3, [r7, #4]
 8109160:	4a29      	ldr	r2, [pc, #164]	; (8109208 <TIM_Base_SetConfig+0x124>)
 8109162:	4293      	cmp	r3, r2
 8109164:	d00b      	beq.n	810917e <TIM_Base_SetConfig+0x9a>
 8109166:	687b      	ldr	r3, [r7, #4]
 8109168:	4a28      	ldr	r2, [pc, #160]	; (810920c <TIM_Base_SetConfig+0x128>)
 810916a:	4293      	cmp	r3, r2
 810916c:	d007      	beq.n	810917e <TIM_Base_SetConfig+0x9a>
 810916e:	687b      	ldr	r3, [r7, #4]
 8109170:	4a27      	ldr	r2, [pc, #156]	; (8109210 <TIM_Base_SetConfig+0x12c>)
 8109172:	4293      	cmp	r3, r2
 8109174:	d003      	beq.n	810917e <TIM_Base_SetConfig+0x9a>
 8109176:	687b      	ldr	r3, [r7, #4]
 8109178:	4a26      	ldr	r2, [pc, #152]	; (8109214 <TIM_Base_SetConfig+0x130>)
 810917a:	4293      	cmp	r3, r2
 810917c:	d108      	bne.n	8109190 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810917e:	68fb      	ldr	r3, [r7, #12]
 8109180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8109184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8109186:	683b      	ldr	r3, [r7, #0]
 8109188:	68db      	ldr	r3, [r3, #12]
 810918a:	68fa      	ldr	r2, [r7, #12]
 810918c:	4313      	orrs	r3, r2
 810918e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8109190:	68fb      	ldr	r3, [r7, #12]
 8109192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8109196:	683b      	ldr	r3, [r7, #0]
 8109198:	695b      	ldr	r3, [r3, #20]
 810919a:	4313      	orrs	r3, r2
 810919c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810919e:	687b      	ldr	r3, [r7, #4]
 81091a0:	68fa      	ldr	r2, [r7, #12]
 81091a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81091a4:	683b      	ldr	r3, [r7, #0]
 81091a6:	689a      	ldr	r2, [r3, #8]
 81091a8:	687b      	ldr	r3, [r7, #4]
 81091aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81091ac:	683b      	ldr	r3, [r7, #0]
 81091ae:	681a      	ldr	r2, [r3, #0]
 81091b0:	687b      	ldr	r3, [r7, #4]
 81091b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81091b4:	687b      	ldr	r3, [r7, #4]
 81091b6:	4a10      	ldr	r2, [pc, #64]	; (81091f8 <TIM_Base_SetConfig+0x114>)
 81091b8:	4293      	cmp	r3, r2
 81091ba:	d00f      	beq.n	81091dc <TIM_Base_SetConfig+0xf8>
 81091bc:	687b      	ldr	r3, [r7, #4]
 81091be:	4a12      	ldr	r2, [pc, #72]	; (8109208 <TIM_Base_SetConfig+0x124>)
 81091c0:	4293      	cmp	r3, r2
 81091c2:	d00b      	beq.n	81091dc <TIM_Base_SetConfig+0xf8>
 81091c4:	687b      	ldr	r3, [r7, #4]
 81091c6:	4a11      	ldr	r2, [pc, #68]	; (810920c <TIM_Base_SetConfig+0x128>)
 81091c8:	4293      	cmp	r3, r2
 81091ca:	d007      	beq.n	81091dc <TIM_Base_SetConfig+0xf8>
 81091cc:	687b      	ldr	r3, [r7, #4]
 81091ce:	4a10      	ldr	r2, [pc, #64]	; (8109210 <TIM_Base_SetConfig+0x12c>)
 81091d0:	4293      	cmp	r3, r2
 81091d2:	d003      	beq.n	81091dc <TIM_Base_SetConfig+0xf8>
 81091d4:	687b      	ldr	r3, [r7, #4]
 81091d6:	4a0f      	ldr	r2, [pc, #60]	; (8109214 <TIM_Base_SetConfig+0x130>)
 81091d8:	4293      	cmp	r3, r2
 81091da:	d103      	bne.n	81091e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81091dc:	683b      	ldr	r3, [r7, #0]
 81091de:	691a      	ldr	r2, [r3, #16]
 81091e0:	687b      	ldr	r3, [r7, #4]
 81091e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81091e4:	687b      	ldr	r3, [r7, #4]
 81091e6:	2201      	movs	r2, #1
 81091e8:	615a      	str	r2, [r3, #20]
}
 81091ea:	bf00      	nop
 81091ec:	3714      	adds	r7, #20
 81091ee:	46bd      	mov	sp, r7
 81091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091f4:	4770      	bx	lr
 81091f6:	bf00      	nop
 81091f8:	40010000 	.word	0x40010000
 81091fc:	40000400 	.word	0x40000400
 8109200:	40000800 	.word	0x40000800
 8109204:	40000c00 	.word	0x40000c00
 8109208:	40010400 	.word	0x40010400
 810920c:	40014000 	.word	0x40014000
 8109210:	40014400 	.word	0x40014400
 8109214:	40014800 	.word	0x40014800

08109218 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109218:	b480      	push	{r7}
 810921a:	b087      	sub	sp, #28
 810921c:	af00      	add	r7, sp, #0
 810921e:	6078      	str	r0, [r7, #4]
 8109220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8109222:	687b      	ldr	r3, [r7, #4]
 8109224:	6a1b      	ldr	r3, [r3, #32]
 8109226:	f023 0201 	bic.w	r2, r3, #1
 810922a:	687b      	ldr	r3, [r7, #4]
 810922c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810922e:	687b      	ldr	r3, [r7, #4]
 8109230:	6a1b      	ldr	r3, [r3, #32]
 8109232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109234:	687b      	ldr	r3, [r7, #4]
 8109236:	685b      	ldr	r3, [r3, #4]
 8109238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810923a:	687b      	ldr	r3, [r7, #4]
 810923c:	699b      	ldr	r3, [r3, #24]
 810923e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8109240:	68fb      	ldr	r3, [r7, #12]
 8109242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8109246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810924a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810924c:	68fb      	ldr	r3, [r7, #12]
 810924e:	f023 0303 	bic.w	r3, r3, #3
 8109252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8109254:	683b      	ldr	r3, [r7, #0]
 8109256:	681b      	ldr	r3, [r3, #0]
 8109258:	68fa      	ldr	r2, [r7, #12]
 810925a:	4313      	orrs	r3, r2
 810925c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810925e:	697b      	ldr	r3, [r7, #20]
 8109260:	f023 0302 	bic.w	r3, r3, #2
 8109264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8109266:	683b      	ldr	r3, [r7, #0]
 8109268:	689b      	ldr	r3, [r3, #8]
 810926a:	697a      	ldr	r2, [r7, #20]
 810926c:	4313      	orrs	r3, r2
 810926e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8109270:	687b      	ldr	r3, [r7, #4]
 8109272:	4a2c      	ldr	r2, [pc, #176]	; (8109324 <TIM_OC1_SetConfig+0x10c>)
 8109274:	4293      	cmp	r3, r2
 8109276:	d00f      	beq.n	8109298 <TIM_OC1_SetConfig+0x80>
 8109278:	687b      	ldr	r3, [r7, #4]
 810927a:	4a2b      	ldr	r2, [pc, #172]	; (8109328 <TIM_OC1_SetConfig+0x110>)
 810927c:	4293      	cmp	r3, r2
 810927e:	d00b      	beq.n	8109298 <TIM_OC1_SetConfig+0x80>
 8109280:	687b      	ldr	r3, [r7, #4]
 8109282:	4a2a      	ldr	r2, [pc, #168]	; (810932c <TIM_OC1_SetConfig+0x114>)
 8109284:	4293      	cmp	r3, r2
 8109286:	d007      	beq.n	8109298 <TIM_OC1_SetConfig+0x80>
 8109288:	687b      	ldr	r3, [r7, #4]
 810928a:	4a29      	ldr	r2, [pc, #164]	; (8109330 <TIM_OC1_SetConfig+0x118>)
 810928c:	4293      	cmp	r3, r2
 810928e:	d003      	beq.n	8109298 <TIM_OC1_SetConfig+0x80>
 8109290:	687b      	ldr	r3, [r7, #4]
 8109292:	4a28      	ldr	r2, [pc, #160]	; (8109334 <TIM_OC1_SetConfig+0x11c>)
 8109294:	4293      	cmp	r3, r2
 8109296:	d10c      	bne.n	81092b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8109298:	697b      	ldr	r3, [r7, #20]
 810929a:	f023 0308 	bic.w	r3, r3, #8
 810929e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 81092a0:	683b      	ldr	r3, [r7, #0]
 81092a2:	68db      	ldr	r3, [r3, #12]
 81092a4:	697a      	ldr	r2, [r7, #20]
 81092a6:	4313      	orrs	r3, r2
 81092a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 81092aa:	697b      	ldr	r3, [r7, #20]
 81092ac:	f023 0304 	bic.w	r3, r3, #4
 81092b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81092b2:	687b      	ldr	r3, [r7, #4]
 81092b4:	4a1b      	ldr	r2, [pc, #108]	; (8109324 <TIM_OC1_SetConfig+0x10c>)
 81092b6:	4293      	cmp	r3, r2
 81092b8:	d00f      	beq.n	81092da <TIM_OC1_SetConfig+0xc2>
 81092ba:	687b      	ldr	r3, [r7, #4]
 81092bc:	4a1a      	ldr	r2, [pc, #104]	; (8109328 <TIM_OC1_SetConfig+0x110>)
 81092be:	4293      	cmp	r3, r2
 81092c0:	d00b      	beq.n	81092da <TIM_OC1_SetConfig+0xc2>
 81092c2:	687b      	ldr	r3, [r7, #4]
 81092c4:	4a19      	ldr	r2, [pc, #100]	; (810932c <TIM_OC1_SetConfig+0x114>)
 81092c6:	4293      	cmp	r3, r2
 81092c8:	d007      	beq.n	81092da <TIM_OC1_SetConfig+0xc2>
 81092ca:	687b      	ldr	r3, [r7, #4]
 81092cc:	4a18      	ldr	r2, [pc, #96]	; (8109330 <TIM_OC1_SetConfig+0x118>)
 81092ce:	4293      	cmp	r3, r2
 81092d0:	d003      	beq.n	81092da <TIM_OC1_SetConfig+0xc2>
 81092d2:	687b      	ldr	r3, [r7, #4]
 81092d4:	4a17      	ldr	r2, [pc, #92]	; (8109334 <TIM_OC1_SetConfig+0x11c>)
 81092d6:	4293      	cmp	r3, r2
 81092d8:	d111      	bne.n	81092fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 81092da:	693b      	ldr	r3, [r7, #16]
 81092dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81092e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81092e2:	693b      	ldr	r3, [r7, #16]
 81092e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81092e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81092ea:	683b      	ldr	r3, [r7, #0]
 81092ec:	695b      	ldr	r3, [r3, #20]
 81092ee:	693a      	ldr	r2, [r7, #16]
 81092f0:	4313      	orrs	r3, r2
 81092f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81092f4:	683b      	ldr	r3, [r7, #0]
 81092f6:	699b      	ldr	r3, [r3, #24]
 81092f8:	693a      	ldr	r2, [r7, #16]
 81092fa:	4313      	orrs	r3, r2
 81092fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81092fe:	687b      	ldr	r3, [r7, #4]
 8109300:	693a      	ldr	r2, [r7, #16]
 8109302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8109304:	687b      	ldr	r3, [r7, #4]
 8109306:	68fa      	ldr	r2, [r7, #12]
 8109308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810930a:	683b      	ldr	r3, [r7, #0]
 810930c:	685a      	ldr	r2, [r3, #4]
 810930e:	687b      	ldr	r3, [r7, #4]
 8109310:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109312:	687b      	ldr	r3, [r7, #4]
 8109314:	697a      	ldr	r2, [r7, #20]
 8109316:	621a      	str	r2, [r3, #32]
}
 8109318:	bf00      	nop
 810931a:	371c      	adds	r7, #28
 810931c:	46bd      	mov	sp, r7
 810931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109322:	4770      	bx	lr
 8109324:	40010000 	.word	0x40010000
 8109328:	40010400 	.word	0x40010400
 810932c:	40014000 	.word	0x40014000
 8109330:	40014400 	.word	0x40014400
 8109334:	40014800 	.word	0x40014800

08109338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109338:	b480      	push	{r7}
 810933a:	b087      	sub	sp, #28
 810933c:	af00      	add	r7, sp, #0
 810933e:	6078      	str	r0, [r7, #4]
 8109340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8109342:	687b      	ldr	r3, [r7, #4]
 8109344:	6a1b      	ldr	r3, [r3, #32]
 8109346:	f023 0210 	bic.w	r2, r3, #16
 810934a:	687b      	ldr	r3, [r7, #4]
 810934c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810934e:	687b      	ldr	r3, [r7, #4]
 8109350:	6a1b      	ldr	r3, [r3, #32]
 8109352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109354:	687b      	ldr	r3, [r7, #4]
 8109356:	685b      	ldr	r3, [r3, #4]
 8109358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810935a:	687b      	ldr	r3, [r7, #4]
 810935c:	699b      	ldr	r3, [r3, #24]
 810935e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8109360:	68fb      	ldr	r3, [r7, #12]
 8109362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8109366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810936a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810936c:	68fb      	ldr	r3, [r7, #12]
 810936e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8109372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8109374:	683b      	ldr	r3, [r7, #0]
 8109376:	681b      	ldr	r3, [r3, #0]
 8109378:	021b      	lsls	r3, r3, #8
 810937a:	68fa      	ldr	r2, [r7, #12]
 810937c:	4313      	orrs	r3, r2
 810937e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8109380:	697b      	ldr	r3, [r7, #20]
 8109382:	f023 0320 	bic.w	r3, r3, #32
 8109386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8109388:	683b      	ldr	r3, [r7, #0]
 810938a:	689b      	ldr	r3, [r3, #8]
 810938c:	011b      	lsls	r3, r3, #4
 810938e:	697a      	ldr	r2, [r7, #20]
 8109390:	4313      	orrs	r3, r2
 8109392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8109394:	687b      	ldr	r3, [r7, #4]
 8109396:	4a28      	ldr	r2, [pc, #160]	; (8109438 <TIM_OC2_SetConfig+0x100>)
 8109398:	4293      	cmp	r3, r2
 810939a:	d003      	beq.n	81093a4 <TIM_OC2_SetConfig+0x6c>
 810939c:	687b      	ldr	r3, [r7, #4]
 810939e:	4a27      	ldr	r2, [pc, #156]	; (810943c <TIM_OC2_SetConfig+0x104>)
 81093a0:	4293      	cmp	r3, r2
 81093a2:	d10d      	bne.n	81093c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 81093a4:	697b      	ldr	r3, [r7, #20]
 81093a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81093aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 81093ac:	683b      	ldr	r3, [r7, #0]
 81093ae:	68db      	ldr	r3, [r3, #12]
 81093b0:	011b      	lsls	r3, r3, #4
 81093b2:	697a      	ldr	r2, [r7, #20]
 81093b4:	4313      	orrs	r3, r2
 81093b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 81093b8:	697b      	ldr	r3, [r7, #20]
 81093ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81093be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81093c0:	687b      	ldr	r3, [r7, #4]
 81093c2:	4a1d      	ldr	r2, [pc, #116]	; (8109438 <TIM_OC2_SetConfig+0x100>)
 81093c4:	4293      	cmp	r3, r2
 81093c6:	d00f      	beq.n	81093e8 <TIM_OC2_SetConfig+0xb0>
 81093c8:	687b      	ldr	r3, [r7, #4]
 81093ca:	4a1c      	ldr	r2, [pc, #112]	; (810943c <TIM_OC2_SetConfig+0x104>)
 81093cc:	4293      	cmp	r3, r2
 81093ce:	d00b      	beq.n	81093e8 <TIM_OC2_SetConfig+0xb0>
 81093d0:	687b      	ldr	r3, [r7, #4]
 81093d2:	4a1b      	ldr	r2, [pc, #108]	; (8109440 <TIM_OC2_SetConfig+0x108>)
 81093d4:	4293      	cmp	r3, r2
 81093d6:	d007      	beq.n	81093e8 <TIM_OC2_SetConfig+0xb0>
 81093d8:	687b      	ldr	r3, [r7, #4]
 81093da:	4a1a      	ldr	r2, [pc, #104]	; (8109444 <TIM_OC2_SetConfig+0x10c>)
 81093dc:	4293      	cmp	r3, r2
 81093de:	d003      	beq.n	81093e8 <TIM_OC2_SetConfig+0xb0>
 81093e0:	687b      	ldr	r3, [r7, #4]
 81093e2:	4a19      	ldr	r2, [pc, #100]	; (8109448 <TIM_OC2_SetConfig+0x110>)
 81093e4:	4293      	cmp	r3, r2
 81093e6:	d113      	bne.n	8109410 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81093e8:	693b      	ldr	r3, [r7, #16]
 81093ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81093ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81093f0:	693b      	ldr	r3, [r7, #16]
 81093f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81093f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81093f8:	683b      	ldr	r3, [r7, #0]
 81093fa:	695b      	ldr	r3, [r3, #20]
 81093fc:	009b      	lsls	r3, r3, #2
 81093fe:	693a      	ldr	r2, [r7, #16]
 8109400:	4313      	orrs	r3, r2
 8109402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8109404:	683b      	ldr	r3, [r7, #0]
 8109406:	699b      	ldr	r3, [r3, #24]
 8109408:	009b      	lsls	r3, r3, #2
 810940a:	693a      	ldr	r2, [r7, #16]
 810940c:	4313      	orrs	r3, r2
 810940e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8109410:	687b      	ldr	r3, [r7, #4]
 8109412:	693a      	ldr	r2, [r7, #16]
 8109414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8109416:	687b      	ldr	r3, [r7, #4]
 8109418:	68fa      	ldr	r2, [r7, #12]
 810941a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810941c:	683b      	ldr	r3, [r7, #0]
 810941e:	685a      	ldr	r2, [r3, #4]
 8109420:	687b      	ldr	r3, [r7, #4]
 8109422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109424:	687b      	ldr	r3, [r7, #4]
 8109426:	697a      	ldr	r2, [r7, #20]
 8109428:	621a      	str	r2, [r3, #32]
}
 810942a:	bf00      	nop
 810942c:	371c      	adds	r7, #28
 810942e:	46bd      	mov	sp, r7
 8109430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109434:	4770      	bx	lr
 8109436:	bf00      	nop
 8109438:	40010000 	.word	0x40010000
 810943c:	40010400 	.word	0x40010400
 8109440:	40014000 	.word	0x40014000
 8109444:	40014400 	.word	0x40014400
 8109448:	40014800 	.word	0x40014800

0810944c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810944c:	b480      	push	{r7}
 810944e:	b087      	sub	sp, #28
 8109450:	af00      	add	r7, sp, #0
 8109452:	6078      	str	r0, [r7, #4]
 8109454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8109456:	687b      	ldr	r3, [r7, #4]
 8109458:	6a1b      	ldr	r3, [r3, #32]
 810945a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810945e:	687b      	ldr	r3, [r7, #4]
 8109460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109462:	687b      	ldr	r3, [r7, #4]
 8109464:	6a1b      	ldr	r3, [r3, #32]
 8109466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109468:	687b      	ldr	r3, [r7, #4]
 810946a:	685b      	ldr	r3, [r3, #4]
 810946c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810946e:	687b      	ldr	r3, [r7, #4]
 8109470:	69db      	ldr	r3, [r3, #28]
 8109472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8109474:	68fb      	ldr	r3, [r7, #12]
 8109476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810947a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810947e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8109480:	68fb      	ldr	r3, [r7, #12]
 8109482:	f023 0303 	bic.w	r3, r3, #3
 8109486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8109488:	683b      	ldr	r3, [r7, #0]
 810948a:	681b      	ldr	r3, [r3, #0]
 810948c:	68fa      	ldr	r2, [r7, #12]
 810948e:	4313      	orrs	r3, r2
 8109490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8109492:	697b      	ldr	r3, [r7, #20]
 8109494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8109498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810949a:	683b      	ldr	r3, [r7, #0]
 810949c:	689b      	ldr	r3, [r3, #8]
 810949e:	021b      	lsls	r3, r3, #8
 81094a0:	697a      	ldr	r2, [r7, #20]
 81094a2:	4313      	orrs	r3, r2
 81094a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 81094a6:	687b      	ldr	r3, [r7, #4]
 81094a8:	4a27      	ldr	r2, [pc, #156]	; (8109548 <TIM_OC3_SetConfig+0xfc>)
 81094aa:	4293      	cmp	r3, r2
 81094ac:	d003      	beq.n	81094b6 <TIM_OC3_SetConfig+0x6a>
 81094ae:	687b      	ldr	r3, [r7, #4]
 81094b0:	4a26      	ldr	r2, [pc, #152]	; (810954c <TIM_OC3_SetConfig+0x100>)
 81094b2:	4293      	cmp	r3, r2
 81094b4:	d10d      	bne.n	81094d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 81094b6:	697b      	ldr	r3, [r7, #20]
 81094b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81094bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81094be:	683b      	ldr	r3, [r7, #0]
 81094c0:	68db      	ldr	r3, [r3, #12]
 81094c2:	021b      	lsls	r3, r3, #8
 81094c4:	697a      	ldr	r2, [r7, #20]
 81094c6:	4313      	orrs	r3, r2
 81094c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 81094ca:	697b      	ldr	r3, [r7, #20]
 81094cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81094d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81094d2:	687b      	ldr	r3, [r7, #4]
 81094d4:	4a1c      	ldr	r2, [pc, #112]	; (8109548 <TIM_OC3_SetConfig+0xfc>)
 81094d6:	4293      	cmp	r3, r2
 81094d8:	d00f      	beq.n	81094fa <TIM_OC3_SetConfig+0xae>
 81094da:	687b      	ldr	r3, [r7, #4]
 81094dc:	4a1b      	ldr	r2, [pc, #108]	; (810954c <TIM_OC3_SetConfig+0x100>)
 81094de:	4293      	cmp	r3, r2
 81094e0:	d00b      	beq.n	81094fa <TIM_OC3_SetConfig+0xae>
 81094e2:	687b      	ldr	r3, [r7, #4]
 81094e4:	4a1a      	ldr	r2, [pc, #104]	; (8109550 <TIM_OC3_SetConfig+0x104>)
 81094e6:	4293      	cmp	r3, r2
 81094e8:	d007      	beq.n	81094fa <TIM_OC3_SetConfig+0xae>
 81094ea:	687b      	ldr	r3, [r7, #4]
 81094ec:	4a19      	ldr	r2, [pc, #100]	; (8109554 <TIM_OC3_SetConfig+0x108>)
 81094ee:	4293      	cmp	r3, r2
 81094f0:	d003      	beq.n	81094fa <TIM_OC3_SetConfig+0xae>
 81094f2:	687b      	ldr	r3, [r7, #4]
 81094f4:	4a18      	ldr	r2, [pc, #96]	; (8109558 <TIM_OC3_SetConfig+0x10c>)
 81094f6:	4293      	cmp	r3, r2
 81094f8:	d113      	bne.n	8109522 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81094fa:	693b      	ldr	r3, [r7, #16]
 81094fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8109500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8109502:	693b      	ldr	r3, [r7, #16]
 8109504:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8109508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810950a:	683b      	ldr	r3, [r7, #0]
 810950c:	695b      	ldr	r3, [r3, #20]
 810950e:	011b      	lsls	r3, r3, #4
 8109510:	693a      	ldr	r2, [r7, #16]
 8109512:	4313      	orrs	r3, r2
 8109514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8109516:	683b      	ldr	r3, [r7, #0]
 8109518:	699b      	ldr	r3, [r3, #24]
 810951a:	011b      	lsls	r3, r3, #4
 810951c:	693a      	ldr	r2, [r7, #16]
 810951e:	4313      	orrs	r3, r2
 8109520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8109522:	687b      	ldr	r3, [r7, #4]
 8109524:	693a      	ldr	r2, [r7, #16]
 8109526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8109528:	687b      	ldr	r3, [r7, #4]
 810952a:	68fa      	ldr	r2, [r7, #12]
 810952c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810952e:	683b      	ldr	r3, [r7, #0]
 8109530:	685a      	ldr	r2, [r3, #4]
 8109532:	687b      	ldr	r3, [r7, #4]
 8109534:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109536:	687b      	ldr	r3, [r7, #4]
 8109538:	697a      	ldr	r2, [r7, #20]
 810953a:	621a      	str	r2, [r3, #32]
}
 810953c:	bf00      	nop
 810953e:	371c      	adds	r7, #28
 8109540:	46bd      	mov	sp, r7
 8109542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109546:	4770      	bx	lr
 8109548:	40010000 	.word	0x40010000
 810954c:	40010400 	.word	0x40010400
 8109550:	40014000 	.word	0x40014000
 8109554:	40014400 	.word	0x40014400
 8109558:	40014800 	.word	0x40014800

0810955c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810955c:	b480      	push	{r7}
 810955e:	b087      	sub	sp, #28
 8109560:	af00      	add	r7, sp, #0
 8109562:	6078      	str	r0, [r7, #4]
 8109564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8109566:	687b      	ldr	r3, [r7, #4]
 8109568:	6a1b      	ldr	r3, [r3, #32]
 810956a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810956e:	687b      	ldr	r3, [r7, #4]
 8109570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109572:	687b      	ldr	r3, [r7, #4]
 8109574:	6a1b      	ldr	r3, [r3, #32]
 8109576:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109578:	687b      	ldr	r3, [r7, #4]
 810957a:	685b      	ldr	r3, [r3, #4]
 810957c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810957e:	687b      	ldr	r3, [r7, #4]
 8109580:	69db      	ldr	r3, [r3, #28]
 8109582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8109584:	68fb      	ldr	r3, [r7, #12]
 8109586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810958a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810958e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8109590:	68fb      	ldr	r3, [r7, #12]
 8109592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8109596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8109598:	683b      	ldr	r3, [r7, #0]
 810959a:	681b      	ldr	r3, [r3, #0]
 810959c:	021b      	lsls	r3, r3, #8
 810959e:	68fa      	ldr	r2, [r7, #12]
 81095a0:	4313      	orrs	r3, r2
 81095a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 81095a4:	693b      	ldr	r3, [r7, #16]
 81095a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81095aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81095ac:	683b      	ldr	r3, [r7, #0]
 81095ae:	689b      	ldr	r3, [r3, #8]
 81095b0:	031b      	lsls	r3, r3, #12
 81095b2:	693a      	ldr	r2, [r7, #16]
 81095b4:	4313      	orrs	r3, r2
 81095b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81095b8:	687b      	ldr	r3, [r7, #4]
 81095ba:	4a18      	ldr	r2, [pc, #96]	; (810961c <TIM_OC4_SetConfig+0xc0>)
 81095bc:	4293      	cmp	r3, r2
 81095be:	d00f      	beq.n	81095e0 <TIM_OC4_SetConfig+0x84>
 81095c0:	687b      	ldr	r3, [r7, #4]
 81095c2:	4a17      	ldr	r2, [pc, #92]	; (8109620 <TIM_OC4_SetConfig+0xc4>)
 81095c4:	4293      	cmp	r3, r2
 81095c6:	d00b      	beq.n	81095e0 <TIM_OC4_SetConfig+0x84>
 81095c8:	687b      	ldr	r3, [r7, #4]
 81095ca:	4a16      	ldr	r2, [pc, #88]	; (8109624 <TIM_OC4_SetConfig+0xc8>)
 81095cc:	4293      	cmp	r3, r2
 81095ce:	d007      	beq.n	81095e0 <TIM_OC4_SetConfig+0x84>
 81095d0:	687b      	ldr	r3, [r7, #4]
 81095d2:	4a15      	ldr	r2, [pc, #84]	; (8109628 <TIM_OC4_SetConfig+0xcc>)
 81095d4:	4293      	cmp	r3, r2
 81095d6:	d003      	beq.n	81095e0 <TIM_OC4_SetConfig+0x84>
 81095d8:	687b      	ldr	r3, [r7, #4]
 81095da:	4a14      	ldr	r2, [pc, #80]	; (810962c <TIM_OC4_SetConfig+0xd0>)
 81095dc:	4293      	cmp	r3, r2
 81095de:	d109      	bne.n	81095f4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81095e0:	697b      	ldr	r3, [r7, #20]
 81095e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81095e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81095e8:	683b      	ldr	r3, [r7, #0]
 81095ea:	695b      	ldr	r3, [r3, #20]
 81095ec:	019b      	lsls	r3, r3, #6
 81095ee:	697a      	ldr	r2, [r7, #20]
 81095f0:	4313      	orrs	r3, r2
 81095f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81095f4:	687b      	ldr	r3, [r7, #4]
 81095f6:	697a      	ldr	r2, [r7, #20]
 81095f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81095fa:	687b      	ldr	r3, [r7, #4]
 81095fc:	68fa      	ldr	r2, [r7, #12]
 81095fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8109600:	683b      	ldr	r3, [r7, #0]
 8109602:	685a      	ldr	r2, [r3, #4]
 8109604:	687b      	ldr	r3, [r7, #4]
 8109606:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109608:	687b      	ldr	r3, [r7, #4]
 810960a:	693a      	ldr	r2, [r7, #16]
 810960c:	621a      	str	r2, [r3, #32]
}
 810960e:	bf00      	nop
 8109610:	371c      	adds	r7, #28
 8109612:	46bd      	mov	sp, r7
 8109614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109618:	4770      	bx	lr
 810961a:	bf00      	nop
 810961c:	40010000 	.word	0x40010000
 8109620:	40010400 	.word	0x40010400
 8109624:	40014000 	.word	0x40014000
 8109628:	40014400 	.word	0x40014400
 810962c:	40014800 	.word	0x40014800

08109630 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8109630:	b480      	push	{r7}
 8109632:	b087      	sub	sp, #28
 8109634:	af00      	add	r7, sp, #0
 8109636:	6078      	str	r0, [r7, #4]
 8109638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810963a:	687b      	ldr	r3, [r7, #4]
 810963c:	6a1b      	ldr	r3, [r3, #32]
 810963e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8109642:	687b      	ldr	r3, [r7, #4]
 8109644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109646:	687b      	ldr	r3, [r7, #4]
 8109648:	6a1b      	ldr	r3, [r3, #32]
 810964a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810964c:	687b      	ldr	r3, [r7, #4]
 810964e:	685b      	ldr	r3, [r3, #4]
 8109650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8109652:	687b      	ldr	r3, [r7, #4]
 8109654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8109658:	68fb      	ldr	r3, [r7, #12]
 810965a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810965e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8109664:	683b      	ldr	r3, [r7, #0]
 8109666:	681b      	ldr	r3, [r3, #0]
 8109668:	68fa      	ldr	r2, [r7, #12]
 810966a:	4313      	orrs	r3, r2
 810966c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810966e:	693b      	ldr	r3, [r7, #16]
 8109670:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8109674:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8109676:	683b      	ldr	r3, [r7, #0]
 8109678:	689b      	ldr	r3, [r3, #8]
 810967a:	041b      	lsls	r3, r3, #16
 810967c:	693a      	ldr	r2, [r7, #16]
 810967e:	4313      	orrs	r3, r2
 8109680:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109682:	687b      	ldr	r3, [r7, #4]
 8109684:	4a17      	ldr	r2, [pc, #92]	; (81096e4 <TIM_OC5_SetConfig+0xb4>)
 8109686:	4293      	cmp	r3, r2
 8109688:	d00f      	beq.n	81096aa <TIM_OC5_SetConfig+0x7a>
 810968a:	687b      	ldr	r3, [r7, #4]
 810968c:	4a16      	ldr	r2, [pc, #88]	; (81096e8 <TIM_OC5_SetConfig+0xb8>)
 810968e:	4293      	cmp	r3, r2
 8109690:	d00b      	beq.n	81096aa <TIM_OC5_SetConfig+0x7a>
 8109692:	687b      	ldr	r3, [r7, #4]
 8109694:	4a15      	ldr	r2, [pc, #84]	; (81096ec <TIM_OC5_SetConfig+0xbc>)
 8109696:	4293      	cmp	r3, r2
 8109698:	d007      	beq.n	81096aa <TIM_OC5_SetConfig+0x7a>
 810969a:	687b      	ldr	r3, [r7, #4]
 810969c:	4a14      	ldr	r2, [pc, #80]	; (81096f0 <TIM_OC5_SetConfig+0xc0>)
 810969e:	4293      	cmp	r3, r2
 81096a0:	d003      	beq.n	81096aa <TIM_OC5_SetConfig+0x7a>
 81096a2:	687b      	ldr	r3, [r7, #4]
 81096a4:	4a13      	ldr	r2, [pc, #76]	; (81096f4 <TIM_OC5_SetConfig+0xc4>)
 81096a6:	4293      	cmp	r3, r2
 81096a8:	d109      	bne.n	81096be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81096aa:	697b      	ldr	r3, [r7, #20]
 81096ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81096b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81096b2:	683b      	ldr	r3, [r7, #0]
 81096b4:	695b      	ldr	r3, [r3, #20]
 81096b6:	021b      	lsls	r3, r3, #8
 81096b8:	697a      	ldr	r2, [r7, #20]
 81096ba:	4313      	orrs	r3, r2
 81096bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81096be:	687b      	ldr	r3, [r7, #4]
 81096c0:	697a      	ldr	r2, [r7, #20]
 81096c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81096c4:	687b      	ldr	r3, [r7, #4]
 81096c6:	68fa      	ldr	r2, [r7, #12]
 81096c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81096ca:	683b      	ldr	r3, [r7, #0]
 81096cc:	685a      	ldr	r2, [r3, #4]
 81096ce:	687b      	ldr	r3, [r7, #4]
 81096d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81096d2:	687b      	ldr	r3, [r7, #4]
 81096d4:	693a      	ldr	r2, [r7, #16]
 81096d6:	621a      	str	r2, [r3, #32]
}
 81096d8:	bf00      	nop
 81096da:	371c      	adds	r7, #28
 81096dc:	46bd      	mov	sp, r7
 81096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096e2:	4770      	bx	lr
 81096e4:	40010000 	.word	0x40010000
 81096e8:	40010400 	.word	0x40010400
 81096ec:	40014000 	.word	0x40014000
 81096f0:	40014400 	.word	0x40014400
 81096f4:	40014800 	.word	0x40014800

081096f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 81096f8:	b480      	push	{r7}
 81096fa:	b087      	sub	sp, #28
 81096fc:	af00      	add	r7, sp, #0
 81096fe:	6078      	str	r0, [r7, #4]
 8109700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8109702:	687b      	ldr	r3, [r7, #4]
 8109704:	6a1b      	ldr	r3, [r3, #32]
 8109706:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810970a:	687b      	ldr	r3, [r7, #4]
 810970c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810970e:	687b      	ldr	r3, [r7, #4]
 8109710:	6a1b      	ldr	r3, [r3, #32]
 8109712:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109714:	687b      	ldr	r3, [r7, #4]
 8109716:	685b      	ldr	r3, [r3, #4]
 8109718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810971a:	687b      	ldr	r3, [r7, #4]
 810971c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810971e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8109720:	68fb      	ldr	r3, [r7, #12]
 8109722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8109726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810972a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810972c:	683b      	ldr	r3, [r7, #0]
 810972e:	681b      	ldr	r3, [r3, #0]
 8109730:	021b      	lsls	r3, r3, #8
 8109732:	68fa      	ldr	r2, [r7, #12]
 8109734:	4313      	orrs	r3, r2
 8109736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8109738:	693b      	ldr	r3, [r7, #16]
 810973a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810973e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8109740:	683b      	ldr	r3, [r7, #0]
 8109742:	689b      	ldr	r3, [r3, #8]
 8109744:	051b      	lsls	r3, r3, #20
 8109746:	693a      	ldr	r2, [r7, #16]
 8109748:	4313      	orrs	r3, r2
 810974a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810974c:	687b      	ldr	r3, [r7, #4]
 810974e:	4a18      	ldr	r2, [pc, #96]	; (81097b0 <TIM_OC6_SetConfig+0xb8>)
 8109750:	4293      	cmp	r3, r2
 8109752:	d00f      	beq.n	8109774 <TIM_OC6_SetConfig+0x7c>
 8109754:	687b      	ldr	r3, [r7, #4]
 8109756:	4a17      	ldr	r2, [pc, #92]	; (81097b4 <TIM_OC6_SetConfig+0xbc>)
 8109758:	4293      	cmp	r3, r2
 810975a:	d00b      	beq.n	8109774 <TIM_OC6_SetConfig+0x7c>
 810975c:	687b      	ldr	r3, [r7, #4]
 810975e:	4a16      	ldr	r2, [pc, #88]	; (81097b8 <TIM_OC6_SetConfig+0xc0>)
 8109760:	4293      	cmp	r3, r2
 8109762:	d007      	beq.n	8109774 <TIM_OC6_SetConfig+0x7c>
 8109764:	687b      	ldr	r3, [r7, #4]
 8109766:	4a15      	ldr	r2, [pc, #84]	; (81097bc <TIM_OC6_SetConfig+0xc4>)
 8109768:	4293      	cmp	r3, r2
 810976a:	d003      	beq.n	8109774 <TIM_OC6_SetConfig+0x7c>
 810976c:	687b      	ldr	r3, [r7, #4]
 810976e:	4a14      	ldr	r2, [pc, #80]	; (81097c0 <TIM_OC6_SetConfig+0xc8>)
 8109770:	4293      	cmp	r3, r2
 8109772:	d109      	bne.n	8109788 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8109774:	697b      	ldr	r3, [r7, #20]
 8109776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810977a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810977c:	683b      	ldr	r3, [r7, #0]
 810977e:	695b      	ldr	r3, [r3, #20]
 8109780:	029b      	lsls	r3, r3, #10
 8109782:	697a      	ldr	r2, [r7, #20]
 8109784:	4313      	orrs	r3, r2
 8109786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8109788:	687b      	ldr	r3, [r7, #4]
 810978a:	697a      	ldr	r2, [r7, #20]
 810978c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810978e:	687b      	ldr	r3, [r7, #4]
 8109790:	68fa      	ldr	r2, [r7, #12]
 8109792:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8109794:	683b      	ldr	r3, [r7, #0]
 8109796:	685a      	ldr	r2, [r3, #4]
 8109798:	687b      	ldr	r3, [r7, #4]
 810979a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810979c:	687b      	ldr	r3, [r7, #4]
 810979e:	693a      	ldr	r2, [r7, #16]
 81097a0:	621a      	str	r2, [r3, #32]
}
 81097a2:	bf00      	nop
 81097a4:	371c      	adds	r7, #28
 81097a6:	46bd      	mov	sp, r7
 81097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097ac:	4770      	bx	lr
 81097ae:	bf00      	nop
 81097b0:	40010000 	.word	0x40010000
 81097b4:	40010400 	.word	0x40010400
 81097b8:	40014000 	.word	0x40014000
 81097bc:	40014400 	.word	0x40014400
 81097c0:	40014800 	.word	0x40014800

081097c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81097c4:	b480      	push	{r7}
 81097c6:	b087      	sub	sp, #28
 81097c8:	af00      	add	r7, sp, #0
 81097ca:	60f8      	str	r0, [r7, #12]
 81097cc:	60b9      	str	r1, [r7, #8]
 81097ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81097d0:	68fb      	ldr	r3, [r7, #12]
 81097d2:	6a1b      	ldr	r3, [r3, #32]
 81097d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81097d6:	68fb      	ldr	r3, [r7, #12]
 81097d8:	6a1b      	ldr	r3, [r3, #32]
 81097da:	f023 0201 	bic.w	r2, r3, #1
 81097de:	68fb      	ldr	r3, [r7, #12]
 81097e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81097e2:	68fb      	ldr	r3, [r7, #12]
 81097e4:	699b      	ldr	r3, [r3, #24]
 81097e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81097e8:	693b      	ldr	r3, [r7, #16]
 81097ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81097ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81097f0:	687b      	ldr	r3, [r7, #4]
 81097f2:	011b      	lsls	r3, r3, #4
 81097f4:	693a      	ldr	r2, [r7, #16]
 81097f6:	4313      	orrs	r3, r2
 81097f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81097fa:	697b      	ldr	r3, [r7, #20]
 81097fc:	f023 030a 	bic.w	r3, r3, #10
 8109800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8109802:	697a      	ldr	r2, [r7, #20]
 8109804:	68bb      	ldr	r3, [r7, #8]
 8109806:	4313      	orrs	r3, r2
 8109808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810980a:	68fb      	ldr	r3, [r7, #12]
 810980c:	693a      	ldr	r2, [r7, #16]
 810980e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8109810:	68fb      	ldr	r3, [r7, #12]
 8109812:	697a      	ldr	r2, [r7, #20]
 8109814:	621a      	str	r2, [r3, #32]
}
 8109816:	bf00      	nop
 8109818:	371c      	adds	r7, #28
 810981a:	46bd      	mov	sp, r7
 810981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109820:	4770      	bx	lr

08109822 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8109822:	b480      	push	{r7}
 8109824:	b087      	sub	sp, #28
 8109826:	af00      	add	r7, sp, #0
 8109828:	60f8      	str	r0, [r7, #12]
 810982a:	60b9      	str	r1, [r7, #8]
 810982c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810982e:	68fb      	ldr	r3, [r7, #12]
 8109830:	6a1b      	ldr	r3, [r3, #32]
 8109832:	f023 0210 	bic.w	r2, r3, #16
 8109836:	68fb      	ldr	r3, [r7, #12]
 8109838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810983a:	68fb      	ldr	r3, [r7, #12]
 810983c:	699b      	ldr	r3, [r3, #24]
 810983e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8109840:	68fb      	ldr	r3, [r7, #12]
 8109842:	6a1b      	ldr	r3, [r3, #32]
 8109844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8109846:	697b      	ldr	r3, [r7, #20]
 8109848:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810984c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810984e:	687b      	ldr	r3, [r7, #4]
 8109850:	031b      	lsls	r3, r3, #12
 8109852:	697a      	ldr	r2, [r7, #20]
 8109854:	4313      	orrs	r3, r2
 8109856:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8109858:	693b      	ldr	r3, [r7, #16]
 810985a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810985e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8109860:	68bb      	ldr	r3, [r7, #8]
 8109862:	011b      	lsls	r3, r3, #4
 8109864:	693a      	ldr	r2, [r7, #16]
 8109866:	4313      	orrs	r3, r2
 8109868:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810986a:	68fb      	ldr	r3, [r7, #12]
 810986c:	697a      	ldr	r2, [r7, #20]
 810986e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8109870:	68fb      	ldr	r3, [r7, #12]
 8109872:	693a      	ldr	r2, [r7, #16]
 8109874:	621a      	str	r2, [r3, #32]
}
 8109876:	bf00      	nop
 8109878:	371c      	adds	r7, #28
 810987a:	46bd      	mov	sp, r7
 810987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109880:	4770      	bx	lr

08109882 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8109882:	b480      	push	{r7}
 8109884:	b085      	sub	sp, #20
 8109886:	af00      	add	r7, sp, #0
 8109888:	6078      	str	r0, [r7, #4]
 810988a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810988c:	687b      	ldr	r3, [r7, #4]
 810988e:	689b      	ldr	r3, [r3, #8]
 8109890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8109892:	68fb      	ldr	r3, [r7, #12]
 8109894:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8109898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810989c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810989e:	683a      	ldr	r2, [r7, #0]
 81098a0:	68fb      	ldr	r3, [r7, #12]
 81098a2:	4313      	orrs	r3, r2
 81098a4:	f043 0307 	orr.w	r3, r3, #7
 81098a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81098aa:	687b      	ldr	r3, [r7, #4]
 81098ac:	68fa      	ldr	r2, [r7, #12]
 81098ae:	609a      	str	r2, [r3, #8]
}
 81098b0:	bf00      	nop
 81098b2:	3714      	adds	r7, #20
 81098b4:	46bd      	mov	sp, r7
 81098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098ba:	4770      	bx	lr

081098bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 81098bc:	b480      	push	{r7}
 81098be:	b087      	sub	sp, #28
 81098c0:	af00      	add	r7, sp, #0
 81098c2:	60f8      	str	r0, [r7, #12]
 81098c4:	60b9      	str	r1, [r7, #8]
 81098c6:	607a      	str	r2, [r7, #4]
 81098c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 81098ca:	68fb      	ldr	r3, [r7, #12]
 81098cc:	689b      	ldr	r3, [r3, #8]
 81098ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81098d0:	697b      	ldr	r3, [r7, #20]
 81098d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81098d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81098d8:	683b      	ldr	r3, [r7, #0]
 81098da:	021a      	lsls	r2, r3, #8
 81098dc:	687b      	ldr	r3, [r7, #4]
 81098de:	431a      	orrs	r2, r3
 81098e0:	68bb      	ldr	r3, [r7, #8]
 81098e2:	4313      	orrs	r3, r2
 81098e4:	697a      	ldr	r2, [r7, #20]
 81098e6:	4313      	orrs	r3, r2
 81098e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81098ea:	68fb      	ldr	r3, [r7, #12]
 81098ec:	697a      	ldr	r2, [r7, #20]
 81098ee:	609a      	str	r2, [r3, #8]
}
 81098f0:	bf00      	nop
 81098f2:	371c      	adds	r7, #28
 81098f4:	46bd      	mov	sp, r7
 81098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098fa:	4770      	bx	lr

081098fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81098fc:	b480      	push	{r7}
 81098fe:	b087      	sub	sp, #28
 8109900:	af00      	add	r7, sp, #0
 8109902:	60f8      	str	r0, [r7, #12]
 8109904:	60b9      	str	r1, [r7, #8]
 8109906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8109908:	68bb      	ldr	r3, [r7, #8]
 810990a:	f003 031f 	and.w	r3, r3, #31
 810990e:	2201      	movs	r2, #1
 8109910:	fa02 f303 	lsl.w	r3, r2, r3
 8109914:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8109916:	68fb      	ldr	r3, [r7, #12]
 8109918:	6a1a      	ldr	r2, [r3, #32]
 810991a:	697b      	ldr	r3, [r7, #20]
 810991c:	43db      	mvns	r3, r3
 810991e:	401a      	ands	r2, r3
 8109920:	68fb      	ldr	r3, [r7, #12]
 8109922:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8109924:	68fb      	ldr	r3, [r7, #12]
 8109926:	6a1a      	ldr	r2, [r3, #32]
 8109928:	68bb      	ldr	r3, [r7, #8]
 810992a:	f003 031f 	and.w	r3, r3, #31
 810992e:	6879      	ldr	r1, [r7, #4]
 8109930:	fa01 f303 	lsl.w	r3, r1, r3
 8109934:	431a      	orrs	r2, r3
 8109936:	68fb      	ldr	r3, [r7, #12]
 8109938:	621a      	str	r2, [r3, #32]
}
 810993a:	bf00      	nop
 810993c:	371c      	adds	r7, #28
 810993e:	46bd      	mov	sp, r7
 8109940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109944:	4770      	bx	lr
	...

08109948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8109948:	b480      	push	{r7}
 810994a:	b085      	sub	sp, #20
 810994c:	af00      	add	r7, sp, #0
 810994e:	6078      	str	r0, [r7, #4]
 8109950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8109952:	687b      	ldr	r3, [r7, #4]
 8109954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8109958:	2b01      	cmp	r3, #1
 810995a:	d101      	bne.n	8109960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810995c:	2302      	movs	r3, #2
 810995e:	e06d      	b.n	8109a3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8109960:	687b      	ldr	r3, [r7, #4]
 8109962:	2201      	movs	r2, #1
 8109964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109968:	687b      	ldr	r3, [r7, #4]
 810996a:	2202      	movs	r2, #2
 810996c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8109970:	687b      	ldr	r3, [r7, #4]
 8109972:	681b      	ldr	r3, [r3, #0]
 8109974:	685b      	ldr	r3, [r3, #4]
 8109976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8109978:	687b      	ldr	r3, [r7, #4]
 810997a:	681b      	ldr	r3, [r3, #0]
 810997c:	689b      	ldr	r3, [r3, #8]
 810997e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8109980:	687b      	ldr	r3, [r7, #4]
 8109982:	681b      	ldr	r3, [r3, #0]
 8109984:	4a30      	ldr	r2, [pc, #192]	; (8109a48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8109986:	4293      	cmp	r3, r2
 8109988:	d004      	beq.n	8109994 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810998a:	687b      	ldr	r3, [r7, #4]
 810998c:	681b      	ldr	r3, [r3, #0]
 810998e:	4a2f      	ldr	r2, [pc, #188]	; (8109a4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8109990:	4293      	cmp	r3, r2
 8109992:	d108      	bne.n	81099a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8109994:	68fb      	ldr	r3, [r7, #12]
 8109996:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810999a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810999c:	683b      	ldr	r3, [r7, #0]
 810999e:	685b      	ldr	r3, [r3, #4]
 81099a0:	68fa      	ldr	r2, [r7, #12]
 81099a2:	4313      	orrs	r3, r2
 81099a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81099a6:	68fb      	ldr	r3, [r7, #12]
 81099a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81099ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81099ae:	683b      	ldr	r3, [r7, #0]
 81099b0:	681b      	ldr	r3, [r3, #0]
 81099b2:	68fa      	ldr	r2, [r7, #12]
 81099b4:	4313      	orrs	r3, r2
 81099b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81099b8:	687b      	ldr	r3, [r7, #4]
 81099ba:	681b      	ldr	r3, [r3, #0]
 81099bc:	68fa      	ldr	r2, [r7, #12]
 81099be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81099c0:	687b      	ldr	r3, [r7, #4]
 81099c2:	681b      	ldr	r3, [r3, #0]
 81099c4:	4a20      	ldr	r2, [pc, #128]	; (8109a48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81099c6:	4293      	cmp	r3, r2
 81099c8:	d022      	beq.n	8109a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099ca:	687b      	ldr	r3, [r7, #4]
 81099cc:	681b      	ldr	r3, [r3, #0]
 81099ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81099d2:	d01d      	beq.n	8109a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099d4:	687b      	ldr	r3, [r7, #4]
 81099d6:	681b      	ldr	r3, [r3, #0]
 81099d8:	4a1d      	ldr	r2, [pc, #116]	; (8109a50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81099da:	4293      	cmp	r3, r2
 81099dc:	d018      	beq.n	8109a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099de:	687b      	ldr	r3, [r7, #4]
 81099e0:	681b      	ldr	r3, [r3, #0]
 81099e2:	4a1c      	ldr	r2, [pc, #112]	; (8109a54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81099e4:	4293      	cmp	r3, r2
 81099e6:	d013      	beq.n	8109a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099e8:	687b      	ldr	r3, [r7, #4]
 81099ea:	681b      	ldr	r3, [r3, #0]
 81099ec:	4a1a      	ldr	r2, [pc, #104]	; (8109a58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81099ee:	4293      	cmp	r3, r2
 81099f0:	d00e      	beq.n	8109a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099f2:	687b      	ldr	r3, [r7, #4]
 81099f4:	681b      	ldr	r3, [r3, #0]
 81099f6:	4a15      	ldr	r2, [pc, #84]	; (8109a4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81099f8:	4293      	cmp	r3, r2
 81099fa:	d009      	beq.n	8109a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099fc:	687b      	ldr	r3, [r7, #4]
 81099fe:	681b      	ldr	r3, [r3, #0]
 8109a00:	4a16      	ldr	r2, [pc, #88]	; (8109a5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8109a02:	4293      	cmp	r3, r2
 8109a04:	d004      	beq.n	8109a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109a06:	687b      	ldr	r3, [r7, #4]
 8109a08:	681b      	ldr	r3, [r3, #0]
 8109a0a:	4a15      	ldr	r2, [pc, #84]	; (8109a60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8109a0c:	4293      	cmp	r3, r2
 8109a0e:	d10c      	bne.n	8109a2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8109a10:	68bb      	ldr	r3, [r7, #8]
 8109a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8109a16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8109a18:	683b      	ldr	r3, [r7, #0]
 8109a1a:	689b      	ldr	r3, [r3, #8]
 8109a1c:	68ba      	ldr	r2, [r7, #8]
 8109a1e:	4313      	orrs	r3, r2
 8109a20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8109a22:	687b      	ldr	r3, [r7, #4]
 8109a24:	681b      	ldr	r3, [r3, #0]
 8109a26:	68ba      	ldr	r2, [r7, #8]
 8109a28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8109a2a:	687b      	ldr	r3, [r7, #4]
 8109a2c:	2201      	movs	r2, #1
 8109a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8109a32:	687b      	ldr	r3, [r7, #4]
 8109a34:	2200      	movs	r2, #0
 8109a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8109a3a:	2300      	movs	r3, #0
}
 8109a3c:	4618      	mov	r0, r3
 8109a3e:	3714      	adds	r7, #20
 8109a40:	46bd      	mov	sp, r7
 8109a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a46:	4770      	bx	lr
 8109a48:	40010000 	.word	0x40010000
 8109a4c:	40010400 	.word	0x40010400
 8109a50:	40000400 	.word	0x40000400
 8109a54:	40000800 	.word	0x40000800
 8109a58:	40000c00 	.word	0x40000c00
 8109a5c:	40001800 	.word	0x40001800
 8109a60:	40014000 	.word	0x40014000

08109a64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8109a64:	b480      	push	{r7}
 8109a66:	b085      	sub	sp, #20
 8109a68:	af00      	add	r7, sp, #0
 8109a6a:	6078      	str	r0, [r7, #4]
 8109a6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8109a6e:	2300      	movs	r3, #0
 8109a70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8109a72:	687b      	ldr	r3, [r7, #4]
 8109a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8109a78:	2b01      	cmp	r3, #1
 8109a7a:	d101      	bne.n	8109a80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8109a7c:	2302      	movs	r3, #2
 8109a7e:	e065      	b.n	8109b4c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8109a80:	687b      	ldr	r3, [r7, #4]
 8109a82:	2201      	movs	r2, #1
 8109a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8109a88:	68fb      	ldr	r3, [r7, #12]
 8109a8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8109a8e:	683b      	ldr	r3, [r7, #0]
 8109a90:	68db      	ldr	r3, [r3, #12]
 8109a92:	4313      	orrs	r3, r2
 8109a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8109a96:	68fb      	ldr	r3, [r7, #12]
 8109a98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8109a9c:	683b      	ldr	r3, [r7, #0]
 8109a9e:	689b      	ldr	r3, [r3, #8]
 8109aa0:	4313      	orrs	r3, r2
 8109aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8109aa4:	68fb      	ldr	r3, [r7, #12]
 8109aa6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8109aaa:	683b      	ldr	r3, [r7, #0]
 8109aac:	685b      	ldr	r3, [r3, #4]
 8109aae:	4313      	orrs	r3, r2
 8109ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8109ab2:	68fb      	ldr	r3, [r7, #12]
 8109ab4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8109ab8:	683b      	ldr	r3, [r7, #0]
 8109aba:	681b      	ldr	r3, [r3, #0]
 8109abc:	4313      	orrs	r3, r2
 8109abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8109ac0:	68fb      	ldr	r3, [r7, #12]
 8109ac2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8109ac6:	683b      	ldr	r3, [r7, #0]
 8109ac8:	691b      	ldr	r3, [r3, #16]
 8109aca:	4313      	orrs	r3, r2
 8109acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8109ace:	68fb      	ldr	r3, [r7, #12]
 8109ad0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8109ad4:	683b      	ldr	r3, [r7, #0]
 8109ad6:	695b      	ldr	r3, [r3, #20]
 8109ad8:	4313      	orrs	r3, r2
 8109ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8109adc:	68fb      	ldr	r3, [r7, #12]
 8109ade:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8109ae2:	683b      	ldr	r3, [r7, #0]
 8109ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109ae6:	4313      	orrs	r3, r2
 8109ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8109aea:	68fb      	ldr	r3, [r7, #12]
 8109aec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8109af0:	683b      	ldr	r3, [r7, #0]
 8109af2:	699b      	ldr	r3, [r3, #24]
 8109af4:	041b      	lsls	r3, r3, #16
 8109af6:	4313      	orrs	r3, r2
 8109af8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8109afa:	687b      	ldr	r3, [r7, #4]
 8109afc:	681b      	ldr	r3, [r3, #0]
 8109afe:	4a16      	ldr	r2, [pc, #88]	; (8109b58 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8109b00:	4293      	cmp	r3, r2
 8109b02:	d004      	beq.n	8109b0e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8109b04:	687b      	ldr	r3, [r7, #4]
 8109b06:	681b      	ldr	r3, [r3, #0]
 8109b08:	4a14      	ldr	r2, [pc, #80]	; (8109b5c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8109b0a:	4293      	cmp	r3, r2
 8109b0c:	d115      	bne.n	8109b3a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8109b0e:	68fb      	ldr	r3, [r7, #12]
 8109b10:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8109b14:	683b      	ldr	r3, [r7, #0]
 8109b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109b18:	051b      	lsls	r3, r3, #20
 8109b1a:	4313      	orrs	r3, r2
 8109b1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8109b1e:	68fb      	ldr	r3, [r7, #12]
 8109b20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8109b24:	683b      	ldr	r3, [r7, #0]
 8109b26:	69db      	ldr	r3, [r3, #28]
 8109b28:	4313      	orrs	r3, r2
 8109b2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8109b2c:	68fb      	ldr	r3, [r7, #12]
 8109b2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8109b32:	683b      	ldr	r3, [r7, #0]
 8109b34:	6a1b      	ldr	r3, [r3, #32]
 8109b36:	4313      	orrs	r3, r2
 8109b38:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8109b3a:	687b      	ldr	r3, [r7, #4]
 8109b3c:	681b      	ldr	r3, [r3, #0]
 8109b3e:	68fa      	ldr	r2, [r7, #12]
 8109b40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8109b42:	687b      	ldr	r3, [r7, #4]
 8109b44:	2200      	movs	r2, #0
 8109b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8109b4a:	2300      	movs	r3, #0
}
 8109b4c:	4618      	mov	r0, r3
 8109b4e:	3714      	adds	r7, #20
 8109b50:	46bd      	mov	sp, r7
 8109b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b56:	4770      	bx	lr
 8109b58:	40010000 	.word	0x40010000
 8109b5c:	40010400 	.word	0x40010400

08109b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8109b60:	b480      	push	{r7}
 8109b62:	b083      	sub	sp, #12
 8109b64:	af00      	add	r7, sp, #0
 8109b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8109b68:	bf00      	nop
 8109b6a:	370c      	adds	r7, #12
 8109b6c:	46bd      	mov	sp, r7
 8109b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b72:	4770      	bx	lr

08109b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8109b74:	b480      	push	{r7}
 8109b76:	b083      	sub	sp, #12
 8109b78:	af00      	add	r7, sp, #0
 8109b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8109b7c:	bf00      	nop
 8109b7e:	370c      	adds	r7, #12
 8109b80:	46bd      	mov	sp, r7
 8109b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b86:	4770      	bx	lr

08109b88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8109b88:	b480      	push	{r7}
 8109b8a:	b083      	sub	sp, #12
 8109b8c:	af00      	add	r7, sp, #0
 8109b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8109b90:	bf00      	nop
 8109b92:	370c      	adds	r7, #12
 8109b94:	46bd      	mov	sp, r7
 8109b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b9a:	4770      	bx	lr

08109b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8109b9c:	b580      	push	{r7, lr}
 8109b9e:	b082      	sub	sp, #8
 8109ba0:	af00      	add	r7, sp, #0
 8109ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8109ba4:	687b      	ldr	r3, [r7, #4]
 8109ba6:	2b00      	cmp	r3, #0
 8109ba8:	d101      	bne.n	8109bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8109baa:	2301      	movs	r3, #1
 8109bac:	e042      	b.n	8109c34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8109bae:	687b      	ldr	r3, [r7, #4]
 8109bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109bb4:	2b00      	cmp	r3, #0
 8109bb6:	d106      	bne.n	8109bc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8109bb8:	687b      	ldr	r3, [r7, #4]
 8109bba:	2200      	movs	r2, #0
 8109bbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8109bc0:	6878      	ldr	r0, [r7, #4]
 8109bc2:	f7f9 f82f 	bl	8102c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8109bc6:	687b      	ldr	r3, [r7, #4]
 8109bc8:	2224      	movs	r2, #36	; 0x24
 8109bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8109bce:	687b      	ldr	r3, [r7, #4]
 8109bd0:	681b      	ldr	r3, [r3, #0]
 8109bd2:	681a      	ldr	r2, [r3, #0]
 8109bd4:	687b      	ldr	r3, [r7, #4]
 8109bd6:	681b      	ldr	r3, [r3, #0]
 8109bd8:	f022 0201 	bic.w	r2, r2, #1
 8109bdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8109bde:	6878      	ldr	r0, [r7, #4]
 8109be0:	f000 f8ba 	bl	8109d58 <UART_SetConfig>
 8109be4:	4603      	mov	r3, r0
 8109be6:	2b01      	cmp	r3, #1
 8109be8:	d101      	bne.n	8109bee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8109bea:	2301      	movs	r3, #1
 8109bec:	e022      	b.n	8109c34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8109bee:	687b      	ldr	r3, [r7, #4]
 8109bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109bf2:	2b00      	cmp	r3, #0
 8109bf4:	d002      	beq.n	8109bfc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8109bf6:	6878      	ldr	r0, [r7, #4]
 8109bf8:	f000 fe16 	bl	810a828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8109bfc:	687b      	ldr	r3, [r7, #4]
 8109bfe:	681b      	ldr	r3, [r3, #0]
 8109c00:	685a      	ldr	r2, [r3, #4]
 8109c02:	687b      	ldr	r3, [r7, #4]
 8109c04:	681b      	ldr	r3, [r3, #0]
 8109c06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8109c0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8109c0c:	687b      	ldr	r3, [r7, #4]
 8109c0e:	681b      	ldr	r3, [r3, #0]
 8109c10:	689a      	ldr	r2, [r3, #8]
 8109c12:	687b      	ldr	r3, [r7, #4]
 8109c14:	681b      	ldr	r3, [r3, #0]
 8109c16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8109c1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8109c1c:	687b      	ldr	r3, [r7, #4]
 8109c1e:	681b      	ldr	r3, [r3, #0]
 8109c20:	681a      	ldr	r2, [r3, #0]
 8109c22:	687b      	ldr	r3, [r7, #4]
 8109c24:	681b      	ldr	r3, [r3, #0]
 8109c26:	f042 0201 	orr.w	r2, r2, #1
 8109c2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8109c2c:	6878      	ldr	r0, [r7, #4]
 8109c2e:	f000 fe9d 	bl	810a96c <UART_CheckIdleState>
 8109c32:	4603      	mov	r3, r0
}
 8109c34:	4618      	mov	r0, r3
 8109c36:	3708      	adds	r7, #8
 8109c38:	46bd      	mov	sp, r7
 8109c3a:	bd80      	pop	{r7, pc}

08109c3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8109c3c:	b580      	push	{r7, lr}
 8109c3e:	b08a      	sub	sp, #40	; 0x28
 8109c40:	af02      	add	r7, sp, #8
 8109c42:	60f8      	str	r0, [r7, #12]
 8109c44:	60b9      	str	r1, [r7, #8]
 8109c46:	603b      	str	r3, [r7, #0]
 8109c48:	4613      	mov	r3, r2
 8109c4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8109c4c:	68fb      	ldr	r3, [r7, #12]
 8109c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109c52:	2b20      	cmp	r3, #32
 8109c54:	d17b      	bne.n	8109d4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8109c56:	68bb      	ldr	r3, [r7, #8]
 8109c58:	2b00      	cmp	r3, #0
 8109c5a:	d002      	beq.n	8109c62 <HAL_UART_Transmit+0x26>
 8109c5c:	88fb      	ldrh	r3, [r7, #6]
 8109c5e:	2b00      	cmp	r3, #0
 8109c60:	d101      	bne.n	8109c66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8109c62:	2301      	movs	r3, #1
 8109c64:	e074      	b.n	8109d50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109c66:	68fb      	ldr	r3, [r7, #12]
 8109c68:	2200      	movs	r2, #0
 8109c6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8109c6e:	68fb      	ldr	r3, [r7, #12]
 8109c70:	2221      	movs	r2, #33	; 0x21
 8109c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8109c76:	f7f9 fa0b 	bl	8103090 <HAL_GetTick>
 8109c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8109c7c:	68fb      	ldr	r3, [r7, #12]
 8109c7e:	88fa      	ldrh	r2, [r7, #6]
 8109c80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8109c84:	68fb      	ldr	r3, [r7, #12]
 8109c86:	88fa      	ldrh	r2, [r7, #6]
 8109c88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8109c8c:	68fb      	ldr	r3, [r7, #12]
 8109c8e:	689b      	ldr	r3, [r3, #8]
 8109c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109c94:	d108      	bne.n	8109ca8 <HAL_UART_Transmit+0x6c>
 8109c96:	68fb      	ldr	r3, [r7, #12]
 8109c98:	691b      	ldr	r3, [r3, #16]
 8109c9a:	2b00      	cmp	r3, #0
 8109c9c:	d104      	bne.n	8109ca8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8109c9e:	2300      	movs	r3, #0
 8109ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8109ca2:	68bb      	ldr	r3, [r7, #8]
 8109ca4:	61bb      	str	r3, [r7, #24]
 8109ca6:	e003      	b.n	8109cb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8109ca8:	68bb      	ldr	r3, [r7, #8]
 8109caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8109cac:	2300      	movs	r3, #0
 8109cae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8109cb0:	e030      	b.n	8109d14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8109cb2:	683b      	ldr	r3, [r7, #0]
 8109cb4:	9300      	str	r3, [sp, #0]
 8109cb6:	697b      	ldr	r3, [r7, #20]
 8109cb8:	2200      	movs	r2, #0
 8109cba:	2180      	movs	r1, #128	; 0x80
 8109cbc:	68f8      	ldr	r0, [r7, #12]
 8109cbe:	f000 feff 	bl	810aac0 <UART_WaitOnFlagUntilTimeout>
 8109cc2:	4603      	mov	r3, r0
 8109cc4:	2b00      	cmp	r3, #0
 8109cc6:	d005      	beq.n	8109cd4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8109cc8:	68fb      	ldr	r3, [r7, #12]
 8109cca:	2220      	movs	r2, #32
 8109ccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8109cd0:	2303      	movs	r3, #3
 8109cd2:	e03d      	b.n	8109d50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8109cd4:	69fb      	ldr	r3, [r7, #28]
 8109cd6:	2b00      	cmp	r3, #0
 8109cd8:	d10b      	bne.n	8109cf2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8109cda:	69bb      	ldr	r3, [r7, #24]
 8109cdc:	881b      	ldrh	r3, [r3, #0]
 8109cde:	461a      	mov	r2, r3
 8109ce0:	68fb      	ldr	r3, [r7, #12]
 8109ce2:	681b      	ldr	r3, [r3, #0]
 8109ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8109ce8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8109cea:	69bb      	ldr	r3, [r7, #24]
 8109cec:	3302      	adds	r3, #2
 8109cee:	61bb      	str	r3, [r7, #24]
 8109cf0:	e007      	b.n	8109d02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8109cf2:	69fb      	ldr	r3, [r7, #28]
 8109cf4:	781a      	ldrb	r2, [r3, #0]
 8109cf6:	68fb      	ldr	r3, [r7, #12]
 8109cf8:	681b      	ldr	r3, [r3, #0]
 8109cfa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8109cfc:	69fb      	ldr	r3, [r7, #28]
 8109cfe:	3301      	adds	r3, #1
 8109d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8109d02:	68fb      	ldr	r3, [r7, #12]
 8109d04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8109d08:	b29b      	uxth	r3, r3
 8109d0a:	3b01      	subs	r3, #1
 8109d0c:	b29a      	uxth	r2, r3
 8109d0e:	68fb      	ldr	r3, [r7, #12]
 8109d10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8109d14:	68fb      	ldr	r3, [r7, #12]
 8109d16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8109d1a:	b29b      	uxth	r3, r3
 8109d1c:	2b00      	cmp	r3, #0
 8109d1e:	d1c8      	bne.n	8109cb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8109d20:	683b      	ldr	r3, [r7, #0]
 8109d22:	9300      	str	r3, [sp, #0]
 8109d24:	697b      	ldr	r3, [r7, #20]
 8109d26:	2200      	movs	r2, #0
 8109d28:	2140      	movs	r1, #64	; 0x40
 8109d2a:	68f8      	ldr	r0, [r7, #12]
 8109d2c:	f000 fec8 	bl	810aac0 <UART_WaitOnFlagUntilTimeout>
 8109d30:	4603      	mov	r3, r0
 8109d32:	2b00      	cmp	r3, #0
 8109d34:	d005      	beq.n	8109d42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8109d36:	68fb      	ldr	r3, [r7, #12]
 8109d38:	2220      	movs	r2, #32
 8109d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8109d3e:	2303      	movs	r3, #3
 8109d40:	e006      	b.n	8109d50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8109d42:	68fb      	ldr	r3, [r7, #12]
 8109d44:	2220      	movs	r2, #32
 8109d46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8109d4a:	2300      	movs	r3, #0
 8109d4c:	e000      	b.n	8109d50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8109d4e:	2302      	movs	r3, #2
  }
}
 8109d50:	4618      	mov	r0, r3
 8109d52:	3720      	adds	r7, #32
 8109d54:	46bd      	mov	sp, r7
 8109d56:	bd80      	pop	{r7, pc}

08109d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8109d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8109d5c:	b092      	sub	sp, #72	; 0x48
 8109d5e:	af00      	add	r7, sp, #0
 8109d60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8109d62:	2300      	movs	r3, #0
 8109d64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8109d68:	697b      	ldr	r3, [r7, #20]
 8109d6a:	689a      	ldr	r2, [r3, #8]
 8109d6c:	697b      	ldr	r3, [r7, #20]
 8109d6e:	691b      	ldr	r3, [r3, #16]
 8109d70:	431a      	orrs	r2, r3
 8109d72:	697b      	ldr	r3, [r7, #20]
 8109d74:	695b      	ldr	r3, [r3, #20]
 8109d76:	431a      	orrs	r2, r3
 8109d78:	697b      	ldr	r3, [r7, #20]
 8109d7a:	69db      	ldr	r3, [r3, #28]
 8109d7c:	4313      	orrs	r3, r2
 8109d7e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8109d80:	697b      	ldr	r3, [r7, #20]
 8109d82:	681b      	ldr	r3, [r3, #0]
 8109d84:	681a      	ldr	r2, [r3, #0]
 8109d86:	4bbd      	ldr	r3, [pc, #756]	; (810a07c <UART_SetConfig+0x324>)
 8109d88:	4013      	ands	r3, r2
 8109d8a:	697a      	ldr	r2, [r7, #20]
 8109d8c:	6812      	ldr	r2, [r2, #0]
 8109d8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109d90:	430b      	orrs	r3, r1
 8109d92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8109d94:	697b      	ldr	r3, [r7, #20]
 8109d96:	681b      	ldr	r3, [r3, #0]
 8109d98:	685b      	ldr	r3, [r3, #4]
 8109d9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8109d9e:	697b      	ldr	r3, [r7, #20]
 8109da0:	68da      	ldr	r2, [r3, #12]
 8109da2:	697b      	ldr	r3, [r7, #20]
 8109da4:	681b      	ldr	r3, [r3, #0]
 8109da6:	430a      	orrs	r2, r1
 8109da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8109daa:	697b      	ldr	r3, [r7, #20]
 8109dac:	699b      	ldr	r3, [r3, #24]
 8109dae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8109db0:	697b      	ldr	r3, [r7, #20]
 8109db2:	681b      	ldr	r3, [r3, #0]
 8109db4:	4ab2      	ldr	r2, [pc, #712]	; (810a080 <UART_SetConfig+0x328>)
 8109db6:	4293      	cmp	r3, r2
 8109db8:	d004      	beq.n	8109dc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8109dba:	697b      	ldr	r3, [r7, #20]
 8109dbc:	6a1b      	ldr	r3, [r3, #32]
 8109dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8109dc0:	4313      	orrs	r3, r2
 8109dc2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8109dc4:	697b      	ldr	r3, [r7, #20]
 8109dc6:	681b      	ldr	r3, [r3, #0]
 8109dc8:	689b      	ldr	r3, [r3, #8]
 8109dca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8109dce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8109dd2:	697a      	ldr	r2, [r7, #20]
 8109dd4:	6812      	ldr	r2, [r2, #0]
 8109dd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109dd8:	430b      	orrs	r3, r1
 8109dda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8109ddc:	697b      	ldr	r3, [r7, #20]
 8109dde:	681b      	ldr	r3, [r3, #0]
 8109de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109de2:	f023 010f 	bic.w	r1, r3, #15
 8109de6:	697b      	ldr	r3, [r7, #20]
 8109de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8109dea:	697b      	ldr	r3, [r7, #20]
 8109dec:	681b      	ldr	r3, [r3, #0]
 8109dee:	430a      	orrs	r2, r1
 8109df0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8109df2:	697b      	ldr	r3, [r7, #20]
 8109df4:	681b      	ldr	r3, [r3, #0]
 8109df6:	4aa3      	ldr	r2, [pc, #652]	; (810a084 <UART_SetConfig+0x32c>)
 8109df8:	4293      	cmp	r3, r2
 8109dfa:	d177      	bne.n	8109eec <UART_SetConfig+0x194>
 8109dfc:	4ba2      	ldr	r3, [pc, #648]	; (810a088 <UART_SetConfig+0x330>)
 8109dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109e00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109e04:	2b28      	cmp	r3, #40	; 0x28
 8109e06:	d86d      	bhi.n	8109ee4 <UART_SetConfig+0x18c>
 8109e08:	a201      	add	r2, pc, #4	; (adr r2, 8109e10 <UART_SetConfig+0xb8>)
 8109e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109e0e:	bf00      	nop
 8109e10:	08109eb5 	.word	0x08109eb5
 8109e14:	08109ee5 	.word	0x08109ee5
 8109e18:	08109ee5 	.word	0x08109ee5
 8109e1c:	08109ee5 	.word	0x08109ee5
 8109e20:	08109ee5 	.word	0x08109ee5
 8109e24:	08109ee5 	.word	0x08109ee5
 8109e28:	08109ee5 	.word	0x08109ee5
 8109e2c:	08109ee5 	.word	0x08109ee5
 8109e30:	08109ebd 	.word	0x08109ebd
 8109e34:	08109ee5 	.word	0x08109ee5
 8109e38:	08109ee5 	.word	0x08109ee5
 8109e3c:	08109ee5 	.word	0x08109ee5
 8109e40:	08109ee5 	.word	0x08109ee5
 8109e44:	08109ee5 	.word	0x08109ee5
 8109e48:	08109ee5 	.word	0x08109ee5
 8109e4c:	08109ee5 	.word	0x08109ee5
 8109e50:	08109ec5 	.word	0x08109ec5
 8109e54:	08109ee5 	.word	0x08109ee5
 8109e58:	08109ee5 	.word	0x08109ee5
 8109e5c:	08109ee5 	.word	0x08109ee5
 8109e60:	08109ee5 	.word	0x08109ee5
 8109e64:	08109ee5 	.word	0x08109ee5
 8109e68:	08109ee5 	.word	0x08109ee5
 8109e6c:	08109ee5 	.word	0x08109ee5
 8109e70:	08109ecd 	.word	0x08109ecd
 8109e74:	08109ee5 	.word	0x08109ee5
 8109e78:	08109ee5 	.word	0x08109ee5
 8109e7c:	08109ee5 	.word	0x08109ee5
 8109e80:	08109ee5 	.word	0x08109ee5
 8109e84:	08109ee5 	.word	0x08109ee5
 8109e88:	08109ee5 	.word	0x08109ee5
 8109e8c:	08109ee5 	.word	0x08109ee5
 8109e90:	08109ed5 	.word	0x08109ed5
 8109e94:	08109ee5 	.word	0x08109ee5
 8109e98:	08109ee5 	.word	0x08109ee5
 8109e9c:	08109ee5 	.word	0x08109ee5
 8109ea0:	08109ee5 	.word	0x08109ee5
 8109ea4:	08109ee5 	.word	0x08109ee5
 8109ea8:	08109ee5 	.word	0x08109ee5
 8109eac:	08109ee5 	.word	0x08109ee5
 8109eb0:	08109edd 	.word	0x08109edd
 8109eb4:	2301      	movs	r3, #1
 8109eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109eba:	e220      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109ebc:	2304      	movs	r3, #4
 8109ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ec2:	e21c      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109ec4:	2308      	movs	r3, #8
 8109ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109eca:	e218      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109ecc:	2310      	movs	r3, #16
 8109ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ed2:	e214      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109ed4:	2320      	movs	r3, #32
 8109ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109eda:	e210      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109edc:	2340      	movs	r3, #64	; 0x40
 8109ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ee2:	e20c      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109ee4:	2380      	movs	r3, #128	; 0x80
 8109ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109eea:	e208      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109eec:	697b      	ldr	r3, [r7, #20]
 8109eee:	681b      	ldr	r3, [r3, #0]
 8109ef0:	4a66      	ldr	r2, [pc, #408]	; (810a08c <UART_SetConfig+0x334>)
 8109ef2:	4293      	cmp	r3, r2
 8109ef4:	d130      	bne.n	8109f58 <UART_SetConfig+0x200>
 8109ef6:	4b64      	ldr	r3, [pc, #400]	; (810a088 <UART_SetConfig+0x330>)
 8109ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109efa:	f003 0307 	and.w	r3, r3, #7
 8109efe:	2b05      	cmp	r3, #5
 8109f00:	d826      	bhi.n	8109f50 <UART_SetConfig+0x1f8>
 8109f02:	a201      	add	r2, pc, #4	; (adr r2, 8109f08 <UART_SetConfig+0x1b0>)
 8109f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109f08:	08109f21 	.word	0x08109f21
 8109f0c:	08109f29 	.word	0x08109f29
 8109f10:	08109f31 	.word	0x08109f31
 8109f14:	08109f39 	.word	0x08109f39
 8109f18:	08109f41 	.word	0x08109f41
 8109f1c:	08109f49 	.word	0x08109f49
 8109f20:	2300      	movs	r3, #0
 8109f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f26:	e1ea      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109f28:	2304      	movs	r3, #4
 8109f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f2e:	e1e6      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109f30:	2308      	movs	r3, #8
 8109f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f36:	e1e2      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109f38:	2310      	movs	r3, #16
 8109f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f3e:	e1de      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109f40:	2320      	movs	r3, #32
 8109f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f46:	e1da      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109f48:	2340      	movs	r3, #64	; 0x40
 8109f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f4e:	e1d6      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109f50:	2380      	movs	r3, #128	; 0x80
 8109f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f56:	e1d2      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109f58:	697b      	ldr	r3, [r7, #20]
 8109f5a:	681b      	ldr	r3, [r3, #0]
 8109f5c:	4a4c      	ldr	r2, [pc, #304]	; (810a090 <UART_SetConfig+0x338>)
 8109f5e:	4293      	cmp	r3, r2
 8109f60:	d130      	bne.n	8109fc4 <UART_SetConfig+0x26c>
 8109f62:	4b49      	ldr	r3, [pc, #292]	; (810a088 <UART_SetConfig+0x330>)
 8109f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109f66:	f003 0307 	and.w	r3, r3, #7
 8109f6a:	2b05      	cmp	r3, #5
 8109f6c:	d826      	bhi.n	8109fbc <UART_SetConfig+0x264>
 8109f6e:	a201      	add	r2, pc, #4	; (adr r2, 8109f74 <UART_SetConfig+0x21c>)
 8109f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109f74:	08109f8d 	.word	0x08109f8d
 8109f78:	08109f95 	.word	0x08109f95
 8109f7c:	08109f9d 	.word	0x08109f9d
 8109f80:	08109fa5 	.word	0x08109fa5
 8109f84:	08109fad 	.word	0x08109fad
 8109f88:	08109fb5 	.word	0x08109fb5
 8109f8c:	2300      	movs	r3, #0
 8109f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f92:	e1b4      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109f94:	2304      	movs	r3, #4
 8109f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f9a:	e1b0      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109f9c:	2308      	movs	r3, #8
 8109f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fa2:	e1ac      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109fa4:	2310      	movs	r3, #16
 8109fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109faa:	e1a8      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109fac:	2320      	movs	r3, #32
 8109fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fb2:	e1a4      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109fb4:	2340      	movs	r3, #64	; 0x40
 8109fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fba:	e1a0      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109fbc:	2380      	movs	r3, #128	; 0x80
 8109fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fc2:	e19c      	b.n	810a2fe <UART_SetConfig+0x5a6>
 8109fc4:	697b      	ldr	r3, [r7, #20]
 8109fc6:	681b      	ldr	r3, [r3, #0]
 8109fc8:	4a32      	ldr	r2, [pc, #200]	; (810a094 <UART_SetConfig+0x33c>)
 8109fca:	4293      	cmp	r3, r2
 8109fcc:	d130      	bne.n	810a030 <UART_SetConfig+0x2d8>
 8109fce:	4b2e      	ldr	r3, [pc, #184]	; (810a088 <UART_SetConfig+0x330>)
 8109fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109fd2:	f003 0307 	and.w	r3, r3, #7
 8109fd6:	2b05      	cmp	r3, #5
 8109fd8:	d826      	bhi.n	810a028 <UART_SetConfig+0x2d0>
 8109fda:	a201      	add	r2, pc, #4	; (adr r2, 8109fe0 <UART_SetConfig+0x288>)
 8109fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109fe0:	08109ff9 	.word	0x08109ff9
 8109fe4:	0810a001 	.word	0x0810a001
 8109fe8:	0810a009 	.word	0x0810a009
 8109fec:	0810a011 	.word	0x0810a011
 8109ff0:	0810a019 	.word	0x0810a019
 8109ff4:	0810a021 	.word	0x0810a021
 8109ff8:	2300      	movs	r3, #0
 8109ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ffe:	e17e      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a000:	2304      	movs	r3, #4
 810a002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a006:	e17a      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a008:	2308      	movs	r3, #8
 810a00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a00e:	e176      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a010:	2310      	movs	r3, #16
 810a012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a016:	e172      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a018:	2320      	movs	r3, #32
 810a01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a01e:	e16e      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a020:	2340      	movs	r3, #64	; 0x40
 810a022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a026:	e16a      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a028:	2380      	movs	r3, #128	; 0x80
 810a02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a02e:	e166      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a030:	697b      	ldr	r3, [r7, #20]
 810a032:	681b      	ldr	r3, [r3, #0]
 810a034:	4a18      	ldr	r2, [pc, #96]	; (810a098 <UART_SetConfig+0x340>)
 810a036:	4293      	cmp	r3, r2
 810a038:	d140      	bne.n	810a0bc <UART_SetConfig+0x364>
 810a03a:	4b13      	ldr	r3, [pc, #76]	; (810a088 <UART_SetConfig+0x330>)
 810a03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a03e:	f003 0307 	and.w	r3, r3, #7
 810a042:	2b05      	cmp	r3, #5
 810a044:	d836      	bhi.n	810a0b4 <UART_SetConfig+0x35c>
 810a046:	a201      	add	r2, pc, #4	; (adr r2, 810a04c <UART_SetConfig+0x2f4>)
 810a048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a04c:	0810a065 	.word	0x0810a065
 810a050:	0810a06d 	.word	0x0810a06d
 810a054:	0810a075 	.word	0x0810a075
 810a058:	0810a09d 	.word	0x0810a09d
 810a05c:	0810a0a5 	.word	0x0810a0a5
 810a060:	0810a0ad 	.word	0x0810a0ad
 810a064:	2300      	movs	r3, #0
 810a066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a06a:	e148      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a06c:	2304      	movs	r3, #4
 810a06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a072:	e144      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a074:	2308      	movs	r3, #8
 810a076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a07a:	e140      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a07c:	cfff69f3 	.word	0xcfff69f3
 810a080:	58000c00 	.word	0x58000c00
 810a084:	40011000 	.word	0x40011000
 810a088:	58024400 	.word	0x58024400
 810a08c:	40004400 	.word	0x40004400
 810a090:	40004800 	.word	0x40004800
 810a094:	40004c00 	.word	0x40004c00
 810a098:	40005000 	.word	0x40005000
 810a09c:	2310      	movs	r3, #16
 810a09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0a2:	e12c      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a0a4:	2320      	movs	r3, #32
 810a0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0aa:	e128      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a0ac:	2340      	movs	r3, #64	; 0x40
 810a0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0b2:	e124      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a0b4:	2380      	movs	r3, #128	; 0x80
 810a0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0ba:	e120      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a0bc:	697b      	ldr	r3, [r7, #20]
 810a0be:	681b      	ldr	r3, [r3, #0]
 810a0c0:	4acb      	ldr	r2, [pc, #812]	; (810a3f0 <UART_SetConfig+0x698>)
 810a0c2:	4293      	cmp	r3, r2
 810a0c4:	d176      	bne.n	810a1b4 <UART_SetConfig+0x45c>
 810a0c6:	4bcb      	ldr	r3, [pc, #812]	; (810a3f4 <UART_SetConfig+0x69c>)
 810a0c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a0ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810a0ce:	2b28      	cmp	r3, #40	; 0x28
 810a0d0:	d86c      	bhi.n	810a1ac <UART_SetConfig+0x454>
 810a0d2:	a201      	add	r2, pc, #4	; (adr r2, 810a0d8 <UART_SetConfig+0x380>)
 810a0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a0d8:	0810a17d 	.word	0x0810a17d
 810a0dc:	0810a1ad 	.word	0x0810a1ad
 810a0e0:	0810a1ad 	.word	0x0810a1ad
 810a0e4:	0810a1ad 	.word	0x0810a1ad
 810a0e8:	0810a1ad 	.word	0x0810a1ad
 810a0ec:	0810a1ad 	.word	0x0810a1ad
 810a0f0:	0810a1ad 	.word	0x0810a1ad
 810a0f4:	0810a1ad 	.word	0x0810a1ad
 810a0f8:	0810a185 	.word	0x0810a185
 810a0fc:	0810a1ad 	.word	0x0810a1ad
 810a100:	0810a1ad 	.word	0x0810a1ad
 810a104:	0810a1ad 	.word	0x0810a1ad
 810a108:	0810a1ad 	.word	0x0810a1ad
 810a10c:	0810a1ad 	.word	0x0810a1ad
 810a110:	0810a1ad 	.word	0x0810a1ad
 810a114:	0810a1ad 	.word	0x0810a1ad
 810a118:	0810a18d 	.word	0x0810a18d
 810a11c:	0810a1ad 	.word	0x0810a1ad
 810a120:	0810a1ad 	.word	0x0810a1ad
 810a124:	0810a1ad 	.word	0x0810a1ad
 810a128:	0810a1ad 	.word	0x0810a1ad
 810a12c:	0810a1ad 	.word	0x0810a1ad
 810a130:	0810a1ad 	.word	0x0810a1ad
 810a134:	0810a1ad 	.word	0x0810a1ad
 810a138:	0810a195 	.word	0x0810a195
 810a13c:	0810a1ad 	.word	0x0810a1ad
 810a140:	0810a1ad 	.word	0x0810a1ad
 810a144:	0810a1ad 	.word	0x0810a1ad
 810a148:	0810a1ad 	.word	0x0810a1ad
 810a14c:	0810a1ad 	.word	0x0810a1ad
 810a150:	0810a1ad 	.word	0x0810a1ad
 810a154:	0810a1ad 	.word	0x0810a1ad
 810a158:	0810a19d 	.word	0x0810a19d
 810a15c:	0810a1ad 	.word	0x0810a1ad
 810a160:	0810a1ad 	.word	0x0810a1ad
 810a164:	0810a1ad 	.word	0x0810a1ad
 810a168:	0810a1ad 	.word	0x0810a1ad
 810a16c:	0810a1ad 	.word	0x0810a1ad
 810a170:	0810a1ad 	.word	0x0810a1ad
 810a174:	0810a1ad 	.word	0x0810a1ad
 810a178:	0810a1a5 	.word	0x0810a1a5
 810a17c:	2301      	movs	r3, #1
 810a17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a182:	e0bc      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a184:	2304      	movs	r3, #4
 810a186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a18a:	e0b8      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a18c:	2308      	movs	r3, #8
 810a18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a192:	e0b4      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a194:	2310      	movs	r3, #16
 810a196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a19a:	e0b0      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a19c:	2320      	movs	r3, #32
 810a19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1a2:	e0ac      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a1a4:	2340      	movs	r3, #64	; 0x40
 810a1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1aa:	e0a8      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a1ac:	2380      	movs	r3, #128	; 0x80
 810a1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1b2:	e0a4      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a1b4:	697b      	ldr	r3, [r7, #20]
 810a1b6:	681b      	ldr	r3, [r3, #0]
 810a1b8:	4a8f      	ldr	r2, [pc, #572]	; (810a3f8 <UART_SetConfig+0x6a0>)
 810a1ba:	4293      	cmp	r3, r2
 810a1bc:	d130      	bne.n	810a220 <UART_SetConfig+0x4c8>
 810a1be:	4b8d      	ldr	r3, [pc, #564]	; (810a3f4 <UART_SetConfig+0x69c>)
 810a1c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a1c2:	f003 0307 	and.w	r3, r3, #7
 810a1c6:	2b05      	cmp	r3, #5
 810a1c8:	d826      	bhi.n	810a218 <UART_SetConfig+0x4c0>
 810a1ca:	a201      	add	r2, pc, #4	; (adr r2, 810a1d0 <UART_SetConfig+0x478>)
 810a1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a1d0:	0810a1e9 	.word	0x0810a1e9
 810a1d4:	0810a1f1 	.word	0x0810a1f1
 810a1d8:	0810a1f9 	.word	0x0810a1f9
 810a1dc:	0810a201 	.word	0x0810a201
 810a1e0:	0810a209 	.word	0x0810a209
 810a1e4:	0810a211 	.word	0x0810a211
 810a1e8:	2300      	movs	r3, #0
 810a1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1ee:	e086      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a1f0:	2304      	movs	r3, #4
 810a1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1f6:	e082      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a1f8:	2308      	movs	r3, #8
 810a1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1fe:	e07e      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a200:	2310      	movs	r3, #16
 810a202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a206:	e07a      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a208:	2320      	movs	r3, #32
 810a20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a20e:	e076      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a210:	2340      	movs	r3, #64	; 0x40
 810a212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a216:	e072      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a218:	2380      	movs	r3, #128	; 0x80
 810a21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a21e:	e06e      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a220:	697b      	ldr	r3, [r7, #20]
 810a222:	681b      	ldr	r3, [r3, #0]
 810a224:	4a75      	ldr	r2, [pc, #468]	; (810a3fc <UART_SetConfig+0x6a4>)
 810a226:	4293      	cmp	r3, r2
 810a228:	d130      	bne.n	810a28c <UART_SetConfig+0x534>
 810a22a:	4b72      	ldr	r3, [pc, #456]	; (810a3f4 <UART_SetConfig+0x69c>)
 810a22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a22e:	f003 0307 	and.w	r3, r3, #7
 810a232:	2b05      	cmp	r3, #5
 810a234:	d826      	bhi.n	810a284 <UART_SetConfig+0x52c>
 810a236:	a201      	add	r2, pc, #4	; (adr r2, 810a23c <UART_SetConfig+0x4e4>)
 810a238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a23c:	0810a255 	.word	0x0810a255
 810a240:	0810a25d 	.word	0x0810a25d
 810a244:	0810a265 	.word	0x0810a265
 810a248:	0810a26d 	.word	0x0810a26d
 810a24c:	0810a275 	.word	0x0810a275
 810a250:	0810a27d 	.word	0x0810a27d
 810a254:	2300      	movs	r3, #0
 810a256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a25a:	e050      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a25c:	2304      	movs	r3, #4
 810a25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a262:	e04c      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a264:	2308      	movs	r3, #8
 810a266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a26a:	e048      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a26c:	2310      	movs	r3, #16
 810a26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a272:	e044      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a274:	2320      	movs	r3, #32
 810a276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a27a:	e040      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a27c:	2340      	movs	r3, #64	; 0x40
 810a27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a282:	e03c      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a284:	2380      	movs	r3, #128	; 0x80
 810a286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a28a:	e038      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a28c:	697b      	ldr	r3, [r7, #20]
 810a28e:	681b      	ldr	r3, [r3, #0]
 810a290:	4a5b      	ldr	r2, [pc, #364]	; (810a400 <UART_SetConfig+0x6a8>)
 810a292:	4293      	cmp	r3, r2
 810a294:	d130      	bne.n	810a2f8 <UART_SetConfig+0x5a0>
 810a296:	4b57      	ldr	r3, [pc, #348]	; (810a3f4 <UART_SetConfig+0x69c>)
 810a298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a29a:	f003 0307 	and.w	r3, r3, #7
 810a29e:	2b05      	cmp	r3, #5
 810a2a0:	d826      	bhi.n	810a2f0 <UART_SetConfig+0x598>
 810a2a2:	a201      	add	r2, pc, #4	; (adr r2, 810a2a8 <UART_SetConfig+0x550>)
 810a2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a2a8:	0810a2c1 	.word	0x0810a2c1
 810a2ac:	0810a2c9 	.word	0x0810a2c9
 810a2b0:	0810a2d1 	.word	0x0810a2d1
 810a2b4:	0810a2d9 	.word	0x0810a2d9
 810a2b8:	0810a2e1 	.word	0x0810a2e1
 810a2bc:	0810a2e9 	.word	0x0810a2e9
 810a2c0:	2302      	movs	r3, #2
 810a2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2c6:	e01a      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a2c8:	2304      	movs	r3, #4
 810a2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2ce:	e016      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a2d0:	2308      	movs	r3, #8
 810a2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2d6:	e012      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a2d8:	2310      	movs	r3, #16
 810a2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2de:	e00e      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a2e0:	2320      	movs	r3, #32
 810a2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2e6:	e00a      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a2e8:	2340      	movs	r3, #64	; 0x40
 810a2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2ee:	e006      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a2f0:	2380      	movs	r3, #128	; 0x80
 810a2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2f6:	e002      	b.n	810a2fe <UART_SetConfig+0x5a6>
 810a2f8:	2380      	movs	r3, #128	; 0x80
 810a2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810a2fe:	697b      	ldr	r3, [r7, #20]
 810a300:	681b      	ldr	r3, [r3, #0]
 810a302:	4a3f      	ldr	r2, [pc, #252]	; (810a400 <UART_SetConfig+0x6a8>)
 810a304:	4293      	cmp	r3, r2
 810a306:	f040 80f8 	bne.w	810a4fa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810a30a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a30e:	2b20      	cmp	r3, #32
 810a310:	dc46      	bgt.n	810a3a0 <UART_SetConfig+0x648>
 810a312:	2b02      	cmp	r3, #2
 810a314:	f2c0 8082 	blt.w	810a41c <UART_SetConfig+0x6c4>
 810a318:	3b02      	subs	r3, #2
 810a31a:	2b1e      	cmp	r3, #30
 810a31c:	d87e      	bhi.n	810a41c <UART_SetConfig+0x6c4>
 810a31e:	a201      	add	r2, pc, #4	; (adr r2, 810a324 <UART_SetConfig+0x5cc>)
 810a320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a324:	0810a3a7 	.word	0x0810a3a7
 810a328:	0810a41d 	.word	0x0810a41d
 810a32c:	0810a3af 	.word	0x0810a3af
 810a330:	0810a41d 	.word	0x0810a41d
 810a334:	0810a41d 	.word	0x0810a41d
 810a338:	0810a41d 	.word	0x0810a41d
 810a33c:	0810a3bf 	.word	0x0810a3bf
 810a340:	0810a41d 	.word	0x0810a41d
 810a344:	0810a41d 	.word	0x0810a41d
 810a348:	0810a41d 	.word	0x0810a41d
 810a34c:	0810a41d 	.word	0x0810a41d
 810a350:	0810a41d 	.word	0x0810a41d
 810a354:	0810a41d 	.word	0x0810a41d
 810a358:	0810a41d 	.word	0x0810a41d
 810a35c:	0810a3cf 	.word	0x0810a3cf
 810a360:	0810a41d 	.word	0x0810a41d
 810a364:	0810a41d 	.word	0x0810a41d
 810a368:	0810a41d 	.word	0x0810a41d
 810a36c:	0810a41d 	.word	0x0810a41d
 810a370:	0810a41d 	.word	0x0810a41d
 810a374:	0810a41d 	.word	0x0810a41d
 810a378:	0810a41d 	.word	0x0810a41d
 810a37c:	0810a41d 	.word	0x0810a41d
 810a380:	0810a41d 	.word	0x0810a41d
 810a384:	0810a41d 	.word	0x0810a41d
 810a388:	0810a41d 	.word	0x0810a41d
 810a38c:	0810a41d 	.word	0x0810a41d
 810a390:	0810a41d 	.word	0x0810a41d
 810a394:	0810a41d 	.word	0x0810a41d
 810a398:	0810a41d 	.word	0x0810a41d
 810a39c:	0810a40f 	.word	0x0810a40f
 810a3a0:	2b40      	cmp	r3, #64	; 0x40
 810a3a2:	d037      	beq.n	810a414 <UART_SetConfig+0x6bc>
 810a3a4:	e03a      	b.n	810a41c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810a3a6:	f7fd faef 	bl	8107988 <HAL_RCCEx_GetD3PCLK1Freq>
 810a3aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a3ac:	e03c      	b.n	810a428 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a3ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a3b2:	4618      	mov	r0, r3
 810a3b4:	f7fd fafe 	bl	81079b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a3bc:	e034      	b.n	810a428 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a3be:	f107 0318 	add.w	r3, r7, #24
 810a3c2:	4618      	mov	r0, r3
 810a3c4:	f7fd fc4a 	bl	8107c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a3c8:	69fb      	ldr	r3, [r7, #28]
 810a3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a3cc:	e02c      	b.n	810a428 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a3ce:	4b09      	ldr	r3, [pc, #36]	; (810a3f4 <UART_SetConfig+0x69c>)
 810a3d0:	681b      	ldr	r3, [r3, #0]
 810a3d2:	f003 0320 	and.w	r3, r3, #32
 810a3d6:	2b00      	cmp	r3, #0
 810a3d8:	d016      	beq.n	810a408 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a3da:	4b06      	ldr	r3, [pc, #24]	; (810a3f4 <UART_SetConfig+0x69c>)
 810a3dc:	681b      	ldr	r3, [r3, #0]
 810a3de:	08db      	lsrs	r3, r3, #3
 810a3e0:	f003 0303 	and.w	r3, r3, #3
 810a3e4:	4a07      	ldr	r2, [pc, #28]	; (810a404 <UART_SetConfig+0x6ac>)
 810a3e6:	fa22 f303 	lsr.w	r3, r2, r3
 810a3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a3ec:	e01c      	b.n	810a428 <UART_SetConfig+0x6d0>
 810a3ee:	bf00      	nop
 810a3f0:	40011400 	.word	0x40011400
 810a3f4:	58024400 	.word	0x58024400
 810a3f8:	40007800 	.word	0x40007800
 810a3fc:	40007c00 	.word	0x40007c00
 810a400:	58000c00 	.word	0x58000c00
 810a404:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810a408:	4b9d      	ldr	r3, [pc, #628]	; (810a680 <UART_SetConfig+0x928>)
 810a40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a40c:	e00c      	b.n	810a428 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a40e:	4b9d      	ldr	r3, [pc, #628]	; (810a684 <UART_SetConfig+0x92c>)
 810a410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a412:	e009      	b.n	810a428 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a418:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a41a:	e005      	b.n	810a428 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810a41c:	2300      	movs	r3, #0
 810a41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a420:	2301      	movs	r3, #1
 810a422:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a426:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810a428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a42a:	2b00      	cmp	r3, #0
 810a42c:	f000 81de 	beq.w	810a7ec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810a430:	697b      	ldr	r3, [r7, #20]
 810a432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a434:	4a94      	ldr	r2, [pc, #592]	; (810a688 <UART_SetConfig+0x930>)
 810a436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a43a:	461a      	mov	r2, r3
 810a43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a43e:	fbb3 f3f2 	udiv	r3, r3, r2
 810a442:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a444:	697b      	ldr	r3, [r7, #20]
 810a446:	685a      	ldr	r2, [r3, #4]
 810a448:	4613      	mov	r3, r2
 810a44a:	005b      	lsls	r3, r3, #1
 810a44c:	4413      	add	r3, r2
 810a44e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a450:	429a      	cmp	r2, r3
 810a452:	d305      	bcc.n	810a460 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810a454:	697b      	ldr	r3, [r7, #20]
 810a456:	685b      	ldr	r3, [r3, #4]
 810a458:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a45a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a45c:	429a      	cmp	r2, r3
 810a45e:	d903      	bls.n	810a468 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810a460:	2301      	movs	r3, #1
 810a462:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a466:	e1c1      	b.n	810a7ec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a46a:	2200      	movs	r2, #0
 810a46c:	60bb      	str	r3, [r7, #8]
 810a46e:	60fa      	str	r2, [r7, #12]
 810a470:	697b      	ldr	r3, [r7, #20]
 810a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a474:	4a84      	ldr	r2, [pc, #528]	; (810a688 <UART_SetConfig+0x930>)
 810a476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a47a:	b29b      	uxth	r3, r3
 810a47c:	2200      	movs	r2, #0
 810a47e:	603b      	str	r3, [r7, #0]
 810a480:	607a      	str	r2, [r7, #4]
 810a482:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a486:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810a48a:	f7f6 fc85 	bl	8100d98 <__aeabi_uldivmod>
 810a48e:	4602      	mov	r2, r0
 810a490:	460b      	mov	r3, r1
 810a492:	4610      	mov	r0, r2
 810a494:	4619      	mov	r1, r3
 810a496:	f04f 0200 	mov.w	r2, #0
 810a49a:	f04f 0300 	mov.w	r3, #0
 810a49e:	020b      	lsls	r3, r1, #8
 810a4a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810a4a4:	0202      	lsls	r2, r0, #8
 810a4a6:	6979      	ldr	r1, [r7, #20]
 810a4a8:	6849      	ldr	r1, [r1, #4]
 810a4aa:	0849      	lsrs	r1, r1, #1
 810a4ac:	2000      	movs	r0, #0
 810a4ae:	460c      	mov	r4, r1
 810a4b0:	4605      	mov	r5, r0
 810a4b2:	eb12 0804 	adds.w	r8, r2, r4
 810a4b6:	eb43 0905 	adc.w	r9, r3, r5
 810a4ba:	697b      	ldr	r3, [r7, #20]
 810a4bc:	685b      	ldr	r3, [r3, #4]
 810a4be:	2200      	movs	r2, #0
 810a4c0:	469a      	mov	sl, r3
 810a4c2:	4693      	mov	fp, r2
 810a4c4:	4652      	mov	r2, sl
 810a4c6:	465b      	mov	r3, fp
 810a4c8:	4640      	mov	r0, r8
 810a4ca:	4649      	mov	r1, r9
 810a4cc:	f7f6 fc64 	bl	8100d98 <__aeabi_uldivmod>
 810a4d0:	4602      	mov	r2, r0
 810a4d2:	460b      	mov	r3, r1
 810a4d4:	4613      	mov	r3, r2
 810a4d6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810a4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a4da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810a4de:	d308      	bcc.n	810a4f2 <UART_SetConfig+0x79a>
 810a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a4e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a4e6:	d204      	bcs.n	810a4f2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810a4e8:	697b      	ldr	r3, [r7, #20]
 810a4ea:	681b      	ldr	r3, [r3, #0]
 810a4ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810a4ee:	60da      	str	r2, [r3, #12]
 810a4f0:	e17c      	b.n	810a7ec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810a4f2:	2301      	movs	r3, #1
 810a4f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a4f8:	e178      	b.n	810a7ec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810a4fa:	697b      	ldr	r3, [r7, #20]
 810a4fc:	69db      	ldr	r3, [r3, #28]
 810a4fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810a502:	f040 80c5 	bne.w	810a690 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810a506:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a50a:	2b20      	cmp	r3, #32
 810a50c:	dc48      	bgt.n	810a5a0 <UART_SetConfig+0x848>
 810a50e:	2b00      	cmp	r3, #0
 810a510:	db7b      	blt.n	810a60a <UART_SetConfig+0x8b2>
 810a512:	2b20      	cmp	r3, #32
 810a514:	d879      	bhi.n	810a60a <UART_SetConfig+0x8b2>
 810a516:	a201      	add	r2, pc, #4	; (adr r2, 810a51c <UART_SetConfig+0x7c4>)
 810a518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a51c:	0810a5a7 	.word	0x0810a5a7
 810a520:	0810a5af 	.word	0x0810a5af
 810a524:	0810a60b 	.word	0x0810a60b
 810a528:	0810a60b 	.word	0x0810a60b
 810a52c:	0810a5b7 	.word	0x0810a5b7
 810a530:	0810a60b 	.word	0x0810a60b
 810a534:	0810a60b 	.word	0x0810a60b
 810a538:	0810a60b 	.word	0x0810a60b
 810a53c:	0810a5c7 	.word	0x0810a5c7
 810a540:	0810a60b 	.word	0x0810a60b
 810a544:	0810a60b 	.word	0x0810a60b
 810a548:	0810a60b 	.word	0x0810a60b
 810a54c:	0810a60b 	.word	0x0810a60b
 810a550:	0810a60b 	.word	0x0810a60b
 810a554:	0810a60b 	.word	0x0810a60b
 810a558:	0810a60b 	.word	0x0810a60b
 810a55c:	0810a5d7 	.word	0x0810a5d7
 810a560:	0810a60b 	.word	0x0810a60b
 810a564:	0810a60b 	.word	0x0810a60b
 810a568:	0810a60b 	.word	0x0810a60b
 810a56c:	0810a60b 	.word	0x0810a60b
 810a570:	0810a60b 	.word	0x0810a60b
 810a574:	0810a60b 	.word	0x0810a60b
 810a578:	0810a60b 	.word	0x0810a60b
 810a57c:	0810a60b 	.word	0x0810a60b
 810a580:	0810a60b 	.word	0x0810a60b
 810a584:	0810a60b 	.word	0x0810a60b
 810a588:	0810a60b 	.word	0x0810a60b
 810a58c:	0810a60b 	.word	0x0810a60b
 810a590:	0810a60b 	.word	0x0810a60b
 810a594:	0810a60b 	.word	0x0810a60b
 810a598:	0810a60b 	.word	0x0810a60b
 810a59c:	0810a5fd 	.word	0x0810a5fd
 810a5a0:	2b40      	cmp	r3, #64	; 0x40
 810a5a2:	d02e      	beq.n	810a602 <UART_SetConfig+0x8aa>
 810a5a4:	e031      	b.n	810a60a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a5a6:	f7fb fa39 	bl	8105a1c <HAL_RCC_GetPCLK1Freq>
 810a5aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a5ac:	e033      	b.n	810a616 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a5ae:	f7fb fa4b 	bl	8105a48 <HAL_RCC_GetPCLK2Freq>
 810a5b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a5b4:	e02f      	b.n	810a616 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a5b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a5ba:	4618      	mov	r0, r3
 810a5bc:	f7fd f9fa 	bl	81079b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a5c4:	e027      	b.n	810a616 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a5c6:	f107 0318 	add.w	r3, r7, #24
 810a5ca:	4618      	mov	r0, r3
 810a5cc:	f7fd fb46 	bl	8107c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a5d0:	69fb      	ldr	r3, [r7, #28]
 810a5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a5d4:	e01f      	b.n	810a616 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a5d6:	4b2d      	ldr	r3, [pc, #180]	; (810a68c <UART_SetConfig+0x934>)
 810a5d8:	681b      	ldr	r3, [r3, #0]
 810a5da:	f003 0320 	and.w	r3, r3, #32
 810a5de:	2b00      	cmp	r3, #0
 810a5e0:	d009      	beq.n	810a5f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a5e2:	4b2a      	ldr	r3, [pc, #168]	; (810a68c <UART_SetConfig+0x934>)
 810a5e4:	681b      	ldr	r3, [r3, #0]
 810a5e6:	08db      	lsrs	r3, r3, #3
 810a5e8:	f003 0303 	and.w	r3, r3, #3
 810a5ec:	4a24      	ldr	r2, [pc, #144]	; (810a680 <UART_SetConfig+0x928>)
 810a5ee:	fa22 f303 	lsr.w	r3, r2, r3
 810a5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a5f4:	e00f      	b.n	810a616 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810a5f6:	4b22      	ldr	r3, [pc, #136]	; (810a680 <UART_SetConfig+0x928>)
 810a5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a5fa:	e00c      	b.n	810a616 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a5fc:	4b21      	ldr	r3, [pc, #132]	; (810a684 <UART_SetConfig+0x92c>)
 810a5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a600:	e009      	b.n	810a616 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a608:	e005      	b.n	810a616 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810a60a:	2300      	movs	r3, #0
 810a60c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a60e:	2301      	movs	r3, #1
 810a610:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a614:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810a616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a618:	2b00      	cmp	r3, #0
 810a61a:	f000 80e7 	beq.w	810a7ec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a61e:	697b      	ldr	r3, [r7, #20]
 810a620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a622:	4a19      	ldr	r2, [pc, #100]	; (810a688 <UART_SetConfig+0x930>)
 810a624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a628:	461a      	mov	r2, r3
 810a62a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a62c:	fbb3 f3f2 	udiv	r3, r3, r2
 810a630:	005a      	lsls	r2, r3, #1
 810a632:	697b      	ldr	r3, [r7, #20]
 810a634:	685b      	ldr	r3, [r3, #4]
 810a636:	085b      	lsrs	r3, r3, #1
 810a638:	441a      	add	r2, r3
 810a63a:	697b      	ldr	r3, [r7, #20]
 810a63c:	685b      	ldr	r3, [r3, #4]
 810a63e:	fbb2 f3f3 	udiv	r3, r2, r3
 810a642:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a646:	2b0f      	cmp	r3, #15
 810a648:	d916      	bls.n	810a678 <UART_SetConfig+0x920>
 810a64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a64c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a650:	d212      	bcs.n	810a678 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a654:	b29b      	uxth	r3, r3
 810a656:	f023 030f 	bic.w	r3, r3, #15
 810a65a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a65e:	085b      	lsrs	r3, r3, #1
 810a660:	b29b      	uxth	r3, r3
 810a662:	f003 0307 	and.w	r3, r3, #7
 810a666:	b29a      	uxth	r2, r3
 810a668:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810a66a:	4313      	orrs	r3, r2
 810a66c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810a66e:	697b      	ldr	r3, [r7, #20]
 810a670:	681b      	ldr	r3, [r3, #0]
 810a672:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 810a674:	60da      	str	r2, [r3, #12]
 810a676:	e0b9      	b.n	810a7ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a678:	2301      	movs	r3, #1
 810a67a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a67e:	e0b5      	b.n	810a7ec <UART_SetConfig+0xa94>
 810a680:	03d09000 	.word	0x03d09000
 810a684:	003d0900 	.word	0x003d0900
 810a688:	0810fb3c 	.word	0x0810fb3c
 810a68c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810a690:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a694:	2b20      	cmp	r3, #32
 810a696:	dc49      	bgt.n	810a72c <UART_SetConfig+0x9d4>
 810a698:	2b00      	cmp	r3, #0
 810a69a:	db7c      	blt.n	810a796 <UART_SetConfig+0xa3e>
 810a69c:	2b20      	cmp	r3, #32
 810a69e:	d87a      	bhi.n	810a796 <UART_SetConfig+0xa3e>
 810a6a0:	a201      	add	r2, pc, #4	; (adr r2, 810a6a8 <UART_SetConfig+0x950>)
 810a6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a6a6:	bf00      	nop
 810a6a8:	0810a733 	.word	0x0810a733
 810a6ac:	0810a73b 	.word	0x0810a73b
 810a6b0:	0810a797 	.word	0x0810a797
 810a6b4:	0810a797 	.word	0x0810a797
 810a6b8:	0810a743 	.word	0x0810a743
 810a6bc:	0810a797 	.word	0x0810a797
 810a6c0:	0810a797 	.word	0x0810a797
 810a6c4:	0810a797 	.word	0x0810a797
 810a6c8:	0810a753 	.word	0x0810a753
 810a6cc:	0810a797 	.word	0x0810a797
 810a6d0:	0810a797 	.word	0x0810a797
 810a6d4:	0810a797 	.word	0x0810a797
 810a6d8:	0810a797 	.word	0x0810a797
 810a6dc:	0810a797 	.word	0x0810a797
 810a6e0:	0810a797 	.word	0x0810a797
 810a6e4:	0810a797 	.word	0x0810a797
 810a6e8:	0810a763 	.word	0x0810a763
 810a6ec:	0810a797 	.word	0x0810a797
 810a6f0:	0810a797 	.word	0x0810a797
 810a6f4:	0810a797 	.word	0x0810a797
 810a6f8:	0810a797 	.word	0x0810a797
 810a6fc:	0810a797 	.word	0x0810a797
 810a700:	0810a797 	.word	0x0810a797
 810a704:	0810a797 	.word	0x0810a797
 810a708:	0810a797 	.word	0x0810a797
 810a70c:	0810a797 	.word	0x0810a797
 810a710:	0810a797 	.word	0x0810a797
 810a714:	0810a797 	.word	0x0810a797
 810a718:	0810a797 	.word	0x0810a797
 810a71c:	0810a797 	.word	0x0810a797
 810a720:	0810a797 	.word	0x0810a797
 810a724:	0810a797 	.word	0x0810a797
 810a728:	0810a789 	.word	0x0810a789
 810a72c:	2b40      	cmp	r3, #64	; 0x40
 810a72e:	d02e      	beq.n	810a78e <UART_SetConfig+0xa36>
 810a730:	e031      	b.n	810a796 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a732:	f7fb f973 	bl	8105a1c <HAL_RCC_GetPCLK1Freq>
 810a736:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a738:	e033      	b.n	810a7a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a73a:	f7fb f985 	bl	8105a48 <HAL_RCC_GetPCLK2Freq>
 810a73e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a740:	e02f      	b.n	810a7a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a746:	4618      	mov	r0, r3
 810a748:	f7fd f934 	bl	81079b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a750:	e027      	b.n	810a7a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a752:	f107 0318 	add.w	r3, r7, #24
 810a756:	4618      	mov	r0, r3
 810a758:	f7fd fa80 	bl	8107c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a75c:	69fb      	ldr	r3, [r7, #28]
 810a75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a760:	e01f      	b.n	810a7a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a762:	4b2d      	ldr	r3, [pc, #180]	; (810a818 <UART_SetConfig+0xac0>)
 810a764:	681b      	ldr	r3, [r3, #0]
 810a766:	f003 0320 	and.w	r3, r3, #32
 810a76a:	2b00      	cmp	r3, #0
 810a76c:	d009      	beq.n	810a782 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a76e:	4b2a      	ldr	r3, [pc, #168]	; (810a818 <UART_SetConfig+0xac0>)
 810a770:	681b      	ldr	r3, [r3, #0]
 810a772:	08db      	lsrs	r3, r3, #3
 810a774:	f003 0303 	and.w	r3, r3, #3
 810a778:	4a28      	ldr	r2, [pc, #160]	; (810a81c <UART_SetConfig+0xac4>)
 810a77a:	fa22 f303 	lsr.w	r3, r2, r3
 810a77e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a780:	e00f      	b.n	810a7a2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810a782:	4b26      	ldr	r3, [pc, #152]	; (810a81c <UART_SetConfig+0xac4>)
 810a784:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a786:	e00c      	b.n	810a7a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a788:	4b25      	ldr	r3, [pc, #148]	; (810a820 <UART_SetConfig+0xac8>)
 810a78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a78c:	e009      	b.n	810a7a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a78e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a794:	e005      	b.n	810a7a2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810a796:	2300      	movs	r3, #0
 810a798:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a79a:	2301      	movs	r3, #1
 810a79c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a7a0:	bf00      	nop
    }

    if (pclk != 0U)
 810a7a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a7a4:	2b00      	cmp	r3, #0
 810a7a6:	d021      	beq.n	810a7ec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a7a8:	697b      	ldr	r3, [r7, #20]
 810a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a7ac:	4a1d      	ldr	r2, [pc, #116]	; (810a824 <UART_SetConfig+0xacc>)
 810a7ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a7b2:	461a      	mov	r2, r3
 810a7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a7b6:	fbb3 f2f2 	udiv	r2, r3, r2
 810a7ba:	697b      	ldr	r3, [r7, #20]
 810a7bc:	685b      	ldr	r3, [r3, #4]
 810a7be:	085b      	lsrs	r3, r3, #1
 810a7c0:	441a      	add	r2, r3
 810a7c2:	697b      	ldr	r3, [r7, #20]
 810a7c4:	685b      	ldr	r3, [r3, #4]
 810a7c6:	fbb2 f3f3 	udiv	r3, r2, r3
 810a7ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a7ce:	2b0f      	cmp	r3, #15
 810a7d0:	d909      	bls.n	810a7e6 <UART_SetConfig+0xa8e>
 810a7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a7d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a7d8:	d205      	bcs.n	810a7e6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810a7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a7dc:	b29a      	uxth	r2, r3
 810a7de:	697b      	ldr	r3, [r7, #20]
 810a7e0:	681b      	ldr	r3, [r3, #0]
 810a7e2:	60da      	str	r2, [r3, #12]
 810a7e4:	e002      	b.n	810a7ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a7e6:	2301      	movs	r3, #1
 810a7e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810a7ec:	697b      	ldr	r3, [r7, #20]
 810a7ee:	2201      	movs	r2, #1
 810a7f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810a7f4:	697b      	ldr	r3, [r7, #20]
 810a7f6:	2201      	movs	r2, #1
 810a7f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810a7fc:	697b      	ldr	r3, [r7, #20]
 810a7fe:	2200      	movs	r2, #0
 810a800:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 810a802:	697b      	ldr	r3, [r7, #20]
 810a804:	2200      	movs	r2, #0
 810a806:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 810a808:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 810a80c:	4618      	mov	r0, r3
 810a80e:	3748      	adds	r7, #72	; 0x48
 810a810:	46bd      	mov	sp, r7
 810a812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810a816:	bf00      	nop
 810a818:	58024400 	.word	0x58024400
 810a81c:	03d09000 	.word	0x03d09000
 810a820:	003d0900 	.word	0x003d0900
 810a824:	0810fb3c 	.word	0x0810fb3c

0810a828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810a828:	b480      	push	{r7}
 810a82a:	b083      	sub	sp, #12
 810a82c:	af00      	add	r7, sp, #0
 810a82e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810a830:	687b      	ldr	r3, [r7, #4]
 810a832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a834:	f003 0301 	and.w	r3, r3, #1
 810a838:	2b00      	cmp	r3, #0
 810a83a:	d00a      	beq.n	810a852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810a83c:	687b      	ldr	r3, [r7, #4]
 810a83e:	681b      	ldr	r3, [r3, #0]
 810a840:	685b      	ldr	r3, [r3, #4]
 810a842:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810a846:	687b      	ldr	r3, [r7, #4]
 810a848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a84a:	687b      	ldr	r3, [r7, #4]
 810a84c:	681b      	ldr	r3, [r3, #0]
 810a84e:	430a      	orrs	r2, r1
 810a850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810a852:	687b      	ldr	r3, [r7, #4]
 810a854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a856:	f003 0302 	and.w	r3, r3, #2
 810a85a:	2b00      	cmp	r3, #0
 810a85c:	d00a      	beq.n	810a874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810a85e:	687b      	ldr	r3, [r7, #4]
 810a860:	681b      	ldr	r3, [r3, #0]
 810a862:	685b      	ldr	r3, [r3, #4]
 810a864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810a868:	687b      	ldr	r3, [r7, #4]
 810a86a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810a86c:	687b      	ldr	r3, [r7, #4]
 810a86e:	681b      	ldr	r3, [r3, #0]
 810a870:	430a      	orrs	r2, r1
 810a872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810a874:	687b      	ldr	r3, [r7, #4]
 810a876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a878:	f003 0304 	and.w	r3, r3, #4
 810a87c:	2b00      	cmp	r3, #0
 810a87e:	d00a      	beq.n	810a896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810a880:	687b      	ldr	r3, [r7, #4]
 810a882:	681b      	ldr	r3, [r3, #0]
 810a884:	685b      	ldr	r3, [r3, #4]
 810a886:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810a88a:	687b      	ldr	r3, [r7, #4]
 810a88c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810a88e:	687b      	ldr	r3, [r7, #4]
 810a890:	681b      	ldr	r3, [r3, #0]
 810a892:	430a      	orrs	r2, r1
 810a894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810a896:	687b      	ldr	r3, [r7, #4]
 810a898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a89a:	f003 0308 	and.w	r3, r3, #8
 810a89e:	2b00      	cmp	r3, #0
 810a8a0:	d00a      	beq.n	810a8b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810a8a2:	687b      	ldr	r3, [r7, #4]
 810a8a4:	681b      	ldr	r3, [r3, #0]
 810a8a6:	685b      	ldr	r3, [r3, #4]
 810a8a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810a8ac:	687b      	ldr	r3, [r7, #4]
 810a8ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a8b0:	687b      	ldr	r3, [r7, #4]
 810a8b2:	681b      	ldr	r3, [r3, #0]
 810a8b4:	430a      	orrs	r2, r1
 810a8b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810a8b8:	687b      	ldr	r3, [r7, #4]
 810a8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a8bc:	f003 0310 	and.w	r3, r3, #16
 810a8c0:	2b00      	cmp	r3, #0
 810a8c2:	d00a      	beq.n	810a8da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810a8c4:	687b      	ldr	r3, [r7, #4]
 810a8c6:	681b      	ldr	r3, [r3, #0]
 810a8c8:	689b      	ldr	r3, [r3, #8]
 810a8ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810a8ce:	687b      	ldr	r3, [r7, #4]
 810a8d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810a8d2:	687b      	ldr	r3, [r7, #4]
 810a8d4:	681b      	ldr	r3, [r3, #0]
 810a8d6:	430a      	orrs	r2, r1
 810a8d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810a8da:	687b      	ldr	r3, [r7, #4]
 810a8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a8de:	f003 0320 	and.w	r3, r3, #32
 810a8e2:	2b00      	cmp	r3, #0
 810a8e4:	d00a      	beq.n	810a8fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810a8e6:	687b      	ldr	r3, [r7, #4]
 810a8e8:	681b      	ldr	r3, [r3, #0]
 810a8ea:	689b      	ldr	r3, [r3, #8]
 810a8ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810a8f0:	687b      	ldr	r3, [r7, #4]
 810a8f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810a8f4:	687b      	ldr	r3, [r7, #4]
 810a8f6:	681b      	ldr	r3, [r3, #0]
 810a8f8:	430a      	orrs	r2, r1
 810a8fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810a8fc:	687b      	ldr	r3, [r7, #4]
 810a8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a904:	2b00      	cmp	r3, #0
 810a906:	d01a      	beq.n	810a93e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810a908:	687b      	ldr	r3, [r7, #4]
 810a90a:	681b      	ldr	r3, [r3, #0]
 810a90c:	685b      	ldr	r3, [r3, #4]
 810a90e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810a912:	687b      	ldr	r3, [r7, #4]
 810a914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810a916:	687b      	ldr	r3, [r7, #4]
 810a918:	681b      	ldr	r3, [r3, #0]
 810a91a:	430a      	orrs	r2, r1
 810a91c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810a91e:	687b      	ldr	r3, [r7, #4]
 810a920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a926:	d10a      	bne.n	810a93e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810a928:	687b      	ldr	r3, [r7, #4]
 810a92a:	681b      	ldr	r3, [r3, #0]
 810a92c:	685b      	ldr	r3, [r3, #4]
 810a92e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810a932:	687b      	ldr	r3, [r7, #4]
 810a934:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810a936:	687b      	ldr	r3, [r7, #4]
 810a938:	681b      	ldr	r3, [r3, #0]
 810a93a:	430a      	orrs	r2, r1
 810a93c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810a93e:	687b      	ldr	r3, [r7, #4]
 810a940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a946:	2b00      	cmp	r3, #0
 810a948:	d00a      	beq.n	810a960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810a94a:	687b      	ldr	r3, [r7, #4]
 810a94c:	681b      	ldr	r3, [r3, #0]
 810a94e:	685b      	ldr	r3, [r3, #4]
 810a950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810a954:	687b      	ldr	r3, [r7, #4]
 810a956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810a958:	687b      	ldr	r3, [r7, #4]
 810a95a:	681b      	ldr	r3, [r3, #0]
 810a95c:	430a      	orrs	r2, r1
 810a95e:	605a      	str	r2, [r3, #4]
  }
}
 810a960:	bf00      	nop
 810a962:	370c      	adds	r7, #12
 810a964:	46bd      	mov	sp, r7
 810a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a96a:	4770      	bx	lr

0810a96c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810a96c:	b580      	push	{r7, lr}
 810a96e:	b098      	sub	sp, #96	; 0x60
 810a970:	af02      	add	r7, sp, #8
 810a972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a974:	687b      	ldr	r3, [r7, #4]
 810a976:	2200      	movs	r2, #0
 810a978:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810a97c:	f7f8 fb88 	bl	8103090 <HAL_GetTick>
 810a980:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810a982:	687b      	ldr	r3, [r7, #4]
 810a984:	681b      	ldr	r3, [r3, #0]
 810a986:	681b      	ldr	r3, [r3, #0]
 810a988:	f003 0308 	and.w	r3, r3, #8
 810a98c:	2b08      	cmp	r3, #8
 810a98e:	d12f      	bne.n	810a9f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a994:	9300      	str	r3, [sp, #0]
 810a996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810a998:	2200      	movs	r2, #0
 810a99a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810a99e:	6878      	ldr	r0, [r7, #4]
 810a9a0:	f000 f88e 	bl	810aac0 <UART_WaitOnFlagUntilTimeout>
 810a9a4:	4603      	mov	r3, r0
 810a9a6:	2b00      	cmp	r3, #0
 810a9a8:	d022      	beq.n	810a9f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810a9aa:	687b      	ldr	r3, [r7, #4]
 810a9ac:	681b      	ldr	r3, [r3, #0]
 810a9ae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a9b2:	e853 3f00 	ldrex	r3, [r3]
 810a9b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 810a9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a9ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810a9be:	653b      	str	r3, [r7, #80]	; 0x50
 810a9c0:	687b      	ldr	r3, [r7, #4]
 810a9c2:	681b      	ldr	r3, [r3, #0]
 810a9c4:	461a      	mov	r2, r3
 810a9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810a9c8:	647b      	str	r3, [r7, #68]	; 0x44
 810a9ca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a9cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810a9ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810a9d0:	e841 2300 	strex	r3, r2, [r1]
 810a9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 810a9d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a9d8:	2b00      	cmp	r3, #0
 810a9da:	d1e6      	bne.n	810a9aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810a9dc:	687b      	ldr	r3, [r7, #4]
 810a9de:	2220      	movs	r2, #32
 810a9e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 810a9e4:	687b      	ldr	r3, [r7, #4]
 810a9e6:	2200      	movs	r2, #0
 810a9e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a9ec:	2303      	movs	r3, #3
 810a9ee:	e063      	b.n	810aab8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810a9f0:	687b      	ldr	r3, [r7, #4]
 810a9f2:	681b      	ldr	r3, [r3, #0]
 810a9f4:	681b      	ldr	r3, [r3, #0]
 810a9f6:	f003 0304 	and.w	r3, r3, #4
 810a9fa:	2b04      	cmp	r3, #4
 810a9fc:	d149      	bne.n	810aa92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a9fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810aa02:	9300      	str	r3, [sp, #0]
 810aa04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810aa06:	2200      	movs	r2, #0
 810aa08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810aa0c:	6878      	ldr	r0, [r7, #4]
 810aa0e:	f000 f857 	bl	810aac0 <UART_WaitOnFlagUntilTimeout>
 810aa12:	4603      	mov	r3, r0
 810aa14:	2b00      	cmp	r3, #0
 810aa16:	d03c      	beq.n	810aa92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810aa18:	687b      	ldr	r3, [r7, #4]
 810aa1a:	681b      	ldr	r3, [r3, #0]
 810aa1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aa1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810aa20:	e853 3f00 	ldrex	r3, [r3]
 810aa24:	623b      	str	r3, [r7, #32]
   return(result);
 810aa26:	6a3b      	ldr	r3, [r7, #32]
 810aa28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810aa2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 810aa2e:	687b      	ldr	r3, [r7, #4]
 810aa30:	681b      	ldr	r3, [r3, #0]
 810aa32:	461a      	mov	r2, r3
 810aa34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810aa36:	633b      	str	r3, [r7, #48]	; 0x30
 810aa38:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aa3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810aa3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810aa3e:	e841 2300 	strex	r3, r2, [r1]
 810aa42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810aa46:	2b00      	cmp	r3, #0
 810aa48:	d1e6      	bne.n	810aa18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810aa4a:	687b      	ldr	r3, [r7, #4]
 810aa4c:	681b      	ldr	r3, [r3, #0]
 810aa4e:	3308      	adds	r3, #8
 810aa50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aa52:	693b      	ldr	r3, [r7, #16]
 810aa54:	e853 3f00 	ldrex	r3, [r3]
 810aa58:	60fb      	str	r3, [r7, #12]
   return(result);
 810aa5a:	68fb      	ldr	r3, [r7, #12]
 810aa5c:	f023 0301 	bic.w	r3, r3, #1
 810aa60:	64bb      	str	r3, [r7, #72]	; 0x48
 810aa62:	687b      	ldr	r3, [r7, #4]
 810aa64:	681b      	ldr	r3, [r3, #0]
 810aa66:	3308      	adds	r3, #8
 810aa68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810aa6a:	61fa      	str	r2, [r7, #28]
 810aa6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aa6e:	69b9      	ldr	r1, [r7, #24]
 810aa70:	69fa      	ldr	r2, [r7, #28]
 810aa72:	e841 2300 	strex	r3, r2, [r1]
 810aa76:	617b      	str	r3, [r7, #20]
   return(result);
 810aa78:	697b      	ldr	r3, [r7, #20]
 810aa7a:	2b00      	cmp	r3, #0
 810aa7c:	d1e5      	bne.n	810aa4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810aa7e:	687b      	ldr	r3, [r7, #4]
 810aa80:	2220      	movs	r2, #32
 810aa82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810aa86:	687b      	ldr	r3, [r7, #4]
 810aa88:	2200      	movs	r2, #0
 810aa8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810aa8e:	2303      	movs	r3, #3
 810aa90:	e012      	b.n	810aab8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810aa92:	687b      	ldr	r3, [r7, #4]
 810aa94:	2220      	movs	r2, #32
 810aa96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810aa9a:	687b      	ldr	r3, [r7, #4]
 810aa9c:	2220      	movs	r2, #32
 810aa9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810aaa2:	687b      	ldr	r3, [r7, #4]
 810aaa4:	2200      	movs	r2, #0
 810aaa6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810aaa8:	687b      	ldr	r3, [r7, #4]
 810aaaa:	2200      	movs	r2, #0
 810aaac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 810aaae:	687b      	ldr	r3, [r7, #4]
 810aab0:	2200      	movs	r2, #0
 810aab2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810aab6:	2300      	movs	r3, #0
}
 810aab8:	4618      	mov	r0, r3
 810aaba:	3758      	adds	r7, #88	; 0x58
 810aabc:	46bd      	mov	sp, r7
 810aabe:	bd80      	pop	{r7, pc}

0810aac0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810aac0:	b580      	push	{r7, lr}
 810aac2:	b084      	sub	sp, #16
 810aac4:	af00      	add	r7, sp, #0
 810aac6:	60f8      	str	r0, [r7, #12]
 810aac8:	60b9      	str	r1, [r7, #8]
 810aaca:	603b      	str	r3, [r7, #0]
 810aacc:	4613      	mov	r3, r2
 810aace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810aad0:	e049      	b.n	810ab66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810aad2:	69bb      	ldr	r3, [r7, #24]
 810aad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 810aad8:	d045      	beq.n	810ab66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810aada:	f7f8 fad9 	bl	8103090 <HAL_GetTick>
 810aade:	4602      	mov	r2, r0
 810aae0:	683b      	ldr	r3, [r7, #0]
 810aae2:	1ad3      	subs	r3, r2, r3
 810aae4:	69ba      	ldr	r2, [r7, #24]
 810aae6:	429a      	cmp	r2, r3
 810aae8:	d302      	bcc.n	810aaf0 <UART_WaitOnFlagUntilTimeout+0x30>
 810aaea:	69bb      	ldr	r3, [r7, #24]
 810aaec:	2b00      	cmp	r3, #0
 810aaee:	d101      	bne.n	810aaf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810aaf0:	2303      	movs	r3, #3
 810aaf2:	e048      	b.n	810ab86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810aaf4:	68fb      	ldr	r3, [r7, #12]
 810aaf6:	681b      	ldr	r3, [r3, #0]
 810aaf8:	681b      	ldr	r3, [r3, #0]
 810aafa:	f003 0304 	and.w	r3, r3, #4
 810aafe:	2b00      	cmp	r3, #0
 810ab00:	d031      	beq.n	810ab66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810ab02:	68fb      	ldr	r3, [r7, #12]
 810ab04:	681b      	ldr	r3, [r3, #0]
 810ab06:	69db      	ldr	r3, [r3, #28]
 810ab08:	f003 0308 	and.w	r3, r3, #8
 810ab0c:	2b08      	cmp	r3, #8
 810ab0e:	d110      	bne.n	810ab32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810ab10:	68fb      	ldr	r3, [r7, #12]
 810ab12:	681b      	ldr	r3, [r3, #0]
 810ab14:	2208      	movs	r2, #8
 810ab16:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 810ab18:	68f8      	ldr	r0, [r7, #12]
 810ab1a:	f000 f838 	bl	810ab8e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 810ab1e:	68fb      	ldr	r3, [r7, #12]
 810ab20:	2208      	movs	r2, #8
 810ab22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 810ab26:	68fb      	ldr	r3, [r7, #12]
 810ab28:	2200      	movs	r2, #0
 810ab2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 810ab2e:	2301      	movs	r3, #1
 810ab30:	e029      	b.n	810ab86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810ab32:	68fb      	ldr	r3, [r7, #12]
 810ab34:	681b      	ldr	r3, [r3, #0]
 810ab36:	69db      	ldr	r3, [r3, #28]
 810ab38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810ab3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810ab40:	d111      	bne.n	810ab66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810ab42:	68fb      	ldr	r3, [r7, #12]
 810ab44:	681b      	ldr	r3, [r3, #0]
 810ab46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810ab4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810ab4c:	68f8      	ldr	r0, [r7, #12]
 810ab4e:	f000 f81e 	bl	810ab8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810ab52:	68fb      	ldr	r3, [r7, #12]
 810ab54:	2220      	movs	r2, #32
 810ab56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810ab5a:	68fb      	ldr	r3, [r7, #12]
 810ab5c:	2200      	movs	r2, #0
 810ab5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 810ab62:	2303      	movs	r3, #3
 810ab64:	e00f      	b.n	810ab86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810ab66:	68fb      	ldr	r3, [r7, #12]
 810ab68:	681b      	ldr	r3, [r3, #0]
 810ab6a:	69da      	ldr	r2, [r3, #28]
 810ab6c:	68bb      	ldr	r3, [r7, #8]
 810ab6e:	4013      	ands	r3, r2
 810ab70:	68ba      	ldr	r2, [r7, #8]
 810ab72:	429a      	cmp	r2, r3
 810ab74:	bf0c      	ite	eq
 810ab76:	2301      	moveq	r3, #1
 810ab78:	2300      	movne	r3, #0
 810ab7a:	b2db      	uxtb	r3, r3
 810ab7c:	461a      	mov	r2, r3
 810ab7e:	79fb      	ldrb	r3, [r7, #7]
 810ab80:	429a      	cmp	r2, r3
 810ab82:	d0a6      	beq.n	810aad2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810ab84:	2300      	movs	r3, #0
}
 810ab86:	4618      	mov	r0, r3
 810ab88:	3710      	adds	r7, #16
 810ab8a:	46bd      	mov	sp, r7
 810ab8c:	bd80      	pop	{r7, pc}

0810ab8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810ab8e:	b480      	push	{r7}
 810ab90:	b095      	sub	sp, #84	; 0x54
 810ab92:	af00      	add	r7, sp, #0
 810ab94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ab96:	687b      	ldr	r3, [r7, #4]
 810ab98:	681b      	ldr	r3, [r3, #0]
 810ab9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ab9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ab9e:	e853 3f00 	ldrex	r3, [r3]
 810aba2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810aba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aba6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810abaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 810abac:	687b      	ldr	r3, [r7, #4]
 810abae:	681b      	ldr	r3, [r3, #0]
 810abb0:	461a      	mov	r2, r3
 810abb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810abb4:	643b      	str	r3, [r7, #64]	; 0x40
 810abb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810abb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810abba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810abbc:	e841 2300 	strex	r3, r2, [r1]
 810abc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810abc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810abc4:	2b00      	cmp	r3, #0
 810abc6:	d1e6      	bne.n	810ab96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810abc8:	687b      	ldr	r3, [r7, #4]
 810abca:	681b      	ldr	r3, [r3, #0]
 810abcc:	3308      	adds	r3, #8
 810abce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810abd0:	6a3b      	ldr	r3, [r7, #32]
 810abd2:	e853 3f00 	ldrex	r3, [r3]
 810abd6:	61fb      	str	r3, [r7, #28]
   return(result);
 810abd8:	69fb      	ldr	r3, [r7, #28]
 810abda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810abde:	f023 0301 	bic.w	r3, r3, #1
 810abe2:	64bb      	str	r3, [r7, #72]	; 0x48
 810abe4:	687b      	ldr	r3, [r7, #4]
 810abe6:	681b      	ldr	r3, [r3, #0]
 810abe8:	3308      	adds	r3, #8
 810abea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810abec:	62fa      	str	r2, [r7, #44]	; 0x2c
 810abee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810abf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810abf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810abf4:	e841 2300 	strex	r3, r2, [r1]
 810abf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810abfc:	2b00      	cmp	r3, #0
 810abfe:	d1e3      	bne.n	810abc8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ac00:	687b      	ldr	r3, [r7, #4]
 810ac02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ac04:	2b01      	cmp	r3, #1
 810ac06:	d118      	bne.n	810ac3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ac08:	687b      	ldr	r3, [r7, #4]
 810ac0a:	681b      	ldr	r3, [r3, #0]
 810ac0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ac0e:	68fb      	ldr	r3, [r7, #12]
 810ac10:	e853 3f00 	ldrex	r3, [r3]
 810ac14:	60bb      	str	r3, [r7, #8]
   return(result);
 810ac16:	68bb      	ldr	r3, [r7, #8]
 810ac18:	f023 0310 	bic.w	r3, r3, #16
 810ac1c:	647b      	str	r3, [r7, #68]	; 0x44
 810ac1e:	687b      	ldr	r3, [r7, #4]
 810ac20:	681b      	ldr	r3, [r3, #0]
 810ac22:	461a      	mov	r2, r3
 810ac24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810ac26:	61bb      	str	r3, [r7, #24]
 810ac28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ac2a:	6979      	ldr	r1, [r7, #20]
 810ac2c:	69ba      	ldr	r2, [r7, #24]
 810ac2e:	e841 2300 	strex	r3, r2, [r1]
 810ac32:	613b      	str	r3, [r7, #16]
   return(result);
 810ac34:	693b      	ldr	r3, [r7, #16]
 810ac36:	2b00      	cmp	r3, #0
 810ac38:	d1e6      	bne.n	810ac08 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810ac3a:	687b      	ldr	r3, [r7, #4]
 810ac3c:	2220      	movs	r2, #32
 810ac3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ac42:	687b      	ldr	r3, [r7, #4]
 810ac44:	2200      	movs	r2, #0
 810ac46:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810ac48:	687b      	ldr	r3, [r7, #4]
 810ac4a:	2200      	movs	r2, #0
 810ac4c:	675a      	str	r2, [r3, #116]	; 0x74
}
 810ac4e:	bf00      	nop
 810ac50:	3754      	adds	r7, #84	; 0x54
 810ac52:	46bd      	mov	sp, r7
 810ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac58:	4770      	bx	lr

0810ac5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810ac5a:	b480      	push	{r7}
 810ac5c:	b085      	sub	sp, #20
 810ac5e:	af00      	add	r7, sp, #0
 810ac60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ac62:	687b      	ldr	r3, [r7, #4]
 810ac64:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810ac68:	2b01      	cmp	r3, #1
 810ac6a:	d101      	bne.n	810ac70 <HAL_UARTEx_DisableFifoMode+0x16>
 810ac6c:	2302      	movs	r3, #2
 810ac6e:	e027      	b.n	810acc0 <HAL_UARTEx_DisableFifoMode+0x66>
 810ac70:	687b      	ldr	r3, [r7, #4]
 810ac72:	2201      	movs	r2, #1
 810ac74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ac78:	687b      	ldr	r3, [r7, #4]
 810ac7a:	2224      	movs	r2, #36	; 0x24
 810ac7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ac80:	687b      	ldr	r3, [r7, #4]
 810ac82:	681b      	ldr	r3, [r3, #0]
 810ac84:	681b      	ldr	r3, [r3, #0]
 810ac86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ac88:	687b      	ldr	r3, [r7, #4]
 810ac8a:	681b      	ldr	r3, [r3, #0]
 810ac8c:	681a      	ldr	r2, [r3, #0]
 810ac8e:	687b      	ldr	r3, [r7, #4]
 810ac90:	681b      	ldr	r3, [r3, #0]
 810ac92:	f022 0201 	bic.w	r2, r2, #1
 810ac96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810ac98:	68fb      	ldr	r3, [r7, #12]
 810ac9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810ac9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810aca0:	687b      	ldr	r3, [r7, #4]
 810aca2:	2200      	movs	r2, #0
 810aca4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810aca6:	687b      	ldr	r3, [r7, #4]
 810aca8:	681b      	ldr	r3, [r3, #0]
 810acaa:	68fa      	ldr	r2, [r7, #12]
 810acac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810acae:	687b      	ldr	r3, [r7, #4]
 810acb0:	2220      	movs	r2, #32
 810acb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810acb6:	687b      	ldr	r3, [r7, #4]
 810acb8:	2200      	movs	r2, #0
 810acba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810acbe:	2300      	movs	r3, #0
}
 810acc0:	4618      	mov	r0, r3
 810acc2:	3714      	adds	r7, #20
 810acc4:	46bd      	mov	sp, r7
 810acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810acca:	4770      	bx	lr

0810accc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810accc:	b580      	push	{r7, lr}
 810acce:	b084      	sub	sp, #16
 810acd0:	af00      	add	r7, sp, #0
 810acd2:	6078      	str	r0, [r7, #4]
 810acd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810acd6:	687b      	ldr	r3, [r7, #4]
 810acd8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810acdc:	2b01      	cmp	r3, #1
 810acde:	d101      	bne.n	810ace4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810ace0:	2302      	movs	r3, #2
 810ace2:	e02d      	b.n	810ad40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810ace4:	687b      	ldr	r3, [r7, #4]
 810ace6:	2201      	movs	r2, #1
 810ace8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810acec:	687b      	ldr	r3, [r7, #4]
 810acee:	2224      	movs	r2, #36	; 0x24
 810acf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810acf4:	687b      	ldr	r3, [r7, #4]
 810acf6:	681b      	ldr	r3, [r3, #0]
 810acf8:	681b      	ldr	r3, [r3, #0]
 810acfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810acfc:	687b      	ldr	r3, [r7, #4]
 810acfe:	681b      	ldr	r3, [r3, #0]
 810ad00:	681a      	ldr	r2, [r3, #0]
 810ad02:	687b      	ldr	r3, [r7, #4]
 810ad04:	681b      	ldr	r3, [r3, #0]
 810ad06:	f022 0201 	bic.w	r2, r2, #1
 810ad0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810ad0c:	687b      	ldr	r3, [r7, #4]
 810ad0e:	681b      	ldr	r3, [r3, #0]
 810ad10:	689b      	ldr	r3, [r3, #8]
 810ad12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810ad16:	687b      	ldr	r3, [r7, #4]
 810ad18:	681b      	ldr	r3, [r3, #0]
 810ad1a:	683a      	ldr	r2, [r7, #0]
 810ad1c:	430a      	orrs	r2, r1
 810ad1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ad20:	6878      	ldr	r0, [r7, #4]
 810ad22:	f000 f84f 	bl	810adc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ad26:	687b      	ldr	r3, [r7, #4]
 810ad28:	681b      	ldr	r3, [r3, #0]
 810ad2a:	68fa      	ldr	r2, [r7, #12]
 810ad2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ad2e:	687b      	ldr	r3, [r7, #4]
 810ad30:	2220      	movs	r2, #32
 810ad32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ad36:	687b      	ldr	r3, [r7, #4]
 810ad38:	2200      	movs	r2, #0
 810ad3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810ad3e:	2300      	movs	r3, #0
}
 810ad40:	4618      	mov	r0, r3
 810ad42:	3710      	adds	r7, #16
 810ad44:	46bd      	mov	sp, r7
 810ad46:	bd80      	pop	{r7, pc}

0810ad48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ad48:	b580      	push	{r7, lr}
 810ad4a:	b084      	sub	sp, #16
 810ad4c:	af00      	add	r7, sp, #0
 810ad4e:	6078      	str	r0, [r7, #4]
 810ad50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ad52:	687b      	ldr	r3, [r7, #4]
 810ad54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810ad58:	2b01      	cmp	r3, #1
 810ad5a:	d101      	bne.n	810ad60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810ad5c:	2302      	movs	r3, #2
 810ad5e:	e02d      	b.n	810adbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810ad60:	687b      	ldr	r3, [r7, #4]
 810ad62:	2201      	movs	r2, #1
 810ad64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ad68:	687b      	ldr	r3, [r7, #4]
 810ad6a:	2224      	movs	r2, #36	; 0x24
 810ad6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ad70:	687b      	ldr	r3, [r7, #4]
 810ad72:	681b      	ldr	r3, [r3, #0]
 810ad74:	681b      	ldr	r3, [r3, #0]
 810ad76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ad78:	687b      	ldr	r3, [r7, #4]
 810ad7a:	681b      	ldr	r3, [r3, #0]
 810ad7c:	681a      	ldr	r2, [r3, #0]
 810ad7e:	687b      	ldr	r3, [r7, #4]
 810ad80:	681b      	ldr	r3, [r3, #0]
 810ad82:	f022 0201 	bic.w	r2, r2, #1
 810ad86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810ad88:	687b      	ldr	r3, [r7, #4]
 810ad8a:	681b      	ldr	r3, [r3, #0]
 810ad8c:	689b      	ldr	r3, [r3, #8]
 810ad8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810ad92:	687b      	ldr	r3, [r7, #4]
 810ad94:	681b      	ldr	r3, [r3, #0]
 810ad96:	683a      	ldr	r2, [r7, #0]
 810ad98:	430a      	orrs	r2, r1
 810ad9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ad9c:	6878      	ldr	r0, [r7, #4]
 810ad9e:	f000 f811 	bl	810adc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ada2:	687b      	ldr	r3, [r7, #4]
 810ada4:	681b      	ldr	r3, [r3, #0]
 810ada6:	68fa      	ldr	r2, [r7, #12]
 810ada8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810adaa:	687b      	ldr	r3, [r7, #4]
 810adac:	2220      	movs	r2, #32
 810adae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810adb2:	687b      	ldr	r3, [r7, #4]
 810adb4:	2200      	movs	r2, #0
 810adb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810adba:	2300      	movs	r3, #0
}
 810adbc:	4618      	mov	r0, r3
 810adbe:	3710      	adds	r7, #16
 810adc0:	46bd      	mov	sp, r7
 810adc2:	bd80      	pop	{r7, pc}

0810adc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810adc4:	b480      	push	{r7}
 810adc6:	b085      	sub	sp, #20
 810adc8:	af00      	add	r7, sp, #0
 810adca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810adcc:	687b      	ldr	r3, [r7, #4]
 810adce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810add0:	2b00      	cmp	r3, #0
 810add2:	d108      	bne.n	810ade6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810add4:	687b      	ldr	r3, [r7, #4]
 810add6:	2201      	movs	r2, #1
 810add8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810addc:	687b      	ldr	r3, [r7, #4]
 810adde:	2201      	movs	r2, #1
 810ade0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810ade4:	e031      	b.n	810ae4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810ade6:	2310      	movs	r3, #16
 810ade8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810adea:	2310      	movs	r3, #16
 810adec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810adee:	687b      	ldr	r3, [r7, #4]
 810adf0:	681b      	ldr	r3, [r3, #0]
 810adf2:	689b      	ldr	r3, [r3, #8]
 810adf4:	0e5b      	lsrs	r3, r3, #25
 810adf6:	b2db      	uxtb	r3, r3
 810adf8:	f003 0307 	and.w	r3, r3, #7
 810adfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810adfe:	687b      	ldr	r3, [r7, #4]
 810ae00:	681b      	ldr	r3, [r3, #0]
 810ae02:	689b      	ldr	r3, [r3, #8]
 810ae04:	0f5b      	lsrs	r3, r3, #29
 810ae06:	b2db      	uxtb	r3, r3
 810ae08:	f003 0307 	and.w	r3, r3, #7
 810ae0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ae0e:	7bbb      	ldrb	r3, [r7, #14]
 810ae10:	7b3a      	ldrb	r2, [r7, #12]
 810ae12:	4911      	ldr	r1, [pc, #68]	; (810ae58 <UARTEx_SetNbDataToProcess+0x94>)
 810ae14:	5c8a      	ldrb	r2, [r1, r2]
 810ae16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810ae1a:	7b3a      	ldrb	r2, [r7, #12]
 810ae1c:	490f      	ldr	r1, [pc, #60]	; (810ae5c <UARTEx_SetNbDataToProcess+0x98>)
 810ae1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ae20:	fb93 f3f2 	sdiv	r3, r3, r2
 810ae24:	b29a      	uxth	r2, r3
 810ae26:	687b      	ldr	r3, [r7, #4]
 810ae28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ae2c:	7bfb      	ldrb	r3, [r7, #15]
 810ae2e:	7b7a      	ldrb	r2, [r7, #13]
 810ae30:	4909      	ldr	r1, [pc, #36]	; (810ae58 <UARTEx_SetNbDataToProcess+0x94>)
 810ae32:	5c8a      	ldrb	r2, [r1, r2]
 810ae34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810ae38:	7b7a      	ldrb	r2, [r7, #13]
 810ae3a:	4908      	ldr	r1, [pc, #32]	; (810ae5c <UARTEx_SetNbDataToProcess+0x98>)
 810ae3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ae3e:	fb93 f3f2 	sdiv	r3, r3, r2
 810ae42:	b29a      	uxth	r2, r3
 810ae44:	687b      	ldr	r3, [r7, #4]
 810ae46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810ae4a:	bf00      	nop
 810ae4c:	3714      	adds	r7, #20
 810ae4e:	46bd      	mov	sp, r7
 810ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae54:	4770      	bx	lr
 810ae56:	bf00      	nop
 810ae58:	0810fb54 	.word	0x0810fb54
 810ae5c:	0810fb5c 	.word	0x0810fb5c

0810ae60 <__errno>:
 810ae60:	4b01      	ldr	r3, [pc, #4]	; (810ae68 <__errno+0x8>)
 810ae62:	6818      	ldr	r0, [r3, #0]
 810ae64:	4770      	bx	lr
 810ae66:	bf00      	nop
 810ae68:	10000020 	.word	0x10000020

0810ae6c <__libc_init_array>:
 810ae6c:	b570      	push	{r4, r5, r6, lr}
 810ae6e:	4d0d      	ldr	r5, [pc, #52]	; (810aea4 <__libc_init_array+0x38>)
 810ae70:	4c0d      	ldr	r4, [pc, #52]	; (810aea8 <__libc_init_array+0x3c>)
 810ae72:	1b64      	subs	r4, r4, r5
 810ae74:	10a4      	asrs	r4, r4, #2
 810ae76:	2600      	movs	r6, #0
 810ae78:	42a6      	cmp	r6, r4
 810ae7a:	d109      	bne.n	810ae90 <__libc_init_array+0x24>
 810ae7c:	4d0b      	ldr	r5, [pc, #44]	; (810aeac <__libc_init_array+0x40>)
 810ae7e:	4c0c      	ldr	r4, [pc, #48]	; (810aeb0 <__libc_init_array+0x44>)
 810ae80:	f004 fd1c 	bl	810f8bc <_init>
 810ae84:	1b64      	subs	r4, r4, r5
 810ae86:	10a4      	asrs	r4, r4, #2
 810ae88:	2600      	movs	r6, #0
 810ae8a:	42a6      	cmp	r6, r4
 810ae8c:	d105      	bne.n	810ae9a <__libc_init_array+0x2e>
 810ae8e:	bd70      	pop	{r4, r5, r6, pc}
 810ae90:	f855 3b04 	ldr.w	r3, [r5], #4
 810ae94:	4798      	blx	r3
 810ae96:	3601      	adds	r6, #1
 810ae98:	e7ee      	b.n	810ae78 <__libc_init_array+0xc>
 810ae9a:	f855 3b04 	ldr.w	r3, [r5], #4
 810ae9e:	4798      	blx	r3
 810aea0:	3601      	adds	r6, #1
 810aea2:	e7f2      	b.n	810ae8a <__libc_init_array+0x1e>
 810aea4:	0811001c 	.word	0x0811001c
 810aea8:	0811001c 	.word	0x0811001c
 810aeac:	0811001c 	.word	0x0811001c
 810aeb0:	08110020 	.word	0x08110020

0810aeb4 <malloc>:
 810aeb4:	4b02      	ldr	r3, [pc, #8]	; (810aec0 <malloc+0xc>)
 810aeb6:	4601      	mov	r1, r0
 810aeb8:	6818      	ldr	r0, [r3, #0]
 810aeba:	f000 b885 	b.w	810afc8 <_malloc_r>
 810aebe:	bf00      	nop
 810aec0:	10000020 	.word	0x10000020

0810aec4 <memcpy>:
 810aec4:	440a      	add	r2, r1
 810aec6:	4291      	cmp	r1, r2
 810aec8:	f100 33ff 	add.w	r3, r0, #4294967295
 810aecc:	d100      	bne.n	810aed0 <memcpy+0xc>
 810aece:	4770      	bx	lr
 810aed0:	b510      	push	{r4, lr}
 810aed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 810aed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 810aeda:	4291      	cmp	r1, r2
 810aedc:	d1f9      	bne.n	810aed2 <memcpy+0xe>
 810aede:	bd10      	pop	{r4, pc}

0810aee0 <memset>:
 810aee0:	4402      	add	r2, r0
 810aee2:	4603      	mov	r3, r0
 810aee4:	4293      	cmp	r3, r2
 810aee6:	d100      	bne.n	810aeea <memset+0xa>
 810aee8:	4770      	bx	lr
 810aeea:	f803 1b01 	strb.w	r1, [r3], #1
 810aeee:	e7f9      	b.n	810aee4 <memset+0x4>

0810aef0 <_free_r>:
 810aef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810aef2:	2900      	cmp	r1, #0
 810aef4:	d044      	beq.n	810af80 <_free_r+0x90>
 810aef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810aefa:	9001      	str	r0, [sp, #4]
 810aefc:	2b00      	cmp	r3, #0
 810aefe:	f1a1 0404 	sub.w	r4, r1, #4
 810af02:	bfb8      	it	lt
 810af04:	18e4      	addlt	r4, r4, r3
 810af06:	f003 fb9d 	bl	810e644 <__malloc_lock>
 810af0a:	4a1e      	ldr	r2, [pc, #120]	; (810af84 <_free_r+0x94>)
 810af0c:	9801      	ldr	r0, [sp, #4]
 810af0e:	6813      	ldr	r3, [r2, #0]
 810af10:	b933      	cbnz	r3, 810af20 <_free_r+0x30>
 810af12:	6063      	str	r3, [r4, #4]
 810af14:	6014      	str	r4, [r2, #0]
 810af16:	b003      	add	sp, #12
 810af18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810af1c:	f003 bb98 	b.w	810e650 <__malloc_unlock>
 810af20:	42a3      	cmp	r3, r4
 810af22:	d908      	bls.n	810af36 <_free_r+0x46>
 810af24:	6825      	ldr	r5, [r4, #0]
 810af26:	1961      	adds	r1, r4, r5
 810af28:	428b      	cmp	r3, r1
 810af2a:	bf01      	itttt	eq
 810af2c:	6819      	ldreq	r1, [r3, #0]
 810af2e:	685b      	ldreq	r3, [r3, #4]
 810af30:	1949      	addeq	r1, r1, r5
 810af32:	6021      	streq	r1, [r4, #0]
 810af34:	e7ed      	b.n	810af12 <_free_r+0x22>
 810af36:	461a      	mov	r2, r3
 810af38:	685b      	ldr	r3, [r3, #4]
 810af3a:	b10b      	cbz	r3, 810af40 <_free_r+0x50>
 810af3c:	42a3      	cmp	r3, r4
 810af3e:	d9fa      	bls.n	810af36 <_free_r+0x46>
 810af40:	6811      	ldr	r1, [r2, #0]
 810af42:	1855      	adds	r5, r2, r1
 810af44:	42a5      	cmp	r5, r4
 810af46:	d10b      	bne.n	810af60 <_free_r+0x70>
 810af48:	6824      	ldr	r4, [r4, #0]
 810af4a:	4421      	add	r1, r4
 810af4c:	1854      	adds	r4, r2, r1
 810af4e:	42a3      	cmp	r3, r4
 810af50:	6011      	str	r1, [r2, #0]
 810af52:	d1e0      	bne.n	810af16 <_free_r+0x26>
 810af54:	681c      	ldr	r4, [r3, #0]
 810af56:	685b      	ldr	r3, [r3, #4]
 810af58:	6053      	str	r3, [r2, #4]
 810af5a:	4421      	add	r1, r4
 810af5c:	6011      	str	r1, [r2, #0]
 810af5e:	e7da      	b.n	810af16 <_free_r+0x26>
 810af60:	d902      	bls.n	810af68 <_free_r+0x78>
 810af62:	230c      	movs	r3, #12
 810af64:	6003      	str	r3, [r0, #0]
 810af66:	e7d6      	b.n	810af16 <_free_r+0x26>
 810af68:	6825      	ldr	r5, [r4, #0]
 810af6a:	1961      	adds	r1, r4, r5
 810af6c:	428b      	cmp	r3, r1
 810af6e:	bf04      	itt	eq
 810af70:	6819      	ldreq	r1, [r3, #0]
 810af72:	685b      	ldreq	r3, [r3, #4]
 810af74:	6063      	str	r3, [r4, #4]
 810af76:	bf04      	itt	eq
 810af78:	1949      	addeq	r1, r1, r5
 810af7a:	6021      	streq	r1, [r4, #0]
 810af7c:	6054      	str	r4, [r2, #4]
 810af7e:	e7ca      	b.n	810af16 <_free_r+0x26>
 810af80:	b003      	add	sp, #12
 810af82:	bd30      	pop	{r4, r5, pc}
 810af84:	100004a8 	.word	0x100004a8

0810af88 <sbrk_aligned>:
 810af88:	b570      	push	{r4, r5, r6, lr}
 810af8a:	4e0e      	ldr	r6, [pc, #56]	; (810afc4 <sbrk_aligned+0x3c>)
 810af8c:	460c      	mov	r4, r1
 810af8e:	6831      	ldr	r1, [r6, #0]
 810af90:	4605      	mov	r5, r0
 810af92:	b911      	cbnz	r1, 810af9a <sbrk_aligned+0x12>
 810af94:	f000 ff94 	bl	810bec0 <_sbrk_r>
 810af98:	6030      	str	r0, [r6, #0]
 810af9a:	4621      	mov	r1, r4
 810af9c:	4628      	mov	r0, r5
 810af9e:	f000 ff8f 	bl	810bec0 <_sbrk_r>
 810afa2:	1c43      	adds	r3, r0, #1
 810afa4:	d00a      	beq.n	810afbc <sbrk_aligned+0x34>
 810afa6:	1cc4      	adds	r4, r0, #3
 810afa8:	f024 0403 	bic.w	r4, r4, #3
 810afac:	42a0      	cmp	r0, r4
 810afae:	d007      	beq.n	810afc0 <sbrk_aligned+0x38>
 810afb0:	1a21      	subs	r1, r4, r0
 810afb2:	4628      	mov	r0, r5
 810afb4:	f000 ff84 	bl	810bec0 <_sbrk_r>
 810afb8:	3001      	adds	r0, #1
 810afba:	d101      	bne.n	810afc0 <sbrk_aligned+0x38>
 810afbc:	f04f 34ff 	mov.w	r4, #4294967295
 810afc0:	4620      	mov	r0, r4
 810afc2:	bd70      	pop	{r4, r5, r6, pc}
 810afc4:	100004ac 	.word	0x100004ac

0810afc8 <_malloc_r>:
 810afc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810afcc:	1ccd      	adds	r5, r1, #3
 810afce:	f025 0503 	bic.w	r5, r5, #3
 810afd2:	3508      	adds	r5, #8
 810afd4:	2d0c      	cmp	r5, #12
 810afd6:	bf38      	it	cc
 810afd8:	250c      	movcc	r5, #12
 810afda:	2d00      	cmp	r5, #0
 810afdc:	4607      	mov	r7, r0
 810afde:	db01      	blt.n	810afe4 <_malloc_r+0x1c>
 810afe0:	42a9      	cmp	r1, r5
 810afe2:	d905      	bls.n	810aff0 <_malloc_r+0x28>
 810afe4:	230c      	movs	r3, #12
 810afe6:	603b      	str	r3, [r7, #0]
 810afe8:	2600      	movs	r6, #0
 810afea:	4630      	mov	r0, r6
 810afec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810aff0:	4e2e      	ldr	r6, [pc, #184]	; (810b0ac <_malloc_r+0xe4>)
 810aff2:	f003 fb27 	bl	810e644 <__malloc_lock>
 810aff6:	6833      	ldr	r3, [r6, #0]
 810aff8:	461c      	mov	r4, r3
 810affa:	bb34      	cbnz	r4, 810b04a <_malloc_r+0x82>
 810affc:	4629      	mov	r1, r5
 810affe:	4638      	mov	r0, r7
 810b000:	f7ff ffc2 	bl	810af88 <sbrk_aligned>
 810b004:	1c43      	adds	r3, r0, #1
 810b006:	4604      	mov	r4, r0
 810b008:	d14d      	bne.n	810b0a6 <_malloc_r+0xde>
 810b00a:	6834      	ldr	r4, [r6, #0]
 810b00c:	4626      	mov	r6, r4
 810b00e:	2e00      	cmp	r6, #0
 810b010:	d140      	bne.n	810b094 <_malloc_r+0xcc>
 810b012:	6823      	ldr	r3, [r4, #0]
 810b014:	4631      	mov	r1, r6
 810b016:	4638      	mov	r0, r7
 810b018:	eb04 0803 	add.w	r8, r4, r3
 810b01c:	f000 ff50 	bl	810bec0 <_sbrk_r>
 810b020:	4580      	cmp	r8, r0
 810b022:	d13a      	bne.n	810b09a <_malloc_r+0xd2>
 810b024:	6821      	ldr	r1, [r4, #0]
 810b026:	3503      	adds	r5, #3
 810b028:	1a6d      	subs	r5, r5, r1
 810b02a:	f025 0503 	bic.w	r5, r5, #3
 810b02e:	3508      	adds	r5, #8
 810b030:	2d0c      	cmp	r5, #12
 810b032:	bf38      	it	cc
 810b034:	250c      	movcc	r5, #12
 810b036:	4629      	mov	r1, r5
 810b038:	4638      	mov	r0, r7
 810b03a:	f7ff ffa5 	bl	810af88 <sbrk_aligned>
 810b03e:	3001      	adds	r0, #1
 810b040:	d02b      	beq.n	810b09a <_malloc_r+0xd2>
 810b042:	6823      	ldr	r3, [r4, #0]
 810b044:	442b      	add	r3, r5
 810b046:	6023      	str	r3, [r4, #0]
 810b048:	e00e      	b.n	810b068 <_malloc_r+0xa0>
 810b04a:	6822      	ldr	r2, [r4, #0]
 810b04c:	1b52      	subs	r2, r2, r5
 810b04e:	d41e      	bmi.n	810b08e <_malloc_r+0xc6>
 810b050:	2a0b      	cmp	r2, #11
 810b052:	d916      	bls.n	810b082 <_malloc_r+0xba>
 810b054:	1961      	adds	r1, r4, r5
 810b056:	42a3      	cmp	r3, r4
 810b058:	6025      	str	r5, [r4, #0]
 810b05a:	bf18      	it	ne
 810b05c:	6059      	strne	r1, [r3, #4]
 810b05e:	6863      	ldr	r3, [r4, #4]
 810b060:	bf08      	it	eq
 810b062:	6031      	streq	r1, [r6, #0]
 810b064:	5162      	str	r2, [r4, r5]
 810b066:	604b      	str	r3, [r1, #4]
 810b068:	4638      	mov	r0, r7
 810b06a:	f104 060b 	add.w	r6, r4, #11
 810b06e:	f003 faef 	bl	810e650 <__malloc_unlock>
 810b072:	f026 0607 	bic.w	r6, r6, #7
 810b076:	1d23      	adds	r3, r4, #4
 810b078:	1af2      	subs	r2, r6, r3
 810b07a:	d0b6      	beq.n	810afea <_malloc_r+0x22>
 810b07c:	1b9b      	subs	r3, r3, r6
 810b07e:	50a3      	str	r3, [r4, r2]
 810b080:	e7b3      	b.n	810afea <_malloc_r+0x22>
 810b082:	6862      	ldr	r2, [r4, #4]
 810b084:	42a3      	cmp	r3, r4
 810b086:	bf0c      	ite	eq
 810b088:	6032      	streq	r2, [r6, #0]
 810b08a:	605a      	strne	r2, [r3, #4]
 810b08c:	e7ec      	b.n	810b068 <_malloc_r+0xa0>
 810b08e:	4623      	mov	r3, r4
 810b090:	6864      	ldr	r4, [r4, #4]
 810b092:	e7b2      	b.n	810affa <_malloc_r+0x32>
 810b094:	4634      	mov	r4, r6
 810b096:	6876      	ldr	r6, [r6, #4]
 810b098:	e7b9      	b.n	810b00e <_malloc_r+0x46>
 810b09a:	230c      	movs	r3, #12
 810b09c:	603b      	str	r3, [r7, #0]
 810b09e:	4638      	mov	r0, r7
 810b0a0:	f003 fad6 	bl	810e650 <__malloc_unlock>
 810b0a4:	e7a1      	b.n	810afea <_malloc_r+0x22>
 810b0a6:	6025      	str	r5, [r4, #0]
 810b0a8:	e7de      	b.n	810b068 <_malloc_r+0xa0>
 810b0aa:	bf00      	nop
 810b0ac:	100004a8 	.word	0x100004a8

0810b0b0 <__cvt>:
 810b0b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810b0b4:	ec55 4b10 	vmov	r4, r5, d0
 810b0b8:	2d00      	cmp	r5, #0
 810b0ba:	460e      	mov	r6, r1
 810b0bc:	4619      	mov	r1, r3
 810b0be:	462b      	mov	r3, r5
 810b0c0:	bfbb      	ittet	lt
 810b0c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810b0c6:	461d      	movlt	r5, r3
 810b0c8:	2300      	movge	r3, #0
 810b0ca:	232d      	movlt	r3, #45	; 0x2d
 810b0cc:	700b      	strb	r3, [r1, #0]
 810b0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b0d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810b0d4:	4691      	mov	r9, r2
 810b0d6:	f023 0820 	bic.w	r8, r3, #32
 810b0da:	bfbc      	itt	lt
 810b0dc:	4622      	movlt	r2, r4
 810b0de:	4614      	movlt	r4, r2
 810b0e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810b0e4:	d005      	beq.n	810b0f2 <__cvt+0x42>
 810b0e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810b0ea:	d100      	bne.n	810b0ee <__cvt+0x3e>
 810b0ec:	3601      	adds	r6, #1
 810b0ee:	2102      	movs	r1, #2
 810b0f0:	e000      	b.n	810b0f4 <__cvt+0x44>
 810b0f2:	2103      	movs	r1, #3
 810b0f4:	ab03      	add	r3, sp, #12
 810b0f6:	9301      	str	r3, [sp, #4]
 810b0f8:	ab02      	add	r3, sp, #8
 810b0fa:	9300      	str	r3, [sp, #0]
 810b0fc:	ec45 4b10 	vmov	d0, r4, r5
 810b100:	4653      	mov	r3, sl
 810b102:	4632      	mov	r2, r6
 810b104:	f001 ff0c 	bl	810cf20 <_dtoa_r>
 810b108:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810b10c:	4607      	mov	r7, r0
 810b10e:	d102      	bne.n	810b116 <__cvt+0x66>
 810b110:	f019 0f01 	tst.w	r9, #1
 810b114:	d022      	beq.n	810b15c <__cvt+0xac>
 810b116:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810b11a:	eb07 0906 	add.w	r9, r7, r6
 810b11e:	d110      	bne.n	810b142 <__cvt+0x92>
 810b120:	783b      	ldrb	r3, [r7, #0]
 810b122:	2b30      	cmp	r3, #48	; 0x30
 810b124:	d10a      	bne.n	810b13c <__cvt+0x8c>
 810b126:	2200      	movs	r2, #0
 810b128:	2300      	movs	r3, #0
 810b12a:	4620      	mov	r0, r4
 810b12c:	4629      	mov	r1, r5
 810b12e:	f7f5 fd53 	bl	8100bd8 <__aeabi_dcmpeq>
 810b132:	b918      	cbnz	r0, 810b13c <__cvt+0x8c>
 810b134:	f1c6 0601 	rsb	r6, r6, #1
 810b138:	f8ca 6000 	str.w	r6, [sl]
 810b13c:	f8da 3000 	ldr.w	r3, [sl]
 810b140:	4499      	add	r9, r3
 810b142:	2200      	movs	r2, #0
 810b144:	2300      	movs	r3, #0
 810b146:	4620      	mov	r0, r4
 810b148:	4629      	mov	r1, r5
 810b14a:	f7f5 fd45 	bl	8100bd8 <__aeabi_dcmpeq>
 810b14e:	b108      	cbz	r0, 810b154 <__cvt+0xa4>
 810b150:	f8cd 900c 	str.w	r9, [sp, #12]
 810b154:	2230      	movs	r2, #48	; 0x30
 810b156:	9b03      	ldr	r3, [sp, #12]
 810b158:	454b      	cmp	r3, r9
 810b15a:	d307      	bcc.n	810b16c <__cvt+0xbc>
 810b15c:	9b03      	ldr	r3, [sp, #12]
 810b15e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810b160:	1bdb      	subs	r3, r3, r7
 810b162:	4638      	mov	r0, r7
 810b164:	6013      	str	r3, [r2, #0]
 810b166:	b004      	add	sp, #16
 810b168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b16c:	1c59      	adds	r1, r3, #1
 810b16e:	9103      	str	r1, [sp, #12]
 810b170:	701a      	strb	r2, [r3, #0]
 810b172:	e7f0      	b.n	810b156 <__cvt+0xa6>

0810b174 <__exponent>:
 810b174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810b176:	4603      	mov	r3, r0
 810b178:	2900      	cmp	r1, #0
 810b17a:	bfb8      	it	lt
 810b17c:	4249      	neglt	r1, r1
 810b17e:	f803 2b02 	strb.w	r2, [r3], #2
 810b182:	bfb4      	ite	lt
 810b184:	222d      	movlt	r2, #45	; 0x2d
 810b186:	222b      	movge	r2, #43	; 0x2b
 810b188:	2909      	cmp	r1, #9
 810b18a:	7042      	strb	r2, [r0, #1]
 810b18c:	dd2a      	ble.n	810b1e4 <__exponent+0x70>
 810b18e:	f10d 0407 	add.w	r4, sp, #7
 810b192:	46a4      	mov	ip, r4
 810b194:	270a      	movs	r7, #10
 810b196:	46a6      	mov	lr, r4
 810b198:	460a      	mov	r2, r1
 810b19a:	fb91 f6f7 	sdiv	r6, r1, r7
 810b19e:	fb07 1516 	mls	r5, r7, r6, r1
 810b1a2:	3530      	adds	r5, #48	; 0x30
 810b1a4:	2a63      	cmp	r2, #99	; 0x63
 810b1a6:	f104 34ff 	add.w	r4, r4, #4294967295
 810b1aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 810b1ae:	4631      	mov	r1, r6
 810b1b0:	dcf1      	bgt.n	810b196 <__exponent+0x22>
 810b1b2:	3130      	adds	r1, #48	; 0x30
 810b1b4:	f1ae 0502 	sub.w	r5, lr, #2
 810b1b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 810b1bc:	1c44      	adds	r4, r0, #1
 810b1be:	4629      	mov	r1, r5
 810b1c0:	4561      	cmp	r1, ip
 810b1c2:	d30a      	bcc.n	810b1da <__exponent+0x66>
 810b1c4:	f10d 0209 	add.w	r2, sp, #9
 810b1c8:	eba2 020e 	sub.w	r2, r2, lr
 810b1cc:	4565      	cmp	r5, ip
 810b1ce:	bf88      	it	hi
 810b1d0:	2200      	movhi	r2, #0
 810b1d2:	4413      	add	r3, r2
 810b1d4:	1a18      	subs	r0, r3, r0
 810b1d6:	b003      	add	sp, #12
 810b1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810b1da:	f811 2b01 	ldrb.w	r2, [r1], #1
 810b1de:	f804 2f01 	strb.w	r2, [r4, #1]!
 810b1e2:	e7ed      	b.n	810b1c0 <__exponent+0x4c>
 810b1e4:	2330      	movs	r3, #48	; 0x30
 810b1e6:	3130      	adds	r1, #48	; 0x30
 810b1e8:	7083      	strb	r3, [r0, #2]
 810b1ea:	70c1      	strb	r1, [r0, #3]
 810b1ec:	1d03      	adds	r3, r0, #4
 810b1ee:	e7f1      	b.n	810b1d4 <__exponent+0x60>

0810b1f0 <_printf_float>:
 810b1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b1f4:	ed2d 8b02 	vpush	{d8}
 810b1f8:	b08d      	sub	sp, #52	; 0x34
 810b1fa:	460c      	mov	r4, r1
 810b1fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810b200:	4616      	mov	r6, r2
 810b202:	461f      	mov	r7, r3
 810b204:	4605      	mov	r5, r0
 810b206:	f003 f99f 	bl	810e548 <_localeconv_r>
 810b20a:	f8d0 a000 	ldr.w	sl, [r0]
 810b20e:	4650      	mov	r0, sl
 810b210:	f7f5 f866 	bl	81002e0 <strlen>
 810b214:	2300      	movs	r3, #0
 810b216:	930a      	str	r3, [sp, #40]	; 0x28
 810b218:	6823      	ldr	r3, [r4, #0]
 810b21a:	9305      	str	r3, [sp, #20]
 810b21c:	f8d8 3000 	ldr.w	r3, [r8]
 810b220:	f894 b018 	ldrb.w	fp, [r4, #24]
 810b224:	3307      	adds	r3, #7
 810b226:	f023 0307 	bic.w	r3, r3, #7
 810b22a:	f103 0208 	add.w	r2, r3, #8
 810b22e:	f8c8 2000 	str.w	r2, [r8]
 810b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b236:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810b23a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810b23e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810b242:	9307      	str	r3, [sp, #28]
 810b244:	f8cd 8018 	str.w	r8, [sp, #24]
 810b248:	ee08 0a10 	vmov	s16, r0
 810b24c:	4b9f      	ldr	r3, [pc, #636]	; (810b4cc <_printf_float+0x2dc>)
 810b24e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810b252:	f04f 32ff 	mov.w	r2, #4294967295
 810b256:	f7f5 fcf1 	bl	8100c3c <__aeabi_dcmpun>
 810b25a:	bb88      	cbnz	r0, 810b2c0 <_printf_float+0xd0>
 810b25c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810b260:	4b9a      	ldr	r3, [pc, #616]	; (810b4cc <_printf_float+0x2dc>)
 810b262:	f04f 32ff 	mov.w	r2, #4294967295
 810b266:	f7f5 fccb 	bl	8100c00 <__aeabi_dcmple>
 810b26a:	bb48      	cbnz	r0, 810b2c0 <_printf_float+0xd0>
 810b26c:	2200      	movs	r2, #0
 810b26e:	2300      	movs	r3, #0
 810b270:	4640      	mov	r0, r8
 810b272:	4649      	mov	r1, r9
 810b274:	f7f5 fcba 	bl	8100bec <__aeabi_dcmplt>
 810b278:	b110      	cbz	r0, 810b280 <_printf_float+0x90>
 810b27a:	232d      	movs	r3, #45	; 0x2d
 810b27c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b280:	4b93      	ldr	r3, [pc, #588]	; (810b4d0 <_printf_float+0x2e0>)
 810b282:	4894      	ldr	r0, [pc, #592]	; (810b4d4 <_printf_float+0x2e4>)
 810b284:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 810b288:	bf94      	ite	ls
 810b28a:	4698      	movls	r8, r3
 810b28c:	4680      	movhi	r8, r0
 810b28e:	2303      	movs	r3, #3
 810b290:	6123      	str	r3, [r4, #16]
 810b292:	9b05      	ldr	r3, [sp, #20]
 810b294:	f023 0204 	bic.w	r2, r3, #4
 810b298:	6022      	str	r2, [r4, #0]
 810b29a:	f04f 0900 	mov.w	r9, #0
 810b29e:	9700      	str	r7, [sp, #0]
 810b2a0:	4633      	mov	r3, r6
 810b2a2:	aa0b      	add	r2, sp, #44	; 0x2c
 810b2a4:	4621      	mov	r1, r4
 810b2a6:	4628      	mov	r0, r5
 810b2a8:	f000 f9d8 	bl	810b65c <_printf_common>
 810b2ac:	3001      	adds	r0, #1
 810b2ae:	f040 8090 	bne.w	810b3d2 <_printf_float+0x1e2>
 810b2b2:	f04f 30ff 	mov.w	r0, #4294967295
 810b2b6:	b00d      	add	sp, #52	; 0x34
 810b2b8:	ecbd 8b02 	vpop	{d8}
 810b2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b2c0:	4642      	mov	r2, r8
 810b2c2:	464b      	mov	r3, r9
 810b2c4:	4640      	mov	r0, r8
 810b2c6:	4649      	mov	r1, r9
 810b2c8:	f7f5 fcb8 	bl	8100c3c <__aeabi_dcmpun>
 810b2cc:	b140      	cbz	r0, 810b2e0 <_printf_float+0xf0>
 810b2ce:	464b      	mov	r3, r9
 810b2d0:	2b00      	cmp	r3, #0
 810b2d2:	bfbc      	itt	lt
 810b2d4:	232d      	movlt	r3, #45	; 0x2d
 810b2d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 810b2da:	487f      	ldr	r0, [pc, #508]	; (810b4d8 <_printf_float+0x2e8>)
 810b2dc:	4b7f      	ldr	r3, [pc, #508]	; (810b4dc <_printf_float+0x2ec>)
 810b2de:	e7d1      	b.n	810b284 <_printf_float+0x94>
 810b2e0:	6863      	ldr	r3, [r4, #4]
 810b2e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810b2e6:	9206      	str	r2, [sp, #24]
 810b2e8:	1c5a      	adds	r2, r3, #1
 810b2ea:	d13f      	bne.n	810b36c <_printf_float+0x17c>
 810b2ec:	2306      	movs	r3, #6
 810b2ee:	6063      	str	r3, [r4, #4]
 810b2f0:	9b05      	ldr	r3, [sp, #20]
 810b2f2:	6861      	ldr	r1, [r4, #4]
 810b2f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 810b2f8:	2300      	movs	r3, #0
 810b2fa:	9303      	str	r3, [sp, #12]
 810b2fc:	ab0a      	add	r3, sp, #40	; 0x28
 810b2fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 810b302:	ab09      	add	r3, sp, #36	; 0x24
 810b304:	ec49 8b10 	vmov	d0, r8, r9
 810b308:	9300      	str	r3, [sp, #0]
 810b30a:	6022      	str	r2, [r4, #0]
 810b30c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810b310:	4628      	mov	r0, r5
 810b312:	f7ff fecd 	bl	810b0b0 <__cvt>
 810b316:	9b06      	ldr	r3, [sp, #24]
 810b318:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b31a:	2b47      	cmp	r3, #71	; 0x47
 810b31c:	4680      	mov	r8, r0
 810b31e:	d108      	bne.n	810b332 <_printf_float+0x142>
 810b320:	1cc8      	adds	r0, r1, #3
 810b322:	db02      	blt.n	810b32a <_printf_float+0x13a>
 810b324:	6863      	ldr	r3, [r4, #4]
 810b326:	4299      	cmp	r1, r3
 810b328:	dd41      	ble.n	810b3ae <_printf_float+0x1be>
 810b32a:	f1ab 0b02 	sub.w	fp, fp, #2
 810b32e:	fa5f fb8b 	uxtb.w	fp, fp
 810b332:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810b336:	d820      	bhi.n	810b37a <_printf_float+0x18a>
 810b338:	3901      	subs	r1, #1
 810b33a:	465a      	mov	r2, fp
 810b33c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810b340:	9109      	str	r1, [sp, #36]	; 0x24
 810b342:	f7ff ff17 	bl	810b174 <__exponent>
 810b346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810b348:	1813      	adds	r3, r2, r0
 810b34a:	2a01      	cmp	r2, #1
 810b34c:	4681      	mov	r9, r0
 810b34e:	6123      	str	r3, [r4, #16]
 810b350:	dc02      	bgt.n	810b358 <_printf_float+0x168>
 810b352:	6822      	ldr	r2, [r4, #0]
 810b354:	07d2      	lsls	r2, r2, #31
 810b356:	d501      	bpl.n	810b35c <_printf_float+0x16c>
 810b358:	3301      	adds	r3, #1
 810b35a:	6123      	str	r3, [r4, #16]
 810b35c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810b360:	2b00      	cmp	r3, #0
 810b362:	d09c      	beq.n	810b29e <_printf_float+0xae>
 810b364:	232d      	movs	r3, #45	; 0x2d
 810b366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b36a:	e798      	b.n	810b29e <_printf_float+0xae>
 810b36c:	9a06      	ldr	r2, [sp, #24]
 810b36e:	2a47      	cmp	r2, #71	; 0x47
 810b370:	d1be      	bne.n	810b2f0 <_printf_float+0x100>
 810b372:	2b00      	cmp	r3, #0
 810b374:	d1bc      	bne.n	810b2f0 <_printf_float+0x100>
 810b376:	2301      	movs	r3, #1
 810b378:	e7b9      	b.n	810b2ee <_printf_float+0xfe>
 810b37a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 810b37e:	d118      	bne.n	810b3b2 <_printf_float+0x1c2>
 810b380:	2900      	cmp	r1, #0
 810b382:	6863      	ldr	r3, [r4, #4]
 810b384:	dd0b      	ble.n	810b39e <_printf_float+0x1ae>
 810b386:	6121      	str	r1, [r4, #16]
 810b388:	b913      	cbnz	r3, 810b390 <_printf_float+0x1a0>
 810b38a:	6822      	ldr	r2, [r4, #0]
 810b38c:	07d0      	lsls	r0, r2, #31
 810b38e:	d502      	bpl.n	810b396 <_printf_float+0x1a6>
 810b390:	3301      	adds	r3, #1
 810b392:	440b      	add	r3, r1
 810b394:	6123      	str	r3, [r4, #16]
 810b396:	65a1      	str	r1, [r4, #88]	; 0x58
 810b398:	f04f 0900 	mov.w	r9, #0
 810b39c:	e7de      	b.n	810b35c <_printf_float+0x16c>
 810b39e:	b913      	cbnz	r3, 810b3a6 <_printf_float+0x1b6>
 810b3a0:	6822      	ldr	r2, [r4, #0]
 810b3a2:	07d2      	lsls	r2, r2, #31
 810b3a4:	d501      	bpl.n	810b3aa <_printf_float+0x1ba>
 810b3a6:	3302      	adds	r3, #2
 810b3a8:	e7f4      	b.n	810b394 <_printf_float+0x1a4>
 810b3aa:	2301      	movs	r3, #1
 810b3ac:	e7f2      	b.n	810b394 <_printf_float+0x1a4>
 810b3ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810b3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b3b4:	4299      	cmp	r1, r3
 810b3b6:	db05      	blt.n	810b3c4 <_printf_float+0x1d4>
 810b3b8:	6823      	ldr	r3, [r4, #0]
 810b3ba:	6121      	str	r1, [r4, #16]
 810b3bc:	07d8      	lsls	r0, r3, #31
 810b3be:	d5ea      	bpl.n	810b396 <_printf_float+0x1a6>
 810b3c0:	1c4b      	adds	r3, r1, #1
 810b3c2:	e7e7      	b.n	810b394 <_printf_float+0x1a4>
 810b3c4:	2900      	cmp	r1, #0
 810b3c6:	bfd4      	ite	le
 810b3c8:	f1c1 0202 	rsble	r2, r1, #2
 810b3cc:	2201      	movgt	r2, #1
 810b3ce:	4413      	add	r3, r2
 810b3d0:	e7e0      	b.n	810b394 <_printf_float+0x1a4>
 810b3d2:	6823      	ldr	r3, [r4, #0]
 810b3d4:	055a      	lsls	r2, r3, #21
 810b3d6:	d407      	bmi.n	810b3e8 <_printf_float+0x1f8>
 810b3d8:	6923      	ldr	r3, [r4, #16]
 810b3da:	4642      	mov	r2, r8
 810b3dc:	4631      	mov	r1, r6
 810b3de:	4628      	mov	r0, r5
 810b3e0:	47b8      	blx	r7
 810b3e2:	3001      	adds	r0, #1
 810b3e4:	d12c      	bne.n	810b440 <_printf_float+0x250>
 810b3e6:	e764      	b.n	810b2b2 <_printf_float+0xc2>
 810b3e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810b3ec:	f240 80e0 	bls.w	810b5b0 <_printf_float+0x3c0>
 810b3f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810b3f4:	2200      	movs	r2, #0
 810b3f6:	2300      	movs	r3, #0
 810b3f8:	f7f5 fbee 	bl	8100bd8 <__aeabi_dcmpeq>
 810b3fc:	2800      	cmp	r0, #0
 810b3fe:	d034      	beq.n	810b46a <_printf_float+0x27a>
 810b400:	4a37      	ldr	r2, [pc, #220]	; (810b4e0 <_printf_float+0x2f0>)
 810b402:	2301      	movs	r3, #1
 810b404:	4631      	mov	r1, r6
 810b406:	4628      	mov	r0, r5
 810b408:	47b8      	blx	r7
 810b40a:	3001      	adds	r0, #1
 810b40c:	f43f af51 	beq.w	810b2b2 <_printf_float+0xc2>
 810b410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b414:	429a      	cmp	r2, r3
 810b416:	db02      	blt.n	810b41e <_printf_float+0x22e>
 810b418:	6823      	ldr	r3, [r4, #0]
 810b41a:	07d8      	lsls	r0, r3, #31
 810b41c:	d510      	bpl.n	810b440 <_printf_float+0x250>
 810b41e:	ee18 3a10 	vmov	r3, s16
 810b422:	4652      	mov	r2, sl
 810b424:	4631      	mov	r1, r6
 810b426:	4628      	mov	r0, r5
 810b428:	47b8      	blx	r7
 810b42a:	3001      	adds	r0, #1
 810b42c:	f43f af41 	beq.w	810b2b2 <_printf_float+0xc2>
 810b430:	f04f 0800 	mov.w	r8, #0
 810b434:	f104 091a 	add.w	r9, r4, #26
 810b438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b43a:	3b01      	subs	r3, #1
 810b43c:	4543      	cmp	r3, r8
 810b43e:	dc09      	bgt.n	810b454 <_printf_float+0x264>
 810b440:	6823      	ldr	r3, [r4, #0]
 810b442:	079b      	lsls	r3, r3, #30
 810b444:	f100 8105 	bmi.w	810b652 <_printf_float+0x462>
 810b448:	68e0      	ldr	r0, [r4, #12]
 810b44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b44c:	4298      	cmp	r0, r3
 810b44e:	bfb8      	it	lt
 810b450:	4618      	movlt	r0, r3
 810b452:	e730      	b.n	810b2b6 <_printf_float+0xc6>
 810b454:	2301      	movs	r3, #1
 810b456:	464a      	mov	r2, r9
 810b458:	4631      	mov	r1, r6
 810b45a:	4628      	mov	r0, r5
 810b45c:	47b8      	blx	r7
 810b45e:	3001      	adds	r0, #1
 810b460:	f43f af27 	beq.w	810b2b2 <_printf_float+0xc2>
 810b464:	f108 0801 	add.w	r8, r8, #1
 810b468:	e7e6      	b.n	810b438 <_printf_float+0x248>
 810b46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b46c:	2b00      	cmp	r3, #0
 810b46e:	dc39      	bgt.n	810b4e4 <_printf_float+0x2f4>
 810b470:	4a1b      	ldr	r2, [pc, #108]	; (810b4e0 <_printf_float+0x2f0>)
 810b472:	2301      	movs	r3, #1
 810b474:	4631      	mov	r1, r6
 810b476:	4628      	mov	r0, r5
 810b478:	47b8      	blx	r7
 810b47a:	3001      	adds	r0, #1
 810b47c:	f43f af19 	beq.w	810b2b2 <_printf_float+0xc2>
 810b480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b484:	4313      	orrs	r3, r2
 810b486:	d102      	bne.n	810b48e <_printf_float+0x29e>
 810b488:	6823      	ldr	r3, [r4, #0]
 810b48a:	07d9      	lsls	r1, r3, #31
 810b48c:	d5d8      	bpl.n	810b440 <_printf_float+0x250>
 810b48e:	ee18 3a10 	vmov	r3, s16
 810b492:	4652      	mov	r2, sl
 810b494:	4631      	mov	r1, r6
 810b496:	4628      	mov	r0, r5
 810b498:	47b8      	blx	r7
 810b49a:	3001      	adds	r0, #1
 810b49c:	f43f af09 	beq.w	810b2b2 <_printf_float+0xc2>
 810b4a0:	f04f 0900 	mov.w	r9, #0
 810b4a4:	f104 0a1a 	add.w	sl, r4, #26
 810b4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b4aa:	425b      	negs	r3, r3
 810b4ac:	454b      	cmp	r3, r9
 810b4ae:	dc01      	bgt.n	810b4b4 <_printf_float+0x2c4>
 810b4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b4b2:	e792      	b.n	810b3da <_printf_float+0x1ea>
 810b4b4:	2301      	movs	r3, #1
 810b4b6:	4652      	mov	r2, sl
 810b4b8:	4631      	mov	r1, r6
 810b4ba:	4628      	mov	r0, r5
 810b4bc:	47b8      	blx	r7
 810b4be:	3001      	adds	r0, #1
 810b4c0:	f43f aef7 	beq.w	810b2b2 <_printf_float+0xc2>
 810b4c4:	f109 0901 	add.w	r9, r9, #1
 810b4c8:	e7ee      	b.n	810b4a8 <_printf_float+0x2b8>
 810b4ca:	bf00      	nop
 810b4cc:	7fefffff 	.word	0x7fefffff
 810b4d0:	0810fb68 	.word	0x0810fb68
 810b4d4:	0810fb6c 	.word	0x0810fb6c
 810b4d8:	0810fb74 	.word	0x0810fb74
 810b4dc:	0810fb70 	.word	0x0810fb70
 810b4e0:	0810fb78 	.word	0x0810fb78
 810b4e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810b4e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810b4e8:	429a      	cmp	r2, r3
 810b4ea:	bfa8      	it	ge
 810b4ec:	461a      	movge	r2, r3
 810b4ee:	2a00      	cmp	r2, #0
 810b4f0:	4691      	mov	r9, r2
 810b4f2:	dc37      	bgt.n	810b564 <_printf_float+0x374>
 810b4f4:	f04f 0b00 	mov.w	fp, #0
 810b4f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810b4fc:	f104 021a 	add.w	r2, r4, #26
 810b500:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810b502:	9305      	str	r3, [sp, #20]
 810b504:	eba3 0309 	sub.w	r3, r3, r9
 810b508:	455b      	cmp	r3, fp
 810b50a:	dc33      	bgt.n	810b574 <_printf_float+0x384>
 810b50c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b510:	429a      	cmp	r2, r3
 810b512:	db3b      	blt.n	810b58c <_printf_float+0x39c>
 810b514:	6823      	ldr	r3, [r4, #0]
 810b516:	07da      	lsls	r2, r3, #31
 810b518:	d438      	bmi.n	810b58c <_printf_float+0x39c>
 810b51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b51c:	9a05      	ldr	r2, [sp, #20]
 810b51e:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b520:	1a9a      	subs	r2, r3, r2
 810b522:	eba3 0901 	sub.w	r9, r3, r1
 810b526:	4591      	cmp	r9, r2
 810b528:	bfa8      	it	ge
 810b52a:	4691      	movge	r9, r2
 810b52c:	f1b9 0f00 	cmp.w	r9, #0
 810b530:	dc35      	bgt.n	810b59e <_printf_float+0x3ae>
 810b532:	f04f 0800 	mov.w	r8, #0
 810b536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810b53a:	f104 0a1a 	add.w	sl, r4, #26
 810b53e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b542:	1a9b      	subs	r3, r3, r2
 810b544:	eba3 0309 	sub.w	r3, r3, r9
 810b548:	4543      	cmp	r3, r8
 810b54a:	f77f af79 	ble.w	810b440 <_printf_float+0x250>
 810b54e:	2301      	movs	r3, #1
 810b550:	4652      	mov	r2, sl
 810b552:	4631      	mov	r1, r6
 810b554:	4628      	mov	r0, r5
 810b556:	47b8      	blx	r7
 810b558:	3001      	adds	r0, #1
 810b55a:	f43f aeaa 	beq.w	810b2b2 <_printf_float+0xc2>
 810b55e:	f108 0801 	add.w	r8, r8, #1
 810b562:	e7ec      	b.n	810b53e <_printf_float+0x34e>
 810b564:	4613      	mov	r3, r2
 810b566:	4631      	mov	r1, r6
 810b568:	4642      	mov	r2, r8
 810b56a:	4628      	mov	r0, r5
 810b56c:	47b8      	blx	r7
 810b56e:	3001      	adds	r0, #1
 810b570:	d1c0      	bne.n	810b4f4 <_printf_float+0x304>
 810b572:	e69e      	b.n	810b2b2 <_printf_float+0xc2>
 810b574:	2301      	movs	r3, #1
 810b576:	4631      	mov	r1, r6
 810b578:	4628      	mov	r0, r5
 810b57a:	9205      	str	r2, [sp, #20]
 810b57c:	47b8      	blx	r7
 810b57e:	3001      	adds	r0, #1
 810b580:	f43f ae97 	beq.w	810b2b2 <_printf_float+0xc2>
 810b584:	9a05      	ldr	r2, [sp, #20]
 810b586:	f10b 0b01 	add.w	fp, fp, #1
 810b58a:	e7b9      	b.n	810b500 <_printf_float+0x310>
 810b58c:	ee18 3a10 	vmov	r3, s16
 810b590:	4652      	mov	r2, sl
 810b592:	4631      	mov	r1, r6
 810b594:	4628      	mov	r0, r5
 810b596:	47b8      	blx	r7
 810b598:	3001      	adds	r0, #1
 810b59a:	d1be      	bne.n	810b51a <_printf_float+0x32a>
 810b59c:	e689      	b.n	810b2b2 <_printf_float+0xc2>
 810b59e:	9a05      	ldr	r2, [sp, #20]
 810b5a0:	464b      	mov	r3, r9
 810b5a2:	4442      	add	r2, r8
 810b5a4:	4631      	mov	r1, r6
 810b5a6:	4628      	mov	r0, r5
 810b5a8:	47b8      	blx	r7
 810b5aa:	3001      	adds	r0, #1
 810b5ac:	d1c1      	bne.n	810b532 <_printf_float+0x342>
 810b5ae:	e680      	b.n	810b2b2 <_printf_float+0xc2>
 810b5b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810b5b2:	2a01      	cmp	r2, #1
 810b5b4:	dc01      	bgt.n	810b5ba <_printf_float+0x3ca>
 810b5b6:	07db      	lsls	r3, r3, #31
 810b5b8:	d538      	bpl.n	810b62c <_printf_float+0x43c>
 810b5ba:	2301      	movs	r3, #1
 810b5bc:	4642      	mov	r2, r8
 810b5be:	4631      	mov	r1, r6
 810b5c0:	4628      	mov	r0, r5
 810b5c2:	47b8      	blx	r7
 810b5c4:	3001      	adds	r0, #1
 810b5c6:	f43f ae74 	beq.w	810b2b2 <_printf_float+0xc2>
 810b5ca:	ee18 3a10 	vmov	r3, s16
 810b5ce:	4652      	mov	r2, sl
 810b5d0:	4631      	mov	r1, r6
 810b5d2:	4628      	mov	r0, r5
 810b5d4:	47b8      	blx	r7
 810b5d6:	3001      	adds	r0, #1
 810b5d8:	f43f ae6b 	beq.w	810b2b2 <_printf_float+0xc2>
 810b5dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810b5e0:	2200      	movs	r2, #0
 810b5e2:	2300      	movs	r3, #0
 810b5e4:	f7f5 faf8 	bl	8100bd8 <__aeabi_dcmpeq>
 810b5e8:	b9d8      	cbnz	r0, 810b622 <_printf_float+0x432>
 810b5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b5ec:	f108 0201 	add.w	r2, r8, #1
 810b5f0:	3b01      	subs	r3, #1
 810b5f2:	4631      	mov	r1, r6
 810b5f4:	4628      	mov	r0, r5
 810b5f6:	47b8      	blx	r7
 810b5f8:	3001      	adds	r0, #1
 810b5fa:	d10e      	bne.n	810b61a <_printf_float+0x42a>
 810b5fc:	e659      	b.n	810b2b2 <_printf_float+0xc2>
 810b5fe:	2301      	movs	r3, #1
 810b600:	4652      	mov	r2, sl
 810b602:	4631      	mov	r1, r6
 810b604:	4628      	mov	r0, r5
 810b606:	47b8      	blx	r7
 810b608:	3001      	adds	r0, #1
 810b60a:	f43f ae52 	beq.w	810b2b2 <_printf_float+0xc2>
 810b60e:	f108 0801 	add.w	r8, r8, #1
 810b612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b614:	3b01      	subs	r3, #1
 810b616:	4543      	cmp	r3, r8
 810b618:	dcf1      	bgt.n	810b5fe <_printf_float+0x40e>
 810b61a:	464b      	mov	r3, r9
 810b61c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810b620:	e6dc      	b.n	810b3dc <_printf_float+0x1ec>
 810b622:	f04f 0800 	mov.w	r8, #0
 810b626:	f104 0a1a 	add.w	sl, r4, #26
 810b62a:	e7f2      	b.n	810b612 <_printf_float+0x422>
 810b62c:	2301      	movs	r3, #1
 810b62e:	4642      	mov	r2, r8
 810b630:	e7df      	b.n	810b5f2 <_printf_float+0x402>
 810b632:	2301      	movs	r3, #1
 810b634:	464a      	mov	r2, r9
 810b636:	4631      	mov	r1, r6
 810b638:	4628      	mov	r0, r5
 810b63a:	47b8      	blx	r7
 810b63c:	3001      	adds	r0, #1
 810b63e:	f43f ae38 	beq.w	810b2b2 <_printf_float+0xc2>
 810b642:	f108 0801 	add.w	r8, r8, #1
 810b646:	68e3      	ldr	r3, [r4, #12]
 810b648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810b64a:	1a5b      	subs	r3, r3, r1
 810b64c:	4543      	cmp	r3, r8
 810b64e:	dcf0      	bgt.n	810b632 <_printf_float+0x442>
 810b650:	e6fa      	b.n	810b448 <_printf_float+0x258>
 810b652:	f04f 0800 	mov.w	r8, #0
 810b656:	f104 0919 	add.w	r9, r4, #25
 810b65a:	e7f4      	b.n	810b646 <_printf_float+0x456>

0810b65c <_printf_common>:
 810b65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b660:	4616      	mov	r6, r2
 810b662:	4699      	mov	r9, r3
 810b664:	688a      	ldr	r2, [r1, #8]
 810b666:	690b      	ldr	r3, [r1, #16]
 810b668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810b66c:	4293      	cmp	r3, r2
 810b66e:	bfb8      	it	lt
 810b670:	4613      	movlt	r3, r2
 810b672:	6033      	str	r3, [r6, #0]
 810b674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810b678:	4607      	mov	r7, r0
 810b67a:	460c      	mov	r4, r1
 810b67c:	b10a      	cbz	r2, 810b682 <_printf_common+0x26>
 810b67e:	3301      	adds	r3, #1
 810b680:	6033      	str	r3, [r6, #0]
 810b682:	6823      	ldr	r3, [r4, #0]
 810b684:	0699      	lsls	r1, r3, #26
 810b686:	bf42      	ittt	mi
 810b688:	6833      	ldrmi	r3, [r6, #0]
 810b68a:	3302      	addmi	r3, #2
 810b68c:	6033      	strmi	r3, [r6, #0]
 810b68e:	6825      	ldr	r5, [r4, #0]
 810b690:	f015 0506 	ands.w	r5, r5, #6
 810b694:	d106      	bne.n	810b6a4 <_printf_common+0x48>
 810b696:	f104 0a19 	add.w	sl, r4, #25
 810b69a:	68e3      	ldr	r3, [r4, #12]
 810b69c:	6832      	ldr	r2, [r6, #0]
 810b69e:	1a9b      	subs	r3, r3, r2
 810b6a0:	42ab      	cmp	r3, r5
 810b6a2:	dc26      	bgt.n	810b6f2 <_printf_common+0x96>
 810b6a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810b6a8:	1e13      	subs	r3, r2, #0
 810b6aa:	6822      	ldr	r2, [r4, #0]
 810b6ac:	bf18      	it	ne
 810b6ae:	2301      	movne	r3, #1
 810b6b0:	0692      	lsls	r2, r2, #26
 810b6b2:	d42b      	bmi.n	810b70c <_printf_common+0xb0>
 810b6b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810b6b8:	4649      	mov	r1, r9
 810b6ba:	4638      	mov	r0, r7
 810b6bc:	47c0      	blx	r8
 810b6be:	3001      	adds	r0, #1
 810b6c0:	d01e      	beq.n	810b700 <_printf_common+0xa4>
 810b6c2:	6823      	ldr	r3, [r4, #0]
 810b6c4:	68e5      	ldr	r5, [r4, #12]
 810b6c6:	6832      	ldr	r2, [r6, #0]
 810b6c8:	f003 0306 	and.w	r3, r3, #6
 810b6cc:	2b04      	cmp	r3, #4
 810b6ce:	bf08      	it	eq
 810b6d0:	1aad      	subeq	r5, r5, r2
 810b6d2:	68a3      	ldr	r3, [r4, #8]
 810b6d4:	6922      	ldr	r2, [r4, #16]
 810b6d6:	bf0c      	ite	eq
 810b6d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810b6dc:	2500      	movne	r5, #0
 810b6de:	4293      	cmp	r3, r2
 810b6e0:	bfc4      	itt	gt
 810b6e2:	1a9b      	subgt	r3, r3, r2
 810b6e4:	18ed      	addgt	r5, r5, r3
 810b6e6:	2600      	movs	r6, #0
 810b6e8:	341a      	adds	r4, #26
 810b6ea:	42b5      	cmp	r5, r6
 810b6ec:	d11a      	bne.n	810b724 <_printf_common+0xc8>
 810b6ee:	2000      	movs	r0, #0
 810b6f0:	e008      	b.n	810b704 <_printf_common+0xa8>
 810b6f2:	2301      	movs	r3, #1
 810b6f4:	4652      	mov	r2, sl
 810b6f6:	4649      	mov	r1, r9
 810b6f8:	4638      	mov	r0, r7
 810b6fa:	47c0      	blx	r8
 810b6fc:	3001      	adds	r0, #1
 810b6fe:	d103      	bne.n	810b708 <_printf_common+0xac>
 810b700:	f04f 30ff 	mov.w	r0, #4294967295
 810b704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b708:	3501      	adds	r5, #1
 810b70a:	e7c6      	b.n	810b69a <_printf_common+0x3e>
 810b70c:	18e1      	adds	r1, r4, r3
 810b70e:	1c5a      	adds	r2, r3, #1
 810b710:	2030      	movs	r0, #48	; 0x30
 810b712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810b716:	4422      	add	r2, r4
 810b718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810b71c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810b720:	3302      	adds	r3, #2
 810b722:	e7c7      	b.n	810b6b4 <_printf_common+0x58>
 810b724:	2301      	movs	r3, #1
 810b726:	4622      	mov	r2, r4
 810b728:	4649      	mov	r1, r9
 810b72a:	4638      	mov	r0, r7
 810b72c:	47c0      	blx	r8
 810b72e:	3001      	adds	r0, #1
 810b730:	d0e6      	beq.n	810b700 <_printf_common+0xa4>
 810b732:	3601      	adds	r6, #1
 810b734:	e7d9      	b.n	810b6ea <_printf_common+0x8e>
	...

0810b738 <_printf_i>:
 810b738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810b73c:	7e0f      	ldrb	r7, [r1, #24]
 810b73e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810b740:	2f78      	cmp	r7, #120	; 0x78
 810b742:	4691      	mov	r9, r2
 810b744:	4680      	mov	r8, r0
 810b746:	460c      	mov	r4, r1
 810b748:	469a      	mov	sl, r3
 810b74a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810b74e:	d807      	bhi.n	810b760 <_printf_i+0x28>
 810b750:	2f62      	cmp	r7, #98	; 0x62
 810b752:	d80a      	bhi.n	810b76a <_printf_i+0x32>
 810b754:	2f00      	cmp	r7, #0
 810b756:	f000 80d8 	beq.w	810b90a <_printf_i+0x1d2>
 810b75a:	2f58      	cmp	r7, #88	; 0x58
 810b75c:	f000 80a3 	beq.w	810b8a6 <_printf_i+0x16e>
 810b760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810b764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810b768:	e03a      	b.n	810b7e0 <_printf_i+0xa8>
 810b76a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810b76e:	2b15      	cmp	r3, #21
 810b770:	d8f6      	bhi.n	810b760 <_printf_i+0x28>
 810b772:	a101      	add	r1, pc, #4	; (adr r1, 810b778 <_printf_i+0x40>)
 810b774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810b778:	0810b7d1 	.word	0x0810b7d1
 810b77c:	0810b7e5 	.word	0x0810b7e5
 810b780:	0810b761 	.word	0x0810b761
 810b784:	0810b761 	.word	0x0810b761
 810b788:	0810b761 	.word	0x0810b761
 810b78c:	0810b761 	.word	0x0810b761
 810b790:	0810b7e5 	.word	0x0810b7e5
 810b794:	0810b761 	.word	0x0810b761
 810b798:	0810b761 	.word	0x0810b761
 810b79c:	0810b761 	.word	0x0810b761
 810b7a0:	0810b761 	.word	0x0810b761
 810b7a4:	0810b8f1 	.word	0x0810b8f1
 810b7a8:	0810b815 	.word	0x0810b815
 810b7ac:	0810b8d3 	.word	0x0810b8d3
 810b7b0:	0810b761 	.word	0x0810b761
 810b7b4:	0810b761 	.word	0x0810b761
 810b7b8:	0810b913 	.word	0x0810b913
 810b7bc:	0810b761 	.word	0x0810b761
 810b7c0:	0810b815 	.word	0x0810b815
 810b7c4:	0810b761 	.word	0x0810b761
 810b7c8:	0810b761 	.word	0x0810b761
 810b7cc:	0810b8db 	.word	0x0810b8db
 810b7d0:	682b      	ldr	r3, [r5, #0]
 810b7d2:	1d1a      	adds	r2, r3, #4
 810b7d4:	681b      	ldr	r3, [r3, #0]
 810b7d6:	602a      	str	r2, [r5, #0]
 810b7d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810b7dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810b7e0:	2301      	movs	r3, #1
 810b7e2:	e0a3      	b.n	810b92c <_printf_i+0x1f4>
 810b7e4:	6820      	ldr	r0, [r4, #0]
 810b7e6:	6829      	ldr	r1, [r5, #0]
 810b7e8:	0606      	lsls	r6, r0, #24
 810b7ea:	f101 0304 	add.w	r3, r1, #4
 810b7ee:	d50a      	bpl.n	810b806 <_printf_i+0xce>
 810b7f0:	680e      	ldr	r6, [r1, #0]
 810b7f2:	602b      	str	r3, [r5, #0]
 810b7f4:	2e00      	cmp	r6, #0
 810b7f6:	da03      	bge.n	810b800 <_printf_i+0xc8>
 810b7f8:	232d      	movs	r3, #45	; 0x2d
 810b7fa:	4276      	negs	r6, r6
 810b7fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b800:	485e      	ldr	r0, [pc, #376]	; (810b97c <_printf_i+0x244>)
 810b802:	230a      	movs	r3, #10
 810b804:	e019      	b.n	810b83a <_printf_i+0x102>
 810b806:	680e      	ldr	r6, [r1, #0]
 810b808:	602b      	str	r3, [r5, #0]
 810b80a:	f010 0f40 	tst.w	r0, #64	; 0x40
 810b80e:	bf18      	it	ne
 810b810:	b236      	sxthne	r6, r6
 810b812:	e7ef      	b.n	810b7f4 <_printf_i+0xbc>
 810b814:	682b      	ldr	r3, [r5, #0]
 810b816:	6820      	ldr	r0, [r4, #0]
 810b818:	1d19      	adds	r1, r3, #4
 810b81a:	6029      	str	r1, [r5, #0]
 810b81c:	0601      	lsls	r1, r0, #24
 810b81e:	d501      	bpl.n	810b824 <_printf_i+0xec>
 810b820:	681e      	ldr	r6, [r3, #0]
 810b822:	e002      	b.n	810b82a <_printf_i+0xf2>
 810b824:	0646      	lsls	r6, r0, #25
 810b826:	d5fb      	bpl.n	810b820 <_printf_i+0xe8>
 810b828:	881e      	ldrh	r6, [r3, #0]
 810b82a:	4854      	ldr	r0, [pc, #336]	; (810b97c <_printf_i+0x244>)
 810b82c:	2f6f      	cmp	r7, #111	; 0x6f
 810b82e:	bf0c      	ite	eq
 810b830:	2308      	moveq	r3, #8
 810b832:	230a      	movne	r3, #10
 810b834:	2100      	movs	r1, #0
 810b836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810b83a:	6865      	ldr	r5, [r4, #4]
 810b83c:	60a5      	str	r5, [r4, #8]
 810b83e:	2d00      	cmp	r5, #0
 810b840:	bfa2      	ittt	ge
 810b842:	6821      	ldrge	r1, [r4, #0]
 810b844:	f021 0104 	bicge.w	r1, r1, #4
 810b848:	6021      	strge	r1, [r4, #0]
 810b84a:	b90e      	cbnz	r6, 810b850 <_printf_i+0x118>
 810b84c:	2d00      	cmp	r5, #0
 810b84e:	d04d      	beq.n	810b8ec <_printf_i+0x1b4>
 810b850:	4615      	mov	r5, r2
 810b852:	fbb6 f1f3 	udiv	r1, r6, r3
 810b856:	fb03 6711 	mls	r7, r3, r1, r6
 810b85a:	5dc7      	ldrb	r7, [r0, r7]
 810b85c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810b860:	4637      	mov	r7, r6
 810b862:	42bb      	cmp	r3, r7
 810b864:	460e      	mov	r6, r1
 810b866:	d9f4      	bls.n	810b852 <_printf_i+0x11a>
 810b868:	2b08      	cmp	r3, #8
 810b86a:	d10b      	bne.n	810b884 <_printf_i+0x14c>
 810b86c:	6823      	ldr	r3, [r4, #0]
 810b86e:	07de      	lsls	r6, r3, #31
 810b870:	d508      	bpl.n	810b884 <_printf_i+0x14c>
 810b872:	6923      	ldr	r3, [r4, #16]
 810b874:	6861      	ldr	r1, [r4, #4]
 810b876:	4299      	cmp	r1, r3
 810b878:	bfde      	ittt	le
 810b87a:	2330      	movle	r3, #48	; 0x30
 810b87c:	f805 3c01 	strble.w	r3, [r5, #-1]
 810b880:	f105 35ff 	addle.w	r5, r5, #4294967295
 810b884:	1b52      	subs	r2, r2, r5
 810b886:	6122      	str	r2, [r4, #16]
 810b888:	f8cd a000 	str.w	sl, [sp]
 810b88c:	464b      	mov	r3, r9
 810b88e:	aa03      	add	r2, sp, #12
 810b890:	4621      	mov	r1, r4
 810b892:	4640      	mov	r0, r8
 810b894:	f7ff fee2 	bl	810b65c <_printf_common>
 810b898:	3001      	adds	r0, #1
 810b89a:	d14c      	bne.n	810b936 <_printf_i+0x1fe>
 810b89c:	f04f 30ff 	mov.w	r0, #4294967295
 810b8a0:	b004      	add	sp, #16
 810b8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b8a6:	4835      	ldr	r0, [pc, #212]	; (810b97c <_printf_i+0x244>)
 810b8a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 810b8ac:	6829      	ldr	r1, [r5, #0]
 810b8ae:	6823      	ldr	r3, [r4, #0]
 810b8b0:	f851 6b04 	ldr.w	r6, [r1], #4
 810b8b4:	6029      	str	r1, [r5, #0]
 810b8b6:	061d      	lsls	r5, r3, #24
 810b8b8:	d514      	bpl.n	810b8e4 <_printf_i+0x1ac>
 810b8ba:	07df      	lsls	r7, r3, #31
 810b8bc:	bf44      	itt	mi
 810b8be:	f043 0320 	orrmi.w	r3, r3, #32
 810b8c2:	6023      	strmi	r3, [r4, #0]
 810b8c4:	b91e      	cbnz	r6, 810b8ce <_printf_i+0x196>
 810b8c6:	6823      	ldr	r3, [r4, #0]
 810b8c8:	f023 0320 	bic.w	r3, r3, #32
 810b8cc:	6023      	str	r3, [r4, #0]
 810b8ce:	2310      	movs	r3, #16
 810b8d0:	e7b0      	b.n	810b834 <_printf_i+0xfc>
 810b8d2:	6823      	ldr	r3, [r4, #0]
 810b8d4:	f043 0320 	orr.w	r3, r3, #32
 810b8d8:	6023      	str	r3, [r4, #0]
 810b8da:	2378      	movs	r3, #120	; 0x78
 810b8dc:	4828      	ldr	r0, [pc, #160]	; (810b980 <_printf_i+0x248>)
 810b8de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810b8e2:	e7e3      	b.n	810b8ac <_printf_i+0x174>
 810b8e4:	0659      	lsls	r1, r3, #25
 810b8e6:	bf48      	it	mi
 810b8e8:	b2b6      	uxthmi	r6, r6
 810b8ea:	e7e6      	b.n	810b8ba <_printf_i+0x182>
 810b8ec:	4615      	mov	r5, r2
 810b8ee:	e7bb      	b.n	810b868 <_printf_i+0x130>
 810b8f0:	682b      	ldr	r3, [r5, #0]
 810b8f2:	6826      	ldr	r6, [r4, #0]
 810b8f4:	6961      	ldr	r1, [r4, #20]
 810b8f6:	1d18      	adds	r0, r3, #4
 810b8f8:	6028      	str	r0, [r5, #0]
 810b8fa:	0635      	lsls	r5, r6, #24
 810b8fc:	681b      	ldr	r3, [r3, #0]
 810b8fe:	d501      	bpl.n	810b904 <_printf_i+0x1cc>
 810b900:	6019      	str	r1, [r3, #0]
 810b902:	e002      	b.n	810b90a <_printf_i+0x1d2>
 810b904:	0670      	lsls	r0, r6, #25
 810b906:	d5fb      	bpl.n	810b900 <_printf_i+0x1c8>
 810b908:	8019      	strh	r1, [r3, #0]
 810b90a:	2300      	movs	r3, #0
 810b90c:	6123      	str	r3, [r4, #16]
 810b90e:	4615      	mov	r5, r2
 810b910:	e7ba      	b.n	810b888 <_printf_i+0x150>
 810b912:	682b      	ldr	r3, [r5, #0]
 810b914:	1d1a      	adds	r2, r3, #4
 810b916:	602a      	str	r2, [r5, #0]
 810b918:	681d      	ldr	r5, [r3, #0]
 810b91a:	6862      	ldr	r2, [r4, #4]
 810b91c:	2100      	movs	r1, #0
 810b91e:	4628      	mov	r0, r5
 810b920:	f7f4 fce6 	bl	81002f0 <memchr>
 810b924:	b108      	cbz	r0, 810b92a <_printf_i+0x1f2>
 810b926:	1b40      	subs	r0, r0, r5
 810b928:	6060      	str	r0, [r4, #4]
 810b92a:	6863      	ldr	r3, [r4, #4]
 810b92c:	6123      	str	r3, [r4, #16]
 810b92e:	2300      	movs	r3, #0
 810b930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b934:	e7a8      	b.n	810b888 <_printf_i+0x150>
 810b936:	6923      	ldr	r3, [r4, #16]
 810b938:	462a      	mov	r2, r5
 810b93a:	4649      	mov	r1, r9
 810b93c:	4640      	mov	r0, r8
 810b93e:	47d0      	blx	sl
 810b940:	3001      	adds	r0, #1
 810b942:	d0ab      	beq.n	810b89c <_printf_i+0x164>
 810b944:	6823      	ldr	r3, [r4, #0]
 810b946:	079b      	lsls	r3, r3, #30
 810b948:	d413      	bmi.n	810b972 <_printf_i+0x23a>
 810b94a:	68e0      	ldr	r0, [r4, #12]
 810b94c:	9b03      	ldr	r3, [sp, #12]
 810b94e:	4298      	cmp	r0, r3
 810b950:	bfb8      	it	lt
 810b952:	4618      	movlt	r0, r3
 810b954:	e7a4      	b.n	810b8a0 <_printf_i+0x168>
 810b956:	2301      	movs	r3, #1
 810b958:	4632      	mov	r2, r6
 810b95a:	4649      	mov	r1, r9
 810b95c:	4640      	mov	r0, r8
 810b95e:	47d0      	blx	sl
 810b960:	3001      	adds	r0, #1
 810b962:	d09b      	beq.n	810b89c <_printf_i+0x164>
 810b964:	3501      	adds	r5, #1
 810b966:	68e3      	ldr	r3, [r4, #12]
 810b968:	9903      	ldr	r1, [sp, #12]
 810b96a:	1a5b      	subs	r3, r3, r1
 810b96c:	42ab      	cmp	r3, r5
 810b96e:	dcf2      	bgt.n	810b956 <_printf_i+0x21e>
 810b970:	e7eb      	b.n	810b94a <_printf_i+0x212>
 810b972:	2500      	movs	r5, #0
 810b974:	f104 0619 	add.w	r6, r4, #25
 810b978:	e7f5      	b.n	810b966 <_printf_i+0x22e>
 810b97a:	bf00      	nop
 810b97c:	0810fb7a 	.word	0x0810fb7a
 810b980:	0810fb8b 	.word	0x0810fb8b

0810b984 <_scanf_float>:
 810b984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b988:	b087      	sub	sp, #28
 810b98a:	4617      	mov	r7, r2
 810b98c:	9303      	str	r3, [sp, #12]
 810b98e:	688b      	ldr	r3, [r1, #8]
 810b990:	1e5a      	subs	r2, r3, #1
 810b992:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810b996:	bf83      	ittte	hi
 810b998:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810b99c:	195b      	addhi	r3, r3, r5
 810b99e:	9302      	strhi	r3, [sp, #8]
 810b9a0:	2300      	movls	r3, #0
 810b9a2:	bf86      	itte	hi
 810b9a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 810b9a8:	608b      	strhi	r3, [r1, #8]
 810b9aa:	9302      	strls	r3, [sp, #8]
 810b9ac:	680b      	ldr	r3, [r1, #0]
 810b9ae:	468b      	mov	fp, r1
 810b9b0:	2500      	movs	r5, #0
 810b9b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810b9b6:	f84b 3b1c 	str.w	r3, [fp], #28
 810b9ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810b9be:	4680      	mov	r8, r0
 810b9c0:	460c      	mov	r4, r1
 810b9c2:	465e      	mov	r6, fp
 810b9c4:	46aa      	mov	sl, r5
 810b9c6:	46a9      	mov	r9, r5
 810b9c8:	9501      	str	r5, [sp, #4]
 810b9ca:	68a2      	ldr	r2, [r4, #8]
 810b9cc:	b152      	cbz	r2, 810b9e4 <_scanf_float+0x60>
 810b9ce:	683b      	ldr	r3, [r7, #0]
 810b9d0:	781b      	ldrb	r3, [r3, #0]
 810b9d2:	2b4e      	cmp	r3, #78	; 0x4e
 810b9d4:	d864      	bhi.n	810baa0 <_scanf_float+0x11c>
 810b9d6:	2b40      	cmp	r3, #64	; 0x40
 810b9d8:	d83c      	bhi.n	810ba54 <_scanf_float+0xd0>
 810b9da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810b9de:	b2c8      	uxtb	r0, r1
 810b9e0:	280e      	cmp	r0, #14
 810b9e2:	d93a      	bls.n	810ba5a <_scanf_float+0xd6>
 810b9e4:	f1b9 0f00 	cmp.w	r9, #0
 810b9e8:	d003      	beq.n	810b9f2 <_scanf_float+0x6e>
 810b9ea:	6823      	ldr	r3, [r4, #0]
 810b9ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810b9f0:	6023      	str	r3, [r4, #0]
 810b9f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 810b9f6:	f1ba 0f01 	cmp.w	sl, #1
 810b9fa:	f200 8113 	bhi.w	810bc24 <_scanf_float+0x2a0>
 810b9fe:	455e      	cmp	r6, fp
 810ba00:	f200 8105 	bhi.w	810bc0e <_scanf_float+0x28a>
 810ba04:	2501      	movs	r5, #1
 810ba06:	4628      	mov	r0, r5
 810ba08:	b007      	add	sp, #28
 810ba0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ba0e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810ba12:	2a0d      	cmp	r2, #13
 810ba14:	d8e6      	bhi.n	810b9e4 <_scanf_float+0x60>
 810ba16:	a101      	add	r1, pc, #4	; (adr r1, 810ba1c <_scanf_float+0x98>)
 810ba18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810ba1c:	0810bb5b 	.word	0x0810bb5b
 810ba20:	0810b9e5 	.word	0x0810b9e5
 810ba24:	0810b9e5 	.word	0x0810b9e5
 810ba28:	0810b9e5 	.word	0x0810b9e5
 810ba2c:	0810bbbb 	.word	0x0810bbbb
 810ba30:	0810bb93 	.word	0x0810bb93
 810ba34:	0810b9e5 	.word	0x0810b9e5
 810ba38:	0810b9e5 	.word	0x0810b9e5
 810ba3c:	0810bb69 	.word	0x0810bb69
 810ba40:	0810b9e5 	.word	0x0810b9e5
 810ba44:	0810b9e5 	.word	0x0810b9e5
 810ba48:	0810b9e5 	.word	0x0810b9e5
 810ba4c:	0810b9e5 	.word	0x0810b9e5
 810ba50:	0810bb21 	.word	0x0810bb21
 810ba54:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810ba58:	e7db      	b.n	810ba12 <_scanf_float+0x8e>
 810ba5a:	290e      	cmp	r1, #14
 810ba5c:	d8c2      	bhi.n	810b9e4 <_scanf_float+0x60>
 810ba5e:	a001      	add	r0, pc, #4	; (adr r0, 810ba64 <_scanf_float+0xe0>)
 810ba60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810ba64:	0810bb13 	.word	0x0810bb13
 810ba68:	0810b9e5 	.word	0x0810b9e5
 810ba6c:	0810bb13 	.word	0x0810bb13
 810ba70:	0810bba7 	.word	0x0810bba7
 810ba74:	0810b9e5 	.word	0x0810b9e5
 810ba78:	0810bac1 	.word	0x0810bac1
 810ba7c:	0810bafd 	.word	0x0810bafd
 810ba80:	0810bafd 	.word	0x0810bafd
 810ba84:	0810bafd 	.word	0x0810bafd
 810ba88:	0810bafd 	.word	0x0810bafd
 810ba8c:	0810bafd 	.word	0x0810bafd
 810ba90:	0810bafd 	.word	0x0810bafd
 810ba94:	0810bafd 	.word	0x0810bafd
 810ba98:	0810bafd 	.word	0x0810bafd
 810ba9c:	0810bafd 	.word	0x0810bafd
 810baa0:	2b6e      	cmp	r3, #110	; 0x6e
 810baa2:	d809      	bhi.n	810bab8 <_scanf_float+0x134>
 810baa4:	2b60      	cmp	r3, #96	; 0x60
 810baa6:	d8b2      	bhi.n	810ba0e <_scanf_float+0x8a>
 810baa8:	2b54      	cmp	r3, #84	; 0x54
 810baaa:	d077      	beq.n	810bb9c <_scanf_float+0x218>
 810baac:	2b59      	cmp	r3, #89	; 0x59
 810baae:	d199      	bne.n	810b9e4 <_scanf_float+0x60>
 810bab0:	2d07      	cmp	r5, #7
 810bab2:	d197      	bne.n	810b9e4 <_scanf_float+0x60>
 810bab4:	2508      	movs	r5, #8
 810bab6:	e029      	b.n	810bb0c <_scanf_float+0x188>
 810bab8:	2b74      	cmp	r3, #116	; 0x74
 810baba:	d06f      	beq.n	810bb9c <_scanf_float+0x218>
 810babc:	2b79      	cmp	r3, #121	; 0x79
 810babe:	e7f6      	b.n	810baae <_scanf_float+0x12a>
 810bac0:	6821      	ldr	r1, [r4, #0]
 810bac2:	05c8      	lsls	r0, r1, #23
 810bac4:	d51a      	bpl.n	810bafc <_scanf_float+0x178>
 810bac6:	9b02      	ldr	r3, [sp, #8]
 810bac8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 810bacc:	6021      	str	r1, [r4, #0]
 810bace:	f109 0901 	add.w	r9, r9, #1
 810bad2:	b11b      	cbz	r3, 810badc <_scanf_float+0x158>
 810bad4:	3b01      	subs	r3, #1
 810bad6:	3201      	adds	r2, #1
 810bad8:	9302      	str	r3, [sp, #8]
 810bada:	60a2      	str	r2, [r4, #8]
 810badc:	68a3      	ldr	r3, [r4, #8]
 810bade:	3b01      	subs	r3, #1
 810bae0:	60a3      	str	r3, [r4, #8]
 810bae2:	6923      	ldr	r3, [r4, #16]
 810bae4:	3301      	adds	r3, #1
 810bae6:	6123      	str	r3, [r4, #16]
 810bae8:	687b      	ldr	r3, [r7, #4]
 810baea:	3b01      	subs	r3, #1
 810baec:	2b00      	cmp	r3, #0
 810baee:	607b      	str	r3, [r7, #4]
 810baf0:	f340 8084 	ble.w	810bbfc <_scanf_float+0x278>
 810baf4:	683b      	ldr	r3, [r7, #0]
 810baf6:	3301      	adds	r3, #1
 810baf8:	603b      	str	r3, [r7, #0]
 810bafa:	e766      	b.n	810b9ca <_scanf_float+0x46>
 810bafc:	eb1a 0f05 	cmn.w	sl, r5
 810bb00:	f47f af70 	bne.w	810b9e4 <_scanf_float+0x60>
 810bb04:	6822      	ldr	r2, [r4, #0]
 810bb06:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810bb0a:	6022      	str	r2, [r4, #0]
 810bb0c:	f806 3b01 	strb.w	r3, [r6], #1
 810bb10:	e7e4      	b.n	810badc <_scanf_float+0x158>
 810bb12:	6822      	ldr	r2, [r4, #0]
 810bb14:	0610      	lsls	r0, r2, #24
 810bb16:	f57f af65 	bpl.w	810b9e4 <_scanf_float+0x60>
 810bb1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810bb1e:	e7f4      	b.n	810bb0a <_scanf_float+0x186>
 810bb20:	f1ba 0f00 	cmp.w	sl, #0
 810bb24:	d10e      	bne.n	810bb44 <_scanf_float+0x1c0>
 810bb26:	f1b9 0f00 	cmp.w	r9, #0
 810bb2a:	d10e      	bne.n	810bb4a <_scanf_float+0x1c6>
 810bb2c:	6822      	ldr	r2, [r4, #0]
 810bb2e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810bb32:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810bb36:	d108      	bne.n	810bb4a <_scanf_float+0x1c6>
 810bb38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810bb3c:	6022      	str	r2, [r4, #0]
 810bb3e:	f04f 0a01 	mov.w	sl, #1
 810bb42:	e7e3      	b.n	810bb0c <_scanf_float+0x188>
 810bb44:	f1ba 0f02 	cmp.w	sl, #2
 810bb48:	d055      	beq.n	810bbf6 <_scanf_float+0x272>
 810bb4a:	2d01      	cmp	r5, #1
 810bb4c:	d002      	beq.n	810bb54 <_scanf_float+0x1d0>
 810bb4e:	2d04      	cmp	r5, #4
 810bb50:	f47f af48 	bne.w	810b9e4 <_scanf_float+0x60>
 810bb54:	3501      	adds	r5, #1
 810bb56:	b2ed      	uxtb	r5, r5
 810bb58:	e7d8      	b.n	810bb0c <_scanf_float+0x188>
 810bb5a:	f1ba 0f01 	cmp.w	sl, #1
 810bb5e:	f47f af41 	bne.w	810b9e4 <_scanf_float+0x60>
 810bb62:	f04f 0a02 	mov.w	sl, #2
 810bb66:	e7d1      	b.n	810bb0c <_scanf_float+0x188>
 810bb68:	b97d      	cbnz	r5, 810bb8a <_scanf_float+0x206>
 810bb6a:	f1b9 0f00 	cmp.w	r9, #0
 810bb6e:	f47f af3c 	bne.w	810b9ea <_scanf_float+0x66>
 810bb72:	6822      	ldr	r2, [r4, #0]
 810bb74:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810bb78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810bb7c:	f47f af39 	bne.w	810b9f2 <_scanf_float+0x6e>
 810bb80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810bb84:	6022      	str	r2, [r4, #0]
 810bb86:	2501      	movs	r5, #1
 810bb88:	e7c0      	b.n	810bb0c <_scanf_float+0x188>
 810bb8a:	2d03      	cmp	r5, #3
 810bb8c:	d0e2      	beq.n	810bb54 <_scanf_float+0x1d0>
 810bb8e:	2d05      	cmp	r5, #5
 810bb90:	e7de      	b.n	810bb50 <_scanf_float+0x1cc>
 810bb92:	2d02      	cmp	r5, #2
 810bb94:	f47f af26 	bne.w	810b9e4 <_scanf_float+0x60>
 810bb98:	2503      	movs	r5, #3
 810bb9a:	e7b7      	b.n	810bb0c <_scanf_float+0x188>
 810bb9c:	2d06      	cmp	r5, #6
 810bb9e:	f47f af21 	bne.w	810b9e4 <_scanf_float+0x60>
 810bba2:	2507      	movs	r5, #7
 810bba4:	e7b2      	b.n	810bb0c <_scanf_float+0x188>
 810bba6:	6822      	ldr	r2, [r4, #0]
 810bba8:	0591      	lsls	r1, r2, #22
 810bbaa:	f57f af1b 	bpl.w	810b9e4 <_scanf_float+0x60>
 810bbae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810bbb2:	6022      	str	r2, [r4, #0]
 810bbb4:	f8cd 9004 	str.w	r9, [sp, #4]
 810bbb8:	e7a8      	b.n	810bb0c <_scanf_float+0x188>
 810bbba:	6822      	ldr	r2, [r4, #0]
 810bbbc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 810bbc0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810bbc4:	d006      	beq.n	810bbd4 <_scanf_float+0x250>
 810bbc6:	0550      	lsls	r0, r2, #21
 810bbc8:	f57f af0c 	bpl.w	810b9e4 <_scanf_float+0x60>
 810bbcc:	f1b9 0f00 	cmp.w	r9, #0
 810bbd0:	f43f af0f 	beq.w	810b9f2 <_scanf_float+0x6e>
 810bbd4:	0591      	lsls	r1, r2, #22
 810bbd6:	bf58      	it	pl
 810bbd8:	9901      	ldrpl	r1, [sp, #4]
 810bbda:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810bbde:	bf58      	it	pl
 810bbe0:	eba9 0101 	subpl.w	r1, r9, r1
 810bbe4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810bbe8:	bf58      	it	pl
 810bbea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810bbee:	6022      	str	r2, [r4, #0]
 810bbf0:	f04f 0900 	mov.w	r9, #0
 810bbf4:	e78a      	b.n	810bb0c <_scanf_float+0x188>
 810bbf6:	f04f 0a03 	mov.w	sl, #3
 810bbfa:	e787      	b.n	810bb0c <_scanf_float+0x188>
 810bbfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810bc00:	4639      	mov	r1, r7
 810bc02:	4640      	mov	r0, r8
 810bc04:	4798      	blx	r3
 810bc06:	2800      	cmp	r0, #0
 810bc08:	f43f aedf 	beq.w	810b9ca <_scanf_float+0x46>
 810bc0c:	e6ea      	b.n	810b9e4 <_scanf_float+0x60>
 810bc0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bc12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810bc16:	463a      	mov	r2, r7
 810bc18:	4640      	mov	r0, r8
 810bc1a:	4798      	blx	r3
 810bc1c:	6923      	ldr	r3, [r4, #16]
 810bc1e:	3b01      	subs	r3, #1
 810bc20:	6123      	str	r3, [r4, #16]
 810bc22:	e6ec      	b.n	810b9fe <_scanf_float+0x7a>
 810bc24:	1e6b      	subs	r3, r5, #1
 810bc26:	2b06      	cmp	r3, #6
 810bc28:	d825      	bhi.n	810bc76 <_scanf_float+0x2f2>
 810bc2a:	2d02      	cmp	r5, #2
 810bc2c:	d836      	bhi.n	810bc9c <_scanf_float+0x318>
 810bc2e:	455e      	cmp	r6, fp
 810bc30:	f67f aee8 	bls.w	810ba04 <_scanf_float+0x80>
 810bc34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bc38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810bc3c:	463a      	mov	r2, r7
 810bc3e:	4640      	mov	r0, r8
 810bc40:	4798      	blx	r3
 810bc42:	6923      	ldr	r3, [r4, #16]
 810bc44:	3b01      	subs	r3, #1
 810bc46:	6123      	str	r3, [r4, #16]
 810bc48:	e7f1      	b.n	810bc2e <_scanf_float+0x2aa>
 810bc4a:	9802      	ldr	r0, [sp, #8]
 810bc4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bc50:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 810bc54:	9002      	str	r0, [sp, #8]
 810bc56:	463a      	mov	r2, r7
 810bc58:	4640      	mov	r0, r8
 810bc5a:	4798      	blx	r3
 810bc5c:	6923      	ldr	r3, [r4, #16]
 810bc5e:	3b01      	subs	r3, #1
 810bc60:	6123      	str	r3, [r4, #16]
 810bc62:	f10a 3aff 	add.w	sl, sl, #4294967295
 810bc66:	fa5f fa8a 	uxtb.w	sl, sl
 810bc6a:	f1ba 0f02 	cmp.w	sl, #2
 810bc6e:	d1ec      	bne.n	810bc4a <_scanf_float+0x2c6>
 810bc70:	3d03      	subs	r5, #3
 810bc72:	b2ed      	uxtb	r5, r5
 810bc74:	1b76      	subs	r6, r6, r5
 810bc76:	6823      	ldr	r3, [r4, #0]
 810bc78:	05da      	lsls	r2, r3, #23
 810bc7a:	d52f      	bpl.n	810bcdc <_scanf_float+0x358>
 810bc7c:	055b      	lsls	r3, r3, #21
 810bc7e:	d510      	bpl.n	810bca2 <_scanf_float+0x31e>
 810bc80:	455e      	cmp	r6, fp
 810bc82:	f67f aebf 	bls.w	810ba04 <_scanf_float+0x80>
 810bc86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bc8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810bc8e:	463a      	mov	r2, r7
 810bc90:	4640      	mov	r0, r8
 810bc92:	4798      	blx	r3
 810bc94:	6923      	ldr	r3, [r4, #16]
 810bc96:	3b01      	subs	r3, #1
 810bc98:	6123      	str	r3, [r4, #16]
 810bc9a:	e7f1      	b.n	810bc80 <_scanf_float+0x2fc>
 810bc9c:	46aa      	mov	sl, r5
 810bc9e:	9602      	str	r6, [sp, #8]
 810bca0:	e7df      	b.n	810bc62 <_scanf_float+0x2de>
 810bca2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810bca6:	6923      	ldr	r3, [r4, #16]
 810bca8:	2965      	cmp	r1, #101	; 0x65
 810bcaa:	f103 33ff 	add.w	r3, r3, #4294967295
 810bcae:	f106 35ff 	add.w	r5, r6, #4294967295
 810bcb2:	6123      	str	r3, [r4, #16]
 810bcb4:	d00c      	beq.n	810bcd0 <_scanf_float+0x34c>
 810bcb6:	2945      	cmp	r1, #69	; 0x45
 810bcb8:	d00a      	beq.n	810bcd0 <_scanf_float+0x34c>
 810bcba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bcbe:	463a      	mov	r2, r7
 810bcc0:	4640      	mov	r0, r8
 810bcc2:	4798      	blx	r3
 810bcc4:	6923      	ldr	r3, [r4, #16]
 810bcc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810bcca:	3b01      	subs	r3, #1
 810bccc:	1eb5      	subs	r5, r6, #2
 810bcce:	6123      	str	r3, [r4, #16]
 810bcd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bcd4:	463a      	mov	r2, r7
 810bcd6:	4640      	mov	r0, r8
 810bcd8:	4798      	blx	r3
 810bcda:	462e      	mov	r6, r5
 810bcdc:	6825      	ldr	r5, [r4, #0]
 810bcde:	f015 0510 	ands.w	r5, r5, #16
 810bce2:	d159      	bne.n	810bd98 <_scanf_float+0x414>
 810bce4:	7035      	strb	r5, [r6, #0]
 810bce6:	6823      	ldr	r3, [r4, #0]
 810bce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810bcec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810bcf0:	d11b      	bne.n	810bd2a <_scanf_float+0x3a6>
 810bcf2:	9b01      	ldr	r3, [sp, #4]
 810bcf4:	454b      	cmp	r3, r9
 810bcf6:	eba3 0209 	sub.w	r2, r3, r9
 810bcfa:	d123      	bne.n	810bd44 <_scanf_float+0x3c0>
 810bcfc:	2200      	movs	r2, #0
 810bcfe:	4659      	mov	r1, fp
 810bd00:	4640      	mov	r0, r8
 810bd02:	f000 ff37 	bl	810cb74 <_strtod_r>
 810bd06:	6822      	ldr	r2, [r4, #0]
 810bd08:	9b03      	ldr	r3, [sp, #12]
 810bd0a:	f012 0f02 	tst.w	r2, #2
 810bd0e:	ec57 6b10 	vmov	r6, r7, d0
 810bd12:	681b      	ldr	r3, [r3, #0]
 810bd14:	d021      	beq.n	810bd5a <_scanf_float+0x3d6>
 810bd16:	9903      	ldr	r1, [sp, #12]
 810bd18:	1d1a      	adds	r2, r3, #4
 810bd1a:	600a      	str	r2, [r1, #0]
 810bd1c:	681b      	ldr	r3, [r3, #0]
 810bd1e:	e9c3 6700 	strd	r6, r7, [r3]
 810bd22:	68e3      	ldr	r3, [r4, #12]
 810bd24:	3301      	adds	r3, #1
 810bd26:	60e3      	str	r3, [r4, #12]
 810bd28:	e66d      	b.n	810ba06 <_scanf_float+0x82>
 810bd2a:	9b04      	ldr	r3, [sp, #16]
 810bd2c:	2b00      	cmp	r3, #0
 810bd2e:	d0e5      	beq.n	810bcfc <_scanf_float+0x378>
 810bd30:	9905      	ldr	r1, [sp, #20]
 810bd32:	230a      	movs	r3, #10
 810bd34:	462a      	mov	r2, r5
 810bd36:	3101      	adds	r1, #1
 810bd38:	4640      	mov	r0, r8
 810bd3a:	f000 ffa3 	bl	810cc84 <_strtol_r>
 810bd3e:	9b04      	ldr	r3, [sp, #16]
 810bd40:	9e05      	ldr	r6, [sp, #20]
 810bd42:	1ac2      	subs	r2, r0, r3
 810bd44:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810bd48:	429e      	cmp	r6, r3
 810bd4a:	bf28      	it	cs
 810bd4c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 810bd50:	4912      	ldr	r1, [pc, #72]	; (810bd9c <_scanf_float+0x418>)
 810bd52:	4630      	mov	r0, r6
 810bd54:	f000 f8ca 	bl	810beec <siprintf>
 810bd58:	e7d0      	b.n	810bcfc <_scanf_float+0x378>
 810bd5a:	9903      	ldr	r1, [sp, #12]
 810bd5c:	f012 0f04 	tst.w	r2, #4
 810bd60:	f103 0204 	add.w	r2, r3, #4
 810bd64:	600a      	str	r2, [r1, #0]
 810bd66:	d1d9      	bne.n	810bd1c <_scanf_float+0x398>
 810bd68:	f8d3 8000 	ldr.w	r8, [r3]
 810bd6c:	ee10 2a10 	vmov	r2, s0
 810bd70:	ee10 0a10 	vmov	r0, s0
 810bd74:	463b      	mov	r3, r7
 810bd76:	4639      	mov	r1, r7
 810bd78:	f7f4 ff60 	bl	8100c3c <__aeabi_dcmpun>
 810bd7c:	b128      	cbz	r0, 810bd8a <_scanf_float+0x406>
 810bd7e:	4808      	ldr	r0, [pc, #32]	; (810bda0 <_scanf_float+0x41c>)
 810bd80:	f000 f8ae 	bl	810bee0 <nanf>
 810bd84:	ed88 0a00 	vstr	s0, [r8]
 810bd88:	e7cb      	b.n	810bd22 <_scanf_float+0x39e>
 810bd8a:	4630      	mov	r0, r6
 810bd8c:	4639      	mov	r1, r7
 810bd8e:	f7f4 ffb3 	bl	8100cf8 <__aeabi_d2f>
 810bd92:	f8c8 0000 	str.w	r0, [r8]
 810bd96:	e7c4      	b.n	810bd22 <_scanf_float+0x39e>
 810bd98:	2500      	movs	r5, #0
 810bd9a:	e634      	b.n	810ba06 <_scanf_float+0x82>
 810bd9c:	0810fb9c 	.word	0x0810fb9c
 810bda0:	08110010 	.word	0x08110010

0810bda4 <iprintf>:
 810bda4:	b40f      	push	{r0, r1, r2, r3}
 810bda6:	4b0a      	ldr	r3, [pc, #40]	; (810bdd0 <iprintf+0x2c>)
 810bda8:	b513      	push	{r0, r1, r4, lr}
 810bdaa:	681c      	ldr	r4, [r3, #0]
 810bdac:	b124      	cbz	r4, 810bdb8 <iprintf+0x14>
 810bdae:	69a3      	ldr	r3, [r4, #24]
 810bdb0:	b913      	cbnz	r3, 810bdb8 <iprintf+0x14>
 810bdb2:	4620      	mov	r0, r4
 810bdb4:	f001 ffbc 	bl	810dd30 <__sinit>
 810bdb8:	ab05      	add	r3, sp, #20
 810bdba:	9a04      	ldr	r2, [sp, #16]
 810bdbc:	68a1      	ldr	r1, [r4, #8]
 810bdbe:	9301      	str	r3, [sp, #4]
 810bdc0:	4620      	mov	r0, r4
 810bdc2:	f003 faa7 	bl	810f314 <_vfiprintf_r>
 810bdc6:	b002      	add	sp, #8
 810bdc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810bdcc:	b004      	add	sp, #16
 810bdce:	4770      	bx	lr
 810bdd0:	10000020 	.word	0x10000020

0810bdd4 <_puts_r>:
 810bdd4:	b570      	push	{r4, r5, r6, lr}
 810bdd6:	460e      	mov	r6, r1
 810bdd8:	4605      	mov	r5, r0
 810bdda:	b118      	cbz	r0, 810bde4 <_puts_r+0x10>
 810bddc:	6983      	ldr	r3, [r0, #24]
 810bdde:	b90b      	cbnz	r3, 810bde4 <_puts_r+0x10>
 810bde0:	f001 ffa6 	bl	810dd30 <__sinit>
 810bde4:	69ab      	ldr	r3, [r5, #24]
 810bde6:	68ac      	ldr	r4, [r5, #8]
 810bde8:	b913      	cbnz	r3, 810bdf0 <_puts_r+0x1c>
 810bdea:	4628      	mov	r0, r5
 810bdec:	f001 ffa0 	bl	810dd30 <__sinit>
 810bdf0:	4b2c      	ldr	r3, [pc, #176]	; (810bea4 <_puts_r+0xd0>)
 810bdf2:	429c      	cmp	r4, r3
 810bdf4:	d120      	bne.n	810be38 <_puts_r+0x64>
 810bdf6:	686c      	ldr	r4, [r5, #4]
 810bdf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810bdfa:	07db      	lsls	r3, r3, #31
 810bdfc:	d405      	bmi.n	810be0a <_puts_r+0x36>
 810bdfe:	89a3      	ldrh	r3, [r4, #12]
 810be00:	0598      	lsls	r0, r3, #22
 810be02:	d402      	bmi.n	810be0a <_puts_r+0x36>
 810be04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810be06:	f002 fba4 	bl	810e552 <__retarget_lock_acquire_recursive>
 810be0a:	89a3      	ldrh	r3, [r4, #12]
 810be0c:	0719      	lsls	r1, r3, #28
 810be0e:	d51d      	bpl.n	810be4c <_puts_r+0x78>
 810be10:	6923      	ldr	r3, [r4, #16]
 810be12:	b1db      	cbz	r3, 810be4c <_puts_r+0x78>
 810be14:	3e01      	subs	r6, #1
 810be16:	68a3      	ldr	r3, [r4, #8]
 810be18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810be1c:	3b01      	subs	r3, #1
 810be1e:	60a3      	str	r3, [r4, #8]
 810be20:	bb39      	cbnz	r1, 810be72 <_puts_r+0x9e>
 810be22:	2b00      	cmp	r3, #0
 810be24:	da38      	bge.n	810be98 <_puts_r+0xc4>
 810be26:	4622      	mov	r2, r4
 810be28:	210a      	movs	r1, #10
 810be2a:	4628      	mov	r0, r5
 810be2c:	f000 ff2c 	bl	810cc88 <__swbuf_r>
 810be30:	3001      	adds	r0, #1
 810be32:	d011      	beq.n	810be58 <_puts_r+0x84>
 810be34:	250a      	movs	r5, #10
 810be36:	e011      	b.n	810be5c <_puts_r+0x88>
 810be38:	4b1b      	ldr	r3, [pc, #108]	; (810bea8 <_puts_r+0xd4>)
 810be3a:	429c      	cmp	r4, r3
 810be3c:	d101      	bne.n	810be42 <_puts_r+0x6e>
 810be3e:	68ac      	ldr	r4, [r5, #8]
 810be40:	e7da      	b.n	810bdf8 <_puts_r+0x24>
 810be42:	4b1a      	ldr	r3, [pc, #104]	; (810beac <_puts_r+0xd8>)
 810be44:	429c      	cmp	r4, r3
 810be46:	bf08      	it	eq
 810be48:	68ec      	ldreq	r4, [r5, #12]
 810be4a:	e7d5      	b.n	810bdf8 <_puts_r+0x24>
 810be4c:	4621      	mov	r1, r4
 810be4e:	4628      	mov	r0, r5
 810be50:	f000 ff6c 	bl	810cd2c <__swsetup_r>
 810be54:	2800      	cmp	r0, #0
 810be56:	d0dd      	beq.n	810be14 <_puts_r+0x40>
 810be58:	f04f 35ff 	mov.w	r5, #4294967295
 810be5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810be5e:	07da      	lsls	r2, r3, #31
 810be60:	d405      	bmi.n	810be6e <_puts_r+0x9a>
 810be62:	89a3      	ldrh	r3, [r4, #12]
 810be64:	059b      	lsls	r3, r3, #22
 810be66:	d402      	bmi.n	810be6e <_puts_r+0x9a>
 810be68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810be6a:	f002 fb73 	bl	810e554 <__retarget_lock_release_recursive>
 810be6e:	4628      	mov	r0, r5
 810be70:	bd70      	pop	{r4, r5, r6, pc}
 810be72:	2b00      	cmp	r3, #0
 810be74:	da04      	bge.n	810be80 <_puts_r+0xac>
 810be76:	69a2      	ldr	r2, [r4, #24]
 810be78:	429a      	cmp	r2, r3
 810be7a:	dc06      	bgt.n	810be8a <_puts_r+0xb6>
 810be7c:	290a      	cmp	r1, #10
 810be7e:	d004      	beq.n	810be8a <_puts_r+0xb6>
 810be80:	6823      	ldr	r3, [r4, #0]
 810be82:	1c5a      	adds	r2, r3, #1
 810be84:	6022      	str	r2, [r4, #0]
 810be86:	7019      	strb	r1, [r3, #0]
 810be88:	e7c5      	b.n	810be16 <_puts_r+0x42>
 810be8a:	4622      	mov	r2, r4
 810be8c:	4628      	mov	r0, r5
 810be8e:	f000 fefb 	bl	810cc88 <__swbuf_r>
 810be92:	3001      	adds	r0, #1
 810be94:	d1bf      	bne.n	810be16 <_puts_r+0x42>
 810be96:	e7df      	b.n	810be58 <_puts_r+0x84>
 810be98:	6823      	ldr	r3, [r4, #0]
 810be9a:	250a      	movs	r5, #10
 810be9c:	1c5a      	adds	r2, r3, #1
 810be9e:	6022      	str	r2, [r4, #0]
 810bea0:	701d      	strb	r5, [r3, #0]
 810bea2:	e7db      	b.n	810be5c <_puts_r+0x88>
 810bea4:	0810fdac 	.word	0x0810fdac
 810bea8:	0810fdcc 	.word	0x0810fdcc
 810beac:	0810fd8c 	.word	0x0810fd8c

0810beb0 <puts>:
 810beb0:	4b02      	ldr	r3, [pc, #8]	; (810bebc <puts+0xc>)
 810beb2:	4601      	mov	r1, r0
 810beb4:	6818      	ldr	r0, [r3, #0]
 810beb6:	f7ff bf8d 	b.w	810bdd4 <_puts_r>
 810beba:	bf00      	nop
 810bebc:	10000020 	.word	0x10000020

0810bec0 <_sbrk_r>:
 810bec0:	b538      	push	{r3, r4, r5, lr}
 810bec2:	4d06      	ldr	r5, [pc, #24]	; (810bedc <_sbrk_r+0x1c>)
 810bec4:	2300      	movs	r3, #0
 810bec6:	4604      	mov	r4, r0
 810bec8:	4608      	mov	r0, r1
 810beca:	602b      	str	r3, [r5, #0]
 810becc:	f7f6 ffd8 	bl	8102e80 <_sbrk>
 810bed0:	1c43      	adds	r3, r0, #1
 810bed2:	d102      	bne.n	810beda <_sbrk_r+0x1a>
 810bed4:	682b      	ldr	r3, [r5, #0]
 810bed6:	b103      	cbz	r3, 810beda <_sbrk_r+0x1a>
 810bed8:	6023      	str	r3, [r4, #0]
 810beda:	bd38      	pop	{r3, r4, r5, pc}
 810bedc:	100004b4 	.word	0x100004b4

0810bee0 <nanf>:
 810bee0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810bee8 <nanf+0x8>
 810bee4:	4770      	bx	lr
 810bee6:	bf00      	nop
 810bee8:	7fc00000 	.word	0x7fc00000

0810beec <siprintf>:
 810beec:	b40e      	push	{r1, r2, r3}
 810beee:	b500      	push	{lr}
 810bef0:	b09c      	sub	sp, #112	; 0x70
 810bef2:	ab1d      	add	r3, sp, #116	; 0x74
 810bef4:	9002      	str	r0, [sp, #8]
 810bef6:	9006      	str	r0, [sp, #24]
 810bef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810befc:	4809      	ldr	r0, [pc, #36]	; (810bf24 <siprintf+0x38>)
 810befe:	9107      	str	r1, [sp, #28]
 810bf00:	9104      	str	r1, [sp, #16]
 810bf02:	4909      	ldr	r1, [pc, #36]	; (810bf28 <siprintf+0x3c>)
 810bf04:	f853 2b04 	ldr.w	r2, [r3], #4
 810bf08:	9105      	str	r1, [sp, #20]
 810bf0a:	6800      	ldr	r0, [r0, #0]
 810bf0c:	9301      	str	r3, [sp, #4]
 810bf0e:	a902      	add	r1, sp, #8
 810bf10:	f003 f8d6 	bl	810f0c0 <_svfiprintf_r>
 810bf14:	9b02      	ldr	r3, [sp, #8]
 810bf16:	2200      	movs	r2, #0
 810bf18:	701a      	strb	r2, [r3, #0]
 810bf1a:	b01c      	add	sp, #112	; 0x70
 810bf1c:	f85d eb04 	ldr.w	lr, [sp], #4
 810bf20:	b003      	add	sp, #12
 810bf22:	4770      	bx	lr
 810bf24:	10000020 	.word	0x10000020
 810bf28:	ffff0208 	.word	0xffff0208

0810bf2c <sulp>:
 810bf2c:	b570      	push	{r4, r5, r6, lr}
 810bf2e:	4604      	mov	r4, r0
 810bf30:	460d      	mov	r5, r1
 810bf32:	ec45 4b10 	vmov	d0, r4, r5
 810bf36:	4616      	mov	r6, r2
 810bf38:	f002 ff02 	bl	810ed40 <__ulp>
 810bf3c:	ec51 0b10 	vmov	r0, r1, d0
 810bf40:	b17e      	cbz	r6, 810bf62 <sulp+0x36>
 810bf42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810bf46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810bf4a:	2b00      	cmp	r3, #0
 810bf4c:	dd09      	ble.n	810bf62 <sulp+0x36>
 810bf4e:	051b      	lsls	r3, r3, #20
 810bf50:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810bf54:	2400      	movs	r4, #0
 810bf56:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810bf5a:	4622      	mov	r2, r4
 810bf5c:	462b      	mov	r3, r5
 810bf5e:	f7f4 fbd3 	bl	8100708 <__aeabi_dmul>
 810bf62:	bd70      	pop	{r4, r5, r6, pc}
 810bf64:	0000      	movs	r0, r0
	...

0810bf68 <_strtod_l>:
 810bf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bf6c:	ed2d 8b02 	vpush	{d8}
 810bf70:	b09d      	sub	sp, #116	; 0x74
 810bf72:	461f      	mov	r7, r3
 810bf74:	2300      	movs	r3, #0
 810bf76:	9318      	str	r3, [sp, #96]	; 0x60
 810bf78:	4ba2      	ldr	r3, [pc, #648]	; (810c204 <_strtod_l+0x29c>)
 810bf7a:	9213      	str	r2, [sp, #76]	; 0x4c
 810bf7c:	681b      	ldr	r3, [r3, #0]
 810bf7e:	9305      	str	r3, [sp, #20]
 810bf80:	4604      	mov	r4, r0
 810bf82:	4618      	mov	r0, r3
 810bf84:	4688      	mov	r8, r1
 810bf86:	f7f4 f9ab 	bl	81002e0 <strlen>
 810bf8a:	f04f 0a00 	mov.w	sl, #0
 810bf8e:	4605      	mov	r5, r0
 810bf90:	f04f 0b00 	mov.w	fp, #0
 810bf94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810bf98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810bf9a:	781a      	ldrb	r2, [r3, #0]
 810bf9c:	2a2b      	cmp	r2, #43	; 0x2b
 810bf9e:	d04e      	beq.n	810c03e <_strtod_l+0xd6>
 810bfa0:	d83b      	bhi.n	810c01a <_strtod_l+0xb2>
 810bfa2:	2a0d      	cmp	r2, #13
 810bfa4:	d834      	bhi.n	810c010 <_strtod_l+0xa8>
 810bfa6:	2a08      	cmp	r2, #8
 810bfa8:	d834      	bhi.n	810c014 <_strtod_l+0xac>
 810bfaa:	2a00      	cmp	r2, #0
 810bfac:	d03e      	beq.n	810c02c <_strtod_l+0xc4>
 810bfae:	2300      	movs	r3, #0
 810bfb0:	930a      	str	r3, [sp, #40]	; 0x28
 810bfb2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810bfb4:	7833      	ldrb	r3, [r6, #0]
 810bfb6:	2b30      	cmp	r3, #48	; 0x30
 810bfb8:	f040 80b0 	bne.w	810c11c <_strtod_l+0x1b4>
 810bfbc:	7873      	ldrb	r3, [r6, #1]
 810bfbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810bfc2:	2b58      	cmp	r3, #88	; 0x58
 810bfc4:	d168      	bne.n	810c098 <_strtod_l+0x130>
 810bfc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810bfc8:	9301      	str	r3, [sp, #4]
 810bfca:	ab18      	add	r3, sp, #96	; 0x60
 810bfcc:	9702      	str	r7, [sp, #8]
 810bfce:	9300      	str	r3, [sp, #0]
 810bfd0:	4a8d      	ldr	r2, [pc, #564]	; (810c208 <_strtod_l+0x2a0>)
 810bfd2:	ab19      	add	r3, sp, #100	; 0x64
 810bfd4:	a917      	add	r1, sp, #92	; 0x5c
 810bfd6:	4620      	mov	r0, r4
 810bfd8:	f001 ffae 	bl	810df38 <__gethex>
 810bfdc:	f010 0707 	ands.w	r7, r0, #7
 810bfe0:	4605      	mov	r5, r0
 810bfe2:	d005      	beq.n	810bff0 <_strtod_l+0x88>
 810bfe4:	2f06      	cmp	r7, #6
 810bfe6:	d12c      	bne.n	810c042 <_strtod_l+0xda>
 810bfe8:	3601      	adds	r6, #1
 810bfea:	2300      	movs	r3, #0
 810bfec:	9617      	str	r6, [sp, #92]	; 0x5c
 810bfee:	930a      	str	r3, [sp, #40]	; 0x28
 810bff0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810bff2:	2b00      	cmp	r3, #0
 810bff4:	f040 8590 	bne.w	810cb18 <_strtod_l+0xbb0>
 810bff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810bffa:	b1eb      	cbz	r3, 810c038 <_strtod_l+0xd0>
 810bffc:	4652      	mov	r2, sl
 810bffe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810c002:	ec43 2b10 	vmov	d0, r2, r3
 810c006:	b01d      	add	sp, #116	; 0x74
 810c008:	ecbd 8b02 	vpop	{d8}
 810c00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c010:	2a20      	cmp	r2, #32
 810c012:	d1cc      	bne.n	810bfae <_strtod_l+0x46>
 810c014:	3301      	adds	r3, #1
 810c016:	9317      	str	r3, [sp, #92]	; 0x5c
 810c018:	e7be      	b.n	810bf98 <_strtod_l+0x30>
 810c01a:	2a2d      	cmp	r2, #45	; 0x2d
 810c01c:	d1c7      	bne.n	810bfae <_strtod_l+0x46>
 810c01e:	2201      	movs	r2, #1
 810c020:	920a      	str	r2, [sp, #40]	; 0x28
 810c022:	1c5a      	adds	r2, r3, #1
 810c024:	9217      	str	r2, [sp, #92]	; 0x5c
 810c026:	785b      	ldrb	r3, [r3, #1]
 810c028:	2b00      	cmp	r3, #0
 810c02a:	d1c2      	bne.n	810bfb2 <_strtod_l+0x4a>
 810c02c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810c02e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810c032:	2b00      	cmp	r3, #0
 810c034:	f040 856e 	bne.w	810cb14 <_strtod_l+0xbac>
 810c038:	4652      	mov	r2, sl
 810c03a:	465b      	mov	r3, fp
 810c03c:	e7e1      	b.n	810c002 <_strtod_l+0x9a>
 810c03e:	2200      	movs	r2, #0
 810c040:	e7ee      	b.n	810c020 <_strtod_l+0xb8>
 810c042:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810c044:	b13a      	cbz	r2, 810c056 <_strtod_l+0xee>
 810c046:	2135      	movs	r1, #53	; 0x35
 810c048:	a81a      	add	r0, sp, #104	; 0x68
 810c04a:	f002 ff84 	bl	810ef56 <__copybits>
 810c04e:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c050:	4620      	mov	r0, r4
 810c052:	f002 fb43 	bl	810e6dc <_Bfree>
 810c056:	3f01      	subs	r7, #1
 810c058:	2f04      	cmp	r7, #4
 810c05a:	d806      	bhi.n	810c06a <_strtod_l+0x102>
 810c05c:	e8df f007 	tbb	[pc, r7]
 810c060:	1714030a 	.word	0x1714030a
 810c064:	0a          	.byte	0x0a
 810c065:	00          	.byte	0x00
 810c066:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 810c06a:	0728      	lsls	r0, r5, #28
 810c06c:	d5c0      	bpl.n	810bff0 <_strtod_l+0x88>
 810c06e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 810c072:	e7bd      	b.n	810bff0 <_strtod_l+0x88>
 810c074:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 810c078:	9a19      	ldr	r2, [sp, #100]	; 0x64
 810c07a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810c07e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810c082:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810c086:	e7f0      	b.n	810c06a <_strtod_l+0x102>
 810c088:	f8df b180 	ldr.w	fp, [pc, #384]	; 810c20c <_strtod_l+0x2a4>
 810c08c:	e7ed      	b.n	810c06a <_strtod_l+0x102>
 810c08e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 810c092:	f04f 3aff 	mov.w	sl, #4294967295
 810c096:	e7e8      	b.n	810c06a <_strtod_l+0x102>
 810c098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c09a:	1c5a      	adds	r2, r3, #1
 810c09c:	9217      	str	r2, [sp, #92]	; 0x5c
 810c09e:	785b      	ldrb	r3, [r3, #1]
 810c0a0:	2b30      	cmp	r3, #48	; 0x30
 810c0a2:	d0f9      	beq.n	810c098 <_strtod_l+0x130>
 810c0a4:	2b00      	cmp	r3, #0
 810c0a6:	d0a3      	beq.n	810bff0 <_strtod_l+0x88>
 810c0a8:	2301      	movs	r3, #1
 810c0aa:	f04f 0900 	mov.w	r9, #0
 810c0ae:	9304      	str	r3, [sp, #16]
 810c0b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c0b2:	9308      	str	r3, [sp, #32]
 810c0b4:	f8cd 901c 	str.w	r9, [sp, #28]
 810c0b8:	464f      	mov	r7, r9
 810c0ba:	220a      	movs	r2, #10
 810c0bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 810c0be:	7806      	ldrb	r6, [r0, #0]
 810c0c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810c0c4:	b2d9      	uxtb	r1, r3
 810c0c6:	2909      	cmp	r1, #9
 810c0c8:	d92a      	bls.n	810c120 <_strtod_l+0x1b8>
 810c0ca:	9905      	ldr	r1, [sp, #20]
 810c0cc:	462a      	mov	r2, r5
 810c0ce:	f003 fa9e 	bl	810f60e <strncmp>
 810c0d2:	b398      	cbz	r0, 810c13c <_strtod_l+0x1d4>
 810c0d4:	2000      	movs	r0, #0
 810c0d6:	4632      	mov	r2, r6
 810c0d8:	463d      	mov	r5, r7
 810c0da:	9005      	str	r0, [sp, #20]
 810c0dc:	4603      	mov	r3, r0
 810c0de:	2a65      	cmp	r2, #101	; 0x65
 810c0e0:	d001      	beq.n	810c0e6 <_strtod_l+0x17e>
 810c0e2:	2a45      	cmp	r2, #69	; 0x45
 810c0e4:	d118      	bne.n	810c118 <_strtod_l+0x1b0>
 810c0e6:	b91d      	cbnz	r5, 810c0f0 <_strtod_l+0x188>
 810c0e8:	9a04      	ldr	r2, [sp, #16]
 810c0ea:	4302      	orrs	r2, r0
 810c0ec:	d09e      	beq.n	810c02c <_strtod_l+0xc4>
 810c0ee:	2500      	movs	r5, #0
 810c0f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 810c0f4:	f108 0201 	add.w	r2, r8, #1
 810c0f8:	9217      	str	r2, [sp, #92]	; 0x5c
 810c0fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 810c0fe:	2a2b      	cmp	r2, #43	; 0x2b
 810c100:	d075      	beq.n	810c1ee <_strtod_l+0x286>
 810c102:	2a2d      	cmp	r2, #45	; 0x2d
 810c104:	d07b      	beq.n	810c1fe <_strtod_l+0x296>
 810c106:	f04f 0c00 	mov.w	ip, #0
 810c10a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810c10e:	2909      	cmp	r1, #9
 810c110:	f240 8082 	bls.w	810c218 <_strtod_l+0x2b0>
 810c114:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810c118:	2600      	movs	r6, #0
 810c11a:	e09d      	b.n	810c258 <_strtod_l+0x2f0>
 810c11c:	2300      	movs	r3, #0
 810c11e:	e7c4      	b.n	810c0aa <_strtod_l+0x142>
 810c120:	2f08      	cmp	r7, #8
 810c122:	bfd8      	it	le
 810c124:	9907      	ldrle	r1, [sp, #28]
 810c126:	f100 0001 	add.w	r0, r0, #1
 810c12a:	bfda      	itte	le
 810c12c:	fb02 3301 	mlale	r3, r2, r1, r3
 810c130:	9307      	strle	r3, [sp, #28]
 810c132:	fb02 3909 	mlagt	r9, r2, r9, r3
 810c136:	3701      	adds	r7, #1
 810c138:	9017      	str	r0, [sp, #92]	; 0x5c
 810c13a:	e7bf      	b.n	810c0bc <_strtod_l+0x154>
 810c13c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c13e:	195a      	adds	r2, r3, r5
 810c140:	9217      	str	r2, [sp, #92]	; 0x5c
 810c142:	5d5a      	ldrb	r2, [r3, r5]
 810c144:	2f00      	cmp	r7, #0
 810c146:	d037      	beq.n	810c1b8 <_strtod_l+0x250>
 810c148:	9005      	str	r0, [sp, #20]
 810c14a:	463d      	mov	r5, r7
 810c14c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810c150:	2b09      	cmp	r3, #9
 810c152:	d912      	bls.n	810c17a <_strtod_l+0x212>
 810c154:	2301      	movs	r3, #1
 810c156:	e7c2      	b.n	810c0de <_strtod_l+0x176>
 810c158:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c15a:	1c5a      	adds	r2, r3, #1
 810c15c:	9217      	str	r2, [sp, #92]	; 0x5c
 810c15e:	785a      	ldrb	r2, [r3, #1]
 810c160:	3001      	adds	r0, #1
 810c162:	2a30      	cmp	r2, #48	; 0x30
 810c164:	d0f8      	beq.n	810c158 <_strtod_l+0x1f0>
 810c166:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810c16a:	2b08      	cmp	r3, #8
 810c16c:	f200 84d9 	bhi.w	810cb22 <_strtod_l+0xbba>
 810c170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c172:	9005      	str	r0, [sp, #20]
 810c174:	2000      	movs	r0, #0
 810c176:	9308      	str	r3, [sp, #32]
 810c178:	4605      	mov	r5, r0
 810c17a:	3a30      	subs	r2, #48	; 0x30
 810c17c:	f100 0301 	add.w	r3, r0, #1
 810c180:	d014      	beq.n	810c1ac <_strtod_l+0x244>
 810c182:	9905      	ldr	r1, [sp, #20]
 810c184:	4419      	add	r1, r3
 810c186:	9105      	str	r1, [sp, #20]
 810c188:	462b      	mov	r3, r5
 810c18a:	eb00 0e05 	add.w	lr, r0, r5
 810c18e:	210a      	movs	r1, #10
 810c190:	4573      	cmp	r3, lr
 810c192:	d113      	bne.n	810c1bc <_strtod_l+0x254>
 810c194:	182b      	adds	r3, r5, r0
 810c196:	2b08      	cmp	r3, #8
 810c198:	f105 0501 	add.w	r5, r5, #1
 810c19c:	4405      	add	r5, r0
 810c19e:	dc1c      	bgt.n	810c1da <_strtod_l+0x272>
 810c1a0:	9907      	ldr	r1, [sp, #28]
 810c1a2:	230a      	movs	r3, #10
 810c1a4:	fb03 2301 	mla	r3, r3, r1, r2
 810c1a8:	9307      	str	r3, [sp, #28]
 810c1aa:	2300      	movs	r3, #0
 810c1ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810c1ae:	1c51      	adds	r1, r2, #1
 810c1b0:	9117      	str	r1, [sp, #92]	; 0x5c
 810c1b2:	7852      	ldrb	r2, [r2, #1]
 810c1b4:	4618      	mov	r0, r3
 810c1b6:	e7c9      	b.n	810c14c <_strtod_l+0x1e4>
 810c1b8:	4638      	mov	r0, r7
 810c1ba:	e7d2      	b.n	810c162 <_strtod_l+0x1fa>
 810c1bc:	2b08      	cmp	r3, #8
 810c1be:	dc04      	bgt.n	810c1ca <_strtod_l+0x262>
 810c1c0:	9e07      	ldr	r6, [sp, #28]
 810c1c2:	434e      	muls	r6, r1
 810c1c4:	9607      	str	r6, [sp, #28]
 810c1c6:	3301      	adds	r3, #1
 810c1c8:	e7e2      	b.n	810c190 <_strtod_l+0x228>
 810c1ca:	f103 0c01 	add.w	ip, r3, #1
 810c1ce:	f1bc 0f10 	cmp.w	ip, #16
 810c1d2:	bfd8      	it	le
 810c1d4:	fb01 f909 	mulle.w	r9, r1, r9
 810c1d8:	e7f5      	b.n	810c1c6 <_strtod_l+0x25e>
 810c1da:	2d10      	cmp	r5, #16
 810c1dc:	bfdc      	itt	le
 810c1de:	230a      	movle	r3, #10
 810c1e0:	fb03 2909 	mlale	r9, r3, r9, r2
 810c1e4:	e7e1      	b.n	810c1aa <_strtod_l+0x242>
 810c1e6:	2300      	movs	r3, #0
 810c1e8:	9305      	str	r3, [sp, #20]
 810c1ea:	2301      	movs	r3, #1
 810c1ec:	e77c      	b.n	810c0e8 <_strtod_l+0x180>
 810c1ee:	f04f 0c00 	mov.w	ip, #0
 810c1f2:	f108 0202 	add.w	r2, r8, #2
 810c1f6:	9217      	str	r2, [sp, #92]	; 0x5c
 810c1f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 810c1fc:	e785      	b.n	810c10a <_strtod_l+0x1a2>
 810c1fe:	f04f 0c01 	mov.w	ip, #1
 810c202:	e7f6      	b.n	810c1f2 <_strtod_l+0x28a>
 810c204:	0810fe54 	.word	0x0810fe54
 810c208:	0810fba4 	.word	0x0810fba4
 810c20c:	7ff00000 	.word	0x7ff00000
 810c210:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810c212:	1c51      	adds	r1, r2, #1
 810c214:	9117      	str	r1, [sp, #92]	; 0x5c
 810c216:	7852      	ldrb	r2, [r2, #1]
 810c218:	2a30      	cmp	r2, #48	; 0x30
 810c21a:	d0f9      	beq.n	810c210 <_strtod_l+0x2a8>
 810c21c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810c220:	2908      	cmp	r1, #8
 810c222:	f63f af79 	bhi.w	810c118 <_strtod_l+0x1b0>
 810c226:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810c22a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810c22c:	9206      	str	r2, [sp, #24]
 810c22e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810c230:	1c51      	adds	r1, r2, #1
 810c232:	9117      	str	r1, [sp, #92]	; 0x5c
 810c234:	7852      	ldrb	r2, [r2, #1]
 810c236:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 810c23a:	2e09      	cmp	r6, #9
 810c23c:	d937      	bls.n	810c2ae <_strtod_l+0x346>
 810c23e:	9e06      	ldr	r6, [sp, #24]
 810c240:	1b89      	subs	r1, r1, r6
 810c242:	2908      	cmp	r1, #8
 810c244:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810c248:	dc02      	bgt.n	810c250 <_strtod_l+0x2e8>
 810c24a:	4576      	cmp	r6, lr
 810c24c:	bfa8      	it	ge
 810c24e:	4676      	movge	r6, lr
 810c250:	f1bc 0f00 	cmp.w	ip, #0
 810c254:	d000      	beq.n	810c258 <_strtod_l+0x2f0>
 810c256:	4276      	negs	r6, r6
 810c258:	2d00      	cmp	r5, #0
 810c25a:	d14d      	bne.n	810c2f8 <_strtod_l+0x390>
 810c25c:	9904      	ldr	r1, [sp, #16]
 810c25e:	4301      	orrs	r1, r0
 810c260:	f47f aec6 	bne.w	810bff0 <_strtod_l+0x88>
 810c264:	2b00      	cmp	r3, #0
 810c266:	f47f aee1 	bne.w	810c02c <_strtod_l+0xc4>
 810c26a:	2a69      	cmp	r2, #105	; 0x69
 810c26c:	d027      	beq.n	810c2be <_strtod_l+0x356>
 810c26e:	dc24      	bgt.n	810c2ba <_strtod_l+0x352>
 810c270:	2a49      	cmp	r2, #73	; 0x49
 810c272:	d024      	beq.n	810c2be <_strtod_l+0x356>
 810c274:	2a4e      	cmp	r2, #78	; 0x4e
 810c276:	f47f aed9 	bne.w	810c02c <_strtod_l+0xc4>
 810c27a:	499f      	ldr	r1, [pc, #636]	; (810c4f8 <_strtod_l+0x590>)
 810c27c:	a817      	add	r0, sp, #92	; 0x5c
 810c27e:	f002 f8b3 	bl	810e3e8 <__match>
 810c282:	2800      	cmp	r0, #0
 810c284:	f43f aed2 	beq.w	810c02c <_strtod_l+0xc4>
 810c288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c28a:	781b      	ldrb	r3, [r3, #0]
 810c28c:	2b28      	cmp	r3, #40	; 0x28
 810c28e:	d12d      	bne.n	810c2ec <_strtod_l+0x384>
 810c290:	499a      	ldr	r1, [pc, #616]	; (810c4fc <_strtod_l+0x594>)
 810c292:	aa1a      	add	r2, sp, #104	; 0x68
 810c294:	a817      	add	r0, sp, #92	; 0x5c
 810c296:	f002 f8bb 	bl	810e410 <__hexnan>
 810c29a:	2805      	cmp	r0, #5
 810c29c:	d126      	bne.n	810c2ec <_strtod_l+0x384>
 810c29e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810c2a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 810c2a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 810c2a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 810c2ac:	e6a0      	b.n	810bff0 <_strtod_l+0x88>
 810c2ae:	210a      	movs	r1, #10
 810c2b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 810c2b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 810c2b8:	e7b9      	b.n	810c22e <_strtod_l+0x2c6>
 810c2ba:	2a6e      	cmp	r2, #110	; 0x6e
 810c2bc:	e7db      	b.n	810c276 <_strtod_l+0x30e>
 810c2be:	4990      	ldr	r1, [pc, #576]	; (810c500 <_strtod_l+0x598>)
 810c2c0:	a817      	add	r0, sp, #92	; 0x5c
 810c2c2:	f002 f891 	bl	810e3e8 <__match>
 810c2c6:	2800      	cmp	r0, #0
 810c2c8:	f43f aeb0 	beq.w	810c02c <_strtod_l+0xc4>
 810c2cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c2ce:	498d      	ldr	r1, [pc, #564]	; (810c504 <_strtod_l+0x59c>)
 810c2d0:	3b01      	subs	r3, #1
 810c2d2:	a817      	add	r0, sp, #92	; 0x5c
 810c2d4:	9317      	str	r3, [sp, #92]	; 0x5c
 810c2d6:	f002 f887 	bl	810e3e8 <__match>
 810c2da:	b910      	cbnz	r0, 810c2e2 <_strtod_l+0x37a>
 810c2dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c2de:	3301      	adds	r3, #1
 810c2e0:	9317      	str	r3, [sp, #92]	; 0x5c
 810c2e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 810c514 <_strtod_l+0x5ac>
 810c2e6:	f04f 0a00 	mov.w	sl, #0
 810c2ea:	e681      	b.n	810bff0 <_strtod_l+0x88>
 810c2ec:	4886      	ldr	r0, [pc, #536]	; (810c508 <_strtod_l+0x5a0>)
 810c2ee:	f003 f943 	bl	810f578 <nan>
 810c2f2:	ec5b ab10 	vmov	sl, fp, d0
 810c2f6:	e67b      	b.n	810bff0 <_strtod_l+0x88>
 810c2f8:	9b05      	ldr	r3, [sp, #20]
 810c2fa:	9807      	ldr	r0, [sp, #28]
 810c2fc:	1af3      	subs	r3, r6, r3
 810c2fe:	2f00      	cmp	r7, #0
 810c300:	bf08      	it	eq
 810c302:	462f      	moveq	r7, r5
 810c304:	2d10      	cmp	r5, #16
 810c306:	9306      	str	r3, [sp, #24]
 810c308:	46a8      	mov	r8, r5
 810c30a:	bfa8      	it	ge
 810c30c:	f04f 0810 	movge.w	r8, #16
 810c310:	f7f4 f980 	bl	8100614 <__aeabi_ui2d>
 810c314:	2d09      	cmp	r5, #9
 810c316:	4682      	mov	sl, r0
 810c318:	468b      	mov	fp, r1
 810c31a:	dd13      	ble.n	810c344 <_strtod_l+0x3dc>
 810c31c:	4b7b      	ldr	r3, [pc, #492]	; (810c50c <_strtod_l+0x5a4>)
 810c31e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810c322:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810c326:	f7f4 f9ef 	bl	8100708 <__aeabi_dmul>
 810c32a:	4682      	mov	sl, r0
 810c32c:	4648      	mov	r0, r9
 810c32e:	468b      	mov	fp, r1
 810c330:	f7f4 f970 	bl	8100614 <__aeabi_ui2d>
 810c334:	4602      	mov	r2, r0
 810c336:	460b      	mov	r3, r1
 810c338:	4650      	mov	r0, sl
 810c33a:	4659      	mov	r1, fp
 810c33c:	f7f4 f82e 	bl	810039c <__adddf3>
 810c340:	4682      	mov	sl, r0
 810c342:	468b      	mov	fp, r1
 810c344:	2d0f      	cmp	r5, #15
 810c346:	dc38      	bgt.n	810c3ba <_strtod_l+0x452>
 810c348:	9b06      	ldr	r3, [sp, #24]
 810c34a:	2b00      	cmp	r3, #0
 810c34c:	f43f ae50 	beq.w	810bff0 <_strtod_l+0x88>
 810c350:	dd24      	ble.n	810c39c <_strtod_l+0x434>
 810c352:	2b16      	cmp	r3, #22
 810c354:	dc0b      	bgt.n	810c36e <_strtod_l+0x406>
 810c356:	496d      	ldr	r1, [pc, #436]	; (810c50c <_strtod_l+0x5a4>)
 810c358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c35c:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c360:	4652      	mov	r2, sl
 810c362:	465b      	mov	r3, fp
 810c364:	f7f4 f9d0 	bl	8100708 <__aeabi_dmul>
 810c368:	4682      	mov	sl, r0
 810c36a:	468b      	mov	fp, r1
 810c36c:	e640      	b.n	810bff0 <_strtod_l+0x88>
 810c36e:	9a06      	ldr	r2, [sp, #24]
 810c370:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 810c374:	4293      	cmp	r3, r2
 810c376:	db20      	blt.n	810c3ba <_strtod_l+0x452>
 810c378:	4c64      	ldr	r4, [pc, #400]	; (810c50c <_strtod_l+0x5a4>)
 810c37a:	f1c5 050f 	rsb	r5, r5, #15
 810c37e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810c382:	4652      	mov	r2, sl
 810c384:	465b      	mov	r3, fp
 810c386:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c38a:	f7f4 f9bd 	bl	8100708 <__aeabi_dmul>
 810c38e:	9b06      	ldr	r3, [sp, #24]
 810c390:	1b5d      	subs	r5, r3, r5
 810c392:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810c396:	e9d4 2300 	ldrd	r2, r3, [r4]
 810c39a:	e7e3      	b.n	810c364 <_strtod_l+0x3fc>
 810c39c:	9b06      	ldr	r3, [sp, #24]
 810c39e:	3316      	adds	r3, #22
 810c3a0:	db0b      	blt.n	810c3ba <_strtod_l+0x452>
 810c3a2:	9b05      	ldr	r3, [sp, #20]
 810c3a4:	1b9e      	subs	r6, r3, r6
 810c3a6:	4b59      	ldr	r3, [pc, #356]	; (810c50c <_strtod_l+0x5a4>)
 810c3a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 810c3ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 810c3b0:	4650      	mov	r0, sl
 810c3b2:	4659      	mov	r1, fp
 810c3b4:	f7f4 fad2 	bl	810095c <__aeabi_ddiv>
 810c3b8:	e7d6      	b.n	810c368 <_strtod_l+0x400>
 810c3ba:	9b06      	ldr	r3, [sp, #24]
 810c3bc:	eba5 0808 	sub.w	r8, r5, r8
 810c3c0:	4498      	add	r8, r3
 810c3c2:	f1b8 0f00 	cmp.w	r8, #0
 810c3c6:	dd74      	ble.n	810c4b2 <_strtod_l+0x54a>
 810c3c8:	f018 030f 	ands.w	r3, r8, #15
 810c3cc:	d00a      	beq.n	810c3e4 <_strtod_l+0x47c>
 810c3ce:	494f      	ldr	r1, [pc, #316]	; (810c50c <_strtod_l+0x5a4>)
 810c3d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c3d4:	4652      	mov	r2, sl
 810c3d6:	465b      	mov	r3, fp
 810c3d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c3dc:	f7f4 f994 	bl	8100708 <__aeabi_dmul>
 810c3e0:	4682      	mov	sl, r0
 810c3e2:	468b      	mov	fp, r1
 810c3e4:	f038 080f 	bics.w	r8, r8, #15
 810c3e8:	d04f      	beq.n	810c48a <_strtod_l+0x522>
 810c3ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 810c3ee:	dd22      	ble.n	810c436 <_strtod_l+0x4ce>
 810c3f0:	2500      	movs	r5, #0
 810c3f2:	462e      	mov	r6, r5
 810c3f4:	9507      	str	r5, [sp, #28]
 810c3f6:	9505      	str	r5, [sp, #20]
 810c3f8:	2322      	movs	r3, #34	; 0x22
 810c3fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 810c514 <_strtod_l+0x5ac>
 810c3fe:	6023      	str	r3, [r4, #0]
 810c400:	f04f 0a00 	mov.w	sl, #0
 810c404:	9b07      	ldr	r3, [sp, #28]
 810c406:	2b00      	cmp	r3, #0
 810c408:	f43f adf2 	beq.w	810bff0 <_strtod_l+0x88>
 810c40c:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c40e:	4620      	mov	r0, r4
 810c410:	f002 f964 	bl	810e6dc <_Bfree>
 810c414:	9905      	ldr	r1, [sp, #20]
 810c416:	4620      	mov	r0, r4
 810c418:	f002 f960 	bl	810e6dc <_Bfree>
 810c41c:	4631      	mov	r1, r6
 810c41e:	4620      	mov	r0, r4
 810c420:	f002 f95c 	bl	810e6dc <_Bfree>
 810c424:	9907      	ldr	r1, [sp, #28]
 810c426:	4620      	mov	r0, r4
 810c428:	f002 f958 	bl	810e6dc <_Bfree>
 810c42c:	4629      	mov	r1, r5
 810c42e:	4620      	mov	r0, r4
 810c430:	f002 f954 	bl	810e6dc <_Bfree>
 810c434:	e5dc      	b.n	810bff0 <_strtod_l+0x88>
 810c436:	4b36      	ldr	r3, [pc, #216]	; (810c510 <_strtod_l+0x5a8>)
 810c438:	9304      	str	r3, [sp, #16]
 810c43a:	2300      	movs	r3, #0
 810c43c:	ea4f 1828 	mov.w	r8, r8, asr #4
 810c440:	4650      	mov	r0, sl
 810c442:	4659      	mov	r1, fp
 810c444:	4699      	mov	r9, r3
 810c446:	f1b8 0f01 	cmp.w	r8, #1
 810c44a:	dc21      	bgt.n	810c490 <_strtod_l+0x528>
 810c44c:	b10b      	cbz	r3, 810c452 <_strtod_l+0x4ea>
 810c44e:	4682      	mov	sl, r0
 810c450:	468b      	mov	fp, r1
 810c452:	4b2f      	ldr	r3, [pc, #188]	; (810c510 <_strtod_l+0x5a8>)
 810c454:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 810c458:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 810c45c:	4652      	mov	r2, sl
 810c45e:	465b      	mov	r3, fp
 810c460:	e9d9 0100 	ldrd	r0, r1, [r9]
 810c464:	f7f4 f950 	bl	8100708 <__aeabi_dmul>
 810c468:	4b2a      	ldr	r3, [pc, #168]	; (810c514 <_strtod_l+0x5ac>)
 810c46a:	460a      	mov	r2, r1
 810c46c:	400b      	ands	r3, r1
 810c46e:	492a      	ldr	r1, [pc, #168]	; (810c518 <_strtod_l+0x5b0>)
 810c470:	428b      	cmp	r3, r1
 810c472:	4682      	mov	sl, r0
 810c474:	d8bc      	bhi.n	810c3f0 <_strtod_l+0x488>
 810c476:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810c47a:	428b      	cmp	r3, r1
 810c47c:	bf86      	itte	hi
 810c47e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 810c51c <_strtod_l+0x5b4>
 810c482:	f04f 3aff 	movhi.w	sl, #4294967295
 810c486:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 810c48a:	2300      	movs	r3, #0
 810c48c:	9304      	str	r3, [sp, #16]
 810c48e:	e084      	b.n	810c59a <_strtod_l+0x632>
 810c490:	f018 0f01 	tst.w	r8, #1
 810c494:	d005      	beq.n	810c4a2 <_strtod_l+0x53a>
 810c496:	9b04      	ldr	r3, [sp, #16]
 810c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c49c:	f7f4 f934 	bl	8100708 <__aeabi_dmul>
 810c4a0:	2301      	movs	r3, #1
 810c4a2:	9a04      	ldr	r2, [sp, #16]
 810c4a4:	3208      	adds	r2, #8
 810c4a6:	f109 0901 	add.w	r9, r9, #1
 810c4aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 810c4ae:	9204      	str	r2, [sp, #16]
 810c4b0:	e7c9      	b.n	810c446 <_strtod_l+0x4de>
 810c4b2:	d0ea      	beq.n	810c48a <_strtod_l+0x522>
 810c4b4:	f1c8 0800 	rsb	r8, r8, #0
 810c4b8:	f018 020f 	ands.w	r2, r8, #15
 810c4bc:	d00a      	beq.n	810c4d4 <_strtod_l+0x56c>
 810c4be:	4b13      	ldr	r3, [pc, #76]	; (810c50c <_strtod_l+0x5a4>)
 810c4c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810c4c4:	4650      	mov	r0, sl
 810c4c6:	4659      	mov	r1, fp
 810c4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c4cc:	f7f4 fa46 	bl	810095c <__aeabi_ddiv>
 810c4d0:	4682      	mov	sl, r0
 810c4d2:	468b      	mov	fp, r1
 810c4d4:	ea5f 1828 	movs.w	r8, r8, asr #4
 810c4d8:	d0d7      	beq.n	810c48a <_strtod_l+0x522>
 810c4da:	f1b8 0f1f 	cmp.w	r8, #31
 810c4de:	dd1f      	ble.n	810c520 <_strtod_l+0x5b8>
 810c4e0:	2500      	movs	r5, #0
 810c4e2:	462e      	mov	r6, r5
 810c4e4:	9507      	str	r5, [sp, #28]
 810c4e6:	9505      	str	r5, [sp, #20]
 810c4e8:	2322      	movs	r3, #34	; 0x22
 810c4ea:	f04f 0a00 	mov.w	sl, #0
 810c4ee:	f04f 0b00 	mov.w	fp, #0
 810c4f2:	6023      	str	r3, [r4, #0]
 810c4f4:	e786      	b.n	810c404 <_strtod_l+0x49c>
 810c4f6:	bf00      	nop
 810c4f8:	0810fb75 	.word	0x0810fb75
 810c4fc:	0810fbb8 	.word	0x0810fbb8
 810c500:	0810fb6d 	.word	0x0810fb6d
 810c504:	0810fcfc 	.word	0x0810fcfc
 810c508:	08110010 	.word	0x08110010
 810c50c:	0810fef0 	.word	0x0810fef0
 810c510:	0810fec8 	.word	0x0810fec8
 810c514:	7ff00000 	.word	0x7ff00000
 810c518:	7ca00000 	.word	0x7ca00000
 810c51c:	7fefffff 	.word	0x7fefffff
 810c520:	f018 0310 	ands.w	r3, r8, #16
 810c524:	bf18      	it	ne
 810c526:	236a      	movne	r3, #106	; 0x6a
 810c528:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 810c8d8 <_strtod_l+0x970>
 810c52c:	9304      	str	r3, [sp, #16]
 810c52e:	4650      	mov	r0, sl
 810c530:	4659      	mov	r1, fp
 810c532:	2300      	movs	r3, #0
 810c534:	f018 0f01 	tst.w	r8, #1
 810c538:	d004      	beq.n	810c544 <_strtod_l+0x5dc>
 810c53a:	e9d9 2300 	ldrd	r2, r3, [r9]
 810c53e:	f7f4 f8e3 	bl	8100708 <__aeabi_dmul>
 810c542:	2301      	movs	r3, #1
 810c544:	ea5f 0868 	movs.w	r8, r8, asr #1
 810c548:	f109 0908 	add.w	r9, r9, #8
 810c54c:	d1f2      	bne.n	810c534 <_strtod_l+0x5cc>
 810c54e:	b10b      	cbz	r3, 810c554 <_strtod_l+0x5ec>
 810c550:	4682      	mov	sl, r0
 810c552:	468b      	mov	fp, r1
 810c554:	9b04      	ldr	r3, [sp, #16]
 810c556:	b1c3      	cbz	r3, 810c58a <_strtod_l+0x622>
 810c558:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810c55c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810c560:	2b00      	cmp	r3, #0
 810c562:	4659      	mov	r1, fp
 810c564:	dd11      	ble.n	810c58a <_strtod_l+0x622>
 810c566:	2b1f      	cmp	r3, #31
 810c568:	f340 8124 	ble.w	810c7b4 <_strtod_l+0x84c>
 810c56c:	2b34      	cmp	r3, #52	; 0x34
 810c56e:	bfde      	ittt	le
 810c570:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810c574:	f04f 33ff 	movle.w	r3, #4294967295
 810c578:	fa03 f202 	lslle.w	r2, r3, r2
 810c57c:	f04f 0a00 	mov.w	sl, #0
 810c580:	bfcc      	ite	gt
 810c582:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 810c586:	ea02 0b01 	andle.w	fp, r2, r1
 810c58a:	2200      	movs	r2, #0
 810c58c:	2300      	movs	r3, #0
 810c58e:	4650      	mov	r0, sl
 810c590:	4659      	mov	r1, fp
 810c592:	f7f4 fb21 	bl	8100bd8 <__aeabi_dcmpeq>
 810c596:	2800      	cmp	r0, #0
 810c598:	d1a2      	bne.n	810c4e0 <_strtod_l+0x578>
 810c59a:	9b07      	ldr	r3, [sp, #28]
 810c59c:	9300      	str	r3, [sp, #0]
 810c59e:	9908      	ldr	r1, [sp, #32]
 810c5a0:	462b      	mov	r3, r5
 810c5a2:	463a      	mov	r2, r7
 810c5a4:	4620      	mov	r0, r4
 810c5a6:	f002 f901 	bl	810e7ac <__s2b>
 810c5aa:	9007      	str	r0, [sp, #28]
 810c5ac:	2800      	cmp	r0, #0
 810c5ae:	f43f af1f 	beq.w	810c3f0 <_strtod_l+0x488>
 810c5b2:	9b05      	ldr	r3, [sp, #20]
 810c5b4:	1b9e      	subs	r6, r3, r6
 810c5b6:	9b06      	ldr	r3, [sp, #24]
 810c5b8:	2b00      	cmp	r3, #0
 810c5ba:	bfb4      	ite	lt
 810c5bc:	4633      	movlt	r3, r6
 810c5be:	2300      	movge	r3, #0
 810c5c0:	930c      	str	r3, [sp, #48]	; 0x30
 810c5c2:	9b06      	ldr	r3, [sp, #24]
 810c5c4:	2500      	movs	r5, #0
 810c5c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810c5ca:	9312      	str	r3, [sp, #72]	; 0x48
 810c5cc:	462e      	mov	r6, r5
 810c5ce:	9b07      	ldr	r3, [sp, #28]
 810c5d0:	4620      	mov	r0, r4
 810c5d2:	6859      	ldr	r1, [r3, #4]
 810c5d4:	f002 f842 	bl	810e65c <_Balloc>
 810c5d8:	9005      	str	r0, [sp, #20]
 810c5da:	2800      	cmp	r0, #0
 810c5dc:	f43f af0c 	beq.w	810c3f8 <_strtod_l+0x490>
 810c5e0:	9b07      	ldr	r3, [sp, #28]
 810c5e2:	691a      	ldr	r2, [r3, #16]
 810c5e4:	3202      	adds	r2, #2
 810c5e6:	f103 010c 	add.w	r1, r3, #12
 810c5ea:	0092      	lsls	r2, r2, #2
 810c5ec:	300c      	adds	r0, #12
 810c5ee:	f7fe fc69 	bl	810aec4 <memcpy>
 810c5f2:	ec4b ab10 	vmov	d0, sl, fp
 810c5f6:	aa1a      	add	r2, sp, #104	; 0x68
 810c5f8:	a919      	add	r1, sp, #100	; 0x64
 810c5fa:	4620      	mov	r0, r4
 810c5fc:	f002 fc1c 	bl	810ee38 <__d2b>
 810c600:	ec4b ab18 	vmov	d8, sl, fp
 810c604:	9018      	str	r0, [sp, #96]	; 0x60
 810c606:	2800      	cmp	r0, #0
 810c608:	f43f aef6 	beq.w	810c3f8 <_strtod_l+0x490>
 810c60c:	2101      	movs	r1, #1
 810c60e:	4620      	mov	r0, r4
 810c610:	f002 f966 	bl	810e8e0 <__i2b>
 810c614:	4606      	mov	r6, r0
 810c616:	2800      	cmp	r0, #0
 810c618:	f43f aeee 	beq.w	810c3f8 <_strtod_l+0x490>
 810c61c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810c61e:	9904      	ldr	r1, [sp, #16]
 810c620:	2b00      	cmp	r3, #0
 810c622:	bfab      	itete	ge
 810c624:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 810c626:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 810c628:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810c62a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 810c62e:	bfac      	ite	ge
 810c630:	eb03 0902 	addge.w	r9, r3, r2
 810c634:	1ad7      	sublt	r7, r2, r3
 810c636:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 810c638:	eba3 0801 	sub.w	r8, r3, r1
 810c63c:	4490      	add	r8, r2
 810c63e:	4ba1      	ldr	r3, [pc, #644]	; (810c8c4 <_strtod_l+0x95c>)
 810c640:	f108 38ff 	add.w	r8, r8, #4294967295
 810c644:	4598      	cmp	r8, r3
 810c646:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810c64a:	f280 80c7 	bge.w	810c7dc <_strtod_l+0x874>
 810c64e:	eba3 0308 	sub.w	r3, r3, r8
 810c652:	2b1f      	cmp	r3, #31
 810c654:	eba2 0203 	sub.w	r2, r2, r3
 810c658:	f04f 0101 	mov.w	r1, #1
 810c65c:	f300 80b1 	bgt.w	810c7c2 <_strtod_l+0x85a>
 810c660:	fa01 f303 	lsl.w	r3, r1, r3
 810c664:	930d      	str	r3, [sp, #52]	; 0x34
 810c666:	2300      	movs	r3, #0
 810c668:	9308      	str	r3, [sp, #32]
 810c66a:	eb09 0802 	add.w	r8, r9, r2
 810c66e:	9b04      	ldr	r3, [sp, #16]
 810c670:	45c1      	cmp	r9, r8
 810c672:	4417      	add	r7, r2
 810c674:	441f      	add	r7, r3
 810c676:	464b      	mov	r3, r9
 810c678:	bfa8      	it	ge
 810c67a:	4643      	movge	r3, r8
 810c67c:	42bb      	cmp	r3, r7
 810c67e:	bfa8      	it	ge
 810c680:	463b      	movge	r3, r7
 810c682:	2b00      	cmp	r3, #0
 810c684:	bfc2      	ittt	gt
 810c686:	eba8 0803 	subgt.w	r8, r8, r3
 810c68a:	1aff      	subgt	r7, r7, r3
 810c68c:	eba9 0903 	subgt.w	r9, r9, r3
 810c690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810c692:	2b00      	cmp	r3, #0
 810c694:	dd17      	ble.n	810c6c6 <_strtod_l+0x75e>
 810c696:	4631      	mov	r1, r6
 810c698:	461a      	mov	r2, r3
 810c69a:	4620      	mov	r0, r4
 810c69c:	f002 f9e0 	bl	810ea60 <__pow5mult>
 810c6a0:	4606      	mov	r6, r0
 810c6a2:	2800      	cmp	r0, #0
 810c6a4:	f43f aea8 	beq.w	810c3f8 <_strtod_l+0x490>
 810c6a8:	4601      	mov	r1, r0
 810c6aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810c6ac:	4620      	mov	r0, r4
 810c6ae:	f002 f92d 	bl	810e90c <__multiply>
 810c6b2:	900b      	str	r0, [sp, #44]	; 0x2c
 810c6b4:	2800      	cmp	r0, #0
 810c6b6:	f43f ae9f 	beq.w	810c3f8 <_strtod_l+0x490>
 810c6ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c6bc:	4620      	mov	r0, r4
 810c6be:	f002 f80d 	bl	810e6dc <_Bfree>
 810c6c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c6c4:	9318      	str	r3, [sp, #96]	; 0x60
 810c6c6:	f1b8 0f00 	cmp.w	r8, #0
 810c6ca:	f300 808c 	bgt.w	810c7e6 <_strtod_l+0x87e>
 810c6ce:	9b06      	ldr	r3, [sp, #24]
 810c6d0:	2b00      	cmp	r3, #0
 810c6d2:	dd08      	ble.n	810c6e6 <_strtod_l+0x77e>
 810c6d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810c6d6:	9905      	ldr	r1, [sp, #20]
 810c6d8:	4620      	mov	r0, r4
 810c6da:	f002 f9c1 	bl	810ea60 <__pow5mult>
 810c6de:	9005      	str	r0, [sp, #20]
 810c6e0:	2800      	cmp	r0, #0
 810c6e2:	f43f ae89 	beq.w	810c3f8 <_strtod_l+0x490>
 810c6e6:	2f00      	cmp	r7, #0
 810c6e8:	dd08      	ble.n	810c6fc <_strtod_l+0x794>
 810c6ea:	9905      	ldr	r1, [sp, #20]
 810c6ec:	463a      	mov	r2, r7
 810c6ee:	4620      	mov	r0, r4
 810c6f0:	f002 fa10 	bl	810eb14 <__lshift>
 810c6f4:	9005      	str	r0, [sp, #20]
 810c6f6:	2800      	cmp	r0, #0
 810c6f8:	f43f ae7e 	beq.w	810c3f8 <_strtod_l+0x490>
 810c6fc:	f1b9 0f00 	cmp.w	r9, #0
 810c700:	dd08      	ble.n	810c714 <_strtod_l+0x7ac>
 810c702:	4631      	mov	r1, r6
 810c704:	464a      	mov	r2, r9
 810c706:	4620      	mov	r0, r4
 810c708:	f002 fa04 	bl	810eb14 <__lshift>
 810c70c:	4606      	mov	r6, r0
 810c70e:	2800      	cmp	r0, #0
 810c710:	f43f ae72 	beq.w	810c3f8 <_strtod_l+0x490>
 810c714:	9a05      	ldr	r2, [sp, #20]
 810c716:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c718:	4620      	mov	r0, r4
 810c71a:	f002 fa87 	bl	810ec2c <__mdiff>
 810c71e:	4605      	mov	r5, r0
 810c720:	2800      	cmp	r0, #0
 810c722:	f43f ae69 	beq.w	810c3f8 <_strtod_l+0x490>
 810c726:	68c3      	ldr	r3, [r0, #12]
 810c728:	930b      	str	r3, [sp, #44]	; 0x2c
 810c72a:	2300      	movs	r3, #0
 810c72c:	60c3      	str	r3, [r0, #12]
 810c72e:	4631      	mov	r1, r6
 810c730:	f002 fa60 	bl	810ebf4 <__mcmp>
 810c734:	2800      	cmp	r0, #0
 810c736:	da60      	bge.n	810c7fa <_strtod_l+0x892>
 810c738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c73a:	ea53 030a 	orrs.w	r3, r3, sl
 810c73e:	f040 8082 	bne.w	810c846 <_strtod_l+0x8de>
 810c742:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c746:	2b00      	cmp	r3, #0
 810c748:	d17d      	bne.n	810c846 <_strtod_l+0x8de>
 810c74a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810c74e:	0d1b      	lsrs	r3, r3, #20
 810c750:	051b      	lsls	r3, r3, #20
 810c752:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810c756:	d976      	bls.n	810c846 <_strtod_l+0x8de>
 810c758:	696b      	ldr	r3, [r5, #20]
 810c75a:	b913      	cbnz	r3, 810c762 <_strtod_l+0x7fa>
 810c75c:	692b      	ldr	r3, [r5, #16]
 810c75e:	2b01      	cmp	r3, #1
 810c760:	dd71      	ble.n	810c846 <_strtod_l+0x8de>
 810c762:	4629      	mov	r1, r5
 810c764:	2201      	movs	r2, #1
 810c766:	4620      	mov	r0, r4
 810c768:	f002 f9d4 	bl	810eb14 <__lshift>
 810c76c:	4631      	mov	r1, r6
 810c76e:	4605      	mov	r5, r0
 810c770:	f002 fa40 	bl	810ebf4 <__mcmp>
 810c774:	2800      	cmp	r0, #0
 810c776:	dd66      	ble.n	810c846 <_strtod_l+0x8de>
 810c778:	9904      	ldr	r1, [sp, #16]
 810c77a:	4a53      	ldr	r2, [pc, #332]	; (810c8c8 <_strtod_l+0x960>)
 810c77c:	465b      	mov	r3, fp
 810c77e:	2900      	cmp	r1, #0
 810c780:	f000 8081 	beq.w	810c886 <_strtod_l+0x91e>
 810c784:	ea02 010b 	and.w	r1, r2, fp
 810c788:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810c78c:	dc7b      	bgt.n	810c886 <_strtod_l+0x91e>
 810c78e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810c792:	f77f aea9 	ble.w	810c4e8 <_strtod_l+0x580>
 810c796:	4b4d      	ldr	r3, [pc, #308]	; (810c8cc <_strtod_l+0x964>)
 810c798:	4650      	mov	r0, sl
 810c79a:	4659      	mov	r1, fp
 810c79c:	2200      	movs	r2, #0
 810c79e:	f7f3 ffb3 	bl	8100708 <__aeabi_dmul>
 810c7a2:	460b      	mov	r3, r1
 810c7a4:	4303      	orrs	r3, r0
 810c7a6:	bf08      	it	eq
 810c7a8:	2322      	moveq	r3, #34	; 0x22
 810c7aa:	4682      	mov	sl, r0
 810c7ac:	468b      	mov	fp, r1
 810c7ae:	bf08      	it	eq
 810c7b0:	6023      	streq	r3, [r4, #0]
 810c7b2:	e62b      	b.n	810c40c <_strtod_l+0x4a4>
 810c7b4:	f04f 32ff 	mov.w	r2, #4294967295
 810c7b8:	fa02 f303 	lsl.w	r3, r2, r3
 810c7bc:	ea03 0a0a 	and.w	sl, r3, sl
 810c7c0:	e6e3      	b.n	810c58a <_strtod_l+0x622>
 810c7c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810c7c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 810c7ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 810c7ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810c7d2:	fa01 f308 	lsl.w	r3, r1, r8
 810c7d6:	9308      	str	r3, [sp, #32]
 810c7d8:	910d      	str	r1, [sp, #52]	; 0x34
 810c7da:	e746      	b.n	810c66a <_strtod_l+0x702>
 810c7dc:	2300      	movs	r3, #0
 810c7de:	9308      	str	r3, [sp, #32]
 810c7e0:	2301      	movs	r3, #1
 810c7e2:	930d      	str	r3, [sp, #52]	; 0x34
 810c7e4:	e741      	b.n	810c66a <_strtod_l+0x702>
 810c7e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c7e8:	4642      	mov	r2, r8
 810c7ea:	4620      	mov	r0, r4
 810c7ec:	f002 f992 	bl	810eb14 <__lshift>
 810c7f0:	9018      	str	r0, [sp, #96]	; 0x60
 810c7f2:	2800      	cmp	r0, #0
 810c7f4:	f47f af6b 	bne.w	810c6ce <_strtod_l+0x766>
 810c7f8:	e5fe      	b.n	810c3f8 <_strtod_l+0x490>
 810c7fa:	465f      	mov	r7, fp
 810c7fc:	d16e      	bne.n	810c8dc <_strtod_l+0x974>
 810c7fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810c800:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c804:	b342      	cbz	r2, 810c858 <_strtod_l+0x8f0>
 810c806:	4a32      	ldr	r2, [pc, #200]	; (810c8d0 <_strtod_l+0x968>)
 810c808:	4293      	cmp	r3, r2
 810c80a:	d128      	bne.n	810c85e <_strtod_l+0x8f6>
 810c80c:	9b04      	ldr	r3, [sp, #16]
 810c80e:	4651      	mov	r1, sl
 810c810:	b1eb      	cbz	r3, 810c84e <_strtod_l+0x8e6>
 810c812:	4b2d      	ldr	r3, [pc, #180]	; (810c8c8 <_strtod_l+0x960>)
 810c814:	403b      	ands	r3, r7
 810c816:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810c81a:	f04f 32ff 	mov.w	r2, #4294967295
 810c81e:	d819      	bhi.n	810c854 <_strtod_l+0x8ec>
 810c820:	0d1b      	lsrs	r3, r3, #20
 810c822:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810c826:	fa02 f303 	lsl.w	r3, r2, r3
 810c82a:	4299      	cmp	r1, r3
 810c82c:	d117      	bne.n	810c85e <_strtod_l+0x8f6>
 810c82e:	4b29      	ldr	r3, [pc, #164]	; (810c8d4 <_strtod_l+0x96c>)
 810c830:	429f      	cmp	r7, r3
 810c832:	d102      	bne.n	810c83a <_strtod_l+0x8d2>
 810c834:	3101      	adds	r1, #1
 810c836:	f43f addf 	beq.w	810c3f8 <_strtod_l+0x490>
 810c83a:	4b23      	ldr	r3, [pc, #140]	; (810c8c8 <_strtod_l+0x960>)
 810c83c:	403b      	ands	r3, r7
 810c83e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810c842:	f04f 0a00 	mov.w	sl, #0
 810c846:	9b04      	ldr	r3, [sp, #16]
 810c848:	2b00      	cmp	r3, #0
 810c84a:	d1a4      	bne.n	810c796 <_strtod_l+0x82e>
 810c84c:	e5de      	b.n	810c40c <_strtod_l+0x4a4>
 810c84e:	f04f 33ff 	mov.w	r3, #4294967295
 810c852:	e7ea      	b.n	810c82a <_strtod_l+0x8c2>
 810c854:	4613      	mov	r3, r2
 810c856:	e7e8      	b.n	810c82a <_strtod_l+0x8c2>
 810c858:	ea53 030a 	orrs.w	r3, r3, sl
 810c85c:	d08c      	beq.n	810c778 <_strtod_l+0x810>
 810c85e:	9b08      	ldr	r3, [sp, #32]
 810c860:	b1db      	cbz	r3, 810c89a <_strtod_l+0x932>
 810c862:	423b      	tst	r3, r7
 810c864:	d0ef      	beq.n	810c846 <_strtod_l+0x8de>
 810c866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c868:	9a04      	ldr	r2, [sp, #16]
 810c86a:	4650      	mov	r0, sl
 810c86c:	4659      	mov	r1, fp
 810c86e:	b1c3      	cbz	r3, 810c8a2 <_strtod_l+0x93a>
 810c870:	f7ff fb5c 	bl	810bf2c <sulp>
 810c874:	4602      	mov	r2, r0
 810c876:	460b      	mov	r3, r1
 810c878:	ec51 0b18 	vmov	r0, r1, d8
 810c87c:	f7f3 fd8e 	bl	810039c <__adddf3>
 810c880:	4682      	mov	sl, r0
 810c882:	468b      	mov	fp, r1
 810c884:	e7df      	b.n	810c846 <_strtod_l+0x8de>
 810c886:	4013      	ands	r3, r2
 810c888:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810c88c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810c890:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810c894:	f04f 3aff 	mov.w	sl, #4294967295
 810c898:	e7d5      	b.n	810c846 <_strtod_l+0x8de>
 810c89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810c89c:	ea13 0f0a 	tst.w	r3, sl
 810c8a0:	e7e0      	b.n	810c864 <_strtod_l+0x8fc>
 810c8a2:	f7ff fb43 	bl	810bf2c <sulp>
 810c8a6:	4602      	mov	r2, r0
 810c8a8:	460b      	mov	r3, r1
 810c8aa:	ec51 0b18 	vmov	r0, r1, d8
 810c8ae:	f7f3 fd73 	bl	8100398 <__aeabi_dsub>
 810c8b2:	2200      	movs	r2, #0
 810c8b4:	2300      	movs	r3, #0
 810c8b6:	4682      	mov	sl, r0
 810c8b8:	468b      	mov	fp, r1
 810c8ba:	f7f4 f98d 	bl	8100bd8 <__aeabi_dcmpeq>
 810c8be:	2800      	cmp	r0, #0
 810c8c0:	d0c1      	beq.n	810c846 <_strtod_l+0x8de>
 810c8c2:	e611      	b.n	810c4e8 <_strtod_l+0x580>
 810c8c4:	fffffc02 	.word	0xfffffc02
 810c8c8:	7ff00000 	.word	0x7ff00000
 810c8cc:	39500000 	.word	0x39500000
 810c8d0:	000fffff 	.word	0x000fffff
 810c8d4:	7fefffff 	.word	0x7fefffff
 810c8d8:	0810fbd0 	.word	0x0810fbd0
 810c8dc:	4631      	mov	r1, r6
 810c8de:	4628      	mov	r0, r5
 810c8e0:	f002 fb06 	bl	810eef0 <__ratio>
 810c8e4:	ec59 8b10 	vmov	r8, r9, d0
 810c8e8:	ee10 0a10 	vmov	r0, s0
 810c8ec:	2200      	movs	r2, #0
 810c8ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810c8f2:	4649      	mov	r1, r9
 810c8f4:	f7f4 f984 	bl	8100c00 <__aeabi_dcmple>
 810c8f8:	2800      	cmp	r0, #0
 810c8fa:	d07a      	beq.n	810c9f2 <_strtod_l+0xa8a>
 810c8fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c8fe:	2b00      	cmp	r3, #0
 810c900:	d04a      	beq.n	810c998 <_strtod_l+0xa30>
 810c902:	4b95      	ldr	r3, [pc, #596]	; (810cb58 <_strtod_l+0xbf0>)
 810c904:	2200      	movs	r2, #0
 810c906:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810c90a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 810cb58 <_strtod_l+0xbf0>
 810c90e:	f04f 0800 	mov.w	r8, #0
 810c912:	4b92      	ldr	r3, [pc, #584]	; (810cb5c <_strtod_l+0xbf4>)
 810c914:	403b      	ands	r3, r7
 810c916:	930d      	str	r3, [sp, #52]	; 0x34
 810c918:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810c91a:	4b91      	ldr	r3, [pc, #580]	; (810cb60 <_strtod_l+0xbf8>)
 810c91c:	429a      	cmp	r2, r3
 810c91e:	f040 80b0 	bne.w	810ca82 <_strtod_l+0xb1a>
 810c922:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810c926:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810c92a:	ec4b ab10 	vmov	d0, sl, fp
 810c92e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810c932:	f002 fa05 	bl	810ed40 <__ulp>
 810c936:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810c93a:	ec53 2b10 	vmov	r2, r3, d0
 810c93e:	f7f3 fee3 	bl	8100708 <__aeabi_dmul>
 810c942:	4652      	mov	r2, sl
 810c944:	465b      	mov	r3, fp
 810c946:	f7f3 fd29 	bl	810039c <__adddf3>
 810c94a:	460b      	mov	r3, r1
 810c94c:	4983      	ldr	r1, [pc, #524]	; (810cb5c <_strtod_l+0xbf4>)
 810c94e:	4a85      	ldr	r2, [pc, #532]	; (810cb64 <_strtod_l+0xbfc>)
 810c950:	4019      	ands	r1, r3
 810c952:	4291      	cmp	r1, r2
 810c954:	4682      	mov	sl, r0
 810c956:	d960      	bls.n	810ca1a <_strtod_l+0xab2>
 810c958:	ee18 3a90 	vmov	r3, s17
 810c95c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 810c960:	4293      	cmp	r3, r2
 810c962:	d104      	bne.n	810c96e <_strtod_l+0xa06>
 810c964:	ee18 3a10 	vmov	r3, s16
 810c968:	3301      	adds	r3, #1
 810c96a:	f43f ad45 	beq.w	810c3f8 <_strtod_l+0x490>
 810c96e:	f8df b200 	ldr.w	fp, [pc, #512]	; 810cb70 <_strtod_l+0xc08>
 810c972:	f04f 3aff 	mov.w	sl, #4294967295
 810c976:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c978:	4620      	mov	r0, r4
 810c97a:	f001 feaf 	bl	810e6dc <_Bfree>
 810c97e:	9905      	ldr	r1, [sp, #20]
 810c980:	4620      	mov	r0, r4
 810c982:	f001 feab 	bl	810e6dc <_Bfree>
 810c986:	4631      	mov	r1, r6
 810c988:	4620      	mov	r0, r4
 810c98a:	f001 fea7 	bl	810e6dc <_Bfree>
 810c98e:	4629      	mov	r1, r5
 810c990:	4620      	mov	r0, r4
 810c992:	f001 fea3 	bl	810e6dc <_Bfree>
 810c996:	e61a      	b.n	810c5ce <_strtod_l+0x666>
 810c998:	f1ba 0f00 	cmp.w	sl, #0
 810c99c:	d11b      	bne.n	810c9d6 <_strtod_l+0xa6e>
 810c99e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c9a2:	b9f3      	cbnz	r3, 810c9e2 <_strtod_l+0xa7a>
 810c9a4:	4b6c      	ldr	r3, [pc, #432]	; (810cb58 <_strtod_l+0xbf0>)
 810c9a6:	2200      	movs	r2, #0
 810c9a8:	4640      	mov	r0, r8
 810c9aa:	4649      	mov	r1, r9
 810c9ac:	f7f4 f91e 	bl	8100bec <__aeabi_dcmplt>
 810c9b0:	b9d0      	cbnz	r0, 810c9e8 <_strtod_l+0xa80>
 810c9b2:	4640      	mov	r0, r8
 810c9b4:	4649      	mov	r1, r9
 810c9b6:	4b6c      	ldr	r3, [pc, #432]	; (810cb68 <_strtod_l+0xc00>)
 810c9b8:	2200      	movs	r2, #0
 810c9ba:	f7f3 fea5 	bl	8100708 <__aeabi_dmul>
 810c9be:	4680      	mov	r8, r0
 810c9c0:	4689      	mov	r9, r1
 810c9c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810c9c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 810c9ca:	9315      	str	r3, [sp, #84]	; 0x54
 810c9cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 810c9d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810c9d4:	e79d      	b.n	810c912 <_strtod_l+0x9aa>
 810c9d6:	f1ba 0f01 	cmp.w	sl, #1
 810c9da:	d102      	bne.n	810c9e2 <_strtod_l+0xa7a>
 810c9dc:	2f00      	cmp	r7, #0
 810c9de:	f43f ad83 	beq.w	810c4e8 <_strtod_l+0x580>
 810c9e2:	4b62      	ldr	r3, [pc, #392]	; (810cb6c <_strtod_l+0xc04>)
 810c9e4:	2200      	movs	r2, #0
 810c9e6:	e78e      	b.n	810c906 <_strtod_l+0x99e>
 810c9e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 810cb68 <_strtod_l+0xc00>
 810c9ec:	f04f 0800 	mov.w	r8, #0
 810c9f0:	e7e7      	b.n	810c9c2 <_strtod_l+0xa5a>
 810c9f2:	4b5d      	ldr	r3, [pc, #372]	; (810cb68 <_strtod_l+0xc00>)
 810c9f4:	4640      	mov	r0, r8
 810c9f6:	4649      	mov	r1, r9
 810c9f8:	2200      	movs	r2, #0
 810c9fa:	f7f3 fe85 	bl	8100708 <__aeabi_dmul>
 810c9fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ca00:	4680      	mov	r8, r0
 810ca02:	4689      	mov	r9, r1
 810ca04:	b933      	cbnz	r3, 810ca14 <_strtod_l+0xaac>
 810ca06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810ca0a:	900e      	str	r0, [sp, #56]	; 0x38
 810ca0c:	930f      	str	r3, [sp, #60]	; 0x3c
 810ca0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 810ca12:	e7dd      	b.n	810c9d0 <_strtod_l+0xa68>
 810ca14:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 810ca18:	e7f9      	b.n	810ca0e <_strtod_l+0xaa6>
 810ca1a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810ca1e:	9b04      	ldr	r3, [sp, #16]
 810ca20:	2b00      	cmp	r3, #0
 810ca22:	d1a8      	bne.n	810c976 <_strtod_l+0xa0e>
 810ca24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810ca28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810ca2a:	0d1b      	lsrs	r3, r3, #20
 810ca2c:	051b      	lsls	r3, r3, #20
 810ca2e:	429a      	cmp	r2, r3
 810ca30:	d1a1      	bne.n	810c976 <_strtod_l+0xa0e>
 810ca32:	4640      	mov	r0, r8
 810ca34:	4649      	mov	r1, r9
 810ca36:	f7f4 f9c7 	bl	8100dc8 <__aeabi_d2lz>
 810ca3a:	f7f3 fe37 	bl	81006ac <__aeabi_l2d>
 810ca3e:	4602      	mov	r2, r0
 810ca40:	460b      	mov	r3, r1
 810ca42:	4640      	mov	r0, r8
 810ca44:	4649      	mov	r1, r9
 810ca46:	f7f3 fca7 	bl	8100398 <__aeabi_dsub>
 810ca4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810ca4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810ca50:	ea43 030a 	orr.w	r3, r3, sl
 810ca54:	4313      	orrs	r3, r2
 810ca56:	4680      	mov	r8, r0
 810ca58:	4689      	mov	r9, r1
 810ca5a:	d055      	beq.n	810cb08 <_strtod_l+0xba0>
 810ca5c:	a336      	add	r3, pc, #216	; (adr r3, 810cb38 <_strtod_l+0xbd0>)
 810ca5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca62:	f7f4 f8c3 	bl	8100bec <__aeabi_dcmplt>
 810ca66:	2800      	cmp	r0, #0
 810ca68:	f47f acd0 	bne.w	810c40c <_strtod_l+0x4a4>
 810ca6c:	a334      	add	r3, pc, #208	; (adr r3, 810cb40 <_strtod_l+0xbd8>)
 810ca6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca72:	4640      	mov	r0, r8
 810ca74:	4649      	mov	r1, r9
 810ca76:	f7f4 f8d7 	bl	8100c28 <__aeabi_dcmpgt>
 810ca7a:	2800      	cmp	r0, #0
 810ca7c:	f43f af7b 	beq.w	810c976 <_strtod_l+0xa0e>
 810ca80:	e4c4      	b.n	810c40c <_strtod_l+0x4a4>
 810ca82:	9b04      	ldr	r3, [sp, #16]
 810ca84:	b333      	cbz	r3, 810cad4 <_strtod_l+0xb6c>
 810ca86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810ca88:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810ca8c:	d822      	bhi.n	810cad4 <_strtod_l+0xb6c>
 810ca8e:	a32e      	add	r3, pc, #184	; (adr r3, 810cb48 <_strtod_l+0xbe0>)
 810ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca94:	4640      	mov	r0, r8
 810ca96:	4649      	mov	r1, r9
 810ca98:	f7f4 f8b2 	bl	8100c00 <__aeabi_dcmple>
 810ca9c:	b1a0      	cbz	r0, 810cac8 <_strtod_l+0xb60>
 810ca9e:	4649      	mov	r1, r9
 810caa0:	4640      	mov	r0, r8
 810caa2:	f7f4 f909 	bl	8100cb8 <__aeabi_d2uiz>
 810caa6:	2801      	cmp	r0, #1
 810caa8:	bf38      	it	cc
 810caaa:	2001      	movcc	r0, #1
 810caac:	f7f3 fdb2 	bl	8100614 <__aeabi_ui2d>
 810cab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810cab2:	4680      	mov	r8, r0
 810cab4:	4689      	mov	r9, r1
 810cab6:	bb23      	cbnz	r3, 810cb02 <_strtod_l+0xb9a>
 810cab8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810cabc:	9010      	str	r0, [sp, #64]	; 0x40
 810cabe:	9311      	str	r3, [sp, #68]	; 0x44
 810cac0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810cac4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810cac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810caca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810cacc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810cad0:	1a9b      	subs	r3, r3, r2
 810cad2:	9309      	str	r3, [sp, #36]	; 0x24
 810cad4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810cad8:	eeb0 0a48 	vmov.f32	s0, s16
 810cadc:	eef0 0a68 	vmov.f32	s1, s17
 810cae0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810cae4:	f002 f92c 	bl	810ed40 <__ulp>
 810cae8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810caec:	ec53 2b10 	vmov	r2, r3, d0
 810caf0:	f7f3 fe0a 	bl	8100708 <__aeabi_dmul>
 810caf4:	ec53 2b18 	vmov	r2, r3, d8
 810caf8:	f7f3 fc50 	bl	810039c <__adddf3>
 810cafc:	4682      	mov	sl, r0
 810cafe:	468b      	mov	fp, r1
 810cb00:	e78d      	b.n	810ca1e <_strtod_l+0xab6>
 810cb02:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 810cb06:	e7db      	b.n	810cac0 <_strtod_l+0xb58>
 810cb08:	a311      	add	r3, pc, #68	; (adr r3, 810cb50 <_strtod_l+0xbe8>)
 810cb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cb0e:	f7f4 f86d 	bl	8100bec <__aeabi_dcmplt>
 810cb12:	e7b2      	b.n	810ca7a <_strtod_l+0xb12>
 810cb14:	2300      	movs	r3, #0
 810cb16:	930a      	str	r3, [sp, #40]	; 0x28
 810cb18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810cb1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810cb1c:	6013      	str	r3, [r2, #0]
 810cb1e:	f7ff ba6b 	b.w	810bff8 <_strtod_l+0x90>
 810cb22:	2a65      	cmp	r2, #101	; 0x65
 810cb24:	f43f ab5f 	beq.w	810c1e6 <_strtod_l+0x27e>
 810cb28:	2a45      	cmp	r2, #69	; 0x45
 810cb2a:	f43f ab5c 	beq.w	810c1e6 <_strtod_l+0x27e>
 810cb2e:	2301      	movs	r3, #1
 810cb30:	f7ff bb94 	b.w	810c25c <_strtod_l+0x2f4>
 810cb34:	f3af 8000 	nop.w
 810cb38:	94a03595 	.word	0x94a03595
 810cb3c:	3fdfffff 	.word	0x3fdfffff
 810cb40:	35afe535 	.word	0x35afe535
 810cb44:	3fe00000 	.word	0x3fe00000
 810cb48:	ffc00000 	.word	0xffc00000
 810cb4c:	41dfffff 	.word	0x41dfffff
 810cb50:	94a03595 	.word	0x94a03595
 810cb54:	3fcfffff 	.word	0x3fcfffff
 810cb58:	3ff00000 	.word	0x3ff00000
 810cb5c:	7ff00000 	.word	0x7ff00000
 810cb60:	7fe00000 	.word	0x7fe00000
 810cb64:	7c9fffff 	.word	0x7c9fffff
 810cb68:	3fe00000 	.word	0x3fe00000
 810cb6c:	bff00000 	.word	0xbff00000
 810cb70:	7fefffff 	.word	0x7fefffff

0810cb74 <_strtod_r>:
 810cb74:	4b01      	ldr	r3, [pc, #4]	; (810cb7c <_strtod_r+0x8>)
 810cb76:	f7ff b9f7 	b.w	810bf68 <_strtod_l>
 810cb7a:	bf00      	nop
 810cb7c:	10000088 	.word	0x10000088

0810cb80 <_strtol_l.constprop.0>:
 810cb80:	2b01      	cmp	r3, #1
 810cb82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810cb86:	d001      	beq.n	810cb8c <_strtol_l.constprop.0+0xc>
 810cb88:	2b24      	cmp	r3, #36	; 0x24
 810cb8a:	d906      	bls.n	810cb9a <_strtol_l.constprop.0+0x1a>
 810cb8c:	f7fe f968 	bl	810ae60 <__errno>
 810cb90:	2316      	movs	r3, #22
 810cb92:	6003      	str	r3, [r0, #0]
 810cb94:	2000      	movs	r0, #0
 810cb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cb9a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810cc80 <_strtol_l.constprop.0+0x100>
 810cb9e:	460d      	mov	r5, r1
 810cba0:	462e      	mov	r6, r5
 810cba2:	f815 4b01 	ldrb.w	r4, [r5], #1
 810cba6:	f814 700c 	ldrb.w	r7, [r4, ip]
 810cbaa:	f017 0708 	ands.w	r7, r7, #8
 810cbae:	d1f7      	bne.n	810cba0 <_strtol_l.constprop.0+0x20>
 810cbb0:	2c2d      	cmp	r4, #45	; 0x2d
 810cbb2:	d132      	bne.n	810cc1a <_strtol_l.constprop.0+0x9a>
 810cbb4:	782c      	ldrb	r4, [r5, #0]
 810cbb6:	2701      	movs	r7, #1
 810cbb8:	1cb5      	adds	r5, r6, #2
 810cbba:	2b00      	cmp	r3, #0
 810cbbc:	d05b      	beq.n	810cc76 <_strtol_l.constprop.0+0xf6>
 810cbbe:	2b10      	cmp	r3, #16
 810cbc0:	d109      	bne.n	810cbd6 <_strtol_l.constprop.0+0x56>
 810cbc2:	2c30      	cmp	r4, #48	; 0x30
 810cbc4:	d107      	bne.n	810cbd6 <_strtol_l.constprop.0+0x56>
 810cbc6:	782c      	ldrb	r4, [r5, #0]
 810cbc8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810cbcc:	2c58      	cmp	r4, #88	; 0x58
 810cbce:	d14d      	bne.n	810cc6c <_strtol_l.constprop.0+0xec>
 810cbd0:	786c      	ldrb	r4, [r5, #1]
 810cbd2:	2310      	movs	r3, #16
 810cbd4:	3502      	adds	r5, #2
 810cbd6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810cbda:	f108 38ff 	add.w	r8, r8, #4294967295
 810cbde:	f04f 0c00 	mov.w	ip, #0
 810cbe2:	fbb8 f9f3 	udiv	r9, r8, r3
 810cbe6:	4666      	mov	r6, ip
 810cbe8:	fb03 8a19 	mls	sl, r3, r9, r8
 810cbec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 810cbf0:	f1be 0f09 	cmp.w	lr, #9
 810cbf4:	d816      	bhi.n	810cc24 <_strtol_l.constprop.0+0xa4>
 810cbf6:	4674      	mov	r4, lr
 810cbf8:	42a3      	cmp	r3, r4
 810cbfa:	dd24      	ble.n	810cc46 <_strtol_l.constprop.0+0xc6>
 810cbfc:	f1bc 0f00 	cmp.w	ip, #0
 810cc00:	db1e      	blt.n	810cc40 <_strtol_l.constprop.0+0xc0>
 810cc02:	45b1      	cmp	r9, r6
 810cc04:	d31c      	bcc.n	810cc40 <_strtol_l.constprop.0+0xc0>
 810cc06:	d101      	bne.n	810cc0c <_strtol_l.constprop.0+0x8c>
 810cc08:	45a2      	cmp	sl, r4
 810cc0a:	db19      	blt.n	810cc40 <_strtol_l.constprop.0+0xc0>
 810cc0c:	fb06 4603 	mla	r6, r6, r3, r4
 810cc10:	f04f 0c01 	mov.w	ip, #1
 810cc14:	f815 4b01 	ldrb.w	r4, [r5], #1
 810cc18:	e7e8      	b.n	810cbec <_strtol_l.constprop.0+0x6c>
 810cc1a:	2c2b      	cmp	r4, #43	; 0x2b
 810cc1c:	bf04      	itt	eq
 810cc1e:	782c      	ldrbeq	r4, [r5, #0]
 810cc20:	1cb5      	addeq	r5, r6, #2
 810cc22:	e7ca      	b.n	810cbba <_strtol_l.constprop.0+0x3a>
 810cc24:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 810cc28:	f1be 0f19 	cmp.w	lr, #25
 810cc2c:	d801      	bhi.n	810cc32 <_strtol_l.constprop.0+0xb2>
 810cc2e:	3c37      	subs	r4, #55	; 0x37
 810cc30:	e7e2      	b.n	810cbf8 <_strtol_l.constprop.0+0x78>
 810cc32:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 810cc36:	f1be 0f19 	cmp.w	lr, #25
 810cc3a:	d804      	bhi.n	810cc46 <_strtol_l.constprop.0+0xc6>
 810cc3c:	3c57      	subs	r4, #87	; 0x57
 810cc3e:	e7db      	b.n	810cbf8 <_strtol_l.constprop.0+0x78>
 810cc40:	f04f 3cff 	mov.w	ip, #4294967295
 810cc44:	e7e6      	b.n	810cc14 <_strtol_l.constprop.0+0x94>
 810cc46:	f1bc 0f00 	cmp.w	ip, #0
 810cc4a:	da05      	bge.n	810cc58 <_strtol_l.constprop.0+0xd8>
 810cc4c:	2322      	movs	r3, #34	; 0x22
 810cc4e:	6003      	str	r3, [r0, #0]
 810cc50:	4646      	mov	r6, r8
 810cc52:	b942      	cbnz	r2, 810cc66 <_strtol_l.constprop.0+0xe6>
 810cc54:	4630      	mov	r0, r6
 810cc56:	e79e      	b.n	810cb96 <_strtol_l.constprop.0+0x16>
 810cc58:	b107      	cbz	r7, 810cc5c <_strtol_l.constprop.0+0xdc>
 810cc5a:	4276      	negs	r6, r6
 810cc5c:	2a00      	cmp	r2, #0
 810cc5e:	d0f9      	beq.n	810cc54 <_strtol_l.constprop.0+0xd4>
 810cc60:	f1bc 0f00 	cmp.w	ip, #0
 810cc64:	d000      	beq.n	810cc68 <_strtol_l.constprop.0+0xe8>
 810cc66:	1e69      	subs	r1, r5, #1
 810cc68:	6011      	str	r1, [r2, #0]
 810cc6a:	e7f3      	b.n	810cc54 <_strtol_l.constprop.0+0xd4>
 810cc6c:	2430      	movs	r4, #48	; 0x30
 810cc6e:	2b00      	cmp	r3, #0
 810cc70:	d1b1      	bne.n	810cbd6 <_strtol_l.constprop.0+0x56>
 810cc72:	2308      	movs	r3, #8
 810cc74:	e7af      	b.n	810cbd6 <_strtol_l.constprop.0+0x56>
 810cc76:	2c30      	cmp	r4, #48	; 0x30
 810cc78:	d0a5      	beq.n	810cbc6 <_strtol_l.constprop.0+0x46>
 810cc7a:	230a      	movs	r3, #10
 810cc7c:	e7ab      	b.n	810cbd6 <_strtol_l.constprop.0+0x56>
 810cc7e:	bf00      	nop
 810cc80:	0810fbf9 	.word	0x0810fbf9

0810cc84 <_strtol_r>:
 810cc84:	f7ff bf7c 	b.w	810cb80 <_strtol_l.constprop.0>

0810cc88 <__swbuf_r>:
 810cc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cc8a:	460e      	mov	r6, r1
 810cc8c:	4614      	mov	r4, r2
 810cc8e:	4605      	mov	r5, r0
 810cc90:	b118      	cbz	r0, 810cc9a <__swbuf_r+0x12>
 810cc92:	6983      	ldr	r3, [r0, #24]
 810cc94:	b90b      	cbnz	r3, 810cc9a <__swbuf_r+0x12>
 810cc96:	f001 f84b 	bl	810dd30 <__sinit>
 810cc9a:	4b21      	ldr	r3, [pc, #132]	; (810cd20 <__swbuf_r+0x98>)
 810cc9c:	429c      	cmp	r4, r3
 810cc9e:	d12b      	bne.n	810ccf8 <__swbuf_r+0x70>
 810cca0:	686c      	ldr	r4, [r5, #4]
 810cca2:	69a3      	ldr	r3, [r4, #24]
 810cca4:	60a3      	str	r3, [r4, #8]
 810cca6:	89a3      	ldrh	r3, [r4, #12]
 810cca8:	071a      	lsls	r2, r3, #28
 810ccaa:	d52f      	bpl.n	810cd0c <__swbuf_r+0x84>
 810ccac:	6923      	ldr	r3, [r4, #16]
 810ccae:	b36b      	cbz	r3, 810cd0c <__swbuf_r+0x84>
 810ccb0:	6923      	ldr	r3, [r4, #16]
 810ccb2:	6820      	ldr	r0, [r4, #0]
 810ccb4:	1ac0      	subs	r0, r0, r3
 810ccb6:	6963      	ldr	r3, [r4, #20]
 810ccb8:	b2f6      	uxtb	r6, r6
 810ccba:	4283      	cmp	r3, r0
 810ccbc:	4637      	mov	r7, r6
 810ccbe:	dc04      	bgt.n	810ccca <__swbuf_r+0x42>
 810ccc0:	4621      	mov	r1, r4
 810ccc2:	4628      	mov	r0, r5
 810ccc4:	f000 ffa0 	bl	810dc08 <_fflush_r>
 810ccc8:	bb30      	cbnz	r0, 810cd18 <__swbuf_r+0x90>
 810ccca:	68a3      	ldr	r3, [r4, #8]
 810cccc:	3b01      	subs	r3, #1
 810ccce:	60a3      	str	r3, [r4, #8]
 810ccd0:	6823      	ldr	r3, [r4, #0]
 810ccd2:	1c5a      	adds	r2, r3, #1
 810ccd4:	6022      	str	r2, [r4, #0]
 810ccd6:	701e      	strb	r6, [r3, #0]
 810ccd8:	6963      	ldr	r3, [r4, #20]
 810ccda:	3001      	adds	r0, #1
 810ccdc:	4283      	cmp	r3, r0
 810ccde:	d004      	beq.n	810ccea <__swbuf_r+0x62>
 810cce0:	89a3      	ldrh	r3, [r4, #12]
 810cce2:	07db      	lsls	r3, r3, #31
 810cce4:	d506      	bpl.n	810ccf4 <__swbuf_r+0x6c>
 810cce6:	2e0a      	cmp	r6, #10
 810cce8:	d104      	bne.n	810ccf4 <__swbuf_r+0x6c>
 810ccea:	4621      	mov	r1, r4
 810ccec:	4628      	mov	r0, r5
 810ccee:	f000 ff8b 	bl	810dc08 <_fflush_r>
 810ccf2:	b988      	cbnz	r0, 810cd18 <__swbuf_r+0x90>
 810ccf4:	4638      	mov	r0, r7
 810ccf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810ccf8:	4b0a      	ldr	r3, [pc, #40]	; (810cd24 <__swbuf_r+0x9c>)
 810ccfa:	429c      	cmp	r4, r3
 810ccfc:	d101      	bne.n	810cd02 <__swbuf_r+0x7a>
 810ccfe:	68ac      	ldr	r4, [r5, #8]
 810cd00:	e7cf      	b.n	810cca2 <__swbuf_r+0x1a>
 810cd02:	4b09      	ldr	r3, [pc, #36]	; (810cd28 <__swbuf_r+0xa0>)
 810cd04:	429c      	cmp	r4, r3
 810cd06:	bf08      	it	eq
 810cd08:	68ec      	ldreq	r4, [r5, #12]
 810cd0a:	e7ca      	b.n	810cca2 <__swbuf_r+0x1a>
 810cd0c:	4621      	mov	r1, r4
 810cd0e:	4628      	mov	r0, r5
 810cd10:	f000 f80c 	bl	810cd2c <__swsetup_r>
 810cd14:	2800      	cmp	r0, #0
 810cd16:	d0cb      	beq.n	810ccb0 <__swbuf_r+0x28>
 810cd18:	f04f 37ff 	mov.w	r7, #4294967295
 810cd1c:	e7ea      	b.n	810ccf4 <__swbuf_r+0x6c>
 810cd1e:	bf00      	nop
 810cd20:	0810fdac 	.word	0x0810fdac
 810cd24:	0810fdcc 	.word	0x0810fdcc
 810cd28:	0810fd8c 	.word	0x0810fd8c

0810cd2c <__swsetup_r>:
 810cd2c:	4b32      	ldr	r3, [pc, #200]	; (810cdf8 <__swsetup_r+0xcc>)
 810cd2e:	b570      	push	{r4, r5, r6, lr}
 810cd30:	681d      	ldr	r5, [r3, #0]
 810cd32:	4606      	mov	r6, r0
 810cd34:	460c      	mov	r4, r1
 810cd36:	b125      	cbz	r5, 810cd42 <__swsetup_r+0x16>
 810cd38:	69ab      	ldr	r3, [r5, #24]
 810cd3a:	b913      	cbnz	r3, 810cd42 <__swsetup_r+0x16>
 810cd3c:	4628      	mov	r0, r5
 810cd3e:	f000 fff7 	bl	810dd30 <__sinit>
 810cd42:	4b2e      	ldr	r3, [pc, #184]	; (810cdfc <__swsetup_r+0xd0>)
 810cd44:	429c      	cmp	r4, r3
 810cd46:	d10f      	bne.n	810cd68 <__swsetup_r+0x3c>
 810cd48:	686c      	ldr	r4, [r5, #4]
 810cd4a:	89a3      	ldrh	r3, [r4, #12]
 810cd4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810cd50:	0719      	lsls	r1, r3, #28
 810cd52:	d42c      	bmi.n	810cdae <__swsetup_r+0x82>
 810cd54:	06dd      	lsls	r5, r3, #27
 810cd56:	d411      	bmi.n	810cd7c <__swsetup_r+0x50>
 810cd58:	2309      	movs	r3, #9
 810cd5a:	6033      	str	r3, [r6, #0]
 810cd5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810cd60:	81a3      	strh	r3, [r4, #12]
 810cd62:	f04f 30ff 	mov.w	r0, #4294967295
 810cd66:	e03e      	b.n	810cde6 <__swsetup_r+0xba>
 810cd68:	4b25      	ldr	r3, [pc, #148]	; (810ce00 <__swsetup_r+0xd4>)
 810cd6a:	429c      	cmp	r4, r3
 810cd6c:	d101      	bne.n	810cd72 <__swsetup_r+0x46>
 810cd6e:	68ac      	ldr	r4, [r5, #8]
 810cd70:	e7eb      	b.n	810cd4a <__swsetup_r+0x1e>
 810cd72:	4b24      	ldr	r3, [pc, #144]	; (810ce04 <__swsetup_r+0xd8>)
 810cd74:	429c      	cmp	r4, r3
 810cd76:	bf08      	it	eq
 810cd78:	68ec      	ldreq	r4, [r5, #12]
 810cd7a:	e7e6      	b.n	810cd4a <__swsetup_r+0x1e>
 810cd7c:	0758      	lsls	r0, r3, #29
 810cd7e:	d512      	bpl.n	810cda6 <__swsetup_r+0x7a>
 810cd80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810cd82:	b141      	cbz	r1, 810cd96 <__swsetup_r+0x6a>
 810cd84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810cd88:	4299      	cmp	r1, r3
 810cd8a:	d002      	beq.n	810cd92 <__swsetup_r+0x66>
 810cd8c:	4630      	mov	r0, r6
 810cd8e:	f7fe f8af 	bl	810aef0 <_free_r>
 810cd92:	2300      	movs	r3, #0
 810cd94:	6363      	str	r3, [r4, #52]	; 0x34
 810cd96:	89a3      	ldrh	r3, [r4, #12]
 810cd98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810cd9c:	81a3      	strh	r3, [r4, #12]
 810cd9e:	2300      	movs	r3, #0
 810cda0:	6063      	str	r3, [r4, #4]
 810cda2:	6923      	ldr	r3, [r4, #16]
 810cda4:	6023      	str	r3, [r4, #0]
 810cda6:	89a3      	ldrh	r3, [r4, #12]
 810cda8:	f043 0308 	orr.w	r3, r3, #8
 810cdac:	81a3      	strh	r3, [r4, #12]
 810cdae:	6923      	ldr	r3, [r4, #16]
 810cdb0:	b94b      	cbnz	r3, 810cdc6 <__swsetup_r+0x9a>
 810cdb2:	89a3      	ldrh	r3, [r4, #12]
 810cdb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810cdb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810cdbc:	d003      	beq.n	810cdc6 <__swsetup_r+0x9a>
 810cdbe:	4621      	mov	r1, r4
 810cdc0:	4630      	mov	r0, r6
 810cdc2:	f001 fbed 	bl	810e5a0 <__smakebuf_r>
 810cdc6:	89a0      	ldrh	r0, [r4, #12]
 810cdc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810cdcc:	f010 0301 	ands.w	r3, r0, #1
 810cdd0:	d00a      	beq.n	810cde8 <__swsetup_r+0xbc>
 810cdd2:	2300      	movs	r3, #0
 810cdd4:	60a3      	str	r3, [r4, #8]
 810cdd6:	6963      	ldr	r3, [r4, #20]
 810cdd8:	425b      	negs	r3, r3
 810cdda:	61a3      	str	r3, [r4, #24]
 810cddc:	6923      	ldr	r3, [r4, #16]
 810cdde:	b943      	cbnz	r3, 810cdf2 <__swsetup_r+0xc6>
 810cde0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810cde4:	d1ba      	bne.n	810cd5c <__swsetup_r+0x30>
 810cde6:	bd70      	pop	{r4, r5, r6, pc}
 810cde8:	0781      	lsls	r1, r0, #30
 810cdea:	bf58      	it	pl
 810cdec:	6963      	ldrpl	r3, [r4, #20]
 810cdee:	60a3      	str	r3, [r4, #8]
 810cdf0:	e7f4      	b.n	810cddc <__swsetup_r+0xb0>
 810cdf2:	2000      	movs	r0, #0
 810cdf4:	e7f7      	b.n	810cde6 <__swsetup_r+0xba>
 810cdf6:	bf00      	nop
 810cdf8:	10000020 	.word	0x10000020
 810cdfc:	0810fdac 	.word	0x0810fdac
 810ce00:	0810fdcc 	.word	0x0810fdcc
 810ce04:	0810fd8c 	.word	0x0810fd8c

0810ce08 <quorem>:
 810ce08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ce0c:	6903      	ldr	r3, [r0, #16]
 810ce0e:	690c      	ldr	r4, [r1, #16]
 810ce10:	42a3      	cmp	r3, r4
 810ce12:	4607      	mov	r7, r0
 810ce14:	f2c0 8081 	blt.w	810cf1a <quorem+0x112>
 810ce18:	3c01      	subs	r4, #1
 810ce1a:	f101 0814 	add.w	r8, r1, #20
 810ce1e:	f100 0514 	add.w	r5, r0, #20
 810ce22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ce26:	9301      	str	r3, [sp, #4]
 810ce28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810ce2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ce30:	3301      	adds	r3, #1
 810ce32:	429a      	cmp	r2, r3
 810ce34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810ce38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810ce3c:	fbb2 f6f3 	udiv	r6, r2, r3
 810ce40:	d331      	bcc.n	810cea6 <quorem+0x9e>
 810ce42:	f04f 0e00 	mov.w	lr, #0
 810ce46:	4640      	mov	r0, r8
 810ce48:	46ac      	mov	ip, r5
 810ce4a:	46f2      	mov	sl, lr
 810ce4c:	f850 2b04 	ldr.w	r2, [r0], #4
 810ce50:	b293      	uxth	r3, r2
 810ce52:	fb06 e303 	mla	r3, r6, r3, lr
 810ce56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810ce5a:	b29b      	uxth	r3, r3
 810ce5c:	ebaa 0303 	sub.w	r3, sl, r3
 810ce60:	f8dc a000 	ldr.w	sl, [ip]
 810ce64:	0c12      	lsrs	r2, r2, #16
 810ce66:	fa13 f38a 	uxtah	r3, r3, sl
 810ce6a:	fb06 e202 	mla	r2, r6, r2, lr
 810ce6e:	9300      	str	r3, [sp, #0]
 810ce70:	9b00      	ldr	r3, [sp, #0]
 810ce72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810ce76:	b292      	uxth	r2, r2
 810ce78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810ce7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ce80:	f8bd 3000 	ldrh.w	r3, [sp]
 810ce84:	4581      	cmp	r9, r0
 810ce86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ce8a:	f84c 3b04 	str.w	r3, [ip], #4
 810ce8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810ce92:	d2db      	bcs.n	810ce4c <quorem+0x44>
 810ce94:	f855 300b 	ldr.w	r3, [r5, fp]
 810ce98:	b92b      	cbnz	r3, 810cea6 <quorem+0x9e>
 810ce9a:	9b01      	ldr	r3, [sp, #4]
 810ce9c:	3b04      	subs	r3, #4
 810ce9e:	429d      	cmp	r5, r3
 810cea0:	461a      	mov	r2, r3
 810cea2:	d32e      	bcc.n	810cf02 <quorem+0xfa>
 810cea4:	613c      	str	r4, [r7, #16]
 810cea6:	4638      	mov	r0, r7
 810cea8:	f001 fea4 	bl	810ebf4 <__mcmp>
 810ceac:	2800      	cmp	r0, #0
 810ceae:	db24      	blt.n	810cefa <quorem+0xf2>
 810ceb0:	3601      	adds	r6, #1
 810ceb2:	4628      	mov	r0, r5
 810ceb4:	f04f 0c00 	mov.w	ip, #0
 810ceb8:	f858 2b04 	ldr.w	r2, [r8], #4
 810cebc:	f8d0 e000 	ldr.w	lr, [r0]
 810cec0:	b293      	uxth	r3, r2
 810cec2:	ebac 0303 	sub.w	r3, ip, r3
 810cec6:	0c12      	lsrs	r2, r2, #16
 810cec8:	fa13 f38e 	uxtah	r3, r3, lr
 810cecc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810ced0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ced4:	b29b      	uxth	r3, r3
 810ced6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ceda:	45c1      	cmp	r9, r8
 810cedc:	f840 3b04 	str.w	r3, [r0], #4
 810cee0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810cee4:	d2e8      	bcs.n	810ceb8 <quorem+0xb0>
 810cee6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ceea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ceee:	b922      	cbnz	r2, 810cefa <quorem+0xf2>
 810cef0:	3b04      	subs	r3, #4
 810cef2:	429d      	cmp	r5, r3
 810cef4:	461a      	mov	r2, r3
 810cef6:	d30a      	bcc.n	810cf0e <quorem+0x106>
 810cef8:	613c      	str	r4, [r7, #16]
 810cefa:	4630      	mov	r0, r6
 810cefc:	b003      	add	sp, #12
 810cefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cf02:	6812      	ldr	r2, [r2, #0]
 810cf04:	3b04      	subs	r3, #4
 810cf06:	2a00      	cmp	r2, #0
 810cf08:	d1cc      	bne.n	810cea4 <quorem+0x9c>
 810cf0a:	3c01      	subs	r4, #1
 810cf0c:	e7c7      	b.n	810ce9e <quorem+0x96>
 810cf0e:	6812      	ldr	r2, [r2, #0]
 810cf10:	3b04      	subs	r3, #4
 810cf12:	2a00      	cmp	r2, #0
 810cf14:	d1f0      	bne.n	810cef8 <quorem+0xf0>
 810cf16:	3c01      	subs	r4, #1
 810cf18:	e7eb      	b.n	810cef2 <quorem+0xea>
 810cf1a:	2000      	movs	r0, #0
 810cf1c:	e7ee      	b.n	810cefc <quorem+0xf4>
	...

0810cf20 <_dtoa_r>:
 810cf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cf24:	ed2d 8b04 	vpush	{d8-d9}
 810cf28:	ec57 6b10 	vmov	r6, r7, d0
 810cf2c:	b093      	sub	sp, #76	; 0x4c
 810cf2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810cf30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810cf34:	9106      	str	r1, [sp, #24]
 810cf36:	ee10 aa10 	vmov	sl, s0
 810cf3a:	4604      	mov	r4, r0
 810cf3c:	9209      	str	r2, [sp, #36]	; 0x24
 810cf3e:	930c      	str	r3, [sp, #48]	; 0x30
 810cf40:	46bb      	mov	fp, r7
 810cf42:	b975      	cbnz	r5, 810cf62 <_dtoa_r+0x42>
 810cf44:	2010      	movs	r0, #16
 810cf46:	f7fd ffb5 	bl	810aeb4 <malloc>
 810cf4a:	4602      	mov	r2, r0
 810cf4c:	6260      	str	r0, [r4, #36]	; 0x24
 810cf4e:	b920      	cbnz	r0, 810cf5a <_dtoa_r+0x3a>
 810cf50:	4ba7      	ldr	r3, [pc, #668]	; (810d1f0 <_dtoa_r+0x2d0>)
 810cf52:	21ea      	movs	r1, #234	; 0xea
 810cf54:	48a7      	ldr	r0, [pc, #668]	; (810d1f4 <_dtoa_r+0x2d4>)
 810cf56:	f002 fb8d 	bl	810f674 <__assert_func>
 810cf5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810cf5e:	6005      	str	r5, [r0, #0]
 810cf60:	60c5      	str	r5, [r0, #12]
 810cf62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810cf64:	6819      	ldr	r1, [r3, #0]
 810cf66:	b151      	cbz	r1, 810cf7e <_dtoa_r+0x5e>
 810cf68:	685a      	ldr	r2, [r3, #4]
 810cf6a:	604a      	str	r2, [r1, #4]
 810cf6c:	2301      	movs	r3, #1
 810cf6e:	4093      	lsls	r3, r2
 810cf70:	608b      	str	r3, [r1, #8]
 810cf72:	4620      	mov	r0, r4
 810cf74:	f001 fbb2 	bl	810e6dc <_Bfree>
 810cf78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810cf7a:	2200      	movs	r2, #0
 810cf7c:	601a      	str	r2, [r3, #0]
 810cf7e:	1e3b      	subs	r3, r7, #0
 810cf80:	bfaa      	itet	ge
 810cf82:	2300      	movge	r3, #0
 810cf84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 810cf88:	f8c8 3000 	strge.w	r3, [r8]
 810cf8c:	4b9a      	ldr	r3, [pc, #616]	; (810d1f8 <_dtoa_r+0x2d8>)
 810cf8e:	bfbc      	itt	lt
 810cf90:	2201      	movlt	r2, #1
 810cf92:	f8c8 2000 	strlt.w	r2, [r8]
 810cf96:	ea33 030b 	bics.w	r3, r3, fp
 810cf9a:	d11b      	bne.n	810cfd4 <_dtoa_r+0xb4>
 810cf9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810cf9e:	f242 730f 	movw	r3, #9999	; 0x270f
 810cfa2:	6013      	str	r3, [r2, #0]
 810cfa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810cfa8:	4333      	orrs	r3, r6
 810cfaa:	f000 8592 	beq.w	810dad2 <_dtoa_r+0xbb2>
 810cfae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810cfb0:	b963      	cbnz	r3, 810cfcc <_dtoa_r+0xac>
 810cfb2:	4b92      	ldr	r3, [pc, #584]	; (810d1fc <_dtoa_r+0x2dc>)
 810cfb4:	e022      	b.n	810cffc <_dtoa_r+0xdc>
 810cfb6:	4b92      	ldr	r3, [pc, #584]	; (810d200 <_dtoa_r+0x2e0>)
 810cfb8:	9301      	str	r3, [sp, #4]
 810cfba:	3308      	adds	r3, #8
 810cfbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810cfbe:	6013      	str	r3, [r2, #0]
 810cfc0:	9801      	ldr	r0, [sp, #4]
 810cfc2:	b013      	add	sp, #76	; 0x4c
 810cfc4:	ecbd 8b04 	vpop	{d8-d9}
 810cfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cfcc:	4b8b      	ldr	r3, [pc, #556]	; (810d1fc <_dtoa_r+0x2dc>)
 810cfce:	9301      	str	r3, [sp, #4]
 810cfd0:	3303      	adds	r3, #3
 810cfd2:	e7f3      	b.n	810cfbc <_dtoa_r+0x9c>
 810cfd4:	2200      	movs	r2, #0
 810cfd6:	2300      	movs	r3, #0
 810cfd8:	4650      	mov	r0, sl
 810cfda:	4659      	mov	r1, fp
 810cfdc:	f7f3 fdfc 	bl	8100bd8 <__aeabi_dcmpeq>
 810cfe0:	ec4b ab19 	vmov	d9, sl, fp
 810cfe4:	4680      	mov	r8, r0
 810cfe6:	b158      	cbz	r0, 810d000 <_dtoa_r+0xe0>
 810cfe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810cfea:	2301      	movs	r3, #1
 810cfec:	6013      	str	r3, [r2, #0]
 810cfee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810cff0:	2b00      	cmp	r3, #0
 810cff2:	f000 856b 	beq.w	810dacc <_dtoa_r+0xbac>
 810cff6:	4883      	ldr	r0, [pc, #524]	; (810d204 <_dtoa_r+0x2e4>)
 810cff8:	6018      	str	r0, [r3, #0]
 810cffa:	1e43      	subs	r3, r0, #1
 810cffc:	9301      	str	r3, [sp, #4]
 810cffe:	e7df      	b.n	810cfc0 <_dtoa_r+0xa0>
 810d000:	ec4b ab10 	vmov	d0, sl, fp
 810d004:	aa10      	add	r2, sp, #64	; 0x40
 810d006:	a911      	add	r1, sp, #68	; 0x44
 810d008:	4620      	mov	r0, r4
 810d00a:	f001 ff15 	bl	810ee38 <__d2b>
 810d00e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 810d012:	ee08 0a10 	vmov	s16, r0
 810d016:	2d00      	cmp	r5, #0
 810d018:	f000 8084 	beq.w	810d124 <_dtoa_r+0x204>
 810d01c:	ee19 3a90 	vmov	r3, s19
 810d020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810d024:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810d028:	4656      	mov	r6, sl
 810d02a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810d02e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810d032:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 810d036:	4b74      	ldr	r3, [pc, #464]	; (810d208 <_dtoa_r+0x2e8>)
 810d038:	2200      	movs	r2, #0
 810d03a:	4630      	mov	r0, r6
 810d03c:	4639      	mov	r1, r7
 810d03e:	f7f3 f9ab 	bl	8100398 <__aeabi_dsub>
 810d042:	a365      	add	r3, pc, #404	; (adr r3, 810d1d8 <_dtoa_r+0x2b8>)
 810d044:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d048:	f7f3 fb5e 	bl	8100708 <__aeabi_dmul>
 810d04c:	a364      	add	r3, pc, #400	; (adr r3, 810d1e0 <_dtoa_r+0x2c0>)
 810d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d052:	f7f3 f9a3 	bl	810039c <__adddf3>
 810d056:	4606      	mov	r6, r0
 810d058:	4628      	mov	r0, r5
 810d05a:	460f      	mov	r7, r1
 810d05c:	f7f3 faea 	bl	8100634 <__aeabi_i2d>
 810d060:	a361      	add	r3, pc, #388	; (adr r3, 810d1e8 <_dtoa_r+0x2c8>)
 810d062:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d066:	f7f3 fb4f 	bl	8100708 <__aeabi_dmul>
 810d06a:	4602      	mov	r2, r0
 810d06c:	460b      	mov	r3, r1
 810d06e:	4630      	mov	r0, r6
 810d070:	4639      	mov	r1, r7
 810d072:	f7f3 f993 	bl	810039c <__adddf3>
 810d076:	4606      	mov	r6, r0
 810d078:	460f      	mov	r7, r1
 810d07a:	f7f3 fdf5 	bl	8100c68 <__aeabi_d2iz>
 810d07e:	2200      	movs	r2, #0
 810d080:	9000      	str	r0, [sp, #0]
 810d082:	2300      	movs	r3, #0
 810d084:	4630      	mov	r0, r6
 810d086:	4639      	mov	r1, r7
 810d088:	f7f3 fdb0 	bl	8100bec <__aeabi_dcmplt>
 810d08c:	b150      	cbz	r0, 810d0a4 <_dtoa_r+0x184>
 810d08e:	9800      	ldr	r0, [sp, #0]
 810d090:	f7f3 fad0 	bl	8100634 <__aeabi_i2d>
 810d094:	4632      	mov	r2, r6
 810d096:	463b      	mov	r3, r7
 810d098:	f7f3 fd9e 	bl	8100bd8 <__aeabi_dcmpeq>
 810d09c:	b910      	cbnz	r0, 810d0a4 <_dtoa_r+0x184>
 810d09e:	9b00      	ldr	r3, [sp, #0]
 810d0a0:	3b01      	subs	r3, #1
 810d0a2:	9300      	str	r3, [sp, #0]
 810d0a4:	9b00      	ldr	r3, [sp, #0]
 810d0a6:	2b16      	cmp	r3, #22
 810d0a8:	d85a      	bhi.n	810d160 <_dtoa_r+0x240>
 810d0aa:	9a00      	ldr	r2, [sp, #0]
 810d0ac:	4b57      	ldr	r3, [pc, #348]	; (810d20c <_dtoa_r+0x2ec>)
 810d0ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0b6:	ec51 0b19 	vmov	r0, r1, d9
 810d0ba:	f7f3 fd97 	bl	8100bec <__aeabi_dcmplt>
 810d0be:	2800      	cmp	r0, #0
 810d0c0:	d050      	beq.n	810d164 <_dtoa_r+0x244>
 810d0c2:	9b00      	ldr	r3, [sp, #0]
 810d0c4:	3b01      	subs	r3, #1
 810d0c6:	9300      	str	r3, [sp, #0]
 810d0c8:	2300      	movs	r3, #0
 810d0ca:	930b      	str	r3, [sp, #44]	; 0x2c
 810d0cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810d0ce:	1b5d      	subs	r5, r3, r5
 810d0d0:	1e6b      	subs	r3, r5, #1
 810d0d2:	9305      	str	r3, [sp, #20]
 810d0d4:	bf45      	ittet	mi
 810d0d6:	f1c5 0301 	rsbmi	r3, r5, #1
 810d0da:	9304      	strmi	r3, [sp, #16]
 810d0dc:	2300      	movpl	r3, #0
 810d0de:	2300      	movmi	r3, #0
 810d0e0:	bf4c      	ite	mi
 810d0e2:	9305      	strmi	r3, [sp, #20]
 810d0e4:	9304      	strpl	r3, [sp, #16]
 810d0e6:	9b00      	ldr	r3, [sp, #0]
 810d0e8:	2b00      	cmp	r3, #0
 810d0ea:	db3d      	blt.n	810d168 <_dtoa_r+0x248>
 810d0ec:	9b05      	ldr	r3, [sp, #20]
 810d0ee:	9a00      	ldr	r2, [sp, #0]
 810d0f0:	920a      	str	r2, [sp, #40]	; 0x28
 810d0f2:	4413      	add	r3, r2
 810d0f4:	9305      	str	r3, [sp, #20]
 810d0f6:	2300      	movs	r3, #0
 810d0f8:	9307      	str	r3, [sp, #28]
 810d0fa:	9b06      	ldr	r3, [sp, #24]
 810d0fc:	2b09      	cmp	r3, #9
 810d0fe:	f200 8089 	bhi.w	810d214 <_dtoa_r+0x2f4>
 810d102:	2b05      	cmp	r3, #5
 810d104:	bfc4      	itt	gt
 810d106:	3b04      	subgt	r3, #4
 810d108:	9306      	strgt	r3, [sp, #24]
 810d10a:	9b06      	ldr	r3, [sp, #24]
 810d10c:	f1a3 0302 	sub.w	r3, r3, #2
 810d110:	bfcc      	ite	gt
 810d112:	2500      	movgt	r5, #0
 810d114:	2501      	movle	r5, #1
 810d116:	2b03      	cmp	r3, #3
 810d118:	f200 8087 	bhi.w	810d22a <_dtoa_r+0x30a>
 810d11c:	e8df f003 	tbb	[pc, r3]
 810d120:	59383a2d 	.word	0x59383a2d
 810d124:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810d128:	441d      	add	r5, r3
 810d12a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810d12e:	2b20      	cmp	r3, #32
 810d130:	bfc1      	itttt	gt
 810d132:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810d136:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810d13a:	fa0b f303 	lslgt.w	r3, fp, r3
 810d13e:	fa26 f000 	lsrgt.w	r0, r6, r0
 810d142:	bfda      	itte	le
 810d144:	f1c3 0320 	rsble	r3, r3, #32
 810d148:	fa06 f003 	lslle.w	r0, r6, r3
 810d14c:	4318      	orrgt	r0, r3
 810d14e:	f7f3 fa61 	bl	8100614 <__aeabi_ui2d>
 810d152:	2301      	movs	r3, #1
 810d154:	4606      	mov	r6, r0
 810d156:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810d15a:	3d01      	subs	r5, #1
 810d15c:	930e      	str	r3, [sp, #56]	; 0x38
 810d15e:	e76a      	b.n	810d036 <_dtoa_r+0x116>
 810d160:	2301      	movs	r3, #1
 810d162:	e7b2      	b.n	810d0ca <_dtoa_r+0x1aa>
 810d164:	900b      	str	r0, [sp, #44]	; 0x2c
 810d166:	e7b1      	b.n	810d0cc <_dtoa_r+0x1ac>
 810d168:	9b04      	ldr	r3, [sp, #16]
 810d16a:	9a00      	ldr	r2, [sp, #0]
 810d16c:	1a9b      	subs	r3, r3, r2
 810d16e:	9304      	str	r3, [sp, #16]
 810d170:	4253      	negs	r3, r2
 810d172:	9307      	str	r3, [sp, #28]
 810d174:	2300      	movs	r3, #0
 810d176:	930a      	str	r3, [sp, #40]	; 0x28
 810d178:	e7bf      	b.n	810d0fa <_dtoa_r+0x1da>
 810d17a:	2300      	movs	r3, #0
 810d17c:	9308      	str	r3, [sp, #32]
 810d17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d180:	2b00      	cmp	r3, #0
 810d182:	dc55      	bgt.n	810d230 <_dtoa_r+0x310>
 810d184:	2301      	movs	r3, #1
 810d186:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810d18a:	461a      	mov	r2, r3
 810d18c:	9209      	str	r2, [sp, #36]	; 0x24
 810d18e:	e00c      	b.n	810d1aa <_dtoa_r+0x28a>
 810d190:	2301      	movs	r3, #1
 810d192:	e7f3      	b.n	810d17c <_dtoa_r+0x25c>
 810d194:	2300      	movs	r3, #0
 810d196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d198:	9308      	str	r3, [sp, #32]
 810d19a:	9b00      	ldr	r3, [sp, #0]
 810d19c:	4413      	add	r3, r2
 810d19e:	9302      	str	r3, [sp, #8]
 810d1a0:	3301      	adds	r3, #1
 810d1a2:	2b01      	cmp	r3, #1
 810d1a4:	9303      	str	r3, [sp, #12]
 810d1a6:	bfb8      	it	lt
 810d1a8:	2301      	movlt	r3, #1
 810d1aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810d1ac:	2200      	movs	r2, #0
 810d1ae:	6042      	str	r2, [r0, #4]
 810d1b0:	2204      	movs	r2, #4
 810d1b2:	f102 0614 	add.w	r6, r2, #20
 810d1b6:	429e      	cmp	r6, r3
 810d1b8:	6841      	ldr	r1, [r0, #4]
 810d1ba:	d93d      	bls.n	810d238 <_dtoa_r+0x318>
 810d1bc:	4620      	mov	r0, r4
 810d1be:	f001 fa4d 	bl	810e65c <_Balloc>
 810d1c2:	9001      	str	r0, [sp, #4]
 810d1c4:	2800      	cmp	r0, #0
 810d1c6:	d13b      	bne.n	810d240 <_dtoa_r+0x320>
 810d1c8:	4b11      	ldr	r3, [pc, #68]	; (810d210 <_dtoa_r+0x2f0>)
 810d1ca:	4602      	mov	r2, r0
 810d1cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810d1d0:	e6c0      	b.n	810cf54 <_dtoa_r+0x34>
 810d1d2:	2301      	movs	r3, #1
 810d1d4:	e7df      	b.n	810d196 <_dtoa_r+0x276>
 810d1d6:	bf00      	nop
 810d1d8:	636f4361 	.word	0x636f4361
 810d1dc:	3fd287a7 	.word	0x3fd287a7
 810d1e0:	8b60c8b3 	.word	0x8b60c8b3
 810d1e4:	3fc68a28 	.word	0x3fc68a28
 810d1e8:	509f79fb 	.word	0x509f79fb
 810d1ec:	3fd34413 	.word	0x3fd34413
 810d1f0:	0810fd06 	.word	0x0810fd06
 810d1f4:	0810fd1d 	.word	0x0810fd1d
 810d1f8:	7ff00000 	.word	0x7ff00000
 810d1fc:	0810fd02 	.word	0x0810fd02
 810d200:	0810fcf9 	.word	0x0810fcf9
 810d204:	0810fb79 	.word	0x0810fb79
 810d208:	3ff80000 	.word	0x3ff80000
 810d20c:	0810fef0 	.word	0x0810fef0
 810d210:	0810fd78 	.word	0x0810fd78
 810d214:	2501      	movs	r5, #1
 810d216:	2300      	movs	r3, #0
 810d218:	9306      	str	r3, [sp, #24]
 810d21a:	9508      	str	r5, [sp, #32]
 810d21c:	f04f 33ff 	mov.w	r3, #4294967295
 810d220:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810d224:	2200      	movs	r2, #0
 810d226:	2312      	movs	r3, #18
 810d228:	e7b0      	b.n	810d18c <_dtoa_r+0x26c>
 810d22a:	2301      	movs	r3, #1
 810d22c:	9308      	str	r3, [sp, #32]
 810d22e:	e7f5      	b.n	810d21c <_dtoa_r+0x2fc>
 810d230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d232:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810d236:	e7b8      	b.n	810d1aa <_dtoa_r+0x28a>
 810d238:	3101      	adds	r1, #1
 810d23a:	6041      	str	r1, [r0, #4]
 810d23c:	0052      	lsls	r2, r2, #1
 810d23e:	e7b8      	b.n	810d1b2 <_dtoa_r+0x292>
 810d240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810d242:	9a01      	ldr	r2, [sp, #4]
 810d244:	601a      	str	r2, [r3, #0]
 810d246:	9b03      	ldr	r3, [sp, #12]
 810d248:	2b0e      	cmp	r3, #14
 810d24a:	f200 809d 	bhi.w	810d388 <_dtoa_r+0x468>
 810d24e:	2d00      	cmp	r5, #0
 810d250:	f000 809a 	beq.w	810d388 <_dtoa_r+0x468>
 810d254:	9b00      	ldr	r3, [sp, #0]
 810d256:	2b00      	cmp	r3, #0
 810d258:	dd32      	ble.n	810d2c0 <_dtoa_r+0x3a0>
 810d25a:	4ab7      	ldr	r2, [pc, #732]	; (810d538 <_dtoa_r+0x618>)
 810d25c:	f003 030f 	and.w	r3, r3, #15
 810d260:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810d264:	e9d3 8900 	ldrd	r8, r9, [r3]
 810d268:	9b00      	ldr	r3, [sp, #0]
 810d26a:	05d8      	lsls	r0, r3, #23
 810d26c:	ea4f 1723 	mov.w	r7, r3, asr #4
 810d270:	d516      	bpl.n	810d2a0 <_dtoa_r+0x380>
 810d272:	4bb2      	ldr	r3, [pc, #712]	; (810d53c <_dtoa_r+0x61c>)
 810d274:	ec51 0b19 	vmov	r0, r1, d9
 810d278:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810d27c:	f7f3 fb6e 	bl	810095c <__aeabi_ddiv>
 810d280:	f007 070f 	and.w	r7, r7, #15
 810d284:	4682      	mov	sl, r0
 810d286:	468b      	mov	fp, r1
 810d288:	2503      	movs	r5, #3
 810d28a:	4eac      	ldr	r6, [pc, #688]	; (810d53c <_dtoa_r+0x61c>)
 810d28c:	b957      	cbnz	r7, 810d2a4 <_dtoa_r+0x384>
 810d28e:	4642      	mov	r2, r8
 810d290:	464b      	mov	r3, r9
 810d292:	4650      	mov	r0, sl
 810d294:	4659      	mov	r1, fp
 810d296:	f7f3 fb61 	bl	810095c <__aeabi_ddiv>
 810d29a:	4682      	mov	sl, r0
 810d29c:	468b      	mov	fp, r1
 810d29e:	e028      	b.n	810d2f2 <_dtoa_r+0x3d2>
 810d2a0:	2502      	movs	r5, #2
 810d2a2:	e7f2      	b.n	810d28a <_dtoa_r+0x36a>
 810d2a4:	07f9      	lsls	r1, r7, #31
 810d2a6:	d508      	bpl.n	810d2ba <_dtoa_r+0x39a>
 810d2a8:	4640      	mov	r0, r8
 810d2aa:	4649      	mov	r1, r9
 810d2ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 810d2b0:	f7f3 fa2a 	bl	8100708 <__aeabi_dmul>
 810d2b4:	3501      	adds	r5, #1
 810d2b6:	4680      	mov	r8, r0
 810d2b8:	4689      	mov	r9, r1
 810d2ba:	107f      	asrs	r7, r7, #1
 810d2bc:	3608      	adds	r6, #8
 810d2be:	e7e5      	b.n	810d28c <_dtoa_r+0x36c>
 810d2c0:	f000 809b 	beq.w	810d3fa <_dtoa_r+0x4da>
 810d2c4:	9b00      	ldr	r3, [sp, #0]
 810d2c6:	4f9d      	ldr	r7, [pc, #628]	; (810d53c <_dtoa_r+0x61c>)
 810d2c8:	425e      	negs	r6, r3
 810d2ca:	4b9b      	ldr	r3, [pc, #620]	; (810d538 <_dtoa_r+0x618>)
 810d2cc:	f006 020f 	and.w	r2, r6, #15
 810d2d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d2d8:	ec51 0b19 	vmov	r0, r1, d9
 810d2dc:	f7f3 fa14 	bl	8100708 <__aeabi_dmul>
 810d2e0:	1136      	asrs	r6, r6, #4
 810d2e2:	4682      	mov	sl, r0
 810d2e4:	468b      	mov	fp, r1
 810d2e6:	2300      	movs	r3, #0
 810d2e8:	2502      	movs	r5, #2
 810d2ea:	2e00      	cmp	r6, #0
 810d2ec:	d17a      	bne.n	810d3e4 <_dtoa_r+0x4c4>
 810d2ee:	2b00      	cmp	r3, #0
 810d2f0:	d1d3      	bne.n	810d29a <_dtoa_r+0x37a>
 810d2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d2f4:	2b00      	cmp	r3, #0
 810d2f6:	f000 8082 	beq.w	810d3fe <_dtoa_r+0x4de>
 810d2fa:	4b91      	ldr	r3, [pc, #580]	; (810d540 <_dtoa_r+0x620>)
 810d2fc:	2200      	movs	r2, #0
 810d2fe:	4650      	mov	r0, sl
 810d300:	4659      	mov	r1, fp
 810d302:	f7f3 fc73 	bl	8100bec <__aeabi_dcmplt>
 810d306:	2800      	cmp	r0, #0
 810d308:	d079      	beq.n	810d3fe <_dtoa_r+0x4de>
 810d30a:	9b03      	ldr	r3, [sp, #12]
 810d30c:	2b00      	cmp	r3, #0
 810d30e:	d076      	beq.n	810d3fe <_dtoa_r+0x4de>
 810d310:	9b02      	ldr	r3, [sp, #8]
 810d312:	2b00      	cmp	r3, #0
 810d314:	dd36      	ble.n	810d384 <_dtoa_r+0x464>
 810d316:	9b00      	ldr	r3, [sp, #0]
 810d318:	4650      	mov	r0, sl
 810d31a:	4659      	mov	r1, fp
 810d31c:	1e5f      	subs	r7, r3, #1
 810d31e:	2200      	movs	r2, #0
 810d320:	4b88      	ldr	r3, [pc, #544]	; (810d544 <_dtoa_r+0x624>)
 810d322:	f7f3 f9f1 	bl	8100708 <__aeabi_dmul>
 810d326:	9e02      	ldr	r6, [sp, #8]
 810d328:	4682      	mov	sl, r0
 810d32a:	468b      	mov	fp, r1
 810d32c:	3501      	adds	r5, #1
 810d32e:	4628      	mov	r0, r5
 810d330:	f7f3 f980 	bl	8100634 <__aeabi_i2d>
 810d334:	4652      	mov	r2, sl
 810d336:	465b      	mov	r3, fp
 810d338:	f7f3 f9e6 	bl	8100708 <__aeabi_dmul>
 810d33c:	4b82      	ldr	r3, [pc, #520]	; (810d548 <_dtoa_r+0x628>)
 810d33e:	2200      	movs	r2, #0
 810d340:	f7f3 f82c 	bl	810039c <__adddf3>
 810d344:	46d0      	mov	r8, sl
 810d346:	46d9      	mov	r9, fp
 810d348:	4682      	mov	sl, r0
 810d34a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 810d34e:	2e00      	cmp	r6, #0
 810d350:	d158      	bne.n	810d404 <_dtoa_r+0x4e4>
 810d352:	4b7e      	ldr	r3, [pc, #504]	; (810d54c <_dtoa_r+0x62c>)
 810d354:	2200      	movs	r2, #0
 810d356:	4640      	mov	r0, r8
 810d358:	4649      	mov	r1, r9
 810d35a:	f7f3 f81d 	bl	8100398 <__aeabi_dsub>
 810d35e:	4652      	mov	r2, sl
 810d360:	465b      	mov	r3, fp
 810d362:	4680      	mov	r8, r0
 810d364:	4689      	mov	r9, r1
 810d366:	f7f3 fc5f 	bl	8100c28 <__aeabi_dcmpgt>
 810d36a:	2800      	cmp	r0, #0
 810d36c:	f040 8295 	bne.w	810d89a <_dtoa_r+0x97a>
 810d370:	4652      	mov	r2, sl
 810d372:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810d376:	4640      	mov	r0, r8
 810d378:	4649      	mov	r1, r9
 810d37a:	f7f3 fc37 	bl	8100bec <__aeabi_dcmplt>
 810d37e:	2800      	cmp	r0, #0
 810d380:	f040 8289 	bne.w	810d896 <_dtoa_r+0x976>
 810d384:	ec5b ab19 	vmov	sl, fp, d9
 810d388:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810d38a:	2b00      	cmp	r3, #0
 810d38c:	f2c0 8148 	blt.w	810d620 <_dtoa_r+0x700>
 810d390:	9a00      	ldr	r2, [sp, #0]
 810d392:	2a0e      	cmp	r2, #14
 810d394:	f300 8144 	bgt.w	810d620 <_dtoa_r+0x700>
 810d398:	4b67      	ldr	r3, [pc, #412]	; (810d538 <_dtoa_r+0x618>)
 810d39a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d39e:	e9d3 8900 	ldrd	r8, r9, [r3]
 810d3a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d3a4:	2b00      	cmp	r3, #0
 810d3a6:	f280 80d5 	bge.w	810d554 <_dtoa_r+0x634>
 810d3aa:	9b03      	ldr	r3, [sp, #12]
 810d3ac:	2b00      	cmp	r3, #0
 810d3ae:	f300 80d1 	bgt.w	810d554 <_dtoa_r+0x634>
 810d3b2:	f040 826f 	bne.w	810d894 <_dtoa_r+0x974>
 810d3b6:	4b65      	ldr	r3, [pc, #404]	; (810d54c <_dtoa_r+0x62c>)
 810d3b8:	2200      	movs	r2, #0
 810d3ba:	4640      	mov	r0, r8
 810d3bc:	4649      	mov	r1, r9
 810d3be:	f7f3 f9a3 	bl	8100708 <__aeabi_dmul>
 810d3c2:	4652      	mov	r2, sl
 810d3c4:	465b      	mov	r3, fp
 810d3c6:	f7f3 fc25 	bl	8100c14 <__aeabi_dcmpge>
 810d3ca:	9e03      	ldr	r6, [sp, #12]
 810d3cc:	4637      	mov	r7, r6
 810d3ce:	2800      	cmp	r0, #0
 810d3d0:	f040 8245 	bne.w	810d85e <_dtoa_r+0x93e>
 810d3d4:	9d01      	ldr	r5, [sp, #4]
 810d3d6:	2331      	movs	r3, #49	; 0x31
 810d3d8:	f805 3b01 	strb.w	r3, [r5], #1
 810d3dc:	9b00      	ldr	r3, [sp, #0]
 810d3de:	3301      	adds	r3, #1
 810d3e0:	9300      	str	r3, [sp, #0]
 810d3e2:	e240      	b.n	810d866 <_dtoa_r+0x946>
 810d3e4:	07f2      	lsls	r2, r6, #31
 810d3e6:	d505      	bpl.n	810d3f4 <_dtoa_r+0x4d4>
 810d3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 810d3ec:	f7f3 f98c 	bl	8100708 <__aeabi_dmul>
 810d3f0:	3501      	adds	r5, #1
 810d3f2:	2301      	movs	r3, #1
 810d3f4:	1076      	asrs	r6, r6, #1
 810d3f6:	3708      	adds	r7, #8
 810d3f8:	e777      	b.n	810d2ea <_dtoa_r+0x3ca>
 810d3fa:	2502      	movs	r5, #2
 810d3fc:	e779      	b.n	810d2f2 <_dtoa_r+0x3d2>
 810d3fe:	9f00      	ldr	r7, [sp, #0]
 810d400:	9e03      	ldr	r6, [sp, #12]
 810d402:	e794      	b.n	810d32e <_dtoa_r+0x40e>
 810d404:	9901      	ldr	r1, [sp, #4]
 810d406:	4b4c      	ldr	r3, [pc, #304]	; (810d538 <_dtoa_r+0x618>)
 810d408:	4431      	add	r1, r6
 810d40a:	910d      	str	r1, [sp, #52]	; 0x34
 810d40c:	9908      	ldr	r1, [sp, #32]
 810d40e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810d412:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810d416:	2900      	cmp	r1, #0
 810d418:	d043      	beq.n	810d4a2 <_dtoa_r+0x582>
 810d41a:	494d      	ldr	r1, [pc, #308]	; (810d550 <_dtoa_r+0x630>)
 810d41c:	2000      	movs	r0, #0
 810d41e:	f7f3 fa9d 	bl	810095c <__aeabi_ddiv>
 810d422:	4652      	mov	r2, sl
 810d424:	465b      	mov	r3, fp
 810d426:	f7f2 ffb7 	bl	8100398 <__aeabi_dsub>
 810d42a:	9d01      	ldr	r5, [sp, #4]
 810d42c:	4682      	mov	sl, r0
 810d42e:	468b      	mov	fp, r1
 810d430:	4649      	mov	r1, r9
 810d432:	4640      	mov	r0, r8
 810d434:	f7f3 fc18 	bl	8100c68 <__aeabi_d2iz>
 810d438:	4606      	mov	r6, r0
 810d43a:	f7f3 f8fb 	bl	8100634 <__aeabi_i2d>
 810d43e:	4602      	mov	r2, r0
 810d440:	460b      	mov	r3, r1
 810d442:	4640      	mov	r0, r8
 810d444:	4649      	mov	r1, r9
 810d446:	f7f2 ffa7 	bl	8100398 <__aeabi_dsub>
 810d44a:	3630      	adds	r6, #48	; 0x30
 810d44c:	f805 6b01 	strb.w	r6, [r5], #1
 810d450:	4652      	mov	r2, sl
 810d452:	465b      	mov	r3, fp
 810d454:	4680      	mov	r8, r0
 810d456:	4689      	mov	r9, r1
 810d458:	f7f3 fbc8 	bl	8100bec <__aeabi_dcmplt>
 810d45c:	2800      	cmp	r0, #0
 810d45e:	d163      	bne.n	810d528 <_dtoa_r+0x608>
 810d460:	4642      	mov	r2, r8
 810d462:	464b      	mov	r3, r9
 810d464:	4936      	ldr	r1, [pc, #216]	; (810d540 <_dtoa_r+0x620>)
 810d466:	2000      	movs	r0, #0
 810d468:	f7f2 ff96 	bl	8100398 <__aeabi_dsub>
 810d46c:	4652      	mov	r2, sl
 810d46e:	465b      	mov	r3, fp
 810d470:	f7f3 fbbc 	bl	8100bec <__aeabi_dcmplt>
 810d474:	2800      	cmp	r0, #0
 810d476:	f040 80b5 	bne.w	810d5e4 <_dtoa_r+0x6c4>
 810d47a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d47c:	429d      	cmp	r5, r3
 810d47e:	d081      	beq.n	810d384 <_dtoa_r+0x464>
 810d480:	4b30      	ldr	r3, [pc, #192]	; (810d544 <_dtoa_r+0x624>)
 810d482:	2200      	movs	r2, #0
 810d484:	4650      	mov	r0, sl
 810d486:	4659      	mov	r1, fp
 810d488:	f7f3 f93e 	bl	8100708 <__aeabi_dmul>
 810d48c:	4b2d      	ldr	r3, [pc, #180]	; (810d544 <_dtoa_r+0x624>)
 810d48e:	4682      	mov	sl, r0
 810d490:	468b      	mov	fp, r1
 810d492:	4640      	mov	r0, r8
 810d494:	4649      	mov	r1, r9
 810d496:	2200      	movs	r2, #0
 810d498:	f7f3 f936 	bl	8100708 <__aeabi_dmul>
 810d49c:	4680      	mov	r8, r0
 810d49e:	4689      	mov	r9, r1
 810d4a0:	e7c6      	b.n	810d430 <_dtoa_r+0x510>
 810d4a2:	4650      	mov	r0, sl
 810d4a4:	4659      	mov	r1, fp
 810d4a6:	f7f3 f92f 	bl	8100708 <__aeabi_dmul>
 810d4aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d4ac:	9d01      	ldr	r5, [sp, #4]
 810d4ae:	930f      	str	r3, [sp, #60]	; 0x3c
 810d4b0:	4682      	mov	sl, r0
 810d4b2:	468b      	mov	fp, r1
 810d4b4:	4649      	mov	r1, r9
 810d4b6:	4640      	mov	r0, r8
 810d4b8:	f7f3 fbd6 	bl	8100c68 <__aeabi_d2iz>
 810d4bc:	4606      	mov	r6, r0
 810d4be:	f7f3 f8b9 	bl	8100634 <__aeabi_i2d>
 810d4c2:	3630      	adds	r6, #48	; 0x30
 810d4c4:	4602      	mov	r2, r0
 810d4c6:	460b      	mov	r3, r1
 810d4c8:	4640      	mov	r0, r8
 810d4ca:	4649      	mov	r1, r9
 810d4cc:	f7f2 ff64 	bl	8100398 <__aeabi_dsub>
 810d4d0:	f805 6b01 	strb.w	r6, [r5], #1
 810d4d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d4d6:	429d      	cmp	r5, r3
 810d4d8:	4680      	mov	r8, r0
 810d4da:	4689      	mov	r9, r1
 810d4dc:	f04f 0200 	mov.w	r2, #0
 810d4e0:	d124      	bne.n	810d52c <_dtoa_r+0x60c>
 810d4e2:	4b1b      	ldr	r3, [pc, #108]	; (810d550 <_dtoa_r+0x630>)
 810d4e4:	4650      	mov	r0, sl
 810d4e6:	4659      	mov	r1, fp
 810d4e8:	f7f2 ff58 	bl	810039c <__adddf3>
 810d4ec:	4602      	mov	r2, r0
 810d4ee:	460b      	mov	r3, r1
 810d4f0:	4640      	mov	r0, r8
 810d4f2:	4649      	mov	r1, r9
 810d4f4:	f7f3 fb98 	bl	8100c28 <__aeabi_dcmpgt>
 810d4f8:	2800      	cmp	r0, #0
 810d4fa:	d173      	bne.n	810d5e4 <_dtoa_r+0x6c4>
 810d4fc:	4652      	mov	r2, sl
 810d4fe:	465b      	mov	r3, fp
 810d500:	4913      	ldr	r1, [pc, #76]	; (810d550 <_dtoa_r+0x630>)
 810d502:	2000      	movs	r0, #0
 810d504:	f7f2 ff48 	bl	8100398 <__aeabi_dsub>
 810d508:	4602      	mov	r2, r0
 810d50a:	460b      	mov	r3, r1
 810d50c:	4640      	mov	r0, r8
 810d50e:	4649      	mov	r1, r9
 810d510:	f7f3 fb6c 	bl	8100bec <__aeabi_dcmplt>
 810d514:	2800      	cmp	r0, #0
 810d516:	f43f af35 	beq.w	810d384 <_dtoa_r+0x464>
 810d51a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810d51c:	1e6b      	subs	r3, r5, #1
 810d51e:	930f      	str	r3, [sp, #60]	; 0x3c
 810d520:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810d524:	2b30      	cmp	r3, #48	; 0x30
 810d526:	d0f8      	beq.n	810d51a <_dtoa_r+0x5fa>
 810d528:	9700      	str	r7, [sp, #0]
 810d52a:	e049      	b.n	810d5c0 <_dtoa_r+0x6a0>
 810d52c:	4b05      	ldr	r3, [pc, #20]	; (810d544 <_dtoa_r+0x624>)
 810d52e:	f7f3 f8eb 	bl	8100708 <__aeabi_dmul>
 810d532:	4680      	mov	r8, r0
 810d534:	4689      	mov	r9, r1
 810d536:	e7bd      	b.n	810d4b4 <_dtoa_r+0x594>
 810d538:	0810fef0 	.word	0x0810fef0
 810d53c:	0810fec8 	.word	0x0810fec8
 810d540:	3ff00000 	.word	0x3ff00000
 810d544:	40240000 	.word	0x40240000
 810d548:	401c0000 	.word	0x401c0000
 810d54c:	40140000 	.word	0x40140000
 810d550:	3fe00000 	.word	0x3fe00000
 810d554:	9d01      	ldr	r5, [sp, #4]
 810d556:	4656      	mov	r6, sl
 810d558:	465f      	mov	r7, fp
 810d55a:	4642      	mov	r2, r8
 810d55c:	464b      	mov	r3, r9
 810d55e:	4630      	mov	r0, r6
 810d560:	4639      	mov	r1, r7
 810d562:	f7f3 f9fb 	bl	810095c <__aeabi_ddiv>
 810d566:	f7f3 fb7f 	bl	8100c68 <__aeabi_d2iz>
 810d56a:	4682      	mov	sl, r0
 810d56c:	f7f3 f862 	bl	8100634 <__aeabi_i2d>
 810d570:	4642      	mov	r2, r8
 810d572:	464b      	mov	r3, r9
 810d574:	f7f3 f8c8 	bl	8100708 <__aeabi_dmul>
 810d578:	4602      	mov	r2, r0
 810d57a:	460b      	mov	r3, r1
 810d57c:	4630      	mov	r0, r6
 810d57e:	4639      	mov	r1, r7
 810d580:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 810d584:	f7f2 ff08 	bl	8100398 <__aeabi_dsub>
 810d588:	f805 6b01 	strb.w	r6, [r5], #1
 810d58c:	9e01      	ldr	r6, [sp, #4]
 810d58e:	9f03      	ldr	r7, [sp, #12]
 810d590:	1bae      	subs	r6, r5, r6
 810d592:	42b7      	cmp	r7, r6
 810d594:	4602      	mov	r2, r0
 810d596:	460b      	mov	r3, r1
 810d598:	d135      	bne.n	810d606 <_dtoa_r+0x6e6>
 810d59a:	f7f2 feff 	bl	810039c <__adddf3>
 810d59e:	4642      	mov	r2, r8
 810d5a0:	464b      	mov	r3, r9
 810d5a2:	4606      	mov	r6, r0
 810d5a4:	460f      	mov	r7, r1
 810d5a6:	f7f3 fb3f 	bl	8100c28 <__aeabi_dcmpgt>
 810d5aa:	b9d0      	cbnz	r0, 810d5e2 <_dtoa_r+0x6c2>
 810d5ac:	4642      	mov	r2, r8
 810d5ae:	464b      	mov	r3, r9
 810d5b0:	4630      	mov	r0, r6
 810d5b2:	4639      	mov	r1, r7
 810d5b4:	f7f3 fb10 	bl	8100bd8 <__aeabi_dcmpeq>
 810d5b8:	b110      	cbz	r0, 810d5c0 <_dtoa_r+0x6a0>
 810d5ba:	f01a 0f01 	tst.w	sl, #1
 810d5be:	d110      	bne.n	810d5e2 <_dtoa_r+0x6c2>
 810d5c0:	4620      	mov	r0, r4
 810d5c2:	ee18 1a10 	vmov	r1, s16
 810d5c6:	f001 f889 	bl	810e6dc <_Bfree>
 810d5ca:	2300      	movs	r3, #0
 810d5cc:	9800      	ldr	r0, [sp, #0]
 810d5ce:	702b      	strb	r3, [r5, #0]
 810d5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810d5d2:	3001      	adds	r0, #1
 810d5d4:	6018      	str	r0, [r3, #0]
 810d5d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810d5d8:	2b00      	cmp	r3, #0
 810d5da:	f43f acf1 	beq.w	810cfc0 <_dtoa_r+0xa0>
 810d5de:	601d      	str	r5, [r3, #0]
 810d5e0:	e4ee      	b.n	810cfc0 <_dtoa_r+0xa0>
 810d5e2:	9f00      	ldr	r7, [sp, #0]
 810d5e4:	462b      	mov	r3, r5
 810d5e6:	461d      	mov	r5, r3
 810d5e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810d5ec:	2a39      	cmp	r2, #57	; 0x39
 810d5ee:	d106      	bne.n	810d5fe <_dtoa_r+0x6de>
 810d5f0:	9a01      	ldr	r2, [sp, #4]
 810d5f2:	429a      	cmp	r2, r3
 810d5f4:	d1f7      	bne.n	810d5e6 <_dtoa_r+0x6c6>
 810d5f6:	9901      	ldr	r1, [sp, #4]
 810d5f8:	2230      	movs	r2, #48	; 0x30
 810d5fa:	3701      	adds	r7, #1
 810d5fc:	700a      	strb	r2, [r1, #0]
 810d5fe:	781a      	ldrb	r2, [r3, #0]
 810d600:	3201      	adds	r2, #1
 810d602:	701a      	strb	r2, [r3, #0]
 810d604:	e790      	b.n	810d528 <_dtoa_r+0x608>
 810d606:	4ba6      	ldr	r3, [pc, #664]	; (810d8a0 <_dtoa_r+0x980>)
 810d608:	2200      	movs	r2, #0
 810d60a:	f7f3 f87d 	bl	8100708 <__aeabi_dmul>
 810d60e:	2200      	movs	r2, #0
 810d610:	2300      	movs	r3, #0
 810d612:	4606      	mov	r6, r0
 810d614:	460f      	mov	r7, r1
 810d616:	f7f3 fadf 	bl	8100bd8 <__aeabi_dcmpeq>
 810d61a:	2800      	cmp	r0, #0
 810d61c:	d09d      	beq.n	810d55a <_dtoa_r+0x63a>
 810d61e:	e7cf      	b.n	810d5c0 <_dtoa_r+0x6a0>
 810d620:	9a08      	ldr	r2, [sp, #32]
 810d622:	2a00      	cmp	r2, #0
 810d624:	f000 80d7 	beq.w	810d7d6 <_dtoa_r+0x8b6>
 810d628:	9a06      	ldr	r2, [sp, #24]
 810d62a:	2a01      	cmp	r2, #1
 810d62c:	f300 80ba 	bgt.w	810d7a4 <_dtoa_r+0x884>
 810d630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810d632:	2a00      	cmp	r2, #0
 810d634:	f000 80b2 	beq.w	810d79c <_dtoa_r+0x87c>
 810d638:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810d63c:	9e07      	ldr	r6, [sp, #28]
 810d63e:	9d04      	ldr	r5, [sp, #16]
 810d640:	9a04      	ldr	r2, [sp, #16]
 810d642:	441a      	add	r2, r3
 810d644:	9204      	str	r2, [sp, #16]
 810d646:	9a05      	ldr	r2, [sp, #20]
 810d648:	2101      	movs	r1, #1
 810d64a:	441a      	add	r2, r3
 810d64c:	4620      	mov	r0, r4
 810d64e:	9205      	str	r2, [sp, #20]
 810d650:	f001 f946 	bl	810e8e0 <__i2b>
 810d654:	4607      	mov	r7, r0
 810d656:	2d00      	cmp	r5, #0
 810d658:	dd0c      	ble.n	810d674 <_dtoa_r+0x754>
 810d65a:	9b05      	ldr	r3, [sp, #20]
 810d65c:	2b00      	cmp	r3, #0
 810d65e:	dd09      	ble.n	810d674 <_dtoa_r+0x754>
 810d660:	42ab      	cmp	r3, r5
 810d662:	9a04      	ldr	r2, [sp, #16]
 810d664:	bfa8      	it	ge
 810d666:	462b      	movge	r3, r5
 810d668:	1ad2      	subs	r2, r2, r3
 810d66a:	9204      	str	r2, [sp, #16]
 810d66c:	9a05      	ldr	r2, [sp, #20]
 810d66e:	1aed      	subs	r5, r5, r3
 810d670:	1ad3      	subs	r3, r2, r3
 810d672:	9305      	str	r3, [sp, #20]
 810d674:	9b07      	ldr	r3, [sp, #28]
 810d676:	b31b      	cbz	r3, 810d6c0 <_dtoa_r+0x7a0>
 810d678:	9b08      	ldr	r3, [sp, #32]
 810d67a:	2b00      	cmp	r3, #0
 810d67c:	f000 80af 	beq.w	810d7de <_dtoa_r+0x8be>
 810d680:	2e00      	cmp	r6, #0
 810d682:	dd13      	ble.n	810d6ac <_dtoa_r+0x78c>
 810d684:	4639      	mov	r1, r7
 810d686:	4632      	mov	r2, r6
 810d688:	4620      	mov	r0, r4
 810d68a:	f001 f9e9 	bl	810ea60 <__pow5mult>
 810d68e:	ee18 2a10 	vmov	r2, s16
 810d692:	4601      	mov	r1, r0
 810d694:	4607      	mov	r7, r0
 810d696:	4620      	mov	r0, r4
 810d698:	f001 f938 	bl	810e90c <__multiply>
 810d69c:	ee18 1a10 	vmov	r1, s16
 810d6a0:	4680      	mov	r8, r0
 810d6a2:	4620      	mov	r0, r4
 810d6a4:	f001 f81a 	bl	810e6dc <_Bfree>
 810d6a8:	ee08 8a10 	vmov	s16, r8
 810d6ac:	9b07      	ldr	r3, [sp, #28]
 810d6ae:	1b9a      	subs	r2, r3, r6
 810d6b0:	d006      	beq.n	810d6c0 <_dtoa_r+0x7a0>
 810d6b2:	ee18 1a10 	vmov	r1, s16
 810d6b6:	4620      	mov	r0, r4
 810d6b8:	f001 f9d2 	bl	810ea60 <__pow5mult>
 810d6bc:	ee08 0a10 	vmov	s16, r0
 810d6c0:	2101      	movs	r1, #1
 810d6c2:	4620      	mov	r0, r4
 810d6c4:	f001 f90c 	bl	810e8e0 <__i2b>
 810d6c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d6ca:	2b00      	cmp	r3, #0
 810d6cc:	4606      	mov	r6, r0
 810d6ce:	f340 8088 	ble.w	810d7e2 <_dtoa_r+0x8c2>
 810d6d2:	461a      	mov	r2, r3
 810d6d4:	4601      	mov	r1, r0
 810d6d6:	4620      	mov	r0, r4
 810d6d8:	f001 f9c2 	bl	810ea60 <__pow5mult>
 810d6dc:	9b06      	ldr	r3, [sp, #24]
 810d6de:	2b01      	cmp	r3, #1
 810d6e0:	4606      	mov	r6, r0
 810d6e2:	f340 8081 	ble.w	810d7e8 <_dtoa_r+0x8c8>
 810d6e6:	f04f 0800 	mov.w	r8, #0
 810d6ea:	6933      	ldr	r3, [r6, #16]
 810d6ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810d6f0:	6918      	ldr	r0, [r3, #16]
 810d6f2:	f001 f8a5 	bl	810e840 <__hi0bits>
 810d6f6:	f1c0 0020 	rsb	r0, r0, #32
 810d6fa:	9b05      	ldr	r3, [sp, #20]
 810d6fc:	4418      	add	r0, r3
 810d6fe:	f010 001f 	ands.w	r0, r0, #31
 810d702:	f000 8092 	beq.w	810d82a <_dtoa_r+0x90a>
 810d706:	f1c0 0320 	rsb	r3, r0, #32
 810d70a:	2b04      	cmp	r3, #4
 810d70c:	f340 808a 	ble.w	810d824 <_dtoa_r+0x904>
 810d710:	f1c0 001c 	rsb	r0, r0, #28
 810d714:	9b04      	ldr	r3, [sp, #16]
 810d716:	4403      	add	r3, r0
 810d718:	9304      	str	r3, [sp, #16]
 810d71a:	9b05      	ldr	r3, [sp, #20]
 810d71c:	4403      	add	r3, r0
 810d71e:	4405      	add	r5, r0
 810d720:	9305      	str	r3, [sp, #20]
 810d722:	9b04      	ldr	r3, [sp, #16]
 810d724:	2b00      	cmp	r3, #0
 810d726:	dd07      	ble.n	810d738 <_dtoa_r+0x818>
 810d728:	ee18 1a10 	vmov	r1, s16
 810d72c:	461a      	mov	r2, r3
 810d72e:	4620      	mov	r0, r4
 810d730:	f001 f9f0 	bl	810eb14 <__lshift>
 810d734:	ee08 0a10 	vmov	s16, r0
 810d738:	9b05      	ldr	r3, [sp, #20]
 810d73a:	2b00      	cmp	r3, #0
 810d73c:	dd05      	ble.n	810d74a <_dtoa_r+0x82a>
 810d73e:	4631      	mov	r1, r6
 810d740:	461a      	mov	r2, r3
 810d742:	4620      	mov	r0, r4
 810d744:	f001 f9e6 	bl	810eb14 <__lshift>
 810d748:	4606      	mov	r6, r0
 810d74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d74c:	2b00      	cmp	r3, #0
 810d74e:	d06e      	beq.n	810d82e <_dtoa_r+0x90e>
 810d750:	ee18 0a10 	vmov	r0, s16
 810d754:	4631      	mov	r1, r6
 810d756:	f001 fa4d 	bl	810ebf4 <__mcmp>
 810d75a:	2800      	cmp	r0, #0
 810d75c:	da67      	bge.n	810d82e <_dtoa_r+0x90e>
 810d75e:	9b00      	ldr	r3, [sp, #0]
 810d760:	3b01      	subs	r3, #1
 810d762:	ee18 1a10 	vmov	r1, s16
 810d766:	9300      	str	r3, [sp, #0]
 810d768:	220a      	movs	r2, #10
 810d76a:	2300      	movs	r3, #0
 810d76c:	4620      	mov	r0, r4
 810d76e:	f000 ffd7 	bl	810e720 <__multadd>
 810d772:	9b08      	ldr	r3, [sp, #32]
 810d774:	ee08 0a10 	vmov	s16, r0
 810d778:	2b00      	cmp	r3, #0
 810d77a:	f000 81b1 	beq.w	810dae0 <_dtoa_r+0xbc0>
 810d77e:	2300      	movs	r3, #0
 810d780:	4639      	mov	r1, r7
 810d782:	220a      	movs	r2, #10
 810d784:	4620      	mov	r0, r4
 810d786:	f000 ffcb 	bl	810e720 <__multadd>
 810d78a:	9b02      	ldr	r3, [sp, #8]
 810d78c:	2b00      	cmp	r3, #0
 810d78e:	4607      	mov	r7, r0
 810d790:	f300 808e 	bgt.w	810d8b0 <_dtoa_r+0x990>
 810d794:	9b06      	ldr	r3, [sp, #24]
 810d796:	2b02      	cmp	r3, #2
 810d798:	dc51      	bgt.n	810d83e <_dtoa_r+0x91e>
 810d79a:	e089      	b.n	810d8b0 <_dtoa_r+0x990>
 810d79c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810d79e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810d7a2:	e74b      	b.n	810d63c <_dtoa_r+0x71c>
 810d7a4:	9b03      	ldr	r3, [sp, #12]
 810d7a6:	1e5e      	subs	r6, r3, #1
 810d7a8:	9b07      	ldr	r3, [sp, #28]
 810d7aa:	42b3      	cmp	r3, r6
 810d7ac:	bfbf      	itttt	lt
 810d7ae:	9b07      	ldrlt	r3, [sp, #28]
 810d7b0:	9607      	strlt	r6, [sp, #28]
 810d7b2:	1af2      	sublt	r2, r6, r3
 810d7b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 810d7b6:	bfb6      	itet	lt
 810d7b8:	189b      	addlt	r3, r3, r2
 810d7ba:	1b9e      	subge	r6, r3, r6
 810d7bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 810d7be:	9b03      	ldr	r3, [sp, #12]
 810d7c0:	bfb8      	it	lt
 810d7c2:	2600      	movlt	r6, #0
 810d7c4:	2b00      	cmp	r3, #0
 810d7c6:	bfb7      	itett	lt
 810d7c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 810d7cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 810d7d0:	1a9d      	sublt	r5, r3, r2
 810d7d2:	2300      	movlt	r3, #0
 810d7d4:	e734      	b.n	810d640 <_dtoa_r+0x720>
 810d7d6:	9e07      	ldr	r6, [sp, #28]
 810d7d8:	9d04      	ldr	r5, [sp, #16]
 810d7da:	9f08      	ldr	r7, [sp, #32]
 810d7dc:	e73b      	b.n	810d656 <_dtoa_r+0x736>
 810d7de:	9a07      	ldr	r2, [sp, #28]
 810d7e0:	e767      	b.n	810d6b2 <_dtoa_r+0x792>
 810d7e2:	9b06      	ldr	r3, [sp, #24]
 810d7e4:	2b01      	cmp	r3, #1
 810d7e6:	dc18      	bgt.n	810d81a <_dtoa_r+0x8fa>
 810d7e8:	f1ba 0f00 	cmp.w	sl, #0
 810d7ec:	d115      	bne.n	810d81a <_dtoa_r+0x8fa>
 810d7ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810d7f2:	b993      	cbnz	r3, 810d81a <_dtoa_r+0x8fa>
 810d7f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810d7f8:	0d1b      	lsrs	r3, r3, #20
 810d7fa:	051b      	lsls	r3, r3, #20
 810d7fc:	b183      	cbz	r3, 810d820 <_dtoa_r+0x900>
 810d7fe:	9b04      	ldr	r3, [sp, #16]
 810d800:	3301      	adds	r3, #1
 810d802:	9304      	str	r3, [sp, #16]
 810d804:	9b05      	ldr	r3, [sp, #20]
 810d806:	3301      	adds	r3, #1
 810d808:	9305      	str	r3, [sp, #20]
 810d80a:	f04f 0801 	mov.w	r8, #1
 810d80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d810:	2b00      	cmp	r3, #0
 810d812:	f47f af6a 	bne.w	810d6ea <_dtoa_r+0x7ca>
 810d816:	2001      	movs	r0, #1
 810d818:	e76f      	b.n	810d6fa <_dtoa_r+0x7da>
 810d81a:	f04f 0800 	mov.w	r8, #0
 810d81e:	e7f6      	b.n	810d80e <_dtoa_r+0x8ee>
 810d820:	4698      	mov	r8, r3
 810d822:	e7f4      	b.n	810d80e <_dtoa_r+0x8ee>
 810d824:	f43f af7d 	beq.w	810d722 <_dtoa_r+0x802>
 810d828:	4618      	mov	r0, r3
 810d82a:	301c      	adds	r0, #28
 810d82c:	e772      	b.n	810d714 <_dtoa_r+0x7f4>
 810d82e:	9b03      	ldr	r3, [sp, #12]
 810d830:	2b00      	cmp	r3, #0
 810d832:	dc37      	bgt.n	810d8a4 <_dtoa_r+0x984>
 810d834:	9b06      	ldr	r3, [sp, #24]
 810d836:	2b02      	cmp	r3, #2
 810d838:	dd34      	ble.n	810d8a4 <_dtoa_r+0x984>
 810d83a:	9b03      	ldr	r3, [sp, #12]
 810d83c:	9302      	str	r3, [sp, #8]
 810d83e:	9b02      	ldr	r3, [sp, #8]
 810d840:	b96b      	cbnz	r3, 810d85e <_dtoa_r+0x93e>
 810d842:	4631      	mov	r1, r6
 810d844:	2205      	movs	r2, #5
 810d846:	4620      	mov	r0, r4
 810d848:	f000 ff6a 	bl	810e720 <__multadd>
 810d84c:	4601      	mov	r1, r0
 810d84e:	4606      	mov	r6, r0
 810d850:	ee18 0a10 	vmov	r0, s16
 810d854:	f001 f9ce 	bl	810ebf4 <__mcmp>
 810d858:	2800      	cmp	r0, #0
 810d85a:	f73f adbb 	bgt.w	810d3d4 <_dtoa_r+0x4b4>
 810d85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d860:	9d01      	ldr	r5, [sp, #4]
 810d862:	43db      	mvns	r3, r3
 810d864:	9300      	str	r3, [sp, #0]
 810d866:	f04f 0800 	mov.w	r8, #0
 810d86a:	4631      	mov	r1, r6
 810d86c:	4620      	mov	r0, r4
 810d86e:	f000 ff35 	bl	810e6dc <_Bfree>
 810d872:	2f00      	cmp	r7, #0
 810d874:	f43f aea4 	beq.w	810d5c0 <_dtoa_r+0x6a0>
 810d878:	f1b8 0f00 	cmp.w	r8, #0
 810d87c:	d005      	beq.n	810d88a <_dtoa_r+0x96a>
 810d87e:	45b8      	cmp	r8, r7
 810d880:	d003      	beq.n	810d88a <_dtoa_r+0x96a>
 810d882:	4641      	mov	r1, r8
 810d884:	4620      	mov	r0, r4
 810d886:	f000 ff29 	bl	810e6dc <_Bfree>
 810d88a:	4639      	mov	r1, r7
 810d88c:	4620      	mov	r0, r4
 810d88e:	f000 ff25 	bl	810e6dc <_Bfree>
 810d892:	e695      	b.n	810d5c0 <_dtoa_r+0x6a0>
 810d894:	2600      	movs	r6, #0
 810d896:	4637      	mov	r7, r6
 810d898:	e7e1      	b.n	810d85e <_dtoa_r+0x93e>
 810d89a:	9700      	str	r7, [sp, #0]
 810d89c:	4637      	mov	r7, r6
 810d89e:	e599      	b.n	810d3d4 <_dtoa_r+0x4b4>
 810d8a0:	40240000 	.word	0x40240000
 810d8a4:	9b08      	ldr	r3, [sp, #32]
 810d8a6:	2b00      	cmp	r3, #0
 810d8a8:	f000 80ca 	beq.w	810da40 <_dtoa_r+0xb20>
 810d8ac:	9b03      	ldr	r3, [sp, #12]
 810d8ae:	9302      	str	r3, [sp, #8]
 810d8b0:	2d00      	cmp	r5, #0
 810d8b2:	dd05      	ble.n	810d8c0 <_dtoa_r+0x9a0>
 810d8b4:	4639      	mov	r1, r7
 810d8b6:	462a      	mov	r2, r5
 810d8b8:	4620      	mov	r0, r4
 810d8ba:	f001 f92b 	bl	810eb14 <__lshift>
 810d8be:	4607      	mov	r7, r0
 810d8c0:	f1b8 0f00 	cmp.w	r8, #0
 810d8c4:	d05b      	beq.n	810d97e <_dtoa_r+0xa5e>
 810d8c6:	6879      	ldr	r1, [r7, #4]
 810d8c8:	4620      	mov	r0, r4
 810d8ca:	f000 fec7 	bl	810e65c <_Balloc>
 810d8ce:	4605      	mov	r5, r0
 810d8d0:	b928      	cbnz	r0, 810d8de <_dtoa_r+0x9be>
 810d8d2:	4b87      	ldr	r3, [pc, #540]	; (810daf0 <_dtoa_r+0xbd0>)
 810d8d4:	4602      	mov	r2, r0
 810d8d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 810d8da:	f7ff bb3b 	b.w	810cf54 <_dtoa_r+0x34>
 810d8de:	693a      	ldr	r2, [r7, #16]
 810d8e0:	3202      	adds	r2, #2
 810d8e2:	0092      	lsls	r2, r2, #2
 810d8e4:	f107 010c 	add.w	r1, r7, #12
 810d8e8:	300c      	adds	r0, #12
 810d8ea:	f7fd faeb 	bl	810aec4 <memcpy>
 810d8ee:	2201      	movs	r2, #1
 810d8f0:	4629      	mov	r1, r5
 810d8f2:	4620      	mov	r0, r4
 810d8f4:	f001 f90e 	bl	810eb14 <__lshift>
 810d8f8:	9b01      	ldr	r3, [sp, #4]
 810d8fa:	f103 0901 	add.w	r9, r3, #1
 810d8fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810d902:	4413      	add	r3, r2
 810d904:	9305      	str	r3, [sp, #20]
 810d906:	f00a 0301 	and.w	r3, sl, #1
 810d90a:	46b8      	mov	r8, r7
 810d90c:	9304      	str	r3, [sp, #16]
 810d90e:	4607      	mov	r7, r0
 810d910:	4631      	mov	r1, r6
 810d912:	ee18 0a10 	vmov	r0, s16
 810d916:	f7ff fa77 	bl	810ce08 <quorem>
 810d91a:	4641      	mov	r1, r8
 810d91c:	9002      	str	r0, [sp, #8]
 810d91e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810d922:	ee18 0a10 	vmov	r0, s16
 810d926:	f001 f965 	bl	810ebf4 <__mcmp>
 810d92a:	463a      	mov	r2, r7
 810d92c:	9003      	str	r0, [sp, #12]
 810d92e:	4631      	mov	r1, r6
 810d930:	4620      	mov	r0, r4
 810d932:	f001 f97b 	bl	810ec2c <__mdiff>
 810d936:	68c2      	ldr	r2, [r0, #12]
 810d938:	f109 3bff 	add.w	fp, r9, #4294967295
 810d93c:	4605      	mov	r5, r0
 810d93e:	bb02      	cbnz	r2, 810d982 <_dtoa_r+0xa62>
 810d940:	4601      	mov	r1, r0
 810d942:	ee18 0a10 	vmov	r0, s16
 810d946:	f001 f955 	bl	810ebf4 <__mcmp>
 810d94a:	4602      	mov	r2, r0
 810d94c:	4629      	mov	r1, r5
 810d94e:	4620      	mov	r0, r4
 810d950:	9207      	str	r2, [sp, #28]
 810d952:	f000 fec3 	bl	810e6dc <_Bfree>
 810d956:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810d95a:	ea43 0102 	orr.w	r1, r3, r2
 810d95e:	9b04      	ldr	r3, [sp, #16]
 810d960:	430b      	orrs	r3, r1
 810d962:	464d      	mov	r5, r9
 810d964:	d10f      	bne.n	810d986 <_dtoa_r+0xa66>
 810d966:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810d96a:	d02a      	beq.n	810d9c2 <_dtoa_r+0xaa2>
 810d96c:	9b03      	ldr	r3, [sp, #12]
 810d96e:	2b00      	cmp	r3, #0
 810d970:	dd02      	ble.n	810d978 <_dtoa_r+0xa58>
 810d972:	9b02      	ldr	r3, [sp, #8]
 810d974:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 810d978:	f88b a000 	strb.w	sl, [fp]
 810d97c:	e775      	b.n	810d86a <_dtoa_r+0x94a>
 810d97e:	4638      	mov	r0, r7
 810d980:	e7ba      	b.n	810d8f8 <_dtoa_r+0x9d8>
 810d982:	2201      	movs	r2, #1
 810d984:	e7e2      	b.n	810d94c <_dtoa_r+0xa2c>
 810d986:	9b03      	ldr	r3, [sp, #12]
 810d988:	2b00      	cmp	r3, #0
 810d98a:	db04      	blt.n	810d996 <_dtoa_r+0xa76>
 810d98c:	9906      	ldr	r1, [sp, #24]
 810d98e:	430b      	orrs	r3, r1
 810d990:	9904      	ldr	r1, [sp, #16]
 810d992:	430b      	orrs	r3, r1
 810d994:	d122      	bne.n	810d9dc <_dtoa_r+0xabc>
 810d996:	2a00      	cmp	r2, #0
 810d998:	ddee      	ble.n	810d978 <_dtoa_r+0xa58>
 810d99a:	ee18 1a10 	vmov	r1, s16
 810d99e:	2201      	movs	r2, #1
 810d9a0:	4620      	mov	r0, r4
 810d9a2:	f001 f8b7 	bl	810eb14 <__lshift>
 810d9a6:	4631      	mov	r1, r6
 810d9a8:	ee08 0a10 	vmov	s16, r0
 810d9ac:	f001 f922 	bl	810ebf4 <__mcmp>
 810d9b0:	2800      	cmp	r0, #0
 810d9b2:	dc03      	bgt.n	810d9bc <_dtoa_r+0xa9c>
 810d9b4:	d1e0      	bne.n	810d978 <_dtoa_r+0xa58>
 810d9b6:	f01a 0f01 	tst.w	sl, #1
 810d9ba:	d0dd      	beq.n	810d978 <_dtoa_r+0xa58>
 810d9bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810d9c0:	d1d7      	bne.n	810d972 <_dtoa_r+0xa52>
 810d9c2:	2339      	movs	r3, #57	; 0x39
 810d9c4:	f88b 3000 	strb.w	r3, [fp]
 810d9c8:	462b      	mov	r3, r5
 810d9ca:	461d      	mov	r5, r3
 810d9cc:	3b01      	subs	r3, #1
 810d9ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810d9d2:	2a39      	cmp	r2, #57	; 0x39
 810d9d4:	d071      	beq.n	810daba <_dtoa_r+0xb9a>
 810d9d6:	3201      	adds	r2, #1
 810d9d8:	701a      	strb	r2, [r3, #0]
 810d9da:	e746      	b.n	810d86a <_dtoa_r+0x94a>
 810d9dc:	2a00      	cmp	r2, #0
 810d9de:	dd07      	ble.n	810d9f0 <_dtoa_r+0xad0>
 810d9e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810d9e4:	d0ed      	beq.n	810d9c2 <_dtoa_r+0xaa2>
 810d9e6:	f10a 0301 	add.w	r3, sl, #1
 810d9ea:	f88b 3000 	strb.w	r3, [fp]
 810d9ee:	e73c      	b.n	810d86a <_dtoa_r+0x94a>
 810d9f0:	9b05      	ldr	r3, [sp, #20]
 810d9f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 810d9f6:	4599      	cmp	r9, r3
 810d9f8:	d047      	beq.n	810da8a <_dtoa_r+0xb6a>
 810d9fa:	ee18 1a10 	vmov	r1, s16
 810d9fe:	2300      	movs	r3, #0
 810da00:	220a      	movs	r2, #10
 810da02:	4620      	mov	r0, r4
 810da04:	f000 fe8c 	bl	810e720 <__multadd>
 810da08:	45b8      	cmp	r8, r7
 810da0a:	ee08 0a10 	vmov	s16, r0
 810da0e:	f04f 0300 	mov.w	r3, #0
 810da12:	f04f 020a 	mov.w	r2, #10
 810da16:	4641      	mov	r1, r8
 810da18:	4620      	mov	r0, r4
 810da1a:	d106      	bne.n	810da2a <_dtoa_r+0xb0a>
 810da1c:	f000 fe80 	bl	810e720 <__multadd>
 810da20:	4680      	mov	r8, r0
 810da22:	4607      	mov	r7, r0
 810da24:	f109 0901 	add.w	r9, r9, #1
 810da28:	e772      	b.n	810d910 <_dtoa_r+0x9f0>
 810da2a:	f000 fe79 	bl	810e720 <__multadd>
 810da2e:	4639      	mov	r1, r7
 810da30:	4680      	mov	r8, r0
 810da32:	2300      	movs	r3, #0
 810da34:	220a      	movs	r2, #10
 810da36:	4620      	mov	r0, r4
 810da38:	f000 fe72 	bl	810e720 <__multadd>
 810da3c:	4607      	mov	r7, r0
 810da3e:	e7f1      	b.n	810da24 <_dtoa_r+0xb04>
 810da40:	9b03      	ldr	r3, [sp, #12]
 810da42:	9302      	str	r3, [sp, #8]
 810da44:	9d01      	ldr	r5, [sp, #4]
 810da46:	ee18 0a10 	vmov	r0, s16
 810da4a:	4631      	mov	r1, r6
 810da4c:	f7ff f9dc 	bl	810ce08 <quorem>
 810da50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810da54:	9b01      	ldr	r3, [sp, #4]
 810da56:	f805 ab01 	strb.w	sl, [r5], #1
 810da5a:	1aea      	subs	r2, r5, r3
 810da5c:	9b02      	ldr	r3, [sp, #8]
 810da5e:	4293      	cmp	r3, r2
 810da60:	dd09      	ble.n	810da76 <_dtoa_r+0xb56>
 810da62:	ee18 1a10 	vmov	r1, s16
 810da66:	2300      	movs	r3, #0
 810da68:	220a      	movs	r2, #10
 810da6a:	4620      	mov	r0, r4
 810da6c:	f000 fe58 	bl	810e720 <__multadd>
 810da70:	ee08 0a10 	vmov	s16, r0
 810da74:	e7e7      	b.n	810da46 <_dtoa_r+0xb26>
 810da76:	9b02      	ldr	r3, [sp, #8]
 810da78:	2b00      	cmp	r3, #0
 810da7a:	bfc8      	it	gt
 810da7c:	461d      	movgt	r5, r3
 810da7e:	9b01      	ldr	r3, [sp, #4]
 810da80:	bfd8      	it	le
 810da82:	2501      	movle	r5, #1
 810da84:	441d      	add	r5, r3
 810da86:	f04f 0800 	mov.w	r8, #0
 810da8a:	ee18 1a10 	vmov	r1, s16
 810da8e:	2201      	movs	r2, #1
 810da90:	4620      	mov	r0, r4
 810da92:	f001 f83f 	bl	810eb14 <__lshift>
 810da96:	4631      	mov	r1, r6
 810da98:	ee08 0a10 	vmov	s16, r0
 810da9c:	f001 f8aa 	bl	810ebf4 <__mcmp>
 810daa0:	2800      	cmp	r0, #0
 810daa2:	dc91      	bgt.n	810d9c8 <_dtoa_r+0xaa8>
 810daa4:	d102      	bne.n	810daac <_dtoa_r+0xb8c>
 810daa6:	f01a 0f01 	tst.w	sl, #1
 810daaa:	d18d      	bne.n	810d9c8 <_dtoa_r+0xaa8>
 810daac:	462b      	mov	r3, r5
 810daae:	461d      	mov	r5, r3
 810dab0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810dab4:	2a30      	cmp	r2, #48	; 0x30
 810dab6:	d0fa      	beq.n	810daae <_dtoa_r+0xb8e>
 810dab8:	e6d7      	b.n	810d86a <_dtoa_r+0x94a>
 810daba:	9a01      	ldr	r2, [sp, #4]
 810dabc:	429a      	cmp	r2, r3
 810dabe:	d184      	bne.n	810d9ca <_dtoa_r+0xaaa>
 810dac0:	9b00      	ldr	r3, [sp, #0]
 810dac2:	3301      	adds	r3, #1
 810dac4:	9300      	str	r3, [sp, #0]
 810dac6:	2331      	movs	r3, #49	; 0x31
 810dac8:	7013      	strb	r3, [r2, #0]
 810daca:	e6ce      	b.n	810d86a <_dtoa_r+0x94a>
 810dacc:	4b09      	ldr	r3, [pc, #36]	; (810daf4 <_dtoa_r+0xbd4>)
 810dace:	f7ff ba95 	b.w	810cffc <_dtoa_r+0xdc>
 810dad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810dad4:	2b00      	cmp	r3, #0
 810dad6:	f47f aa6e 	bne.w	810cfb6 <_dtoa_r+0x96>
 810dada:	4b07      	ldr	r3, [pc, #28]	; (810daf8 <_dtoa_r+0xbd8>)
 810dadc:	f7ff ba8e 	b.w	810cffc <_dtoa_r+0xdc>
 810dae0:	9b02      	ldr	r3, [sp, #8]
 810dae2:	2b00      	cmp	r3, #0
 810dae4:	dcae      	bgt.n	810da44 <_dtoa_r+0xb24>
 810dae6:	9b06      	ldr	r3, [sp, #24]
 810dae8:	2b02      	cmp	r3, #2
 810daea:	f73f aea8 	bgt.w	810d83e <_dtoa_r+0x91e>
 810daee:	e7a9      	b.n	810da44 <_dtoa_r+0xb24>
 810daf0:	0810fd78 	.word	0x0810fd78
 810daf4:	0810fb78 	.word	0x0810fb78
 810daf8:	0810fcf9 	.word	0x0810fcf9

0810dafc <__sflush_r>:
 810dafc:	898a      	ldrh	r2, [r1, #12]
 810dafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810db02:	4605      	mov	r5, r0
 810db04:	0710      	lsls	r0, r2, #28
 810db06:	460c      	mov	r4, r1
 810db08:	d458      	bmi.n	810dbbc <__sflush_r+0xc0>
 810db0a:	684b      	ldr	r3, [r1, #4]
 810db0c:	2b00      	cmp	r3, #0
 810db0e:	dc05      	bgt.n	810db1c <__sflush_r+0x20>
 810db10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810db12:	2b00      	cmp	r3, #0
 810db14:	dc02      	bgt.n	810db1c <__sflush_r+0x20>
 810db16:	2000      	movs	r0, #0
 810db18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810db1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810db1e:	2e00      	cmp	r6, #0
 810db20:	d0f9      	beq.n	810db16 <__sflush_r+0x1a>
 810db22:	2300      	movs	r3, #0
 810db24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810db28:	682f      	ldr	r7, [r5, #0]
 810db2a:	602b      	str	r3, [r5, #0]
 810db2c:	d032      	beq.n	810db94 <__sflush_r+0x98>
 810db2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810db30:	89a3      	ldrh	r3, [r4, #12]
 810db32:	075a      	lsls	r2, r3, #29
 810db34:	d505      	bpl.n	810db42 <__sflush_r+0x46>
 810db36:	6863      	ldr	r3, [r4, #4]
 810db38:	1ac0      	subs	r0, r0, r3
 810db3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810db3c:	b10b      	cbz	r3, 810db42 <__sflush_r+0x46>
 810db3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810db40:	1ac0      	subs	r0, r0, r3
 810db42:	2300      	movs	r3, #0
 810db44:	4602      	mov	r2, r0
 810db46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810db48:	6a21      	ldr	r1, [r4, #32]
 810db4a:	4628      	mov	r0, r5
 810db4c:	47b0      	blx	r6
 810db4e:	1c43      	adds	r3, r0, #1
 810db50:	89a3      	ldrh	r3, [r4, #12]
 810db52:	d106      	bne.n	810db62 <__sflush_r+0x66>
 810db54:	6829      	ldr	r1, [r5, #0]
 810db56:	291d      	cmp	r1, #29
 810db58:	d82c      	bhi.n	810dbb4 <__sflush_r+0xb8>
 810db5a:	4a2a      	ldr	r2, [pc, #168]	; (810dc04 <__sflush_r+0x108>)
 810db5c:	40ca      	lsrs	r2, r1
 810db5e:	07d6      	lsls	r6, r2, #31
 810db60:	d528      	bpl.n	810dbb4 <__sflush_r+0xb8>
 810db62:	2200      	movs	r2, #0
 810db64:	6062      	str	r2, [r4, #4]
 810db66:	04d9      	lsls	r1, r3, #19
 810db68:	6922      	ldr	r2, [r4, #16]
 810db6a:	6022      	str	r2, [r4, #0]
 810db6c:	d504      	bpl.n	810db78 <__sflush_r+0x7c>
 810db6e:	1c42      	adds	r2, r0, #1
 810db70:	d101      	bne.n	810db76 <__sflush_r+0x7a>
 810db72:	682b      	ldr	r3, [r5, #0]
 810db74:	b903      	cbnz	r3, 810db78 <__sflush_r+0x7c>
 810db76:	6560      	str	r0, [r4, #84]	; 0x54
 810db78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810db7a:	602f      	str	r7, [r5, #0]
 810db7c:	2900      	cmp	r1, #0
 810db7e:	d0ca      	beq.n	810db16 <__sflush_r+0x1a>
 810db80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810db84:	4299      	cmp	r1, r3
 810db86:	d002      	beq.n	810db8e <__sflush_r+0x92>
 810db88:	4628      	mov	r0, r5
 810db8a:	f7fd f9b1 	bl	810aef0 <_free_r>
 810db8e:	2000      	movs	r0, #0
 810db90:	6360      	str	r0, [r4, #52]	; 0x34
 810db92:	e7c1      	b.n	810db18 <__sflush_r+0x1c>
 810db94:	6a21      	ldr	r1, [r4, #32]
 810db96:	2301      	movs	r3, #1
 810db98:	4628      	mov	r0, r5
 810db9a:	47b0      	blx	r6
 810db9c:	1c41      	adds	r1, r0, #1
 810db9e:	d1c7      	bne.n	810db30 <__sflush_r+0x34>
 810dba0:	682b      	ldr	r3, [r5, #0]
 810dba2:	2b00      	cmp	r3, #0
 810dba4:	d0c4      	beq.n	810db30 <__sflush_r+0x34>
 810dba6:	2b1d      	cmp	r3, #29
 810dba8:	d001      	beq.n	810dbae <__sflush_r+0xb2>
 810dbaa:	2b16      	cmp	r3, #22
 810dbac:	d101      	bne.n	810dbb2 <__sflush_r+0xb6>
 810dbae:	602f      	str	r7, [r5, #0]
 810dbb0:	e7b1      	b.n	810db16 <__sflush_r+0x1a>
 810dbb2:	89a3      	ldrh	r3, [r4, #12]
 810dbb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810dbb8:	81a3      	strh	r3, [r4, #12]
 810dbba:	e7ad      	b.n	810db18 <__sflush_r+0x1c>
 810dbbc:	690f      	ldr	r7, [r1, #16]
 810dbbe:	2f00      	cmp	r7, #0
 810dbc0:	d0a9      	beq.n	810db16 <__sflush_r+0x1a>
 810dbc2:	0793      	lsls	r3, r2, #30
 810dbc4:	680e      	ldr	r6, [r1, #0]
 810dbc6:	bf08      	it	eq
 810dbc8:	694b      	ldreq	r3, [r1, #20]
 810dbca:	600f      	str	r7, [r1, #0]
 810dbcc:	bf18      	it	ne
 810dbce:	2300      	movne	r3, #0
 810dbd0:	eba6 0807 	sub.w	r8, r6, r7
 810dbd4:	608b      	str	r3, [r1, #8]
 810dbd6:	f1b8 0f00 	cmp.w	r8, #0
 810dbda:	dd9c      	ble.n	810db16 <__sflush_r+0x1a>
 810dbdc:	6a21      	ldr	r1, [r4, #32]
 810dbde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810dbe0:	4643      	mov	r3, r8
 810dbe2:	463a      	mov	r2, r7
 810dbe4:	4628      	mov	r0, r5
 810dbe6:	47b0      	blx	r6
 810dbe8:	2800      	cmp	r0, #0
 810dbea:	dc06      	bgt.n	810dbfa <__sflush_r+0xfe>
 810dbec:	89a3      	ldrh	r3, [r4, #12]
 810dbee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810dbf2:	81a3      	strh	r3, [r4, #12]
 810dbf4:	f04f 30ff 	mov.w	r0, #4294967295
 810dbf8:	e78e      	b.n	810db18 <__sflush_r+0x1c>
 810dbfa:	4407      	add	r7, r0
 810dbfc:	eba8 0800 	sub.w	r8, r8, r0
 810dc00:	e7e9      	b.n	810dbd6 <__sflush_r+0xda>
 810dc02:	bf00      	nop
 810dc04:	20400001 	.word	0x20400001

0810dc08 <_fflush_r>:
 810dc08:	b538      	push	{r3, r4, r5, lr}
 810dc0a:	690b      	ldr	r3, [r1, #16]
 810dc0c:	4605      	mov	r5, r0
 810dc0e:	460c      	mov	r4, r1
 810dc10:	b913      	cbnz	r3, 810dc18 <_fflush_r+0x10>
 810dc12:	2500      	movs	r5, #0
 810dc14:	4628      	mov	r0, r5
 810dc16:	bd38      	pop	{r3, r4, r5, pc}
 810dc18:	b118      	cbz	r0, 810dc22 <_fflush_r+0x1a>
 810dc1a:	6983      	ldr	r3, [r0, #24]
 810dc1c:	b90b      	cbnz	r3, 810dc22 <_fflush_r+0x1a>
 810dc1e:	f000 f887 	bl	810dd30 <__sinit>
 810dc22:	4b14      	ldr	r3, [pc, #80]	; (810dc74 <_fflush_r+0x6c>)
 810dc24:	429c      	cmp	r4, r3
 810dc26:	d11b      	bne.n	810dc60 <_fflush_r+0x58>
 810dc28:	686c      	ldr	r4, [r5, #4]
 810dc2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810dc2e:	2b00      	cmp	r3, #0
 810dc30:	d0ef      	beq.n	810dc12 <_fflush_r+0xa>
 810dc32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810dc34:	07d0      	lsls	r0, r2, #31
 810dc36:	d404      	bmi.n	810dc42 <_fflush_r+0x3a>
 810dc38:	0599      	lsls	r1, r3, #22
 810dc3a:	d402      	bmi.n	810dc42 <_fflush_r+0x3a>
 810dc3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810dc3e:	f000 fc88 	bl	810e552 <__retarget_lock_acquire_recursive>
 810dc42:	4628      	mov	r0, r5
 810dc44:	4621      	mov	r1, r4
 810dc46:	f7ff ff59 	bl	810dafc <__sflush_r>
 810dc4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810dc4c:	07da      	lsls	r2, r3, #31
 810dc4e:	4605      	mov	r5, r0
 810dc50:	d4e0      	bmi.n	810dc14 <_fflush_r+0xc>
 810dc52:	89a3      	ldrh	r3, [r4, #12]
 810dc54:	059b      	lsls	r3, r3, #22
 810dc56:	d4dd      	bmi.n	810dc14 <_fflush_r+0xc>
 810dc58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810dc5a:	f000 fc7b 	bl	810e554 <__retarget_lock_release_recursive>
 810dc5e:	e7d9      	b.n	810dc14 <_fflush_r+0xc>
 810dc60:	4b05      	ldr	r3, [pc, #20]	; (810dc78 <_fflush_r+0x70>)
 810dc62:	429c      	cmp	r4, r3
 810dc64:	d101      	bne.n	810dc6a <_fflush_r+0x62>
 810dc66:	68ac      	ldr	r4, [r5, #8]
 810dc68:	e7df      	b.n	810dc2a <_fflush_r+0x22>
 810dc6a:	4b04      	ldr	r3, [pc, #16]	; (810dc7c <_fflush_r+0x74>)
 810dc6c:	429c      	cmp	r4, r3
 810dc6e:	bf08      	it	eq
 810dc70:	68ec      	ldreq	r4, [r5, #12]
 810dc72:	e7da      	b.n	810dc2a <_fflush_r+0x22>
 810dc74:	0810fdac 	.word	0x0810fdac
 810dc78:	0810fdcc 	.word	0x0810fdcc
 810dc7c:	0810fd8c 	.word	0x0810fd8c

0810dc80 <std>:
 810dc80:	2300      	movs	r3, #0
 810dc82:	b510      	push	{r4, lr}
 810dc84:	4604      	mov	r4, r0
 810dc86:	e9c0 3300 	strd	r3, r3, [r0]
 810dc8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810dc8e:	6083      	str	r3, [r0, #8]
 810dc90:	8181      	strh	r1, [r0, #12]
 810dc92:	6643      	str	r3, [r0, #100]	; 0x64
 810dc94:	81c2      	strh	r2, [r0, #14]
 810dc96:	6183      	str	r3, [r0, #24]
 810dc98:	4619      	mov	r1, r3
 810dc9a:	2208      	movs	r2, #8
 810dc9c:	305c      	adds	r0, #92	; 0x5c
 810dc9e:	f7fd f91f 	bl	810aee0 <memset>
 810dca2:	4b05      	ldr	r3, [pc, #20]	; (810dcb8 <std+0x38>)
 810dca4:	6263      	str	r3, [r4, #36]	; 0x24
 810dca6:	4b05      	ldr	r3, [pc, #20]	; (810dcbc <std+0x3c>)
 810dca8:	62a3      	str	r3, [r4, #40]	; 0x28
 810dcaa:	4b05      	ldr	r3, [pc, #20]	; (810dcc0 <std+0x40>)
 810dcac:	62e3      	str	r3, [r4, #44]	; 0x2c
 810dcae:	4b05      	ldr	r3, [pc, #20]	; (810dcc4 <std+0x44>)
 810dcb0:	6224      	str	r4, [r4, #32]
 810dcb2:	6323      	str	r3, [r4, #48]	; 0x30
 810dcb4:	bd10      	pop	{r4, pc}
 810dcb6:	bf00      	nop
 810dcb8:	0810f589 	.word	0x0810f589
 810dcbc:	0810f5ab 	.word	0x0810f5ab
 810dcc0:	0810f5e3 	.word	0x0810f5e3
 810dcc4:	0810f607 	.word	0x0810f607

0810dcc8 <_cleanup_r>:
 810dcc8:	4901      	ldr	r1, [pc, #4]	; (810dcd0 <_cleanup_r+0x8>)
 810dcca:	f000 b8af 	b.w	810de2c <_fwalk_reent>
 810dcce:	bf00      	nop
 810dcd0:	0810dc09 	.word	0x0810dc09

0810dcd4 <__sfmoreglue>:
 810dcd4:	b570      	push	{r4, r5, r6, lr}
 810dcd6:	2268      	movs	r2, #104	; 0x68
 810dcd8:	1e4d      	subs	r5, r1, #1
 810dcda:	4355      	muls	r5, r2
 810dcdc:	460e      	mov	r6, r1
 810dcde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810dce2:	f7fd f971 	bl	810afc8 <_malloc_r>
 810dce6:	4604      	mov	r4, r0
 810dce8:	b140      	cbz	r0, 810dcfc <__sfmoreglue+0x28>
 810dcea:	2100      	movs	r1, #0
 810dcec:	e9c0 1600 	strd	r1, r6, [r0]
 810dcf0:	300c      	adds	r0, #12
 810dcf2:	60a0      	str	r0, [r4, #8]
 810dcf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810dcf8:	f7fd f8f2 	bl	810aee0 <memset>
 810dcfc:	4620      	mov	r0, r4
 810dcfe:	bd70      	pop	{r4, r5, r6, pc}

0810dd00 <__sfp_lock_acquire>:
 810dd00:	4801      	ldr	r0, [pc, #4]	; (810dd08 <__sfp_lock_acquire+0x8>)
 810dd02:	f000 bc26 	b.w	810e552 <__retarget_lock_acquire_recursive>
 810dd06:	bf00      	nop
 810dd08:	100004b1 	.word	0x100004b1

0810dd0c <__sfp_lock_release>:
 810dd0c:	4801      	ldr	r0, [pc, #4]	; (810dd14 <__sfp_lock_release+0x8>)
 810dd0e:	f000 bc21 	b.w	810e554 <__retarget_lock_release_recursive>
 810dd12:	bf00      	nop
 810dd14:	100004b1 	.word	0x100004b1

0810dd18 <__sinit_lock_acquire>:
 810dd18:	4801      	ldr	r0, [pc, #4]	; (810dd20 <__sinit_lock_acquire+0x8>)
 810dd1a:	f000 bc1a 	b.w	810e552 <__retarget_lock_acquire_recursive>
 810dd1e:	bf00      	nop
 810dd20:	100004b2 	.word	0x100004b2

0810dd24 <__sinit_lock_release>:
 810dd24:	4801      	ldr	r0, [pc, #4]	; (810dd2c <__sinit_lock_release+0x8>)
 810dd26:	f000 bc15 	b.w	810e554 <__retarget_lock_release_recursive>
 810dd2a:	bf00      	nop
 810dd2c:	100004b2 	.word	0x100004b2

0810dd30 <__sinit>:
 810dd30:	b510      	push	{r4, lr}
 810dd32:	4604      	mov	r4, r0
 810dd34:	f7ff fff0 	bl	810dd18 <__sinit_lock_acquire>
 810dd38:	69a3      	ldr	r3, [r4, #24]
 810dd3a:	b11b      	cbz	r3, 810dd44 <__sinit+0x14>
 810dd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810dd40:	f7ff bff0 	b.w	810dd24 <__sinit_lock_release>
 810dd44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810dd48:	6523      	str	r3, [r4, #80]	; 0x50
 810dd4a:	4b13      	ldr	r3, [pc, #76]	; (810dd98 <__sinit+0x68>)
 810dd4c:	4a13      	ldr	r2, [pc, #76]	; (810dd9c <__sinit+0x6c>)
 810dd4e:	681b      	ldr	r3, [r3, #0]
 810dd50:	62a2      	str	r2, [r4, #40]	; 0x28
 810dd52:	42a3      	cmp	r3, r4
 810dd54:	bf04      	itt	eq
 810dd56:	2301      	moveq	r3, #1
 810dd58:	61a3      	streq	r3, [r4, #24]
 810dd5a:	4620      	mov	r0, r4
 810dd5c:	f000 f820 	bl	810dda0 <__sfp>
 810dd60:	6060      	str	r0, [r4, #4]
 810dd62:	4620      	mov	r0, r4
 810dd64:	f000 f81c 	bl	810dda0 <__sfp>
 810dd68:	60a0      	str	r0, [r4, #8]
 810dd6a:	4620      	mov	r0, r4
 810dd6c:	f000 f818 	bl	810dda0 <__sfp>
 810dd70:	2200      	movs	r2, #0
 810dd72:	60e0      	str	r0, [r4, #12]
 810dd74:	2104      	movs	r1, #4
 810dd76:	6860      	ldr	r0, [r4, #4]
 810dd78:	f7ff ff82 	bl	810dc80 <std>
 810dd7c:	68a0      	ldr	r0, [r4, #8]
 810dd7e:	2201      	movs	r2, #1
 810dd80:	2109      	movs	r1, #9
 810dd82:	f7ff ff7d 	bl	810dc80 <std>
 810dd86:	68e0      	ldr	r0, [r4, #12]
 810dd88:	2202      	movs	r2, #2
 810dd8a:	2112      	movs	r1, #18
 810dd8c:	f7ff ff78 	bl	810dc80 <std>
 810dd90:	2301      	movs	r3, #1
 810dd92:	61a3      	str	r3, [r4, #24]
 810dd94:	e7d2      	b.n	810dd3c <__sinit+0xc>
 810dd96:	bf00      	nop
 810dd98:	0810fb64 	.word	0x0810fb64
 810dd9c:	0810dcc9 	.word	0x0810dcc9

0810dda0 <__sfp>:
 810dda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810dda2:	4607      	mov	r7, r0
 810dda4:	f7ff ffac 	bl	810dd00 <__sfp_lock_acquire>
 810dda8:	4b1e      	ldr	r3, [pc, #120]	; (810de24 <__sfp+0x84>)
 810ddaa:	681e      	ldr	r6, [r3, #0]
 810ddac:	69b3      	ldr	r3, [r6, #24]
 810ddae:	b913      	cbnz	r3, 810ddb6 <__sfp+0x16>
 810ddb0:	4630      	mov	r0, r6
 810ddb2:	f7ff ffbd 	bl	810dd30 <__sinit>
 810ddb6:	3648      	adds	r6, #72	; 0x48
 810ddb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810ddbc:	3b01      	subs	r3, #1
 810ddbe:	d503      	bpl.n	810ddc8 <__sfp+0x28>
 810ddc0:	6833      	ldr	r3, [r6, #0]
 810ddc2:	b30b      	cbz	r3, 810de08 <__sfp+0x68>
 810ddc4:	6836      	ldr	r6, [r6, #0]
 810ddc6:	e7f7      	b.n	810ddb8 <__sfp+0x18>
 810ddc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810ddcc:	b9d5      	cbnz	r5, 810de04 <__sfp+0x64>
 810ddce:	4b16      	ldr	r3, [pc, #88]	; (810de28 <__sfp+0x88>)
 810ddd0:	60e3      	str	r3, [r4, #12]
 810ddd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810ddd6:	6665      	str	r5, [r4, #100]	; 0x64
 810ddd8:	f000 fbba 	bl	810e550 <__retarget_lock_init_recursive>
 810dddc:	f7ff ff96 	bl	810dd0c <__sfp_lock_release>
 810dde0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810dde4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810dde8:	6025      	str	r5, [r4, #0]
 810ddea:	61a5      	str	r5, [r4, #24]
 810ddec:	2208      	movs	r2, #8
 810ddee:	4629      	mov	r1, r5
 810ddf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810ddf4:	f7fd f874 	bl	810aee0 <memset>
 810ddf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810ddfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810de00:	4620      	mov	r0, r4
 810de02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810de04:	3468      	adds	r4, #104	; 0x68
 810de06:	e7d9      	b.n	810ddbc <__sfp+0x1c>
 810de08:	2104      	movs	r1, #4
 810de0a:	4638      	mov	r0, r7
 810de0c:	f7ff ff62 	bl	810dcd4 <__sfmoreglue>
 810de10:	4604      	mov	r4, r0
 810de12:	6030      	str	r0, [r6, #0]
 810de14:	2800      	cmp	r0, #0
 810de16:	d1d5      	bne.n	810ddc4 <__sfp+0x24>
 810de18:	f7ff ff78 	bl	810dd0c <__sfp_lock_release>
 810de1c:	230c      	movs	r3, #12
 810de1e:	603b      	str	r3, [r7, #0]
 810de20:	e7ee      	b.n	810de00 <__sfp+0x60>
 810de22:	bf00      	nop
 810de24:	0810fb64 	.word	0x0810fb64
 810de28:	ffff0001 	.word	0xffff0001

0810de2c <_fwalk_reent>:
 810de2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810de30:	4606      	mov	r6, r0
 810de32:	4688      	mov	r8, r1
 810de34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810de38:	2700      	movs	r7, #0
 810de3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810de3e:	f1b9 0901 	subs.w	r9, r9, #1
 810de42:	d505      	bpl.n	810de50 <_fwalk_reent+0x24>
 810de44:	6824      	ldr	r4, [r4, #0]
 810de46:	2c00      	cmp	r4, #0
 810de48:	d1f7      	bne.n	810de3a <_fwalk_reent+0xe>
 810de4a:	4638      	mov	r0, r7
 810de4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810de50:	89ab      	ldrh	r3, [r5, #12]
 810de52:	2b01      	cmp	r3, #1
 810de54:	d907      	bls.n	810de66 <_fwalk_reent+0x3a>
 810de56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810de5a:	3301      	adds	r3, #1
 810de5c:	d003      	beq.n	810de66 <_fwalk_reent+0x3a>
 810de5e:	4629      	mov	r1, r5
 810de60:	4630      	mov	r0, r6
 810de62:	47c0      	blx	r8
 810de64:	4307      	orrs	r7, r0
 810de66:	3568      	adds	r5, #104	; 0x68
 810de68:	e7e9      	b.n	810de3e <_fwalk_reent+0x12>

0810de6a <rshift>:
 810de6a:	6903      	ldr	r3, [r0, #16]
 810de6c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810de70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810de74:	ea4f 1261 	mov.w	r2, r1, asr #5
 810de78:	f100 0414 	add.w	r4, r0, #20
 810de7c:	dd45      	ble.n	810df0a <rshift+0xa0>
 810de7e:	f011 011f 	ands.w	r1, r1, #31
 810de82:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810de86:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810de8a:	d10c      	bne.n	810dea6 <rshift+0x3c>
 810de8c:	f100 0710 	add.w	r7, r0, #16
 810de90:	4629      	mov	r1, r5
 810de92:	42b1      	cmp	r1, r6
 810de94:	d334      	bcc.n	810df00 <rshift+0x96>
 810de96:	1a9b      	subs	r3, r3, r2
 810de98:	009b      	lsls	r3, r3, #2
 810de9a:	1eea      	subs	r2, r5, #3
 810de9c:	4296      	cmp	r6, r2
 810de9e:	bf38      	it	cc
 810dea0:	2300      	movcc	r3, #0
 810dea2:	4423      	add	r3, r4
 810dea4:	e015      	b.n	810ded2 <rshift+0x68>
 810dea6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810deaa:	f1c1 0820 	rsb	r8, r1, #32
 810deae:	40cf      	lsrs	r7, r1
 810deb0:	f105 0e04 	add.w	lr, r5, #4
 810deb4:	46a1      	mov	r9, r4
 810deb6:	4576      	cmp	r6, lr
 810deb8:	46f4      	mov	ip, lr
 810deba:	d815      	bhi.n	810dee8 <rshift+0x7e>
 810debc:	1a9a      	subs	r2, r3, r2
 810debe:	0092      	lsls	r2, r2, #2
 810dec0:	3a04      	subs	r2, #4
 810dec2:	3501      	adds	r5, #1
 810dec4:	42ae      	cmp	r6, r5
 810dec6:	bf38      	it	cc
 810dec8:	2200      	movcc	r2, #0
 810deca:	18a3      	adds	r3, r4, r2
 810decc:	50a7      	str	r7, [r4, r2]
 810dece:	b107      	cbz	r7, 810ded2 <rshift+0x68>
 810ded0:	3304      	adds	r3, #4
 810ded2:	1b1a      	subs	r2, r3, r4
 810ded4:	42a3      	cmp	r3, r4
 810ded6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810deda:	bf08      	it	eq
 810dedc:	2300      	moveq	r3, #0
 810dede:	6102      	str	r2, [r0, #16]
 810dee0:	bf08      	it	eq
 810dee2:	6143      	streq	r3, [r0, #20]
 810dee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810dee8:	f8dc c000 	ldr.w	ip, [ip]
 810deec:	fa0c fc08 	lsl.w	ip, ip, r8
 810def0:	ea4c 0707 	orr.w	r7, ip, r7
 810def4:	f849 7b04 	str.w	r7, [r9], #4
 810def8:	f85e 7b04 	ldr.w	r7, [lr], #4
 810defc:	40cf      	lsrs	r7, r1
 810defe:	e7da      	b.n	810deb6 <rshift+0x4c>
 810df00:	f851 cb04 	ldr.w	ip, [r1], #4
 810df04:	f847 cf04 	str.w	ip, [r7, #4]!
 810df08:	e7c3      	b.n	810de92 <rshift+0x28>
 810df0a:	4623      	mov	r3, r4
 810df0c:	e7e1      	b.n	810ded2 <rshift+0x68>

0810df0e <__hexdig_fun>:
 810df0e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810df12:	2b09      	cmp	r3, #9
 810df14:	d802      	bhi.n	810df1c <__hexdig_fun+0xe>
 810df16:	3820      	subs	r0, #32
 810df18:	b2c0      	uxtb	r0, r0
 810df1a:	4770      	bx	lr
 810df1c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810df20:	2b05      	cmp	r3, #5
 810df22:	d801      	bhi.n	810df28 <__hexdig_fun+0x1a>
 810df24:	3847      	subs	r0, #71	; 0x47
 810df26:	e7f7      	b.n	810df18 <__hexdig_fun+0xa>
 810df28:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810df2c:	2b05      	cmp	r3, #5
 810df2e:	d801      	bhi.n	810df34 <__hexdig_fun+0x26>
 810df30:	3827      	subs	r0, #39	; 0x27
 810df32:	e7f1      	b.n	810df18 <__hexdig_fun+0xa>
 810df34:	2000      	movs	r0, #0
 810df36:	4770      	bx	lr

0810df38 <__gethex>:
 810df38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810df3c:	ed2d 8b02 	vpush	{d8}
 810df40:	b089      	sub	sp, #36	; 0x24
 810df42:	ee08 0a10 	vmov	s16, r0
 810df46:	9304      	str	r3, [sp, #16]
 810df48:	4bb4      	ldr	r3, [pc, #720]	; (810e21c <__gethex+0x2e4>)
 810df4a:	681b      	ldr	r3, [r3, #0]
 810df4c:	9301      	str	r3, [sp, #4]
 810df4e:	4618      	mov	r0, r3
 810df50:	468b      	mov	fp, r1
 810df52:	4690      	mov	r8, r2
 810df54:	f7f2 f9c4 	bl	81002e0 <strlen>
 810df58:	9b01      	ldr	r3, [sp, #4]
 810df5a:	f8db 2000 	ldr.w	r2, [fp]
 810df5e:	4403      	add	r3, r0
 810df60:	4682      	mov	sl, r0
 810df62:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810df66:	9305      	str	r3, [sp, #20]
 810df68:	1c93      	adds	r3, r2, #2
 810df6a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810df6e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810df72:	32fe      	adds	r2, #254	; 0xfe
 810df74:	18d1      	adds	r1, r2, r3
 810df76:	461f      	mov	r7, r3
 810df78:	f813 0b01 	ldrb.w	r0, [r3], #1
 810df7c:	9100      	str	r1, [sp, #0]
 810df7e:	2830      	cmp	r0, #48	; 0x30
 810df80:	d0f8      	beq.n	810df74 <__gethex+0x3c>
 810df82:	f7ff ffc4 	bl	810df0e <__hexdig_fun>
 810df86:	4604      	mov	r4, r0
 810df88:	2800      	cmp	r0, #0
 810df8a:	d13a      	bne.n	810e002 <__gethex+0xca>
 810df8c:	9901      	ldr	r1, [sp, #4]
 810df8e:	4652      	mov	r2, sl
 810df90:	4638      	mov	r0, r7
 810df92:	f001 fb3c 	bl	810f60e <strncmp>
 810df96:	4605      	mov	r5, r0
 810df98:	2800      	cmp	r0, #0
 810df9a:	d168      	bne.n	810e06e <__gethex+0x136>
 810df9c:	f817 000a 	ldrb.w	r0, [r7, sl]
 810dfa0:	eb07 060a 	add.w	r6, r7, sl
 810dfa4:	f7ff ffb3 	bl	810df0e <__hexdig_fun>
 810dfa8:	2800      	cmp	r0, #0
 810dfaa:	d062      	beq.n	810e072 <__gethex+0x13a>
 810dfac:	4633      	mov	r3, r6
 810dfae:	7818      	ldrb	r0, [r3, #0]
 810dfb0:	2830      	cmp	r0, #48	; 0x30
 810dfb2:	461f      	mov	r7, r3
 810dfb4:	f103 0301 	add.w	r3, r3, #1
 810dfb8:	d0f9      	beq.n	810dfae <__gethex+0x76>
 810dfba:	f7ff ffa8 	bl	810df0e <__hexdig_fun>
 810dfbe:	2301      	movs	r3, #1
 810dfc0:	fab0 f480 	clz	r4, r0
 810dfc4:	0964      	lsrs	r4, r4, #5
 810dfc6:	4635      	mov	r5, r6
 810dfc8:	9300      	str	r3, [sp, #0]
 810dfca:	463a      	mov	r2, r7
 810dfcc:	4616      	mov	r6, r2
 810dfce:	3201      	adds	r2, #1
 810dfd0:	7830      	ldrb	r0, [r6, #0]
 810dfd2:	f7ff ff9c 	bl	810df0e <__hexdig_fun>
 810dfd6:	2800      	cmp	r0, #0
 810dfd8:	d1f8      	bne.n	810dfcc <__gethex+0x94>
 810dfda:	9901      	ldr	r1, [sp, #4]
 810dfdc:	4652      	mov	r2, sl
 810dfde:	4630      	mov	r0, r6
 810dfe0:	f001 fb15 	bl	810f60e <strncmp>
 810dfe4:	b980      	cbnz	r0, 810e008 <__gethex+0xd0>
 810dfe6:	b94d      	cbnz	r5, 810dffc <__gethex+0xc4>
 810dfe8:	eb06 050a 	add.w	r5, r6, sl
 810dfec:	462a      	mov	r2, r5
 810dfee:	4616      	mov	r6, r2
 810dff0:	3201      	adds	r2, #1
 810dff2:	7830      	ldrb	r0, [r6, #0]
 810dff4:	f7ff ff8b 	bl	810df0e <__hexdig_fun>
 810dff8:	2800      	cmp	r0, #0
 810dffa:	d1f8      	bne.n	810dfee <__gethex+0xb6>
 810dffc:	1bad      	subs	r5, r5, r6
 810dffe:	00ad      	lsls	r5, r5, #2
 810e000:	e004      	b.n	810e00c <__gethex+0xd4>
 810e002:	2400      	movs	r4, #0
 810e004:	4625      	mov	r5, r4
 810e006:	e7e0      	b.n	810dfca <__gethex+0x92>
 810e008:	2d00      	cmp	r5, #0
 810e00a:	d1f7      	bne.n	810dffc <__gethex+0xc4>
 810e00c:	7833      	ldrb	r3, [r6, #0]
 810e00e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810e012:	2b50      	cmp	r3, #80	; 0x50
 810e014:	d13b      	bne.n	810e08e <__gethex+0x156>
 810e016:	7873      	ldrb	r3, [r6, #1]
 810e018:	2b2b      	cmp	r3, #43	; 0x2b
 810e01a:	d02c      	beq.n	810e076 <__gethex+0x13e>
 810e01c:	2b2d      	cmp	r3, #45	; 0x2d
 810e01e:	d02e      	beq.n	810e07e <__gethex+0x146>
 810e020:	1c71      	adds	r1, r6, #1
 810e022:	f04f 0900 	mov.w	r9, #0
 810e026:	7808      	ldrb	r0, [r1, #0]
 810e028:	f7ff ff71 	bl	810df0e <__hexdig_fun>
 810e02c:	1e43      	subs	r3, r0, #1
 810e02e:	b2db      	uxtb	r3, r3
 810e030:	2b18      	cmp	r3, #24
 810e032:	d82c      	bhi.n	810e08e <__gethex+0x156>
 810e034:	f1a0 0210 	sub.w	r2, r0, #16
 810e038:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810e03c:	f7ff ff67 	bl	810df0e <__hexdig_fun>
 810e040:	1e43      	subs	r3, r0, #1
 810e042:	b2db      	uxtb	r3, r3
 810e044:	2b18      	cmp	r3, #24
 810e046:	d91d      	bls.n	810e084 <__gethex+0x14c>
 810e048:	f1b9 0f00 	cmp.w	r9, #0
 810e04c:	d000      	beq.n	810e050 <__gethex+0x118>
 810e04e:	4252      	negs	r2, r2
 810e050:	4415      	add	r5, r2
 810e052:	f8cb 1000 	str.w	r1, [fp]
 810e056:	b1e4      	cbz	r4, 810e092 <__gethex+0x15a>
 810e058:	9b00      	ldr	r3, [sp, #0]
 810e05a:	2b00      	cmp	r3, #0
 810e05c:	bf14      	ite	ne
 810e05e:	2700      	movne	r7, #0
 810e060:	2706      	moveq	r7, #6
 810e062:	4638      	mov	r0, r7
 810e064:	b009      	add	sp, #36	; 0x24
 810e066:	ecbd 8b02 	vpop	{d8}
 810e06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e06e:	463e      	mov	r6, r7
 810e070:	4625      	mov	r5, r4
 810e072:	2401      	movs	r4, #1
 810e074:	e7ca      	b.n	810e00c <__gethex+0xd4>
 810e076:	f04f 0900 	mov.w	r9, #0
 810e07a:	1cb1      	adds	r1, r6, #2
 810e07c:	e7d3      	b.n	810e026 <__gethex+0xee>
 810e07e:	f04f 0901 	mov.w	r9, #1
 810e082:	e7fa      	b.n	810e07a <__gethex+0x142>
 810e084:	230a      	movs	r3, #10
 810e086:	fb03 0202 	mla	r2, r3, r2, r0
 810e08a:	3a10      	subs	r2, #16
 810e08c:	e7d4      	b.n	810e038 <__gethex+0x100>
 810e08e:	4631      	mov	r1, r6
 810e090:	e7df      	b.n	810e052 <__gethex+0x11a>
 810e092:	1bf3      	subs	r3, r6, r7
 810e094:	3b01      	subs	r3, #1
 810e096:	4621      	mov	r1, r4
 810e098:	2b07      	cmp	r3, #7
 810e09a:	dc0b      	bgt.n	810e0b4 <__gethex+0x17c>
 810e09c:	ee18 0a10 	vmov	r0, s16
 810e0a0:	f000 fadc 	bl	810e65c <_Balloc>
 810e0a4:	4604      	mov	r4, r0
 810e0a6:	b940      	cbnz	r0, 810e0ba <__gethex+0x182>
 810e0a8:	4b5d      	ldr	r3, [pc, #372]	; (810e220 <__gethex+0x2e8>)
 810e0aa:	4602      	mov	r2, r0
 810e0ac:	21de      	movs	r1, #222	; 0xde
 810e0ae:	485d      	ldr	r0, [pc, #372]	; (810e224 <__gethex+0x2ec>)
 810e0b0:	f001 fae0 	bl	810f674 <__assert_func>
 810e0b4:	3101      	adds	r1, #1
 810e0b6:	105b      	asrs	r3, r3, #1
 810e0b8:	e7ee      	b.n	810e098 <__gethex+0x160>
 810e0ba:	f100 0914 	add.w	r9, r0, #20
 810e0be:	f04f 0b00 	mov.w	fp, #0
 810e0c2:	f1ca 0301 	rsb	r3, sl, #1
 810e0c6:	f8cd 9008 	str.w	r9, [sp, #8]
 810e0ca:	f8cd b000 	str.w	fp, [sp]
 810e0ce:	9306      	str	r3, [sp, #24]
 810e0d0:	42b7      	cmp	r7, r6
 810e0d2:	d340      	bcc.n	810e156 <__gethex+0x21e>
 810e0d4:	9802      	ldr	r0, [sp, #8]
 810e0d6:	9b00      	ldr	r3, [sp, #0]
 810e0d8:	f840 3b04 	str.w	r3, [r0], #4
 810e0dc:	eba0 0009 	sub.w	r0, r0, r9
 810e0e0:	1080      	asrs	r0, r0, #2
 810e0e2:	0146      	lsls	r6, r0, #5
 810e0e4:	6120      	str	r0, [r4, #16]
 810e0e6:	4618      	mov	r0, r3
 810e0e8:	f000 fbaa 	bl	810e840 <__hi0bits>
 810e0ec:	1a30      	subs	r0, r6, r0
 810e0ee:	f8d8 6000 	ldr.w	r6, [r8]
 810e0f2:	42b0      	cmp	r0, r6
 810e0f4:	dd63      	ble.n	810e1be <__gethex+0x286>
 810e0f6:	1b87      	subs	r7, r0, r6
 810e0f8:	4639      	mov	r1, r7
 810e0fa:	4620      	mov	r0, r4
 810e0fc:	f000 ff4e 	bl	810ef9c <__any_on>
 810e100:	4682      	mov	sl, r0
 810e102:	b1a8      	cbz	r0, 810e130 <__gethex+0x1f8>
 810e104:	1e7b      	subs	r3, r7, #1
 810e106:	1159      	asrs	r1, r3, #5
 810e108:	f003 021f 	and.w	r2, r3, #31
 810e10c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810e110:	f04f 0a01 	mov.w	sl, #1
 810e114:	fa0a f202 	lsl.w	r2, sl, r2
 810e118:	420a      	tst	r2, r1
 810e11a:	d009      	beq.n	810e130 <__gethex+0x1f8>
 810e11c:	4553      	cmp	r3, sl
 810e11e:	dd05      	ble.n	810e12c <__gethex+0x1f4>
 810e120:	1eb9      	subs	r1, r7, #2
 810e122:	4620      	mov	r0, r4
 810e124:	f000 ff3a 	bl	810ef9c <__any_on>
 810e128:	2800      	cmp	r0, #0
 810e12a:	d145      	bne.n	810e1b8 <__gethex+0x280>
 810e12c:	f04f 0a02 	mov.w	sl, #2
 810e130:	4639      	mov	r1, r7
 810e132:	4620      	mov	r0, r4
 810e134:	f7ff fe99 	bl	810de6a <rshift>
 810e138:	443d      	add	r5, r7
 810e13a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810e13e:	42ab      	cmp	r3, r5
 810e140:	da4c      	bge.n	810e1dc <__gethex+0x2a4>
 810e142:	ee18 0a10 	vmov	r0, s16
 810e146:	4621      	mov	r1, r4
 810e148:	f000 fac8 	bl	810e6dc <_Bfree>
 810e14c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810e14e:	2300      	movs	r3, #0
 810e150:	6013      	str	r3, [r2, #0]
 810e152:	27a3      	movs	r7, #163	; 0xa3
 810e154:	e785      	b.n	810e062 <__gethex+0x12a>
 810e156:	1e73      	subs	r3, r6, #1
 810e158:	9a05      	ldr	r2, [sp, #20]
 810e15a:	9303      	str	r3, [sp, #12]
 810e15c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810e160:	4293      	cmp	r3, r2
 810e162:	d019      	beq.n	810e198 <__gethex+0x260>
 810e164:	f1bb 0f20 	cmp.w	fp, #32
 810e168:	d107      	bne.n	810e17a <__gethex+0x242>
 810e16a:	9b02      	ldr	r3, [sp, #8]
 810e16c:	9a00      	ldr	r2, [sp, #0]
 810e16e:	f843 2b04 	str.w	r2, [r3], #4
 810e172:	9302      	str	r3, [sp, #8]
 810e174:	2300      	movs	r3, #0
 810e176:	9300      	str	r3, [sp, #0]
 810e178:	469b      	mov	fp, r3
 810e17a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810e17e:	f7ff fec6 	bl	810df0e <__hexdig_fun>
 810e182:	9b00      	ldr	r3, [sp, #0]
 810e184:	f000 000f 	and.w	r0, r0, #15
 810e188:	fa00 f00b 	lsl.w	r0, r0, fp
 810e18c:	4303      	orrs	r3, r0
 810e18e:	9300      	str	r3, [sp, #0]
 810e190:	f10b 0b04 	add.w	fp, fp, #4
 810e194:	9b03      	ldr	r3, [sp, #12]
 810e196:	e00d      	b.n	810e1b4 <__gethex+0x27c>
 810e198:	9b03      	ldr	r3, [sp, #12]
 810e19a:	9a06      	ldr	r2, [sp, #24]
 810e19c:	4413      	add	r3, r2
 810e19e:	42bb      	cmp	r3, r7
 810e1a0:	d3e0      	bcc.n	810e164 <__gethex+0x22c>
 810e1a2:	4618      	mov	r0, r3
 810e1a4:	9901      	ldr	r1, [sp, #4]
 810e1a6:	9307      	str	r3, [sp, #28]
 810e1a8:	4652      	mov	r2, sl
 810e1aa:	f001 fa30 	bl	810f60e <strncmp>
 810e1ae:	9b07      	ldr	r3, [sp, #28]
 810e1b0:	2800      	cmp	r0, #0
 810e1b2:	d1d7      	bne.n	810e164 <__gethex+0x22c>
 810e1b4:	461e      	mov	r6, r3
 810e1b6:	e78b      	b.n	810e0d0 <__gethex+0x198>
 810e1b8:	f04f 0a03 	mov.w	sl, #3
 810e1bc:	e7b8      	b.n	810e130 <__gethex+0x1f8>
 810e1be:	da0a      	bge.n	810e1d6 <__gethex+0x29e>
 810e1c0:	1a37      	subs	r7, r6, r0
 810e1c2:	4621      	mov	r1, r4
 810e1c4:	ee18 0a10 	vmov	r0, s16
 810e1c8:	463a      	mov	r2, r7
 810e1ca:	f000 fca3 	bl	810eb14 <__lshift>
 810e1ce:	1bed      	subs	r5, r5, r7
 810e1d0:	4604      	mov	r4, r0
 810e1d2:	f100 0914 	add.w	r9, r0, #20
 810e1d6:	f04f 0a00 	mov.w	sl, #0
 810e1da:	e7ae      	b.n	810e13a <__gethex+0x202>
 810e1dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810e1e0:	42a8      	cmp	r0, r5
 810e1e2:	dd72      	ble.n	810e2ca <__gethex+0x392>
 810e1e4:	1b45      	subs	r5, r0, r5
 810e1e6:	42ae      	cmp	r6, r5
 810e1e8:	dc36      	bgt.n	810e258 <__gethex+0x320>
 810e1ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810e1ee:	2b02      	cmp	r3, #2
 810e1f0:	d02a      	beq.n	810e248 <__gethex+0x310>
 810e1f2:	2b03      	cmp	r3, #3
 810e1f4:	d02c      	beq.n	810e250 <__gethex+0x318>
 810e1f6:	2b01      	cmp	r3, #1
 810e1f8:	d11c      	bne.n	810e234 <__gethex+0x2fc>
 810e1fa:	42ae      	cmp	r6, r5
 810e1fc:	d11a      	bne.n	810e234 <__gethex+0x2fc>
 810e1fe:	2e01      	cmp	r6, #1
 810e200:	d112      	bne.n	810e228 <__gethex+0x2f0>
 810e202:	9a04      	ldr	r2, [sp, #16]
 810e204:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810e208:	6013      	str	r3, [r2, #0]
 810e20a:	2301      	movs	r3, #1
 810e20c:	6123      	str	r3, [r4, #16]
 810e20e:	f8c9 3000 	str.w	r3, [r9]
 810e212:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810e214:	2762      	movs	r7, #98	; 0x62
 810e216:	601c      	str	r4, [r3, #0]
 810e218:	e723      	b.n	810e062 <__gethex+0x12a>
 810e21a:	bf00      	nop
 810e21c:	0810fe54 	.word	0x0810fe54
 810e220:	0810fd78 	.word	0x0810fd78
 810e224:	0810fdec 	.word	0x0810fdec
 810e228:	1e71      	subs	r1, r6, #1
 810e22a:	4620      	mov	r0, r4
 810e22c:	f000 feb6 	bl	810ef9c <__any_on>
 810e230:	2800      	cmp	r0, #0
 810e232:	d1e6      	bne.n	810e202 <__gethex+0x2ca>
 810e234:	ee18 0a10 	vmov	r0, s16
 810e238:	4621      	mov	r1, r4
 810e23a:	f000 fa4f 	bl	810e6dc <_Bfree>
 810e23e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810e240:	2300      	movs	r3, #0
 810e242:	6013      	str	r3, [r2, #0]
 810e244:	2750      	movs	r7, #80	; 0x50
 810e246:	e70c      	b.n	810e062 <__gethex+0x12a>
 810e248:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810e24a:	2b00      	cmp	r3, #0
 810e24c:	d1f2      	bne.n	810e234 <__gethex+0x2fc>
 810e24e:	e7d8      	b.n	810e202 <__gethex+0x2ca>
 810e250:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810e252:	2b00      	cmp	r3, #0
 810e254:	d1d5      	bne.n	810e202 <__gethex+0x2ca>
 810e256:	e7ed      	b.n	810e234 <__gethex+0x2fc>
 810e258:	1e6f      	subs	r7, r5, #1
 810e25a:	f1ba 0f00 	cmp.w	sl, #0
 810e25e:	d131      	bne.n	810e2c4 <__gethex+0x38c>
 810e260:	b127      	cbz	r7, 810e26c <__gethex+0x334>
 810e262:	4639      	mov	r1, r7
 810e264:	4620      	mov	r0, r4
 810e266:	f000 fe99 	bl	810ef9c <__any_on>
 810e26a:	4682      	mov	sl, r0
 810e26c:	117b      	asrs	r3, r7, #5
 810e26e:	2101      	movs	r1, #1
 810e270:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810e274:	f007 071f 	and.w	r7, r7, #31
 810e278:	fa01 f707 	lsl.w	r7, r1, r7
 810e27c:	421f      	tst	r7, r3
 810e27e:	4629      	mov	r1, r5
 810e280:	4620      	mov	r0, r4
 810e282:	bf18      	it	ne
 810e284:	f04a 0a02 	orrne.w	sl, sl, #2
 810e288:	1b76      	subs	r6, r6, r5
 810e28a:	f7ff fdee 	bl	810de6a <rshift>
 810e28e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810e292:	2702      	movs	r7, #2
 810e294:	f1ba 0f00 	cmp.w	sl, #0
 810e298:	d048      	beq.n	810e32c <__gethex+0x3f4>
 810e29a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810e29e:	2b02      	cmp	r3, #2
 810e2a0:	d015      	beq.n	810e2ce <__gethex+0x396>
 810e2a2:	2b03      	cmp	r3, #3
 810e2a4:	d017      	beq.n	810e2d6 <__gethex+0x39e>
 810e2a6:	2b01      	cmp	r3, #1
 810e2a8:	d109      	bne.n	810e2be <__gethex+0x386>
 810e2aa:	f01a 0f02 	tst.w	sl, #2
 810e2ae:	d006      	beq.n	810e2be <__gethex+0x386>
 810e2b0:	f8d9 0000 	ldr.w	r0, [r9]
 810e2b4:	ea4a 0a00 	orr.w	sl, sl, r0
 810e2b8:	f01a 0f01 	tst.w	sl, #1
 810e2bc:	d10e      	bne.n	810e2dc <__gethex+0x3a4>
 810e2be:	f047 0710 	orr.w	r7, r7, #16
 810e2c2:	e033      	b.n	810e32c <__gethex+0x3f4>
 810e2c4:	f04f 0a01 	mov.w	sl, #1
 810e2c8:	e7d0      	b.n	810e26c <__gethex+0x334>
 810e2ca:	2701      	movs	r7, #1
 810e2cc:	e7e2      	b.n	810e294 <__gethex+0x35c>
 810e2ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810e2d0:	f1c3 0301 	rsb	r3, r3, #1
 810e2d4:	9315      	str	r3, [sp, #84]	; 0x54
 810e2d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810e2d8:	2b00      	cmp	r3, #0
 810e2da:	d0f0      	beq.n	810e2be <__gethex+0x386>
 810e2dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810e2e0:	f104 0314 	add.w	r3, r4, #20
 810e2e4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810e2e8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810e2ec:	f04f 0c00 	mov.w	ip, #0
 810e2f0:	4618      	mov	r0, r3
 810e2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 810e2f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 810e2fa:	d01c      	beq.n	810e336 <__gethex+0x3fe>
 810e2fc:	3201      	adds	r2, #1
 810e2fe:	6002      	str	r2, [r0, #0]
 810e300:	2f02      	cmp	r7, #2
 810e302:	f104 0314 	add.w	r3, r4, #20
 810e306:	d13f      	bne.n	810e388 <__gethex+0x450>
 810e308:	f8d8 2000 	ldr.w	r2, [r8]
 810e30c:	3a01      	subs	r2, #1
 810e30e:	42b2      	cmp	r2, r6
 810e310:	d10a      	bne.n	810e328 <__gethex+0x3f0>
 810e312:	1171      	asrs	r1, r6, #5
 810e314:	2201      	movs	r2, #1
 810e316:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810e31a:	f006 061f 	and.w	r6, r6, #31
 810e31e:	fa02 f606 	lsl.w	r6, r2, r6
 810e322:	421e      	tst	r6, r3
 810e324:	bf18      	it	ne
 810e326:	4617      	movne	r7, r2
 810e328:	f047 0720 	orr.w	r7, r7, #32
 810e32c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810e32e:	601c      	str	r4, [r3, #0]
 810e330:	9b04      	ldr	r3, [sp, #16]
 810e332:	601d      	str	r5, [r3, #0]
 810e334:	e695      	b.n	810e062 <__gethex+0x12a>
 810e336:	4299      	cmp	r1, r3
 810e338:	f843 cc04 	str.w	ip, [r3, #-4]
 810e33c:	d8d8      	bhi.n	810e2f0 <__gethex+0x3b8>
 810e33e:	68a3      	ldr	r3, [r4, #8]
 810e340:	459b      	cmp	fp, r3
 810e342:	db19      	blt.n	810e378 <__gethex+0x440>
 810e344:	6861      	ldr	r1, [r4, #4]
 810e346:	ee18 0a10 	vmov	r0, s16
 810e34a:	3101      	adds	r1, #1
 810e34c:	f000 f986 	bl	810e65c <_Balloc>
 810e350:	4681      	mov	r9, r0
 810e352:	b918      	cbnz	r0, 810e35c <__gethex+0x424>
 810e354:	4b1a      	ldr	r3, [pc, #104]	; (810e3c0 <__gethex+0x488>)
 810e356:	4602      	mov	r2, r0
 810e358:	2184      	movs	r1, #132	; 0x84
 810e35a:	e6a8      	b.n	810e0ae <__gethex+0x176>
 810e35c:	6922      	ldr	r2, [r4, #16]
 810e35e:	3202      	adds	r2, #2
 810e360:	f104 010c 	add.w	r1, r4, #12
 810e364:	0092      	lsls	r2, r2, #2
 810e366:	300c      	adds	r0, #12
 810e368:	f7fc fdac 	bl	810aec4 <memcpy>
 810e36c:	4621      	mov	r1, r4
 810e36e:	ee18 0a10 	vmov	r0, s16
 810e372:	f000 f9b3 	bl	810e6dc <_Bfree>
 810e376:	464c      	mov	r4, r9
 810e378:	6923      	ldr	r3, [r4, #16]
 810e37a:	1c5a      	adds	r2, r3, #1
 810e37c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810e380:	6122      	str	r2, [r4, #16]
 810e382:	2201      	movs	r2, #1
 810e384:	615a      	str	r2, [r3, #20]
 810e386:	e7bb      	b.n	810e300 <__gethex+0x3c8>
 810e388:	6922      	ldr	r2, [r4, #16]
 810e38a:	455a      	cmp	r2, fp
 810e38c:	dd0b      	ble.n	810e3a6 <__gethex+0x46e>
 810e38e:	2101      	movs	r1, #1
 810e390:	4620      	mov	r0, r4
 810e392:	f7ff fd6a 	bl	810de6a <rshift>
 810e396:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810e39a:	3501      	adds	r5, #1
 810e39c:	42ab      	cmp	r3, r5
 810e39e:	f6ff aed0 	blt.w	810e142 <__gethex+0x20a>
 810e3a2:	2701      	movs	r7, #1
 810e3a4:	e7c0      	b.n	810e328 <__gethex+0x3f0>
 810e3a6:	f016 061f 	ands.w	r6, r6, #31
 810e3aa:	d0fa      	beq.n	810e3a2 <__gethex+0x46a>
 810e3ac:	4453      	add	r3, sl
 810e3ae:	f1c6 0620 	rsb	r6, r6, #32
 810e3b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810e3b6:	f000 fa43 	bl	810e840 <__hi0bits>
 810e3ba:	42b0      	cmp	r0, r6
 810e3bc:	dbe7      	blt.n	810e38e <__gethex+0x456>
 810e3be:	e7f0      	b.n	810e3a2 <__gethex+0x46a>
 810e3c0:	0810fd78 	.word	0x0810fd78

0810e3c4 <L_shift>:
 810e3c4:	f1c2 0208 	rsb	r2, r2, #8
 810e3c8:	0092      	lsls	r2, r2, #2
 810e3ca:	b570      	push	{r4, r5, r6, lr}
 810e3cc:	f1c2 0620 	rsb	r6, r2, #32
 810e3d0:	6843      	ldr	r3, [r0, #4]
 810e3d2:	6804      	ldr	r4, [r0, #0]
 810e3d4:	fa03 f506 	lsl.w	r5, r3, r6
 810e3d8:	432c      	orrs	r4, r5
 810e3da:	40d3      	lsrs	r3, r2
 810e3dc:	6004      	str	r4, [r0, #0]
 810e3de:	f840 3f04 	str.w	r3, [r0, #4]!
 810e3e2:	4288      	cmp	r0, r1
 810e3e4:	d3f4      	bcc.n	810e3d0 <L_shift+0xc>
 810e3e6:	bd70      	pop	{r4, r5, r6, pc}

0810e3e8 <__match>:
 810e3e8:	b530      	push	{r4, r5, lr}
 810e3ea:	6803      	ldr	r3, [r0, #0]
 810e3ec:	3301      	adds	r3, #1
 810e3ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 810e3f2:	b914      	cbnz	r4, 810e3fa <__match+0x12>
 810e3f4:	6003      	str	r3, [r0, #0]
 810e3f6:	2001      	movs	r0, #1
 810e3f8:	bd30      	pop	{r4, r5, pc}
 810e3fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 810e3fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810e402:	2d19      	cmp	r5, #25
 810e404:	bf98      	it	ls
 810e406:	3220      	addls	r2, #32
 810e408:	42a2      	cmp	r2, r4
 810e40a:	d0f0      	beq.n	810e3ee <__match+0x6>
 810e40c:	2000      	movs	r0, #0
 810e40e:	e7f3      	b.n	810e3f8 <__match+0x10>

0810e410 <__hexnan>:
 810e410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e414:	680b      	ldr	r3, [r1, #0]
 810e416:	115e      	asrs	r6, r3, #5
 810e418:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810e41c:	f013 031f 	ands.w	r3, r3, #31
 810e420:	b087      	sub	sp, #28
 810e422:	bf18      	it	ne
 810e424:	3604      	addne	r6, #4
 810e426:	2500      	movs	r5, #0
 810e428:	1f37      	subs	r7, r6, #4
 810e42a:	4690      	mov	r8, r2
 810e42c:	6802      	ldr	r2, [r0, #0]
 810e42e:	9301      	str	r3, [sp, #4]
 810e430:	4682      	mov	sl, r0
 810e432:	f846 5c04 	str.w	r5, [r6, #-4]
 810e436:	46b9      	mov	r9, r7
 810e438:	463c      	mov	r4, r7
 810e43a:	9502      	str	r5, [sp, #8]
 810e43c:	46ab      	mov	fp, r5
 810e43e:	7851      	ldrb	r1, [r2, #1]
 810e440:	1c53      	adds	r3, r2, #1
 810e442:	9303      	str	r3, [sp, #12]
 810e444:	b341      	cbz	r1, 810e498 <__hexnan+0x88>
 810e446:	4608      	mov	r0, r1
 810e448:	9205      	str	r2, [sp, #20]
 810e44a:	9104      	str	r1, [sp, #16]
 810e44c:	f7ff fd5f 	bl	810df0e <__hexdig_fun>
 810e450:	2800      	cmp	r0, #0
 810e452:	d14f      	bne.n	810e4f4 <__hexnan+0xe4>
 810e454:	9904      	ldr	r1, [sp, #16]
 810e456:	9a05      	ldr	r2, [sp, #20]
 810e458:	2920      	cmp	r1, #32
 810e45a:	d818      	bhi.n	810e48e <__hexnan+0x7e>
 810e45c:	9b02      	ldr	r3, [sp, #8]
 810e45e:	459b      	cmp	fp, r3
 810e460:	dd13      	ble.n	810e48a <__hexnan+0x7a>
 810e462:	454c      	cmp	r4, r9
 810e464:	d206      	bcs.n	810e474 <__hexnan+0x64>
 810e466:	2d07      	cmp	r5, #7
 810e468:	dc04      	bgt.n	810e474 <__hexnan+0x64>
 810e46a:	462a      	mov	r2, r5
 810e46c:	4649      	mov	r1, r9
 810e46e:	4620      	mov	r0, r4
 810e470:	f7ff ffa8 	bl	810e3c4 <L_shift>
 810e474:	4544      	cmp	r4, r8
 810e476:	d950      	bls.n	810e51a <__hexnan+0x10a>
 810e478:	2300      	movs	r3, #0
 810e47a:	f1a4 0904 	sub.w	r9, r4, #4
 810e47e:	f844 3c04 	str.w	r3, [r4, #-4]
 810e482:	f8cd b008 	str.w	fp, [sp, #8]
 810e486:	464c      	mov	r4, r9
 810e488:	461d      	mov	r5, r3
 810e48a:	9a03      	ldr	r2, [sp, #12]
 810e48c:	e7d7      	b.n	810e43e <__hexnan+0x2e>
 810e48e:	2929      	cmp	r1, #41	; 0x29
 810e490:	d156      	bne.n	810e540 <__hexnan+0x130>
 810e492:	3202      	adds	r2, #2
 810e494:	f8ca 2000 	str.w	r2, [sl]
 810e498:	f1bb 0f00 	cmp.w	fp, #0
 810e49c:	d050      	beq.n	810e540 <__hexnan+0x130>
 810e49e:	454c      	cmp	r4, r9
 810e4a0:	d206      	bcs.n	810e4b0 <__hexnan+0xa0>
 810e4a2:	2d07      	cmp	r5, #7
 810e4a4:	dc04      	bgt.n	810e4b0 <__hexnan+0xa0>
 810e4a6:	462a      	mov	r2, r5
 810e4a8:	4649      	mov	r1, r9
 810e4aa:	4620      	mov	r0, r4
 810e4ac:	f7ff ff8a 	bl	810e3c4 <L_shift>
 810e4b0:	4544      	cmp	r4, r8
 810e4b2:	d934      	bls.n	810e51e <__hexnan+0x10e>
 810e4b4:	f1a8 0204 	sub.w	r2, r8, #4
 810e4b8:	4623      	mov	r3, r4
 810e4ba:	f853 1b04 	ldr.w	r1, [r3], #4
 810e4be:	f842 1f04 	str.w	r1, [r2, #4]!
 810e4c2:	429f      	cmp	r7, r3
 810e4c4:	d2f9      	bcs.n	810e4ba <__hexnan+0xaa>
 810e4c6:	1b3b      	subs	r3, r7, r4
 810e4c8:	f023 0303 	bic.w	r3, r3, #3
 810e4cc:	3304      	adds	r3, #4
 810e4ce:	3401      	adds	r4, #1
 810e4d0:	3e03      	subs	r6, #3
 810e4d2:	42b4      	cmp	r4, r6
 810e4d4:	bf88      	it	hi
 810e4d6:	2304      	movhi	r3, #4
 810e4d8:	4443      	add	r3, r8
 810e4da:	2200      	movs	r2, #0
 810e4dc:	f843 2b04 	str.w	r2, [r3], #4
 810e4e0:	429f      	cmp	r7, r3
 810e4e2:	d2fb      	bcs.n	810e4dc <__hexnan+0xcc>
 810e4e4:	683b      	ldr	r3, [r7, #0]
 810e4e6:	b91b      	cbnz	r3, 810e4f0 <__hexnan+0xe0>
 810e4e8:	4547      	cmp	r7, r8
 810e4ea:	d127      	bne.n	810e53c <__hexnan+0x12c>
 810e4ec:	2301      	movs	r3, #1
 810e4ee:	603b      	str	r3, [r7, #0]
 810e4f0:	2005      	movs	r0, #5
 810e4f2:	e026      	b.n	810e542 <__hexnan+0x132>
 810e4f4:	3501      	adds	r5, #1
 810e4f6:	2d08      	cmp	r5, #8
 810e4f8:	f10b 0b01 	add.w	fp, fp, #1
 810e4fc:	dd06      	ble.n	810e50c <__hexnan+0xfc>
 810e4fe:	4544      	cmp	r4, r8
 810e500:	d9c3      	bls.n	810e48a <__hexnan+0x7a>
 810e502:	2300      	movs	r3, #0
 810e504:	f844 3c04 	str.w	r3, [r4, #-4]
 810e508:	2501      	movs	r5, #1
 810e50a:	3c04      	subs	r4, #4
 810e50c:	6822      	ldr	r2, [r4, #0]
 810e50e:	f000 000f 	and.w	r0, r0, #15
 810e512:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810e516:	6022      	str	r2, [r4, #0]
 810e518:	e7b7      	b.n	810e48a <__hexnan+0x7a>
 810e51a:	2508      	movs	r5, #8
 810e51c:	e7b5      	b.n	810e48a <__hexnan+0x7a>
 810e51e:	9b01      	ldr	r3, [sp, #4]
 810e520:	2b00      	cmp	r3, #0
 810e522:	d0df      	beq.n	810e4e4 <__hexnan+0xd4>
 810e524:	f04f 32ff 	mov.w	r2, #4294967295
 810e528:	f1c3 0320 	rsb	r3, r3, #32
 810e52c:	fa22 f303 	lsr.w	r3, r2, r3
 810e530:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810e534:	401a      	ands	r2, r3
 810e536:	f846 2c04 	str.w	r2, [r6, #-4]
 810e53a:	e7d3      	b.n	810e4e4 <__hexnan+0xd4>
 810e53c:	3f04      	subs	r7, #4
 810e53e:	e7d1      	b.n	810e4e4 <__hexnan+0xd4>
 810e540:	2004      	movs	r0, #4
 810e542:	b007      	add	sp, #28
 810e544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810e548 <_localeconv_r>:
 810e548:	4800      	ldr	r0, [pc, #0]	; (810e54c <_localeconv_r+0x4>)
 810e54a:	4770      	bx	lr
 810e54c:	10000178 	.word	0x10000178

0810e550 <__retarget_lock_init_recursive>:
 810e550:	4770      	bx	lr

0810e552 <__retarget_lock_acquire_recursive>:
 810e552:	4770      	bx	lr

0810e554 <__retarget_lock_release_recursive>:
 810e554:	4770      	bx	lr

0810e556 <__swhatbuf_r>:
 810e556:	b570      	push	{r4, r5, r6, lr}
 810e558:	460e      	mov	r6, r1
 810e55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e55e:	2900      	cmp	r1, #0
 810e560:	b096      	sub	sp, #88	; 0x58
 810e562:	4614      	mov	r4, r2
 810e564:	461d      	mov	r5, r3
 810e566:	da08      	bge.n	810e57a <__swhatbuf_r+0x24>
 810e568:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810e56c:	2200      	movs	r2, #0
 810e56e:	602a      	str	r2, [r5, #0]
 810e570:	061a      	lsls	r2, r3, #24
 810e572:	d410      	bmi.n	810e596 <__swhatbuf_r+0x40>
 810e574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810e578:	e00e      	b.n	810e598 <__swhatbuf_r+0x42>
 810e57a:	466a      	mov	r2, sp
 810e57c:	f001 f8ba 	bl	810f6f4 <_fstat_r>
 810e580:	2800      	cmp	r0, #0
 810e582:	dbf1      	blt.n	810e568 <__swhatbuf_r+0x12>
 810e584:	9a01      	ldr	r2, [sp, #4]
 810e586:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810e58a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810e58e:	425a      	negs	r2, r3
 810e590:	415a      	adcs	r2, r3
 810e592:	602a      	str	r2, [r5, #0]
 810e594:	e7ee      	b.n	810e574 <__swhatbuf_r+0x1e>
 810e596:	2340      	movs	r3, #64	; 0x40
 810e598:	2000      	movs	r0, #0
 810e59a:	6023      	str	r3, [r4, #0]
 810e59c:	b016      	add	sp, #88	; 0x58
 810e59e:	bd70      	pop	{r4, r5, r6, pc}

0810e5a0 <__smakebuf_r>:
 810e5a0:	898b      	ldrh	r3, [r1, #12]
 810e5a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810e5a4:	079d      	lsls	r5, r3, #30
 810e5a6:	4606      	mov	r6, r0
 810e5a8:	460c      	mov	r4, r1
 810e5aa:	d507      	bpl.n	810e5bc <__smakebuf_r+0x1c>
 810e5ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810e5b0:	6023      	str	r3, [r4, #0]
 810e5b2:	6123      	str	r3, [r4, #16]
 810e5b4:	2301      	movs	r3, #1
 810e5b6:	6163      	str	r3, [r4, #20]
 810e5b8:	b002      	add	sp, #8
 810e5ba:	bd70      	pop	{r4, r5, r6, pc}
 810e5bc:	ab01      	add	r3, sp, #4
 810e5be:	466a      	mov	r2, sp
 810e5c0:	f7ff ffc9 	bl	810e556 <__swhatbuf_r>
 810e5c4:	9900      	ldr	r1, [sp, #0]
 810e5c6:	4605      	mov	r5, r0
 810e5c8:	4630      	mov	r0, r6
 810e5ca:	f7fc fcfd 	bl	810afc8 <_malloc_r>
 810e5ce:	b948      	cbnz	r0, 810e5e4 <__smakebuf_r+0x44>
 810e5d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e5d4:	059a      	lsls	r2, r3, #22
 810e5d6:	d4ef      	bmi.n	810e5b8 <__smakebuf_r+0x18>
 810e5d8:	f023 0303 	bic.w	r3, r3, #3
 810e5dc:	f043 0302 	orr.w	r3, r3, #2
 810e5e0:	81a3      	strh	r3, [r4, #12]
 810e5e2:	e7e3      	b.n	810e5ac <__smakebuf_r+0xc>
 810e5e4:	4b0d      	ldr	r3, [pc, #52]	; (810e61c <__smakebuf_r+0x7c>)
 810e5e6:	62b3      	str	r3, [r6, #40]	; 0x28
 810e5e8:	89a3      	ldrh	r3, [r4, #12]
 810e5ea:	6020      	str	r0, [r4, #0]
 810e5ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810e5f0:	81a3      	strh	r3, [r4, #12]
 810e5f2:	9b00      	ldr	r3, [sp, #0]
 810e5f4:	6163      	str	r3, [r4, #20]
 810e5f6:	9b01      	ldr	r3, [sp, #4]
 810e5f8:	6120      	str	r0, [r4, #16]
 810e5fa:	b15b      	cbz	r3, 810e614 <__smakebuf_r+0x74>
 810e5fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810e600:	4630      	mov	r0, r6
 810e602:	f001 f889 	bl	810f718 <_isatty_r>
 810e606:	b128      	cbz	r0, 810e614 <__smakebuf_r+0x74>
 810e608:	89a3      	ldrh	r3, [r4, #12]
 810e60a:	f023 0303 	bic.w	r3, r3, #3
 810e60e:	f043 0301 	orr.w	r3, r3, #1
 810e612:	81a3      	strh	r3, [r4, #12]
 810e614:	89a0      	ldrh	r0, [r4, #12]
 810e616:	4305      	orrs	r5, r0
 810e618:	81a5      	strh	r5, [r4, #12]
 810e61a:	e7cd      	b.n	810e5b8 <__smakebuf_r+0x18>
 810e61c:	0810dcc9 	.word	0x0810dcc9

0810e620 <__ascii_mbtowc>:
 810e620:	b082      	sub	sp, #8
 810e622:	b901      	cbnz	r1, 810e626 <__ascii_mbtowc+0x6>
 810e624:	a901      	add	r1, sp, #4
 810e626:	b142      	cbz	r2, 810e63a <__ascii_mbtowc+0x1a>
 810e628:	b14b      	cbz	r3, 810e63e <__ascii_mbtowc+0x1e>
 810e62a:	7813      	ldrb	r3, [r2, #0]
 810e62c:	600b      	str	r3, [r1, #0]
 810e62e:	7812      	ldrb	r2, [r2, #0]
 810e630:	1e10      	subs	r0, r2, #0
 810e632:	bf18      	it	ne
 810e634:	2001      	movne	r0, #1
 810e636:	b002      	add	sp, #8
 810e638:	4770      	bx	lr
 810e63a:	4610      	mov	r0, r2
 810e63c:	e7fb      	b.n	810e636 <__ascii_mbtowc+0x16>
 810e63e:	f06f 0001 	mvn.w	r0, #1
 810e642:	e7f8      	b.n	810e636 <__ascii_mbtowc+0x16>

0810e644 <__malloc_lock>:
 810e644:	4801      	ldr	r0, [pc, #4]	; (810e64c <__malloc_lock+0x8>)
 810e646:	f7ff bf84 	b.w	810e552 <__retarget_lock_acquire_recursive>
 810e64a:	bf00      	nop
 810e64c:	100004b0 	.word	0x100004b0

0810e650 <__malloc_unlock>:
 810e650:	4801      	ldr	r0, [pc, #4]	; (810e658 <__malloc_unlock+0x8>)
 810e652:	f7ff bf7f 	b.w	810e554 <__retarget_lock_release_recursive>
 810e656:	bf00      	nop
 810e658:	100004b0 	.word	0x100004b0

0810e65c <_Balloc>:
 810e65c:	b570      	push	{r4, r5, r6, lr}
 810e65e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810e660:	4604      	mov	r4, r0
 810e662:	460d      	mov	r5, r1
 810e664:	b976      	cbnz	r6, 810e684 <_Balloc+0x28>
 810e666:	2010      	movs	r0, #16
 810e668:	f7fc fc24 	bl	810aeb4 <malloc>
 810e66c:	4602      	mov	r2, r0
 810e66e:	6260      	str	r0, [r4, #36]	; 0x24
 810e670:	b920      	cbnz	r0, 810e67c <_Balloc+0x20>
 810e672:	4b18      	ldr	r3, [pc, #96]	; (810e6d4 <_Balloc+0x78>)
 810e674:	4818      	ldr	r0, [pc, #96]	; (810e6d8 <_Balloc+0x7c>)
 810e676:	2166      	movs	r1, #102	; 0x66
 810e678:	f000 fffc 	bl	810f674 <__assert_func>
 810e67c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810e680:	6006      	str	r6, [r0, #0]
 810e682:	60c6      	str	r6, [r0, #12]
 810e684:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810e686:	68f3      	ldr	r3, [r6, #12]
 810e688:	b183      	cbz	r3, 810e6ac <_Balloc+0x50>
 810e68a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810e68c:	68db      	ldr	r3, [r3, #12]
 810e68e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810e692:	b9b8      	cbnz	r0, 810e6c4 <_Balloc+0x68>
 810e694:	2101      	movs	r1, #1
 810e696:	fa01 f605 	lsl.w	r6, r1, r5
 810e69a:	1d72      	adds	r2, r6, #5
 810e69c:	0092      	lsls	r2, r2, #2
 810e69e:	4620      	mov	r0, r4
 810e6a0:	f000 fc9d 	bl	810efde <_calloc_r>
 810e6a4:	b160      	cbz	r0, 810e6c0 <_Balloc+0x64>
 810e6a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810e6aa:	e00e      	b.n	810e6ca <_Balloc+0x6e>
 810e6ac:	2221      	movs	r2, #33	; 0x21
 810e6ae:	2104      	movs	r1, #4
 810e6b0:	4620      	mov	r0, r4
 810e6b2:	f000 fc94 	bl	810efde <_calloc_r>
 810e6b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810e6b8:	60f0      	str	r0, [r6, #12]
 810e6ba:	68db      	ldr	r3, [r3, #12]
 810e6bc:	2b00      	cmp	r3, #0
 810e6be:	d1e4      	bne.n	810e68a <_Balloc+0x2e>
 810e6c0:	2000      	movs	r0, #0
 810e6c2:	bd70      	pop	{r4, r5, r6, pc}
 810e6c4:	6802      	ldr	r2, [r0, #0]
 810e6c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810e6ca:	2300      	movs	r3, #0
 810e6cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810e6d0:	e7f7      	b.n	810e6c2 <_Balloc+0x66>
 810e6d2:	bf00      	nop
 810e6d4:	0810fd06 	.word	0x0810fd06
 810e6d8:	0810fe68 	.word	0x0810fe68

0810e6dc <_Bfree>:
 810e6dc:	b570      	push	{r4, r5, r6, lr}
 810e6de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810e6e0:	4605      	mov	r5, r0
 810e6e2:	460c      	mov	r4, r1
 810e6e4:	b976      	cbnz	r6, 810e704 <_Bfree+0x28>
 810e6e6:	2010      	movs	r0, #16
 810e6e8:	f7fc fbe4 	bl	810aeb4 <malloc>
 810e6ec:	4602      	mov	r2, r0
 810e6ee:	6268      	str	r0, [r5, #36]	; 0x24
 810e6f0:	b920      	cbnz	r0, 810e6fc <_Bfree+0x20>
 810e6f2:	4b09      	ldr	r3, [pc, #36]	; (810e718 <_Bfree+0x3c>)
 810e6f4:	4809      	ldr	r0, [pc, #36]	; (810e71c <_Bfree+0x40>)
 810e6f6:	218a      	movs	r1, #138	; 0x8a
 810e6f8:	f000 ffbc 	bl	810f674 <__assert_func>
 810e6fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810e700:	6006      	str	r6, [r0, #0]
 810e702:	60c6      	str	r6, [r0, #12]
 810e704:	b13c      	cbz	r4, 810e716 <_Bfree+0x3a>
 810e706:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810e708:	6862      	ldr	r2, [r4, #4]
 810e70a:	68db      	ldr	r3, [r3, #12]
 810e70c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810e710:	6021      	str	r1, [r4, #0]
 810e712:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810e716:	bd70      	pop	{r4, r5, r6, pc}
 810e718:	0810fd06 	.word	0x0810fd06
 810e71c:	0810fe68 	.word	0x0810fe68

0810e720 <__multadd>:
 810e720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e724:	690d      	ldr	r5, [r1, #16]
 810e726:	4607      	mov	r7, r0
 810e728:	460c      	mov	r4, r1
 810e72a:	461e      	mov	r6, r3
 810e72c:	f101 0c14 	add.w	ip, r1, #20
 810e730:	2000      	movs	r0, #0
 810e732:	f8dc 3000 	ldr.w	r3, [ip]
 810e736:	b299      	uxth	r1, r3
 810e738:	fb02 6101 	mla	r1, r2, r1, r6
 810e73c:	0c1e      	lsrs	r6, r3, #16
 810e73e:	0c0b      	lsrs	r3, r1, #16
 810e740:	fb02 3306 	mla	r3, r2, r6, r3
 810e744:	b289      	uxth	r1, r1
 810e746:	3001      	adds	r0, #1
 810e748:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810e74c:	4285      	cmp	r5, r0
 810e74e:	f84c 1b04 	str.w	r1, [ip], #4
 810e752:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810e756:	dcec      	bgt.n	810e732 <__multadd+0x12>
 810e758:	b30e      	cbz	r6, 810e79e <__multadd+0x7e>
 810e75a:	68a3      	ldr	r3, [r4, #8]
 810e75c:	42ab      	cmp	r3, r5
 810e75e:	dc19      	bgt.n	810e794 <__multadd+0x74>
 810e760:	6861      	ldr	r1, [r4, #4]
 810e762:	4638      	mov	r0, r7
 810e764:	3101      	adds	r1, #1
 810e766:	f7ff ff79 	bl	810e65c <_Balloc>
 810e76a:	4680      	mov	r8, r0
 810e76c:	b928      	cbnz	r0, 810e77a <__multadd+0x5a>
 810e76e:	4602      	mov	r2, r0
 810e770:	4b0c      	ldr	r3, [pc, #48]	; (810e7a4 <__multadd+0x84>)
 810e772:	480d      	ldr	r0, [pc, #52]	; (810e7a8 <__multadd+0x88>)
 810e774:	21b5      	movs	r1, #181	; 0xb5
 810e776:	f000 ff7d 	bl	810f674 <__assert_func>
 810e77a:	6922      	ldr	r2, [r4, #16]
 810e77c:	3202      	adds	r2, #2
 810e77e:	f104 010c 	add.w	r1, r4, #12
 810e782:	0092      	lsls	r2, r2, #2
 810e784:	300c      	adds	r0, #12
 810e786:	f7fc fb9d 	bl	810aec4 <memcpy>
 810e78a:	4621      	mov	r1, r4
 810e78c:	4638      	mov	r0, r7
 810e78e:	f7ff ffa5 	bl	810e6dc <_Bfree>
 810e792:	4644      	mov	r4, r8
 810e794:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810e798:	3501      	adds	r5, #1
 810e79a:	615e      	str	r6, [r3, #20]
 810e79c:	6125      	str	r5, [r4, #16]
 810e79e:	4620      	mov	r0, r4
 810e7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e7a4:	0810fd78 	.word	0x0810fd78
 810e7a8:	0810fe68 	.word	0x0810fe68

0810e7ac <__s2b>:
 810e7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e7b0:	460c      	mov	r4, r1
 810e7b2:	4615      	mov	r5, r2
 810e7b4:	461f      	mov	r7, r3
 810e7b6:	2209      	movs	r2, #9
 810e7b8:	3308      	adds	r3, #8
 810e7ba:	4606      	mov	r6, r0
 810e7bc:	fb93 f3f2 	sdiv	r3, r3, r2
 810e7c0:	2100      	movs	r1, #0
 810e7c2:	2201      	movs	r2, #1
 810e7c4:	429a      	cmp	r2, r3
 810e7c6:	db09      	blt.n	810e7dc <__s2b+0x30>
 810e7c8:	4630      	mov	r0, r6
 810e7ca:	f7ff ff47 	bl	810e65c <_Balloc>
 810e7ce:	b940      	cbnz	r0, 810e7e2 <__s2b+0x36>
 810e7d0:	4602      	mov	r2, r0
 810e7d2:	4b19      	ldr	r3, [pc, #100]	; (810e838 <__s2b+0x8c>)
 810e7d4:	4819      	ldr	r0, [pc, #100]	; (810e83c <__s2b+0x90>)
 810e7d6:	21ce      	movs	r1, #206	; 0xce
 810e7d8:	f000 ff4c 	bl	810f674 <__assert_func>
 810e7dc:	0052      	lsls	r2, r2, #1
 810e7de:	3101      	adds	r1, #1
 810e7e0:	e7f0      	b.n	810e7c4 <__s2b+0x18>
 810e7e2:	9b08      	ldr	r3, [sp, #32]
 810e7e4:	6143      	str	r3, [r0, #20]
 810e7e6:	2d09      	cmp	r5, #9
 810e7e8:	f04f 0301 	mov.w	r3, #1
 810e7ec:	6103      	str	r3, [r0, #16]
 810e7ee:	dd16      	ble.n	810e81e <__s2b+0x72>
 810e7f0:	f104 0909 	add.w	r9, r4, #9
 810e7f4:	46c8      	mov	r8, r9
 810e7f6:	442c      	add	r4, r5
 810e7f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 810e7fc:	4601      	mov	r1, r0
 810e7fe:	3b30      	subs	r3, #48	; 0x30
 810e800:	220a      	movs	r2, #10
 810e802:	4630      	mov	r0, r6
 810e804:	f7ff ff8c 	bl	810e720 <__multadd>
 810e808:	45a0      	cmp	r8, r4
 810e80a:	d1f5      	bne.n	810e7f8 <__s2b+0x4c>
 810e80c:	f1a5 0408 	sub.w	r4, r5, #8
 810e810:	444c      	add	r4, r9
 810e812:	1b2d      	subs	r5, r5, r4
 810e814:	1963      	adds	r3, r4, r5
 810e816:	42bb      	cmp	r3, r7
 810e818:	db04      	blt.n	810e824 <__s2b+0x78>
 810e81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e81e:	340a      	adds	r4, #10
 810e820:	2509      	movs	r5, #9
 810e822:	e7f6      	b.n	810e812 <__s2b+0x66>
 810e824:	f814 3b01 	ldrb.w	r3, [r4], #1
 810e828:	4601      	mov	r1, r0
 810e82a:	3b30      	subs	r3, #48	; 0x30
 810e82c:	220a      	movs	r2, #10
 810e82e:	4630      	mov	r0, r6
 810e830:	f7ff ff76 	bl	810e720 <__multadd>
 810e834:	e7ee      	b.n	810e814 <__s2b+0x68>
 810e836:	bf00      	nop
 810e838:	0810fd78 	.word	0x0810fd78
 810e83c:	0810fe68 	.word	0x0810fe68

0810e840 <__hi0bits>:
 810e840:	0c03      	lsrs	r3, r0, #16
 810e842:	041b      	lsls	r3, r3, #16
 810e844:	b9d3      	cbnz	r3, 810e87c <__hi0bits+0x3c>
 810e846:	0400      	lsls	r0, r0, #16
 810e848:	2310      	movs	r3, #16
 810e84a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810e84e:	bf04      	itt	eq
 810e850:	0200      	lsleq	r0, r0, #8
 810e852:	3308      	addeq	r3, #8
 810e854:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810e858:	bf04      	itt	eq
 810e85a:	0100      	lsleq	r0, r0, #4
 810e85c:	3304      	addeq	r3, #4
 810e85e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810e862:	bf04      	itt	eq
 810e864:	0080      	lsleq	r0, r0, #2
 810e866:	3302      	addeq	r3, #2
 810e868:	2800      	cmp	r0, #0
 810e86a:	db05      	blt.n	810e878 <__hi0bits+0x38>
 810e86c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810e870:	f103 0301 	add.w	r3, r3, #1
 810e874:	bf08      	it	eq
 810e876:	2320      	moveq	r3, #32
 810e878:	4618      	mov	r0, r3
 810e87a:	4770      	bx	lr
 810e87c:	2300      	movs	r3, #0
 810e87e:	e7e4      	b.n	810e84a <__hi0bits+0xa>

0810e880 <__lo0bits>:
 810e880:	6803      	ldr	r3, [r0, #0]
 810e882:	f013 0207 	ands.w	r2, r3, #7
 810e886:	4601      	mov	r1, r0
 810e888:	d00b      	beq.n	810e8a2 <__lo0bits+0x22>
 810e88a:	07da      	lsls	r2, r3, #31
 810e88c:	d423      	bmi.n	810e8d6 <__lo0bits+0x56>
 810e88e:	0798      	lsls	r0, r3, #30
 810e890:	bf49      	itett	mi
 810e892:	085b      	lsrmi	r3, r3, #1
 810e894:	089b      	lsrpl	r3, r3, #2
 810e896:	2001      	movmi	r0, #1
 810e898:	600b      	strmi	r3, [r1, #0]
 810e89a:	bf5c      	itt	pl
 810e89c:	600b      	strpl	r3, [r1, #0]
 810e89e:	2002      	movpl	r0, #2
 810e8a0:	4770      	bx	lr
 810e8a2:	b298      	uxth	r0, r3
 810e8a4:	b9a8      	cbnz	r0, 810e8d2 <__lo0bits+0x52>
 810e8a6:	0c1b      	lsrs	r3, r3, #16
 810e8a8:	2010      	movs	r0, #16
 810e8aa:	b2da      	uxtb	r2, r3
 810e8ac:	b90a      	cbnz	r2, 810e8b2 <__lo0bits+0x32>
 810e8ae:	3008      	adds	r0, #8
 810e8b0:	0a1b      	lsrs	r3, r3, #8
 810e8b2:	071a      	lsls	r2, r3, #28
 810e8b4:	bf04      	itt	eq
 810e8b6:	091b      	lsreq	r3, r3, #4
 810e8b8:	3004      	addeq	r0, #4
 810e8ba:	079a      	lsls	r2, r3, #30
 810e8bc:	bf04      	itt	eq
 810e8be:	089b      	lsreq	r3, r3, #2
 810e8c0:	3002      	addeq	r0, #2
 810e8c2:	07da      	lsls	r2, r3, #31
 810e8c4:	d403      	bmi.n	810e8ce <__lo0bits+0x4e>
 810e8c6:	085b      	lsrs	r3, r3, #1
 810e8c8:	f100 0001 	add.w	r0, r0, #1
 810e8cc:	d005      	beq.n	810e8da <__lo0bits+0x5a>
 810e8ce:	600b      	str	r3, [r1, #0]
 810e8d0:	4770      	bx	lr
 810e8d2:	4610      	mov	r0, r2
 810e8d4:	e7e9      	b.n	810e8aa <__lo0bits+0x2a>
 810e8d6:	2000      	movs	r0, #0
 810e8d8:	4770      	bx	lr
 810e8da:	2020      	movs	r0, #32
 810e8dc:	4770      	bx	lr
	...

0810e8e0 <__i2b>:
 810e8e0:	b510      	push	{r4, lr}
 810e8e2:	460c      	mov	r4, r1
 810e8e4:	2101      	movs	r1, #1
 810e8e6:	f7ff feb9 	bl	810e65c <_Balloc>
 810e8ea:	4602      	mov	r2, r0
 810e8ec:	b928      	cbnz	r0, 810e8fa <__i2b+0x1a>
 810e8ee:	4b05      	ldr	r3, [pc, #20]	; (810e904 <__i2b+0x24>)
 810e8f0:	4805      	ldr	r0, [pc, #20]	; (810e908 <__i2b+0x28>)
 810e8f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810e8f6:	f000 febd 	bl	810f674 <__assert_func>
 810e8fa:	2301      	movs	r3, #1
 810e8fc:	6144      	str	r4, [r0, #20]
 810e8fe:	6103      	str	r3, [r0, #16]
 810e900:	bd10      	pop	{r4, pc}
 810e902:	bf00      	nop
 810e904:	0810fd78 	.word	0x0810fd78
 810e908:	0810fe68 	.word	0x0810fe68

0810e90c <__multiply>:
 810e90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e910:	4691      	mov	r9, r2
 810e912:	690a      	ldr	r2, [r1, #16]
 810e914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810e918:	429a      	cmp	r2, r3
 810e91a:	bfb8      	it	lt
 810e91c:	460b      	movlt	r3, r1
 810e91e:	460c      	mov	r4, r1
 810e920:	bfbc      	itt	lt
 810e922:	464c      	movlt	r4, r9
 810e924:	4699      	movlt	r9, r3
 810e926:	6927      	ldr	r7, [r4, #16]
 810e928:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810e92c:	68a3      	ldr	r3, [r4, #8]
 810e92e:	6861      	ldr	r1, [r4, #4]
 810e930:	eb07 060a 	add.w	r6, r7, sl
 810e934:	42b3      	cmp	r3, r6
 810e936:	b085      	sub	sp, #20
 810e938:	bfb8      	it	lt
 810e93a:	3101      	addlt	r1, #1
 810e93c:	f7ff fe8e 	bl	810e65c <_Balloc>
 810e940:	b930      	cbnz	r0, 810e950 <__multiply+0x44>
 810e942:	4602      	mov	r2, r0
 810e944:	4b44      	ldr	r3, [pc, #272]	; (810ea58 <__multiply+0x14c>)
 810e946:	4845      	ldr	r0, [pc, #276]	; (810ea5c <__multiply+0x150>)
 810e948:	f240 115d 	movw	r1, #349	; 0x15d
 810e94c:	f000 fe92 	bl	810f674 <__assert_func>
 810e950:	f100 0514 	add.w	r5, r0, #20
 810e954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810e958:	462b      	mov	r3, r5
 810e95a:	2200      	movs	r2, #0
 810e95c:	4543      	cmp	r3, r8
 810e95e:	d321      	bcc.n	810e9a4 <__multiply+0x98>
 810e960:	f104 0314 	add.w	r3, r4, #20
 810e964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810e968:	f109 0314 	add.w	r3, r9, #20
 810e96c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810e970:	9202      	str	r2, [sp, #8]
 810e972:	1b3a      	subs	r2, r7, r4
 810e974:	3a15      	subs	r2, #21
 810e976:	f022 0203 	bic.w	r2, r2, #3
 810e97a:	3204      	adds	r2, #4
 810e97c:	f104 0115 	add.w	r1, r4, #21
 810e980:	428f      	cmp	r7, r1
 810e982:	bf38      	it	cc
 810e984:	2204      	movcc	r2, #4
 810e986:	9201      	str	r2, [sp, #4]
 810e988:	9a02      	ldr	r2, [sp, #8]
 810e98a:	9303      	str	r3, [sp, #12]
 810e98c:	429a      	cmp	r2, r3
 810e98e:	d80c      	bhi.n	810e9aa <__multiply+0x9e>
 810e990:	2e00      	cmp	r6, #0
 810e992:	dd03      	ble.n	810e99c <__multiply+0x90>
 810e994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810e998:	2b00      	cmp	r3, #0
 810e99a:	d05a      	beq.n	810ea52 <__multiply+0x146>
 810e99c:	6106      	str	r6, [r0, #16]
 810e99e:	b005      	add	sp, #20
 810e9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e9a4:	f843 2b04 	str.w	r2, [r3], #4
 810e9a8:	e7d8      	b.n	810e95c <__multiply+0x50>
 810e9aa:	f8b3 a000 	ldrh.w	sl, [r3]
 810e9ae:	f1ba 0f00 	cmp.w	sl, #0
 810e9b2:	d024      	beq.n	810e9fe <__multiply+0xf2>
 810e9b4:	f104 0e14 	add.w	lr, r4, #20
 810e9b8:	46a9      	mov	r9, r5
 810e9ba:	f04f 0c00 	mov.w	ip, #0
 810e9be:	f85e 2b04 	ldr.w	r2, [lr], #4
 810e9c2:	f8d9 1000 	ldr.w	r1, [r9]
 810e9c6:	fa1f fb82 	uxth.w	fp, r2
 810e9ca:	b289      	uxth	r1, r1
 810e9cc:	fb0a 110b 	mla	r1, sl, fp, r1
 810e9d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810e9d4:	f8d9 2000 	ldr.w	r2, [r9]
 810e9d8:	4461      	add	r1, ip
 810e9da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810e9de:	fb0a c20b 	mla	r2, sl, fp, ip
 810e9e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810e9e6:	b289      	uxth	r1, r1
 810e9e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810e9ec:	4577      	cmp	r7, lr
 810e9ee:	f849 1b04 	str.w	r1, [r9], #4
 810e9f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810e9f6:	d8e2      	bhi.n	810e9be <__multiply+0xb2>
 810e9f8:	9a01      	ldr	r2, [sp, #4]
 810e9fa:	f845 c002 	str.w	ip, [r5, r2]
 810e9fe:	9a03      	ldr	r2, [sp, #12]
 810ea00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810ea04:	3304      	adds	r3, #4
 810ea06:	f1b9 0f00 	cmp.w	r9, #0
 810ea0a:	d020      	beq.n	810ea4e <__multiply+0x142>
 810ea0c:	6829      	ldr	r1, [r5, #0]
 810ea0e:	f104 0c14 	add.w	ip, r4, #20
 810ea12:	46ae      	mov	lr, r5
 810ea14:	f04f 0a00 	mov.w	sl, #0
 810ea18:	f8bc b000 	ldrh.w	fp, [ip]
 810ea1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810ea20:	fb09 220b 	mla	r2, r9, fp, r2
 810ea24:	4492      	add	sl, r2
 810ea26:	b289      	uxth	r1, r1
 810ea28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810ea2c:	f84e 1b04 	str.w	r1, [lr], #4
 810ea30:	f85c 2b04 	ldr.w	r2, [ip], #4
 810ea34:	f8be 1000 	ldrh.w	r1, [lr]
 810ea38:	0c12      	lsrs	r2, r2, #16
 810ea3a:	fb09 1102 	mla	r1, r9, r2, r1
 810ea3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810ea42:	4567      	cmp	r7, ip
 810ea44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810ea48:	d8e6      	bhi.n	810ea18 <__multiply+0x10c>
 810ea4a:	9a01      	ldr	r2, [sp, #4]
 810ea4c:	50a9      	str	r1, [r5, r2]
 810ea4e:	3504      	adds	r5, #4
 810ea50:	e79a      	b.n	810e988 <__multiply+0x7c>
 810ea52:	3e01      	subs	r6, #1
 810ea54:	e79c      	b.n	810e990 <__multiply+0x84>
 810ea56:	bf00      	nop
 810ea58:	0810fd78 	.word	0x0810fd78
 810ea5c:	0810fe68 	.word	0x0810fe68

0810ea60 <__pow5mult>:
 810ea60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ea64:	4615      	mov	r5, r2
 810ea66:	f012 0203 	ands.w	r2, r2, #3
 810ea6a:	4606      	mov	r6, r0
 810ea6c:	460f      	mov	r7, r1
 810ea6e:	d007      	beq.n	810ea80 <__pow5mult+0x20>
 810ea70:	4c25      	ldr	r4, [pc, #148]	; (810eb08 <__pow5mult+0xa8>)
 810ea72:	3a01      	subs	r2, #1
 810ea74:	2300      	movs	r3, #0
 810ea76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810ea7a:	f7ff fe51 	bl	810e720 <__multadd>
 810ea7e:	4607      	mov	r7, r0
 810ea80:	10ad      	asrs	r5, r5, #2
 810ea82:	d03d      	beq.n	810eb00 <__pow5mult+0xa0>
 810ea84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810ea86:	b97c      	cbnz	r4, 810eaa8 <__pow5mult+0x48>
 810ea88:	2010      	movs	r0, #16
 810ea8a:	f7fc fa13 	bl	810aeb4 <malloc>
 810ea8e:	4602      	mov	r2, r0
 810ea90:	6270      	str	r0, [r6, #36]	; 0x24
 810ea92:	b928      	cbnz	r0, 810eaa0 <__pow5mult+0x40>
 810ea94:	4b1d      	ldr	r3, [pc, #116]	; (810eb0c <__pow5mult+0xac>)
 810ea96:	481e      	ldr	r0, [pc, #120]	; (810eb10 <__pow5mult+0xb0>)
 810ea98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810ea9c:	f000 fdea 	bl	810f674 <__assert_func>
 810eaa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810eaa4:	6004      	str	r4, [r0, #0]
 810eaa6:	60c4      	str	r4, [r0, #12]
 810eaa8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810eaac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810eab0:	b94c      	cbnz	r4, 810eac6 <__pow5mult+0x66>
 810eab2:	f240 2171 	movw	r1, #625	; 0x271
 810eab6:	4630      	mov	r0, r6
 810eab8:	f7ff ff12 	bl	810e8e0 <__i2b>
 810eabc:	2300      	movs	r3, #0
 810eabe:	f8c8 0008 	str.w	r0, [r8, #8]
 810eac2:	4604      	mov	r4, r0
 810eac4:	6003      	str	r3, [r0, #0]
 810eac6:	f04f 0900 	mov.w	r9, #0
 810eaca:	07eb      	lsls	r3, r5, #31
 810eacc:	d50a      	bpl.n	810eae4 <__pow5mult+0x84>
 810eace:	4639      	mov	r1, r7
 810ead0:	4622      	mov	r2, r4
 810ead2:	4630      	mov	r0, r6
 810ead4:	f7ff ff1a 	bl	810e90c <__multiply>
 810ead8:	4639      	mov	r1, r7
 810eada:	4680      	mov	r8, r0
 810eadc:	4630      	mov	r0, r6
 810eade:	f7ff fdfd 	bl	810e6dc <_Bfree>
 810eae2:	4647      	mov	r7, r8
 810eae4:	106d      	asrs	r5, r5, #1
 810eae6:	d00b      	beq.n	810eb00 <__pow5mult+0xa0>
 810eae8:	6820      	ldr	r0, [r4, #0]
 810eaea:	b938      	cbnz	r0, 810eafc <__pow5mult+0x9c>
 810eaec:	4622      	mov	r2, r4
 810eaee:	4621      	mov	r1, r4
 810eaf0:	4630      	mov	r0, r6
 810eaf2:	f7ff ff0b 	bl	810e90c <__multiply>
 810eaf6:	6020      	str	r0, [r4, #0]
 810eaf8:	f8c0 9000 	str.w	r9, [r0]
 810eafc:	4604      	mov	r4, r0
 810eafe:	e7e4      	b.n	810eaca <__pow5mult+0x6a>
 810eb00:	4638      	mov	r0, r7
 810eb02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810eb06:	bf00      	nop
 810eb08:	0810ffb8 	.word	0x0810ffb8
 810eb0c:	0810fd06 	.word	0x0810fd06
 810eb10:	0810fe68 	.word	0x0810fe68

0810eb14 <__lshift>:
 810eb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810eb18:	460c      	mov	r4, r1
 810eb1a:	6849      	ldr	r1, [r1, #4]
 810eb1c:	6923      	ldr	r3, [r4, #16]
 810eb1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810eb22:	68a3      	ldr	r3, [r4, #8]
 810eb24:	4607      	mov	r7, r0
 810eb26:	4691      	mov	r9, r2
 810eb28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810eb2c:	f108 0601 	add.w	r6, r8, #1
 810eb30:	42b3      	cmp	r3, r6
 810eb32:	db0b      	blt.n	810eb4c <__lshift+0x38>
 810eb34:	4638      	mov	r0, r7
 810eb36:	f7ff fd91 	bl	810e65c <_Balloc>
 810eb3a:	4605      	mov	r5, r0
 810eb3c:	b948      	cbnz	r0, 810eb52 <__lshift+0x3e>
 810eb3e:	4602      	mov	r2, r0
 810eb40:	4b2a      	ldr	r3, [pc, #168]	; (810ebec <__lshift+0xd8>)
 810eb42:	482b      	ldr	r0, [pc, #172]	; (810ebf0 <__lshift+0xdc>)
 810eb44:	f240 11d9 	movw	r1, #473	; 0x1d9
 810eb48:	f000 fd94 	bl	810f674 <__assert_func>
 810eb4c:	3101      	adds	r1, #1
 810eb4e:	005b      	lsls	r3, r3, #1
 810eb50:	e7ee      	b.n	810eb30 <__lshift+0x1c>
 810eb52:	2300      	movs	r3, #0
 810eb54:	f100 0114 	add.w	r1, r0, #20
 810eb58:	f100 0210 	add.w	r2, r0, #16
 810eb5c:	4618      	mov	r0, r3
 810eb5e:	4553      	cmp	r3, sl
 810eb60:	db37      	blt.n	810ebd2 <__lshift+0xbe>
 810eb62:	6920      	ldr	r0, [r4, #16]
 810eb64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810eb68:	f104 0314 	add.w	r3, r4, #20
 810eb6c:	f019 091f 	ands.w	r9, r9, #31
 810eb70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810eb74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810eb78:	d02f      	beq.n	810ebda <__lshift+0xc6>
 810eb7a:	f1c9 0e20 	rsb	lr, r9, #32
 810eb7e:	468a      	mov	sl, r1
 810eb80:	f04f 0c00 	mov.w	ip, #0
 810eb84:	681a      	ldr	r2, [r3, #0]
 810eb86:	fa02 f209 	lsl.w	r2, r2, r9
 810eb8a:	ea42 020c 	orr.w	r2, r2, ip
 810eb8e:	f84a 2b04 	str.w	r2, [sl], #4
 810eb92:	f853 2b04 	ldr.w	r2, [r3], #4
 810eb96:	4298      	cmp	r0, r3
 810eb98:	fa22 fc0e 	lsr.w	ip, r2, lr
 810eb9c:	d8f2      	bhi.n	810eb84 <__lshift+0x70>
 810eb9e:	1b03      	subs	r3, r0, r4
 810eba0:	3b15      	subs	r3, #21
 810eba2:	f023 0303 	bic.w	r3, r3, #3
 810eba6:	3304      	adds	r3, #4
 810eba8:	f104 0215 	add.w	r2, r4, #21
 810ebac:	4290      	cmp	r0, r2
 810ebae:	bf38      	it	cc
 810ebb0:	2304      	movcc	r3, #4
 810ebb2:	f841 c003 	str.w	ip, [r1, r3]
 810ebb6:	f1bc 0f00 	cmp.w	ip, #0
 810ebba:	d001      	beq.n	810ebc0 <__lshift+0xac>
 810ebbc:	f108 0602 	add.w	r6, r8, #2
 810ebc0:	3e01      	subs	r6, #1
 810ebc2:	4638      	mov	r0, r7
 810ebc4:	612e      	str	r6, [r5, #16]
 810ebc6:	4621      	mov	r1, r4
 810ebc8:	f7ff fd88 	bl	810e6dc <_Bfree>
 810ebcc:	4628      	mov	r0, r5
 810ebce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ebd2:	f842 0f04 	str.w	r0, [r2, #4]!
 810ebd6:	3301      	adds	r3, #1
 810ebd8:	e7c1      	b.n	810eb5e <__lshift+0x4a>
 810ebda:	3904      	subs	r1, #4
 810ebdc:	f853 2b04 	ldr.w	r2, [r3], #4
 810ebe0:	f841 2f04 	str.w	r2, [r1, #4]!
 810ebe4:	4298      	cmp	r0, r3
 810ebe6:	d8f9      	bhi.n	810ebdc <__lshift+0xc8>
 810ebe8:	e7ea      	b.n	810ebc0 <__lshift+0xac>
 810ebea:	bf00      	nop
 810ebec:	0810fd78 	.word	0x0810fd78
 810ebf0:	0810fe68 	.word	0x0810fe68

0810ebf4 <__mcmp>:
 810ebf4:	b530      	push	{r4, r5, lr}
 810ebf6:	6902      	ldr	r2, [r0, #16]
 810ebf8:	690c      	ldr	r4, [r1, #16]
 810ebfa:	1b12      	subs	r2, r2, r4
 810ebfc:	d10e      	bne.n	810ec1c <__mcmp+0x28>
 810ebfe:	f100 0314 	add.w	r3, r0, #20
 810ec02:	3114      	adds	r1, #20
 810ec04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810ec08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810ec0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810ec10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810ec14:	42a5      	cmp	r5, r4
 810ec16:	d003      	beq.n	810ec20 <__mcmp+0x2c>
 810ec18:	d305      	bcc.n	810ec26 <__mcmp+0x32>
 810ec1a:	2201      	movs	r2, #1
 810ec1c:	4610      	mov	r0, r2
 810ec1e:	bd30      	pop	{r4, r5, pc}
 810ec20:	4283      	cmp	r3, r0
 810ec22:	d3f3      	bcc.n	810ec0c <__mcmp+0x18>
 810ec24:	e7fa      	b.n	810ec1c <__mcmp+0x28>
 810ec26:	f04f 32ff 	mov.w	r2, #4294967295
 810ec2a:	e7f7      	b.n	810ec1c <__mcmp+0x28>

0810ec2c <__mdiff>:
 810ec2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ec30:	460c      	mov	r4, r1
 810ec32:	4606      	mov	r6, r0
 810ec34:	4611      	mov	r1, r2
 810ec36:	4620      	mov	r0, r4
 810ec38:	4690      	mov	r8, r2
 810ec3a:	f7ff ffdb 	bl	810ebf4 <__mcmp>
 810ec3e:	1e05      	subs	r5, r0, #0
 810ec40:	d110      	bne.n	810ec64 <__mdiff+0x38>
 810ec42:	4629      	mov	r1, r5
 810ec44:	4630      	mov	r0, r6
 810ec46:	f7ff fd09 	bl	810e65c <_Balloc>
 810ec4a:	b930      	cbnz	r0, 810ec5a <__mdiff+0x2e>
 810ec4c:	4b3a      	ldr	r3, [pc, #232]	; (810ed38 <__mdiff+0x10c>)
 810ec4e:	4602      	mov	r2, r0
 810ec50:	f240 2132 	movw	r1, #562	; 0x232
 810ec54:	4839      	ldr	r0, [pc, #228]	; (810ed3c <__mdiff+0x110>)
 810ec56:	f000 fd0d 	bl	810f674 <__assert_func>
 810ec5a:	2301      	movs	r3, #1
 810ec5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810ec60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ec64:	bfa4      	itt	ge
 810ec66:	4643      	movge	r3, r8
 810ec68:	46a0      	movge	r8, r4
 810ec6a:	4630      	mov	r0, r6
 810ec6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810ec70:	bfa6      	itte	ge
 810ec72:	461c      	movge	r4, r3
 810ec74:	2500      	movge	r5, #0
 810ec76:	2501      	movlt	r5, #1
 810ec78:	f7ff fcf0 	bl	810e65c <_Balloc>
 810ec7c:	b920      	cbnz	r0, 810ec88 <__mdiff+0x5c>
 810ec7e:	4b2e      	ldr	r3, [pc, #184]	; (810ed38 <__mdiff+0x10c>)
 810ec80:	4602      	mov	r2, r0
 810ec82:	f44f 7110 	mov.w	r1, #576	; 0x240
 810ec86:	e7e5      	b.n	810ec54 <__mdiff+0x28>
 810ec88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810ec8c:	6926      	ldr	r6, [r4, #16]
 810ec8e:	60c5      	str	r5, [r0, #12]
 810ec90:	f104 0914 	add.w	r9, r4, #20
 810ec94:	f108 0514 	add.w	r5, r8, #20
 810ec98:	f100 0e14 	add.w	lr, r0, #20
 810ec9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810eca0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810eca4:	f108 0210 	add.w	r2, r8, #16
 810eca8:	46f2      	mov	sl, lr
 810ecaa:	2100      	movs	r1, #0
 810ecac:	f859 3b04 	ldr.w	r3, [r9], #4
 810ecb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810ecb4:	fa1f f883 	uxth.w	r8, r3
 810ecb8:	fa11 f18b 	uxtah	r1, r1, fp
 810ecbc:	0c1b      	lsrs	r3, r3, #16
 810ecbe:	eba1 0808 	sub.w	r8, r1, r8
 810ecc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810ecc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810ecca:	fa1f f888 	uxth.w	r8, r8
 810ecce:	1419      	asrs	r1, r3, #16
 810ecd0:	454e      	cmp	r6, r9
 810ecd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810ecd6:	f84a 3b04 	str.w	r3, [sl], #4
 810ecda:	d8e7      	bhi.n	810ecac <__mdiff+0x80>
 810ecdc:	1b33      	subs	r3, r6, r4
 810ecde:	3b15      	subs	r3, #21
 810ece0:	f023 0303 	bic.w	r3, r3, #3
 810ece4:	3304      	adds	r3, #4
 810ece6:	3415      	adds	r4, #21
 810ece8:	42a6      	cmp	r6, r4
 810ecea:	bf38      	it	cc
 810ecec:	2304      	movcc	r3, #4
 810ecee:	441d      	add	r5, r3
 810ecf0:	4473      	add	r3, lr
 810ecf2:	469e      	mov	lr, r3
 810ecf4:	462e      	mov	r6, r5
 810ecf6:	4566      	cmp	r6, ip
 810ecf8:	d30e      	bcc.n	810ed18 <__mdiff+0xec>
 810ecfa:	f10c 0203 	add.w	r2, ip, #3
 810ecfe:	1b52      	subs	r2, r2, r5
 810ed00:	f022 0203 	bic.w	r2, r2, #3
 810ed04:	3d03      	subs	r5, #3
 810ed06:	45ac      	cmp	ip, r5
 810ed08:	bf38      	it	cc
 810ed0a:	2200      	movcc	r2, #0
 810ed0c:	441a      	add	r2, r3
 810ed0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810ed12:	b17b      	cbz	r3, 810ed34 <__mdiff+0x108>
 810ed14:	6107      	str	r7, [r0, #16]
 810ed16:	e7a3      	b.n	810ec60 <__mdiff+0x34>
 810ed18:	f856 8b04 	ldr.w	r8, [r6], #4
 810ed1c:	fa11 f288 	uxtah	r2, r1, r8
 810ed20:	1414      	asrs	r4, r2, #16
 810ed22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810ed26:	b292      	uxth	r2, r2
 810ed28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810ed2c:	f84e 2b04 	str.w	r2, [lr], #4
 810ed30:	1421      	asrs	r1, r4, #16
 810ed32:	e7e0      	b.n	810ecf6 <__mdiff+0xca>
 810ed34:	3f01      	subs	r7, #1
 810ed36:	e7ea      	b.n	810ed0e <__mdiff+0xe2>
 810ed38:	0810fd78 	.word	0x0810fd78
 810ed3c:	0810fe68 	.word	0x0810fe68

0810ed40 <__ulp>:
 810ed40:	b082      	sub	sp, #8
 810ed42:	ed8d 0b00 	vstr	d0, [sp]
 810ed46:	9b01      	ldr	r3, [sp, #4]
 810ed48:	4912      	ldr	r1, [pc, #72]	; (810ed94 <__ulp+0x54>)
 810ed4a:	4019      	ands	r1, r3
 810ed4c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810ed50:	2900      	cmp	r1, #0
 810ed52:	dd05      	ble.n	810ed60 <__ulp+0x20>
 810ed54:	2200      	movs	r2, #0
 810ed56:	460b      	mov	r3, r1
 810ed58:	ec43 2b10 	vmov	d0, r2, r3
 810ed5c:	b002      	add	sp, #8
 810ed5e:	4770      	bx	lr
 810ed60:	4249      	negs	r1, r1
 810ed62:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810ed66:	ea4f 5021 	mov.w	r0, r1, asr #20
 810ed6a:	f04f 0200 	mov.w	r2, #0
 810ed6e:	f04f 0300 	mov.w	r3, #0
 810ed72:	da04      	bge.n	810ed7e <__ulp+0x3e>
 810ed74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810ed78:	fa41 f300 	asr.w	r3, r1, r0
 810ed7c:	e7ec      	b.n	810ed58 <__ulp+0x18>
 810ed7e:	f1a0 0114 	sub.w	r1, r0, #20
 810ed82:	291e      	cmp	r1, #30
 810ed84:	bfda      	itte	le
 810ed86:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810ed8a:	fa20 f101 	lsrle.w	r1, r0, r1
 810ed8e:	2101      	movgt	r1, #1
 810ed90:	460a      	mov	r2, r1
 810ed92:	e7e1      	b.n	810ed58 <__ulp+0x18>
 810ed94:	7ff00000 	.word	0x7ff00000

0810ed98 <__b2d>:
 810ed98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ed9a:	6905      	ldr	r5, [r0, #16]
 810ed9c:	f100 0714 	add.w	r7, r0, #20
 810eda0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810eda4:	1f2e      	subs	r6, r5, #4
 810eda6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810edaa:	4620      	mov	r0, r4
 810edac:	f7ff fd48 	bl	810e840 <__hi0bits>
 810edb0:	f1c0 0320 	rsb	r3, r0, #32
 810edb4:	280a      	cmp	r0, #10
 810edb6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810ee34 <__b2d+0x9c>
 810edba:	600b      	str	r3, [r1, #0]
 810edbc:	dc14      	bgt.n	810ede8 <__b2d+0x50>
 810edbe:	f1c0 0e0b 	rsb	lr, r0, #11
 810edc2:	fa24 f10e 	lsr.w	r1, r4, lr
 810edc6:	42b7      	cmp	r7, r6
 810edc8:	ea41 030c 	orr.w	r3, r1, ip
 810edcc:	bf34      	ite	cc
 810edce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810edd2:	2100      	movcs	r1, #0
 810edd4:	3015      	adds	r0, #21
 810edd6:	fa04 f000 	lsl.w	r0, r4, r0
 810edda:	fa21 f10e 	lsr.w	r1, r1, lr
 810edde:	ea40 0201 	orr.w	r2, r0, r1
 810ede2:	ec43 2b10 	vmov	d0, r2, r3
 810ede6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810ede8:	42b7      	cmp	r7, r6
 810edea:	bf3a      	itte	cc
 810edec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810edf0:	f1a5 0608 	subcc.w	r6, r5, #8
 810edf4:	2100      	movcs	r1, #0
 810edf6:	380b      	subs	r0, #11
 810edf8:	d017      	beq.n	810ee2a <__b2d+0x92>
 810edfa:	f1c0 0c20 	rsb	ip, r0, #32
 810edfe:	fa04 f500 	lsl.w	r5, r4, r0
 810ee02:	42be      	cmp	r6, r7
 810ee04:	fa21 f40c 	lsr.w	r4, r1, ip
 810ee08:	ea45 0504 	orr.w	r5, r5, r4
 810ee0c:	bf8c      	ite	hi
 810ee0e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810ee12:	2400      	movls	r4, #0
 810ee14:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810ee18:	fa01 f000 	lsl.w	r0, r1, r0
 810ee1c:	fa24 f40c 	lsr.w	r4, r4, ip
 810ee20:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810ee24:	ea40 0204 	orr.w	r2, r0, r4
 810ee28:	e7db      	b.n	810ede2 <__b2d+0x4a>
 810ee2a:	ea44 030c 	orr.w	r3, r4, ip
 810ee2e:	460a      	mov	r2, r1
 810ee30:	e7d7      	b.n	810ede2 <__b2d+0x4a>
 810ee32:	bf00      	nop
 810ee34:	3ff00000 	.word	0x3ff00000

0810ee38 <__d2b>:
 810ee38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810ee3c:	4689      	mov	r9, r1
 810ee3e:	2101      	movs	r1, #1
 810ee40:	ec57 6b10 	vmov	r6, r7, d0
 810ee44:	4690      	mov	r8, r2
 810ee46:	f7ff fc09 	bl	810e65c <_Balloc>
 810ee4a:	4604      	mov	r4, r0
 810ee4c:	b930      	cbnz	r0, 810ee5c <__d2b+0x24>
 810ee4e:	4602      	mov	r2, r0
 810ee50:	4b25      	ldr	r3, [pc, #148]	; (810eee8 <__d2b+0xb0>)
 810ee52:	4826      	ldr	r0, [pc, #152]	; (810eeec <__d2b+0xb4>)
 810ee54:	f240 310a 	movw	r1, #778	; 0x30a
 810ee58:	f000 fc0c 	bl	810f674 <__assert_func>
 810ee5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810ee60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810ee64:	bb35      	cbnz	r5, 810eeb4 <__d2b+0x7c>
 810ee66:	2e00      	cmp	r6, #0
 810ee68:	9301      	str	r3, [sp, #4]
 810ee6a:	d028      	beq.n	810eebe <__d2b+0x86>
 810ee6c:	4668      	mov	r0, sp
 810ee6e:	9600      	str	r6, [sp, #0]
 810ee70:	f7ff fd06 	bl	810e880 <__lo0bits>
 810ee74:	9900      	ldr	r1, [sp, #0]
 810ee76:	b300      	cbz	r0, 810eeba <__d2b+0x82>
 810ee78:	9a01      	ldr	r2, [sp, #4]
 810ee7a:	f1c0 0320 	rsb	r3, r0, #32
 810ee7e:	fa02 f303 	lsl.w	r3, r2, r3
 810ee82:	430b      	orrs	r3, r1
 810ee84:	40c2      	lsrs	r2, r0
 810ee86:	6163      	str	r3, [r4, #20]
 810ee88:	9201      	str	r2, [sp, #4]
 810ee8a:	9b01      	ldr	r3, [sp, #4]
 810ee8c:	61a3      	str	r3, [r4, #24]
 810ee8e:	2b00      	cmp	r3, #0
 810ee90:	bf14      	ite	ne
 810ee92:	2202      	movne	r2, #2
 810ee94:	2201      	moveq	r2, #1
 810ee96:	6122      	str	r2, [r4, #16]
 810ee98:	b1d5      	cbz	r5, 810eed0 <__d2b+0x98>
 810ee9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810ee9e:	4405      	add	r5, r0
 810eea0:	f8c9 5000 	str.w	r5, [r9]
 810eea4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810eea8:	f8c8 0000 	str.w	r0, [r8]
 810eeac:	4620      	mov	r0, r4
 810eeae:	b003      	add	sp, #12
 810eeb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810eeb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810eeb8:	e7d5      	b.n	810ee66 <__d2b+0x2e>
 810eeba:	6161      	str	r1, [r4, #20]
 810eebc:	e7e5      	b.n	810ee8a <__d2b+0x52>
 810eebe:	a801      	add	r0, sp, #4
 810eec0:	f7ff fcde 	bl	810e880 <__lo0bits>
 810eec4:	9b01      	ldr	r3, [sp, #4]
 810eec6:	6163      	str	r3, [r4, #20]
 810eec8:	2201      	movs	r2, #1
 810eeca:	6122      	str	r2, [r4, #16]
 810eecc:	3020      	adds	r0, #32
 810eece:	e7e3      	b.n	810ee98 <__d2b+0x60>
 810eed0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810eed4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810eed8:	f8c9 0000 	str.w	r0, [r9]
 810eedc:	6918      	ldr	r0, [r3, #16]
 810eede:	f7ff fcaf 	bl	810e840 <__hi0bits>
 810eee2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810eee6:	e7df      	b.n	810eea8 <__d2b+0x70>
 810eee8:	0810fd78 	.word	0x0810fd78
 810eeec:	0810fe68 	.word	0x0810fe68

0810eef0 <__ratio>:
 810eef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810eef4:	4688      	mov	r8, r1
 810eef6:	4669      	mov	r1, sp
 810eef8:	4681      	mov	r9, r0
 810eefa:	f7ff ff4d 	bl	810ed98 <__b2d>
 810eefe:	a901      	add	r1, sp, #4
 810ef00:	4640      	mov	r0, r8
 810ef02:	ec55 4b10 	vmov	r4, r5, d0
 810ef06:	f7ff ff47 	bl	810ed98 <__b2d>
 810ef0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810ef0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810ef12:	eba3 0c02 	sub.w	ip, r3, r2
 810ef16:	e9dd 3200 	ldrd	r3, r2, [sp]
 810ef1a:	1a9b      	subs	r3, r3, r2
 810ef1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810ef20:	ec51 0b10 	vmov	r0, r1, d0
 810ef24:	2b00      	cmp	r3, #0
 810ef26:	bfd6      	itet	le
 810ef28:	460a      	movle	r2, r1
 810ef2a:	462a      	movgt	r2, r5
 810ef2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810ef30:	468b      	mov	fp, r1
 810ef32:	462f      	mov	r7, r5
 810ef34:	bfd4      	ite	le
 810ef36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810ef3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810ef3e:	4620      	mov	r0, r4
 810ef40:	ee10 2a10 	vmov	r2, s0
 810ef44:	465b      	mov	r3, fp
 810ef46:	4639      	mov	r1, r7
 810ef48:	f7f1 fd08 	bl	810095c <__aeabi_ddiv>
 810ef4c:	ec41 0b10 	vmov	d0, r0, r1
 810ef50:	b003      	add	sp, #12
 810ef52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ef56 <__copybits>:
 810ef56:	3901      	subs	r1, #1
 810ef58:	b570      	push	{r4, r5, r6, lr}
 810ef5a:	1149      	asrs	r1, r1, #5
 810ef5c:	6914      	ldr	r4, [r2, #16]
 810ef5e:	3101      	adds	r1, #1
 810ef60:	f102 0314 	add.w	r3, r2, #20
 810ef64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810ef68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810ef6c:	1f05      	subs	r5, r0, #4
 810ef6e:	42a3      	cmp	r3, r4
 810ef70:	d30c      	bcc.n	810ef8c <__copybits+0x36>
 810ef72:	1aa3      	subs	r3, r4, r2
 810ef74:	3b11      	subs	r3, #17
 810ef76:	f023 0303 	bic.w	r3, r3, #3
 810ef7a:	3211      	adds	r2, #17
 810ef7c:	42a2      	cmp	r2, r4
 810ef7e:	bf88      	it	hi
 810ef80:	2300      	movhi	r3, #0
 810ef82:	4418      	add	r0, r3
 810ef84:	2300      	movs	r3, #0
 810ef86:	4288      	cmp	r0, r1
 810ef88:	d305      	bcc.n	810ef96 <__copybits+0x40>
 810ef8a:	bd70      	pop	{r4, r5, r6, pc}
 810ef8c:	f853 6b04 	ldr.w	r6, [r3], #4
 810ef90:	f845 6f04 	str.w	r6, [r5, #4]!
 810ef94:	e7eb      	b.n	810ef6e <__copybits+0x18>
 810ef96:	f840 3b04 	str.w	r3, [r0], #4
 810ef9a:	e7f4      	b.n	810ef86 <__copybits+0x30>

0810ef9c <__any_on>:
 810ef9c:	f100 0214 	add.w	r2, r0, #20
 810efa0:	6900      	ldr	r0, [r0, #16]
 810efa2:	114b      	asrs	r3, r1, #5
 810efa4:	4298      	cmp	r0, r3
 810efa6:	b510      	push	{r4, lr}
 810efa8:	db11      	blt.n	810efce <__any_on+0x32>
 810efaa:	dd0a      	ble.n	810efc2 <__any_on+0x26>
 810efac:	f011 011f 	ands.w	r1, r1, #31
 810efb0:	d007      	beq.n	810efc2 <__any_on+0x26>
 810efb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810efb6:	fa24 f001 	lsr.w	r0, r4, r1
 810efba:	fa00 f101 	lsl.w	r1, r0, r1
 810efbe:	428c      	cmp	r4, r1
 810efc0:	d10b      	bne.n	810efda <__any_on+0x3e>
 810efc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810efc6:	4293      	cmp	r3, r2
 810efc8:	d803      	bhi.n	810efd2 <__any_on+0x36>
 810efca:	2000      	movs	r0, #0
 810efcc:	bd10      	pop	{r4, pc}
 810efce:	4603      	mov	r3, r0
 810efd0:	e7f7      	b.n	810efc2 <__any_on+0x26>
 810efd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810efd6:	2900      	cmp	r1, #0
 810efd8:	d0f5      	beq.n	810efc6 <__any_on+0x2a>
 810efda:	2001      	movs	r0, #1
 810efdc:	e7f6      	b.n	810efcc <__any_on+0x30>

0810efde <_calloc_r>:
 810efde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810efe0:	fba1 2402 	umull	r2, r4, r1, r2
 810efe4:	b94c      	cbnz	r4, 810effa <_calloc_r+0x1c>
 810efe6:	4611      	mov	r1, r2
 810efe8:	9201      	str	r2, [sp, #4]
 810efea:	f7fb ffed 	bl	810afc8 <_malloc_r>
 810efee:	9a01      	ldr	r2, [sp, #4]
 810eff0:	4605      	mov	r5, r0
 810eff2:	b930      	cbnz	r0, 810f002 <_calloc_r+0x24>
 810eff4:	4628      	mov	r0, r5
 810eff6:	b003      	add	sp, #12
 810eff8:	bd30      	pop	{r4, r5, pc}
 810effa:	220c      	movs	r2, #12
 810effc:	6002      	str	r2, [r0, #0]
 810effe:	2500      	movs	r5, #0
 810f000:	e7f8      	b.n	810eff4 <_calloc_r+0x16>
 810f002:	4621      	mov	r1, r4
 810f004:	f7fb ff6c 	bl	810aee0 <memset>
 810f008:	e7f4      	b.n	810eff4 <_calloc_r+0x16>

0810f00a <__ssputs_r>:
 810f00a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810f00e:	688e      	ldr	r6, [r1, #8]
 810f010:	429e      	cmp	r6, r3
 810f012:	4682      	mov	sl, r0
 810f014:	460c      	mov	r4, r1
 810f016:	4690      	mov	r8, r2
 810f018:	461f      	mov	r7, r3
 810f01a:	d838      	bhi.n	810f08e <__ssputs_r+0x84>
 810f01c:	898a      	ldrh	r2, [r1, #12]
 810f01e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810f022:	d032      	beq.n	810f08a <__ssputs_r+0x80>
 810f024:	6825      	ldr	r5, [r4, #0]
 810f026:	6909      	ldr	r1, [r1, #16]
 810f028:	eba5 0901 	sub.w	r9, r5, r1
 810f02c:	6965      	ldr	r5, [r4, #20]
 810f02e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810f032:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810f036:	3301      	adds	r3, #1
 810f038:	444b      	add	r3, r9
 810f03a:	106d      	asrs	r5, r5, #1
 810f03c:	429d      	cmp	r5, r3
 810f03e:	bf38      	it	cc
 810f040:	461d      	movcc	r5, r3
 810f042:	0553      	lsls	r3, r2, #21
 810f044:	d531      	bpl.n	810f0aa <__ssputs_r+0xa0>
 810f046:	4629      	mov	r1, r5
 810f048:	f7fb ffbe 	bl	810afc8 <_malloc_r>
 810f04c:	4606      	mov	r6, r0
 810f04e:	b950      	cbnz	r0, 810f066 <__ssputs_r+0x5c>
 810f050:	230c      	movs	r3, #12
 810f052:	f8ca 3000 	str.w	r3, [sl]
 810f056:	89a3      	ldrh	r3, [r4, #12]
 810f058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810f05c:	81a3      	strh	r3, [r4, #12]
 810f05e:	f04f 30ff 	mov.w	r0, #4294967295
 810f062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f066:	6921      	ldr	r1, [r4, #16]
 810f068:	464a      	mov	r2, r9
 810f06a:	f7fb ff2b 	bl	810aec4 <memcpy>
 810f06e:	89a3      	ldrh	r3, [r4, #12]
 810f070:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810f074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810f078:	81a3      	strh	r3, [r4, #12]
 810f07a:	6126      	str	r6, [r4, #16]
 810f07c:	6165      	str	r5, [r4, #20]
 810f07e:	444e      	add	r6, r9
 810f080:	eba5 0509 	sub.w	r5, r5, r9
 810f084:	6026      	str	r6, [r4, #0]
 810f086:	60a5      	str	r5, [r4, #8]
 810f088:	463e      	mov	r6, r7
 810f08a:	42be      	cmp	r6, r7
 810f08c:	d900      	bls.n	810f090 <__ssputs_r+0x86>
 810f08e:	463e      	mov	r6, r7
 810f090:	6820      	ldr	r0, [r4, #0]
 810f092:	4632      	mov	r2, r6
 810f094:	4641      	mov	r1, r8
 810f096:	f000 fb61 	bl	810f75c <memmove>
 810f09a:	68a3      	ldr	r3, [r4, #8]
 810f09c:	1b9b      	subs	r3, r3, r6
 810f09e:	60a3      	str	r3, [r4, #8]
 810f0a0:	6823      	ldr	r3, [r4, #0]
 810f0a2:	4433      	add	r3, r6
 810f0a4:	6023      	str	r3, [r4, #0]
 810f0a6:	2000      	movs	r0, #0
 810f0a8:	e7db      	b.n	810f062 <__ssputs_r+0x58>
 810f0aa:	462a      	mov	r2, r5
 810f0ac:	f000 fb70 	bl	810f790 <_realloc_r>
 810f0b0:	4606      	mov	r6, r0
 810f0b2:	2800      	cmp	r0, #0
 810f0b4:	d1e1      	bne.n	810f07a <__ssputs_r+0x70>
 810f0b6:	6921      	ldr	r1, [r4, #16]
 810f0b8:	4650      	mov	r0, sl
 810f0ba:	f7fb ff19 	bl	810aef0 <_free_r>
 810f0be:	e7c7      	b.n	810f050 <__ssputs_r+0x46>

0810f0c0 <_svfiprintf_r>:
 810f0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f0c4:	4698      	mov	r8, r3
 810f0c6:	898b      	ldrh	r3, [r1, #12]
 810f0c8:	061b      	lsls	r3, r3, #24
 810f0ca:	b09d      	sub	sp, #116	; 0x74
 810f0cc:	4607      	mov	r7, r0
 810f0ce:	460d      	mov	r5, r1
 810f0d0:	4614      	mov	r4, r2
 810f0d2:	d50e      	bpl.n	810f0f2 <_svfiprintf_r+0x32>
 810f0d4:	690b      	ldr	r3, [r1, #16]
 810f0d6:	b963      	cbnz	r3, 810f0f2 <_svfiprintf_r+0x32>
 810f0d8:	2140      	movs	r1, #64	; 0x40
 810f0da:	f7fb ff75 	bl	810afc8 <_malloc_r>
 810f0de:	6028      	str	r0, [r5, #0]
 810f0e0:	6128      	str	r0, [r5, #16]
 810f0e2:	b920      	cbnz	r0, 810f0ee <_svfiprintf_r+0x2e>
 810f0e4:	230c      	movs	r3, #12
 810f0e6:	603b      	str	r3, [r7, #0]
 810f0e8:	f04f 30ff 	mov.w	r0, #4294967295
 810f0ec:	e0d1      	b.n	810f292 <_svfiprintf_r+0x1d2>
 810f0ee:	2340      	movs	r3, #64	; 0x40
 810f0f0:	616b      	str	r3, [r5, #20]
 810f0f2:	2300      	movs	r3, #0
 810f0f4:	9309      	str	r3, [sp, #36]	; 0x24
 810f0f6:	2320      	movs	r3, #32
 810f0f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810f0fc:	f8cd 800c 	str.w	r8, [sp, #12]
 810f100:	2330      	movs	r3, #48	; 0x30
 810f102:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810f2ac <_svfiprintf_r+0x1ec>
 810f106:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810f10a:	f04f 0901 	mov.w	r9, #1
 810f10e:	4623      	mov	r3, r4
 810f110:	469a      	mov	sl, r3
 810f112:	f813 2b01 	ldrb.w	r2, [r3], #1
 810f116:	b10a      	cbz	r2, 810f11c <_svfiprintf_r+0x5c>
 810f118:	2a25      	cmp	r2, #37	; 0x25
 810f11a:	d1f9      	bne.n	810f110 <_svfiprintf_r+0x50>
 810f11c:	ebba 0b04 	subs.w	fp, sl, r4
 810f120:	d00b      	beq.n	810f13a <_svfiprintf_r+0x7a>
 810f122:	465b      	mov	r3, fp
 810f124:	4622      	mov	r2, r4
 810f126:	4629      	mov	r1, r5
 810f128:	4638      	mov	r0, r7
 810f12a:	f7ff ff6e 	bl	810f00a <__ssputs_r>
 810f12e:	3001      	adds	r0, #1
 810f130:	f000 80aa 	beq.w	810f288 <_svfiprintf_r+0x1c8>
 810f134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810f136:	445a      	add	r2, fp
 810f138:	9209      	str	r2, [sp, #36]	; 0x24
 810f13a:	f89a 3000 	ldrb.w	r3, [sl]
 810f13e:	2b00      	cmp	r3, #0
 810f140:	f000 80a2 	beq.w	810f288 <_svfiprintf_r+0x1c8>
 810f144:	2300      	movs	r3, #0
 810f146:	f04f 32ff 	mov.w	r2, #4294967295
 810f14a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810f14e:	f10a 0a01 	add.w	sl, sl, #1
 810f152:	9304      	str	r3, [sp, #16]
 810f154:	9307      	str	r3, [sp, #28]
 810f156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810f15a:	931a      	str	r3, [sp, #104]	; 0x68
 810f15c:	4654      	mov	r4, sl
 810f15e:	2205      	movs	r2, #5
 810f160:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f164:	4851      	ldr	r0, [pc, #324]	; (810f2ac <_svfiprintf_r+0x1ec>)
 810f166:	f7f1 f8c3 	bl	81002f0 <memchr>
 810f16a:	9a04      	ldr	r2, [sp, #16]
 810f16c:	b9d8      	cbnz	r0, 810f1a6 <_svfiprintf_r+0xe6>
 810f16e:	06d0      	lsls	r0, r2, #27
 810f170:	bf44      	itt	mi
 810f172:	2320      	movmi	r3, #32
 810f174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810f178:	0711      	lsls	r1, r2, #28
 810f17a:	bf44      	itt	mi
 810f17c:	232b      	movmi	r3, #43	; 0x2b
 810f17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810f182:	f89a 3000 	ldrb.w	r3, [sl]
 810f186:	2b2a      	cmp	r3, #42	; 0x2a
 810f188:	d015      	beq.n	810f1b6 <_svfiprintf_r+0xf6>
 810f18a:	9a07      	ldr	r2, [sp, #28]
 810f18c:	4654      	mov	r4, sl
 810f18e:	2000      	movs	r0, #0
 810f190:	f04f 0c0a 	mov.w	ip, #10
 810f194:	4621      	mov	r1, r4
 810f196:	f811 3b01 	ldrb.w	r3, [r1], #1
 810f19a:	3b30      	subs	r3, #48	; 0x30
 810f19c:	2b09      	cmp	r3, #9
 810f19e:	d94e      	bls.n	810f23e <_svfiprintf_r+0x17e>
 810f1a0:	b1b0      	cbz	r0, 810f1d0 <_svfiprintf_r+0x110>
 810f1a2:	9207      	str	r2, [sp, #28]
 810f1a4:	e014      	b.n	810f1d0 <_svfiprintf_r+0x110>
 810f1a6:	eba0 0308 	sub.w	r3, r0, r8
 810f1aa:	fa09 f303 	lsl.w	r3, r9, r3
 810f1ae:	4313      	orrs	r3, r2
 810f1b0:	9304      	str	r3, [sp, #16]
 810f1b2:	46a2      	mov	sl, r4
 810f1b4:	e7d2      	b.n	810f15c <_svfiprintf_r+0x9c>
 810f1b6:	9b03      	ldr	r3, [sp, #12]
 810f1b8:	1d19      	adds	r1, r3, #4
 810f1ba:	681b      	ldr	r3, [r3, #0]
 810f1bc:	9103      	str	r1, [sp, #12]
 810f1be:	2b00      	cmp	r3, #0
 810f1c0:	bfbb      	ittet	lt
 810f1c2:	425b      	neglt	r3, r3
 810f1c4:	f042 0202 	orrlt.w	r2, r2, #2
 810f1c8:	9307      	strge	r3, [sp, #28]
 810f1ca:	9307      	strlt	r3, [sp, #28]
 810f1cc:	bfb8      	it	lt
 810f1ce:	9204      	strlt	r2, [sp, #16]
 810f1d0:	7823      	ldrb	r3, [r4, #0]
 810f1d2:	2b2e      	cmp	r3, #46	; 0x2e
 810f1d4:	d10c      	bne.n	810f1f0 <_svfiprintf_r+0x130>
 810f1d6:	7863      	ldrb	r3, [r4, #1]
 810f1d8:	2b2a      	cmp	r3, #42	; 0x2a
 810f1da:	d135      	bne.n	810f248 <_svfiprintf_r+0x188>
 810f1dc:	9b03      	ldr	r3, [sp, #12]
 810f1de:	1d1a      	adds	r2, r3, #4
 810f1e0:	681b      	ldr	r3, [r3, #0]
 810f1e2:	9203      	str	r2, [sp, #12]
 810f1e4:	2b00      	cmp	r3, #0
 810f1e6:	bfb8      	it	lt
 810f1e8:	f04f 33ff 	movlt.w	r3, #4294967295
 810f1ec:	3402      	adds	r4, #2
 810f1ee:	9305      	str	r3, [sp, #20]
 810f1f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810f2bc <_svfiprintf_r+0x1fc>
 810f1f4:	7821      	ldrb	r1, [r4, #0]
 810f1f6:	2203      	movs	r2, #3
 810f1f8:	4650      	mov	r0, sl
 810f1fa:	f7f1 f879 	bl	81002f0 <memchr>
 810f1fe:	b140      	cbz	r0, 810f212 <_svfiprintf_r+0x152>
 810f200:	2340      	movs	r3, #64	; 0x40
 810f202:	eba0 000a 	sub.w	r0, r0, sl
 810f206:	fa03 f000 	lsl.w	r0, r3, r0
 810f20a:	9b04      	ldr	r3, [sp, #16]
 810f20c:	4303      	orrs	r3, r0
 810f20e:	3401      	adds	r4, #1
 810f210:	9304      	str	r3, [sp, #16]
 810f212:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f216:	4826      	ldr	r0, [pc, #152]	; (810f2b0 <_svfiprintf_r+0x1f0>)
 810f218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810f21c:	2206      	movs	r2, #6
 810f21e:	f7f1 f867 	bl	81002f0 <memchr>
 810f222:	2800      	cmp	r0, #0
 810f224:	d038      	beq.n	810f298 <_svfiprintf_r+0x1d8>
 810f226:	4b23      	ldr	r3, [pc, #140]	; (810f2b4 <_svfiprintf_r+0x1f4>)
 810f228:	bb1b      	cbnz	r3, 810f272 <_svfiprintf_r+0x1b2>
 810f22a:	9b03      	ldr	r3, [sp, #12]
 810f22c:	3307      	adds	r3, #7
 810f22e:	f023 0307 	bic.w	r3, r3, #7
 810f232:	3308      	adds	r3, #8
 810f234:	9303      	str	r3, [sp, #12]
 810f236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f238:	4433      	add	r3, r6
 810f23a:	9309      	str	r3, [sp, #36]	; 0x24
 810f23c:	e767      	b.n	810f10e <_svfiprintf_r+0x4e>
 810f23e:	fb0c 3202 	mla	r2, ip, r2, r3
 810f242:	460c      	mov	r4, r1
 810f244:	2001      	movs	r0, #1
 810f246:	e7a5      	b.n	810f194 <_svfiprintf_r+0xd4>
 810f248:	2300      	movs	r3, #0
 810f24a:	3401      	adds	r4, #1
 810f24c:	9305      	str	r3, [sp, #20]
 810f24e:	4619      	mov	r1, r3
 810f250:	f04f 0c0a 	mov.w	ip, #10
 810f254:	4620      	mov	r0, r4
 810f256:	f810 2b01 	ldrb.w	r2, [r0], #1
 810f25a:	3a30      	subs	r2, #48	; 0x30
 810f25c:	2a09      	cmp	r2, #9
 810f25e:	d903      	bls.n	810f268 <_svfiprintf_r+0x1a8>
 810f260:	2b00      	cmp	r3, #0
 810f262:	d0c5      	beq.n	810f1f0 <_svfiprintf_r+0x130>
 810f264:	9105      	str	r1, [sp, #20]
 810f266:	e7c3      	b.n	810f1f0 <_svfiprintf_r+0x130>
 810f268:	fb0c 2101 	mla	r1, ip, r1, r2
 810f26c:	4604      	mov	r4, r0
 810f26e:	2301      	movs	r3, #1
 810f270:	e7f0      	b.n	810f254 <_svfiprintf_r+0x194>
 810f272:	ab03      	add	r3, sp, #12
 810f274:	9300      	str	r3, [sp, #0]
 810f276:	462a      	mov	r2, r5
 810f278:	4b0f      	ldr	r3, [pc, #60]	; (810f2b8 <_svfiprintf_r+0x1f8>)
 810f27a:	a904      	add	r1, sp, #16
 810f27c:	4638      	mov	r0, r7
 810f27e:	f7fb ffb7 	bl	810b1f0 <_printf_float>
 810f282:	1c42      	adds	r2, r0, #1
 810f284:	4606      	mov	r6, r0
 810f286:	d1d6      	bne.n	810f236 <_svfiprintf_r+0x176>
 810f288:	89ab      	ldrh	r3, [r5, #12]
 810f28a:	065b      	lsls	r3, r3, #25
 810f28c:	f53f af2c 	bmi.w	810f0e8 <_svfiprintf_r+0x28>
 810f290:	9809      	ldr	r0, [sp, #36]	; 0x24
 810f292:	b01d      	add	sp, #116	; 0x74
 810f294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f298:	ab03      	add	r3, sp, #12
 810f29a:	9300      	str	r3, [sp, #0]
 810f29c:	462a      	mov	r2, r5
 810f29e:	4b06      	ldr	r3, [pc, #24]	; (810f2b8 <_svfiprintf_r+0x1f8>)
 810f2a0:	a904      	add	r1, sp, #16
 810f2a2:	4638      	mov	r0, r7
 810f2a4:	f7fc fa48 	bl	810b738 <_printf_i>
 810f2a8:	e7eb      	b.n	810f282 <_svfiprintf_r+0x1c2>
 810f2aa:	bf00      	nop
 810f2ac:	0810ffc4 	.word	0x0810ffc4
 810f2b0:	0810ffce 	.word	0x0810ffce
 810f2b4:	0810b1f1 	.word	0x0810b1f1
 810f2b8:	0810f00b 	.word	0x0810f00b
 810f2bc:	0810ffca 	.word	0x0810ffca

0810f2c0 <__sfputc_r>:
 810f2c0:	6893      	ldr	r3, [r2, #8]
 810f2c2:	3b01      	subs	r3, #1
 810f2c4:	2b00      	cmp	r3, #0
 810f2c6:	b410      	push	{r4}
 810f2c8:	6093      	str	r3, [r2, #8]
 810f2ca:	da08      	bge.n	810f2de <__sfputc_r+0x1e>
 810f2cc:	6994      	ldr	r4, [r2, #24]
 810f2ce:	42a3      	cmp	r3, r4
 810f2d0:	db01      	blt.n	810f2d6 <__sfputc_r+0x16>
 810f2d2:	290a      	cmp	r1, #10
 810f2d4:	d103      	bne.n	810f2de <__sfputc_r+0x1e>
 810f2d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 810f2da:	f7fd bcd5 	b.w	810cc88 <__swbuf_r>
 810f2de:	6813      	ldr	r3, [r2, #0]
 810f2e0:	1c58      	adds	r0, r3, #1
 810f2e2:	6010      	str	r0, [r2, #0]
 810f2e4:	7019      	strb	r1, [r3, #0]
 810f2e6:	4608      	mov	r0, r1
 810f2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 810f2ec:	4770      	bx	lr

0810f2ee <__sfputs_r>:
 810f2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810f2f0:	4606      	mov	r6, r0
 810f2f2:	460f      	mov	r7, r1
 810f2f4:	4614      	mov	r4, r2
 810f2f6:	18d5      	adds	r5, r2, r3
 810f2f8:	42ac      	cmp	r4, r5
 810f2fa:	d101      	bne.n	810f300 <__sfputs_r+0x12>
 810f2fc:	2000      	movs	r0, #0
 810f2fe:	e007      	b.n	810f310 <__sfputs_r+0x22>
 810f300:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f304:	463a      	mov	r2, r7
 810f306:	4630      	mov	r0, r6
 810f308:	f7ff ffda 	bl	810f2c0 <__sfputc_r>
 810f30c:	1c43      	adds	r3, r0, #1
 810f30e:	d1f3      	bne.n	810f2f8 <__sfputs_r+0xa>
 810f310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810f314 <_vfiprintf_r>:
 810f314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f318:	460d      	mov	r5, r1
 810f31a:	b09d      	sub	sp, #116	; 0x74
 810f31c:	4614      	mov	r4, r2
 810f31e:	4698      	mov	r8, r3
 810f320:	4606      	mov	r6, r0
 810f322:	b118      	cbz	r0, 810f32c <_vfiprintf_r+0x18>
 810f324:	6983      	ldr	r3, [r0, #24]
 810f326:	b90b      	cbnz	r3, 810f32c <_vfiprintf_r+0x18>
 810f328:	f7fe fd02 	bl	810dd30 <__sinit>
 810f32c:	4b89      	ldr	r3, [pc, #548]	; (810f554 <_vfiprintf_r+0x240>)
 810f32e:	429d      	cmp	r5, r3
 810f330:	d11b      	bne.n	810f36a <_vfiprintf_r+0x56>
 810f332:	6875      	ldr	r5, [r6, #4]
 810f334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810f336:	07d9      	lsls	r1, r3, #31
 810f338:	d405      	bmi.n	810f346 <_vfiprintf_r+0x32>
 810f33a:	89ab      	ldrh	r3, [r5, #12]
 810f33c:	059a      	lsls	r2, r3, #22
 810f33e:	d402      	bmi.n	810f346 <_vfiprintf_r+0x32>
 810f340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810f342:	f7ff f906 	bl	810e552 <__retarget_lock_acquire_recursive>
 810f346:	89ab      	ldrh	r3, [r5, #12]
 810f348:	071b      	lsls	r3, r3, #28
 810f34a:	d501      	bpl.n	810f350 <_vfiprintf_r+0x3c>
 810f34c:	692b      	ldr	r3, [r5, #16]
 810f34e:	b9eb      	cbnz	r3, 810f38c <_vfiprintf_r+0x78>
 810f350:	4629      	mov	r1, r5
 810f352:	4630      	mov	r0, r6
 810f354:	f7fd fcea 	bl	810cd2c <__swsetup_r>
 810f358:	b1c0      	cbz	r0, 810f38c <_vfiprintf_r+0x78>
 810f35a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810f35c:	07dc      	lsls	r4, r3, #31
 810f35e:	d50e      	bpl.n	810f37e <_vfiprintf_r+0x6a>
 810f360:	f04f 30ff 	mov.w	r0, #4294967295
 810f364:	b01d      	add	sp, #116	; 0x74
 810f366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f36a:	4b7b      	ldr	r3, [pc, #492]	; (810f558 <_vfiprintf_r+0x244>)
 810f36c:	429d      	cmp	r5, r3
 810f36e:	d101      	bne.n	810f374 <_vfiprintf_r+0x60>
 810f370:	68b5      	ldr	r5, [r6, #8]
 810f372:	e7df      	b.n	810f334 <_vfiprintf_r+0x20>
 810f374:	4b79      	ldr	r3, [pc, #484]	; (810f55c <_vfiprintf_r+0x248>)
 810f376:	429d      	cmp	r5, r3
 810f378:	bf08      	it	eq
 810f37a:	68f5      	ldreq	r5, [r6, #12]
 810f37c:	e7da      	b.n	810f334 <_vfiprintf_r+0x20>
 810f37e:	89ab      	ldrh	r3, [r5, #12]
 810f380:	0598      	lsls	r0, r3, #22
 810f382:	d4ed      	bmi.n	810f360 <_vfiprintf_r+0x4c>
 810f384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810f386:	f7ff f8e5 	bl	810e554 <__retarget_lock_release_recursive>
 810f38a:	e7e9      	b.n	810f360 <_vfiprintf_r+0x4c>
 810f38c:	2300      	movs	r3, #0
 810f38e:	9309      	str	r3, [sp, #36]	; 0x24
 810f390:	2320      	movs	r3, #32
 810f392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810f396:	f8cd 800c 	str.w	r8, [sp, #12]
 810f39a:	2330      	movs	r3, #48	; 0x30
 810f39c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810f560 <_vfiprintf_r+0x24c>
 810f3a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810f3a4:	f04f 0901 	mov.w	r9, #1
 810f3a8:	4623      	mov	r3, r4
 810f3aa:	469a      	mov	sl, r3
 810f3ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 810f3b0:	b10a      	cbz	r2, 810f3b6 <_vfiprintf_r+0xa2>
 810f3b2:	2a25      	cmp	r2, #37	; 0x25
 810f3b4:	d1f9      	bne.n	810f3aa <_vfiprintf_r+0x96>
 810f3b6:	ebba 0b04 	subs.w	fp, sl, r4
 810f3ba:	d00b      	beq.n	810f3d4 <_vfiprintf_r+0xc0>
 810f3bc:	465b      	mov	r3, fp
 810f3be:	4622      	mov	r2, r4
 810f3c0:	4629      	mov	r1, r5
 810f3c2:	4630      	mov	r0, r6
 810f3c4:	f7ff ff93 	bl	810f2ee <__sfputs_r>
 810f3c8:	3001      	adds	r0, #1
 810f3ca:	f000 80aa 	beq.w	810f522 <_vfiprintf_r+0x20e>
 810f3ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810f3d0:	445a      	add	r2, fp
 810f3d2:	9209      	str	r2, [sp, #36]	; 0x24
 810f3d4:	f89a 3000 	ldrb.w	r3, [sl]
 810f3d8:	2b00      	cmp	r3, #0
 810f3da:	f000 80a2 	beq.w	810f522 <_vfiprintf_r+0x20e>
 810f3de:	2300      	movs	r3, #0
 810f3e0:	f04f 32ff 	mov.w	r2, #4294967295
 810f3e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810f3e8:	f10a 0a01 	add.w	sl, sl, #1
 810f3ec:	9304      	str	r3, [sp, #16]
 810f3ee:	9307      	str	r3, [sp, #28]
 810f3f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810f3f4:	931a      	str	r3, [sp, #104]	; 0x68
 810f3f6:	4654      	mov	r4, sl
 810f3f8:	2205      	movs	r2, #5
 810f3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f3fe:	4858      	ldr	r0, [pc, #352]	; (810f560 <_vfiprintf_r+0x24c>)
 810f400:	f7f0 ff76 	bl	81002f0 <memchr>
 810f404:	9a04      	ldr	r2, [sp, #16]
 810f406:	b9d8      	cbnz	r0, 810f440 <_vfiprintf_r+0x12c>
 810f408:	06d1      	lsls	r1, r2, #27
 810f40a:	bf44      	itt	mi
 810f40c:	2320      	movmi	r3, #32
 810f40e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810f412:	0713      	lsls	r3, r2, #28
 810f414:	bf44      	itt	mi
 810f416:	232b      	movmi	r3, #43	; 0x2b
 810f418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810f41c:	f89a 3000 	ldrb.w	r3, [sl]
 810f420:	2b2a      	cmp	r3, #42	; 0x2a
 810f422:	d015      	beq.n	810f450 <_vfiprintf_r+0x13c>
 810f424:	9a07      	ldr	r2, [sp, #28]
 810f426:	4654      	mov	r4, sl
 810f428:	2000      	movs	r0, #0
 810f42a:	f04f 0c0a 	mov.w	ip, #10
 810f42e:	4621      	mov	r1, r4
 810f430:	f811 3b01 	ldrb.w	r3, [r1], #1
 810f434:	3b30      	subs	r3, #48	; 0x30
 810f436:	2b09      	cmp	r3, #9
 810f438:	d94e      	bls.n	810f4d8 <_vfiprintf_r+0x1c4>
 810f43a:	b1b0      	cbz	r0, 810f46a <_vfiprintf_r+0x156>
 810f43c:	9207      	str	r2, [sp, #28]
 810f43e:	e014      	b.n	810f46a <_vfiprintf_r+0x156>
 810f440:	eba0 0308 	sub.w	r3, r0, r8
 810f444:	fa09 f303 	lsl.w	r3, r9, r3
 810f448:	4313      	orrs	r3, r2
 810f44a:	9304      	str	r3, [sp, #16]
 810f44c:	46a2      	mov	sl, r4
 810f44e:	e7d2      	b.n	810f3f6 <_vfiprintf_r+0xe2>
 810f450:	9b03      	ldr	r3, [sp, #12]
 810f452:	1d19      	adds	r1, r3, #4
 810f454:	681b      	ldr	r3, [r3, #0]
 810f456:	9103      	str	r1, [sp, #12]
 810f458:	2b00      	cmp	r3, #0
 810f45a:	bfbb      	ittet	lt
 810f45c:	425b      	neglt	r3, r3
 810f45e:	f042 0202 	orrlt.w	r2, r2, #2
 810f462:	9307      	strge	r3, [sp, #28]
 810f464:	9307      	strlt	r3, [sp, #28]
 810f466:	bfb8      	it	lt
 810f468:	9204      	strlt	r2, [sp, #16]
 810f46a:	7823      	ldrb	r3, [r4, #0]
 810f46c:	2b2e      	cmp	r3, #46	; 0x2e
 810f46e:	d10c      	bne.n	810f48a <_vfiprintf_r+0x176>
 810f470:	7863      	ldrb	r3, [r4, #1]
 810f472:	2b2a      	cmp	r3, #42	; 0x2a
 810f474:	d135      	bne.n	810f4e2 <_vfiprintf_r+0x1ce>
 810f476:	9b03      	ldr	r3, [sp, #12]
 810f478:	1d1a      	adds	r2, r3, #4
 810f47a:	681b      	ldr	r3, [r3, #0]
 810f47c:	9203      	str	r2, [sp, #12]
 810f47e:	2b00      	cmp	r3, #0
 810f480:	bfb8      	it	lt
 810f482:	f04f 33ff 	movlt.w	r3, #4294967295
 810f486:	3402      	adds	r4, #2
 810f488:	9305      	str	r3, [sp, #20]
 810f48a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810f570 <_vfiprintf_r+0x25c>
 810f48e:	7821      	ldrb	r1, [r4, #0]
 810f490:	2203      	movs	r2, #3
 810f492:	4650      	mov	r0, sl
 810f494:	f7f0 ff2c 	bl	81002f0 <memchr>
 810f498:	b140      	cbz	r0, 810f4ac <_vfiprintf_r+0x198>
 810f49a:	2340      	movs	r3, #64	; 0x40
 810f49c:	eba0 000a 	sub.w	r0, r0, sl
 810f4a0:	fa03 f000 	lsl.w	r0, r3, r0
 810f4a4:	9b04      	ldr	r3, [sp, #16]
 810f4a6:	4303      	orrs	r3, r0
 810f4a8:	3401      	adds	r4, #1
 810f4aa:	9304      	str	r3, [sp, #16]
 810f4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f4b0:	482c      	ldr	r0, [pc, #176]	; (810f564 <_vfiprintf_r+0x250>)
 810f4b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810f4b6:	2206      	movs	r2, #6
 810f4b8:	f7f0 ff1a 	bl	81002f0 <memchr>
 810f4bc:	2800      	cmp	r0, #0
 810f4be:	d03f      	beq.n	810f540 <_vfiprintf_r+0x22c>
 810f4c0:	4b29      	ldr	r3, [pc, #164]	; (810f568 <_vfiprintf_r+0x254>)
 810f4c2:	bb1b      	cbnz	r3, 810f50c <_vfiprintf_r+0x1f8>
 810f4c4:	9b03      	ldr	r3, [sp, #12]
 810f4c6:	3307      	adds	r3, #7
 810f4c8:	f023 0307 	bic.w	r3, r3, #7
 810f4cc:	3308      	adds	r3, #8
 810f4ce:	9303      	str	r3, [sp, #12]
 810f4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f4d2:	443b      	add	r3, r7
 810f4d4:	9309      	str	r3, [sp, #36]	; 0x24
 810f4d6:	e767      	b.n	810f3a8 <_vfiprintf_r+0x94>
 810f4d8:	fb0c 3202 	mla	r2, ip, r2, r3
 810f4dc:	460c      	mov	r4, r1
 810f4de:	2001      	movs	r0, #1
 810f4e0:	e7a5      	b.n	810f42e <_vfiprintf_r+0x11a>
 810f4e2:	2300      	movs	r3, #0
 810f4e4:	3401      	adds	r4, #1
 810f4e6:	9305      	str	r3, [sp, #20]
 810f4e8:	4619      	mov	r1, r3
 810f4ea:	f04f 0c0a 	mov.w	ip, #10
 810f4ee:	4620      	mov	r0, r4
 810f4f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 810f4f4:	3a30      	subs	r2, #48	; 0x30
 810f4f6:	2a09      	cmp	r2, #9
 810f4f8:	d903      	bls.n	810f502 <_vfiprintf_r+0x1ee>
 810f4fa:	2b00      	cmp	r3, #0
 810f4fc:	d0c5      	beq.n	810f48a <_vfiprintf_r+0x176>
 810f4fe:	9105      	str	r1, [sp, #20]
 810f500:	e7c3      	b.n	810f48a <_vfiprintf_r+0x176>
 810f502:	fb0c 2101 	mla	r1, ip, r1, r2
 810f506:	4604      	mov	r4, r0
 810f508:	2301      	movs	r3, #1
 810f50a:	e7f0      	b.n	810f4ee <_vfiprintf_r+0x1da>
 810f50c:	ab03      	add	r3, sp, #12
 810f50e:	9300      	str	r3, [sp, #0]
 810f510:	462a      	mov	r2, r5
 810f512:	4b16      	ldr	r3, [pc, #88]	; (810f56c <_vfiprintf_r+0x258>)
 810f514:	a904      	add	r1, sp, #16
 810f516:	4630      	mov	r0, r6
 810f518:	f7fb fe6a 	bl	810b1f0 <_printf_float>
 810f51c:	4607      	mov	r7, r0
 810f51e:	1c78      	adds	r0, r7, #1
 810f520:	d1d6      	bne.n	810f4d0 <_vfiprintf_r+0x1bc>
 810f522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810f524:	07d9      	lsls	r1, r3, #31
 810f526:	d405      	bmi.n	810f534 <_vfiprintf_r+0x220>
 810f528:	89ab      	ldrh	r3, [r5, #12]
 810f52a:	059a      	lsls	r2, r3, #22
 810f52c:	d402      	bmi.n	810f534 <_vfiprintf_r+0x220>
 810f52e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810f530:	f7ff f810 	bl	810e554 <__retarget_lock_release_recursive>
 810f534:	89ab      	ldrh	r3, [r5, #12]
 810f536:	065b      	lsls	r3, r3, #25
 810f538:	f53f af12 	bmi.w	810f360 <_vfiprintf_r+0x4c>
 810f53c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810f53e:	e711      	b.n	810f364 <_vfiprintf_r+0x50>
 810f540:	ab03      	add	r3, sp, #12
 810f542:	9300      	str	r3, [sp, #0]
 810f544:	462a      	mov	r2, r5
 810f546:	4b09      	ldr	r3, [pc, #36]	; (810f56c <_vfiprintf_r+0x258>)
 810f548:	a904      	add	r1, sp, #16
 810f54a:	4630      	mov	r0, r6
 810f54c:	f7fc f8f4 	bl	810b738 <_printf_i>
 810f550:	e7e4      	b.n	810f51c <_vfiprintf_r+0x208>
 810f552:	bf00      	nop
 810f554:	0810fdac 	.word	0x0810fdac
 810f558:	0810fdcc 	.word	0x0810fdcc
 810f55c:	0810fd8c 	.word	0x0810fd8c
 810f560:	0810ffc4 	.word	0x0810ffc4
 810f564:	0810ffce 	.word	0x0810ffce
 810f568:	0810b1f1 	.word	0x0810b1f1
 810f56c:	0810f2ef 	.word	0x0810f2ef
 810f570:	0810ffca 	.word	0x0810ffca
 810f574:	00000000 	.word	0x00000000

0810f578 <nan>:
 810f578:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810f580 <nan+0x8>
 810f57c:	4770      	bx	lr
 810f57e:	bf00      	nop
 810f580:	00000000 	.word	0x00000000
 810f584:	7ff80000 	.word	0x7ff80000

0810f588 <__sread>:
 810f588:	b510      	push	{r4, lr}
 810f58a:	460c      	mov	r4, r1
 810f58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f590:	f000 f92e 	bl	810f7f0 <_read_r>
 810f594:	2800      	cmp	r0, #0
 810f596:	bfab      	itete	ge
 810f598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810f59a:	89a3      	ldrhlt	r3, [r4, #12]
 810f59c:	181b      	addge	r3, r3, r0
 810f59e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810f5a2:	bfac      	ite	ge
 810f5a4:	6563      	strge	r3, [r4, #84]	; 0x54
 810f5a6:	81a3      	strhlt	r3, [r4, #12]
 810f5a8:	bd10      	pop	{r4, pc}

0810f5aa <__swrite>:
 810f5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f5ae:	461f      	mov	r7, r3
 810f5b0:	898b      	ldrh	r3, [r1, #12]
 810f5b2:	05db      	lsls	r3, r3, #23
 810f5b4:	4605      	mov	r5, r0
 810f5b6:	460c      	mov	r4, r1
 810f5b8:	4616      	mov	r6, r2
 810f5ba:	d505      	bpl.n	810f5c8 <__swrite+0x1e>
 810f5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f5c0:	2302      	movs	r3, #2
 810f5c2:	2200      	movs	r2, #0
 810f5c4:	f000 f8b8 	bl	810f738 <_lseek_r>
 810f5c8:	89a3      	ldrh	r3, [r4, #12]
 810f5ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810f5ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810f5d2:	81a3      	strh	r3, [r4, #12]
 810f5d4:	4632      	mov	r2, r6
 810f5d6:	463b      	mov	r3, r7
 810f5d8:	4628      	mov	r0, r5
 810f5da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f5de:	f000 b837 	b.w	810f650 <_write_r>

0810f5e2 <__sseek>:
 810f5e2:	b510      	push	{r4, lr}
 810f5e4:	460c      	mov	r4, r1
 810f5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f5ea:	f000 f8a5 	bl	810f738 <_lseek_r>
 810f5ee:	1c43      	adds	r3, r0, #1
 810f5f0:	89a3      	ldrh	r3, [r4, #12]
 810f5f2:	bf15      	itete	ne
 810f5f4:	6560      	strne	r0, [r4, #84]	; 0x54
 810f5f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810f5fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810f5fe:	81a3      	strheq	r3, [r4, #12]
 810f600:	bf18      	it	ne
 810f602:	81a3      	strhne	r3, [r4, #12]
 810f604:	bd10      	pop	{r4, pc}

0810f606 <__sclose>:
 810f606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f60a:	f000 b851 	b.w	810f6b0 <_close_r>

0810f60e <strncmp>:
 810f60e:	b510      	push	{r4, lr}
 810f610:	b17a      	cbz	r2, 810f632 <strncmp+0x24>
 810f612:	4603      	mov	r3, r0
 810f614:	3901      	subs	r1, #1
 810f616:	1884      	adds	r4, r0, r2
 810f618:	f813 0b01 	ldrb.w	r0, [r3], #1
 810f61c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810f620:	4290      	cmp	r0, r2
 810f622:	d101      	bne.n	810f628 <strncmp+0x1a>
 810f624:	42a3      	cmp	r3, r4
 810f626:	d101      	bne.n	810f62c <strncmp+0x1e>
 810f628:	1a80      	subs	r0, r0, r2
 810f62a:	bd10      	pop	{r4, pc}
 810f62c:	2800      	cmp	r0, #0
 810f62e:	d1f3      	bne.n	810f618 <strncmp+0xa>
 810f630:	e7fa      	b.n	810f628 <strncmp+0x1a>
 810f632:	4610      	mov	r0, r2
 810f634:	e7f9      	b.n	810f62a <strncmp+0x1c>

0810f636 <__ascii_wctomb>:
 810f636:	b149      	cbz	r1, 810f64c <__ascii_wctomb+0x16>
 810f638:	2aff      	cmp	r2, #255	; 0xff
 810f63a:	bf85      	ittet	hi
 810f63c:	238a      	movhi	r3, #138	; 0x8a
 810f63e:	6003      	strhi	r3, [r0, #0]
 810f640:	700a      	strbls	r2, [r1, #0]
 810f642:	f04f 30ff 	movhi.w	r0, #4294967295
 810f646:	bf98      	it	ls
 810f648:	2001      	movls	r0, #1
 810f64a:	4770      	bx	lr
 810f64c:	4608      	mov	r0, r1
 810f64e:	4770      	bx	lr

0810f650 <_write_r>:
 810f650:	b538      	push	{r3, r4, r5, lr}
 810f652:	4d07      	ldr	r5, [pc, #28]	; (810f670 <_write_r+0x20>)
 810f654:	4604      	mov	r4, r0
 810f656:	4608      	mov	r0, r1
 810f658:	4611      	mov	r1, r2
 810f65a:	2200      	movs	r2, #0
 810f65c:	602a      	str	r2, [r5, #0]
 810f65e:	461a      	mov	r2, r3
 810f660:	f7f3 fbbd 	bl	8102dde <_write>
 810f664:	1c43      	adds	r3, r0, #1
 810f666:	d102      	bne.n	810f66e <_write_r+0x1e>
 810f668:	682b      	ldr	r3, [r5, #0]
 810f66a:	b103      	cbz	r3, 810f66e <_write_r+0x1e>
 810f66c:	6023      	str	r3, [r4, #0]
 810f66e:	bd38      	pop	{r3, r4, r5, pc}
 810f670:	100004b4 	.word	0x100004b4

0810f674 <__assert_func>:
 810f674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810f676:	4614      	mov	r4, r2
 810f678:	461a      	mov	r2, r3
 810f67a:	4b09      	ldr	r3, [pc, #36]	; (810f6a0 <__assert_func+0x2c>)
 810f67c:	681b      	ldr	r3, [r3, #0]
 810f67e:	4605      	mov	r5, r0
 810f680:	68d8      	ldr	r0, [r3, #12]
 810f682:	b14c      	cbz	r4, 810f698 <__assert_func+0x24>
 810f684:	4b07      	ldr	r3, [pc, #28]	; (810f6a4 <__assert_func+0x30>)
 810f686:	9100      	str	r1, [sp, #0]
 810f688:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810f68c:	4906      	ldr	r1, [pc, #24]	; (810f6a8 <__assert_func+0x34>)
 810f68e:	462b      	mov	r3, r5
 810f690:	f000 f81e 	bl	810f6d0 <fiprintf>
 810f694:	f000 f8be 	bl	810f814 <abort>
 810f698:	4b04      	ldr	r3, [pc, #16]	; (810f6ac <__assert_func+0x38>)
 810f69a:	461c      	mov	r4, r3
 810f69c:	e7f3      	b.n	810f686 <__assert_func+0x12>
 810f69e:	bf00      	nop
 810f6a0:	10000020 	.word	0x10000020
 810f6a4:	0810ffd5 	.word	0x0810ffd5
 810f6a8:	0810ffe2 	.word	0x0810ffe2
 810f6ac:	08110010 	.word	0x08110010

0810f6b0 <_close_r>:
 810f6b0:	b538      	push	{r3, r4, r5, lr}
 810f6b2:	4d06      	ldr	r5, [pc, #24]	; (810f6cc <_close_r+0x1c>)
 810f6b4:	2300      	movs	r3, #0
 810f6b6:	4604      	mov	r4, r0
 810f6b8:	4608      	mov	r0, r1
 810f6ba:	602b      	str	r3, [r5, #0]
 810f6bc:	f7f3 fbab 	bl	8102e16 <_close>
 810f6c0:	1c43      	adds	r3, r0, #1
 810f6c2:	d102      	bne.n	810f6ca <_close_r+0x1a>
 810f6c4:	682b      	ldr	r3, [r5, #0]
 810f6c6:	b103      	cbz	r3, 810f6ca <_close_r+0x1a>
 810f6c8:	6023      	str	r3, [r4, #0]
 810f6ca:	bd38      	pop	{r3, r4, r5, pc}
 810f6cc:	100004b4 	.word	0x100004b4

0810f6d0 <fiprintf>:
 810f6d0:	b40e      	push	{r1, r2, r3}
 810f6d2:	b503      	push	{r0, r1, lr}
 810f6d4:	4601      	mov	r1, r0
 810f6d6:	ab03      	add	r3, sp, #12
 810f6d8:	4805      	ldr	r0, [pc, #20]	; (810f6f0 <fiprintf+0x20>)
 810f6da:	f853 2b04 	ldr.w	r2, [r3], #4
 810f6de:	6800      	ldr	r0, [r0, #0]
 810f6e0:	9301      	str	r3, [sp, #4]
 810f6e2:	f7ff fe17 	bl	810f314 <_vfiprintf_r>
 810f6e6:	b002      	add	sp, #8
 810f6e8:	f85d eb04 	ldr.w	lr, [sp], #4
 810f6ec:	b003      	add	sp, #12
 810f6ee:	4770      	bx	lr
 810f6f0:	10000020 	.word	0x10000020

0810f6f4 <_fstat_r>:
 810f6f4:	b538      	push	{r3, r4, r5, lr}
 810f6f6:	4d07      	ldr	r5, [pc, #28]	; (810f714 <_fstat_r+0x20>)
 810f6f8:	2300      	movs	r3, #0
 810f6fa:	4604      	mov	r4, r0
 810f6fc:	4608      	mov	r0, r1
 810f6fe:	4611      	mov	r1, r2
 810f700:	602b      	str	r3, [r5, #0]
 810f702:	f7f3 fb94 	bl	8102e2e <_fstat>
 810f706:	1c43      	adds	r3, r0, #1
 810f708:	d102      	bne.n	810f710 <_fstat_r+0x1c>
 810f70a:	682b      	ldr	r3, [r5, #0]
 810f70c:	b103      	cbz	r3, 810f710 <_fstat_r+0x1c>
 810f70e:	6023      	str	r3, [r4, #0]
 810f710:	bd38      	pop	{r3, r4, r5, pc}
 810f712:	bf00      	nop
 810f714:	100004b4 	.word	0x100004b4

0810f718 <_isatty_r>:
 810f718:	b538      	push	{r3, r4, r5, lr}
 810f71a:	4d06      	ldr	r5, [pc, #24]	; (810f734 <_isatty_r+0x1c>)
 810f71c:	2300      	movs	r3, #0
 810f71e:	4604      	mov	r4, r0
 810f720:	4608      	mov	r0, r1
 810f722:	602b      	str	r3, [r5, #0]
 810f724:	f7f3 fb93 	bl	8102e4e <_isatty>
 810f728:	1c43      	adds	r3, r0, #1
 810f72a:	d102      	bne.n	810f732 <_isatty_r+0x1a>
 810f72c:	682b      	ldr	r3, [r5, #0]
 810f72e:	b103      	cbz	r3, 810f732 <_isatty_r+0x1a>
 810f730:	6023      	str	r3, [r4, #0]
 810f732:	bd38      	pop	{r3, r4, r5, pc}
 810f734:	100004b4 	.word	0x100004b4

0810f738 <_lseek_r>:
 810f738:	b538      	push	{r3, r4, r5, lr}
 810f73a:	4d07      	ldr	r5, [pc, #28]	; (810f758 <_lseek_r+0x20>)
 810f73c:	4604      	mov	r4, r0
 810f73e:	4608      	mov	r0, r1
 810f740:	4611      	mov	r1, r2
 810f742:	2200      	movs	r2, #0
 810f744:	602a      	str	r2, [r5, #0]
 810f746:	461a      	mov	r2, r3
 810f748:	f7f3 fb8c 	bl	8102e64 <_lseek>
 810f74c:	1c43      	adds	r3, r0, #1
 810f74e:	d102      	bne.n	810f756 <_lseek_r+0x1e>
 810f750:	682b      	ldr	r3, [r5, #0]
 810f752:	b103      	cbz	r3, 810f756 <_lseek_r+0x1e>
 810f754:	6023      	str	r3, [r4, #0]
 810f756:	bd38      	pop	{r3, r4, r5, pc}
 810f758:	100004b4 	.word	0x100004b4

0810f75c <memmove>:
 810f75c:	4288      	cmp	r0, r1
 810f75e:	b510      	push	{r4, lr}
 810f760:	eb01 0402 	add.w	r4, r1, r2
 810f764:	d902      	bls.n	810f76c <memmove+0x10>
 810f766:	4284      	cmp	r4, r0
 810f768:	4623      	mov	r3, r4
 810f76a:	d807      	bhi.n	810f77c <memmove+0x20>
 810f76c:	1e43      	subs	r3, r0, #1
 810f76e:	42a1      	cmp	r1, r4
 810f770:	d008      	beq.n	810f784 <memmove+0x28>
 810f772:	f811 2b01 	ldrb.w	r2, [r1], #1
 810f776:	f803 2f01 	strb.w	r2, [r3, #1]!
 810f77a:	e7f8      	b.n	810f76e <memmove+0x12>
 810f77c:	4402      	add	r2, r0
 810f77e:	4601      	mov	r1, r0
 810f780:	428a      	cmp	r2, r1
 810f782:	d100      	bne.n	810f786 <memmove+0x2a>
 810f784:	bd10      	pop	{r4, pc}
 810f786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810f78a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810f78e:	e7f7      	b.n	810f780 <memmove+0x24>

0810f790 <_realloc_r>:
 810f790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f794:	4680      	mov	r8, r0
 810f796:	4614      	mov	r4, r2
 810f798:	460e      	mov	r6, r1
 810f79a:	b921      	cbnz	r1, 810f7a6 <_realloc_r+0x16>
 810f79c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f7a0:	4611      	mov	r1, r2
 810f7a2:	f7fb bc11 	b.w	810afc8 <_malloc_r>
 810f7a6:	b92a      	cbnz	r2, 810f7b4 <_realloc_r+0x24>
 810f7a8:	f7fb fba2 	bl	810aef0 <_free_r>
 810f7ac:	4625      	mov	r5, r4
 810f7ae:	4628      	mov	r0, r5
 810f7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810f7b4:	f000 f835 	bl	810f822 <_malloc_usable_size_r>
 810f7b8:	4284      	cmp	r4, r0
 810f7ba:	4607      	mov	r7, r0
 810f7bc:	d802      	bhi.n	810f7c4 <_realloc_r+0x34>
 810f7be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810f7c2:	d812      	bhi.n	810f7ea <_realloc_r+0x5a>
 810f7c4:	4621      	mov	r1, r4
 810f7c6:	4640      	mov	r0, r8
 810f7c8:	f7fb fbfe 	bl	810afc8 <_malloc_r>
 810f7cc:	4605      	mov	r5, r0
 810f7ce:	2800      	cmp	r0, #0
 810f7d0:	d0ed      	beq.n	810f7ae <_realloc_r+0x1e>
 810f7d2:	42bc      	cmp	r4, r7
 810f7d4:	4622      	mov	r2, r4
 810f7d6:	4631      	mov	r1, r6
 810f7d8:	bf28      	it	cs
 810f7da:	463a      	movcs	r2, r7
 810f7dc:	f7fb fb72 	bl	810aec4 <memcpy>
 810f7e0:	4631      	mov	r1, r6
 810f7e2:	4640      	mov	r0, r8
 810f7e4:	f7fb fb84 	bl	810aef0 <_free_r>
 810f7e8:	e7e1      	b.n	810f7ae <_realloc_r+0x1e>
 810f7ea:	4635      	mov	r5, r6
 810f7ec:	e7df      	b.n	810f7ae <_realloc_r+0x1e>
	...

0810f7f0 <_read_r>:
 810f7f0:	b538      	push	{r3, r4, r5, lr}
 810f7f2:	4d07      	ldr	r5, [pc, #28]	; (810f810 <_read_r+0x20>)
 810f7f4:	4604      	mov	r4, r0
 810f7f6:	4608      	mov	r0, r1
 810f7f8:	4611      	mov	r1, r2
 810f7fa:	2200      	movs	r2, #0
 810f7fc:	602a      	str	r2, [r5, #0]
 810f7fe:	461a      	mov	r2, r3
 810f800:	f7f3 fad0 	bl	8102da4 <_read>
 810f804:	1c43      	adds	r3, r0, #1
 810f806:	d102      	bne.n	810f80e <_read_r+0x1e>
 810f808:	682b      	ldr	r3, [r5, #0]
 810f80a:	b103      	cbz	r3, 810f80e <_read_r+0x1e>
 810f80c:	6023      	str	r3, [r4, #0]
 810f80e:	bd38      	pop	{r3, r4, r5, pc}
 810f810:	100004b4 	.word	0x100004b4

0810f814 <abort>:
 810f814:	b508      	push	{r3, lr}
 810f816:	2006      	movs	r0, #6
 810f818:	f000 f834 	bl	810f884 <raise>
 810f81c:	2001      	movs	r0, #1
 810f81e:	f7f3 fab7 	bl	8102d90 <_exit>

0810f822 <_malloc_usable_size_r>:
 810f822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810f826:	1f18      	subs	r0, r3, #4
 810f828:	2b00      	cmp	r3, #0
 810f82a:	bfbc      	itt	lt
 810f82c:	580b      	ldrlt	r3, [r1, r0]
 810f82e:	18c0      	addlt	r0, r0, r3
 810f830:	4770      	bx	lr

0810f832 <_raise_r>:
 810f832:	291f      	cmp	r1, #31
 810f834:	b538      	push	{r3, r4, r5, lr}
 810f836:	4604      	mov	r4, r0
 810f838:	460d      	mov	r5, r1
 810f83a:	d904      	bls.n	810f846 <_raise_r+0x14>
 810f83c:	2316      	movs	r3, #22
 810f83e:	6003      	str	r3, [r0, #0]
 810f840:	f04f 30ff 	mov.w	r0, #4294967295
 810f844:	bd38      	pop	{r3, r4, r5, pc}
 810f846:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810f848:	b112      	cbz	r2, 810f850 <_raise_r+0x1e>
 810f84a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810f84e:	b94b      	cbnz	r3, 810f864 <_raise_r+0x32>
 810f850:	4620      	mov	r0, r4
 810f852:	f000 f831 	bl	810f8b8 <_getpid_r>
 810f856:	462a      	mov	r2, r5
 810f858:	4601      	mov	r1, r0
 810f85a:	4620      	mov	r0, r4
 810f85c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810f860:	f000 b818 	b.w	810f894 <_kill_r>
 810f864:	2b01      	cmp	r3, #1
 810f866:	d00a      	beq.n	810f87e <_raise_r+0x4c>
 810f868:	1c59      	adds	r1, r3, #1
 810f86a:	d103      	bne.n	810f874 <_raise_r+0x42>
 810f86c:	2316      	movs	r3, #22
 810f86e:	6003      	str	r3, [r0, #0]
 810f870:	2001      	movs	r0, #1
 810f872:	e7e7      	b.n	810f844 <_raise_r+0x12>
 810f874:	2400      	movs	r4, #0
 810f876:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810f87a:	4628      	mov	r0, r5
 810f87c:	4798      	blx	r3
 810f87e:	2000      	movs	r0, #0
 810f880:	e7e0      	b.n	810f844 <_raise_r+0x12>
	...

0810f884 <raise>:
 810f884:	4b02      	ldr	r3, [pc, #8]	; (810f890 <raise+0xc>)
 810f886:	4601      	mov	r1, r0
 810f888:	6818      	ldr	r0, [r3, #0]
 810f88a:	f7ff bfd2 	b.w	810f832 <_raise_r>
 810f88e:	bf00      	nop
 810f890:	10000020 	.word	0x10000020

0810f894 <_kill_r>:
 810f894:	b538      	push	{r3, r4, r5, lr}
 810f896:	4d07      	ldr	r5, [pc, #28]	; (810f8b4 <_kill_r+0x20>)
 810f898:	2300      	movs	r3, #0
 810f89a:	4604      	mov	r4, r0
 810f89c:	4608      	mov	r0, r1
 810f89e:	4611      	mov	r1, r2
 810f8a0:	602b      	str	r3, [r5, #0]
 810f8a2:	f7f3 fa65 	bl	8102d70 <_kill>
 810f8a6:	1c43      	adds	r3, r0, #1
 810f8a8:	d102      	bne.n	810f8b0 <_kill_r+0x1c>
 810f8aa:	682b      	ldr	r3, [r5, #0]
 810f8ac:	b103      	cbz	r3, 810f8b0 <_kill_r+0x1c>
 810f8ae:	6023      	str	r3, [r4, #0]
 810f8b0:	bd38      	pop	{r3, r4, r5, pc}
 810f8b2:	bf00      	nop
 810f8b4:	100004b4 	.word	0x100004b4

0810f8b8 <_getpid_r>:
 810f8b8:	f7f3 ba52 	b.w	8102d60 <_getpid>

0810f8bc <_init>:
 810f8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810f8be:	bf00      	nop
 810f8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810f8c2:	bc08      	pop	{r3}
 810f8c4:	469e      	mov	lr, r3
 810f8c6:	4770      	bx	lr

0810f8c8 <_fini>:
 810f8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810f8ca:	bf00      	nop
 810f8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810f8ce:	bc08      	pop	{r3}
 810f8d0:	469e      	mov	lr, r3
 810f8d2:	4770      	bx	lr
