
ProvaPID-IMU_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca5c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0810cd00  0810cd00  0001cd00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810d42c  0810d42c  0001d42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810d434  0810d434  0001d434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810d438  0810d438  0001d438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  10000000  0810d43c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001dc  100001f4  0810d630  000201f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  100003d0  0810d630  000203d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c4fb  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002edb  00000000  00000000  0003c71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015b0  00000000  00000000  0003f600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001488  00000000  00000000  00040bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c601  00000000  00000000  00042038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b6b2  00000000  00000000  0007e639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018bb4f  00000000  00000000  00099ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022583a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007348  00000000  00000000  0022588c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001f4 	.word	0x100001f4
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810cce4 	.word	0x0810cce4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001f8 	.word	0x100001f8
 81002dc:	0810cce4 	.word	0x0810cce4

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <init_tune_PID>:
#include <PID.h>

void init_tune_PID(PID* p,float Tc,float Kp,float Ki,float Kd){
 8101138:	b480      	push	{r7}
 810113a:	b087      	sub	sp, #28
 810113c:	af00      	add	r7, sp, #0
 810113e:	6178      	str	r0, [r7, #20]
 8101140:	ed87 0a04 	vstr	s0, [r7, #16]
 8101144:	edc7 0a03 	vstr	s1, [r7, #12]
 8101148:	ed87 1a02 	vstr	s2, [r7, #8]
 810114c:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Tc=Tc;
 8101150:	697b      	ldr	r3, [r7, #20]
 8101152:	693a      	ldr	r2, [r7, #16]
 8101154:	60da      	str	r2, [r3, #12]
	p->u_max= 7.68; // coppia massima
 8101156:	697b      	ldr	r3, [r7, #20]
 8101158:	4a09      	ldr	r2, [pc, #36]	; (8101180 <init_tune_PID+0x48>)
 810115a:	611a      	str	r2, [r3, #16]
	p->u_min= -7.68;  // coppia minima
 810115c:	697b      	ldr	r3, [r7, #20]
 810115e:	4a09      	ldr	r2, [pc, #36]	; (8101184 <init_tune_PID+0x4c>)
 8101160:	615a      	str	r2, [r3, #20]

	p->Kp=Kp;
 8101162:	697b      	ldr	r3, [r7, #20]
 8101164:	68fa      	ldr	r2, [r7, #12]
 8101166:	601a      	str	r2, [r3, #0]
	p->Ki=Ki;
 8101168:	697b      	ldr	r3, [r7, #20]
 810116a:	68ba      	ldr	r2, [r7, #8]
 810116c:	605a      	str	r2, [r3, #4]
	p->Kd=Kd;
 810116e:	697b      	ldr	r3, [r7, #20]
 8101170:	687a      	ldr	r2, [r7, #4]
 8101172:	609a      	str	r2, [r3, #8]
}
 8101174:	bf00      	nop
 8101176:	371c      	adds	r7, #28
 8101178:	46bd      	mov	sp, r7
 810117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810117e:	4770      	bx	lr
 8101180:	40f5c28f 	.word	0x40f5c28f
 8101184:	c0f5c28f 	.word	0xc0f5c28f

08101188 <PID_controller>:
	p->Kp=Kp;
	p->Ki=Ki;
	p->Kd=Kd;
}*/

float PID_controller(PID* p,float y,float r){
 8101188:	b480      	push	{r7}
 810118a:	b08b      	sub	sp, #44	; 0x2c
 810118c:	af00      	add	r7, sp, #0
 810118e:	60f8      	str	r0, [r7, #12]
 8101190:	ed87 0a02 	vstr	s0, [r7, #8]
 8101194:	edc7 0a01 	vstr	s1, [r7, #4]
	//printf("Ingresso: %f\r\n",y);
	static float e_old=0,Iterm=0;
	float u;
	float newIterm;
	float e=r-y;
 8101198:	ed97 7a01 	vldr	s14, [r7, #4]
 810119c:	edd7 7a02 	vldr	s15, [r7, #8]
 81011a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 81011a4:	edc7 7a08 	vstr	s15, [r7, #32]
	float Pterm = p->Kp*e;
 81011a8:	68fb      	ldr	r3, [r7, #12]
 81011aa:	edd3 7a00 	vldr	s15, [r3]
 81011ae:	ed97 7a08 	vldr	s14, [r7, #32]
 81011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81011b6:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm=Iterm+(p->Ki)*p->Tc*e_old;
 81011ba:	68fb      	ldr	r3, [r7, #12]
 81011bc:	ed93 7a01 	vldr	s14, [r3, #4]
 81011c0:	68fb      	ldr	r3, [r7, #12]
 81011c2:	edd3 7a03 	vldr	s15, [r3, #12]
 81011c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 81011ca:	4b32      	ldr	r3, [pc, #200]	; (8101294 <PID_controller+0x10c>)
 81011cc:	edd3 7a00 	vldr	s15, [r3]
 81011d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 81011d4:	4b30      	ldr	r3, [pc, #192]	; (8101298 <PID_controller+0x110>)
 81011d6:	edd3 7a00 	vldr	s15, [r3]
 81011da:	ee77 7a27 	vadd.f32	s15, s14, s15
 81011de:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm=(p->Kd/p->Tc)*(e-e_old);
 81011e2:	68fb      	ldr	r3, [r7, #12]
 81011e4:	edd3 6a02 	vldr	s13, [r3, #8]
 81011e8:	68fb      	ldr	r3, [r7, #12]
 81011ea:	edd3 7a03 	vldr	s15, [r3, #12]
 81011ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81011f2:	4b28      	ldr	r3, [pc, #160]	; (8101294 <PID_controller+0x10c>)
 81011f4:	edd3 7a00 	vldr	s15, [r3]
 81011f8:	edd7 6a08 	vldr	s13, [r7, #32]
 81011fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8101200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101204:	edc7 7a05 	vstr	s15, [r7, #20]
	e_old=e;
 8101208:	4a22      	ldr	r2, [pc, #136]	; (8101294 <PID_controller+0x10c>)
 810120a:	6a3b      	ldr	r3, [r7, #32]
 810120c:	6013      	str	r3, [r2, #0]
	u=Pterm+newIterm+Dterm;
 810120e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101212:	edd7 7a06 	vldr	s15, [r7, #24]
 8101216:	ee77 7a27 	vadd.f32	s15, s14, s15
 810121a:	ed97 7a05 	vldr	s14, [r7, #20]
 810121e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101222:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	//printf("Uscita reale: %f\r\n",u);
	if(u>p->u_max){
 8101226:	68fb      	ldr	r3, [r7, #12]
 8101228:	edd3 7a04 	vldr	s15, [r3, #16]
 810122c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101238:	dd03      	ble.n	8101242 <PID_controller+0xba>
		u=p->u_max;
 810123a:	68fb      	ldr	r3, [r7, #12]
 810123c:	691b      	ldr	r3, [r3, #16]
 810123e:	627b      	str	r3, [r7, #36]	; 0x24
 8101240:	e01e      	b.n	8101280 <PID_controller+0xf8>
		//printf("Uscita approssimata: %f\r\n",u);
	}else if(u<0.0){
 8101242:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8101246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810124e:	d506      	bpl.n	810125e <PID_controller+0xd6>
		u= -1*u;/*p->u_min;*/
 8101250:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8101254:	eef1 7a67 	vneg.f32	s15, s15
 8101258:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 810125c:	e010      	b.n	8101280 <PID_controller+0xf8>
		//printf("Uscita approssimata: %f\r\n",u);
	}else if(u<p->u_min){
 810125e:	68fb      	ldr	r3, [r7, #12]
 8101260:	edd3 7a05 	vldr	s15, [r3, #20]
 8101264:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 810126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101270:	d503      	bpl.n	810127a <PID_controller+0xf2>
		u=p->u_min;
 8101272:	68fb      	ldr	r3, [r7, #12]
 8101274:	695b      	ldr	r3, [r3, #20]
 8101276:	627b      	str	r3, [r7, #36]	; 0x24
 8101278:	e002      	b.n	8101280 <PID_controller+0xf8>
	}else{
		Iterm= newIterm;
 810127a:	4a07      	ldr	r2, [pc, #28]	; (8101298 <PID_controller+0x110>)
 810127c:	69bb      	ldr	r3, [r7, #24]
 810127e:	6013      	str	r3, [r2, #0]
	}
	return u;
 8101280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101282:	ee07 3a90 	vmov	s15, r3

}
 8101286:	eeb0 0a67 	vmov.f32	s0, s15
 810128a:	372c      	adds	r7, #44	; 0x2c
 810128c:	46bd      	mov	sp, r7
 810128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101292:	4770      	bx	lr
 8101294:	10000210 	.word	0x10000210
 8101298:	10000214 	.word	0x10000214

0810129c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 810129c:	b580      	push	{r7, lr}
 810129e:	b082      	sub	sp, #8
 81012a0:	af00      	add	r7, sp, #0
 81012a2:	4603      	mov	r3, r0
 81012a4:	71fb      	strb	r3, [r7, #7]
 81012a6:	79fb      	ldrb	r3, [r7, #7]
 81012a8:	4619      	mov	r1, r3
 81012aa:	2007      	movs	r0, #7
 81012ac:	f000 fa02 	bl	81016b4 <bno055_writeData>
 81012b0:	bf00      	nop
 81012b2:	3708      	adds	r7, #8
 81012b4:	46bd      	mov	sp, r7
 81012b6:	bd80      	pop	{r7, pc}

081012b8 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 81012b8:	b580      	push	{r7, lr}
 81012ba:	b082      	sub	sp, #8
 81012bc:	af00      	add	r7, sp, #0
 81012be:	4603      	mov	r3, r0
 81012c0:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 81012c2:	79fb      	ldrb	r3, [r7, #7]
 81012c4:	4619      	mov	r1, r3
 81012c6:	203d      	movs	r0, #61	; 0x3d
 81012c8:	f000 f9f4 	bl	81016b4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 81012cc:	79fb      	ldrb	r3, [r7, #7]
 81012ce:	2b00      	cmp	r3, #0
 81012d0:	d103      	bne.n	81012da <bno055_setOperationMode+0x22>
    bno055_delay(19);
 81012d2:	2013      	movs	r0, #19
 81012d4:	f000 f9e2 	bl	810169c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 81012d8:	e002      	b.n	81012e0 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 81012da:	2007      	movs	r0, #7
 81012dc:	f000 f9de 	bl	810169c <bno055_delay>
}
 81012e0:	bf00      	nop
 81012e2:	3708      	adds	r7, #8
 81012e4:	46bd      	mov	sp, r7
 81012e6:	bd80      	pop	{r7, pc}

081012e8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 81012e8:	b580      	push	{r7, lr}
 81012ea:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 81012ec:	2000      	movs	r0, #0
 81012ee:	f7ff ffe3 	bl	81012b8 <bno055_setOperationMode>
}
 81012f2:	bf00      	nop
 81012f4:	bd80      	pop	{r7, pc}

081012f6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 81012f6:	b580      	push	{r7, lr}
 81012f8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 81012fa:	200c      	movs	r0, #12
 81012fc:	f7ff ffdc 	bl	81012b8 <bno055_setOperationMode>
}
 8101300:	bf00      	nop
 8101302:	bd80      	pop	{r7, pc}

08101304 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8101304:	b580      	push	{r7, lr}
 8101306:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8101308:	2120      	movs	r1, #32
 810130a:	203f      	movs	r0, #63	; 0x3f
 810130c:	f000 f9d2 	bl	81016b4 <bno055_writeData>
  bno055_delay(700);
 8101310:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8101314:	f000 f9c2 	bl	810169c <bno055_delay>
}
 8101318:	bf00      	nop
 810131a:	bd80      	pop	{r7, pc}

0810131c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 810131c:	b580      	push	{r7, lr}
 810131e:	b082      	sub	sp, #8
 8101320:	af00      	add	r7, sp, #0
  bno055_reset();
 8101322:	f7ff ffef 	bl	8101304 <bno055_reset>

  uint8_t id = 0;
 8101326:	2300      	movs	r3, #0
 8101328:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 810132a:	1dfb      	adds	r3, r7, #7
 810132c:	2201      	movs	r2, #1
 810132e:	4619      	mov	r1, r3
 8101330:	2000      	movs	r0, #0
 8101332:	f000 faab 	bl	810188c <bno055_readData>
  if (id != BNO055_ID) {
 8101336:	79fb      	ldrb	r3, [r7, #7]
 8101338:	2ba0      	cmp	r3, #160	; 0xa0
 810133a:	d004      	beq.n	8101346 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 810133c:	79fb      	ldrb	r3, [r7, #7]
 810133e:	4619      	mov	r1, r3
 8101340:	4809      	ldr	r0, [pc, #36]	; (8101368 <bno055_setup+0x4c>)
 8101342:	f007 fe5d 	bl	8109000 <iprintf>
  }
  bno055_setPage(0);
 8101346:	2000      	movs	r0, #0
 8101348:	f7ff ffa8 	bl	810129c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 810134c:	2100      	movs	r1, #0
 810134e:	203f      	movs	r0, #63	; 0x3f
 8101350:	f000 f9b0 	bl	81016b4 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8101354:	f7ff ffc8 	bl	81012e8 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8101358:	200a      	movs	r0, #10
 810135a:	f000 f99f 	bl	810169c <bno055_delay>
}
 810135e:	bf00      	nop
 8101360:	3708      	adds	r7, #8
 8101362:	46bd      	mov	sp, r7
 8101364:	bd80      	pop	{r7, pc}
 8101366:	bf00      	nop
 8101368:	0810cd00 	.word	0x0810cd00

0810136c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 810136c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101370:	b09e      	sub	sp, #120	; 0x78
 8101372:	af00      	add	r7, sp, #0
 8101374:	4603      	mov	r3, r0
 8101376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 810137a:	2000      	movs	r0, #0
 810137c:	f7ff ff8e 	bl	810129c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8101380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101384:	2b20      	cmp	r3, #32
 8101386:	d108      	bne.n	810139a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8101388:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810138c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101390:	2208      	movs	r2, #8
 8101392:	4618      	mov	r0, r3
 8101394:	f000 fa7a 	bl	810188c <bno055_readData>
 8101398:	e007      	b.n	81013aa <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810139a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810139e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81013a2:	2206      	movs	r2, #6
 81013a4:	4618      	mov	r0, r3
 81013a6:	f000 fa71 	bl	810188c <bno055_readData>

  double scale = 1;
 81013aa:	f04f 0200 	mov.w	r2, #0
 81013ae:	4b8b      	ldr	r3, [pc, #556]	; (81015dc <bno055_getVector+0x270>)
 81013b0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 81013b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81013b8:	2b0e      	cmp	r3, #14
 81013ba:	d109      	bne.n	81013d0 <bno055_getVector+0x64>
    scale = magScale;
 81013bc:	4b88      	ldr	r3, [pc, #544]	; (81015e0 <bno055_getVector+0x274>)
 81013be:	881b      	ldrh	r3, [r3, #0]
 81013c0:	4618      	mov	r0, r3
 81013c2:	f7ff f927 	bl	8100614 <__aeabi_ui2d>
 81013c6:	4602      	mov	r2, r0
 81013c8:	460b      	mov	r3, r1
 81013ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 81013ce:	e03e      	b.n	810144e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 81013d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81013d4:	2b08      	cmp	r3, #8
 81013d6:	d007      	beq.n	81013e8 <bno055_getVector+0x7c>
 81013d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81013dc:	2b28      	cmp	r3, #40	; 0x28
 81013de:	d003      	beq.n	81013e8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 81013e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81013e4:	2b2e      	cmp	r3, #46	; 0x2e
 81013e6:	d109      	bne.n	81013fc <bno055_getVector+0x90>
    scale = accelScale;
 81013e8:	4b7e      	ldr	r3, [pc, #504]	; (81015e4 <bno055_getVector+0x278>)
 81013ea:	881b      	ldrh	r3, [r3, #0]
 81013ec:	4618      	mov	r0, r3
 81013ee:	f7ff f911 	bl	8100614 <__aeabi_ui2d>
 81013f2:	4602      	mov	r2, r0
 81013f4:	460b      	mov	r3, r1
 81013f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 81013fa:	e028      	b.n	810144e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 81013fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101400:	2b14      	cmp	r3, #20
 8101402:	d109      	bne.n	8101418 <bno055_getVector+0xac>
    scale = angularRateScale;
 8101404:	4b78      	ldr	r3, [pc, #480]	; (81015e8 <bno055_getVector+0x27c>)
 8101406:	881b      	ldrh	r3, [r3, #0]
 8101408:	4618      	mov	r0, r3
 810140a:	f7ff f903 	bl	8100614 <__aeabi_ui2d>
 810140e:	4602      	mov	r2, r0
 8101410:	460b      	mov	r3, r1
 8101412:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101416:	e01a      	b.n	810144e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8101418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810141c:	2b1a      	cmp	r3, #26
 810141e:	d109      	bne.n	8101434 <bno055_getVector+0xc8>
    scale = eulerScale;
 8101420:	4b72      	ldr	r3, [pc, #456]	; (81015ec <bno055_getVector+0x280>)
 8101422:	881b      	ldrh	r3, [r3, #0]
 8101424:	4618      	mov	r0, r3
 8101426:	f7ff f8f5 	bl	8100614 <__aeabi_ui2d>
 810142a:	4602      	mov	r2, r0
 810142c:	460b      	mov	r3, r1
 810142e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101432:	e00c      	b.n	810144e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8101434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101438:	2b20      	cmp	r3, #32
 810143a:	d108      	bne.n	810144e <bno055_getVector+0xe2>
    scale = quaScale;
 810143c:	4b6c      	ldr	r3, [pc, #432]	; (81015f0 <bno055_getVector+0x284>)
 810143e:	881b      	ldrh	r3, [r3, #0]
 8101440:	4618      	mov	r0, r3
 8101442:	f7ff f8e7 	bl	8100614 <__aeabi_ui2d>
 8101446:	4602      	mov	r2, r0
 8101448:	460b      	mov	r3, r1
 810144a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 810144e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8101452:	2220      	movs	r2, #32
 8101454:	2100      	movs	r1, #0
 8101456:	4618      	mov	r0, r3
 8101458:	f006 ff50 	bl	81082fc <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 810145c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101460:	2b20      	cmp	r3, #32
 8101462:	d150      	bne.n	8101506 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101464:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8101468:	021b      	lsls	r3, r3, #8
 810146a:	b21a      	sxth	r2, r3
 810146c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8101470:	b21b      	sxth	r3, r3
 8101472:	4313      	orrs	r3, r2
 8101474:	b21b      	sxth	r3, r3
 8101476:	4618      	mov	r0, r3
 8101478:	f7ff f8dc 	bl	8100634 <__aeabi_i2d>
 810147c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101480:	f7ff fa6c 	bl	810095c <__aeabi_ddiv>
 8101484:	4602      	mov	r2, r0
 8101486:	460b      	mov	r3, r1
 8101488:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810148c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8101490:	021b      	lsls	r3, r3, #8
 8101492:	b21a      	sxth	r2, r3
 8101494:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8101498:	b21b      	sxth	r3, r3
 810149a:	4313      	orrs	r3, r2
 810149c:	b21b      	sxth	r3, r3
 810149e:	4618      	mov	r0, r3
 81014a0:	f7ff f8c8 	bl	8100634 <__aeabi_i2d>
 81014a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81014a8:	f7ff fa58 	bl	810095c <__aeabi_ddiv>
 81014ac:	4602      	mov	r2, r0
 81014ae:	460b      	mov	r3, r1
 81014b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81014b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 81014b8:	021b      	lsls	r3, r3, #8
 81014ba:	b21a      	sxth	r2, r3
 81014bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 81014c0:	b21b      	sxth	r3, r3
 81014c2:	4313      	orrs	r3, r2
 81014c4:	b21b      	sxth	r3, r3
 81014c6:	4618      	mov	r0, r3
 81014c8:	f7ff f8b4 	bl	8100634 <__aeabi_i2d>
 81014cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81014d0:	f7ff fa44 	bl	810095c <__aeabi_ddiv>
 81014d4:	4602      	mov	r2, r0
 81014d6:	460b      	mov	r3, r1
 81014d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 81014dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 81014e0:	021b      	lsls	r3, r3, #8
 81014e2:	b21a      	sxth	r2, r3
 81014e4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 81014e8:	b21b      	sxth	r3, r3
 81014ea:	4313      	orrs	r3, r2
 81014ec:	b21b      	sxth	r3, r3
 81014ee:	4618      	mov	r0, r3
 81014f0:	f7ff f8a0 	bl	8100634 <__aeabi_i2d>
 81014f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81014f8:	f7ff fa30 	bl	810095c <__aeabi_ddiv>
 81014fc:	4602      	mov	r2, r0
 81014fe:	460b      	mov	r3, r1
 8101500:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8101504:	e03b      	b.n	810157e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101506:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 810150a:	021b      	lsls	r3, r3, #8
 810150c:	b21a      	sxth	r2, r3
 810150e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8101512:	b21b      	sxth	r3, r3
 8101514:	4313      	orrs	r3, r2
 8101516:	b21b      	sxth	r3, r3
 8101518:	4618      	mov	r0, r3
 810151a:	f7ff f88b 	bl	8100634 <__aeabi_i2d>
 810151e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101522:	f7ff fa1b 	bl	810095c <__aeabi_ddiv>
 8101526:	4602      	mov	r2, r0
 8101528:	460b      	mov	r3, r1
 810152a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 810152e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8101532:	021b      	lsls	r3, r3, #8
 8101534:	b21a      	sxth	r2, r3
 8101536:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 810153a:	b21b      	sxth	r3, r3
 810153c:	4313      	orrs	r3, r2
 810153e:	b21b      	sxth	r3, r3
 8101540:	4618      	mov	r0, r3
 8101542:	f7ff f877 	bl	8100634 <__aeabi_i2d>
 8101546:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 810154a:	f7ff fa07 	bl	810095c <__aeabi_ddiv>
 810154e:	4602      	mov	r2, r0
 8101550:	460b      	mov	r3, r1
 8101552:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101556:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 810155a:	021b      	lsls	r3, r3, #8
 810155c:	b21a      	sxth	r2, r3
 810155e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8101562:	b21b      	sxth	r3, r3
 8101564:	4313      	orrs	r3, r2
 8101566:	b21b      	sxth	r3, r3
 8101568:	4618      	mov	r0, r3
 810156a:	f7ff f863 	bl	8100634 <__aeabi_i2d>
 810156e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101572:	f7ff f9f3 	bl	810095c <__aeabi_ddiv>
 8101576:	4602      	mov	r2, r0
 8101578:	460b      	mov	r3, r1
 810157a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 810157e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8101582:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8101586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810158a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810158e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101592:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8101596:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 810159a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 810159e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 81015a2:	ec49 8b14 	vmov	d4, r8, r9
 81015a6:	ec45 4b15 	vmov	d5, r4, r5
 81015aa:	ec41 0b16 	vmov	d6, r0, r1
 81015ae:	ec43 2b17 	vmov	d7, r2, r3
}
 81015b2:	eeb0 0a44 	vmov.f32	s0, s8
 81015b6:	eef0 0a64 	vmov.f32	s1, s9
 81015ba:	eeb0 1a45 	vmov.f32	s2, s10
 81015be:	eef0 1a65 	vmov.f32	s3, s11
 81015c2:	eeb0 2a46 	vmov.f32	s4, s12
 81015c6:	eef0 2a66 	vmov.f32	s5, s13
 81015ca:	eeb0 3a47 	vmov.f32	s6, s14
 81015ce:	eef0 3a67 	vmov.f32	s7, s15
 81015d2:	3778      	adds	r7, #120	; 0x78
 81015d4:	46bd      	mov	sp, r7
 81015d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 81015da:	bf00      	nop
 81015dc:	3ff00000 	.word	0x3ff00000
 81015e0:	1000000e 	.word	0x1000000e
 81015e4:	10000008 	.word	0x10000008
 81015e8:	1000000a 	.word	0x1000000a
 81015ec:	1000000c 	.word	0x1000000c
 81015f0:	10000010 	.word	0x10000010

081015f4 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 81015f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81015f8:	b090      	sub	sp, #64	; 0x40
 81015fa:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 81015fc:	201a      	movs	r0, #26
 81015fe:	f7ff feb5 	bl	810136c <bno055_getVector>
 8101602:	eeb0 4a40 	vmov.f32	s8, s0
 8101606:	eef0 4a60 	vmov.f32	s9, s1
 810160a:	eeb0 5a41 	vmov.f32	s10, s2
 810160e:	eef0 5a61 	vmov.f32	s11, s3
 8101612:	eeb0 6a42 	vmov.f32	s12, s4
 8101616:	eef0 6a62 	vmov.f32	s13, s5
 810161a:	eeb0 7a43 	vmov.f32	s14, s6
 810161e:	eef0 7a63 	vmov.f32	s15, s7
 8101622:	ed87 4b08 	vstr	d4, [r7, #32]
 8101626:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810162a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 810162e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8101632:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8101636:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 810163a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 810163e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8101642:	ec49 8b14 	vmov	d4, r8, r9
 8101646:	ec45 4b15 	vmov	d5, r4, r5
 810164a:	ec41 0b16 	vmov	d6, r0, r1
 810164e:	ec43 2b17 	vmov	d7, r2, r3
}
 8101652:	eeb0 0a44 	vmov.f32	s0, s8
 8101656:	eef0 0a64 	vmov.f32	s1, s9
 810165a:	eeb0 1a45 	vmov.f32	s2, s10
 810165e:	eef0 1a65 	vmov.f32	s3, s11
 8101662:	eeb0 2a46 	vmov.f32	s4, s12
 8101666:	eef0 2a66 	vmov.f32	s5, s13
 810166a:	eeb0 3a47 	vmov.f32	s6, s14
 810166e:	eef0 3a67 	vmov.f32	s7, s15
 8101672:	3740      	adds	r7, #64	; 0x40
 8101674:	46bd      	mov	sp, r7
 8101676:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0810167c <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 810167c:	b480      	push	{r7}
 810167e:	b083      	sub	sp, #12
 8101680:	af00      	add	r7, sp, #0
 8101682:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101684:	4a04      	ldr	r2, [pc, #16]	; (8101698 <bno055_assignI2C+0x1c>)
 8101686:	687b      	ldr	r3, [r7, #4]
 8101688:	6013      	str	r3, [r2, #0]
}
 810168a:	bf00      	nop
 810168c:	370c      	adds	r7, #12
 810168e:	46bd      	mov	sp, r7
 8101690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101694:	4770      	bx	lr
 8101696:	bf00      	nop
 8101698:	10000218 	.word	0x10000218

0810169c <bno055_delay>:

void bno055_delay(int time) {
 810169c:	b580      	push	{r7, lr}
 810169e:	b082      	sub	sp, #8
 81016a0:	af00      	add	r7, sp, #0
 81016a2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 81016a4:	687b      	ldr	r3, [r7, #4]
 81016a6:	4618      	mov	r0, r3
 81016a8:	f000 ff44 	bl	8102534 <HAL_Delay>
#endif
}
 81016ac:	bf00      	nop
 81016ae:	3708      	adds	r7, #8
 81016b0:	46bd      	mov	sp, r7
 81016b2:	bd80      	pop	{r7, pc}

081016b4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 81016b4:	b580      	push	{r7, lr}
 81016b6:	b088      	sub	sp, #32
 81016b8:	af02      	add	r7, sp, #8
 81016ba:	4603      	mov	r3, r0
 81016bc:	460a      	mov	r2, r1
 81016be:	71fb      	strb	r3, [r7, #7]
 81016c0:	4613      	mov	r3, r2
 81016c2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 81016c4:	79fb      	ldrb	r3, [r7, #7]
 81016c6:	733b      	strb	r3, [r7, #12]
 81016c8:	79bb      	ldrb	r3, [r7, #6]
 81016ca:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 81016cc:	4b5a      	ldr	r3, [pc, #360]	; (8101838 <bno055_writeData+0x184>)
 81016ce:	6818      	ldr	r0, [r3, #0]
 81016d0:	f107 020c 	add.w	r2, r7, #12
 81016d4:	230a      	movs	r3, #10
 81016d6:	9300      	str	r3, [sp, #0]
 81016d8:	2302      	movs	r3, #2
 81016da:	2150      	movs	r1, #80	; 0x50
 81016dc:	f001 fac4 	bl	8102c68 <HAL_I2C_Master_Transmit>
 81016e0:	4603      	mov	r3, r0
 81016e2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 81016e4:	7dfb      	ldrb	r3, [r7, #23]
 81016e6:	2b00      	cmp	r3, #0
 81016e8:	f000 80a0 	beq.w	810182c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 81016ec:	7dfb      	ldrb	r3, [r7, #23]
 81016ee:	2b01      	cmp	r3, #1
 81016f0:	d103      	bne.n	81016fa <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 81016f2:	4852      	ldr	r0, [pc, #328]	; (810183c <bno055_writeData+0x188>)
 81016f4:	f007 fd0a 	bl	810910c <puts>
 81016f8:	e012      	b.n	8101720 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 81016fa:	7dfb      	ldrb	r3, [r7, #23]
 81016fc:	2b03      	cmp	r3, #3
 81016fe:	d103      	bne.n	8101708 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101700:	484f      	ldr	r0, [pc, #316]	; (8101840 <bno055_writeData+0x18c>)
 8101702:	f007 fd03 	bl	810910c <puts>
 8101706:	e00b      	b.n	8101720 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8101708:	7dfb      	ldrb	r3, [r7, #23]
 810170a:	2b02      	cmp	r3, #2
 810170c:	d103      	bne.n	8101716 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 810170e:	484d      	ldr	r0, [pc, #308]	; (8101844 <bno055_writeData+0x190>)
 8101710:	f007 fcfc 	bl	810910c <puts>
 8101714:	e004      	b.n	8101720 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8101716:	7dfb      	ldrb	r3, [r7, #23]
 8101718:	4619      	mov	r1, r3
 810171a:	484b      	ldr	r0, [pc, #300]	; (8101848 <bno055_writeData+0x194>)
 810171c:	f007 fc70 	bl	8109000 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8101720:	4b45      	ldr	r3, [pc, #276]	; (8101838 <bno055_writeData+0x184>)
 8101722:	681b      	ldr	r3, [r3, #0]
 8101724:	4618      	mov	r0, r3
 8101726:	f001 fd9e 	bl	8103266 <HAL_I2C_GetError>
 810172a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 810172c:	693b      	ldr	r3, [r7, #16]
 810172e:	2b00      	cmp	r3, #0
 8101730:	d07e      	beq.n	8101830 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8101732:	693b      	ldr	r3, [r7, #16]
 8101734:	2b01      	cmp	r3, #1
 8101736:	d103      	bne.n	8101740 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8101738:	4844      	ldr	r0, [pc, #272]	; (810184c <bno055_writeData+0x198>)
 810173a:	f007 fce7 	bl	810910c <puts>
 810173e:	e021      	b.n	8101784 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8101740:	693b      	ldr	r3, [r7, #16]
 8101742:	2b02      	cmp	r3, #2
 8101744:	d103      	bne.n	810174e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8101746:	4842      	ldr	r0, [pc, #264]	; (8101850 <bno055_writeData+0x19c>)
 8101748:	f007 fce0 	bl	810910c <puts>
 810174c:	e01a      	b.n	8101784 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 810174e:	693b      	ldr	r3, [r7, #16]
 8101750:	2b04      	cmp	r3, #4
 8101752:	d103      	bne.n	810175c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8101754:	483f      	ldr	r0, [pc, #252]	; (8101854 <bno055_writeData+0x1a0>)
 8101756:	f007 fcd9 	bl	810910c <puts>
 810175a:	e013      	b.n	8101784 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 810175c:	693b      	ldr	r3, [r7, #16]
 810175e:	2b08      	cmp	r3, #8
 8101760:	d103      	bne.n	810176a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8101762:	483d      	ldr	r0, [pc, #244]	; (8101858 <bno055_writeData+0x1a4>)
 8101764:	f007 fcd2 	bl	810910c <puts>
 8101768:	e00c      	b.n	8101784 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 810176a:	693b      	ldr	r3, [r7, #16]
 810176c:	2b10      	cmp	r3, #16
 810176e:	d103      	bne.n	8101778 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8101770:	483a      	ldr	r0, [pc, #232]	; (810185c <bno055_writeData+0x1a8>)
 8101772:	f007 fccb 	bl	810910c <puts>
 8101776:	e005      	b.n	8101784 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8101778:	693b      	ldr	r3, [r7, #16]
 810177a:	2b20      	cmp	r3, #32
 810177c:	d102      	bne.n	8101784 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 810177e:	4838      	ldr	r0, [pc, #224]	; (8101860 <bno055_writeData+0x1ac>)
 8101780:	f007 fcc4 	bl	810910c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8101784:	4b2c      	ldr	r3, [pc, #176]	; (8101838 <bno055_writeData+0x184>)
 8101786:	681b      	ldr	r3, [r3, #0]
 8101788:	4618      	mov	r0, r3
 810178a:	f001 fd5e 	bl	810324a <HAL_I2C_GetState>
 810178e:	4603      	mov	r3, r0
 8101790:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8101792:	7bfb      	ldrb	r3, [r7, #15]
 8101794:	2b00      	cmp	r3, #0
 8101796:	d103      	bne.n	81017a0 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101798:	4832      	ldr	r0, [pc, #200]	; (8101864 <bno055_writeData+0x1b0>)
 810179a:	f007 fcb7 	bl	810910c <puts>
 810179e:	e048      	b.n	8101832 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 81017a0:	7bfb      	ldrb	r3, [r7, #15]
 81017a2:	2b20      	cmp	r3, #32
 81017a4:	d103      	bne.n	81017ae <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 81017a6:	482f      	ldr	r0, [pc, #188]	; (8101864 <bno055_writeData+0x1b0>)
 81017a8:	f007 fcb0 	bl	810910c <puts>
 81017ac:	e041      	b.n	8101832 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 81017ae:	7bfb      	ldrb	r3, [r7, #15]
 81017b0:	2b24      	cmp	r3, #36	; 0x24
 81017b2:	d103      	bne.n	81017bc <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 81017b4:	482c      	ldr	r0, [pc, #176]	; (8101868 <bno055_writeData+0x1b4>)
 81017b6:	f007 fca9 	bl	810910c <puts>
 81017ba:	e03a      	b.n	8101832 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 81017bc:	7bfb      	ldrb	r3, [r7, #15]
 81017be:	2b21      	cmp	r3, #33	; 0x21
 81017c0:	d103      	bne.n	81017ca <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 81017c2:	482a      	ldr	r0, [pc, #168]	; (810186c <bno055_writeData+0x1b8>)
 81017c4:	f007 fca2 	bl	810910c <puts>
 81017c8:	e033      	b.n	8101832 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 81017ca:	7bfb      	ldrb	r3, [r7, #15]
 81017cc:	2b22      	cmp	r3, #34	; 0x22
 81017ce:	d103      	bne.n	81017d8 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 81017d0:	4827      	ldr	r0, [pc, #156]	; (8101870 <bno055_writeData+0x1bc>)
 81017d2:	f007 fc9b 	bl	810910c <puts>
 81017d6:	e02c      	b.n	8101832 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 81017d8:	7bfb      	ldrb	r3, [r7, #15]
 81017da:	2b28      	cmp	r3, #40	; 0x28
 81017dc:	d103      	bne.n	81017e6 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 81017de:	4825      	ldr	r0, [pc, #148]	; (8101874 <bno055_writeData+0x1c0>)
 81017e0:	f007 fc94 	bl	810910c <puts>
 81017e4:	e025      	b.n	8101832 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 81017e6:	7bfb      	ldrb	r3, [r7, #15]
 81017e8:	2b29      	cmp	r3, #41	; 0x29
 81017ea:	d103      	bne.n	81017f4 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 81017ec:	4822      	ldr	r0, [pc, #136]	; (8101878 <bno055_writeData+0x1c4>)
 81017ee:	f007 fc8d 	bl	810910c <puts>
 81017f2:	e01e      	b.n	8101832 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 81017f4:	7bfb      	ldrb	r3, [r7, #15]
 81017f6:	2b2a      	cmp	r3, #42	; 0x2a
 81017f8:	d103      	bne.n	8101802 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 81017fa:	4820      	ldr	r0, [pc, #128]	; (810187c <bno055_writeData+0x1c8>)
 81017fc:	f007 fc86 	bl	810910c <puts>
 8101800:	e017      	b.n	8101832 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8101802:	7bfb      	ldrb	r3, [r7, #15]
 8101804:	2b60      	cmp	r3, #96	; 0x60
 8101806:	d103      	bne.n	8101810 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8101808:	481d      	ldr	r0, [pc, #116]	; (8101880 <bno055_writeData+0x1cc>)
 810180a:	f007 fc7f 	bl	810910c <puts>
 810180e:	e010      	b.n	8101832 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8101810:	7bfb      	ldrb	r3, [r7, #15]
 8101812:	2ba0      	cmp	r3, #160	; 0xa0
 8101814:	d103      	bne.n	810181e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8101816:	481b      	ldr	r0, [pc, #108]	; (8101884 <bno055_writeData+0x1d0>)
 8101818:	f007 fc78 	bl	810910c <puts>
 810181c:	e009      	b.n	8101832 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 810181e:	7bfb      	ldrb	r3, [r7, #15]
 8101820:	2be0      	cmp	r3, #224	; 0xe0
 8101822:	d106      	bne.n	8101832 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8101824:	4818      	ldr	r0, [pc, #96]	; (8101888 <bno055_writeData+0x1d4>)
 8101826:	f007 fc71 	bl	810910c <puts>
 810182a:	e002      	b.n	8101832 <bno055_writeData+0x17e>
    return;
 810182c:	bf00      	nop
 810182e:	e000      	b.n	8101832 <bno055_writeData+0x17e>
    return;
 8101830:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8101832:	3718      	adds	r7, #24
 8101834:	46bd      	mov	sp, r7
 8101836:	bd80      	pop	{r7, pc}
 8101838:	10000218 	.word	0x10000218
 810183c:	0810cd3c 	.word	0x0810cd3c
 8101840:	0810cd60 	.word	0x0810cd60
 8101844:	0810cd88 	.word	0x0810cd88
 8101848:	0810cdac 	.word	0x0810cdac
 810184c:	0810cdc4 	.word	0x0810cdc4
 8101850:	0810cdd8 	.word	0x0810cdd8
 8101854:	0810cdec 	.word	0x0810cdec
 8101858:	0810ce00 	.word	0x0810ce00
 810185c:	0810ce14 	.word	0x0810ce14
 8101860:	0810ce28 	.word	0x0810ce28
 8101864:	0810ce40 	.word	0x0810ce40
 8101868:	0810ce58 	.word	0x0810ce58
 810186c:	0810ce6c 	.word	0x0810ce6c
 8101870:	0810ce84 	.word	0x0810ce84
 8101874:	0810ce9c 	.word	0x0810ce9c
 8101878:	0810ceb4 	.word	0x0810ceb4
 810187c:	0810ced4 	.word	0x0810ced4
 8101880:	0810cef4 	.word	0x0810cef4
 8101884:	0810cf0c 	.word	0x0810cf0c
 8101888:	0810cf24 	.word	0x0810cf24

0810188c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 810188c:	b580      	push	{r7, lr}
 810188e:	b086      	sub	sp, #24
 8101890:	af02      	add	r7, sp, #8
 8101892:	4603      	mov	r3, r0
 8101894:	6039      	str	r1, [r7, #0]
 8101896:	71fb      	strb	r3, [r7, #7]
 8101898:	4613      	mov	r3, r2
 810189a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 810189c:	4b0d      	ldr	r3, [pc, #52]	; (81018d4 <bno055_readData+0x48>)
 810189e:	6818      	ldr	r0, [r3, #0]
 81018a0:	1dfa      	adds	r2, r7, #7
 81018a2:	2364      	movs	r3, #100	; 0x64
 81018a4:	9300      	str	r3, [sp, #0]
 81018a6:	2301      	movs	r3, #1
 81018a8:	2150      	movs	r1, #80	; 0x50
 81018aa:	f001 f9dd 	bl	8102c68 <HAL_I2C_Master_Transmit>
 81018ae:	4603      	mov	r3, r0
 81018b0:	73fb      	strb	r3, [r7, #15]
                          100);
  ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 81018b2:	4b08      	ldr	r3, [pc, #32]	; (81018d4 <bno055_readData+0x48>)
 81018b4:	6818      	ldr	r0, [r3, #0]
 81018b6:	79bb      	ldrb	r3, [r7, #6]
 81018b8:	b29b      	uxth	r3, r3
 81018ba:	2264      	movs	r2, #100	; 0x64
 81018bc:	9200      	str	r2, [sp, #0]
 81018be:	683a      	ldr	r2, [r7, #0]
 81018c0:	2150      	movs	r1, #80	; 0x50
 81018c2:	f001 fac5 	bl	8102e50 <HAL_I2C_Master_Receive>
 81018c6:	4603      	mov	r3, r0
 81018c8:	73fb      	strb	r3, [r7, #15]
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 81018ca:	bf00      	nop
 81018cc:	3710      	adds	r7, #16
 81018ce:	46bd      	mov	sp, r7
 81018d0:	bd80      	pop	{r7, pc}
 81018d2:	bf00      	nop
 81018d4:	10000218 	.word	0x10000218

081018d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81018d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81018dc:	b094      	sub	sp, #80	; 0x50
 81018de:	af04      	add	r7, sp, #16

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81018e0:	4b68      	ldr	r3, [pc, #416]	; (8101a84 <main+0x1ac>)
 81018e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018e6:	4a67      	ldr	r2, [pc, #412]	; (8101a84 <main+0x1ac>)
 81018e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81018ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81018f0:	4b64      	ldr	r3, [pc, #400]	; (8101a84 <main+0x1ac>)
 81018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81018fa:	623b      	str	r3, [r7, #32]
 81018fc:	6a3b      	ldr	r3, [r7, #32]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81018fe:	2001      	movs	r0, #1
 8101900:	f001 f910 	bl	8102b24 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101904:	f002 f85e 	bl	81039c4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101908:	2201      	movs	r2, #1
 810190a:	2102      	movs	r1, #2
 810190c:	2000      	movs	r0, #0
 810190e:	f001 ffdf 	bl	81038d0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101912:	4b5d      	ldr	r3, [pc, #372]	; (8101a88 <main+0x1b0>)
 8101914:	681b      	ldr	r3, [r3, #0]
 8101916:	091b      	lsrs	r3, r3, #4
 8101918:	f003 030f 	and.w	r3, r3, #15
 810191c:	2b07      	cmp	r3, #7
 810191e:	d108      	bne.n	8101932 <main+0x5a>
 8101920:	4b5a      	ldr	r3, [pc, #360]	; (8101a8c <main+0x1b4>)
 8101922:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101926:	4a59      	ldr	r2, [pc, #356]	; (8101a8c <main+0x1b4>)
 8101928:	f043 0301 	orr.w	r3, r3, #1
 810192c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101930:	e007      	b.n	8101942 <main+0x6a>
 8101932:	4b56      	ldr	r3, [pc, #344]	; (8101a8c <main+0x1b4>)
 8101934:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101938:	4a54      	ldr	r2, [pc, #336]	; (8101a8c <main+0x1b4>)
 810193a:	f043 0301 	orr.w	r3, r3, #1
 810193e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101942:	f000 fd43 	bl	81023cc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101946:	f000 fa51 	bl	8101dec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 810194a:	f000 fa03 	bl	8101d54 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 810194e:	f000 f8af 	bl	8101ab0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8101952:	f000 f8ed 	bl	8101b30 <MX_TIM1_Init>
  MX_TIM2_Init();
 8101956:	f000 f9af 	bl	8101cb8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 810195a:	484d      	ldr	r0, [pc, #308]	; (8101a90 <main+0x1b8>)
 810195c:	f004 f89c 	bl	8105a98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8101960:	2100      	movs	r1, #0
 8101962:	484c      	ldr	r0, [pc, #304]	; (8101a94 <main+0x1bc>)
 8101964:	f004 f972 	bl	8105c4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8101968:	2104      	movs	r1, #4
 810196a:	484a      	ldr	r0, [pc, #296]	; (8101a94 <main+0x1bc>)
 810196c:	f004 f96e 	bl	8105c4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8101970:	2108      	movs	r1, #8
 8101972:	4848      	ldr	r0, [pc, #288]	; (8101a94 <main+0x1bc>)
 8101974:	f004 f96a 	bl	8105c4c <HAL_TIM_PWM_Start>

  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, BNO055_I2C_ADDR << 1,5,1000);
 8101978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810197c:	2205      	movs	r2, #5
 810197e:	2150      	movs	r1, #80	; 0x50
 8101980:	4845      	ldr	r0, [pc, #276]	; (8101a98 <main+0x1c0>)
 8101982:	f001 fb5b 	bl	810303c <HAL_I2C_IsDeviceReady>
 8101986:	4603      	mov	r3, r0
 8101988:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  bno055_assignI2C(&hi2c1);
 810198c:	4842      	ldr	r0, [pc, #264]	; (8101a98 <main+0x1c0>)
 810198e:	f7ff fe75 	bl	810167c <bno055_assignI2C>
  bno055_setup();
 8101992:	f7ff fcc3 	bl	810131c <bno055_setup>
  bno055_setOperationModeNDOF();
 8101996:	f7ff fcae 	bl	81012f6 <bno055_setOperationModeNDOF>

  init_tune_PID(&pid, dt, 0.05, 1, 0);
 810199a:	4b40      	ldr	r3, [pc, #256]	; (8101a9c <main+0x1c4>)
 810199c:	edd3 7a00 	vldr	s15, [r3]
 81019a0:	eddf 1a3f 	vldr	s3, [pc, #252]	; 8101aa0 <main+0x1c8>
 81019a4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 81019a8:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8101aa4 <main+0x1cc>
 81019ac:	eeb0 0a67 	vmov.f32	s0, s15
 81019b0:	483d      	ldr	r0, [pc, #244]	; (8101aa8 <main+0x1d0>)
 81019b2:	f7ff fbc1 	bl	8101138 <init_tune_PID>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  bno055_vector_t v = bno055_getVectorEuler();
 81019b6:	f7ff fe1d 	bl	81015f4 <bno055_getVectorEuler>
 81019ba:	eeb0 4a40 	vmov.f32	s8, s0
 81019be:	eef0 4a60 	vmov.f32	s9, s1
 81019c2:	eeb0 5a41 	vmov.f32	s10, s2
 81019c6:	eef0 5a61 	vmov.f32	s11, s3
 81019ca:	eeb0 6a42 	vmov.f32	s12, s4
 81019ce:	eef0 6a62 	vmov.f32	s13, s5
 81019d2:	eeb0 7a43 	vmov.f32	s14, s6
 81019d6:	eef0 7a63 	vmov.f32	s15, s7
 81019da:	ed87 4b00 	vstr	d4, [r7]
 81019de:	ed87 5b02 	vstr	d5, [r7, #8]
 81019e2:	ed87 6b04 	vstr	d6, [r7, #16]
 81019e6:	ed87 7b06 	vstr	d7, [r7, #24]
	  roll = (float)v.y;
 81019ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 81019ee:	4610      	mov	r0, r2
 81019f0:	4619      	mov	r1, r3
 81019f2:	f7ff f981 	bl	8100cf8 <__aeabi_d2f>
 81019f6:	4603      	mov	r3, r0
 81019f8:	63bb      	str	r3, [r7, #56]	; 0x38


	  pitch = (float)v.z;
 81019fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 81019fe:	4610      	mov	r0, r2
 8101a00:	4619      	mov	r1, r3
 8101a02:	f7ff f979 	bl	8100cf8 <__aeabi_d2f>
 8101a06:	4603      	mov	r3, r0
 8101a08:	637b      	str	r3, [r7, #52]	; 0x34
	  yaw = (float)v.x;
 8101a0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101a0e:	4610      	mov	r0, r2
 8101a10:	4619      	mov	r1, r3
 8101a12:	f7ff f971 	bl	8100cf8 <__aeabi_d2f>
 8101a16:	4603      	mov	r3, r0
 8101a18:	633b      	str	r3, [r7, #48]	; 0x30
	  //printf("Angoli: %f %f %f\r\n",roll,pitch,yaw);
	  u_roll = PID_controller(&pid, roll, 0.0);
 8101a1a:	eddf 0a21 	vldr	s1, [pc, #132]	; 8101aa0 <main+0x1c8>
 8101a1e:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8101a22:	4821      	ldr	r0, [pc, #132]	; (8101aa8 <main+0x1d0>)
 8101a24:	f7ff fbb0 	bl	8101188 <PID_controller>
 8101a28:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	  u_pitch = PID_controller(&pid, pitch, 0.0);
 8101a2c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8101aa0 <main+0x1c8>
 8101a30:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8101a34:	481c      	ldr	r0, [pc, #112]	; (8101aa8 <main+0x1d0>)
 8101a36:	f7ff fba7 	bl	8101188 <PID_controller>
 8101a3a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	  u_yaw = PID_controller(&pid, yaw, 0.0);
 8101a3e:	eddf 0a18 	vldr	s1, [pc, #96]	; 8101aa0 <main+0x1c8>
 8101a42:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8101a46:	4818      	ldr	r0, [pc, #96]	; (8101aa8 <main+0x1d0>)
 8101a48:	f7ff fb9e 	bl	8101188 <PID_controller>
 8101a4c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	  printf("%f %f %f\r\n",u_roll,u_pitch,u_yaw);
 8101a50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8101a52:	f7fe fe01 	bl	8100658 <__aeabi_f2d>
 8101a56:	4680      	mov	r8, r0
 8101a58:	4689      	mov	r9, r1
 8101a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8101a5c:	f7fe fdfc 	bl	8100658 <__aeabi_f2d>
 8101a60:	4604      	mov	r4, r0
 8101a62:	460d      	mov	r5, r1
 8101a64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8101a66:	f7fe fdf7 	bl	8100658 <__aeabi_f2d>
 8101a6a:	4602      	mov	r2, r0
 8101a6c:	460b      	mov	r3, r1
 8101a6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8101a72:	e9cd 4500 	strd	r4, r5, [sp]
 8101a76:	4642      	mov	r2, r8
 8101a78:	464b      	mov	r3, r9
 8101a7a:	480c      	ldr	r0, [pc, #48]	; (8101aac <main+0x1d4>)
 8101a7c:	f007 fac0 	bl	8109000 <iprintf>
  {
 8101a80:	e799      	b.n	81019b6 <main+0xde>
 8101a82:	bf00      	nop
 8101a84:	58024400 	.word	0x58024400
 8101a88:	e000ed00 	.word	0xe000ed00
 8101a8c:	58026400 	.word	0x58026400
 8101a90:	100002bc 	.word	0x100002bc
 8101a94:	10000270 	.word	0x10000270
 8101a98:	1000021c 	.word	0x1000021c
 8101a9c:	10000014 	.word	0x10000014
 8101aa0:	00000000 	.word	0x00000000
 8101aa4:	3d4ccccd 	.word	0x3d4ccccd
 8101aa8:	1000039c 	.word	0x1000039c
 8101aac:	0810cf3c 	.word	0x0810cf3c

08101ab0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8101ab0:	b580      	push	{r7, lr}
 8101ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101ab4:	4b1b      	ldr	r3, [pc, #108]	; (8101b24 <MX_I2C1_Init+0x74>)
 8101ab6:	4a1c      	ldr	r2, [pc, #112]	; (8101b28 <MX_I2C1_Init+0x78>)
 8101ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 8101aba:	4b1a      	ldr	r3, [pc, #104]	; (8101b24 <MX_I2C1_Init+0x74>)
 8101abc:	4a1b      	ldr	r2, [pc, #108]	; (8101b2c <MX_I2C1_Init+0x7c>)
 8101abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101ac0:	4b18      	ldr	r3, [pc, #96]	; (8101b24 <MX_I2C1_Init+0x74>)
 8101ac2:	2200      	movs	r2, #0
 8101ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101ac6:	4b17      	ldr	r3, [pc, #92]	; (8101b24 <MX_I2C1_Init+0x74>)
 8101ac8:	2201      	movs	r2, #1
 8101aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101acc:	4b15      	ldr	r3, [pc, #84]	; (8101b24 <MX_I2C1_Init+0x74>)
 8101ace:	2200      	movs	r2, #0
 8101ad0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101ad2:	4b14      	ldr	r3, [pc, #80]	; (8101b24 <MX_I2C1_Init+0x74>)
 8101ad4:	2200      	movs	r2, #0
 8101ad6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101ad8:	4b12      	ldr	r3, [pc, #72]	; (8101b24 <MX_I2C1_Init+0x74>)
 8101ada:	2200      	movs	r2, #0
 8101adc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101ade:	4b11      	ldr	r3, [pc, #68]	; (8101b24 <MX_I2C1_Init+0x74>)
 8101ae0:	2200      	movs	r2, #0
 8101ae2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101ae4:	4b0f      	ldr	r3, [pc, #60]	; (8101b24 <MX_I2C1_Init+0x74>)
 8101ae6:	2200      	movs	r2, #0
 8101ae8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101aea:	480e      	ldr	r0, [pc, #56]	; (8101b24 <MX_I2C1_Init+0x74>)
 8101aec:	f001 f82c 	bl	8102b48 <HAL_I2C_Init>
 8101af0:	4603      	mov	r3, r0
 8101af2:	2b00      	cmp	r3, #0
 8101af4:	d001      	beq.n	8101afa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101af6:	f000 f9d9 	bl	8101eac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101afa:	2100      	movs	r1, #0
 8101afc:	4809      	ldr	r0, [pc, #36]	; (8101b24 <MX_I2C1_Init+0x74>)
 8101afe:	f001 fe4f 	bl	81037a0 <HAL_I2CEx_ConfigAnalogFilter>
 8101b02:	4603      	mov	r3, r0
 8101b04:	2b00      	cmp	r3, #0
 8101b06:	d001      	beq.n	8101b0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101b08:	f000 f9d0 	bl	8101eac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101b0c:	2100      	movs	r1, #0
 8101b0e:	4805      	ldr	r0, [pc, #20]	; (8101b24 <MX_I2C1_Init+0x74>)
 8101b10:	f001 fe91 	bl	8103836 <HAL_I2CEx_ConfigDigitalFilter>
 8101b14:	4603      	mov	r3, r0
 8101b16:	2b00      	cmp	r3, #0
 8101b18:	d001      	beq.n	8101b1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101b1a:	f000 f9c7 	bl	8101eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101b1e:	bf00      	nop
 8101b20:	bd80      	pop	{r7, pc}
 8101b22:	bf00      	nop
 8101b24:	1000021c 	.word	0x1000021c
 8101b28:	40005400 	.word	0x40005400
 8101b2c:	00909fce 	.word	0x00909fce

08101b30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8101b30:	b580      	push	{r7, lr}
 8101b32:	b09a      	sub	sp, #104	; 0x68
 8101b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101b36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8101b3a:	2200      	movs	r2, #0
 8101b3c:	601a      	str	r2, [r3, #0]
 8101b3e:	605a      	str	r2, [r3, #4]
 8101b40:	609a      	str	r2, [r3, #8]
 8101b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101b44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101b48:	2200      	movs	r2, #0
 8101b4a:	601a      	str	r2, [r3, #0]
 8101b4c:	605a      	str	r2, [r3, #4]
 8101b4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101b50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101b54:	2200      	movs	r2, #0
 8101b56:	601a      	str	r2, [r3, #0]
 8101b58:	605a      	str	r2, [r3, #4]
 8101b5a:	609a      	str	r2, [r3, #8]
 8101b5c:	60da      	str	r2, [r3, #12]
 8101b5e:	611a      	str	r2, [r3, #16]
 8101b60:	615a      	str	r2, [r3, #20]
 8101b62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8101b64:	1d3b      	adds	r3, r7, #4
 8101b66:	222c      	movs	r2, #44	; 0x2c
 8101b68:	2100      	movs	r1, #0
 8101b6a:	4618      	mov	r0, r3
 8101b6c:	f006 fbc6 	bl	81082fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8101b70:	4b4f      	ldr	r3, [pc, #316]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101b72:	4a50      	ldr	r2, [pc, #320]	; (8101cb4 <MX_TIM1_Init+0x184>)
 8101b74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8101b76:	4b4e      	ldr	r3, [pc, #312]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101b78:	22ef      	movs	r2, #239	; 0xef
 8101b7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101b7c:	4b4c      	ldr	r3, [pc, #304]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101b7e:	2200      	movs	r2, #0
 8101b80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8101b82:	4b4b      	ldr	r3, [pc, #300]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101b84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101b88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101b8a:	4b49      	ldr	r3, [pc, #292]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101b8c:	2200      	movs	r2, #0
 8101b8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101b90:	4b47      	ldr	r3, [pc, #284]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101b92:	2200      	movs	r2, #0
 8101b94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101b96:	4b46      	ldr	r3, [pc, #280]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101b98:	2200      	movs	r2, #0
 8101b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8101b9c:	4844      	ldr	r0, [pc, #272]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101b9e:	f003 ff23 	bl	81059e8 <HAL_TIM_Base_Init>
 8101ba2:	4603      	mov	r3, r0
 8101ba4:	2b00      	cmp	r3, #0
 8101ba6:	d001      	beq.n	8101bac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8101ba8:	f000 f980 	bl	8101eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101bb0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8101bb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8101bb6:	4619      	mov	r1, r3
 8101bb8:	483d      	ldr	r0, [pc, #244]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101bba:	f004 fb89 	bl	81062d0 <HAL_TIM_ConfigClockSource>
 8101bbe:	4603      	mov	r3, r0
 8101bc0:	2b00      	cmp	r3, #0
 8101bc2:	d001      	beq.n	8101bc8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8101bc4:	f000 f972 	bl	8101eac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8101bc8:	4839      	ldr	r0, [pc, #228]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101bca:	f003 ffdd 	bl	8105b88 <HAL_TIM_PWM_Init>
 8101bce:	4603      	mov	r3, r0
 8101bd0:	2b00      	cmp	r3, #0
 8101bd2:	d001      	beq.n	8101bd8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8101bd4:	f000 f96a 	bl	8101eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101bd8:	2300      	movs	r3, #0
 8101bda:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8101bdc:	2300      	movs	r3, #0
 8101bde:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101be0:	2300      	movs	r3, #0
 8101be2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8101be4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101be8:	4619      	mov	r1, r3
 8101bea:	4831      	ldr	r0, [pc, #196]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101bec:	f005 f8c2 	bl	8106d74 <HAL_TIMEx_MasterConfigSynchronization>
 8101bf0:	4603      	mov	r3, r0
 8101bf2:	2b00      	cmp	r3, #0
 8101bf4:	d001      	beq.n	8101bfa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8101bf6:	f000 f959 	bl	8101eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101bfa:	2360      	movs	r3, #96	; 0x60
 8101bfc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8101bfe:	2300      	movs	r3, #0
 8101c00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101c02:	2300      	movs	r3, #0
 8101c04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8101c06:	2300      	movs	r3, #0
 8101c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101c0a:	2300      	movs	r3, #0
 8101c0c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8101c0e:	2300      	movs	r3, #0
 8101c10:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8101c12:	2300      	movs	r3, #0
 8101c14:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101c16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101c1a:	2200      	movs	r2, #0
 8101c1c:	4619      	mov	r1, r3
 8101c1e:	4824      	ldr	r0, [pc, #144]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101c20:	f004 fa42 	bl	81060a8 <HAL_TIM_PWM_ConfigChannel>
 8101c24:	4603      	mov	r3, r0
 8101c26:	2b00      	cmp	r3, #0
 8101c28:	d001      	beq.n	8101c2e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8101c2a:	f000 f93f 	bl	8101eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8101c2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101c32:	2204      	movs	r2, #4
 8101c34:	4619      	mov	r1, r3
 8101c36:	481e      	ldr	r0, [pc, #120]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101c38:	f004 fa36 	bl	81060a8 <HAL_TIM_PWM_ConfigChannel>
 8101c3c:	4603      	mov	r3, r0
 8101c3e:	2b00      	cmp	r3, #0
 8101c40:	d001      	beq.n	8101c46 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8101c42:	f000 f933 	bl	8101eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8101c46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101c4a:	2208      	movs	r2, #8
 8101c4c:	4619      	mov	r1, r3
 8101c4e:	4818      	ldr	r0, [pc, #96]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101c50:	f004 fa2a 	bl	81060a8 <HAL_TIM_PWM_ConfigChannel>
 8101c54:	4603      	mov	r3, r0
 8101c56:	2b00      	cmp	r3, #0
 8101c58:	d001      	beq.n	8101c5e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8101c5a:	f000 f927 	bl	8101eac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8101c5e:	2300      	movs	r3, #0
 8101c60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101c62:	2300      	movs	r3, #0
 8101c64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8101c66:	2300      	movs	r3, #0
 8101c68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8101c6a:	2300      	movs	r3, #0
 8101c6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8101c6e:	2300      	movs	r3, #0
 8101c70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101c76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8101c78:	2300      	movs	r3, #0
 8101c7a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8101c7c:	2300      	movs	r3, #0
 8101c7e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101c80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101c84:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8101c86:	2300      	movs	r3, #0
 8101c88:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8101c8a:	2300      	movs	r3, #0
 8101c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8101c8e:	1d3b      	adds	r3, r7, #4
 8101c90:	4619      	mov	r1, r3
 8101c92:	4807      	ldr	r0, [pc, #28]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101c94:	f005 f8fc 	bl	8106e90 <HAL_TIMEx_ConfigBreakDeadTime>
 8101c98:	4603      	mov	r3, r0
 8101c9a:	2b00      	cmp	r3, #0
 8101c9c:	d001      	beq.n	8101ca2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8101c9e:	f000 f905 	bl	8101eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8101ca2:	4803      	ldr	r0, [pc, #12]	; (8101cb0 <MX_TIM1_Init+0x180>)
 8101ca4:	f000 f9c8 	bl	8102038 <HAL_TIM_MspPostInit>

}
 8101ca8:	bf00      	nop
 8101caa:	3768      	adds	r7, #104	; 0x68
 8101cac:	46bd      	mov	sp, r7
 8101cae:	bd80      	pop	{r7, pc}
 8101cb0:	10000270 	.word	0x10000270
 8101cb4:	40010000 	.word	0x40010000

08101cb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8101cb8:	b580      	push	{r7, lr}
 8101cba:	b088      	sub	sp, #32
 8101cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101cbe:	f107 0310 	add.w	r3, r7, #16
 8101cc2:	2200      	movs	r2, #0
 8101cc4:	601a      	str	r2, [r3, #0]
 8101cc6:	605a      	str	r2, [r3, #4]
 8101cc8:	609a      	str	r2, [r3, #8]
 8101cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101ccc:	1d3b      	adds	r3, r7, #4
 8101cce:	2200      	movs	r2, #0
 8101cd0:	601a      	str	r2, [r3, #0]
 8101cd2:	605a      	str	r2, [r3, #4]
 8101cd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8101cd6:	4b1e      	ldr	r3, [pc, #120]	; (8101d50 <MX_TIM2_Init+0x98>)
 8101cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101cdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8101cde:	4b1c      	ldr	r3, [pc, #112]	; (8101d50 <MX_TIM2_Init+0x98>)
 8101ce0:	22ef      	movs	r2, #239	; 0xef
 8101ce2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101ce4:	4b1a      	ldr	r3, [pc, #104]	; (8101d50 <MX_TIM2_Init+0x98>)
 8101ce6:	2200      	movs	r2, #0
 8101ce8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8101cea:	4b19      	ldr	r3, [pc, #100]	; (8101d50 <MX_TIM2_Init+0x98>)
 8101cec:	f242 720f 	movw	r2, #9999	; 0x270f
 8101cf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101cf2:	4b17      	ldr	r3, [pc, #92]	; (8101d50 <MX_TIM2_Init+0x98>)
 8101cf4:	2200      	movs	r2, #0
 8101cf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101cf8:	4b15      	ldr	r3, [pc, #84]	; (8101d50 <MX_TIM2_Init+0x98>)
 8101cfa:	2200      	movs	r2, #0
 8101cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8101cfe:	4814      	ldr	r0, [pc, #80]	; (8101d50 <MX_TIM2_Init+0x98>)
 8101d00:	f003 fe72 	bl	81059e8 <HAL_TIM_Base_Init>
 8101d04:	4603      	mov	r3, r0
 8101d06:	2b00      	cmp	r3, #0
 8101d08:	d001      	beq.n	8101d0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8101d0a:	f000 f8cf 	bl	8101eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101d12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8101d14:	f107 0310 	add.w	r3, r7, #16
 8101d18:	4619      	mov	r1, r3
 8101d1a:	480d      	ldr	r0, [pc, #52]	; (8101d50 <MX_TIM2_Init+0x98>)
 8101d1c:	f004 fad8 	bl	81062d0 <HAL_TIM_ConfigClockSource>
 8101d20:	4603      	mov	r3, r0
 8101d22:	2b00      	cmp	r3, #0
 8101d24:	d001      	beq.n	8101d2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8101d26:	f000 f8c1 	bl	8101eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101d2a:	2300      	movs	r3, #0
 8101d2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101d2e:	2300      	movs	r3, #0
 8101d30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8101d32:	1d3b      	adds	r3, r7, #4
 8101d34:	4619      	mov	r1, r3
 8101d36:	4806      	ldr	r0, [pc, #24]	; (8101d50 <MX_TIM2_Init+0x98>)
 8101d38:	f005 f81c 	bl	8106d74 <HAL_TIMEx_MasterConfigSynchronization>
 8101d3c:	4603      	mov	r3, r0
 8101d3e:	2b00      	cmp	r3, #0
 8101d40:	d001      	beq.n	8101d46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8101d42:	f000 f8b3 	bl	8101eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8101d46:	bf00      	nop
 8101d48:	3720      	adds	r7, #32
 8101d4a:	46bd      	mov	sp, r7
 8101d4c:	bd80      	pop	{r7, pc}
 8101d4e:	bf00      	nop
 8101d50:	100002bc 	.word	0x100002bc

08101d54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101d54:	b580      	push	{r7, lr}
 8101d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101d58:	4b22      	ldr	r3, [pc, #136]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101d5a:	4a23      	ldr	r2, [pc, #140]	; (8101de8 <MX_USART3_UART_Init+0x94>)
 8101d5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101d5e:	4b21      	ldr	r3, [pc, #132]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101d60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101d64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101d66:	4b1f      	ldr	r3, [pc, #124]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101d68:	2200      	movs	r2, #0
 8101d6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101d6c:	4b1d      	ldr	r3, [pc, #116]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101d6e:	2200      	movs	r2, #0
 8101d70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101d72:	4b1c      	ldr	r3, [pc, #112]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101d74:	2200      	movs	r2, #0
 8101d76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101d78:	4b1a      	ldr	r3, [pc, #104]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101d7a:	220c      	movs	r2, #12
 8101d7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101d7e:	4b19      	ldr	r3, [pc, #100]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101d80:	2200      	movs	r2, #0
 8101d82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101d84:	4b17      	ldr	r3, [pc, #92]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101d86:	2200      	movs	r2, #0
 8101d88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101d8a:	4b16      	ldr	r3, [pc, #88]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101d8c:	2200      	movs	r2, #0
 8101d8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101d90:	4b14      	ldr	r3, [pc, #80]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101d92:	2200      	movs	r2, #0
 8101d94:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101d96:	4b13      	ldr	r3, [pc, #76]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101d98:	2200      	movs	r2, #0
 8101d9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101d9c:	4811      	ldr	r0, [pc, #68]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101d9e:	f005 f913 	bl	8106fc8 <HAL_UART_Init>
 8101da2:	4603      	mov	r3, r0
 8101da4:	2b00      	cmp	r3, #0
 8101da6:	d001      	beq.n	8101dac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101da8:	f000 f880 	bl	8101eac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101dac:	2100      	movs	r1, #0
 8101dae:	480d      	ldr	r0, [pc, #52]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101db0:	f006 f9a2 	bl	81080f8 <HAL_UARTEx_SetTxFifoThreshold>
 8101db4:	4603      	mov	r3, r0
 8101db6:	2b00      	cmp	r3, #0
 8101db8:	d001      	beq.n	8101dbe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101dba:	f000 f877 	bl	8101eac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101dbe:	2100      	movs	r1, #0
 8101dc0:	4808      	ldr	r0, [pc, #32]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101dc2:	f006 f9d7 	bl	8108174 <HAL_UARTEx_SetRxFifoThreshold>
 8101dc6:	4603      	mov	r3, r0
 8101dc8:	2b00      	cmp	r3, #0
 8101dca:	d001      	beq.n	8101dd0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101dcc:	f000 f86e 	bl	8101eac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101dd0:	4804      	ldr	r0, [pc, #16]	; (8101de4 <MX_USART3_UART_Init+0x90>)
 8101dd2:	f006 f958 	bl	8108086 <HAL_UARTEx_DisableFifoMode>
 8101dd6:	4603      	mov	r3, r0
 8101dd8:	2b00      	cmp	r3, #0
 8101dda:	d001      	beq.n	8101de0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101ddc:	f000 f866 	bl	8101eac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101de0:	bf00      	nop
 8101de2:	bd80      	pop	{r7, pc}
 8101de4:	10000308 	.word	0x10000308
 8101de8:	40004800 	.word	0x40004800

08101dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101dec:	b480      	push	{r7}
 8101dee:	b085      	sub	sp, #20
 8101df0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101df2:	4b19      	ldr	r3, [pc, #100]	; (8101e58 <MX_GPIO_Init+0x6c>)
 8101df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101df8:	4a17      	ldr	r2, [pc, #92]	; (8101e58 <MX_GPIO_Init+0x6c>)
 8101dfa:	f043 0310 	orr.w	r3, r3, #16
 8101dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e02:	4b15      	ldr	r3, [pc, #84]	; (8101e58 <MX_GPIO_Init+0x6c>)
 8101e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e08:	f003 0310 	and.w	r3, r3, #16
 8101e0c:	60fb      	str	r3, [r7, #12]
 8101e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101e10:	4b11      	ldr	r3, [pc, #68]	; (8101e58 <MX_GPIO_Init+0x6c>)
 8101e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e16:	4a10      	ldr	r2, [pc, #64]	; (8101e58 <MX_GPIO_Init+0x6c>)
 8101e18:	f043 0308 	orr.w	r3, r3, #8
 8101e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e20:	4b0d      	ldr	r3, [pc, #52]	; (8101e58 <MX_GPIO_Init+0x6c>)
 8101e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e26:	f003 0308 	and.w	r3, r3, #8
 8101e2a:	60bb      	str	r3, [r7, #8]
 8101e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101e2e:	4b0a      	ldr	r3, [pc, #40]	; (8101e58 <MX_GPIO_Init+0x6c>)
 8101e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e34:	4a08      	ldr	r2, [pc, #32]	; (8101e58 <MX_GPIO_Init+0x6c>)
 8101e36:	f043 0302 	orr.w	r3, r3, #2
 8101e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e3e:	4b06      	ldr	r3, [pc, #24]	; (8101e58 <MX_GPIO_Init+0x6c>)
 8101e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e44:	f003 0302 	and.w	r3, r3, #2
 8101e48:	607b      	str	r3, [r7, #4]
 8101e4a:	687b      	ldr	r3, [r7, #4]

}
 8101e4c:	bf00      	nop
 8101e4e:	3714      	adds	r7, #20
 8101e50:	46bd      	mov	sp, r7
 8101e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e56:	4770      	bx	lr
 8101e58:	58024400 	.word	0x58024400

08101e5c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 8101e5c:	b580      	push	{r7, lr}
 8101e5e:	b082      	sub	sp, #8
 8101e60:	af00      	add	r7, sp, #0
 8101e62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101e64:	1d39      	adds	r1, r7, #4
 8101e66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101e6a:	2201      	movs	r2, #1
 8101e6c:	4803      	ldr	r0, [pc, #12]	; (8101e7c <__io_putchar+0x20>)
 8101e6e:	f005 f8fb 	bl	8107068 <HAL_UART_Transmit>
	return ch;
 8101e72:	687b      	ldr	r3, [r7, #4]
}
 8101e74:	4618      	mov	r0, r3
 8101e76:	3708      	adds	r7, #8
 8101e78:	46bd      	mov	sp, r7
 8101e7a:	bd80      	pop	{r7, pc}
 8101e7c:	10000308 	.word	0x10000308

08101e80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8101e80:	b480      	push	{r7}
 8101e82:	b083      	sub	sp, #12
 8101e84:	af00      	add	r7, sp, #0
 8101e86:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8101e88:	687b      	ldr	r3, [r7, #4]
 8101e8a:	4a06      	ldr	r2, [pc, #24]	; (8101ea4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8101e8c:	4293      	cmp	r3, r2
 8101e8e:	d103      	bne.n	8101e98 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_Tc = 1;
 8101e90:	4b05      	ldr	r3, [pc, #20]	; (8101ea8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8101e92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8101e96:	601a      	str	r2, [r3, #0]
	}
}
 8101e98:	bf00      	nop
 8101e9a:	370c      	adds	r7, #12
 8101e9c:	46bd      	mov	sp, r7
 8101e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ea2:	4770      	bx	lr
 8101ea4:	100002bc 	.word	0x100002bc
 8101ea8:	100003b4 	.word	0x100003b4

08101eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101eac:	b480      	push	{r7}
 8101eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101eb0:	b672      	cpsid	i
}
 8101eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101eb4:	e7fe      	b.n	8101eb4 <Error_Handler+0x8>
	...

08101eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101eb8:	b480      	push	{r7}
 8101eba:	b083      	sub	sp, #12
 8101ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101ebe:	4b0a      	ldr	r3, [pc, #40]	; (8101ee8 <HAL_MspInit+0x30>)
 8101ec0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101ec4:	4a08      	ldr	r2, [pc, #32]	; (8101ee8 <HAL_MspInit+0x30>)
 8101ec6:	f043 0302 	orr.w	r3, r3, #2
 8101eca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101ece:	4b06      	ldr	r3, [pc, #24]	; (8101ee8 <HAL_MspInit+0x30>)
 8101ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101ed4:	f003 0302 	and.w	r3, r3, #2
 8101ed8:	607b      	str	r3, [r7, #4]
 8101eda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101edc:	bf00      	nop
 8101ede:	370c      	adds	r7, #12
 8101ee0:	46bd      	mov	sp, r7
 8101ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ee6:	4770      	bx	lr
 8101ee8:	58024400 	.word	0x58024400

08101eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8101eec:	b580      	push	{r7, lr}
 8101eee:	b0ba      	sub	sp, #232	; 0xe8
 8101ef0:	af00      	add	r7, sp, #0
 8101ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101ef4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101ef8:	2200      	movs	r2, #0
 8101efa:	601a      	str	r2, [r3, #0]
 8101efc:	605a      	str	r2, [r3, #4]
 8101efe:	609a      	str	r2, [r3, #8]
 8101f00:	60da      	str	r2, [r3, #12]
 8101f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101f04:	f107 0310 	add.w	r3, r7, #16
 8101f08:	22c0      	movs	r2, #192	; 0xc0
 8101f0a:	2100      	movs	r1, #0
 8101f0c:	4618      	mov	r0, r3
 8101f0e:	f006 f9f5 	bl	81082fc <memset>
  if(hi2c->Instance==I2C1)
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	681b      	ldr	r3, [r3, #0]
 8101f16:	4a26      	ldr	r2, [pc, #152]	; (8101fb0 <HAL_I2C_MspInit+0xc4>)
 8101f18:	4293      	cmp	r3, r2
 8101f1a:	d145      	bne.n	8101fa8 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101f1c:	f04f 0208 	mov.w	r2, #8
 8101f20:	f04f 0300 	mov.w	r3, #0
 8101f24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101f28:	2300      	movs	r3, #0
 8101f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101f2e:	f107 0310 	add.w	r3, r7, #16
 8101f32:	4618      	mov	r0, r3
 8101f34:	f001 ff2c 	bl	8103d90 <HAL_RCCEx_PeriphCLKConfig>
 8101f38:	4603      	mov	r3, r0
 8101f3a:	2b00      	cmp	r3, #0
 8101f3c:	d001      	beq.n	8101f42 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8101f3e:	f7ff ffb5 	bl	8101eac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101f42:	4b1c      	ldr	r3, [pc, #112]	; (8101fb4 <HAL_I2C_MspInit+0xc8>)
 8101f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f48:	4a1a      	ldr	r2, [pc, #104]	; (8101fb4 <HAL_I2C_MspInit+0xc8>)
 8101f4a:	f043 0302 	orr.w	r3, r3, #2
 8101f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f52:	4b18      	ldr	r3, [pc, #96]	; (8101fb4 <HAL_I2C_MspInit+0xc8>)
 8101f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f58:	f003 0302 	and.w	r3, r3, #2
 8101f5c:	60fb      	str	r3, [r7, #12]
 8101f5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8101f60:	23c0      	movs	r3, #192	; 0xc0
 8101f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101f66:	2312      	movs	r3, #18
 8101f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f6c:	2300      	movs	r3, #0
 8101f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f72:	2300      	movs	r3, #0
 8101f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101f78:	2304      	movs	r3, #4
 8101f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101f7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101f82:	4619      	mov	r1, r3
 8101f84:	480c      	ldr	r0, [pc, #48]	; (8101fb8 <HAL_I2C_MspInit+0xcc>)
 8101f86:	f000 fc1d 	bl	81027c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101f8a:	4b0a      	ldr	r3, [pc, #40]	; (8101fb4 <HAL_I2C_MspInit+0xc8>)
 8101f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101f90:	4a08      	ldr	r2, [pc, #32]	; (8101fb4 <HAL_I2C_MspInit+0xc8>)
 8101f92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101f96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101f9a:	4b06      	ldr	r3, [pc, #24]	; (8101fb4 <HAL_I2C_MspInit+0xc8>)
 8101f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101fa4:	60bb      	str	r3, [r7, #8]
 8101fa6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8101fa8:	bf00      	nop
 8101faa:	37e8      	adds	r7, #232	; 0xe8
 8101fac:	46bd      	mov	sp, r7
 8101fae:	bd80      	pop	{r7, pc}
 8101fb0:	40005400 	.word	0x40005400
 8101fb4:	58024400 	.word	0x58024400
 8101fb8:	58020400 	.word	0x58020400

08101fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101fbc:	b580      	push	{r7, lr}
 8101fbe:	b084      	sub	sp, #16
 8101fc0:	af00      	add	r7, sp, #0
 8101fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	681b      	ldr	r3, [r3, #0]
 8101fc8:	4a19      	ldr	r2, [pc, #100]	; (8102030 <HAL_TIM_Base_MspInit+0x74>)
 8101fca:	4293      	cmp	r3, r2
 8101fcc:	d10f      	bne.n	8101fee <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101fce:	4b19      	ldr	r3, [pc, #100]	; (8102034 <HAL_TIM_Base_MspInit+0x78>)
 8101fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101fd4:	4a17      	ldr	r2, [pc, #92]	; (8102034 <HAL_TIM_Base_MspInit+0x78>)
 8101fd6:	f043 0301 	orr.w	r3, r3, #1
 8101fda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101fde:	4b15      	ldr	r3, [pc, #84]	; (8102034 <HAL_TIM_Base_MspInit+0x78>)
 8101fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101fe4:	f003 0301 	and.w	r3, r3, #1
 8101fe8:	60fb      	str	r3, [r7, #12]
 8101fea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8101fec:	e01b      	b.n	8102026 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM2)
 8101fee:	687b      	ldr	r3, [r7, #4]
 8101ff0:	681b      	ldr	r3, [r3, #0]
 8101ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101ff6:	d116      	bne.n	8102026 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8101ff8:	4b0e      	ldr	r3, [pc, #56]	; (8102034 <HAL_TIM_Base_MspInit+0x78>)
 8101ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101ffe:	4a0d      	ldr	r2, [pc, #52]	; (8102034 <HAL_TIM_Base_MspInit+0x78>)
 8102000:	f043 0301 	orr.w	r3, r3, #1
 8102004:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102008:	4b0a      	ldr	r3, [pc, #40]	; (8102034 <HAL_TIM_Base_MspInit+0x78>)
 810200a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810200e:	f003 0301 	and.w	r3, r3, #1
 8102012:	60bb      	str	r3, [r7, #8]
 8102014:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8102016:	2200      	movs	r2, #0
 8102018:	2100      	movs	r1, #0
 810201a:	201c      	movs	r0, #28
 810201c:	f000 fb89 	bl	8102732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8102020:	201c      	movs	r0, #28
 8102022:	f000 fba0 	bl	8102766 <HAL_NVIC_EnableIRQ>
}
 8102026:	bf00      	nop
 8102028:	3710      	adds	r7, #16
 810202a:	46bd      	mov	sp, r7
 810202c:	bd80      	pop	{r7, pc}
 810202e:	bf00      	nop
 8102030:	40010000 	.word	0x40010000
 8102034:	58024400 	.word	0x58024400

08102038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102038:	b580      	push	{r7, lr}
 810203a:	b088      	sub	sp, #32
 810203c:	af00      	add	r7, sp, #0
 810203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102040:	f107 030c 	add.w	r3, r7, #12
 8102044:	2200      	movs	r2, #0
 8102046:	601a      	str	r2, [r3, #0]
 8102048:	605a      	str	r2, [r3, #4]
 810204a:	609a      	str	r2, [r3, #8]
 810204c:	60da      	str	r2, [r3, #12]
 810204e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8102050:	687b      	ldr	r3, [r7, #4]
 8102052:	681b      	ldr	r3, [r3, #0]
 8102054:	4a13      	ldr	r2, [pc, #76]	; (81020a4 <HAL_TIM_MspPostInit+0x6c>)
 8102056:	4293      	cmp	r3, r2
 8102058:	d11f      	bne.n	810209a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 810205a:	4b13      	ldr	r3, [pc, #76]	; (81020a8 <HAL_TIM_MspPostInit+0x70>)
 810205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102060:	4a11      	ldr	r2, [pc, #68]	; (81020a8 <HAL_TIM_MspPostInit+0x70>)
 8102062:	f043 0310 	orr.w	r3, r3, #16
 8102066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810206a:	4b0f      	ldr	r3, [pc, #60]	; (81020a8 <HAL_TIM_MspPostInit+0x70>)
 810206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102070:	f003 0310 	and.w	r3, r3, #16
 8102074:	60bb      	str	r3, [r7, #8]
 8102076:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8102078:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 810207c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810207e:	2302      	movs	r3, #2
 8102080:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102082:	2300      	movs	r3, #0
 8102084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102086:	2300      	movs	r3, #0
 8102088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 810208a:	2301      	movs	r3, #1
 810208c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810208e:	f107 030c 	add.w	r3, r7, #12
 8102092:	4619      	mov	r1, r3
 8102094:	4805      	ldr	r0, [pc, #20]	; (81020ac <HAL_TIM_MspPostInit+0x74>)
 8102096:	f000 fb95 	bl	81027c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 810209a:	bf00      	nop
 810209c:	3720      	adds	r7, #32
 810209e:	46bd      	mov	sp, r7
 81020a0:	bd80      	pop	{r7, pc}
 81020a2:	bf00      	nop
 81020a4:	40010000 	.word	0x40010000
 81020a8:	58024400 	.word	0x58024400
 81020ac:	58021000 	.word	0x58021000

081020b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81020b0:	b580      	push	{r7, lr}
 81020b2:	b0ba      	sub	sp, #232	; 0xe8
 81020b4:	af00      	add	r7, sp, #0
 81020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81020b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81020bc:	2200      	movs	r2, #0
 81020be:	601a      	str	r2, [r3, #0]
 81020c0:	605a      	str	r2, [r3, #4]
 81020c2:	609a      	str	r2, [r3, #8]
 81020c4:	60da      	str	r2, [r3, #12]
 81020c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81020c8:	f107 0310 	add.w	r3, r7, #16
 81020cc:	22c0      	movs	r2, #192	; 0xc0
 81020ce:	2100      	movs	r1, #0
 81020d0:	4618      	mov	r0, r3
 81020d2:	f006 f913 	bl	81082fc <memset>
  if(huart->Instance==USART3)
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	681b      	ldr	r3, [r3, #0]
 81020da:	4a27      	ldr	r2, [pc, #156]	; (8102178 <HAL_UART_MspInit+0xc8>)
 81020dc:	4293      	cmp	r3, r2
 81020de:	d146      	bne.n	810216e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81020e0:	f04f 0202 	mov.w	r2, #2
 81020e4:	f04f 0300 	mov.w	r3, #0
 81020e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81020ec:	2300      	movs	r3, #0
 81020ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81020f2:	f107 0310 	add.w	r3, r7, #16
 81020f6:	4618      	mov	r0, r3
 81020f8:	f001 fe4a 	bl	8103d90 <HAL_RCCEx_PeriphCLKConfig>
 81020fc:	4603      	mov	r3, r0
 81020fe:	2b00      	cmp	r3, #0
 8102100:	d001      	beq.n	8102106 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8102102:	f7ff fed3 	bl	8101eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102106:	4b1d      	ldr	r3, [pc, #116]	; (810217c <HAL_UART_MspInit+0xcc>)
 8102108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810210c:	4a1b      	ldr	r2, [pc, #108]	; (810217c <HAL_UART_MspInit+0xcc>)
 810210e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102112:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102116:	4b19      	ldr	r3, [pc, #100]	; (810217c <HAL_UART_MspInit+0xcc>)
 8102118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810211c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102120:	60fb      	str	r3, [r7, #12]
 8102122:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102124:	4b15      	ldr	r3, [pc, #84]	; (810217c <HAL_UART_MspInit+0xcc>)
 8102126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810212a:	4a14      	ldr	r2, [pc, #80]	; (810217c <HAL_UART_MspInit+0xcc>)
 810212c:	f043 0308 	orr.w	r3, r3, #8
 8102130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102134:	4b11      	ldr	r3, [pc, #68]	; (810217c <HAL_UART_MspInit+0xcc>)
 8102136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810213a:	f003 0308 	and.w	r3, r3, #8
 810213e:	60bb      	str	r3, [r7, #8]
 8102140:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8102142:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810214a:	2302      	movs	r3, #2
 810214c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102150:	2300      	movs	r3, #0
 8102152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102156:	2300      	movs	r3, #0
 8102158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810215c:	2307      	movs	r3, #7
 810215e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102162:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102166:	4619      	mov	r1, r3
 8102168:	4805      	ldr	r0, [pc, #20]	; (8102180 <HAL_UART_MspInit+0xd0>)
 810216a:	f000 fb2b 	bl	81027c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 810216e:	bf00      	nop
 8102170:	37e8      	adds	r7, #232	; 0xe8
 8102172:	46bd      	mov	sp, r7
 8102174:	bd80      	pop	{r7, pc}
 8102176:	bf00      	nop
 8102178:	40004800 	.word	0x40004800
 810217c:	58024400 	.word	0x58024400
 8102180:	58020c00 	.word	0x58020c00

08102184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102184:	b480      	push	{r7}
 8102186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102188:	e7fe      	b.n	8102188 <NMI_Handler+0x4>

0810218a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810218a:	b480      	push	{r7}
 810218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810218e:	e7fe      	b.n	810218e <HardFault_Handler+0x4>

08102190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102190:	b480      	push	{r7}
 8102192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102194:	e7fe      	b.n	8102194 <MemManage_Handler+0x4>

08102196 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102196:	b480      	push	{r7}
 8102198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810219a:	e7fe      	b.n	810219a <BusFault_Handler+0x4>

0810219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810219c:	b480      	push	{r7}
 810219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81021a0:	e7fe      	b.n	81021a0 <UsageFault_Handler+0x4>

081021a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81021a2:	b480      	push	{r7}
 81021a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81021a6:	bf00      	nop
 81021a8:	46bd      	mov	sp, r7
 81021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021ae:	4770      	bx	lr

081021b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81021b0:	b480      	push	{r7}
 81021b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81021b4:	bf00      	nop
 81021b6:	46bd      	mov	sp, r7
 81021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021bc:	4770      	bx	lr

081021be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81021be:	b480      	push	{r7}
 81021c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81021c2:	bf00      	nop
 81021c4:	46bd      	mov	sp, r7
 81021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021ca:	4770      	bx	lr

081021cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81021cc:	b580      	push	{r7, lr}
 81021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81021d0:	f000 f990 	bl	81024f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81021d4:	bf00      	nop
 81021d6:	bd80      	pop	{r7, pc}

081021d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81021d8:	b580      	push	{r7, lr}
 81021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81021dc:	4802      	ldr	r0, [pc, #8]	; (81021e8 <TIM2_IRQHandler+0x10>)
 81021de:	f003 fe43 	bl	8105e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81021e2:	bf00      	nop
 81021e4:	bd80      	pop	{r7, pc}
 81021e6:	bf00      	nop
 81021e8:	100002bc 	.word	0x100002bc

081021ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81021ec:	b480      	push	{r7}
 81021ee:	af00      	add	r7, sp, #0
  return 1;
 81021f0:	2301      	movs	r3, #1
}
 81021f2:	4618      	mov	r0, r3
 81021f4:	46bd      	mov	sp, r7
 81021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021fa:	4770      	bx	lr

081021fc <_kill>:

int _kill(int pid, int sig)
{
 81021fc:	b580      	push	{r7, lr}
 81021fe:	b082      	sub	sp, #8
 8102200:	af00      	add	r7, sp, #0
 8102202:	6078      	str	r0, [r7, #4]
 8102204:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8102206:	f006 f841 	bl	810828c <__errno>
 810220a:	4603      	mov	r3, r0
 810220c:	2216      	movs	r2, #22
 810220e:	601a      	str	r2, [r3, #0]
  return -1;
 8102210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102214:	4618      	mov	r0, r3
 8102216:	3708      	adds	r7, #8
 8102218:	46bd      	mov	sp, r7
 810221a:	bd80      	pop	{r7, pc}

0810221c <_exit>:

void _exit (int status)
{
 810221c:	b580      	push	{r7, lr}
 810221e:	b082      	sub	sp, #8
 8102220:	af00      	add	r7, sp, #0
 8102222:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8102224:	f04f 31ff 	mov.w	r1, #4294967295
 8102228:	6878      	ldr	r0, [r7, #4]
 810222a:	f7ff ffe7 	bl	81021fc <_kill>
  while (1) {}    /* Make sure we hang here */
 810222e:	e7fe      	b.n	810222e <_exit+0x12>

08102230 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102230:	b580      	push	{r7, lr}
 8102232:	b086      	sub	sp, #24
 8102234:	af00      	add	r7, sp, #0
 8102236:	60f8      	str	r0, [r7, #12]
 8102238:	60b9      	str	r1, [r7, #8]
 810223a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810223c:	2300      	movs	r3, #0
 810223e:	617b      	str	r3, [r7, #20]
 8102240:	e00a      	b.n	8102258 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8102242:	f3af 8000 	nop.w
 8102246:	4601      	mov	r1, r0
 8102248:	68bb      	ldr	r3, [r7, #8]
 810224a:	1c5a      	adds	r2, r3, #1
 810224c:	60ba      	str	r2, [r7, #8]
 810224e:	b2ca      	uxtb	r2, r1
 8102250:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102252:	697b      	ldr	r3, [r7, #20]
 8102254:	3301      	adds	r3, #1
 8102256:	617b      	str	r3, [r7, #20]
 8102258:	697a      	ldr	r2, [r7, #20]
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	429a      	cmp	r2, r3
 810225e:	dbf0      	blt.n	8102242 <_read+0x12>
  }

  return len;
 8102260:	687b      	ldr	r3, [r7, #4]
}
 8102262:	4618      	mov	r0, r3
 8102264:	3718      	adds	r7, #24
 8102266:	46bd      	mov	sp, r7
 8102268:	bd80      	pop	{r7, pc}

0810226a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810226a:	b580      	push	{r7, lr}
 810226c:	b086      	sub	sp, #24
 810226e:	af00      	add	r7, sp, #0
 8102270:	60f8      	str	r0, [r7, #12]
 8102272:	60b9      	str	r1, [r7, #8]
 8102274:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102276:	2300      	movs	r3, #0
 8102278:	617b      	str	r3, [r7, #20]
 810227a:	e009      	b.n	8102290 <_write+0x26>
  {
    __io_putchar(*ptr++);
 810227c:	68bb      	ldr	r3, [r7, #8]
 810227e:	1c5a      	adds	r2, r3, #1
 8102280:	60ba      	str	r2, [r7, #8]
 8102282:	781b      	ldrb	r3, [r3, #0]
 8102284:	4618      	mov	r0, r3
 8102286:	f7ff fde9 	bl	8101e5c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810228a:	697b      	ldr	r3, [r7, #20]
 810228c:	3301      	adds	r3, #1
 810228e:	617b      	str	r3, [r7, #20]
 8102290:	697a      	ldr	r2, [r7, #20]
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	429a      	cmp	r2, r3
 8102296:	dbf1      	blt.n	810227c <_write+0x12>
  }
  return len;
 8102298:	687b      	ldr	r3, [r7, #4]
}
 810229a:	4618      	mov	r0, r3
 810229c:	3718      	adds	r7, #24
 810229e:	46bd      	mov	sp, r7
 81022a0:	bd80      	pop	{r7, pc}

081022a2 <_close>:

int _close(int file)
{
 81022a2:	b480      	push	{r7}
 81022a4:	b083      	sub	sp, #12
 81022a6:	af00      	add	r7, sp, #0
 81022a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81022aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 81022ae:	4618      	mov	r0, r3
 81022b0:	370c      	adds	r7, #12
 81022b2:	46bd      	mov	sp, r7
 81022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022b8:	4770      	bx	lr

081022ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 81022ba:	b480      	push	{r7}
 81022bc:	b083      	sub	sp, #12
 81022be:	af00      	add	r7, sp, #0
 81022c0:	6078      	str	r0, [r7, #4]
 81022c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81022c4:	683b      	ldr	r3, [r7, #0]
 81022c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81022ca:	605a      	str	r2, [r3, #4]
  return 0;
 81022cc:	2300      	movs	r3, #0
}
 81022ce:	4618      	mov	r0, r3
 81022d0:	370c      	adds	r7, #12
 81022d2:	46bd      	mov	sp, r7
 81022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022d8:	4770      	bx	lr

081022da <_isatty>:

int _isatty(int file)
{
 81022da:	b480      	push	{r7}
 81022dc:	b083      	sub	sp, #12
 81022de:	af00      	add	r7, sp, #0
 81022e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 81022e2:	2301      	movs	r3, #1
}
 81022e4:	4618      	mov	r0, r3
 81022e6:	370c      	adds	r7, #12
 81022e8:	46bd      	mov	sp, r7
 81022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ee:	4770      	bx	lr

081022f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81022f0:	b480      	push	{r7}
 81022f2:	b085      	sub	sp, #20
 81022f4:	af00      	add	r7, sp, #0
 81022f6:	60f8      	str	r0, [r7, #12]
 81022f8:	60b9      	str	r1, [r7, #8]
 81022fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 81022fc:	2300      	movs	r3, #0
}
 81022fe:	4618      	mov	r0, r3
 8102300:	3714      	adds	r7, #20
 8102302:	46bd      	mov	sp, r7
 8102304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102308:	4770      	bx	lr
	...

0810230c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 810230c:	b580      	push	{r7, lr}
 810230e:	b086      	sub	sp, #24
 8102310:	af00      	add	r7, sp, #0
 8102312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102314:	4a14      	ldr	r2, [pc, #80]	; (8102368 <_sbrk+0x5c>)
 8102316:	4b15      	ldr	r3, [pc, #84]	; (810236c <_sbrk+0x60>)
 8102318:	1ad3      	subs	r3, r2, r3
 810231a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 810231c:	697b      	ldr	r3, [r7, #20]
 810231e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102320:	4b13      	ldr	r3, [pc, #76]	; (8102370 <_sbrk+0x64>)
 8102322:	681b      	ldr	r3, [r3, #0]
 8102324:	2b00      	cmp	r3, #0
 8102326:	d102      	bne.n	810232e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102328:	4b11      	ldr	r3, [pc, #68]	; (8102370 <_sbrk+0x64>)
 810232a:	4a12      	ldr	r2, [pc, #72]	; (8102374 <_sbrk+0x68>)
 810232c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810232e:	4b10      	ldr	r3, [pc, #64]	; (8102370 <_sbrk+0x64>)
 8102330:	681a      	ldr	r2, [r3, #0]
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	4413      	add	r3, r2
 8102336:	693a      	ldr	r2, [r7, #16]
 8102338:	429a      	cmp	r2, r3
 810233a:	d207      	bcs.n	810234c <_sbrk+0x40>
  {
    errno = ENOMEM;
 810233c:	f005 ffa6 	bl	810828c <__errno>
 8102340:	4603      	mov	r3, r0
 8102342:	220c      	movs	r2, #12
 8102344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8102346:	f04f 33ff 	mov.w	r3, #4294967295
 810234a:	e009      	b.n	8102360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 810234c:	4b08      	ldr	r3, [pc, #32]	; (8102370 <_sbrk+0x64>)
 810234e:	681b      	ldr	r3, [r3, #0]
 8102350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8102352:	4b07      	ldr	r3, [pc, #28]	; (8102370 <_sbrk+0x64>)
 8102354:	681a      	ldr	r2, [r3, #0]
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	4413      	add	r3, r2
 810235a:	4a05      	ldr	r2, [pc, #20]	; (8102370 <_sbrk+0x64>)
 810235c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810235e:	68fb      	ldr	r3, [r7, #12]
}
 8102360:	4618      	mov	r0, r3
 8102362:	3718      	adds	r7, #24
 8102364:	46bd      	mov	sp, r7
 8102366:	bd80      	pop	{r7, pc}
 8102368:	10048000 	.word	0x10048000
 810236c:	00000400 	.word	0x00000400
 8102370:	100003b8 	.word	0x100003b8
 8102374:	100003d0 	.word	0x100003d0

08102378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102378:	f8df d034 	ldr.w	sp, [pc, #52]	; 81023b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810237c:	f7fe fec4 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102380:	480c      	ldr	r0, [pc, #48]	; (81023b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102382:	490d      	ldr	r1, [pc, #52]	; (81023b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102384:	4a0d      	ldr	r2, [pc, #52]	; (81023bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102388:	e002      	b.n	8102390 <LoopCopyDataInit>

0810238a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810238a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810238c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810238e:	3304      	adds	r3, #4

08102390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102394:	d3f9      	bcc.n	810238a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102396:	4a0a      	ldr	r2, [pc, #40]	; (81023c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102398:	4c0a      	ldr	r4, [pc, #40]	; (81023c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 810239a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810239c:	e001      	b.n	81023a2 <LoopFillZerobss>

0810239e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810239e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81023a0:	3204      	adds	r2, #4

081023a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81023a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81023a4:	d3fb      	bcc.n	810239e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81023a6:	f005 ff77 	bl	8108298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81023aa:	f7ff fa95 	bl	81018d8 <main>
  bx  lr
 81023ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81023b0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81023b4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81023b8:	100001f4 	.word	0x100001f4
  ldr r2, =_sidata
 81023bc:	0810d43c 	.word	0x0810d43c
  ldr r2, =_sbss
 81023c0:	100001f4 	.word	0x100001f4
  ldr r4, =_ebss
 81023c4:	100003d0 	.word	0x100003d0

081023c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81023c8:	e7fe      	b.n	81023c8 <ADC3_IRQHandler>
	...

081023cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81023cc:	b580      	push	{r7, lr}
 81023ce:	b082      	sub	sp, #8
 81023d0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81023d2:	4b28      	ldr	r3, [pc, #160]	; (8102474 <HAL_Init+0xa8>)
 81023d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81023d8:	4a26      	ldr	r2, [pc, #152]	; (8102474 <HAL_Init+0xa8>)
 81023da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81023de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81023e2:	4b24      	ldr	r3, [pc, #144]	; (8102474 <HAL_Init+0xa8>)
 81023e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81023e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81023ec:	603b      	str	r3, [r7, #0]
 81023ee:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81023f0:	4b21      	ldr	r3, [pc, #132]	; (8102478 <HAL_Init+0xac>)
 81023f2:	681b      	ldr	r3, [r3, #0]
 81023f4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81023f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81023fc:	4a1e      	ldr	r2, [pc, #120]	; (8102478 <HAL_Init+0xac>)
 81023fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102402:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102404:	4b1c      	ldr	r3, [pc, #112]	; (8102478 <HAL_Init+0xac>)
 8102406:	681b      	ldr	r3, [r3, #0]
 8102408:	4a1b      	ldr	r2, [pc, #108]	; (8102478 <HAL_Init+0xac>)
 810240a:	f043 0301 	orr.w	r3, r3, #1
 810240e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102410:	2003      	movs	r0, #3
 8102412:	f000 f983 	bl	810271c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102416:	f001 fae3 	bl	81039e0 <HAL_RCC_GetSysClockFreq>
 810241a:	4602      	mov	r2, r0
 810241c:	4b15      	ldr	r3, [pc, #84]	; (8102474 <HAL_Init+0xa8>)
 810241e:	699b      	ldr	r3, [r3, #24]
 8102420:	0a1b      	lsrs	r3, r3, #8
 8102422:	f003 030f 	and.w	r3, r3, #15
 8102426:	4915      	ldr	r1, [pc, #84]	; (810247c <HAL_Init+0xb0>)
 8102428:	5ccb      	ldrb	r3, [r1, r3]
 810242a:	f003 031f 	and.w	r3, r3, #31
 810242e:	fa22 f303 	lsr.w	r3, r2, r3
 8102432:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102434:	4b0f      	ldr	r3, [pc, #60]	; (8102474 <HAL_Init+0xa8>)
 8102436:	699b      	ldr	r3, [r3, #24]
 8102438:	f003 030f 	and.w	r3, r3, #15
 810243c:	4a0f      	ldr	r2, [pc, #60]	; (810247c <HAL_Init+0xb0>)
 810243e:	5cd3      	ldrb	r3, [r2, r3]
 8102440:	f003 031f 	and.w	r3, r3, #31
 8102444:	687a      	ldr	r2, [r7, #4]
 8102446:	fa22 f303 	lsr.w	r3, r2, r3
 810244a:	4a0d      	ldr	r2, [pc, #52]	; (8102480 <HAL_Init+0xb4>)
 810244c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810244e:	4b0c      	ldr	r3, [pc, #48]	; (8102480 <HAL_Init+0xb4>)
 8102450:	681b      	ldr	r3, [r3, #0]
 8102452:	4a0c      	ldr	r2, [pc, #48]	; (8102484 <HAL_Init+0xb8>)
 8102454:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102456:	2000      	movs	r0, #0
 8102458:	f000 f816 	bl	8102488 <HAL_InitTick>
 810245c:	4603      	mov	r3, r0
 810245e:	2b00      	cmp	r3, #0
 8102460:	d001      	beq.n	8102466 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102462:	2301      	movs	r3, #1
 8102464:	e002      	b.n	810246c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102466:	f7ff fd27 	bl	8101eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810246a:	2300      	movs	r3, #0
}
 810246c:	4618      	mov	r0, r3
 810246e:	3708      	adds	r7, #8
 8102470:	46bd      	mov	sp, r7
 8102472:	bd80      	pop	{r7, pc}
 8102474:	58024400 	.word	0x58024400
 8102478:	40024400 	.word	0x40024400
 810247c:	0810cf48 	.word	0x0810cf48
 8102480:	10000004 	.word	0x10000004
 8102484:	10000000 	.word	0x10000000

08102488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102488:	b580      	push	{r7, lr}
 810248a:	b082      	sub	sp, #8
 810248c:	af00      	add	r7, sp, #0
 810248e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102490:	4b15      	ldr	r3, [pc, #84]	; (81024e8 <HAL_InitTick+0x60>)
 8102492:	781b      	ldrb	r3, [r3, #0]
 8102494:	2b00      	cmp	r3, #0
 8102496:	d101      	bne.n	810249c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102498:	2301      	movs	r3, #1
 810249a:	e021      	b.n	81024e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810249c:	4b13      	ldr	r3, [pc, #76]	; (81024ec <HAL_InitTick+0x64>)
 810249e:	681a      	ldr	r2, [r3, #0]
 81024a0:	4b11      	ldr	r3, [pc, #68]	; (81024e8 <HAL_InitTick+0x60>)
 81024a2:	781b      	ldrb	r3, [r3, #0]
 81024a4:	4619      	mov	r1, r3
 81024a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81024aa:	fbb3 f3f1 	udiv	r3, r3, r1
 81024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 81024b2:	4618      	mov	r0, r3
 81024b4:	f000 f965 	bl	8102782 <HAL_SYSTICK_Config>
 81024b8:	4603      	mov	r3, r0
 81024ba:	2b00      	cmp	r3, #0
 81024bc:	d001      	beq.n	81024c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81024be:	2301      	movs	r3, #1
 81024c0:	e00e      	b.n	81024e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81024c2:	687b      	ldr	r3, [r7, #4]
 81024c4:	2b0f      	cmp	r3, #15
 81024c6:	d80a      	bhi.n	81024de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81024c8:	2200      	movs	r2, #0
 81024ca:	6879      	ldr	r1, [r7, #4]
 81024cc:	f04f 30ff 	mov.w	r0, #4294967295
 81024d0:	f000 f92f 	bl	8102732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81024d4:	4a06      	ldr	r2, [pc, #24]	; (81024f0 <HAL_InitTick+0x68>)
 81024d6:	687b      	ldr	r3, [r7, #4]
 81024d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81024da:	2300      	movs	r3, #0
 81024dc:	e000      	b.n	81024e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81024de:	2301      	movs	r3, #1
}
 81024e0:	4618      	mov	r0, r3
 81024e2:	3708      	adds	r7, #8
 81024e4:	46bd      	mov	sp, r7
 81024e6:	bd80      	pop	{r7, pc}
 81024e8:	1000001c 	.word	0x1000001c
 81024ec:	10000000 	.word	0x10000000
 81024f0:	10000018 	.word	0x10000018

081024f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81024f4:	b480      	push	{r7}
 81024f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81024f8:	4b06      	ldr	r3, [pc, #24]	; (8102514 <HAL_IncTick+0x20>)
 81024fa:	781b      	ldrb	r3, [r3, #0]
 81024fc:	461a      	mov	r2, r3
 81024fe:	4b06      	ldr	r3, [pc, #24]	; (8102518 <HAL_IncTick+0x24>)
 8102500:	681b      	ldr	r3, [r3, #0]
 8102502:	4413      	add	r3, r2
 8102504:	4a04      	ldr	r2, [pc, #16]	; (8102518 <HAL_IncTick+0x24>)
 8102506:	6013      	str	r3, [r2, #0]
}
 8102508:	bf00      	nop
 810250a:	46bd      	mov	sp, r7
 810250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102510:	4770      	bx	lr
 8102512:	bf00      	nop
 8102514:	1000001c 	.word	0x1000001c
 8102518:	100003bc 	.word	0x100003bc

0810251c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810251c:	b480      	push	{r7}
 810251e:	af00      	add	r7, sp, #0
  return uwTick;
 8102520:	4b03      	ldr	r3, [pc, #12]	; (8102530 <HAL_GetTick+0x14>)
 8102522:	681b      	ldr	r3, [r3, #0]
}
 8102524:	4618      	mov	r0, r3
 8102526:	46bd      	mov	sp, r7
 8102528:	f85d 7b04 	ldr.w	r7, [sp], #4
 810252c:	4770      	bx	lr
 810252e:	bf00      	nop
 8102530:	100003bc 	.word	0x100003bc

08102534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102534:	b580      	push	{r7, lr}
 8102536:	b084      	sub	sp, #16
 8102538:	af00      	add	r7, sp, #0
 810253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810253c:	f7ff ffee 	bl	810251c <HAL_GetTick>
 8102540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102546:	68fb      	ldr	r3, [r7, #12]
 8102548:	f1b3 3fff 	cmp.w	r3, #4294967295
 810254c:	d005      	beq.n	810255a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810254e:	4b0a      	ldr	r3, [pc, #40]	; (8102578 <HAL_Delay+0x44>)
 8102550:	781b      	ldrb	r3, [r3, #0]
 8102552:	461a      	mov	r2, r3
 8102554:	68fb      	ldr	r3, [r7, #12]
 8102556:	4413      	add	r3, r2
 8102558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810255a:	bf00      	nop
 810255c:	f7ff ffde 	bl	810251c <HAL_GetTick>
 8102560:	4602      	mov	r2, r0
 8102562:	68bb      	ldr	r3, [r7, #8]
 8102564:	1ad3      	subs	r3, r2, r3
 8102566:	68fa      	ldr	r2, [r7, #12]
 8102568:	429a      	cmp	r2, r3
 810256a:	d8f7      	bhi.n	810255c <HAL_Delay+0x28>
  {
  }
}
 810256c:	bf00      	nop
 810256e:	bf00      	nop
 8102570:	3710      	adds	r7, #16
 8102572:	46bd      	mov	sp, r7
 8102574:	bd80      	pop	{r7, pc}
 8102576:	bf00      	nop
 8102578:	1000001c 	.word	0x1000001c

0810257c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810257c:	b480      	push	{r7}
 810257e:	b085      	sub	sp, #20
 8102580:	af00      	add	r7, sp, #0
 8102582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	f003 0307 	and.w	r3, r3, #7
 810258a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810258c:	4b0c      	ldr	r3, [pc, #48]	; (81025c0 <__NVIC_SetPriorityGrouping+0x44>)
 810258e:	68db      	ldr	r3, [r3, #12]
 8102590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102592:	68ba      	ldr	r2, [r7, #8]
 8102594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102598:	4013      	ands	r3, r2
 810259a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810259c:	68fb      	ldr	r3, [r7, #12]
 810259e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81025a0:	68bb      	ldr	r3, [r7, #8]
 81025a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81025a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81025a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81025ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81025ae:	4a04      	ldr	r2, [pc, #16]	; (81025c0 <__NVIC_SetPriorityGrouping+0x44>)
 81025b0:	68bb      	ldr	r3, [r7, #8]
 81025b2:	60d3      	str	r3, [r2, #12]
}
 81025b4:	bf00      	nop
 81025b6:	3714      	adds	r7, #20
 81025b8:	46bd      	mov	sp, r7
 81025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025be:	4770      	bx	lr
 81025c0:	e000ed00 	.word	0xe000ed00

081025c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81025c4:	b480      	push	{r7}
 81025c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81025c8:	4b04      	ldr	r3, [pc, #16]	; (81025dc <__NVIC_GetPriorityGrouping+0x18>)
 81025ca:	68db      	ldr	r3, [r3, #12]
 81025cc:	0a1b      	lsrs	r3, r3, #8
 81025ce:	f003 0307 	and.w	r3, r3, #7
}
 81025d2:	4618      	mov	r0, r3
 81025d4:	46bd      	mov	sp, r7
 81025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025da:	4770      	bx	lr
 81025dc:	e000ed00 	.word	0xe000ed00

081025e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81025e0:	b480      	push	{r7}
 81025e2:	b083      	sub	sp, #12
 81025e4:	af00      	add	r7, sp, #0
 81025e6:	4603      	mov	r3, r0
 81025e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81025ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81025ee:	2b00      	cmp	r3, #0
 81025f0:	db0b      	blt.n	810260a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81025f2:	88fb      	ldrh	r3, [r7, #6]
 81025f4:	f003 021f 	and.w	r2, r3, #31
 81025f8:	4907      	ldr	r1, [pc, #28]	; (8102618 <__NVIC_EnableIRQ+0x38>)
 81025fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81025fe:	095b      	lsrs	r3, r3, #5
 8102600:	2001      	movs	r0, #1
 8102602:	fa00 f202 	lsl.w	r2, r0, r2
 8102606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810260a:	bf00      	nop
 810260c:	370c      	adds	r7, #12
 810260e:	46bd      	mov	sp, r7
 8102610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102614:	4770      	bx	lr
 8102616:	bf00      	nop
 8102618:	e000e100 	.word	0xe000e100

0810261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810261c:	b480      	push	{r7}
 810261e:	b083      	sub	sp, #12
 8102620:	af00      	add	r7, sp, #0
 8102622:	4603      	mov	r3, r0
 8102624:	6039      	str	r1, [r7, #0]
 8102626:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810262c:	2b00      	cmp	r3, #0
 810262e:	db0a      	blt.n	8102646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102630:	683b      	ldr	r3, [r7, #0]
 8102632:	b2da      	uxtb	r2, r3
 8102634:	490c      	ldr	r1, [pc, #48]	; (8102668 <__NVIC_SetPriority+0x4c>)
 8102636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810263a:	0112      	lsls	r2, r2, #4
 810263c:	b2d2      	uxtb	r2, r2
 810263e:	440b      	add	r3, r1
 8102640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102644:	e00a      	b.n	810265c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102646:	683b      	ldr	r3, [r7, #0]
 8102648:	b2da      	uxtb	r2, r3
 810264a:	4908      	ldr	r1, [pc, #32]	; (810266c <__NVIC_SetPriority+0x50>)
 810264c:	88fb      	ldrh	r3, [r7, #6]
 810264e:	f003 030f 	and.w	r3, r3, #15
 8102652:	3b04      	subs	r3, #4
 8102654:	0112      	lsls	r2, r2, #4
 8102656:	b2d2      	uxtb	r2, r2
 8102658:	440b      	add	r3, r1
 810265a:	761a      	strb	r2, [r3, #24]
}
 810265c:	bf00      	nop
 810265e:	370c      	adds	r7, #12
 8102660:	46bd      	mov	sp, r7
 8102662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102666:	4770      	bx	lr
 8102668:	e000e100 	.word	0xe000e100
 810266c:	e000ed00 	.word	0xe000ed00

08102670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102670:	b480      	push	{r7}
 8102672:	b089      	sub	sp, #36	; 0x24
 8102674:	af00      	add	r7, sp, #0
 8102676:	60f8      	str	r0, [r7, #12]
 8102678:	60b9      	str	r1, [r7, #8]
 810267a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810267c:	68fb      	ldr	r3, [r7, #12]
 810267e:	f003 0307 	and.w	r3, r3, #7
 8102682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102684:	69fb      	ldr	r3, [r7, #28]
 8102686:	f1c3 0307 	rsb	r3, r3, #7
 810268a:	2b04      	cmp	r3, #4
 810268c:	bf28      	it	cs
 810268e:	2304      	movcs	r3, #4
 8102690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102692:	69fb      	ldr	r3, [r7, #28]
 8102694:	3304      	adds	r3, #4
 8102696:	2b06      	cmp	r3, #6
 8102698:	d902      	bls.n	81026a0 <NVIC_EncodePriority+0x30>
 810269a:	69fb      	ldr	r3, [r7, #28]
 810269c:	3b03      	subs	r3, #3
 810269e:	e000      	b.n	81026a2 <NVIC_EncodePriority+0x32>
 81026a0:	2300      	movs	r3, #0
 81026a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81026a4:	f04f 32ff 	mov.w	r2, #4294967295
 81026a8:	69bb      	ldr	r3, [r7, #24]
 81026aa:	fa02 f303 	lsl.w	r3, r2, r3
 81026ae:	43da      	mvns	r2, r3
 81026b0:	68bb      	ldr	r3, [r7, #8]
 81026b2:	401a      	ands	r2, r3
 81026b4:	697b      	ldr	r3, [r7, #20]
 81026b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81026b8:	f04f 31ff 	mov.w	r1, #4294967295
 81026bc:	697b      	ldr	r3, [r7, #20]
 81026be:	fa01 f303 	lsl.w	r3, r1, r3
 81026c2:	43d9      	mvns	r1, r3
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81026c8:	4313      	orrs	r3, r2
         );
}
 81026ca:	4618      	mov	r0, r3
 81026cc:	3724      	adds	r7, #36	; 0x24
 81026ce:	46bd      	mov	sp, r7
 81026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026d4:	4770      	bx	lr
	...

081026d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81026d8:	b580      	push	{r7, lr}
 81026da:	b082      	sub	sp, #8
 81026dc:	af00      	add	r7, sp, #0
 81026de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81026e0:	687b      	ldr	r3, [r7, #4]
 81026e2:	3b01      	subs	r3, #1
 81026e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81026e8:	d301      	bcc.n	81026ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81026ea:	2301      	movs	r3, #1
 81026ec:	e00f      	b.n	810270e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81026ee:	4a0a      	ldr	r2, [pc, #40]	; (8102718 <SysTick_Config+0x40>)
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	3b01      	subs	r3, #1
 81026f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81026f6:	210f      	movs	r1, #15
 81026f8:	f04f 30ff 	mov.w	r0, #4294967295
 81026fc:	f7ff ff8e 	bl	810261c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102700:	4b05      	ldr	r3, [pc, #20]	; (8102718 <SysTick_Config+0x40>)
 8102702:	2200      	movs	r2, #0
 8102704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102706:	4b04      	ldr	r3, [pc, #16]	; (8102718 <SysTick_Config+0x40>)
 8102708:	2207      	movs	r2, #7
 810270a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810270c:	2300      	movs	r3, #0
}
 810270e:	4618      	mov	r0, r3
 8102710:	3708      	adds	r7, #8
 8102712:	46bd      	mov	sp, r7
 8102714:	bd80      	pop	{r7, pc}
 8102716:	bf00      	nop
 8102718:	e000e010 	.word	0xe000e010

0810271c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810271c:	b580      	push	{r7, lr}
 810271e:	b082      	sub	sp, #8
 8102720:	af00      	add	r7, sp, #0
 8102722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102724:	6878      	ldr	r0, [r7, #4]
 8102726:	f7ff ff29 	bl	810257c <__NVIC_SetPriorityGrouping>
}
 810272a:	bf00      	nop
 810272c:	3708      	adds	r7, #8
 810272e:	46bd      	mov	sp, r7
 8102730:	bd80      	pop	{r7, pc}

08102732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102732:	b580      	push	{r7, lr}
 8102734:	b086      	sub	sp, #24
 8102736:	af00      	add	r7, sp, #0
 8102738:	4603      	mov	r3, r0
 810273a:	60b9      	str	r1, [r7, #8]
 810273c:	607a      	str	r2, [r7, #4]
 810273e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102740:	f7ff ff40 	bl	81025c4 <__NVIC_GetPriorityGrouping>
 8102744:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102746:	687a      	ldr	r2, [r7, #4]
 8102748:	68b9      	ldr	r1, [r7, #8]
 810274a:	6978      	ldr	r0, [r7, #20]
 810274c:	f7ff ff90 	bl	8102670 <NVIC_EncodePriority>
 8102750:	4602      	mov	r2, r0
 8102752:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102756:	4611      	mov	r1, r2
 8102758:	4618      	mov	r0, r3
 810275a:	f7ff ff5f 	bl	810261c <__NVIC_SetPriority>
}
 810275e:	bf00      	nop
 8102760:	3718      	adds	r7, #24
 8102762:	46bd      	mov	sp, r7
 8102764:	bd80      	pop	{r7, pc}

08102766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102766:	b580      	push	{r7, lr}
 8102768:	b082      	sub	sp, #8
 810276a:	af00      	add	r7, sp, #0
 810276c:	4603      	mov	r3, r0
 810276e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102774:	4618      	mov	r0, r3
 8102776:	f7ff ff33 	bl	81025e0 <__NVIC_EnableIRQ>
}
 810277a:	bf00      	nop
 810277c:	3708      	adds	r7, #8
 810277e:	46bd      	mov	sp, r7
 8102780:	bd80      	pop	{r7, pc}

08102782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102782:	b580      	push	{r7, lr}
 8102784:	b082      	sub	sp, #8
 8102786:	af00      	add	r7, sp, #0
 8102788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810278a:	6878      	ldr	r0, [r7, #4]
 810278c:	f7ff ffa4 	bl	81026d8 <SysTick_Config>
 8102790:	4603      	mov	r3, r0
}
 8102792:	4618      	mov	r0, r3
 8102794:	3708      	adds	r7, #8
 8102796:	46bd      	mov	sp, r7
 8102798:	bd80      	pop	{r7, pc}
	...

0810279c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810279c:	b480      	push	{r7}
 810279e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81027a0:	4b07      	ldr	r3, [pc, #28]	; (81027c0 <HAL_GetCurrentCPUID+0x24>)
 81027a2:	681b      	ldr	r3, [r3, #0]
 81027a4:	091b      	lsrs	r3, r3, #4
 81027a6:	f003 030f 	and.w	r3, r3, #15
 81027aa:	2b07      	cmp	r3, #7
 81027ac:	d101      	bne.n	81027b2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81027ae:	2303      	movs	r3, #3
 81027b0:	e000      	b.n	81027b4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81027b2:	2301      	movs	r3, #1
  }
}
 81027b4:	4618      	mov	r0, r3
 81027b6:	46bd      	mov	sp, r7
 81027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027bc:	4770      	bx	lr
 81027be:	bf00      	nop
 81027c0:	e000ed00 	.word	0xe000ed00

081027c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81027c4:	b480      	push	{r7}
 81027c6:	b089      	sub	sp, #36	; 0x24
 81027c8:	af00      	add	r7, sp, #0
 81027ca:	6078      	str	r0, [r7, #4]
 81027cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81027ce:	2300      	movs	r3, #0
 81027d0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81027d2:	4b89      	ldr	r3, [pc, #548]	; (81029f8 <HAL_GPIO_Init+0x234>)
 81027d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81027d6:	e194      	b.n	8102b02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81027d8:	683b      	ldr	r3, [r7, #0]
 81027da:	681a      	ldr	r2, [r3, #0]
 81027dc:	2101      	movs	r1, #1
 81027de:	69fb      	ldr	r3, [r7, #28]
 81027e0:	fa01 f303 	lsl.w	r3, r1, r3
 81027e4:	4013      	ands	r3, r2
 81027e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81027e8:	693b      	ldr	r3, [r7, #16]
 81027ea:	2b00      	cmp	r3, #0
 81027ec:	f000 8186 	beq.w	8102afc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81027f0:	683b      	ldr	r3, [r7, #0]
 81027f2:	685b      	ldr	r3, [r3, #4]
 81027f4:	f003 0303 	and.w	r3, r3, #3
 81027f8:	2b01      	cmp	r3, #1
 81027fa:	d005      	beq.n	8102808 <HAL_GPIO_Init+0x44>
 81027fc:	683b      	ldr	r3, [r7, #0]
 81027fe:	685b      	ldr	r3, [r3, #4]
 8102800:	f003 0303 	and.w	r3, r3, #3
 8102804:	2b02      	cmp	r3, #2
 8102806:	d130      	bne.n	810286a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	689b      	ldr	r3, [r3, #8]
 810280c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810280e:	69fb      	ldr	r3, [r7, #28]
 8102810:	005b      	lsls	r3, r3, #1
 8102812:	2203      	movs	r2, #3
 8102814:	fa02 f303 	lsl.w	r3, r2, r3
 8102818:	43db      	mvns	r3, r3
 810281a:	69ba      	ldr	r2, [r7, #24]
 810281c:	4013      	ands	r3, r2
 810281e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102820:	683b      	ldr	r3, [r7, #0]
 8102822:	68da      	ldr	r2, [r3, #12]
 8102824:	69fb      	ldr	r3, [r7, #28]
 8102826:	005b      	lsls	r3, r3, #1
 8102828:	fa02 f303 	lsl.w	r3, r2, r3
 810282c:	69ba      	ldr	r2, [r7, #24]
 810282e:	4313      	orrs	r3, r2
 8102830:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	69ba      	ldr	r2, [r7, #24]
 8102836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	685b      	ldr	r3, [r3, #4]
 810283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810283e:	2201      	movs	r2, #1
 8102840:	69fb      	ldr	r3, [r7, #28]
 8102842:	fa02 f303 	lsl.w	r3, r2, r3
 8102846:	43db      	mvns	r3, r3
 8102848:	69ba      	ldr	r2, [r7, #24]
 810284a:	4013      	ands	r3, r2
 810284c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810284e:	683b      	ldr	r3, [r7, #0]
 8102850:	685b      	ldr	r3, [r3, #4]
 8102852:	091b      	lsrs	r3, r3, #4
 8102854:	f003 0201 	and.w	r2, r3, #1
 8102858:	69fb      	ldr	r3, [r7, #28]
 810285a:	fa02 f303 	lsl.w	r3, r2, r3
 810285e:	69ba      	ldr	r2, [r7, #24]
 8102860:	4313      	orrs	r3, r2
 8102862:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	69ba      	ldr	r2, [r7, #24]
 8102868:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810286a:	683b      	ldr	r3, [r7, #0]
 810286c:	685b      	ldr	r3, [r3, #4]
 810286e:	f003 0303 	and.w	r3, r3, #3
 8102872:	2b03      	cmp	r3, #3
 8102874:	d017      	beq.n	81028a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	68db      	ldr	r3, [r3, #12]
 810287a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810287c:	69fb      	ldr	r3, [r7, #28]
 810287e:	005b      	lsls	r3, r3, #1
 8102880:	2203      	movs	r2, #3
 8102882:	fa02 f303 	lsl.w	r3, r2, r3
 8102886:	43db      	mvns	r3, r3
 8102888:	69ba      	ldr	r2, [r7, #24]
 810288a:	4013      	ands	r3, r2
 810288c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810288e:	683b      	ldr	r3, [r7, #0]
 8102890:	689a      	ldr	r2, [r3, #8]
 8102892:	69fb      	ldr	r3, [r7, #28]
 8102894:	005b      	lsls	r3, r3, #1
 8102896:	fa02 f303 	lsl.w	r3, r2, r3
 810289a:	69ba      	ldr	r2, [r7, #24]
 810289c:	4313      	orrs	r3, r2
 810289e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	69ba      	ldr	r2, [r7, #24]
 81028a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81028a6:	683b      	ldr	r3, [r7, #0]
 81028a8:	685b      	ldr	r3, [r3, #4]
 81028aa:	f003 0303 	and.w	r3, r3, #3
 81028ae:	2b02      	cmp	r3, #2
 81028b0:	d123      	bne.n	81028fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81028b2:	69fb      	ldr	r3, [r7, #28]
 81028b4:	08da      	lsrs	r2, r3, #3
 81028b6:	687b      	ldr	r3, [r7, #4]
 81028b8:	3208      	adds	r2, #8
 81028ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81028c0:	69fb      	ldr	r3, [r7, #28]
 81028c2:	f003 0307 	and.w	r3, r3, #7
 81028c6:	009b      	lsls	r3, r3, #2
 81028c8:	220f      	movs	r2, #15
 81028ca:	fa02 f303 	lsl.w	r3, r2, r3
 81028ce:	43db      	mvns	r3, r3
 81028d0:	69ba      	ldr	r2, [r7, #24]
 81028d2:	4013      	ands	r3, r2
 81028d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81028d6:	683b      	ldr	r3, [r7, #0]
 81028d8:	691a      	ldr	r2, [r3, #16]
 81028da:	69fb      	ldr	r3, [r7, #28]
 81028dc:	f003 0307 	and.w	r3, r3, #7
 81028e0:	009b      	lsls	r3, r3, #2
 81028e2:	fa02 f303 	lsl.w	r3, r2, r3
 81028e6:	69ba      	ldr	r2, [r7, #24]
 81028e8:	4313      	orrs	r3, r2
 81028ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81028ec:	69fb      	ldr	r3, [r7, #28]
 81028ee:	08da      	lsrs	r2, r3, #3
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	3208      	adds	r2, #8
 81028f4:	69b9      	ldr	r1, [r7, #24]
 81028f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81028fa:	687b      	ldr	r3, [r7, #4]
 81028fc:	681b      	ldr	r3, [r3, #0]
 81028fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102900:	69fb      	ldr	r3, [r7, #28]
 8102902:	005b      	lsls	r3, r3, #1
 8102904:	2203      	movs	r2, #3
 8102906:	fa02 f303 	lsl.w	r3, r2, r3
 810290a:	43db      	mvns	r3, r3
 810290c:	69ba      	ldr	r2, [r7, #24]
 810290e:	4013      	ands	r3, r2
 8102910:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102912:	683b      	ldr	r3, [r7, #0]
 8102914:	685b      	ldr	r3, [r3, #4]
 8102916:	f003 0203 	and.w	r2, r3, #3
 810291a:	69fb      	ldr	r3, [r7, #28]
 810291c:	005b      	lsls	r3, r3, #1
 810291e:	fa02 f303 	lsl.w	r3, r2, r3
 8102922:	69ba      	ldr	r2, [r7, #24]
 8102924:	4313      	orrs	r3, r2
 8102926:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102928:	687b      	ldr	r3, [r7, #4]
 810292a:	69ba      	ldr	r2, [r7, #24]
 810292c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810292e:	683b      	ldr	r3, [r7, #0]
 8102930:	685b      	ldr	r3, [r3, #4]
 8102932:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102936:	2b00      	cmp	r3, #0
 8102938:	f000 80e0 	beq.w	8102afc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810293c:	4b2f      	ldr	r3, [pc, #188]	; (81029fc <HAL_GPIO_Init+0x238>)
 810293e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102942:	4a2e      	ldr	r2, [pc, #184]	; (81029fc <HAL_GPIO_Init+0x238>)
 8102944:	f043 0302 	orr.w	r3, r3, #2
 8102948:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810294c:	4b2b      	ldr	r3, [pc, #172]	; (81029fc <HAL_GPIO_Init+0x238>)
 810294e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102952:	f003 0302 	and.w	r3, r3, #2
 8102956:	60fb      	str	r3, [r7, #12]
 8102958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810295a:	4a29      	ldr	r2, [pc, #164]	; (8102a00 <HAL_GPIO_Init+0x23c>)
 810295c:	69fb      	ldr	r3, [r7, #28]
 810295e:	089b      	lsrs	r3, r3, #2
 8102960:	3302      	adds	r3, #2
 8102962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102968:	69fb      	ldr	r3, [r7, #28]
 810296a:	f003 0303 	and.w	r3, r3, #3
 810296e:	009b      	lsls	r3, r3, #2
 8102970:	220f      	movs	r2, #15
 8102972:	fa02 f303 	lsl.w	r3, r2, r3
 8102976:	43db      	mvns	r3, r3
 8102978:	69ba      	ldr	r2, [r7, #24]
 810297a:	4013      	ands	r3, r2
 810297c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810297e:	687b      	ldr	r3, [r7, #4]
 8102980:	4a20      	ldr	r2, [pc, #128]	; (8102a04 <HAL_GPIO_Init+0x240>)
 8102982:	4293      	cmp	r3, r2
 8102984:	d052      	beq.n	8102a2c <HAL_GPIO_Init+0x268>
 8102986:	687b      	ldr	r3, [r7, #4]
 8102988:	4a1f      	ldr	r2, [pc, #124]	; (8102a08 <HAL_GPIO_Init+0x244>)
 810298a:	4293      	cmp	r3, r2
 810298c:	d031      	beq.n	81029f2 <HAL_GPIO_Init+0x22e>
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	4a1e      	ldr	r2, [pc, #120]	; (8102a0c <HAL_GPIO_Init+0x248>)
 8102992:	4293      	cmp	r3, r2
 8102994:	d02b      	beq.n	81029ee <HAL_GPIO_Init+0x22a>
 8102996:	687b      	ldr	r3, [r7, #4]
 8102998:	4a1d      	ldr	r2, [pc, #116]	; (8102a10 <HAL_GPIO_Init+0x24c>)
 810299a:	4293      	cmp	r3, r2
 810299c:	d025      	beq.n	81029ea <HAL_GPIO_Init+0x226>
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	4a1c      	ldr	r2, [pc, #112]	; (8102a14 <HAL_GPIO_Init+0x250>)
 81029a2:	4293      	cmp	r3, r2
 81029a4:	d01f      	beq.n	81029e6 <HAL_GPIO_Init+0x222>
 81029a6:	687b      	ldr	r3, [r7, #4]
 81029a8:	4a1b      	ldr	r2, [pc, #108]	; (8102a18 <HAL_GPIO_Init+0x254>)
 81029aa:	4293      	cmp	r3, r2
 81029ac:	d019      	beq.n	81029e2 <HAL_GPIO_Init+0x21e>
 81029ae:	687b      	ldr	r3, [r7, #4]
 81029b0:	4a1a      	ldr	r2, [pc, #104]	; (8102a1c <HAL_GPIO_Init+0x258>)
 81029b2:	4293      	cmp	r3, r2
 81029b4:	d013      	beq.n	81029de <HAL_GPIO_Init+0x21a>
 81029b6:	687b      	ldr	r3, [r7, #4]
 81029b8:	4a19      	ldr	r2, [pc, #100]	; (8102a20 <HAL_GPIO_Init+0x25c>)
 81029ba:	4293      	cmp	r3, r2
 81029bc:	d00d      	beq.n	81029da <HAL_GPIO_Init+0x216>
 81029be:	687b      	ldr	r3, [r7, #4]
 81029c0:	4a18      	ldr	r2, [pc, #96]	; (8102a24 <HAL_GPIO_Init+0x260>)
 81029c2:	4293      	cmp	r3, r2
 81029c4:	d007      	beq.n	81029d6 <HAL_GPIO_Init+0x212>
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	4a17      	ldr	r2, [pc, #92]	; (8102a28 <HAL_GPIO_Init+0x264>)
 81029ca:	4293      	cmp	r3, r2
 81029cc:	d101      	bne.n	81029d2 <HAL_GPIO_Init+0x20e>
 81029ce:	2309      	movs	r3, #9
 81029d0:	e02d      	b.n	8102a2e <HAL_GPIO_Init+0x26a>
 81029d2:	230a      	movs	r3, #10
 81029d4:	e02b      	b.n	8102a2e <HAL_GPIO_Init+0x26a>
 81029d6:	2308      	movs	r3, #8
 81029d8:	e029      	b.n	8102a2e <HAL_GPIO_Init+0x26a>
 81029da:	2307      	movs	r3, #7
 81029dc:	e027      	b.n	8102a2e <HAL_GPIO_Init+0x26a>
 81029de:	2306      	movs	r3, #6
 81029e0:	e025      	b.n	8102a2e <HAL_GPIO_Init+0x26a>
 81029e2:	2305      	movs	r3, #5
 81029e4:	e023      	b.n	8102a2e <HAL_GPIO_Init+0x26a>
 81029e6:	2304      	movs	r3, #4
 81029e8:	e021      	b.n	8102a2e <HAL_GPIO_Init+0x26a>
 81029ea:	2303      	movs	r3, #3
 81029ec:	e01f      	b.n	8102a2e <HAL_GPIO_Init+0x26a>
 81029ee:	2302      	movs	r3, #2
 81029f0:	e01d      	b.n	8102a2e <HAL_GPIO_Init+0x26a>
 81029f2:	2301      	movs	r3, #1
 81029f4:	e01b      	b.n	8102a2e <HAL_GPIO_Init+0x26a>
 81029f6:	bf00      	nop
 81029f8:	580000c0 	.word	0x580000c0
 81029fc:	58024400 	.word	0x58024400
 8102a00:	58000400 	.word	0x58000400
 8102a04:	58020000 	.word	0x58020000
 8102a08:	58020400 	.word	0x58020400
 8102a0c:	58020800 	.word	0x58020800
 8102a10:	58020c00 	.word	0x58020c00
 8102a14:	58021000 	.word	0x58021000
 8102a18:	58021400 	.word	0x58021400
 8102a1c:	58021800 	.word	0x58021800
 8102a20:	58021c00 	.word	0x58021c00
 8102a24:	58022000 	.word	0x58022000
 8102a28:	58022400 	.word	0x58022400
 8102a2c:	2300      	movs	r3, #0
 8102a2e:	69fa      	ldr	r2, [r7, #28]
 8102a30:	f002 0203 	and.w	r2, r2, #3
 8102a34:	0092      	lsls	r2, r2, #2
 8102a36:	4093      	lsls	r3, r2
 8102a38:	69ba      	ldr	r2, [r7, #24]
 8102a3a:	4313      	orrs	r3, r2
 8102a3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102a3e:	4938      	ldr	r1, [pc, #224]	; (8102b20 <HAL_GPIO_Init+0x35c>)
 8102a40:	69fb      	ldr	r3, [r7, #28]
 8102a42:	089b      	lsrs	r3, r3, #2
 8102a44:	3302      	adds	r3, #2
 8102a46:	69ba      	ldr	r2, [r7, #24]
 8102a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102a50:	681b      	ldr	r3, [r3, #0]
 8102a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102a54:	693b      	ldr	r3, [r7, #16]
 8102a56:	43db      	mvns	r3, r3
 8102a58:	69ba      	ldr	r2, [r7, #24]
 8102a5a:	4013      	ands	r3, r2
 8102a5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102a5e:	683b      	ldr	r3, [r7, #0]
 8102a60:	685b      	ldr	r3, [r3, #4]
 8102a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102a66:	2b00      	cmp	r3, #0
 8102a68:	d003      	beq.n	8102a72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102a6a:	69ba      	ldr	r2, [r7, #24]
 8102a6c:	693b      	ldr	r3, [r7, #16]
 8102a6e:	4313      	orrs	r3, r2
 8102a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102a76:	69bb      	ldr	r3, [r7, #24]
 8102a78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102a7e:	685b      	ldr	r3, [r3, #4]
 8102a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102a82:	693b      	ldr	r3, [r7, #16]
 8102a84:	43db      	mvns	r3, r3
 8102a86:	69ba      	ldr	r2, [r7, #24]
 8102a88:	4013      	ands	r3, r2
 8102a8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102a8c:	683b      	ldr	r3, [r7, #0]
 8102a8e:	685b      	ldr	r3, [r3, #4]
 8102a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102a94:	2b00      	cmp	r3, #0
 8102a96:	d003      	beq.n	8102aa0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102a98:	69ba      	ldr	r2, [r7, #24]
 8102a9a:	693b      	ldr	r3, [r7, #16]
 8102a9c:	4313      	orrs	r3, r2
 8102a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102aa4:	69bb      	ldr	r3, [r7, #24]
 8102aa6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102aa8:	697b      	ldr	r3, [r7, #20]
 8102aaa:	685b      	ldr	r3, [r3, #4]
 8102aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102aae:	693b      	ldr	r3, [r7, #16]
 8102ab0:	43db      	mvns	r3, r3
 8102ab2:	69ba      	ldr	r2, [r7, #24]
 8102ab4:	4013      	ands	r3, r2
 8102ab6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102ab8:	683b      	ldr	r3, [r7, #0]
 8102aba:	685b      	ldr	r3, [r3, #4]
 8102abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102ac0:	2b00      	cmp	r3, #0
 8102ac2:	d003      	beq.n	8102acc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102ac4:	69ba      	ldr	r2, [r7, #24]
 8102ac6:	693b      	ldr	r3, [r7, #16]
 8102ac8:	4313      	orrs	r3, r2
 8102aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102acc:	697b      	ldr	r3, [r7, #20]
 8102ace:	69ba      	ldr	r2, [r7, #24]
 8102ad0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102ad2:	697b      	ldr	r3, [r7, #20]
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102ad8:	693b      	ldr	r3, [r7, #16]
 8102ada:	43db      	mvns	r3, r3
 8102adc:	69ba      	ldr	r2, [r7, #24]
 8102ade:	4013      	ands	r3, r2
 8102ae0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102ae2:	683b      	ldr	r3, [r7, #0]
 8102ae4:	685b      	ldr	r3, [r3, #4]
 8102ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102aea:	2b00      	cmp	r3, #0
 8102aec:	d003      	beq.n	8102af6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102aee:	69ba      	ldr	r2, [r7, #24]
 8102af0:	693b      	ldr	r3, [r7, #16]
 8102af2:	4313      	orrs	r3, r2
 8102af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102af6:	697b      	ldr	r3, [r7, #20]
 8102af8:	69ba      	ldr	r2, [r7, #24]
 8102afa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102afc:	69fb      	ldr	r3, [r7, #28]
 8102afe:	3301      	adds	r3, #1
 8102b00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102b02:	683b      	ldr	r3, [r7, #0]
 8102b04:	681a      	ldr	r2, [r3, #0]
 8102b06:	69fb      	ldr	r3, [r7, #28]
 8102b08:	fa22 f303 	lsr.w	r3, r2, r3
 8102b0c:	2b00      	cmp	r3, #0
 8102b0e:	f47f ae63 	bne.w	81027d8 <HAL_GPIO_Init+0x14>
  }
}
 8102b12:	bf00      	nop
 8102b14:	bf00      	nop
 8102b16:	3724      	adds	r7, #36	; 0x24
 8102b18:	46bd      	mov	sp, r7
 8102b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b1e:	4770      	bx	lr
 8102b20:	58000400 	.word	0x58000400

08102b24 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102b24:	b480      	push	{r7}
 8102b26:	b083      	sub	sp, #12
 8102b28:	af00      	add	r7, sp, #0
 8102b2a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102b2c:	4b05      	ldr	r3, [pc, #20]	; (8102b44 <HAL_HSEM_ActivateNotification+0x20>)
 8102b2e:	681a      	ldr	r2, [r3, #0]
 8102b30:	4904      	ldr	r1, [pc, #16]	; (8102b44 <HAL_HSEM_ActivateNotification+0x20>)
 8102b32:	687b      	ldr	r3, [r7, #4]
 8102b34:	4313      	orrs	r3, r2
 8102b36:	600b      	str	r3, [r1, #0]
#endif
}
 8102b38:	bf00      	nop
 8102b3a:	370c      	adds	r7, #12
 8102b3c:	46bd      	mov	sp, r7
 8102b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b42:	4770      	bx	lr
 8102b44:	58026510 	.word	0x58026510

08102b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8102b48:	b580      	push	{r7, lr}
 8102b4a:	b082      	sub	sp, #8
 8102b4c:	af00      	add	r7, sp, #0
 8102b4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8102b50:	687b      	ldr	r3, [r7, #4]
 8102b52:	2b00      	cmp	r3, #0
 8102b54:	d101      	bne.n	8102b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8102b56:	2301      	movs	r3, #1
 8102b58:	e081      	b.n	8102c5e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8102b5a:	687b      	ldr	r3, [r7, #4]
 8102b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102b60:	b2db      	uxtb	r3, r3
 8102b62:	2b00      	cmp	r3, #0
 8102b64:	d106      	bne.n	8102b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8102b66:	687b      	ldr	r3, [r7, #4]
 8102b68:	2200      	movs	r2, #0
 8102b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8102b6e:	6878      	ldr	r0, [r7, #4]
 8102b70:	f7ff f9bc 	bl	8101eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8102b74:	687b      	ldr	r3, [r7, #4]
 8102b76:	2224      	movs	r2, #36	; 0x24
 8102b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8102b7c:	687b      	ldr	r3, [r7, #4]
 8102b7e:	681b      	ldr	r3, [r3, #0]
 8102b80:	681a      	ldr	r2, [r3, #0]
 8102b82:	687b      	ldr	r3, [r7, #4]
 8102b84:	681b      	ldr	r3, [r3, #0]
 8102b86:	f022 0201 	bic.w	r2, r2, #1
 8102b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8102b8c:	687b      	ldr	r3, [r7, #4]
 8102b8e:	685a      	ldr	r2, [r3, #4]
 8102b90:	687b      	ldr	r3, [r7, #4]
 8102b92:	681b      	ldr	r3, [r3, #0]
 8102b94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8102b98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8102b9a:	687b      	ldr	r3, [r7, #4]
 8102b9c:	681b      	ldr	r3, [r3, #0]
 8102b9e:	689a      	ldr	r2, [r3, #8]
 8102ba0:	687b      	ldr	r3, [r7, #4]
 8102ba2:	681b      	ldr	r3, [r3, #0]
 8102ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102ba8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8102baa:	687b      	ldr	r3, [r7, #4]
 8102bac:	68db      	ldr	r3, [r3, #12]
 8102bae:	2b01      	cmp	r3, #1
 8102bb0:	d107      	bne.n	8102bc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8102bb2:	687b      	ldr	r3, [r7, #4]
 8102bb4:	689a      	ldr	r2, [r3, #8]
 8102bb6:	687b      	ldr	r3, [r7, #4]
 8102bb8:	681b      	ldr	r3, [r3, #0]
 8102bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8102bbe:	609a      	str	r2, [r3, #8]
 8102bc0:	e006      	b.n	8102bd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8102bc2:	687b      	ldr	r3, [r7, #4]
 8102bc4:	689a      	ldr	r2, [r3, #8]
 8102bc6:	687b      	ldr	r3, [r7, #4]
 8102bc8:	681b      	ldr	r3, [r3, #0]
 8102bca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8102bce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8102bd0:	687b      	ldr	r3, [r7, #4]
 8102bd2:	68db      	ldr	r3, [r3, #12]
 8102bd4:	2b02      	cmp	r3, #2
 8102bd6:	d104      	bne.n	8102be2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8102bd8:	687b      	ldr	r3, [r7, #4]
 8102bda:	681b      	ldr	r3, [r3, #0]
 8102bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102be0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8102be2:	687b      	ldr	r3, [r7, #4]
 8102be4:	681b      	ldr	r3, [r3, #0]
 8102be6:	685b      	ldr	r3, [r3, #4]
 8102be8:	687a      	ldr	r2, [r7, #4]
 8102bea:	6812      	ldr	r2, [r2, #0]
 8102bec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8102bf4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8102bf6:	687b      	ldr	r3, [r7, #4]
 8102bf8:	681b      	ldr	r3, [r3, #0]
 8102bfa:	68da      	ldr	r2, [r3, #12]
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	681b      	ldr	r3, [r3, #0]
 8102c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102c04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102c06:	687b      	ldr	r3, [r7, #4]
 8102c08:	691a      	ldr	r2, [r3, #16]
 8102c0a:	687b      	ldr	r3, [r7, #4]
 8102c0c:	695b      	ldr	r3, [r3, #20]
 8102c0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8102c12:	687b      	ldr	r3, [r7, #4]
 8102c14:	699b      	ldr	r3, [r3, #24]
 8102c16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102c18:	687b      	ldr	r3, [r7, #4]
 8102c1a:	681b      	ldr	r3, [r3, #0]
 8102c1c:	430a      	orrs	r2, r1
 8102c1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102c20:	687b      	ldr	r3, [r7, #4]
 8102c22:	69d9      	ldr	r1, [r3, #28]
 8102c24:	687b      	ldr	r3, [r7, #4]
 8102c26:	6a1a      	ldr	r2, [r3, #32]
 8102c28:	687b      	ldr	r3, [r7, #4]
 8102c2a:	681b      	ldr	r3, [r3, #0]
 8102c2c:	430a      	orrs	r2, r1
 8102c2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102c30:	687b      	ldr	r3, [r7, #4]
 8102c32:	681b      	ldr	r3, [r3, #0]
 8102c34:	681a      	ldr	r2, [r3, #0]
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	681b      	ldr	r3, [r3, #0]
 8102c3a:	f042 0201 	orr.w	r2, r2, #1
 8102c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102c40:	687b      	ldr	r3, [r7, #4]
 8102c42:	2200      	movs	r2, #0
 8102c44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8102c46:	687b      	ldr	r3, [r7, #4]
 8102c48:	2220      	movs	r2, #32
 8102c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	2200      	movs	r2, #0
 8102c52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8102c54:	687b      	ldr	r3, [r7, #4]
 8102c56:	2200      	movs	r2, #0
 8102c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102c5c:	2300      	movs	r3, #0
}
 8102c5e:	4618      	mov	r0, r3
 8102c60:	3708      	adds	r7, #8
 8102c62:	46bd      	mov	sp, r7
 8102c64:	bd80      	pop	{r7, pc}
	...

08102c68 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8102c68:	b580      	push	{r7, lr}
 8102c6a:	b088      	sub	sp, #32
 8102c6c:	af02      	add	r7, sp, #8
 8102c6e:	60f8      	str	r0, [r7, #12]
 8102c70:	607a      	str	r2, [r7, #4]
 8102c72:	461a      	mov	r2, r3
 8102c74:	460b      	mov	r3, r1
 8102c76:	817b      	strh	r3, [r7, #10]
 8102c78:	4613      	mov	r3, r2
 8102c7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102c7c:	68fb      	ldr	r3, [r7, #12]
 8102c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102c82:	b2db      	uxtb	r3, r3
 8102c84:	2b20      	cmp	r3, #32
 8102c86:	f040 80da 	bne.w	8102e3e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102c8a:	68fb      	ldr	r3, [r7, #12]
 8102c8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102c90:	2b01      	cmp	r3, #1
 8102c92:	d101      	bne.n	8102c98 <HAL_I2C_Master_Transmit+0x30>
 8102c94:	2302      	movs	r3, #2
 8102c96:	e0d3      	b.n	8102e40 <HAL_I2C_Master_Transmit+0x1d8>
 8102c98:	68fb      	ldr	r3, [r7, #12]
 8102c9a:	2201      	movs	r2, #1
 8102c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102ca0:	f7ff fc3c 	bl	810251c <HAL_GetTick>
 8102ca4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102ca6:	697b      	ldr	r3, [r7, #20]
 8102ca8:	9300      	str	r3, [sp, #0]
 8102caa:	2319      	movs	r3, #25
 8102cac:	2201      	movs	r2, #1
 8102cae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102cb2:	68f8      	ldr	r0, [r7, #12]
 8102cb4:	f000 fb07 	bl	81032c6 <I2C_WaitOnFlagUntilTimeout>
 8102cb8:	4603      	mov	r3, r0
 8102cba:	2b00      	cmp	r3, #0
 8102cbc:	d001      	beq.n	8102cc2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8102cbe:	2301      	movs	r3, #1
 8102cc0:	e0be      	b.n	8102e40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8102cc2:	68fb      	ldr	r3, [r7, #12]
 8102cc4:	2221      	movs	r2, #33	; 0x21
 8102cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8102cca:	68fb      	ldr	r3, [r7, #12]
 8102ccc:	2210      	movs	r2, #16
 8102cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102cd2:	68fb      	ldr	r3, [r7, #12]
 8102cd4:	2200      	movs	r2, #0
 8102cd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102cd8:	68fb      	ldr	r3, [r7, #12]
 8102cda:	687a      	ldr	r2, [r7, #4]
 8102cdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102cde:	68fb      	ldr	r3, [r7, #12]
 8102ce0:	893a      	ldrh	r2, [r7, #8]
 8102ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102ce4:	68fb      	ldr	r3, [r7, #12]
 8102ce6:	2200      	movs	r2, #0
 8102ce8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102cea:	68fb      	ldr	r3, [r7, #12]
 8102cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102cee:	b29b      	uxth	r3, r3
 8102cf0:	2bff      	cmp	r3, #255	; 0xff
 8102cf2:	d90e      	bls.n	8102d12 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102cf4:	68fb      	ldr	r3, [r7, #12]
 8102cf6:	22ff      	movs	r2, #255	; 0xff
 8102cf8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102cfa:	68fb      	ldr	r3, [r7, #12]
 8102cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102cfe:	b2da      	uxtb	r2, r3
 8102d00:	8979      	ldrh	r1, [r7, #10]
 8102d02:	4b51      	ldr	r3, [pc, #324]	; (8102e48 <HAL_I2C_Master_Transmit+0x1e0>)
 8102d04:	9300      	str	r3, [sp, #0]
 8102d06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102d0a:	68f8      	ldr	r0, [r7, #12]
 8102d0c:	f000 fd16 	bl	810373c <I2C_TransferConfig>
 8102d10:	e06c      	b.n	8102dec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102d12:	68fb      	ldr	r3, [r7, #12]
 8102d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102d16:	b29a      	uxth	r2, r3
 8102d18:	68fb      	ldr	r3, [r7, #12]
 8102d1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102d1c:	68fb      	ldr	r3, [r7, #12]
 8102d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102d20:	b2da      	uxtb	r2, r3
 8102d22:	8979      	ldrh	r1, [r7, #10]
 8102d24:	4b48      	ldr	r3, [pc, #288]	; (8102e48 <HAL_I2C_Master_Transmit+0x1e0>)
 8102d26:	9300      	str	r3, [sp, #0]
 8102d28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102d2c:	68f8      	ldr	r0, [r7, #12]
 8102d2e:	f000 fd05 	bl	810373c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8102d32:	e05b      	b.n	8102dec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102d34:	697a      	ldr	r2, [r7, #20]
 8102d36:	6a39      	ldr	r1, [r7, #32]
 8102d38:	68f8      	ldr	r0, [r7, #12]
 8102d3a:	f000 fb13 	bl	8103364 <I2C_WaitOnTXISFlagUntilTimeout>
 8102d3e:	4603      	mov	r3, r0
 8102d40:	2b00      	cmp	r3, #0
 8102d42:	d001      	beq.n	8102d48 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8102d44:	2301      	movs	r3, #1
 8102d46:	e07b      	b.n	8102e40 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8102d48:	68fb      	ldr	r3, [r7, #12]
 8102d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102d4c:	781a      	ldrb	r2, [r3, #0]
 8102d4e:	68fb      	ldr	r3, [r7, #12]
 8102d50:	681b      	ldr	r3, [r3, #0]
 8102d52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102d54:	68fb      	ldr	r3, [r7, #12]
 8102d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102d58:	1c5a      	adds	r2, r3, #1
 8102d5a:	68fb      	ldr	r3, [r7, #12]
 8102d5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8102d5e:	68fb      	ldr	r3, [r7, #12]
 8102d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102d62:	b29b      	uxth	r3, r3
 8102d64:	3b01      	subs	r3, #1
 8102d66:	b29a      	uxth	r2, r3
 8102d68:	68fb      	ldr	r3, [r7, #12]
 8102d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8102d6c:	68fb      	ldr	r3, [r7, #12]
 8102d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102d70:	3b01      	subs	r3, #1
 8102d72:	b29a      	uxth	r2, r3
 8102d74:	68fb      	ldr	r3, [r7, #12]
 8102d76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102d78:	68fb      	ldr	r3, [r7, #12]
 8102d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102d7c:	b29b      	uxth	r3, r3
 8102d7e:	2b00      	cmp	r3, #0
 8102d80:	d034      	beq.n	8102dec <HAL_I2C_Master_Transmit+0x184>
 8102d82:	68fb      	ldr	r3, [r7, #12]
 8102d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102d86:	2b00      	cmp	r3, #0
 8102d88:	d130      	bne.n	8102dec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102d8a:	697b      	ldr	r3, [r7, #20]
 8102d8c:	9300      	str	r3, [sp, #0]
 8102d8e:	6a3b      	ldr	r3, [r7, #32]
 8102d90:	2200      	movs	r2, #0
 8102d92:	2180      	movs	r1, #128	; 0x80
 8102d94:	68f8      	ldr	r0, [r7, #12]
 8102d96:	f000 fa96 	bl	81032c6 <I2C_WaitOnFlagUntilTimeout>
 8102d9a:	4603      	mov	r3, r0
 8102d9c:	2b00      	cmp	r3, #0
 8102d9e:	d001      	beq.n	8102da4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8102da0:	2301      	movs	r3, #1
 8102da2:	e04d      	b.n	8102e40 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102da4:	68fb      	ldr	r3, [r7, #12]
 8102da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102da8:	b29b      	uxth	r3, r3
 8102daa:	2bff      	cmp	r3, #255	; 0xff
 8102dac:	d90e      	bls.n	8102dcc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102dae:	68fb      	ldr	r3, [r7, #12]
 8102db0:	22ff      	movs	r2, #255	; 0xff
 8102db2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102db4:	68fb      	ldr	r3, [r7, #12]
 8102db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102db8:	b2da      	uxtb	r2, r3
 8102dba:	8979      	ldrh	r1, [r7, #10]
 8102dbc:	2300      	movs	r3, #0
 8102dbe:	9300      	str	r3, [sp, #0]
 8102dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102dc4:	68f8      	ldr	r0, [r7, #12]
 8102dc6:	f000 fcb9 	bl	810373c <I2C_TransferConfig>
 8102dca:	e00f      	b.n	8102dec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102dcc:	68fb      	ldr	r3, [r7, #12]
 8102dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102dd0:	b29a      	uxth	r2, r3
 8102dd2:	68fb      	ldr	r3, [r7, #12]
 8102dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102dd6:	68fb      	ldr	r3, [r7, #12]
 8102dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102dda:	b2da      	uxtb	r2, r3
 8102ddc:	8979      	ldrh	r1, [r7, #10]
 8102dde:	2300      	movs	r3, #0
 8102de0:	9300      	str	r3, [sp, #0]
 8102de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102de6:	68f8      	ldr	r0, [r7, #12]
 8102de8:	f000 fca8 	bl	810373c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8102dec:	68fb      	ldr	r3, [r7, #12]
 8102dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102df0:	b29b      	uxth	r3, r3
 8102df2:	2b00      	cmp	r3, #0
 8102df4:	d19e      	bne.n	8102d34 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102df6:	697a      	ldr	r2, [r7, #20]
 8102df8:	6a39      	ldr	r1, [r7, #32]
 8102dfa:	68f8      	ldr	r0, [r7, #12]
 8102dfc:	f000 faf9 	bl	81033f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102e00:	4603      	mov	r3, r0
 8102e02:	2b00      	cmp	r3, #0
 8102e04:	d001      	beq.n	8102e0a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8102e06:	2301      	movs	r3, #1
 8102e08:	e01a      	b.n	8102e40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102e0a:	68fb      	ldr	r3, [r7, #12]
 8102e0c:	681b      	ldr	r3, [r3, #0]
 8102e0e:	2220      	movs	r2, #32
 8102e10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102e12:	68fb      	ldr	r3, [r7, #12]
 8102e14:	681b      	ldr	r3, [r3, #0]
 8102e16:	6859      	ldr	r1, [r3, #4]
 8102e18:	68fb      	ldr	r3, [r7, #12]
 8102e1a:	681a      	ldr	r2, [r3, #0]
 8102e1c:	4b0b      	ldr	r3, [pc, #44]	; (8102e4c <HAL_I2C_Master_Transmit+0x1e4>)
 8102e1e:	400b      	ands	r3, r1
 8102e20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102e22:	68fb      	ldr	r3, [r7, #12]
 8102e24:	2220      	movs	r2, #32
 8102e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102e2a:	68fb      	ldr	r3, [r7, #12]
 8102e2c:	2200      	movs	r2, #0
 8102e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102e32:	68fb      	ldr	r3, [r7, #12]
 8102e34:	2200      	movs	r2, #0
 8102e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102e3a:	2300      	movs	r3, #0
 8102e3c:	e000      	b.n	8102e40 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8102e3e:	2302      	movs	r3, #2
  }
}
 8102e40:	4618      	mov	r0, r3
 8102e42:	3718      	adds	r7, #24
 8102e44:	46bd      	mov	sp, r7
 8102e46:	bd80      	pop	{r7, pc}
 8102e48:	80002000 	.word	0x80002000
 8102e4c:	fe00e800 	.word	0xfe00e800

08102e50 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8102e50:	b580      	push	{r7, lr}
 8102e52:	b088      	sub	sp, #32
 8102e54:	af02      	add	r7, sp, #8
 8102e56:	60f8      	str	r0, [r7, #12]
 8102e58:	607a      	str	r2, [r7, #4]
 8102e5a:	461a      	mov	r2, r3
 8102e5c:	460b      	mov	r3, r1
 8102e5e:	817b      	strh	r3, [r7, #10]
 8102e60:	4613      	mov	r3, r2
 8102e62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102e64:	68fb      	ldr	r3, [r7, #12]
 8102e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102e6a:	b2db      	uxtb	r3, r3
 8102e6c:	2b20      	cmp	r3, #32
 8102e6e:	f040 80db 	bne.w	8103028 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102e72:	68fb      	ldr	r3, [r7, #12]
 8102e74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102e78:	2b01      	cmp	r3, #1
 8102e7a:	d101      	bne.n	8102e80 <HAL_I2C_Master_Receive+0x30>
 8102e7c:	2302      	movs	r3, #2
 8102e7e:	e0d4      	b.n	810302a <HAL_I2C_Master_Receive+0x1da>
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	2201      	movs	r2, #1
 8102e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102e88:	f7ff fb48 	bl	810251c <HAL_GetTick>
 8102e8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102e8e:	697b      	ldr	r3, [r7, #20]
 8102e90:	9300      	str	r3, [sp, #0]
 8102e92:	2319      	movs	r3, #25
 8102e94:	2201      	movs	r2, #1
 8102e96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102e9a:	68f8      	ldr	r0, [r7, #12]
 8102e9c:	f000 fa13 	bl	81032c6 <I2C_WaitOnFlagUntilTimeout>
 8102ea0:	4603      	mov	r3, r0
 8102ea2:	2b00      	cmp	r3, #0
 8102ea4:	d001      	beq.n	8102eaa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8102ea6:	2301      	movs	r3, #1
 8102ea8:	e0bf      	b.n	810302a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8102eaa:	68fb      	ldr	r3, [r7, #12]
 8102eac:	2222      	movs	r2, #34	; 0x22
 8102eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8102eb2:	68fb      	ldr	r3, [r7, #12]
 8102eb4:	2210      	movs	r2, #16
 8102eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102eba:	68fb      	ldr	r3, [r7, #12]
 8102ebc:	2200      	movs	r2, #0
 8102ebe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102ec0:	68fb      	ldr	r3, [r7, #12]
 8102ec2:	687a      	ldr	r2, [r7, #4]
 8102ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102ec6:	68fb      	ldr	r3, [r7, #12]
 8102ec8:	893a      	ldrh	r2, [r7, #8]
 8102eca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102ecc:	68fb      	ldr	r3, [r7, #12]
 8102ece:	2200      	movs	r2, #0
 8102ed0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102ed2:	68fb      	ldr	r3, [r7, #12]
 8102ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102ed6:	b29b      	uxth	r3, r3
 8102ed8:	2bff      	cmp	r3, #255	; 0xff
 8102eda:	d90e      	bls.n	8102efa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102edc:	68fb      	ldr	r3, [r7, #12]
 8102ede:	22ff      	movs	r2, #255	; 0xff
 8102ee0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102ee2:	68fb      	ldr	r3, [r7, #12]
 8102ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102ee6:	b2da      	uxtb	r2, r3
 8102ee8:	8979      	ldrh	r1, [r7, #10]
 8102eea:	4b52      	ldr	r3, [pc, #328]	; (8103034 <HAL_I2C_Master_Receive+0x1e4>)
 8102eec:	9300      	str	r3, [sp, #0]
 8102eee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102ef2:	68f8      	ldr	r0, [r7, #12]
 8102ef4:	f000 fc22 	bl	810373c <I2C_TransferConfig>
 8102ef8:	e06d      	b.n	8102fd6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102efa:	68fb      	ldr	r3, [r7, #12]
 8102efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102efe:	b29a      	uxth	r2, r3
 8102f00:	68fb      	ldr	r3, [r7, #12]
 8102f02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102f04:	68fb      	ldr	r3, [r7, #12]
 8102f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102f08:	b2da      	uxtb	r2, r3
 8102f0a:	8979      	ldrh	r1, [r7, #10]
 8102f0c:	4b49      	ldr	r3, [pc, #292]	; (8103034 <HAL_I2C_Master_Receive+0x1e4>)
 8102f0e:	9300      	str	r3, [sp, #0]
 8102f10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102f14:	68f8      	ldr	r0, [r7, #12]
 8102f16:	f000 fc11 	bl	810373c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8102f1a:	e05c      	b.n	8102fd6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102f1c:	697a      	ldr	r2, [r7, #20]
 8102f1e:	6a39      	ldr	r1, [r7, #32]
 8102f20:	68f8      	ldr	r0, [r7, #12]
 8102f22:	f000 faa9 	bl	8103478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8102f26:	4603      	mov	r3, r0
 8102f28:	2b00      	cmp	r3, #0
 8102f2a:	d001      	beq.n	8102f30 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8102f2c:	2301      	movs	r3, #1
 8102f2e:	e07c      	b.n	810302a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8102f30:	68fb      	ldr	r3, [r7, #12]
 8102f32:	681b      	ldr	r3, [r3, #0]
 8102f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102f36:	68fb      	ldr	r3, [r7, #12]
 8102f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102f3a:	b2d2      	uxtb	r2, r2
 8102f3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102f3e:	68fb      	ldr	r3, [r7, #12]
 8102f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102f42:	1c5a      	adds	r2, r3, #1
 8102f44:	68fb      	ldr	r3, [r7, #12]
 8102f46:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8102f48:	68fb      	ldr	r3, [r7, #12]
 8102f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102f4c:	3b01      	subs	r3, #1
 8102f4e:	b29a      	uxth	r2, r3
 8102f50:	68fb      	ldr	r3, [r7, #12]
 8102f52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8102f54:	68fb      	ldr	r3, [r7, #12]
 8102f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102f58:	b29b      	uxth	r3, r3
 8102f5a:	3b01      	subs	r3, #1
 8102f5c:	b29a      	uxth	r2, r3
 8102f5e:	68fb      	ldr	r3, [r7, #12]
 8102f60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102f62:	68fb      	ldr	r3, [r7, #12]
 8102f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102f66:	b29b      	uxth	r3, r3
 8102f68:	2b00      	cmp	r3, #0
 8102f6a:	d034      	beq.n	8102fd6 <HAL_I2C_Master_Receive+0x186>
 8102f6c:	68fb      	ldr	r3, [r7, #12]
 8102f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102f70:	2b00      	cmp	r3, #0
 8102f72:	d130      	bne.n	8102fd6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102f74:	697b      	ldr	r3, [r7, #20]
 8102f76:	9300      	str	r3, [sp, #0]
 8102f78:	6a3b      	ldr	r3, [r7, #32]
 8102f7a:	2200      	movs	r2, #0
 8102f7c:	2180      	movs	r1, #128	; 0x80
 8102f7e:	68f8      	ldr	r0, [r7, #12]
 8102f80:	f000 f9a1 	bl	81032c6 <I2C_WaitOnFlagUntilTimeout>
 8102f84:	4603      	mov	r3, r0
 8102f86:	2b00      	cmp	r3, #0
 8102f88:	d001      	beq.n	8102f8e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8102f8a:	2301      	movs	r3, #1
 8102f8c:	e04d      	b.n	810302a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102f8e:	68fb      	ldr	r3, [r7, #12]
 8102f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102f92:	b29b      	uxth	r3, r3
 8102f94:	2bff      	cmp	r3, #255	; 0xff
 8102f96:	d90e      	bls.n	8102fb6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102f98:	68fb      	ldr	r3, [r7, #12]
 8102f9a:	22ff      	movs	r2, #255	; 0xff
 8102f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102f9e:	68fb      	ldr	r3, [r7, #12]
 8102fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102fa2:	b2da      	uxtb	r2, r3
 8102fa4:	8979      	ldrh	r1, [r7, #10]
 8102fa6:	2300      	movs	r3, #0
 8102fa8:	9300      	str	r3, [sp, #0]
 8102faa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102fae:	68f8      	ldr	r0, [r7, #12]
 8102fb0:	f000 fbc4 	bl	810373c <I2C_TransferConfig>
 8102fb4:	e00f      	b.n	8102fd6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102fb6:	68fb      	ldr	r3, [r7, #12]
 8102fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102fba:	b29a      	uxth	r2, r3
 8102fbc:	68fb      	ldr	r3, [r7, #12]
 8102fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102fc0:	68fb      	ldr	r3, [r7, #12]
 8102fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102fc4:	b2da      	uxtb	r2, r3
 8102fc6:	8979      	ldrh	r1, [r7, #10]
 8102fc8:	2300      	movs	r3, #0
 8102fca:	9300      	str	r3, [sp, #0]
 8102fcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102fd0:	68f8      	ldr	r0, [r7, #12]
 8102fd2:	f000 fbb3 	bl	810373c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8102fd6:	68fb      	ldr	r3, [r7, #12]
 8102fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102fda:	b29b      	uxth	r3, r3
 8102fdc:	2b00      	cmp	r3, #0
 8102fde:	d19d      	bne.n	8102f1c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102fe0:	697a      	ldr	r2, [r7, #20]
 8102fe2:	6a39      	ldr	r1, [r7, #32]
 8102fe4:	68f8      	ldr	r0, [r7, #12]
 8102fe6:	f000 fa04 	bl	81033f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102fea:	4603      	mov	r3, r0
 8102fec:	2b00      	cmp	r3, #0
 8102fee:	d001      	beq.n	8102ff4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8102ff0:	2301      	movs	r3, #1
 8102ff2:	e01a      	b.n	810302a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102ff4:	68fb      	ldr	r3, [r7, #12]
 8102ff6:	681b      	ldr	r3, [r3, #0]
 8102ff8:	2220      	movs	r2, #32
 8102ffa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102ffc:	68fb      	ldr	r3, [r7, #12]
 8102ffe:	681b      	ldr	r3, [r3, #0]
 8103000:	6859      	ldr	r1, [r3, #4]
 8103002:	68fb      	ldr	r3, [r7, #12]
 8103004:	681a      	ldr	r2, [r3, #0]
 8103006:	4b0c      	ldr	r3, [pc, #48]	; (8103038 <HAL_I2C_Master_Receive+0x1e8>)
 8103008:	400b      	ands	r3, r1
 810300a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810300c:	68fb      	ldr	r3, [r7, #12]
 810300e:	2220      	movs	r2, #32
 8103010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103014:	68fb      	ldr	r3, [r7, #12]
 8103016:	2200      	movs	r2, #0
 8103018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810301c:	68fb      	ldr	r3, [r7, #12]
 810301e:	2200      	movs	r2, #0
 8103020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103024:	2300      	movs	r3, #0
 8103026:	e000      	b.n	810302a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8103028:	2302      	movs	r3, #2
  }
}
 810302a:	4618      	mov	r0, r3
 810302c:	3718      	adds	r7, #24
 810302e:	46bd      	mov	sp, r7
 8103030:	bd80      	pop	{r7, pc}
 8103032:	bf00      	nop
 8103034:	80002400 	.word	0x80002400
 8103038:	fe00e800 	.word	0xfe00e800

0810303c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 810303c:	b580      	push	{r7, lr}
 810303e:	b08a      	sub	sp, #40	; 0x28
 8103040:	af02      	add	r7, sp, #8
 8103042:	60f8      	str	r0, [r7, #12]
 8103044:	607a      	str	r2, [r7, #4]
 8103046:	603b      	str	r3, [r7, #0]
 8103048:	460b      	mov	r3, r1
 810304a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 810304c:	2300      	movs	r3, #0
 810304e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103050:	68fb      	ldr	r3, [r7, #12]
 8103052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103056:	b2db      	uxtb	r3, r3
 8103058:	2b20      	cmp	r3, #32
 810305a:	f040 80f1 	bne.w	8103240 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 810305e:	68fb      	ldr	r3, [r7, #12]
 8103060:	681b      	ldr	r3, [r3, #0]
 8103062:	699b      	ldr	r3, [r3, #24]
 8103064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810306c:	d101      	bne.n	8103072 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 810306e:	2302      	movs	r3, #2
 8103070:	e0e7      	b.n	8103242 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103072:	68fb      	ldr	r3, [r7, #12]
 8103074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103078:	2b01      	cmp	r3, #1
 810307a:	d101      	bne.n	8103080 <HAL_I2C_IsDeviceReady+0x44>
 810307c:	2302      	movs	r3, #2
 810307e:	e0e0      	b.n	8103242 <HAL_I2C_IsDeviceReady+0x206>
 8103080:	68fb      	ldr	r3, [r7, #12]
 8103082:	2201      	movs	r2, #1
 8103084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103088:	68fb      	ldr	r3, [r7, #12]
 810308a:	2224      	movs	r2, #36	; 0x24
 810308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103090:	68fb      	ldr	r3, [r7, #12]
 8103092:	2200      	movs	r2, #0
 8103094:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8103096:	68fb      	ldr	r3, [r7, #12]
 8103098:	68db      	ldr	r3, [r3, #12]
 810309a:	2b01      	cmp	r3, #1
 810309c:	d107      	bne.n	81030ae <HAL_I2C_IsDeviceReady+0x72>
 810309e:	897b      	ldrh	r3, [r7, #10]
 81030a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81030a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81030a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 81030ac:	e004      	b.n	81030b8 <HAL_I2C_IsDeviceReady+0x7c>
 81030ae:	897b      	ldrh	r3, [r7, #10]
 81030b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81030b4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 81030b8:	68fa      	ldr	r2, [r7, #12]
 81030ba:	6812      	ldr	r2, [r2, #0]
 81030bc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 81030be:	f7ff fa2d 	bl	810251c <HAL_GetTick>
 81030c2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 81030c4:	68fb      	ldr	r3, [r7, #12]
 81030c6:	681b      	ldr	r3, [r3, #0]
 81030c8:	699b      	ldr	r3, [r3, #24]
 81030ca:	f003 0320 	and.w	r3, r3, #32
 81030ce:	2b20      	cmp	r3, #32
 81030d0:	bf0c      	ite	eq
 81030d2:	2301      	moveq	r3, #1
 81030d4:	2300      	movne	r3, #0
 81030d6:	b2db      	uxtb	r3, r3
 81030d8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 81030da:	68fb      	ldr	r3, [r7, #12]
 81030dc:	681b      	ldr	r3, [r3, #0]
 81030de:	699b      	ldr	r3, [r3, #24]
 81030e0:	f003 0310 	and.w	r3, r3, #16
 81030e4:	2b10      	cmp	r3, #16
 81030e6:	bf0c      	ite	eq
 81030e8:	2301      	moveq	r3, #1
 81030ea:	2300      	movne	r3, #0
 81030ec:	b2db      	uxtb	r3, r3
 81030ee:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 81030f0:	e034      	b.n	810315c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 81030f2:	683b      	ldr	r3, [r7, #0]
 81030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81030f8:	d01a      	beq.n	8103130 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81030fa:	f7ff fa0f 	bl	810251c <HAL_GetTick>
 81030fe:	4602      	mov	r2, r0
 8103100:	69bb      	ldr	r3, [r7, #24]
 8103102:	1ad3      	subs	r3, r2, r3
 8103104:	683a      	ldr	r2, [r7, #0]
 8103106:	429a      	cmp	r2, r3
 8103108:	d302      	bcc.n	8103110 <HAL_I2C_IsDeviceReady+0xd4>
 810310a:	683b      	ldr	r3, [r7, #0]
 810310c:	2b00      	cmp	r3, #0
 810310e:	d10f      	bne.n	8103130 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8103110:	68fb      	ldr	r3, [r7, #12]
 8103112:	2220      	movs	r2, #32
 8103114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103118:	68fb      	ldr	r3, [r7, #12]
 810311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810311c:	f043 0220 	orr.w	r2, r3, #32
 8103120:	68fb      	ldr	r3, [r7, #12]
 8103122:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8103124:	68fb      	ldr	r3, [r7, #12]
 8103126:	2200      	movs	r2, #0
 8103128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 810312c:	2301      	movs	r3, #1
 810312e:	e088      	b.n	8103242 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8103130:	68fb      	ldr	r3, [r7, #12]
 8103132:	681b      	ldr	r3, [r3, #0]
 8103134:	699b      	ldr	r3, [r3, #24]
 8103136:	f003 0320 	and.w	r3, r3, #32
 810313a:	2b20      	cmp	r3, #32
 810313c:	bf0c      	ite	eq
 810313e:	2301      	moveq	r3, #1
 8103140:	2300      	movne	r3, #0
 8103142:	b2db      	uxtb	r3, r3
 8103144:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8103146:	68fb      	ldr	r3, [r7, #12]
 8103148:	681b      	ldr	r3, [r3, #0]
 810314a:	699b      	ldr	r3, [r3, #24]
 810314c:	f003 0310 	and.w	r3, r3, #16
 8103150:	2b10      	cmp	r3, #16
 8103152:	bf0c      	ite	eq
 8103154:	2301      	moveq	r3, #1
 8103156:	2300      	movne	r3, #0
 8103158:	b2db      	uxtb	r3, r3
 810315a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 810315c:	7ffb      	ldrb	r3, [r7, #31]
 810315e:	2b00      	cmp	r3, #0
 8103160:	d102      	bne.n	8103168 <HAL_I2C_IsDeviceReady+0x12c>
 8103162:	7fbb      	ldrb	r3, [r7, #30]
 8103164:	2b00      	cmp	r3, #0
 8103166:	d0c4      	beq.n	81030f2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8103168:	68fb      	ldr	r3, [r7, #12]
 810316a:	681b      	ldr	r3, [r3, #0]
 810316c:	699b      	ldr	r3, [r3, #24]
 810316e:	f003 0310 	and.w	r3, r3, #16
 8103172:	2b10      	cmp	r3, #16
 8103174:	d01a      	beq.n	81031ac <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8103176:	69bb      	ldr	r3, [r7, #24]
 8103178:	9300      	str	r3, [sp, #0]
 810317a:	683b      	ldr	r3, [r7, #0]
 810317c:	2200      	movs	r2, #0
 810317e:	2120      	movs	r1, #32
 8103180:	68f8      	ldr	r0, [r7, #12]
 8103182:	f000 f8a0 	bl	81032c6 <I2C_WaitOnFlagUntilTimeout>
 8103186:	4603      	mov	r3, r0
 8103188:	2b00      	cmp	r3, #0
 810318a:	d001      	beq.n	8103190 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 810318c:	2301      	movs	r3, #1
 810318e:	e058      	b.n	8103242 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103190:	68fb      	ldr	r3, [r7, #12]
 8103192:	681b      	ldr	r3, [r3, #0]
 8103194:	2220      	movs	r2, #32
 8103196:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8103198:	68fb      	ldr	r3, [r7, #12]
 810319a:	2220      	movs	r2, #32
 810319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81031a0:	68fb      	ldr	r3, [r7, #12]
 81031a2:	2200      	movs	r2, #0
 81031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 81031a8:	2300      	movs	r3, #0
 81031aa:	e04a      	b.n	8103242 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 81031ac:	69bb      	ldr	r3, [r7, #24]
 81031ae:	9300      	str	r3, [sp, #0]
 81031b0:	683b      	ldr	r3, [r7, #0]
 81031b2:	2200      	movs	r2, #0
 81031b4:	2120      	movs	r1, #32
 81031b6:	68f8      	ldr	r0, [r7, #12]
 81031b8:	f000 f885 	bl	81032c6 <I2C_WaitOnFlagUntilTimeout>
 81031bc:	4603      	mov	r3, r0
 81031be:	2b00      	cmp	r3, #0
 81031c0:	d001      	beq.n	81031c6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 81031c2:	2301      	movs	r3, #1
 81031c4:	e03d      	b.n	8103242 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81031c6:	68fb      	ldr	r3, [r7, #12]
 81031c8:	681b      	ldr	r3, [r3, #0]
 81031ca:	2210      	movs	r2, #16
 81031cc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81031ce:	68fb      	ldr	r3, [r7, #12]
 81031d0:	681b      	ldr	r3, [r3, #0]
 81031d2:	2220      	movs	r2, #32
 81031d4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 81031d6:	697b      	ldr	r3, [r7, #20]
 81031d8:	687a      	ldr	r2, [r7, #4]
 81031da:	429a      	cmp	r2, r3
 81031dc:	d118      	bne.n	8103210 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81031de:	68fb      	ldr	r3, [r7, #12]
 81031e0:	681b      	ldr	r3, [r3, #0]
 81031e2:	685a      	ldr	r2, [r3, #4]
 81031e4:	68fb      	ldr	r3, [r7, #12]
 81031e6:	681b      	ldr	r3, [r3, #0]
 81031e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81031ec:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 81031ee:	69bb      	ldr	r3, [r7, #24]
 81031f0:	9300      	str	r3, [sp, #0]
 81031f2:	683b      	ldr	r3, [r7, #0]
 81031f4:	2200      	movs	r2, #0
 81031f6:	2120      	movs	r1, #32
 81031f8:	68f8      	ldr	r0, [r7, #12]
 81031fa:	f000 f864 	bl	81032c6 <I2C_WaitOnFlagUntilTimeout>
 81031fe:	4603      	mov	r3, r0
 8103200:	2b00      	cmp	r3, #0
 8103202:	d001      	beq.n	8103208 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8103204:	2301      	movs	r3, #1
 8103206:	e01c      	b.n	8103242 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103208:	68fb      	ldr	r3, [r7, #12]
 810320a:	681b      	ldr	r3, [r3, #0]
 810320c:	2220      	movs	r2, #32
 810320e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8103210:	697b      	ldr	r3, [r7, #20]
 8103212:	3301      	adds	r3, #1
 8103214:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8103216:	697b      	ldr	r3, [r7, #20]
 8103218:	687a      	ldr	r2, [r7, #4]
 810321a:	429a      	cmp	r2, r3
 810321c:	f63f af3b 	bhi.w	8103096 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8103220:	68fb      	ldr	r3, [r7, #12]
 8103222:	2220      	movs	r2, #32
 8103224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103228:	68fb      	ldr	r3, [r7, #12]
 810322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810322c:	f043 0220 	orr.w	r2, r3, #32
 8103230:	68fb      	ldr	r3, [r7, #12]
 8103232:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103234:	68fb      	ldr	r3, [r7, #12]
 8103236:	2200      	movs	r2, #0
 8103238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 810323c:	2301      	movs	r3, #1
 810323e:	e000      	b.n	8103242 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8103240:	2302      	movs	r3, #2
  }
}
 8103242:	4618      	mov	r0, r3
 8103244:	3720      	adds	r7, #32
 8103246:	46bd      	mov	sp, r7
 8103248:	bd80      	pop	{r7, pc}

0810324a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 810324a:	b480      	push	{r7}
 810324c:	b083      	sub	sp, #12
 810324e:	af00      	add	r7, sp, #0
 8103250:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103258:	b2db      	uxtb	r3, r3
}
 810325a:	4618      	mov	r0, r3
 810325c:	370c      	adds	r7, #12
 810325e:	46bd      	mov	sp, r7
 8103260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103264:	4770      	bx	lr

08103266 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8103266:	b480      	push	{r7}
 8103268:	b083      	sub	sp, #12
 810326a:	af00      	add	r7, sp, #0
 810326c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 810326e:	687b      	ldr	r3, [r7, #4]
 8103270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8103272:	4618      	mov	r0, r3
 8103274:	370c      	adds	r7, #12
 8103276:	46bd      	mov	sp, r7
 8103278:	f85d 7b04 	ldr.w	r7, [sp], #4
 810327c:	4770      	bx	lr

0810327e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 810327e:	b480      	push	{r7}
 8103280:	b083      	sub	sp, #12
 8103282:	af00      	add	r7, sp, #0
 8103284:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	681b      	ldr	r3, [r3, #0]
 810328a:	699b      	ldr	r3, [r3, #24]
 810328c:	f003 0302 	and.w	r3, r3, #2
 8103290:	2b02      	cmp	r3, #2
 8103292:	d103      	bne.n	810329c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	681b      	ldr	r3, [r3, #0]
 8103298:	2200      	movs	r2, #0
 810329a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810329c:	687b      	ldr	r3, [r7, #4]
 810329e:	681b      	ldr	r3, [r3, #0]
 81032a0:	699b      	ldr	r3, [r3, #24]
 81032a2:	f003 0301 	and.w	r3, r3, #1
 81032a6:	2b01      	cmp	r3, #1
 81032a8:	d007      	beq.n	81032ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	681b      	ldr	r3, [r3, #0]
 81032ae:	699a      	ldr	r2, [r3, #24]
 81032b0:	687b      	ldr	r3, [r7, #4]
 81032b2:	681b      	ldr	r3, [r3, #0]
 81032b4:	f042 0201 	orr.w	r2, r2, #1
 81032b8:	619a      	str	r2, [r3, #24]
  }
}
 81032ba:	bf00      	nop
 81032bc:	370c      	adds	r7, #12
 81032be:	46bd      	mov	sp, r7
 81032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032c4:	4770      	bx	lr

081032c6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81032c6:	b580      	push	{r7, lr}
 81032c8:	b084      	sub	sp, #16
 81032ca:	af00      	add	r7, sp, #0
 81032cc:	60f8      	str	r0, [r7, #12]
 81032ce:	60b9      	str	r1, [r7, #8]
 81032d0:	603b      	str	r3, [r7, #0]
 81032d2:	4613      	mov	r3, r2
 81032d4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81032d6:	e031      	b.n	810333c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81032d8:	683b      	ldr	r3, [r7, #0]
 81032da:	f1b3 3fff 	cmp.w	r3, #4294967295
 81032de:	d02d      	beq.n	810333c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81032e0:	f7ff f91c 	bl	810251c <HAL_GetTick>
 81032e4:	4602      	mov	r2, r0
 81032e6:	69bb      	ldr	r3, [r7, #24]
 81032e8:	1ad3      	subs	r3, r2, r3
 81032ea:	683a      	ldr	r2, [r7, #0]
 81032ec:	429a      	cmp	r2, r3
 81032ee:	d302      	bcc.n	81032f6 <I2C_WaitOnFlagUntilTimeout+0x30>
 81032f0:	683b      	ldr	r3, [r7, #0]
 81032f2:	2b00      	cmp	r3, #0
 81032f4:	d122      	bne.n	810333c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 81032f6:	68fb      	ldr	r3, [r7, #12]
 81032f8:	681b      	ldr	r3, [r3, #0]
 81032fa:	699a      	ldr	r2, [r3, #24]
 81032fc:	68bb      	ldr	r3, [r7, #8]
 81032fe:	4013      	ands	r3, r2
 8103300:	68ba      	ldr	r2, [r7, #8]
 8103302:	429a      	cmp	r2, r3
 8103304:	bf0c      	ite	eq
 8103306:	2301      	moveq	r3, #1
 8103308:	2300      	movne	r3, #0
 810330a:	b2db      	uxtb	r3, r3
 810330c:	461a      	mov	r2, r3
 810330e:	79fb      	ldrb	r3, [r7, #7]
 8103310:	429a      	cmp	r2, r3
 8103312:	d113      	bne.n	810333c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103314:	68fb      	ldr	r3, [r7, #12]
 8103316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103318:	f043 0220 	orr.w	r2, r3, #32
 810331c:	68fb      	ldr	r3, [r7, #12]
 810331e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8103320:	68fb      	ldr	r3, [r7, #12]
 8103322:	2220      	movs	r2, #32
 8103324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8103328:	68fb      	ldr	r3, [r7, #12]
 810332a:	2200      	movs	r2, #0
 810332c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8103330:	68fb      	ldr	r3, [r7, #12]
 8103332:	2200      	movs	r2, #0
 8103334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8103338:	2301      	movs	r3, #1
 810333a:	e00f      	b.n	810335c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810333c:	68fb      	ldr	r3, [r7, #12]
 810333e:	681b      	ldr	r3, [r3, #0]
 8103340:	699a      	ldr	r2, [r3, #24]
 8103342:	68bb      	ldr	r3, [r7, #8]
 8103344:	4013      	ands	r3, r2
 8103346:	68ba      	ldr	r2, [r7, #8]
 8103348:	429a      	cmp	r2, r3
 810334a:	bf0c      	ite	eq
 810334c:	2301      	moveq	r3, #1
 810334e:	2300      	movne	r3, #0
 8103350:	b2db      	uxtb	r3, r3
 8103352:	461a      	mov	r2, r3
 8103354:	79fb      	ldrb	r3, [r7, #7]
 8103356:	429a      	cmp	r2, r3
 8103358:	d0be      	beq.n	81032d8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810335a:	2300      	movs	r3, #0
}
 810335c:	4618      	mov	r0, r3
 810335e:	3710      	adds	r7, #16
 8103360:	46bd      	mov	sp, r7
 8103362:	bd80      	pop	{r7, pc}

08103364 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103364:	b580      	push	{r7, lr}
 8103366:	b084      	sub	sp, #16
 8103368:	af00      	add	r7, sp, #0
 810336a:	60f8      	str	r0, [r7, #12]
 810336c:	60b9      	str	r1, [r7, #8]
 810336e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103370:	e033      	b.n	81033da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103372:	687a      	ldr	r2, [r7, #4]
 8103374:	68b9      	ldr	r1, [r7, #8]
 8103376:	68f8      	ldr	r0, [r7, #12]
 8103378:	f000 f900 	bl	810357c <I2C_IsErrorOccurred>
 810337c:	4603      	mov	r3, r0
 810337e:	2b00      	cmp	r3, #0
 8103380:	d001      	beq.n	8103386 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103382:	2301      	movs	r3, #1
 8103384:	e031      	b.n	81033ea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103386:	68bb      	ldr	r3, [r7, #8]
 8103388:	f1b3 3fff 	cmp.w	r3, #4294967295
 810338c:	d025      	beq.n	81033da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810338e:	f7ff f8c5 	bl	810251c <HAL_GetTick>
 8103392:	4602      	mov	r2, r0
 8103394:	687b      	ldr	r3, [r7, #4]
 8103396:	1ad3      	subs	r3, r2, r3
 8103398:	68ba      	ldr	r2, [r7, #8]
 810339a:	429a      	cmp	r2, r3
 810339c:	d302      	bcc.n	81033a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810339e:	68bb      	ldr	r3, [r7, #8]
 81033a0:	2b00      	cmp	r3, #0
 81033a2:	d11a      	bne.n	81033da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 81033a4:	68fb      	ldr	r3, [r7, #12]
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	699b      	ldr	r3, [r3, #24]
 81033aa:	f003 0302 	and.w	r3, r3, #2
 81033ae:	2b02      	cmp	r3, #2
 81033b0:	d013      	beq.n	81033da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81033b2:	68fb      	ldr	r3, [r7, #12]
 81033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81033b6:	f043 0220 	orr.w	r2, r3, #32
 81033ba:	68fb      	ldr	r3, [r7, #12]
 81033bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81033be:	68fb      	ldr	r3, [r7, #12]
 81033c0:	2220      	movs	r2, #32
 81033c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81033c6:	68fb      	ldr	r3, [r7, #12]
 81033c8:	2200      	movs	r2, #0
 81033ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81033ce:	68fb      	ldr	r3, [r7, #12]
 81033d0:	2200      	movs	r2, #0
 81033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 81033d6:	2301      	movs	r3, #1
 81033d8:	e007      	b.n	81033ea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81033da:	68fb      	ldr	r3, [r7, #12]
 81033dc:	681b      	ldr	r3, [r3, #0]
 81033de:	699b      	ldr	r3, [r3, #24]
 81033e0:	f003 0302 	and.w	r3, r3, #2
 81033e4:	2b02      	cmp	r3, #2
 81033e6:	d1c4      	bne.n	8103372 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 81033e8:	2300      	movs	r3, #0
}
 81033ea:	4618      	mov	r0, r3
 81033ec:	3710      	adds	r7, #16
 81033ee:	46bd      	mov	sp, r7
 81033f0:	bd80      	pop	{r7, pc}

081033f2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81033f2:	b580      	push	{r7, lr}
 81033f4:	b084      	sub	sp, #16
 81033f6:	af00      	add	r7, sp, #0
 81033f8:	60f8      	str	r0, [r7, #12]
 81033fa:	60b9      	str	r1, [r7, #8]
 81033fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81033fe:	e02f      	b.n	8103460 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103400:	687a      	ldr	r2, [r7, #4]
 8103402:	68b9      	ldr	r1, [r7, #8]
 8103404:	68f8      	ldr	r0, [r7, #12]
 8103406:	f000 f8b9 	bl	810357c <I2C_IsErrorOccurred>
 810340a:	4603      	mov	r3, r0
 810340c:	2b00      	cmp	r3, #0
 810340e:	d001      	beq.n	8103414 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103410:	2301      	movs	r3, #1
 8103412:	e02d      	b.n	8103470 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103414:	f7ff f882 	bl	810251c <HAL_GetTick>
 8103418:	4602      	mov	r2, r0
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	1ad3      	subs	r3, r2, r3
 810341e:	68ba      	ldr	r2, [r7, #8]
 8103420:	429a      	cmp	r2, r3
 8103422:	d302      	bcc.n	810342a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8103424:	68bb      	ldr	r3, [r7, #8]
 8103426:	2b00      	cmp	r3, #0
 8103428:	d11a      	bne.n	8103460 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 810342a:	68fb      	ldr	r3, [r7, #12]
 810342c:	681b      	ldr	r3, [r3, #0]
 810342e:	699b      	ldr	r3, [r3, #24]
 8103430:	f003 0320 	and.w	r3, r3, #32
 8103434:	2b20      	cmp	r3, #32
 8103436:	d013      	beq.n	8103460 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103438:	68fb      	ldr	r3, [r7, #12]
 810343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810343c:	f043 0220 	orr.w	r2, r3, #32
 8103440:	68fb      	ldr	r3, [r7, #12]
 8103442:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103444:	68fb      	ldr	r3, [r7, #12]
 8103446:	2220      	movs	r2, #32
 8103448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810344c:	68fb      	ldr	r3, [r7, #12]
 810344e:	2200      	movs	r2, #0
 8103450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103454:	68fb      	ldr	r3, [r7, #12]
 8103456:	2200      	movs	r2, #0
 8103458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 810345c:	2301      	movs	r3, #1
 810345e:	e007      	b.n	8103470 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103460:	68fb      	ldr	r3, [r7, #12]
 8103462:	681b      	ldr	r3, [r3, #0]
 8103464:	699b      	ldr	r3, [r3, #24]
 8103466:	f003 0320 	and.w	r3, r3, #32
 810346a:	2b20      	cmp	r3, #32
 810346c:	d1c8      	bne.n	8103400 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810346e:	2300      	movs	r3, #0
}
 8103470:	4618      	mov	r0, r3
 8103472:	3710      	adds	r7, #16
 8103474:	46bd      	mov	sp, r7
 8103476:	bd80      	pop	{r7, pc}

08103478 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103478:	b580      	push	{r7, lr}
 810347a:	b084      	sub	sp, #16
 810347c:	af00      	add	r7, sp, #0
 810347e:	60f8      	str	r0, [r7, #12]
 8103480:	60b9      	str	r1, [r7, #8]
 8103482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8103484:	e06b      	b.n	810355e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103486:	687a      	ldr	r2, [r7, #4]
 8103488:	68b9      	ldr	r1, [r7, #8]
 810348a:	68f8      	ldr	r0, [r7, #12]
 810348c:	f000 f876 	bl	810357c <I2C_IsErrorOccurred>
 8103490:	4603      	mov	r3, r0
 8103492:	2b00      	cmp	r3, #0
 8103494:	d001      	beq.n	810349a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103496:	2301      	movs	r3, #1
 8103498:	e069      	b.n	810356e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 810349a:	68fb      	ldr	r3, [r7, #12]
 810349c:	681b      	ldr	r3, [r3, #0]
 810349e:	699b      	ldr	r3, [r3, #24]
 81034a0:	f003 0320 	and.w	r3, r3, #32
 81034a4:	2b20      	cmp	r3, #32
 81034a6:	d138      	bne.n	810351a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 81034a8:	68fb      	ldr	r3, [r7, #12]
 81034aa:	681b      	ldr	r3, [r3, #0]
 81034ac:	699b      	ldr	r3, [r3, #24]
 81034ae:	f003 0304 	and.w	r3, r3, #4
 81034b2:	2b04      	cmp	r3, #4
 81034b4:	d105      	bne.n	81034c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 81034b6:	68fb      	ldr	r3, [r7, #12]
 81034b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81034ba:	2b00      	cmp	r3, #0
 81034bc:	d001      	beq.n	81034c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 81034be:	2300      	movs	r3, #0
 81034c0:	e055      	b.n	810356e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81034c2:	68fb      	ldr	r3, [r7, #12]
 81034c4:	681b      	ldr	r3, [r3, #0]
 81034c6:	699b      	ldr	r3, [r3, #24]
 81034c8:	f003 0310 	and.w	r3, r3, #16
 81034cc:	2b10      	cmp	r3, #16
 81034ce:	d107      	bne.n	81034e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81034d0:	68fb      	ldr	r3, [r7, #12]
 81034d2:	681b      	ldr	r3, [r3, #0]
 81034d4:	2210      	movs	r2, #16
 81034d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 81034d8:	68fb      	ldr	r3, [r7, #12]
 81034da:	2204      	movs	r2, #4
 81034dc:	645a      	str	r2, [r3, #68]	; 0x44
 81034de:	e002      	b.n	81034e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81034e0:	68fb      	ldr	r3, [r7, #12]
 81034e2:	2200      	movs	r2, #0
 81034e4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81034e6:	68fb      	ldr	r3, [r7, #12]
 81034e8:	681b      	ldr	r3, [r3, #0]
 81034ea:	2220      	movs	r2, #32
 81034ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 81034ee:	68fb      	ldr	r3, [r7, #12]
 81034f0:	681b      	ldr	r3, [r3, #0]
 81034f2:	6859      	ldr	r1, [r3, #4]
 81034f4:	68fb      	ldr	r3, [r7, #12]
 81034f6:	681a      	ldr	r2, [r3, #0]
 81034f8:	4b1f      	ldr	r3, [pc, #124]	; (8103578 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 81034fa:	400b      	ands	r3, r1
 81034fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 81034fe:	68fb      	ldr	r3, [r7, #12]
 8103500:	2220      	movs	r2, #32
 8103502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103506:	68fb      	ldr	r3, [r7, #12]
 8103508:	2200      	movs	r2, #0
 810350a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810350e:	68fb      	ldr	r3, [r7, #12]
 8103510:	2200      	movs	r2, #0
 8103512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8103516:	2301      	movs	r3, #1
 8103518:	e029      	b.n	810356e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810351a:	f7fe ffff 	bl	810251c <HAL_GetTick>
 810351e:	4602      	mov	r2, r0
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	1ad3      	subs	r3, r2, r3
 8103524:	68ba      	ldr	r2, [r7, #8]
 8103526:	429a      	cmp	r2, r3
 8103528:	d302      	bcc.n	8103530 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 810352a:	68bb      	ldr	r3, [r7, #8]
 810352c:	2b00      	cmp	r3, #0
 810352e:	d116      	bne.n	810355e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8103530:	68fb      	ldr	r3, [r7, #12]
 8103532:	681b      	ldr	r3, [r3, #0]
 8103534:	699b      	ldr	r3, [r3, #24]
 8103536:	f003 0304 	and.w	r3, r3, #4
 810353a:	2b04      	cmp	r3, #4
 810353c:	d00f      	beq.n	810355e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810353e:	68fb      	ldr	r3, [r7, #12]
 8103540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103542:	f043 0220 	orr.w	r2, r3, #32
 8103546:	68fb      	ldr	r3, [r7, #12]
 8103548:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810354a:	68fb      	ldr	r3, [r7, #12]
 810354c:	2220      	movs	r2, #32
 810354e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103552:	68fb      	ldr	r3, [r7, #12]
 8103554:	2200      	movs	r2, #0
 8103556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 810355a:	2301      	movs	r3, #1
 810355c:	e007      	b.n	810356e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 810355e:	68fb      	ldr	r3, [r7, #12]
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	699b      	ldr	r3, [r3, #24]
 8103564:	f003 0304 	and.w	r3, r3, #4
 8103568:	2b04      	cmp	r3, #4
 810356a:	d18c      	bne.n	8103486 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810356c:	2300      	movs	r3, #0
}
 810356e:	4618      	mov	r0, r3
 8103570:	3710      	adds	r7, #16
 8103572:	46bd      	mov	sp, r7
 8103574:	bd80      	pop	{r7, pc}
 8103576:	bf00      	nop
 8103578:	fe00e800 	.word	0xfe00e800

0810357c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810357c:	b580      	push	{r7, lr}
 810357e:	b08a      	sub	sp, #40	; 0x28
 8103580:	af00      	add	r7, sp, #0
 8103582:	60f8      	str	r0, [r7, #12]
 8103584:	60b9      	str	r1, [r7, #8]
 8103586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103588:	2300      	movs	r3, #0
 810358a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 810358e:	68fb      	ldr	r3, [r7, #12]
 8103590:	681b      	ldr	r3, [r3, #0]
 8103592:	699b      	ldr	r3, [r3, #24]
 8103594:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8103596:	2300      	movs	r3, #0
 8103598:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 810359e:	69bb      	ldr	r3, [r7, #24]
 81035a0:	f003 0310 	and.w	r3, r3, #16
 81035a4:	2b00      	cmp	r3, #0
 81035a6:	d068      	beq.n	810367a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81035a8:	68fb      	ldr	r3, [r7, #12]
 81035aa:	681b      	ldr	r3, [r3, #0]
 81035ac:	2210      	movs	r2, #16
 81035ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81035b0:	e049      	b.n	8103646 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81035b2:	68bb      	ldr	r3, [r7, #8]
 81035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81035b8:	d045      	beq.n	8103646 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81035ba:	f7fe ffaf 	bl	810251c <HAL_GetTick>
 81035be:	4602      	mov	r2, r0
 81035c0:	69fb      	ldr	r3, [r7, #28]
 81035c2:	1ad3      	subs	r3, r2, r3
 81035c4:	68ba      	ldr	r2, [r7, #8]
 81035c6:	429a      	cmp	r2, r3
 81035c8:	d302      	bcc.n	81035d0 <I2C_IsErrorOccurred+0x54>
 81035ca:	68bb      	ldr	r3, [r7, #8]
 81035cc:	2b00      	cmp	r3, #0
 81035ce:	d13a      	bne.n	8103646 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 81035d0:	68fb      	ldr	r3, [r7, #12]
 81035d2:	681b      	ldr	r3, [r3, #0]
 81035d4:	685b      	ldr	r3, [r3, #4]
 81035d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81035da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 81035dc:	68fb      	ldr	r3, [r7, #12]
 81035de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81035e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81035e4:	68fb      	ldr	r3, [r7, #12]
 81035e6:	681b      	ldr	r3, [r3, #0]
 81035e8:	699b      	ldr	r3, [r3, #24]
 81035ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81035ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81035f2:	d121      	bne.n	8103638 <I2C_IsErrorOccurred+0xbc>
 81035f4:	697b      	ldr	r3, [r7, #20]
 81035f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81035fa:	d01d      	beq.n	8103638 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 81035fc:	7cfb      	ldrb	r3, [r7, #19]
 81035fe:	2b20      	cmp	r3, #32
 8103600:	d01a      	beq.n	8103638 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8103602:	68fb      	ldr	r3, [r7, #12]
 8103604:	681b      	ldr	r3, [r3, #0]
 8103606:	685a      	ldr	r2, [r3, #4]
 8103608:	68fb      	ldr	r3, [r7, #12]
 810360a:	681b      	ldr	r3, [r3, #0]
 810360c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8103610:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8103612:	f7fe ff83 	bl	810251c <HAL_GetTick>
 8103616:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103618:	e00e      	b.n	8103638 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810361a:	f7fe ff7f 	bl	810251c <HAL_GetTick>
 810361e:	4602      	mov	r2, r0
 8103620:	69fb      	ldr	r3, [r7, #28]
 8103622:	1ad3      	subs	r3, r2, r3
 8103624:	2b19      	cmp	r3, #25
 8103626:	d907      	bls.n	8103638 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8103628:	6a3b      	ldr	r3, [r7, #32]
 810362a:	f043 0320 	orr.w	r3, r3, #32
 810362e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8103630:	2301      	movs	r3, #1
 8103632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8103636:	e006      	b.n	8103646 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103638:	68fb      	ldr	r3, [r7, #12]
 810363a:	681b      	ldr	r3, [r3, #0]
 810363c:	699b      	ldr	r3, [r3, #24]
 810363e:	f003 0320 	and.w	r3, r3, #32
 8103642:	2b20      	cmp	r3, #32
 8103644:	d1e9      	bne.n	810361a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8103646:	68fb      	ldr	r3, [r7, #12]
 8103648:	681b      	ldr	r3, [r3, #0]
 810364a:	699b      	ldr	r3, [r3, #24]
 810364c:	f003 0320 	and.w	r3, r3, #32
 8103650:	2b20      	cmp	r3, #32
 8103652:	d003      	beq.n	810365c <I2C_IsErrorOccurred+0xe0>
 8103654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103658:	2b00      	cmp	r3, #0
 810365a:	d0aa      	beq.n	81035b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 810365c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103660:	2b00      	cmp	r3, #0
 8103662:	d103      	bne.n	810366c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103664:	68fb      	ldr	r3, [r7, #12]
 8103666:	681b      	ldr	r3, [r3, #0]
 8103668:	2220      	movs	r2, #32
 810366a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 810366c:	6a3b      	ldr	r3, [r7, #32]
 810366e:	f043 0304 	orr.w	r3, r3, #4
 8103672:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8103674:	2301      	movs	r3, #1
 8103676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 810367a:	68fb      	ldr	r3, [r7, #12]
 810367c:	681b      	ldr	r3, [r3, #0]
 810367e:	699b      	ldr	r3, [r3, #24]
 8103680:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8103682:	69bb      	ldr	r3, [r7, #24]
 8103684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103688:	2b00      	cmp	r3, #0
 810368a:	d00b      	beq.n	81036a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 810368c:	6a3b      	ldr	r3, [r7, #32]
 810368e:	f043 0301 	orr.w	r3, r3, #1
 8103692:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8103694:	68fb      	ldr	r3, [r7, #12]
 8103696:	681b      	ldr	r3, [r3, #0]
 8103698:	f44f 7280 	mov.w	r2, #256	; 0x100
 810369c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810369e:	2301      	movs	r3, #1
 81036a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 81036a4:	69bb      	ldr	r3, [r7, #24]
 81036a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81036aa:	2b00      	cmp	r3, #0
 81036ac:	d00b      	beq.n	81036c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 81036ae:	6a3b      	ldr	r3, [r7, #32]
 81036b0:	f043 0308 	orr.w	r3, r3, #8
 81036b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 81036b6:	68fb      	ldr	r3, [r7, #12]
 81036b8:	681b      	ldr	r3, [r3, #0]
 81036ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81036be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81036c0:	2301      	movs	r3, #1
 81036c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 81036c6:	69bb      	ldr	r3, [r7, #24]
 81036c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81036cc:	2b00      	cmp	r3, #0
 81036ce:	d00b      	beq.n	81036e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 81036d0:	6a3b      	ldr	r3, [r7, #32]
 81036d2:	f043 0302 	orr.w	r3, r3, #2
 81036d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81036d8:	68fb      	ldr	r3, [r7, #12]
 81036da:	681b      	ldr	r3, [r3, #0]
 81036dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 81036e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81036e2:	2301      	movs	r3, #1
 81036e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 81036e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81036ec:	2b00      	cmp	r3, #0
 81036ee:	d01c      	beq.n	810372a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81036f0:	68f8      	ldr	r0, [r7, #12]
 81036f2:	f7ff fdc4 	bl	810327e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81036f6:	68fb      	ldr	r3, [r7, #12]
 81036f8:	681b      	ldr	r3, [r3, #0]
 81036fa:	6859      	ldr	r1, [r3, #4]
 81036fc:	68fb      	ldr	r3, [r7, #12]
 81036fe:	681a      	ldr	r2, [r3, #0]
 8103700:	4b0d      	ldr	r3, [pc, #52]	; (8103738 <I2C_IsErrorOccurred+0x1bc>)
 8103702:	400b      	ands	r3, r1
 8103704:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8103706:	68fb      	ldr	r3, [r7, #12]
 8103708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810370a:	6a3b      	ldr	r3, [r7, #32]
 810370c:	431a      	orrs	r2, r3
 810370e:	68fb      	ldr	r3, [r7, #12]
 8103710:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8103712:	68fb      	ldr	r3, [r7, #12]
 8103714:	2220      	movs	r2, #32
 8103716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810371a:	68fb      	ldr	r3, [r7, #12]
 810371c:	2200      	movs	r2, #0
 810371e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103722:	68fb      	ldr	r3, [r7, #12]
 8103724:	2200      	movs	r2, #0
 8103726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 810372a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 810372e:	4618      	mov	r0, r3
 8103730:	3728      	adds	r7, #40	; 0x28
 8103732:	46bd      	mov	sp, r7
 8103734:	bd80      	pop	{r7, pc}
 8103736:	bf00      	nop
 8103738:	fe00e800 	.word	0xfe00e800

0810373c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 810373c:	b480      	push	{r7}
 810373e:	b087      	sub	sp, #28
 8103740:	af00      	add	r7, sp, #0
 8103742:	60f8      	str	r0, [r7, #12]
 8103744:	607b      	str	r3, [r7, #4]
 8103746:	460b      	mov	r3, r1
 8103748:	817b      	strh	r3, [r7, #10]
 810374a:	4613      	mov	r3, r2
 810374c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810374e:	897b      	ldrh	r3, [r7, #10]
 8103750:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8103754:	7a7b      	ldrb	r3, [r7, #9]
 8103756:	041b      	lsls	r3, r3, #16
 8103758:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810375c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810375e:	687b      	ldr	r3, [r7, #4]
 8103760:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103762:	6a3b      	ldr	r3, [r7, #32]
 8103764:	4313      	orrs	r3, r2
 8103766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810376a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 810376c:	68fb      	ldr	r3, [r7, #12]
 810376e:	681b      	ldr	r3, [r3, #0]
 8103770:	685a      	ldr	r2, [r3, #4]
 8103772:	6a3b      	ldr	r3, [r7, #32]
 8103774:	0d5b      	lsrs	r3, r3, #21
 8103776:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 810377a:	4b08      	ldr	r3, [pc, #32]	; (810379c <I2C_TransferConfig+0x60>)
 810377c:	430b      	orrs	r3, r1
 810377e:	43db      	mvns	r3, r3
 8103780:	ea02 0103 	and.w	r1, r2, r3
 8103784:	68fb      	ldr	r3, [r7, #12]
 8103786:	681b      	ldr	r3, [r3, #0]
 8103788:	697a      	ldr	r2, [r7, #20]
 810378a:	430a      	orrs	r2, r1
 810378c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 810378e:	bf00      	nop
 8103790:	371c      	adds	r7, #28
 8103792:	46bd      	mov	sp, r7
 8103794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103798:	4770      	bx	lr
 810379a:	bf00      	nop
 810379c:	03ff63ff 	.word	0x03ff63ff

081037a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81037a0:	b480      	push	{r7}
 81037a2:	b083      	sub	sp, #12
 81037a4:	af00      	add	r7, sp, #0
 81037a6:	6078      	str	r0, [r7, #4]
 81037a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81037b0:	b2db      	uxtb	r3, r3
 81037b2:	2b20      	cmp	r3, #32
 81037b4:	d138      	bne.n	8103828 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81037bc:	2b01      	cmp	r3, #1
 81037be:	d101      	bne.n	81037c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81037c0:	2302      	movs	r3, #2
 81037c2:	e032      	b.n	810382a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	2201      	movs	r2, #1
 81037c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	2224      	movs	r2, #36	; 0x24
 81037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81037d4:	687b      	ldr	r3, [r7, #4]
 81037d6:	681b      	ldr	r3, [r3, #0]
 81037d8:	681a      	ldr	r2, [r3, #0]
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	681b      	ldr	r3, [r3, #0]
 81037de:	f022 0201 	bic.w	r2, r2, #1
 81037e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	681b      	ldr	r3, [r3, #0]
 81037e8:	681a      	ldr	r2, [r3, #0]
 81037ea:	687b      	ldr	r3, [r7, #4]
 81037ec:	681b      	ldr	r3, [r3, #0]
 81037ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81037f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	6819      	ldr	r1, [r3, #0]
 81037fa:	687b      	ldr	r3, [r7, #4]
 81037fc:	681b      	ldr	r3, [r3, #0]
 81037fe:	683a      	ldr	r2, [r7, #0]
 8103800:	430a      	orrs	r2, r1
 8103802:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	681b      	ldr	r3, [r3, #0]
 8103808:	681a      	ldr	r2, [r3, #0]
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	681b      	ldr	r3, [r3, #0]
 810380e:	f042 0201 	orr.w	r2, r2, #1
 8103812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103814:	687b      	ldr	r3, [r7, #4]
 8103816:	2220      	movs	r2, #32
 8103818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	2200      	movs	r2, #0
 8103820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103824:	2300      	movs	r3, #0
 8103826:	e000      	b.n	810382a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8103828:	2302      	movs	r3, #2
  }
}
 810382a:	4618      	mov	r0, r3
 810382c:	370c      	adds	r7, #12
 810382e:	46bd      	mov	sp, r7
 8103830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103834:	4770      	bx	lr

08103836 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8103836:	b480      	push	{r7}
 8103838:	b085      	sub	sp, #20
 810383a:	af00      	add	r7, sp, #0
 810383c:	6078      	str	r0, [r7, #4]
 810383e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103840:	687b      	ldr	r3, [r7, #4]
 8103842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103846:	b2db      	uxtb	r3, r3
 8103848:	2b20      	cmp	r3, #32
 810384a:	d139      	bne.n	81038c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810384c:	687b      	ldr	r3, [r7, #4]
 810384e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103852:	2b01      	cmp	r3, #1
 8103854:	d101      	bne.n	810385a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8103856:	2302      	movs	r3, #2
 8103858:	e033      	b.n	81038c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	2201      	movs	r2, #1
 810385e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	2224      	movs	r2, #36	; 0x24
 8103866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	681b      	ldr	r3, [r3, #0]
 810386e:	681a      	ldr	r2, [r3, #0]
 8103870:	687b      	ldr	r3, [r7, #4]
 8103872:	681b      	ldr	r3, [r3, #0]
 8103874:	f022 0201 	bic.w	r2, r2, #1
 8103878:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	681b      	ldr	r3, [r3, #0]
 810387e:	681b      	ldr	r3, [r3, #0]
 8103880:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8103882:	68fb      	ldr	r3, [r7, #12]
 8103884:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103888:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810388a:	683b      	ldr	r3, [r7, #0]
 810388c:	021b      	lsls	r3, r3, #8
 810388e:	68fa      	ldr	r2, [r7, #12]
 8103890:	4313      	orrs	r3, r2
 8103892:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8103894:	687b      	ldr	r3, [r7, #4]
 8103896:	681b      	ldr	r3, [r3, #0]
 8103898:	68fa      	ldr	r2, [r7, #12]
 810389a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810389c:	687b      	ldr	r3, [r7, #4]
 810389e:	681b      	ldr	r3, [r3, #0]
 81038a0:	681a      	ldr	r2, [r3, #0]
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	681b      	ldr	r3, [r3, #0]
 81038a6:	f042 0201 	orr.w	r2, r2, #1
 81038aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	2220      	movs	r2, #32
 81038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81038b4:	687b      	ldr	r3, [r7, #4]
 81038b6:	2200      	movs	r2, #0
 81038b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81038bc:	2300      	movs	r3, #0
 81038be:	e000      	b.n	81038c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81038c0:	2302      	movs	r3, #2
  }
}
 81038c2:	4618      	mov	r0, r3
 81038c4:	3714      	adds	r7, #20
 81038c6:	46bd      	mov	sp, r7
 81038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038cc:	4770      	bx	lr
	...

081038d0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81038d0:	b580      	push	{r7, lr}
 81038d2:	b084      	sub	sp, #16
 81038d4:	af00      	add	r7, sp, #0
 81038d6:	60f8      	str	r0, [r7, #12]
 81038d8:	460b      	mov	r3, r1
 81038da:	607a      	str	r2, [r7, #4]
 81038dc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81038de:	4b37      	ldr	r3, [pc, #220]	; (81039bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81038e0:	681b      	ldr	r3, [r3, #0]
 81038e2:	f023 0201 	bic.w	r2, r3, #1
 81038e6:	4935      	ldr	r1, [pc, #212]	; (81039bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81038e8:	68fb      	ldr	r3, [r7, #12]
 81038ea:	4313      	orrs	r3, r2
 81038ec:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81038ee:	687b      	ldr	r3, [r7, #4]
 81038f0:	2b00      	cmp	r3, #0
 81038f2:	d123      	bne.n	810393c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81038f4:	f7fe ff52 	bl	810279c <HAL_GetCurrentCPUID>
 81038f8:	4603      	mov	r3, r0
 81038fa:	2b03      	cmp	r3, #3
 81038fc:	d158      	bne.n	81039b0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81038fe:	4b2f      	ldr	r3, [pc, #188]	; (81039bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103900:	691b      	ldr	r3, [r3, #16]
 8103902:	4a2e      	ldr	r2, [pc, #184]	; (81039bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103904:	f023 0301 	bic.w	r3, r3, #1
 8103908:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810390a:	4b2d      	ldr	r3, [pc, #180]	; (81039c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810390c:	691b      	ldr	r3, [r3, #16]
 810390e:	4a2c      	ldr	r2, [pc, #176]	; (81039c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103910:	f043 0304 	orr.w	r3, r3, #4
 8103914:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103916:	f3bf 8f4f 	dsb	sy
}
 810391a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810391c:	f3bf 8f6f 	isb	sy
}
 8103920:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103922:	7afb      	ldrb	r3, [r7, #11]
 8103924:	2b01      	cmp	r3, #1
 8103926:	d101      	bne.n	810392c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103928:	bf30      	wfi
 810392a:	e000      	b.n	810392e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810392c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810392e:	4b24      	ldr	r3, [pc, #144]	; (81039c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103930:	691b      	ldr	r3, [r3, #16]
 8103932:	4a23      	ldr	r2, [pc, #140]	; (81039c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103934:	f023 0304 	bic.w	r3, r3, #4
 8103938:	6113      	str	r3, [r2, #16]
 810393a:	e03c      	b.n	81039b6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810393c:	687b      	ldr	r3, [r7, #4]
 810393e:	2b01      	cmp	r3, #1
 8103940:	d123      	bne.n	810398a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103942:	f7fe ff2b 	bl	810279c <HAL_GetCurrentCPUID>
 8103946:	4603      	mov	r3, r0
 8103948:	2b01      	cmp	r3, #1
 810394a:	d133      	bne.n	81039b4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810394c:	4b1b      	ldr	r3, [pc, #108]	; (81039bc <HAL_PWREx_EnterSTOPMode+0xec>)
 810394e:	695b      	ldr	r3, [r3, #20]
 8103950:	4a1a      	ldr	r2, [pc, #104]	; (81039bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103952:	f023 0302 	bic.w	r3, r3, #2
 8103956:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103958:	4b19      	ldr	r3, [pc, #100]	; (81039c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810395a:	691b      	ldr	r3, [r3, #16]
 810395c:	4a18      	ldr	r2, [pc, #96]	; (81039c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810395e:	f043 0304 	orr.w	r3, r3, #4
 8103962:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103964:	f3bf 8f4f 	dsb	sy
}
 8103968:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810396a:	f3bf 8f6f 	isb	sy
}
 810396e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103970:	7afb      	ldrb	r3, [r7, #11]
 8103972:	2b01      	cmp	r3, #1
 8103974:	d101      	bne.n	810397a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103976:	bf30      	wfi
 8103978:	e000      	b.n	810397c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810397a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810397c:	4b10      	ldr	r3, [pc, #64]	; (81039c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810397e:	691b      	ldr	r3, [r3, #16]
 8103980:	4a0f      	ldr	r2, [pc, #60]	; (81039c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103982:	f023 0304 	bic.w	r3, r3, #4
 8103986:	6113      	str	r3, [r2, #16]
 8103988:	e015      	b.n	81039b6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810398a:	f7fe ff07 	bl	810279c <HAL_GetCurrentCPUID>
 810398e:	4603      	mov	r3, r0
 8103990:	2b03      	cmp	r3, #3
 8103992:	d106      	bne.n	81039a2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103994:	4b09      	ldr	r3, [pc, #36]	; (81039bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103996:	691b      	ldr	r3, [r3, #16]
 8103998:	4a08      	ldr	r2, [pc, #32]	; (81039bc <HAL_PWREx_EnterSTOPMode+0xec>)
 810399a:	f023 0304 	bic.w	r3, r3, #4
 810399e:	6113      	str	r3, [r2, #16]
 81039a0:	e009      	b.n	81039b6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81039a2:	4b06      	ldr	r3, [pc, #24]	; (81039bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81039a4:	695b      	ldr	r3, [r3, #20]
 81039a6:	4a05      	ldr	r2, [pc, #20]	; (81039bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81039a8:	f023 0304 	bic.w	r3, r3, #4
 81039ac:	6153      	str	r3, [r2, #20]
 81039ae:	e002      	b.n	81039b6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81039b0:	bf00      	nop
 81039b2:	e000      	b.n	81039b6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81039b4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81039b6:	3710      	adds	r7, #16
 81039b8:	46bd      	mov	sp, r7
 81039ba:	bd80      	pop	{r7, pc}
 81039bc:	58024800 	.word	0x58024800
 81039c0:	e000ed00 	.word	0xe000ed00

081039c4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81039c4:	b580      	push	{r7, lr}
 81039c6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81039c8:	f7fe fee8 	bl	810279c <HAL_GetCurrentCPUID>
 81039cc:	4603      	mov	r3, r0
 81039ce:	2b03      	cmp	r3, #3
 81039d0:	d101      	bne.n	81039d6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81039d2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81039d4:	e001      	b.n	81039da <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81039d6:	bf40      	sev
    __WFE ();
 81039d8:	bf20      	wfe
}
 81039da:	bf00      	nop
 81039dc:	bd80      	pop	{r7, pc}
	...

081039e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81039e0:	b480      	push	{r7}
 81039e2:	b089      	sub	sp, #36	; 0x24
 81039e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81039e6:	4bb3      	ldr	r3, [pc, #716]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81039e8:	691b      	ldr	r3, [r3, #16]
 81039ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81039ee:	2b18      	cmp	r3, #24
 81039f0:	f200 8155 	bhi.w	8103c9e <HAL_RCC_GetSysClockFreq+0x2be>
 81039f4:	a201      	add	r2, pc, #4	; (adr r2, 81039fc <HAL_RCC_GetSysClockFreq+0x1c>)
 81039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81039fa:	bf00      	nop
 81039fc:	08103a61 	.word	0x08103a61
 8103a00:	08103c9f 	.word	0x08103c9f
 8103a04:	08103c9f 	.word	0x08103c9f
 8103a08:	08103c9f 	.word	0x08103c9f
 8103a0c:	08103c9f 	.word	0x08103c9f
 8103a10:	08103c9f 	.word	0x08103c9f
 8103a14:	08103c9f 	.word	0x08103c9f
 8103a18:	08103c9f 	.word	0x08103c9f
 8103a1c:	08103a87 	.word	0x08103a87
 8103a20:	08103c9f 	.word	0x08103c9f
 8103a24:	08103c9f 	.word	0x08103c9f
 8103a28:	08103c9f 	.word	0x08103c9f
 8103a2c:	08103c9f 	.word	0x08103c9f
 8103a30:	08103c9f 	.word	0x08103c9f
 8103a34:	08103c9f 	.word	0x08103c9f
 8103a38:	08103c9f 	.word	0x08103c9f
 8103a3c:	08103a8d 	.word	0x08103a8d
 8103a40:	08103c9f 	.word	0x08103c9f
 8103a44:	08103c9f 	.word	0x08103c9f
 8103a48:	08103c9f 	.word	0x08103c9f
 8103a4c:	08103c9f 	.word	0x08103c9f
 8103a50:	08103c9f 	.word	0x08103c9f
 8103a54:	08103c9f 	.word	0x08103c9f
 8103a58:	08103c9f 	.word	0x08103c9f
 8103a5c:	08103a93 	.word	0x08103a93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103a60:	4b94      	ldr	r3, [pc, #592]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a62:	681b      	ldr	r3, [r3, #0]
 8103a64:	f003 0320 	and.w	r3, r3, #32
 8103a68:	2b00      	cmp	r3, #0
 8103a6a:	d009      	beq.n	8103a80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103a6c:	4b91      	ldr	r3, [pc, #580]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a6e:	681b      	ldr	r3, [r3, #0]
 8103a70:	08db      	lsrs	r3, r3, #3
 8103a72:	f003 0303 	and.w	r3, r3, #3
 8103a76:	4a90      	ldr	r2, [pc, #576]	; (8103cb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103a78:	fa22 f303 	lsr.w	r3, r2, r3
 8103a7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8103a7e:	e111      	b.n	8103ca4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103a80:	4b8d      	ldr	r3, [pc, #564]	; (8103cb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103a82:	61bb      	str	r3, [r7, #24]
      break;
 8103a84:	e10e      	b.n	8103ca4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8103a86:	4b8d      	ldr	r3, [pc, #564]	; (8103cbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103a88:	61bb      	str	r3, [r7, #24]
      break;
 8103a8a:	e10b      	b.n	8103ca4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8103a8c:	4b8c      	ldr	r3, [pc, #560]	; (8103cc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103a8e:	61bb      	str	r3, [r7, #24]
      break;
 8103a90:	e108      	b.n	8103ca4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103a92:	4b88      	ldr	r3, [pc, #544]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a96:	f003 0303 	and.w	r3, r3, #3
 8103a9a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8103a9c:	4b85      	ldr	r3, [pc, #532]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103aa0:	091b      	lsrs	r3, r3, #4
 8103aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103aa6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103aa8:	4b82      	ldr	r3, [pc, #520]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103aac:	f003 0301 	and.w	r3, r3, #1
 8103ab0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8103ab2:	4b80      	ldr	r3, [pc, #512]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103ab6:	08db      	lsrs	r3, r3, #3
 8103ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103abc:	68fa      	ldr	r2, [r7, #12]
 8103abe:	fb02 f303 	mul.w	r3, r2, r3
 8103ac2:	ee07 3a90 	vmov	s15, r3
 8103ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103aca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8103ace:	693b      	ldr	r3, [r7, #16]
 8103ad0:	2b00      	cmp	r3, #0
 8103ad2:	f000 80e1 	beq.w	8103c98 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103ad6:	697b      	ldr	r3, [r7, #20]
 8103ad8:	2b02      	cmp	r3, #2
 8103ada:	f000 8083 	beq.w	8103be4 <HAL_RCC_GetSysClockFreq+0x204>
 8103ade:	697b      	ldr	r3, [r7, #20]
 8103ae0:	2b02      	cmp	r3, #2
 8103ae2:	f200 80a1 	bhi.w	8103c28 <HAL_RCC_GetSysClockFreq+0x248>
 8103ae6:	697b      	ldr	r3, [r7, #20]
 8103ae8:	2b00      	cmp	r3, #0
 8103aea:	d003      	beq.n	8103af4 <HAL_RCC_GetSysClockFreq+0x114>
 8103aec:	697b      	ldr	r3, [r7, #20]
 8103aee:	2b01      	cmp	r3, #1
 8103af0:	d056      	beq.n	8103ba0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103af2:	e099      	b.n	8103c28 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103af4:	4b6f      	ldr	r3, [pc, #444]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	f003 0320 	and.w	r3, r3, #32
 8103afc:	2b00      	cmp	r3, #0
 8103afe:	d02d      	beq.n	8103b5c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103b00:	4b6c      	ldr	r3, [pc, #432]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103b02:	681b      	ldr	r3, [r3, #0]
 8103b04:	08db      	lsrs	r3, r3, #3
 8103b06:	f003 0303 	and.w	r3, r3, #3
 8103b0a:	4a6b      	ldr	r2, [pc, #428]	; (8103cb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8103b10:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103b12:	687b      	ldr	r3, [r7, #4]
 8103b14:	ee07 3a90 	vmov	s15, r3
 8103b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103b1c:	693b      	ldr	r3, [r7, #16]
 8103b1e:	ee07 3a90 	vmov	s15, r3
 8103b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103b2a:	4b62      	ldr	r3, [pc, #392]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103b32:	ee07 3a90 	vmov	s15, r3
 8103b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8103b3e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103b56:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8103b5a:	e087      	b.n	8103c6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103b5c:	693b      	ldr	r3, [r7, #16]
 8103b5e:	ee07 3a90 	vmov	s15, r3
 8103b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103b66:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103cc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103b6e:	4b51      	ldr	r3, [pc, #324]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103b76:	ee07 3a90 	vmov	s15, r3
 8103b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103b82:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103b9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103b9e:	e065      	b.n	8103c6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103ba0:	693b      	ldr	r3, [r7, #16]
 8103ba2:	ee07 3a90 	vmov	s15, r3
 8103ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103baa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103ccc <HAL_RCC_GetSysClockFreq+0x2ec>
 8103bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103bb2:	4b40      	ldr	r3, [pc, #256]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103bba:	ee07 3a90 	vmov	s15, r3
 8103bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8103bc6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103bde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103be2:	e043      	b.n	8103c6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103be4:	693b      	ldr	r3, [r7, #16]
 8103be6:	ee07 3a90 	vmov	s15, r3
 8103bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103bee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103cd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103bf6:	4b2f      	ldr	r3, [pc, #188]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103bfe:	ee07 3a90 	vmov	s15, r3
 8103c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8103c0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103c26:	e021      	b.n	8103c6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103c28:	693b      	ldr	r3, [r7, #16]
 8103c2a:	ee07 3a90 	vmov	s15, r3
 8103c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103ccc <HAL_RCC_GetSysClockFreq+0x2ec>
 8103c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c3a:	4b1e      	ldr	r3, [pc, #120]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c42:	ee07 3a90 	vmov	s15, r3
 8103c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8103c4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103cc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103c6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8103c6c:	4b11      	ldr	r3, [pc, #68]	; (8103cb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103c70:	0a5b      	lsrs	r3, r3, #9
 8103c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103c76:	3301      	adds	r3, #1
 8103c78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8103c7a:	683b      	ldr	r3, [r7, #0]
 8103c7c:	ee07 3a90 	vmov	s15, r3
 8103c80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103c84:	edd7 6a07 	vldr	s13, [r7, #28]
 8103c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103c90:	ee17 3a90 	vmov	r3, s15
 8103c94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8103c96:	e005      	b.n	8103ca4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8103c98:	2300      	movs	r3, #0
 8103c9a:	61bb      	str	r3, [r7, #24]
      break;
 8103c9c:	e002      	b.n	8103ca4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8103c9e:	4b07      	ldr	r3, [pc, #28]	; (8103cbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103ca0:	61bb      	str	r3, [r7, #24]
      break;
 8103ca2:	bf00      	nop
  }

  return sysclockfreq;
 8103ca4:	69bb      	ldr	r3, [r7, #24]
}
 8103ca6:	4618      	mov	r0, r3
 8103ca8:	3724      	adds	r7, #36	; 0x24
 8103caa:	46bd      	mov	sp, r7
 8103cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cb0:	4770      	bx	lr
 8103cb2:	bf00      	nop
 8103cb4:	58024400 	.word	0x58024400
 8103cb8:	03d09000 	.word	0x03d09000
 8103cbc:	003d0900 	.word	0x003d0900
 8103cc0:	007a1200 	.word	0x007a1200
 8103cc4:	46000000 	.word	0x46000000
 8103cc8:	4c742400 	.word	0x4c742400
 8103ccc:	4a742400 	.word	0x4a742400
 8103cd0:	4af42400 	.word	0x4af42400

08103cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103cd4:	b580      	push	{r7, lr}
 8103cd6:	b082      	sub	sp, #8
 8103cd8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103cda:	f7ff fe81 	bl	81039e0 <HAL_RCC_GetSysClockFreq>
 8103cde:	4602      	mov	r2, r0
 8103ce0:	4b11      	ldr	r3, [pc, #68]	; (8103d28 <HAL_RCC_GetHCLKFreq+0x54>)
 8103ce2:	699b      	ldr	r3, [r3, #24]
 8103ce4:	0a1b      	lsrs	r3, r3, #8
 8103ce6:	f003 030f 	and.w	r3, r3, #15
 8103cea:	4910      	ldr	r1, [pc, #64]	; (8103d2c <HAL_RCC_GetHCLKFreq+0x58>)
 8103cec:	5ccb      	ldrb	r3, [r1, r3]
 8103cee:	f003 031f 	and.w	r3, r3, #31
 8103cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8103cf6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103cf8:	4b0b      	ldr	r3, [pc, #44]	; (8103d28 <HAL_RCC_GetHCLKFreq+0x54>)
 8103cfa:	699b      	ldr	r3, [r3, #24]
 8103cfc:	f003 030f 	and.w	r3, r3, #15
 8103d00:	4a0a      	ldr	r2, [pc, #40]	; (8103d2c <HAL_RCC_GetHCLKFreq+0x58>)
 8103d02:	5cd3      	ldrb	r3, [r2, r3]
 8103d04:	f003 031f 	and.w	r3, r3, #31
 8103d08:	687a      	ldr	r2, [r7, #4]
 8103d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8103d0e:	4a08      	ldr	r2, [pc, #32]	; (8103d30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103d10:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103d12:	4b07      	ldr	r3, [pc, #28]	; (8103d30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103d14:	681b      	ldr	r3, [r3, #0]
 8103d16:	4a07      	ldr	r2, [pc, #28]	; (8103d34 <HAL_RCC_GetHCLKFreq+0x60>)
 8103d18:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103d1a:	4b05      	ldr	r3, [pc, #20]	; (8103d30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103d1c:	681b      	ldr	r3, [r3, #0]
}
 8103d1e:	4618      	mov	r0, r3
 8103d20:	3708      	adds	r7, #8
 8103d22:	46bd      	mov	sp, r7
 8103d24:	bd80      	pop	{r7, pc}
 8103d26:	bf00      	nop
 8103d28:	58024400 	.word	0x58024400
 8103d2c:	0810cf48 	.word	0x0810cf48
 8103d30:	10000004 	.word	0x10000004
 8103d34:	10000000 	.word	0x10000000

08103d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103d38:	b580      	push	{r7, lr}
 8103d3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103d3c:	f7ff ffca 	bl	8103cd4 <HAL_RCC_GetHCLKFreq>
 8103d40:	4602      	mov	r2, r0
 8103d42:	4b06      	ldr	r3, [pc, #24]	; (8103d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8103d44:	69db      	ldr	r3, [r3, #28]
 8103d46:	091b      	lsrs	r3, r3, #4
 8103d48:	f003 0307 	and.w	r3, r3, #7
 8103d4c:	4904      	ldr	r1, [pc, #16]	; (8103d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103d4e:	5ccb      	ldrb	r3, [r1, r3]
 8103d50:	f003 031f 	and.w	r3, r3, #31
 8103d54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103d58:	4618      	mov	r0, r3
 8103d5a:	bd80      	pop	{r7, pc}
 8103d5c:	58024400 	.word	0x58024400
 8103d60:	0810cf48 	.word	0x0810cf48

08103d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8103d64:	b580      	push	{r7, lr}
 8103d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8103d68:	f7ff ffb4 	bl	8103cd4 <HAL_RCC_GetHCLKFreq>
 8103d6c:	4602      	mov	r2, r0
 8103d6e:	4b06      	ldr	r3, [pc, #24]	; (8103d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8103d70:	69db      	ldr	r3, [r3, #28]
 8103d72:	0a1b      	lsrs	r3, r3, #8
 8103d74:	f003 0307 	and.w	r3, r3, #7
 8103d78:	4904      	ldr	r1, [pc, #16]	; (8103d8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8103d7a:	5ccb      	ldrb	r3, [r1, r3]
 8103d7c:	f003 031f 	and.w	r3, r3, #31
 8103d80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8103d84:	4618      	mov	r0, r3
 8103d86:	bd80      	pop	{r7, pc}
 8103d88:	58024400 	.word	0x58024400
 8103d8c:	0810cf48 	.word	0x0810cf48

08103d90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103d94:	b0ca      	sub	sp, #296	; 0x128
 8103d96:	af00      	add	r7, sp, #0
 8103d98:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103d9c:	2300      	movs	r3, #0
 8103d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103da2:	2300      	movs	r3, #0
 8103da4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103db0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8103db4:	2500      	movs	r5, #0
 8103db6:	ea54 0305 	orrs.w	r3, r4, r5
 8103dba:	d049      	beq.n	8103e50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8103dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103dc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103dc6:	d02f      	beq.n	8103e28 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8103dc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103dcc:	d828      	bhi.n	8103e20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103dce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103dd2:	d01a      	beq.n	8103e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8103dd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103dd8:	d822      	bhi.n	8103e20 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103dda:	2b00      	cmp	r3, #0
 8103ddc:	d003      	beq.n	8103de6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8103dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103de2:	d007      	beq.n	8103df4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103de4:	e01c      	b.n	8103e20 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103de6:	4bb8      	ldr	r3, [pc, #736]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103dea:	4ab7      	ldr	r2, [pc, #732]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103df0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103df2:	e01a      	b.n	8103e2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103df8:	3308      	adds	r3, #8
 8103dfa:	2102      	movs	r1, #2
 8103dfc:	4618      	mov	r0, r3
 8103dfe:	f001 fc8f 	bl	8105720 <RCCEx_PLL2_Config>
 8103e02:	4603      	mov	r3, r0
 8103e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103e08:	e00f      	b.n	8103e2a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e0e:	3328      	adds	r3, #40	; 0x28
 8103e10:	2102      	movs	r1, #2
 8103e12:	4618      	mov	r0, r3
 8103e14:	f001 fd36 	bl	8105884 <RCCEx_PLL3_Config>
 8103e18:	4603      	mov	r3, r0
 8103e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103e1e:	e004      	b.n	8103e2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103e20:	2301      	movs	r3, #1
 8103e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103e26:	e000      	b.n	8103e2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8103e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103e2e:	2b00      	cmp	r3, #0
 8103e30:	d10a      	bne.n	8103e48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103e32:	4ba5      	ldr	r3, [pc, #660]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103e36:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8103e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103e40:	4aa1      	ldr	r2, [pc, #644]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103e42:	430b      	orrs	r3, r1
 8103e44:	6513      	str	r3, [r2, #80]	; 0x50
 8103e46:	e003      	b.n	8103e50 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103e4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e58:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8103e5c:	f04f 0900 	mov.w	r9, #0
 8103e60:	ea58 0309 	orrs.w	r3, r8, r9
 8103e64:	d047      	beq.n	8103ef6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8103e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e6c:	2b04      	cmp	r3, #4
 8103e6e:	d82a      	bhi.n	8103ec6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103e70:	a201      	add	r2, pc, #4	; (adr r2, 8103e78 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8103e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103e76:	bf00      	nop
 8103e78:	08103e8d 	.word	0x08103e8d
 8103e7c:	08103e9b 	.word	0x08103e9b
 8103e80:	08103eb1 	.word	0x08103eb1
 8103e84:	08103ecf 	.word	0x08103ecf
 8103e88:	08103ecf 	.word	0x08103ecf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e8c:	4b8e      	ldr	r3, [pc, #568]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e90:	4a8d      	ldr	r2, [pc, #564]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103e98:	e01a      	b.n	8103ed0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e9e:	3308      	adds	r3, #8
 8103ea0:	2100      	movs	r1, #0
 8103ea2:	4618      	mov	r0, r3
 8103ea4:	f001 fc3c 	bl	8105720 <RCCEx_PLL2_Config>
 8103ea8:	4603      	mov	r3, r0
 8103eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103eae:	e00f      	b.n	8103ed0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103eb4:	3328      	adds	r3, #40	; 0x28
 8103eb6:	2100      	movs	r1, #0
 8103eb8:	4618      	mov	r0, r3
 8103eba:	f001 fce3 	bl	8105884 <RCCEx_PLL3_Config>
 8103ebe:	4603      	mov	r3, r0
 8103ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103ec4:	e004      	b.n	8103ed0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103ec6:	2301      	movs	r3, #1
 8103ec8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103ecc:	e000      	b.n	8103ed0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8103ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103ed4:	2b00      	cmp	r3, #0
 8103ed6:	d10a      	bne.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103ed8:	4b7b      	ldr	r3, [pc, #492]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103edc:	f023 0107 	bic.w	r1, r3, #7
 8103ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103ee6:	4a78      	ldr	r2, [pc, #480]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103ee8:	430b      	orrs	r3, r1
 8103eea:	6513      	str	r3, [r2, #80]	; 0x50
 8103eec:	e003      	b.n	8103ef6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103eee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103ef2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103efe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8103f02:	f04f 0b00 	mov.w	fp, #0
 8103f06:	ea5a 030b 	orrs.w	r3, sl, fp
 8103f0a:	d04c      	beq.n	8103fa6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8103f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103f16:	d030      	beq.n	8103f7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8103f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103f1c:	d829      	bhi.n	8103f72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103f1e:	2bc0      	cmp	r3, #192	; 0xc0
 8103f20:	d02d      	beq.n	8103f7e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8103f22:	2bc0      	cmp	r3, #192	; 0xc0
 8103f24:	d825      	bhi.n	8103f72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103f26:	2b80      	cmp	r3, #128	; 0x80
 8103f28:	d018      	beq.n	8103f5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8103f2a:	2b80      	cmp	r3, #128	; 0x80
 8103f2c:	d821      	bhi.n	8103f72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103f2e:	2b00      	cmp	r3, #0
 8103f30:	d002      	beq.n	8103f38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8103f32:	2b40      	cmp	r3, #64	; 0x40
 8103f34:	d007      	beq.n	8103f46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8103f36:	e01c      	b.n	8103f72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f38:	4b63      	ldr	r3, [pc, #396]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f3c:	4a62      	ldr	r2, [pc, #392]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103f44:	e01c      	b.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103f4a:	3308      	adds	r3, #8
 8103f4c:	2100      	movs	r1, #0
 8103f4e:	4618      	mov	r0, r3
 8103f50:	f001 fbe6 	bl	8105720 <RCCEx_PLL2_Config>
 8103f54:	4603      	mov	r3, r0
 8103f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103f5a:	e011      	b.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103f60:	3328      	adds	r3, #40	; 0x28
 8103f62:	2100      	movs	r1, #0
 8103f64:	4618      	mov	r0, r3
 8103f66:	f001 fc8d 	bl	8105884 <RCCEx_PLL3_Config>
 8103f6a:	4603      	mov	r3, r0
 8103f6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103f70:	e006      	b.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103f72:	2301      	movs	r3, #1
 8103f74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103f78:	e002      	b.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103f7a:	bf00      	nop
 8103f7c:	e000      	b.n	8103f80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103f84:	2b00      	cmp	r3, #0
 8103f86:	d10a      	bne.n	8103f9e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103f88:	4b4f      	ldr	r3, [pc, #316]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103f8c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8103f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f96:	4a4c      	ldr	r2, [pc, #304]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103f98:	430b      	orrs	r3, r1
 8103f9a:	6513      	str	r3, [r2, #80]	; 0x50
 8103f9c:	e003      	b.n	8103fa6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103fa2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fae:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8103fb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8103fb6:	2300      	movs	r3, #0
 8103fb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8103fbc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8103fc0:	460b      	mov	r3, r1
 8103fc2:	4313      	orrs	r3, r2
 8103fc4:	d053      	beq.n	810406e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8103fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103fca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103fce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103fd2:	d035      	beq.n	8104040 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8103fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103fd8:	d82e      	bhi.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103fda:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103fde:	d031      	beq.n	8104044 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8103fe0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103fe4:	d828      	bhi.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103fea:	d01a      	beq.n	8104022 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8103fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103ff0:	d822      	bhi.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103ff2:	2b00      	cmp	r3, #0
 8103ff4:	d003      	beq.n	8103ffe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8103ff6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103ffa:	d007      	beq.n	810400c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8103ffc:	e01c      	b.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ffe:	4b32      	ldr	r3, [pc, #200]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104002:	4a31      	ldr	r2, [pc, #196]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104008:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810400a:	e01c      	b.n	8104046 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104010:	3308      	adds	r3, #8
 8104012:	2100      	movs	r1, #0
 8104014:	4618      	mov	r0, r3
 8104016:	f001 fb83 	bl	8105720 <RCCEx_PLL2_Config>
 810401a:	4603      	mov	r3, r0
 810401c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104020:	e011      	b.n	8104046 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104026:	3328      	adds	r3, #40	; 0x28
 8104028:	2100      	movs	r1, #0
 810402a:	4618      	mov	r0, r3
 810402c:	f001 fc2a 	bl	8105884 <RCCEx_PLL3_Config>
 8104030:	4603      	mov	r3, r0
 8104032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104036:	e006      	b.n	8104046 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104038:	2301      	movs	r3, #1
 810403a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810403e:	e002      	b.n	8104046 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104040:	bf00      	nop
 8104042:	e000      	b.n	8104046 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810404a:	2b00      	cmp	r3, #0
 810404c:	d10b      	bne.n	8104066 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810404e:	4b1e      	ldr	r3, [pc, #120]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104052:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8104056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810405a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810405e:	4a1a      	ldr	r2, [pc, #104]	; (81040c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104060:	430b      	orrs	r3, r1
 8104062:	6593      	str	r3, [r2, #88]	; 0x58
 8104064:	e003      	b.n	810406e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104066:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810406a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104076:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 810407a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 810407e:	2300      	movs	r3, #0
 8104080:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8104084:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8104088:	460b      	mov	r3, r1
 810408a:	4313      	orrs	r3, r2
 810408c:	d056      	beq.n	810413c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104092:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104096:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810409a:	d038      	beq.n	810410e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 810409c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81040a0:	d831      	bhi.n	8104106 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81040a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81040a6:	d034      	beq.n	8104112 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81040a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81040ac:	d82b      	bhi.n	8104106 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81040ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81040b2:	d01d      	beq.n	81040f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81040b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81040b8:	d825      	bhi.n	8104106 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81040ba:	2b00      	cmp	r3, #0
 81040bc:	d006      	beq.n	81040cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81040be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81040c2:	d00a      	beq.n	81040da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81040c4:	e01f      	b.n	8104106 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81040c6:	bf00      	nop
 81040c8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81040cc:	4ba2      	ldr	r3, [pc, #648]	; (8104358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81040d0:	4aa1      	ldr	r2, [pc, #644]	; (8104358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81040d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81040d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81040d8:	e01c      	b.n	8104114 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81040da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81040de:	3308      	adds	r3, #8
 81040e0:	2100      	movs	r1, #0
 81040e2:	4618      	mov	r0, r3
 81040e4:	f001 fb1c 	bl	8105720 <RCCEx_PLL2_Config>
 81040e8:	4603      	mov	r3, r0
 81040ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81040ee:	e011      	b.n	8104114 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81040f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81040f4:	3328      	adds	r3, #40	; 0x28
 81040f6:	2100      	movs	r1, #0
 81040f8:	4618      	mov	r0, r3
 81040fa:	f001 fbc3 	bl	8105884 <RCCEx_PLL3_Config>
 81040fe:	4603      	mov	r3, r0
 8104100:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104104:	e006      	b.n	8104114 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104106:	2301      	movs	r3, #1
 8104108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810410c:	e002      	b.n	8104114 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810410e:	bf00      	nop
 8104110:	e000      	b.n	8104114 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8104112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104118:	2b00      	cmp	r3, #0
 810411a:	d10b      	bne.n	8104134 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810411c:	4b8e      	ldr	r3, [pc, #568]	; (8104358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810411e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104120:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8104124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104128:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810412c:	4a8a      	ldr	r2, [pc, #552]	; (8104358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810412e:	430b      	orrs	r3, r1
 8104130:	6593      	str	r3, [r2, #88]	; 0x58
 8104132:	e003      	b.n	810413c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104134:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104138:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810413c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104144:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8104148:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 810414c:	2300      	movs	r3, #0
 810414e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8104152:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8104156:	460b      	mov	r3, r1
 8104158:	4313      	orrs	r3, r2
 810415a:	d03a      	beq.n	81041d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810415c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104162:	2b30      	cmp	r3, #48	; 0x30
 8104164:	d01f      	beq.n	81041a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8104166:	2b30      	cmp	r3, #48	; 0x30
 8104168:	d819      	bhi.n	810419e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810416a:	2b20      	cmp	r3, #32
 810416c:	d00c      	beq.n	8104188 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810416e:	2b20      	cmp	r3, #32
 8104170:	d815      	bhi.n	810419e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8104172:	2b00      	cmp	r3, #0
 8104174:	d019      	beq.n	81041aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8104176:	2b10      	cmp	r3, #16
 8104178:	d111      	bne.n	810419e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810417a:	4b77      	ldr	r3, [pc, #476]	; (8104358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810417e:	4a76      	ldr	r2, [pc, #472]	; (8104358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104184:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104186:	e011      	b.n	81041ac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810418c:	3308      	adds	r3, #8
 810418e:	2102      	movs	r1, #2
 8104190:	4618      	mov	r0, r3
 8104192:	f001 fac5 	bl	8105720 <RCCEx_PLL2_Config>
 8104196:	4603      	mov	r3, r0
 8104198:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810419c:	e006      	b.n	81041ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810419e:	2301      	movs	r3, #1
 81041a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81041a4:	e002      	b.n	81041ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81041a6:	bf00      	nop
 81041a8:	e000      	b.n	81041ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81041aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81041ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81041b0:	2b00      	cmp	r3, #0
 81041b2:	d10a      	bne.n	81041ca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81041b4:	4b68      	ldr	r3, [pc, #416]	; (8104358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81041b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81041b8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 81041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81041c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81041c2:	4a65      	ldr	r2, [pc, #404]	; (8104358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81041c4:	430b      	orrs	r3, r1
 81041c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 81041c8:	e003      	b.n	81041d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81041ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041da:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 81041de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 81041e2:	2300      	movs	r3, #0
 81041e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 81041e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 81041ec:	460b      	mov	r3, r1
 81041ee:	4313      	orrs	r3, r2
 81041f0:	d051      	beq.n	8104296 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81041f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81041f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81041fc:	d035      	beq.n	810426a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81041fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104202:	d82e      	bhi.n	8104262 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104204:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104208:	d031      	beq.n	810426e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810420a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810420e:	d828      	bhi.n	8104262 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104214:	d01a      	beq.n	810424c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8104216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810421a:	d822      	bhi.n	8104262 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810421c:	2b00      	cmp	r3, #0
 810421e:	d003      	beq.n	8104228 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8104220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104224:	d007      	beq.n	8104236 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8104226:	e01c      	b.n	8104262 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104228:	4b4b      	ldr	r3, [pc, #300]	; (8104358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810422c:	4a4a      	ldr	r2, [pc, #296]	; (8104358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810422e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104232:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104234:	e01c      	b.n	8104270 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810423a:	3308      	adds	r3, #8
 810423c:	2100      	movs	r1, #0
 810423e:	4618      	mov	r0, r3
 8104240:	f001 fa6e 	bl	8105720 <RCCEx_PLL2_Config>
 8104244:	4603      	mov	r3, r0
 8104246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810424a:	e011      	b.n	8104270 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104250:	3328      	adds	r3, #40	; 0x28
 8104252:	2100      	movs	r1, #0
 8104254:	4618      	mov	r0, r3
 8104256:	f001 fb15 	bl	8105884 <RCCEx_PLL3_Config>
 810425a:	4603      	mov	r3, r0
 810425c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104260:	e006      	b.n	8104270 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104262:	2301      	movs	r3, #1
 8104264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104268:	e002      	b.n	8104270 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810426a:	bf00      	nop
 810426c:	e000      	b.n	8104270 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810426e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104270:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104274:	2b00      	cmp	r3, #0
 8104276:	d10a      	bne.n	810428e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8104278:	4b37      	ldr	r3, [pc, #220]	; (8104358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810427c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8104280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104286:	4a34      	ldr	r2, [pc, #208]	; (8104358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104288:	430b      	orrs	r3, r1
 810428a:	6513      	str	r3, [r2, #80]	; 0x50
 810428c:	e003      	b.n	8104296 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810428e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104292:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810429e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 81042a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 81042a6:	2300      	movs	r3, #0
 81042a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 81042ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 81042b0:	460b      	mov	r3, r1
 81042b2:	4313      	orrs	r3, r2
 81042b4:	d056      	beq.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 81042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81042ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81042bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81042c0:	d033      	beq.n	810432a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81042c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81042c6:	d82c      	bhi.n	8104322 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81042c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81042cc:	d02f      	beq.n	810432e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81042ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81042d2:	d826      	bhi.n	8104322 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81042d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81042d8:	d02b      	beq.n	8104332 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81042da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81042de:	d820      	bhi.n	8104322 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81042e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81042e4:	d012      	beq.n	810430c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81042e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81042ea:	d81a      	bhi.n	8104322 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81042ec:	2b00      	cmp	r3, #0
 81042ee:	d022      	beq.n	8104336 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81042f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81042f4:	d115      	bne.n	8104322 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81042f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81042fa:	3308      	adds	r3, #8
 81042fc:	2101      	movs	r1, #1
 81042fe:	4618      	mov	r0, r3
 8104300:	f001 fa0e 	bl	8105720 <RCCEx_PLL2_Config>
 8104304:	4603      	mov	r3, r0
 8104306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810430a:	e015      	b.n	8104338 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810430c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104310:	3328      	adds	r3, #40	; 0x28
 8104312:	2101      	movs	r1, #1
 8104314:	4618      	mov	r0, r3
 8104316:	f001 fab5 	bl	8105884 <RCCEx_PLL3_Config>
 810431a:	4603      	mov	r3, r0
 810431c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104320:	e00a      	b.n	8104338 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104322:	2301      	movs	r3, #1
 8104324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104328:	e006      	b.n	8104338 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810432a:	bf00      	nop
 810432c:	e004      	b.n	8104338 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810432e:	bf00      	nop
 8104330:	e002      	b.n	8104338 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104332:	bf00      	nop
 8104334:	e000      	b.n	8104338 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104338:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810433c:	2b00      	cmp	r3, #0
 810433e:	d10d      	bne.n	810435c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8104340:	4b05      	ldr	r3, [pc, #20]	; (8104358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104344:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8104348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810434c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810434e:	4a02      	ldr	r2, [pc, #8]	; (8104358 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104350:	430b      	orrs	r3, r1
 8104352:	6513      	str	r3, [r2, #80]	; 0x50
 8104354:	e006      	b.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8104356:	bf00      	nop
 8104358:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810435c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104360:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104368:	e9d3 2300 	ldrd	r2, r3, [r3]
 810436c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8104370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8104374:	2300      	movs	r3, #0
 8104376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 810437a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 810437e:	460b      	mov	r3, r1
 8104380:	4313      	orrs	r3, r2
 8104382:	d055      	beq.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8104384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104388:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810438c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104390:	d033      	beq.n	81043fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8104392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104396:	d82c      	bhi.n	81043f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810439c:	d02f      	beq.n	81043fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810439e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81043a2:	d826      	bhi.n	81043f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81043a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81043a8:	d02b      	beq.n	8104402 <HAL_RCCEx_PeriphCLKConfig+0x672>
 81043aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81043ae:	d820      	bhi.n	81043f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81043b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81043b4:	d012      	beq.n	81043dc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81043b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81043ba:	d81a      	bhi.n	81043f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81043bc:	2b00      	cmp	r3, #0
 81043be:	d022      	beq.n	8104406 <HAL_RCCEx_PeriphCLKConfig+0x676>
 81043c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81043c4:	d115      	bne.n	81043f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81043ca:	3308      	adds	r3, #8
 81043cc:	2101      	movs	r1, #1
 81043ce:	4618      	mov	r0, r3
 81043d0:	f001 f9a6 	bl	8105720 <RCCEx_PLL2_Config>
 81043d4:	4603      	mov	r3, r0
 81043d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81043da:	e015      	b.n	8104408 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81043e0:	3328      	adds	r3, #40	; 0x28
 81043e2:	2101      	movs	r1, #1
 81043e4:	4618      	mov	r0, r3
 81043e6:	f001 fa4d 	bl	8105884 <RCCEx_PLL3_Config>
 81043ea:	4603      	mov	r3, r0
 81043ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81043f0:	e00a      	b.n	8104408 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81043f2:	2301      	movs	r3, #1
 81043f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81043f8:	e006      	b.n	8104408 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81043fa:	bf00      	nop
 81043fc:	e004      	b.n	8104408 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81043fe:	bf00      	nop
 8104400:	e002      	b.n	8104408 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104402:	bf00      	nop
 8104404:	e000      	b.n	8104408 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810440c:	2b00      	cmp	r3, #0
 810440e:	d10b      	bne.n	8104428 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8104410:	4ba4      	ldr	r3, [pc, #656]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104414:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8104418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810441c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104420:	4aa0      	ldr	r2, [pc, #640]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104422:	430b      	orrs	r3, r1
 8104424:	6593      	str	r3, [r2, #88]	; 0x58
 8104426:	e003      	b.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810442c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104438:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 810443c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8104440:	2300      	movs	r3, #0
 8104442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8104446:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 810444a:	460b      	mov	r3, r1
 810444c:	4313      	orrs	r3, r2
 810444e:	d037      	beq.n	81044c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8104450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810445a:	d00e      	beq.n	810447a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 810445c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104460:	d816      	bhi.n	8104490 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8104462:	2b00      	cmp	r3, #0
 8104464:	d018      	beq.n	8104498 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8104466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810446a:	d111      	bne.n	8104490 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810446c:	4b8d      	ldr	r3, [pc, #564]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104470:	4a8c      	ldr	r2, [pc, #560]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104476:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104478:	e00f      	b.n	810449a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810447e:	3308      	adds	r3, #8
 8104480:	2101      	movs	r1, #1
 8104482:	4618      	mov	r0, r3
 8104484:	f001 f94c 	bl	8105720 <RCCEx_PLL2_Config>
 8104488:	4603      	mov	r3, r0
 810448a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810448e:	e004      	b.n	810449a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104490:	2301      	movs	r3, #1
 8104492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104496:	e000      	b.n	810449a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8104498:	bf00      	nop
    }

    if (ret == HAL_OK)
 810449a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810449e:	2b00      	cmp	r3, #0
 81044a0:	d10a      	bne.n	81044b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81044a2:	4b80      	ldr	r3, [pc, #512]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81044a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81044a6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 81044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81044b0:	4a7c      	ldr	r2, [pc, #496]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81044b2:	430b      	orrs	r3, r1
 81044b4:	6513      	str	r3, [r2, #80]	; 0x50
 81044b6:	e003      	b.n	81044c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81044bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81044c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044c8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 81044cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 81044d0:	2300      	movs	r3, #0
 81044d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 81044d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 81044da:	460b      	mov	r3, r1
 81044dc:	4313      	orrs	r3, r2
 81044de:	d039      	beq.n	8104554 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81044e6:	2b03      	cmp	r3, #3
 81044e8:	d81c      	bhi.n	8104524 <HAL_RCCEx_PeriphCLKConfig+0x794>
 81044ea:	a201      	add	r2, pc, #4	; (adr r2, 81044f0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81044ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81044f0:	0810452d 	.word	0x0810452d
 81044f4:	08104501 	.word	0x08104501
 81044f8:	0810450f 	.word	0x0810450f
 81044fc:	0810452d 	.word	0x0810452d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104500:	4b68      	ldr	r3, [pc, #416]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104504:	4a67      	ldr	r2, [pc, #412]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810450a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810450c:	e00f      	b.n	810452e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104512:	3308      	adds	r3, #8
 8104514:	2102      	movs	r1, #2
 8104516:	4618      	mov	r0, r3
 8104518:	f001 f902 	bl	8105720 <RCCEx_PLL2_Config>
 810451c:	4603      	mov	r3, r0
 810451e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8104522:	e004      	b.n	810452e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8104524:	2301      	movs	r3, #1
 8104526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810452a:	e000      	b.n	810452e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 810452c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810452e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104532:	2b00      	cmp	r3, #0
 8104534:	d10a      	bne.n	810454c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8104536:	4b5b      	ldr	r3, [pc, #364]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810453a:	f023 0103 	bic.w	r1, r3, #3
 810453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104544:	4a57      	ldr	r2, [pc, #348]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104546:	430b      	orrs	r3, r1
 8104548:	64d3      	str	r3, [r2, #76]	; 0x4c
 810454a:	e003      	b.n	8104554 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810454c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104550:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104558:	e9d3 2300 	ldrd	r2, r3, [r3]
 810455c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8104560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8104564:	2300      	movs	r3, #0
 8104566:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 810456a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 810456e:	460b      	mov	r3, r1
 8104570:	4313      	orrs	r3, r2
 8104572:	f000 809f 	beq.w	81046b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8104576:	4b4c      	ldr	r3, [pc, #304]	; (81046a8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8104578:	681b      	ldr	r3, [r3, #0]
 810457a:	4a4b      	ldr	r2, [pc, #300]	; (81046a8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810457c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104580:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8104582:	f7fd ffcb 	bl	810251c <HAL_GetTick>
 8104586:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810458a:	e00b      	b.n	81045a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810458c:	f7fd ffc6 	bl	810251c <HAL_GetTick>
 8104590:	4602      	mov	r2, r0
 8104592:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8104596:	1ad3      	subs	r3, r2, r3
 8104598:	2b64      	cmp	r3, #100	; 0x64
 810459a:	d903      	bls.n	81045a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 810459c:	2303      	movs	r3, #3
 810459e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81045a2:	e005      	b.n	81045b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81045a4:	4b40      	ldr	r3, [pc, #256]	; (81046a8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81045a6:	681b      	ldr	r3, [r3, #0]
 81045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81045ac:	2b00      	cmp	r3, #0
 81045ae:	d0ed      	beq.n	810458c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81045b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81045b4:	2b00      	cmp	r3, #0
 81045b6:	d179      	bne.n	81046ac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81045b8:	4b3a      	ldr	r3, [pc, #232]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81045ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81045bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81045c4:	4053      	eors	r3, r2
 81045c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81045ca:	2b00      	cmp	r3, #0
 81045cc:	d015      	beq.n	81045fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81045ce:	4b35      	ldr	r3, [pc, #212]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81045d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81045d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81045d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81045da:	4b32      	ldr	r3, [pc, #200]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81045dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81045de:	4a31      	ldr	r2, [pc, #196]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81045e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81045e4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81045e6:	4b2f      	ldr	r3, [pc, #188]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81045ea:	4a2e      	ldr	r2, [pc, #184]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81045ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81045f0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81045f2:	4a2c      	ldr	r2, [pc, #176]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81045f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81045f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104606:	d118      	bne.n	810463a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104608:	f7fd ff88 	bl	810251c <HAL_GetTick>
 810460c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104610:	e00d      	b.n	810462e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104612:	f7fd ff83 	bl	810251c <HAL_GetTick>
 8104616:	4602      	mov	r2, r0
 8104618:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 810461c:	1ad2      	subs	r2, r2, r3
 810461e:	f241 3388 	movw	r3, #5000	; 0x1388
 8104622:	429a      	cmp	r2, r3
 8104624:	d903      	bls.n	810462e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8104626:	2303      	movs	r3, #3
 8104628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 810462c:	e005      	b.n	810463a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810462e:	4b1d      	ldr	r3, [pc, #116]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104632:	f003 0302 	and.w	r3, r3, #2
 8104636:	2b00      	cmp	r3, #0
 8104638:	d0eb      	beq.n	8104612 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810463a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810463e:	2b00      	cmp	r3, #0
 8104640:	d12b      	bne.n	810469a <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104646:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810464a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810464e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104652:	d110      	bne.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8104654:	4b13      	ldr	r3, [pc, #76]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104656:	691b      	ldr	r3, [r3, #16]
 8104658:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 810465c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104660:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104664:	091b      	lsrs	r3, r3, #4
 8104666:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810466a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810466e:	4a0d      	ldr	r2, [pc, #52]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104670:	430b      	orrs	r3, r1
 8104672:	6113      	str	r3, [r2, #16]
 8104674:	e005      	b.n	8104682 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8104676:	4b0b      	ldr	r3, [pc, #44]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104678:	691b      	ldr	r3, [r3, #16]
 810467a:	4a0a      	ldr	r2, [pc, #40]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810467c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8104680:	6113      	str	r3, [r2, #16]
 8104682:	4b08      	ldr	r3, [pc, #32]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104684:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8104686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810468a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810468e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104692:	4a04      	ldr	r2, [pc, #16]	; (81046a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104694:	430b      	orrs	r3, r1
 8104696:	6713      	str	r3, [r2, #112]	; 0x70
 8104698:	e00c      	b.n	81046b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810469a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810469e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 81046a2:	e007      	b.n	81046b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81046a4:	58024400 	.word	0x58024400
 81046a8:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81046b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81046b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81046bc:	f002 0301 	and.w	r3, r2, #1
 81046c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 81046c4:	2300      	movs	r3, #0
 81046c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 81046ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 81046ce:	460b      	mov	r3, r1
 81046d0:	4313      	orrs	r3, r2
 81046d2:	f000 8089 	beq.w	81047e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81046d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81046dc:	2b28      	cmp	r3, #40	; 0x28
 81046de:	d86b      	bhi.n	81047b8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 81046e0:	a201      	add	r2, pc, #4	; (adr r2, 81046e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 81046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81046e6:	bf00      	nop
 81046e8:	081047c1 	.word	0x081047c1
 81046ec:	081047b9 	.word	0x081047b9
 81046f0:	081047b9 	.word	0x081047b9
 81046f4:	081047b9 	.word	0x081047b9
 81046f8:	081047b9 	.word	0x081047b9
 81046fc:	081047b9 	.word	0x081047b9
 8104700:	081047b9 	.word	0x081047b9
 8104704:	081047b9 	.word	0x081047b9
 8104708:	0810478d 	.word	0x0810478d
 810470c:	081047b9 	.word	0x081047b9
 8104710:	081047b9 	.word	0x081047b9
 8104714:	081047b9 	.word	0x081047b9
 8104718:	081047b9 	.word	0x081047b9
 810471c:	081047b9 	.word	0x081047b9
 8104720:	081047b9 	.word	0x081047b9
 8104724:	081047b9 	.word	0x081047b9
 8104728:	081047a3 	.word	0x081047a3
 810472c:	081047b9 	.word	0x081047b9
 8104730:	081047b9 	.word	0x081047b9
 8104734:	081047b9 	.word	0x081047b9
 8104738:	081047b9 	.word	0x081047b9
 810473c:	081047b9 	.word	0x081047b9
 8104740:	081047b9 	.word	0x081047b9
 8104744:	081047b9 	.word	0x081047b9
 8104748:	081047c1 	.word	0x081047c1
 810474c:	081047b9 	.word	0x081047b9
 8104750:	081047b9 	.word	0x081047b9
 8104754:	081047b9 	.word	0x081047b9
 8104758:	081047b9 	.word	0x081047b9
 810475c:	081047b9 	.word	0x081047b9
 8104760:	081047b9 	.word	0x081047b9
 8104764:	081047b9 	.word	0x081047b9
 8104768:	081047c1 	.word	0x081047c1
 810476c:	081047b9 	.word	0x081047b9
 8104770:	081047b9 	.word	0x081047b9
 8104774:	081047b9 	.word	0x081047b9
 8104778:	081047b9 	.word	0x081047b9
 810477c:	081047b9 	.word	0x081047b9
 8104780:	081047b9 	.word	0x081047b9
 8104784:	081047b9 	.word	0x081047b9
 8104788:	081047c1 	.word	0x081047c1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104790:	3308      	adds	r3, #8
 8104792:	2101      	movs	r1, #1
 8104794:	4618      	mov	r0, r3
 8104796:	f000 ffc3 	bl	8105720 <RCCEx_PLL2_Config>
 810479a:	4603      	mov	r3, r0
 810479c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81047a0:	e00f      	b.n	81047c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047a6:	3328      	adds	r3, #40	; 0x28
 81047a8:	2101      	movs	r1, #1
 81047aa:	4618      	mov	r0, r3
 81047ac:	f001 f86a 	bl	8105884 <RCCEx_PLL3_Config>
 81047b0:	4603      	mov	r3, r0
 81047b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81047b6:	e004      	b.n	81047c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81047b8:	2301      	movs	r3, #1
 81047ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81047be:	e000      	b.n	81047c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81047c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81047c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81047c6:	2b00      	cmp	r3, #0
 81047c8:	d10a      	bne.n	81047e0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81047ca:	4bbf      	ldr	r3, [pc, #764]	; (8104ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81047cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81047ce:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 81047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81047d8:	4abb      	ldr	r2, [pc, #748]	; (8104ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81047da:	430b      	orrs	r3, r1
 81047dc:	6553      	str	r3, [r2, #84]	; 0x54
 81047de:	e003      	b.n	81047e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81047e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81047e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047f0:	f002 0302 	and.w	r3, r2, #2
 81047f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 81047f8:	2300      	movs	r3, #0
 81047fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 81047fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8104802:	460b      	mov	r3, r1
 8104804:	4313      	orrs	r3, r2
 8104806:	d041      	beq.n	810488c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810480c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810480e:	2b05      	cmp	r3, #5
 8104810:	d824      	bhi.n	810485c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8104812:	a201      	add	r2, pc, #4	; (adr r2, 8104818 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8104814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104818:	08104865 	.word	0x08104865
 810481c:	08104831 	.word	0x08104831
 8104820:	08104847 	.word	0x08104847
 8104824:	08104865 	.word	0x08104865
 8104828:	08104865 	.word	0x08104865
 810482c:	08104865 	.word	0x08104865
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104834:	3308      	adds	r3, #8
 8104836:	2101      	movs	r1, #1
 8104838:	4618      	mov	r0, r3
 810483a:	f000 ff71 	bl	8105720 <RCCEx_PLL2_Config>
 810483e:	4603      	mov	r3, r0
 8104840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8104844:	e00f      	b.n	8104866 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810484a:	3328      	adds	r3, #40	; 0x28
 810484c:	2101      	movs	r1, #1
 810484e:	4618      	mov	r0, r3
 8104850:	f001 f818 	bl	8105884 <RCCEx_PLL3_Config>
 8104854:	4603      	mov	r3, r0
 8104856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810485a:	e004      	b.n	8104866 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810485c:	2301      	movs	r3, #1
 810485e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104862:	e000      	b.n	8104866 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8104864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810486a:	2b00      	cmp	r3, #0
 810486c:	d10a      	bne.n	8104884 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810486e:	4b96      	ldr	r3, [pc, #600]	; (8104ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104872:	f023 0107 	bic.w	r1, r3, #7
 8104876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810487a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810487c:	4a92      	ldr	r2, [pc, #584]	; (8104ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810487e:	430b      	orrs	r3, r1
 8104880:	6553      	str	r3, [r2, #84]	; 0x54
 8104882:	e003      	b.n	810488c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104884:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104888:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810488c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104894:	f002 0304 	and.w	r3, r2, #4
 8104898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 810489c:	2300      	movs	r3, #0
 810489e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81048a2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 81048a6:	460b      	mov	r3, r1
 81048a8:	4313      	orrs	r3, r2
 81048aa:	d044      	beq.n	8104936 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81048b4:	2b05      	cmp	r3, #5
 81048b6:	d825      	bhi.n	8104904 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81048b8:	a201      	add	r2, pc, #4	; (adr r2, 81048c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81048be:	bf00      	nop
 81048c0:	0810490d 	.word	0x0810490d
 81048c4:	081048d9 	.word	0x081048d9
 81048c8:	081048ef 	.word	0x081048ef
 81048cc:	0810490d 	.word	0x0810490d
 81048d0:	0810490d 	.word	0x0810490d
 81048d4:	0810490d 	.word	0x0810490d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048dc:	3308      	adds	r3, #8
 81048de:	2101      	movs	r1, #1
 81048e0:	4618      	mov	r0, r3
 81048e2:	f000 ff1d 	bl	8105720 <RCCEx_PLL2_Config>
 81048e6:	4603      	mov	r3, r0
 81048e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81048ec:	e00f      	b.n	810490e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048f2:	3328      	adds	r3, #40	; 0x28
 81048f4:	2101      	movs	r1, #1
 81048f6:	4618      	mov	r0, r3
 81048f8:	f000 ffc4 	bl	8105884 <RCCEx_PLL3_Config>
 81048fc:	4603      	mov	r3, r0
 81048fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104902:	e004      	b.n	810490e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104904:	2301      	movs	r3, #1
 8104906:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810490a:	e000      	b.n	810490e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 810490c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810490e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104912:	2b00      	cmp	r3, #0
 8104914:	d10b      	bne.n	810492e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104916:	4b6c      	ldr	r3, [pc, #432]	; (8104ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810491a:	f023 0107 	bic.w	r1, r3, #7
 810491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104926:	4a68      	ldr	r2, [pc, #416]	; (8104ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104928:	430b      	orrs	r3, r1
 810492a:	6593      	str	r3, [r2, #88]	; 0x58
 810492c:	e003      	b.n	8104936 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810492e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104932:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810493e:	f002 0320 	and.w	r3, r2, #32
 8104942:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8104946:	2300      	movs	r3, #0
 8104948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 810494c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8104950:	460b      	mov	r3, r1
 8104952:	4313      	orrs	r3, r2
 8104954:	d055      	beq.n	8104a02 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8104956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810495e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104962:	d033      	beq.n	81049cc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8104964:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104968:	d82c      	bhi.n	81049c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810496a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810496e:	d02f      	beq.n	81049d0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8104970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104974:	d826      	bhi.n	81049c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104976:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810497a:	d02b      	beq.n	81049d4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 810497c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104980:	d820      	bhi.n	81049c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104986:	d012      	beq.n	81049ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8104988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810498c:	d81a      	bhi.n	81049c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810498e:	2b00      	cmp	r3, #0
 8104990:	d022      	beq.n	81049d8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8104992:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104996:	d115      	bne.n	81049c4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810499c:	3308      	adds	r3, #8
 810499e:	2100      	movs	r1, #0
 81049a0:	4618      	mov	r0, r3
 81049a2:	f000 febd 	bl	8105720 <RCCEx_PLL2_Config>
 81049a6:	4603      	mov	r3, r0
 81049a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81049ac:	e015      	b.n	81049da <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049b2:	3328      	adds	r3, #40	; 0x28
 81049b4:	2102      	movs	r1, #2
 81049b6:	4618      	mov	r0, r3
 81049b8:	f000 ff64 	bl	8105884 <RCCEx_PLL3_Config>
 81049bc:	4603      	mov	r3, r0
 81049be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81049c2:	e00a      	b.n	81049da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81049c4:	2301      	movs	r3, #1
 81049c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81049ca:	e006      	b.n	81049da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81049cc:	bf00      	nop
 81049ce:	e004      	b.n	81049da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81049d0:	bf00      	nop
 81049d2:	e002      	b.n	81049da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81049d4:	bf00      	nop
 81049d6:	e000      	b.n	81049da <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81049d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81049da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81049de:	2b00      	cmp	r3, #0
 81049e0:	d10b      	bne.n	81049fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81049e2:	4b39      	ldr	r3, [pc, #228]	; (8104ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81049e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81049e6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 81049ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81049f2:	4a35      	ldr	r2, [pc, #212]	; (8104ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81049f4:	430b      	orrs	r3, r1
 81049f6:	6553      	str	r3, [r2, #84]	; 0x54
 81049f8:	e003      	b.n	8104a02 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81049fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a0a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8104a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8104a12:	2300      	movs	r3, #0
 8104a14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8104a18:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8104a1c:	460b      	mov	r3, r1
 8104a1e:	4313      	orrs	r3, r2
 8104a20:	d058      	beq.n	8104ad4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8104a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104a2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104a2e:	d033      	beq.n	8104a98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8104a30:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104a34:	d82c      	bhi.n	8104a90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104a3a:	d02f      	beq.n	8104a9c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8104a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104a40:	d826      	bhi.n	8104a90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104a42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104a46:	d02b      	beq.n	8104aa0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8104a48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104a4c:	d820      	bhi.n	8104a90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104a52:	d012      	beq.n	8104a7a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8104a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104a58:	d81a      	bhi.n	8104a90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104a5a:	2b00      	cmp	r3, #0
 8104a5c:	d022      	beq.n	8104aa4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8104a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104a62:	d115      	bne.n	8104a90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a68:	3308      	adds	r3, #8
 8104a6a:	2100      	movs	r1, #0
 8104a6c:	4618      	mov	r0, r3
 8104a6e:	f000 fe57 	bl	8105720 <RCCEx_PLL2_Config>
 8104a72:	4603      	mov	r3, r0
 8104a74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104a78:	e015      	b.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a7e:	3328      	adds	r3, #40	; 0x28
 8104a80:	2102      	movs	r1, #2
 8104a82:	4618      	mov	r0, r3
 8104a84:	f000 fefe 	bl	8105884 <RCCEx_PLL3_Config>
 8104a88:	4603      	mov	r3, r0
 8104a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104a8e:	e00a      	b.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104a90:	2301      	movs	r3, #1
 8104a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104a96:	e006      	b.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104a98:	bf00      	nop
 8104a9a:	e004      	b.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104a9c:	bf00      	nop
 8104a9e:	e002      	b.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104aa0:	bf00      	nop
 8104aa2:	e000      	b.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104aaa:	2b00      	cmp	r3, #0
 8104aac:	d10e      	bne.n	8104acc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8104aae:	4b06      	ldr	r3, [pc, #24]	; (8104ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104ab2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8104ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104abe:	4a02      	ldr	r2, [pc, #8]	; (8104ac8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104ac0:	430b      	orrs	r3, r1
 8104ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8104ac4:	e006      	b.n	8104ad4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8104ac6:	bf00      	nop
 8104ac8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104acc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ad0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104adc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8104ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8104ae4:	2300      	movs	r3, #0
 8104ae6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8104aea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8104aee:	460b      	mov	r3, r1
 8104af0:	4313      	orrs	r3, r2
 8104af2:	d055      	beq.n	8104ba0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8104af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104af8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104afc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104b00:	d033      	beq.n	8104b6a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8104b02:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104b06:	d82c      	bhi.n	8104b62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104b0c:	d02f      	beq.n	8104b6e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8104b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104b12:	d826      	bhi.n	8104b62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104b14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104b18:	d02b      	beq.n	8104b72 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8104b1a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104b1e:	d820      	bhi.n	8104b62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104b20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104b24:	d012      	beq.n	8104b4c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8104b26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104b2a:	d81a      	bhi.n	8104b62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104b2c:	2b00      	cmp	r3, #0
 8104b2e:	d022      	beq.n	8104b76 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8104b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104b34:	d115      	bne.n	8104b62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b3a:	3308      	adds	r3, #8
 8104b3c:	2100      	movs	r1, #0
 8104b3e:	4618      	mov	r0, r3
 8104b40:	f000 fdee 	bl	8105720 <RCCEx_PLL2_Config>
 8104b44:	4603      	mov	r3, r0
 8104b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104b4a:	e015      	b.n	8104b78 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b50:	3328      	adds	r3, #40	; 0x28
 8104b52:	2102      	movs	r1, #2
 8104b54:	4618      	mov	r0, r3
 8104b56:	f000 fe95 	bl	8105884 <RCCEx_PLL3_Config>
 8104b5a:	4603      	mov	r3, r0
 8104b5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104b60:	e00a      	b.n	8104b78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104b62:	2301      	movs	r3, #1
 8104b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104b68:	e006      	b.n	8104b78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104b6a:	bf00      	nop
 8104b6c:	e004      	b.n	8104b78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104b6e:	bf00      	nop
 8104b70:	e002      	b.n	8104b78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104b72:	bf00      	nop
 8104b74:	e000      	b.n	8104b78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b7c:	2b00      	cmp	r3, #0
 8104b7e:	d10b      	bne.n	8104b98 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104b80:	4ba1      	ldr	r3, [pc, #644]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104b84:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8104b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104b90:	4a9d      	ldr	r2, [pc, #628]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104b92:	430b      	orrs	r3, r1
 8104b94:	6593      	str	r3, [r2, #88]	; 0x58
 8104b96:	e003      	b.n	8104ba0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ba8:	f002 0308 	and.w	r3, r2, #8
 8104bac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8104bb0:	2300      	movs	r3, #0
 8104bb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8104bb6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8104bba:	460b      	mov	r3, r1
 8104bbc:	4313      	orrs	r3, r2
 8104bbe:	d01e      	beq.n	8104bfe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8104bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104bcc:	d10c      	bne.n	8104be8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104bd2:	3328      	adds	r3, #40	; 0x28
 8104bd4:	2102      	movs	r1, #2
 8104bd6:	4618      	mov	r0, r3
 8104bd8:	f000 fe54 	bl	8105884 <RCCEx_PLL3_Config>
 8104bdc:	4603      	mov	r3, r0
 8104bde:	2b00      	cmp	r3, #0
 8104be0:	d002      	beq.n	8104be8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8104be2:	2301      	movs	r3, #1
 8104be4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104be8:	4b87      	ldr	r3, [pc, #540]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104bec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8104bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104bf8:	4a83      	ldr	r2, [pc, #524]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104bfa:	430b      	orrs	r3, r1
 8104bfc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c06:	f002 0310 	and.w	r3, r2, #16
 8104c0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8104c0e:	2300      	movs	r3, #0
 8104c10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8104c14:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8104c18:	460b      	mov	r3, r1
 8104c1a:	4313      	orrs	r3, r2
 8104c1c:	d01e      	beq.n	8104c5c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8104c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104c2a:	d10c      	bne.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c30:	3328      	adds	r3, #40	; 0x28
 8104c32:	2102      	movs	r1, #2
 8104c34:	4618      	mov	r0, r3
 8104c36:	f000 fe25 	bl	8105884 <RCCEx_PLL3_Config>
 8104c3a:	4603      	mov	r3, r0
 8104c3c:	2b00      	cmp	r3, #0
 8104c3e:	d002      	beq.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8104c40:	2301      	movs	r3, #1
 8104c42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104c46:	4b70      	ldr	r3, [pc, #448]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104c4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8104c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104c56:	4a6c      	ldr	r2, [pc, #432]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104c58:	430b      	orrs	r3, r1
 8104c5a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c64:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8104c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8104c6c:	2300      	movs	r3, #0
 8104c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8104c72:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8104c76:	460b      	mov	r3, r1
 8104c78:	4313      	orrs	r3, r2
 8104c7a:	d03e      	beq.n	8104cfa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8104c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104c84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104c88:	d022      	beq.n	8104cd0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8104c8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104c8e:	d81b      	bhi.n	8104cc8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8104c90:	2b00      	cmp	r3, #0
 8104c92:	d003      	beq.n	8104c9c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8104c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104c98:	d00b      	beq.n	8104cb2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8104c9a:	e015      	b.n	8104cc8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ca0:	3308      	adds	r3, #8
 8104ca2:	2100      	movs	r1, #0
 8104ca4:	4618      	mov	r0, r3
 8104ca6:	f000 fd3b 	bl	8105720 <RCCEx_PLL2_Config>
 8104caa:	4603      	mov	r3, r0
 8104cac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8104cb0:	e00f      	b.n	8104cd2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104cb6:	3328      	adds	r3, #40	; 0x28
 8104cb8:	2102      	movs	r1, #2
 8104cba:	4618      	mov	r0, r3
 8104cbc:	f000 fde2 	bl	8105884 <RCCEx_PLL3_Config>
 8104cc0:	4603      	mov	r3, r0
 8104cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8104cc6:	e004      	b.n	8104cd2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104cc8:	2301      	movs	r3, #1
 8104cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104cce:	e000      	b.n	8104cd2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8104cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104cd6:	2b00      	cmp	r3, #0
 8104cd8:	d10b      	bne.n	8104cf2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104cda:	4b4b      	ldr	r3, [pc, #300]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104cde:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8104ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ce6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104cea:	4a47      	ldr	r2, [pc, #284]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104cec:	430b      	orrs	r3, r1
 8104cee:	6593      	str	r3, [r2, #88]	; 0x58
 8104cf0:	e003      	b.n	8104cfa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104cf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d02:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8104d06:	67bb      	str	r3, [r7, #120]	; 0x78
 8104d08:	2300      	movs	r3, #0
 8104d0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8104d0c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8104d10:	460b      	mov	r3, r1
 8104d12:	4313      	orrs	r3, r2
 8104d14:	d03b      	beq.n	8104d8e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8104d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104d1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104d22:	d01f      	beq.n	8104d64 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8104d24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104d28:	d818      	bhi.n	8104d5c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8104d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104d2e:	d003      	beq.n	8104d38 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8104d30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104d34:	d007      	beq.n	8104d46 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8104d36:	e011      	b.n	8104d5c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d38:	4b33      	ldr	r3, [pc, #204]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d3c:	4a32      	ldr	r2, [pc, #200]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104d42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8104d44:	e00f      	b.n	8104d66 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d4a:	3328      	adds	r3, #40	; 0x28
 8104d4c:	2101      	movs	r1, #1
 8104d4e:	4618      	mov	r0, r3
 8104d50:	f000 fd98 	bl	8105884 <RCCEx_PLL3_Config>
 8104d54:	4603      	mov	r3, r0
 8104d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8104d5a:	e004      	b.n	8104d66 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104d5c:	2301      	movs	r3, #1
 8104d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104d62:	e000      	b.n	8104d66 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8104d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104d6a:	2b00      	cmp	r3, #0
 8104d6c:	d10b      	bne.n	8104d86 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104d6e:	4b26      	ldr	r3, [pc, #152]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104d72:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8104d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104d7e:	4a22      	ldr	r2, [pc, #136]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104d80:	430b      	orrs	r3, r1
 8104d82:	6553      	str	r3, [r2, #84]	; 0x54
 8104d84:	e003      	b.n	8104d8e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104d8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d96:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8104d9a:	673b      	str	r3, [r7, #112]	; 0x70
 8104d9c:	2300      	movs	r3, #0
 8104d9e:	677b      	str	r3, [r7, #116]	; 0x74
 8104da0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8104da4:	460b      	mov	r3, r1
 8104da6:	4313      	orrs	r3, r2
 8104da8:	d034      	beq.n	8104e14 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8104daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104db0:	2b00      	cmp	r3, #0
 8104db2:	d003      	beq.n	8104dbc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8104db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104db8:	d007      	beq.n	8104dca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8104dba:	e011      	b.n	8104de0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104dbc:	4b12      	ldr	r3, [pc, #72]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104dc0:	4a11      	ldr	r2, [pc, #68]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104dc8:	e00e      	b.n	8104de8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104dce:	3308      	adds	r3, #8
 8104dd0:	2102      	movs	r1, #2
 8104dd2:	4618      	mov	r0, r3
 8104dd4:	f000 fca4 	bl	8105720 <RCCEx_PLL2_Config>
 8104dd8:	4603      	mov	r3, r0
 8104dda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104dde:	e003      	b.n	8104de8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8104de0:	2301      	movs	r3, #1
 8104de2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104de8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104dec:	2b00      	cmp	r3, #0
 8104dee:	d10d      	bne.n	8104e0c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104df0:	4b05      	ldr	r3, [pc, #20]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104df4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8104df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104dfe:	4a02      	ldr	r2, [pc, #8]	; (8104e08 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104e00:	430b      	orrs	r3, r1
 8104e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8104e04:	e006      	b.n	8104e14 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8104e06:	bf00      	nop
 8104e08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104e10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e1c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8104e20:	66bb      	str	r3, [r7, #104]	; 0x68
 8104e22:	2300      	movs	r3, #0
 8104e24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8104e26:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8104e2a:	460b      	mov	r3, r1
 8104e2c:	4313      	orrs	r3, r2
 8104e2e:	d00c      	beq.n	8104e4a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e34:	3328      	adds	r3, #40	; 0x28
 8104e36:	2102      	movs	r1, #2
 8104e38:	4618      	mov	r0, r3
 8104e3a:	f000 fd23 	bl	8105884 <RCCEx_PLL3_Config>
 8104e3e:	4603      	mov	r3, r0
 8104e40:	2b00      	cmp	r3, #0
 8104e42:	d002      	beq.n	8104e4a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8104e44:	2301      	movs	r3, #1
 8104e46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e52:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8104e56:	663b      	str	r3, [r7, #96]	; 0x60
 8104e58:	2300      	movs	r3, #0
 8104e5a:	667b      	str	r3, [r7, #100]	; 0x64
 8104e5c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8104e60:	460b      	mov	r3, r1
 8104e62:	4313      	orrs	r3, r2
 8104e64:	d038      	beq.n	8104ed8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8104e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104e72:	d018      	beq.n	8104ea6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8104e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104e78:	d811      	bhi.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8104e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104e7e:	d014      	beq.n	8104eaa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8104e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104e84:	d80b      	bhi.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8104e86:	2b00      	cmp	r3, #0
 8104e88:	d011      	beq.n	8104eae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8104e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104e8e:	d106      	bne.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104e90:	4bc3      	ldr	r3, [pc, #780]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e94:	4ac2      	ldr	r2, [pc, #776]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104e9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8104e9c:	e008      	b.n	8104eb0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104e9e:	2301      	movs	r3, #1
 8104ea0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104ea4:	e004      	b.n	8104eb0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104ea6:	bf00      	nop
 8104ea8:	e002      	b.n	8104eb0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104eaa:	bf00      	nop
 8104eac:	e000      	b.n	8104eb0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104eb4:	2b00      	cmp	r3, #0
 8104eb6:	d10b      	bne.n	8104ed0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104eb8:	4bb9      	ldr	r3, [pc, #740]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104ebc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8104ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104ec8:	4ab5      	ldr	r2, [pc, #724]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104eca:	430b      	orrs	r3, r1
 8104ecc:	6553      	str	r3, [r2, #84]	; 0x54
 8104ece:	e003      	b.n	8104ed8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ed4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ee0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8104ee4:	65bb      	str	r3, [r7, #88]	; 0x58
 8104ee6:	2300      	movs	r3, #0
 8104ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8104eea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8104eee:	460b      	mov	r3, r1
 8104ef0:	4313      	orrs	r3, r2
 8104ef2:	d009      	beq.n	8104f08 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104ef4:	4baa      	ldr	r3, [pc, #680]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104ef8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8104efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104f02:	4aa7      	ldr	r2, [pc, #668]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f04:	430b      	orrs	r3, r1
 8104f06:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f10:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8104f14:	653b      	str	r3, [r7, #80]	; 0x50
 8104f16:	2300      	movs	r3, #0
 8104f18:	657b      	str	r3, [r7, #84]	; 0x54
 8104f1a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8104f1e:	460b      	mov	r3, r1
 8104f20:	4313      	orrs	r3, r2
 8104f22:	d00a      	beq.n	8104f3a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104f24:	4b9e      	ldr	r3, [pc, #632]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f26:	691b      	ldr	r3, [r3, #16]
 8104f28:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8104f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104f34:	4a9a      	ldr	r2, [pc, #616]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f36:	430b      	orrs	r3, r1
 8104f38:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f42:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8104f46:	64bb      	str	r3, [r7, #72]	; 0x48
 8104f48:	2300      	movs	r3, #0
 8104f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8104f4c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8104f50:	460b      	mov	r3, r1
 8104f52:	4313      	orrs	r3, r2
 8104f54:	d009      	beq.n	8104f6a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104f56:	4b92      	ldr	r3, [pc, #584]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f5a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8104f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104f64:	4a8e      	ldr	r2, [pc, #568]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f66:	430b      	orrs	r3, r1
 8104f68:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f72:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8104f76:	643b      	str	r3, [r7, #64]	; 0x40
 8104f78:	2300      	movs	r3, #0
 8104f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8104f7c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8104f80:	460b      	mov	r3, r1
 8104f82:	4313      	orrs	r3, r2
 8104f84:	d00e      	beq.n	8104fa4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104f86:	4b86      	ldr	r3, [pc, #536]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f88:	691b      	ldr	r3, [r3, #16]
 8104f8a:	4a85      	ldr	r2, [pc, #532]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104f90:	6113      	str	r3, [r2, #16]
 8104f92:	4b83      	ldr	r3, [pc, #524]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f94:	6919      	ldr	r1, [r3, #16]
 8104f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8104f9e:	4a80      	ldr	r2, [pc, #512]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104fa0:	430b      	orrs	r3, r1
 8104fa2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104fac:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8104fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8104fb2:	2300      	movs	r3, #0
 8104fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104fb6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8104fba:	460b      	mov	r3, r1
 8104fbc:	4313      	orrs	r3, r2
 8104fbe:	d009      	beq.n	8104fd4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104fc0:	4b77      	ldr	r3, [pc, #476]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104fc4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8104fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104fce:	4a74      	ldr	r2, [pc, #464]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104fd0:	430b      	orrs	r3, r1
 8104fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104fdc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8104fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8104fe2:	2300      	movs	r3, #0
 8104fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8104fe6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8104fea:	460b      	mov	r3, r1
 8104fec:	4313      	orrs	r3, r2
 8104fee:	d00a      	beq.n	8105006 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104ff0:	4b6b      	ldr	r3, [pc, #428]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104ff4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8104ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105000:	4a67      	ldr	r2, [pc, #412]	; (81051a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105002:	430b      	orrs	r3, r1
 8105004:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8105006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810500e:	2100      	movs	r1, #0
 8105010:	62b9      	str	r1, [r7, #40]	; 0x28
 8105012:	f003 0301 	and.w	r3, r3, #1
 8105016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8105018:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 810501c:	460b      	mov	r3, r1
 810501e:	4313      	orrs	r3, r2
 8105020:	d011      	beq.n	8105046 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105026:	3308      	adds	r3, #8
 8105028:	2100      	movs	r1, #0
 810502a:	4618      	mov	r0, r3
 810502c:	f000 fb78 	bl	8105720 <RCCEx_PLL2_Config>
 8105030:	4603      	mov	r3, r0
 8105032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810503a:	2b00      	cmp	r3, #0
 810503c:	d003      	beq.n	8105046 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810503e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105042:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8105046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810504e:	2100      	movs	r1, #0
 8105050:	6239      	str	r1, [r7, #32]
 8105052:	f003 0302 	and.w	r3, r3, #2
 8105056:	627b      	str	r3, [r7, #36]	; 0x24
 8105058:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810505c:	460b      	mov	r3, r1
 810505e:	4313      	orrs	r3, r2
 8105060:	d011      	beq.n	8105086 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105066:	3308      	adds	r3, #8
 8105068:	2101      	movs	r1, #1
 810506a:	4618      	mov	r0, r3
 810506c:	f000 fb58 	bl	8105720 <RCCEx_PLL2_Config>
 8105070:	4603      	mov	r3, r0
 8105072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810507a:	2b00      	cmp	r3, #0
 810507c:	d003      	beq.n	8105086 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810507e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105082:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8105086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810508e:	2100      	movs	r1, #0
 8105090:	61b9      	str	r1, [r7, #24]
 8105092:	f003 0304 	and.w	r3, r3, #4
 8105096:	61fb      	str	r3, [r7, #28]
 8105098:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810509c:	460b      	mov	r3, r1
 810509e:	4313      	orrs	r3, r2
 81050a0:	d011      	beq.n	81050c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81050a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050a6:	3308      	adds	r3, #8
 81050a8:	2102      	movs	r1, #2
 81050aa:	4618      	mov	r0, r3
 81050ac:	f000 fb38 	bl	8105720 <RCCEx_PLL2_Config>
 81050b0:	4603      	mov	r3, r0
 81050b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81050b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81050ba:	2b00      	cmp	r3, #0
 81050bc:	d003      	beq.n	81050c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81050be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81050c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81050c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81050ce:	2100      	movs	r1, #0
 81050d0:	6139      	str	r1, [r7, #16]
 81050d2:	f003 0308 	and.w	r3, r3, #8
 81050d6:	617b      	str	r3, [r7, #20]
 81050d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81050dc:	460b      	mov	r3, r1
 81050de:	4313      	orrs	r3, r2
 81050e0:	d011      	beq.n	8105106 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050e6:	3328      	adds	r3, #40	; 0x28
 81050e8:	2100      	movs	r1, #0
 81050ea:	4618      	mov	r0, r3
 81050ec:	f000 fbca 	bl	8105884 <RCCEx_PLL3_Config>
 81050f0:	4603      	mov	r3, r0
 81050f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 81050f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81050fa:	2b00      	cmp	r3, #0
 81050fc:	d003      	beq.n	8105106 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81050fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105102:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8105106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810510e:	2100      	movs	r1, #0
 8105110:	60b9      	str	r1, [r7, #8]
 8105112:	f003 0310 	and.w	r3, r3, #16
 8105116:	60fb      	str	r3, [r7, #12]
 8105118:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810511c:	460b      	mov	r3, r1
 810511e:	4313      	orrs	r3, r2
 8105120:	d011      	beq.n	8105146 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105126:	3328      	adds	r3, #40	; 0x28
 8105128:	2101      	movs	r1, #1
 810512a:	4618      	mov	r0, r3
 810512c:	f000 fbaa 	bl	8105884 <RCCEx_PLL3_Config>
 8105130:	4603      	mov	r3, r0
 8105132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810513a:	2b00      	cmp	r3, #0
 810513c:	d003      	beq.n	8105146 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810513e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105142:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8105146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810514e:	2100      	movs	r1, #0
 8105150:	6039      	str	r1, [r7, #0]
 8105152:	f003 0320 	and.w	r3, r3, #32
 8105156:	607b      	str	r3, [r7, #4]
 8105158:	e9d7 1200 	ldrd	r1, r2, [r7]
 810515c:	460b      	mov	r3, r1
 810515e:	4313      	orrs	r3, r2
 8105160:	d011      	beq.n	8105186 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105166:	3328      	adds	r3, #40	; 0x28
 8105168:	2102      	movs	r1, #2
 810516a:	4618      	mov	r0, r3
 810516c:	f000 fb8a 	bl	8105884 <RCCEx_PLL3_Config>
 8105170:	4603      	mov	r3, r0
 8105172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810517a:	2b00      	cmp	r3, #0
 810517c:	d003      	beq.n	8105186 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810517e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105182:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8105186:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 810518a:	2b00      	cmp	r3, #0
 810518c:	d101      	bne.n	8105192 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 810518e:	2300      	movs	r3, #0
 8105190:	e000      	b.n	8105194 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8105192:	2301      	movs	r3, #1
}
 8105194:	4618      	mov	r0, r3
 8105196:	f507 7794 	add.w	r7, r7, #296	; 0x128
 810519a:	46bd      	mov	sp, r7
 810519c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81051a0:	58024400 	.word	0x58024400

081051a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81051a4:	b580      	push	{r7, lr}
 81051a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81051a8:	f7fe fd94 	bl	8103cd4 <HAL_RCC_GetHCLKFreq>
 81051ac:	4602      	mov	r2, r0
 81051ae:	4b06      	ldr	r3, [pc, #24]	; (81051c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81051b0:	6a1b      	ldr	r3, [r3, #32]
 81051b2:	091b      	lsrs	r3, r3, #4
 81051b4:	f003 0307 	and.w	r3, r3, #7
 81051b8:	4904      	ldr	r1, [pc, #16]	; (81051cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81051ba:	5ccb      	ldrb	r3, [r1, r3]
 81051bc:	f003 031f 	and.w	r3, r3, #31
 81051c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81051c4:	4618      	mov	r0, r3
 81051c6:	bd80      	pop	{r7, pc}
 81051c8:	58024400 	.word	0x58024400
 81051cc:	0810cf48 	.word	0x0810cf48

081051d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81051d0:	b480      	push	{r7}
 81051d2:	b089      	sub	sp, #36	; 0x24
 81051d4:	af00      	add	r7, sp, #0
 81051d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81051d8:	4ba1      	ldr	r3, [pc, #644]	; (8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051dc:	f003 0303 	and.w	r3, r3, #3
 81051e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81051e2:	4b9f      	ldr	r3, [pc, #636]	; (8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051e6:	0b1b      	lsrs	r3, r3, #12
 81051e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81051ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81051ee:	4b9c      	ldr	r3, [pc, #624]	; (8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051f2:	091b      	lsrs	r3, r3, #4
 81051f4:	f003 0301 	and.w	r3, r3, #1
 81051f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81051fa:	4b99      	ldr	r3, [pc, #612]	; (8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81051fe:	08db      	lsrs	r3, r3, #3
 8105200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105204:	693a      	ldr	r2, [r7, #16]
 8105206:	fb02 f303 	mul.w	r3, r2, r3
 810520a:	ee07 3a90 	vmov	s15, r3
 810520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105212:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8105216:	697b      	ldr	r3, [r7, #20]
 8105218:	2b00      	cmp	r3, #0
 810521a:	f000 8111 	beq.w	8105440 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810521e:	69bb      	ldr	r3, [r7, #24]
 8105220:	2b02      	cmp	r3, #2
 8105222:	f000 8083 	beq.w	810532c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8105226:	69bb      	ldr	r3, [r7, #24]
 8105228:	2b02      	cmp	r3, #2
 810522a:	f200 80a1 	bhi.w	8105370 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810522e:	69bb      	ldr	r3, [r7, #24]
 8105230:	2b00      	cmp	r3, #0
 8105232:	d003      	beq.n	810523c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105234:	69bb      	ldr	r3, [r7, #24]
 8105236:	2b01      	cmp	r3, #1
 8105238:	d056      	beq.n	81052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810523a:	e099      	b.n	8105370 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810523c:	4b88      	ldr	r3, [pc, #544]	; (8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810523e:	681b      	ldr	r3, [r3, #0]
 8105240:	f003 0320 	and.w	r3, r3, #32
 8105244:	2b00      	cmp	r3, #0
 8105246:	d02d      	beq.n	81052a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105248:	4b85      	ldr	r3, [pc, #532]	; (8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810524a:	681b      	ldr	r3, [r3, #0]
 810524c:	08db      	lsrs	r3, r3, #3
 810524e:	f003 0303 	and.w	r3, r3, #3
 8105252:	4a84      	ldr	r2, [pc, #528]	; (8105464 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8105254:	fa22 f303 	lsr.w	r3, r2, r3
 8105258:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810525a:	68bb      	ldr	r3, [r7, #8]
 810525c:	ee07 3a90 	vmov	s15, r3
 8105260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105264:	697b      	ldr	r3, [r7, #20]
 8105266:	ee07 3a90 	vmov	s15, r3
 810526a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810526e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105272:	4b7b      	ldr	r3, [pc, #492]	; (8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810527a:	ee07 3a90 	vmov	s15, r3
 810527e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105282:	ed97 6a03 	vldr	s12, [r7, #12]
 8105286:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810528a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810528e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810529a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810529e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81052a2:	e087      	b.n	81053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81052a4:	697b      	ldr	r3, [r7, #20]
 81052a6:	ee07 3a90 	vmov	s15, r3
 81052aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810546c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81052b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81052b6:	4b6a      	ldr	r3, [pc, #424]	; (8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81052ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81052be:	ee07 3a90 	vmov	s15, r3
 81052c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81052ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81052ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81052da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81052e6:	e065      	b.n	81053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81052e8:	697b      	ldr	r3, [r7, #20]
 81052ea:	ee07 3a90 	vmov	s15, r3
 81052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105470 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81052f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81052fa:	4b59      	ldr	r3, [pc, #356]	; (8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81052fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105302:	ee07 3a90 	vmov	s15, r3
 8105306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810530a:	ed97 6a03 	vldr	s12, [r7, #12]
 810530e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810531a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810531e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810532a:	e043      	b.n	81053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810532c:	697b      	ldr	r3, [r7, #20]
 810532e:	ee07 3a90 	vmov	s15, r3
 8105332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105336:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810533a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810533e:	4b48      	ldr	r3, [pc, #288]	; (8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105346:	ee07 3a90 	vmov	s15, r3
 810534a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810534e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105352:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810535a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810535e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105366:	ee67 7a27 	vmul.f32	s15, s14, s15
 810536a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810536e:	e021      	b.n	81053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105370:	697b      	ldr	r3, [r7, #20]
 8105372:	ee07 3a90 	vmov	s15, r3
 8105376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810537a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105470 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810537e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105382:	4b37      	ldr	r3, [pc, #220]	; (8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810538a:	ee07 3a90 	vmov	s15, r3
 810538e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105392:	ed97 6a03 	vldr	s12, [r7, #12]
 8105396:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810539a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810539e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81053a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81053a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81053ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81053b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81053b4:	4b2a      	ldr	r3, [pc, #168]	; (8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81053b8:	0a5b      	lsrs	r3, r3, #9
 81053ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81053be:	ee07 3a90 	vmov	s15, r3
 81053c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81053ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 81053ce:	edd7 6a07 	vldr	s13, [r7, #28]
 81053d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81053d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81053da:	ee17 2a90 	vmov	r2, s15
 81053de:	687b      	ldr	r3, [r7, #4]
 81053e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81053e2:	4b1f      	ldr	r3, [pc, #124]	; (8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81053e6:	0c1b      	lsrs	r3, r3, #16
 81053e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81053ec:	ee07 3a90 	vmov	s15, r3
 81053f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81053f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81053fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8105400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105408:	ee17 2a90 	vmov	r2, s15
 810540c:	687b      	ldr	r3, [r7, #4]
 810540e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8105410:	4b13      	ldr	r3, [pc, #76]	; (8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105414:	0e1b      	lsrs	r3, r3, #24
 8105416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810541a:	ee07 3a90 	vmov	s15, r3
 810541e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105422:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105426:	ee37 7a87 	vadd.f32	s14, s15, s14
 810542a:	edd7 6a07 	vldr	s13, [r7, #28]
 810542e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105436:	ee17 2a90 	vmov	r2, s15
 810543a:	687b      	ldr	r3, [r7, #4]
 810543c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810543e:	e008      	b.n	8105452 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105440:	687b      	ldr	r3, [r7, #4]
 8105442:	2200      	movs	r2, #0
 8105444:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105446:	687b      	ldr	r3, [r7, #4]
 8105448:	2200      	movs	r2, #0
 810544a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810544c:	687b      	ldr	r3, [r7, #4]
 810544e:	2200      	movs	r2, #0
 8105450:	609a      	str	r2, [r3, #8]
}
 8105452:	bf00      	nop
 8105454:	3724      	adds	r7, #36	; 0x24
 8105456:	46bd      	mov	sp, r7
 8105458:	f85d 7b04 	ldr.w	r7, [sp], #4
 810545c:	4770      	bx	lr
 810545e:	bf00      	nop
 8105460:	58024400 	.word	0x58024400
 8105464:	03d09000 	.word	0x03d09000
 8105468:	46000000 	.word	0x46000000
 810546c:	4c742400 	.word	0x4c742400
 8105470:	4a742400 	.word	0x4a742400
 8105474:	4af42400 	.word	0x4af42400

08105478 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8105478:	b480      	push	{r7}
 810547a:	b089      	sub	sp, #36	; 0x24
 810547c:	af00      	add	r7, sp, #0
 810547e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105480:	4ba1      	ldr	r3, [pc, #644]	; (8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105484:	f003 0303 	and.w	r3, r3, #3
 8105488:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810548a:	4b9f      	ldr	r3, [pc, #636]	; (8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810548e:	0d1b      	lsrs	r3, r3, #20
 8105490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105494:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105496:	4b9c      	ldr	r3, [pc, #624]	; (8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810549a:	0a1b      	lsrs	r3, r3, #8
 810549c:	f003 0301 	and.w	r3, r3, #1
 81054a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81054a2:	4b99      	ldr	r3, [pc, #612]	; (8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81054a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81054a6:	08db      	lsrs	r3, r3, #3
 81054a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81054ac:	693a      	ldr	r2, [r7, #16]
 81054ae:	fb02 f303 	mul.w	r3, r2, r3
 81054b2:	ee07 3a90 	vmov	s15, r3
 81054b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81054be:	697b      	ldr	r3, [r7, #20]
 81054c0:	2b00      	cmp	r3, #0
 81054c2:	f000 8111 	beq.w	81056e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81054c6:	69bb      	ldr	r3, [r7, #24]
 81054c8:	2b02      	cmp	r3, #2
 81054ca:	f000 8083 	beq.w	81055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81054ce:	69bb      	ldr	r3, [r7, #24]
 81054d0:	2b02      	cmp	r3, #2
 81054d2:	f200 80a1 	bhi.w	8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81054d6:	69bb      	ldr	r3, [r7, #24]
 81054d8:	2b00      	cmp	r3, #0
 81054da:	d003      	beq.n	81054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81054dc:	69bb      	ldr	r3, [r7, #24]
 81054de:	2b01      	cmp	r3, #1
 81054e0:	d056      	beq.n	8105590 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81054e2:	e099      	b.n	8105618 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81054e4:	4b88      	ldr	r3, [pc, #544]	; (8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81054e6:	681b      	ldr	r3, [r3, #0]
 81054e8:	f003 0320 	and.w	r3, r3, #32
 81054ec:	2b00      	cmp	r3, #0
 81054ee:	d02d      	beq.n	810554c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81054f0:	4b85      	ldr	r3, [pc, #532]	; (8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81054f2:	681b      	ldr	r3, [r3, #0]
 81054f4:	08db      	lsrs	r3, r3, #3
 81054f6:	f003 0303 	and.w	r3, r3, #3
 81054fa:	4a84      	ldr	r2, [pc, #528]	; (810570c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81054fc:	fa22 f303 	lsr.w	r3, r2, r3
 8105500:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105502:	68bb      	ldr	r3, [r7, #8]
 8105504:	ee07 3a90 	vmov	s15, r3
 8105508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810550c:	697b      	ldr	r3, [r7, #20]
 810550e:	ee07 3a90 	vmov	s15, r3
 8105512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810551a:	4b7b      	ldr	r3, [pc, #492]	; (8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810551e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105522:	ee07 3a90 	vmov	s15, r3
 8105526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810552a:	ed97 6a03 	vldr	s12, [r7, #12]
 810552e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810553a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810553e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105546:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810554a:	e087      	b.n	810565c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810554c:	697b      	ldr	r3, [r7, #20]
 810554e:	ee07 3a90 	vmov	s15, r3
 8105552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105556:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105714 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810555a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810555e:	4b6a      	ldr	r3, [pc, #424]	; (8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105566:	ee07 3a90 	vmov	s15, r3
 810556a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810556e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105572:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810557a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810557e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105586:	ee67 7a27 	vmul.f32	s15, s14, s15
 810558a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810558e:	e065      	b.n	810565c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105590:	697b      	ldr	r3, [r7, #20]
 8105592:	ee07 3a90 	vmov	s15, r3
 8105596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810559a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105718 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810559e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055a2:	4b59      	ldr	r3, [pc, #356]	; (8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81055a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055aa:	ee07 3a90 	vmov	s15, r3
 81055ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81055b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81055ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81055c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81055ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81055d2:	e043      	b.n	810565c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81055d4:	697b      	ldr	r3, [r7, #20]
 81055d6:	ee07 3a90 	vmov	s15, r3
 81055da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810571c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81055e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055e6:	4b48      	ldr	r3, [pc, #288]	; (8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81055ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055ee:	ee07 3a90 	vmov	s15, r3
 81055f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81055fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81055fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810560a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810560e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105616:	e021      	b.n	810565c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105618:	697b      	ldr	r3, [r7, #20]
 810561a:	ee07 3a90 	vmov	s15, r3
 810561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105622:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105718 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810562a:	4b37      	ldr	r3, [pc, #220]	; (8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810562e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105632:	ee07 3a90 	vmov	s15, r3
 8105636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810563a:	ed97 6a03 	vldr	s12, [r7, #12]
 810563e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810564a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810564e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810565a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 810565c:	4b2a      	ldr	r3, [pc, #168]	; (8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105660:	0a5b      	lsrs	r3, r3, #9
 8105662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105666:	ee07 3a90 	vmov	s15, r3
 810566a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810566e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105672:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105676:	edd7 6a07 	vldr	s13, [r7, #28]
 810567a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810567e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105682:	ee17 2a90 	vmov	r2, s15
 8105686:	687b      	ldr	r3, [r7, #4]
 8105688:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810568a:	4b1f      	ldr	r3, [pc, #124]	; (8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810568e:	0c1b      	lsrs	r3, r3, #16
 8105690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105694:	ee07 3a90 	vmov	s15, r3
 8105698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810569c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81056a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81056a4:	edd7 6a07 	vldr	s13, [r7, #28]
 81056a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81056ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81056b0:	ee17 2a90 	vmov	r2, s15
 81056b4:	687b      	ldr	r3, [r7, #4]
 81056b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81056b8:	4b13      	ldr	r3, [pc, #76]	; (8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81056bc:	0e1b      	lsrs	r3, r3, #24
 81056be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81056c2:	ee07 3a90 	vmov	s15, r3
 81056c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81056ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 81056d2:	edd7 6a07 	vldr	s13, [r7, #28]
 81056d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81056da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81056de:	ee17 2a90 	vmov	r2, s15
 81056e2:	687b      	ldr	r3, [r7, #4]
 81056e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81056e6:	e008      	b.n	81056fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81056e8:	687b      	ldr	r3, [r7, #4]
 81056ea:	2200      	movs	r2, #0
 81056ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81056ee:	687b      	ldr	r3, [r7, #4]
 81056f0:	2200      	movs	r2, #0
 81056f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81056f4:	687b      	ldr	r3, [r7, #4]
 81056f6:	2200      	movs	r2, #0
 81056f8:	609a      	str	r2, [r3, #8]
}
 81056fa:	bf00      	nop
 81056fc:	3724      	adds	r7, #36	; 0x24
 81056fe:	46bd      	mov	sp, r7
 8105700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105704:	4770      	bx	lr
 8105706:	bf00      	nop
 8105708:	58024400 	.word	0x58024400
 810570c:	03d09000 	.word	0x03d09000
 8105710:	46000000 	.word	0x46000000
 8105714:	4c742400 	.word	0x4c742400
 8105718:	4a742400 	.word	0x4a742400
 810571c:	4af42400 	.word	0x4af42400

08105720 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105720:	b580      	push	{r7, lr}
 8105722:	b084      	sub	sp, #16
 8105724:	af00      	add	r7, sp, #0
 8105726:	6078      	str	r0, [r7, #4]
 8105728:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810572a:	2300      	movs	r3, #0
 810572c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810572e:	4b54      	ldr	r3, [pc, #336]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 8105730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105732:	f003 0303 	and.w	r3, r3, #3
 8105736:	2b03      	cmp	r3, #3
 8105738:	d101      	bne.n	810573e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810573a:	2301      	movs	r3, #1
 810573c:	e09b      	b.n	8105876 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810573e:	4b50      	ldr	r3, [pc, #320]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 8105740:	681b      	ldr	r3, [r3, #0]
 8105742:	4a4f      	ldr	r2, [pc, #316]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 8105744:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8105748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810574a:	f7fc fee7 	bl	810251c <HAL_GetTick>
 810574e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105750:	e008      	b.n	8105764 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105752:	f7fc fee3 	bl	810251c <HAL_GetTick>
 8105756:	4602      	mov	r2, r0
 8105758:	68bb      	ldr	r3, [r7, #8]
 810575a:	1ad3      	subs	r3, r2, r3
 810575c:	2b02      	cmp	r3, #2
 810575e:	d901      	bls.n	8105764 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105760:	2303      	movs	r3, #3
 8105762:	e088      	b.n	8105876 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105764:	4b46      	ldr	r3, [pc, #280]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 8105766:	681b      	ldr	r3, [r3, #0]
 8105768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810576c:	2b00      	cmp	r3, #0
 810576e:	d1f0      	bne.n	8105752 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105770:	4b43      	ldr	r3, [pc, #268]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 8105772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105774:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8105778:	687b      	ldr	r3, [r7, #4]
 810577a:	681b      	ldr	r3, [r3, #0]
 810577c:	031b      	lsls	r3, r3, #12
 810577e:	4940      	ldr	r1, [pc, #256]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 8105780:	4313      	orrs	r3, r2
 8105782:	628b      	str	r3, [r1, #40]	; 0x28
 8105784:	687b      	ldr	r3, [r7, #4]
 8105786:	685b      	ldr	r3, [r3, #4]
 8105788:	3b01      	subs	r3, #1
 810578a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810578e:	687b      	ldr	r3, [r7, #4]
 8105790:	689b      	ldr	r3, [r3, #8]
 8105792:	3b01      	subs	r3, #1
 8105794:	025b      	lsls	r3, r3, #9
 8105796:	b29b      	uxth	r3, r3
 8105798:	431a      	orrs	r2, r3
 810579a:	687b      	ldr	r3, [r7, #4]
 810579c:	68db      	ldr	r3, [r3, #12]
 810579e:	3b01      	subs	r3, #1
 81057a0:	041b      	lsls	r3, r3, #16
 81057a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81057a6:	431a      	orrs	r2, r3
 81057a8:	687b      	ldr	r3, [r7, #4]
 81057aa:	691b      	ldr	r3, [r3, #16]
 81057ac:	3b01      	subs	r3, #1
 81057ae:	061b      	lsls	r3, r3, #24
 81057b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81057b4:	4932      	ldr	r1, [pc, #200]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 81057b6:	4313      	orrs	r3, r2
 81057b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81057ba:	4b31      	ldr	r3, [pc, #196]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 81057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81057c2:	687b      	ldr	r3, [r7, #4]
 81057c4:	695b      	ldr	r3, [r3, #20]
 81057c6:	492e      	ldr	r1, [pc, #184]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 81057c8:	4313      	orrs	r3, r2
 81057ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81057cc:	4b2c      	ldr	r3, [pc, #176]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 81057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057d0:	f023 0220 	bic.w	r2, r3, #32
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	699b      	ldr	r3, [r3, #24]
 81057d8:	4929      	ldr	r1, [pc, #164]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 81057da:	4313      	orrs	r3, r2
 81057dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81057de:	4b28      	ldr	r3, [pc, #160]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 81057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057e2:	4a27      	ldr	r2, [pc, #156]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 81057e4:	f023 0310 	bic.w	r3, r3, #16
 81057e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81057ea:	4b25      	ldr	r3, [pc, #148]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 81057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81057ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81057f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81057f6:	687a      	ldr	r2, [r7, #4]
 81057f8:	69d2      	ldr	r2, [r2, #28]
 81057fa:	00d2      	lsls	r2, r2, #3
 81057fc:	4920      	ldr	r1, [pc, #128]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 81057fe:	4313      	orrs	r3, r2
 8105800:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105802:	4b1f      	ldr	r3, [pc, #124]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 8105804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105806:	4a1e      	ldr	r2, [pc, #120]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 8105808:	f043 0310 	orr.w	r3, r3, #16
 810580c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810580e:	683b      	ldr	r3, [r7, #0]
 8105810:	2b00      	cmp	r3, #0
 8105812:	d106      	bne.n	8105822 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105814:	4b1a      	ldr	r3, [pc, #104]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 8105816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105818:	4a19      	ldr	r2, [pc, #100]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 810581a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810581e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105820:	e00f      	b.n	8105842 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105822:	683b      	ldr	r3, [r7, #0]
 8105824:	2b01      	cmp	r3, #1
 8105826:	d106      	bne.n	8105836 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105828:	4b15      	ldr	r3, [pc, #84]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 810582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810582c:	4a14      	ldr	r2, [pc, #80]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 810582e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105832:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105834:	e005      	b.n	8105842 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105836:	4b12      	ldr	r3, [pc, #72]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 8105838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810583a:	4a11      	ldr	r2, [pc, #68]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 810583c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105840:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8105842:	4b0f      	ldr	r3, [pc, #60]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 8105844:	681b      	ldr	r3, [r3, #0]
 8105846:	4a0e      	ldr	r2, [pc, #56]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 8105848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810584c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810584e:	f7fc fe65 	bl	810251c <HAL_GetTick>
 8105852:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105854:	e008      	b.n	8105868 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105856:	f7fc fe61 	bl	810251c <HAL_GetTick>
 810585a:	4602      	mov	r2, r0
 810585c:	68bb      	ldr	r3, [r7, #8]
 810585e:	1ad3      	subs	r3, r2, r3
 8105860:	2b02      	cmp	r3, #2
 8105862:	d901      	bls.n	8105868 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105864:	2303      	movs	r3, #3
 8105866:	e006      	b.n	8105876 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105868:	4b05      	ldr	r3, [pc, #20]	; (8105880 <RCCEx_PLL2_Config+0x160>)
 810586a:	681b      	ldr	r3, [r3, #0]
 810586c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105870:	2b00      	cmp	r3, #0
 8105872:	d0f0      	beq.n	8105856 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105874:	7bfb      	ldrb	r3, [r7, #15]
}
 8105876:	4618      	mov	r0, r3
 8105878:	3710      	adds	r7, #16
 810587a:	46bd      	mov	sp, r7
 810587c:	bd80      	pop	{r7, pc}
 810587e:	bf00      	nop
 8105880:	58024400 	.word	0x58024400

08105884 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105884:	b580      	push	{r7, lr}
 8105886:	b084      	sub	sp, #16
 8105888:	af00      	add	r7, sp, #0
 810588a:	6078      	str	r0, [r7, #4]
 810588c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810588e:	2300      	movs	r3, #0
 8105890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105892:	4b54      	ldr	r3, [pc, #336]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 8105894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105896:	f003 0303 	and.w	r3, r3, #3
 810589a:	2b03      	cmp	r3, #3
 810589c:	d101      	bne.n	81058a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810589e:	2301      	movs	r3, #1
 81058a0:	e09b      	b.n	81059da <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81058a2:	4b50      	ldr	r3, [pc, #320]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 81058a4:	681b      	ldr	r3, [r3, #0]
 81058a6:	4a4f      	ldr	r2, [pc, #316]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 81058a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81058ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81058ae:	f7fc fe35 	bl	810251c <HAL_GetTick>
 81058b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81058b4:	e008      	b.n	81058c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81058b6:	f7fc fe31 	bl	810251c <HAL_GetTick>
 81058ba:	4602      	mov	r2, r0
 81058bc:	68bb      	ldr	r3, [r7, #8]
 81058be:	1ad3      	subs	r3, r2, r3
 81058c0:	2b02      	cmp	r3, #2
 81058c2:	d901      	bls.n	81058c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81058c4:	2303      	movs	r3, #3
 81058c6:	e088      	b.n	81059da <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81058c8:	4b46      	ldr	r3, [pc, #280]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 81058ca:	681b      	ldr	r3, [r3, #0]
 81058cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81058d0:	2b00      	cmp	r3, #0
 81058d2:	d1f0      	bne.n	81058b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81058d4:	4b43      	ldr	r3, [pc, #268]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 81058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81058d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81058dc:	687b      	ldr	r3, [r7, #4]
 81058de:	681b      	ldr	r3, [r3, #0]
 81058e0:	051b      	lsls	r3, r3, #20
 81058e2:	4940      	ldr	r1, [pc, #256]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 81058e4:	4313      	orrs	r3, r2
 81058e6:	628b      	str	r3, [r1, #40]	; 0x28
 81058e8:	687b      	ldr	r3, [r7, #4]
 81058ea:	685b      	ldr	r3, [r3, #4]
 81058ec:	3b01      	subs	r3, #1
 81058ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81058f2:	687b      	ldr	r3, [r7, #4]
 81058f4:	689b      	ldr	r3, [r3, #8]
 81058f6:	3b01      	subs	r3, #1
 81058f8:	025b      	lsls	r3, r3, #9
 81058fa:	b29b      	uxth	r3, r3
 81058fc:	431a      	orrs	r2, r3
 81058fe:	687b      	ldr	r3, [r7, #4]
 8105900:	68db      	ldr	r3, [r3, #12]
 8105902:	3b01      	subs	r3, #1
 8105904:	041b      	lsls	r3, r3, #16
 8105906:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810590a:	431a      	orrs	r2, r3
 810590c:	687b      	ldr	r3, [r7, #4]
 810590e:	691b      	ldr	r3, [r3, #16]
 8105910:	3b01      	subs	r3, #1
 8105912:	061b      	lsls	r3, r3, #24
 8105914:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105918:	4932      	ldr	r1, [pc, #200]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 810591a:	4313      	orrs	r3, r2
 810591c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810591e:	4b31      	ldr	r3, [pc, #196]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 8105920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105922:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8105926:	687b      	ldr	r3, [r7, #4]
 8105928:	695b      	ldr	r3, [r3, #20]
 810592a:	492e      	ldr	r1, [pc, #184]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 810592c:	4313      	orrs	r3, r2
 810592e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105930:	4b2c      	ldr	r3, [pc, #176]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 8105932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105934:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8105938:	687b      	ldr	r3, [r7, #4]
 810593a:	699b      	ldr	r3, [r3, #24]
 810593c:	4929      	ldr	r1, [pc, #164]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 810593e:	4313      	orrs	r3, r2
 8105940:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105942:	4b28      	ldr	r3, [pc, #160]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 8105944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105946:	4a27      	ldr	r2, [pc, #156]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 8105948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810594c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810594e:	4b25      	ldr	r3, [pc, #148]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 8105950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105956:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810595a:	687a      	ldr	r2, [r7, #4]
 810595c:	69d2      	ldr	r2, [r2, #28]
 810595e:	00d2      	lsls	r2, r2, #3
 8105960:	4920      	ldr	r1, [pc, #128]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 8105962:	4313      	orrs	r3, r2
 8105964:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105966:	4b1f      	ldr	r3, [pc, #124]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 8105968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810596a:	4a1e      	ldr	r2, [pc, #120]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 810596c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105970:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105972:	683b      	ldr	r3, [r7, #0]
 8105974:	2b00      	cmp	r3, #0
 8105976:	d106      	bne.n	8105986 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105978:	4b1a      	ldr	r3, [pc, #104]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 810597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810597c:	4a19      	ldr	r2, [pc, #100]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 810597e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8105982:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105984:	e00f      	b.n	81059a6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105986:	683b      	ldr	r3, [r7, #0]
 8105988:	2b01      	cmp	r3, #1
 810598a:	d106      	bne.n	810599a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810598c:	4b15      	ldr	r3, [pc, #84]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 810598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105990:	4a14      	ldr	r2, [pc, #80]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 8105992:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105996:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105998:	e005      	b.n	81059a6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810599a:	4b12      	ldr	r3, [pc, #72]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 810599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810599e:	4a11      	ldr	r2, [pc, #68]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 81059a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81059a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81059a6:	4b0f      	ldr	r3, [pc, #60]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 81059a8:	681b      	ldr	r3, [r3, #0]
 81059aa:	4a0e      	ldr	r2, [pc, #56]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 81059ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81059b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81059b2:	f7fc fdb3 	bl	810251c <HAL_GetTick>
 81059b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81059b8:	e008      	b.n	81059cc <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81059ba:	f7fc fdaf 	bl	810251c <HAL_GetTick>
 81059be:	4602      	mov	r2, r0
 81059c0:	68bb      	ldr	r3, [r7, #8]
 81059c2:	1ad3      	subs	r3, r2, r3
 81059c4:	2b02      	cmp	r3, #2
 81059c6:	d901      	bls.n	81059cc <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81059c8:	2303      	movs	r3, #3
 81059ca:	e006      	b.n	81059da <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81059cc:	4b05      	ldr	r3, [pc, #20]	; (81059e4 <RCCEx_PLL3_Config+0x160>)
 81059ce:	681b      	ldr	r3, [r3, #0]
 81059d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81059d4:	2b00      	cmp	r3, #0
 81059d6:	d0f0      	beq.n	81059ba <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 81059da:	4618      	mov	r0, r3
 81059dc:	3710      	adds	r7, #16
 81059de:	46bd      	mov	sp, r7
 81059e0:	bd80      	pop	{r7, pc}
 81059e2:	bf00      	nop
 81059e4:	58024400 	.word	0x58024400

081059e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81059e8:	b580      	push	{r7, lr}
 81059ea:	b082      	sub	sp, #8
 81059ec:	af00      	add	r7, sp, #0
 81059ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81059f0:	687b      	ldr	r3, [r7, #4]
 81059f2:	2b00      	cmp	r3, #0
 81059f4:	d101      	bne.n	81059fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81059f6:	2301      	movs	r3, #1
 81059f8:	e049      	b.n	8105a8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81059fa:	687b      	ldr	r3, [r7, #4]
 81059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105a00:	b2db      	uxtb	r3, r3
 8105a02:	2b00      	cmp	r3, #0
 8105a04:	d106      	bne.n	8105a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105a06:	687b      	ldr	r3, [r7, #4]
 8105a08:	2200      	movs	r2, #0
 8105a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8105a0e:	6878      	ldr	r0, [r7, #4]
 8105a10:	f7fc fad4 	bl	8101fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	2202      	movs	r2, #2
 8105a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	681a      	ldr	r2, [r3, #0]
 8105a20:	687b      	ldr	r3, [r7, #4]
 8105a22:	3304      	adds	r3, #4
 8105a24:	4619      	mov	r1, r3
 8105a26:	4610      	mov	r0, r2
 8105a28:	f000 fd72 	bl	8106510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	2201      	movs	r2, #1
 8105a30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105a34:	687b      	ldr	r3, [r7, #4]
 8105a36:	2201      	movs	r2, #1
 8105a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105a3c:	687b      	ldr	r3, [r7, #4]
 8105a3e:	2201      	movs	r2, #1
 8105a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105a44:	687b      	ldr	r3, [r7, #4]
 8105a46:	2201      	movs	r2, #1
 8105a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105a4c:	687b      	ldr	r3, [r7, #4]
 8105a4e:	2201      	movs	r2, #1
 8105a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105a54:	687b      	ldr	r3, [r7, #4]
 8105a56:	2201      	movs	r2, #1
 8105a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	2201      	movs	r2, #1
 8105a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105a64:	687b      	ldr	r3, [r7, #4]
 8105a66:	2201      	movs	r2, #1
 8105a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105a6c:	687b      	ldr	r3, [r7, #4]
 8105a6e:	2201      	movs	r2, #1
 8105a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	2201      	movs	r2, #1
 8105a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	2201      	movs	r2, #1
 8105a80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8105a84:	687b      	ldr	r3, [r7, #4]
 8105a86:	2201      	movs	r2, #1
 8105a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105a8c:	2300      	movs	r3, #0
}
 8105a8e:	4618      	mov	r0, r3
 8105a90:	3708      	adds	r7, #8
 8105a92:	46bd      	mov	sp, r7
 8105a94:	bd80      	pop	{r7, pc}
	...

08105a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8105a98:	b480      	push	{r7}
 8105a9a:	b085      	sub	sp, #20
 8105a9c:	af00      	add	r7, sp, #0
 8105a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8105aa0:	687b      	ldr	r3, [r7, #4]
 8105aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105aa6:	b2db      	uxtb	r3, r3
 8105aa8:	2b01      	cmp	r3, #1
 8105aaa:	d001      	beq.n	8105ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8105aac:	2301      	movs	r3, #1
 8105aae:	e054      	b.n	8105b5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105ab0:	687b      	ldr	r3, [r7, #4]
 8105ab2:	2202      	movs	r2, #2
 8105ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	681b      	ldr	r3, [r3, #0]
 8105abc:	68da      	ldr	r2, [r3, #12]
 8105abe:	687b      	ldr	r3, [r7, #4]
 8105ac0:	681b      	ldr	r3, [r3, #0]
 8105ac2:	f042 0201 	orr.w	r2, r2, #1
 8105ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105ac8:	687b      	ldr	r3, [r7, #4]
 8105aca:	681b      	ldr	r3, [r3, #0]
 8105acc:	4a26      	ldr	r2, [pc, #152]	; (8105b68 <HAL_TIM_Base_Start_IT+0xd0>)
 8105ace:	4293      	cmp	r3, r2
 8105ad0:	d022      	beq.n	8105b18 <HAL_TIM_Base_Start_IT+0x80>
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	681b      	ldr	r3, [r3, #0]
 8105ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105ada:	d01d      	beq.n	8105b18 <HAL_TIM_Base_Start_IT+0x80>
 8105adc:	687b      	ldr	r3, [r7, #4]
 8105ade:	681b      	ldr	r3, [r3, #0]
 8105ae0:	4a22      	ldr	r2, [pc, #136]	; (8105b6c <HAL_TIM_Base_Start_IT+0xd4>)
 8105ae2:	4293      	cmp	r3, r2
 8105ae4:	d018      	beq.n	8105b18 <HAL_TIM_Base_Start_IT+0x80>
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	681b      	ldr	r3, [r3, #0]
 8105aea:	4a21      	ldr	r2, [pc, #132]	; (8105b70 <HAL_TIM_Base_Start_IT+0xd8>)
 8105aec:	4293      	cmp	r3, r2
 8105aee:	d013      	beq.n	8105b18 <HAL_TIM_Base_Start_IT+0x80>
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	681b      	ldr	r3, [r3, #0]
 8105af4:	4a1f      	ldr	r2, [pc, #124]	; (8105b74 <HAL_TIM_Base_Start_IT+0xdc>)
 8105af6:	4293      	cmp	r3, r2
 8105af8:	d00e      	beq.n	8105b18 <HAL_TIM_Base_Start_IT+0x80>
 8105afa:	687b      	ldr	r3, [r7, #4]
 8105afc:	681b      	ldr	r3, [r3, #0]
 8105afe:	4a1e      	ldr	r2, [pc, #120]	; (8105b78 <HAL_TIM_Base_Start_IT+0xe0>)
 8105b00:	4293      	cmp	r3, r2
 8105b02:	d009      	beq.n	8105b18 <HAL_TIM_Base_Start_IT+0x80>
 8105b04:	687b      	ldr	r3, [r7, #4]
 8105b06:	681b      	ldr	r3, [r3, #0]
 8105b08:	4a1c      	ldr	r2, [pc, #112]	; (8105b7c <HAL_TIM_Base_Start_IT+0xe4>)
 8105b0a:	4293      	cmp	r3, r2
 8105b0c:	d004      	beq.n	8105b18 <HAL_TIM_Base_Start_IT+0x80>
 8105b0e:	687b      	ldr	r3, [r7, #4]
 8105b10:	681b      	ldr	r3, [r3, #0]
 8105b12:	4a1b      	ldr	r2, [pc, #108]	; (8105b80 <HAL_TIM_Base_Start_IT+0xe8>)
 8105b14:	4293      	cmp	r3, r2
 8105b16:	d115      	bne.n	8105b44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105b18:	687b      	ldr	r3, [r7, #4]
 8105b1a:	681b      	ldr	r3, [r3, #0]
 8105b1c:	689a      	ldr	r2, [r3, #8]
 8105b1e:	4b19      	ldr	r3, [pc, #100]	; (8105b84 <HAL_TIM_Base_Start_IT+0xec>)
 8105b20:	4013      	ands	r3, r2
 8105b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105b24:	68fb      	ldr	r3, [r7, #12]
 8105b26:	2b06      	cmp	r3, #6
 8105b28:	d015      	beq.n	8105b56 <HAL_TIM_Base_Start_IT+0xbe>
 8105b2a:	68fb      	ldr	r3, [r7, #12]
 8105b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105b30:	d011      	beq.n	8105b56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8105b32:	687b      	ldr	r3, [r7, #4]
 8105b34:	681b      	ldr	r3, [r3, #0]
 8105b36:	681a      	ldr	r2, [r3, #0]
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	681b      	ldr	r3, [r3, #0]
 8105b3c:	f042 0201 	orr.w	r2, r2, #1
 8105b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105b42:	e008      	b.n	8105b56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8105b44:	687b      	ldr	r3, [r7, #4]
 8105b46:	681b      	ldr	r3, [r3, #0]
 8105b48:	681a      	ldr	r2, [r3, #0]
 8105b4a:	687b      	ldr	r3, [r7, #4]
 8105b4c:	681b      	ldr	r3, [r3, #0]
 8105b4e:	f042 0201 	orr.w	r2, r2, #1
 8105b52:	601a      	str	r2, [r3, #0]
 8105b54:	e000      	b.n	8105b58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105b56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8105b58:	2300      	movs	r3, #0
}
 8105b5a:	4618      	mov	r0, r3
 8105b5c:	3714      	adds	r7, #20
 8105b5e:	46bd      	mov	sp, r7
 8105b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b64:	4770      	bx	lr
 8105b66:	bf00      	nop
 8105b68:	40010000 	.word	0x40010000
 8105b6c:	40000400 	.word	0x40000400
 8105b70:	40000800 	.word	0x40000800
 8105b74:	40000c00 	.word	0x40000c00
 8105b78:	40010400 	.word	0x40010400
 8105b7c:	40001800 	.word	0x40001800
 8105b80:	40014000 	.word	0x40014000
 8105b84:	00010007 	.word	0x00010007

08105b88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8105b88:	b580      	push	{r7, lr}
 8105b8a:	b082      	sub	sp, #8
 8105b8c:	af00      	add	r7, sp, #0
 8105b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	2b00      	cmp	r3, #0
 8105b94:	d101      	bne.n	8105b9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8105b96:	2301      	movs	r3, #1
 8105b98:	e049      	b.n	8105c2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105b9a:	687b      	ldr	r3, [r7, #4]
 8105b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105ba0:	b2db      	uxtb	r3, r3
 8105ba2:	2b00      	cmp	r3, #0
 8105ba4:	d106      	bne.n	8105bb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105ba6:	687b      	ldr	r3, [r7, #4]
 8105ba8:	2200      	movs	r2, #0
 8105baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8105bae:	6878      	ldr	r0, [r7, #4]
 8105bb0:	f000 f841 	bl	8105c36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105bb4:	687b      	ldr	r3, [r7, #4]
 8105bb6:	2202      	movs	r2, #2
 8105bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105bbc:	687b      	ldr	r3, [r7, #4]
 8105bbe:	681a      	ldr	r2, [r3, #0]
 8105bc0:	687b      	ldr	r3, [r7, #4]
 8105bc2:	3304      	adds	r3, #4
 8105bc4:	4619      	mov	r1, r3
 8105bc6:	4610      	mov	r0, r2
 8105bc8:	f000 fca2 	bl	8106510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105bcc:	687b      	ldr	r3, [r7, #4]
 8105bce:	2201      	movs	r2, #1
 8105bd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105bd4:	687b      	ldr	r3, [r7, #4]
 8105bd6:	2201      	movs	r2, #1
 8105bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105bdc:	687b      	ldr	r3, [r7, #4]
 8105bde:	2201      	movs	r2, #1
 8105be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105be4:	687b      	ldr	r3, [r7, #4]
 8105be6:	2201      	movs	r2, #1
 8105be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105bec:	687b      	ldr	r3, [r7, #4]
 8105bee:	2201      	movs	r2, #1
 8105bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105bf4:	687b      	ldr	r3, [r7, #4]
 8105bf6:	2201      	movs	r2, #1
 8105bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	2201      	movs	r2, #1
 8105c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105c04:	687b      	ldr	r3, [r7, #4]
 8105c06:	2201      	movs	r2, #1
 8105c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105c0c:	687b      	ldr	r3, [r7, #4]
 8105c0e:	2201      	movs	r2, #1
 8105c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8105c14:	687b      	ldr	r3, [r7, #4]
 8105c16:	2201      	movs	r2, #1
 8105c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	2201      	movs	r2, #1
 8105c20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8105c24:	687b      	ldr	r3, [r7, #4]
 8105c26:	2201      	movs	r2, #1
 8105c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105c2c:	2300      	movs	r3, #0
}
 8105c2e:	4618      	mov	r0, r3
 8105c30:	3708      	adds	r7, #8
 8105c32:	46bd      	mov	sp, r7
 8105c34:	bd80      	pop	{r7, pc}

08105c36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8105c36:	b480      	push	{r7}
 8105c38:	b083      	sub	sp, #12
 8105c3a:	af00      	add	r7, sp, #0
 8105c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8105c3e:	bf00      	nop
 8105c40:	370c      	adds	r7, #12
 8105c42:	46bd      	mov	sp, r7
 8105c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c48:	4770      	bx	lr
	...

08105c4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8105c4c:	b580      	push	{r7, lr}
 8105c4e:	b084      	sub	sp, #16
 8105c50:	af00      	add	r7, sp, #0
 8105c52:	6078      	str	r0, [r7, #4]
 8105c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8105c56:	683b      	ldr	r3, [r7, #0]
 8105c58:	2b00      	cmp	r3, #0
 8105c5a:	d109      	bne.n	8105c70 <HAL_TIM_PWM_Start+0x24>
 8105c5c:	687b      	ldr	r3, [r7, #4]
 8105c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8105c62:	b2db      	uxtb	r3, r3
 8105c64:	2b01      	cmp	r3, #1
 8105c66:	bf14      	ite	ne
 8105c68:	2301      	movne	r3, #1
 8105c6a:	2300      	moveq	r3, #0
 8105c6c:	b2db      	uxtb	r3, r3
 8105c6e:	e03c      	b.n	8105cea <HAL_TIM_PWM_Start+0x9e>
 8105c70:	683b      	ldr	r3, [r7, #0]
 8105c72:	2b04      	cmp	r3, #4
 8105c74:	d109      	bne.n	8105c8a <HAL_TIM_PWM_Start+0x3e>
 8105c76:	687b      	ldr	r3, [r7, #4]
 8105c78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8105c7c:	b2db      	uxtb	r3, r3
 8105c7e:	2b01      	cmp	r3, #1
 8105c80:	bf14      	ite	ne
 8105c82:	2301      	movne	r3, #1
 8105c84:	2300      	moveq	r3, #0
 8105c86:	b2db      	uxtb	r3, r3
 8105c88:	e02f      	b.n	8105cea <HAL_TIM_PWM_Start+0x9e>
 8105c8a:	683b      	ldr	r3, [r7, #0]
 8105c8c:	2b08      	cmp	r3, #8
 8105c8e:	d109      	bne.n	8105ca4 <HAL_TIM_PWM_Start+0x58>
 8105c90:	687b      	ldr	r3, [r7, #4]
 8105c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105c96:	b2db      	uxtb	r3, r3
 8105c98:	2b01      	cmp	r3, #1
 8105c9a:	bf14      	ite	ne
 8105c9c:	2301      	movne	r3, #1
 8105c9e:	2300      	moveq	r3, #0
 8105ca0:	b2db      	uxtb	r3, r3
 8105ca2:	e022      	b.n	8105cea <HAL_TIM_PWM_Start+0x9e>
 8105ca4:	683b      	ldr	r3, [r7, #0]
 8105ca6:	2b0c      	cmp	r3, #12
 8105ca8:	d109      	bne.n	8105cbe <HAL_TIM_PWM_Start+0x72>
 8105caa:	687b      	ldr	r3, [r7, #4]
 8105cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105cb0:	b2db      	uxtb	r3, r3
 8105cb2:	2b01      	cmp	r3, #1
 8105cb4:	bf14      	ite	ne
 8105cb6:	2301      	movne	r3, #1
 8105cb8:	2300      	moveq	r3, #0
 8105cba:	b2db      	uxtb	r3, r3
 8105cbc:	e015      	b.n	8105cea <HAL_TIM_PWM_Start+0x9e>
 8105cbe:	683b      	ldr	r3, [r7, #0]
 8105cc0:	2b10      	cmp	r3, #16
 8105cc2:	d109      	bne.n	8105cd8 <HAL_TIM_PWM_Start+0x8c>
 8105cc4:	687b      	ldr	r3, [r7, #4]
 8105cc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8105cca:	b2db      	uxtb	r3, r3
 8105ccc:	2b01      	cmp	r3, #1
 8105cce:	bf14      	ite	ne
 8105cd0:	2301      	movne	r3, #1
 8105cd2:	2300      	moveq	r3, #0
 8105cd4:	b2db      	uxtb	r3, r3
 8105cd6:	e008      	b.n	8105cea <HAL_TIM_PWM_Start+0x9e>
 8105cd8:	687b      	ldr	r3, [r7, #4]
 8105cda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8105cde:	b2db      	uxtb	r3, r3
 8105ce0:	2b01      	cmp	r3, #1
 8105ce2:	bf14      	ite	ne
 8105ce4:	2301      	movne	r3, #1
 8105ce6:	2300      	moveq	r3, #0
 8105ce8:	b2db      	uxtb	r3, r3
 8105cea:	2b00      	cmp	r3, #0
 8105cec:	d001      	beq.n	8105cf2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8105cee:	2301      	movs	r3, #1
 8105cf0:	e0a1      	b.n	8105e36 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8105cf2:	683b      	ldr	r3, [r7, #0]
 8105cf4:	2b00      	cmp	r3, #0
 8105cf6:	d104      	bne.n	8105d02 <HAL_TIM_PWM_Start+0xb6>
 8105cf8:	687b      	ldr	r3, [r7, #4]
 8105cfa:	2202      	movs	r2, #2
 8105cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105d00:	e023      	b.n	8105d4a <HAL_TIM_PWM_Start+0xfe>
 8105d02:	683b      	ldr	r3, [r7, #0]
 8105d04:	2b04      	cmp	r3, #4
 8105d06:	d104      	bne.n	8105d12 <HAL_TIM_PWM_Start+0xc6>
 8105d08:	687b      	ldr	r3, [r7, #4]
 8105d0a:	2202      	movs	r2, #2
 8105d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105d10:	e01b      	b.n	8105d4a <HAL_TIM_PWM_Start+0xfe>
 8105d12:	683b      	ldr	r3, [r7, #0]
 8105d14:	2b08      	cmp	r3, #8
 8105d16:	d104      	bne.n	8105d22 <HAL_TIM_PWM_Start+0xd6>
 8105d18:	687b      	ldr	r3, [r7, #4]
 8105d1a:	2202      	movs	r2, #2
 8105d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105d20:	e013      	b.n	8105d4a <HAL_TIM_PWM_Start+0xfe>
 8105d22:	683b      	ldr	r3, [r7, #0]
 8105d24:	2b0c      	cmp	r3, #12
 8105d26:	d104      	bne.n	8105d32 <HAL_TIM_PWM_Start+0xe6>
 8105d28:	687b      	ldr	r3, [r7, #4]
 8105d2a:	2202      	movs	r2, #2
 8105d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105d30:	e00b      	b.n	8105d4a <HAL_TIM_PWM_Start+0xfe>
 8105d32:	683b      	ldr	r3, [r7, #0]
 8105d34:	2b10      	cmp	r3, #16
 8105d36:	d104      	bne.n	8105d42 <HAL_TIM_PWM_Start+0xf6>
 8105d38:	687b      	ldr	r3, [r7, #4]
 8105d3a:	2202      	movs	r2, #2
 8105d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105d40:	e003      	b.n	8105d4a <HAL_TIM_PWM_Start+0xfe>
 8105d42:	687b      	ldr	r3, [r7, #4]
 8105d44:	2202      	movs	r2, #2
 8105d46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	681b      	ldr	r3, [r3, #0]
 8105d4e:	2201      	movs	r2, #1
 8105d50:	6839      	ldr	r1, [r7, #0]
 8105d52:	4618      	mov	r0, r3
 8105d54:	f000 ffe8 	bl	8106d28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8105d58:	687b      	ldr	r3, [r7, #4]
 8105d5a:	681b      	ldr	r3, [r3, #0]
 8105d5c:	4a38      	ldr	r2, [pc, #224]	; (8105e40 <HAL_TIM_PWM_Start+0x1f4>)
 8105d5e:	4293      	cmp	r3, r2
 8105d60:	d013      	beq.n	8105d8a <HAL_TIM_PWM_Start+0x13e>
 8105d62:	687b      	ldr	r3, [r7, #4]
 8105d64:	681b      	ldr	r3, [r3, #0]
 8105d66:	4a37      	ldr	r2, [pc, #220]	; (8105e44 <HAL_TIM_PWM_Start+0x1f8>)
 8105d68:	4293      	cmp	r3, r2
 8105d6a:	d00e      	beq.n	8105d8a <HAL_TIM_PWM_Start+0x13e>
 8105d6c:	687b      	ldr	r3, [r7, #4]
 8105d6e:	681b      	ldr	r3, [r3, #0]
 8105d70:	4a35      	ldr	r2, [pc, #212]	; (8105e48 <HAL_TIM_PWM_Start+0x1fc>)
 8105d72:	4293      	cmp	r3, r2
 8105d74:	d009      	beq.n	8105d8a <HAL_TIM_PWM_Start+0x13e>
 8105d76:	687b      	ldr	r3, [r7, #4]
 8105d78:	681b      	ldr	r3, [r3, #0]
 8105d7a:	4a34      	ldr	r2, [pc, #208]	; (8105e4c <HAL_TIM_PWM_Start+0x200>)
 8105d7c:	4293      	cmp	r3, r2
 8105d7e:	d004      	beq.n	8105d8a <HAL_TIM_PWM_Start+0x13e>
 8105d80:	687b      	ldr	r3, [r7, #4]
 8105d82:	681b      	ldr	r3, [r3, #0]
 8105d84:	4a32      	ldr	r2, [pc, #200]	; (8105e50 <HAL_TIM_PWM_Start+0x204>)
 8105d86:	4293      	cmp	r3, r2
 8105d88:	d101      	bne.n	8105d8e <HAL_TIM_PWM_Start+0x142>
 8105d8a:	2301      	movs	r3, #1
 8105d8c:	e000      	b.n	8105d90 <HAL_TIM_PWM_Start+0x144>
 8105d8e:	2300      	movs	r3, #0
 8105d90:	2b00      	cmp	r3, #0
 8105d92:	d007      	beq.n	8105da4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	681b      	ldr	r3, [r3, #0]
 8105d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105d9a:	687b      	ldr	r3, [r7, #4]
 8105d9c:	681b      	ldr	r3, [r3, #0]
 8105d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8105da2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105da4:	687b      	ldr	r3, [r7, #4]
 8105da6:	681b      	ldr	r3, [r3, #0]
 8105da8:	4a25      	ldr	r2, [pc, #148]	; (8105e40 <HAL_TIM_PWM_Start+0x1f4>)
 8105daa:	4293      	cmp	r3, r2
 8105dac:	d022      	beq.n	8105df4 <HAL_TIM_PWM_Start+0x1a8>
 8105dae:	687b      	ldr	r3, [r7, #4]
 8105db0:	681b      	ldr	r3, [r3, #0]
 8105db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105db6:	d01d      	beq.n	8105df4 <HAL_TIM_PWM_Start+0x1a8>
 8105db8:	687b      	ldr	r3, [r7, #4]
 8105dba:	681b      	ldr	r3, [r3, #0]
 8105dbc:	4a25      	ldr	r2, [pc, #148]	; (8105e54 <HAL_TIM_PWM_Start+0x208>)
 8105dbe:	4293      	cmp	r3, r2
 8105dc0:	d018      	beq.n	8105df4 <HAL_TIM_PWM_Start+0x1a8>
 8105dc2:	687b      	ldr	r3, [r7, #4]
 8105dc4:	681b      	ldr	r3, [r3, #0]
 8105dc6:	4a24      	ldr	r2, [pc, #144]	; (8105e58 <HAL_TIM_PWM_Start+0x20c>)
 8105dc8:	4293      	cmp	r3, r2
 8105dca:	d013      	beq.n	8105df4 <HAL_TIM_PWM_Start+0x1a8>
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	681b      	ldr	r3, [r3, #0]
 8105dd0:	4a22      	ldr	r2, [pc, #136]	; (8105e5c <HAL_TIM_PWM_Start+0x210>)
 8105dd2:	4293      	cmp	r3, r2
 8105dd4:	d00e      	beq.n	8105df4 <HAL_TIM_PWM_Start+0x1a8>
 8105dd6:	687b      	ldr	r3, [r7, #4]
 8105dd8:	681b      	ldr	r3, [r3, #0]
 8105dda:	4a1a      	ldr	r2, [pc, #104]	; (8105e44 <HAL_TIM_PWM_Start+0x1f8>)
 8105ddc:	4293      	cmp	r3, r2
 8105dde:	d009      	beq.n	8105df4 <HAL_TIM_PWM_Start+0x1a8>
 8105de0:	687b      	ldr	r3, [r7, #4]
 8105de2:	681b      	ldr	r3, [r3, #0]
 8105de4:	4a1e      	ldr	r2, [pc, #120]	; (8105e60 <HAL_TIM_PWM_Start+0x214>)
 8105de6:	4293      	cmp	r3, r2
 8105de8:	d004      	beq.n	8105df4 <HAL_TIM_PWM_Start+0x1a8>
 8105dea:	687b      	ldr	r3, [r7, #4]
 8105dec:	681b      	ldr	r3, [r3, #0]
 8105dee:	4a16      	ldr	r2, [pc, #88]	; (8105e48 <HAL_TIM_PWM_Start+0x1fc>)
 8105df0:	4293      	cmp	r3, r2
 8105df2:	d115      	bne.n	8105e20 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105df4:	687b      	ldr	r3, [r7, #4]
 8105df6:	681b      	ldr	r3, [r3, #0]
 8105df8:	689a      	ldr	r2, [r3, #8]
 8105dfa:	4b1a      	ldr	r3, [pc, #104]	; (8105e64 <HAL_TIM_PWM_Start+0x218>)
 8105dfc:	4013      	ands	r3, r2
 8105dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105e00:	68fb      	ldr	r3, [r7, #12]
 8105e02:	2b06      	cmp	r3, #6
 8105e04:	d015      	beq.n	8105e32 <HAL_TIM_PWM_Start+0x1e6>
 8105e06:	68fb      	ldr	r3, [r7, #12]
 8105e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105e0c:	d011      	beq.n	8105e32 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8105e0e:	687b      	ldr	r3, [r7, #4]
 8105e10:	681b      	ldr	r3, [r3, #0]
 8105e12:	681a      	ldr	r2, [r3, #0]
 8105e14:	687b      	ldr	r3, [r7, #4]
 8105e16:	681b      	ldr	r3, [r3, #0]
 8105e18:	f042 0201 	orr.w	r2, r2, #1
 8105e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105e1e:	e008      	b.n	8105e32 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8105e20:	687b      	ldr	r3, [r7, #4]
 8105e22:	681b      	ldr	r3, [r3, #0]
 8105e24:	681a      	ldr	r2, [r3, #0]
 8105e26:	687b      	ldr	r3, [r7, #4]
 8105e28:	681b      	ldr	r3, [r3, #0]
 8105e2a:	f042 0201 	orr.w	r2, r2, #1
 8105e2e:	601a      	str	r2, [r3, #0]
 8105e30:	e000      	b.n	8105e34 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105e32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8105e34:	2300      	movs	r3, #0
}
 8105e36:	4618      	mov	r0, r3
 8105e38:	3710      	adds	r7, #16
 8105e3a:	46bd      	mov	sp, r7
 8105e3c:	bd80      	pop	{r7, pc}
 8105e3e:	bf00      	nop
 8105e40:	40010000 	.word	0x40010000
 8105e44:	40010400 	.word	0x40010400
 8105e48:	40014000 	.word	0x40014000
 8105e4c:	40014400 	.word	0x40014400
 8105e50:	40014800 	.word	0x40014800
 8105e54:	40000400 	.word	0x40000400
 8105e58:	40000800 	.word	0x40000800
 8105e5c:	40000c00 	.word	0x40000c00
 8105e60:	40001800 	.word	0x40001800
 8105e64:	00010007 	.word	0x00010007

08105e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8105e68:	b580      	push	{r7, lr}
 8105e6a:	b082      	sub	sp, #8
 8105e6c:	af00      	add	r7, sp, #0
 8105e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8105e70:	687b      	ldr	r3, [r7, #4]
 8105e72:	681b      	ldr	r3, [r3, #0]
 8105e74:	691b      	ldr	r3, [r3, #16]
 8105e76:	f003 0302 	and.w	r3, r3, #2
 8105e7a:	2b02      	cmp	r3, #2
 8105e7c:	d122      	bne.n	8105ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8105e7e:	687b      	ldr	r3, [r7, #4]
 8105e80:	681b      	ldr	r3, [r3, #0]
 8105e82:	68db      	ldr	r3, [r3, #12]
 8105e84:	f003 0302 	and.w	r3, r3, #2
 8105e88:	2b02      	cmp	r3, #2
 8105e8a:	d11b      	bne.n	8105ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8105e8c:	687b      	ldr	r3, [r7, #4]
 8105e8e:	681b      	ldr	r3, [r3, #0]
 8105e90:	f06f 0202 	mvn.w	r2, #2
 8105e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8105e96:	687b      	ldr	r3, [r7, #4]
 8105e98:	2201      	movs	r2, #1
 8105e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8105e9c:	687b      	ldr	r3, [r7, #4]
 8105e9e:	681b      	ldr	r3, [r3, #0]
 8105ea0:	699b      	ldr	r3, [r3, #24]
 8105ea2:	f003 0303 	and.w	r3, r3, #3
 8105ea6:	2b00      	cmp	r3, #0
 8105ea8:	d003      	beq.n	8105eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8105eaa:	6878      	ldr	r0, [r7, #4]
 8105eac:	f000 fb12 	bl	81064d4 <HAL_TIM_IC_CaptureCallback>
 8105eb0:	e005      	b.n	8105ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8105eb2:	6878      	ldr	r0, [r7, #4]
 8105eb4:	f000 fb04 	bl	81064c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105eb8:	6878      	ldr	r0, [r7, #4]
 8105eba:	f000 fb15 	bl	81064e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105ebe:	687b      	ldr	r3, [r7, #4]
 8105ec0:	2200      	movs	r2, #0
 8105ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8105ec4:	687b      	ldr	r3, [r7, #4]
 8105ec6:	681b      	ldr	r3, [r3, #0]
 8105ec8:	691b      	ldr	r3, [r3, #16]
 8105eca:	f003 0304 	and.w	r3, r3, #4
 8105ece:	2b04      	cmp	r3, #4
 8105ed0:	d122      	bne.n	8105f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	681b      	ldr	r3, [r3, #0]
 8105ed6:	68db      	ldr	r3, [r3, #12]
 8105ed8:	f003 0304 	and.w	r3, r3, #4
 8105edc:	2b04      	cmp	r3, #4
 8105ede:	d11b      	bne.n	8105f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8105ee0:	687b      	ldr	r3, [r7, #4]
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	f06f 0204 	mvn.w	r2, #4
 8105ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8105eea:	687b      	ldr	r3, [r7, #4]
 8105eec:	2202      	movs	r2, #2
 8105eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8105ef0:	687b      	ldr	r3, [r7, #4]
 8105ef2:	681b      	ldr	r3, [r3, #0]
 8105ef4:	699b      	ldr	r3, [r3, #24]
 8105ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105efa:	2b00      	cmp	r3, #0
 8105efc:	d003      	beq.n	8105f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105efe:	6878      	ldr	r0, [r7, #4]
 8105f00:	f000 fae8 	bl	81064d4 <HAL_TIM_IC_CaptureCallback>
 8105f04:	e005      	b.n	8105f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105f06:	6878      	ldr	r0, [r7, #4]
 8105f08:	f000 fada 	bl	81064c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105f0c:	6878      	ldr	r0, [r7, #4]
 8105f0e:	f000 faeb 	bl	81064e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105f12:	687b      	ldr	r3, [r7, #4]
 8105f14:	2200      	movs	r2, #0
 8105f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8105f18:	687b      	ldr	r3, [r7, #4]
 8105f1a:	681b      	ldr	r3, [r3, #0]
 8105f1c:	691b      	ldr	r3, [r3, #16]
 8105f1e:	f003 0308 	and.w	r3, r3, #8
 8105f22:	2b08      	cmp	r3, #8
 8105f24:	d122      	bne.n	8105f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8105f26:	687b      	ldr	r3, [r7, #4]
 8105f28:	681b      	ldr	r3, [r3, #0]
 8105f2a:	68db      	ldr	r3, [r3, #12]
 8105f2c:	f003 0308 	and.w	r3, r3, #8
 8105f30:	2b08      	cmp	r3, #8
 8105f32:	d11b      	bne.n	8105f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	681b      	ldr	r3, [r3, #0]
 8105f38:	f06f 0208 	mvn.w	r2, #8
 8105f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8105f3e:	687b      	ldr	r3, [r7, #4]
 8105f40:	2204      	movs	r2, #4
 8105f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8105f44:	687b      	ldr	r3, [r7, #4]
 8105f46:	681b      	ldr	r3, [r3, #0]
 8105f48:	69db      	ldr	r3, [r3, #28]
 8105f4a:	f003 0303 	and.w	r3, r3, #3
 8105f4e:	2b00      	cmp	r3, #0
 8105f50:	d003      	beq.n	8105f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105f52:	6878      	ldr	r0, [r7, #4]
 8105f54:	f000 fabe 	bl	81064d4 <HAL_TIM_IC_CaptureCallback>
 8105f58:	e005      	b.n	8105f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105f5a:	6878      	ldr	r0, [r7, #4]
 8105f5c:	f000 fab0 	bl	81064c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105f60:	6878      	ldr	r0, [r7, #4]
 8105f62:	f000 fac1 	bl	81064e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	2200      	movs	r2, #0
 8105f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8105f6c:	687b      	ldr	r3, [r7, #4]
 8105f6e:	681b      	ldr	r3, [r3, #0]
 8105f70:	691b      	ldr	r3, [r3, #16]
 8105f72:	f003 0310 	and.w	r3, r3, #16
 8105f76:	2b10      	cmp	r3, #16
 8105f78:	d122      	bne.n	8105fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8105f7a:	687b      	ldr	r3, [r7, #4]
 8105f7c:	681b      	ldr	r3, [r3, #0]
 8105f7e:	68db      	ldr	r3, [r3, #12]
 8105f80:	f003 0310 	and.w	r3, r3, #16
 8105f84:	2b10      	cmp	r3, #16
 8105f86:	d11b      	bne.n	8105fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8105f88:	687b      	ldr	r3, [r7, #4]
 8105f8a:	681b      	ldr	r3, [r3, #0]
 8105f8c:	f06f 0210 	mvn.w	r2, #16
 8105f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8105f92:	687b      	ldr	r3, [r7, #4]
 8105f94:	2208      	movs	r2, #8
 8105f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	681b      	ldr	r3, [r3, #0]
 8105f9c:	69db      	ldr	r3, [r3, #28]
 8105f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105fa2:	2b00      	cmp	r3, #0
 8105fa4:	d003      	beq.n	8105fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105fa6:	6878      	ldr	r0, [r7, #4]
 8105fa8:	f000 fa94 	bl	81064d4 <HAL_TIM_IC_CaptureCallback>
 8105fac:	e005      	b.n	8105fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105fae:	6878      	ldr	r0, [r7, #4]
 8105fb0:	f000 fa86 	bl	81064c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105fb4:	6878      	ldr	r0, [r7, #4]
 8105fb6:	f000 fa97 	bl	81064e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105fba:	687b      	ldr	r3, [r7, #4]
 8105fbc:	2200      	movs	r2, #0
 8105fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	681b      	ldr	r3, [r3, #0]
 8105fc4:	691b      	ldr	r3, [r3, #16]
 8105fc6:	f003 0301 	and.w	r3, r3, #1
 8105fca:	2b01      	cmp	r3, #1
 8105fcc:	d10e      	bne.n	8105fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8105fce:	687b      	ldr	r3, [r7, #4]
 8105fd0:	681b      	ldr	r3, [r3, #0]
 8105fd2:	68db      	ldr	r3, [r3, #12]
 8105fd4:	f003 0301 	and.w	r3, r3, #1
 8105fd8:	2b01      	cmp	r3, #1
 8105fda:	d107      	bne.n	8105fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8105fdc:	687b      	ldr	r3, [r7, #4]
 8105fde:	681b      	ldr	r3, [r3, #0]
 8105fe0:	f06f 0201 	mvn.w	r2, #1
 8105fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8105fe6:	6878      	ldr	r0, [r7, #4]
 8105fe8:	f7fb ff4a 	bl	8101e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	681b      	ldr	r3, [r3, #0]
 8105ff0:	691b      	ldr	r3, [r3, #16]
 8105ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105ff6:	2b80      	cmp	r3, #128	; 0x80
 8105ff8:	d10e      	bne.n	8106018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8105ffa:	687b      	ldr	r3, [r7, #4]
 8105ffc:	681b      	ldr	r3, [r3, #0]
 8105ffe:	68db      	ldr	r3, [r3, #12]
 8106000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106004:	2b80      	cmp	r3, #128	; 0x80
 8106006:	d107      	bne.n	8106018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	681b      	ldr	r3, [r3, #0]
 810600c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8106010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8106012:	6878      	ldr	r0, [r7, #4]
 8106014:	f000 ffc4 	bl	8106fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8106018:	687b      	ldr	r3, [r7, #4]
 810601a:	681b      	ldr	r3, [r3, #0]
 810601c:	691b      	ldr	r3, [r3, #16]
 810601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106026:	d10e      	bne.n	8106046 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8106028:	687b      	ldr	r3, [r7, #4]
 810602a:	681b      	ldr	r3, [r3, #0]
 810602c:	68db      	ldr	r3, [r3, #12]
 810602e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106032:	2b80      	cmp	r3, #128	; 0x80
 8106034:	d107      	bne.n	8106046 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8106036:	687b      	ldr	r3, [r7, #4]
 8106038:	681b      	ldr	r3, [r3, #0]
 810603a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 810603e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8106040:	6878      	ldr	r0, [r7, #4]
 8106042:	f000 ffb7 	bl	8106fb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8106046:	687b      	ldr	r3, [r7, #4]
 8106048:	681b      	ldr	r3, [r3, #0]
 810604a:	691b      	ldr	r3, [r3, #16]
 810604c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106050:	2b40      	cmp	r3, #64	; 0x40
 8106052:	d10e      	bne.n	8106072 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8106054:	687b      	ldr	r3, [r7, #4]
 8106056:	681b      	ldr	r3, [r3, #0]
 8106058:	68db      	ldr	r3, [r3, #12]
 810605a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810605e:	2b40      	cmp	r3, #64	; 0x40
 8106060:	d107      	bne.n	8106072 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8106062:	687b      	ldr	r3, [r7, #4]
 8106064:	681b      	ldr	r3, [r3, #0]
 8106066:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810606a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810606c:	6878      	ldr	r0, [r7, #4]
 810606e:	f000 fa45 	bl	81064fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	691b      	ldr	r3, [r3, #16]
 8106078:	f003 0320 	and.w	r3, r3, #32
 810607c:	2b20      	cmp	r3, #32
 810607e:	d10e      	bne.n	810609e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8106080:	687b      	ldr	r3, [r7, #4]
 8106082:	681b      	ldr	r3, [r3, #0]
 8106084:	68db      	ldr	r3, [r3, #12]
 8106086:	f003 0320 	and.w	r3, r3, #32
 810608a:	2b20      	cmp	r3, #32
 810608c:	d107      	bne.n	810609e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810608e:	687b      	ldr	r3, [r7, #4]
 8106090:	681b      	ldr	r3, [r3, #0]
 8106092:	f06f 0220 	mvn.w	r2, #32
 8106096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8106098:	6878      	ldr	r0, [r7, #4]
 810609a:	f000 ff77 	bl	8106f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810609e:	bf00      	nop
 81060a0:	3708      	adds	r7, #8
 81060a2:	46bd      	mov	sp, r7
 81060a4:	bd80      	pop	{r7, pc}
	...

081060a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81060a8:	b580      	push	{r7, lr}
 81060aa:	b086      	sub	sp, #24
 81060ac:	af00      	add	r7, sp, #0
 81060ae:	60f8      	str	r0, [r7, #12]
 81060b0:	60b9      	str	r1, [r7, #8]
 81060b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81060b4:	2300      	movs	r3, #0
 81060b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81060b8:	68fb      	ldr	r3, [r7, #12]
 81060ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81060be:	2b01      	cmp	r3, #1
 81060c0:	d101      	bne.n	81060c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 81060c2:	2302      	movs	r3, #2
 81060c4:	e0ff      	b.n	81062c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 81060c6:	68fb      	ldr	r3, [r7, #12]
 81060c8:	2201      	movs	r2, #1
 81060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 81060ce:	687b      	ldr	r3, [r7, #4]
 81060d0:	2b14      	cmp	r3, #20
 81060d2:	f200 80f0 	bhi.w	81062b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 81060d6:	a201      	add	r2, pc, #4	; (adr r2, 81060dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 81060d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81060dc:	08106131 	.word	0x08106131
 81060e0:	081062b7 	.word	0x081062b7
 81060e4:	081062b7 	.word	0x081062b7
 81060e8:	081062b7 	.word	0x081062b7
 81060ec:	08106171 	.word	0x08106171
 81060f0:	081062b7 	.word	0x081062b7
 81060f4:	081062b7 	.word	0x081062b7
 81060f8:	081062b7 	.word	0x081062b7
 81060fc:	081061b3 	.word	0x081061b3
 8106100:	081062b7 	.word	0x081062b7
 8106104:	081062b7 	.word	0x081062b7
 8106108:	081062b7 	.word	0x081062b7
 810610c:	081061f3 	.word	0x081061f3
 8106110:	081062b7 	.word	0x081062b7
 8106114:	081062b7 	.word	0x081062b7
 8106118:	081062b7 	.word	0x081062b7
 810611c:	08106235 	.word	0x08106235
 8106120:	081062b7 	.word	0x081062b7
 8106124:	081062b7 	.word	0x081062b7
 8106128:	081062b7 	.word	0x081062b7
 810612c:	08106275 	.word	0x08106275
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8106130:	68fb      	ldr	r3, [r7, #12]
 8106132:	681b      	ldr	r3, [r3, #0]
 8106134:	68b9      	ldr	r1, [r7, #8]
 8106136:	4618      	mov	r0, r3
 8106138:	f000 fa84 	bl	8106644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810613c:	68fb      	ldr	r3, [r7, #12]
 810613e:	681b      	ldr	r3, [r3, #0]
 8106140:	699a      	ldr	r2, [r3, #24]
 8106142:	68fb      	ldr	r3, [r7, #12]
 8106144:	681b      	ldr	r3, [r3, #0]
 8106146:	f042 0208 	orr.w	r2, r2, #8
 810614a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810614c:	68fb      	ldr	r3, [r7, #12]
 810614e:	681b      	ldr	r3, [r3, #0]
 8106150:	699a      	ldr	r2, [r3, #24]
 8106152:	68fb      	ldr	r3, [r7, #12]
 8106154:	681b      	ldr	r3, [r3, #0]
 8106156:	f022 0204 	bic.w	r2, r2, #4
 810615a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810615c:	68fb      	ldr	r3, [r7, #12]
 810615e:	681b      	ldr	r3, [r3, #0]
 8106160:	6999      	ldr	r1, [r3, #24]
 8106162:	68bb      	ldr	r3, [r7, #8]
 8106164:	691a      	ldr	r2, [r3, #16]
 8106166:	68fb      	ldr	r3, [r7, #12]
 8106168:	681b      	ldr	r3, [r3, #0]
 810616a:	430a      	orrs	r2, r1
 810616c:	619a      	str	r2, [r3, #24]
      break;
 810616e:	e0a5      	b.n	81062bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8106170:	68fb      	ldr	r3, [r7, #12]
 8106172:	681b      	ldr	r3, [r3, #0]
 8106174:	68b9      	ldr	r1, [r7, #8]
 8106176:	4618      	mov	r0, r3
 8106178:	f000 faf4 	bl	8106764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810617c:	68fb      	ldr	r3, [r7, #12]
 810617e:	681b      	ldr	r3, [r3, #0]
 8106180:	699a      	ldr	r2, [r3, #24]
 8106182:	68fb      	ldr	r3, [r7, #12]
 8106184:	681b      	ldr	r3, [r3, #0]
 8106186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810618a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810618c:	68fb      	ldr	r3, [r7, #12]
 810618e:	681b      	ldr	r3, [r3, #0]
 8106190:	699a      	ldr	r2, [r3, #24]
 8106192:	68fb      	ldr	r3, [r7, #12]
 8106194:	681b      	ldr	r3, [r3, #0]
 8106196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810619a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810619c:	68fb      	ldr	r3, [r7, #12]
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	6999      	ldr	r1, [r3, #24]
 81061a2:	68bb      	ldr	r3, [r7, #8]
 81061a4:	691b      	ldr	r3, [r3, #16]
 81061a6:	021a      	lsls	r2, r3, #8
 81061a8:	68fb      	ldr	r3, [r7, #12]
 81061aa:	681b      	ldr	r3, [r3, #0]
 81061ac:	430a      	orrs	r2, r1
 81061ae:	619a      	str	r2, [r3, #24]
      break;
 81061b0:	e084      	b.n	81062bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81061b2:	68fb      	ldr	r3, [r7, #12]
 81061b4:	681b      	ldr	r3, [r3, #0]
 81061b6:	68b9      	ldr	r1, [r7, #8]
 81061b8:	4618      	mov	r0, r3
 81061ba:	f000 fb5d 	bl	8106878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81061be:	68fb      	ldr	r3, [r7, #12]
 81061c0:	681b      	ldr	r3, [r3, #0]
 81061c2:	69da      	ldr	r2, [r3, #28]
 81061c4:	68fb      	ldr	r3, [r7, #12]
 81061c6:	681b      	ldr	r3, [r3, #0]
 81061c8:	f042 0208 	orr.w	r2, r2, #8
 81061cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81061ce:	68fb      	ldr	r3, [r7, #12]
 81061d0:	681b      	ldr	r3, [r3, #0]
 81061d2:	69da      	ldr	r2, [r3, #28]
 81061d4:	68fb      	ldr	r3, [r7, #12]
 81061d6:	681b      	ldr	r3, [r3, #0]
 81061d8:	f022 0204 	bic.w	r2, r2, #4
 81061dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81061de:	68fb      	ldr	r3, [r7, #12]
 81061e0:	681b      	ldr	r3, [r3, #0]
 81061e2:	69d9      	ldr	r1, [r3, #28]
 81061e4:	68bb      	ldr	r3, [r7, #8]
 81061e6:	691a      	ldr	r2, [r3, #16]
 81061e8:	68fb      	ldr	r3, [r7, #12]
 81061ea:	681b      	ldr	r3, [r3, #0]
 81061ec:	430a      	orrs	r2, r1
 81061ee:	61da      	str	r2, [r3, #28]
      break;
 81061f0:	e064      	b.n	81062bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81061f2:	68fb      	ldr	r3, [r7, #12]
 81061f4:	681b      	ldr	r3, [r3, #0]
 81061f6:	68b9      	ldr	r1, [r7, #8]
 81061f8:	4618      	mov	r0, r3
 81061fa:	f000 fbc5 	bl	8106988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81061fe:	68fb      	ldr	r3, [r7, #12]
 8106200:	681b      	ldr	r3, [r3, #0]
 8106202:	69da      	ldr	r2, [r3, #28]
 8106204:	68fb      	ldr	r3, [r7, #12]
 8106206:	681b      	ldr	r3, [r3, #0]
 8106208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810620c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810620e:	68fb      	ldr	r3, [r7, #12]
 8106210:	681b      	ldr	r3, [r3, #0]
 8106212:	69da      	ldr	r2, [r3, #28]
 8106214:	68fb      	ldr	r3, [r7, #12]
 8106216:	681b      	ldr	r3, [r3, #0]
 8106218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810621c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810621e:	68fb      	ldr	r3, [r7, #12]
 8106220:	681b      	ldr	r3, [r3, #0]
 8106222:	69d9      	ldr	r1, [r3, #28]
 8106224:	68bb      	ldr	r3, [r7, #8]
 8106226:	691b      	ldr	r3, [r3, #16]
 8106228:	021a      	lsls	r2, r3, #8
 810622a:	68fb      	ldr	r3, [r7, #12]
 810622c:	681b      	ldr	r3, [r3, #0]
 810622e:	430a      	orrs	r2, r1
 8106230:	61da      	str	r2, [r3, #28]
      break;
 8106232:	e043      	b.n	81062bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8106234:	68fb      	ldr	r3, [r7, #12]
 8106236:	681b      	ldr	r3, [r3, #0]
 8106238:	68b9      	ldr	r1, [r7, #8]
 810623a:	4618      	mov	r0, r3
 810623c:	f000 fc0e 	bl	8106a5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8106240:	68fb      	ldr	r3, [r7, #12]
 8106242:	681b      	ldr	r3, [r3, #0]
 8106244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106246:	68fb      	ldr	r3, [r7, #12]
 8106248:	681b      	ldr	r3, [r3, #0]
 810624a:	f042 0208 	orr.w	r2, r2, #8
 810624e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8106250:	68fb      	ldr	r3, [r7, #12]
 8106252:	681b      	ldr	r3, [r3, #0]
 8106254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106256:	68fb      	ldr	r3, [r7, #12]
 8106258:	681b      	ldr	r3, [r3, #0]
 810625a:	f022 0204 	bic.w	r2, r2, #4
 810625e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8106260:	68fb      	ldr	r3, [r7, #12]
 8106262:	681b      	ldr	r3, [r3, #0]
 8106264:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8106266:	68bb      	ldr	r3, [r7, #8]
 8106268:	691a      	ldr	r2, [r3, #16]
 810626a:	68fb      	ldr	r3, [r7, #12]
 810626c:	681b      	ldr	r3, [r3, #0]
 810626e:	430a      	orrs	r2, r1
 8106270:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8106272:	e023      	b.n	81062bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8106274:	68fb      	ldr	r3, [r7, #12]
 8106276:	681b      	ldr	r3, [r3, #0]
 8106278:	68b9      	ldr	r1, [r7, #8]
 810627a:	4618      	mov	r0, r3
 810627c:	f000 fc52 	bl	8106b24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8106280:	68fb      	ldr	r3, [r7, #12]
 8106282:	681b      	ldr	r3, [r3, #0]
 8106284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106286:	68fb      	ldr	r3, [r7, #12]
 8106288:	681b      	ldr	r3, [r3, #0]
 810628a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810628e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8106290:	68fb      	ldr	r3, [r7, #12]
 8106292:	681b      	ldr	r3, [r3, #0]
 8106294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106296:	68fb      	ldr	r3, [r7, #12]
 8106298:	681b      	ldr	r3, [r3, #0]
 810629a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810629e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81062a0:	68fb      	ldr	r3, [r7, #12]
 81062a2:	681b      	ldr	r3, [r3, #0]
 81062a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81062a6:	68bb      	ldr	r3, [r7, #8]
 81062a8:	691b      	ldr	r3, [r3, #16]
 81062aa:	021a      	lsls	r2, r3, #8
 81062ac:	68fb      	ldr	r3, [r7, #12]
 81062ae:	681b      	ldr	r3, [r3, #0]
 81062b0:	430a      	orrs	r2, r1
 81062b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81062b4:	e002      	b.n	81062bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 81062b6:	2301      	movs	r3, #1
 81062b8:	75fb      	strb	r3, [r7, #23]
      break;
 81062ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81062bc:	68fb      	ldr	r3, [r7, #12]
 81062be:	2200      	movs	r2, #0
 81062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81062c4:	7dfb      	ldrb	r3, [r7, #23]
}
 81062c6:	4618      	mov	r0, r3
 81062c8:	3718      	adds	r7, #24
 81062ca:	46bd      	mov	sp, r7
 81062cc:	bd80      	pop	{r7, pc}
 81062ce:	bf00      	nop

081062d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 81062d0:	b580      	push	{r7, lr}
 81062d2:	b084      	sub	sp, #16
 81062d4:	af00      	add	r7, sp, #0
 81062d6:	6078      	str	r0, [r7, #4]
 81062d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81062da:	2300      	movs	r3, #0
 81062dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81062e4:	2b01      	cmp	r3, #1
 81062e6:	d101      	bne.n	81062ec <HAL_TIM_ConfigClockSource+0x1c>
 81062e8:	2302      	movs	r3, #2
 81062ea:	e0de      	b.n	81064aa <HAL_TIM_ConfigClockSource+0x1da>
 81062ec:	687b      	ldr	r3, [r7, #4]
 81062ee:	2201      	movs	r2, #1
 81062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81062f4:	687b      	ldr	r3, [r7, #4]
 81062f6:	2202      	movs	r2, #2
 81062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81062fc:	687b      	ldr	r3, [r7, #4]
 81062fe:	681b      	ldr	r3, [r3, #0]
 8106300:	689b      	ldr	r3, [r3, #8]
 8106302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8106304:	68bb      	ldr	r3, [r7, #8]
 8106306:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810630a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 810630e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8106310:	68bb      	ldr	r3, [r7, #8]
 8106312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8106318:	687b      	ldr	r3, [r7, #4]
 810631a:	681b      	ldr	r3, [r3, #0]
 810631c:	68ba      	ldr	r2, [r7, #8]
 810631e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8106320:	683b      	ldr	r3, [r7, #0]
 8106322:	681b      	ldr	r3, [r3, #0]
 8106324:	4a63      	ldr	r2, [pc, #396]	; (81064b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8106326:	4293      	cmp	r3, r2
 8106328:	f000 80a9 	beq.w	810647e <HAL_TIM_ConfigClockSource+0x1ae>
 810632c:	4a61      	ldr	r2, [pc, #388]	; (81064b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 810632e:	4293      	cmp	r3, r2
 8106330:	f200 80ae 	bhi.w	8106490 <HAL_TIM_ConfigClockSource+0x1c0>
 8106334:	4a60      	ldr	r2, [pc, #384]	; (81064b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8106336:	4293      	cmp	r3, r2
 8106338:	f000 80a1 	beq.w	810647e <HAL_TIM_ConfigClockSource+0x1ae>
 810633c:	4a5e      	ldr	r2, [pc, #376]	; (81064b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 810633e:	4293      	cmp	r3, r2
 8106340:	f200 80a6 	bhi.w	8106490 <HAL_TIM_ConfigClockSource+0x1c0>
 8106344:	4a5d      	ldr	r2, [pc, #372]	; (81064bc <HAL_TIM_ConfigClockSource+0x1ec>)
 8106346:	4293      	cmp	r3, r2
 8106348:	f000 8099 	beq.w	810647e <HAL_TIM_ConfigClockSource+0x1ae>
 810634c:	4a5b      	ldr	r2, [pc, #364]	; (81064bc <HAL_TIM_ConfigClockSource+0x1ec>)
 810634e:	4293      	cmp	r3, r2
 8106350:	f200 809e 	bhi.w	8106490 <HAL_TIM_ConfigClockSource+0x1c0>
 8106354:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8106358:	f000 8091 	beq.w	810647e <HAL_TIM_ConfigClockSource+0x1ae>
 810635c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8106360:	f200 8096 	bhi.w	8106490 <HAL_TIM_ConfigClockSource+0x1c0>
 8106364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106368:	f000 8089 	beq.w	810647e <HAL_TIM_ConfigClockSource+0x1ae>
 810636c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106370:	f200 808e 	bhi.w	8106490 <HAL_TIM_ConfigClockSource+0x1c0>
 8106374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106378:	d03e      	beq.n	81063f8 <HAL_TIM_ConfigClockSource+0x128>
 810637a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810637e:	f200 8087 	bhi.w	8106490 <HAL_TIM_ConfigClockSource+0x1c0>
 8106382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106386:	f000 8086 	beq.w	8106496 <HAL_TIM_ConfigClockSource+0x1c6>
 810638a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810638e:	d87f      	bhi.n	8106490 <HAL_TIM_ConfigClockSource+0x1c0>
 8106390:	2b70      	cmp	r3, #112	; 0x70
 8106392:	d01a      	beq.n	81063ca <HAL_TIM_ConfigClockSource+0xfa>
 8106394:	2b70      	cmp	r3, #112	; 0x70
 8106396:	d87b      	bhi.n	8106490 <HAL_TIM_ConfigClockSource+0x1c0>
 8106398:	2b60      	cmp	r3, #96	; 0x60
 810639a:	d050      	beq.n	810643e <HAL_TIM_ConfigClockSource+0x16e>
 810639c:	2b60      	cmp	r3, #96	; 0x60
 810639e:	d877      	bhi.n	8106490 <HAL_TIM_ConfigClockSource+0x1c0>
 81063a0:	2b50      	cmp	r3, #80	; 0x50
 81063a2:	d03c      	beq.n	810641e <HAL_TIM_ConfigClockSource+0x14e>
 81063a4:	2b50      	cmp	r3, #80	; 0x50
 81063a6:	d873      	bhi.n	8106490 <HAL_TIM_ConfigClockSource+0x1c0>
 81063a8:	2b40      	cmp	r3, #64	; 0x40
 81063aa:	d058      	beq.n	810645e <HAL_TIM_ConfigClockSource+0x18e>
 81063ac:	2b40      	cmp	r3, #64	; 0x40
 81063ae:	d86f      	bhi.n	8106490 <HAL_TIM_ConfigClockSource+0x1c0>
 81063b0:	2b30      	cmp	r3, #48	; 0x30
 81063b2:	d064      	beq.n	810647e <HAL_TIM_ConfigClockSource+0x1ae>
 81063b4:	2b30      	cmp	r3, #48	; 0x30
 81063b6:	d86b      	bhi.n	8106490 <HAL_TIM_ConfigClockSource+0x1c0>
 81063b8:	2b20      	cmp	r3, #32
 81063ba:	d060      	beq.n	810647e <HAL_TIM_ConfigClockSource+0x1ae>
 81063bc:	2b20      	cmp	r3, #32
 81063be:	d867      	bhi.n	8106490 <HAL_TIM_ConfigClockSource+0x1c0>
 81063c0:	2b00      	cmp	r3, #0
 81063c2:	d05c      	beq.n	810647e <HAL_TIM_ConfigClockSource+0x1ae>
 81063c4:	2b10      	cmp	r3, #16
 81063c6:	d05a      	beq.n	810647e <HAL_TIM_ConfigClockSource+0x1ae>
 81063c8:	e062      	b.n	8106490 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81063ca:	687b      	ldr	r3, [r7, #4]
 81063cc:	6818      	ldr	r0, [r3, #0]
 81063ce:	683b      	ldr	r3, [r7, #0]
 81063d0:	6899      	ldr	r1, [r3, #8]
 81063d2:	683b      	ldr	r3, [r7, #0]
 81063d4:	685a      	ldr	r2, [r3, #4]
 81063d6:	683b      	ldr	r3, [r7, #0]
 81063d8:	68db      	ldr	r3, [r3, #12]
 81063da:	f000 fc85 	bl	8106ce8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 81063de:	687b      	ldr	r3, [r7, #4]
 81063e0:	681b      	ldr	r3, [r3, #0]
 81063e2:	689b      	ldr	r3, [r3, #8]
 81063e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 81063e6:	68bb      	ldr	r3, [r7, #8]
 81063e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 81063ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	681b      	ldr	r3, [r3, #0]
 81063f2:	68ba      	ldr	r2, [r7, #8]
 81063f4:	609a      	str	r2, [r3, #8]
      break;
 81063f6:	e04f      	b.n	8106498 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81063f8:	687b      	ldr	r3, [r7, #4]
 81063fa:	6818      	ldr	r0, [r3, #0]
 81063fc:	683b      	ldr	r3, [r7, #0]
 81063fe:	6899      	ldr	r1, [r3, #8]
 8106400:	683b      	ldr	r3, [r7, #0]
 8106402:	685a      	ldr	r2, [r3, #4]
 8106404:	683b      	ldr	r3, [r7, #0]
 8106406:	68db      	ldr	r3, [r3, #12]
 8106408:	f000 fc6e 	bl	8106ce8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	681b      	ldr	r3, [r3, #0]
 8106410:	689a      	ldr	r2, [r3, #8]
 8106412:	687b      	ldr	r3, [r7, #4]
 8106414:	681b      	ldr	r3, [r3, #0]
 8106416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810641a:	609a      	str	r2, [r3, #8]
      break;
 810641c:	e03c      	b.n	8106498 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810641e:	687b      	ldr	r3, [r7, #4]
 8106420:	6818      	ldr	r0, [r3, #0]
 8106422:	683b      	ldr	r3, [r7, #0]
 8106424:	6859      	ldr	r1, [r3, #4]
 8106426:	683b      	ldr	r3, [r7, #0]
 8106428:	68db      	ldr	r3, [r3, #12]
 810642a:	461a      	mov	r2, r3
 810642c:	f000 fbe0 	bl	8106bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	681b      	ldr	r3, [r3, #0]
 8106434:	2150      	movs	r1, #80	; 0x50
 8106436:	4618      	mov	r0, r3
 8106438:	f000 fc39 	bl	8106cae <TIM_ITRx_SetConfig>
      break;
 810643c:	e02c      	b.n	8106498 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	6818      	ldr	r0, [r3, #0]
 8106442:	683b      	ldr	r3, [r7, #0]
 8106444:	6859      	ldr	r1, [r3, #4]
 8106446:	683b      	ldr	r3, [r7, #0]
 8106448:	68db      	ldr	r3, [r3, #12]
 810644a:	461a      	mov	r2, r3
 810644c:	f000 fbff 	bl	8106c4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	681b      	ldr	r3, [r3, #0]
 8106454:	2160      	movs	r1, #96	; 0x60
 8106456:	4618      	mov	r0, r3
 8106458:	f000 fc29 	bl	8106cae <TIM_ITRx_SetConfig>
      break;
 810645c:	e01c      	b.n	8106498 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810645e:	687b      	ldr	r3, [r7, #4]
 8106460:	6818      	ldr	r0, [r3, #0]
 8106462:	683b      	ldr	r3, [r7, #0]
 8106464:	6859      	ldr	r1, [r3, #4]
 8106466:	683b      	ldr	r3, [r7, #0]
 8106468:	68db      	ldr	r3, [r3, #12]
 810646a:	461a      	mov	r2, r3
 810646c:	f000 fbc0 	bl	8106bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	681b      	ldr	r3, [r3, #0]
 8106474:	2140      	movs	r1, #64	; 0x40
 8106476:	4618      	mov	r0, r3
 8106478:	f000 fc19 	bl	8106cae <TIM_ITRx_SetConfig>
      break;
 810647c:	e00c      	b.n	8106498 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810647e:	687b      	ldr	r3, [r7, #4]
 8106480:	681a      	ldr	r2, [r3, #0]
 8106482:	683b      	ldr	r3, [r7, #0]
 8106484:	681b      	ldr	r3, [r3, #0]
 8106486:	4619      	mov	r1, r3
 8106488:	4610      	mov	r0, r2
 810648a:	f000 fc10 	bl	8106cae <TIM_ITRx_SetConfig>
      break;
 810648e:	e003      	b.n	8106498 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8106490:	2301      	movs	r3, #1
 8106492:	73fb      	strb	r3, [r7, #15]
      break;
 8106494:	e000      	b.n	8106498 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8106496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8106498:	687b      	ldr	r3, [r7, #4]
 810649a:	2201      	movs	r2, #1
 810649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81064a0:	687b      	ldr	r3, [r7, #4]
 81064a2:	2200      	movs	r2, #0
 81064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 81064aa:	4618      	mov	r0, r3
 81064ac:	3710      	adds	r7, #16
 81064ae:	46bd      	mov	sp, r7
 81064b0:	bd80      	pop	{r7, pc}
 81064b2:	bf00      	nop
 81064b4:	00100040 	.word	0x00100040
 81064b8:	00100030 	.word	0x00100030
 81064bc:	00100020 	.word	0x00100020

081064c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81064c0:	b480      	push	{r7}
 81064c2:	b083      	sub	sp, #12
 81064c4:	af00      	add	r7, sp, #0
 81064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81064c8:	bf00      	nop
 81064ca:	370c      	adds	r7, #12
 81064cc:	46bd      	mov	sp, r7
 81064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064d2:	4770      	bx	lr

081064d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81064d4:	b480      	push	{r7}
 81064d6:	b083      	sub	sp, #12
 81064d8:	af00      	add	r7, sp, #0
 81064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81064dc:	bf00      	nop
 81064de:	370c      	adds	r7, #12
 81064e0:	46bd      	mov	sp, r7
 81064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064e6:	4770      	bx	lr

081064e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81064e8:	b480      	push	{r7}
 81064ea:	b083      	sub	sp, #12
 81064ec:	af00      	add	r7, sp, #0
 81064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81064f0:	bf00      	nop
 81064f2:	370c      	adds	r7, #12
 81064f4:	46bd      	mov	sp, r7
 81064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064fa:	4770      	bx	lr

081064fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81064fc:	b480      	push	{r7}
 81064fe:	b083      	sub	sp, #12
 8106500:	af00      	add	r7, sp, #0
 8106502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8106504:	bf00      	nop
 8106506:	370c      	adds	r7, #12
 8106508:	46bd      	mov	sp, r7
 810650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810650e:	4770      	bx	lr

08106510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8106510:	b480      	push	{r7}
 8106512:	b085      	sub	sp, #20
 8106514:	af00      	add	r7, sp, #0
 8106516:	6078      	str	r0, [r7, #4]
 8106518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810651a:	687b      	ldr	r3, [r7, #4]
 810651c:	681b      	ldr	r3, [r3, #0]
 810651e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106520:	687b      	ldr	r3, [r7, #4]
 8106522:	4a40      	ldr	r2, [pc, #256]	; (8106624 <TIM_Base_SetConfig+0x114>)
 8106524:	4293      	cmp	r3, r2
 8106526:	d013      	beq.n	8106550 <TIM_Base_SetConfig+0x40>
 8106528:	687b      	ldr	r3, [r7, #4]
 810652a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810652e:	d00f      	beq.n	8106550 <TIM_Base_SetConfig+0x40>
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	4a3d      	ldr	r2, [pc, #244]	; (8106628 <TIM_Base_SetConfig+0x118>)
 8106534:	4293      	cmp	r3, r2
 8106536:	d00b      	beq.n	8106550 <TIM_Base_SetConfig+0x40>
 8106538:	687b      	ldr	r3, [r7, #4]
 810653a:	4a3c      	ldr	r2, [pc, #240]	; (810662c <TIM_Base_SetConfig+0x11c>)
 810653c:	4293      	cmp	r3, r2
 810653e:	d007      	beq.n	8106550 <TIM_Base_SetConfig+0x40>
 8106540:	687b      	ldr	r3, [r7, #4]
 8106542:	4a3b      	ldr	r2, [pc, #236]	; (8106630 <TIM_Base_SetConfig+0x120>)
 8106544:	4293      	cmp	r3, r2
 8106546:	d003      	beq.n	8106550 <TIM_Base_SetConfig+0x40>
 8106548:	687b      	ldr	r3, [r7, #4]
 810654a:	4a3a      	ldr	r2, [pc, #232]	; (8106634 <TIM_Base_SetConfig+0x124>)
 810654c:	4293      	cmp	r3, r2
 810654e:	d108      	bne.n	8106562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106550:	68fb      	ldr	r3, [r7, #12]
 8106552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8106558:	683b      	ldr	r3, [r7, #0]
 810655a:	685b      	ldr	r3, [r3, #4]
 810655c:	68fa      	ldr	r2, [r7, #12]
 810655e:	4313      	orrs	r3, r2
 8106560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8106562:	687b      	ldr	r3, [r7, #4]
 8106564:	4a2f      	ldr	r2, [pc, #188]	; (8106624 <TIM_Base_SetConfig+0x114>)
 8106566:	4293      	cmp	r3, r2
 8106568:	d01f      	beq.n	81065aa <TIM_Base_SetConfig+0x9a>
 810656a:	687b      	ldr	r3, [r7, #4]
 810656c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106570:	d01b      	beq.n	81065aa <TIM_Base_SetConfig+0x9a>
 8106572:	687b      	ldr	r3, [r7, #4]
 8106574:	4a2c      	ldr	r2, [pc, #176]	; (8106628 <TIM_Base_SetConfig+0x118>)
 8106576:	4293      	cmp	r3, r2
 8106578:	d017      	beq.n	81065aa <TIM_Base_SetConfig+0x9a>
 810657a:	687b      	ldr	r3, [r7, #4]
 810657c:	4a2b      	ldr	r2, [pc, #172]	; (810662c <TIM_Base_SetConfig+0x11c>)
 810657e:	4293      	cmp	r3, r2
 8106580:	d013      	beq.n	81065aa <TIM_Base_SetConfig+0x9a>
 8106582:	687b      	ldr	r3, [r7, #4]
 8106584:	4a2a      	ldr	r2, [pc, #168]	; (8106630 <TIM_Base_SetConfig+0x120>)
 8106586:	4293      	cmp	r3, r2
 8106588:	d00f      	beq.n	81065aa <TIM_Base_SetConfig+0x9a>
 810658a:	687b      	ldr	r3, [r7, #4]
 810658c:	4a29      	ldr	r2, [pc, #164]	; (8106634 <TIM_Base_SetConfig+0x124>)
 810658e:	4293      	cmp	r3, r2
 8106590:	d00b      	beq.n	81065aa <TIM_Base_SetConfig+0x9a>
 8106592:	687b      	ldr	r3, [r7, #4]
 8106594:	4a28      	ldr	r2, [pc, #160]	; (8106638 <TIM_Base_SetConfig+0x128>)
 8106596:	4293      	cmp	r3, r2
 8106598:	d007      	beq.n	81065aa <TIM_Base_SetConfig+0x9a>
 810659a:	687b      	ldr	r3, [r7, #4]
 810659c:	4a27      	ldr	r2, [pc, #156]	; (810663c <TIM_Base_SetConfig+0x12c>)
 810659e:	4293      	cmp	r3, r2
 81065a0:	d003      	beq.n	81065aa <TIM_Base_SetConfig+0x9a>
 81065a2:	687b      	ldr	r3, [r7, #4]
 81065a4:	4a26      	ldr	r2, [pc, #152]	; (8106640 <TIM_Base_SetConfig+0x130>)
 81065a6:	4293      	cmp	r3, r2
 81065a8:	d108      	bne.n	81065bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81065aa:	68fb      	ldr	r3, [r7, #12]
 81065ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81065b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81065b2:	683b      	ldr	r3, [r7, #0]
 81065b4:	68db      	ldr	r3, [r3, #12]
 81065b6:	68fa      	ldr	r2, [r7, #12]
 81065b8:	4313      	orrs	r3, r2
 81065ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81065bc:	68fb      	ldr	r3, [r7, #12]
 81065be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81065c2:	683b      	ldr	r3, [r7, #0]
 81065c4:	695b      	ldr	r3, [r3, #20]
 81065c6:	4313      	orrs	r3, r2
 81065c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81065ca:	687b      	ldr	r3, [r7, #4]
 81065cc:	68fa      	ldr	r2, [r7, #12]
 81065ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81065d0:	683b      	ldr	r3, [r7, #0]
 81065d2:	689a      	ldr	r2, [r3, #8]
 81065d4:	687b      	ldr	r3, [r7, #4]
 81065d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81065d8:	683b      	ldr	r3, [r7, #0]
 81065da:	681a      	ldr	r2, [r3, #0]
 81065dc:	687b      	ldr	r3, [r7, #4]
 81065de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81065e0:	687b      	ldr	r3, [r7, #4]
 81065e2:	4a10      	ldr	r2, [pc, #64]	; (8106624 <TIM_Base_SetConfig+0x114>)
 81065e4:	4293      	cmp	r3, r2
 81065e6:	d00f      	beq.n	8106608 <TIM_Base_SetConfig+0xf8>
 81065e8:	687b      	ldr	r3, [r7, #4]
 81065ea:	4a12      	ldr	r2, [pc, #72]	; (8106634 <TIM_Base_SetConfig+0x124>)
 81065ec:	4293      	cmp	r3, r2
 81065ee:	d00b      	beq.n	8106608 <TIM_Base_SetConfig+0xf8>
 81065f0:	687b      	ldr	r3, [r7, #4]
 81065f2:	4a11      	ldr	r2, [pc, #68]	; (8106638 <TIM_Base_SetConfig+0x128>)
 81065f4:	4293      	cmp	r3, r2
 81065f6:	d007      	beq.n	8106608 <TIM_Base_SetConfig+0xf8>
 81065f8:	687b      	ldr	r3, [r7, #4]
 81065fa:	4a10      	ldr	r2, [pc, #64]	; (810663c <TIM_Base_SetConfig+0x12c>)
 81065fc:	4293      	cmp	r3, r2
 81065fe:	d003      	beq.n	8106608 <TIM_Base_SetConfig+0xf8>
 8106600:	687b      	ldr	r3, [r7, #4]
 8106602:	4a0f      	ldr	r2, [pc, #60]	; (8106640 <TIM_Base_SetConfig+0x130>)
 8106604:	4293      	cmp	r3, r2
 8106606:	d103      	bne.n	8106610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8106608:	683b      	ldr	r3, [r7, #0]
 810660a:	691a      	ldr	r2, [r3, #16]
 810660c:	687b      	ldr	r3, [r7, #4]
 810660e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8106610:	687b      	ldr	r3, [r7, #4]
 8106612:	2201      	movs	r2, #1
 8106614:	615a      	str	r2, [r3, #20]
}
 8106616:	bf00      	nop
 8106618:	3714      	adds	r7, #20
 810661a:	46bd      	mov	sp, r7
 810661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106620:	4770      	bx	lr
 8106622:	bf00      	nop
 8106624:	40010000 	.word	0x40010000
 8106628:	40000400 	.word	0x40000400
 810662c:	40000800 	.word	0x40000800
 8106630:	40000c00 	.word	0x40000c00
 8106634:	40010400 	.word	0x40010400
 8106638:	40014000 	.word	0x40014000
 810663c:	40014400 	.word	0x40014400
 8106640:	40014800 	.word	0x40014800

08106644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106644:	b480      	push	{r7}
 8106646:	b087      	sub	sp, #28
 8106648:	af00      	add	r7, sp, #0
 810664a:	6078      	str	r0, [r7, #4]
 810664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810664e:	687b      	ldr	r3, [r7, #4]
 8106650:	6a1b      	ldr	r3, [r3, #32]
 8106652:	f023 0201 	bic.w	r2, r3, #1
 8106656:	687b      	ldr	r3, [r7, #4]
 8106658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810665a:	687b      	ldr	r3, [r7, #4]
 810665c:	6a1b      	ldr	r3, [r3, #32]
 810665e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106660:	687b      	ldr	r3, [r7, #4]
 8106662:	685b      	ldr	r3, [r3, #4]
 8106664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8106666:	687b      	ldr	r3, [r7, #4]
 8106668:	699b      	ldr	r3, [r3, #24]
 810666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810666c:	68fb      	ldr	r3, [r7, #12]
 810666e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8106678:	68fb      	ldr	r3, [r7, #12]
 810667a:	f023 0303 	bic.w	r3, r3, #3
 810667e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106680:	683b      	ldr	r3, [r7, #0]
 8106682:	681b      	ldr	r3, [r3, #0]
 8106684:	68fa      	ldr	r2, [r7, #12]
 8106686:	4313      	orrs	r3, r2
 8106688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810668a:	697b      	ldr	r3, [r7, #20]
 810668c:	f023 0302 	bic.w	r3, r3, #2
 8106690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8106692:	683b      	ldr	r3, [r7, #0]
 8106694:	689b      	ldr	r3, [r3, #8]
 8106696:	697a      	ldr	r2, [r7, #20]
 8106698:	4313      	orrs	r3, r2
 810669a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810669c:	687b      	ldr	r3, [r7, #4]
 810669e:	4a2c      	ldr	r2, [pc, #176]	; (8106750 <TIM_OC1_SetConfig+0x10c>)
 81066a0:	4293      	cmp	r3, r2
 81066a2:	d00f      	beq.n	81066c4 <TIM_OC1_SetConfig+0x80>
 81066a4:	687b      	ldr	r3, [r7, #4]
 81066a6:	4a2b      	ldr	r2, [pc, #172]	; (8106754 <TIM_OC1_SetConfig+0x110>)
 81066a8:	4293      	cmp	r3, r2
 81066aa:	d00b      	beq.n	81066c4 <TIM_OC1_SetConfig+0x80>
 81066ac:	687b      	ldr	r3, [r7, #4]
 81066ae:	4a2a      	ldr	r2, [pc, #168]	; (8106758 <TIM_OC1_SetConfig+0x114>)
 81066b0:	4293      	cmp	r3, r2
 81066b2:	d007      	beq.n	81066c4 <TIM_OC1_SetConfig+0x80>
 81066b4:	687b      	ldr	r3, [r7, #4]
 81066b6:	4a29      	ldr	r2, [pc, #164]	; (810675c <TIM_OC1_SetConfig+0x118>)
 81066b8:	4293      	cmp	r3, r2
 81066ba:	d003      	beq.n	81066c4 <TIM_OC1_SetConfig+0x80>
 81066bc:	687b      	ldr	r3, [r7, #4]
 81066be:	4a28      	ldr	r2, [pc, #160]	; (8106760 <TIM_OC1_SetConfig+0x11c>)
 81066c0:	4293      	cmp	r3, r2
 81066c2:	d10c      	bne.n	81066de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 81066c4:	697b      	ldr	r3, [r7, #20]
 81066c6:	f023 0308 	bic.w	r3, r3, #8
 81066ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 81066cc:	683b      	ldr	r3, [r7, #0]
 81066ce:	68db      	ldr	r3, [r3, #12]
 81066d0:	697a      	ldr	r2, [r7, #20]
 81066d2:	4313      	orrs	r3, r2
 81066d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 81066d6:	697b      	ldr	r3, [r7, #20]
 81066d8:	f023 0304 	bic.w	r3, r3, #4
 81066dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	4a1b      	ldr	r2, [pc, #108]	; (8106750 <TIM_OC1_SetConfig+0x10c>)
 81066e2:	4293      	cmp	r3, r2
 81066e4:	d00f      	beq.n	8106706 <TIM_OC1_SetConfig+0xc2>
 81066e6:	687b      	ldr	r3, [r7, #4]
 81066e8:	4a1a      	ldr	r2, [pc, #104]	; (8106754 <TIM_OC1_SetConfig+0x110>)
 81066ea:	4293      	cmp	r3, r2
 81066ec:	d00b      	beq.n	8106706 <TIM_OC1_SetConfig+0xc2>
 81066ee:	687b      	ldr	r3, [r7, #4]
 81066f0:	4a19      	ldr	r2, [pc, #100]	; (8106758 <TIM_OC1_SetConfig+0x114>)
 81066f2:	4293      	cmp	r3, r2
 81066f4:	d007      	beq.n	8106706 <TIM_OC1_SetConfig+0xc2>
 81066f6:	687b      	ldr	r3, [r7, #4]
 81066f8:	4a18      	ldr	r2, [pc, #96]	; (810675c <TIM_OC1_SetConfig+0x118>)
 81066fa:	4293      	cmp	r3, r2
 81066fc:	d003      	beq.n	8106706 <TIM_OC1_SetConfig+0xc2>
 81066fe:	687b      	ldr	r3, [r7, #4]
 8106700:	4a17      	ldr	r2, [pc, #92]	; (8106760 <TIM_OC1_SetConfig+0x11c>)
 8106702:	4293      	cmp	r3, r2
 8106704:	d111      	bne.n	810672a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8106706:	693b      	ldr	r3, [r7, #16]
 8106708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810670c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810670e:	693b      	ldr	r3, [r7, #16]
 8106710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8106716:	683b      	ldr	r3, [r7, #0]
 8106718:	695b      	ldr	r3, [r3, #20]
 810671a:	693a      	ldr	r2, [r7, #16]
 810671c:	4313      	orrs	r3, r2
 810671e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8106720:	683b      	ldr	r3, [r7, #0]
 8106722:	699b      	ldr	r3, [r3, #24]
 8106724:	693a      	ldr	r2, [r7, #16]
 8106726:	4313      	orrs	r3, r2
 8106728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810672a:	687b      	ldr	r3, [r7, #4]
 810672c:	693a      	ldr	r2, [r7, #16]
 810672e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	68fa      	ldr	r2, [r7, #12]
 8106734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8106736:	683b      	ldr	r3, [r7, #0]
 8106738:	685a      	ldr	r2, [r3, #4]
 810673a:	687b      	ldr	r3, [r7, #4]
 810673c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810673e:	687b      	ldr	r3, [r7, #4]
 8106740:	697a      	ldr	r2, [r7, #20]
 8106742:	621a      	str	r2, [r3, #32]
}
 8106744:	bf00      	nop
 8106746:	371c      	adds	r7, #28
 8106748:	46bd      	mov	sp, r7
 810674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810674e:	4770      	bx	lr
 8106750:	40010000 	.word	0x40010000
 8106754:	40010400 	.word	0x40010400
 8106758:	40014000 	.word	0x40014000
 810675c:	40014400 	.word	0x40014400
 8106760:	40014800 	.word	0x40014800

08106764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106764:	b480      	push	{r7}
 8106766:	b087      	sub	sp, #28
 8106768:	af00      	add	r7, sp, #0
 810676a:	6078      	str	r0, [r7, #4]
 810676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810676e:	687b      	ldr	r3, [r7, #4]
 8106770:	6a1b      	ldr	r3, [r3, #32]
 8106772:	f023 0210 	bic.w	r2, r3, #16
 8106776:	687b      	ldr	r3, [r7, #4]
 8106778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810677a:	687b      	ldr	r3, [r7, #4]
 810677c:	6a1b      	ldr	r3, [r3, #32]
 810677e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106780:	687b      	ldr	r3, [r7, #4]
 8106782:	685b      	ldr	r3, [r3, #4]
 8106784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8106786:	687b      	ldr	r3, [r7, #4]
 8106788:	699b      	ldr	r3, [r3, #24]
 810678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810678c:	68fb      	ldr	r3, [r7, #12]
 810678e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8106798:	68fb      	ldr	r3, [r7, #12]
 810679a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810679e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81067a0:	683b      	ldr	r3, [r7, #0]
 81067a2:	681b      	ldr	r3, [r3, #0]
 81067a4:	021b      	lsls	r3, r3, #8
 81067a6:	68fa      	ldr	r2, [r7, #12]
 81067a8:	4313      	orrs	r3, r2
 81067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 81067ac:	697b      	ldr	r3, [r7, #20]
 81067ae:	f023 0320 	bic.w	r3, r3, #32
 81067b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 81067b4:	683b      	ldr	r3, [r7, #0]
 81067b6:	689b      	ldr	r3, [r3, #8]
 81067b8:	011b      	lsls	r3, r3, #4
 81067ba:	697a      	ldr	r2, [r7, #20]
 81067bc:	4313      	orrs	r3, r2
 81067be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 81067c0:	687b      	ldr	r3, [r7, #4]
 81067c2:	4a28      	ldr	r2, [pc, #160]	; (8106864 <TIM_OC2_SetConfig+0x100>)
 81067c4:	4293      	cmp	r3, r2
 81067c6:	d003      	beq.n	81067d0 <TIM_OC2_SetConfig+0x6c>
 81067c8:	687b      	ldr	r3, [r7, #4]
 81067ca:	4a27      	ldr	r2, [pc, #156]	; (8106868 <TIM_OC2_SetConfig+0x104>)
 81067cc:	4293      	cmp	r3, r2
 81067ce:	d10d      	bne.n	81067ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 81067d0:	697b      	ldr	r3, [r7, #20]
 81067d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81067d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 81067d8:	683b      	ldr	r3, [r7, #0]
 81067da:	68db      	ldr	r3, [r3, #12]
 81067dc:	011b      	lsls	r3, r3, #4
 81067de:	697a      	ldr	r2, [r7, #20]
 81067e0:	4313      	orrs	r3, r2
 81067e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 81067e4:	697b      	ldr	r3, [r7, #20]
 81067e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81067ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	4a1d      	ldr	r2, [pc, #116]	; (8106864 <TIM_OC2_SetConfig+0x100>)
 81067f0:	4293      	cmp	r3, r2
 81067f2:	d00f      	beq.n	8106814 <TIM_OC2_SetConfig+0xb0>
 81067f4:	687b      	ldr	r3, [r7, #4]
 81067f6:	4a1c      	ldr	r2, [pc, #112]	; (8106868 <TIM_OC2_SetConfig+0x104>)
 81067f8:	4293      	cmp	r3, r2
 81067fa:	d00b      	beq.n	8106814 <TIM_OC2_SetConfig+0xb0>
 81067fc:	687b      	ldr	r3, [r7, #4]
 81067fe:	4a1b      	ldr	r2, [pc, #108]	; (810686c <TIM_OC2_SetConfig+0x108>)
 8106800:	4293      	cmp	r3, r2
 8106802:	d007      	beq.n	8106814 <TIM_OC2_SetConfig+0xb0>
 8106804:	687b      	ldr	r3, [r7, #4]
 8106806:	4a1a      	ldr	r2, [pc, #104]	; (8106870 <TIM_OC2_SetConfig+0x10c>)
 8106808:	4293      	cmp	r3, r2
 810680a:	d003      	beq.n	8106814 <TIM_OC2_SetConfig+0xb0>
 810680c:	687b      	ldr	r3, [r7, #4]
 810680e:	4a19      	ldr	r2, [pc, #100]	; (8106874 <TIM_OC2_SetConfig+0x110>)
 8106810:	4293      	cmp	r3, r2
 8106812:	d113      	bne.n	810683c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8106814:	693b      	ldr	r3, [r7, #16]
 8106816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810681a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810681c:	693b      	ldr	r3, [r7, #16]
 810681e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106822:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8106824:	683b      	ldr	r3, [r7, #0]
 8106826:	695b      	ldr	r3, [r3, #20]
 8106828:	009b      	lsls	r3, r3, #2
 810682a:	693a      	ldr	r2, [r7, #16]
 810682c:	4313      	orrs	r3, r2
 810682e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106830:	683b      	ldr	r3, [r7, #0]
 8106832:	699b      	ldr	r3, [r3, #24]
 8106834:	009b      	lsls	r3, r3, #2
 8106836:	693a      	ldr	r2, [r7, #16]
 8106838:	4313      	orrs	r3, r2
 810683a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	693a      	ldr	r2, [r7, #16]
 8106840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106842:	687b      	ldr	r3, [r7, #4]
 8106844:	68fa      	ldr	r2, [r7, #12]
 8106846:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8106848:	683b      	ldr	r3, [r7, #0]
 810684a:	685a      	ldr	r2, [r3, #4]
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106850:	687b      	ldr	r3, [r7, #4]
 8106852:	697a      	ldr	r2, [r7, #20]
 8106854:	621a      	str	r2, [r3, #32]
}
 8106856:	bf00      	nop
 8106858:	371c      	adds	r7, #28
 810685a:	46bd      	mov	sp, r7
 810685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106860:	4770      	bx	lr
 8106862:	bf00      	nop
 8106864:	40010000 	.word	0x40010000
 8106868:	40010400 	.word	0x40010400
 810686c:	40014000 	.word	0x40014000
 8106870:	40014400 	.word	0x40014400
 8106874:	40014800 	.word	0x40014800

08106878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106878:	b480      	push	{r7}
 810687a:	b087      	sub	sp, #28
 810687c:	af00      	add	r7, sp, #0
 810687e:	6078      	str	r0, [r7, #4]
 8106880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8106882:	687b      	ldr	r3, [r7, #4]
 8106884:	6a1b      	ldr	r3, [r3, #32]
 8106886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810688a:	687b      	ldr	r3, [r7, #4]
 810688c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810688e:	687b      	ldr	r3, [r7, #4]
 8106890:	6a1b      	ldr	r3, [r3, #32]
 8106892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106894:	687b      	ldr	r3, [r7, #4]
 8106896:	685b      	ldr	r3, [r3, #4]
 8106898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810689a:	687b      	ldr	r3, [r7, #4]
 810689c:	69db      	ldr	r3, [r3, #28]
 810689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 81068a0:	68fb      	ldr	r3, [r7, #12]
 81068a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81068a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81068aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 81068ac:	68fb      	ldr	r3, [r7, #12]
 81068ae:	f023 0303 	bic.w	r3, r3, #3
 81068b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81068b4:	683b      	ldr	r3, [r7, #0]
 81068b6:	681b      	ldr	r3, [r3, #0]
 81068b8:	68fa      	ldr	r2, [r7, #12]
 81068ba:	4313      	orrs	r3, r2
 81068bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 81068be:	697b      	ldr	r3, [r7, #20]
 81068c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81068c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 81068c6:	683b      	ldr	r3, [r7, #0]
 81068c8:	689b      	ldr	r3, [r3, #8]
 81068ca:	021b      	lsls	r3, r3, #8
 81068cc:	697a      	ldr	r2, [r7, #20]
 81068ce:	4313      	orrs	r3, r2
 81068d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 81068d2:	687b      	ldr	r3, [r7, #4]
 81068d4:	4a27      	ldr	r2, [pc, #156]	; (8106974 <TIM_OC3_SetConfig+0xfc>)
 81068d6:	4293      	cmp	r3, r2
 81068d8:	d003      	beq.n	81068e2 <TIM_OC3_SetConfig+0x6a>
 81068da:	687b      	ldr	r3, [r7, #4]
 81068dc:	4a26      	ldr	r2, [pc, #152]	; (8106978 <TIM_OC3_SetConfig+0x100>)
 81068de:	4293      	cmp	r3, r2
 81068e0:	d10d      	bne.n	81068fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 81068e2:	697b      	ldr	r3, [r7, #20]
 81068e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81068e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81068ea:	683b      	ldr	r3, [r7, #0]
 81068ec:	68db      	ldr	r3, [r3, #12]
 81068ee:	021b      	lsls	r3, r3, #8
 81068f0:	697a      	ldr	r2, [r7, #20]
 81068f2:	4313      	orrs	r3, r2
 81068f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 81068f6:	697b      	ldr	r3, [r7, #20]
 81068f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81068fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81068fe:	687b      	ldr	r3, [r7, #4]
 8106900:	4a1c      	ldr	r2, [pc, #112]	; (8106974 <TIM_OC3_SetConfig+0xfc>)
 8106902:	4293      	cmp	r3, r2
 8106904:	d00f      	beq.n	8106926 <TIM_OC3_SetConfig+0xae>
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	4a1b      	ldr	r2, [pc, #108]	; (8106978 <TIM_OC3_SetConfig+0x100>)
 810690a:	4293      	cmp	r3, r2
 810690c:	d00b      	beq.n	8106926 <TIM_OC3_SetConfig+0xae>
 810690e:	687b      	ldr	r3, [r7, #4]
 8106910:	4a1a      	ldr	r2, [pc, #104]	; (810697c <TIM_OC3_SetConfig+0x104>)
 8106912:	4293      	cmp	r3, r2
 8106914:	d007      	beq.n	8106926 <TIM_OC3_SetConfig+0xae>
 8106916:	687b      	ldr	r3, [r7, #4]
 8106918:	4a19      	ldr	r2, [pc, #100]	; (8106980 <TIM_OC3_SetConfig+0x108>)
 810691a:	4293      	cmp	r3, r2
 810691c:	d003      	beq.n	8106926 <TIM_OC3_SetConfig+0xae>
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	4a18      	ldr	r2, [pc, #96]	; (8106984 <TIM_OC3_SetConfig+0x10c>)
 8106922:	4293      	cmp	r3, r2
 8106924:	d113      	bne.n	810694e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8106926:	693b      	ldr	r3, [r7, #16]
 8106928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810692c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810692e:	693b      	ldr	r3, [r7, #16]
 8106930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8106936:	683b      	ldr	r3, [r7, #0]
 8106938:	695b      	ldr	r3, [r3, #20]
 810693a:	011b      	lsls	r3, r3, #4
 810693c:	693a      	ldr	r2, [r7, #16]
 810693e:	4313      	orrs	r3, r2
 8106940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8106942:	683b      	ldr	r3, [r7, #0]
 8106944:	699b      	ldr	r3, [r3, #24]
 8106946:	011b      	lsls	r3, r3, #4
 8106948:	693a      	ldr	r2, [r7, #16]
 810694a:	4313      	orrs	r3, r2
 810694c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810694e:	687b      	ldr	r3, [r7, #4]
 8106950:	693a      	ldr	r2, [r7, #16]
 8106952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	68fa      	ldr	r2, [r7, #12]
 8106958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810695a:	683b      	ldr	r3, [r7, #0]
 810695c:	685a      	ldr	r2, [r3, #4]
 810695e:	687b      	ldr	r3, [r7, #4]
 8106960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106962:	687b      	ldr	r3, [r7, #4]
 8106964:	697a      	ldr	r2, [r7, #20]
 8106966:	621a      	str	r2, [r3, #32]
}
 8106968:	bf00      	nop
 810696a:	371c      	adds	r7, #28
 810696c:	46bd      	mov	sp, r7
 810696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106972:	4770      	bx	lr
 8106974:	40010000 	.word	0x40010000
 8106978:	40010400 	.word	0x40010400
 810697c:	40014000 	.word	0x40014000
 8106980:	40014400 	.word	0x40014400
 8106984:	40014800 	.word	0x40014800

08106988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106988:	b480      	push	{r7}
 810698a:	b087      	sub	sp, #28
 810698c:	af00      	add	r7, sp, #0
 810698e:	6078      	str	r0, [r7, #4]
 8106990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8106992:	687b      	ldr	r3, [r7, #4]
 8106994:	6a1b      	ldr	r3, [r3, #32]
 8106996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810699a:	687b      	ldr	r3, [r7, #4]
 810699c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810699e:	687b      	ldr	r3, [r7, #4]
 81069a0:	6a1b      	ldr	r3, [r3, #32]
 81069a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81069a4:	687b      	ldr	r3, [r7, #4]
 81069a6:	685b      	ldr	r3, [r3, #4]
 81069a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81069aa:	687b      	ldr	r3, [r7, #4]
 81069ac:	69db      	ldr	r3, [r3, #28]
 81069ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 81069b0:	68fb      	ldr	r3, [r7, #12]
 81069b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81069b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81069ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 81069bc:	68fb      	ldr	r3, [r7, #12]
 81069be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81069c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81069c4:	683b      	ldr	r3, [r7, #0]
 81069c6:	681b      	ldr	r3, [r3, #0]
 81069c8:	021b      	lsls	r3, r3, #8
 81069ca:	68fa      	ldr	r2, [r7, #12]
 81069cc:	4313      	orrs	r3, r2
 81069ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 81069d0:	693b      	ldr	r3, [r7, #16]
 81069d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81069d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81069d8:	683b      	ldr	r3, [r7, #0]
 81069da:	689b      	ldr	r3, [r3, #8]
 81069dc:	031b      	lsls	r3, r3, #12
 81069de:	693a      	ldr	r2, [r7, #16]
 81069e0:	4313      	orrs	r3, r2
 81069e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81069e4:	687b      	ldr	r3, [r7, #4]
 81069e6:	4a18      	ldr	r2, [pc, #96]	; (8106a48 <TIM_OC4_SetConfig+0xc0>)
 81069e8:	4293      	cmp	r3, r2
 81069ea:	d00f      	beq.n	8106a0c <TIM_OC4_SetConfig+0x84>
 81069ec:	687b      	ldr	r3, [r7, #4]
 81069ee:	4a17      	ldr	r2, [pc, #92]	; (8106a4c <TIM_OC4_SetConfig+0xc4>)
 81069f0:	4293      	cmp	r3, r2
 81069f2:	d00b      	beq.n	8106a0c <TIM_OC4_SetConfig+0x84>
 81069f4:	687b      	ldr	r3, [r7, #4]
 81069f6:	4a16      	ldr	r2, [pc, #88]	; (8106a50 <TIM_OC4_SetConfig+0xc8>)
 81069f8:	4293      	cmp	r3, r2
 81069fa:	d007      	beq.n	8106a0c <TIM_OC4_SetConfig+0x84>
 81069fc:	687b      	ldr	r3, [r7, #4]
 81069fe:	4a15      	ldr	r2, [pc, #84]	; (8106a54 <TIM_OC4_SetConfig+0xcc>)
 8106a00:	4293      	cmp	r3, r2
 8106a02:	d003      	beq.n	8106a0c <TIM_OC4_SetConfig+0x84>
 8106a04:	687b      	ldr	r3, [r7, #4]
 8106a06:	4a14      	ldr	r2, [pc, #80]	; (8106a58 <TIM_OC4_SetConfig+0xd0>)
 8106a08:	4293      	cmp	r3, r2
 8106a0a:	d109      	bne.n	8106a20 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8106a0c:	697b      	ldr	r3, [r7, #20]
 8106a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8106a12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8106a14:	683b      	ldr	r3, [r7, #0]
 8106a16:	695b      	ldr	r3, [r3, #20]
 8106a18:	019b      	lsls	r3, r3, #6
 8106a1a:	697a      	ldr	r2, [r7, #20]
 8106a1c:	4313      	orrs	r3, r2
 8106a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	697a      	ldr	r2, [r7, #20]
 8106a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	68fa      	ldr	r2, [r7, #12]
 8106a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8106a2c:	683b      	ldr	r3, [r7, #0]
 8106a2e:	685a      	ldr	r2, [r3, #4]
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106a34:	687b      	ldr	r3, [r7, #4]
 8106a36:	693a      	ldr	r2, [r7, #16]
 8106a38:	621a      	str	r2, [r3, #32]
}
 8106a3a:	bf00      	nop
 8106a3c:	371c      	adds	r7, #28
 8106a3e:	46bd      	mov	sp, r7
 8106a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a44:	4770      	bx	lr
 8106a46:	bf00      	nop
 8106a48:	40010000 	.word	0x40010000
 8106a4c:	40010400 	.word	0x40010400
 8106a50:	40014000 	.word	0x40014000
 8106a54:	40014400 	.word	0x40014400
 8106a58:	40014800 	.word	0x40014800

08106a5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8106a5c:	b480      	push	{r7}
 8106a5e:	b087      	sub	sp, #28
 8106a60:	af00      	add	r7, sp, #0
 8106a62:	6078      	str	r0, [r7, #4]
 8106a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8106a66:	687b      	ldr	r3, [r7, #4]
 8106a68:	6a1b      	ldr	r3, [r3, #32]
 8106a6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8106a6e:	687b      	ldr	r3, [r7, #4]
 8106a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106a72:	687b      	ldr	r3, [r7, #4]
 8106a74:	6a1b      	ldr	r3, [r3, #32]
 8106a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106a78:	687b      	ldr	r3, [r7, #4]
 8106a7a:	685b      	ldr	r3, [r3, #4]
 8106a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106a7e:	687b      	ldr	r3, [r7, #4]
 8106a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8106a84:	68fb      	ldr	r3, [r7, #12]
 8106a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106a90:	683b      	ldr	r3, [r7, #0]
 8106a92:	681b      	ldr	r3, [r3, #0]
 8106a94:	68fa      	ldr	r2, [r7, #12]
 8106a96:	4313      	orrs	r3, r2
 8106a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8106a9a:	693b      	ldr	r3, [r7, #16]
 8106a9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8106aa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8106aa2:	683b      	ldr	r3, [r7, #0]
 8106aa4:	689b      	ldr	r3, [r3, #8]
 8106aa6:	041b      	lsls	r3, r3, #16
 8106aa8:	693a      	ldr	r2, [r7, #16]
 8106aaa:	4313      	orrs	r3, r2
 8106aac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106aae:	687b      	ldr	r3, [r7, #4]
 8106ab0:	4a17      	ldr	r2, [pc, #92]	; (8106b10 <TIM_OC5_SetConfig+0xb4>)
 8106ab2:	4293      	cmp	r3, r2
 8106ab4:	d00f      	beq.n	8106ad6 <TIM_OC5_SetConfig+0x7a>
 8106ab6:	687b      	ldr	r3, [r7, #4]
 8106ab8:	4a16      	ldr	r2, [pc, #88]	; (8106b14 <TIM_OC5_SetConfig+0xb8>)
 8106aba:	4293      	cmp	r3, r2
 8106abc:	d00b      	beq.n	8106ad6 <TIM_OC5_SetConfig+0x7a>
 8106abe:	687b      	ldr	r3, [r7, #4]
 8106ac0:	4a15      	ldr	r2, [pc, #84]	; (8106b18 <TIM_OC5_SetConfig+0xbc>)
 8106ac2:	4293      	cmp	r3, r2
 8106ac4:	d007      	beq.n	8106ad6 <TIM_OC5_SetConfig+0x7a>
 8106ac6:	687b      	ldr	r3, [r7, #4]
 8106ac8:	4a14      	ldr	r2, [pc, #80]	; (8106b1c <TIM_OC5_SetConfig+0xc0>)
 8106aca:	4293      	cmp	r3, r2
 8106acc:	d003      	beq.n	8106ad6 <TIM_OC5_SetConfig+0x7a>
 8106ace:	687b      	ldr	r3, [r7, #4]
 8106ad0:	4a13      	ldr	r2, [pc, #76]	; (8106b20 <TIM_OC5_SetConfig+0xc4>)
 8106ad2:	4293      	cmp	r3, r2
 8106ad4:	d109      	bne.n	8106aea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8106ad6:	697b      	ldr	r3, [r7, #20]
 8106ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106adc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8106ade:	683b      	ldr	r3, [r7, #0]
 8106ae0:	695b      	ldr	r3, [r3, #20]
 8106ae2:	021b      	lsls	r3, r3, #8
 8106ae4:	697a      	ldr	r2, [r7, #20]
 8106ae6:	4313      	orrs	r3, r2
 8106ae8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106aea:	687b      	ldr	r3, [r7, #4]
 8106aec:	697a      	ldr	r2, [r7, #20]
 8106aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8106af0:	687b      	ldr	r3, [r7, #4]
 8106af2:	68fa      	ldr	r2, [r7, #12]
 8106af4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8106af6:	683b      	ldr	r3, [r7, #0]
 8106af8:	685a      	ldr	r2, [r3, #4]
 8106afa:	687b      	ldr	r3, [r7, #4]
 8106afc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106afe:	687b      	ldr	r3, [r7, #4]
 8106b00:	693a      	ldr	r2, [r7, #16]
 8106b02:	621a      	str	r2, [r3, #32]
}
 8106b04:	bf00      	nop
 8106b06:	371c      	adds	r7, #28
 8106b08:	46bd      	mov	sp, r7
 8106b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b0e:	4770      	bx	lr
 8106b10:	40010000 	.word	0x40010000
 8106b14:	40010400 	.word	0x40010400
 8106b18:	40014000 	.word	0x40014000
 8106b1c:	40014400 	.word	0x40014400
 8106b20:	40014800 	.word	0x40014800

08106b24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8106b24:	b480      	push	{r7}
 8106b26:	b087      	sub	sp, #28
 8106b28:	af00      	add	r7, sp, #0
 8106b2a:	6078      	str	r0, [r7, #4]
 8106b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8106b2e:	687b      	ldr	r3, [r7, #4]
 8106b30:	6a1b      	ldr	r3, [r3, #32]
 8106b32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8106b36:	687b      	ldr	r3, [r7, #4]
 8106b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106b3a:	687b      	ldr	r3, [r7, #4]
 8106b3c:	6a1b      	ldr	r3, [r3, #32]
 8106b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106b40:	687b      	ldr	r3, [r7, #4]
 8106b42:	685b      	ldr	r3, [r3, #4]
 8106b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106b46:	687b      	ldr	r3, [r7, #4]
 8106b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8106b4c:	68fb      	ldr	r3, [r7, #12]
 8106b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106b58:	683b      	ldr	r3, [r7, #0]
 8106b5a:	681b      	ldr	r3, [r3, #0]
 8106b5c:	021b      	lsls	r3, r3, #8
 8106b5e:	68fa      	ldr	r2, [r7, #12]
 8106b60:	4313      	orrs	r3, r2
 8106b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8106b64:	693b      	ldr	r3, [r7, #16]
 8106b66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8106b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8106b6c:	683b      	ldr	r3, [r7, #0]
 8106b6e:	689b      	ldr	r3, [r3, #8]
 8106b70:	051b      	lsls	r3, r3, #20
 8106b72:	693a      	ldr	r2, [r7, #16]
 8106b74:	4313      	orrs	r3, r2
 8106b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106b78:	687b      	ldr	r3, [r7, #4]
 8106b7a:	4a18      	ldr	r2, [pc, #96]	; (8106bdc <TIM_OC6_SetConfig+0xb8>)
 8106b7c:	4293      	cmp	r3, r2
 8106b7e:	d00f      	beq.n	8106ba0 <TIM_OC6_SetConfig+0x7c>
 8106b80:	687b      	ldr	r3, [r7, #4]
 8106b82:	4a17      	ldr	r2, [pc, #92]	; (8106be0 <TIM_OC6_SetConfig+0xbc>)
 8106b84:	4293      	cmp	r3, r2
 8106b86:	d00b      	beq.n	8106ba0 <TIM_OC6_SetConfig+0x7c>
 8106b88:	687b      	ldr	r3, [r7, #4]
 8106b8a:	4a16      	ldr	r2, [pc, #88]	; (8106be4 <TIM_OC6_SetConfig+0xc0>)
 8106b8c:	4293      	cmp	r3, r2
 8106b8e:	d007      	beq.n	8106ba0 <TIM_OC6_SetConfig+0x7c>
 8106b90:	687b      	ldr	r3, [r7, #4]
 8106b92:	4a15      	ldr	r2, [pc, #84]	; (8106be8 <TIM_OC6_SetConfig+0xc4>)
 8106b94:	4293      	cmp	r3, r2
 8106b96:	d003      	beq.n	8106ba0 <TIM_OC6_SetConfig+0x7c>
 8106b98:	687b      	ldr	r3, [r7, #4]
 8106b9a:	4a14      	ldr	r2, [pc, #80]	; (8106bec <TIM_OC6_SetConfig+0xc8>)
 8106b9c:	4293      	cmp	r3, r2
 8106b9e:	d109      	bne.n	8106bb4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8106ba0:	697b      	ldr	r3, [r7, #20]
 8106ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8106ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8106ba8:	683b      	ldr	r3, [r7, #0]
 8106baa:	695b      	ldr	r3, [r3, #20]
 8106bac:	029b      	lsls	r3, r3, #10
 8106bae:	697a      	ldr	r2, [r7, #20]
 8106bb0:	4313      	orrs	r3, r2
 8106bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106bb4:	687b      	ldr	r3, [r7, #4]
 8106bb6:	697a      	ldr	r2, [r7, #20]
 8106bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8106bba:	687b      	ldr	r3, [r7, #4]
 8106bbc:	68fa      	ldr	r2, [r7, #12]
 8106bbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8106bc0:	683b      	ldr	r3, [r7, #0]
 8106bc2:	685a      	ldr	r2, [r3, #4]
 8106bc4:	687b      	ldr	r3, [r7, #4]
 8106bc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106bc8:	687b      	ldr	r3, [r7, #4]
 8106bca:	693a      	ldr	r2, [r7, #16]
 8106bcc:	621a      	str	r2, [r3, #32]
}
 8106bce:	bf00      	nop
 8106bd0:	371c      	adds	r7, #28
 8106bd2:	46bd      	mov	sp, r7
 8106bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bd8:	4770      	bx	lr
 8106bda:	bf00      	nop
 8106bdc:	40010000 	.word	0x40010000
 8106be0:	40010400 	.word	0x40010400
 8106be4:	40014000 	.word	0x40014000
 8106be8:	40014400 	.word	0x40014400
 8106bec:	40014800 	.word	0x40014800

08106bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106bf0:	b480      	push	{r7}
 8106bf2:	b087      	sub	sp, #28
 8106bf4:	af00      	add	r7, sp, #0
 8106bf6:	60f8      	str	r0, [r7, #12]
 8106bf8:	60b9      	str	r1, [r7, #8]
 8106bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8106bfc:	68fb      	ldr	r3, [r7, #12]
 8106bfe:	6a1b      	ldr	r3, [r3, #32]
 8106c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106c02:	68fb      	ldr	r3, [r7, #12]
 8106c04:	6a1b      	ldr	r3, [r3, #32]
 8106c06:	f023 0201 	bic.w	r2, r3, #1
 8106c0a:	68fb      	ldr	r3, [r7, #12]
 8106c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106c0e:	68fb      	ldr	r3, [r7, #12]
 8106c10:	699b      	ldr	r3, [r3, #24]
 8106c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8106c14:	693b      	ldr	r3, [r7, #16]
 8106c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8106c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8106c1c:	687b      	ldr	r3, [r7, #4]
 8106c1e:	011b      	lsls	r3, r3, #4
 8106c20:	693a      	ldr	r2, [r7, #16]
 8106c22:	4313      	orrs	r3, r2
 8106c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8106c26:	697b      	ldr	r3, [r7, #20]
 8106c28:	f023 030a 	bic.w	r3, r3, #10
 8106c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8106c2e:	697a      	ldr	r2, [r7, #20]
 8106c30:	68bb      	ldr	r3, [r7, #8]
 8106c32:	4313      	orrs	r3, r2
 8106c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8106c36:	68fb      	ldr	r3, [r7, #12]
 8106c38:	693a      	ldr	r2, [r7, #16]
 8106c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8106c3c:	68fb      	ldr	r3, [r7, #12]
 8106c3e:	697a      	ldr	r2, [r7, #20]
 8106c40:	621a      	str	r2, [r3, #32]
}
 8106c42:	bf00      	nop
 8106c44:	371c      	adds	r7, #28
 8106c46:	46bd      	mov	sp, r7
 8106c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c4c:	4770      	bx	lr

08106c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106c4e:	b480      	push	{r7}
 8106c50:	b087      	sub	sp, #28
 8106c52:	af00      	add	r7, sp, #0
 8106c54:	60f8      	str	r0, [r7, #12]
 8106c56:	60b9      	str	r1, [r7, #8]
 8106c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106c5a:	68fb      	ldr	r3, [r7, #12]
 8106c5c:	6a1b      	ldr	r3, [r3, #32]
 8106c5e:	f023 0210 	bic.w	r2, r3, #16
 8106c62:	68fb      	ldr	r3, [r7, #12]
 8106c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106c66:	68fb      	ldr	r3, [r7, #12]
 8106c68:	699b      	ldr	r3, [r3, #24]
 8106c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8106c6c:	68fb      	ldr	r3, [r7, #12]
 8106c6e:	6a1b      	ldr	r3, [r3, #32]
 8106c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8106c72:	697b      	ldr	r3, [r7, #20]
 8106c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8106c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8106c7a:	687b      	ldr	r3, [r7, #4]
 8106c7c:	031b      	lsls	r3, r3, #12
 8106c7e:	697a      	ldr	r2, [r7, #20]
 8106c80:	4313      	orrs	r3, r2
 8106c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8106c84:	693b      	ldr	r3, [r7, #16]
 8106c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8106c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8106c8c:	68bb      	ldr	r3, [r7, #8]
 8106c8e:	011b      	lsls	r3, r3, #4
 8106c90:	693a      	ldr	r2, [r7, #16]
 8106c92:	4313      	orrs	r3, r2
 8106c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8106c96:	68fb      	ldr	r3, [r7, #12]
 8106c98:	697a      	ldr	r2, [r7, #20]
 8106c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8106c9c:	68fb      	ldr	r3, [r7, #12]
 8106c9e:	693a      	ldr	r2, [r7, #16]
 8106ca0:	621a      	str	r2, [r3, #32]
}
 8106ca2:	bf00      	nop
 8106ca4:	371c      	adds	r7, #28
 8106ca6:	46bd      	mov	sp, r7
 8106ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cac:	4770      	bx	lr

08106cae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8106cae:	b480      	push	{r7}
 8106cb0:	b085      	sub	sp, #20
 8106cb2:	af00      	add	r7, sp, #0
 8106cb4:	6078      	str	r0, [r7, #4]
 8106cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8106cb8:	687b      	ldr	r3, [r7, #4]
 8106cba:	689b      	ldr	r3, [r3, #8]
 8106cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8106cbe:	68fb      	ldr	r3, [r7, #12]
 8106cc0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8106cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106cc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8106cca:	683a      	ldr	r2, [r7, #0]
 8106ccc:	68fb      	ldr	r3, [r7, #12]
 8106cce:	4313      	orrs	r3, r2
 8106cd0:	f043 0307 	orr.w	r3, r3, #7
 8106cd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8106cd6:	687b      	ldr	r3, [r7, #4]
 8106cd8:	68fa      	ldr	r2, [r7, #12]
 8106cda:	609a      	str	r2, [r3, #8]
}
 8106cdc:	bf00      	nop
 8106cde:	3714      	adds	r7, #20
 8106ce0:	46bd      	mov	sp, r7
 8106ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ce6:	4770      	bx	lr

08106ce8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8106ce8:	b480      	push	{r7}
 8106cea:	b087      	sub	sp, #28
 8106cec:	af00      	add	r7, sp, #0
 8106cee:	60f8      	str	r0, [r7, #12]
 8106cf0:	60b9      	str	r1, [r7, #8]
 8106cf2:	607a      	str	r2, [r7, #4]
 8106cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8106cf6:	68fb      	ldr	r3, [r7, #12]
 8106cf8:	689b      	ldr	r3, [r3, #8]
 8106cfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8106cfc:	697b      	ldr	r3, [r7, #20]
 8106cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106d02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8106d04:	683b      	ldr	r3, [r7, #0]
 8106d06:	021a      	lsls	r2, r3, #8
 8106d08:	687b      	ldr	r3, [r7, #4]
 8106d0a:	431a      	orrs	r2, r3
 8106d0c:	68bb      	ldr	r3, [r7, #8]
 8106d0e:	4313      	orrs	r3, r2
 8106d10:	697a      	ldr	r2, [r7, #20]
 8106d12:	4313      	orrs	r3, r2
 8106d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8106d16:	68fb      	ldr	r3, [r7, #12]
 8106d18:	697a      	ldr	r2, [r7, #20]
 8106d1a:	609a      	str	r2, [r3, #8]
}
 8106d1c:	bf00      	nop
 8106d1e:	371c      	adds	r7, #28
 8106d20:	46bd      	mov	sp, r7
 8106d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d26:	4770      	bx	lr

08106d28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8106d28:	b480      	push	{r7}
 8106d2a:	b087      	sub	sp, #28
 8106d2c:	af00      	add	r7, sp, #0
 8106d2e:	60f8      	str	r0, [r7, #12]
 8106d30:	60b9      	str	r1, [r7, #8]
 8106d32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8106d34:	68bb      	ldr	r3, [r7, #8]
 8106d36:	f003 031f 	and.w	r3, r3, #31
 8106d3a:	2201      	movs	r2, #1
 8106d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8106d40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8106d42:	68fb      	ldr	r3, [r7, #12]
 8106d44:	6a1a      	ldr	r2, [r3, #32]
 8106d46:	697b      	ldr	r3, [r7, #20]
 8106d48:	43db      	mvns	r3, r3
 8106d4a:	401a      	ands	r2, r3
 8106d4c:	68fb      	ldr	r3, [r7, #12]
 8106d4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8106d50:	68fb      	ldr	r3, [r7, #12]
 8106d52:	6a1a      	ldr	r2, [r3, #32]
 8106d54:	68bb      	ldr	r3, [r7, #8]
 8106d56:	f003 031f 	and.w	r3, r3, #31
 8106d5a:	6879      	ldr	r1, [r7, #4]
 8106d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8106d60:	431a      	orrs	r2, r3
 8106d62:	68fb      	ldr	r3, [r7, #12]
 8106d64:	621a      	str	r2, [r3, #32]
}
 8106d66:	bf00      	nop
 8106d68:	371c      	adds	r7, #28
 8106d6a:	46bd      	mov	sp, r7
 8106d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d70:	4770      	bx	lr
	...

08106d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8106d74:	b480      	push	{r7}
 8106d76:	b085      	sub	sp, #20
 8106d78:	af00      	add	r7, sp, #0
 8106d7a:	6078      	str	r0, [r7, #4]
 8106d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8106d7e:	687b      	ldr	r3, [r7, #4]
 8106d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106d84:	2b01      	cmp	r3, #1
 8106d86:	d101      	bne.n	8106d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8106d88:	2302      	movs	r3, #2
 8106d8a:	e06d      	b.n	8106e68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8106d8c:	687b      	ldr	r3, [r7, #4]
 8106d8e:	2201      	movs	r2, #1
 8106d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106d94:	687b      	ldr	r3, [r7, #4]
 8106d96:	2202      	movs	r2, #2
 8106d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8106d9c:	687b      	ldr	r3, [r7, #4]
 8106d9e:	681b      	ldr	r3, [r3, #0]
 8106da0:	685b      	ldr	r3, [r3, #4]
 8106da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8106da4:	687b      	ldr	r3, [r7, #4]
 8106da6:	681b      	ldr	r3, [r3, #0]
 8106da8:	689b      	ldr	r3, [r3, #8]
 8106daa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106dac:	687b      	ldr	r3, [r7, #4]
 8106dae:	681b      	ldr	r3, [r3, #0]
 8106db0:	4a30      	ldr	r2, [pc, #192]	; (8106e74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8106db2:	4293      	cmp	r3, r2
 8106db4:	d004      	beq.n	8106dc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8106db6:	687b      	ldr	r3, [r7, #4]
 8106db8:	681b      	ldr	r3, [r3, #0]
 8106dba:	4a2f      	ldr	r2, [pc, #188]	; (8106e78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8106dbc:	4293      	cmp	r3, r2
 8106dbe:	d108      	bne.n	8106dd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8106dc0:	68fb      	ldr	r3, [r7, #12]
 8106dc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8106dc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8106dc8:	683b      	ldr	r3, [r7, #0]
 8106dca:	685b      	ldr	r3, [r3, #4]
 8106dcc:	68fa      	ldr	r2, [r7, #12]
 8106dce:	4313      	orrs	r3, r2
 8106dd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8106dd2:	68fb      	ldr	r3, [r7, #12]
 8106dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106dd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8106dda:	683b      	ldr	r3, [r7, #0]
 8106ddc:	681b      	ldr	r3, [r3, #0]
 8106dde:	68fa      	ldr	r2, [r7, #12]
 8106de0:	4313      	orrs	r3, r2
 8106de2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8106de4:	687b      	ldr	r3, [r7, #4]
 8106de6:	681b      	ldr	r3, [r3, #0]
 8106de8:	68fa      	ldr	r2, [r7, #12]
 8106dea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106dec:	687b      	ldr	r3, [r7, #4]
 8106dee:	681b      	ldr	r3, [r3, #0]
 8106df0:	4a20      	ldr	r2, [pc, #128]	; (8106e74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8106df2:	4293      	cmp	r3, r2
 8106df4:	d022      	beq.n	8106e3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106df6:	687b      	ldr	r3, [r7, #4]
 8106df8:	681b      	ldr	r3, [r3, #0]
 8106dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106dfe:	d01d      	beq.n	8106e3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106e00:	687b      	ldr	r3, [r7, #4]
 8106e02:	681b      	ldr	r3, [r3, #0]
 8106e04:	4a1d      	ldr	r2, [pc, #116]	; (8106e7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8106e06:	4293      	cmp	r3, r2
 8106e08:	d018      	beq.n	8106e3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106e0a:	687b      	ldr	r3, [r7, #4]
 8106e0c:	681b      	ldr	r3, [r3, #0]
 8106e0e:	4a1c      	ldr	r2, [pc, #112]	; (8106e80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8106e10:	4293      	cmp	r3, r2
 8106e12:	d013      	beq.n	8106e3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106e14:	687b      	ldr	r3, [r7, #4]
 8106e16:	681b      	ldr	r3, [r3, #0]
 8106e18:	4a1a      	ldr	r2, [pc, #104]	; (8106e84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8106e1a:	4293      	cmp	r3, r2
 8106e1c:	d00e      	beq.n	8106e3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106e1e:	687b      	ldr	r3, [r7, #4]
 8106e20:	681b      	ldr	r3, [r3, #0]
 8106e22:	4a15      	ldr	r2, [pc, #84]	; (8106e78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8106e24:	4293      	cmp	r3, r2
 8106e26:	d009      	beq.n	8106e3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106e28:	687b      	ldr	r3, [r7, #4]
 8106e2a:	681b      	ldr	r3, [r3, #0]
 8106e2c:	4a16      	ldr	r2, [pc, #88]	; (8106e88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8106e2e:	4293      	cmp	r3, r2
 8106e30:	d004      	beq.n	8106e3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106e32:	687b      	ldr	r3, [r7, #4]
 8106e34:	681b      	ldr	r3, [r3, #0]
 8106e36:	4a15      	ldr	r2, [pc, #84]	; (8106e8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8106e38:	4293      	cmp	r3, r2
 8106e3a:	d10c      	bne.n	8106e56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8106e3c:	68bb      	ldr	r3, [r7, #8]
 8106e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106e42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8106e44:	683b      	ldr	r3, [r7, #0]
 8106e46:	689b      	ldr	r3, [r3, #8]
 8106e48:	68ba      	ldr	r2, [r7, #8]
 8106e4a:	4313      	orrs	r3, r2
 8106e4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8106e4e:	687b      	ldr	r3, [r7, #4]
 8106e50:	681b      	ldr	r3, [r3, #0]
 8106e52:	68ba      	ldr	r2, [r7, #8]
 8106e54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8106e56:	687b      	ldr	r3, [r7, #4]
 8106e58:	2201      	movs	r2, #1
 8106e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8106e5e:	687b      	ldr	r3, [r7, #4]
 8106e60:	2200      	movs	r2, #0
 8106e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8106e66:	2300      	movs	r3, #0
}
 8106e68:	4618      	mov	r0, r3
 8106e6a:	3714      	adds	r7, #20
 8106e6c:	46bd      	mov	sp, r7
 8106e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e72:	4770      	bx	lr
 8106e74:	40010000 	.word	0x40010000
 8106e78:	40010400 	.word	0x40010400
 8106e7c:	40000400 	.word	0x40000400
 8106e80:	40000800 	.word	0x40000800
 8106e84:	40000c00 	.word	0x40000c00
 8106e88:	40001800 	.word	0x40001800
 8106e8c:	40014000 	.word	0x40014000

08106e90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8106e90:	b480      	push	{r7}
 8106e92:	b085      	sub	sp, #20
 8106e94:	af00      	add	r7, sp, #0
 8106e96:	6078      	str	r0, [r7, #4]
 8106e98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8106e9a:	2300      	movs	r3, #0
 8106e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8106e9e:	687b      	ldr	r3, [r7, #4]
 8106ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106ea4:	2b01      	cmp	r3, #1
 8106ea6:	d101      	bne.n	8106eac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8106ea8:	2302      	movs	r3, #2
 8106eaa:	e065      	b.n	8106f78 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8106eac:	687b      	ldr	r3, [r7, #4]
 8106eae:	2201      	movs	r2, #1
 8106eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8106eb4:	68fb      	ldr	r3, [r7, #12]
 8106eb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8106eba:	683b      	ldr	r3, [r7, #0]
 8106ebc:	68db      	ldr	r3, [r3, #12]
 8106ebe:	4313      	orrs	r3, r2
 8106ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8106ec2:	68fb      	ldr	r3, [r7, #12]
 8106ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106ec8:	683b      	ldr	r3, [r7, #0]
 8106eca:	689b      	ldr	r3, [r3, #8]
 8106ecc:	4313      	orrs	r3, r2
 8106ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8106ed0:	68fb      	ldr	r3, [r7, #12]
 8106ed2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8106ed6:	683b      	ldr	r3, [r7, #0]
 8106ed8:	685b      	ldr	r3, [r3, #4]
 8106eda:	4313      	orrs	r3, r2
 8106edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8106ede:	68fb      	ldr	r3, [r7, #12]
 8106ee0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8106ee4:	683b      	ldr	r3, [r7, #0]
 8106ee6:	681b      	ldr	r3, [r3, #0]
 8106ee8:	4313      	orrs	r3, r2
 8106eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8106eec:	68fb      	ldr	r3, [r7, #12]
 8106eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8106ef2:	683b      	ldr	r3, [r7, #0]
 8106ef4:	691b      	ldr	r3, [r3, #16]
 8106ef6:	4313      	orrs	r3, r2
 8106ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8106efa:	68fb      	ldr	r3, [r7, #12]
 8106efc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8106f00:	683b      	ldr	r3, [r7, #0]
 8106f02:	695b      	ldr	r3, [r3, #20]
 8106f04:	4313      	orrs	r3, r2
 8106f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8106f08:	68fb      	ldr	r3, [r7, #12]
 8106f0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8106f0e:	683b      	ldr	r3, [r7, #0]
 8106f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106f12:	4313      	orrs	r3, r2
 8106f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8106f16:	68fb      	ldr	r3, [r7, #12]
 8106f18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8106f1c:	683b      	ldr	r3, [r7, #0]
 8106f1e:	699b      	ldr	r3, [r3, #24]
 8106f20:	041b      	lsls	r3, r3, #16
 8106f22:	4313      	orrs	r3, r2
 8106f24:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	681b      	ldr	r3, [r3, #0]
 8106f2a:	4a16      	ldr	r2, [pc, #88]	; (8106f84 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8106f2c:	4293      	cmp	r3, r2
 8106f2e:	d004      	beq.n	8106f3a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	681b      	ldr	r3, [r3, #0]
 8106f34:	4a14      	ldr	r2, [pc, #80]	; (8106f88 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8106f36:	4293      	cmp	r3, r2
 8106f38:	d115      	bne.n	8106f66 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8106f3a:	68fb      	ldr	r3, [r7, #12]
 8106f3c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8106f40:	683b      	ldr	r3, [r7, #0]
 8106f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106f44:	051b      	lsls	r3, r3, #20
 8106f46:	4313      	orrs	r3, r2
 8106f48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8106f4a:	68fb      	ldr	r3, [r7, #12]
 8106f4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8106f50:	683b      	ldr	r3, [r7, #0]
 8106f52:	69db      	ldr	r3, [r3, #28]
 8106f54:	4313      	orrs	r3, r2
 8106f56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8106f58:	68fb      	ldr	r3, [r7, #12]
 8106f5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8106f5e:	683b      	ldr	r3, [r7, #0]
 8106f60:	6a1b      	ldr	r3, [r3, #32]
 8106f62:	4313      	orrs	r3, r2
 8106f64:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8106f66:	687b      	ldr	r3, [r7, #4]
 8106f68:	681b      	ldr	r3, [r3, #0]
 8106f6a:	68fa      	ldr	r2, [r7, #12]
 8106f6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8106f6e:	687b      	ldr	r3, [r7, #4]
 8106f70:	2200      	movs	r2, #0
 8106f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8106f76:	2300      	movs	r3, #0
}
 8106f78:	4618      	mov	r0, r3
 8106f7a:	3714      	adds	r7, #20
 8106f7c:	46bd      	mov	sp, r7
 8106f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f82:	4770      	bx	lr
 8106f84:	40010000 	.word	0x40010000
 8106f88:	40010400 	.word	0x40010400

08106f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8106f8c:	b480      	push	{r7}
 8106f8e:	b083      	sub	sp, #12
 8106f90:	af00      	add	r7, sp, #0
 8106f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8106f94:	bf00      	nop
 8106f96:	370c      	adds	r7, #12
 8106f98:	46bd      	mov	sp, r7
 8106f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f9e:	4770      	bx	lr

08106fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8106fa0:	b480      	push	{r7}
 8106fa2:	b083      	sub	sp, #12
 8106fa4:	af00      	add	r7, sp, #0
 8106fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8106fa8:	bf00      	nop
 8106faa:	370c      	adds	r7, #12
 8106fac:	46bd      	mov	sp, r7
 8106fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fb2:	4770      	bx	lr

08106fb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8106fb4:	b480      	push	{r7}
 8106fb6:	b083      	sub	sp, #12
 8106fb8:	af00      	add	r7, sp, #0
 8106fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8106fbc:	bf00      	nop
 8106fbe:	370c      	adds	r7, #12
 8106fc0:	46bd      	mov	sp, r7
 8106fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fc6:	4770      	bx	lr

08106fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8106fc8:	b580      	push	{r7, lr}
 8106fca:	b082      	sub	sp, #8
 8106fcc:	af00      	add	r7, sp, #0
 8106fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8106fd0:	687b      	ldr	r3, [r7, #4]
 8106fd2:	2b00      	cmp	r3, #0
 8106fd4:	d101      	bne.n	8106fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8106fd6:	2301      	movs	r3, #1
 8106fd8:	e042      	b.n	8107060 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8106fda:	687b      	ldr	r3, [r7, #4]
 8106fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106fe0:	2b00      	cmp	r3, #0
 8106fe2:	d106      	bne.n	8106ff2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8106fe4:	687b      	ldr	r3, [r7, #4]
 8106fe6:	2200      	movs	r2, #0
 8106fe8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8106fec:	6878      	ldr	r0, [r7, #4]
 8106fee:	f7fb f85f 	bl	81020b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8106ff2:	687b      	ldr	r3, [r7, #4]
 8106ff4:	2224      	movs	r2, #36	; 0x24
 8106ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8106ffa:	687b      	ldr	r3, [r7, #4]
 8106ffc:	681b      	ldr	r3, [r3, #0]
 8106ffe:	681a      	ldr	r2, [r3, #0]
 8107000:	687b      	ldr	r3, [r7, #4]
 8107002:	681b      	ldr	r3, [r3, #0]
 8107004:	f022 0201 	bic.w	r2, r2, #1
 8107008:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810700a:	6878      	ldr	r0, [r7, #4]
 810700c:	f000 f8ba 	bl	8107184 <UART_SetConfig>
 8107010:	4603      	mov	r3, r0
 8107012:	2b01      	cmp	r3, #1
 8107014:	d101      	bne.n	810701a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8107016:	2301      	movs	r3, #1
 8107018:	e022      	b.n	8107060 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810701a:	687b      	ldr	r3, [r7, #4]
 810701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810701e:	2b00      	cmp	r3, #0
 8107020:	d002      	beq.n	8107028 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8107022:	6878      	ldr	r0, [r7, #4]
 8107024:	f000 fe16 	bl	8107c54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107028:	687b      	ldr	r3, [r7, #4]
 810702a:	681b      	ldr	r3, [r3, #0]
 810702c:	685a      	ldr	r2, [r3, #4]
 810702e:	687b      	ldr	r3, [r7, #4]
 8107030:	681b      	ldr	r3, [r3, #0]
 8107032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107038:	687b      	ldr	r3, [r7, #4]
 810703a:	681b      	ldr	r3, [r3, #0]
 810703c:	689a      	ldr	r2, [r3, #8]
 810703e:	687b      	ldr	r3, [r7, #4]
 8107040:	681b      	ldr	r3, [r3, #0]
 8107042:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	681b      	ldr	r3, [r3, #0]
 810704c:	681a      	ldr	r2, [r3, #0]
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	681b      	ldr	r3, [r3, #0]
 8107052:	f042 0201 	orr.w	r2, r2, #1
 8107056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107058:	6878      	ldr	r0, [r7, #4]
 810705a:	f000 fe9d 	bl	8107d98 <UART_CheckIdleState>
 810705e:	4603      	mov	r3, r0
}
 8107060:	4618      	mov	r0, r3
 8107062:	3708      	adds	r7, #8
 8107064:	46bd      	mov	sp, r7
 8107066:	bd80      	pop	{r7, pc}

08107068 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107068:	b580      	push	{r7, lr}
 810706a:	b08a      	sub	sp, #40	; 0x28
 810706c:	af02      	add	r7, sp, #8
 810706e:	60f8      	str	r0, [r7, #12]
 8107070:	60b9      	str	r1, [r7, #8]
 8107072:	603b      	str	r3, [r7, #0]
 8107074:	4613      	mov	r3, r2
 8107076:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107078:	68fb      	ldr	r3, [r7, #12]
 810707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810707e:	2b20      	cmp	r3, #32
 8107080:	d17b      	bne.n	810717a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8107082:	68bb      	ldr	r3, [r7, #8]
 8107084:	2b00      	cmp	r3, #0
 8107086:	d002      	beq.n	810708e <HAL_UART_Transmit+0x26>
 8107088:	88fb      	ldrh	r3, [r7, #6]
 810708a:	2b00      	cmp	r3, #0
 810708c:	d101      	bne.n	8107092 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810708e:	2301      	movs	r3, #1
 8107090:	e074      	b.n	810717c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107092:	68fb      	ldr	r3, [r7, #12]
 8107094:	2200      	movs	r2, #0
 8107096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810709a:	68fb      	ldr	r3, [r7, #12]
 810709c:	2221      	movs	r2, #33	; 0x21
 810709e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81070a2:	f7fb fa3b 	bl	810251c <HAL_GetTick>
 81070a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81070a8:	68fb      	ldr	r3, [r7, #12]
 81070aa:	88fa      	ldrh	r2, [r7, #6]
 81070ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81070b0:	68fb      	ldr	r3, [r7, #12]
 81070b2:	88fa      	ldrh	r2, [r7, #6]
 81070b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81070b8:	68fb      	ldr	r3, [r7, #12]
 81070ba:	689b      	ldr	r3, [r3, #8]
 81070bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81070c0:	d108      	bne.n	81070d4 <HAL_UART_Transmit+0x6c>
 81070c2:	68fb      	ldr	r3, [r7, #12]
 81070c4:	691b      	ldr	r3, [r3, #16]
 81070c6:	2b00      	cmp	r3, #0
 81070c8:	d104      	bne.n	81070d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 81070ca:	2300      	movs	r3, #0
 81070cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81070ce:	68bb      	ldr	r3, [r7, #8]
 81070d0:	61bb      	str	r3, [r7, #24]
 81070d2:	e003      	b.n	81070dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 81070d4:	68bb      	ldr	r3, [r7, #8]
 81070d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81070d8:	2300      	movs	r3, #0
 81070da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 81070dc:	e030      	b.n	8107140 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81070de:	683b      	ldr	r3, [r7, #0]
 81070e0:	9300      	str	r3, [sp, #0]
 81070e2:	697b      	ldr	r3, [r7, #20]
 81070e4:	2200      	movs	r2, #0
 81070e6:	2180      	movs	r1, #128	; 0x80
 81070e8:	68f8      	ldr	r0, [r7, #12]
 81070ea:	f000 feff 	bl	8107eec <UART_WaitOnFlagUntilTimeout>
 81070ee:	4603      	mov	r3, r0
 81070f0:	2b00      	cmp	r3, #0
 81070f2:	d005      	beq.n	8107100 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 81070f4:	68fb      	ldr	r3, [r7, #12]
 81070f6:	2220      	movs	r2, #32
 81070f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 81070fc:	2303      	movs	r3, #3
 81070fe:	e03d      	b.n	810717c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8107100:	69fb      	ldr	r3, [r7, #28]
 8107102:	2b00      	cmp	r3, #0
 8107104:	d10b      	bne.n	810711e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8107106:	69bb      	ldr	r3, [r7, #24]
 8107108:	881b      	ldrh	r3, [r3, #0]
 810710a:	461a      	mov	r2, r3
 810710c:	68fb      	ldr	r3, [r7, #12]
 810710e:	681b      	ldr	r3, [r3, #0]
 8107110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8107114:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8107116:	69bb      	ldr	r3, [r7, #24]
 8107118:	3302      	adds	r3, #2
 810711a:	61bb      	str	r3, [r7, #24]
 810711c:	e007      	b.n	810712e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810711e:	69fb      	ldr	r3, [r7, #28]
 8107120:	781a      	ldrb	r2, [r3, #0]
 8107122:	68fb      	ldr	r3, [r7, #12]
 8107124:	681b      	ldr	r3, [r3, #0]
 8107126:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8107128:	69fb      	ldr	r3, [r7, #28]
 810712a:	3301      	adds	r3, #1
 810712c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810712e:	68fb      	ldr	r3, [r7, #12]
 8107130:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107134:	b29b      	uxth	r3, r3
 8107136:	3b01      	subs	r3, #1
 8107138:	b29a      	uxth	r2, r3
 810713a:	68fb      	ldr	r3, [r7, #12]
 810713c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8107140:	68fb      	ldr	r3, [r7, #12]
 8107142:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8107146:	b29b      	uxth	r3, r3
 8107148:	2b00      	cmp	r3, #0
 810714a:	d1c8      	bne.n	81070de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810714c:	683b      	ldr	r3, [r7, #0]
 810714e:	9300      	str	r3, [sp, #0]
 8107150:	697b      	ldr	r3, [r7, #20]
 8107152:	2200      	movs	r2, #0
 8107154:	2140      	movs	r1, #64	; 0x40
 8107156:	68f8      	ldr	r0, [r7, #12]
 8107158:	f000 fec8 	bl	8107eec <UART_WaitOnFlagUntilTimeout>
 810715c:	4603      	mov	r3, r0
 810715e:	2b00      	cmp	r3, #0
 8107160:	d005      	beq.n	810716e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8107162:	68fb      	ldr	r3, [r7, #12]
 8107164:	2220      	movs	r2, #32
 8107166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 810716a:	2303      	movs	r3, #3
 810716c:	e006      	b.n	810717c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810716e:	68fb      	ldr	r3, [r7, #12]
 8107170:	2220      	movs	r2, #32
 8107172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8107176:	2300      	movs	r3, #0
 8107178:	e000      	b.n	810717c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810717a:	2302      	movs	r3, #2
  }
}
 810717c:	4618      	mov	r0, r3
 810717e:	3720      	adds	r7, #32
 8107180:	46bd      	mov	sp, r7
 8107182:	bd80      	pop	{r7, pc}

08107184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8107184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8107188:	b092      	sub	sp, #72	; 0x48
 810718a:	af00      	add	r7, sp, #0
 810718c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810718e:	2300      	movs	r3, #0
 8107190:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107194:	697b      	ldr	r3, [r7, #20]
 8107196:	689a      	ldr	r2, [r3, #8]
 8107198:	697b      	ldr	r3, [r7, #20]
 810719a:	691b      	ldr	r3, [r3, #16]
 810719c:	431a      	orrs	r2, r3
 810719e:	697b      	ldr	r3, [r7, #20]
 81071a0:	695b      	ldr	r3, [r3, #20]
 81071a2:	431a      	orrs	r2, r3
 81071a4:	697b      	ldr	r3, [r7, #20]
 81071a6:	69db      	ldr	r3, [r3, #28]
 81071a8:	4313      	orrs	r3, r2
 81071aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81071ac:	697b      	ldr	r3, [r7, #20]
 81071ae:	681b      	ldr	r3, [r3, #0]
 81071b0:	681a      	ldr	r2, [r3, #0]
 81071b2:	4bbd      	ldr	r3, [pc, #756]	; (81074a8 <UART_SetConfig+0x324>)
 81071b4:	4013      	ands	r3, r2
 81071b6:	697a      	ldr	r2, [r7, #20]
 81071b8:	6812      	ldr	r2, [r2, #0]
 81071ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81071bc:	430b      	orrs	r3, r1
 81071be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81071c0:	697b      	ldr	r3, [r7, #20]
 81071c2:	681b      	ldr	r3, [r3, #0]
 81071c4:	685b      	ldr	r3, [r3, #4]
 81071c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81071ca:	697b      	ldr	r3, [r7, #20]
 81071cc:	68da      	ldr	r2, [r3, #12]
 81071ce:	697b      	ldr	r3, [r7, #20]
 81071d0:	681b      	ldr	r3, [r3, #0]
 81071d2:	430a      	orrs	r2, r1
 81071d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81071d6:	697b      	ldr	r3, [r7, #20]
 81071d8:	699b      	ldr	r3, [r3, #24]
 81071da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81071dc:	697b      	ldr	r3, [r7, #20]
 81071de:	681b      	ldr	r3, [r3, #0]
 81071e0:	4ab2      	ldr	r2, [pc, #712]	; (81074ac <UART_SetConfig+0x328>)
 81071e2:	4293      	cmp	r3, r2
 81071e4:	d004      	beq.n	81071f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81071e6:	697b      	ldr	r3, [r7, #20]
 81071e8:	6a1b      	ldr	r3, [r3, #32]
 81071ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81071ec:	4313      	orrs	r3, r2
 81071ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81071f0:	697b      	ldr	r3, [r7, #20]
 81071f2:	681b      	ldr	r3, [r3, #0]
 81071f4:	689b      	ldr	r3, [r3, #8]
 81071f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81071fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81071fe:	697a      	ldr	r2, [r7, #20]
 8107200:	6812      	ldr	r2, [r2, #0]
 8107202:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107204:	430b      	orrs	r3, r1
 8107206:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107208:	697b      	ldr	r3, [r7, #20]
 810720a:	681b      	ldr	r3, [r3, #0]
 810720c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810720e:	f023 010f 	bic.w	r1, r3, #15
 8107212:	697b      	ldr	r3, [r7, #20]
 8107214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107216:	697b      	ldr	r3, [r7, #20]
 8107218:	681b      	ldr	r3, [r3, #0]
 810721a:	430a      	orrs	r2, r1
 810721c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810721e:	697b      	ldr	r3, [r7, #20]
 8107220:	681b      	ldr	r3, [r3, #0]
 8107222:	4aa3      	ldr	r2, [pc, #652]	; (81074b0 <UART_SetConfig+0x32c>)
 8107224:	4293      	cmp	r3, r2
 8107226:	d177      	bne.n	8107318 <UART_SetConfig+0x194>
 8107228:	4ba2      	ldr	r3, [pc, #648]	; (81074b4 <UART_SetConfig+0x330>)
 810722a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810722c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107230:	2b28      	cmp	r3, #40	; 0x28
 8107232:	d86d      	bhi.n	8107310 <UART_SetConfig+0x18c>
 8107234:	a201      	add	r2, pc, #4	; (adr r2, 810723c <UART_SetConfig+0xb8>)
 8107236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810723a:	bf00      	nop
 810723c:	081072e1 	.word	0x081072e1
 8107240:	08107311 	.word	0x08107311
 8107244:	08107311 	.word	0x08107311
 8107248:	08107311 	.word	0x08107311
 810724c:	08107311 	.word	0x08107311
 8107250:	08107311 	.word	0x08107311
 8107254:	08107311 	.word	0x08107311
 8107258:	08107311 	.word	0x08107311
 810725c:	081072e9 	.word	0x081072e9
 8107260:	08107311 	.word	0x08107311
 8107264:	08107311 	.word	0x08107311
 8107268:	08107311 	.word	0x08107311
 810726c:	08107311 	.word	0x08107311
 8107270:	08107311 	.word	0x08107311
 8107274:	08107311 	.word	0x08107311
 8107278:	08107311 	.word	0x08107311
 810727c:	081072f1 	.word	0x081072f1
 8107280:	08107311 	.word	0x08107311
 8107284:	08107311 	.word	0x08107311
 8107288:	08107311 	.word	0x08107311
 810728c:	08107311 	.word	0x08107311
 8107290:	08107311 	.word	0x08107311
 8107294:	08107311 	.word	0x08107311
 8107298:	08107311 	.word	0x08107311
 810729c:	081072f9 	.word	0x081072f9
 81072a0:	08107311 	.word	0x08107311
 81072a4:	08107311 	.word	0x08107311
 81072a8:	08107311 	.word	0x08107311
 81072ac:	08107311 	.word	0x08107311
 81072b0:	08107311 	.word	0x08107311
 81072b4:	08107311 	.word	0x08107311
 81072b8:	08107311 	.word	0x08107311
 81072bc:	08107301 	.word	0x08107301
 81072c0:	08107311 	.word	0x08107311
 81072c4:	08107311 	.word	0x08107311
 81072c8:	08107311 	.word	0x08107311
 81072cc:	08107311 	.word	0x08107311
 81072d0:	08107311 	.word	0x08107311
 81072d4:	08107311 	.word	0x08107311
 81072d8:	08107311 	.word	0x08107311
 81072dc:	08107309 	.word	0x08107309
 81072e0:	2301      	movs	r3, #1
 81072e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072e6:	e220      	b.n	810772a <UART_SetConfig+0x5a6>
 81072e8:	2304      	movs	r3, #4
 81072ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072ee:	e21c      	b.n	810772a <UART_SetConfig+0x5a6>
 81072f0:	2308      	movs	r3, #8
 81072f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072f6:	e218      	b.n	810772a <UART_SetConfig+0x5a6>
 81072f8:	2310      	movs	r3, #16
 81072fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072fe:	e214      	b.n	810772a <UART_SetConfig+0x5a6>
 8107300:	2320      	movs	r3, #32
 8107302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107306:	e210      	b.n	810772a <UART_SetConfig+0x5a6>
 8107308:	2340      	movs	r3, #64	; 0x40
 810730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810730e:	e20c      	b.n	810772a <UART_SetConfig+0x5a6>
 8107310:	2380      	movs	r3, #128	; 0x80
 8107312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107316:	e208      	b.n	810772a <UART_SetConfig+0x5a6>
 8107318:	697b      	ldr	r3, [r7, #20]
 810731a:	681b      	ldr	r3, [r3, #0]
 810731c:	4a66      	ldr	r2, [pc, #408]	; (81074b8 <UART_SetConfig+0x334>)
 810731e:	4293      	cmp	r3, r2
 8107320:	d130      	bne.n	8107384 <UART_SetConfig+0x200>
 8107322:	4b64      	ldr	r3, [pc, #400]	; (81074b4 <UART_SetConfig+0x330>)
 8107324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107326:	f003 0307 	and.w	r3, r3, #7
 810732a:	2b05      	cmp	r3, #5
 810732c:	d826      	bhi.n	810737c <UART_SetConfig+0x1f8>
 810732e:	a201      	add	r2, pc, #4	; (adr r2, 8107334 <UART_SetConfig+0x1b0>)
 8107330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107334:	0810734d 	.word	0x0810734d
 8107338:	08107355 	.word	0x08107355
 810733c:	0810735d 	.word	0x0810735d
 8107340:	08107365 	.word	0x08107365
 8107344:	0810736d 	.word	0x0810736d
 8107348:	08107375 	.word	0x08107375
 810734c:	2300      	movs	r3, #0
 810734e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107352:	e1ea      	b.n	810772a <UART_SetConfig+0x5a6>
 8107354:	2304      	movs	r3, #4
 8107356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810735a:	e1e6      	b.n	810772a <UART_SetConfig+0x5a6>
 810735c:	2308      	movs	r3, #8
 810735e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107362:	e1e2      	b.n	810772a <UART_SetConfig+0x5a6>
 8107364:	2310      	movs	r3, #16
 8107366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810736a:	e1de      	b.n	810772a <UART_SetConfig+0x5a6>
 810736c:	2320      	movs	r3, #32
 810736e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107372:	e1da      	b.n	810772a <UART_SetConfig+0x5a6>
 8107374:	2340      	movs	r3, #64	; 0x40
 8107376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810737a:	e1d6      	b.n	810772a <UART_SetConfig+0x5a6>
 810737c:	2380      	movs	r3, #128	; 0x80
 810737e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107382:	e1d2      	b.n	810772a <UART_SetConfig+0x5a6>
 8107384:	697b      	ldr	r3, [r7, #20]
 8107386:	681b      	ldr	r3, [r3, #0]
 8107388:	4a4c      	ldr	r2, [pc, #304]	; (81074bc <UART_SetConfig+0x338>)
 810738a:	4293      	cmp	r3, r2
 810738c:	d130      	bne.n	81073f0 <UART_SetConfig+0x26c>
 810738e:	4b49      	ldr	r3, [pc, #292]	; (81074b4 <UART_SetConfig+0x330>)
 8107390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107392:	f003 0307 	and.w	r3, r3, #7
 8107396:	2b05      	cmp	r3, #5
 8107398:	d826      	bhi.n	81073e8 <UART_SetConfig+0x264>
 810739a:	a201      	add	r2, pc, #4	; (adr r2, 81073a0 <UART_SetConfig+0x21c>)
 810739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81073a0:	081073b9 	.word	0x081073b9
 81073a4:	081073c1 	.word	0x081073c1
 81073a8:	081073c9 	.word	0x081073c9
 81073ac:	081073d1 	.word	0x081073d1
 81073b0:	081073d9 	.word	0x081073d9
 81073b4:	081073e1 	.word	0x081073e1
 81073b8:	2300      	movs	r3, #0
 81073ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073be:	e1b4      	b.n	810772a <UART_SetConfig+0x5a6>
 81073c0:	2304      	movs	r3, #4
 81073c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073c6:	e1b0      	b.n	810772a <UART_SetConfig+0x5a6>
 81073c8:	2308      	movs	r3, #8
 81073ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073ce:	e1ac      	b.n	810772a <UART_SetConfig+0x5a6>
 81073d0:	2310      	movs	r3, #16
 81073d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073d6:	e1a8      	b.n	810772a <UART_SetConfig+0x5a6>
 81073d8:	2320      	movs	r3, #32
 81073da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073de:	e1a4      	b.n	810772a <UART_SetConfig+0x5a6>
 81073e0:	2340      	movs	r3, #64	; 0x40
 81073e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073e6:	e1a0      	b.n	810772a <UART_SetConfig+0x5a6>
 81073e8:	2380      	movs	r3, #128	; 0x80
 81073ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073ee:	e19c      	b.n	810772a <UART_SetConfig+0x5a6>
 81073f0:	697b      	ldr	r3, [r7, #20]
 81073f2:	681b      	ldr	r3, [r3, #0]
 81073f4:	4a32      	ldr	r2, [pc, #200]	; (81074c0 <UART_SetConfig+0x33c>)
 81073f6:	4293      	cmp	r3, r2
 81073f8:	d130      	bne.n	810745c <UART_SetConfig+0x2d8>
 81073fa:	4b2e      	ldr	r3, [pc, #184]	; (81074b4 <UART_SetConfig+0x330>)
 81073fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81073fe:	f003 0307 	and.w	r3, r3, #7
 8107402:	2b05      	cmp	r3, #5
 8107404:	d826      	bhi.n	8107454 <UART_SetConfig+0x2d0>
 8107406:	a201      	add	r2, pc, #4	; (adr r2, 810740c <UART_SetConfig+0x288>)
 8107408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810740c:	08107425 	.word	0x08107425
 8107410:	0810742d 	.word	0x0810742d
 8107414:	08107435 	.word	0x08107435
 8107418:	0810743d 	.word	0x0810743d
 810741c:	08107445 	.word	0x08107445
 8107420:	0810744d 	.word	0x0810744d
 8107424:	2300      	movs	r3, #0
 8107426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810742a:	e17e      	b.n	810772a <UART_SetConfig+0x5a6>
 810742c:	2304      	movs	r3, #4
 810742e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107432:	e17a      	b.n	810772a <UART_SetConfig+0x5a6>
 8107434:	2308      	movs	r3, #8
 8107436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810743a:	e176      	b.n	810772a <UART_SetConfig+0x5a6>
 810743c:	2310      	movs	r3, #16
 810743e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107442:	e172      	b.n	810772a <UART_SetConfig+0x5a6>
 8107444:	2320      	movs	r3, #32
 8107446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810744a:	e16e      	b.n	810772a <UART_SetConfig+0x5a6>
 810744c:	2340      	movs	r3, #64	; 0x40
 810744e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107452:	e16a      	b.n	810772a <UART_SetConfig+0x5a6>
 8107454:	2380      	movs	r3, #128	; 0x80
 8107456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810745a:	e166      	b.n	810772a <UART_SetConfig+0x5a6>
 810745c:	697b      	ldr	r3, [r7, #20]
 810745e:	681b      	ldr	r3, [r3, #0]
 8107460:	4a18      	ldr	r2, [pc, #96]	; (81074c4 <UART_SetConfig+0x340>)
 8107462:	4293      	cmp	r3, r2
 8107464:	d140      	bne.n	81074e8 <UART_SetConfig+0x364>
 8107466:	4b13      	ldr	r3, [pc, #76]	; (81074b4 <UART_SetConfig+0x330>)
 8107468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810746a:	f003 0307 	and.w	r3, r3, #7
 810746e:	2b05      	cmp	r3, #5
 8107470:	d836      	bhi.n	81074e0 <UART_SetConfig+0x35c>
 8107472:	a201      	add	r2, pc, #4	; (adr r2, 8107478 <UART_SetConfig+0x2f4>)
 8107474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107478:	08107491 	.word	0x08107491
 810747c:	08107499 	.word	0x08107499
 8107480:	081074a1 	.word	0x081074a1
 8107484:	081074c9 	.word	0x081074c9
 8107488:	081074d1 	.word	0x081074d1
 810748c:	081074d9 	.word	0x081074d9
 8107490:	2300      	movs	r3, #0
 8107492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107496:	e148      	b.n	810772a <UART_SetConfig+0x5a6>
 8107498:	2304      	movs	r3, #4
 810749a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810749e:	e144      	b.n	810772a <UART_SetConfig+0x5a6>
 81074a0:	2308      	movs	r3, #8
 81074a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074a6:	e140      	b.n	810772a <UART_SetConfig+0x5a6>
 81074a8:	cfff69f3 	.word	0xcfff69f3
 81074ac:	58000c00 	.word	0x58000c00
 81074b0:	40011000 	.word	0x40011000
 81074b4:	58024400 	.word	0x58024400
 81074b8:	40004400 	.word	0x40004400
 81074bc:	40004800 	.word	0x40004800
 81074c0:	40004c00 	.word	0x40004c00
 81074c4:	40005000 	.word	0x40005000
 81074c8:	2310      	movs	r3, #16
 81074ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074ce:	e12c      	b.n	810772a <UART_SetConfig+0x5a6>
 81074d0:	2320      	movs	r3, #32
 81074d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074d6:	e128      	b.n	810772a <UART_SetConfig+0x5a6>
 81074d8:	2340      	movs	r3, #64	; 0x40
 81074da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074de:	e124      	b.n	810772a <UART_SetConfig+0x5a6>
 81074e0:	2380      	movs	r3, #128	; 0x80
 81074e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074e6:	e120      	b.n	810772a <UART_SetConfig+0x5a6>
 81074e8:	697b      	ldr	r3, [r7, #20]
 81074ea:	681b      	ldr	r3, [r3, #0]
 81074ec:	4acb      	ldr	r2, [pc, #812]	; (810781c <UART_SetConfig+0x698>)
 81074ee:	4293      	cmp	r3, r2
 81074f0:	d176      	bne.n	81075e0 <UART_SetConfig+0x45c>
 81074f2:	4bcb      	ldr	r3, [pc, #812]	; (8107820 <UART_SetConfig+0x69c>)
 81074f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81074f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81074fa:	2b28      	cmp	r3, #40	; 0x28
 81074fc:	d86c      	bhi.n	81075d8 <UART_SetConfig+0x454>
 81074fe:	a201      	add	r2, pc, #4	; (adr r2, 8107504 <UART_SetConfig+0x380>)
 8107500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107504:	081075a9 	.word	0x081075a9
 8107508:	081075d9 	.word	0x081075d9
 810750c:	081075d9 	.word	0x081075d9
 8107510:	081075d9 	.word	0x081075d9
 8107514:	081075d9 	.word	0x081075d9
 8107518:	081075d9 	.word	0x081075d9
 810751c:	081075d9 	.word	0x081075d9
 8107520:	081075d9 	.word	0x081075d9
 8107524:	081075b1 	.word	0x081075b1
 8107528:	081075d9 	.word	0x081075d9
 810752c:	081075d9 	.word	0x081075d9
 8107530:	081075d9 	.word	0x081075d9
 8107534:	081075d9 	.word	0x081075d9
 8107538:	081075d9 	.word	0x081075d9
 810753c:	081075d9 	.word	0x081075d9
 8107540:	081075d9 	.word	0x081075d9
 8107544:	081075b9 	.word	0x081075b9
 8107548:	081075d9 	.word	0x081075d9
 810754c:	081075d9 	.word	0x081075d9
 8107550:	081075d9 	.word	0x081075d9
 8107554:	081075d9 	.word	0x081075d9
 8107558:	081075d9 	.word	0x081075d9
 810755c:	081075d9 	.word	0x081075d9
 8107560:	081075d9 	.word	0x081075d9
 8107564:	081075c1 	.word	0x081075c1
 8107568:	081075d9 	.word	0x081075d9
 810756c:	081075d9 	.word	0x081075d9
 8107570:	081075d9 	.word	0x081075d9
 8107574:	081075d9 	.word	0x081075d9
 8107578:	081075d9 	.word	0x081075d9
 810757c:	081075d9 	.word	0x081075d9
 8107580:	081075d9 	.word	0x081075d9
 8107584:	081075c9 	.word	0x081075c9
 8107588:	081075d9 	.word	0x081075d9
 810758c:	081075d9 	.word	0x081075d9
 8107590:	081075d9 	.word	0x081075d9
 8107594:	081075d9 	.word	0x081075d9
 8107598:	081075d9 	.word	0x081075d9
 810759c:	081075d9 	.word	0x081075d9
 81075a0:	081075d9 	.word	0x081075d9
 81075a4:	081075d1 	.word	0x081075d1
 81075a8:	2301      	movs	r3, #1
 81075aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075ae:	e0bc      	b.n	810772a <UART_SetConfig+0x5a6>
 81075b0:	2304      	movs	r3, #4
 81075b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075b6:	e0b8      	b.n	810772a <UART_SetConfig+0x5a6>
 81075b8:	2308      	movs	r3, #8
 81075ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075be:	e0b4      	b.n	810772a <UART_SetConfig+0x5a6>
 81075c0:	2310      	movs	r3, #16
 81075c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075c6:	e0b0      	b.n	810772a <UART_SetConfig+0x5a6>
 81075c8:	2320      	movs	r3, #32
 81075ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075ce:	e0ac      	b.n	810772a <UART_SetConfig+0x5a6>
 81075d0:	2340      	movs	r3, #64	; 0x40
 81075d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075d6:	e0a8      	b.n	810772a <UART_SetConfig+0x5a6>
 81075d8:	2380      	movs	r3, #128	; 0x80
 81075da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075de:	e0a4      	b.n	810772a <UART_SetConfig+0x5a6>
 81075e0:	697b      	ldr	r3, [r7, #20]
 81075e2:	681b      	ldr	r3, [r3, #0]
 81075e4:	4a8f      	ldr	r2, [pc, #572]	; (8107824 <UART_SetConfig+0x6a0>)
 81075e6:	4293      	cmp	r3, r2
 81075e8:	d130      	bne.n	810764c <UART_SetConfig+0x4c8>
 81075ea:	4b8d      	ldr	r3, [pc, #564]	; (8107820 <UART_SetConfig+0x69c>)
 81075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81075ee:	f003 0307 	and.w	r3, r3, #7
 81075f2:	2b05      	cmp	r3, #5
 81075f4:	d826      	bhi.n	8107644 <UART_SetConfig+0x4c0>
 81075f6:	a201      	add	r2, pc, #4	; (adr r2, 81075fc <UART_SetConfig+0x478>)
 81075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81075fc:	08107615 	.word	0x08107615
 8107600:	0810761d 	.word	0x0810761d
 8107604:	08107625 	.word	0x08107625
 8107608:	0810762d 	.word	0x0810762d
 810760c:	08107635 	.word	0x08107635
 8107610:	0810763d 	.word	0x0810763d
 8107614:	2300      	movs	r3, #0
 8107616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810761a:	e086      	b.n	810772a <UART_SetConfig+0x5a6>
 810761c:	2304      	movs	r3, #4
 810761e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107622:	e082      	b.n	810772a <UART_SetConfig+0x5a6>
 8107624:	2308      	movs	r3, #8
 8107626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810762a:	e07e      	b.n	810772a <UART_SetConfig+0x5a6>
 810762c:	2310      	movs	r3, #16
 810762e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107632:	e07a      	b.n	810772a <UART_SetConfig+0x5a6>
 8107634:	2320      	movs	r3, #32
 8107636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810763a:	e076      	b.n	810772a <UART_SetConfig+0x5a6>
 810763c:	2340      	movs	r3, #64	; 0x40
 810763e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107642:	e072      	b.n	810772a <UART_SetConfig+0x5a6>
 8107644:	2380      	movs	r3, #128	; 0x80
 8107646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810764a:	e06e      	b.n	810772a <UART_SetConfig+0x5a6>
 810764c:	697b      	ldr	r3, [r7, #20]
 810764e:	681b      	ldr	r3, [r3, #0]
 8107650:	4a75      	ldr	r2, [pc, #468]	; (8107828 <UART_SetConfig+0x6a4>)
 8107652:	4293      	cmp	r3, r2
 8107654:	d130      	bne.n	81076b8 <UART_SetConfig+0x534>
 8107656:	4b72      	ldr	r3, [pc, #456]	; (8107820 <UART_SetConfig+0x69c>)
 8107658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810765a:	f003 0307 	and.w	r3, r3, #7
 810765e:	2b05      	cmp	r3, #5
 8107660:	d826      	bhi.n	81076b0 <UART_SetConfig+0x52c>
 8107662:	a201      	add	r2, pc, #4	; (adr r2, 8107668 <UART_SetConfig+0x4e4>)
 8107664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107668:	08107681 	.word	0x08107681
 810766c:	08107689 	.word	0x08107689
 8107670:	08107691 	.word	0x08107691
 8107674:	08107699 	.word	0x08107699
 8107678:	081076a1 	.word	0x081076a1
 810767c:	081076a9 	.word	0x081076a9
 8107680:	2300      	movs	r3, #0
 8107682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107686:	e050      	b.n	810772a <UART_SetConfig+0x5a6>
 8107688:	2304      	movs	r3, #4
 810768a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810768e:	e04c      	b.n	810772a <UART_SetConfig+0x5a6>
 8107690:	2308      	movs	r3, #8
 8107692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107696:	e048      	b.n	810772a <UART_SetConfig+0x5a6>
 8107698:	2310      	movs	r3, #16
 810769a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810769e:	e044      	b.n	810772a <UART_SetConfig+0x5a6>
 81076a0:	2320      	movs	r3, #32
 81076a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076a6:	e040      	b.n	810772a <UART_SetConfig+0x5a6>
 81076a8:	2340      	movs	r3, #64	; 0x40
 81076aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076ae:	e03c      	b.n	810772a <UART_SetConfig+0x5a6>
 81076b0:	2380      	movs	r3, #128	; 0x80
 81076b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076b6:	e038      	b.n	810772a <UART_SetConfig+0x5a6>
 81076b8:	697b      	ldr	r3, [r7, #20]
 81076ba:	681b      	ldr	r3, [r3, #0]
 81076bc:	4a5b      	ldr	r2, [pc, #364]	; (810782c <UART_SetConfig+0x6a8>)
 81076be:	4293      	cmp	r3, r2
 81076c0:	d130      	bne.n	8107724 <UART_SetConfig+0x5a0>
 81076c2:	4b57      	ldr	r3, [pc, #348]	; (8107820 <UART_SetConfig+0x69c>)
 81076c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81076c6:	f003 0307 	and.w	r3, r3, #7
 81076ca:	2b05      	cmp	r3, #5
 81076cc:	d826      	bhi.n	810771c <UART_SetConfig+0x598>
 81076ce:	a201      	add	r2, pc, #4	; (adr r2, 81076d4 <UART_SetConfig+0x550>)
 81076d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81076d4:	081076ed 	.word	0x081076ed
 81076d8:	081076f5 	.word	0x081076f5
 81076dc:	081076fd 	.word	0x081076fd
 81076e0:	08107705 	.word	0x08107705
 81076e4:	0810770d 	.word	0x0810770d
 81076e8:	08107715 	.word	0x08107715
 81076ec:	2302      	movs	r3, #2
 81076ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076f2:	e01a      	b.n	810772a <UART_SetConfig+0x5a6>
 81076f4:	2304      	movs	r3, #4
 81076f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81076fa:	e016      	b.n	810772a <UART_SetConfig+0x5a6>
 81076fc:	2308      	movs	r3, #8
 81076fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107702:	e012      	b.n	810772a <UART_SetConfig+0x5a6>
 8107704:	2310      	movs	r3, #16
 8107706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810770a:	e00e      	b.n	810772a <UART_SetConfig+0x5a6>
 810770c:	2320      	movs	r3, #32
 810770e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107712:	e00a      	b.n	810772a <UART_SetConfig+0x5a6>
 8107714:	2340      	movs	r3, #64	; 0x40
 8107716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810771a:	e006      	b.n	810772a <UART_SetConfig+0x5a6>
 810771c:	2380      	movs	r3, #128	; 0x80
 810771e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107722:	e002      	b.n	810772a <UART_SetConfig+0x5a6>
 8107724:	2380      	movs	r3, #128	; 0x80
 8107726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810772a:	697b      	ldr	r3, [r7, #20]
 810772c:	681b      	ldr	r3, [r3, #0]
 810772e:	4a3f      	ldr	r2, [pc, #252]	; (810782c <UART_SetConfig+0x6a8>)
 8107730:	4293      	cmp	r3, r2
 8107732:	f040 80f8 	bne.w	8107926 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8107736:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810773a:	2b20      	cmp	r3, #32
 810773c:	dc46      	bgt.n	81077cc <UART_SetConfig+0x648>
 810773e:	2b02      	cmp	r3, #2
 8107740:	f2c0 8082 	blt.w	8107848 <UART_SetConfig+0x6c4>
 8107744:	3b02      	subs	r3, #2
 8107746:	2b1e      	cmp	r3, #30
 8107748:	d87e      	bhi.n	8107848 <UART_SetConfig+0x6c4>
 810774a:	a201      	add	r2, pc, #4	; (adr r2, 8107750 <UART_SetConfig+0x5cc>)
 810774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107750:	081077d3 	.word	0x081077d3
 8107754:	08107849 	.word	0x08107849
 8107758:	081077db 	.word	0x081077db
 810775c:	08107849 	.word	0x08107849
 8107760:	08107849 	.word	0x08107849
 8107764:	08107849 	.word	0x08107849
 8107768:	081077eb 	.word	0x081077eb
 810776c:	08107849 	.word	0x08107849
 8107770:	08107849 	.word	0x08107849
 8107774:	08107849 	.word	0x08107849
 8107778:	08107849 	.word	0x08107849
 810777c:	08107849 	.word	0x08107849
 8107780:	08107849 	.word	0x08107849
 8107784:	08107849 	.word	0x08107849
 8107788:	081077fb 	.word	0x081077fb
 810778c:	08107849 	.word	0x08107849
 8107790:	08107849 	.word	0x08107849
 8107794:	08107849 	.word	0x08107849
 8107798:	08107849 	.word	0x08107849
 810779c:	08107849 	.word	0x08107849
 81077a0:	08107849 	.word	0x08107849
 81077a4:	08107849 	.word	0x08107849
 81077a8:	08107849 	.word	0x08107849
 81077ac:	08107849 	.word	0x08107849
 81077b0:	08107849 	.word	0x08107849
 81077b4:	08107849 	.word	0x08107849
 81077b8:	08107849 	.word	0x08107849
 81077bc:	08107849 	.word	0x08107849
 81077c0:	08107849 	.word	0x08107849
 81077c4:	08107849 	.word	0x08107849
 81077c8:	0810783b 	.word	0x0810783b
 81077cc:	2b40      	cmp	r3, #64	; 0x40
 81077ce:	d037      	beq.n	8107840 <UART_SetConfig+0x6bc>
 81077d0:	e03a      	b.n	8107848 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81077d2:	f7fd fce7 	bl	81051a4 <HAL_RCCEx_GetD3PCLK1Freq>
 81077d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81077d8:	e03c      	b.n	8107854 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81077da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81077de:	4618      	mov	r0, r3
 81077e0:	f7fd fcf6 	bl	81051d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81077e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81077e8:	e034      	b.n	8107854 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81077ea:	f107 0318 	add.w	r3, r7, #24
 81077ee:	4618      	mov	r0, r3
 81077f0:	f7fd fe42 	bl	8105478 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81077f4:	69fb      	ldr	r3, [r7, #28]
 81077f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81077f8:	e02c      	b.n	8107854 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81077fa:	4b09      	ldr	r3, [pc, #36]	; (8107820 <UART_SetConfig+0x69c>)
 81077fc:	681b      	ldr	r3, [r3, #0]
 81077fe:	f003 0320 	and.w	r3, r3, #32
 8107802:	2b00      	cmp	r3, #0
 8107804:	d016      	beq.n	8107834 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107806:	4b06      	ldr	r3, [pc, #24]	; (8107820 <UART_SetConfig+0x69c>)
 8107808:	681b      	ldr	r3, [r3, #0]
 810780a:	08db      	lsrs	r3, r3, #3
 810780c:	f003 0303 	and.w	r3, r3, #3
 8107810:	4a07      	ldr	r2, [pc, #28]	; (8107830 <UART_SetConfig+0x6ac>)
 8107812:	fa22 f303 	lsr.w	r3, r2, r3
 8107816:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107818:	e01c      	b.n	8107854 <UART_SetConfig+0x6d0>
 810781a:	bf00      	nop
 810781c:	40011400 	.word	0x40011400
 8107820:	58024400 	.word	0x58024400
 8107824:	40007800 	.word	0x40007800
 8107828:	40007c00 	.word	0x40007c00
 810782c:	58000c00 	.word	0x58000c00
 8107830:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8107834:	4b9d      	ldr	r3, [pc, #628]	; (8107aac <UART_SetConfig+0x928>)
 8107836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107838:	e00c      	b.n	8107854 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810783a:	4b9d      	ldr	r3, [pc, #628]	; (8107ab0 <UART_SetConfig+0x92c>)
 810783c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810783e:	e009      	b.n	8107854 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107846:	e005      	b.n	8107854 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8107848:	2300      	movs	r3, #0
 810784a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810784c:	2301      	movs	r3, #1
 810784e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107852:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8107854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107856:	2b00      	cmp	r3, #0
 8107858:	f000 81de 	beq.w	8107c18 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810785c:	697b      	ldr	r3, [r7, #20]
 810785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107860:	4a94      	ldr	r2, [pc, #592]	; (8107ab4 <UART_SetConfig+0x930>)
 8107862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107866:	461a      	mov	r2, r3
 8107868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810786a:	fbb3 f3f2 	udiv	r3, r3, r2
 810786e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107870:	697b      	ldr	r3, [r7, #20]
 8107872:	685a      	ldr	r2, [r3, #4]
 8107874:	4613      	mov	r3, r2
 8107876:	005b      	lsls	r3, r3, #1
 8107878:	4413      	add	r3, r2
 810787a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810787c:	429a      	cmp	r2, r3
 810787e:	d305      	bcc.n	810788c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8107880:	697b      	ldr	r3, [r7, #20]
 8107882:	685b      	ldr	r3, [r3, #4]
 8107884:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107888:	429a      	cmp	r2, r3
 810788a:	d903      	bls.n	8107894 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810788c:	2301      	movs	r3, #1
 810788e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107892:	e1c1      	b.n	8107c18 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107896:	2200      	movs	r2, #0
 8107898:	60bb      	str	r3, [r7, #8]
 810789a:	60fa      	str	r2, [r7, #12]
 810789c:	697b      	ldr	r3, [r7, #20]
 810789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81078a0:	4a84      	ldr	r2, [pc, #528]	; (8107ab4 <UART_SetConfig+0x930>)
 81078a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81078a6:	b29b      	uxth	r3, r3
 81078a8:	2200      	movs	r2, #0
 81078aa:	603b      	str	r3, [r7, #0]
 81078ac:	607a      	str	r2, [r7, #4]
 81078ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 81078b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81078b6:	f7f9 fa6f 	bl	8100d98 <__aeabi_uldivmod>
 81078ba:	4602      	mov	r2, r0
 81078bc:	460b      	mov	r3, r1
 81078be:	4610      	mov	r0, r2
 81078c0:	4619      	mov	r1, r3
 81078c2:	f04f 0200 	mov.w	r2, #0
 81078c6:	f04f 0300 	mov.w	r3, #0
 81078ca:	020b      	lsls	r3, r1, #8
 81078cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81078d0:	0202      	lsls	r2, r0, #8
 81078d2:	6979      	ldr	r1, [r7, #20]
 81078d4:	6849      	ldr	r1, [r1, #4]
 81078d6:	0849      	lsrs	r1, r1, #1
 81078d8:	2000      	movs	r0, #0
 81078da:	460c      	mov	r4, r1
 81078dc:	4605      	mov	r5, r0
 81078de:	eb12 0804 	adds.w	r8, r2, r4
 81078e2:	eb43 0905 	adc.w	r9, r3, r5
 81078e6:	697b      	ldr	r3, [r7, #20]
 81078e8:	685b      	ldr	r3, [r3, #4]
 81078ea:	2200      	movs	r2, #0
 81078ec:	469a      	mov	sl, r3
 81078ee:	4693      	mov	fp, r2
 81078f0:	4652      	mov	r2, sl
 81078f2:	465b      	mov	r3, fp
 81078f4:	4640      	mov	r0, r8
 81078f6:	4649      	mov	r1, r9
 81078f8:	f7f9 fa4e 	bl	8100d98 <__aeabi_uldivmod>
 81078fc:	4602      	mov	r2, r0
 81078fe:	460b      	mov	r3, r1
 8107900:	4613      	mov	r3, r2
 8107902:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810790a:	d308      	bcc.n	810791e <UART_SetConfig+0x79a>
 810790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810790e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107912:	d204      	bcs.n	810791e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8107914:	697b      	ldr	r3, [r7, #20]
 8107916:	681b      	ldr	r3, [r3, #0]
 8107918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810791a:	60da      	str	r2, [r3, #12]
 810791c:	e17c      	b.n	8107c18 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810791e:	2301      	movs	r3, #1
 8107920:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107924:	e178      	b.n	8107c18 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8107926:	697b      	ldr	r3, [r7, #20]
 8107928:	69db      	ldr	r3, [r3, #28]
 810792a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810792e:	f040 80c5 	bne.w	8107abc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8107932:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107936:	2b20      	cmp	r3, #32
 8107938:	dc48      	bgt.n	81079cc <UART_SetConfig+0x848>
 810793a:	2b00      	cmp	r3, #0
 810793c:	db7b      	blt.n	8107a36 <UART_SetConfig+0x8b2>
 810793e:	2b20      	cmp	r3, #32
 8107940:	d879      	bhi.n	8107a36 <UART_SetConfig+0x8b2>
 8107942:	a201      	add	r2, pc, #4	; (adr r2, 8107948 <UART_SetConfig+0x7c4>)
 8107944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107948:	081079d3 	.word	0x081079d3
 810794c:	081079db 	.word	0x081079db
 8107950:	08107a37 	.word	0x08107a37
 8107954:	08107a37 	.word	0x08107a37
 8107958:	081079e3 	.word	0x081079e3
 810795c:	08107a37 	.word	0x08107a37
 8107960:	08107a37 	.word	0x08107a37
 8107964:	08107a37 	.word	0x08107a37
 8107968:	081079f3 	.word	0x081079f3
 810796c:	08107a37 	.word	0x08107a37
 8107970:	08107a37 	.word	0x08107a37
 8107974:	08107a37 	.word	0x08107a37
 8107978:	08107a37 	.word	0x08107a37
 810797c:	08107a37 	.word	0x08107a37
 8107980:	08107a37 	.word	0x08107a37
 8107984:	08107a37 	.word	0x08107a37
 8107988:	08107a03 	.word	0x08107a03
 810798c:	08107a37 	.word	0x08107a37
 8107990:	08107a37 	.word	0x08107a37
 8107994:	08107a37 	.word	0x08107a37
 8107998:	08107a37 	.word	0x08107a37
 810799c:	08107a37 	.word	0x08107a37
 81079a0:	08107a37 	.word	0x08107a37
 81079a4:	08107a37 	.word	0x08107a37
 81079a8:	08107a37 	.word	0x08107a37
 81079ac:	08107a37 	.word	0x08107a37
 81079b0:	08107a37 	.word	0x08107a37
 81079b4:	08107a37 	.word	0x08107a37
 81079b8:	08107a37 	.word	0x08107a37
 81079bc:	08107a37 	.word	0x08107a37
 81079c0:	08107a37 	.word	0x08107a37
 81079c4:	08107a37 	.word	0x08107a37
 81079c8:	08107a29 	.word	0x08107a29
 81079cc:	2b40      	cmp	r3, #64	; 0x40
 81079ce:	d02e      	beq.n	8107a2e <UART_SetConfig+0x8aa>
 81079d0:	e031      	b.n	8107a36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81079d2:	f7fc f9b1 	bl	8103d38 <HAL_RCC_GetPCLK1Freq>
 81079d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81079d8:	e033      	b.n	8107a42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81079da:	f7fc f9c3 	bl	8103d64 <HAL_RCC_GetPCLK2Freq>
 81079de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81079e0:	e02f      	b.n	8107a42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81079e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81079e6:	4618      	mov	r0, r3
 81079e8:	f7fd fbf2 	bl	81051d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81079f0:	e027      	b.n	8107a42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81079f2:	f107 0318 	add.w	r3, r7, #24
 81079f6:	4618      	mov	r0, r3
 81079f8:	f7fd fd3e 	bl	8105478 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81079fc:	69fb      	ldr	r3, [r7, #28]
 81079fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107a00:	e01f      	b.n	8107a42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107a02:	4b2d      	ldr	r3, [pc, #180]	; (8107ab8 <UART_SetConfig+0x934>)
 8107a04:	681b      	ldr	r3, [r3, #0]
 8107a06:	f003 0320 	and.w	r3, r3, #32
 8107a0a:	2b00      	cmp	r3, #0
 8107a0c:	d009      	beq.n	8107a22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107a0e:	4b2a      	ldr	r3, [pc, #168]	; (8107ab8 <UART_SetConfig+0x934>)
 8107a10:	681b      	ldr	r3, [r3, #0]
 8107a12:	08db      	lsrs	r3, r3, #3
 8107a14:	f003 0303 	and.w	r3, r3, #3
 8107a18:	4a24      	ldr	r2, [pc, #144]	; (8107aac <UART_SetConfig+0x928>)
 8107a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8107a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107a20:	e00f      	b.n	8107a42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8107a22:	4b22      	ldr	r3, [pc, #136]	; (8107aac <UART_SetConfig+0x928>)
 8107a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107a26:	e00c      	b.n	8107a42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107a28:	4b21      	ldr	r3, [pc, #132]	; (8107ab0 <UART_SetConfig+0x92c>)
 8107a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107a2c:	e009      	b.n	8107a42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107a34:	e005      	b.n	8107a42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8107a36:	2300      	movs	r3, #0
 8107a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107a3a:	2301      	movs	r3, #1
 8107a3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107a40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8107a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107a44:	2b00      	cmp	r3, #0
 8107a46:	f000 80e7 	beq.w	8107c18 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107a4a:	697b      	ldr	r3, [r7, #20]
 8107a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107a4e:	4a19      	ldr	r2, [pc, #100]	; (8107ab4 <UART_SetConfig+0x930>)
 8107a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107a54:	461a      	mov	r2, r3
 8107a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8107a5c:	005a      	lsls	r2, r3, #1
 8107a5e:	697b      	ldr	r3, [r7, #20]
 8107a60:	685b      	ldr	r3, [r3, #4]
 8107a62:	085b      	lsrs	r3, r3, #1
 8107a64:	441a      	add	r2, r3
 8107a66:	697b      	ldr	r3, [r7, #20]
 8107a68:	685b      	ldr	r3, [r3, #4]
 8107a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8107a6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107a72:	2b0f      	cmp	r3, #15
 8107a74:	d916      	bls.n	8107aa4 <UART_SetConfig+0x920>
 8107a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107a7c:	d212      	bcs.n	8107aa4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8107a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107a80:	b29b      	uxth	r3, r3
 8107a82:	f023 030f 	bic.w	r3, r3, #15
 8107a86:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8107a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107a8a:	085b      	lsrs	r3, r3, #1
 8107a8c:	b29b      	uxth	r3, r3
 8107a8e:	f003 0307 	and.w	r3, r3, #7
 8107a92:	b29a      	uxth	r2, r3
 8107a94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8107a96:	4313      	orrs	r3, r2
 8107a98:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8107a9a:	697b      	ldr	r3, [r7, #20]
 8107a9c:	681b      	ldr	r3, [r3, #0]
 8107a9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8107aa0:	60da      	str	r2, [r3, #12]
 8107aa2:	e0b9      	b.n	8107c18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8107aa4:	2301      	movs	r3, #1
 8107aa6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107aaa:	e0b5      	b.n	8107c18 <UART_SetConfig+0xa94>
 8107aac:	03d09000 	.word	0x03d09000
 8107ab0:	003d0900 	.word	0x003d0900
 8107ab4:	0810cf58 	.word	0x0810cf58
 8107ab8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8107abc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107ac0:	2b20      	cmp	r3, #32
 8107ac2:	dc49      	bgt.n	8107b58 <UART_SetConfig+0x9d4>
 8107ac4:	2b00      	cmp	r3, #0
 8107ac6:	db7c      	blt.n	8107bc2 <UART_SetConfig+0xa3e>
 8107ac8:	2b20      	cmp	r3, #32
 8107aca:	d87a      	bhi.n	8107bc2 <UART_SetConfig+0xa3e>
 8107acc:	a201      	add	r2, pc, #4	; (adr r2, 8107ad4 <UART_SetConfig+0x950>)
 8107ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107ad2:	bf00      	nop
 8107ad4:	08107b5f 	.word	0x08107b5f
 8107ad8:	08107b67 	.word	0x08107b67
 8107adc:	08107bc3 	.word	0x08107bc3
 8107ae0:	08107bc3 	.word	0x08107bc3
 8107ae4:	08107b6f 	.word	0x08107b6f
 8107ae8:	08107bc3 	.word	0x08107bc3
 8107aec:	08107bc3 	.word	0x08107bc3
 8107af0:	08107bc3 	.word	0x08107bc3
 8107af4:	08107b7f 	.word	0x08107b7f
 8107af8:	08107bc3 	.word	0x08107bc3
 8107afc:	08107bc3 	.word	0x08107bc3
 8107b00:	08107bc3 	.word	0x08107bc3
 8107b04:	08107bc3 	.word	0x08107bc3
 8107b08:	08107bc3 	.word	0x08107bc3
 8107b0c:	08107bc3 	.word	0x08107bc3
 8107b10:	08107bc3 	.word	0x08107bc3
 8107b14:	08107b8f 	.word	0x08107b8f
 8107b18:	08107bc3 	.word	0x08107bc3
 8107b1c:	08107bc3 	.word	0x08107bc3
 8107b20:	08107bc3 	.word	0x08107bc3
 8107b24:	08107bc3 	.word	0x08107bc3
 8107b28:	08107bc3 	.word	0x08107bc3
 8107b2c:	08107bc3 	.word	0x08107bc3
 8107b30:	08107bc3 	.word	0x08107bc3
 8107b34:	08107bc3 	.word	0x08107bc3
 8107b38:	08107bc3 	.word	0x08107bc3
 8107b3c:	08107bc3 	.word	0x08107bc3
 8107b40:	08107bc3 	.word	0x08107bc3
 8107b44:	08107bc3 	.word	0x08107bc3
 8107b48:	08107bc3 	.word	0x08107bc3
 8107b4c:	08107bc3 	.word	0x08107bc3
 8107b50:	08107bc3 	.word	0x08107bc3
 8107b54:	08107bb5 	.word	0x08107bb5
 8107b58:	2b40      	cmp	r3, #64	; 0x40
 8107b5a:	d02e      	beq.n	8107bba <UART_SetConfig+0xa36>
 8107b5c:	e031      	b.n	8107bc2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107b5e:	f7fc f8eb 	bl	8103d38 <HAL_RCC_GetPCLK1Freq>
 8107b62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107b64:	e033      	b.n	8107bce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8107b66:	f7fc f8fd 	bl	8103d64 <HAL_RCC_GetPCLK2Freq>
 8107b6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107b6c:	e02f      	b.n	8107bce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107b72:	4618      	mov	r0, r3
 8107b74:	f7fd fb2c 	bl	81051d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107b7c:	e027      	b.n	8107bce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107b7e:	f107 0318 	add.w	r3, r7, #24
 8107b82:	4618      	mov	r0, r3
 8107b84:	f7fd fc78 	bl	8105478 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107b88:	69fb      	ldr	r3, [r7, #28]
 8107b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107b8c:	e01f      	b.n	8107bce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107b8e:	4b2d      	ldr	r3, [pc, #180]	; (8107c44 <UART_SetConfig+0xac0>)
 8107b90:	681b      	ldr	r3, [r3, #0]
 8107b92:	f003 0320 	and.w	r3, r3, #32
 8107b96:	2b00      	cmp	r3, #0
 8107b98:	d009      	beq.n	8107bae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107b9a:	4b2a      	ldr	r3, [pc, #168]	; (8107c44 <UART_SetConfig+0xac0>)
 8107b9c:	681b      	ldr	r3, [r3, #0]
 8107b9e:	08db      	lsrs	r3, r3, #3
 8107ba0:	f003 0303 	and.w	r3, r3, #3
 8107ba4:	4a28      	ldr	r2, [pc, #160]	; (8107c48 <UART_SetConfig+0xac4>)
 8107ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8107baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107bac:	e00f      	b.n	8107bce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8107bae:	4b26      	ldr	r3, [pc, #152]	; (8107c48 <UART_SetConfig+0xac4>)
 8107bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107bb2:	e00c      	b.n	8107bce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107bb4:	4b25      	ldr	r3, [pc, #148]	; (8107c4c <UART_SetConfig+0xac8>)
 8107bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107bb8:	e009      	b.n	8107bce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107bc0:	e005      	b.n	8107bce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8107bc2:	2300      	movs	r3, #0
 8107bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107bc6:	2301      	movs	r3, #1
 8107bc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107bcc:	bf00      	nop
    }

    if (pclk != 0U)
 8107bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107bd0:	2b00      	cmp	r3, #0
 8107bd2:	d021      	beq.n	8107c18 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107bd4:	697b      	ldr	r3, [r7, #20]
 8107bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107bd8:	4a1d      	ldr	r2, [pc, #116]	; (8107c50 <UART_SetConfig+0xacc>)
 8107bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107bde:	461a      	mov	r2, r3
 8107be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107be2:	fbb3 f2f2 	udiv	r2, r3, r2
 8107be6:	697b      	ldr	r3, [r7, #20]
 8107be8:	685b      	ldr	r3, [r3, #4]
 8107bea:	085b      	lsrs	r3, r3, #1
 8107bec:	441a      	add	r2, r3
 8107bee:	697b      	ldr	r3, [r7, #20]
 8107bf0:	685b      	ldr	r3, [r3, #4]
 8107bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8107bf6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107bfa:	2b0f      	cmp	r3, #15
 8107bfc:	d909      	bls.n	8107c12 <UART_SetConfig+0xa8e>
 8107bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107c04:	d205      	bcs.n	8107c12 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8107c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107c08:	b29a      	uxth	r2, r3
 8107c0a:	697b      	ldr	r3, [r7, #20]
 8107c0c:	681b      	ldr	r3, [r3, #0]
 8107c0e:	60da      	str	r2, [r3, #12]
 8107c10:	e002      	b.n	8107c18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8107c12:	2301      	movs	r3, #1
 8107c14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8107c18:	697b      	ldr	r3, [r7, #20]
 8107c1a:	2201      	movs	r2, #1
 8107c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8107c20:	697b      	ldr	r3, [r7, #20]
 8107c22:	2201      	movs	r2, #1
 8107c24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8107c28:	697b      	ldr	r3, [r7, #20]
 8107c2a:	2200      	movs	r2, #0
 8107c2c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8107c2e:	697b      	ldr	r3, [r7, #20]
 8107c30:	2200      	movs	r2, #0
 8107c32:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8107c34:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8107c38:	4618      	mov	r0, r3
 8107c3a:	3748      	adds	r7, #72	; 0x48
 8107c3c:	46bd      	mov	sp, r7
 8107c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107c42:	bf00      	nop
 8107c44:	58024400 	.word	0x58024400
 8107c48:	03d09000 	.word	0x03d09000
 8107c4c:	003d0900 	.word	0x003d0900
 8107c50:	0810cf58 	.word	0x0810cf58

08107c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8107c54:	b480      	push	{r7}
 8107c56:	b083      	sub	sp, #12
 8107c58:	af00      	add	r7, sp, #0
 8107c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107c5c:	687b      	ldr	r3, [r7, #4]
 8107c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c60:	f003 0301 	and.w	r3, r3, #1
 8107c64:	2b00      	cmp	r3, #0
 8107c66:	d00a      	beq.n	8107c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8107c68:	687b      	ldr	r3, [r7, #4]
 8107c6a:	681b      	ldr	r3, [r3, #0]
 8107c6c:	685b      	ldr	r3, [r3, #4]
 8107c6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8107c72:	687b      	ldr	r3, [r7, #4]
 8107c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107c76:	687b      	ldr	r3, [r7, #4]
 8107c78:	681b      	ldr	r3, [r3, #0]
 8107c7a:	430a      	orrs	r2, r1
 8107c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8107c7e:	687b      	ldr	r3, [r7, #4]
 8107c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c82:	f003 0302 	and.w	r3, r3, #2
 8107c86:	2b00      	cmp	r3, #0
 8107c88:	d00a      	beq.n	8107ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8107c8a:	687b      	ldr	r3, [r7, #4]
 8107c8c:	681b      	ldr	r3, [r3, #0]
 8107c8e:	685b      	ldr	r3, [r3, #4]
 8107c90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8107c94:	687b      	ldr	r3, [r7, #4]
 8107c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107c98:	687b      	ldr	r3, [r7, #4]
 8107c9a:	681b      	ldr	r3, [r3, #0]
 8107c9c:	430a      	orrs	r2, r1
 8107c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107ca0:	687b      	ldr	r3, [r7, #4]
 8107ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ca4:	f003 0304 	and.w	r3, r3, #4
 8107ca8:	2b00      	cmp	r3, #0
 8107caa:	d00a      	beq.n	8107cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8107cac:	687b      	ldr	r3, [r7, #4]
 8107cae:	681b      	ldr	r3, [r3, #0]
 8107cb0:	685b      	ldr	r3, [r3, #4]
 8107cb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8107cb6:	687b      	ldr	r3, [r7, #4]
 8107cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8107cba:	687b      	ldr	r3, [r7, #4]
 8107cbc:	681b      	ldr	r3, [r3, #0]
 8107cbe:	430a      	orrs	r2, r1
 8107cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8107cc2:	687b      	ldr	r3, [r7, #4]
 8107cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107cc6:	f003 0308 	and.w	r3, r3, #8
 8107cca:	2b00      	cmp	r3, #0
 8107ccc:	d00a      	beq.n	8107ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8107cce:	687b      	ldr	r3, [r7, #4]
 8107cd0:	681b      	ldr	r3, [r3, #0]
 8107cd2:	685b      	ldr	r3, [r3, #4]
 8107cd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8107cd8:	687b      	ldr	r3, [r7, #4]
 8107cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107cdc:	687b      	ldr	r3, [r7, #4]
 8107cde:	681b      	ldr	r3, [r3, #0]
 8107ce0:	430a      	orrs	r2, r1
 8107ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8107ce4:	687b      	ldr	r3, [r7, #4]
 8107ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ce8:	f003 0310 	and.w	r3, r3, #16
 8107cec:	2b00      	cmp	r3, #0
 8107cee:	d00a      	beq.n	8107d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107cf0:	687b      	ldr	r3, [r7, #4]
 8107cf2:	681b      	ldr	r3, [r3, #0]
 8107cf4:	689b      	ldr	r3, [r3, #8]
 8107cf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8107cfa:	687b      	ldr	r3, [r7, #4]
 8107cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8107cfe:	687b      	ldr	r3, [r7, #4]
 8107d00:	681b      	ldr	r3, [r3, #0]
 8107d02:	430a      	orrs	r2, r1
 8107d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8107d06:	687b      	ldr	r3, [r7, #4]
 8107d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107d0a:	f003 0320 	and.w	r3, r3, #32
 8107d0e:	2b00      	cmp	r3, #0
 8107d10:	d00a      	beq.n	8107d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8107d12:	687b      	ldr	r3, [r7, #4]
 8107d14:	681b      	ldr	r3, [r3, #0]
 8107d16:	689b      	ldr	r3, [r3, #8]
 8107d18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8107d1c:	687b      	ldr	r3, [r7, #4]
 8107d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8107d20:	687b      	ldr	r3, [r7, #4]
 8107d22:	681b      	ldr	r3, [r3, #0]
 8107d24:	430a      	orrs	r2, r1
 8107d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8107d28:	687b      	ldr	r3, [r7, #4]
 8107d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107d30:	2b00      	cmp	r3, #0
 8107d32:	d01a      	beq.n	8107d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107d34:	687b      	ldr	r3, [r7, #4]
 8107d36:	681b      	ldr	r3, [r3, #0]
 8107d38:	685b      	ldr	r3, [r3, #4]
 8107d3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8107d3e:	687b      	ldr	r3, [r7, #4]
 8107d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107d42:	687b      	ldr	r3, [r7, #4]
 8107d44:	681b      	ldr	r3, [r3, #0]
 8107d46:	430a      	orrs	r2, r1
 8107d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8107d4a:	687b      	ldr	r3, [r7, #4]
 8107d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107d52:	d10a      	bne.n	8107d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8107d54:	687b      	ldr	r3, [r7, #4]
 8107d56:	681b      	ldr	r3, [r3, #0]
 8107d58:	685b      	ldr	r3, [r3, #4]
 8107d5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8107d5e:	687b      	ldr	r3, [r7, #4]
 8107d60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8107d62:	687b      	ldr	r3, [r7, #4]
 8107d64:	681b      	ldr	r3, [r3, #0]
 8107d66:	430a      	orrs	r2, r1
 8107d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8107d6a:	687b      	ldr	r3, [r7, #4]
 8107d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107d72:	2b00      	cmp	r3, #0
 8107d74:	d00a      	beq.n	8107d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8107d76:	687b      	ldr	r3, [r7, #4]
 8107d78:	681b      	ldr	r3, [r3, #0]
 8107d7a:	685b      	ldr	r3, [r3, #4]
 8107d7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8107d80:	687b      	ldr	r3, [r7, #4]
 8107d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107d84:	687b      	ldr	r3, [r7, #4]
 8107d86:	681b      	ldr	r3, [r3, #0]
 8107d88:	430a      	orrs	r2, r1
 8107d8a:	605a      	str	r2, [r3, #4]
  }
}
 8107d8c:	bf00      	nop
 8107d8e:	370c      	adds	r7, #12
 8107d90:	46bd      	mov	sp, r7
 8107d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d96:	4770      	bx	lr

08107d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8107d98:	b580      	push	{r7, lr}
 8107d9a:	b098      	sub	sp, #96	; 0x60
 8107d9c:	af02      	add	r7, sp, #8
 8107d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107da0:	687b      	ldr	r3, [r7, #4]
 8107da2:	2200      	movs	r2, #0
 8107da4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8107da8:	f7fa fbb8 	bl	810251c <HAL_GetTick>
 8107dac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107dae:	687b      	ldr	r3, [r7, #4]
 8107db0:	681b      	ldr	r3, [r3, #0]
 8107db2:	681b      	ldr	r3, [r3, #0]
 8107db4:	f003 0308 	and.w	r3, r3, #8
 8107db8:	2b08      	cmp	r3, #8
 8107dba:	d12f      	bne.n	8107e1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107dc0:	9300      	str	r3, [sp, #0]
 8107dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8107dc4:	2200      	movs	r2, #0
 8107dc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8107dca:	6878      	ldr	r0, [r7, #4]
 8107dcc:	f000 f88e 	bl	8107eec <UART_WaitOnFlagUntilTimeout>
 8107dd0:	4603      	mov	r3, r0
 8107dd2:	2b00      	cmp	r3, #0
 8107dd4:	d022      	beq.n	8107e1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8107dd6:	687b      	ldr	r3, [r7, #4]
 8107dd8:	681b      	ldr	r3, [r3, #0]
 8107dda:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107dde:	e853 3f00 	ldrex	r3, [r3]
 8107de2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8107de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107dea:	653b      	str	r3, [r7, #80]	; 0x50
 8107dec:	687b      	ldr	r3, [r7, #4]
 8107dee:	681b      	ldr	r3, [r3, #0]
 8107df0:	461a      	mov	r2, r3
 8107df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8107df4:	647b      	str	r3, [r7, #68]	; 0x44
 8107df6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107df8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8107dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8107dfc:	e841 2300 	strex	r3, r2, [r1]
 8107e00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8107e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107e04:	2b00      	cmp	r3, #0
 8107e06:	d1e6      	bne.n	8107dd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8107e08:	687b      	ldr	r3, [r7, #4]
 8107e0a:	2220      	movs	r2, #32
 8107e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8107e10:	687b      	ldr	r3, [r7, #4]
 8107e12:	2200      	movs	r2, #0
 8107e14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107e18:	2303      	movs	r3, #3
 8107e1a:	e063      	b.n	8107ee4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8107e1c:	687b      	ldr	r3, [r7, #4]
 8107e1e:	681b      	ldr	r3, [r3, #0]
 8107e20:	681b      	ldr	r3, [r3, #0]
 8107e22:	f003 0304 	and.w	r3, r3, #4
 8107e26:	2b04      	cmp	r3, #4
 8107e28:	d149      	bne.n	8107ebe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107e2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107e2e:	9300      	str	r3, [sp, #0]
 8107e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8107e32:	2200      	movs	r2, #0
 8107e34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8107e38:	6878      	ldr	r0, [r7, #4]
 8107e3a:	f000 f857 	bl	8107eec <UART_WaitOnFlagUntilTimeout>
 8107e3e:	4603      	mov	r3, r0
 8107e40:	2b00      	cmp	r3, #0
 8107e42:	d03c      	beq.n	8107ebe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8107e44:	687b      	ldr	r3, [r7, #4]
 8107e46:	681b      	ldr	r3, [r3, #0]
 8107e48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107e4c:	e853 3f00 	ldrex	r3, [r3]
 8107e50:	623b      	str	r3, [r7, #32]
   return(result);
 8107e52:	6a3b      	ldr	r3, [r7, #32]
 8107e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8107e58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8107e5a:	687b      	ldr	r3, [r7, #4]
 8107e5c:	681b      	ldr	r3, [r3, #0]
 8107e5e:	461a      	mov	r2, r3
 8107e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107e62:	633b      	str	r3, [r7, #48]	; 0x30
 8107e64:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8107e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107e6a:	e841 2300 	strex	r3, r2, [r1]
 8107e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8107e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e72:	2b00      	cmp	r3, #0
 8107e74:	d1e6      	bne.n	8107e44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107e76:	687b      	ldr	r3, [r7, #4]
 8107e78:	681b      	ldr	r3, [r3, #0]
 8107e7a:	3308      	adds	r3, #8
 8107e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107e7e:	693b      	ldr	r3, [r7, #16]
 8107e80:	e853 3f00 	ldrex	r3, [r3]
 8107e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8107e86:	68fb      	ldr	r3, [r7, #12]
 8107e88:	f023 0301 	bic.w	r3, r3, #1
 8107e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8107e8e:	687b      	ldr	r3, [r7, #4]
 8107e90:	681b      	ldr	r3, [r3, #0]
 8107e92:	3308      	adds	r3, #8
 8107e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8107e96:	61fa      	str	r2, [r7, #28]
 8107e98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107e9a:	69b9      	ldr	r1, [r7, #24]
 8107e9c:	69fa      	ldr	r2, [r7, #28]
 8107e9e:	e841 2300 	strex	r3, r2, [r1]
 8107ea2:	617b      	str	r3, [r7, #20]
   return(result);
 8107ea4:	697b      	ldr	r3, [r7, #20]
 8107ea6:	2b00      	cmp	r3, #0
 8107ea8:	d1e5      	bne.n	8107e76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8107eaa:	687b      	ldr	r3, [r7, #4]
 8107eac:	2220      	movs	r2, #32
 8107eae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8107eb2:	687b      	ldr	r3, [r7, #4]
 8107eb4:	2200      	movs	r2, #0
 8107eb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107eba:	2303      	movs	r3, #3
 8107ebc:	e012      	b.n	8107ee4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8107ebe:	687b      	ldr	r3, [r7, #4]
 8107ec0:	2220      	movs	r2, #32
 8107ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8107ec6:	687b      	ldr	r3, [r7, #4]
 8107ec8:	2220      	movs	r2, #32
 8107eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107ece:	687b      	ldr	r3, [r7, #4]
 8107ed0:	2200      	movs	r2, #0
 8107ed2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8107ed4:	687b      	ldr	r3, [r7, #4]
 8107ed6:	2200      	movs	r2, #0
 8107ed8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8107eda:	687b      	ldr	r3, [r7, #4]
 8107edc:	2200      	movs	r2, #0
 8107ede:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8107ee2:	2300      	movs	r3, #0
}
 8107ee4:	4618      	mov	r0, r3
 8107ee6:	3758      	adds	r7, #88	; 0x58
 8107ee8:	46bd      	mov	sp, r7
 8107eea:	bd80      	pop	{r7, pc}

08107eec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8107eec:	b580      	push	{r7, lr}
 8107eee:	b084      	sub	sp, #16
 8107ef0:	af00      	add	r7, sp, #0
 8107ef2:	60f8      	str	r0, [r7, #12]
 8107ef4:	60b9      	str	r1, [r7, #8]
 8107ef6:	603b      	str	r3, [r7, #0]
 8107ef8:	4613      	mov	r3, r2
 8107efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107efc:	e049      	b.n	8107f92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107efe:	69bb      	ldr	r3, [r7, #24]
 8107f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107f04:	d045      	beq.n	8107f92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107f06:	f7fa fb09 	bl	810251c <HAL_GetTick>
 8107f0a:	4602      	mov	r2, r0
 8107f0c:	683b      	ldr	r3, [r7, #0]
 8107f0e:	1ad3      	subs	r3, r2, r3
 8107f10:	69ba      	ldr	r2, [r7, #24]
 8107f12:	429a      	cmp	r2, r3
 8107f14:	d302      	bcc.n	8107f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8107f16:	69bb      	ldr	r3, [r7, #24]
 8107f18:	2b00      	cmp	r3, #0
 8107f1a:	d101      	bne.n	8107f20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8107f1c:	2303      	movs	r3, #3
 8107f1e:	e048      	b.n	8107fb2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8107f20:	68fb      	ldr	r3, [r7, #12]
 8107f22:	681b      	ldr	r3, [r3, #0]
 8107f24:	681b      	ldr	r3, [r3, #0]
 8107f26:	f003 0304 	and.w	r3, r3, #4
 8107f2a:	2b00      	cmp	r3, #0
 8107f2c:	d031      	beq.n	8107f92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8107f2e:	68fb      	ldr	r3, [r7, #12]
 8107f30:	681b      	ldr	r3, [r3, #0]
 8107f32:	69db      	ldr	r3, [r3, #28]
 8107f34:	f003 0308 	and.w	r3, r3, #8
 8107f38:	2b08      	cmp	r3, #8
 8107f3a:	d110      	bne.n	8107f5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8107f3c:	68fb      	ldr	r3, [r7, #12]
 8107f3e:	681b      	ldr	r3, [r3, #0]
 8107f40:	2208      	movs	r2, #8
 8107f42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8107f44:	68f8      	ldr	r0, [r7, #12]
 8107f46:	f000 f838 	bl	8107fba <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8107f4a:	68fb      	ldr	r3, [r7, #12]
 8107f4c:	2208      	movs	r2, #8
 8107f4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8107f52:	68fb      	ldr	r3, [r7, #12]
 8107f54:	2200      	movs	r2, #0
 8107f56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8107f5a:	2301      	movs	r3, #1
 8107f5c:	e029      	b.n	8107fb2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107f5e:	68fb      	ldr	r3, [r7, #12]
 8107f60:	681b      	ldr	r3, [r3, #0]
 8107f62:	69db      	ldr	r3, [r3, #28]
 8107f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8107f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107f6c:	d111      	bne.n	8107f92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107f6e:	68fb      	ldr	r3, [r7, #12]
 8107f70:	681b      	ldr	r3, [r3, #0]
 8107f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107f76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8107f78:	68f8      	ldr	r0, [r7, #12]
 8107f7a:	f000 f81e 	bl	8107fba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107f7e:	68fb      	ldr	r3, [r7, #12]
 8107f80:	2220      	movs	r2, #32
 8107f82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8107f86:	68fb      	ldr	r3, [r7, #12]
 8107f88:	2200      	movs	r2, #0
 8107f8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8107f8e:	2303      	movs	r3, #3
 8107f90:	e00f      	b.n	8107fb2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107f92:	68fb      	ldr	r3, [r7, #12]
 8107f94:	681b      	ldr	r3, [r3, #0]
 8107f96:	69da      	ldr	r2, [r3, #28]
 8107f98:	68bb      	ldr	r3, [r7, #8]
 8107f9a:	4013      	ands	r3, r2
 8107f9c:	68ba      	ldr	r2, [r7, #8]
 8107f9e:	429a      	cmp	r2, r3
 8107fa0:	bf0c      	ite	eq
 8107fa2:	2301      	moveq	r3, #1
 8107fa4:	2300      	movne	r3, #0
 8107fa6:	b2db      	uxtb	r3, r3
 8107fa8:	461a      	mov	r2, r3
 8107faa:	79fb      	ldrb	r3, [r7, #7]
 8107fac:	429a      	cmp	r2, r3
 8107fae:	d0a6      	beq.n	8107efe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8107fb0:	2300      	movs	r3, #0
}
 8107fb2:	4618      	mov	r0, r3
 8107fb4:	3710      	adds	r7, #16
 8107fb6:	46bd      	mov	sp, r7
 8107fb8:	bd80      	pop	{r7, pc}

08107fba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8107fba:	b480      	push	{r7}
 8107fbc:	b095      	sub	sp, #84	; 0x54
 8107fbe:	af00      	add	r7, sp, #0
 8107fc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8107fc2:	687b      	ldr	r3, [r7, #4]
 8107fc4:	681b      	ldr	r3, [r3, #0]
 8107fc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107fca:	e853 3f00 	ldrex	r3, [r3]
 8107fce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8107fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107fd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8107fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	681b      	ldr	r3, [r3, #0]
 8107fdc:	461a      	mov	r2, r3
 8107fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8107fe2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107fe4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8107fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8107fe8:	e841 2300 	strex	r3, r2, [r1]
 8107fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8107fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107ff0:	2b00      	cmp	r3, #0
 8107ff2:	d1e6      	bne.n	8107fc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8107ff4:	687b      	ldr	r3, [r7, #4]
 8107ff6:	681b      	ldr	r3, [r3, #0]
 8107ff8:	3308      	adds	r3, #8
 8107ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107ffc:	6a3b      	ldr	r3, [r7, #32]
 8107ffe:	e853 3f00 	ldrex	r3, [r3]
 8108002:	61fb      	str	r3, [r7, #28]
   return(result);
 8108004:	69fb      	ldr	r3, [r7, #28]
 8108006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810800a:	f023 0301 	bic.w	r3, r3, #1
 810800e:	64bb      	str	r3, [r7, #72]	; 0x48
 8108010:	687b      	ldr	r3, [r7, #4]
 8108012:	681b      	ldr	r3, [r3, #0]
 8108014:	3308      	adds	r3, #8
 8108016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108018:	62fa      	str	r2, [r7, #44]	; 0x2c
 810801a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810801c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810801e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108020:	e841 2300 	strex	r3, r2, [r1]
 8108024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108028:	2b00      	cmp	r3, #0
 810802a:	d1e3      	bne.n	8107ff4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810802c:	687b      	ldr	r3, [r7, #4]
 810802e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108030:	2b01      	cmp	r3, #1
 8108032:	d118      	bne.n	8108066 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108034:	687b      	ldr	r3, [r7, #4]
 8108036:	681b      	ldr	r3, [r3, #0]
 8108038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810803a:	68fb      	ldr	r3, [r7, #12]
 810803c:	e853 3f00 	ldrex	r3, [r3]
 8108040:	60bb      	str	r3, [r7, #8]
   return(result);
 8108042:	68bb      	ldr	r3, [r7, #8]
 8108044:	f023 0310 	bic.w	r3, r3, #16
 8108048:	647b      	str	r3, [r7, #68]	; 0x44
 810804a:	687b      	ldr	r3, [r7, #4]
 810804c:	681b      	ldr	r3, [r3, #0]
 810804e:	461a      	mov	r2, r3
 8108050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108052:	61bb      	str	r3, [r7, #24]
 8108054:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108056:	6979      	ldr	r1, [r7, #20]
 8108058:	69ba      	ldr	r2, [r7, #24]
 810805a:	e841 2300 	strex	r3, r2, [r1]
 810805e:	613b      	str	r3, [r7, #16]
   return(result);
 8108060:	693b      	ldr	r3, [r7, #16]
 8108062:	2b00      	cmp	r3, #0
 8108064:	d1e6      	bne.n	8108034 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8108066:	687b      	ldr	r3, [r7, #4]
 8108068:	2220      	movs	r2, #32
 810806a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810806e:	687b      	ldr	r3, [r7, #4]
 8108070:	2200      	movs	r2, #0
 8108072:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8108074:	687b      	ldr	r3, [r7, #4]
 8108076:	2200      	movs	r2, #0
 8108078:	675a      	str	r2, [r3, #116]	; 0x74
}
 810807a:	bf00      	nop
 810807c:	3754      	adds	r7, #84	; 0x54
 810807e:	46bd      	mov	sp, r7
 8108080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108084:	4770      	bx	lr

08108086 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8108086:	b480      	push	{r7}
 8108088:	b085      	sub	sp, #20
 810808a:	af00      	add	r7, sp, #0
 810808c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810808e:	687b      	ldr	r3, [r7, #4]
 8108090:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8108094:	2b01      	cmp	r3, #1
 8108096:	d101      	bne.n	810809c <HAL_UARTEx_DisableFifoMode+0x16>
 8108098:	2302      	movs	r3, #2
 810809a:	e027      	b.n	81080ec <HAL_UARTEx_DisableFifoMode+0x66>
 810809c:	687b      	ldr	r3, [r7, #4]
 810809e:	2201      	movs	r2, #1
 81080a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81080a4:	687b      	ldr	r3, [r7, #4]
 81080a6:	2224      	movs	r2, #36	; 0x24
 81080a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81080ac:	687b      	ldr	r3, [r7, #4]
 81080ae:	681b      	ldr	r3, [r3, #0]
 81080b0:	681b      	ldr	r3, [r3, #0]
 81080b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81080b4:	687b      	ldr	r3, [r7, #4]
 81080b6:	681b      	ldr	r3, [r3, #0]
 81080b8:	681a      	ldr	r2, [r3, #0]
 81080ba:	687b      	ldr	r3, [r7, #4]
 81080bc:	681b      	ldr	r3, [r3, #0]
 81080be:	f022 0201 	bic.w	r2, r2, #1
 81080c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81080c4:	68fb      	ldr	r3, [r7, #12]
 81080c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81080ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81080cc:	687b      	ldr	r3, [r7, #4]
 81080ce:	2200      	movs	r2, #0
 81080d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81080d2:	687b      	ldr	r3, [r7, #4]
 81080d4:	681b      	ldr	r3, [r3, #0]
 81080d6:	68fa      	ldr	r2, [r7, #12]
 81080d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81080da:	687b      	ldr	r3, [r7, #4]
 81080dc:	2220      	movs	r2, #32
 81080de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81080e2:	687b      	ldr	r3, [r7, #4]
 81080e4:	2200      	movs	r2, #0
 81080e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 81080ea:	2300      	movs	r3, #0
}
 81080ec:	4618      	mov	r0, r3
 81080ee:	3714      	adds	r7, #20
 81080f0:	46bd      	mov	sp, r7
 81080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080f6:	4770      	bx	lr

081080f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81080f8:	b580      	push	{r7, lr}
 81080fa:	b084      	sub	sp, #16
 81080fc:	af00      	add	r7, sp, #0
 81080fe:	6078      	str	r0, [r7, #4]
 8108100:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108102:	687b      	ldr	r3, [r7, #4]
 8108104:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8108108:	2b01      	cmp	r3, #1
 810810a:	d101      	bne.n	8108110 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810810c:	2302      	movs	r3, #2
 810810e:	e02d      	b.n	810816c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108110:	687b      	ldr	r3, [r7, #4]
 8108112:	2201      	movs	r2, #1
 8108114:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8108118:	687b      	ldr	r3, [r7, #4]
 810811a:	2224      	movs	r2, #36	; 0x24
 810811c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108120:	687b      	ldr	r3, [r7, #4]
 8108122:	681b      	ldr	r3, [r3, #0]
 8108124:	681b      	ldr	r3, [r3, #0]
 8108126:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108128:	687b      	ldr	r3, [r7, #4]
 810812a:	681b      	ldr	r3, [r3, #0]
 810812c:	681a      	ldr	r2, [r3, #0]
 810812e:	687b      	ldr	r3, [r7, #4]
 8108130:	681b      	ldr	r3, [r3, #0]
 8108132:	f022 0201 	bic.w	r2, r2, #1
 8108136:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108138:	687b      	ldr	r3, [r7, #4]
 810813a:	681b      	ldr	r3, [r3, #0]
 810813c:	689b      	ldr	r3, [r3, #8]
 810813e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108142:	687b      	ldr	r3, [r7, #4]
 8108144:	681b      	ldr	r3, [r3, #0]
 8108146:	683a      	ldr	r2, [r7, #0]
 8108148:	430a      	orrs	r2, r1
 810814a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810814c:	6878      	ldr	r0, [r7, #4]
 810814e:	f000 f84f 	bl	81081f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108152:	687b      	ldr	r3, [r7, #4]
 8108154:	681b      	ldr	r3, [r3, #0]
 8108156:	68fa      	ldr	r2, [r7, #12]
 8108158:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810815a:	687b      	ldr	r3, [r7, #4]
 810815c:	2220      	movs	r2, #32
 810815e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108162:	687b      	ldr	r3, [r7, #4]
 8108164:	2200      	movs	r2, #0
 8108166:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810816a:	2300      	movs	r3, #0
}
 810816c:	4618      	mov	r0, r3
 810816e:	3710      	adds	r7, #16
 8108170:	46bd      	mov	sp, r7
 8108172:	bd80      	pop	{r7, pc}

08108174 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108174:	b580      	push	{r7, lr}
 8108176:	b084      	sub	sp, #16
 8108178:	af00      	add	r7, sp, #0
 810817a:	6078      	str	r0, [r7, #4]
 810817c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810817e:	687b      	ldr	r3, [r7, #4]
 8108180:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8108184:	2b01      	cmp	r3, #1
 8108186:	d101      	bne.n	810818c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8108188:	2302      	movs	r3, #2
 810818a:	e02d      	b.n	81081e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810818c:	687b      	ldr	r3, [r7, #4]
 810818e:	2201      	movs	r2, #1
 8108190:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8108194:	687b      	ldr	r3, [r7, #4]
 8108196:	2224      	movs	r2, #36	; 0x24
 8108198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810819c:	687b      	ldr	r3, [r7, #4]
 810819e:	681b      	ldr	r3, [r3, #0]
 81081a0:	681b      	ldr	r3, [r3, #0]
 81081a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81081a4:	687b      	ldr	r3, [r7, #4]
 81081a6:	681b      	ldr	r3, [r3, #0]
 81081a8:	681a      	ldr	r2, [r3, #0]
 81081aa:	687b      	ldr	r3, [r7, #4]
 81081ac:	681b      	ldr	r3, [r3, #0]
 81081ae:	f022 0201 	bic.w	r2, r2, #1
 81081b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81081b4:	687b      	ldr	r3, [r7, #4]
 81081b6:	681b      	ldr	r3, [r3, #0]
 81081b8:	689b      	ldr	r3, [r3, #8]
 81081ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81081be:	687b      	ldr	r3, [r7, #4]
 81081c0:	681b      	ldr	r3, [r3, #0]
 81081c2:	683a      	ldr	r2, [r7, #0]
 81081c4:	430a      	orrs	r2, r1
 81081c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81081c8:	6878      	ldr	r0, [r7, #4]
 81081ca:	f000 f811 	bl	81081f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81081ce:	687b      	ldr	r3, [r7, #4]
 81081d0:	681b      	ldr	r3, [r3, #0]
 81081d2:	68fa      	ldr	r2, [r7, #12]
 81081d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81081d6:	687b      	ldr	r3, [r7, #4]
 81081d8:	2220      	movs	r2, #32
 81081da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81081de:	687b      	ldr	r3, [r7, #4]
 81081e0:	2200      	movs	r2, #0
 81081e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 81081e6:	2300      	movs	r3, #0
}
 81081e8:	4618      	mov	r0, r3
 81081ea:	3710      	adds	r7, #16
 81081ec:	46bd      	mov	sp, r7
 81081ee:	bd80      	pop	{r7, pc}

081081f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81081f0:	b480      	push	{r7}
 81081f2:	b085      	sub	sp, #20
 81081f4:	af00      	add	r7, sp, #0
 81081f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81081f8:	687b      	ldr	r3, [r7, #4]
 81081fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81081fc:	2b00      	cmp	r3, #0
 81081fe:	d108      	bne.n	8108212 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8108200:	687b      	ldr	r3, [r7, #4]
 8108202:	2201      	movs	r2, #1
 8108204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8108208:	687b      	ldr	r3, [r7, #4]
 810820a:	2201      	movs	r2, #1
 810820c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108210:	e031      	b.n	8108276 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108212:	2310      	movs	r3, #16
 8108214:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8108216:	2310      	movs	r3, #16
 8108218:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810821a:	687b      	ldr	r3, [r7, #4]
 810821c:	681b      	ldr	r3, [r3, #0]
 810821e:	689b      	ldr	r3, [r3, #8]
 8108220:	0e5b      	lsrs	r3, r3, #25
 8108222:	b2db      	uxtb	r3, r3
 8108224:	f003 0307 	and.w	r3, r3, #7
 8108228:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810822a:	687b      	ldr	r3, [r7, #4]
 810822c:	681b      	ldr	r3, [r3, #0]
 810822e:	689b      	ldr	r3, [r3, #8]
 8108230:	0f5b      	lsrs	r3, r3, #29
 8108232:	b2db      	uxtb	r3, r3
 8108234:	f003 0307 	and.w	r3, r3, #7
 8108238:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810823a:	7bbb      	ldrb	r3, [r7, #14]
 810823c:	7b3a      	ldrb	r2, [r7, #12]
 810823e:	4911      	ldr	r1, [pc, #68]	; (8108284 <UARTEx_SetNbDataToProcess+0x94>)
 8108240:	5c8a      	ldrb	r2, [r1, r2]
 8108242:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8108246:	7b3a      	ldrb	r2, [r7, #12]
 8108248:	490f      	ldr	r1, [pc, #60]	; (8108288 <UARTEx_SetNbDataToProcess+0x98>)
 810824a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810824c:	fb93 f3f2 	sdiv	r3, r3, r2
 8108250:	b29a      	uxth	r2, r3
 8108252:	687b      	ldr	r3, [r7, #4]
 8108254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108258:	7bfb      	ldrb	r3, [r7, #15]
 810825a:	7b7a      	ldrb	r2, [r7, #13]
 810825c:	4909      	ldr	r1, [pc, #36]	; (8108284 <UARTEx_SetNbDataToProcess+0x94>)
 810825e:	5c8a      	ldrb	r2, [r1, r2]
 8108260:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8108264:	7b7a      	ldrb	r2, [r7, #13]
 8108266:	4908      	ldr	r1, [pc, #32]	; (8108288 <UARTEx_SetNbDataToProcess+0x98>)
 8108268:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810826a:	fb93 f3f2 	sdiv	r3, r3, r2
 810826e:	b29a      	uxth	r2, r3
 8108270:	687b      	ldr	r3, [r7, #4]
 8108272:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8108276:	bf00      	nop
 8108278:	3714      	adds	r7, #20
 810827a:	46bd      	mov	sp, r7
 810827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108280:	4770      	bx	lr
 8108282:	bf00      	nop
 8108284:	0810cf70 	.word	0x0810cf70
 8108288:	0810cf78 	.word	0x0810cf78

0810828c <__errno>:
 810828c:	4b01      	ldr	r3, [pc, #4]	; (8108294 <__errno+0x8>)
 810828e:	6818      	ldr	r0, [r3, #0]
 8108290:	4770      	bx	lr
 8108292:	bf00      	nop
 8108294:	10000020 	.word	0x10000020

08108298 <__libc_init_array>:
 8108298:	b570      	push	{r4, r5, r6, lr}
 810829a:	4d0d      	ldr	r5, [pc, #52]	; (81082d0 <__libc_init_array+0x38>)
 810829c:	4c0d      	ldr	r4, [pc, #52]	; (81082d4 <__libc_init_array+0x3c>)
 810829e:	1b64      	subs	r4, r4, r5
 81082a0:	10a4      	asrs	r4, r4, #2
 81082a2:	2600      	movs	r6, #0
 81082a4:	42a6      	cmp	r6, r4
 81082a6:	d109      	bne.n	81082bc <__libc_init_array+0x24>
 81082a8:	4d0b      	ldr	r5, [pc, #44]	; (81082d8 <__libc_init_array+0x40>)
 81082aa:	4c0c      	ldr	r4, [pc, #48]	; (81082dc <__libc_init_array+0x44>)
 81082ac:	f004 fd1a 	bl	810cce4 <_init>
 81082b0:	1b64      	subs	r4, r4, r5
 81082b2:	10a4      	asrs	r4, r4, #2
 81082b4:	2600      	movs	r6, #0
 81082b6:	42a6      	cmp	r6, r4
 81082b8:	d105      	bne.n	81082c6 <__libc_init_array+0x2e>
 81082ba:	bd70      	pop	{r4, r5, r6, pc}
 81082bc:	f855 3b04 	ldr.w	r3, [r5], #4
 81082c0:	4798      	blx	r3
 81082c2:	3601      	adds	r6, #1
 81082c4:	e7ee      	b.n	81082a4 <__libc_init_array+0xc>
 81082c6:	f855 3b04 	ldr.w	r3, [r5], #4
 81082ca:	4798      	blx	r3
 81082cc:	3601      	adds	r6, #1
 81082ce:	e7f2      	b.n	81082b6 <__libc_init_array+0x1e>
 81082d0:	0810d434 	.word	0x0810d434
 81082d4:	0810d434 	.word	0x0810d434
 81082d8:	0810d434 	.word	0x0810d434
 81082dc:	0810d438 	.word	0x0810d438

081082e0 <memcpy>:
 81082e0:	440a      	add	r2, r1
 81082e2:	4291      	cmp	r1, r2
 81082e4:	f100 33ff 	add.w	r3, r0, #4294967295
 81082e8:	d100      	bne.n	81082ec <memcpy+0xc>
 81082ea:	4770      	bx	lr
 81082ec:	b510      	push	{r4, lr}
 81082ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 81082f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 81082f6:	4291      	cmp	r1, r2
 81082f8:	d1f9      	bne.n	81082ee <memcpy+0xe>
 81082fa:	bd10      	pop	{r4, pc}

081082fc <memset>:
 81082fc:	4402      	add	r2, r0
 81082fe:	4603      	mov	r3, r0
 8108300:	4293      	cmp	r3, r2
 8108302:	d100      	bne.n	8108306 <memset+0xa>
 8108304:	4770      	bx	lr
 8108306:	f803 1b01 	strb.w	r1, [r3], #1
 810830a:	e7f9      	b.n	8108300 <memset+0x4>

0810830c <__cvt>:
 810830c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108310:	ec55 4b10 	vmov	r4, r5, d0
 8108314:	2d00      	cmp	r5, #0
 8108316:	460e      	mov	r6, r1
 8108318:	4619      	mov	r1, r3
 810831a:	462b      	mov	r3, r5
 810831c:	bfbb      	ittet	lt
 810831e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8108322:	461d      	movlt	r5, r3
 8108324:	2300      	movge	r3, #0
 8108326:	232d      	movlt	r3, #45	; 0x2d
 8108328:	700b      	strb	r3, [r1, #0]
 810832a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810832c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8108330:	4691      	mov	r9, r2
 8108332:	f023 0820 	bic.w	r8, r3, #32
 8108336:	bfbc      	itt	lt
 8108338:	4622      	movlt	r2, r4
 810833a:	4614      	movlt	r4, r2
 810833c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8108340:	d005      	beq.n	810834e <__cvt+0x42>
 8108342:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8108346:	d100      	bne.n	810834a <__cvt+0x3e>
 8108348:	3601      	adds	r6, #1
 810834a:	2102      	movs	r1, #2
 810834c:	e000      	b.n	8108350 <__cvt+0x44>
 810834e:	2103      	movs	r1, #3
 8108350:	ab03      	add	r3, sp, #12
 8108352:	9301      	str	r3, [sp, #4]
 8108354:	ab02      	add	r3, sp, #8
 8108356:	9300      	str	r3, [sp, #0]
 8108358:	ec45 4b10 	vmov	d0, r4, r5
 810835c:	4653      	mov	r3, sl
 810835e:	4632      	mov	r2, r6
 8108360:	f001 fefa 	bl	810a158 <_dtoa_r>
 8108364:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8108368:	4607      	mov	r7, r0
 810836a:	d102      	bne.n	8108372 <__cvt+0x66>
 810836c:	f019 0f01 	tst.w	r9, #1
 8108370:	d022      	beq.n	81083b8 <__cvt+0xac>
 8108372:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8108376:	eb07 0906 	add.w	r9, r7, r6
 810837a:	d110      	bne.n	810839e <__cvt+0x92>
 810837c:	783b      	ldrb	r3, [r7, #0]
 810837e:	2b30      	cmp	r3, #48	; 0x30
 8108380:	d10a      	bne.n	8108398 <__cvt+0x8c>
 8108382:	2200      	movs	r2, #0
 8108384:	2300      	movs	r3, #0
 8108386:	4620      	mov	r0, r4
 8108388:	4629      	mov	r1, r5
 810838a:	f7f8 fc25 	bl	8100bd8 <__aeabi_dcmpeq>
 810838e:	b918      	cbnz	r0, 8108398 <__cvt+0x8c>
 8108390:	f1c6 0601 	rsb	r6, r6, #1
 8108394:	f8ca 6000 	str.w	r6, [sl]
 8108398:	f8da 3000 	ldr.w	r3, [sl]
 810839c:	4499      	add	r9, r3
 810839e:	2200      	movs	r2, #0
 81083a0:	2300      	movs	r3, #0
 81083a2:	4620      	mov	r0, r4
 81083a4:	4629      	mov	r1, r5
 81083a6:	f7f8 fc17 	bl	8100bd8 <__aeabi_dcmpeq>
 81083aa:	b108      	cbz	r0, 81083b0 <__cvt+0xa4>
 81083ac:	f8cd 900c 	str.w	r9, [sp, #12]
 81083b0:	2230      	movs	r2, #48	; 0x30
 81083b2:	9b03      	ldr	r3, [sp, #12]
 81083b4:	454b      	cmp	r3, r9
 81083b6:	d307      	bcc.n	81083c8 <__cvt+0xbc>
 81083b8:	9b03      	ldr	r3, [sp, #12]
 81083ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 81083bc:	1bdb      	subs	r3, r3, r7
 81083be:	4638      	mov	r0, r7
 81083c0:	6013      	str	r3, [r2, #0]
 81083c2:	b004      	add	sp, #16
 81083c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81083c8:	1c59      	adds	r1, r3, #1
 81083ca:	9103      	str	r1, [sp, #12]
 81083cc:	701a      	strb	r2, [r3, #0]
 81083ce:	e7f0      	b.n	81083b2 <__cvt+0xa6>

081083d0 <__exponent>:
 81083d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81083d2:	4603      	mov	r3, r0
 81083d4:	2900      	cmp	r1, #0
 81083d6:	bfb8      	it	lt
 81083d8:	4249      	neglt	r1, r1
 81083da:	f803 2b02 	strb.w	r2, [r3], #2
 81083de:	bfb4      	ite	lt
 81083e0:	222d      	movlt	r2, #45	; 0x2d
 81083e2:	222b      	movge	r2, #43	; 0x2b
 81083e4:	2909      	cmp	r1, #9
 81083e6:	7042      	strb	r2, [r0, #1]
 81083e8:	dd2a      	ble.n	8108440 <__exponent+0x70>
 81083ea:	f10d 0407 	add.w	r4, sp, #7
 81083ee:	46a4      	mov	ip, r4
 81083f0:	270a      	movs	r7, #10
 81083f2:	46a6      	mov	lr, r4
 81083f4:	460a      	mov	r2, r1
 81083f6:	fb91 f6f7 	sdiv	r6, r1, r7
 81083fa:	fb07 1516 	mls	r5, r7, r6, r1
 81083fe:	3530      	adds	r5, #48	; 0x30
 8108400:	2a63      	cmp	r2, #99	; 0x63
 8108402:	f104 34ff 	add.w	r4, r4, #4294967295
 8108406:	f80e 5c01 	strb.w	r5, [lr, #-1]
 810840a:	4631      	mov	r1, r6
 810840c:	dcf1      	bgt.n	81083f2 <__exponent+0x22>
 810840e:	3130      	adds	r1, #48	; 0x30
 8108410:	f1ae 0502 	sub.w	r5, lr, #2
 8108414:	f804 1c01 	strb.w	r1, [r4, #-1]
 8108418:	1c44      	adds	r4, r0, #1
 810841a:	4629      	mov	r1, r5
 810841c:	4561      	cmp	r1, ip
 810841e:	d30a      	bcc.n	8108436 <__exponent+0x66>
 8108420:	f10d 0209 	add.w	r2, sp, #9
 8108424:	eba2 020e 	sub.w	r2, r2, lr
 8108428:	4565      	cmp	r5, ip
 810842a:	bf88      	it	hi
 810842c:	2200      	movhi	r2, #0
 810842e:	4413      	add	r3, r2
 8108430:	1a18      	subs	r0, r3, r0
 8108432:	b003      	add	sp, #12
 8108434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8108436:	f811 2b01 	ldrb.w	r2, [r1], #1
 810843a:	f804 2f01 	strb.w	r2, [r4, #1]!
 810843e:	e7ed      	b.n	810841c <__exponent+0x4c>
 8108440:	2330      	movs	r3, #48	; 0x30
 8108442:	3130      	adds	r1, #48	; 0x30
 8108444:	7083      	strb	r3, [r0, #2]
 8108446:	70c1      	strb	r1, [r0, #3]
 8108448:	1d03      	adds	r3, r0, #4
 810844a:	e7f1      	b.n	8108430 <__exponent+0x60>

0810844c <_printf_float>:
 810844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108450:	ed2d 8b02 	vpush	{d8}
 8108454:	b08d      	sub	sp, #52	; 0x34
 8108456:	460c      	mov	r4, r1
 8108458:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810845c:	4616      	mov	r6, r2
 810845e:	461f      	mov	r7, r3
 8108460:	4605      	mov	r5, r0
 8108462:	f003 f98d 	bl	810b780 <_localeconv_r>
 8108466:	f8d0 a000 	ldr.w	sl, [r0]
 810846a:	4650      	mov	r0, sl
 810846c:	f7f7 ff38 	bl	81002e0 <strlen>
 8108470:	2300      	movs	r3, #0
 8108472:	930a      	str	r3, [sp, #40]	; 0x28
 8108474:	6823      	ldr	r3, [r4, #0]
 8108476:	9305      	str	r3, [sp, #20]
 8108478:	f8d8 3000 	ldr.w	r3, [r8]
 810847c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8108480:	3307      	adds	r3, #7
 8108482:	f023 0307 	bic.w	r3, r3, #7
 8108486:	f103 0208 	add.w	r2, r3, #8
 810848a:	f8c8 2000 	str.w	r2, [r8]
 810848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108492:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8108496:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810849a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810849e:	9307      	str	r3, [sp, #28]
 81084a0:	f8cd 8018 	str.w	r8, [sp, #24]
 81084a4:	ee08 0a10 	vmov	s16, r0
 81084a8:	4b9f      	ldr	r3, [pc, #636]	; (8108728 <_printf_float+0x2dc>)
 81084aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81084ae:	f04f 32ff 	mov.w	r2, #4294967295
 81084b2:	f7f8 fbc3 	bl	8100c3c <__aeabi_dcmpun>
 81084b6:	bb88      	cbnz	r0, 810851c <_printf_float+0xd0>
 81084b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81084bc:	4b9a      	ldr	r3, [pc, #616]	; (8108728 <_printf_float+0x2dc>)
 81084be:	f04f 32ff 	mov.w	r2, #4294967295
 81084c2:	f7f8 fb9d 	bl	8100c00 <__aeabi_dcmple>
 81084c6:	bb48      	cbnz	r0, 810851c <_printf_float+0xd0>
 81084c8:	2200      	movs	r2, #0
 81084ca:	2300      	movs	r3, #0
 81084cc:	4640      	mov	r0, r8
 81084ce:	4649      	mov	r1, r9
 81084d0:	f7f8 fb8c 	bl	8100bec <__aeabi_dcmplt>
 81084d4:	b110      	cbz	r0, 81084dc <_printf_float+0x90>
 81084d6:	232d      	movs	r3, #45	; 0x2d
 81084d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81084dc:	4b93      	ldr	r3, [pc, #588]	; (810872c <_printf_float+0x2e0>)
 81084de:	4894      	ldr	r0, [pc, #592]	; (8108730 <_printf_float+0x2e4>)
 81084e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 81084e4:	bf94      	ite	ls
 81084e6:	4698      	movls	r8, r3
 81084e8:	4680      	movhi	r8, r0
 81084ea:	2303      	movs	r3, #3
 81084ec:	6123      	str	r3, [r4, #16]
 81084ee:	9b05      	ldr	r3, [sp, #20]
 81084f0:	f023 0204 	bic.w	r2, r3, #4
 81084f4:	6022      	str	r2, [r4, #0]
 81084f6:	f04f 0900 	mov.w	r9, #0
 81084fa:	9700      	str	r7, [sp, #0]
 81084fc:	4633      	mov	r3, r6
 81084fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8108500:	4621      	mov	r1, r4
 8108502:	4628      	mov	r0, r5
 8108504:	f000 f9d8 	bl	81088b8 <_printf_common>
 8108508:	3001      	adds	r0, #1
 810850a:	f040 8090 	bne.w	810862e <_printf_float+0x1e2>
 810850e:	f04f 30ff 	mov.w	r0, #4294967295
 8108512:	b00d      	add	sp, #52	; 0x34
 8108514:	ecbd 8b02 	vpop	{d8}
 8108518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810851c:	4642      	mov	r2, r8
 810851e:	464b      	mov	r3, r9
 8108520:	4640      	mov	r0, r8
 8108522:	4649      	mov	r1, r9
 8108524:	f7f8 fb8a 	bl	8100c3c <__aeabi_dcmpun>
 8108528:	b140      	cbz	r0, 810853c <_printf_float+0xf0>
 810852a:	464b      	mov	r3, r9
 810852c:	2b00      	cmp	r3, #0
 810852e:	bfbc      	itt	lt
 8108530:	232d      	movlt	r3, #45	; 0x2d
 8108532:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8108536:	487f      	ldr	r0, [pc, #508]	; (8108734 <_printf_float+0x2e8>)
 8108538:	4b7f      	ldr	r3, [pc, #508]	; (8108738 <_printf_float+0x2ec>)
 810853a:	e7d1      	b.n	81084e0 <_printf_float+0x94>
 810853c:	6863      	ldr	r3, [r4, #4]
 810853e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8108542:	9206      	str	r2, [sp, #24]
 8108544:	1c5a      	adds	r2, r3, #1
 8108546:	d13f      	bne.n	81085c8 <_printf_float+0x17c>
 8108548:	2306      	movs	r3, #6
 810854a:	6063      	str	r3, [r4, #4]
 810854c:	9b05      	ldr	r3, [sp, #20]
 810854e:	6861      	ldr	r1, [r4, #4]
 8108550:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8108554:	2300      	movs	r3, #0
 8108556:	9303      	str	r3, [sp, #12]
 8108558:	ab0a      	add	r3, sp, #40	; 0x28
 810855a:	e9cd b301 	strd	fp, r3, [sp, #4]
 810855e:	ab09      	add	r3, sp, #36	; 0x24
 8108560:	ec49 8b10 	vmov	d0, r8, r9
 8108564:	9300      	str	r3, [sp, #0]
 8108566:	6022      	str	r2, [r4, #0]
 8108568:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810856c:	4628      	mov	r0, r5
 810856e:	f7ff fecd 	bl	810830c <__cvt>
 8108572:	9b06      	ldr	r3, [sp, #24]
 8108574:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108576:	2b47      	cmp	r3, #71	; 0x47
 8108578:	4680      	mov	r8, r0
 810857a:	d108      	bne.n	810858e <_printf_float+0x142>
 810857c:	1cc8      	adds	r0, r1, #3
 810857e:	db02      	blt.n	8108586 <_printf_float+0x13a>
 8108580:	6863      	ldr	r3, [r4, #4]
 8108582:	4299      	cmp	r1, r3
 8108584:	dd41      	ble.n	810860a <_printf_float+0x1be>
 8108586:	f1ab 0b02 	sub.w	fp, fp, #2
 810858a:	fa5f fb8b 	uxtb.w	fp, fp
 810858e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8108592:	d820      	bhi.n	81085d6 <_printf_float+0x18a>
 8108594:	3901      	subs	r1, #1
 8108596:	465a      	mov	r2, fp
 8108598:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810859c:	9109      	str	r1, [sp, #36]	; 0x24
 810859e:	f7ff ff17 	bl	81083d0 <__exponent>
 81085a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81085a4:	1813      	adds	r3, r2, r0
 81085a6:	2a01      	cmp	r2, #1
 81085a8:	4681      	mov	r9, r0
 81085aa:	6123      	str	r3, [r4, #16]
 81085ac:	dc02      	bgt.n	81085b4 <_printf_float+0x168>
 81085ae:	6822      	ldr	r2, [r4, #0]
 81085b0:	07d2      	lsls	r2, r2, #31
 81085b2:	d501      	bpl.n	81085b8 <_printf_float+0x16c>
 81085b4:	3301      	adds	r3, #1
 81085b6:	6123      	str	r3, [r4, #16]
 81085b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 81085bc:	2b00      	cmp	r3, #0
 81085be:	d09c      	beq.n	81084fa <_printf_float+0xae>
 81085c0:	232d      	movs	r3, #45	; 0x2d
 81085c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81085c6:	e798      	b.n	81084fa <_printf_float+0xae>
 81085c8:	9a06      	ldr	r2, [sp, #24]
 81085ca:	2a47      	cmp	r2, #71	; 0x47
 81085cc:	d1be      	bne.n	810854c <_printf_float+0x100>
 81085ce:	2b00      	cmp	r3, #0
 81085d0:	d1bc      	bne.n	810854c <_printf_float+0x100>
 81085d2:	2301      	movs	r3, #1
 81085d4:	e7b9      	b.n	810854a <_printf_float+0xfe>
 81085d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 81085da:	d118      	bne.n	810860e <_printf_float+0x1c2>
 81085dc:	2900      	cmp	r1, #0
 81085de:	6863      	ldr	r3, [r4, #4]
 81085e0:	dd0b      	ble.n	81085fa <_printf_float+0x1ae>
 81085e2:	6121      	str	r1, [r4, #16]
 81085e4:	b913      	cbnz	r3, 81085ec <_printf_float+0x1a0>
 81085e6:	6822      	ldr	r2, [r4, #0]
 81085e8:	07d0      	lsls	r0, r2, #31
 81085ea:	d502      	bpl.n	81085f2 <_printf_float+0x1a6>
 81085ec:	3301      	adds	r3, #1
 81085ee:	440b      	add	r3, r1
 81085f0:	6123      	str	r3, [r4, #16]
 81085f2:	65a1      	str	r1, [r4, #88]	; 0x58
 81085f4:	f04f 0900 	mov.w	r9, #0
 81085f8:	e7de      	b.n	81085b8 <_printf_float+0x16c>
 81085fa:	b913      	cbnz	r3, 8108602 <_printf_float+0x1b6>
 81085fc:	6822      	ldr	r2, [r4, #0]
 81085fe:	07d2      	lsls	r2, r2, #31
 8108600:	d501      	bpl.n	8108606 <_printf_float+0x1ba>
 8108602:	3302      	adds	r3, #2
 8108604:	e7f4      	b.n	81085f0 <_printf_float+0x1a4>
 8108606:	2301      	movs	r3, #1
 8108608:	e7f2      	b.n	81085f0 <_printf_float+0x1a4>
 810860a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810860e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108610:	4299      	cmp	r1, r3
 8108612:	db05      	blt.n	8108620 <_printf_float+0x1d4>
 8108614:	6823      	ldr	r3, [r4, #0]
 8108616:	6121      	str	r1, [r4, #16]
 8108618:	07d8      	lsls	r0, r3, #31
 810861a:	d5ea      	bpl.n	81085f2 <_printf_float+0x1a6>
 810861c:	1c4b      	adds	r3, r1, #1
 810861e:	e7e7      	b.n	81085f0 <_printf_float+0x1a4>
 8108620:	2900      	cmp	r1, #0
 8108622:	bfd4      	ite	le
 8108624:	f1c1 0202 	rsble	r2, r1, #2
 8108628:	2201      	movgt	r2, #1
 810862a:	4413      	add	r3, r2
 810862c:	e7e0      	b.n	81085f0 <_printf_float+0x1a4>
 810862e:	6823      	ldr	r3, [r4, #0]
 8108630:	055a      	lsls	r2, r3, #21
 8108632:	d407      	bmi.n	8108644 <_printf_float+0x1f8>
 8108634:	6923      	ldr	r3, [r4, #16]
 8108636:	4642      	mov	r2, r8
 8108638:	4631      	mov	r1, r6
 810863a:	4628      	mov	r0, r5
 810863c:	47b8      	blx	r7
 810863e:	3001      	adds	r0, #1
 8108640:	d12c      	bne.n	810869c <_printf_float+0x250>
 8108642:	e764      	b.n	810850e <_printf_float+0xc2>
 8108644:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8108648:	f240 80e0 	bls.w	810880c <_printf_float+0x3c0>
 810864c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8108650:	2200      	movs	r2, #0
 8108652:	2300      	movs	r3, #0
 8108654:	f7f8 fac0 	bl	8100bd8 <__aeabi_dcmpeq>
 8108658:	2800      	cmp	r0, #0
 810865a:	d034      	beq.n	81086c6 <_printf_float+0x27a>
 810865c:	4a37      	ldr	r2, [pc, #220]	; (810873c <_printf_float+0x2f0>)
 810865e:	2301      	movs	r3, #1
 8108660:	4631      	mov	r1, r6
 8108662:	4628      	mov	r0, r5
 8108664:	47b8      	blx	r7
 8108666:	3001      	adds	r0, #1
 8108668:	f43f af51 	beq.w	810850e <_printf_float+0xc2>
 810866c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8108670:	429a      	cmp	r2, r3
 8108672:	db02      	blt.n	810867a <_printf_float+0x22e>
 8108674:	6823      	ldr	r3, [r4, #0]
 8108676:	07d8      	lsls	r0, r3, #31
 8108678:	d510      	bpl.n	810869c <_printf_float+0x250>
 810867a:	ee18 3a10 	vmov	r3, s16
 810867e:	4652      	mov	r2, sl
 8108680:	4631      	mov	r1, r6
 8108682:	4628      	mov	r0, r5
 8108684:	47b8      	blx	r7
 8108686:	3001      	adds	r0, #1
 8108688:	f43f af41 	beq.w	810850e <_printf_float+0xc2>
 810868c:	f04f 0800 	mov.w	r8, #0
 8108690:	f104 091a 	add.w	r9, r4, #26
 8108694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108696:	3b01      	subs	r3, #1
 8108698:	4543      	cmp	r3, r8
 810869a:	dc09      	bgt.n	81086b0 <_printf_float+0x264>
 810869c:	6823      	ldr	r3, [r4, #0]
 810869e:	079b      	lsls	r3, r3, #30
 81086a0:	f100 8105 	bmi.w	81088ae <_printf_float+0x462>
 81086a4:	68e0      	ldr	r0, [r4, #12]
 81086a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81086a8:	4298      	cmp	r0, r3
 81086aa:	bfb8      	it	lt
 81086ac:	4618      	movlt	r0, r3
 81086ae:	e730      	b.n	8108512 <_printf_float+0xc6>
 81086b0:	2301      	movs	r3, #1
 81086b2:	464a      	mov	r2, r9
 81086b4:	4631      	mov	r1, r6
 81086b6:	4628      	mov	r0, r5
 81086b8:	47b8      	blx	r7
 81086ba:	3001      	adds	r0, #1
 81086bc:	f43f af27 	beq.w	810850e <_printf_float+0xc2>
 81086c0:	f108 0801 	add.w	r8, r8, #1
 81086c4:	e7e6      	b.n	8108694 <_printf_float+0x248>
 81086c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81086c8:	2b00      	cmp	r3, #0
 81086ca:	dc39      	bgt.n	8108740 <_printf_float+0x2f4>
 81086cc:	4a1b      	ldr	r2, [pc, #108]	; (810873c <_printf_float+0x2f0>)
 81086ce:	2301      	movs	r3, #1
 81086d0:	4631      	mov	r1, r6
 81086d2:	4628      	mov	r0, r5
 81086d4:	47b8      	blx	r7
 81086d6:	3001      	adds	r0, #1
 81086d8:	f43f af19 	beq.w	810850e <_printf_float+0xc2>
 81086dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81086e0:	4313      	orrs	r3, r2
 81086e2:	d102      	bne.n	81086ea <_printf_float+0x29e>
 81086e4:	6823      	ldr	r3, [r4, #0]
 81086e6:	07d9      	lsls	r1, r3, #31
 81086e8:	d5d8      	bpl.n	810869c <_printf_float+0x250>
 81086ea:	ee18 3a10 	vmov	r3, s16
 81086ee:	4652      	mov	r2, sl
 81086f0:	4631      	mov	r1, r6
 81086f2:	4628      	mov	r0, r5
 81086f4:	47b8      	blx	r7
 81086f6:	3001      	adds	r0, #1
 81086f8:	f43f af09 	beq.w	810850e <_printf_float+0xc2>
 81086fc:	f04f 0900 	mov.w	r9, #0
 8108700:	f104 0a1a 	add.w	sl, r4, #26
 8108704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108706:	425b      	negs	r3, r3
 8108708:	454b      	cmp	r3, r9
 810870a:	dc01      	bgt.n	8108710 <_printf_float+0x2c4>
 810870c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810870e:	e792      	b.n	8108636 <_printf_float+0x1ea>
 8108710:	2301      	movs	r3, #1
 8108712:	4652      	mov	r2, sl
 8108714:	4631      	mov	r1, r6
 8108716:	4628      	mov	r0, r5
 8108718:	47b8      	blx	r7
 810871a:	3001      	adds	r0, #1
 810871c:	f43f aef7 	beq.w	810850e <_printf_float+0xc2>
 8108720:	f109 0901 	add.w	r9, r9, #1
 8108724:	e7ee      	b.n	8108704 <_printf_float+0x2b8>
 8108726:	bf00      	nop
 8108728:	7fefffff 	.word	0x7fefffff
 810872c:	0810cf84 	.word	0x0810cf84
 8108730:	0810cf88 	.word	0x0810cf88
 8108734:	0810cf90 	.word	0x0810cf90
 8108738:	0810cf8c 	.word	0x0810cf8c
 810873c:	0810cf94 	.word	0x0810cf94
 8108740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8108742:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8108744:	429a      	cmp	r2, r3
 8108746:	bfa8      	it	ge
 8108748:	461a      	movge	r2, r3
 810874a:	2a00      	cmp	r2, #0
 810874c:	4691      	mov	r9, r2
 810874e:	dc37      	bgt.n	81087c0 <_printf_float+0x374>
 8108750:	f04f 0b00 	mov.w	fp, #0
 8108754:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8108758:	f104 021a 	add.w	r2, r4, #26
 810875c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810875e:	9305      	str	r3, [sp, #20]
 8108760:	eba3 0309 	sub.w	r3, r3, r9
 8108764:	455b      	cmp	r3, fp
 8108766:	dc33      	bgt.n	81087d0 <_printf_float+0x384>
 8108768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810876c:	429a      	cmp	r2, r3
 810876e:	db3b      	blt.n	81087e8 <_printf_float+0x39c>
 8108770:	6823      	ldr	r3, [r4, #0]
 8108772:	07da      	lsls	r2, r3, #31
 8108774:	d438      	bmi.n	81087e8 <_printf_float+0x39c>
 8108776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108778:	9a05      	ldr	r2, [sp, #20]
 810877a:	9909      	ldr	r1, [sp, #36]	; 0x24
 810877c:	1a9a      	subs	r2, r3, r2
 810877e:	eba3 0901 	sub.w	r9, r3, r1
 8108782:	4591      	cmp	r9, r2
 8108784:	bfa8      	it	ge
 8108786:	4691      	movge	r9, r2
 8108788:	f1b9 0f00 	cmp.w	r9, #0
 810878c:	dc35      	bgt.n	81087fa <_printf_float+0x3ae>
 810878e:	f04f 0800 	mov.w	r8, #0
 8108792:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8108796:	f104 0a1a 	add.w	sl, r4, #26
 810879a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810879e:	1a9b      	subs	r3, r3, r2
 81087a0:	eba3 0309 	sub.w	r3, r3, r9
 81087a4:	4543      	cmp	r3, r8
 81087a6:	f77f af79 	ble.w	810869c <_printf_float+0x250>
 81087aa:	2301      	movs	r3, #1
 81087ac:	4652      	mov	r2, sl
 81087ae:	4631      	mov	r1, r6
 81087b0:	4628      	mov	r0, r5
 81087b2:	47b8      	blx	r7
 81087b4:	3001      	adds	r0, #1
 81087b6:	f43f aeaa 	beq.w	810850e <_printf_float+0xc2>
 81087ba:	f108 0801 	add.w	r8, r8, #1
 81087be:	e7ec      	b.n	810879a <_printf_float+0x34e>
 81087c0:	4613      	mov	r3, r2
 81087c2:	4631      	mov	r1, r6
 81087c4:	4642      	mov	r2, r8
 81087c6:	4628      	mov	r0, r5
 81087c8:	47b8      	blx	r7
 81087ca:	3001      	adds	r0, #1
 81087cc:	d1c0      	bne.n	8108750 <_printf_float+0x304>
 81087ce:	e69e      	b.n	810850e <_printf_float+0xc2>
 81087d0:	2301      	movs	r3, #1
 81087d2:	4631      	mov	r1, r6
 81087d4:	4628      	mov	r0, r5
 81087d6:	9205      	str	r2, [sp, #20]
 81087d8:	47b8      	blx	r7
 81087da:	3001      	adds	r0, #1
 81087dc:	f43f ae97 	beq.w	810850e <_printf_float+0xc2>
 81087e0:	9a05      	ldr	r2, [sp, #20]
 81087e2:	f10b 0b01 	add.w	fp, fp, #1
 81087e6:	e7b9      	b.n	810875c <_printf_float+0x310>
 81087e8:	ee18 3a10 	vmov	r3, s16
 81087ec:	4652      	mov	r2, sl
 81087ee:	4631      	mov	r1, r6
 81087f0:	4628      	mov	r0, r5
 81087f2:	47b8      	blx	r7
 81087f4:	3001      	adds	r0, #1
 81087f6:	d1be      	bne.n	8108776 <_printf_float+0x32a>
 81087f8:	e689      	b.n	810850e <_printf_float+0xc2>
 81087fa:	9a05      	ldr	r2, [sp, #20]
 81087fc:	464b      	mov	r3, r9
 81087fe:	4442      	add	r2, r8
 8108800:	4631      	mov	r1, r6
 8108802:	4628      	mov	r0, r5
 8108804:	47b8      	blx	r7
 8108806:	3001      	adds	r0, #1
 8108808:	d1c1      	bne.n	810878e <_printf_float+0x342>
 810880a:	e680      	b.n	810850e <_printf_float+0xc2>
 810880c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810880e:	2a01      	cmp	r2, #1
 8108810:	dc01      	bgt.n	8108816 <_printf_float+0x3ca>
 8108812:	07db      	lsls	r3, r3, #31
 8108814:	d538      	bpl.n	8108888 <_printf_float+0x43c>
 8108816:	2301      	movs	r3, #1
 8108818:	4642      	mov	r2, r8
 810881a:	4631      	mov	r1, r6
 810881c:	4628      	mov	r0, r5
 810881e:	47b8      	blx	r7
 8108820:	3001      	adds	r0, #1
 8108822:	f43f ae74 	beq.w	810850e <_printf_float+0xc2>
 8108826:	ee18 3a10 	vmov	r3, s16
 810882a:	4652      	mov	r2, sl
 810882c:	4631      	mov	r1, r6
 810882e:	4628      	mov	r0, r5
 8108830:	47b8      	blx	r7
 8108832:	3001      	adds	r0, #1
 8108834:	f43f ae6b 	beq.w	810850e <_printf_float+0xc2>
 8108838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810883c:	2200      	movs	r2, #0
 810883e:	2300      	movs	r3, #0
 8108840:	f7f8 f9ca 	bl	8100bd8 <__aeabi_dcmpeq>
 8108844:	b9d8      	cbnz	r0, 810887e <_printf_float+0x432>
 8108846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108848:	f108 0201 	add.w	r2, r8, #1
 810884c:	3b01      	subs	r3, #1
 810884e:	4631      	mov	r1, r6
 8108850:	4628      	mov	r0, r5
 8108852:	47b8      	blx	r7
 8108854:	3001      	adds	r0, #1
 8108856:	d10e      	bne.n	8108876 <_printf_float+0x42a>
 8108858:	e659      	b.n	810850e <_printf_float+0xc2>
 810885a:	2301      	movs	r3, #1
 810885c:	4652      	mov	r2, sl
 810885e:	4631      	mov	r1, r6
 8108860:	4628      	mov	r0, r5
 8108862:	47b8      	blx	r7
 8108864:	3001      	adds	r0, #1
 8108866:	f43f ae52 	beq.w	810850e <_printf_float+0xc2>
 810886a:	f108 0801 	add.w	r8, r8, #1
 810886e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108870:	3b01      	subs	r3, #1
 8108872:	4543      	cmp	r3, r8
 8108874:	dcf1      	bgt.n	810885a <_printf_float+0x40e>
 8108876:	464b      	mov	r3, r9
 8108878:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810887c:	e6dc      	b.n	8108638 <_printf_float+0x1ec>
 810887e:	f04f 0800 	mov.w	r8, #0
 8108882:	f104 0a1a 	add.w	sl, r4, #26
 8108886:	e7f2      	b.n	810886e <_printf_float+0x422>
 8108888:	2301      	movs	r3, #1
 810888a:	4642      	mov	r2, r8
 810888c:	e7df      	b.n	810884e <_printf_float+0x402>
 810888e:	2301      	movs	r3, #1
 8108890:	464a      	mov	r2, r9
 8108892:	4631      	mov	r1, r6
 8108894:	4628      	mov	r0, r5
 8108896:	47b8      	blx	r7
 8108898:	3001      	adds	r0, #1
 810889a:	f43f ae38 	beq.w	810850e <_printf_float+0xc2>
 810889e:	f108 0801 	add.w	r8, r8, #1
 81088a2:	68e3      	ldr	r3, [r4, #12]
 81088a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 81088a6:	1a5b      	subs	r3, r3, r1
 81088a8:	4543      	cmp	r3, r8
 81088aa:	dcf0      	bgt.n	810888e <_printf_float+0x442>
 81088ac:	e6fa      	b.n	81086a4 <_printf_float+0x258>
 81088ae:	f04f 0800 	mov.w	r8, #0
 81088b2:	f104 0919 	add.w	r9, r4, #25
 81088b6:	e7f4      	b.n	81088a2 <_printf_float+0x456>

081088b8 <_printf_common>:
 81088b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81088bc:	4616      	mov	r6, r2
 81088be:	4699      	mov	r9, r3
 81088c0:	688a      	ldr	r2, [r1, #8]
 81088c2:	690b      	ldr	r3, [r1, #16]
 81088c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81088c8:	4293      	cmp	r3, r2
 81088ca:	bfb8      	it	lt
 81088cc:	4613      	movlt	r3, r2
 81088ce:	6033      	str	r3, [r6, #0]
 81088d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81088d4:	4607      	mov	r7, r0
 81088d6:	460c      	mov	r4, r1
 81088d8:	b10a      	cbz	r2, 81088de <_printf_common+0x26>
 81088da:	3301      	adds	r3, #1
 81088dc:	6033      	str	r3, [r6, #0]
 81088de:	6823      	ldr	r3, [r4, #0]
 81088e0:	0699      	lsls	r1, r3, #26
 81088e2:	bf42      	ittt	mi
 81088e4:	6833      	ldrmi	r3, [r6, #0]
 81088e6:	3302      	addmi	r3, #2
 81088e8:	6033      	strmi	r3, [r6, #0]
 81088ea:	6825      	ldr	r5, [r4, #0]
 81088ec:	f015 0506 	ands.w	r5, r5, #6
 81088f0:	d106      	bne.n	8108900 <_printf_common+0x48>
 81088f2:	f104 0a19 	add.w	sl, r4, #25
 81088f6:	68e3      	ldr	r3, [r4, #12]
 81088f8:	6832      	ldr	r2, [r6, #0]
 81088fa:	1a9b      	subs	r3, r3, r2
 81088fc:	42ab      	cmp	r3, r5
 81088fe:	dc26      	bgt.n	810894e <_printf_common+0x96>
 8108900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8108904:	1e13      	subs	r3, r2, #0
 8108906:	6822      	ldr	r2, [r4, #0]
 8108908:	bf18      	it	ne
 810890a:	2301      	movne	r3, #1
 810890c:	0692      	lsls	r2, r2, #26
 810890e:	d42b      	bmi.n	8108968 <_printf_common+0xb0>
 8108910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8108914:	4649      	mov	r1, r9
 8108916:	4638      	mov	r0, r7
 8108918:	47c0      	blx	r8
 810891a:	3001      	adds	r0, #1
 810891c:	d01e      	beq.n	810895c <_printf_common+0xa4>
 810891e:	6823      	ldr	r3, [r4, #0]
 8108920:	68e5      	ldr	r5, [r4, #12]
 8108922:	6832      	ldr	r2, [r6, #0]
 8108924:	f003 0306 	and.w	r3, r3, #6
 8108928:	2b04      	cmp	r3, #4
 810892a:	bf08      	it	eq
 810892c:	1aad      	subeq	r5, r5, r2
 810892e:	68a3      	ldr	r3, [r4, #8]
 8108930:	6922      	ldr	r2, [r4, #16]
 8108932:	bf0c      	ite	eq
 8108934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8108938:	2500      	movne	r5, #0
 810893a:	4293      	cmp	r3, r2
 810893c:	bfc4      	itt	gt
 810893e:	1a9b      	subgt	r3, r3, r2
 8108940:	18ed      	addgt	r5, r5, r3
 8108942:	2600      	movs	r6, #0
 8108944:	341a      	adds	r4, #26
 8108946:	42b5      	cmp	r5, r6
 8108948:	d11a      	bne.n	8108980 <_printf_common+0xc8>
 810894a:	2000      	movs	r0, #0
 810894c:	e008      	b.n	8108960 <_printf_common+0xa8>
 810894e:	2301      	movs	r3, #1
 8108950:	4652      	mov	r2, sl
 8108952:	4649      	mov	r1, r9
 8108954:	4638      	mov	r0, r7
 8108956:	47c0      	blx	r8
 8108958:	3001      	adds	r0, #1
 810895a:	d103      	bne.n	8108964 <_printf_common+0xac>
 810895c:	f04f 30ff 	mov.w	r0, #4294967295
 8108960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108964:	3501      	adds	r5, #1
 8108966:	e7c6      	b.n	81088f6 <_printf_common+0x3e>
 8108968:	18e1      	adds	r1, r4, r3
 810896a:	1c5a      	adds	r2, r3, #1
 810896c:	2030      	movs	r0, #48	; 0x30
 810896e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8108972:	4422      	add	r2, r4
 8108974:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8108978:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810897c:	3302      	adds	r3, #2
 810897e:	e7c7      	b.n	8108910 <_printf_common+0x58>
 8108980:	2301      	movs	r3, #1
 8108982:	4622      	mov	r2, r4
 8108984:	4649      	mov	r1, r9
 8108986:	4638      	mov	r0, r7
 8108988:	47c0      	blx	r8
 810898a:	3001      	adds	r0, #1
 810898c:	d0e6      	beq.n	810895c <_printf_common+0xa4>
 810898e:	3601      	adds	r6, #1
 8108990:	e7d9      	b.n	8108946 <_printf_common+0x8e>
	...

08108994 <_printf_i>:
 8108994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108998:	7e0f      	ldrb	r7, [r1, #24]
 810899a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810899c:	2f78      	cmp	r7, #120	; 0x78
 810899e:	4691      	mov	r9, r2
 81089a0:	4680      	mov	r8, r0
 81089a2:	460c      	mov	r4, r1
 81089a4:	469a      	mov	sl, r3
 81089a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 81089aa:	d807      	bhi.n	81089bc <_printf_i+0x28>
 81089ac:	2f62      	cmp	r7, #98	; 0x62
 81089ae:	d80a      	bhi.n	81089c6 <_printf_i+0x32>
 81089b0:	2f00      	cmp	r7, #0
 81089b2:	f000 80d8 	beq.w	8108b66 <_printf_i+0x1d2>
 81089b6:	2f58      	cmp	r7, #88	; 0x58
 81089b8:	f000 80a3 	beq.w	8108b02 <_printf_i+0x16e>
 81089bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81089c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81089c4:	e03a      	b.n	8108a3c <_printf_i+0xa8>
 81089c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81089ca:	2b15      	cmp	r3, #21
 81089cc:	d8f6      	bhi.n	81089bc <_printf_i+0x28>
 81089ce:	a101      	add	r1, pc, #4	; (adr r1, 81089d4 <_printf_i+0x40>)
 81089d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81089d4:	08108a2d 	.word	0x08108a2d
 81089d8:	08108a41 	.word	0x08108a41
 81089dc:	081089bd 	.word	0x081089bd
 81089e0:	081089bd 	.word	0x081089bd
 81089e4:	081089bd 	.word	0x081089bd
 81089e8:	081089bd 	.word	0x081089bd
 81089ec:	08108a41 	.word	0x08108a41
 81089f0:	081089bd 	.word	0x081089bd
 81089f4:	081089bd 	.word	0x081089bd
 81089f8:	081089bd 	.word	0x081089bd
 81089fc:	081089bd 	.word	0x081089bd
 8108a00:	08108b4d 	.word	0x08108b4d
 8108a04:	08108a71 	.word	0x08108a71
 8108a08:	08108b2f 	.word	0x08108b2f
 8108a0c:	081089bd 	.word	0x081089bd
 8108a10:	081089bd 	.word	0x081089bd
 8108a14:	08108b6f 	.word	0x08108b6f
 8108a18:	081089bd 	.word	0x081089bd
 8108a1c:	08108a71 	.word	0x08108a71
 8108a20:	081089bd 	.word	0x081089bd
 8108a24:	081089bd 	.word	0x081089bd
 8108a28:	08108b37 	.word	0x08108b37
 8108a2c:	682b      	ldr	r3, [r5, #0]
 8108a2e:	1d1a      	adds	r2, r3, #4
 8108a30:	681b      	ldr	r3, [r3, #0]
 8108a32:	602a      	str	r2, [r5, #0]
 8108a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8108a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8108a3c:	2301      	movs	r3, #1
 8108a3e:	e0a3      	b.n	8108b88 <_printf_i+0x1f4>
 8108a40:	6820      	ldr	r0, [r4, #0]
 8108a42:	6829      	ldr	r1, [r5, #0]
 8108a44:	0606      	lsls	r6, r0, #24
 8108a46:	f101 0304 	add.w	r3, r1, #4
 8108a4a:	d50a      	bpl.n	8108a62 <_printf_i+0xce>
 8108a4c:	680e      	ldr	r6, [r1, #0]
 8108a4e:	602b      	str	r3, [r5, #0]
 8108a50:	2e00      	cmp	r6, #0
 8108a52:	da03      	bge.n	8108a5c <_printf_i+0xc8>
 8108a54:	232d      	movs	r3, #45	; 0x2d
 8108a56:	4276      	negs	r6, r6
 8108a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108a5c:	485e      	ldr	r0, [pc, #376]	; (8108bd8 <_printf_i+0x244>)
 8108a5e:	230a      	movs	r3, #10
 8108a60:	e019      	b.n	8108a96 <_printf_i+0x102>
 8108a62:	680e      	ldr	r6, [r1, #0]
 8108a64:	602b      	str	r3, [r5, #0]
 8108a66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8108a6a:	bf18      	it	ne
 8108a6c:	b236      	sxthne	r6, r6
 8108a6e:	e7ef      	b.n	8108a50 <_printf_i+0xbc>
 8108a70:	682b      	ldr	r3, [r5, #0]
 8108a72:	6820      	ldr	r0, [r4, #0]
 8108a74:	1d19      	adds	r1, r3, #4
 8108a76:	6029      	str	r1, [r5, #0]
 8108a78:	0601      	lsls	r1, r0, #24
 8108a7a:	d501      	bpl.n	8108a80 <_printf_i+0xec>
 8108a7c:	681e      	ldr	r6, [r3, #0]
 8108a7e:	e002      	b.n	8108a86 <_printf_i+0xf2>
 8108a80:	0646      	lsls	r6, r0, #25
 8108a82:	d5fb      	bpl.n	8108a7c <_printf_i+0xe8>
 8108a84:	881e      	ldrh	r6, [r3, #0]
 8108a86:	4854      	ldr	r0, [pc, #336]	; (8108bd8 <_printf_i+0x244>)
 8108a88:	2f6f      	cmp	r7, #111	; 0x6f
 8108a8a:	bf0c      	ite	eq
 8108a8c:	2308      	moveq	r3, #8
 8108a8e:	230a      	movne	r3, #10
 8108a90:	2100      	movs	r1, #0
 8108a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8108a96:	6865      	ldr	r5, [r4, #4]
 8108a98:	60a5      	str	r5, [r4, #8]
 8108a9a:	2d00      	cmp	r5, #0
 8108a9c:	bfa2      	ittt	ge
 8108a9e:	6821      	ldrge	r1, [r4, #0]
 8108aa0:	f021 0104 	bicge.w	r1, r1, #4
 8108aa4:	6021      	strge	r1, [r4, #0]
 8108aa6:	b90e      	cbnz	r6, 8108aac <_printf_i+0x118>
 8108aa8:	2d00      	cmp	r5, #0
 8108aaa:	d04d      	beq.n	8108b48 <_printf_i+0x1b4>
 8108aac:	4615      	mov	r5, r2
 8108aae:	fbb6 f1f3 	udiv	r1, r6, r3
 8108ab2:	fb03 6711 	mls	r7, r3, r1, r6
 8108ab6:	5dc7      	ldrb	r7, [r0, r7]
 8108ab8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8108abc:	4637      	mov	r7, r6
 8108abe:	42bb      	cmp	r3, r7
 8108ac0:	460e      	mov	r6, r1
 8108ac2:	d9f4      	bls.n	8108aae <_printf_i+0x11a>
 8108ac4:	2b08      	cmp	r3, #8
 8108ac6:	d10b      	bne.n	8108ae0 <_printf_i+0x14c>
 8108ac8:	6823      	ldr	r3, [r4, #0]
 8108aca:	07de      	lsls	r6, r3, #31
 8108acc:	d508      	bpl.n	8108ae0 <_printf_i+0x14c>
 8108ace:	6923      	ldr	r3, [r4, #16]
 8108ad0:	6861      	ldr	r1, [r4, #4]
 8108ad2:	4299      	cmp	r1, r3
 8108ad4:	bfde      	ittt	le
 8108ad6:	2330      	movle	r3, #48	; 0x30
 8108ad8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8108adc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8108ae0:	1b52      	subs	r2, r2, r5
 8108ae2:	6122      	str	r2, [r4, #16]
 8108ae4:	f8cd a000 	str.w	sl, [sp]
 8108ae8:	464b      	mov	r3, r9
 8108aea:	aa03      	add	r2, sp, #12
 8108aec:	4621      	mov	r1, r4
 8108aee:	4640      	mov	r0, r8
 8108af0:	f7ff fee2 	bl	81088b8 <_printf_common>
 8108af4:	3001      	adds	r0, #1
 8108af6:	d14c      	bne.n	8108b92 <_printf_i+0x1fe>
 8108af8:	f04f 30ff 	mov.w	r0, #4294967295
 8108afc:	b004      	add	sp, #16
 8108afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108b02:	4835      	ldr	r0, [pc, #212]	; (8108bd8 <_printf_i+0x244>)
 8108b04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8108b08:	6829      	ldr	r1, [r5, #0]
 8108b0a:	6823      	ldr	r3, [r4, #0]
 8108b0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8108b10:	6029      	str	r1, [r5, #0]
 8108b12:	061d      	lsls	r5, r3, #24
 8108b14:	d514      	bpl.n	8108b40 <_printf_i+0x1ac>
 8108b16:	07df      	lsls	r7, r3, #31
 8108b18:	bf44      	itt	mi
 8108b1a:	f043 0320 	orrmi.w	r3, r3, #32
 8108b1e:	6023      	strmi	r3, [r4, #0]
 8108b20:	b91e      	cbnz	r6, 8108b2a <_printf_i+0x196>
 8108b22:	6823      	ldr	r3, [r4, #0]
 8108b24:	f023 0320 	bic.w	r3, r3, #32
 8108b28:	6023      	str	r3, [r4, #0]
 8108b2a:	2310      	movs	r3, #16
 8108b2c:	e7b0      	b.n	8108a90 <_printf_i+0xfc>
 8108b2e:	6823      	ldr	r3, [r4, #0]
 8108b30:	f043 0320 	orr.w	r3, r3, #32
 8108b34:	6023      	str	r3, [r4, #0]
 8108b36:	2378      	movs	r3, #120	; 0x78
 8108b38:	4828      	ldr	r0, [pc, #160]	; (8108bdc <_printf_i+0x248>)
 8108b3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8108b3e:	e7e3      	b.n	8108b08 <_printf_i+0x174>
 8108b40:	0659      	lsls	r1, r3, #25
 8108b42:	bf48      	it	mi
 8108b44:	b2b6      	uxthmi	r6, r6
 8108b46:	e7e6      	b.n	8108b16 <_printf_i+0x182>
 8108b48:	4615      	mov	r5, r2
 8108b4a:	e7bb      	b.n	8108ac4 <_printf_i+0x130>
 8108b4c:	682b      	ldr	r3, [r5, #0]
 8108b4e:	6826      	ldr	r6, [r4, #0]
 8108b50:	6961      	ldr	r1, [r4, #20]
 8108b52:	1d18      	adds	r0, r3, #4
 8108b54:	6028      	str	r0, [r5, #0]
 8108b56:	0635      	lsls	r5, r6, #24
 8108b58:	681b      	ldr	r3, [r3, #0]
 8108b5a:	d501      	bpl.n	8108b60 <_printf_i+0x1cc>
 8108b5c:	6019      	str	r1, [r3, #0]
 8108b5e:	e002      	b.n	8108b66 <_printf_i+0x1d2>
 8108b60:	0670      	lsls	r0, r6, #25
 8108b62:	d5fb      	bpl.n	8108b5c <_printf_i+0x1c8>
 8108b64:	8019      	strh	r1, [r3, #0]
 8108b66:	2300      	movs	r3, #0
 8108b68:	6123      	str	r3, [r4, #16]
 8108b6a:	4615      	mov	r5, r2
 8108b6c:	e7ba      	b.n	8108ae4 <_printf_i+0x150>
 8108b6e:	682b      	ldr	r3, [r5, #0]
 8108b70:	1d1a      	adds	r2, r3, #4
 8108b72:	602a      	str	r2, [r5, #0]
 8108b74:	681d      	ldr	r5, [r3, #0]
 8108b76:	6862      	ldr	r2, [r4, #4]
 8108b78:	2100      	movs	r1, #0
 8108b7a:	4628      	mov	r0, r5
 8108b7c:	f7f7 fbb8 	bl	81002f0 <memchr>
 8108b80:	b108      	cbz	r0, 8108b86 <_printf_i+0x1f2>
 8108b82:	1b40      	subs	r0, r0, r5
 8108b84:	6060      	str	r0, [r4, #4]
 8108b86:	6863      	ldr	r3, [r4, #4]
 8108b88:	6123      	str	r3, [r4, #16]
 8108b8a:	2300      	movs	r3, #0
 8108b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108b90:	e7a8      	b.n	8108ae4 <_printf_i+0x150>
 8108b92:	6923      	ldr	r3, [r4, #16]
 8108b94:	462a      	mov	r2, r5
 8108b96:	4649      	mov	r1, r9
 8108b98:	4640      	mov	r0, r8
 8108b9a:	47d0      	blx	sl
 8108b9c:	3001      	adds	r0, #1
 8108b9e:	d0ab      	beq.n	8108af8 <_printf_i+0x164>
 8108ba0:	6823      	ldr	r3, [r4, #0]
 8108ba2:	079b      	lsls	r3, r3, #30
 8108ba4:	d413      	bmi.n	8108bce <_printf_i+0x23a>
 8108ba6:	68e0      	ldr	r0, [r4, #12]
 8108ba8:	9b03      	ldr	r3, [sp, #12]
 8108baa:	4298      	cmp	r0, r3
 8108bac:	bfb8      	it	lt
 8108bae:	4618      	movlt	r0, r3
 8108bb0:	e7a4      	b.n	8108afc <_printf_i+0x168>
 8108bb2:	2301      	movs	r3, #1
 8108bb4:	4632      	mov	r2, r6
 8108bb6:	4649      	mov	r1, r9
 8108bb8:	4640      	mov	r0, r8
 8108bba:	47d0      	blx	sl
 8108bbc:	3001      	adds	r0, #1
 8108bbe:	d09b      	beq.n	8108af8 <_printf_i+0x164>
 8108bc0:	3501      	adds	r5, #1
 8108bc2:	68e3      	ldr	r3, [r4, #12]
 8108bc4:	9903      	ldr	r1, [sp, #12]
 8108bc6:	1a5b      	subs	r3, r3, r1
 8108bc8:	42ab      	cmp	r3, r5
 8108bca:	dcf2      	bgt.n	8108bb2 <_printf_i+0x21e>
 8108bcc:	e7eb      	b.n	8108ba6 <_printf_i+0x212>
 8108bce:	2500      	movs	r5, #0
 8108bd0:	f104 0619 	add.w	r6, r4, #25
 8108bd4:	e7f5      	b.n	8108bc2 <_printf_i+0x22e>
 8108bd6:	bf00      	nop
 8108bd8:	0810cf96 	.word	0x0810cf96
 8108bdc:	0810cfa7 	.word	0x0810cfa7

08108be0 <_scanf_float>:
 8108be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108be4:	b087      	sub	sp, #28
 8108be6:	4617      	mov	r7, r2
 8108be8:	9303      	str	r3, [sp, #12]
 8108bea:	688b      	ldr	r3, [r1, #8]
 8108bec:	1e5a      	subs	r2, r3, #1
 8108bee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8108bf2:	bf83      	ittte	hi
 8108bf4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8108bf8:	195b      	addhi	r3, r3, r5
 8108bfa:	9302      	strhi	r3, [sp, #8]
 8108bfc:	2300      	movls	r3, #0
 8108bfe:	bf86      	itte	hi
 8108c00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8108c04:	608b      	strhi	r3, [r1, #8]
 8108c06:	9302      	strls	r3, [sp, #8]
 8108c08:	680b      	ldr	r3, [r1, #0]
 8108c0a:	468b      	mov	fp, r1
 8108c0c:	2500      	movs	r5, #0
 8108c0e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8108c12:	f84b 3b1c 	str.w	r3, [fp], #28
 8108c16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8108c1a:	4680      	mov	r8, r0
 8108c1c:	460c      	mov	r4, r1
 8108c1e:	465e      	mov	r6, fp
 8108c20:	46aa      	mov	sl, r5
 8108c22:	46a9      	mov	r9, r5
 8108c24:	9501      	str	r5, [sp, #4]
 8108c26:	68a2      	ldr	r2, [r4, #8]
 8108c28:	b152      	cbz	r2, 8108c40 <_scanf_float+0x60>
 8108c2a:	683b      	ldr	r3, [r7, #0]
 8108c2c:	781b      	ldrb	r3, [r3, #0]
 8108c2e:	2b4e      	cmp	r3, #78	; 0x4e
 8108c30:	d864      	bhi.n	8108cfc <_scanf_float+0x11c>
 8108c32:	2b40      	cmp	r3, #64	; 0x40
 8108c34:	d83c      	bhi.n	8108cb0 <_scanf_float+0xd0>
 8108c36:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8108c3a:	b2c8      	uxtb	r0, r1
 8108c3c:	280e      	cmp	r0, #14
 8108c3e:	d93a      	bls.n	8108cb6 <_scanf_float+0xd6>
 8108c40:	f1b9 0f00 	cmp.w	r9, #0
 8108c44:	d003      	beq.n	8108c4e <_scanf_float+0x6e>
 8108c46:	6823      	ldr	r3, [r4, #0]
 8108c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108c4c:	6023      	str	r3, [r4, #0]
 8108c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8108c52:	f1ba 0f01 	cmp.w	sl, #1
 8108c56:	f200 8113 	bhi.w	8108e80 <_scanf_float+0x2a0>
 8108c5a:	455e      	cmp	r6, fp
 8108c5c:	f200 8105 	bhi.w	8108e6a <_scanf_float+0x28a>
 8108c60:	2501      	movs	r5, #1
 8108c62:	4628      	mov	r0, r5
 8108c64:	b007      	add	sp, #28
 8108c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108c6a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8108c6e:	2a0d      	cmp	r2, #13
 8108c70:	d8e6      	bhi.n	8108c40 <_scanf_float+0x60>
 8108c72:	a101      	add	r1, pc, #4	; (adr r1, 8108c78 <_scanf_float+0x98>)
 8108c74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8108c78:	08108db7 	.word	0x08108db7
 8108c7c:	08108c41 	.word	0x08108c41
 8108c80:	08108c41 	.word	0x08108c41
 8108c84:	08108c41 	.word	0x08108c41
 8108c88:	08108e17 	.word	0x08108e17
 8108c8c:	08108def 	.word	0x08108def
 8108c90:	08108c41 	.word	0x08108c41
 8108c94:	08108c41 	.word	0x08108c41
 8108c98:	08108dc5 	.word	0x08108dc5
 8108c9c:	08108c41 	.word	0x08108c41
 8108ca0:	08108c41 	.word	0x08108c41
 8108ca4:	08108c41 	.word	0x08108c41
 8108ca8:	08108c41 	.word	0x08108c41
 8108cac:	08108d7d 	.word	0x08108d7d
 8108cb0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8108cb4:	e7db      	b.n	8108c6e <_scanf_float+0x8e>
 8108cb6:	290e      	cmp	r1, #14
 8108cb8:	d8c2      	bhi.n	8108c40 <_scanf_float+0x60>
 8108cba:	a001      	add	r0, pc, #4	; (adr r0, 8108cc0 <_scanf_float+0xe0>)
 8108cbc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8108cc0:	08108d6f 	.word	0x08108d6f
 8108cc4:	08108c41 	.word	0x08108c41
 8108cc8:	08108d6f 	.word	0x08108d6f
 8108ccc:	08108e03 	.word	0x08108e03
 8108cd0:	08108c41 	.word	0x08108c41
 8108cd4:	08108d1d 	.word	0x08108d1d
 8108cd8:	08108d59 	.word	0x08108d59
 8108cdc:	08108d59 	.word	0x08108d59
 8108ce0:	08108d59 	.word	0x08108d59
 8108ce4:	08108d59 	.word	0x08108d59
 8108ce8:	08108d59 	.word	0x08108d59
 8108cec:	08108d59 	.word	0x08108d59
 8108cf0:	08108d59 	.word	0x08108d59
 8108cf4:	08108d59 	.word	0x08108d59
 8108cf8:	08108d59 	.word	0x08108d59
 8108cfc:	2b6e      	cmp	r3, #110	; 0x6e
 8108cfe:	d809      	bhi.n	8108d14 <_scanf_float+0x134>
 8108d00:	2b60      	cmp	r3, #96	; 0x60
 8108d02:	d8b2      	bhi.n	8108c6a <_scanf_float+0x8a>
 8108d04:	2b54      	cmp	r3, #84	; 0x54
 8108d06:	d077      	beq.n	8108df8 <_scanf_float+0x218>
 8108d08:	2b59      	cmp	r3, #89	; 0x59
 8108d0a:	d199      	bne.n	8108c40 <_scanf_float+0x60>
 8108d0c:	2d07      	cmp	r5, #7
 8108d0e:	d197      	bne.n	8108c40 <_scanf_float+0x60>
 8108d10:	2508      	movs	r5, #8
 8108d12:	e029      	b.n	8108d68 <_scanf_float+0x188>
 8108d14:	2b74      	cmp	r3, #116	; 0x74
 8108d16:	d06f      	beq.n	8108df8 <_scanf_float+0x218>
 8108d18:	2b79      	cmp	r3, #121	; 0x79
 8108d1a:	e7f6      	b.n	8108d0a <_scanf_float+0x12a>
 8108d1c:	6821      	ldr	r1, [r4, #0]
 8108d1e:	05c8      	lsls	r0, r1, #23
 8108d20:	d51a      	bpl.n	8108d58 <_scanf_float+0x178>
 8108d22:	9b02      	ldr	r3, [sp, #8]
 8108d24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8108d28:	6021      	str	r1, [r4, #0]
 8108d2a:	f109 0901 	add.w	r9, r9, #1
 8108d2e:	b11b      	cbz	r3, 8108d38 <_scanf_float+0x158>
 8108d30:	3b01      	subs	r3, #1
 8108d32:	3201      	adds	r2, #1
 8108d34:	9302      	str	r3, [sp, #8]
 8108d36:	60a2      	str	r2, [r4, #8]
 8108d38:	68a3      	ldr	r3, [r4, #8]
 8108d3a:	3b01      	subs	r3, #1
 8108d3c:	60a3      	str	r3, [r4, #8]
 8108d3e:	6923      	ldr	r3, [r4, #16]
 8108d40:	3301      	adds	r3, #1
 8108d42:	6123      	str	r3, [r4, #16]
 8108d44:	687b      	ldr	r3, [r7, #4]
 8108d46:	3b01      	subs	r3, #1
 8108d48:	2b00      	cmp	r3, #0
 8108d4a:	607b      	str	r3, [r7, #4]
 8108d4c:	f340 8084 	ble.w	8108e58 <_scanf_float+0x278>
 8108d50:	683b      	ldr	r3, [r7, #0]
 8108d52:	3301      	adds	r3, #1
 8108d54:	603b      	str	r3, [r7, #0]
 8108d56:	e766      	b.n	8108c26 <_scanf_float+0x46>
 8108d58:	eb1a 0f05 	cmn.w	sl, r5
 8108d5c:	f47f af70 	bne.w	8108c40 <_scanf_float+0x60>
 8108d60:	6822      	ldr	r2, [r4, #0]
 8108d62:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8108d66:	6022      	str	r2, [r4, #0]
 8108d68:	f806 3b01 	strb.w	r3, [r6], #1
 8108d6c:	e7e4      	b.n	8108d38 <_scanf_float+0x158>
 8108d6e:	6822      	ldr	r2, [r4, #0]
 8108d70:	0610      	lsls	r0, r2, #24
 8108d72:	f57f af65 	bpl.w	8108c40 <_scanf_float+0x60>
 8108d76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8108d7a:	e7f4      	b.n	8108d66 <_scanf_float+0x186>
 8108d7c:	f1ba 0f00 	cmp.w	sl, #0
 8108d80:	d10e      	bne.n	8108da0 <_scanf_float+0x1c0>
 8108d82:	f1b9 0f00 	cmp.w	r9, #0
 8108d86:	d10e      	bne.n	8108da6 <_scanf_float+0x1c6>
 8108d88:	6822      	ldr	r2, [r4, #0]
 8108d8a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108d8e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8108d92:	d108      	bne.n	8108da6 <_scanf_float+0x1c6>
 8108d94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108d98:	6022      	str	r2, [r4, #0]
 8108d9a:	f04f 0a01 	mov.w	sl, #1
 8108d9e:	e7e3      	b.n	8108d68 <_scanf_float+0x188>
 8108da0:	f1ba 0f02 	cmp.w	sl, #2
 8108da4:	d055      	beq.n	8108e52 <_scanf_float+0x272>
 8108da6:	2d01      	cmp	r5, #1
 8108da8:	d002      	beq.n	8108db0 <_scanf_float+0x1d0>
 8108daa:	2d04      	cmp	r5, #4
 8108dac:	f47f af48 	bne.w	8108c40 <_scanf_float+0x60>
 8108db0:	3501      	adds	r5, #1
 8108db2:	b2ed      	uxtb	r5, r5
 8108db4:	e7d8      	b.n	8108d68 <_scanf_float+0x188>
 8108db6:	f1ba 0f01 	cmp.w	sl, #1
 8108dba:	f47f af41 	bne.w	8108c40 <_scanf_float+0x60>
 8108dbe:	f04f 0a02 	mov.w	sl, #2
 8108dc2:	e7d1      	b.n	8108d68 <_scanf_float+0x188>
 8108dc4:	b97d      	cbnz	r5, 8108de6 <_scanf_float+0x206>
 8108dc6:	f1b9 0f00 	cmp.w	r9, #0
 8108dca:	f47f af3c 	bne.w	8108c46 <_scanf_float+0x66>
 8108dce:	6822      	ldr	r2, [r4, #0]
 8108dd0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108dd4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8108dd8:	f47f af39 	bne.w	8108c4e <_scanf_float+0x6e>
 8108ddc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108de0:	6022      	str	r2, [r4, #0]
 8108de2:	2501      	movs	r5, #1
 8108de4:	e7c0      	b.n	8108d68 <_scanf_float+0x188>
 8108de6:	2d03      	cmp	r5, #3
 8108de8:	d0e2      	beq.n	8108db0 <_scanf_float+0x1d0>
 8108dea:	2d05      	cmp	r5, #5
 8108dec:	e7de      	b.n	8108dac <_scanf_float+0x1cc>
 8108dee:	2d02      	cmp	r5, #2
 8108df0:	f47f af26 	bne.w	8108c40 <_scanf_float+0x60>
 8108df4:	2503      	movs	r5, #3
 8108df6:	e7b7      	b.n	8108d68 <_scanf_float+0x188>
 8108df8:	2d06      	cmp	r5, #6
 8108dfa:	f47f af21 	bne.w	8108c40 <_scanf_float+0x60>
 8108dfe:	2507      	movs	r5, #7
 8108e00:	e7b2      	b.n	8108d68 <_scanf_float+0x188>
 8108e02:	6822      	ldr	r2, [r4, #0]
 8108e04:	0591      	lsls	r1, r2, #22
 8108e06:	f57f af1b 	bpl.w	8108c40 <_scanf_float+0x60>
 8108e0a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8108e0e:	6022      	str	r2, [r4, #0]
 8108e10:	f8cd 9004 	str.w	r9, [sp, #4]
 8108e14:	e7a8      	b.n	8108d68 <_scanf_float+0x188>
 8108e16:	6822      	ldr	r2, [r4, #0]
 8108e18:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8108e1c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8108e20:	d006      	beq.n	8108e30 <_scanf_float+0x250>
 8108e22:	0550      	lsls	r0, r2, #21
 8108e24:	f57f af0c 	bpl.w	8108c40 <_scanf_float+0x60>
 8108e28:	f1b9 0f00 	cmp.w	r9, #0
 8108e2c:	f43f af0f 	beq.w	8108c4e <_scanf_float+0x6e>
 8108e30:	0591      	lsls	r1, r2, #22
 8108e32:	bf58      	it	pl
 8108e34:	9901      	ldrpl	r1, [sp, #4]
 8108e36:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108e3a:	bf58      	it	pl
 8108e3c:	eba9 0101 	subpl.w	r1, r9, r1
 8108e40:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8108e44:	bf58      	it	pl
 8108e46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8108e4a:	6022      	str	r2, [r4, #0]
 8108e4c:	f04f 0900 	mov.w	r9, #0
 8108e50:	e78a      	b.n	8108d68 <_scanf_float+0x188>
 8108e52:	f04f 0a03 	mov.w	sl, #3
 8108e56:	e787      	b.n	8108d68 <_scanf_float+0x188>
 8108e58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8108e5c:	4639      	mov	r1, r7
 8108e5e:	4640      	mov	r0, r8
 8108e60:	4798      	blx	r3
 8108e62:	2800      	cmp	r0, #0
 8108e64:	f43f aedf 	beq.w	8108c26 <_scanf_float+0x46>
 8108e68:	e6ea      	b.n	8108c40 <_scanf_float+0x60>
 8108e6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108e6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8108e72:	463a      	mov	r2, r7
 8108e74:	4640      	mov	r0, r8
 8108e76:	4798      	blx	r3
 8108e78:	6923      	ldr	r3, [r4, #16]
 8108e7a:	3b01      	subs	r3, #1
 8108e7c:	6123      	str	r3, [r4, #16]
 8108e7e:	e6ec      	b.n	8108c5a <_scanf_float+0x7a>
 8108e80:	1e6b      	subs	r3, r5, #1
 8108e82:	2b06      	cmp	r3, #6
 8108e84:	d825      	bhi.n	8108ed2 <_scanf_float+0x2f2>
 8108e86:	2d02      	cmp	r5, #2
 8108e88:	d836      	bhi.n	8108ef8 <_scanf_float+0x318>
 8108e8a:	455e      	cmp	r6, fp
 8108e8c:	f67f aee8 	bls.w	8108c60 <_scanf_float+0x80>
 8108e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108e94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8108e98:	463a      	mov	r2, r7
 8108e9a:	4640      	mov	r0, r8
 8108e9c:	4798      	blx	r3
 8108e9e:	6923      	ldr	r3, [r4, #16]
 8108ea0:	3b01      	subs	r3, #1
 8108ea2:	6123      	str	r3, [r4, #16]
 8108ea4:	e7f1      	b.n	8108e8a <_scanf_float+0x2aa>
 8108ea6:	9802      	ldr	r0, [sp, #8]
 8108ea8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108eac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8108eb0:	9002      	str	r0, [sp, #8]
 8108eb2:	463a      	mov	r2, r7
 8108eb4:	4640      	mov	r0, r8
 8108eb6:	4798      	blx	r3
 8108eb8:	6923      	ldr	r3, [r4, #16]
 8108eba:	3b01      	subs	r3, #1
 8108ebc:	6123      	str	r3, [r4, #16]
 8108ebe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8108ec2:	fa5f fa8a 	uxtb.w	sl, sl
 8108ec6:	f1ba 0f02 	cmp.w	sl, #2
 8108eca:	d1ec      	bne.n	8108ea6 <_scanf_float+0x2c6>
 8108ecc:	3d03      	subs	r5, #3
 8108ece:	b2ed      	uxtb	r5, r5
 8108ed0:	1b76      	subs	r6, r6, r5
 8108ed2:	6823      	ldr	r3, [r4, #0]
 8108ed4:	05da      	lsls	r2, r3, #23
 8108ed6:	d52f      	bpl.n	8108f38 <_scanf_float+0x358>
 8108ed8:	055b      	lsls	r3, r3, #21
 8108eda:	d510      	bpl.n	8108efe <_scanf_float+0x31e>
 8108edc:	455e      	cmp	r6, fp
 8108ede:	f67f aebf 	bls.w	8108c60 <_scanf_float+0x80>
 8108ee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108ee6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8108eea:	463a      	mov	r2, r7
 8108eec:	4640      	mov	r0, r8
 8108eee:	4798      	blx	r3
 8108ef0:	6923      	ldr	r3, [r4, #16]
 8108ef2:	3b01      	subs	r3, #1
 8108ef4:	6123      	str	r3, [r4, #16]
 8108ef6:	e7f1      	b.n	8108edc <_scanf_float+0x2fc>
 8108ef8:	46aa      	mov	sl, r5
 8108efa:	9602      	str	r6, [sp, #8]
 8108efc:	e7df      	b.n	8108ebe <_scanf_float+0x2de>
 8108efe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8108f02:	6923      	ldr	r3, [r4, #16]
 8108f04:	2965      	cmp	r1, #101	; 0x65
 8108f06:	f103 33ff 	add.w	r3, r3, #4294967295
 8108f0a:	f106 35ff 	add.w	r5, r6, #4294967295
 8108f0e:	6123      	str	r3, [r4, #16]
 8108f10:	d00c      	beq.n	8108f2c <_scanf_float+0x34c>
 8108f12:	2945      	cmp	r1, #69	; 0x45
 8108f14:	d00a      	beq.n	8108f2c <_scanf_float+0x34c>
 8108f16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108f1a:	463a      	mov	r2, r7
 8108f1c:	4640      	mov	r0, r8
 8108f1e:	4798      	blx	r3
 8108f20:	6923      	ldr	r3, [r4, #16]
 8108f22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8108f26:	3b01      	subs	r3, #1
 8108f28:	1eb5      	subs	r5, r6, #2
 8108f2a:	6123      	str	r3, [r4, #16]
 8108f2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108f30:	463a      	mov	r2, r7
 8108f32:	4640      	mov	r0, r8
 8108f34:	4798      	blx	r3
 8108f36:	462e      	mov	r6, r5
 8108f38:	6825      	ldr	r5, [r4, #0]
 8108f3a:	f015 0510 	ands.w	r5, r5, #16
 8108f3e:	d159      	bne.n	8108ff4 <_scanf_float+0x414>
 8108f40:	7035      	strb	r5, [r6, #0]
 8108f42:	6823      	ldr	r3, [r4, #0]
 8108f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8108f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108f4c:	d11b      	bne.n	8108f86 <_scanf_float+0x3a6>
 8108f4e:	9b01      	ldr	r3, [sp, #4]
 8108f50:	454b      	cmp	r3, r9
 8108f52:	eba3 0209 	sub.w	r2, r3, r9
 8108f56:	d123      	bne.n	8108fa0 <_scanf_float+0x3c0>
 8108f58:	2200      	movs	r2, #0
 8108f5a:	4659      	mov	r1, fp
 8108f5c:	4640      	mov	r0, r8
 8108f5e:	f000 ff25 	bl	8109dac <_strtod_r>
 8108f62:	6822      	ldr	r2, [r4, #0]
 8108f64:	9b03      	ldr	r3, [sp, #12]
 8108f66:	f012 0f02 	tst.w	r2, #2
 8108f6a:	ec57 6b10 	vmov	r6, r7, d0
 8108f6e:	681b      	ldr	r3, [r3, #0]
 8108f70:	d021      	beq.n	8108fb6 <_scanf_float+0x3d6>
 8108f72:	9903      	ldr	r1, [sp, #12]
 8108f74:	1d1a      	adds	r2, r3, #4
 8108f76:	600a      	str	r2, [r1, #0]
 8108f78:	681b      	ldr	r3, [r3, #0]
 8108f7a:	e9c3 6700 	strd	r6, r7, [r3]
 8108f7e:	68e3      	ldr	r3, [r4, #12]
 8108f80:	3301      	adds	r3, #1
 8108f82:	60e3      	str	r3, [r4, #12]
 8108f84:	e66d      	b.n	8108c62 <_scanf_float+0x82>
 8108f86:	9b04      	ldr	r3, [sp, #16]
 8108f88:	2b00      	cmp	r3, #0
 8108f8a:	d0e5      	beq.n	8108f58 <_scanf_float+0x378>
 8108f8c:	9905      	ldr	r1, [sp, #20]
 8108f8e:	230a      	movs	r3, #10
 8108f90:	462a      	mov	r2, r5
 8108f92:	3101      	adds	r1, #1
 8108f94:	4640      	mov	r0, r8
 8108f96:	f000 ff91 	bl	8109ebc <_strtol_r>
 8108f9a:	9b04      	ldr	r3, [sp, #16]
 8108f9c:	9e05      	ldr	r6, [sp, #20]
 8108f9e:	1ac2      	subs	r2, r0, r3
 8108fa0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8108fa4:	429e      	cmp	r6, r3
 8108fa6:	bf28      	it	cs
 8108fa8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8108fac:	4912      	ldr	r1, [pc, #72]	; (8108ff8 <_scanf_float+0x418>)
 8108fae:	4630      	mov	r0, r6
 8108fb0:	f000 f8ba 	bl	8109128 <siprintf>
 8108fb4:	e7d0      	b.n	8108f58 <_scanf_float+0x378>
 8108fb6:	9903      	ldr	r1, [sp, #12]
 8108fb8:	f012 0f04 	tst.w	r2, #4
 8108fbc:	f103 0204 	add.w	r2, r3, #4
 8108fc0:	600a      	str	r2, [r1, #0]
 8108fc2:	d1d9      	bne.n	8108f78 <_scanf_float+0x398>
 8108fc4:	f8d3 8000 	ldr.w	r8, [r3]
 8108fc8:	ee10 2a10 	vmov	r2, s0
 8108fcc:	ee10 0a10 	vmov	r0, s0
 8108fd0:	463b      	mov	r3, r7
 8108fd2:	4639      	mov	r1, r7
 8108fd4:	f7f7 fe32 	bl	8100c3c <__aeabi_dcmpun>
 8108fd8:	b128      	cbz	r0, 8108fe6 <_scanf_float+0x406>
 8108fda:	4808      	ldr	r0, [pc, #32]	; (8108ffc <_scanf_float+0x41c>)
 8108fdc:	f000 f89e 	bl	810911c <nanf>
 8108fe0:	ed88 0a00 	vstr	s0, [r8]
 8108fe4:	e7cb      	b.n	8108f7e <_scanf_float+0x39e>
 8108fe6:	4630      	mov	r0, r6
 8108fe8:	4639      	mov	r1, r7
 8108fea:	f7f7 fe85 	bl	8100cf8 <__aeabi_d2f>
 8108fee:	f8c8 0000 	str.w	r0, [r8]
 8108ff2:	e7c4      	b.n	8108f7e <_scanf_float+0x39e>
 8108ff4:	2500      	movs	r5, #0
 8108ff6:	e634      	b.n	8108c62 <_scanf_float+0x82>
 8108ff8:	0810cfb8 	.word	0x0810cfb8
 8108ffc:	0810d428 	.word	0x0810d428

08109000 <iprintf>:
 8109000:	b40f      	push	{r0, r1, r2, r3}
 8109002:	4b0a      	ldr	r3, [pc, #40]	; (810902c <iprintf+0x2c>)
 8109004:	b513      	push	{r0, r1, r4, lr}
 8109006:	681c      	ldr	r4, [r3, #0]
 8109008:	b124      	cbz	r4, 8109014 <iprintf+0x14>
 810900a:	69a3      	ldr	r3, [r4, #24]
 810900c:	b913      	cbnz	r3, 8109014 <iprintf+0x14>
 810900e:	4620      	mov	r0, r4
 8109010:	f001 ffaa 	bl	810af68 <__sinit>
 8109014:	ab05      	add	r3, sp, #20
 8109016:	9a04      	ldr	r2, [sp, #16]
 8109018:	68a1      	ldr	r1, [r4, #8]
 810901a:	9301      	str	r3, [sp, #4]
 810901c:	4620      	mov	r0, r4
 810901e:	f003 fb73 	bl	810c708 <_vfiprintf_r>
 8109022:	b002      	add	sp, #8
 8109024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109028:	b004      	add	sp, #16
 810902a:	4770      	bx	lr
 810902c:	10000020 	.word	0x10000020

08109030 <_puts_r>:
 8109030:	b570      	push	{r4, r5, r6, lr}
 8109032:	460e      	mov	r6, r1
 8109034:	4605      	mov	r5, r0
 8109036:	b118      	cbz	r0, 8109040 <_puts_r+0x10>
 8109038:	6983      	ldr	r3, [r0, #24]
 810903a:	b90b      	cbnz	r3, 8109040 <_puts_r+0x10>
 810903c:	f001 ff94 	bl	810af68 <__sinit>
 8109040:	69ab      	ldr	r3, [r5, #24]
 8109042:	68ac      	ldr	r4, [r5, #8]
 8109044:	b913      	cbnz	r3, 810904c <_puts_r+0x1c>
 8109046:	4628      	mov	r0, r5
 8109048:	f001 ff8e 	bl	810af68 <__sinit>
 810904c:	4b2c      	ldr	r3, [pc, #176]	; (8109100 <_puts_r+0xd0>)
 810904e:	429c      	cmp	r4, r3
 8109050:	d120      	bne.n	8109094 <_puts_r+0x64>
 8109052:	686c      	ldr	r4, [r5, #4]
 8109054:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8109056:	07db      	lsls	r3, r3, #31
 8109058:	d405      	bmi.n	8109066 <_puts_r+0x36>
 810905a:	89a3      	ldrh	r3, [r4, #12]
 810905c:	0598      	lsls	r0, r3, #22
 810905e:	d402      	bmi.n	8109066 <_puts_r+0x36>
 8109060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8109062:	f002 fb92 	bl	810b78a <__retarget_lock_acquire_recursive>
 8109066:	89a3      	ldrh	r3, [r4, #12]
 8109068:	0719      	lsls	r1, r3, #28
 810906a:	d51d      	bpl.n	81090a8 <_puts_r+0x78>
 810906c:	6923      	ldr	r3, [r4, #16]
 810906e:	b1db      	cbz	r3, 81090a8 <_puts_r+0x78>
 8109070:	3e01      	subs	r6, #1
 8109072:	68a3      	ldr	r3, [r4, #8]
 8109074:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8109078:	3b01      	subs	r3, #1
 810907a:	60a3      	str	r3, [r4, #8]
 810907c:	bb39      	cbnz	r1, 81090ce <_puts_r+0x9e>
 810907e:	2b00      	cmp	r3, #0
 8109080:	da38      	bge.n	81090f4 <_puts_r+0xc4>
 8109082:	4622      	mov	r2, r4
 8109084:	210a      	movs	r1, #10
 8109086:	4628      	mov	r0, r5
 8109088:	f000 ff1a 	bl	8109ec0 <__swbuf_r>
 810908c:	3001      	adds	r0, #1
 810908e:	d011      	beq.n	81090b4 <_puts_r+0x84>
 8109090:	250a      	movs	r5, #10
 8109092:	e011      	b.n	81090b8 <_puts_r+0x88>
 8109094:	4b1b      	ldr	r3, [pc, #108]	; (8109104 <_puts_r+0xd4>)
 8109096:	429c      	cmp	r4, r3
 8109098:	d101      	bne.n	810909e <_puts_r+0x6e>
 810909a:	68ac      	ldr	r4, [r5, #8]
 810909c:	e7da      	b.n	8109054 <_puts_r+0x24>
 810909e:	4b1a      	ldr	r3, [pc, #104]	; (8109108 <_puts_r+0xd8>)
 81090a0:	429c      	cmp	r4, r3
 81090a2:	bf08      	it	eq
 81090a4:	68ec      	ldreq	r4, [r5, #12]
 81090a6:	e7d5      	b.n	8109054 <_puts_r+0x24>
 81090a8:	4621      	mov	r1, r4
 81090aa:	4628      	mov	r0, r5
 81090ac:	f000 ff5a 	bl	8109f64 <__swsetup_r>
 81090b0:	2800      	cmp	r0, #0
 81090b2:	d0dd      	beq.n	8109070 <_puts_r+0x40>
 81090b4:	f04f 35ff 	mov.w	r5, #4294967295
 81090b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81090ba:	07da      	lsls	r2, r3, #31
 81090bc:	d405      	bmi.n	81090ca <_puts_r+0x9a>
 81090be:	89a3      	ldrh	r3, [r4, #12]
 81090c0:	059b      	lsls	r3, r3, #22
 81090c2:	d402      	bmi.n	81090ca <_puts_r+0x9a>
 81090c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81090c6:	f002 fb61 	bl	810b78c <__retarget_lock_release_recursive>
 81090ca:	4628      	mov	r0, r5
 81090cc:	bd70      	pop	{r4, r5, r6, pc}
 81090ce:	2b00      	cmp	r3, #0
 81090d0:	da04      	bge.n	81090dc <_puts_r+0xac>
 81090d2:	69a2      	ldr	r2, [r4, #24]
 81090d4:	429a      	cmp	r2, r3
 81090d6:	dc06      	bgt.n	81090e6 <_puts_r+0xb6>
 81090d8:	290a      	cmp	r1, #10
 81090da:	d004      	beq.n	81090e6 <_puts_r+0xb6>
 81090dc:	6823      	ldr	r3, [r4, #0]
 81090de:	1c5a      	adds	r2, r3, #1
 81090e0:	6022      	str	r2, [r4, #0]
 81090e2:	7019      	strb	r1, [r3, #0]
 81090e4:	e7c5      	b.n	8109072 <_puts_r+0x42>
 81090e6:	4622      	mov	r2, r4
 81090e8:	4628      	mov	r0, r5
 81090ea:	f000 fee9 	bl	8109ec0 <__swbuf_r>
 81090ee:	3001      	adds	r0, #1
 81090f0:	d1bf      	bne.n	8109072 <_puts_r+0x42>
 81090f2:	e7df      	b.n	81090b4 <_puts_r+0x84>
 81090f4:	6823      	ldr	r3, [r4, #0]
 81090f6:	250a      	movs	r5, #10
 81090f8:	1c5a      	adds	r2, r3, #1
 81090fa:	6022      	str	r2, [r4, #0]
 81090fc:	701d      	strb	r5, [r3, #0]
 81090fe:	e7db      	b.n	81090b8 <_puts_r+0x88>
 8109100:	0810d1c4 	.word	0x0810d1c4
 8109104:	0810d1e4 	.word	0x0810d1e4
 8109108:	0810d1a4 	.word	0x0810d1a4

0810910c <puts>:
 810910c:	4b02      	ldr	r3, [pc, #8]	; (8109118 <puts+0xc>)
 810910e:	4601      	mov	r1, r0
 8109110:	6818      	ldr	r0, [r3, #0]
 8109112:	f7ff bf8d 	b.w	8109030 <_puts_r>
 8109116:	bf00      	nop
 8109118:	10000020 	.word	0x10000020

0810911c <nanf>:
 810911c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8109124 <nanf+0x8>
 8109120:	4770      	bx	lr
 8109122:	bf00      	nop
 8109124:	7fc00000 	.word	0x7fc00000

08109128 <siprintf>:
 8109128:	b40e      	push	{r1, r2, r3}
 810912a:	b500      	push	{lr}
 810912c:	b09c      	sub	sp, #112	; 0x70
 810912e:	ab1d      	add	r3, sp, #116	; 0x74
 8109130:	9002      	str	r0, [sp, #8]
 8109132:	9006      	str	r0, [sp, #24]
 8109134:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8109138:	4809      	ldr	r0, [pc, #36]	; (8109160 <siprintf+0x38>)
 810913a:	9107      	str	r1, [sp, #28]
 810913c:	9104      	str	r1, [sp, #16]
 810913e:	4909      	ldr	r1, [pc, #36]	; (8109164 <siprintf+0x3c>)
 8109140:	f853 2b04 	ldr.w	r2, [r3], #4
 8109144:	9105      	str	r1, [sp, #20]
 8109146:	6800      	ldr	r0, [r0, #0]
 8109148:	9301      	str	r3, [sp, #4]
 810914a:	a902      	add	r1, sp, #8
 810914c:	f003 f9b2 	bl	810c4b4 <_svfiprintf_r>
 8109150:	9b02      	ldr	r3, [sp, #8]
 8109152:	2200      	movs	r2, #0
 8109154:	701a      	strb	r2, [r3, #0]
 8109156:	b01c      	add	sp, #112	; 0x70
 8109158:	f85d eb04 	ldr.w	lr, [sp], #4
 810915c:	b003      	add	sp, #12
 810915e:	4770      	bx	lr
 8109160:	10000020 	.word	0x10000020
 8109164:	ffff0208 	.word	0xffff0208

08109168 <sulp>:
 8109168:	b570      	push	{r4, r5, r6, lr}
 810916a:	4604      	mov	r4, r0
 810916c:	460d      	mov	r5, r1
 810916e:	ec45 4b10 	vmov	d0, r4, r5
 8109172:	4616      	mov	r6, r2
 8109174:	f002 fefc 	bl	810bf70 <__ulp>
 8109178:	ec51 0b10 	vmov	r0, r1, d0
 810917c:	b17e      	cbz	r6, 810919e <sulp+0x36>
 810917e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8109182:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8109186:	2b00      	cmp	r3, #0
 8109188:	dd09      	ble.n	810919e <sulp+0x36>
 810918a:	051b      	lsls	r3, r3, #20
 810918c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8109190:	2400      	movs	r4, #0
 8109192:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8109196:	4622      	mov	r2, r4
 8109198:	462b      	mov	r3, r5
 810919a:	f7f7 fab5 	bl	8100708 <__aeabi_dmul>
 810919e:	bd70      	pop	{r4, r5, r6, pc}

081091a0 <_strtod_l>:
 81091a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81091a4:	ed2d 8b02 	vpush	{d8}
 81091a8:	b09d      	sub	sp, #116	; 0x74
 81091aa:	461f      	mov	r7, r3
 81091ac:	2300      	movs	r3, #0
 81091ae:	9318      	str	r3, [sp, #96]	; 0x60
 81091b0:	4ba2      	ldr	r3, [pc, #648]	; (810943c <_strtod_l+0x29c>)
 81091b2:	9213      	str	r2, [sp, #76]	; 0x4c
 81091b4:	681b      	ldr	r3, [r3, #0]
 81091b6:	9305      	str	r3, [sp, #20]
 81091b8:	4604      	mov	r4, r0
 81091ba:	4618      	mov	r0, r3
 81091bc:	4688      	mov	r8, r1
 81091be:	f7f7 f88f 	bl	81002e0 <strlen>
 81091c2:	f04f 0a00 	mov.w	sl, #0
 81091c6:	4605      	mov	r5, r0
 81091c8:	f04f 0b00 	mov.w	fp, #0
 81091cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 81091d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81091d2:	781a      	ldrb	r2, [r3, #0]
 81091d4:	2a2b      	cmp	r2, #43	; 0x2b
 81091d6:	d04e      	beq.n	8109276 <_strtod_l+0xd6>
 81091d8:	d83b      	bhi.n	8109252 <_strtod_l+0xb2>
 81091da:	2a0d      	cmp	r2, #13
 81091dc:	d834      	bhi.n	8109248 <_strtod_l+0xa8>
 81091de:	2a08      	cmp	r2, #8
 81091e0:	d834      	bhi.n	810924c <_strtod_l+0xac>
 81091e2:	2a00      	cmp	r2, #0
 81091e4:	d03e      	beq.n	8109264 <_strtod_l+0xc4>
 81091e6:	2300      	movs	r3, #0
 81091e8:	930a      	str	r3, [sp, #40]	; 0x28
 81091ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 81091ec:	7833      	ldrb	r3, [r6, #0]
 81091ee:	2b30      	cmp	r3, #48	; 0x30
 81091f0:	f040 80b0 	bne.w	8109354 <_strtod_l+0x1b4>
 81091f4:	7873      	ldrb	r3, [r6, #1]
 81091f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 81091fa:	2b58      	cmp	r3, #88	; 0x58
 81091fc:	d168      	bne.n	81092d0 <_strtod_l+0x130>
 81091fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109200:	9301      	str	r3, [sp, #4]
 8109202:	ab18      	add	r3, sp, #96	; 0x60
 8109204:	9702      	str	r7, [sp, #8]
 8109206:	9300      	str	r3, [sp, #0]
 8109208:	4a8d      	ldr	r2, [pc, #564]	; (8109440 <_strtod_l+0x2a0>)
 810920a:	ab19      	add	r3, sp, #100	; 0x64
 810920c:	a917      	add	r1, sp, #92	; 0x5c
 810920e:	4620      	mov	r0, r4
 8109210:	f001 ffae 	bl	810b170 <__gethex>
 8109214:	f010 0707 	ands.w	r7, r0, #7
 8109218:	4605      	mov	r5, r0
 810921a:	d005      	beq.n	8109228 <_strtod_l+0x88>
 810921c:	2f06      	cmp	r7, #6
 810921e:	d12c      	bne.n	810927a <_strtod_l+0xda>
 8109220:	3601      	adds	r6, #1
 8109222:	2300      	movs	r3, #0
 8109224:	9617      	str	r6, [sp, #92]	; 0x5c
 8109226:	930a      	str	r3, [sp, #40]	; 0x28
 8109228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810922a:	2b00      	cmp	r3, #0
 810922c:	f040 8590 	bne.w	8109d50 <_strtod_l+0xbb0>
 8109230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109232:	b1eb      	cbz	r3, 8109270 <_strtod_l+0xd0>
 8109234:	4652      	mov	r2, sl
 8109236:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810923a:	ec43 2b10 	vmov	d0, r2, r3
 810923e:	b01d      	add	sp, #116	; 0x74
 8109240:	ecbd 8b02 	vpop	{d8}
 8109244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109248:	2a20      	cmp	r2, #32
 810924a:	d1cc      	bne.n	81091e6 <_strtod_l+0x46>
 810924c:	3301      	adds	r3, #1
 810924e:	9317      	str	r3, [sp, #92]	; 0x5c
 8109250:	e7be      	b.n	81091d0 <_strtod_l+0x30>
 8109252:	2a2d      	cmp	r2, #45	; 0x2d
 8109254:	d1c7      	bne.n	81091e6 <_strtod_l+0x46>
 8109256:	2201      	movs	r2, #1
 8109258:	920a      	str	r2, [sp, #40]	; 0x28
 810925a:	1c5a      	adds	r2, r3, #1
 810925c:	9217      	str	r2, [sp, #92]	; 0x5c
 810925e:	785b      	ldrb	r3, [r3, #1]
 8109260:	2b00      	cmp	r3, #0
 8109262:	d1c2      	bne.n	81091ea <_strtod_l+0x4a>
 8109264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109266:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810926a:	2b00      	cmp	r3, #0
 810926c:	f040 856e 	bne.w	8109d4c <_strtod_l+0xbac>
 8109270:	4652      	mov	r2, sl
 8109272:	465b      	mov	r3, fp
 8109274:	e7e1      	b.n	810923a <_strtod_l+0x9a>
 8109276:	2200      	movs	r2, #0
 8109278:	e7ee      	b.n	8109258 <_strtod_l+0xb8>
 810927a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810927c:	b13a      	cbz	r2, 810928e <_strtod_l+0xee>
 810927e:	2135      	movs	r1, #53	; 0x35
 8109280:	a81a      	add	r0, sp, #104	; 0x68
 8109282:	f002 ff80 	bl	810c186 <__copybits>
 8109286:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109288:	4620      	mov	r0, r4
 810928a:	f002 fb3f 	bl	810b90c <_Bfree>
 810928e:	3f01      	subs	r7, #1
 8109290:	2f04      	cmp	r7, #4
 8109292:	d806      	bhi.n	81092a2 <_strtod_l+0x102>
 8109294:	e8df f007 	tbb	[pc, r7]
 8109298:	1714030a 	.word	0x1714030a
 810929c:	0a          	.byte	0x0a
 810929d:	00          	.byte	0x00
 810929e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 81092a2:	0728      	lsls	r0, r5, #28
 81092a4:	d5c0      	bpl.n	8109228 <_strtod_l+0x88>
 81092a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 81092aa:	e7bd      	b.n	8109228 <_strtod_l+0x88>
 81092ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 81092b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 81092b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 81092b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 81092ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 81092be:	e7f0      	b.n	81092a2 <_strtod_l+0x102>
 81092c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8109444 <_strtod_l+0x2a4>
 81092c4:	e7ed      	b.n	81092a2 <_strtod_l+0x102>
 81092c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 81092ca:	f04f 3aff 	mov.w	sl, #4294967295
 81092ce:	e7e8      	b.n	81092a2 <_strtod_l+0x102>
 81092d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81092d2:	1c5a      	adds	r2, r3, #1
 81092d4:	9217      	str	r2, [sp, #92]	; 0x5c
 81092d6:	785b      	ldrb	r3, [r3, #1]
 81092d8:	2b30      	cmp	r3, #48	; 0x30
 81092da:	d0f9      	beq.n	81092d0 <_strtod_l+0x130>
 81092dc:	2b00      	cmp	r3, #0
 81092de:	d0a3      	beq.n	8109228 <_strtod_l+0x88>
 81092e0:	2301      	movs	r3, #1
 81092e2:	f04f 0900 	mov.w	r9, #0
 81092e6:	9304      	str	r3, [sp, #16]
 81092e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81092ea:	9308      	str	r3, [sp, #32]
 81092ec:	f8cd 901c 	str.w	r9, [sp, #28]
 81092f0:	464f      	mov	r7, r9
 81092f2:	220a      	movs	r2, #10
 81092f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 81092f6:	7806      	ldrb	r6, [r0, #0]
 81092f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 81092fc:	b2d9      	uxtb	r1, r3
 81092fe:	2909      	cmp	r1, #9
 8109300:	d92a      	bls.n	8109358 <_strtod_l+0x1b8>
 8109302:	9905      	ldr	r1, [sp, #20]
 8109304:	462a      	mov	r2, r5
 8109306:	f003 fb8a 	bl	810ca1e <strncmp>
 810930a:	b398      	cbz	r0, 8109374 <_strtod_l+0x1d4>
 810930c:	2000      	movs	r0, #0
 810930e:	4632      	mov	r2, r6
 8109310:	463d      	mov	r5, r7
 8109312:	9005      	str	r0, [sp, #20]
 8109314:	4603      	mov	r3, r0
 8109316:	2a65      	cmp	r2, #101	; 0x65
 8109318:	d001      	beq.n	810931e <_strtod_l+0x17e>
 810931a:	2a45      	cmp	r2, #69	; 0x45
 810931c:	d118      	bne.n	8109350 <_strtod_l+0x1b0>
 810931e:	b91d      	cbnz	r5, 8109328 <_strtod_l+0x188>
 8109320:	9a04      	ldr	r2, [sp, #16]
 8109322:	4302      	orrs	r2, r0
 8109324:	d09e      	beq.n	8109264 <_strtod_l+0xc4>
 8109326:	2500      	movs	r5, #0
 8109328:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 810932c:	f108 0201 	add.w	r2, r8, #1
 8109330:	9217      	str	r2, [sp, #92]	; 0x5c
 8109332:	f898 2001 	ldrb.w	r2, [r8, #1]
 8109336:	2a2b      	cmp	r2, #43	; 0x2b
 8109338:	d075      	beq.n	8109426 <_strtod_l+0x286>
 810933a:	2a2d      	cmp	r2, #45	; 0x2d
 810933c:	d07b      	beq.n	8109436 <_strtod_l+0x296>
 810933e:	f04f 0c00 	mov.w	ip, #0
 8109342:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8109346:	2909      	cmp	r1, #9
 8109348:	f240 8082 	bls.w	8109450 <_strtod_l+0x2b0>
 810934c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8109350:	2600      	movs	r6, #0
 8109352:	e09d      	b.n	8109490 <_strtod_l+0x2f0>
 8109354:	2300      	movs	r3, #0
 8109356:	e7c4      	b.n	81092e2 <_strtod_l+0x142>
 8109358:	2f08      	cmp	r7, #8
 810935a:	bfd8      	it	le
 810935c:	9907      	ldrle	r1, [sp, #28]
 810935e:	f100 0001 	add.w	r0, r0, #1
 8109362:	bfda      	itte	le
 8109364:	fb02 3301 	mlale	r3, r2, r1, r3
 8109368:	9307      	strle	r3, [sp, #28]
 810936a:	fb02 3909 	mlagt	r9, r2, r9, r3
 810936e:	3701      	adds	r7, #1
 8109370:	9017      	str	r0, [sp, #92]	; 0x5c
 8109372:	e7bf      	b.n	81092f4 <_strtod_l+0x154>
 8109374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109376:	195a      	adds	r2, r3, r5
 8109378:	9217      	str	r2, [sp, #92]	; 0x5c
 810937a:	5d5a      	ldrb	r2, [r3, r5]
 810937c:	2f00      	cmp	r7, #0
 810937e:	d037      	beq.n	81093f0 <_strtod_l+0x250>
 8109380:	9005      	str	r0, [sp, #20]
 8109382:	463d      	mov	r5, r7
 8109384:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8109388:	2b09      	cmp	r3, #9
 810938a:	d912      	bls.n	81093b2 <_strtod_l+0x212>
 810938c:	2301      	movs	r3, #1
 810938e:	e7c2      	b.n	8109316 <_strtod_l+0x176>
 8109390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109392:	1c5a      	adds	r2, r3, #1
 8109394:	9217      	str	r2, [sp, #92]	; 0x5c
 8109396:	785a      	ldrb	r2, [r3, #1]
 8109398:	3001      	adds	r0, #1
 810939a:	2a30      	cmp	r2, #48	; 0x30
 810939c:	d0f8      	beq.n	8109390 <_strtod_l+0x1f0>
 810939e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 81093a2:	2b08      	cmp	r3, #8
 81093a4:	f200 84d9 	bhi.w	8109d5a <_strtod_l+0xbba>
 81093a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81093aa:	9005      	str	r0, [sp, #20]
 81093ac:	2000      	movs	r0, #0
 81093ae:	9308      	str	r3, [sp, #32]
 81093b0:	4605      	mov	r5, r0
 81093b2:	3a30      	subs	r2, #48	; 0x30
 81093b4:	f100 0301 	add.w	r3, r0, #1
 81093b8:	d014      	beq.n	81093e4 <_strtod_l+0x244>
 81093ba:	9905      	ldr	r1, [sp, #20]
 81093bc:	4419      	add	r1, r3
 81093be:	9105      	str	r1, [sp, #20]
 81093c0:	462b      	mov	r3, r5
 81093c2:	eb00 0e05 	add.w	lr, r0, r5
 81093c6:	210a      	movs	r1, #10
 81093c8:	4573      	cmp	r3, lr
 81093ca:	d113      	bne.n	81093f4 <_strtod_l+0x254>
 81093cc:	182b      	adds	r3, r5, r0
 81093ce:	2b08      	cmp	r3, #8
 81093d0:	f105 0501 	add.w	r5, r5, #1
 81093d4:	4405      	add	r5, r0
 81093d6:	dc1c      	bgt.n	8109412 <_strtod_l+0x272>
 81093d8:	9907      	ldr	r1, [sp, #28]
 81093da:	230a      	movs	r3, #10
 81093dc:	fb03 2301 	mla	r3, r3, r1, r2
 81093e0:	9307      	str	r3, [sp, #28]
 81093e2:	2300      	movs	r3, #0
 81093e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 81093e6:	1c51      	adds	r1, r2, #1
 81093e8:	9117      	str	r1, [sp, #92]	; 0x5c
 81093ea:	7852      	ldrb	r2, [r2, #1]
 81093ec:	4618      	mov	r0, r3
 81093ee:	e7c9      	b.n	8109384 <_strtod_l+0x1e4>
 81093f0:	4638      	mov	r0, r7
 81093f2:	e7d2      	b.n	810939a <_strtod_l+0x1fa>
 81093f4:	2b08      	cmp	r3, #8
 81093f6:	dc04      	bgt.n	8109402 <_strtod_l+0x262>
 81093f8:	9e07      	ldr	r6, [sp, #28]
 81093fa:	434e      	muls	r6, r1
 81093fc:	9607      	str	r6, [sp, #28]
 81093fe:	3301      	adds	r3, #1
 8109400:	e7e2      	b.n	81093c8 <_strtod_l+0x228>
 8109402:	f103 0c01 	add.w	ip, r3, #1
 8109406:	f1bc 0f10 	cmp.w	ip, #16
 810940a:	bfd8      	it	le
 810940c:	fb01 f909 	mulle.w	r9, r1, r9
 8109410:	e7f5      	b.n	81093fe <_strtod_l+0x25e>
 8109412:	2d10      	cmp	r5, #16
 8109414:	bfdc      	itt	le
 8109416:	230a      	movle	r3, #10
 8109418:	fb03 2909 	mlale	r9, r3, r9, r2
 810941c:	e7e1      	b.n	81093e2 <_strtod_l+0x242>
 810941e:	2300      	movs	r3, #0
 8109420:	9305      	str	r3, [sp, #20]
 8109422:	2301      	movs	r3, #1
 8109424:	e77c      	b.n	8109320 <_strtod_l+0x180>
 8109426:	f04f 0c00 	mov.w	ip, #0
 810942a:	f108 0202 	add.w	r2, r8, #2
 810942e:	9217      	str	r2, [sp, #92]	; 0x5c
 8109430:	f898 2002 	ldrb.w	r2, [r8, #2]
 8109434:	e785      	b.n	8109342 <_strtod_l+0x1a2>
 8109436:	f04f 0c01 	mov.w	ip, #1
 810943a:	e7f6      	b.n	810942a <_strtod_l+0x28a>
 810943c:	0810d26c 	.word	0x0810d26c
 8109440:	0810cfc0 	.word	0x0810cfc0
 8109444:	7ff00000 	.word	0x7ff00000
 8109448:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810944a:	1c51      	adds	r1, r2, #1
 810944c:	9117      	str	r1, [sp, #92]	; 0x5c
 810944e:	7852      	ldrb	r2, [r2, #1]
 8109450:	2a30      	cmp	r2, #48	; 0x30
 8109452:	d0f9      	beq.n	8109448 <_strtod_l+0x2a8>
 8109454:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8109458:	2908      	cmp	r1, #8
 810945a:	f63f af79 	bhi.w	8109350 <_strtod_l+0x1b0>
 810945e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8109462:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8109464:	9206      	str	r2, [sp, #24]
 8109466:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8109468:	1c51      	adds	r1, r2, #1
 810946a:	9117      	str	r1, [sp, #92]	; 0x5c
 810946c:	7852      	ldrb	r2, [r2, #1]
 810946e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8109472:	2e09      	cmp	r6, #9
 8109474:	d937      	bls.n	81094e6 <_strtod_l+0x346>
 8109476:	9e06      	ldr	r6, [sp, #24]
 8109478:	1b89      	subs	r1, r1, r6
 810947a:	2908      	cmp	r1, #8
 810947c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8109480:	dc02      	bgt.n	8109488 <_strtod_l+0x2e8>
 8109482:	4576      	cmp	r6, lr
 8109484:	bfa8      	it	ge
 8109486:	4676      	movge	r6, lr
 8109488:	f1bc 0f00 	cmp.w	ip, #0
 810948c:	d000      	beq.n	8109490 <_strtod_l+0x2f0>
 810948e:	4276      	negs	r6, r6
 8109490:	2d00      	cmp	r5, #0
 8109492:	d14d      	bne.n	8109530 <_strtod_l+0x390>
 8109494:	9904      	ldr	r1, [sp, #16]
 8109496:	4301      	orrs	r1, r0
 8109498:	f47f aec6 	bne.w	8109228 <_strtod_l+0x88>
 810949c:	2b00      	cmp	r3, #0
 810949e:	f47f aee1 	bne.w	8109264 <_strtod_l+0xc4>
 81094a2:	2a69      	cmp	r2, #105	; 0x69
 81094a4:	d027      	beq.n	81094f6 <_strtod_l+0x356>
 81094a6:	dc24      	bgt.n	81094f2 <_strtod_l+0x352>
 81094a8:	2a49      	cmp	r2, #73	; 0x49
 81094aa:	d024      	beq.n	81094f6 <_strtod_l+0x356>
 81094ac:	2a4e      	cmp	r2, #78	; 0x4e
 81094ae:	f47f aed9 	bne.w	8109264 <_strtod_l+0xc4>
 81094b2:	499f      	ldr	r1, [pc, #636]	; (8109730 <_strtod_l+0x590>)
 81094b4:	a817      	add	r0, sp, #92	; 0x5c
 81094b6:	f002 f8b3 	bl	810b620 <__match>
 81094ba:	2800      	cmp	r0, #0
 81094bc:	f43f aed2 	beq.w	8109264 <_strtod_l+0xc4>
 81094c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81094c2:	781b      	ldrb	r3, [r3, #0]
 81094c4:	2b28      	cmp	r3, #40	; 0x28
 81094c6:	d12d      	bne.n	8109524 <_strtod_l+0x384>
 81094c8:	499a      	ldr	r1, [pc, #616]	; (8109734 <_strtod_l+0x594>)
 81094ca:	aa1a      	add	r2, sp, #104	; 0x68
 81094cc:	a817      	add	r0, sp, #92	; 0x5c
 81094ce:	f002 f8bb 	bl	810b648 <__hexnan>
 81094d2:	2805      	cmp	r0, #5
 81094d4:	d126      	bne.n	8109524 <_strtod_l+0x384>
 81094d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 81094d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 81094dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 81094e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 81094e4:	e6a0      	b.n	8109228 <_strtod_l+0x88>
 81094e6:	210a      	movs	r1, #10
 81094e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 81094ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 81094f0:	e7b9      	b.n	8109466 <_strtod_l+0x2c6>
 81094f2:	2a6e      	cmp	r2, #110	; 0x6e
 81094f4:	e7db      	b.n	81094ae <_strtod_l+0x30e>
 81094f6:	4990      	ldr	r1, [pc, #576]	; (8109738 <_strtod_l+0x598>)
 81094f8:	a817      	add	r0, sp, #92	; 0x5c
 81094fa:	f002 f891 	bl	810b620 <__match>
 81094fe:	2800      	cmp	r0, #0
 8109500:	f43f aeb0 	beq.w	8109264 <_strtod_l+0xc4>
 8109504:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109506:	498d      	ldr	r1, [pc, #564]	; (810973c <_strtod_l+0x59c>)
 8109508:	3b01      	subs	r3, #1
 810950a:	a817      	add	r0, sp, #92	; 0x5c
 810950c:	9317      	str	r3, [sp, #92]	; 0x5c
 810950e:	f002 f887 	bl	810b620 <__match>
 8109512:	b910      	cbnz	r0, 810951a <_strtod_l+0x37a>
 8109514:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109516:	3301      	adds	r3, #1
 8109518:	9317      	str	r3, [sp, #92]	; 0x5c
 810951a:	f8df b230 	ldr.w	fp, [pc, #560]	; 810974c <_strtod_l+0x5ac>
 810951e:	f04f 0a00 	mov.w	sl, #0
 8109522:	e681      	b.n	8109228 <_strtod_l+0x88>
 8109524:	4886      	ldr	r0, [pc, #536]	; (8109740 <_strtod_l+0x5a0>)
 8109526:	f003 fa1f 	bl	810c968 <nan>
 810952a:	ec5b ab10 	vmov	sl, fp, d0
 810952e:	e67b      	b.n	8109228 <_strtod_l+0x88>
 8109530:	9b05      	ldr	r3, [sp, #20]
 8109532:	9807      	ldr	r0, [sp, #28]
 8109534:	1af3      	subs	r3, r6, r3
 8109536:	2f00      	cmp	r7, #0
 8109538:	bf08      	it	eq
 810953a:	462f      	moveq	r7, r5
 810953c:	2d10      	cmp	r5, #16
 810953e:	9306      	str	r3, [sp, #24]
 8109540:	46a8      	mov	r8, r5
 8109542:	bfa8      	it	ge
 8109544:	f04f 0810 	movge.w	r8, #16
 8109548:	f7f7 f864 	bl	8100614 <__aeabi_ui2d>
 810954c:	2d09      	cmp	r5, #9
 810954e:	4682      	mov	sl, r0
 8109550:	468b      	mov	fp, r1
 8109552:	dd13      	ble.n	810957c <_strtod_l+0x3dc>
 8109554:	4b7b      	ldr	r3, [pc, #492]	; (8109744 <_strtod_l+0x5a4>)
 8109556:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810955a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810955e:	f7f7 f8d3 	bl	8100708 <__aeabi_dmul>
 8109562:	4682      	mov	sl, r0
 8109564:	4648      	mov	r0, r9
 8109566:	468b      	mov	fp, r1
 8109568:	f7f7 f854 	bl	8100614 <__aeabi_ui2d>
 810956c:	4602      	mov	r2, r0
 810956e:	460b      	mov	r3, r1
 8109570:	4650      	mov	r0, sl
 8109572:	4659      	mov	r1, fp
 8109574:	f7f6 ff12 	bl	810039c <__adddf3>
 8109578:	4682      	mov	sl, r0
 810957a:	468b      	mov	fp, r1
 810957c:	2d0f      	cmp	r5, #15
 810957e:	dc38      	bgt.n	81095f2 <_strtod_l+0x452>
 8109580:	9b06      	ldr	r3, [sp, #24]
 8109582:	2b00      	cmp	r3, #0
 8109584:	f43f ae50 	beq.w	8109228 <_strtod_l+0x88>
 8109588:	dd24      	ble.n	81095d4 <_strtod_l+0x434>
 810958a:	2b16      	cmp	r3, #22
 810958c:	dc0b      	bgt.n	81095a6 <_strtod_l+0x406>
 810958e:	496d      	ldr	r1, [pc, #436]	; (8109744 <_strtod_l+0x5a4>)
 8109590:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8109594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109598:	4652      	mov	r2, sl
 810959a:	465b      	mov	r3, fp
 810959c:	f7f7 f8b4 	bl	8100708 <__aeabi_dmul>
 81095a0:	4682      	mov	sl, r0
 81095a2:	468b      	mov	fp, r1
 81095a4:	e640      	b.n	8109228 <_strtod_l+0x88>
 81095a6:	9a06      	ldr	r2, [sp, #24]
 81095a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 81095ac:	4293      	cmp	r3, r2
 81095ae:	db20      	blt.n	81095f2 <_strtod_l+0x452>
 81095b0:	4c64      	ldr	r4, [pc, #400]	; (8109744 <_strtod_l+0x5a4>)
 81095b2:	f1c5 050f 	rsb	r5, r5, #15
 81095b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 81095ba:	4652      	mov	r2, sl
 81095bc:	465b      	mov	r3, fp
 81095be:	e9d1 0100 	ldrd	r0, r1, [r1]
 81095c2:	f7f7 f8a1 	bl	8100708 <__aeabi_dmul>
 81095c6:	9b06      	ldr	r3, [sp, #24]
 81095c8:	1b5d      	subs	r5, r3, r5
 81095ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 81095ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 81095d2:	e7e3      	b.n	810959c <_strtod_l+0x3fc>
 81095d4:	9b06      	ldr	r3, [sp, #24]
 81095d6:	3316      	adds	r3, #22
 81095d8:	db0b      	blt.n	81095f2 <_strtod_l+0x452>
 81095da:	9b05      	ldr	r3, [sp, #20]
 81095dc:	1b9e      	subs	r6, r3, r6
 81095de:	4b59      	ldr	r3, [pc, #356]	; (8109744 <_strtod_l+0x5a4>)
 81095e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 81095e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 81095e8:	4650      	mov	r0, sl
 81095ea:	4659      	mov	r1, fp
 81095ec:	f7f7 f9b6 	bl	810095c <__aeabi_ddiv>
 81095f0:	e7d6      	b.n	81095a0 <_strtod_l+0x400>
 81095f2:	9b06      	ldr	r3, [sp, #24]
 81095f4:	eba5 0808 	sub.w	r8, r5, r8
 81095f8:	4498      	add	r8, r3
 81095fa:	f1b8 0f00 	cmp.w	r8, #0
 81095fe:	dd74      	ble.n	81096ea <_strtod_l+0x54a>
 8109600:	f018 030f 	ands.w	r3, r8, #15
 8109604:	d00a      	beq.n	810961c <_strtod_l+0x47c>
 8109606:	494f      	ldr	r1, [pc, #316]	; (8109744 <_strtod_l+0x5a4>)
 8109608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810960c:	4652      	mov	r2, sl
 810960e:	465b      	mov	r3, fp
 8109610:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109614:	f7f7 f878 	bl	8100708 <__aeabi_dmul>
 8109618:	4682      	mov	sl, r0
 810961a:	468b      	mov	fp, r1
 810961c:	f038 080f 	bics.w	r8, r8, #15
 8109620:	d04f      	beq.n	81096c2 <_strtod_l+0x522>
 8109622:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8109626:	dd22      	ble.n	810966e <_strtod_l+0x4ce>
 8109628:	2500      	movs	r5, #0
 810962a:	462e      	mov	r6, r5
 810962c:	9507      	str	r5, [sp, #28]
 810962e:	9505      	str	r5, [sp, #20]
 8109630:	2322      	movs	r3, #34	; 0x22
 8109632:	f8df b118 	ldr.w	fp, [pc, #280]	; 810974c <_strtod_l+0x5ac>
 8109636:	6023      	str	r3, [r4, #0]
 8109638:	f04f 0a00 	mov.w	sl, #0
 810963c:	9b07      	ldr	r3, [sp, #28]
 810963e:	2b00      	cmp	r3, #0
 8109640:	f43f adf2 	beq.w	8109228 <_strtod_l+0x88>
 8109644:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109646:	4620      	mov	r0, r4
 8109648:	f002 f960 	bl	810b90c <_Bfree>
 810964c:	9905      	ldr	r1, [sp, #20]
 810964e:	4620      	mov	r0, r4
 8109650:	f002 f95c 	bl	810b90c <_Bfree>
 8109654:	4631      	mov	r1, r6
 8109656:	4620      	mov	r0, r4
 8109658:	f002 f958 	bl	810b90c <_Bfree>
 810965c:	9907      	ldr	r1, [sp, #28]
 810965e:	4620      	mov	r0, r4
 8109660:	f002 f954 	bl	810b90c <_Bfree>
 8109664:	4629      	mov	r1, r5
 8109666:	4620      	mov	r0, r4
 8109668:	f002 f950 	bl	810b90c <_Bfree>
 810966c:	e5dc      	b.n	8109228 <_strtod_l+0x88>
 810966e:	4b36      	ldr	r3, [pc, #216]	; (8109748 <_strtod_l+0x5a8>)
 8109670:	9304      	str	r3, [sp, #16]
 8109672:	2300      	movs	r3, #0
 8109674:	ea4f 1828 	mov.w	r8, r8, asr #4
 8109678:	4650      	mov	r0, sl
 810967a:	4659      	mov	r1, fp
 810967c:	4699      	mov	r9, r3
 810967e:	f1b8 0f01 	cmp.w	r8, #1
 8109682:	dc21      	bgt.n	81096c8 <_strtod_l+0x528>
 8109684:	b10b      	cbz	r3, 810968a <_strtod_l+0x4ea>
 8109686:	4682      	mov	sl, r0
 8109688:	468b      	mov	fp, r1
 810968a:	4b2f      	ldr	r3, [pc, #188]	; (8109748 <_strtod_l+0x5a8>)
 810968c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8109690:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8109694:	4652      	mov	r2, sl
 8109696:	465b      	mov	r3, fp
 8109698:	e9d9 0100 	ldrd	r0, r1, [r9]
 810969c:	f7f7 f834 	bl	8100708 <__aeabi_dmul>
 81096a0:	4b2a      	ldr	r3, [pc, #168]	; (810974c <_strtod_l+0x5ac>)
 81096a2:	460a      	mov	r2, r1
 81096a4:	400b      	ands	r3, r1
 81096a6:	492a      	ldr	r1, [pc, #168]	; (8109750 <_strtod_l+0x5b0>)
 81096a8:	428b      	cmp	r3, r1
 81096aa:	4682      	mov	sl, r0
 81096ac:	d8bc      	bhi.n	8109628 <_strtod_l+0x488>
 81096ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 81096b2:	428b      	cmp	r3, r1
 81096b4:	bf86      	itte	hi
 81096b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8109754 <_strtod_l+0x5b4>
 81096ba:	f04f 3aff 	movhi.w	sl, #4294967295
 81096be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 81096c2:	2300      	movs	r3, #0
 81096c4:	9304      	str	r3, [sp, #16]
 81096c6:	e084      	b.n	81097d2 <_strtod_l+0x632>
 81096c8:	f018 0f01 	tst.w	r8, #1
 81096cc:	d005      	beq.n	81096da <_strtod_l+0x53a>
 81096ce:	9b04      	ldr	r3, [sp, #16]
 81096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81096d4:	f7f7 f818 	bl	8100708 <__aeabi_dmul>
 81096d8:	2301      	movs	r3, #1
 81096da:	9a04      	ldr	r2, [sp, #16]
 81096dc:	3208      	adds	r2, #8
 81096de:	f109 0901 	add.w	r9, r9, #1
 81096e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 81096e6:	9204      	str	r2, [sp, #16]
 81096e8:	e7c9      	b.n	810967e <_strtod_l+0x4de>
 81096ea:	d0ea      	beq.n	81096c2 <_strtod_l+0x522>
 81096ec:	f1c8 0800 	rsb	r8, r8, #0
 81096f0:	f018 020f 	ands.w	r2, r8, #15
 81096f4:	d00a      	beq.n	810970c <_strtod_l+0x56c>
 81096f6:	4b13      	ldr	r3, [pc, #76]	; (8109744 <_strtod_l+0x5a4>)
 81096f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81096fc:	4650      	mov	r0, sl
 81096fe:	4659      	mov	r1, fp
 8109700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109704:	f7f7 f92a 	bl	810095c <__aeabi_ddiv>
 8109708:	4682      	mov	sl, r0
 810970a:	468b      	mov	fp, r1
 810970c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8109710:	d0d7      	beq.n	81096c2 <_strtod_l+0x522>
 8109712:	f1b8 0f1f 	cmp.w	r8, #31
 8109716:	dd1f      	ble.n	8109758 <_strtod_l+0x5b8>
 8109718:	2500      	movs	r5, #0
 810971a:	462e      	mov	r6, r5
 810971c:	9507      	str	r5, [sp, #28]
 810971e:	9505      	str	r5, [sp, #20]
 8109720:	2322      	movs	r3, #34	; 0x22
 8109722:	f04f 0a00 	mov.w	sl, #0
 8109726:	f04f 0b00 	mov.w	fp, #0
 810972a:	6023      	str	r3, [r4, #0]
 810972c:	e786      	b.n	810963c <_strtod_l+0x49c>
 810972e:	bf00      	nop
 8109730:	0810cf91 	.word	0x0810cf91
 8109734:	0810cfd4 	.word	0x0810cfd4
 8109738:	0810cf89 	.word	0x0810cf89
 810973c:	0810d114 	.word	0x0810d114
 8109740:	0810d428 	.word	0x0810d428
 8109744:	0810d308 	.word	0x0810d308
 8109748:	0810d2e0 	.word	0x0810d2e0
 810974c:	7ff00000 	.word	0x7ff00000
 8109750:	7ca00000 	.word	0x7ca00000
 8109754:	7fefffff 	.word	0x7fefffff
 8109758:	f018 0310 	ands.w	r3, r8, #16
 810975c:	bf18      	it	ne
 810975e:	236a      	movne	r3, #106	; 0x6a
 8109760:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8109b10 <_strtod_l+0x970>
 8109764:	9304      	str	r3, [sp, #16]
 8109766:	4650      	mov	r0, sl
 8109768:	4659      	mov	r1, fp
 810976a:	2300      	movs	r3, #0
 810976c:	f018 0f01 	tst.w	r8, #1
 8109770:	d004      	beq.n	810977c <_strtod_l+0x5dc>
 8109772:	e9d9 2300 	ldrd	r2, r3, [r9]
 8109776:	f7f6 ffc7 	bl	8100708 <__aeabi_dmul>
 810977a:	2301      	movs	r3, #1
 810977c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8109780:	f109 0908 	add.w	r9, r9, #8
 8109784:	d1f2      	bne.n	810976c <_strtod_l+0x5cc>
 8109786:	b10b      	cbz	r3, 810978c <_strtod_l+0x5ec>
 8109788:	4682      	mov	sl, r0
 810978a:	468b      	mov	fp, r1
 810978c:	9b04      	ldr	r3, [sp, #16]
 810978e:	b1c3      	cbz	r3, 81097c2 <_strtod_l+0x622>
 8109790:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8109794:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8109798:	2b00      	cmp	r3, #0
 810979a:	4659      	mov	r1, fp
 810979c:	dd11      	ble.n	81097c2 <_strtod_l+0x622>
 810979e:	2b1f      	cmp	r3, #31
 81097a0:	f340 8124 	ble.w	81099ec <_strtod_l+0x84c>
 81097a4:	2b34      	cmp	r3, #52	; 0x34
 81097a6:	bfde      	ittt	le
 81097a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 81097ac:	f04f 33ff 	movle.w	r3, #4294967295
 81097b0:	fa03 f202 	lslle.w	r2, r3, r2
 81097b4:	f04f 0a00 	mov.w	sl, #0
 81097b8:	bfcc      	ite	gt
 81097ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 81097be:	ea02 0b01 	andle.w	fp, r2, r1
 81097c2:	2200      	movs	r2, #0
 81097c4:	2300      	movs	r3, #0
 81097c6:	4650      	mov	r0, sl
 81097c8:	4659      	mov	r1, fp
 81097ca:	f7f7 fa05 	bl	8100bd8 <__aeabi_dcmpeq>
 81097ce:	2800      	cmp	r0, #0
 81097d0:	d1a2      	bne.n	8109718 <_strtod_l+0x578>
 81097d2:	9b07      	ldr	r3, [sp, #28]
 81097d4:	9300      	str	r3, [sp, #0]
 81097d6:	9908      	ldr	r1, [sp, #32]
 81097d8:	462b      	mov	r3, r5
 81097da:	463a      	mov	r2, r7
 81097dc:	4620      	mov	r0, r4
 81097de:	f002 f8fd 	bl	810b9dc <__s2b>
 81097e2:	9007      	str	r0, [sp, #28]
 81097e4:	2800      	cmp	r0, #0
 81097e6:	f43f af1f 	beq.w	8109628 <_strtod_l+0x488>
 81097ea:	9b05      	ldr	r3, [sp, #20]
 81097ec:	1b9e      	subs	r6, r3, r6
 81097ee:	9b06      	ldr	r3, [sp, #24]
 81097f0:	2b00      	cmp	r3, #0
 81097f2:	bfb4      	ite	lt
 81097f4:	4633      	movlt	r3, r6
 81097f6:	2300      	movge	r3, #0
 81097f8:	930c      	str	r3, [sp, #48]	; 0x30
 81097fa:	9b06      	ldr	r3, [sp, #24]
 81097fc:	2500      	movs	r5, #0
 81097fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8109802:	9312      	str	r3, [sp, #72]	; 0x48
 8109804:	462e      	mov	r6, r5
 8109806:	9b07      	ldr	r3, [sp, #28]
 8109808:	4620      	mov	r0, r4
 810980a:	6859      	ldr	r1, [r3, #4]
 810980c:	f002 f83e 	bl	810b88c <_Balloc>
 8109810:	9005      	str	r0, [sp, #20]
 8109812:	2800      	cmp	r0, #0
 8109814:	f43f af0c 	beq.w	8109630 <_strtod_l+0x490>
 8109818:	9b07      	ldr	r3, [sp, #28]
 810981a:	691a      	ldr	r2, [r3, #16]
 810981c:	3202      	adds	r2, #2
 810981e:	f103 010c 	add.w	r1, r3, #12
 8109822:	0092      	lsls	r2, r2, #2
 8109824:	300c      	adds	r0, #12
 8109826:	f7fe fd5b 	bl	81082e0 <memcpy>
 810982a:	ec4b ab10 	vmov	d0, sl, fp
 810982e:	aa1a      	add	r2, sp, #104	; 0x68
 8109830:	a919      	add	r1, sp, #100	; 0x64
 8109832:	4620      	mov	r0, r4
 8109834:	f002 fc18 	bl	810c068 <__d2b>
 8109838:	ec4b ab18 	vmov	d8, sl, fp
 810983c:	9018      	str	r0, [sp, #96]	; 0x60
 810983e:	2800      	cmp	r0, #0
 8109840:	f43f aef6 	beq.w	8109630 <_strtod_l+0x490>
 8109844:	2101      	movs	r1, #1
 8109846:	4620      	mov	r0, r4
 8109848:	f002 f962 	bl	810bb10 <__i2b>
 810984c:	4606      	mov	r6, r0
 810984e:	2800      	cmp	r0, #0
 8109850:	f43f aeee 	beq.w	8109630 <_strtod_l+0x490>
 8109854:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8109856:	9904      	ldr	r1, [sp, #16]
 8109858:	2b00      	cmp	r3, #0
 810985a:	bfab      	itete	ge
 810985c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 810985e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8109860:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8109862:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8109866:	bfac      	ite	ge
 8109868:	eb03 0902 	addge.w	r9, r3, r2
 810986c:	1ad7      	sublt	r7, r2, r3
 810986e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8109870:	eba3 0801 	sub.w	r8, r3, r1
 8109874:	4490      	add	r8, r2
 8109876:	4ba1      	ldr	r3, [pc, #644]	; (8109afc <_strtod_l+0x95c>)
 8109878:	f108 38ff 	add.w	r8, r8, #4294967295
 810987c:	4598      	cmp	r8, r3
 810987e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8109882:	f280 80c7 	bge.w	8109a14 <_strtod_l+0x874>
 8109886:	eba3 0308 	sub.w	r3, r3, r8
 810988a:	2b1f      	cmp	r3, #31
 810988c:	eba2 0203 	sub.w	r2, r2, r3
 8109890:	f04f 0101 	mov.w	r1, #1
 8109894:	f300 80b1 	bgt.w	81099fa <_strtod_l+0x85a>
 8109898:	fa01 f303 	lsl.w	r3, r1, r3
 810989c:	930d      	str	r3, [sp, #52]	; 0x34
 810989e:	2300      	movs	r3, #0
 81098a0:	9308      	str	r3, [sp, #32]
 81098a2:	eb09 0802 	add.w	r8, r9, r2
 81098a6:	9b04      	ldr	r3, [sp, #16]
 81098a8:	45c1      	cmp	r9, r8
 81098aa:	4417      	add	r7, r2
 81098ac:	441f      	add	r7, r3
 81098ae:	464b      	mov	r3, r9
 81098b0:	bfa8      	it	ge
 81098b2:	4643      	movge	r3, r8
 81098b4:	42bb      	cmp	r3, r7
 81098b6:	bfa8      	it	ge
 81098b8:	463b      	movge	r3, r7
 81098ba:	2b00      	cmp	r3, #0
 81098bc:	bfc2      	ittt	gt
 81098be:	eba8 0803 	subgt.w	r8, r8, r3
 81098c2:	1aff      	subgt	r7, r7, r3
 81098c4:	eba9 0903 	subgt.w	r9, r9, r3
 81098c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81098ca:	2b00      	cmp	r3, #0
 81098cc:	dd17      	ble.n	81098fe <_strtod_l+0x75e>
 81098ce:	4631      	mov	r1, r6
 81098d0:	461a      	mov	r2, r3
 81098d2:	4620      	mov	r0, r4
 81098d4:	f002 f9dc 	bl	810bc90 <__pow5mult>
 81098d8:	4606      	mov	r6, r0
 81098da:	2800      	cmp	r0, #0
 81098dc:	f43f aea8 	beq.w	8109630 <_strtod_l+0x490>
 81098e0:	4601      	mov	r1, r0
 81098e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 81098e4:	4620      	mov	r0, r4
 81098e6:	f002 f929 	bl	810bb3c <__multiply>
 81098ea:	900b      	str	r0, [sp, #44]	; 0x2c
 81098ec:	2800      	cmp	r0, #0
 81098ee:	f43f ae9f 	beq.w	8109630 <_strtod_l+0x490>
 81098f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 81098f4:	4620      	mov	r0, r4
 81098f6:	f002 f809 	bl	810b90c <_Bfree>
 81098fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81098fc:	9318      	str	r3, [sp, #96]	; 0x60
 81098fe:	f1b8 0f00 	cmp.w	r8, #0
 8109902:	f300 808c 	bgt.w	8109a1e <_strtod_l+0x87e>
 8109906:	9b06      	ldr	r3, [sp, #24]
 8109908:	2b00      	cmp	r3, #0
 810990a:	dd08      	ble.n	810991e <_strtod_l+0x77e>
 810990c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810990e:	9905      	ldr	r1, [sp, #20]
 8109910:	4620      	mov	r0, r4
 8109912:	f002 f9bd 	bl	810bc90 <__pow5mult>
 8109916:	9005      	str	r0, [sp, #20]
 8109918:	2800      	cmp	r0, #0
 810991a:	f43f ae89 	beq.w	8109630 <_strtod_l+0x490>
 810991e:	2f00      	cmp	r7, #0
 8109920:	dd08      	ble.n	8109934 <_strtod_l+0x794>
 8109922:	9905      	ldr	r1, [sp, #20]
 8109924:	463a      	mov	r2, r7
 8109926:	4620      	mov	r0, r4
 8109928:	f002 fa0c 	bl	810bd44 <__lshift>
 810992c:	9005      	str	r0, [sp, #20]
 810992e:	2800      	cmp	r0, #0
 8109930:	f43f ae7e 	beq.w	8109630 <_strtod_l+0x490>
 8109934:	f1b9 0f00 	cmp.w	r9, #0
 8109938:	dd08      	ble.n	810994c <_strtod_l+0x7ac>
 810993a:	4631      	mov	r1, r6
 810993c:	464a      	mov	r2, r9
 810993e:	4620      	mov	r0, r4
 8109940:	f002 fa00 	bl	810bd44 <__lshift>
 8109944:	4606      	mov	r6, r0
 8109946:	2800      	cmp	r0, #0
 8109948:	f43f ae72 	beq.w	8109630 <_strtod_l+0x490>
 810994c:	9a05      	ldr	r2, [sp, #20]
 810994e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109950:	4620      	mov	r0, r4
 8109952:	f002 fa83 	bl	810be5c <__mdiff>
 8109956:	4605      	mov	r5, r0
 8109958:	2800      	cmp	r0, #0
 810995a:	f43f ae69 	beq.w	8109630 <_strtod_l+0x490>
 810995e:	68c3      	ldr	r3, [r0, #12]
 8109960:	930b      	str	r3, [sp, #44]	; 0x2c
 8109962:	2300      	movs	r3, #0
 8109964:	60c3      	str	r3, [r0, #12]
 8109966:	4631      	mov	r1, r6
 8109968:	f002 fa5c 	bl	810be24 <__mcmp>
 810996c:	2800      	cmp	r0, #0
 810996e:	da60      	bge.n	8109a32 <_strtod_l+0x892>
 8109970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109972:	ea53 030a 	orrs.w	r3, r3, sl
 8109976:	f040 8082 	bne.w	8109a7e <_strtod_l+0x8de>
 810997a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810997e:	2b00      	cmp	r3, #0
 8109980:	d17d      	bne.n	8109a7e <_strtod_l+0x8de>
 8109982:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109986:	0d1b      	lsrs	r3, r3, #20
 8109988:	051b      	lsls	r3, r3, #20
 810998a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810998e:	d976      	bls.n	8109a7e <_strtod_l+0x8de>
 8109990:	696b      	ldr	r3, [r5, #20]
 8109992:	b913      	cbnz	r3, 810999a <_strtod_l+0x7fa>
 8109994:	692b      	ldr	r3, [r5, #16]
 8109996:	2b01      	cmp	r3, #1
 8109998:	dd71      	ble.n	8109a7e <_strtod_l+0x8de>
 810999a:	4629      	mov	r1, r5
 810999c:	2201      	movs	r2, #1
 810999e:	4620      	mov	r0, r4
 81099a0:	f002 f9d0 	bl	810bd44 <__lshift>
 81099a4:	4631      	mov	r1, r6
 81099a6:	4605      	mov	r5, r0
 81099a8:	f002 fa3c 	bl	810be24 <__mcmp>
 81099ac:	2800      	cmp	r0, #0
 81099ae:	dd66      	ble.n	8109a7e <_strtod_l+0x8de>
 81099b0:	9904      	ldr	r1, [sp, #16]
 81099b2:	4a53      	ldr	r2, [pc, #332]	; (8109b00 <_strtod_l+0x960>)
 81099b4:	465b      	mov	r3, fp
 81099b6:	2900      	cmp	r1, #0
 81099b8:	f000 8081 	beq.w	8109abe <_strtod_l+0x91e>
 81099bc:	ea02 010b 	and.w	r1, r2, fp
 81099c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 81099c4:	dc7b      	bgt.n	8109abe <_strtod_l+0x91e>
 81099c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 81099ca:	f77f aea9 	ble.w	8109720 <_strtod_l+0x580>
 81099ce:	4b4d      	ldr	r3, [pc, #308]	; (8109b04 <_strtod_l+0x964>)
 81099d0:	4650      	mov	r0, sl
 81099d2:	4659      	mov	r1, fp
 81099d4:	2200      	movs	r2, #0
 81099d6:	f7f6 fe97 	bl	8100708 <__aeabi_dmul>
 81099da:	460b      	mov	r3, r1
 81099dc:	4303      	orrs	r3, r0
 81099de:	bf08      	it	eq
 81099e0:	2322      	moveq	r3, #34	; 0x22
 81099e2:	4682      	mov	sl, r0
 81099e4:	468b      	mov	fp, r1
 81099e6:	bf08      	it	eq
 81099e8:	6023      	streq	r3, [r4, #0]
 81099ea:	e62b      	b.n	8109644 <_strtod_l+0x4a4>
 81099ec:	f04f 32ff 	mov.w	r2, #4294967295
 81099f0:	fa02 f303 	lsl.w	r3, r2, r3
 81099f4:	ea03 0a0a 	and.w	sl, r3, sl
 81099f8:	e6e3      	b.n	81097c2 <_strtod_l+0x622>
 81099fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 81099fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8109a02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8109a06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8109a0a:	fa01 f308 	lsl.w	r3, r1, r8
 8109a0e:	9308      	str	r3, [sp, #32]
 8109a10:	910d      	str	r1, [sp, #52]	; 0x34
 8109a12:	e746      	b.n	81098a2 <_strtod_l+0x702>
 8109a14:	2300      	movs	r3, #0
 8109a16:	9308      	str	r3, [sp, #32]
 8109a18:	2301      	movs	r3, #1
 8109a1a:	930d      	str	r3, [sp, #52]	; 0x34
 8109a1c:	e741      	b.n	81098a2 <_strtod_l+0x702>
 8109a1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109a20:	4642      	mov	r2, r8
 8109a22:	4620      	mov	r0, r4
 8109a24:	f002 f98e 	bl	810bd44 <__lshift>
 8109a28:	9018      	str	r0, [sp, #96]	; 0x60
 8109a2a:	2800      	cmp	r0, #0
 8109a2c:	f47f af6b 	bne.w	8109906 <_strtod_l+0x766>
 8109a30:	e5fe      	b.n	8109630 <_strtod_l+0x490>
 8109a32:	465f      	mov	r7, fp
 8109a34:	d16e      	bne.n	8109b14 <_strtod_l+0x974>
 8109a36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8109a38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109a3c:	b342      	cbz	r2, 8109a90 <_strtod_l+0x8f0>
 8109a3e:	4a32      	ldr	r2, [pc, #200]	; (8109b08 <_strtod_l+0x968>)
 8109a40:	4293      	cmp	r3, r2
 8109a42:	d128      	bne.n	8109a96 <_strtod_l+0x8f6>
 8109a44:	9b04      	ldr	r3, [sp, #16]
 8109a46:	4651      	mov	r1, sl
 8109a48:	b1eb      	cbz	r3, 8109a86 <_strtod_l+0x8e6>
 8109a4a:	4b2d      	ldr	r3, [pc, #180]	; (8109b00 <_strtod_l+0x960>)
 8109a4c:	403b      	ands	r3, r7
 8109a4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8109a52:	f04f 32ff 	mov.w	r2, #4294967295
 8109a56:	d819      	bhi.n	8109a8c <_strtod_l+0x8ec>
 8109a58:	0d1b      	lsrs	r3, r3, #20
 8109a5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8109a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8109a62:	4299      	cmp	r1, r3
 8109a64:	d117      	bne.n	8109a96 <_strtod_l+0x8f6>
 8109a66:	4b29      	ldr	r3, [pc, #164]	; (8109b0c <_strtod_l+0x96c>)
 8109a68:	429f      	cmp	r7, r3
 8109a6a:	d102      	bne.n	8109a72 <_strtod_l+0x8d2>
 8109a6c:	3101      	adds	r1, #1
 8109a6e:	f43f addf 	beq.w	8109630 <_strtod_l+0x490>
 8109a72:	4b23      	ldr	r3, [pc, #140]	; (8109b00 <_strtod_l+0x960>)
 8109a74:	403b      	ands	r3, r7
 8109a76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8109a7a:	f04f 0a00 	mov.w	sl, #0
 8109a7e:	9b04      	ldr	r3, [sp, #16]
 8109a80:	2b00      	cmp	r3, #0
 8109a82:	d1a4      	bne.n	81099ce <_strtod_l+0x82e>
 8109a84:	e5de      	b.n	8109644 <_strtod_l+0x4a4>
 8109a86:	f04f 33ff 	mov.w	r3, #4294967295
 8109a8a:	e7ea      	b.n	8109a62 <_strtod_l+0x8c2>
 8109a8c:	4613      	mov	r3, r2
 8109a8e:	e7e8      	b.n	8109a62 <_strtod_l+0x8c2>
 8109a90:	ea53 030a 	orrs.w	r3, r3, sl
 8109a94:	d08c      	beq.n	81099b0 <_strtod_l+0x810>
 8109a96:	9b08      	ldr	r3, [sp, #32]
 8109a98:	b1db      	cbz	r3, 8109ad2 <_strtod_l+0x932>
 8109a9a:	423b      	tst	r3, r7
 8109a9c:	d0ef      	beq.n	8109a7e <_strtod_l+0x8de>
 8109a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109aa0:	9a04      	ldr	r2, [sp, #16]
 8109aa2:	4650      	mov	r0, sl
 8109aa4:	4659      	mov	r1, fp
 8109aa6:	b1c3      	cbz	r3, 8109ada <_strtod_l+0x93a>
 8109aa8:	f7ff fb5e 	bl	8109168 <sulp>
 8109aac:	4602      	mov	r2, r0
 8109aae:	460b      	mov	r3, r1
 8109ab0:	ec51 0b18 	vmov	r0, r1, d8
 8109ab4:	f7f6 fc72 	bl	810039c <__adddf3>
 8109ab8:	4682      	mov	sl, r0
 8109aba:	468b      	mov	fp, r1
 8109abc:	e7df      	b.n	8109a7e <_strtod_l+0x8de>
 8109abe:	4013      	ands	r3, r2
 8109ac0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8109ac4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8109ac8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8109acc:	f04f 3aff 	mov.w	sl, #4294967295
 8109ad0:	e7d5      	b.n	8109a7e <_strtod_l+0x8de>
 8109ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109ad4:	ea13 0f0a 	tst.w	r3, sl
 8109ad8:	e7e0      	b.n	8109a9c <_strtod_l+0x8fc>
 8109ada:	f7ff fb45 	bl	8109168 <sulp>
 8109ade:	4602      	mov	r2, r0
 8109ae0:	460b      	mov	r3, r1
 8109ae2:	ec51 0b18 	vmov	r0, r1, d8
 8109ae6:	f7f6 fc57 	bl	8100398 <__aeabi_dsub>
 8109aea:	2200      	movs	r2, #0
 8109aec:	2300      	movs	r3, #0
 8109aee:	4682      	mov	sl, r0
 8109af0:	468b      	mov	fp, r1
 8109af2:	f7f7 f871 	bl	8100bd8 <__aeabi_dcmpeq>
 8109af6:	2800      	cmp	r0, #0
 8109af8:	d0c1      	beq.n	8109a7e <_strtod_l+0x8de>
 8109afa:	e611      	b.n	8109720 <_strtod_l+0x580>
 8109afc:	fffffc02 	.word	0xfffffc02
 8109b00:	7ff00000 	.word	0x7ff00000
 8109b04:	39500000 	.word	0x39500000
 8109b08:	000fffff 	.word	0x000fffff
 8109b0c:	7fefffff 	.word	0x7fefffff
 8109b10:	0810cfe8 	.word	0x0810cfe8
 8109b14:	4631      	mov	r1, r6
 8109b16:	4628      	mov	r0, r5
 8109b18:	f002 fb02 	bl	810c120 <__ratio>
 8109b1c:	ec59 8b10 	vmov	r8, r9, d0
 8109b20:	ee10 0a10 	vmov	r0, s0
 8109b24:	2200      	movs	r2, #0
 8109b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8109b2a:	4649      	mov	r1, r9
 8109b2c:	f7f7 f868 	bl	8100c00 <__aeabi_dcmple>
 8109b30:	2800      	cmp	r0, #0
 8109b32:	d07a      	beq.n	8109c2a <_strtod_l+0xa8a>
 8109b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109b36:	2b00      	cmp	r3, #0
 8109b38:	d04a      	beq.n	8109bd0 <_strtod_l+0xa30>
 8109b3a:	4b95      	ldr	r3, [pc, #596]	; (8109d90 <_strtod_l+0xbf0>)
 8109b3c:	2200      	movs	r2, #0
 8109b3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8109b42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8109d90 <_strtod_l+0xbf0>
 8109b46:	f04f 0800 	mov.w	r8, #0
 8109b4a:	4b92      	ldr	r3, [pc, #584]	; (8109d94 <_strtod_l+0xbf4>)
 8109b4c:	403b      	ands	r3, r7
 8109b4e:	930d      	str	r3, [sp, #52]	; 0x34
 8109b50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109b52:	4b91      	ldr	r3, [pc, #580]	; (8109d98 <_strtod_l+0xbf8>)
 8109b54:	429a      	cmp	r2, r3
 8109b56:	f040 80b0 	bne.w	8109cba <_strtod_l+0xb1a>
 8109b5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109b5e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8109b62:	ec4b ab10 	vmov	d0, sl, fp
 8109b66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8109b6a:	f002 fa01 	bl	810bf70 <__ulp>
 8109b6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109b72:	ec53 2b10 	vmov	r2, r3, d0
 8109b76:	f7f6 fdc7 	bl	8100708 <__aeabi_dmul>
 8109b7a:	4652      	mov	r2, sl
 8109b7c:	465b      	mov	r3, fp
 8109b7e:	f7f6 fc0d 	bl	810039c <__adddf3>
 8109b82:	460b      	mov	r3, r1
 8109b84:	4983      	ldr	r1, [pc, #524]	; (8109d94 <_strtod_l+0xbf4>)
 8109b86:	4a85      	ldr	r2, [pc, #532]	; (8109d9c <_strtod_l+0xbfc>)
 8109b88:	4019      	ands	r1, r3
 8109b8a:	4291      	cmp	r1, r2
 8109b8c:	4682      	mov	sl, r0
 8109b8e:	d960      	bls.n	8109c52 <_strtod_l+0xab2>
 8109b90:	ee18 3a90 	vmov	r3, s17
 8109b94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8109b98:	4293      	cmp	r3, r2
 8109b9a:	d104      	bne.n	8109ba6 <_strtod_l+0xa06>
 8109b9c:	ee18 3a10 	vmov	r3, s16
 8109ba0:	3301      	adds	r3, #1
 8109ba2:	f43f ad45 	beq.w	8109630 <_strtod_l+0x490>
 8109ba6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8109da8 <_strtod_l+0xc08>
 8109baa:	f04f 3aff 	mov.w	sl, #4294967295
 8109bae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8109bb0:	4620      	mov	r0, r4
 8109bb2:	f001 feab 	bl	810b90c <_Bfree>
 8109bb6:	9905      	ldr	r1, [sp, #20]
 8109bb8:	4620      	mov	r0, r4
 8109bba:	f001 fea7 	bl	810b90c <_Bfree>
 8109bbe:	4631      	mov	r1, r6
 8109bc0:	4620      	mov	r0, r4
 8109bc2:	f001 fea3 	bl	810b90c <_Bfree>
 8109bc6:	4629      	mov	r1, r5
 8109bc8:	4620      	mov	r0, r4
 8109bca:	f001 fe9f 	bl	810b90c <_Bfree>
 8109bce:	e61a      	b.n	8109806 <_strtod_l+0x666>
 8109bd0:	f1ba 0f00 	cmp.w	sl, #0
 8109bd4:	d11b      	bne.n	8109c0e <_strtod_l+0xa6e>
 8109bd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109bda:	b9f3      	cbnz	r3, 8109c1a <_strtod_l+0xa7a>
 8109bdc:	4b6c      	ldr	r3, [pc, #432]	; (8109d90 <_strtod_l+0xbf0>)
 8109bde:	2200      	movs	r2, #0
 8109be0:	4640      	mov	r0, r8
 8109be2:	4649      	mov	r1, r9
 8109be4:	f7f7 f802 	bl	8100bec <__aeabi_dcmplt>
 8109be8:	b9d0      	cbnz	r0, 8109c20 <_strtod_l+0xa80>
 8109bea:	4640      	mov	r0, r8
 8109bec:	4649      	mov	r1, r9
 8109bee:	4b6c      	ldr	r3, [pc, #432]	; (8109da0 <_strtod_l+0xc00>)
 8109bf0:	2200      	movs	r2, #0
 8109bf2:	f7f6 fd89 	bl	8100708 <__aeabi_dmul>
 8109bf6:	4680      	mov	r8, r0
 8109bf8:	4689      	mov	r9, r1
 8109bfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8109bfe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8109c02:	9315      	str	r3, [sp, #84]	; 0x54
 8109c04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8109c08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8109c0c:	e79d      	b.n	8109b4a <_strtod_l+0x9aa>
 8109c0e:	f1ba 0f01 	cmp.w	sl, #1
 8109c12:	d102      	bne.n	8109c1a <_strtod_l+0xa7a>
 8109c14:	2f00      	cmp	r7, #0
 8109c16:	f43f ad83 	beq.w	8109720 <_strtod_l+0x580>
 8109c1a:	4b62      	ldr	r3, [pc, #392]	; (8109da4 <_strtod_l+0xc04>)
 8109c1c:	2200      	movs	r2, #0
 8109c1e:	e78e      	b.n	8109b3e <_strtod_l+0x99e>
 8109c20:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8109da0 <_strtod_l+0xc00>
 8109c24:	f04f 0800 	mov.w	r8, #0
 8109c28:	e7e7      	b.n	8109bfa <_strtod_l+0xa5a>
 8109c2a:	4b5d      	ldr	r3, [pc, #372]	; (8109da0 <_strtod_l+0xc00>)
 8109c2c:	4640      	mov	r0, r8
 8109c2e:	4649      	mov	r1, r9
 8109c30:	2200      	movs	r2, #0
 8109c32:	f7f6 fd69 	bl	8100708 <__aeabi_dmul>
 8109c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109c38:	4680      	mov	r8, r0
 8109c3a:	4689      	mov	r9, r1
 8109c3c:	b933      	cbnz	r3, 8109c4c <_strtod_l+0xaac>
 8109c3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109c42:	900e      	str	r0, [sp, #56]	; 0x38
 8109c44:	930f      	str	r3, [sp, #60]	; 0x3c
 8109c46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8109c4a:	e7dd      	b.n	8109c08 <_strtod_l+0xa68>
 8109c4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8109c50:	e7f9      	b.n	8109c46 <_strtod_l+0xaa6>
 8109c52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8109c56:	9b04      	ldr	r3, [sp, #16]
 8109c58:	2b00      	cmp	r3, #0
 8109c5a:	d1a8      	bne.n	8109bae <_strtod_l+0xa0e>
 8109c5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109c60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109c62:	0d1b      	lsrs	r3, r3, #20
 8109c64:	051b      	lsls	r3, r3, #20
 8109c66:	429a      	cmp	r2, r3
 8109c68:	d1a1      	bne.n	8109bae <_strtod_l+0xa0e>
 8109c6a:	4640      	mov	r0, r8
 8109c6c:	4649      	mov	r1, r9
 8109c6e:	f7f7 f8ab 	bl	8100dc8 <__aeabi_d2lz>
 8109c72:	f7f6 fd1b 	bl	81006ac <__aeabi_l2d>
 8109c76:	4602      	mov	r2, r0
 8109c78:	460b      	mov	r3, r1
 8109c7a:	4640      	mov	r0, r8
 8109c7c:	4649      	mov	r1, r9
 8109c7e:	f7f6 fb8b 	bl	8100398 <__aeabi_dsub>
 8109c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8109c84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109c88:	ea43 030a 	orr.w	r3, r3, sl
 8109c8c:	4313      	orrs	r3, r2
 8109c8e:	4680      	mov	r8, r0
 8109c90:	4689      	mov	r9, r1
 8109c92:	d055      	beq.n	8109d40 <_strtod_l+0xba0>
 8109c94:	a336      	add	r3, pc, #216	; (adr r3, 8109d70 <_strtod_l+0xbd0>)
 8109c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109c9a:	f7f6 ffa7 	bl	8100bec <__aeabi_dcmplt>
 8109c9e:	2800      	cmp	r0, #0
 8109ca0:	f47f acd0 	bne.w	8109644 <_strtod_l+0x4a4>
 8109ca4:	a334      	add	r3, pc, #208	; (adr r3, 8109d78 <_strtod_l+0xbd8>)
 8109ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109caa:	4640      	mov	r0, r8
 8109cac:	4649      	mov	r1, r9
 8109cae:	f7f6 ffbb 	bl	8100c28 <__aeabi_dcmpgt>
 8109cb2:	2800      	cmp	r0, #0
 8109cb4:	f43f af7b 	beq.w	8109bae <_strtod_l+0xa0e>
 8109cb8:	e4c4      	b.n	8109644 <_strtod_l+0x4a4>
 8109cba:	9b04      	ldr	r3, [sp, #16]
 8109cbc:	b333      	cbz	r3, 8109d0c <_strtod_l+0xb6c>
 8109cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109cc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8109cc4:	d822      	bhi.n	8109d0c <_strtod_l+0xb6c>
 8109cc6:	a32e      	add	r3, pc, #184	; (adr r3, 8109d80 <_strtod_l+0xbe0>)
 8109cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109ccc:	4640      	mov	r0, r8
 8109cce:	4649      	mov	r1, r9
 8109cd0:	f7f6 ff96 	bl	8100c00 <__aeabi_dcmple>
 8109cd4:	b1a0      	cbz	r0, 8109d00 <_strtod_l+0xb60>
 8109cd6:	4649      	mov	r1, r9
 8109cd8:	4640      	mov	r0, r8
 8109cda:	f7f6 ffed 	bl	8100cb8 <__aeabi_d2uiz>
 8109cde:	2801      	cmp	r0, #1
 8109ce0:	bf38      	it	cc
 8109ce2:	2001      	movcc	r0, #1
 8109ce4:	f7f6 fc96 	bl	8100614 <__aeabi_ui2d>
 8109ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109cea:	4680      	mov	r8, r0
 8109cec:	4689      	mov	r9, r1
 8109cee:	bb23      	cbnz	r3, 8109d3a <_strtod_l+0xb9a>
 8109cf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109cf4:	9010      	str	r0, [sp, #64]	; 0x40
 8109cf6:	9311      	str	r3, [sp, #68]	; 0x44
 8109cf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8109cfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8109d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109d02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109d04:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8109d08:	1a9b      	subs	r3, r3, r2
 8109d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8109d0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109d10:	eeb0 0a48 	vmov.f32	s0, s16
 8109d14:	eef0 0a68 	vmov.f32	s1, s17
 8109d18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8109d1c:	f002 f928 	bl	810bf70 <__ulp>
 8109d20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109d24:	ec53 2b10 	vmov	r2, r3, d0
 8109d28:	f7f6 fcee 	bl	8100708 <__aeabi_dmul>
 8109d2c:	ec53 2b18 	vmov	r2, r3, d8
 8109d30:	f7f6 fb34 	bl	810039c <__adddf3>
 8109d34:	4682      	mov	sl, r0
 8109d36:	468b      	mov	fp, r1
 8109d38:	e78d      	b.n	8109c56 <_strtod_l+0xab6>
 8109d3a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8109d3e:	e7db      	b.n	8109cf8 <_strtod_l+0xb58>
 8109d40:	a311      	add	r3, pc, #68	; (adr r3, 8109d88 <_strtod_l+0xbe8>)
 8109d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d46:	f7f6 ff51 	bl	8100bec <__aeabi_dcmplt>
 8109d4a:	e7b2      	b.n	8109cb2 <_strtod_l+0xb12>
 8109d4c:	2300      	movs	r3, #0
 8109d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8109d50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8109d52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8109d54:	6013      	str	r3, [r2, #0]
 8109d56:	f7ff ba6b 	b.w	8109230 <_strtod_l+0x90>
 8109d5a:	2a65      	cmp	r2, #101	; 0x65
 8109d5c:	f43f ab5f 	beq.w	810941e <_strtod_l+0x27e>
 8109d60:	2a45      	cmp	r2, #69	; 0x45
 8109d62:	f43f ab5c 	beq.w	810941e <_strtod_l+0x27e>
 8109d66:	2301      	movs	r3, #1
 8109d68:	f7ff bb94 	b.w	8109494 <_strtod_l+0x2f4>
 8109d6c:	f3af 8000 	nop.w
 8109d70:	94a03595 	.word	0x94a03595
 8109d74:	3fdfffff 	.word	0x3fdfffff
 8109d78:	35afe535 	.word	0x35afe535
 8109d7c:	3fe00000 	.word	0x3fe00000
 8109d80:	ffc00000 	.word	0xffc00000
 8109d84:	41dfffff 	.word	0x41dfffff
 8109d88:	94a03595 	.word	0x94a03595
 8109d8c:	3fcfffff 	.word	0x3fcfffff
 8109d90:	3ff00000 	.word	0x3ff00000
 8109d94:	7ff00000 	.word	0x7ff00000
 8109d98:	7fe00000 	.word	0x7fe00000
 8109d9c:	7c9fffff 	.word	0x7c9fffff
 8109da0:	3fe00000 	.word	0x3fe00000
 8109da4:	bff00000 	.word	0xbff00000
 8109da8:	7fefffff 	.word	0x7fefffff

08109dac <_strtod_r>:
 8109dac:	4b01      	ldr	r3, [pc, #4]	; (8109db4 <_strtod_r+0x8>)
 8109dae:	f7ff b9f7 	b.w	81091a0 <_strtod_l>
 8109db2:	bf00      	nop
 8109db4:	10000088 	.word	0x10000088

08109db8 <_strtol_l.constprop.0>:
 8109db8:	2b01      	cmp	r3, #1
 8109dba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109dbe:	d001      	beq.n	8109dc4 <_strtol_l.constprop.0+0xc>
 8109dc0:	2b24      	cmp	r3, #36	; 0x24
 8109dc2:	d906      	bls.n	8109dd2 <_strtol_l.constprop.0+0x1a>
 8109dc4:	f7fe fa62 	bl	810828c <__errno>
 8109dc8:	2316      	movs	r3, #22
 8109dca:	6003      	str	r3, [r0, #0]
 8109dcc:	2000      	movs	r0, #0
 8109dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109dd2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8109eb8 <_strtol_l.constprop.0+0x100>
 8109dd6:	460d      	mov	r5, r1
 8109dd8:	462e      	mov	r6, r5
 8109dda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8109dde:	f814 700c 	ldrb.w	r7, [r4, ip]
 8109de2:	f017 0708 	ands.w	r7, r7, #8
 8109de6:	d1f7      	bne.n	8109dd8 <_strtol_l.constprop.0+0x20>
 8109de8:	2c2d      	cmp	r4, #45	; 0x2d
 8109dea:	d132      	bne.n	8109e52 <_strtol_l.constprop.0+0x9a>
 8109dec:	782c      	ldrb	r4, [r5, #0]
 8109dee:	2701      	movs	r7, #1
 8109df0:	1cb5      	adds	r5, r6, #2
 8109df2:	2b00      	cmp	r3, #0
 8109df4:	d05b      	beq.n	8109eae <_strtol_l.constprop.0+0xf6>
 8109df6:	2b10      	cmp	r3, #16
 8109df8:	d109      	bne.n	8109e0e <_strtol_l.constprop.0+0x56>
 8109dfa:	2c30      	cmp	r4, #48	; 0x30
 8109dfc:	d107      	bne.n	8109e0e <_strtol_l.constprop.0+0x56>
 8109dfe:	782c      	ldrb	r4, [r5, #0]
 8109e00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8109e04:	2c58      	cmp	r4, #88	; 0x58
 8109e06:	d14d      	bne.n	8109ea4 <_strtol_l.constprop.0+0xec>
 8109e08:	786c      	ldrb	r4, [r5, #1]
 8109e0a:	2310      	movs	r3, #16
 8109e0c:	3502      	adds	r5, #2
 8109e0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8109e12:	f108 38ff 	add.w	r8, r8, #4294967295
 8109e16:	f04f 0c00 	mov.w	ip, #0
 8109e1a:	fbb8 f9f3 	udiv	r9, r8, r3
 8109e1e:	4666      	mov	r6, ip
 8109e20:	fb03 8a19 	mls	sl, r3, r9, r8
 8109e24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8109e28:	f1be 0f09 	cmp.w	lr, #9
 8109e2c:	d816      	bhi.n	8109e5c <_strtol_l.constprop.0+0xa4>
 8109e2e:	4674      	mov	r4, lr
 8109e30:	42a3      	cmp	r3, r4
 8109e32:	dd24      	ble.n	8109e7e <_strtol_l.constprop.0+0xc6>
 8109e34:	f1bc 0f00 	cmp.w	ip, #0
 8109e38:	db1e      	blt.n	8109e78 <_strtol_l.constprop.0+0xc0>
 8109e3a:	45b1      	cmp	r9, r6
 8109e3c:	d31c      	bcc.n	8109e78 <_strtol_l.constprop.0+0xc0>
 8109e3e:	d101      	bne.n	8109e44 <_strtol_l.constprop.0+0x8c>
 8109e40:	45a2      	cmp	sl, r4
 8109e42:	db19      	blt.n	8109e78 <_strtol_l.constprop.0+0xc0>
 8109e44:	fb06 4603 	mla	r6, r6, r3, r4
 8109e48:	f04f 0c01 	mov.w	ip, #1
 8109e4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8109e50:	e7e8      	b.n	8109e24 <_strtol_l.constprop.0+0x6c>
 8109e52:	2c2b      	cmp	r4, #43	; 0x2b
 8109e54:	bf04      	itt	eq
 8109e56:	782c      	ldrbeq	r4, [r5, #0]
 8109e58:	1cb5      	addeq	r5, r6, #2
 8109e5a:	e7ca      	b.n	8109df2 <_strtol_l.constprop.0+0x3a>
 8109e5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8109e60:	f1be 0f19 	cmp.w	lr, #25
 8109e64:	d801      	bhi.n	8109e6a <_strtol_l.constprop.0+0xb2>
 8109e66:	3c37      	subs	r4, #55	; 0x37
 8109e68:	e7e2      	b.n	8109e30 <_strtol_l.constprop.0+0x78>
 8109e6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8109e6e:	f1be 0f19 	cmp.w	lr, #25
 8109e72:	d804      	bhi.n	8109e7e <_strtol_l.constprop.0+0xc6>
 8109e74:	3c57      	subs	r4, #87	; 0x57
 8109e76:	e7db      	b.n	8109e30 <_strtol_l.constprop.0+0x78>
 8109e78:	f04f 3cff 	mov.w	ip, #4294967295
 8109e7c:	e7e6      	b.n	8109e4c <_strtol_l.constprop.0+0x94>
 8109e7e:	f1bc 0f00 	cmp.w	ip, #0
 8109e82:	da05      	bge.n	8109e90 <_strtol_l.constprop.0+0xd8>
 8109e84:	2322      	movs	r3, #34	; 0x22
 8109e86:	6003      	str	r3, [r0, #0]
 8109e88:	4646      	mov	r6, r8
 8109e8a:	b942      	cbnz	r2, 8109e9e <_strtol_l.constprop.0+0xe6>
 8109e8c:	4630      	mov	r0, r6
 8109e8e:	e79e      	b.n	8109dce <_strtol_l.constprop.0+0x16>
 8109e90:	b107      	cbz	r7, 8109e94 <_strtol_l.constprop.0+0xdc>
 8109e92:	4276      	negs	r6, r6
 8109e94:	2a00      	cmp	r2, #0
 8109e96:	d0f9      	beq.n	8109e8c <_strtol_l.constprop.0+0xd4>
 8109e98:	f1bc 0f00 	cmp.w	ip, #0
 8109e9c:	d000      	beq.n	8109ea0 <_strtol_l.constprop.0+0xe8>
 8109e9e:	1e69      	subs	r1, r5, #1
 8109ea0:	6011      	str	r1, [r2, #0]
 8109ea2:	e7f3      	b.n	8109e8c <_strtol_l.constprop.0+0xd4>
 8109ea4:	2430      	movs	r4, #48	; 0x30
 8109ea6:	2b00      	cmp	r3, #0
 8109ea8:	d1b1      	bne.n	8109e0e <_strtol_l.constprop.0+0x56>
 8109eaa:	2308      	movs	r3, #8
 8109eac:	e7af      	b.n	8109e0e <_strtol_l.constprop.0+0x56>
 8109eae:	2c30      	cmp	r4, #48	; 0x30
 8109eb0:	d0a5      	beq.n	8109dfe <_strtol_l.constprop.0+0x46>
 8109eb2:	230a      	movs	r3, #10
 8109eb4:	e7ab      	b.n	8109e0e <_strtol_l.constprop.0+0x56>
 8109eb6:	bf00      	nop
 8109eb8:	0810d011 	.word	0x0810d011

08109ebc <_strtol_r>:
 8109ebc:	f7ff bf7c 	b.w	8109db8 <_strtol_l.constprop.0>

08109ec0 <__swbuf_r>:
 8109ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109ec2:	460e      	mov	r6, r1
 8109ec4:	4614      	mov	r4, r2
 8109ec6:	4605      	mov	r5, r0
 8109ec8:	b118      	cbz	r0, 8109ed2 <__swbuf_r+0x12>
 8109eca:	6983      	ldr	r3, [r0, #24]
 8109ecc:	b90b      	cbnz	r3, 8109ed2 <__swbuf_r+0x12>
 8109ece:	f001 f84b 	bl	810af68 <__sinit>
 8109ed2:	4b21      	ldr	r3, [pc, #132]	; (8109f58 <__swbuf_r+0x98>)
 8109ed4:	429c      	cmp	r4, r3
 8109ed6:	d12b      	bne.n	8109f30 <__swbuf_r+0x70>
 8109ed8:	686c      	ldr	r4, [r5, #4]
 8109eda:	69a3      	ldr	r3, [r4, #24]
 8109edc:	60a3      	str	r3, [r4, #8]
 8109ede:	89a3      	ldrh	r3, [r4, #12]
 8109ee0:	071a      	lsls	r2, r3, #28
 8109ee2:	d52f      	bpl.n	8109f44 <__swbuf_r+0x84>
 8109ee4:	6923      	ldr	r3, [r4, #16]
 8109ee6:	b36b      	cbz	r3, 8109f44 <__swbuf_r+0x84>
 8109ee8:	6923      	ldr	r3, [r4, #16]
 8109eea:	6820      	ldr	r0, [r4, #0]
 8109eec:	1ac0      	subs	r0, r0, r3
 8109eee:	6963      	ldr	r3, [r4, #20]
 8109ef0:	b2f6      	uxtb	r6, r6
 8109ef2:	4283      	cmp	r3, r0
 8109ef4:	4637      	mov	r7, r6
 8109ef6:	dc04      	bgt.n	8109f02 <__swbuf_r+0x42>
 8109ef8:	4621      	mov	r1, r4
 8109efa:	4628      	mov	r0, r5
 8109efc:	f000 ffa0 	bl	810ae40 <_fflush_r>
 8109f00:	bb30      	cbnz	r0, 8109f50 <__swbuf_r+0x90>
 8109f02:	68a3      	ldr	r3, [r4, #8]
 8109f04:	3b01      	subs	r3, #1
 8109f06:	60a3      	str	r3, [r4, #8]
 8109f08:	6823      	ldr	r3, [r4, #0]
 8109f0a:	1c5a      	adds	r2, r3, #1
 8109f0c:	6022      	str	r2, [r4, #0]
 8109f0e:	701e      	strb	r6, [r3, #0]
 8109f10:	6963      	ldr	r3, [r4, #20]
 8109f12:	3001      	adds	r0, #1
 8109f14:	4283      	cmp	r3, r0
 8109f16:	d004      	beq.n	8109f22 <__swbuf_r+0x62>
 8109f18:	89a3      	ldrh	r3, [r4, #12]
 8109f1a:	07db      	lsls	r3, r3, #31
 8109f1c:	d506      	bpl.n	8109f2c <__swbuf_r+0x6c>
 8109f1e:	2e0a      	cmp	r6, #10
 8109f20:	d104      	bne.n	8109f2c <__swbuf_r+0x6c>
 8109f22:	4621      	mov	r1, r4
 8109f24:	4628      	mov	r0, r5
 8109f26:	f000 ff8b 	bl	810ae40 <_fflush_r>
 8109f2a:	b988      	cbnz	r0, 8109f50 <__swbuf_r+0x90>
 8109f2c:	4638      	mov	r0, r7
 8109f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8109f30:	4b0a      	ldr	r3, [pc, #40]	; (8109f5c <__swbuf_r+0x9c>)
 8109f32:	429c      	cmp	r4, r3
 8109f34:	d101      	bne.n	8109f3a <__swbuf_r+0x7a>
 8109f36:	68ac      	ldr	r4, [r5, #8]
 8109f38:	e7cf      	b.n	8109eda <__swbuf_r+0x1a>
 8109f3a:	4b09      	ldr	r3, [pc, #36]	; (8109f60 <__swbuf_r+0xa0>)
 8109f3c:	429c      	cmp	r4, r3
 8109f3e:	bf08      	it	eq
 8109f40:	68ec      	ldreq	r4, [r5, #12]
 8109f42:	e7ca      	b.n	8109eda <__swbuf_r+0x1a>
 8109f44:	4621      	mov	r1, r4
 8109f46:	4628      	mov	r0, r5
 8109f48:	f000 f80c 	bl	8109f64 <__swsetup_r>
 8109f4c:	2800      	cmp	r0, #0
 8109f4e:	d0cb      	beq.n	8109ee8 <__swbuf_r+0x28>
 8109f50:	f04f 37ff 	mov.w	r7, #4294967295
 8109f54:	e7ea      	b.n	8109f2c <__swbuf_r+0x6c>
 8109f56:	bf00      	nop
 8109f58:	0810d1c4 	.word	0x0810d1c4
 8109f5c:	0810d1e4 	.word	0x0810d1e4
 8109f60:	0810d1a4 	.word	0x0810d1a4

08109f64 <__swsetup_r>:
 8109f64:	4b32      	ldr	r3, [pc, #200]	; (810a030 <__swsetup_r+0xcc>)
 8109f66:	b570      	push	{r4, r5, r6, lr}
 8109f68:	681d      	ldr	r5, [r3, #0]
 8109f6a:	4606      	mov	r6, r0
 8109f6c:	460c      	mov	r4, r1
 8109f6e:	b125      	cbz	r5, 8109f7a <__swsetup_r+0x16>
 8109f70:	69ab      	ldr	r3, [r5, #24]
 8109f72:	b913      	cbnz	r3, 8109f7a <__swsetup_r+0x16>
 8109f74:	4628      	mov	r0, r5
 8109f76:	f000 fff7 	bl	810af68 <__sinit>
 8109f7a:	4b2e      	ldr	r3, [pc, #184]	; (810a034 <__swsetup_r+0xd0>)
 8109f7c:	429c      	cmp	r4, r3
 8109f7e:	d10f      	bne.n	8109fa0 <__swsetup_r+0x3c>
 8109f80:	686c      	ldr	r4, [r5, #4]
 8109f82:	89a3      	ldrh	r3, [r4, #12]
 8109f84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8109f88:	0719      	lsls	r1, r3, #28
 8109f8a:	d42c      	bmi.n	8109fe6 <__swsetup_r+0x82>
 8109f8c:	06dd      	lsls	r5, r3, #27
 8109f8e:	d411      	bmi.n	8109fb4 <__swsetup_r+0x50>
 8109f90:	2309      	movs	r3, #9
 8109f92:	6033      	str	r3, [r6, #0]
 8109f94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8109f98:	81a3      	strh	r3, [r4, #12]
 8109f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8109f9e:	e03e      	b.n	810a01e <__swsetup_r+0xba>
 8109fa0:	4b25      	ldr	r3, [pc, #148]	; (810a038 <__swsetup_r+0xd4>)
 8109fa2:	429c      	cmp	r4, r3
 8109fa4:	d101      	bne.n	8109faa <__swsetup_r+0x46>
 8109fa6:	68ac      	ldr	r4, [r5, #8]
 8109fa8:	e7eb      	b.n	8109f82 <__swsetup_r+0x1e>
 8109faa:	4b24      	ldr	r3, [pc, #144]	; (810a03c <__swsetup_r+0xd8>)
 8109fac:	429c      	cmp	r4, r3
 8109fae:	bf08      	it	eq
 8109fb0:	68ec      	ldreq	r4, [r5, #12]
 8109fb2:	e7e6      	b.n	8109f82 <__swsetup_r+0x1e>
 8109fb4:	0758      	lsls	r0, r3, #29
 8109fb6:	d512      	bpl.n	8109fde <__swsetup_r+0x7a>
 8109fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8109fba:	b141      	cbz	r1, 8109fce <__swsetup_r+0x6a>
 8109fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8109fc0:	4299      	cmp	r1, r3
 8109fc2:	d002      	beq.n	8109fca <__swsetup_r+0x66>
 8109fc4:	4630      	mov	r0, r6
 8109fc6:	f002 f939 	bl	810c23c <_free_r>
 8109fca:	2300      	movs	r3, #0
 8109fcc:	6363      	str	r3, [r4, #52]	; 0x34
 8109fce:	89a3      	ldrh	r3, [r4, #12]
 8109fd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8109fd4:	81a3      	strh	r3, [r4, #12]
 8109fd6:	2300      	movs	r3, #0
 8109fd8:	6063      	str	r3, [r4, #4]
 8109fda:	6923      	ldr	r3, [r4, #16]
 8109fdc:	6023      	str	r3, [r4, #0]
 8109fde:	89a3      	ldrh	r3, [r4, #12]
 8109fe0:	f043 0308 	orr.w	r3, r3, #8
 8109fe4:	81a3      	strh	r3, [r4, #12]
 8109fe6:	6923      	ldr	r3, [r4, #16]
 8109fe8:	b94b      	cbnz	r3, 8109ffe <__swsetup_r+0x9a>
 8109fea:	89a3      	ldrh	r3, [r4, #12]
 8109fec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8109ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109ff4:	d003      	beq.n	8109ffe <__swsetup_r+0x9a>
 8109ff6:	4621      	mov	r1, r4
 8109ff8:	4630      	mov	r0, r6
 8109ffa:	f001 fbed 	bl	810b7d8 <__smakebuf_r>
 8109ffe:	89a0      	ldrh	r0, [r4, #12]
 810a000:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810a004:	f010 0301 	ands.w	r3, r0, #1
 810a008:	d00a      	beq.n	810a020 <__swsetup_r+0xbc>
 810a00a:	2300      	movs	r3, #0
 810a00c:	60a3      	str	r3, [r4, #8]
 810a00e:	6963      	ldr	r3, [r4, #20]
 810a010:	425b      	negs	r3, r3
 810a012:	61a3      	str	r3, [r4, #24]
 810a014:	6923      	ldr	r3, [r4, #16]
 810a016:	b943      	cbnz	r3, 810a02a <__swsetup_r+0xc6>
 810a018:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810a01c:	d1ba      	bne.n	8109f94 <__swsetup_r+0x30>
 810a01e:	bd70      	pop	{r4, r5, r6, pc}
 810a020:	0781      	lsls	r1, r0, #30
 810a022:	bf58      	it	pl
 810a024:	6963      	ldrpl	r3, [r4, #20]
 810a026:	60a3      	str	r3, [r4, #8]
 810a028:	e7f4      	b.n	810a014 <__swsetup_r+0xb0>
 810a02a:	2000      	movs	r0, #0
 810a02c:	e7f7      	b.n	810a01e <__swsetup_r+0xba>
 810a02e:	bf00      	nop
 810a030:	10000020 	.word	0x10000020
 810a034:	0810d1c4 	.word	0x0810d1c4
 810a038:	0810d1e4 	.word	0x0810d1e4
 810a03c:	0810d1a4 	.word	0x0810d1a4

0810a040 <quorem>:
 810a040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a044:	6903      	ldr	r3, [r0, #16]
 810a046:	690c      	ldr	r4, [r1, #16]
 810a048:	42a3      	cmp	r3, r4
 810a04a:	4607      	mov	r7, r0
 810a04c:	f2c0 8081 	blt.w	810a152 <quorem+0x112>
 810a050:	3c01      	subs	r4, #1
 810a052:	f101 0814 	add.w	r8, r1, #20
 810a056:	f100 0514 	add.w	r5, r0, #20
 810a05a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810a05e:	9301      	str	r3, [sp, #4]
 810a060:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810a064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810a068:	3301      	adds	r3, #1
 810a06a:	429a      	cmp	r2, r3
 810a06c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810a070:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810a074:	fbb2 f6f3 	udiv	r6, r2, r3
 810a078:	d331      	bcc.n	810a0de <quorem+0x9e>
 810a07a:	f04f 0e00 	mov.w	lr, #0
 810a07e:	4640      	mov	r0, r8
 810a080:	46ac      	mov	ip, r5
 810a082:	46f2      	mov	sl, lr
 810a084:	f850 2b04 	ldr.w	r2, [r0], #4
 810a088:	b293      	uxth	r3, r2
 810a08a:	fb06 e303 	mla	r3, r6, r3, lr
 810a08e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810a092:	b29b      	uxth	r3, r3
 810a094:	ebaa 0303 	sub.w	r3, sl, r3
 810a098:	f8dc a000 	ldr.w	sl, [ip]
 810a09c:	0c12      	lsrs	r2, r2, #16
 810a09e:	fa13 f38a 	uxtah	r3, r3, sl
 810a0a2:	fb06 e202 	mla	r2, r6, r2, lr
 810a0a6:	9300      	str	r3, [sp, #0]
 810a0a8:	9b00      	ldr	r3, [sp, #0]
 810a0aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810a0ae:	b292      	uxth	r2, r2
 810a0b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810a0b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810a0b8:	f8bd 3000 	ldrh.w	r3, [sp]
 810a0bc:	4581      	cmp	r9, r0
 810a0be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810a0c2:	f84c 3b04 	str.w	r3, [ip], #4
 810a0c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810a0ca:	d2db      	bcs.n	810a084 <quorem+0x44>
 810a0cc:	f855 300b 	ldr.w	r3, [r5, fp]
 810a0d0:	b92b      	cbnz	r3, 810a0de <quorem+0x9e>
 810a0d2:	9b01      	ldr	r3, [sp, #4]
 810a0d4:	3b04      	subs	r3, #4
 810a0d6:	429d      	cmp	r5, r3
 810a0d8:	461a      	mov	r2, r3
 810a0da:	d32e      	bcc.n	810a13a <quorem+0xfa>
 810a0dc:	613c      	str	r4, [r7, #16]
 810a0de:	4638      	mov	r0, r7
 810a0e0:	f001 fea0 	bl	810be24 <__mcmp>
 810a0e4:	2800      	cmp	r0, #0
 810a0e6:	db24      	blt.n	810a132 <quorem+0xf2>
 810a0e8:	3601      	adds	r6, #1
 810a0ea:	4628      	mov	r0, r5
 810a0ec:	f04f 0c00 	mov.w	ip, #0
 810a0f0:	f858 2b04 	ldr.w	r2, [r8], #4
 810a0f4:	f8d0 e000 	ldr.w	lr, [r0]
 810a0f8:	b293      	uxth	r3, r2
 810a0fa:	ebac 0303 	sub.w	r3, ip, r3
 810a0fe:	0c12      	lsrs	r2, r2, #16
 810a100:	fa13 f38e 	uxtah	r3, r3, lr
 810a104:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810a108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810a10c:	b29b      	uxth	r3, r3
 810a10e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810a112:	45c1      	cmp	r9, r8
 810a114:	f840 3b04 	str.w	r3, [r0], #4
 810a118:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810a11c:	d2e8      	bcs.n	810a0f0 <quorem+0xb0>
 810a11e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810a122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810a126:	b922      	cbnz	r2, 810a132 <quorem+0xf2>
 810a128:	3b04      	subs	r3, #4
 810a12a:	429d      	cmp	r5, r3
 810a12c:	461a      	mov	r2, r3
 810a12e:	d30a      	bcc.n	810a146 <quorem+0x106>
 810a130:	613c      	str	r4, [r7, #16]
 810a132:	4630      	mov	r0, r6
 810a134:	b003      	add	sp, #12
 810a136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a13a:	6812      	ldr	r2, [r2, #0]
 810a13c:	3b04      	subs	r3, #4
 810a13e:	2a00      	cmp	r2, #0
 810a140:	d1cc      	bne.n	810a0dc <quorem+0x9c>
 810a142:	3c01      	subs	r4, #1
 810a144:	e7c7      	b.n	810a0d6 <quorem+0x96>
 810a146:	6812      	ldr	r2, [r2, #0]
 810a148:	3b04      	subs	r3, #4
 810a14a:	2a00      	cmp	r2, #0
 810a14c:	d1f0      	bne.n	810a130 <quorem+0xf0>
 810a14e:	3c01      	subs	r4, #1
 810a150:	e7eb      	b.n	810a12a <quorem+0xea>
 810a152:	2000      	movs	r0, #0
 810a154:	e7ee      	b.n	810a134 <quorem+0xf4>
	...

0810a158 <_dtoa_r>:
 810a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a15c:	ed2d 8b04 	vpush	{d8-d9}
 810a160:	ec57 6b10 	vmov	r6, r7, d0
 810a164:	b093      	sub	sp, #76	; 0x4c
 810a166:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810a168:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810a16c:	9106      	str	r1, [sp, #24]
 810a16e:	ee10 aa10 	vmov	sl, s0
 810a172:	4604      	mov	r4, r0
 810a174:	9209      	str	r2, [sp, #36]	; 0x24
 810a176:	930c      	str	r3, [sp, #48]	; 0x30
 810a178:	46bb      	mov	fp, r7
 810a17a:	b975      	cbnz	r5, 810a19a <_dtoa_r+0x42>
 810a17c:	2010      	movs	r0, #16
 810a17e:	f001 fb6b 	bl	810b858 <malloc>
 810a182:	4602      	mov	r2, r0
 810a184:	6260      	str	r0, [r4, #36]	; 0x24
 810a186:	b920      	cbnz	r0, 810a192 <_dtoa_r+0x3a>
 810a188:	4ba7      	ldr	r3, [pc, #668]	; (810a428 <_dtoa_r+0x2d0>)
 810a18a:	21ea      	movs	r1, #234	; 0xea
 810a18c:	48a7      	ldr	r0, [pc, #668]	; (810a42c <_dtoa_r+0x2d4>)
 810a18e:	f002 fc79 	bl	810ca84 <__assert_func>
 810a192:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810a196:	6005      	str	r5, [r0, #0]
 810a198:	60c5      	str	r5, [r0, #12]
 810a19a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a19c:	6819      	ldr	r1, [r3, #0]
 810a19e:	b151      	cbz	r1, 810a1b6 <_dtoa_r+0x5e>
 810a1a0:	685a      	ldr	r2, [r3, #4]
 810a1a2:	604a      	str	r2, [r1, #4]
 810a1a4:	2301      	movs	r3, #1
 810a1a6:	4093      	lsls	r3, r2
 810a1a8:	608b      	str	r3, [r1, #8]
 810a1aa:	4620      	mov	r0, r4
 810a1ac:	f001 fbae 	bl	810b90c <_Bfree>
 810a1b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a1b2:	2200      	movs	r2, #0
 810a1b4:	601a      	str	r2, [r3, #0]
 810a1b6:	1e3b      	subs	r3, r7, #0
 810a1b8:	bfaa      	itet	ge
 810a1ba:	2300      	movge	r3, #0
 810a1bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 810a1c0:	f8c8 3000 	strge.w	r3, [r8]
 810a1c4:	4b9a      	ldr	r3, [pc, #616]	; (810a430 <_dtoa_r+0x2d8>)
 810a1c6:	bfbc      	itt	lt
 810a1c8:	2201      	movlt	r2, #1
 810a1ca:	f8c8 2000 	strlt.w	r2, [r8]
 810a1ce:	ea33 030b 	bics.w	r3, r3, fp
 810a1d2:	d11b      	bne.n	810a20c <_dtoa_r+0xb4>
 810a1d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810a1d6:	f242 730f 	movw	r3, #9999	; 0x270f
 810a1da:	6013      	str	r3, [r2, #0]
 810a1dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810a1e0:	4333      	orrs	r3, r6
 810a1e2:	f000 8592 	beq.w	810ad0a <_dtoa_r+0xbb2>
 810a1e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a1e8:	b963      	cbnz	r3, 810a204 <_dtoa_r+0xac>
 810a1ea:	4b92      	ldr	r3, [pc, #584]	; (810a434 <_dtoa_r+0x2dc>)
 810a1ec:	e022      	b.n	810a234 <_dtoa_r+0xdc>
 810a1ee:	4b92      	ldr	r3, [pc, #584]	; (810a438 <_dtoa_r+0x2e0>)
 810a1f0:	9301      	str	r3, [sp, #4]
 810a1f2:	3308      	adds	r3, #8
 810a1f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810a1f6:	6013      	str	r3, [r2, #0]
 810a1f8:	9801      	ldr	r0, [sp, #4]
 810a1fa:	b013      	add	sp, #76	; 0x4c
 810a1fc:	ecbd 8b04 	vpop	{d8-d9}
 810a200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a204:	4b8b      	ldr	r3, [pc, #556]	; (810a434 <_dtoa_r+0x2dc>)
 810a206:	9301      	str	r3, [sp, #4]
 810a208:	3303      	adds	r3, #3
 810a20a:	e7f3      	b.n	810a1f4 <_dtoa_r+0x9c>
 810a20c:	2200      	movs	r2, #0
 810a20e:	2300      	movs	r3, #0
 810a210:	4650      	mov	r0, sl
 810a212:	4659      	mov	r1, fp
 810a214:	f7f6 fce0 	bl	8100bd8 <__aeabi_dcmpeq>
 810a218:	ec4b ab19 	vmov	d9, sl, fp
 810a21c:	4680      	mov	r8, r0
 810a21e:	b158      	cbz	r0, 810a238 <_dtoa_r+0xe0>
 810a220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810a222:	2301      	movs	r3, #1
 810a224:	6013      	str	r3, [r2, #0]
 810a226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a228:	2b00      	cmp	r3, #0
 810a22a:	f000 856b 	beq.w	810ad04 <_dtoa_r+0xbac>
 810a22e:	4883      	ldr	r0, [pc, #524]	; (810a43c <_dtoa_r+0x2e4>)
 810a230:	6018      	str	r0, [r3, #0]
 810a232:	1e43      	subs	r3, r0, #1
 810a234:	9301      	str	r3, [sp, #4]
 810a236:	e7df      	b.n	810a1f8 <_dtoa_r+0xa0>
 810a238:	ec4b ab10 	vmov	d0, sl, fp
 810a23c:	aa10      	add	r2, sp, #64	; 0x40
 810a23e:	a911      	add	r1, sp, #68	; 0x44
 810a240:	4620      	mov	r0, r4
 810a242:	f001 ff11 	bl	810c068 <__d2b>
 810a246:	f3cb 550a 	ubfx	r5, fp, #20, #11
 810a24a:	ee08 0a10 	vmov	s16, r0
 810a24e:	2d00      	cmp	r5, #0
 810a250:	f000 8084 	beq.w	810a35c <_dtoa_r+0x204>
 810a254:	ee19 3a90 	vmov	r3, s19
 810a258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810a25c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810a260:	4656      	mov	r6, sl
 810a262:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810a266:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810a26a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 810a26e:	4b74      	ldr	r3, [pc, #464]	; (810a440 <_dtoa_r+0x2e8>)
 810a270:	2200      	movs	r2, #0
 810a272:	4630      	mov	r0, r6
 810a274:	4639      	mov	r1, r7
 810a276:	f7f6 f88f 	bl	8100398 <__aeabi_dsub>
 810a27a:	a365      	add	r3, pc, #404	; (adr r3, 810a410 <_dtoa_r+0x2b8>)
 810a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a280:	f7f6 fa42 	bl	8100708 <__aeabi_dmul>
 810a284:	a364      	add	r3, pc, #400	; (adr r3, 810a418 <_dtoa_r+0x2c0>)
 810a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a28a:	f7f6 f887 	bl	810039c <__adddf3>
 810a28e:	4606      	mov	r6, r0
 810a290:	4628      	mov	r0, r5
 810a292:	460f      	mov	r7, r1
 810a294:	f7f6 f9ce 	bl	8100634 <__aeabi_i2d>
 810a298:	a361      	add	r3, pc, #388	; (adr r3, 810a420 <_dtoa_r+0x2c8>)
 810a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a29e:	f7f6 fa33 	bl	8100708 <__aeabi_dmul>
 810a2a2:	4602      	mov	r2, r0
 810a2a4:	460b      	mov	r3, r1
 810a2a6:	4630      	mov	r0, r6
 810a2a8:	4639      	mov	r1, r7
 810a2aa:	f7f6 f877 	bl	810039c <__adddf3>
 810a2ae:	4606      	mov	r6, r0
 810a2b0:	460f      	mov	r7, r1
 810a2b2:	f7f6 fcd9 	bl	8100c68 <__aeabi_d2iz>
 810a2b6:	2200      	movs	r2, #0
 810a2b8:	9000      	str	r0, [sp, #0]
 810a2ba:	2300      	movs	r3, #0
 810a2bc:	4630      	mov	r0, r6
 810a2be:	4639      	mov	r1, r7
 810a2c0:	f7f6 fc94 	bl	8100bec <__aeabi_dcmplt>
 810a2c4:	b150      	cbz	r0, 810a2dc <_dtoa_r+0x184>
 810a2c6:	9800      	ldr	r0, [sp, #0]
 810a2c8:	f7f6 f9b4 	bl	8100634 <__aeabi_i2d>
 810a2cc:	4632      	mov	r2, r6
 810a2ce:	463b      	mov	r3, r7
 810a2d0:	f7f6 fc82 	bl	8100bd8 <__aeabi_dcmpeq>
 810a2d4:	b910      	cbnz	r0, 810a2dc <_dtoa_r+0x184>
 810a2d6:	9b00      	ldr	r3, [sp, #0]
 810a2d8:	3b01      	subs	r3, #1
 810a2da:	9300      	str	r3, [sp, #0]
 810a2dc:	9b00      	ldr	r3, [sp, #0]
 810a2de:	2b16      	cmp	r3, #22
 810a2e0:	d85a      	bhi.n	810a398 <_dtoa_r+0x240>
 810a2e2:	9a00      	ldr	r2, [sp, #0]
 810a2e4:	4b57      	ldr	r3, [pc, #348]	; (810a444 <_dtoa_r+0x2ec>)
 810a2e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a2ee:	ec51 0b19 	vmov	r0, r1, d9
 810a2f2:	f7f6 fc7b 	bl	8100bec <__aeabi_dcmplt>
 810a2f6:	2800      	cmp	r0, #0
 810a2f8:	d050      	beq.n	810a39c <_dtoa_r+0x244>
 810a2fa:	9b00      	ldr	r3, [sp, #0]
 810a2fc:	3b01      	subs	r3, #1
 810a2fe:	9300      	str	r3, [sp, #0]
 810a300:	2300      	movs	r3, #0
 810a302:	930b      	str	r3, [sp, #44]	; 0x2c
 810a304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810a306:	1b5d      	subs	r5, r3, r5
 810a308:	1e6b      	subs	r3, r5, #1
 810a30a:	9305      	str	r3, [sp, #20]
 810a30c:	bf45      	ittet	mi
 810a30e:	f1c5 0301 	rsbmi	r3, r5, #1
 810a312:	9304      	strmi	r3, [sp, #16]
 810a314:	2300      	movpl	r3, #0
 810a316:	2300      	movmi	r3, #0
 810a318:	bf4c      	ite	mi
 810a31a:	9305      	strmi	r3, [sp, #20]
 810a31c:	9304      	strpl	r3, [sp, #16]
 810a31e:	9b00      	ldr	r3, [sp, #0]
 810a320:	2b00      	cmp	r3, #0
 810a322:	db3d      	blt.n	810a3a0 <_dtoa_r+0x248>
 810a324:	9b05      	ldr	r3, [sp, #20]
 810a326:	9a00      	ldr	r2, [sp, #0]
 810a328:	920a      	str	r2, [sp, #40]	; 0x28
 810a32a:	4413      	add	r3, r2
 810a32c:	9305      	str	r3, [sp, #20]
 810a32e:	2300      	movs	r3, #0
 810a330:	9307      	str	r3, [sp, #28]
 810a332:	9b06      	ldr	r3, [sp, #24]
 810a334:	2b09      	cmp	r3, #9
 810a336:	f200 8089 	bhi.w	810a44c <_dtoa_r+0x2f4>
 810a33a:	2b05      	cmp	r3, #5
 810a33c:	bfc4      	itt	gt
 810a33e:	3b04      	subgt	r3, #4
 810a340:	9306      	strgt	r3, [sp, #24]
 810a342:	9b06      	ldr	r3, [sp, #24]
 810a344:	f1a3 0302 	sub.w	r3, r3, #2
 810a348:	bfcc      	ite	gt
 810a34a:	2500      	movgt	r5, #0
 810a34c:	2501      	movle	r5, #1
 810a34e:	2b03      	cmp	r3, #3
 810a350:	f200 8087 	bhi.w	810a462 <_dtoa_r+0x30a>
 810a354:	e8df f003 	tbb	[pc, r3]
 810a358:	59383a2d 	.word	0x59383a2d
 810a35c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810a360:	441d      	add	r5, r3
 810a362:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810a366:	2b20      	cmp	r3, #32
 810a368:	bfc1      	itttt	gt
 810a36a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810a36e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810a372:	fa0b f303 	lslgt.w	r3, fp, r3
 810a376:	fa26 f000 	lsrgt.w	r0, r6, r0
 810a37a:	bfda      	itte	le
 810a37c:	f1c3 0320 	rsble	r3, r3, #32
 810a380:	fa06 f003 	lslle.w	r0, r6, r3
 810a384:	4318      	orrgt	r0, r3
 810a386:	f7f6 f945 	bl	8100614 <__aeabi_ui2d>
 810a38a:	2301      	movs	r3, #1
 810a38c:	4606      	mov	r6, r0
 810a38e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810a392:	3d01      	subs	r5, #1
 810a394:	930e      	str	r3, [sp, #56]	; 0x38
 810a396:	e76a      	b.n	810a26e <_dtoa_r+0x116>
 810a398:	2301      	movs	r3, #1
 810a39a:	e7b2      	b.n	810a302 <_dtoa_r+0x1aa>
 810a39c:	900b      	str	r0, [sp, #44]	; 0x2c
 810a39e:	e7b1      	b.n	810a304 <_dtoa_r+0x1ac>
 810a3a0:	9b04      	ldr	r3, [sp, #16]
 810a3a2:	9a00      	ldr	r2, [sp, #0]
 810a3a4:	1a9b      	subs	r3, r3, r2
 810a3a6:	9304      	str	r3, [sp, #16]
 810a3a8:	4253      	negs	r3, r2
 810a3aa:	9307      	str	r3, [sp, #28]
 810a3ac:	2300      	movs	r3, #0
 810a3ae:	930a      	str	r3, [sp, #40]	; 0x28
 810a3b0:	e7bf      	b.n	810a332 <_dtoa_r+0x1da>
 810a3b2:	2300      	movs	r3, #0
 810a3b4:	9308      	str	r3, [sp, #32]
 810a3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a3b8:	2b00      	cmp	r3, #0
 810a3ba:	dc55      	bgt.n	810a468 <_dtoa_r+0x310>
 810a3bc:	2301      	movs	r3, #1
 810a3be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810a3c2:	461a      	mov	r2, r3
 810a3c4:	9209      	str	r2, [sp, #36]	; 0x24
 810a3c6:	e00c      	b.n	810a3e2 <_dtoa_r+0x28a>
 810a3c8:	2301      	movs	r3, #1
 810a3ca:	e7f3      	b.n	810a3b4 <_dtoa_r+0x25c>
 810a3cc:	2300      	movs	r3, #0
 810a3ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a3d0:	9308      	str	r3, [sp, #32]
 810a3d2:	9b00      	ldr	r3, [sp, #0]
 810a3d4:	4413      	add	r3, r2
 810a3d6:	9302      	str	r3, [sp, #8]
 810a3d8:	3301      	adds	r3, #1
 810a3da:	2b01      	cmp	r3, #1
 810a3dc:	9303      	str	r3, [sp, #12]
 810a3de:	bfb8      	it	lt
 810a3e0:	2301      	movlt	r3, #1
 810a3e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810a3e4:	2200      	movs	r2, #0
 810a3e6:	6042      	str	r2, [r0, #4]
 810a3e8:	2204      	movs	r2, #4
 810a3ea:	f102 0614 	add.w	r6, r2, #20
 810a3ee:	429e      	cmp	r6, r3
 810a3f0:	6841      	ldr	r1, [r0, #4]
 810a3f2:	d93d      	bls.n	810a470 <_dtoa_r+0x318>
 810a3f4:	4620      	mov	r0, r4
 810a3f6:	f001 fa49 	bl	810b88c <_Balloc>
 810a3fa:	9001      	str	r0, [sp, #4]
 810a3fc:	2800      	cmp	r0, #0
 810a3fe:	d13b      	bne.n	810a478 <_dtoa_r+0x320>
 810a400:	4b11      	ldr	r3, [pc, #68]	; (810a448 <_dtoa_r+0x2f0>)
 810a402:	4602      	mov	r2, r0
 810a404:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810a408:	e6c0      	b.n	810a18c <_dtoa_r+0x34>
 810a40a:	2301      	movs	r3, #1
 810a40c:	e7df      	b.n	810a3ce <_dtoa_r+0x276>
 810a40e:	bf00      	nop
 810a410:	636f4361 	.word	0x636f4361
 810a414:	3fd287a7 	.word	0x3fd287a7
 810a418:	8b60c8b3 	.word	0x8b60c8b3
 810a41c:	3fc68a28 	.word	0x3fc68a28
 810a420:	509f79fb 	.word	0x509f79fb
 810a424:	3fd34413 	.word	0x3fd34413
 810a428:	0810d11e 	.word	0x0810d11e
 810a42c:	0810d135 	.word	0x0810d135
 810a430:	7ff00000 	.word	0x7ff00000
 810a434:	0810d11a 	.word	0x0810d11a
 810a438:	0810d111 	.word	0x0810d111
 810a43c:	0810cf95 	.word	0x0810cf95
 810a440:	3ff80000 	.word	0x3ff80000
 810a444:	0810d308 	.word	0x0810d308
 810a448:	0810d190 	.word	0x0810d190
 810a44c:	2501      	movs	r5, #1
 810a44e:	2300      	movs	r3, #0
 810a450:	9306      	str	r3, [sp, #24]
 810a452:	9508      	str	r5, [sp, #32]
 810a454:	f04f 33ff 	mov.w	r3, #4294967295
 810a458:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810a45c:	2200      	movs	r2, #0
 810a45e:	2312      	movs	r3, #18
 810a460:	e7b0      	b.n	810a3c4 <_dtoa_r+0x26c>
 810a462:	2301      	movs	r3, #1
 810a464:	9308      	str	r3, [sp, #32]
 810a466:	e7f5      	b.n	810a454 <_dtoa_r+0x2fc>
 810a468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a46a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810a46e:	e7b8      	b.n	810a3e2 <_dtoa_r+0x28a>
 810a470:	3101      	adds	r1, #1
 810a472:	6041      	str	r1, [r0, #4]
 810a474:	0052      	lsls	r2, r2, #1
 810a476:	e7b8      	b.n	810a3ea <_dtoa_r+0x292>
 810a478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a47a:	9a01      	ldr	r2, [sp, #4]
 810a47c:	601a      	str	r2, [r3, #0]
 810a47e:	9b03      	ldr	r3, [sp, #12]
 810a480:	2b0e      	cmp	r3, #14
 810a482:	f200 809d 	bhi.w	810a5c0 <_dtoa_r+0x468>
 810a486:	2d00      	cmp	r5, #0
 810a488:	f000 809a 	beq.w	810a5c0 <_dtoa_r+0x468>
 810a48c:	9b00      	ldr	r3, [sp, #0]
 810a48e:	2b00      	cmp	r3, #0
 810a490:	dd32      	ble.n	810a4f8 <_dtoa_r+0x3a0>
 810a492:	4ab7      	ldr	r2, [pc, #732]	; (810a770 <_dtoa_r+0x618>)
 810a494:	f003 030f 	and.w	r3, r3, #15
 810a498:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810a49c:	e9d3 8900 	ldrd	r8, r9, [r3]
 810a4a0:	9b00      	ldr	r3, [sp, #0]
 810a4a2:	05d8      	lsls	r0, r3, #23
 810a4a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 810a4a8:	d516      	bpl.n	810a4d8 <_dtoa_r+0x380>
 810a4aa:	4bb2      	ldr	r3, [pc, #712]	; (810a774 <_dtoa_r+0x61c>)
 810a4ac:	ec51 0b19 	vmov	r0, r1, d9
 810a4b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810a4b4:	f7f6 fa52 	bl	810095c <__aeabi_ddiv>
 810a4b8:	f007 070f 	and.w	r7, r7, #15
 810a4bc:	4682      	mov	sl, r0
 810a4be:	468b      	mov	fp, r1
 810a4c0:	2503      	movs	r5, #3
 810a4c2:	4eac      	ldr	r6, [pc, #688]	; (810a774 <_dtoa_r+0x61c>)
 810a4c4:	b957      	cbnz	r7, 810a4dc <_dtoa_r+0x384>
 810a4c6:	4642      	mov	r2, r8
 810a4c8:	464b      	mov	r3, r9
 810a4ca:	4650      	mov	r0, sl
 810a4cc:	4659      	mov	r1, fp
 810a4ce:	f7f6 fa45 	bl	810095c <__aeabi_ddiv>
 810a4d2:	4682      	mov	sl, r0
 810a4d4:	468b      	mov	fp, r1
 810a4d6:	e028      	b.n	810a52a <_dtoa_r+0x3d2>
 810a4d8:	2502      	movs	r5, #2
 810a4da:	e7f2      	b.n	810a4c2 <_dtoa_r+0x36a>
 810a4dc:	07f9      	lsls	r1, r7, #31
 810a4de:	d508      	bpl.n	810a4f2 <_dtoa_r+0x39a>
 810a4e0:	4640      	mov	r0, r8
 810a4e2:	4649      	mov	r1, r9
 810a4e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 810a4e8:	f7f6 f90e 	bl	8100708 <__aeabi_dmul>
 810a4ec:	3501      	adds	r5, #1
 810a4ee:	4680      	mov	r8, r0
 810a4f0:	4689      	mov	r9, r1
 810a4f2:	107f      	asrs	r7, r7, #1
 810a4f4:	3608      	adds	r6, #8
 810a4f6:	e7e5      	b.n	810a4c4 <_dtoa_r+0x36c>
 810a4f8:	f000 809b 	beq.w	810a632 <_dtoa_r+0x4da>
 810a4fc:	9b00      	ldr	r3, [sp, #0]
 810a4fe:	4f9d      	ldr	r7, [pc, #628]	; (810a774 <_dtoa_r+0x61c>)
 810a500:	425e      	negs	r6, r3
 810a502:	4b9b      	ldr	r3, [pc, #620]	; (810a770 <_dtoa_r+0x618>)
 810a504:	f006 020f 	and.w	r2, r6, #15
 810a508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a510:	ec51 0b19 	vmov	r0, r1, d9
 810a514:	f7f6 f8f8 	bl	8100708 <__aeabi_dmul>
 810a518:	1136      	asrs	r6, r6, #4
 810a51a:	4682      	mov	sl, r0
 810a51c:	468b      	mov	fp, r1
 810a51e:	2300      	movs	r3, #0
 810a520:	2502      	movs	r5, #2
 810a522:	2e00      	cmp	r6, #0
 810a524:	d17a      	bne.n	810a61c <_dtoa_r+0x4c4>
 810a526:	2b00      	cmp	r3, #0
 810a528:	d1d3      	bne.n	810a4d2 <_dtoa_r+0x37a>
 810a52a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a52c:	2b00      	cmp	r3, #0
 810a52e:	f000 8082 	beq.w	810a636 <_dtoa_r+0x4de>
 810a532:	4b91      	ldr	r3, [pc, #580]	; (810a778 <_dtoa_r+0x620>)
 810a534:	2200      	movs	r2, #0
 810a536:	4650      	mov	r0, sl
 810a538:	4659      	mov	r1, fp
 810a53a:	f7f6 fb57 	bl	8100bec <__aeabi_dcmplt>
 810a53e:	2800      	cmp	r0, #0
 810a540:	d079      	beq.n	810a636 <_dtoa_r+0x4de>
 810a542:	9b03      	ldr	r3, [sp, #12]
 810a544:	2b00      	cmp	r3, #0
 810a546:	d076      	beq.n	810a636 <_dtoa_r+0x4de>
 810a548:	9b02      	ldr	r3, [sp, #8]
 810a54a:	2b00      	cmp	r3, #0
 810a54c:	dd36      	ble.n	810a5bc <_dtoa_r+0x464>
 810a54e:	9b00      	ldr	r3, [sp, #0]
 810a550:	4650      	mov	r0, sl
 810a552:	4659      	mov	r1, fp
 810a554:	1e5f      	subs	r7, r3, #1
 810a556:	2200      	movs	r2, #0
 810a558:	4b88      	ldr	r3, [pc, #544]	; (810a77c <_dtoa_r+0x624>)
 810a55a:	f7f6 f8d5 	bl	8100708 <__aeabi_dmul>
 810a55e:	9e02      	ldr	r6, [sp, #8]
 810a560:	4682      	mov	sl, r0
 810a562:	468b      	mov	fp, r1
 810a564:	3501      	adds	r5, #1
 810a566:	4628      	mov	r0, r5
 810a568:	f7f6 f864 	bl	8100634 <__aeabi_i2d>
 810a56c:	4652      	mov	r2, sl
 810a56e:	465b      	mov	r3, fp
 810a570:	f7f6 f8ca 	bl	8100708 <__aeabi_dmul>
 810a574:	4b82      	ldr	r3, [pc, #520]	; (810a780 <_dtoa_r+0x628>)
 810a576:	2200      	movs	r2, #0
 810a578:	f7f5 ff10 	bl	810039c <__adddf3>
 810a57c:	46d0      	mov	r8, sl
 810a57e:	46d9      	mov	r9, fp
 810a580:	4682      	mov	sl, r0
 810a582:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 810a586:	2e00      	cmp	r6, #0
 810a588:	d158      	bne.n	810a63c <_dtoa_r+0x4e4>
 810a58a:	4b7e      	ldr	r3, [pc, #504]	; (810a784 <_dtoa_r+0x62c>)
 810a58c:	2200      	movs	r2, #0
 810a58e:	4640      	mov	r0, r8
 810a590:	4649      	mov	r1, r9
 810a592:	f7f5 ff01 	bl	8100398 <__aeabi_dsub>
 810a596:	4652      	mov	r2, sl
 810a598:	465b      	mov	r3, fp
 810a59a:	4680      	mov	r8, r0
 810a59c:	4689      	mov	r9, r1
 810a59e:	f7f6 fb43 	bl	8100c28 <__aeabi_dcmpgt>
 810a5a2:	2800      	cmp	r0, #0
 810a5a4:	f040 8295 	bne.w	810aad2 <_dtoa_r+0x97a>
 810a5a8:	4652      	mov	r2, sl
 810a5aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810a5ae:	4640      	mov	r0, r8
 810a5b0:	4649      	mov	r1, r9
 810a5b2:	f7f6 fb1b 	bl	8100bec <__aeabi_dcmplt>
 810a5b6:	2800      	cmp	r0, #0
 810a5b8:	f040 8289 	bne.w	810aace <_dtoa_r+0x976>
 810a5bc:	ec5b ab19 	vmov	sl, fp, d9
 810a5c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810a5c2:	2b00      	cmp	r3, #0
 810a5c4:	f2c0 8148 	blt.w	810a858 <_dtoa_r+0x700>
 810a5c8:	9a00      	ldr	r2, [sp, #0]
 810a5ca:	2a0e      	cmp	r2, #14
 810a5cc:	f300 8144 	bgt.w	810a858 <_dtoa_r+0x700>
 810a5d0:	4b67      	ldr	r3, [pc, #412]	; (810a770 <_dtoa_r+0x618>)
 810a5d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a5d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 810a5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a5dc:	2b00      	cmp	r3, #0
 810a5de:	f280 80d5 	bge.w	810a78c <_dtoa_r+0x634>
 810a5e2:	9b03      	ldr	r3, [sp, #12]
 810a5e4:	2b00      	cmp	r3, #0
 810a5e6:	f300 80d1 	bgt.w	810a78c <_dtoa_r+0x634>
 810a5ea:	f040 826f 	bne.w	810aacc <_dtoa_r+0x974>
 810a5ee:	4b65      	ldr	r3, [pc, #404]	; (810a784 <_dtoa_r+0x62c>)
 810a5f0:	2200      	movs	r2, #0
 810a5f2:	4640      	mov	r0, r8
 810a5f4:	4649      	mov	r1, r9
 810a5f6:	f7f6 f887 	bl	8100708 <__aeabi_dmul>
 810a5fa:	4652      	mov	r2, sl
 810a5fc:	465b      	mov	r3, fp
 810a5fe:	f7f6 fb09 	bl	8100c14 <__aeabi_dcmpge>
 810a602:	9e03      	ldr	r6, [sp, #12]
 810a604:	4637      	mov	r7, r6
 810a606:	2800      	cmp	r0, #0
 810a608:	f040 8245 	bne.w	810aa96 <_dtoa_r+0x93e>
 810a60c:	9d01      	ldr	r5, [sp, #4]
 810a60e:	2331      	movs	r3, #49	; 0x31
 810a610:	f805 3b01 	strb.w	r3, [r5], #1
 810a614:	9b00      	ldr	r3, [sp, #0]
 810a616:	3301      	adds	r3, #1
 810a618:	9300      	str	r3, [sp, #0]
 810a61a:	e240      	b.n	810aa9e <_dtoa_r+0x946>
 810a61c:	07f2      	lsls	r2, r6, #31
 810a61e:	d505      	bpl.n	810a62c <_dtoa_r+0x4d4>
 810a620:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a624:	f7f6 f870 	bl	8100708 <__aeabi_dmul>
 810a628:	3501      	adds	r5, #1
 810a62a:	2301      	movs	r3, #1
 810a62c:	1076      	asrs	r6, r6, #1
 810a62e:	3708      	adds	r7, #8
 810a630:	e777      	b.n	810a522 <_dtoa_r+0x3ca>
 810a632:	2502      	movs	r5, #2
 810a634:	e779      	b.n	810a52a <_dtoa_r+0x3d2>
 810a636:	9f00      	ldr	r7, [sp, #0]
 810a638:	9e03      	ldr	r6, [sp, #12]
 810a63a:	e794      	b.n	810a566 <_dtoa_r+0x40e>
 810a63c:	9901      	ldr	r1, [sp, #4]
 810a63e:	4b4c      	ldr	r3, [pc, #304]	; (810a770 <_dtoa_r+0x618>)
 810a640:	4431      	add	r1, r6
 810a642:	910d      	str	r1, [sp, #52]	; 0x34
 810a644:	9908      	ldr	r1, [sp, #32]
 810a646:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810a64a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810a64e:	2900      	cmp	r1, #0
 810a650:	d043      	beq.n	810a6da <_dtoa_r+0x582>
 810a652:	494d      	ldr	r1, [pc, #308]	; (810a788 <_dtoa_r+0x630>)
 810a654:	2000      	movs	r0, #0
 810a656:	f7f6 f981 	bl	810095c <__aeabi_ddiv>
 810a65a:	4652      	mov	r2, sl
 810a65c:	465b      	mov	r3, fp
 810a65e:	f7f5 fe9b 	bl	8100398 <__aeabi_dsub>
 810a662:	9d01      	ldr	r5, [sp, #4]
 810a664:	4682      	mov	sl, r0
 810a666:	468b      	mov	fp, r1
 810a668:	4649      	mov	r1, r9
 810a66a:	4640      	mov	r0, r8
 810a66c:	f7f6 fafc 	bl	8100c68 <__aeabi_d2iz>
 810a670:	4606      	mov	r6, r0
 810a672:	f7f5 ffdf 	bl	8100634 <__aeabi_i2d>
 810a676:	4602      	mov	r2, r0
 810a678:	460b      	mov	r3, r1
 810a67a:	4640      	mov	r0, r8
 810a67c:	4649      	mov	r1, r9
 810a67e:	f7f5 fe8b 	bl	8100398 <__aeabi_dsub>
 810a682:	3630      	adds	r6, #48	; 0x30
 810a684:	f805 6b01 	strb.w	r6, [r5], #1
 810a688:	4652      	mov	r2, sl
 810a68a:	465b      	mov	r3, fp
 810a68c:	4680      	mov	r8, r0
 810a68e:	4689      	mov	r9, r1
 810a690:	f7f6 faac 	bl	8100bec <__aeabi_dcmplt>
 810a694:	2800      	cmp	r0, #0
 810a696:	d163      	bne.n	810a760 <_dtoa_r+0x608>
 810a698:	4642      	mov	r2, r8
 810a69a:	464b      	mov	r3, r9
 810a69c:	4936      	ldr	r1, [pc, #216]	; (810a778 <_dtoa_r+0x620>)
 810a69e:	2000      	movs	r0, #0
 810a6a0:	f7f5 fe7a 	bl	8100398 <__aeabi_dsub>
 810a6a4:	4652      	mov	r2, sl
 810a6a6:	465b      	mov	r3, fp
 810a6a8:	f7f6 faa0 	bl	8100bec <__aeabi_dcmplt>
 810a6ac:	2800      	cmp	r0, #0
 810a6ae:	f040 80b5 	bne.w	810a81c <_dtoa_r+0x6c4>
 810a6b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a6b4:	429d      	cmp	r5, r3
 810a6b6:	d081      	beq.n	810a5bc <_dtoa_r+0x464>
 810a6b8:	4b30      	ldr	r3, [pc, #192]	; (810a77c <_dtoa_r+0x624>)
 810a6ba:	2200      	movs	r2, #0
 810a6bc:	4650      	mov	r0, sl
 810a6be:	4659      	mov	r1, fp
 810a6c0:	f7f6 f822 	bl	8100708 <__aeabi_dmul>
 810a6c4:	4b2d      	ldr	r3, [pc, #180]	; (810a77c <_dtoa_r+0x624>)
 810a6c6:	4682      	mov	sl, r0
 810a6c8:	468b      	mov	fp, r1
 810a6ca:	4640      	mov	r0, r8
 810a6cc:	4649      	mov	r1, r9
 810a6ce:	2200      	movs	r2, #0
 810a6d0:	f7f6 f81a 	bl	8100708 <__aeabi_dmul>
 810a6d4:	4680      	mov	r8, r0
 810a6d6:	4689      	mov	r9, r1
 810a6d8:	e7c6      	b.n	810a668 <_dtoa_r+0x510>
 810a6da:	4650      	mov	r0, sl
 810a6dc:	4659      	mov	r1, fp
 810a6de:	f7f6 f813 	bl	8100708 <__aeabi_dmul>
 810a6e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a6e4:	9d01      	ldr	r5, [sp, #4]
 810a6e6:	930f      	str	r3, [sp, #60]	; 0x3c
 810a6e8:	4682      	mov	sl, r0
 810a6ea:	468b      	mov	fp, r1
 810a6ec:	4649      	mov	r1, r9
 810a6ee:	4640      	mov	r0, r8
 810a6f0:	f7f6 faba 	bl	8100c68 <__aeabi_d2iz>
 810a6f4:	4606      	mov	r6, r0
 810a6f6:	f7f5 ff9d 	bl	8100634 <__aeabi_i2d>
 810a6fa:	3630      	adds	r6, #48	; 0x30
 810a6fc:	4602      	mov	r2, r0
 810a6fe:	460b      	mov	r3, r1
 810a700:	4640      	mov	r0, r8
 810a702:	4649      	mov	r1, r9
 810a704:	f7f5 fe48 	bl	8100398 <__aeabi_dsub>
 810a708:	f805 6b01 	strb.w	r6, [r5], #1
 810a70c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a70e:	429d      	cmp	r5, r3
 810a710:	4680      	mov	r8, r0
 810a712:	4689      	mov	r9, r1
 810a714:	f04f 0200 	mov.w	r2, #0
 810a718:	d124      	bne.n	810a764 <_dtoa_r+0x60c>
 810a71a:	4b1b      	ldr	r3, [pc, #108]	; (810a788 <_dtoa_r+0x630>)
 810a71c:	4650      	mov	r0, sl
 810a71e:	4659      	mov	r1, fp
 810a720:	f7f5 fe3c 	bl	810039c <__adddf3>
 810a724:	4602      	mov	r2, r0
 810a726:	460b      	mov	r3, r1
 810a728:	4640      	mov	r0, r8
 810a72a:	4649      	mov	r1, r9
 810a72c:	f7f6 fa7c 	bl	8100c28 <__aeabi_dcmpgt>
 810a730:	2800      	cmp	r0, #0
 810a732:	d173      	bne.n	810a81c <_dtoa_r+0x6c4>
 810a734:	4652      	mov	r2, sl
 810a736:	465b      	mov	r3, fp
 810a738:	4913      	ldr	r1, [pc, #76]	; (810a788 <_dtoa_r+0x630>)
 810a73a:	2000      	movs	r0, #0
 810a73c:	f7f5 fe2c 	bl	8100398 <__aeabi_dsub>
 810a740:	4602      	mov	r2, r0
 810a742:	460b      	mov	r3, r1
 810a744:	4640      	mov	r0, r8
 810a746:	4649      	mov	r1, r9
 810a748:	f7f6 fa50 	bl	8100bec <__aeabi_dcmplt>
 810a74c:	2800      	cmp	r0, #0
 810a74e:	f43f af35 	beq.w	810a5bc <_dtoa_r+0x464>
 810a752:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810a754:	1e6b      	subs	r3, r5, #1
 810a756:	930f      	str	r3, [sp, #60]	; 0x3c
 810a758:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810a75c:	2b30      	cmp	r3, #48	; 0x30
 810a75e:	d0f8      	beq.n	810a752 <_dtoa_r+0x5fa>
 810a760:	9700      	str	r7, [sp, #0]
 810a762:	e049      	b.n	810a7f8 <_dtoa_r+0x6a0>
 810a764:	4b05      	ldr	r3, [pc, #20]	; (810a77c <_dtoa_r+0x624>)
 810a766:	f7f5 ffcf 	bl	8100708 <__aeabi_dmul>
 810a76a:	4680      	mov	r8, r0
 810a76c:	4689      	mov	r9, r1
 810a76e:	e7bd      	b.n	810a6ec <_dtoa_r+0x594>
 810a770:	0810d308 	.word	0x0810d308
 810a774:	0810d2e0 	.word	0x0810d2e0
 810a778:	3ff00000 	.word	0x3ff00000
 810a77c:	40240000 	.word	0x40240000
 810a780:	401c0000 	.word	0x401c0000
 810a784:	40140000 	.word	0x40140000
 810a788:	3fe00000 	.word	0x3fe00000
 810a78c:	9d01      	ldr	r5, [sp, #4]
 810a78e:	4656      	mov	r6, sl
 810a790:	465f      	mov	r7, fp
 810a792:	4642      	mov	r2, r8
 810a794:	464b      	mov	r3, r9
 810a796:	4630      	mov	r0, r6
 810a798:	4639      	mov	r1, r7
 810a79a:	f7f6 f8df 	bl	810095c <__aeabi_ddiv>
 810a79e:	f7f6 fa63 	bl	8100c68 <__aeabi_d2iz>
 810a7a2:	4682      	mov	sl, r0
 810a7a4:	f7f5 ff46 	bl	8100634 <__aeabi_i2d>
 810a7a8:	4642      	mov	r2, r8
 810a7aa:	464b      	mov	r3, r9
 810a7ac:	f7f5 ffac 	bl	8100708 <__aeabi_dmul>
 810a7b0:	4602      	mov	r2, r0
 810a7b2:	460b      	mov	r3, r1
 810a7b4:	4630      	mov	r0, r6
 810a7b6:	4639      	mov	r1, r7
 810a7b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 810a7bc:	f7f5 fdec 	bl	8100398 <__aeabi_dsub>
 810a7c0:	f805 6b01 	strb.w	r6, [r5], #1
 810a7c4:	9e01      	ldr	r6, [sp, #4]
 810a7c6:	9f03      	ldr	r7, [sp, #12]
 810a7c8:	1bae      	subs	r6, r5, r6
 810a7ca:	42b7      	cmp	r7, r6
 810a7cc:	4602      	mov	r2, r0
 810a7ce:	460b      	mov	r3, r1
 810a7d0:	d135      	bne.n	810a83e <_dtoa_r+0x6e6>
 810a7d2:	f7f5 fde3 	bl	810039c <__adddf3>
 810a7d6:	4642      	mov	r2, r8
 810a7d8:	464b      	mov	r3, r9
 810a7da:	4606      	mov	r6, r0
 810a7dc:	460f      	mov	r7, r1
 810a7de:	f7f6 fa23 	bl	8100c28 <__aeabi_dcmpgt>
 810a7e2:	b9d0      	cbnz	r0, 810a81a <_dtoa_r+0x6c2>
 810a7e4:	4642      	mov	r2, r8
 810a7e6:	464b      	mov	r3, r9
 810a7e8:	4630      	mov	r0, r6
 810a7ea:	4639      	mov	r1, r7
 810a7ec:	f7f6 f9f4 	bl	8100bd8 <__aeabi_dcmpeq>
 810a7f0:	b110      	cbz	r0, 810a7f8 <_dtoa_r+0x6a0>
 810a7f2:	f01a 0f01 	tst.w	sl, #1
 810a7f6:	d110      	bne.n	810a81a <_dtoa_r+0x6c2>
 810a7f8:	4620      	mov	r0, r4
 810a7fa:	ee18 1a10 	vmov	r1, s16
 810a7fe:	f001 f885 	bl	810b90c <_Bfree>
 810a802:	2300      	movs	r3, #0
 810a804:	9800      	ldr	r0, [sp, #0]
 810a806:	702b      	strb	r3, [r5, #0]
 810a808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810a80a:	3001      	adds	r0, #1
 810a80c:	6018      	str	r0, [r3, #0]
 810a80e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a810:	2b00      	cmp	r3, #0
 810a812:	f43f acf1 	beq.w	810a1f8 <_dtoa_r+0xa0>
 810a816:	601d      	str	r5, [r3, #0]
 810a818:	e4ee      	b.n	810a1f8 <_dtoa_r+0xa0>
 810a81a:	9f00      	ldr	r7, [sp, #0]
 810a81c:	462b      	mov	r3, r5
 810a81e:	461d      	mov	r5, r3
 810a820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810a824:	2a39      	cmp	r2, #57	; 0x39
 810a826:	d106      	bne.n	810a836 <_dtoa_r+0x6de>
 810a828:	9a01      	ldr	r2, [sp, #4]
 810a82a:	429a      	cmp	r2, r3
 810a82c:	d1f7      	bne.n	810a81e <_dtoa_r+0x6c6>
 810a82e:	9901      	ldr	r1, [sp, #4]
 810a830:	2230      	movs	r2, #48	; 0x30
 810a832:	3701      	adds	r7, #1
 810a834:	700a      	strb	r2, [r1, #0]
 810a836:	781a      	ldrb	r2, [r3, #0]
 810a838:	3201      	adds	r2, #1
 810a83a:	701a      	strb	r2, [r3, #0]
 810a83c:	e790      	b.n	810a760 <_dtoa_r+0x608>
 810a83e:	4ba6      	ldr	r3, [pc, #664]	; (810aad8 <_dtoa_r+0x980>)
 810a840:	2200      	movs	r2, #0
 810a842:	f7f5 ff61 	bl	8100708 <__aeabi_dmul>
 810a846:	2200      	movs	r2, #0
 810a848:	2300      	movs	r3, #0
 810a84a:	4606      	mov	r6, r0
 810a84c:	460f      	mov	r7, r1
 810a84e:	f7f6 f9c3 	bl	8100bd8 <__aeabi_dcmpeq>
 810a852:	2800      	cmp	r0, #0
 810a854:	d09d      	beq.n	810a792 <_dtoa_r+0x63a>
 810a856:	e7cf      	b.n	810a7f8 <_dtoa_r+0x6a0>
 810a858:	9a08      	ldr	r2, [sp, #32]
 810a85a:	2a00      	cmp	r2, #0
 810a85c:	f000 80d7 	beq.w	810aa0e <_dtoa_r+0x8b6>
 810a860:	9a06      	ldr	r2, [sp, #24]
 810a862:	2a01      	cmp	r2, #1
 810a864:	f300 80ba 	bgt.w	810a9dc <_dtoa_r+0x884>
 810a868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810a86a:	2a00      	cmp	r2, #0
 810a86c:	f000 80b2 	beq.w	810a9d4 <_dtoa_r+0x87c>
 810a870:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810a874:	9e07      	ldr	r6, [sp, #28]
 810a876:	9d04      	ldr	r5, [sp, #16]
 810a878:	9a04      	ldr	r2, [sp, #16]
 810a87a:	441a      	add	r2, r3
 810a87c:	9204      	str	r2, [sp, #16]
 810a87e:	9a05      	ldr	r2, [sp, #20]
 810a880:	2101      	movs	r1, #1
 810a882:	441a      	add	r2, r3
 810a884:	4620      	mov	r0, r4
 810a886:	9205      	str	r2, [sp, #20]
 810a888:	f001 f942 	bl	810bb10 <__i2b>
 810a88c:	4607      	mov	r7, r0
 810a88e:	2d00      	cmp	r5, #0
 810a890:	dd0c      	ble.n	810a8ac <_dtoa_r+0x754>
 810a892:	9b05      	ldr	r3, [sp, #20]
 810a894:	2b00      	cmp	r3, #0
 810a896:	dd09      	ble.n	810a8ac <_dtoa_r+0x754>
 810a898:	42ab      	cmp	r3, r5
 810a89a:	9a04      	ldr	r2, [sp, #16]
 810a89c:	bfa8      	it	ge
 810a89e:	462b      	movge	r3, r5
 810a8a0:	1ad2      	subs	r2, r2, r3
 810a8a2:	9204      	str	r2, [sp, #16]
 810a8a4:	9a05      	ldr	r2, [sp, #20]
 810a8a6:	1aed      	subs	r5, r5, r3
 810a8a8:	1ad3      	subs	r3, r2, r3
 810a8aa:	9305      	str	r3, [sp, #20]
 810a8ac:	9b07      	ldr	r3, [sp, #28]
 810a8ae:	b31b      	cbz	r3, 810a8f8 <_dtoa_r+0x7a0>
 810a8b0:	9b08      	ldr	r3, [sp, #32]
 810a8b2:	2b00      	cmp	r3, #0
 810a8b4:	f000 80af 	beq.w	810aa16 <_dtoa_r+0x8be>
 810a8b8:	2e00      	cmp	r6, #0
 810a8ba:	dd13      	ble.n	810a8e4 <_dtoa_r+0x78c>
 810a8bc:	4639      	mov	r1, r7
 810a8be:	4632      	mov	r2, r6
 810a8c0:	4620      	mov	r0, r4
 810a8c2:	f001 f9e5 	bl	810bc90 <__pow5mult>
 810a8c6:	ee18 2a10 	vmov	r2, s16
 810a8ca:	4601      	mov	r1, r0
 810a8cc:	4607      	mov	r7, r0
 810a8ce:	4620      	mov	r0, r4
 810a8d0:	f001 f934 	bl	810bb3c <__multiply>
 810a8d4:	ee18 1a10 	vmov	r1, s16
 810a8d8:	4680      	mov	r8, r0
 810a8da:	4620      	mov	r0, r4
 810a8dc:	f001 f816 	bl	810b90c <_Bfree>
 810a8e0:	ee08 8a10 	vmov	s16, r8
 810a8e4:	9b07      	ldr	r3, [sp, #28]
 810a8e6:	1b9a      	subs	r2, r3, r6
 810a8e8:	d006      	beq.n	810a8f8 <_dtoa_r+0x7a0>
 810a8ea:	ee18 1a10 	vmov	r1, s16
 810a8ee:	4620      	mov	r0, r4
 810a8f0:	f001 f9ce 	bl	810bc90 <__pow5mult>
 810a8f4:	ee08 0a10 	vmov	s16, r0
 810a8f8:	2101      	movs	r1, #1
 810a8fa:	4620      	mov	r0, r4
 810a8fc:	f001 f908 	bl	810bb10 <__i2b>
 810a900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a902:	2b00      	cmp	r3, #0
 810a904:	4606      	mov	r6, r0
 810a906:	f340 8088 	ble.w	810aa1a <_dtoa_r+0x8c2>
 810a90a:	461a      	mov	r2, r3
 810a90c:	4601      	mov	r1, r0
 810a90e:	4620      	mov	r0, r4
 810a910:	f001 f9be 	bl	810bc90 <__pow5mult>
 810a914:	9b06      	ldr	r3, [sp, #24]
 810a916:	2b01      	cmp	r3, #1
 810a918:	4606      	mov	r6, r0
 810a91a:	f340 8081 	ble.w	810aa20 <_dtoa_r+0x8c8>
 810a91e:	f04f 0800 	mov.w	r8, #0
 810a922:	6933      	ldr	r3, [r6, #16]
 810a924:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810a928:	6918      	ldr	r0, [r3, #16]
 810a92a:	f001 f8a1 	bl	810ba70 <__hi0bits>
 810a92e:	f1c0 0020 	rsb	r0, r0, #32
 810a932:	9b05      	ldr	r3, [sp, #20]
 810a934:	4418      	add	r0, r3
 810a936:	f010 001f 	ands.w	r0, r0, #31
 810a93a:	f000 8092 	beq.w	810aa62 <_dtoa_r+0x90a>
 810a93e:	f1c0 0320 	rsb	r3, r0, #32
 810a942:	2b04      	cmp	r3, #4
 810a944:	f340 808a 	ble.w	810aa5c <_dtoa_r+0x904>
 810a948:	f1c0 001c 	rsb	r0, r0, #28
 810a94c:	9b04      	ldr	r3, [sp, #16]
 810a94e:	4403      	add	r3, r0
 810a950:	9304      	str	r3, [sp, #16]
 810a952:	9b05      	ldr	r3, [sp, #20]
 810a954:	4403      	add	r3, r0
 810a956:	4405      	add	r5, r0
 810a958:	9305      	str	r3, [sp, #20]
 810a95a:	9b04      	ldr	r3, [sp, #16]
 810a95c:	2b00      	cmp	r3, #0
 810a95e:	dd07      	ble.n	810a970 <_dtoa_r+0x818>
 810a960:	ee18 1a10 	vmov	r1, s16
 810a964:	461a      	mov	r2, r3
 810a966:	4620      	mov	r0, r4
 810a968:	f001 f9ec 	bl	810bd44 <__lshift>
 810a96c:	ee08 0a10 	vmov	s16, r0
 810a970:	9b05      	ldr	r3, [sp, #20]
 810a972:	2b00      	cmp	r3, #0
 810a974:	dd05      	ble.n	810a982 <_dtoa_r+0x82a>
 810a976:	4631      	mov	r1, r6
 810a978:	461a      	mov	r2, r3
 810a97a:	4620      	mov	r0, r4
 810a97c:	f001 f9e2 	bl	810bd44 <__lshift>
 810a980:	4606      	mov	r6, r0
 810a982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a984:	2b00      	cmp	r3, #0
 810a986:	d06e      	beq.n	810aa66 <_dtoa_r+0x90e>
 810a988:	ee18 0a10 	vmov	r0, s16
 810a98c:	4631      	mov	r1, r6
 810a98e:	f001 fa49 	bl	810be24 <__mcmp>
 810a992:	2800      	cmp	r0, #0
 810a994:	da67      	bge.n	810aa66 <_dtoa_r+0x90e>
 810a996:	9b00      	ldr	r3, [sp, #0]
 810a998:	3b01      	subs	r3, #1
 810a99a:	ee18 1a10 	vmov	r1, s16
 810a99e:	9300      	str	r3, [sp, #0]
 810a9a0:	220a      	movs	r2, #10
 810a9a2:	2300      	movs	r3, #0
 810a9a4:	4620      	mov	r0, r4
 810a9a6:	f000 ffd3 	bl	810b950 <__multadd>
 810a9aa:	9b08      	ldr	r3, [sp, #32]
 810a9ac:	ee08 0a10 	vmov	s16, r0
 810a9b0:	2b00      	cmp	r3, #0
 810a9b2:	f000 81b1 	beq.w	810ad18 <_dtoa_r+0xbc0>
 810a9b6:	2300      	movs	r3, #0
 810a9b8:	4639      	mov	r1, r7
 810a9ba:	220a      	movs	r2, #10
 810a9bc:	4620      	mov	r0, r4
 810a9be:	f000 ffc7 	bl	810b950 <__multadd>
 810a9c2:	9b02      	ldr	r3, [sp, #8]
 810a9c4:	2b00      	cmp	r3, #0
 810a9c6:	4607      	mov	r7, r0
 810a9c8:	f300 808e 	bgt.w	810aae8 <_dtoa_r+0x990>
 810a9cc:	9b06      	ldr	r3, [sp, #24]
 810a9ce:	2b02      	cmp	r3, #2
 810a9d0:	dc51      	bgt.n	810aa76 <_dtoa_r+0x91e>
 810a9d2:	e089      	b.n	810aae8 <_dtoa_r+0x990>
 810a9d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810a9d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810a9da:	e74b      	b.n	810a874 <_dtoa_r+0x71c>
 810a9dc:	9b03      	ldr	r3, [sp, #12]
 810a9de:	1e5e      	subs	r6, r3, #1
 810a9e0:	9b07      	ldr	r3, [sp, #28]
 810a9e2:	42b3      	cmp	r3, r6
 810a9e4:	bfbf      	itttt	lt
 810a9e6:	9b07      	ldrlt	r3, [sp, #28]
 810a9e8:	9607      	strlt	r6, [sp, #28]
 810a9ea:	1af2      	sublt	r2, r6, r3
 810a9ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 810a9ee:	bfb6      	itet	lt
 810a9f0:	189b      	addlt	r3, r3, r2
 810a9f2:	1b9e      	subge	r6, r3, r6
 810a9f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 810a9f6:	9b03      	ldr	r3, [sp, #12]
 810a9f8:	bfb8      	it	lt
 810a9fa:	2600      	movlt	r6, #0
 810a9fc:	2b00      	cmp	r3, #0
 810a9fe:	bfb7      	itett	lt
 810aa00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 810aa04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 810aa08:	1a9d      	sublt	r5, r3, r2
 810aa0a:	2300      	movlt	r3, #0
 810aa0c:	e734      	b.n	810a878 <_dtoa_r+0x720>
 810aa0e:	9e07      	ldr	r6, [sp, #28]
 810aa10:	9d04      	ldr	r5, [sp, #16]
 810aa12:	9f08      	ldr	r7, [sp, #32]
 810aa14:	e73b      	b.n	810a88e <_dtoa_r+0x736>
 810aa16:	9a07      	ldr	r2, [sp, #28]
 810aa18:	e767      	b.n	810a8ea <_dtoa_r+0x792>
 810aa1a:	9b06      	ldr	r3, [sp, #24]
 810aa1c:	2b01      	cmp	r3, #1
 810aa1e:	dc18      	bgt.n	810aa52 <_dtoa_r+0x8fa>
 810aa20:	f1ba 0f00 	cmp.w	sl, #0
 810aa24:	d115      	bne.n	810aa52 <_dtoa_r+0x8fa>
 810aa26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810aa2a:	b993      	cbnz	r3, 810aa52 <_dtoa_r+0x8fa>
 810aa2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810aa30:	0d1b      	lsrs	r3, r3, #20
 810aa32:	051b      	lsls	r3, r3, #20
 810aa34:	b183      	cbz	r3, 810aa58 <_dtoa_r+0x900>
 810aa36:	9b04      	ldr	r3, [sp, #16]
 810aa38:	3301      	adds	r3, #1
 810aa3a:	9304      	str	r3, [sp, #16]
 810aa3c:	9b05      	ldr	r3, [sp, #20]
 810aa3e:	3301      	adds	r3, #1
 810aa40:	9305      	str	r3, [sp, #20]
 810aa42:	f04f 0801 	mov.w	r8, #1
 810aa46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810aa48:	2b00      	cmp	r3, #0
 810aa4a:	f47f af6a 	bne.w	810a922 <_dtoa_r+0x7ca>
 810aa4e:	2001      	movs	r0, #1
 810aa50:	e76f      	b.n	810a932 <_dtoa_r+0x7da>
 810aa52:	f04f 0800 	mov.w	r8, #0
 810aa56:	e7f6      	b.n	810aa46 <_dtoa_r+0x8ee>
 810aa58:	4698      	mov	r8, r3
 810aa5a:	e7f4      	b.n	810aa46 <_dtoa_r+0x8ee>
 810aa5c:	f43f af7d 	beq.w	810a95a <_dtoa_r+0x802>
 810aa60:	4618      	mov	r0, r3
 810aa62:	301c      	adds	r0, #28
 810aa64:	e772      	b.n	810a94c <_dtoa_r+0x7f4>
 810aa66:	9b03      	ldr	r3, [sp, #12]
 810aa68:	2b00      	cmp	r3, #0
 810aa6a:	dc37      	bgt.n	810aadc <_dtoa_r+0x984>
 810aa6c:	9b06      	ldr	r3, [sp, #24]
 810aa6e:	2b02      	cmp	r3, #2
 810aa70:	dd34      	ble.n	810aadc <_dtoa_r+0x984>
 810aa72:	9b03      	ldr	r3, [sp, #12]
 810aa74:	9302      	str	r3, [sp, #8]
 810aa76:	9b02      	ldr	r3, [sp, #8]
 810aa78:	b96b      	cbnz	r3, 810aa96 <_dtoa_r+0x93e>
 810aa7a:	4631      	mov	r1, r6
 810aa7c:	2205      	movs	r2, #5
 810aa7e:	4620      	mov	r0, r4
 810aa80:	f000 ff66 	bl	810b950 <__multadd>
 810aa84:	4601      	mov	r1, r0
 810aa86:	4606      	mov	r6, r0
 810aa88:	ee18 0a10 	vmov	r0, s16
 810aa8c:	f001 f9ca 	bl	810be24 <__mcmp>
 810aa90:	2800      	cmp	r0, #0
 810aa92:	f73f adbb 	bgt.w	810a60c <_dtoa_r+0x4b4>
 810aa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810aa98:	9d01      	ldr	r5, [sp, #4]
 810aa9a:	43db      	mvns	r3, r3
 810aa9c:	9300      	str	r3, [sp, #0]
 810aa9e:	f04f 0800 	mov.w	r8, #0
 810aaa2:	4631      	mov	r1, r6
 810aaa4:	4620      	mov	r0, r4
 810aaa6:	f000 ff31 	bl	810b90c <_Bfree>
 810aaaa:	2f00      	cmp	r7, #0
 810aaac:	f43f aea4 	beq.w	810a7f8 <_dtoa_r+0x6a0>
 810aab0:	f1b8 0f00 	cmp.w	r8, #0
 810aab4:	d005      	beq.n	810aac2 <_dtoa_r+0x96a>
 810aab6:	45b8      	cmp	r8, r7
 810aab8:	d003      	beq.n	810aac2 <_dtoa_r+0x96a>
 810aaba:	4641      	mov	r1, r8
 810aabc:	4620      	mov	r0, r4
 810aabe:	f000 ff25 	bl	810b90c <_Bfree>
 810aac2:	4639      	mov	r1, r7
 810aac4:	4620      	mov	r0, r4
 810aac6:	f000 ff21 	bl	810b90c <_Bfree>
 810aaca:	e695      	b.n	810a7f8 <_dtoa_r+0x6a0>
 810aacc:	2600      	movs	r6, #0
 810aace:	4637      	mov	r7, r6
 810aad0:	e7e1      	b.n	810aa96 <_dtoa_r+0x93e>
 810aad2:	9700      	str	r7, [sp, #0]
 810aad4:	4637      	mov	r7, r6
 810aad6:	e599      	b.n	810a60c <_dtoa_r+0x4b4>
 810aad8:	40240000 	.word	0x40240000
 810aadc:	9b08      	ldr	r3, [sp, #32]
 810aade:	2b00      	cmp	r3, #0
 810aae0:	f000 80ca 	beq.w	810ac78 <_dtoa_r+0xb20>
 810aae4:	9b03      	ldr	r3, [sp, #12]
 810aae6:	9302      	str	r3, [sp, #8]
 810aae8:	2d00      	cmp	r5, #0
 810aaea:	dd05      	ble.n	810aaf8 <_dtoa_r+0x9a0>
 810aaec:	4639      	mov	r1, r7
 810aaee:	462a      	mov	r2, r5
 810aaf0:	4620      	mov	r0, r4
 810aaf2:	f001 f927 	bl	810bd44 <__lshift>
 810aaf6:	4607      	mov	r7, r0
 810aaf8:	f1b8 0f00 	cmp.w	r8, #0
 810aafc:	d05b      	beq.n	810abb6 <_dtoa_r+0xa5e>
 810aafe:	6879      	ldr	r1, [r7, #4]
 810ab00:	4620      	mov	r0, r4
 810ab02:	f000 fec3 	bl	810b88c <_Balloc>
 810ab06:	4605      	mov	r5, r0
 810ab08:	b928      	cbnz	r0, 810ab16 <_dtoa_r+0x9be>
 810ab0a:	4b87      	ldr	r3, [pc, #540]	; (810ad28 <_dtoa_r+0xbd0>)
 810ab0c:	4602      	mov	r2, r0
 810ab0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 810ab12:	f7ff bb3b 	b.w	810a18c <_dtoa_r+0x34>
 810ab16:	693a      	ldr	r2, [r7, #16]
 810ab18:	3202      	adds	r2, #2
 810ab1a:	0092      	lsls	r2, r2, #2
 810ab1c:	f107 010c 	add.w	r1, r7, #12
 810ab20:	300c      	adds	r0, #12
 810ab22:	f7fd fbdd 	bl	81082e0 <memcpy>
 810ab26:	2201      	movs	r2, #1
 810ab28:	4629      	mov	r1, r5
 810ab2a:	4620      	mov	r0, r4
 810ab2c:	f001 f90a 	bl	810bd44 <__lshift>
 810ab30:	9b01      	ldr	r3, [sp, #4]
 810ab32:	f103 0901 	add.w	r9, r3, #1
 810ab36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810ab3a:	4413      	add	r3, r2
 810ab3c:	9305      	str	r3, [sp, #20]
 810ab3e:	f00a 0301 	and.w	r3, sl, #1
 810ab42:	46b8      	mov	r8, r7
 810ab44:	9304      	str	r3, [sp, #16]
 810ab46:	4607      	mov	r7, r0
 810ab48:	4631      	mov	r1, r6
 810ab4a:	ee18 0a10 	vmov	r0, s16
 810ab4e:	f7ff fa77 	bl	810a040 <quorem>
 810ab52:	4641      	mov	r1, r8
 810ab54:	9002      	str	r0, [sp, #8]
 810ab56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810ab5a:	ee18 0a10 	vmov	r0, s16
 810ab5e:	f001 f961 	bl	810be24 <__mcmp>
 810ab62:	463a      	mov	r2, r7
 810ab64:	9003      	str	r0, [sp, #12]
 810ab66:	4631      	mov	r1, r6
 810ab68:	4620      	mov	r0, r4
 810ab6a:	f001 f977 	bl	810be5c <__mdiff>
 810ab6e:	68c2      	ldr	r2, [r0, #12]
 810ab70:	f109 3bff 	add.w	fp, r9, #4294967295
 810ab74:	4605      	mov	r5, r0
 810ab76:	bb02      	cbnz	r2, 810abba <_dtoa_r+0xa62>
 810ab78:	4601      	mov	r1, r0
 810ab7a:	ee18 0a10 	vmov	r0, s16
 810ab7e:	f001 f951 	bl	810be24 <__mcmp>
 810ab82:	4602      	mov	r2, r0
 810ab84:	4629      	mov	r1, r5
 810ab86:	4620      	mov	r0, r4
 810ab88:	9207      	str	r2, [sp, #28]
 810ab8a:	f000 febf 	bl	810b90c <_Bfree>
 810ab8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810ab92:	ea43 0102 	orr.w	r1, r3, r2
 810ab96:	9b04      	ldr	r3, [sp, #16]
 810ab98:	430b      	orrs	r3, r1
 810ab9a:	464d      	mov	r5, r9
 810ab9c:	d10f      	bne.n	810abbe <_dtoa_r+0xa66>
 810ab9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810aba2:	d02a      	beq.n	810abfa <_dtoa_r+0xaa2>
 810aba4:	9b03      	ldr	r3, [sp, #12]
 810aba6:	2b00      	cmp	r3, #0
 810aba8:	dd02      	ble.n	810abb0 <_dtoa_r+0xa58>
 810abaa:	9b02      	ldr	r3, [sp, #8]
 810abac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 810abb0:	f88b a000 	strb.w	sl, [fp]
 810abb4:	e775      	b.n	810aaa2 <_dtoa_r+0x94a>
 810abb6:	4638      	mov	r0, r7
 810abb8:	e7ba      	b.n	810ab30 <_dtoa_r+0x9d8>
 810abba:	2201      	movs	r2, #1
 810abbc:	e7e2      	b.n	810ab84 <_dtoa_r+0xa2c>
 810abbe:	9b03      	ldr	r3, [sp, #12]
 810abc0:	2b00      	cmp	r3, #0
 810abc2:	db04      	blt.n	810abce <_dtoa_r+0xa76>
 810abc4:	9906      	ldr	r1, [sp, #24]
 810abc6:	430b      	orrs	r3, r1
 810abc8:	9904      	ldr	r1, [sp, #16]
 810abca:	430b      	orrs	r3, r1
 810abcc:	d122      	bne.n	810ac14 <_dtoa_r+0xabc>
 810abce:	2a00      	cmp	r2, #0
 810abd0:	ddee      	ble.n	810abb0 <_dtoa_r+0xa58>
 810abd2:	ee18 1a10 	vmov	r1, s16
 810abd6:	2201      	movs	r2, #1
 810abd8:	4620      	mov	r0, r4
 810abda:	f001 f8b3 	bl	810bd44 <__lshift>
 810abde:	4631      	mov	r1, r6
 810abe0:	ee08 0a10 	vmov	s16, r0
 810abe4:	f001 f91e 	bl	810be24 <__mcmp>
 810abe8:	2800      	cmp	r0, #0
 810abea:	dc03      	bgt.n	810abf4 <_dtoa_r+0xa9c>
 810abec:	d1e0      	bne.n	810abb0 <_dtoa_r+0xa58>
 810abee:	f01a 0f01 	tst.w	sl, #1
 810abf2:	d0dd      	beq.n	810abb0 <_dtoa_r+0xa58>
 810abf4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810abf8:	d1d7      	bne.n	810abaa <_dtoa_r+0xa52>
 810abfa:	2339      	movs	r3, #57	; 0x39
 810abfc:	f88b 3000 	strb.w	r3, [fp]
 810ac00:	462b      	mov	r3, r5
 810ac02:	461d      	mov	r5, r3
 810ac04:	3b01      	subs	r3, #1
 810ac06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810ac0a:	2a39      	cmp	r2, #57	; 0x39
 810ac0c:	d071      	beq.n	810acf2 <_dtoa_r+0xb9a>
 810ac0e:	3201      	adds	r2, #1
 810ac10:	701a      	strb	r2, [r3, #0]
 810ac12:	e746      	b.n	810aaa2 <_dtoa_r+0x94a>
 810ac14:	2a00      	cmp	r2, #0
 810ac16:	dd07      	ble.n	810ac28 <_dtoa_r+0xad0>
 810ac18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810ac1c:	d0ed      	beq.n	810abfa <_dtoa_r+0xaa2>
 810ac1e:	f10a 0301 	add.w	r3, sl, #1
 810ac22:	f88b 3000 	strb.w	r3, [fp]
 810ac26:	e73c      	b.n	810aaa2 <_dtoa_r+0x94a>
 810ac28:	9b05      	ldr	r3, [sp, #20]
 810ac2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 810ac2e:	4599      	cmp	r9, r3
 810ac30:	d047      	beq.n	810acc2 <_dtoa_r+0xb6a>
 810ac32:	ee18 1a10 	vmov	r1, s16
 810ac36:	2300      	movs	r3, #0
 810ac38:	220a      	movs	r2, #10
 810ac3a:	4620      	mov	r0, r4
 810ac3c:	f000 fe88 	bl	810b950 <__multadd>
 810ac40:	45b8      	cmp	r8, r7
 810ac42:	ee08 0a10 	vmov	s16, r0
 810ac46:	f04f 0300 	mov.w	r3, #0
 810ac4a:	f04f 020a 	mov.w	r2, #10
 810ac4e:	4641      	mov	r1, r8
 810ac50:	4620      	mov	r0, r4
 810ac52:	d106      	bne.n	810ac62 <_dtoa_r+0xb0a>
 810ac54:	f000 fe7c 	bl	810b950 <__multadd>
 810ac58:	4680      	mov	r8, r0
 810ac5a:	4607      	mov	r7, r0
 810ac5c:	f109 0901 	add.w	r9, r9, #1
 810ac60:	e772      	b.n	810ab48 <_dtoa_r+0x9f0>
 810ac62:	f000 fe75 	bl	810b950 <__multadd>
 810ac66:	4639      	mov	r1, r7
 810ac68:	4680      	mov	r8, r0
 810ac6a:	2300      	movs	r3, #0
 810ac6c:	220a      	movs	r2, #10
 810ac6e:	4620      	mov	r0, r4
 810ac70:	f000 fe6e 	bl	810b950 <__multadd>
 810ac74:	4607      	mov	r7, r0
 810ac76:	e7f1      	b.n	810ac5c <_dtoa_r+0xb04>
 810ac78:	9b03      	ldr	r3, [sp, #12]
 810ac7a:	9302      	str	r3, [sp, #8]
 810ac7c:	9d01      	ldr	r5, [sp, #4]
 810ac7e:	ee18 0a10 	vmov	r0, s16
 810ac82:	4631      	mov	r1, r6
 810ac84:	f7ff f9dc 	bl	810a040 <quorem>
 810ac88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810ac8c:	9b01      	ldr	r3, [sp, #4]
 810ac8e:	f805 ab01 	strb.w	sl, [r5], #1
 810ac92:	1aea      	subs	r2, r5, r3
 810ac94:	9b02      	ldr	r3, [sp, #8]
 810ac96:	4293      	cmp	r3, r2
 810ac98:	dd09      	ble.n	810acae <_dtoa_r+0xb56>
 810ac9a:	ee18 1a10 	vmov	r1, s16
 810ac9e:	2300      	movs	r3, #0
 810aca0:	220a      	movs	r2, #10
 810aca2:	4620      	mov	r0, r4
 810aca4:	f000 fe54 	bl	810b950 <__multadd>
 810aca8:	ee08 0a10 	vmov	s16, r0
 810acac:	e7e7      	b.n	810ac7e <_dtoa_r+0xb26>
 810acae:	9b02      	ldr	r3, [sp, #8]
 810acb0:	2b00      	cmp	r3, #0
 810acb2:	bfc8      	it	gt
 810acb4:	461d      	movgt	r5, r3
 810acb6:	9b01      	ldr	r3, [sp, #4]
 810acb8:	bfd8      	it	le
 810acba:	2501      	movle	r5, #1
 810acbc:	441d      	add	r5, r3
 810acbe:	f04f 0800 	mov.w	r8, #0
 810acc2:	ee18 1a10 	vmov	r1, s16
 810acc6:	2201      	movs	r2, #1
 810acc8:	4620      	mov	r0, r4
 810acca:	f001 f83b 	bl	810bd44 <__lshift>
 810acce:	4631      	mov	r1, r6
 810acd0:	ee08 0a10 	vmov	s16, r0
 810acd4:	f001 f8a6 	bl	810be24 <__mcmp>
 810acd8:	2800      	cmp	r0, #0
 810acda:	dc91      	bgt.n	810ac00 <_dtoa_r+0xaa8>
 810acdc:	d102      	bne.n	810ace4 <_dtoa_r+0xb8c>
 810acde:	f01a 0f01 	tst.w	sl, #1
 810ace2:	d18d      	bne.n	810ac00 <_dtoa_r+0xaa8>
 810ace4:	462b      	mov	r3, r5
 810ace6:	461d      	mov	r5, r3
 810ace8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810acec:	2a30      	cmp	r2, #48	; 0x30
 810acee:	d0fa      	beq.n	810ace6 <_dtoa_r+0xb8e>
 810acf0:	e6d7      	b.n	810aaa2 <_dtoa_r+0x94a>
 810acf2:	9a01      	ldr	r2, [sp, #4]
 810acf4:	429a      	cmp	r2, r3
 810acf6:	d184      	bne.n	810ac02 <_dtoa_r+0xaaa>
 810acf8:	9b00      	ldr	r3, [sp, #0]
 810acfa:	3301      	adds	r3, #1
 810acfc:	9300      	str	r3, [sp, #0]
 810acfe:	2331      	movs	r3, #49	; 0x31
 810ad00:	7013      	strb	r3, [r2, #0]
 810ad02:	e6ce      	b.n	810aaa2 <_dtoa_r+0x94a>
 810ad04:	4b09      	ldr	r3, [pc, #36]	; (810ad2c <_dtoa_r+0xbd4>)
 810ad06:	f7ff ba95 	b.w	810a234 <_dtoa_r+0xdc>
 810ad0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810ad0c:	2b00      	cmp	r3, #0
 810ad0e:	f47f aa6e 	bne.w	810a1ee <_dtoa_r+0x96>
 810ad12:	4b07      	ldr	r3, [pc, #28]	; (810ad30 <_dtoa_r+0xbd8>)
 810ad14:	f7ff ba8e 	b.w	810a234 <_dtoa_r+0xdc>
 810ad18:	9b02      	ldr	r3, [sp, #8]
 810ad1a:	2b00      	cmp	r3, #0
 810ad1c:	dcae      	bgt.n	810ac7c <_dtoa_r+0xb24>
 810ad1e:	9b06      	ldr	r3, [sp, #24]
 810ad20:	2b02      	cmp	r3, #2
 810ad22:	f73f aea8 	bgt.w	810aa76 <_dtoa_r+0x91e>
 810ad26:	e7a9      	b.n	810ac7c <_dtoa_r+0xb24>
 810ad28:	0810d190 	.word	0x0810d190
 810ad2c:	0810cf94 	.word	0x0810cf94
 810ad30:	0810d111 	.word	0x0810d111

0810ad34 <__sflush_r>:
 810ad34:	898a      	ldrh	r2, [r1, #12]
 810ad36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ad3a:	4605      	mov	r5, r0
 810ad3c:	0710      	lsls	r0, r2, #28
 810ad3e:	460c      	mov	r4, r1
 810ad40:	d458      	bmi.n	810adf4 <__sflush_r+0xc0>
 810ad42:	684b      	ldr	r3, [r1, #4]
 810ad44:	2b00      	cmp	r3, #0
 810ad46:	dc05      	bgt.n	810ad54 <__sflush_r+0x20>
 810ad48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810ad4a:	2b00      	cmp	r3, #0
 810ad4c:	dc02      	bgt.n	810ad54 <__sflush_r+0x20>
 810ad4e:	2000      	movs	r0, #0
 810ad50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ad54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810ad56:	2e00      	cmp	r6, #0
 810ad58:	d0f9      	beq.n	810ad4e <__sflush_r+0x1a>
 810ad5a:	2300      	movs	r3, #0
 810ad5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810ad60:	682f      	ldr	r7, [r5, #0]
 810ad62:	602b      	str	r3, [r5, #0]
 810ad64:	d032      	beq.n	810adcc <__sflush_r+0x98>
 810ad66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810ad68:	89a3      	ldrh	r3, [r4, #12]
 810ad6a:	075a      	lsls	r2, r3, #29
 810ad6c:	d505      	bpl.n	810ad7a <__sflush_r+0x46>
 810ad6e:	6863      	ldr	r3, [r4, #4]
 810ad70:	1ac0      	subs	r0, r0, r3
 810ad72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810ad74:	b10b      	cbz	r3, 810ad7a <__sflush_r+0x46>
 810ad76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810ad78:	1ac0      	subs	r0, r0, r3
 810ad7a:	2300      	movs	r3, #0
 810ad7c:	4602      	mov	r2, r0
 810ad7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810ad80:	6a21      	ldr	r1, [r4, #32]
 810ad82:	4628      	mov	r0, r5
 810ad84:	47b0      	blx	r6
 810ad86:	1c43      	adds	r3, r0, #1
 810ad88:	89a3      	ldrh	r3, [r4, #12]
 810ad8a:	d106      	bne.n	810ad9a <__sflush_r+0x66>
 810ad8c:	6829      	ldr	r1, [r5, #0]
 810ad8e:	291d      	cmp	r1, #29
 810ad90:	d82c      	bhi.n	810adec <__sflush_r+0xb8>
 810ad92:	4a2a      	ldr	r2, [pc, #168]	; (810ae3c <__sflush_r+0x108>)
 810ad94:	40ca      	lsrs	r2, r1
 810ad96:	07d6      	lsls	r6, r2, #31
 810ad98:	d528      	bpl.n	810adec <__sflush_r+0xb8>
 810ad9a:	2200      	movs	r2, #0
 810ad9c:	6062      	str	r2, [r4, #4]
 810ad9e:	04d9      	lsls	r1, r3, #19
 810ada0:	6922      	ldr	r2, [r4, #16]
 810ada2:	6022      	str	r2, [r4, #0]
 810ada4:	d504      	bpl.n	810adb0 <__sflush_r+0x7c>
 810ada6:	1c42      	adds	r2, r0, #1
 810ada8:	d101      	bne.n	810adae <__sflush_r+0x7a>
 810adaa:	682b      	ldr	r3, [r5, #0]
 810adac:	b903      	cbnz	r3, 810adb0 <__sflush_r+0x7c>
 810adae:	6560      	str	r0, [r4, #84]	; 0x54
 810adb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810adb2:	602f      	str	r7, [r5, #0]
 810adb4:	2900      	cmp	r1, #0
 810adb6:	d0ca      	beq.n	810ad4e <__sflush_r+0x1a>
 810adb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810adbc:	4299      	cmp	r1, r3
 810adbe:	d002      	beq.n	810adc6 <__sflush_r+0x92>
 810adc0:	4628      	mov	r0, r5
 810adc2:	f001 fa3b 	bl	810c23c <_free_r>
 810adc6:	2000      	movs	r0, #0
 810adc8:	6360      	str	r0, [r4, #52]	; 0x34
 810adca:	e7c1      	b.n	810ad50 <__sflush_r+0x1c>
 810adcc:	6a21      	ldr	r1, [r4, #32]
 810adce:	2301      	movs	r3, #1
 810add0:	4628      	mov	r0, r5
 810add2:	47b0      	blx	r6
 810add4:	1c41      	adds	r1, r0, #1
 810add6:	d1c7      	bne.n	810ad68 <__sflush_r+0x34>
 810add8:	682b      	ldr	r3, [r5, #0]
 810adda:	2b00      	cmp	r3, #0
 810addc:	d0c4      	beq.n	810ad68 <__sflush_r+0x34>
 810adde:	2b1d      	cmp	r3, #29
 810ade0:	d001      	beq.n	810ade6 <__sflush_r+0xb2>
 810ade2:	2b16      	cmp	r3, #22
 810ade4:	d101      	bne.n	810adea <__sflush_r+0xb6>
 810ade6:	602f      	str	r7, [r5, #0]
 810ade8:	e7b1      	b.n	810ad4e <__sflush_r+0x1a>
 810adea:	89a3      	ldrh	r3, [r4, #12]
 810adec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810adf0:	81a3      	strh	r3, [r4, #12]
 810adf2:	e7ad      	b.n	810ad50 <__sflush_r+0x1c>
 810adf4:	690f      	ldr	r7, [r1, #16]
 810adf6:	2f00      	cmp	r7, #0
 810adf8:	d0a9      	beq.n	810ad4e <__sflush_r+0x1a>
 810adfa:	0793      	lsls	r3, r2, #30
 810adfc:	680e      	ldr	r6, [r1, #0]
 810adfe:	bf08      	it	eq
 810ae00:	694b      	ldreq	r3, [r1, #20]
 810ae02:	600f      	str	r7, [r1, #0]
 810ae04:	bf18      	it	ne
 810ae06:	2300      	movne	r3, #0
 810ae08:	eba6 0807 	sub.w	r8, r6, r7
 810ae0c:	608b      	str	r3, [r1, #8]
 810ae0e:	f1b8 0f00 	cmp.w	r8, #0
 810ae12:	dd9c      	ble.n	810ad4e <__sflush_r+0x1a>
 810ae14:	6a21      	ldr	r1, [r4, #32]
 810ae16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810ae18:	4643      	mov	r3, r8
 810ae1a:	463a      	mov	r2, r7
 810ae1c:	4628      	mov	r0, r5
 810ae1e:	47b0      	blx	r6
 810ae20:	2800      	cmp	r0, #0
 810ae22:	dc06      	bgt.n	810ae32 <__sflush_r+0xfe>
 810ae24:	89a3      	ldrh	r3, [r4, #12]
 810ae26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810ae2a:	81a3      	strh	r3, [r4, #12]
 810ae2c:	f04f 30ff 	mov.w	r0, #4294967295
 810ae30:	e78e      	b.n	810ad50 <__sflush_r+0x1c>
 810ae32:	4407      	add	r7, r0
 810ae34:	eba8 0800 	sub.w	r8, r8, r0
 810ae38:	e7e9      	b.n	810ae0e <__sflush_r+0xda>
 810ae3a:	bf00      	nop
 810ae3c:	20400001 	.word	0x20400001

0810ae40 <_fflush_r>:
 810ae40:	b538      	push	{r3, r4, r5, lr}
 810ae42:	690b      	ldr	r3, [r1, #16]
 810ae44:	4605      	mov	r5, r0
 810ae46:	460c      	mov	r4, r1
 810ae48:	b913      	cbnz	r3, 810ae50 <_fflush_r+0x10>
 810ae4a:	2500      	movs	r5, #0
 810ae4c:	4628      	mov	r0, r5
 810ae4e:	bd38      	pop	{r3, r4, r5, pc}
 810ae50:	b118      	cbz	r0, 810ae5a <_fflush_r+0x1a>
 810ae52:	6983      	ldr	r3, [r0, #24]
 810ae54:	b90b      	cbnz	r3, 810ae5a <_fflush_r+0x1a>
 810ae56:	f000 f887 	bl	810af68 <__sinit>
 810ae5a:	4b14      	ldr	r3, [pc, #80]	; (810aeac <_fflush_r+0x6c>)
 810ae5c:	429c      	cmp	r4, r3
 810ae5e:	d11b      	bne.n	810ae98 <_fflush_r+0x58>
 810ae60:	686c      	ldr	r4, [r5, #4]
 810ae62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ae66:	2b00      	cmp	r3, #0
 810ae68:	d0ef      	beq.n	810ae4a <_fflush_r+0xa>
 810ae6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810ae6c:	07d0      	lsls	r0, r2, #31
 810ae6e:	d404      	bmi.n	810ae7a <_fflush_r+0x3a>
 810ae70:	0599      	lsls	r1, r3, #22
 810ae72:	d402      	bmi.n	810ae7a <_fflush_r+0x3a>
 810ae74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810ae76:	f000 fc88 	bl	810b78a <__retarget_lock_acquire_recursive>
 810ae7a:	4628      	mov	r0, r5
 810ae7c:	4621      	mov	r1, r4
 810ae7e:	f7ff ff59 	bl	810ad34 <__sflush_r>
 810ae82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810ae84:	07da      	lsls	r2, r3, #31
 810ae86:	4605      	mov	r5, r0
 810ae88:	d4e0      	bmi.n	810ae4c <_fflush_r+0xc>
 810ae8a:	89a3      	ldrh	r3, [r4, #12]
 810ae8c:	059b      	lsls	r3, r3, #22
 810ae8e:	d4dd      	bmi.n	810ae4c <_fflush_r+0xc>
 810ae90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810ae92:	f000 fc7b 	bl	810b78c <__retarget_lock_release_recursive>
 810ae96:	e7d9      	b.n	810ae4c <_fflush_r+0xc>
 810ae98:	4b05      	ldr	r3, [pc, #20]	; (810aeb0 <_fflush_r+0x70>)
 810ae9a:	429c      	cmp	r4, r3
 810ae9c:	d101      	bne.n	810aea2 <_fflush_r+0x62>
 810ae9e:	68ac      	ldr	r4, [r5, #8]
 810aea0:	e7df      	b.n	810ae62 <_fflush_r+0x22>
 810aea2:	4b04      	ldr	r3, [pc, #16]	; (810aeb4 <_fflush_r+0x74>)
 810aea4:	429c      	cmp	r4, r3
 810aea6:	bf08      	it	eq
 810aea8:	68ec      	ldreq	r4, [r5, #12]
 810aeaa:	e7da      	b.n	810ae62 <_fflush_r+0x22>
 810aeac:	0810d1c4 	.word	0x0810d1c4
 810aeb0:	0810d1e4 	.word	0x0810d1e4
 810aeb4:	0810d1a4 	.word	0x0810d1a4

0810aeb8 <std>:
 810aeb8:	2300      	movs	r3, #0
 810aeba:	b510      	push	{r4, lr}
 810aebc:	4604      	mov	r4, r0
 810aebe:	e9c0 3300 	strd	r3, r3, [r0]
 810aec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810aec6:	6083      	str	r3, [r0, #8]
 810aec8:	8181      	strh	r1, [r0, #12]
 810aeca:	6643      	str	r3, [r0, #100]	; 0x64
 810aecc:	81c2      	strh	r2, [r0, #14]
 810aece:	6183      	str	r3, [r0, #24]
 810aed0:	4619      	mov	r1, r3
 810aed2:	2208      	movs	r2, #8
 810aed4:	305c      	adds	r0, #92	; 0x5c
 810aed6:	f7fd fa11 	bl	81082fc <memset>
 810aeda:	4b05      	ldr	r3, [pc, #20]	; (810aef0 <std+0x38>)
 810aedc:	6263      	str	r3, [r4, #36]	; 0x24
 810aede:	4b05      	ldr	r3, [pc, #20]	; (810aef4 <std+0x3c>)
 810aee0:	62a3      	str	r3, [r4, #40]	; 0x28
 810aee2:	4b05      	ldr	r3, [pc, #20]	; (810aef8 <std+0x40>)
 810aee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 810aee6:	4b05      	ldr	r3, [pc, #20]	; (810aefc <std+0x44>)
 810aee8:	6224      	str	r4, [r4, #32]
 810aeea:	6323      	str	r3, [r4, #48]	; 0x30
 810aeec:	bd10      	pop	{r4, pc}
 810aeee:	bf00      	nop
 810aef0:	0810c999 	.word	0x0810c999
 810aef4:	0810c9bb 	.word	0x0810c9bb
 810aef8:	0810c9f3 	.word	0x0810c9f3
 810aefc:	0810ca17 	.word	0x0810ca17

0810af00 <_cleanup_r>:
 810af00:	4901      	ldr	r1, [pc, #4]	; (810af08 <_cleanup_r+0x8>)
 810af02:	f000 b8af 	b.w	810b064 <_fwalk_reent>
 810af06:	bf00      	nop
 810af08:	0810ae41 	.word	0x0810ae41

0810af0c <__sfmoreglue>:
 810af0c:	b570      	push	{r4, r5, r6, lr}
 810af0e:	2268      	movs	r2, #104	; 0x68
 810af10:	1e4d      	subs	r5, r1, #1
 810af12:	4355      	muls	r5, r2
 810af14:	460e      	mov	r6, r1
 810af16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810af1a:	f001 f9fb 	bl	810c314 <_malloc_r>
 810af1e:	4604      	mov	r4, r0
 810af20:	b140      	cbz	r0, 810af34 <__sfmoreglue+0x28>
 810af22:	2100      	movs	r1, #0
 810af24:	e9c0 1600 	strd	r1, r6, [r0]
 810af28:	300c      	adds	r0, #12
 810af2a:	60a0      	str	r0, [r4, #8]
 810af2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810af30:	f7fd f9e4 	bl	81082fc <memset>
 810af34:	4620      	mov	r0, r4
 810af36:	bd70      	pop	{r4, r5, r6, pc}

0810af38 <__sfp_lock_acquire>:
 810af38:	4801      	ldr	r0, [pc, #4]	; (810af40 <__sfp_lock_acquire+0x8>)
 810af3a:	f000 bc26 	b.w	810b78a <__retarget_lock_acquire_recursive>
 810af3e:	bf00      	nop
 810af40:	100003c1 	.word	0x100003c1

0810af44 <__sfp_lock_release>:
 810af44:	4801      	ldr	r0, [pc, #4]	; (810af4c <__sfp_lock_release+0x8>)
 810af46:	f000 bc21 	b.w	810b78c <__retarget_lock_release_recursive>
 810af4a:	bf00      	nop
 810af4c:	100003c1 	.word	0x100003c1

0810af50 <__sinit_lock_acquire>:
 810af50:	4801      	ldr	r0, [pc, #4]	; (810af58 <__sinit_lock_acquire+0x8>)
 810af52:	f000 bc1a 	b.w	810b78a <__retarget_lock_acquire_recursive>
 810af56:	bf00      	nop
 810af58:	100003c2 	.word	0x100003c2

0810af5c <__sinit_lock_release>:
 810af5c:	4801      	ldr	r0, [pc, #4]	; (810af64 <__sinit_lock_release+0x8>)
 810af5e:	f000 bc15 	b.w	810b78c <__retarget_lock_release_recursive>
 810af62:	bf00      	nop
 810af64:	100003c2 	.word	0x100003c2

0810af68 <__sinit>:
 810af68:	b510      	push	{r4, lr}
 810af6a:	4604      	mov	r4, r0
 810af6c:	f7ff fff0 	bl	810af50 <__sinit_lock_acquire>
 810af70:	69a3      	ldr	r3, [r4, #24]
 810af72:	b11b      	cbz	r3, 810af7c <__sinit+0x14>
 810af74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810af78:	f7ff bff0 	b.w	810af5c <__sinit_lock_release>
 810af7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810af80:	6523      	str	r3, [r4, #80]	; 0x50
 810af82:	4b13      	ldr	r3, [pc, #76]	; (810afd0 <__sinit+0x68>)
 810af84:	4a13      	ldr	r2, [pc, #76]	; (810afd4 <__sinit+0x6c>)
 810af86:	681b      	ldr	r3, [r3, #0]
 810af88:	62a2      	str	r2, [r4, #40]	; 0x28
 810af8a:	42a3      	cmp	r3, r4
 810af8c:	bf04      	itt	eq
 810af8e:	2301      	moveq	r3, #1
 810af90:	61a3      	streq	r3, [r4, #24]
 810af92:	4620      	mov	r0, r4
 810af94:	f000 f820 	bl	810afd8 <__sfp>
 810af98:	6060      	str	r0, [r4, #4]
 810af9a:	4620      	mov	r0, r4
 810af9c:	f000 f81c 	bl	810afd8 <__sfp>
 810afa0:	60a0      	str	r0, [r4, #8]
 810afa2:	4620      	mov	r0, r4
 810afa4:	f000 f818 	bl	810afd8 <__sfp>
 810afa8:	2200      	movs	r2, #0
 810afaa:	60e0      	str	r0, [r4, #12]
 810afac:	2104      	movs	r1, #4
 810afae:	6860      	ldr	r0, [r4, #4]
 810afb0:	f7ff ff82 	bl	810aeb8 <std>
 810afb4:	68a0      	ldr	r0, [r4, #8]
 810afb6:	2201      	movs	r2, #1
 810afb8:	2109      	movs	r1, #9
 810afba:	f7ff ff7d 	bl	810aeb8 <std>
 810afbe:	68e0      	ldr	r0, [r4, #12]
 810afc0:	2202      	movs	r2, #2
 810afc2:	2112      	movs	r1, #18
 810afc4:	f7ff ff78 	bl	810aeb8 <std>
 810afc8:	2301      	movs	r3, #1
 810afca:	61a3      	str	r3, [r4, #24]
 810afcc:	e7d2      	b.n	810af74 <__sinit+0xc>
 810afce:	bf00      	nop
 810afd0:	0810cf80 	.word	0x0810cf80
 810afd4:	0810af01 	.word	0x0810af01

0810afd8 <__sfp>:
 810afd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810afda:	4607      	mov	r7, r0
 810afdc:	f7ff ffac 	bl	810af38 <__sfp_lock_acquire>
 810afe0:	4b1e      	ldr	r3, [pc, #120]	; (810b05c <__sfp+0x84>)
 810afe2:	681e      	ldr	r6, [r3, #0]
 810afe4:	69b3      	ldr	r3, [r6, #24]
 810afe6:	b913      	cbnz	r3, 810afee <__sfp+0x16>
 810afe8:	4630      	mov	r0, r6
 810afea:	f7ff ffbd 	bl	810af68 <__sinit>
 810afee:	3648      	adds	r6, #72	; 0x48
 810aff0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810aff4:	3b01      	subs	r3, #1
 810aff6:	d503      	bpl.n	810b000 <__sfp+0x28>
 810aff8:	6833      	ldr	r3, [r6, #0]
 810affa:	b30b      	cbz	r3, 810b040 <__sfp+0x68>
 810affc:	6836      	ldr	r6, [r6, #0]
 810affe:	e7f7      	b.n	810aff0 <__sfp+0x18>
 810b000:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810b004:	b9d5      	cbnz	r5, 810b03c <__sfp+0x64>
 810b006:	4b16      	ldr	r3, [pc, #88]	; (810b060 <__sfp+0x88>)
 810b008:	60e3      	str	r3, [r4, #12]
 810b00a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810b00e:	6665      	str	r5, [r4, #100]	; 0x64
 810b010:	f000 fbba 	bl	810b788 <__retarget_lock_init_recursive>
 810b014:	f7ff ff96 	bl	810af44 <__sfp_lock_release>
 810b018:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810b01c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810b020:	6025      	str	r5, [r4, #0]
 810b022:	61a5      	str	r5, [r4, #24]
 810b024:	2208      	movs	r2, #8
 810b026:	4629      	mov	r1, r5
 810b028:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810b02c:	f7fd f966 	bl	81082fc <memset>
 810b030:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810b034:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810b038:	4620      	mov	r0, r4
 810b03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b03c:	3468      	adds	r4, #104	; 0x68
 810b03e:	e7d9      	b.n	810aff4 <__sfp+0x1c>
 810b040:	2104      	movs	r1, #4
 810b042:	4638      	mov	r0, r7
 810b044:	f7ff ff62 	bl	810af0c <__sfmoreglue>
 810b048:	4604      	mov	r4, r0
 810b04a:	6030      	str	r0, [r6, #0]
 810b04c:	2800      	cmp	r0, #0
 810b04e:	d1d5      	bne.n	810affc <__sfp+0x24>
 810b050:	f7ff ff78 	bl	810af44 <__sfp_lock_release>
 810b054:	230c      	movs	r3, #12
 810b056:	603b      	str	r3, [r7, #0]
 810b058:	e7ee      	b.n	810b038 <__sfp+0x60>
 810b05a:	bf00      	nop
 810b05c:	0810cf80 	.word	0x0810cf80
 810b060:	ffff0001 	.word	0xffff0001

0810b064 <_fwalk_reent>:
 810b064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b068:	4606      	mov	r6, r0
 810b06a:	4688      	mov	r8, r1
 810b06c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810b070:	2700      	movs	r7, #0
 810b072:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810b076:	f1b9 0901 	subs.w	r9, r9, #1
 810b07a:	d505      	bpl.n	810b088 <_fwalk_reent+0x24>
 810b07c:	6824      	ldr	r4, [r4, #0]
 810b07e:	2c00      	cmp	r4, #0
 810b080:	d1f7      	bne.n	810b072 <_fwalk_reent+0xe>
 810b082:	4638      	mov	r0, r7
 810b084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b088:	89ab      	ldrh	r3, [r5, #12]
 810b08a:	2b01      	cmp	r3, #1
 810b08c:	d907      	bls.n	810b09e <_fwalk_reent+0x3a>
 810b08e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810b092:	3301      	adds	r3, #1
 810b094:	d003      	beq.n	810b09e <_fwalk_reent+0x3a>
 810b096:	4629      	mov	r1, r5
 810b098:	4630      	mov	r0, r6
 810b09a:	47c0      	blx	r8
 810b09c:	4307      	orrs	r7, r0
 810b09e:	3568      	adds	r5, #104	; 0x68
 810b0a0:	e7e9      	b.n	810b076 <_fwalk_reent+0x12>

0810b0a2 <rshift>:
 810b0a2:	6903      	ldr	r3, [r0, #16]
 810b0a4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810b0a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810b0ac:	ea4f 1261 	mov.w	r2, r1, asr #5
 810b0b0:	f100 0414 	add.w	r4, r0, #20
 810b0b4:	dd45      	ble.n	810b142 <rshift+0xa0>
 810b0b6:	f011 011f 	ands.w	r1, r1, #31
 810b0ba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810b0be:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810b0c2:	d10c      	bne.n	810b0de <rshift+0x3c>
 810b0c4:	f100 0710 	add.w	r7, r0, #16
 810b0c8:	4629      	mov	r1, r5
 810b0ca:	42b1      	cmp	r1, r6
 810b0cc:	d334      	bcc.n	810b138 <rshift+0x96>
 810b0ce:	1a9b      	subs	r3, r3, r2
 810b0d0:	009b      	lsls	r3, r3, #2
 810b0d2:	1eea      	subs	r2, r5, #3
 810b0d4:	4296      	cmp	r6, r2
 810b0d6:	bf38      	it	cc
 810b0d8:	2300      	movcc	r3, #0
 810b0da:	4423      	add	r3, r4
 810b0dc:	e015      	b.n	810b10a <rshift+0x68>
 810b0de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810b0e2:	f1c1 0820 	rsb	r8, r1, #32
 810b0e6:	40cf      	lsrs	r7, r1
 810b0e8:	f105 0e04 	add.w	lr, r5, #4
 810b0ec:	46a1      	mov	r9, r4
 810b0ee:	4576      	cmp	r6, lr
 810b0f0:	46f4      	mov	ip, lr
 810b0f2:	d815      	bhi.n	810b120 <rshift+0x7e>
 810b0f4:	1a9a      	subs	r2, r3, r2
 810b0f6:	0092      	lsls	r2, r2, #2
 810b0f8:	3a04      	subs	r2, #4
 810b0fa:	3501      	adds	r5, #1
 810b0fc:	42ae      	cmp	r6, r5
 810b0fe:	bf38      	it	cc
 810b100:	2200      	movcc	r2, #0
 810b102:	18a3      	adds	r3, r4, r2
 810b104:	50a7      	str	r7, [r4, r2]
 810b106:	b107      	cbz	r7, 810b10a <rshift+0x68>
 810b108:	3304      	adds	r3, #4
 810b10a:	1b1a      	subs	r2, r3, r4
 810b10c:	42a3      	cmp	r3, r4
 810b10e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810b112:	bf08      	it	eq
 810b114:	2300      	moveq	r3, #0
 810b116:	6102      	str	r2, [r0, #16]
 810b118:	bf08      	it	eq
 810b11a:	6143      	streq	r3, [r0, #20]
 810b11c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b120:	f8dc c000 	ldr.w	ip, [ip]
 810b124:	fa0c fc08 	lsl.w	ip, ip, r8
 810b128:	ea4c 0707 	orr.w	r7, ip, r7
 810b12c:	f849 7b04 	str.w	r7, [r9], #4
 810b130:	f85e 7b04 	ldr.w	r7, [lr], #4
 810b134:	40cf      	lsrs	r7, r1
 810b136:	e7da      	b.n	810b0ee <rshift+0x4c>
 810b138:	f851 cb04 	ldr.w	ip, [r1], #4
 810b13c:	f847 cf04 	str.w	ip, [r7, #4]!
 810b140:	e7c3      	b.n	810b0ca <rshift+0x28>
 810b142:	4623      	mov	r3, r4
 810b144:	e7e1      	b.n	810b10a <rshift+0x68>

0810b146 <__hexdig_fun>:
 810b146:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810b14a:	2b09      	cmp	r3, #9
 810b14c:	d802      	bhi.n	810b154 <__hexdig_fun+0xe>
 810b14e:	3820      	subs	r0, #32
 810b150:	b2c0      	uxtb	r0, r0
 810b152:	4770      	bx	lr
 810b154:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810b158:	2b05      	cmp	r3, #5
 810b15a:	d801      	bhi.n	810b160 <__hexdig_fun+0x1a>
 810b15c:	3847      	subs	r0, #71	; 0x47
 810b15e:	e7f7      	b.n	810b150 <__hexdig_fun+0xa>
 810b160:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810b164:	2b05      	cmp	r3, #5
 810b166:	d801      	bhi.n	810b16c <__hexdig_fun+0x26>
 810b168:	3827      	subs	r0, #39	; 0x27
 810b16a:	e7f1      	b.n	810b150 <__hexdig_fun+0xa>
 810b16c:	2000      	movs	r0, #0
 810b16e:	4770      	bx	lr

0810b170 <__gethex>:
 810b170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b174:	ed2d 8b02 	vpush	{d8}
 810b178:	b089      	sub	sp, #36	; 0x24
 810b17a:	ee08 0a10 	vmov	s16, r0
 810b17e:	9304      	str	r3, [sp, #16]
 810b180:	4bb4      	ldr	r3, [pc, #720]	; (810b454 <__gethex+0x2e4>)
 810b182:	681b      	ldr	r3, [r3, #0]
 810b184:	9301      	str	r3, [sp, #4]
 810b186:	4618      	mov	r0, r3
 810b188:	468b      	mov	fp, r1
 810b18a:	4690      	mov	r8, r2
 810b18c:	f7f5 f8a8 	bl	81002e0 <strlen>
 810b190:	9b01      	ldr	r3, [sp, #4]
 810b192:	f8db 2000 	ldr.w	r2, [fp]
 810b196:	4403      	add	r3, r0
 810b198:	4682      	mov	sl, r0
 810b19a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810b19e:	9305      	str	r3, [sp, #20]
 810b1a0:	1c93      	adds	r3, r2, #2
 810b1a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810b1a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810b1aa:	32fe      	adds	r2, #254	; 0xfe
 810b1ac:	18d1      	adds	r1, r2, r3
 810b1ae:	461f      	mov	r7, r3
 810b1b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 810b1b4:	9100      	str	r1, [sp, #0]
 810b1b6:	2830      	cmp	r0, #48	; 0x30
 810b1b8:	d0f8      	beq.n	810b1ac <__gethex+0x3c>
 810b1ba:	f7ff ffc4 	bl	810b146 <__hexdig_fun>
 810b1be:	4604      	mov	r4, r0
 810b1c0:	2800      	cmp	r0, #0
 810b1c2:	d13a      	bne.n	810b23a <__gethex+0xca>
 810b1c4:	9901      	ldr	r1, [sp, #4]
 810b1c6:	4652      	mov	r2, sl
 810b1c8:	4638      	mov	r0, r7
 810b1ca:	f001 fc28 	bl	810ca1e <strncmp>
 810b1ce:	4605      	mov	r5, r0
 810b1d0:	2800      	cmp	r0, #0
 810b1d2:	d168      	bne.n	810b2a6 <__gethex+0x136>
 810b1d4:	f817 000a 	ldrb.w	r0, [r7, sl]
 810b1d8:	eb07 060a 	add.w	r6, r7, sl
 810b1dc:	f7ff ffb3 	bl	810b146 <__hexdig_fun>
 810b1e0:	2800      	cmp	r0, #0
 810b1e2:	d062      	beq.n	810b2aa <__gethex+0x13a>
 810b1e4:	4633      	mov	r3, r6
 810b1e6:	7818      	ldrb	r0, [r3, #0]
 810b1e8:	2830      	cmp	r0, #48	; 0x30
 810b1ea:	461f      	mov	r7, r3
 810b1ec:	f103 0301 	add.w	r3, r3, #1
 810b1f0:	d0f9      	beq.n	810b1e6 <__gethex+0x76>
 810b1f2:	f7ff ffa8 	bl	810b146 <__hexdig_fun>
 810b1f6:	2301      	movs	r3, #1
 810b1f8:	fab0 f480 	clz	r4, r0
 810b1fc:	0964      	lsrs	r4, r4, #5
 810b1fe:	4635      	mov	r5, r6
 810b200:	9300      	str	r3, [sp, #0]
 810b202:	463a      	mov	r2, r7
 810b204:	4616      	mov	r6, r2
 810b206:	3201      	adds	r2, #1
 810b208:	7830      	ldrb	r0, [r6, #0]
 810b20a:	f7ff ff9c 	bl	810b146 <__hexdig_fun>
 810b20e:	2800      	cmp	r0, #0
 810b210:	d1f8      	bne.n	810b204 <__gethex+0x94>
 810b212:	9901      	ldr	r1, [sp, #4]
 810b214:	4652      	mov	r2, sl
 810b216:	4630      	mov	r0, r6
 810b218:	f001 fc01 	bl	810ca1e <strncmp>
 810b21c:	b980      	cbnz	r0, 810b240 <__gethex+0xd0>
 810b21e:	b94d      	cbnz	r5, 810b234 <__gethex+0xc4>
 810b220:	eb06 050a 	add.w	r5, r6, sl
 810b224:	462a      	mov	r2, r5
 810b226:	4616      	mov	r6, r2
 810b228:	3201      	adds	r2, #1
 810b22a:	7830      	ldrb	r0, [r6, #0]
 810b22c:	f7ff ff8b 	bl	810b146 <__hexdig_fun>
 810b230:	2800      	cmp	r0, #0
 810b232:	d1f8      	bne.n	810b226 <__gethex+0xb6>
 810b234:	1bad      	subs	r5, r5, r6
 810b236:	00ad      	lsls	r5, r5, #2
 810b238:	e004      	b.n	810b244 <__gethex+0xd4>
 810b23a:	2400      	movs	r4, #0
 810b23c:	4625      	mov	r5, r4
 810b23e:	e7e0      	b.n	810b202 <__gethex+0x92>
 810b240:	2d00      	cmp	r5, #0
 810b242:	d1f7      	bne.n	810b234 <__gethex+0xc4>
 810b244:	7833      	ldrb	r3, [r6, #0]
 810b246:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810b24a:	2b50      	cmp	r3, #80	; 0x50
 810b24c:	d13b      	bne.n	810b2c6 <__gethex+0x156>
 810b24e:	7873      	ldrb	r3, [r6, #1]
 810b250:	2b2b      	cmp	r3, #43	; 0x2b
 810b252:	d02c      	beq.n	810b2ae <__gethex+0x13e>
 810b254:	2b2d      	cmp	r3, #45	; 0x2d
 810b256:	d02e      	beq.n	810b2b6 <__gethex+0x146>
 810b258:	1c71      	adds	r1, r6, #1
 810b25a:	f04f 0900 	mov.w	r9, #0
 810b25e:	7808      	ldrb	r0, [r1, #0]
 810b260:	f7ff ff71 	bl	810b146 <__hexdig_fun>
 810b264:	1e43      	subs	r3, r0, #1
 810b266:	b2db      	uxtb	r3, r3
 810b268:	2b18      	cmp	r3, #24
 810b26a:	d82c      	bhi.n	810b2c6 <__gethex+0x156>
 810b26c:	f1a0 0210 	sub.w	r2, r0, #16
 810b270:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810b274:	f7ff ff67 	bl	810b146 <__hexdig_fun>
 810b278:	1e43      	subs	r3, r0, #1
 810b27a:	b2db      	uxtb	r3, r3
 810b27c:	2b18      	cmp	r3, #24
 810b27e:	d91d      	bls.n	810b2bc <__gethex+0x14c>
 810b280:	f1b9 0f00 	cmp.w	r9, #0
 810b284:	d000      	beq.n	810b288 <__gethex+0x118>
 810b286:	4252      	negs	r2, r2
 810b288:	4415      	add	r5, r2
 810b28a:	f8cb 1000 	str.w	r1, [fp]
 810b28e:	b1e4      	cbz	r4, 810b2ca <__gethex+0x15a>
 810b290:	9b00      	ldr	r3, [sp, #0]
 810b292:	2b00      	cmp	r3, #0
 810b294:	bf14      	ite	ne
 810b296:	2700      	movne	r7, #0
 810b298:	2706      	moveq	r7, #6
 810b29a:	4638      	mov	r0, r7
 810b29c:	b009      	add	sp, #36	; 0x24
 810b29e:	ecbd 8b02 	vpop	{d8}
 810b2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b2a6:	463e      	mov	r6, r7
 810b2a8:	4625      	mov	r5, r4
 810b2aa:	2401      	movs	r4, #1
 810b2ac:	e7ca      	b.n	810b244 <__gethex+0xd4>
 810b2ae:	f04f 0900 	mov.w	r9, #0
 810b2b2:	1cb1      	adds	r1, r6, #2
 810b2b4:	e7d3      	b.n	810b25e <__gethex+0xee>
 810b2b6:	f04f 0901 	mov.w	r9, #1
 810b2ba:	e7fa      	b.n	810b2b2 <__gethex+0x142>
 810b2bc:	230a      	movs	r3, #10
 810b2be:	fb03 0202 	mla	r2, r3, r2, r0
 810b2c2:	3a10      	subs	r2, #16
 810b2c4:	e7d4      	b.n	810b270 <__gethex+0x100>
 810b2c6:	4631      	mov	r1, r6
 810b2c8:	e7df      	b.n	810b28a <__gethex+0x11a>
 810b2ca:	1bf3      	subs	r3, r6, r7
 810b2cc:	3b01      	subs	r3, #1
 810b2ce:	4621      	mov	r1, r4
 810b2d0:	2b07      	cmp	r3, #7
 810b2d2:	dc0b      	bgt.n	810b2ec <__gethex+0x17c>
 810b2d4:	ee18 0a10 	vmov	r0, s16
 810b2d8:	f000 fad8 	bl	810b88c <_Balloc>
 810b2dc:	4604      	mov	r4, r0
 810b2de:	b940      	cbnz	r0, 810b2f2 <__gethex+0x182>
 810b2e0:	4b5d      	ldr	r3, [pc, #372]	; (810b458 <__gethex+0x2e8>)
 810b2e2:	4602      	mov	r2, r0
 810b2e4:	21de      	movs	r1, #222	; 0xde
 810b2e6:	485d      	ldr	r0, [pc, #372]	; (810b45c <__gethex+0x2ec>)
 810b2e8:	f001 fbcc 	bl	810ca84 <__assert_func>
 810b2ec:	3101      	adds	r1, #1
 810b2ee:	105b      	asrs	r3, r3, #1
 810b2f0:	e7ee      	b.n	810b2d0 <__gethex+0x160>
 810b2f2:	f100 0914 	add.w	r9, r0, #20
 810b2f6:	f04f 0b00 	mov.w	fp, #0
 810b2fa:	f1ca 0301 	rsb	r3, sl, #1
 810b2fe:	f8cd 9008 	str.w	r9, [sp, #8]
 810b302:	f8cd b000 	str.w	fp, [sp]
 810b306:	9306      	str	r3, [sp, #24]
 810b308:	42b7      	cmp	r7, r6
 810b30a:	d340      	bcc.n	810b38e <__gethex+0x21e>
 810b30c:	9802      	ldr	r0, [sp, #8]
 810b30e:	9b00      	ldr	r3, [sp, #0]
 810b310:	f840 3b04 	str.w	r3, [r0], #4
 810b314:	eba0 0009 	sub.w	r0, r0, r9
 810b318:	1080      	asrs	r0, r0, #2
 810b31a:	0146      	lsls	r6, r0, #5
 810b31c:	6120      	str	r0, [r4, #16]
 810b31e:	4618      	mov	r0, r3
 810b320:	f000 fba6 	bl	810ba70 <__hi0bits>
 810b324:	1a30      	subs	r0, r6, r0
 810b326:	f8d8 6000 	ldr.w	r6, [r8]
 810b32a:	42b0      	cmp	r0, r6
 810b32c:	dd63      	ble.n	810b3f6 <__gethex+0x286>
 810b32e:	1b87      	subs	r7, r0, r6
 810b330:	4639      	mov	r1, r7
 810b332:	4620      	mov	r0, r4
 810b334:	f000 ff4a 	bl	810c1cc <__any_on>
 810b338:	4682      	mov	sl, r0
 810b33a:	b1a8      	cbz	r0, 810b368 <__gethex+0x1f8>
 810b33c:	1e7b      	subs	r3, r7, #1
 810b33e:	1159      	asrs	r1, r3, #5
 810b340:	f003 021f 	and.w	r2, r3, #31
 810b344:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810b348:	f04f 0a01 	mov.w	sl, #1
 810b34c:	fa0a f202 	lsl.w	r2, sl, r2
 810b350:	420a      	tst	r2, r1
 810b352:	d009      	beq.n	810b368 <__gethex+0x1f8>
 810b354:	4553      	cmp	r3, sl
 810b356:	dd05      	ble.n	810b364 <__gethex+0x1f4>
 810b358:	1eb9      	subs	r1, r7, #2
 810b35a:	4620      	mov	r0, r4
 810b35c:	f000 ff36 	bl	810c1cc <__any_on>
 810b360:	2800      	cmp	r0, #0
 810b362:	d145      	bne.n	810b3f0 <__gethex+0x280>
 810b364:	f04f 0a02 	mov.w	sl, #2
 810b368:	4639      	mov	r1, r7
 810b36a:	4620      	mov	r0, r4
 810b36c:	f7ff fe99 	bl	810b0a2 <rshift>
 810b370:	443d      	add	r5, r7
 810b372:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810b376:	42ab      	cmp	r3, r5
 810b378:	da4c      	bge.n	810b414 <__gethex+0x2a4>
 810b37a:	ee18 0a10 	vmov	r0, s16
 810b37e:	4621      	mov	r1, r4
 810b380:	f000 fac4 	bl	810b90c <_Bfree>
 810b384:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810b386:	2300      	movs	r3, #0
 810b388:	6013      	str	r3, [r2, #0]
 810b38a:	27a3      	movs	r7, #163	; 0xa3
 810b38c:	e785      	b.n	810b29a <__gethex+0x12a>
 810b38e:	1e73      	subs	r3, r6, #1
 810b390:	9a05      	ldr	r2, [sp, #20]
 810b392:	9303      	str	r3, [sp, #12]
 810b394:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810b398:	4293      	cmp	r3, r2
 810b39a:	d019      	beq.n	810b3d0 <__gethex+0x260>
 810b39c:	f1bb 0f20 	cmp.w	fp, #32
 810b3a0:	d107      	bne.n	810b3b2 <__gethex+0x242>
 810b3a2:	9b02      	ldr	r3, [sp, #8]
 810b3a4:	9a00      	ldr	r2, [sp, #0]
 810b3a6:	f843 2b04 	str.w	r2, [r3], #4
 810b3aa:	9302      	str	r3, [sp, #8]
 810b3ac:	2300      	movs	r3, #0
 810b3ae:	9300      	str	r3, [sp, #0]
 810b3b0:	469b      	mov	fp, r3
 810b3b2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810b3b6:	f7ff fec6 	bl	810b146 <__hexdig_fun>
 810b3ba:	9b00      	ldr	r3, [sp, #0]
 810b3bc:	f000 000f 	and.w	r0, r0, #15
 810b3c0:	fa00 f00b 	lsl.w	r0, r0, fp
 810b3c4:	4303      	orrs	r3, r0
 810b3c6:	9300      	str	r3, [sp, #0]
 810b3c8:	f10b 0b04 	add.w	fp, fp, #4
 810b3cc:	9b03      	ldr	r3, [sp, #12]
 810b3ce:	e00d      	b.n	810b3ec <__gethex+0x27c>
 810b3d0:	9b03      	ldr	r3, [sp, #12]
 810b3d2:	9a06      	ldr	r2, [sp, #24]
 810b3d4:	4413      	add	r3, r2
 810b3d6:	42bb      	cmp	r3, r7
 810b3d8:	d3e0      	bcc.n	810b39c <__gethex+0x22c>
 810b3da:	4618      	mov	r0, r3
 810b3dc:	9901      	ldr	r1, [sp, #4]
 810b3de:	9307      	str	r3, [sp, #28]
 810b3e0:	4652      	mov	r2, sl
 810b3e2:	f001 fb1c 	bl	810ca1e <strncmp>
 810b3e6:	9b07      	ldr	r3, [sp, #28]
 810b3e8:	2800      	cmp	r0, #0
 810b3ea:	d1d7      	bne.n	810b39c <__gethex+0x22c>
 810b3ec:	461e      	mov	r6, r3
 810b3ee:	e78b      	b.n	810b308 <__gethex+0x198>
 810b3f0:	f04f 0a03 	mov.w	sl, #3
 810b3f4:	e7b8      	b.n	810b368 <__gethex+0x1f8>
 810b3f6:	da0a      	bge.n	810b40e <__gethex+0x29e>
 810b3f8:	1a37      	subs	r7, r6, r0
 810b3fa:	4621      	mov	r1, r4
 810b3fc:	ee18 0a10 	vmov	r0, s16
 810b400:	463a      	mov	r2, r7
 810b402:	f000 fc9f 	bl	810bd44 <__lshift>
 810b406:	1bed      	subs	r5, r5, r7
 810b408:	4604      	mov	r4, r0
 810b40a:	f100 0914 	add.w	r9, r0, #20
 810b40e:	f04f 0a00 	mov.w	sl, #0
 810b412:	e7ae      	b.n	810b372 <__gethex+0x202>
 810b414:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810b418:	42a8      	cmp	r0, r5
 810b41a:	dd72      	ble.n	810b502 <__gethex+0x392>
 810b41c:	1b45      	subs	r5, r0, r5
 810b41e:	42ae      	cmp	r6, r5
 810b420:	dc36      	bgt.n	810b490 <__gethex+0x320>
 810b422:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810b426:	2b02      	cmp	r3, #2
 810b428:	d02a      	beq.n	810b480 <__gethex+0x310>
 810b42a:	2b03      	cmp	r3, #3
 810b42c:	d02c      	beq.n	810b488 <__gethex+0x318>
 810b42e:	2b01      	cmp	r3, #1
 810b430:	d11c      	bne.n	810b46c <__gethex+0x2fc>
 810b432:	42ae      	cmp	r6, r5
 810b434:	d11a      	bne.n	810b46c <__gethex+0x2fc>
 810b436:	2e01      	cmp	r6, #1
 810b438:	d112      	bne.n	810b460 <__gethex+0x2f0>
 810b43a:	9a04      	ldr	r2, [sp, #16]
 810b43c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810b440:	6013      	str	r3, [r2, #0]
 810b442:	2301      	movs	r3, #1
 810b444:	6123      	str	r3, [r4, #16]
 810b446:	f8c9 3000 	str.w	r3, [r9]
 810b44a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810b44c:	2762      	movs	r7, #98	; 0x62
 810b44e:	601c      	str	r4, [r3, #0]
 810b450:	e723      	b.n	810b29a <__gethex+0x12a>
 810b452:	bf00      	nop
 810b454:	0810d26c 	.word	0x0810d26c
 810b458:	0810d190 	.word	0x0810d190
 810b45c:	0810d204 	.word	0x0810d204
 810b460:	1e71      	subs	r1, r6, #1
 810b462:	4620      	mov	r0, r4
 810b464:	f000 feb2 	bl	810c1cc <__any_on>
 810b468:	2800      	cmp	r0, #0
 810b46a:	d1e6      	bne.n	810b43a <__gethex+0x2ca>
 810b46c:	ee18 0a10 	vmov	r0, s16
 810b470:	4621      	mov	r1, r4
 810b472:	f000 fa4b 	bl	810b90c <_Bfree>
 810b476:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810b478:	2300      	movs	r3, #0
 810b47a:	6013      	str	r3, [r2, #0]
 810b47c:	2750      	movs	r7, #80	; 0x50
 810b47e:	e70c      	b.n	810b29a <__gethex+0x12a>
 810b480:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b482:	2b00      	cmp	r3, #0
 810b484:	d1f2      	bne.n	810b46c <__gethex+0x2fc>
 810b486:	e7d8      	b.n	810b43a <__gethex+0x2ca>
 810b488:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b48a:	2b00      	cmp	r3, #0
 810b48c:	d1d5      	bne.n	810b43a <__gethex+0x2ca>
 810b48e:	e7ed      	b.n	810b46c <__gethex+0x2fc>
 810b490:	1e6f      	subs	r7, r5, #1
 810b492:	f1ba 0f00 	cmp.w	sl, #0
 810b496:	d131      	bne.n	810b4fc <__gethex+0x38c>
 810b498:	b127      	cbz	r7, 810b4a4 <__gethex+0x334>
 810b49a:	4639      	mov	r1, r7
 810b49c:	4620      	mov	r0, r4
 810b49e:	f000 fe95 	bl	810c1cc <__any_on>
 810b4a2:	4682      	mov	sl, r0
 810b4a4:	117b      	asrs	r3, r7, #5
 810b4a6:	2101      	movs	r1, #1
 810b4a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810b4ac:	f007 071f 	and.w	r7, r7, #31
 810b4b0:	fa01 f707 	lsl.w	r7, r1, r7
 810b4b4:	421f      	tst	r7, r3
 810b4b6:	4629      	mov	r1, r5
 810b4b8:	4620      	mov	r0, r4
 810b4ba:	bf18      	it	ne
 810b4bc:	f04a 0a02 	orrne.w	sl, sl, #2
 810b4c0:	1b76      	subs	r6, r6, r5
 810b4c2:	f7ff fdee 	bl	810b0a2 <rshift>
 810b4c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810b4ca:	2702      	movs	r7, #2
 810b4cc:	f1ba 0f00 	cmp.w	sl, #0
 810b4d0:	d048      	beq.n	810b564 <__gethex+0x3f4>
 810b4d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810b4d6:	2b02      	cmp	r3, #2
 810b4d8:	d015      	beq.n	810b506 <__gethex+0x396>
 810b4da:	2b03      	cmp	r3, #3
 810b4dc:	d017      	beq.n	810b50e <__gethex+0x39e>
 810b4de:	2b01      	cmp	r3, #1
 810b4e0:	d109      	bne.n	810b4f6 <__gethex+0x386>
 810b4e2:	f01a 0f02 	tst.w	sl, #2
 810b4e6:	d006      	beq.n	810b4f6 <__gethex+0x386>
 810b4e8:	f8d9 0000 	ldr.w	r0, [r9]
 810b4ec:	ea4a 0a00 	orr.w	sl, sl, r0
 810b4f0:	f01a 0f01 	tst.w	sl, #1
 810b4f4:	d10e      	bne.n	810b514 <__gethex+0x3a4>
 810b4f6:	f047 0710 	orr.w	r7, r7, #16
 810b4fa:	e033      	b.n	810b564 <__gethex+0x3f4>
 810b4fc:	f04f 0a01 	mov.w	sl, #1
 810b500:	e7d0      	b.n	810b4a4 <__gethex+0x334>
 810b502:	2701      	movs	r7, #1
 810b504:	e7e2      	b.n	810b4cc <__gethex+0x35c>
 810b506:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b508:	f1c3 0301 	rsb	r3, r3, #1
 810b50c:	9315      	str	r3, [sp, #84]	; 0x54
 810b50e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b510:	2b00      	cmp	r3, #0
 810b512:	d0f0      	beq.n	810b4f6 <__gethex+0x386>
 810b514:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810b518:	f104 0314 	add.w	r3, r4, #20
 810b51c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810b520:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810b524:	f04f 0c00 	mov.w	ip, #0
 810b528:	4618      	mov	r0, r3
 810b52a:	f853 2b04 	ldr.w	r2, [r3], #4
 810b52e:	f1b2 3fff 	cmp.w	r2, #4294967295
 810b532:	d01c      	beq.n	810b56e <__gethex+0x3fe>
 810b534:	3201      	adds	r2, #1
 810b536:	6002      	str	r2, [r0, #0]
 810b538:	2f02      	cmp	r7, #2
 810b53a:	f104 0314 	add.w	r3, r4, #20
 810b53e:	d13f      	bne.n	810b5c0 <__gethex+0x450>
 810b540:	f8d8 2000 	ldr.w	r2, [r8]
 810b544:	3a01      	subs	r2, #1
 810b546:	42b2      	cmp	r2, r6
 810b548:	d10a      	bne.n	810b560 <__gethex+0x3f0>
 810b54a:	1171      	asrs	r1, r6, #5
 810b54c:	2201      	movs	r2, #1
 810b54e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810b552:	f006 061f 	and.w	r6, r6, #31
 810b556:	fa02 f606 	lsl.w	r6, r2, r6
 810b55a:	421e      	tst	r6, r3
 810b55c:	bf18      	it	ne
 810b55e:	4617      	movne	r7, r2
 810b560:	f047 0720 	orr.w	r7, r7, #32
 810b564:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810b566:	601c      	str	r4, [r3, #0]
 810b568:	9b04      	ldr	r3, [sp, #16]
 810b56a:	601d      	str	r5, [r3, #0]
 810b56c:	e695      	b.n	810b29a <__gethex+0x12a>
 810b56e:	4299      	cmp	r1, r3
 810b570:	f843 cc04 	str.w	ip, [r3, #-4]
 810b574:	d8d8      	bhi.n	810b528 <__gethex+0x3b8>
 810b576:	68a3      	ldr	r3, [r4, #8]
 810b578:	459b      	cmp	fp, r3
 810b57a:	db19      	blt.n	810b5b0 <__gethex+0x440>
 810b57c:	6861      	ldr	r1, [r4, #4]
 810b57e:	ee18 0a10 	vmov	r0, s16
 810b582:	3101      	adds	r1, #1
 810b584:	f000 f982 	bl	810b88c <_Balloc>
 810b588:	4681      	mov	r9, r0
 810b58a:	b918      	cbnz	r0, 810b594 <__gethex+0x424>
 810b58c:	4b1a      	ldr	r3, [pc, #104]	; (810b5f8 <__gethex+0x488>)
 810b58e:	4602      	mov	r2, r0
 810b590:	2184      	movs	r1, #132	; 0x84
 810b592:	e6a8      	b.n	810b2e6 <__gethex+0x176>
 810b594:	6922      	ldr	r2, [r4, #16]
 810b596:	3202      	adds	r2, #2
 810b598:	f104 010c 	add.w	r1, r4, #12
 810b59c:	0092      	lsls	r2, r2, #2
 810b59e:	300c      	adds	r0, #12
 810b5a0:	f7fc fe9e 	bl	81082e0 <memcpy>
 810b5a4:	4621      	mov	r1, r4
 810b5a6:	ee18 0a10 	vmov	r0, s16
 810b5aa:	f000 f9af 	bl	810b90c <_Bfree>
 810b5ae:	464c      	mov	r4, r9
 810b5b0:	6923      	ldr	r3, [r4, #16]
 810b5b2:	1c5a      	adds	r2, r3, #1
 810b5b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810b5b8:	6122      	str	r2, [r4, #16]
 810b5ba:	2201      	movs	r2, #1
 810b5bc:	615a      	str	r2, [r3, #20]
 810b5be:	e7bb      	b.n	810b538 <__gethex+0x3c8>
 810b5c0:	6922      	ldr	r2, [r4, #16]
 810b5c2:	455a      	cmp	r2, fp
 810b5c4:	dd0b      	ble.n	810b5de <__gethex+0x46e>
 810b5c6:	2101      	movs	r1, #1
 810b5c8:	4620      	mov	r0, r4
 810b5ca:	f7ff fd6a 	bl	810b0a2 <rshift>
 810b5ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810b5d2:	3501      	adds	r5, #1
 810b5d4:	42ab      	cmp	r3, r5
 810b5d6:	f6ff aed0 	blt.w	810b37a <__gethex+0x20a>
 810b5da:	2701      	movs	r7, #1
 810b5dc:	e7c0      	b.n	810b560 <__gethex+0x3f0>
 810b5de:	f016 061f 	ands.w	r6, r6, #31
 810b5e2:	d0fa      	beq.n	810b5da <__gethex+0x46a>
 810b5e4:	4453      	add	r3, sl
 810b5e6:	f1c6 0620 	rsb	r6, r6, #32
 810b5ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810b5ee:	f000 fa3f 	bl	810ba70 <__hi0bits>
 810b5f2:	42b0      	cmp	r0, r6
 810b5f4:	dbe7      	blt.n	810b5c6 <__gethex+0x456>
 810b5f6:	e7f0      	b.n	810b5da <__gethex+0x46a>
 810b5f8:	0810d190 	.word	0x0810d190

0810b5fc <L_shift>:
 810b5fc:	f1c2 0208 	rsb	r2, r2, #8
 810b600:	0092      	lsls	r2, r2, #2
 810b602:	b570      	push	{r4, r5, r6, lr}
 810b604:	f1c2 0620 	rsb	r6, r2, #32
 810b608:	6843      	ldr	r3, [r0, #4]
 810b60a:	6804      	ldr	r4, [r0, #0]
 810b60c:	fa03 f506 	lsl.w	r5, r3, r6
 810b610:	432c      	orrs	r4, r5
 810b612:	40d3      	lsrs	r3, r2
 810b614:	6004      	str	r4, [r0, #0]
 810b616:	f840 3f04 	str.w	r3, [r0, #4]!
 810b61a:	4288      	cmp	r0, r1
 810b61c:	d3f4      	bcc.n	810b608 <L_shift+0xc>
 810b61e:	bd70      	pop	{r4, r5, r6, pc}

0810b620 <__match>:
 810b620:	b530      	push	{r4, r5, lr}
 810b622:	6803      	ldr	r3, [r0, #0]
 810b624:	3301      	adds	r3, #1
 810b626:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b62a:	b914      	cbnz	r4, 810b632 <__match+0x12>
 810b62c:	6003      	str	r3, [r0, #0]
 810b62e:	2001      	movs	r0, #1
 810b630:	bd30      	pop	{r4, r5, pc}
 810b632:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b636:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810b63a:	2d19      	cmp	r5, #25
 810b63c:	bf98      	it	ls
 810b63e:	3220      	addls	r2, #32
 810b640:	42a2      	cmp	r2, r4
 810b642:	d0f0      	beq.n	810b626 <__match+0x6>
 810b644:	2000      	movs	r0, #0
 810b646:	e7f3      	b.n	810b630 <__match+0x10>

0810b648 <__hexnan>:
 810b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b64c:	680b      	ldr	r3, [r1, #0]
 810b64e:	115e      	asrs	r6, r3, #5
 810b650:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810b654:	f013 031f 	ands.w	r3, r3, #31
 810b658:	b087      	sub	sp, #28
 810b65a:	bf18      	it	ne
 810b65c:	3604      	addne	r6, #4
 810b65e:	2500      	movs	r5, #0
 810b660:	1f37      	subs	r7, r6, #4
 810b662:	4690      	mov	r8, r2
 810b664:	6802      	ldr	r2, [r0, #0]
 810b666:	9301      	str	r3, [sp, #4]
 810b668:	4682      	mov	sl, r0
 810b66a:	f846 5c04 	str.w	r5, [r6, #-4]
 810b66e:	46b9      	mov	r9, r7
 810b670:	463c      	mov	r4, r7
 810b672:	9502      	str	r5, [sp, #8]
 810b674:	46ab      	mov	fp, r5
 810b676:	7851      	ldrb	r1, [r2, #1]
 810b678:	1c53      	adds	r3, r2, #1
 810b67a:	9303      	str	r3, [sp, #12]
 810b67c:	b341      	cbz	r1, 810b6d0 <__hexnan+0x88>
 810b67e:	4608      	mov	r0, r1
 810b680:	9205      	str	r2, [sp, #20]
 810b682:	9104      	str	r1, [sp, #16]
 810b684:	f7ff fd5f 	bl	810b146 <__hexdig_fun>
 810b688:	2800      	cmp	r0, #0
 810b68a:	d14f      	bne.n	810b72c <__hexnan+0xe4>
 810b68c:	9904      	ldr	r1, [sp, #16]
 810b68e:	9a05      	ldr	r2, [sp, #20]
 810b690:	2920      	cmp	r1, #32
 810b692:	d818      	bhi.n	810b6c6 <__hexnan+0x7e>
 810b694:	9b02      	ldr	r3, [sp, #8]
 810b696:	459b      	cmp	fp, r3
 810b698:	dd13      	ble.n	810b6c2 <__hexnan+0x7a>
 810b69a:	454c      	cmp	r4, r9
 810b69c:	d206      	bcs.n	810b6ac <__hexnan+0x64>
 810b69e:	2d07      	cmp	r5, #7
 810b6a0:	dc04      	bgt.n	810b6ac <__hexnan+0x64>
 810b6a2:	462a      	mov	r2, r5
 810b6a4:	4649      	mov	r1, r9
 810b6a6:	4620      	mov	r0, r4
 810b6a8:	f7ff ffa8 	bl	810b5fc <L_shift>
 810b6ac:	4544      	cmp	r4, r8
 810b6ae:	d950      	bls.n	810b752 <__hexnan+0x10a>
 810b6b0:	2300      	movs	r3, #0
 810b6b2:	f1a4 0904 	sub.w	r9, r4, #4
 810b6b6:	f844 3c04 	str.w	r3, [r4, #-4]
 810b6ba:	f8cd b008 	str.w	fp, [sp, #8]
 810b6be:	464c      	mov	r4, r9
 810b6c0:	461d      	mov	r5, r3
 810b6c2:	9a03      	ldr	r2, [sp, #12]
 810b6c4:	e7d7      	b.n	810b676 <__hexnan+0x2e>
 810b6c6:	2929      	cmp	r1, #41	; 0x29
 810b6c8:	d156      	bne.n	810b778 <__hexnan+0x130>
 810b6ca:	3202      	adds	r2, #2
 810b6cc:	f8ca 2000 	str.w	r2, [sl]
 810b6d0:	f1bb 0f00 	cmp.w	fp, #0
 810b6d4:	d050      	beq.n	810b778 <__hexnan+0x130>
 810b6d6:	454c      	cmp	r4, r9
 810b6d8:	d206      	bcs.n	810b6e8 <__hexnan+0xa0>
 810b6da:	2d07      	cmp	r5, #7
 810b6dc:	dc04      	bgt.n	810b6e8 <__hexnan+0xa0>
 810b6de:	462a      	mov	r2, r5
 810b6e0:	4649      	mov	r1, r9
 810b6e2:	4620      	mov	r0, r4
 810b6e4:	f7ff ff8a 	bl	810b5fc <L_shift>
 810b6e8:	4544      	cmp	r4, r8
 810b6ea:	d934      	bls.n	810b756 <__hexnan+0x10e>
 810b6ec:	f1a8 0204 	sub.w	r2, r8, #4
 810b6f0:	4623      	mov	r3, r4
 810b6f2:	f853 1b04 	ldr.w	r1, [r3], #4
 810b6f6:	f842 1f04 	str.w	r1, [r2, #4]!
 810b6fa:	429f      	cmp	r7, r3
 810b6fc:	d2f9      	bcs.n	810b6f2 <__hexnan+0xaa>
 810b6fe:	1b3b      	subs	r3, r7, r4
 810b700:	f023 0303 	bic.w	r3, r3, #3
 810b704:	3304      	adds	r3, #4
 810b706:	3401      	adds	r4, #1
 810b708:	3e03      	subs	r6, #3
 810b70a:	42b4      	cmp	r4, r6
 810b70c:	bf88      	it	hi
 810b70e:	2304      	movhi	r3, #4
 810b710:	4443      	add	r3, r8
 810b712:	2200      	movs	r2, #0
 810b714:	f843 2b04 	str.w	r2, [r3], #4
 810b718:	429f      	cmp	r7, r3
 810b71a:	d2fb      	bcs.n	810b714 <__hexnan+0xcc>
 810b71c:	683b      	ldr	r3, [r7, #0]
 810b71e:	b91b      	cbnz	r3, 810b728 <__hexnan+0xe0>
 810b720:	4547      	cmp	r7, r8
 810b722:	d127      	bne.n	810b774 <__hexnan+0x12c>
 810b724:	2301      	movs	r3, #1
 810b726:	603b      	str	r3, [r7, #0]
 810b728:	2005      	movs	r0, #5
 810b72a:	e026      	b.n	810b77a <__hexnan+0x132>
 810b72c:	3501      	adds	r5, #1
 810b72e:	2d08      	cmp	r5, #8
 810b730:	f10b 0b01 	add.w	fp, fp, #1
 810b734:	dd06      	ble.n	810b744 <__hexnan+0xfc>
 810b736:	4544      	cmp	r4, r8
 810b738:	d9c3      	bls.n	810b6c2 <__hexnan+0x7a>
 810b73a:	2300      	movs	r3, #0
 810b73c:	f844 3c04 	str.w	r3, [r4, #-4]
 810b740:	2501      	movs	r5, #1
 810b742:	3c04      	subs	r4, #4
 810b744:	6822      	ldr	r2, [r4, #0]
 810b746:	f000 000f 	and.w	r0, r0, #15
 810b74a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810b74e:	6022      	str	r2, [r4, #0]
 810b750:	e7b7      	b.n	810b6c2 <__hexnan+0x7a>
 810b752:	2508      	movs	r5, #8
 810b754:	e7b5      	b.n	810b6c2 <__hexnan+0x7a>
 810b756:	9b01      	ldr	r3, [sp, #4]
 810b758:	2b00      	cmp	r3, #0
 810b75a:	d0df      	beq.n	810b71c <__hexnan+0xd4>
 810b75c:	f04f 32ff 	mov.w	r2, #4294967295
 810b760:	f1c3 0320 	rsb	r3, r3, #32
 810b764:	fa22 f303 	lsr.w	r3, r2, r3
 810b768:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810b76c:	401a      	ands	r2, r3
 810b76e:	f846 2c04 	str.w	r2, [r6, #-4]
 810b772:	e7d3      	b.n	810b71c <__hexnan+0xd4>
 810b774:	3f04      	subs	r7, #4
 810b776:	e7d1      	b.n	810b71c <__hexnan+0xd4>
 810b778:	2004      	movs	r0, #4
 810b77a:	b007      	add	sp, #28
 810b77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810b780 <_localeconv_r>:
 810b780:	4800      	ldr	r0, [pc, #0]	; (810b784 <_localeconv_r+0x4>)
 810b782:	4770      	bx	lr
 810b784:	10000178 	.word	0x10000178

0810b788 <__retarget_lock_init_recursive>:
 810b788:	4770      	bx	lr

0810b78a <__retarget_lock_acquire_recursive>:
 810b78a:	4770      	bx	lr

0810b78c <__retarget_lock_release_recursive>:
 810b78c:	4770      	bx	lr

0810b78e <__swhatbuf_r>:
 810b78e:	b570      	push	{r4, r5, r6, lr}
 810b790:	460e      	mov	r6, r1
 810b792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b796:	2900      	cmp	r1, #0
 810b798:	b096      	sub	sp, #88	; 0x58
 810b79a:	4614      	mov	r4, r2
 810b79c:	461d      	mov	r5, r3
 810b79e:	da08      	bge.n	810b7b2 <__swhatbuf_r+0x24>
 810b7a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810b7a4:	2200      	movs	r2, #0
 810b7a6:	602a      	str	r2, [r5, #0]
 810b7a8:	061a      	lsls	r2, r3, #24
 810b7aa:	d410      	bmi.n	810b7ce <__swhatbuf_r+0x40>
 810b7ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810b7b0:	e00e      	b.n	810b7d0 <__swhatbuf_r+0x42>
 810b7b2:	466a      	mov	r2, sp
 810b7b4:	f001 f9a6 	bl	810cb04 <_fstat_r>
 810b7b8:	2800      	cmp	r0, #0
 810b7ba:	dbf1      	blt.n	810b7a0 <__swhatbuf_r+0x12>
 810b7bc:	9a01      	ldr	r2, [sp, #4]
 810b7be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810b7c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810b7c6:	425a      	negs	r2, r3
 810b7c8:	415a      	adcs	r2, r3
 810b7ca:	602a      	str	r2, [r5, #0]
 810b7cc:	e7ee      	b.n	810b7ac <__swhatbuf_r+0x1e>
 810b7ce:	2340      	movs	r3, #64	; 0x40
 810b7d0:	2000      	movs	r0, #0
 810b7d2:	6023      	str	r3, [r4, #0]
 810b7d4:	b016      	add	sp, #88	; 0x58
 810b7d6:	bd70      	pop	{r4, r5, r6, pc}

0810b7d8 <__smakebuf_r>:
 810b7d8:	898b      	ldrh	r3, [r1, #12]
 810b7da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810b7dc:	079d      	lsls	r5, r3, #30
 810b7de:	4606      	mov	r6, r0
 810b7e0:	460c      	mov	r4, r1
 810b7e2:	d507      	bpl.n	810b7f4 <__smakebuf_r+0x1c>
 810b7e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810b7e8:	6023      	str	r3, [r4, #0]
 810b7ea:	6123      	str	r3, [r4, #16]
 810b7ec:	2301      	movs	r3, #1
 810b7ee:	6163      	str	r3, [r4, #20]
 810b7f0:	b002      	add	sp, #8
 810b7f2:	bd70      	pop	{r4, r5, r6, pc}
 810b7f4:	ab01      	add	r3, sp, #4
 810b7f6:	466a      	mov	r2, sp
 810b7f8:	f7ff ffc9 	bl	810b78e <__swhatbuf_r>
 810b7fc:	9900      	ldr	r1, [sp, #0]
 810b7fe:	4605      	mov	r5, r0
 810b800:	4630      	mov	r0, r6
 810b802:	f000 fd87 	bl	810c314 <_malloc_r>
 810b806:	b948      	cbnz	r0, 810b81c <__smakebuf_r+0x44>
 810b808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b80c:	059a      	lsls	r2, r3, #22
 810b80e:	d4ef      	bmi.n	810b7f0 <__smakebuf_r+0x18>
 810b810:	f023 0303 	bic.w	r3, r3, #3
 810b814:	f043 0302 	orr.w	r3, r3, #2
 810b818:	81a3      	strh	r3, [r4, #12]
 810b81a:	e7e3      	b.n	810b7e4 <__smakebuf_r+0xc>
 810b81c:	4b0d      	ldr	r3, [pc, #52]	; (810b854 <__smakebuf_r+0x7c>)
 810b81e:	62b3      	str	r3, [r6, #40]	; 0x28
 810b820:	89a3      	ldrh	r3, [r4, #12]
 810b822:	6020      	str	r0, [r4, #0]
 810b824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810b828:	81a3      	strh	r3, [r4, #12]
 810b82a:	9b00      	ldr	r3, [sp, #0]
 810b82c:	6163      	str	r3, [r4, #20]
 810b82e:	9b01      	ldr	r3, [sp, #4]
 810b830:	6120      	str	r0, [r4, #16]
 810b832:	b15b      	cbz	r3, 810b84c <__smakebuf_r+0x74>
 810b834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b838:	4630      	mov	r0, r6
 810b83a:	f001 f975 	bl	810cb28 <_isatty_r>
 810b83e:	b128      	cbz	r0, 810b84c <__smakebuf_r+0x74>
 810b840:	89a3      	ldrh	r3, [r4, #12]
 810b842:	f023 0303 	bic.w	r3, r3, #3
 810b846:	f043 0301 	orr.w	r3, r3, #1
 810b84a:	81a3      	strh	r3, [r4, #12]
 810b84c:	89a0      	ldrh	r0, [r4, #12]
 810b84e:	4305      	orrs	r5, r0
 810b850:	81a5      	strh	r5, [r4, #12]
 810b852:	e7cd      	b.n	810b7f0 <__smakebuf_r+0x18>
 810b854:	0810af01 	.word	0x0810af01

0810b858 <malloc>:
 810b858:	4b02      	ldr	r3, [pc, #8]	; (810b864 <malloc+0xc>)
 810b85a:	4601      	mov	r1, r0
 810b85c:	6818      	ldr	r0, [r3, #0]
 810b85e:	f000 bd59 	b.w	810c314 <_malloc_r>
 810b862:	bf00      	nop
 810b864:	10000020 	.word	0x10000020

0810b868 <__ascii_mbtowc>:
 810b868:	b082      	sub	sp, #8
 810b86a:	b901      	cbnz	r1, 810b86e <__ascii_mbtowc+0x6>
 810b86c:	a901      	add	r1, sp, #4
 810b86e:	b142      	cbz	r2, 810b882 <__ascii_mbtowc+0x1a>
 810b870:	b14b      	cbz	r3, 810b886 <__ascii_mbtowc+0x1e>
 810b872:	7813      	ldrb	r3, [r2, #0]
 810b874:	600b      	str	r3, [r1, #0]
 810b876:	7812      	ldrb	r2, [r2, #0]
 810b878:	1e10      	subs	r0, r2, #0
 810b87a:	bf18      	it	ne
 810b87c:	2001      	movne	r0, #1
 810b87e:	b002      	add	sp, #8
 810b880:	4770      	bx	lr
 810b882:	4610      	mov	r0, r2
 810b884:	e7fb      	b.n	810b87e <__ascii_mbtowc+0x16>
 810b886:	f06f 0001 	mvn.w	r0, #1
 810b88a:	e7f8      	b.n	810b87e <__ascii_mbtowc+0x16>

0810b88c <_Balloc>:
 810b88c:	b570      	push	{r4, r5, r6, lr}
 810b88e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810b890:	4604      	mov	r4, r0
 810b892:	460d      	mov	r5, r1
 810b894:	b976      	cbnz	r6, 810b8b4 <_Balloc+0x28>
 810b896:	2010      	movs	r0, #16
 810b898:	f7ff ffde 	bl	810b858 <malloc>
 810b89c:	4602      	mov	r2, r0
 810b89e:	6260      	str	r0, [r4, #36]	; 0x24
 810b8a0:	b920      	cbnz	r0, 810b8ac <_Balloc+0x20>
 810b8a2:	4b18      	ldr	r3, [pc, #96]	; (810b904 <_Balloc+0x78>)
 810b8a4:	4818      	ldr	r0, [pc, #96]	; (810b908 <_Balloc+0x7c>)
 810b8a6:	2166      	movs	r1, #102	; 0x66
 810b8a8:	f001 f8ec 	bl	810ca84 <__assert_func>
 810b8ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810b8b0:	6006      	str	r6, [r0, #0]
 810b8b2:	60c6      	str	r6, [r0, #12]
 810b8b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810b8b6:	68f3      	ldr	r3, [r6, #12]
 810b8b8:	b183      	cbz	r3, 810b8dc <_Balloc+0x50>
 810b8ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b8bc:	68db      	ldr	r3, [r3, #12]
 810b8be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810b8c2:	b9b8      	cbnz	r0, 810b8f4 <_Balloc+0x68>
 810b8c4:	2101      	movs	r1, #1
 810b8c6:	fa01 f605 	lsl.w	r6, r1, r5
 810b8ca:	1d72      	adds	r2, r6, #5
 810b8cc:	0092      	lsls	r2, r2, #2
 810b8ce:	4620      	mov	r0, r4
 810b8d0:	f000 fc9d 	bl	810c20e <_calloc_r>
 810b8d4:	b160      	cbz	r0, 810b8f0 <_Balloc+0x64>
 810b8d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810b8da:	e00e      	b.n	810b8fa <_Balloc+0x6e>
 810b8dc:	2221      	movs	r2, #33	; 0x21
 810b8de:	2104      	movs	r1, #4
 810b8e0:	4620      	mov	r0, r4
 810b8e2:	f000 fc94 	bl	810c20e <_calloc_r>
 810b8e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b8e8:	60f0      	str	r0, [r6, #12]
 810b8ea:	68db      	ldr	r3, [r3, #12]
 810b8ec:	2b00      	cmp	r3, #0
 810b8ee:	d1e4      	bne.n	810b8ba <_Balloc+0x2e>
 810b8f0:	2000      	movs	r0, #0
 810b8f2:	bd70      	pop	{r4, r5, r6, pc}
 810b8f4:	6802      	ldr	r2, [r0, #0]
 810b8f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810b8fa:	2300      	movs	r3, #0
 810b8fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810b900:	e7f7      	b.n	810b8f2 <_Balloc+0x66>
 810b902:	bf00      	nop
 810b904:	0810d11e 	.word	0x0810d11e
 810b908:	0810d280 	.word	0x0810d280

0810b90c <_Bfree>:
 810b90c:	b570      	push	{r4, r5, r6, lr}
 810b90e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810b910:	4605      	mov	r5, r0
 810b912:	460c      	mov	r4, r1
 810b914:	b976      	cbnz	r6, 810b934 <_Bfree+0x28>
 810b916:	2010      	movs	r0, #16
 810b918:	f7ff ff9e 	bl	810b858 <malloc>
 810b91c:	4602      	mov	r2, r0
 810b91e:	6268      	str	r0, [r5, #36]	; 0x24
 810b920:	b920      	cbnz	r0, 810b92c <_Bfree+0x20>
 810b922:	4b09      	ldr	r3, [pc, #36]	; (810b948 <_Bfree+0x3c>)
 810b924:	4809      	ldr	r0, [pc, #36]	; (810b94c <_Bfree+0x40>)
 810b926:	218a      	movs	r1, #138	; 0x8a
 810b928:	f001 f8ac 	bl	810ca84 <__assert_func>
 810b92c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810b930:	6006      	str	r6, [r0, #0]
 810b932:	60c6      	str	r6, [r0, #12]
 810b934:	b13c      	cbz	r4, 810b946 <_Bfree+0x3a>
 810b936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810b938:	6862      	ldr	r2, [r4, #4]
 810b93a:	68db      	ldr	r3, [r3, #12]
 810b93c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810b940:	6021      	str	r1, [r4, #0]
 810b942:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810b946:	bd70      	pop	{r4, r5, r6, pc}
 810b948:	0810d11e 	.word	0x0810d11e
 810b94c:	0810d280 	.word	0x0810d280

0810b950 <__multadd>:
 810b950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b954:	690d      	ldr	r5, [r1, #16]
 810b956:	4607      	mov	r7, r0
 810b958:	460c      	mov	r4, r1
 810b95a:	461e      	mov	r6, r3
 810b95c:	f101 0c14 	add.w	ip, r1, #20
 810b960:	2000      	movs	r0, #0
 810b962:	f8dc 3000 	ldr.w	r3, [ip]
 810b966:	b299      	uxth	r1, r3
 810b968:	fb02 6101 	mla	r1, r2, r1, r6
 810b96c:	0c1e      	lsrs	r6, r3, #16
 810b96e:	0c0b      	lsrs	r3, r1, #16
 810b970:	fb02 3306 	mla	r3, r2, r6, r3
 810b974:	b289      	uxth	r1, r1
 810b976:	3001      	adds	r0, #1
 810b978:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810b97c:	4285      	cmp	r5, r0
 810b97e:	f84c 1b04 	str.w	r1, [ip], #4
 810b982:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810b986:	dcec      	bgt.n	810b962 <__multadd+0x12>
 810b988:	b30e      	cbz	r6, 810b9ce <__multadd+0x7e>
 810b98a:	68a3      	ldr	r3, [r4, #8]
 810b98c:	42ab      	cmp	r3, r5
 810b98e:	dc19      	bgt.n	810b9c4 <__multadd+0x74>
 810b990:	6861      	ldr	r1, [r4, #4]
 810b992:	4638      	mov	r0, r7
 810b994:	3101      	adds	r1, #1
 810b996:	f7ff ff79 	bl	810b88c <_Balloc>
 810b99a:	4680      	mov	r8, r0
 810b99c:	b928      	cbnz	r0, 810b9aa <__multadd+0x5a>
 810b99e:	4602      	mov	r2, r0
 810b9a0:	4b0c      	ldr	r3, [pc, #48]	; (810b9d4 <__multadd+0x84>)
 810b9a2:	480d      	ldr	r0, [pc, #52]	; (810b9d8 <__multadd+0x88>)
 810b9a4:	21b5      	movs	r1, #181	; 0xb5
 810b9a6:	f001 f86d 	bl	810ca84 <__assert_func>
 810b9aa:	6922      	ldr	r2, [r4, #16]
 810b9ac:	3202      	adds	r2, #2
 810b9ae:	f104 010c 	add.w	r1, r4, #12
 810b9b2:	0092      	lsls	r2, r2, #2
 810b9b4:	300c      	adds	r0, #12
 810b9b6:	f7fc fc93 	bl	81082e0 <memcpy>
 810b9ba:	4621      	mov	r1, r4
 810b9bc:	4638      	mov	r0, r7
 810b9be:	f7ff ffa5 	bl	810b90c <_Bfree>
 810b9c2:	4644      	mov	r4, r8
 810b9c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810b9c8:	3501      	adds	r5, #1
 810b9ca:	615e      	str	r6, [r3, #20]
 810b9cc:	6125      	str	r5, [r4, #16]
 810b9ce:	4620      	mov	r0, r4
 810b9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b9d4:	0810d190 	.word	0x0810d190
 810b9d8:	0810d280 	.word	0x0810d280

0810b9dc <__s2b>:
 810b9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b9e0:	460c      	mov	r4, r1
 810b9e2:	4615      	mov	r5, r2
 810b9e4:	461f      	mov	r7, r3
 810b9e6:	2209      	movs	r2, #9
 810b9e8:	3308      	adds	r3, #8
 810b9ea:	4606      	mov	r6, r0
 810b9ec:	fb93 f3f2 	sdiv	r3, r3, r2
 810b9f0:	2100      	movs	r1, #0
 810b9f2:	2201      	movs	r2, #1
 810b9f4:	429a      	cmp	r2, r3
 810b9f6:	db09      	blt.n	810ba0c <__s2b+0x30>
 810b9f8:	4630      	mov	r0, r6
 810b9fa:	f7ff ff47 	bl	810b88c <_Balloc>
 810b9fe:	b940      	cbnz	r0, 810ba12 <__s2b+0x36>
 810ba00:	4602      	mov	r2, r0
 810ba02:	4b19      	ldr	r3, [pc, #100]	; (810ba68 <__s2b+0x8c>)
 810ba04:	4819      	ldr	r0, [pc, #100]	; (810ba6c <__s2b+0x90>)
 810ba06:	21ce      	movs	r1, #206	; 0xce
 810ba08:	f001 f83c 	bl	810ca84 <__assert_func>
 810ba0c:	0052      	lsls	r2, r2, #1
 810ba0e:	3101      	adds	r1, #1
 810ba10:	e7f0      	b.n	810b9f4 <__s2b+0x18>
 810ba12:	9b08      	ldr	r3, [sp, #32]
 810ba14:	6143      	str	r3, [r0, #20]
 810ba16:	2d09      	cmp	r5, #9
 810ba18:	f04f 0301 	mov.w	r3, #1
 810ba1c:	6103      	str	r3, [r0, #16]
 810ba1e:	dd16      	ble.n	810ba4e <__s2b+0x72>
 810ba20:	f104 0909 	add.w	r9, r4, #9
 810ba24:	46c8      	mov	r8, r9
 810ba26:	442c      	add	r4, r5
 810ba28:	f818 3b01 	ldrb.w	r3, [r8], #1
 810ba2c:	4601      	mov	r1, r0
 810ba2e:	3b30      	subs	r3, #48	; 0x30
 810ba30:	220a      	movs	r2, #10
 810ba32:	4630      	mov	r0, r6
 810ba34:	f7ff ff8c 	bl	810b950 <__multadd>
 810ba38:	45a0      	cmp	r8, r4
 810ba3a:	d1f5      	bne.n	810ba28 <__s2b+0x4c>
 810ba3c:	f1a5 0408 	sub.w	r4, r5, #8
 810ba40:	444c      	add	r4, r9
 810ba42:	1b2d      	subs	r5, r5, r4
 810ba44:	1963      	adds	r3, r4, r5
 810ba46:	42bb      	cmp	r3, r7
 810ba48:	db04      	blt.n	810ba54 <__s2b+0x78>
 810ba4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ba4e:	340a      	adds	r4, #10
 810ba50:	2509      	movs	r5, #9
 810ba52:	e7f6      	b.n	810ba42 <__s2b+0x66>
 810ba54:	f814 3b01 	ldrb.w	r3, [r4], #1
 810ba58:	4601      	mov	r1, r0
 810ba5a:	3b30      	subs	r3, #48	; 0x30
 810ba5c:	220a      	movs	r2, #10
 810ba5e:	4630      	mov	r0, r6
 810ba60:	f7ff ff76 	bl	810b950 <__multadd>
 810ba64:	e7ee      	b.n	810ba44 <__s2b+0x68>
 810ba66:	bf00      	nop
 810ba68:	0810d190 	.word	0x0810d190
 810ba6c:	0810d280 	.word	0x0810d280

0810ba70 <__hi0bits>:
 810ba70:	0c03      	lsrs	r3, r0, #16
 810ba72:	041b      	lsls	r3, r3, #16
 810ba74:	b9d3      	cbnz	r3, 810baac <__hi0bits+0x3c>
 810ba76:	0400      	lsls	r0, r0, #16
 810ba78:	2310      	movs	r3, #16
 810ba7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810ba7e:	bf04      	itt	eq
 810ba80:	0200      	lsleq	r0, r0, #8
 810ba82:	3308      	addeq	r3, #8
 810ba84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810ba88:	bf04      	itt	eq
 810ba8a:	0100      	lsleq	r0, r0, #4
 810ba8c:	3304      	addeq	r3, #4
 810ba8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810ba92:	bf04      	itt	eq
 810ba94:	0080      	lsleq	r0, r0, #2
 810ba96:	3302      	addeq	r3, #2
 810ba98:	2800      	cmp	r0, #0
 810ba9a:	db05      	blt.n	810baa8 <__hi0bits+0x38>
 810ba9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810baa0:	f103 0301 	add.w	r3, r3, #1
 810baa4:	bf08      	it	eq
 810baa6:	2320      	moveq	r3, #32
 810baa8:	4618      	mov	r0, r3
 810baaa:	4770      	bx	lr
 810baac:	2300      	movs	r3, #0
 810baae:	e7e4      	b.n	810ba7a <__hi0bits+0xa>

0810bab0 <__lo0bits>:
 810bab0:	6803      	ldr	r3, [r0, #0]
 810bab2:	f013 0207 	ands.w	r2, r3, #7
 810bab6:	4601      	mov	r1, r0
 810bab8:	d00b      	beq.n	810bad2 <__lo0bits+0x22>
 810baba:	07da      	lsls	r2, r3, #31
 810babc:	d423      	bmi.n	810bb06 <__lo0bits+0x56>
 810babe:	0798      	lsls	r0, r3, #30
 810bac0:	bf49      	itett	mi
 810bac2:	085b      	lsrmi	r3, r3, #1
 810bac4:	089b      	lsrpl	r3, r3, #2
 810bac6:	2001      	movmi	r0, #1
 810bac8:	600b      	strmi	r3, [r1, #0]
 810baca:	bf5c      	itt	pl
 810bacc:	600b      	strpl	r3, [r1, #0]
 810bace:	2002      	movpl	r0, #2
 810bad0:	4770      	bx	lr
 810bad2:	b298      	uxth	r0, r3
 810bad4:	b9a8      	cbnz	r0, 810bb02 <__lo0bits+0x52>
 810bad6:	0c1b      	lsrs	r3, r3, #16
 810bad8:	2010      	movs	r0, #16
 810bada:	b2da      	uxtb	r2, r3
 810badc:	b90a      	cbnz	r2, 810bae2 <__lo0bits+0x32>
 810bade:	3008      	adds	r0, #8
 810bae0:	0a1b      	lsrs	r3, r3, #8
 810bae2:	071a      	lsls	r2, r3, #28
 810bae4:	bf04      	itt	eq
 810bae6:	091b      	lsreq	r3, r3, #4
 810bae8:	3004      	addeq	r0, #4
 810baea:	079a      	lsls	r2, r3, #30
 810baec:	bf04      	itt	eq
 810baee:	089b      	lsreq	r3, r3, #2
 810baf0:	3002      	addeq	r0, #2
 810baf2:	07da      	lsls	r2, r3, #31
 810baf4:	d403      	bmi.n	810bafe <__lo0bits+0x4e>
 810baf6:	085b      	lsrs	r3, r3, #1
 810baf8:	f100 0001 	add.w	r0, r0, #1
 810bafc:	d005      	beq.n	810bb0a <__lo0bits+0x5a>
 810bafe:	600b      	str	r3, [r1, #0]
 810bb00:	4770      	bx	lr
 810bb02:	4610      	mov	r0, r2
 810bb04:	e7e9      	b.n	810bada <__lo0bits+0x2a>
 810bb06:	2000      	movs	r0, #0
 810bb08:	4770      	bx	lr
 810bb0a:	2020      	movs	r0, #32
 810bb0c:	4770      	bx	lr
	...

0810bb10 <__i2b>:
 810bb10:	b510      	push	{r4, lr}
 810bb12:	460c      	mov	r4, r1
 810bb14:	2101      	movs	r1, #1
 810bb16:	f7ff feb9 	bl	810b88c <_Balloc>
 810bb1a:	4602      	mov	r2, r0
 810bb1c:	b928      	cbnz	r0, 810bb2a <__i2b+0x1a>
 810bb1e:	4b05      	ldr	r3, [pc, #20]	; (810bb34 <__i2b+0x24>)
 810bb20:	4805      	ldr	r0, [pc, #20]	; (810bb38 <__i2b+0x28>)
 810bb22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810bb26:	f000 ffad 	bl	810ca84 <__assert_func>
 810bb2a:	2301      	movs	r3, #1
 810bb2c:	6144      	str	r4, [r0, #20]
 810bb2e:	6103      	str	r3, [r0, #16]
 810bb30:	bd10      	pop	{r4, pc}
 810bb32:	bf00      	nop
 810bb34:	0810d190 	.word	0x0810d190
 810bb38:	0810d280 	.word	0x0810d280

0810bb3c <__multiply>:
 810bb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bb40:	4691      	mov	r9, r2
 810bb42:	690a      	ldr	r2, [r1, #16]
 810bb44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810bb48:	429a      	cmp	r2, r3
 810bb4a:	bfb8      	it	lt
 810bb4c:	460b      	movlt	r3, r1
 810bb4e:	460c      	mov	r4, r1
 810bb50:	bfbc      	itt	lt
 810bb52:	464c      	movlt	r4, r9
 810bb54:	4699      	movlt	r9, r3
 810bb56:	6927      	ldr	r7, [r4, #16]
 810bb58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810bb5c:	68a3      	ldr	r3, [r4, #8]
 810bb5e:	6861      	ldr	r1, [r4, #4]
 810bb60:	eb07 060a 	add.w	r6, r7, sl
 810bb64:	42b3      	cmp	r3, r6
 810bb66:	b085      	sub	sp, #20
 810bb68:	bfb8      	it	lt
 810bb6a:	3101      	addlt	r1, #1
 810bb6c:	f7ff fe8e 	bl	810b88c <_Balloc>
 810bb70:	b930      	cbnz	r0, 810bb80 <__multiply+0x44>
 810bb72:	4602      	mov	r2, r0
 810bb74:	4b44      	ldr	r3, [pc, #272]	; (810bc88 <__multiply+0x14c>)
 810bb76:	4845      	ldr	r0, [pc, #276]	; (810bc8c <__multiply+0x150>)
 810bb78:	f240 115d 	movw	r1, #349	; 0x15d
 810bb7c:	f000 ff82 	bl	810ca84 <__assert_func>
 810bb80:	f100 0514 	add.w	r5, r0, #20
 810bb84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810bb88:	462b      	mov	r3, r5
 810bb8a:	2200      	movs	r2, #0
 810bb8c:	4543      	cmp	r3, r8
 810bb8e:	d321      	bcc.n	810bbd4 <__multiply+0x98>
 810bb90:	f104 0314 	add.w	r3, r4, #20
 810bb94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810bb98:	f109 0314 	add.w	r3, r9, #20
 810bb9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810bba0:	9202      	str	r2, [sp, #8]
 810bba2:	1b3a      	subs	r2, r7, r4
 810bba4:	3a15      	subs	r2, #21
 810bba6:	f022 0203 	bic.w	r2, r2, #3
 810bbaa:	3204      	adds	r2, #4
 810bbac:	f104 0115 	add.w	r1, r4, #21
 810bbb0:	428f      	cmp	r7, r1
 810bbb2:	bf38      	it	cc
 810bbb4:	2204      	movcc	r2, #4
 810bbb6:	9201      	str	r2, [sp, #4]
 810bbb8:	9a02      	ldr	r2, [sp, #8]
 810bbba:	9303      	str	r3, [sp, #12]
 810bbbc:	429a      	cmp	r2, r3
 810bbbe:	d80c      	bhi.n	810bbda <__multiply+0x9e>
 810bbc0:	2e00      	cmp	r6, #0
 810bbc2:	dd03      	ble.n	810bbcc <__multiply+0x90>
 810bbc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810bbc8:	2b00      	cmp	r3, #0
 810bbca:	d05a      	beq.n	810bc82 <__multiply+0x146>
 810bbcc:	6106      	str	r6, [r0, #16]
 810bbce:	b005      	add	sp, #20
 810bbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bbd4:	f843 2b04 	str.w	r2, [r3], #4
 810bbd8:	e7d8      	b.n	810bb8c <__multiply+0x50>
 810bbda:	f8b3 a000 	ldrh.w	sl, [r3]
 810bbde:	f1ba 0f00 	cmp.w	sl, #0
 810bbe2:	d024      	beq.n	810bc2e <__multiply+0xf2>
 810bbe4:	f104 0e14 	add.w	lr, r4, #20
 810bbe8:	46a9      	mov	r9, r5
 810bbea:	f04f 0c00 	mov.w	ip, #0
 810bbee:	f85e 2b04 	ldr.w	r2, [lr], #4
 810bbf2:	f8d9 1000 	ldr.w	r1, [r9]
 810bbf6:	fa1f fb82 	uxth.w	fp, r2
 810bbfa:	b289      	uxth	r1, r1
 810bbfc:	fb0a 110b 	mla	r1, sl, fp, r1
 810bc00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810bc04:	f8d9 2000 	ldr.w	r2, [r9]
 810bc08:	4461      	add	r1, ip
 810bc0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810bc0e:	fb0a c20b 	mla	r2, sl, fp, ip
 810bc12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810bc16:	b289      	uxth	r1, r1
 810bc18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810bc1c:	4577      	cmp	r7, lr
 810bc1e:	f849 1b04 	str.w	r1, [r9], #4
 810bc22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810bc26:	d8e2      	bhi.n	810bbee <__multiply+0xb2>
 810bc28:	9a01      	ldr	r2, [sp, #4]
 810bc2a:	f845 c002 	str.w	ip, [r5, r2]
 810bc2e:	9a03      	ldr	r2, [sp, #12]
 810bc30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810bc34:	3304      	adds	r3, #4
 810bc36:	f1b9 0f00 	cmp.w	r9, #0
 810bc3a:	d020      	beq.n	810bc7e <__multiply+0x142>
 810bc3c:	6829      	ldr	r1, [r5, #0]
 810bc3e:	f104 0c14 	add.w	ip, r4, #20
 810bc42:	46ae      	mov	lr, r5
 810bc44:	f04f 0a00 	mov.w	sl, #0
 810bc48:	f8bc b000 	ldrh.w	fp, [ip]
 810bc4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810bc50:	fb09 220b 	mla	r2, r9, fp, r2
 810bc54:	4492      	add	sl, r2
 810bc56:	b289      	uxth	r1, r1
 810bc58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810bc5c:	f84e 1b04 	str.w	r1, [lr], #4
 810bc60:	f85c 2b04 	ldr.w	r2, [ip], #4
 810bc64:	f8be 1000 	ldrh.w	r1, [lr]
 810bc68:	0c12      	lsrs	r2, r2, #16
 810bc6a:	fb09 1102 	mla	r1, r9, r2, r1
 810bc6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810bc72:	4567      	cmp	r7, ip
 810bc74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810bc78:	d8e6      	bhi.n	810bc48 <__multiply+0x10c>
 810bc7a:	9a01      	ldr	r2, [sp, #4]
 810bc7c:	50a9      	str	r1, [r5, r2]
 810bc7e:	3504      	adds	r5, #4
 810bc80:	e79a      	b.n	810bbb8 <__multiply+0x7c>
 810bc82:	3e01      	subs	r6, #1
 810bc84:	e79c      	b.n	810bbc0 <__multiply+0x84>
 810bc86:	bf00      	nop
 810bc88:	0810d190 	.word	0x0810d190
 810bc8c:	0810d280 	.word	0x0810d280

0810bc90 <__pow5mult>:
 810bc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bc94:	4615      	mov	r5, r2
 810bc96:	f012 0203 	ands.w	r2, r2, #3
 810bc9a:	4606      	mov	r6, r0
 810bc9c:	460f      	mov	r7, r1
 810bc9e:	d007      	beq.n	810bcb0 <__pow5mult+0x20>
 810bca0:	4c25      	ldr	r4, [pc, #148]	; (810bd38 <__pow5mult+0xa8>)
 810bca2:	3a01      	subs	r2, #1
 810bca4:	2300      	movs	r3, #0
 810bca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810bcaa:	f7ff fe51 	bl	810b950 <__multadd>
 810bcae:	4607      	mov	r7, r0
 810bcb0:	10ad      	asrs	r5, r5, #2
 810bcb2:	d03d      	beq.n	810bd30 <__pow5mult+0xa0>
 810bcb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810bcb6:	b97c      	cbnz	r4, 810bcd8 <__pow5mult+0x48>
 810bcb8:	2010      	movs	r0, #16
 810bcba:	f7ff fdcd 	bl	810b858 <malloc>
 810bcbe:	4602      	mov	r2, r0
 810bcc0:	6270      	str	r0, [r6, #36]	; 0x24
 810bcc2:	b928      	cbnz	r0, 810bcd0 <__pow5mult+0x40>
 810bcc4:	4b1d      	ldr	r3, [pc, #116]	; (810bd3c <__pow5mult+0xac>)
 810bcc6:	481e      	ldr	r0, [pc, #120]	; (810bd40 <__pow5mult+0xb0>)
 810bcc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810bccc:	f000 feda 	bl	810ca84 <__assert_func>
 810bcd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810bcd4:	6004      	str	r4, [r0, #0]
 810bcd6:	60c4      	str	r4, [r0, #12]
 810bcd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810bcdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810bce0:	b94c      	cbnz	r4, 810bcf6 <__pow5mult+0x66>
 810bce2:	f240 2171 	movw	r1, #625	; 0x271
 810bce6:	4630      	mov	r0, r6
 810bce8:	f7ff ff12 	bl	810bb10 <__i2b>
 810bcec:	2300      	movs	r3, #0
 810bcee:	f8c8 0008 	str.w	r0, [r8, #8]
 810bcf2:	4604      	mov	r4, r0
 810bcf4:	6003      	str	r3, [r0, #0]
 810bcf6:	f04f 0900 	mov.w	r9, #0
 810bcfa:	07eb      	lsls	r3, r5, #31
 810bcfc:	d50a      	bpl.n	810bd14 <__pow5mult+0x84>
 810bcfe:	4639      	mov	r1, r7
 810bd00:	4622      	mov	r2, r4
 810bd02:	4630      	mov	r0, r6
 810bd04:	f7ff ff1a 	bl	810bb3c <__multiply>
 810bd08:	4639      	mov	r1, r7
 810bd0a:	4680      	mov	r8, r0
 810bd0c:	4630      	mov	r0, r6
 810bd0e:	f7ff fdfd 	bl	810b90c <_Bfree>
 810bd12:	4647      	mov	r7, r8
 810bd14:	106d      	asrs	r5, r5, #1
 810bd16:	d00b      	beq.n	810bd30 <__pow5mult+0xa0>
 810bd18:	6820      	ldr	r0, [r4, #0]
 810bd1a:	b938      	cbnz	r0, 810bd2c <__pow5mult+0x9c>
 810bd1c:	4622      	mov	r2, r4
 810bd1e:	4621      	mov	r1, r4
 810bd20:	4630      	mov	r0, r6
 810bd22:	f7ff ff0b 	bl	810bb3c <__multiply>
 810bd26:	6020      	str	r0, [r4, #0]
 810bd28:	f8c0 9000 	str.w	r9, [r0]
 810bd2c:	4604      	mov	r4, r0
 810bd2e:	e7e4      	b.n	810bcfa <__pow5mult+0x6a>
 810bd30:	4638      	mov	r0, r7
 810bd32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bd36:	bf00      	nop
 810bd38:	0810d3d0 	.word	0x0810d3d0
 810bd3c:	0810d11e 	.word	0x0810d11e
 810bd40:	0810d280 	.word	0x0810d280

0810bd44 <__lshift>:
 810bd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810bd48:	460c      	mov	r4, r1
 810bd4a:	6849      	ldr	r1, [r1, #4]
 810bd4c:	6923      	ldr	r3, [r4, #16]
 810bd4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810bd52:	68a3      	ldr	r3, [r4, #8]
 810bd54:	4607      	mov	r7, r0
 810bd56:	4691      	mov	r9, r2
 810bd58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810bd5c:	f108 0601 	add.w	r6, r8, #1
 810bd60:	42b3      	cmp	r3, r6
 810bd62:	db0b      	blt.n	810bd7c <__lshift+0x38>
 810bd64:	4638      	mov	r0, r7
 810bd66:	f7ff fd91 	bl	810b88c <_Balloc>
 810bd6a:	4605      	mov	r5, r0
 810bd6c:	b948      	cbnz	r0, 810bd82 <__lshift+0x3e>
 810bd6e:	4602      	mov	r2, r0
 810bd70:	4b2a      	ldr	r3, [pc, #168]	; (810be1c <__lshift+0xd8>)
 810bd72:	482b      	ldr	r0, [pc, #172]	; (810be20 <__lshift+0xdc>)
 810bd74:	f240 11d9 	movw	r1, #473	; 0x1d9
 810bd78:	f000 fe84 	bl	810ca84 <__assert_func>
 810bd7c:	3101      	adds	r1, #1
 810bd7e:	005b      	lsls	r3, r3, #1
 810bd80:	e7ee      	b.n	810bd60 <__lshift+0x1c>
 810bd82:	2300      	movs	r3, #0
 810bd84:	f100 0114 	add.w	r1, r0, #20
 810bd88:	f100 0210 	add.w	r2, r0, #16
 810bd8c:	4618      	mov	r0, r3
 810bd8e:	4553      	cmp	r3, sl
 810bd90:	db37      	blt.n	810be02 <__lshift+0xbe>
 810bd92:	6920      	ldr	r0, [r4, #16]
 810bd94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810bd98:	f104 0314 	add.w	r3, r4, #20
 810bd9c:	f019 091f 	ands.w	r9, r9, #31
 810bda0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810bda4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810bda8:	d02f      	beq.n	810be0a <__lshift+0xc6>
 810bdaa:	f1c9 0e20 	rsb	lr, r9, #32
 810bdae:	468a      	mov	sl, r1
 810bdb0:	f04f 0c00 	mov.w	ip, #0
 810bdb4:	681a      	ldr	r2, [r3, #0]
 810bdb6:	fa02 f209 	lsl.w	r2, r2, r9
 810bdba:	ea42 020c 	orr.w	r2, r2, ip
 810bdbe:	f84a 2b04 	str.w	r2, [sl], #4
 810bdc2:	f853 2b04 	ldr.w	r2, [r3], #4
 810bdc6:	4298      	cmp	r0, r3
 810bdc8:	fa22 fc0e 	lsr.w	ip, r2, lr
 810bdcc:	d8f2      	bhi.n	810bdb4 <__lshift+0x70>
 810bdce:	1b03      	subs	r3, r0, r4
 810bdd0:	3b15      	subs	r3, #21
 810bdd2:	f023 0303 	bic.w	r3, r3, #3
 810bdd6:	3304      	adds	r3, #4
 810bdd8:	f104 0215 	add.w	r2, r4, #21
 810bddc:	4290      	cmp	r0, r2
 810bdde:	bf38      	it	cc
 810bde0:	2304      	movcc	r3, #4
 810bde2:	f841 c003 	str.w	ip, [r1, r3]
 810bde6:	f1bc 0f00 	cmp.w	ip, #0
 810bdea:	d001      	beq.n	810bdf0 <__lshift+0xac>
 810bdec:	f108 0602 	add.w	r6, r8, #2
 810bdf0:	3e01      	subs	r6, #1
 810bdf2:	4638      	mov	r0, r7
 810bdf4:	612e      	str	r6, [r5, #16]
 810bdf6:	4621      	mov	r1, r4
 810bdf8:	f7ff fd88 	bl	810b90c <_Bfree>
 810bdfc:	4628      	mov	r0, r5
 810bdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810be02:	f842 0f04 	str.w	r0, [r2, #4]!
 810be06:	3301      	adds	r3, #1
 810be08:	e7c1      	b.n	810bd8e <__lshift+0x4a>
 810be0a:	3904      	subs	r1, #4
 810be0c:	f853 2b04 	ldr.w	r2, [r3], #4
 810be10:	f841 2f04 	str.w	r2, [r1, #4]!
 810be14:	4298      	cmp	r0, r3
 810be16:	d8f9      	bhi.n	810be0c <__lshift+0xc8>
 810be18:	e7ea      	b.n	810bdf0 <__lshift+0xac>
 810be1a:	bf00      	nop
 810be1c:	0810d190 	.word	0x0810d190
 810be20:	0810d280 	.word	0x0810d280

0810be24 <__mcmp>:
 810be24:	b530      	push	{r4, r5, lr}
 810be26:	6902      	ldr	r2, [r0, #16]
 810be28:	690c      	ldr	r4, [r1, #16]
 810be2a:	1b12      	subs	r2, r2, r4
 810be2c:	d10e      	bne.n	810be4c <__mcmp+0x28>
 810be2e:	f100 0314 	add.w	r3, r0, #20
 810be32:	3114      	adds	r1, #20
 810be34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810be38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810be3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810be40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810be44:	42a5      	cmp	r5, r4
 810be46:	d003      	beq.n	810be50 <__mcmp+0x2c>
 810be48:	d305      	bcc.n	810be56 <__mcmp+0x32>
 810be4a:	2201      	movs	r2, #1
 810be4c:	4610      	mov	r0, r2
 810be4e:	bd30      	pop	{r4, r5, pc}
 810be50:	4283      	cmp	r3, r0
 810be52:	d3f3      	bcc.n	810be3c <__mcmp+0x18>
 810be54:	e7fa      	b.n	810be4c <__mcmp+0x28>
 810be56:	f04f 32ff 	mov.w	r2, #4294967295
 810be5a:	e7f7      	b.n	810be4c <__mcmp+0x28>

0810be5c <__mdiff>:
 810be5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810be60:	460c      	mov	r4, r1
 810be62:	4606      	mov	r6, r0
 810be64:	4611      	mov	r1, r2
 810be66:	4620      	mov	r0, r4
 810be68:	4690      	mov	r8, r2
 810be6a:	f7ff ffdb 	bl	810be24 <__mcmp>
 810be6e:	1e05      	subs	r5, r0, #0
 810be70:	d110      	bne.n	810be94 <__mdiff+0x38>
 810be72:	4629      	mov	r1, r5
 810be74:	4630      	mov	r0, r6
 810be76:	f7ff fd09 	bl	810b88c <_Balloc>
 810be7a:	b930      	cbnz	r0, 810be8a <__mdiff+0x2e>
 810be7c:	4b3a      	ldr	r3, [pc, #232]	; (810bf68 <__mdiff+0x10c>)
 810be7e:	4602      	mov	r2, r0
 810be80:	f240 2132 	movw	r1, #562	; 0x232
 810be84:	4839      	ldr	r0, [pc, #228]	; (810bf6c <__mdiff+0x110>)
 810be86:	f000 fdfd 	bl	810ca84 <__assert_func>
 810be8a:	2301      	movs	r3, #1
 810be8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810be90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810be94:	bfa4      	itt	ge
 810be96:	4643      	movge	r3, r8
 810be98:	46a0      	movge	r8, r4
 810be9a:	4630      	mov	r0, r6
 810be9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810bea0:	bfa6      	itte	ge
 810bea2:	461c      	movge	r4, r3
 810bea4:	2500      	movge	r5, #0
 810bea6:	2501      	movlt	r5, #1
 810bea8:	f7ff fcf0 	bl	810b88c <_Balloc>
 810beac:	b920      	cbnz	r0, 810beb8 <__mdiff+0x5c>
 810beae:	4b2e      	ldr	r3, [pc, #184]	; (810bf68 <__mdiff+0x10c>)
 810beb0:	4602      	mov	r2, r0
 810beb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 810beb6:	e7e5      	b.n	810be84 <__mdiff+0x28>
 810beb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810bebc:	6926      	ldr	r6, [r4, #16]
 810bebe:	60c5      	str	r5, [r0, #12]
 810bec0:	f104 0914 	add.w	r9, r4, #20
 810bec4:	f108 0514 	add.w	r5, r8, #20
 810bec8:	f100 0e14 	add.w	lr, r0, #20
 810becc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810bed0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810bed4:	f108 0210 	add.w	r2, r8, #16
 810bed8:	46f2      	mov	sl, lr
 810beda:	2100      	movs	r1, #0
 810bedc:	f859 3b04 	ldr.w	r3, [r9], #4
 810bee0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810bee4:	fa1f f883 	uxth.w	r8, r3
 810bee8:	fa11 f18b 	uxtah	r1, r1, fp
 810beec:	0c1b      	lsrs	r3, r3, #16
 810beee:	eba1 0808 	sub.w	r8, r1, r8
 810bef2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810bef6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810befa:	fa1f f888 	uxth.w	r8, r8
 810befe:	1419      	asrs	r1, r3, #16
 810bf00:	454e      	cmp	r6, r9
 810bf02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810bf06:	f84a 3b04 	str.w	r3, [sl], #4
 810bf0a:	d8e7      	bhi.n	810bedc <__mdiff+0x80>
 810bf0c:	1b33      	subs	r3, r6, r4
 810bf0e:	3b15      	subs	r3, #21
 810bf10:	f023 0303 	bic.w	r3, r3, #3
 810bf14:	3304      	adds	r3, #4
 810bf16:	3415      	adds	r4, #21
 810bf18:	42a6      	cmp	r6, r4
 810bf1a:	bf38      	it	cc
 810bf1c:	2304      	movcc	r3, #4
 810bf1e:	441d      	add	r5, r3
 810bf20:	4473      	add	r3, lr
 810bf22:	469e      	mov	lr, r3
 810bf24:	462e      	mov	r6, r5
 810bf26:	4566      	cmp	r6, ip
 810bf28:	d30e      	bcc.n	810bf48 <__mdiff+0xec>
 810bf2a:	f10c 0203 	add.w	r2, ip, #3
 810bf2e:	1b52      	subs	r2, r2, r5
 810bf30:	f022 0203 	bic.w	r2, r2, #3
 810bf34:	3d03      	subs	r5, #3
 810bf36:	45ac      	cmp	ip, r5
 810bf38:	bf38      	it	cc
 810bf3a:	2200      	movcc	r2, #0
 810bf3c:	441a      	add	r2, r3
 810bf3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810bf42:	b17b      	cbz	r3, 810bf64 <__mdiff+0x108>
 810bf44:	6107      	str	r7, [r0, #16]
 810bf46:	e7a3      	b.n	810be90 <__mdiff+0x34>
 810bf48:	f856 8b04 	ldr.w	r8, [r6], #4
 810bf4c:	fa11 f288 	uxtah	r2, r1, r8
 810bf50:	1414      	asrs	r4, r2, #16
 810bf52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810bf56:	b292      	uxth	r2, r2
 810bf58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810bf5c:	f84e 2b04 	str.w	r2, [lr], #4
 810bf60:	1421      	asrs	r1, r4, #16
 810bf62:	e7e0      	b.n	810bf26 <__mdiff+0xca>
 810bf64:	3f01      	subs	r7, #1
 810bf66:	e7ea      	b.n	810bf3e <__mdiff+0xe2>
 810bf68:	0810d190 	.word	0x0810d190
 810bf6c:	0810d280 	.word	0x0810d280

0810bf70 <__ulp>:
 810bf70:	b082      	sub	sp, #8
 810bf72:	ed8d 0b00 	vstr	d0, [sp]
 810bf76:	9b01      	ldr	r3, [sp, #4]
 810bf78:	4912      	ldr	r1, [pc, #72]	; (810bfc4 <__ulp+0x54>)
 810bf7a:	4019      	ands	r1, r3
 810bf7c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810bf80:	2900      	cmp	r1, #0
 810bf82:	dd05      	ble.n	810bf90 <__ulp+0x20>
 810bf84:	2200      	movs	r2, #0
 810bf86:	460b      	mov	r3, r1
 810bf88:	ec43 2b10 	vmov	d0, r2, r3
 810bf8c:	b002      	add	sp, #8
 810bf8e:	4770      	bx	lr
 810bf90:	4249      	negs	r1, r1
 810bf92:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810bf96:	ea4f 5021 	mov.w	r0, r1, asr #20
 810bf9a:	f04f 0200 	mov.w	r2, #0
 810bf9e:	f04f 0300 	mov.w	r3, #0
 810bfa2:	da04      	bge.n	810bfae <__ulp+0x3e>
 810bfa4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810bfa8:	fa41 f300 	asr.w	r3, r1, r0
 810bfac:	e7ec      	b.n	810bf88 <__ulp+0x18>
 810bfae:	f1a0 0114 	sub.w	r1, r0, #20
 810bfb2:	291e      	cmp	r1, #30
 810bfb4:	bfda      	itte	le
 810bfb6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810bfba:	fa20 f101 	lsrle.w	r1, r0, r1
 810bfbe:	2101      	movgt	r1, #1
 810bfc0:	460a      	mov	r2, r1
 810bfc2:	e7e1      	b.n	810bf88 <__ulp+0x18>
 810bfc4:	7ff00000 	.word	0x7ff00000

0810bfc8 <__b2d>:
 810bfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bfca:	6905      	ldr	r5, [r0, #16]
 810bfcc:	f100 0714 	add.w	r7, r0, #20
 810bfd0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810bfd4:	1f2e      	subs	r6, r5, #4
 810bfd6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810bfda:	4620      	mov	r0, r4
 810bfdc:	f7ff fd48 	bl	810ba70 <__hi0bits>
 810bfe0:	f1c0 0320 	rsb	r3, r0, #32
 810bfe4:	280a      	cmp	r0, #10
 810bfe6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810c064 <__b2d+0x9c>
 810bfea:	600b      	str	r3, [r1, #0]
 810bfec:	dc14      	bgt.n	810c018 <__b2d+0x50>
 810bfee:	f1c0 0e0b 	rsb	lr, r0, #11
 810bff2:	fa24 f10e 	lsr.w	r1, r4, lr
 810bff6:	42b7      	cmp	r7, r6
 810bff8:	ea41 030c 	orr.w	r3, r1, ip
 810bffc:	bf34      	ite	cc
 810bffe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810c002:	2100      	movcs	r1, #0
 810c004:	3015      	adds	r0, #21
 810c006:	fa04 f000 	lsl.w	r0, r4, r0
 810c00a:	fa21 f10e 	lsr.w	r1, r1, lr
 810c00e:	ea40 0201 	orr.w	r2, r0, r1
 810c012:	ec43 2b10 	vmov	d0, r2, r3
 810c016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c018:	42b7      	cmp	r7, r6
 810c01a:	bf3a      	itte	cc
 810c01c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810c020:	f1a5 0608 	subcc.w	r6, r5, #8
 810c024:	2100      	movcs	r1, #0
 810c026:	380b      	subs	r0, #11
 810c028:	d017      	beq.n	810c05a <__b2d+0x92>
 810c02a:	f1c0 0c20 	rsb	ip, r0, #32
 810c02e:	fa04 f500 	lsl.w	r5, r4, r0
 810c032:	42be      	cmp	r6, r7
 810c034:	fa21 f40c 	lsr.w	r4, r1, ip
 810c038:	ea45 0504 	orr.w	r5, r5, r4
 810c03c:	bf8c      	ite	hi
 810c03e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810c042:	2400      	movls	r4, #0
 810c044:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810c048:	fa01 f000 	lsl.w	r0, r1, r0
 810c04c:	fa24 f40c 	lsr.w	r4, r4, ip
 810c050:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810c054:	ea40 0204 	orr.w	r2, r0, r4
 810c058:	e7db      	b.n	810c012 <__b2d+0x4a>
 810c05a:	ea44 030c 	orr.w	r3, r4, ip
 810c05e:	460a      	mov	r2, r1
 810c060:	e7d7      	b.n	810c012 <__b2d+0x4a>
 810c062:	bf00      	nop
 810c064:	3ff00000 	.word	0x3ff00000

0810c068 <__d2b>:
 810c068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810c06c:	4689      	mov	r9, r1
 810c06e:	2101      	movs	r1, #1
 810c070:	ec57 6b10 	vmov	r6, r7, d0
 810c074:	4690      	mov	r8, r2
 810c076:	f7ff fc09 	bl	810b88c <_Balloc>
 810c07a:	4604      	mov	r4, r0
 810c07c:	b930      	cbnz	r0, 810c08c <__d2b+0x24>
 810c07e:	4602      	mov	r2, r0
 810c080:	4b25      	ldr	r3, [pc, #148]	; (810c118 <__d2b+0xb0>)
 810c082:	4826      	ldr	r0, [pc, #152]	; (810c11c <__d2b+0xb4>)
 810c084:	f240 310a 	movw	r1, #778	; 0x30a
 810c088:	f000 fcfc 	bl	810ca84 <__assert_func>
 810c08c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810c090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810c094:	bb35      	cbnz	r5, 810c0e4 <__d2b+0x7c>
 810c096:	2e00      	cmp	r6, #0
 810c098:	9301      	str	r3, [sp, #4]
 810c09a:	d028      	beq.n	810c0ee <__d2b+0x86>
 810c09c:	4668      	mov	r0, sp
 810c09e:	9600      	str	r6, [sp, #0]
 810c0a0:	f7ff fd06 	bl	810bab0 <__lo0bits>
 810c0a4:	9900      	ldr	r1, [sp, #0]
 810c0a6:	b300      	cbz	r0, 810c0ea <__d2b+0x82>
 810c0a8:	9a01      	ldr	r2, [sp, #4]
 810c0aa:	f1c0 0320 	rsb	r3, r0, #32
 810c0ae:	fa02 f303 	lsl.w	r3, r2, r3
 810c0b2:	430b      	orrs	r3, r1
 810c0b4:	40c2      	lsrs	r2, r0
 810c0b6:	6163      	str	r3, [r4, #20]
 810c0b8:	9201      	str	r2, [sp, #4]
 810c0ba:	9b01      	ldr	r3, [sp, #4]
 810c0bc:	61a3      	str	r3, [r4, #24]
 810c0be:	2b00      	cmp	r3, #0
 810c0c0:	bf14      	ite	ne
 810c0c2:	2202      	movne	r2, #2
 810c0c4:	2201      	moveq	r2, #1
 810c0c6:	6122      	str	r2, [r4, #16]
 810c0c8:	b1d5      	cbz	r5, 810c100 <__d2b+0x98>
 810c0ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810c0ce:	4405      	add	r5, r0
 810c0d0:	f8c9 5000 	str.w	r5, [r9]
 810c0d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810c0d8:	f8c8 0000 	str.w	r0, [r8]
 810c0dc:	4620      	mov	r0, r4
 810c0de:	b003      	add	sp, #12
 810c0e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c0e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810c0e8:	e7d5      	b.n	810c096 <__d2b+0x2e>
 810c0ea:	6161      	str	r1, [r4, #20]
 810c0ec:	e7e5      	b.n	810c0ba <__d2b+0x52>
 810c0ee:	a801      	add	r0, sp, #4
 810c0f0:	f7ff fcde 	bl	810bab0 <__lo0bits>
 810c0f4:	9b01      	ldr	r3, [sp, #4]
 810c0f6:	6163      	str	r3, [r4, #20]
 810c0f8:	2201      	movs	r2, #1
 810c0fa:	6122      	str	r2, [r4, #16]
 810c0fc:	3020      	adds	r0, #32
 810c0fe:	e7e3      	b.n	810c0c8 <__d2b+0x60>
 810c100:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810c104:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810c108:	f8c9 0000 	str.w	r0, [r9]
 810c10c:	6918      	ldr	r0, [r3, #16]
 810c10e:	f7ff fcaf 	bl	810ba70 <__hi0bits>
 810c112:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810c116:	e7df      	b.n	810c0d8 <__d2b+0x70>
 810c118:	0810d190 	.word	0x0810d190
 810c11c:	0810d280 	.word	0x0810d280

0810c120 <__ratio>:
 810c120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c124:	4688      	mov	r8, r1
 810c126:	4669      	mov	r1, sp
 810c128:	4681      	mov	r9, r0
 810c12a:	f7ff ff4d 	bl	810bfc8 <__b2d>
 810c12e:	a901      	add	r1, sp, #4
 810c130:	4640      	mov	r0, r8
 810c132:	ec55 4b10 	vmov	r4, r5, d0
 810c136:	f7ff ff47 	bl	810bfc8 <__b2d>
 810c13a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c13e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810c142:	eba3 0c02 	sub.w	ip, r3, r2
 810c146:	e9dd 3200 	ldrd	r3, r2, [sp]
 810c14a:	1a9b      	subs	r3, r3, r2
 810c14c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810c150:	ec51 0b10 	vmov	r0, r1, d0
 810c154:	2b00      	cmp	r3, #0
 810c156:	bfd6      	itet	le
 810c158:	460a      	movle	r2, r1
 810c15a:	462a      	movgt	r2, r5
 810c15c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810c160:	468b      	mov	fp, r1
 810c162:	462f      	mov	r7, r5
 810c164:	bfd4      	ite	le
 810c166:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810c16a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810c16e:	4620      	mov	r0, r4
 810c170:	ee10 2a10 	vmov	r2, s0
 810c174:	465b      	mov	r3, fp
 810c176:	4639      	mov	r1, r7
 810c178:	f7f4 fbf0 	bl	810095c <__aeabi_ddiv>
 810c17c:	ec41 0b10 	vmov	d0, r0, r1
 810c180:	b003      	add	sp, #12
 810c182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c186 <__copybits>:
 810c186:	3901      	subs	r1, #1
 810c188:	b570      	push	{r4, r5, r6, lr}
 810c18a:	1149      	asrs	r1, r1, #5
 810c18c:	6914      	ldr	r4, [r2, #16]
 810c18e:	3101      	adds	r1, #1
 810c190:	f102 0314 	add.w	r3, r2, #20
 810c194:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810c198:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810c19c:	1f05      	subs	r5, r0, #4
 810c19e:	42a3      	cmp	r3, r4
 810c1a0:	d30c      	bcc.n	810c1bc <__copybits+0x36>
 810c1a2:	1aa3      	subs	r3, r4, r2
 810c1a4:	3b11      	subs	r3, #17
 810c1a6:	f023 0303 	bic.w	r3, r3, #3
 810c1aa:	3211      	adds	r2, #17
 810c1ac:	42a2      	cmp	r2, r4
 810c1ae:	bf88      	it	hi
 810c1b0:	2300      	movhi	r3, #0
 810c1b2:	4418      	add	r0, r3
 810c1b4:	2300      	movs	r3, #0
 810c1b6:	4288      	cmp	r0, r1
 810c1b8:	d305      	bcc.n	810c1c6 <__copybits+0x40>
 810c1ba:	bd70      	pop	{r4, r5, r6, pc}
 810c1bc:	f853 6b04 	ldr.w	r6, [r3], #4
 810c1c0:	f845 6f04 	str.w	r6, [r5, #4]!
 810c1c4:	e7eb      	b.n	810c19e <__copybits+0x18>
 810c1c6:	f840 3b04 	str.w	r3, [r0], #4
 810c1ca:	e7f4      	b.n	810c1b6 <__copybits+0x30>

0810c1cc <__any_on>:
 810c1cc:	f100 0214 	add.w	r2, r0, #20
 810c1d0:	6900      	ldr	r0, [r0, #16]
 810c1d2:	114b      	asrs	r3, r1, #5
 810c1d4:	4298      	cmp	r0, r3
 810c1d6:	b510      	push	{r4, lr}
 810c1d8:	db11      	blt.n	810c1fe <__any_on+0x32>
 810c1da:	dd0a      	ble.n	810c1f2 <__any_on+0x26>
 810c1dc:	f011 011f 	ands.w	r1, r1, #31
 810c1e0:	d007      	beq.n	810c1f2 <__any_on+0x26>
 810c1e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810c1e6:	fa24 f001 	lsr.w	r0, r4, r1
 810c1ea:	fa00 f101 	lsl.w	r1, r0, r1
 810c1ee:	428c      	cmp	r4, r1
 810c1f0:	d10b      	bne.n	810c20a <__any_on+0x3e>
 810c1f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810c1f6:	4293      	cmp	r3, r2
 810c1f8:	d803      	bhi.n	810c202 <__any_on+0x36>
 810c1fa:	2000      	movs	r0, #0
 810c1fc:	bd10      	pop	{r4, pc}
 810c1fe:	4603      	mov	r3, r0
 810c200:	e7f7      	b.n	810c1f2 <__any_on+0x26>
 810c202:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810c206:	2900      	cmp	r1, #0
 810c208:	d0f5      	beq.n	810c1f6 <__any_on+0x2a>
 810c20a:	2001      	movs	r0, #1
 810c20c:	e7f6      	b.n	810c1fc <__any_on+0x30>

0810c20e <_calloc_r>:
 810c20e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810c210:	fba1 2402 	umull	r2, r4, r1, r2
 810c214:	b94c      	cbnz	r4, 810c22a <_calloc_r+0x1c>
 810c216:	4611      	mov	r1, r2
 810c218:	9201      	str	r2, [sp, #4]
 810c21a:	f000 f87b 	bl	810c314 <_malloc_r>
 810c21e:	9a01      	ldr	r2, [sp, #4]
 810c220:	4605      	mov	r5, r0
 810c222:	b930      	cbnz	r0, 810c232 <_calloc_r+0x24>
 810c224:	4628      	mov	r0, r5
 810c226:	b003      	add	sp, #12
 810c228:	bd30      	pop	{r4, r5, pc}
 810c22a:	220c      	movs	r2, #12
 810c22c:	6002      	str	r2, [r0, #0]
 810c22e:	2500      	movs	r5, #0
 810c230:	e7f8      	b.n	810c224 <_calloc_r+0x16>
 810c232:	4621      	mov	r1, r4
 810c234:	f7fc f862 	bl	81082fc <memset>
 810c238:	e7f4      	b.n	810c224 <_calloc_r+0x16>
	...

0810c23c <_free_r>:
 810c23c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810c23e:	2900      	cmp	r1, #0
 810c240:	d044      	beq.n	810c2cc <_free_r+0x90>
 810c242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810c246:	9001      	str	r0, [sp, #4]
 810c248:	2b00      	cmp	r3, #0
 810c24a:	f1a1 0404 	sub.w	r4, r1, #4
 810c24e:	bfb8      	it	lt
 810c250:	18e4      	addlt	r4, r4, r3
 810c252:	f000 fca5 	bl	810cba0 <__malloc_lock>
 810c256:	4a1e      	ldr	r2, [pc, #120]	; (810c2d0 <_free_r+0x94>)
 810c258:	9801      	ldr	r0, [sp, #4]
 810c25a:	6813      	ldr	r3, [r2, #0]
 810c25c:	b933      	cbnz	r3, 810c26c <_free_r+0x30>
 810c25e:	6063      	str	r3, [r4, #4]
 810c260:	6014      	str	r4, [r2, #0]
 810c262:	b003      	add	sp, #12
 810c264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810c268:	f000 bca0 	b.w	810cbac <__malloc_unlock>
 810c26c:	42a3      	cmp	r3, r4
 810c26e:	d908      	bls.n	810c282 <_free_r+0x46>
 810c270:	6825      	ldr	r5, [r4, #0]
 810c272:	1961      	adds	r1, r4, r5
 810c274:	428b      	cmp	r3, r1
 810c276:	bf01      	itttt	eq
 810c278:	6819      	ldreq	r1, [r3, #0]
 810c27a:	685b      	ldreq	r3, [r3, #4]
 810c27c:	1949      	addeq	r1, r1, r5
 810c27e:	6021      	streq	r1, [r4, #0]
 810c280:	e7ed      	b.n	810c25e <_free_r+0x22>
 810c282:	461a      	mov	r2, r3
 810c284:	685b      	ldr	r3, [r3, #4]
 810c286:	b10b      	cbz	r3, 810c28c <_free_r+0x50>
 810c288:	42a3      	cmp	r3, r4
 810c28a:	d9fa      	bls.n	810c282 <_free_r+0x46>
 810c28c:	6811      	ldr	r1, [r2, #0]
 810c28e:	1855      	adds	r5, r2, r1
 810c290:	42a5      	cmp	r5, r4
 810c292:	d10b      	bne.n	810c2ac <_free_r+0x70>
 810c294:	6824      	ldr	r4, [r4, #0]
 810c296:	4421      	add	r1, r4
 810c298:	1854      	adds	r4, r2, r1
 810c29a:	42a3      	cmp	r3, r4
 810c29c:	6011      	str	r1, [r2, #0]
 810c29e:	d1e0      	bne.n	810c262 <_free_r+0x26>
 810c2a0:	681c      	ldr	r4, [r3, #0]
 810c2a2:	685b      	ldr	r3, [r3, #4]
 810c2a4:	6053      	str	r3, [r2, #4]
 810c2a6:	4421      	add	r1, r4
 810c2a8:	6011      	str	r1, [r2, #0]
 810c2aa:	e7da      	b.n	810c262 <_free_r+0x26>
 810c2ac:	d902      	bls.n	810c2b4 <_free_r+0x78>
 810c2ae:	230c      	movs	r3, #12
 810c2b0:	6003      	str	r3, [r0, #0]
 810c2b2:	e7d6      	b.n	810c262 <_free_r+0x26>
 810c2b4:	6825      	ldr	r5, [r4, #0]
 810c2b6:	1961      	adds	r1, r4, r5
 810c2b8:	428b      	cmp	r3, r1
 810c2ba:	bf04      	itt	eq
 810c2bc:	6819      	ldreq	r1, [r3, #0]
 810c2be:	685b      	ldreq	r3, [r3, #4]
 810c2c0:	6063      	str	r3, [r4, #4]
 810c2c2:	bf04      	itt	eq
 810c2c4:	1949      	addeq	r1, r1, r5
 810c2c6:	6021      	streq	r1, [r4, #0]
 810c2c8:	6054      	str	r4, [r2, #4]
 810c2ca:	e7ca      	b.n	810c262 <_free_r+0x26>
 810c2cc:	b003      	add	sp, #12
 810c2ce:	bd30      	pop	{r4, r5, pc}
 810c2d0:	100003c4 	.word	0x100003c4

0810c2d4 <sbrk_aligned>:
 810c2d4:	b570      	push	{r4, r5, r6, lr}
 810c2d6:	4e0e      	ldr	r6, [pc, #56]	; (810c310 <sbrk_aligned+0x3c>)
 810c2d8:	460c      	mov	r4, r1
 810c2da:	6831      	ldr	r1, [r6, #0]
 810c2dc:	4605      	mov	r5, r0
 810c2de:	b911      	cbnz	r1, 810c2e6 <sbrk_aligned+0x12>
 810c2e0:	f000 fb4a 	bl	810c978 <_sbrk_r>
 810c2e4:	6030      	str	r0, [r6, #0]
 810c2e6:	4621      	mov	r1, r4
 810c2e8:	4628      	mov	r0, r5
 810c2ea:	f000 fb45 	bl	810c978 <_sbrk_r>
 810c2ee:	1c43      	adds	r3, r0, #1
 810c2f0:	d00a      	beq.n	810c308 <sbrk_aligned+0x34>
 810c2f2:	1cc4      	adds	r4, r0, #3
 810c2f4:	f024 0403 	bic.w	r4, r4, #3
 810c2f8:	42a0      	cmp	r0, r4
 810c2fa:	d007      	beq.n	810c30c <sbrk_aligned+0x38>
 810c2fc:	1a21      	subs	r1, r4, r0
 810c2fe:	4628      	mov	r0, r5
 810c300:	f000 fb3a 	bl	810c978 <_sbrk_r>
 810c304:	3001      	adds	r0, #1
 810c306:	d101      	bne.n	810c30c <sbrk_aligned+0x38>
 810c308:	f04f 34ff 	mov.w	r4, #4294967295
 810c30c:	4620      	mov	r0, r4
 810c30e:	bd70      	pop	{r4, r5, r6, pc}
 810c310:	100003c8 	.word	0x100003c8

0810c314 <_malloc_r>:
 810c314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c318:	1ccd      	adds	r5, r1, #3
 810c31a:	f025 0503 	bic.w	r5, r5, #3
 810c31e:	3508      	adds	r5, #8
 810c320:	2d0c      	cmp	r5, #12
 810c322:	bf38      	it	cc
 810c324:	250c      	movcc	r5, #12
 810c326:	2d00      	cmp	r5, #0
 810c328:	4607      	mov	r7, r0
 810c32a:	db01      	blt.n	810c330 <_malloc_r+0x1c>
 810c32c:	42a9      	cmp	r1, r5
 810c32e:	d905      	bls.n	810c33c <_malloc_r+0x28>
 810c330:	230c      	movs	r3, #12
 810c332:	603b      	str	r3, [r7, #0]
 810c334:	2600      	movs	r6, #0
 810c336:	4630      	mov	r0, r6
 810c338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c33c:	4e2e      	ldr	r6, [pc, #184]	; (810c3f8 <_malloc_r+0xe4>)
 810c33e:	f000 fc2f 	bl	810cba0 <__malloc_lock>
 810c342:	6833      	ldr	r3, [r6, #0]
 810c344:	461c      	mov	r4, r3
 810c346:	bb34      	cbnz	r4, 810c396 <_malloc_r+0x82>
 810c348:	4629      	mov	r1, r5
 810c34a:	4638      	mov	r0, r7
 810c34c:	f7ff ffc2 	bl	810c2d4 <sbrk_aligned>
 810c350:	1c43      	adds	r3, r0, #1
 810c352:	4604      	mov	r4, r0
 810c354:	d14d      	bne.n	810c3f2 <_malloc_r+0xde>
 810c356:	6834      	ldr	r4, [r6, #0]
 810c358:	4626      	mov	r6, r4
 810c35a:	2e00      	cmp	r6, #0
 810c35c:	d140      	bne.n	810c3e0 <_malloc_r+0xcc>
 810c35e:	6823      	ldr	r3, [r4, #0]
 810c360:	4631      	mov	r1, r6
 810c362:	4638      	mov	r0, r7
 810c364:	eb04 0803 	add.w	r8, r4, r3
 810c368:	f000 fb06 	bl	810c978 <_sbrk_r>
 810c36c:	4580      	cmp	r8, r0
 810c36e:	d13a      	bne.n	810c3e6 <_malloc_r+0xd2>
 810c370:	6821      	ldr	r1, [r4, #0]
 810c372:	3503      	adds	r5, #3
 810c374:	1a6d      	subs	r5, r5, r1
 810c376:	f025 0503 	bic.w	r5, r5, #3
 810c37a:	3508      	adds	r5, #8
 810c37c:	2d0c      	cmp	r5, #12
 810c37e:	bf38      	it	cc
 810c380:	250c      	movcc	r5, #12
 810c382:	4629      	mov	r1, r5
 810c384:	4638      	mov	r0, r7
 810c386:	f7ff ffa5 	bl	810c2d4 <sbrk_aligned>
 810c38a:	3001      	adds	r0, #1
 810c38c:	d02b      	beq.n	810c3e6 <_malloc_r+0xd2>
 810c38e:	6823      	ldr	r3, [r4, #0]
 810c390:	442b      	add	r3, r5
 810c392:	6023      	str	r3, [r4, #0]
 810c394:	e00e      	b.n	810c3b4 <_malloc_r+0xa0>
 810c396:	6822      	ldr	r2, [r4, #0]
 810c398:	1b52      	subs	r2, r2, r5
 810c39a:	d41e      	bmi.n	810c3da <_malloc_r+0xc6>
 810c39c:	2a0b      	cmp	r2, #11
 810c39e:	d916      	bls.n	810c3ce <_malloc_r+0xba>
 810c3a0:	1961      	adds	r1, r4, r5
 810c3a2:	42a3      	cmp	r3, r4
 810c3a4:	6025      	str	r5, [r4, #0]
 810c3a6:	bf18      	it	ne
 810c3a8:	6059      	strne	r1, [r3, #4]
 810c3aa:	6863      	ldr	r3, [r4, #4]
 810c3ac:	bf08      	it	eq
 810c3ae:	6031      	streq	r1, [r6, #0]
 810c3b0:	5162      	str	r2, [r4, r5]
 810c3b2:	604b      	str	r3, [r1, #4]
 810c3b4:	4638      	mov	r0, r7
 810c3b6:	f104 060b 	add.w	r6, r4, #11
 810c3ba:	f000 fbf7 	bl	810cbac <__malloc_unlock>
 810c3be:	f026 0607 	bic.w	r6, r6, #7
 810c3c2:	1d23      	adds	r3, r4, #4
 810c3c4:	1af2      	subs	r2, r6, r3
 810c3c6:	d0b6      	beq.n	810c336 <_malloc_r+0x22>
 810c3c8:	1b9b      	subs	r3, r3, r6
 810c3ca:	50a3      	str	r3, [r4, r2]
 810c3cc:	e7b3      	b.n	810c336 <_malloc_r+0x22>
 810c3ce:	6862      	ldr	r2, [r4, #4]
 810c3d0:	42a3      	cmp	r3, r4
 810c3d2:	bf0c      	ite	eq
 810c3d4:	6032      	streq	r2, [r6, #0]
 810c3d6:	605a      	strne	r2, [r3, #4]
 810c3d8:	e7ec      	b.n	810c3b4 <_malloc_r+0xa0>
 810c3da:	4623      	mov	r3, r4
 810c3dc:	6864      	ldr	r4, [r4, #4]
 810c3de:	e7b2      	b.n	810c346 <_malloc_r+0x32>
 810c3e0:	4634      	mov	r4, r6
 810c3e2:	6876      	ldr	r6, [r6, #4]
 810c3e4:	e7b9      	b.n	810c35a <_malloc_r+0x46>
 810c3e6:	230c      	movs	r3, #12
 810c3e8:	603b      	str	r3, [r7, #0]
 810c3ea:	4638      	mov	r0, r7
 810c3ec:	f000 fbde 	bl	810cbac <__malloc_unlock>
 810c3f0:	e7a1      	b.n	810c336 <_malloc_r+0x22>
 810c3f2:	6025      	str	r5, [r4, #0]
 810c3f4:	e7de      	b.n	810c3b4 <_malloc_r+0xa0>
 810c3f6:	bf00      	nop
 810c3f8:	100003c4 	.word	0x100003c4

0810c3fc <__ssputs_r>:
 810c3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c400:	688e      	ldr	r6, [r1, #8]
 810c402:	429e      	cmp	r6, r3
 810c404:	4682      	mov	sl, r0
 810c406:	460c      	mov	r4, r1
 810c408:	4690      	mov	r8, r2
 810c40a:	461f      	mov	r7, r3
 810c40c:	d838      	bhi.n	810c480 <__ssputs_r+0x84>
 810c40e:	898a      	ldrh	r2, [r1, #12]
 810c410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810c414:	d032      	beq.n	810c47c <__ssputs_r+0x80>
 810c416:	6825      	ldr	r5, [r4, #0]
 810c418:	6909      	ldr	r1, [r1, #16]
 810c41a:	eba5 0901 	sub.w	r9, r5, r1
 810c41e:	6965      	ldr	r5, [r4, #20]
 810c420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810c424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810c428:	3301      	adds	r3, #1
 810c42a:	444b      	add	r3, r9
 810c42c:	106d      	asrs	r5, r5, #1
 810c42e:	429d      	cmp	r5, r3
 810c430:	bf38      	it	cc
 810c432:	461d      	movcc	r5, r3
 810c434:	0553      	lsls	r3, r2, #21
 810c436:	d531      	bpl.n	810c49c <__ssputs_r+0xa0>
 810c438:	4629      	mov	r1, r5
 810c43a:	f7ff ff6b 	bl	810c314 <_malloc_r>
 810c43e:	4606      	mov	r6, r0
 810c440:	b950      	cbnz	r0, 810c458 <__ssputs_r+0x5c>
 810c442:	230c      	movs	r3, #12
 810c444:	f8ca 3000 	str.w	r3, [sl]
 810c448:	89a3      	ldrh	r3, [r4, #12]
 810c44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c44e:	81a3      	strh	r3, [r4, #12]
 810c450:	f04f 30ff 	mov.w	r0, #4294967295
 810c454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c458:	6921      	ldr	r1, [r4, #16]
 810c45a:	464a      	mov	r2, r9
 810c45c:	f7fb ff40 	bl	81082e0 <memcpy>
 810c460:	89a3      	ldrh	r3, [r4, #12]
 810c462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810c466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810c46a:	81a3      	strh	r3, [r4, #12]
 810c46c:	6126      	str	r6, [r4, #16]
 810c46e:	6165      	str	r5, [r4, #20]
 810c470:	444e      	add	r6, r9
 810c472:	eba5 0509 	sub.w	r5, r5, r9
 810c476:	6026      	str	r6, [r4, #0]
 810c478:	60a5      	str	r5, [r4, #8]
 810c47a:	463e      	mov	r6, r7
 810c47c:	42be      	cmp	r6, r7
 810c47e:	d900      	bls.n	810c482 <__ssputs_r+0x86>
 810c480:	463e      	mov	r6, r7
 810c482:	6820      	ldr	r0, [r4, #0]
 810c484:	4632      	mov	r2, r6
 810c486:	4641      	mov	r1, r8
 810c488:	f000 fb70 	bl	810cb6c <memmove>
 810c48c:	68a3      	ldr	r3, [r4, #8]
 810c48e:	1b9b      	subs	r3, r3, r6
 810c490:	60a3      	str	r3, [r4, #8]
 810c492:	6823      	ldr	r3, [r4, #0]
 810c494:	4433      	add	r3, r6
 810c496:	6023      	str	r3, [r4, #0]
 810c498:	2000      	movs	r0, #0
 810c49a:	e7db      	b.n	810c454 <__ssputs_r+0x58>
 810c49c:	462a      	mov	r2, r5
 810c49e:	f000 fb8b 	bl	810cbb8 <_realloc_r>
 810c4a2:	4606      	mov	r6, r0
 810c4a4:	2800      	cmp	r0, #0
 810c4a6:	d1e1      	bne.n	810c46c <__ssputs_r+0x70>
 810c4a8:	6921      	ldr	r1, [r4, #16]
 810c4aa:	4650      	mov	r0, sl
 810c4ac:	f7ff fec6 	bl	810c23c <_free_r>
 810c4b0:	e7c7      	b.n	810c442 <__ssputs_r+0x46>
	...

0810c4b4 <_svfiprintf_r>:
 810c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c4b8:	4698      	mov	r8, r3
 810c4ba:	898b      	ldrh	r3, [r1, #12]
 810c4bc:	061b      	lsls	r3, r3, #24
 810c4be:	b09d      	sub	sp, #116	; 0x74
 810c4c0:	4607      	mov	r7, r0
 810c4c2:	460d      	mov	r5, r1
 810c4c4:	4614      	mov	r4, r2
 810c4c6:	d50e      	bpl.n	810c4e6 <_svfiprintf_r+0x32>
 810c4c8:	690b      	ldr	r3, [r1, #16]
 810c4ca:	b963      	cbnz	r3, 810c4e6 <_svfiprintf_r+0x32>
 810c4cc:	2140      	movs	r1, #64	; 0x40
 810c4ce:	f7ff ff21 	bl	810c314 <_malloc_r>
 810c4d2:	6028      	str	r0, [r5, #0]
 810c4d4:	6128      	str	r0, [r5, #16]
 810c4d6:	b920      	cbnz	r0, 810c4e2 <_svfiprintf_r+0x2e>
 810c4d8:	230c      	movs	r3, #12
 810c4da:	603b      	str	r3, [r7, #0]
 810c4dc:	f04f 30ff 	mov.w	r0, #4294967295
 810c4e0:	e0d1      	b.n	810c686 <_svfiprintf_r+0x1d2>
 810c4e2:	2340      	movs	r3, #64	; 0x40
 810c4e4:	616b      	str	r3, [r5, #20]
 810c4e6:	2300      	movs	r3, #0
 810c4e8:	9309      	str	r3, [sp, #36]	; 0x24
 810c4ea:	2320      	movs	r3, #32
 810c4ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810c4f0:	f8cd 800c 	str.w	r8, [sp, #12]
 810c4f4:	2330      	movs	r3, #48	; 0x30
 810c4f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810c6a0 <_svfiprintf_r+0x1ec>
 810c4fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810c4fe:	f04f 0901 	mov.w	r9, #1
 810c502:	4623      	mov	r3, r4
 810c504:	469a      	mov	sl, r3
 810c506:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c50a:	b10a      	cbz	r2, 810c510 <_svfiprintf_r+0x5c>
 810c50c:	2a25      	cmp	r2, #37	; 0x25
 810c50e:	d1f9      	bne.n	810c504 <_svfiprintf_r+0x50>
 810c510:	ebba 0b04 	subs.w	fp, sl, r4
 810c514:	d00b      	beq.n	810c52e <_svfiprintf_r+0x7a>
 810c516:	465b      	mov	r3, fp
 810c518:	4622      	mov	r2, r4
 810c51a:	4629      	mov	r1, r5
 810c51c:	4638      	mov	r0, r7
 810c51e:	f7ff ff6d 	bl	810c3fc <__ssputs_r>
 810c522:	3001      	adds	r0, #1
 810c524:	f000 80aa 	beq.w	810c67c <_svfiprintf_r+0x1c8>
 810c528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810c52a:	445a      	add	r2, fp
 810c52c:	9209      	str	r2, [sp, #36]	; 0x24
 810c52e:	f89a 3000 	ldrb.w	r3, [sl]
 810c532:	2b00      	cmp	r3, #0
 810c534:	f000 80a2 	beq.w	810c67c <_svfiprintf_r+0x1c8>
 810c538:	2300      	movs	r3, #0
 810c53a:	f04f 32ff 	mov.w	r2, #4294967295
 810c53e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810c542:	f10a 0a01 	add.w	sl, sl, #1
 810c546:	9304      	str	r3, [sp, #16]
 810c548:	9307      	str	r3, [sp, #28]
 810c54a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810c54e:	931a      	str	r3, [sp, #104]	; 0x68
 810c550:	4654      	mov	r4, sl
 810c552:	2205      	movs	r2, #5
 810c554:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c558:	4851      	ldr	r0, [pc, #324]	; (810c6a0 <_svfiprintf_r+0x1ec>)
 810c55a:	f7f3 fec9 	bl	81002f0 <memchr>
 810c55e:	9a04      	ldr	r2, [sp, #16]
 810c560:	b9d8      	cbnz	r0, 810c59a <_svfiprintf_r+0xe6>
 810c562:	06d0      	lsls	r0, r2, #27
 810c564:	bf44      	itt	mi
 810c566:	2320      	movmi	r3, #32
 810c568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c56c:	0711      	lsls	r1, r2, #28
 810c56e:	bf44      	itt	mi
 810c570:	232b      	movmi	r3, #43	; 0x2b
 810c572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c576:	f89a 3000 	ldrb.w	r3, [sl]
 810c57a:	2b2a      	cmp	r3, #42	; 0x2a
 810c57c:	d015      	beq.n	810c5aa <_svfiprintf_r+0xf6>
 810c57e:	9a07      	ldr	r2, [sp, #28]
 810c580:	4654      	mov	r4, sl
 810c582:	2000      	movs	r0, #0
 810c584:	f04f 0c0a 	mov.w	ip, #10
 810c588:	4621      	mov	r1, r4
 810c58a:	f811 3b01 	ldrb.w	r3, [r1], #1
 810c58e:	3b30      	subs	r3, #48	; 0x30
 810c590:	2b09      	cmp	r3, #9
 810c592:	d94e      	bls.n	810c632 <_svfiprintf_r+0x17e>
 810c594:	b1b0      	cbz	r0, 810c5c4 <_svfiprintf_r+0x110>
 810c596:	9207      	str	r2, [sp, #28]
 810c598:	e014      	b.n	810c5c4 <_svfiprintf_r+0x110>
 810c59a:	eba0 0308 	sub.w	r3, r0, r8
 810c59e:	fa09 f303 	lsl.w	r3, r9, r3
 810c5a2:	4313      	orrs	r3, r2
 810c5a4:	9304      	str	r3, [sp, #16]
 810c5a6:	46a2      	mov	sl, r4
 810c5a8:	e7d2      	b.n	810c550 <_svfiprintf_r+0x9c>
 810c5aa:	9b03      	ldr	r3, [sp, #12]
 810c5ac:	1d19      	adds	r1, r3, #4
 810c5ae:	681b      	ldr	r3, [r3, #0]
 810c5b0:	9103      	str	r1, [sp, #12]
 810c5b2:	2b00      	cmp	r3, #0
 810c5b4:	bfbb      	ittet	lt
 810c5b6:	425b      	neglt	r3, r3
 810c5b8:	f042 0202 	orrlt.w	r2, r2, #2
 810c5bc:	9307      	strge	r3, [sp, #28]
 810c5be:	9307      	strlt	r3, [sp, #28]
 810c5c0:	bfb8      	it	lt
 810c5c2:	9204      	strlt	r2, [sp, #16]
 810c5c4:	7823      	ldrb	r3, [r4, #0]
 810c5c6:	2b2e      	cmp	r3, #46	; 0x2e
 810c5c8:	d10c      	bne.n	810c5e4 <_svfiprintf_r+0x130>
 810c5ca:	7863      	ldrb	r3, [r4, #1]
 810c5cc:	2b2a      	cmp	r3, #42	; 0x2a
 810c5ce:	d135      	bne.n	810c63c <_svfiprintf_r+0x188>
 810c5d0:	9b03      	ldr	r3, [sp, #12]
 810c5d2:	1d1a      	adds	r2, r3, #4
 810c5d4:	681b      	ldr	r3, [r3, #0]
 810c5d6:	9203      	str	r2, [sp, #12]
 810c5d8:	2b00      	cmp	r3, #0
 810c5da:	bfb8      	it	lt
 810c5dc:	f04f 33ff 	movlt.w	r3, #4294967295
 810c5e0:	3402      	adds	r4, #2
 810c5e2:	9305      	str	r3, [sp, #20]
 810c5e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810c6b0 <_svfiprintf_r+0x1fc>
 810c5e8:	7821      	ldrb	r1, [r4, #0]
 810c5ea:	2203      	movs	r2, #3
 810c5ec:	4650      	mov	r0, sl
 810c5ee:	f7f3 fe7f 	bl	81002f0 <memchr>
 810c5f2:	b140      	cbz	r0, 810c606 <_svfiprintf_r+0x152>
 810c5f4:	2340      	movs	r3, #64	; 0x40
 810c5f6:	eba0 000a 	sub.w	r0, r0, sl
 810c5fa:	fa03 f000 	lsl.w	r0, r3, r0
 810c5fe:	9b04      	ldr	r3, [sp, #16]
 810c600:	4303      	orrs	r3, r0
 810c602:	3401      	adds	r4, #1
 810c604:	9304      	str	r3, [sp, #16]
 810c606:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c60a:	4826      	ldr	r0, [pc, #152]	; (810c6a4 <_svfiprintf_r+0x1f0>)
 810c60c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810c610:	2206      	movs	r2, #6
 810c612:	f7f3 fe6d 	bl	81002f0 <memchr>
 810c616:	2800      	cmp	r0, #0
 810c618:	d038      	beq.n	810c68c <_svfiprintf_r+0x1d8>
 810c61a:	4b23      	ldr	r3, [pc, #140]	; (810c6a8 <_svfiprintf_r+0x1f4>)
 810c61c:	bb1b      	cbnz	r3, 810c666 <_svfiprintf_r+0x1b2>
 810c61e:	9b03      	ldr	r3, [sp, #12]
 810c620:	3307      	adds	r3, #7
 810c622:	f023 0307 	bic.w	r3, r3, #7
 810c626:	3308      	adds	r3, #8
 810c628:	9303      	str	r3, [sp, #12]
 810c62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c62c:	4433      	add	r3, r6
 810c62e:	9309      	str	r3, [sp, #36]	; 0x24
 810c630:	e767      	b.n	810c502 <_svfiprintf_r+0x4e>
 810c632:	fb0c 3202 	mla	r2, ip, r2, r3
 810c636:	460c      	mov	r4, r1
 810c638:	2001      	movs	r0, #1
 810c63a:	e7a5      	b.n	810c588 <_svfiprintf_r+0xd4>
 810c63c:	2300      	movs	r3, #0
 810c63e:	3401      	adds	r4, #1
 810c640:	9305      	str	r3, [sp, #20]
 810c642:	4619      	mov	r1, r3
 810c644:	f04f 0c0a 	mov.w	ip, #10
 810c648:	4620      	mov	r0, r4
 810c64a:	f810 2b01 	ldrb.w	r2, [r0], #1
 810c64e:	3a30      	subs	r2, #48	; 0x30
 810c650:	2a09      	cmp	r2, #9
 810c652:	d903      	bls.n	810c65c <_svfiprintf_r+0x1a8>
 810c654:	2b00      	cmp	r3, #0
 810c656:	d0c5      	beq.n	810c5e4 <_svfiprintf_r+0x130>
 810c658:	9105      	str	r1, [sp, #20]
 810c65a:	e7c3      	b.n	810c5e4 <_svfiprintf_r+0x130>
 810c65c:	fb0c 2101 	mla	r1, ip, r1, r2
 810c660:	4604      	mov	r4, r0
 810c662:	2301      	movs	r3, #1
 810c664:	e7f0      	b.n	810c648 <_svfiprintf_r+0x194>
 810c666:	ab03      	add	r3, sp, #12
 810c668:	9300      	str	r3, [sp, #0]
 810c66a:	462a      	mov	r2, r5
 810c66c:	4b0f      	ldr	r3, [pc, #60]	; (810c6ac <_svfiprintf_r+0x1f8>)
 810c66e:	a904      	add	r1, sp, #16
 810c670:	4638      	mov	r0, r7
 810c672:	f7fb feeb 	bl	810844c <_printf_float>
 810c676:	1c42      	adds	r2, r0, #1
 810c678:	4606      	mov	r6, r0
 810c67a:	d1d6      	bne.n	810c62a <_svfiprintf_r+0x176>
 810c67c:	89ab      	ldrh	r3, [r5, #12]
 810c67e:	065b      	lsls	r3, r3, #25
 810c680:	f53f af2c 	bmi.w	810c4dc <_svfiprintf_r+0x28>
 810c684:	9809      	ldr	r0, [sp, #36]	; 0x24
 810c686:	b01d      	add	sp, #116	; 0x74
 810c688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c68c:	ab03      	add	r3, sp, #12
 810c68e:	9300      	str	r3, [sp, #0]
 810c690:	462a      	mov	r2, r5
 810c692:	4b06      	ldr	r3, [pc, #24]	; (810c6ac <_svfiprintf_r+0x1f8>)
 810c694:	a904      	add	r1, sp, #16
 810c696:	4638      	mov	r0, r7
 810c698:	f7fc f97c 	bl	8108994 <_printf_i>
 810c69c:	e7eb      	b.n	810c676 <_svfiprintf_r+0x1c2>
 810c69e:	bf00      	nop
 810c6a0:	0810d3dc 	.word	0x0810d3dc
 810c6a4:	0810d3e6 	.word	0x0810d3e6
 810c6a8:	0810844d 	.word	0x0810844d
 810c6ac:	0810c3fd 	.word	0x0810c3fd
 810c6b0:	0810d3e2 	.word	0x0810d3e2

0810c6b4 <__sfputc_r>:
 810c6b4:	6893      	ldr	r3, [r2, #8]
 810c6b6:	3b01      	subs	r3, #1
 810c6b8:	2b00      	cmp	r3, #0
 810c6ba:	b410      	push	{r4}
 810c6bc:	6093      	str	r3, [r2, #8]
 810c6be:	da08      	bge.n	810c6d2 <__sfputc_r+0x1e>
 810c6c0:	6994      	ldr	r4, [r2, #24]
 810c6c2:	42a3      	cmp	r3, r4
 810c6c4:	db01      	blt.n	810c6ca <__sfputc_r+0x16>
 810c6c6:	290a      	cmp	r1, #10
 810c6c8:	d103      	bne.n	810c6d2 <__sfputc_r+0x1e>
 810c6ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 810c6ce:	f7fd bbf7 	b.w	8109ec0 <__swbuf_r>
 810c6d2:	6813      	ldr	r3, [r2, #0]
 810c6d4:	1c58      	adds	r0, r3, #1
 810c6d6:	6010      	str	r0, [r2, #0]
 810c6d8:	7019      	strb	r1, [r3, #0]
 810c6da:	4608      	mov	r0, r1
 810c6dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 810c6e0:	4770      	bx	lr

0810c6e2 <__sfputs_r>:
 810c6e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c6e4:	4606      	mov	r6, r0
 810c6e6:	460f      	mov	r7, r1
 810c6e8:	4614      	mov	r4, r2
 810c6ea:	18d5      	adds	r5, r2, r3
 810c6ec:	42ac      	cmp	r4, r5
 810c6ee:	d101      	bne.n	810c6f4 <__sfputs_r+0x12>
 810c6f0:	2000      	movs	r0, #0
 810c6f2:	e007      	b.n	810c704 <__sfputs_r+0x22>
 810c6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c6f8:	463a      	mov	r2, r7
 810c6fa:	4630      	mov	r0, r6
 810c6fc:	f7ff ffda 	bl	810c6b4 <__sfputc_r>
 810c700:	1c43      	adds	r3, r0, #1
 810c702:	d1f3      	bne.n	810c6ec <__sfputs_r+0xa>
 810c704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810c708 <_vfiprintf_r>:
 810c708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c70c:	460d      	mov	r5, r1
 810c70e:	b09d      	sub	sp, #116	; 0x74
 810c710:	4614      	mov	r4, r2
 810c712:	4698      	mov	r8, r3
 810c714:	4606      	mov	r6, r0
 810c716:	b118      	cbz	r0, 810c720 <_vfiprintf_r+0x18>
 810c718:	6983      	ldr	r3, [r0, #24]
 810c71a:	b90b      	cbnz	r3, 810c720 <_vfiprintf_r+0x18>
 810c71c:	f7fe fc24 	bl	810af68 <__sinit>
 810c720:	4b89      	ldr	r3, [pc, #548]	; (810c948 <_vfiprintf_r+0x240>)
 810c722:	429d      	cmp	r5, r3
 810c724:	d11b      	bne.n	810c75e <_vfiprintf_r+0x56>
 810c726:	6875      	ldr	r5, [r6, #4]
 810c728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810c72a:	07d9      	lsls	r1, r3, #31
 810c72c:	d405      	bmi.n	810c73a <_vfiprintf_r+0x32>
 810c72e:	89ab      	ldrh	r3, [r5, #12]
 810c730:	059a      	lsls	r2, r3, #22
 810c732:	d402      	bmi.n	810c73a <_vfiprintf_r+0x32>
 810c734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810c736:	f7ff f828 	bl	810b78a <__retarget_lock_acquire_recursive>
 810c73a:	89ab      	ldrh	r3, [r5, #12]
 810c73c:	071b      	lsls	r3, r3, #28
 810c73e:	d501      	bpl.n	810c744 <_vfiprintf_r+0x3c>
 810c740:	692b      	ldr	r3, [r5, #16]
 810c742:	b9eb      	cbnz	r3, 810c780 <_vfiprintf_r+0x78>
 810c744:	4629      	mov	r1, r5
 810c746:	4630      	mov	r0, r6
 810c748:	f7fd fc0c 	bl	8109f64 <__swsetup_r>
 810c74c:	b1c0      	cbz	r0, 810c780 <_vfiprintf_r+0x78>
 810c74e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810c750:	07dc      	lsls	r4, r3, #31
 810c752:	d50e      	bpl.n	810c772 <_vfiprintf_r+0x6a>
 810c754:	f04f 30ff 	mov.w	r0, #4294967295
 810c758:	b01d      	add	sp, #116	; 0x74
 810c75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c75e:	4b7b      	ldr	r3, [pc, #492]	; (810c94c <_vfiprintf_r+0x244>)
 810c760:	429d      	cmp	r5, r3
 810c762:	d101      	bne.n	810c768 <_vfiprintf_r+0x60>
 810c764:	68b5      	ldr	r5, [r6, #8]
 810c766:	e7df      	b.n	810c728 <_vfiprintf_r+0x20>
 810c768:	4b79      	ldr	r3, [pc, #484]	; (810c950 <_vfiprintf_r+0x248>)
 810c76a:	429d      	cmp	r5, r3
 810c76c:	bf08      	it	eq
 810c76e:	68f5      	ldreq	r5, [r6, #12]
 810c770:	e7da      	b.n	810c728 <_vfiprintf_r+0x20>
 810c772:	89ab      	ldrh	r3, [r5, #12]
 810c774:	0598      	lsls	r0, r3, #22
 810c776:	d4ed      	bmi.n	810c754 <_vfiprintf_r+0x4c>
 810c778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810c77a:	f7ff f807 	bl	810b78c <__retarget_lock_release_recursive>
 810c77e:	e7e9      	b.n	810c754 <_vfiprintf_r+0x4c>
 810c780:	2300      	movs	r3, #0
 810c782:	9309      	str	r3, [sp, #36]	; 0x24
 810c784:	2320      	movs	r3, #32
 810c786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810c78a:	f8cd 800c 	str.w	r8, [sp, #12]
 810c78e:	2330      	movs	r3, #48	; 0x30
 810c790:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810c954 <_vfiprintf_r+0x24c>
 810c794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810c798:	f04f 0901 	mov.w	r9, #1
 810c79c:	4623      	mov	r3, r4
 810c79e:	469a      	mov	sl, r3
 810c7a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c7a4:	b10a      	cbz	r2, 810c7aa <_vfiprintf_r+0xa2>
 810c7a6:	2a25      	cmp	r2, #37	; 0x25
 810c7a8:	d1f9      	bne.n	810c79e <_vfiprintf_r+0x96>
 810c7aa:	ebba 0b04 	subs.w	fp, sl, r4
 810c7ae:	d00b      	beq.n	810c7c8 <_vfiprintf_r+0xc0>
 810c7b0:	465b      	mov	r3, fp
 810c7b2:	4622      	mov	r2, r4
 810c7b4:	4629      	mov	r1, r5
 810c7b6:	4630      	mov	r0, r6
 810c7b8:	f7ff ff93 	bl	810c6e2 <__sfputs_r>
 810c7bc:	3001      	adds	r0, #1
 810c7be:	f000 80aa 	beq.w	810c916 <_vfiprintf_r+0x20e>
 810c7c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810c7c4:	445a      	add	r2, fp
 810c7c6:	9209      	str	r2, [sp, #36]	; 0x24
 810c7c8:	f89a 3000 	ldrb.w	r3, [sl]
 810c7cc:	2b00      	cmp	r3, #0
 810c7ce:	f000 80a2 	beq.w	810c916 <_vfiprintf_r+0x20e>
 810c7d2:	2300      	movs	r3, #0
 810c7d4:	f04f 32ff 	mov.w	r2, #4294967295
 810c7d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810c7dc:	f10a 0a01 	add.w	sl, sl, #1
 810c7e0:	9304      	str	r3, [sp, #16]
 810c7e2:	9307      	str	r3, [sp, #28]
 810c7e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810c7e8:	931a      	str	r3, [sp, #104]	; 0x68
 810c7ea:	4654      	mov	r4, sl
 810c7ec:	2205      	movs	r2, #5
 810c7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c7f2:	4858      	ldr	r0, [pc, #352]	; (810c954 <_vfiprintf_r+0x24c>)
 810c7f4:	f7f3 fd7c 	bl	81002f0 <memchr>
 810c7f8:	9a04      	ldr	r2, [sp, #16]
 810c7fa:	b9d8      	cbnz	r0, 810c834 <_vfiprintf_r+0x12c>
 810c7fc:	06d1      	lsls	r1, r2, #27
 810c7fe:	bf44      	itt	mi
 810c800:	2320      	movmi	r3, #32
 810c802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c806:	0713      	lsls	r3, r2, #28
 810c808:	bf44      	itt	mi
 810c80a:	232b      	movmi	r3, #43	; 0x2b
 810c80c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c810:	f89a 3000 	ldrb.w	r3, [sl]
 810c814:	2b2a      	cmp	r3, #42	; 0x2a
 810c816:	d015      	beq.n	810c844 <_vfiprintf_r+0x13c>
 810c818:	9a07      	ldr	r2, [sp, #28]
 810c81a:	4654      	mov	r4, sl
 810c81c:	2000      	movs	r0, #0
 810c81e:	f04f 0c0a 	mov.w	ip, #10
 810c822:	4621      	mov	r1, r4
 810c824:	f811 3b01 	ldrb.w	r3, [r1], #1
 810c828:	3b30      	subs	r3, #48	; 0x30
 810c82a:	2b09      	cmp	r3, #9
 810c82c:	d94e      	bls.n	810c8cc <_vfiprintf_r+0x1c4>
 810c82e:	b1b0      	cbz	r0, 810c85e <_vfiprintf_r+0x156>
 810c830:	9207      	str	r2, [sp, #28]
 810c832:	e014      	b.n	810c85e <_vfiprintf_r+0x156>
 810c834:	eba0 0308 	sub.w	r3, r0, r8
 810c838:	fa09 f303 	lsl.w	r3, r9, r3
 810c83c:	4313      	orrs	r3, r2
 810c83e:	9304      	str	r3, [sp, #16]
 810c840:	46a2      	mov	sl, r4
 810c842:	e7d2      	b.n	810c7ea <_vfiprintf_r+0xe2>
 810c844:	9b03      	ldr	r3, [sp, #12]
 810c846:	1d19      	adds	r1, r3, #4
 810c848:	681b      	ldr	r3, [r3, #0]
 810c84a:	9103      	str	r1, [sp, #12]
 810c84c:	2b00      	cmp	r3, #0
 810c84e:	bfbb      	ittet	lt
 810c850:	425b      	neglt	r3, r3
 810c852:	f042 0202 	orrlt.w	r2, r2, #2
 810c856:	9307      	strge	r3, [sp, #28]
 810c858:	9307      	strlt	r3, [sp, #28]
 810c85a:	bfb8      	it	lt
 810c85c:	9204      	strlt	r2, [sp, #16]
 810c85e:	7823      	ldrb	r3, [r4, #0]
 810c860:	2b2e      	cmp	r3, #46	; 0x2e
 810c862:	d10c      	bne.n	810c87e <_vfiprintf_r+0x176>
 810c864:	7863      	ldrb	r3, [r4, #1]
 810c866:	2b2a      	cmp	r3, #42	; 0x2a
 810c868:	d135      	bne.n	810c8d6 <_vfiprintf_r+0x1ce>
 810c86a:	9b03      	ldr	r3, [sp, #12]
 810c86c:	1d1a      	adds	r2, r3, #4
 810c86e:	681b      	ldr	r3, [r3, #0]
 810c870:	9203      	str	r2, [sp, #12]
 810c872:	2b00      	cmp	r3, #0
 810c874:	bfb8      	it	lt
 810c876:	f04f 33ff 	movlt.w	r3, #4294967295
 810c87a:	3402      	adds	r4, #2
 810c87c:	9305      	str	r3, [sp, #20]
 810c87e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810c964 <_vfiprintf_r+0x25c>
 810c882:	7821      	ldrb	r1, [r4, #0]
 810c884:	2203      	movs	r2, #3
 810c886:	4650      	mov	r0, sl
 810c888:	f7f3 fd32 	bl	81002f0 <memchr>
 810c88c:	b140      	cbz	r0, 810c8a0 <_vfiprintf_r+0x198>
 810c88e:	2340      	movs	r3, #64	; 0x40
 810c890:	eba0 000a 	sub.w	r0, r0, sl
 810c894:	fa03 f000 	lsl.w	r0, r3, r0
 810c898:	9b04      	ldr	r3, [sp, #16]
 810c89a:	4303      	orrs	r3, r0
 810c89c:	3401      	adds	r4, #1
 810c89e:	9304      	str	r3, [sp, #16]
 810c8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c8a4:	482c      	ldr	r0, [pc, #176]	; (810c958 <_vfiprintf_r+0x250>)
 810c8a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810c8aa:	2206      	movs	r2, #6
 810c8ac:	f7f3 fd20 	bl	81002f0 <memchr>
 810c8b0:	2800      	cmp	r0, #0
 810c8b2:	d03f      	beq.n	810c934 <_vfiprintf_r+0x22c>
 810c8b4:	4b29      	ldr	r3, [pc, #164]	; (810c95c <_vfiprintf_r+0x254>)
 810c8b6:	bb1b      	cbnz	r3, 810c900 <_vfiprintf_r+0x1f8>
 810c8b8:	9b03      	ldr	r3, [sp, #12]
 810c8ba:	3307      	adds	r3, #7
 810c8bc:	f023 0307 	bic.w	r3, r3, #7
 810c8c0:	3308      	adds	r3, #8
 810c8c2:	9303      	str	r3, [sp, #12]
 810c8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c8c6:	443b      	add	r3, r7
 810c8c8:	9309      	str	r3, [sp, #36]	; 0x24
 810c8ca:	e767      	b.n	810c79c <_vfiprintf_r+0x94>
 810c8cc:	fb0c 3202 	mla	r2, ip, r2, r3
 810c8d0:	460c      	mov	r4, r1
 810c8d2:	2001      	movs	r0, #1
 810c8d4:	e7a5      	b.n	810c822 <_vfiprintf_r+0x11a>
 810c8d6:	2300      	movs	r3, #0
 810c8d8:	3401      	adds	r4, #1
 810c8da:	9305      	str	r3, [sp, #20]
 810c8dc:	4619      	mov	r1, r3
 810c8de:	f04f 0c0a 	mov.w	ip, #10
 810c8e2:	4620      	mov	r0, r4
 810c8e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 810c8e8:	3a30      	subs	r2, #48	; 0x30
 810c8ea:	2a09      	cmp	r2, #9
 810c8ec:	d903      	bls.n	810c8f6 <_vfiprintf_r+0x1ee>
 810c8ee:	2b00      	cmp	r3, #0
 810c8f0:	d0c5      	beq.n	810c87e <_vfiprintf_r+0x176>
 810c8f2:	9105      	str	r1, [sp, #20]
 810c8f4:	e7c3      	b.n	810c87e <_vfiprintf_r+0x176>
 810c8f6:	fb0c 2101 	mla	r1, ip, r1, r2
 810c8fa:	4604      	mov	r4, r0
 810c8fc:	2301      	movs	r3, #1
 810c8fe:	e7f0      	b.n	810c8e2 <_vfiprintf_r+0x1da>
 810c900:	ab03      	add	r3, sp, #12
 810c902:	9300      	str	r3, [sp, #0]
 810c904:	462a      	mov	r2, r5
 810c906:	4b16      	ldr	r3, [pc, #88]	; (810c960 <_vfiprintf_r+0x258>)
 810c908:	a904      	add	r1, sp, #16
 810c90a:	4630      	mov	r0, r6
 810c90c:	f7fb fd9e 	bl	810844c <_printf_float>
 810c910:	4607      	mov	r7, r0
 810c912:	1c78      	adds	r0, r7, #1
 810c914:	d1d6      	bne.n	810c8c4 <_vfiprintf_r+0x1bc>
 810c916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810c918:	07d9      	lsls	r1, r3, #31
 810c91a:	d405      	bmi.n	810c928 <_vfiprintf_r+0x220>
 810c91c:	89ab      	ldrh	r3, [r5, #12]
 810c91e:	059a      	lsls	r2, r3, #22
 810c920:	d402      	bmi.n	810c928 <_vfiprintf_r+0x220>
 810c922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810c924:	f7fe ff32 	bl	810b78c <__retarget_lock_release_recursive>
 810c928:	89ab      	ldrh	r3, [r5, #12]
 810c92a:	065b      	lsls	r3, r3, #25
 810c92c:	f53f af12 	bmi.w	810c754 <_vfiprintf_r+0x4c>
 810c930:	9809      	ldr	r0, [sp, #36]	; 0x24
 810c932:	e711      	b.n	810c758 <_vfiprintf_r+0x50>
 810c934:	ab03      	add	r3, sp, #12
 810c936:	9300      	str	r3, [sp, #0]
 810c938:	462a      	mov	r2, r5
 810c93a:	4b09      	ldr	r3, [pc, #36]	; (810c960 <_vfiprintf_r+0x258>)
 810c93c:	a904      	add	r1, sp, #16
 810c93e:	4630      	mov	r0, r6
 810c940:	f7fc f828 	bl	8108994 <_printf_i>
 810c944:	e7e4      	b.n	810c910 <_vfiprintf_r+0x208>
 810c946:	bf00      	nop
 810c948:	0810d1c4 	.word	0x0810d1c4
 810c94c:	0810d1e4 	.word	0x0810d1e4
 810c950:	0810d1a4 	.word	0x0810d1a4
 810c954:	0810d3dc 	.word	0x0810d3dc
 810c958:	0810d3e6 	.word	0x0810d3e6
 810c95c:	0810844d 	.word	0x0810844d
 810c960:	0810c6e3 	.word	0x0810c6e3
 810c964:	0810d3e2 	.word	0x0810d3e2

0810c968 <nan>:
 810c968:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810c970 <nan+0x8>
 810c96c:	4770      	bx	lr
 810c96e:	bf00      	nop
 810c970:	00000000 	.word	0x00000000
 810c974:	7ff80000 	.word	0x7ff80000

0810c978 <_sbrk_r>:
 810c978:	b538      	push	{r3, r4, r5, lr}
 810c97a:	4d06      	ldr	r5, [pc, #24]	; (810c994 <_sbrk_r+0x1c>)
 810c97c:	2300      	movs	r3, #0
 810c97e:	4604      	mov	r4, r0
 810c980:	4608      	mov	r0, r1
 810c982:	602b      	str	r3, [r5, #0]
 810c984:	f7f5 fcc2 	bl	810230c <_sbrk>
 810c988:	1c43      	adds	r3, r0, #1
 810c98a:	d102      	bne.n	810c992 <_sbrk_r+0x1a>
 810c98c:	682b      	ldr	r3, [r5, #0]
 810c98e:	b103      	cbz	r3, 810c992 <_sbrk_r+0x1a>
 810c990:	6023      	str	r3, [r4, #0]
 810c992:	bd38      	pop	{r3, r4, r5, pc}
 810c994:	100003cc 	.word	0x100003cc

0810c998 <__sread>:
 810c998:	b510      	push	{r4, lr}
 810c99a:	460c      	mov	r4, r1
 810c99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810c9a0:	f000 f93a 	bl	810cc18 <_read_r>
 810c9a4:	2800      	cmp	r0, #0
 810c9a6:	bfab      	itete	ge
 810c9a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810c9aa:	89a3      	ldrhlt	r3, [r4, #12]
 810c9ac:	181b      	addge	r3, r3, r0
 810c9ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810c9b2:	bfac      	ite	ge
 810c9b4:	6563      	strge	r3, [r4, #84]	; 0x54
 810c9b6:	81a3      	strhlt	r3, [r4, #12]
 810c9b8:	bd10      	pop	{r4, pc}

0810c9ba <__swrite>:
 810c9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c9be:	461f      	mov	r7, r3
 810c9c0:	898b      	ldrh	r3, [r1, #12]
 810c9c2:	05db      	lsls	r3, r3, #23
 810c9c4:	4605      	mov	r5, r0
 810c9c6:	460c      	mov	r4, r1
 810c9c8:	4616      	mov	r6, r2
 810c9ca:	d505      	bpl.n	810c9d8 <__swrite+0x1e>
 810c9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810c9d0:	2302      	movs	r3, #2
 810c9d2:	2200      	movs	r2, #0
 810c9d4:	f000 f8b8 	bl	810cb48 <_lseek_r>
 810c9d8:	89a3      	ldrh	r3, [r4, #12]
 810c9da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810c9de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810c9e2:	81a3      	strh	r3, [r4, #12]
 810c9e4:	4632      	mov	r2, r6
 810c9e6:	463b      	mov	r3, r7
 810c9e8:	4628      	mov	r0, r5
 810c9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810c9ee:	f000 b837 	b.w	810ca60 <_write_r>

0810c9f2 <__sseek>:
 810c9f2:	b510      	push	{r4, lr}
 810c9f4:	460c      	mov	r4, r1
 810c9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810c9fa:	f000 f8a5 	bl	810cb48 <_lseek_r>
 810c9fe:	1c43      	adds	r3, r0, #1
 810ca00:	89a3      	ldrh	r3, [r4, #12]
 810ca02:	bf15      	itete	ne
 810ca04:	6560      	strne	r0, [r4, #84]	; 0x54
 810ca06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810ca0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810ca0e:	81a3      	strheq	r3, [r4, #12]
 810ca10:	bf18      	it	ne
 810ca12:	81a3      	strhne	r3, [r4, #12]
 810ca14:	bd10      	pop	{r4, pc}

0810ca16 <__sclose>:
 810ca16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ca1a:	f000 b851 	b.w	810cac0 <_close_r>

0810ca1e <strncmp>:
 810ca1e:	b510      	push	{r4, lr}
 810ca20:	b17a      	cbz	r2, 810ca42 <strncmp+0x24>
 810ca22:	4603      	mov	r3, r0
 810ca24:	3901      	subs	r1, #1
 810ca26:	1884      	adds	r4, r0, r2
 810ca28:	f813 0b01 	ldrb.w	r0, [r3], #1
 810ca2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810ca30:	4290      	cmp	r0, r2
 810ca32:	d101      	bne.n	810ca38 <strncmp+0x1a>
 810ca34:	42a3      	cmp	r3, r4
 810ca36:	d101      	bne.n	810ca3c <strncmp+0x1e>
 810ca38:	1a80      	subs	r0, r0, r2
 810ca3a:	bd10      	pop	{r4, pc}
 810ca3c:	2800      	cmp	r0, #0
 810ca3e:	d1f3      	bne.n	810ca28 <strncmp+0xa>
 810ca40:	e7fa      	b.n	810ca38 <strncmp+0x1a>
 810ca42:	4610      	mov	r0, r2
 810ca44:	e7f9      	b.n	810ca3a <strncmp+0x1c>

0810ca46 <__ascii_wctomb>:
 810ca46:	b149      	cbz	r1, 810ca5c <__ascii_wctomb+0x16>
 810ca48:	2aff      	cmp	r2, #255	; 0xff
 810ca4a:	bf85      	ittet	hi
 810ca4c:	238a      	movhi	r3, #138	; 0x8a
 810ca4e:	6003      	strhi	r3, [r0, #0]
 810ca50:	700a      	strbls	r2, [r1, #0]
 810ca52:	f04f 30ff 	movhi.w	r0, #4294967295
 810ca56:	bf98      	it	ls
 810ca58:	2001      	movls	r0, #1
 810ca5a:	4770      	bx	lr
 810ca5c:	4608      	mov	r0, r1
 810ca5e:	4770      	bx	lr

0810ca60 <_write_r>:
 810ca60:	b538      	push	{r3, r4, r5, lr}
 810ca62:	4d07      	ldr	r5, [pc, #28]	; (810ca80 <_write_r+0x20>)
 810ca64:	4604      	mov	r4, r0
 810ca66:	4608      	mov	r0, r1
 810ca68:	4611      	mov	r1, r2
 810ca6a:	2200      	movs	r2, #0
 810ca6c:	602a      	str	r2, [r5, #0]
 810ca6e:	461a      	mov	r2, r3
 810ca70:	f7f5 fbfb 	bl	810226a <_write>
 810ca74:	1c43      	adds	r3, r0, #1
 810ca76:	d102      	bne.n	810ca7e <_write_r+0x1e>
 810ca78:	682b      	ldr	r3, [r5, #0]
 810ca7a:	b103      	cbz	r3, 810ca7e <_write_r+0x1e>
 810ca7c:	6023      	str	r3, [r4, #0]
 810ca7e:	bd38      	pop	{r3, r4, r5, pc}
 810ca80:	100003cc 	.word	0x100003cc

0810ca84 <__assert_func>:
 810ca84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810ca86:	4614      	mov	r4, r2
 810ca88:	461a      	mov	r2, r3
 810ca8a:	4b09      	ldr	r3, [pc, #36]	; (810cab0 <__assert_func+0x2c>)
 810ca8c:	681b      	ldr	r3, [r3, #0]
 810ca8e:	4605      	mov	r5, r0
 810ca90:	68d8      	ldr	r0, [r3, #12]
 810ca92:	b14c      	cbz	r4, 810caa8 <__assert_func+0x24>
 810ca94:	4b07      	ldr	r3, [pc, #28]	; (810cab4 <__assert_func+0x30>)
 810ca96:	9100      	str	r1, [sp, #0]
 810ca98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810ca9c:	4906      	ldr	r1, [pc, #24]	; (810cab8 <__assert_func+0x34>)
 810ca9e:	462b      	mov	r3, r5
 810caa0:	f000 f81e 	bl	810cae0 <fiprintf>
 810caa4:	f000 f8ca 	bl	810cc3c <abort>
 810caa8:	4b04      	ldr	r3, [pc, #16]	; (810cabc <__assert_func+0x38>)
 810caaa:	461c      	mov	r4, r3
 810caac:	e7f3      	b.n	810ca96 <__assert_func+0x12>
 810caae:	bf00      	nop
 810cab0:	10000020 	.word	0x10000020
 810cab4:	0810d3ed 	.word	0x0810d3ed
 810cab8:	0810d3fa 	.word	0x0810d3fa
 810cabc:	0810d428 	.word	0x0810d428

0810cac0 <_close_r>:
 810cac0:	b538      	push	{r3, r4, r5, lr}
 810cac2:	4d06      	ldr	r5, [pc, #24]	; (810cadc <_close_r+0x1c>)
 810cac4:	2300      	movs	r3, #0
 810cac6:	4604      	mov	r4, r0
 810cac8:	4608      	mov	r0, r1
 810caca:	602b      	str	r3, [r5, #0]
 810cacc:	f7f5 fbe9 	bl	81022a2 <_close>
 810cad0:	1c43      	adds	r3, r0, #1
 810cad2:	d102      	bne.n	810cada <_close_r+0x1a>
 810cad4:	682b      	ldr	r3, [r5, #0]
 810cad6:	b103      	cbz	r3, 810cada <_close_r+0x1a>
 810cad8:	6023      	str	r3, [r4, #0]
 810cada:	bd38      	pop	{r3, r4, r5, pc}
 810cadc:	100003cc 	.word	0x100003cc

0810cae0 <fiprintf>:
 810cae0:	b40e      	push	{r1, r2, r3}
 810cae2:	b503      	push	{r0, r1, lr}
 810cae4:	4601      	mov	r1, r0
 810cae6:	ab03      	add	r3, sp, #12
 810cae8:	4805      	ldr	r0, [pc, #20]	; (810cb00 <fiprintf+0x20>)
 810caea:	f853 2b04 	ldr.w	r2, [r3], #4
 810caee:	6800      	ldr	r0, [r0, #0]
 810caf0:	9301      	str	r3, [sp, #4]
 810caf2:	f7ff fe09 	bl	810c708 <_vfiprintf_r>
 810caf6:	b002      	add	sp, #8
 810caf8:	f85d eb04 	ldr.w	lr, [sp], #4
 810cafc:	b003      	add	sp, #12
 810cafe:	4770      	bx	lr
 810cb00:	10000020 	.word	0x10000020

0810cb04 <_fstat_r>:
 810cb04:	b538      	push	{r3, r4, r5, lr}
 810cb06:	4d07      	ldr	r5, [pc, #28]	; (810cb24 <_fstat_r+0x20>)
 810cb08:	2300      	movs	r3, #0
 810cb0a:	4604      	mov	r4, r0
 810cb0c:	4608      	mov	r0, r1
 810cb0e:	4611      	mov	r1, r2
 810cb10:	602b      	str	r3, [r5, #0]
 810cb12:	f7f5 fbd2 	bl	81022ba <_fstat>
 810cb16:	1c43      	adds	r3, r0, #1
 810cb18:	d102      	bne.n	810cb20 <_fstat_r+0x1c>
 810cb1a:	682b      	ldr	r3, [r5, #0]
 810cb1c:	b103      	cbz	r3, 810cb20 <_fstat_r+0x1c>
 810cb1e:	6023      	str	r3, [r4, #0]
 810cb20:	bd38      	pop	{r3, r4, r5, pc}
 810cb22:	bf00      	nop
 810cb24:	100003cc 	.word	0x100003cc

0810cb28 <_isatty_r>:
 810cb28:	b538      	push	{r3, r4, r5, lr}
 810cb2a:	4d06      	ldr	r5, [pc, #24]	; (810cb44 <_isatty_r+0x1c>)
 810cb2c:	2300      	movs	r3, #0
 810cb2e:	4604      	mov	r4, r0
 810cb30:	4608      	mov	r0, r1
 810cb32:	602b      	str	r3, [r5, #0]
 810cb34:	f7f5 fbd1 	bl	81022da <_isatty>
 810cb38:	1c43      	adds	r3, r0, #1
 810cb3a:	d102      	bne.n	810cb42 <_isatty_r+0x1a>
 810cb3c:	682b      	ldr	r3, [r5, #0]
 810cb3e:	b103      	cbz	r3, 810cb42 <_isatty_r+0x1a>
 810cb40:	6023      	str	r3, [r4, #0]
 810cb42:	bd38      	pop	{r3, r4, r5, pc}
 810cb44:	100003cc 	.word	0x100003cc

0810cb48 <_lseek_r>:
 810cb48:	b538      	push	{r3, r4, r5, lr}
 810cb4a:	4d07      	ldr	r5, [pc, #28]	; (810cb68 <_lseek_r+0x20>)
 810cb4c:	4604      	mov	r4, r0
 810cb4e:	4608      	mov	r0, r1
 810cb50:	4611      	mov	r1, r2
 810cb52:	2200      	movs	r2, #0
 810cb54:	602a      	str	r2, [r5, #0]
 810cb56:	461a      	mov	r2, r3
 810cb58:	f7f5 fbca 	bl	81022f0 <_lseek>
 810cb5c:	1c43      	adds	r3, r0, #1
 810cb5e:	d102      	bne.n	810cb66 <_lseek_r+0x1e>
 810cb60:	682b      	ldr	r3, [r5, #0]
 810cb62:	b103      	cbz	r3, 810cb66 <_lseek_r+0x1e>
 810cb64:	6023      	str	r3, [r4, #0]
 810cb66:	bd38      	pop	{r3, r4, r5, pc}
 810cb68:	100003cc 	.word	0x100003cc

0810cb6c <memmove>:
 810cb6c:	4288      	cmp	r0, r1
 810cb6e:	b510      	push	{r4, lr}
 810cb70:	eb01 0402 	add.w	r4, r1, r2
 810cb74:	d902      	bls.n	810cb7c <memmove+0x10>
 810cb76:	4284      	cmp	r4, r0
 810cb78:	4623      	mov	r3, r4
 810cb7a:	d807      	bhi.n	810cb8c <memmove+0x20>
 810cb7c:	1e43      	subs	r3, r0, #1
 810cb7e:	42a1      	cmp	r1, r4
 810cb80:	d008      	beq.n	810cb94 <memmove+0x28>
 810cb82:	f811 2b01 	ldrb.w	r2, [r1], #1
 810cb86:	f803 2f01 	strb.w	r2, [r3, #1]!
 810cb8a:	e7f8      	b.n	810cb7e <memmove+0x12>
 810cb8c:	4402      	add	r2, r0
 810cb8e:	4601      	mov	r1, r0
 810cb90:	428a      	cmp	r2, r1
 810cb92:	d100      	bne.n	810cb96 <memmove+0x2a>
 810cb94:	bd10      	pop	{r4, pc}
 810cb96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810cb9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810cb9e:	e7f7      	b.n	810cb90 <memmove+0x24>

0810cba0 <__malloc_lock>:
 810cba0:	4801      	ldr	r0, [pc, #4]	; (810cba8 <__malloc_lock+0x8>)
 810cba2:	f7fe bdf2 	b.w	810b78a <__retarget_lock_acquire_recursive>
 810cba6:	bf00      	nop
 810cba8:	100003c0 	.word	0x100003c0

0810cbac <__malloc_unlock>:
 810cbac:	4801      	ldr	r0, [pc, #4]	; (810cbb4 <__malloc_unlock+0x8>)
 810cbae:	f7fe bded 	b.w	810b78c <__retarget_lock_release_recursive>
 810cbb2:	bf00      	nop
 810cbb4:	100003c0 	.word	0x100003c0

0810cbb8 <_realloc_r>:
 810cbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810cbbc:	4680      	mov	r8, r0
 810cbbe:	4614      	mov	r4, r2
 810cbc0:	460e      	mov	r6, r1
 810cbc2:	b921      	cbnz	r1, 810cbce <_realloc_r+0x16>
 810cbc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810cbc8:	4611      	mov	r1, r2
 810cbca:	f7ff bba3 	b.w	810c314 <_malloc_r>
 810cbce:	b92a      	cbnz	r2, 810cbdc <_realloc_r+0x24>
 810cbd0:	f7ff fb34 	bl	810c23c <_free_r>
 810cbd4:	4625      	mov	r5, r4
 810cbd6:	4628      	mov	r0, r5
 810cbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810cbdc:	f000 f835 	bl	810cc4a <_malloc_usable_size_r>
 810cbe0:	4284      	cmp	r4, r0
 810cbe2:	4607      	mov	r7, r0
 810cbe4:	d802      	bhi.n	810cbec <_realloc_r+0x34>
 810cbe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810cbea:	d812      	bhi.n	810cc12 <_realloc_r+0x5a>
 810cbec:	4621      	mov	r1, r4
 810cbee:	4640      	mov	r0, r8
 810cbf0:	f7ff fb90 	bl	810c314 <_malloc_r>
 810cbf4:	4605      	mov	r5, r0
 810cbf6:	2800      	cmp	r0, #0
 810cbf8:	d0ed      	beq.n	810cbd6 <_realloc_r+0x1e>
 810cbfa:	42bc      	cmp	r4, r7
 810cbfc:	4622      	mov	r2, r4
 810cbfe:	4631      	mov	r1, r6
 810cc00:	bf28      	it	cs
 810cc02:	463a      	movcs	r2, r7
 810cc04:	f7fb fb6c 	bl	81082e0 <memcpy>
 810cc08:	4631      	mov	r1, r6
 810cc0a:	4640      	mov	r0, r8
 810cc0c:	f7ff fb16 	bl	810c23c <_free_r>
 810cc10:	e7e1      	b.n	810cbd6 <_realloc_r+0x1e>
 810cc12:	4635      	mov	r5, r6
 810cc14:	e7df      	b.n	810cbd6 <_realloc_r+0x1e>
	...

0810cc18 <_read_r>:
 810cc18:	b538      	push	{r3, r4, r5, lr}
 810cc1a:	4d07      	ldr	r5, [pc, #28]	; (810cc38 <_read_r+0x20>)
 810cc1c:	4604      	mov	r4, r0
 810cc1e:	4608      	mov	r0, r1
 810cc20:	4611      	mov	r1, r2
 810cc22:	2200      	movs	r2, #0
 810cc24:	602a      	str	r2, [r5, #0]
 810cc26:	461a      	mov	r2, r3
 810cc28:	f7f5 fb02 	bl	8102230 <_read>
 810cc2c:	1c43      	adds	r3, r0, #1
 810cc2e:	d102      	bne.n	810cc36 <_read_r+0x1e>
 810cc30:	682b      	ldr	r3, [r5, #0]
 810cc32:	b103      	cbz	r3, 810cc36 <_read_r+0x1e>
 810cc34:	6023      	str	r3, [r4, #0]
 810cc36:	bd38      	pop	{r3, r4, r5, pc}
 810cc38:	100003cc 	.word	0x100003cc

0810cc3c <abort>:
 810cc3c:	b508      	push	{r3, lr}
 810cc3e:	2006      	movs	r0, #6
 810cc40:	f000 f834 	bl	810ccac <raise>
 810cc44:	2001      	movs	r0, #1
 810cc46:	f7f5 fae9 	bl	810221c <_exit>

0810cc4a <_malloc_usable_size_r>:
 810cc4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810cc4e:	1f18      	subs	r0, r3, #4
 810cc50:	2b00      	cmp	r3, #0
 810cc52:	bfbc      	itt	lt
 810cc54:	580b      	ldrlt	r3, [r1, r0]
 810cc56:	18c0      	addlt	r0, r0, r3
 810cc58:	4770      	bx	lr

0810cc5a <_raise_r>:
 810cc5a:	291f      	cmp	r1, #31
 810cc5c:	b538      	push	{r3, r4, r5, lr}
 810cc5e:	4604      	mov	r4, r0
 810cc60:	460d      	mov	r5, r1
 810cc62:	d904      	bls.n	810cc6e <_raise_r+0x14>
 810cc64:	2316      	movs	r3, #22
 810cc66:	6003      	str	r3, [r0, #0]
 810cc68:	f04f 30ff 	mov.w	r0, #4294967295
 810cc6c:	bd38      	pop	{r3, r4, r5, pc}
 810cc6e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810cc70:	b112      	cbz	r2, 810cc78 <_raise_r+0x1e>
 810cc72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810cc76:	b94b      	cbnz	r3, 810cc8c <_raise_r+0x32>
 810cc78:	4620      	mov	r0, r4
 810cc7a:	f000 f831 	bl	810cce0 <_getpid_r>
 810cc7e:	462a      	mov	r2, r5
 810cc80:	4601      	mov	r1, r0
 810cc82:	4620      	mov	r0, r4
 810cc84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810cc88:	f000 b818 	b.w	810ccbc <_kill_r>
 810cc8c:	2b01      	cmp	r3, #1
 810cc8e:	d00a      	beq.n	810cca6 <_raise_r+0x4c>
 810cc90:	1c59      	adds	r1, r3, #1
 810cc92:	d103      	bne.n	810cc9c <_raise_r+0x42>
 810cc94:	2316      	movs	r3, #22
 810cc96:	6003      	str	r3, [r0, #0]
 810cc98:	2001      	movs	r0, #1
 810cc9a:	e7e7      	b.n	810cc6c <_raise_r+0x12>
 810cc9c:	2400      	movs	r4, #0
 810cc9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810cca2:	4628      	mov	r0, r5
 810cca4:	4798      	blx	r3
 810cca6:	2000      	movs	r0, #0
 810cca8:	e7e0      	b.n	810cc6c <_raise_r+0x12>
	...

0810ccac <raise>:
 810ccac:	4b02      	ldr	r3, [pc, #8]	; (810ccb8 <raise+0xc>)
 810ccae:	4601      	mov	r1, r0
 810ccb0:	6818      	ldr	r0, [r3, #0]
 810ccb2:	f7ff bfd2 	b.w	810cc5a <_raise_r>
 810ccb6:	bf00      	nop
 810ccb8:	10000020 	.word	0x10000020

0810ccbc <_kill_r>:
 810ccbc:	b538      	push	{r3, r4, r5, lr}
 810ccbe:	4d07      	ldr	r5, [pc, #28]	; (810ccdc <_kill_r+0x20>)
 810ccc0:	2300      	movs	r3, #0
 810ccc2:	4604      	mov	r4, r0
 810ccc4:	4608      	mov	r0, r1
 810ccc6:	4611      	mov	r1, r2
 810ccc8:	602b      	str	r3, [r5, #0]
 810ccca:	f7f5 fa97 	bl	81021fc <_kill>
 810ccce:	1c43      	adds	r3, r0, #1
 810ccd0:	d102      	bne.n	810ccd8 <_kill_r+0x1c>
 810ccd2:	682b      	ldr	r3, [r5, #0]
 810ccd4:	b103      	cbz	r3, 810ccd8 <_kill_r+0x1c>
 810ccd6:	6023      	str	r3, [r4, #0]
 810ccd8:	bd38      	pop	{r3, r4, r5, pc}
 810ccda:	bf00      	nop
 810ccdc:	100003cc 	.word	0x100003cc

0810cce0 <_getpid_r>:
 810cce0:	f7f5 ba84 	b.w	81021ec <_getpid>

0810cce4 <_init>:
 810cce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cce6:	bf00      	nop
 810cce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ccea:	bc08      	pop	{r3}
 810ccec:	469e      	mov	lr, r3
 810ccee:	4770      	bx	lr

0810ccf0 <_fini>:
 810ccf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ccf2:	bf00      	nop
 810ccf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ccf6:	bc08      	pop	{r3}
 810ccf8:	469e      	mov	lr, r3
 810ccfa:	4770      	bx	lr
