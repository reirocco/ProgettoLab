
ProvaPID-IMU_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f614  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0810f8b8  0810f8b8  0001f8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ffe4  0810ffe4  0001ffe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810ffec  0810ffec  0001ffec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810fff0  0810fff0  0001fff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  10000000  0810fff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002c4  100001f4  081101e8  000201f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  100004b8  081101e8  000204b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022b23  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003af0  00000000  00000000  00042d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b20  00000000  00000000  00046838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001978  00000000  00000000  00048358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003fb2c  00000000  00000000  00049cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023af9  00000000  00000000  000897fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a08a9  00000000  00000000  000ad2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0024db9e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008a7c  00000000  00000000  0024dbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001f4 	.word	0x100001f4
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810f89c 	.word	0x0810f89c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001f8 	.word	0x100001f8
 81002dc:	0810f89c 	.word	0x0810f89c

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <init_tune_PID_Pitch>:
#include "PID_Pitch.h"

void init_tune_PID_Pitch(PID_Pitch* p,float Tc,float Kp,float Ki,float Kd){
 8101138:	b480      	push	{r7}
 810113a:	b087      	sub	sp, #28
 810113c:	af00      	add	r7, sp, #0
 810113e:	6178      	str	r0, [r7, #20]
 8101140:	ed87 0a04 	vstr	s0, [r7, #16]
 8101144:	edc7 0a03 	vstr	s1, [r7, #12]
 8101148:	ed87 1a02 	vstr	s2, [r7, #8]
 810114c:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Tc=Tc;
 8101150:	697b      	ldr	r3, [r7, #20]
 8101152:	693a      	ldr	r2, [r7, #16]
 8101154:	60da      	str	r2, [r3, #12]
	p->u_max= 32.3017; // coppia massima
 8101156:	697b      	ldr	r3, [r7, #20]
 8101158:	4a09      	ldr	r2, [pc, #36]	; (8101180 <init_tune_PID_Pitch+0x48>)
 810115a:	611a      	str	r2, [r3, #16]
	p->u_min= -32.3017;  // coppia minima
 810115c:	697b      	ldr	r3, [r7, #20]
 810115e:	4a09      	ldr	r2, [pc, #36]	; (8101184 <init_tune_PID_Pitch+0x4c>)
 8101160:	615a      	str	r2, [r3, #20]

	p->Kp=Kp;
 8101162:	697b      	ldr	r3, [r7, #20]
 8101164:	68fa      	ldr	r2, [r7, #12]
 8101166:	601a      	str	r2, [r3, #0]
	p->Ki=Ki;
 8101168:	697b      	ldr	r3, [r7, #20]
 810116a:	68ba      	ldr	r2, [r7, #8]
 810116c:	605a      	str	r2, [r3, #4]
	p->Kd=Kd;
 810116e:	697b      	ldr	r3, [r7, #20]
 8101170:	687a      	ldr	r2, [r7, #4]
 8101172:	609a      	str	r2, [r3, #8]
}
 8101174:	bf00      	nop
 8101176:	371c      	adds	r7, #28
 8101178:	46bd      	mov	sp, r7
 810117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810117e:	4770      	bx	lr
 8101180:	420134f1 	.word	0x420134f1
 8101184:	c20134f1 	.word	0xc20134f1

08101188 <PID_controller_Pitch>:

float PID_controller_Pitch(PID_Pitch* p,float y,float r){
 8101188:	b480      	push	{r7}
 810118a:	b08b      	sub	sp, #44	; 0x2c
 810118c:	af00      	add	r7, sp, #0
 810118e:	60f8      	str	r0, [r7, #12]
 8101190:	ed87 0a02 	vstr	s0, [r7, #8]
 8101194:	edc7 0a01 	vstr	s1, [r7, #4]
	static float e_old=0,Iterm=0;
	float u;
	float newIterm;
	float e=r-y;
 8101198:	ed97 7a01 	vldr	s14, [r7, #4]
 810119c:	edd7 7a02 	vldr	s15, [r7, #8]
 81011a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 81011a4:	edc7 7a08 	vstr	s15, [r7, #32]
	float Pterm = p->Kp*e;
 81011a8:	68fb      	ldr	r3, [r7, #12]
 81011aa:	edd3 7a00 	vldr	s15, [r3]
 81011ae:	ed97 7a08 	vldr	s14, [r7, #32]
 81011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81011b6:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm=Iterm+(p->Ki)*p->Tc*e_old;
 81011ba:	68fb      	ldr	r3, [r7, #12]
 81011bc:	ed93 7a01 	vldr	s14, [r3, #4]
 81011c0:	68fb      	ldr	r3, [r7, #12]
 81011c2:	edd3 7a03 	vldr	s15, [r3, #12]
 81011c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 81011ca:	4b2b      	ldr	r3, [pc, #172]	; (8101278 <PID_controller_Pitch+0xf0>)
 81011cc:	edd3 7a00 	vldr	s15, [r3]
 81011d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 81011d4:	4b29      	ldr	r3, [pc, #164]	; (810127c <PID_controller_Pitch+0xf4>)
 81011d6:	edd3 7a00 	vldr	s15, [r3]
 81011da:	ee77 7a27 	vadd.f32	s15, s14, s15
 81011de:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm=(p->Kd/p->Tc)*(e-e_old);
 81011e2:	68fb      	ldr	r3, [r7, #12]
 81011e4:	edd3 6a02 	vldr	s13, [r3, #8]
 81011e8:	68fb      	ldr	r3, [r7, #12]
 81011ea:	edd3 7a03 	vldr	s15, [r3, #12]
 81011ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81011f2:	4b21      	ldr	r3, [pc, #132]	; (8101278 <PID_controller_Pitch+0xf0>)
 81011f4:	edd3 7a00 	vldr	s15, [r3]
 81011f8:	edd7 6a08 	vldr	s13, [r7, #32]
 81011fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8101200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101204:	edc7 7a05 	vstr	s15, [r7, #20]
	e_old=e;
 8101208:	4a1b      	ldr	r2, [pc, #108]	; (8101278 <PID_controller_Pitch+0xf0>)
 810120a:	6a3b      	ldr	r3, [r7, #32]
 810120c:	6013      	str	r3, [r2, #0]
	u=Pterm+newIterm+Dterm;
 810120e:	ed97 7a07 	vldr	s14, [r7, #28]
 8101212:	edd7 7a06 	vldr	s15, [r7, #24]
 8101216:	ee77 7a27 	vadd.f32	s15, s14, s15
 810121a:	ed97 7a05 	vldr	s14, [r7, #20]
 810121e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101222:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(u>p->u_max){
 8101226:	68fb      	ldr	r3, [r7, #12]
 8101228:	edd3 7a04 	vldr	s15, [r3, #16]
 810122c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101238:	dd03      	ble.n	8101242 <PID_controller_Pitch+0xba>
		u=p->u_max;
 810123a:	68fb      	ldr	r3, [r7, #12]
 810123c:	691b      	ldr	r3, [r3, #16]
 810123e:	627b      	str	r3, [r7, #36]	; 0x24
 8101240:	e010      	b.n	8101264 <PID_controller_Pitch+0xdc>
	}else if(u<p->u_min){
 8101242:	68fb      	ldr	r3, [r7, #12]
 8101244:	edd3 7a05 	vldr	s15, [r3, #20]
 8101248:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 810124c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101254:	d503      	bpl.n	810125e <PID_controller_Pitch+0xd6>
		u=p->u_min;
 8101256:	68fb      	ldr	r3, [r7, #12]
 8101258:	695b      	ldr	r3, [r3, #20]
 810125a:	627b      	str	r3, [r7, #36]	; 0x24
 810125c:	e002      	b.n	8101264 <PID_controller_Pitch+0xdc>
	}else{
		Iterm= newIterm;
 810125e:	4a07      	ldr	r2, [pc, #28]	; (810127c <PID_controller_Pitch+0xf4>)
 8101260:	69bb      	ldr	r3, [r7, #24]
 8101262:	6013      	str	r3, [r2, #0]
	}
	return u;
 8101264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101266:	ee07 3a90 	vmov	s15, r3

}
 810126a:	eeb0 0a67 	vmov.f32	s0, s15
 810126e:	372c      	adds	r7, #44	; 0x2c
 8101270:	46bd      	mov	sp, r7
 8101272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101276:	4770      	bx	lr
 8101278:	10000210 	.word	0x10000210
 810127c:	10000214 	.word	0x10000214

08101280 <init_tune_PID_Roll>:
#include "PID_Roll.h"
void init_tune_PID_Roll(PID_Roll* p,float Tc,float Kp,float Ki,float Kd){
 8101280:	b480      	push	{r7}
 8101282:	b087      	sub	sp, #28
 8101284:	af00      	add	r7, sp, #0
 8101286:	6178      	str	r0, [r7, #20]
 8101288:	ed87 0a04 	vstr	s0, [r7, #16]
 810128c:	edc7 0a03 	vstr	s1, [r7, #12]
 8101290:	ed87 1a02 	vstr	s2, [r7, #8]
 8101294:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Tc=Tc;
 8101298:	697b      	ldr	r3, [r7, #20]
 810129a:	693a      	ldr	r2, [r7, #16]
 810129c:	60da      	str	r2, [r3, #12]
	p->u_max= 32.6800; // coppia massima
 810129e:	697b      	ldr	r3, [r7, #20]
 81012a0:	4a09      	ldr	r2, [pc, #36]	; (81012c8 <init_tune_PID_Roll+0x48>)
 81012a2:	611a      	str	r2, [r3, #16]
	p->u_min= -32.6800;  // coppia minima
 81012a4:	697b      	ldr	r3, [r7, #20]
 81012a6:	4a09      	ldr	r2, [pc, #36]	; (81012cc <init_tune_PID_Roll+0x4c>)
 81012a8:	615a      	str	r2, [r3, #20]

	p->Kp=Kp;
 81012aa:	697b      	ldr	r3, [r7, #20]
 81012ac:	68fa      	ldr	r2, [r7, #12]
 81012ae:	601a      	str	r2, [r3, #0]
	p->Ki=Ki;
 81012b0:	697b      	ldr	r3, [r7, #20]
 81012b2:	68ba      	ldr	r2, [r7, #8]
 81012b4:	605a      	str	r2, [r3, #4]
	p->Kd=Kd;
 81012b6:	697b      	ldr	r3, [r7, #20]
 81012b8:	687a      	ldr	r2, [r7, #4]
 81012ba:	609a      	str	r2, [r3, #8]
}
 81012bc:	bf00      	nop
 81012be:	371c      	adds	r7, #28
 81012c0:	46bd      	mov	sp, r7
 81012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012c6:	4770      	bx	lr
 81012c8:	4202b852 	.word	0x4202b852
 81012cc:	c202b852 	.word	0xc202b852

081012d0 <PID_controller_Roll>:
// metodo per il calcolo del PID
float PID_controller_Roll(PID_Roll* p,float y,float r){
 81012d0:	b480      	push	{r7}
 81012d2:	b08b      	sub	sp, #44	; 0x2c
 81012d4:	af00      	add	r7, sp, #0
 81012d6:	60f8      	str	r0, [r7, #12]
 81012d8:	ed87 0a02 	vstr	s0, [r7, #8]
 81012dc:	edc7 0a01 	vstr	s1, [r7, #4]

	static float e_old=0,Iterm=0;
	float u;
	float newIterm;
	float e=r-y;
 81012e0:	ed97 7a01 	vldr	s14, [r7, #4]
 81012e4:	edd7 7a02 	vldr	s15, [r7, #8]
 81012e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 81012ec:	edc7 7a08 	vstr	s15, [r7, #32]
	float Pterm = p->Kp*e;
 81012f0:	68fb      	ldr	r3, [r7, #12]
 81012f2:	edd3 7a00 	vldr	s15, [r3]
 81012f6:	ed97 7a08 	vldr	s14, [r7, #32]
 81012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012fe:	edc7 7a07 	vstr	s15, [r7, #28]
	newIterm=Iterm+(p->Ki)*p->Tc*e_old;
 8101302:	68fb      	ldr	r3, [r7, #12]
 8101304:	ed93 7a01 	vldr	s14, [r3, #4]
 8101308:	68fb      	ldr	r3, [r7, #12]
 810130a:	edd3 7a03 	vldr	s15, [r3, #12]
 810130e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101312:	4b2b      	ldr	r3, [pc, #172]	; (81013c0 <PID_controller_Roll+0xf0>)
 8101314:	edd3 7a00 	vldr	s15, [r3]
 8101318:	ee27 7a27 	vmul.f32	s14, s14, s15
 810131c:	4b29      	ldr	r3, [pc, #164]	; (81013c4 <PID_controller_Roll+0xf4>)
 810131e:	edd3 7a00 	vldr	s15, [r3]
 8101322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101326:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dterm=(p->Kd/p->Tc)*(e-e_old);
 810132a:	68fb      	ldr	r3, [r7, #12]
 810132c:	edd3 6a02 	vldr	s13, [r3, #8]
 8101330:	68fb      	ldr	r3, [r7, #12]
 8101332:	edd3 7a03 	vldr	s15, [r3, #12]
 8101336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810133a:	4b21      	ldr	r3, [pc, #132]	; (81013c0 <PID_controller_Roll+0xf0>)
 810133c:	edd3 7a00 	vldr	s15, [r3]
 8101340:	edd7 6a08 	vldr	s13, [r7, #32]
 8101344:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8101348:	ee67 7a27 	vmul.f32	s15, s14, s15
 810134c:	edc7 7a05 	vstr	s15, [r7, #20]
	e_old=e;
 8101350:	4a1b      	ldr	r2, [pc, #108]	; (81013c0 <PID_controller_Roll+0xf0>)
 8101352:	6a3b      	ldr	r3, [r7, #32]
 8101354:	6013      	str	r3, [r2, #0]
	u=Pterm+newIterm+Dterm;
 8101356:	ed97 7a07 	vldr	s14, [r7, #28]
 810135a:	edd7 7a06 	vldr	s15, [r7, #24]
 810135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101362:	ed97 7a05 	vldr	s14, [r7, #20]
 8101366:	ee77 7a27 	vadd.f32	s15, s14, s15
 810136a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if(u>p->u_max){
 810136e:	68fb      	ldr	r3, [r7, #12]
 8101370:	edd3 7a04 	vldr	s15, [r3, #16]
 8101374:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 810137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101380:	dd03      	ble.n	810138a <PID_controller_Roll+0xba>
		u=p->u_max;
 8101382:	68fb      	ldr	r3, [r7, #12]
 8101384:	691b      	ldr	r3, [r3, #16]
 8101386:	627b      	str	r3, [r7, #36]	; 0x24
 8101388:	e010      	b.n	81013ac <PID_controller_Roll+0xdc>

	}else if(u<p->u_min){
 810138a:	68fb      	ldr	r3, [r7, #12]
 810138c:	edd3 7a05 	vldr	s15, [r3, #20]
 8101390:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101394:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810139c:	d503      	bpl.n	81013a6 <PID_controller_Roll+0xd6>
		u=p->u_min;
 810139e:	68fb      	ldr	r3, [r7, #12]
 81013a0:	695b      	ldr	r3, [r3, #20]
 81013a2:	627b      	str	r3, [r7, #36]	; 0x24
 81013a4:	e002      	b.n	81013ac <PID_controller_Roll+0xdc>
	}else{
		Iterm= newIterm;
 81013a6:	4a07      	ldr	r2, [pc, #28]	; (81013c4 <PID_controller_Roll+0xf4>)
 81013a8:	69bb      	ldr	r3, [r7, #24]
 81013aa:	6013      	str	r3, [r2, #0]
	}
	return u;
 81013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81013ae:	ee07 3a90 	vmov	s15, r3

}
 81013b2:	eeb0 0a67 	vmov.f32	s0, s15
 81013b6:	372c      	adds	r7, #44	; 0x2c
 81013b8:	46bd      	mov	sp, r7
 81013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013be:	4770      	bx	lr
 81013c0:	10000218 	.word	0x10000218
 81013c4:	1000021c 	.word	0x1000021c

081013c8 <init_tune_PID_Yaw>:
#include "PID_Yaw.h"

void init_tune_PID_Yaw(PID_Yaw* p,float Tc,float Kp,float Ki,float Kd){
 81013c8:	b480      	push	{r7}
 81013ca:	b087      	sub	sp, #28
 81013cc:	af00      	add	r7, sp, #0
 81013ce:	6178      	str	r0, [r7, #20]
 81013d0:	ed87 0a04 	vstr	s0, [r7, #16]
 81013d4:	edc7 0a03 	vstr	s1, [r7, #12]
 81013d8:	ed87 1a02 	vstr	s2, [r7, #8]
 81013dc:	edc7 1a01 	vstr	s3, [r7, #4]
	p->Tc=Tc;
 81013e0:	697b      	ldr	r3, [r7, #20]
 81013e2:	693a      	ldr	r2, [r7, #16]
 81013e4:	60da      	str	r2, [r3, #12]
	p->u_max= 17.8418; // coppia massima
 81013e6:	697b      	ldr	r3, [r7, #20]
 81013e8:	4a09      	ldr	r2, [pc, #36]	; (8101410 <init_tune_PID_Yaw+0x48>)
 81013ea:	611a      	str	r2, [r3, #16]
	p->u_min= -17.8418;  // coppia minima
 81013ec:	697b      	ldr	r3, [r7, #20]
 81013ee:	4a09      	ldr	r2, [pc, #36]	; (8101414 <init_tune_PID_Yaw+0x4c>)
 81013f0:	615a      	str	r2, [r3, #20]

	p->Kp=Kp;
 81013f2:	697b      	ldr	r3, [r7, #20]
 81013f4:	68fa      	ldr	r2, [r7, #12]
 81013f6:	601a      	str	r2, [r3, #0]
	p->Ki=Ki;
 81013f8:	697b      	ldr	r3, [r7, #20]
 81013fa:	68ba      	ldr	r2, [r7, #8]
 81013fc:	605a      	str	r2, [r3, #4]
	p->Kd=Kd;
 81013fe:	697b      	ldr	r3, [r7, #20]
 8101400:	687a      	ldr	r2, [r7, #4]
 8101402:	609a      	str	r2, [r3, #8]
}
 8101404:	bf00      	nop
 8101406:	371c      	adds	r7, #28
 8101408:	46bd      	mov	sp, r7
 810140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810140e:	4770      	bx	lr
 8101410:	418ebc02 	.word	0x418ebc02
 8101414:	c18ebc02 	.word	0xc18ebc02

08101418 <CtoD_M1>:
#include "PWM_Motor1.h"
float CtoD_M1(float u){
 8101418:	b580      	push	{r7, lr}
 810141a:	b084      	sub	sp, #16
 810141c:	af00      	add	r7, sp, #0
 810141e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0)
 8101422:	edd7 7a01 	vldr	s15, [r7, #4]
 8101426:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810142e:	d805      	bhi.n	810143c <CtoD_M1+0x24>
		u = -u;
 8101430:	edd7 7a01 	vldr	s15, [r7, #4]
 8101434:	eef1 7a67 	vneg.f32	s15, s15
 8101438:	edc7 7a01 	vstr	s15, [r7, #4]
	float duty = 100*u/7.68;
 810143c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101440:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 81014b0 <CtoD_M1+0x98>
 8101444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101448:	ee17 0a90 	vmov	r0, s15
 810144c:	f7ff f904 	bl	8100658 <__aeabi_f2d>
 8101450:	a315      	add	r3, pc, #84	; (adr r3, 81014a8 <CtoD_M1+0x90>)
 8101452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101456:	f7ff fa81 	bl	810095c <__aeabi_ddiv>
 810145a:	4602      	mov	r2, r0
 810145c:	460b      	mov	r3, r1
 810145e:	4610      	mov	r0, r2
 8101460:	4619      	mov	r1, r3
 8101462:	f7ff fc49 	bl	8100cf8 <__aeabi_d2f>
 8101466:	4603      	mov	r3, r0
 8101468:	60fb      	str	r3, [r7, #12]
	if(duty > 100){
 810146a:	edd7 7a03 	vldr	s15, [r7, #12]
 810146e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 81014b0 <CtoD_M1+0x98>
 8101472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810147a:	dd02      	ble.n	8101482 <CtoD_M1+0x6a>
			duty = 100;
 810147c:	4b0d      	ldr	r3, [pc, #52]	; (81014b4 <CtoD_M1+0x9c>)
 810147e:	60fb      	str	r3, [r7, #12]
 8101480:	e009      	b.n	8101496 <CtoD_M1+0x7e>
	}else if(duty < 0){
 8101482:	edd7 7a03 	vldr	s15, [r7, #12]
 8101486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810148e:	d502      	bpl.n	8101496 <CtoD_M1+0x7e>
		duty = 0;
 8101490:	f04f 0300 	mov.w	r3, #0
 8101494:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 8101496:	68fb      	ldr	r3, [r7, #12]
 8101498:	ee07 3a90 	vmov	s15, r3

}
 810149c:	eeb0 0a67 	vmov.f32	s0, s15
 81014a0:	3710      	adds	r7, #16
 81014a2:	46bd      	mov	sp, r7
 81014a4:	bd80      	pop	{r7, pc}
 81014a6:	bf00      	nop
 81014a8:	eb851eb8 	.word	0xeb851eb8
 81014ac:	401eb851 	.word	0x401eb851
 81014b0:	42c80000 	.word	0x42c80000
 81014b4:	42c80000 	.word	0x42c80000

081014b8 <ReftoDir_M1>:
	}
	return duty;
}


uint8_t ReftoDir_M1(float u){
 81014b8:	b480      	push	{r7}
 81014ba:	b085      	sub	sp, #20
 81014bc:	af00      	add	r7, sp, #0
 81014be:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t dir;
	if(u >= 0){
 81014c2:	edd7 7a01 	vldr	s15, [r7, #4]
 81014c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81014ce:	db02      	blt.n	81014d6 <ReftoDir_M1+0x1e>
		dir=0;//senso orario
 81014d0:	2300      	movs	r3, #0
 81014d2:	73fb      	strb	r3, [r7, #15]
 81014d4:	e001      	b.n	81014da <ReftoDir_M1+0x22>
	}else{
		dir=1;//senso antiorario
 81014d6:	2301      	movs	r3, #1
 81014d8:	73fb      	strb	r3, [r7, #15]
	}
	return dir;
 81014da:	7bfb      	ldrb	r3, [r7, #15]

}
 81014dc:	4618      	mov	r0, r3
 81014de:	3714      	adds	r7, #20
 81014e0:	46bd      	mov	sp, r7
 81014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014e6:	4770      	bx	lr

081014e8 <set_PWM_dir_M1>:

void set_PWM_dir_M1(uint32_t duty,uint8_t dir){
 81014e8:	b580      	push	{r7, lr}
 81014ea:	b082      	sub	sp, #8
 81014ec:	af00      	add	r7, sp, #0
 81014ee:	6078      	str	r0, [r7, #4]
 81014f0:	460b      	mov	r3, r1
 81014f2:	70fb      	strb	r3, [r7, #3]
	TIM1->CCR1 = ((float)duty/100)*TIM1->ARR;
 81014f4:	687b      	ldr	r3, [r7, #4]
 81014f6:	ee07 3a90 	vmov	s15, r3
 81014fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014fe:	eddf 6a12 	vldr	s13, [pc, #72]	; 8101548 <set_PWM_dir_M1+0x60>
 8101502:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101506:	4b11      	ldr	r3, [pc, #68]	; (810154c <set_PWM_dir_M1+0x64>)
 8101508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810150a:	ee07 3a90 	vmov	s15, r3
 810150e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101516:	4b0d      	ldr	r3, [pc, #52]	; (810154c <set_PWM_dir_M1+0x64>)
 8101518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810151c:	ee17 2a90 	vmov	r2, s15
 8101520:	635a      	str	r2, [r3, #52]	; 0x34


	if(dir==0){
 8101522:	78fb      	ldrb	r3, [r7, #3]
 8101524:	2b00      	cmp	r3, #0
 8101526:	d105      	bne.n	8101534 <set_PWM_dir_M1+0x4c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_SET);//cambia senso di rotazione
 8101528:	2201      	movs	r2, #1
 810152a:	2110      	movs	r1, #16
 810152c:	4808      	ldr	r0, [pc, #32]	; (8101550 <set_PWM_dir_M1+0x68>)
 810152e:	f003 f929 	bl	8104784 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
	}
}
 8101532:	e004      	b.n	810153e <set_PWM_dir_M1+0x56>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 8101534:	2200      	movs	r2, #0
 8101536:	2110      	movs	r1, #16
 8101538:	4805      	ldr	r0, [pc, #20]	; (8101550 <set_PWM_dir_M1+0x68>)
 810153a:	f003 f923 	bl	8104784 <HAL_GPIO_WritePin>
}
 810153e:	bf00      	nop
 8101540:	3708      	adds	r7, #8
 8101542:	46bd      	mov	sp, r7
 8101544:	bd80      	pop	{r7, pc}
 8101546:	bf00      	nop
 8101548:	42c80000 	.word	0x42c80000
 810154c:	40010000 	.word	0x40010000
 8101550:	58020000 	.word	0x58020000
 8101554:	00000000 	.word	0x00000000

08101558 <CtoD_M2>:
#include "PWM_Motor2.h"
float CtoD_M2(float u){
 8101558:	b580      	push	{r7, lr}
 810155a:	b084      	sub	sp, #16
 810155c:	af00      	add	r7, sp, #0
 810155e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0)
 8101562:	edd7 7a01 	vldr	s15, [r7, #4]
 8101566:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810156e:	d805      	bhi.n	810157c <CtoD_M2+0x24>
		u = -u;
 8101570:	edd7 7a01 	vldr	s15, [r7, #4]
 8101574:	eef1 7a67 	vneg.f32	s15, s15
 8101578:	edc7 7a01 	vstr	s15, [r7, #4]
	float duty = 100*u/7.68;
 810157c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101580:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 81015f0 <CtoD_M2+0x98>
 8101584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101588:	ee17 0a90 	vmov	r0, s15
 810158c:	f7ff f864 	bl	8100658 <__aeabi_f2d>
 8101590:	a315      	add	r3, pc, #84	; (adr r3, 81015e8 <CtoD_M2+0x90>)
 8101592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101596:	f7ff f9e1 	bl	810095c <__aeabi_ddiv>
 810159a:	4602      	mov	r2, r0
 810159c:	460b      	mov	r3, r1
 810159e:	4610      	mov	r0, r2
 81015a0:	4619      	mov	r1, r3
 81015a2:	f7ff fba9 	bl	8100cf8 <__aeabi_d2f>
 81015a6:	4603      	mov	r3, r0
 81015a8:	60fb      	str	r3, [r7, #12]
	if(duty > 100){
 81015aa:	edd7 7a03 	vldr	s15, [r7, #12]
 81015ae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 81015f0 <CtoD_M2+0x98>
 81015b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 81015b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81015ba:	dd02      	ble.n	81015c2 <CtoD_M2+0x6a>
			duty = 100;
 81015bc:	4b0d      	ldr	r3, [pc, #52]	; (81015f4 <CtoD_M2+0x9c>)
 81015be:	60fb      	str	r3, [r7, #12]
 81015c0:	e009      	b.n	81015d6 <CtoD_M2+0x7e>
	}else if(duty < 0){
 81015c2:	edd7 7a03 	vldr	s15, [r7, #12]
 81015c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81015ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81015ce:	d502      	bpl.n	81015d6 <CtoD_M2+0x7e>
		duty = 0;
 81015d0:	f04f 0300 	mov.w	r3, #0
 81015d4:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 81015d6:	68fb      	ldr	r3, [r7, #12]
 81015d8:	ee07 3a90 	vmov	s15, r3

}
 81015dc:	eeb0 0a67 	vmov.f32	s0, s15
 81015e0:	3710      	adds	r7, #16
 81015e2:	46bd      	mov	sp, r7
 81015e4:	bd80      	pop	{r7, pc}
 81015e6:	bf00      	nop
 81015e8:	eb851eb8 	.word	0xeb851eb8
 81015ec:	401eb851 	.word	0x401eb851
 81015f0:	42c80000 	.word	0x42c80000
 81015f4:	42c80000 	.word	0x42c80000

081015f8 <ReftoDir_M2>:
	}
	return duty;
}


uint8_t ReftoDir_M2(float u){
 81015f8:	b480      	push	{r7}
 81015fa:	b085      	sub	sp, #20
 81015fc:	af00      	add	r7, sp, #0
 81015fe:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t dir;
	if(u<0){
 8101602:	edd7 7a01 	vldr	s15, [r7, #4]
 8101606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810160e:	d502      	bpl.n	8101616 <ReftoDir_M2+0x1e>
		dir=0;//senso orario
 8101610:	2300      	movs	r3, #0
 8101612:	73fb      	strb	r3, [r7, #15]
 8101614:	e001      	b.n	810161a <ReftoDir_M2+0x22>
	}else{
		dir=1;//senso antiorario
 8101616:	2301      	movs	r3, #1
 8101618:	73fb      	strb	r3, [r7, #15]
	}
	return dir;
 810161a:	7bfb      	ldrb	r3, [r7, #15]

}
 810161c:	4618      	mov	r0, r3
 810161e:	3714      	adds	r7, #20
 8101620:	46bd      	mov	sp, r7
 8101622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101626:	4770      	bx	lr

08101628 <set_PWM_dir_M2>:

void set_PWM_dir_M2(uint32_t duty,uint8_t dir){
 8101628:	b580      	push	{r7, lr}
 810162a:	b084      	sub	sp, #16
 810162c:	af00      	add	r7, sp, #0
 810162e:	6078      	str	r0, [r7, #4]
 8101630:	460b      	mov	r3, r1
 8101632:	70fb      	strb	r3, [r7, #3]
	TIM1->CCR2 = ((float)duty/100)*TIM1->ARR;
 8101634:	687b      	ldr	r3, [r7, #4]
 8101636:	ee07 3a90 	vmov	s15, r3
 810163a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810163e:	eddf 6a12 	vldr	s13, [pc, #72]	; 8101688 <set_PWM_dir_M2+0x60>
 8101642:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101646:	4b11      	ldr	r3, [pc, #68]	; (810168c <set_PWM_dir_M2+0x64>)
 8101648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810164a:	ee07 3a90 	vmov	s15, r3
 810164e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101656:	4b0d      	ldr	r3, [pc, #52]	; (810168c <set_PWM_dir_M2+0x64>)
 8101658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810165c:	ee17 2a90 	vmov	r2, s15
 8101660:	639a      	str	r2, [r3, #56]	; 0x38

	uint8_t current_dir = (TIM1->CR2 & 0x0010);
 8101662:	4b0a      	ldr	r3, [pc, #40]	; (810168c <set_PWM_dir_M2+0x64>)
 8101664:	685b      	ldr	r3, [r3, #4]
 8101666:	b2db      	uxtb	r3, r3
 8101668:	f003 0310 	and.w	r3, r3, #16
 810166c:	73fb      	strb	r3, [r7, #15]

	if(dir != current_dir)
 810166e:	78fa      	ldrb	r2, [r7, #3]
 8101670:	7bfb      	ldrb	r3, [r7, #15]
 8101672:	429a      	cmp	r2, r3
 8101674:	d003      	beq.n	810167e <set_PWM_dir_M2+0x56>
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);//cambia senso di rotazione
 8101676:	2110      	movs	r1, #16
 8101678:	4805      	ldr	r0, [pc, #20]	; (8101690 <set_PWM_dir_M2+0x68>)
 810167a:	f003 f89c 	bl	81047b6 <HAL_GPIO_TogglePin>

}
 810167e:	bf00      	nop
 8101680:	3710      	adds	r7, #16
 8101682:	46bd      	mov	sp, r7
 8101684:	bd80      	pop	{r7, pc}
 8101686:	bf00      	nop
 8101688:	42c80000 	.word	0x42c80000
 810168c:	40010000 	.word	0x40010000
 8101690:	58020000 	.word	0x58020000
 8101694:	00000000 	.word	0x00000000

08101698 <CtoD_M3>:
#include "PWM_Motor3.h"
float CtoD_M3(float u){
 8101698:	b580      	push	{r7, lr}
 810169a:	b084      	sub	sp, #16
 810169c:	af00      	add	r7, sp, #0
 810169e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(u <= 0)
 81016a2:	edd7 7a01 	vldr	s15, [r7, #4]
 81016a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81016ae:	d805      	bhi.n	81016bc <CtoD_M3+0x24>
		u = -u;
 81016b0:	edd7 7a01 	vldr	s15, [r7, #4]
 81016b4:	eef1 7a67 	vneg.f32	s15, s15
 81016b8:	edc7 7a01 	vstr	s15, [r7, #4]
	float duty = 100*u/7.68;
 81016bc:	edd7 7a01 	vldr	s15, [r7, #4]
 81016c0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8101730 <CtoD_M3+0x98>
 81016c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 81016c8:	ee17 0a90 	vmov	r0, s15
 81016cc:	f7fe ffc4 	bl	8100658 <__aeabi_f2d>
 81016d0:	a315      	add	r3, pc, #84	; (adr r3, 8101728 <CtoD_M3+0x90>)
 81016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016d6:	f7ff f941 	bl	810095c <__aeabi_ddiv>
 81016da:	4602      	mov	r2, r0
 81016dc:	460b      	mov	r3, r1
 81016de:	4610      	mov	r0, r2
 81016e0:	4619      	mov	r1, r3
 81016e2:	f7ff fb09 	bl	8100cf8 <__aeabi_d2f>
 81016e6:	4603      	mov	r3, r0
 81016e8:	60fb      	str	r3, [r7, #12]
	if(duty > 100){
 81016ea:	edd7 7a03 	vldr	s15, [r7, #12]
 81016ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8101730 <CtoD_M3+0x98>
 81016f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 81016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81016fa:	dd02      	ble.n	8101702 <CtoD_M3+0x6a>
			duty = 100;
 81016fc:	4b0d      	ldr	r3, [pc, #52]	; (8101734 <CtoD_M3+0x9c>)
 81016fe:	60fb      	str	r3, [r7, #12]
 8101700:	e009      	b.n	8101716 <CtoD_M3+0x7e>
	}else if(duty < 0){
 8101702:	edd7 7a03 	vldr	s15, [r7, #12]
 8101706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810170e:	d502      	bpl.n	8101716 <CtoD_M3+0x7e>
		duty = 0;
 8101710:	f04f 0300 	mov.w	r3, #0
 8101714:	60fb      	str	r3, [r7, #12]
	}
	return duty;
 8101716:	68fb      	ldr	r3, [r7, #12]
 8101718:	ee07 3a90 	vmov	s15, r3

}
 810171c:	eeb0 0a67 	vmov.f32	s0, s15
 8101720:	3710      	adds	r7, #16
 8101722:	46bd      	mov	sp, r7
 8101724:	bd80      	pop	{r7, pc}
 8101726:	bf00      	nop
 8101728:	eb851eb8 	.word	0xeb851eb8
 810172c:	401eb851 	.word	0x401eb851
 8101730:	42c80000 	.word	0x42c80000
 8101734:	42c80000 	.word	0x42c80000

08101738 <ReftoDir_M3>:
	}
	return duty;
}


uint8_t ReftoDir_M3(float u){
 8101738:	b480      	push	{r7}
 810173a:	b085      	sub	sp, #20
 810173c:	af00      	add	r7, sp, #0
 810173e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t dir;
	if(u<0){
 8101742:	edd7 7a01 	vldr	s15, [r7, #4]
 8101746:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 810174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810174e:	d502      	bpl.n	8101756 <ReftoDir_M3+0x1e>
		dir=0;//senso orario
 8101750:	2300      	movs	r3, #0
 8101752:	73fb      	strb	r3, [r7, #15]
 8101754:	e001      	b.n	810175a <ReftoDir_M3+0x22>
	}else{
		dir=1;//senso antiorario
 8101756:	2301      	movs	r3, #1
 8101758:	73fb      	strb	r3, [r7, #15]
	}
	return dir;
 810175a:	7bfb      	ldrb	r3, [r7, #15]

}
 810175c:	4618      	mov	r0, r3
 810175e:	3714      	adds	r7, #20
 8101760:	46bd      	mov	sp, r7
 8101762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101766:	4770      	bx	lr

08101768 <set_PWM_dir_M3>:

void set_PWM_dir_M3(uint32_t duty,uint8_t dir){
 8101768:	b580      	push	{r7, lr}
 810176a:	b084      	sub	sp, #16
 810176c:	af00      	add	r7, sp, #0
 810176e:	6078      	str	r0, [r7, #4]
 8101770:	460b      	mov	r3, r1
 8101772:	70fb      	strb	r3, [r7, #3]
	TIM1->CCR3 = ((float)duty/100)*TIM1->ARR;
 8101774:	687b      	ldr	r3, [r7, #4]
 8101776:	ee07 3a90 	vmov	s15, r3
 810177a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810177e:	eddf 6a12 	vldr	s13, [pc, #72]	; 81017c8 <set_PWM_dir_M3+0x60>
 8101782:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101786:	4b11      	ldr	r3, [pc, #68]	; (81017cc <set_PWM_dir_M3+0x64>)
 8101788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810178a:	ee07 3a90 	vmov	s15, r3
 810178e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101796:	4b0d      	ldr	r3, [pc, #52]	; (81017cc <set_PWM_dir_M3+0x64>)
 8101798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810179c:	ee17 2a90 	vmov	r2, s15
 81017a0:	63da      	str	r2, [r3, #60]	; 0x3c


	uint8_t current_dir = (TIM1->CR2 & 0x0010);
 81017a2:	4b0a      	ldr	r3, [pc, #40]	; (81017cc <set_PWM_dir_M3+0x64>)
 81017a4:	685b      	ldr	r3, [r3, #4]
 81017a6:	b2db      	uxtb	r3, r3
 81017a8:	f003 0310 	and.w	r3, r3, #16
 81017ac:	73fb      	strb	r3, [r7, #15]

	if(dir != current_dir)
 81017ae:	78fa      	ldrb	r2, [r7, #3]
 81017b0:	7bfb      	ldrb	r3, [r7, #15]
 81017b2:	429a      	cmp	r2, r3
 81017b4:	d003      	beq.n	81017be <set_PWM_dir_M3+0x56>
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);//cambia senso di rotazione
 81017b6:	2110      	movs	r1, #16
 81017b8:	4805      	ldr	r0, [pc, #20]	; (81017d0 <set_PWM_dir_M3+0x68>)
 81017ba:	f002 fffc 	bl	81047b6 <HAL_GPIO_TogglePin>

}
 81017be:	bf00      	nop
 81017c0:	3710      	adds	r7, #16
 81017c2:	46bd      	mov	sp, r7
 81017c4:	bd80      	pop	{r7, pc}
 81017c6:	bf00      	nop
 81017c8:	42c80000 	.word	0x42c80000
 81017cc:	40010000 	.word	0x40010000
 81017d0:	58020000 	.word	0x58020000

081017d4 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 81017d4:	b580      	push	{r7, lr}
 81017d6:	b082      	sub	sp, #8
 81017d8:	af00      	add	r7, sp, #0
 81017da:	4603      	mov	r3, r0
 81017dc:	71fb      	strb	r3, [r7, #7]
 81017de:	79fb      	ldrb	r3, [r7, #7]
 81017e0:	4619      	mov	r1, r3
 81017e2:	2007      	movs	r0, #7
 81017e4:	f000 fa02 	bl	8101bec <bno055_writeData>
 81017e8:	bf00      	nop
 81017ea:	3708      	adds	r7, #8
 81017ec:	46bd      	mov	sp, r7
 81017ee:	bd80      	pop	{r7, pc}

081017f0 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 81017f0:	b580      	push	{r7, lr}
 81017f2:	b082      	sub	sp, #8
 81017f4:	af00      	add	r7, sp, #0
 81017f6:	4603      	mov	r3, r0
 81017f8:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 81017fa:	79fb      	ldrb	r3, [r7, #7]
 81017fc:	4619      	mov	r1, r3
 81017fe:	203d      	movs	r0, #61	; 0x3d
 8101800:	f000 f9f4 	bl	8101bec <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8101804:	79fb      	ldrb	r3, [r7, #7]
 8101806:	2b00      	cmp	r3, #0
 8101808:	d103      	bne.n	8101812 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 810180a:	2013      	movs	r0, #19
 810180c:	f000 f9e2 	bl	8101bd4 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8101810:	e002      	b.n	8101818 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8101812:	2007      	movs	r0, #7
 8101814:	f000 f9de 	bl	8101bd4 <bno055_delay>
}
 8101818:	bf00      	nop
 810181a:	3708      	adds	r7, #8
 810181c:	46bd      	mov	sp, r7
 810181e:	bd80      	pop	{r7, pc}

08101820 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8101820:	b580      	push	{r7, lr}
 8101822:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8101824:	2000      	movs	r0, #0
 8101826:	f7ff ffe3 	bl	81017f0 <bno055_setOperationMode>
}
 810182a:	bf00      	nop
 810182c:	bd80      	pop	{r7, pc}

0810182e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 810182e:	b580      	push	{r7, lr}
 8101830:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8101832:	200c      	movs	r0, #12
 8101834:	f7ff ffdc 	bl	81017f0 <bno055_setOperationMode>
}
 8101838:	bf00      	nop
 810183a:	bd80      	pop	{r7, pc}

0810183c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 810183c:	b580      	push	{r7, lr}
 810183e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8101840:	2120      	movs	r1, #32
 8101842:	203f      	movs	r0, #63	; 0x3f
 8101844:	f000 f9d2 	bl	8101bec <bno055_writeData>
  bno055_delay(700);
 8101848:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 810184c:	f000 f9c2 	bl	8101bd4 <bno055_delay>
}
 8101850:	bf00      	nop
 8101852:	bd80      	pop	{r7, pc}

08101854 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8101854:	b580      	push	{r7, lr}
 8101856:	b082      	sub	sp, #8
 8101858:	af00      	add	r7, sp, #0
  bno055_reset();
 810185a:	f7ff ffef 	bl	810183c <bno055_reset>

  uint8_t id = 0;
 810185e:	2300      	movs	r3, #0
 8101860:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8101862:	1dfb      	adds	r3, r7, #7
 8101864:	2201      	movs	r2, #1
 8101866:	4619      	mov	r1, r3
 8101868:	2000      	movs	r0, #0
 810186a:	f000 faab 	bl	8101dc4 <bno055_readData>
  if (id != BNO055_ID) {
 810186e:	79fb      	ldrb	r3, [r7, #7]
 8101870:	2ba0      	cmp	r3, #160	; 0xa0
 8101872:	d004      	beq.n	810187e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8101874:	79fb      	ldrb	r3, [r7, #7]
 8101876:	4619      	mov	r1, r3
 8101878:	4809      	ldr	r0, [pc, #36]	; (81018a0 <bno055_setup+0x4c>)
 810187a:	f00a fa85 	bl	810bd88 <iprintf>
  }
  bno055_setPage(0);
 810187e:	2000      	movs	r0, #0
 8101880:	f7ff ffa8 	bl	81017d4 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8101884:	2100      	movs	r1, #0
 8101886:	203f      	movs	r0, #63	; 0x3f
 8101888:	f000 f9b0 	bl	8101bec <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 810188c:	f7ff ffc8 	bl	8101820 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8101890:	200a      	movs	r0, #10
 8101892:	f000 f99f 	bl	8101bd4 <bno055_delay>
}
 8101896:	bf00      	nop
 8101898:	3708      	adds	r7, #8
 810189a:	46bd      	mov	sp, r7
 810189c:	bd80      	pop	{r7, pc}
 810189e:	bf00      	nop
 81018a0:	0810f8b8 	.word	0x0810f8b8

081018a4 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 81018a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81018a8:	b09e      	sub	sp, #120	; 0x78
 81018aa:	af00      	add	r7, sp, #0
 81018ac:	4603      	mov	r3, r0
 81018ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 81018b2:	2000      	movs	r0, #0
 81018b4:	f7ff ff8e 	bl	81017d4 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 81018b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81018bc:	2b20      	cmp	r3, #32
 81018be:	d108      	bne.n	81018d2 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 81018c0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 81018c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81018c8:	2208      	movs	r2, #8
 81018ca:	4618      	mov	r0, r3
 81018cc:	f000 fa7a 	bl	8101dc4 <bno055_readData>
 81018d0:	e007      	b.n	81018e2 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 81018d2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 81018d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81018da:	2206      	movs	r2, #6
 81018dc:	4618      	mov	r0, r3
 81018de:	f000 fa71 	bl	8101dc4 <bno055_readData>

  double scale = 1;
 81018e2:	f04f 0200 	mov.w	r2, #0
 81018e6:	4b8b      	ldr	r3, [pc, #556]	; (8101b14 <bno055_getVector+0x270>)
 81018e8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 81018ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81018f0:	2b0e      	cmp	r3, #14
 81018f2:	d109      	bne.n	8101908 <bno055_getVector+0x64>
    scale = magScale;
 81018f4:	4b88      	ldr	r3, [pc, #544]	; (8101b18 <bno055_getVector+0x274>)
 81018f6:	881b      	ldrh	r3, [r3, #0]
 81018f8:	4618      	mov	r0, r3
 81018fa:	f7fe fe8b 	bl	8100614 <__aeabi_ui2d>
 81018fe:	4602      	mov	r2, r0
 8101900:	460b      	mov	r3, r1
 8101902:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101906:	e03e      	b.n	8101986 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8101908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810190c:	2b08      	cmp	r3, #8
 810190e:	d007      	beq.n	8101920 <bno055_getVector+0x7c>
 8101910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101914:	2b28      	cmp	r3, #40	; 0x28
 8101916:	d003      	beq.n	8101920 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8101918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810191c:	2b2e      	cmp	r3, #46	; 0x2e
 810191e:	d109      	bne.n	8101934 <bno055_getVector+0x90>
    scale = accelScale;
 8101920:	4b7e      	ldr	r3, [pc, #504]	; (8101b1c <bno055_getVector+0x278>)
 8101922:	881b      	ldrh	r3, [r3, #0]
 8101924:	4618      	mov	r0, r3
 8101926:	f7fe fe75 	bl	8100614 <__aeabi_ui2d>
 810192a:	4602      	mov	r2, r0
 810192c:	460b      	mov	r3, r1
 810192e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101932:	e028      	b.n	8101986 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8101934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101938:	2b14      	cmp	r3, #20
 810193a:	d109      	bne.n	8101950 <bno055_getVector+0xac>
    scale = angularRateScale;
 810193c:	4b78      	ldr	r3, [pc, #480]	; (8101b20 <bno055_getVector+0x27c>)
 810193e:	881b      	ldrh	r3, [r3, #0]
 8101940:	4618      	mov	r0, r3
 8101942:	f7fe fe67 	bl	8100614 <__aeabi_ui2d>
 8101946:	4602      	mov	r2, r0
 8101948:	460b      	mov	r3, r1
 810194a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810194e:	e01a      	b.n	8101986 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8101950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101954:	2b1a      	cmp	r3, #26
 8101956:	d109      	bne.n	810196c <bno055_getVector+0xc8>
    scale = eulerScale;
 8101958:	4b72      	ldr	r3, [pc, #456]	; (8101b24 <bno055_getVector+0x280>)
 810195a:	881b      	ldrh	r3, [r3, #0]
 810195c:	4618      	mov	r0, r3
 810195e:	f7fe fe59 	bl	8100614 <__aeabi_ui2d>
 8101962:	4602      	mov	r2, r0
 8101964:	460b      	mov	r3, r1
 8101966:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810196a:	e00c      	b.n	8101986 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 810196c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101970:	2b20      	cmp	r3, #32
 8101972:	d108      	bne.n	8101986 <bno055_getVector+0xe2>
    scale = quaScale;
 8101974:	4b6c      	ldr	r3, [pc, #432]	; (8101b28 <bno055_getVector+0x284>)
 8101976:	881b      	ldrh	r3, [r3, #0]
 8101978:	4618      	mov	r0, r3
 810197a:	f7fe fe4b 	bl	8100614 <__aeabi_ui2d>
 810197e:	4602      	mov	r2, r0
 8101980:	460b      	mov	r3, r1
 8101982:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8101986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810198a:	2220      	movs	r2, #32
 810198c:	2100      	movs	r1, #0
 810198e:	4618      	mov	r0, r3
 8101990:	f009 fa98 	bl	810aec4 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8101994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101998:	2b20      	cmp	r3, #32
 810199a:	d150      	bne.n	8101a3e <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 810199c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 81019a0:	021b      	lsls	r3, r3, #8
 81019a2:	b21a      	sxth	r2, r3
 81019a4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 81019a8:	b21b      	sxth	r3, r3
 81019aa:	4313      	orrs	r3, r2
 81019ac:	b21b      	sxth	r3, r3
 81019ae:	4618      	mov	r0, r3
 81019b0:	f7fe fe40 	bl	8100634 <__aeabi_i2d>
 81019b4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81019b8:	f7fe ffd0 	bl	810095c <__aeabi_ddiv>
 81019bc:	4602      	mov	r2, r0
 81019be:	460b      	mov	r3, r1
 81019c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 81019c4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 81019c8:	021b      	lsls	r3, r3, #8
 81019ca:	b21a      	sxth	r2, r3
 81019cc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 81019d0:	b21b      	sxth	r3, r3
 81019d2:	4313      	orrs	r3, r2
 81019d4:	b21b      	sxth	r3, r3
 81019d6:	4618      	mov	r0, r3
 81019d8:	f7fe fe2c 	bl	8100634 <__aeabi_i2d>
 81019dc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81019e0:	f7fe ffbc 	bl	810095c <__aeabi_ddiv>
 81019e4:	4602      	mov	r2, r0
 81019e6:	460b      	mov	r3, r1
 81019e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81019ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 81019f0:	021b      	lsls	r3, r3, #8
 81019f2:	b21a      	sxth	r2, r3
 81019f4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 81019f8:	b21b      	sxth	r3, r3
 81019fa:	4313      	orrs	r3, r2
 81019fc:	b21b      	sxth	r3, r3
 81019fe:	4618      	mov	r0, r3
 8101a00:	f7fe fe18 	bl	8100634 <__aeabi_i2d>
 8101a04:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101a08:	f7fe ffa8 	bl	810095c <__aeabi_ddiv>
 8101a0c:	4602      	mov	r2, r0
 8101a0e:	460b      	mov	r3, r1
 8101a10:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8101a14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8101a18:	021b      	lsls	r3, r3, #8
 8101a1a:	b21a      	sxth	r2, r3
 8101a1c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8101a20:	b21b      	sxth	r3, r3
 8101a22:	4313      	orrs	r3, r2
 8101a24:	b21b      	sxth	r3, r3
 8101a26:	4618      	mov	r0, r3
 8101a28:	f7fe fe04 	bl	8100634 <__aeabi_i2d>
 8101a2c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101a30:	f7fe ff94 	bl	810095c <__aeabi_ddiv>
 8101a34:	4602      	mov	r2, r0
 8101a36:	460b      	mov	r3, r1
 8101a38:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8101a3c:	e03b      	b.n	8101ab6 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101a3e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8101a42:	021b      	lsls	r3, r3, #8
 8101a44:	b21a      	sxth	r2, r3
 8101a46:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8101a4a:	b21b      	sxth	r3, r3
 8101a4c:	4313      	orrs	r3, r2
 8101a4e:	b21b      	sxth	r3, r3
 8101a50:	4618      	mov	r0, r3
 8101a52:	f7fe fdef 	bl	8100634 <__aeabi_i2d>
 8101a56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101a5a:	f7fe ff7f 	bl	810095c <__aeabi_ddiv>
 8101a5e:	4602      	mov	r2, r0
 8101a60:	460b      	mov	r3, r1
 8101a62:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8101a66:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8101a6a:	021b      	lsls	r3, r3, #8
 8101a6c:	b21a      	sxth	r2, r3
 8101a6e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8101a72:	b21b      	sxth	r3, r3
 8101a74:	4313      	orrs	r3, r2
 8101a76:	b21b      	sxth	r3, r3
 8101a78:	4618      	mov	r0, r3
 8101a7a:	f7fe fddb 	bl	8100634 <__aeabi_i2d>
 8101a7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101a82:	f7fe ff6b 	bl	810095c <__aeabi_ddiv>
 8101a86:	4602      	mov	r2, r0
 8101a88:	460b      	mov	r3, r1
 8101a8a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101a8e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8101a92:	021b      	lsls	r3, r3, #8
 8101a94:	b21a      	sxth	r2, r3
 8101a96:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8101a9a:	b21b      	sxth	r3, r3
 8101a9c:	4313      	orrs	r3, r2
 8101a9e:	b21b      	sxth	r3, r3
 8101aa0:	4618      	mov	r0, r3
 8101aa2:	f7fe fdc7 	bl	8100634 <__aeabi_i2d>
 8101aa6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101aaa:	f7fe ff57 	bl	810095c <__aeabi_ddiv>
 8101aae:	4602      	mov	r2, r0
 8101ab0:	460b      	mov	r3, r1
 8101ab2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8101ab6:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8101aba:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8101abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101ac2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8101ac6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101aca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8101ace:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8101ad2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8101ad6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8101ada:	ec49 8b14 	vmov	d4, r8, r9
 8101ade:	ec45 4b15 	vmov	d5, r4, r5
 8101ae2:	ec41 0b16 	vmov	d6, r0, r1
 8101ae6:	ec43 2b17 	vmov	d7, r2, r3
}
 8101aea:	eeb0 0a44 	vmov.f32	s0, s8
 8101aee:	eef0 0a64 	vmov.f32	s1, s9
 8101af2:	eeb0 1a45 	vmov.f32	s2, s10
 8101af6:	eef0 1a65 	vmov.f32	s3, s11
 8101afa:	eeb0 2a46 	vmov.f32	s4, s12
 8101afe:	eef0 2a66 	vmov.f32	s5, s13
 8101b02:	eeb0 3a47 	vmov.f32	s6, s14
 8101b06:	eef0 3a67 	vmov.f32	s7, s15
 8101b0a:	3778      	adds	r7, #120	; 0x78
 8101b0c:	46bd      	mov	sp, r7
 8101b0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8101b12:	bf00      	nop
 8101b14:	3ff00000 	.word	0x3ff00000
 8101b18:	1000000e 	.word	0x1000000e
 8101b1c:	10000008 	.word	0x10000008
 8101b20:	1000000a 	.word	0x1000000a
 8101b24:	1000000c 	.word	0x1000000c
 8101b28:	10000010 	.word	0x10000010

08101b2c <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8101b2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101b30:	b090      	sub	sp, #64	; 0x40
 8101b32:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8101b34:	201a      	movs	r0, #26
 8101b36:	f7ff feb5 	bl	81018a4 <bno055_getVector>
 8101b3a:	eeb0 4a40 	vmov.f32	s8, s0
 8101b3e:	eef0 4a60 	vmov.f32	s9, s1
 8101b42:	eeb0 5a41 	vmov.f32	s10, s2
 8101b46:	eef0 5a61 	vmov.f32	s11, s3
 8101b4a:	eeb0 6a42 	vmov.f32	s12, s4
 8101b4e:	eef0 6a62 	vmov.f32	s13, s5
 8101b52:	eeb0 7a43 	vmov.f32	s14, s6
 8101b56:	eef0 7a63 	vmov.f32	s15, s7
 8101b5a:	ed87 4b08 	vstr	d4, [r7, #32]
 8101b5e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8101b62:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8101b66:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8101b6a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8101b6e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8101b72:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8101b76:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8101b7a:	ec49 8b14 	vmov	d4, r8, r9
 8101b7e:	ec45 4b15 	vmov	d5, r4, r5
 8101b82:	ec41 0b16 	vmov	d6, r0, r1
 8101b86:	ec43 2b17 	vmov	d7, r2, r3
}
 8101b8a:	eeb0 0a44 	vmov.f32	s0, s8
 8101b8e:	eef0 0a64 	vmov.f32	s1, s9
 8101b92:	eeb0 1a45 	vmov.f32	s2, s10
 8101b96:	eef0 1a65 	vmov.f32	s3, s11
 8101b9a:	eeb0 2a46 	vmov.f32	s4, s12
 8101b9e:	eef0 2a66 	vmov.f32	s5, s13
 8101ba2:	eeb0 3a47 	vmov.f32	s6, s14
 8101ba6:	eef0 3a67 	vmov.f32	s7, s15
 8101baa:	3740      	adds	r7, #64	; 0x40
 8101bac:	46bd      	mov	sp, r7
 8101bae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08101bb4 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8101bb4:	b480      	push	{r7}
 8101bb6:	b083      	sub	sp, #12
 8101bb8:	af00      	add	r7, sp, #0
 8101bba:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101bbc:	4a04      	ldr	r2, [pc, #16]	; (8101bd0 <bno055_assignI2C+0x1c>)
 8101bbe:	687b      	ldr	r3, [r7, #4]
 8101bc0:	6013      	str	r3, [r2, #0]
}
 8101bc2:	bf00      	nop
 8101bc4:	370c      	adds	r7, #12
 8101bc6:	46bd      	mov	sp, r7
 8101bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bcc:	4770      	bx	lr
 8101bce:	bf00      	nop
 8101bd0:	10000220 	.word	0x10000220

08101bd4 <bno055_delay>:

void bno055_delay(int time) {
 8101bd4:	b580      	push	{r7, lr}
 8101bd6:	b082      	sub	sp, #8
 8101bd8:	af00      	add	r7, sp, #0
 8101bda:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8101bdc:	687b      	ldr	r3, [r7, #4]
 8101bde:	4618      	mov	r0, r3
 8101be0:	f001 fa3a 	bl	8103058 <HAL_Delay>
#endif
}
 8101be4:	bf00      	nop
 8101be6:	3708      	adds	r7, #8
 8101be8:	46bd      	mov	sp, r7
 8101bea:	bd80      	pop	{r7, pc}

08101bec <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8101bec:	b580      	push	{r7, lr}
 8101bee:	b088      	sub	sp, #32
 8101bf0:	af02      	add	r7, sp, #8
 8101bf2:	4603      	mov	r3, r0
 8101bf4:	460a      	mov	r2, r1
 8101bf6:	71fb      	strb	r3, [r7, #7]
 8101bf8:	4613      	mov	r3, r2
 8101bfa:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8101bfc:	79fb      	ldrb	r3, [r7, #7]
 8101bfe:	733b      	strb	r3, [r7, #12]
 8101c00:	79bb      	ldrb	r3, [r7, #6]
 8101c02:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8101c04:	4b5a      	ldr	r3, [pc, #360]	; (8101d70 <bno055_writeData+0x184>)
 8101c06:	6818      	ldr	r0, [r3, #0]
 8101c08:	f107 020c 	add.w	r2, r7, #12
 8101c0c:	230a      	movs	r3, #10
 8101c0e:	9300      	str	r3, [sp, #0]
 8101c10:	2302      	movs	r3, #2
 8101c12:	2150      	movs	r1, #80	; 0x50
 8101c14:	f002 fe8c 	bl	8104930 <HAL_I2C_Master_Transmit>
 8101c18:	4603      	mov	r3, r0
 8101c1a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8101c1c:	7dfb      	ldrb	r3, [r7, #23]
 8101c1e:	2b00      	cmp	r3, #0
 8101c20:	f000 80a0 	beq.w	8101d64 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8101c24:	7dfb      	ldrb	r3, [r7, #23]
 8101c26:	2b01      	cmp	r3, #1
 8101c28:	d103      	bne.n	8101c32 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8101c2a:	4852      	ldr	r0, [pc, #328]	; (8101d74 <bno055_writeData+0x188>)
 8101c2c:	f00a f932 	bl	810be94 <puts>
 8101c30:	e012      	b.n	8101c58 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8101c32:	7dfb      	ldrb	r3, [r7, #23]
 8101c34:	2b03      	cmp	r3, #3
 8101c36:	d103      	bne.n	8101c40 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101c38:	484f      	ldr	r0, [pc, #316]	; (8101d78 <bno055_writeData+0x18c>)
 8101c3a:	f00a f92b 	bl	810be94 <puts>
 8101c3e:	e00b      	b.n	8101c58 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8101c40:	7dfb      	ldrb	r3, [r7, #23]
 8101c42:	2b02      	cmp	r3, #2
 8101c44:	d103      	bne.n	8101c4e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101c46:	484d      	ldr	r0, [pc, #308]	; (8101d7c <bno055_writeData+0x190>)
 8101c48:	f00a f924 	bl	810be94 <puts>
 8101c4c:	e004      	b.n	8101c58 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8101c4e:	7dfb      	ldrb	r3, [r7, #23]
 8101c50:	4619      	mov	r1, r3
 8101c52:	484b      	ldr	r0, [pc, #300]	; (8101d80 <bno055_writeData+0x194>)
 8101c54:	f00a f898 	bl	810bd88 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8101c58:	4b45      	ldr	r3, [pc, #276]	; (8101d70 <bno055_writeData+0x184>)
 8101c5a:	681b      	ldr	r3, [r3, #0]
 8101c5c:	4618      	mov	r0, r3
 8101c5e:	f003 f966 	bl	8104f2e <HAL_I2C_GetError>
 8101c62:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8101c64:	693b      	ldr	r3, [r7, #16]
 8101c66:	2b00      	cmp	r3, #0
 8101c68:	d07e      	beq.n	8101d68 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8101c6a:	693b      	ldr	r3, [r7, #16]
 8101c6c:	2b01      	cmp	r3, #1
 8101c6e:	d103      	bne.n	8101c78 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8101c70:	4844      	ldr	r0, [pc, #272]	; (8101d84 <bno055_writeData+0x198>)
 8101c72:	f00a f90f 	bl	810be94 <puts>
 8101c76:	e021      	b.n	8101cbc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8101c78:	693b      	ldr	r3, [r7, #16]
 8101c7a:	2b02      	cmp	r3, #2
 8101c7c:	d103      	bne.n	8101c86 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8101c7e:	4842      	ldr	r0, [pc, #264]	; (8101d88 <bno055_writeData+0x19c>)
 8101c80:	f00a f908 	bl	810be94 <puts>
 8101c84:	e01a      	b.n	8101cbc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8101c86:	693b      	ldr	r3, [r7, #16]
 8101c88:	2b04      	cmp	r3, #4
 8101c8a:	d103      	bne.n	8101c94 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8101c8c:	483f      	ldr	r0, [pc, #252]	; (8101d8c <bno055_writeData+0x1a0>)
 8101c8e:	f00a f901 	bl	810be94 <puts>
 8101c92:	e013      	b.n	8101cbc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8101c94:	693b      	ldr	r3, [r7, #16]
 8101c96:	2b08      	cmp	r3, #8
 8101c98:	d103      	bne.n	8101ca2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8101c9a:	483d      	ldr	r0, [pc, #244]	; (8101d90 <bno055_writeData+0x1a4>)
 8101c9c:	f00a f8fa 	bl	810be94 <puts>
 8101ca0:	e00c      	b.n	8101cbc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8101ca2:	693b      	ldr	r3, [r7, #16]
 8101ca4:	2b10      	cmp	r3, #16
 8101ca6:	d103      	bne.n	8101cb0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8101ca8:	483a      	ldr	r0, [pc, #232]	; (8101d94 <bno055_writeData+0x1a8>)
 8101caa:	f00a f8f3 	bl	810be94 <puts>
 8101cae:	e005      	b.n	8101cbc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8101cb0:	693b      	ldr	r3, [r7, #16]
 8101cb2:	2b20      	cmp	r3, #32
 8101cb4:	d102      	bne.n	8101cbc <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8101cb6:	4838      	ldr	r0, [pc, #224]	; (8101d98 <bno055_writeData+0x1ac>)
 8101cb8:	f00a f8ec 	bl	810be94 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8101cbc:	4b2c      	ldr	r3, [pc, #176]	; (8101d70 <bno055_writeData+0x184>)
 8101cbe:	681b      	ldr	r3, [r3, #0]
 8101cc0:	4618      	mov	r0, r3
 8101cc2:	f003 f926 	bl	8104f12 <HAL_I2C_GetState>
 8101cc6:	4603      	mov	r3, r0
 8101cc8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8101cca:	7bfb      	ldrb	r3, [r7, #15]
 8101ccc:	2b00      	cmp	r3, #0
 8101cce:	d103      	bne.n	8101cd8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101cd0:	4832      	ldr	r0, [pc, #200]	; (8101d9c <bno055_writeData+0x1b0>)
 8101cd2:	f00a f8df 	bl	810be94 <puts>
 8101cd6:	e048      	b.n	8101d6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8101cd8:	7bfb      	ldrb	r3, [r7, #15]
 8101cda:	2b20      	cmp	r3, #32
 8101cdc:	d103      	bne.n	8101ce6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101cde:	482f      	ldr	r0, [pc, #188]	; (8101d9c <bno055_writeData+0x1b0>)
 8101ce0:	f00a f8d8 	bl	810be94 <puts>
 8101ce4:	e041      	b.n	8101d6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8101ce6:	7bfb      	ldrb	r3, [r7, #15]
 8101ce8:	2b24      	cmp	r3, #36	; 0x24
 8101cea:	d103      	bne.n	8101cf4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8101cec:	482c      	ldr	r0, [pc, #176]	; (8101da0 <bno055_writeData+0x1b4>)
 8101cee:	f00a f8d1 	bl	810be94 <puts>
 8101cf2:	e03a      	b.n	8101d6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8101cf4:	7bfb      	ldrb	r3, [r7, #15]
 8101cf6:	2b21      	cmp	r3, #33	; 0x21
 8101cf8:	d103      	bne.n	8101d02 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8101cfa:	482a      	ldr	r0, [pc, #168]	; (8101da4 <bno055_writeData+0x1b8>)
 8101cfc:	f00a f8ca 	bl	810be94 <puts>
 8101d00:	e033      	b.n	8101d6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8101d02:	7bfb      	ldrb	r3, [r7, #15]
 8101d04:	2b22      	cmp	r3, #34	; 0x22
 8101d06:	d103      	bne.n	8101d10 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8101d08:	4827      	ldr	r0, [pc, #156]	; (8101da8 <bno055_writeData+0x1bc>)
 8101d0a:	f00a f8c3 	bl	810be94 <puts>
 8101d0e:	e02c      	b.n	8101d6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8101d10:	7bfb      	ldrb	r3, [r7, #15]
 8101d12:	2b28      	cmp	r3, #40	; 0x28
 8101d14:	d103      	bne.n	8101d1e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8101d16:	4825      	ldr	r0, [pc, #148]	; (8101dac <bno055_writeData+0x1c0>)
 8101d18:	f00a f8bc 	bl	810be94 <puts>
 8101d1c:	e025      	b.n	8101d6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8101d1e:	7bfb      	ldrb	r3, [r7, #15]
 8101d20:	2b29      	cmp	r3, #41	; 0x29
 8101d22:	d103      	bne.n	8101d2c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8101d24:	4822      	ldr	r0, [pc, #136]	; (8101db0 <bno055_writeData+0x1c4>)
 8101d26:	f00a f8b5 	bl	810be94 <puts>
 8101d2a:	e01e      	b.n	8101d6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8101d2c:	7bfb      	ldrb	r3, [r7, #15]
 8101d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8101d30:	d103      	bne.n	8101d3a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8101d32:	4820      	ldr	r0, [pc, #128]	; (8101db4 <bno055_writeData+0x1c8>)
 8101d34:	f00a f8ae 	bl	810be94 <puts>
 8101d38:	e017      	b.n	8101d6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8101d3a:	7bfb      	ldrb	r3, [r7, #15]
 8101d3c:	2b60      	cmp	r3, #96	; 0x60
 8101d3e:	d103      	bne.n	8101d48 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8101d40:	481d      	ldr	r0, [pc, #116]	; (8101db8 <bno055_writeData+0x1cc>)
 8101d42:	f00a f8a7 	bl	810be94 <puts>
 8101d46:	e010      	b.n	8101d6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8101d48:	7bfb      	ldrb	r3, [r7, #15]
 8101d4a:	2ba0      	cmp	r3, #160	; 0xa0
 8101d4c:	d103      	bne.n	8101d56 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8101d4e:	481b      	ldr	r0, [pc, #108]	; (8101dbc <bno055_writeData+0x1d0>)
 8101d50:	f00a f8a0 	bl	810be94 <puts>
 8101d54:	e009      	b.n	8101d6a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8101d56:	7bfb      	ldrb	r3, [r7, #15]
 8101d58:	2be0      	cmp	r3, #224	; 0xe0
 8101d5a:	d106      	bne.n	8101d6a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8101d5c:	4818      	ldr	r0, [pc, #96]	; (8101dc0 <bno055_writeData+0x1d4>)
 8101d5e:	f00a f899 	bl	810be94 <puts>
 8101d62:	e002      	b.n	8101d6a <bno055_writeData+0x17e>
    return;
 8101d64:	bf00      	nop
 8101d66:	e000      	b.n	8101d6a <bno055_writeData+0x17e>
    return;
 8101d68:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8101d6a:	3718      	adds	r7, #24
 8101d6c:	46bd      	mov	sp, r7
 8101d6e:	bd80      	pop	{r7, pc}
 8101d70:	10000220 	.word	0x10000220
 8101d74:	0810f8f4 	.word	0x0810f8f4
 8101d78:	0810f918 	.word	0x0810f918
 8101d7c:	0810f940 	.word	0x0810f940
 8101d80:	0810f964 	.word	0x0810f964
 8101d84:	0810f97c 	.word	0x0810f97c
 8101d88:	0810f990 	.word	0x0810f990
 8101d8c:	0810f9a4 	.word	0x0810f9a4
 8101d90:	0810f9b8 	.word	0x0810f9b8
 8101d94:	0810f9cc 	.word	0x0810f9cc
 8101d98:	0810f9e0 	.word	0x0810f9e0
 8101d9c:	0810f9f8 	.word	0x0810f9f8
 8101da0:	0810fa10 	.word	0x0810fa10
 8101da4:	0810fa24 	.word	0x0810fa24
 8101da8:	0810fa3c 	.word	0x0810fa3c
 8101dac:	0810fa54 	.word	0x0810fa54
 8101db0:	0810fa6c 	.word	0x0810fa6c
 8101db4:	0810fa8c 	.word	0x0810fa8c
 8101db8:	0810faac 	.word	0x0810faac
 8101dbc:	0810fac4 	.word	0x0810fac4
 8101dc0:	0810fadc 	.word	0x0810fadc

08101dc4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8101dc4:	b580      	push	{r7, lr}
 8101dc6:	b086      	sub	sp, #24
 8101dc8:	af02      	add	r7, sp, #8
 8101dca:	4603      	mov	r3, r0
 8101dcc:	6039      	str	r1, [r7, #0]
 8101dce:	71fb      	strb	r3, [r7, #7]
 8101dd0:	4613      	mov	r3, r2
 8101dd2:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8101dd4:	4b0d      	ldr	r3, [pc, #52]	; (8101e0c <bno055_readData+0x48>)
 8101dd6:	6818      	ldr	r0, [r3, #0]
 8101dd8:	1dfa      	adds	r2, r7, #7
 8101dda:	2364      	movs	r3, #100	; 0x64
 8101ddc:	9300      	str	r3, [sp, #0]
 8101dde:	2301      	movs	r3, #1
 8101de0:	2150      	movs	r1, #80	; 0x50
 8101de2:	f002 fda5 	bl	8104930 <HAL_I2C_Master_Transmit>
 8101de6:	4603      	mov	r3, r0
 8101de8:	73fb      	strb	r3, [r7, #15]
                          100);
  ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101dea:	4b08      	ldr	r3, [pc, #32]	; (8101e0c <bno055_readData+0x48>)
 8101dec:	6818      	ldr	r0, [r3, #0]
 8101dee:	79bb      	ldrb	r3, [r7, #6]
 8101df0:	b29b      	uxth	r3, r3
 8101df2:	2264      	movs	r2, #100	; 0x64
 8101df4:	9200      	str	r2, [sp, #0]
 8101df6:	683a      	ldr	r2, [r7, #0]
 8101df8:	2150      	movs	r1, #80	; 0x50
 8101dfa:	f002 fe8d 	bl	8104b18 <HAL_I2C_Master_Receive>
 8101dfe:	4603      	mov	r3, r0
 8101e00:	73fb      	strb	r3, [r7, #15]
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8101e02:	bf00      	nop
 8101e04:	3710      	adds	r7, #16
 8101e06:	46bd      	mov	sp, r7
 8101e08:	bd80      	pop	{r7, pc}
 8101e0a:	bf00      	nop
 8101e0c:	10000220 	.word	0x10000220

08101e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101e10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101e14:	b09e      	sub	sp, #120	; 0x78
 8101e16:	af04      	add	r7, sp, #16

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101e18:	4bb5      	ldr	r3, [pc, #724]	; (81020f0 <main+0x2e0>)
 8101e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e1e:	4ab4      	ldr	r2, [pc, #720]	; (81020f0 <main+0x2e0>)
 8101e20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e28:	4bb1      	ldr	r3, [pc, #708]	; (81020f0 <main+0x2e0>)
 8101e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101e32:	627b      	str	r3, [r7, #36]	; 0x24
 8101e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101e36:	2001      	movs	r0, #1
 8101e38:	f002 fcd8 	bl	81047ec <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101e3c:	f003 fc26 	bl	810568c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101e40:	2201      	movs	r2, #1
 8101e42:	2102      	movs	r1, #2
 8101e44:	2000      	movs	r0, #0
 8101e46:	f003 fba7 	bl	8105598 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101e4a:	4baa      	ldr	r3, [pc, #680]	; (81020f4 <main+0x2e4>)
 8101e4c:	681b      	ldr	r3, [r3, #0]
 8101e4e:	091b      	lsrs	r3, r3, #4
 8101e50:	f003 030f 	and.w	r3, r3, #15
 8101e54:	2b07      	cmp	r3, #7
 8101e56:	d108      	bne.n	8101e6a <main+0x5a>
 8101e58:	4ba7      	ldr	r3, [pc, #668]	; (81020f8 <main+0x2e8>)
 8101e5a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101e5e:	4aa6      	ldr	r2, [pc, #664]	; (81020f8 <main+0x2e8>)
 8101e60:	f043 0301 	orr.w	r3, r3, #1
 8101e64:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101e68:	e007      	b.n	8101e7a <main+0x6a>
 8101e6a:	4ba3      	ldr	r3, [pc, #652]	; (81020f8 <main+0x2e8>)
 8101e6c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101e70:	4aa1      	ldr	r2, [pc, #644]	; (81020f8 <main+0x2e8>)
 8101e72:	f043 0301 	orr.w	r3, r3, #1
 8101e76:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101e7a:	f001 f839 	bl	8102ef0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101e7e:	f000 fbc5 	bl	810260c <MX_GPIO_Init>
  MX_I2C1_Init();
 8101e82:	f000 f9cf 	bl	8102224 <MX_I2C1_Init>
  MX_TIM1_Init();
 8101e86:	f000 fa0d 	bl	81022a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8101e8a:	f000 facf 	bl	810242c <MX_TIM2_Init>
  MX_ADC1_Init();
 8101e8e:	f000 f94d 	bl	810212c <MX_ADC1_Init>
  MX_TIM4_Init();
 8101e92:	f000 fb19 	bl	81024c8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  MX_USART3_UART_Init();
 8101e96:	f000 fb6d 	bl	8102574 <MX_USART3_UART_Init>

  HAL_TIM_Base_Start_IT(&htim2);
 8101e9a:	4898      	ldr	r0, [pc, #608]	; (81020fc <main+0x2ec>)
 8101e9c:	f006 fb32 	bl	8108504 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8101ea0:	2100      	movs	r1, #0
 8101ea2:	4897      	ldr	r0, [pc, #604]	; (8102100 <main+0x2f0>)
 8101ea4:	f006 fc08 	bl	81086b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8101ea8:	2104      	movs	r1, #4
 8101eaa:	4895      	ldr	r0, [pc, #596]	; (8102100 <main+0x2f0>)
 8101eac:	f006 fc04 	bl	81086b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8101eb0:	2108      	movs	r1, #8
 8101eb2:	4893      	ldr	r0, [pc, #588]	; (8102100 <main+0x2f0>)
 8101eb4:	f006 fc00 	bl	81086b8 <HAL_TIM_PWM_Start>

  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, BNO055_I2C_ADDR << 1,5,1000);
 8101eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101ebc:	2205      	movs	r2, #5
 8101ebe:	2150      	movs	r1, #80	; 0x50
 8101ec0:	4890      	ldr	r0, [pc, #576]	; (8102104 <main+0x2f4>)
 8101ec2:	f002 ff1f 	bl	8104d04 <HAL_I2C_IsDeviceReady>
 8101ec6:	4603      	mov	r3, r0
 8101ec8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  bno055_assignI2C(&hi2c1);
 8101ecc:	488d      	ldr	r0, [pc, #564]	; (8102104 <main+0x2f4>)
 8101ece:	f7ff fe71 	bl	8101bb4 <bno055_assignI2C>
  bno055_setup();
 8101ed2:	f7ff fcbf 	bl	8101854 <bno055_setup>
  bno055_setOperationModeNDOF();
 8101ed6:	f7ff fcaa 	bl	810182e <bno055_setOperationModeNDOF>

  //init_tune_PID(&pid, dt, 0.05, 1, 0);

  init_tune_PID_Pitch(&pid_pitch, dt, 1,0.02, 0.0);
 8101eda:	4b8b      	ldr	r3, [pc, #556]	; (8102108 <main+0x2f8>)
 8101edc:	edd3 7a00 	vldr	s15, [r3]
 8101ee0:	eddf 1a8a 	vldr	s3, [pc, #552]	; 810210c <main+0x2fc>
 8101ee4:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 8102110 <main+0x300>
 8101ee8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8101eec:	eeb0 0a67 	vmov.f32	s0, s15
 8101ef0:	4888      	ldr	r0, [pc, #544]	; (8102114 <main+0x304>)
 8101ef2:	f7ff f921 	bl	8101138 <init_tune_PID_Pitch>
  init_tune_PID_Roll(&pid_roll, dt, 1,0.02 , 0.0);
 8101ef6:	4b84      	ldr	r3, [pc, #528]	; (8102108 <main+0x2f8>)
 8101ef8:	edd3 7a00 	vldr	s15, [r3]
 8101efc:	eddf 1a83 	vldr	s3, [pc, #524]	; 810210c <main+0x2fc>
 8101f00:	ed9f 1a83 	vldr	s2, [pc, #524]	; 8102110 <main+0x300>
 8101f04:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8101f08:	eeb0 0a67 	vmov.f32	s0, s15
 8101f0c:	4882      	ldr	r0, [pc, #520]	; (8102118 <main+0x308>)
 8101f0e:	f7ff f9b7 	bl	8101280 <init_tune_PID_Roll>
  init_tune_PID_Yaw(&pid_yaw, dt, 1, 0.02, 0.0);
 8101f12:	4b7d      	ldr	r3, [pc, #500]	; (8102108 <main+0x2f8>)
 8101f14:	edd3 7a00 	vldr	s15, [r3]
 8101f18:	eddf 1a7c 	vldr	s3, [pc, #496]	; 810210c <main+0x2fc>
 8101f1c:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8102110 <main+0x300>
 8101f20:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8101f24:	eeb0 0a67 	vmov.f32	s0, s15
 8101f28:	487c      	ldr	r0, [pc, #496]	; (810211c <main+0x30c>)
 8101f2a:	f7ff fa4d 	bl	81013c8 <init_tune_PID_Yaw>
  float u_roll,u_pitch,u_yaw;
  float duty_roll,duty_pitch,duty_yaw;
  float u_c1,u_c2,u_c3;
  double c1,c2,c3;
  float c1_ref,c2_ref,c3_ref;
  float k = 0.64;
 8101f2e:	4b7c      	ldr	r3, [pc, #496]	; (8102120 <main+0x310>)
 8101f30:	663b      	str	r3, [r7, #96]	; 0x60
  uint8_t dir1,dir2,dir3;
  float roll,pitch,yaw;
  float *Tout;
  int volt = 12;
 8101f32:	230c      	movs	r3, #12
 8101f34:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(flag_Tc==1){
 8101f36:	4b7b      	ldr	r3, [pc, #492]	; (8102124 <main+0x314>)
 8101f38:	edd3 7a00 	vldr	s15, [r3]
 8101f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101f40:	eef4 7a47 	vcmp.f32	s15, s14
 8101f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101f48:	d1f5      	bne.n	8101f36 <main+0x126>
	  		  flag_Tc = 0;
 8101f4a:	4b76      	ldr	r3, [pc, #472]	; (8102124 <main+0x314>)
 8101f4c:	f04f 0200 	mov.w	r2, #0
 8101f50:	601a      	str	r2, [r3, #0]
	  	 	  bno055_vector_t v = bno055_getVectorEuler();
 8101f52:	f7ff fdeb 	bl	8101b2c <bno055_getVectorEuler>
 8101f56:	eeb0 4a40 	vmov.f32	s8, s0
 8101f5a:	eef0 4a60 	vmov.f32	s9, s1
 8101f5e:	eeb0 5a41 	vmov.f32	s10, s2
 8101f62:	eef0 5a61 	vmov.f32	s11, s3
 8101f66:	eeb0 6a42 	vmov.f32	s12, s4
 8101f6a:	eef0 6a62 	vmov.f32	s13, s5
 8101f6e:	eeb0 7a43 	vmov.f32	s14, s6
 8101f72:	eef0 7a63 	vmov.f32	s15, s7
 8101f76:	ed87 4b00 	vstr	d4, [r7]
 8101f7a:	ed87 5b02 	vstr	d5, [r7, #8]
 8101f7e:	ed87 6b04 	vstr	d6, [r7, #16]
 8101f82:	ed87 7b06 	vstr	d7, [r7, #24]

	  	 	  pitch = (float)v.y; // v.y --> x
 8101f86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8101f8a:	4610      	mov	r0, r2
 8101f8c:	4619      	mov	r1, r3
 8101f8e:	f7fe feb3 	bl	8100cf8 <__aeabi_d2f>
 8101f92:	4603      	mov	r3, r0
 8101f94:	65bb      	str	r3, [r7, #88]	; 0x58
	  	 	  roll = (float)v.z; // v.z --> y
 8101f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101f9a:	4610      	mov	r0, r2
 8101f9c:	4619      	mov	r1, r3
 8101f9e:	f7fe feab 	bl	8100cf8 <__aeabi_d2f>
 8101fa2:	4603      	mov	r3, r0
 8101fa4:	657b      	str	r3, [r7, #84]	; 0x54
	  	 	  yaw = (float)v.x; // v.x --> z
 8101fa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101faa:	4610      	mov	r0, r2
 8101fac:	4619      	mov	r1, r3
 8101fae:	f7fe fea3 	bl	8100cf8 <__aeabi_d2f>
 8101fb2:	4603      	mov	r3, r0
 8101fb4:	653b      	str	r3, [r7, #80]	; 0x50
	  	 	  //printf("%f %f %f\r\n",roll,pitch,yaw);
	  	 		  //printf("Angoli: %f %f %f\r\n",roll,pitch,yaw);
	  	 	  u_roll = PID_controller_Roll(&pid_roll, roll, 0.0);
 8101fb6:	eddf 0a55 	vldr	s1, [pc, #340]	; 810210c <main+0x2fc>
 8101fba:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8101fbe:	4856      	ldr	r0, [pc, #344]	; (8102118 <main+0x308>)
 8101fc0:	f7ff f986 	bl	81012d0 <PID_controller_Roll>
 8101fc4:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
	  	 	  u_pitch = PID_controller_Pitch(&pid_pitch, pitch, 0.0);
 8101fc8:	eddf 0a50 	vldr	s1, [pc, #320]	; 810210c <main+0x2fc>
 8101fcc:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8101fd0:	4850      	ldr	r0, [pc, #320]	; (8102114 <main+0x304>)
 8101fd2:	f7ff f8d9 	bl	8101188 <PID_controller_Pitch>
 8101fd6:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	  	 		  //u_yaw = PID_controller_Yaw(&pid_yaw, yaw, 0.0);
	  	 	  u_yaw = 0;
 8101fda:	f04f 0300 	mov.w	r3, #0
 8101fde:	647b      	str	r3, [r7, #68]	; 0x44
	  	 		  /*c1 = getCurrentValue(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
	  	 		  c2 = getCurrentValue(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
	  	 		  c3 = getCurrentValue(HAL_ADC_Start, HAL_ADC_PollForConversion, HAL_ADC_GetValue, &hadc1);
	  	 			*/

	  	 	  Tout = matriceT(u_roll, u_pitch, u_yaw);
 8101fe0:	ed97 1a11 	vldr	s2, [r7, #68]	; 0x44
 8101fe4:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 8101fe8:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8101fec:	f000 fb84 	bl	81026f8 <matriceT>
 8101ff0:	6438      	str	r0, [r7, #64]	; 0x40
	  	 	  printf("%f %f %f\r\n",Tout[0],Tout[1],Tout[2]);
 8101ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101ff4:	681b      	ldr	r3, [r3, #0]
 8101ff6:	4618      	mov	r0, r3
 8101ff8:	f7fe fb2e 	bl	8100658 <__aeabi_f2d>
 8101ffc:	4680      	mov	r8, r0
 8101ffe:	4689      	mov	r9, r1
 8102000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102002:	3304      	adds	r3, #4
 8102004:	681b      	ldr	r3, [r3, #0]
 8102006:	4618      	mov	r0, r3
 8102008:	f7fe fb26 	bl	8100658 <__aeabi_f2d>
 810200c:	4604      	mov	r4, r0
 810200e:	460d      	mov	r5, r1
 8102010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102012:	3308      	adds	r3, #8
 8102014:	681b      	ldr	r3, [r3, #0]
 8102016:	4618      	mov	r0, r3
 8102018:	f7fe fb1e 	bl	8100658 <__aeabi_f2d>
 810201c:	4602      	mov	r2, r0
 810201e:	460b      	mov	r3, r1
 8102020:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8102024:	e9cd 4500 	strd	r4, r5, [sp]
 8102028:	4642      	mov	r2, r8
 810202a:	464b      	mov	r3, r9
 810202c:	483e      	ldr	r0, [pc, #248]	; (8102128 <main+0x318>)
 810202e:	f009 feab 	bl	810bd88 <iprintf>
	  	 	  duty1= CtoD_M1(Tout[0]);
 8102032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102034:	edd3 7a00 	vldr	s15, [r3]
 8102038:	eeb0 0a67 	vmov.f32	s0, s15
 810203c:	f7ff f9ec 	bl	8101418 <CtoD_M1>
 8102040:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	  	 	  dir1 = ReftoDir_M1(Tout[0]);
 8102044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102046:	edd3 7a00 	vldr	s15, [r3]
 810204a:	eeb0 0a67 	vmov.f32	s0, s15
 810204e:	f7ff fa33 	bl	81014b8 <ReftoDir_M1>
 8102052:	4603      	mov	r3, r0
 8102054:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	  	 	  duty2 = CtoD_M2(Tout[1]);
 8102058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810205a:	3304      	adds	r3, #4
 810205c:	edd3 7a00 	vldr	s15, [r3]
 8102060:	eeb0 0a67 	vmov.f32	s0, s15
 8102064:	f7ff fa78 	bl	8101558 <CtoD_M2>
 8102068:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	  	 	  dir2 = ReftoDir_M2(Tout[1]);
 810206c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810206e:	3304      	adds	r3, #4
 8102070:	edd3 7a00 	vldr	s15, [r3]
 8102074:	eeb0 0a67 	vmov.f32	s0, s15
 8102078:	f7ff fabe 	bl	81015f8 <ReftoDir_M2>
 810207c:	4603      	mov	r3, r0
 810207e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	  	 	  duty3 = CtoD_M3(Tout[2]);
 8102082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102084:	3308      	adds	r3, #8
 8102086:	edd3 7a00 	vldr	s15, [r3]
 810208a:	eeb0 0a67 	vmov.f32	s0, s15
 810208e:	f7ff fb03 	bl	8101698 <CtoD_M3>
 8102092:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	  	 	  dir3 = ReftoDir_M3(Tout[2]);
 8102096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102098:	3308      	adds	r3, #8
 810209a:	edd3 7a00 	vldr	s15, [r3]
 810209e:	eeb0 0a67 	vmov.f32	s0, s15
 81020a2:	f7ff fb49 	bl	8101738 <ReftoDir_M3>
 81020a6:	4603      	mov	r3, r0
 81020a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  	 	  set_PWM_dir_M1(duty1, dir1);
 81020ac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 81020b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81020b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 81020b8:	4619      	mov	r1, r3
 81020ba:	ee17 0a90 	vmov	r0, s15
 81020be:	f7ff fa13 	bl	81014e8 <set_PWM_dir_M1>
	  	 	  set_PWM_dir_M2(duty2, dir2);
 81020c2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 81020c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81020ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81020ce:	4619      	mov	r1, r3
 81020d0:	ee17 0a90 	vmov	r0, s15
 81020d4:	f7ff faa8 	bl	8101628 <set_PWM_dir_M2>
	  	 	  set_PWM_dir_M3(duty3, dir3);
 81020d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 81020dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81020e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81020e4:	4619      	mov	r1, r3
 81020e6:	ee17 0a90 	vmov	r0, s15
 81020ea:	f7ff fb3d 	bl	8101768 <set_PWM_dir_M3>
	  if(flag_Tc==1){
 81020ee:	e722      	b.n	8101f36 <main+0x126>
 81020f0:	58024400 	.word	0x58024400
 81020f4:	e000ed00 	.word	0xe000ed00
 81020f8:	58026400 	.word	0x58026400
 81020fc:	10000328 	.word	0x10000328
 8102100:	100002dc 	.word	0x100002dc
 8102104:	10000288 	.word	0x10000288
 8102108:	10000014 	.word	0x10000014
 810210c:	00000000 	.word	0x00000000
 8102110:	3ca3d70a 	.word	0x3ca3d70a
 8102114:	1000046c 	.word	0x1000046c
 8102118:	10000454 	.word	0x10000454
 810211c:	10000484 	.word	0x10000484
 8102120:	3f23d70a 	.word	0x3f23d70a
 8102124:	1000049c 	.word	0x1000049c
 8102128:	0810faf4 	.word	0x0810faf4

0810212c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 810212c:	b580      	push	{r7, lr}
 810212e:	b08a      	sub	sp, #40	; 0x28
 8102130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8102132:	f107 031c 	add.w	r3, r7, #28
 8102136:	2200      	movs	r2, #0
 8102138:	601a      	str	r2, [r3, #0]
 810213a:	605a      	str	r2, [r3, #4]
 810213c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 810213e:	463b      	mov	r3, r7
 8102140:	2200      	movs	r2, #0
 8102142:	601a      	str	r2, [r3, #0]
 8102144:	605a      	str	r2, [r3, #4]
 8102146:	609a      	str	r2, [r3, #8]
 8102148:	60da      	str	r2, [r3, #12]
 810214a:	611a      	str	r2, [r3, #16]
 810214c:	615a      	str	r2, [r3, #20]
 810214e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8102150:	4b31      	ldr	r3, [pc, #196]	; (8102218 <MX_ADC1_Init+0xec>)
 8102152:	4a32      	ldr	r2, [pc, #200]	; (810221c <MX_ADC1_Init+0xf0>)
 8102154:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8102156:	4b30      	ldr	r3, [pc, #192]	; (8102218 <MX_ADC1_Init+0xec>)
 8102158:	2200      	movs	r2, #0
 810215a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 810215c:	4b2e      	ldr	r3, [pc, #184]	; (8102218 <MX_ADC1_Init+0xec>)
 810215e:	2200      	movs	r2, #0
 8102160:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8102162:	4b2d      	ldr	r3, [pc, #180]	; (8102218 <MX_ADC1_Init+0xec>)
 8102164:	2200      	movs	r2, #0
 8102166:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8102168:	4b2b      	ldr	r3, [pc, #172]	; (8102218 <MX_ADC1_Init+0xec>)
 810216a:	2204      	movs	r2, #4
 810216c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 810216e:	4b2a      	ldr	r3, [pc, #168]	; (8102218 <MX_ADC1_Init+0xec>)
 8102170:	2200      	movs	r2, #0
 8102172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8102174:	4b28      	ldr	r3, [pc, #160]	; (8102218 <MX_ADC1_Init+0xec>)
 8102176:	2200      	movs	r2, #0
 8102178:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 810217a:	4b27      	ldr	r3, [pc, #156]	; (8102218 <MX_ADC1_Init+0xec>)
 810217c:	2201      	movs	r2, #1
 810217e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8102180:	4b25      	ldr	r3, [pc, #148]	; (8102218 <MX_ADC1_Init+0xec>)
 8102182:	2201      	movs	r2, #1
 8102184:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 1;
 8102186:	4b24      	ldr	r3, [pc, #144]	; (8102218 <MX_ADC1_Init+0xec>)
 8102188:	2201      	movs	r2, #1
 810218a:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 810218c:	4b22      	ldr	r3, [pc, #136]	; (8102218 <MX_ADC1_Init+0xec>)
 810218e:	2200      	movs	r2, #0
 8102190:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8102192:	4b21      	ldr	r3, [pc, #132]	; (8102218 <MX_ADC1_Init+0xec>)
 8102194:	2200      	movs	r2, #0
 8102196:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8102198:	4b1f      	ldr	r3, [pc, #124]	; (8102218 <MX_ADC1_Init+0xec>)
 810219a:	2200      	movs	r2, #0
 810219c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 810219e:	4b1e      	ldr	r3, [pc, #120]	; (8102218 <MX_ADC1_Init+0xec>)
 81021a0:	2200      	movs	r2, #0
 81021a2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81021a4:	4b1c      	ldr	r3, [pc, #112]	; (8102218 <MX_ADC1_Init+0xec>)
 81021a6:	2200      	movs	r2, #0
 81021a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81021aa:	4b1b      	ldr	r3, [pc, #108]	; (8102218 <MX_ADC1_Init+0xec>)
 81021ac:	2200      	movs	r2, #0
 81021ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81021b2:	4819      	ldr	r0, [pc, #100]	; (8102218 <MX_ADC1_Init+0xec>)
 81021b4:	f001 f90c 	bl	81033d0 <HAL_ADC_Init>
 81021b8:	4603      	mov	r3, r0
 81021ba:	2b00      	cmp	r3, #0
 81021bc:	d001      	beq.n	81021c2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 81021be:	f000 fa95 	bl	81026ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81021c2:	2300      	movs	r3, #0
 81021c4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81021c6:	f107 031c 	add.w	r3, r7, #28
 81021ca:	4619      	mov	r1, r3
 81021cc:	4812      	ldr	r0, [pc, #72]	; (8102218 <MX_ADC1_Init+0xec>)
 81021ce:	f001 ff23 	bl	8104018 <HAL_ADCEx_MultiModeConfigChannel>
 81021d2:	4603      	mov	r3, r0
 81021d4:	2b00      	cmp	r3, #0
 81021d6:	d001      	beq.n	81021dc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 81021d8:	f000 fa88 	bl	81026ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 81021dc:	4b10      	ldr	r3, [pc, #64]	; (8102220 <MX_ADC1_Init+0xf4>)
 81021de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81021e0:	2306      	movs	r3, #6
 81021e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81021e4:	2300      	movs	r3, #0
 81021e6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81021e8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81021ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81021ee:	2304      	movs	r3, #4
 81021f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81021f2:	2300      	movs	r3, #0
 81021f4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81021f6:	2300      	movs	r3, #0
 81021f8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81021fa:	463b      	mov	r3, r7
 81021fc:	4619      	mov	r1, r3
 81021fe:	4806      	ldr	r0, [pc, #24]	; (8102218 <MX_ADC1_Init+0xec>)
 8102200:	f001 fa88 	bl	8103714 <HAL_ADC_ConfigChannel>
 8102204:	4603      	mov	r3, r0
 8102206:	2b00      	cmp	r3, #0
 8102208:	d001      	beq.n	810220e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 810220a:	f000 fa6f 	bl	81026ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 810220e:	bf00      	nop
 8102210:	3728      	adds	r7, #40	; 0x28
 8102212:	46bd      	mov	sp, r7
 8102214:	bd80      	pop	{r7, pc}
 8102216:	bf00      	nop
 8102218:	10000224 	.word	0x10000224
 810221c:	40022000 	.word	0x40022000
 8102220:	3ef08000 	.word	0x3ef08000

08102224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8102224:	b580      	push	{r7, lr}
 8102226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8102228:	4b1b      	ldr	r3, [pc, #108]	; (8102298 <MX_I2C1_Init+0x74>)
 810222a:	4a1c      	ldr	r2, [pc, #112]	; (810229c <MX_I2C1_Init+0x78>)
 810222c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909FCE;
 810222e:	4b1a      	ldr	r3, [pc, #104]	; (8102298 <MX_I2C1_Init+0x74>)
 8102230:	4a1b      	ldr	r2, [pc, #108]	; (81022a0 <MX_I2C1_Init+0x7c>)
 8102232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8102234:	4b18      	ldr	r3, [pc, #96]	; (8102298 <MX_I2C1_Init+0x74>)
 8102236:	2200      	movs	r2, #0
 8102238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810223a:	4b17      	ldr	r3, [pc, #92]	; (8102298 <MX_I2C1_Init+0x74>)
 810223c:	2201      	movs	r2, #1
 810223e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8102240:	4b15      	ldr	r3, [pc, #84]	; (8102298 <MX_I2C1_Init+0x74>)
 8102242:	2200      	movs	r2, #0
 8102244:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8102246:	4b14      	ldr	r3, [pc, #80]	; (8102298 <MX_I2C1_Init+0x74>)
 8102248:	2200      	movs	r2, #0
 810224a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810224c:	4b12      	ldr	r3, [pc, #72]	; (8102298 <MX_I2C1_Init+0x74>)
 810224e:	2200      	movs	r2, #0
 8102250:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8102252:	4b11      	ldr	r3, [pc, #68]	; (8102298 <MX_I2C1_Init+0x74>)
 8102254:	2200      	movs	r2, #0
 8102256:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8102258:	4b0f      	ldr	r3, [pc, #60]	; (8102298 <MX_I2C1_Init+0x74>)
 810225a:	2200      	movs	r2, #0
 810225c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810225e:	480e      	ldr	r0, [pc, #56]	; (8102298 <MX_I2C1_Init+0x74>)
 8102260:	f002 fad6 	bl	8104810 <HAL_I2C_Init>
 8102264:	4603      	mov	r3, r0
 8102266:	2b00      	cmp	r3, #0
 8102268:	d001      	beq.n	810226e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810226a:	f000 fa3f 	bl	81026ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810226e:	2100      	movs	r1, #0
 8102270:	4809      	ldr	r0, [pc, #36]	; (8102298 <MX_I2C1_Init+0x74>)
 8102272:	f003 f8f9 	bl	8105468 <HAL_I2CEx_ConfigAnalogFilter>
 8102276:	4603      	mov	r3, r0
 8102278:	2b00      	cmp	r3, #0
 810227a:	d001      	beq.n	8102280 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 810227c:	f000 fa36 	bl	81026ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8102280:	2100      	movs	r1, #0
 8102282:	4805      	ldr	r0, [pc, #20]	; (8102298 <MX_I2C1_Init+0x74>)
 8102284:	f003 f93b 	bl	81054fe <HAL_I2CEx_ConfigDigitalFilter>
 8102288:	4603      	mov	r3, r0
 810228a:	2b00      	cmp	r3, #0
 810228c:	d001      	beq.n	8102292 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810228e:	f000 fa2d 	bl	81026ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8102292:	bf00      	nop
 8102294:	bd80      	pop	{r7, pc}
 8102296:	bf00      	nop
 8102298:	10000288 	.word	0x10000288
 810229c:	40005400 	.word	0x40005400
 81022a0:	00909fce 	.word	0x00909fce

081022a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81022a4:	b580      	push	{r7, lr}
 81022a6:	b09a      	sub	sp, #104	; 0x68
 81022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81022aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 81022ae:	2200      	movs	r2, #0
 81022b0:	601a      	str	r2, [r3, #0]
 81022b2:	605a      	str	r2, [r3, #4]
 81022b4:	609a      	str	r2, [r3, #8]
 81022b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81022b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81022bc:	2200      	movs	r2, #0
 81022be:	601a      	str	r2, [r3, #0]
 81022c0:	605a      	str	r2, [r3, #4]
 81022c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81022c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81022c8:	2200      	movs	r2, #0
 81022ca:	601a      	str	r2, [r3, #0]
 81022cc:	605a      	str	r2, [r3, #4]
 81022ce:	609a      	str	r2, [r3, #8]
 81022d0:	60da      	str	r2, [r3, #12]
 81022d2:	611a      	str	r2, [r3, #16]
 81022d4:	615a      	str	r2, [r3, #20]
 81022d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81022d8:	1d3b      	adds	r3, r7, #4
 81022da:	222c      	movs	r2, #44	; 0x2c
 81022dc:	2100      	movs	r1, #0
 81022de:	4618      	mov	r0, r3
 81022e0:	f008 fdf0 	bl	810aec4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81022e4:	4b4f      	ldr	r3, [pc, #316]	; (8102424 <MX_TIM1_Init+0x180>)
 81022e6:	4a50      	ldr	r2, [pc, #320]	; (8102428 <MX_TIM1_Init+0x184>)
 81022e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 81022ea:	4b4e      	ldr	r3, [pc, #312]	; (8102424 <MX_TIM1_Init+0x180>)
 81022ec:	22ef      	movs	r2, #239	; 0xef
 81022ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81022f0:	4b4c      	ldr	r3, [pc, #304]	; (8102424 <MX_TIM1_Init+0x180>)
 81022f2:	2200      	movs	r2, #0
 81022f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 81022f6:	4b4b      	ldr	r3, [pc, #300]	; (8102424 <MX_TIM1_Init+0x180>)
 81022f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 81022fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81022fe:	4b49      	ldr	r3, [pc, #292]	; (8102424 <MX_TIM1_Init+0x180>)
 8102300:	2200      	movs	r2, #0
 8102302:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8102304:	4b47      	ldr	r3, [pc, #284]	; (8102424 <MX_TIM1_Init+0x180>)
 8102306:	2200      	movs	r2, #0
 8102308:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810230a:	4b46      	ldr	r3, [pc, #280]	; (8102424 <MX_TIM1_Init+0x180>)
 810230c:	2200      	movs	r2, #0
 810230e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8102310:	4844      	ldr	r0, [pc, #272]	; (8102424 <MX_TIM1_Init+0x180>)
 8102312:	f006 f89f 	bl	8108454 <HAL_TIM_Base_Init>
 8102316:	4603      	mov	r3, r0
 8102318:	2b00      	cmp	r3, #0
 810231a:	d001      	beq.n	8102320 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 810231c:	f000 f9e6 	bl	81026ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102324:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8102326:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810232a:	4619      	mov	r1, r3
 810232c:	483d      	ldr	r0, [pc, #244]	; (8102424 <MX_TIM1_Init+0x180>)
 810232e:	f006 fdab 	bl	8108e88 <HAL_TIM_ConfigClockSource>
 8102332:	4603      	mov	r3, r0
 8102334:	2b00      	cmp	r3, #0
 8102336:	d001      	beq.n	810233c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8102338:	f000 f9d8 	bl	81026ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 810233c:	4839      	ldr	r0, [pc, #228]	; (8102424 <MX_TIM1_Init+0x180>)
 810233e:	f006 f959 	bl	81085f4 <HAL_TIM_PWM_Init>
 8102342:	4603      	mov	r3, r0
 8102344:	2b00      	cmp	r3, #0
 8102346:	d001      	beq.n	810234c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8102348:	f000 f9d0 	bl	81026ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810234c:	2300      	movs	r3, #0
 810234e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8102350:	2300      	movs	r3, #0
 8102352:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102354:	2300      	movs	r3, #0
 8102356:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8102358:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 810235c:	4619      	mov	r1, r3
 810235e:	4831      	ldr	r0, [pc, #196]	; (8102424 <MX_TIM1_Init+0x180>)
 8102360:	f007 fae4 	bl	810992c <HAL_TIMEx_MasterConfigSynchronization>
 8102364:	4603      	mov	r3, r0
 8102366:	2b00      	cmp	r3, #0
 8102368:	d001      	beq.n	810236e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 810236a:	f000 f9bf 	bl	81026ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810236e:	2360      	movs	r3, #96	; 0x60
 8102370:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8102372:	2300      	movs	r3, #0
 8102374:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102376:	2300      	movs	r3, #0
 8102378:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 810237a:	2300      	movs	r3, #0
 810237c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810237e:	2300      	movs	r3, #0
 8102380:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8102382:	2300      	movs	r3, #0
 8102384:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8102386:	2300      	movs	r3, #0
 8102388:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810238a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810238e:	2200      	movs	r2, #0
 8102390:	4619      	mov	r1, r3
 8102392:	4824      	ldr	r0, [pc, #144]	; (8102424 <MX_TIM1_Init+0x180>)
 8102394:	f006 fc64 	bl	8108c60 <HAL_TIM_PWM_ConfigChannel>
 8102398:	4603      	mov	r3, r0
 810239a:	2b00      	cmp	r3, #0
 810239c:	d001      	beq.n	81023a2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 810239e:	f000 f9a5 	bl	81026ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 81023a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81023a6:	2204      	movs	r2, #4
 81023a8:	4619      	mov	r1, r3
 81023aa:	481e      	ldr	r0, [pc, #120]	; (8102424 <MX_TIM1_Init+0x180>)
 81023ac:	f006 fc58 	bl	8108c60 <HAL_TIM_PWM_ConfigChannel>
 81023b0:	4603      	mov	r3, r0
 81023b2:	2b00      	cmp	r3, #0
 81023b4:	d001      	beq.n	81023ba <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 81023b6:	f000 f999 	bl	81026ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 81023ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81023be:	2208      	movs	r2, #8
 81023c0:	4619      	mov	r1, r3
 81023c2:	4818      	ldr	r0, [pc, #96]	; (8102424 <MX_TIM1_Init+0x180>)
 81023c4:	f006 fc4c 	bl	8108c60 <HAL_TIM_PWM_ConfigChannel>
 81023c8:	4603      	mov	r3, r0
 81023ca:	2b00      	cmp	r3, #0
 81023cc:	d001      	beq.n	81023d2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 81023ce:	f000 f98d 	bl	81026ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81023d2:	2300      	movs	r3, #0
 81023d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81023d6:	2300      	movs	r3, #0
 81023d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81023da:	2300      	movs	r3, #0
 81023dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81023de:	2300      	movs	r3, #0
 81023e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81023e2:	2300      	movs	r3, #0
 81023e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81023e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81023ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81023ec:	2300      	movs	r3, #0
 81023ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81023f0:	2300      	movs	r3, #0
 81023f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81023f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81023f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81023fa:	2300      	movs	r3, #0
 81023fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81023fe:	2300      	movs	r3, #0
 8102400:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8102402:	1d3b      	adds	r3, r7, #4
 8102404:	4619      	mov	r1, r3
 8102406:	4807      	ldr	r0, [pc, #28]	; (8102424 <MX_TIM1_Init+0x180>)
 8102408:	f007 fb1e 	bl	8109a48 <HAL_TIMEx_ConfigBreakDeadTime>
 810240c:	4603      	mov	r3, r0
 810240e:	2b00      	cmp	r3, #0
 8102410:	d001      	beq.n	8102416 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8102412:	f000 f96b 	bl	81026ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8102416:	4803      	ldr	r0, [pc, #12]	; (8102424 <MX_TIM1_Init+0x180>)
 8102418:	f000 fba0 	bl	8102b5c <HAL_TIM_MspPostInit>

}
 810241c:	bf00      	nop
 810241e:	3768      	adds	r7, #104	; 0x68
 8102420:	46bd      	mov	sp, r7
 8102422:	bd80      	pop	{r7, pc}
 8102424:	100002dc 	.word	0x100002dc
 8102428:	40010000 	.word	0x40010000

0810242c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 810242c:	b580      	push	{r7, lr}
 810242e:	b088      	sub	sp, #32
 8102430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102432:	f107 0310 	add.w	r3, r7, #16
 8102436:	2200      	movs	r2, #0
 8102438:	601a      	str	r2, [r3, #0]
 810243a:	605a      	str	r2, [r3, #4]
 810243c:	609a      	str	r2, [r3, #8]
 810243e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102440:	1d3b      	adds	r3, r7, #4
 8102442:	2200      	movs	r2, #0
 8102444:	601a      	str	r2, [r3, #0]
 8102446:	605a      	str	r2, [r3, #4]
 8102448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 810244a:	4b1e      	ldr	r3, [pc, #120]	; (81024c4 <MX_TIM2_Init+0x98>)
 810244c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8102450:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8102452:	4b1c      	ldr	r3, [pc, #112]	; (81024c4 <MX_TIM2_Init+0x98>)
 8102454:	22ef      	movs	r2, #239	; 0xef
 8102456:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102458:	4b1a      	ldr	r3, [pc, #104]	; (81024c4 <MX_TIM2_Init+0x98>)
 810245a:	2200      	movs	r2, #0
 810245c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 810245e:	4b19      	ldr	r3, [pc, #100]	; (81024c4 <MX_TIM2_Init+0x98>)
 8102460:	f242 720f 	movw	r2, #9999	; 0x270f
 8102464:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102466:	4b17      	ldr	r3, [pc, #92]	; (81024c4 <MX_TIM2_Init+0x98>)
 8102468:	2200      	movs	r2, #0
 810246a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810246c:	4b15      	ldr	r3, [pc, #84]	; (81024c4 <MX_TIM2_Init+0x98>)
 810246e:	2200      	movs	r2, #0
 8102470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8102472:	4814      	ldr	r0, [pc, #80]	; (81024c4 <MX_TIM2_Init+0x98>)
 8102474:	f005 ffee 	bl	8108454 <HAL_TIM_Base_Init>
 8102478:	4603      	mov	r3, r0
 810247a:	2b00      	cmp	r3, #0
 810247c:	d001      	beq.n	8102482 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 810247e:	f000 f935 	bl	81026ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102486:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8102488:	f107 0310 	add.w	r3, r7, #16
 810248c:	4619      	mov	r1, r3
 810248e:	480d      	ldr	r0, [pc, #52]	; (81024c4 <MX_TIM2_Init+0x98>)
 8102490:	f006 fcfa 	bl	8108e88 <HAL_TIM_ConfigClockSource>
 8102494:	4603      	mov	r3, r0
 8102496:	2b00      	cmp	r3, #0
 8102498:	d001      	beq.n	810249e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 810249a:	f000 f927 	bl	81026ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810249e:	2300      	movs	r3, #0
 81024a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81024a2:	2300      	movs	r3, #0
 81024a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 81024a6:	1d3b      	adds	r3, r7, #4
 81024a8:	4619      	mov	r1, r3
 81024aa:	4806      	ldr	r0, [pc, #24]	; (81024c4 <MX_TIM2_Init+0x98>)
 81024ac:	f007 fa3e 	bl	810992c <HAL_TIMEx_MasterConfigSynchronization>
 81024b0:	4603      	mov	r3, r0
 81024b2:	2b00      	cmp	r3, #0
 81024b4:	d001      	beq.n	81024ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 81024b6:	f000 f919 	bl	81026ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 81024ba:	bf00      	nop
 81024bc:	3720      	adds	r7, #32
 81024be:	46bd      	mov	sp, r7
 81024c0:	bd80      	pop	{r7, pc}
 81024c2:	bf00      	nop
 81024c4:	10000328 	.word	0x10000328

081024c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 81024c8:	b580      	push	{r7, lr}
 81024ca:	b08c      	sub	sp, #48	; 0x30
 81024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 81024ce:	f107 030c 	add.w	r3, r7, #12
 81024d2:	2224      	movs	r2, #36	; 0x24
 81024d4:	2100      	movs	r1, #0
 81024d6:	4618      	mov	r0, r3
 81024d8:	f008 fcf4 	bl	810aec4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81024dc:	463b      	mov	r3, r7
 81024de:	2200      	movs	r2, #0
 81024e0:	601a      	str	r2, [r3, #0]
 81024e2:	605a      	str	r2, [r3, #4]
 81024e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 81024e6:	4b21      	ldr	r3, [pc, #132]	; (810256c <MX_TIM4_Init+0xa4>)
 81024e8:	4a21      	ldr	r2, [pc, #132]	; (8102570 <MX_TIM4_Init+0xa8>)
 81024ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 81024ec:	4b1f      	ldr	r3, [pc, #124]	; (810256c <MX_TIM4_Init+0xa4>)
 81024ee:	2200      	movs	r2, #0
 81024f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 81024f2:	4b1e      	ldr	r3, [pc, #120]	; (810256c <MX_TIM4_Init+0xa4>)
 81024f4:	2200      	movs	r2, #0
 81024f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 81024f8:	4b1c      	ldr	r3, [pc, #112]	; (810256c <MX_TIM4_Init+0xa4>)
 81024fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81024fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102500:	4b1a      	ldr	r3, [pc, #104]	; (810256c <MX_TIM4_Init+0xa4>)
 8102502:	2200      	movs	r2, #0
 8102504:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102506:	4b19      	ldr	r3, [pc, #100]	; (810256c <MX_TIM4_Init+0xa4>)
 8102508:	2200      	movs	r2, #0
 810250a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 810250c:	2301      	movs	r3, #1
 810250e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8102510:	2300      	movs	r3, #0
 8102512:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8102514:	2301      	movs	r3, #1
 8102516:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8102518:	2300      	movs	r3, #0
 810251a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 810251c:	2300      	movs	r3, #0
 810251e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8102520:	2300      	movs	r3, #0
 8102522:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8102524:	2301      	movs	r3, #1
 8102526:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8102528:	2300      	movs	r3, #0
 810252a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 810252c:	2300      	movs	r3, #0
 810252e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8102530:	f107 030c 	add.w	r3, r7, #12
 8102534:	4619      	mov	r1, r3
 8102536:	480d      	ldr	r0, [pc, #52]	; (810256c <MX_TIM4_Init+0xa4>)
 8102538:	f006 f9cc 	bl	81088d4 <HAL_TIM_Encoder_Init>
 810253c:	4603      	mov	r3, r0
 810253e:	2b00      	cmp	r3, #0
 8102540:	d001      	beq.n	8102546 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8102542:	f000 f8d3 	bl	81026ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102546:	2300      	movs	r3, #0
 8102548:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810254a:	2300      	movs	r3, #0
 810254c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 810254e:	463b      	mov	r3, r7
 8102550:	4619      	mov	r1, r3
 8102552:	4806      	ldr	r0, [pc, #24]	; (810256c <MX_TIM4_Init+0xa4>)
 8102554:	f007 f9ea 	bl	810992c <HAL_TIMEx_MasterConfigSynchronization>
 8102558:	4603      	mov	r3, r0
 810255a:	2b00      	cmp	r3, #0
 810255c:	d001      	beq.n	8102562 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 810255e:	f000 f8c5 	bl	81026ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8102562:	bf00      	nop
 8102564:	3730      	adds	r7, #48	; 0x30
 8102566:	46bd      	mov	sp, r7
 8102568:	bd80      	pop	{r7, pc}
 810256a:	bf00      	nop
 810256c:	10000374 	.word	0x10000374
 8102570:	40000800 	.word	0x40000800

08102574 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8102574:	b580      	push	{r7, lr}
 8102576:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102578:	4b22      	ldr	r3, [pc, #136]	; (8102604 <MX_USART3_UART_Init+0x90>)
 810257a:	4a23      	ldr	r2, [pc, #140]	; (8102608 <MX_USART3_UART_Init+0x94>)
 810257c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810257e:	4b21      	ldr	r3, [pc, #132]	; (8102604 <MX_USART3_UART_Init+0x90>)
 8102580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8102584:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102586:	4b1f      	ldr	r3, [pc, #124]	; (8102604 <MX_USART3_UART_Init+0x90>)
 8102588:	2200      	movs	r2, #0
 810258a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810258c:	4b1d      	ldr	r3, [pc, #116]	; (8102604 <MX_USART3_UART_Init+0x90>)
 810258e:	2200      	movs	r2, #0
 8102590:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102592:	4b1c      	ldr	r3, [pc, #112]	; (8102604 <MX_USART3_UART_Init+0x90>)
 8102594:	2200      	movs	r2, #0
 8102596:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102598:	4b1a      	ldr	r3, [pc, #104]	; (8102604 <MX_USART3_UART_Init+0x90>)
 810259a:	220c      	movs	r2, #12
 810259c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810259e:	4b19      	ldr	r3, [pc, #100]	; (8102604 <MX_USART3_UART_Init+0x90>)
 81025a0:	2200      	movs	r2, #0
 81025a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81025a4:	4b17      	ldr	r3, [pc, #92]	; (8102604 <MX_USART3_UART_Init+0x90>)
 81025a6:	2200      	movs	r2, #0
 81025a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81025aa:	4b16      	ldr	r3, [pc, #88]	; (8102604 <MX_USART3_UART_Init+0x90>)
 81025ac:	2200      	movs	r2, #0
 81025ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81025b0:	4b14      	ldr	r3, [pc, #80]	; (8102604 <MX_USART3_UART_Init+0x90>)
 81025b2:	2200      	movs	r2, #0
 81025b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81025b6:	4b13      	ldr	r3, [pc, #76]	; (8102604 <MX_USART3_UART_Init+0x90>)
 81025b8:	2200      	movs	r2, #0
 81025ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81025bc:	4811      	ldr	r0, [pc, #68]	; (8102604 <MX_USART3_UART_Init+0x90>)
 81025be:	f007 fadf 	bl	8109b80 <HAL_UART_Init>
 81025c2:	4603      	mov	r3, r0
 81025c4:	2b00      	cmp	r3, #0
 81025c6:	d001      	beq.n	81025cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81025c8:	f000 f890 	bl	81026ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81025cc:	2100      	movs	r1, #0
 81025ce:	480d      	ldr	r0, [pc, #52]	; (8102604 <MX_USART3_UART_Init+0x90>)
 81025d0:	f008 fb6e 	bl	810acb0 <HAL_UARTEx_SetTxFifoThreshold>
 81025d4:	4603      	mov	r3, r0
 81025d6:	2b00      	cmp	r3, #0
 81025d8:	d001      	beq.n	81025de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81025da:	f000 f887 	bl	81026ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81025de:	2100      	movs	r1, #0
 81025e0:	4808      	ldr	r0, [pc, #32]	; (8102604 <MX_USART3_UART_Init+0x90>)
 81025e2:	f008 fba3 	bl	810ad2c <HAL_UARTEx_SetRxFifoThreshold>
 81025e6:	4603      	mov	r3, r0
 81025e8:	2b00      	cmp	r3, #0
 81025ea:	d001      	beq.n	81025f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81025ec:	f000 f87e 	bl	81026ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81025f0:	4804      	ldr	r0, [pc, #16]	; (8102604 <MX_USART3_UART_Init+0x90>)
 81025f2:	f008 fb24 	bl	810ac3e <HAL_UARTEx_DisableFifoMode>
 81025f6:	4603      	mov	r3, r0
 81025f8:	2b00      	cmp	r3, #0
 81025fa:	d001      	beq.n	8102600 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81025fc:	f000 f876 	bl	81026ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102600:	bf00      	nop
 8102602:	bd80      	pop	{r7, pc}
 8102604:	100003c0 	.word	0x100003c0
 8102608:	40004800 	.word	0x40004800

0810260c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810260c:	b480      	push	{r7}
 810260e:	b085      	sub	sp, #20
 8102610:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8102612:	4b21      	ldr	r3, [pc, #132]	; (8102698 <MX_GPIO_Init+0x8c>)
 8102614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102618:	4a1f      	ldr	r2, [pc, #124]	; (8102698 <MX_GPIO_Init+0x8c>)
 810261a:	f043 0301 	orr.w	r3, r3, #1
 810261e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102622:	4b1d      	ldr	r3, [pc, #116]	; (8102698 <MX_GPIO_Init+0x8c>)
 8102624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102628:	f003 0301 	and.w	r3, r3, #1
 810262c:	60fb      	str	r3, [r7, #12]
 810262e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8102630:	4b19      	ldr	r3, [pc, #100]	; (8102698 <MX_GPIO_Init+0x8c>)
 8102632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102636:	4a18      	ldr	r2, [pc, #96]	; (8102698 <MX_GPIO_Init+0x8c>)
 8102638:	f043 0310 	orr.w	r3, r3, #16
 810263c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102640:	4b15      	ldr	r3, [pc, #84]	; (8102698 <MX_GPIO_Init+0x8c>)
 8102642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102646:	f003 0310 	and.w	r3, r3, #16
 810264a:	60bb      	str	r3, [r7, #8]
 810264c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810264e:	4b12      	ldr	r3, [pc, #72]	; (8102698 <MX_GPIO_Init+0x8c>)
 8102650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102654:	4a10      	ldr	r2, [pc, #64]	; (8102698 <MX_GPIO_Init+0x8c>)
 8102656:	f043 0308 	orr.w	r3, r3, #8
 810265a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810265e:	4b0e      	ldr	r3, [pc, #56]	; (8102698 <MX_GPIO_Init+0x8c>)
 8102660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102664:	f003 0308 	and.w	r3, r3, #8
 8102668:	607b      	str	r3, [r7, #4]
 810266a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810266c:	4b0a      	ldr	r3, [pc, #40]	; (8102698 <MX_GPIO_Init+0x8c>)
 810266e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102672:	4a09      	ldr	r2, [pc, #36]	; (8102698 <MX_GPIO_Init+0x8c>)
 8102674:	f043 0302 	orr.w	r3, r3, #2
 8102678:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810267c:	4b06      	ldr	r3, [pc, #24]	; (8102698 <MX_GPIO_Init+0x8c>)
 810267e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102682:	f003 0302 	and.w	r3, r3, #2
 8102686:	603b      	str	r3, [r7, #0]
 8102688:	683b      	ldr	r3, [r7, #0]

}
 810268a:	bf00      	nop
 810268c:	3714      	adds	r7, #20
 810268e:	46bd      	mov	sp, r7
 8102690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102694:	4770      	bx	lr
 8102696:	bf00      	nop
 8102698:	58024400 	.word	0x58024400

0810269c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 810269c:	b580      	push	{r7, lr}
 810269e:	b082      	sub	sp, #8
 81026a0:	af00      	add	r7, sp, #0
 81026a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 81026a4:	1d39      	adds	r1, r7, #4
 81026a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81026aa:	2201      	movs	r2, #1
 81026ac:	4803      	ldr	r0, [pc, #12]	; (81026bc <__io_putchar+0x20>)
 81026ae:	f007 fab7 	bl	8109c20 <HAL_UART_Transmit>
	return ch;
 81026b2:	687b      	ldr	r3, [r7, #4]
}
 81026b4:	4618      	mov	r0, r3
 81026b6:	3708      	adds	r7, #8
 81026b8:	46bd      	mov	sp, r7
 81026ba:	bd80      	pop	{r7, pc}
 81026bc:	100003c0 	.word	0x100003c0

081026c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 81026c0:	b480      	push	{r7}
 81026c2:	b083      	sub	sp, #12
 81026c4:	af00      	add	r7, sp, #0
 81026c6:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 81026c8:	687b      	ldr	r3, [r7, #4]
 81026ca:	4a06      	ldr	r2, [pc, #24]	; (81026e4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 81026cc:	4293      	cmp	r3, r2
 81026ce:	d103      	bne.n	81026d8 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_Tc = 1;
 81026d0:	4b05      	ldr	r3, [pc, #20]	; (81026e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 81026d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 81026d6:	601a      	str	r2, [r3, #0]
	}
}
 81026d8:	bf00      	nop
 81026da:	370c      	adds	r7, #12
 81026dc:	46bd      	mov	sp, r7
 81026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026e2:	4770      	bx	lr
 81026e4:	10000328 	.word	0x10000328
 81026e8:	1000049c 	.word	0x1000049c

081026ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81026ec:	b480      	push	{r7}
 81026ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81026f0:	b672      	cpsid	i
}
 81026f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81026f4:	e7fe      	b.n	81026f4 <Error_Handler+0x8>
	...

081026f8 <matriceT>:
#include "matrice.h"
#include "math.h"
float* matriceT(float u_roll,float u_pitch,float u_yaw){
 81026f8:	b5b0      	push	{r4, r5, r7, lr}
 81026fa:	b086      	sub	sp, #24
 81026fc:	af00      	add	r7, sp, #0
 81026fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8102702:	edc7 0a02 	vstr	s1, [r7, #8]
 8102706:	ed87 1a01 	vstr	s2, [r7, #4]
	float *Tout = malloc(sizeof(int)*3);
 810270a:	200c      	movs	r0, #12
 810270c:	f008 fbc4 	bl	810ae98 <malloc>
 8102710:	4603      	mov	r3, r0
 8102712:	617b      	str	r3, [r7, #20]

	Tout[0] = 0.4304*u_yaw - 0.3133*u_roll;
 8102714:	6878      	ldr	r0, [r7, #4]
 8102716:	f7fd ff9f 	bl	8100658 <__aeabi_f2d>
 810271a:	a349      	add	r3, pc, #292	; (adr r3, 8102840 <matriceT+0x148>)
 810271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102720:	f7fd fff2 	bl	8100708 <__aeabi_dmul>
 8102724:	4602      	mov	r2, r0
 8102726:	460b      	mov	r3, r1
 8102728:	4614      	mov	r4, r2
 810272a:	461d      	mov	r5, r3
 810272c:	68f8      	ldr	r0, [r7, #12]
 810272e:	f7fd ff93 	bl	8100658 <__aeabi_f2d>
 8102732:	a345      	add	r3, pc, #276	; (adr r3, 8102848 <matriceT+0x150>)
 8102734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102738:	f7fd ffe6 	bl	8100708 <__aeabi_dmul>
 810273c:	4602      	mov	r2, r0
 810273e:	460b      	mov	r3, r1
 8102740:	4620      	mov	r0, r4
 8102742:	4629      	mov	r1, r5
 8102744:	f7fd fe28 	bl	8100398 <__aeabi_dsub>
 8102748:	4602      	mov	r2, r0
 810274a:	460b      	mov	r3, r1
 810274c:	4610      	mov	r0, r2
 810274e:	4619      	mov	r1, r3
 8102750:	f7fe fad2 	bl	8100cf8 <__aeabi_d2f>
 8102754:	4602      	mov	r2, r0
 8102756:	697b      	ldr	r3, [r7, #20]
 8102758:	601a      	str	r2, [r3, #0]
	Tout[1] = 0.1567*u_roll - 0.2714*u_pitch + 0.4304*u_yaw;
 810275a:	68f8      	ldr	r0, [r7, #12]
 810275c:	f7fd ff7c 	bl	8100658 <__aeabi_f2d>
 8102760:	a33b      	add	r3, pc, #236	; (adr r3, 8102850 <matriceT+0x158>)
 8102762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102766:	f7fd ffcf 	bl	8100708 <__aeabi_dmul>
 810276a:	4602      	mov	r2, r0
 810276c:	460b      	mov	r3, r1
 810276e:	4614      	mov	r4, r2
 8102770:	461d      	mov	r5, r3
 8102772:	68b8      	ldr	r0, [r7, #8]
 8102774:	f7fd ff70 	bl	8100658 <__aeabi_f2d>
 8102778:	a337      	add	r3, pc, #220	; (adr r3, 8102858 <matriceT+0x160>)
 810277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810277e:	f7fd ffc3 	bl	8100708 <__aeabi_dmul>
 8102782:	4602      	mov	r2, r0
 8102784:	460b      	mov	r3, r1
 8102786:	4620      	mov	r0, r4
 8102788:	4629      	mov	r1, r5
 810278a:	f7fd fe05 	bl	8100398 <__aeabi_dsub>
 810278e:	4602      	mov	r2, r0
 8102790:	460b      	mov	r3, r1
 8102792:	4614      	mov	r4, r2
 8102794:	461d      	mov	r5, r3
 8102796:	6878      	ldr	r0, [r7, #4]
 8102798:	f7fd ff5e 	bl	8100658 <__aeabi_f2d>
 810279c:	a328      	add	r3, pc, #160	; (adr r3, 8102840 <matriceT+0x148>)
 810279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027a2:	f7fd ffb1 	bl	8100708 <__aeabi_dmul>
 81027a6:	4602      	mov	r2, r0
 81027a8:	460b      	mov	r3, r1
 81027aa:	4620      	mov	r0, r4
 81027ac:	4629      	mov	r1, r5
 81027ae:	f7fd fdf5 	bl	810039c <__adddf3>
 81027b2:	4602      	mov	r2, r0
 81027b4:	460b      	mov	r3, r1
 81027b6:	4610      	mov	r0, r2
 81027b8:	4619      	mov	r1, r3
 81027ba:	697b      	ldr	r3, [r7, #20]
 81027bc:	1d1c      	adds	r4, r3, #4
 81027be:	f7fe fa9b 	bl	8100cf8 <__aeabi_d2f>
 81027c2:	4603      	mov	r3, r0
 81027c4:	6023      	str	r3, [r4, #0]
	Tout[2] = 0.2714*u_pitch + 0.1567*u_roll + 0.4304*u_yaw;
 81027c6:	68b8      	ldr	r0, [r7, #8]
 81027c8:	f7fd ff46 	bl	8100658 <__aeabi_f2d>
 81027cc:	a322      	add	r3, pc, #136	; (adr r3, 8102858 <matriceT+0x160>)
 81027ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027d2:	f7fd ff99 	bl	8100708 <__aeabi_dmul>
 81027d6:	4602      	mov	r2, r0
 81027d8:	460b      	mov	r3, r1
 81027da:	4614      	mov	r4, r2
 81027dc:	461d      	mov	r5, r3
 81027de:	68f8      	ldr	r0, [r7, #12]
 81027e0:	f7fd ff3a 	bl	8100658 <__aeabi_f2d>
 81027e4:	a31a      	add	r3, pc, #104	; (adr r3, 8102850 <matriceT+0x158>)
 81027e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027ea:	f7fd ff8d 	bl	8100708 <__aeabi_dmul>
 81027ee:	4602      	mov	r2, r0
 81027f0:	460b      	mov	r3, r1
 81027f2:	4620      	mov	r0, r4
 81027f4:	4629      	mov	r1, r5
 81027f6:	f7fd fdd1 	bl	810039c <__adddf3>
 81027fa:	4602      	mov	r2, r0
 81027fc:	460b      	mov	r3, r1
 81027fe:	4614      	mov	r4, r2
 8102800:	461d      	mov	r5, r3
 8102802:	6878      	ldr	r0, [r7, #4]
 8102804:	f7fd ff28 	bl	8100658 <__aeabi_f2d>
 8102808:	a30d      	add	r3, pc, #52	; (adr r3, 8102840 <matriceT+0x148>)
 810280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810280e:	f7fd ff7b 	bl	8100708 <__aeabi_dmul>
 8102812:	4602      	mov	r2, r0
 8102814:	460b      	mov	r3, r1
 8102816:	4620      	mov	r0, r4
 8102818:	4629      	mov	r1, r5
 810281a:	f7fd fdbf 	bl	810039c <__adddf3>
 810281e:	4602      	mov	r2, r0
 8102820:	460b      	mov	r3, r1
 8102822:	4610      	mov	r0, r2
 8102824:	4619      	mov	r1, r3
 8102826:	697b      	ldr	r3, [r7, #20]
 8102828:	f103 0408 	add.w	r4, r3, #8
 810282c:	f7fe fa64 	bl	8100cf8 <__aeabi_d2f>
 8102830:	4603      	mov	r3, r0
 8102832:	6023      	str	r3, [r4, #0]

	return Tout;
 8102834:	697b      	ldr	r3, [r7, #20]

}
 8102836:	4618      	mov	r0, r3
 8102838:	3718      	adds	r7, #24
 810283a:	46bd      	mov	sp, r7
 810283c:	bdb0      	pop	{r4, r5, r7, pc}
 810283e:	bf00      	nop
 8102840:	710cb296 	.word	0x710cb296
 8102844:	3fdb8bac 	.word	0x3fdb8bac
 8102848:	71758e22 	.word	0x71758e22
 810284c:	3fd40d1b 	.word	0x3fd40d1b
 8102850:	dfa43fe6 	.word	0xdfa43fe6
 8102854:	3fc40ebe 	.word	0x3fc40ebe
 8102858:	1b089a02 	.word	0x1b089a02
 810285c:	3fd15e9e 	.word	0x3fd15e9e

08102860 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102860:	b480      	push	{r7}
 8102862:	b083      	sub	sp, #12
 8102864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102866:	4b0a      	ldr	r3, [pc, #40]	; (8102890 <HAL_MspInit+0x30>)
 8102868:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810286c:	4a08      	ldr	r2, [pc, #32]	; (8102890 <HAL_MspInit+0x30>)
 810286e:	f043 0302 	orr.w	r3, r3, #2
 8102872:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102876:	4b06      	ldr	r3, [pc, #24]	; (8102890 <HAL_MspInit+0x30>)
 8102878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810287c:	f003 0302 	and.w	r3, r3, #2
 8102880:	607b      	str	r3, [r7, #4]
 8102882:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102884:	bf00      	nop
 8102886:	370c      	adds	r7, #12
 8102888:	46bd      	mov	sp, r7
 810288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810288e:	4770      	bx	lr
 8102890:	58024400 	.word	0x58024400

08102894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8102894:	b580      	push	{r7, lr}
 8102896:	b0ba      	sub	sp, #232	; 0xe8
 8102898:	af00      	add	r7, sp, #0
 810289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810289c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81028a0:	2200      	movs	r2, #0
 81028a2:	601a      	str	r2, [r3, #0]
 81028a4:	605a      	str	r2, [r3, #4]
 81028a6:	609a      	str	r2, [r3, #8]
 81028a8:	60da      	str	r2, [r3, #12]
 81028aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81028ac:	f107 0310 	add.w	r3, r7, #16
 81028b0:	22c0      	movs	r2, #192	; 0xc0
 81028b2:	2100      	movs	r1, #0
 81028b4:	4618      	mov	r0, r3
 81028b6:	f008 fb05 	bl	810aec4 <memset>
  if(hadc->Instance==ADC1)
 81028ba:	687b      	ldr	r3, [r7, #4]
 81028bc:	681b      	ldr	r3, [r3, #0]
 81028be:	4a2c      	ldr	r2, [pc, #176]	; (8102970 <HAL_ADC_MspInit+0xdc>)
 81028c0:	4293      	cmp	r3, r2
 81028c2:	d150      	bne.n	8102966 <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 81028c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 81028c8:	f04f 0300 	mov.w	r3, #0
 81028cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 81028d0:	2301      	movs	r3, #1
 81028d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 81028d4:	2312      	movs	r3, #18
 81028d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 81028d8:	2304      	movs	r3, #4
 81028da:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 81028dc:	2302      	movs	r3, #2
 81028de:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 81028e0:	2302      	movs	r3, #2
 81028e2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 81028e4:	23c0      	movs	r3, #192	; 0xc0
 81028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 81028e8:	2320      	movs	r3, #32
 81028ea:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 81028ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 81028f0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 81028f2:	2300      	movs	r3, #0
 81028f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81028f8:	f107 0310 	add.w	r3, r7, #16
 81028fc:	4618      	mov	r0, r3
 81028fe:	f003 f8ab 	bl	8105a58 <HAL_RCCEx_PeriphCLKConfig>
 8102902:	4603      	mov	r3, r0
 8102904:	2b00      	cmp	r3, #0
 8102906:	d001      	beq.n	810290c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8102908:	f7ff fef0 	bl	81026ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 810290c:	4b19      	ldr	r3, [pc, #100]	; (8102974 <HAL_ADC_MspInit+0xe0>)
 810290e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102912:	4a18      	ldr	r2, [pc, #96]	; (8102974 <HAL_ADC_MspInit+0xe0>)
 8102914:	f043 0320 	orr.w	r3, r3, #32
 8102918:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810291c:	4b15      	ldr	r3, [pc, #84]	; (8102974 <HAL_ADC_MspInit+0xe0>)
 810291e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102922:	f003 0320 	and.w	r3, r3, #32
 8102926:	60fb      	str	r3, [r7, #12]
 8102928:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810292a:	4b12      	ldr	r3, [pc, #72]	; (8102974 <HAL_ADC_MspInit+0xe0>)
 810292c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102930:	4a10      	ldr	r2, [pc, #64]	; (8102974 <HAL_ADC_MspInit+0xe0>)
 8102932:	f043 0301 	orr.w	r3, r3, #1
 8102936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810293a:	4b0e      	ldr	r3, [pc, #56]	; (8102974 <HAL_ADC_MspInit+0xe0>)
 810293c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102940:	f003 0301 	and.w	r3, r3, #1
 8102944:	60bb      	str	r3, [r7, #8]
 8102946:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8102948:	2308      	movs	r3, #8
 810294a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 810294e:	2303      	movs	r3, #3
 8102950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102954:	2300      	movs	r3, #0
 8102956:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810295a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810295e:	4619      	mov	r1, r3
 8102960:	4805      	ldr	r0, [pc, #20]	; (8102978 <HAL_ADC_MspInit+0xe4>)
 8102962:	f001 fd5f 	bl	8104424 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8102966:	bf00      	nop
 8102968:	37e8      	adds	r7, #232	; 0xe8
 810296a:	46bd      	mov	sp, r7
 810296c:	bd80      	pop	{r7, pc}
 810296e:	bf00      	nop
 8102970:	40022000 	.word	0x40022000
 8102974:	58024400 	.word	0x58024400
 8102978:	58020000 	.word	0x58020000

0810297c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 810297c:	b580      	push	{r7, lr}
 810297e:	b0ba      	sub	sp, #232	; 0xe8
 8102980:	af00      	add	r7, sp, #0
 8102982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102984:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102988:	2200      	movs	r2, #0
 810298a:	601a      	str	r2, [r3, #0]
 810298c:	605a      	str	r2, [r3, #4]
 810298e:	609a      	str	r2, [r3, #8]
 8102990:	60da      	str	r2, [r3, #12]
 8102992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102994:	f107 0310 	add.w	r3, r7, #16
 8102998:	22c0      	movs	r2, #192	; 0xc0
 810299a:	2100      	movs	r1, #0
 810299c:	4618      	mov	r0, r3
 810299e:	f008 fa91 	bl	810aec4 <memset>
  if(hi2c->Instance==I2C1)
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	681b      	ldr	r3, [r3, #0]
 81029a6:	4a26      	ldr	r2, [pc, #152]	; (8102a40 <HAL_I2C_MspInit+0xc4>)
 81029a8:	4293      	cmp	r3, r2
 81029aa:	d145      	bne.n	8102a38 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 81029ac:	f04f 0208 	mov.w	r2, #8
 81029b0:	f04f 0300 	mov.w	r3, #0
 81029b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81029b8:	2300      	movs	r3, #0
 81029ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81029be:	f107 0310 	add.w	r3, r7, #16
 81029c2:	4618      	mov	r0, r3
 81029c4:	f003 f848 	bl	8105a58 <HAL_RCCEx_PeriphCLKConfig>
 81029c8:	4603      	mov	r3, r0
 81029ca:	2b00      	cmp	r3, #0
 81029cc:	d001      	beq.n	81029d2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 81029ce:	f7ff fe8d 	bl	81026ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81029d2:	4b1c      	ldr	r3, [pc, #112]	; (8102a44 <HAL_I2C_MspInit+0xc8>)
 81029d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81029d8:	4a1a      	ldr	r2, [pc, #104]	; (8102a44 <HAL_I2C_MspInit+0xc8>)
 81029da:	f043 0302 	orr.w	r3, r3, #2
 81029de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81029e2:	4b18      	ldr	r3, [pc, #96]	; (8102a44 <HAL_I2C_MspInit+0xc8>)
 81029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81029e8:	f003 0302 	and.w	r3, r3, #2
 81029ec:	60fb      	str	r3, [r7, #12]
 81029ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 81029f0:	23c0      	movs	r3, #192	; 0xc0
 81029f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81029f6:	2312      	movs	r3, #18
 81029f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81029fc:	2300      	movs	r3, #0
 81029fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102a02:	2300      	movs	r3, #0
 8102a04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8102a08:	2304      	movs	r3, #4
 8102a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102a0e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102a12:	4619      	mov	r1, r3
 8102a14:	480c      	ldr	r0, [pc, #48]	; (8102a48 <HAL_I2C_MspInit+0xcc>)
 8102a16:	f001 fd05 	bl	8104424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8102a1a:	4b0a      	ldr	r3, [pc, #40]	; (8102a44 <HAL_I2C_MspInit+0xc8>)
 8102a1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a20:	4a08      	ldr	r2, [pc, #32]	; (8102a44 <HAL_I2C_MspInit+0xc8>)
 8102a22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102a26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102a2a:	4b06      	ldr	r3, [pc, #24]	; (8102a44 <HAL_I2C_MspInit+0xc8>)
 8102a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102a34:	60bb      	str	r3, [r7, #8]
 8102a36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8102a38:	bf00      	nop
 8102a3a:	37e8      	adds	r7, #232	; 0xe8
 8102a3c:	46bd      	mov	sp, r7
 8102a3e:	bd80      	pop	{r7, pc}
 8102a40:	40005400 	.word	0x40005400
 8102a44:	58024400 	.word	0x58024400
 8102a48:	58020400 	.word	0x58020400

08102a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8102a4c:	b580      	push	{r7, lr}
 8102a4e:	b084      	sub	sp, #16
 8102a50:	af00      	add	r7, sp, #0
 8102a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	681b      	ldr	r3, [r3, #0]
 8102a58:	4a19      	ldr	r2, [pc, #100]	; (8102ac0 <HAL_TIM_Base_MspInit+0x74>)
 8102a5a:	4293      	cmp	r3, r2
 8102a5c:	d10f      	bne.n	8102a7e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8102a5e:	4b19      	ldr	r3, [pc, #100]	; (8102ac4 <HAL_TIM_Base_MspInit+0x78>)
 8102a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102a64:	4a17      	ldr	r2, [pc, #92]	; (8102ac4 <HAL_TIM_Base_MspInit+0x78>)
 8102a66:	f043 0301 	orr.w	r3, r3, #1
 8102a6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102a6e:	4b15      	ldr	r3, [pc, #84]	; (8102ac4 <HAL_TIM_Base_MspInit+0x78>)
 8102a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102a74:	f003 0301 	and.w	r3, r3, #1
 8102a78:	60fb      	str	r3, [r7, #12]
 8102a7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8102a7c:	e01b      	b.n	8102ab6 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM2)
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	681b      	ldr	r3, [r3, #0]
 8102a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102a86:	d116      	bne.n	8102ab6 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8102a88:	4b0e      	ldr	r3, [pc, #56]	; (8102ac4 <HAL_TIM_Base_MspInit+0x78>)
 8102a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a8e:	4a0d      	ldr	r2, [pc, #52]	; (8102ac4 <HAL_TIM_Base_MspInit+0x78>)
 8102a90:	f043 0301 	orr.w	r3, r3, #1
 8102a94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102a98:	4b0a      	ldr	r3, [pc, #40]	; (8102ac4 <HAL_TIM_Base_MspInit+0x78>)
 8102a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a9e:	f003 0301 	and.w	r3, r3, #1
 8102aa2:	60bb      	str	r3, [r7, #8]
 8102aa4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8102aa6:	2200      	movs	r2, #0
 8102aa8:	2100      	movs	r1, #0
 8102aaa:	201c      	movs	r0, #28
 8102aac:	f001 fc71 	bl	8104392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8102ab0:	201c      	movs	r0, #28
 8102ab2:	f001 fc88 	bl	81043c6 <HAL_NVIC_EnableIRQ>
}
 8102ab6:	bf00      	nop
 8102ab8:	3710      	adds	r7, #16
 8102aba:	46bd      	mov	sp, r7
 8102abc:	bd80      	pop	{r7, pc}
 8102abe:	bf00      	nop
 8102ac0:	40010000 	.word	0x40010000
 8102ac4:	58024400 	.word	0x58024400

08102ac8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8102ac8:	b580      	push	{r7, lr}
 8102aca:	b08a      	sub	sp, #40	; 0x28
 8102acc:	af00      	add	r7, sp, #0
 8102ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102ad0:	f107 0314 	add.w	r3, r7, #20
 8102ad4:	2200      	movs	r2, #0
 8102ad6:	601a      	str	r2, [r3, #0]
 8102ad8:	605a      	str	r2, [r3, #4]
 8102ada:	609a      	str	r2, [r3, #8]
 8102adc:	60da      	str	r2, [r3, #12]
 8102ade:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8102ae0:	687b      	ldr	r3, [r7, #4]
 8102ae2:	681b      	ldr	r3, [r3, #0]
 8102ae4:	4a1a      	ldr	r2, [pc, #104]	; (8102b50 <HAL_TIM_Encoder_MspInit+0x88>)
 8102ae6:	4293      	cmp	r3, r2
 8102ae8:	d12e      	bne.n	8102b48 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8102aea:	4b1a      	ldr	r3, [pc, #104]	; (8102b54 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102af0:	4a18      	ldr	r2, [pc, #96]	; (8102b54 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102af2:	f043 0304 	orr.w	r3, r3, #4
 8102af6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102afa:	4b16      	ldr	r3, [pc, #88]	; (8102b54 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102b00:	f003 0304 	and.w	r3, r3, #4
 8102b04:	613b      	str	r3, [r7, #16]
 8102b06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102b08:	4b12      	ldr	r3, [pc, #72]	; (8102b54 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b0e:	4a11      	ldr	r2, [pc, #68]	; (8102b54 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b10:	f043 0308 	orr.w	r3, r3, #8
 8102b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b18:	4b0e      	ldr	r3, [pc, #56]	; (8102b54 <HAL_TIM_Encoder_MspInit+0x8c>)
 8102b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b1e:	f003 0308 	and.w	r3, r3, #8
 8102b22:	60fb      	str	r3, [r7, #12]
 8102b24:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8102b26:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8102b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102b2c:	2302      	movs	r3, #2
 8102b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102b30:	2300      	movs	r3, #0
 8102b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102b34:	2300      	movs	r3, #0
 8102b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8102b38:	2302      	movs	r3, #2
 8102b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102b3c:	f107 0314 	add.w	r3, r7, #20
 8102b40:	4619      	mov	r1, r3
 8102b42:	4805      	ldr	r0, [pc, #20]	; (8102b58 <HAL_TIM_Encoder_MspInit+0x90>)
 8102b44:	f001 fc6e 	bl	8104424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8102b48:	bf00      	nop
 8102b4a:	3728      	adds	r7, #40	; 0x28
 8102b4c:	46bd      	mov	sp, r7
 8102b4e:	bd80      	pop	{r7, pc}
 8102b50:	40000800 	.word	0x40000800
 8102b54:	58024400 	.word	0x58024400
 8102b58:	58020c00 	.word	0x58020c00

08102b5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102b5c:	b580      	push	{r7, lr}
 8102b5e:	b088      	sub	sp, #32
 8102b60:	af00      	add	r7, sp, #0
 8102b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102b64:	f107 030c 	add.w	r3, r7, #12
 8102b68:	2200      	movs	r2, #0
 8102b6a:	601a      	str	r2, [r3, #0]
 8102b6c:	605a      	str	r2, [r3, #4]
 8102b6e:	609a      	str	r2, [r3, #8]
 8102b70:	60da      	str	r2, [r3, #12]
 8102b72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8102b74:	687b      	ldr	r3, [r7, #4]
 8102b76:	681b      	ldr	r3, [r3, #0]
 8102b78:	4a13      	ldr	r2, [pc, #76]	; (8102bc8 <HAL_TIM_MspPostInit+0x6c>)
 8102b7a:	4293      	cmp	r3, r2
 8102b7c:	d11f      	bne.n	8102bbe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8102b7e:	4b13      	ldr	r3, [pc, #76]	; (8102bcc <HAL_TIM_MspPostInit+0x70>)
 8102b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b84:	4a11      	ldr	r2, [pc, #68]	; (8102bcc <HAL_TIM_MspPostInit+0x70>)
 8102b86:	f043 0310 	orr.w	r3, r3, #16
 8102b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b8e:	4b0f      	ldr	r3, [pc, #60]	; (8102bcc <HAL_TIM_MspPostInit+0x70>)
 8102b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b94:	f003 0310 	and.w	r3, r3, #16
 8102b98:	60bb      	str	r3, [r7, #8]
 8102b9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8102b9c:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8102ba0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102ba2:	2302      	movs	r3, #2
 8102ba4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102ba6:	2300      	movs	r3, #0
 8102ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102baa:	2300      	movs	r3, #0
 8102bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8102bae:	2301      	movs	r3, #1
 8102bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8102bb2:	f107 030c 	add.w	r3, r7, #12
 8102bb6:	4619      	mov	r1, r3
 8102bb8:	4805      	ldr	r0, [pc, #20]	; (8102bd0 <HAL_TIM_MspPostInit+0x74>)
 8102bba:	f001 fc33 	bl	8104424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8102bbe:	bf00      	nop
 8102bc0:	3720      	adds	r7, #32
 8102bc2:	46bd      	mov	sp, r7
 8102bc4:	bd80      	pop	{r7, pc}
 8102bc6:	bf00      	nop
 8102bc8:	40010000 	.word	0x40010000
 8102bcc:	58024400 	.word	0x58024400
 8102bd0:	58021000 	.word	0x58021000

08102bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102bd4:	b580      	push	{r7, lr}
 8102bd6:	b0ba      	sub	sp, #232	; 0xe8
 8102bd8:	af00      	add	r7, sp, #0
 8102bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102bdc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102be0:	2200      	movs	r2, #0
 8102be2:	601a      	str	r2, [r3, #0]
 8102be4:	605a      	str	r2, [r3, #4]
 8102be6:	609a      	str	r2, [r3, #8]
 8102be8:	60da      	str	r2, [r3, #12]
 8102bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102bec:	f107 0310 	add.w	r3, r7, #16
 8102bf0:	22c0      	movs	r2, #192	; 0xc0
 8102bf2:	2100      	movs	r1, #0
 8102bf4:	4618      	mov	r0, r3
 8102bf6:	f008 f965 	bl	810aec4 <memset>
  if(huart->Instance==USART3)
 8102bfa:	687b      	ldr	r3, [r7, #4]
 8102bfc:	681b      	ldr	r3, [r3, #0]
 8102bfe:	4a27      	ldr	r2, [pc, #156]	; (8102c9c <HAL_UART_MspInit+0xc8>)
 8102c00:	4293      	cmp	r3, r2
 8102c02:	d146      	bne.n	8102c92 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102c04:	f04f 0202 	mov.w	r2, #2
 8102c08:	f04f 0300 	mov.w	r3, #0
 8102c0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102c10:	2300      	movs	r3, #0
 8102c12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102c16:	f107 0310 	add.w	r3, r7, #16
 8102c1a:	4618      	mov	r0, r3
 8102c1c:	f002 ff1c 	bl	8105a58 <HAL_RCCEx_PeriphCLKConfig>
 8102c20:	4603      	mov	r3, r0
 8102c22:	2b00      	cmp	r3, #0
 8102c24:	d001      	beq.n	8102c2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8102c26:	f7ff fd61 	bl	81026ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102c2a:	4b1d      	ldr	r3, [pc, #116]	; (8102ca0 <HAL_UART_MspInit+0xcc>)
 8102c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c30:	4a1b      	ldr	r2, [pc, #108]	; (8102ca0 <HAL_UART_MspInit+0xcc>)
 8102c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102c36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102c3a:	4b19      	ldr	r3, [pc, #100]	; (8102ca0 <HAL_UART_MspInit+0xcc>)
 8102c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102c44:	60fb      	str	r3, [r7, #12]
 8102c46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102c48:	4b15      	ldr	r3, [pc, #84]	; (8102ca0 <HAL_UART_MspInit+0xcc>)
 8102c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102c4e:	4a14      	ldr	r2, [pc, #80]	; (8102ca0 <HAL_UART_MspInit+0xcc>)
 8102c50:	f043 0308 	orr.w	r3, r3, #8
 8102c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102c58:	4b11      	ldr	r3, [pc, #68]	; (8102ca0 <HAL_UART_MspInit+0xcc>)
 8102c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102c5e:	f003 0308 	and.w	r3, r3, #8
 8102c62:	60bb      	str	r3, [r7, #8]
 8102c64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8102c66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102c6e:	2302      	movs	r3, #2
 8102c70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102c74:	2300      	movs	r3, #0
 8102c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102c7a:	2300      	movs	r3, #0
 8102c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102c80:	2307      	movs	r3, #7
 8102c82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102c86:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102c8a:	4619      	mov	r1, r3
 8102c8c:	4805      	ldr	r0, [pc, #20]	; (8102ca4 <HAL_UART_MspInit+0xd0>)
 8102c8e:	f001 fbc9 	bl	8104424 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8102c92:	bf00      	nop
 8102c94:	37e8      	adds	r7, #232	; 0xe8
 8102c96:	46bd      	mov	sp, r7
 8102c98:	bd80      	pop	{r7, pc}
 8102c9a:	bf00      	nop
 8102c9c:	40004800 	.word	0x40004800
 8102ca0:	58024400 	.word	0x58024400
 8102ca4:	58020c00 	.word	0x58020c00

08102ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102ca8:	b480      	push	{r7}
 8102caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102cac:	e7fe      	b.n	8102cac <NMI_Handler+0x4>

08102cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102cae:	b480      	push	{r7}
 8102cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102cb2:	e7fe      	b.n	8102cb2 <HardFault_Handler+0x4>

08102cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102cb4:	b480      	push	{r7}
 8102cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102cb8:	e7fe      	b.n	8102cb8 <MemManage_Handler+0x4>

08102cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102cba:	b480      	push	{r7}
 8102cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102cbe:	e7fe      	b.n	8102cbe <BusFault_Handler+0x4>

08102cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102cc0:	b480      	push	{r7}
 8102cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102cc4:	e7fe      	b.n	8102cc4 <UsageFault_Handler+0x4>

08102cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102cc6:	b480      	push	{r7}
 8102cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102cca:	bf00      	nop
 8102ccc:	46bd      	mov	sp, r7
 8102cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cd2:	4770      	bx	lr

08102cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102cd4:	b480      	push	{r7}
 8102cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102cd8:	bf00      	nop
 8102cda:	46bd      	mov	sp, r7
 8102cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ce0:	4770      	bx	lr

08102ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102ce2:	b480      	push	{r7}
 8102ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102ce6:	bf00      	nop
 8102ce8:	46bd      	mov	sp, r7
 8102cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cee:	4770      	bx	lr

08102cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102cf0:	b580      	push	{r7, lr}
 8102cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102cf4:	f000 f990 	bl	8103018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102cf8:	bf00      	nop
 8102cfa:	bd80      	pop	{r7, pc}

08102cfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8102cfc:	b580      	push	{r7, lr}
 8102cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8102d00:	4802      	ldr	r0, [pc, #8]	; (8102d0c <TIM2_IRQHandler+0x10>)
 8102d02:	f005 fe8d 	bl	8108a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8102d06:	bf00      	nop
 8102d08:	bd80      	pop	{r7, pc}
 8102d0a:	bf00      	nop
 8102d0c:	10000328 	.word	0x10000328

08102d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102d10:	b480      	push	{r7}
 8102d12:	af00      	add	r7, sp, #0
  return 1;
 8102d14:	2301      	movs	r3, #1
}
 8102d16:	4618      	mov	r0, r3
 8102d18:	46bd      	mov	sp, r7
 8102d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d1e:	4770      	bx	lr

08102d20 <_kill>:

int _kill(int pid, int sig)
{
 8102d20:	b580      	push	{r7, lr}
 8102d22:	b082      	sub	sp, #8
 8102d24:	af00      	add	r7, sp, #0
 8102d26:	6078      	str	r0, [r7, #4]
 8102d28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8102d2a:	f008 f88b 	bl	810ae44 <__errno>
 8102d2e:	4603      	mov	r3, r0
 8102d30:	2216      	movs	r2, #22
 8102d32:	601a      	str	r2, [r3, #0]
  return -1;
 8102d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102d38:	4618      	mov	r0, r3
 8102d3a:	3708      	adds	r7, #8
 8102d3c:	46bd      	mov	sp, r7
 8102d3e:	bd80      	pop	{r7, pc}

08102d40 <_exit>:

void _exit (int status)
{
 8102d40:	b580      	push	{r7, lr}
 8102d42:	b082      	sub	sp, #8
 8102d44:	af00      	add	r7, sp, #0
 8102d46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8102d48:	f04f 31ff 	mov.w	r1, #4294967295
 8102d4c:	6878      	ldr	r0, [r7, #4]
 8102d4e:	f7ff ffe7 	bl	8102d20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8102d52:	e7fe      	b.n	8102d52 <_exit+0x12>

08102d54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102d54:	b580      	push	{r7, lr}
 8102d56:	b086      	sub	sp, #24
 8102d58:	af00      	add	r7, sp, #0
 8102d5a:	60f8      	str	r0, [r7, #12]
 8102d5c:	60b9      	str	r1, [r7, #8]
 8102d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102d60:	2300      	movs	r3, #0
 8102d62:	617b      	str	r3, [r7, #20]
 8102d64:	e00a      	b.n	8102d7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8102d66:	f3af 8000 	nop.w
 8102d6a:	4601      	mov	r1, r0
 8102d6c:	68bb      	ldr	r3, [r7, #8]
 8102d6e:	1c5a      	adds	r2, r3, #1
 8102d70:	60ba      	str	r2, [r7, #8]
 8102d72:	b2ca      	uxtb	r2, r1
 8102d74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102d76:	697b      	ldr	r3, [r7, #20]
 8102d78:	3301      	adds	r3, #1
 8102d7a:	617b      	str	r3, [r7, #20]
 8102d7c:	697a      	ldr	r2, [r7, #20]
 8102d7e:	687b      	ldr	r3, [r7, #4]
 8102d80:	429a      	cmp	r2, r3
 8102d82:	dbf0      	blt.n	8102d66 <_read+0x12>
  }

  return len;
 8102d84:	687b      	ldr	r3, [r7, #4]
}
 8102d86:	4618      	mov	r0, r3
 8102d88:	3718      	adds	r7, #24
 8102d8a:	46bd      	mov	sp, r7
 8102d8c:	bd80      	pop	{r7, pc}

08102d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8102d8e:	b580      	push	{r7, lr}
 8102d90:	b086      	sub	sp, #24
 8102d92:	af00      	add	r7, sp, #0
 8102d94:	60f8      	str	r0, [r7, #12]
 8102d96:	60b9      	str	r1, [r7, #8]
 8102d98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102d9a:	2300      	movs	r3, #0
 8102d9c:	617b      	str	r3, [r7, #20]
 8102d9e:	e009      	b.n	8102db4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8102da0:	68bb      	ldr	r3, [r7, #8]
 8102da2:	1c5a      	adds	r2, r3, #1
 8102da4:	60ba      	str	r2, [r7, #8]
 8102da6:	781b      	ldrb	r3, [r3, #0]
 8102da8:	4618      	mov	r0, r3
 8102daa:	f7ff fc77 	bl	810269c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102dae:	697b      	ldr	r3, [r7, #20]
 8102db0:	3301      	adds	r3, #1
 8102db2:	617b      	str	r3, [r7, #20]
 8102db4:	697a      	ldr	r2, [r7, #20]
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	429a      	cmp	r2, r3
 8102dba:	dbf1      	blt.n	8102da0 <_write+0x12>
  }
  return len;
 8102dbc:	687b      	ldr	r3, [r7, #4]
}
 8102dbe:	4618      	mov	r0, r3
 8102dc0:	3718      	adds	r7, #24
 8102dc2:	46bd      	mov	sp, r7
 8102dc4:	bd80      	pop	{r7, pc}

08102dc6 <_close>:

int _close(int file)
{
 8102dc6:	b480      	push	{r7}
 8102dc8:	b083      	sub	sp, #12
 8102dca:	af00      	add	r7, sp, #0
 8102dcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8102dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102dd2:	4618      	mov	r0, r3
 8102dd4:	370c      	adds	r7, #12
 8102dd6:	46bd      	mov	sp, r7
 8102dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ddc:	4770      	bx	lr

08102dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8102dde:	b480      	push	{r7}
 8102de0:	b083      	sub	sp, #12
 8102de2:	af00      	add	r7, sp, #0
 8102de4:	6078      	str	r0, [r7, #4]
 8102de6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8102de8:	683b      	ldr	r3, [r7, #0]
 8102dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8102dee:	605a      	str	r2, [r3, #4]
  return 0;
 8102df0:	2300      	movs	r3, #0
}
 8102df2:	4618      	mov	r0, r3
 8102df4:	370c      	adds	r7, #12
 8102df6:	46bd      	mov	sp, r7
 8102df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dfc:	4770      	bx	lr

08102dfe <_isatty>:

int _isatty(int file)
{
 8102dfe:	b480      	push	{r7}
 8102e00:	b083      	sub	sp, #12
 8102e02:	af00      	add	r7, sp, #0
 8102e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8102e06:	2301      	movs	r3, #1
}
 8102e08:	4618      	mov	r0, r3
 8102e0a:	370c      	adds	r7, #12
 8102e0c:	46bd      	mov	sp, r7
 8102e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e12:	4770      	bx	lr

08102e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102e14:	b480      	push	{r7}
 8102e16:	b085      	sub	sp, #20
 8102e18:	af00      	add	r7, sp, #0
 8102e1a:	60f8      	str	r0, [r7, #12]
 8102e1c:	60b9      	str	r1, [r7, #8]
 8102e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8102e20:	2300      	movs	r3, #0
}
 8102e22:	4618      	mov	r0, r3
 8102e24:	3714      	adds	r7, #20
 8102e26:	46bd      	mov	sp, r7
 8102e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e2c:	4770      	bx	lr
	...

08102e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102e30:	b580      	push	{r7, lr}
 8102e32:	b086      	sub	sp, #24
 8102e34:	af00      	add	r7, sp, #0
 8102e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102e38:	4a14      	ldr	r2, [pc, #80]	; (8102e8c <_sbrk+0x5c>)
 8102e3a:	4b15      	ldr	r3, [pc, #84]	; (8102e90 <_sbrk+0x60>)
 8102e3c:	1ad3      	subs	r3, r2, r3
 8102e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102e40:	697b      	ldr	r3, [r7, #20]
 8102e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102e44:	4b13      	ldr	r3, [pc, #76]	; (8102e94 <_sbrk+0x64>)
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	2b00      	cmp	r3, #0
 8102e4a:	d102      	bne.n	8102e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102e4c:	4b11      	ldr	r3, [pc, #68]	; (8102e94 <_sbrk+0x64>)
 8102e4e:	4a12      	ldr	r2, [pc, #72]	; (8102e98 <_sbrk+0x68>)
 8102e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102e52:	4b10      	ldr	r3, [pc, #64]	; (8102e94 <_sbrk+0x64>)
 8102e54:	681a      	ldr	r2, [r3, #0]
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	4413      	add	r3, r2
 8102e5a:	693a      	ldr	r2, [r7, #16]
 8102e5c:	429a      	cmp	r2, r3
 8102e5e:	d207      	bcs.n	8102e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102e60:	f007 fff0 	bl	810ae44 <__errno>
 8102e64:	4603      	mov	r3, r0
 8102e66:	220c      	movs	r2, #12
 8102e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8102e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8102e6e:	e009      	b.n	8102e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8102e70:	4b08      	ldr	r3, [pc, #32]	; (8102e94 <_sbrk+0x64>)
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8102e76:	4b07      	ldr	r3, [pc, #28]	; (8102e94 <_sbrk+0x64>)
 8102e78:	681a      	ldr	r2, [r3, #0]
 8102e7a:	687b      	ldr	r3, [r7, #4]
 8102e7c:	4413      	add	r3, r2
 8102e7e:	4a05      	ldr	r2, [pc, #20]	; (8102e94 <_sbrk+0x64>)
 8102e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8102e82:	68fb      	ldr	r3, [r7, #12]
}
 8102e84:	4618      	mov	r0, r3
 8102e86:	3718      	adds	r7, #24
 8102e88:	46bd      	mov	sp, r7
 8102e8a:	bd80      	pop	{r7, pc}
 8102e8c:	10048000 	.word	0x10048000
 8102e90:	00000400 	.word	0x00000400
 8102e94:	100004a0 	.word	0x100004a0
 8102e98:	100004b8 	.word	0x100004b8

08102e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102ed4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102ea0:	f7fe f932 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102ea4:	480c      	ldr	r0, [pc, #48]	; (8102ed8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102ea6:	490d      	ldr	r1, [pc, #52]	; (8102edc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102ea8:	4a0d      	ldr	r2, [pc, #52]	; (8102ee0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102eac:	e002      	b.n	8102eb4 <LoopCopyDataInit>

08102eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102eb2:	3304      	adds	r3, #4

08102eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102eb8:	d3f9      	bcc.n	8102eae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102eba:	4a0a      	ldr	r2, [pc, #40]	; (8102ee4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102ebc:	4c0a      	ldr	r4, [pc, #40]	; (8102ee8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102ec0:	e001      	b.n	8102ec6 <LoopFillZerobss>

08102ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102ec4:	3204      	adds	r2, #4

08102ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102ec8:	d3fb      	bcc.n	8102ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102eca:	f007 ffc1 	bl	810ae50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102ece:	f7fe ff9f 	bl	8101e10 <main>
  bx  lr
 8102ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102ed4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102ed8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102edc:	100001f4 	.word	0x100001f4
  ldr r2, =_sidata
 8102ee0:	0810fff4 	.word	0x0810fff4
  ldr r2, =_sbss
 8102ee4:	100001f4 	.word	0x100001f4
  ldr r4, =_ebss
 8102ee8:	100004b8 	.word	0x100004b8

08102eec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102eec:	e7fe      	b.n	8102eec <ADC3_IRQHandler>
	...

08102ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102ef0:	b580      	push	{r7, lr}
 8102ef2:	b082      	sub	sp, #8
 8102ef4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102ef6:	4b28      	ldr	r3, [pc, #160]	; (8102f98 <HAL_Init+0xa8>)
 8102ef8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102efc:	4a26      	ldr	r2, [pc, #152]	; (8102f98 <HAL_Init+0xa8>)
 8102efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102f02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102f06:	4b24      	ldr	r3, [pc, #144]	; (8102f98 <HAL_Init+0xa8>)
 8102f08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102f10:	603b      	str	r3, [r7, #0]
 8102f12:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102f14:	4b21      	ldr	r3, [pc, #132]	; (8102f9c <HAL_Init+0xac>)
 8102f16:	681b      	ldr	r3, [r3, #0]
 8102f18:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102f1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102f20:	4a1e      	ldr	r2, [pc, #120]	; (8102f9c <HAL_Init+0xac>)
 8102f22:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102f26:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102f28:	4b1c      	ldr	r3, [pc, #112]	; (8102f9c <HAL_Init+0xac>)
 8102f2a:	681b      	ldr	r3, [r3, #0]
 8102f2c:	4a1b      	ldr	r2, [pc, #108]	; (8102f9c <HAL_Init+0xac>)
 8102f2e:	f043 0301 	orr.w	r3, r3, #1
 8102f32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102f34:	2003      	movs	r0, #3
 8102f36:	f001 fa21 	bl	810437c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102f3a:	f002 fbb5 	bl	81056a8 <HAL_RCC_GetSysClockFreq>
 8102f3e:	4602      	mov	r2, r0
 8102f40:	4b15      	ldr	r3, [pc, #84]	; (8102f98 <HAL_Init+0xa8>)
 8102f42:	699b      	ldr	r3, [r3, #24]
 8102f44:	0a1b      	lsrs	r3, r3, #8
 8102f46:	f003 030f 	and.w	r3, r3, #15
 8102f4a:	4915      	ldr	r1, [pc, #84]	; (8102fa0 <HAL_Init+0xb0>)
 8102f4c:	5ccb      	ldrb	r3, [r1, r3]
 8102f4e:	f003 031f 	and.w	r3, r3, #31
 8102f52:	fa22 f303 	lsr.w	r3, r2, r3
 8102f56:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102f58:	4b0f      	ldr	r3, [pc, #60]	; (8102f98 <HAL_Init+0xa8>)
 8102f5a:	699b      	ldr	r3, [r3, #24]
 8102f5c:	f003 030f 	and.w	r3, r3, #15
 8102f60:	4a0f      	ldr	r2, [pc, #60]	; (8102fa0 <HAL_Init+0xb0>)
 8102f62:	5cd3      	ldrb	r3, [r2, r3]
 8102f64:	f003 031f 	and.w	r3, r3, #31
 8102f68:	687a      	ldr	r2, [r7, #4]
 8102f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8102f6e:	4a0d      	ldr	r2, [pc, #52]	; (8102fa4 <HAL_Init+0xb4>)
 8102f70:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102f72:	4b0c      	ldr	r3, [pc, #48]	; (8102fa4 <HAL_Init+0xb4>)
 8102f74:	681b      	ldr	r3, [r3, #0]
 8102f76:	4a0c      	ldr	r2, [pc, #48]	; (8102fa8 <HAL_Init+0xb8>)
 8102f78:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102f7a:	2000      	movs	r0, #0
 8102f7c:	f000 f816 	bl	8102fac <HAL_InitTick>
 8102f80:	4603      	mov	r3, r0
 8102f82:	2b00      	cmp	r3, #0
 8102f84:	d001      	beq.n	8102f8a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102f86:	2301      	movs	r3, #1
 8102f88:	e002      	b.n	8102f90 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102f8a:	f7ff fc69 	bl	8102860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102f8e:	2300      	movs	r3, #0
}
 8102f90:	4618      	mov	r0, r3
 8102f92:	3708      	adds	r7, #8
 8102f94:	46bd      	mov	sp, r7
 8102f96:	bd80      	pop	{r7, pc}
 8102f98:	58024400 	.word	0x58024400
 8102f9c:	40024400 	.word	0x40024400
 8102fa0:	0810fb00 	.word	0x0810fb00
 8102fa4:	10000004 	.word	0x10000004
 8102fa8:	10000000 	.word	0x10000000

08102fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102fac:	b580      	push	{r7, lr}
 8102fae:	b082      	sub	sp, #8
 8102fb0:	af00      	add	r7, sp, #0
 8102fb2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102fb4:	4b15      	ldr	r3, [pc, #84]	; (810300c <HAL_InitTick+0x60>)
 8102fb6:	781b      	ldrb	r3, [r3, #0]
 8102fb8:	2b00      	cmp	r3, #0
 8102fba:	d101      	bne.n	8102fc0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102fbc:	2301      	movs	r3, #1
 8102fbe:	e021      	b.n	8103004 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102fc0:	4b13      	ldr	r3, [pc, #76]	; (8103010 <HAL_InitTick+0x64>)
 8102fc2:	681a      	ldr	r2, [r3, #0]
 8102fc4:	4b11      	ldr	r3, [pc, #68]	; (810300c <HAL_InitTick+0x60>)
 8102fc6:	781b      	ldrb	r3, [r3, #0]
 8102fc8:	4619      	mov	r1, r3
 8102fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8102fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8102fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8102fd6:	4618      	mov	r0, r3
 8102fd8:	f001 fa03 	bl	81043e2 <HAL_SYSTICK_Config>
 8102fdc:	4603      	mov	r3, r0
 8102fde:	2b00      	cmp	r3, #0
 8102fe0:	d001      	beq.n	8102fe6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102fe2:	2301      	movs	r3, #1
 8102fe4:	e00e      	b.n	8103004 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102fe6:	687b      	ldr	r3, [r7, #4]
 8102fe8:	2b0f      	cmp	r3, #15
 8102fea:	d80a      	bhi.n	8103002 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102fec:	2200      	movs	r2, #0
 8102fee:	6879      	ldr	r1, [r7, #4]
 8102ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8102ff4:	f001 f9cd 	bl	8104392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102ff8:	4a06      	ldr	r2, [pc, #24]	; (8103014 <HAL_InitTick+0x68>)
 8102ffa:	687b      	ldr	r3, [r7, #4]
 8102ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102ffe:	2300      	movs	r3, #0
 8103000:	e000      	b.n	8103004 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8103002:	2301      	movs	r3, #1
}
 8103004:	4618      	mov	r0, r3
 8103006:	3708      	adds	r7, #8
 8103008:	46bd      	mov	sp, r7
 810300a:	bd80      	pop	{r7, pc}
 810300c:	1000001c 	.word	0x1000001c
 8103010:	10000000 	.word	0x10000000
 8103014:	10000018 	.word	0x10000018

08103018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103018:	b480      	push	{r7}
 810301a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810301c:	4b06      	ldr	r3, [pc, #24]	; (8103038 <HAL_IncTick+0x20>)
 810301e:	781b      	ldrb	r3, [r3, #0]
 8103020:	461a      	mov	r2, r3
 8103022:	4b06      	ldr	r3, [pc, #24]	; (810303c <HAL_IncTick+0x24>)
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	4413      	add	r3, r2
 8103028:	4a04      	ldr	r2, [pc, #16]	; (810303c <HAL_IncTick+0x24>)
 810302a:	6013      	str	r3, [r2, #0]
}
 810302c:	bf00      	nop
 810302e:	46bd      	mov	sp, r7
 8103030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103034:	4770      	bx	lr
 8103036:	bf00      	nop
 8103038:	1000001c 	.word	0x1000001c
 810303c:	100004a4 	.word	0x100004a4

08103040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8103040:	b480      	push	{r7}
 8103042:	af00      	add	r7, sp, #0
  return uwTick;
 8103044:	4b03      	ldr	r3, [pc, #12]	; (8103054 <HAL_GetTick+0x14>)
 8103046:	681b      	ldr	r3, [r3, #0]
}
 8103048:	4618      	mov	r0, r3
 810304a:	46bd      	mov	sp, r7
 810304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103050:	4770      	bx	lr
 8103052:	bf00      	nop
 8103054:	100004a4 	.word	0x100004a4

08103058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103058:	b580      	push	{r7, lr}
 810305a:	b084      	sub	sp, #16
 810305c:	af00      	add	r7, sp, #0
 810305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8103060:	f7ff ffee 	bl	8103040 <HAL_GetTick>
 8103064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810306a:	68fb      	ldr	r3, [r7, #12]
 810306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103070:	d005      	beq.n	810307e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8103072:	4b0a      	ldr	r3, [pc, #40]	; (810309c <HAL_Delay+0x44>)
 8103074:	781b      	ldrb	r3, [r3, #0]
 8103076:	461a      	mov	r2, r3
 8103078:	68fb      	ldr	r3, [r7, #12]
 810307a:	4413      	add	r3, r2
 810307c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810307e:	bf00      	nop
 8103080:	f7ff ffde 	bl	8103040 <HAL_GetTick>
 8103084:	4602      	mov	r2, r0
 8103086:	68bb      	ldr	r3, [r7, #8]
 8103088:	1ad3      	subs	r3, r2, r3
 810308a:	68fa      	ldr	r2, [r7, #12]
 810308c:	429a      	cmp	r2, r3
 810308e:	d8f7      	bhi.n	8103080 <HAL_Delay+0x28>
  {
  }
}
 8103090:	bf00      	nop
 8103092:	bf00      	nop
 8103094:	3710      	adds	r7, #16
 8103096:	46bd      	mov	sp, r7
 8103098:	bd80      	pop	{r7, pc}
 810309a:	bf00      	nop
 810309c:	1000001c 	.word	0x1000001c

081030a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81030a0:	b480      	push	{r7}
 81030a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81030a4:	4b03      	ldr	r3, [pc, #12]	; (81030b4 <HAL_GetREVID+0x14>)
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	0c1b      	lsrs	r3, r3, #16
}
 81030aa:	4618      	mov	r0, r3
 81030ac:	46bd      	mov	sp, r7
 81030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030b2:	4770      	bx	lr
 81030b4:	5c001000 	.word	0x5c001000

081030b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81030b8:	b480      	push	{r7}
 81030ba:	b083      	sub	sp, #12
 81030bc:	af00      	add	r7, sp, #0
 81030be:	6078      	str	r0, [r7, #4]
 81030c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	689b      	ldr	r3, [r3, #8]
 81030c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81030ca:	683b      	ldr	r3, [r7, #0]
 81030cc:	431a      	orrs	r2, r3
 81030ce:	687b      	ldr	r3, [r7, #4]
 81030d0:	609a      	str	r2, [r3, #8]
}
 81030d2:	bf00      	nop
 81030d4:	370c      	adds	r7, #12
 81030d6:	46bd      	mov	sp, r7
 81030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030dc:	4770      	bx	lr

081030de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81030de:	b480      	push	{r7}
 81030e0:	b083      	sub	sp, #12
 81030e2:	af00      	add	r7, sp, #0
 81030e4:	6078      	str	r0, [r7, #4]
 81030e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	689b      	ldr	r3, [r3, #8]
 81030ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 81030f0:	683b      	ldr	r3, [r7, #0]
 81030f2:	431a      	orrs	r2, r3
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	609a      	str	r2, [r3, #8]
}
 81030f8:	bf00      	nop
 81030fa:	370c      	adds	r7, #12
 81030fc:	46bd      	mov	sp, r7
 81030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103102:	4770      	bx	lr

08103104 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103104:	b480      	push	{r7}
 8103106:	b083      	sub	sp, #12
 8103108:	af00      	add	r7, sp, #0
 810310a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 810310c:	687b      	ldr	r3, [r7, #4]
 810310e:	689b      	ldr	r3, [r3, #8]
 8103110:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8103114:	4618      	mov	r0, r3
 8103116:	370c      	adds	r7, #12
 8103118:	46bd      	mov	sp, r7
 810311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810311e:	4770      	bx	lr

08103120 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8103120:	b480      	push	{r7}
 8103122:	b087      	sub	sp, #28
 8103124:	af00      	add	r7, sp, #0
 8103126:	60f8      	str	r0, [r7, #12]
 8103128:	60b9      	str	r1, [r7, #8]
 810312a:	607a      	str	r2, [r7, #4]
 810312c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810312e:	68fb      	ldr	r3, [r7, #12]
 8103130:	3360      	adds	r3, #96	; 0x60
 8103132:	461a      	mov	r2, r3
 8103134:	68bb      	ldr	r3, [r7, #8]
 8103136:	009b      	lsls	r3, r3, #2
 8103138:	4413      	add	r3, r2
 810313a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 810313c:	697b      	ldr	r3, [r7, #20]
 810313e:	681b      	ldr	r3, [r3, #0]
 8103140:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8103144:	687b      	ldr	r3, [r7, #4]
 8103146:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 810314a:	683b      	ldr	r3, [r7, #0]
 810314c:	430b      	orrs	r3, r1
 810314e:	431a      	orrs	r2, r3
 8103150:	697b      	ldr	r3, [r7, #20]
 8103152:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8103154:	bf00      	nop
 8103156:	371c      	adds	r7, #28
 8103158:	46bd      	mov	sp, r7
 810315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810315e:	4770      	bx	lr

08103160 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8103160:	b480      	push	{r7}
 8103162:	b085      	sub	sp, #20
 8103164:	af00      	add	r7, sp, #0
 8103166:	60f8      	str	r0, [r7, #12]
 8103168:	60b9      	str	r1, [r7, #8]
 810316a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 810316c:	68fb      	ldr	r3, [r7, #12]
 810316e:	691b      	ldr	r3, [r3, #16]
 8103170:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8103174:	68bb      	ldr	r3, [r7, #8]
 8103176:	f003 031f 	and.w	r3, r3, #31
 810317a:	6879      	ldr	r1, [r7, #4]
 810317c:	fa01 f303 	lsl.w	r3, r1, r3
 8103180:	431a      	orrs	r2, r3
 8103182:	68fb      	ldr	r3, [r7, #12]
 8103184:	611a      	str	r2, [r3, #16]
}
 8103186:	bf00      	nop
 8103188:	3714      	adds	r7, #20
 810318a:	46bd      	mov	sp, r7
 810318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103190:	4770      	bx	lr

08103192 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8103192:	b480      	push	{r7}
 8103194:	b087      	sub	sp, #28
 8103196:	af00      	add	r7, sp, #0
 8103198:	60f8      	str	r0, [r7, #12]
 810319a:	60b9      	str	r1, [r7, #8]
 810319c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810319e:	68fb      	ldr	r3, [r7, #12]
 81031a0:	3360      	adds	r3, #96	; 0x60
 81031a2:	461a      	mov	r2, r3
 81031a4:	68bb      	ldr	r3, [r7, #8]
 81031a6:	009b      	lsls	r3, r3, #2
 81031a8:	4413      	add	r3, r2
 81031aa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81031ac:	697b      	ldr	r3, [r7, #20]
 81031ae:	681b      	ldr	r3, [r3, #0]
 81031b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81031b4:	687b      	ldr	r3, [r7, #4]
 81031b6:	431a      	orrs	r2, r3
 81031b8:	697b      	ldr	r3, [r7, #20]
 81031ba:	601a      	str	r2, [r3, #0]
  }
}
 81031bc:	bf00      	nop
 81031be:	371c      	adds	r7, #28
 81031c0:	46bd      	mov	sp, r7
 81031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031c6:	4770      	bx	lr

081031c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81031c8:	b480      	push	{r7}
 81031ca:	b087      	sub	sp, #28
 81031cc:	af00      	add	r7, sp, #0
 81031ce:	60f8      	str	r0, [r7, #12]
 81031d0:	60b9      	str	r1, [r7, #8]
 81031d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81031d4:	68fb      	ldr	r3, [r7, #12]
 81031d6:	3330      	adds	r3, #48	; 0x30
 81031d8:	461a      	mov	r2, r3
 81031da:	68bb      	ldr	r3, [r7, #8]
 81031dc:	0a1b      	lsrs	r3, r3, #8
 81031de:	009b      	lsls	r3, r3, #2
 81031e0:	f003 030c 	and.w	r3, r3, #12
 81031e4:	4413      	add	r3, r2
 81031e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81031e8:	697b      	ldr	r3, [r7, #20]
 81031ea:	681a      	ldr	r2, [r3, #0]
 81031ec:	68bb      	ldr	r3, [r7, #8]
 81031ee:	f003 031f 	and.w	r3, r3, #31
 81031f2:	211f      	movs	r1, #31
 81031f4:	fa01 f303 	lsl.w	r3, r1, r3
 81031f8:	43db      	mvns	r3, r3
 81031fa:	401a      	ands	r2, r3
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	0e9b      	lsrs	r3, r3, #26
 8103200:	f003 011f 	and.w	r1, r3, #31
 8103204:	68bb      	ldr	r3, [r7, #8]
 8103206:	f003 031f 	and.w	r3, r3, #31
 810320a:	fa01 f303 	lsl.w	r3, r1, r3
 810320e:	431a      	orrs	r2, r3
 8103210:	697b      	ldr	r3, [r7, #20]
 8103212:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8103214:	bf00      	nop
 8103216:	371c      	adds	r7, #28
 8103218:	46bd      	mov	sp, r7
 810321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810321e:	4770      	bx	lr

08103220 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8103220:	b480      	push	{r7}
 8103222:	b087      	sub	sp, #28
 8103224:	af00      	add	r7, sp, #0
 8103226:	60f8      	str	r0, [r7, #12]
 8103228:	60b9      	str	r1, [r7, #8]
 810322a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 810322c:	68fb      	ldr	r3, [r7, #12]
 810322e:	3314      	adds	r3, #20
 8103230:	461a      	mov	r2, r3
 8103232:	68bb      	ldr	r3, [r7, #8]
 8103234:	0e5b      	lsrs	r3, r3, #25
 8103236:	009b      	lsls	r3, r3, #2
 8103238:	f003 0304 	and.w	r3, r3, #4
 810323c:	4413      	add	r3, r2
 810323e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8103240:	697b      	ldr	r3, [r7, #20]
 8103242:	681a      	ldr	r2, [r3, #0]
 8103244:	68bb      	ldr	r3, [r7, #8]
 8103246:	0d1b      	lsrs	r3, r3, #20
 8103248:	f003 031f 	and.w	r3, r3, #31
 810324c:	2107      	movs	r1, #7
 810324e:	fa01 f303 	lsl.w	r3, r1, r3
 8103252:	43db      	mvns	r3, r3
 8103254:	401a      	ands	r2, r3
 8103256:	68bb      	ldr	r3, [r7, #8]
 8103258:	0d1b      	lsrs	r3, r3, #20
 810325a:	f003 031f 	and.w	r3, r3, #31
 810325e:	6879      	ldr	r1, [r7, #4]
 8103260:	fa01 f303 	lsl.w	r3, r1, r3
 8103264:	431a      	orrs	r2, r3
 8103266:	697b      	ldr	r3, [r7, #20]
 8103268:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 810326a:	bf00      	nop
 810326c:	371c      	adds	r7, #28
 810326e:	46bd      	mov	sp, r7
 8103270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103274:	4770      	bx	lr
	...

08103278 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8103278:	b480      	push	{r7}
 810327a:	b085      	sub	sp, #20
 810327c:	af00      	add	r7, sp, #0
 810327e:	60f8      	str	r0, [r7, #12]
 8103280:	60b9      	str	r1, [r7, #8]
 8103282:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8103284:	68fb      	ldr	r3, [r7, #12]
 8103286:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 810328a:	68bb      	ldr	r3, [r7, #8]
 810328c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103290:	43db      	mvns	r3, r3
 8103292:	401a      	ands	r2, r3
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	f003 0318 	and.w	r3, r3, #24
 810329a:	4908      	ldr	r1, [pc, #32]	; (81032bc <LL_ADC_SetChannelSingleDiff+0x44>)
 810329c:	40d9      	lsrs	r1, r3
 810329e:	68bb      	ldr	r3, [r7, #8]
 81032a0:	400b      	ands	r3, r1
 81032a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81032a6:	431a      	orrs	r2, r3
 81032a8:	68fb      	ldr	r3, [r7, #12]
 81032aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 81032ae:	bf00      	nop
 81032b0:	3714      	adds	r7, #20
 81032b2:	46bd      	mov	sp, r7
 81032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032b8:	4770      	bx	lr
 81032ba:	bf00      	nop
 81032bc:	000fffff 	.word	0x000fffff

081032c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81032c0:	b480      	push	{r7}
 81032c2:	b083      	sub	sp, #12
 81032c4:	af00      	add	r7, sp, #0
 81032c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 81032c8:	687b      	ldr	r3, [r7, #4]
 81032ca:	689b      	ldr	r3, [r3, #8]
 81032cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 81032d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81032d4:	687a      	ldr	r2, [r7, #4]
 81032d6:	6093      	str	r3, [r2, #8]
}
 81032d8:	bf00      	nop
 81032da:	370c      	adds	r7, #12
 81032dc:	46bd      	mov	sp, r7
 81032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032e2:	4770      	bx	lr

081032e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 81032e4:	b480      	push	{r7}
 81032e6:	b083      	sub	sp, #12
 81032e8:	af00      	add	r7, sp, #0
 81032ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 81032ec:	687b      	ldr	r3, [r7, #4]
 81032ee:	689b      	ldr	r3, [r3, #8]
 81032f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81032f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81032f8:	d101      	bne.n	81032fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 81032fa:	2301      	movs	r3, #1
 81032fc:	e000      	b.n	8103300 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 81032fe:	2300      	movs	r3, #0
}
 8103300:	4618      	mov	r0, r3
 8103302:	370c      	adds	r7, #12
 8103304:	46bd      	mov	sp, r7
 8103306:	f85d 7b04 	ldr.w	r7, [sp], #4
 810330a:	4770      	bx	lr

0810330c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 810330c:	b480      	push	{r7}
 810330e:	b083      	sub	sp, #12
 8103310:	af00      	add	r7, sp, #0
 8103312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8103314:	687b      	ldr	r3, [r7, #4]
 8103316:	689b      	ldr	r3, [r3, #8]
 8103318:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 810331c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8103320:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8103324:	687b      	ldr	r3, [r7, #4]
 8103326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8103328:	bf00      	nop
 810332a:	370c      	adds	r7, #12
 810332c:	46bd      	mov	sp, r7
 810332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103332:	4770      	bx	lr

08103334 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8103334:	b480      	push	{r7}
 8103336:	b083      	sub	sp, #12
 8103338:	af00      	add	r7, sp, #0
 810333a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	689b      	ldr	r3, [r3, #8]
 8103340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103344:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103348:	d101      	bne.n	810334e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 810334a:	2301      	movs	r3, #1
 810334c:	e000      	b.n	8103350 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 810334e:	2300      	movs	r3, #0
}
 8103350:	4618      	mov	r0, r3
 8103352:	370c      	adds	r7, #12
 8103354:	46bd      	mov	sp, r7
 8103356:	f85d 7b04 	ldr.w	r7, [sp], #4
 810335a:	4770      	bx	lr

0810335c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 810335c:	b480      	push	{r7}
 810335e:	b083      	sub	sp, #12
 8103360:	af00      	add	r7, sp, #0
 8103362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	689b      	ldr	r3, [r3, #8]
 8103368:	f003 0301 	and.w	r3, r3, #1
 810336c:	2b01      	cmp	r3, #1
 810336e:	d101      	bne.n	8103374 <LL_ADC_IsEnabled+0x18>
 8103370:	2301      	movs	r3, #1
 8103372:	e000      	b.n	8103376 <LL_ADC_IsEnabled+0x1a>
 8103374:	2300      	movs	r3, #0
}
 8103376:	4618      	mov	r0, r3
 8103378:	370c      	adds	r7, #12
 810337a:	46bd      	mov	sp, r7
 810337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103380:	4770      	bx	lr

08103382 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8103382:	b480      	push	{r7}
 8103384:	b083      	sub	sp, #12
 8103386:	af00      	add	r7, sp, #0
 8103388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	689b      	ldr	r3, [r3, #8]
 810338e:	f003 0304 	and.w	r3, r3, #4
 8103392:	2b04      	cmp	r3, #4
 8103394:	d101      	bne.n	810339a <LL_ADC_REG_IsConversionOngoing+0x18>
 8103396:	2301      	movs	r3, #1
 8103398:	e000      	b.n	810339c <LL_ADC_REG_IsConversionOngoing+0x1a>
 810339a:	2300      	movs	r3, #0
}
 810339c:	4618      	mov	r0, r3
 810339e:	370c      	adds	r7, #12
 81033a0:	46bd      	mov	sp, r7
 81033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033a6:	4770      	bx	lr

081033a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81033a8:	b480      	push	{r7}
 81033aa:	b083      	sub	sp, #12
 81033ac:	af00      	add	r7, sp, #0
 81033ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81033b0:	687b      	ldr	r3, [r7, #4]
 81033b2:	689b      	ldr	r3, [r3, #8]
 81033b4:	f003 0308 	and.w	r3, r3, #8
 81033b8:	2b08      	cmp	r3, #8
 81033ba:	d101      	bne.n	81033c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 81033bc:	2301      	movs	r3, #1
 81033be:	e000      	b.n	81033c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81033c0:	2300      	movs	r3, #0
}
 81033c2:	4618      	mov	r0, r3
 81033c4:	370c      	adds	r7, #12
 81033c6:	46bd      	mov	sp, r7
 81033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033cc:	4770      	bx	lr
	...

081033d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81033d0:	b590      	push	{r4, r7, lr}
 81033d2:	b089      	sub	sp, #36	; 0x24
 81033d4:	af00      	add	r7, sp, #0
 81033d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81033d8:	2300      	movs	r3, #0
 81033da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81033dc:	2300      	movs	r3, #0
 81033de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	2b00      	cmp	r3, #0
 81033e4:	d101      	bne.n	81033ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81033e6:	2301      	movs	r3, #1
 81033e8:	e18f      	b.n	810370a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81033ea:	687b      	ldr	r3, [r7, #4]
 81033ec:	68db      	ldr	r3, [r3, #12]
 81033ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81033f0:	687b      	ldr	r3, [r7, #4]
 81033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033f4:	2b00      	cmp	r3, #0
 81033f6:	d109      	bne.n	810340c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81033f8:	6878      	ldr	r0, [r7, #4]
 81033fa:	f7ff fa4b 	bl	8102894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	2200      	movs	r2, #0
 8103402:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	2200      	movs	r2, #0
 8103408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	681b      	ldr	r3, [r3, #0]
 8103410:	4618      	mov	r0, r3
 8103412:	f7ff ff67 	bl	81032e4 <LL_ADC_IsDeepPowerDownEnabled>
 8103416:	4603      	mov	r3, r0
 8103418:	2b00      	cmp	r3, #0
 810341a:	d004      	beq.n	8103426 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 810341c:	687b      	ldr	r3, [r7, #4]
 810341e:	681b      	ldr	r3, [r3, #0]
 8103420:	4618      	mov	r0, r3
 8103422:	f7ff ff4d 	bl	81032c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8103426:	687b      	ldr	r3, [r7, #4]
 8103428:	681b      	ldr	r3, [r3, #0]
 810342a:	4618      	mov	r0, r3
 810342c:	f7ff ff82 	bl	8103334 <LL_ADC_IsInternalRegulatorEnabled>
 8103430:	4603      	mov	r3, r0
 8103432:	2b00      	cmp	r3, #0
 8103434:	d114      	bne.n	8103460 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	681b      	ldr	r3, [r3, #0]
 810343a:	4618      	mov	r0, r3
 810343c:	f7ff ff66 	bl	810330c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103440:	4b88      	ldr	r3, [pc, #544]	; (8103664 <HAL_ADC_Init+0x294>)
 8103442:	681b      	ldr	r3, [r3, #0]
 8103444:	099b      	lsrs	r3, r3, #6
 8103446:	4a88      	ldr	r2, [pc, #544]	; (8103668 <HAL_ADC_Init+0x298>)
 8103448:	fba2 2303 	umull	r2, r3, r2, r3
 810344c:	099b      	lsrs	r3, r3, #6
 810344e:	3301      	adds	r3, #1
 8103450:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8103452:	e002      	b.n	810345a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8103454:	68bb      	ldr	r3, [r7, #8]
 8103456:	3b01      	subs	r3, #1
 8103458:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810345a:	68bb      	ldr	r3, [r7, #8]
 810345c:	2b00      	cmp	r3, #0
 810345e:	d1f9      	bne.n	8103454 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8103460:	687b      	ldr	r3, [r7, #4]
 8103462:	681b      	ldr	r3, [r3, #0]
 8103464:	4618      	mov	r0, r3
 8103466:	f7ff ff65 	bl	8103334 <LL_ADC_IsInternalRegulatorEnabled>
 810346a:	4603      	mov	r3, r0
 810346c:	2b00      	cmp	r3, #0
 810346e:	d10d      	bne.n	810348c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103474:	f043 0210 	orr.w	r2, r3, #16
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810347c:	687b      	ldr	r3, [r7, #4]
 810347e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103480:	f043 0201 	orr.w	r2, r3, #1
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8103488:	2301      	movs	r3, #1
 810348a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	681b      	ldr	r3, [r3, #0]
 8103490:	4618      	mov	r0, r3
 8103492:	f7ff ff76 	bl	8103382 <LL_ADC_REG_IsConversionOngoing>
 8103496:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103498:	687b      	ldr	r3, [r7, #4]
 810349a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810349c:	f003 0310 	and.w	r3, r3, #16
 81034a0:	2b00      	cmp	r3, #0
 81034a2:	f040 8129 	bne.w	81036f8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81034a6:	697b      	ldr	r3, [r7, #20]
 81034a8:	2b00      	cmp	r3, #0
 81034aa:	f040 8125 	bne.w	81036f8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81034ae:	687b      	ldr	r3, [r7, #4]
 81034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034b2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 81034b6:	f043 0202 	orr.w	r2, r3, #2
 81034ba:	687b      	ldr	r3, [r7, #4]
 81034bc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81034be:	687b      	ldr	r3, [r7, #4]
 81034c0:	681b      	ldr	r3, [r3, #0]
 81034c2:	4618      	mov	r0, r3
 81034c4:	f7ff ff4a 	bl	810335c <LL_ADC_IsEnabled>
 81034c8:	4603      	mov	r3, r0
 81034ca:	2b00      	cmp	r3, #0
 81034cc:	d136      	bne.n	810353c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81034ce:	687b      	ldr	r3, [r7, #4]
 81034d0:	681b      	ldr	r3, [r3, #0]
 81034d2:	4a66      	ldr	r2, [pc, #408]	; (810366c <HAL_ADC_Init+0x29c>)
 81034d4:	4293      	cmp	r3, r2
 81034d6:	d004      	beq.n	81034e2 <HAL_ADC_Init+0x112>
 81034d8:	687b      	ldr	r3, [r7, #4]
 81034da:	681b      	ldr	r3, [r3, #0]
 81034dc:	4a64      	ldr	r2, [pc, #400]	; (8103670 <HAL_ADC_Init+0x2a0>)
 81034de:	4293      	cmp	r3, r2
 81034e0:	d10e      	bne.n	8103500 <HAL_ADC_Init+0x130>
 81034e2:	4862      	ldr	r0, [pc, #392]	; (810366c <HAL_ADC_Init+0x29c>)
 81034e4:	f7ff ff3a 	bl	810335c <LL_ADC_IsEnabled>
 81034e8:	4604      	mov	r4, r0
 81034ea:	4861      	ldr	r0, [pc, #388]	; (8103670 <HAL_ADC_Init+0x2a0>)
 81034ec:	f7ff ff36 	bl	810335c <LL_ADC_IsEnabled>
 81034f0:	4603      	mov	r3, r0
 81034f2:	4323      	orrs	r3, r4
 81034f4:	2b00      	cmp	r3, #0
 81034f6:	bf0c      	ite	eq
 81034f8:	2301      	moveq	r3, #1
 81034fa:	2300      	movne	r3, #0
 81034fc:	b2db      	uxtb	r3, r3
 81034fe:	e008      	b.n	8103512 <HAL_ADC_Init+0x142>
 8103500:	485c      	ldr	r0, [pc, #368]	; (8103674 <HAL_ADC_Init+0x2a4>)
 8103502:	f7ff ff2b 	bl	810335c <LL_ADC_IsEnabled>
 8103506:	4603      	mov	r3, r0
 8103508:	2b00      	cmp	r3, #0
 810350a:	bf0c      	ite	eq
 810350c:	2301      	moveq	r3, #1
 810350e:	2300      	movne	r3, #0
 8103510:	b2db      	uxtb	r3, r3
 8103512:	2b00      	cmp	r3, #0
 8103514:	d012      	beq.n	810353c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8103516:	687b      	ldr	r3, [r7, #4]
 8103518:	681b      	ldr	r3, [r3, #0]
 810351a:	4a54      	ldr	r2, [pc, #336]	; (810366c <HAL_ADC_Init+0x29c>)
 810351c:	4293      	cmp	r3, r2
 810351e:	d004      	beq.n	810352a <HAL_ADC_Init+0x15a>
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	681b      	ldr	r3, [r3, #0]
 8103524:	4a52      	ldr	r2, [pc, #328]	; (8103670 <HAL_ADC_Init+0x2a0>)
 8103526:	4293      	cmp	r3, r2
 8103528:	d101      	bne.n	810352e <HAL_ADC_Init+0x15e>
 810352a:	4a53      	ldr	r2, [pc, #332]	; (8103678 <HAL_ADC_Init+0x2a8>)
 810352c:	e000      	b.n	8103530 <HAL_ADC_Init+0x160>
 810352e:	4a53      	ldr	r2, [pc, #332]	; (810367c <HAL_ADC_Init+0x2ac>)
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	685b      	ldr	r3, [r3, #4]
 8103534:	4619      	mov	r1, r3
 8103536:	4610      	mov	r0, r2
 8103538:	f7ff fdbe 	bl	81030b8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 810353c:	f7ff fdb0 	bl	81030a0 <HAL_GetREVID>
 8103540:	4603      	mov	r3, r0
 8103542:	f241 0203 	movw	r2, #4099	; 0x1003
 8103546:	4293      	cmp	r3, r2
 8103548:	d914      	bls.n	8103574 <HAL_ADC_Init+0x1a4>
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	689b      	ldr	r3, [r3, #8]
 810354e:	2b10      	cmp	r3, #16
 8103550:	d110      	bne.n	8103574 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103552:	687b      	ldr	r3, [r7, #4]
 8103554:	7d5b      	ldrb	r3, [r3, #21]
 8103556:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103558:	687b      	ldr	r3, [r7, #4]
 810355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810355c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8103562:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	7f1b      	ldrb	r3, [r3, #28]
 8103568:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810356a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810356c:	f043 030c 	orr.w	r3, r3, #12
 8103570:	61bb      	str	r3, [r7, #24]
 8103572:	e00d      	b.n	8103590 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	7d5b      	ldrb	r3, [r3, #21]
 8103578:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 810357a:	687b      	ldr	r3, [r7, #4]
 810357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810357e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8103580:	687b      	ldr	r3, [r7, #4]
 8103582:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8103584:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	7f1b      	ldrb	r3, [r3, #28]
 810358a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810358c:	4313      	orrs	r3, r2
 810358e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	7f1b      	ldrb	r3, [r3, #28]
 8103594:	2b01      	cmp	r3, #1
 8103596:	d106      	bne.n	81035a6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8103598:	687b      	ldr	r3, [r7, #4]
 810359a:	6a1b      	ldr	r3, [r3, #32]
 810359c:	3b01      	subs	r3, #1
 810359e:	045b      	lsls	r3, r3, #17
 81035a0:	69ba      	ldr	r2, [r7, #24]
 81035a2:	4313      	orrs	r3, r2
 81035a4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 81035a6:	687b      	ldr	r3, [r7, #4]
 81035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81035aa:	2b00      	cmp	r3, #0
 81035ac:	d009      	beq.n	81035c2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81035b2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81035b6:	687b      	ldr	r3, [r7, #4]
 81035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81035ba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81035bc:	69ba      	ldr	r2, [r7, #24]
 81035be:	4313      	orrs	r3, r2
 81035c0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81035c2:	687b      	ldr	r3, [r7, #4]
 81035c4:	681b      	ldr	r3, [r3, #0]
 81035c6:	68da      	ldr	r2, [r3, #12]
 81035c8:	4b2d      	ldr	r3, [pc, #180]	; (8103680 <HAL_ADC_Init+0x2b0>)
 81035ca:	4013      	ands	r3, r2
 81035cc:	687a      	ldr	r2, [r7, #4]
 81035ce:	6812      	ldr	r2, [r2, #0]
 81035d0:	69b9      	ldr	r1, [r7, #24]
 81035d2:	430b      	orrs	r3, r1
 81035d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	4618      	mov	r0, r3
 81035dc:	f7ff fed1 	bl	8103382 <LL_ADC_REG_IsConversionOngoing>
 81035e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	681b      	ldr	r3, [r3, #0]
 81035e6:	4618      	mov	r0, r3
 81035e8:	f7ff fede 	bl	81033a8 <LL_ADC_INJ_IsConversionOngoing>
 81035ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81035ee:	693b      	ldr	r3, [r7, #16]
 81035f0:	2b00      	cmp	r3, #0
 81035f2:	d15f      	bne.n	81036b4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81035f4:	68fb      	ldr	r3, [r7, #12]
 81035f6:	2b00      	cmp	r3, #0
 81035f8:	d15c      	bne.n	81036b4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81035fa:	687b      	ldr	r3, [r7, #4]
 81035fc:	7d1b      	ldrb	r3, [r3, #20]
 81035fe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8103604:	4313      	orrs	r3, r2
 8103606:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	681b      	ldr	r3, [r3, #0]
 810360c:	68db      	ldr	r3, [r3, #12]
 810360e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8103612:	f023 0303 	bic.w	r3, r3, #3
 8103616:	687a      	ldr	r2, [r7, #4]
 8103618:	6812      	ldr	r2, [r2, #0]
 810361a:	69b9      	ldr	r1, [r7, #24]
 810361c:	430b      	orrs	r3, r1
 810361e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8103626:	2b01      	cmp	r3, #1
 8103628:	d12e      	bne.n	8103688 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810362e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8103630:	687b      	ldr	r3, [r7, #4]
 8103632:	681b      	ldr	r3, [r3, #0]
 8103634:	691a      	ldr	r2, [r3, #16]
 8103636:	4b13      	ldr	r3, [pc, #76]	; (8103684 <HAL_ADC_Init+0x2b4>)
 8103638:	4013      	ands	r3, r2
 810363a:	687a      	ldr	r2, [r7, #4]
 810363c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 810363e:	3a01      	subs	r2, #1
 8103640:	0411      	lsls	r1, r2, #16
 8103642:	687a      	ldr	r2, [r7, #4]
 8103644:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8103646:	4311      	orrs	r1, r2
 8103648:	687a      	ldr	r2, [r7, #4]
 810364a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 810364c:	4311      	orrs	r1, r2
 810364e:	687a      	ldr	r2, [r7, #4]
 8103650:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8103652:	430a      	orrs	r2, r1
 8103654:	431a      	orrs	r2, r3
 8103656:	687b      	ldr	r3, [r7, #4]
 8103658:	681b      	ldr	r3, [r3, #0]
 810365a:	f042 0201 	orr.w	r2, r2, #1
 810365e:	611a      	str	r2, [r3, #16]
 8103660:	e01a      	b.n	8103698 <HAL_ADC_Init+0x2c8>
 8103662:	bf00      	nop
 8103664:	10000000 	.word	0x10000000
 8103668:	053e2d63 	.word	0x053e2d63
 810366c:	40022000 	.word	0x40022000
 8103670:	40022100 	.word	0x40022100
 8103674:	58026000 	.word	0x58026000
 8103678:	40022300 	.word	0x40022300
 810367c:	58026300 	.word	0x58026300
 8103680:	fff0c003 	.word	0xfff0c003
 8103684:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8103688:	687b      	ldr	r3, [r7, #4]
 810368a:	681b      	ldr	r3, [r3, #0]
 810368c:	691a      	ldr	r2, [r3, #16]
 810368e:	687b      	ldr	r3, [r7, #4]
 8103690:	681b      	ldr	r3, [r3, #0]
 8103692:	f022 0201 	bic.w	r2, r2, #1
 8103696:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	691b      	ldr	r3, [r3, #16]
 810369e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81036a6:	687b      	ldr	r3, [r7, #4]
 81036a8:	681b      	ldr	r3, [r3, #0]
 81036aa:	430a      	orrs	r2, r1
 81036ac:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 81036ae:	6878      	ldr	r0, [r7, #4]
 81036b0:	f000 fb80 	bl	8103db4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	68db      	ldr	r3, [r3, #12]
 81036b8:	2b01      	cmp	r3, #1
 81036ba:	d10c      	bne.n	81036d6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81036bc:	687b      	ldr	r3, [r7, #4]
 81036be:	681b      	ldr	r3, [r3, #0]
 81036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81036c2:	f023 010f 	bic.w	r1, r3, #15
 81036c6:	687b      	ldr	r3, [r7, #4]
 81036c8:	699b      	ldr	r3, [r3, #24]
 81036ca:	1e5a      	subs	r2, r3, #1
 81036cc:	687b      	ldr	r3, [r7, #4]
 81036ce:	681b      	ldr	r3, [r3, #0]
 81036d0:	430a      	orrs	r2, r1
 81036d2:	631a      	str	r2, [r3, #48]	; 0x30
 81036d4:	e007      	b.n	81036e6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	681b      	ldr	r3, [r3, #0]
 81036da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81036dc:	687b      	ldr	r3, [r7, #4]
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	f022 020f 	bic.w	r2, r2, #15
 81036e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81036e6:	687b      	ldr	r3, [r7, #4]
 81036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036ea:	f023 0303 	bic.w	r3, r3, #3
 81036ee:	f043 0201 	orr.w	r2, r3, #1
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	655a      	str	r2, [r3, #84]	; 0x54
 81036f6:	e007      	b.n	8103708 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81036f8:	687b      	ldr	r3, [r7, #4]
 81036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036fc:	f043 0210 	orr.w	r2, r3, #16
 8103700:	687b      	ldr	r3, [r7, #4]
 8103702:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103704:	2301      	movs	r3, #1
 8103706:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8103708:	7ffb      	ldrb	r3, [r7, #31]
}
 810370a:	4618      	mov	r0, r3
 810370c:	3724      	adds	r7, #36	; 0x24
 810370e:	46bd      	mov	sp, r7
 8103710:	bd90      	pop	{r4, r7, pc}
 8103712:	bf00      	nop

08103714 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8103714:	b590      	push	{r4, r7, lr}
 8103716:	b0a1      	sub	sp, #132	; 0x84
 8103718:	af00      	add	r7, sp, #0
 810371a:	6078      	str	r0, [r7, #4]
 810371c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810371e:	2300      	movs	r3, #0
 8103720:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8103724:	2300      	movs	r3, #0
 8103726:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8103728:	683b      	ldr	r3, [r7, #0]
 810372a:	68db      	ldr	r3, [r3, #12]
 810372c:	4a9d      	ldr	r2, [pc, #628]	; (81039a4 <HAL_ADC_ConfigChannel+0x290>)
 810372e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103730:	687b      	ldr	r3, [r7, #4]
 8103732:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8103736:	2b01      	cmp	r3, #1
 8103738:	d101      	bne.n	810373e <HAL_ADC_ConfigChannel+0x2a>
 810373a:	2302      	movs	r3, #2
 810373c:	e321      	b.n	8103d82 <HAL_ADC_ConfigChannel+0x66e>
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	2201      	movs	r2, #1
 8103742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103746:	687b      	ldr	r3, [r7, #4]
 8103748:	681b      	ldr	r3, [r3, #0]
 810374a:	4618      	mov	r0, r3
 810374c:	f7ff fe19 	bl	8103382 <LL_ADC_REG_IsConversionOngoing>
 8103750:	4603      	mov	r3, r0
 8103752:	2b00      	cmp	r3, #0
 8103754:	f040 8306 	bne.w	8103d64 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8103758:	683b      	ldr	r3, [r7, #0]
 810375a:	681b      	ldr	r3, [r3, #0]
 810375c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103760:	2b00      	cmp	r3, #0
 8103762:	d108      	bne.n	8103776 <HAL_ADC_ConfigChannel+0x62>
 8103764:	683b      	ldr	r3, [r7, #0]
 8103766:	681b      	ldr	r3, [r3, #0]
 8103768:	0e9b      	lsrs	r3, r3, #26
 810376a:	f003 031f 	and.w	r3, r3, #31
 810376e:	2201      	movs	r2, #1
 8103770:	fa02 f303 	lsl.w	r3, r2, r3
 8103774:	e016      	b.n	81037a4 <HAL_ADC_ConfigChannel+0x90>
 8103776:	683b      	ldr	r3, [r7, #0]
 8103778:	681b      	ldr	r3, [r3, #0]
 810377a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810377c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810377e:	fa93 f3a3 	rbit	r3, r3
 8103782:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8103784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8103786:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8103788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810378a:	2b00      	cmp	r3, #0
 810378c:	d101      	bne.n	8103792 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 810378e:	2320      	movs	r3, #32
 8103790:	e003      	b.n	810379a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8103792:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8103794:	fab3 f383 	clz	r3, r3
 8103798:	b2db      	uxtb	r3, r3
 810379a:	f003 031f 	and.w	r3, r3, #31
 810379e:	2201      	movs	r2, #1
 81037a0:	fa02 f303 	lsl.w	r3, r2, r3
 81037a4:	687a      	ldr	r2, [r7, #4]
 81037a6:	6812      	ldr	r2, [r2, #0]
 81037a8:	69d1      	ldr	r1, [r2, #28]
 81037aa:	687a      	ldr	r2, [r7, #4]
 81037ac:	6812      	ldr	r2, [r2, #0]
 81037ae:	430b      	orrs	r3, r1
 81037b0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81037b2:	687b      	ldr	r3, [r7, #4]
 81037b4:	6818      	ldr	r0, [r3, #0]
 81037b6:	683b      	ldr	r3, [r7, #0]
 81037b8:	6859      	ldr	r1, [r3, #4]
 81037ba:	683b      	ldr	r3, [r7, #0]
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	461a      	mov	r2, r3
 81037c0:	f7ff fd02 	bl	81031c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	681b      	ldr	r3, [r3, #0]
 81037c8:	4618      	mov	r0, r3
 81037ca:	f7ff fdda 	bl	8103382 <LL_ADC_REG_IsConversionOngoing>
 81037ce:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81037d0:	687b      	ldr	r3, [r7, #4]
 81037d2:	681b      	ldr	r3, [r3, #0]
 81037d4:	4618      	mov	r0, r3
 81037d6:	f7ff fde7 	bl	81033a8 <LL_ADC_INJ_IsConversionOngoing>
 81037da:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81037dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81037de:	2b00      	cmp	r3, #0
 81037e0:	f040 80b3 	bne.w	810394a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81037e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81037e6:	2b00      	cmp	r3, #0
 81037e8:	f040 80af 	bne.w	810394a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	6818      	ldr	r0, [r3, #0]
 81037f0:	683b      	ldr	r3, [r7, #0]
 81037f2:	6819      	ldr	r1, [r3, #0]
 81037f4:	683b      	ldr	r3, [r7, #0]
 81037f6:	689b      	ldr	r3, [r3, #8]
 81037f8:	461a      	mov	r2, r3
 81037fa:	f7ff fd11 	bl	8103220 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81037fe:	4b6a      	ldr	r3, [pc, #424]	; (81039a8 <HAL_ADC_ConfigChannel+0x294>)
 8103800:	681b      	ldr	r3, [r3, #0]
 8103802:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8103806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810380a:	d10b      	bne.n	8103824 <HAL_ADC_ConfigChannel+0x110>
 810380c:	683b      	ldr	r3, [r7, #0]
 810380e:	695a      	ldr	r2, [r3, #20]
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	681b      	ldr	r3, [r3, #0]
 8103814:	68db      	ldr	r3, [r3, #12]
 8103816:	089b      	lsrs	r3, r3, #2
 8103818:	f003 0307 	and.w	r3, r3, #7
 810381c:	005b      	lsls	r3, r3, #1
 810381e:	fa02 f303 	lsl.w	r3, r2, r3
 8103822:	e01d      	b.n	8103860 <HAL_ADC_ConfigChannel+0x14c>
 8103824:	687b      	ldr	r3, [r7, #4]
 8103826:	681b      	ldr	r3, [r3, #0]
 8103828:	68db      	ldr	r3, [r3, #12]
 810382a:	f003 0310 	and.w	r3, r3, #16
 810382e:	2b00      	cmp	r3, #0
 8103830:	d10b      	bne.n	810384a <HAL_ADC_ConfigChannel+0x136>
 8103832:	683b      	ldr	r3, [r7, #0]
 8103834:	695a      	ldr	r2, [r3, #20]
 8103836:	687b      	ldr	r3, [r7, #4]
 8103838:	681b      	ldr	r3, [r3, #0]
 810383a:	68db      	ldr	r3, [r3, #12]
 810383c:	089b      	lsrs	r3, r3, #2
 810383e:	f003 0307 	and.w	r3, r3, #7
 8103842:	005b      	lsls	r3, r3, #1
 8103844:	fa02 f303 	lsl.w	r3, r2, r3
 8103848:	e00a      	b.n	8103860 <HAL_ADC_ConfigChannel+0x14c>
 810384a:	683b      	ldr	r3, [r7, #0]
 810384c:	695a      	ldr	r2, [r3, #20]
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	681b      	ldr	r3, [r3, #0]
 8103852:	68db      	ldr	r3, [r3, #12]
 8103854:	089b      	lsrs	r3, r3, #2
 8103856:	f003 0304 	and.w	r3, r3, #4
 810385a:	005b      	lsls	r3, r3, #1
 810385c:	fa02 f303 	lsl.w	r3, r2, r3
 8103860:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8103862:	683b      	ldr	r3, [r7, #0]
 8103864:	691b      	ldr	r3, [r3, #16]
 8103866:	2b04      	cmp	r3, #4
 8103868:	d027      	beq.n	81038ba <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	6818      	ldr	r0, [r3, #0]
 810386e:	683b      	ldr	r3, [r7, #0]
 8103870:	6919      	ldr	r1, [r3, #16]
 8103872:	683b      	ldr	r3, [r7, #0]
 8103874:	681a      	ldr	r2, [r3, #0]
 8103876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8103878:	f7ff fc52 	bl	8103120 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 810387c:	687b      	ldr	r3, [r7, #4]
 810387e:	6818      	ldr	r0, [r3, #0]
 8103880:	683b      	ldr	r3, [r7, #0]
 8103882:	6919      	ldr	r1, [r3, #16]
 8103884:	683b      	ldr	r3, [r7, #0]
 8103886:	7e5b      	ldrb	r3, [r3, #25]
 8103888:	2b01      	cmp	r3, #1
 810388a:	d102      	bne.n	8103892 <HAL_ADC_ConfigChannel+0x17e>
 810388c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8103890:	e000      	b.n	8103894 <HAL_ADC_ConfigChannel+0x180>
 8103892:	2300      	movs	r3, #0
 8103894:	461a      	mov	r2, r3
 8103896:	f7ff fc7c 	bl	8103192 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 810389a:	687b      	ldr	r3, [r7, #4]
 810389c:	6818      	ldr	r0, [r3, #0]
 810389e:	683b      	ldr	r3, [r7, #0]
 81038a0:	6919      	ldr	r1, [r3, #16]
 81038a2:	683b      	ldr	r3, [r7, #0]
 81038a4:	7e1b      	ldrb	r3, [r3, #24]
 81038a6:	2b01      	cmp	r3, #1
 81038a8:	d102      	bne.n	81038b0 <HAL_ADC_ConfigChannel+0x19c>
 81038aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81038ae:	e000      	b.n	81038b2 <HAL_ADC_ConfigChannel+0x19e>
 81038b0:	2300      	movs	r3, #0
 81038b2:	461a      	mov	r2, r3
 81038b4:	f7ff fc54 	bl	8103160 <LL_ADC_SetDataRightShift>
 81038b8:	e047      	b.n	810394a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	681b      	ldr	r3, [r3, #0]
 81038be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81038c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81038c4:	683b      	ldr	r3, [r7, #0]
 81038c6:	681b      	ldr	r3, [r3, #0]
 81038c8:	069b      	lsls	r3, r3, #26
 81038ca:	429a      	cmp	r2, r3
 81038cc:	d107      	bne.n	81038de <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81038ce:	687b      	ldr	r3, [r7, #4]
 81038d0:	681b      	ldr	r3, [r3, #0]
 81038d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 81038d4:	687b      	ldr	r3, [r7, #4]
 81038d6:	681b      	ldr	r3, [r3, #0]
 81038d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81038dc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81038de:	687b      	ldr	r3, [r7, #4]
 81038e0:	681b      	ldr	r3, [r3, #0]
 81038e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81038e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81038e8:	683b      	ldr	r3, [r7, #0]
 81038ea:	681b      	ldr	r3, [r3, #0]
 81038ec:	069b      	lsls	r3, r3, #26
 81038ee:	429a      	cmp	r2, r3
 81038f0:	d107      	bne.n	8103902 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81038f2:	687b      	ldr	r3, [r7, #4]
 81038f4:	681b      	ldr	r3, [r3, #0]
 81038f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	681b      	ldr	r3, [r3, #0]
 81038fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103900:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	681b      	ldr	r3, [r3, #0]
 8103906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103908:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810390c:	683b      	ldr	r3, [r7, #0]
 810390e:	681b      	ldr	r3, [r3, #0]
 8103910:	069b      	lsls	r3, r3, #26
 8103912:	429a      	cmp	r2, r3
 8103914:	d107      	bne.n	8103926 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	681b      	ldr	r3, [r3, #0]
 810391a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	681b      	ldr	r3, [r3, #0]
 8103920:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103924:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103926:	687b      	ldr	r3, [r7, #4]
 8103928:	681b      	ldr	r3, [r3, #0]
 810392a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810392c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103930:	683b      	ldr	r3, [r7, #0]
 8103932:	681b      	ldr	r3, [r3, #0]
 8103934:	069b      	lsls	r3, r3, #26
 8103936:	429a      	cmp	r2, r3
 8103938:	d107      	bne.n	810394a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 810393a:	687b      	ldr	r3, [r7, #4]
 810393c:	681b      	ldr	r3, [r3, #0]
 810393e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8103940:	687b      	ldr	r3, [r7, #4]
 8103942:	681b      	ldr	r3, [r3, #0]
 8103944:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103948:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	681b      	ldr	r3, [r3, #0]
 810394e:	4618      	mov	r0, r3
 8103950:	f7ff fd04 	bl	810335c <LL_ADC_IsEnabled>
 8103954:	4603      	mov	r3, r0
 8103956:	2b00      	cmp	r3, #0
 8103958:	f040 820d 	bne.w	8103d76 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	6818      	ldr	r0, [r3, #0]
 8103960:	683b      	ldr	r3, [r7, #0]
 8103962:	6819      	ldr	r1, [r3, #0]
 8103964:	683b      	ldr	r3, [r7, #0]
 8103966:	68db      	ldr	r3, [r3, #12]
 8103968:	461a      	mov	r2, r3
 810396a:	f7ff fc85 	bl	8103278 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 810396e:	683b      	ldr	r3, [r7, #0]
 8103970:	68db      	ldr	r3, [r3, #12]
 8103972:	4a0c      	ldr	r2, [pc, #48]	; (81039a4 <HAL_ADC_ConfigChannel+0x290>)
 8103974:	4293      	cmp	r3, r2
 8103976:	f040 8133 	bne.w	8103be0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810397a:	687b      	ldr	r3, [r7, #4]
 810397c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810397e:	683b      	ldr	r3, [r7, #0]
 8103980:	681b      	ldr	r3, [r3, #0]
 8103982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103986:	2b00      	cmp	r3, #0
 8103988:	d110      	bne.n	81039ac <HAL_ADC_ConfigChannel+0x298>
 810398a:	683b      	ldr	r3, [r7, #0]
 810398c:	681b      	ldr	r3, [r3, #0]
 810398e:	0e9b      	lsrs	r3, r3, #26
 8103990:	3301      	adds	r3, #1
 8103992:	f003 031f 	and.w	r3, r3, #31
 8103996:	2b09      	cmp	r3, #9
 8103998:	bf94      	ite	ls
 810399a:	2301      	movls	r3, #1
 810399c:	2300      	movhi	r3, #0
 810399e:	b2db      	uxtb	r3, r3
 81039a0:	e01e      	b.n	81039e0 <HAL_ADC_ConfigChannel+0x2cc>
 81039a2:	bf00      	nop
 81039a4:	47ff0000 	.word	0x47ff0000
 81039a8:	5c001000 	.word	0x5c001000
 81039ac:	683b      	ldr	r3, [r7, #0]
 81039ae:	681b      	ldr	r3, [r3, #0]
 81039b0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81039b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81039b4:	fa93 f3a3 	rbit	r3, r3
 81039b8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 81039ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81039bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 81039be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81039c0:	2b00      	cmp	r3, #0
 81039c2:	d101      	bne.n	81039c8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 81039c4:	2320      	movs	r3, #32
 81039c6:	e003      	b.n	81039d0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 81039c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81039ca:	fab3 f383 	clz	r3, r3
 81039ce:	b2db      	uxtb	r3, r3
 81039d0:	3301      	adds	r3, #1
 81039d2:	f003 031f 	and.w	r3, r3, #31
 81039d6:	2b09      	cmp	r3, #9
 81039d8:	bf94      	ite	ls
 81039da:	2301      	movls	r3, #1
 81039dc:	2300      	movhi	r3, #0
 81039de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81039e0:	2b00      	cmp	r3, #0
 81039e2:	d079      	beq.n	8103ad8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81039e4:	683b      	ldr	r3, [r7, #0]
 81039e6:	681b      	ldr	r3, [r3, #0]
 81039e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81039ec:	2b00      	cmp	r3, #0
 81039ee:	d107      	bne.n	8103a00 <HAL_ADC_ConfigChannel+0x2ec>
 81039f0:	683b      	ldr	r3, [r7, #0]
 81039f2:	681b      	ldr	r3, [r3, #0]
 81039f4:	0e9b      	lsrs	r3, r3, #26
 81039f6:	3301      	adds	r3, #1
 81039f8:	069b      	lsls	r3, r3, #26
 81039fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81039fe:	e015      	b.n	8103a2c <HAL_ADC_ConfigChannel+0x318>
 8103a00:	683b      	ldr	r3, [r7, #0]
 8103a02:	681b      	ldr	r3, [r3, #0]
 8103a04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103a08:	fa93 f3a3 	rbit	r3, r3
 8103a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8103a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103a10:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8103a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103a14:	2b00      	cmp	r3, #0
 8103a16:	d101      	bne.n	8103a1c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8103a18:	2320      	movs	r3, #32
 8103a1a:	e003      	b.n	8103a24 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8103a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103a1e:	fab3 f383 	clz	r3, r3
 8103a22:	b2db      	uxtb	r3, r3
 8103a24:	3301      	adds	r3, #1
 8103a26:	069b      	lsls	r3, r3, #26
 8103a28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103a2c:	683b      	ldr	r3, [r7, #0]
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a34:	2b00      	cmp	r3, #0
 8103a36:	d109      	bne.n	8103a4c <HAL_ADC_ConfigChannel+0x338>
 8103a38:	683b      	ldr	r3, [r7, #0]
 8103a3a:	681b      	ldr	r3, [r3, #0]
 8103a3c:	0e9b      	lsrs	r3, r3, #26
 8103a3e:	3301      	adds	r3, #1
 8103a40:	f003 031f 	and.w	r3, r3, #31
 8103a44:	2101      	movs	r1, #1
 8103a46:	fa01 f303 	lsl.w	r3, r1, r3
 8103a4a:	e017      	b.n	8103a7c <HAL_ADC_ConfigChannel+0x368>
 8103a4c:	683b      	ldr	r3, [r7, #0]
 8103a4e:	681b      	ldr	r3, [r3, #0]
 8103a50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103a54:	fa93 f3a3 	rbit	r3, r3
 8103a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8103a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103a5c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8103a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103a60:	2b00      	cmp	r3, #0
 8103a62:	d101      	bne.n	8103a68 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8103a64:	2320      	movs	r3, #32
 8103a66:	e003      	b.n	8103a70 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8103a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103a6a:	fab3 f383 	clz	r3, r3
 8103a6e:	b2db      	uxtb	r3, r3
 8103a70:	3301      	adds	r3, #1
 8103a72:	f003 031f 	and.w	r3, r3, #31
 8103a76:	2101      	movs	r1, #1
 8103a78:	fa01 f303 	lsl.w	r3, r1, r3
 8103a7c:	ea42 0103 	orr.w	r1, r2, r3
 8103a80:	683b      	ldr	r3, [r7, #0]
 8103a82:	681b      	ldr	r3, [r3, #0]
 8103a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103a88:	2b00      	cmp	r3, #0
 8103a8a:	d10a      	bne.n	8103aa2 <HAL_ADC_ConfigChannel+0x38e>
 8103a8c:	683b      	ldr	r3, [r7, #0]
 8103a8e:	681b      	ldr	r3, [r3, #0]
 8103a90:	0e9b      	lsrs	r3, r3, #26
 8103a92:	3301      	adds	r3, #1
 8103a94:	f003 021f 	and.w	r2, r3, #31
 8103a98:	4613      	mov	r3, r2
 8103a9a:	005b      	lsls	r3, r3, #1
 8103a9c:	4413      	add	r3, r2
 8103a9e:	051b      	lsls	r3, r3, #20
 8103aa0:	e018      	b.n	8103ad4 <HAL_ADC_ConfigChannel+0x3c0>
 8103aa2:	683b      	ldr	r3, [r7, #0]
 8103aa4:	681b      	ldr	r3, [r3, #0]
 8103aa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103aaa:	fa93 f3a3 	rbit	r3, r3
 8103aae:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8103ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8103ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103ab6:	2b00      	cmp	r3, #0
 8103ab8:	d101      	bne.n	8103abe <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8103aba:	2320      	movs	r3, #32
 8103abc:	e003      	b.n	8103ac6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8103abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103ac0:	fab3 f383 	clz	r3, r3
 8103ac4:	b2db      	uxtb	r3, r3
 8103ac6:	3301      	adds	r3, #1
 8103ac8:	f003 021f 	and.w	r2, r3, #31
 8103acc:	4613      	mov	r3, r2
 8103ace:	005b      	lsls	r3, r3, #1
 8103ad0:	4413      	add	r3, r2
 8103ad2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103ad4:	430b      	orrs	r3, r1
 8103ad6:	e07e      	b.n	8103bd6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103ad8:	683b      	ldr	r3, [r7, #0]
 8103ada:	681b      	ldr	r3, [r3, #0]
 8103adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103ae0:	2b00      	cmp	r3, #0
 8103ae2:	d107      	bne.n	8103af4 <HAL_ADC_ConfigChannel+0x3e0>
 8103ae4:	683b      	ldr	r3, [r7, #0]
 8103ae6:	681b      	ldr	r3, [r3, #0]
 8103ae8:	0e9b      	lsrs	r3, r3, #26
 8103aea:	3301      	adds	r3, #1
 8103aec:	069b      	lsls	r3, r3, #26
 8103aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103af2:	e015      	b.n	8103b20 <HAL_ADC_ConfigChannel+0x40c>
 8103af4:	683b      	ldr	r3, [r7, #0]
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103afc:	fa93 f3a3 	rbit	r3, r3
 8103b00:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8103b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8103b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103b08:	2b00      	cmp	r3, #0
 8103b0a:	d101      	bne.n	8103b10 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8103b0c:	2320      	movs	r3, #32
 8103b0e:	e003      	b.n	8103b18 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8103b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103b12:	fab3 f383 	clz	r3, r3
 8103b16:	b2db      	uxtb	r3, r3
 8103b18:	3301      	adds	r3, #1
 8103b1a:	069b      	lsls	r3, r3, #26
 8103b1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103b20:	683b      	ldr	r3, [r7, #0]
 8103b22:	681b      	ldr	r3, [r3, #0]
 8103b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103b28:	2b00      	cmp	r3, #0
 8103b2a:	d109      	bne.n	8103b40 <HAL_ADC_ConfigChannel+0x42c>
 8103b2c:	683b      	ldr	r3, [r7, #0]
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	0e9b      	lsrs	r3, r3, #26
 8103b32:	3301      	adds	r3, #1
 8103b34:	f003 031f 	and.w	r3, r3, #31
 8103b38:	2101      	movs	r1, #1
 8103b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8103b3e:	e017      	b.n	8103b70 <HAL_ADC_ConfigChannel+0x45c>
 8103b40:	683b      	ldr	r3, [r7, #0]
 8103b42:	681b      	ldr	r3, [r3, #0]
 8103b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103b46:	69fb      	ldr	r3, [r7, #28]
 8103b48:	fa93 f3a3 	rbit	r3, r3
 8103b4c:	61bb      	str	r3, [r7, #24]
  return result;
 8103b4e:	69bb      	ldr	r3, [r7, #24]
 8103b50:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8103b52:	6a3b      	ldr	r3, [r7, #32]
 8103b54:	2b00      	cmp	r3, #0
 8103b56:	d101      	bne.n	8103b5c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8103b58:	2320      	movs	r3, #32
 8103b5a:	e003      	b.n	8103b64 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8103b5c:	6a3b      	ldr	r3, [r7, #32]
 8103b5e:	fab3 f383 	clz	r3, r3
 8103b62:	b2db      	uxtb	r3, r3
 8103b64:	3301      	adds	r3, #1
 8103b66:	f003 031f 	and.w	r3, r3, #31
 8103b6a:	2101      	movs	r1, #1
 8103b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8103b70:	ea42 0103 	orr.w	r1, r2, r3
 8103b74:	683b      	ldr	r3, [r7, #0]
 8103b76:	681b      	ldr	r3, [r3, #0]
 8103b78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103b7c:	2b00      	cmp	r3, #0
 8103b7e:	d10d      	bne.n	8103b9c <HAL_ADC_ConfigChannel+0x488>
 8103b80:	683b      	ldr	r3, [r7, #0]
 8103b82:	681b      	ldr	r3, [r3, #0]
 8103b84:	0e9b      	lsrs	r3, r3, #26
 8103b86:	3301      	adds	r3, #1
 8103b88:	f003 021f 	and.w	r2, r3, #31
 8103b8c:	4613      	mov	r3, r2
 8103b8e:	005b      	lsls	r3, r3, #1
 8103b90:	4413      	add	r3, r2
 8103b92:	3b1e      	subs	r3, #30
 8103b94:	051b      	lsls	r3, r3, #20
 8103b96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103b9a:	e01b      	b.n	8103bd4 <HAL_ADC_ConfigChannel+0x4c0>
 8103b9c:	683b      	ldr	r3, [r7, #0]
 8103b9e:	681b      	ldr	r3, [r3, #0]
 8103ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103ba2:	693b      	ldr	r3, [r7, #16]
 8103ba4:	fa93 f3a3 	rbit	r3, r3
 8103ba8:	60fb      	str	r3, [r7, #12]
  return result;
 8103baa:	68fb      	ldr	r3, [r7, #12]
 8103bac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8103bae:	697b      	ldr	r3, [r7, #20]
 8103bb0:	2b00      	cmp	r3, #0
 8103bb2:	d101      	bne.n	8103bb8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8103bb4:	2320      	movs	r3, #32
 8103bb6:	e003      	b.n	8103bc0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8103bb8:	697b      	ldr	r3, [r7, #20]
 8103bba:	fab3 f383 	clz	r3, r3
 8103bbe:	b2db      	uxtb	r3, r3
 8103bc0:	3301      	adds	r3, #1
 8103bc2:	f003 021f 	and.w	r2, r3, #31
 8103bc6:	4613      	mov	r3, r2
 8103bc8:	005b      	lsls	r3, r3, #1
 8103bca:	4413      	add	r3, r2
 8103bcc:	3b1e      	subs	r3, #30
 8103bce:	051b      	lsls	r3, r3, #20
 8103bd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103bd4:	430b      	orrs	r3, r1
 8103bd6:	683a      	ldr	r2, [r7, #0]
 8103bd8:	6892      	ldr	r2, [r2, #8]
 8103bda:	4619      	mov	r1, r3
 8103bdc:	f7ff fb20 	bl	8103220 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103be0:	683b      	ldr	r3, [r7, #0]
 8103be2:	681b      	ldr	r3, [r3, #0]
 8103be4:	2b00      	cmp	r3, #0
 8103be6:	f280 80c6 	bge.w	8103d76 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103bea:	687b      	ldr	r3, [r7, #4]
 8103bec:	681b      	ldr	r3, [r3, #0]
 8103bee:	4a67      	ldr	r2, [pc, #412]	; (8103d8c <HAL_ADC_ConfigChannel+0x678>)
 8103bf0:	4293      	cmp	r3, r2
 8103bf2:	d004      	beq.n	8103bfe <HAL_ADC_ConfigChannel+0x4ea>
 8103bf4:	687b      	ldr	r3, [r7, #4]
 8103bf6:	681b      	ldr	r3, [r3, #0]
 8103bf8:	4a65      	ldr	r2, [pc, #404]	; (8103d90 <HAL_ADC_ConfigChannel+0x67c>)
 8103bfa:	4293      	cmp	r3, r2
 8103bfc:	d101      	bne.n	8103c02 <HAL_ADC_ConfigChannel+0x4ee>
 8103bfe:	4b65      	ldr	r3, [pc, #404]	; (8103d94 <HAL_ADC_ConfigChannel+0x680>)
 8103c00:	e000      	b.n	8103c04 <HAL_ADC_ConfigChannel+0x4f0>
 8103c02:	4b65      	ldr	r3, [pc, #404]	; (8103d98 <HAL_ADC_ConfigChannel+0x684>)
 8103c04:	4618      	mov	r0, r3
 8103c06:	f7ff fa7d 	bl	8103104 <LL_ADC_GetCommonPathInternalCh>
 8103c0a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103c0c:	687b      	ldr	r3, [r7, #4]
 8103c0e:	681b      	ldr	r3, [r3, #0]
 8103c10:	4a5e      	ldr	r2, [pc, #376]	; (8103d8c <HAL_ADC_ConfigChannel+0x678>)
 8103c12:	4293      	cmp	r3, r2
 8103c14:	d004      	beq.n	8103c20 <HAL_ADC_ConfigChannel+0x50c>
 8103c16:	687b      	ldr	r3, [r7, #4]
 8103c18:	681b      	ldr	r3, [r3, #0]
 8103c1a:	4a5d      	ldr	r2, [pc, #372]	; (8103d90 <HAL_ADC_ConfigChannel+0x67c>)
 8103c1c:	4293      	cmp	r3, r2
 8103c1e:	d10e      	bne.n	8103c3e <HAL_ADC_ConfigChannel+0x52a>
 8103c20:	485a      	ldr	r0, [pc, #360]	; (8103d8c <HAL_ADC_ConfigChannel+0x678>)
 8103c22:	f7ff fb9b 	bl	810335c <LL_ADC_IsEnabled>
 8103c26:	4604      	mov	r4, r0
 8103c28:	4859      	ldr	r0, [pc, #356]	; (8103d90 <HAL_ADC_ConfigChannel+0x67c>)
 8103c2a:	f7ff fb97 	bl	810335c <LL_ADC_IsEnabled>
 8103c2e:	4603      	mov	r3, r0
 8103c30:	4323      	orrs	r3, r4
 8103c32:	2b00      	cmp	r3, #0
 8103c34:	bf0c      	ite	eq
 8103c36:	2301      	moveq	r3, #1
 8103c38:	2300      	movne	r3, #0
 8103c3a:	b2db      	uxtb	r3, r3
 8103c3c:	e008      	b.n	8103c50 <HAL_ADC_ConfigChannel+0x53c>
 8103c3e:	4857      	ldr	r0, [pc, #348]	; (8103d9c <HAL_ADC_ConfigChannel+0x688>)
 8103c40:	f7ff fb8c 	bl	810335c <LL_ADC_IsEnabled>
 8103c44:	4603      	mov	r3, r0
 8103c46:	2b00      	cmp	r3, #0
 8103c48:	bf0c      	ite	eq
 8103c4a:	2301      	moveq	r3, #1
 8103c4c:	2300      	movne	r3, #0
 8103c4e:	b2db      	uxtb	r3, r3
 8103c50:	2b00      	cmp	r3, #0
 8103c52:	d07d      	beq.n	8103d50 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103c54:	683b      	ldr	r3, [r7, #0]
 8103c56:	681b      	ldr	r3, [r3, #0]
 8103c58:	4a51      	ldr	r2, [pc, #324]	; (8103da0 <HAL_ADC_ConfigChannel+0x68c>)
 8103c5a:	4293      	cmp	r3, r2
 8103c5c:	d130      	bne.n	8103cc0 <HAL_ADC_ConfigChannel+0x5ac>
 8103c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103c64:	2b00      	cmp	r3, #0
 8103c66:	d12b      	bne.n	8103cc0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	681b      	ldr	r3, [r3, #0]
 8103c6c:	4a4b      	ldr	r2, [pc, #300]	; (8103d9c <HAL_ADC_ConfigChannel+0x688>)
 8103c6e:	4293      	cmp	r3, r2
 8103c70:	f040 8081 	bne.w	8103d76 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8103c74:	687b      	ldr	r3, [r7, #4]
 8103c76:	681b      	ldr	r3, [r3, #0]
 8103c78:	4a44      	ldr	r2, [pc, #272]	; (8103d8c <HAL_ADC_ConfigChannel+0x678>)
 8103c7a:	4293      	cmp	r3, r2
 8103c7c:	d004      	beq.n	8103c88 <HAL_ADC_ConfigChannel+0x574>
 8103c7e:	687b      	ldr	r3, [r7, #4]
 8103c80:	681b      	ldr	r3, [r3, #0]
 8103c82:	4a43      	ldr	r2, [pc, #268]	; (8103d90 <HAL_ADC_ConfigChannel+0x67c>)
 8103c84:	4293      	cmp	r3, r2
 8103c86:	d101      	bne.n	8103c8c <HAL_ADC_ConfigChannel+0x578>
 8103c88:	4a42      	ldr	r2, [pc, #264]	; (8103d94 <HAL_ADC_ConfigChannel+0x680>)
 8103c8a:	e000      	b.n	8103c8e <HAL_ADC_ConfigChannel+0x57a>
 8103c8c:	4a42      	ldr	r2, [pc, #264]	; (8103d98 <HAL_ADC_ConfigChannel+0x684>)
 8103c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103c94:	4619      	mov	r1, r3
 8103c96:	4610      	mov	r0, r2
 8103c98:	f7ff fa21 	bl	81030de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103c9c:	4b41      	ldr	r3, [pc, #260]	; (8103da4 <HAL_ADC_ConfigChannel+0x690>)
 8103c9e:	681b      	ldr	r3, [r3, #0]
 8103ca0:	099b      	lsrs	r3, r3, #6
 8103ca2:	4a41      	ldr	r2, [pc, #260]	; (8103da8 <HAL_ADC_ConfigChannel+0x694>)
 8103ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8103ca8:	099b      	lsrs	r3, r3, #6
 8103caa:	3301      	adds	r3, #1
 8103cac:	005b      	lsls	r3, r3, #1
 8103cae:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103cb0:	e002      	b.n	8103cb8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8103cb2:	68bb      	ldr	r3, [r7, #8]
 8103cb4:	3b01      	subs	r3, #1
 8103cb6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103cb8:	68bb      	ldr	r3, [r7, #8]
 8103cba:	2b00      	cmp	r3, #0
 8103cbc:	d1f9      	bne.n	8103cb2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103cbe:	e05a      	b.n	8103d76 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103cc0:	683b      	ldr	r3, [r7, #0]
 8103cc2:	681b      	ldr	r3, [r3, #0]
 8103cc4:	4a39      	ldr	r2, [pc, #228]	; (8103dac <HAL_ADC_ConfigChannel+0x698>)
 8103cc6:	4293      	cmp	r3, r2
 8103cc8:	d11e      	bne.n	8103d08 <HAL_ADC_ConfigChannel+0x5f4>
 8103cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103cd0:	2b00      	cmp	r3, #0
 8103cd2:	d119      	bne.n	8103d08 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	681b      	ldr	r3, [r3, #0]
 8103cd8:	4a30      	ldr	r2, [pc, #192]	; (8103d9c <HAL_ADC_ConfigChannel+0x688>)
 8103cda:	4293      	cmp	r3, r2
 8103cdc:	d14b      	bne.n	8103d76 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	681b      	ldr	r3, [r3, #0]
 8103ce2:	4a2a      	ldr	r2, [pc, #168]	; (8103d8c <HAL_ADC_ConfigChannel+0x678>)
 8103ce4:	4293      	cmp	r3, r2
 8103ce6:	d004      	beq.n	8103cf2 <HAL_ADC_ConfigChannel+0x5de>
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	681b      	ldr	r3, [r3, #0]
 8103cec:	4a28      	ldr	r2, [pc, #160]	; (8103d90 <HAL_ADC_ConfigChannel+0x67c>)
 8103cee:	4293      	cmp	r3, r2
 8103cf0:	d101      	bne.n	8103cf6 <HAL_ADC_ConfigChannel+0x5e2>
 8103cf2:	4a28      	ldr	r2, [pc, #160]	; (8103d94 <HAL_ADC_ConfigChannel+0x680>)
 8103cf4:	e000      	b.n	8103cf8 <HAL_ADC_ConfigChannel+0x5e4>
 8103cf6:	4a28      	ldr	r2, [pc, #160]	; (8103d98 <HAL_ADC_ConfigChannel+0x684>)
 8103cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103cfe:	4619      	mov	r1, r3
 8103d00:	4610      	mov	r0, r2
 8103d02:	f7ff f9ec 	bl	81030de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103d06:	e036      	b.n	8103d76 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103d08:	683b      	ldr	r3, [r7, #0]
 8103d0a:	681b      	ldr	r3, [r3, #0]
 8103d0c:	4a28      	ldr	r2, [pc, #160]	; (8103db0 <HAL_ADC_ConfigChannel+0x69c>)
 8103d0e:	4293      	cmp	r3, r2
 8103d10:	d131      	bne.n	8103d76 <HAL_ADC_ConfigChannel+0x662>
 8103d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103d18:	2b00      	cmp	r3, #0
 8103d1a:	d12c      	bne.n	8103d76 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103d1c:	687b      	ldr	r3, [r7, #4]
 8103d1e:	681b      	ldr	r3, [r3, #0]
 8103d20:	4a1e      	ldr	r2, [pc, #120]	; (8103d9c <HAL_ADC_ConfigChannel+0x688>)
 8103d22:	4293      	cmp	r3, r2
 8103d24:	d127      	bne.n	8103d76 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8103d26:	687b      	ldr	r3, [r7, #4]
 8103d28:	681b      	ldr	r3, [r3, #0]
 8103d2a:	4a18      	ldr	r2, [pc, #96]	; (8103d8c <HAL_ADC_ConfigChannel+0x678>)
 8103d2c:	4293      	cmp	r3, r2
 8103d2e:	d004      	beq.n	8103d3a <HAL_ADC_ConfigChannel+0x626>
 8103d30:	687b      	ldr	r3, [r7, #4]
 8103d32:	681b      	ldr	r3, [r3, #0]
 8103d34:	4a16      	ldr	r2, [pc, #88]	; (8103d90 <HAL_ADC_ConfigChannel+0x67c>)
 8103d36:	4293      	cmp	r3, r2
 8103d38:	d101      	bne.n	8103d3e <HAL_ADC_ConfigChannel+0x62a>
 8103d3a:	4a16      	ldr	r2, [pc, #88]	; (8103d94 <HAL_ADC_ConfigChannel+0x680>)
 8103d3c:	e000      	b.n	8103d40 <HAL_ADC_ConfigChannel+0x62c>
 8103d3e:	4a16      	ldr	r2, [pc, #88]	; (8103d98 <HAL_ADC_ConfigChannel+0x684>)
 8103d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103d42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103d46:	4619      	mov	r1, r3
 8103d48:	4610      	mov	r0, r2
 8103d4a:	f7ff f9c8 	bl	81030de <LL_ADC_SetCommonPathInternalCh>
 8103d4e:	e012      	b.n	8103d76 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d54:	f043 0220 	orr.w	r2, r3, #32
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8103d5c:	2301      	movs	r3, #1
 8103d5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8103d62:	e008      	b.n	8103d76 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103d64:	687b      	ldr	r3, [r7, #4]
 8103d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d68:	f043 0220 	orr.w	r2, r3, #32
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103d70:	2301      	movs	r3, #1
 8103d72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	2200      	movs	r2, #0
 8103d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103d7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8103d82:	4618      	mov	r0, r3
 8103d84:	3784      	adds	r7, #132	; 0x84
 8103d86:	46bd      	mov	sp, r7
 8103d88:	bd90      	pop	{r4, r7, pc}
 8103d8a:	bf00      	nop
 8103d8c:	40022000 	.word	0x40022000
 8103d90:	40022100 	.word	0x40022100
 8103d94:	40022300 	.word	0x40022300
 8103d98:	58026300 	.word	0x58026300
 8103d9c:	58026000 	.word	0x58026000
 8103da0:	cb840000 	.word	0xcb840000
 8103da4:	10000000 	.word	0x10000000
 8103da8:	053e2d63 	.word	0x053e2d63
 8103dac:	c7520000 	.word	0xc7520000
 8103db0:	cfb80000 	.word	0xcfb80000

08103db4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103db4:	b580      	push	{r7, lr}
 8103db6:	b084      	sub	sp, #16
 8103db8:	af00      	add	r7, sp, #0
 8103dba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	681b      	ldr	r3, [r3, #0]
 8103dc0:	4a7a      	ldr	r2, [pc, #488]	; (8103fac <ADC_ConfigureBoostMode+0x1f8>)
 8103dc2:	4293      	cmp	r3, r2
 8103dc4:	d004      	beq.n	8103dd0 <ADC_ConfigureBoostMode+0x1c>
 8103dc6:	687b      	ldr	r3, [r7, #4]
 8103dc8:	681b      	ldr	r3, [r3, #0]
 8103dca:	4a79      	ldr	r2, [pc, #484]	; (8103fb0 <ADC_ConfigureBoostMode+0x1fc>)
 8103dcc:	4293      	cmp	r3, r2
 8103dce:	d109      	bne.n	8103de4 <ADC_ConfigureBoostMode+0x30>
 8103dd0:	4b78      	ldr	r3, [pc, #480]	; (8103fb4 <ADC_ConfigureBoostMode+0x200>)
 8103dd2:	689b      	ldr	r3, [r3, #8]
 8103dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103dd8:	2b00      	cmp	r3, #0
 8103dda:	bf14      	ite	ne
 8103ddc:	2301      	movne	r3, #1
 8103dde:	2300      	moveq	r3, #0
 8103de0:	b2db      	uxtb	r3, r3
 8103de2:	e008      	b.n	8103df6 <ADC_ConfigureBoostMode+0x42>
 8103de4:	4b74      	ldr	r3, [pc, #464]	; (8103fb8 <ADC_ConfigureBoostMode+0x204>)
 8103de6:	689b      	ldr	r3, [r3, #8]
 8103de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103dec:	2b00      	cmp	r3, #0
 8103dee:	bf14      	ite	ne
 8103df0:	2301      	movne	r3, #1
 8103df2:	2300      	moveq	r3, #0
 8103df4:	b2db      	uxtb	r3, r3
 8103df6:	2b00      	cmp	r3, #0
 8103df8:	d01c      	beq.n	8103e34 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103dfa:	f001 fdcf 	bl	810599c <HAL_RCC_GetHCLKFreq>
 8103dfe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103e00:	687b      	ldr	r3, [r7, #4]
 8103e02:	685b      	ldr	r3, [r3, #4]
 8103e04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103e08:	d010      	beq.n	8103e2c <ADC_ConfigureBoostMode+0x78>
 8103e0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103e0e:	d873      	bhi.n	8103ef8 <ADC_ConfigureBoostMode+0x144>
 8103e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103e14:	d002      	beq.n	8103e1c <ADC_ConfigureBoostMode+0x68>
 8103e16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e1a:	d16d      	bne.n	8103ef8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	685b      	ldr	r3, [r3, #4]
 8103e20:	0c1b      	lsrs	r3, r3, #16
 8103e22:	68fa      	ldr	r2, [r7, #12]
 8103e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8103e28:	60fb      	str	r3, [r7, #12]
        break;
 8103e2a:	e068      	b.n	8103efe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103e2c:	68fb      	ldr	r3, [r7, #12]
 8103e2e:	089b      	lsrs	r3, r3, #2
 8103e30:	60fb      	str	r3, [r7, #12]
        break;
 8103e32:	e064      	b.n	8103efe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103e34:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8103e38:	f04f 0100 	mov.w	r1, #0
 8103e3c:	f003 f816 	bl	8106e6c <HAL_RCCEx_GetPeriphCLKFreq>
 8103e40:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	685b      	ldr	r3, [r3, #4]
 8103e46:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103e4a:	d051      	beq.n	8103ef0 <ADC_ConfigureBoostMode+0x13c>
 8103e4c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103e50:	d854      	bhi.n	8103efc <ADC_ConfigureBoostMode+0x148>
 8103e52:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103e56:	d047      	beq.n	8103ee8 <ADC_ConfigureBoostMode+0x134>
 8103e58:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103e5c:	d84e      	bhi.n	8103efc <ADC_ConfigureBoostMode+0x148>
 8103e5e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103e62:	d03d      	beq.n	8103ee0 <ADC_ConfigureBoostMode+0x12c>
 8103e64:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103e68:	d848      	bhi.n	8103efc <ADC_ConfigureBoostMode+0x148>
 8103e6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103e6e:	d033      	beq.n	8103ed8 <ADC_ConfigureBoostMode+0x124>
 8103e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103e74:	d842      	bhi.n	8103efc <ADC_ConfigureBoostMode+0x148>
 8103e76:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103e7a:	d029      	beq.n	8103ed0 <ADC_ConfigureBoostMode+0x11c>
 8103e7c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103e80:	d83c      	bhi.n	8103efc <ADC_ConfigureBoostMode+0x148>
 8103e82:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103e86:	d01a      	beq.n	8103ebe <ADC_ConfigureBoostMode+0x10a>
 8103e88:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103e8c:	d836      	bhi.n	8103efc <ADC_ConfigureBoostMode+0x148>
 8103e8e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103e92:	d014      	beq.n	8103ebe <ADC_ConfigureBoostMode+0x10a>
 8103e94:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103e98:	d830      	bhi.n	8103efc <ADC_ConfigureBoostMode+0x148>
 8103e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103e9e:	d00e      	beq.n	8103ebe <ADC_ConfigureBoostMode+0x10a>
 8103ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103ea4:	d82a      	bhi.n	8103efc <ADC_ConfigureBoostMode+0x148>
 8103ea6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103eaa:	d008      	beq.n	8103ebe <ADC_ConfigureBoostMode+0x10a>
 8103eac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103eb0:	d824      	bhi.n	8103efc <ADC_ConfigureBoostMode+0x148>
 8103eb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103eb6:	d002      	beq.n	8103ebe <ADC_ConfigureBoostMode+0x10a>
 8103eb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8103ebc:	d11e      	bne.n	8103efc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103ebe:	687b      	ldr	r3, [r7, #4]
 8103ec0:	685b      	ldr	r3, [r3, #4]
 8103ec2:	0c9b      	lsrs	r3, r3, #18
 8103ec4:	005b      	lsls	r3, r3, #1
 8103ec6:	68fa      	ldr	r2, [r7, #12]
 8103ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8103ecc:	60fb      	str	r3, [r7, #12]
        break;
 8103ece:	e016      	b.n	8103efe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103ed0:	68fb      	ldr	r3, [r7, #12]
 8103ed2:	091b      	lsrs	r3, r3, #4
 8103ed4:	60fb      	str	r3, [r7, #12]
        break;
 8103ed6:	e012      	b.n	8103efe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103ed8:	68fb      	ldr	r3, [r7, #12]
 8103eda:	095b      	lsrs	r3, r3, #5
 8103edc:	60fb      	str	r3, [r7, #12]
        break;
 8103ede:	e00e      	b.n	8103efe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103ee0:	68fb      	ldr	r3, [r7, #12]
 8103ee2:	099b      	lsrs	r3, r3, #6
 8103ee4:	60fb      	str	r3, [r7, #12]
        break;
 8103ee6:	e00a      	b.n	8103efe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103ee8:	68fb      	ldr	r3, [r7, #12]
 8103eea:	09db      	lsrs	r3, r3, #7
 8103eec:	60fb      	str	r3, [r7, #12]
        break;
 8103eee:	e006      	b.n	8103efe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103ef0:	68fb      	ldr	r3, [r7, #12]
 8103ef2:	0a1b      	lsrs	r3, r3, #8
 8103ef4:	60fb      	str	r3, [r7, #12]
        break;
 8103ef6:	e002      	b.n	8103efe <ADC_ConfigureBoostMode+0x14a>
        break;
 8103ef8:	bf00      	nop
 8103efa:	e000      	b.n	8103efe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8103efc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103efe:	f7ff f8cf 	bl	81030a0 <HAL_GetREVID>
 8103f02:	4603      	mov	r3, r0
 8103f04:	f241 0203 	movw	r2, #4099	; 0x1003
 8103f08:	4293      	cmp	r3, r2
 8103f0a:	d815      	bhi.n	8103f38 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8103f0c:	68fb      	ldr	r3, [r7, #12]
 8103f0e:	4a2b      	ldr	r2, [pc, #172]	; (8103fbc <ADC_ConfigureBoostMode+0x208>)
 8103f10:	4293      	cmp	r3, r2
 8103f12:	d908      	bls.n	8103f26 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103f14:	687b      	ldr	r3, [r7, #4]
 8103f16:	681b      	ldr	r3, [r3, #0]
 8103f18:	689a      	ldr	r2, [r3, #8]
 8103f1a:	687b      	ldr	r3, [r7, #4]
 8103f1c:	681b      	ldr	r3, [r3, #0]
 8103f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103f22:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103f24:	e03e      	b.n	8103fa4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103f26:	687b      	ldr	r3, [r7, #4]
 8103f28:	681b      	ldr	r3, [r3, #0]
 8103f2a:	689a      	ldr	r2, [r3, #8]
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	681b      	ldr	r3, [r3, #0]
 8103f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103f34:	609a      	str	r2, [r3, #8]
}
 8103f36:	e035      	b.n	8103fa4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103f38:	68fb      	ldr	r3, [r7, #12]
 8103f3a:	085b      	lsrs	r3, r3, #1
 8103f3c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103f3e:	68fb      	ldr	r3, [r7, #12]
 8103f40:	4a1f      	ldr	r2, [pc, #124]	; (8103fc0 <ADC_ConfigureBoostMode+0x20c>)
 8103f42:	4293      	cmp	r3, r2
 8103f44:	d808      	bhi.n	8103f58 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103f46:	687b      	ldr	r3, [r7, #4]
 8103f48:	681b      	ldr	r3, [r3, #0]
 8103f4a:	689a      	ldr	r2, [r3, #8]
 8103f4c:	687b      	ldr	r3, [r7, #4]
 8103f4e:	681b      	ldr	r3, [r3, #0]
 8103f50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8103f54:	609a      	str	r2, [r3, #8]
}
 8103f56:	e025      	b.n	8103fa4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8103f58:	68fb      	ldr	r3, [r7, #12]
 8103f5a:	4a1a      	ldr	r2, [pc, #104]	; (8103fc4 <ADC_ConfigureBoostMode+0x210>)
 8103f5c:	4293      	cmp	r3, r2
 8103f5e:	d80a      	bhi.n	8103f76 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103f60:	687b      	ldr	r3, [r7, #4]
 8103f62:	681b      	ldr	r3, [r3, #0]
 8103f64:	689b      	ldr	r3, [r3, #8]
 8103f66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	681b      	ldr	r3, [r3, #0]
 8103f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103f72:	609a      	str	r2, [r3, #8]
}
 8103f74:	e016      	b.n	8103fa4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8103f76:	68fb      	ldr	r3, [r7, #12]
 8103f78:	4a13      	ldr	r2, [pc, #76]	; (8103fc8 <ADC_ConfigureBoostMode+0x214>)
 8103f7a:	4293      	cmp	r3, r2
 8103f7c:	d80a      	bhi.n	8103f94 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103f7e:	687b      	ldr	r3, [r7, #4]
 8103f80:	681b      	ldr	r3, [r3, #0]
 8103f82:	689b      	ldr	r3, [r3, #8]
 8103f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	681b      	ldr	r3, [r3, #0]
 8103f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103f90:	609a      	str	r2, [r3, #8]
}
 8103f92:	e007      	b.n	8103fa4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	681b      	ldr	r3, [r3, #0]
 8103f98:	689a      	ldr	r2, [r3, #8]
 8103f9a:	687b      	ldr	r3, [r7, #4]
 8103f9c:	681b      	ldr	r3, [r3, #0]
 8103f9e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8103fa2:	609a      	str	r2, [r3, #8]
}
 8103fa4:	bf00      	nop
 8103fa6:	3710      	adds	r7, #16
 8103fa8:	46bd      	mov	sp, r7
 8103faa:	bd80      	pop	{r7, pc}
 8103fac:	40022000 	.word	0x40022000
 8103fb0:	40022100 	.word	0x40022100
 8103fb4:	40022300 	.word	0x40022300
 8103fb8:	58026300 	.word	0x58026300
 8103fbc:	01312d00 	.word	0x01312d00
 8103fc0:	005f5e10 	.word	0x005f5e10
 8103fc4:	00bebc20 	.word	0x00bebc20
 8103fc8:	017d7840 	.word	0x017d7840

08103fcc <LL_ADC_IsEnabled>:
{
 8103fcc:	b480      	push	{r7}
 8103fce:	b083      	sub	sp, #12
 8103fd0:	af00      	add	r7, sp, #0
 8103fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	689b      	ldr	r3, [r3, #8]
 8103fd8:	f003 0301 	and.w	r3, r3, #1
 8103fdc:	2b01      	cmp	r3, #1
 8103fde:	d101      	bne.n	8103fe4 <LL_ADC_IsEnabled+0x18>
 8103fe0:	2301      	movs	r3, #1
 8103fe2:	e000      	b.n	8103fe6 <LL_ADC_IsEnabled+0x1a>
 8103fe4:	2300      	movs	r3, #0
}
 8103fe6:	4618      	mov	r0, r3
 8103fe8:	370c      	adds	r7, #12
 8103fea:	46bd      	mov	sp, r7
 8103fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ff0:	4770      	bx	lr

08103ff2 <LL_ADC_REG_IsConversionOngoing>:
{
 8103ff2:	b480      	push	{r7}
 8103ff4:	b083      	sub	sp, #12
 8103ff6:	af00      	add	r7, sp, #0
 8103ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103ffa:	687b      	ldr	r3, [r7, #4]
 8103ffc:	689b      	ldr	r3, [r3, #8]
 8103ffe:	f003 0304 	and.w	r3, r3, #4
 8104002:	2b04      	cmp	r3, #4
 8104004:	d101      	bne.n	810400a <LL_ADC_REG_IsConversionOngoing+0x18>
 8104006:	2301      	movs	r3, #1
 8104008:	e000      	b.n	810400c <LL_ADC_REG_IsConversionOngoing+0x1a>
 810400a:	2300      	movs	r3, #0
}
 810400c:	4618      	mov	r0, r3
 810400e:	370c      	adds	r7, #12
 8104010:	46bd      	mov	sp, r7
 8104012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104016:	4770      	bx	lr

08104018 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8104018:	b590      	push	{r4, r7, lr}
 810401a:	b09f      	sub	sp, #124	; 0x7c
 810401c:	af00      	add	r7, sp, #0
 810401e:	6078      	str	r0, [r7, #4]
 8104020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8104022:	2300      	movs	r3, #0
 8104024:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8104028:	687b      	ldr	r3, [r7, #4]
 810402a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810402e:	2b01      	cmp	r3, #1
 8104030:	d101      	bne.n	8104036 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8104032:	2302      	movs	r3, #2
 8104034:	e0c4      	b.n	81041c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8104036:	687b      	ldr	r3, [r7, #4]
 8104038:	2201      	movs	r2, #1
 810403a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 810403e:	2300      	movs	r3, #0
 8104040:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8104042:	2300      	movs	r3, #0
 8104044:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	4a5f      	ldr	r2, [pc, #380]	; (81041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810404c:	4293      	cmp	r3, r2
 810404e:	d102      	bne.n	8104056 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8104050:	4b5e      	ldr	r3, [pc, #376]	; (81041cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104052:	60bb      	str	r3, [r7, #8]
 8104054:	e001      	b.n	810405a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8104056:	2300      	movs	r3, #0
 8104058:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 810405a:	68bb      	ldr	r3, [r7, #8]
 810405c:	2b00      	cmp	r3, #0
 810405e:	d10b      	bne.n	8104078 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8104060:	687b      	ldr	r3, [r7, #4]
 8104062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104064:	f043 0220 	orr.w	r2, r3, #32
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 810406c:	687b      	ldr	r3, [r7, #4]
 810406e:	2200      	movs	r2, #0
 8104070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8104074:	2301      	movs	r3, #1
 8104076:	e0a3      	b.n	81041c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8104078:	68bb      	ldr	r3, [r7, #8]
 810407a:	4618      	mov	r0, r3
 810407c:	f7ff ffb9 	bl	8103ff2 <LL_ADC_REG_IsConversionOngoing>
 8104080:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	681b      	ldr	r3, [r3, #0]
 8104086:	4618      	mov	r0, r3
 8104088:	f7ff ffb3 	bl	8103ff2 <LL_ADC_REG_IsConversionOngoing>
 810408c:	4603      	mov	r3, r0
 810408e:	2b00      	cmp	r3, #0
 8104090:	f040 8085 	bne.w	810419e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8104094:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104096:	2b00      	cmp	r3, #0
 8104098:	f040 8081 	bne.w	810419e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	4a49      	ldr	r2, [pc, #292]	; (81041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81040a2:	4293      	cmp	r3, r2
 81040a4:	d004      	beq.n	81040b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	4a48      	ldr	r2, [pc, #288]	; (81041cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81040ac:	4293      	cmp	r3, r2
 81040ae:	d101      	bne.n	81040b4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 81040b0:	4b47      	ldr	r3, [pc, #284]	; (81041d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 81040b2:	e000      	b.n	81040b6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 81040b4:	4b47      	ldr	r3, [pc, #284]	; (81041d4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 81040b6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81040b8:	683b      	ldr	r3, [r7, #0]
 81040ba:	681b      	ldr	r3, [r3, #0]
 81040bc:	2b00      	cmp	r3, #0
 81040be:	d03b      	beq.n	8104138 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81040c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81040c2:	689b      	ldr	r3, [r3, #8]
 81040c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81040c8:	683b      	ldr	r3, [r7, #0]
 81040ca:	685b      	ldr	r3, [r3, #4]
 81040cc:	431a      	orrs	r2, r3
 81040ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81040d0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81040d2:	687b      	ldr	r3, [r7, #4]
 81040d4:	681b      	ldr	r3, [r3, #0]
 81040d6:	4a3c      	ldr	r2, [pc, #240]	; (81041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81040d8:	4293      	cmp	r3, r2
 81040da:	d004      	beq.n	81040e6 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	681b      	ldr	r3, [r3, #0]
 81040e0:	4a3a      	ldr	r2, [pc, #232]	; (81041cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81040e2:	4293      	cmp	r3, r2
 81040e4:	d10e      	bne.n	8104104 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 81040e6:	4838      	ldr	r0, [pc, #224]	; (81041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81040e8:	f7ff ff70 	bl	8103fcc <LL_ADC_IsEnabled>
 81040ec:	4604      	mov	r4, r0
 81040ee:	4837      	ldr	r0, [pc, #220]	; (81041cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81040f0:	f7ff ff6c 	bl	8103fcc <LL_ADC_IsEnabled>
 81040f4:	4603      	mov	r3, r0
 81040f6:	4323      	orrs	r3, r4
 81040f8:	2b00      	cmp	r3, #0
 81040fa:	bf0c      	ite	eq
 81040fc:	2301      	moveq	r3, #1
 81040fe:	2300      	movne	r3, #0
 8104100:	b2db      	uxtb	r3, r3
 8104102:	e008      	b.n	8104116 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8104104:	4834      	ldr	r0, [pc, #208]	; (81041d8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104106:	f7ff ff61 	bl	8103fcc <LL_ADC_IsEnabled>
 810410a:	4603      	mov	r3, r0
 810410c:	2b00      	cmp	r3, #0
 810410e:	bf0c      	ite	eq
 8104110:	2301      	moveq	r3, #1
 8104112:	2300      	movne	r3, #0
 8104114:	b2db      	uxtb	r3, r3
 8104116:	2b00      	cmp	r3, #0
 8104118:	d04b      	beq.n	81041b2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810411a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810411c:	689b      	ldr	r3, [r3, #8]
 810411e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8104122:	f023 030f 	bic.w	r3, r3, #15
 8104126:	683a      	ldr	r2, [r7, #0]
 8104128:	6811      	ldr	r1, [r2, #0]
 810412a:	683a      	ldr	r2, [r7, #0]
 810412c:	6892      	ldr	r2, [r2, #8]
 810412e:	430a      	orrs	r2, r1
 8104130:	431a      	orrs	r2, r3
 8104132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104134:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8104136:	e03c      	b.n	81041b2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8104138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810413a:	689b      	ldr	r3, [r3, #8]
 810413c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8104140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8104142:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	681b      	ldr	r3, [r3, #0]
 8104148:	4a1f      	ldr	r2, [pc, #124]	; (81041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810414a:	4293      	cmp	r3, r2
 810414c:	d004      	beq.n	8104158 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 810414e:	687b      	ldr	r3, [r7, #4]
 8104150:	681b      	ldr	r3, [r3, #0]
 8104152:	4a1e      	ldr	r2, [pc, #120]	; (81041cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104154:	4293      	cmp	r3, r2
 8104156:	d10e      	bne.n	8104176 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8104158:	481b      	ldr	r0, [pc, #108]	; (81041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810415a:	f7ff ff37 	bl	8103fcc <LL_ADC_IsEnabled>
 810415e:	4604      	mov	r4, r0
 8104160:	481a      	ldr	r0, [pc, #104]	; (81041cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8104162:	f7ff ff33 	bl	8103fcc <LL_ADC_IsEnabled>
 8104166:	4603      	mov	r3, r0
 8104168:	4323      	orrs	r3, r4
 810416a:	2b00      	cmp	r3, #0
 810416c:	bf0c      	ite	eq
 810416e:	2301      	moveq	r3, #1
 8104170:	2300      	movne	r3, #0
 8104172:	b2db      	uxtb	r3, r3
 8104174:	e008      	b.n	8104188 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8104176:	4818      	ldr	r0, [pc, #96]	; (81041d8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8104178:	f7ff ff28 	bl	8103fcc <LL_ADC_IsEnabled>
 810417c:	4603      	mov	r3, r0
 810417e:	2b00      	cmp	r3, #0
 8104180:	bf0c      	ite	eq
 8104182:	2301      	moveq	r3, #1
 8104184:	2300      	movne	r3, #0
 8104186:	b2db      	uxtb	r3, r3
 8104188:	2b00      	cmp	r3, #0
 810418a:	d012      	beq.n	81041b2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 810418c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810418e:	689b      	ldr	r3, [r3, #8]
 8104190:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8104194:	f023 030f 	bic.w	r3, r3, #15
 8104198:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 810419a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810419c:	e009      	b.n	81041b2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81041a2:	f043 0220 	orr.w	r2, r3, #32
 81041a6:	687b      	ldr	r3, [r7, #4]
 81041a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81041aa:	2301      	movs	r3, #1
 81041ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 81041b0:	e000      	b.n	81041b4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81041b2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81041b4:	687b      	ldr	r3, [r7, #4]
 81041b6:	2200      	movs	r2, #0
 81041b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81041bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 81041c0:	4618      	mov	r0, r3
 81041c2:	377c      	adds	r7, #124	; 0x7c
 81041c4:	46bd      	mov	sp, r7
 81041c6:	bd90      	pop	{r4, r7, pc}
 81041c8:	40022000 	.word	0x40022000
 81041cc:	40022100 	.word	0x40022100
 81041d0:	40022300 	.word	0x40022300
 81041d4:	58026300 	.word	0x58026300
 81041d8:	58026000 	.word	0x58026000

081041dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81041dc:	b480      	push	{r7}
 81041de:	b085      	sub	sp, #20
 81041e0:	af00      	add	r7, sp, #0
 81041e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81041e4:	687b      	ldr	r3, [r7, #4]
 81041e6:	f003 0307 	and.w	r3, r3, #7
 81041ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81041ec:	4b0c      	ldr	r3, [pc, #48]	; (8104220 <__NVIC_SetPriorityGrouping+0x44>)
 81041ee:	68db      	ldr	r3, [r3, #12]
 81041f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81041f2:	68ba      	ldr	r2, [r7, #8]
 81041f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81041f8:	4013      	ands	r3, r2
 81041fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81041fc:	68fb      	ldr	r3, [r7, #12]
 81041fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104200:	68bb      	ldr	r3, [r7, #8]
 8104202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8104208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810420c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810420e:	4a04      	ldr	r2, [pc, #16]	; (8104220 <__NVIC_SetPriorityGrouping+0x44>)
 8104210:	68bb      	ldr	r3, [r7, #8]
 8104212:	60d3      	str	r3, [r2, #12]
}
 8104214:	bf00      	nop
 8104216:	3714      	adds	r7, #20
 8104218:	46bd      	mov	sp, r7
 810421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810421e:	4770      	bx	lr
 8104220:	e000ed00 	.word	0xe000ed00

08104224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8104224:	b480      	push	{r7}
 8104226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104228:	4b04      	ldr	r3, [pc, #16]	; (810423c <__NVIC_GetPriorityGrouping+0x18>)
 810422a:	68db      	ldr	r3, [r3, #12]
 810422c:	0a1b      	lsrs	r3, r3, #8
 810422e:	f003 0307 	and.w	r3, r3, #7
}
 8104232:	4618      	mov	r0, r3
 8104234:	46bd      	mov	sp, r7
 8104236:	f85d 7b04 	ldr.w	r7, [sp], #4
 810423a:	4770      	bx	lr
 810423c:	e000ed00 	.word	0xe000ed00

08104240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104240:	b480      	push	{r7}
 8104242:	b083      	sub	sp, #12
 8104244:	af00      	add	r7, sp, #0
 8104246:	4603      	mov	r3, r0
 8104248:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810424a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810424e:	2b00      	cmp	r3, #0
 8104250:	db0b      	blt.n	810426a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8104252:	88fb      	ldrh	r3, [r7, #6]
 8104254:	f003 021f 	and.w	r2, r3, #31
 8104258:	4907      	ldr	r1, [pc, #28]	; (8104278 <__NVIC_EnableIRQ+0x38>)
 810425a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810425e:	095b      	lsrs	r3, r3, #5
 8104260:	2001      	movs	r0, #1
 8104262:	fa00 f202 	lsl.w	r2, r0, r2
 8104266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810426a:	bf00      	nop
 810426c:	370c      	adds	r7, #12
 810426e:	46bd      	mov	sp, r7
 8104270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104274:	4770      	bx	lr
 8104276:	bf00      	nop
 8104278:	e000e100 	.word	0xe000e100

0810427c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810427c:	b480      	push	{r7}
 810427e:	b083      	sub	sp, #12
 8104280:	af00      	add	r7, sp, #0
 8104282:	4603      	mov	r3, r0
 8104284:	6039      	str	r1, [r7, #0]
 8104286:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810428c:	2b00      	cmp	r3, #0
 810428e:	db0a      	blt.n	81042a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104290:	683b      	ldr	r3, [r7, #0]
 8104292:	b2da      	uxtb	r2, r3
 8104294:	490c      	ldr	r1, [pc, #48]	; (81042c8 <__NVIC_SetPriority+0x4c>)
 8104296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810429a:	0112      	lsls	r2, r2, #4
 810429c:	b2d2      	uxtb	r2, r2
 810429e:	440b      	add	r3, r1
 81042a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81042a4:	e00a      	b.n	81042bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81042a6:	683b      	ldr	r3, [r7, #0]
 81042a8:	b2da      	uxtb	r2, r3
 81042aa:	4908      	ldr	r1, [pc, #32]	; (81042cc <__NVIC_SetPriority+0x50>)
 81042ac:	88fb      	ldrh	r3, [r7, #6]
 81042ae:	f003 030f 	and.w	r3, r3, #15
 81042b2:	3b04      	subs	r3, #4
 81042b4:	0112      	lsls	r2, r2, #4
 81042b6:	b2d2      	uxtb	r2, r2
 81042b8:	440b      	add	r3, r1
 81042ba:	761a      	strb	r2, [r3, #24]
}
 81042bc:	bf00      	nop
 81042be:	370c      	adds	r7, #12
 81042c0:	46bd      	mov	sp, r7
 81042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042c6:	4770      	bx	lr
 81042c8:	e000e100 	.word	0xe000e100
 81042cc:	e000ed00 	.word	0xe000ed00

081042d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81042d0:	b480      	push	{r7}
 81042d2:	b089      	sub	sp, #36	; 0x24
 81042d4:	af00      	add	r7, sp, #0
 81042d6:	60f8      	str	r0, [r7, #12]
 81042d8:	60b9      	str	r1, [r7, #8]
 81042da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81042dc:	68fb      	ldr	r3, [r7, #12]
 81042de:	f003 0307 	and.w	r3, r3, #7
 81042e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81042e4:	69fb      	ldr	r3, [r7, #28]
 81042e6:	f1c3 0307 	rsb	r3, r3, #7
 81042ea:	2b04      	cmp	r3, #4
 81042ec:	bf28      	it	cs
 81042ee:	2304      	movcs	r3, #4
 81042f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81042f2:	69fb      	ldr	r3, [r7, #28]
 81042f4:	3304      	adds	r3, #4
 81042f6:	2b06      	cmp	r3, #6
 81042f8:	d902      	bls.n	8104300 <NVIC_EncodePriority+0x30>
 81042fa:	69fb      	ldr	r3, [r7, #28]
 81042fc:	3b03      	subs	r3, #3
 81042fe:	e000      	b.n	8104302 <NVIC_EncodePriority+0x32>
 8104300:	2300      	movs	r3, #0
 8104302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104304:	f04f 32ff 	mov.w	r2, #4294967295
 8104308:	69bb      	ldr	r3, [r7, #24]
 810430a:	fa02 f303 	lsl.w	r3, r2, r3
 810430e:	43da      	mvns	r2, r3
 8104310:	68bb      	ldr	r3, [r7, #8]
 8104312:	401a      	ands	r2, r3
 8104314:	697b      	ldr	r3, [r7, #20]
 8104316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104318:	f04f 31ff 	mov.w	r1, #4294967295
 810431c:	697b      	ldr	r3, [r7, #20]
 810431e:	fa01 f303 	lsl.w	r3, r1, r3
 8104322:	43d9      	mvns	r1, r3
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104328:	4313      	orrs	r3, r2
         );
}
 810432a:	4618      	mov	r0, r3
 810432c:	3724      	adds	r7, #36	; 0x24
 810432e:	46bd      	mov	sp, r7
 8104330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104334:	4770      	bx	lr
	...

08104338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8104338:	b580      	push	{r7, lr}
 810433a:	b082      	sub	sp, #8
 810433c:	af00      	add	r7, sp, #0
 810433e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8104340:	687b      	ldr	r3, [r7, #4]
 8104342:	3b01      	subs	r3, #1
 8104344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104348:	d301      	bcc.n	810434e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810434a:	2301      	movs	r3, #1
 810434c:	e00f      	b.n	810436e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810434e:	4a0a      	ldr	r2, [pc, #40]	; (8104378 <SysTick_Config+0x40>)
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	3b01      	subs	r3, #1
 8104354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8104356:	210f      	movs	r1, #15
 8104358:	f04f 30ff 	mov.w	r0, #4294967295
 810435c:	f7ff ff8e 	bl	810427c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8104360:	4b05      	ldr	r3, [pc, #20]	; (8104378 <SysTick_Config+0x40>)
 8104362:	2200      	movs	r2, #0
 8104364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8104366:	4b04      	ldr	r3, [pc, #16]	; (8104378 <SysTick_Config+0x40>)
 8104368:	2207      	movs	r2, #7
 810436a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810436c:	2300      	movs	r3, #0
}
 810436e:	4618      	mov	r0, r3
 8104370:	3708      	adds	r7, #8
 8104372:	46bd      	mov	sp, r7
 8104374:	bd80      	pop	{r7, pc}
 8104376:	bf00      	nop
 8104378:	e000e010 	.word	0xe000e010

0810437c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810437c:	b580      	push	{r7, lr}
 810437e:	b082      	sub	sp, #8
 8104380:	af00      	add	r7, sp, #0
 8104382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8104384:	6878      	ldr	r0, [r7, #4]
 8104386:	f7ff ff29 	bl	81041dc <__NVIC_SetPriorityGrouping>
}
 810438a:	bf00      	nop
 810438c:	3708      	adds	r7, #8
 810438e:	46bd      	mov	sp, r7
 8104390:	bd80      	pop	{r7, pc}

08104392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104392:	b580      	push	{r7, lr}
 8104394:	b086      	sub	sp, #24
 8104396:	af00      	add	r7, sp, #0
 8104398:	4603      	mov	r3, r0
 810439a:	60b9      	str	r1, [r7, #8]
 810439c:	607a      	str	r2, [r7, #4]
 810439e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81043a0:	f7ff ff40 	bl	8104224 <__NVIC_GetPriorityGrouping>
 81043a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81043a6:	687a      	ldr	r2, [r7, #4]
 81043a8:	68b9      	ldr	r1, [r7, #8]
 81043aa:	6978      	ldr	r0, [r7, #20]
 81043ac:	f7ff ff90 	bl	81042d0 <NVIC_EncodePriority>
 81043b0:	4602      	mov	r2, r0
 81043b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81043b6:	4611      	mov	r1, r2
 81043b8:	4618      	mov	r0, r3
 81043ba:	f7ff ff5f 	bl	810427c <__NVIC_SetPriority>
}
 81043be:	bf00      	nop
 81043c0:	3718      	adds	r7, #24
 81043c2:	46bd      	mov	sp, r7
 81043c4:	bd80      	pop	{r7, pc}

081043c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81043c6:	b580      	push	{r7, lr}
 81043c8:	b082      	sub	sp, #8
 81043ca:	af00      	add	r7, sp, #0
 81043cc:	4603      	mov	r3, r0
 81043ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81043d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81043d4:	4618      	mov	r0, r3
 81043d6:	f7ff ff33 	bl	8104240 <__NVIC_EnableIRQ>
}
 81043da:	bf00      	nop
 81043dc:	3708      	adds	r7, #8
 81043de:	46bd      	mov	sp, r7
 81043e0:	bd80      	pop	{r7, pc}

081043e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81043e2:	b580      	push	{r7, lr}
 81043e4:	b082      	sub	sp, #8
 81043e6:	af00      	add	r7, sp, #0
 81043e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81043ea:	6878      	ldr	r0, [r7, #4]
 81043ec:	f7ff ffa4 	bl	8104338 <SysTick_Config>
 81043f0:	4603      	mov	r3, r0
}
 81043f2:	4618      	mov	r0, r3
 81043f4:	3708      	adds	r7, #8
 81043f6:	46bd      	mov	sp, r7
 81043f8:	bd80      	pop	{r7, pc}
	...

081043fc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81043fc:	b480      	push	{r7}
 81043fe:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104400:	4b07      	ldr	r3, [pc, #28]	; (8104420 <HAL_GetCurrentCPUID+0x24>)
 8104402:	681b      	ldr	r3, [r3, #0]
 8104404:	091b      	lsrs	r3, r3, #4
 8104406:	f003 030f 	and.w	r3, r3, #15
 810440a:	2b07      	cmp	r3, #7
 810440c:	d101      	bne.n	8104412 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810440e:	2303      	movs	r3, #3
 8104410:	e000      	b.n	8104414 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8104412:	2301      	movs	r3, #1
  }
}
 8104414:	4618      	mov	r0, r3
 8104416:	46bd      	mov	sp, r7
 8104418:	f85d 7b04 	ldr.w	r7, [sp], #4
 810441c:	4770      	bx	lr
 810441e:	bf00      	nop
 8104420:	e000ed00 	.word	0xe000ed00

08104424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104424:	b480      	push	{r7}
 8104426:	b089      	sub	sp, #36	; 0x24
 8104428:	af00      	add	r7, sp, #0
 810442a:	6078      	str	r0, [r7, #4]
 810442c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810442e:	2300      	movs	r3, #0
 8104430:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104432:	4b89      	ldr	r3, [pc, #548]	; (8104658 <HAL_GPIO_Init+0x234>)
 8104434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104436:	e194      	b.n	8104762 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104438:	683b      	ldr	r3, [r7, #0]
 810443a:	681a      	ldr	r2, [r3, #0]
 810443c:	2101      	movs	r1, #1
 810443e:	69fb      	ldr	r3, [r7, #28]
 8104440:	fa01 f303 	lsl.w	r3, r1, r3
 8104444:	4013      	ands	r3, r2
 8104446:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104448:	693b      	ldr	r3, [r7, #16]
 810444a:	2b00      	cmp	r3, #0
 810444c:	f000 8186 	beq.w	810475c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104450:	683b      	ldr	r3, [r7, #0]
 8104452:	685b      	ldr	r3, [r3, #4]
 8104454:	f003 0303 	and.w	r3, r3, #3
 8104458:	2b01      	cmp	r3, #1
 810445a:	d005      	beq.n	8104468 <HAL_GPIO_Init+0x44>
 810445c:	683b      	ldr	r3, [r7, #0]
 810445e:	685b      	ldr	r3, [r3, #4]
 8104460:	f003 0303 	and.w	r3, r3, #3
 8104464:	2b02      	cmp	r3, #2
 8104466:	d130      	bne.n	81044ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	689b      	ldr	r3, [r3, #8]
 810446c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810446e:	69fb      	ldr	r3, [r7, #28]
 8104470:	005b      	lsls	r3, r3, #1
 8104472:	2203      	movs	r2, #3
 8104474:	fa02 f303 	lsl.w	r3, r2, r3
 8104478:	43db      	mvns	r3, r3
 810447a:	69ba      	ldr	r2, [r7, #24]
 810447c:	4013      	ands	r3, r2
 810447e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104480:	683b      	ldr	r3, [r7, #0]
 8104482:	68da      	ldr	r2, [r3, #12]
 8104484:	69fb      	ldr	r3, [r7, #28]
 8104486:	005b      	lsls	r3, r3, #1
 8104488:	fa02 f303 	lsl.w	r3, r2, r3
 810448c:	69ba      	ldr	r2, [r7, #24]
 810448e:	4313      	orrs	r3, r2
 8104490:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104492:	687b      	ldr	r3, [r7, #4]
 8104494:	69ba      	ldr	r2, [r7, #24]
 8104496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	685b      	ldr	r3, [r3, #4]
 810449c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810449e:	2201      	movs	r2, #1
 81044a0:	69fb      	ldr	r3, [r7, #28]
 81044a2:	fa02 f303 	lsl.w	r3, r2, r3
 81044a6:	43db      	mvns	r3, r3
 81044a8:	69ba      	ldr	r2, [r7, #24]
 81044aa:	4013      	ands	r3, r2
 81044ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81044ae:	683b      	ldr	r3, [r7, #0]
 81044b0:	685b      	ldr	r3, [r3, #4]
 81044b2:	091b      	lsrs	r3, r3, #4
 81044b4:	f003 0201 	and.w	r2, r3, #1
 81044b8:	69fb      	ldr	r3, [r7, #28]
 81044ba:	fa02 f303 	lsl.w	r3, r2, r3
 81044be:	69ba      	ldr	r2, [r7, #24]
 81044c0:	4313      	orrs	r3, r2
 81044c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	69ba      	ldr	r2, [r7, #24]
 81044c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81044ca:	683b      	ldr	r3, [r7, #0]
 81044cc:	685b      	ldr	r3, [r3, #4]
 81044ce:	f003 0303 	and.w	r3, r3, #3
 81044d2:	2b03      	cmp	r3, #3
 81044d4:	d017      	beq.n	8104506 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81044d6:	687b      	ldr	r3, [r7, #4]
 81044d8:	68db      	ldr	r3, [r3, #12]
 81044da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81044dc:	69fb      	ldr	r3, [r7, #28]
 81044de:	005b      	lsls	r3, r3, #1
 81044e0:	2203      	movs	r2, #3
 81044e2:	fa02 f303 	lsl.w	r3, r2, r3
 81044e6:	43db      	mvns	r3, r3
 81044e8:	69ba      	ldr	r2, [r7, #24]
 81044ea:	4013      	ands	r3, r2
 81044ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81044ee:	683b      	ldr	r3, [r7, #0]
 81044f0:	689a      	ldr	r2, [r3, #8]
 81044f2:	69fb      	ldr	r3, [r7, #28]
 81044f4:	005b      	lsls	r3, r3, #1
 81044f6:	fa02 f303 	lsl.w	r3, r2, r3
 81044fa:	69ba      	ldr	r2, [r7, #24]
 81044fc:	4313      	orrs	r3, r2
 81044fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	69ba      	ldr	r2, [r7, #24]
 8104504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104506:	683b      	ldr	r3, [r7, #0]
 8104508:	685b      	ldr	r3, [r3, #4]
 810450a:	f003 0303 	and.w	r3, r3, #3
 810450e:	2b02      	cmp	r3, #2
 8104510:	d123      	bne.n	810455a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104512:	69fb      	ldr	r3, [r7, #28]
 8104514:	08da      	lsrs	r2, r3, #3
 8104516:	687b      	ldr	r3, [r7, #4]
 8104518:	3208      	adds	r2, #8
 810451a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104520:	69fb      	ldr	r3, [r7, #28]
 8104522:	f003 0307 	and.w	r3, r3, #7
 8104526:	009b      	lsls	r3, r3, #2
 8104528:	220f      	movs	r2, #15
 810452a:	fa02 f303 	lsl.w	r3, r2, r3
 810452e:	43db      	mvns	r3, r3
 8104530:	69ba      	ldr	r2, [r7, #24]
 8104532:	4013      	ands	r3, r2
 8104534:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104536:	683b      	ldr	r3, [r7, #0]
 8104538:	691a      	ldr	r2, [r3, #16]
 810453a:	69fb      	ldr	r3, [r7, #28]
 810453c:	f003 0307 	and.w	r3, r3, #7
 8104540:	009b      	lsls	r3, r3, #2
 8104542:	fa02 f303 	lsl.w	r3, r2, r3
 8104546:	69ba      	ldr	r2, [r7, #24]
 8104548:	4313      	orrs	r3, r2
 810454a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810454c:	69fb      	ldr	r3, [r7, #28]
 810454e:	08da      	lsrs	r2, r3, #3
 8104550:	687b      	ldr	r3, [r7, #4]
 8104552:	3208      	adds	r2, #8
 8104554:	69b9      	ldr	r1, [r7, #24]
 8104556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810455a:	687b      	ldr	r3, [r7, #4]
 810455c:	681b      	ldr	r3, [r3, #0]
 810455e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104560:	69fb      	ldr	r3, [r7, #28]
 8104562:	005b      	lsls	r3, r3, #1
 8104564:	2203      	movs	r2, #3
 8104566:	fa02 f303 	lsl.w	r3, r2, r3
 810456a:	43db      	mvns	r3, r3
 810456c:	69ba      	ldr	r2, [r7, #24]
 810456e:	4013      	ands	r3, r2
 8104570:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104572:	683b      	ldr	r3, [r7, #0]
 8104574:	685b      	ldr	r3, [r3, #4]
 8104576:	f003 0203 	and.w	r2, r3, #3
 810457a:	69fb      	ldr	r3, [r7, #28]
 810457c:	005b      	lsls	r3, r3, #1
 810457e:	fa02 f303 	lsl.w	r3, r2, r3
 8104582:	69ba      	ldr	r2, [r7, #24]
 8104584:	4313      	orrs	r3, r2
 8104586:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104588:	687b      	ldr	r3, [r7, #4]
 810458a:	69ba      	ldr	r2, [r7, #24]
 810458c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810458e:	683b      	ldr	r3, [r7, #0]
 8104590:	685b      	ldr	r3, [r3, #4]
 8104592:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8104596:	2b00      	cmp	r3, #0
 8104598:	f000 80e0 	beq.w	810475c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810459c:	4b2f      	ldr	r3, [pc, #188]	; (810465c <HAL_GPIO_Init+0x238>)
 810459e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81045a2:	4a2e      	ldr	r2, [pc, #184]	; (810465c <HAL_GPIO_Init+0x238>)
 81045a4:	f043 0302 	orr.w	r3, r3, #2
 81045a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81045ac:	4b2b      	ldr	r3, [pc, #172]	; (810465c <HAL_GPIO_Init+0x238>)
 81045ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81045b2:	f003 0302 	and.w	r3, r3, #2
 81045b6:	60fb      	str	r3, [r7, #12]
 81045b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81045ba:	4a29      	ldr	r2, [pc, #164]	; (8104660 <HAL_GPIO_Init+0x23c>)
 81045bc:	69fb      	ldr	r3, [r7, #28]
 81045be:	089b      	lsrs	r3, r3, #2
 81045c0:	3302      	adds	r3, #2
 81045c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81045c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81045c8:	69fb      	ldr	r3, [r7, #28]
 81045ca:	f003 0303 	and.w	r3, r3, #3
 81045ce:	009b      	lsls	r3, r3, #2
 81045d0:	220f      	movs	r2, #15
 81045d2:	fa02 f303 	lsl.w	r3, r2, r3
 81045d6:	43db      	mvns	r3, r3
 81045d8:	69ba      	ldr	r2, [r7, #24]
 81045da:	4013      	ands	r3, r2
 81045dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81045de:	687b      	ldr	r3, [r7, #4]
 81045e0:	4a20      	ldr	r2, [pc, #128]	; (8104664 <HAL_GPIO_Init+0x240>)
 81045e2:	4293      	cmp	r3, r2
 81045e4:	d052      	beq.n	810468c <HAL_GPIO_Init+0x268>
 81045e6:	687b      	ldr	r3, [r7, #4]
 81045e8:	4a1f      	ldr	r2, [pc, #124]	; (8104668 <HAL_GPIO_Init+0x244>)
 81045ea:	4293      	cmp	r3, r2
 81045ec:	d031      	beq.n	8104652 <HAL_GPIO_Init+0x22e>
 81045ee:	687b      	ldr	r3, [r7, #4]
 81045f0:	4a1e      	ldr	r2, [pc, #120]	; (810466c <HAL_GPIO_Init+0x248>)
 81045f2:	4293      	cmp	r3, r2
 81045f4:	d02b      	beq.n	810464e <HAL_GPIO_Init+0x22a>
 81045f6:	687b      	ldr	r3, [r7, #4]
 81045f8:	4a1d      	ldr	r2, [pc, #116]	; (8104670 <HAL_GPIO_Init+0x24c>)
 81045fa:	4293      	cmp	r3, r2
 81045fc:	d025      	beq.n	810464a <HAL_GPIO_Init+0x226>
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	4a1c      	ldr	r2, [pc, #112]	; (8104674 <HAL_GPIO_Init+0x250>)
 8104602:	4293      	cmp	r3, r2
 8104604:	d01f      	beq.n	8104646 <HAL_GPIO_Init+0x222>
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	4a1b      	ldr	r2, [pc, #108]	; (8104678 <HAL_GPIO_Init+0x254>)
 810460a:	4293      	cmp	r3, r2
 810460c:	d019      	beq.n	8104642 <HAL_GPIO_Init+0x21e>
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	4a1a      	ldr	r2, [pc, #104]	; (810467c <HAL_GPIO_Init+0x258>)
 8104612:	4293      	cmp	r3, r2
 8104614:	d013      	beq.n	810463e <HAL_GPIO_Init+0x21a>
 8104616:	687b      	ldr	r3, [r7, #4]
 8104618:	4a19      	ldr	r2, [pc, #100]	; (8104680 <HAL_GPIO_Init+0x25c>)
 810461a:	4293      	cmp	r3, r2
 810461c:	d00d      	beq.n	810463a <HAL_GPIO_Init+0x216>
 810461e:	687b      	ldr	r3, [r7, #4]
 8104620:	4a18      	ldr	r2, [pc, #96]	; (8104684 <HAL_GPIO_Init+0x260>)
 8104622:	4293      	cmp	r3, r2
 8104624:	d007      	beq.n	8104636 <HAL_GPIO_Init+0x212>
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	4a17      	ldr	r2, [pc, #92]	; (8104688 <HAL_GPIO_Init+0x264>)
 810462a:	4293      	cmp	r3, r2
 810462c:	d101      	bne.n	8104632 <HAL_GPIO_Init+0x20e>
 810462e:	2309      	movs	r3, #9
 8104630:	e02d      	b.n	810468e <HAL_GPIO_Init+0x26a>
 8104632:	230a      	movs	r3, #10
 8104634:	e02b      	b.n	810468e <HAL_GPIO_Init+0x26a>
 8104636:	2308      	movs	r3, #8
 8104638:	e029      	b.n	810468e <HAL_GPIO_Init+0x26a>
 810463a:	2307      	movs	r3, #7
 810463c:	e027      	b.n	810468e <HAL_GPIO_Init+0x26a>
 810463e:	2306      	movs	r3, #6
 8104640:	e025      	b.n	810468e <HAL_GPIO_Init+0x26a>
 8104642:	2305      	movs	r3, #5
 8104644:	e023      	b.n	810468e <HAL_GPIO_Init+0x26a>
 8104646:	2304      	movs	r3, #4
 8104648:	e021      	b.n	810468e <HAL_GPIO_Init+0x26a>
 810464a:	2303      	movs	r3, #3
 810464c:	e01f      	b.n	810468e <HAL_GPIO_Init+0x26a>
 810464e:	2302      	movs	r3, #2
 8104650:	e01d      	b.n	810468e <HAL_GPIO_Init+0x26a>
 8104652:	2301      	movs	r3, #1
 8104654:	e01b      	b.n	810468e <HAL_GPIO_Init+0x26a>
 8104656:	bf00      	nop
 8104658:	580000c0 	.word	0x580000c0
 810465c:	58024400 	.word	0x58024400
 8104660:	58000400 	.word	0x58000400
 8104664:	58020000 	.word	0x58020000
 8104668:	58020400 	.word	0x58020400
 810466c:	58020800 	.word	0x58020800
 8104670:	58020c00 	.word	0x58020c00
 8104674:	58021000 	.word	0x58021000
 8104678:	58021400 	.word	0x58021400
 810467c:	58021800 	.word	0x58021800
 8104680:	58021c00 	.word	0x58021c00
 8104684:	58022000 	.word	0x58022000
 8104688:	58022400 	.word	0x58022400
 810468c:	2300      	movs	r3, #0
 810468e:	69fa      	ldr	r2, [r7, #28]
 8104690:	f002 0203 	and.w	r2, r2, #3
 8104694:	0092      	lsls	r2, r2, #2
 8104696:	4093      	lsls	r3, r2
 8104698:	69ba      	ldr	r2, [r7, #24]
 810469a:	4313      	orrs	r3, r2
 810469c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810469e:	4938      	ldr	r1, [pc, #224]	; (8104780 <HAL_GPIO_Init+0x35c>)
 81046a0:	69fb      	ldr	r3, [r7, #28]
 81046a2:	089b      	lsrs	r3, r3, #2
 81046a4:	3302      	adds	r3, #2
 81046a6:	69ba      	ldr	r2, [r7, #24]
 81046a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81046ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81046b0:	681b      	ldr	r3, [r3, #0]
 81046b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81046b4:	693b      	ldr	r3, [r7, #16]
 81046b6:	43db      	mvns	r3, r3
 81046b8:	69ba      	ldr	r2, [r7, #24]
 81046ba:	4013      	ands	r3, r2
 81046bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81046be:	683b      	ldr	r3, [r7, #0]
 81046c0:	685b      	ldr	r3, [r3, #4]
 81046c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81046c6:	2b00      	cmp	r3, #0
 81046c8:	d003      	beq.n	81046d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81046ca:	69ba      	ldr	r2, [r7, #24]
 81046cc:	693b      	ldr	r3, [r7, #16]
 81046ce:	4313      	orrs	r3, r2
 81046d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81046d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81046d6:	69bb      	ldr	r3, [r7, #24]
 81046d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81046da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81046de:	685b      	ldr	r3, [r3, #4]
 81046e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81046e2:	693b      	ldr	r3, [r7, #16]
 81046e4:	43db      	mvns	r3, r3
 81046e6:	69ba      	ldr	r2, [r7, #24]
 81046e8:	4013      	ands	r3, r2
 81046ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81046ec:	683b      	ldr	r3, [r7, #0]
 81046ee:	685b      	ldr	r3, [r3, #4]
 81046f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81046f4:	2b00      	cmp	r3, #0
 81046f6:	d003      	beq.n	8104700 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81046f8:	69ba      	ldr	r2, [r7, #24]
 81046fa:	693b      	ldr	r3, [r7, #16]
 81046fc:	4313      	orrs	r3, r2
 81046fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104704:	69bb      	ldr	r3, [r7, #24]
 8104706:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104708:	697b      	ldr	r3, [r7, #20]
 810470a:	685b      	ldr	r3, [r3, #4]
 810470c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810470e:	693b      	ldr	r3, [r7, #16]
 8104710:	43db      	mvns	r3, r3
 8104712:	69ba      	ldr	r2, [r7, #24]
 8104714:	4013      	ands	r3, r2
 8104716:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104718:	683b      	ldr	r3, [r7, #0]
 810471a:	685b      	ldr	r3, [r3, #4]
 810471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104720:	2b00      	cmp	r3, #0
 8104722:	d003      	beq.n	810472c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8104724:	69ba      	ldr	r2, [r7, #24]
 8104726:	693b      	ldr	r3, [r7, #16]
 8104728:	4313      	orrs	r3, r2
 810472a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810472c:	697b      	ldr	r3, [r7, #20]
 810472e:	69ba      	ldr	r2, [r7, #24]
 8104730:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104732:	697b      	ldr	r3, [r7, #20]
 8104734:	681b      	ldr	r3, [r3, #0]
 8104736:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104738:	693b      	ldr	r3, [r7, #16]
 810473a:	43db      	mvns	r3, r3
 810473c:	69ba      	ldr	r2, [r7, #24]
 810473e:	4013      	ands	r3, r2
 8104740:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8104742:	683b      	ldr	r3, [r7, #0]
 8104744:	685b      	ldr	r3, [r3, #4]
 8104746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810474a:	2b00      	cmp	r3, #0
 810474c:	d003      	beq.n	8104756 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810474e:	69ba      	ldr	r2, [r7, #24]
 8104750:	693b      	ldr	r3, [r7, #16]
 8104752:	4313      	orrs	r3, r2
 8104754:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104756:	697b      	ldr	r3, [r7, #20]
 8104758:	69ba      	ldr	r2, [r7, #24]
 810475a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810475c:	69fb      	ldr	r3, [r7, #28]
 810475e:	3301      	adds	r3, #1
 8104760:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104762:	683b      	ldr	r3, [r7, #0]
 8104764:	681a      	ldr	r2, [r3, #0]
 8104766:	69fb      	ldr	r3, [r7, #28]
 8104768:	fa22 f303 	lsr.w	r3, r2, r3
 810476c:	2b00      	cmp	r3, #0
 810476e:	f47f ae63 	bne.w	8104438 <HAL_GPIO_Init+0x14>
  }
}
 8104772:	bf00      	nop
 8104774:	bf00      	nop
 8104776:	3724      	adds	r7, #36	; 0x24
 8104778:	46bd      	mov	sp, r7
 810477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810477e:	4770      	bx	lr
 8104780:	58000400 	.word	0x58000400

08104784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8104784:	b480      	push	{r7}
 8104786:	b083      	sub	sp, #12
 8104788:	af00      	add	r7, sp, #0
 810478a:	6078      	str	r0, [r7, #4]
 810478c:	460b      	mov	r3, r1
 810478e:	807b      	strh	r3, [r7, #2]
 8104790:	4613      	mov	r3, r2
 8104792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104794:	787b      	ldrb	r3, [r7, #1]
 8104796:	2b00      	cmp	r3, #0
 8104798:	d003      	beq.n	81047a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810479a:	887a      	ldrh	r2, [r7, #2]
 810479c:	687b      	ldr	r3, [r7, #4]
 810479e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81047a0:	e003      	b.n	81047aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81047a2:	887b      	ldrh	r3, [r7, #2]
 81047a4:	041a      	lsls	r2, r3, #16
 81047a6:	687b      	ldr	r3, [r7, #4]
 81047a8:	619a      	str	r2, [r3, #24]
}
 81047aa:	bf00      	nop
 81047ac:	370c      	adds	r7, #12
 81047ae:	46bd      	mov	sp, r7
 81047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047b4:	4770      	bx	lr

081047b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81047b6:	b480      	push	{r7}
 81047b8:	b085      	sub	sp, #20
 81047ba:	af00      	add	r7, sp, #0
 81047bc:	6078      	str	r0, [r7, #4]
 81047be:	460b      	mov	r3, r1
 81047c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 81047c2:	687b      	ldr	r3, [r7, #4]
 81047c4:	695b      	ldr	r3, [r3, #20]
 81047c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 81047c8:	887a      	ldrh	r2, [r7, #2]
 81047ca:	68fb      	ldr	r3, [r7, #12]
 81047cc:	4013      	ands	r3, r2
 81047ce:	041a      	lsls	r2, r3, #16
 81047d0:	68fb      	ldr	r3, [r7, #12]
 81047d2:	43d9      	mvns	r1, r3
 81047d4:	887b      	ldrh	r3, [r7, #2]
 81047d6:	400b      	ands	r3, r1
 81047d8:	431a      	orrs	r2, r3
 81047da:	687b      	ldr	r3, [r7, #4]
 81047dc:	619a      	str	r2, [r3, #24]
}
 81047de:	bf00      	nop
 81047e0:	3714      	adds	r7, #20
 81047e2:	46bd      	mov	sp, r7
 81047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047e8:	4770      	bx	lr
	...

081047ec <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81047ec:	b480      	push	{r7}
 81047ee:	b083      	sub	sp, #12
 81047f0:	af00      	add	r7, sp, #0
 81047f2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81047f4:	4b05      	ldr	r3, [pc, #20]	; (810480c <HAL_HSEM_ActivateNotification+0x20>)
 81047f6:	681a      	ldr	r2, [r3, #0]
 81047f8:	4904      	ldr	r1, [pc, #16]	; (810480c <HAL_HSEM_ActivateNotification+0x20>)
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	4313      	orrs	r3, r2
 81047fe:	600b      	str	r3, [r1, #0]
#endif
}
 8104800:	bf00      	nop
 8104802:	370c      	adds	r7, #12
 8104804:	46bd      	mov	sp, r7
 8104806:	f85d 7b04 	ldr.w	r7, [sp], #4
 810480a:	4770      	bx	lr
 810480c:	58026510 	.word	0x58026510

08104810 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104810:	b580      	push	{r7, lr}
 8104812:	b082      	sub	sp, #8
 8104814:	af00      	add	r7, sp, #0
 8104816:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104818:	687b      	ldr	r3, [r7, #4]
 810481a:	2b00      	cmp	r3, #0
 810481c:	d101      	bne.n	8104822 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810481e:	2301      	movs	r3, #1
 8104820:	e081      	b.n	8104926 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8104822:	687b      	ldr	r3, [r7, #4]
 8104824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104828:	b2db      	uxtb	r3, r3
 810482a:	2b00      	cmp	r3, #0
 810482c:	d106      	bne.n	810483c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	2200      	movs	r2, #0
 8104832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104836:	6878      	ldr	r0, [r7, #4]
 8104838:	f7fe f8a0 	bl	810297c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810483c:	687b      	ldr	r3, [r7, #4]
 810483e:	2224      	movs	r2, #36	; 0x24
 8104840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104844:	687b      	ldr	r3, [r7, #4]
 8104846:	681b      	ldr	r3, [r3, #0]
 8104848:	681a      	ldr	r2, [r3, #0]
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	681b      	ldr	r3, [r3, #0]
 810484e:	f022 0201 	bic.w	r2, r2, #1
 8104852:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104854:	687b      	ldr	r3, [r7, #4]
 8104856:	685a      	ldr	r2, [r3, #4]
 8104858:	687b      	ldr	r3, [r7, #4]
 810485a:	681b      	ldr	r3, [r3, #0]
 810485c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8104860:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8104862:	687b      	ldr	r3, [r7, #4]
 8104864:	681b      	ldr	r3, [r3, #0]
 8104866:	689a      	ldr	r2, [r3, #8]
 8104868:	687b      	ldr	r3, [r7, #4]
 810486a:	681b      	ldr	r3, [r3, #0]
 810486c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104870:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8104872:	687b      	ldr	r3, [r7, #4]
 8104874:	68db      	ldr	r3, [r3, #12]
 8104876:	2b01      	cmp	r3, #1
 8104878:	d107      	bne.n	810488a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	689a      	ldr	r2, [r3, #8]
 810487e:	687b      	ldr	r3, [r7, #4]
 8104880:	681b      	ldr	r3, [r3, #0]
 8104882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104886:	609a      	str	r2, [r3, #8]
 8104888:	e006      	b.n	8104898 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810488a:	687b      	ldr	r3, [r7, #4]
 810488c:	689a      	ldr	r2, [r3, #8]
 810488e:	687b      	ldr	r3, [r7, #4]
 8104890:	681b      	ldr	r3, [r3, #0]
 8104892:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8104896:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104898:	687b      	ldr	r3, [r7, #4]
 810489a:	68db      	ldr	r3, [r3, #12]
 810489c:	2b02      	cmp	r3, #2
 810489e:	d104      	bne.n	81048aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	681b      	ldr	r3, [r3, #0]
 81048a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81048a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81048aa:	687b      	ldr	r3, [r7, #4]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	685b      	ldr	r3, [r3, #4]
 81048b0:	687a      	ldr	r2, [r7, #4]
 81048b2:	6812      	ldr	r2, [r2, #0]
 81048b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81048b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81048bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81048be:	687b      	ldr	r3, [r7, #4]
 81048c0:	681b      	ldr	r3, [r3, #0]
 81048c2:	68da      	ldr	r2, [r3, #12]
 81048c4:	687b      	ldr	r3, [r7, #4]
 81048c6:	681b      	ldr	r3, [r3, #0]
 81048c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81048cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81048ce:	687b      	ldr	r3, [r7, #4]
 81048d0:	691a      	ldr	r2, [r3, #16]
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	695b      	ldr	r3, [r3, #20]
 81048d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81048da:	687b      	ldr	r3, [r7, #4]
 81048dc:	699b      	ldr	r3, [r3, #24]
 81048de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81048e0:	687b      	ldr	r3, [r7, #4]
 81048e2:	681b      	ldr	r3, [r3, #0]
 81048e4:	430a      	orrs	r2, r1
 81048e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81048e8:	687b      	ldr	r3, [r7, #4]
 81048ea:	69d9      	ldr	r1, [r3, #28]
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	6a1a      	ldr	r2, [r3, #32]
 81048f0:	687b      	ldr	r3, [r7, #4]
 81048f2:	681b      	ldr	r3, [r3, #0]
 81048f4:	430a      	orrs	r2, r1
 81048f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81048f8:	687b      	ldr	r3, [r7, #4]
 81048fa:	681b      	ldr	r3, [r3, #0]
 81048fc:	681a      	ldr	r2, [r3, #0]
 81048fe:	687b      	ldr	r3, [r7, #4]
 8104900:	681b      	ldr	r3, [r3, #0]
 8104902:	f042 0201 	orr.w	r2, r2, #1
 8104906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104908:	687b      	ldr	r3, [r7, #4]
 810490a:	2200      	movs	r2, #0
 810490c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810490e:	687b      	ldr	r3, [r7, #4]
 8104910:	2220      	movs	r2, #32
 8104912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8104916:	687b      	ldr	r3, [r7, #4]
 8104918:	2200      	movs	r2, #0
 810491a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810491c:	687b      	ldr	r3, [r7, #4]
 810491e:	2200      	movs	r2, #0
 8104920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8104924:	2300      	movs	r3, #0
}
 8104926:	4618      	mov	r0, r3
 8104928:	3708      	adds	r7, #8
 810492a:	46bd      	mov	sp, r7
 810492c:	bd80      	pop	{r7, pc}
	...

08104930 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8104930:	b580      	push	{r7, lr}
 8104932:	b088      	sub	sp, #32
 8104934:	af02      	add	r7, sp, #8
 8104936:	60f8      	str	r0, [r7, #12]
 8104938:	607a      	str	r2, [r7, #4]
 810493a:	461a      	mov	r2, r3
 810493c:	460b      	mov	r3, r1
 810493e:	817b      	strh	r3, [r7, #10]
 8104940:	4613      	mov	r3, r2
 8104942:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104944:	68fb      	ldr	r3, [r7, #12]
 8104946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810494a:	b2db      	uxtb	r3, r3
 810494c:	2b20      	cmp	r3, #32
 810494e:	f040 80da 	bne.w	8104b06 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104952:	68fb      	ldr	r3, [r7, #12]
 8104954:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104958:	2b01      	cmp	r3, #1
 810495a:	d101      	bne.n	8104960 <HAL_I2C_Master_Transmit+0x30>
 810495c:	2302      	movs	r3, #2
 810495e:	e0d3      	b.n	8104b08 <HAL_I2C_Master_Transmit+0x1d8>
 8104960:	68fb      	ldr	r3, [r7, #12]
 8104962:	2201      	movs	r2, #1
 8104964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104968:	f7fe fb6a 	bl	8103040 <HAL_GetTick>
 810496c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810496e:	697b      	ldr	r3, [r7, #20]
 8104970:	9300      	str	r3, [sp, #0]
 8104972:	2319      	movs	r3, #25
 8104974:	2201      	movs	r2, #1
 8104976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810497a:	68f8      	ldr	r0, [r7, #12]
 810497c:	f000 fb07 	bl	8104f8e <I2C_WaitOnFlagUntilTimeout>
 8104980:	4603      	mov	r3, r0
 8104982:	2b00      	cmp	r3, #0
 8104984:	d001      	beq.n	810498a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8104986:	2301      	movs	r3, #1
 8104988:	e0be      	b.n	8104b08 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 810498a:	68fb      	ldr	r3, [r7, #12]
 810498c:	2221      	movs	r2, #33	; 0x21
 810498e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8104992:	68fb      	ldr	r3, [r7, #12]
 8104994:	2210      	movs	r2, #16
 8104996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810499a:	68fb      	ldr	r3, [r7, #12]
 810499c:	2200      	movs	r2, #0
 810499e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81049a0:	68fb      	ldr	r3, [r7, #12]
 81049a2:	687a      	ldr	r2, [r7, #4]
 81049a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81049a6:	68fb      	ldr	r3, [r7, #12]
 81049a8:	893a      	ldrh	r2, [r7, #8]
 81049aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81049ac:	68fb      	ldr	r3, [r7, #12]
 81049ae:	2200      	movs	r2, #0
 81049b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81049b2:	68fb      	ldr	r3, [r7, #12]
 81049b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81049b6:	b29b      	uxth	r3, r3
 81049b8:	2bff      	cmp	r3, #255	; 0xff
 81049ba:	d90e      	bls.n	81049da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81049bc:	68fb      	ldr	r3, [r7, #12]
 81049be:	22ff      	movs	r2, #255	; 0xff
 81049c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81049c2:	68fb      	ldr	r3, [r7, #12]
 81049c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81049c6:	b2da      	uxtb	r2, r3
 81049c8:	8979      	ldrh	r1, [r7, #10]
 81049ca:	4b51      	ldr	r3, [pc, #324]	; (8104b10 <HAL_I2C_Master_Transmit+0x1e0>)
 81049cc:	9300      	str	r3, [sp, #0]
 81049ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81049d2:	68f8      	ldr	r0, [r7, #12]
 81049d4:	f000 fd16 	bl	8105404 <I2C_TransferConfig>
 81049d8:	e06c      	b.n	8104ab4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81049da:	68fb      	ldr	r3, [r7, #12]
 81049dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81049de:	b29a      	uxth	r2, r3
 81049e0:	68fb      	ldr	r3, [r7, #12]
 81049e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81049e4:	68fb      	ldr	r3, [r7, #12]
 81049e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81049e8:	b2da      	uxtb	r2, r3
 81049ea:	8979      	ldrh	r1, [r7, #10]
 81049ec:	4b48      	ldr	r3, [pc, #288]	; (8104b10 <HAL_I2C_Master_Transmit+0x1e0>)
 81049ee:	9300      	str	r3, [sp, #0]
 81049f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81049f4:	68f8      	ldr	r0, [r7, #12]
 81049f6:	f000 fd05 	bl	8105404 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 81049fa:	e05b      	b.n	8104ab4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81049fc:	697a      	ldr	r2, [r7, #20]
 81049fe:	6a39      	ldr	r1, [r7, #32]
 8104a00:	68f8      	ldr	r0, [r7, #12]
 8104a02:	f000 fb13 	bl	810502c <I2C_WaitOnTXISFlagUntilTimeout>
 8104a06:	4603      	mov	r3, r0
 8104a08:	2b00      	cmp	r3, #0
 8104a0a:	d001      	beq.n	8104a10 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8104a0c:	2301      	movs	r3, #1
 8104a0e:	e07b      	b.n	8104b08 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8104a10:	68fb      	ldr	r3, [r7, #12]
 8104a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a14:	781a      	ldrb	r2, [r3, #0]
 8104a16:	68fb      	ldr	r3, [r7, #12]
 8104a18:	681b      	ldr	r3, [r3, #0]
 8104a1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104a1c:	68fb      	ldr	r3, [r7, #12]
 8104a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a20:	1c5a      	adds	r2, r3, #1
 8104a22:	68fb      	ldr	r3, [r7, #12]
 8104a24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8104a26:	68fb      	ldr	r3, [r7, #12]
 8104a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a2a:	b29b      	uxth	r3, r3
 8104a2c:	3b01      	subs	r3, #1
 8104a2e:	b29a      	uxth	r2, r3
 8104a30:	68fb      	ldr	r3, [r7, #12]
 8104a32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8104a34:	68fb      	ldr	r3, [r7, #12]
 8104a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104a38:	3b01      	subs	r3, #1
 8104a3a:	b29a      	uxth	r2, r3
 8104a3c:	68fb      	ldr	r3, [r7, #12]
 8104a3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104a40:	68fb      	ldr	r3, [r7, #12]
 8104a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a44:	b29b      	uxth	r3, r3
 8104a46:	2b00      	cmp	r3, #0
 8104a48:	d034      	beq.n	8104ab4 <HAL_I2C_Master_Transmit+0x184>
 8104a4a:	68fb      	ldr	r3, [r7, #12]
 8104a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104a4e:	2b00      	cmp	r3, #0
 8104a50:	d130      	bne.n	8104ab4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104a52:	697b      	ldr	r3, [r7, #20]
 8104a54:	9300      	str	r3, [sp, #0]
 8104a56:	6a3b      	ldr	r3, [r7, #32]
 8104a58:	2200      	movs	r2, #0
 8104a5a:	2180      	movs	r1, #128	; 0x80
 8104a5c:	68f8      	ldr	r0, [r7, #12]
 8104a5e:	f000 fa96 	bl	8104f8e <I2C_WaitOnFlagUntilTimeout>
 8104a62:	4603      	mov	r3, r0
 8104a64:	2b00      	cmp	r3, #0
 8104a66:	d001      	beq.n	8104a6c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8104a68:	2301      	movs	r3, #1
 8104a6a:	e04d      	b.n	8104b08 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104a6c:	68fb      	ldr	r3, [r7, #12]
 8104a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a70:	b29b      	uxth	r3, r3
 8104a72:	2bff      	cmp	r3, #255	; 0xff
 8104a74:	d90e      	bls.n	8104a94 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104a76:	68fb      	ldr	r3, [r7, #12]
 8104a78:	22ff      	movs	r2, #255	; 0xff
 8104a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104a7c:	68fb      	ldr	r3, [r7, #12]
 8104a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104a80:	b2da      	uxtb	r2, r3
 8104a82:	8979      	ldrh	r1, [r7, #10]
 8104a84:	2300      	movs	r3, #0
 8104a86:	9300      	str	r3, [sp, #0]
 8104a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104a8c:	68f8      	ldr	r0, [r7, #12]
 8104a8e:	f000 fcb9 	bl	8105404 <I2C_TransferConfig>
 8104a92:	e00f      	b.n	8104ab4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104a94:	68fb      	ldr	r3, [r7, #12]
 8104a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104a98:	b29a      	uxth	r2, r3
 8104a9a:	68fb      	ldr	r3, [r7, #12]
 8104a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104a9e:	68fb      	ldr	r3, [r7, #12]
 8104aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104aa2:	b2da      	uxtb	r2, r3
 8104aa4:	8979      	ldrh	r1, [r7, #10]
 8104aa6:	2300      	movs	r3, #0
 8104aa8:	9300      	str	r3, [sp, #0]
 8104aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104aae:	68f8      	ldr	r0, [r7, #12]
 8104ab0:	f000 fca8 	bl	8105404 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8104ab4:	68fb      	ldr	r3, [r7, #12]
 8104ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ab8:	b29b      	uxth	r3, r3
 8104aba:	2b00      	cmp	r3, #0
 8104abc:	d19e      	bne.n	81049fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104abe:	697a      	ldr	r2, [r7, #20]
 8104ac0:	6a39      	ldr	r1, [r7, #32]
 8104ac2:	68f8      	ldr	r0, [r7, #12]
 8104ac4:	f000 faf9 	bl	81050ba <I2C_WaitOnSTOPFlagUntilTimeout>
 8104ac8:	4603      	mov	r3, r0
 8104aca:	2b00      	cmp	r3, #0
 8104acc:	d001      	beq.n	8104ad2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8104ace:	2301      	movs	r3, #1
 8104ad0:	e01a      	b.n	8104b08 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104ad2:	68fb      	ldr	r3, [r7, #12]
 8104ad4:	681b      	ldr	r3, [r3, #0]
 8104ad6:	2220      	movs	r2, #32
 8104ad8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104ada:	68fb      	ldr	r3, [r7, #12]
 8104adc:	681b      	ldr	r3, [r3, #0]
 8104ade:	6859      	ldr	r1, [r3, #4]
 8104ae0:	68fb      	ldr	r3, [r7, #12]
 8104ae2:	681a      	ldr	r2, [r3, #0]
 8104ae4:	4b0b      	ldr	r3, [pc, #44]	; (8104b14 <HAL_I2C_Master_Transmit+0x1e4>)
 8104ae6:	400b      	ands	r3, r1
 8104ae8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104aea:	68fb      	ldr	r3, [r7, #12]
 8104aec:	2220      	movs	r2, #32
 8104aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104af2:	68fb      	ldr	r3, [r7, #12]
 8104af4:	2200      	movs	r2, #0
 8104af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104afa:	68fb      	ldr	r3, [r7, #12]
 8104afc:	2200      	movs	r2, #0
 8104afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104b02:	2300      	movs	r3, #0
 8104b04:	e000      	b.n	8104b08 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8104b06:	2302      	movs	r3, #2
  }
}
 8104b08:	4618      	mov	r0, r3
 8104b0a:	3718      	adds	r7, #24
 8104b0c:	46bd      	mov	sp, r7
 8104b0e:	bd80      	pop	{r7, pc}
 8104b10:	80002000 	.word	0x80002000
 8104b14:	fe00e800 	.word	0xfe00e800

08104b18 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8104b18:	b580      	push	{r7, lr}
 8104b1a:	b088      	sub	sp, #32
 8104b1c:	af02      	add	r7, sp, #8
 8104b1e:	60f8      	str	r0, [r7, #12]
 8104b20:	607a      	str	r2, [r7, #4]
 8104b22:	461a      	mov	r2, r3
 8104b24:	460b      	mov	r3, r1
 8104b26:	817b      	strh	r3, [r7, #10]
 8104b28:	4613      	mov	r3, r2
 8104b2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104b2c:	68fb      	ldr	r3, [r7, #12]
 8104b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104b32:	b2db      	uxtb	r3, r3
 8104b34:	2b20      	cmp	r3, #32
 8104b36:	f040 80db 	bne.w	8104cf0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104b3a:	68fb      	ldr	r3, [r7, #12]
 8104b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104b40:	2b01      	cmp	r3, #1
 8104b42:	d101      	bne.n	8104b48 <HAL_I2C_Master_Receive+0x30>
 8104b44:	2302      	movs	r3, #2
 8104b46:	e0d4      	b.n	8104cf2 <HAL_I2C_Master_Receive+0x1da>
 8104b48:	68fb      	ldr	r3, [r7, #12]
 8104b4a:	2201      	movs	r2, #1
 8104b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104b50:	f7fe fa76 	bl	8103040 <HAL_GetTick>
 8104b54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104b56:	697b      	ldr	r3, [r7, #20]
 8104b58:	9300      	str	r3, [sp, #0]
 8104b5a:	2319      	movs	r3, #25
 8104b5c:	2201      	movs	r2, #1
 8104b5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104b62:	68f8      	ldr	r0, [r7, #12]
 8104b64:	f000 fa13 	bl	8104f8e <I2C_WaitOnFlagUntilTimeout>
 8104b68:	4603      	mov	r3, r0
 8104b6a:	2b00      	cmp	r3, #0
 8104b6c:	d001      	beq.n	8104b72 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8104b6e:	2301      	movs	r3, #1
 8104b70:	e0bf      	b.n	8104cf2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8104b72:	68fb      	ldr	r3, [r7, #12]
 8104b74:	2222      	movs	r2, #34	; 0x22
 8104b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8104b7a:	68fb      	ldr	r3, [r7, #12]
 8104b7c:	2210      	movs	r2, #16
 8104b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104b82:	68fb      	ldr	r3, [r7, #12]
 8104b84:	2200      	movs	r2, #0
 8104b86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8104b88:	68fb      	ldr	r3, [r7, #12]
 8104b8a:	687a      	ldr	r2, [r7, #4]
 8104b8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104b8e:	68fb      	ldr	r3, [r7, #12]
 8104b90:	893a      	ldrh	r2, [r7, #8]
 8104b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104b94:	68fb      	ldr	r3, [r7, #12]
 8104b96:	2200      	movs	r2, #0
 8104b98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104b9a:	68fb      	ldr	r3, [r7, #12]
 8104b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104b9e:	b29b      	uxth	r3, r3
 8104ba0:	2bff      	cmp	r3, #255	; 0xff
 8104ba2:	d90e      	bls.n	8104bc2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104ba4:	68fb      	ldr	r3, [r7, #12]
 8104ba6:	22ff      	movs	r2, #255	; 0xff
 8104ba8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104baa:	68fb      	ldr	r3, [r7, #12]
 8104bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104bae:	b2da      	uxtb	r2, r3
 8104bb0:	8979      	ldrh	r1, [r7, #10]
 8104bb2:	4b52      	ldr	r3, [pc, #328]	; (8104cfc <HAL_I2C_Master_Receive+0x1e4>)
 8104bb4:	9300      	str	r3, [sp, #0]
 8104bb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104bba:	68f8      	ldr	r0, [r7, #12]
 8104bbc:	f000 fc22 	bl	8105404 <I2C_TransferConfig>
 8104bc0:	e06d      	b.n	8104c9e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104bc2:	68fb      	ldr	r3, [r7, #12]
 8104bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104bc6:	b29a      	uxth	r2, r3
 8104bc8:	68fb      	ldr	r3, [r7, #12]
 8104bca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104bcc:	68fb      	ldr	r3, [r7, #12]
 8104bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104bd0:	b2da      	uxtb	r2, r3
 8104bd2:	8979      	ldrh	r1, [r7, #10]
 8104bd4:	4b49      	ldr	r3, [pc, #292]	; (8104cfc <HAL_I2C_Master_Receive+0x1e4>)
 8104bd6:	9300      	str	r3, [sp, #0]
 8104bd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104bdc:	68f8      	ldr	r0, [r7, #12]
 8104bde:	f000 fc11 	bl	8105404 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8104be2:	e05c      	b.n	8104c9e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104be4:	697a      	ldr	r2, [r7, #20]
 8104be6:	6a39      	ldr	r1, [r7, #32]
 8104be8:	68f8      	ldr	r0, [r7, #12]
 8104bea:	f000 faa9 	bl	8105140 <I2C_WaitOnRXNEFlagUntilTimeout>
 8104bee:	4603      	mov	r3, r0
 8104bf0:	2b00      	cmp	r3, #0
 8104bf2:	d001      	beq.n	8104bf8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8104bf4:	2301      	movs	r3, #1
 8104bf6:	e07c      	b.n	8104cf2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104bf8:	68fb      	ldr	r3, [r7, #12]
 8104bfa:	681b      	ldr	r3, [r3, #0]
 8104bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104bfe:	68fb      	ldr	r3, [r7, #12]
 8104c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c02:	b2d2      	uxtb	r2, r2
 8104c04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104c06:	68fb      	ldr	r3, [r7, #12]
 8104c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c0a:	1c5a      	adds	r2, r3, #1
 8104c0c:	68fb      	ldr	r3, [r7, #12]
 8104c0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8104c10:	68fb      	ldr	r3, [r7, #12]
 8104c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c14:	3b01      	subs	r3, #1
 8104c16:	b29a      	uxth	r2, r3
 8104c18:	68fb      	ldr	r3, [r7, #12]
 8104c1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8104c1c:	68fb      	ldr	r3, [r7, #12]
 8104c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c20:	b29b      	uxth	r3, r3
 8104c22:	3b01      	subs	r3, #1
 8104c24:	b29a      	uxth	r2, r3
 8104c26:	68fb      	ldr	r3, [r7, #12]
 8104c28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104c2a:	68fb      	ldr	r3, [r7, #12]
 8104c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c2e:	b29b      	uxth	r3, r3
 8104c30:	2b00      	cmp	r3, #0
 8104c32:	d034      	beq.n	8104c9e <HAL_I2C_Master_Receive+0x186>
 8104c34:	68fb      	ldr	r3, [r7, #12]
 8104c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c38:	2b00      	cmp	r3, #0
 8104c3a:	d130      	bne.n	8104c9e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104c3c:	697b      	ldr	r3, [r7, #20]
 8104c3e:	9300      	str	r3, [sp, #0]
 8104c40:	6a3b      	ldr	r3, [r7, #32]
 8104c42:	2200      	movs	r2, #0
 8104c44:	2180      	movs	r1, #128	; 0x80
 8104c46:	68f8      	ldr	r0, [r7, #12]
 8104c48:	f000 f9a1 	bl	8104f8e <I2C_WaitOnFlagUntilTimeout>
 8104c4c:	4603      	mov	r3, r0
 8104c4e:	2b00      	cmp	r3, #0
 8104c50:	d001      	beq.n	8104c56 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8104c52:	2301      	movs	r3, #1
 8104c54:	e04d      	b.n	8104cf2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104c56:	68fb      	ldr	r3, [r7, #12]
 8104c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c5a:	b29b      	uxth	r3, r3
 8104c5c:	2bff      	cmp	r3, #255	; 0xff
 8104c5e:	d90e      	bls.n	8104c7e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104c60:	68fb      	ldr	r3, [r7, #12]
 8104c62:	22ff      	movs	r2, #255	; 0xff
 8104c64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104c66:	68fb      	ldr	r3, [r7, #12]
 8104c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c6a:	b2da      	uxtb	r2, r3
 8104c6c:	8979      	ldrh	r1, [r7, #10]
 8104c6e:	2300      	movs	r3, #0
 8104c70:	9300      	str	r3, [sp, #0]
 8104c72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104c76:	68f8      	ldr	r0, [r7, #12]
 8104c78:	f000 fbc4 	bl	8105404 <I2C_TransferConfig>
 8104c7c:	e00f      	b.n	8104c9e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8104c7e:	68fb      	ldr	r3, [r7, #12]
 8104c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c82:	b29a      	uxth	r2, r3
 8104c84:	68fb      	ldr	r3, [r7, #12]
 8104c86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104c88:	68fb      	ldr	r3, [r7, #12]
 8104c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104c8c:	b2da      	uxtb	r2, r3
 8104c8e:	8979      	ldrh	r1, [r7, #10]
 8104c90:	2300      	movs	r3, #0
 8104c92:	9300      	str	r3, [sp, #0]
 8104c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104c98:	68f8      	ldr	r0, [r7, #12]
 8104c9a:	f000 fbb3 	bl	8105404 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8104c9e:	68fb      	ldr	r3, [r7, #12]
 8104ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ca2:	b29b      	uxth	r3, r3
 8104ca4:	2b00      	cmp	r3, #0
 8104ca6:	d19d      	bne.n	8104be4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104ca8:	697a      	ldr	r2, [r7, #20]
 8104caa:	6a39      	ldr	r1, [r7, #32]
 8104cac:	68f8      	ldr	r0, [r7, #12]
 8104cae:	f000 fa04 	bl	81050ba <I2C_WaitOnSTOPFlagUntilTimeout>
 8104cb2:	4603      	mov	r3, r0
 8104cb4:	2b00      	cmp	r3, #0
 8104cb6:	d001      	beq.n	8104cbc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8104cb8:	2301      	movs	r3, #1
 8104cba:	e01a      	b.n	8104cf2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104cbc:	68fb      	ldr	r3, [r7, #12]
 8104cbe:	681b      	ldr	r3, [r3, #0]
 8104cc0:	2220      	movs	r2, #32
 8104cc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104cc4:	68fb      	ldr	r3, [r7, #12]
 8104cc6:	681b      	ldr	r3, [r3, #0]
 8104cc8:	6859      	ldr	r1, [r3, #4]
 8104cca:	68fb      	ldr	r3, [r7, #12]
 8104ccc:	681a      	ldr	r2, [r3, #0]
 8104cce:	4b0c      	ldr	r3, [pc, #48]	; (8104d00 <HAL_I2C_Master_Receive+0x1e8>)
 8104cd0:	400b      	ands	r3, r1
 8104cd2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104cd4:	68fb      	ldr	r3, [r7, #12]
 8104cd6:	2220      	movs	r2, #32
 8104cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104cdc:	68fb      	ldr	r3, [r7, #12]
 8104cde:	2200      	movs	r2, #0
 8104ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104ce4:	68fb      	ldr	r3, [r7, #12]
 8104ce6:	2200      	movs	r2, #0
 8104ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104cec:	2300      	movs	r3, #0
 8104cee:	e000      	b.n	8104cf2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8104cf0:	2302      	movs	r3, #2
  }
}
 8104cf2:	4618      	mov	r0, r3
 8104cf4:	3718      	adds	r7, #24
 8104cf6:	46bd      	mov	sp, r7
 8104cf8:	bd80      	pop	{r7, pc}
 8104cfa:	bf00      	nop
 8104cfc:	80002400 	.word	0x80002400
 8104d00:	fe00e800 	.word	0xfe00e800

08104d04 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8104d04:	b580      	push	{r7, lr}
 8104d06:	b08a      	sub	sp, #40	; 0x28
 8104d08:	af02      	add	r7, sp, #8
 8104d0a:	60f8      	str	r0, [r7, #12]
 8104d0c:	607a      	str	r2, [r7, #4]
 8104d0e:	603b      	str	r3, [r7, #0]
 8104d10:	460b      	mov	r3, r1
 8104d12:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8104d14:	2300      	movs	r3, #0
 8104d16:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104d18:	68fb      	ldr	r3, [r7, #12]
 8104d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104d1e:	b2db      	uxtb	r3, r3
 8104d20:	2b20      	cmp	r3, #32
 8104d22:	f040 80f1 	bne.w	8104f08 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8104d26:	68fb      	ldr	r3, [r7, #12]
 8104d28:	681b      	ldr	r3, [r3, #0]
 8104d2a:	699b      	ldr	r3, [r3, #24]
 8104d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104d34:	d101      	bne.n	8104d3a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8104d36:	2302      	movs	r3, #2
 8104d38:	e0e7      	b.n	8104f0a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104d3a:	68fb      	ldr	r3, [r7, #12]
 8104d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104d40:	2b01      	cmp	r3, #1
 8104d42:	d101      	bne.n	8104d48 <HAL_I2C_IsDeviceReady+0x44>
 8104d44:	2302      	movs	r3, #2
 8104d46:	e0e0      	b.n	8104f0a <HAL_I2C_IsDeviceReady+0x206>
 8104d48:	68fb      	ldr	r3, [r7, #12]
 8104d4a:	2201      	movs	r2, #1
 8104d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104d50:	68fb      	ldr	r3, [r7, #12]
 8104d52:	2224      	movs	r2, #36	; 0x24
 8104d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104d58:	68fb      	ldr	r3, [r7, #12]
 8104d5a:	2200      	movs	r2, #0
 8104d5c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8104d5e:	68fb      	ldr	r3, [r7, #12]
 8104d60:	68db      	ldr	r3, [r3, #12]
 8104d62:	2b01      	cmp	r3, #1
 8104d64:	d107      	bne.n	8104d76 <HAL_I2C_IsDeviceReady+0x72>
 8104d66:	897b      	ldrh	r3, [r7, #10]
 8104d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8104d6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104d70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8104d74:	e004      	b.n	8104d80 <HAL_I2C_IsDeviceReady+0x7c>
 8104d76:	897b      	ldrh	r3, [r7, #10]
 8104d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8104d7c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8104d80:	68fa      	ldr	r2, [r7, #12]
 8104d82:	6812      	ldr	r2, [r2, #0]
 8104d84:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8104d86:	f7fe f95b 	bl	8103040 <HAL_GetTick>
 8104d8a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8104d8c:	68fb      	ldr	r3, [r7, #12]
 8104d8e:	681b      	ldr	r3, [r3, #0]
 8104d90:	699b      	ldr	r3, [r3, #24]
 8104d92:	f003 0320 	and.w	r3, r3, #32
 8104d96:	2b20      	cmp	r3, #32
 8104d98:	bf0c      	ite	eq
 8104d9a:	2301      	moveq	r3, #1
 8104d9c:	2300      	movne	r3, #0
 8104d9e:	b2db      	uxtb	r3, r3
 8104da0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8104da2:	68fb      	ldr	r3, [r7, #12]
 8104da4:	681b      	ldr	r3, [r3, #0]
 8104da6:	699b      	ldr	r3, [r3, #24]
 8104da8:	f003 0310 	and.w	r3, r3, #16
 8104dac:	2b10      	cmp	r3, #16
 8104dae:	bf0c      	ite	eq
 8104db0:	2301      	moveq	r3, #1
 8104db2:	2300      	movne	r3, #0
 8104db4:	b2db      	uxtb	r3, r3
 8104db6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8104db8:	e034      	b.n	8104e24 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8104dba:	683b      	ldr	r3, [r7, #0]
 8104dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104dc0:	d01a      	beq.n	8104df8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8104dc2:	f7fe f93d 	bl	8103040 <HAL_GetTick>
 8104dc6:	4602      	mov	r2, r0
 8104dc8:	69bb      	ldr	r3, [r7, #24]
 8104dca:	1ad3      	subs	r3, r2, r3
 8104dcc:	683a      	ldr	r2, [r7, #0]
 8104dce:	429a      	cmp	r2, r3
 8104dd0:	d302      	bcc.n	8104dd8 <HAL_I2C_IsDeviceReady+0xd4>
 8104dd2:	683b      	ldr	r3, [r7, #0]
 8104dd4:	2b00      	cmp	r3, #0
 8104dd6:	d10f      	bne.n	8104df8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8104dd8:	68fb      	ldr	r3, [r7, #12]
 8104dda:	2220      	movs	r2, #32
 8104ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104de0:	68fb      	ldr	r3, [r7, #12]
 8104de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104de4:	f043 0220 	orr.w	r2, r3, #32
 8104de8:	68fb      	ldr	r3, [r7, #12]
 8104dea:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8104dec:	68fb      	ldr	r3, [r7, #12]
 8104dee:	2200      	movs	r2, #0
 8104df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8104df4:	2301      	movs	r3, #1
 8104df6:	e088      	b.n	8104f0a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8104df8:	68fb      	ldr	r3, [r7, #12]
 8104dfa:	681b      	ldr	r3, [r3, #0]
 8104dfc:	699b      	ldr	r3, [r3, #24]
 8104dfe:	f003 0320 	and.w	r3, r3, #32
 8104e02:	2b20      	cmp	r3, #32
 8104e04:	bf0c      	ite	eq
 8104e06:	2301      	moveq	r3, #1
 8104e08:	2300      	movne	r3, #0
 8104e0a:	b2db      	uxtb	r3, r3
 8104e0c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8104e0e:	68fb      	ldr	r3, [r7, #12]
 8104e10:	681b      	ldr	r3, [r3, #0]
 8104e12:	699b      	ldr	r3, [r3, #24]
 8104e14:	f003 0310 	and.w	r3, r3, #16
 8104e18:	2b10      	cmp	r3, #16
 8104e1a:	bf0c      	ite	eq
 8104e1c:	2301      	moveq	r3, #1
 8104e1e:	2300      	movne	r3, #0
 8104e20:	b2db      	uxtb	r3, r3
 8104e22:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8104e24:	7ffb      	ldrb	r3, [r7, #31]
 8104e26:	2b00      	cmp	r3, #0
 8104e28:	d102      	bne.n	8104e30 <HAL_I2C_IsDeviceReady+0x12c>
 8104e2a:	7fbb      	ldrb	r3, [r7, #30]
 8104e2c:	2b00      	cmp	r3, #0
 8104e2e:	d0c4      	beq.n	8104dba <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8104e30:	68fb      	ldr	r3, [r7, #12]
 8104e32:	681b      	ldr	r3, [r3, #0]
 8104e34:	699b      	ldr	r3, [r3, #24]
 8104e36:	f003 0310 	and.w	r3, r3, #16
 8104e3a:	2b10      	cmp	r3, #16
 8104e3c:	d01a      	beq.n	8104e74 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104e3e:	69bb      	ldr	r3, [r7, #24]
 8104e40:	9300      	str	r3, [sp, #0]
 8104e42:	683b      	ldr	r3, [r7, #0]
 8104e44:	2200      	movs	r2, #0
 8104e46:	2120      	movs	r1, #32
 8104e48:	68f8      	ldr	r0, [r7, #12]
 8104e4a:	f000 f8a0 	bl	8104f8e <I2C_WaitOnFlagUntilTimeout>
 8104e4e:	4603      	mov	r3, r0
 8104e50:	2b00      	cmp	r3, #0
 8104e52:	d001      	beq.n	8104e58 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8104e54:	2301      	movs	r3, #1
 8104e56:	e058      	b.n	8104f0a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104e58:	68fb      	ldr	r3, [r7, #12]
 8104e5a:	681b      	ldr	r3, [r3, #0]
 8104e5c:	2220      	movs	r2, #32
 8104e5e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8104e60:	68fb      	ldr	r3, [r7, #12]
 8104e62:	2220      	movs	r2, #32
 8104e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104e68:	68fb      	ldr	r3, [r7, #12]
 8104e6a:	2200      	movs	r2, #0
 8104e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8104e70:	2300      	movs	r3, #0
 8104e72:	e04a      	b.n	8104f0a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104e74:	69bb      	ldr	r3, [r7, #24]
 8104e76:	9300      	str	r3, [sp, #0]
 8104e78:	683b      	ldr	r3, [r7, #0]
 8104e7a:	2200      	movs	r2, #0
 8104e7c:	2120      	movs	r1, #32
 8104e7e:	68f8      	ldr	r0, [r7, #12]
 8104e80:	f000 f885 	bl	8104f8e <I2C_WaitOnFlagUntilTimeout>
 8104e84:	4603      	mov	r3, r0
 8104e86:	2b00      	cmp	r3, #0
 8104e88:	d001      	beq.n	8104e8e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8104e8a:	2301      	movs	r3, #1
 8104e8c:	e03d      	b.n	8104f0a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104e8e:	68fb      	ldr	r3, [r7, #12]
 8104e90:	681b      	ldr	r3, [r3, #0]
 8104e92:	2210      	movs	r2, #16
 8104e94:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104e96:	68fb      	ldr	r3, [r7, #12]
 8104e98:	681b      	ldr	r3, [r3, #0]
 8104e9a:	2220      	movs	r2, #32
 8104e9c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8104e9e:	697b      	ldr	r3, [r7, #20]
 8104ea0:	687a      	ldr	r2, [r7, #4]
 8104ea2:	429a      	cmp	r2, r3
 8104ea4:	d118      	bne.n	8104ed8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8104ea6:	68fb      	ldr	r3, [r7, #12]
 8104ea8:	681b      	ldr	r3, [r3, #0]
 8104eaa:	685a      	ldr	r2, [r3, #4]
 8104eac:	68fb      	ldr	r3, [r7, #12]
 8104eae:	681b      	ldr	r3, [r3, #0]
 8104eb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8104eb4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8104eb6:	69bb      	ldr	r3, [r7, #24]
 8104eb8:	9300      	str	r3, [sp, #0]
 8104eba:	683b      	ldr	r3, [r7, #0]
 8104ebc:	2200      	movs	r2, #0
 8104ebe:	2120      	movs	r1, #32
 8104ec0:	68f8      	ldr	r0, [r7, #12]
 8104ec2:	f000 f864 	bl	8104f8e <I2C_WaitOnFlagUntilTimeout>
 8104ec6:	4603      	mov	r3, r0
 8104ec8:	2b00      	cmp	r3, #0
 8104eca:	d001      	beq.n	8104ed0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8104ecc:	2301      	movs	r3, #1
 8104ece:	e01c      	b.n	8104f0a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104ed0:	68fb      	ldr	r3, [r7, #12]
 8104ed2:	681b      	ldr	r3, [r3, #0]
 8104ed4:	2220      	movs	r2, #32
 8104ed6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8104ed8:	697b      	ldr	r3, [r7, #20]
 8104eda:	3301      	adds	r3, #1
 8104edc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8104ede:	697b      	ldr	r3, [r7, #20]
 8104ee0:	687a      	ldr	r2, [r7, #4]
 8104ee2:	429a      	cmp	r2, r3
 8104ee4:	f63f af3b 	bhi.w	8104d5e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8104ee8:	68fb      	ldr	r3, [r7, #12]
 8104eea:	2220      	movs	r2, #32
 8104eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104ef0:	68fb      	ldr	r3, [r7, #12]
 8104ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104ef4:	f043 0220 	orr.w	r2, r3, #32
 8104ef8:	68fb      	ldr	r3, [r7, #12]
 8104efa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104efc:	68fb      	ldr	r3, [r7, #12]
 8104efe:	2200      	movs	r2, #0
 8104f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8104f04:	2301      	movs	r3, #1
 8104f06:	e000      	b.n	8104f0a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8104f08:	2302      	movs	r3, #2
  }
}
 8104f0a:	4618      	mov	r0, r3
 8104f0c:	3720      	adds	r7, #32
 8104f0e:	46bd      	mov	sp, r7
 8104f10:	bd80      	pop	{r7, pc}

08104f12 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8104f12:	b480      	push	{r7}
 8104f14:	b083      	sub	sp, #12
 8104f16:	af00      	add	r7, sp, #0
 8104f18:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8104f1a:	687b      	ldr	r3, [r7, #4]
 8104f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104f20:	b2db      	uxtb	r3, r3
}
 8104f22:	4618      	mov	r0, r3
 8104f24:	370c      	adds	r7, #12
 8104f26:	46bd      	mov	sp, r7
 8104f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f2c:	4770      	bx	lr

08104f2e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8104f2e:	b480      	push	{r7}
 8104f30:	b083      	sub	sp, #12
 8104f32:	af00      	add	r7, sp, #0
 8104f34:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8104f36:	687b      	ldr	r3, [r7, #4]
 8104f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8104f3a:	4618      	mov	r0, r3
 8104f3c:	370c      	adds	r7, #12
 8104f3e:	46bd      	mov	sp, r7
 8104f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f44:	4770      	bx	lr

08104f46 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8104f46:	b480      	push	{r7}
 8104f48:	b083      	sub	sp, #12
 8104f4a:	af00      	add	r7, sp, #0
 8104f4c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104f4e:	687b      	ldr	r3, [r7, #4]
 8104f50:	681b      	ldr	r3, [r3, #0]
 8104f52:	699b      	ldr	r3, [r3, #24]
 8104f54:	f003 0302 	and.w	r3, r3, #2
 8104f58:	2b02      	cmp	r3, #2
 8104f5a:	d103      	bne.n	8104f64 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	681b      	ldr	r3, [r3, #0]
 8104f60:	2200      	movs	r2, #0
 8104f62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8104f64:	687b      	ldr	r3, [r7, #4]
 8104f66:	681b      	ldr	r3, [r3, #0]
 8104f68:	699b      	ldr	r3, [r3, #24]
 8104f6a:	f003 0301 	and.w	r3, r3, #1
 8104f6e:	2b01      	cmp	r3, #1
 8104f70:	d007      	beq.n	8104f82 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8104f72:	687b      	ldr	r3, [r7, #4]
 8104f74:	681b      	ldr	r3, [r3, #0]
 8104f76:	699a      	ldr	r2, [r3, #24]
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	681b      	ldr	r3, [r3, #0]
 8104f7c:	f042 0201 	orr.w	r2, r2, #1
 8104f80:	619a      	str	r2, [r3, #24]
  }
}
 8104f82:	bf00      	nop
 8104f84:	370c      	adds	r7, #12
 8104f86:	46bd      	mov	sp, r7
 8104f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f8c:	4770      	bx	lr

08104f8e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8104f8e:	b580      	push	{r7, lr}
 8104f90:	b084      	sub	sp, #16
 8104f92:	af00      	add	r7, sp, #0
 8104f94:	60f8      	str	r0, [r7, #12]
 8104f96:	60b9      	str	r1, [r7, #8]
 8104f98:	603b      	str	r3, [r7, #0]
 8104f9a:	4613      	mov	r3, r2
 8104f9c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104f9e:	e031      	b.n	8105004 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104fa0:	683b      	ldr	r3, [r7, #0]
 8104fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104fa6:	d02d      	beq.n	8105004 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104fa8:	f7fe f84a 	bl	8103040 <HAL_GetTick>
 8104fac:	4602      	mov	r2, r0
 8104fae:	69bb      	ldr	r3, [r7, #24]
 8104fb0:	1ad3      	subs	r3, r2, r3
 8104fb2:	683a      	ldr	r2, [r7, #0]
 8104fb4:	429a      	cmp	r2, r3
 8104fb6:	d302      	bcc.n	8104fbe <I2C_WaitOnFlagUntilTimeout+0x30>
 8104fb8:	683b      	ldr	r3, [r7, #0]
 8104fba:	2b00      	cmp	r3, #0
 8104fbc:	d122      	bne.n	8105004 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8104fbe:	68fb      	ldr	r3, [r7, #12]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	699a      	ldr	r2, [r3, #24]
 8104fc4:	68bb      	ldr	r3, [r7, #8]
 8104fc6:	4013      	ands	r3, r2
 8104fc8:	68ba      	ldr	r2, [r7, #8]
 8104fca:	429a      	cmp	r2, r3
 8104fcc:	bf0c      	ite	eq
 8104fce:	2301      	moveq	r3, #1
 8104fd0:	2300      	movne	r3, #0
 8104fd2:	b2db      	uxtb	r3, r3
 8104fd4:	461a      	mov	r2, r3
 8104fd6:	79fb      	ldrb	r3, [r7, #7]
 8104fd8:	429a      	cmp	r2, r3
 8104fda:	d113      	bne.n	8105004 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104fdc:	68fb      	ldr	r3, [r7, #12]
 8104fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104fe0:	f043 0220 	orr.w	r2, r3, #32
 8104fe4:	68fb      	ldr	r3, [r7, #12]
 8104fe6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8104fe8:	68fb      	ldr	r3, [r7, #12]
 8104fea:	2220      	movs	r2, #32
 8104fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8104ff0:	68fb      	ldr	r3, [r7, #12]
 8104ff2:	2200      	movs	r2, #0
 8104ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8104ff8:	68fb      	ldr	r3, [r7, #12]
 8104ffa:	2200      	movs	r2, #0
 8104ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8105000:	2301      	movs	r3, #1
 8105002:	e00f      	b.n	8105024 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105004:	68fb      	ldr	r3, [r7, #12]
 8105006:	681b      	ldr	r3, [r3, #0]
 8105008:	699a      	ldr	r2, [r3, #24]
 810500a:	68bb      	ldr	r3, [r7, #8]
 810500c:	4013      	ands	r3, r2
 810500e:	68ba      	ldr	r2, [r7, #8]
 8105010:	429a      	cmp	r2, r3
 8105012:	bf0c      	ite	eq
 8105014:	2301      	moveq	r3, #1
 8105016:	2300      	movne	r3, #0
 8105018:	b2db      	uxtb	r3, r3
 810501a:	461a      	mov	r2, r3
 810501c:	79fb      	ldrb	r3, [r7, #7]
 810501e:	429a      	cmp	r2, r3
 8105020:	d0be      	beq.n	8104fa0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8105022:	2300      	movs	r3, #0
}
 8105024:	4618      	mov	r0, r3
 8105026:	3710      	adds	r7, #16
 8105028:	46bd      	mov	sp, r7
 810502a:	bd80      	pop	{r7, pc}

0810502c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810502c:	b580      	push	{r7, lr}
 810502e:	b084      	sub	sp, #16
 8105030:	af00      	add	r7, sp, #0
 8105032:	60f8      	str	r0, [r7, #12]
 8105034:	60b9      	str	r1, [r7, #8]
 8105036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105038:	e033      	b.n	81050a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810503a:	687a      	ldr	r2, [r7, #4]
 810503c:	68b9      	ldr	r1, [r7, #8]
 810503e:	68f8      	ldr	r0, [r7, #12]
 8105040:	f000 f900 	bl	8105244 <I2C_IsErrorOccurred>
 8105044:	4603      	mov	r3, r0
 8105046:	2b00      	cmp	r3, #0
 8105048:	d001      	beq.n	810504e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810504a:	2301      	movs	r3, #1
 810504c:	e031      	b.n	81050b2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810504e:	68bb      	ldr	r3, [r7, #8]
 8105050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105054:	d025      	beq.n	81050a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105056:	f7fd fff3 	bl	8103040 <HAL_GetTick>
 810505a:	4602      	mov	r2, r0
 810505c:	687b      	ldr	r3, [r7, #4]
 810505e:	1ad3      	subs	r3, r2, r3
 8105060:	68ba      	ldr	r2, [r7, #8]
 8105062:	429a      	cmp	r2, r3
 8105064:	d302      	bcc.n	810506c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8105066:	68bb      	ldr	r3, [r7, #8]
 8105068:	2b00      	cmp	r3, #0
 810506a:	d11a      	bne.n	81050a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 810506c:	68fb      	ldr	r3, [r7, #12]
 810506e:	681b      	ldr	r3, [r3, #0]
 8105070:	699b      	ldr	r3, [r3, #24]
 8105072:	f003 0302 	and.w	r3, r3, #2
 8105076:	2b02      	cmp	r3, #2
 8105078:	d013      	beq.n	81050a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810507a:	68fb      	ldr	r3, [r7, #12]
 810507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810507e:	f043 0220 	orr.w	r2, r3, #32
 8105082:	68fb      	ldr	r3, [r7, #12]
 8105084:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8105086:	68fb      	ldr	r3, [r7, #12]
 8105088:	2220      	movs	r2, #32
 810508a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810508e:	68fb      	ldr	r3, [r7, #12]
 8105090:	2200      	movs	r2, #0
 8105092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8105096:	68fb      	ldr	r3, [r7, #12]
 8105098:	2200      	movs	r2, #0
 810509a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 810509e:	2301      	movs	r3, #1
 81050a0:	e007      	b.n	81050b2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81050a2:	68fb      	ldr	r3, [r7, #12]
 81050a4:	681b      	ldr	r3, [r3, #0]
 81050a6:	699b      	ldr	r3, [r3, #24]
 81050a8:	f003 0302 	and.w	r3, r3, #2
 81050ac:	2b02      	cmp	r3, #2
 81050ae:	d1c4      	bne.n	810503a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 81050b0:	2300      	movs	r3, #0
}
 81050b2:	4618      	mov	r0, r3
 81050b4:	3710      	adds	r7, #16
 81050b6:	46bd      	mov	sp, r7
 81050b8:	bd80      	pop	{r7, pc}

081050ba <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81050ba:	b580      	push	{r7, lr}
 81050bc:	b084      	sub	sp, #16
 81050be:	af00      	add	r7, sp, #0
 81050c0:	60f8      	str	r0, [r7, #12]
 81050c2:	60b9      	str	r1, [r7, #8]
 81050c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81050c6:	e02f      	b.n	8105128 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81050c8:	687a      	ldr	r2, [r7, #4]
 81050ca:	68b9      	ldr	r1, [r7, #8]
 81050cc:	68f8      	ldr	r0, [r7, #12]
 81050ce:	f000 f8b9 	bl	8105244 <I2C_IsErrorOccurred>
 81050d2:	4603      	mov	r3, r0
 81050d4:	2b00      	cmp	r3, #0
 81050d6:	d001      	beq.n	81050dc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81050d8:	2301      	movs	r3, #1
 81050da:	e02d      	b.n	8105138 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81050dc:	f7fd ffb0 	bl	8103040 <HAL_GetTick>
 81050e0:	4602      	mov	r2, r0
 81050e2:	687b      	ldr	r3, [r7, #4]
 81050e4:	1ad3      	subs	r3, r2, r3
 81050e6:	68ba      	ldr	r2, [r7, #8]
 81050e8:	429a      	cmp	r2, r3
 81050ea:	d302      	bcc.n	81050f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81050ec:	68bb      	ldr	r3, [r7, #8]
 81050ee:	2b00      	cmp	r3, #0
 81050f0:	d11a      	bne.n	8105128 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 81050f2:	68fb      	ldr	r3, [r7, #12]
 81050f4:	681b      	ldr	r3, [r3, #0]
 81050f6:	699b      	ldr	r3, [r3, #24]
 81050f8:	f003 0320 	and.w	r3, r3, #32
 81050fc:	2b20      	cmp	r3, #32
 81050fe:	d013      	beq.n	8105128 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105100:	68fb      	ldr	r3, [r7, #12]
 8105102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105104:	f043 0220 	orr.w	r2, r3, #32
 8105108:	68fb      	ldr	r3, [r7, #12]
 810510a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810510c:	68fb      	ldr	r3, [r7, #12]
 810510e:	2220      	movs	r2, #32
 8105110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105114:	68fb      	ldr	r3, [r7, #12]
 8105116:	2200      	movs	r2, #0
 8105118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810511c:	68fb      	ldr	r3, [r7, #12]
 810511e:	2200      	movs	r2, #0
 8105120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8105124:	2301      	movs	r3, #1
 8105126:	e007      	b.n	8105138 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105128:	68fb      	ldr	r3, [r7, #12]
 810512a:	681b      	ldr	r3, [r3, #0]
 810512c:	699b      	ldr	r3, [r3, #24]
 810512e:	f003 0320 	and.w	r3, r3, #32
 8105132:	2b20      	cmp	r3, #32
 8105134:	d1c8      	bne.n	81050c8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8105136:	2300      	movs	r3, #0
}
 8105138:	4618      	mov	r0, r3
 810513a:	3710      	adds	r7, #16
 810513c:	46bd      	mov	sp, r7
 810513e:	bd80      	pop	{r7, pc}

08105140 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8105140:	b580      	push	{r7, lr}
 8105142:	b084      	sub	sp, #16
 8105144:	af00      	add	r7, sp, #0
 8105146:	60f8      	str	r0, [r7, #12]
 8105148:	60b9      	str	r1, [r7, #8]
 810514a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 810514c:	e06b      	b.n	8105226 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810514e:	687a      	ldr	r2, [r7, #4]
 8105150:	68b9      	ldr	r1, [r7, #8]
 8105152:	68f8      	ldr	r0, [r7, #12]
 8105154:	f000 f876 	bl	8105244 <I2C_IsErrorOccurred>
 8105158:	4603      	mov	r3, r0
 810515a:	2b00      	cmp	r3, #0
 810515c:	d001      	beq.n	8105162 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810515e:	2301      	movs	r3, #1
 8105160:	e069      	b.n	8105236 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8105162:	68fb      	ldr	r3, [r7, #12]
 8105164:	681b      	ldr	r3, [r3, #0]
 8105166:	699b      	ldr	r3, [r3, #24]
 8105168:	f003 0320 	and.w	r3, r3, #32
 810516c:	2b20      	cmp	r3, #32
 810516e:	d138      	bne.n	81051e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8105170:	68fb      	ldr	r3, [r7, #12]
 8105172:	681b      	ldr	r3, [r3, #0]
 8105174:	699b      	ldr	r3, [r3, #24]
 8105176:	f003 0304 	and.w	r3, r3, #4
 810517a:	2b04      	cmp	r3, #4
 810517c:	d105      	bne.n	810518a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 810517e:	68fb      	ldr	r3, [r7, #12]
 8105180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105182:	2b00      	cmp	r3, #0
 8105184:	d001      	beq.n	810518a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8105186:	2300      	movs	r3, #0
 8105188:	e055      	b.n	8105236 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 810518a:	68fb      	ldr	r3, [r7, #12]
 810518c:	681b      	ldr	r3, [r3, #0]
 810518e:	699b      	ldr	r3, [r3, #24]
 8105190:	f003 0310 	and.w	r3, r3, #16
 8105194:	2b10      	cmp	r3, #16
 8105196:	d107      	bne.n	81051a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105198:	68fb      	ldr	r3, [r7, #12]
 810519a:	681b      	ldr	r3, [r3, #0]
 810519c:	2210      	movs	r2, #16
 810519e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 81051a0:	68fb      	ldr	r3, [r7, #12]
 81051a2:	2204      	movs	r2, #4
 81051a4:	645a      	str	r2, [r3, #68]	; 0x44
 81051a6:	e002      	b.n	81051ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81051a8:	68fb      	ldr	r3, [r7, #12]
 81051aa:	2200      	movs	r2, #0
 81051ac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81051ae:	68fb      	ldr	r3, [r7, #12]
 81051b0:	681b      	ldr	r3, [r3, #0]
 81051b2:	2220      	movs	r2, #32
 81051b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 81051b6:	68fb      	ldr	r3, [r7, #12]
 81051b8:	681b      	ldr	r3, [r3, #0]
 81051ba:	6859      	ldr	r1, [r3, #4]
 81051bc:	68fb      	ldr	r3, [r7, #12]
 81051be:	681a      	ldr	r2, [r3, #0]
 81051c0:	4b1f      	ldr	r3, [pc, #124]	; (8105240 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 81051c2:	400b      	ands	r3, r1
 81051c4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 81051c6:	68fb      	ldr	r3, [r7, #12]
 81051c8:	2220      	movs	r2, #32
 81051ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81051ce:	68fb      	ldr	r3, [r7, #12]
 81051d0:	2200      	movs	r2, #0
 81051d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81051d6:	68fb      	ldr	r3, [r7, #12]
 81051d8:	2200      	movs	r2, #0
 81051da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81051de:	2301      	movs	r3, #1
 81051e0:	e029      	b.n	8105236 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81051e2:	f7fd ff2d 	bl	8103040 <HAL_GetTick>
 81051e6:	4602      	mov	r2, r0
 81051e8:	687b      	ldr	r3, [r7, #4]
 81051ea:	1ad3      	subs	r3, r2, r3
 81051ec:	68ba      	ldr	r2, [r7, #8]
 81051ee:	429a      	cmp	r2, r3
 81051f0:	d302      	bcc.n	81051f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 81051f2:	68bb      	ldr	r3, [r7, #8]
 81051f4:	2b00      	cmp	r3, #0
 81051f6:	d116      	bne.n	8105226 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 81051f8:	68fb      	ldr	r3, [r7, #12]
 81051fa:	681b      	ldr	r3, [r3, #0]
 81051fc:	699b      	ldr	r3, [r3, #24]
 81051fe:	f003 0304 	and.w	r3, r3, #4
 8105202:	2b04      	cmp	r3, #4
 8105204:	d00f      	beq.n	8105226 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105206:	68fb      	ldr	r3, [r7, #12]
 8105208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810520a:	f043 0220 	orr.w	r2, r3, #32
 810520e:	68fb      	ldr	r3, [r7, #12]
 8105210:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105212:	68fb      	ldr	r3, [r7, #12]
 8105214:	2220      	movs	r2, #32
 8105216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810521a:	68fb      	ldr	r3, [r7, #12]
 810521c:	2200      	movs	r2, #0
 810521e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8105222:	2301      	movs	r3, #1
 8105224:	e007      	b.n	8105236 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8105226:	68fb      	ldr	r3, [r7, #12]
 8105228:	681b      	ldr	r3, [r3, #0]
 810522a:	699b      	ldr	r3, [r3, #24]
 810522c:	f003 0304 	and.w	r3, r3, #4
 8105230:	2b04      	cmp	r3, #4
 8105232:	d18c      	bne.n	810514e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8105234:	2300      	movs	r3, #0
}
 8105236:	4618      	mov	r0, r3
 8105238:	3710      	adds	r7, #16
 810523a:	46bd      	mov	sp, r7
 810523c:	bd80      	pop	{r7, pc}
 810523e:	bf00      	nop
 8105240:	fe00e800 	.word	0xfe00e800

08105244 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105244:	b580      	push	{r7, lr}
 8105246:	b08a      	sub	sp, #40	; 0x28
 8105248:	af00      	add	r7, sp, #0
 810524a:	60f8      	str	r0, [r7, #12]
 810524c:	60b9      	str	r1, [r7, #8]
 810524e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105250:	2300      	movs	r3, #0
 8105252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8105256:	68fb      	ldr	r3, [r7, #12]
 8105258:	681b      	ldr	r3, [r3, #0]
 810525a:	699b      	ldr	r3, [r3, #24]
 810525c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810525e:	2300      	movs	r3, #0
 8105260:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8105262:	687b      	ldr	r3, [r7, #4]
 8105264:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8105266:	69bb      	ldr	r3, [r7, #24]
 8105268:	f003 0310 	and.w	r3, r3, #16
 810526c:	2b00      	cmp	r3, #0
 810526e:	d068      	beq.n	8105342 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105270:	68fb      	ldr	r3, [r7, #12]
 8105272:	681b      	ldr	r3, [r3, #0]
 8105274:	2210      	movs	r2, #16
 8105276:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8105278:	e049      	b.n	810530e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810527a:	68bb      	ldr	r3, [r7, #8]
 810527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105280:	d045      	beq.n	810530e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8105282:	f7fd fedd 	bl	8103040 <HAL_GetTick>
 8105286:	4602      	mov	r2, r0
 8105288:	69fb      	ldr	r3, [r7, #28]
 810528a:	1ad3      	subs	r3, r2, r3
 810528c:	68ba      	ldr	r2, [r7, #8]
 810528e:	429a      	cmp	r2, r3
 8105290:	d302      	bcc.n	8105298 <I2C_IsErrorOccurred+0x54>
 8105292:	68bb      	ldr	r3, [r7, #8]
 8105294:	2b00      	cmp	r3, #0
 8105296:	d13a      	bne.n	810530e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8105298:	68fb      	ldr	r3, [r7, #12]
 810529a:	681b      	ldr	r3, [r3, #0]
 810529c:	685b      	ldr	r3, [r3, #4]
 810529e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81052a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 81052a4:	68fb      	ldr	r3, [r7, #12]
 81052a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81052aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81052ac:	68fb      	ldr	r3, [r7, #12]
 81052ae:	681b      	ldr	r3, [r3, #0]
 81052b0:	699b      	ldr	r3, [r3, #24]
 81052b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81052b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81052ba:	d121      	bne.n	8105300 <I2C_IsErrorOccurred+0xbc>
 81052bc:	697b      	ldr	r3, [r7, #20]
 81052be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81052c2:	d01d      	beq.n	8105300 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 81052c4:	7cfb      	ldrb	r3, [r7, #19]
 81052c6:	2b20      	cmp	r3, #32
 81052c8:	d01a      	beq.n	8105300 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81052ca:	68fb      	ldr	r3, [r7, #12]
 81052cc:	681b      	ldr	r3, [r3, #0]
 81052ce:	685a      	ldr	r2, [r3, #4]
 81052d0:	68fb      	ldr	r3, [r7, #12]
 81052d2:	681b      	ldr	r3, [r3, #0]
 81052d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81052d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 81052da:	f7fd feb1 	bl	8103040 <HAL_GetTick>
 81052de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81052e0:	e00e      	b.n	8105300 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 81052e2:	f7fd fead 	bl	8103040 <HAL_GetTick>
 81052e6:	4602      	mov	r2, r0
 81052e8:	69fb      	ldr	r3, [r7, #28]
 81052ea:	1ad3      	subs	r3, r2, r3
 81052ec:	2b19      	cmp	r3, #25
 81052ee:	d907      	bls.n	8105300 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 81052f0:	6a3b      	ldr	r3, [r7, #32]
 81052f2:	f043 0320 	orr.w	r3, r3, #32
 81052f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 81052f8:	2301      	movs	r3, #1
 81052fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 81052fe:	e006      	b.n	810530e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105300:	68fb      	ldr	r3, [r7, #12]
 8105302:	681b      	ldr	r3, [r3, #0]
 8105304:	699b      	ldr	r3, [r3, #24]
 8105306:	f003 0320 	and.w	r3, r3, #32
 810530a:	2b20      	cmp	r3, #32
 810530c:	d1e9      	bne.n	81052e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810530e:	68fb      	ldr	r3, [r7, #12]
 8105310:	681b      	ldr	r3, [r3, #0]
 8105312:	699b      	ldr	r3, [r3, #24]
 8105314:	f003 0320 	and.w	r3, r3, #32
 8105318:	2b20      	cmp	r3, #32
 810531a:	d003      	beq.n	8105324 <I2C_IsErrorOccurred+0xe0>
 810531c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8105320:	2b00      	cmp	r3, #0
 8105322:	d0aa      	beq.n	810527a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8105324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8105328:	2b00      	cmp	r3, #0
 810532a:	d103      	bne.n	8105334 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810532c:	68fb      	ldr	r3, [r7, #12]
 810532e:	681b      	ldr	r3, [r3, #0]
 8105330:	2220      	movs	r2, #32
 8105332:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8105334:	6a3b      	ldr	r3, [r7, #32]
 8105336:	f043 0304 	orr.w	r3, r3, #4
 810533a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 810533c:	2301      	movs	r3, #1
 810533e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8105342:	68fb      	ldr	r3, [r7, #12]
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	699b      	ldr	r3, [r3, #24]
 8105348:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 810534a:	69bb      	ldr	r3, [r7, #24]
 810534c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105350:	2b00      	cmp	r3, #0
 8105352:	d00b      	beq.n	810536c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8105354:	6a3b      	ldr	r3, [r7, #32]
 8105356:	f043 0301 	orr.w	r3, r3, #1
 810535a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810535c:	68fb      	ldr	r3, [r7, #12]
 810535e:	681b      	ldr	r3, [r3, #0]
 8105360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8105364:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8105366:	2301      	movs	r3, #1
 8105368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810536c:	69bb      	ldr	r3, [r7, #24]
 810536e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8105372:	2b00      	cmp	r3, #0
 8105374:	d00b      	beq.n	810538e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8105376:	6a3b      	ldr	r3, [r7, #32]
 8105378:	f043 0308 	orr.w	r3, r3, #8
 810537c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810537e:	68fb      	ldr	r3, [r7, #12]
 8105380:	681b      	ldr	r3, [r3, #0]
 8105382:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8105386:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8105388:	2301      	movs	r3, #1
 810538a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810538e:	69bb      	ldr	r3, [r7, #24]
 8105390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105394:	2b00      	cmp	r3, #0
 8105396:	d00b      	beq.n	81053b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8105398:	6a3b      	ldr	r3, [r7, #32]
 810539a:	f043 0302 	orr.w	r3, r3, #2
 810539e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81053a0:	68fb      	ldr	r3, [r7, #12]
 81053a2:	681b      	ldr	r3, [r3, #0]
 81053a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 81053a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81053aa:	2301      	movs	r3, #1
 81053ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 81053b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81053b4:	2b00      	cmp	r3, #0
 81053b6:	d01c      	beq.n	81053f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81053b8:	68f8      	ldr	r0, [r7, #12]
 81053ba:	f7ff fdc4 	bl	8104f46 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81053be:	68fb      	ldr	r3, [r7, #12]
 81053c0:	681b      	ldr	r3, [r3, #0]
 81053c2:	6859      	ldr	r1, [r3, #4]
 81053c4:	68fb      	ldr	r3, [r7, #12]
 81053c6:	681a      	ldr	r2, [r3, #0]
 81053c8:	4b0d      	ldr	r3, [pc, #52]	; (8105400 <I2C_IsErrorOccurred+0x1bc>)
 81053ca:	400b      	ands	r3, r1
 81053cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 81053ce:	68fb      	ldr	r3, [r7, #12]
 81053d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81053d2:	6a3b      	ldr	r3, [r7, #32]
 81053d4:	431a      	orrs	r2, r3
 81053d6:	68fb      	ldr	r3, [r7, #12]
 81053d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81053da:	68fb      	ldr	r3, [r7, #12]
 81053dc:	2220      	movs	r2, #32
 81053de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81053e2:	68fb      	ldr	r3, [r7, #12]
 81053e4:	2200      	movs	r2, #0
 81053e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81053ea:	68fb      	ldr	r3, [r7, #12]
 81053ec:	2200      	movs	r2, #0
 81053ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 81053f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 81053f6:	4618      	mov	r0, r3
 81053f8:	3728      	adds	r7, #40	; 0x28
 81053fa:	46bd      	mov	sp, r7
 81053fc:	bd80      	pop	{r7, pc}
 81053fe:	bf00      	nop
 8105400:	fe00e800 	.word	0xfe00e800

08105404 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8105404:	b480      	push	{r7}
 8105406:	b087      	sub	sp, #28
 8105408:	af00      	add	r7, sp, #0
 810540a:	60f8      	str	r0, [r7, #12]
 810540c:	607b      	str	r3, [r7, #4]
 810540e:	460b      	mov	r3, r1
 8105410:	817b      	strh	r3, [r7, #10]
 8105412:	4613      	mov	r3, r2
 8105414:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105416:	897b      	ldrh	r3, [r7, #10]
 8105418:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810541c:	7a7b      	ldrb	r3, [r7, #9]
 810541e:	041b      	lsls	r3, r3, #16
 8105420:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8105424:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8105426:	687b      	ldr	r3, [r7, #4]
 8105428:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810542a:	6a3b      	ldr	r3, [r7, #32]
 810542c:	4313      	orrs	r3, r2
 810542e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8105432:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8105434:	68fb      	ldr	r3, [r7, #12]
 8105436:	681b      	ldr	r3, [r3, #0]
 8105438:	685a      	ldr	r2, [r3, #4]
 810543a:	6a3b      	ldr	r3, [r7, #32]
 810543c:	0d5b      	lsrs	r3, r3, #21
 810543e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8105442:	4b08      	ldr	r3, [pc, #32]	; (8105464 <I2C_TransferConfig+0x60>)
 8105444:	430b      	orrs	r3, r1
 8105446:	43db      	mvns	r3, r3
 8105448:	ea02 0103 	and.w	r1, r2, r3
 810544c:	68fb      	ldr	r3, [r7, #12]
 810544e:	681b      	ldr	r3, [r3, #0]
 8105450:	697a      	ldr	r2, [r7, #20]
 8105452:	430a      	orrs	r2, r1
 8105454:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8105456:	bf00      	nop
 8105458:	371c      	adds	r7, #28
 810545a:	46bd      	mov	sp, r7
 810545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105460:	4770      	bx	lr
 8105462:	bf00      	nop
 8105464:	03ff63ff 	.word	0x03ff63ff

08105468 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8105468:	b480      	push	{r7}
 810546a:	b083      	sub	sp, #12
 810546c:	af00      	add	r7, sp, #0
 810546e:	6078      	str	r0, [r7, #4]
 8105470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105472:	687b      	ldr	r3, [r7, #4]
 8105474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105478:	b2db      	uxtb	r3, r3
 810547a:	2b20      	cmp	r3, #32
 810547c:	d138      	bne.n	81054f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810547e:	687b      	ldr	r3, [r7, #4]
 8105480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105484:	2b01      	cmp	r3, #1
 8105486:	d101      	bne.n	810548c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8105488:	2302      	movs	r3, #2
 810548a:	e032      	b.n	81054f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810548c:	687b      	ldr	r3, [r7, #4]
 810548e:	2201      	movs	r2, #1
 8105490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105494:	687b      	ldr	r3, [r7, #4]
 8105496:	2224      	movs	r2, #36	; 0x24
 8105498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810549c:	687b      	ldr	r3, [r7, #4]
 810549e:	681b      	ldr	r3, [r3, #0]
 81054a0:	681a      	ldr	r2, [r3, #0]
 81054a2:	687b      	ldr	r3, [r7, #4]
 81054a4:	681b      	ldr	r3, [r3, #0]
 81054a6:	f022 0201 	bic.w	r2, r2, #1
 81054aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81054ac:	687b      	ldr	r3, [r7, #4]
 81054ae:	681b      	ldr	r3, [r3, #0]
 81054b0:	681a      	ldr	r2, [r3, #0]
 81054b2:	687b      	ldr	r3, [r7, #4]
 81054b4:	681b      	ldr	r3, [r3, #0]
 81054b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81054ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	681b      	ldr	r3, [r3, #0]
 81054c0:	6819      	ldr	r1, [r3, #0]
 81054c2:	687b      	ldr	r3, [r7, #4]
 81054c4:	681b      	ldr	r3, [r3, #0]
 81054c6:	683a      	ldr	r2, [r7, #0]
 81054c8:	430a      	orrs	r2, r1
 81054ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81054cc:	687b      	ldr	r3, [r7, #4]
 81054ce:	681b      	ldr	r3, [r3, #0]
 81054d0:	681a      	ldr	r2, [r3, #0]
 81054d2:	687b      	ldr	r3, [r7, #4]
 81054d4:	681b      	ldr	r3, [r3, #0]
 81054d6:	f042 0201 	orr.w	r2, r2, #1
 81054da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	2220      	movs	r2, #32
 81054e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81054e4:	687b      	ldr	r3, [r7, #4]
 81054e6:	2200      	movs	r2, #0
 81054e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81054ec:	2300      	movs	r3, #0
 81054ee:	e000      	b.n	81054f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81054f0:	2302      	movs	r3, #2
  }
}
 81054f2:	4618      	mov	r0, r3
 81054f4:	370c      	adds	r7, #12
 81054f6:	46bd      	mov	sp, r7
 81054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054fc:	4770      	bx	lr

081054fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81054fe:	b480      	push	{r7}
 8105500:	b085      	sub	sp, #20
 8105502:	af00      	add	r7, sp, #0
 8105504:	6078      	str	r0, [r7, #4]
 8105506:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105508:	687b      	ldr	r3, [r7, #4]
 810550a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810550e:	b2db      	uxtb	r3, r3
 8105510:	2b20      	cmp	r3, #32
 8105512:	d139      	bne.n	8105588 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105514:	687b      	ldr	r3, [r7, #4]
 8105516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810551a:	2b01      	cmp	r3, #1
 810551c:	d101      	bne.n	8105522 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810551e:	2302      	movs	r3, #2
 8105520:	e033      	b.n	810558a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8105522:	687b      	ldr	r3, [r7, #4]
 8105524:	2201      	movs	r2, #1
 8105526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810552a:	687b      	ldr	r3, [r7, #4]
 810552c:	2224      	movs	r2, #36	; 0x24
 810552e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105532:	687b      	ldr	r3, [r7, #4]
 8105534:	681b      	ldr	r3, [r3, #0]
 8105536:	681a      	ldr	r2, [r3, #0]
 8105538:	687b      	ldr	r3, [r7, #4]
 810553a:	681b      	ldr	r3, [r3, #0]
 810553c:	f022 0201 	bic.w	r2, r2, #1
 8105540:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8105542:	687b      	ldr	r3, [r7, #4]
 8105544:	681b      	ldr	r3, [r3, #0]
 8105546:	681b      	ldr	r3, [r3, #0]
 8105548:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810554a:	68fb      	ldr	r3, [r7, #12]
 810554c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8105550:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8105552:	683b      	ldr	r3, [r7, #0]
 8105554:	021b      	lsls	r3, r3, #8
 8105556:	68fa      	ldr	r2, [r7, #12]
 8105558:	4313      	orrs	r3, r2
 810555a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 810555c:	687b      	ldr	r3, [r7, #4]
 810555e:	681b      	ldr	r3, [r3, #0]
 8105560:	68fa      	ldr	r2, [r7, #12]
 8105562:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105564:	687b      	ldr	r3, [r7, #4]
 8105566:	681b      	ldr	r3, [r3, #0]
 8105568:	681a      	ldr	r2, [r3, #0]
 810556a:	687b      	ldr	r3, [r7, #4]
 810556c:	681b      	ldr	r3, [r3, #0]
 810556e:	f042 0201 	orr.w	r2, r2, #1
 8105572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105574:	687b      	ldr	r3, [r7, #4]
 8105576:	2220      	movs	r2, #32
 8105578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810557c:	687b      	ldr	r3, [r7, #4]
 810557e:	2200      	movs	r2, #0
 8105580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105584:	2300      	movs	r3, #0
 8105586:	e000      	b.n	810558a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8105588:	2302      	movs	r3, #2
  }
}
 810558a:	4618      	mov	r0, r3
 810558c:	3714      	adds	r7, #20
 810558e:	46bd      	mov	sp, r7
 8105590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105594:	4770      	bx	lr
	...

08105598 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8105598:	b580      	push	{r7, lr}
 810559a:	b084      	sub	sp, #16
 810559c:	af00      	add	r7, sp, #0
 810559e:	60f8      	str	r0, [r7, #12]
 81055a0:	460b      	mov	r3, r1
 81055a2:	607a      	str	r2, [r7, #4]
 81055a4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81055a6:	4b37      	ldr	r3, [pc, #220]	; (8105684 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055a8:	681b      	ldr	r3, [r3, #0]
 81055aa:	f023 0201 	bic.w	r2, r3, #1
 81055ae:	4935      	ldr	r1, [pc, #212]	; (8105684 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055b0:	68fb      	ldr	r3, [r7, #12]
 81055b2:	4313      	orrs	r3, r2
 81055b4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	2b00      	cmp	r3, #0
 81055ba:	d123      	bne.n	8105604 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81055bc:	f7fe ff1e 	bl	81043fc <HAL_GetCurrentCPUID>
 81055c0:	4603      	mov	r3, r0
 81055c2:	2b03      	cmp	r3, #3
 81055c4:	d158      	bne.n	8105678 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81055c6:	4b2f      	ldr	r3, [pc, #188]	; (8105684 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055c8:	691b      	ldr	r3, [r3, #16]
 81055ca:	4a2e      	ldr	r2, [pc, #184]	; (8105684 <HAL_PWREx_EnterSTOPMode+0xec>)
 81055cc:	f023 0301 	bic.w	r3, r3, #1
 81055d0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81055d2:	4b2d      	ldr	r3, [pc, #180]	; (8105688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81055d4:	691b      	ldr	r3, [r3, #16]
 81055d6:	4a2c      	ldr	r2, [pc, #176]	; (8105688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81055d8:	f043 0304 	orr.w	r3, r3, #4
 81055dc:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81055de:	f3bf 8f4f 	dsb	sy
}
 81055e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81055e4:	f3bf 8f6f 	isb	sy
}
 81055e8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81055ea:	7afb      	ldrb	r3, [r7, #11]
 81055ec:	2b01      	cmp	r3, #1
 81055ee:	d101      	bne.n	81055f4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81055f0:	bf30      	wfi
 81055f2:	e000      	b.n	81055f6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81055f4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81055f6:	4b24      	ldr	r3, [pc, #144]	; (8105688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81055f8:	691b      	ldr	r3, [r3, #16]
 81055fa:	4a23      	ldr	r2, [pc, #140]	; (8105688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81055fc:	f023 0304 	bic.w	r3, r3, #4
 8105600:	6113      	str	r3, [r2, #16]
 8105602:	e03c      	b.n	810567e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105604:	687b      	ldr	r3, [r7, #4]
 8105606:	2b01      	cmp	r3, #1
 8105608:	d123      	bne.n	8105652 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810560a:	f7fe fef7 	bl	81043fc <HAL_GetCurrentCPUID>
 810560e:	4603      	mov	r3, r0
 8105610:	2b01      	cmp	r3, #1
 8105612:	d133      	bne.n	810567c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105614:	4b1b      	ldr	r3, [pc, #108]	; (8105684 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105616:	695b      	ldr	r3, [r3, #20]
 8105618:	4a1a      	ldr	r2, [pc, #104]	; (8105684 <HAL_PWREx_EnterSTOPMode+0xec>)
 810561a:	f023 0302 	bic.w	r3, r3, #2
 810561e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105620:	4b19      	ldr	r3, [pc, #100]	; (8105688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105622:	691b      	ldr	r3, [r3, #16]
 8105624:	4a18      	ldr	r2, [pc, #96]	; (8105688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105626:	f043 0304 	orr.w	r3, r3, #4
 810562a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810562c:	f3bf 8f4f 	dsb	sy
}
 8105630:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105632:	f3bf 8f6f 	isb	sy
}
 8105636:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105638:	7afb      	ldrb	r3, [r7, #11]
 810563a:	2b01      	cmp	r3, #1
 810563c:	d101      	bne.n	8105642 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810563e:	bf30      	wfi
 8105640:	e000      	b.n	8105644 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105642:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105644:	4b10      	ldr	r3, [pc, #64]	; (8105688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105646:	691b      	ldr	r3, [r3, #16]
 8105648:	4a0f      	ldr	r2, [pc, #60]	; (8105688 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810564a:	f023 0304 	bic.w	r3, r3, #4
 810564e:	6113      	str	r3, [r2, #16]
 8105650:	e015      	b.n	810567e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105652:	f7fe fed3 	bl	81043fc <HAL_GetCurrentCPUID>
 8105656:	4603      	mov	r3, r0
 8105658:	2b03      	cmp	r3, #3
 810565a:	d106      	bne.n	810566a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810565c:	4b09      	ldr	r3, [pc, #36]	; (8105684 <HAL_PWREx_EnterSTOPMode+0xec>)
 810565e:	691b      	ldr	r3, [r3, #16]
 8105660:	4a08      	ldr	r2, [pc, #32]	; (8105684 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105662:	f023 0304 	bic.w	r3, r3, #4
 8105666:	6113      	str	r3, [r2, #16]
 8105668:	e009      	b.n	810567e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810566a:	4b06      	ldr	r3, [pc, #24]	; (8105684 <HAL_PWREx_EnterSTOPMode+0xec>)
 810566c:	695b      	ldr	r3, [r3, #20]
 810566e:	4a05      	ldr	r2, [pc, #20]	; (8105684 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105670:	f023 0304 	bic.w	r3, r3, #4
 8105674:	6153      	str	r3, [r2, #20]
 8105676:	e002      	b.n	810567e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105678:	bf00      	nop
 810567a:	e000      	b.n	810567e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810567c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810567e:	3710      	adds	r7, #16
 8105680:	46bd      	mov	sp, r7
 8105682:	bd80      	pop	{r7, pc}
 8105684:	58024800 	.word	0x58024800
 8105688:	e000ed00 	.word	0xe000ed00

0810568c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810568c:	b580      	push	{r7, lr}
 810568e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105690:	f7fe feb4 	bl	81043fc <HAL_GetCurrentCPUID>
 8105694:	4603      	mov	r3, r0
 8105696:	2b03      	cmp	r3, #3
 8105698:	d101      	bne.n	810569e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810569a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810569c:	e001      	b.n	81056a2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810569e:	bf40      	sev
    __WFE ();
 81056a0:	bf20      	wfe
}
 81056a2:	bf00      	nop
 81056a4:	bd80      	pop	{r7, pc}
	...

081056a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81056a8:	b480      	push	{r7}
 81056aa:	b089      	sub	sp, #36	; 0x24
 81056ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81056ae:	4bb3      	ldr	r3, [pc, #716]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056b0:	691b      	ldr	r3, [r3, #16]
 81056b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81056b6:	2b18      	cmp	r3, #24
 81056b8:	f200 8155 	bhi.w	8105966 <HAL_RCC_GetSysClockFreq+0x2be>
 81056bc:	a201      	add	r2, pc, #4	; (adr r2, 81056c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 81056be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81056c2:	bf00      	nop
 81056c4:	08105729 	.word	0x08105729
 81056c8:	08105967 	.word	0x08105967
 81056cc:	08105967 	.word	0x08105967
 81056d0:	08105967 	.word	0x08105967
 81056d4:	08105967 	.word	0x08105967
 81056d8:	08105967 	.word	0x08105967
 81056dc:	08105967 	.word	0x08105967
 81056e0:	08105967 	.word	0x08105967
 81056e4:	0810574f 	.word	0x0810574f
 81056e8:	08105967 	.word	0x08105967
 81056ec:	08105967 	.word	0x08105967
 81056f0:	08105967 	.word	0x08105967
 81056f4:	08105967 	.word	0x08105967
 81056f8:	08105967 	.word	0x08105967
 81056fc:	08105967 	.word	0x08105967
 8105700:	08105967 	.word	0x08105967
 8105704:	08105755 	.word	0x08105755
 8105708:	08105967 	.word	0x08105967
 810570c:	08105967 	.word	0x08105967
 8105710:	08105967 	.word	0x08105967
 8105714:	08105967 	.word	0x08105967
 8105718:	08105967 	.word	0x08105967
 810571c:	08105967 	.word	0x08105967
 8105720:	08105967 	.word	0x08105967
 8105724:	0810575b 	.word	0x0810575b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105728:	4b94      	ldr	r3, [pc, #592]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810572a:	681b      	ldr	r3, [r3, #0]
 810572c:	f003 0320 	and.w	r3, r3, #32
 8105730:	2b00      	cmp	r3, #0
 8105732:	d009      	beq.n	8105748 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105734:	4b91      	ldr	r3, [pc, #580]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105736:	681b      	ldr	r3, [r3, #0]
 8105738:	08db      	lsrs	r3, r3, #3
 810573a:	f003 0303 	and.w	r3, r3, #3
 810573e:	4a90      	ldr	r2, [pc, #576]	; (8105980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105740:	fa22 f303 	lsr.w	r3, r2, r3
 8105744:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8105746:	e111      	b.n	810596c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105748:	4b8d      	ldr	r3, [pc, #564]	; (8105980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810574a:	61bb      	str	r3, [r7, #24]
      break;
 810574c:	e10e      	b.n	810596c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810574e:	4b8d      	ldr	r3, [pc, #564]	; (8105984 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105750:	61bb      	str	r3, [r7, #24]
      break;
 8105752:	e10b      	b.n	810596c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8105754:	4b8c      	ldr	r3, [pc, #560]	; (8105988 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8105756:	61bb      	str	r3, [r7, #24]
      break;
 8105758:	e108      	b.n	810596c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810575a:	4b88      	ldr	r3, [pc, #544]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810575e:	f003 0303 	and.w	r3, r3, #3
 8105762:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8105764:	4b85      	ldr	r3, [pc, #532]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105768:	091b      	lsrs	r3, r3, #4
 810576a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810576e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105770:	4b82      	ldr	r3, [pc, #520]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105774:	f003 0301 	and.w	r3, r3, #1
 8105778:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810577a:	4b80      	ldr	r3, [pc, #512]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810577e:	08db      	lsrs	r3, r3, #3
 8105780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105784:	68fa      	ldr	r2, [r7, #12]
 8105786:	fb02 f303 	mul.w	r3, r2, r3
 810578a:	ee07 3a90 	vmov	s15, r3
 810578e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105792:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8105796:	693b      	ldr	r3, [r7, #16]
 8105798:	2b00      	cmp	r3, #0
 810579a:	f000 80e1 	beq.w	8105960 <HAL_RCC_GetSysClockFreq+0x2b8>
 810579e:	697b      	ldr	r3, [r7, #20]
 81057a0:	2b02      	cmp	r3, #2
 81057a2:	f000 8083 	beq.w	81058ac <HAL_RCC_GetSysClockFreq+0x204>
 81057a6:	697b      	ldr	r3, [r7, #20]
 81057a8:	2b02      	cmp	r3, #2
 81057aa:	f200 80a1 	bhi.w	81058f0 <HAL_RCC_GetSysClockFreq+0x248>
 81057ae:	697b      	ldr	r3, [r7, #20]
 81057b0:	2b00      	cmp	r3, #0
 81057b2:	d003      	beq.n	81057bc <HAL_RCC_GetSysClockFreq+0x114>
 81057b4:	697b      	ldr	r3, [r7, #20]
 81057b6:	2b01      	cmp	r3, #1
 81057b8:	d056      	beq.n	8105868 <HAL_RCC_GetSysClockFreq+0x1c0>
 81057ba:	e099      	b.n	81058f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81057bc:	4b6f      	ldr	r3, [pc, #444]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057be:	681b      	ldr	r3, [r3, #0]
 81057c0:	f003 0320 	and.w	r3, r3, #32
 81057c4:	2b00      	cmp	r3, #0
 81057c6:	d02d      	beq.n	8105824 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81057c8:	4b6c      	ldr	r3, [pc, #432]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057ca:	681b      	ldr	r3, [r3, #0]
 81057cc:	08db      	lsrs	r3, r3, #3
 81057ce:	f003 0303 	and.w	r3, r3, #3
 81057d2:	4a6b      	ldr	r2, [pc, #428]	; (8105980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81057d4:	fa22 f303 	lsr.w	r3, r2, r3
 81057d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81057da:	687b      	ldr	r3, [r7, #4]
 81057dc:	ee07 3a90 	vmov	s15, r3
 81057e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057e4:	693b      	ldr	r3, [r7, #16]
 81057e6:	ee07 3a90 	vmov	s15, r3
 81057ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057f2:	4b62      	ldr	r3, [pc, #392]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81057f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057fa:	ee07 3a90 	vmov	s15, r3
 81057fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105802:	ed97 6a02 	vldr	s12, [r7, #8]
 8105806:	eddf 5a61 	vldr	s11, [pc, #388]	; 810598c <HAL_RCC_GetSysClockFreq+0x2e4>
 810580a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810580e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810581a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810581e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8105822:	e087      	b.n	8105934 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105824:	693b      	ldr	r3, [r7, #16]
 8105826:	ee07 3a90 	vmov	s15, r3
 810582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810582e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8105990 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105836:	4b51      	ldr	r3, [pc, #324]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810583a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810583e:	ee07 3a90 	vmov	s15, r3
 8105842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105846:	ed97 6a02 	vldr	s12, [r7, #8]
 810584a:	eddf 5a50 	vldr	s11, [pc, #320]	; 810598c <HAL_RCC_GetSysClockFreq+0x2e4>
 810584e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810585a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810585e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105862:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105866:	e065      	b.n	8105934 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105868:	693b      	ldr	r3, [r7, #16]
 810586a:	ee07 3a90 	vmov	s15, r3
 810586e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105872:	eddf 6a48 	vldr	s13, [pc, #288]	; 8105994 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810587a:	4b40      	ldr	r3, [pc, #256]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810587e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105882:	ee07 3a90 	vmov	s15, r3
 8105886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810588a:	ed97 6a02 	vldr	s12, [r7, #8]
 810588e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810598c <HAL_RCC_GetSysClockFreq+0x2e4>
 8105892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810589a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810589e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81058aa:	e043      	b.n	8105934 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81058ac:	693b      	ldr	r3, [r7, #16]
 81058ae:	ee07 3a90 	vmov	s15, r3
 81058b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8105998 <HAL_RCC_GetSysClockFreq+0x2f0>
 81058ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058be:	4b2f      	ldr	r3, [pc, #188]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058c6:	ee07 3a90 	vmov	s15, r3
 81058ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058ce:	ed97 6a02 	vldr	s12, [r7, #8]
 81058d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810598c <HAL_RCC_GetSysClockFreq+0x2e4>
 81058d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81058ee:	e021      	b.n	8105934 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81058f0:	693b      	ldr	r3, [r7, #16]
 81058f2:	ee07 3a90 	vmov	s15, r3
 81058f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8105994 <HAL_RCC_GetSysClockFreq+0x2ec>
 81058fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105902:	4b1e      	ldr	r3, [pc, #120]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810590a:	ee07 3a90 	vmov	s15, r3
 810590e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105912:	ed97 6a02 	vldr	s12, [r7, #8]
 8105916:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810598c <HAL_RCC_GetSysClockFreq+0x2e4>
 810591a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810591e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810592a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810592e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105932:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8105934:	4b11      	ldr	r3, [pc, #68]	; (810597c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105938:	0a5b      	lsrs	r3, r3, #9
 810593a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810593e:	3301      	adds	r3, #1
 8105940:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8105942:	683b      	ldr	r3, [r7, #0]
 8105944:	ee07 3a90 	vmov	s15, r3
 8105948:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810594c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105958:	ee17 3a90 	vmov	r3, s15
 810595c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810595e:	e005      	b.n	810596c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8105960:	2300      	movs	r3, #0
 8105962:	61bb      	str	r3, [r7, #24]
      break;
 8105964:	e002      	b.n	810596c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8105966:	4b07      	ldr	r3, [pc, #28]	; (8105984 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105968:	61bb      	str	r3, [r7, #24]
      break;
 810596a:	bf00      	nop
  }

  return sysclockfreq;
 810596c:	69bb      	ldr	r3, [r7, #24]
}
 810596e:	4618      	mov	r0, r3
 8105970:	3724      	adds	r7, #36	; 0x24
 8105972:	46bd      	mov	sp, r7
 8105974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105978:	4770      	bx	lr
 810597a:	bf00      	nop
 810597c:	58024400 	.word	0x58024400
 8105980:	03d09000 	.word	0x03d09000
 8105984:	003d0900 	.word	0x003d0900
 8105988:	007a1200 	.word	0x007a1200
 810598c:	46000000 	.word	0x46000000
 8105990:	4c742400 	.word	0x4c742400
 8105994:	4a742400 	.word	0x4a742400
 8105998:	4af42400 	.word	0x4af42400

0810599c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810599c:	b580      	push	{r7, lr}
 810599e:	b082      	sub	sp, #8
 81059a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81059a2:	f7ff fe81 	bl	81056a8 <HAL_RCC_GetSysClockFreq>
 81059a6:	4602      	mov	r2, r0
 81059a8:	4b11      	ldr	r3, [pc, #68]	; (81059f0 <HAL_RCC_GetHCLKFreq+0x54>)
 81059aa:	699b      	ldr	r3, [r3, #24]
 81059ac:	0a1b      	lsrs	r3, r3, #8
 81059ae:	f003 030f 	and.w	r3, r3, #15
 81059b2:	4910      	ldr	r1, [pc, #64]	; (81059f4 <HAL_RCC_GetHCLKFreq+0x58>)
 81059b4:	5ccb      	ldrb	r3, [r1, r3]
 81059b6:	f003 031f 	and.w	r3, r3, #31
 81059ba:	fa22 f303 	lsr.w	r3, r2, r3
 81059be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81059c0:	4b0b      	ldr	r3, [pc, #44]	; (81059f0 <HAL_RCC_GetHCLKFreq+0x54>)
 81059c2:	699b      	ldr	r3, [r3, #24]
 81059c4:	f003 030f 	and.w	r3, r3, #15
 81059c8:	4a0a      	ldr	r2, [pc, #40]	; (81059f4 <HAL_RCC_GetHCLKFreq+0x58>)
 81059ca:	5cd3      	ldrb	r3, [r2, r3]
 81059cc:	f003 031f 	and.w	r3, r3, #31
 81059d0:	687a      	ldr	r2, [r7, #4]
 81059d2:	fa22 f303 	lsr.w	r3, r2, r3
 81059d6:	4a08      	ldr	r2, [pc, #32]	; (81059f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 81059d8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81059da:	4b07      	ldr	r3, [pc, #28]	; (81059f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 81059dc:	681b      	ldr	r3, [r3, #0]
 81059de:	4a07      	ldr	r2, [pc, #28]	; (81059fc <HAL_RCC_GetHCLKFreq+0x60>)
 81059e0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81059e2:	4b05      	ldr	r3, [pc, #20]	; (81059f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 81059e4:	681b      	ldr	r3, [r3, #0]
}
 81059e6:	4618      	mov	r0, r3
 81059e8:	3708      	adds	r7, #8
 81059ea:	46bd      	mov	sp, r7
 81059ec:	bd80      	pop	{r7, pc}
 81059ee:	bf00      	nop
 81059f0:	58024400 	.word	0x58024400
 81059f4:	0810fb00 	.word	0x0810fb00
 81059f8:	10000004 	.word	0x10000004
 81059fc:	10000000 	.word	0x10000000

08105a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105a00:	b580      	push	{r7, lr}
 8105a02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105a04:	f7ff ffca 	bl	810599c <HAL_RCC_GetHCLKFreq>
 8105a08:	4602      	mov	r2, r0
 8105a0a:	4b06      	ldr	r3, [pc, #24]	; (8105a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8105a0c:	69db      	ldr	r3, [r3, #28]
 8105a0e:	091b      	lsrs	r3, r3, #4
 8105a10:	f003 0307 	and.w	r3, r3, #7
 8105a14:	4904      	ldr	r1, [pc, #16]	; (8105a28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8105a16:	5ccb      	ldrb	r3, [r1, r3]
 8105a18:	f003 031f 	and.w	r3, r3, #31
 8105a1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105a20:	4618      	mov	r0, r3
 8105a22:	bd80      	pop	{r7, pc}
 8105a24:	58024400 	.word	0x58024400
 8105a28:	0810fb00 	.word	0x0810fb00

08105a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105a2c:	b580      	push	{r7, lr}
 8105a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105a30:	f7ff ffb4 	bl	810599c <HAL_RCC_GetHCLKFreq>
 8105a34:	4602      	mov	r2, r0
 8105a36:	4b06      	ldr	r3, [pc, #24]	; (8105a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8105a38:	69db      	ldr	r3, [r3, #28]
 8105a3a:	0a1b      	lsrs	r3, r3, #8
 8105a3c:	f003 0307 	and.w	r3, r3, #7
 8105a40:	4904      	ldr	r1, [pc, #16]	; (8105a54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8105a42:	5ccb      	ldrb	r3, [r1, r3]
 8105a44:	f003 031f 	and.w	r3, r3, #31
 8105a48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8105a4c:	4618      	mov	r0, r3
 8105a4e:	bd80      	pop	{r7, pc}
 8105a50:	58024400 	.word	0x58024400
 8105a54:	0810fb00 	.word	0x0810fb00

08105a58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8105a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8105a5c:	b0ca      	sub	sp, #296	; 0x128
 8105a5e:	af00      	add	r7, sp, #0
 8105a60:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8105a64:	2300      	movs	r3, #0
 8105a66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8105a6a:	2300      	movs	r3, #0
 8105a6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a78:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8105a7c:	2500      	movs	r5, #0
 8105a7e:	ea54 0305 	orrs.w	r3, r4, r5
 8105a82:	d049      	beq.n	8105b18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8105a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105a8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105a8e:	d02f      	beq.n	8105af0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8105a90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105a94:	d828      	bhi.n	8105ae8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8105a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105a9a:	d01a      	beq.n	8105ad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8105a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105aa0:	d822      	bhi.n	8105ae8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8105aa2:	2b00      	cmp	r3, #0
 8105aa4:	d003      	beq.n	8105aae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8105aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105aaa:	d007      	beq.n	8105abc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105aac:	e01c      	b.n	8105ae8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105aae:	4bb8      	ldr	r3, [pc, #736]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ab2:	4ab7      	ldr	r2, [pc, #732]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105aba:	e01a      	b.n	8105af2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ac0:	3308      	adds	r3, #8
 8105ac2:	2102      	movs	r1, #2
 8105ac4:	4618      	mov	r0, r3
 8105ac6:	f002 fb61 	bl	810818c <RCCEx_PLL2_Config>
 8105aca:	4603      	mov	r3, r0
 8105acc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105ad0:	e00f      	b.n	8105af2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ad6:	3328      	adds	r3, #40	; 0x28
 8105ad8:	2102      	movs	r1, #2
 8105ada:	4618      	mov	r0, r3
 8105adc:	f002 fc08 	bl	81082f0 <RCCEx_PLL3_Config>
 8105ae0:	4603      	mov	r3, r0
 8105ae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105ae6:	e004      	b.n	8105af2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105ae8:	2301      	movs	r3, #1
 8105aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105aee:	e000      	b.n	8105af2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8105af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105af2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105af6:	2b00      	cmp	r3, #0
 8105af8:	d10a      	bne.n	8105b10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105afa:	4ba5      	ldr	r3, [pc, #660]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105afe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8105b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105b08:	4aa1      	ldr	r2, [pc, #644]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b0a:	430b      	orrs	r3, r1
 8105b0c:	6513      	str	r3, [r2, #80]	; 0x50
 8105b0e:	e003      	b.n	8105b18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b20:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8105b24:	f04f 0900 	mov.w	r9, #0
 8105b28:	ea58 0309 	orrs.w	r3, r8, r9
 8105b2c:	d047      	beq.n	8105bbe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8105b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105b34:	2b04      	cmp	r3, #4
 8105b36:	d82a      	bhi.n	8105b8e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8105b38:	a201      	add	r2, pc, #4	; (adr r2, 8105b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8105b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b3e:	bf00      	nop
 8105b40:	08105b55 	.word	0x08105b55
 8105b44:	08105b63 	.word	0x08105b63
 8105b48:	08105b79 	.word	0x08105b79
 8105b4c:	08105b97 	.word	0x08105b97
 8105b50:	08105b97 	.word	0x08105b97
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b54:	4b8e      	ldr	r3, [pc, #568]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b58:	4a8d      	ldr	r2, [pc, #564]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105b60:	e01a      	b.n	8105b98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b66:	3308      	adds	r3, #8
 8105b68:	2100      	movs	r1, #0
 8105b6a:	4618      	mov	r0, r3
 8105b6c:	f002 fb0e 	bl	810818c <RCCEx_PLL2_Config>
 8105b70:	4603      	mov	r3, r0
 8105b72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105b76:	e00f      	b.n	8105b98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b7c:	3328      	adds	r3, #40	; 0x28
 8105b7e:	2100      	movs	r1, #0
 8105b80:	4618      	mov	r0, r3
 8105b82:	f002 fbb5 	bl	81082f0 <RCCEx_PLL3_Config>
 8105b86:	4603      	mov	r3, r0
 8105b88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105b8c:	e004      	b.n	8105b98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105b8e:	2301      	movs	r3, #1
 8105b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105b94:	e000      	b.n	8105b98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8105b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105b98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b9c:	2b00      	cmp	r3, #0
 8105b9e:	d10a      	bne.n	8105bb6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8105ba0:	4b7b      	ldr	r3, [pc, #492]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105ba4:	f023 0107 	bic.w	r1, r3, #7
 8105ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105bae:	4a78      	ldr	r2, [pc, #480]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105bb0:	430b      	orrs	r3, r1
 8105bb2:	6513      	str	r3, [r2, #80]	; 0x50
 8105bb4:	e003      	b.n	8105bbe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105bba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bc6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8105bca:	f04f 0b00 	mov.w	fp, #0
 8105bce:	ea5a 030b 	orrs.w	r3, sl, fp
 8105bd2:	d04c      	beq.n	8105c6e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8105bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105bde:	d030      	beq.n	8105c42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8105be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105be4:	d829      	bhi.n	8105c3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105be6:	2bc0      	cmp	r3, #192	; 0xc0
 8105be8:	d02d      	beq.n	8105c46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8105bea:	2bc0      	cmp	r3, #192	; 0xc0
 8105bec:	d825      	bhi.n	8105c3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105bee:	2b80      	cmp	r3, #128	; 0x80
 8105bf0:	d018      	beq.n	8105c24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8105bf2:	2b80      	cmp	r3, #128	; 0x80
 8105bf4:	d821      	bhi.n	8105c3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105bf6:	2b00      	cmp	r3, #0
 8105bf8:	d002      	beq.n	8105c00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8105bfa:	2b40      	cmp	r3, #64	; 0x40
 8105bfc:	d007      	beq.n	8105c0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8105bfe:	e01c      	b.n	8105c3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c00:	4b63      	ldr	r3, [pc, #396]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c04:	4a62      	ldr	r2, [pc, #392]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105c0c:	e01c      	b.n	8105c48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c12:	3308      	adds	r3, #8
 8105c14:	2100      	movs	r1, #0
 8105c16:	4618      	mov	r0, r3
 8105c18:	f002 fab8 	bl	810818c <RCCEx_PLL2_Config>
 8105c1c:	4603      	mov	r3, r0
 8105c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105c22:	e011      	b.n	8105c48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c28:	3328      	adds	r3, #40	; 0x28
 8105c2a:	2100      	movs	r1, #0
 8105c2c:	4618      	mov	r0, r3
 8105c2e:	f002 fb5f 	bl	81082f0 <RCCEx_PLL3_Config>
 8105c32:	4603      	mov	r3, r0
 8105c34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105c38:	e006      	b.n	8105c48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105c3a:	2301      	movs	r3, #1
 8105c3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105c40:	e002      	b.n	8105c48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105c42:	bf00      	nop
 8105c44:	e000      	b.n	8105c48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105c48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105c4c:	2b00      	cmp	r3, #0
 8105c4e:	d10a      	bne.n	8105c66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105c50:	4b4f      	ldr	r3, [pc, #316]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105c54:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8105c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c5e:	4a4c      	ldr	r2, [pc, #304]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c60:	430b      	orrs	r3, r1
 8105c62:	6513      	str	r3, [r2, #80]	; 0x50
 8105c64:	e003      	b.n	8105c6e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105c6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c76:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8105c7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8105c7e:	2300      	movs	r3, #0
 8105c80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8105c84:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8105c88:	460b      	mov	r3, r1
 8105c8a:	4313      	orrs	r3, r2
 8105c8c:	d053      	beq.n	8105d36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8105c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105c96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105c9a:	d035      	beq.n	8105d08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8105c9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105ca0:	d82e      	bhi.n	8105d00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105ca2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105ca6:	d031      	beq.n	8105d0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8105ca8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105cac:	d828      	bhi.n	8105d00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105cb2:	d01a      	beq.n	8105cea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8105cb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105cb8:	d822      	bhi.n	8105d00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105cba:	2b00      	cmp	r3, #0
 8105cbc:	d003      	beq.n	8105cc6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8105cbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105cc2:	d007      	beq.n	8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8105cc4:	e01c      	b.n	8105d00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105cc6:	4b32      	ldr	r3, [pc, #200]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105cca:	4a31      	ldr	r2, [pc, #196]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105cd2:	e01c      	b.n	8105d0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105cd8:	3308      	adds	r3, #8
 8105cda:	2100      	movs	r1, #0
 8105cdc:	4618      	mov	r0, r3
 8105cde:	f002 fa55 	bl	810818c <RCCEx_PLL2_Config>
 8105ce2:	4603      	mov	r3, r0
 8105ce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105ce8:	e011      	b.n	8105d0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105cee:	3328      	adds	r3, #40	; 0x28
 8105cf0:	2100      	movs	r1, #0
 8105cf2:	4618      	mov	r0, r3
 8105cf4:	f002 fafc 	bl	81082f0 <RCCEx_PLL3_Config>
 8105cf8:	4603      	mov	r3, r0
 8105cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105cfe:	e006      	b.n	8105d0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105d00:	2301      	movs	r3, #1
 8105d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105d06:	e002      	b.n	8105d0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105d08:	bf00      	nop
 8105d0a:	e000      	b.n	8105d0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105d12:	2b00      	cmp	r3, #0
 8105d14:	d10b      	bne.n	8105d2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105d16:	4b1e      	ldr	r3, [pc, #120]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105d1a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8105d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105d26:	4a1a      	ldr	r2, [pc, #104]	; (8105d90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105d28:	430b      	orrs	r3, r1
 8105d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8105d2c:	e003      	b.n	8105d36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105d32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d3e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8105d42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8105d46:	2300      	movs	r3, #0
 8105d48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8105d4c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8105d50:	460b      	mov	r3, r1
 8105d52:	4313      	orrs	r3, r2
 8105d54:	d056      	beq.n	8105e04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8105d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105d5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105d62:	d038      	beq.n	8105dd6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8105d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105d68:	d831      	bhi.n	8105dce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105d6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105d6e:	d034      	beq.n	8105dda <HAL_RCCEx_PeriphCLKConfig+0x382>
 8105d70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105d74:	d82b      	bhi.n	8105dce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105d7a:	d01d      	beq.n	8105db8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8105d7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105d80:	d825      	bhi.n	8105dce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105d82:	2b00      	cmp	r3, #0
 8105d84:	d006      	beq.n	8105d94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8105d86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105d8a:	d00a      	beq.n	8105da2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8105d8c:	e01f      	b.n	8105dce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105d8e:	bf00      	nop
 8105d90:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d94:	4ba2      	ldr	r3, [pc, #648]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d98:	4aa1      	ldr	r2, [pc, #644]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105da0:	e01c      	b.n	8105ddc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105da6:	3308      	adds	r3, #8
 8105da8:	2100      	movs	r1, #0
 8105daa:	4618      	mov	r0, r3
 8105dac:	f002 f9ee 	bl	810818c <RCCEx_PLL2_Config>
 8105db0:	4603      	mov	r3, r0
 8105db2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105db6:	e011      	b.n	8105ddc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105dbc:	3328      	adds	r3, #40	; 0x28
 8105dbe:	2100      	movs	r1, #0
 8105dc0:	4618      	mov	r0, r3
 8105dc2:	f002 fa95 	bl	81082f0 <RCCEx_PLL3_Config>
 8105dc6:	4603      	mov	r3, r0
 8105dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105dcc:	e006      	b.n	8105ddc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105dce:	2301      	movs	r3, #1
 8105dd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105dd4:	e002      	b.n	8105ddc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105dd6:	bf00      	nop
 8105dd8:	e000      	b.n	8105ddc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105de0:	2b00      	cmp	r3, #0
 8105de2:	d10b      	bne.n	8105dfc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105de4:	4b8e      	ldr	r3, [pc, #568]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105de8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8105dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105df0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105df4:	4a8a      	ldr	r2, [pc, #552]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105df6:	430b      	orrs	r3, r1
 8105df8:	6593      	str	r3, [r2, #88]	; 0x58
 8105dfa:	e003      	b.n	8105e04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e0c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8105e10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8105e14:	2300      	movs	r3, #0
 8105e16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8105e1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8105e1e:	460b      	mov	r3, r1
 8105e20:	4313      	orrs	r3, r2
 8105e22:	d03a      	beq.n	8105e9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8105e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e2a:	2b30      	cmp	r3, #48	; 0x30
 8105e2c:	d01f      	beq.n	8105e6e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8105e2e:	2b30      	cmp	r3, #48	; 0x30
 8105e30:	d819      	bhi.n	8105e66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105e32:	2b20      	cmp	r3, #32
 8105e34:	d00c      	beq.n	8105e50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8105e36:	2b20      	cmp	r3, #32
 8105e38:	d815      	bhi.n	8105e66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105e3a:	2b00      	cmp	r3, #0
 8105e3c:	d019      	beq.n	8105e72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8105e3e:	2b10      	cmp	r3, #16
 8105e40:	d111      	bne.n	8105e66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e42:	4b77      	ldr	r3, [pc, #476]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e46:	4a76      	ldr	r2, [pc, #472]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8105e4e:	e011      	b.n	8105e74 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e54:	3308      	adds	r3, #8
 8105e56:	2102      	movs	r1, #2
 8105e58:	4618      	mov	r0, r3
 8105e5a:	f002 f997 	bl	810818c <RCCEx_PLL2_Config>
 8105e5e:	4603      	mov	r3, r0
 8105e60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8105e64:	e006      	b.n	8105e74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105e66:	2301      	movs	r3, #1
 8105e68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105e6c:	e002      	b.n	8105e74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8105e6e:	bf00      	nop
 8105e70:	e000      	b.n	8105e74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8105e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105e74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e78:	2b00      	cmp	r3, #0
 8105e7a:	d10a      	bne.n	8105e92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105e7c:	4b68      	ldr	r3, [pc, #416]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e80:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8105e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e8a:	4a65      	ldr	r2, [pc, #404]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e8c:	430b      	orrs	r3, r1
 8105e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8105e90:	e003      	b.n	8105e9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ea2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8105ea6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8105eaa:	2300      	movs	r3, #0
 8105eac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8105eb0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8105eb4:	460b      	mov	r3, r1
 8105eb6:	4313      	orrs	r3, r2
 8105eb8:	d051      	beq.n	8105f5e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8105eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105ec4:	d035      	beq.n	8105f32 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8105ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105eca:	d82e      	bhi.n	8105f2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105ecc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105ed0:	d031      	beq.n	8105f36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8105ed2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105ed6:	d828      	bhi.n	8105f2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105edc:	d01a      	beq.n	8105f14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8105ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105ee2:	d822      	bhi.n	8105f2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105ee4:	2b00      	cmp	r3, #0
 8105ee6:	d003      	beq.n	8105ef0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8105ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105eec:	d007      	beq.n	8105efe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8105eee:	e01c      	b.n	8105f2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ef0:	4b4b      	ldr	r3, [pc, #300]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ef4:	4a4a      	ldr	r2, [pc, #296]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105efa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105efc:	e01c      	b.n	8105f38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f02:	3308      	adds	r3, #8
 8105f04:	2100      	movs	r1, #0
 8105f06:	4618      	mov	r0, r3
 8105f08:	f002 f940 	bl	810818c <RCCEx_PLL2_Config>
 8105f0c:	4603      	mov	r3, r0
 8105f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105f12:	e011      	b.n	8105f38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f18:	3328      	adds	r3, #40	; 0x28
 8105f1a:	2100      	movs	r1, #0
 8105f1c:	4618      	mov	r0, r3
 8105f1e:	f002 f9e7 	bl	81082f0 <RCCEx_PLL3_Config>
 8105f22:	4603      	mov	r3, r0
 8105f24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105f28:	e006      	b.n	8105f38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105f2a:	2301      	movs	r3, #1
 8105f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105f30:	e002      	b.n	8105f38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105f32:	bf00      	nop
 8105f34:	e000      	b.n	8105f38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105f38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105f3c:	2b00      	cmp	r3, #0
 8105f3e:	d10a      	bne.n	8105f56 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105f40:	4b37      	ldr	r3, [pc, #220]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105f44:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8105f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105f4e:	4a34      	ldr	r2, [pc, #208]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105f50:	430b      	orrs	r3, r1
 8105f52:	6513      	str	r3, [r2, #80]	; 0x50
 8105f54:	e003      	b.n	8105f5e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105f5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f66:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8105f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8105f6e:	2300      	movs	r3, #0
 8105f70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8105f74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8105f78:	460b      	mov	r3, r1
 8105f7a:	4313      	orrs	r3, r2
 8105f7c:	d056      	beq.n	810602c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8105f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105f88:	d033      	beq.n	8105ff2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8105f8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105f8e:	d82c      	bhi.n	8105fea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105f90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105f94:	d02f      	beq.n	8105ff6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8105f96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105f9a:	d826      	bhi.n	8105fea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105f9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105fa0:	d02b      	beq.n	8105ffa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8105fa2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105fa6:	d820      	bhi.n	8105fea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105fac:	d012      	beq.n	8105fd4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8105fae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105fb2:	d81a      	bhi.n	8105fea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105fb4:	2b00      	cmp	r3, #0
 8105fb6:	d022      	beq.n	8105ffe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8105fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105fbc:	d115      	bne.n	8105fea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105fc2:	3308      	adds	r3, #8
 8105fc4:	2101      	movs	r1, #1
 8105fc6:	4618      	mov	r0, r3
 8105fc8:	f002 f8e0 	bl	810818c <RCCEx_PLL2_Config>
 8105fcc:	4603      	mov	r3, r0
 8105fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8105fd2:	e015      	b.n	8106000 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105fd8:	3328      	adds	r3, #40	; 0x28
 8105fda:	2101      	movs	r1, #1
 8105fdc:	4618      	mov	r0, r3
 8105fde:	f002 f987 	bl	81082f0 <RCCEx_PLL3_Config>
 8105fe2:	4603      	mov	r3, r0
 8105fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8105fe8:	e00a      	b.n	8106000 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105fea:	2301      	movs	r3, #1
 8105fec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105ff0:	e006      	b.n	8106000 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105ff2:	bf00      	nop
 8105ff4:	e004      	b.n	8106000 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105ff6:	bf00      	nop
 8105ff8:	e002      	b.n	8106000 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105ffa:	bf00      	nop
 8105ffc:	e000      	b.n	8106000 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106000:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106004:	2b00      	cmp	r3, #0
 8106006:	d10d      	bne.n	8106024 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8106008:	4b05      	ldr	r3, [pc, #20]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810600a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810600c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8106010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106016:	4a02      	ldr	r2, [pc, #8]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106018:	430b      	orrs	r3, r1
 810601a:	6513      	str	r3, [r2, #80]	; 0x50
 810601c:	e006      	b.n	810602c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810601e:	bf00      	nop
 8106020:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106024:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106028:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106034:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8106038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 810603c:	2300      	movs	r3, #0
 810603e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8106042:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8106046:	460b      	mov	r3, r1
 8106048:	4313      	orrs	r3, r2
 810604a:	d055      	beq.n	81060f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106050:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106058:	d033      	beq.n	81060c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810605a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810605e:	d82c      	bhi.n	81060ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106064:	d02f      	beq.n	81060c6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8106066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810606a:	d826      	bhi.n	81060ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 810606c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106070:	d02b      	beq.n	81060ca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8106072:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106076:	d820      	bhi.n	81060ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810607c:	d012      	beq.n	81060a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810607e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106082:	d81a      	bhi.n	81060ba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106084:	2b00      	cmp	r3, #0
 8106086:	d022      	beq.n	81060ce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8106088:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810608c:	d115      	bne.n	81060ba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810608e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106092:	3308      	adds	r3, #8
 8106094:	2101      	movs	r1, #1
 8106096:	4618      	mov	r0, r3
 8106098:	f002 f878 	bl	810818c <RCCEx_PLL2_Config>
 810609c:	4603      	mov	r3, r0
 810609e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81060a2:	e015      	b.n	81060d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81060a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060a8:	3328      	adds	r3, #40	; 0x28
 81060aa:	2101      	movs	r1, #1
 81060ac:	4618      	mov	r0, r3
 81060ae:	f002 f91f 	bl	81082f0 <RCCEx_PLL3_Config>
 81060b2:	4603      	mov	r3, r0
 81060b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81060b8:	e00a      	b.n	81060d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81060ba:	2301      	movs	r3, #1
 81060bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81060c0:	e006      	b.n	81060d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81060c2:	bf00      	nop
 81060c4:	e004      	b.n	81060d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81060c6:	bf00      	nop
 81060c8:	e002      	b.n	81060d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81060ca:	bf00      	nop
 81060cc:	e000      	b.n	81060d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81060ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 81060d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81060d4:	2b00      	cmp	r3, #0
 81060d6:	d10b      	bne.n	81060f0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81060d8:	4ba4      	ldr	r3, [pc, #656]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81060da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81060dc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 81060e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81060e8:	4aa0      	ldr	r2, [pc, #640]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81060ea:	430b      	orrs	r3, r1
 81060ec:	6593      	str	r3, [r2, #88]	; 0x58
 81060ee:	e003      	b.n	81060f8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81060f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81060f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106100:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8106104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8106108:	2300      	movs	r3, #0
 810610a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 810610e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8106112:	460b      	mov	r3, r1
 8106114:	4313      	orrs	r3, r2
 8106116:	d037      	beq.n	8106188 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8106118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810611e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106122:	d00e      	beq.n	8106142 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8106124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106128:	d816      	bhi.n	8106158 <HAL_RCCEx_PeriphCLKConfig+0x700>
 810612a:	2b00      	cmp	r3, #0
 810612c:	d018      	beq.n	8106160 <HAL_RCCEx_PeriphCLKConfig+0x708>
 810612e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106132:	d111      	bne.n	8106158 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106134:	4b8d      	ldr	r3, [pc, #564]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106138:	4a8c      	ldr	r2, [pc, #560]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810613a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810613e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106140:	e00f      	b.n	8106162 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106146:	3308      	adds	r3, #8
 8106148:	2101      	movs	r1, #1
 810614a:	4618      	mov	r0, r3
 810614c:	f002 f81e 	bl	810818c <RCCEx_PLL2_Config>
 8106150:	4603      	mov	r3, r0
 8106152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106156:	e004      	b.n	8106162 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106158:	2301      	movs	r3, #1
 810615a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810615e:	e000      	b.n	8106162 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8106160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106166:	2b00      	cmp	r3, #0
 8106168:	d10a      	bne.n	8106180 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810616a:	4b80      	ldr	r3, [pc, #512]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810616c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810616e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8106172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106178:	4a7c      	ldr	r2, [pc, #496]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810617a:	430b      	orrs	r3, r1
 810617c:	6513      	str	r3, [r2, #80]	; 0x50
 810617e:	e003      	b.n	8106188 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106180:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106184:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106190:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8106194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8106198:	2300      	movs	r3, #0
 810619a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 810619e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 81061a2:	460b      	mov	r3, r1
 81061a4:	4313      	orrs	r3, r2
 81061a6:	d039      	beq.n	810621c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81061a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81061ae:	2b03      	cmp	r3, #3
 81061b0:	d81c      	bhi.n	81061ec <HAL_RCCEx_PeriphCLKConfig+0x794>
 81061b2:	a201      	add	r2, pc, #4	; (adr r2, 81061b8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061b8:	081061f5 	.word	0x081061f5
 81061bc:	081061c9 	.word	0x081061c9
 81061c0:	081061d7 	.word	0x081061d7
 81061c4:	081061f5 	.word	0x081061f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81061c8:	4b68      	ldr	r3, [pc, #416]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81061cc:	4a67      	ldr	r2, [pc, #412]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81061ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81061d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81061d4:	e00f      	b.n	81061f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81061d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061da:	3308      	adds	r3, #8
 81061dc:	2102      	movs	r1, #2
 81061de:	4618      	mov	r0, r3
 81061e0:	f001 ffd4 	bl	810818c <RCCEx_PLL2_Config>
 81061e4:	4603      	mov	r3, r0
 81061e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81061ea:	e004      	b.n	81061f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81061ec:	2301      	movs	r3, #1
 81061ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81061f2:	e000      	b.n	81061f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81061f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81061f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81061fa:	2b00      	cmp	r3, #0
 81061fc:	d10a      	bne.n	8106214 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81061fe:	4b5b      	ldr	r3, [pc, #364]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106202:	f023 0103 	bic.w	r1, r3, #3
 8106206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810620a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810620c:	4a57      	ldr	r2, [pc, #348]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810620e:	430b      	orrs	r3, r1
 8106210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8106212:	e003      	b.n	810621c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106214:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106218:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810621c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106224:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8106228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 810622c:	2300      	movs	r3, #0
 810622e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8106232:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8106236:	460b      	mov	r3, r1
 8106238:	4313      	orrs	r3, r2
 810623a:	f000 809f 	beq.w	810637c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810623e:	4b4c      	ldr	r3, [pc, #304]	; (8106370 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106240:	681b      	ldr	r3, [r3, #0]
 8106242:	4a4b      	ldr	r2, [pc, #300]	; (8106370 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106248:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810624a:	f7fc fef9 	bl	8103040 <HAL_GetTick>
 810624e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106252:	e00b      	b.n	810626c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106254:	f7fc fef4 	bl	8103040 <HAL_GetTick>
 8106258:	4602      	mov	r2, r0
 810625a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 810625e:	1ad3      	subs	r3, r2, r3
 8106260:	2b64      	cmp	r3, #100	; 0x64
 8106262:	d903      	bls.n	810626c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8106264:	2303      	movs	r3, #3
 8106266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810626a:	e005      	b.n	8106278 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810626c:	4b40      	ldr	r3, [pc, #256]	; (8106370 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810626e:	681b      	ldr	r3, [r3, #0]
 8106270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106274:	2b00      	cmp	r3, #0
 8106276:	d0ed      	beq.n	8106254 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8106278:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810627c:	2b00      	cmp	r3, #0
 810627e:	d179      	bne.n	8106374 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106280:	4b3a      	ldr	r3, [pc, #232]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106282:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8106284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106288:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810628c:	4053      	eors	r3, r2
 810628e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106292:	2b00      	cmp	r3, #0
 8106294:	d015      	beq.n	81062c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106296:	4b35      	ldr	r3, [pc, #212]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810629a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810629e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81062a2:	4b32      	ldr	r3, [pc, #200]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81062a6:	4a31      	ldr	r2, [pc, #196]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81062ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81062ae:	4b2f      	ldr	r3, [pc, #188]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81062b2:	4a2e      	ldr	r2, [pc, #184]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81062b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81062ba:	4a2c      	ldr	r2, [pc, #176]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81062c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81062c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81062ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81062ce:	d118      	bne.n	8106302 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81062d0:	f7fc feb6 	bl	8103040 <HAL_GetTick>
 81062d4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81062d8:	e00d      	b.n	81062f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81062da:	f7fc feb1 	bl	8103040 <HAL_GetTick>
 81062de:	4602      	mov	r2, r0
 81062e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 81062e4:	1ad2      	subs	r2, r2, r3
 81062e6:	f241 3388 	movw	r3, #5000	; 0x1388
 81062ea:	429a      	cmp	r2, r3
 81062ec:	d903      	bls.n	81062f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81062ee:	2303      	movs	r3, #3
 81062f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 81062f4:	e005      	b.n	8106302 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81062f6:	4b1d      	ldr	r3, [pc, #116]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81062f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81062fa:	f003 0302 	and.w	r3, r3, #2
 81062fe:	2b00      	cmp	r3, #0
 8106300:	d0eb      	beq.n	81062da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8106302:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106306:	2b00      	cmp	r3, #0
 8106308:	d12b      	bne.n	8106362 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810630a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810630e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810631a:	d110      	bne.n	810633e <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 810631c:	4b13      	ldr	r3, [pc, #76]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810631e:	691b      	ldr	r3, [r3, #16]
 8106320:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8106324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106328:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810632c:	091b      	lsrs	r3, r3, #4
 810632e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8106332:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8106336:	4a0d      	ldr	r2, [pc, #52]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106338:	430b      	orrs	r3, r1
 810633a:	6113      	str	r3, [r2, #16]
 810633c:	e005      	b.n	810634a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810633e:	4b0b      	ldr	r3, [pc, #44]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106340:	691b      	ldr	r3, [r3, #16]
 8106342:	4a0a      	ldr	r2, [pc, #40]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106344:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8106348:	6113      	str	r3, [r2, #16]
 810634a:	4b08      	ldr	r3, [pc, #32]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810634c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 810634e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106352:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8106356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810635a:	4a04      	ldr	r2, [pc, #16]	; (810636c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810635c:	430b      	orrs	r3, r1
 810635e:	6713      	str	r3, [r2, #112]	; 0x70
 8106360:	e00c      	b.n	810637c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 810636a:	e007      	b.n	810637c <HAL_RCCEx_PeriphCLKConfig+0x924>
 810636c:	58024400 	.word	0x58024400
 8106370:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106378:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106384:	f002 0301 	and.w	r3, r2, #1
 8106388:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 810638c:	2300      	movs	r3, #0
 810638e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8106392:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8106396:	460b      	mov	r3, r1
 8106398:	4313      	orrs	r3, r2
 810639a:	f000 8089 	beq.w	81064b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810639e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81063a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81063a4:	2b28      	cmp	r3, #40	; 0x28
 81063a6:	d86b      	bhi.n	8106480 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 81063a8:	a201      	add	r2, pc, #4	; (adr r2, 81063b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 81063aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81063ae:	bf00      	nop
 81063b0:	08106489 	.word	0x08106489
 81063b4:	08106481 	.word	0x08106481
 81063b8:	08106481 	.word	0x08106481
 81063bc:	08106481 	.word	0x08106481
 81063c0:	08106481 	.word	0x08106481
 81063c4:	08106481 	.word	0x08106481
 81063c8:	08106481 	.word	0x08106481
 81063cc:	08106481 	.word	0x08106481
 81063d0:	08106455 	.word	0x08106455
 81063d4:	08106481 	.word	0x08106481
 81063d8:	08106481 	.word	0x08106481
 81063dc:	08106481 	.word	0x08106481
 81063e0:	08106481 	.word	0x08106481
 81063e4:	08106481 	.word	0x08106481
 81063e8:	08106481 	.word	0x08106481
 81063ec:	08106481 	.word	0x08106481
 81063f0:	0810646b 	.word	0x0810646b
 81063f4:	08106481 	.word	0x08106481
 81063f8:	08106481 	.word	0x08106481
 81063fc:	08106481 	.word	0x08106481
 8106400:	08106481 	.word	0x08106481
 8106404:	08106481 	.word	0x08106481
 8106408:	08106481 	.word	0x08106481
 810640c:	08106481 	.word	0x08106481
 8106410:	08106489 	.word	0x08106489
 8106414:	08106481 	.word	0x08106481
 8106418:	08106481 	.word	0x08106481
 810641c:	08106481 	.word	0x08106481
 8106420:	08106481 	.word	0x08106481
 8106424:	08106481 	.word	0x08106481
 8106428:	08106481 	.word	0x08106481
 810642c:	08106481 	.word	0x08106481
 8106430:	08106489 	.word	0x08106489
 8106434:	08106481 	.word	0x08106481
 8106438:	08106481 	.word	0x08106481
 810643c:	08106481 	.word	0x08106481
 8106440:	08106481 	.word	0x08106481
 8106444:	08106481 	.word	0x08106481
 8106448:	08106481 	.word	0x08106481
 810644c:	08106481 	.word	0x08106481
 8106450:	08106489 	.word	0x08106489
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106458:	3308      	adds	r3, #8
 810645a:	2101      	movs	r1, #1
 810645c:	4618      	mov	r0, r3
 810645e:	f001 fe95 	bl	810818c <RCCEx_PLL2_Config>
 8106462:	4603      	mov	r3, r0
 8106464:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106468:	e00f      	b.n	810648a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810646e:	3328      	adds	r3, #40	; 0x28
 8106470:	2101      	movs	r1, #1
 8106472:	4618      	mov	r0, r3
 8106474:	f001 ff3c 	bl	81082f0 <RCCEx_PLL3_Config>
 8106478:	4603      	mov	r3, r0
 810647a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810647e:	e004      	b.n	810648a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106480:	2301      	movs	r3, #1
 8106482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106486:	e000      	b.n	810648a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8106488:	bf00      	nop
    }

    if (ret == HAL_OK)
 810648a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810648e:	2b00      	cmp	r3, #0
 8106490:	d10a      	bne.n	81064a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106492:	4bbf      	ldr	r3, [pc, #764]	; (8106790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106496:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 810649a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810649e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81064a0:	4abb      	ldr	r2, [pc, #748]	; (8106790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81064a2:	430b      	orrs	r3, r1
 81064a4:	6553      	str	r3, [r2, #84]	; 0x54
 81064a6:	e003      	b.n	81064b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81064a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81064ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81064b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81064b8:	f002 0302 	and.w	r3, r2, #2
 81064bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 81064c0:	2300      	movs	r3, #0
 81064c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 81064c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 81064ca:	460b      	mov	r3, r1
 81064cc:	4313      	orrs	r3, r2
 81064ce:	d041      	beq.n	8106554 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81064d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81064d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81064d6:	2b05      	cmp	r3, #5
 81064d8:	d824      	bhi.n	8106524 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81064da:	a201      	add	r2, pc, #4	; (adr r2, 81064e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81064e0:	0810652d 	.word	0x0810652d
 81064e4:	081064f9 	.word	0x081064f9
 81064e8:	0810650f 	.word	0x0810650f
 81064ec:	0810652d 	.word	0x0810652d
 81064f0:	0810652d 	.word	0x0810652d
 81064f4:	0810652d 	.word	0x0810652d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81064f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81064fc:	3308      	adds	r3, #8
 81064fe:	2101      	movs	r1, #1
 8106500:	4618      	mov	r0, r3
 8106502:	f001 fe43 	bl	810818c <RCCEx_PLL2_Config>
 8106506:	4603      	mov	r3, r0
 8106508:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810650c:	e00f      	b.n	810652e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810650e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106512:	3328      	adds	r3, #40	; 0x28
 8106514:	2101      	movs	r1, #1
 8106516:	4618      	mov	r0, r3
 8106518:	f001 feea 	bl	81082f0 <RCCEx_PLL3_Config>
 810651c:	4603      	mov	r3, r0
 810651e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106522:	e004      	b.n	810652e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106524:	2301      	movs	r3, #1
 8106526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810652a:	e000      	b.n	810652e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 810652c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810652e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106532:	2b00      	cmp	r3, #0
 8106534:	d10a      	bne.n	810654c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106536:	4b96      	ldr	r3, [pc, #600]	; (8106790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810653a:	f023 0107 	bic.w	r1, r3, #7
 810653e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106544:	4a92      	ldr	r2, [pc, #584]	; (8106790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106546:	430b      	orrs	r3, r1
 8106548:	6553      	str	r3, [r2, #84]	; 0x54
 810654a:	e003      	b.n	8106554 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810654c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106550:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106558:	e9d3 2300 	ldrd	r2, r3, [r3]
 810655c:	f002 0304 	and.w	r3, r2, #4
 8106560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8106564:	2300      	movs	r3, #0
 8106566:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 810656a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 810656e:	460b      	mov	r3, r1
 8106570:	4313      	orrs	r3, r2
 8106572:	d044      	beq.n	81065fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8106574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810657c:	2b05      	cmp	r3, #5
 810657e:	d825      	bhi.n	81065cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8106580:	a201      	add	r2, pc, #4	; (adr r2, 8106588 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8106582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106586:	bf00      	nop
 8106588:	081065d5 	.word	0x081065d5
 810658c:	081065a1 	.word	0x081065a1
 8106590:	081065b7 	.word	0x081065b7
 8106594:	081065d5 	.word	0x081065d5
 8106598:	081065d5 	.word	0x081065d5
 810659c:	081065d5 	.word	0x081065d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81065a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065a4:	3308      	adds	r3, #8
 81065a6:	2101      	movs	r1, #1
 81065a8:	4618      	mov	r0, r3
 81065aa:	f001 fdef 	bl	810818c <RCCEx_PLL2_Config>
 81065ae:	4603      	mov	r3, r0
 81065b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81065b4:	e00f      	b.n	81065d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81065b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065ba:	3328      	adds	r3, #40	; 0x28
 81065bc:	2101      	movs	r1, #1
 81065be:	4618      	mov	r0, r3
 81065c0:	f001 fe96 	bl	81082f0 <RCCEx_PLL3_Config>
 81065c4:	4603      	mov	r3, r0
 81065c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81065ca:	e004      	b.n	81065d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81065cc:	2301      	movs	r3, #1
 81065ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81065d2:	e000      	b.n	81065d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81065d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81065d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81065da:	2b00      	cmp	r3, #0
 81065dc:	d10b      	bne.n	81065f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81065de:	4b6c      	ldr	r3, [pc, #432]	; (8106790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81065e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81065e2:	f023 0107 	bic.w	r1, r3, #7
 81065e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81065ee:	4a68      	ldr	r2, [pc, #416]	; (8106790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81065f0:	430b      	orrs	r3, r1
 81065f2:	6593      	str	r3, [r2, #88]	; 0x58
 81065f4:	e003      	b.n	81065fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81065f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81065fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81065fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106606:	f002 0320 	and.w	r3, r2, #32
 810660a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 810660e:	2300      	movs	r3, #0
 8106610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8106614:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8106618:	460b      	mov	r3, r1
 810661a:	4313      	orrs	r3, r2
 810661c:	d055      	beq.n	81066ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810662a:	d033      	beq.n	8106694 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 810662c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106630:	d82c      	bhi.n	810668c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106636:	d02f      	beq.n	8106698 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8106638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810663c:	d826      	bhi.n	810668c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810663e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106642:	d02b      	beq.n	810669c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8106644:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106648:	d820      	bhi.n	810668c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810664a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810664e:	d012      	beq.n	8106676 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8106650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106654:	d81a      	bhi.n	810668c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106656:	2b00      	cmp	r3, #0
 8106658:	d022      	beq.n	81066a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810665a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810665e:	d115      	bne.n	810668c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106664:	3308      	adds	r3, #8
 8106666:	2100      	movs	r1, #0
 8106668:	4618      	mov	r0, r3
 810666a:	f001 fd8f 	bl	810818c <RCCEx_PLL2_Config>
 810666e:	4603      	mov	r3, r0
 8106670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106674:	e015      	b.n	81066a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810667a:	3328      	adds	r3, #40	; 0x28
 810667c:	2102      	movs	r1, #2
 810667e:	4618      	mov	r0, r3
 8106680:	f001 fe36 	bl	81082f0 <RCCEx_PLL3_Config>
 8106684:	4603      	mov	r3, r0
 8106686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810668a:	e00a      	b.n	81066a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810668c:	2301      	movs	r3, #1
 810668e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106692:	e006      	b.n	81066a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106694:	bf00      	nop
 8106696:	e004      	b.n	81066a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106698:	bf00      	nop
 810669a:	e002      	b.n	81066a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810669c:	bf00      	nop
 810669e:	e000      	b.n	81066a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81066a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81066a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81066a6:	2b00      	cmp	r3, #0
 81066a8:	d10b      	bne.n	81066c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81066aa:	4b39      	ldr	r3, [pc, #228]	; (8106790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81066ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066ae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 81066b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81066b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81066ba:	4a35      	ldr	r2, [pc, #212]	; (8106790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81066bc:	430b      	orrs	r3, r1
 81066be:	6553      	str	r3, [r2, #84]	; 0x54
 81066c0:	e003      	b.n	81066ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81066c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81066ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066d2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 81066d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 81066da:	2300      	movs	r3, #0
 81066dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 81066e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 81066e4:	460b      	mov	r3, r1
 81066e6:	4313      	orrs	r3, r2
 81066e8:	d058      	beq.n	810679c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81066ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81066ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81066f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81066f6:	d033      	beq.n	8106760 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81066f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81066fc:	d82c      	bhi.n	8106758 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81066fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106702:	d02f      	beq.n	8106764 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8106704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106708:	d826      	bhi.n	8106758 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810670a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810670e:	d02b      	beq.n	8106768 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8106710:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8106714:	d820      	bhi.n	8106758 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810671a:	d012      	beq.n	8106742 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 810671c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106720:	d81a      	bhi.n	8106758 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106722:	2b00      	cmp	r3, #0
 8106724:	d022      	beq.n	810676c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8106726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810672a:	d115      	bne.n	8106758 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106730:	3308      	adds	r3, #8
 8106732:	2100      	movs	r1, #0
 8106734:	4618      	mov	r0, r3
 8106736:	f001 fd29 	bl	810818c <RCCEx_PLL2_Config>
 810673a:	4603      	mov	r3, r0
 810673c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106740:	e015      	b.n	810676e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106746:	3328      	adds	r3, #40	; 0x28
 8106748:	2102      	movs	r1, #2
 810674a:	4618      	mov	r0, r3
 810674c:	f001 fdd0 	bl	81082f0 <RCCEx_PLL3_Config>
 8106750:	4603      	mov	r3, r0
 8106752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106756:	e00a      	b.n	810676e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106758:	2301      	movs	r3, #1
 810675a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810675e:	e006      	b.n	810676e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106760:	bf00      	nop
 8106762:	e004      	b.n	810676e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106764:	bf00      	nop
 8106766:	e002      	b.n	810676e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106768:	bf00      	nop
 810676a:	e000      	b.n	810676e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810676c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810676e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106772:	2b00      	cmp	r3, #0
 8106774:	d10e      	bne.n	8106794 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106776:	4b06      	ldr	r3, [pc, #24]	; (8106790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810677a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 810677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8106786:	4a02      	ldr	r2, [pc, #8]	; (8106790 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106788:	430b      	orrs	r3, r1
 810678a:	6593      	str	r3, [r2, #88]	; 0x58
 810678c:	e006      	b.n	810679c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810678e:	bf00      	nop
 8106790:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106798:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067a4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 81067a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 81067ac:	2300      	movs	r3, #0
 81067ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 81067b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 81067b6:	460b      	mov	r3, r1
 81067b8:	4313      	orrs	r3, r2
 81067ba:	d055      	beq.n	8106868 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81067bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81067c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81067c8:	d033      	beq.n	8106832 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81067ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81067ce:	d82c      	bhi.n	810682a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81067d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81067d4:	d02f      	beq.n	8106836 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81067d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81067da:	d826      	bhi.n	810682a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81067dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81067e0:	d02b      	beq.n	810683a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81067e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81067e6:	d820      	bhi.n	810682a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81067e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81067ec:	d012      	beq.n	8106814 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81067ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81067f2:	d81a      	bhi.n	810682a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81067f4:	2b00      	cmp	r3, #0
 81067f6:	d022      	beq.n	810683e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81067f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81067fc:	d115      	bne.n	810682a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106802:	3308      	adds	r3, #8
 8106804:	2100      	movs	r1, #0
 8106806:	4618      	mov	r0, r3
 8106808:	f001 fcc0 	bl	810818c <RCCEx_PLL2_Config>
 810680c:	4603      	mov	r3, r0
 810680e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106812:	e015      	b.n	8106840 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106818:	3328      	adds	r3, #40	; 0x28
 810681a:	2102      	movs	r1, #2
 810681c:	4618      	mov	r0, r3
 810681e:	f001 fd67 	bl	81082f0 <RCCEx_PLL3_Config>
 8106822:	4603      	mov	r3, r0
 8106824:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106828:	e00a      	b.n	8106840 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810682a:	2301      	movs	r3, #1
 810682c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106830:	e006      	b.n	8106840 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106832:	bf00      	nop
 8106834:	e004      	b.n	8106840 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106836:	bf00      	nop
 8106838:	e002      	b.n	8106840 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810683a:	bf00      	nop
 810683c:	e000      	b.n	8106840 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810683e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106844:	2b00      	cmp	r3, #0
 8106846:	d10b      	bne.n	8106860 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8106848:	4ba1      	ldr	r3, [pc, #644]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810684a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810684c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8106850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106854:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8106858:	4a9d      	ldr	r2, [pc, #628]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810685a:	430b      	orrs	r3, r1
 810685c:	6593      	str	r3, [r2, #88]	; 0x58
 810685e:	e003      	b.n	8106868 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106864:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8106868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106870:	f002 0308 	and.w	r3, r2, #8
 8106874:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8106878:	2300      	movs	r3, #0
 810687a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 810687e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8106882:	460b      	mov	r3, r1
 8106884:	4313      	orrs	r3, r2
 8106886:	d01e      	beq.n	81068c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8106888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810688c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106894:	d10c      	bne.n	81068b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810689a:	3328      	adds	r3, #40	; 0x28
 810689c:	2102      	movs	r1, #2
 810689e:	4618      	mov	r0, r3
 81068a0:	f001 fd26 	bl	81082f0 <RCCEx_PLL3_Config>
 81068a4:	4603      	mov	r3, r0
 81068a6:	2b00      	cmp	r3, #0
 81068a8:	d002      	beq.n	81068b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81068aa:	2301      	movs	r3, #1
 81068ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81068b0:	4b87      	ldr	r3, [pc, #540]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81068b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81068b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81068b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81068c0:	4a83      	ldr	r2, [pc, #524]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81068c2:	430b      	orrs	r3, r1
 81068c4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81068ce:	f002 0310 	and.w	r3, r2, #16
 81068d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 81068d6:	2300      	movs	r3, #0
 81068d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 81068dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 81068e0:	460b      	mov	r3, r1
 81068e2:	4313      	orrs	r3, r2
 81068e4:	d01e      	beq.n	8106924 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81068e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81068ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81068f2:	d10c      	bne.n	810690e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068f8:	3328      	adds	r3, #40	; 0x28
 81068fa:	2102      	movs	r1, #2
 81068fc:	4618      	mov	r0, r3
 81068fe:	f001 fcf7 	bl	81082f0 <RCCEx_PLL3_Config>
 8106902:	4603      	mov	r3, r0
 8106904:	2b00      	cmp	r3, #0
 8106906:	d002      	beq.n	810690e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8106908:	2301      	movs	r3, #1
 810690a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810690e:	4b70      	ldr	r3, [pc, #448]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106912:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8106916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810691a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810691e:	4a6c      	ldr	r2, [pc, #432]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106920:	430b      	orrs	r3, r1
 8106922:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106928:	e9d3 2300 	ldrd	r2, r3, [r3]
 810692c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8106930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8106934:	2300      	movs	r3, #0
 8106936:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 810693a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 810693e:	460b      	mov	r3, r1
 8106940:	4313      	orrs	r3, r2
 8106942:	d03e      	beq.n	81069c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8106944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106948:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810694c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106950:	d022      	beq.n	8106998 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8106952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106956:	d81b      	bhi.n	8106990 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8106958:	2b00      	cmp	r3, #0
 810695a:	d003      	beq.n	8106964 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 810695c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106960:	d00b      	beq.n	810697a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8106962:	e015      	b.n	8106990 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106968:	3308      	adds	r3, #8
 810696a:	2100      	movs	r1, #0
 810696c:	4618      	mov	r0, r3
 810696e:	f001 fc0d 	bl	810818c <RCCEx_PLL2_Config>
 8106972:	4603      	mov	r3, r0
 8106974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8106978:	e00f      	b.n	810699a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810697a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810697e:	3328      	adds	r3, #40	; 0x28
 8106980:	2102      	movs	r1, #2
 8106982:	4618      	mov	r0, r3
 8106984:	f001 fcb4 	bl	81082f0 <RCCEx_PLL3_Config>
 8106988:	4603      	mov	r3, r0
 810698a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810698e:	e004      	b.n	810699a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106990:	2301      	movs	r3, #1
 8106992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106996:	e000      	b.n	810699a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8106998:	bf00      	nop
    }

    if (ret == HAL_OK)
 810699a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810699e:	2b00      	cmp	r3, #0
 81069a0:	d10b      	bne.n	81069ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81069a2:	4b4b      	ldr	r3, [pc, #300]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81069a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81069a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 81069aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81069b2:	4a47      	ldr	r2, [pc, #284]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81069b4:	430b      	orrs	r3, r1
 81069b6:	6593      	str	r3, [r2, #88]	; 0x58
 81069b8:	e003      	b.n	81069c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81069ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81069be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81069c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81069ca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 81069ce:	67bb      	str	r3, [r7, #120]	; 0x78
 81069d0:	2300      	movs	r3, #0
 81069d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 81069d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 81069d8:	460b      	mov	r3, r1
 81069da:	4313      	orrs	r3, r2
 81069dc:	d03b      	beq.n	8106a56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81069e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81069ea:	d01f      	beq.n	8106a2c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81069ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81069f0:	d818      	bhi.n	8106a24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81069f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81069f6:	d003      	beq.n	8106a00 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81069f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81069fc:	d007      	beq.n	8106a0e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81069fe:	e011      	b.n	8106a24 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106a00:	4b33      	ldr	r3, [pc, #204]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a04:	4a32      	ldr	r2, [pc, #200]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8106a0c:	e00f      	b.n	8106a2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a12:	3328      	adds	r3, #40	; 0x28
 8106a14:	2101      	movs	r1, #1
 8106a16:	4618      	mov	r0, r3
 8106a18:	f001 fc6a 	bl	81082f0 <RCCEx_PLL3_Config>
 8106a1c:	4603      	mov	r3, r0
 8106a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8106a22:	e004      	b.n	8106a2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106a24:	2301      	movs	r3, #1
 8106a26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106a2a:	e000      	b.n	8106a2e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8106a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106a32:	2b00      	cmp	r3, #0
 8106a34:	d10b      	bne.n	8106a4e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106a36:	4b26      	ldr	r3, [pc, #152]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106a3a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8106a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106a46:	4a22      	ldr	r2, [pc, #136]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a48:	430b      	orrs	r3, r1
 8106a4a:	6553      	str	r3, [r2, #84]	; 0x54
 8106a4c:	e003      	b.n	8106a56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106a52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8106a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a5e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8106a62:	673b      	str	r3, [r7, #112]	; 0x70
 8106a64:	2300      	movs	r3, #0
 8106a66:	677b      	str	r3, [r7, #116]	; 0x74
 8106a68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8106a6c:	460b      	mov	r3, r1
 8106a6e:	4313      	orrs	r3, r2
 8106a70:	d034      	beq.n	8106adc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8106a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106a78:	2b00      	cmp	r3, #0
 8106a7a:	d003      	beq.n	8106a84 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8106a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106a80:	d007      	beq.n	8106a92 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8106a82:	e011      	b.n	8106aa8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106a84:	4b12      	ldr	r3, [pc, #72]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a88:	4a11      	ldr	r2, [pc, #68]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106a90:	e00e      	b.n	8106ab0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a96:	3308      	adds	r3, #8
 8106a98:	2102      	movs	r1, #2
 8106a9a:	4618      	mov	r0, r3
 8106a9c:	f001 fb76 	bl	810818c <RCCEx_PLL2_Config>
 8106aa0:	4603      	mov	r3, r0
 8106aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106aa6:	e003      	b.n	8106ab0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8106aa8:	2301      	movs	r3, #1
 8106aaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106ab4:	2b00      	cmp	r3, #0
 8106ab6:	d10d      	bne.n	8106ad4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106ab8:	4b05      	ldr	r3, [pc, #20]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106abc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8106ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106ac6:	4a02      	ldr	r2, [pc, #8]	; (8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106ac8:	430b      	orrs	r3, r1
 8106aca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8106acc:	e006      	b.n	8106adc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8106ace:	bf00      	nop
 8106ad0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106ad8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8106adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ae4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8106ae8:	66bb      	str	r3, [r7, #104]	; 0x68
 8106aea:	2300      	movs	r3, #0
 8106aec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8106aee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8106af2:	460b      	mov	r3, r1
 8106af4:	4313      	orrs	r3, r2
 8106af6:	d00c      	beq.n	8106b12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106afc:	3328      	adds	r3, #40	; 0x28
 8106afe:	2102      	movs	r1, #2
 8106b00:	4618      	mov	r0, r3
 8106b02:	f001 fbf5 	bl	81082f0 <RCCEx_PLL3_Config>
 8106b06:	4603      	mov	r3, r0
 8106b08:	2b00      	cmp	r3, #0
 8106b0a:	d002      	beq.n	8106b12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8106b0c:	2301      	movs	r3, #1
 8106b0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8106b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b1a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8106b1e:	663b      	str	r3, [r7, #96]	; 0x60
 8106b20:	2300      	movs	r3, #0
 8106b22:	667b      	str	r3, [r7, #100]	; 0x64
 8106b24:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8106b28:	460b      	mov	r3, r1
 8106b2a:	4313      	orrs	r3, r2
 8106b2c:	d038      	beq.n	8106ba0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8106b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106b3a:	d018      	beq.n	8106b6e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8106b3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106b40:	d811      	bhi.n	8106b66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8106b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106b46:	d014      	beq.n	8106b72 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8106b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106b4c:	d80b      	bhi.n	8106b66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8106b4e:	2b00      	cmp	r3, #0
 8106b50:	d011      	beq.n	8106b76 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8106b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106b56:	d106      	bne.n	8106b66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106b58:	4bc3      	ldr	r3, [pc, #780]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b5c:	4ac2      	ldr	r2, [pc, #776]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106b62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8106b64:	e008      	b.n	8106b78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106b66:	2301      	movs	r3, #1
 8106b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106b6c:	e004      	b.n	8106b78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106b6e:	bf00      	nop
 8106b70:	e002      	b.n	8106b78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106b72:	bf00      	nop
 8106b74:	e000      	b.n	8106b78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106b7c:	2b00      	cmp	r3, #0
 8106b7e:	d10b      	bne.n	8106b98 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106b80:	4bb9      	ldr	r3, [pc, #740]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106b84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8106b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106b90:	4ab5      	ldr	r2, [pc, #724]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106b92:	430b      	orrs	r3, r1
 8106b94:	6553      	str	r3, [r2, #84]	; 0x54
 8106b96:	e003      	b.n	8106ba0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106b9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8106ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ba8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8106bac:	65bb      	str	r3, [r7, #88]	; 0x58
 8106bae:	2300      	movs	r3, #0
 8106bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8106bb2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8106bb6:	460b      	mov	r3, r1
 8106bb8:	4313      	orrs	r3, r2
 8106bba:	d009      	beq.n	8106bd0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106bbc:	4baa      	ldr	r3, [pc, #680]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106bc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8106bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106bca:	4aa7      	ldr	r2, [pc, #668]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106bcc:	430b      	orrs	r3, r1
 8106bce:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106bd8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8106bdc:	653b      	str	r3, [r7, #80]	; 0x50
 8106bde:	2300      	movs	r3, #0
 8106be0:	657b      	str	r3, [r7, #84]	; 0x54
 8106be2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8106be6:	460b      	mov	r3, r1
 8106be8:	4313      	orrs	r3, r2
 8106bea:	d00a      	beq.n	8106c02 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106bec:	4b9e      	ldr	r3, [pc, #632]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106bee:	691b      	ldr	r3, [r3, #16]
 8106bf0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8106bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106bf8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8106bfc:	4a9a      	ldr	r2, [pc, #616]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106bfe:	430b      	orrs	r3, r1
 8106c00:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8106c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c0a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8106c0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8106c10:	2300      	movs	r3, #0
 8106c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8106c14:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8106c18:	460b      	mov	r3, r1
 8106c1a:	4313      	orrs	r3, r2
 8106c1c:	d009      	beq.n	8106c32 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8106c1e:	4b92      	ldr	r3, [pc, #584]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106c22:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8106c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106c2c:	4a8e      	ldr	r2, [pc, #568]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c2e:	430b      	orrs	r3, r1
 8106c30:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8106c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c3a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8106c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8106c40:	2300      	movs	r3, #0
 8106c42:	647b      	str	r3, [r7, #68]	; 0x44
 8106c44:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8106c48:	460b      	mov	r3, r1
 8106c4a:	4313      	orrs	r3, r2
 8106c4c:	d00e      	beq.n	8106c6c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8106c4e:	4b86      	ldr	r3, [pc, #536]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c50:	691b      	ldr	r3, [r3, #16]
 8106c52:	4a85      	ldr	r2, [pc, #532]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8106c58:	6113      	str	r3, [r2, #16]
 8106c5a:	4b83      	ldr	r3, [pc, #524]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c5c:	6919      	ldr	r1, [r3, #16]
 8106c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8106c66:	4a80      	ldr	r2, [pc, #512]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c68:	430b      	orrs	r3, r1
 8106c6a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8106c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c74:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8106c78:	63bb      	str	r3, [r7, #56]	; 0x38
 8106c7a:	2300      	movs	r3, #0
 8106c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106c7e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8106c82:	460b      	mov	r3, r1
 8106c84:	4313      	orrs	r3, r2
 8106c86:	d009      	beq.n	8106c9c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8106c88:	4b77      	ldr	r3, [pc, #476]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106c8c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8106c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c96:	4a74      	ldr	r2, [pc, #464]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106c98:	430b      	orrs	r3, r1
 8106c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8106c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ca4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8106ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8106caa:	2300      	movs	r3, #0
 8106cac:	637b      	str	r3, [r7, #52]	; 0x34
 8106cae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8106cb2:	460b      	mov	r3, r1
 8106cb4:	4313      	orrs	r3, r2
 8106cb6:	d00a      	beq.n	8106cce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106cb8:	4b6b      	ldr	r3, [pc, #428]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106cbc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8106cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106cc8:	4a67      	ldr	r2, [pc, #412]	; (8106e68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106cca:	430b      	orrs	r3, r1
 8106ccc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8106cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106cd6:	2100      	movs	r1, #0
 8106cd8:	62b9      	str	r1, [r7, #40]	; 0x28
 8106cda:	f003 0301 	and.w	r3, r3, #1
 8106cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8106ce0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8106ce4:	460b      	mov	r3, r1
 8106ce6:	4313      	orrs	r3, r2
 8106ce8:	d011      	beq.n	8106d0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cee:	3308      	adds	r3, #8
 8106cf0:	2100      	movs	r1, #0
 8106cf2:	4618      	mov	r0, r3
 8106cf4:	f001 fa4a 	bl	810818c <RCCEx_PLL2_Config>
 8106cf8:	4603      	mov	r3, r0
 8106cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d02:	2b00      	cmp	r3, #0
 8106d04:	d003      	beq.n	8106d0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8106d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d16:	2100      	movs	r1, #0
 8106d18:	6239      	str	r1, [r7, #32]
 8106d1a:	f003 0302 	and.w	r3, r3, #2
 8106d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8106d20:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8106d24:	460b      	mov	r3, r1
 8106d26:	4313      	orrs	r3, r2
 8106d28:	d011      	beq.n	8106d4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d2e:	3308      	adds	r3, #8
 8106d30:	2101      	movs	r1, #1
 8106d32:	4618      	mov	r0, r3
 8106d34:	f001 fa2a 	bl	810818c <RCCEx_PLL2_Config>
 8106d38:	4603      	mov	r3, r0
 8106d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d42:	2b00      	cmp	r3, #0
 8106d44:	d003      	beq.n	8106d4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8106d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d56:	2100      	movs	r1, #0
 8106d58:	61b9      	str	r1, [r7, #24]
 8106d5a:	f003 0304 	and.w	r3, r3, #4
 8106d5e:	61fb      	str	r3, [r7, #28]
 8106d60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8106d64:	460b      	mov	r3, r1
 8106d66:	4313      	orrs	r3, r2
 8106d68:	d011      	beq.n	8106d8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d6e:	3308      	adds	r3, #8
 8106d70:	2102      	movs	r1, #2
 8106d72:	4618      	mov	r0, r3
 8106d74:	f001 fa0a 	bl	810818c <RCCEx_PLL2_Config>
 8106d78:	4603      	mov	r3, r0
 8106d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d82:	2b00      	cmp	r3, #0
 8106d84:	d003      	beq.n	8106d8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8106d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d96:	2100      	movs	r1, #0
 8106d98:	6139      	str	r1, [r7, #16]
 8106d9a:	f003 0308 	and.w	r3, r3, #8
 8106d9e:	617b      	str	r3, [r7, #20]
 8106da0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8106da4:	460b      	mov	r3, r1
 8106da6:	4313      	orrs	r3, r2
 8106da8:	d011      	beq.n	8106dce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106dae:	3328      	adds	r3, #40	; 0x28
 8106db0:	2100      	movs	r1, #0
 8106db2:	4618      	mov	r0, r3
 8106db4:	f001 fa9c 	bl	81082f0 <RCCEx_PLL3_Config>
 8106db8:	4603      	mov	r3, r0
 8106dba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8106dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106dc2:	2b00      	cmp	r3, #0
 8106dc4:	d003      	beq.n	8106dce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106dca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8106dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106dd6:	2100      	movs	r1, #0
 8106dd8:	60b9      	str	r1, [r7, #8]
 8106dda:	f003 0310 	and.w	r3, r3, #16
 8106dde:	60fb      	str	r3, [r7, #12]
 8106de0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8106de4:	460b      	mov	r3, r1
 8106de6:	4313      	orrs	r3, r2
 8106de8:	d011      	beq.n	8106e0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106dee:	3328      	adds	r3, #40	; 0x28
 8106df0:	2101      	movs	r1, #1
 8106df2:	4618      	mov	r0, r3
 8106df4:	f001 fa7c 	bl	81082f0 <RCCEx_PLL3_Config>
 8106df8:	4603      	mov	r3, r0
 8106dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e02:	2b00      	cmp	r3, #0
 8106e04:	d003      	beq.n	8106e0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8106e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e16:	2100      	movs	r1, #0
 8106e18:	6039      	str	r1, [r7, #0]
 8106e1a:	f003 0320 	and.w	r3, r3, #32
 8106e1e:	607b      	str	r3, [r7, #4]
 8106e20:	e9d7 1200 	ldrd	r1, r2, [r7]
 8106e24:	460b      	mov	r3, r1
 8106e26:	4313      	orrs	r3, r2
 8106e28:	d011      	beq.n	8106e4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e2e:	3328      	adds	r3, #40	; 0x28
 8106e30:	2102      	movs	r1, #2
 8106e32:	4618      	mov	r0, r3
 8106e34:	f001 fa5c 	bl	81082f0 <RCCEx_PLL3_Config>
 8106e38:	4603      	mov	r3, r0
 8106e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e42:	2b00      	cmp	r3, #0
 8106e44:	d003      	beq.n	8106e4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8106e4e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8106e52:	2b00      	cmp	r3, #0
 8106e54:	d101      	bne.n	8106e5a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8106e56:	2300      	movs	r3, #0
 8106e58:	e000      	b.n	8106e5c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8106e5a:	2301      	movs	r3, #1
}
 8106e5c:	4618      	mov	r0, r3
 8106e5e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8106e62:	46bd      	mov	sp, r7
 8106e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8106e68:	58024400 	.word	0x58024400

08106e6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8106e6c:	b580      	push	{r7, lr}
 8106e6e:	b090      	sub	sp, #64	; 0x40
 8106e70:	af00      	add	r7, sp, #0
 8106e72:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8106e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106e7a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8106e7e:	430b      	orrs	r3, r1
 8106e80:	f040 8094 	bne.w	8106fac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8106e84:	4b9e      	ldr	r3, [pc, #632]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106e88:	f003 0307 	and.w	r3, r3, #7
 8106e8c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8106e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e90:	2b04      	cmp	r3, #4
 8106e92:	f200 8087 	bhi.w	8106fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8106e96:	a201      	add	r2, pc, #4	; (adr r2, 8106e9c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8106e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e9c:	08106eb1 	.word	0x08106eb1
 8106ea0:	08106ed9 	.word	0x08106ed9
 8106ea4:	08106f01 	.word	0x08106f01
 8106ea8:	08106f9d 	.word	0x08106f9d
 8106eac:	08106f29 	.word	0x08106f29
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106eb0:	4b93      	ldr	r3, [pc, #588]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106eb2:	681b      	ldr	r3, [r3, #0]
 8106eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106eb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106ebc:	d108      	bne.n	8106ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106ec2:	4618      	mov	r0, r3
 8106ec4:	f001 f810 	bl	8107ee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106ecc:	f000 bd45 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106ed0:	2300      	movs	r3, #0
 8106ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106ed4:	f000 bd41 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106ed8:	4b89      	ldr	r3, [pc, #548]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106eda:	681b      	ldr	r3, [r3, #0]
 8106edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106ee4:	d108      	bne.n	8106ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106ee6:	f107 0318 	add.w	r3, r7, #24
 8106eea:	4618      	mov	r0, r3
 8106eec:	f000 fd54 	bl	8107998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106ef0:	69bb      	ldr	r3, [r7, #24]
 8106ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106ef4:	f000 bd31 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106ef8:	2300      	movs	r3, #0
 8106efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106efc:	f000 bd2d 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106f00:	4b7f      	ldr	r3, [pc, #508]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f02:	681b      	ldr	r3, [r3, #0]
 8106f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106f0c:	d108      	bne.n	8106f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106f0e:	f107 030c 	add.w	r3, r7, #12
 8106f12:	4618      	mov	r0, r3
 8106f14:	f000 fe94 	bl	8107c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106f18:	68fb      	ldr	r3, [r7, #12]
 8106f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f1c:	f000 bd1d 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f20:	2300      	movs	r3, #0
 8106f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106f24:	f000 bd19 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106f28:	4b75      	ldr	r3, [pc, #468]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106f30:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106f32:	4b73      	ldr	r3, [pc, #460]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f34:	681b      	ldr	r3, [r3, #0]
 8106f36:	f003 0304 	and.w	r3, r3, #4
 8106f3a:	2b04      	cmp	r3, #4
 8106f3c:	d10c      	bne.n	8106f58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8106f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106f40:	2b00      	cmp	r3, #0
 8106f42:	d109      	bne.n	8106f58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106f44:	4b6e      	ldr	r3, [pc, #440]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f46:	681b      	ldr	r3, [r3, #0]
 8106f48:	08db      	lsrs	r3, r3, #3
 8106f4a:	f003 0303 	and.w	r3, r3, #3
 8106f4e:	4a6d      	ldr	r2, [pc, #436]	; (8107104 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8106f50:	fa22 f303 	lsr.w	r3, r2, r3
 8106f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106f56:	e01f      	b.n	8106f98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106f58:	4b69      	ldr	r3, [pc, #420]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f5a:	681b      	ldr	r3, [r3, #0]
 8106f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106f64:	d106      	bne.n	8106f74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8106f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106f6c:	d102      	bne.n	8106f74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106f6e:	4b66      	ldr	r3, [pc, #408]	; (8107108 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8106f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106f72:	e011      	b.n	8106f98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106f74:	4b62      	ldr	r3, [pc, #392]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f76:	681b      	ldr	r3, [r3, #0]
 8106f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106f7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106f80:	d106      	bne.n	8106f90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8106f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106f88:	d102      	bne.n	8106f90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106f8a:	4b60      	ldr	r3, [pc, #384]	; (810710c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8106f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106f8e:	e003      	b.n	8106f98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106f90:	2300      	movs	r3, #0
 8106f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8106f94:	f000 bce1 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106f98:	f000 bcdf 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106f9c:	4b5c      	ldr	r3, [pc, #368]	; (8107110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8106f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106fa0:	f000 bcdb 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106fa4:	2300      	movs	r3, #0
 8106fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106fa8:	f000 bcd7 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8106fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106fb0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8106fb4:	430b      	orrs	r3, r1
 8106fb6:	f040 80ad 	bne.w	8107114 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8106fba:	4b51      	ldr	r3, [pc, #324]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106fbe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8106fc2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8106fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106fca:	d056      	beq.n	810707a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8106fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106fd2:	f200 8090 	bhi.w	81070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106fd8:	2bc0      	cmp	r3, #192	; 0xc0
 8106fda:	f000 8088 	beq.w	81070ee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8106fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106fe0:	2bc0      	cmp	r3, #192	; 0xc0
 8106fe2:	f200 8088 	bhi.w	81070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106fe8:	2b80      	cmp	r3, #128	; 0x80
 8106fea:	d032      	beq.n	8107052 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8106fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106fee:	2b80      	cmp	r3, #128	; 0x80
 8106ff0:	f200 8081 	bhi.w	81070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ff6:	2b00      	cmp	r3, #0
 8106ff8:	d003      	beq.n	8107002 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8106ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ffc:	2b40      	cmp	r3, #64	; 0x40
 8106ffe:	d014      	beq.n	810702a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8107000:	e079      	b.n	81070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107002:	4b3f      	ldr	r3, [pc, #252]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107004:	681b      	ldr	r3, [r3, #0]
 8107006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810700a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810700e:	d108      	bne.n	8107022 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107014:	4618      	mov	r0, r3
 8107016:	f000 ff67 	bl	8107ee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810701c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810701e:	f000 bc9c 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107022:	2300      	movs	r3, #0
 8107024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107026:	f000 bc98 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810702a:	4b35      	ldr	r3, [pc, #212]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810702c:	681b      	ldr	r3, [r3, #0]
 810702e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107032:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107036:	d108      	bne.n	810704a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107038:	f107 0318 	add.w	r3, r7, #24
 810703c:	4618      	mov	r0, r3
 810703e:	f000 fcab 	bl	8107998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107042:	69bb      	ldr	r3, [r7, #24]
 8107044:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107046:	f000 bc88 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810704a:	2300      	movs	r3, #0
 810704c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810704e:	f000 bc84 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107052:	4b2b      	ldr	r3, [pc, #172]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107054:	681b      	ldr	r3, [r3, #0]
 8107056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810705a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810705e:	d108      	bne.n	8107072 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107060:	f107 030c 	add.w	r3, r7, #12
 8107064:	4618      	mov	r0, r3
 8107066:	f000 fdeb 	bl	8107c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810706a:	68fb      	ldr	r3, [r7, #12]
 810706c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810706e:	f000 bc74 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107072:	2300      	movs	r3, #0
 8107074:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107076:	f000 bc70 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810707a:	4b21      	ldr	r3, [pc, #132]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810707c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810707e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107082:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107084:	4b1e      	ldr	r3, [pc, #120]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107086:	681b      	ldr	r3, [r3, #0]
 8107088:	f003 0304 	and.w	r3, r3, #4
 810708c:	2b04      	cmp	r3, #4
 810708e:	d10c      	bne.n	81070aa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8107090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107092:	2b00      	cmp	r3, #0
 8107094:	d109      	bne.n	81070aa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107096:	4b1a      	ldr	r3, [pc, #104]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107098:	681b      	ldr	r3, [r3, #0]
 810709a:	08db      	lsrs	r3, r3, #3
 810709c:	f003 0303 	and.w	r3, r3, #3
 81070a0:	4a18      	ldr	r2, [pc, #96]	; (8107104 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81070a2:	fa22 f303 	lsr.w	r3, r2, r3
 81070a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81070a8:	e01f      	b.n	81070ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81070aa:	4b15      	ldr	r3, [pc, #84]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81070ac:	681b      	ldr	r3, [r3, #0]
 81070ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81070b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81070b6:	d106      	bne.n	81070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 81070b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81070ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81070be:	d102      	bne.n	81070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81070c0:	4b11      	ldr	r3, [pc, #68]	; (8107108 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81070c4:	e011      	b.n	81070ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81070c6:	4b0e      	ldr	r3, [pc, #56]	; (8107100 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81070c8:	681b      	ldr	r3, [r3, #0]
 81070ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81070ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81070d2:	d106      	bne.n	81070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81070d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81070d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81070da:	d102      	bne.n	81070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81070dc:	4b0b      	ldr	r3, [pc, #44]	; (810710c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81070de:	63fb      	str	r3, [r7, #60]	; 0x3c
 81070e0:	e003      	b.n	81070ea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81070e2:	2300      	movs	r3, #0
 81070e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81070e6:	f000 bc38 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81070ea:	f000 bc36 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81070ee:	4b08      	ldr	r3, [pc, #32]	; (8107110 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81070f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81070f2:	f000 bc32 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81070f6:	2300      	movs	r3, #0
 81070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81070fa:	f000 bc2e 	b.w	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81070fe:	bf00      	nop
 8107100:	58024400 	.word	0x58024400
 8107104:	03d09000 	.word	0x03d09000
 8107108:	003d0900 	.word	0x003d0900
 810710c:	007a1200 	.word	0x007a1200
 8107110:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107118:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 810711c:	430b      	orrs	r3, r1
 810711e:	f040 809c 	bne.w	810725a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8107122:	4b9e      	ldr	r3, [pc, #632]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107126:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 810712a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 810712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810712e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8107132:	d054      	beq.n	81071de <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8107134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107136:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810713a:	f200 808b 	bhi.w	8107254 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107140:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8107144:	f000 8083 	beq.w	810724e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8107148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810714a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810714e:	f200 8081 	bhi.w	8107254 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107158:	d02f      	beq.n	81071ba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 810715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810715c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107160:	d878      	bhi.n	8107254 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107164:	2b00      	cmp	r3, #0
 8107166:	d004      	beq.n	8107172 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8107168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810716a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810716e:	d012      	beq.n	8107196 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8107170:	e070      	b.n	8107254 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107172:	4b8a      	ldr	r3, [pc, #552]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107174:	681b      	ldr	r3, [r3, #0]
 8107176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810717a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810717e:	d107      	bne.n	8107190 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107184:	4618      	mov	r0, r3
 8107186:	f000 feaf 	bl	8107ee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810718c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810718e:	e3e4      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107190:	2300      	movs	r3, #0
 8107192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107194:	e3e1      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107196:	4b81      	ldr	r3, [pc, #516]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107198:	681b      	ldr	r3, [r3, #0]
 810719a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810719e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81071a2:	d107      	bne.n	81071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81071a4:	f107 0318 	add.w	r3, r7, #24
 81071a8:	4618      	mov	r0, r3
 81071aa:	f000 fbf5 	bl	8107998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81071ae:	69bb      	ldr	r3, [r7, #24]
 81071b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071b2:	e3d2      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071b4:	2300      	movs	r3, #0
 81071b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81071b8:	e3cf      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81071ba:	4b78      	ldr	r3, [pc, #480]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071bc:	681b      	ldr	r3, [r3, #0]
 81071be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81071c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81071c6:	d107      	bne.n	81071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81071c8:	f107 030c 	add.w	r3, r7, #12
 81071cc:	4618      	mov	r0, r3
 81071ce:	f000 fd37 	bl	8107c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81071d2:	68fb      	ldr	r3, [r7, #12]
 81071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071d6:	e3c0      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071d8:	2300      	movs	r3, #0
 81071da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81071dc:	e3bd      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81071de:	4b6f      	ldr	r3, [pc, #444]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81071e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81071e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81071e8:	4b6c      	ldr	r3, [pc, #432]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071ea:	681b      	ldr	r3, [r3, #0]
 81071ec:	f003 0304 	and.w	r3, r3, #4
 81071f0:	2b04      	cmp	r3, #4
 81071f2:	d10c      	bne.n	810720e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 81071f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81071f6:	2b00      	cmp	r3, #0
 81071f8:	d109      	bne.n	810720e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81071fa:	4b68      	ldr	r3, [pc, #416]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071fc:	681b      	ldr	r3, [r3, #0]
 81071fe:	08db      	lsrs	r3, r3, #3
 8107200:	f003 0303 	and.w	r3, r3, #3
 8107204:	4a66      	ldr	r2, [pc, #408]	; (81073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107206:	fa22 f303 	lsr.w	r3, r2, r3
 810720a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810720c:	e01e      	b.n	810724c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810720e:	4b63      	ldr	r3, [pc, #396]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107210:	681b      	ldr	r3, [r3, #0]
 8107212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810721a:	d106      	bne.n	810722a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 810721c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810721e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107222:	d102      	bne.n	810722a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107224:	4b5f      	ldr	r3, [pc, #380]	; (81073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107228:	e010      	b.n	810724c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810722a:	4b5c      	ldr	r3, [pc, #368]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810722c:	681b      	ldr	r3, [r3, #0]
 810722e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107236:	d106      	bne.n	8107246 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8107238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810723a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810723e:	d102      	bne.n	8107246 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107240:	4b59      	ldr	r3, [pc, #356]	; (81073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107244:	e002      	b.n	810724c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107246:	2300      	movs	r3, #0
 8107248:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810724a:	e386      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810724c:	e385      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810724e:	4b57      	ldr	r3, [pc, #348]	; (81073ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107252:	e382      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107254:	2300      	movs	r3, #0
 8107256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107258:	e37f      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810725a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810725e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8107262:	430b      	orrs	r3, r1
 8107264:	f040 80a7 	bne.w	81073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8107268:	4b4c      	ldr	r3, [pc, #304]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810726a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810726c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8107270:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8107272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107278:	d055      	beq.n	8107326 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 810727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810727c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107280:	f200 8096 	bhi.w	81073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107286:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810728a:	f000 8084 	beq.w	8107396 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107290:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8107294:	f200 808c 	bhi.w	81073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810729a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810729e:	d030      	beq.n	8107302 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 81072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81072a6:	f200 8083 	bhi.w	81073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072ac:	2b00      	cmp	r3, #0
 81072ae:	d004      	beq.n	81072ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 81072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81072b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81072b6:	d012      	beq.n	81072de <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 81072b8:	e07a      	b.n	81073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81072ba:	4b38      	ldr	r3, [pc, #224]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81072bc:	681b      	ldr	r3, [r3, #0]
 81072be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81072c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81072c6:	d107      	bne.n	81072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81072c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81072cc:	4618      	mov	r0, r3
 81072ce:	f000 fe0b 	bl	8107ee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81072d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81072d6:	e340      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81072d8:	2300      	movs	r3, #0
 81072da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81072dc:	e33d      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81072de:	4b2f      	ldr	r3, [pc, #188]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81072e0:	681b      	ldr	r3, [r3, #0]
 81072e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81072e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81072ea:	d107      	bne.n	81072fc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81072ec:	f107 0318 	add.w	r3, r7, #24
 81072f0:	4618      	mov	r0, r3
 81072f2:	f000 fb51 	bl	8107998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81072f6:	69bb      	ldr	r3, [r7, #24]
 81072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81072fa:	e32e      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81072fc:	2300      	movs	r3, #0
 81072fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107300:	e32b      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107302:	4b26      	ldr	r3, [pc, #152]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107304:	681b      	ldr	r3, [r3, #0]
 8107306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810730a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810730e:	d107      	bne.n	8107320 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107310:	f107 030c 	add.w	r3, r7, #12
 8107314:	4618      	mov	r0, r3
 8107316:	f000 fc93 	bl	8107c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810731a:	68fb      	ldr	r3, [r7, #12]
 810731c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810731e:	e31c      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107320:	2300      	movs	r3, #0
 8107322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107324:	e319      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107326:	4b1d      	ldr	r3, [pc, #116]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810732a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810732e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107330:	4b1a      	ldr	r3, [pc, #104]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107332:	681b      	ldr	r3, [r3, #0]
 8107334:	f003 0304 	and.w	r3, r3, #4
 8107338:	2b04      	cmp	r3, #4
 810733a:	d10c      	bne.n	8107356 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 810733c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810733e:	2b00      	cmp	r3, #0
 8107340:	d109      	bne.n	8107356 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107342:	4b16      	ldr	r3, [pc, #88]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107344:	681b      	ldr	r3, [r3, #0]
 8107346:	08db      	lsrs	r3, r3, #3
 8107348:	f003 0303 	and.w	r3, r3, #3
 810734c:	4a14      	ldr	r2, [pc, #80]	; (81073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810734e:	fa22 f303 	lsr.w	r3, r2, r3
 8107352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107354:	e01e      	b.n	8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107356:	4b11      	ldr	r3, [pc, #68]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107358:	681b      	ldr	r3, [r3, #0]
 810735a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810735e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107362:	d106      	bne.n	8107372 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8107364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810736a:	d102      	bne.n	8107372 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810736c:	4b0d      	ldr	r3, [pc, #52]	; (81073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810736e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107370:	e010      	b.n	8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107372:	4b0a      	ldr	r3, [pc, #40]	; (810739c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107374:	681b      	ldr	r3, [r3, #0]
 8107376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810737a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810737e:	d106      	bne.n	810738e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8107380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107386:	d102      	bne.n	810738e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107388:	4b07      	ldr	r3, [pc, #28]	; (81073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810738a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810738c:	e002      	b.n	8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810738e:	2300      	movs	r3, #0
 8107390:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8107392:	e2e2      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107394:	e2e1      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107396:	4b05      	ldr	r3, [pc, #20]	; (81073ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810739a:	e2de      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810739c:	58024400 	.word	0x58024400
 81073a0:	03d09000 	.word	0x03d09000
 81073a4:	003d0900 	.word	0x003d0900
 81073a8:	007a1200 	.word	0x007a1200
 81073ac:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 81073b0:	2300      	movs	r3, #0
 81073b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81073b4:	e2d1      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 81073b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 81073ba:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 81073be:	430b      	orrs	r3, r1
 81073c0:	f040 809c 	bne.w	81074fc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 81073c4:	4b93      	ldr	r3, [pc, #588]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81073c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81073c8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 81073cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81073ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81073d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81073d4:	d054      	beq.n	8107480 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81073d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81073d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81073dc:	f200 808b 	bhi.w	81074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81073e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81073e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81073e6:	f000 8083 	beq.w	81074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81073ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81073ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81073f0:	f200 8081 	bhi.w	81074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81073f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81073fa:	d02f      	beq.n	810745c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81073fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107402:	d878      	bhi.n	81074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107406:	2b00      	cmp	r3, #0
 8107408:	d004      	beq.n	8107414 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 810740a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810740c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107410:	d012      	beq.n	8107438 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8107412:	e070      	b.n	81074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107414:	4b7f      	ldr	r3, [pc, #508]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107416:	681b      	ldr	r3, [r3, #0]
 8107418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810741c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107420:	d107      	bne.n	8107432 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107426:	4618      	mov	r0, r3
 8107428:	f000 fd5e 	bl	8107ee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810742e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107430:	e293      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107432:	2300      	movs	r3, #0
 8107434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107436:	e290      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107438:	4b76      	ldr	r3, [pc, #472]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810743a:	681b      	ldr	r3, [r3, #0]
 810743c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107444:	d107      	bne.n	8107456 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107446:	f107 0318 	add.w	r3, r7, #24
 810744a:	4618      	mov	r0, r3
 810744c:	f000 faa4 	bl	8107998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107450:	69bb      	ldr	r3, [r7, #24]
 8107452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107454:	e281      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107456:	2300      	movs	r3, #0
 8107458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810745a:	e27e      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810745c:	4b6d      	ldr	r3, [pc, #436]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810745e:	681b      	ldr	r3, [r3, #0]
 8107460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107468:	d107      	bne.n	810747a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810746a:	f107 030c 	add.w	r3, r7, #12
 810746e:	4618      	mov	r0, r3
 8107470:	f000 fbe6 	bl	8107c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107474:	68fb      	ldr	r3, [r7, #12]
 8107476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107478:	e26f      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810747a:	2300      	movs	r3, #0
 810747c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810747e:	e26c      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107480:	4b64      	ldr	r3, [pc, #400]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107484:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107488:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810748a:	4b62      	ldr	r3, [pc, #392]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810748c:	681b      	ldr	r3, [r3, #0]
 810748e:	f003 0304 	and.w	r3, r3, #4
 8107492:	2b04      	cmp	r3, #4
 8107494:	d10c      	bne.n	81074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8107496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107498:	2b00      	cmp	r3, #0
 810749a:	d109      	bne.n	81074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810749c:	4b5d      	ldr	r3, [pc, #372]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810749e:	681b      	ldr	r3, [r3, #0]
 81074a0:	08db      	lsrs	r3, r3, #3
 81074a2:	f003 0303 	and.w	r3, r3, #3
 81074a6:	4a5c      	ldr	r2, [pc, #368]	; (8107618 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81074a8:	fa22 f303 	lsr.w	r3, r2, r3
 81074ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 81074ae:	e01e      	b.n	81074ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81074b0:	4b58      	ldr	r3, [pc, #352]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81074b2:	681b      	ldr	r3, [r3, #0]
 81074b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81074b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81074bc:	d106      	bne.n	81074cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 81074be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81074c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81074c4:	d102      	bne.n	81074cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81074c6:	4b55      	ldr	r3, [pc, #340]	; (810761c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81074c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81074ca:	e010      	b.n	81074ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81074cc:	4b51      	ldr	r3, [pc, #324]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81074ce:	681b      	ldr	r3, [r3, #0]
 81074d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81074d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81074d8:	d106      	bne.n	81074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81074da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81074dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81074e0:	d102      	bne.n	81074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81074e2:	4b4f      	ldr	r3, [pc, #316]	; (8107620 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81074e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 81074e6:	e002      	b.n	81074ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81074e8:	2300      	movs	r3, #0
 81074ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81074ec:	e235      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81074ee:	e234      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81074f0:	4b4c      	ldr	r3, [pc, #304]	; (8107624 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81074f4:	e231      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81074f6:	2300      	movs	r3, #0
 81074f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81074fa:	e22e      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 81074fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107500:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8107504:	430b      	orrs	r3, r1
 8107506:	f040 808f 	bne.w	8107628 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 810750a:	4b42      	ldr	r3, [pc, #264]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810750c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810750e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8107512:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8107514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810751a:	d06b      	beq.n	81075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 810751c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810751e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8107522:	d874      	bhi.n	810760e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107526:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810752a:	d056      	beq.n	81075da <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 810752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810752e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8107532:	d86c      	bhi.n	810760e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107536:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810753a:	d03b      	beq.n	81075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 810753c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810753e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8107542:	d864      	bhi.n	810760e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810754a:	d021      	beq.n	8107590 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 810754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810754e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107552:	d85c      	bhi.n	810760e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107556:	2b00      	cmp	r3, #0
 8107558:	d004      	beq.n	8107564 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 810755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810755c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107560:	d004      	beq.n	810756c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8107562:	e054      	b.n	810760e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8107564:	f7fe fa4c 	bl	8105a00 <HAL_RCC_GetPCLK1Freq>
 8107568:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810756a:	e1f6      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810756c:	4b29      	ldr	r3, [pc, #164]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810756e:	681b      	ldr	r3, [r3, #0]
 8107570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107574:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107578:	d107      	bne.n	810758a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810757a:	f107 0318 	add.w	r3, r7, #24
 810757e:	4618      	mov	r0, r3
 8107580:	f000 fa0a 	bl	8107998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107584:	69fb      	ldr	r3, [r7, #28]
 8107586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107588:	e1e7      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810758a:	2300      	movs	r3, #0
 810758c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810758e:	e1e4      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107590:	4b20      	ldr	r3, [pc, #128]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107592:	681b      	ldr	r3, [r3, #0]
 8107594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810759c:	d107      	bne.n	81075ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810759e:	f107 030c 	add.w	r3, r7, #12
 81075a2:	4618      	mov	r0, r3
 81075a4:	f000 fb4c 	bl	8107c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81075a8:	693b      	ldr	r3, [r7, #16]
 81075aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075ac:	e1d5      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075ae:	2300      	movs	r3, #0
 81075b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81075b2:	e1d2      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81075b4:	4b17      	ldr	r3, [pc, #92]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075b6:	681b      	ldr	r3, [r3, #0]
 81075b8:	f003 0304 	and.w	r3, r3, #4
 81075bc:	2b04      	cmp	r3, #4
 81075be:	d109      	bne.n	81075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81075c0:	4b14      	ldr	r3, [pc, #80]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075c2:	681b      	ldr	r3, [r3, #0]
 81075c4:	08db      	lsrs	r3, r3, #3
 81075c6:	f003 0303 	and.w	r3, r3, #3
 81075ca:	4a13      	ldr	r2, [pc, #76]	; (8107618 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81075cc:	fa22 f303 	lsr.w	r3, r2, r3
 81075d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075d2:	e1c2      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075d4:	2300      	movs	r3, #0
 81075d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81075d8:	e1bf      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81075da:	4b0e      	ldr	r3, [pc, #56]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075dc:	681b      	ldr	r3, [r3, #0]
 81075de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81075e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81075e6:	d102      	bne.n	81075ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81075e8:	4b0c      	ldr	r3, [pc, #48]	; (810761c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81075ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075ec:	e1b5      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075ee:	2300      	movs	r3, #0
 81075f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81075f2:	e1b2      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81075f4:	4b07      	ldr	r3, [pc, #28]	; (8107614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075f6:	681b      	ldr	r3, [r3, #0]
 81075f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81075fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107600:	d102      	bne.n	8107608 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8107602:	4b07      	ldr	r3, [pc, #28]	; (8107620 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107604:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107606:	e1a8      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107608:	2300      	movs	r3, #0
 810760a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810760c:	e1a5      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810760e:	2300      	movs	r3, #0
 8107610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107612:	e1a2      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107614:	58024400 	.word	0x58024400
 8107618:	03d09000 	.word	0x03d09000
 810761c:	003d0900 	.word	0x003d0900
 8107620:	007a1200 	.word	0x007a1200
 8107624:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8107628:	e9d7 2300 	ldrd	r2, r3, [r7]
 810762c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8107630:	430b      	orrs	r3, r1
 8107632:	d173      	bne.n	810771c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8107634:	4b9c      	ldr	r3, [pc, #624]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810763c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107644:	d02f      	beq.n	81076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8107646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810764c:	d863      	bhi.n	8107716 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107650:	2b00      	cmp	r3, #0
 8107652:	d004      	beq.n	810765e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8107654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810765a:	d012      	beq.n	8107682 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 810765c:	e05b      	b.n	8107716 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810765e:	4b92      	ldr	r3, [pc, #584]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107660:	681b      	ldr	r3, [r3, #0]
 8107662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810766a:	d107      	bne.n	810767c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810766c:	f107 0318 	add.w	r3, r7, #24
 8107670:	4618      	mov	r0, r3
 8107672:	f000 f991 	bl	8107998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107676:	69bb      	ldr	r3, [r7, #24]
 8107678:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810767a:	e16e      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810767c:	2300      	movs	r3, #0
 810767e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107680:	e16b      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107682:	4b89      	ldr	r3, [pc, #548]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107684:	681b      	ldr	r3, [r3, #0]
 8107686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810768a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810768e:	d107      	bne.n	81076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107690:	f107 030c 	add.w	r3, r7, #12
 8107694:	4618      	mov	r0, r3
 8107696:	f000 fad3 	bl	8107c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810769a:	697b      	ldr	r3, [r7, #20]
 810769c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810769e:	e15c      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81076a0:	2300      	movs	r3, #0
 81076a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81076a4:	e159      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81076a6:	4b80      	ldr	r3, [pc, #512]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81076aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81076ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81076b0:	4b7d      	ldr	r3, [pc, #500]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076b2:	681b      	ldr	r3, [r3, #0]
 81076b4:	f003 0304 	and.w	r3, r3, #4
 81076b8:	2b04      	cmp	r3, #4
 81076ba:	d10c      	bne.n	81076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 81076bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81076be:	2b00      	cmp	r3, #0
 81076c0:	d109      	bne.n	81076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81076c2:	4b79      	ldr	r3, [pc, #484]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076c4:	681b      	ldr	r3, [r3, #0]
 81076c6:	08db      	lsrs	r3, r3, #3
 81076c8:	f003 0303 	and.w	r3, r3, #3
 81076cc:	4a77      	ldr	r2, [pc, #476]	; (81078ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81076ce:	fa22 f303 	lsr.w	r3, r2, r3
 81076d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81076d4:	e01e      	b.n	8107714 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81076d6:	4b74      	ldr	r3, [pc, #464]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076d8:	681b      	ldr	r3, [r3, #0]
 81076da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81076de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81076e2:	d106      	bne.n	81076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 81076e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81076e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81076ea:	d102      	bne.n	81076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81076ec:	4b70      	ldr	r3, [pc, #448]	; (81078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81076ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 81076f0:	e010      	b.n	8107714 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81076f2:	4b6d      	ldr	r3, [pc, #436]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076f4:	681b      	ldr	r3, [r3, #0]
 81076f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81076fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81076fe:	d106      	bne.n	810770e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8107700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107706:	d102      	bne.n	810770e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107708:	4b6a      	ldr	r3, [pc, #424]	; (81078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810770a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810770c:	e002      	b.n	8107714 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810770e:	2300      	movs	r3, #0
 8107710:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8107712:	e122      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107714:	e121      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107716:	2300      	movs	r3, #0
 8107718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810771a:	e11e      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 810771c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107720:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8107724:	430b      	orrs	r3, r1
 8107726:	d133      	bne.n	8107790 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8107728:	4b5f      	ldr	r3, [pc, #380]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810772a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810772c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107730:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8107732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107734:	2b00      	cmp	r3, #0
 8107736:	d004      	beq.n	8107742 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8107738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810773a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810773e:	d012      	beq.n	8107766 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8107740:	e023      	b.n	810778a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107742:	4b59      	ldr	r3, [pc, #356]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107744:	681b      	ldr	r3, [r3, #0]
 8107746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810774a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810774e:	d107      	bne.n	8107760 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107754:	4618      	mov	r0, r3
 8107756:	f000 fbc7 	bl	8107ee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810775c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810775e:	e0fc      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107760:	2300      	movs	r3, #0
 8107762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107764:	e0f9      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107766:	4b50      	ldr	r3, [pc, #320]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107768:	681b      	ldr	r3, [r3, #0]
 810776a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810776e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107772:	d107      	bne.n	8107784 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107774:	f107 0318 	add.w	r3, r7, #24
 8107778:	4618      	mov	r0, r3
 810777a:	f000 f90d 	bl	8107998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810777e:	6a3b      	ldr	r3, [r7, #32]
 8107780:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107782:	e0ea      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107784:	2300      	movs	r3, #0
 8107786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107788:	e0e7      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810778a:	2300      	movs	r3, #0
 810778c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810778e:	e0e4      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8107790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107794:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8107798:	430b      	orrs	r3, r1
 810779a:	f040 808d 	bne.w	81078b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810779e:	4b42      	ldr	r3, [pc, #264]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81077a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81077a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 81077a6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81077ae:	d06b      	beq.n	8107888 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 81077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81077b6:	d874      	bhi.n	81078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81077b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81077be:	d056      	beq.n	810786e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 81077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81077c6:	d86c      	bhi.n	81078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81077c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81077ce:	d03b      	beq.n	8107848 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 81077d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81077d6:	d864      	bhi.n	81078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81077d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81077de:	d021      	beq.n	8107824 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 81077e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81077e6:	d85c      	bhi.n	81078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077ea:	2b00      	cmp	r3, #0
 81077ec:	d004      	beq.n	81077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 81077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81077f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81077f4:	d004      	beq.n	8107800 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 81077f6:	e054      	b.n	81078a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 81077f8:	f000 f8b8 	bl	810796c <HAL_RCCEx_GetD3PCLK1Freq>
 81077fc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81077fe:	e0ac      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107800:	4b29      	ldr	r3, [pc, #164]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107802:	681b      	ldr	r3, [r3, #0]
 8107804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810780c:	d107      	bne.n	810781e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810780e:	f107 0318 	add.w	r3, r7, #24
 8107812:	4618      	mov	r0, r3
 8107814:	f000 f8c0 	bl	8107998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107818:	69fb      	ldr	r3, [r7, #28]
 810781a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810781c:	e09d      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810781e:	2300      	movs	r3, #0
 8107820:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107822:	e09a      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107824:	4b20      	ldr	r3, [pc, #128]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107826:	681b      	ldr	r3, [r3, #0]
 8107828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810782c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107830:	d107      	bne.n	8107842 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107832:	f107 030c 	add.w	r3, r7, #12
 8107836:	4618      	mov	r0, r3
 8107838:	f000 fa02 	bl	8107c40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810783c:	693b      	ldr	r3, [r7, #16]
 810783e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107840:	e08b      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107842:	2300      	movs	r3, #0
 8107844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107846:	e088      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8107848:	4b17      	ldr	r3, [pc, #92]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810784a:	681b      	ldr	r3, [r3, #0]
 810784c:	f003 0304 	and.w	r3, r3, #4
 8107850:	2b04      	cmp	r3, #4
 8107852:	d109      	bne.n	8107868 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107854:	4b14      	ldr	r3, [pc, #80]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107856:	681b      	ldr	r3, [r3, #0]
 8107858:	08db      	lsrs	r3, r3, #3
 810785a:	f003 0303 	and.w	r3, r3, #3
 810785e:	4a13      	ldr	r2, [pc, #76]	; (81078ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8107860:	fa22 f303 	lsr.w	r3, r2, r3
 8107864:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107866:	e078      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107868:	2300      	movs	r3, #0
 810786a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810786c:	e075      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810786e:	4b0e      	ldr	r3, [pc, #56]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107870:	681b      	ldr	r3, [r3, #0]
 8107872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810787a:	d102      	bne.n	8107882 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 810787c:	4b0c      	ldr	r3, [pc, #48]	; (81078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810787e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107880:	e06b      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107882:	2300      	movs	r3, #0
 8107884:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107886:	e068      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107888:	4b07      	ldr	r3, [pc, #28]	; (81078a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810788a:	681b      	ldr	r3, [r3, #0]
 810788c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107894:	d102      	bne.n	810789c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8107896:	4b07      	ldr	r3, [pc, #28]	; (81078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8107898:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810789a:	e05e      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810789c:	2300      	movs	r3, #0
 810789e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81078a0:	e05b      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 81078a2:	2300      	movs	r3, #0
 81078a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81078a6:	e058      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81078a8:	58024400 	.word	0x58024400
 81078ac:	03d09000 	.word	0x03d09000
 81078b0:	003d0900 	.word	0x003d0900
 81078b4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81078b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81078bc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 81078c0:	430b      	orrs	r3, r1
 81078c2:	d148      	bne.n	8107956 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 81078c4:	4b27      	ldr	r3, [pc, #156]	; (8107964 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81078c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81078c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81078cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81078d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81078d4:	d02a      	beq.n	810792c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 81078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81078d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81078dc:	d838      	bhi.n	8107950 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 81078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81078e0:	2b00      	cmp	r3, #0
 81078e2:	d004      	beq.n	81078ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 81078e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81078e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81078ea:	d00d      	beq.n	8107908 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 81078ec:	e030      	b.n	8107950 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81078ee:	4b1d      	ldr	r3, [pc, #116]	; (8107964 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81078f0:	681b      	ldr	r3, [r3, #0]
 81078f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81078f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81078fa:	d102      	bne.n	8107902 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 81078fc:	4b1a      	ldr	r3, [pc, #104]	; (8107968 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 81078fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107900:	e02b      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107902:	2300      	movs	r3, #0
 8107904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107906:	e028      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107908:	4b16      	ldr	r3, [pc, #88]	; (8107964 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810790a:	681b      	ldr	r3, [r3, #0]
 810790c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107910:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107914:	d107      	bne.n	8107926 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810791a:	4618      	mov	r0, r3
 810791c:	f000 fae4 	bl	8107ee8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107922:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107924:	e019      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107926:	2300      	movs	r3, #0
 8107928:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810792a:	e016      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810792c:	4b0d      	ldr	r3, [pc, #52]	; (8107964 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810792e:	681b      	ldr	r3, [r3, #0]
 8107930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107938:	d107      	bne.n	810794a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810793a:	f107 0318 	add.w	r3, r7, #24
 810793e:	4618      	mov	r0, r3
 8107940:	f000 f82a 	bl	8107998 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107944:	69fb      	ldr	r3, [r7, #28]
 8107946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107948:	e007      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810794a:	2300      	movs	r3, #0
 810794c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810794e:	e004      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107950:	2300      	movs	r3, #0
 8107952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107954:	e001      	b.n	810795a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8107956:	2300      	movs	r3, #0
 8107958:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 810795a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810795c:	4618      	mov	r0, r3
 810795e:	3740      	adds	r7, #64	; 0x40
 8107960:	46bd      	mov	sp, r7
 8107962:	bd80      	pop	{r7, pc}
 8107964:	58024400 	.word	0x58024400
 8107968:	007a1200 	.word	0x007a1200

0810796c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810796c:	b580      	push	{r7, lr}
 810796e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8107970:	f7fe f814 	bl	810599c <HAL_RCC_GetHCLKFreq>
 8107974:	4602      	mov	r2, r0
 8107976:	4b06      	ldr	r3, [pc, #24]	; (8107990 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8107978:	6a1b      	ldr	r3, [r3, #32]
 810797a:	091b      	lsrs	r3, r3, #4
 810797c:	f003 0307 	and.w	r3, r3, #7
 8107980:	4904      	ldr	r1, [pc, #16]	; (8107994 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8107982:	5ccb      	ldrb	r3, [r1, r3]
 8107984:	f003 031f 	and.w	r3, r3, #31
 8107988:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810798c:	4618      	mov	r0, r3
 810798e:	bd80      	pop	{r7, pc}
 8107990:	58024400 	.word	0x58024400
 8107994:	0810fb00 	.word	0x0810fb00

08107998 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8107998:	b480      	push	{r7}
 810799a:	b089      	sub	sp, #36	; 0x24
 810799c:	af00      	add	r7, sp, #0
 810799e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81079a0:	4ba1      	ldr	r3, [pc, #644]	; (8107c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81079a4:	f003 0303 	and.w	r3, r3, #3
 81079a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81079aa:	4b9f      	ldr	r3, [pc, #636]	; (8107c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81079ae:	0b1b      	lsrs	r3, r3, #12
 81079b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81079b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81079b6:	4b9c      	ldr	r3, [pc, #624]	; (8107c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81079ba:	091b      	lsrs	r3, r3, #4
 81079bc:	f003 0301 	and.w	r3, r3, #1
 81079c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81079c2:	4b99      	ldr	r3, [pc, #612]	; (8107c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81079c6:	08db      	lsrs	r3, r3, #3
 81079c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81079cc:	693a      	ldr	r2, [r7, #16]
 81079ce:	fb02 f303 	mul.w	r3, r2, r3
 81079d2:	ee07 3a90 	vmov	s15, r3
 81079d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81079da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81079de:	697b      	ldr	r3, [r7, #20]
 81079e0:	2b00      	cmp	r3, #0
 81079e2:	f000 8111 	beq.w	8107c08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81079e6:	69bb      	ldr	r3, [r7, #24]
 81079e8:	2b02      	cmp	r3, #2
 81079ea:	f000 8083 	beq.w	8107af4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81079ee:	69bb      	ldr	r3, [r7, #24]
 81079f0:	2b02      	cmp	r3, #2
 81079f2:	f200 80a1 	bhi.w	8107b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81079f6:	69bb      	ldr	r3, [r7, #24]
 81079f8:	2b00      	cmp	r3, #0
 81079fa:	d003      	beq.n	8107a04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81079fc:	69bb      	ldr	r3, [r7, #24]
 81079fe:	2b01      	cmp	r3, #1
 8107a00:	d056      	beq.n	8107ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8107a02:	e099      	b.n	8107b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107a04:	4b88      	ldr	r3, [pc, #544]	; (8107c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a06:	681b      	ldr	r3, [r3, #0]
 8107a08:	f003 0320 	and.w	r3, r3, #32
 8107a0c:	2b00      	cmp	r3, #0
 8107a0e:	d02d      	beq.n	8107a6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107a10:	4b85      	ldr	r3, [pc, #532]	; (8107c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a12:	681b      	ldr	r3, [r3, #0]
 8107a14:	08db      	lsrs	r3, r3, #3
 8107a16:	f003 0303 	and.w	r3, r3, #3
 8107a1a:	4a84      	ldr	r2, [pc, #528]	; (8107c2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8107a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8107a20:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107a22:	68bb      	ldr	r3, [r7, #8]
 8107a24:	ee07 3a90 	vmov	s15, r3
 8107a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a2c:	697b      	ldr	r3, [r7, #20]
 8107a2e:	ee07 3a90 	vmov	s15, r3
 8107a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a3a:	4b7b      	ldr	r3, [pc, #492]	; (8107c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a42:	ee07 3a90 	vmov	s15, r3
 8107a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107a6a:	e087      	b.n	8107b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107a6c:	697b      	ldr	r3, [r7, #20]
 8107a6e:	ee07 3a90 	vmov	s15, r3
 8107a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107c34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8107a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a7e:	4b6a      	ldr	r3, [pc, #424]	; (8107c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a86:	ee07 3a90 	vmov	s15, r3
 8107a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a92:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107aae:	e065      	b.n	8107b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107ab0:	697b      	ldr	r3, [r7, #20]
 8107ab2:	ee07 3a90 	vmov	s15, r3
 8107ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107aba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107ac2:	4b59      	ldr	r3, [pc, #356]	; (8107c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107aca:	ee07 3a90 	vmov	s15, r3
 8107ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8107ad6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107af2:	e043      	b.n	8107b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107af4:	697b      	ldr	r3, [r7, #20]
 8107af6:	ee07 3a90 	vmov	s15, r3
 8107afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107afe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107c3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8107b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107b06:	4b48      	ldr	r3, [pc, #288]	; (8107c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107b0e:	ee07 3a90 	vmov	s15, r3
 8107b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8107b1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107b36:	e021      	b.n	8107b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107b38:	697b      	ldr	r3, [r7, #20]
 8107b3a:	ee07 3a90 	vmov	s15, r3
 8107b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107b4a:	4b37      	ldr	r3, [pc, #220]	; (8107c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107b52:	ee07 3a90 	vmov	s15, r3
 8107b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8107b5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107b7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8107b7c:	4b2a      	ldr	r3, [pc, #168]	; (8107c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b80:	0a5b      	lsrs	r3, r3, #9
 8107b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107b86:	ee07 3a90 	vmov	s15, r3
 8107b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8107b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107ba2:	ee17 2a90 	vmov	r2, s15
 8107ba6:	687b      	ldr	r3, [r7, #4]
 8107ba8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8107baa:	4b1f      	ldr	r3, [pc, #124]	; (8107c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bae:	0c1b      	lsrs	r3, r3, #16
 8107bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107bb4:	ee07 3a90 	vmov	s15, r3
 8107bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107bbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107bc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107bc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8107bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107bd0:	ee17 2a90 	vmov	r2, s15
 8107bd4:	687b      	ldr	r3, [r7, #4]
 8107bd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8107bd8:	4b13      	ldr	r3, [pc, #76]	; (8107c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107bdc:	0e1b      	lsrs	r3, r3, #24
 8107bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107be2:	ee07 3a90 	vmov	s15, r3
 8107be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8107bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107bfe:	ee17 2a90 	vmov	r2, s15
 8107c02:	687b      	ldr	r3, [r7, #4]
 8107c04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8107c06:	e008      	b.n	8107c1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107c08:	687b      	ldr	r3, [r7, #4]
 8107c0a:	2200      	movs	r2, #0
 8107c0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8107c0e:	687b      	ldr	r3, [r7, #4]
 8107c10:	2200      	movs	r2, #0
 8107c12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8107c14:	687b      	ldr	r3, [r7, #4]
 8107c16:	2200      	movs	r2, #0
 8107c18:	609a      	str	r2, [r3, #8]
}
 8107c1a:	bf00      	nop
 8107c1c:	3724      	adds	r7, #36	; 0x24
 8107c1e:	46bd      	mov	sp, r7
 8107c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c24:	4770      	bx	lr
 8107c26:	bf00      	nop
 8107c28:	58024400 	.word	0x58024400
 8107c2c:	03d09000 	.word	0x03d09000
 8107c30:	46000000 	.word	0x46000000
 8107c34:	4c742400 	.word	0x4c742400
 8107c38:	4a742400 	.word	0x4a742400
 8107c3c:	4af42400 	.word	0x4af42400

08107c40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8107c40:	b480      	push	{r7}
 8107c42:	b089      	sub	sp, #36	; 0x24
 8107c44:	af00      	add	r7, sp, #0
 8107c46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107c48:	4ba1      	ldr	r3, [pc, #644]	; (8107ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c4c:	f003 0303 	and.w	r3, r3, #3
 8107c50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8107c52:	4b9f      	ldr	r3, [pc, #636]	; (8107ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c56:	0d1b      	lsrs	r3, r3, #20
 8107c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107c5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8107c5e:	4b9c      	ldr	r3, [pc, #624]	; (8107ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c62:	0a1b      	lsrs	r3, r3, #8
 8107c64:	f003 0301 	and.w	r3, r3, #1
 8107c68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8107c6a:	4b99      	ldr	r3, [pc, #612]	; (8107ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107c6e:	08db      	lsrs	r3, r3, #3
 8107c70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107c74:	693a      	ldr	r2, [r7, #16]
 8107c76:	fb02 f303 	mul.w	r3, r2, r3
 8107c7a:	ee07 3a90 	vmov	s15, r3
 8107c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107c82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8107c86:	697b      	ldr	r3, [r7, #20]
 8107c88:	2b00      	cmp	r3, #0
 8107c8a:	f000 8111 	beq.w	8107eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8107c8e:	69bb      	ldr	r3, [r7, #24]
 8107c90:	2b02      	cmp	r3, #2
 8107c92:	f000 8083 	beq.w	8107d9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8107c96:	69bb      	ldr	r3, [r7, #24]
 8107c98:	2b02      	cmp	r3, #2
 8107c9a:	f200 80a1 	bhi.w	8107de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8107c9e:	69bb      	ldr	r3, [r7, #24]
 8107ca0:	2b00      	cmp	r3, #0
 8107ca2:	d003      	beq.n	8107cac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8107ca4:	69bb      	ldr	r3, [r7, #24]
 8107ca6:	2b01      	cmp	r3, #1
 8107ca8:	d056      	beq.n	8107d58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8107caa:	e099      	b.n	8107de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107cac:	4b88      	ldr	r3, [pc, #544]	; (8107ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107cae:	681b      	ldr	r3, [r3, #0]
 8107cb0:	f003 0320 	and.w	r3, r3, #32
 8107cb4:	2b00      	cmp	r3, #0
 8107cb6:	d02d      	beq.n	8107d14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107cb8:	4b85      	ldr	r3, [pc, #532]	; (8107ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107cba:	681b      	ldr	r3, [r3, #0]
 8107cbc:	08db      	lsrs	r3, r3, #3
 8107cbe:	f003 0303 	and.w	r3, r3, #3
 8107cc2:	4a84      	ldr	r2, [pc, #528]	; (8107ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8107cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8107cc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107cca:	68bb      	ldr	r3, [r7, #8]
 8107ccc:	ee07 3a90 	vmov	s15, r3
 8107cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107cd4:	697b      	ldr	r3, [r7, #20]
 8107cd6:	ee07 3a90 	vmov	s15, r3
 8107cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107ce2:	4b7b      	ldr	r3, [pc, #492]	; (8107ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107cea:	ee07 3a90 	vmov	s15, r3
 8107cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8107cf6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107d12:	e087      	b.n	8107e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107d14:	697b      	ldr	r3, [r7, #20]
 8107d16:	ee07 3a90 	vmov	s15, r3
 8107d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107edc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8107d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d26:	4b6a      	ldr	r3, [pc, #424]	; (8107ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d2e:	ee07 3a90 	vmov	s15, r3
 8107d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107d56:	e065      	b.n	8107e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107d58:	697b      	ldr	r3, [r7, #20]
 8107d5a:	ee07 3a90 	vmov	s15, r3
 8107d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d6a:	4b59      	ldr	r3, [pc, #356]	; (8107ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d72:	ee07 3a90 	vmov	s15, r3
 8107d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107d9a:	e043      	b.n	8107e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107d9c:	697b      	ldr	r3, [r7, #20]
 8107d9e:	ee07 3a90 	vmov	s15, r3
 8107da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107da6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8107daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107dae:	4b48      	ldr	r3, [pc, #288]	; (8107ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107db6:	ee07 3a90 	vmov	s15, r3
 8107dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8107dc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107dde:	e021      	b.n	8107e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107de0:	697b      	ldr	r3, [r7, #20]
 8107de2:	ee07 3a90 	vmov	s15, r3
 8107de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107dea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107df2:	4b37      	ldr	r3, [pc, #220]	; (8107ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107dfa:	ee07 3a90 	vmov	s15, r3
 8107dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8107e06:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107e22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8107e24:	4b2a      	ldr	r3, [pc, #168]	; (8107ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107e28:	0a5b      	lsrs	r3, r3, #9
 8107e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107e2e:	ee07 3a90 	vmov	s15, r3
 8107e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107e4a:	ee17 2a90 	vmov	r2, s15
 8107e4e:	687b      	ldr	r3, [r7, #4]
 8107e50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8107e52:	4b1f      	ldr	r3, [pc, #124]	; (8107ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107e56:	0c1b      	lsrs	r3, r3, #16
 8107e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107e5c:	ee07 3a90 	vmov	s15, r3
 8107e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107e68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107e6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8107e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107e78:	ee17 2a90 	vmov	r2, s15
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8107e80:	4b13      	ldr	r3, [pc, #76]	; (8107ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107e84:	0e1b      	lsrs	r3, r3, #24
 8107e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107e8a:	ee07 3a90 	vmov	s15, r3
 8107e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8107e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107ea6:	ee17 2a90 	vmov	r2, s15
 8107eaa:	687b      	ldr	r3, [r7, #4]
 8107eac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8107eae:	e008      	b.n	8107ec2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8107eb0:	687b      	ldr	r3, [r7, #4]
 8107eb2:	2200      	movs	r2, #0
 8107eb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8107eb6:	687b      	ldr	r3, [r7, #4]
 8107eb8:	2200      	movs	r2, #0
 8107eba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107ebc:	687b      	ldr	r3, [r7, #4]
 8107ebe:	2200      	movs	r2, #0
 8107ec0:	609a      	str	r2, [r3, #8]
}
 8107ec2:	bf00      	nop
 8107ec4:	3724      	adds	r7, #36	; 0x24
 8107ec6:	46bd      	mov	sp, r7
 8107ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ecc:	4770      	bx	lr
 8107ece:	bf00      	nop
 8107ed0:	58024400 	.word	0x58024400
 8107ed4:	03d09000 	.word	0x03d09000
 8107ed8:	46000000 	.word	0x46000000
 8107edc:	4c742400 	.word	0x4c742400
 8107ee0:	4a742400 	.word	0x4a742400
 8107ee4:	4af42400 	.word	0x4af42400

08107ee8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8107ee8:	b480      	push	{r7}
 8107eea:	b089      	sub	sp, #36	; 0x24
 8107eec:	af00      	add	r7, sp, #0
 8107eee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107ef0:	4ba0      	ldr	r3, [pc, #640]	; (8108174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ef4:	f003 0303 	and.w	r3, r3, #3
 8107ef8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8107efa:	4b9e      	ldr	r3, [pc, #632]	; (8108174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107efe:	091b      	lsrs	r3, r3, #4
 8107f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107f04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8107f06:	4b9b      	ldr	r3, [pc, #620]	; (8108174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107f0a:	f003 0301 	and.w	r3, r3, #1
 8107f0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8107f10:	4b98      	ldr	r3, [pc, #608]	; (8108174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107f14:	08db      	lsrs	r3, r3, #3
 8107f16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107f1a:	693a      	ldr	r2, [r7, #16]
 8107f1c:	fb02 f303 	mul.w	r3, r2, r3
 8107f20:	ee07 3a90 	vmov	s15, r3
 8107f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8107f2c:	697b      	ldr	r3, [r7, #20]
 8107f2e:	2b00      	cmp	r3, #0
 8107f30:	f000 8111 	beq.w	8108156 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8107f34:	69bb      	ldr	r3, [r7, #24]
 8107f36:	2b02      	cmp	r3, #2
 8107f38:	f000 8083 	beq.w	8108042 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8107f3c:	69bb      	ldr	r3, [r7, #24]
 8107f3e:	2b02      	cmp	r3, #2
 8107f40:	f200 80a1 	bhi.w	8108086 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8107f44:	69bb      	ldr	r3, [r7, #24]
 8107f46:	2b00      	cmp	r3, #0
 8107f48:	d003      	beq.n	8107f52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8107f4a:	69bb      	ldr	r3, [r7, #24]
 8107f4c:	2b01      	cmp	r3, #1
 8107f4e:	d056      	beq.n	8107ffe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8107f50:	e099      	b.n	8108086 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107f52:	4b88      	ldr	r3, [pc, #544]	; (8108174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f54:	681b      	ldr	r3, [r3, #0]
 8107f56:	f003 0320 	and.w	r3, r3, #32
 8107f5a:	2b00      	cmp	r3, #0
 8107f5c:	d02d      	beq.n	8107fba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107f5e:	4b85      	ldr	r3, [pc, #532]	; (8108174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f60:	681b      	ldr	r3, [r3, #0]
 8107f62:	08db      	lsrs	r3, r3, #3
 8107f64:	f003 0303 	and.w	r3, r3, #3
 8107f68:	4a83      	ldr	r2, [pc, #524]	; (8108178 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8107f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8107f6e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107f70:	68bb      	ldr	r3, [r7, #8]
 8107f72:	ee07 3a90 	vmov	s15, r3
 8107f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107f7a:	697b      	ldr	r3, [r7, #20]
 8107f7c:	ee07 3a90 	vmov	s15, r3
 8107f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107f88:	4b7a      	ldr	r3, [pc, #488]	; (8108174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107f90:	ee07 3a90 	vmov	s15, r3
 8107f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107f98:	ed97 6a03 	vldr	s12, [r7, #12]
 8107f9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 810817c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107fa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107fa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107fa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107fac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107fb4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107fb8:	e087      	b.n	81080ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107fba:	697b      	ldr	r3, [r7, #20]
 8107fbc:	ee07 3a90 	vmov	s15, r3
 8107fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107fc4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8108180 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107fcc:	4b69      	ldr	r3, [pc, #420]	; (8108174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107fd4:	ee07 3a90 	vmov	s15, r3
 8107fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107fdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8107fe0:	eddf 5a66 	vldr	s11, [pc, #408]	; 810817c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107ff8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107ffc:	e065      	b.n	81080ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107ffe:	697b      	ldr	r3, [r7, #20]
 8108000:	ee07 3a90 	vmov	s15, r3
 8108004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108008:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8108184 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810800c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108010:	4b58      	ldr	r3, [pc, #352]	; (8108174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108018:	ee07 3a90 	vmov	s15, r3
 810801c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108020:	ed97 6a03 	vldr	s12, [r7, #12]
 8108024:	eddf 5a55 	vldr	s11, [pc, #340]	; 810817c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810802c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108038:	ee67 7a27 	vmul.f32	s15, s14, s15
 810803c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108040:	e043      	b.n	81080ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108042:	697b      	ldr	r3, [r7, #20]
 8108044:	ee07 3a90 	vmov	s15, r3
 8108048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810804c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8108188 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8108050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108054:	4b47      	ldr	r3, [pc, #284]	; (8108174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810805c:	ee07 3a90 	vmov	s15, r3
 8108060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108064:	ed97 6a03 	vldr	s12, [r7, #12]
 8108068:	eddf 5a44 	vldr	s11, [pc, #272]	; 810817c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810806c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810807c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108080:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108084:	e021      	b.n	81080ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108086:	697b      	ldr	r3, [r7, #20]
 8108088:	ee07 3a90 	vmov	s15, r3
 810808c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108090:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8108180 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108098:	4b36      	ldr	r3, [pc, #216]	; (8108174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810809a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810809c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81080a0:	ee07 3a90 	vmov	s15, r3
 81080a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81080a8:	ed97 6a03 	vldr	s12, [r7, #12]
 81080ac:	eddf 5a33 	vldr	s11, [pc, #204]	; 810817c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81080b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81080b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81080b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81080bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81080c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81080c8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81080ca:	4b2a      	ldr	r3, [pc, #168]	; (8108174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81080cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81080ce:	0a5b      	lsrs	r3, r3, #9
 81080d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81080d4:	ee07 3a90 	vmov	s15, r3
 81080d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81080e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81080e4:	edd7 6a07 	vldr	s13, [r7, #28]
 81080e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81080ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81080f0:	ee17 2a90 	vmov	r2, s15
 81080f4:	687b      	ldr	r3, [r7, #4]
 81080f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 81080f8:	4b1e      	ldr	r3, [pc, #120]	; (8108174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81080fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81080fc:	0c1b      	lsrs	r3, r3, #16
 81080fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108102:	ee07 3a90 	vmov	s15, r3
 8108106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810810a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810810e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108112:	edd7 6a07 	vldr	s13, [r7, #28]
 8108116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810811a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810811e:	ee17 2a90 	vmov	r2, s15
 8108122:	687b      	ldr	r3, [r7, #4]
 8108124:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8108126:	4b13      	ldr	r3, [pc, #76]	; (8108174 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810812a:	0e1b      	lsrs	r3, r3, #24
 810812c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108130:	ee07 3a90 	vmov	s15, r3
 8108134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810813c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108140:	edd7 6a07 	vldr	s13, [r7, #28]
 8108144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810814c:	ee17 2a90 	vmov	r2, s15
 8108150:	687b      	ldr	r3, [r7, #4]
 8108152:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8108154:	e008      	b.n	8108168 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8108156:	687b      	ldr	r3, [r7, #4]
 8108158:	2200      	movs	r2, #0
 810815a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810815c:	687b      	ldr	r3, [r7, #4]
 810815e:	2200      	movs	r2, #0
 8108160:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8108162:	687b      	ldr	r3, [r7, #4]
 8108164:	2200      	movs	r2, #0
 8108166:	609a      	str	r2, [r3, #8]
}
 8108168:	bf00      	nop
 810816a:	3724      	adds	r7, #36	; 0x24
 810816c:	46bd      	mov	sp, r7
 810816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108172:	4770      	bx	lr
 8108174:	58024400 	.word	0x58024400
 8108178:	03d09000 	.word	0x03d09000
 810817c:	46000000 	.word	0x46000000
 8108180:	4c742400 	.word	0x4c742400
 8108184:	4a742400 	.word	0x4a742400
 8108188:	4af42400 	.word	0x4af42400

0810818c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810818c:	b580      	push	{r7, lr}
 810818e:	b084      	sub	sp, #16
 8108190:	af00      	add	r7, sp, #0
 8108192:	6078      	str	r0, [r7, #4]
 8108194:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108196:	2300      	movs	r3, #0
 8108198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810819a:	4b54      	ldr	r3, [pc, #336]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 810819c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810819e:	f003 0303 	and.w	r3, r3, #3
 81081a2:	2b03      	cmp	r3, #3
 81081a4:	d101      	bne.n	81081aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81081a6:	2301      	movs	r3, #1
 81081a8:	e09b      	b.n	81082e2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81081aa:	4b50      	ldr	r3, [pc, #320]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 81081ac:	681b      	ldr	r3, [r3, #0]
 81081ae:	4a4f      	ldr	r2, [pc, #316]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 81081b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81081b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81081b6:	f7fa ff43 	bl	8103040 <HAL_GetTick>
 81081ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81081bc:	e008      	b.n	81081d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81081be:	f7fa ff3f 	bl	8103040 <HAL_GetTick>
 81081c2:	4602      	mov	r2, r0
 81081c4:	68bb      	ldr	r3, [r7, #8]
 81081c6:	1ad3      	subs	r3, r2, r3
 81081c8:	2b02      	cmp	r3, #2
 81081ca:	d901      	bls.n	81081d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81081cc:	2303      	movs	r3, #3
 81081ce:	e088      	b.n	81082e2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81081d0:	4b46      	ldr	r3, [pc, #280]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 81081d2:	681b      	ldr	r3, [r3, #0]
 81081d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81081d8:	2b00      	cmp	r3, #0
 81081da:	d1f0      	bne.n	81081be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81081dc:	4b43      	ldr	r3, [pc, #268]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 81081de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81081e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81081e4:	687b      	ldr	r3, [r7, #4]
 81081e6:	681b      	ldr	r3, [r3, #0]
 81081e8:	031b      	lsls	r3, r3, #12
 81081ea:	4940      	ldr	r1, [pc, #256]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 81081ec:	4313      	orrs	r3, r2
 81081ee:	628b      	str	r3, [r1, #40]	; 0x28
 81081f0:	687b      	ldr	r3, [r7, #4]
 81081f2:	685b      	ldr	r3, [r3, #4]
 81081f4:	3b01      	subs	r3, #1
 81081f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81081fa:	687b      	ldr	r3, [r7, #4]
 81081fc:	689b      	ldr	r3, [r3, #8]
 81081fe:	3b01      	subs	r3, #1
 8108200:	025b      	lsls	r3, r3, #9
 8108202:	b29b      	uxth	r3, r3
 8108204:	431a      	orrs	r2, r3
 8108206:	687b      	ldr	r3, [r7, #4]
 8108208:	68db      	ldr	r3, [r3, #12]
 810820a:	3b01      	subs	r3, #1
 810820c:	041b      	lsls	r3, r3, #16
 810820e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8108212:	431a      	orrs	r2, r3
 8108214:	687b      	ldr	r3, [r7, #4]
 8108216:	691b      	ldr	r3, [r3, #16]
 8108218:	3b01      	subs	r3, #1
 810821a:	061b      	lsls	r3, r3, #24
 810821c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8108220:	4932      	ldr	r1, [pc, #200]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 8108222:	4313      	orrs	r3, r2
 8108224:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108226:	4b31      	ldr	r3, [pc, #196]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 8108228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810822a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810822e:	687b      	ldr	r3, [r7, #4]
 8108230:	695b      	ldr	r3, [r3, #20]
 8108232:	492e      	ldr	r1, [pc, #184]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 8108234:	4313      	orrs	r3, r2
 8108236:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108238:	4b2c      	ldr	r3, [pc, #176]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 810823a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810823c:	f023 0220 	bic.w	r2, r3, #32
 8108240:	687b      	ldr	r3, [r7, #4]
 8108242:	699b      	ldr	r3, [r3, #24]
 8108244:	4929      	ldr	r1, [pc, #164]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 8108246:	4313      	orrs	r3, r2
 8108248:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810824a:	4b28      	ldr	r3, [pc, #160]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 810824c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810824e:	4a27      	ldr	r2, [pc, #156]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 8108250:	f023 0310 	bic.w	r3, r3, #16
 8108254:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108256:	4b25      	ldr	r3, [pc, #148]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 8108258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810825a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810825e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8108262:	687a      	ldr	r2, [r7, #4]
 8108264:	69d2      	ldr	r2, [r2, #28]
 8108266:	00d2      	lsls	r2, r2, #3
 8108268:	4920      	ldr	r1, [pc, #128]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 810826a:	4313      	orrs	r3, r2
 810826c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810826e:	4b1f      	ldr	r3, [pc, #124]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 8108270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108272:	4a1e      	ldr	r2, [pc, #120]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 8108274:	f043 0310 	orr.w	r3, r3, #16
 8108278:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810827a:	683b      	ldr	r3, [r7, #0]
 810827c:	2b00      	cmp	r3, #0
 810827e:	d106      	bne.n	810828e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8108280:	4b1a      	ldr	r3, [pc, #104]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 8108282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108284:	4a19      	ldr	r2, [pc, #100]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 8108286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810828a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810828c:	e00f      	b.n	81082ae <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810828e:	683b      	ldr	r3, [r7, #0]
 8108290:	2b01      	cmp	r3, #1
 8108292:	d106      	bne.n	81082a2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8108294:	4b15      	ldr	r3, [pc, #84]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 8108296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108298:	4a14      	ldr	r2, [pc, #80]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 810829a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810829e:	62d3      	str	r3, [r2, #44]	; 0x2c
 81082a0:	e005      	b.n	81082ae <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81082a2:	4b12      	ldr	r3, [pc, #72]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 81082a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81082a6:	4a11      	ldr	r2, [pc, #68]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 81082a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81082ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81082ae:	4b0f      	ldr	r3, [pc, #60]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 81082b0:	681b      	ldr	r3, [r3, #0]
 81082b2:	4a0e      	ldr	r2, [pc, #56]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 81082b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81082b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81082ba:	f7fa fec1 	bl	8103040 <HAL_GetTick>
 81082be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81082c0:	e008      	b.n	81082d4 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81082c2:	f7fa febd 	bl	8103040 <HAL_GetTick>
 81082c6:	4602      	mov	r2, r0
 81082c8:	68bb      	ldr	r3, [r7, #8]
 81082ca:	1ad3      	subs	r3, r2, r3
 81082cc:	2b02      	cmp	r3, #2
 81082ce:	d901      	bls.n	81082d4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81082d0:	2303      	movs	r3, #3
 81082d2:	e006      	b.n	81082e2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81082d4:	4b05      	ldr	r3, [pc, #20]	; (81082ec <RCCEx_PLL2_Config+0x160>)
 81082d6:	681b      	ldr	r3, [r3, #0]
 81082d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81082dc:	2b00      	cmp	r3, #0
 81082de:	d0f0      	beq.n	81082c2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81082e0:	7bfb      	ldrb	r3, [r7, #15]
}
 81082e2:	4618      	mov	r0, r3
 81082e4:	3710      	adds	r7, #16
 81082e6:	46bd      	mov	sp, r7
 81082e8:	bd80      	pop	{r7, pc}
 81082ea:	bf00      	nop
 81082ec:	58024400 	.word	0x58024400

081082f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81082f0:	b580      	push	{r7, lr}
 81082f2:	b084      	sub	sp, #16
 81082f4:	af00      	add	r7, sp, #0
 81082f6:	6078      	str	r0, [r7, #4]
 81082f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81082fa:	2300      	movs	r3, #0
 81082fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81082fe:	4b54      	ldr	r3, [pc, #336]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 8108300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108302:	f003 0303 	and.w	r3, r3, #3
 8108306:	2b03      	cmp	r3, #3
 8108308:	d101      	bne.n	810830e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810830a:	2301      	movs	r3, #1
 810830c:	e09b      	b.n	8108446 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810830e:	4b50      	ldr	r3, [pc, #320]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 8108310:	681b      	ldr	r3, [r3, #0]
 8108312:	4a4f      	ldr	r2, [pc, #316]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 8108314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810831a:	f7fa fe91 	bl	8103040 <HAL_GetTick>
 810831e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108320:	e008      	b.n	8108334 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108322:	f7fa fe8d 	bl	8103040 <HAL_GetTick>
 8108326:	4602      	mov	r2, r0
 8108328:	68bb      	ldr	r3, [r7, #8]
 810832a:	1ad3      	subs	r3, r2, r3
 810832c:	2b02      	cmp	r3, #2
 810832e:	d901      	bls.n	8108334 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108330:	2303      	movs	r3, #3
 8108332:	e088      	b.n	8108446 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108334:	4b46      	ldr	r3, [pc, #280]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 8108336:	681b      	ldr	r3, [r3, #0]
 8108338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810833c:	2b00      	cmp	r3, #0
 810833e:	d1f0      	bne.n	8108322 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8108340:	4b43      	ldr	r3, [pc, #268]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 8108342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108344:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8108348:	687b      	ldr	r3, [r7, #4]
 810834a:	681b      	ldr	r3, [r3, #0]
 810834c:	051b      	lsls	r3, r3, #20
 810834e:	4940      	ldr	r1, [pc, #256]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 8108350:	4313      	orrs	r3, r2
 8108352:	628b      	str	r3, [r1, #40]	; 0x28
 8108354:	687b      	ldr	r3, [r7, #4]
 8108356:	685b      	ldr	r3, [r3, #4]
 8108358:	3b01      	subs	r3, #1
 810835a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810835e:	687b      	ldr	r3, [r7, #4]
 8108360:	689b      	ldr	r3, [r3, #8]
 8108362:	3b01      	subs	r3, #1
 8108364:	025b      	lsls	r3, r3, #9
 8108366:	b29b      	uxth	r3, r3
 8108368:	431a      	orrs	r2, r3
 810836a:	687b      	ldr	r3, [r7, #4]
 810836c:	68db      	ldr	r3, [r3, #12]
 810836e:	3b01      	subs	r3, #1
 8108370:	041b      	lsls	r3, r3, #16
 8108372:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8108376:	431a      	orrs	r2, r3
 8108378:	687b      	ldr	r3, [r7, #4]
 810837a:	691b      	ldr	r3, [r3, #16]
 810837c:	3b01      	subs	r3, #1
 810837e:	061b      	lsls	r3, r3, #24
 8108380:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8108384:	4932      	ldr	r1, [pc, #200]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 8108386:	4313      	orrs	r3, r2
 8108388:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810838a:	4b31      	ldr	r3, [pc, #196]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 810838c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810838e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8108392:	687b      	ldr	r3, [r7, #4]
 8108394:	695b      	ldr	r3, [r3, #20]
 8108396:	492e      	ldr	r1, [pc, #184]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 8108398:	4313      	orrs	r3, r2
 810839a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810839c:	4b2c      	ldr	r3, [pc, #176]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 810839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81083a4:	687b      	ldr	r3, [r7, #4]
 81083a6:	699b      	ldr	r3, [r3, #24]
 81083a8:	4929      	ldr	r1, [pc, #164]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 81083aa:	4313      	orrs	r3, r2
 81083ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81083ae:	4b28      	ldr	r3, [pc, #160]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 81083b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083b2:	4a27      	ldr	r2, [pc, #156]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 81083b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81083b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81083ba:	4b25      	ldr	r3, [pc, #148]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 81083bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81083be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81083c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81083c6:	687a      	ldr	r2, [r7, #4]
 81083c8:	69d2      	ldr	r2, [r2, #28]
 81083ca:	00d2      	lsls	r2, r2, #3
 81083cc:	4920      	ldr	r1, [pc, #128]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 81083ce:	4313      	orrs	r3, r2
 81083d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81083d2:	4b1f      	ldr	r3, [pc, #124]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 81083d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083d6:	4a1e      	ldr	r2, [pc, #120]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 81083d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81083dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81083de:	683b      	ldr	r3, [r7, #0]
 81083e0:	2b00      	cmp	r3, #0
 81083e2:	d106      	bne.n	81083f2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81083e4:	4b1a      	ldr	r3, [pc, #104]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 81083e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083e8:	4a19      	ldr	r2, [pc, #100]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 81083ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81083ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 81083f0:	e00f      	b.n	8108412 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81083f2:	683b      	ldr	r3, [r7, #0]
 81083f4:	2b01      	cmp	r3, #1
 81083f6:	d106      	bne.n	8108406 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81083f8:	4b15      	ldr	r3, [pc, #84]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 81083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083fc:	4a14      	ldr	r2, [pc, #80]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 81083fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8108402:	62d3      	str	r3, [r2, #44]	; 0x2c
 8108404:	e005      	b.n	8108412 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8108406:	4b12      	ldr	r3, [pc, #72]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 8108408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810840a:	4a11      	ldr	r2, [pc, #68]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 810840c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8108410:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8108412:	4b0f      	ldr	r3, [pc, #60]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 8108414:	681b      	ldr	r3, [r3, #0]
 8108416:	4a0e      	ldr	r2, [pc, #56]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 8108418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810841c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810841e:	f7fa fe0f 	bl	8103040 <HAL_GetTick>
 8108422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108424:	e008      	b.n	8108438 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108426:	f7fa fe0b 	bl	8103040 <HAL_GetTick>
 810842a:	4602      	mov	r2, r0
 810842c:	68bb      	ldr	r3, [r7, #8]
 810842e:	1ad3      	subs	r3, r2, r3
 8108430:	2b02      	cmp	r3, #2
 8108432:	d901      	bls.n	8108438 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108434:	2303      	movs	r3, #3
 8108436:	e006      	b.n	8108446 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108438:	4b05      	ldr	r3, [pc, #20]	; (8108450 <RCCEx_PLL3_Config+0x160>)
 810843a:	681b      	ldr	r3, [r3, #0]
 810843c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108440:	2b00      	cmp	r3, #0
 8108442:	d0f0      	beq.n	8108426 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8108444:	7bfb      	ldrb	r3, [r7, #15]
}
 8108446:	4618      	mov	r0, r3
 8108448:	3710      	adds	r7, #16
 810844a:	46bd      	mov	sp, r7
 810844c:	bd80      	pop	{r7, pc}
 810844e:	bf00      	nop
 8108450:	58024400 	.word	0x58024400

08108454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8108454:	b580      	push	{r7, lr}
 8108456:	b082      	sub	sp, #8
 8108458:	af00      	add	r7, sp, #0
 810845a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810845c:	687b      	ldr	r3, [r7, #4]
 810845e:	2b00      	cmp	r3, #0
 8108460:	d101      	bne.n	8108466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8108462:	2301      	movs	r3, #1
 8108464:	e049      	b.n	81084fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8108466:	687b      	ldr	r3, [r7, #4]
 8108468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810846c:	b2db      	uxtb	r3, r3
 810846e:	2b00      	cmp	r3, #0
 8108470:	d106      	bne.n	8108480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8108472:	687b      	ldr	r3, [r7, #4]
 8108474:	2200      	movs	r2, #0
 8108476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810847a:	6878      	ldr	r0, [r7, #4]
 810847c:	f7fa fae6 	bl	8102a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108480:	687b      	ldr	r3, [r7, #4]
 8108482:	2202      	movs	r2, #2
 8108484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8108488:	687b      	ldr	r3, [r7, #4]
 810848a:	681a      	ldr	r2, [r3, #0]
 810848c:	687b      	ldr	r3, [r7, #4]
 810848e:	3304      	adds	r3, #4
 8108490:	4619      	mov	r1, r3
 8108492:	4610      	mov	r0, r2
 8108494:	f000 fe18 	bl	81090c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8108498:	687b      	ldr	r3, [r7, #4]
 810849a:	2201      	movs	r2, #1
 810849c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81084a0:	687b      	ldr	r3, [r7, #4]
 81084a2:	2201      	movs	r2, #1
 81084a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81084a8:	687b      	ldr	r3, [r7, #4]
 81084aa:	2201      	movs	r2, #1
 81084ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81084b0:	687b      	ldr	r3, [r7, #4]
 81084b2:	2201      	movs	r2, #1
 81084b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81084b8:	687b      	ldr	r3, [r7, #4]
 81084ba:	2201      	movs	r2, #1
 81084bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81084c0:	687b      	ldr	r3, [r7, #4]
 81084c2:	2201      	movs	r2, #1
 81084c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81084c8:	687b      	ldr	r3, [r7, #4]
 81084ca:	2201      	movs	r2, #1
 81084cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81084d0:	687b      	ldr	r3, [r7, #4]
 81084d2:	2201      	movs	r2, #1
 81084d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81084d8:	687b      	ldr	r3, [r7, #4]
 81084da:	2201      	movs	r2, #1
 81084dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81084e0:	687b      	ldr	r3, [r7, #4]
 81084e2:	2201      	movs	r2, #1
 81084e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81084e8:	687b      	ldr	r3, [r7, #4]
 81084ea:	2201      	movs	r2, #1
 81084ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81084f0:	687b      	ldr	r3, [r7, #4]
 81084f2:	2201      	movs	r2, #1
 81084f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81084f8:	2300      	movs	r3, #0
}
 81084fa:	4618      	mov	r0, r3
 81084fc:	3708      	adds	r7, #8
 81084fe:	46bd      	mov	sp, r7
 8108500:	bd80      	pop	{r7, pc}
	...

08108504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8108504:	b480      	push	{r7}
 8108506:	b085      	sub	sp, #20
 8108508:	af00      	add	r7, sp, #0
 810850a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810850c:	687b      	ldr	r3, [r7, #4]
 810850e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8108512:	b2db      	uxtb	r3, r3
 8108514:	2b01      	cmp	r3, #1
 8108516:	d001      	beq.n	810851c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8108518:	2301      	movs	r3, #1
 810851a:	e054      	b.n	81085c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810851c:	687b      	ldr	r3, [r7, #4]
 810851e:	2202      	movs	r2, #2
 8108520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8108524:	687b      	ldr	r3, [r7, #4]
 8108526:	681b      	ldr	r3, [r3, #0]
 8108528:	68da      	ldr	r2, [r3, #12]
 810852a:	687b      	ldr	r3, [r7, #4]
 810852c:	681b      	ldr	r3, [r3, #0]
 810852e:	f042 0201 	orr.w	r2, r2, #1
 8108532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108534:	687b      	ldr	r3, [r7, #4]
 8108536:	681b      	ldr	r3, [r3, #0]
 8108538:	4a26      	ldr	r2, [pc, #152]	; (81085d4 <HAL_TIM_Base_Start_IT+0xd0>)
 810853a:	4293      	cmp	r3, r2
 810853c:	d022      	beq.n	8108584 <HAL_TIM_Base_Start_IT+0x80>
 810853e:	687b      	ldr	r3, [r7, #4]
 8108540:	681b      	ldr	r3, [r3, #0]
 8108542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108546:	d01d      	beq.n	8108584 <HAL_TIM_Base_Start_IT+0x80>
 8108548:	687b      	ldr	r3, [r7, #4]
 810854a:	681b      	ldr	r3, [r3, #0]
 810854c:	4a22      	ldr	r2, [pc, #136]	; (81085d8 <HAL_TIM_Base_Start_IT+0xd4>)
 810854e:	4293      	cmp	r3, r2
 8108550:	d018      	beq.n	8108584 <HAL_TIM_Base_Start_IT+0x80>
 8108552:	687b      	ldr	r3, [r7, #4]
 8108554:	681b      	ldr	r3, [r3, #0]
 8108556:	4a21      	ldr	r2, [pc, #132]	; (81085dc <HAL_TIM_Base_Start_IT+0xd8>)
 8108558:	4293      	cmp	r3, r2
 810855a:	d013      	beq.n	8108584 <HAL_TIM_Base_Start_IT+0x80>
 810855c:	687b      	ldr	r3, [r7, #4]
 810855e:	681b      	ldr	r3, [r3, #0]
 8108560:	4a1f      	ldr	r2, [pc, #124]	; (81085e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8108562:	4293      	cmp	r3, r2
 8108564:	d00e      	beq.n	8108584 <HAL_TIM_Base_Start_IT+0x80>
 8108566:	687b      	ldr	r3, [r7, #4]
 8108568:	681b      	ldr	r3, [r3, #0]
 810856a:	4a1e      	ldr	r2, [pc, #120]	; (81085e4 <HAL_TIM_Base_Start_IT+0xe0>)
 810856c:	4293      	cmp	r3, r2
 810856e:	d009      	beq.n	8108584 <HAL_TIM_Base_Start_IT+0x80>
 8108570:	687b      	ldr	r3, [r7, #4]
 8108572:	681b      	ldr	r3, [r3, #0]
 8108574:	4a1c      	ldr	r2, [pc, #112]	; (81085e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8108576:	4293      	cmp	r3, r2
 8108578:	d004      	beq.n	8108584 <HAL_TIM_Base_Start_IT+0x80>
 810857a:	687b      	ldr	r3, [r7, #4]
 810857c:	681b      	ldr	r3, [r3, #0]
 810857e:	4a1b      	ldr	r2, [pc, #108]	; (81085ec <HAL_TIM_Base_Start_IT+0xe8>)
 8108580:	4293      	cmp	r3, r2
 8108582:	d115      	bne.n	81085b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8108584:	687b      	ldr	r3, [r7, #4]
 8108586:	681b      	ldr	r3, [r3, #0]
 8108588:	689a      	ldr	r2, [r3, #8]
 810858a:	4b19      	ldr	r3, [pc, #100]	; (81085f0 <HAL_TIM_Base_Start_IT+0xec>)
 810858c:	4013      	ands	r3, r2
 810858e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8108590:	68fb      	ldr	r3, [r7, #12]
 8108592:	2b06      	cmp	r3, #6
 8108594:	d015      	beq.n	81085c2 <HAL_TIM_Base_Start_IT+0xbe>
 8108596:	68fb      	ldr	r3, [r7, #12]
 8108598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810859c:	d011      	beq.n	81085c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810859e:	687b      	ldr	r3, [r7, #4]
 81085a0:	681b      	ldr	r3, [r3, #0]
 81085a2:	681a      	ldr	r2, [r3, #0]
 81085a4:	687b      	ldr	r3, [r7, #4]
 81085a6:	681b      	ldr	r3, [r3, #0]
 81085a8:	f042 0201 	orr.w	r2, r2, #1
 81085ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81085ae:	e008      	b.n	81085c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81085b0:	687b      	ldr	r3, [r7, #4]
 81085b2:	681b      	ldr	r3, [r3, #0]
 81085b4:	681a      	ldr	r2, [r3, #0]
 81085b6:	687b      	ldr	r3, [r7, #4]
 81085b8:	681b      	ldr	r3, [r3, #0]
 81085ba:	f042 0201 	orr.w	r2, r2, #1
 81085be:	601a      	str	r2, [r3, #0]
 81085c0:	e000      	b.n	81085c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81085c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81085c4:	2300      	movs	r3, #0
}
 81085c6:	4618      	mov	r0, r3
 81085c8:	3714      	adds	r7, #20
 81085ca:	46bd      	mov	sp, r7
 81085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085d0:	4770      	bx	lr
 81085d2:	bf00      	nop
 81085d4:	40010000 	.word	0x40010000
 81085d8:	40000400 	.word	0x40000400
 81085dc:	40000800 	.word	0x40000800
 81085e0:	40000c00 	.word	0x40000c00
 81085e4:	40010400 	.word	0x40010400
 81085e8:	40001800 	.word	0x40001800
 81085ec:	40014000 	.word	0x40014000
 81085f0:	00010007 	.word	0x00010007

081085f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81085f4:	b580      	push	{r7, lr}
 81085f6:	b082      	sub	sp, #8
 81085f8:	af00      	add	r7, sp, #0
 81085fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81085fc:	687b      	ldr	r3, [r7, #4]
 81085fe:	2b00      	cmp	r3, #0
 8108600:	d101      	bne.n	8108606 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8108602:	2301      	movs	r3, #1
 8108604:	e049      	b.n	810869a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8108606:	687b      	ldr	r3, [r7, #4]
 8108608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810860c:	b2db      	uxtb	r3, r3
 810860e:	2b00      	cmp	r3, #0
 8108610:	d106      	bne.n	8108620 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8108612:	687b      	ldr	r3, [r7, #4]
 8108614:	2200      	movs	r2, #0
 8108616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810861a:	6878      	ldr	r0, [r7, #4]
 810861c:	f000 f841 	bl	81086a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108620:	687b      	ldr	r3, [r7, #4]
 8108622:	2202      	movs	r2, #2
 8108624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8108628:	687b      	ldr	r3, [r7, #4]
 810862a:	681a      	ldr	r2, [r3, #0]
 810862c:	687b      	ldr	r3, [r7, #4]
 810862e:	3304      	adds	r3, #4
 8108630:	4619      	mov	r1, r3
 8108632:	4610      	mov	r0, r2
 8108634:	f000 fd48 	bl	81090c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8108638:	687b      	ldr	r3, [r7, #4]
 810863a:	2201      	movs	r2, #1
 810863c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8108640:	687b      	ldr	r3, [r7, #4]
 8108642:	2201      	movs	r2, #1
 8108644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8108648:	687b      	ldr	r3, [r7, #4]
 810864a:	2201      	movs	r2, #1
 810864c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8108650:	687b      	ldr	r3, [r7, #4]
 8108652:	2201      	movs	r2, #1
 8108654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8108658:	687b      	ldr	r3, [r7, #4]
 810865a:	2201      	movs	r2, #1
 810865c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8108660:	687b      	ldr	r3, [r7, #4]
 8108662:	2201      	movs	r2, #1
 8108664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8108668:	687b      	ldr	r3, [r7, #4]
 810866a:	2201      	movs	r2, #1
 810866c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8108670:	687b      	ldr	r3, [r7, #4]
 8108672:	2201      	movs	r2, #1
 8108674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8108678:	687b      	ldr	r3, [r7, #4]
 810867a:	2201      	movs	r2, #1
 810867c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8108680:	687b      	ldr	r3, [r7, #4]
 8108682:	2201      	movs	r2, #1
 8108684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8108688:	687b      	ldr	r3, [r7, #4]
 810868a:	2201      	movs	r2, #1
 810868c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8108690:	687b      	ldr	r3, [r7, #4]
 8108692:	2201      	movs	r2, #1
 8108694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8108698:	2300      	movs	r3, #0
}
 810869a:	4618      	mov	r0, r3
 810869c:	3708      	adds	r7, #8
 810869e:	46bd      	mov	sp, r7
 81086a0:	bd80      	pop	{r7, pc}

081086a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 81086a2:	b480      	push	{r7}
 81086a4:	b083      	sub	sp, #12
 81086a6:	af00      	add	r7, sp, #0
 81086a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 81086aa:	bf00      	nop
 81086ac:	370c      	adds	r7, #12
 81086ae:	46bd      	mov	sp, r7
 81086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086b4:	4770      	bx	lr
	...

081086b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81086b8:	b580      	push	{r7, lr}
 81086ba:	b084      	sub	sp, #16
 81086bc:	af00      	add	r7, sp, #0
 81086be:	6078      	str	r0, [r7, #4]
 81086c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 81086c2:	683b      	ldr	r3, [r7, #0]
 81086c4:	2b00      	cmp	r3, #0
 81086c6:	d109      	bne.n	81086dc <HAL_TIM_PWM_Start+0x24>
 81086c8:	687b      	ldr	r3, [r7, #4]
 81086ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 81086ce:	b2db      	uxtb	r3, r3
 81086d0:	2b01      	cmp	r3, #1
 81086d2:	bf14      	ite	ne
 81086d4:	2301      	movne	r3, #1
 81086d6:	2300      	moveq	r3, #0
 81086d8:	b2db      	uxtb	r3, r3
 81086da:	e03c      	b.n	8108756 <HAL_TIM_PWM_Start+0x9e>
 81086dc:	683b      	ldr	r3, [r7, #0]
 81086de:	2b04      	cmp	r3, #4
 81086e0:	d109      	bne.n	81086f6 <HAL_TIM_PWM_Start+0x3e>
 81086e2:	687b      	ldr	r3, [r7, #4]
 81086e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 81086e8:	b2db      	uxtb	r3, r3
 81086ea:	2b01      	cmp	r3, #1
 81086ec:	bf14      	ite	ne
 81086ee:	2301      	movne	r3, #1
 81086f0:	2300      	moveq	r3, #0
 81086f2:	b2db      	uxtb	r3, r3
 81086f4:	e02f      	b.n	8108756 <HAL_TIM_PWM_Start+0x9e>
 81086f6:	683b      	ldr	r3, [r7, #0]
 81086f8:	2b08      	cmp	r3, #8
 81086fa:	d109      	bne.n	8108710 <HAL_TIM_PWM_Start+0x58>
 81086fc:	687b      	ldr	r3, [r7, #4]
 81086fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108702:	b2db      	uxtb	r3, r3
 8108704:	2b01      	cmp	r3, #1
 8108706:	bf14      	ite	ne
 8108708:	2301      	movne	r3, #1
 810870a:	2300      	moveq	r3, #0
 810870c:	b2db      	uxtb	r3, r3
 810870e:	e022      	b.n	8108756 <HAL_TIM_PWM_Start+0x9e>
 8108710:	683b      	ldr	r3, [r7, #0]
 8108712:	2b0c      	cmp	r3, #12
 8108714:	d109      	bne.n	810872a <HAL_TIM_PWM_Start+0x72>
 8108716:	687b      	ldr	r3, [r7, #4]
 8108718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810871c:	b2db      	uxtb	r3, r3
 810871e:	2b01      	cmp	r3, #1
 8108720:	bf14      	ite	ne
 8108722:	2301      	movne	r3, #1
 8108724:	2300      	moveq	r3, #0
 8108726:	b2db      	uxtb	r3, r3
 8108728:	e015      	b.n	8108756 <HAL_TIM_PWM_Start+0x9e>
 810872a:	683b      	ldr	r3, [r7, #0]
 810872c:	2b10      	cmp	r3, #16
 810872e:	d109      	bne.n	8108744 <HAL_TIM_PWM_Start+0x8c>
 8108730:	687b      	ldr	r3, [r7, #4]
 8108732:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8108736:	b2db      	uxtb	r3, r3
 8108738:	2b01      	cmp	r3, #1
 810873a:	bf14      	ite	ne
 810873c:	2301      	movne	r3, #1
 810873e:	2300      	moveq	r3, #0
 8108740:	b2db      	uxtb	r3, r3
 8108742:	e008      	b.n	8108756 <HAL_TIM_PWM_Start+0x9e>
 8108744:	687b      	ldr	r3, [r7, #4]
 8108746:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 810874a:	b2db      	uxtb	r3, r3
 810874c:	2b01      	cmp	r3, #1
 810874e:	bf14      	ite	ne
 8108750:	2301      	movne	r3, #1
 8108752:	2300      	moveq	r3, #0
 8108754:	b2db      	uxtb	r3, r3
 8108756:	2b00      	cmp	r3, #0
 8108758:	d001      	beq.n	810875e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 810875a:	2301      	movs	r3, #1
 810875c:	e0a1      	b.n	81088a2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810875e:	683b      	ldr	r3, [r7, #0]
 8108760:	2b00      	cmp	r3, #0
 8108762:	d104      	bne.n	810876e <HAL_TIM_PWM_Start+0xb6>
 8108764:	687b      	ldr	r3, [r7, #4]
 8108766:	2202      	movs	r2, #2
 8108768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810876c:	e023      	b.n	81087b6 <HAL_TIM_PWM_Start+0xfe>
 810876e:	683b      	ldr	r3, [r7, #0]
 8108770:	2b04      	cmp	r3, #4
 8108772:	d104      	bne.n	810877e <HAL_TIM_PWM_Start+0xc6>
 8108774:	687b      	ldr	r3, [r7, #4]
 8108776:	2202      	movs	r2, #2
 8108778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810877c:	e01b      	b.n	81087b6 <HAL_TIM_PWM_Start+0xfe>
 810877e:	683b      	ldr	r3, [r7, #0]
 8108780:	2b08      	cmp	r3, #8
 8108782:	d104      	bne.n	810878e <HAL_TIM_PWM_Start+0xd6>
 8108784:	687b      	ldr	r3, [r7, #4]
 8108786:	2202      	movs	r2, #2
 8108788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810878c:	e013      	b.n	81087b6 <HAL_TIM_PWM_Start+0xfe>
 810878e:	683b      	ldr	r3, [r7, #0]
 8108790:	2b0c      	cmp	r3, #12
 8108792:	d104      	bne.n	810879e <HAL_TIM_PWM_Start+0xe6>
 8108794:	687b      	ldr	r3, [r7, #4]
 8108796:	2202      	movs	r2, #2
 8108798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810879c:	e00b      	b.n	81087b6 <HAL_TIM_PWM_Start+0xfe>
 810879e:	683b      	ldr	r3, [r7, #0]
 81087a0:	2b10      	cmp	r3, #16
 81087a2:	d104      	bne.n	81087ae <HAL_TIM_PWM_Start+0xf6>
 81087a4:	687b      	ldr	r3, [r7, #4]
 81087a6:	2202      	movs	r2, #2
 81087a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81087ac:	e003      	b.n	81087b6 <HAL_TIM_PWM_Start+0xfe>
 81087ae:	687b      	ldr	r3, [r7, #4]
 81087b0:	2202      	movs	r2, #2
 81087b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 81087b6:	687b      	ldr	r3, [r7, #4]
 81087b8:	681b      	ldr	r3, [r3, #0]
 81087ba:	2201      	movs	r2, #1
 81087bc:	6839      	ldr	r1, [r7, #0]
 81087be:	4618      	mov	r0, r3
 81087c0:	f001 f88e 	bl	81098e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 81087c4:	687b      	ldr	r3, [r7, #4]
 81087c6:	681b      	ldr	r3, [r3, #0]
 81087c8:	4a38      	ldr	r2, [pc, #224]	; (81088ac <HAL_TIM_PWM_Start+0x1f4>)
 81087ca:	4293      	cmp	r3, r2
 81087cc:	d013      	beq.n	81087f6 <HAL_TIM_PWM_Start+0x13e>
 81087ce:	687b      	ldr	r3, [r7, #4]
 81087d0:	681b      	ldr	r3, [r3, #0]
 81087d2:	4a37      	ldr	r2, [pc, #220]	; (81088b0 <HAL_TIM_PWM_Start+0x1f8>)
 81087d4:	4293      	cmp	r3, r2
 81087d6:	d00e      	beq.n	81087f6 <HAL_TIM_PWM_Start+0x13e>
 81087d8:	687b      	ldr	r3, [r7, #4]
 81087da:	681b      	ldr	r3, [r3, #0]
 81087dc:	4a35      	ldr	r2, [pc, #212]	; (81088b4 <HAL_TIM_PWM_Start+0x1fc>)
 81087de:	4293      	cmp	r3, r2
 81087e0:	d009      	beq.n	81087f6 <HAL_TIM_PWM_Start+0x13e>
 81087e2:	687b      	ldr	r3, [r7, #4]
 81087e4:	681b      	ldr	r3, [r3, #0]
 81087e6:	4a34      	ldr	r2, [pc, #208]	; (81088b8 <HAL_TIM_PWM_Start+0x200>)
 81087e8:	4293      	cmp	r3, r2
 81087ea:	d004      	beq.n	81087f6 <HAL_TIM_PWM_Start+0x13e>
 81087ec:	687b      	ldr	r3, [r7, #4]
 81087ee:	681b      	ldr	r3, [r3, #0]
 81087f0:	4a32      	ldr	r2, [pc, #200]	; (81088bc <HAL_TIM_PWM_Start+0x204>)
 81087f2:	4293      	cmp	r3, r2
 81087f4:	d101      	bne.n	81087fa <HAL_TIM_PWM_Start+0x142>
 81087f6:	2301      	movs	r3, #1
 81087f8:	e000      	b.n	81087fc <HAL_TIM_PWM_Start+0x144>
 81087fa:	2300      	movs	r3, #0
 81087fc:	2b00      	cmp	r3, #0
 81087fe:	d007      	beq.n	8108810 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8108800:	687b      	ldr	r3, [r7, #4]
 8108802:	681b      	ldr	r3, [r3, #0]
 8108804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108806:	687b      	ldr	r3, [r7, #4]
 8108808:	681b      	ldr	r3, [r3, #0]
 810880a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810880e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108810:	687b      	ldr	r3, [r7, #4]
 8108812:	681b      	ldr	r3, [r3, #0]
 8108814:	4a25      	ldr	r2, [pc, #148]	; (81088ac <HAL_TIM_PWM_Start+0x1f4>)
 8108816:	4293      	cmp	r3, r2
 8108818:	d022      	beq.n	8108860 <HAL_TIM_PWM_Start+0x1a8>
 810881a:	687b      	ldr	r3, [r7, #4]
 810881c:	681b      	ldr	r3, [r3, #0]
 810881e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108822:	d01d      	beq.n	8108860 <HAL_TIM_PWM_Start+0x1a8>
 8108824:	687b      	ldr	r3, [r7, #4]
 8108826:	681b      	ldr	r3, [r3, #0]
 8108828:	4a25      	ldr	r2, [pc, #148]	; (81088c0 <HAL_TIM_PWM_Start+0x208>)
 810882a:	4293      	cmp	r3, r2
 810882c:	d018      	beq.n	8108860 <HAL_TIM_PWM_Start+0x1a8>
 810882e:	687b      	ldr	r3, [r7, #4]
 8108830:	681b      	ldr	r3, [r3, #0]
 8108832:	4a24      	ldr	r2, [pc, #144]	; (81088c4 <HAL_TIM_PWM_Start+0x20c>)
 8108834:	4293      	cmp	r3, r2
 8108836:	d013      	beq.n	8108860 <HAL_TIM_PWM_Start+0x1a8>
 8108838:	687b      	ldr	r3, [r7, #4]
 810883a:	681b      	ldr	r3, [r3, #0]
 810883c:	4a22      	ldr	r2, [pc, #136]	; (81088c8 <HAL_TIM_PWM_Start+0x210>)
 810883e:	4293      	cmp	r3, r2
 8108840:	d00e      	beq.n	8108860 <HAL_TIM_PWM_Start+0x1a8>
 8108842:	687b      	ldr	r3, [r7, #4]
 8108844:	681b      	ldr	r3, [r3, #0]
 8108846:	4a1a      	ldr	r2, [pc, #104]	; (81088b0 <HAL_TIM_PWM_Start+0x1f8>)
 8108848:	4293      	cmp	r3, r2
 810884a:	d009      	beq.n	8108860 <HAL_TIM_PWM_Start+0x1a8>
 810884c:	687b      	ldr	r3, [r7, #4]
 810884e:	681b      	ldr	r3, [r3, #0]
 8108850:	4a1e      	ldr	r2, [pc, #120]	; (81088cc <HAL_TIM_PWM_Start+0x214>)
 8108852:	4293      	cmp	r3, r2
 8108854:	d004      	beq.n	8108860 <HAL_TIM_PWM_Start+0x1a8>
 8108856:	687b      	ldr	r3, [r7, #4]
 8108858:	681b      	ldr	r3, [r3, #0]
 810885a:	4a16      	ldr	r2, [pc, #88]	; (81088b4 <HAL_TIM_PWM_Start+0x1fc>)
 810885c:	4293      	cmp	r3, r2
 810885e:	d115      	bne.n	810888c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8108860:	687b      	ldr	r3, [r7, #4]
 8108862:	681b      	ldr	r3, [r3, #0]
 8108864:	689a      	ldr	r2, [r3, #8]
 8108866:	4b1a      	ldr	r3, [pc, #104]	; (81088d0 <HAL_TIM_PWM_Start+0x218>)
 8108868:	4013      	ands	r3, r2
 810886a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810886c:	68fb      	ldr	r3, [r7, #12]
 810886e:	2b06      	cmp	r3, #6
 8108870:	d015      	beq.n	810889e <HAL_TIM_PWM_Start+0x1e6>
 8108872:	68fb      	ldr	r3, [r7, #12]
 8108874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108878:	d011      	beq.n	810889e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 810887a:	687b      	ldr	r3, [r7, #4]
 810887c:	681b      	ldr	r3, [r3, #0]
 810887e:	681a      	ldr	r2, [r3, #0]
 8108880:	687b      	ldr	r3, [r7, #4]
 8108882:	681b      	ldr	r3, [r3, #0]
 8108884:	f042 0201 	orr.w	r2, r2, #1
 8108888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810888a:	e008      	b.n	810889e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810888c:	687b      	ldr	r3, [r7, #4]
 810888e:	681b      	ldr	r3, [r3, #0]
 8108890:	681a      	ldr	r2, [r3, #0]
 8108892:	687b      	ldr	r3, [r7, #4]
 8108894:	681b      	ldr	r3, [r3, #0]
 8108896:	f042 0201 	orr.w	r2, r2, #1
 810889a:	601a      	str	r2, [r3, #0]
 810889c:	e000      	b.n	81088a0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810889e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81088a0:	2300      	movs	r3, #0
}
 81088a2:	4618      	mov	r0, r3
 81088a4:	3710      	adds	r7, #16
 81088a6:	46bd      	mov	sp, r7
 81088a8:	bd80      	pop	{r7, pc}
 81088aa:	bf00      	nop
 81088ac:	40010000 	.word	0x40010000
 81088b0:	40010400 	.word	0x40010400
 81088b4:	40014000 	.word	0x40014000
 81088b8:	40014400 	.word	0x40014400
 81088bc:	40014800 	.word	0x40014800
 81088c0:	40000400 	.word	0x40000400
 81088c4:	40000800 	.word	0x40000800
 81088c8:	40000c00 	.word	0x40000c00
 81088cc:	40001800 	.word	0x40001800
 81088d0:	00010007 	.word	0x00010007

081088d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 81088d4:	b580      	push	{r7, lr}
 81088d6:	b086      	sub	sp, #24
 81088d8:	af00      	add	r7, sp, #0
 81088da:	6078      	str	r0, [r7, #4]
 81088dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 81088de:	687b      	ldr	r3, [r7, #4]
 81088e0:	2b00      	cmp	r3, #0
 81088e2:	d101      	bne.n	81088e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 81088e4:	2301      	movs	r3, #1
 81088e6:	e097      	b.n	8108a18 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 81088e8:	687b      	ldr	r3, [r7, #4]
 81088ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81088ee:	b2db      	uxtb	r3, r3
 81088f0:	2b00      	cmp	r3, #0
 81088f2:	d106      	bne.n	8108902 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81088f4:	687b      	ldr	r3, [r7, #4]
 81088f6:	2200      	movs	r2, #0
 81088f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 81088fc:	6878      	ldr	r0, [r7, #4]
 81088fe:	f7fa f8e3 	bl	8102ac8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108902:	687b      	ldr	r3, [r7, #4]
 8108904:	2202      	movs	r2, #2
 8108906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 810890a:	687b      	ldr	r3, [r7, #4]
 810890c:	681b      	ldr	r3, [r3, #0]
 810890e:	689b      	ldr	r3, [r3, #8]
 8108910:	687a      	ldr	r2, [r7, #4]
 8108912:	6812      	ldr	r2, [r2, #0]
 8108914:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8108918:	f023 0307 	bic.w	r3, r3, #7
 810891c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810891e:	687b      	ldr	r3, [r7, #4]
 8108920:	681a      	ldr	r2, [r3, #0]
 8108922:	687b      	ldr	r3, [r7, #4]
 8108924:	3304      	adds	r3, #4
 8108926:	4619      	mov	r1, r3
 8108928:	4610      	mov	r0, r2
 810892a:	f000 fbcd 	bl	81090c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810892e:	687b      	ldr	r3, [r7, #4]
 8108930:	681b      	ldr	r3, [r3, #0]
 8108932:	689b      	ldr	r3, [r3, #8]
 8108934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8108936:	687b      	ldr	r3, [r7, #4]
 8108938:	681b      	ldr	r3, [r3, #0]
 810893a:	699b      	ldr	r3, [r3, #24]
 810893c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 810893e:	687b      	ldr	r3, [r7, #4]
 8108940:	681b      	ldr	r3, [r3, #0]
 8108942:	6a1b      	ldr	r3, [r3, #32]
 8108944:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8108946:	683b      	ldr	r3, [r7, #0]
 8108948:	681b      	ldr	r3, [r3, #0]
 810894a:	697a      	ldr	r2, [r7, #20]
 810894c:	4313      	orrs	r3, r2
 810894e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8108950:	693b      	ldr	r3, [r7, #16]
 8108952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108956:	f023 0303 	bic.w	r3, r3, #3
 810895a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 810895c:	683b      	ldr	r3, [r7, #0]
 810895e:	689a      	ldr	r2, [r3, #8]
 8108960:	683b      	ldr	r3, [r7, #0]
 8108962:	699b      	ldr	r3, [r3, #24]
 8108964:	021b      	lsls	r3, r3, #8
 8108966:	4313      	orrs	r3, r2
 8108968:	693a      	ldr	r2, [r7, #16]
 810896a:	4313      	orrs	r3, r2
 810896c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 810896e:	693b      	ldr	r3, [r7, #16]
 8108970:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8108974:	f023 030c 	bic.w	r3, r3, #12
 8108978:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 810897a:	693b      	ldr	r3, [r7, #16]
 810897c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8108980:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8108984:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8108986:	683b      	ldr	r3, [r7, #0]
 8108988:	68da      	ldr	r2, [r3, #12]
 810898a:	683b      	ldr	r3, [r7, #0]
 810898c:	69db      	ldr	r3, [r3, #28]
 810898e:	021b      	lsls	r3, r3, #8
 8108990:	4313      	orrs	r3, r2
 8108992:	693a      	ldr	r2, [r7, #16]
 8108994:	4313      	orrs	r3, r2
 8108996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8108998:	683b      	ldr	r3, [r7, #0]
 810899a:	691b      	ldr	r3, [r3, #16]
 810899c:	011a      	lsls	r2, r3, #4
 810899e:	683b      	ldr	r3, [r7, #0]
 81089a0:	6a1b      	ldr	r3, [r3, #32]
 81089a2:	031b      	lsls	r3, r3, #12
 81089a4:	4313      	orrs	r3, r2
 81089a6:	693a      	ldr	r2, [r7, #16]
 81089a8:	4313      	orrs	r3, r2
 81089aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 81089ac:	68fb      	ldr	r3, [r7, #12]
 81089ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 81089b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 81089b4:	68fb      	ldr	r3, [r7, #12]
 81089b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 81089ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 81089bc:	683b      	ldr	r3, [r7, #0]
 81089be:	685a      	ldr	r2, [r3, #4]
 81089c0:	683b      	ldr	r3, [r7, #0]
 81089c2:	695b      	ldr	r3, [r3, #20]
 81089c4:	011b      	lsls	r3, r3, #4
 81089c6:	4313      	orrs	r3, r2
 81089c8:	68fa      	ldr	r2, [r7, #12]
 81089ca:	4313      	orrs	r3, r2
 81089cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 81089ce:	687b      	ldr	r3, [r7, #4]
 81089d0:	681b      	ldr	r3, [r3, #0]
 81089d2:	697a      	ldr	r2, [r7, #20]
 81089d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 81089d6:	687b      	ldr	r3, [r7, #4]
 81089d8:	681b      	ldr	r3, [r3, #0]
 81089da:	693a      	ldr	r2, [r7, #16]
 81089dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 81089de:	687b      	ldr	r3, [r7, #4]
 81089e0:	681b      	ldr	r3, [r3, #0]
 81089e2:	68fa      	ldr	r2, [r7, #12]
 81089e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81089e6:	687b      	ldr	r3, [r7, #4]
 81089e8:	2201      	movs	r2, #1
 81089ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 81089ee:	687b      	ldr	r3, [r7, #4]
 81089f0:	2201      	movs	r2, #1
 81089f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 81089f6:	687b      	ldr	r3, [r7, #4]
 81089f8:	2201      	movs	r2, #1
 81089fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 81089fe:	687b      	ldr	r3, [r7, #4]
 8108a00:	2201      	movs	r2, #1
 8108a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8108a06:	687b      	ldr	r3, [r7, #4]
 8108a08:	2201      	movs	r2, #1
 8108a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8108a0e:	687b      	ldr	r3, [r7, #4]
 8108a10:	2201      	movs	r2, #1
 8108a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8108a16:	2300      	movs	r3, #0
}
 8108a18:	4618      	mov	r0, r3
 8108a1a:	3718      	adds	r7, #24
 8108a1c:	46bd      	mov	sp, r7
 8108a1e:	bd80      	pop	{r7, pc}

08108a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8108a20:	b580      	push	{r7, lr}
 8108a22:	b082      	sub	sp, #8
 8108a24:	af00      	add	r7, sp, #0
 8108a26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8108a28:	687b      	ldr	r3, [r7, #4]
 8108a2a:	681b      	ldr	r3, [r3, #0]
 8108a2c:	691b      	ldr	r3, [r3, #16]
 8108a2e:	f003 0302 	and.w	r3, r3, #2
 8108a32:	2b02      	cmp	r3, #2
 8108a34:	d122      	bne.n	8108a7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8108a36:	687b      	ldr	r3, [r7, #4]
 8108a38:	681b      	ldr	r3, [r3, #0]
 8108a3a:	68db      	ldr	r3, [r3, #12]
 8108a3c:	f003 0302 	and.w	r3, r3, #2
 8108a40:	2b02      	cmp	r3, #2
 8108a42:	d11b      	bne.n	8108a7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8108a44:	687b      	ldr	r3, [r7, #4]
 8108a46:	681b      	ldr	r3, [r3, #0]
 8108a48:	f06f 0202 	mvn.w	r2, #2
 8108a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8108a4e:	687b      	ldr	r3, [r7, #4]
 8108a50:	2201      	movs	r2, #1
 8108a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8108a54:	687b      	ldr	r3, [r7, #4]
 8108a56:	681b      	ldr	r3, [r3, #0]
 8108a58:	699b      	ldr	r3, [r3, #24]
 8108a5a:	f003 0303 	and.w	r3, r3, #3
 8108a5e:	2b00      	cmp	r3, #0
 8108a60:	d003      	beq.n	8108a6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8108a62:	6878      	ldr	r0, [r7, #4]
 8108a64:	f000 fb12 	bl	810908c <HAL_TIM_IC_CaptureCallback>
 8108a68:	e005      	b.n	8108a76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8108a6a:	6878      	ldr	r0, [r7, #4]
 8108a6c:	f000 fb04 	bl	8109078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108a70:	6878      	ldr	r0, [r7, #4]
 8108a72:	f000 fb15 	bl	81090a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108a76:	687b      	ldr	r3, [r7, #4]
 8108a78:	2200      	movs	r2, #0
 8108a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8108a7c:	687b      	ldr	r3, [r7, #4]
 8108a7e:	681b      	ldr	r3, [r3, #0]
 8108a80:	691b      	ldr	r3, [r3, #16]
 8108a82:	f003 0304 	and.w	r3, r3, #4
 8108a86:	2b04      	cmp	r3, #4
 8108a88:	d122      	bne.n	8108ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8108a8a:	687b      	ldr	r3, [r7, #4]
 8108a8c:	681b      	ldr	r3, [r3, #0]
 8108a8e:	68db      	ldr	r3, [r3, #12]
 8108a90:	f003 0304 	and.w	r3, r3, #4
 8108a94:	2b04      	cmp	r3, #4
 8108a96:	d11b      	bne.n	8108ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8108a98:	687b      	ldr	r3, [r7, #4]
 8108a9a:	681b      	ldr	r3, [r3, #0]
 8108a9c:	f06f 0204 	mvn.w	r2, #4
 8108aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8108aa2:	687b      	ldr	r3, [r7, #4]
 8108aa4:	2202      	movs	r2, #2
 8108aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8108aa8:	687b      	ldr	r3, [r7, #4]
 8108aaa:	681b      	ldr	r3, [r3, #0]
 8108aac:	699b      	ldr	r3, [r3, #24]
 8108aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108ab2:	2b00      	cmp	r3, #0
 8108ab4:	d003      	beq.n	8108abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108ab6:	6878      	ldr	r0, [r7, #4]
 8108ab8:	f000 fae8 	bl	810908c <HAL_TIM_IC_CaptureCallback>
 8108abc:	e005      	b.n	8108aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108abe:	6878      	ldr	r0, [r7, #4]
 8108ac0:	f000 fada 	bl	8109078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108ac4:	6878      	ldr	r0, [r7, #4]
 8108ac6:	f000 faeb 	bl	81090a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108aca:	687b      	ldr	r3, [r7, #4]
 8108acc:	2200      	movs	r2, #0
 8108ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8108ad0:	687b      	ldr	r3, [r7, #4]
 8108ad2:	681b      	ldr	r3, [r3, #0]
 8108ad4:	691b      	ldr	r3, [r3, #16]
 8108ad6:	f003 0308 	and.w	r3, r3, #8
 8108ada:	2b08      	cmp	r3, #8
 8108adc:	d122      	bne.n	8108b24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8108ade:	687b      	ldr	r3, [r7, #4]
 8108ae0:	681b      	ldr	r3, [r3, #0]
 8108ae2:	68db      	ldr	r3, [r3, #12]
 8108ae4:	f003 0308 	and.w	r3, r3, #8
 8108ae8:	2b08      	cmp	r3, #8
 8108aea:	d11b      	bne.n	8108b24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8108aec:	687b      	ldr	r3, [r7, #4]
 8108aee:	681b      	ldr	r3, [r3, #0]
 8108af0:	f06f 0208 	mvn.w	r2, #8
 8108af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8108af6:	687b      	ldr	r3, [r7, #4]
 8108af8:	2204      	movs	r2, #4
 8108afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8108afc:	687b      	ldr	r3, [r7, #4]
 8108afe:	681b      	ldr	r3, [r3, #0]
 8108b00:	69db      	ldr	r3, [r3, #28]
 8108b02:	f003 0303 	and.w	r3, r3, #3
 8108b06:	2b00      	cmp	r3, #0
 8108b08:	d003      	beq.n	8108b12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108b0a:	6878      	ldr	r0, [r7, #4]
 8108b0c:	f000 fabe 	bl	810908c <HAL_TIM_IC_CaptureCallback>
 8108b10:	e005      	b.n	8108b1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108b12:	6878      	ldr	r0, [r7, #4]
 8108b14:	f000 fab0 	bl	8109078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108b18:	6878      	ldr	r0, [r7, #4]
 8108b1a:	f000 fac1 	bl	81090a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108b1e:	687b      	ldr	r3, [r7, #4]
 8108b20:	2200      	movs	r2, #0
 8108b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8108b24:	687b      	ldr	r3, [r7, #4]
 8108b26:	681b      	ldr	r3, [r3, #0]
 8108b28:	691b      	ldr	r3, [r3, #16]
 8108b2a:	f003 0310 	and.w	r3, r3, #16
 8108b2e:	2b10      	cmp	r3, #16
 8108b30:	d122      	bne.n	8108b78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8108b32:	687b      	ldr	r3, [r7, #4]
 8108b34:	681b      	ldr	r3, [r3, #0]
 8108b36:	68db      	ldr	r3, [r3, #12]
 8108b38:	f003 0310 	and.w	r3, r3, #16
 8108b3c:	2b10      	cmp	r3, #16
 8108b3e:	d11b      	bne.n	8108b78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8108b40:	687b      	ldr	r3, [r7, #4]
 8108b42:	681b      	ldr	r3, [r3, #0]
 8108b44:	f06f 0210 	mvn.w	r2, #16
 8108b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8108b4a:	687b      	ldr	r3, [r7, #4]
 8108b4c:	2208      	movs	r2, #8
 8108b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8108b50:	687b      	ldr	r3, [r7, #4]
 8108b52:	681b      	ldr	r3, [r3, #0]
 8108b54:	69db      	ldr	r3, [r3, #28]
 8108b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108b5a:	2b00      	cmp	r3, #0
 8108b5c:	d003      	beq.n	8108b66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108b5e:	6878      	ldr	r0, [r7, #4]
 8108b60:	f000 fa94 	bl	810908c <HAL_TIM_IC_CaptureCallback>
 8108b64:	e005      	b.n	8108b72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108b66:	6878      	ldr	r0, [r7, #4]
 8108b68:	f000 fa86 	bl	8109078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108b6c:	6878      	ldr	r0, [r7, #4]
 8108b6e:	f000 fa97 	bl	81090a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108b72:	687b      	ldr	r3, [r7, #4]
 8108b74:	2200      	movs	r2, #0
 8108b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8108b78:	687b      	ldr	r3, [r7, #4]
 8108b7a:	681b      	ldr	r3, [r3, #0]
 8108b7c:	691b      	ldr	r3, [r3, #16]
 8108b7e:	f003 0301 	and.w	r3, r3, #1
 8108b82:	2b01      	cmp	r3, #1
 8108b84:	d10e      	bne.n	8108ba4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8108b86:	687b      	ldr	r3, [r7, #4]
 8108b88:	681b      	ldr	r3, [r3, #0]
 8108b8a:	68db      	ldr	r3, [r3, #12]
 8108b8c:	f003 0301 	and.w	r3, r3, #1
 8108b90:	2b01      	cmp	r3, #1
 8108b92:	d107      	bne.n	8108ba4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8108b94:	687b      	ldr	r3, [r7, #4]
 8108b96:	681b      	ldr	r3, [r3, #0]
 8108b98:	f06f 0201 	mvn.w	r2, #1
 8108b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8108b9e:	6878      	ldr	r0, [r7, #4]
 8108ba0:	f7f9 fd8e 	bl	81026c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8108ba4:	687b      	ldr	r3, [r7, #4]
 8108ba6:	681b      	ldr	r3, [r3, #0]
 8108ba8:	691b      	ldr	r3, [r3, #16]
 8108baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108bae:	2b80      	cmp	r3, #128	; 0x80
 8108bb0:	d10e      	bne.n	8108bd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8108bb2:	687b      	ldr	r3, [r7, #4]
 8108bb4:	681b      	ldr	r3, [r3, #0]
 8108bb6:	68db      	ldr	r3, [r3, #12]
 8108bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108bbc:	2b80      	cmp	r3, #128	; 0x80
 8108bbe:	d107      	bne.n	8108bd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8108bc0:	687b      	ldr	r3, [r7, #4]
 8108bc2:	681b      	ldr	r3, [r3, #0]
 8108bc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8108bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8108bca:	6878      	ldr	r0, [r7, #4]
 8108bcc:	f000 ffc4 	bl	8109b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8108bd0:	687b      	ldr	r3, [r7, #4]
 8108bd2:	681b      	ldr	r3, [r3, #0]
 8108bd4:	691b      	ldr	r3, [r3, #16]
 8108bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108bde:	d10e      	bne.n	8108bfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8108be0:	687b      	ldr	r3, [r7, #4]
 8108be2:	681b      	ldr	r3, [r3, #0]
 8108be4:	68db      	ldr	r3, [r3, #12]
 8108be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108bea:	2b80      	cmp	r3, #128	; 0x80
 8108bec:	d107      	bne.n	8108bfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8108bee:	687b      	ldr	r3, [r7, #4]
 8108bf0:	681b      	ldr	r3, [r3, #0]
 8108bf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8108bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8108bf8:	6878      	ldr	r0, [r7, #4]
 8108bfa:	f000 ffb7 	bl	8109b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8108bfe:	687b      	ldr	r3, [r7, #4]
 8108c00:	681b      	ldr	r3, [r3, #0]
 8108c02:	691b      	ldr	r3, [r3, #16]
 8108c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108c08:	2b40      	cmp	r3, #64	; 0x40
 8108c0a:	d10e      	bne.n	8108c2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8108c0c:	687b      	ldr	r3, [r7, #4]
 8108c0e:	681b      	ldr	r3, [r3, #0]
 8108c10:	68db      	ldr	r3, [r3, #12]
 8108c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108c16:	2b40      	cmp	r3, #64	; 0x40
 8108c18:	d107      	bne.n	8108c2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8108c1a:	687b      	ldr	r3, [r7, #4]
 8108c1c:	681b      	ldr	r3, [r3, #0]
 8108c1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8108c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8108c24:	6878      	ldr	r0, [r7, #4]
 8108c26:	f000 fa45 	bl	81090b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8108c2a:	687b      	ldr	r3, [r7, #4]
 8108c2c:	681b      	ldr	r3, [r3, #0]
 8108c2e:	691b      	ldr	r3, [r3, #16]
 8108c30:	f003 0320 	and.w	r3, r3, #32
 8108c34:	2b20      	cmp	r3, #32
 8108c36:	d10e      	bne.n	8108c56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8108c38:	687b      	ldr	r3, [r7, #4]
 8108c3a:	681b      	ldr	r3, [r3, #0]
 8108c3c:	68db      	ldr	r3, [r3, #12]
 8108c3e:	f003 0320 	and.w	r3, r3, #32
 8108c42:	2b20      	cmp	r3, #32
 8108c44:	d107      	bne.n	8108c56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8108c46:	687b      	ldr	r3, [r7, #4]
 8108c48:	681b      	ldr	r3, [r3, #0]
 8108c4a:	f06f 0220 	mvn.w	r2, #32
 8108c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8108c50:	6878      	ldr	r0, [r7, #4]
 8108c52:	f000 ff77 	bl	8109b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8108c56:	bf00      	nop
 8108c58:	3708      	adds	r7, #8
 8108c5a:	46bd      	mov	sp, r7
 8108c5c:	bd80      	pop	{r7, pc}
	...

08108c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8108c60:	b580      	push	{r7, lr}
 8108c62:	b086      	sub	sp, #24
 8108c64:	af00      	add	r7, sp, #0
 8108c66:	60f8      	str	r0, [r7, #12]
 8108c68:	60b9      	str	r1, [r7, #8]
 8108c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8108c6c:	2300      	movs	r3, #0
 8108c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8108c70:	68fb      	ldr	r3, [r7, #12]
 8108c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8108c76:	2b01      	cmp	r3, #1
 8108c78:	d101      	bne.n	8108c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8108c7a:	2302      	movs	r3, #2
 8108c7c:	e0ff      	b.n	8108e7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8108c7e:	68fb      	ldr	r3, [r7, #12]
 8108c80:	2201      	movs	r2, #1
 8108c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8108c86:	687b      	ldr	r3, [r7, #4]
 8108c88:	2b14      	cmp	r3, #20
 8108c8a:	f200 80f0 	bhi.w	8108e6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8108c8e:	a201      	add	r2, pc, #4	; (adr r2, 8108c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8108c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c94:	08108ce9 	.word	0x08108ce9
 8108c98:	08108e6f 	.word	0x08108e6f
 8108c9c:	08108e6f 	.word	0x08108e6f
 8108ca0:	08108e6f 	.word	0x08108e6f
 8108ca4:	08108d29 	.word	0x08108d29
 8108ca8:	08108e6f 	.word	0x08108e6f
 8108cac:	08108e6f 	.word	0x08108e6f
 8108cb0:	08108e6f 	.word	0x08108e6f
 8108cb4:	08108d6b 	.word	0x08108d6b
 8108cb8:	08108e6f 	.word	0x08108e6f
 8108cbc:	08108e6f 	.word	0x08108e6f
 8108cc0:	08108e6f 	.word	0x08108e6f
 8108cc4:	08108dab 	.word	0x08108dab
 8108cc8:	08108e6f 	.word	0x08108e6f
 8108ccc:	08108e6f 	.word	0x08108e6f
 8108cd0:	08108e6f 	.word	0x08108e6f
 8108cd4:	08108ded 	.word	0x08108ded
 8108cd8:	08108e6f 	.word	0x08108e6f
 8108cdc:	08108e6f 	.word	0x08108e6f
 8108ce0:	08108e6f 	.word	0x08108e6f
 8108ce4:	08108e2d 	.word	0x08108e2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8108ce8:	68fb      	ldr	r3, [r7, #12]
 8108cea:	681b      	ldr	r3, [r3, #0]
 8108cec:	68b9      	ldr	r1, [r7, #8]
 8108cee:	4618      	mov	r0, r3
 8108cf0:	f000 fa84 	bl	81091fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8108cf4:	68fb      	ldr	r3, [r7, #12]
 8108cf6:	681b      	ldr	r3, [r3, #0]
 8108cf8:	699a      	ldr	r2, [r3, #24]
 8108cfa:	68fb      	ldr	r3, [r7, #12]
 8108cfc:	681b      	ldr	r3, [r3, #0]
 8108cfe:	f042 0208 	orr.w	r2, r2, #8
 8108d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8108d04:	68fb      	ldr	r3, [r7, #12]
 8108d06:	681b      	ldr	r3, [r3, #0]
 8108d08:	699a      	ldr	r2, [r3, #24]
 8108d0a:	68fb      	ldr	r3, [r7, #12]
 8108d0c:	681b      	ldr	r3, [r3, #0]
 8108d0e:	f022 0204 	bic.w	r2, r2, #4
 8108d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8108d14:	68fb      	ldr	r3, [r7, #12]
 8108d16:	681b      	ldr	r3, [r3, #0]
 8108d18:	6999      	ldr	r1, [r3, #24]
 8108d1a:	68bb      	ldr	r3, [r7, #8]
 8108d1c:	691a      	ldr	r2, [r3, #16]
 8108d1e:	68fb      	ldr	r3, [r7, #12]
 8108d20:	681b      	ldr	r3, [r3, #0]
 8108d22:	430a      	orrs	r2, r1
 8108d24:	619a      	str	r2, [r3, #24]
      break;
 8108d26:	e0a5      	b.n	8108e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8108d28:	68fb      	ldr	r3, [r7, #12]
 8108d2a:	681b      	ldr	r3, [r3, #0]
 8108d2c:	68b9      	ldr	r1, [r7, #8]
 8108d2e:	4618      	mov	r0, r3
 8108d30:	f000 faf4 	bl	810931c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8108d34:	68fb      	ldr	r3, [r7, #12]
 8108d36:	681b      	ldr	r3, [r3, #0]
 8108d38:	699a      	ldr	r2, [r3, #24]
 8108d3a:	68fb      	ldr	r3, [r7, #12]
 8108d3c:	681b      	ldr	r3, [r3, #0]
 8108d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8108d44:	68fb      	ldr	r3, [r7, #12]
 8108d46:	681b      	ldr	r3, [r3, #0]
 8108d48:	699a      	ldr	r2, [r3, #24]
 8108d4a:	68fb      	ldr	r3, [r7, #12]
 8108d4c:	681b      	ldr	r3, [r3, #0]
 8108d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8108d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8108d54:	68fb      	ldr	r3, [r7, #12]
 8108d56:	681b      	ldr	r3, [r3, #0]
 8108d58:	6999      	ldr	r1, [r3, #24]
 8108d5a:	68bb      	ldr	r3, [r7, #8]
 8108d5c:	691b      	ldr	r3, [r3, #16]
 8108d5e:	021a      	lsls	r2, r3, #8
 8108d60:	68fb      	ldr	r3, [r7, #12]
 8108d62:	681b      	ldr	r3, [r3, #0]
 8108d64:	430a      	orrs	r2, r1
 8108d66:	619a      	str	r2, [r3, #24]
      break;
 8108d68:	e084      	b.n	8108e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8108d6a:	68fb      	ldr	r3, [r7, #12]
 8108d6c:	681b      	ldr	r3, [r3, #0]
 8108d6e:	68b9      	ldr	r1, [r7, #8]
 8108d70:	4618      	mov	r0, r3
 8108d72:	f000 fb5d 	bl	8109430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8108d76:	68fb      	ldr	r3, [r7, #12]
 8108d78:	681b      	ldr	r3, [r3, #0]
 8108d7a:	69da      	ldr	r2, [r3, #28]
 8108d7c:	68fb      	ldr	r3, [r7, #12]
 8108d7e:	681b      	ldr	r3, [r3, #0]
 8108d80:	f042 0208 	orr.w	r2, r2, #8
 8108d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8108d86:	68fb      	ldr	r3, [r7, #12]
 8108d88:	681b      	ldr	r3, [r3, #0]
 8108d8a:	69da      	ldr	r2, [r3, #28]
 8108d8c:	68fb      	ldr	r3, [r7, #12]
 8108d8e:	681b      	ldr	r3, [r3, #0]
 8108d90:	f022 0204 	bic.w	r2, r2, #4
 8108d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8108d96:	68fb      	ldr	r3, [r7, #12]
 8108d98:	681b      	ldr	r3, [r3, #0]
 8108d9a:	69d9      	ldr	r1, [r3, #28]
 8108d9c:	68bb      	ldr	r3, [r7, #8]
 8108d9e:	691a      	ldr	r2, [r3, #16]
 8108da0:	68fb      	ldr	r3, [r7, #12]
 8108da2:	681b      	ldr	r3, [r3, #0]
 8108da4:	430a      	orrs	r2, r1
 8108da6:	61da      	str	r2, [r3, #28]
      break;
 8108da8:	e064      	b.n	8108e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8108daa:	68fb      	ldr	r3, [r7, #12]
 8108dac:	681b      	ldr	r3, [r3, #0]
 8108dae:	68b9      	ldr	r1, [r7, #8]
 8108db0:	4618      	mov	r0, r3
 8108db2:	f000 fbc5 	bl	8109540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8108db6:	68fb      	ldr	r3, [r7, #12]
 8108db8:	681b      	ldr	r3, [r3, #0]
 8108dba:	69da      	ldr	r2, [r3, #28]
 8108dbc:	68fb      	ldr	r3, [r7, #12]
 8108dbe:	681b      	ldr	r3, [r3, #0]
 8108dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8108dc6:	68fb      	ldr	r3, [r7, #12]
 8108dc8:	681b      	ldr	r3, [r3, #0]
 8108dca:	69da      	ldr	r2, [r3, #28]
 8108dcc:	68fb      	ldr	r3, [r7, #12]
 8108dce:	681b      	ldr	r3, [r3, #0]
 8108dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8108dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8108dd6:	68fb      	ldr	r3, [r7, #12]
 8108dd8:	681b      	ldr	r3, [r3, #0]
 8108dda:	69d9      	ldr	r1, [r3, #28]
 8108ddc:	68bb      	ldr	r3, [r7, #8]
 8108dde:	691b      	ldr	r3, [r3, #16]
 8108de0:	021a      	lsls	r2, r3, #8
 8108de2:	68fb      	ldr	r3, [r7, #12]
 8108de4:	681b      	ldr	r3, [r3, #0]
 8108de6:	430a      	orrs	r2, r1
 8108de8:	61da      	str	r2, [r3, #28]
      break;
 8108dea:	e043      	b.n	8108e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8108dec:	68fb      	ldr	r3, [r7, #12]
 8108dee:	681b      	ldr	r3, [r3, #0]
 8108df0:	68b9      	ldr	r1, [r7, #8]
 8108df2:	4618      	mov	r0, r3
 8108df4:	f000 fc0e 	bl	8109614 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8108df8:	68fb      	ldr	r3, [r7, #12]
 8108dfa:	681b      	ldr	r3, [r3, #0]
 8108dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108dfe:	68fb      	ldr	r3, [r7, #12]
 8108e00:	681b      	ldr	r3, [r3, #0]
 8108e02:	f042 0208 	orr.w	r2, r2, #8
 8108e06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8108e08:	68fb      	ldr	r3, [r7, #12]
 8108e0a:	681b      	ldr	r3, [r3, #0]
 8108e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108e0e:	68fb      	ldr	r3, [r7, #12]
 8108e10:	681b      	ldr	r3, [r3, #0]
 8108e12:	f022 0204 	bic.w	r2, r2, #4
 8108e16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8108e18:	68fb      	ldr	r3, [r7, #12]
 8108e1a:	681b      	ldr	r3, [r3, #0]
 8108e1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8108e1e:	68bb      	ldr	r3, [r7, #8]
 8108e20:	691a      	ldr	r2, [r3, #16]
 8108e22:	68fb      	ldr	r3, [r7, #12]
 8108e24:	681b      	ldr	r3, [r3, #0]
 8108e26:	430a      	orrs	r2, r1
 8108e28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8108e2a:	e023      	b.n	8108e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8108e2c:	68fb      	ldr	r3, [r7, #12]
 8108e2e:	681b      	ldr	r3, [r3, #0]
 8108e30:	68b9      	ldr	r1, [r7, #8]
 8108e32:	4618      	mov	r0, r3
 8108e34:	f000 fc52 	bl	81096dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8108e38:	68fb      	ldr	r3, [r7, #12]
 8108e3a:	681b      	ldr	r3, [r3, #0]
 8108e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108e3e:	68fb      	ldr	r3, [r7, #12]
 8108e40:	681b      	ldr	r3, [r3, #0]
 8108e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108e46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8108e48:	68fb      	ldr	r3, [r7, #12]
 8108e4a:	681b      	ldr	r3, [r3, #0]
 8108e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108e4e:	68fb      	ldr	r3, [r7, #12]
 8108e50:	681b      	ldr	r3, [r3, #0]
 8108e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8108e56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8108e58:	68fb      	ldr	r3, [r7, #12]
 8108e5a:	681b      	ldr	r3, [r3, #0]
 8108e5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8108e5e:	68bb      	ldr	r3, [r7, #8]
 8108e60:	691b      	ldr	r3, [r3, #16]
 8108e62:	021a      	lsls	r2, r3, #8
 8108e64:	68fb      	ldr	r3, [r7, #12]
 8108e66:	681b      	ldr	r3, [r3, #0]
 8108e68:	430a      	orrs	r2, r1
 8108e6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8108e6c:	e002      	b.n	8108e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8108e6e:	2301      	movs	r3, #1
 8108e70:	75fb      	strb	r3, [r7, #23]
      break;
 8108e72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8108e74:	68fb      	ldr	r3, [r7, #12]
 8108e76:	2200      	movs	r2, #0
 8108e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8108e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8108e7e:	4618      	mov	r0, r3
 8108e80:	3718      	adds	r7, #24
 8108e82:	46bd      	mov	sp, r7
 8108e84:	bd80      	pop	{r7, pc}
 8108e86:	bf00      	nop

08108e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8108e88:	b580      	push	{r7, lr}
 8108e8a:	b084      	sub	sp, #16
 8108e8c:	af00      	add	r7, sp, #0
 8108e8e:	6078      	str	r0, [r7, #4]
 8108e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8108e92:	2300      	movs	r3, #0
 8108e94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8108e96:	687b      	ldr	r3, [r7, #4]
 8108e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8108e9c:	2b01      	cmp	r3, #1
 8108e9e:	d101      	bne.n	8108ea4 <HAL_TIM_ConfigClockSource+0x1c>
 8108ea0:	2302      	movs	r3, #2
 8108ea2:	e0de      	b.n	8109062 <HAL_TIM_ConfigClockSource+0x1da>
 8108ea4:	687b      	ldr	r3, [r7, #4]
 8108ea6:	2201      	movs	r2, #1
 8108ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8108eac:	687b      	ldr	r3, [r7, #4]
 8108eae:	2202      	movs	r2, #2
 8108eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8108eb4:	687b      	ldr	r3, [r7, #4]
 8108eb6:	681b      	ldr	r3, [r3, #0]
 8108eb8:	689b      	ldr	r3, [r3, #8]
 8108eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8108ebc:	68bb      	ldr	r3, [r7, #8]
 8108ebe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8108ec2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8108ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8108ec8:	68bb      	ldr	r3, [r7, #8]
 8108eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8108ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8108ed0:	687b      	ldr	r3, [r7, #4]
 8108ed2:	681b      	ldr	r3, [r3, #0]
 8108ed4:	68ba      	ldr	r2, [r7, #8]
 8108ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8108ed8:	683b      	ldr	r3, [r7, #0]
 8108eda:	681b      	ldr	r3, [r3, #0]
 8108edc:	4a63      	ldr	r2, [pc, #396]	; (810906c <HAL_TIM_ConfigClockSource+0x1e4>)
 8108ede:	4293      	cmp	r3, r2
 8108ee0:	f000 80a9 	beq.w	8109036 <HAL_TIM_ConfigClockSource+0x1ae>
 8108ee4:	4a61      	ldr	r2, [pc, #388]	; (810906c <HAL_TIM_ConfigClockSource+0x1e4>)
 8108ee6:	4293      	cmp	r3, r2
 8108ee8:	f200 80ae 	bhi.w	8109048 <HAL_TIM_ConfigClockSource+0x1c0>
 8108eec:	4a60      	ldr	r2, [pc, #384]	; (8109070 <HAL_TIM_ConfigClockSource+0x1e8>)
 8108eee:	4293      	cmp	r3, r2
 8108ef0:	f000 80a1 	beq.w	8109036 <HAL_TIM_ConfigClockSource+0x1ae>
 8108ef4:	4a5e      	ldr	r2, [pc, #376]	; (8109070 <HAL_TIM_ConfigClockSource+0x1e8>)
 8108ef6:	4293      	cmp	r3, r2
 8108ef8:	f200 80a6 	bhi.w	8109048 <HAL_TIM_ConfigClockSource+0x1c0>
 8108efc:	4a5d      	ldr	r2, [pc, #372]	; (8109074 <HAL_TIM_ConfigClockSource+0x1ec>)
 8108efe:	4293      	cmp	r3, r2
 8108f00:	f000 8099 	beq.w	8109036 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f04:	4a5b      	ldr	r2, [pc, #364]	; (8109074 <HAL_TIM_ConfigClockSource+0x1ec>)
 8108f06:	4293      	cmp	r3, r2
 8108f08:	f200 809e 	bhi.w	8109048 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8108f10:	f000 8091 	beq.w	8109036 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8108f18:	f200 8096 	bhi.w	8109048 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108f20:	f000 8089 	beq.w	8109036 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108f28:	f200 808e 	bhi.w	8109048 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108f30:	d03e      	beq.n	8108fb0 <HAL_TIM_ConfigClockSource+0x128>
 8108f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108f36:	f200 8087 	bhi.w	8109048 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108f3e:	f000 8086 	beq.w	810904e <HAL_TIM_ConfigClockSource+0x1c6>
 8108f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108f46:	d87f      	bhi.n	8109048 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f48:	2b70      	cmp	r3, #112	; 0x70
 8108f4a:	d01a      	beq.n	8108f82 <HAL_TIM_ConfigClockSource+0xfa>
 8108f4c:	2b70      	cmp	r3, #112	; 0x70
 8108f4e:	d87b      	bhi.n	8109048 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f50:	2b60      	cmp	r3, #96	; 0x60
 8108f52:	d050      	beq.n	8108ff6 <HAL_TIM_ConfigClockSource+0x16e>
 8108f54:	2b60      	cmp	r3, #96	; 0x60
 8108f56:	d877      	bhi.n	8109048 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f58:	2b50      	cmp	r3, #80	; 0x50
 8108f5a:	d03c      	beq.n	8108fd6 <HAL_TIM_ConfigClockSource+0x14e>
 8108f5c:	2b50      	cmp	r3, #80	; 0x50
 8108f5e:	d873      	bhi.n	8109048 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f60:	2b40      	cmp	r3, #64	; 0x40
 8108f62:	d058      	beq.n	8109016 <HAL_TIM_ConfigClockSource+0x18e>
 8108f64:	2b40      	cmp	r3, #64	; 0x40
 8108f66:	d86f      	bhi.n	8109048 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f68:	2b30      	cmp	r3, #48	; 0x30
 8108f6a:	d064      	beq.n	8109036 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f6c:	2b30      	cmp	r3, #48	; 0x30
 8108f6e:	d86b      	bhi.n	8109048 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f70:	2b20      	cmp	r3, #32
 8108f72:	d060      	beq.n	8109036 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f74:	2b20      	cmp	r3, #32
 8108f76:	d867      	bhi.n	8109048 <HAL_TIM_ConfigClockSource+0x1c0>
 8108f78:	2b00      	cmp	r3, #0
 8108f7a:	d05c      	beq.n	8109036 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f7c:	2b10      	cmp	r3, #16
 8108f7e:	d05a      	beq.n	8109036 <HAL_TIM_ConfigClockSource+0x1ae>
 8108f80:	e062      	b.n	8109048 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8108f82:	687b      	ldr	r3, [r7, #4]
 8108f84:	6818      	ldr	r0, [r3, #0]
 8108f86:	683b      	ldr	r3, [r7, #0]
 8108f88:	6899      	ldr	r1, [r3, #8]
 8108f8a:	683b      	ldr	r3, [r7, #0]
 8108f8c:	685a      	ldr	r2, [r3, #4]
 8108f8e:	683b      	ldr	r3, [r7, #0]
 8108f90:	68db      	ldr	r3, [r3, #12]
 8108f92:	f000 fc85 	bl	81098a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8108f96:	687b      	ldr	r3, [r7, #4]
 8108f98:	681b      	ldr	r3, [r3, #0]
 8108f9a:	689b      	ldr	r3, [r3, #8]
 8108f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8108f9e:	68bb      	ldr	r3, [r7, #8]
 8108fa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8108fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8108fa6:	687b      	ldr	r3, [r7, #4]
 8108fa8:	681b      	ldr	r3, [r3, #0]
 8108faa:	68ba      	ldr	r2, [r7, #8]
 8108fac:	609a      	str	r2, [r3, #8]
      break;
 8108fae:	e04f      	b.n	8109050 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8108fb0:	687b      	ldr	r3, [r7, #4]
 8108fb2:	6818      	ldr	r0, [r3, #0]
 8108fb4:	683b      	ldr	r3, [r7, #0]
 8108fb6:	6899      	ldr	r1, [r3, #8]
 8108fb8:	683b      	ldr	r3, [r7, #0]
 8108fba:	685a      	ldr	r2, [r3, #4]
 8108fbc:	683b      	ldr	r3, [r7, #0]
 8108fbe:	68db      	ldr	r3, [r3, #12]
 8108fc0:	f000 fc6e 	bl	81098a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8108fc4:	687b      	ldr	r3, [r7, #4]
 8108fc6:	681b      	ldr	r3, [r3, #0]
 8108fc8:	689a      	ldr	r2, [r3, #8]
 8108fca:	687b      	ldr	r3, [r7, #4]
 8108fcc:	681b      	ldr	r3, [r3, #0]
 8108fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8108fd2:	609a      	str	r2, [r3, #8]
      break;
 8108fd4:	e03c      	b.n	8109050 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8108fd6:	687b      	ldr	r3, [r7, #4]
 8108fd8:	6818      	ldr	r0, [r3, #0]
 8108fda:	683b      	ldr	r3, [r7, #0]
 8108fdc:	6859      	ldr	r1, [r3, #4]
 8108fde:	683b      	ldr	r3, [r7, #0]
 8108fe0:	68db      	ldr	r3, [r3, #12]
 8108fe2:	461a      	mov	r2, r3
 8108fe4:	f000 fbe0 	bl	81097a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8108fe8:	687b      	ldr	r3, [r7, #4]
 8108fea:	681b      	ldr	r3, [r3, #0]
 8108fec:	2150      	movs	r1, #80	; 0x50
 8108fee:	4618      	mov	r0, r3
 8108ff0:	f000 fc39 	bl	8109866 <TIM_ITRx_SetConfig>
      break;
 8108ff4:	e02c      	b.n	8109050 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8108ff6:	687b      	ldr	r3, [r7, #4]
 8108ff8:	6818      	ldr	r0, [r3, #0]
 8108ffa:	683b      	ldr	r3, [r7, #0]
 8108ffc:	6859      	ldr	r1, [r3, #4]
 8108ffe:	683b      	ldr	r3, [r7, #0]
 8109000:	68db      	ldr	r3, [r3, #12]
 8109002:	461a      	mov	r2, r3
 8109004:	f000 fbff 	bl	8109806 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8109008:	687b      	ldr	r3, [r7, #4]
 810900a:	681b      	ldr	r3, [r3, #0]
 810900c:	2160      	movs	r1, #96	; 0x60
 810900e:	4618      	mov	r0, r3
 8109010:	f000 fc29 	bl	8109866 <TIM_ITRx_SetConfig>
      break;
 8109014:	e01c      	b.n	8109050 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8109016:	687b      	ldr	r3, [r7, #4]
 8109018:	6818      	ldr	r0, [r3, #0]
 810901a:	683b      	ldr	r3, [r7, #0]
 810901c:	6859      	ldr	r1, [r3, #4]
 810901e:	683b      	ldr	r3, [r7, #0]
 8109020:	68db      	ldr	r3, [r3, #12]
 8109022:	461a      	mov	r2, r3
 8109024:	f000 fbc0 	bl	81097a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8109028:	687b      	ldr	r3, [r7, #4]
 810902a:	681b      	ldr	r3, [r3, #0]
 810902c:	2140      	movs	r1, #64	; 0x40
 810902e:	4618      	mov	r0, r3
 8109030:	f000 fc19 	bl	8109866 <TIM_ITRx_SetConfig>
      break;
 8109034:	e00c      	b.n	8109050 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8109036:	687b      	ldr	r3, [r7, #4]
 8109038:	681a      	ldr	r2, [r3, #0]
 810903a:	683b      	ldr	r3, [r7, #0]
 810903c:	681b      	ldr	r3, [r3, #0]
 810903e:	4619      	mov	r1, r3
 8109040:	4610      	mov	r0, r2
 8109042:	f000 fc10 	bl	8109866 <TIM_ITRx_SetConfig>
      break;
 8109046:	e003      	b.n	8109050 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8109048:	2301      	movs	r3, #1
 810904a:	73fb      	strb	r3, [r7, #15]
      break;
 810904c:	e000      	b.n	8109050 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810904e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8109050:	687b      	ldr	r3, [r7, #4]
 8109052:	2201      	movs	r2, #1
 8109054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8109058:	687b      	ldr	r3, [r7, #4]
 810905a:	2200      	movs	r2, #0
 810905c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8109060:	7bfb      	ldrb	r3, [r7, #15]
}
 8109062:	4618      	mov	r0, r3
 8109064:	3710      	adds	r7, #16
 8109066:	46bd      	mov	sp, r7
 8109068:	bd80      	pop	{r7, pc}
 810906a:	bf00      	nop
 810906c:	00100040 	.word	0x00100040
 8109070:	00100030 	.word	0x00100030
 8109074:	00100020 	.word	0x00100020

08109078 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8109078:	b480      	push	{r7}
 810907a:	b083      	sub	sp, #12
 810907c:	af00      	add	r7, sp, #0
 810907e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8109080:	bf00      	nop
 8109082:	370c      	adds	r7, #12
 8109084:	46bd      	mov	sp, r7
 8109086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810908a:	4770      	bx	lr

0810908c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810908c:	b480      	push	{r7}
 810908e:	b083      	sub	sp, #12
 8109090:	af00      	add	r7, sp, #0
 8109092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8109094:	bf00      	nop
 8109096:	370c      	adds	r7, #12
 8109098:	46bd      	mov	sp, r7
 810909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810909e:	4770      	bx	lr

081090a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81090a0:	b480      	push	{r7}
 81090a2:	b083      	sub	sp, #12
 81090a4:	af00      	add	r7, sp, #0
 81090a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81090a8:	bf00      	nop
 81090aa:	370c      	adds	r7, #12
 81090ac:	46bd      	mov	sp, r7
 81090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090b2:	4770      	bx	lr

081090b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81090b4:	b480      	push	{r7}
 81090b6:	b083      	sub	sp, #12
 81090b8:	af00      	add	r7, sp, #0
 81090ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81090bc:	bf00      	nop
 81090be:	370c      	adds	r7, #12
 81090c0:	46bd      	mov	sp, r7
 81090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090c6:	4770      	bx	lr

081090c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81090c8:	b480      	push	{r7}
 81090ca:	b085      	sub	sp, #20
 81090cc:	af00      	add	r7, sp, #0
 81090ce:	6078      	str	r0, [r7, #4]
 81090d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81090d2:	687b      	ldr	r3, [r7, #4]
 81090d4:	681b      	ldr	r3, [r3, #0]
 81090d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	4a40      	ldr	r2, [pc, #256]	; (81091dc <TIM_Base_SetConfig+0x114>)
 81090dc:	4293      	cmp	r3, r2
 81090de:	d013      	beq.n	8109108 <TIM_Base_SetConfig+0x40>
 81090e0:	687b      	ldr	r3, [r7, #4]
 81090e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81090e6:	d00f      	beq.n	8109108 <TIM_Base_SetConfig+0x40>
 81090e8:	687b      	ldr	r3, [r7, #4]
 81090ea:	4a3d      	ldr	r2, [pc, #244]	; (81091e0 <TIM_Base_SetConfig+0x118>)
 81090ec:	4293      	cmp	r3, r2
 81090ee:	d00b      	beq.n	8109108 <TIM_Base_SetConfig+0x40>
 81090f0:	687b      	ldr	r3, [r7, #4]
 81090f2:	4a3c      	ldr	r2, [pc, #240]	; (81091e4 <TIM_Base_SetConfig+0x11c>)
 81090f4:	4293      	cmp	r3, r2
 81090f6:	d007      	beq.n	8109108 <TIM_Base_SetConfig+0x40>
 81090f8:	687b      	ldr	r3, [r7, #4]
 81090fa:	4a3b      	ldr	r2, [pc, #236]	; (81091e8 <TIM_Base_SetConfig+0x120>)
 81090fc:	4293      	cmp	r3, r2
 81090fe:	d003      	beq.n	8109108 <TIM_Base_SetConfig+0x40>
 8109100:	687b      	ldr	r3, [r7, #4]
 8109102:	4a3a      	ldr	r2, [pc, #232]	; (81091ec <TIM_Base_SetConfig+0x124>)
 8109104:	4293      	cmp	r3, r2
 8109106:	d108      	bne.n	810911a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8109108:	68fb      	ldr	r3, [r7, #12]
 810910a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810910e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8109110:	683b      	ldr	r3, [r7, #0]
 8109112:	685b      	ldr	r3, [r3, #4]
 8109114:	68fa      	ldr	r2, [r7, #12]
 8109116:	4313      	orrs	r3, r2
 8109118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810911a:	687b      	ldr	r3, [r7, #4]
 810911c:	4a2f      	ldr	r2, [pc, #188]	; (81091dc <TIM_Base_SetConfig+0x114>)
 810911e:	4293      	cmp	r3, r2
 8109120:	d01f      	beq.n	8109162 <TIM_Base_SetConfig+0x9a>
 8109122:	687b      	ldr	r3, [r7, #4]
 8109124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109128:	d01b      	beq.n	8109162 <TIM_Base_SetConfig+0x9a>
 810912a:	687b      	ldr	r3, [r7, #4]
 810912c:	4a2c      	ldr	r2, [pc, #176]	; (81091e0 <TIM_Base_SetConfig+0x118>)
 810912e:	4293      	cmp	r3, r2
 8109130:	d017      	beq.n	8109162 <TIM_Base_SetConfig+0x9a>
 8109132:	687b      	ldr	r3, [r7, #4]
 8109134:	4a2b      	ldr	r2, [pc, #172]	; (81091e4 <TIM_Base_SetConfig+0x11c>)
 8109136:	4293      	cmp	r3, r2
 8109138:	d013      	beq.n	8109162 <TIM_Base_SetConfig+0x9a>
 810913a:	687b      	ldr	r3, [r7, #4]
 810913c:	4a2a      	ldr	r2, [pc, #168]	; (81091e8 <TIM_Base_SetConfig+0x120>)
 810913e:	4293      	cmp	r3, r2
 8109140:	d00f      	beq.n	8109162 <TIM_Base_SetConfig+0x9a>
 8109142:	687b      	ldr	r3, [r7, #4]
 8109144:	4a29      	ldr	r2, [pc, #164]	; (81091ec <TIM_Base_SetConfig+0x124>)
 8109146:	4293      	cmp	r3, r2
 8109148:	d00b      	beq.n	8109162 <TIM_Base_SetConfig+0x9a>
 810914a:	687b      	ldr	r3, [r7, #4]
 810914c:	4a28      	ldr	r2, [pc, #160]	; (81091f0 <TIM_Base_SetConfig+0x128>)
 810914e:	4293      	cmp	r3, r2
 8109150:	d007      	beq.n	8109162 <TIM_Base_SetConfig+0x9a>
 8109152:	687b      	ldr	r3, [r7, #4]
 8109154:	4a27      	ldr	r2, [pc, #156]	; (81091f4 <TIM_Base_SetConfig+0x12c>)
 8109156:	4293      	cmp	r3, r2
 8109158:	d003      	beq.n	8109162 <TIM_Base_SetConfig+0x9a>
 810915a:	687b      	ldr	r3, [r7, #4]
 810915c:	4a26      	ldr	r2, [pc, #152]	; (81091f8 <TIM_Base_SetConfig+0x130>)
 810915e:	4293      	cmp	r3, r2
 8109160:	d108      	bne.n	8109174 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8109162:	68fb      	ldr	r3, [r7, #12]
 8109164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8109168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810916a:	683b      	ldr	r3, [r7, #0]
 810916c:	68db      	ldr	r3, [r3, #12]
 810916e:	68fa      	ldr	r2, [r7, #12]
 8109170:	4313      	orrs	r3, r2
 8109172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8109174:	68fb      	ldr	r3, [r7, #12]
 8109176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810917a:	683b      	ldr	r3, [r7, #0]
 810917c:	695b      	ldr	r3, [r3, #20]
 810917e:	4313      	orrs	r3, r2
 8109180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8109182:	687b      	ldr	r3, [r7, #4]
 8109184:	68fa      	ldr	r2, [r7, #12]
 8109186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8109188:	683b      	ldr	r3, [r7, #0]
 810918a:	689a      	ldr	r2, [r3, #8]
 810918c:	687b      	ldr	r3, [r7, #4]
 810918e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8109190:	683b      	ldr	r3, [r7, #0]
 8109192:	681a      	ldr	r2, [r3, #0]
 8109194:	687b      	ldr	r3, [r7, #4]
 8109196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8109198:	687b      	ldr	r3, [r7, #4]
 810919a:	4a10      	ldr	r2, [pc, #64]	; (81091dc <TIM_Base_SetConfig+0x114>)
 810919c:	4293      	cmp	r3, r2
 810919e:	d00f      	beq.n	81091c0 <TIM_Base_SetConfig+0xf8>
 81091a0:	687b      	ldr	r3, [r7, #4]
 81091a2:	4a12      	ldr	r2, [pc, #72]	; (81091ec <TIM_Base_SetConfig+0x124>)
 81091a4:	4293      	cmp	r3, r2
 81091a6:	d00b      	beq.n	81091c0 <TIM_Base_SetConfig+0xf8>
 81091a8:	687b      	ldr	r3, [r7, #4]
 81091aa:	4a11      	ldr	r2, [pc, #68]	; (81091f0 <TIM_Base_SetConfig+0x128>)
 81091ac:	4293      	cmp	r3, r2
 81091ae:	d007      	beq.n	81091c0 <TIM_Base_SetConfig+0xf8>
 81091b0:	687b      	ldr	r3, [r7, #4]
 81091b2:	4a10      	ldr	r2, [pc, #64]	; (81091f4 <TIM_Base_SetConfig+0x12c>)
 81091b4:	4293      	cmp	r3, r2
 81091b6:	d003      	beq.n	81091c0 <TIM_Base_SetConfig+0xf8>
 81091b8:	687b      	ldr	r3, [r7, #4]
 81091ba:	4a0f      	ldr	r2, [pc, #60]	; (81091f8 <TIM_Base_SetConfig+0x130>)
 81091bc:	4293      	cmp	r3, r2
 81091be:	d103      	bne.n	81091c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81091c0:	683b      	ldr	r3, [r7, #0]
 81091c2:	691a      	ldr	r2, [r3, #16]
 81091c4:	687b      	ldr	r3, [r7, #4]
 81091c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81091c8:	687b      	ldr	r3, [r7, #4]
 81091ca:	2201      	movs	r2, #1
 81091cc:	615a      	str	r2, [r3, #20]
}
 81091ce:	bf00      	nop
 81091d0:	3714      	adds	r7, #20
 81091d2:	46bd      	mov	sp, r7
 81091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091d8:	4770      	bx	lr
 81091da:	bf00      	nop
 81091dc:	40010000 	.word	0x40010000
 81091e0:	40000400 	.word	0x40000400
 81091e4:	40000800 	.word	0x40000800
 81091e8:	40000c00 	.word	0x40000c00
 81091ec:	40010400 	.word	0x40010400
 81091f0:	40014000 	.word	0x40014000
 81091f4:	40014400 	.word	0x40014400
 81091f8:	40014800 	.word	0x40014800

081091fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81091fc:	b480      	push	{r7}
 81091fe:	b087      	sub	sp, #28
 8109200:	af00      	add	r7, sp, #0
 8109202:	6078      	str	r0, [r7, #4]
 8109204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8109206:	687b      	ldr	r3, [r7, #4]
 8109208:	6a1b      	ldr	r3, [r3, #32]
 810920a:	f023 0201 	bic.w	r2, r3, #1
 810920e:	687b      	ldr	r3, [r7, #4]
 8109210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109212:	687b      	ldr	r3, [r7, #4]
 8109214:	6a1b      	ldr	r3, [r3, #32]
 8109216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109218:	687b      	ldr	r3, [r7, #4]
 810921a:	685b      	ldr	r3, [r3, #4]
 810921c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810921e:	687b      	ldr	r3, [r7, #4]
 8109220:	699b      	ldr	r3, [r3, #24]
 8109222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8109224:	68fb      	ldr	r3, [r7, #12]
 8109226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810922a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810922e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8109230:	68fb      	ldr	r3, [r7, #12]
 8109232:	f023 0303 	bic.w	r3, r3, #3
 8109236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8109238:	683b      	ldr	r3, [r7, #0]
 810923a:	681b      	ldr	r3, [r3, #0]
 810923c:	68fa      	ldr	r2, [r7, #12]
 810923e:	4313      	orrs	r3, r2
 8109240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8109242:	697b      	ldr	r3, [r7, #20]
 8109244:	f023 0302 	bic.w	r3, r3, #2
 8109248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810924a:	683b      	ldr	r3, [r7, #0]
 810924c:	689b      	ldr	r3, [r3, #8]
 810924e:	697a      	ldr	r2, [r7, #20]
 8109250:	4313      	orrs	r3, r2
 8109252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8109254:	687b      	ldr	r3, [r7, #4]
 8109256:	4a2c      	ldr	r2, [pc, #176]	; (8109308 <TIM_OC1_SetConfig+0x10c>)
 8109258:	4293      	cmp	r3, r2
 810925a:	d00f      	beq.n	810927c <TIM_OC1_SetConfig+0x80>
 810925c:	687b      	ldr	r3, [r7, #4]
 810925e:	4a2b      	ldr	r2, [pc, #172]	; (810930c <TIM_OC1_SetConfig+0x110>)
 8109260:	4293      	cmp	r3, r2
 8109262:	d00b      	beq.n	810927c <TIM_OC1_SetConfig+0x80>
 8109264:	687b      	ldr	r3, [r7, #4]
 8109266:	4a2a      	ldr	r2, [pc, #168]	; (8109310 <TIM_OC1_SetConfig+0x114>)
 8109268:	4293      	cmp	r3, r2
 810926a:	d007      	beq.n	810927c <TIM_OC1_SetConfig+0x80>
 810926c:	687b      	ldr	r3, [r7, #4]
 810926e:	4a29      	ldr	r2, [pc, #164]	; (8109314 <TIM_OC1_SetConfig+0x118>)
 8109270:	4293      	cmp	r3, r2
 8109272:	d003      	beq.n	810927c <TIM_OC1_SetConfig+0x80>
 8109274:	687b      	ldr	r3, [r7, #4]
 8109276:	4a28      	ldr	r2, [pc, #160]	; (8109318 <TIM_OC1_SetConfig+0x11c>)
 8109278:	4293      	cmp	r3, r2
 810927a:	d10c      	bne.n	8109296 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810927c:	697b      	ldr	r3, [r7, #20]
 810927e:	f023 0308 	bic.w	r3, r3, #8
 8109282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8109284:	683b      	ldr	r3, [r7, #0]
 8109286:	68db      	ldr	r3, [r3, #12]
 8109288:	697a      	ldr	r2, [r7, #20]
 810928a:	4313      	orrs	r3, r2
 810928c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810928e:	697b      	ldr	r3, [r7, #20]
 8109290:	f023 0304 	bic.w	r3, r3, #4
 8109294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109296:	687b      	ldr	r3, [r7, #4]
 8109298:	4a1b      	ldr	r2, [pc, #108]	; (8109308 <TIM_OC1_SetConfig+0x10c>)
 810929a:	4293      	cmp	r3, r2
 810929c:	d00f      	beq.n	81092be <TIM_OC1_SetConfig+0xc2>
 810929e:	687b      	ldr	r3, [r7, #4]
 81092a0:	4a1a      	ldr	r2, [pc, #104]	; (810930c <TIM_OC1_SetConfig+0x110>)
 81092a2:	4293      	cmp	r3, r2
 81092a4:	d00b      	beq.n	81092be <TIM_OC1_SetConfig+0xc2>
 81092a6:	687b      	ldr	r3, [r7, #4]
 81092a8:	4a19      	ldr	r2, [pc, #100]	; (8109310 <TIM_OC1_SetConfig+0x114>)
 81092aa:	4293      	cmp	r3, r2
 81092ac:	d007      	beq.n	81092be <TIM_OC1_SetConfig+0xc2>
 81092ae:	687b      	ldr	r3, [r7, #4]
 81092b0:	4a18      	ldr	r2, [pc, #96]	; (8109314 <TIM_OC1_SetConfig+0x118>)
 81092b2:	4293      	cmp	r3, r2
 81092b4:	d003      	beq.n	81092be <TIM_OC1_SetConfig+0xc2>
 81092b6:	687b      	ldr	r3, [r7, #4]
 81092b8:	4a17      	ldr	r2, [pc, #92]	; (8109318 <TIM_OC1_SetConfig+0x11c>)
 81092ba:	4293      	cmp	r3, r2
 81092bc:	d111      	bne.n	81092e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 81092be:	693b      	ldr	r3, [r7, #16]
 81092c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81092c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81092c6:	693b      	ldr	r3, [r7, #16]
 81092c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81092cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81092ce:	683b      	ldr	r3, [r7, #0]
 81092d0:	695b      	ldr	r3, [r3, #20]
 81092d2:	693a      	ldr	r2, [r7, #16]
 81092d4:	4313      	orrs	r3, r2
 81092d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81092d8:	683b      	ldr	r3, [r7, #0]
 81092da:	699b      	ldr	r3, [r3, #24]
 81092dc:	693a      	ldr	r2, [r7, #16]
 81092de:	4313      	orrs	r3, r2
 81092e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81092e2:	687b      	ldr	r3, [r7, #4]
 81092e4:	693a      	ldr	r2, [r7, #16]
 81092e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81092e8:	687b      	ldr	r3, [r7, #4]
 81092ea:	68fa      	ldr	r2, [r7, #12]
 81092ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81092ee:	683b      	ldr	r3, [r7, #0]
 81092f0:	685a      	ldr	r2, [r3, #4]
 81092f2:	687b      	ldr	r3, [r7, #4]
 81092f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81092f6:	687b      	ldr	r3, [r7, #4]
 81092f8:	697a      	ldr	r2, [r7, #20]
 81092fa:	621a      	str	r2, [r3, #32]
}
 81092fc:	bf00      	nop
 81092fe:	371c      	adds	r7, #28
 8109300:	46bd      	mov	sp, r7
 8109302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109306:	4770      	bx	lr
 8109308:	40010000 	.word	0x40010000
 810930c:	40010400 	.word	0x40010400
 8109310:	40014000 	.word	0x40014000
 8109314:	40014400 	.word	0x40014400
 8109318:	40014800 	.word	0x40014800

0810931c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810931c:	b480      	push	{r7}
 810931e:	b087      	sub	sp, #28
 8109320:	af00      	add	r7, sp, #0
 8109322:	6078      	str	r0, [r7, #4]
 8109324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8109326:	687b      	ldr	r3, [r7, #4]
 8109328:	6a1b      	ldr	r3, [r3, #32]
 810932a:	f023 0210 	bic.w	r2, r3, #16
 810932e:	687b      	ldr	r3, [r7, #4]
 8109330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109332:	687b      	ldr	r3, [r7, #4]
 8109334:	6a1b      	ldr	r3, [r3, #32]
 8109336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109338:	687b      	ldr	r3, [r7, #4]
 810933a:	685b      	ldr	r3, [r3, #4]
 810933c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810933e:	687b      	ldr	r3, [r7, #4]
 8109340:	699b      	ldr	r3, [r3, #24]
 8109342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8109344:	68fb      	ldr	r3, [r7, #12]
 8109346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810934a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810934e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8109350:	68fb      	ldr	r3, [r7, #12]
 8109352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8109356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8109358:	683b      	ldr	r3, [r7, #0]
 810935a:	681b      	ldr	r3, [r3, #0]
 810935c:	021b      	lsls	r3, r3, #8
 810935e:	68fa      	ldr	r2, [r7, #12]
 8109360:	4313      	orrs	r3, r2
 8109362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8109364:	697b      	ldr	r3, [r7, #20]
 8109366:	f023 0320 	bic.w	r3, r3, #32
 810936a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810936c:	683b      	ldr	r3, [r7, #0]
 810936e:	689b      	ldr	r3, [r3, #8]
 8109370:	011b      	lsls	r3, r3, #4
 8109372:	697a      	ldr	r2, [r7, #20]
 8109374:	4313      	orrs	r3, r2
 8109376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8109378:	687b      	ldr	r3, [r7, #4]
 810937a:	4a28      	ldr	r2, [pc, #160]	; (810941c <TIM_OC2_SetConfig+0x100>)
 810937c:	4293      	cmp	r3, r2
 810937e:	d003      	beq.n	8109388 <TIM_OC2_SetConfig+0x6c>
 8109380:	687b      	ldr	r3, [r7, #4]
 8109382:	4a27      	ldr	r2, [pc, #156]	; (8109420 <TIM_OC2_SetConfig+0x104>)
 8109384:	4293      	cmp	r3, r2
 8109386:	d10d      	bne.n	81093a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8109388:	697b      	ldr	r3, [r7, #20]
 810938a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810938e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8109390:	683b      	ldr	r3, [r7, #0]
 8109392:	68db      	ldr	r3, [r3, #12]
 8109394:	011b      	lsls	r3, r3, #4
 8109396:	697a      	ldr	r2, [r7, #20]
 8109398:	4313      	orrs	r3, r2
 810939a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810939c:	697b      	ldr	r3, [r7, #20]
 810939e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81093a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81093a4:	687b      	ldr	r3, [r7, #4]
 81093a6:	4a1d      	ldr	r2, [pc, #116]	; (810941c <TIM_OC2_SetConfig+0x100>)
 81093a8:	4293      	cmp	r3, r2
 81093aa:	d00f      	beq.n	81093cc <TIM_OC2_SetConfig+0xb0>
 81093ac:	687b      	ldr	r3, [r7, #4]
 81093ae:	4a1c      	ldr	r2, [pc, #112]	; (8109420 <TIM_OC2_SetConfig+0x104>)
 81093b0:	4293      	cmp	r3, r2
 81093b2:	d00b      	beq.n	81093cc <TIM_OC2_SetConfig+0xb0>
 81093b4:	687b      	ldr	r3, [r7, #4]
 81093b6:	4a1b      	ldr	r2, [pc, #108]	; (8109424 <TIM_OC2_SetConfig+0x108>)
 81093b8:	4293      	cmp	r3, r2
 81093ba:	d007      	beq.n	81093cc <TIM_OC2_SetConfig+0xb0>
 81093bc:	687b      	ldr	r3, [r7, #4]
 81093be:	4a1a      	ldr	r2, [pc, #104]	; (8109428 <TIM_OC2_SetConfig+0x10c>)
 81093c0:	4293      	cmp	r3, r2
 81093c2:	d003      	beq.n	81093cc <TIM_OC2_SetConfig+0xb0>
 81093c4:	687b      	ldr	r3, [r7, #4]
 81093c6:	4a19      	ldr	r2, [pc, #100]	; (810942c <TIM_OC2_SetConfig+0x110>)
 81093c8:	4293      	cmp	r3, r2
 81093ca:	d113      	bne.n	81093f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81093cc:	693b      	ldr	r3, [r7, #16]
 81093ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81093d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81093d4:	693b      	ldr	r3, [r7, #16]
 81093d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81093da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81093dc:	683b      	ldr	r3, [r7, #0]
 81093de:	695b      	ldr	r3, [r3, #20]
 81093e0:	009b      	lsls	r3, r3, #2
 81093e2:	693a      	ldr	r2, [r7, #16]
 81093e4:	4313      	orrs	r3, r2
 81093e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 81093e8:	683b      	ldr	r3, [r7, #0]
 81093ea:	699b      	ldr	r3, [r3, #24]
 81093ec:	009b      	lsls	r3, r3, #2
 81093ee:	693a      	ldr	r2, [r7, #16]
 81093f0:	4313      	orrs	r3, r2
 81093f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81093f4:	687b      	ldr	r3, [r7, #4]
 81093f6:	693a      	ldr	r2, [r7, #16]
 81093f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81093fa:	687b      	ldr	r3, [r7, #4]
 81093fc:	68fa      	ldr	r2, [r7, #12]
 81093fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8109400:	683b      	ldr	r3, [r7, #0]
 8109402:	685a      	ldr	r2, [r3, #4]
 8109404:	687b      	ldr	r3, [r7, #4]
 8109406:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109408:	687b      	ldr	r3, [r7, #4]
 810940a:	697a      	ldr	r2, [r7, #20]
 810940c:	621a      	str	r2, [r3, #32]
}
 810940e:	bf00      	nop
 8109410:	371c      	adds	r7, #28
 8109412:	46bd      	mov	sp, r7
 8109414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109418:	4770      	bx	lr
 810941a:	bf00      	nop
 810941c:	40010000 	.word	0x40010000
 8109420:	40010400 	.word	0x40010400
 8109424:	40014000 	.word	0x40014000
 8109428:	40014400 	.word	0x40014400
 810942c:	40014800 	.word	0x40014800

08109430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109430:	b480      	push	{r7}
 8109432:	b087      	sub	sp, #28
 8109434:	af00      	add	r7, sp, #0
 8109436:	6078      	str	r0, [r7, #4]
 8109438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810943a:	687b      	ldr	r3, [r7, #4]
 810943c:	6a1b      	ldr	r3, [r3, #32]
 810943e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8109442:	687b      	ldr	r3, [r7, #4]
 8109444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109446:	687b      	ldr	r3, [r7, #4]
 8109448:	6a1b      	ldr	r3, [r3, #32]
 810944a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810944c:	687b      	ldr	r3, [r7, #4]
 810944e:	685b      	ldr	r3, [r3, #4]
 8109450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8109452:	687b      	ldr	r3, [r7, #4]
 8109454:	69db      	ldr	r3, [r3, #28]
 8109456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8109458:	68fb      	ldr	r3, [r7, #12]
 810945a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810945e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8109464:	68fb      	ldr	r3, [r7, #12]
 8109466:	f023 0303 	bic.w	r3, r3, #3
 810946a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810946c:	683b      	ldr	r3, [r7, #0]
 810946e:	681b      	ldr	r3, [r3, #0]
 8109470:	68fa      	ldr	r2, [r7, #12]
 8109472:	4313      	orrs	r3, r2
 8109474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8109476:	697b      	ldr	r3, [r7, #20]
 8109478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810947c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810947e:	683b      	ldr	r3, [r7, #0]
 8109480:	689b      	ldr	r3, [r3, #8]
 8109482:	021b      	lsls	r3, r3, #8
 8109484:	697a      	ldr	r2, [r7, #20]
 8109486:	4313      	orrs	r3, r2
 8109488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810948a:	687b      	ldr	r3, [r7, #4]
 810948c:	4a27      	ldr	r2, [pc, #156]	; (810952c <TIM_OC3_SetConfig+0xfc>)
 810948e:	4293      	cmp	r3, r2
 8109490:	d003      	beq.n	810949a <TIM_OC3_SetConfig+0x6a>
 8109492:	687b      	ldr	r3, [r7, #4]
 8109494:	4a26      	ldr	r2, [pc, #152]	; (8109530 <TIM_OC3_SetConfig+0x100>)
 8109496:	4293      	cmp	r3, r2
 8109498:	d10d      	bne.n	81094b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810949a:	697b      	ldr	r3, [r7, #20]
 810949c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81094a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81094a2:	683b      	ldr	r3, [r7, #0]
 81094a4:	68db      	ldr	r3, [r3, #12]
 81094a6:	021b      	lsls	r3, r3, #8
 81094a8:	697a      	ldr	r2, [r7, #20]
 81094aa:	4313      	orrs	r3, r2
 81094ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 81094ae:	697b      	ldr	r3, [r7, #20]
 81094b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81094b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81094b6:	687b      	ldr	r3, [r7, #4]
 81094b8:	4a1c      	ldr	r2, [pc, #112]	; (810952c <TIM_OC3_SetConfig+0xfc>)
 81094ba:	4293      	cmp	r3, r2
 81094bc:	d00f      	beq.n	81094de <TIM_OC3_SetConfig+0xae>
 81094be:	687b      	ldr	r3, [r7, #4]
 81094c0:	4a1b      	ldr	r2, [pc, #108]	; (8109530 <TIM_OC3_SetConfig+0x100>)
 81094c2:	4293      	cmp	r3, r2
 81094c4:	d00b      	beq.n	81094de <TIM_OC3_SetConfig+0xae>
 81094c6:	687b      	ldr	r3, [r7, #4]
 81094c8:	4a1a      	ldr	r2, [pc, #104]	; (8109534 <TIM_OC3_SetConfig+0x104>)
 81094ca:	4293      	cmp	r3, r2
 81094cc:	d007      	beq.n	81094de <TIM_OC3_SetConfig+0xae>
 81094ce:	687b      	ldr	r3, [r7, #4]
 81094d0:	4a19      	ldr	r2, [pc, #100]	; (8109538 <TIM_OC3_SetConfig+0x108>)
 81094d2:	4293      	cmp	r3, r2
 81094d4:	d003      	beq.n	81094de <TIM_OC3_SetConfig+0xae>
 81094d6:	687b      	ldr	r3, [r7, #4]
 81094d8:	4a18      	ldr	r2, [pc, #96]	; (810953c <TIM_OC3_SetConfig+0x10c>)
 81094da:	4293      	cmp	r3, r2
 81094dc:	d113      	bne.n	8109506 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81094de:	693b      	ldr	r3, [r7, #16]
 81094e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81094e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81094e6:	693b      	ldr	r3, [r7, #16]
 81094e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81094ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81094ee:	683b      	ldr	r3, [r7, #0]
 81094f0:	695b      	ldr	r3, [r3, #20]
 81094f2:	011b      	lsls	r3, r3, #4
 81094f4:	693a      	ldr	r2, [r7, #16]
 81094f6:	4313      	orrs	r3, r2
 81094f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81094fa:	683b      	ldr	r3, [r7, #0]
 81094fc:	699b      	ldr	r3, [r3, #24]
 81094fe:	011b      	lsls	r3, r3, #4
 8109500:	693a      	ldr	r2, [r7, #16]
 8109502:	4313      	orrs	r3, r2
 8109504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8109506:	687b      	ldr	r3, [r7, #4]
 8109508:	693a      	ldr	r2, [r7, #16]
 810950a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810950c:	687b      	ldr	r3, [r7, #4]
 810950e:	68fa      	ldr	r2, [r7, #12]
 8109510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8109512:	683b      	ldr	r3, [r7, #0]
 8109514:	685a      	ldr	r2, [r3, #4]
 8109516:	687b      	ldr	r3, [r7, #4]
 8109518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810951a:	687b      	ldr	r3, [r7, #4]
 810951c:	697a      	ldr	r2, [r7, #20]
 810951e:	621a      	str	r2, [r3, #32]
}
 8109520:	bf00      	nop
 8109522:	371c      	adds	r7, #28
 8109524:	46bd      	mov	sp, r7
 8109526:	f85d 7b04 	ldr.w	r7, [sp], #4
 810952a:	4770      	bx	lr
 810952c:	40010000 	.word	0x40010000
 8109530:	40010400 	.word	0x40010400
 8109534:	40014000 	.word	0x40014000
 8109538:	40014400 	.word	0x40014400
 810953c:	40014800 	.word	0x40014800

08109540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109540:	b480      	push	{r7}
 8109542:	b087      	sub	sp, #28
 8109544:	af00      	add	r7, sp, #0
 8109546:	6078      	str	r0, [r7, #4]
 8109548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810954a:	687b      	ldr	r3, [r7, #4]
 810954c:	6a1b      	ldr	r3, [r3, #32]
 810954e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8109552:	687b      	ldr	r3, [r7, #4]
 8109554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109556:	687b      	ldr	r3, [r7, #4]
 8109558:	6a1b      	ldr	r3, [r3, #32]
 810955a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810955c:	687b      	ldr	r3, [r7, #4]
 810955e:	685b      	ldr	r3, [r3, #4]
 8109560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8109562:	687b      	ldr	r3, [r7, #4]
 8109564:	69db      	ldr	r3, [r3, #28]
 8109566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8109568:	68fb      	ldr	r3, [r7, #12]
 810956a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810956e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8109572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8109574:	68fb      	ldr	r3, [r7, #12]
 8109576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810957a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810957c:	683b      	ldr	r3, [r7, #0]
 810957e:	681b      	ldr	r3, [r3, #0]
 8109580:	021b      	lsls	r3, r3, #8
 8109582:	68fa      	ldr	r2, [r7, #12]
 8109584:	4313      	orrs	r3, r2
 8109586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8109588:	693b      	ldr	r3, [r7, #16]
 810958a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810958e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8109590:	683b      	ldr	r3, [r7, #0]
 8109592:	689b      	ldr	r3, [r3, #8]
 8109594:	031b      	lsls	r3, r3, #12
 8109596:	693a      	ldr	r2, [r7, #16]
 8109598:	4313      	orrs	r3, r2
 810959a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810959c:	687b      	ldr	r3, [r7, #4]
 810959e:	4a18      	ldr	r2, [pc, #96]	; (8109600 <TIM_OC4_SetConfig+0xc0>)
 81095a0:	4293      	cmp	r3, r2
 81095a2:	d00f      	beq.n	81095c4 <TIM_OC4_SetConfig+0x84>
 81095a4:	687b      	ldr	r3, [r7, #4]
 81095a6:	4a17      	ldr	r2, [pc, #92]	; (8109604 <TIM_OC4_SetConfig+0xc4>)
 81095a8:	4293      	cmp	r3, r2
 81095aa:	d00b      	beq.n	81095c4 <TIM_OC4_SetConfig+0x84>
 81095ac:	687b      	ldr	r3, [r7, #4]
 81095ae:	4a16      	ldr	r2, [pc, #88]	; (8109608 <TIM_OC4_SetConfig+0xc8>)
 81095b0:	4293      	cmp	r3, r2
 81095b2:	d007      	beq.n	81095c4 <TIM_OC4_SetConfig+0x84>
 81095b4:	687b      	ldr	r3, [r7, #4]
 81095b6:	4a15      	ldr	r2, [pc, #84]	; (810960c <TIM_OC4_SetConfig+0xcc>)
 81095b8:	4293      	cmp	r3, r2
 81095ba:	d003      	beq.n	81095c4 <TIM_OC4_SetConfig+0x84>
 81095bc:	687b      	ldr	r3, [r7, #4]
 81095be:	4a14      	ldr	r2, [pc, #80]	; (8109610 <TIM_OC4_SetConfig+0xd0>)
 81095c0:	4293      	cmp	r3, r2
 81095c2:	d109      	bne.n	81095d8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81095c4:	697b      	ldr	r3, [r7, #20]
 81095c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81095ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81095cc:	683b      	ldr	r3, [r7, #0]
 81095ce:	695b      	ldr	r3, [r3, #20]
 81095d0:	019b      	lsls	r3, r3, #6
 81095d2:	697a      	ldr	r2, [r7, #20]
 81095d4:	4313      	orrs	r3, r2
 81095d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81095d8:	687b      	ldr	r3, [r7, #4]
 81095da:	697a      	ldr	r2, [r7, #20]
 81095dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81095de:	687b      	ldr	r3, [r7, #4]
 81095e0:	68fa      	ldr	r2, [r7, #12]
 81095e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81095e4:	683b      	ldr	r3, [r7, #0]
 81095e6:	685a      	ldr	r2, [r3, #4]
 81095e8:	687b      	ldr	r3, [r7, #4]
 81095ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81095ec:	687b      	ldr	r3, [r7, #4]
 81095ee:	693a      	ldr	r2, [r7, #16]
 81095f0:	621a      	str	r2, [r3, #32]
}
 81095f2:	bf00      	nop
 81095f4:	371c      	adds	r7, #28
 81095f6:	46bd      	mov	sp, r7
 81095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81095fc:	4770      	bx	lr
 81095fe:	bf00      	nop
 8109600:	40010000 	.word	0x40010000
 8109604:	40010400 	.word	0x40010400
 8109608:	40014000 	.word	0x40014000
 810960c:	40014400 	.word	0x40014400
 8109610:	40014800 	.word	0x40014800

08109614 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8109614:	b480      	push	{r7}
 8109616:	b087      	sub	sp, #28
 8109618:	af00      	add	r7, sp, #0
 810961a:	6078      	str	r0, [r7, #4]
 810961c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810961e:	687b      	ldr	r3, [r7, #4]
 8109620:	6a1b      	ldr	r3, [r3, #32]
 8109622:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8109626:	687b      	ldr	r3, [r7, #4]
 8109628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810962a:	687b      	ldr	r3, [r7, #4]
 810962c:	6a1b      	ldr	r3, [r3, #32]
 810962e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109630:	687b      	ldr	r3, [r7, #4]
 8109632:	685b      	ldr	r3, [r3, #4]
 8109634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8109636:	687b      	ldr	r3, [r7, #4]
 8109638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810963a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810963c:	68fb      	ldr	r3, [r7, #12]
 810963e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8109642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8109648:	683b      	ldr	r3, [r7, #0]
 810964a:	681b      	ldr	r3, [r3, #0]
 810964c:	68fa      	ldr	r2, [r7, #12]
 810964e:	4313      	orrs	r3, r2
 8109650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8109652:	693b      	ldr	r3, [r7, #16]
 8109654:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8109658:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810965a:	683b      	ldr	r3, [r7, #0]
 810965c:	689b      	ldr	r3, [r3, #8]
 810965e:	041b      	lsls	r3, r3, #16
 8109660:	693a      	ldr	r2, [r7, #16]
 8109662:	4313      	orrs	r3, r2
 8109664:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109666:	687b      	ldr	r3, [r7, #4]
 8109668:	4a17      	ldr	r2, [pc, #92]	; (81096c8 <TIM_OC5_SetConfig+0xb4>)
 810966a:	4293      	cmp	r3, r2
 810966c:	d00f      	beq.n	810968e <TIM_OC5_SetConfig+0x7a>
 810966e:	687b      	ldr	r3, [r7, #4]
 8109670:	4a16      	ldr	r2, [pc, #88]	; (81096cc <TIM_OC5_SetConfig+0xb8>)
 8109672:	4293      	cmp	r3, r2
 8109674:	d00b      	beq.n	810968e <TIM_OC5_SetConfig+0x7a>
 8109676:	687b      	ldr	r3, [r7, #4]
 8109678:	4a15      	ldr	r2, [pc, #84]	; (81096d0 <TIM_OC5_SetConfig+0xbc>)
 810967a:	4293      	cmp	r3, r2
 810967c:	d007      	beq.n	810968e <TIM_OC5_SetConfig+0x7a>
 810967e:	687b      	ldr	r3, [r7, #4]
 8109680:	4a14      	ldr	r2, [pc, #80]	; (81096d4 <TIM_OC5_SetConfig+0xc0>)
 8109682:	4293      	cmp	r3, r2
 8109684:	d003      	beq.n	810968e <TIM_OC5_SetConfig+0x7a>
 8109686:	687b      	ldr	r3, [r7, #4]
 8109688:	4a13      	ldr	r2, [pc, #76]	; (81096d8 <TIM_OC5_SetConfig+0xc4>)
 810968a:	4293      	cmp	r3, r2
 810968c:	d109      	bne.n	81096a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810968e:	697b      	ldr	r3, [r7, #20]
 8109690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8109694:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8109696:	683b      	ldr	r3, [r7, #0]
 8109698:	695b      	ldr	r3, [r3, #20]
 810969a:	021b      	lsls	r3, r3, #8
 810969c:	697a      	ldr	r2, [r7, #20]
 810969e:	4313      	orrs	r3, r2
 81096a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81096a2:	687b      	ldr	r3, [r7, #4]
 81096a4:	697a      	ldr	r2, [r7, #20]
 81096a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81096a8:	687b      	ldr	r3, [r7, #4]
 81096aa:	68fa      	ldr	r2, [r7, #12]
 81096ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81096ae:	683b      	ldr	r3, [r7, #0]
 81096b0:	685a      	ldr	r2, [r3, #4]
 81096b2:	687b      	ldr	r3, [r7, #4]
 81096b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81096b6:	687b      	ldr	r3, [r7, #4]
 81096b8:	693a      	ldr	r2, [r7, #16]
 81096ba:	621a      	str	r2, [r3, #32]
}
 81096bc:	bf00      	nop
 81096be:	371c      	adds	r7, #28
 81096c0:	46bd      	mov	sp, r7
 81096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096c6:	4770      	bx	lr
 81096c8:	40010000 	.word	0x40010000
 81096cc:	40010400 	.word	0x40010400
 81096d0:	40014000 	.word	0x40014000
 81096d4:	40014400 	.word	0x40014400
 81096d8:	40014800 	.word	0x40014800

081096dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 81096dc:	b480      	push	{r7}
 81096de:	b087      	sub	sp, #28
 81096e0:	af00      	add	r7, sp, #0
 81096e2:	6078      	str	r0, [r7, #4]
 81096e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81096e6:	687b      	ldr	r3, [r7, #4]
 81096e8:	6a1b      	ldr	r3, [r3, #32]
 81096ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81096ee:	687b      	ldr	r3, [r7, #4]
 81096f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81096f2:	687b      	ldr	r3, [r7, #4]
 81096f4:	6a1b      	ldr	r3, [r3, #32]
 81096f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81096f8:	687b      	ldr	r3, [r7, #4]
 81096fa:	685b      	ldr	r3, [r3, #4]
 81096fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81096fe:	687b      	ldr	r3, [r7, #4]
 8109700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8109704:	68fb      	ldr	r3, [r7, #12]
 8109706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810970a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810970e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8109710:	683b      	ldr	r3, [r7, #0]
 8109712:	681b      	ldr	r3, [r3, #0]
 8109714:	021b      	lsls	r3, r3, #8
 8109716:	68fa      	ldr	r2, [r7, #12]
 8109718:	4313      	orrs	r3, r2
 810971a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810971c:	693b      	ldr	r3, [r7, #16]
 810971e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8109722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8109724:	683b      	ldr	r3, [r7, #0]
 8109726:	689b      	ldr	r3, [r3, #8]
 8109728:	051b      	lsls	r3, r3, #20
 810972a:	693a      	ldr	r2, [r7, #16]
 810972c:	4313      	orrs	r3, r2
 810972e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109730:	687b      	ldr	r3, [r7, #4]
 8109732:	4a18      	ldr	r2, [pc, #96]	; (8109794 <TIM_OC6_SetConfig+0xb8>)
 8109734:	4293      	cmp	r3, r2
 8109736:	d00f      	beq.n	8109758 <TIM_OC6_SetConfig+0x7c>
 8109738:	687b      	ldr	r3, [r7, #4]
 810973a:	4a17      	ldr	r2, [pc, #92]	; (8109798 <TIM_OC6_SetConfig+0xbc>)
 810973c:	4293      	cmp	r3, r2
 810973e:	d00b      	beq.n	8109758 <TIM_OC6_SetConfig+0x7c>
 8109740:	687b      	ldr	r3, [r7, #4]
 8109742:	4a16      	ldr	r2, [pc, #88]	; (810979c <TIM_OC6_SetConfig+0xc0>)
 8109744:	4293      	cmp	r3, r2
 8109746:	d007      	beq.n	8109758 <TIM_OC6_SetConfig+0x7c>
 8109748:	687b      	ldr	r3, [r7, #4]
 810974a:	4a15      	ldr	r2, [pc, #84]	; (81097a0 <TIM_OC6_SetConfig+0xc4>)
 810974c:	4293      	cmp	r3, r2
 810974e:	d003      	beq.n	8109758 <TIM_OC6_SetConfig+0x7c>
 8109750:	687b      	ldr	r3, [r7, #4]
 8109752:	4a14      	ldr	r2, [pc, #80]	; (81097a4 <TIM_OC6_SetConfig+0xc8>)
 8109754:	4293      	cmp	r3, r2
 8109756:	d109      	bne.n	810976c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8109758:	697b      	ldr	r3, [r7, #20]
 810975a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810975e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8109760:	683b      	ldr	r3, [r7, #0]
 8109762:	695b      	ldr	r3, [r3, #20]
 8109764:	029b      	lsls	r3, r3, #10
 8109766:	697a      	ldr	r2, [r7, #20]
 8109768:	4313      	orrs	r3, r2
 810976a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810976c:	687b      	ldr	r3, [r7, #4]
 810976e:	697a      	ldr	r2, [r7, #20]
 8109770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8109772:	687b      	ldr	r3, [r7, #4]
 8109774:	68fa      	ldr	r2, [r7, #12]
 8109776:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8109778:	683b      	ldr	r3, [r7, #0]
 810977a:	685a      	ldr	r2, [r3, #4]
 810977c:	687b      	ldr	r3, [r7, #4]
 810977e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109780:	687b      	ldr	r3, [r7, #4]
 8109782:	693a      	ldr	r2, [r7, #16]
 8109784:	621a      	str	r2, [r3, #32]
}
 8109786:	bf00      	nop
 8109788:	371c      	adds	r7, #28
 810978a:	46bd      	mov	sp, r7
 810978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109790:	4770      	bx	lr
 8109792:	bf00      	nop
 8109794:	40010000 	.word	0x40010000
 8109798:	40010400 	.word	0x40010400
 810979c:	40014000 	.word	0x40014000
 81097a0:	40014400 	.word	0x40014400
 81097a4:	40014800 	.word	0x40014800

081097a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81097a8:	b480      	push	{r7}
 81097aa:	b087      	sub	sp, #28
 81097ac:	af00      	add	r7, sp, #0
 81097ae:	60f8      	str	r0, [r7, #12]
 81097b0:	60b9      	str	r1, [r7, #8]
 81097b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81097b4:	68fb      	ldr	r3, [r7, #12]
 81097b6:	6a1b      	ldr	r3, [r3, #32]
 81097b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81097ba:	68fb      	ldr	r3, [r7, #12]
 81097bc:	6a1b      	ldr	r3, [r3, #32]
 81097be:	f023 0201 	bic.w	r2, r3, #1
 81097c2:	68fb      	ldr	r3, [r7, #12]
 81097c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81097c6:	68fb      	ldr	r3, [r7, #12]
 81097c8:	699b      	ldr	r3, [r3, #24]
 81097ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81097cc:	693b      	ldr	r3, [r7, #16]
 81097ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81097d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81097d4:	687b      	ldr	r3, [r7, #4]
 81097d6:	011b      	lsls	r3, r3, #4
 81097d8:	693a      	ldr	r2, [r7, #16]
 81097da:	4313      	orrs	r3, r2
 81097dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81097de:	697b      	ldr	r3, [r7, #20]
 81097e0:	f023 030a 	bic.w	r3, r3, #10
 81097e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 81097e6:	697a      	ldr	r2, [r7, #20]
 81097e8:	68bb      	ldr	r3, [r7, #8]
 81097ea:	4313      	orrs	r3, r2
 81097ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81097ee:	68fb      	ldr	r3, [r7, #12]
 81097f0:	693a      	ldr	r2, [r7, #16]
 81097f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81097f4:	68fb      	ldr	r3, [r7, #12]
 81097f6:	697a      	ldr	r2, [r7, #20]
 81097f8:	621a      	str	r2, [r3, #32]
}
 81097fa:	bf00      	nop
 81097fc:	371c      	adds	r7, #28
 81097fe:	46bd      	mov	sp, r7
 8109800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109804:	4770      	bx	lr

08109806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8109806:	b480      	push	{r7}
 8109808:	b087      	sub	sp, #28
 810980a:	af00      	add	r7, sp, #0
 810980c:	60f8      	str	r0, [r7, #12]
 810980e:	60b9      	str	r1, [r7, #8]
 8109810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8109812:	68fb      	ldr	r3, [r7, #12]
 8109814:	6a1b      	ldr	r3, [r3, #32]
 8109816:	f023 0210 	bic.w	r2, r3, #16
 810981a:	68fb      	ldr	r3, [r7, #12]
 810981c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810981e:	68fb      	ldr	r3, [r7, #12]
 8109820:	699b      	ldr	r3, [r3, #24]
 8109822:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8109824:	68fb      	ldr	r3, [r7, #12]
 8109826:	6a1b      	ldr	r3, [r3, #32]
 8109828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810982a:	697b      	ldr	r3, [r7, #20]
 810982c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8109830:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8109832:	687b      	ldr	r3, [r7, #4]
 8109834:	031b      	lsls	r3, r3, #12
 8109836:	697a      	ldr	r2, [r7, #20]
 8109838:	4313      	orrs	r3, r2
 810983a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810983c:	693b      	ldr	r3, [r7, #16]
 810983e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8109842:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8109844:	68bb      	ldr	r3, [r7, #8]
 8109846:	011b      	lsls	r3, r3, #4
 8109848:	693a      	ldr	r2, [r7, #16]
 810984a:	4313      	orrs	r3, r2
 810984c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810984e:	68fb      	ldr	r3, [r7, #12]
 8109850:	697a      	ldr	r2, [r7, #20]
 8109852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8109854:	68fb      	ldr	r3, [r7, #12]
 8109856:	693a      	ldr	r2, [r7, #16]
 8109858:	621a      	str	r2, [r3, #32]
}
 810985a:	bf00      	nop
 810985c:	371c      	adds	r7, #28
 810985e:	46bd      	mov	sp, r7
 8109860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109864:	4770      	bx	lr

08109866 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8109866:	b480      	push	{r7}
 8109868:	b085      	sub	sp, #20
 810986a:	af00      	add	r7, sp, #0
 810986c:	6078      	str	r0, [r7, #4]
 810986e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8109870:	687b      	ldr	r3, [r7, #4]
 8109872:	689b      	ldr	r3, [r3, #8]
 8109874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8109876:	68fb      	ldr	r3, [r7, #12]
 8109878:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810987c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8109882:	683a      	ldr	r2, [r7, #0]
 8109884:	68fb      	ldr	r3, [r7, #12]
 8109886:	4313      	orrs	r3, r2
 8109888:	f043 0307 	orr.w	r3, r3, #7
 810988c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810988e:	687b      	ldr	r3, [r7, #4]
 8109890:	68fa      	ldr	r2, [r7, #12]
 8109892:	609a      	str	r2, [r3, #8]
}
 8109894:	bf00      	nop
 8109896:	3714      	adds	r7, #20
 8109898:	46bd      	mov	sp, r7
 810989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810989e:	4770      	bx	lr

081098a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 81098a0:	b480      	push	{r7}
 81098a2:	b087      	sub	sp, #28
 81098a4:	af00      	add	r7, sp, #0
 81098a6:	60f8      	str	r0, [r7, #12]
 81098a8:	60b9      	str	r1, [r7, #8]
 81098aa:	607a      	str	r2, [r7, #4]
 81098ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 81098ae:	68fb      	ldr	r3, [r7, #12]
 81098b0:	689b      	ldr	r3, [r3, #8]
 81098b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81098b4:	697b      	ldr	r3, [r7, #20]
 81098b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81098ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81098bc:	683b      	ldr	r3, [r7, #0]
 81098be:	021a      	lsls	r2, r3, #8
 81098c0:	687b      	ldr	r3, [r7, #4]
 81098c2:	431a      	orrs	r2, r3
 81098c4:	68bb      	ldr	r3, [r7, #8]
 81098c6:	4313      	orrs	r3, r2
 81098c8:	697a      	ldr	r2, [r7, #20]
 81098ca:	4313      	orrs	r3, r2
 81098cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81098ce:	68fb      	ldr	r3, [r7, #12]
 81098d0:	697a      	ldr	r2, [r7, #20]
 81098d2:	609a      	str	r2, [r3, #8]
}
 81098d4:	bf00      	nop
 81098d6:	371c      	adds	r7, #28
 81098d8:	46bd      	mov	sp, r7
 81098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098de:	4770      	bx	lr

081098e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81098e0:	b480      	push	{r7}
 81098e2:	b087      	sub	sp, #28
 81098e4:	af00      	add	r7, sp, #0
 81098e6:	60f8      	str	r0, [r7, #12]
 81098e8:	60b9      	str	r1, [r7, #8]
 81098ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 81098ec:	68bb      	ldr	r3, [r7, #8]
 81098ee:	f003 031f 	and.w	r3, r3, #31
 81098f2:	2201      	movs	r2, #1
 81098f4:	fa02 f303 	lsl.w	r3, r2, r3
 81098f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 81098fa:	68fb      	ldr	r3, [r7, #12]
 81098fc:	6a1a      	ldr	r2, [r3, #32]
 81098fe:	697b      	ldr	r3, [r7, #20]
 8109900:	43db      	mvns	r3, r3
 8109902:	401a      	ands	r2, r3
 8109904:	68fb      	ldr	r3, [r7, #12]
 8109906:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8109908:	68fb      	ldr	r3, [r7, #12]
 810990a:	6a1a      	ldr	r2, [r3, #32]
 810990c:	68bb      	ldr	r3, [r7, #8]
 810990e:	f003 031f 	and.w	r3, r3, #31
 8109912:	6879      	ldr	r1, [r7, #4]
 8109914:	fa01 f303 	lsl.w	r3, r1, r3
 8109918:	431a      	orrs	r2, r3
 810991a:	68fb      	ldr	r3, [r7, #12]
 810991c:	621a      	str	r2, [r3, #32]
}
 810991e:	bf00      	nop
 8109920:	371c      	adds	r7, #28
 8109922:	46bd      	mov	sp, r7
 8109924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109928:	4770      	bx	lr
	...

0810992c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810992c:	b480      	push	{r7}
 810992e:	b085      	sub	sp, #20
 8109930:	af00      	add	r7, sp, #0
 8109932:	6078      	str	r0, [r7, #4]
 8109934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8109936:	687b      	ldr	r3, [r7, #4]
 8109938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810993c:	2b01      	cmp	r3, #1
 810993e:	d101      	bne.n	8109944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8109940:	2302      	movs	r3, #2
 8109942:	e06d      	b.n	8109a20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8109944:	687b      	ldr	r3, [r7, #4]
 8109946:	2201      	movs	r2, #1
 8109948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810994c:	687b      	ldr	r3, [r7, #4]
 810994e:	2202      	movs	r2, #2
 8109950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8109954:	687b      	ldr	r3, [r7, #4]
 8109956:	681b      	ldr	r3, [r3, #0]
 8109958:	685b      	ldr	r3, [r3, #4]
 810995a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810995c:	687b      	ldr	r3, [r7, #4]
 810995e:	681b      	ldr	r3, [r3, #0]
 8109960:	689b      	ldr	r3, [r3, #8]
 8109962:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8109964:	687b      	ldr	r3, [r7, #4]
 8109966:	681b      	ldr	r3, [r3, #0]
 8109968:	4a30      	ldr	r2, [pc, #192]	; (8109a2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810996a:	4293      	cmp	r3, r2
 810996c:	d004      	beq.n	8109978 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810996e:	687b      	ldr	r3, [r7, #4]
 8109970:	681b      	ldr	r3, [r3, #0]
 8109972:	4a2f      	ldr	r2, [pc, #188]	; (8109a30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8109974:	4293      	cmp	r3, r2
 8109976:	d108      	bne.n	810998a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8109978:	68fb      	ldr	r3, [r7, #12]
 810997a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810997e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8109980:	683b      	ldr	r3, [r7, #0]
 8109982:	685b      	ldr	r3, [r3, #4]
 8109984:	68fa      	ldr	r2, [r7, #12]
 8109986:	4313      	orrs	r3, r2
 8109988:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810998a:	68fb      	ldr	r3, [r7, #12]
 810998c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109990:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8109992:	683b      	ldr	r3, [r7, #0]
 8109994:	681b      	ldr	r3, [r3, #0]
 8109996:	68fa      	ldr	r2, [r7, #12]
 8109998:	4313      	orrs	r3, r2
 810999a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810999c:	687b      	ldr	r3, [r7, #4]
 810999e:	681b      	ldr	r3, [r3, #0]
 81099a0:	68fa      	ldr	r2, [r7, #12]
 81099a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81099a4:	687b      	ldr	r3, [r7, #4]
 81099a6:	681b      	ldr	r3, [r3, #0]
 81099a8:	4a20      	ldr	r2, [pc, #128]	; (8109a2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81099aa:	4293      	cmp	r3, r2
 81099ac:	d022      	beq.n	81099f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099ae:	687b      	ldr	r3, [r7, #4]
 81099b0:	681b      	ldr	r3, [r3, #0]
 81099b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81099b6:	d01d      	beq.n	81099f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099b8:	687b      	ldr	r3, [r7, #4]
 81099ba:	681b      	ldr	r3, [r3, #0]
 81099bc:	4a1d      	ldr	r2, [pc, #116]	; (8109a34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81099be:	4293      	cmp	r3, r2
 81099c0:	d018      	beq.n	81099f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099c2:	687b      	ldr	r3, [r7, #4]
 81099c4:	681b      	ldr	r3, [r3, #0]
 81099c6:	4a1c      	ldr	r2, [pc, #112]	; (8109a38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81099c8:	4293      	cmp	r3, r2
 81099ca:	d013      	beq.n	81099f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099cc:	687b      	ldr	r3, [r7, #4]
 81099ce:	681b      	ldr	r3, [r3, #0]
 81099d0:	4a1a      	ldr	r2, [pc, #104]	; (8109a3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81099d2:	4293      	cmp	r3, r2
 81099d4:	d00e      	beq.n	81099f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099d6:	687b      	ldr	r3, [r7, #4]
 81099d8:	681b      	ldr	r3, [r3, #0]
 81099da:	4a15      	ldr	r2, [pc, #84]	; (8109a30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81099dc:	4293      	cmp	r3, r2
 81099de:	d009      	beq.n	81099f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099e0:	687b      	ldr	r3, [r7, #4]
 81099e2:	681b      	ldr	r3, [r3, #0]
 81099e4:	4a16      	ldr	r2, [pc, #88]	; (8109a40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 81099e6:	4293      	cmp	r3, r2
 81099e8:	d004      	beq.n	81099f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81099ea:	687b      	ldr	r3, [r7, #4]
 81099ec:	681b      	ldr	r3, [r3, #0]
 81099ee:	4a15      	ldr	r2, [pc, #84]	; (8109a44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 81099f0:	4293      	cmp	r3, r2
 81099f2:	d10c      	bne.n	8109a0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 81099f4:	68bb      	ldr	r3, [r7, #8]
 81099f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81099fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81099fc:	683b      	ldr	r3, [r7, #0]
 81099fe:	689b      	ldr	r3, [r3, #8]
 8109a00:	68ba      	ldr	r2, [r7, #8]
 8109a02:	4313      	orrs	r3, r2
 8109a04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8109a06:	687b      	ldr	r3, [r7, #4]
 8109a08:	681b      	ldr	r3, [r3, #0]
 8109a0a:	68ba      	ldr	r2, [r7, #8]
 8109a0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8109a0e:	687b      	ldr	r3, [r7, #4]
 8109a10:	2201      	movs	r2, #1
 8109a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8109a16:	687b      	ldr	r3, [r7, #4]
 8109a18:	2200      	movs	r2, #0
 8109a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8109a1e:	2300      	movs	r3, #0
}
 8109a20:	4618      	mov	r0, r3
 8109a22:	3714      	adds	r7, #20
 8109a24:	46bd      	mov	sp, r7
 8109a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a2a:	4770      	bx	lr
 8109a2c:	40010000 	.word	0x40010000
 8109a30:	40010400 	.word	0x40010400
 8109a34:	40000400 	.word	0x40000400
 8109a38:	40000800 	.word	0x40000800
 8109a3c:	40000c00 	.word	0x40000c00
 8109a40:	40001800 	.word	0x40001800
 8109a44:	40014000 	.word	0x40014000

08109a48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8109a48:	b480      	push	{r7}
 8109a4a:	b085      	sub	sp, #20
 8109a4c:	af00      	add	r7, sp, #0
 8109a4e:	6078      	str	r0, [r7, #4]
 8109a50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8109a52:	2300      	movs	r3, #0
 8109a54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8109a56:	687b      	ldr	r3, [r7, #4]
 8109a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8109a5c:	2b01      	cmp	r3, #1
 8109a5e:	d101      	bne.n	8109a64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8109a60:	2302      	movs	r3, #2
 8109a62:	e065      	b.n	8109b30 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8109a64:	687b      	ldr	r3, [r7, #4]
 8109a66:	2201      	movs	r2, #1
 8109a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8109a6c:	68fb      	ldr	r3, [r7, #12]
 8109a6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8109a72:	683b      	ldr	r3, [r7, #0]
 8109a74:	68db      	ldr	r3, [r3, #12]
 8109a76:	4313      	orrs	r3, r2
 8109a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8109a7a:	68fb      	ldr	r3, [r7, #12]
 8109a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8109a80:	683b      	ldr	r3, [r7, #0]
 8109a82:	689b      	ldr	r3, [r3, #8]
 8109a84:	4313      	orrs	r3, r2
 8109a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8109a88:	68fb      	ldr	r3, [r7, #12]
 8109a8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8109a8e:	683b      	ldr	r3, [r7, #0]
 8109a90:	685b      	ldr	r3, [r3, #4]
 8109a92:	4313      	orrs	r3, r2
 8109a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8109a96:	68fb      	ldr	r3, [r7, #12]
 8109a98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8109a9c:	683b      	ldr	r3, [r7, #0]
 8109a9e:	681b      	ldr	r3, [r3, #0]
 8109aa0:	4313      	orrs	r3, r2
 8109aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8109aa4:	68fb      	ldr	r3, [r7, #12]
 8109aa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8109aaa:	683b      	ldr	r3, [r7, #0]
 8109aac:	691b      	ldr	r3, [r3, #16]
 8109aae:	4313      	orrs	r3, r2
 8109ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8109ab2:	68fb      	ldr	r3, [r7, #12]
 8109ab4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8109ab8:	683b      	ldr	r3, [r7, #0]
 8109aba:	695b      	ldr	r3, [r3, #20]
 8109abc:	4313      	orrs	r3, r2
 8109abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8109ac0:	68fb      	ldr	r3, [r7, #12]
 8109ac2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8109ac6:	683b      	ldr	r3, [r7, #0]
 8109ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109aca:	4313      	orrs	r3, r2
 8109acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8109ace:	68fb      	ldr	r3, [r7, #12]
 8109ad0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8109ad4:	683b      	ldr	r3, [r7, #0]
 8109ad6:	699b      	ldr	r3, [r3, #24]
 8109ad8:	041b      	lsls	r3, r3, #16
 8109ada:	4313      	orrs	r3, r2
 8109adc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8109ade:	687b      	ldr	r3, [r7, #4]
 8109ae0:	681b      	ldr	r3, [r3, #0]
 8109ae2:	4a16      	ldr	r2, [pc, #88]	; (8109b3c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8109ae4:	4293      	cmp	r3, r2
 8109ae6:	d004      	beq.n	8109af2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8109ae8:	687b      	ldr	r3, [r7, #4]
 8109aea:	681b      	ldr	r3, [r3, #0]
 8109aec:	4a14      	ldr	r2, [pc, #80]	; (8109b40 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8109aee:	4293      	cmp	r3, r2
 8109af0:	d115      	bne.n	8109b1e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8109af2:	68fb      	ldr	r3, [r7, #12]
 8109af4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8109af8:	683b      	ldr	r3, [r7, #0]
 8109afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109afc:	051b      	lsls	r3, r3, #20
 8109afe:	4313      	orrs	r3, r2
 8109b00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8109b02:	68fb      	ldr	r3, [r7, #12]
 8109b04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8109b08:	683b      	ldr	r3, [r7, #0]
 8109b0a:	69db      	ldr	r3, [r3, #28]
 8109b0c:	4313      	orrs	r3, r2
 8109b0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8109b10:	68fb      	ldr	r3, [r7, #12]
 8109b12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8109b16:	683b      	ldr	r3, [r7, #0]
 8109b18:	6a1b      	ldr	r3, [r3, #32]
 8109b1a:	4313      	orrs	r3, r2
 8109b1c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8109b1e:	687b      	ldr	r3, [r7, #4]
 8109b20:	681b      	ldr	r3, [r3, #0]
 8109b22:	68fa      	ldr	r2, [r7, #12]
 8109b24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8109b26:	687b      	ldr	r3, [r7, #4]
 8109b28:	2200      	movs	r2, #0
 8109b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8109b2e:	2300      	movs	r3, #0
}
 8109b30:	4618      	mov	r0, r3
 8109b32:	3714      	adds	r7, #20
 8109b34:	46bd      	mov	sp, r7
 8109b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b3a:	4770      	bx	lr
 8109b3c:	40010000 	.word	0x40010000
 8109b40:	40010400 	.word	0x40010400

08109b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8109b44:	b480      	push	{r7}
 8109b46:	b083      	sub	sp, #12
 8109b48:	af00      	add	r7, sp, #0
 8109b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8109b4c:	bf00      	nop
 8109b4e:	370c      	adds	r7, #12
 8109b50:	46bd      	mov	sp, r7
 8109b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b56:	4770      	bx	lr

08109b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8109b58:	b480      	push	{r7}
 8109b5a:	b083      	sub	sp, #12
 8109b5c:	af00      	add	r7, sp, #0
 8109b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8109b60:	bf00      	nop
 8109b62:	370c      	adds	r7, #12
 8109b64:	46bd      	mov	sp, r7
 8109b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b6a:	4770      	bx	lr

08109b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8109b6c:	b480      	push	{r7}
 8109b6e:	b083      	sub	sp, #12
 8109b70:	af00      	add	r7, sp, #0
 8109b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8109b74:	bf00      	nop
 8109b76:	370c      	adds	r7, #12
 8109b78:	46bd      	mov	sp, r7
 8109b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b7e:	4770      	bx	lr

08109b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8109b80:	b580      	push	{r7, lr}
 8109b82:	b082      	sub	sp, #8
 8109b84:	af00      	add	r7, sp, #0
 8109b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8109b88:	687b      	ldr	r3, [r7, #4]
 8109b8a:	2b00      	cmp	r3, #0
 8109b8c:	d101      	bne.n	8109b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8109b8e:	2301      	movs	r3, #1
 8109b90:	e042      	b.n	8109c18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8109b92:	687b      	ldr	r3, [r7, #4]
 8109b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109b98:	2b00      	cmp	r3, #0
 8109b9a:	d106      	bne.n	8109baa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8109b9c:	687b      	ldr	r3, [r7, #4]
 8109b9e:	2200      	movs	r2, #0
 8109ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8109ba4:	6878      	ldr	r0, [r7, #4]
 8109ba6:	f7f9 f815 	bl	8102bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8109baa:	687b      	ldr	r3, [r7, #4]
 8109bac:	2224      	movs	r2, #36	; 0x24
 8109bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8109bb2:	687b      	ldr	r3, [r7, #4]
 8109bb4:	681b      	ldr	r3, [r3, #0]
 8109bb6:	681a      	ldr	r2, [r3, #0]
 8109bb8:	687b      	ldr	r3, [r7, #4]
 8109bba:	681b      	ldr	r3, [r3, #0]
 8109bbc:	f022 0201 	bic.w	r2, r2, #1
 8109bc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8109bc2:	6878      	ldr	r0, [r7, #4]
 8109bc4:	f000 f8ba 	bl	8109d3c <UART_SetConfig>
 8109bc8:	4603      	mov	r3, r0
 8109bca:	2b01      	cmp	r3, #1
 8109bcc:	d101      	bne.n	8109bd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8109bce:	2301      	movs	r3, #1
 8109bd0:	e022      	b.n	8109c18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8109bd2:	687b      	ldr	r3, [r7, #4]
 8109bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109bd6:	2b00      	cmp	r3, #0
 8109bd8:	d002      	beq.n	8109be0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8109bda:	6878      	ldr	r0, [r7, #4]
 8109bdc:	f000 fe16 	bl	810a80c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8109be0:	687b      	ldr	r3, [r7, #4]
 8109be2:	681b      	ldr	r3, [r3, #0]
 8109be4:	685a      	ldr	r2, [r3, #4]
 8109be6:	687b      	ldr	r3, [r7, #4]
 8109be8:	681b      	ldr	r3, [r3, #0]
 8109bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8109bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8109bf0:	687b      	ldr	r3, [r7, #4]
 8109bf2:	681b      	ldr	r3, [r3, #0]
 8109bf4:	689a      	ldr	r2, [r3, #8]
 8109bf6:	687b      	ldr	r3, [r7, #4]
 8109bf8:	681b      	ldr	r3, [r3, #0]
 8109bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8109bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8109c00:	687b      	ldr	r3, [r7, #4]
 8109c02:	681b      	ldr	r3, [r3, #0]
 8109c04:	681a      	ldr	r2, [r3, #0]
 8109c06:	687b      	ldr	r3, [r7, #4]
 8109c08:	681b      	ldr	r3, [r3, #0]
 8109c0a:	f042 0201 	orr.w	r2, r2, #1
 8109c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8109c10:	6878      	ldr	r0, [r7, #4]
 8109c12:	f000 fe9d 	bl	810a950 <UART_CheckIdleState>
 8109c16:	4603      	mov	r3, r0
}
 8109c18:	4618      	mov	r0, r3
 8109c1a:	3708      	adds	r7, #8
 8109c1c:	46bd      	mov	sp, r7
 8109c1e:	bd80      	pop	{r7, pc}

08109c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8109c20:	b580      	push	{r7, lr}
 8109c22:	b08a      	sub	sp, #40	; 0x28
 8109c24:	af02      	add	r7, sp, #8
 8109c26:	60f8      	str	r0, [r7, #12]
 8109c28:	60b9      	str	r1, [r7, #8]
 8109c2a:	603b      	str	r3, [r7, #0]
 8109c2c:	4613      	mov	r3, r2
 8109c2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8109c30:	68fb      	ldr	r3, [r7, #12]
 8109c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109c36:	2b20      	cmp	r3, #32
 8109c38:	d17b      	bne.n	8109d32 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8109c3a:	68bb      	ldr	r3, [r7, #8]
 8109c3c:	2b00      	cmp	r3, #0
 8109c3e:	d002      	beq.n	8109c46 <HAL_UART_Transmit+0x26>
 8109c40:	88fb      	ldrh	r3, [r7, #6]
 8109c42:	2b00      	cmp	r3, #0
 8109c44:	d101      	bne.n	8109c4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8109c46:	2301      	movs	r3, #1
 8109c48:	e074      	b.n	8109d34 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109c4a:	68fb      	ldr	r3, [r7, #12]
 8109c4c:	2200      	movs	r2, #0
 8109c4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8109c52:	68fb      	ldr	r3, [r7, #12]
 8109c54:	2221      	movs	r2, #33	; 0x21
 8109c56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8109c5a:	f7f9 f9f1 	bl	8103040 <HAL_GetTick>
 8109c5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8109c60:	68fb      	ldr	r3, [r7, #12]
 8109c62:	88fa      	ldrh	r2, [r7, #6]
 8109c64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8109c68:	68fb      	ldr	r3, [r7, #12]
 8109c6a:	88fa      	ldrh	r2, [r7, #6]
 8109c6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8109c70:	68fb      	ldr	r3, [r7, #12]
 8109c72:	689b      	ldr	r3, [r3, #8]
 8109c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109c78:	d108      	bne.n	8109c8c <HAL_UART_Transmit+0x6c>
 8109c7a:	68fb      	ldr	r3, [r7, #12]
 8109c7c:	691b      	ldr	r3, [r3, #16]
 8109c7e:	2b00      	cmp	r3, #0
 8109c80:	d104      	bne.n	8109c8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8109c82:	2300      	movs	r3, #0
 8109c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8109c86:	68bb      	ldr	r3, [r7, #8]
 8109c88:	61bb      	str	r3, [r7, #24]
 8109c8a:	e003      	b.n	8109c94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8109c8c:	68bb      	ldr	r3, [r7, #8]
 8109c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8109c90:	2300      	movs	r3, #0
 8109c92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8109c94:	e030      	b.n	8109cf8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8109c96:	683b      	ldr	r3, [r7, #0]
 8109c98:	9300      	str	r3, [sp, #0]
 8109c9a:	697b      	ldr	r3, [r7, #20]
 8109c9c:	2200      	movs	r2, #0
 8109c9e:	2180      	movs	r1, #128	; 0x80
 8109ca0:	68f8      	ldr	r0, [r7, #12]
 8109ca2:	f000 feff 	bl	810aaa4 <UART_WaitOnFlagUntilTimeout>
 8109ca6:	4603      	mov	r3, r0
 8109ca8:	2b00      	cmp	r3, #0
 8109caa:	d005      	beq.n	8109cb8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8109cac:	68fb      	ldr	r3, [r7, #12]
 8109cae:	2220      	movs	r2, #32
 8109cb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8109cb4:	2303      	movs	r3, #3
 8109cb6:	e03d      	b.n	8109d34 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8109cb8:	69fb      	ldr	r3, [r7, #28]
 8109cba:	2b00      	cmp	r3, #0
 8109cbc:	d10b      	bne.n	8109cd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8109cbe:	69bb      	ldr	r3, [r7, #24]
 8109cc0:	881b      	ldrh	r3, [r3, #0]
 8109cc2:	461a      	mov	r2, r3
 8109cc4:	68fb      	ldr	r3, [r7, #12]
 8109cc6:	681b      	ldr	r3, [r3, #0]
 8109cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8109ccc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8109cce:	69bb      	ldr	r3, [r7, #24]
 8109cd0:	3302      	adds	r3, #2
 8109cd2:	61bb      	str	r3, [r7, #24]
 8109cd4:	e007      	b.n	8109ce6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8109cd6:	69fb      	ldr	r3, [r7, #28]
 8109cd8:	781a      	ldrb	r2, [r3, #0]
 8109cda:	68fb      	ldr	r3, [r7, #12]
 8109cdc:	681b      	ldr	r3, [r3, #0]
 8109cde:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8109ce0:	69fb      	ldr	r3, [r7, #28]
 8109ce2:	3301      	adds	r3, #1
 8109ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8109ce6:	68fb      	ldr	r3, [r7, #12]
 8109ce8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8109cec:	b29b      	uxth	r3, r3
 8109cee:	3b01      	subs	r3, #1
 8109cf0:	b29a      	uxth	r2, r3
 8109cf2:	68fb      	ldr	r3, [r7, #12]
 8109cf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8109cf8:	68fb      	ldr	r3, [r7, #12]
 8109cfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8109cfe:	b29b      	uxth	r3, r3
 8109d00:	2b00      	cmp	r3, #0
 8109d02:	d1c8      	bne.n	8109c96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8109d04:	683b      	ldr	r3, [r7, #0]
 8109d06:	9300      	str	r3, [sp, #0]
 8109d08:	697b      	ldr	r3, [r7, #20]
 8109d0a:	2200      	movs	r2, #0
 8109d0c:	2140      	movs	r1, #64	; 0x40
 8109d0e:	68f8      	ldr	r0, [r7, #12]
 8109d10:	f000 fec8 	bl	810aaa4 <UART_WaitOnFlagUntilTimeout>
 8109d14:	4603      	mov	r3, r0
 8109d16:	2b00      	cmp	r3, #0
 8109d18:	d005      	beq.n	8109d26 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8109d1a:	68fb      	ldr	r3, [r7, #12]
 8109d1c:	2220      	movs	r2, #32
 8109d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8109d22:	2303      	movs	r3, #3
 8109d24:	e006      	b.n	8109d34 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8109d26:	68fb      	ldr	r3, [r7, #12]
 8109d28:	2220      	movs	r2, #32
 8109d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8109d2e:	2300      	movs	r3, #0
 8109d30:	e000      	b.n	8109d34 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8109d32:	2302      	movs	r3, #2
  }
}
 8109d34:	4618      	mov	r0, r3
 8109d36:	3720      	adds	r7, #32
 8109d38:	46bd      	mov	sp, r7
 8109d3a:	bd80      	pop	{r7, pc}

08109d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8109d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8109d40:	b092      	sub	sp, #72	; 0x48
 8109d42:	af00      	add	r7, sp, #0
 8109d44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8109d46:	2300      	movs	r3, #0
 8109d48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8109d4c:	697b      	ldr	r3, [r7, #20]
 8109d4e:	689a      	ldr	r2, [r3, #8]
 8109d50:	697b      	ldr	r3, [r7, #20]
 8109d52:	691b      	ldr	r3, [r3, #16]
 8109d54:	431a      	orrs	r2, r3
 8109d56:	697b      	ldr	r3, [r7, #20]
 8109d58:	695b      	ldr	r3, [r3, #20]
 8109d5a:	431a      	orrs	r2, r3
 8109d5c:	697b      	ldr	r3, [r7, #20]
 8109d5e:	69db      	ldr	r3, [r3, #28]
 8109d60:	4313      	orrs	r3, r2
 8109d62:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8109d64:	697b      	ldr	r3, [r7, #20]
 8109d66:	681b      	ldr	r3, [r3, #0]
 8109d68:	681a      	ldr	r2, [r3, #0]
 8109d6a:	4bbd      	ldr	r3, [pc, #756]	; (810a060 <UART_SetConfig+0x324>)
 8109d6c:	4013      	ands	r3, r2
 8109d6e:	697a      	ldr	r2, [r7, #20]
 8109d70:	6812      	ldr	r2, [r2, #0]
 8109d72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109d74:	430b      	orrs	r3, r1
 8109d76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8109d78:	697b      	ldr	r3, [r7, #20]
 8109d7a:	681b      	ldr	r3, [r3, #0]
 8109d7c:	685b      	ldr	r3, [r3, #4]
 8109d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8109d82:	697b      	ldr	r3, [r7, #20]
 8109d84:	68da      	ldr	r2, [r3, #12]
 8109d86:	697b      	ldr	r3, [r7, #20]
 8109d88:	681b      	ldr	r3, [r3, #0]
 8109d8a:	430a      	orrs	r2, r1
 8109d8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8109d8e:	697b      	ldr	r3, [r7, #20]
 8109d90:	699b      	ldr	r3, [r3, #24]
 8109d92:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8109d94:	697b      	ldr	r3, [r7, #20]
 8109d96:	681b      	ldr	r3, [r3, #0]
 8109d98:	4ab2      	ldr	r2, [pc, #712]	; (810a064 <UART_SetConfig+0x328>)
 8109d9a:	4293      	cmp	r3, r2
 8109d9c:	d004      	beq.n	8109da8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8109d9e:	697b      	ldr	r3, [r7, #20]
 8109da0:	6a1b      	ldr	r3, [r3, #32]
 8109da2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8109da4:	4313      	orrs	r3, r2
 8109da6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8109da8:	697b      	ldr	r3, [r7, #20]
 8109daa:	681b      	ldr	r3, [r3, #0]
 8109dac:	689b      	ldr	r3, [r3, #8]
 8109dae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8109db2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8109db6:	697a      	ldr	r2, [r7, #20]
 8109db8:	6812      	ldr	r2, [r2, #0]
 8109dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109dbc:	430b      	orrs	r3, r1
 8109dbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8109dc0:	697b      	ldr	r3, [r7, #20]
 8109dc2:	681b      	ldr	r3, [r3, #0]
 8109dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109dc6:	f023 010f 	bic.w	r1, r3, #15
 8109dca:	697b      	ldr	r3, [r7, #20]
 8109dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8109dce:	697b      	ldr	r3, [r7, #20]
 8109dd0:	681b      	ldr	r3, [r3, #0]
 8109dd2:	430a      	orrs	r2, r1
 8109dd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8109dd6:	697b      	ldr	r3, [r7, #20]
 8109dd8:	681b      	ldr	r3, [r3, #0]
 8109dda:	4aa3      	ldr	r2, [pc, #652]	; (810a068 <UART_SetConfig+0x32c>)
 8109ddc:	4293      	cmp	r3, r2
 8109dde:	d177      	bne.n	8109ed0 <UART_SetConfig+0x194>
 8109de0:	4ba2      	ldr	r3, [pc, #648]	; (810a06c <UART_SetConfig+0x330>)
 8109de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109de4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109de8:	2b28      	cmp	r3, #40	; 0x28
 8109dea:	d86d      	bhi.n	8109ec8 <UART_SetConfig+0x18c>
 8109dec:	a201      	add	r2, pc, #4	; (adr r2, 8109df4 <UART_SetConfig+0xb8>)
 8109dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109df2:	bf00      	nop
 8109df4:	08109e99 	.word	0x08109e99
 8109df8:	08109ec9 	.word	0x08109ec9
 8109dfc:	08109ec9 	.word	0x08109ec9
 8109e00:	08109ec9 	.word	0x08109ec9
 8109e04:	08109ec9 	.word	0x08109ec9
 8109e08:	08109ec9 	.word	0x08109ec9
 8109e0c:	08109ec9 	.word	0x08109ec9
 8109e10:	08109ec9 	.word	0x08109ec9
 8109e14:	08109ea1 	.word	0x08109ea1
 8109e18:	08109ec9 	.word	0x08109ec9
 8109e1c:	08109ec9 	.word	0x08109ec9
 8109e20:	08109ec9 	.word	0x08109ec9
 8109e24:	08109ec9 	.word	0x08109ec9
 8109e28:	08109ec9 	.word	0x08109ec9
 8109e2c:	08109ec9 	.word	0x08109ec9
 8109e30:	08109ec9 	.word	0x08109ec9
 8109e34:	08109ea9 	.word	0x08109ea9
 8109e38:	08109ec9 	.word	0x08109ec9
 8109e3c:	08109ec9 	.word	0x08109ec9
 8109e40:	08109ec9 	.word	0x08109ec9
 8109e44:	08109ec9 	.word	0x08109ec9
 8109e48:	08109ec9 	.word	0x08109ec9
 8109e4c:	08109ec9 	.word	0x08109ec9
 8109e50:	08109ec9 	.word	0x08109ec9
 8109e54:	08109eb1 	.word	0x08109eb1
 8109e58:	08109ec9 	.word	0x08109ec9
 8109e5c:	08109ec9 	.word	0x08109ec9
 8109e60:	08109ec9 	.word	0x08109ec9
 8109e64:	08109ec9 	.word	0x08109ec9
 8109e68:	08109ec9 	.word	0x08109ec9
 8109e6c:	08109ec9 	.word	0x08109ec9
 8109e70:	08109ec9 	.word	0x08109ec9
 8109e74:	08109eb9 	.word	0x08109eb9
 8109e78:	08109ec9 	.word	0x08109ec9
 8109e7c:	08109ec9 	.word	0x08109ec9
 8109e80:	08109ec9 	.word	0x08109ec9
 8109e84:	08109ec9 	.word	0x08109ec9
 8109e88:	08109ec9 	.word	0x08109ec9
 8109e8c:	08109ec9 	.word	0x08109ec9
 8109e90:	08109ec9 	.word	0x08109ec9
 8109e94:	08109ec1 	.word	0x08109ec1
 8109e98:	2301      	movs	r3, #1
 8109e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e9e:	e220      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109ea0:	2304      	movs	r3, #4
 8109ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ea6:	e21c      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109ea8:	2308      	movs	r3, #8
 8109eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109eae:	e218      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109eb0:	2310      	movs	r3, #16
 8109eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109eb6:	e214      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109eb8:	2320      	movs	r3, #32
 8109eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ebe:	e210      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109ec0:	2340      	movs	r3, #64	; 0x40
 8109ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ec6:	e20c      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109ec8:	2380      	movs	r3, #128	; 0x80
 8109eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ece:	e208      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109ed0:	697b      	ldr	r3, [r7, #20]
 8109ed2:	681b      	ldr	r3, [r3, #0]
 8109ed4:	4a66      	ldr	r2, [pc, #408]	; (810a070 <UART_SetConfig+0x334>)
 8109ed6:	4293      	cmp	r3, r2
 8109ed8:	d130      	bne.n	8109f3c <UART_SetConfig+0x200>
 8109eda:	4b64      	ldr	r3, [pc, #400]	; (810a06c <UART_SetConfig+0x330>)
 8109edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109ede:	f003 0307 	and.w	r3, r3, #7
 8109ee2:	2b05      	cmp	r3, #5
 8109ee4:	d826      	bhi.n	8109f34 <UART_SetConfig+0x1f8>
 8109ee6:	a201      	add	r2, pc, #4	; (adr r2, 8109eec <UART_SetConfig+0x1b0>)
 8109ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109eec:	08109f05 	.word	0x08109f05
 8109ef0:	08109f0d 	.word	0x08109f0d
 8109ef4:	08109f15 	.word	0x08109f15
 8109ef8:	08109f1d 	.word	0x08109f1d
 8109efc:	08109f25 	.word	0x08109f25
 8109f00:	08109f2d 	.word	0x08109f2d
 8109f04:	2300      	movs	r3, #0
 8109f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f0a:	e1ea      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109f0c:	2304      	movs	r3, #4
 8109f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f12:	e1e6      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109f14:	2308      	movs	r3, #8
 8109f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f1a:	e1e2      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109f1c:	2310      	movs	r3, #16
 8109f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f22:	e1de      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109f24:	2320      	movs	r3, #32
 8109f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f2a:	e1da      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109f2c:	2340      	movs	r3, #64	; 0x40
 8109f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f32:	e1d6      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109f34:	2380      	movs	r3, #128	; 0x80
 8109f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f3a:	e1d2      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109f3c:	697b      	ldr	r3, [r7, #20]
 8109f3e:	681b      	ldr	r3, [r3, #0]
 8109f40:	4a4c      	ldr	r2, [pc, #304]	; (810a074 <UART_SetConfig+0x338>)
 8109f42:	4293      	cmp	r3, r2
 8109f44:	d130      	bne.n	8109fa8 <UART_SetConfig+0x26c>
 8109f46:	4b49      	ldr	r3, [pc, #292]	; (810a06c <UART_SetConfig+0x330>)
 8109f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109f4a:	f003 0307 	and.w	r3, r3, #7
 8109f4e:	2b05      	cmp	r3, #5
 8109f50:	d826      	bhi.n	8109fa0 <UART_SetConfig+0x264>
 8109f52:	a201      	add	r2, pc, #4	; (adr r2, 8109f58 <UART_SetConfig+0x21c>)
 8109f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109f58:	08109f71 	.word	0x08109f71
 8109f5c:	08109f79 	.word	0x08109f79
 8109f60:	08109f81 	.word	0x08109f81
 8109f64:	08109f89 	.word	0x08109f89
 8109f68:	08109f91 	.word	0x08109f91
 8109f6c:	08109f99 	.word	0x08109f99
 8109f70:	2300      	movs	r3, #0
 8109f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f76:	e1b4      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109f78:	2304      	movs	r3, #4
 8109f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f7e:	e1b0      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109f80:	2308      	movs	r3, #8
 8109f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f86:	e1ac      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109f88:	2310      	movs	r3, #16
 8109f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f8e:	e1a8      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109f90:	2320      	movs	r3, #32
 8109f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f96:	e1a4      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109f98:	2340      	movs	r3, #64	; 0x40
 8109f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f9e:	e1a0      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109fa0:	2380      	movs	r3, #128	; 0x80
 8109fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fa6:	e19c      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109fa8:	697b      	ldr	r3, [r7, #20]
 8109faa:	681b      	ldr	r3, [r3, #0]
 8109fac:	4a32      	ldr	r2, [pc, #200]	; (810a078 <UART_SetConfig+0x33c>)
 8109fae:	4293      	cmp	r3, r2
 8109fb0:	d130      	bne.n	810a014 <UART_SetConfig+0x2d8>
 8109fb2:	4b2e      	ldr	r3, [pc, #184]	; (810a06c <UART_SetConfig+0x330>)
 8109fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109fb6:	f003 0307 	and.w	r3, r3, #7
 8109fba:	2b05      	cmp	r3, #5
 8109fbc:	d826      	bhi.n	810a00c <UART_SetConfig+0x2d0>
 8109fbe:	a201      	add	r2, pc, #4	; (adr r2, 8109fc4 <UART_SetConfig+0x288>)
 8109fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109fc4:	08109fdd 	.word	0x08109fdd
 8109fc8:	08109fe5 	.word	0x08109fe5
 8109fcc:	08109fed 	.word	0x08109fed
 8109fd0:	08109ff5 	.word	0x08109ff5
 8109fd4:	08109ffd 	.word	0x08109ffd
 8109fd8:	0810a005 	.word	0x0810a005
 8109fdc:	2300      	movs	r3, #0
 8109fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fe2:	e17e      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109fe4:	2304      	movs	r3, #4
 8109fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fea:	e17a      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109fec:	2308      	movs	r3, #8
 8109fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ff2:	e176      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109ff4:	2310      	movs	r3, #16
 8109ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ffa:	e172      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 8109ffc:	2320      	movs	r3, #32
 8109ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a002:	e16e      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a004:	2340      	movs	r3, #64	; 0x40
 810a006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a00a:	e16a      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a00c:	2380      	movs	r3, #128	; 0x80
 810a00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a012:	e166      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a014:	697b      	ldr	r3, [r7, #20]
 810a016:	681b      	ldr	r3, [r3, #0]
 810a018:	4a18      	ldr	r2, [pc, #96]	; (810a07c <UART_SetConfig+0x340>)
 810a01a:	4293      	cmp	r3, r2
 810a01c:	d140      	bne.n	810a0a0 <UART_SetConfig+0x364>
 810a01e:	4b13      	ldr	r3, [pc, #76]	; (810a06c <UART_SetConfig+0x330>)
 810a020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a022:	f003 0307 	and.w	r3, r3, #7
 810a026:	2b05      	cmp	r3, #5
 810a028:	d836      	bhi.n	810a098 <UART_SetConfig+0x35c>
 810a02a:	a201      	add	r2, pc, #4	; (adr r2, 810a030 <UART_SetConfig+0x2f4>)
 810a02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a030:	0810a049 	.word	0x0810a049
 810a034:	0810a051 	.word	0x0810a051
 810a038:	0810a059 	.word	0x0810a059
 810a03c:	0810a081 	.word	0x0810a081
 810a040:	0810a089 	.word	0x0810a089
 810a044:	0810a091 	.word	0x0810a091
 810a048:	2300      	movs	r3, #0
 810a04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a04e:	e148      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a050:	2304      	movs	r3, #4
 810a052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a056:	e144      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a058:	2308      	movs	r3, #8
 810a05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a05e:	e140      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a060:	cfff69f3 	.word	0xcfff69f3
 810a064:	58000c00 	.word	0x58000c00
 810a068:	40011000 	.word	0x40011000
 810a06c:	58024400 	.word	0x58024400
 810a070:	40004400 	.word	0x40004400
 810a074:	40004800 	.word	0x40004800
 810a078:	40004c00 	.word	0x40004c00
 810a07c:	40005000 	.word	0x40005000
 810a080:	2310      	movs	r3, #16
 810a082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a086:	e12c      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a088:	2320      	movs	r3, #32
 810a08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a08e:	e128      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a090:	2340      	movs	r3, #64	; 0x40
 810a092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a096:	e124      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a098:	2380      	movs	r3, #128	; 0x80
 810a09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a09e:	e120      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a0a0:	697b      	ldr	r3, [r7, #20]
 810a0a2:	681b      	ldr	r3, [r3, #0]
 810a0a4:	4acb      	ldr	r2, [pc, #812]	; (810a3d4 <UART_SetConfig+0x698>)
 810a0a6:	4293      	cmp	r3, r2
 810a0a8:	d176      	bne.n	810a198 <UART_SetConfig+0x45c>
 810a0aa:	4bcb      	ldr	r3, [pc, #812]	; (810a3d8 <UART_SetConfig+0x69c>)
 810a0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a0ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810a0b2:	2b28      	cmp	r3, #40	; 0x28
 810a0b4:	d86c      	bhi.n	810a190 <UART_SetConfig+0x454>
 810a0b6:	a201      	add	r2, pc, #4	; (adr r2, 810a0bc <UART_SetConfig+0x380>)
 810a0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a0bc:	0810a161 	.word	0x0810a161
 810a0c0:	0810a191 	.word	0x0810a191
 810a0c4:	0810a191 	.word	0x0810a191
 810a0c8:	0810a191 	.word	0x0810a191
 810a0cc:	0810a191 	.word	0x0810a191
 810a0d0:	0810a191 	.word	0x0810a191
 810a0d4:	0810a191 	.word	0x0810a191
 810a0d8:	0810a191 	.word	0x0810a191
 810a0dc:	0810a169 	.word	0x0810a169
 810a0e0:	0810a191 	.word	0x0810a191
 810a0e4:	0810a191 	.word	0x0810a191
 810a0e8:	0810a191 	.word	0x0810a191
 810a0ec:	0810a191 	.word	0x0810a191
 810a0f0:	0810a191 	.word	0x0810a191
 810a0f4:	0810a191 	.word	0x0810a191
 810a0f8:	0810a191 	.word	0x0810a191
 810a0fc:	0810a171 	.word	0x0810a171
 810a100:	0810a191 	.word	0x0810a191
 810a104:	0810a191 	.word	0x0810a191
 810a108:	0810a191 	.word	0x0810a191
 810a10c:	0810a191 	.word	0x0810a191
 810a110:	0810a191 	.word	0x0810a191
 810a114:	0810a191 	.word	0x0810a191
 810a118:	0810a191 	.word	0x0810a191
 810a11c:	0810a179 	.word	0x0810a179
 810a120:	0810a191 	.word	0x0810a191
 810a124:	0810a191 	.word	0x0810a191
 810a128:	0810a191 	.word	0x0810a191
 810a12c:	0810a191 	.word	0x0810a191
 810a130:	0810a191 	.word	0x0810a191
 810a134:	0810a191 	.word	0x0810a191
 810a138:	0810a191 	.word	0x0810a191
 810a13c:	0810a181 	.word	0x0810a181
 810a140:	0810a191 	.word	0x0810a191
 810a144:	0810a191 	.word	0x0810a191
 810a148:	0810a191 	.word	0x0810a191
 810a14c:	0810a191 	.word	0x0810a191
 810a150:	0810a191 	.word	0x0810a191
 810a154:	0810a191 	.word	0x0810a191
 810a158:	0810a191 	.word	0x0810a191
 810a15c:	0810a189 	.word	0x0810a189
 810a160:	2301      	movs	r3, #1
 810a162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a166:	e0bc      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a168:	2304      	movs	r3, #4
 810a16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a16e:	e0b8      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a170:	2308      	movs	r3, #8
 810a172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a176:	e0b4      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a178:	2310      	movs	r3, #16
 810a17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a17e:	e0b0      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a180:	2320      	movs	r3, #32
 810a182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a186:	e0ac      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a188:	2340      	movs	r3, #64	; 0x40
 810a18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a18e:	e0a8      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a190:	2380      	movs	r3, #128	; 0x80
 810a192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a196:	e0a4      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a198:	697b      	ldr	r3, [r7, #20]
 810a19a:	681b      	ldr	r3, [r3, #0]
 810a19c:	4a8f      	ldr	r2, [pc, #572]	; (810a3dc <UART_SetConfig+0x6a0>)
 810a19e:	4293      	cmp	r3, r2
 810a1a0:	d130      	bne.n	810a204 <UART_SetConfig+0x4c8>
 810a1a2:	4b8d      	ldr	r3, [pc, #564]	; (810a3d8 <UART_SetConfig+0x69c>)
 810a1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a1a6:	f003 0307 	and.w	r3, r3, #7
 810a1aa:	2b05      	cmp	r3, #5
 810a1ac:	d826      	bhi.n	810a1fc <UART_SetConfig+0x4c0>
 810a1ae:	a201      	add	r2, pc, #4	; (adr r2, 810a1b4 <UART_SetConfig+0x478>)
 810a1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a1b4:	0810a1cd 	.word	0x0810a1cd
 810a1b8:	0810a1d5 	.word	0x0810a1d5
 810a1bc:	0810a1dd 	.word	0x0810a1dd
 810a1c0:	0810a1e5 	.word	0x0810a1e5
 810a1c4:	0810a1ed 	.word	0x0810a1ed
 810a1c8:	0810a1f5 	.word	0x0810a1f5
 810a1cc:	2300      	movs	r3, #0
 810a1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1d2:	e086      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a1d4:	2304      	movs	r3, #4
 810a1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1da:	e082      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a1dc:	2308      	movs	r3, #8
 810a1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1e2:	e07e      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a1e4:	2310      	movs	r3, #16
 810a1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1ea:	e07a      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a1ec:	2320      	movs	r3, #32
 810a1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1f2:	e076      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a1f4:	2340      	movs	r3, #64	; 0x40
 810a1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a1fa:	e072      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a1fc:	2380      	movs	r3, #128	; 0x80
 810a1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a202:	e06e      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a204:	697b      	ldr	r3, [r7, #20]
 810a206:	681b      	ldr	r3, [r3, #0]
 810a208:	4a75      	ldr	r2, [pc, #468]	; (810a3e0 <UART_SetConfig+0x6a4>)
 810a20a:	4293      	cmp	r3, r2
 810a20c:	d130      	bne.n	810a270 <UART_SetConfig+0x534>
 810a20e:	4b72      	ldr	r3, [pc, #456]	; (810a3d8 <UART_SetConfig+0x69c>)
 810a210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a212:	f003 0307 	and.w	r3, r3, #7
 810a216:	2b05      	cmp	r3, #5
 810a218:	d826      	bhi.n	810a268 <UART_SetConfig+0x52c>
 810a21a:	a201      	add	r2, pc, #4	; (adr r2, 810a220 <UART_SetConfig+0x4e4>)
 810a21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a220:	0810a239 	.word	0x0810a239
 810a224:	0810a241 	.word	0x0810a241
 810a228:	0810a249 	.word	0x0810a249
 810a22c:	0810a251 	.word	0x0810a251
 810a230:	0810a259 	.word	0x0810a259
 810a234:	0810a261 	.word	0x0810a261
 810a238:	2300      	movs	r3, #0
 810a23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a23e:	e050      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a240:	2304      	movs	r3, #4
 810a242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a246:	e04c      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a248:	2308      	movs	r3, #8
 810a24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a24e:	e048      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a250:	2310      	movs	r3, #16
 810a252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a256:	e044      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a258:	2320      	movs	r3, #32
 810a25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a25e:	e040      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a260:	2340      	movs	r3, #64	; 0x40
 810a262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a266:	e03c      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a268:	2380      	movs	r3, #128	; 0x80
 810a26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a26e:	e038      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a270:	697b      	ldr	r3, [r7, #20]
 810a272:	681b      	ldr	r3, [r3, #0]
 810a274:	4a5b      	ldr	r2, [pc, #364]	; (810a3e4 <UART_SetConfig+0x6a8>)
 810a276:	4293      	cmp	r3, r2
 810a278:	d130      	bne.n	810a2dc <UART_SetConfig+0x5a0>
 810a27a:	4b57      	ldr	r3, [pc, #348]	; (810a3d8 <UART_SetConfig+0x69c>)
 810a27c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a27e:	f003 0307 	and.w	r3, r3, #7
 810a282:	2b05      	cmp	r3, #5
 810a284:	d826      	bhi.n	810a2d4 <UART_SetConfig+0x598>
 810a286:	a201      	add	r2, pc, #4	; (adr r2, 810a28c <UART_SetConfig+0x550>)
 810a288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a28c:	0810a2a5 	.word	0x0810a2a5
 810a290:	0810a2ad 	.word	0x0810a2ad
 810a294:	0810a2b5 	.word	0x0810a2b5
 810a298:	0810a2bd 	.word	0x0810a2bd
 810a29c:	0810a2c5 	.word	0x0810a2c5
 810a2a0:	0810a2cd 	.word	0x0810a2cd
 810a2a4:	2302      	movs	r3, #2
 810a2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2aa:	e01a      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a2ac:	2304      	movs	r3, #4
 810a2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2b2:	e016      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a2b4:	2308      	movs	r3, #8
 810a2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2ba:	e012      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a2bc:	2310      	movs	r3, #16
 810a2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2c2:	e00e      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a2c4:	2320      	movs	r3, #32
 810a2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2ca:	e00a      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a2cc:	2340      	movs	r3, #64	; 0x40
 810a2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2d2:	e006      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a2d4:	2380      	movs	r3, #128	; 0x80
 810a2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a2da:	e002      	b.n	810a2e2 <UART_SetConfig+0x5a6>
 810a2dc:	2380      	movs	r3, #128	; 0x80
 810a2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810a2e2:	697b      	ldr	r3, [r7, #20]
 810a2e4:	681b      	ldr	r3, [r3, #0]
 810a2e6:	4a3f      	ldr	r2, [pc, #252]	; (810a3e4 <UART_SetConfig+0x6a8>)
 810a2e8:	4293      	cmp	r3, r2
 810a2ea:	f040 80f8 	bne.w	810a4de <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810a2ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a2f2:	2b20      	cmp	r3, #32
 810a2f4:	dc46      	bgt.n	810a384 <UART_SetConfig+0x648>
 810a2f6:	2b02      	cmp	r3, #2
 810a2f8:	f2c0 8082 	blt.w	810a400 <UART_SetConfig+0x6c4>
 810a2fc:	3b02      	subs	r3, #2
 810a2fe:	2b1e      	cmp	r3, #30
 810a300:	d87e      	bhi.n	810a400 <UART_SetConfig+0x6c4>
 810a302:	a201      	add	r2, pc, #4	; (adr r2, 810a308 <UART_SetConfig+0x5cc>)
 810a304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a308:	0810a38b 	.word	0x0810a38b
 810a30c:	0810a401 	.word	0x0810a401
 810a310:	0810a393 	.word	0x0810a393
 810a314:	0810a401 	.word	0x0810a401
 810a318:	0810a401 	.word	0x0810a401
 810a31c:	0810a401 	.word	0x0810a401
 810a320:	0810a3a3 	.word	0x0810a3a3
 810a324:	0810a401 	.word	0x0810a401
 810a328:	0810a401 	.word	0x0810a401
 810a32c:	0810a401 	.word	0x0810a401
 810a330:	0810a401 	.word	0x0810a401
 810a334:	0810a401 	.word	0x0810a401
 810a338:	0810a401 	.word	0x0810a401
 810a33c:	0810a401 	.word	0x0810a401
 810a340:	0810a3b3 	.word	0x0810a3b3
 810a344:	0810a401 	.word	0x0810a401
 810a348:	0810a401 	.word	0x0810a401
 810a34c:	0810a401 	.word	0x0810a401
 810a350:	0810a401 	.word	0x0810a401
 810a354:	0810a401 	.word	0x0810a401
 810a358:	0810a401 	.word	0x0810a401
 810a35c:	0810a401 	.word	0x0810a401
 810a360:	0810a401 	.word	0x0810a401
 810a364:	0810a401 	.word	0x0810a401
 810a368:	0810a401 	.word	0x0810a401
 810a36c:	0810a401 	.word	0x0810a401
 810a370:	0810a401 	.word	0x0810a401
 810a374:	0810a401 	.word	0x0810a401
 810a378:	0810a401 	.word	0x0810a401
 810a37c:	0810a401 	.word	0x0810a401
 810a380:	0810a3f3 	.word	0x0810a3f3
 810a384:	2b40      	cmp	r3, #64	; 0x40
 810a386:	d037      	beq.n	810a3f8 <UART_SetConfig+0x6bc>
 810a388:	e03a      	b.n	810a400 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810a38a:	f7fd faef 	bl	810796c <HAL_RCCEx_GetD3PCLK1Freq>
 810a38e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a390:	e03c      	b.n	810a40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a396:	4618      	mov	r0, r3
 810a398:	f7fd fafe 	bl	8107998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a3a0:	e034      	b.n	810a40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a3a2:	f107 0318 	add.w	r3, r7, #24
 810a3a6:	4618      	mov	r0, r3
 810a3a8:	f7fd fc4a 	bl	8107c40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a3ac:	69fb      	ldr	r3, [r7, #28]
 810a3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a3b0:	e02c      	b.n	810a40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a3b2:	4b09      	ldr	r3, [pc, #36]	; (810a3d8 <UART_SetConfig+0x69c>)
 810a3b4:	681b      	ldr	r3, [r3, #0]
 810a3b6:	f003 0320 	and.w	r3, r3, #32
 810a3ba:	2b00      	cmp	r3, #0
 810a3bc:	d016      	beq.n	810a3ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a3be:	4b06      	ldr	r3, [pc, #24]	; (810a3d8 <UART_SetConfig+0x69c>)
 810a3c0:	681b      	ldr	r3, [r3, #0]
 810a3c2:	08db      	lsrs	r3, r3, #3
 810a3c4:	f003 0303 	and.w	r3, r3, #3
 810a3c8:	4a07      	ldr	r2, [pc, #28]	; (810a3e8 <UART_SetConfig+0x6ac>)
 810a3ca:	fa22 f303 	lsr.w	r3, r2, r3
 810a3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a3d0:	e01c      	b.n	810a40c <UART_SetConfig+0x6d0>
 810a3d2:	bf00      	nop
 810a3d4:	40011400 	.word	0x40011400
 810a3d8:	58024400 	.word	0x58024400
 810a3dc:	40007800 	.word	0x40007800
 810a3e0:	40007c00 	.word	0x40007c00
 810a3e4:	58000c00 	.word	0x58000c00
 810a3e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810a3ec:	4b9d      	ldr	r3, [pc, #628]	; (810a664 <UART_SetConfig+0x928>)
 810a3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a3f0:	e00c      	b.n	810a40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a3f2:	4b9d      	ldr	r3, [pc, #628]	; (810a668 <UART_SetConfig+0x92c>)
 810a3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a3f6:	e009      	b.n	810a40c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a3f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a3fe:	e005      	b.n	810a40c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810a400:	2300      	movs	r3, #0
 810a402:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a404:	2301      	movs	r3, #1
 810a406:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a40a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810a40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a40e:	2b00      	cmp	r3, #0
 810a410:	f000 81de 	beq.w	810a7d0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810a414:	697b      	ldr	r3, [r7, #20]
 810a416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a418:	4a94      	ldr	r2, [pc, #592]	; (810a66c <UART_SetConfig+0x930>)
 810a41a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a41e:	461a      	mov	r2, r3
 810a420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a422:	fbb3 f3f2 	udiv	r3, r3, r2
 810a426:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a428:	697b      	ldr	r3, [r7, #20]
 810a42a:	685a      	ldr	r2, [r3, #4]
 810a42c:	4613      	mov	r3, r2
 810a42e:	005b      	lsls	r3, r3, #1
 810a430:	4413      	add	r3, r2
 810a432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a434:	429a      	cmp	r2, r3
 810a436:	d305      	bcc.n	810a444 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810a438:	697b      	ldr	r3, [r7, #20]
 810a43a:	685b      	ldr	r3, [r3, #4]
 810a43c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a43e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a440:	429a      	cmp	r2, r3
 810a442:	d903      	bls.n	810a44c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810a444:	2301      	movs	r3, #1
 810a446:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a44a:	e1c1      	b.n	810a7d0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a44e:	2200      	movs	r2, #0
 810a450:	60bb      	str	r3, [r7, #8]
 810a452:	60fa      	str	r2, [r7, #12]
 810a454:	697b      	ldr	r3, [r7, #20]
 810a456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a458:	4a84      	ldr	r2, [pc, #528]	; (810a66c <UART_SetConfig+0x930>)
 810a45a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a45e:	b29b      	uxth	r3, r3
 810a460:	2200      	movs	r2, #0
 810a462:	603b      	str	r3, [r7, #0]
 810a464:	607a      	str	r2, [r7, #4]
 810a466:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a46a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810a46e:	f7f6 fc93 	bl	8100d98 <__aeabi_uldivmod>
 810a472:	4602      	mov	r2, r0
 810a474:	460b      	mov	r3, r1
 810a476:	4610      	mov	r0, r2
 810a478:	4619      	mov	r1, r3
 810a47a:	f04f 0200 	mov.w	r2, #0
 810a47e:	f04f 0300 	mov.w	r3, #0
 810a482:	020b      	lsls	r3, r1, #8
 810a484:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810a488:	0202      	lsls	r2, r0, #8
 810a48a:	6979      	ldr	r1, [r7, #20]
 810a48c:	6849      	ldr	r1, [r1, #4]
 810a48e:	0849      	lsrs	r1, r1, #1
 810a490:	2000      	movs	r0, #0
 810a492:	460c      	mov	r4, r1
 810a494:	4605      	mov	r5, r0
 810a496:	eb12 0804 	adds.w	r8, r2, r4
 810a49a:	eb43 0905 	adc.w	r9, r3, r5
 810a49e:	697b      	ldr	r3, [r7, #20]
 810a4a0:	685b      	ldr	r3, [r3, #4]
 810a4a2:	2200      	movs	r2, #0
 810a4a4:	469a      	mov	sl, r3
 810a4a6:	4693      	mov	fp, r2
 810a4a8:	4652      	mov	r2, sl
 810a4aa:	465b      	mov	r3, fp
 810a4ac:	4640      	mov	r0, r8
 810a4ae:	4649      	mov	r1, r9
 810a4b0:	f7f6 fc72 	bl	8100d98 <__aeabi_uldivmod>
 810a4b4:	4602      	mov	r2, r0
 810a4b6:	460b      	mov	r3, r1
 810a4b8:	4613      	mov	r3, r2
 810a4ba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a4be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810a4c2:	d308      	bcc.n	810a4d6 <UART_SetConfig+0x79a>
 810a4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a4c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a4ca:	d204      	bcs.n	810a4d6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810a4cc:	697b      	ldr	r3, [r7, #20]
 810a4ce:	681b      	ldr	r3, [r3, #0]
 810a4d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810a4d2:	60da      	str	r2, [r3, #12]
 810a4d4:	e17c      	b.n	810a7d0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810a4d6:	2301      	movs	r3, #1
 810a4d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a4dc:	e178      	b.n	810a7d0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810a4de:	697b      	ldr	r3, [r7, #20]
 810a4e0:	69db      	ldr	r3, [r3, #28]
 810a4e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810a4e6:	f040 80c5 	bne.w	810a674 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810a4ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a4ee:	2b20      	cmp	r3, #32
 810a4f0:	dc48      	bgt.n	810a584 <UART_SetConfig+0x848>
 810a4f2:	2b00      	cmp	r3, #0
 810a4f4:	db7b      	blt.n	810a5ee <UART_SetConfig+0x8b2>
 810a4f6:	2b20      	cmp	r3, #32
 810a4f8:	d879      	bhi.n	810a5ee <UART_SetConfig+0x8b2>
 810a4fa:	a201      	add	r2, pc, #4	; (adr r2, 810a500 <UART_SetConfig+0x7c4>)
 810a4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a500:	0810a58b 	.word	0x0810a58b
 810a504:	0810a593 	.word	0x0810a593
 810a508:	0810a5ef 	.word	0x0810a5ef
 810a50c:	0810a5ef 	.word	0x0810a5ef
 810a510:	0810a59b 	.word	0x0810a59b
 810a514:	0810a5ef 	.word	0x0810a5ef
 810a518:	0810a5ef 	.word	0x0810a5ef
 810a51c:	0810a5ef 	.word	0x0810a5ef
 810a520:	0810a5ab 	.word	0x0810a5ab
 810a524:	0810a5ef 	.word	0x0810a5ef
 810a528:	0810a5ef 	.word	0x0810a5ef
 810a52c:	0810a5ef 	.word	0x0810a5ef
 810a530:	0810a5ef 	.word	0x0810a5ef
 810a534:	0810a5ef 	.word	0x0810a5ef
 810a538:	0810a5ef 	.word	0x0810a5ef
 810a53c:	0810a5ef 	.word	0x0810a5ef
 810a540:	0810a5bb 	.word	0x0810a5bb
 810a544:	0810a5ef 	.word	0x0810a5ef
 810a548:	0810a5ef 	.word	0x0810a5ef
 810a54c:	0810a5ef 	.word	0x0810a5ef
 810a550:	0810a5ef 	.word	0x0810a5ef
 810a554:	0810a5ef 	.word	0x0810a5ef
 810a558:	0810a5ef 	.word	0x0810a5ef
 810a55c:	0810a5ef 	.word	0x0810a5ef
 810a560:	0810a5ef 	.word	0x0810a5ef
 810a564:	0810a5ef 	.word	0x0810a5ef
 810a568:	0810a5ef 	.word	0x0810a5ef
 810a56c:	0810a5ef 	.word	0x0810a5ef
 810a570:	0810a5ef 	.word	0x0810a5ef
 810a574:	0810a5ef 	.word	0x0810a5ef
 810a578:	0810a5ef 	.word	0x0810a5ef
 810a57c:	0810a5ef 	.word	0x0810a5ef
 810a580:	0810a5e1 	.word	0x0810a5e1
 810a584:	2b40      	cmp	r3, #64	; 0x40
 810a586:	d02e      	beq.n	810a5e6 <UART_SetConfig+0x8aa>
 810a588:	e031      	b.n	810a5ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a58a:	f7fb fa39 	bl	8105a00 <HAL_RCC_GetPCLK1Freq>
 810a58e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a590:	e033      	b.n	810a5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a592:	f7fb fa4b 	bl	8105a2c <HAL_RCC_GetPCLK2Freq>
 810a596:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a598:	e02f      	b.n	810a5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a59a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a59e:	4618      	mov	r0, r3
 810a5a0:	f7fd f9fa 	bl	8107998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a5a8:	e027      	b.n	810a5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a5aa:	f107 0318 	add.w	r3, r7, #24
 810a5ae:	4618      	mov	r0, r3
 810a5b0:	f7fd fb46 	bl	8107c40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a5b4:	69fb      	ldr	r3, [r7, #28]
 810a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a5b8:	e01f      	b.n	810a5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a5ba:	4b2d      	ldr	r3, [pc, #180]	; (810a670 <UART_SetConfig+0x934>)
 810a5bc:	681b      	ldr	r3, [r3, #0]
 810a5be:	f003 0320 	and.w	r3, r3, #32
 810a5c2:	2b00      	cmp	r3, #0
 810a5c4:	d009      	beq.n	810a5da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a5c6:	4b2a      	ldr	r3, [pc, #168]	; (810a670 <UART_SetConfig+0x934>)
 810a5c8:	681b      	ldr	r3, [r3, #0]
 810a5ca:	08db      	lsrs	r3, r3, #3
 810a5cc:	f003 0303 	and.w	r3, r3, #3
 810a5d0:	4a24      	ldr	r2, [pc, #144]	; (810a664 <UART_SetConfig+0x928>)
 810a5d2:	fa22 f303 	lsr.w	r3, r2, r3
 810a5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a5d8:	e00f      	b.n	810a5fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810a5da:	4b22      	ldr	r3, [pc, #136]	; (810a664 <UART_SetConfig+0x928>)
 810a5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a5de:	e00c      	b.n	810a5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a5e0:	4b21      	ldr	r3, [pc, #132]	; (810a668 <UART_SetConfig+0x92c>)
 810a5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a5e4:	e009      	b.n	810a5fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a5e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a5ec:	e005      	b.n	810a5fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810a5ee:	2300      	movs	r3, #0
 810a5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a5f2:	2301      	movs	r3, #1
 810a5f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a5f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810a5fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a5fc:	2b00      	cmp	r3, #0
 810a5fe:	f000 80e7 	beq.w	810a7d0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a602:	697b      	ldr	r3, [r7, #20]
 810a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a606:	4a19      	ldr	r2, [pc, #100]	; (810a66c <UART_SetConfig+0x930>)
 810a608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a60c:	461a      	mov	r2, r3
 810a60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a610:	fbb3 f3f2 	udiv	r3, r3, r2
 810a614:	005a      	lsls	r2, r3, #1
 810a616:	697b      	ldr	r3, [r7, #20]
 810a618:	685b      	ldr	r3, [r3, #4]
 810a61a:	085b      	lsrs	r3, r3, #1
 810a61c:	441a      	add	r2, r3
 810a61e:	697b      	ldr	r3, [r7, #20]
 810a620:	685b      	ldr	r3, [r3, #4]
 810a622:	fbb2 f3f3 	udiv	r3, r2, r3
 810a626:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a62a:	2b0f      	cmp	r3, #15
 810a62c:	d916      	bls.n	810a65c <UART_SetConfig+0x920>
 810a62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a634:	d212      	bcs.n	810a65c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a638:	b29b      	uxth	r3, r3
 810a63a:	f023 030f 	bic.w	r3, r3, #15
 810a63e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a642:	085b      	lsrs	r3, r3, #1
 810a644:	b29b      	uxth	r3, r3
 810a646:	f003 0307 	and.w	r3, r3, #7
 810a64a:	b29a      	uxth	r2, r3
 810a64c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810a64e:	4313      	orrs	r3, r2
 810a650:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810a652:	697b      	ldr	r3, [r7, #20]
 810a654:	681b      	ldr	r3, [r3, #0]
 810a656:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 810a658:	60da      	str	r2, [r3, #12]
 810a65a:	e0b9      	b.n	810a7d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a65c:	2301      	movs	r3, #1
 810a65e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a662:	e0b5      	b.n	810a7d0 <UART_SetConfig+0xa94>
 810a664:	03d09000 	.word	0x03d09000
 810a668:	003d0900 	.word	0x003d0900
 810a66c:	0810fb10 	.word	0x0810fb10
 810a670:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810a674:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a678:	2b20      	cmp	r3, #32
 810a67a:	dc49      	bgt.n	810a710 <UART_SetConfig+0x9d4>
 810a67c:	2b00      	cmp	r3, #0
 810a67e:	db7c      	blt.n	810a77a <UART_SetConfig+0xa3e>
 810a680:	2b20      	cmp	r3, #32
 810a682:	d87a      	bhi.n	810a77a <UART_SetConfig+0xa3e>
 810a684:	a201      	add	r2, pc, #4	; (adr r2, 810a68c <UART_SetConfig+0x950>)
 810a686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a68a:	bf00      	nop
 810a68c:	0810a717 	.word	0x0810a717
 810a690:	0810a71f 	.word	0x0810a71f
 810a694:	0810a77b 	.word	0x0810a77b
 810a698:	0810a77b 	.word	0x0810a77b
 810a69c:	0810a727 	.word	0x0810a727
 810a6a0:	0810a77b 	.word	0x0810a77b
 810a6a4:	0810a77b 	.word	0x0810a77b
 810a6a8:	0810a77b 	.word	0x0810a77b
 810a6ac:	0810a737 	.word	0x0810a737
 810a6b0:	0810a77b 	.word	0x0810a77b
 810a6b4:	0810a77b 	.word	0x0810a77b
 810a6b8:	0810a77b 	.word	0x0810a77b
 810a6bc:	0810a77b 	.word	0x0810a77b
 810a6c0:	0810a77b 	.word	0x0810a77b
 810a6c4:	0810a77b 	.word	0x0810a77b
 810a6c8:	0810a77b 	.word	0x0810a77b
 810a6cc:	0810a747 	.word	0x0810a747
 810a6d0:	0810a77b 	.word	0x0810a77b
 810a6d4:	0810a77b 	.word	0x0810a77b
 810a6d8:	0810a77b 	.word	0x0810a77b
 810a6dc:	0810a77b 	.word	0x0810a77b
 810a6e0:	0810a77b 	.word	0x0810a77b
 810a6e4:	0810a77b 	.word	0x0810a77b
 810a6e8:	0810a77b 	.word	0x0810a77b
 810a6ec:	0810a77b 	.word	0x0810a77b
 810a6f0:	0810a77b 	.word	0x0810a77b
 810a6f4:	0810a77b 	.word	0x0810a77b
 810a6f8:	0810a77b 	.word	0x0810a77b
 810a6fc:	0810a77b 	.word	0x0810a77b
 810a700:	0810a77b 	.word	0x0810a77b
 810a704:	0810a77b 	.word	0x0810a77b
 810a708:	0810a77b 	.word	0x0810a77b
 810a70c:	0810a76d 	.word	0x0810a76d
 810a710:	2b40      	cmp	r3, #64	; 0x40
 810a712:	d02e      	beq.n	810a772 <UART_SetConfig+0xa36>
 810a714:	e031      	b.n	810a77a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a716:	f7fb f973 	bl	8105a00 <HAL_RCC_GetPCLK1Freq>
 810a71a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a71c:	e033      	b.n	810a786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a71e:	f7fb f985 	bl	8105a2c <HAL_RCC_GetPCLK2Freq>
 810a722:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a724:	e02f      	b.n	810a786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a72a:	4618      	mov	r0, r3
 810a72c:	f7fd f934 	bl	8107998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a734:	e027      	b.n	810a786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a736:	f107 0318 	add.w	r3, r7, #24
 810a73a:	4618      	mov	r0, r3
 810a73c:	f7fd fa80 	bl	8107c40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a740:	69fb      	ldr	r3, [r7, #28]
 810a742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a744:	e01f      	b.n	810a786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a746:	4b2d      	ldr	r3, [pc, #180]	; (810a7fc <UART_SetConfig+0xac0>)
 810a748:	681b      	ldr	r3, [r3, #0]
 810a74a:	f003 0320 	and.w	r3, r3, #32
 810a74e:	2b00      	cmp	r3, #0
 810a750:	d009      	beq.n	810a766 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a752:	4b2a      	ldr	r3, [pc, #168]	; (810a7fc <UART_SetConfig+0xac0>)
 810a754:	681b      	ldr	r3, [r3, #0]
 810a756:	08db      	lsrs	r3, r3, #3
 810a758:	f003 0303 	and.w	r3, r3, #3
 810a75c:	4a28      	ldr	r2, [pc, #160]	; (810a800 <UART_SetConfig+0xac4>)
 810a75e:	fa22 f303 	lsr.w	r3, r2, r3
 810a762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a764:	e00f      	b.n	810a786 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810a766:	4b26      	ldr	r3, [pc, #152]	; (810a800 <UART_SetConfig+0xac4>)
 810a768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a76a:	e00c      	b.n	810a786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a76c:	4b25      	ldr	r3, [pc, #148]	; (810a804 <UART_SetConfig+0xac8>)
 810a76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a770:	e009      	b.n	810a786 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a778:	e005      	b.n	810a786 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810a77a:	2300      	movs	r3, #0
 810a77c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a77e:	2301      	movs	r3, #1
 810a780:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a784:	bf00      	nop
    }

    if (pclk != 0U)
 810a786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a788:	2b00      	cmp	r3, #0
 810a78a:	d021      	beq.n	810a7d0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a78c:	697b      	ldr	r3, [r7, #20]
 810a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a790:	4a1d      	ldr	r2, [pc, #116]	; (810a808 <UART_SetConfig+0xacc>)
 810a792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a796:	461a      	mov	r2, r3
 810a798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a79a:	fbb3 f2f2 	udiv	r2, r3, r2
 810a79e:	697b      	ldr	r3, [r7, #20]
 810a7a0:	685b      	ldr	r3, [r3, #4]
 810a7a2:	085b      	lsrs	r3, r3, #1
 810a7a4:	441a      	add	r2, r3
 810a7a6:	697b      	ldr	r3, [r7, #20]
 810a7a8:	685b      	ldr	r3, [r3, #4]
 810a7aa:	fbb2 f3f3 	udiv	r3, r2, r3
 810a7ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a7b2:	2b0f      	cmp	r3, #15
 810a7b4:	d909      	bls.n	810a7ca <UART_SetConfig+0xa8e>
 810a7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a7b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a7bc:	d205      	bcs.n	810a7ca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810a7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a7c0:	b29a      	uxth	r2, r3
 810a7c2:	697b      	ldr	r3, [r7, #20]
 810a7c4:	681b      	ldr	r3, [r3, #0]
 810a7c6:	60da      	str	r2, [r3, #12]
 810a7c8:	e002      	b.n	810a7d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a7ca:	2301      	movs	r3, #1
 810a7cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810a7d0:	697b      	ldr	r3, [r7, #20]
 810a7d2:	2201      	movs	r2, #1
 810a7d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810a7d8:	697b      	ldr	r3, [r7, #20]
 810a7da:	2201      	movs	r2, #1
 810a7dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810a7e0:	697b      	ldr	r3, [r7, #20]
 810a7e2:	2200      	movs	r2, #0
 810a7e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 810a7e6:	697b      	ldr	r3, [r7, #20]
 810a7e8:	2200      	movs	r2, #0
 810a7ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 810a7ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 810a7f0:	4618      	mov	r0, r3
 810a7f2:	3748      	adds	r7, #72	; 0x48
 810a7f4:	46bd      	mov	sp, r7
 810a7f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810a7fa:	bf00      	nop
 810a7fc:	58024400 	.word	0x58024400
 810a800:	03d09000 	.word	0x03d09000
 810a804:	003d0900 	.word	0x003d0900
 810a808:	0810fb10 	.word	0x0810fb10

0810a80c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810a80c:	b480      	push	{r7}
 810a80e:	b083      	sub	sp, #12
 810a810:	af00      	add	r7, sp, #0
 810a812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810a814:	687b      	ldr	r3, [r7, #4]
 810a816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a818:	f003 0301 	and.w	r3, r3, #1
 810a81c:	2b00      	cmp	r3, #0
 810a81e:	d00a      	beq.n	810a836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810a820:	687b      	ldr	r3, [r7, #4]
 810a822:	681b      	ldr	r3, [r3, #0]
 810a824:	685b      	ldr	r3, [r3, #4]
 810a826:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810a82a:	687b      	ldr	r3, [r7, #4]
 810a82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a82e:	687b      	ldr	r3, [r7, #4]
 810a830:	681b      	ldr	r3, [r3, #0]
 810a832:	430a      	orrs	r2, r1
 810a834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810a836:	687b      	ldr	r3, [r7, #4]
 810a838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a83a:	f003 0302 	and.w	r3, r3, #2
 810a83e:	2b00      	cmp	r3, #0
 810a840:	d00a      	beq.n	810a858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810a842:	687b      	ldr	r3, [r7, #4]
 810a844:	681b      	ldr	r3, [r3, #0]
 810a846:	685b      	ldr	r3, [r3, #4]
 810a848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810a84c:	687b      	ldr	r3, [r7, #4]
 810a84e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810a850:	687b      	ldr	r3, [r7, #4]
 810a852:	681b      	ldr	r3, [r3, #0]
 810a854:	430a      	orrs	r2, r1
 810a856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810a858:	687b      	ldr	r3, [r7, #4]
 810a85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a85c:	f003 0304 	and.w	r3, r3, #4
 810a860:	2b00      	cmp	r3, #0
 810a862:	d00a      	beq.n	810a87a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810a864:	687b      	ldr	r3, [r7, #4]
 810a866:	681b      	ldr	r3, [r3, #0]
 810a868:	685b      	ldr	r3, [r3, #4]
 810a86a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810a86e:	687b      	ldr	r3, [r7, #4]
 810a870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810a872:	687b      	ldr	r3, [r7, #4]
 810a874:	681b      	ldr	r3, [r3, #0]
 810a876:	430a      	orrs	r2, r1
 810a878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810a87a:	687b      	ldr	r3, [r7, #4]
 810a87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a87e:	f003 0308 	and.w	r3, r3, #8
 810a882:	2b00      	cmp	r3, #0
 810a884:	d00a      	beq.n	810a89c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810a886:	687b      	ldr	r3, [r7, #4]
 810a888:	681b      	ldr	r3, [r3, #0]
 810a88a:	685b      	ldr	r3, [r3, #4]
 810a88c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810a890:	687b      	ldr	r3, [r7, #4]
 810a892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a894:	687b      	ldr	r3, [r7, #4]
 810a896:	681b      	ldr	r3, [r3, #0]
 810a898:	430a      	orrs	r2, r1
 810a89a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810a89c:	687b      	ldr	r3, [r7, #4]
 810a89e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a8a0:	f003 0310 	and.w	r3, r3, #16
 810a8a4:	2b00      	cmp	r3, #0
 810a8a6:	d00a      	beq.n	810a8be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810a8a8:	687b      	ldr	r3, [r7, #4]
 810a8aa:	681b      	ldr	r3, [r3, #0]
 810a8ac:	689b      	ldr	r3, [r3, #8]
 810a8ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810a8b2:	687b      	ldr	r3, [r7, #4]
 810a8b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810a8b6:	687b      	ldr	r3, [r7, #4]
 810a8b8:	681b      	ldr	r3, [r3, #0]
 810a8ba:	430a      	orrs	r2, r1
 810a8bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810a8be:	687b      	ldr	r3, [r7, #4]
 810a8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a8c2:	f003 0320 	and.w	r3, r3, #32
 810a8c6:	2b00      	cmp	r3, #0
 810a8c8:	d00a      	beq.n	810a8e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810a8ca:	687b      	ldr	r3, [r7, #4]
 810a8cc:	681b      	ldr	r3, [r3, #0]
 810a8ce:	689b      	ldr	r3, [r3, #8]
 810a8d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810a8d4:	687b      	ldr	r3, [r7, #4]
 810a8d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810a8d8:	687b      	ldr	r3, [r7, #4]
 810a8da:	681b      	ldr	r3, [r3, #0]
 810a8dc:	430a      	orrs	r2, r1
 810a8de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810a8e0:	687b      	ldr	r3, [r7, #4]
 810a8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a8e8:	2b00      	cmp	r3, #0
 810a8ea:	d01a      	beq.n	810a922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810a8ec:	687b      	ldr	r3, [r7, #4]
 810a8ee:	681b      	ldr	r3, [r3, #0]
 810a8f0:	685b      	ldr	r3, [r3, #4]
 810a8f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810a8f6:	687b      	ldr	r3, [r7, #4]
 810a8f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810a8fa:	687b      	ldr	r3, [r7, #4]
 810a8fc:	681b      	ldr	r3, [r3, #0]
 810a8fe:	430a      	orrs	r2, r1
 810a900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810a902:	687b      	ldr	r3, [r7, #4]
 810a904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a90a:	d10a      	bne.n	810a922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810a90c:	687b      	ldr	r3, [r7, #4]
 810a90e:	681b      	ldr	r3, [r3, #0]
 810a910:	685b      	ldr	r3, [r3, #4]
 810a912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810a916:	687b      	ldr	r3, [r7, #4]
 810a918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810a91a:	687b      	ldr	r3, [r7, #4]
 810a91c:	681b      	ldr	r3, [r3, #0]
 810a91e:	430a      	orrs	r2, r1
 810a920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810a922:	687b      	ldr	r3, [r7, #4]
 810a924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a92a:	2b00      	cmp	r3, #0
 810a92c:	d00a      	beq.n	810a944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810a92e:	687b      	ldr	r3, [r7, #4]
 810a930:	681b      	ldr	r3, [r3, #0]
 810a932:	685b      	ldr	r3, [r3, #4]
 810a934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810a938:	687b      	ldr	r3, [r7, #4]
 810a93a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810a93c:	687b      	ldr	r3, [r7, #4]
 810a93e:	681b      	ldr	r3, [r3, #0]
 810a940:	430a      	orrs	r2, r1
 810a942:	605a      	str	r2, [r3, #4]
  }
}
 810a944:	bf00      	nop
 810a946:	370c      	adds	r7, #12
 810a948:	46bd      	mov	sp, r7
 810a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a94e:	4770      	bx	lr

0810a950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810a950:	b580      	push	{r7, lr}
 810a952:	b098      	sub	sp, #96	; 0x60
 810a954:	af02      	add	r7, sp, #8
 810a956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a958:	687b      	ldr	r3, [r7, #4]
 810a95a:	2200      	movs	r2, #0
 810a95c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810a960:	f7f8 fb6e 	bl	8103040 <HAL_GetTick>
 810a964:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810a966:	687b      	ldr	r3, [r7, #4]
 810a968:	681b      	ldr	r3, [r3, #0]
 810a96a:	681b      	ldr	r3, [r3, #0]
 810a96c:	f003 0308 	and.w	r3, r3, #8
 810a970:	2b08      	cmp	r3, #8
 810a972:	d12f      	bne.n	810a9d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a978:	9300      	str	r3, [sp, #0]
 810a97a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810a97c:	2200      	movs	r2, #0
 810a97e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810a982:	6878      	ldr	r0, [r7, #4]
 810a984:	f000 f88e 	bl	810aaa4 <UART_WaitOnFlagUntilTimeout>
 810a988:	4603      	mov	r3, r0
 810a98a:	2b00      	cmp	r3, #0
 810a98c:	d022      	beq.n	810a9d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810a98e:	687b      	ldr	r3, [r7, #4]
 810a990:	681b      	ldr	r3, [r3, #0]
 810a992:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a996:	e853 3f00 	ldrex	r3, [r3]
 810a99a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 810a99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a99e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810a9a2:	653b      	str	r3, [r7, #80]	; 0x50
 810a9a4:	687b      	ldr	r3, [r7, #4]
 810a9a6:	681b      	ldr	r3, [r3, #0]
 810a9a8:	461a      	mov	r2, r3
 810a9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810a9ac:	647b      	str	r3, [r7, #68]	; 0x44
 810a9ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a9b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810a9b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810a9b4:	e841 2300 	strex	r3, r2, [r1]
 810a9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 810a9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a9bc:	2b00      	cmp	r3, #0
 810a9be:	d1e6      	bne.n	810a98e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810a9c0:	687b      	ldr	r3, [r7, #4]
 810a9c2:	2220      	movs	r2, #32
 810a9c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 810a9c8:	687b      	ldr	r3, [r7, #4]
 810a9ca:	2200      	movs	r2, #0
 810a9cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a9d0:	2303      	movs	r3, #3
 810a9d2:	e063      	b.n	810aa9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810a9d4:	687b      	ldr	r3, [r7, #4]
 810a9d6:	681b      	ldr	r3, [r3, #0]
 810a9d8:	681b      	ldr	r3, [r3, #0]
 810a9da:	f003 0304 	and.w	r3, r3, #4
 810a9de:	2b04      	cmp	r3, #4
 810a9e0:	d149      	bne.n	810aa76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a9e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a9e6:	9300      	str	r3, [sp, #0]
 810a9e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810a9ea:	2200      	movs	r2, #0
 810a9ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810a9f0:	6878      	ldr	r0, [r7, #4]
 810a9f2:	f000 f857 	bl	810aaa4 <UART_WaitOnFlagUntilTimeout>
 810a9f6:	4603      	mov	r3, r0
 810a9f8:	2b00      	cmp	r3, #0
 810a9fa:	d03c      	beq.n	810aa76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a9fc:	687b      	ldr	r3, [r7, #4]
 810a9fe:	681b      	ldr	r3, [r3, #0]
 810aa00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810aa04:	e853 3f00 	ldrex	r3, [r3]
 810aa08:	623b      	str	r3, [r7, #32]
   return(result);
 810aa0a:	6a3b      	ldr	r3, [r7, #32]
 810aa0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810aa10:	64fb      	str	r3, [r7, #76]	; 0x4c
 810aa12:	687b      	ldr	r3, [r7, #4]
 810aa14:	681b      	ldr	r3, [r3, #0]
 810aa16:	461a      	mov	r2, r3
 810aa18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810aa1a:	633b      	str	r3, [r7, #48]	; 0x30
 810aa1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aa1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810aa20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810aa22:	e841 2300 	strex	r3, r2, [r1]
 810aa26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810aa28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810aa2a:	2b00      	cmp	r3, #0
 810aa2c:	d1e6      	bne.n	810a9fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810aa2e:	687b      	ldr	r3, [r7, #4]
 810aa30:	681b      	ldr	r3, [r3, #0]
 810aa32:	3308      	adds	r3, #8
 810aa34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aa36:	693b      	ldr	r3, [r7, #16]
 810aa38:	e853 3f00 	ldrex	r3, [r3]
 810aa3c:	60fb      	str	r3, [r7, #12]
   return(result);
 810aa3e:	68fb      	ldr	r3, [r7, #12]
 810aa40:	f023 0301 	bic.w	r3, r3, #1
 810aa44:	64bb      	str	r3, [r7, #72]	; 0x48
 810aa46:	687b      	ldr	r3, [r7, #4]
 810aa48:	681b      	ldr	r3, [r3, #0]
 810aa4a:	3308      	adds	r3, #8
 810aa4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810aa4e:	61fa      	str	r2, [r7, #28]
 810aa50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aa52:	69b9      	ldr	r1, [r7, #24]
 810aa54:	69fa      	ldr	r2, [r7, #28]
 810aa56:	e841 2300 	strex	r3, r2, [r1]
 810aa5a:	617b      	str	r3, [r7, #20]
   return(result);
 810aa5c:	697b      	ldr	r3, [r7, #20]
 810aa5e:	2b00      	cmp	r3, #0
 810aa60:	d1e5      	bne.n	810aa2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810aa62:	687b      	ldr	r3, [r7, #4]
 810aa64:	2220      	movs	r2, #32
 810aa66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810aa6a:	687b      	ldr	r3, [r7, #4]
 810aa6c:	2200      	movs	r2, #0
 810aa6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810aa72:	2303      	movs	r3, #3
 810aa74:	e012      	b.n	810aa9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810aa76:	687b      	ldr	r3, [r7, #4]
 810aa78:	2220      	movs	r2, #32
 810aa7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810aa7e:	687b      	ldr	r3, [r7, #4]
 810aa80:	2220      	movs	r2, #32
 810aa82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810aa86:	687b      	ldr	r3, [r7, #4]
 810aa88:	2200      	movs	r2, #0
 810aa8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810aa8c:	687b      	ldr	r3, [r7, #4]
 810aa8e:	2200      	movs	r2, #0
 810aa90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 810aa92:	687b      	ldr	r3, [r7, #4]
 810aa94:	2200      	movs	r2, #0
 810aa96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810aa9a:	2300      	movs	r3, #0
}
 810aa9c:	4618      	mov	r0, r3
 810aa9e:	3758      	adds	r7, #88	; 0x58
 810aaa0:	46bd      	mov	sp, r7
 810aaa2:	bd80      	pop	{r7, pc}

0810aaa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810aaa4:	b580      	push	{r7, lr}
 810aaa6:	b084      	sub	sp, #16
 810aaa8:	af00      	add	r7, sp, #0
 810aaaa:	60f8      	str	r0, [r7, #12]
 810aaac:	60b9      	str	r1, [r7, #8]
 810aaae:	603b      	str	r3, [r7, #0]
 810aab0:	4613      	mov	r3, r2
 810aab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810aab4:	e049      	b.n	810ab4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810aab6:	69bb      	ldr	r3, [r7, #24]
 810aab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810aabc:	d045      	beq.n	810ab4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810aabe:	f7f8 fabf 	bl	8103040 <HAL_GetTick>
 810aac2:	4602      	mov	r2, r0
 810aac4:	683b      	ldr	r3, [r7, #0]
 810aac6:	1ad3      	subs	r3, r2, r3
 810aac8:	69ba      	ldr	r2, [r7, #24]
 810aaca:	429a      	cmp	r2, r3
 810aacc:	d302      	bcc.n	810aad4 <UART_WaitOnFlagUntilTimeout+0x30>
 810aace:	69bb      	ldr	r3, [r7, #24]
 810aad0:	2b00      	cmp	r3, #0
 810aad2:	d101      	bne.n	810aad8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810aad4:	2303      	movs	r3, #3
 810aad6:	e048      	b.n	810ab6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810aad8:	68fb      	ldr	r3, [r7, #12]
 810aada:	681b      	ldr	r3, [r3, #0]
 810aadc:	681b      	ldr	r3, [r3, #0]
 810aade:	f003 0304 	and.w	r3, r3, #4
 810aae2:	2b00      	cmp	r3, #0
 810aae4:	d031      	beq.n	810ab4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810aae6:	68fb      	ldr	r3, [r7, #12]
 810aae8:	681b      	ldr	r3, [r3, #0]
 810aaea:	69db      	ldr	r3, [r3, #28]
 810aaec:	f003 0308 	and.w	r3, r3, #8
 810aaf0:	2b08      	cmp	r3, #8
 810aaf2:	d110      	bne.n	810ab16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810aaf4:	68fb      	ldr	r3, [r7, #12]
 810aaf6:	681b      	ldr	r3, [r3, #0]
 810aaf8:	2208      	movs	r2, #8
 810aafa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 810aafc:	68f8      	ldr	r0, [r7, #12]
 810aafe:	f000 f838 	bl	810ab72 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 810ab02:	68fb      	ldr	r3, [r7, #12]
 810ab04:	2208      	movs	r2, #8
 810ab06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 810ab0a:	68fb      	ldr	r3, [r7, #12]
 810ab0c:	2200      	movs	r2, #0
 810ab0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 810ab12:	2301      	movs	r3, #1
 810ab14:	e029      	b.n	810ab6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810ab16:	68fb      	ldr	r3, [r7, #12]
 810ab18:	681b      	ldr	r3, [r3, #0]
 810ab1a:	69db      	ldr	r3, [r3, #28]
 810ab1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810ab20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810ab24:	d111      	bne.n	810ab4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810ab26:	68fb      	ldr	r3, [r7, #12]
 810ab28:	681b      	ldr	r3, [r3, #0]
 810ab2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810ab2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810ab30:	68f8      	ldr	r0, [r7, #12]
 810ab32:	f000 f81e 	bl	810ab72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810ab36:	68fb      	ldr	r3, [r7, #12]
 810ab38:	2220      	movs	r2, #32
 810ab3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810ab3e:	68fb      	ldr	r3, [r7, #12]
 810ab40:	2200      	movs	r2, #0
 810ab42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 810ab46:	2303      	movs	r3, #3
 810ab48:	e00f      	b.n	810ab6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810ab4a:	68fb      	ldr	r3, [r7, #12]
 810ab4c:	681b      	ldr	r3, [r3, #0]
 810ab4e:	69da      	ldr	r2, [r3, #28]
 810ab50:	68bb      	ldr	r3, [r7, #8]
 810ab52:	4013      	ands	r3, r2
 810ab54:	68ba      	ldr	r2, [r7, #8]
 810ab56:	429a      	cmp	r2, r3
 810ab58:	bf0c      	ite	eq
 810ab5a:	2301      	moveq	r3, #1
 810ab5c:	2300      	movne	r3, #0
 810ab5e:	b2db      	uxtb	r3, r3
 810ab60:	461a      	mov	r2, r3
 810ab62:	79fb      	ldrb	r3, [r7, #7]
 810ab64:	429a      	cmp	r2, r3
 810ab66:	d0a6      	beq.n	810aab6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810ab68:	2300      	movs	r3, #0
}
 810ab6a:	4618      	mov	r0, r3
 810ab6c:	3710      	adds	r7, #16
 810ab6e:	46bd      	mov	sp, r7
 810ab70:	bd80      	pop	{r7, pc}

0810ab72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810ab72:	b480      	push	{r7}
 810ab74:	b095      	sub	sp, #84	; 0x54
 810ab76:	af00      	add	r7, sp, #0
 810ab78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ab7a:	687b      	ldr	r3, [r7, #4]
 810ab7c:	681b      	ldr	r3, [r3, #0]
 810ab7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ab80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ab82:	e853 3f00 	ldrex	r3, [r3]
 810ab86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810ab88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ab8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810ab8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 810ab90:	687b      	ldr	r3, [r7, #4]
 810ab92:	681b      	ldr	r3, [r3, #0]
 810ab94:	461a      	mov	r2, r3
 810ab96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810ab98:	643b      	str	r3, [r7, #64]	; 0x40
 810ab9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ab9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810ab9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810aba0:	e841 2300 	strex	r3, r2, [r1]
 810aba4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810aba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810aba8:	2b00      	cmp	r3, #0
 810abaa:	d1e6      	bne.n	810ab7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810abac:	687b      	ldr	r3, [r7, #4]
 810abae:	681b      	ldr	r3, [r3, #0]
 810abb0:	3308      	adds	r3, #8
 810abb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810abb4:	6a3b      	ldr	r3, [r7, #32]
 810abb6:	e853 3f00 	ldrex	r3, [r3]
 810abba:	61fb      	str	r3, [r7, #28]
   return(result);
 810abbc:	69fb      	ldr	r3, [r7, #28]
 810abbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810abc2:	f023 0301 	bic.w	r3, r3, #1
 810abc6:	64bb      	str	r3, [r7, #72]	; 0x48
 810abc8:	687b      	ldr	r3, [r7, #4]
 810abca:	681b      	ldr	r3, [r3, #0]
 810abcc:	3308      	adds	r3, #8
 810abce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810abd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 810abd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810abd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810abd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810abd8:	e841 2300 	strex	r3, r2, [r1]
 810abdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810abe0:	2b00      	cmp	r3, #0
 810abe2:	d1e3      	bne.n	810abac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810abe4:	687b      	ldr	r3, [r7, #4]
 810abe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810abe8:	2b01      	cmp	r3, #1
 810abea:	d118      	bne.n	810ac1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810abec:	687b      	ldr	r3, [r7, #4]
 810abee:	681b      	ldr	r3, [r3, #0]
 810abf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810abf2:	68fb      	ldr	r3, [r7, #12]
 810abf4:	e853 3f00 	ldrex	r3, [r3]
 810abf8:	60bb      	str	r3, [r7, #8]
   return(result);
 810abfa:	68bb      	ldr	r3, [r7, #8]
 810abfc:	f023 0310 	bic.w	r3, r3, #16
 810ac00:	647b      	str	r3, [r7, #68]	; 0x44
 810ac02:	687b      	ldr	r3, [r7, #4]
 810ac04:	681b      	ldr	r3, [r3, #0]
 810ac06:	461a      	mov	r2, r3
 810ac08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810ac0a:	61bb      	str	r3, [r7, #24]
 810ac0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ac0e:	6979      	ldr	r1, [r7, #20]
 810ac10:	69ba      	ldr	r2, [r7, #24]
 810ac12:	e841 2300 	strex	r3, r2, [r1]
 810ac16:	613b      	str	r3, [r7, #16]
   return(result);
 810ac18:	693b      	ldr	r3, [r7, #16]
 810ac1a:	2b00      	cmp	r3, #0
 810ac1c:	d1e6      	bne.n	810abec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810ac1e:	687b      	ldr	r3, [r7, #4]
 810ac20:	2220      	movs	r2, #32
 810ac22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ac26:	687b      	ldr	r3, [r7, #4]
 810ac28:	2200      	movs	r2, #0
 810ac2a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810ac2c:	687b      	ldr	r3, [r7, #4]
 810ac2e:	2200      	movs	r2, #0
 810ac30:	675a      	str	r2, [r3, #116]	; 0x74
}
 810ac32:	bf00      	nop
 810ac34:	3754      	adds	r7, #84	; 0x54
 810ac36:	46bd      	mov	sp, r7
 810ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac3c:	4770      	bx	lr

0810ac3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810ac3e:	b480      	push	{r7}
 810ac40:	b085      	sub	sp, #20
 810ac42:	af00      	add	r7, sp, #0
 810ac44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ac46:	687b      	ldr	r3, [r7, #4]
 810ac48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810ac4c:	2b01      	cmp	r3, #1
 810ac4e:	d101      	bne.n	810ac54 <HAL_UARTEx_DisableFifoMode+0x16>
 810ac50:	2302      	movs	r3, #2
 810ac52:	e027      	b.n	810aca4 <HAL_UARTEx_DisableFifoMode+0x66>
 810ac54:	687b      	ldr	r3, [r7, #4]
 810ac56:	2201      	movs	r2, #1
 810ac58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ac5c:	687b      	ldr	r3, [r7, #4]
 810ac5e:	2224      	movs	r2, #36	; 0x24
 810ac60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ac64:	687b      	ldr	r3, [r7, #4]
 810ac66:	681b      	ldr	r3, [r3, #0]
 810ac68:	681b      	ldr	r3, [r3, #0]
 810ac6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ac6c:	687b      	ldr	r3, [r7, #4]
 810ac6e:	681b      	ldr	r3, [r3, #0]
 810ac70:	681a      	ldr	r2, [r3, #0]
 810ac72:	687b      	ldr	r3, [r7, #4]
 810ac74:	681b      	ldr	r3, [r3, #0]
 810ac76:	f022 0201 	bic.w	r2, r2, #1
 810ac7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810ac7c:	68fb      	ldr	r3, [r7, #12]
 810ac7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810ac82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810ac84:	687b      	ldr	r3, [r7, #4]
 810ac86:	2200      	movs	r2, #0
 810ac88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ac8a:	687b      	ldr	r3, [r7, #4]
 810ac8c:	681b      	ldr	r3, [r3, #0]
 810ac8e:	68fa      	ldr	r2, [r7, #12]
 810ac90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ac92:	687b      	ldr	r3, [r7, #4]
 810ac94:	2220      	movs	r2, #32
 810ac96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ac9a:	687b      	ldr	r3, [r7, #4]
 810ac9c:	2200      	movs	r2, #0
 810ac9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810aca2:	2300      	movs	r3, #0
}
 810aca4:	4618      	mov	r0, r3
 810aca6:	3714      	adds	r7, #20
 810aca8:	46bd      	mov	sp, r7
 810acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810acae:	4770      	bx	lr

0810acb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810acb0:	b580      	push	{r7, lr}
 810acb2:	b084      	sub	sp, #16
 810acb4:	af00      	add	r7, sp, #0
 810acb6:	6078      	str	r0, [r7, #4]
 810acb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810acba:	687b      	ldr	r3, [r7, #4]
 810acbc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810acc0:	2b01      	cmp	r3, #1
 810acc2:	d101      	bne.n	810acc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810acc4:	2302      	movs	r3, #2
 810acc6:	e02d      	b.n	810ad24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810acc8:	687b      	ldr	r3, [r7, #4]
 810acca:	2201      	movs	r2, #1
 810accc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810acd0:	687b      	ldr	r3, [r7, #4]
 810acd2:	2224      	movs	r2, #36	; 0x24
 810acd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810acd8:	687b      	ldr	r3, [r7, #4]
 810acda:	681b      	ldr	r3, [r3, #0]
 810acdc:	681b      	ldr	r3, [r3, #0]
 810acde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ace0:	687b      	ldr	r3, [r7, #4]
 810ace2:	681b      	ldr	r3, [r3, #0]
 810ace4:	681a      	ldr	r2, [r3, #0]
 810ace6:	687b      	ldr	r3, [r7, #4]
 810ace8:	681b      	ldr	r3, [r3, #0]
 810acea:	f022 0201 	bic.w	r2, r2, #1
 810acee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810acf0:	687b      	ldr	r3, [r7, #4]
 810acf2:	681b      	ldr	r3, [r3, #0]
 810acf4:	689b      	ldr	r3, [r3, #8]
 810acf6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810acfa:	687b      	ldr	r3, [r7, #4]
 810acfc:	681b      	ldr	r3, [r3, #0]
 810acfe:	683a      	ldr	r2, [r7, #0]
 810ad00:	430a      	orrs	r2, r1
 810ad02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ad04:	6878      	ldr	r0, [r7, #4]
 810ad06:	f000 f84f 	bl	810ada8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ad0a:	687b      	ldr	r3, [r7, #4]
 810ad0c:	681b      	ldr	r3, [r3, #0]
 810ad0e:	68fa      	ldr	r2, [r7, #12]
 810ad10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ad12:	687b      	ldr	r3, [r7, #4]
 810ad14:	2220      	movs	r2, #32
 810ad16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ad1a:	687b      	ldr	r3, [r7, #4]
 810ad1c:	2200      	movs	r2, #0
 810ad1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810ad22:	2300      	movs	r3, #0
}
 810ad24:	4618      	mov	r0, r3
 810ad26:	3710      	adds	r7, #16
 810ad28:	46bd      	mov	sp, r7
 810ad2a:	bd80      	pop	{r7, pc}

0810ad2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ad2c:	b580      	push	{r7, lr}
 810ad2e:	b084      	sub	sp, #16
 810ad30:	af00      	add	r7, sp, #0
 810ad32:	6078      	str	r0, [r7, #4]
 810ad34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ad36:	687b      	ldr	r3, [r7, #4]
 810ad38:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810ad3c:	2b01      	cmp	r3, #1
 810ad3e:	d101      	bne.n	810ad44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810ad40:	2302      	movs	r3, #2
 810ad42:	e02d      	b.n	810ada0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810ad44:	687b      	ldr	r3, [r7, #4]
 810ad46:	2201      	movs	r2, #1
 810ad48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ad4c:	687b      	ldr	r3, [r7, #4]
 810ad4e:	2224      	movs	r2, #36	; 0x24
 810ad50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ad54:	687b      	ldr	r3, [r7, #4]
 810ad56:	681b      	ldr	r3, [r3, #0]
 810ad58:	681b      	ldr	r3, [r3, #0]
 810ad5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ad5c:	687b      	ldr	r3, [r7, #4]
 810ad5e:	681b      	ldr	r3, [r3, #0]
 810ad60:	681a      	ldr	r2, [r3, #0]
 810ad62:	687b      	ldr	r3, [r7, #4]
 810ad64:	681b      	ldr	r3, [r3, #0]
 810ad66:	f022 0201 	bic.w	r2, r2, #1
 810ad6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810ad6c:	687b      	ldr	r3, [r7, #4]
 810ad6e:	681b      	ldr	r3, [r3, #0]
 810ad70:	689b      	ldr	r3, [r3, #8]
 810ad72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810ad76:	687b      	ldr	r3, [r7, #4]
 810ad78:	681b      	ldr	r3, [r3, #0]
 810ad7a:	683a      	ldr	r2, [r7, #0]
 810ad7c:	430a      	orrs	r2, r1
 810ad7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ad80:	6878      	ldr	r0, [r7, #4]
 810ad82:	f000 f811 	bl	810ada8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ad86:	687b      	ldr	r3, [r7, #4]
 810ad88:	681b      	ldr	r3, [r3, #0]
 810ad8a:	68fa      	ldr	r2, [r7, #12]
 810ad8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ad8e:	687b      	ldr	r3, [r7, #4]
 810ad90:	2220      	movs	r2, #32
 810ad92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ad96:	687b      	ldr	r3, [r7, #4]
 810ad98:	2200      	movs	r2, #0
 810ad9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810ad9e:	2300      	movs	r3, #0
}
 810ada0:	4618      	mov	r0, r3
 810ada2:	3710      	adds	r7, #16
 810ada4:	46bd      	mov	sp, r7
 810ada6:	bd80      	pop	{r7, pc}

0810ada8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810ada8:	b480      	push	{r7}
 810adaa:	b085      	sub	sp, #20
 810adac:	af00      	add	r7, sp, #0
 810adae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810adb0:	687b      	ldr	r3, [r7, #4]
 810adb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810adb4:	2b00      	cmp	r3, #0
 810adb6:	d108      	bne.n	810adca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810adb8:	687b      	ldr	r3, [r7, #4]
 810adba:	2201      	movs	r2, #1
 810adbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810adc0:	687b      	ldr	r3, [r7, #4]
 810adc2:	2201      	movs	r2, #1
 810adc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810adc8:	e031      	b.n	810ae2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810adca:	2310      	movs	r3, #16
 810adcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810adce:	2310      	movs	r3, #16
 810add0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810add2:	687b      	ldr	r3, [r7, #4]
 810add4:	681b      	ldr	r3, [r3, #0]
 810add6:	689b      	ldr	r3, [r3, #8]
 810add8:	0e5b      	lsrs	r3, r3, #25
 810adda:	b2db      	uxtb	r3, r3
 810addc:	f003 0307 	and.w	r3, r3, #7
 810ade0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810ade2:	687b      	ldr	r3, [r7, #4]
 810ade4:	681b      	ldr	r3, [r3, #0]
 810ade6:	689b      	ldr	r3, [r3, #8]
 810ade8:	0f5b      	lsrs	r3, r3, #29
 810adea:	b2db      	uxtb	r3, r3
 810adec:	f003 0307 	and.w	r3, r3, #7
 810adf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810adf2:	7bbb      	ldrb	r3, [r7, #14]
 810adf4:	7b3a      	ldrb	r2, [r7, #12]
 810adf6:	4911      	ldr	r1, [pc, #68]	; (810ae3c <UARTEx_SetNbDataToProcess+0x94>)
 810adf8:	5c8a      	ldrb	r2, [r1, r2]
 810adfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810adfe:	7b3a      	ldrb	r2, [r7, #12]
 810ae00:	490f      	ldr	r1, [pc, #60]	; (810ae40 <UARTEx_SetNbDataToProcess+0x98>)
 810ae02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ae04:	fb93 f3f2 	sdiv	r3, r3, r2
 810ae08:	b29a      	uxth	r2, r3
 810ae0a:	687b      	ldr	r3, [r7, #4]
 810ae0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ae10:	7bfb      	ldrb	r3, [r7, #15]
 810ae12:	7b7a      	ldrb	r2, [r7, #13]
 810ae14:	4909      	ldr	r1, [pc, #36]	; (810ae3c <UARTEx_SetNbDataToProcess+0x94>)
 810ae16:	5c8a      	ldrb	r2, [r1, r2]
 810ae18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810ae1c:	7b7a      	ldrb	r2, [r7, #13]
 810ae1e:	4908      	ldr	r1, [pc, #32]	; (810ae40 <UARTEx_SetNbDataToProcess+0x98>)
 810ae20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ae22:	fb93 f3f2 	sdiv	r3, r3, r2
 810ae26:	b29a      	uxth	r2, r3
 810ae28:	687b      	ldr	r3, [r7, #4]
 810ae2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810ae2e:	bf00      	nop
 810ae30:	3714      	adds	r7, #20
 810ae32:	46bd      	mov	sp, r7
 810ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae38:	4770      	bx	lr
 810ae3a:	bf00      	nop
 810ae3c:	0810fb28 	.word	0x0810fb28
 810ae40:	0810fb30 	.word	0x0810fb30

0810ae44 <__errno>:
 810ae44:	4b01      	ldr	r3, [pc, #4]	; (810ae4c <__errno+0x8>)
 810ae46:	6818      	ldr	r0, [r3, #0]
 810ae48:	4770      	bx	lr
 810ae4a:	bf00      	nop
 810ae4c:	10000020 	.word	0x10000020

0810ae50 <__libc_init_array>:
 810ae50:	b570      	push	{r4, r5, r6, lr}
 810ae52:	4d0d      	ldr	r5, [pc, #52]	; (810ae88 <__libc_init_array+0x38>)
 810ae54:	4c0d      	ldr	r4, [pc, #52]	; (810ae8c <__libc_init_array+0x3c>)
 810ae56:	1b64      	subs	r4, r4, r5
 810ae58:	10a4      	asrs	r4, r4, #2
 810ae5a:	2600      	movs	r6, #0
 810ae5c:	42a6      	cmp	r6, r4
 810ae5e:	d109      	bne.n	810ae74 <__libc_init_array+0x24>
 810ae60:	4d0b      	ldr	r5, [pc, #44]	; (810ae90 <__libc_init_array+0x40>)
 810ae62:	4c0c      	ldr	r4, [pc, #48]	; (810ae94 <__libc_init_array+0x44>)
 810ae64:	f004 fd1a 	bl	810f89c <_init>
 810ae68:	1b64      	subs	r4, r4, r5
 810ae6a:	10a4      	asrs	r4, r4, #2
 810ae6c:	2600      	movs	r6, #0
 810ae6e:	42a6      	cmp	r6, r4
 810ae70:	d105      	bne.n	810ae7e <__libc_init_array+0x2e>
 810ae72:	bd70      	pop	{r4, r5, r6, pc}
 810ae74:	f855 3b04 	ldr.w	r3, [r5], #4
 810ae78:	4798      	blx	r3
 810ae7a:	3601      	adds	r6, #1
 810ae7c:	e7ee      	b.n	810ae5c <__libc_init_array+0xc>
 810ae7e:	f855 3b04 	ldr.w	r3, [r5], #4
 810ae82:	4798      	blx	r3
 810ae84:	3601      	adds	r6, #1
 810ae86:	e7f2      	b.n	810ae6e <__libc_init_array+0x1e>
 810ae88:	0810ffec 	.word	0x0810ffec
 810ae8c:	0810ffec 	.word	0x0810ffec
 810ae90:	0810ffec 	.word	0x0810ffec
 810ae94:	0810fff0 	.word	0x0810fff0

0810ae98 <malloc>:
 810ae98:	4b02      	ldr	r3, [pc, #8]	; (810aea4 <malloc+0xc>)
 810ae9a:	4601      	mov	r1, r0
 810ae9c:	6818      	ldr	r0, [r3, #0]
 810ae9e:	f000 b885 	b.w	810afac <_malloc_r>
 810aea2:	bf00      	nop
 810aea4:	10000020 	.word	0x10000020

0810aea8 <memcpy>:
 810aea8:	440a      	add	r2, r1
 810aeaa:	4291      	cmp	r1, r2
 810aeac:	f100 33ff 	add.w	r3, r0, #4294967295
 810aeb0:	d100      	bne.n	810aeb4 <memcpy+0xc>
 810aeb2:	4770      	bx	lr
 810aeb4:	b510      	push	{r4, lr}
 810aeb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 810aeba:	f803 4f01 	strb.w	r4, [r3, #1]!
 810aebe:	4291      	cmp	r1, r2
 810aec0:	d1f9      	bne.n	810aeb6 <memcpy+0xe>
 810aec2:	bd10      	pop	{r4, pc}

0810aec4 <memset>:
 810aec4:	4402      	add	r2, r0
 810aec6:	4603      	mov	r3, r0
 810aec8:	4293      	cmp	r3, r2
 810aeca:	d100      	bne.n	810aece <memset+0xa>
 810aecc:	4770      	bx	lr
 810aece:	f803 1b01 	strb.w	r1, [r3], #1
 810aed2:	e7f9      	b.n	810aec8 <memset+0x4>

0810aed4 <_free_r>:
 810aed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810aed6:	2900      	cmp	r1, #0
 810aed8:	d044      	beq.n	810af64 <_free_r+0x90>
 810aeda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810aede:	9001      	str	r0, [sp, #4]
 810aee0:	2b00      	cmp	r3, #0
 810aee2:	f1a1 0404 	sub.w	r4, r1, #4
 810aee6:	bfb8      	it	lt
 810aee8:	18e4      	addlt	r4, r4, r3
 810aeea:	f003 fb9b 	bl	810e624 <__malloc_lock>
 810aeee:	4a1e      	ldr	r2, [pc, #120]	; (810af68 <_free_r+0x94>)
 810aef0:	9801      	ldr	r0, [sp, #4]
 810aef2:	6813      	ldr	r3, [r2, #0]
 810aef4:	b933      	cbnz	r3, 810af04 <_free_r+0x30>
 810aef6:	6063      	str	r3, [r4, #4]
 810aef8:	6014      	str	r4, [r2, #0]
 810aefa:	b003      	add	sp, #12
 810aefc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810af00:	f003 bb96 	b.w	810e630 <__malloc_unlock>
 810af04:	42a3      	cmp	r3, r4
 810af06:	d908      	bls.n	810af1a <_free_r+0x46>
 810af08:	6825      	ldr	r5, [r4, #0]
 810af0a:	1961      	adds	r1, r4, r5
 810af0c:	428b      	cmp	r3, r1
 810af0e:	bf01      	itttt	eq
 810af10:	6819      	ldreq	r1, [r3, #0]
 810af12:	685b      	ldreq	r3, [r3, #4]
 810af14:	1949      	addeq	r1, r1, r5
 810af16:	6021      	streq	r1, [r4, #0]
 810af18:	e7ed      	b.n	810aef6 <_free_r+0x22>
 810af1a:	461a      	mov	r2, r3
 810af1c:	685b      	ldr	r3, [r3, #4]
 810af1e:	b10b      	cbz	r3, 810af24 <_free_r+0x50>
 810af20:	42a3      	cmp	r3, r4
 810af22:	d9fa      	bls.n	810af1a <_free_r+0x46>
 810af24:	6811      	ldr	r1, [r2, #0]
 810af26:	1855      	adds	r5, r2, r1
 810af28:	42a5      	cmp	r5, r4
 810af2a:	d10b      	bne.n	810af44 <_free_r+0x70>
 810af2c:	6824      	ldr	r4, [r4, #0]
 810af2e:	4421      	add	r1, r4
 810af30:	1854      	adds	r4, r2, r1
 810af32:	42a3      	cmp	r3, r4
 810af34:	6011      	str	r1, [r2, #0]
 810af36:	d1e0      	bne.n	810aefa <_free_r+0x26>
 810af38:	681c      	ldr	r4, [r3, #0]
 810af3a:	685b      	ldr	r3, [r3, #4]
 810af3c:	6053      	str	r3, [r2, #4]
 810af3e:	4421      	add	r1, r4
 810af40:	6011      	str	r1, [r2, #0]
 810af42:	e7da      	b.n	810aefa <_free_r+0x26>
 810af44:	d902      	bls.n	810af4c <_free_r+0x78>
 810af46:	230c      	movs	r3, #12
 810af48:	6003      	str	r3, [r0, #0]
 810af4a:	e7d6      	b.n	810aefa <_free_r+0x26>
 810af4c:	6825      	ldr	r5, [r4, #0]
 810af4e:	1961      	adds	r1, r4, r5
 810af50:	428b      	cmp	r3, r1
 810af52:	bf04      	itt	eq
 810af54:	6819      	ldreq	r1, [r3, #0]
 810af56:	685b      	ldreq	r3, [r3, #4]
 810af58:	6063      	str	r3, [r4, #4]
 810af5a:	bf04      	itt	eq
 810af5c:	1949      	addeq	r1, r1, r5
 810af5e:	6021      	streq	r1, [r4, #0]
 810af60:	6054      	str	r4, [r2, #4]
 810af62:	e7ca      	b.n	810aefa <_free_r+0x26>
 810af64:	b003      	add	sp, #12
 810af66:	bd30      	pop	{r4, r5, pc}
 810af68:	100004a8 	.word	0x100004a8

0810af6c <sbrk_aligned>:
 810af6c:	b570      	push	{r4, r5, r6, lr}
 810af6e:	4e0e      	ldr	r6, [pc, #56]	; (810afa8 <sbrk_aligned+0x3c>)
 810af70:	460c      	mov	r4, r1
 810af72:	6831      	ldr	r1, [r6, #0]
 810af74:	4605      	mov	r5, r0
 810af76:	b911      	cbnz	r1, 810af7e <sbrk_aligned+0x12>
 810af78:	f000 ff94 	bl	810bea4 <_sbrk_r>
 810af7c:	6030      	str	r0, [r6, #0]
 810af7e:	4621      	mov	r1, r4
 810af80:	4628      	mov	r0, r5
 810af82:	f000 ff8f 	bl	810bea4 <_sbrk_r>
 810af86:	1c43      	adds	r3, r0, #1
 810af88:	d00a      	beq.n	810afa0 <sbrk_aligned+0x34>
 810af8a:	1cc4      	adds	r4, r0, #3
 810af8c:	f024 0403 	bic.w	r4, r4, #3
 810af90:	42a0      	cmp	r0, r4
 810af92:	d007      	beq.n	810afa4 <sbrk_aligned+0x38>
 810af94:	1a21      	subs	r1, r4, r0
 810af96:	4628      	mov	r0, r5
 810af98:	f000 ff84 	bl	810bea4 <_sbrk_r>
 810af9c:	3001      	adds	r0, #1
 810af9e:	d101      	bne.n	810afa4 <sbrk_aligned+0x38>
 810afa0:	f04f 34ff 	mov.w	r4, #4294967295
 810afa4:	4620      	mov	r0, r4
 810afa6:	bd70      	pop	{r4, r5, r6, pc}
 810afa8:	100004ac 	.word	0x100004ac

0810afac <_malloc_r>:
 810afac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810afb0:	1ccd      	adds	r5, r1, #3
 810afb2:	f025 0503 	bic.w	r5, r5, #3
 810afb6:	3508      	adds	r5, #8
 810afb8:	2d0c      	cmp	r5, #12
 810afba:	bf38      	it	cc
 810afbc:	250c      	movcc	r5, #12
 810afbe:	2d00      	cmp	r5, #0
 810afc0:	4607      	mov	r7, r0
 810afc2:	db01      	blt.n	810afc8 <_malloc_r+0x1c>
 810afc4:	42a9      	cmp	r1, r5
 810afc6:	d905      	bls.n	810afd4 <_malloc_r+0x28>
 810afc8:	230c      	movs	r3, #12
 810afca:	603b      	str	r3, [r7, #0]
 810afcc:	2600      	movs	r6, #0
 810afce:	4630      	mov	r0, r6
 810afd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810afd4:	4e2e      	ldr	r6, [pc, #184]	; (810b090 <_malloc_r+0xe4>)
 810afd6:	f003 fb25 	bl	810e624 <__malloc_lock>
 810afda:	6833      	ldr	r3, [r6, #0]
 810afdc:	461c      	mov	r4, r3
 810afde:	bb34      	cbnz	r4, 810b02e <_malloc_r+0x82>
 810afe0:	4629      	mov	r1, r5
 810afe2:	4638      	mov	r0, r7
 810afe4:	f7ff ffc2 	bl	810af6c <sbrk_aligned>
 810afe8:	1c43      	adds	r3, r0, #1
 810afea:	4604      	mov	r4, r0
 810afec:	d14d      	bne.n	810b08a <_malloc_r+0xde>
 810afee:	6834      	ldr	r4, [r6, #0]
 810aff0:	4626      	mov	r6, r4
 810aff2:	2e00      	cmp	r6, #0
 810aff4:	d140      	bne.n	810b078 <_malloc_r+0xcc>
 810aff6:	6823      	ldr	r3, [r4, #0]
 810aff8:	4631      	mov	r1, r6
 810affa:	4638      	mov	r0, r7
 810affc:	eb04 0803 	add.w	r8, r4, r3
 810b000:	f000 ff50 	bl	810bea4 <_sbrk_r>
 810b004:	4580      	cmp	r8, r0
 810b006:	d13a      	bne.n	810b07e <_malloc_r+0xd2>
 810b008:	6821      	ldr	r1, [r4, #0]
 810b00a:	3503      	adds	r5, #3
 810b00c:	1a6d      	subs	r5, r5, r1
 810b00e:	f025 0503 	bic.w	r5, r5, #3
 810b012:	3508      	adds	r5, #8
 810b014:	2d0c      	cmp	r5, #12
 810b016:	bf38      	it	cc
 810b018:	250c      	movcc	r5, #12
 810b01a:	4629      	mov	r1, r5
 810b01c:	4638      	mov	r0, r7
 810b01e:	f7ff ffa5 	bl	810af6c <sbrk_aligned>
 810b022:	3001      	adds	r0, #1
 810b024:	d02b      	beq.n	810b07e <_malloc_r+0xd2>
 810b026:	6823      	ldr	r3, [r4, #0]
 810b028:	442b      	add	r3, r5
 810b02a:	6023      	str	r3, [r4, #0]
 810b02c:	e00e      	b.n	810b04c <_malloc_r+0xa0>
 810b02e:	6822      	ldr	r2, [r4, #0]
 810b030:	1b52      	subs	r2, r2, r5
 810b032:	d41e      	bmi.n	810b072 <_malloc_r+0xc6>
 810b034:	2a0b      	cmp	r2, #11
 810b036:	d916      	bls.n	810b066 <_malloc_r+0xba>
 810b038:	1961      	adds	r1, r4, r5
 810b03a:	42a3      	cmp	r3, r4
 810b03c:	6025      	str	r5, [r4, #0]
 810b03e:	bf18      	it	ne
 810b040:	6059      	strne	r1, [r3, #4]
 810b042:	6863      	ldr	r3, [r4, #4]
 810b044:	bf08      	it	eq
 810b046:	6031      	streq	r1, [r6, #0]
 810b048:	5162      	str	r2, [r4, r5]
 810b04a:	604b      	str	r3, [r1, #4]
 810b04c:	4638      	mov	r0, r7
 810b04e:	f104 060b 	add.w	r6, r4, #11
 810b052:	f003 faed 	bl	810e630 <__malloc_unlock>
 810b056:	f026 0607 	bic.w	r6, r6, #7
 810b05a:	1d23      	adds	r3, r4, #4
 810b05c:	1af2      	subs	r2, r6, r3
 810b05e:	d0b6      	beq.n	810afce <_malloc_r+0x22>
 810b060:	1b9b      	subs	r3, r3, r6
 810b062:	50a3      	str	r3, [r4, r2]
 810b064:	e7b3      	b.n	810afce <_malloc_r+0x22>
 810b066:	6862      	ldr	r2, [r4, #4]
 810b068:	42a3      	cmp	r3, r4
 810b06a:	bf0c      	ite	eq
 810b06c:	6032      	streq	r2, [r6, #0]
 810b06e:	605a      	strne	r2, [r3, #4]
 810b070:	e7ec      	b.n	810b04c <_malloc_r+0xa0>
 810b072:	4623      	mov	r3, r4
 810b074:	6864      	ldr	r4, [r4, #4]
 810b076:	e7b2      	b.n	810afde <_malloc_r+0x32>
 810b078:	4634      	mov	r4, r6
 810b07a:	6876      	ldr	r6, [r6, #4]
 810b07c:	e7b9      	b.n	810aff2 <_malloc_r+0x46>
 810b07e:	230c      	movs	r3, #12
 810b080:	603b      	str	r3, [r7, #0]
 810b082:	4638      	mov	r0, r7
 810b084:	f003 fad4 	bl	810e630 <__malloc_unlock>
 810b088:	e7a1      	b.n	810afce <_malloc_r+0x22>
 810b08a:	6025      	str	r5, [r4, #0]
 810b08c:	e7de      	b.n	810b04c <_malloc_r+0xa0>
 810b08e:	bf00      	nop
 810b090:	100004a8 	.word	0x100004a8

0810b094 <__cvt>:
 810b094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810b098:	ec55 4b10 	vmov	r4, r5, d0
 810b09c:	2d00      	cmp	r5, #0
 810b09e:	460e      	mov	r6, r1
 810b0a0:	4619      	mov	r1, r3
 810b0a2:	462b      	mov	r3, r5
 810b0a4:	bfbb      	ittet	lt
 810b0a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810b0aa:	461d      	movlt	r5, r3
 810b0ac:	2300      	movge	r3, #0
 810b0ae:	232d      	movlt	r3, #45	; 0x2d
 810b0b0:	700b      	strb	r3, [r1, #0]
 810b0b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b0b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810b0b8:	4691      	mov	r9, r2
 810b0ba:	f023 0820 	bic.w	r8, r3, #32
 810b0be:	bfbc      	itt	lt
 810b0c0:	4622      	movlt	r2, r4
 810b0c2:	4614      	movlt	r4, r2
 810b0c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810b0c8:	d005      	beq.n	810b0d6 <__cvt+0x42>
 810b0ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810b0ce:	d100      	bne.n	810b0d2 <__cvt+0x3e>
 810b0d0:	3601      	adds	r6, #1
 810b0d2:	2102      	movs	r1, #2
 810b0d4:	e000      	b.n	810b0d8 <__cvt+0x44>
 810b0d6:	2103      	movs	r1, #3
 810b0d8:	ab03      	add	r3, sp, #12
 810b0da:	9301      	str	r3, [sp, #4]
 810b0dc:	ab02      	add	r3, sp, #8
 810b0de:	9300      	str	r3, [sp, #0]
 810b0e0:	ec45 4b10 	vmov	d0, r4, r5
 810b0e4:	4653      	mov	r3, sl
 810b0e6:	4632      	mov	r2, r6
 810b0e8:	f001 ff0a 	bl	810cf00 <_dtoa_r>
 810b0ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810b0f0:	4607      	mov	r7, r0
 810b0f2:	d102      	bne.n	810b0fa <__cvt+0x66>
 810b0f4:	f019 0f01 	tst.w	r9, #1
 810b0f8:	d022      	beq.n	810b140 <__cvt+0xac>
 810b0fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810b0fe:	eb07 0906 	add.w	r9, r7, r6
 810b102:	d110      	bne.n	810b126 <__cvt+0x92>
 810b104:	783b      	ldrb	r3, [r7, #0]
 810b106:	2b30      	cmp	r3, #48	; 0x30
 810b108:	d10a      	bne.n	810b120 <__cvt+0x8c>
 810b10a:	2200      	movs	r2, #0
 810b10c:	2300      	movs	r3, #0
 810b10e:	4620      	mov	r0, r4
 810b110:	4629      	mov	r1, r5
 810b112:	f7f5 fd61 	bl	8100bd8 <__aeabi_dcmpeq>
 810b116:	b918      	cbnz	r0, 810b120 <__cvt+0x8c>
 810b118:	f1c6 0601 	rsb	r6, r6, #1
 810b11c:	f8ca 6000 	str.w	r6, [sl]
 810b120:	f8da 3000 	ldr.w	r3, [sl]
 810b124:	4499      	add	r9, r3
 810b126:	2200      	movs	r2, #0
 810b128:	2300      	movs	r3, #0
 810b12a:	4620      	mov	r0, r4
 810b12c:	4629      	mov	r1, r5
 810b12e:	f7f5 fd53 	bl	8100bd8 <__aeabi_dcmpeq>
 810b132:	b108      	cbz	r0, 810b138 <__cvt+0xa4>
 810b134:	f8cd 900c 	str.w	r9, [sp, #12]
 810b138:	2230      	movs	r2, #48	; 0x30
 810b13a:	9b03      	ldr	r3, [sp, #12]
 810b13c:	454b      	cmp	r3, r9
 810b13e:	d307      	bcc.n	810b150 <__cvt+0xbc>
 810b140:	9b03      	ldr	r3, [sp, #12]
 810b142:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810b144:	1bdb      	subs	r3, r3, r7
 810b146:	4638      	mov	r0, r7
 810b148:	6013      	str	r3, [r2, #0]
 810b14a:	b004      	add	sp, #16
 810b14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b150:	1c59      	adds	r1, r3, #1
 810b152:	9103      	str	r1, [sp, #12]
 810b154:	701a      	strb	r2, [r3, #0]
 810b156:	e7f0      	b.n	810b13a <__cvt+0xa6>

0810b158 <__exponent>:
 810b158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810b15a:	4603      	mov	r3, r0
 810b15c:	2900      	cmp	r1, #0
 810b15e:	bfb8      	it	lt
 810b160:	4249      	neglt	r1, r1
 810b162:	f803 2b02 	strb.w	r2, [r3], #2
 810b166:	bfb4      	ite	lt
 810b168:	222d      	movlt	r2, #45	; 0x2d
 810b16a:	222b      	movge	r2, #43	; 0x2b
 810b16c:	2909      	cmp	r1, #9
 810b16e:	7042      	strb	r2, [r0, #1]
 810b170:	dd2a      	ble.n	810b1c8 <__exponent+0x70>
 810b172:	f10d 0407 	add.w	r4, sp, #7
 810b176:	46a4      	mov	ip, r4
 810b178:	270a      	movs	r7, #10
 810b17a:	46a6      	mov	lr, r4
 810b17c:	460a      	mov	r2, r1
 810b17e:	fb91 f6f7 	sdiv	r6, r1, r7
 810b182:	fb07 1516 	mls	r5, r7, r6, r1
 810b186:	3530      	adds	r5, #48	; 0x30
 810b188:	2a63      	cmp	r2, #99	; 0x63
 810b18a:	f104 34ff 	add.w	r4, r4, #4294967295
 810b18e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 810b192:	4631      	mov	r1, r6
 810b194:	dcf1      	bgt.n	810b17a <__exponent+0x22>
 810b196:	3130      	adds	r1, #48	; 0x30
 810b198:	f1ae 0502 	sub.w	r5, lr, #2
 810b19c:	f804 1c01 	strb.w	r1, [r4, #-1]
 810b1a0:	1c44      	adds	r4, r0, #1
 810b1a2:	4629      	mov	r1, r5
 810b1a4:	4561      	cmp	r1, ip
 810b1a6:	d30a      	bcc.n	810b1be <__exponent+0x66>
 810b1a8:	f10d 0209 	add.w	r2, sp, #9
 810b1ac:	eba2 020e 	sub.w	r2, r2, lr
 810b1b0:	4565      	cmp	r5, ip
 810b1b2:	bf88      	it	hi
 810b1b4:	2200      	movhi	r2, #0
 810b1b6:	4413      	add	r3, r2
 810b1b8:	1a18      	subs	r0, r3, r0
 810b1ba:	b003      	add	sp, #12
 810b1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810b1be:	f811 2b01 	ldrb.w	r2, [r1], #1
 810b1c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 810b1c6:	e7ed      	b.n	810b1a4 <__exponent+0x4c>
 810b1c8:	2330      	movs	r3, #48	; 0x30
 810b1ca:	3130      	adds	r1, #48	; 0x30
 810b1cc:	7083      	strb	r3, [r0, #2]
 810b1ce:	70c1      	strb	r1, [r0, #3]
 810b1d0:	1d03      	adds	r3, r0, #4
 810b1d2:	e7f1      	b.n	810b1b8 <__exponent+0x60>

0810b1d4 <_printf_float>:
 810b1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b1d8:	ed2d 8b02 	vpush	{d8}
 810b1dc:	b08d      	sub	sp, #52	; 0x34
 810b1de:	460c      	mov	r4, r1
 810b1e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810b1e4:	4616      	mov	r6, r2
 810b1e6:	461f      	mov	r7, r3
 810b1e8:	4605      	mov	r5, r0
 810b1ea:	f003 f99d 	bl	810e528 <_localeconv_r>
 810b1ee:	f8d0 a000 	ldr.w	sl, [r0]
 810b1f2:	4650      	mov	r0, sl
 810b1f4:	f7f5 f874 	bl	81002e0 <strlen>
 810b1f8:	2300      	movs	r3, #0
 810b1fa:	930a      	str	r3, [sp, #40]	; 0x28
 810b1fc:	6823      	ldr	r3, [r4, #0]
 810b1fe:	9305      	str	r3, [sp, #20]
 810b200:	f8d8 3000 	ldr.w	r3, [r8]
 810b204:	f894 b018 	ldrb.w	fp, [r4, #24]
 810b208:	3307      	adds	r3, #7
 810b20a:	f023 0307 	bic.w	r3, r3, #7
 810b20e:	f103 0208 	add.w	r2, r3, #8
 810b212:	f8c8 2000 	str.w	r2, [r8]
 810b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b21a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810b21e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810b222:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810b226:	9307      	str	r3, [sp, #28]
 810b228:	f8cd 8018 	str.w	r8, [sp, #24]
 810b22c:	ee08 0a10 	vmov	s16, r0
 810b230:	4b9f      	ldr	r3, [pc, #636]	; (810b4b0 <_printf_float+0x2dc>)
 810b232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810b236:	f04f 32ff 	mov.w	r2, #4294967295
 810b23a:	f7f5 fcff 	bl	8100c3c <__aeabi_dcmpun>
 810b23e:	bb88      	cbnz	r0, 810b2a4 <_printf_float+0xd0>
 810b240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810b244:	4b9a      	ldr	r3, [pc, #616]	; (810b4b0 <_printf_float+0x2dc>)
 810b246:	f04f 32ff 	mov.w	r2, #4294967295
 810b24a:	f7f5 fcd9 	bl	8100c00 <__aeabi_dcmple>
 810b24e:	bb48      	cbnz	r0, 810b2a4 <_printf_float+0xd0>
 810b250:	2200      	movs	r2, #0
 810b252:	2300      	movs	r3, #0
 810b254:	4640      	mov	r0, r8
 810b256:	4649      	mov	r1, r9
 810b258:	f7f5 fcc8 	bl	8100bec <__aeabi_dcmplt>
 810b25c:	b110      	cbz	r0, 810b264 <_printf_float+0x90>
 810b25e:	232d      	movs	r3, #45	; 0x2d
 810b260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b264:	4b93      	ldr	r3, [pc, #588]	; (810b4b4 <_printf_float+0x2e0>)
 810b266:	4894      	ldr	r0, [pc, #592]	; (810b4b8 <_printf_float+0x2e4>)
 810b268:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 810b26c:	bf94      	ite	ls
 810b26e:	4698      	movls	r8, r3
 810b270:	4680      	movhi	r8, r0
 810b272:	2303      	movs	r3, #3
 810b274:	6123      	str	r3, [r4, #16]
 810b276:	9b05      	ldr	r3, [sp, #20]
 810b278:	f023 0204 	bic.w	r2, r3, #4
 810b27c:	6022      	str	r2, [r4, #0]
 810b27e:	f04f 0900 	mov.w	r9, #0
 810b282:	9700      	str	r7, [sp, #0]
 810b284:	4633      	mov	r3, r6
 810b286:	aa0b      	add	r2, sp, #44	; 0x2c
 810b288:	4621      	mov	r1, r4
 810b28a:	4628      	mov	r0, r5
 810b28c:	f000 f9d8 	bl	810b640 <_printf_common>
 810b290:	3001      	adds	r0, #1
 810b292:	f040 8090 	bne.w	810b3b6 <_printf_float+0x1e2>
 810b296:	f04f 30ff 	mov.w	r0, #4294967295
 810b29a:	b00d      	add	sp, #52	; 0x34
 810b29c:	ecbd 8b02 	vpop	{d8}
 810b2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b2a4:	4642      	mov	r2, r8
 810b2a6:	464b      	mov	r3, r9
 810b2a8:	4640      	mov	r0, r8
 810b2aa:	4649      	mov	r1, r9
 810b2ac:	f7f5 fcc6 	bl	8100c3c <__aeabi_dcmpun>
 810b2b0:	b140      	cbz	r0, 810b2c4 <_printf_float+0xf0>
 810b2b2:	464b      	mov	r3, r9
 810b2b4:	2b00      	cmp	r3, #0
 810b2b6:	bfbc      	itt	lt
 810b2b8:	232d      	movlt	r3, #45	; 0x2d
 810b2ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 810b2be:	487f      	ldr	r0, [pc, #508]	; (810b4bc <_printf_float+0x2e8>)
 810b2c0:	4b7f      	ldr	r3, [pc, #508]	; (810b4c0 <_printf_float+0x2ec>)
 810b2c2:	e7d1      	b.n	810b268 <_printf_float+0x94>
 810b2c4:	6863      	ldr	r3, [r4, #4]
 810b2c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810b2ca:	9206      	str	r2, [sp, #24]
 810b2cc:	1c5a      	adds	r2, r3, #1
 810b2ce:	d13f      	bne.n	810b350 <_printf_float+0x17c>
 810b2d0:	2306      	movs	r3, #6
 810b2d2:	6063      	str	r3, [r4, #4]
 810b2d4:	9b05      	ldr	r3, [sp, #20]
 810b2d6:	6861      	ldr	r1, [r4, #4]
 810b2d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 810b2dc:	2300      	movs	r3, #0
 810b2de:	9303      	str	r3, [sp, #12]
 810b2e0:	ab0a      	add	r3, sp, #40	; 0x28
 810b2e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 810b2e6:	ab09      	add	r3, sp, #36	; 0x24
 810b2e8:	ec49 8b10 	vmov	d0, r8, r9
 810b2ec:	9300      	str	r3, [sp, #0]
 810b2ee:	6022      	str	r2, [r4, #0]
 810b2f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810b2f4:	4628      	mov	r0, r5
 810b2f6:	f7ff fecd 	bl	810b094 <__cvt>
 810b2fa:	9b06      	ldr	r3, [sp, #24]
 810b2fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b2fe:	2b47      	cmp	r3, #71	; 0x47
 810b300:	4680      	mov	r8, r0
 810b302:	d108      	bne.n	810b316 <_printf_float+0x142>
 810b304:	1cc8      	adds	r0, r1, #3
 810b306:	db02      	blt.n	810b30e <_printf_float+0x13a>
 810b308:	6863      	ldr	r3, [r4, #4]
 810b30a:	4299      	cmp	r1, r3
 810b30c:	dd41      	ble.n	810b392 <_printf_float+0x1be>
 810b30e:	f1ab 0b02 	sub.w	fp, fp, #2
 810b312:	fa5f fb8b 	uxtb.w	fp, fp
 810b316:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810b31a:	d820      	bhi.n	810b35e <_printf_float+0x18a>
 810b31c:	3901      	subs	r1, #1
 810b31e:	465a      	mov	r2, fp
 810b320:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810b324:	9109      	str	r1, [sp, #36]	; 0x24
 810b326:	f7ff ff17 	bl	810b158 <__exponent>
 810b32a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810b32c:	1813      	adds	r3, r2, r0
 810b32e:	2a01      	cmp	r2, #1
 810b330:	4681      	mov	r9, r0
 810b332:	6123      	str	r3, [r4, #16]
 810b334:	dc02      	bgt.n	810b33c <_printf_float+0x168>
 810b336:	6822      	ldr	r2, [r4, #0]
 810b338:	07d2      	lsls	r2, r2, #31
 810b33a:	d501      	bpl.n	810b340 <_printf_float+0x16c>
 810b33c:	3301      	adds	r3, #1
 810b33e:	6123      	str	r3, [r4, #16]
 810b340:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810b344:	2b00      	cmp	r3, #0
 810b346:	d09c      	beq.n	810b282 <_printf_float+0xae>
 810b348:	232d      	movs	r3, #45	; 0x2d
 810b34a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b34e:	e798      	b.n	810b282 <_printf_float+0xae>
 810b350:	9a06      	ldr	r2, [sp, #24]
 810b352:	2a47      	cmp	r2, #71	; 0x47
 810b354:	d1be      	bne.n	810b2d4 <_printf_float+0x100>
 810b356:	2b00      	cmp	r3, #0
 810b358:	d1bc      	bne.n	810b2d4 <_printf_float+0x100>
 810b35a:	2301      	movs	r3, #1
 810b35c:	e7b9      	b.n	810b2d2 <_printf_float+0xfe>
 810b35e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 810b362:	d118      	bne.n	810b396 <_printf_float+0x1c2>
 810b364:	2900      	cmp	r1, #0
 810b366:	6863      	ldr	r3, [r4, #4]
 810b368:	dd0b      	ble.n	810b382 <_printf_float+0x1ae>
 810b36a:	6121      	str	r1, [r4, #16]
 810b36c:	b913      	cbnz	r3, 810b374 <_printf_float+0x1a0>
 810b36e:	6822      	ldr	r2, [r4, #0]
 810b370:	07d0      	lsls	r0, r2, #31
 810b372:	d502      	bpl.n	810b37a <_printf_float+0x1a6>
 810b374:	3301      	adds	r3, #1
 810b376:	440b      	add	r3, r1
 810b378:	6123      	str	r3, [r4, #16]
 810b37a:	65a1      	str	r1, [r4, #88]	; 0x58
 810b37c:	f04f 0900 	mov.w	r9, #0
 810b380:	e7de      	b.n	810b340 <_printf_float+0x16c>
 810b382:	b913      	cbnz	r3, 810b38a <_printf_float+0x1b6>
 810b384:	6822      	ldr	r2, [r4, #0]
 810b386:	07d2      	lsls	r2, r2, #31
 810b388:	d501      	bpl.n	810b38e <_printf_float+0x1ba>
 810b38a:	3302      	adds	r3, #2
 810b38c:	e7f4      	b.n	810b378 <_printf_float+0x1a4>
 810b38e:	2301      	movs	r3, #1
 810b390:	e7f2      	b.n	810b378 <_printf_float+0x1a4>
 810b392:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810b396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b398:	4299      	cmp	r1, r3
 810b39a:	db05      	blt.n	810b3a8 <_printf_float+0x1d4>
 810b39c:	6823      	ldr	r3, [r4, #0]
 810b39e:	6121      	str	r1, [r4, #16]
 810b3a0:	07d8      	lsls	r0, r3, #31
 810b3a2:	d5ea      	bpl.n	810b37a <_printf_float+0x1a6>
 810b3a4:	1c4b      	adds	r3, r1, #1
 810b3a6:	e7e7      	b.n	810b378 <_printf_float+0x1a4>
 810b3a8:	2900      	cmp	r1, #0
 810b3aa:	bfd4      	ite	le
 810b3ac:	f1c1 0202 	rsble	r2, r1, #2
 810b3b0:	2201      	movgt	r2, #1
 810b3b2:	4413      	add	r3, r2
 810b3b4:	e7e0      	b.n	810b378 <_printf_float+0x1a4>
 810b3b6:	6823      	ldr	r3, [r4, #0]
 810b3b8:	055a      	lsls	r2, r3, #21
 810b3ba:	d407      	bmi.n	810b3cc <_printf_float+0x1f8>
 810b3bc:	6923      	ldr	r3, [r4, #16]
 810b3be:	4642      	mov	r2, r8
 810b3c0:	4631      	mov	r1, r6
 810b3c2:	4628      	mov	r0, r5
 810b3c4:	47b8      	blx	r7
 810b3c6:	3001      	adds	r0, #1
 810b3c8:	d12c      	bne.n	810b424 <_printf_float+0x250>
 810b3ca:	e764      	b.n	810b296 <_printf_float+0xc2>
 810b3cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810b3d0:	f240 80e0 	bls.w	810b594 <_printf_float+0x3c0>
 810b3d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810b3d8:	2200      	movs	r2, #0
 810b3da:	2300      	movs	r3, #0
 810b3dc:	f7f5 fbfc 	bl	8100bd8 <__aeabi_dcmpeq>
 810b3e0:	2800      	cmp	r0, #0
 810b3e2:	d034      	beq.n	810b44e <_printf_float+0x27a>
 810b3e4:	4a37      	ldr	r2, [pc, #220]	; (810b4c4 <_printf_float+0x2f0>)
 810b3e6:	2301      	movs	r3, #1
 810b3e8:	4631      	mov	r1, r6
 810b3ea:	4628      	mov	r0, r5
 810b3ec:	47b8      	blx	r7
 810b3ee:	3001      	adds	r0, #1
 810b3f0:	f43f af51 	beq.w	810b296 <_printf_float+0xc2>
 810b3f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b3f8:	429a      	cmp	r2, r3
 810b3fa:	db02      	blt.n	810b402 <_printf_float+0x22e>
 810b3fc:	6823      	ldr	r3, [r4, #0]
 810b3fe:	07d8      	lsls	r0, r3, #31
 810b400:	d510      	bpl.n	810b424 <_printf_float+0x250>
 810b402:	ee18 3a10 	vmov	r3, s16
 810b406:	4652      	mov	r2, sl
 810b408:	4631      	mov	r1, r6
 810b40a:	4628      	mov	r0, r5
 810b40c:	47b8      	blx	r7
 810b40e:	3001      	adds	r0, #1
 810b410:	f43f af41 	beq.w	810b296 <_printf_float+0xc2>
 810b414:	f04f 0800 	mov.w	r8, #0
 810b418:	f104 091a 	add.w	r9, r4, #26
 810b41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b41e:	3b01      	subs	r3, #1
 810b420:	4543      	cmp	r3, r8
 810b422:	dc09      	bgt.n	810b438 <_printf_float+0x264>
 810b424:	6823      	ldr	r3, [r4, #0]
 810b426:	079b      	lsls	r3, r3, #30
 810b428:	f100 8105 	bmi.w	810b636 <_printf_float+0x462>
 810b42c:	68e0      	ldr	r0, [r4, #12]
 810b42e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b430:	4298      	cmp	r0, r3
 810b432:	bfb8      	it	lt
 810b434:	4618      	movlt	r0, r3
 810b436:	e730      	b.n	810b29a <_printf_float+0xc6>
 810b438:	2301      	movs	r3, #1
 810b43a:	464a      	mov	r2, r9
 810b43c:	4631      	mov	r1, r6
 810b43e:	4628      	mov	r0, r5
 810b440:	47b8      	blx	r7
 810b442:	3001      	adds	r0, #1
 810b444:	f43f af27 	beq.w	810b296 <_printf_float+0xc2>
 810b448:	f108 0801 	add.w	r8, r8, #1
 810b44c:	e7e6      	b.n	810b41c <_printf_float+0x248>
 810b44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b450:	2b00      	cmp	r3, #0
 810b452:	dc39      	bgt.n	810b4c8 <_printf_float+0x2f4>
 810b454:	4a1b      	ldr	r2, [pc, #108]	; (810b4c4 <_printf_float+0x2f0>)
 810b456:	2301      	movs	r3, #1
 810b458:	4631      	mov	r1, r6
 810b45a:	4628      	mov	r0, r5
 810b45c:	47b8      	blx	r7
 810b45e:	3001      	adds	r0, #1
 810b460:	f43f af19 	beq.w	810b296 <_printf_float+0xc2>
 810b464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b468:	4313      	orrs	r3, r2
 810b46a:	d102      	bne.n	810b472 <_printf_float+0x29e>
 810b46c:	6823      	ldr	r3, [r4, #0]
 810b46e:	07d9      	lsls	r1, r3, #31
 810b470:	d5d8      	bpl.n	810b424 <_printf_float+0x250>
 810b472:	ee18 3a10 	vmov	r3, s16
 810b476:	4652      	mov	r2, sl
 810b478:	4631      	mov	r1, r6
 810b47a:	4628      	mov	r0, r5
 810b47c:	47b8      	blx	r7
 810b47e:	3001      	adds	r0, #1
 810b480:	f43f af09 	beq.w	810b296 <_printf_float+0xc2>
 810b484:	f04f 0900 	mov.w	r9, #0
 810b488:	f104 0a1a 	add.w	sl, r4, #26
 810b48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b48e:	425b      	negs	r3, r3
 810b490:	454b      	cmp	r3, r9
 810b492:	dc01      	bgt.n	810b498 <_printf_float+0x2c4>
 810b494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b496:	e792      	b.n	810b3be <_printf_float+0x1ea>
 810b498:	2301      	movs	r3, #1
 810b49a:	4652      	mov	r2, sl
 810b49c:	4631      	mov	r1, r6
 810b49e:	4628      	mov	r0, r5
 810b4a0:	47b8      	blx	r7
 810b4a2:	3001      	adds	r0, #1
 810b4a4:	f43f aef7 	beq.w	810b296 <_printf_float+0xc2>
 810b4a8:	f109 0901 	add.w	r9, r9, #1
 810b4ac:	e7ee      	b.n	810b48c <_printf_float+0x2b8>
 810b4ae:	bf00      	nop
 810b4b0:	7fefffff 	.word	0x7fefffff
 810b4b4:	0810fb3c 	.word	0x0810fb3c
 810b4b8:	0810fb40 	.word	0x0810fb40
 810b4bc:	0810fb48 	.word	0x0810fb48
 810b4c0:	0810fb44 	.word	0x0810fb44
 810b4c4:	0810fb4c 	.word	0x0810fb4c
 810b4c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810b4ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810b4cc:	429a      	cmp	r2, r3
 810b4ce:	bfa8      	it	ge
 810b4d0:	461a      	movge	r2, r3
 810b4d2:	2a00      	cmp	r2, #0
 810b4d4:	4691      	mov	r9, r2
 810b4d6:	dc37      	bgt.n	810b548 <_printf_float+0x374>
 810b4d8:	f04f 0b00 	mov.w	fp, #0
 810b4dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810b4e0:	f104 021a 	add.w	r2, r4, #26
 810b4e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810b4e6:	9305      	str	r3, [sp, #20]
 810b4e8:	eba3 0309 	sub.w	r3, r3, r9
 810b4ec:	455b      	cmp	r3, fp
 810b4ee:	dc33      	bgt.n	810b558 <_printf_float+0x384>
 810b4f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b4f4:	429a      	cmp	r2, r3
 810b4f6:	db3b      	blt.n	810b570 <_printf_float+0x39c>
 810b4f8:	6823      	ldr	r3, [r4, #0]
 810b4fa:	07da      	lsls	r2, r3, #31
 810b4fc:	d438      	bmi.n	810b570 <_printf_float+0x39c>
 810b4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b500:	9a05      	ldr	r2, [sp, #20]
 810b502:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b504:	1a9a      	subs	r2, r3, r2
 810b506:	eba3 0901 	sub.w	r9, r3, r1
 810b50a:	4591      	cmp	r9, r2
 810b50c:	bfa8      	it	ge
 810b50e:	4691      	movge	r9, r2
 810b510:	f1b9 0f00 	cmp.w	r9, #0
 810b514:	dc35      	bgt.n	810b582 <_printf_float+0x3ae>
 810b516:	f04f 0800 	mov.w	r8, #0
 810b51a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810b51e:	f104 0a1a 	add.w	sl, r4, #26
 810b522:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b526:	1a9b      	subs	r3, r3, r2
 810b528:	eba3 0309 	sub.w	r3, r3, r9
 810b52c:	4543      	cmp	r3, r8
 810b52e:	f77f af79 	ble.w	810b424 <_printf_float+0x250>
 810b532:	2301      	movs	r3, #1
 810b534:	4652      	mov	r2, sl
 810b536:	4631      	mov	r1, r6
 810b538:	4628      	mov	r0, r5
 810b53a:	47b8      	blx	r7
 810b53c:	3001      	adds	r0, #1
 810b53e:	f43f aeaa 	beq.w	810b296 <_printf_float+0xc2>
 810b542:	f108 0801 	add.w	r8, r8, #1
 810b546:	e7ec      	b.n	810b522 <_printf_float+0x34e>
 810b548:	4613      	mov	r3, r2
 810b54a:	4631      	mov	r1, r6
 810b54c:	4642      	mov	r2, r8
 810b54e:	4628      	mov	r0, r5
 810b550:	47b8      	blx	r7
 810b552:	3001      	adds	r0, #1
 810b554:	d1c0      	bne.n	810b4d8 <_printf_float+0x304>
 810b556:	e69e      	b.n	810b296 <_printf_float+0xc2>
 810b558:	2301      	movs	r3, #1
 810b55a:	4631      	mov	r1, r6
 810b55c:	4628      	mov	r0, r5
 810b55e:	9205      	str	r2, [sp, #20]
 810b560:	47b8      	blx	r7
 810b562:	3001      	adds	r0, #1
 810b564:	f43f ae97 	beq.w	810b296 <_printf_float+0xc2>
 810b568:	9a05      	ldr	r2, [sp, #20]
 810b56a:	f10b 0b01 	add.w	fp, fp, #1
 810b56e:	e7b9      	b.n	810b4e4 <_printf_float+0x310>
 810b570:	ee18 3a10 	vmov	r3, s16
 810b574:	4652      	mov	r2, sl
 810b576:	4631      	mov	r1, r6
 810b578:	4628      	mov	r0, r5
 810b57a:	47b8      	blx	r7
 810b57c:	3001      	adds	r0, #1
 810b57e:	d1be      	bne.n	810b4fe <_printf_float+0x32a>
 810b580:	e689      	b.n	810b296 <_printf_float+0xc2>
 810b582:	9a05      	ldr	r2, [sp, #20]
 810b584:	464b      	mov	r3, r9
 810b586:	4442      	add	r2, r8
 810b588:	4631      	mov	r1, r6
 810b58a:	4628      	mov	r0, r5
 810b58c:	47b8      	blx	r7
 810b58e:	3001      	adds	r0, #1
 810b590:	d1c1      	bne.n	810b516 <_printf_float+0x342>
 810b592:	e680      	b.n	810b296 <_printf_float+0xc2>
 810b594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810b596:	2a01      	cmp	r2, #1
 810b598:	dc01      	bgt.n	810b59e <_printf_float+0x3ca>
 810b59a:	07db      	lsls	r3, r3, #31
 810b59c:	d538      	bpl.n	810b610 <_printf_float+0x43c>
 810b59e:	2301      	movs	r3, #1
 810b5a0:	4642      	mov	r2, r8
 810b5a2:	4631      	mov	r1, r6
 810b5a4:	4628      	mov	r0, r5
 810b5a6:	47b8      	blx	r7
 810b5a8:	3001      	adds	r0, #1
 810b5aa:	f43f ae74 	beq.w	810b296 <_printf_float+0xc2>
 810b5ae:	ee18 3a10 	vmov	r3, s16
 810b5b2:	4652      	mov	r2, sl
 810b5b4:	4631      	mov	r1, r6
 810b5b6:	4628      	mov	r0, r5
 810b5b8:	47b8      	blx	r7
 810b5ba:	3001      	adds	r0, #1
 810b5bc:	f43f ae6b 	beq.w	810b296 <_printf_float+0xc2>
 810b5c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810b5c4:	2200      	movs	r2, #0
 810b5c6:	2300      	movs	r3, #0
 810b5c8:	f7f5 fb06 	bl	8100bd8 <__aeabi_dcmpeq>
 810b5cc:	b9d8      	cbnz	r0, 810b606 <_printf_float+0x432>
 810b5ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b5d0:	f108 0201 	add.w	r2, r8, #1
 810b5d4:	3b01      	subs	r3, #1
 810b5d6:	4631      	mov	r1, r6
 810b5d8:	4628      	mov	r0, r5
 810b5da:	47b8      	blx	r7
 810b5dc:	3001      	adds	r0, #1
 810b5de:	d10e      	bne.n	810b5fe <_printf_float+0x42a>
 810b5e0:	e659      	b.n	810b296 <_printf_float+0xc2>
 810b5e2:	2301      	movs	r3, #1
 810b5e4:	4652      	mov	r2, sl
 810b5e6:	4631      	mov	r1, r6
 810b5e8:	4628      	mov	r0, r5
 810b5ea:	47b8      	blx	r7
 810b5ec:	3001      	adds	r0, #1
 810b5ee:	f43f ae52 	beq.w	810b296 <_printf_float+0xc2>
 810b5f2:	f108 0801 	add.w	r8, r8, #1
 810b5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b5f8:	3b01      	subs	r3, #1
 810b5fa:	4543      	cmp	r3, r8
 810b5fc:	dcf1      	bgt.n	810b5e2 <_printf_float+0x40e>
 810b5fe:	464b      	mov	r3, r9
 810b600:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810b604:	e6dc      	b.n	810b3c0 <_printf_float+0x1ec>
 810b606:	f04f 0800 	mov.w	r8, #0
 810b60a:	f104 0a1a 	add.w	sl, r4, #26
 810b60e:	e7f2      	b.n	810b5f6 <_printf_float+0x422>
 810b610:	2301      	movs	r3, #1
 810b612:	4642      	mov	r2, r8
 810b614:	e7df      	b.n	810b5d6 <_printf_float+0x402>
 810b616:	2301      	movs	r3, #1
 810b618:	464a      	mov	r2, r9
 810b61a:	4631      	mov	r1, r6
 810b61c:	4628      	mov	r0, r5
 810b61e:	47b8      	blx	r7
 810b620:	3001      	adds	r0, #1
 810b622:	f43f ae38 	beq.w	810b296 <_printf_float+0xc2>
 810b626:	f108 0801 	add.w	r8, r8, #1
 810b62a:	68e3      	ldr	r3, [r4, #12]
 810b62c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810b62e:	1a5b      	subs	r3, r3, r1
 810b630:	4543      	cmp	r3, r8
 810b632:	dcf0      	bgt.n	810b616 <_printf_float+0x442>
 810b634:	e6fa      	b.n	810b42c <_printf_float+0x258>
 810b636:	f04f 0800 	mov.w	r8, #0
 810b63a:	f104 0919 	add.w	r9, r4, #25
 810b63e:	e7f4      	b.n	810b62a <_printf_float+0x456>

0810b640 <_printf_common>:
 810b640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b644:	4616      	mov	r6, r2
 810b646:	4699      	mov	r9, r3
 810b648:	688a      	ldr	r2, [r1, #8]
 810b64a:	690b      	ldr	r3, [r1, #16]
 810b64c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810b650:	4293      	cmp	r3, r2
 810b652:	bfb8      	it	lt
 810b654:	4613      	movlt	r3, r2
 810b656:	6033      	str	r3, [r6, #0]
 810b658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810b65c:	4607      	mov	r7, r0
 810b65e:	460c      	mov	r4, r1
 810b660:	b10a      	cbz	r2, 810b666 <_printf_common+0x26>
 810b662:	3301      	adds	r3, #1
 810b664:	6033      	str	r3, [r6, #0]
 810b666:	6823      	ldr	r3, [r4, #0]
 810b668:	0699      	lsls	r1, r3, #26
 810b66a:	bf42      	ittt	mi
 810b66c:	6833      	ldrmi	r3, [r6, #0]
 810b66e:	3302      	addmi	r3, #2
 810b670:	6033      	strmi	r3, [r6, #0]
 810b672:	6825      	ldr	r5, [r4, #0]
 810b674:	f015 0506 	ands.w	r5, r5, #6
 810b678:	d106      	bne.n	810b688 <_printf_common+0x48>
 810b67a:	f104 0a19 	add.w	sl, r4, #25
 810b67e:	68e3      	ldr	r3, [r4, #12]
 810b680:	6832      	ldr	r2, [r6, #0]
 810b682:	1a9b      	subs	r3, r3, r2
 810b684:	42ab      	cmp	r3, r5
 810b686:	dc26      	bgt.n	810b6d6 <_printf_common+0x96>
 810b688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810b68c:	1e13      	subs	r3, r2, #0
 810b68e:	6822      	ldr	r2, [r4, #0]
 810b690:	bf18      	it	ne
 810b692:	2301      	movne	r3, #1
 810b694:	0692      	lsls	r2, r2, #26
 810b696:	d42b      	bmi.n	810b6f0 <_printf_common+0xb0>
 810b698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810b69c:	4649      	mov	r1, r9
 810b69e:	4638      	mov	r0, r7
 810b6a0:	47c0      	blx	r8
 810b6a2:	3001      	adds	r0, #1
 810b6a4:	d01e      	beq.n	810b6e4 <_printf_common+0xa4>
 810b6a6:	6823      	ldr	r3, [r4, #0]
 810b6a8:	68e5      	ldr	r5, [r4, #12]
 810b6aa:	6832      	ldr	r2, [r6, #0]
 810b6ac:	f003 0306 	and.w	r3, r3, #6
 810b6b0:	2b04      	cmp	r3, #4
 810b6b2:	bf08      	it	eq
 810b6b4:	1aad      	subeq	r5, r5, r2
 810b6b6:	68a3      	ldr	r3, [r4, #8]
 810b6b8:	6922      	ldr	r2, [r4, #16]
 810b6ba:	bf0c      	ite	eq
 810b6bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810b6c0:	2500      	movne	r5, #0
 810b6c2:	4293      	cmp	r3, r2
 810b6c4:	bfc4      	itt	gt
 810b6c6:	1a9b      	subgt	r3, r3, r2
 810b6c8:	18ed      	addgt	r5, r5, r3
 810b6ca:	2600      	movs	r6, #0
 810b6cc:	341a      	adds	r4, #26
 810b6ce:	42b5      	cmp	r5, r6
 810b6d0:	d11a      	bne.n	810b708 <_printf_common+0xc8>
 810b6d2:	2000      	movs	r0, #0
 810b6d4:	e008      	b.n	810b6e8 <_printf_common+0xa8>
 810b6d6:	2301      	movs	r3, #1
 810b6d8:	4652      	mov	r2, sl
 810b6da:	4649      	mov	r1, r9
 810b6dc:	4638      	mov	r0, r7
 810b6de:	47c0      	blx	r8
 810b6e0:	3001      	adds	r0, #1
 810b6e2:	d103      	bne.n	810b6ec <_printf_common+0xac>
 810b6e4:	f04f 30ff 	mov.w	r0, #4294967295
 810b6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b6ec:	3501      	adds	r5, #1
 810b6ee:	e7c6      	b.n	810b67e <_printf_common+0x3e>
 810b6f0:	18e1      	adds	r1, r4, r3
 810b6f2:	1c5a      	adds	r2, r3, #1
 810b6f4:	2030      	movs	r0, #48	; 0x30
 810b6f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810b6fa:	4422      	add	r2, r4
 810b6fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810b700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810b704:	3302      	adds	r3, #2
 810b706:	e7c7      	b.n	810b698 <_printf_common+0x58>
 810b708:	2301      	movs	r3, #1
 810b70a:	4622      	mov	r2, r4
 810b70c:	4649      	mov	r1, r9
 810b70e:	4638      	mov	r0, r7
 810b710:	47c0      	blx	r8
 810b712:	3001      	adds	r0, #1
 810b714:	d0e6      	beq.n	810b6e4 <_printf_common+0xa4>
 810b716:	3601      	adds	r6, #1
 810b718:	e7d9      	b.n	810b6ce <_printf_common+0x8e>
	...

0810b71c <_printf_i>:
 810b71c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810b720:	7e0f      	ldrb	r7, [r1, #24]
 810b722:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810b724:	2f78      	cmp	r7, #120	; 0x78
 810b726:	4691      	mov	r9, r2
 810b728:	4680      	mov	r8, r0
 810b72a:	460c      	mov	r4, r1
 810b72c:	469a      	mov	sl, r3
 810b72e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810b732:	d807      	bhi.n	810b744 <_printf_i+0x28>
 810b734:	2f62      	cmp	r7, #98	; 0x62
 810b736:	d80a      	bhi.n	810b74e <_printf_i+0x32>
 810b738:	2f00      	cmp	r7, #0
 810b73a:	f000 80d8 	beq.w	810b8ee <_printf_i+0x1d2>
 810b73e:	2f58      	cmp	r7, #88	; 0x58
 810b740:	f000 80a3 	beq.w	810b88a <_printf_i+0x16e>
 810b744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810b748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810b74c:	e03a      	b.n	810b7c4 <_printf_i+0xa8>
 810b74e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810b752:	2b15      	cmp	r3, #21
 810b754:	d8f6      	bhi.n	810b744 <_printf_i+0x28>
 810b756:	a101      	add	r1, pc, #4	; (adr r1, 810b75c <_printf_i+0x40>)
 810b758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810b75c:	0810b7b5 	.word	0x0810b7b5
 810b760:	0810b7c9 	.word	0x0810b7c9
 810b764:	0810b745 	.word	0x0810b745
 810b768:	0810b745 	.word	0x0810b745
 810b76c:	0810b745 	.word	0x0810b745
 810b770:	0810b745 	.word	0x0810b745
 810b774:	0810b7c9 	.word	0x0810b7c9
 810b778:	0810b745 	.word	0x0810b745
 810b77c:	0810b745 	.word	0x0810b745
 810b780:	0810b745 	.word	0x0810b745
 810b784:	0810b745 	.word	0x0810b745
 810b788:	0810b8d5 	.word	0x0810b8d5
 810b78c:	0810b7f9 	.word	0x0810b7f9
 810b790:	0810b8b7 	.word	0x0810b8b7
 810b794:	0810b745 	.word	0x0810b745
 810b798:	0810b745 	.word	0x0810b745
 810b79c:	0810b8f7 	.word	0x0810b8f7
 810b7a0:	0810b745 	.word	0x0810b745
 810b7a4:	0810b7f9 	.word	0x0810b7f9
 810b7a8:	0810b745 	.word	0x0810b745
 810b7ac:	0810b745 	.word	0x0810b745
 810b7b0:	0810b8bf 	.word	0x0810b8bf
 810b7b4:	682b      	ldr	r3, [r5, #0]
 810b7b6:	1d1a      	adds	r2, r3, #4
 810b7b8:	681b      	ldr	r3, [r3, #0]
 810b7ba:	602a      	str	r2, [r5, #0]
 810b7bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810b7c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810b7c4:	2301      	movs	r3, #1
 810b7c6:	e0a3      	b.n	810b910 <_printf_i+0x1f4>
 810b7c8:	6820      	ldr	r0, [r4, #0]
 810b7ca:	6829      	ldr	r1, [r5, #0]
 810b7cc:	0606      	lsls	r6, r0, #24
 810b7ce:	f101 0304 	add.w	r3, r1, #4
 810b7d2:	d50a      	bpl.n	810b7ea <_printf_i+0xce>
 810b7d4:	680e      	ldr	r6, [r1, #0]
 810b7d6:	602b      	str	r3, [r5, #0]
 810b7d8:	2e00      	cmp	r6, #0
 810b7da:	da03      	bge.n	810b7e4 <_printf_i+0xc8>
 810b7dc:	232d      	movs	r3, #45	; 0x2d
 810b7de:	4276      	negs	r6, r6
 810b7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b7e4:	485e      	ldr	r0, [pc, #376]	; (810b960 <_printf_i+0x244>)
 810b7e6:	230a      	movs	r3, #10
 810b7e8:	e019      	b.n	810b81e <_printf_i+0x102>
 810b7ea:	680e      	ldr	r6, [r1, #0]
 810b7ec:	602b      	str	r3, [r5, #0]
 810b7ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 810b7f2:	bf18      	it	ne
 810b7f4:	b236      	sxthne	r6, r6
 810b7f6:	e7ef      	b.n	810b7d8 <_printf_i+0xbc>
 810b7f8:	682b      	ldr	r3, [r5, #0]
 810b7fa:	6820      	ldr	r0, [r4, #0]
 810b7fc:	1d19      	adds	r1, r3, #4
 810b7fe:	6029      	str	r1, [r5, #0]
 810b800:	0601      	lsls	r1, r0, #24
 810b802:	d501      	bpl.n	810b808 <_printf_i+0xec>
 810b804:	681e      	ldr	r6, [r3, #0]
 810b806:	e002      	b.n	810b80e <_printf_i+0xf2>
 810b808:	0646      	lsls	r6, r0, #25
 810b80a:	d5fb      	bpl.n	810b804 <_printf_i+0xe8>
 810b80c:	881e      	ldrh	r6, [r3, #0]
 810b80e:	4854      	ldr	r0, [pc, #336]	; (810b960 <_printf_i+0x244>)
 810b810:	2f6f      	cmp	r7, #111	; 0x6f
 810b812:	bf0c      	ite	eq
 810b814:	2308      	moveq	r3, #8
 810b816:	230a      	movne	r3, #10
 810b818:	2100      	movs	r1, #0
 810b81a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810b81e:	6865      	ldr	r5, [r4, #4]
 810b820:	60a5      	str	r5, [r4, #8]
 810b822:	2d00      	cmp	r5, #0
 810b824:	bfa2      	ittt	ge
 810b826:	6821      	ldrge	r1, [r4, #0]
 810b828:	f021 0104 	bicge.w	r1, r1, #4
 810b82c:	6021      	strge	r1, [r4, #0]
 810b82e:	b90e      	cbnz	r6, 810b834 <_printf_i+0x118>
 810b830:	2d00      	cmp	r5, #0
 810b832:	d04d      	beq.n	810b8d0 <_printf_i+0x1b4>
 810b834:	4615      	mov	r5, r2
 810b836:	fbb6 f1f3 	udiv	r1, r6, r3
 810b83a:	fb03 6711 	mls	r7, r3, r1, r6
 810b83e:	5dc7      	ldrb	r7, [r0, r7]
 810b840:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810b844:	4637      	mov	r7, r6
 810b846:	42bb      	cmp	r3, r7
 810b848:	460e      	mov	r6, r1
 810b84a:	d9f4      	bls.n	810b836 <_printf_i+0x11a>
 810b84c:	2b08      	cmp	r3, #8
 810b84e:	d10b      	bne.n	810b868 <_printf_i+0x14c>
 810b850:	6823      	ldr	r3, [r4, #0]
 810b852:	07de      	lsls	r6, r3, #31
 810b854:	d508      	bpl.n	810b868 <_printf_i+0x14c>
 810b856:	6923      	ldr	r3, [r4, #16]
 810b858:	6861      	ldr	r1, [r4, #4]
 810b85a:	4299      	cmp	r1, r3
 810b85c:	bfde      	ittt	le
 810b85e:	2330      	movle	r3, #48	; 0x30
 810b860:	f805 3c01 	strble.w	r3, [r5, #-1]
 810b864:	f105 35ff 	addle.w	r5, r5, #4294967295
 810b868:	1b52      	subs	r2, r2, r5
 810b86a:	6122      	str	r2, [r4, #16]
 810b86c:	f8cd a000 	str.w	sl, [sp]
 810b870:	464b      	mov	r3, r9
 810b872:	aa03      	add	r2, sp, #12
 810b874:	4621      	mov	r1, r4
 810b876:	4640      	mov	r0, r8
 810b878:	f7ff fee2 	bl	810b640 <_printf_common>
 810b87c:	3001      	adds	r0, #1
 810b87e:	d14c      	bne.n	810b91a <_printf_i+0x1fe>
 810b880:	f04f 30ff 	mov.w	r0, #4294967295
 810b884:	b004      	add	sp, #16
 810b886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b88a:	4835      	ldr	r0, [pc, #212]	; (810b960 <_printf_i+0x244>)
 810b88c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 810b890:	6829      	ldr	r1, [r5, #0]
 810b892:	6823      	ldr	r3, [r4, #0]
 810b894:	f851 6b04 	ldr.w	r6, [r1], #4
 810b898:	6029      	str	r1, [r5, #0]
 810b89a:	061d      	lsls	r5, r3, #24
 810b89c:	d514      	bpl.n	810b8c8 <_printf_i+0x1ac>
 810b89e:	07df      	lsls	r7, r3, #31
 810b8a0:	bf44      	itt	mi
 810b8a2:	f043 0320 	orrmi.w	r3, r3, #32
 810b8a6:	6023      	strmi	r3, [r4, #0]
 810b8a8:	b91e      	cbnz	r6, 810b8b2 <_printf_i+0x196>
 810b8aa:	6823      	ldr	r3, [r4, #0]
 810b8ac:	f023 0320 	bic.w	r3, r3, #32
 810b8b0:	6023      	str	r3, [r4, #0]
 810b8b2:	2310      	movs	r3, #16
 810b8b4:	e7b0      	b.n	810b818 <_printf_i+0xfc>
 810b8b6:	6823      	ldr	r3, [r4, #0]
 810b8b8:	f043 0320 	orr.w	r3, r3, #32
 810b8bc:	6023      	str	r3, [r4, #0]
 810b8be:	2378      	movs	r3, #120	; 0x78
 810b8c0:	4828      	ldr	r0, [pc, #160]	; (810b964 <_printf_i+0x248>)
 810b8c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810b8c6:	e7e3      	b.n	810b890 <_printf_i+0x174>
 810b8c8:	0659      	lsls	r1, r3, #25
 810b8ca:	bf48      	it	mi
 810b8cc:	b2b6      	uxthmi	r6, r6
 810b8ce:	e7e6      	b.n	810b89e <_printf_i+0x182>
 810b8d0:	4615      	mov	r5, r2
 810b8d2:	e7bb      	b.n	810b84c <_printf_i+0x130>
 810b8d4:	682b      	ldr	r3, [r5, #0]
 810b8d6:	6826      	ldr	r6, [r4, #0]
 810b8d8:	6961      	ldr	r1, [r4, #20]
 810b8da:	1d18      	adds	r0, r3, #4
 810b8dc:	6028      	str	r0, [r5, #0]
 810b8de:	0635      	lsls	r5, r6, #24
 810b8e0:	681b      	ldr	r3, [r3, #0]
 810b8e2:	d501      	bpl.n	810b8e8 <_printf_i+0x1cc>
 810b8e4:	6019      	str	r1, [r3, #0]
 810b8e6:	e002      	b.n	810b8ee <_printf_i+0x1d2>
 810b8e8:	0670      	lsls	r0, r6, #25
 810b8ea:	d5fb      	bpl.n	810b8e4 <_printf_i+0x1c8>
 810b8ec:	8019      	strh	r1, [r3, #0]
 810b8ee:	2300      	movs	r3, #0
 810b8f0:	6123      	str	r3, [r4, #16]
 810b8f2:	4615      	mov	r5, r2
 810b8f4:	e7ba      	b.n	810b86c <_printf_i+0x150>
 810b8f6:	682b      	ldr	r3, [r5, #0]
 810b8f8:	1d1a      	adds	r2, r3, #4
 810b8fa:	602a      	str	r2, [r5, #0]
 810b8fc:	681d      	ldr	r5, [r3, #0]
 810b8fe:	6862      	ldr	r2, [r4, #4]
 810b900:	2100      	movs	r1, #0
 810b902:	4628      	mov	r0, r5
 810b904:	f7f4 fcf4 	bl	81002f0 <memchr>
 810b908:	b108      	cbz	r0, 810b90e <_printf_i+0x1f2>
 810b90a:	1b40      	subs	r0, r0, r5
 810b90c:	6060      	str	r0, [r4, #4]
 810b90e:	6863      	ldr	r3, [r4, #4]
 810b910:	6123      	str	r3, [r4, #16]
 810b912:	2300      	movs	r3, #0
 810b914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b918:	e7a8      	b.n	810b86c <_printf_i+0x150>
 810b91a:	6923      	ldr	r3, [r4, #16]
 810b91c:	462a      	mov	r2, r5
 810b91e:	4649      	mov	r1, r9
 810b920:	4640      	mov	r0, r8
 810b922:	47d0      	blx	sl
 810b924:	3001      	adds	r0, #1
 810b926:	d0ab      	beq.n	810b880 <_printf_i+0x164>
 810b928:	6823      	ldr	r3, [r4, #0]
 810b92a:	079b      	lsls	r3, r3, #30
 810b92c:	d413      	bmi.n	810b956 <_printf_i+0x23a>
 810b92e:	68e0      	ldr	r0, [r4, #12]
 810b930:	9b03      	ldr	r3, [sp, #12]
 810b932:	4298      	cmp	r0, r3
 810b934:	bfb8      	it	lt
 810b936:	4618      	movlt	r0, r3
 810b938:	e7a4      	b.n	810b884 <_printf_i+0x168>
 810b93a:	2301      	movs	r3, #1
 810b93c:	4632      	mov	r2, r6
 810b93e:	4649      	mov	r1, r9
 810b940:	4640      	mov	r0, r8
 810b942:	47d0      	blx	sl
 810b944:	3001      	adds	r0, #1
 810b946:	d09b      	beq.n	810b880 <_printf_i+0x164>
 810b948:	3501      	adds	r5, #1
 810b94a:	68e3      	ldr	r3, [r4, #12]
 810b94c:	9903      	ldr	r1, [sp, #12]
 810b94e:	1a5b      	subs	r3, r3, r1
 810b950:	42ab      	cmp	r3, r5
 810b952:	dcf2      	bgt.n	810b93a <_printf_i+0x21e>
 810b954:	e7eb      	b.n	810b92e <_printf_i+0x212>
 810b956:	2500      	movs	r5, #0
 810b958:	f104 0619 	add.w	r6, r4, #25
 810b95c:	e7f5      	b.n	810b94a <_printf_i+0x22e>
 810b95e:	bf00      	nop
 810b960:	0810fb4e 	.word	0x0810fb4e
 810b964:	0810fb5f 	.word	0x0810fb5f

0810b968 <_scanf_float>:
 810b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b96c:	b087      	sub	sp, #28
 810b96e:	4617      	mov	r7, r2
 810b970:	9303      	str	r3, [sp, #12]
 810b972:	688b      	ldr	r3, [r1, #8]
 810b974:	1e5a      	subs	r2, r3, #1
 810b976:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810b97a:	bf83      	ittte	hi
 810b97c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810b980:	195b      	addhi	r3, r3, r5
 810b982:	9302      	strhi	r3, [sp, #8]
 810b984:	2300      	movls	r3, #0
 810b986:	bf86      	itte	hi
 810b988:	f240 135d 	movwhi	r3, #349	; 0x15d
 810b98c:	608b      	strhi	r3, [r1, #8]
 810b98e:	9302      	strls	r3, [sp, #8]
 810b990:	680b      	ldr	r3, [r1, #0]
 810b992:	468b      	mov	fp, r1
 810b994:	2500      	movs	r5, #0
 810b996:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810b99a:	f84b 3b1c 	str.w	r3, [fp], #28
 810b99e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810b9a2:	4680      	mov	r8, r0
 810b9a4:	460c      	mov	r4, r1
 810b9a6:	465e      	mov	r6, fp
 810b9a8:	46aa      	mov	sl, r5
 810b9aa:	46a9      	mov	r9, r5
 810b9ac:	9501      	str	r5, [sp, #4]
 810b9ae:	68a2      	ldr	r2, [r4, #8]
 810b9b0:	b152      	cbz	r2, 810b9c8 <_scanf_float+0x60>
 810b9b2:	683b      	ldr	r3, [r7, #0]
 810b9b4:	781b      	ldrb	r3, [r3, #0]
 810b9b6:	2b4e      	cmp	r3, #78	; 0x4e
 810b9b8:	d864      	bhi.n	810ba84 <_scanf_float+0x11c>
 810b9ba:	2b40      	cmp	r3, #64	; 0x40
 810b9bc:	d83c      	bhi.n	810ba38 <_scanf_float+0xd0>
 810b9be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810b9c2:	b2c8      	uxtb	r0, r1
 810b9c4:	280e      	cmp	r0, #14
 810b9c6:	d93a      	bls.n	810ba3e <_scanf_float+0xd6>
 810b9c8:	f1b9 0f00 	cmp.w	r9, #0
 810b9cc:	d003      	beq.n	810b9d6 <_scanf_float+0x6e>
 810b9ce:	6823      	ldr	r3, [r4, #0]
 810b9d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810b9d4:	6023      	str	r3, [r4, #0]
 810b9d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 810b9da:	f1ba 0f01 	cmp.w	sl, #1
 810b9de:	f200 8113 	bhi.w	810bc08 <_scanf_float+0x2a0>
 810b9e2:	455e      	cmp	r6, fp
 810b9e4:	f200 8105 	bhi.w	810bbf2 <_scanf_float+0x28a>
 810b9e8:	2501      	movs	r5, #1
 810b9ea:	4628      	mov	r0, r5
 810b9ec:	b007      	add	sp, #28
 810b9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b9f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810b9f6:	2a0d      	cmp	r2, #13
 810b9f8:	d8e6      	bhi.n	810b9c8 <_scanf_float+0x60>
 810b9fa:	a101      	add	r1, pc, #4	; (adr r1, 810ba00 <_scanf_float+0x98>)
 810b9fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810ba00:	0810bb3f 	.word	0x0810bb3f
 810ba04:	0810b9c9 	.word	0x0810b9c9
 810ba08:	0810b9c9 	.word	0x0810b9c9
 810ba0c:	0810b9c9 	.word	0x0810b9c9
 810ba10:	0810bb9f 	.word	0x0810bb9f
 810ba14:	0810bb77 	.word	0x0810bb77
 810ba18:	0810b9c9 	.word	0x0810b9c9
 810ba1c:	0810b9c9 	.word	0x0810b9c9
 810ba20:	0810bb4d 	.word	0x0810bb4d
 810ba24:	0810b9c9 	.word	0x0810b9c9
 810ba28:	0810b9c9 	.word	0x0810b9c9
 810ba2c:	0810b9c9 	.word	0x0810b9c9
 810ba30:	0810b9c9 	.word	0x0810b9c9
 810ba34:	0810bb05 	.word	0x0810bb05
 810ba38:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810ba3c:	e7db      	b.n	810b9f6 <_scanf_float+0x8e>
 810ba3e:	290e      	cmp	r1, #14
 810ba40:	d8c2      	bhi.n	810b9c8 <_scanf_float+0x60>
 810ba42:	a001      	add	r0, pc, #4	; (adr r0, 810ba48 <_scanf_float+0xe0>)
 810ba44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810ba48:	0810baf7 	.word	0x0810baf7
 810ba4c:	0810b9c9 	.word	0x0810b9c9
 810ba50:	0810baf7 	.word	0x0810baf7
 810ba54:	0810bb8b 	.word	0x0810bb8b
 810ba58:	0810b9c9 	.word	0x0810b9c9
 810ba5c:	0810baa5 	.word	0x0810baa5
 810ba60:	0810bae1 	.word	0x0810bae1
 810ba64:	0810bae1 	.word	0x0810bae1
 810ba68:	0810bae1 	.word	0x0810bae1
 810ba6c:	0810bae1 	.word	0x0810bae1
 810ba70:	0810bae1 	.word	0x0810bae1
 810ba74:	0810bae1 	.word	0x0810bae1
 810ba78:	0810bae1 	.word	0x0810bae1
 810ba7c:	0810bae1 	.word	0x0810bae1
 810ba80:	0810bae1 	.word	0x0810bae1
 810ba84:	2b6e      	cmp	r3, #110	; 0x6e
 810ba86:	d809      	bhi.n	810ba9c <_scanf_float+0x134>
 810ba88:	2b60      	cmp	r3, #96	; 0x60
 810ba8a:	d8b2      	bhi.n	810b9f2 <_scanf_float+0x8a>
 810ba8c:	2b54      	cmp	r3, #84	; 0x54
 810ba8e:	d077      	beq.n	810bb80 <_scanf_float+0x218>
 810ba90:	2b59      	cmp	r3, #89	; 0x59
 810ba92:	d199      	bne.n	810b9c8 <_scanf_float+0x60>
 810ba94:	2d07      	cmp	r5, #7
 810ba96:	d197      	bne.n	810b9c8 <_scanf_float+0x60>
 810ba98:	2508      	movs	r5, #8
 810ba9a:	e029      	b.n	810baf0 <_scanf_float+0x188>
 810ba9c:	2b74      	cmp	r3, #116	; 0x74
 810ba9e:	d06f      	beq.n	810bb80 <_scanf_float+0x218>
 810baa0:	2b79      	cmp	r3, #121	; 0x79
 810baa2:	e7f6      	b.n	810ba92 <_scanf_float+0x12a>
 810baa4:	6821      	ldr	r1, [r4, #0]
 810baa6:	05c8      	lsls	r0, r1, #23
 810baa8:	d51a      	bpl.n	810bae0 <_scanf_float+0x178>
 810baaa:	9b02      	ldr	r3, [sp, #8]
 810baac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 810bab0:	6021      	str	r1, [r4, #0]
 810bab2:	f109 0901 	add.w	r9, r9, #1
 810bab6:	b11b      	cbz	r3, 810bac0 <_scanf_float+0x158>
 810bab8:	3b01      	subs	r3, #1
 810baba:	3201      	adds	r2, #1
 810babc:	9302      	str	r3, [sp, #8]
 810babe:	60a2      	str	r2, [r4, #8]
 810bac0:	68a3      	ldr	r3, [r4, #8]
 810bac2:	3b01      	subs	r3, #1
 810bac4:	60a3      	str	r3, [r4, #8]
 810bac6:	6923      	ldr	r3, [r4, #16]
 810bac8:	3301      	adds	r3, #1
 810baca:	6123      	str	r3, [r4, #16]
 810bacc:	687b      	ldr	r3, [r7, #4]
 810bace:	3b01      	subs	r3, #1
 810bad0:	2b00      	cmp	r3, #0
 810bad2:	607b      	str	r3, [r7, #4]
 810bad4:	f340 8084 	ble.w	810bbe0 <_scanf_float+0x278>
 810bad8:	683b      	ldr	r3, [r7, #0]
 810bada:	3301      	adds	r3, #1
 810badc:	603b      	str	r3, [r7, #0]
 810bade:	e766      	b.n	810b9ae <_scanf_float+0x46>
 810bae0:	eb1a 0f05 	cmn.w	sl, r5
 810bae4:	f47f af70 	bne.w	810b9c8 <_scanf_float+0x60>
 810bae8:	6822      	ldr	r2, [r4, #0]
 810baea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810baee:	6022      	str	r2, [r4, #0]
 810baf0:	f806 3b01 	strb.w	r3, [r6], #1
 810baf4:	e7e4      	b.n	810bac0 <_scanf_float+0x158>
 810baf6:	6822      	ldr	r2, [r4, #0]
 810baf8:	0610      	lsls	r0, r2, #24
 810bafa:	f57f af65 	bpl.w	810b9c8 <_scanf_float+0x60>
 810bafe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810bb02:	e7f4      	b.n	810baee <_scanf_float+0x186>
 810bb04:	f1ba 0f00 	cmp.w	sl, #0
 810bb08:	d10e      	bne.n	810bb28 <_scanf_float+0x1c0>
 810bb0a:	f1b9 0f00 	cmp.w	r9, #0
 810bb0e:	d10e      	bne.n	810bb2e <_scanf_float+0x1c6>
 810bb10:	6822      	ldr	r2, [r4, #0]
 810bb12:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810bb16:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810bb1a:	d108      	bne.n	810bb2e <_scanf_float+0x1c6>
 810bb1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810bb20:	6022      	str	r2, [r4, #0]
 810bb22:	f04f 0a01 	mov.w	sl, #1
 810bb26:	e7e3      	b.n	810baf0 <_scanf_float+0x188>
 810bb28:	f1ba 0f02 	cmp.w	sl, #2
 810bb2c:	d055      	beq.n	810bbda <_scanf_float+0x272>
 810bb2e:	2d01      	cmp	r5, #1
 810bb30:	d002      	beq.n	810bb38 <_scanf_float+0x1d0>
 810bb32:	2d04      	cmp	r5, #4
 810bb34:	f47f af48 	bne.w	810b9c8 <_scanf_float+0x60>
 810bb38:	3501      	adds	r5, #1
 810bb3a:	b2ed      	uxtb	r5, r5
 810bb3c:	e7d8      	b.n	810baf0 <_scanf_float+0x188>
 810bb3e:	f1ba 0f01 	cmp.w	sl, #1
 810bb42:	f47f af41 	bne.w	810b9c8 <_scanf_float+0x60>
 810bb46:	f04f 0a02 	mov.w	sl, #2
 810bb4a:	e7d1      	b.n	810baf0 <_scanf_float+0x188>
 810bb4c:	b97d      	cbnz	r5, 810bb6e <_scanf_float+0x206>
 810bb4e:	f1b9 0f00 	cmp.w	r9, #0
 810bb52:	f47f af3c 	bne.w	810b9ce <_scanf_float+0x66>
 810bb56:	6822      	ldr	r2, [r4, #0]
 810bb58:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810bb5c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810bb60:	f47f af39 	bne.w	810b9d6 <_scanf_float+0x6e>
 810bb64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810bb68:	6022      	str	r2, [r4, #0]
 810bb6a:	2501      	movs	r5, #1
 810bb6c:	e7c0      	b.n	810baf0 <_scanf_float+0x188>
 810bb6e:	2d03      	cmp	r5, #3
 810bb70:	d0e2      	beq.n	810bb38 <_scanf_float+0x1d0>
 810bb72:	2d05      	cmp	r5, #5
 810bb74:	e7de      	b.n	810bb34 <_scanf_float+0x1cc>
 810bb76:	2d02      	cmp	r5, #2
 810bb78:	f47f af26 	bne.w	810b9c8 <_scanf_float+0x60>
 810bb7c:	2503      	movs	r5, #3
 810bb7e:	e7b7      	b.n	810baf0 <_scanf_float+0x188>
 810bb80:	2d06      	cmp	r5, #6
 810bb82:	f47f af21 	bne.w	810b9c8 <_scanf_float+0x60>
 810bb86:	2507      	movs	r5, #7
 810bb88:	e7b2      	b.n	810baf0 <_scanf_float+0x188>
 810bb8a:	6822      	ldr	r2, [r4, #0]
 810bb8c:	0591      	lsls	r1, r2, #22
 810bb8e:	f57f af1b 	bpl.w	810b9c8 <_scanf_float+0x60>
 810bb92:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810bb96:	6022      	str	r2, [r4, #0]
 810bb98:	f8cd 9004 	str.w	r9, [sp, #4]
 810bb9c:	e7a8      	b.n	810baf0 <_scanf_float+0x188>
 810bb9e:	6822      	ldr	r2, [r4, #0]
 810bba0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 810bba4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810bba8:	d006      	beq.n	810bbb8 <_scanf_float+0x250>
 810bbaa:	0550      	lsls	r0, r2, #21
 810bbac:	f57f af0c 	bpl.w	810b9c8 <_scanf_float+0x60>
 810bbb0:	f1b9 0f00 	cmp.w	r9, #0
 810bbb4:	f43f af0f 	beq.w	810b9d6 <_scanf_float+0x6e>
 810bbb8:	0591      	lsls	r1, r2, #22
 810bbba:	bf58      	it	pl
 810bbbc:	9901      	ldrpl	r1, [sp, #4]
 810bbbe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810bbc2:	bf58      	it	pl
 810bbc4:	eba9 0101 	subpl.w	r1, r9, r1
 810bbc8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810bbcc:	bf58      	it	pl
 810bbce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810bbd2:	6022      	str	r2, [r4, #0]
 810bbd4:	f04f 0900 	mov.w	r9, #0
 810bbd8:	e78a      	b.n	810baf0 <_scanf_float+0x188>
 810bbda:	f04f 0a03 	mov.w	sl, #3
 810bbde:	e787      	b.n	810baf0 <_scanf_float+0x188>
 810bbe0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810bbe4:	4639      	mov	r1, r7
 810bbe6:	4640      	mov	r0, r8
 810bbe8:	4798      	blx	r3
 810bbea:	2800      	cmp	r0, #0
 810bbec:	f43f aedf 	beq.w	810b9ae <_scanf_float+0x46>
 810bbf0:	e6ea      	b.n	810b9c8 <_scanf_float+0x60>
 810bbf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bbf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810bbfa:	463a      	mov	r2, r7
 810bbfc:	4640      	mov	r0, r8
 810bbfe:	4798      	blx	r3
 810bc00:	6923      	ldr	r3, [r4, #16]
 810bc02:	3b01      	subs	r3, #1
 810bc04:	6123      	str	r3, [r4, #16]
 810bc06:	e6ec      	b.n	810b9e2 <_scanf_float+0x7a>
 810bc08:	1e6b      	subs	r3, r5, #1
 810bc0a:	2b06      	cmp	r3, #6
 810bc0c:	d825      	bhi.n	810bc5a <_scanf_float+0x2f2>
 810bc0e:	2d02      	cmp	r5, #2
 810bc10:	d836      	bhi.n	810bc80 <_scanf_float+0x318>
 810bc12:	455e      	cmp	r6, fp
 810bc14:	f67f aee8 	bls.w	810b9e8 <_scanf_float+0x80>
 810bc18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bc1c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810bc20:	463a      	mov	r2, r7
 810bc22:	4640      	mov	r0, r8
 810bc24:	4798      	blx	r3
 810bc26:	6923      	ldr	r3, [r4, #16]
 810bc28:	3b01      	subs	r3, #1
 810bc2a:	6123      	str	r3, [r4, #16]
 810bc2c:	e7f1      	b.n	810bc12 <_scanf_float+0x2aa>
 810bc2e:	9802      	ldr	r0, [sp, #8]
 810bc30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bc34:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 810bc38:	9002      	str	r0, [sp, #8]
 810bc3a:	463a      	mov	r2, r7
 810bc3c:	4640      	mov	r0, r8
 810bc3e:	4798      	blx	r3
 810bc40:	6923      	ldr	r3, [r4, #16]
 810bc42:	3b01      	subs	r3, #1
 810bc44:	6123      	str	r3, [r4, #16]
 810bc46:	f10a 3aff 	add.w	sl, sl, #4294967295
 810bc4a:	fa5f fa8a 	uxtb.w	sl, sl
 810bc4e:	f1ba 0f02 	cmp.w	sl, #2
 810bc52:	d1ec      	bne.n	810bc2e <_scanf_float+0x2c6>
 810bc54:	3d03      	subs	r5, #3
 810bc56:	b2ed      	uxtb	r5, r5
 810bc58:	1b76      	subs	r6, r6, r5
 810bc5a:	6823      	ldr	r3, [r4, #0]
 810bc5c:	05da      	lsls	r2, r3, #23
 810bc5e:	d52f      	bpl.n	810bcc0 <_scanf_float+0x358>
 810bc60:	055b      	lsls	r3, r3, #21
 810bc62:	d510      	bpl.n	810bc86 <_scanf_float+0x31e>
 810bc64:	455e      	cmp	r6, fp
 810bc66:	f67f aebf 	bls.w	810b9e8 <_scanf_float+0x80>
 810bc6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bc6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810bc72:	463a      	mov	r2, r7
 810bc74:	4640      	mov	r0, r8
 810bc76:	4798      	blx	r3
 810bc78:	6923      	ldr	r3, [r4, #16]
 810bc7a:	3b01      	subs	r3, #1
 810bc7c:	6123      	str	r3, [r4, #16]
 810bc7e:	e7f1      	b.n	810bc64 <_scanf_float+0x2fc>
 810bc80:	46aa      	mov	sl, r5
 810bc82:	9602      	str	r6, [sp, #8]
 810bc84:	e7df      	b.n	810bc46 <_scanf_float+0x2de>
 810bc86:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810bc8a:	6923      	ldr	r3, [r4, #16]
 810bc8c:	2965      	cmp	r1, #101	; 0x65
 810bc8e:	f103 33ff 	add.w	r3, r3, #4294967295
 810bc92:	f106 35ff 	add.w	r5, r6, #4294967295
 810bc96:	6123      	str	r3, [r4, #16]
 810bc98:	d00c      	beq.n	810bcb4 <_scanf_float+0x34c>
 810bc9a:	2945      	cmp	r1, #69	; 0x45
 810bc9c:	d00a      	beq.n	810bcb4 <_scanf_float+0x34c>
 810bc9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bca2:	463a      	mov	r2, r7
 810bca4:	4640      	mov	r0, r8
 810bca6:	4798      	blx	r3
 810bca8:	6923      	ldr	r3, [r4, #16]
 810bcaa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810bcae:	3b01      	subs	r3, #1
 810bcb0:	1eb5      	subs	r5, r6, #2
 810bcb2:	6123      	str	r3, [r4, #16]
 810bcb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810bcb8:	463a      	mov	r2, r7
 810bcba:	4640      	mov	r0, r8
 810bcbc:	4798      	blx	r3
 810bcbe:	462e      	mov	r6, r5
 810bcc0:	6825      	ldr	r5, [r4, #0]
 810bcc2:	f015 0510 	ands.w	r5, r5, #16
 810bcc6:	d159      	bne.n	810bd7c <_scanf_float+0x414>
 810bcc8:	7035      	strb	r5, [r6, #0]
 810bcca:	6823      	ldr	r3, [r4, #0]
 810bccc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810bcd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810bcd4:	d11b      	bne.n	810bd0e <_scanf_float+0x3a6>
 810bcd6:	9b01      	ldr	r3, [sp, #4]
 810bcd8:	454b      	cmp	r3, r9
 810bcda:	eba3 0209 	sub.w	r2, r3, r9
 810bcde:	d123      	bne.n	810bd28 <_scanf_float+0x3c0>
 810bce0:	2200      	movs	r2, #0
 810bce2:	4659      	mov	r1, fp
 810bce4:	4640      	mov	r0, r8
 810bce6:	f000 ff35 	bl	810cb54 <_strtod_r>
 810bcea:	6822      	ldr	r2, [r4, #0]
 810bcec:	9b03      	ldr	r3, [sp, #12]
 810bcee:	f012 0f02 	tst.w	r2, #2
 810bcf2:	ec57 6b10 	vmov	r6, r7, d0
 810bcf6:	681b      	ldr	r3, [r3, #0]
 810bcf8:	d021      	beq.n	810bd3e <_scanf_float+0x3d6>
 810bcfa:	9903      	ldr	r1, [sp, #12]
 810bcfc:	1d1a      	adds	r2, r3, #4
 810bcfe:	600a      	str	r2, [r1, #0]
 810bd00:	681b      	ldr	r3, [r3, #0]
 810bd02:	e9c3 6700 	strd	r6, r7, [r3]
 810bd06:	68e3      	ldr	r3, [r4, #12]
 810bd08:	3301      	adds	r3, #1
 810bd0a:	60e3      	str	r3, [r4, #12]
 810bd0c:	e66d      	b.n	810b9ea <_scanf_float+0x82>
 810bd0e:	9b04      	ldr	r3, [sp, #16]
 810bd10:	2b00      	cmp	r3, #0
 810bd12:	d0e5      	beq.n	810bce0 <_scanf_float+0x378>
 810bd14:	9905      	ldr	r1, [sp, #20]
 810bd16:	230a      	movs	r3, #10
 810bd18:	462a      	mov	r2, r5
 810bd1a:	3101      	adds	r1, #1
 810bd1c:	4640      	mov	r0, r8
 810bd1e:	f000 ffa1 	bl	810cc64 <_strtol_r>
 810bd22:	9b04      	ldr	r3, [sp, #16]
 810bd24:	9e05      	ldr	r6, [sp, #20]
 810bd26:	1ac2      	subs	r2, r0, r3
 810bd28:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810bd2c:	429e      	cmp	r6, r3
 810bd2e:	bf28      	it	cs
 810bd30:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 810bd34:	4912      	ldr	r1, [pc, #72]	; (810bd80 <_scanf_float+0x418>)
 810bd36:	4630      	mov	r0, r6
 810bd38:	f000 f8ca 	bl	810bed0 <siprintf>
 810bd3c:	e7d0      	b.n	810bce0 <_scanf_float+0x378>
 810bd3e:	9903      	ldr	r1, [sp, #12]
 810bd40:	f012 0f04 	tst.w	r2, #4
 810bd44:	f103 0204 	add.w	r2, r3, #4
 810bd48:	600a      	str	r2, [r1, #0]
 810bd4a:	d1d9      	bne.n	810bd00 <_scanf_float+0x398>
 810bd4c:	f8d3 8000 	ldr.w	r8, [r3]
 810bd50:	ee10 2a10 	vmov	r2, s0
 810bd54:	ee10 0a10 	vmov	r0, s0
 810bd58:	463b      	mov	r3, r7
 810bd5a:	4639      	mov	r1, r7
 810bd5c:	f7f4 ff6e 	bl	8100c3c <__aeabi_dcmpun>
 810bd60:	b128      	cbz	r0, 810bd6e <_scanf_float+0x406>
 810bd62:	4808      	ldr	r0, [pc, #32]	; (810bd84 <_scanf_float+0x41c>)
 810bd64:	f000 f8ae 	bl	810bec4 <nanf>
 810bd68:	ed88 0a00 	vstr	s0, [r8]
 810bd6c:	e7cb      	b.n	810bd06 <_scanf_float+0x39e>
 810bd6e:	4630      	mov	r0, r6
 810bd70:	4639      	mov	r1, r7
 810bd72:	f7f4 ffc1 	bl	8100cf8 <__aeabi_d2f>
 810bd76:	f8c8 0000 	str.w	r0, [r8]
 810bd7a:	e7c4      	b.n	810bd06 <_scanf_float+0x39e>
 810bd7c:	2500      	movs	r5, #0
 810bd7e:	e634      	b.n	810b9ea <_scanf_float+0x82>
 810bd80:	0810fb70 	.word	0x0810fb70
 810bd84:	0810ffe0 	.word	0x0810ffe0

0810bd88 <iprintf>:
 810bd88:	b40f      	push	{r0, r1, r2, r3}
 810bd8a:	4b0a      	ldr	r3, [pc, #40]	; (810bdb4 <iprintf+0x2c>)
 810bd8c:	b513      	push	{r0, r1, r4, lr}
 810bd8e:	681c      	ldr	r4, [r3, #0]
 810bd90:	b124      	cbz	r4, 810bd9c <iprintf+0x14>
 810bd92:	69a3      	ldr	r3, [r4, #24]
 810bd94:	b913      	cbnz	r3, 810bd9c <iprintf+0x14>
 810bd96:	4620      	mov	r0, r4
 810bd98:	f001 ffba 	bl	810dd10 <__sinit>
 810bd9c:	ab05      	add	r3, sp, #20
 810bd9e:	9a04      	ldr	r2, [sp, #16]
 810bda0:	68a1      	ldr	r1, [r4, #8]
 810bda2:	9301      	str	r3, [sp, #4]
 810bda4:	4620      	mov	r0, r4
 810bda6:	f003 faa5 	bl	810f2f4 <_vfiprintf_r>
 810bdaa:	b002      	add	sp, #8
 810bdac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810bdb0:	b004      	add	sp, #16
 810bdb2:	4770      	bx	lr
 810bdb4:	10000020 	.word	0x10000020

0810bdb8 <_puts_r>:
 810bdb8:	b570      	push	{r4, r5, r6, lr}
 810bdba:	460e      	mov	r6, r1
 810bdbc:	4605      	mov	r5, r0
 810bdbe:	b118      	cbz	r0, 810bdc8 <_puts_r+0x10>
 810bdc0:	6983      	ldr	r3, [r0, #24]
 810bdc2:	b90b      	cbnz	r3, 810bdc8 <_puts_r+0x10>
 810bdc4:	f001 ffa4 	bl	810dd10 <__sinit>
 810bdc8:	69ab      	ldr	r3, [r5, #24]
 810bdca:	68ac      	ldr	r4, [r5, #8]
 810bdcc:	b913      	cbnz	r3, 810bdd4 <_puts_r+0x1c>
 810bdce:	4628      	mov	r0, r5
 810bdd0:	f001 ff9e 	bl	810dd10 <__sinit>
 810bdd4:	4b2c      	ldr	r3, [pc, #176]	; (810be88 <_puts_r+0xd0>)
 810bdd6:	429c      	cmp	r4, r3
 810bdd8:	d120      	bne.n	810be1c <_puts_r+0x64>
 810bdda:	686c      	ldr	r4, [r5, #4]
 810bddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810bdde:	07db      	lsls	r3, r3, #31
 810bde0:	d405      	bmi.n	810bdee <_puts_r+0x36>
 810bde2:	89a3      	ldrh	r3, [r4, #12]
 810bde4:	0598      	lsls	r0, r3, #22
 810bde6:	d402      	bmi.n	810bdee <_puts_r+0x36>
 810bde8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810bdea:	f002 fba2 	bl	810e532 <__retarget_lock_acquire_recursive>
 810bdee:	89a3      	ldrh	r3, [r4, #12]
 810bdf0:	0719      	lsls	r1, r3, #28
 810bdf2:	d51d      	bpl.n	810be30 <_puts_r+0x78>
 810bdf4:	6923      	ldr	r3, [r4, #16]
 810bdf6:	b1db      	cbz	r3, 810be30 <_puts_r+0x78>
 810bdf8:	3e01      	subs	r6, #1
 810bdfa:	68a3      	ldr	r3, [r4, #8]
 810bdfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810be00:	3b01      	subs	r3, #1
 810be02:	60a3      	str	r3, [r4, #8]
 810be04:	bb39      	cbnz	r1, 810be56 <_puts_r+0x9e>
 810be06:	2b00      	cmp	r3, #0
 810be08:	da38      	bge.n	810be7c <_puts_r+0xc4>
 810be0a:	4622      	mov	r2, r4
 810be0c:	210a      	movs	r1, #10
 810be0e:	4628      	mov	r0, r5
 810be10:	f000 ff2a 	bl	810cc68 <__swbuf_r>
 810be14:	3001      	adds	r0, #1
 810be16:	d011      	beq.n	810be3c <_puts_r+0x84>
 810be18:	250a      	movs	r5, #10
 810be1a:	e011      	b.n	810be40 <_puts_r+0x88>
 810be1c:	4b1b      	ldr	r3, [pc, #108]	; (810be8c <_puts_r+0xd4>)
 810be1e:	429c      	cmp	r4, r3
 810be20:	d101      	bne.n	810be26 <_puts_r+0x6e>
 810be22:	68ac      	ldr	r4, [r5, #8]
 810be24:	e7da      	b.n	810bddc <_puts_r+0x24>
 810be26:	4b1a      	ldr	r3, [pc, #104]	; (810be90 <_puts_r+0xd8>)
 810be28:	429c      	cmp	r4, r3
 810be2a:	bf08      	it	eq
 810be2c:	68ec      	ldreq	r4, [r5, #12]
 810be2e:	e7d5      	b.n	810bddc <_puts_r+0x24>
 810be30:	4621      	mov	r1, r4
 810be32:	4628      	mov	r0, r5
 810be34:	f000 ff6a 	bl	810cd0c <__swsetup_r>
 810be38:	2800      	cmp	r0, #0
 810be3a:	d0dd      	beq.n	810bdf8 <_puts_r+0x40>
 810be3c:	f04f 35ff 	mov.w	r5, #4294967295
 810be40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810be42:	07da      	lsls	r2, r3, #31
 810be44:	d405      	bmi.n	810be52 <_puts_r+0x9a>
 810be46:	89a3      	ldrh	r3, [r4, #12]
 810be48:	059b      	lsls	r3, r3, #22
 810be4a:	d402      	bmi.n	810be52 <_puts_r+0x9a>
 810be4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810be4e:	f002 fb71 	bl	810e534 <__retarget_lock_release_recursive>
 810be52:	4628      	mov	r0, r5
 810be54:	bd70      	pop	{r4, r5, r6, pc}
 810be56:	2b00      	cmp	r3, #0
 810be58:	da04      	bge.n	810be64 <_puts_r+0xac>
 810be5a:	69a2      	ldr	r2, [r4, #24]
 810be5c:	429a      	cmp	r2, r3
 810be5e:	dc06      	bgt.n	810be6e <_puts_r+0xb6>
 810be60:	290a      	cmp	r1, #10
 810be62:	d004      	beq.n	810be6e <_puts_r+0xb6>
 810be64:	6823      	ldr	r3, [r4, #0]
 810be66:	1c5a      	adds	r2, r3, #1
 810be68:	6022      	str	r2, [r4, #0]
 810be6a:	7019      	strb	r1, [r3, #0]
 810be6c:	e7c5      	b.n	810bdfa <_puts_r+0x42>
 810be6e:	4622      	mov	r2, r4
 810be70:	4628      	mov	r0, r5
 810be72:	f000 fef9 	bl	810cc68 <__swbuf_r>
 810be76:	3001      	adds	r0, #1
 810be78:	d1bf      	bne.n	810bdfa <_puts_r+0x42>
 810be7a:	e7df      	b.n	810be3c <_puts_r+0x84>
 810be7c:	6823      	ldr	r3, [r4, #0]
 810be7e:	250a      	movs	r5, #10
 810be80:	1c5a      	adds	r2, r3, #1
 810be82:	6022      	str	r2, [r4, #0]
 810be84:	701d      	strb	r5, [r3, #0]
 810be86:	e7db      	b.n	810be40 <_puts_r+0x88>
 810be88:	0810fd7c 	.word	0x0810fd7c
 810be8c:	0810fd9c 	.word	0x0810fd9c
 810be90:	0810fd5c 	.word	0x0810fd5c

0810be94 <puts>:
 810be94:	4b02      	ldr	r3, [pc, #8]	; (810bea0 <puts+0xc>)
 810be96:	4601      	mov	r1, r0
 810be98:	6818      	ldr	r0, [r3, #0]
 810be9a:	f7ff bf8d 	b.w	810bdb8 <_puts_r>
 810be9e:	bf00      	nop
 810bea0:	10000020 	.word	0x10000020

0810bea4 <_sbrk_r>:
 810bea4:	b538      	push	{r3, r4, r5, lr}
 810bea6:	4d06      	ldr	r5, [pc, #24]	; (810bec0 <_sbrk_r+0x1c>)
 810bea8:	2300      	movs	r3, #0
 810beaa:	4604      	mov	r4, r0
 810beac:	4608      	mov	r0, r1
 810beae:	602b      	str	r3, [r5, #0]
 810beb0:	f7f6 ffbe 	bl	8102e30 <_sbrk>
 810beb4:	1c43      	adds	r3, r0, #1
 810beb6:	d102      	bne.n	810bebe <_sbrk_r+0x1a>
 810beb8:	682b      	ldr	r3, [r5, #0]
 810beba:	b103      	cbz	r3, 810bebe <_sbrk_r+0x1a>
 810bebc:	6023      	str	r3, [r4, #0]
 810bebe:	bd38      	pop	{r3, r4, r5, pc}
 810bec0:	100004b4 	.word	0x100004b4

0810bec4 <nanf>:
 810bec4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810becc <nanf+0x8>
 810bec8:	4770      	bx	lr
 810beca:	bf00      	nop
 810becc:	7fc00000 	.word	0x7fc00000

0810bed0 <siprintf>:
 810bed0:	b40e      	push	{r1, r2, r3}
 810bed2:	b500      	push	{lr}
 810bed4:	b09c      	sub	sp, #112	; 0x70
 810bed6:	ab1d      	add	r3, sp, #116	; 0x74
 810bed8:	9002      	str	r0, [sp, #8]
 810beda:	9006      	str	r0, [sp, #24]
 810bedc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810bee0:	4809      	ldr	r0, [pc, #36]	; (810bf08 <siprintf+0x38>)
 810bee2:	9107      	str	r1, [sp, #28]
 810bee4:	9104      	str	r1, [sp, #16]
 810bee6:	4909      	ldr	r1, [pc, #36]	; (810bf0c <siprintf+0x3c>)
 810bee8:	f853 2b04 	ldr.w	r2, [r3], #4
 810beec:	9105      	str	r1, [sp, #20]
 810beee:	6800      	ldr	r0, [r0, #0]
 810bef0:	9301      	str	r3, [sp, #4]
 810bef2:	a902      	add	r1, sp, #8
 810bef4:	f003 f8d4 	bl	810f0a0 <_svfiprintf_r>
 810bef8:	9b02      	ldr	r3, [sp, #8]
 810befa:	2200      	movs	r2, #0
 810befc:	701a      	strb	r2, [r3, #0]
 810befe:	b01c      	add	sp, #112	; 0x70
 810bf00:	f85d eb04 	ldr.w	lr, [sp], #4
 810bf04:	b003      	add	sp, #12
 810bf06:	4770      	bx	lr
 810bf08:	10000020 	.word	0x10000020
 810bf0c:	ffff0208 	.word	0xffff0208

0810bf10 <sulp>:
 810bf10:	b570      	push	{r4, r5, r6, lr}
 810bf12:	4604      	mov	r4, r0
 810bf14:	460d      	mov	r5, r1
 810bf16:	ec45 4b10 	vmov	d0, r4, r5
 810bf1a:	4616      	mov	r6, r2
 810bf1c:	f002 ff00 	bl	810ed20 <__ulp>
 810bf20:	ec51 0b10 	vmov	r0, r1, d0
 810bf24:	b17e      	cbz	r6, 810bf46 <sulp+0x36>
 810bf26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810bf2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810bf2e:	2b00      	cmp	r3, #0
 810bf30:	dd09      	ble.n	810bf46 <sulp+0x36>
 810bf32:	051b      	lsls	r3, r3, #20
 810bf34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810bf38:	2400      	movs	r4, #0
 810bf3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810bf3e:	4622      	mov	r2, r4
 810bf40:	462b      	mov	r3, r5
 810bf42:	f7f4 fbe1 	bl	8100708 <__aeabi_dmul>
 810bf46:	bd70      	pop	{r4, r5, r6, pc}

0810bf48 <_strtod_l>:
 810bf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bf4c:	ed2d 8b02 	vpush	{d8}
 810bf50:	b09d      	sub	sp, #116	; 0x74
 810bf52:	461f      	mov	r7, r3
 810bf54:	2300      	movs	r3, #0
 810bf56:	9318      	str	r3, [sp, #96]	; 0x60
 810bf58:	4ba2      	ldr	r3, [pc, #648]	; (810c1e4 <_strtod_l+0x29c>)
 810bf5a:	9213      	str	r2, [sp, #76]	; 0x4c
 810bf5c:	681b      	ldr	r3, [r3, #0]
 810bf5e:	9305      	str	r3, [sp, #20]
 810bf60:	4604      	mov	r4, r0
 810bf62:	4618      	mov	r0, r3
 810bf64:	4688      	mov	r8, r1
 810bf66:	f7f4 f9bb 	bl	81002e0 <strlen>
 810bf6a:	f04f 0a00 	mov.w	sl, #0
 810bf6e:	4605      	mov	r5, r0
 810bf70:	f04f 0b00 	mov.w	fp, #0
 810bf74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810bf78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810bf7a:	781a      	ldrb	r2, [r3, #0]
 810bf7c:	2a2b      	cmp	r2, #43	; 0x2b
 810bf7e:	d04e      	beq.n	810c01e <_strtod_l+0xd6>
 810bf80:	d83b      	bhi.n	810bffa <_strtod_l+0xb2>
 810bf82:	2a0d      	cmp	r2, #13
 810bf84:	d834      	bhi.n	810bff0 <_strtod_l+0xa8>
 810bf86:	2a08      	cmp	r2, #8
 810bf88:	d834      	bhi.n	810bff4 <_strtod_l+0xac>
 810bf8a:	2a00      	cmp	r2, #0
 810bf8c:	d03e      	beq.n	810c00c <_strtod_l+0xc4>
 810bf8e:	2300      	movs	r3, #0
 810bf90:	930a      	str	r3, [sp, #40]	; 0x28
 810bf92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810bf94:	7833      	ldrb	r3, [r6, #0]
 810bf96:	2b30      	cmp	r3, #48	; 0x30
 810bf98:	f040 80b0 	bne.w	810c0fc <_strtod_l+0x1b4>
 810bf9c:	7873      	ldrb	r3, [r6, #1]
 810bf9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810bfa2:	2b58      	cmp	r3, #88	; 0x58
 810bfa4:	d168      	bne.n	810c078 <_strtod_l+0x130>
 810bfa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810bfa8:	9301      	str	r3, [sp, #4]
 810bfaa:	ab18      	add	r3, sp, #96	; 0x60
 810bfac:	9702      	str	r7, [sp, #8]
 810bfae:	9300      	str	r3, [sp, #0]
 810bfb0:	4a8d      	ldr	r2, [pc, #564]	; (810c1e8 <_strtod_l+0x2a0>)
 810bfb2:	ab19      	add	r3, sp, #100	; 0x64
 810bfb4:	a917      	add	r1, sp, #92	; 0x5c
 810bfb6:	4620      	mov	r0, r4
 810bfb8:	f001 ffae 	bl	810df18 <__gethex>
 810bfbc:	f010 0707 	ands.w	r7, r0, #7
 810bfc0:	4605      	mov	r5, r0
 810bfc2:	d005      	beq.n	810bfd0 <_strtod_l+0x88>
 810bfc4:	2f06      	cmp	r7, #6
 810bfc6:	d12c      	bne.n	810c022 <_strtod_l+0xda>
 810bfc8:	3601      	adds	r6, #1
 810bfca:	2300      	movs	r3, #0
 810bfcc:	9617      	str	r6, [sp, #92]	; 0x5c
 810bfce:	930a      	str	r3, [sp, #40]	; 0x28
 810bfd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810bfd2:	2b00      	cmp	r3, #0
 810bfd4:	f040 8590 	bne.w	810caf8 <_strtod_l+0xbb0>
 810bfd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810bfda:	b1eb      	cbz	r3, 810c018 <_strtod_l+0xd0>
 810bfdc:	4652      	mov	r2, sl
 810bfde:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810bfe2:	ec43 2b10 	vmov	d0, r2, r3
 810bfe6:	b01d      	add	sp, #116	; 0x74
 810bfe8:	ecbd 8b02 	vpop	{d8}
 810bfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bff0:	2a20      	cmp	r2, #32
 810bff2:	d1cc      	bne.n	810bf8e <_strtod_l+0x46>
 810bff4:	3301      	adds	r3, #1
 810bff6:	9317      	str	r3, [sp, #92]	; 0x5c
 810bff8:	e7be      	b.n	810bf78 <_strtod_l+0x30>
 810bffa:	2a2d      	cmp	r2, #45	; 0x2d
 810bffc:	d1c7      	bne.n	810bf8e <_strtod_l+0x46>
 810bffe:	2201      	movs	r2, #1
 810c000:	920a      	str	r2, [sp, #40]	; 0x28
 810c002:	1c5a      	adds	r2, r3, #1
 810c004:	9217      	str	r2, [sp, #92]	; 0x5c
 810c006:	785b      	ldrb	r3, [r3, #1]
 810c008:	2b00      	cmp	r3, #0
 810c00a:	d1c2      	bne.n	810bf92 <_strtod_l+0x4a>
 810c00c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810c00e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810c012:	2b00      	cmp	r3, #0
 810c014:	f040 856e 	bne.w	810caf4 <_strtod_l+0xbac>
 810c018:	4652      	mov	r2, sl
 810c01a:	465b      	mov	r3, fp
 810c01c:	e7e1      	b.n	810bfe2 <_strtod_l+0x9a>
 810c01e:	2200      	movs	r2, #0
 810c020:	e7ee      	b.n	810c000 <_strtod_l+0xb8>
 810c022:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810c024:	b13a      	cbz	r2, 810c036 <_strtod_l+0xee>
 810c026:	2135      	movs	r1, #53	; 0x35
 810c028:	a81a      	add	r0, sp, #104	; 0x68
 810c02a:	f002 ff84 	bl	810ef36 <__copybits>
 810c02e:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c030:	4620      	mov	r0, r4
 810c032:	f002 fb43 	bl	810e6bc <_Bfree>
 810c036:	3f01      	subs	r7, #1
 810c038:	2f04      	cmp	r7, #4
 810c03a:	d806      	bhi.n	810c04a <_strtod_l+0x102>
 810c03c:	e8df f007 	tbb	[pc, r7]
 810c040:	1714030a 	.word	0x1714030a
 810c044:	0a          	.byte	0x0a
 810c045:	00          	.byte	0x00
 810c046:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 810c04a:	0728      	lsls	r0, r5, #28
 810c04c:	d5c0      	bpl.n	810bfd0 <_strtod_l+0x88>
 810c04e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 810c052:	e7bd      	b.n	810bfd0 <_strtod_l+0x88>
 810c054:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 810c058:	9a19      	ldr	r2, [sp, #100]	; 0x64
 810c05a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810c05e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810c062:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810c066:	e7f0      	b.n	810c04a <_strtod_l+0x102>
 810c068:	f8df b180 	ldr.w	fp, [pc, #384]	; 810c1ec <_strtod_l+0x2a4>
 810c06c:	e7ed      	b.n	810c04a <_strtod_l+0x102>
 810c06e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 810c072:	f04f 3aff 	mov.w	sl, #4294967295
 810c076:	e7e8      	b.n	810c04a <_strtod_l+0x102>
 810c078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c07a:	1c5a      	adds	r2, r3, #1
 810c07c:	9217      	str	r2, [sp, #92]	; 0x5c
 810c07e:	785b      	ldrb	r3, [r3, #1]
 810c080:	2b30      	cmp	r3, #48	; 0x30
 810c082:	d0f9      	beq.n	810c078 <_strtod_l+0x130>
 810c084:	2b00      	cmp	r3, #0
 810c086:	d0a3      	beq.n	810bfd0 <_strtod_l+0x88>
 810c088:	2301      	movs	r3, #1
 810c08a:	f04f 0900 	mov.w	r9, #0
 810c08e:	9304      	str	r3, [sp, #16]
 810c090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c092:	9308      	str	r3, [sp, #32]
 810c094:	f8cd 901c 	str.w	r9, [sp, #28]
 810c098:	464f      	mov	r7, r9
 810c09a:	220a      	movs	r2, #10
 810c09c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 810c09e:	7806      	ldrb	r6, [r0, #0]
 810c0a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810c0a4:	b2d9      	uxtb	r1, r3
 810c0a6:	2909      	cmp	r1, #9
 810c0a8:	d92a      	bls.n	810c100 <_strtod_l+0x1b8>
 810c0aa:	9905      	ldr	r1, [sp, #20]
 810c0ac:	462a      	mov	r2, r5
 810c0ae:	f003 fa9e 	bl	810f5ee <strncmp>
 810c0b2:	b398      	cbz	r0, 810c11c <_strtod_l+0x1d4>
 810c0b4:	2000      	movs	r0, #0
 810c0b6:	4632      	mov	r2, r6
 810c0b8:	463d      	mov	r5, r7
 810c0ba:	9005      	str	r0, [sp, #20]
 810c0bc:	4603      	mov	r3, r0
 810c0be:	2a65      	cmp	r2, #101	; 0x65
 810c0c0:	d001      	beq.n	810c0c6 <_strtod_l+0x17e>
 810c0c2:	2a45      	cmp	r2, #69	; 0x45
 810c0c4:	d118      	bne.n	810c0f8 <_strtod_l+0x1b0>
 810c0c6:	b91d      	cbnz	r5, 810c0d0 <_strtod_l+0x188>
 810c0c8:	9a04      	ldr	r2, [sp, #16]
 810c0ca:	4302      	orrs	r2, r0
 810c0cc:	d09e      	beq.n	810c00c <_strtod_l+0xc4>
 810c0ce:	2500      	movs	r5, #0
 810c0d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 810c0d4:	f108 0201 	add.w	r2, r8, #1
 810c0d8:	9217      	str	r2, [sp, #92]	; 0x5c
 810c0da:	f898 2001 	ldrb.w	r2, [r8, #1]
 810c0de:	2a2b      	cmp	r2, #43	; 0x2b
 810c0e0:	d075      	beq.n	810c1ce <_strtod_l+0x286>
 810c0e2:	2a2d      	cmp	r2, #45	; 0x2d
 810c0e4:	d07b      	beq.n	810c1de <_strtod_l+0x296>
 810c0e6:	f04f 0c00 	mov.w	ip, #0
 810c0ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810c0ee:	2909      	cmp	r1, #9
 810c0f0:	f240 8082 	bls.w	810c1f8 <_strtod_l+0x2b0>
 810c0f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 810c0f8:	2600      	movs	r6, #0
 810c0fa:	e09d      	b.n	810c238 <_strtod_l+0x2f0>
 810c0fc:	2300      	movs	r3, #0
 810c0fe:	e7c4      	b.n	810c08a <_strtod_l+0x142>
 810c100:	2f08      	cmp	r7, #8
 810c102:	bfd8      	it	le
 810c104:	9907      	ldrle	r1, [sp, #28]
 810c106:	f100 0001 	add.w	r0, r0, #1
 810c10a:	bfda      	itte	le
 810c10c:	fb02 3301 	mlale	r3, r2, r1, r3
 810c110:	9307      	strle	r3, [sp, #28]
 810c112:	fb02 3909 	mlagt	r9, r2, r9, r3
 810c116:	3701      	adds	r7, #1
 810c118:	9017      	str	r0, [sp, #92]	; 0x5c
 810c11a:	e7bf      	b.n	810c09c <_strtod_l+0x154>
 810c11c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c11e:	195a      	adds	r2, r3, r5
 810c120:	9217      	str	r2, [sp, #92]	; 0x5c
 810c122:	5d5a      	ldrb	r2, [r3, r5]
 810c124:	2f00      	cmp	r7, #0
 810c126:	d037      	beq.n	810c198 <_strtod_l+0x250>
 810c128:	9005      	str	r0, [sp, #20]
 810c12a:	463d      	mov	r5, r7
 810c12c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810c130:	2b09      	cmp	r3, #9
 810c132:	d912      	bls.n	810c15a <_strtod_l+0x212>
 810c134:	2301      	movs	r3, #1
 810c136:	e7c2      	b.n	810c0be <_strtod_l+0x176>
 810c138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c13a:	1c5a      	adds	r2, r3, #1
 810c13c:	9217      	str	r2, [sp, #92]	; 0x5c
 810c13e:	785a      	ldrb	r2, [r3, #1]
 810c140:	3001      	adds	r0, #1
 810c142:	2a30      	cmp	r2, #48	; 0x30
 810c144:	d0f8      	beq.n	810c138 <_strtod_l+0x1f0>
 810c146:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810c14a:	2b08      	cmp	r3, #8
 810c14c:	f200 84d9 	bhi.w	810cb02 <_strtod_l+0xbba>
 810c150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c152:	9005      	str	r0, [sp, #20]
 810c154:	2000      	movs	r0, #0
 810c156:	9308      	str	r3, [sp, #32]
 810c158:	4605      	mov	r5, r0
 810c15a:	3a30      	subs	r2, #48	; 0x30
 810c15c:	f100 0301 	add.w	r3, r0, #1
 810c160:	d014      	beq.n	810c18c <_strtod_l+0x244>
 810c162:	9905      	ldr	r1, [sp, #20]
 810c164:	4419      	add	r1, r3
 810c166:	9105      	str	r1, [sp, #20]
 810c168:	462b      	mov	r3, r5
 810c16a:	eb00 0e05 	add.w	lr, r0, r5
 810c16e:	210a      	movs	r1, #10
 810c170:	4573      	cmp	r3, lr
 810c172:	d113      	bne.n	810c19c <_strtod_l+0x254>
 810c174:	182b      	adds	r3, r5, r0
 810c176:	2b08      	cmp	r3, #8
 810c178:	f105 0501 	add.w	r5, r5, #1
 810c17c:	4405      	add	r5, r0
 810c17e:	dc1c      	bgt.n	810c1ba <_strtod_l+0x272>
 810c180:	9907      	ldr	r1, [sp, #28]
 810c182:	230a      	movs	r3, #10
 810c184:	fb03 2301 	mla	r3, r3, r1, r2
 810c188:	9307      	str	r3, [sp, #28]
 810c18a:	2300      	movs	r3, #0
 810c18c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810c18e:	1c51      	adds	r1, r2, #1
 810c190:	9117      	str	r1, [sp, #92]	; 0x5c
 810c192:	7852      	ldrb	r2, [r2, #1]
 810c194:	4618      	mov	r0, r3
 810c196:	e7c9      	b.n	810c12c <_strtod_l+0x1e4>
 810c198:	4638      	mov	r0, r7
 810c19a:	e7d2      	b.n	810c142 <_strtod_l+0x1fa>
 810c19c:	2b08      	cmp	r3, #8
 810c19e:	dc04      	bgt.n	810c1aa <_strtod_l+0x262>
 810c1a0:	9e07      	ldr	r6, [sp, #28]
 810c1a2:	434e      	muls	r6, r1
 810c1a4:	9607      	str	r6, [sp, #28]
 810c1a6:	3301      	adds	r3, #1
 810c1a8:	e7e2      	b.n	810c170 <_strtod_l+0x228>
 810c1aa:	f103 0c01 	add.w	ip, r3, #1
 810c1ae:	f1bc 0f10 	cmp.w	ip, #16
 810c1b2:	bfd8      	it	le
 810c1b4:	fb01 f909 	mulle.w	r9, r1, r9
 810c1b8:	e7f5      	b.n	810c1a6 <_strtod_l+0x25e>
 810c1ba:	2d10      	cmp	r5, #16
 810c1bc:	bfdc      	itt	le
 810c1be:	230a      	movle	r3, #10
 810c1c0:	fb03 2909 	mlale	r9, r3, r9, r2
 810c1c4:	e7e1      	b.n	810c18a <_strtod_l+0x242>
 810c1c6:	2300      	movs	r3, #0
 810c1c8:	9305      	str	r3, [sp, #20]
 810c1ca:	2301      	movs	r3, #1
 810c1cc:	e77c      	b.n	810c0c8 <_strtod_l+0x180>
 810c1ce:	f04f 0c00 	mov.w	ip, #0
 810c1d2:	f108 0202 	add.w	r2, r8, #2
 810c1d6:	9217      	str	r2, [sp, #92]	; 0x5c
 810c1d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 810c1dc:	e785      	b.n	810c0ea <_strtod_l+0x1a2>
 810c1de:	f04f 0c01 	mov.w	ip, #1
 810c1e2:	e7f6      	b.n	810c1d2 <_strtod_l+0x28a>
 810c1e4:	0810fe24 	.word	0x0810fe24
 810c1e8:	0810fb78 	.word	0x0810fb78
 810c1ec:	7ff00000 	.word	0x7ff00000
 810c1f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810c1f2:	1c51      	adds	r1, r2, #1
 810c1f4:	9117      	str	r1, [sp, #92]	; 0x5c
 810c1f6:	7852      	ldrb	r2, [r2, #1]
 810c1f8:	2a30      	cmp	r2, #48	; 0x30
 810c1fa:	d0f9      	beq.n	810c1f0 <_strtod_l+0x2a8>
 810c1fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810c200:	2908      	cmp	r1, #8
 810c202:	f63f af79 	bhi.w	810c0f8 <_strtod_l+0x1b0>
 810c206:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810c20a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810c20c:	9206      	str	r2, [sp, #24]
 810c20e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810c210:	1c51      	adds	r1, r2, #1
 810c212:	9117      	str	r1, [sp, #92]	; 0x5c
 810c214:	7852      	ldrb	r2, [r2, #1]
 810c216:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 810c21a:	2e09      	cmp	r6, #9
 810c21c:	d937      	bls.n	810c28e <_strtod_l+0x346>
 810c21e:	9e06      	ldr	r6, [sp, #24]
 810c220:	1b89      	subs	r1, r1, r6
 810c222:	2908      	cmp	r1, #8
 810c224:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810c228:	dc02      	bgt.n	810c230 <_strtod_l+0x2e8>
 810c22a:	4576      	cmp	r6, lr
 810c22c:	bfa8      	it	ge
 810c22e:	4676      	movge	r6, lr
 810c230:	f1bc 0f00 	cmp.w	ip, #0
 810c234:	d000      	beq.n	810c238 <_strtod_l+0x2f0>
 810c236:	4276      	negs	r6, r6
 810c238:	2d00      	cmp	r5, #0
 810c23a:	d14d      	bne.n	810c2d8 <_strtod_l+0x390>
 810c23c:	9904      	ldr	r1, [sp, #16]
 810c23e:	4301      	orrs	r1, r0
 810c240:	f47f aec6 	bne.w	810bfd0 <_strtod_l+0x88>
 810c244:	2b00      	cmp	r3, #0
 810c246:	f47f aee1 	bne.w	810c00c <_strtod_l+0xc4>
 810c24a:	2a69      	cmp	r2, #105	; 0x69
 810c24c:	d027      	beq.n	810c29e <_strtod_l+0x356>
 810c24e:	dc24      	bgt.n	810c29a <_strtod_l+0x352>
 810c250:	2a49      	cmp	r2, #73	; 0x49
 810c252:	d024      	beq.n	810c29e <_strtod_l+0x356>
 810c254:	2a4e      	cmp	r2, #78	; 0x4e
 810c256:	f47f aed9 	bne.w	810c00c <_strtod_l+0xc4>
 810c25a:	499f      	ldr	r1, [pc, #636]	; (810c4d8 <_strtod_l+0x590>)
 810c25c:	a817      	add	r0, sp, #92	; 0x5c
 810c25e:	f002 f8b3 	bl	810e3c8 <__match>
 810c262:	2800      	cmp	r0, #0
 810c264:	f43f aed2 	beq.w	810c00c <_strtod_l+0xc4>
 810c268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c26a:	781b      	ldrb	r3, [r3, #0]
 810c26c:	2b28      	cmp	r3, #40	; 0x28
 810c26e:	d12d      	bne.n	810c2cc <_strtod_l+0x384>
 810c270:	499a      	ldr	r1, [pc, #616]	; (810c4dc <_strtod_l+0x594>)
 810c272:	aa1a      	add	r2, sp, #104	; 0x68
 810c274:	a817      	add	r0, sp, #92	; 0x5c
 810c276:	f002 f8bb 	bl	810e3f0 <__hexnan>
 810c27a:	2805      	cmp	r0, #5
 810c27c:	d126      	bne.n	810c2cc <_strtod_l+0x384>
 810c27e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 810c280:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 810c284:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 810c288:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 810c28c:	e6a0      	b.n	810bfd0 <_strtod_l+0x88>
 810c28e:	210a      	movs	r1, #10
 810c290:	fb01 2e0e 	mla	lr, r1, lr, r2
 810c294:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 810c298:	e7b9      	b.n	810c20e <_strtod_l+0x2c6>
 810c29a:	2a6e      	cmp	r2, #110	; 0x6e
 810c29c:	e7db      	b.n	810c256 <_strtod_l+0x30e>
 810c29e:	4990      	ldr	r1, [pc, #576]	; (810c4e0 <_strtod_l+0x598>)
 810c2a0:	a817      	add	r0, sp, #92	; 0x5c
 810c2a2:	f002 f891 	bl	810e3c8 <__match>
 810c2a6:	2800      	cmp	r0, #0
 810c2a8:	f43f aeb0 	beq.w	810c00c <_strtod_l+0xc4>
 810c2ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c2ae:	498d      	ldr	r1, [pc, #564]	; (810c4e4 <_strtod_l+0x59c>)
 810c2b0:	3b01      	subs	r3, #1
 810c2b2:	a817      	add	r0, sp, #92	; 0x5c
 810c2b4:	9317      	str	r3, [sp, #92]	; 0x5c
 810c2b6:	f002 f887 	bl	810e3c8 <__match>
 810c2ba:	b910      	cbnz	r0, 810c2c2 <_strtod_l+0x37a>
 810c2bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810c2be:	3301      	adds	r3, #1
 810c2c0:	9317      	str	r3, [sp, #92]	; 0x5c
 810c2c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 810c4f4 <_strtod_l+0x5ac>
 810c2c6:	f04f 0a00 	mov.w	sl, #0
 810c2ca:	e681      	b.n	810bfd0 <_strtod_l+0x88>
 810c2cc:	4886      	ldr	r0, [pc, #536]	; (810c4e8 <_strtod_l+0x5a0>)
 810c2ce:	f003 f943 	bl	810f558 <nan>
 810c2d2:	ec5b ab10 	vmov	sl, fp, d0
 810c2d6:	e67b      	b.n	810bfd0 <_strtod_l+0x88>
 810c2d8:	9b05      	ldr	r3, [sp, #20]
 810c2da:	9807      	ldr	r0, [sp, #28]
 810c2dc:	1af3      	subs	r3, r6, r3
 810c2de:	2f00      	cmp	r7, #0
 810c2e0:	bf08      	it	eq
 810c2e2:	462f      	moveq	r7, r5
 810c2e4:	2d10      	cmp	r5, #16
 810c2e6:	9306      	str	r3, [sp, #24]
 810c2e8:	46a8      	mov	r8, r5
 810c2ea:	bfa8      	it	ge
 810c2ec:	f04f 0810 	movge.w	r8, #16
 810c2f0:	f7f4 f990 	bl	8100614 <__aeabi_ui2d>
 810c2f4:	2d09      	cmp	r5, #9
 810c2f6:	4682      	mov	sl, r0
 810c2f8:	468b      	mov	fp, r1
 810c2fa:	dd13      	ble.n	810c324 <_strtod_l+0x3dc>
 810c2fc:	4b7b      	ldr	r3, [pc, #492]	; (810c4ec <_strtod_l+0x5a4>)
 810c2fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810c302:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810c306:	f7f4 f9ff 	bl	8100708 <__aeabi_dmul>
 810c30a:	4682      	mov	sl, r0
 810c30c:	4648      	mov	r0, r9
 810c30e:	468b      	mov	fp, r1
 810c310:	f7f4 f980 	bl	8100614 <__aeabi_ui2d>
 810c314:	4602      	mov	r2, r0
 810c316:	460b      	mov	r3, r1
 810c318:	4650      	mov	r0, sl
 810c31a:	4659      	mov	r1, fp
 810c31c:	f7f4 f83e 	bl	810039c <__adddf3>
 810c320:	4682      	mov	sl, r0
 810c322:	468b      	mov	fp, r1
 810c324:	2d0f      	cmp	r5, #15
 810c326:	dc38      	bgt.n	810c39a <_strtod_l+0x452>
 810c328:	9b06      	ldr	r3, [sp, #24]
 810c32a:	2b00      	cmp	r3, #0
 810c32c:	f43f ae50 	beq.w	810bfd0 <_strtod_l+0x88>
 810c330:	dd24      	ble.n	810c37c <_strtod_l+0x434>
 810c332:	2b16      	cmp	r3, #22
 810c334:	dc0b      	bgt.n	810c34e <_strtod_l+0x406>
 810c336:	496d      	ldr	r1, [pc, #436]	; (810c4ec <_strtod_l+0x5a4>)
 810c338:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c33c:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c340:	4652      	mov	r2, sl
 810c342:	465b      	mov	r3, fp
 810c344:	f7f4 f9e0 	bl	8100708 <__aeabi_dmul>
 810c348:	4682      	mov	sl, r0
 810c34a:	468b      	mov	fp, r1
 810c34c:	e640      	b.n	810bfd0 <_strtod_l+0x88>
 810c34e:	9a06      	ldr	r2, [sp, #24]
 810c350:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 810c354:	4293      	cmp	r3, r2
 810c356:	db20      	blt.n	810c39a <_strtod_l+0x452>
 810c358:	4c64      	ldr	r4, [pc, #400]	; (810c4ec <_strtod_l+0x5a4>)
 810c35a:	f1c5 050f 	rsb	r5, r5, #15
 810c35e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810c362:	4652      	mov	r2, sl
 810c364:	465b      	mov	r3, fp
 810c366:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c36a:	f7f4 f9cd 	bl	8100708 <__aeabi_dmul>
 810c36e:	9b06      	ldr	r3, [sp, #24]
 810c370:	1b5d      	subs	r5, r3, r5
 810c372:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810c376:	e9d4 2300 	ldrd	r2, r3, [r4]
 810c37a:	e7e3      	b.n	810c344 <_strtod_l+0x3fc>
 810c37c:	9b06      	ldr	r3, [sp, #24]
 810c37e:	3316      	adds	r3, #22
 810c380:	db0b      	blt.n	810c39a <_strtod_l+0x452>
 810c382:	9b05      	ldr	r3, [sp, #20]
 810c384:	1b9e      	subs	r6, r3, r6
 810c386:	4b59      	ldr	r3, [pc, #356]	; (810c4ec <_strtod_l+0x5a4>)
 810c388:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 810c38c:	e9d6 2300 	ldrd	r2, r3, [r6]
 810c390:	4650      	mov	r0, sl
 810c392:	4659      	mov	r1, fp
 810c394:	f7f4 fae2 	bl	810095c <__aeabi_ddiv>
 810c398:	e7d6      	b.n	810c348 <_strtod_l+0x400>
 810c39a:	9b06      	ldr	r3, [sp, #24]
 810c39c:	eba5 0808 	sub.w	r8, r5, r8
 810c3a0:	4498      	add	r8, r3
 810c3a2:	f1b8 0f00 	cmp.w	r8, #0
 810c3a6:	dd74      	ble.n	810c492 <_strtod_l+0x54a>
 810c3a8:	f018 030f 	ands.w	r3, r8, #15
 810c3ac:	d00a      	beq.n	810c3c4 <_strtod_l+0x47c>
 810c3ae:	494f      	ldr	r1, [pc, #316]	; (810c4ec <_strtod_l+0x5a4>)
 810c3b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c3b4:	4652      	mov	r2, sl
 810c3b6:	465b      	mov	r3, fp
 810c3b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c3bc:	f7f4 f9a4 	bl	8100708 <__aeabi_dmul>
 810c3c0:	4682      	mov	sl, r0
 810c3c2:	468b      	mov	fp, r1
 810c3c4:	f038 080f 	bics.w	r8, r8, #15
 810c3c8:	d04f      	beq.n	810c46a <_strtod_l+0x522>
 810c3ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 810c3ce:	dd22      	ble.n	810c416 <_strtod_l+0x4ce>
 810c3d0:	2500      	movs	r5, #0
 810c3d2:	462e      	mov	r6, r5
 810c3d4:	9507      	str	r5, [sp, #28]
 810c3d6:	9505      	str	r5, [sp, #20]
 810c3d8:	2322      	movs	r3, #34	; 0x22
 810c3da:	f8df b118 	ldr.w	fp, [pc, #280]	; 810c4f4 <_strtod_l+0x5ac>
 810c3de:	6023      	str	r3, [r4, #0]
 810c3e0:	f04f 0a00 	mov.w	sl, #0
 810c3e4:	9b07      	ldr	r3, [sp, #28]
 810c3e6:	2b00      	cmp	r3, #0
 810c3e8:	f43f adf2 	beq.w	810bfd0 <_strtod_l+0x88>
 810c3ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c3ee:	4620      	mov	r0, r4
 810c3f0:	f002 f964 	bl	810e6bc <_Bfree>
 810c3f4:	9905      	ldr	r1, [sp, #20]
 810c3f6:	4620      	mov	r0, r4
 810c3f8:	f002 f960 	bl	810e6bc <_Bfree>
 810c3fc:	4631      	mov	r1, r6
 810c3fe:	4620      	mov	r0, r4
 810c400:	f002 f95c 	bl	810e6bc <_Bfree>
 810c404:	9907      	ldr	r1, [sp, #28]
 810c406:	4620      	mov	r0, r4
 810c408:	f002 f958 	bl	810e6bc <_Bfree>
 810c40c:	4629      	mov	r1, r5
 810c40e:	4620      	mov	r0, r4
 810c410:	f002 f954 	bl	810e6bc <_Bfree>
 810c414:	e5dc      	b.n	810bfd0 <_strtod_l+0x88>
 810c416:	4b36      	ldr	r3, [pc, #216]	; (810c4f0 <_strtod_l+0x5a8>)
 810c418:	9304      	str	r3, [sp, #16]
 810c41a:	2300      	movs	r3, #0
 810c41c:	ea4f 1828 	mov.w	r8, r8, asr #4
 810c420:	4650      	mov	r0, sl
 810c422:	4659      	mov	r1, fp
 810c424:	4699      	mov	r9, r3
 810c426:	f1b8 0f01 	cmp.w	r8, #1
 810c42a:	dc21      	bgt.n	810c470 <_strtod_l+0x528>
 810c42c:	b10b      	cbz	r3, 810c432 <_strtod_l+0x4ea>
 810c42e:	4682      	mov	sl, r0
 810c430:	468b      	mov	fp, r1
 810c432:	4b2f      	ldr	r3, [pc, #188]	; (810c4f0 <_strtod_l+0x5a8>)
 810c434:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 810c438:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 810c43c:	4652      	mov	r2, sl
 810c43e:	465b      	mov	r3, fp
 810c440:	e9d9 0100 	ldrd	r0, r1, [r9]
 810c444:	f7f4 f960 	bl	8100708 <__aeabi_dmul>
 810c448:	4b2a      	ldr	r3, [pc, #168]	; (810c4f4 <_strtod_l+0x5ac>)
 810c44a:	460a      	mov	r2, r1
 810c44c:	400b      	ands	r3, r1
 810c44e:	492a      	ldr	r1, [pc, #168]	; (810c4f8 <_strtod_l+0x5b0>)
 810c450:	428b      	cmp	r3, r1
 810c452:	4682      	mov	sl, r0
 810c454:	d8bc      	bhi.n	810c3d0 <_strtod_l+0x488>
 810c456:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810c45a:	428b      	cmp	r3, r1
 810c45c:	bf86      	itte	hi
 810c45e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 810c4fc <_strtod_l+0x5b4>
 810c462:	f04f 3aff 	movhi.w	sl, #4294967295
 810c466:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 810c46a:	2300      	movs	r3, #0
 810c46c:	9304      	str	r3, [sp, #16]
 810c46e:	e084      	b.n	810c57a <_strtod_l+0x632>
 810c470:	f018 0f01 	tst.w	r8, #1
 810c474:	d005      	beq.n	810c482 <_strtod_l+0x53a>
 810c476:	9b04      	ldr	r3, [sp, #16]
 810c478:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c47c:	f7f4 f944 	bl	8100708 <__aeabi_dmul>
 810c480:	2301      	movs	r3, #1
 810c482:	9a04      	ldr	r2, [sp, #16]
 810c484:	3208      	adds	r2, #8
 810c486:	f109 0901 	add.w	r9, r9, #1
 810c48a:	ea4f 0868 	mov.w	r8, r8, asr #1
 810c48e:	9204      	str	r2, [sp, #16]
 810c490:	e7c9      	b.n	810c426 <_strtod_l+0x4de>
 810c492:	d0ea      	beq.n	810c46a <_strtod_l+0x522>
 810c494:	f1c8 0800 	rsb	r8, r8, #0
 810c498:	f018 020f 	ands.w	r2, r8, #15
 810c49c:	d00a      	beq.n	810c4b4 <_strtod_l+0x56c>
 810c49e:	4b13      	ldr	r3, [pc, #76]	; (810c4ec <_strtod_l+0x5a4>)
 810c4a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810c4a4:	4650      	mov	r0, sl
 810c4a6:	4659      	mov	r1, fp
 810c4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c4ac:	f7f4 fa56 	bl	810095c <__aeabi_ddiv>
 810c4b0:	4682      	mov	sl, r0
 810c4b2:	468b      	mov	fp, r1
 810c4b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 810c4b8:	d0d7      	beq.n	810c46a <_strtod_l+0x522>
 810c4ba:	f1b8 0f1f 	cmp.w	r8, #31
 810c4be:	dd1f      	ble.n	810c500 <_strtod_l+0x5b8>
 810c4c0:	2500      	movs	r5, #0
 810c4c2:	462e      	mov	r6, r5
 810c4c4:	9507      	str	r5, [sp, #28]
 810c4c6:	9505      	str	r5, [sp, #20]
 810c4c8:	2322      	movs	r3, #34	; 0x22
 810c4ca:	f04f 0a00 	mov.w	sl, #0
 810c4ce:	f04f 0b00 	mov.w	fp, #0
 810c4d2:	6023      	str	r3, [r4, #0]
 810c4d4:	e786      	b.n	810c3e4 <_strtod_l+0x49c>
 810c4d6:	bf00      	nop
 810c4d8:	0810fb49 	.word	0x0810fb49
 810c4dc:	0810fb8c 	.word	0x0810fb8c
 810c4e0:	0810fb41 	.word	0x0810fb41
 810c4e4:	0810fccc 	.word	0x0810fccc
 810c4e8:	0810ffe0 	.word	0x0810ffe0
 810c4ec:	0810fec0 	.word	0x0810fec0
 810c4f0:	0810fe98 	.word	0x0810fe98
 810c4f4:	7ff00000 	.word	0x7ff00000
 810c4f8:	7ca00000 	.word	0x7ca00000
 810c4fc:	7fefffff 	.word	0x7fefffff
 810c500:	f018 0310 	ands.w	r3, r8, #16
 810c504:	bf18      	it	ne
 810c506:	236a      	movne	r3, #106	; 0x6a
 810c508:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 810c8b8 <_strtod_l+0x970>
 810c50c:	9304      	str	r3, [sp, #16]
 810c50e:	4650      	mov	r0, sl
 810c510:	4659      	mov	r1, fp
 810c512:	2300      	movs	r3, #0
 810c514:	f018 0f01 	tst.w	r8, #1
 810c518:	d004      	beq.n	810c524 <_strtod_l+0x5dc>
 810c51a:	e9d9 2300 	ldrd	r2, r3, [r9]
 810c51e:	f7f4 f8f3 	bl	8100708 <__aeabi_dmul>
 810c522:	2301      	movs	r3, #1
 810c524:	ea5f 0868 	movs.w	r8, r8, asr #1
 810c528:	f109 0908 	add.w	r9, r9, #8
 810c52c:	d1f2      	bne.n	810c514 <_strtod_l+0x5cc>
 810c52e:	b10b      	cbz	r3, 810c534 <_strtod_l+0x5ec>
 810c530:	4682      	mov	sl, r0
 810c532:	468b      	mov	fp, r1
 810c534:	9b04      	ldr	r3, [sp, #16]
 810c536:	b1c3      	cbz	r3, 810c56a <_strtod_l+0x622>
 810c538:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810c53c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810c540:	2b00      	cmp	r3, #0
 810c542:	4659      	mov	r1, fp
 810c544:	dd11      	ble.n	810c56a <_strtod_l+0x622>
 810c546:	2b1f      	cmp	r3, #31
 810c548:	f340 8124 	ble.w	810c794 <_strtod_l+0x84c>
 810c54c:	2b34      	cmp	r3, #52	; 0x34
 810c54e:	bfde      	ittt	le
 810c550:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810c554:	f04f 33ff 	movle.w	r3, #4294967295
 810c558:	fa03 f202 	lslle.w	r2, r3, r2
 810c55c:	f04f 0a00 	mov.w	sl, #0
 810c560:	bfcc      	ite	gt
 810c562:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 810c566:	ea02 0b01 	andle.w	fp, r2, r1
 810c56a:	2200      	movs	r2, #0
 810c56c:	2300      	movs	r3, #0
 810c56e:	4650      	mov	r0, sl
 810c570:	4659      	mov	r1, fp
 810c572:	f7f4 fb31 	bl	8100bd8 <__aeabi_dcmpeq>
 810c576:	2800      	cmp	r0, #0
 810c578:	d1a2      	bne.n	810c4c0 <_strtod_l+0x578>
 810c57a:	9b07      	ldr	r3, [sp, #28]
 810c57c:	9300      	str	r3, [sp, #0]
 810c57e:	9908      	ldr	r1, [sp, #32]
 810c580:	462b      	mov	r3, r5
 810c582:	463a      	mov	r2, r7
 810c584:	4620      	mov	r0, r4
 810c586:	f002 f901 	bl	810e78c <__s2b>
 810c58a:	9007      	str	r0, [sp, #28]
 810c58c:	2800      	cmp	r0, #0
 810c58e:	f43f af1f 	beq.w	810c3d0 <_strtod_l+0x488>
 810c592:	9b05      	ldr	r3, [sp, #20]
 810c594:	1b9e      	subs	r6, r3, r6
 810c596:	9b06      	ldr	r3, [sp, #24]
 810c598:	2b00      	cmp	r3, #0
 810c59a:	bfb4      	ite	lt
 810c59c:	4633      	movlt	r3, r6
 810c59e:	2300      	movge	r3, #0
 810c5a0:	930c      	str	r3, [sp, #48]	; 0x30
 810c5a2:	9b06      	ldr	r3, [sp, #24]
 810c5a4:	2500      	movs	r5, #0
 810c5a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810c5aa:	9312      	str	r3, [sp, #72]	; 0x48
 810c5ac:	462e      	mov	r6, r5
 810c5ae:	9b07      	ldr	r3, [sp, #28]
 810c5b0:	4620      	mov	r0, r4
 810c5b2:	6859      	ldr	r1, [r3, #4]
 810c5b4:	f002 f842 	bl	810e63c <_Balloc>
 810c5b8:	9005      	str	r0, [sp, #20]
 810c5ba:	2800      	cmp	r0, #0
 810c5bc:	f43f af0c 	beq.w	810c3d8 <_strtod_l+0x490>
 810c5c0:	9b07      	ldr	r3, [sp, #28]
 810c5c2:	691a      	ldr	r2, [r3, #16]
 810c5c4:	3202      	adds	r2, #2
 810c5c6:	f103 010c 	add.w	r1, r3, #12
 810c5ca:	0092      	lsls	r2, r2, #2
 810c5cc:	300c      	adds	r0, #12
 810c5ce:	f7fe fc6b 	bl	810aea8 <memcpy>
 810c5d2:	ec4b ab10 	vmov	d0, sl, fp
 810c5d6:	aa1a      	add	r2, sp, #104	; 0x68
 810c5d8:	a919      	add	r1, sp, #100	; 0x64
 810c5da:	4620      	mov	r0, r4
 810c5dc:	f002 fc1c 	bl	810ee18 <__d2b>
 810c5e0:	ec4b ab18 	vmov	d8, sl, fp
 810c5e4:	9018      	str	r0, [sp, #96]	; 0x60
 810c5e6:	2800      	cmp	r0, #0
 810c5e8:	f43f aef6 	beq.w	810c3d8 <_strtod_l+0x490>
 810c5ec:	2101      	movs	r1, #1
 810c5ee:	4620      	mov	r0, r4
 810c5f0:	f002 f966 	bl	810e8c0 <__i2b>
 810c5f4:	4606      	mov	r6, r0
 810c5f6:	2800      	cmp	r0, #0
 810c5f8:	f43f aeee 	beq.w	810c3d8 <_strtod_l+0x490>
 810c5fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810c5fe:	9904      	ldr	r1, [sp, #16]
 810c600:	2b00      	cmp	r3, #0
 810c602:	bfab      	itete	ge
 810c604:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 810c606:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 810c608:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810c60a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 810c60e:	bfac      	ite	ge
 810c610:	eb03 0902 	addge.w	r9, r3, r2
 810c614:	1ad7      	sublt	r7, r2, r3
 810c616:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 810c618:	eba3 0801 	sub.w	r8, r3, r1
 810c61c:	4490      	add	r8, r2
 810c61e:	4ba1      	ldr	r3, [pc, #644]	; (810c8a4 <_strtod_l+0x95c>)
 810c620:	f108 38ff 	add.w	r8, r8, #4294967295
 810c624:	4598      	cmp	r8, r3
 810c626:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810c62a:	f280 80c7 	bge.w	810c7bc <_strtod_l+0x874>
 810c62e:	eba3 0308 	sub.w	r3, r3, r8
 810c632:	2b1f      	cmp	r3, #31
 810c634:	eba2 0203 	sub.w	r2, r2, r3
 810c638:	f04f 0101 	mov.w	r1, #1
 810c63c:	f300 80b1 	bgt.w	810c7a2 <_strtod_l+0x85a>
 810c640:	fa01 f303 	lsl.w	r3, r1, r3
 810c644:	930d      	str	r3, [sp, #52]	; 0x34
 810c646:	2300      	movs	r3, #0
 810c648:	9308      	str	r3, [sp, #32]
 810c64a:	eb09 0802 	add.w	r8, r9, r2
 810c64e:	9b04      	ldr	r3, [sp, #16]
 810c650:	45c1      	cmp	r9, r8
 810c652:	4417      	add	r7, r2
 810c654:	441f      	add	r7, r3
 810c656:	464b      	mov	r3, r9
 810c658:	bfa8      	it	ge
 810c65a:	4643      	movge	r3, r8
 810c65c:	42bb      	cmp	r3, r7
 810c65e:	bfa8      	it	ge
 810c660:	463b      	movge	r3, r7
 810c662:	2b00      	cmp	r3, #0
 810c664:	bfc2      	ittt	gt
 810c666:	eba8 0803 	subgt.w	r8, r8, r3
 810c66a:	1aff      	subgt	r7, r7, r3
 810c66c:	eba9 0903 	subgt.w	r9, r9, r3
 810c670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810c672:	2b00      	cmp	r3, #0
 810c674:	dd17      	ble.n	810c6a6 <_strtod_l+0x75e>
 810c676:	4631      	mov	r1, r6
 810c678:	461a      	mov	r2, r3
 810c67a:	4620      	mov	r0, r4
 810c67c:	f002 f9e0 	bl	810ea40 <__pow5mult>
 810c680:	4606      	mov	r6, r0
 810c682:	2800      	cmp	r0, #0
 810c684:	f43f aea8 	beq.w	810c3d8 <_strtod_l+0x490>
 810c688:	4601      	mov	r1, r0
 810c68a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810c68c:	4620      	mov	r0, r4
 810c68e:	f002 f92d 	bl	810e8ec <__multiply>
 810c692:	900b      	str	r0, [sp, #44]	; 0x2c
 810c694:	2800      	cmp	r0, #0
 810c696:	f43f ae9f 	beq.w	810c3d8 <_strtod_l+0x490>
 810c69a:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c69c:	4620      	mov	r0, r4
 810c69e:	f002 f80d 	bl	810e6bc <_Bfree>
 810c6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c6a4:	9318      	str	r3, [sp, #96]	; 0x60
 810c6a6:	f1b8 0f00 	cmp.w	r8, #0
 810c6aa:	f300 808c 	bgt.w	810c7c6 <_strtod_l+0x87e>
 810c6ae:	9b06      	ldr	r3, [sp, #24]
 810c6b0:	2b00      	cmp	r3, #0
 810c6b2:	dd08      	ble.n	810c6c6 <_strtod_l+0x77e>
 810c6b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810c6b6:	9905      	ldr	r1, [sp, #20]
 810c6b8:	4620      	mov	r0, r4
 810c6ba:	f002 f9c1 	bl	810ea40 <__pow5mult>
 810c6be:	9005      	str	r0, [sp, #20]
 810c6c0:	2800      	cmp	r0, #0
 810c6c2:	f43f ae89 	beq.w	810c3d8 <_strtod_l+0x490>
 810c6c6:	2f00      	cmp	r7, #0
 810c6c8:	dd08      	ble.n	810c6dc <_strtod_l+0x794>
 810c6ca:	9905      	ldr	r1, [sp, #20]
 810c6cc:	463a      	mov	r2, r7
 810c6ce:	4620      	mov	r0, r4
 810c6d0:	f002 fa10 	bl	810eaf4 <__lshift>
 810c6d4:	9005      	str	r0, [sp, #20]
 810c6d6:	2800      	cmp	r0, #0
 810c6d8:	f43f ae7e 	beq.w	810c3d8 <_strtod_l+0x490>
 810c6dc:	f1b9 0f00 	cmp.w	r9, #0
 810c6e0:	dd08      	ble.n	810c6f4 <_strtod_l+0x7ac>
 810c6e2:	4631      	mov	r1, r6
 810c6e4:	464a      	mov	r2, r9
 810c6e6:	4620      	mov	r0, r4
 810c6e8:	f002 fa04 	bl	810eaf4 <__lshift>
 810c6ec:	4606      	mov	r6, r0
 810c6ee:	2800      	cmp	r0, #0
 810c6f0:	f43f ae72 	beq.w	810c3d8 <_strtod_l+0x490>
 810c6f4:	9a05      	ldr	r2, [sp, #20]
 810c6f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c6f8:	4620      	mov	r0, r4
 810c6fa:	f002 fa87 	bl	810ec0c <__mdiff>
 810c6fe:	4605      	mov	r5, r0
 810c700:	2800      	cmp	r0, #0
 810c702:	f43f ae69 	beq.w	810c3d8 <_strtod_l+0x490>
 810c706:	68c3      	ldr	r3, [r0, #12]
 810c708:	930b      	str	r3, [sp, #44]	; 0x2c
 810c70a:	2300      	movs	r3, #0
 810c70c:	60c3      	str	r3, [r0, #12]
 810c70e:	4631      	mov	r1, r6
 810c710:	f002 fa60 	bl	810ebd4 <__mcmp>
 810c714:	2800      	cmp	r0, #0
 810c716:	da60      	bge.n	810c7da <_strtod_l+0x892>
 810c718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c71a:	ea53 030a 	orrs.w	r3, r3, sl
 810c71e:	f040 8082 	bne.w	810c826 <_strtod_l+0x8de>
 810c722:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c726:	2b00      	cmp	r3, #0
 810c728:	d17d      	bne.n	810c826 <_strtod_l+0x8de>
 810c72a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810c72e:	0d1b      	lsrs	r3, r3, #20
 810c730:	051b      	lsls	r3, r3, #20
 810c732:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810c736:	d976      	bls.n	810c826 <_strtod_l+0x8de>
 810c738:	696b      	ldr	r3, [r5, #20]
 810c73a:	b913      	cbnz	r3, 810c742 <_strtod_l+0x7fa>
 810c73c:	692b      	ldr	r3, [r5, #16]
 810c73e:	2b01      	cmp	r3, #1
 810c740:	dd71      	ble.n	810c826 <_strtod_l+0x8de>
 810c742:	4629      	mov	r1, r5
 810c744:	2201      	movs	r2, #1
 810c746:	4620      	mov	r0, r4
 810c748:	f002 f9d4 	bl	810eaf4 <__lshift>
 810c74c:	4631      	mov	r1, r6
 810c74e:	4605      	mov	r5, r0
 810c750:	f002 fa40 	bl	810ebd4 <__mcmp>
 810c754:	2800      	cmp	r0, #0
 810c756:	dd66      	ble.n	810c826 <_strtod_l+0x8de>
 810c758:	9904      	ldr	r1, [sp, #16]
 810c75a:	4a53      	ldr	r2, [pc, #332]	; (810c8a8 <_strtod_l+0x960>)
 810c75c:	465b      	mov	r3, fp
 810c75e:	2900      	cmp	r1, #0
 810c760:	f000 8081 	beq.w	810c866 <_strtod_l+0x91e>
 810c764:	ea02 010b 	and.w	r1, r2, fp
 810c768:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810c76c:	dc7b      	bgt.n	810c866 <_strtod_l+0x91e>
 810c76e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810c772:	f77f aea9 	ble.w	810c4c8 <_strtod_l+0x580>
 810c776:	4b4d      	ldr	r3, [pc, #308]	; (810c8ac <_strtod_l+0x964>)
 810c778:	4650      	mov	r0, sl
 810c77a:	4659      	mov	r1, fp
 810c77c:	2200      	movs	r2, #0
 810c77e:	f7f3 ffc3 	bl	8100708 <__aeabi_dmul>
 810c782:	460b      	mov	r3, r1
 810c784:	4303      	orrs	r3, r0
 810c786:	bf08      	it	eq
 810c788:	2322      	moveq	r3, #34	; 0x22
 810c78a:	4682      	mov	sl, r0
 810c78c:	468b      	mov	fp, r1
 810c78e:	bf08      	it	eq
 810c790:	6023      	streq	r3, [r4, #0]
 810c792:	e62b      	b.n	810c3ec <_strtod_l+0x4a4>
 810c794:	f04f 32ff 	mov.w	r2, #4294967295
 810c798:	fa02 f303 	lsl.w	r3, r2, r3
 810c79c:	ea03 0a0a 	and.w	sl, r3, sl
 810c7a0:	e6e3      	b.n	810c56a <_strtod_l+0x622>
 810c7a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810c7a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 810c7aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 810c7ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810c7b2:	fa01 f308 	lsl.w	r3, r1, r8
 810c7b6:	9308      	str	r3, [sp, #32]
 810c7b8:	910d      	str	r1, [sp, #52]	; 0x34
 810c7ba:	e746      	b.n	810c64a <_strtod_l+0x702>
 810c7bc:	2300      	movs	r3, #0
 810c7be:	9308      	str	r3, [sp, #32]
 810c7c0:	2301      	movs	r3, #1
 810c7c2:	930d      	str	r3, [sp, #52]	; 0x34
 810c7c4:	e741      	b.n	810c64a <_strtod_l+0x702>
 810c7c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c7c8:	4642      	mov	r2, r8
 810c7ca:	4620      	mov	r0, r4
 810c7cc:	f002 f992 	bl	810eaf4 <__lshift>
 810c7d0:	9018      	str	r0, [sp, #96]	; 0x60
 810c7d2:	2800      	cmp	r0, #0
 810c7d4:	f47f af6b 	bne.w	810c6ae <_strtod_l+0x766>
 810c7d8:	e5fe      	b.n	810c3d8 <_strtod_l+0x490>
 810c7da:	465f      	mov	r7, fp
 810c7dc:	d16e      	bne.n	810c8bc <_strtod_l+0x974>
 810c7de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810c7e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c7e4:	b342      	cbz	r2, 810c838 <_strtod_l+0x8f0>
 810c7e6:	4a32      	ldr	r2, [pc, #200]	; (810c8b0 <_strtod_l+0x968>)
 810c7e8:	4293      	cmp	r3, r2
 810c7ea:	d128      	bne.n	810c83e <_strtod_l+0x8f6>
 810c7ec:	9b04      	ldr	r3, [sp, #16]
 810c7ee:	4651      	mov	r1, sl
 810c7f0:	b1eb      	cbz	r3, 810c82e <_strtod_l+0x8e6>
 810c7f2:	4b2d      	ldr	r3, [pc, #180]	; (810c8a8 <_strtod_l+0x960>)
 810c7f4:	403b      	ands	r3, r7
 810c7f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810c7fa:	f04f 32ff 	mov.w	r2, #4294967295
 810c7fe:	d819      	bhi.n	810c834 <_strtod_l+0x8ec>
 810c800:	0d1b      	lsrs	r3, r3, #20
 810c802:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810c806:	fa02 f303 	lsl.w	r3, r2, r3
 810c80a:	4299      	cmp	r1, r3
 810c80c:	d117      	bne.n	810c83e <_strtod_l+0x8f6>
 810c80e:	4b29      	ldr	r3, [pc, #164]	; (810c8b4 <_strtod_l+0x96c>)
 810c810:	429f      	cmp	r7, r3
 810c812:	d102      	bne.n	810c81a <_strtod_l+0x8d2>
 810c814:	3101      	adds	r1, #1
 810c816:	f43f addf 	beq.w	810c3d8 <_strtod_l+0x490>
 810c81a:	4b23      	ldr	r3, [pc, #140]	; (810c8a8 <_strtod_l+0x960>)
 810c81c:	403b      	ands	r3, r7
 810c81e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810c822:	f04f 0a00 	mov.w	sl, #0
 810c826:	9b04      	ldr	r3, [sp, #16]
 810c828:	2b00      	cmp	r3, #0
 810c82a:	d1a4      	bne.n	810c776 <_strtod_l+0x82e>
 810c82c:	e5de      	b.n	810c3ec <_strtod_l+0x4a4>
 810c82e:	f04f 33ff 	mov.w	r3, #4294967295
 810c832:	e7ea      	b.n	810c80a <_strtod_l+0x8c2>
 810c834:	4613      	mov	r3, r2
 810c836:	e7e8      	b.n	810c80a <_strtod_l+0x8c2>
 810c838:	ea53 030a 	orrs.w	r3, r3, sl
 810c83c:	d08c      	beq.n	810c758 <_strtod_l+0x810>
 810c83e:	9b08      	ldr	r3, [sp, #32]
 810c840:	b1db      	cbz	r3, 810c87a <_strtod_l+0x932>
 810c842:	423b      	tst	r3, r7
 810c844:	d0ef      	beq.n	810c826 <_strtod_l+0x8de>
 810c846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c848:	9a04      	ldr	r2, [sp, #16]
 810c84a:	4650      	mov	r0, sl
 810c84c:	4659      	mov	r1, fp
 810c84e:	b1c3      	cbz	r3, 810c882 <_strtod_l+0x93a>
 810c850:	f7ff fb5e 	bl	810bf10 <sulp>
 810c854:	4602      	mov	r2, r0
 810c856:	460b      	mov	r3, r1
 810c858:	ec51 0b18 	vmov	r0, r1, d8
 810c85c:	f7f3 fd9e 	bl	810039c <__adddf3>
 810c860:	4682      	mov	sl, r0
 810c862:	468b      	mov	fp, r1
 810c864:	e7df      	b.n	810c826 <_strtod_l+0x8de>
 810c866:	4013      	ands	r3, r2
 810c868:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810c86c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810c870:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810c874:	f04f 3aff 	mov.w	sl, #4294967295
 810c878:	e7d5      	b.n	810c826 <_strtod_l+0x8de>
 810c87a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810c87c:	ea13 0f0a 	tst.w	r3, sl
 810c880:	e7e0      	b.n	810c844 <_strtod_l+0x8fc>
 810c882:	f7ff fb45 	bl	810bf10 <sulp>
 810c886:	4602      	mov	r2, r0
 810c888:	460b      	mov	r3, r1
 810c88a:	ec51 0b18 	vmov	r0, r1, d8
 810c88e:	f7f3 fd83 	bl	8100398 <__aeabi_dsub>
 810c892:	2200      	movs	r2, #0
 810c894:	2300      	movs	r3, #0
 810c896:	4682      	mov	sl, r0
 810c898:	468b      	mov	fp, r1
 810c89a:	f7f4 f99d 	bl	8100bd8 <__aeabi_dcmpeq>
 810c89e:	2800      	cmp	r0, #0
 810c8a0:	d0c1      	beq.n	810c826 <_strtod_l+0x8de>
 810c8a2:	e611      	b.n	810c4c8 <_strtod_l+0x580>
 810c8a4:	fffffc02 	.word	0xfffffc02
 810c8a8:	7ff00000 	.word	0x7ff00000
 810c8ac:	39500000 	.word	0x39500000
 810c8b0:	000fffff 	.word	0x000fffff
 810c8b4:	7fefffff 	.word	0x7fefffff
 810c8b8:	0810fba0 	.word	0x0810fba0
 810c8bc:	4631      	mov	r1, r6
 810c8be:	4628      	mov	r0, r5
 810c8c0:	f002 fb06 	bl	810eed0 <__ratio>
 810c8c4:	ec59 8b10 	vmov	r8, r9, d0
 810c8c8:	ee10 0a10 	vmov	r0, s0
 810c8cc:	2200      	movs	r2, #0
 810c8ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810c8d2:	4649      	mov	r1, r9
 810c8d4:	f7f4 f994 	bl	8100c00 <__aeabi_dcmple>
 810c8d8:	2800      	cmp	r0, #0
 810c8da:	d07a      	beq.n	810c9d2 <_strtod_l+0xa8a>
 810c8dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c8de:	2b00      	cmp	r3, #0
 810c8e0:	d04a      	beq.n	810c978 <_strtod_l+0xa30>
 810c8e2:	4b95      	ldr	r3, [pc, #596]	; (810cb38 <_strtod_l+0xbf0>)
 810c8e4:	2200      	movs	r2, #0
 810c8e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810c8ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 810cb38 <_strtod_l+0xbf0>
 810c8ee:	f04f 0800 	mov.w	r8, #0
 810c8f2:	4b92      	ldr	r3, [pc, #584]	; (810cb3c <_strtod_l+0xbf4>)
 810c8f4:	403b      	ands	r3, r7
 810c8f6:	930d      	str	r3, [sp, #52]	; 0x34
 810c8f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810c8fa:	4b91      	ldr	r3, [pc, #580]	; (810cb40 <_strtod_l+0xbf8>)
 810c8fc:	429a      	cmp	r2, r3
 810c8fe:	f040 80b0 	bne.w	810ca62 <_strtod_l+0xb1a>
 810c902:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810c906:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810c90a:	ec4b ab10 	vmov	d0, sl, fp
 810c90e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810c912:	f002 fa05 	bl	810ed20 <__ulp>
 810c916:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810c91a:	ec53 2b10 	vmov	r2, r3, d0
 810c91e:	f7f3 fef3 	bl	8100708 <__aeabi_dmul>
 810c922:	4652      	mov	r2, sl
 810c924:	465b      	mov	r3, fp
 810c926:	f7f3 fd39 	bl	810039c <__adddf3>
 810c92a:	460b      	mov	r3, r1
 810c92c:	4983      	ldr	r1, [pc, #524]	; (810cb3c <_strtod_l+0xbf4>)
 810c92e:	4a85      	ldr	r2, [pc, #532]	; (810cb44 <_strtod_l+0xbfc>)
 810c930:	4019      	ands	r1, r3
 810c932:	4291      	cmp	r1, r2
 810c934:	4682      	mov	sl, r0
 810c936:	d960      	bls.n	810c9fa <_strtod_l+0xab2>
 810c938:	ee18 3a90 	vmov	r3, s17
 810c93c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 810c940:	4293      	cmp	r3, r2
 810c942:	d104      	bne.n	810c94e <_strtod_l+0xa06>
 810c944:	ee18 3a10 	vmov	r3, s16
 810c948:	3301      	adds	r3, #1
 810c94a:	f43f ad45 	beq.w	810c3d8 <_strtod_l+0x490>
 810c94e:	f8df b200 	ldr.w	fp, [pc, #512]	; 810cb50 <_strtod_l+0xc08>
 810c952:	f04f 3aff 	mov.w	sl, #4294967295
 810c956:	9918      	ldr	r1, [sp, #96]	; 0x60
 810c958:	4620      	mov	r0, r4
 810c95a:	f001 feaf 	bl	810e6bc <_Bfree>
 810c95e:	9905      	ldr	r1, [sp, #20]
 810c960:	4620      	mov	r0, r4
 810c962:	f001 feab 	bl	810e6bc <_Bfree>
 810c966:	4631      	mov	r1, r6
 810c968:	4620      	mov	r0, r4
 810c96a:	f001 fea7 	bl	810e6bc <_Bfree>
 810c96e:	4629      	mov	r1, r5
 810c970:	4620      	mov	r0, r4
 810c972:	f001 fea3 	bl	810e6bc <_Bfree>
 810c976:	e61a      	b.n	810c5ae <_strtod_l+0x666>
 810c978:	f1ba 0f00 	cmp.w	sl, #0
 810c97c:	d11b      	bne.n	810c9b6 <_strtod_l+0xa6e>
 810c97e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810c982:	b9f3      	cbnz	r3, 810c9c2 <_strtod_l+0xa7a>
 810c984:	4b6c      	ldr	r3, [pc, #432]	; (810cb38 <_strtod_l+0xbf0>)
 810c986:	2200      	movs	r2, #0
 810c988:	4640      	mov	r0, r8
 810c98a:	4649      	mov	r1, r9
 810c98c:	f7f4 f92e 	bl	8100bec <__aeabi_dcmplt>
 810c990:	b9d0      	cbnz	r0, 810c9c8 <_strtod_l+0xa80>
 810c992:	4640      	mov	r0, r8
 810c994:	4649      	mov	r1, r9
 810c996:	4b6c      	ldr	r3, [pc, #432]	; (810cb48 <_strtod_l+0xc00>)
 810c998:	2200      	movs	r2, #0
 810c99a:	f7f3 feb5 	bl	8100708 <__aeabi_dmul>
 810c99e:	4680      	mov	r8, r0
 810c9a0:	4689      	mov	r9, r1
 810c9a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810c9a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 810c9aa:	9315      	str	r3, [sp, #84]	; 0x54
 810c9ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 810c9b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810c9b4:	e79d      	b.n	810c8f2 <_strtod_l+0x9aa>
 810c9b6:	f1ba 0f01 	cmp.w	sl, #1
 810c9ba:	d102      	bne.n	810c9c2 <_strtod_l+0xa7a>
 810c9bc:	2f00      	cmp	r7, #0
 810c9be:	f43f ad83 	beq.w	810c4c8 <_strtod_l+0x580>
 810c9c2:	4b62      	ldr	r3, [pc, #392]	; (810cb4c <_strtod_l+0xc04>)
 810c9c4:	2200      	movs	r2, #0
 810c9c6:	e78e      	b.n	810c8e6 <_strtod_l+0x99e>
 810c9c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 810cb48 <_strtod_l+0xc00>
 810c9cc:	f04f 0800 	mov.w	r8, #0
 810c9d0:	e7e7      	b.n	810c9a2 <_strtod_l+0xa5a>
 810c9d2:	4b5d      	ldr	r3, [pc, #372]	; (810cb48 <_strtod_l+0xc00>)
 810c9d4:	4640      	mov	r0, r8
 810c9d6:	4649      	mov	r1, r9
 810c9d8:	2200      	movs	r2, #0
 810c9da:	f7f3 fe95 	bl	8100708 <__aeabi_dmul>
 810c9de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c9e0:	4680      	mov	r8, r0
 810c9e2:	4689      	mov	r9, r1
 810c9e4:	b933      	cbnz	r3, 810c9f4 <_strtod_l+0xaac>
 810c9e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810c9ea:	900e      	str	r0, [sp, #56]	; 0x38
 810c9ec:	930f      	str	r3, [sp, #60]	; 0x3c
 810c9ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 810c9f2:	e7dd      	b.n	810c9b0 <_strtod_l+0xa68>
 810c9f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 810c9f8:	e7f9      	b.n	810c9ee <_strtod_l+0xaa6>
 810c9fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810c9fe:	9b04      	ldr	r3, [sp, #16]
 810ca00:	2b00      	cmp	r3, #0
 810ca02:	d1a8      	bne.n	810c956 <_strtod_l+0xa0e>
 810ca04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810ca08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810ca0a:	0d1b      	lsrs	r3, r3, #20
 810ca0c:	051b      	lsls	r3, r3, #20
 810ca0e:	429a      	cmp	r2, r3
 810ca10:	d1a1      	bne.n	810c956 <_strtod_l+0xa0e>
 810ca12:	4640      	mov	r0, r8
 810ca14:	4649      	mov	r1, r9
 810ca16:	f7f4 f9d7 	bl	8100dc8 <__aeabi_d2lz>
 810ca1a:	f7f3 fe47 	bl	81006ac <__aeabi_l2d>
 810ca1e:	4602      	mov	r2, r0
 810ca20:	460b      	mov	r3, r1
 810ca22:	4640      	mov	r0, r8
 810ca24:	4649      	mov	r1, r9
 810ca26:	f7f3 fcb7 	bl	8100398 <__aeabi_dsub>
 810ca2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810ca2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810ca30:	ea43 030a 	orr.w	r3, r3, sl
 810ca34:	4313      	orrs	r3, r2
 810ca36:	4680      	mov	r8, r0
 810ca38:	4689      	mov	r9, r1
 810ca3a:	d055      	beq.n	810cae8 <_strtod_l+0xba0>
 810ca3c:	a336      	add	r3, pc, #216	; (adr r3, 810cb18 <_strtod_l+0xbd0>)
 810ca3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca42:	f7f4 f8d3 	bl	8100bec <__aeabi_dcmplt>
 810ca46:	2800      	cmp	r0, #0
 810ca48:	f47f acd0 	bne.w	810c3ec <_strtod_l+0x4a4>
 810ca4c:	a334      	add	r3, pc, #208	; (adr r3, 810cb20 <_strtod_l+0xbd8>)
 810ca4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca52:	4640      	mov	r0, r8
 810ca54:	4649      	mov	r1, r9
 810ca56:	f7f4 f8e7 	bl	8100c28 <__aeabi_dcmpgt>
 810ca5a:	2800      	cmp	r0, #0
 810ca5c:	f43f af7b 	beq.w	810c956 <_strtod_l+0xa0e>
 810ca60:	e4c4      	b.n	810c3ec <_strtod_l+0x4a4>
 810ca62:	9b04      	ldr	r3, [sp, #16]
 810ca64:	b333      	cbz	r3, 810cab4 <_strtod_l+0xb6c>
 810ca66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810ca68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810ca6c:	d822      	bhi.n	810cab4 <_strtod_l+0xb6c>
 810ca6e:	a32e      	add	r3, pc, #184	; (adr r3, 810cb28 <_strtod_l+0xbe0>)
 810ca70:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca74:	4640      	mov	r0, r8
 810ca76:	4649      	mov	r1, r9
 810ca78:	f7f4 f8c2 	bl	8100c00 <__aeabi_dcmple>
 810ca7c:	b1a0      	cbz	r0, 810caa8 <_strtod_l+0xb60>
 810ca7e:	4649      	mov	r1, r9
 810ca80:	4640      	mov	r0, r8
 810ca82:	f7f4 f919 	bl	8100cb8 <__aeabi_d2uiz>
 810ca86:	2801      	cmp	r0, #1
 810ca88:	bf38      	it	cc
 810ca8a:	2001      	movcc	r0, #1
 810ca8c:	f7f3 fdc2 	bl	8100614 <__aeabi_ui2d>
 810ca90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ca92:	4680      	mov	r8, r0
 810ca94:	4689      	mov	r9, r1
 810ca96:	bb23      	cbnz	r3, 810cae2 <_strtod_l+0xb9a>
 810ca98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810ca9c:	9010      	str	r0, [sp, #64]	; 0x40
 810ca9e:	9311      	str	r3, [sp, #68]	; 0x44
 810caa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810caa4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810caa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810caaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810caac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810cab0:	1a9b      	subs	r3, r3, r2
 810cab2:	9309      	str	r3, [sp, #36]	; 0x24
 810cab4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810cab8:	eeb0 0a48 	vmov.f32	s0, s16
 810cabc:	eef0 0a68 	vmov.f32	s1, s17
 810cac0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810cac4:	f002 f92c 	bl	810ed20 <__ulp>
 810cac8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810cacc:	ec53 2b10 	vmov	r2, r3, d0
 810cad0:	f7f3 fe1a 	bl	8100708 <__aeabi_dmul>
 810cad4:	ec53 2b18 	vmov	r2, r3, d8
 810cad8:	f7f3 fc60 	bl	810039c <__adddf3>
 810cadc:	4682      	mov	sl, r0
 810cade:	468b      	mov	fp, r1
 810cae0:	e78d      	b.n	810c9fe <_strtod_l+0xab6>
 810cae2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 810cae6:	e7db      	b.n	810caa0 <_strtod_l+0xb58>
 810cae8:	a311      	add	r3, pc, #68	; (adr r3, 810cb30 <_strtod_l+0xbe8>)
 810caea:	e9d3 2300 	ldrd	r2, r3, [r3]
 810caee:	f7f4 f87d 	bl	8100bec <__aeabi_dcmplt>
 810caf2:	e7b2      	b.n	810ca5a <_strtod_l+0xb12>
 810caf4:	2300      	movs	r3, #0
 810caf6:	930a      	str	r3, [sp, #40]	; 0x28
 810caf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810cafa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810cafc:	6013      	str	r3, [r2, #0]
 810cafe:	f7ff ba6b 	b.w	810bfd8 <_strtod_l+0x90>
 810cb02:	2a65      	cmp	r2, #101	; 0x65
 810cb04:	f43f ab5f 	beq.w	810c1c6 <_strtod_l+0x27e>
 810cb08:	2a45      	cmp	r2, #69	; 0x45
 810cb0a:	f43f ab5c 	beq.w	810c1c6 <_strtod_l+0x27e>
 810cb0e:	2301      	movs	r3, #1
 810cb10:	f7ff bb94 	b.w	810c23c <_strtod_l+0x2f4>
 810cb14:	f3af 8000 	nop.w
 810cb18:	94a03595 	.word	0x94a03595
 810cb1c:	3fdfffff 	.word	0x3fdfffff
 810cb20:	35afe535 	.word	0x35afe535
 810cb24:	3fe00000 	.word	0x3fe00000
 810cb28:	ffc00000 	.word	0xffc00000
 810cb2c:	41dfffff 	.word	0x41dfffff
 810cb30:	94a03595 	.word	0x94a03595
 810cb34:	3fcfffff 	.word	0x3fcfffff
 810cb38:	3ff00000 	.word	0x3ff00000
 810cb3c:	7ff00000 	.word	0x7ff00000
 810cb40:	7fe00000 	.word	0x7fe00000
 810cb44:	7c9fffff 	.word	0x7c9fffff
 810cb48:	3fe00000 	.word	0x3fe00000
 810cb4c:	bff00000 	.word	0xbff00000
 810cb50:	7fefffff 	.word	0x7fefffff

0810cb54 <_strtod_r>:
 810cb54:	4b01      	ldr	r3, [pc, #4]	; (810cb5c <_strtod_r+0x8>)
 810cb56:	f7ff b9f7 	b.w	810bf48 <_strtod_l>
 810cb5a:	bf00      	nop
 810cb5c:	10000088 	.word	0x10000088

0810cb60 <_strtol_l.constprop.0>:
 810cb60:	2b01      	cmp	r3, #1
 810cb62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810cb66:	d001      	beq.n	810cb6c <_strtol_l.constprop.0+0xc>
 810cb68:	2b24      	cmp	r3, #36	; 0x24
 810cb6a:	d906      	bls.n	810cb7a <_strtol_l.constprop.0+0x1a>
 810cb6c:	f7fe f96a 	bl	810ae44 <__errno>
 810cb70:	2316      	movs	r3, #22
 810cb72:	6003      	str	r3, [r0, #0]
 810cb74:	2000      	movs	r0, #0
 810cb76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cb7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810cc60 <_strtol_l.constprop.0+0x100>
 810cb7e:	460d      	mov	r5, r1
 810cb80:	462e      	mov	r6, r5
 810cb82:	f815 4b01 	ldrb.w	r4, [r5], #1
 810cb86:	f814 700c 	ldrb.w	r7, [r4, ip]
 810cb8a:	f017 0708 	ands.w	r7, r7, #8
 810cb8e:	d1f7      	bne.n	810cb80 <_strtol_l.constprop.0+0x20>
 810cb90:	2c2d      	cmp	r4, #45	; 0x2d
 810cb92:	d132      	bne.n	810cbfa <_strtol_l.constprop.0+0x9a>
 810cb94:	782c      	ldrb	r4, [r5, #0]
 810cb96:	2701      	movs	r7, #1
 810cb98:	1cb5      	adds	r5, r6, #2
 810cb9a:	2b00      	cmp	r3, #0
 810cb9c:	d05b      	beq.n	810cc56 <_strtol_l.constprop.0+0xf6>
 810cb9e:	2b10      	cmp	r3, #16
 810cba0:	d109      	bne.n	810cbb6 <_strtol_l.constprop.0+0x56>
 810cba2:	2c30      	cmp	r4, #48	; 0x30
 810cba4:	d107      	bne.n	810cbb6 <_strtol_l.constprop.0+0x56>
 810cba6:	782c      	ldrb	r4, [r5, #0]
 810cba8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810cbac:	2c58      	cmp	r4, #88	; 0x58
 810cbae:	d14d      	bne.n	810cc4c <_strtol_l.constprop.0+0xec>
 810cbb0:	786c      	ldrb	r4, [r5, #1]
 810cbb2:	2310      	movs	r3, #16
 810cbb4:	3502      	adds	r5, #2
 810cbb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810cbba:	f108 38ff 	add.w	r8, r8, #4294967295
 810cbbe:	f04f 0c00 	mov.w	ip, #0
 810cbc2:	fbb8 f9f3 	udiv	r9, r8, r3
 810cbc6:	4666      	mov	r6, ip
 810cbc8:	fb03 8a19 	mls	sl, r3, r9, r8
 810cbcc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 810cbd0:	f1be 0f09 	cmp.w	lr, #9
 810cbd4:	d816      	bhi.n	810cc04 <_strtol_l.constprop.0+0xa4>
 810cbd6:	4674      	mov	r4, lr
 810cbd8:	42a3      	cmp	r3, r4
 810cbda:	dd24      	ble.n	810cc26 <_strtol_l.constprop.0+0xc6>
 810cbdc:	f1bc 0f00 	cmp.w	ip, #0
 810cbe0:	db1e      	blt.n	810cc20 <_strtol_l.constprop.0+0xc0>
 810cbe2:	45b1      	cmp	r9, r6
 810cbe4:	d31c      	bcc.n	810cc20 <_strtol_l.constprop.0+0xc0>
 810cbe6:	d101      	bne.n	810cbec <_strtol_l.constprop.0+0x8c>
 810cbe8:	45a2      	cmp	sl, r4
 810cbea:	db19      	blt.n	810cc20 <_strtol_l.constprop.0+0xc0>
 810cbec:	fb06 4603 	mla	r6, r6, r3, r4
 810cbf0:	f04f 0c01 	mov.w	ip, #1
 810cbf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 810cbf8:	e7e8      	b.n	810cbcc <_strtol_l.constprop.0+0x6c>
 810cbfa:	2c2b      	cmp	r4, #43	; 0x2b
 810cbfc:	bf04      	itt	eq
 810cbfe:	782c      	ldrbeq	r4, [r5, #0]
 810cc00:	1cb5      	addeq	r5, r6, #2
 810cc02:	e7ca      	b.n	810cb9a <_strtol_l.constprop.0+0x3a>
 810cc04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 810cc08:	f1be 0f19 	cmp.w	lr, #25
 810cc0c:	d801      	bhi.n	810cc12 <_strtol_l.constprop.0+0xb2>
 810cc0e:	3c37      	subs	r4, #55	; 0x37
 810cc10:	e7e2      	b.n	810cbd8 <_strtol_l.constprop.0+0x78>
 810cc12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 810cc16:	f1be 0f19 	cmp.w	lr, #25
 810cc1a:	d804      	bhi.n	810cc26 <_strtol_l.constprop.0+0xc6>
 810cc1c:	3c57      	subs	r4, #87	; 0x57
 810cc1e:	e7db      	b.n	810cbd8 <_strtol_l.constprop.0+0x78>
 810cc20:	f04f 3cff 	mov.w	ip, #4294967295
 810cc24:	e7e6      	b.n	810cbf4 <_strtol_l.constprop.0+0x94>
 810cc26:	f1bc 0f00 	cmp.w	ip, #0
 810cc2a:	da05      	bge.n	810cc38 <_strtol_l.constprop.0+0xd8>
 810cc2c:	2322      	movs	r3, #34	; 0x22
 810cc2e:	6003      	str	r3, [r0, #0]
 810cc30:	4646      	mov	r6, r8
 810cc32:	b942      	cbnz	r2, 810cc46 <_strtol_l.constprop.0+0xe6>
 810cc34:	4630      	mov	r0, r6
 810cc36:	e79e      	b.n	810cb76 <_strtol_l.constprop.0+0x16>
 810cc38:	b107      	cbz	r7, 810cc3c <_strtol_l.constprop.0+0xdc>
 810cc3a:	4276      	negs	r6, r6
 810cc3c:	2a00      	cmp	r2, #0
 810cc3e:	d0f9      	beq.n	810cc34 <_strtol_l.constprop.0+0xd4>
 810cc40:	f1bc 0f00 	cmp.w	ip, #0
 810cc44:	d000      	beq.n	810cc48 <_strtol_l.constprop.0+0xe8>
 810cc46:	1e69      	subs	r1, r5, #1
 810cc48:	6011      	str	r1, [r2, #0]
 810cc4a:	e7f3      	b.n	810cc34 <_strtol_l.constprop.0+0xd4>
 810cc4c:	2430      	movs	r4, #48	; 0x30
 810cc4e:	2b00      	cmp	r3, #0
 810cc50:	d1b1      	bne.n	810cbb6 <_strtol_l.constprop.0+0x56>
 810cc52:	2308      	movs	r3, #8
 810cc54:	e7af      	b.n	810cbb6 <_strtol_l.constprop.0+0x56>
 810cc56:	2c30      	cmp	r4, #48	; 0x30
 810cc58:	d0a5      	beq.n	810cba6 <_strtol_l.constprop.0+0x46>
 810cc5a:	230a      	movs	r3, #10
 810cc5c:	e7ab      	b.n	810cbb6 <_strtol_l.constprop.0+0x56>
 810cc5e:	bf00      	nop
 810cc60:	0810fbc9 	.word	0x0810fbc9

0810cc64 <_strtol_r>:
 810cc64:	f7ff bf7c 	b.w	810cb60 <_strtol_l.constprop.0>

0810cc68 <__swbuf_r>:
 810cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cc6a:	460e      	mov	r6, r1
 810cc6c:	4614      	mov	r4, r2
 810cc6e:	4605      	mov	r5, r0
 810cc70:	b118      	cbz	r0, 810cc7a <__swbuf_r+0x12>
 810cc72:	6983      	ldr	r3, [r0, #24]
 810cc74:	b90b      	cbnz	r3, 810cc7a <__swbuf_r+0x12>
 810cc76:	f001 f84b 	bl	810dd10 <__sinit>
 810cc7a:	4b21      	ldr	r3, [pc, #132]	; (810cd00 <__swbuf_r+0x98>)
 810cc7c:	429c      	cmp	r4, r3
 810cc7e:	d12b      	bne.n	810ccd8 <__swbuf_r+0x70>
 810cc80:	686c      	ldr	r4, [r5, #4]
 810cc82:	69a3      	ldr	r3, [r4, #24]
 810cc84:	60a3      	str	r3, [r4, #8]
 810cc86:	89a3      	ldrh	r3, [r4, #12]
 810cc88:	071a      	lsls	r2, r3, #28
 810cc8a:	d52f      	bpl.n	810ccec <__swbuf_r+0x84>
 810cc8c:	6923      	ldr	r3, [r4, #16]
 810cc8e:	b36b      	cbz	r3, 810ccec <__swbuf_r+0x84>
 810cc90:	6923      	ldr	r3, [r4, #16]
 810cc92:	6820      	ldr	r0, [r4, #0]
 810cc94:	1ac0      	subs	r0, r0, r3
 810cc96:	6963      	ldr	r3, [r4, #20]
 810cc98:	b2f6      	uxtb	r6, r6
 810cc9a:	4283      	cmp	r3, r0
 810cc9c:	4637      	mov	r7, r6
 810cc9e:	dc04      	bgt.n	810ccaa <__swbuf_r+0x42>
 810cca0:	4621      	mov	r1, r4
 810cca2:	4628      	mov	r0, r5
 810cca4:	f000 ffa0 	bl	810dbe8 <_fflush_r>
 810cca8:	bb30      	cbnz	r0, 810ccf8 <__swbuf_r+0x90>
 810ccaa:	68a3      	ldr	r3, [r4, #8]
 810ccac:	3b01      	subs	r3, #1
 810ccae:	60a3      	str	r3, [r4, #8]
 810ccb0:	6823      	ldr	r3, [r4, #0]
 810ccb2:	1c5a      	adds	r2, r3, #1
 810ccb4:	6022      	str	r2, [r4, #0]
 810ccb6:	701e      	strb	r6, [r3, #0]
 810ccb8:	6963      	ldr	r3, [r4, #20]
 810ccba:	3001      	adds	r0, #1
 810ccbc:	4283      	cmp	r3, r0
 810ccbe:	d004      	beq.n	810ccca <__swbuf_r+0x62>
 810ccc0:	89a3      	ldrh	r3, [r4, #12]
 810ccc2:	07db      	lsls	r3, r3, #31
 810ccc4:	d506      	bpl.n	810ccd4 <__swbuf_r+0x6c>
 810ccc6:	2e0a      	cmp	r6, #10
 810ccc8:	d104      	bne.n	810ccd4 <__swbuf_r+0x6c>
 810ccca:	4621      	mov	r1, r4
 810cccc:	4628      	mov	r0, r5
 810ccce:	f000 ff8b 	bl	810dbe8 <_fflush_r>
 810ccd2:	b988      	cbnz	r0, 810ccf8 <__swbuf_r+0x90>
 810ccd4:	4638      	mov	r0, r7
 810ccd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810ccd8:	4b0a      	ldr	r3, [pc, #40]	; (810cd04 <__swbuf_r+0x9c>)
 810ccda:	429c      	cmp	r4, r3
 810ccdc:	d101      	bne.n	810cce2 <__swbuf_r+0x7a>
 810ccde:	68ac      	ldr	r4, [r5, #8]
 810cce0:	e7cf      	b.n	810cc82 <__swbuf_r+0x1a>
 810cce2:	4b09      	ldr	r3, [pc, #36]	; (810cd08 <__swbuf_r+0xa0>)
 810cce4:	429c      	cmp	r4, r3
 810cce6:	bf08      	it	eq
 810cce8:	68ec      	ldreq	r4, [r5, #12]
 810ccea:	e7ca      	b.n	810cc82 <__swbuf_r+0x1a>
 810ccec:	4621      	mov	r1, r4
 810ccee:	4628      	mov	r0, r5
 810ccf0:	f000 f80c 	bl	810cd0c <__swsetup_r>
 810ccf4:	2800      	cmp	r0, #0
 810ccf6:	d0cb      	beq.n	810cc90 <__swbuf_r+0x28>
 810ccf8:	f04f 37ff 	mov.w	r7, #4294967295
 810ccfc:	e7ea      	b.n	810ccd4 <__swbuf_r+0x6c>
 810ccfe:	bf00      	nop
 810cd00:	0810fd7c 	.word	0x0810fd7c
 810cd04:	0810fd9c 	.word	0x0810fd9c
 810cd08:	0810fd5c 	.word	0x0810fd5c

0810cd0c <__swsetup_r>:
 810cd0c:	4b32      	ldr	r3, [pc, #200]	; (810cdd8 <__swsetup_r+0xcc>)
 810cd0e:	b570      	push	{r4, r5, r6, lr}
 810cd10:	681d      	ldr	r5, [r3, #0]
 810cd12:	4606      	mov	r6, r0
 810cd14:	460c      	mov	r4, r1
 810cd16:	b125      	cbz	r5, 810cd22 <__swsetup_r+0x16>
 810cd18:	69ab      	ldr	r3, [r5, #24]
 810cd1a:	b913      	cbnz	r3, 810cd22 <__swsetup_r+0x16>
 810cd1c:	4628      	mov	r0, r5
 810cd1e:	f000 fff7 	bl	810dd10 <__sinit>
 810cd22:	4b2e      	ldr	r3, [pc, #184]	; (810cddc <__swsetup_r+0xd0>)
 810cd24:	429c      	cmp	r4, r3
 810cd26:	d10f      	bne.n	810cd48 <__swsetup_r+0x3c>
 810cd28:	686c      	ldr	r4, [r5, #4]
 810cd2a:	89a3      	ldrh	r3, [r4, #12]
 810cd2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810cd30:	0719      	lsls	r1, r3, #28
 810cd32:	d42c      	bmi.n	810cd8e <__swsetup_r+0x82>
 810cd34:	06dd      	lsls	r5, r3, #27
 810cd36:	d411      	bmi.n	810cd5c <__swsetup_r+0x50>
 810cd38:	2309      	movs	r3, #9
 810cd3a:	6033      	str	r3, [r6, #0]
 810cd3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810cd40:	81a3      	strh	r3, [r4, #12]
 810cd42:	f04f 30ff 	mov.w	r0, #4294967295
 810cd46:	e03e      	b.n	810cdc6 <__swsetup_r+0xba>
 810cd48:	4b25      	ldr	r3, [pc, #148]	; (810cde0 <__swsetup_r+0xd4>)
 810cd4a:	429c      	cmp	r4, r3
 810cd4c:	d101      	bne.n	810cd52 <__swsetup_r+0x46>
 810cd4e:	68ac      	ldr	r4, [r5, #8]
 810cd50:	e7eb      	b.n	810cd2a <__swsetup_r+0x1e>
 810cd52:	4b24      	ldr	r3, [pc, #144]	; (810cde4 <__swsetup_r+0xd8>)
 810cd54:	429c      	cmp	r4, r3
 810cd56:	bf08      	it	eq
 810cd58:	68ec      	ldreq	r4, [r5, #12]
 810cd5a:	e7e6      	b.n	810cd2a <__swsetup_r+0x1e>
 810cd5c:	0758      	lsls	r0, r3, #29
 810cd5e:	d512      	bpl.n	810cd86 <__swsetup_r+0x7a>
 810cd60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810cd62:	b141      	cbz	r1, 810cd76 <__swsetup_r+0x6a>
 810cd64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810cd68:	4299      	cmp	r1, r3
 810cd6a:	d002      	beq.n	810cd72 <__swsetup_r+0x66>
 810cd6c:	4630      	mov	r0, r6
 810cd6e:	f7fe f8b1 	bl	810aed4 <_free_r>
 810cd72:	2300      	movs	r3, #0
 810cd74:	6363      	str	r3, [r4, #52]	; 0x34
 810cd76:	89a3      	ldrh	r3, [r4, #12]
 810cd78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810cd7c:	81a3      	strh	r3, [r4, #12]
 810cd7e:	2300      	movs	r3, #0
 810cd80:	6063      	str	r3, [r4, #4]
 810cd82:	6923      	ldr	r3, [r4, #16]
 810cd84:	6023      	str	r3, [r4, #0]
 810cd86:	89a3      	ldrh	r3, [r4, #12]
 810cd88:	f043 0308 	orr.w	r3, r3, #8
 810cd8c:	81a3      	strh	r3, [r4, #12]
 810cd8e:	6923      	ldr	r3, [r4, #16]
 810cd90:	b94b      	cbnz	r3, 810cda6 <__swsetup_r+0x9a>
 810cd92:	89a3      	ldrh	r3, [r4, #12]
 810cd94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810cd98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810cd9c:	d003      	beq.n	810cda6 <__swsetup_r+0x9a>
 810cd9e:	4621      	mov	r1, r4
 810cda0:	4630      	mov	r0, r6
 810cda2:	f001 fbed 	bl	810e580 <__smakebuf_r>
 810cda6:	89a0      	ldrh	r0, [r4, #12]
 810cda8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810cdac:	f010 0301 	ands.w	r3, r0, #1
 810cdb0:	d00a      	beq.n	810cdc8 <__swsetup_r+0xbc>
 810cdb2:	2300      	movs	r3, #0
 810cdb4:	60a3      	str	r3, [r4, #8]
 810cdb6:	6963      	ldr	r3, [r4, #20]
 810cdb8:	425b      	negs	r3, r3
 810cdba:	61a3      	str	r3, [r4, #24]
 810cdbc:	6923      	ldr	r3, [r4, #16]
 810cdbe:	b943      	cbnz	r3, 810cdd2 <__swsetup_r+0xc6>
 810cdc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810cdc4:	d1ba      	bne.n	810cd3c <__swsetup_r+0x30>
 810cdc6:	bd70      	pop	{r4, r5, r6, pc}
 810cdc8:	0781      	lsls	r1, r0, #30
 810cdca:	bf58      	it	pl
 810cdcc:	6963      	ldrpl	r3, [r4, #20]
 810cdce:	60a3      	str	r3, [r4, #8]
 810cdd0:	e7f4      	b.n	810cdbc <__swsetup_r+0xb0>
 810cdd2:	2000      	movs	r0, #0
 810cdd4:	e7f7      	b.n	810cdc6 <__swsetup_r+0xba>
 810cdd6:	bf00      	nop
 810cdd8:	10000020 	.word	0x10000020
 810cddc:	0810fd7c 	.word	0x0810fd7c
 810cde0:	0810fd9c 	.word	0x0810fd9c
 810cde4:	0810fd5c 	.word	0x0810fd5c

0810cde8 <quorem>:
 810cde8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cdec:	6903      	ldr	r3, [r0, #16]
 810cdee:	690c      	ldr	r4, [r1, #16]
 810cdf0:	42a3      	cmp	r3, r4
 810cdf2:	4607      	mov	r7, r0
 810cdf4:	f2c0 8081 	blt.w	810cefa <quorem+0x112>
 810cdf8:	3c01      	subs	r4, #1
 810cdfa:	f101 0814 	add.w	r8, r1, #20
 810cdfe:	f100 0514 	add.w	r5, r0, #20
 810ce02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ce06:	9301      	str	r3, [sp, #4]
 810ce08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810ce0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ce10:	3301      	adds	r3, #1
 810ce12:	429a      	cmp	r2, r3
 810ce14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810ce18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810ce1c:	fbb2 f6f3 	udiv	r6, r2, r3
 810ce20:	d331      	bcc.n	810ce86 <quorem+0x9e>
 810ce22:	f04f 0e00 	mov.w	lr, #0
 810ce26:	4640      	mov	r0, r8
 810ce28:	46ac      	mov	ip, r5
 810ce2a:	46f2      	mov	sl, lr
 810ce2c:	f850 2b04 	ldr.w	r2, [r0], #4
 810ce30:	b293      	uxth	r3, r2
 810ce32:	fb06 e303 	mla	r3, r6, r3, lr
 810ce36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 810ce3a:	b29b      	uxth	r3, r3
 810ce3c:	ebaa 0303 	sub.w	r3, sl, r3
 810ce40:	f8dc a000 	ldr.w	sl, [ip]
 810ce44:	0c12      	lsrs	r2, r2, #16
 810ce46:	fa13 f38a 	uxtah	r3, r3, sl
 810ce4a:	fb06 e202 	mla	r2, r6, r2, lr
 810ce4e:	9300      	str	r3, [sp, #0]
 810ce50:	9b00      	ldr	r3, [sp, #0]
 810ce52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810ce56:	b292      	uxth	r2, r2
 810ce58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810ce5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ce60:	f8bd 3000 	ldrh.w	r3, [sp]
 810ce64:	4581      	cmp	r9, r0
 810ce66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ce6a:	f84c 3b04 	str.w	r3, [ip], #4
 810ce6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810ce72:	d2db      	bcs.n	810ce2c <quorem+0x44>
 810ce74:	f855 300b 	ldr.w	r3, [r5, fp]
 810ce78:	b92b      	cbnz	r3, 810ce86 <quorem+0x9e>
 810ce7a:	9b01      	ldr	r3, [sp, #4]
 810ce7c:	3b04      	subs	r3, #4
 810ce7e:	429d      	cmp	r5, r3
 810ce80:	461a      	mov	r2, r3
 810ce82:	d32e      	bcc.n	810cee2 <quorem+0xfa>
 810ce84:	613c      	str	r4, [r7, #16]
 810ce86:	4638      	mov	r0, r7
 810ce88:	f001 fea4 	bl	810ebd4 <__mcmp>
 810ce8c:	2800      	cmp	r0, #0
 810ce8e:	db24      	blt.n	810ceda <quorem+0xf2>
 810ce90:	3601      	adds	r6, #1
 810ce92:	4628      	mov	r0, r5
 810ce94:	f04f 0c00 	mov.w	ip, #0
 810ce98:	f858 2b04 	ldr.w	r2, [r8], #4
 810ce9c:	f8d0 e000 	ldr.w	lr, [r0]
 810cea0:	b293      	uxth	r3, r2
 810cea2:	ebac 0303 	sub.w	r3, ip, r3
 810cea6:	0c12      	lsrs	r2, r2, #16
 810cea8:	fa13 f38e 	uxtah	r3, r3, lr
 810ceac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810ceb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ceb4:	b29b      	uxth	r3, r3
 810ceb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ceba:	45c1      	cmp	r9, r8
 810cebc:	f840 3b04 	str.w	r3, [r0], #4
 810cec0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810cec4:	d2e8      	bcs.n	810ce98 <quorem+0xb0>
 810cec6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ceca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810cece:	b922      	cbnz	r2, 810ceda <quorem+0xf2>
 810ced0:	3b04      	subs	r3, #4
 810ced2:	429d      	cmp	r5, r3
 810ced4:	461a      	mov	r2, r3
 810ced6:	d30a      	bcc.n	810ceee <quorem+0x106>
 810ced8:	613c      	str	r4, [r7, #16]
 810ceda:	4630      	mov	r0, r6
 810cedc:	b003      	add	sp, #12
 810cede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cee2:	6812      	ldr	r2, [r2, #0]
 810cee4:	3b04      	subs	r3, #4
 810cee6:	2a00      	cmp	r2, #0
 810cee8:	d1cc      	bne.n	810ce84 <quorem+0x9c>
 810ceea:	3c01      	subs	r4, #1
 810ceec:	e7c7      	b.n	810ce7e <quorem+0x96>
 810ceee:	6812      	ldr	r2, [r2, #0]
 810cef0:	3b04      	subs	r3, #4
 810cef2:	2a00      	cmp	r2, #0
 810cef4:	d1f0      	bne.n	810ced8 <quorem+0xf0>
 810cef6:	3c01      	subs	r4, #1
 810cef8:	e7eb      	b.n	810ced2 <quorem+0xea>
 810cefa:	2000      	movs	r0, #0
 810cefc:	e7ee      	b.n	810cedc <quorem+0xf4>
	...

0810cf00 <_dtoa_r>:
 810cf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cf04:	ed2d 8b04 	vpush	{d8-d9}
 810cf08:	ec57 6b10 	vmov	r6, r7, d0
 810cf0c:	b093      	sub	sp, #76	; 0x4c
 810cf0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810cf10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810cf14:	9106      	str	r1, [sp, #24]
 810cf16:	ee10 aa10 	vmov	sl, s0
 810cf1a:	4604      	mov	r4, r0
 810cf1c:	9209      	str	r2, [sp, #36]	; 0x24
 810cf1e:	930c      	str	r3, [sp, #48]	; 0x30
 810cf20:	46bb      	mov	fp, r7
 810cf22:	b975      	cbnz	r5, 810cf42 <_dtoa_r+0x42>
 810cf24:	2010      	movs	r0, #16
 810cf26:	f7fd ffb7 	bl	810ae98 <malloc>
 810cf2a:	4602      	mov	r2, r0
 810cf2c:	6260      	str	r0, [r4, #36]	; 0x24
 810cf2e:	b920      	cbnz	r0, 810cf3a <_dtoa_r+0x3a>
 810cf30:	4ba7      	ldr	r3, [pc, #668]	; (810d1d0 <_dtoa_r+0x2d0>)
 810cf32:	21ea      	movs	r1, #234	; 0xea
 810cf34:	48a7      	ldr	r0, [pc, #668]	; (810d1d4 <_dtoa_r+0x2d4>)
 810cf36:	f002 fb8d 	bl	810f654 <__assert_func>
 810cf3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810cf3e:	6005      	str	r5, [r0, #0]
 810cf40:	60c5      	str	r5, [r0, #12]
 810cf42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810cf44:	6819      	ldr	r1, [r3, #0]
 810cf46:	b151      	cbz	r1, 810cf5e <_dtoa_r+0x5e>
 810cf48:	685a      	ldr	r2, [r3, #4]
 810cf4a:	604a      	str	r2, [r1, #4]
 810cf4c:	2301      	movs	r3, #1
 810cf4e:	4093      	lsls	r3, r2
 810cf50:	608b      	str	r3, [r1, #8]
 810cf52:	4620      	mov	r0, r4
 810cf54:	f001 fbb2 	bl	810e6bc <_Bfree>
 810cf58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810cf5a:	2200      	movs	r2, #0
 810cf5c:	601a      	str	r2, [r3, #0]
 810cf5e:	1e3b      	subs	r3, r7, #0
 810cf60:	bfaa      	itet	ge
 810cf62:	2300      	movge	r3, #0
 810cf64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 810cf68:	f8c8 3000 	strge.w	r3, [r8]
 810cf6c:	4b9a      	ldr	r3, [pc, #616]	; (810d1d8 <_dtoa_r+0x2d8>)
 810cf6e:	bfbc      	itt	lt
 810cf70:	2201      	movlt	r2, #1
 810cf72:	f8c8 2000 	strlt.w	r2, [r8]
 810cf76:	ea33 030b 	bics.w	r3, r3, fp
 810cf7a:	d11b      	bne.n	810cfb4 <_dtoa_r+0xb4>
 810cf7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810cf7e:	f242 730f 	movw	r3, #9999	; 0x270f
 810cf82:	6013      	str	r3, [r2, #0]
 810cf84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810cf88:	4333      	orrs	r3, r6
 810cf8a:	f000 8592 	beq.w	810dab2 <_dtoa_r+0xbb2>
 810cf8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810cf90:	b963      	cbnz	r3, 810cfac <_dtoa_r+0xac>
 810cf92:	4b92      	ldr	r3, [pc, #584]	; (810d1dc <_dtoa_r+0x2dc>)
 810cf94:	e022      	b.n	810cfdc <_dtoa_r+0xdc>
 810cf96:	4b92      	ldr	r3, [pc, #584]	; (810d1e0 <_dtoa_r+0x2e0>)
 810cf98:	9301      	str	r3, [sp, #4]
 810cf9a:	3308      	adds	r3, #8
 810cf9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810cf9e:	6013      	str	r3, [r2, #0]
 810cfa0:	9801      	ldr	r0, [sp, #4]
 810cfa2:	b013      	add	sp, #76	; 0x4c
 810cfa4:	ecbd 8b04 	vpop	{d8-d9}
 810cfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cfac:	4b8b      	ldr	r3, [pc, #556]	; (810d1dc <_dtoa_r+0x2dc>)
 810cfae:	9301      	str	r3, [sp, #4]
 810cfb0:	3303      	adds	r3, #3
 810cfb2:	e7f3      	b.n	810cf9c <_dtoa_r+0x9c>
 810cfb4:	2200      	movs	r2, #0
 810cfb6:	2300      	movs	r3, #0
 810cfb8:	4650      	mov	r0, sl
 810cfba:	4659      	mov	r1, fp
 810cfbc:	f7f3 fe0c 	bl	8100bd8 <__aeabi_dcmpeq>
 810cfc0:	ec4b ab19 	vmov	d9, sl, fp
 810cfc4:	4680      	mov	r8, r0
 810cfc6:	b158      	cbz	r0, 810cfe0 <_dtoa_r+0xe0>
 810cfc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810cfca:	2301      	movs	r3, #1
 810cfcc:	6013      	str	r3, [r2, #0]
 810cfce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810cfd0:	2b00      	cmp	r3, #0
 810cfd2:	f000 856b 	beq.w	810daac <_dtoa_r+0xbac>
 810cfd6:	4883      	ldr	r0, [pc, #524]	; (810d1e4 <_dtoa_r+0x2e4>)
 810cfd8:	6018      	str	r0, [r3, #0]
 810cfda:	1e43      	subs	r3, r0, #1
 810cfdc:	9301      	str	r3, [sp, #4]
 810cfde:	e7df      	b.n	810cfa0 <_dtoa_r+0xa0>
 810cfe0:	ec4b ab10 	vmov	d0, sl, fp
 810cfe4:	aa10      	add	r2, sp, #64	; 0x40
 810cfe6:	a911      	add	r1, sp, #68	; 0x44
 810cfe8:	4620      	mov	r0, r4
 810cfea:	f001 ff15 	bl	810ee18 <__d2b>
 810cfee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 810cff2:	ee08 0a10 	vmov	s16, r0
 810cff6:	2d00      	cmp	r5, #0
 810cff8:	f000 8084 	beq.w	810d104 <_dtoa_r+0x204>
 810cffc:	ee19 3a90 	vmov	r3, s19
 810d000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810d004:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 810d008:	4656      	mov	r6, sl
 810d00a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 810d00e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810d012:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 810d016:	4b74      	ldr	r3, [pc, #464]	; (810d1e8 <_dtoa_r+0x2e8>)
 810d018:	2200      	movs	r2, #0
 810d01a:	4630      	mov	r0, r6
 810d01c:	4639      	mov	r1, r7
 810d01e:	f7f3 f9bb 	bl	8100398 <__aeabi_dsub>
 810d022:	a365      	add	r3, pc, #404	; (adr r3, 810d1b8 <_dtoa_r+0x2b8>)
 810d024:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d028:	f7f3 fb6e 	bl	8100708 <__aeabi_dmul>
 810d02c:	a364      	add	r3, pc, #400	; (adr r3, 810d1c0 <_dtoa_r+0x2c0>)
 810d02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d032:	f7f3 f9b3 	bl	810039c <__adddf3>
 810d036:	4606      	mov	r6, r0
 810d038:	4628      	mov	r0, r5
 810d03a:	460f      	mov	r7, r1
 810d03c:	f7f3 fafa 	bl	8100634 <__aeabi_i2d>
 810d040:	a361      	add	r3, pc, #388	; (adr r3, 810d1c8 <_dtoa_r+0x2c8>)
 810d042:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d046:	f7f3 fb5f 	bl	8100708 <__aeabi_dmul>
 810d04a:	4602      	mov	r2, r0
 810d04c:	460b      	mov	r3, r1
 810d04e:	4630      	mov	r0, r6
 810d050:	4639      	mov	r1, r7
 810d052:	f7f3 f9a3 	bl	810039c <__adddf3>
 810d056:	4606      	mov	r6, r0
 810d058:	460f      	mov	r7, r1
 810d05a:	f7f3 fe05 	bl	8100c68 <__aeabi_d2iz>
 810d05e:	2200      	movs	r2, #0
 810d060:	9000      	str	r0, [sp, #0]
 810d062:	2300      	movs	r3, #0
 810d064:	4630      	mov	r0, r6
 810d066:	4639      	mov	r1, r7
 810d068:	f7f3 fdc0 	bl	8100bec <__aeabi_dcmplt>
 810d06c:	b150      	cbz	r0, 810d084 <_dtoa_r+0x184>
 810d06e:	9800      	ldr	r0, [sp, #0]
 810d070:	f7f3 fae0 	bl	8100634 <__aeabi_i2d>
 810d074:	4632      	mov	r2, r6
 810d076:	463b      	mov	r3, r7
 810d078:	f7f3 fdae 	bl	8100bd8 <__aeabi_dcmpeq>
 810d07c:	b910      	cbnz	r0, 810d084 <_dtoa_r+0x184>
 810d07e:	9b00      	ldr	r3, [sp, #0]
 810d080:	3b01      	subs	r3, #1
 810d082:	9300      	str	r3, [sp, #0]
 810d084:	9b00      	ldr	r3, [sp, #0]
 810d086:	2b16      	cmp	r3, #22
 810d088:	d85a      	bhi.n	810d140 <_dtoa_r+0x240>
 810d08a:	9a00      	ldr	r2, [sp, #0]
 810d08c:	4b57      	ldr	r3, [pc, #348]	; (810d1ec <_dtoa_r+0x2ec>)
 810d08e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d092:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d096:	ec51 0b19 	vmov	r0, r1, d9
 810d09a:	f7f3 fda7 	bl	8100bec <__aeabi_dcmplt>
 810d09e:	2800      	cmp	r0, #0
 810d0a0:	d050      	beq.n	810d144 <_dtoa_r+0x244>
 810d0a2:	9b00      	ldr	r3, [sp, #0]
 810d0a4:	3b01      	subs	r3, #1
 810d0a6:	9300      	str	r3, [sp, #0]
 810d0a8:	2300      	movs	r3, #0
 810d0aa:	930b      	str	r3, [sp, #44]	; 0x2c
 810d0ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810d0ae:	1b5d      	subs	r5, r3, r5
 810d0b0:	1e6b      	subs	r3, r5, #1
 810d0b2:	9305      	str	r3, [sp, #20]
 810d0b4:	bf45      	ittet	mi
 810d0b6:	f1c5 0301 	rsbmi	r3, r5, #1
 810d0ba:	9304      	strmi	r3, [sp, #16]
 810d0bc:	2300      	movpl	r3, #0
 810d0be:	2300      	movmi	r3, #0
 810d0c0:	bf4c      	ite	mi
 810d0c2:	9305      	strmi	r3, [sp, #20]
 810d0c4:	9304      	strpl	r3, [sp, #16]
 810d0c6:	9b00      	ldr	r3, [sp, #0]
 810d0c8:	2b00      	cmp	r3, #0
 810d0ca:	db3d      	blt.n	810d148 <_dtoa_r+0x248>
 810d0cc:	9b05      	ldr	r3, [sp, #20]
 810d0ce:	9a00      	ldr	r2, [sp, #0]
 810d0d0:	920a      	str	r2, [sp, #40]	; 0x28
 810d0d2:	4413      	add	r3, r2
 810d0d4:	9305      	str	r3, [sp, #20]
 810d0d6:	2300      	movs	r3, #0
 810d0d8:	9307      	str	r3, [sp, #28]
 810d0da:	9b06      	ldr	r3, [sp, #24]
 810d0dc:	2b09      	cmp	r3, #9
 810d0de:	f200 8089 	bhi.w	810d1f4 <_dtoa_r+0x2f4>
 810d0e2:	2b05      	cmp	r3, #5
 810d0e4:	bfc4      	itt	gt
 810d0e6:	3b04      	subgt	r3, #4
 810d0e8:	9306      	strgt	r3, [sp, #24]
 810d0ea:	9b06      	ldr	r3, [sp, #24]
 810d0ec:	f1a3 0302 	sub.w	r3, r3, #2
 810d0f0:	bfcc      	ite	gt
 810d0f2:	2500      	movgt	r5, #0
 810d0f4:	2501      	movle	r5, #1
 810d0f6:	2b03      	cmp	r3, #3
 810d0f8:	f200 8087 	bhi.w	810d20a <_dtoa_r+0x30a>
 810d0fc:	e8df f003 	tbb	[pc, r3]
 810d100:	59383a2d 	.word	0x59383a2d
 810d104:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810d108:	441d      	add	r5, r3
 810d10a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810d10e:	2b20      	cmp	r3, #32
 810d110:	bfc1      	itttt	gt
 810d112:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810d116:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 810d11a:	fa0b f303 	lslgt.w	r3, fp, r3
 810d11e:	fa26 f000 	lsrgt.w	r0, r6, r0
 810d122:	bfda      	itte	le
 810d124:	f1c3 0320 	rsble	r3, r3, #32
 810d128:	fa06 f003 	lslle.w	r0, r6, r3
 810d12c:	4318      	orrgt	r0, r3
 810d12e:	f7f3 fa71 	bl	8100614 <__aeabi_ui2d>
 810d132:	2301      	movs	r3, #1
 810d134:	4606      	mov	r6, r0
 810d136:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810d13a:	3d01      	subs	r5, #1
 810d13c:	930e      	str	r3, [sp, #56]	; 0x38
 810d13e:	e76a      	b.n	810d016 <_dtoa_r+0x116>
 810d140:	2301      	movs	r3, #1
 810d142:	e7b2      	b.n	810d0aa <_dtoa_r+0x1aa>
 810d144:	900b      	str	r0, [sp, #44]	; 0x2c
 810d146:	e7b1      	b.n	810d0ac <_dtoa_r+0x1ac>
 810d148:	9b04      	ldr	r3, [sp, #16]
 810d14a:	9a00      	ldr	r2, [sp, #0]
 810d14c:	1a9b      	subs	r3, r3, r2
 810d14e:	9304      	str	r3, [sp, #16]
 810d150:	4253      	negs	r3, r2
 810d152:	9307      	str	r3, [sp, #28]
 810d154:	2300      	movs	r3, #0
 810d156:	930a      	str	r3, [sp, #40]	; 0x28
 810d158:	e7bf      	b.n	810d0da <_dtoa_r+0x1da>
 810d15a:	2300      	movs	r3, #0
 810d15c:	9308      	str	r3, [sp, #32]
 810d15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d160:	2b00      	cmp	r3, #0
 810d162:	dc55      	bgt.n	810d210 <_dtoa_r+0x310>
 810d164:	2301      	movs	r3, #1
 810d166:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810d16a:	461a      	mov	r2, r3
 810d16c:	9209      	str	r2, [sp, #36]	; 0x24
 810d16e:	e00c      	b.n	810d18a <_dtoa_r+0x28a>
 810d170:	2301      	movs	r3, #1
 810d172:	e7f3      	b.n	810d15c <_dtoa_r+0x25c>
 810d174:	2300      	movs	r3, #0
 810d176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d178:	9308      	str	r3, [sp, #32]
 810d17a:	9b00      	ldr	r3, [sp, #0]
 810d17c:	4413      	add	r3, r2
 810d17e:	9302      	str	r3, [sp, #8]
 810d180:	3301      	adds	r3, #1
 810d182:	2b01      	cmp	r3, #1
 810d184:	9303      	str	r3, [sp, #12]
 810d186:	bfb8      	it	lt
 810d188:	2301      	movlt	r3, #1
 810d18a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810d18c:	2200      	movs	r2, #0
 810d18e:	6042      	str	r2, [r0, #4]
 810d190:	2204      	movs	r2, #4
 810d192:	f102 0614 	add.w	r6, r2, #20
 810d196:	429e      	cmp	r6, r3
 810d198:	6841      	ldr	r1, [r0, #4]
 810d19a:	d93d      	bls.n	810d218 <_dtoa_r+0x318>
 810d19c:	4620      	mov	r0, r4
 810d19e:	f001 fa4d 	bl	810e63c <_Balloc>
 810d1a2:	9001      	str	r0, [sp, #4]
 810d1a4:	2800      	cmp	r0, #0
 810d1a6:	d13b      	bne.n	810d220 <_dtoa_r+0x320>
 810d1a8:	4b11      	ldr	r3, [pc, #68]	; (810d1f0 <_dtoa_r+0x2f0>)
 810d1aa:	4602      	mov	r2, r0
 810d1ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810d1b0:	e6c0      	b.n	810cf34 <_dtoa_r+0x34>
 810d1b2:	2301      	movs	r3, #1
 810d1b4:	e7df      	b.n	810d176 <_dtoa_r+0x276>
 810d1b6:	bf00      	nop
 810d1b8:	636f4361 	.word	0x636f4361
 810d1bc:	3fd287a7 	.word	0x3fd287a7
 810d1c0:	8b60c8b3 	.word	0x8b60c8b3
 810d1c4:	3fc68a28 	.word	0x3fc68a28
 810d1c8:	509f79fb 	.word	0x509f79fb
 810d1cc:	3fd34413 	.word	0x3fd34413
 810d1d0:	0810fcd6 	.word	0x0810fcd6
 810d1d4:	0810fced 	.word	0x0810fced
 810d1d8:	7ff00000 	.word	0x7ff00000
 810d1dc:	0810fcd2 	.word	0x0810fcd2
 810d1e0:	0810fcc9 	.word	0x0810fcc9
 810d1e4:	0810fb4d 	.word	0x0810fb4d
 810d1e8:	3ff80000 	.word	0x3ff80000
 810d1ec:	0810fec0 	.word	0x0810fec0
 810d1f0:	0810fd48 	.word	0x0810fd48
 810d1f4:	2501      	movs	r5, #1
 810d1f6:	2300      	movs	r3, #0
 810d1f8:	9306      	str	r3, [sp, #24]
 810d1fa:	9508      	str	r5, [sp, #32]
 810d1fc:	f04f 33ff 	mov.w	r3, #4294967295
 810d200:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810d204:	2200      	movs	r2, #0
 810d206:	2312      	movs	r3, #18
 810d208:	e7b0      	b.n	810d16c <_dtoa_r+0x26c>
 810d20a:	2301      	movs	r3, #1
 810d20c:	9308      	str	r3, [sp, #32]
 810d20e:	e7f5      	b.n	810d1fc <_dtoa_r+0x2fc>
 810d210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d212:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810d216:	e7b8      	b.n	810d18a <_dtoa_r+0x28a>
 810d218:	3101      	adds	r1, #1
 810d21a:	6041      	str	r1, [r0, #4]
 810d21c:	0052      	lsls	r2, r2, #1
 810d21e:	e7b8      	b.n	810d192 <_dtoa_r+0x292>
 810d220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810d222:	9a01      	ldr	r2, [sp, #4]
 810d224:	601a      	str	r2, [r3, #0]
 810d226:	9b03      	ldr	r3, [sp, #12]
 810d228:	2b0e      	cmp	r3, #14
 810d22a:	f200 809d 	bhi.w	810d368 <_dtoa_r+0x468>
 810d22e:	2d00      	cmp	r5, #0
 810d230:	f000 809a 	beq.w	810d368 <_dtoa_r+0x468>
 810d234:	9b00      	ldr	r3, [sp, #0]
 810d236:	2b00      	cmp	r3, #0
 810d238:	dd32      	ble.n	810d2a0 <_dtoa_r+0x3a0>
 810d23a:	4ab7      	ldr	r2, [pc, #732]	; (810d518 <_dtoa_r+0x618>)
 810d23c:	f003 030f 	and.w	r3, r3, #15
 810d240:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810d244:	e9d3 8900 	ldrd	r8, r9, [r3]
 810d248:	9b00      	ldr	r3, [sp, #0]
 810d24a:	05d8      	lsls	r0, r3, #23
 810d24c:	ea4f 1723 	mov.w	r7, r3, asr #4
 810d250:	d516      	bpl.n	810d280 <_dtoa_r+0x380>
 810d252:	4bb2      	ldr	r3, [pc, #712]	; (810d51c <_dtoa_r+0x61c>)
 810d254:	ec51 0b19 	vmov	r0, r1, d9
 810d258:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810d25c:	f7f3 fb7e 	bl	810095c <__aeabi_ddiv>
 810d260:	f007 070f 	and.w	r7, r7, #15
 810d264:	4682      	mov	sl, r0
 810d266:	468b      	mov	fp, r1
 810d268:	2503      	movs	r5, #3
 810d26a:	4eac      	ldr	r6, [pc, #688]	; (810d51c <_dtoa_r+0x61c>)
 810d26c:	b957      	cbnz	r7, 810d284 <_dtoa_r+0x384>
 810d26e:	4642      	mov	r2, r8
 810d270:	464b      	mov	r3, r9
 810d272:	4650      	mov	r0, sl
 810d274:	4659      	mov	r1, fp
 810d276:	f7f3 fb71 	bl	810095c <__aeabi_ddiv>
 810d27a:	4682      	mov	sl, r0
 810d27c:	468b      	mov	fp, r1
 810d27e:	e028      	b.n	810d2d2 <_dtoa_r+0x3d2>
 810d280:	2502      	movs	r5, #2
 810d282:	e7f2      	b.n	810d26a <_dtoa_r+0x36a>
 810d284:	07f9      	lsls	r1, r7, #31
 810d286:	d508      	bpl.n	810d29a <_dtoa_r+0x39a>
 810d288:	4640      	mov	r0, r8
 810d28a:	4649      	mov	r1, r9
 810d28c:	e9d6 2300 	ldrd	r2, r3, [r6]
 810d290:	f7f3 fa3a 	bl	8100708 <__aeabi_dmul>
 810d294:	3501      	adds	r5, #1
 810d296:	4680      	mov	r8, r0
 810d298:	4689      	mov	r9, r1
 810d29a:	107f      	asrs	r7, r7, #1
 810d29c:	3608      	adds	r6, #8
 810d29e:	e7e5      	b.n	810d26c <_dtoa_r+0x36c>
 810d2a0:	f000 809b 	beq.w	810d3da <_dtoa_r+0x4da>
 810d2a4:	9b00      	ldr	r3, [sp, #0]
 810d2a6:	4f9d      	ldr	r7, [pc, #628]	; (810d51c <_dtoa_r+0x61c>)
 810d2a8:	425e      	negs	r6, r3
 810d2aa:	4b9b      	ldr	r3, [pc, #620]	; (810d518 <_dtoa_r+0x618>)
 810d2ac:	f006 020f 	and.w	r2, r6, #15
 810d2b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d2b8:	ec51 0b19 	vmov	r0, r1, d9
 810d2bc:	f7f3 fa24 	bl	8100708 <__aeabi_dmul>
 810d2c0:	1136      	asrs	r6, r6, #4
 810d2c2:	4682      	mov	sl, r0
 810d2c4:	468b      	mov	fp, r1
 810d2c6:	2300      	movs	r3, #0
 810d2c8:	2502      	movs	r5, #2
 810d2ca:	2e00      	cmp	r6, #0
 810d2cc:	d17a      	bne.n	810d3c4 <_dtoa_r+0x4c4>
 810d2ce:	2b00      	cmp	r3, #0
 810d2d0:	d1d3      	bne.n	810d27a <_dtoa_r+0x37a>
 810d2d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d2d4:	2b00      	cmp	r3, #0
 810d2d6:	f000 8082 	beq.w	810d3de <_dtoa_r+0x4de>
 810d2da:	4b91      	ldr	r3, [pc, #580]	; (810d520 <_dtoa_r+0x620>)
 810d2dc:	2200      	movs	r2, #0
 810d2de:	4650      	mov	r0, sl
 810d2e0:	4659      	mov	r1, fp
 810d2e2:	f7f3 fc83 	bl	8100bec <__aeabi_dcmplt>
 810d2e6:	2800      	cmp	r0, #0
 810d2e8:	d079      	beq.n	810d3de <_dtoa_r+0x4de>
 810d2ea:	9b03      	ldr	r3, [sp, #12]
 810d2ec:	2b00      	cmp	r3, #0
 810d2ee:	d076      	beq.n	810d3de <_dtoa_r+0x4de>
 810d2f0:	9b02      	ldr	r3, [sp, #8]
 810d2f2:	2b00      	cmp	r3, #0
 810d2f4:	dd36      	ble.n	810d364 <_dtoa_r+0x464>
 810d2f6:	9b00      	ldr	r3, [sp, #0]
 810d2f8:	4650      	mov	r0, sl
 810d2fa:	4659      	mov	r1, fp
 810d2fc:	1e5f      	subs	r7, r3, #1
 810d2fe:	2200      	movs	r2, #0
 810d300:	4b88      	ldr	r3, [pc, #544]	; (810d524 <_dtoa_r+0x624>)
 810d302:	f7f3 fa01 	bl	8100708 <__aeabi_dmul>
 810d306:	9e02      	ldr	r6, [sp, #8]
 810d308:	4682      	mov	sl, r0
 810d30a:	468b      	mov	fp, r1
 810d30c:	3501      	adds	r5, #1
 810d30e:	4628      	mov	r0, r5
 810d310:	f7f3 f990 	bl	8100634 <__aeabi_i2d>
 810d314:	4652      	mov	r2, sl
 810d316:	465b      	mov	r3, fp
 810d318:	f7f3 f9f6 	bl	8100708 <__aeabi_dmul>
 810d31c:	4b82      	ldr	r3, [pc, #520]	; (810d528 <_dtoa_r+0x628>)
 810d31e:	2200      	movs	r2, #0
 810d320:	f7f3 f83c 	bl	810039c <__adddf3>
 810d324:	46d0      	mov	r8, sl
 810d326:	46d9      	mov	r9, fp
 810d328:	4682      	mov	sl, r0
 810d32a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 810d32e:	2e00      	cmp	r6, #0
 810d330:	d158      	bne.n	810d3e4 <_dtoa_r+0x4e4>
 810d332:	4b7e      	ldr	r3, [pc, #504]	; (810d52c <_dtoa_r+0x62c>)
 810d334:	2200      	movs	r2, #0
 810d336:	4640      	mov	r0, r8
 810d338:	4649      	mov	r1, r9
 810d33a:	f7f3 f82d 	bl	8100398 <__aeabi_dsub>
 810d33e:	4652      	mov	r2, sl
 810d340:	465b      	mov	r3, fp
 810d342:	4680      	mov	r8, r0
 810d344:	4689      	mov	r9, r1
 810d346:	f7f3 fc6f 	bl	8100c28 <__aeabi_dcmpgt>
 810d34a:	2800      	cmp	r0, #0
 810d34c:	f040 8295 	bne.w	810d87a <_dtoa_r+0x97a>
 810d350:	4652      	mov	r2, sl
 810d352:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810d356:	4640      	mov	r0, r8
 810d358:	4649      	mov	r1, r9
 810d35a:	f7f3 fc47 	bl	8100bec <__aeabi_dcmplt>
 810d35e:	2800      	cmp	r0, #0
 810d360:	f040 8289 	bne.w	810d876 <_dtoa_r+0x976>
 810d364:	ec5b ab19 	vmov	sl, fp, d9
 810d368:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810d36a:	2b00      	cmp	r3, #0
 810d36c:	f2c0 8148 	blt.w	810d600 <_dtoa_r+0x700>
 810d370:	9a00      	ldr	r2, [sp, #0]
 810d372:	2a0e      	cmp	r2, #14
 810d374:	f300 8144 	bgt.w	810d600 <_dtoa_r+0x700>
 810d378:	4b67      	ldr	r3, [pc, #412]	; (810d518 <_dtoa_r+0x618>)
 810d37a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d37e:	e9d3 8900 	ldrd	r8, r9, [r3]
 810d382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d384:	2b00      	cmp	r3, #0
 810d386:	f280 80d5 	bge.w	810d534 <_dtoa_r+0x634>
 810d38a:	9b03      	ldr	r3, [sp, #12]
 810d38c:	2b00      	cmp	r3, #0
 810d38e:	f300 80d1 	bgt.w	810d534 <_dtoa_r+0x634>
 810d392:	f040 826f 	bne.w	810d874 <_dtoa_r+0x974>
 810d396:	4b65      	ldr	r3, [pc, #404]	; (810d52c <_dtoa_r+0x62c>)
 810d398:	2200      	movs	r2, #0
 810d39a:	4640      	mov	r0, r8
 810d39c:	4649      	mov	r1, r9
 810d39e:	f7f3 f9b3 	bl	8100708 <__aeabi_dmul>
 810d3a2:	4652      	mov	r2, sl
 810d3a4:	465b      	mov	r3, fp
 810d3a6:	f7f3 fc35 	bl	8100c14 <__aeabi_dcmpge>
 810d3aa:	9e03      	ldr	r6, [sp, #12]
 810d3ac:	4637      	mov	r7, r6
 810d3ae:	2800      	cmp	r0, #0
 810d3b0:	f040 8245 	bne.w	810d83e <_dtoa_r+0x93e>
 810d3b4:	9d01      	ldr	r5, [sp, #4]
 810d3b6:	2331      	movs	r3, #49	; 0x31
 810d3b8:	f805 3b01 	strb.w	r3, [r5], #1
 810d3bc:	9b00      	ldr	r3, [sp, #0]
 810d3be:	3301      	adds	r3, #1
 810d3c0:	9300      	str	r3, [sp, #0]
 810d3c2:	e240      	b.n	810d846 <_dtoa_r+0x946>
 810d3c4:	07f2      	lsls	r2, r6, #31
 810d3c6:	d505      	bpl.n	810d3d4 <_dtoa_r+0x4d4>
 810d3c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 810d3cc:	f7f3 f99c 	bl	8100708 <__aeabi_dmul>
 810d3d0:	3501      	adds	r5, #1
 810d3d2:	2301      	movs	r3, #1
 810d3d4:	1076      	asrs	r6, r6, #1
 810d3d6:	3708      	adds	r7, #8
 810d3d8:	e777      	b.n	810d2ca <_dtoa_r+0x3ca>
 810d3da:	2502      	movs	r5, #2
 810d3dc:	e779      	b.n	810d2d2 <_dtoa_r+0x3d2>
 810d3de:	9f00      	ldr	r7, [sp, #0]
 810d3e0:	9e03      	ldr	r6, [sp, #12]
 810d3e2:	e794      	b.n	810d30e <_dtoa_r+0x40e>
 810d3e4:	9901      	ldr	r1, [sp, #4]
 810d3e6:	4b4c      	ldr	r3, [pc, #304]	; (810d518 <_dtoa_r+0x618>)
 810d3e8:	4431      	add	r1, r6
 810d3ea:	910d      	str	r1, [sp, #52]	; 0x34
 810d3ec:	9908      	ldr	r1, [sp, #32]
 810d3ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810d3f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810d3f6:	2900      	cmp	r1, #0
 810d3f8:	d043      	beq.n	810d482 <_dtoa_r+0x582>
 810d3fa:	494d      	ldr	r1, [pc, #308]	; (810d530 <_dtoa_r+0x630>)
 810d3fc:	2000      	movs	r0, #0
 810d3fe:	f7f3 faad 	bl	810095c <__aeabi_ddiv>
 810d402:	4652      	mov	r2, sl
 810d404:	465b      	mov	r3, fp
 810d406:	f7f2 ffc7 	bl	8100398 <__aeabi_dsub>
 810d40a:	9d01      	ldr	r5, [sp, #4]
 810d40c:	4682      	mov	sl, r0
 810d40e:	468b      	mov	fp, r1
 810d410:	4649      	mov	r1, r9
 810d412:	4640      	mov	r0, r8
 810d414:	f7f3 fc28 	bl	8100c68 <__aeabi_d2iz>
 810d418:	4606      	mov	r6, r0
 810d41a:	f7f3 f90b 	bl	8100634 <__aeabi_i2d>
 810d41e:	4602      	mov	r2, r0
 810d420:	460b      	mov	r3, r1
 810d422:	4640      	mov	r0, r8
 810d424:	4649      	mov	r1, r9
 810d426:	f7f2 ffb7 	bl	8100398 <__aeabi_dsub>
 810d42a:	3630      	adds	r6, #48	; 0x30
 810d42c:	f805 6b01 	strb.w	r6, [r5], #1
 810d430:	4652      	mov	r2, sl
 810d432:	465b      	mov	r3, fp
 810d434:	4680      	mov	r8, r0
 810d436:	4689      	mov	r9, r1
 810d438:	f7f3 fbd8 	bl	8100bec <__aeabi_dcmplt>
 810d43c:	2800      	cmp	r0, #0
 810d43e:	d163      	bne.n	810d508 <_dtoa_r+0x608>
 810d440:	4642      	mov	r2, r8
 810d442:	464b      	mov	r3, r9
 810d444:	4936      	ldr	r1, [pc, #216]	; (810d520 <_dtoa_r+0x620>)
 810d446:	2000      	movs	r0, #0
 810d448:	f7f2 ffa6 	bl	8100398 <__aeabi_dsub>
 810d44c:	4652      	mov	r2, sl
 810d44e:	465b      	mov	r3, fp
 810d450:	f7f3 fbcc 	bl	8100bec <__aeabi_dcmplt>
 810d454:	2800      	cmp	r0, #0
 810d456:	f040 80b5 	bne.w	810d5c4 <_dtoa_r+0x6c4>
 810d45a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d45c:	429d      	cmp	r5, r3
 810d45e:	d081      	beq.n	810d364 <_dtoa_r+0x464>
 810d460:	4b30      	ldr	r3, [pc, #192]	; (810d524 <_dtoa_r+0x624>)
 810d462:	2200      	movs	r2, #0
 810d464:	4650      	mov	r0, sl
 810d466:	4659      	mov	r1, fp
 810d468:	f7f3 f94e 	bl	8100708 <__aeabi_dmul>
 810d46c:	4b2d      	ldr	r3, [pc, #180]	; (810d524 <_dtoa_r+0x624>)
 810d46e:	4682      	mov	sl, r0
 810d470:	468b      	mov	fp, r1
 810d472:	4640      	mov	r0, r8
 810d474:	4649      	mov	r1, r9
 810d476:	2200      	movs	r2, #0
 810d478:	f7f3 f946 	bl	8100708 <__aeabi_dmul>
 810d47c:	4680      	mov	r8, r0
 810d47e:	4689      	mov	r9, r1
 810d480:	e7c6      	b.n	810d410 <_dtoa_r+0x510>
 810d482:	4650      	mov	r0, sl
 810d484:	4659      	mov	r1, fp
 810d486:	f7f3 f93f 	bl	8100708 <__aeabi_dmul>
 810d48a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d48c:	9d01      	ldr	r5, [sp, #4]
 810d48e:	930f      	str	r3, [sp, #60]	; 0x3c
 810d490:	4682      	mov	sl, r0
 810d492:	468b      	mov	fp, r1
 810d494:	4649      	mov	r1, r9
 810d496:	4640      	mov	r0, r8
 810d498:	f7f3 fbe6 	bl	8100c68 <__aeabi_d2iz>
 810d49c:	4606      	mov	r6, r0
 810d49e:	f7f3 f8c9 	bl	8100634 <__aeabi_i2d>
 810d4a2:	3630      	adds	r6, #48	; 0x30
 810d4a4:	4602      	mov	r2, r0
 810d4a6:	460b      	mov	r3, r1
 810d4a8:	4640      	mov	r0, r8
 810d4aa:	4649      	mov	r1, r9
 810d4ac:	f7f2 ff74 	bl	8100398 <__aeabi_dsub>
 810d4b0:	f805 6b01 	strb.w	r6, [r5], #1
 810d4b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d4b6:	429d      	cmp	r5, r3
 810d4b8:	4680      	mov	r8, r0
 810d4ba:	4689      	mov	r9, r1
 810d4bc:	f04f 0200 	mov.w	r2, #0
 810d4c0:	d124      	bne.n	810d50c <_dtoa_r+0x60c>
 810d4c2:	4b1b      	ldr	r3, [pc, #108]	; (810d530 <_dtoa_r+0x630>)
 810d4c4:	4650      	mov	r0, sl
 810d4c6:	4659      	mov	r1, fp
 810d4c8:	f7f2 ff68 	bl	810039c <__adddf3>
 810d4cc:	4602      	mov	r2, r0
 810d4ce:	460b      	mov	r3, r1
 810d4d0:	4640      	mov	r0, r8
 810d4d2:	4649      	mov	r1, r9
 810d4d4:	f7f3 fba8 	bl	8100c28 <__aeabi_dcmpgt>
 810d4d8:	2800      	cmp	r0, #0
 810d4da:	d173      	bne.n	810d5c4 <_dtoa_r+0x6c4>
 810d4dc:	4652      	mov	r2, sl
 810d4de:	465b      	mov	r3, fp
 810d4e0:	4913      	ldr	r1, [pc, #76]	; (810d530 <_dtoa_r+0x630>)
 810d4e2:	2000      	movs	r0, #0
 810d4e4:	f7f2 ff58 	bl	8100398 <__aeabi_dsub>
 810d4e8:	4602      	mov	r2, r0
 810d4ea:	460b      	mov	r3, r1
 810d4ec:	4640      	mov	r0, r8
 810d4ee:	4649      	mov	r1, r9
 810d4f0:	f7f3 fb7c 	bl	8100bec <__aeabi_dcmplt>
 810d4f4:	2800      	cmp	r0, #0
 810d4f6:	f43f af35 	beq.w	810d364 <_dtoa_r+0x464>
 810d4fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810d4fc:	1e6b      	subs	r3, r5, #1
 810d4fe:	930f      	str	r3, [sp, #60]	; 0x3c
 810d500:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810d504:	2b30      	cmp	r3, #48	; 0x30
 810d506:	d0f8      	beq.n	810d4fa <_dtoa_r+0x5fa>
 810d508:	9700      	str	r7, [sp, #0]
 810d50a:	e049      	b.n	810d5a0 <_dtoa_r+0x6a0>
 810d50c:	4b05      	ldr	r3, [pc, #20]	; (810d524 <_dtoa_r+0x624>)
 810d50e:	f7f3 f8fb 	bl	8100708 <__aeabi_dmul>
 810d512:	4680      	mov	r8, r0
 810d514:	4689      	mov	r9, r1
 810d516:	e7bd      	b.n	810d494 <_dtoa_r+0x594>
 810d518:	0810fec0 	.word	0x0810fec0
 810d51c:	0810fe98 	.word	0x0810fe98
 810d520:	3ff00000 	.word	0x3ff00000
 810d524:	40240000 	.word	0x40240000
 810d528:	401c0000 	.word	0x401c0000
 810d52c:	40140000 	.word	0x40140000
 810d530:	3fe00000 	.word	0x3fe00000
 810d534:	9d01      	ldr	r5, [sp, #4]
 810d536:	4656      	mov	r6, sl
 810d538:	465f      	mov	r7, fp
 810d53a:	4642      	mov	r2, r8
 810d53c:	464b      	mov	r3, r9
 810d53e:	4630      	mov	r0, r6
 810d540:	4639      	mov	r1, r7
 810d542:	f7f3 fa0b 	bl	810095c <__aeabi_ddiv>
 810d546:	f7f3 fb8f 	bl	8100c68 <__aeabi_d2iz>
 810d54a:	4682      	mov	sl, r0
 810d54c:	f7f3 f872 	bl	8100634 <__aeabi_i2d>
 810d550:	4642      	mov	r2, r8
 810d552:	464b      	mov	r3, r9
 810d554:	f7f3 f8d8 	bl	8100708 <__aeabi_dmul>
 810d558:	4602      	mov	r2, r0
 810d55a:	460b      	mov	r3, r1
 810d55c:	4630      	mov	r0, r6
 810d55e:	4639      	mov	r1, r7
 810d560:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 810d564:	f7f2 ff18 	bl	8100398 <__aeabi_dsub>
 810d568:	f805 6b01 	strb.w	r6, [r5], #1
 810d56c:	9e01      	ldr	r6, [sp, #4]
 810d56e:	9f03      	ldr	r7, [sp, #12]
 810d570:	1bae      	subs	r6, r5, r6
 810d572:	42b7      	cmp	r7, r6
 810d574:	4602      	mov	r2, r0
 810d576:	460b      	mov	r3, r1
 810d578:	d135      	bne.n	810d5e6 <_dtoa_r+0x6e6>
 810d57a:	f7f2 ff0f 	bl	810039c <__adddf3>
 810d57e:	4642      	mov	r2, r8
 810d580:	464b      	mov	r3, r9
 810d582:	4606      	mov	r6, r0
 810d584:	460f      	mov	r7, r1
 810d586:	f7f3 fb4f 	bl	8100c28 <__aeabi_dcmpgt>
 810d58a:	b9d0      	cbnz	r0, 810d5c2 <_dtoa_r+0x6c2>
 810d58c:	4642      	mov	r2, r8
 810d58e:	464b      	mov	r3, r9
 810d590:	4630      	mov	r0, r6
 810d592:	4639      	mov	r1, r7
 810d594:	f7f3 fb20 	bl	8100bd8 <__aeabi_dcmpeq>
 810d598:	b110      	cbz	r0, 810d5a0 <_dtoa_r+0x6a0>
 810d59a:	f01a 0f01 	tst.w	sl, #1
 810d59e:	d110      	bne.n	810d5c2 <_dtoa_r+0x6c2>
 810d5a0:	4620      	mov	r0, r4
 810d5a2:	ee18 1a10 	vmov	r1, s16
 810d5a6:	f001 f889 	bl	810e6bc <_Bfree>
 810d5aa:	2300      	movs	r3, #0
 810d5ac:	9800      	ldr	r0, [sp, #0]
 810d5ae:	702b      	strb	r3, [r5, #0]
 810d5b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810d5b2:	3001      	adds	r0, #1
 810d5b4:	6018      	str	r0, [r3, #0]
 810d5b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810d5b8:	2b00      	cmp	r3, #0
 810d5ba:	f43f acf1 	beq.w	810cfa0 <_dtoa_r+0xa0>
 810d5be:	601d      	str	r5, [r3, #0]
 810d5c0:	e4ee      	b.n	810cfa0 <_dtoa_r+0xa0>
 810d5c2:	9f00      	ldr	r7, [sp, #0]
 810d5c4:	462b      	mov	r3, r5
 810d5c6:	461d      	mov	r5, r3
 810d5c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810d5cc:	2a39      	cmp	r2, #57	; 0x39
 810d5ce:	d106      	bne.n	810d5de <_dtoa_r+0x6de>
 810d5d0:	9a01      	ldr	r2, [sp, #4]
 810d5d2:	429a      	cmp	r2, r3
 810d5d4:	d1f7      	bne.n	810d5c6 <_dtoa_r+0x6c6>
 810d5d6:	9901      	ldr	r1, [sp, #4]
 810d5d8:	2230      	movs	r2, #48	; 0x30
 810d5da:	3701      	adds	r7, #1
 810d5dc:	700a      	strb	r2, [r1, #0]
 810d5de:	781a      	ldrb	r2, [r3, #0]
 810d5e0:	3201      	adds	r2, #1
 810d5e2:	701a      	strb	r2, [r3, #0]
 810d5e4:	e790      	b.n	810d508 <_dtoa_r+0x608>
 810d5e6:	4ba6      	ldr	r3, [pc, #664]	; (810d880 <_dtoa_r+0x980>)
 810d5e8:	2200      	movs	r2, #0
 810d5ea:	f7f3 f88d 	bl	8100708 <__aeabi_dmul>
 810d5ee:	2200      	movs	r2, #0
 810d5f0:	2300      	movs	r3, #0
 810d5f2:	4606      	mov	r6, r0
 810d5f4:	460f      	mov	r7, r1
 810d5f6:	f7f3 faef 	bl	8100bd8 <__aeabi_dcmpeq>
 810d5fa:	2800      	cmp	r0, #0
 810d5fc:	d09d      	beq.n	810d53a <_dtoa_r+0x63a>
 810d5fe:	e7cf      	b.n	810d5a0 <_dtoa_r+0x6a0>
 810d600:	9a08      	ldr	r2, [sp, #32]
 810d602:	2a00      	cmp	r2, #0
 810d604:	f000 80d7 	beq.w	810d7b6 <_dtoa_r+0x8b6>
 810d608:	9a06      	ldr	r2, [sp, #24]
 810d60a:	2a01      	cmp	r2, #1
 810d60c:	f300 80ba 	bgt.w	810d784 <_dtoa_r+0x884>
 810d610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810d612:	2a00      	cmp	r2, #0
 810d614:	f000 80b2 	beq.w	810d77c <_dtoa_r+0x87c>
 810d618:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810d61c:	9e07      	ldr	r6, [sp, #28]
 810d61e:	9d04      	ldr	r5, [sp, #16]
 810d620:	9a04      	ldr	r2, [sp, #16]
 810d622:	441a      	add	r2, r3
 810d624:	9204      	str	r2, [sp, #16]
 810d626:	9a05      	ldr	r2, [sp, #20]
 810d628:	2101      	movs	r1, #1
 810d62a:	441a      	add	r2, r3
 810d62c:	4620      	mov	r0, r4
 810d62e:	9205      	str	r2, [sp, #20]
 810d630:	f001 f946 	bl	810e8c0 <__i2b>
 810d634:	4607      	mov	r7, r0
 810d636:	2d00      	cmp	r5, #0
 810d638:	dd0c      	ble.n	810d654 <_dtoa_r+0x754>
 810d63a:	9b05      	ldr	r3, [sp, #20]
 810d63c:	2b00      	cmp	r3, #0
 810d63e:	dd09      	ble.n	810d654 <_dtoa_r+0x754>
 810d640:	42ab      	cmp	r3, r5
 810d642:	9a04      	ldr	r2, [sp, #16]
 810d644:	bfa8      	it	ge
 810d646:	462b      	movge	r3, r5
 810d648:	1ad2      	subs	r2, r2, r3
 810d64a:	9204      	str	r2, [sp, #16]
 810d64c:	9a05      	ldr	r2, [sp, #20]
 810d64e:	1aed      	subs	r5, r5, r3
 810d650:	1ad3      	subs	r3, r2, r3
 810d652:	9305      	str	r3, [sp, #20]
 810d654:	9b07      	ldr	r3, [sp, #28]
 810d656:	b31b      	cbz	r3, 810d6a0 <_dtoa_r+0x7a0>
 810d658:	9b08      	ldr	r3, [sp, #32]
 810d65a:	2b00      	cmp	r3, #0
 810d65c:	f000 80af 	beq.w	810d7be <_dtoa_r+0x8be>
 810d660:	2e00      	cmp	r6, #0
 810d662:	dd13      	ble.n	810d68c <_dtoa_r+0x78c>
 810d664:	4639      	mov	r1, r7
 810d666:	4632      	mov	r2, r6
 810d668:	4620      	mov	r0, r4
 810d66a:	f001 f9e9 	bl	810ea40 <__pow5mult>
 810d66e:	ee18 2a10 	vmov	r2, s16
 810d672:	4601      	mov	r1, r0
 810d674:	4607      	mov	r7, r0
 810d676:	4620      	mov	r0, r4
 810d678:	f001 f938 	bl	810e8ec <__multiply>
 810d67c:	ee18 1a10 	vmov	r1, s16
 810d680:	4680      	mov	r8, r0
 810d682:	4620      	mov	r0, r4
 810d684:	f001 f81a 	bl	810e6bc <_Bfree>
 810d688:	ee08 8a10 	vmov	s16, r8
 810d68c:	9b07      	ldr	r3, [sp, #28]
 810d68e:	1b9a      	subs	r2, r3, r6
 810d690:	d006      	beq.n	810d6a0 <_dtoa_r+0x7a0>
 810d692:	ee18 1a10 	vmov	r1, s16
 810d696:	4620      	mov	r0, r4
 810d698:	f001 f9d2 	bl	810ea40 <__pow5mult>
 810d69c:	ee08 0a10 	vmov	s16, r0
 810d6a0:	2101      	movs	r1, #1
 810d6a2:	4620      	mov	r0, r4
 810d6a4:	f001 f90c 	bl	810e8c0 <__i2b>
 810d6a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d6aa:	2b00      	cmp	r3, #0
 810d6ac:	4606      	mov	r6, r0
 810d6ae:	f340 8088 	ble.w	810d7c2 <_dtoa_r+0x8c2>
 810d6b2:	461a      	mov	r2, r3
 810d6b4:	4601      	mov	r1, r0
 810d6b6:	4620      	mov	r0, r4
 810d6b8:	f001 f9c2 	bl	810ea40 <__pow5mult>
 810d6bc:	9b06      	ldr	r3, [sp, #24]
 810d6be:	2b01      	cmp	r3, #1
 810d6c0:	4606      	mov	r6, r0
 810d6c2:	f340 8081 	ble.w	810d7c8 <_dtoa_r+0x8c8>
 810d6c6:	f04f 0800 	mov.w	r8, #0
 810d6ca:	6933      	ldr	r3, [r6, #16]
 810d6cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810d6d0:	6918      	ldr	r0, [r3, #16]
 810d6d2:	f001 f8a5 	bl	810e820 <__hi0bits>
 810d6d6:	f1c0 0020 	rsb	r0, r0, #32
 810d6da:	9b05      	ldr	r3, [sp, #20]
 810d6dc:	4418      	add	r0, r3
 810d6de:	f010 001f 	ands.w	r0, r0, #31
 810d6e2:	f000 8092 	beq.w	810d80a <_dtoa_r+0x90a>
 810d6e6:	f1c0 0320 	rsb	r3, r0, #32
 810d6ea:	2b04      	cmp	r3, #4
 810d6ec:	f340 808a 	ble.w	810d804 <_dtoa_r+0x904>
 810d6f0:	f1c0 001c 	rsb	r0, r0, #28
 810d6f4:	9b04      	ldr	r3, [sp, #16]
 810d6f6:	4403      	add	r3, r0
 810d6f8:	9304      	str	r3, [sp, #16]
 810d6fa:	9b05      	ldr	r3, [sp, #20]
 810d6fc:	4403      	add	r3, r0
 810d6fe:	4405      	add	r5, r0
 810d700:	9305      	str	r3, [sp, #20]
 810d702:	9b04      	ldr	r3, [sp, #16]
 810d704:	2b00      	cmp	r3, #0
 810d706:	dd07      	ble.n	810d718 <_dtoa_r+0x818>
 810d708:	ee18 1a10 	vmov	r1, s16
 810d70c:	461a      	mov	r2, r3
 810d70e:	4620      	mov	r0, r4
 810d710:	f001 f9f0 	bl	810eaf4 <__lshift>
 810d714:	ee08 0a10 	vmov	s16, r0
 810d718:	9b05      	ldr	r3, [sp, #20]
 810d71a:	2b00      	cmp	r3, #0
 810d71c:	dd05      	ble.n	810d72a <_dtoa_r+0x82a>
 810d71e:	4631      	mov	r1, r6
 810d720:	461a      	mov	r2, r3
 810d722:	4620      	mov	r0, r4
 810d724:	f001 f9e6 	bl	810eaf4 <__lshift>
 810d728:	4606      	mov	r6, r0
 810d72a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d72c:	2b00      	cmp	r3, #0
 810d72e:	d06e      	beq.n	810d80e <_dtoa_r+0x90e>
 810d730:	ee18 0a10 	vmov	r0, s16
 810d734:	4631      	mov	r1, r6
 810d736:	f001 fa4d 	bl	810ebd4 <__mcmp>
 810d73a:	2800      	cmp	r0, #0
 810d73c:	da67      	bge.n	810d80e <_dtoa_r+0x90e>
 810d73e:	9b00      	ldr	r3, [sp, #0]
 810d740:	3b01      	subs	r3, #1
 810d742:	ee18 1a10 	vmov	r1, s16
 810d746:	9300      	str	r3, [sp, #0]
 810d748:	220a      	movs	r2, #10
 810d74a:	2300      	movs	r3, #0
 810d74c:	4620      	mov	r0, r4
 810d74e:	f000 ffd7 	bl	810e700 <__multadd>
 810d752:	9b08      	ldr	r3, [sp, #32]
 810d754:	ee08 0a10 	vmov	s16, r0
 810d758:	2b00      	cmp	r3, #0
 810d75a:	f000 81b1 	beq.w	810dac0 <_dtoa_r+0xbc0>
 810d75e:	2300      	movs	r3, #0
 810d760:	4639      	mov	r1, r7
 810d762:	220a      	movs	r2, #10
 810d764:	4620      	mov	r0, r4
 810d766:	f000 ffcb 	bl	810e700 <__multadd>
 810d76a:	9b02      	ldr	r3, [sp, #8]
 810d76c:	2b00      	cmp	r3, #0
 810d76e:	4607      	mov	r7, r0
 810d770:	f300 808e 	bgt.w	810d890 <_dtoa_r+0x990>
 810d774:	9b06      	ldr	r3, [sp, #24]
 810d776:	2b02      	cmp	r3, #2
 810d778:	dc51      	bgt.n	810d81e <_dtoa_r+0x91e>
 810d77a:	e089      	b.n	810d890 <_dtoa_r+0x990>
 810d77c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810d77e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810d782:	e74b      	b.n	810d61c <_dtoa_r+0x71c>
 810d784:	9b03      	ldr	r3, [sp, #12]
 810d786:	1e5e      	subs	r6, r3, #1
 810d788:	9b07      	ldr	r3, [sp, #28]
 810d78a:	42b3      	cmp	r3, r6
 810d78c:	bfbf      	itttt	lt
 810d78e:	9b07      	ldrlt	r3, [sp, #28]
 810d790:	9607      	strlt	r6, [sp, #28]
 810d792:	1af2      	sublt	r2, r6, r3
 810d794:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 810d796:	bfb6      	itet	lt
 810d798:	189b      	addlt	r3, r3, r2
 810d79a:	1b9e      	subge	r6, r3, r6
 810d79c:	930a      	strlt	r3, [sp, #40]	; 0x28
 810d79e:	9b03      	ldr	r3, [sp, #12]
 810d7a0:	bfb8      	it	lt
 810d7a2:	2600      	movlt	r6, #0
 810d7a4:	2b00      	cmp	r3, #0
 810d7a6:	bfb7      	itett	lt
 810d7a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 810d7ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 810d7b0:	1a9d      	sublt	r5, r3, r2
 810d7b2:	2300      	movlt	r3, #0
 810d7b4:	e734      	b.n	810d620 <_dtoa_r+0x720>
 810d7b6:	9e07      	ldr	r6, [sp, #28]
 810d7b8:	9d04      	ldr	r5, [sp, #16]
 810d7ba:	9f08      	ldr	r7, [sp, #32]
 810d7bc:	e73b      	b.n	810d636 <_dtoa_r+0x736>
 810d7be:	9a07      	ldr	r2, [sp, #28]
 810d7c0:	e767      	b.n	810d692 <_dtoa_r+0x792>
 810d7c2:	9b06      	ldr	r3, [sp, #24]
 810d7c4:	2b01      	cmp	r3, #1
 810d7c6:	dc18      	bgt.n	810d7fa <_dtoa_r+0x8fa>
 810d7c8:	f1ba 0f00 	cmp.w	sl, #0
 810d7cc:	d115      	bne.n	810d7fa <_dtoa_r+0x8fa>
 810d7ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810d7d2:	b993      	cbnz	r3, 810d7fa <_dtoa_r+0x8fa>
 810d7d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810d7d8:	0d1b      	lsrs	r3, r3, #20
 810d7da:	051b      	lsls	r3, r3, #20
 810d7dc:	b183      	cbz	r3, 810d800 <_dtoa_r+0x900>
 810d7de:	9b04      	ldr	r3, [sp, #16]
 810d7e0:	3301      	adds	r3, #1
 810d7e2:	9304      	str	r3, [sp, #16]
 810d7e4:	9b05      	ldr	r3, [sp, #20]
 810d7e6:	3301      	adds	r3, #1
 810d7e8:	9305      	str	r3, [sp, #20]
 810d7ea:	f04f 0801 	mov.w	r8, #1
 810d7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d7f0:	2b00      	cmp	r3, #0
 810d7f2:	f47f af6a 	bne.w	810d6ca <_dtoa_r+0x7ca>
 810d7f6:	2001      	movs	r0, #1
 810d7f8:	e76f      	b.n	810d6da <_dtoa_r+0x7da>
 810d7fa:	f04f 0800 	mov.w	r8, #0
 810d7fe:	e7f6      	b.n	810d7ee <_dtoa_r+0x8ee>
 810d800:	4698      	mov	r8, r3
 810d802:	e7f4      	b.n	810d7ee <_dtoa_r+0x8ee>
 810d804:	f43f af7d 	beq.w	810d702 <_dtoa_r+0x802>
 810d808:	4618      	mov	r0, r3
 810d80a:	301c      	adds	r0, #28
 810d80c:	e772      	b.n	810d6f4 <_dtoa_r+0x7f4>
 810d80e:	9b03      	ldr	r3, [sp, #12]
 810d810:	2b00      	cmp	r3, #0
 810d812:	dc37      	bgt.n	810d884 <_dtoa_r+0x984>
 810d814:	9b06      	ldr	r3, [sp, #24]
 810d816:	2b02      	cmp	r3, #2
 810d818:	dd34      	ble.n	810d884 <_dtoa_r+0x984>
 810d81a:	9b03      	ldr	r3, [sp, #12]
 810d81c:	9302      	str	r3, [sp, #8]
 810d81e:	9b02      	ldr	r3, [sp, #8]
 810d820:	b96b      	cbnz	r3, 810d83e <_dtoa_r+0x93e>
 810d822:	4631      	mov	r1, r6
 810d824:	2205      	movs	r2, #5
 810d826:	4620      	mov	r0, r4
 810d828:	f000 ff6a 	bl	810e700 <__multadd>
 810d82c:	4601      	mov	r1, r0
 810d82e:	4606      	mov	r6, r0
 810d830:	ee18 0a10 	vmov	r0, s16
 810d834:	f001 f9ce 	bl	810ebd4 <__mcmp>
 810d838:	2800      	cmp	r0, #0
 810d83a:	f73f adbb 	bgt.w	810d3b4 <_dtoa_r+0x4b4>
 810d83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d840:	9d01      	ldr	r5, [sp, #4]
 810d842:	43db      	mvns	r3, r3
 810d844:	9300      	str	r3, [sp, #0]
 810d846:	f04f 0800 	mov.w	r8, #0
 810d84a:	4631      	mov	r1, r6
 810d84c:	4620      	mov	r0, r4
 810d84e:	f000 ff35 	bl	810e6bc <_Bfree>
 810d852:	2f00      	cmp	r7, #0
 810d854:	f43f aea4 	beq.w	810d5a0 <_dtoa_r+0x6a0>
 810d858:	f1b8 0f00 	cmp.w	r8, #0
 810d85c:	d005      	beq.n	810d86a <_dtoa_r+0x96a>
 810d85e:	45b8      	cmp	r8, r7
 810d860:	d003      	beq.n	810d86a <_dtoa_r+0x96a>
 810d862:	4641      	mov	r1, r8
 810d864:	4620      	mov	r0, r4
 810d866:	f000 ff29 	bl	810e6bc <_Bfree>
 810d86a:	4639      	mov	r1, r7
 810d86c:	4620      	mov	r0, r4
 810d86e:	f000 ff25 	bl	810e6bc <_Bfree>
 810d872:	e695      	b.n	810d5a0 <_dtoa_r+0x6a0>
 810d874:	2600      	movs	r6, #0
 810d876:	4637      	mov	r7, r6
 810d878:	e7e1      	b.n	810d83e <_dtoa_r+0x93e>
 810d87a:	9700      	str	r7, [sp, #0]
 810d87c:	4637      	mov	r7, r6
 810d87e:	e599      	b.n	810d3b4 <_dtoa_r+0x4b4>
 810d880:	40240000 	.word	0x40240000
 810d884:	9b08      	ldr	r3, [sp, #32]
 810d886:	2b00      	cmp	r3, #0
 810d888:	f000 80ca 	beq.w	810da20 <_dtoa_r+0xb20>
 810d88c:	9b03      	ldr	r3, [sp, #12]
 810d88e:	9302      	str	r3, [sp, #8]
 810d890:	2d00      	cmp	r5, #0
 810d892:	dd05      	ble.n	810d8a0 <_dtoa_r+0x9a0>
 810d894:	4639      	mov	r1, r7
 810d896:	462a      	mov	r2, r5
 810d898:	4620      	mov	r0, r4
 810d89a:	f001 f92b 	bl	810eaf4 <__lshift>
 810d89e:	4607      	mov	r7, r0
 810d8a0:	f1b8 0f00 	cmp.w	r8, #0
 810d8a4:	d05b      	beq.n	810d95e <_dtoa_r+0xa5e>
 810d8a6:	6879      	ldr	r1, [r7, #4]
 810d8a8:	4620      	mov	r0, r4
 810d8aa:	f000 fec7 	bl	810e63c <_Balloc>
 810d8ae:	4605      	mov	r5, r0
 810d8b0:	b928      	cbnz	r0, 810d8be <_dtoa_r+0x9be>
 810d8b2:	4b87      	ldr	r3, [pc, #540]	; (810dad0 <_dtoa_r+0xbd0>)
 810d8b4:	4602      	mov	r2, r0
 810d8b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 810d8ba:	f7ff bb3b 	b.w	810cf34 <_dtoa_r+0x34>
 810d8be:	693a      	ldr	r2, [r7, #16]
 810d8c0:	3202      	adds	r2, #2
 810d8c2:	0092      	lsls	r2, r2, #2
 810d8c4:	f107 010c 	add.w	r1, r7, #12
 810d8c8:	300c      	adds	r0, #12
 810d8ca:	f7fd faed 	bl	810aea8 <memcpy>
 810d8ce:	2201      	movs	r2, #1
 810d8d0:	4629      	mov	r1, r5
 810d8d2:	4620      	mov	r0, r4
 810d8d4:	f001 f90e 	bl	810eaf4 <__lshift>
 810d8d8:	9b01      	ldr	r3, [sp, #4]
 810d8da:	f103 0901 	add.w	r9, r3, #1
 810d8de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 810d8e2:	4413      	add	r3, r2
 810d8e4:	9305      	str	r3, [sp, #20]
 810d8e6:	f00a 0301 	and.w	r3, sl, #1
 810d8ea:	46b8      	mov	r8, r7
 810d8ec:	9304      	str	r3, [sp, #16]
 810d8ee:	4607      	mov	r7, r0
 810d8f0:	4631      	mov	r1, r6
 810d8f2:	ee18 0a10 	vmov	r0, s16
 810d8f6:	f7ff fa77 	bl	810cde8 <quorem>
 810d8fa:	4641      	mov	r1, r8
 810d8fc:	9002      	str	r0, [sp, #8]
 810d8fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810d902:	ee18 0a10 	vmov	r0, s16
 810d906:	f001 f965 	bl	810ebd4 <__mcmp>
 810d90a:	463a      	mov	r2, r7
 810d90c:	9003      	str	r0, [sp, #12]
 810d90e:	4631      	mov	r1, r6
 810d910:	4620      	mov	r0, r4
 810d912:	f001 f97b 	bl	810ec0c <__mdiff>
 810d916:	68c2      	ldr	r2, [r0, #12]
 810d918:	f109 3bff 	add.w	fp, r9, #4294967295
 810d91c:	4605      	mov	r5, r0
 810d91e:	bb02      	cbnz	r2, 810d962 <_dtoa_r+0xa62>
 810d920:	4601      	mov	r1, r0
 810d922:	ee18 0a10 	vmov	r0, s16
 810d926:	f001 f955 	bl	810ebd4 <__mcmp>
 810d92a:	4602      	mov	r2, r0
 810d92c:	4629      	mov	r1, r5
 810d92e:	4620      	mov	r0, r4
 810d930:	9207      	str	r2, [sp, #28]
 810d932:	f000 fec3 	bl	810e6bc <_Bfree>
 810d936:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810d93a:	ea43 0102 	orr.w	r1, r3, r2
 810d93e:	9b04      	ldr	r3, [sp, #16]
 810d940:	430b      	orrs	r3, r1
 810d942:	464d      	mov	r5, r9
 810d944:	d10f      	bne.n	810d966 <_dtoa_r+0xa66>
 810d946:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810d94a:	d02a      	beq.n	810d9a2 <_dtoa_r+0xaa2>
 810d94c:	9b03      	ldr	r3, [sp, #12]
 810d94e:	2b00      	cmp	r3, #0
 810d950:	dd02      	ble.n	810d958 <_dtoa_r+0xa58>
 810d952:	9b02      	ldr	r3, [sp, #8]
 810d954:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 810d958:	f88b a000 	strb.w	sl, [fp]
 810d95c:	e775      	b.n	810d84a <_dtoa_r+0x94a>
 810d95e:	4638      	mov	r0, r7
 810d960:	e7ba      	b.n	810d8d8 <_dtoa_r+0x9d8>
 810d962:	2201      	movs	r2, #1
 810d964:	e7e2      	b.n	810d92c <_dtoa_r+0xa2c>
 810d966:	9b03      	ldr	r3, [sp, #12]
 810d968:	2b00      	cmp	r3, #0
 810d96a:	db04      	blt.n	810d976 <_dtoa_r+0xa76>
 810d96c:	9906      	ldr	r1, [sp, #24]
 810d96e:	430b      	orrs	r3, r1
 810d970:	9904      	ldr	r1, [sp, #16]
 810d972:	430b      	orrs	r3, r1
 810d974:	d122      	bne.n	810d9bc <_dtoa_r+0xabc>
 810d976:	2a00      	cmp	r2, #0
 810d978:	ddee      	ble.n	810d958 <_dtoa_r+0xa58>
 810d97a:	ee18 1a10 	vmov	r1, s16
 810d97e:	2201      	movs	r2, #1
 810d980:	4620      	mov	r0, r4
 810d982:	f001 f8b7 	bl	810eaf4 <__lshift>
 810d986:	4631      	mov	r1, r6
 810d988:	ee08 0a10 	vmov	s16, r0
 810d98c:	f001 f922 	bl	810ebd4 <__mcmp>
 810d990:	2800      	cmp	r0, #0
 810d992:	dc03      	bgt.n	810d99c <_dtoa_r+0xa9c>
 810d994:	d1e0      	bne.n	810d958 <_dtoa_r+0xa58>
 810d996:	f01a 0f01 	tst.w	sl, #1
 810d99a:	d0dd      	beq.n	810d958 <_dtoa_r+0xa58>
 810d99c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810d9a0:	d1d7      	bne.n	810d952 <_dtoa_r+0xa52>
 810d9a2:	2339      	movs	r3, #57	; 0x39
 810d9a4:	f88b 3000 	strb.w	r3, [fp]
 810d9a8:	462b      	mov	r3, r5
 810d9aa:	461d      	mov	r5, r3
 810d9ac:	3b01      	subs	r3, #1
 810d9ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810d9b2:	2a39      	cmp	r2, #57	; 0x39
 810d9b4:	d071      	beq.n	810da9a <_dtoa_r+0xb9a>
 810d9b6:	3201      	adds	r2, #1
 810d9b8:	701a      	strb	r2, [r3, #0]
 810d9ba:	e746      	b.n	810d84a <_dtoa_r+0x94a>
 810d9bc:	2a00      	cmp	r2, #0
 810d9be:	dd07      	ble.n	810d9d0 <_dtoa_r+0xad0>
 810d9c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810d9c4:	d0ed      	beq.n	810d9a2 <_dtoa_r+0xaa2>
 810d9c6:	f10a 0301 	add.w	r3, sl, #1
 810d9ca:	f88b 3000 	strb.w	r3, [fp]
 810d9ce:	e73c      	b.n	810d84a <_dtoa_r+0x94a>
 810d9d0:	9b05      	ldr	r3, [sp, #20]
 810d9d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 810d9d6:	4599      	cmp	r9, r3
 810d9d8:	d047      	beq.n	810da6a <_dtoa_r+0xb6a>
 810d9da:	ee18 1a10 	vmov	r1, s16
 810d9de:	2300      	movs	r3, #0
 810d9e0:	220a      	movs	r2, #10
 810d9e2:	4620      	mov	r0, r4
 810d9e4:	f000 fe8c 	bl	810e700 <__multadd>
 810d9e8:	45b8      	cmp	r8, r7
 810d9ea:	ee08 0a10 	vmov	s16, r0
 810d9ee:	f04f 0300 	mov.w	r3, #0
 810d9f2:	f04f 020a 	mov.w	r2, #10
 810d9f6:	4641      	mov	r1, r8
 810d9f8:	4620      	mov	r0, r4
 810d9fa:	d106      	bne.n	810da0a <_dtoa_r+0xb0a>
 810d9fc:	f000 fe80 	bl	810e700 <__multadd>
 810da00:	4680      	mov	r8, r0
 810da02:	4607      	mov	r7, r0
 810da04:	f109 0901 	add.w	r9, r9, #1
 810da08:	e772      	b.n	810d8f0 <_dtoa_r+0x9f0>
 810da0a:	f000 fe79 	bl	810e700 <__multadd>
 810da0e:	4639      	mov	r1, r7
 810da10:	4680      	mov	r8, r0
 810da12:	2300      	movs	r3, #0
 810da14:	220a      	movs	r2, #10
 810da16:	4620      	mov	r0, r4
 810da18:	f000 fe72 	bl	810e700 <__multadd>
 810da1c:	4607      	mov	r7, r0
 810da1e:	e7f1      	b.n	810da04 <_dtoa_r+0xb04>
 810da20:	9b03      	ldr	r3, [sp, #12]
 810da22:	9302      	str	r3, [sp, #8]
 810da24:	9d01      	ldr	r5, [sp, #4]
 810da26:	ee18 0a10 	vmov	r0, s16
 810da2a:	4631      	mov	r1, r6
 810da2c:	f7ff f9dc 	bl	810cde8 <quorem>
 810da30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 810da34:	9b01      	ldr	r3, [sp, #4]
 810da36:	f805 ab01 	strb.w	sl, [r5], #1
 810da3a:	1aea      	subs	r2, r5, r3
 810da3c:	9b02      	ldr	r3, [sp, #8]
 810da3e:	4293      	cmp	r3, r2
 810da40:	dd09      	ble.n	810da56 <_dtoa_r+0xb56>
 810da42:	ee18 1a10 	vmov	r1, s16
 810da46:	2300      	movs	r3, #0
 810da48:	220a      	movs	r2, #10
 810da4a:	4620      	mov	r0, r4
 810da4c:	f000 fe58 	bl	810e700 <__multadd>
 810da50:	ee08 0a10 	vmov	s16, r0
 810da54:	e7e7      	b.n	810da26 <_dtoa_r+0xb26>
 810da56:	9b02      	ldr	r3, [sp, #8]
 810da58:	2b00      	cmp	r3, #0
 810da5a:	bfc8      	it	gt
 810da5c:	461d      	movgt	r5, r3
 810da5e:	9b01      	ldr	r3, [sp, #4]
 810da60:	bfd8      	it	le
 810da62:	2501      	movle	r5, #1
 810da64:	441d      	add	r5, r3
 810da66:	f04f 0800 	mov.w	r8, #0
 810da6a:	ee18 1a10 	vmov	r1, s16
 810da6e:	2201      	movs	r2, #1
 810da70:	4620      	mov	r0, r4
 810da72:	f001 f83f 	bl	810eaf4 <__lshift>
 810da76:	4631      	mov	r1, r6
 810da78:	ee08 0a10 	vmov	s16, r0
 810da7c:	f001 f8aa 	bl	810ebd4 <__mcmp>
 810da80:	2800      	cmp	r0, #0
 810da82:	dc91      	bgt.n	810d9a8 <_dtoa_r+0xaa8>
 810da84:	d102      	bne.n	810da8c <_dtoa_r+0xb8c>
 810da86:	f01a 0f01 	tst.w	sl, #1
 810da8a:	d18d      	bne.n	810d9a8 <_dtoa_r+0xaa8>
 810da8c:	462b      	mov	r3, r5
 810da8e:	461d      	mov	r5, r3
 810da90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810da94:	2a30      	cmp	r2, #48	; 0x30
 810da96:	d0fa      	beq.n	810da8e <_dtoa_r+0xb8e>
 810da98:	e6d7      	b.n	810d84a <_dtoa_r+0x94a>
 810da9a:	9a01      	ldr	r2, [sp, #4]
 810da9c:	429a      	cmp	r2, r3
 810da9e:	d184      	bne.n	810d9aa <_dtoa_r+0xaaa>
 810daa0:	9b00      	ldr	r3, [sp, #0]
 810daa2:	3301      	adds	r3, #1
 810daa4:	9300      	str	r3, [sp, #0]
 810daa6:	2331      	movs	r3, #49	; 0x31
 810daa8:	7013      	strb	r3, [r2, #0]
 810daaa:	e6ce      	b.n	810d84a <_dtoa_r+0x94a>
 810daac:	4b09      	ldr	r3, [pc, #36]	; (810dad4 <_dtoa_r+0xbd4>)
 810daae:	f7ff ba95 	b.w	810cfdc <_dtoa_r+0xdc>
 810dab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810dab4:	2b00      	cmp	r3, #0
 810dab6:	f47f aa6e 	bne.w	810cf96 <_dtoa_r+0x96>
 810daba:	4b07      	ldr	r3, [pc, #28]	; (810dad8 <_dtoa_r+0xbd8>)
 810dabc:	f7ff ba8e 	b.w	810cfdc <_dtoa_r+0xdc>
 810dac0:	9b02      	ldr	r3, [sp, #8]
 810dac2:	2b00      	cmp	r3, #0
 810dac4:	dcae      	bgt.n	810da24 <_dtoa_r+0xb24>
 810dac6:	9b06      	ldr	r3, [sp, #24]
 810dac8:	2b02      	cmp	r3, #2
 810daca:	f73f aea8 	bgt.w	810d81e <_dtoa_r+0x91e>
 810dace:	e7a9      	b.n	810da24 <_dtoa_r+0xb24>
 810dad0:	0810fd48 	.word	0x0810fd48
 810dad4:	0810fb4c 	.word	0x0810fb4c
 810dad8:	0810fcc9 	.word	0x0810fcc9

0810dadc <__sflush_r>:
 810dadc:	898a      	ldrh	r2, [r1, #12]
 810dade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810dae2:	4605      	mov	r5, r0
 810dae4:	0710      	lsls	r0, r2, #28
 810dae6:	460c      	mov	r4, r1
 810dae8:	d458      	bmi.n	810db9c <__sflush_r+0xc0>
 810daea:	684b      	ldr	r3, [r1, #4]
 810daec:	2b00      	cmp	r3, #0
 810daee:	dc05      	bgt.n	810dafc <__sflush_r+0x20>
 810daf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810daf2:	2b00      	cmp	r3, #0
 810daf4:	dc02      	bgt.n	810dafc <__sflush_r+0x20>
 810daf6:	2000      	movs	r0, #0
 810daf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810dafc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810dafe:	2e00      	cmp	r6, #0
 810db00:	d0f9      	beq.n	810daf6 <__sflush_r+0x1a>
 810db02:	2300      	movs	r3, #0
 810db04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810db08:	682f      	ldr	r7, [r5, #0]
 810db0a:	602b      	str	r3, [r5, #0]
 810db0c:	d032      	beq.n	810db74 <__sflush_r+0x98>
 810db0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810db10:	89a3      	ldrh	r3, [r4, #12]
 810db12:	075a      	lsls	r2, r3, #29
 810db14:	d505      	bpl.n	810db22 <__sflush_r+0x46>
 810db16:	6863      	ldr	r3, [r4, #4]
 810db18:	1ac0      	subs	r0, r0, r3
 810db1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810db1c:	b10b      	cbz	r3, 810db22 <__sflush_r+0x46>
 810db1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810db20:	1ac0      	subs	r0, r0, r3
 810db22:	2300      	movs	r3, #0
 810db24:	4602      	mov	r2, r0
 810db26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810db28:	6a21      	ldr	r1, [r4, #32]
 810db2a:	4628      	mov	r0, r5
 810db2c:	47b0      	blx	r6
 810db2e:	1c43      	adds	r3, r0, #1
 810db30:	89a3      	ldrh	r3, [r4, #12]
 810db32:	d106      	bne.n	810db42 <__sflush_r+0x66>
 810db34:	6829      	ldr	r1, [r5, #0]
 810db36:	291d      	cmp	r1, #29
 810db38:	d82c      	bhi.n	810db94 <__sflush_r+0xb8>
 810db3a:	4a2a      	ldr	r2, [pc, #168]	; (810dbe4 <__sflush_r+0x108>)
 810db3c:	40ca      	lsrs	r2, r1
 810db3e:	07d6      	lsls	r6, r2, #31
 810db40:	d528      	bpl.n	810db94 <__sflush_r+0xb8>
 810db42:	2200      	movs	r2, #0
 810db44:	6062      	str	r2, [r4, #4]
 810db46:	04d9      	lsls	r1, r3, #19
 810db48:	6922      	ldr	r2, [r4, #16]
 810db4a:	6022      	str	r2, [r4, #0]
 810db4c:	d504      	bpl.n	810db58 <__sflush_r+0x7c>
 810db4e:	1c42      	adds	r2, r0, #1
 810db50:	d101      	bne.n	810db56 <__sflush_r+0x7a>
 810db52:	682b      	ldr	r3, [r5, #0]
 810db54:	b903      	cbnz	r3, 810db58 <__sflush_r+0x7c>
 810db56:	6560      	str	r0, [r4, #84]	; 0x54
 810db58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810db5a:	602f      	str	r7, [r5, #0]
 810db5c:	2900      	cmp	r1, #0
 810db5e:	d0ca      	beq.n	810daf6 <__sflush_r+0x1a>
 810db60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810db64:	4299      	cmp	r1, r3
 810db66:	d002      	beq.n	810db6e <__sflush_r+0x92>
 810db68:	4628      	mov	r0, r5
 810db6a:	f7fd f9b3 	bl	810aed4 <_free_r>
 810db6e:	2000      	movs	r0, #0
 810db70:	6360      	str	r0, [r4, #52]	; 0x34
 810db72:	e7c1      	b.n	810daf8 <__sflush_r+0x1c>
 810db74:	6a21      	ldr	r1, [r4, #32]
 810db76:	2301      	movs	r3, #1
 810db78:	4628      	mov	r0, r5
 810db7a:	47b0      	blx	r6
 810db7c:	1c41      	adds	r1, r0, #1
 810db7e:	d1c7      	bne.n	810db10 <__sflush_r+0x34>
 810db80:	682b      	ldr	r3, [r5, #0]
 810db82:	2b00      	cmp	r3, #0
 810db84:	d0c4      	beq.n	810db10 <__sflush_r+0x34>
 810db86:	2b1d      	cmp	r3, #29
 810db88:	d001      	beq.n	810db8e <__sflush_r+0xb2>
 810db8a:	2b16      	cmp	r3, #22
 810db8c:	d101      	bne.n	810db92 <__sflush_r+0xb6>
 810db8e:	602f      	str	r7, [r5, #0]
 810db90:	e7b1      	b.n	810daf6 <__sflush_r+0x1a>
 810db92:	89a3      	ldrh	r3, [r4, #12]
 810db94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810db98:	81a3      	strh	r3, [r4, #12]
 810db9a:	e7ad      	b.n	810daf8 <__sflush_r+0x1c>
 810db9c:	690f      	ldr	r7, [r1, #16]
 810db9e:	2f00      	cmp	r7, #0
 810dba0:	d0a9      	beq.n	810daf6 <__sflush_r+0x1a>
 810dba2:	0793      	lsls	r3, r2, #30
 810dba4:	680e      	ldr	r6, [r1, #0]
 810dba6:	bf08      	it	eq
 810dba8:	694b      	ldreq	r3, [r1, #20]
 810dbaa:	600f      	str	r7, [r1, #0]
 810dbac:	bf18      	it	ne
 810dbae:	2300      	movne	r3, #0
 810dbb0:	eba6 0807 	sub.w	r8, r6, r7
 810dbb4:	608b      	str	r3, [r1, #8]
 810dbb6:	f1b8 0f00 	cmp.w	r8, #0
 810dbba:	dd9c      	ble.n	810daf6 <__sflush_r+0x1a>
 810dbbc:	6a21      	ldr	r1, [r4, #32]
 810dbbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810dbc0:	4643      	mov	r3, r8
 810dbc2:	463a      	mov	r2, r7
 810dbc4:	4628      	mov	r0, r5
 810dbc6:	47b0      	blx	r6
 810dbc8:	2800      	cmp	r0, #0
 810dbca:	dc06      	bgt.n	810dbda <__sflush_r+0xfe>
 810dbcc:	89a3      	ldrh	r3, [r4, #12]
 810dbce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810dbd2:	81a3      	strh	r3, [r4, #12]
 810dbd4:	f04f 30ff 	mov.w	r0, #4294967295
 810dbd8:	e78e      	b.n	810daf8 <__sflush_r+0x1c>
 810dbda:	4407      	add	r7, r0
 810dbdc:	eba8 0800 	sub.w	r8, r8, r0
 810dbe0:	e7e9      	b.n	810dbb6 <__sflush_r+0xda>
 810dbe2:	bf00      	nop
 810dbe4:	20400001 	.word	0x20400001

0810dbe8 <_fflush_r>:
 810dbe8:	b538      	push	{r3, r4, r5, lr}
 810dbea:	690b      	ldr	r3, [r1, #16]
 810dbec:	4605      	mov	r5, r0
 810dbee:	460c      	mov	r4, r1
 810dbf0:	b913      	cbnz	r3, 810dbf8 <_fflush_r+0x10>
 810dbf2:	2500      	movs	r5, #0
 810dbf4:	4628      	mov	r0, r5
 810dbf6:	bd38      	pop	{r3, r4, r5, pc}
 810dbf8:	b118      	cbz	r0, 810dc02 <_fflush_r+0x1a>
 810dbfa:	6983      	ldr	r3, [r0, #24]
 810dbfc:	b90b      	cbnz	r3, 810dc02 <_fflush_r+0x1a>
 810dbfe:	f000 f887 	bl	810dd10 <__sinit>
 810dc02:	4b14      	ldr	r3, [pc, #80]	; (810dc54 <_fflush_r+0x6c>)
 810dc04:	429c      	cmp	r4, r3
 810dc06:	d11b      	bne.n	810dc40 <_fflush_r+0x58>
 810dc08:	686c      	ldr	r4, [r5, #4]
 810dc0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810dc0e:	2b00      	cmp	r3, #0
 810dc10:	d0ef      	beq.n	810dbf2 <_fflush_r+0xa>
 810dc12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810dc14:	07d0      	lsls	r0, r2, #31
 810dc16:	d404      	bmi.n	810dc22 <_fflush_r+0x3a>
 810dc18:	0599      	lsls	r1, r3, #22
 810dc1a:	d402      	bmi.n	810dc22 <_fflush_r+0x3a>
 810dc1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810dc1e:	f000 fc88 	bl	810e532 <__retarget_lock_acquire_recursive>
 810dc22:	4628      	mov	r0, r5
 810dc24:	4621      	mov	r1, r4
 810dc26:	f7ff ff59 	bl	810dadc <__sflush_r>
 810dc2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810dc2c:	07da      	lsls	r2, r3, #31
 810dc2e:	4605      	mov	r5, r0
 810dc30:	d4e0      	bmi.n	810dbf4 <_fflush_r+0xc>
 810dc32:	89a3      	ldrh	r3, [r4, #12]
 810dc34:	059b      	lsls	r3, r3, #22
 810dc36:	d4dd      	bmi.n	810dbf4 <_fflush_r+0xc>
 810dc38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810dc3a:	f000 fc7b 	bl	810e534 <__retarget_lock_release_recursive>
 810dc3e:	e7d9      	b.n	810dbf4 <_fflush_r+0xc>
 810dc40:	4b05      	ldr	r3, [pc, #20]	; (810dc58 <_fflush_r+0x70>)
 810dc42:	429c      	cmp	r4, r3
 810dc44:	d101      	bne.n	810dc4a <_fflush_r+0x62>
 810dc46:	68ac      	ldr	r4, [r5, #8]
 810dc48:	e7df      	b.n	810dc0a <_fflush_r+0x22>
 810dc4a:	4b04      	ldr	r3, [pc, #16]	; (810dc5c <_fflush_r+0x74>)
 810dc4c:	429c      	cmp	r4, r3
 810dc4e:	bf08      	it	eq
 810dc50:	68ec      	ldreq	r4, [r5, #12]
 810dc52:	e7da      	b.n	810dc0a <_fflush_r+0x22>
 810dc54:	0810fd7c 	.word	0x0810fd7c
 810dc58:	0810fd9c 	.word	0x0810fd9c
 810dc5c:	0810fd5c 	.word	0x0810fd5c

0810dc60 <std>:
 810dc60:	2300      	movs	r3, #0
 810dc62:	b510      	push	{r4, lr}
 810dc64:	4604      	mov	r4, r0
 810dc66:	e9c0 3300 	strd	r3, r3, [r0]
 810dc6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810dc6e:	6083      	str	r3, [r0, #8]
 810dc70:	8181      	strh	r1, [r0, #12]
 810dc72:	6643      	str	r3, [r0, #100]	; 0x64
 810dc74:	81c2      	strh	r2, [r0, #14]
 810dc76:	6183      	str	r3, [r0, #24]
 810dc78:	4619      	mov	r1, r3
 810dc7a:	2208      	movs	r2, #8
 810dc7c:	305c      	adds	r0, #92	; 0x5c
 810dc7e:	f7fd f921 	bl	810aec4 <memset>
 810dc82:	4b05      	ldr	r3, [pc, #20]	; (810dc98 <std+0x38>)
 810dc84:	6263      	str	r3, [r4, #36]	; 0x24
 810dc86:	4b05      	ldr	r3, [pc, #20]	; (810dc9c <std+0x3c>)
 810dc88:	62a3      	str	r3, [r4, #40]	; 0x28
 810dc8a:	4b05      	ldr	r3, [pc, #20]	; (810dca0 <std+0x40>)
 810dc8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 810dc8e:	4b05      	ldr	r3, [pc, #20]	; (810dca4 <std+0x44>)
 810dc90:	6224      	str	r4, [r4, #32]
 810dc92:	6323      	str	r3, [r4, #48]	; 0x30
 810dc94:	bd10      	pop	{r4, pc}
 810dc96:	bf00      	nop
 810dc98:	0810f569 	.word	0x0810f569
 810dc9c:	0810f58b 	.word	0x0810f58b
 810dca0:	0810f5c3 	.word	0x0810f5c3
 810dca4:	0810f5e7 	.word	0x0810f5e7

0810dca8 <_cleanup_r>:
 810dca8:	4901      	ldr	r1, [pc, #4]	; (810dcb0 <_cleanup_r+0x8>)
 810dcaa:	f000 b8af 	b.w	810de0c <_fwalk_reent>
 810dcae:	bf00      	nop
 810dcb0:	0810dbe9 	.word	0x0810dbe9

0810dcb4 <__sfmoreglue>:
 810dcb4:	b570      	push	{r4, r5, r6, lr}
 810dcb6:	2268      	movs	r2, #104	; 0x68
 810dcb8:	1e4d      	subs	r5, r1, #1
 810dcba:	4355      	muls	r5, r2
 810dcbc:	460e      	mov	r6, r1
 810dcbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810dcc2:	f7fd f973 	bl	810afac <_malloc_r>
 810dcc6:	4604      	mov	r4, r0
 810dcc8:	b140      	cbz	r0, 810dcdc <__sfmoreglue+0x28>
 810dcca:	2100      	movs	r1, #0
 810dccc:	e9c0 1600 	strd	r1, r6, [r0]
 810dcd0:	300c      	adds	r0, #12
 810dcd2:	60a0      	str	r0, [r4, #8]
 810dcd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810dcd8:	f7fd f8f4 	bl	810aec4 <memset>
 810dcdc:	4620      	mov	r0, r4
 810dcde:	bd70      	pop	{r4, r5, r6, pc}

0810dce0 <__sfp_lock_acquire>:
 810dce0:	4801      	ldr	r0, [pc, #4]	; (810dce8 <__sfp_lock_acquire+0x8>)
 810dce2:	f000 bc26 	b.w	810e532 <__retarget_lock_acquire_recursive>
 810dce6:	bf00      	nop
 810dce8:	100004b1 	.word	0x100004b1

0810dcec <__sfp_lock_release>:
 810dcec:	4801      	ldr	r0, [pc, #4]	; (810dcf4 <__sfp_lock_release+0x8>)
 810dcee:	f000 bc21 	b.w	810e534 <__retarget_lock_release_recursive>
 810dcf2:	bf00      	nop
 810dcf4:	100004b1 	.word	0x100004b1

0810dcf8 <__sinit_lock_acquire>:
 810dcf8:	4801      	ldr	r0, [pc, #4]	; (810dd00 <__sinit_lock_acquire+0x8>)
 810dcfa:	f000 bc1a 	b.w	810e532 <__retarget_lock_acquire_recursive>
 810dcfe:	bf00      	nop
 810dd00:	100004b2 	.word	0x100004b2

0810dd04 <__sinit_lock_release>:
 810dd04:	4801      	ldr	r0, [pc, #4]	; (810dd0c <__sinit_lock_release+0x8>)
 810dd06:	f000 bc15 	b.w	810e534 <__retarget_lock_release_recursive>
 810dd0a:	bf00      	nop
 810dd0c:	100004b2 	.word	0x100004b2

0810dd10 <__sinit>:
 810dd10:	b510      	push	{r4, lr}
 810dd12:	4604      	mov	r4, r0
 810dd14:	f7ff fff0 	bl	810dcf8 <__sinit_lock_acquire>
 810dd18:	69a3      	ldr	r3, [r4, #24]
 810dd1a:	b11b      	cbz	r3, 810dd24 <__sinit+0x14>
 810dd1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810dd20:	f7ff bff0 	b.w	810dd04 <__sinit_lock_release>
 810dd24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810dd28:	6523      	str	r3, [r4, #80]	; 0x50
 810dd2a:	4b13      	ldr	r3, [pc, #76]	; (810dd78 <__sinit+0x68>)
 810dd2c:	4a13      	ldr	r2, [pc, #76]	; (810dd7c <__sinit+0x6c>)
 810dd2e:	681b      	ldr	r3, [r3, #0]
 810dd30:	62a2      	str	r2, [r4, #40]	; 0x28
 810dd32:	42a3      	cmp	r3, r4
 810dd34:	bf04      	itt	eq
 810dd36:	2301      	moveq	r3, #1
 810dd38:	61a3      	streq	r3, [r4, #24]
 810dd3a:	4620      	mov	r0, r4
 810dd3c:	f000 f820 	bl	810dd80 <__sfp>
 810dd40:	6060      	str	r0, [r4, #4]
 810dd42:	4620      	mov	r0, r4
 810dd44:	f000 f81c 	bl	810dd80 <__sfp>
 810dd48:	60a0      	str	r0, [r4, #8]
 810dd4a:	4620      	mov	r0, r4
 810dd4c:	f000 f818 	bl	810dd80 <__sfp>
 810dd50:	2200      	movs	r2, #0
 810dd52:	60e0      	str	r0, [r4, #12]
 810dd54:	2104      	movs	r1, #4
 810dd56:	6860      	ldr	r0, [r4, #4]
 810dd58:	f7ff ff82 	bl	810dc60 <std>
 810dd5c:	68a0      	ldr	r0, [r4, #8]
 810dd5e:	2201      	movs	r2, #1
 810dd60:	2109      	movs	r1, #9
 810dd62:	f7ff ff7d 	bl	810dc60 <std>
 810dd66:	68e0      	ldr	r0, [r4, #12]
 810dd68:	2202      	movs	r2, #2
 810dd6a:	2112      	movs	r1, #18
 810dd6c:	f7ff ff78 	bl	810dc60 <std>
 810dd70:	2301      	movs	r3, #1
 810dd72:	61a3      	str	r3, [r4, #24]
 810dd74:	e7d2      	b.n	810dd1c <__sinit+0xc>
 810dd76:	bf00      	nop
 810dd78:	0810fb38 	.word	0x0810fb38
 810dd7c:	0810dca9 	.word	0x0810dca9

0810dd80 <__sfp>:
 810dd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810dd82:	4607      	mov	r7, r0
 810dd84:	f7ff ffac 	bl	810dce0 <__sfp_lock_acquire>
 810dd88:	4b1e      	ldr	r3, [pc, #120]	; (810de04 <__sfp+0x84>)
 810dd8a:	681e      	ldr	r6, [r3, #0]
 810dd8c:	69b3      	ldr	r3, [r6, #24]
 810dd8e:	b913      	cbnz	r3, 810dd96 <__sfp+0x16>
 810dd90:	4630      	mov	r0, r6
 810dd92:	f7ff ffbd 	bl	810dd10 <__sinit>
 810dd96:	3648      	adds	r6, #72	; 0x48
 810dd98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810dd9c:	3b01      	subs	r3, #1
 810dd9e:	d503      	bpl.n	810dda8 <__sfp+0x28>
 810dda0:	6833      	ldr	r3, [r6, #0]
 810dda2:	b30b      	cbz	r3, 810dde8 <__sfp+0x68>
 810dda4:	6836      	ldr	r6, [r6, #0]
 810dda6:	e7f7      	b.n	810dd98 <__sfp+0x18>
 810dda8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810ddac:	b9d5      	cbnz	r5, 810dde4 <__sfp+0x64>
 810ddae:	4b16      	ldr	r3, [pc, #88]	; (810de08 <__sfp+0x88>)
 810ddb0:	60e3      	str	r3, [r4, #12]
 810ddb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810ddb6:	6665      	str	r5, [r4, #100]	; 0x64
 810ddb8:	f000 fbba 	bl	810e530 <__retarget_lock_init_recursive>
 810ddbc:	f7ff ff96 	bl	810dcec <__sfp_lock_release>
 810ddc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810ddc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810ddc8:	6025      	str	r5, [r4, #0]
 810ddca:	61a5      	str	r5, [r4, #24]
 810ddcc:	2208      	movs	r2, #8
 810ddce:	4629      	mov	r1, r5
 810ddd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810ddd4:	f7fd f876 	bl	810aec4 <memset>
 810ddd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810dddc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810dde0:	4620      	mov	r0, r4
 810dde2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810dde4:	3468      	adds	r4, #104	; 0x68
 810dde6:	e7d9      	b.n	810dd9c <__sfp+0x1c>
 810dde8:	2104      	movs	r1, #4
 810ddea:	4638      	mov	r0, r7
 810ddec:	f7ff ff62 	bl	810dcb4 <__sfmoreglue>
 810ddf0:	4604      	mov	r4, r0
 810ddf2:	6030      	str	r0, [r6, #0]
 810ddf4:	2800      	cmp	r0, #0
 810ddf6:	d1d5      	bne.n	810dda4 <__sfp+0x24>
 810ddf8:	f7ff ff78 	bl	810dcec <__sfp_lock_release>
 810ddfc:	230c      	movs	r3, #12
 810ddfe:	603b      	str	r3, [r7, #0]
 810de00:	e7ee      	b.n	810dde0 <__sfp+0x60>
 810de02:	bf00      	nop
 810de04:	0810fb38 	.word	0x0810fb38
 810de08:	ffff0001 	.word	0xffff0001

0810de0c <_fwalk_reent>:
 810de0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810de10:	4606      	mov	r6, r0
 810de12:	4688      	mov	r8, r1
 810de14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810de18:	2700      	movs	r7, #0
 810de1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810de1e:	f1b9 0901 	subs.w	r9, r9, #1
 810de22:	d505      	bpl.n	810de30 <_fwalk_reent+0x24>
 810de24:	6824      	ldr	r4, [r4, #0]
 810de26:	2c00      	cmp	r4, #0
 810de28:	d1f7      	bne.n	810de1a <_fwalk_reent+0xe>
 810de2a:	4638      	mov	r0, r7
 810de2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810de30:	89ab      	ldrh	r3, [r5, #12]
 810de32:	2b01      	cmp	r3, #1
 810de34:	d907      	bls.n	810de46 <_fwalk_reent+0x3a>
 810de36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810de3a:	3301      	adds	r3, #1
 810de3c:	d003      	beq.n	810de46 <_fwalk_reent+0x3a>
 810de3e:	4629      	mov	r1, r5
 810de40:	4630      	mov	r0, r6
 810de42:	47c0      	blx	r8
 810de44:	4307      	orrs	r7, r0
 810de46:	3568      	adds	r5, #104	; 0x68
 810de48:	e7e9      	b.n	810de1e <_fwalk_reent+0x12>

0810de4a <rshift>:
 810de4a:	6903      	ldr	r3, [r0, #16]
 810de4c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810de50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810de54:	ea4f 1261 	mov.w	r2, r1, asr #5
 810de58:	f100 0414 	add.w	r4, r0, #20
 810de5c:	dd45      	ble.n	810deea <rshift+0xa0>
 810de5e:	f011 011f 	ands.w	r1, r1, #31
 810de62:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810de66:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810de6a:	d10c      	bne.n	810de86 <rshift+0x3c>
 810de6c:	f100 0710 	add.w	r7, r0, #16
 810de70:	4629      	mov	r1, r5
 810de72:	42b1      	cmp	r1, r6
 810de74:	d334      	bcc.n	810dee0 <rshift+0x96>
 810de76:	1a9b      	subs	r3, r3, r2
 810de78:	009b      	lsls	r3, r3, #2
 810de7a:	1eea      	subs	r2, r5, #3
 810de7c:	4296      	cmp	r6, r2
 810de7e:	bf38      	it	cc
 810de80:	2300      	movcc	r3, #0
 810de82:	4423      	add	r3, r4
 810de84:	e015      	b.n	810deb2 <rshift+0x68>
 810de86:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810de8a:	f1c1 0820 	rsb	r8, r1, #32
 810de8e:	40cf      	lsrs	r7, r1
 810de90:	f105 0e04 	add.w	lr, r5, #4
 810de94:	46a1      	mov	r9, r4
 810de96:	4576      	cmp	r6, lr
 810de98:	46f4      	mov	ip, lr
 810de9a:	d815      	bhi.n	810dec8 <rshift+0x7e>
 810de9c:	1a9a      	subs	r2, r3, r2
 810de9e:	0092      	lsls	r2, r2, #2
 810dea0:	3a04      	subs	r2, #4
 810dea2:	3501      	adds	r5, #1
 810dea4:	42ae      	cmp	r6, r5
 810dea6:	bf38      	it	cc
 810dea8:	2200      	movcc	r2, #0
 810deaa:	18a3      	adds	r3, r4, r2
 810deac:	50a7      	str	r7, [r4, r2]
 810deae:	b107      	cbz	r7, 810deb2 <rshift+0x68>
 810deb0:	3304      	adds	r3, #4
 810deb2:	1b1a      	subs	r2, r3, r4
 810deb4:	42a3      	cmp	r3, r4
 810deb6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810deba:	bf08      	it	eq
 810debc:	2300      	moveq	r3, #0
 810debe:	6102      	str	r2, [r0, #16]
 810dec0:	bf08      	it	eq
 810dec2:	6143      	streq	r3, [r0, #20]
 810dec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810dec8:	f8dc c000 	ldr.w	ip, [ip]
 810decc:	fa0c fc08 	lsl.w	ip, ip, r8
 810ded0:	ea4c 0707 	orr.w	r7, ip, r7
 810ded4:	f849 7b04 	str.w	r7, [r9], #4
 810ded8:	f85e 7b04 	ldr.w	r7, [lr], #4
 810dedc:	40cf      	lsrs	r7, r1
 810dede:	e7da      	b.n	810de96 <rshift+0x4c>
 810dee0:	f851 cb04 	ldr.w	ip, [r1], #4
 810dee4:	f847 cf04 	str.w	ip, [r7, #4]!
 810dee8:	e7c3      	b.n	810de72 <rshift+0x28>
 810deea:	4623      	mov	r3, r4
 810deec:	e7e1      	b.n	810deb2 <rshift+0x68>

0810deee <__hexdig_fun>:
 810deee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810def2:	2b09      	cmp	r3, #9
 810def4:	d802      	bhi.n	810defc <__hexdig_fun+0xe>
 810def6:	3820      	subs	r0, #32
 810def8:	b2c0      	uxtb	r0, r0
 810defa:	4770      	bx	lr
 810defc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810df00:	2b05      	cmp	r3, #5
 810df02:	d801      	bhi.n	810df08 <__hexdig_fun+0x1a>
 810df04:	3847      	subs	r0, #71	; 0x47
 810df06:	e7f7      	b.n	810def8 <__hexdig_fun+0xa>
 810df08:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810df0c:	2b05      	cmp	r3, #5
 810df0e:	d801      	bhi.n	810df14 <__hexdig_fun+0x26>
 810df10:	3827      	subs	r0, #39	; 0x27
 810df12:	e7f1      	b.n	810def8 <__hexdig_fun+0xa>
 810df14:	2000      	movs	r0, #0
 810df16:	4770      	bx	lr

0810df18 <__gethex>:
 810df18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810df1c:	ed2d 8b02 	vpush	{d8}
 810df20:	b089      	sub	sp, #36	; 0x24
 810df22:	ee08 0a10 	vmov	s16, r0
 810df26:	9304      	str	r3, [sp, #16]
 810df28:	4bb4      	ldr	r3, [pc, #720]	; (810e1fc <__gethex+0x2e4>)
 810df2a:	681b      	ldr	r3, [r3, #0]
 810df2c:	9301      	str	r3, [sp, #4]
 810df2e:	4618      	mov	r0, r3
 810df30:	468b      	mov	fp, r1
 810df32:	4690      	mov	r8, r2
 810df34:	f7f2 f9d4 	bl	81002e0 <strlen>
 810df38:	9b01      	ldr	r3, [sp, #4]
 810df3a:	f8db 2000 	ldr.w	r2, [fp]
 810df3e:	4403      	add	r3, r0
 810df40:	4682      	mov	sl, r0
 810df42:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810df46:	9305      	str	r3, [sp, #20]
 810df48:	1c93      	adds	r3, r2, #2
 810df4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810df4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810df52:	32fe      	adds	r2, #254	; 0xfe
 810df54:	18d1      	adds	r1, r2, r3
 810df56:	461f      	mov	r7, r3
 810df58:	f813 0b01 	ldrb.w	r0, [r3], #1
 810df5c:	9100      	str	r1, [sp, #0]
 810df5e:	2830      	cmp	r0, #48	; 0x30
 810df60:	d0f8      	beq.n	810df54 <__gethex+0x3c>
 810df62:	f7ff ffc4 	bl	810deee <__hexdig_fun>
 810df66:	4604      	mov	r4, r0
 810df68:	2800      	cmp	r0, #0
 810df6a:	d13a      	bne.n	810dfe2 <__gethex+0xca>
 810df6c:	9901      	ldr	r1, [sp, #4]
 810df6e:	4652      	mov	r2, sl
 810df70:	4638      	mov	r0, r7
 810df72:	f001 fb3c 	bl	810f5ee <strncmp>
 810df76:	4605      	mov	r5, r0
 810df78:	2800      	cmp	r0, #0
 810df7a:	d168      	bne.n	810e04e <__gethex+0x136>
 810df7c:	f817 000a 	ldrb.w	r0, [r7, sl]
 810df80:	eb07 060a 	add.w	r6, r7, sl
 810df84:	f7ff ffb3 	bl	810deee <__hexdig_fun>
 810df88:	2800      	cmp	r0, #0
 810df8a:	d062      	beq.n	810e052 <__gethex+0x13a>
 810df8c:	4633      	mov	r3, r6
 810df8e:	7818      	ldrb	r0, [r3, #0]
 810df90:	2830      	cmp	r0, #48	; 0x30
 810df92:	461f      	mov	r7, r3
 810df94:	f103 0301 	add.w	r3, r3, #1
 810df98:	d0f9      	beq.n	810df8e <__gethex+0x76>
 810df9a:	f7ff ffa8 	bl	810deee <__hexdig_fun>
 810df9e:	2301      	movs	r3, #1
 810dfa0:	fab0 f480 	clz	r4, r0
 810dfa4:	0964      	lsrs	r4, r4, #5
 810dfa6:	4635      	mov	r5, r6
 810dfa8:	9300      	str	r3, [sp, #0]
 810dfaa:	463a      	mov	r2, r7
 810dfac:	4616      	mov	r6, r2
 810dfae:	3201      	adds	r2, #1
 810dfb0:	7830      	ldrb	r0, [r6, #0]
 810dfb2:	f7ff ff9c 	bl	810deee <__hexdig_fun>
 810dfb6:	2800      	cmp	r0, #0
 810dfb8:	d1f8      	bne.n	810dfac <__gethex+0x94>
 810dfba:	9901      	ldr	r1, [sp, #4]
 810dfbc:	4652      	mov	r2, sl
 810dfbe:	4630      	mov	r0, r6
 810dfc0:	f001 fb15 	bl	810f5ee <strncmp>
 810dfc4:	b980      	cbnz	r0, 810dfe8 <__gethex+0xd0>
 810dfc6:	b94d      	cbnz	r5, 810dfdc <__gethex+0xc4>
 810dfc8:	eb06 050a 	add.w	r5, r6, sl
 810dfcc:	462a      	mov	r2, r5
 810dfce:	4616      	mov	r6, r2
 810dfd0:	3201      	adds	r2, #1
 810dfd2:	7830      	ldrb	r0, [r6, #0]
 810dfd4:	f7ff ff8b 	bl	810deee <__hexdig_fun>
 810dfd8:	2800      	cmp	r0, #0
 810dfda:	d1f8      	bne.n	810dfce <__gethex+0xb6>
 810dfdc:	1bad      	subs	r5, r5, r6
 810dfde:	00ad      	lsls	r5, r5, #2
 810dfe0:	e004      	b.n	810dfec <__gethex+0xd4>
 810dfe2:	2400      	movs	r4, #0
 810dfe4:	4625      	mov	r5, r4
 810dfe6:	e7e0      	b.n	810dfaa <__gethex+0x92>
 810dfe8:	2d00      	cmp	r5, #0
 810dfea:	d1f7      	bne.n	810dfdc <__gethex+0xc4>
 810dfec:	7833      	ldrb	r3, [r6, #0]
 810dfee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810dff2:	2b50      	cmp	r3, #80	; 0x50
 810dff4:	d13b      	bne.n	810e06e <__gethex+0x156>
 810dff6:	7873      	ldrb	r3, [r6, #1]
 810dff8:	2b2b      	cmp	r3, #43	; 0x2b
 810dffa:	d02c      	beq.n	810e056 <__gethex+0x13e>
 810dffc:	2b2d      	cmp	r3, #45	; 0x2d
 810dffe:	d02e      	beq.n	810e05e <__gethex+0x146>
 810e000:	1c71      	adds	r1, r6, #1
 810e002:	f04f 0900 	mov.w	r9, #0
 810e006:	7808      	ldrb	r0, [r1, #0]
 810e008:	f7ff ff71 	bl	810deee <__hexdig_fun>
 810e00c:	1e43      	subs	r3, r0, #1
 810e00e:	b2db      	uxtb	r3, r3
 810e010:	2b18      	cmp	r3, #24
 810e012:	d82c      	bhi.n	810e06e <__gethex+0x156>
 810e014:	f1a0 0210 	sub.w	r2, r0, #16
 810e018:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810e01c:	f7ff ff67 	bl	810deee <__hexdig_fun>
 810e020:	1e43      	subs	r3, r0, #1
 810e022:	b2db      	uxtb	r3, r3
 810e024:	2b18      	cmp	r3, #24
 810e026:	d91d      	bls.n	810e064 <__gethex+0x14c>
 810e028:	f1b9 0f00 	cmp.w	r9, #0
 810e02c:	d000      	beq.n	810e030 <__gethex+0x118>
 810e02e:	4252      	negs	r2, r2
 810e030:	4415      	add	r5, r2
 810e032:	f8cb 1000 	str.w	r1, [fp]
 810e036:	b1e4      	cbz	r4, 810e072 <__gethex+0x15a>
 810e038:	9b00      	ldr	r3, [sp, #0]
 810e03a:	2b00      	cmp	r3, #0
 810e03c:	bf14      	ite	ne
 810e03e:	2700      	movne	r7, #0
 810e040:	2706      	moveq	r7, #6
 810e042:	4638      	mov	r0, r7
 810e044:	b009      	add	sp, #36	; 0x24
 810e046:	ecbd 8b02 	vpop	{d8}
 810e04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e04e:	463e      	mov	r6, r7
 810e050:	4625      	mov	r5, r4
 810e052:	2401      	movs	r4, #1
 810e054:	e7ca      	b.n	810dfec <__gethex+0xd4>
 810e056:	f04f 0900 	mov.w	r9, #0
 810e05a:	1cb1      	adds	r1, r6, #2
 810e05c:	e7d3      	b.n	810e006 <__gethex+0xee>
 810e05e:	f04f 0901 	mov.w	r9, #1
 810e062:	e7fa      	b.n	810e05a <__gethex+0x142>
 810e064:	230a      	movs	r3, #10
 810e066:	fb03 0202 	mla	r2, r3, r2, r0
 810e06a:	3a10      	subs	r2, #16
 810e06c:	e7d4      	b.n	810e018 <__gethex+0x100>
 810e06e:	4631      	mov	r1, r6
 810e070:	e7df      	b.n	810e032 <__gethex+0x11a>
 810e072:	1bf3      	subs	r3, r6, r7
 810e074:	3b01      	subs	r3, #1
 810e076:	4621      	mov	r1, r4
 810e078:	2b07      	cmp	r3, #7
 810e07a:	dc0b      	bgt.n	810e094 <__gethex+0x17c>
 810e07c:	ee18 0a10 	vmov	r0, s16
 810e080:	f000 fadc 	bl	810e63c <_Balloc>
 810e084:	4604      	mov	r4, r0
 810e086:	b940      	cbnz	r0, 810e09a <__gethex+0x182>
 810e088:	4b5d      	ldr	r3, [pc, #372]	; (810e200 <__gethex+0x2e8>)
 810e08a:	4602      	mov	r2, r0
 810e08c:	21de      	movs	r1, #222	; 0xde
 810e08e:	485d      	ldr	r0, [pc, #372]	; (810e204 <__gethex+0x2ec>)
 810e090:	f001 fae0 	bl	810f654 <__assert_func>
 810e094:	3101      	adds	r1, #1
 810e096:	105b      	asrs	r3, r3, #1
 810e098:	e7ee      	b.n	810e078 <__gethex+0x160>
 810e09a:	f100 0914 	add.w	r9, r0, #20
 810e09e:	f04f 0b00 	mov.w	fp, #0
 810e0a2:	f1ca 0301 	rsb	r3, sl, #1
 810e0a6:	f8cd 9008 	str.w	r9, [sp, #8]
 810e0aa:	f8cd b000 	str.w	fp, [sp]
 810e0ae:	9306      	str	r3, [sp, #24]
 810e0b0:	42b7      	cmp	r7, r6
 810e0b2:	d340      	bcc.n	810e136 <__gethex+0x21e>
 810e0b4:	9802      	ldr	r0, [sp, #8]
 810e0b6:	9b00      	ldr	r3, [sp, #0]
 810e0b8:	f840 3b04 	str.w	r3, [r0], #4
 810e0bc:	eba0 0009 	sub.w	r0, r0, r9
 810e0c0:	1080      	asrs	r0, r0, #2
 810e0c2:	0146      	lsls	r6, r0, #5
 810e0c4:	6120      	str	r0, [r4, #16]
 810e0c6:	4618      	mov	r0, r3
 810e0c8:	f000 fbaa 	bl	810e820 <__hi0bits>
 810e0cc:	1a30      	subs	r0, r6, r0
 810e0ce:	f8d8 6000 	ldr.w	r6, [r8]
 810e0d2:	42b0      	cmp	r0, r6
 810e0d4:	dd63      	ble.n	810e19e <__gethex+0x286>
 810e0d6:	1b87      	subs	r7, r0, r6
 810e0d8:	4639      	mov	r1, r7
 810e0da:	4620      	mov	r0, r4
 810e0dc:	f000 ff4e 	bl	810ef7c <__any_on>
 810e0e0:	4682      	mov	sl, r0
 810e0e2:	b1a8      	cbz	r0, 810e110 <__gethex+0x1f8>
 810e0e4:	1e7b      	subs	r3, r7, #1
 810e0e6:	1159      	asrs	r1, r3, #5
 810e0e8:	f003 021f 	and.w	r2, r3, #31
 810e0ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810e0f0:	f04f 0a01 	mov.w	sl, #1
 810e0f4:	fa0a f202 	lsl.w	r2, sl, r2
 810e0f8:	420a      	tst	r2, r1
 810e0fa:	d009      	beq.n	810e110 <__gethex+0x1f8>
 810e0fc:	4553      	cmp	r3, sl
 810e0fe:	dd05      	ble.n	810e10c <__gethex+0x1f4>
 810e100:	1eb9      	subs	r1, r7, #2
 810e102:	4620      	mov	r0, r4
 810e104:	f000 ff3a 	bl	810ef7c <__any_on>
 810e108:	2800      	cmp	r0, #0
 810e10a:	d145      	bne.n	810e198 <__gethex+0x280>
 810e10c:	f04f 0a02 	mov.w	sl, #2
 810e110:	4639      	mov	r1, r7
 810e112:	4620      	mov	r0, r4
 810e114:	f7ff fe99 	bl	810de4a <rshift>
 810e118:	443d      	add	r5, r7
 810e11a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810e11e:	42ab      	cmp	r3, r5
 810e120:	da4c      	bge.n	810e1bc <__gethex+0x2a4>
 810e122:	ee18 0a10 	vmov	r0, s16
 810e126:	4621      	mov	r1, r4
 810e128:	f000 fac8 	bl	810e6bc <_Bfree>
 810e12c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810e12e:	2300      	movs	r3, #0
 810e130:	6013      	str	r3, [r2, #0]
 810e132:	27a3      	movs	r7, #163	; 0xa3
 810e134:	e785      	b.n	810e042 <__gethex+0x12a>
 810e136:	1e73      	subs	r3, r6, #1
 810e138:	9a05      	ldr	r2, [sp, #20]
 810e13a:	9303      	str	r3, [sp, #12]
 810e13c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810e140:	4293      	cmp	r3, r2
 810e142:	d019      	beq.n	810e178 <__gethex+0x260>
 810e144:	f1bb 0f20 	cmp.w	fp, #32
 810e148:	d107      	bne.n	810e15a <__gethex+0x242>
 810e14a:	9b02      	ldr	r3, [sp, #8]
 810e14c:	9a00      	ldr	r2, [sp, #0]
 810e14e:	f843 2b04 	str.w	r2, [r3], #4
 810e152:	9302      	str	r3, [sp, #8]
 810e154:	2300      	movs	r3, #0
 810e156:	9300      	str	r3, [sp, #0]
 810e158:	469b      	mov	fp, r3
 810e15a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810e15e:	f7ff fec6 	bl	810deee <__hexdig_fun>
 810e162:	9b00      	ldr	r3, [sp, #0]
 810e164:	f000 000f 	and.w	r0, r0, #15
 810e168:	fa00 f00b 	lsl.w	r0, r0, fp
 810e16c:	4303      	orrs	r3, r0
 810e16e:	9300      	str	r3, [sp, #0]
 810e170:	f10b 0b04 	add.w	fp, fp, #4
 810e174:	9b03      	ldr	r3, [sp, #12]
 810e176:	e00d      	b.n	810e194 <__gethex+0x27c>
 810e178:	9b03      	ldr	r3, [sp, #12]
 810e17a:	9a06      	ldr	r2, [sp, #24]
 810e17c:	4413      	add	r3, r2
 810e17e:	42bb      	cmp	r3, r7
 810e180:	d3e0      	bcc.n	810e144 <__gethex+0x22c>
 810e182:	4618      	mov	r0, r3
 810e184:	9901      	ldr	r1, [sp, #4]
 810e186:	9307      	str	r3, [sp, #28]
 810e188:	4652      	mov	r2, sl
 810e18a:	f001 fa30 	bl	810f5ee <strncmp>
 810e18e:	9b07      	ldr	r3, [sp, #28]
 810e190:	2800      	cmp	r0, #0
 810e192:	d1d7      	bne.n	810e144 <__gethex+0x22c>
 810e194:	461e      	mov	r6, r3
 810e196:	e78b      	b.n	810e0b0 <__gethex+0x198>
 810e198:	f04f 0a03 	mov.w	sl, #3
 810e19c:	e7b8      	b.n	810e110 <__gethex+0x1f8>
 810e19e:	da0a      	bge.n	810e1b6 <__gethex+0x29e>
 810e1a0:	1a37      	subs	r7, r6, r0
 810e1a2:	4621      	mov	r1, r4
 810e1a4:	ee18 0a10 	vmov	r0, s16
 810e1a8:	463a      	mov	r2, r7
 810e1aa:	f000 fca3 	bl	810eaf4 <__lshift>
 810e1ae:	1bed      	subs	r5, r5, r7
 810e1b0:	4604      	mov	r4, r0
 810e1b2:	f100 0914 	add.w	r9, r0, #20
 810e1b6:	f04f 0a00 	mov.w	sl, #0
 810e1ba:	e7ae      	b.n	810e11a <__gethex+0x202>
 810e1bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810e1c0:	42a8      	cmp	r0, r5
 810e1c2:	dd72      	ble.n	810e2aa <__gethex+0x392>
 810e1c4:	1b45      	subs	r5, r0, r5
 810e1c6:	42ae      	cmp	r6, r5
 810e1c8:	dc36      	bgt.n	810e238 <__gethex+0x320>
 810e1ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810e1ce:	2b02      	cmp	r3, #2
 810e1d0:	d02a      	beq.n	810e228 <__gethex+0x310>
 810e1d2:	2b03      	cmp	r3, #3
 810e1d4:	d02c      	beq.n	810e230 <__gethex+0x318>
 810e1d6:	2b01      	cmp	r3, #1
 810e1d8:	d11c      	bne.n	810e214 <__gethex+0x2fc>
 810e1da:	42ae      	cmp	r6, r5
 810e1dc:	d11a      	bne.n	810e214 <__gethex+0x2fc>
 810e1de:	2e01      	cmp	r6, #1
 810e1e0:	d112      	bne.n	810e208 <__gethex+0x2f0>
 810e1e2:	9a04      	ldr	r2, [sp, #16]
 810e1e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810e1e8:	6013      	str	r3, [r2, #0]
 810e1ea:	2301      	movs	r3, #1
 810e1ec:	6123      	str	r3, [r4, #16]
 810e1ee:	f8c9 3000 	str.w	r3, [r9]
 810e1f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810e1f4:	2762      	movs	r7, #98	; 0x62
 810e1f6:	601c      	str	r4, [r3, #0]
 810e1f8:	e723      	b.n	810e042 <__gethex+0x12a>
 810e1fa:	bf00      	nop
 810e1fc:	0810fe24 	.word	0x0810fe24
 810e200:	0810fd48 	.word	0x0810fd48
 810e204:	0810fdbc 	.word	0x0810fdbc
 810e208:	1e71      	subs	r1, r6, #1
 810e20a:	4620      	mov	r0, r4
 810e20c:	f000 feb6 	bl	810ef7c <__any_on>
 810e210:	2800      	cmp	r0, #0
 810e212:	d1e6      	bne.n	810e1e2 <__gethex+0x2ca>
 810e214:	ee18 0a10 	vmov	r0, s16
 810e218:	4621      	mov	r1, r4
 810e21a:	f000 fa4f 	bl	810e6bc <_Bfree>
 810e21e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810e220:	2300      	movs	r3, #0
 810e222:	6013      	str	r3, [r2, #0]
 810e224:	2750      	movs	r7, #80	; 0x50
 810e226:	e70c      	b.n	810e042 <__gethex+0x12a>
 810e228:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810e22a:	2b00      	cmp	r3, #0
 810e22c:	d1f2      	bne.n	810e214 <__gethex+0x2fc>
 810e22e:	e7d8      	b.n	810e1e2 <__gethex+0x2ca>
 810e230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810e232:	2b00      	cmp	r3, #0
 810e234:	d1d5      	bne.n	810e1e2 <__gethex+0x2ca>
 810e236:	e7ed      	b.n	810e214 <__gethex+0x2fc>
 810e238:	1e6f      	subs	r7, r5, #1
 810e23a:	f1ba 0f00 	cmp.w	sl, #0
 810e23e:	d131      	bne.n	810e2a4 <__gethex+0x38c>
 810e240:	b127      	cbz	r7, 810e24c <__gethex+0x334>
 810e242:	4639      	mov	r1, r7
 810e244:	4620      	mov	r0, r4
 810e246:	f000 fe99 	bl	810ef7c <__any_on>
 810e24a:	4682      	mov	sl, r0
 810e24c:	117b      	asrs	r3, r7, #5
 810e24e:	2101      	movs	r1, #1
 810e250:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810e254:	f007 071f 	and.w	r7, r7, #31
 810e258:	fa01 f707 	lsl.w	r7, r1, r7
 810e25c:	421f      	tst	r7, r3
 810e25e:	4629      	mov	r1, r5
 810e260:	4620      	mov	r0, r4
 810e262:	bf18      	it	ne
 810e264:	f04a 0a02 	orrne.w	sl, sl, #2
 810e268:	1b76      	subs	r6, r6, r5
 810e26a:	f7ff fdee 	bl	810de4a <rshift>
 810e26e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810e272:	2702      	movs	r7, #2
 810e274:	f1ba 0f00 	cmp.w	sl, #0
 810e278:	d048      	beq.n	810e30c <__gethex+0x3f4>
 810e27a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810e27e:	2b02      	cmp	r3, #2
 810e280:	d015      	beq.n	810e2ae <__gethex+0x396>
 810e282:	2b03      	cmp	r3, #3
 810e284:	d017      	beq.n	810e2b6 <__gethex+0x39e>
 810e286:	2b01      	cmp	r3, #1
 810e288:	d109      	bne.n	810e29e <__gethex+0x386>
 810e28a:	f01a 0f02 	tst.w	sl, #2
 810e28e:	d006      	beq.n	810e29e <__gethex+0x386>
 810e290:	f8d9 0000 	ldr.w	r0, [r9]
 810e294:	ea4a 0a00 	orr.w	sl, sl, r0
 810e298:	f01a 0f01 	tst.w	sl, #1
 810e29c:	d10e      	bne.n	810e2bc <__gethex+0x3a4>
 810e29e:	f047 0710 	orr.w	r7, r7, #16
 810e2a2:	e033      	b.n	810e30c <__gethex+0x3f4>
 810e2a4:	f04f 0a01 	mov.w	sl, #1
 810e2a8:	e7d0      	b.n	810e24c <__gethex+0x334>
 810e2aa:	2701      	movs	r7, #1
 810e2ac:	e7e2      	b.n	810e274 <__gethex+0x35c>
 810e2ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810e2b0:	f1c3 0301 	rsb	r3, r3, #1
 810e2b4:	9315      	str	r3, [sp, #84]	; 0x54
 810e2b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810e2b8:	2b00      	cmp	r3, #0
 810e2ba:	d0f0      	beq.n	810e29e <__gethex+0x386>
 810e2bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810e2c0:	f104 0314 	add.w	r3, r4, #20
 810e2c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810e2c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810e2cc:	f04f 0c00 	mov.w	ip, #0
 810e2d0:	4618      	mov	r0, r3
 810e2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 810e2d6:	f1b2 3fff 	cmp.w	r2, #4294967295
 810e2da:	d01c      	beq.n	810e316 <__gethex+0x3fe>
 810e2dc:	3201      	adds	r2, #1
 810e2de:	6002      	str	r2, [r0, #0]
 810e2e0:	2f02      	cmp	r7, #2
 810e2e2:	f104 0314 	add.w	r3, r4, #20
 810e2e6:	d13f      	bne.n	810e368 <__gethex+0x450>
 810e2e8:	f8d8 2000 	ldr.w	r2, [r8]
 810e2ec:	3a01      	subs	r2, #1
 810e2ee:	42b2      	cmp	r2, r6
 810e2f0:	d10a      	bne.n	810e308 <__gethex+0x3f0>
 810e2f2:	1171      	asrs	r1, r6, #5
 810e2f4:	2201      	movs	r2, #1
 810e2f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810e2fa:	f006 061f 	and.w	r6, r6, #31
 810e2fe:	fa02 f606 	lsl.w	r6, r2, r6
 810e302:	421e      	tst	r6, r3
 810e304:	bf18      	it	ne
 810e306:	4617      	movne	r7, r2
 810e308:	f047 0720 	orr.w	r7, r7, #32
 810e30c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810e30e:	601c      	str	r4, [r3, #0]
 810e310:	9b04      	ldr	r3, [sp, #16]
 810e312:	601d      	str	r5, [r3, #0]
 810e314:	e695      	b.n	810e042 <__gethex+0x12a>
 810e316:	4299      	cmp	r1, r3
 810e318:	f843 cc04 	str.w	ip, [r3, #-4]
 810e31c:	d8d8      	bhi.n	810e2d0 <__gethex+0x3b8>
 810e31e:	68a3      	ldr	r3, [r4, #8]
 810e320:	459b      	cmp	fp, r3
 810e322:	db19      	blt.n	810e358 <__gethex+0x440>
 810e324:	6861      	ldr	r1, [r4, #4]
 810e326:	ee18 0a10 	vmov	r0, s16
 810e32a:	3101      	adds	r1, #1
 810e32c:	f000 f986 	bl	810e63c <_Balloc>
 810e330:	4681      	mov	r9, r0
 810e332:	b918      	cbnz	r0, 810e33c <__gethex+0x424>
 810e334:	4b1a      	ldr	r3, [pc, #104]	; (810e3a0 <__gethex+0x488>)
 810e336:	4602      	mov	r2, r0
 810e338:	2184      	movs	r1, #132	; 0x84
 810e33a:	e6a8      	b.n	810e08e <__gethex+0x176>
 810e33c:	6922      	ldr	r2, [r4, #16]
 810e33e:	3202      	adds	r2, #2
 810e340:	f104 010c 	add.w	r1, r4, #12
 810e344:	0092      	lsls	r2, r2, #2
 810e346:	300c      	adds	r0, #12
 810e348:	f7fc fdae 	bl	810aea8 <memcpy>
 810e34c:	4621      	mov	r1, r4
 810e34e:	ee18 0a10 	vmov	r0, s16
 810e352:	f000 f9b3 	bl	810e6bc <_Bfree>
 810e356:	464c      	mov	r4, r9
 810e358:	6923      	ldr	r3, [r4, #16]
 810e35a:	1c5a      	adds	r2, r3, #1
 810e35c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810e360:	6122      	str	r2, [r4, #16]
 810e362:	2201      	movs	r2, #1
 810e364:	615a      	str	r2, [r3, #20]
 810e366:	e7bb      	b.n	810e2e0 <__gethex+0x3c8>
 810e368:	6922      	ldr	r2, [r4, #16]
 810e36a:	455a      	cmp	r2, fp
 810e36c:	dd0b      	ble.n	810e386 <__gethex+0x46e>
 810e36e:	2101      	movs	r1, #1
 810e370:	4620      	mov	r0, r4
 810e372:	f7ff fd6a 	bl	810de4a <rshift>
 810e376:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810e37a:	3501      	adds	r5, #1
 810e37c:	42ab      	cmp	r3, r5
 810e37e:	f6ff aed0 	blt.w	810e122 <__gethex+0x20a>
 810e382:	2701      	movs	r7, #1
 810e384:	e7c0      	b.n	810e308 <__gethex+0x3f0>
 810e386:	f016 061f 	ands.w	r6, r6, #31
 810e38a:	d0fa      	beq.n	810e382 <__gethex+0x46a>
 810e38c:	4453      	add	r3, sl
 810e38e:	f1c6 0620 	rsb	r6, r6, #32
 810e392:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810e396:	f000 fa43 	bl	810e820 <__hi0bits>
 810e39a:	42b0      	cmp	r0, r6
 810e39c:	dbe7      	blt.n	810e36e <__gethex+0x456>
 810e39e:	e7f0      	b.n	810e382 <__gethex+0x46a>
 810e3a0:	0810fd48 	.word	0x0810fd48

0810e3a4 <L_shift>:
 810e3a4:	f1c2 0208 	rsb	r2, r2, #8
 810e3a8:	0092      	lsls	r2, r2, #2
 810e3aa:	b570      	push	{r4, r5, r6, lr}
 810e3ac:	f1c2 0620 	rsb	r6, r2, #32
 810e3b0:	6843      	ldr	r3, [r0, #4]
 810e3b2:	6804      	ldr	r4, [r0, #0]
 810e3b4:	fa03 f506 	lsl.w	r5, r3, r6
 810e3b8:	432c      	orrs	r4, r5
 810e3ba:	40d3      	lsrs	r3, r2
 810e3bc:	6004      	str	r4, [r0, #0]
 810e3be:	f840 3f04 	str.w	r3, [r0, #4]!
 810e3c2:	4288      	cmp	r0, r1
 810e3c4:	d3f4      	bcc.n	810e3b0 <L_shift+0xc>
 810e3c6:	bd70      	pop	{r4, r5, r6, pc}

0810e3c8 <__match>:
 810e3c8:	b530      	push	{r4, r5, lr}
 810e3ca:	6803      	ldr	r3, [r0, #0]
 810e3cc:	3301      	adds	r3, #1
 810e3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 810e3d2:	b914      	cbnz	r4, 810e3da <__match+0x12>
 810e3d4:	6003      	str	r3, [r0, #0]
 810e3d6:	2001      	movs	r0, #1
 810e3d8:	bd30      	pop	{r4, r5, pc}
 810e3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 810e3de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810e3e2:	2d19      	cmp	r5, #25
 810e3e4:	bf98      	it	ls
 810e3e6:	3220      	addls	r2, #32
 810e3e8:	42a2      	cmp	r2, r4
 810e3ea:	d0f0      	beq.n	810e3ce <__match+0x6>
 810e3ec:	2000      	movs	r0, #0
 810e3ee:	e7f3      	b.n	810e3d8 <__match+0x10>

0810e3f0 <__hexnan>:
 810e3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e3f4:	680b      	ldr	r3, [r1, #0]
 810e3f6:	115e      	asrs	r6, r3, #5
 810e3f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810e3fc:	f013 031f 	ands.w	r3, r3, #31
 810e400:	b087      	sub	sp, #28
 810e402:	bf18      	it	ne
 810e404:	3604      	addne	r6, #4
 810e406:	2500      	movs	r5, #0
 810e408:	1f37      	subs	r7, r6, #4
 810e40a:	4690      	mov	r8, r2
 810e40c:	6802      	ldr	r2, [r0, #0]
 810e40e:	9301      	str	r3, [sp, #4]
 810e410:	4682      	mov	sl, r0
 810e412:	f846 5c04 	str.w	r5, [r6, #-4]
 810e416:	46b9      	mov	r9, r7
 810e418:	463c      	mov	r4, r7
 810e41a:	9502      	str	r5, [sp, #8]
 810e41c:	46ab      	mov	fp, r5
 810e41e:	7851      	ldrb	r1, [r2, #1]
 810e420:	1c53      	adds	r3, r2, #1
 810e422:	9303      	str	r3, [sp, #12]
 810e424:	b341      	cbz	r1, 810e478 <__hexnan+0x88>
 810e426:	4608      	mov	r0, r1
 810e428:	9205      	str	r2, [sp, #20]
 810e42a:	9104      	str	r1, [sp, #16]
 810e42c:	f7ff fd5f 	bl	810deee <__hexdig_fun>
 810e430:	2800      	cmp	r0, #0
 810e432:	d14f      	bne.n	810e4d4 <__hexnan+0xe4>
 810e434:	9904      	ldr	r1, [sp, #16]
 810e436:	9a05      	ldr	r2, [sp, #20]
 810e438:	2920      	cmp	r1, #32
 810e43a:	d818      	bhi.n	810e46e <__hexnan+0x7e>
 810e43c:	9b02      	ldr	r3, [sp, #8]
 810e43e:	459b      	cmp	fp, r3
 810e440:	dd13      	ble.n	810e46a <__hexnan+0x7a>
 810e442:	454c      	cmp	r4, r9
 810e444:	d206      	bcs.n	810e454 <__hexnan+0x64>
 810e446:	2d07      	cmp	r5, #7
 810e448:	dc04      	bgt.n	810e454 <__hexnan+0x64>
 810e44a:	462a      	mov	r2, r5
 810e44c:	4649      	mov	r1, r9
 810e44e:	4620      	mov	r0, r4
 810e450:	f7ff ffa8 	bl	810e3a4 <L_shift>
 810e454:	4544      	cmp	r4, r8
 810e456:	d950      	bls.n	810e4fa <__hexnan+0x10a>
 810e458:	2300      	movs	r3, #0
 810e45a:	f1a4 0904 	sub.w	r9, r4, #4
 810e45e:	f844 3c04 	str.w	r3, [r4, #-4]
 810e462:	f8cd b008 	str.w	fp, [sp, #8]
 810e466:	464c      	mov	r4, r9
 810e468:	461d      	mov	r5, r3
 810e46a:	9a03      	ldr	r2, [sp, #12]
 810e46c:	e7d7      	b.n	810e41e <__hexnan+0x2e>
 810e46e:	2929      	cmp	r1, #41	; 0x29
 810e470:	d156      	bne.n	810e520 <__hexnan+0x130>
 810e472:	3202      	adds	r2, #2
 810e474:	f8ca 2000 	str.w	r2, [sl]
 810e478:	f1bb 0f00 	cmp.w	fp, #0
 810e47c:	d050      	beq.n	810e520 <__hexnan+0x130>
 810e47e:	454c      	cmp	r4, r9
 810e480:	d206      	bcs.n	810e490 <__hexnan+0xa0>
 810e482:	2d07      	cmp	r5, #7
 810e484:	dc04      	bgt.n	810e490 <__hexnan+0xa0>
 810e486:	462a      	mov	r2, r5
 810e488:	4649      	mov	r1, r9
 810e48a:	4620      	mov	r0, r4
 810e48c:	f7ff ff8a 	bl	810e3a4 <L_shift>
 810e490:	4544      	cmp	r4, r8
 810e492:	d934      	bls.n	810e4fe <__hexnan+0x10e>
 810e494:	f1a8 0204 	sub.w	r2, r8, #4
 810e498:	4623      	mov	r3, r4
 810e49a:	f853 1b04 	ldr.w	r1, [r3], #4
 810e49e:	f842 1f04 	str.w	r1, [r2, #4]!
 810e4a2:	429f      	cmp	r7, r3
 810e4a4:	d2f9      	bcs.n	810e49a <__hexnan+0xaa>
 810e4a6:	1b3b      	subs	r3, r7, r4
 810e4a8:	f023 0303 	bic.w	r3, r3, #3
 810e4ac:	3304      	adds	r3, #4
 810e4ae:	3401      	adds	r4, #1
 810e4b0:	3e03      	subs	r6, #3
 810e4b2:	42b4      	cmp	r4, r6
 810e4b4:	bf88      	it	hi
 810e4b6:	2304      	movhi	r3, #4
 810e4b8:	4443      	add	r3, r8
 810e4ba:	2200      	movs	r2, #0
 810e4bc:	f843 2b04 	str.w	r2, [r3], #4
 810e4c0:	429f      	cmp	r7, r3
 810e4c2:	d2fb      	bcs.n	810e4bc <__hexnan+0xcc>
 810e4c4:	683b      	ldr	r3, [r7, #0]
 810e4c6:	b91b      	cbnz	r3, 810e4d0 <__hexnan+0xe0>
 810e4c8:	4547      	cmp	r7, r8
 810e4ca:	d127      	bne.n	810e51c <__hexnan+0x12c>
 810e4cc:	2301      	movs	r3, #1
 810e4ce:	603b      	str	r3, [r7, #0]
 810e4d0:	2005      	movs	r0, #5
 810e4d2:	e026      	b.n	810e522 <__hexnan+0x132>
 810e4d4:	3501      	adds	r5, #1
 810e4d6:	2d08      	cmp	r5, #8
 810e4d8:	f10b 0b01 	add.w	fp, fp, #1
 810e4dc:	dd06      	ble.n	810e4ec <__hexnan+0xfc>
 810e4de:	4544      	cmp	r4, r8
 810e4e0:	d9c3      	bls.n	810e46a <__hexnan+0x7a>
 810e4e2:	2300      	movs	r3, #0
 810e4e4:	f844 3c04 	str.w	r3, [r4, #-4]
 810e4e8:	2501      	movs	r5, #1
 810e4ea:	3c04      	subs	r4, #4
 810e4ec:	6822      	ldr	r2, [r4, #0]
 810e4ee:	f000 000f 	and.w	r0, r0, #15
 810e4f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810e4f6:	6022      	str	r2, [r4, #0]
 810e4f8:	e7b7      	b.n	810e46a <__hexnan+0x7a>
 810e4fa:	2508      	movs	r5, #8
 810e4fc:	e7b5      	b.n	810e46a <__hexnan+0x7a>
 810e4fe:	9b01      	ldr	r3, [sp, #4]
 810e500:	2b00      	cmp	r3, #0
 810e502:	d0df      	beq.n	810e4c4 <__hexnan+0xd4>
 810e504:	f04f 32ff 	mov.w	r2, #4294967295
 810e508:	f1c3 0320 	rsb	r3, r3, #32
 810e50c:	fa22 f303 	lsr.w	r3, r2, r3
 810e510:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810e514:	401a      	ands	r2, r3
 810e516:	f846 2c04 	str.w	r2, [r6, #-4]
 810e51a:	e7d3      	b.n	810e4c4 <__hexnan+0xd4>
 810e51c:	3f04      	subs	r7, #4
 810e51e:	e7d1      	b.n	810e4c4 <__hexnan+0xd4>
 810e520:	2004      	movs	r0, #4
 810e522:	b007      	add	sp, #28
 810e524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810e528 <_localeconv_r>:
 810e528:	4800      	ldr	r0, [pc, #0]	; (810e52c <_localeconv_r+0x4>)
 810e52a:	4770      	bx	lr
 810e52c:	10000178 	.word	0x10000178

0810e530 <__retarget_lock_init_recursive>:
 810e530:	4770      	bx	lr

0810e532 <__retarget_lock_acquire_recursive>:
 810e532:	4770      	bx	lr

0810e534 <__retarget_lock_release_recursive>:
 810e534:	4770      	bx	lr

0810e536 <__swhatbuf_r>:
 810e536:	b570      	push	{r4, r5, r6, lr}
 810e538:	460e      	mov	r6, r1
 810e53a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e53e:	2900      	cmp	r1, #0
 810e540:	b096      	sub	sp, #88	; 0x58
 810e542:	4614      	mov	r4, r2
 810e544:	461d      	mov	r5, r3
 810e546:	da08      	bge.n	810e55a <__swhatbuf_r+0x24>
 810e548:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810e54c:	2200      	movs	r2, #0
 810e54e:	602a      	str	r2, [r5, #0]
 810e550:	061a      	lsls	r2, r3, #24
 810e552:	d410      	bmi.n	810e576 <__swhatbuf_r+0x40>
 810e554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810e558:	e00e      	b.n	810e578 <__swhatbuf_r+0x42>
 810e55a:	466a      	mov	r2, sp
 810e55c:	f001 f8ba 	bl	810f6d4 <_fstat_r>
 810e560:	2800      	cmp	r0, #0
 810e562:	dbf1      	blt.n	810e548 <__swhatbuf_r+0x12>
 810e564:	9a01      	ldr	r2, [sp, #4]
 810e566:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810e56a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810e56e:	425a      	negs	r2, r3
 810e570:	415a      	adcs	r2, r3
 810e572:	602a      	str	r2, [r5, #0]
 810e574:	e7ee      	b.n	810e554 <__swhatbuf_r+0x1e>
 810e576:	2340      	movs	r3, #64	; 0x40
 810e578:	2000      	movs	r0, #0
 810e57a:	6023      	str	r3, [r4, #0]
 810e57c:	b016      	add	sp, #88	; 0x58
 810e57e:	bd70      	pop	{r4, r5, r6, pc}

0810e580 <__smakebuf_r>:
 810e580:	898b      	ldrh	r3, [r1, #12]
 810e582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810e584:	079d      	lsls	r5, r3, #30
 810e586:	4606      	mov	r6, r0
 810e588:	460c      	mov	r4, r1
 810e58a:	d507      	bpl.n	810e59c <__smakebuf_r+0x1c>
 810e58c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810e590:	6023      	str	r3, [r4, #0]
 810e592:	6123      	str	r3, [r4, #16]
 810e594:	2301      	movs	r3, #1
 810e596:	6163      	str	r3, [r4, #20]
 810e598:	b002      	add	sp, #8
 810e59a:	bd70      	pop	{r4, r5, r6, pc}
 810e59c:	ab01      	add	r3, sp, #4
 810e59e:	466a      	mov	r2, sp
 810e5a0:	f7ff ffc9 	bl	810e536 <__swhatbuf_r>
 810e5a4:	9900      	ldr	r1, [sp, #0]
 810e5a6:	4605      	mov	r5, r0
 810e5a8:	4630      	mov	r0, r6
 810e5aa:	f7fc fcff 	bl	810afac <_malloc_r>
 810e5ae:	b948      	cbnz	r0, 810e5c4 <__smakebuf_r+0x44>
 810e5b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e5b4:	059a      	lsls	r2, r3, #22
 810e5b6:	d4ef      	bmi.n	810e598 <__smakebuf_r+0x18>
 810e5b8:	f023 0303 	bic.w	r3, r3, #3
 810e5bc:	f043 0302 	orr.w	r3, r3, #2
 810e5c0:	81a3      	strh	r3, [r4, #12]
 810e5c2:	e7e3      	b.n	810e58c <__smakebuf_r+0xc>
 810e5c4:	4b0d      	ldr	r3, [pc, #52]	; (810e5fc <__smakebuf_r+0x7c>)
 810e5c6:	62b3      	str	r3, [r6, #40]	; 0x28
 810e5c8:	89a3      	ldrh	r3, [r4, #12]
 810e5ca:	6020      	str	r0, [r4, #0]
 810e5cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810e5d0:	81a3      	strh	r3, [r4, #12]
 810e5d2:	9b00      	ldr	r3, [sp, #0]
 810e5d4:	6163      	str	r3, [r4, #20]
 810e5d6:	9b01      	ldr	r3, [sp, #4]
 810e5d8:	6120      	str	r0, [r4, #16]
 810e5da:	b15b      	cbz	r3, 810e5f4 <__smakebuf_r+0x74>
 810e5dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810e5e0:	4630      	mov	r0, r6
 810e5e2:	f001 f889 	bl	810f6f8 <_isatty_r>
 810e5e6:	b128      	cbz	r0, 810e5f4 <__smakebuf_r+0x74>
 810e5e8:	89a3      	ldrh	r3, [r4, #12]
 810e5ea:	f023 0303 	bic.w	r3, r3, #3
 810e5ee:	f043 0301 	orr.w	r3, r3, #1
 810e5f2:	81a3      	strh	r3, [r4, #12]
 810e5f4:	89a0      	ldrh	r0, [r4, #12]
 810e5f6:	4305      	orrs	r5, r0
 810e5f8:	81a5      	strh	r5, [r4, #12]
 810e5fa:	e7cd      	b.n	810e598 <__smakebuf_r+0x18>
 810e5fc:	0810dca9 	.word	0x0810dca9

0810e600 <__ascii_mbtowc>:
 810e600:	b082      	sub	sp, #8
 810e602:	b901      	cbnz	r1, 810e606 <__ascii_mbtowc+0x6>
 810e604:	a901      	add	r1, sp, #4
 810e606:	b142      	cbz	r2, 810e61a <__ascii_mbtowc+0x1a>
 810e608:	b14b      	cbz	r3, 810e61e <__ascii_mbtowc+0x1e>
 810e60a:	7813      	ldrb	r3, [r2, #0]
 810e60c:	600b      	str	r3, [r1, #0]
 810e60e:	7812      	ldrb	r2, [r2, #0]
 810e610:	1e10      	subs	r0, r2, #0
 810e612:	bf18      	it	ne
 810e614:	2001      	movne	r0, #1
 810e616:	b002      	add	sp, #8
 810e618:	4770      	bx	lr
 810e61a:	4610      	mov	r0, r2
 810e61c:	e7fb      	b.n	810e616 <__ascii_mbtowc+0x16>
 810e61e:	f06f 0001 	mvn.w	r0, #1
 810e622:	e7f8      	b.n	810e616 <__ascii_mbtowc+0x16>

0810e624 <__malloc_lock>:
 810e624:	4801      	ldr	r0, [pc, #4]	; (810e62c <__malloc_lock+0x8>)
 810e626:	f7ff bf84 	b.w	810e532 <__retarget_lock_acquire_recursive>
 810e62a:	bf00      	nop
 810e62c:	100004b0 	.word	0x100004b0

0810e630 <__malloc_unlock>:
 810e630:	4801      	ldr	r0, [pc, #4]	; (810e638 <__malloc_unlock+0x8>)
 810e632:	f7ff bf7f 	b.w	810e534 <__retarget_lock_release_recursive>
 810e636:	bf00      	nop
 810e638:	100004b0 	.word	0x100004b0

0810e63c <_Balloc>:
 810e63c:	b570      	push	{r4, r5, r6, lr}
 810e63e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810e640:	4604      	mov	r4, r0
 810e642:	460d      	mov	r5, r1
 810e644:	b976      	cbnz	r6, 810e664 <_Balloc+0x28>
 810e646:	2010      	movs	r0, #16
 810e648:	f7fc fc26 	bl	810ae98 <malloc>
 810e64c:	4602      	mov	r2, r0
 810e64e:	6260      	str	r0, [r4, #36]	; 0x24
 810e650:	b920      	cbnz	r0, 810e65c <_Balloc+0x20>
 810e652:	4b18      	ldr	r3, [pc, #96]	; (810e6b4 <_Balloc+0x78>)
 810e654:	4818      	ldr	r0, [pc, #96]	; (810e6b8 <_Balloc+0x7c>)
 810e656:	2166      	movs	r1, #102	; 0x66
 810e658:	f000 fffc 	bl	810f654 <__assert_func>
 810e65c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810e660:	6006      	str	r6, [r0, #0]
 810e662:	60c6      	str	r6, [r0, #12]
 810e664:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810e666:	68f3      	ldr	r3, [r6, #12]
 810e668:	b183      	cbz	r3, 810e68c <_Balloc+0x50>
 810e66a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810e66c:	68db      	ldr	r3, [r3, #12]
 810e66e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810e672:	b9b8      	cbnz	r0, 810e6a4 <_Balloc+0x68>
 810e674:	2101      	movs	r1, #1
 810e676:	fa01 f605 	lsl.w	r6, r1, r5
 810e67a:	1d72      	adds	r2, r6, #5
 810e67c:	0092      	lsls	r2, r2, #2
 810e67e:	4620      	mov	r0, r4
 810e680:	f000 fc9d 	bl	810efbe <_calloc_r>
 810e684:	b160      	cbz	r0, 810e6a0 <_Balloc+0x64>
 810e686:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810e68a:	e00e      	b.n	810e6aa <_Balloc+0x6e>
 810e68c:	2221      	movs	r2, #33	; 0x21
 810e68e:	2104      	movs	r1, #4
 810e690:	4620      	mov	r0, r4
 810e692:	f000 fc94 	bl	810efbe <_calloc_r>
 810e696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810e698:	60f0      	str	r0, [r6, #12]
 810e69a:	68db      	ldr	r3, [r3, #12]
 810e69c:	2b00      	cmp	r3, #0
 810e69e:	d1e4      	bne.n	810e66a <_Balloc+0x2e>
 810e6a0:	2000      	movs	r0, #0
 810e6a2:	bd70      	pop	{r4, r5, r6, pc}
 810e6a4:	6802      	ldr	r2, [r0, #0]
 810e6a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810e6aa:	2300      	movs	r3, #0
 810e6ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810e6b0:	e7f7      	b.n	810e6a2 <_Balloc+0x66>
 810e6b2:	bf00      	nop
 810e6b4:	0810fcd6 	.word	0x0810fcd6
 810e6b8:	0810fe38 	.word	0x0810fe38

0810e6bc <_Bfree>:
 810e6bc:	b570      	push	{r4, r5, r6, lr}
 810e6be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810e6c0:	4605      	mov	r5, r0
 810e6c2:	460c      	mov	r4, r1
 810e6c4:	b976      	cbnz	r6, 810e6e4 <_Bfree+0x28>
 810e6c6:	2010      	movs	r0, #16
 810e6c8:	f7fc fbe6 	bl	810ae98 <malloc>
 810e6cc:	4602      	mov	r2, r0
 810e6ce:	6268      	str	r0, [r5, #36]	; 0x24
 810e6d0:	b920      	cbnz	r0, 810e6dc <_Bfree+0x20>
 810e6d2:	4b09      	ldr	r3, [pc, #36]	; (810e6f8 <_Bfree+0x3c>)
 810e6d4:	4809      	ldr	r0, [pc, #36]	; (810e6fc <_Bfree+0x40>)
 810e6d6:	218a      	movs	r1, #138	; 0x8a
 810e6d8:	f000 ffbc 	bl	810f654 <__assert_func>
 810e6dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810e6e0:	6006      	str	r6, [r0, #0]
 810e6e2:	60c6      	str	r6, [r0, #12]
 810e6e4:	b13c      	cbz	r4, 810e6f6 <_Bfree+0x3a>
 810e6e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810e6e8:	6862      	ldr	r2, [r4, #4]
 810e6ea:	68db      	ldr	r3, [r3, #12]
 810e6ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810e6f0:	6021      	str	r1, [r4, #0]
 810e6f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810e6f6:	bd70      	pop	{r4, r5, r6, pc}
 810e6f8:	0810fcd6 	.word	0x0810fcd6
 810e6fc:	0810fe38 	.word	0x0810fe38

0810e700 <__multadd>:
 810e700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e704:	690d      	ldr	r5, [r1, #16]
 810e706:	4607      	mov	r7, r0
 810e708:	460c      	mov	r4, r1
 810e70a:	461e      	mov	r6, r3
 810e70c:	f101 0c14 	add.w	ip, r1, #20
 810e710:	2000      	movs	r0, #0
 810e712:	f8dc 3000 	ldr.w	r3, [ip]
 810e716:	b299      	uxth	r1, r3
 810e718:	fb02 6101 	mla	r1, r2, r1, r6
 810e71c:	0c1e      	lsrs	r6, r3, #16
 810e71e:	0c0b      	lsrs	r3, r1, #16
 810e720:	fb02 3306 	mla	r3, r2, r6, r3
 810e724:	b289      	uxth	r1, r1
 810e726:	3001      	adds	r0, #1
 810e728:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810e72c:	4285      	cmp	r5, r0
 810e72e:	f84c 1b04 	str.w	r1, [ip], #4
 810e732:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810e736:	dcec      	bgt.n	810e712 <__multadd+0x12>
 810e738:	b30e      	cbz	r6, 810e77e <__multadd+0x7e>
 810e73a:	68a3      	ldr	r3, [r4, #8]
 810e73c:	42ab      	cmp	r3, r5
 810e73e:	dc19      	bgt.n	810e774 <__multadd+0x74>
 810e740:	6861      	ldr	r1, [r4, #4]
 810e742:	4638      	mov	r0, r7
 810e744:	3101      	adds	r1, #1
 810e746:	f7ff ff79 	bl	810e63c <_Balloc>
 810e74a:	4680      	mov	r8, r0
 810e74c:	b928      	cbnz	r0, 810e75a <__multadd+0x5a>
 810e74e:	4602      	mov	r2, r0
 810e750:	4b0c      	ldr	r3, [pc, #48]	; (810e784 <__multadd+0x84>)
 810e752:	480d      	ldr	r0, [pc, #52]	; (810e788 <__multadd+0x88>)
 810e754:	21b5      	movs	r1, #181	; 0xb5
 810e756:	f000 ff7d 	bl	810f654 <__assert_func>
 810e75a:	6922      	ldr	r2, [r4, #16]
 810e75c:	3202      	adds	r2, #2
 810e75e:	f104 010c 	add.w	r1, r4, #12
 810e762:	0092      	lsls	r2, r2, #2
 810e764:	300c      	adds	r0, #12
 810e766:	f7fc fb9f 	bl	810aea8 <memcpy>
 810e76a:	4621      	mov	r1, r4
 810e76c:	4638      	mov	r0, r7
 810e76e:	f7ff ffa5 	bl	810e6bc <_Bfree>
 810e772:	4644      	mov	r4, r8
 810e774:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810e778:	3501      	adds	r5, #1
 810e77a:	615e      	str	r6, [r3, #20]
 810e77c:	6125      	str	r5, [r4, #16]
 810e77e:	4620      	mov	r0, r4
 810e780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e784:	0810fd48 	.word	0x0810fd48
 810e788:	0810fe38 	.word	0x0810fe38

0810e78c <__s2b>:
 810e78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e790:	460c      	mov	r4, r1
 810e792:	4615      	mov	r5, r2
 810e794:	461f      	mov	r7, r3
 810e796:	2209      	movs	r2, #9
 810e798:	3308      	adds	r3, #8
 810e79a:	4606      	mov	r6, r0
 810e79c:	fb93 f3f2 	sdiv	r3, r3, r2
 810e7a0:	2100      	movs	r1, #0
 810e7a2:	2201      	movs	r2, #1
 810e7a4:	429a      	cmp	r2, r3
 810e7a6:	db09      	blt.n	810e7bc <__s2b+0x30>
 810e7a8:	4630      	mov	r0, r6
 810e7aa:	f7ff ff47 	bl	810e63c <_Balloc>
 810e7ae:	b940      	cbnz	r0, 810e7c2 <__s2b+0x36>
 810e7b0:	4602      	mov	r2, r0
 810e7b2:	4b19      	ldr	r3, [pc, #100]	; (810e818 <__s2b+0x8c>)
 810e7b4:	4819      	ldr	r0, [pc, #100]	; (810e81c <__s2b+0x90>)
 810e7b6:	21ce      	movs	r1, #206	; 0xce
 810e7b8:	f000 ff4c 	bl	810f654 <__assert_func>
 810e7bc:	0052      	lsls	r2, r2, #1
 810e7be:	3101      	adds	r1, #1
 810e7c0:	e7f0      	b.n	810e7a4 <__s2b+0x18>
 810e7c2:	9b08      	ldr	r3, [sp, #32]
 810e7c4:	6143      	str	r3, [r0, #20]
 810e7c6:	2d09      	cmp	r5, #9
 810e7c8:	f04f 0301 	mov.w	r3, #1
 810e7cc:	6103      	str	r3, [r0, #16]
 810e7ce:	dd16      	ble.n	810e7fe <__s2b+0x72>
 810e7d0:	f104 0909 	add.w	r9, r4, #9
 810e7d4:	46c8      	mov	r8, r9
 810e7d6:	442c      	add	r4, r5
 810e7d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 810e7dc:	4601      	mov	r1, r0
 810e7de:	3b30      	subs	r3, #48	; 0x30
 810e7e0:	220a      	movs	r2, #10
 810e7e2:	4630      	mov	r0, r6
 810e7e4:	f7ff ff8c 	bl	810e700 <__multadd>
 810e7e8:	45a0      	cmp	r8, r4
 810e7ea:	d1f5      	bne.n	810e7d8 <__s2b+0x4c>
 810e7ec:	f1a5 0408 	sub.w	r4, r5, #8
 810e7f0:	444c      	add	r4, r9
 810e7f2:	1b2d      	subs	r5, r5, r4
 810e7f4:	1963      	adds	r3, r4, r5
 810e7f6:	42bb      	cmp	r3, r7
 810e7f8:	db04      	blt.n	810e804 <__s2b+0x78>
 810e7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e7fe:	340a      	adds	r4, #10
 810e800:	2509      	movs	r5, #9
 810e802:	e7f6      	b.n	810e7f2 <__s2b+0x66>
 810e804:	f814 3b01 	ldrb.w	r3, [r4], #1
 810e808:	4601      	mov	r1, r0
 810e80a:	3b30      	subs	r3, #48	; 0x30
 810e80c:	220a      	movs	r2, #10
 810e80e:	4630      	mov	r0, r6
 810e810:	f7ff ff76 	bl	810e700 <__multadd>
 810e814:	e7ee      	b.n	810e7f4 <__s2b+0x68>
 810e816:	bf00      	nop
 810e818:	0810fd48 	.word	0x0810fd48
 810e81c:	0810fe38 	.word	0x0810fe38

0810e820 <__hi0bits>:
 810e820:	0c03      	lsrs	r3, r0, #16
 810e822:	041b      	lsls	r3, r3, #16
 810e824:	b9d3      	cbnz	r3, 810e85c <__hi0bits+0x3c>
 810e826:	0400      	lsls	r0, r0, #16
 810e828:	2310      	movs	r3, #16
 810e82a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810e82e:	bf04      	itt	eq
 810e830:	0200      	lsleq	r0, r0, #8
 810e832:	3308      	addeq	r3, #8
 810e834:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810e838:	bf04      	itt	eq
 810e83a:	0100      	lsleq	r0, r0, #4
 810e83c:	3304      	addeq	r3, #4
 810e83e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810e842:	bf04      	itt	eq
 810e844:	0080      	lsleq	r0, r0, #2
 810e846:	3302      	addeq	r3, #2
 810e848:	2800      	cmp	r0, #0
 810e84a:	db05      	blt.n	810e858 <__hi0bits+0x38>
 810e84c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810e850:	f103 0301 	add.w	r3, r3, #1
 810e854:	bf08      	it	eq
 810e856:	2320      	moveq	r3, #32
 810e858:	4618      	mov	r0, r3
 810e85a:	4770      	bx	lr
 810e85c:	2300      	movs	r3, #0
 810e85e:	e7e4      	b.n	810e82a <__hi0bits+0xa>

0810e860 <__lo0bits>:
 810e860:	6803      	ldr	r3, [r0, #0]
 810e862:	f013 0207 	ands.w	r2, r3, #7
 810e866:	4601      	mov	r1, r0
 810e868:	d00b      	beq.n	810e882 <__lo0bits+0x22>
 810e86a:	07da      	lsls	r2, r3, #31
 810e86c:	d423      	bmi.n	810e8b6 <__lo0bits+0x56>
 810e86e:	0798      	lsls	r0, r3, #30
 810e870:	bf49      	itett	mi
 810e872:	085b      	lsrmi	r3, r3, #1
 810e874:	089b      	lsrpl	r3, r3, #2
 810e876:	2001      	movmi	r0, #1
 810e878:	600b      	strmi	r3, [r1, #0]
 810e87a:	bf5c      	itt	pl
 810e87c:	600b      	strpl	r3, [r1, #0]
 810e87e:	2002      	movpl	r0, #2
 810e880:	4770      	bx	lr
 810e882:	b298      	uxth	r0, r3
 810e884:	b9a8      	cbnz	r0, 810e8b2 <__lo0bits+0x52>
 810e886:	0c1b      	lsrs	r3, r3, #16
 810e888:	2010      	movs	r0, #16
 810e88a:	b2da      	uxtb	r2, r3
 810e88c:	b90a      	cbnz	r2, 810e892 <__lo0bits+0x32>
 810e88e:	3008      	adds	r0, #8
 810e890:	0a1b      	lsrs	r3, r3, #8
 810e892:	071a      	lsls	r2, r3, #28
 810e894:	bf04      	itt	eq
 810e896:	091b      	lsreq	r3, r3, #4
 810e898:	3004      	addeq	r0, #4
 810e89a:	079a      	lsls	r2, r3, #30
 810e89c:	bf04      	itt	eq
 810e89e:	089b      	lsreq	r3, r3, #2
 810e8a0:	3002      	addeq	r0, #2
 810e8a2:	07da      	lsls	r2, r3, #31
 810e8a4:	d403      	bmi.n	810e8ae <__lo0bits+0x4e>
 810e8a6:	085b      	lsrs	r3, r3, #1
 810e8a8:	f100 0001 	add.w	r0, r0, #1
 810e8ac:	d005      	beq.n	810e8ba <__lo0bits+0x5a>
 810e8ae:	600b      	str	r3, [r1, #0]
 810e8b0:	4770      	bx	lr
 810e8b2:	4610      	mov	r0, r2
 810e8b4:	e7e9      	b.n	810e88a <__lo0bits+0x2a>
 810e8b6:	2000      	movs	r0, #0
 810e8b8:	4770      	bx	lr
 810e8ba:	2020      	movs	r0, #32
 810e8bc:	4770      	bx	lr
	...

0810e8c0 <__i2b>:
 810e8c0:	b510      	push	{r4, lr}
 810e8c2:	460c      	mov	r4, r1
 810e8c4:	2101      	movs	r1, #1
 810e8c6:	f7ff feb9 	bl	810e63c <_Balloc>
 810e8ca:	4602      	mov	r2, r0
 810e8cc:	b928      	cbnz	r0, 810e8da <__i2b+0x1a>
 810e8ce:	4b05      	ldr	r3, [pc, #20]	; (810e8e4 <__i2b+0x24>)
 810e8d0:	4805      	ldr	r0, [pc, #20]	; (810e8e8 <__i2b+0x28>)
 810e8d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810e8d6:	f000 febd 	bl	810f654 <__assert_func>
 810e8da:	2301      	movs	r3, #1
 810e8dc:	6144      	str	r4, [r0, #20]
 810e8de:	6103      	str	r3, [r0, #16]
 810e8e0:	bd10      	pop	{r4, pc}
 810e8e2:	bf00      	nop
 810e8e4:	0810fd48 	.word	0x0810fd48
 810e8e8:	0810fe38 	.word	0x0810fe38

0810e8ec <__multiply>:
 810e8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e8f0:	4691      	mov	r9, r2
 810e8f2:	690a      	ldr	r2, [r1, #16]
 810e8f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810e8f8:	429a      	cmp	r2, r3
 810e8fa:	bfb8      	it	lt
 810e8fc:	460b      	movlt	r3, r1
 810e8fe:	460c      	mov	r4, r1
 810e900:	bfbc      	itt	lt
 810e902:	464c      	movlt	r4, r9
 810e904:	4699      	movlt	r9, r3
 810e906:	6927      	ldr	r7, [r4, #16]
 810e908:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810e90c:	68a3      	ldr	r3, [r4, #8]
 810e90e:	6861      	ldr	r1, [r4, #4]
 810e910:	eb07 060a 	add.w	r6, r7, sl
 810e914:	42b3      	cmp	r3, r6
 810e916:	b085      	sub	sp, #20
 810e918:	bfb8      	it	lt
 810e91a:	3101      	addlt	r1, #1
 810e91c:	f7ff fe8e 	bl	810e63c <_Balloc>
 810e920:	b930      	cbnz	r0, 810e930 <__multiply+0x44>
 810e922:	4602      	mov	r2, r0
 810e924:	4b44      	ldr	r3, [pc, #272]	; (810ea38 <__multiply+0x14c>)
 810e926:	4845      	ldr	r0, [pc, #276]	; (810ea3c <__multiply+0x150>)
 810e928:	f240 115d 	movw	r1, #349	; 0x15d
 810e92c:	f000 fe92 	bl	810f654 <__assert_func>
 810e930:	f100 0514 	add.w	r5, r0, #20
 810e934:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810e938:	462b      	mov	r3, r5
 810e93a:	2200      	movs	r2, #0
 810e93c:	4543      	cmp	r3, r8
 810e93e:	d321      	bcc.n	810e984 <__multiply+0x98>
 810e940:	f104 0314 	add.w	r3, r4, #20
 810e944:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810e948:	f109 0314 	add.w	r3, r9, #20
 810e94c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810e950:	9202      	str	r2, [sp, #8]
 810e952:	1b3a      	subs	r2, r7, r4
 810e954:	3a15      	subs	r2, #21
 810e956:	f022 0203 	bic.w	r2, r2, #3
 810e95a:	3204      	adds	r2, #4
 810e95c:	f104 0115 	add.w	r1, r4, #21
 810e960:	428f      	cmp	r7, r1
 810e962:	bf38      	it	cc
 810e964:	2204      	movcc	r2, #4
 810e966:	9201      	str	r2, [sp, #4]
 810e968:	9a02      	ldr	r2, [sp, #8]
 810e96a:	9303      	str	r3, [sp, #12]
 810e96c:	429a      	cmp	r2, r3
 810e96e:	d80c      	bhi.n	810e98a <__multiply+0x9e>
 810e970:	2e00      	cmp	r6, #0
 810e972:	dd03      	ble.n	810e97c <__multiply+0x90>
 810e974:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810e978:	2b00      	cmp	r3, #0
 810e97a:	d05a      	beq.n	810ea32 <__multiply+0x146>
 810e97c:	6106      	str	r6, [r0, #16]
 810e97e:	b005      	add	sp, #20
 810e980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e984:	f843 2b04 	str.w	r2, [r3], #4
 810e988:	e7d8      	b.n	810e93c <__multiply+0x50>
 810e98a:	f8b3 a000 	ldrh.w	sl, [r3]
 810e98e:	f1ba 0f00 	cmp.w	sl, #0
 810e992:	d024      	beq.n	810e9de <__multiply+0xf2>
 810e994:	f104 0e14 	add.w	lr, r4, #20
 810e998:	46a9      	mov	r9, r5
 810e99a:	f04f 0c00 	mov.w	ip, #0
 810e99e:	f85e 2b04 	ldr.w	r2, [lr], #4
 810e9a2:	f8d9 1000 	ldr.w	r1, [r9]
 810e9a6:	fa1f fb82 	uxth.w	fp, r2
 810e9aa:	b289      	uxth	r1, r1
 810e9ac:	fb0a 110b 	mla	r1, sl, fp, r1
 810e9b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810e9b4:	f8d9 2000 	ldr.w	r2, [r9]
 810e9b8:	4461      	add	r1, ip
 810e9ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810e9be:	fb0a c20b 	mla	r2, sl, fp, ip
 810e9c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810e9c6:	b289      	uxth	r1, r1
 810e9c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810e9cc:	4577      	cmp	r7, lr
 810e9ce:	f849 1b04 	str.w	r1, [r9], #4
 810e9d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810e9d6:	d8e2      	bhi.n	810e99e <__multiply+0xb2>
 810e9d8:	9a01      	ldr	r2, [sp, #4]
 810e9da:	f845 c002 	str.w	ip, [r5, r2]
 810e9de:	9a03      	ldr	r2, [sp, #12]
 810e9e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810e9e4:	3304      	adds	r3, #4
 810e9e6:	f1b9 0f00 	cmp.w	r9, #0
 810e9ea:	d020      	beq.n	810ea2e <__multiply+0x142>
 810e9ec:	6829      	ldr	r1, [r5, #0]
 810e9ee:	f104 0c14 	add.w	ip, r4, #20
 810e9f2:	46ae      	mov	lr, r5
 810e9f4:	f04f 0a00 	mov.w	sl, #0
 810e9f8:	f8bc b000 	ldrh.w	fp, [ip]
 810e9fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810ea00:	fb09 220b 	mla	r2, r9, fp, r2
 810ea04:	4492      	add	sl, r2
 810ea06:	b289      	uxth	r1, r1
 810ea08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 810ea0c:	f84e 1b04 	str.w	r1, [lr], #4
 810ea10:	f85c 2b04 	ldr.w	r2, [ip], #4
 810ea14:	f8be 1000 	ldrh.w	r1, [lr]
 810ea18:	0c12      	lsrs	r2, r2, #16
 810ea1a:	fb09 1102 	mla	r1, r9, r2, r1
 810ea1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 810ea22:	4567      	cmp	r7, ip
 810ea24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810ea28:	d8e6      	bhi.n	810e9f8 <__multiply+0x10c>
 810ea2a:	9a01      	ldr	r2, [sp, #4]
 810ea2c:	50a9      	str	r1, [r5, r2]
 810ea2e:	3504      	adds	r5, #4
 810ea30:	e79a      	b.n	810e968 <__multiply+0x7c>
 810ea32:	3e01      	subs	r6, #1
 810ea34:	e79c      	b.n	810e970 <__multiply+0x84>
 810ea36:	bf00      	nop
 810ea38:	0810fd48 	.word	0x0810fd48
 810ea3c:	0810fe38 	.word	0x0810fe38

0810ea40 <__pow5mult>:
 810ea40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ea44:	4615      	mov	r5, r2
 810ea46:	f012 0203 	ands.w	r2, r2, #3
 810ea4a:	4606      	mov	r6, r0
 810ea4c:	460f      	mov	r7, r1
 810ea4e:	d007      	beq.n	810ea60 <__pow5mult+0x20>
 810ea50:	4c25      	ldr	r4, [pc, #148]	; (810eae8 <__pow5mult+0xa8>)
 810ea52:	3a01      	subs	r2, #1
 810ea54:	2300      	movs	r3, #0
 810ea56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810ea5a:	f7ff fe51 	bl	810e700 <__multadd>
 810ea5e:	4607      	mov	r7, r0
 810ea60:	10ad      	asrs	r5, r5, #2
 810ea62:	d03d      	beq.n	810eae0 <__pow5mult+0xa0>
 810ea64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810ea66:	b97c      	cbnz	r4, 810ea88 <__pow5mult+0x48>
 810ea68:	2010      	movs	r0, #16
 810ea6a:	f7fc fa15 	bl	810ae98 <malloc>
 810ea6e:	4602      	mov	r2, r0
 810ea70:	6270      	str	r0, [r6, #36]	; 0x24
 810ea72:	b928      	cbnz	r0, 810ea80 <__pow5mult+0x40>
 810ea74:	4b1d      	ldr	r3, [pc, #116]	; (810eaec <__pow5mult+0xac>)
 810ea76:	481e      	ldr	r0, [pc, #120]	; (810eaf0 <__pow5mult+0xb0>)
 810ea78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810ea7c:	f000 fdea 	bl	810f654 <__assert_func>
 810ea80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810ea84:	6004      	str	r4, [r0, #0]
 810ea86:	60c4      	str	r4, [r0, #12]
 810ea88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810ea8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810ea90:	b94c      	cbnz	r4, 810eaa6 <__pow5mult+0x66>
 810ea92:	f240 2171 	movw	r1, #625	; 0x271
 810ea96:	4630      	mov	r0, r6
 810ea98:	f7ff ff12 	bl	810e8c0 <__i2b>
 810ea9c:	2300      	movs	r3, #0
 810ea9e:	f8c8 0008 	str.w	r0, [r8, #8]
 810eaa2:	4604      	mov	r4, r0
 810eaa4:	6003      	str	r3, [r0, #0]
 810eaa6:	f04f 0900 	mov.w	r9, #0
 810eaaa:	07eb      	lsls	r3, r5, #31
 810eaac:	d50a      	bpl.n	810eac4 <__pow5mult+0x84>
 810eaae:	4639      	mov	r1, r7
 810eab0:	4622      	mov	r2, r4
 810eab2:	4630      	mov	r0, r6
 810eab4:	f7ff ff1a 	bl	810e8ec <__multiply>
 810eab8:	4639      	mov	r1, r7
 810eaba:	4680      	mov	r8, r0
 810eabc:	4630      	mov	r0, r6
 810eabe:	f7ff fdfd 	bl	810e6bc <_Bfree>
 810eac2:	4647      	mov	r7, r8
 810eac4:	106d      	asrs	r5, r5, #1
 810eac6:	d00b      	beq.n	810eae0 <__pow5mult+0xa0>
 810eac8:	6820      	ldr	r0, [r4, #0]
 810eaca:	b938      	cbnz	r0, 810eadc <__pow5mult+0x9c>
 810eacc:	4622      	mov	r2, r4
 810eace:	4621      	mov	r1, r4
 810ead0:	4630      	mov	r0, r6
 810ead2:	f7ff ff0b 	bl	810e8ec <__multiply>
 810ead6:	6020      	str	r0, [r4, #0]
 810ead8:	f8c0 9000 	str.w	r9, [r0]
 810eadc:	4604      	mov	r4, r0
 810eade:	e7e4      	b.n	810eaaa <__pow5mult+0x6a>
 810eae0:	4638      	mov	r0, r7
 810eae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810eae6:	bf00      	nop
 810eae8:	0810ff88 	.word	0x0810ff88
 810eaec:	0810fcd6 	.word	0x0810fcd6
 810eaf0:	0810fe38 	.word	0x0810fe38

0810eaf4 <__lshift>:
 810eaf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810eaf8:	460c      	mov	r4, r1
 810eafa:	6849      	ldr	r1, [r1, #4]
 810eafc:	6923      	ldr	r3, [r4, #16]
 810eafe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810eb02:	68a3      	ldr	r3, [r4, #8]
 810eb04:	4607      	mov	r7, r0
 810eb06:	4691      	mov	r9, r2
 810eb08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810eb0c:	f108 0601 	add.w	r6, r8, #1
 810eb10:	42b3      	cmp	r3, r6
 810eb12:	db0b      	blt.n	810eb2c <__lshift+0x38>
 810eb14:	4638      	mov	r0, r7
 810eb16:	f7ff fd91 	bl	810e63c <_Balloc>
 810eb1a:	4605      	mov	r5, r0
 810eb1c:	b948      	cbnz	r0, 810eb32 <__lshift+0x3e>
 810eb1e:	4602      	mov	r2, r0
 810eb20:	4b2a      	ldr	r3, [pc, #168]	; (810ebcc <__lshift+0xd8>)
 810eb22:	482b      	ldr	r0, [pc, #172]	; (810ebd0 <__lshift+0xdc>)
 810eb24:	f240 11d9 	movw	r1, #473	; 0x1d9
 810eb28:	f000 fd94 	bl	810f654 <__assert_func>
 810eb2c:	3101      	adds	r1, #1
 810eb2e:	005b      	lsls	r3, r3, #1
 810eb30:	e7ee      	b.n	810eb10 <__lshift+0x1c>
 810eb32:	2300      	movs	r3, #0
 810eb34:	f100 0114 	add.w	r1, r0, #20
 810eb38:	f100 0210 	add.w	r2, r0, #16
 810eb3c:	4618      	mov	r0, r3
 810eb3e:	4553      	cmp	r3, sl
 810eb40:	db37      	blt.n	810ebb2 <__lshift+0xbe>
 810eb42:	6920      	ldr	r0, [r4, #16]
 810eb44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810eb48:	f104 0314 	add.w	r3, r4, #20
 810eb4c:	f019 091f 	ands.w	r9, r9, #31
 810eb50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810eb54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 810eb58:	d02f      	beq.n	810ebba <__lshift+0xc6>
 810eb5a:	f1c9 0e20 	rsb	lr, r9, #32
 810eb5e:	468a      	mov	sl, r1
 810eb60:	f04f 0c00 	mov.w	ip, #0
 810eb64:	681a      	ldr	r2, [r3, #0]
 810eb66:	fa02 f209 	lsl.w	r2, r2, r9
 810eb6a:	ea42 020c 	orr.w	r2, r2, ip
 810eb6e:	f84a 2b04 	str.w	r2, [sl], #4
 810eb72:	f853 2b04 	ldr.w	r2, [r3], #4
 810eb76:	4298      	cmp	r0, r3
 810eb78:	fa22 fc0e 	lsr.w	ip, r2, lr
 810eb7c:	d8f2      	bhi.n	810eb64 <__lshift+0x70>
 810eb7e:	1b03      	subs	r3, r0, r4
 810eb80:	3b15      	subs	r3, #21
 810eb82:	f023 0303 	bic.w	r3, r3, #3
 810eb86:	3304      	adds	r3, #4
 810eb88:	f104 0215 	add.w	r2, r4, #21
 810eb8c:	4290      	cmp	r0, r2
 810eb8e:	bf38      	it	cc
 810eb90:	2304      	movcc	r3, #4
 810eb92:	f841 c003 	str.w	ip, [r1, r3]
 810eb96:	f1bc 0f00 	cmp.w	ip, #0
 810eb9a:	d001      	beq.n	810eba0 <__lshift+0xac>
 810eb9c:	f108 0602 	add.w	r6, r8, #2
 810eba0:	3e01      	subs	r6, #1
 810eba2:	4638      	mov	r0, r7
 810eba4:	612e      	str	r6, [r5, #16]
 810eba6:	4621      	mov	r1, r4
 810eba8:	f7ff fd88 	bl	810e6bc <_Bfree>
 810ebac:	4628      	mov	r0, r5
 810ebae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ebb2:	f842 0f04 	str.w	r0, [r2, #4]!
 810ebb6:	3301      	adds	r3, #1
 810ebb8:	e7c1      	b.n	810eb3e <__lshift+0x4a>
 810ebba:	3904      	subs	r1, #4
 810ebbc:	f853 2b04 	ldr.w	r2, [r3], #4
 810ebc0:	f841 2f04 	str.w	r2, [r1, #4]!
 810ebc4:	4298      	cmp	r0, r3
 810ebc6:	d8f9      	bhi.n	810ebbc <__lshift+0xc8>
 810ebc8:	e7ea      	b.n	810eba0 <__lshift+0xac>
 810ebca:	bf00      	nop
 810ebcc:	0810fd48 	.word	0x0810fd48
 810ebd0:	0810fe38 	.word	0x0810fe38

0810ebd4 <__mcmp>:
 810ebd4:	b530      	push	{r4, r5, lr}
 810ebd6:	6902      	ldr	r2, [r0, #16]
 810ebd8:	690c      	ldr	r4, [r1, #16]
 810ebda:	1b12      	subs	r2, r2, r4
 810ebdc:	d10e      	bne.n	810ebfc <__mcmp+0x28>
 810ebde:	f100 0314 	add.w	r3, r0, #20
 810ebe2:	3114      	adds	r1, #20
 810ebe4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810ebe8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810ebec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810ebf0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810ebf4:	42a5      	cmp	r5, r4
 810ebf6:	d003      	beq.n	810ec00 <__mcmp+0x2c>
 810ebf8:	d305      	bcc.n	810ec06 <__mcmp+0x32>
 810ebfa:	2201      	movs	r2, #1
 810ebfc:	4610      	mov	r0, r2
 810ebfe:	bd30      	pop	{r4, r5, pc}
 810ec00:	4283      	cmp	r3, r0
 810ec02:	d3f3      	bcc.n	810ebec <__mcmp+0x18>
 810ec04:	e7fa      	b.n	810ebfc <__mcmp+0x28>
 810ec06:	f04f 32ff 	mov.w	r2, #4294967295
 810ec0a:	e7f7      	b.n	810ebfc <__mcmp+0x28>

0810ec0c <__mdiff>:
 810ec0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ec10:	460c      	mov	r4, r1
 810ec12:	4606      	mov	r6, r0
 810ec14:	4611      	mov	r1, r2
 810ec16:	4620      	mov	r0, r4
 810ec18:	4690      	mov	r8, r2
 810ec1a:	f7ff ffdb 	bl	810ebd4 <__mcmp>
 810ec1e:	1e05      	subs	r5, r0, #0
 810ec20:	d110      	bne.n	810ec44 <__mdiff+0x38>
 810ec22:	4629      	mov	r1, r5
 810ec24:	4630      	mov	r0, r6
 810ec26:	f7ff fd09 	bl	810e63c <_Balloc>
 810ec2a:	b930      	cbnz	r0, 810ec3a <__mdiff+0x2e>
 810ec2c:	4b3a      	ldr	r3, [pc, #232]	; (810ed18 <__mdiff+0x10c>)
 810ec2e:	4602      	mov	r2, r0
 810ec30:	f240 2132 	movw	r1, #562	; 0x232
 810ec34:	4839      	ldr	r0, [pc, #228]	; (810ed1c <__mdiff+0x110>)
 810ec36:	f000 fd0d 	bl	810f654 <__assert_func>
 810ec3a:	2301      	movs	r3, #1
 810ec3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810ec40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ec44:	bfa4      	itt	ge
 810ec46:	4643      	movge	r3, r8
 810ec48:	46a0      	movge	r8, r4
 810ec4a:	4630      	mov	r0, r6
 810ec4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810ec50:	bfa6      	itte	ge
 810ec52:	461c      	movge	r4, r3
 810ec54:	2500      	movge	r5, #0
 810ec56:	2501      	movlt	r5, #1
 810ec58:	f7ff fcf0 	bl	810e63c <_Balloc>
 810ec5c:	b920      	cbnz	r0, 810ec68 <__mdiff+0x5c>
 810ec5e:	4b2e      	ldr	r3, [pc, #184]	; (810ed18 <__mdiff+0x10c>)
 810ec60:	4602      	mov	r2, r0
 810ec62:	f44f 7110 	mov.w	r1, #576	; 0x240
 810ec66:	e7e5      	b.n	810ec34 <__mdiff+0x28>
 810ec68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810ec6c:	6926      	ldr	r6, [r4, #16]
 810ec6e:	60c5      	str	r5, [r0, #12]
 810ec70:	f104 0914 	add.w	r9, r4, #20
 810ec74:	f108 0514 	add.w	r5, r8, #20
 810ec78:	f100 0e14 	add.w	lr, r0, #20
 810ec7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810ec80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810ec84:	f108 0210 	add.w	r2, r8, #16
 810ec88:	46f2      	mov	sl, lr
 810ec8a:	2100      	movs	r1, #0
 810ec8c:	f859 3b04 	ldr.w	r3, [r9], #4
 810ec90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810ec94:	fa1f f883 	uxth.w	r8, r3
 810ec98:	fa11 f18b 	uxtah	r1, r1, fp
 810ec9c:	0c1b      	lsrs	r3, r3, #16
 810ec9e:	eba1 0808 	sub.w	r8, r1, r8
 810eca2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810eca6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810ecaa:	fa1f f888 	uxth.w	r8, r8
 810ecae:	1419      	asrs	r1, r3, #16
 810ecb0:	454e      	cmp	r6, r9
 810ecb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810ecb6:	f84a 3b04 	str.w	r3, [sl], #4
 810ecba:	d8e7      	bhi.n	810ec8c <__mdiff+0x80>
 810ecbc:	1b33      	subs	r3, r6, r4
 810ecbe:	3b15      	subs	r3, #21
 810ecc0:	f023 0303 	bic.w	r3, r3, #3
 810ecc4:	3304      	adds	r3, #4
 810ecc6:	3415      	adds	r4, #21
 810ecc8:	42a6      	cmp	r6, r4
 810ecca:	bf38      	it	cc
 810eccc:	2304      	movcc	r3, #4
 810ecce:	441d      	add	r5, r3
 810ecd0:	4473      	add	r3, lr
 810ecd2:	469e      	mov	lr, r3
 810ecd4:	462e      	mov	r6, r5
 810ecd6:	4566      	cmp	r6, ip
 810ecd8:	d30e      	bcc.n	810ecf8 <__mdiff+0xec>
 810ecda:	f10c 0203 	add.w	r2, ip, #3
 810ecde:	1b52      	subs	r2, r2, r5
 810ece0:	f022 0203 	bic.w	r2, r2, #3
 810ece4:	3d03      	subs	r5, #3
 810ece6:	45ac      	cmp	ip, r5
 810ece8:	bf38      	it	cc
 810ecea:	2200      	movcc	r2, #0
 810ecec:	441a      	add	r2, r3
 810ecee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810ecf2:	b17b      	cbz	r3, 810ed14 <__mdiff+0x108>
 810ecf4:	6107      	str	r7, [r0, #16]
 810ecf6:	e7a3      	b.n	810ec40 <__mdiff+0x34>
 810ecf8:	f856 8b04 	ldr.w	r8, [r6], #4
 810ecfc:	fa11 f288 	uxtah	r2, r1, r8
 810ed00:	1414      	asrs	r4, r2, #16
 810ed02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810ed06:	b292      	uxth	r2, r2
 810ed08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810ed0c:	f84e 2b04 	str.w	r2, [lr], #4
 810ed10:	1421      	asrs	r1, r4, #16
 810ed12:	e7e0      	b.n	810ecd6 <__mdiff+0xca>
 810ed14:	3f01      	subs	r7, #1
 810ed16:	e7ea      	b.n	810ecee <__mdiff+0xe2>
 810ed18:	0810fd48 	.word	0x0810fd48
 810ed1c:	0810fe38 	.word	0x0810fe38

0810ed20 <__ulp>:
 810ed20:	b082      	sub	sp, #8
 810ed22:	ed8d 0b00 	vstr	d0, [sp]
 810ed26:	9b01      	ldr	r3, [sp, #4]
 810ed28:	4912      	ldr	r1, [pc, #72]	; (810ed74 <__ulp+0x54>)
 810ed2a:	4019      	ands	r1, r3
 810ed2c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810ed30:	2900      	cmp	r1, #0
 810ed32:	dd05      	ble.n	810ed40 <__ulp+0x20>
 810ed34:	2200      	movs	r2, #0
 810ed36:	460b      	mov	r3, r1
 810ed38:	ec43 2b10 	vmov	d0, r2, r3
 810ed3c:	b002      	add	sp, #8
 810ed3e:	4770      	bx	lr
 810ed40:	4249      	negs	r1, r1
 810ed42:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810ed46:	ea4f 5021 	mov.w	r0, r1, asr #20
 810ed4a:	f04f 0200 	mov.w	r2, #0
 810ed4e:	f04f 0300 	mov.w	r3, #0
 810ed52:	da04      	bge.n	810ed5e <__ulp+0x3e>
 810ed54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810ed58:	fa41 f300 	asr.w	r3, r1, r0
 810ed5c:	e7ec      	b.n	810ed38 <__ulp+0x18>
 810ed5e:	f1a0 0114 	sub.w	r1, r0, #20
 810ed62:	291e      	cmp	r1, #30
 810ed64:	bfda      	itte	le
 810ed66:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810ed6a:	fa20 f101 	lsrle.w	r1, r0, r1
 810ed6e:	2101      	movgt	r1, #1
 810ed70:	460a      	mov	r2, r1
 810ed72:	e7e1      	b.n	810ed38 <__ulp+0x18>
 810ed74:	7ff00000 	.word	0x7ff00000

0810ed78 <__b2d>:
 810ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ed7a:	6905      	ldr	r5, [r0, #16]
 810ed7c:	f100 0714 	add.w	r7, r0, #20
 810ed80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810ed84:	1f2e      	subs	r6, r5, #4
 810ed86:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810ed8a:	4620      	mov	r0, r4
 810ed8c:	f7ff fd48 	bl	810e820 <__hi0bits>
 810ed90:	f1c0 0320 	rsb	r3, r0, #32
 810ed94:	280a      	cmp	r0, #10
 810ed96:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810ee14 <__b2d+0x9c>
 810ed9a:	600b      	str	r3, [r1, #0]
 810ed9c:	dc14      	bgt.n	810edc8 <__b2d+0x50>
 810ed9e:	f1c0 0e0b 	rsb	lr, r0, #11
 810eda2:	fa24 f10e 	lsr.w	r1, r4, lr
 810eda6:	42b7      	cmp	r7, r6
 810eda8:	ea41 030c 	orr.w	r3, r1, ip
 810edac:	bf34      	ite	cc
 810edae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810edb2:	2100      	movcs	r1, #0
 810edb4:	3015      	adds	r0, #21
 810edb6:	fa04 f000 	lsl.w	r0, r4, r0
 810edba:	fa21 f10e 	lsr.w	r1, r1, lr
 810edbe:	ea40 0201 	orr.w	r2, r0, r1
 810edc2:	ec43 2b10 	vmov	d0, r2, r3
 810edc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810edc8:	42b7      	cmp	r7, r6
 810edca:	bf3a      	itte	cc
 810edcc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810edd0:	f1a5 0608 	subcc.w	r6, r5, #8
 810edd4:	2100      	movcs	r1, #0
 810edd6:	380b      	subs	r0, #11
 810edd8:	d017      	beq.n	810ee0a <__b2d+0x92>
 810edda:	f1c0 0c20 	rsb	ip, r0, #32
 810edde:	fa04 f500 	lsl.w	r5, r4, r0
 810ede2:	42be      	cmp	r6, r7
 810ede4:	fa21 f40c 	lsr.w	r4, r1, ip
 810ede8:	ea45 0504 	orr.w	r5, r5, r4
 810edec:	bf8c      	ite	hi
 810edee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810edf2:	2400      	movls	r4, #0
 810edf4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810edf8:	fa01 f000 	lsl.w	r0, r1, r0
 810edfc:	fa24 f40c 	lsr.w	r4, r4, ip
 810ee00:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810ee04:	ea40 0204 	orr.w	r2, r0, r4
 810ee08:	e7db      	b.n	810edc2 <__b2d+0x4a>
 810ee0a:	ea44 030c 	orr.w	r3, r4, ip
 810ee0e:	460a      	mov	r2, r1
 810ee10:	e7d7      	b.n	810edc2 <__b2d+0x4a>
 810ee12:	bf00      	nop
 810ee14:	3ff00000 	.word	0x3ff00000

0810ee18 <__d2b>:
 810ee18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810ee1c:	4689      	mov	r9, r1
 810ee1e:	2101      	movs	r1, #1
 810ee20:	ec57 6b10 	vmov	r6, r7, d0
 810ee24:	4690      	mov	r8, r2
 810ee26:	f7ff fc09 	bl	810e63c <_Balloc>
 810ee2a:	4604      	mov	r4, r0
 810ee2c:	b930      	cbnz	r0, 810ee3c <__d2b+0x24>
 810ee2e:	4602      	mov	r2, r0
 810ee30:	4b25      	ldr	r3, [pc, #148]	; (810eec8 <__d2b+0xb0>)
 810ee32:	4826      	ldr	r0, [pc, #152]	; (810eecc <__d2b+0xb4>)
 810ee34:	f240 310a 	movw	r1, #778	; 0x30a
 810ee38:	f000 fc0c 	bl	810f654 <__assert_func>
 810ee3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810ee40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810ee44:	bb35      	cbnz	r5, 810ee94 <__d2b+0x7c>
 810ee46:	2e00      	cmp	r6, #0
 810ee48:	9301      	str	r3, [sp, #4]
 810ee4a:	d028      	beq.n	810ee9e <__d2b+0x86>
 810ee4c:	4668      	mov	r0, sp
 810ee4e:	9600      	str	r6, [sp, #0]
 810ee50:	f7ff fd06 	bl	810e860 <__lo0bits>
 810ee54:	9900      	ldr	r1, [sp, #0]
 810ee56:	b300      	cbz	r0, 810ee9a <__d2b+0x82>
 810ee58:	9a01      	ldr	r2, [sp, #4]
 810ee5a:	f1c0 0320 	rsb	r3, r0, #32
 810ee5e:	fa02 f303 	lsl.w	r3, r2, r3
 810ee62:	430b      	orrs	r3, r1
 810ee64:	40c2      	lsrs	r2, r0
 810ee66:	6163      	str	r3, [r4, #20]
 810ee68:	9201      	str	r2, [sp, #4]
 810ee6a:	9b01      	ldr	r3, [sp, #4]
 810ee6c:	61a3      	str	r3, [r4, #24]
 810ee6e:	2b00      	cmp	r3, #0
 810ee70:	bf14      	ite	ne
 810ee72:	2202      	movne	r2, #2
 810ee74:	2201      	moveq	r2, #1
 810ee76:	6122      	str	r2, [r4, #16]
 810ee78:	b1d5      	cbz	r5, 810eeb0 <__d2b+0x98>
 810ee7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810ee7e:	4405      	add	r5, r0
 810ee80:	f8c9 5000 	str.w	r5, [r9]
 810ee84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810ee88:	f8c8 0000 	str.w	r0, [r8]
 810ee8c:	4620      	mov	r0, r4
 810ee8e:	b003      	add	sp, #12
 810ee90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810ee94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810ee98:	e7d5      	b.n	810ee46 <__d2b+0x2e>
 810ee9a:	6161      	str	r1, [r4, #20]
 810ee9c:	e7e5      	b.n	810ee6a <__d2b+0x52>
 810ee9e:	a801      	add	r0, sp, #4
 810eea0:	f7ff fcde 	bl	810e860 <__lo0bits>
 810eea4:	9b01      	ldr	r3, [sp, #4]
 810eea6:	6163      	str	r3, [r4, #20]
 810eea8:	2201      	movs	r2, #1
 810eeaa:	6122      	str	r2, [r4, #16]
 810eeac:	3020      	adds	r0, #32
 810eeae:	e7e3      	b.n	810ee78 <__d2b+0x60>
 810eeb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810eeb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810eeb8:	f8c9 0000 	str.w	r0, [r9]
 810eebc:	6918      	ldr	r0, [r3, #16]
 810eebe:	f7ff fcaf 	bl	810e820 <__hi0bits>
 810eec2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810eec6:	e7df      	b.n	810ee88 <__d2b+0x70>
 810eec8:	0810fd48 	.word	0x0810fd48
 810eecc:	0810fe38 	.word	0x0810fe38

0810eed0 <__ratio>:
 810eed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810eed4:	4688      	mov	r8, r1
 810eed6:	4669      	mov	r1, sp
 810eed8:	4681      	mov	r9, r0
 810eeda:	f7ff ff4d 	bl	810ed78 <__b2d>
 810eede:	a901      	add	r1, sp, #4
 810eee0:	4640      	mov	r0, r8
 810eee2:	ec55 4b10 	vmov	r4, r5, d0
 810eee6:	f7ff ff47 	bl	810ed78 <__b2d>
 810eeea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810eeee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810eef2:	eba3 0c02 	sub.w	ip, r3, r2
 810eef6:	e9dd 3200 	ldrd	r3, r2, [sp]
 810eefa:	1a9b      	subs	r3, r3, r2
 810eefc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810ef00:	ec51 0b10 	vmov	r0, r1, d0
 810ef04:	2b00      	cmp	r3, #0
 810ef06:	bfd6      	itet	le
 810ef08:	460a      	movle	r2, r1
 810ef0a:	462a      	movgt	r2, r5
 810ef0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810ef10:	468b      	mov	fp, r1
 810ef12:	462f      	mov	r7, r5
 810ef14:	bfd4      	ite	le
 810ef16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810ef1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810ef1e:	4620      	mov	r0, r4
 810ef20:	ee10 2a10 	vmov	r2, s0
 810ef24:	465b      	mov	r3, fp
 810ef26:	4639      	mov	r1, r7
 810ef28:	f7f1 fd18 	bl	810095c <__aeabi_ddiv>
 810ef2c:	ec41 0b10 	vmov	d0, r0, r1
 810ef30:	b003      	add	sp, #12
 810ef32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ef36 <__copybits>:
 810ef36:	3901      	subs	r1, #1
 810ef38:	b570      	push	{r4, r5, r6, lr}
 810ef3a:	1149      	asrs	r1, r1, #5
 810ef3c:	6914      	ldr	r4, [r2, #16]
 810ef3e:	3101      	adds	r1, #1
 810ef40:	f102 0314 	add.w	r3, r2, #20
 810ef44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810ef48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810ef4c:	1f05      	subs	r5, r0, #4
 810ef4e:	42a3      	cmp	r3, r4
 810ef50:	d30c      	bcc.n	810ef6c <__copybits+0x36>
 810ef52:	1aa3      	subs	r3, r4, r2
 810ef54:	3b11      	subs	r3, #17
 810ef56:	f023 0303 	bic.w	r3, r3, #3
 810ef5a:	3211      	adds	r2, #17
 810ef5c:	42a2      	cmp	r2, r4
 810ef5e:	bf88      	it	hi
 810ef60:	2300      	movhi	r3, #0
 810ef62:	4418      	add	r0, r3
 810ef64:	2300      	movs	r3, #0
 810ef66:	4288      	cmp	r0, r1
 810ef68:	d305      	bcc.n	810ef76 <__copybits+0x40>
 810ef6a:	bd70      	pop	{r4, r5, r6, pc}
 810ef6c:	f853 6b04 	ldr.w	r6, [r3], #4
 810ef70:	f845 6f04 	str.w	r6, [r5, #4]!
 810ef74:	e7eb      	b.n	810ef4e <__copybits+0x18>
 810ef76:	f840 3b04 	str.w	r3, [r0], #4
 810ef7a:	e7f4      	b.n	810ef66 <__copybits+0x30>

0810ef7c <__any_on>:
 810ef7c:	f100 0214 	add.w	r2, r0, #20
 810ef80:	6900      	ldr	r0, [r0, #16]
 810ef82:	114b      	asrs	r3, r1, #5
 810ef84:	4298      	cmp	r0, r3
 810ef86:	b510      	push	{r4, lr}
 810ef88:	db11      	blt.n	810efae <__any_on+0x32>
 810ef8a:	dd0a      	ble.n	810efa2 <__any_on+0x26>
 810ef8c:	f011 011f 	ands.w	r1, r1, #31
 810ef90:	d007      	beq.n	810efa2 <__any_on+0x26>
 810ef92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810ef96:	fa24 f001 	lsr.w	r0, r4, r1
 810ef9a:	fa00 f101 	lsl.w	r1, r0, r1
 810ef9e:	428c      	cmp	r4, r1
 810efa0:	d10b      	bne.n	810efba <__any_on+0x3e>
 810efa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810efa6:	4293      	cmp	r3, r2
 810efa8:	d803      	bhi.n	810efb2 <__any_on+0x36>
 810efaa:	2000      	movs	r0, #0
 810efac:	bd10      	pop	{r4, pc}
 810efae:	4603      	mov	r3, r0
 810efb0:	e7f7      	b.n	810efa2 <__any_on+0x26>
 810efb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810efb6:	2900      	cmp	r1, #0
 810efb8:	d0f5      	beq.n	810efa6 <__any_on+0x2a>
 810efba:	2001      	movs	r0, #1
 810efbc:	e7f6      	b.n	810efac <__any_on+0x30>

0810efbe <_calloc_r>:
 810efbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810efc0:	fba1 2402 	umull	r2, r4, r1, r2
 810efc4:	b94c      	cbnz	r4, 810efda <_calloc_r+0x1c>
 810efc6:	4611      	mov	r1, r2
 810efc8:	9201      	str	r2, [sp, #4]
 810efca:	f7fb ffef 	bl	810afac <_malloc_r>
 810efce:	9a01      	ldr	r2, [sp, #4]
 810efd0:	4605      	mov	r5, r0
 810efd2:	b930      	cbnz	r0, 810efe2 <_calloc_r+0x24>
 810efd4:	4628      	mov	r0, r5
 810efd6:	b003      	add	sp, #12
 810efd8:	bd30      	pop	{r4, r5, pc}
 810efda:	220c      	movs	r2, #12
 810efdc:	6002      	str	r2, [r0, #0]
 810efde:	2500      	movs	r5, #0
 810efe0:	e7f8      	b.n	810efd4 <_calloc_r+0x16>
 810efe2:	4621      	mov	r1, r4
 810efe4:	f7fb ff6e 	bl	810aec4 <memset>
 810efe8:	e7f4      	b.n	810efd4 <_calloc_r+0x16>

0810efea <__ssputs_r>:
 810efea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810efee:	688e      	ldr	r6, [r1, #8]
 810eff0:	429e      	cmp	r6, r3
 810eff2:	4682      	mov	sl, r0
 810eff4:	460c      	mov	r4, r1
 810eff6:	4690      	mov	r8, r2
 810eff8:	461f      	mov	r7, r3
 810effa:	d838      	bhi.n	810f06e <__ssputs_r+0x84>
 810effc:	898a      	ldrh	r2, [r1, #12]
 810effe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810f002:	d032      	beq.n	810f06a <__ssputs_r+0x80>
 810f004:	6825      	ldr	r5, [r4, #0]
 810f006:	6909      	ldr	r1, [r1, #16]
 810f008:	eba5 0901 	sub.w	r9, r5, r1
 810f00c:	6965      	ldr	r5, [r4, #20]
 810f00e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810f012:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810f016:	3301      	adds	r3, #1
 810f018:	444b      	add	r3, r9
 810f01a:	106d      	asrs	r5, r5, #1
 810f01c:	429d      	cmp	r5, r3
 810f01e:	bf38      	it	cc
 810f020:	461d      	movcc	r5, r3
 810f022:	0553      	lsls	r3, r2, #21
 810f024:	d531      	bpl.n	810f08a <__ssputs_r+0xa0>
 810f026:	4629      	mov	r1, r5
 810f028:	f7fb ffc0 	bl	810afac <_malloc_r>
 810f02c:	4606      	mov	r6, r0
 810f02e:	b950      	cbnz	r0, 810f046 <__ssputs_r+0x5c>
 810f030:	230c      	movs	r3, #12
 810f032:	f8ca 3000 	str.w	r3, [sl]
 810f036:	89a3      	ldrh	r3, [r4, #12]
 810f038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810f03c:	81a3      	strh	r3, [r4, #12]
 810f03e:	f04f 30ff 	mov.w	r0, #4294967295
 810f042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f046:	6921      	ldr	r1, [r4, #16]
 810f048:	464a      	mov	r2, r9
 810f04a:	f7fb ff2d 	bl	810aea8 <memcpy>
 810f04e:	89a3      	ldrh	r3, [r4, #12]
 810f050:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810f054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810f058:	81a3      	strh	r3, [r4, #12]
 810f05a:	6126      	str	r6, [r4, #16]
 810f05c:	6165      	str	r5, [r4, #20]
 810f05e:	444e      	add	r6, r9
 810f060:	eba5 0509 	sub.w	r5, r5, r9
 810f064:	6026      	str	r6, [r4, #0]
 810f066:	60a5      	str	r5, [r4, #8]
 810f068:	463e      	mov	r6, r7
 810f06a:	42be      	cmp	r6, r7
 810f06c:	d900      	bls.n	810f070 <__ssputs_r+0x86>
 810f06e:	463e      	mov	r6, r7
 810f070:	6820      	ldr	r0, [r4, #0]
 810f072:	4632      	mov	r2, r6
 810f074:	4641      	mov	r1, r8
 810f076:	f000 fb61 	bl	810f73c <memmove>
 810f07a:	68a3      	ldr	r3, [r4, #8]
 810f07c:	1b9b      	subs	r3, r3, r6
 810f07e:	60a3      	str	r3, [r4, #8]
 810f080:	6823      	ldr	r3, [r4, #0]
 810f082:	4433      	add	r3, r6
 810f084:	6023      	str	r3, [r4, #0]
 810f086:	2000      	movs	r0, #0
 810f088:	e7db      	b.n	810f042 <__ssputs_r+0x58>
 810f08a:	462a      	mov	r2, r5
 810f08c:	f000 fb70 	bl	810f770 <_realloc_r>
 810f090:	4606      	mov	r6, r0
 810f092:	2800      	cmp	r0, #0
 810f094:	d1e1      	bne.n	810f05a <__ssputs_r+0x70>
 810f096:	6921      	ldr	r1, [r4, #16]
 810f098:	4650      	mov	r0, sl
 810f09a:	f7fb ff1b 	bl	810aed4 <_free_r>
 810f09e:	e7c7      	b.n	810f030 <__ssputs_r+0x46>

0810f0a0 <_svfiprintf_r>:
 810f0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f0a4:	4698      	mov	r8, r3
 810f0a6:	898b      	ldrh	r3, [r1, #12]
 810f0a8:	061b      	lsls	r3, r3, #24
 810f0aa:	b09d      	sub	sp, #116	; 0x74
 810f0ac:	4607      	mov	r7, r0
 810f0ae:	460d      	mov	r5, r1
 810f0b0:	4614      	mov	r4, r2
 810f0b2:	d50e      	bpl.n	810f0d2 <_svfiprintf_r+0x32>
 810f0b4:	690b      	ldr	r3, [r1, #16]
 810f0b6:	b963      	cbnz	r3, 810f0d2 <_svfiprintf_r+0x32>
 810f0b8:	2140      	movs	r1, #64	; 0x40
 810f0ba:	f7fb ff77 	bl	810afac <_malloc_r>
 810f0be:	6028      	str	r0, [r5, #0]
 810f0c0:	6128      	str	r0, [r5, #16]
 810f0c2:	b920      	cbnz	r0, 810f0ce <_svfiprintf_r+0x2e>
 810f0c4:	230c      	movs	r3, #12
 810f0c6:	603b      	str	r3, [r7, #0]
 810f0c8:	f04f 30ff 	mov.w	r0, #4294967295
 810f0cc:	e0d1      	b.n	810f272 <_svfiprintf_r+0x1d2>
 810f0ce:	2340      	movs	r3, #64	; 0x40
 810f0d0:	616b      	str	r3, [r5, #20]
 810f0d2:	2300      	movs	r3, #0
 810f0d4:	9309      	str	r3, [sp, #36]	; 0x24
 810f0d6:	2320      	movs	r3, #32
 810f0d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810f0dc:	f8cd 800c 	str.w	r8, [sp, #12]
 810f0e0:	2330      	movs	r3, #48	; 0x30
 810f0e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810f28c <_svfiprintf_r+0x1ec>
 810f0e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810f0ea:	f04f 0901 	mov.w	r9, #1
 810f0ee:	4623      	mov	r3, r4
 810f0f0:	469a      	mov	sl, r3
 810f0f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 810f0f6:	b10a      	cbz	r2, 810f0fc <_svfiprintf_r+0x5c>
 810f0f8:	2a25      	cmp	r2, #37	; 0x25
 810f0fa:	d1f9      	bne.n	810f0f0 <_svfiprintf_r+0x50>
 810f0fc:	ebba 0b04 	subs.w	fp, sl, r4
 810f100:	d00b      	beq.n	810f11a <_svfiprintf_r+0x7a>
 810f102:	465b      	mov	r3, fp
 810f104:	4622      	mov	r2, r4
 810f106:	4629      	mov	r1, r5
 810f108:	4638      	mov	r0, r7
 810f10a:	f7ff ff6e 	bl	810efea <__ssputs_r>
 810f10e:	3001      	adds	r0, #1
 810f110:	f000 80aa 	beq.w	810f268 <_svfiprintf_r+0x1c8>
 810f114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810f116:	445a      	add	r2, fp
 810f118:	9209      	str	r2, [sp, #36]	; 0x24
 810f11a:	f89a 3000 	ldrb.w	r3, [sl]
 810f11e:	2b00      	cmp	r3, #0
 810f120:	f000 80a2 	beq.w	810f268 <_svfiprintf_r+0x1c8>
 810f124:	2300      	movs	r3, #0
 810f126:	f04f 32ff 	mov.w	r2, #4294967295
 810f12a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810f12e:	f10a 0a01 	add.w	sl, sl, #1
 810f132:	9304      	str	r3, [sp, #16]
 810f134:	9307      	str	r3, [sp, #28]
 810f136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810f13a:	931a      	str	r3, [sp, #104]	; 0x68
 810f13c:	4654      	mov	r4, sl
 810f13e:	2205      	movs	r2, #5
 810f140:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f144:	4851      	ldr	r0, [pc, #324]	; (810f28c <_svfiprintf_r+0x1ec>)
 810f146:	f7f1 f8d3 	bl	81002f0 <memchr>
 810f14a:	9a04      	ldr	r2, [sp, #16]
 810f14c:	b9d8      	cbnz	r0, 810f186 <_svfiprintf_r+0xe6>
 810f14e:	06d0      	lsls	r0, r2, #27
 810f150:	bf44      	itt	mi
 810f152:	2320      	movmi	r3, #32
 810f154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810f158:	0711      	lsls	r1, r2, #28
 810f15a:	bf44      	itt	mi
 810f15c:	232b      	movmi	r3, #43	; 0x2b
 810f15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810f162:	f89a 3000 	ldrb.w	r3, [sl]
 810f166:	2b2a      	cmp	r3, #42	; 0x2a
 810f168:	d015      	beq.n	810f196 <_svfiprintf_r+0xf6>
 810f16a:	9a07      	ldr	r2, [sp, #28]
 810f16c:	4654      	mov	r4, sl
 810f16e:	2000      	movs	r0, #0
 810f170:	f04f 0c0a 	mov.w	ip, #10
 810f174:	4621      	mov	r1, r4
 810f176:	f811 3b01 	ldrb.w	r3, [r1], #1
 810f17a:	3b30      	subs	r3, #48	; 0x30
 810f17c:	2b09      	cmp	r3, #9
 810f17e:	d94e      	bls.n	810f21e <_svfiprintf_r+0x17e>
 810f180:	b1b0      	cbz	r0, 810f1b0 <_svfiprintf_r+0x110>
 810f182:	9207      	str	r2, [sp, #28]
 810f184:	e014      	b.n	810f1b0 <_svfiprintf_r+0x110>
 810f186:	eba0 0308 	sub.w	r3, r0, r8
 810f18a:	fa09 f303 	lsl.w	r3, r9, r3
 810f18e:	4313      	orrs	r3, r2
 810f190:	9304      	str	r3, [sp, #16]
 810f192:	46a2      	mov	sl, r4
 810f194:	e7d2      	b.n	810f13c <_svfiprintf_r+0x9c>
 810f196:	9b03      	ldr	r3, [sp, #12]
 810f198:	1d19      	adds	r1, r3, #4
 810f19a:	681b      	ldr	r3, [r3, #0]
 810f19c:	9103      	str	r1, [sp, #12]
 810f19e:	2b00      	cmp	r3, #0
 810f1a0:	bfbb      	ittet	lt
 810f1a2:	425b      	neglt	r3, r3
 810f1a4:	f042 0202 	orrlt.w	r2, r2, #2
 810f1a8:	9307      	strge	r3, [sp, #28]
 810f1aa:	9307      	strlt	r3, [sp, #28]
 810f1ac:	bfb8      	it	lt
 810f1ae:	9204      	strlt	r2, [sp, #16]
 810f1b0:	7823      	ldrb	r3, [r4, #0]
 810f1b2:	2b2e      	cmp	r3, #46	; 0x2e
 810f1b4:	d10c      	bne.n	810f1d0 <_svfiprintf_r+0x130>
 810f1b6:	7863      	ldrb	r3, [r4, #1]
 810f1b8:	2b2a      	cmp	r3, #42	; 0x2a
 810f1ba:	d135      	bne.n	810f228 <_svfiprintf_r+0x188>
 810f1bc:	9b03      	ldr	r3, [sp, #12]
 810f1be:	1d1a      	adds	r2, r3, #4
 810f1c0:	681b      	ldr	r3, [r3, #0]
 810f1c2:	9203      	str	r2, [sp, #12]
 810f1c4:	2b00      	cmp	r3, #0
 810f1c6:	bfb8      	it	lt
 810f1c8:	f04f 33ff 	movlt.w	r3, #4294967295
 810f1cc:	3402      	adds	r4, #2
 810f1ce:	9305      	str	r3, [sp, #20]
 810f1d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810f29c <_svfiprintf_r+0x1fc>
 810f1d4:	7821      	ldrb	r1, [r4, #0]
 810f1d6:	2203      	movs	r2, #3
 810f1d8:	4650      	mov	r0, sl
 810f1da:	f7f1 f889 	bl	81002f0 <memchr>
 810f1de:	b140      	cbz	r0, 810f1f2 <_svfiprintf_r+0x152>
 810f1e0:	2340      	movs	r3, #64	; 0x40
 810f1e2:	eba0 000a 	sub.w	r0, r0, sl
 810f1e6:	fa03 f000 	lsl.w	r0, r3, r0
 810f1ea:	9b04      	ldr	r3, [sp, #16]
 810f1ec:	4303      	orrs	r3, r0
 810f1ee:	3401      	adds	r4, #1
 810f1f0:	9304      	str	r3, [sp, #16]
 810f1f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f1f6:	4826      	ldr	r0, [pc, #152]	; (810f290 <_svfiprintf_r+0x1f0>)
 810f1f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810f1fc:	2206      	movs	r2, #6
 810f1fe:	f7f1 f877 	bl	81002f0 <memchr>
 810f202:	2800      	cmp	r0, #0
 810f204:	d038      	beq.n	810f278 <_svfiprintf_r+0x1d8>
 810f206:	4b23      	ldr	r3, [pc, #140]	; (810f294 <_svfiprintf_r+0x1f4>)
 810f208:	bb1b      	cbnz	r3, 810f252 <_svfiprintf_r+0x1b2>
 810f20a:	9b03      	ldr	r3, [sp, #12]
 810f20c:	3307      	adds	r3, #7
 810f20e:	f023 0307 	bic.w	r3, r3, #7
 810f212:	3308      	adds	r3, #8
 810f214:	9303      	str	r3, [sp, #12]
 810f216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f218:	4433      	add	r3, r6
 810f21a:	9309      	str	r3, [sp, #36]	; 0x24
 810f21c:	e767      	b.n	810f0ee <_svfiprintf_r+0x4e>
 810f21e:	fb0c 3202 	mla	r2, ip, r2, r3
 810f222:	460c      	mov	r4, r1
 810f224:	2001      	movs	r0, #1
 810f226:	e7a5      	b.n	810f174 <_svfiprintf_r+0xd4>
 810f228:	2300      	movs	r3, #0
 810f22a:	3401      	adds	r4, #1
 810f22c:	9305      	str	r3, [sp, #20]
 810f22e:	4619      	mov	r1, r3
 810f230:	f04f 0c0a 	mov.w	ip, #10
 810f234:	4620      	mov	r0, r4
 810f236:	f810 2b01 	ldrb.w	r2, [r0], #1
 810f23a:	3a30      	subs	r2, #48	; 0x30
 810f23c:	2a09      	cmp	r2, #9
 810f23e:	d903      	bls.n	810f248 <_svfiprintf_r+0x1a8>
 810f240:	2b00      	cmp	r3, #0
 810f242:	d0c5      	beq.n	810f1d0 <_svfiprintf_r+0x130>
 810f244:	9105      	str	r1, [sp, #20]
 810f246:	e7c3      	b.n	810f1d0 <_svfiprintf_r+0x130>
 810f248:	fb0c 2101 	mla	r1, ip, r1, r2
 810f24c:	4604      	mov	r4, r0
 810f24e:	2301      	movs	r3, #1
 810f250:	e7f0      	b.n	810f234 <_svfiprintf_r+0x194>
 810f252:	ab03      	add	r3, sp, #12
 810f254:	9300      	str	r3, [sp, #0]
 810f256:	462a      	mov	r2, r5
 810f258:	4b0f      	ldr	r3, [pc, #60]	; (810f298 <_svfiprintf_r+0x1f8>)
 810f25a:	a904      	add	r1, sp, #16
 810f25c:	4638      	mov	r0, r7
 810f25e:	f7fb ffb9 	bl	810b1d4 <_printf_float>
 810f262:	1c42      	adds	r2, r0, #1
 810f264:	4606      	mov	r6, r0
 810f266:	d1d6      	bne.n	810f216 <_svfiprintf_r+0x176>
 810f268:	89ab      	ldrh	r3, [r5, #12]
 810f26a:	065b      	lsls	r3, r3, #25
 810f26c:	f53f af2c 	bmi.w	810f0c8 <_svfiprintf_r+0x28>
 810f270:	9809      	ldr	r0, [sp, #36]	; 0x24
 810f272:	b01d      	add	sp, #116	; 0x74
 810f274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f278:	ab03      	add	r3, sp, #12
 810f27a:	9300      	str	r3, [sp, #0]
 810f27c:	462a      	mov	r2, r5
 810f27e:	4b06      	ldr	r3, [pc, #24]	; (810f298 <_svfiprintf_r+0x1f8>)
 810f280:	a904      	add	r1, sp, #16
 810f282:	4638      	mov	r0, r7
 810f284:	f7fc fa4a 	bl	810b71c <_printf_i>
 810f288:	e7eb      	b.n	810f262 <_svfiprintf_r+0x1c2>
 810f28a:	bf00      	nop
 810f28c:	0810ff94 	.word	0x0810ff94
 810f290:	0810ff9e 	.word	0x0810ff9e
 810f294:	0810b1d5 	.word	0x0810b1d5
 810f298:	0810efeb 	.word	0x0810efeb
 810f29c:	0810ff9a 	.word	0x0810ff9a

0810f2a0 <__sfputc_r>:
 810f2a0:	6893      	ldr	r3, [r2, #8]
 810f2a2:	3b01      	subs	r3, #1
 810f2a4:	2b00      	cmp	r3, #0
 810f2a6:	b410      	push	{r4}
 810f2a8:	6093      	str	r3, [r2, #8]
 810f2aa:	da08      	bge.n	810f2be <__sfputc_r+0x1e>
 810f2ac:	6994      	ldr	r4, [r2, #24]
 810f2ae:	42a3      	cmp	r3, r4
 810f2b0:	db01      	blt.n	810f2b6 <__sfputc_r+0x16>
 810f2b2:	290a      	cmp	r1, #10
 810f2b4:	d103      	bne.n	810f2be <__sfputc_r+0x1e>
 810f2b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 810f2ba:	f7fd bcd5 	b.w	810cc68 <__swbuf_r>
 810f2be:	6813      	ldr	r3, [r2, #0]
 810f2c0:	1c58      	adds	r0, r3, #1
 810f2c2:	6010      	str	r0, [r2, #0]
 810f2c4:	7019      	strb	r1, [r3, #0]
 810f2c6:	4608      	mov	r0, r1
 810f2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 810f2cc:	4770      	bx	lr

0810f2ce <__sfputs_r>:
 810f2ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810f2d0:	4606      	mov	r6, r0
 810f2d2:	460f      	mov	r7, r1
 810f2d4:	4614      	mov	r4, r2
 810f2d6:	18d5      	adds	r5, r2, r3
 810f2d8:	42ac      	cmp	r4, r5
 810f2da:	d101      	bne.n	810f2e0 <__sfputs_r+0x12>
 810f2dc:	2000      	movs	r0, #0
 810f2de:	e007      	b.n	810f2f0 <__sfputs_r+0x22>
 810f2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f2e4:	463a      	mov	r2, r7
 810f2e6:	4630      	mov	r0, r6
 810f2e8:	f7ff ffda 	bl	810f2a0 <__sfputc_r>
 810f2ec:	1c43      	adds	r3, r0, #1
 810f2ee:	d1f3      	bne.n	810f2d8 <__sfputs_r+0xa>
 810f2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810f2f4 <_vfiprintf_r>:
 810f2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f2f8:	460d      	mov	r5, r1
 810f2fa:	b09d      	sub	sp, #116	; 0x74
 810f2fc:	4614      	mov	r4, r2
 810f2fe:	4698      	mov	r8, r3
 810f300:	4606      	mov	r6, r0
 810f302:	b118      	cbz	r0, 810f30c <_vfiprintf_r+0x18>
 810f304:	6983      	ldr	r3, [r0, #24]
 810f306:	b90b      	cbnz	r3, 810f30c <_vfiprintf_r+0x18>
 810f308:	f7fe fd02 	bl	810dd10 <__sinit>
 810f30c:	4b89      	ldr	r3, [pc, #548]	; (810f534 <_vfiprintf_r+0x240>)
 810f30e:	429d      	cmp	r5, r3
 810f310:	d11b      	bne.n	810f34a <_vfiprintf_r+0x56>
 810f312:	6875      	ldr	r5, [r6, #4]
 810f314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810f316:	07d9      	lsls	r1, r3, #31
 810f318:	d405      	bmi.n	810f326 <_vfiprintf_r+0x32>
 810f31a:	89ab      	ldrh	r3, [r5, #12]
 810f31c:	059a      	lsls	r2, r3, #22
 810f31e:	d402      	bmi.n	810f326 <_vfiprintf_r+0x32>
 810f320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810f322:	f7ff f906 	bl	810e532 <__retarget_lock_acquire_recursive>
 810f326:	89ab      	ldrh	r3, [r5, #12]
 810f328:	071b      	lsls	r3, r3, #28
 810f32a:	d501      	bpl.n	810f330 <_vfiprintf_r+0x3c>
 810f32c:	692b      	ldr	r3, [r5, #16]
 810f32e:	b9eb      	cbnz	r3, 810f36c <_vfiprintf_r+0x78>
 810f330:	4629      	mov	r1, r5
 810f332:	4630      	mov	r0, r6
 810f334:	f7fd fcea 	bl	810cd0c <__swsetup_r>
 810f338:	b1c0      	cbz	r0, 810f36c <_vfiprintf_r+0x78>
 810f33a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810f33c:	07dc      	lsls	r4, r3, #31
 810f33e:	d50e      	bpl.n	810f35e <_vfiprintf_r+0x6a>
 810f340:	f04f 30ff 	mov.w	r0, #4294967295
 810f344:	b01d      	add	sp, #116	; 0x74
 810f346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f34a:	4b7b      	ldr	r3, [pc, #492]	; (810f538 <_vfiprintf_r+0x244>)
 810f34c:	429d      	cmp	r5, r3
 810f34e:	d101      	bne.n	810f354 <_vfiprintf_r+0x60>
 810f350:	68b5      	ldr	r5, [r6, #8]
 810f352:	e7df      	b.n	810f314 <_vfiprintf_r+0x20>
 810f354:	4b79      	ldr	r3, [pc, #484]	; (810f53c <_vfiprintf_r+0x248>)
 810f356:	429d      	cmp	r5, r3
 810f358:	bf08      	it	eq
 810f35a:	68f5      	ldreq	r5, [r6, #12]
 810f35c:	e7da      	b.n	810f314 <_vfiprintf_r+0x20>
 810f35e:	89ab      	ldrh	r3, [r5, #12]
 810f360:	0598      	lsls	r0, r3, #22
 810f362:	d4ed      	bmi.n	810f340 <_vfiprintf_r+0x4c>
 810f364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810f366:	f7ff f8e5 	bl	810e534 <__retarget_lock_release_recursive>
 810f36a:	e7e9      	b.n	810f340 <_vfiprintf_r+0x4c>
 810f36c:	2300      	movs	r3, #0
 810f36e:	9309      	str	r3, [sp, #36]	; 0x24
 810f370:	2320      	movs	r3, #32
 810f372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810f376:	f8cd 800c 	str.w	r8, [sp, #12]
 810f37a:	2330      	movs	r3, #48	; 0x30
 810f37c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810f540 <_vfiprintf_r+0x24c>
 810f380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810f384:	f04f 0901 	mov.w	r9, #1
 810f388:	4623      	mov	r3, r4
 810f38a:	469a      	mov	sl, r3
 810f38c:	f813 2b01 	ldrb.w	r2, [r3], #1
 810f390:	b10a      	cbz	r2, 810f396 <_vfiprintf_r+0xa2>
 810f392:	2a25      	cmp	r2, #37	; 0x25
 810f394:	d1f9      	bne.n	810f38a <_vfiprintf_r+0x96>
 810f396:	ebba 0b04 	subs.w	fp, sl, r4
 810f39a:	d00b      	beq.n	810f3b4 <_vfiprintf_r+0xc0>
 810f39c:	465b      	mov	r3, fp
 810f39e:	4622      	mov	r2, r4
 810f3a0:	4629      	mov	r1, r5
 810f3a2:	4630      	mov	r0, r6
 810f3a4:	f7ff ff93 	bl	810f2ce <__sfputs_r>
 810f3a8:	3001      	adds	r0, #1
 810f3aa:	f000 80aa 	beq.w	810f502 <_vfiprintf_r+0x20e>
 810f3ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810f3b0:	445a      	add	r2, fp
 810f3b2:	9209      	str	r2, [sp, #36]	; 0x24
 810f3b4:	f89a 3000 	ldrb.w	r3, [sl]
 810f3b8:	2b00      	cmp	r3, #0
 810f3ba:	f000 80a2 	beq.w	810f502 <_vfiprintf_r+0x20e>
 810f3be:	2300      	movs	r3, #0
 810f3c0:	f04f 32ff 	mov.w	r2, #4294967295
 810f3c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810f3c8:	f10a 0a01 	add.w	sl, sl, #1
 810f3cc:	9304      	str	r3, [sp, #16]
 810f3ce:	9307      	str	r3, [sp, #28]
 810f3d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810f3d4:	931a      	str	r3, [sp, #104]	; 0x68
 810f3d6:	4654      	mov	r4, sl
 810f3d8:	2205      	movs	r2, #5
 810f3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f3de:	4858      	ldr	r0, [pc, #352]	; (810f540 <_vfiprintf_r+0x24c>)
 810f3e0:	f7f0 ff86 	bl	81002f0 <memchr>
 810f3e4:	9a04      	ldr	r2, [sp, #16]
 810f3e6:	b9d8      	cbnz	r0, 810f420 <_vfiprintf_r+0x12c>
 810f3e8:	06d1      	lsls	r1, r2, #27
 810f3ea:	bf44      	itt	mi
 810f3ec:	2320      	movmi	r3, #32
 810f3ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810f3f2:	0713      	lsls	r3, r2, #28
 810f3f4:	bf44      	itt	mi
 810f3f6:	232b      	movmi	r3, #43	; 0x2b
 810f3f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810f3fc:	f89a 3000 	ldrb.w	r3, [sl]
 810f400:	2b2a      	cmp	r3, #42	; 0x2a
 810f402:	d015      	beq.n	810f430 <_vfiprintf_r+0x13c>
 810f404:	9a07      	ldr	r2, [sp, #28]
 810f406:	4654      	mov	r4, sl
 810f408:	2000      	movs	r0, #0
 810f40a:	f04f 0c0a 	mov.w	ip, #10
 810f40e:	4621      	mov	r1, r4
 810f410:	f811 3b01 	ldrb.w	r3, [r1], #1
 810f414:	3b30      	subs	r3, #48	; 0x30
 810f416:	2b09      	cmp	r3, #9
 810f418:	d94e      	bls.n	810f4b8 <_vfiprintf_r+0x1c4>
 810f41a:	b1b0      	cbz	r0, 810f44a <_vfiprintf_r+0x156>
 810f41c:	9207      	str	r2, [sp, #28]
 810f41e:	e014      	b.n	810f44a <_vfiprintf_r+0x156>
 810f420:	eba0 0308 	sub.w	r3, r0, r8
 810f424:	fa09 f303 	lsl.w	r3, r9, r3
 810f428:	4313      	orrs	r3, r2
 810f42a:	9304      	str	r3, [sp, #16]
 810f42c:	46a2      	mov	sl, r4
 810f42e:	e7d2      	b.n	810f3d6 <_vfiprintf_r+0xe2>
 810f430:	9b03      	ldr	r3, [sp, #12]
 810f432:	1d19      	adds	r1, r3, #4
 810f434:	681b      	ldr	r3, [r3, #0]
 810f436:	9103      	str	r1, [sp, #12]
 810f438:	2b00      	cmp	r3, #0
 810f43a:	bfbb      	ittet	lt
 810f43c:	425b      	neglt	r3, r3
 810f43e:	f042 0202 	orrlt.w	r2, r2, #2
 810f442:	9307      	strge	r3, [sp, #28]
 810f444:	9307      	strlt	r3, [sp, #28]
 810f446:	bfb8      	it	lt
 810f448:	9204      	strlt	r2, [sp, #16]
 810f44a:	7823      	ldrb	r3, [r4, #0]
 810f44c:	2b2e      	cmp	r3, #46	; 0x2e
 810f44e:	d10c      	bne.n	810f46a <_vfiprintf_r+0x176>
 810f450:	7863      	ldrb	r3, [r4, #1]
 810f452:	2b2a      	cmp	r3, #42	; 0x2a
 810f454:	d135      	bne.n	810f4c2 <_vfiprintf_r+0x1ce>
 810f456:	9b03      	ldr	r3, [sp, #12]
 810f458:	1d1a      	adds	r2, r3, #4
 810f45a:	681b      	ldr	r3, [r3, #0]
 810f45c:	9203      	str	r2, [sp, #12]
 810f45e:	2b00      	cmp	r3, #0
 810f460:	bfb8      	it	lt
 810f462:	f04f 33ff 	movlt.w	r3, #4294967295
 810f466:	3402      	adds	r4, #2
 810f468:	9305      	str	r3, [sp, #20]
 810f46a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810f550 <_vfiprintf_r+0x25c>
 810f46e:	7821      	ldrb	r1, [r4, #0]
 810f470:	2203      	movs	r2, #3
 810f472:	4650      	mov	r0, sl
 810f474:	f7f0 ff3c 	bl	81002f0 <memchr>
 810f478:	b140      	cbz	r0, 810f48c <_vfiprintf_r+0x198>
 810f47a:	2340      	movs	r3, #64	; 0x40
 810f47c:	eba0 000a 	sub.w	r0, r0, sl
 810f480:	fa03 f000 	lsl.w	r0, r3, r0
 810f484:	9b04      	ldr	r3, [sp, #16]
 810f486:	4303      	orrs	r3, r0
 810f488:	3401      	adds	r4, #1
 810f48a:	9304      	str	r3, [sp, #16]
 810f48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f490:	482c      	ldr	r0, [pc, #176]	; (810f544 <_vfiprintf_r+0x250>)
 810f492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810f496:	2206      	movs	r2, #6
 810f498:	f7f0 ff2a 	bl	81002f0 <memchr>
 810f49c:	2800      	cmp	r0, #0
 810f49e:	d03f      	beq.n	810f520 <_vfiprintf_r+0x22c>
 810f4a0:	4b29      	ldr	r3, [pc, #164]	; (810f548 <_vfiprintf_r+0x254>)
 810f4a2:	bb1b      	cbnz	r3, 810f4ec <_vfiprintf_r+0x1f8>
 810f4a4:	9b03      	ldr	r3, [sp, #12]
 810f4a6:	3307      	adds	r3, #7
 810f4a8:	f023 0307 	bic.w	r3, r3, #7
 810f4ac:	3308      	adds	r3, #8
 810f4ae:	9303      	str	r3, [sp, #12]
 810f4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810f4b2:	443b      	add	r3, r7
 810f4b4:	9309      	str	r3, [sp, #36]	; 0x24
 810f4b6:	e767      	b.n	810f388 <_vfiprintf_r+0x94>
 810f4b8:	fb0c 3202 	mla	r2, ip, r2, r3
 810f4bc:	460c      	mov	r4, r1
 810f4be:	2001      	movs	r0, #1
 810f4c0:	e7a5      	b.n	810f40e <_vfiprintf_r+0x11a>
 810f4c2:	2300      	movs	r3, #0
 810f4c4:	3401      	adds	r4, #1
 810f4c6:	9305      	str	r3, [sp, #20]
 810f4c8:	4619      	mov	r1, r3
 810f4ca:	f04f 0c0a 	mov.w	ip, #10
 810f4ce:	4620      	mov	r0, r4
 810f4d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 810f4d4:	3a30      	subs	r2, #48	; 0x30
 810f4d6:	2a09      	cmp	r2, #9
 810f4d8:	d903      	bls.n	810f4e2 <_vfiprintf_r+0x1ee>
 810f4da:	2b00      	cmp	r3, #0
 810f4dc:	d0c5      	beq.n	810f46a <_vfiprintf_r+0x176>
 810f4de:	9105      	str	r1, [sp, #20]
 810f4e0:	e7c3      	b.n	810f46a <_vfiprintf_r+0x176>
 810f4e2:	fb0c 2101 	mla	r1, ip, r1, r2
 810f4e6:	4604      	mov	r4, r0
 810f4e8:	2301      	movs	r3, #1
 810f4ea:	e7f0      	b.n	810f4ce <_vfiprintf_r+0x1da>
 810f4ec:	ab03      	add	r3, sp, #12
 810f4ee:	9300      	str	r3, [sp, #0]
 810f4f0:	462a      	mov	r2, r5
 810f4f2:	4b16      	ldr	r3, [pc, #88]	; (810f54c <_vfiprintf_r+0x258>)
 810f4f4:	a904      	add	r1, sp, #16
 810f4f6:	4630      	mov	r0, r6
 810f4f8:	f7fb fe6c 	bl	810b1d4 <_printf_float>
 810f4fc:	4607      	mov	r7, r0
 810f4fe:	1c78      	adds	r0, r7, #1
 810f500:	d1d6      	bne.n	810f4b0 <_vfiprintf_r+0x1bc>
 810f502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810f504:	07d9      	lsls	r1, r3, #31
 810f506:	d405      	bmi.n	810f514 <_vfiprintf_r+0x220>
 810f508:	89ab      	ldrh	r3, [r5, #12]
 810f50a:	059a      	lsls	r2, r3, #22
 810f50c:	d402      	bmi.n	810f514 <_vfiprintf_r+0x220>
 810f50e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810f510:	f7ff f810 	bl	810e534 <__retarget_lock_release_recursive>
 810f514:	89ab      	ldrh	r3, [r5, #12]
 810f516:	065b      	lsls	r3, r3, #25
 810f518:	f53f af12 	bmi.w	810f340 <_vfiprintf_r+0x4c>
 810f51c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810f51e:	e711      	b.n	810f344 <_vfiprintf_r+0x50>
 810f520:	ab03      	add	r3, sp, #12
 810f522:	9300      	str	r3, [sp, #0]
 810f524:	462a      	mov	r2, r5
 810f526:	4b09      	ldr	r3, [pc, #36]	; (810f54c <_vfiprintf_r+0x258>)
 810f528:	a904      	add	r1, sp, #16
 810f52a:	4630      	mov	r0, r6
 810f52c:	f7fc f8f6 	bl	810b71c <_printf_i>
 810f530:	e7e4      	b.n	810f4fc <_vfiprintf_r+0x208>
 810f532:	bf00      	nop
 810f534:	0810fd7c 	.word	0x0810fd7c
 810f538:	0810fd9c 	.word	0x0810fd9c
 810f53c:	0810fd5c 	.word	0x0810fd5c
 810f540:	0810ff94 	.word	0x0810ff94
 810f544:	0810ff9e 	.word	0x0810ff9e
 810f548:	0810b1d5 	.word	0x0810b1d5
 810f54c:	0810f2cf 	.word	0x0810f2cf
 810f550:	0810ff9a 	.word	0x0810ff9a
 810f554:	00000000 	.word	0x00000000

0810f558 <nan>:
 810f558:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810f560 <nan+0x8>
 810f55c:	4770      	bx	lr
 810f55e:	bf00      	nop
 810f560:	00000000 	.word	0x00000000
 810f564:	7ff80000 	.word	0x7ff80000

0810f568 <__sread>:
 810f568:	b510      	push	{r4, lr}
 810f56a:	460c      	mov	r4, r1
 810f56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f570:	f000 f92e 	bl	810f7d0 <_read_r>
 810f574:	2800      	cmp	r0, #0
 810f576:	bfab      	itete	ge
 810f578:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810f57a:	89a3      	ldrhlt	r3, [r4, #12]
 810f57c:	181b      	addge	r3, r3, r0
 810f57e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810f582:	bfac      	ite	ge
 810f584:	6563      	strge	r3, [r4, #84]	; 0x54
 810f586:	81a3      	strhlt	r3, [r4, #12]
 810f588:	bd10      	pop	{r4, pc}

0810f58a <__swrite>:
 810f58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f58e:	461f      	mov	r7, r3
 810f590:	898b      	ldrh	r3, [r1, #12]
 810f592:	05db      	lsls	r3, r3, #23
 810f594:	4605      	mov	r5, r0
 810f596:	460c      	mov	r4, r1
 810f598:	4616      	mov	r6, r2
 810f59a:	d505      	bpl.n	810f5a8 <__swrite+0x1e>
 810f59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f5a0:	2302      	movs	r3, #2
 810f5a2:	2200      	movs	r2, #0
 810f5a4:	f000 f8b8 	bl	810f718 <_lseek_r>
 810f5a8:	89a3      	ldrh	r3, [r4, #12]
 810f5aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810f5ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810f5b2:	81a3      	strh	r3, [r4, #12]
 810f5b4:	4632      	mov	r2, r6
 810f5b6:	463b      	mov	r3, r7
 810f5b8:	4628      	mov	r0, r5
 810f5ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f5be:	f000 b837 	b.w	810f630 <_write_r>

0810f5c2 <__sseek>:
 810f5c2:	b510      	push	{r4, lr}
 810f5c4:	460c      	mov	r4, r1
 810f5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f5ca:	f000 f8a5 	bl	810f718 <_lseek_r>
 810f5ce:	1c43      	adds	r3, r0, #1
 810f5d0:	89a3      	ldrh	r3, [r4, #12]
 810f5d2:	bf15      	itete	ne
 810f5d4:	6560      	strne	r0, [r4, #84]	; 0x54
 810f5d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810f5da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810f5de:	81a3      	strheq	r3, [r4, #12]
 810f5e0:	bf18      	it	ne
 810f5e2:	81a3      	strhne	r3, [r4, #12]
 810f5e4:	bd10      	pop	{r4, pc}

0810f5e6 <__sclose>:
 810f5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810f5ea:	f000 b851 	b.w	810f690 <_close_r>

0810f5ee <strncmp>:
 810f5ee:	b510      	push	{r4, lr}
 810f5f0:	b17a      	cbz	r2, 810f612 <strncmp+0x24>
 810f5f2:	4603      	mov	r3, r0
 810f5f4:	3901      	subs	r1, #1
 810f5f6:	1884      	adds	r4, r0, r2
 810f5f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 810f5fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810f600:	4290      	cmp	r0, r2
 810f602:	d101      	bne.n	810f608 <strncmp+0x1a>
 810f604:	42a3      	cmp	r3, r4
 810f606:	d101      	bne.n	810f60c <strncmp+0x1e>
 810f608:	1a80      	subs	r0, r0, r2
 810f60a:	bd10      	pop	{r4, pc}
 810f60c:	2800      	cmp	r0, #0
 810f60e:	d1f3      	bne.n	810f5f8 <strncmp+0xa>
 810f610:	e7fa      	b.n	810f608 <strncmp+0x1a>
 810f612:	4610      	mov	r0, r2
 810f614:	e7f9      	b.n	810f60a <strncmp+0x1c>

0810f616 <__ascii_wctomb>:
 810f616:	b149      	cbz	r1, 810f62c <__ascii_wctomb+0x16>
 810f618:	2aff      	cmp	r2, #255	; 0xff
 810f61a:	bf85      	ittet	hi
 810f61c:	238a      	movhi	r3, #138	; 0x8a
 810f61e:	6003      	strhi	r3, [r0, #0]
 810f620:	700a      	strbls	r2, [r1, #0]
 810f622:	f04f 30ff 	movhi.w	r0, #4294967295
 810f626:	bf98      	it	ls
 810f628:	2001      	movls	r0, #1
 810f62a:	4770      	bx	lr
 810f62c:	4608      	mov	r0, r1
 810f62e:	4770      	bx	lr

0810f630 <_write_r>:
 810f630:	b538      	push	{r3, r4, r5, lr}
 810f632:	4d07      	ldr	r5, [pc, #28]	; (810f650 <_write_r+0x20>)
 810f634:	4604      	mov	r4, r0
 810f636:	4608      	mov	r0, r1
 810f638:	4611      	mov	r1, r2
 810f63a:	2200      	movs	r2, #0
 810f63c:	602a      	str	r2, [r5, #0]
 810f63e:	461a      	mov	r2, r3
 810f640:	f7f3 fba5 	bl	8102d8e <_write>
 810f644:	1c43      	adds	r3, r0, #1
 810f646:	d102      	bne.n	810f64e <_write_r+0x1e>
 810f648:	682b      	ldr	r3, [r5, #0]
 810f64a:	b103      	cbz	r3, 810f64e <_write_r+0x1e>
 810f64c:	6023      	str	r3, [r4, #0]
 810f64e:	bd38      	pop	{r3, r4, r5, pc}
 810f650:	100004b4 	.word	0x100004b4

0810f654 <__assert_func>:
 810f654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810f656:	4614      	mov	r4, r2
 810f658:	461a      	mov	r2, r3
 810f65a:	4b09      	ldr	r3, [pc, #36]	; (810f680 <__assert_func+0x2c>)
 810f65c:	681b      	ldr	r3, [r3, #0]
 810f65e:	4605      	mov	r5, r0
 810f660:	68d8      	ldr	r0, [r3, #12]
 810f662:	b14c      	cbz	r4, 810f678 <__assert_func+0x24>
 810f664:	4b07      	ldr	r3, [pc, #28]	; (810f684 <__assert_func+0x30>)
 810f666:	9100      	str	r1, [sp, #0]
 810f668:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810f66c:	4906      	ldr	r1, [pc, #24]	; (810f688 <__assert_func+0x34>)
 810f66e:	462b      	mov	r3, r5
 810f670:	f000 f81e 	bl	810f6b0 <fiprintf>
 810f674:	f000 f8be 	bl	810f7f4 <abort>
 810f678:	4b04      	ldr	r3, [pc, #16]	; (810f68c <__assert_func+0x38>)
 810f67a:	461c      	mov	r4, r3
 810f67c:	e7f3      	b.n	810f666 <__assert_func+0x12>
 810f67e:	bf00      	nop
 810f680:	10000020 	.word	0x10000020
 810f684:	0810ffa5 	.word	0x0810ffa5
 810f688:	0810ffb2 	.word	0x0810ffb2
 810f68c:	0810ffe0 	.word	0x0810ffe0

0810f690 <_close_r>:
 810f690:	b538      	push	{r3, r4, r5, lr}
 810f692:	4d06      	ldr	r5, [pc, #24]	; (810f6ac <_close_r+0x1c>)
 810f694:	2300      	movs	r3, #0
 810f696:	4604      	mov	r4, r0
 810f698:	4608      	mov	r0, r1
 810f69a:	602b      	str	r3, [r5, #0]
 810f69c:	f7f3 fb93 	bl	8102dc6 <_close>
 810f6a0:	1c43      	adds	r3, r0, #1
 810f6a2:	d102      	bne.n	810f6aa <_close_r+0x1a>
 810f6a4:	682b      	ldr	r3, [r5, #0]
 810f6a6:	b103      	cbz	r3, 810f6aa <_close_r+0x1a>
 810f6a8:	6023      	str	r3, [r4, #0]
 810f6aa:	bd38      	pop	{r3, r4, r5, pc}
 810f6ac:	100004b4 	.word	0x100004b4

0810f6b0 <fiprintf>:
 810f6b0:	b40e      	push	{r1, r2, r3}
 810f6b2:	b503      	push	{r0, r1, lr}
 810f6b4:	4601      	mov	r1, r0
 810f6b6:	ab03      	add	r3, sp, #12
 810f6b8:	4805      	ldr	r0, [pc, #20]	; (810f6d0 <fiprintf+0x20>)
 810f6ba:	f853 2b04 	ldr.w	r2, [r3], #4
 810f6be:	6800      	ldr	r0, [r0, #0]
 810f6c0:	9301      	str	r3, [sp, #4]
 810f6c2:	f7ff fe17 	bl	810f2f4 <_vfiprintf_r>
 810f6c6:	b002      	add	sp, #8
 810f6c8:	f85d eb04 	ldr.w	lr, [sp], #4
 810f6cc:	b003      	add	sp, #12
 810f6ce:	4770      	bx	lr
 810f6d0:	10000020 	.word	0x10000020

0810f6d4 <_fstat_r>:
 810f6d4:	b538      	push	{r3, r4, r5, lr}
 810f6d6:	4d07      	ldr	r5, [pc, #28]	; (810f6f4 <_fstat_r+0x20>)
 810f6d8:	2300      	movs	r3, #0
 810f6da:	4604      	mov	r4, r0
 810f6dc:	4608      	mov	r0, r1
 810f6de:	4611      	mov	r1, r2
 810f6e0:	602b      	str	r3, [r5, #0]
 810f6e2:	f7f3 fb7c 	bl	8102dde <_fstat>
 810f6e6:	1c43      	adds	r3, r0, #1
 810f6e8:	d102      	bne.n	810f6f0 <_fstat_r+0x1c>
 810f6ea:	682b      	ldr	r3, [r5, #0]
 810f6ec:	b103      	cbz	r3, 810f6f0 <_fstat_r+0x1c>
 810f6ee:	6023      	str	r3, [r4, #0]
 810f6f0:	bd38      	pop	{r3, r4, r5, pc}
 810f6f2:	bf00      	nop
 810f6f4:	100004b4 	.word	0x100004b4

0810f6f8 <_isatty_r>:
 810f6f8:	b538      	push	{r3, r4, r5, lr}
 810f6fa:	4d06      	ldr	r5, [pc, #24]	; (810f714 <_isatty_r+0x1c>)
 810f6fc:	2300      	movs	r3, #0
 810f6fe:	4604      	mov	r4, r0
 810f700:	4608      	mov	r0, r1
 810f702:	602b      	str	r3, [r5, #0]
 810f704:	f7f3 fb7b 	bl	8102dfe <_isatty>
 810f708:	1c43      	adds	r3, r0, #1
 810f70a:	d102      	bne.n	810f712 <_isatty_r+0x1a>
 810f70c:	682b      	ldr	r3, [r5, #0]
 810f70e:	b103      	cbz	r3, 810f712 <_isatty_r+0x1a>
 810f710:	6023      	str	r3, [r4, #0]
 810f712:	bd38      	pop	{r3, r4, r5, pc}
 810f714:	100004b4 	.word	0x100004b4

0810f718 <_lseek_r>:
 810f718:	b538      	push	{r3, r4, r5, lr}
 810f71a:	4d07      	ldr	r5, [pc, #28]	; (810f738 <_lseek_r+0x20>)
 810f71c:	4604      	mov	r4, r0
 810f71e:	4608      	mov	r0, r1
 810f720:	4611      	mov	r1, r2
 810f722:	2200      	movs	r2, #0
 810f724:	602a      	str	r2, [r5, #0]
 810f726:	461a      	mov	r2, r3
 810f728:	f7f3 fb74 	bl	8102e14 <_lseek>
 810f72c:	1c43      	adds	r3, r0, #1
 810f72e:	d102      	bne.n	810f736 <_lseek_r+0x1e>
 810f730:	682b      	ldr	r3, [r5, #0]
 810f732:	b103      	cbz	r3, 810f736 <_lseek_r+0x1e>
 810f734:	6023      	str	r3, [r4, #0]
 810f736:	bd38      	pop	{r3, r4, r5, pc}
 810f738:	100004b4 	.word	0x100004b4

0810f73c <memmove>:
 810f73c:	4288      	cmp	r0, r1
 810f73e:	b510      	push	{r4, lr}
 810f740:	eb01 0402 	add.w	r4, r1, r2
 810f744:	d902      	bls.n	810f74c <memmove+0x10>
 810f746:	4284      	cmp	r4, r0
 810f748:	4623      	mov	r3, r4
 810f74a:	d807      	bhi.n	810f75c <memmove+0x20>
 810f74c:	1e43      	subs	r3, r0, #1
 810f74e:	42a1      	cmp	r1, r4
 810f750:	d008      	beq.n	810f764 <memmove+0x28>
 810f752:	f811 2b01 	ldrb.w	r2, [r1], #1
 810f756:	f803 2f01 	strb.w	r2, [r3, #1]!
 810f75a:	e7f8      	b.n	810f74e <memmove+0x12>
 810f75c:	4402      	add	r2, r0
 810f75e:	4601      	mov	r1, r0
 810f760:	428a      	cmp	r2, r1
 810f762:	d100      	bne.n	810f766 <memmove+0x2a>
 810f764:	bd10      	pop	{r4, pc}
 810f766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810f76a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810f76e:	e7f7      	b.n	810f760 <memmove+0x24>

0810f770 <_realloc_r>:
 810f770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f774:	4680      	mov	r8, r0
 810f776:	4614      	mov	r4, r2
 810f778:	460e      	mov	r6, r1
 810f77a:	b921      	cbnz	r1, 810f786 <_realloc_r+0x16>
 810f77c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f780:	4611      	mov	r1, r2
 810f782:	f7fb bc13 	b.w	810afac <_malloc_r>
 810f786:	b92a      	cbnz	r2, 810f794 <_realloc_r+0x24>
 810f788:	f7fb fba4 	bl	810aed4 <_free_r>
 810f78c:	4625      	mov	r5, r4
 810f78e:	4628      	mov	r0, r5
 810f790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810f794:	f000 f835 	bl	810f802 <_malloc_usable_size_r>
 810f798:	4284      	cmp	r4, r0
 810f79a:	4607      	mov	r7, r0
 810f79c:	d802      	bhi.n	810f7a4 <_realloc_r+0x34>
 810f79e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810f7a2:	d812      	bhi.n	810f7ca <_realloc_r+0x5a>
 810f7a4:	4621      	mov	r1, r4
 810f7a6:	4640      	mov	r0, r8
 810f7a8:	f7fb fc00 	bl	810afac <_malloc_r>
 810f7ac:	4605      	mov	r5, r0
 810f7ae:	2800      	cmp	r0, #0
 810f7b0:	d0ed      	beq.n	810f78e <_realloc_r+0x1e>
 810f7b2:	42bc      	cmp	r4, r7
 810f7b4:	4622      	mov	r2, r4
 810f7b6:	4631      	mov	r1, r6
 810f7b8:	bf28      	it	cs
 810f7ba:	463a      	movcs	r2, r7
 810f7bc:	f7fb fb74 	bl	810aea8 <memcpy>
 810f7c0:	4631      	mov	r1, r6
 810f7c2:	4640      	mov	r0, r8
 810f7c4:	f7fb fb86 	bl	810aed4 <_free_r>
 810f7c8:	e7e1      	b.n	810f78e <_realloc_r+0x1e>
 810f7ca:	4635      	mov	r5, r6
 810f7cc:	e7df      	b.n	810f78e <_realloc_r+0x1e>
	...

0810f7d0 <_read_r>:
 810f7d0:	b538      	push	{r3, r4, r5, lr}
 810f7d2:	4d07      	ldr	r5, [pc, #28]	; (810f7f0 <_read_r+0x20>)
 810f7d4:	4604      	mov	r4, r0
 810f7d6:	4608      	mov	r0, r1
 810f7d8:	4611      	mov	r1, r2
 810f7da:	2200      	movs	r2, #0
 810f7dc:	602a      	str	r2, [r5, #0]
 810f7de:	461a      	mov	r2, r3
 810f7e0:	f7f3 fab8 	bl	8102d54 <_read>
 810f7e4:	1c43      	adds	r3, r0, #1
 810f7e6:	d102      	bne.n	810f7ee <_read_r+0x1e>
 810f7e8:	682b      	ldr	r3, [r5, #0]
 810f7ea:	b103      	cbz	r3, 810f7ee <_read_r+0x1e>
 810f7ec:	6023      	str	r3, [r4, #0]
 810f7ee:	bd38      	pop	{r3, r4, r5, pc}
 810f7f0:	100004b4 	.word	0x100004b4

0810f7f4 <abort>:
 810f7f4:	b508      	push	{r3, lr}
 810f7f6:	2006      	movs	r0, #6
 810f7f8:	f000 f834 	bl	810f864 <raise>
 810f7fc:	2001      	movs	r0, #1
 810f7fe:	f7f3 fa9f 	bl	8102d40 <_exit>

0810f802 <_malloc_usable_size_r>:
 810f802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810f806:	1f18      	subs	r0, r3, #4
 810f808:	2b00      	cmp	r3, #0
 810f80a:	bfbc      	itt	lt
 810f80c:	580b      	ldrlt	r3, [r1, r0]
 810f80e:	18c0      	addlt	r0, r0, r3
 810f810:	4770      	bx	lr

0810f812 <_raise_r>:
 810f812:	291f      	cmp	r1, #31
 810f814:	b538      	push	{r3, r4, r5, lr}
 810f816:	4604      	mov	r4, r0
 810f818:	460d      	mov	r5, r1
 810f81a:	d904      	bls.n	810f826 <_raise_r+0x14>
 810f81c:	2316      	movs	r3, #22
 810f81e:	6003      	str	r3, [r0, #0]
 810f820:	f04f 30ff 	mov.w	r0, #4294967295
 810f824:	bd38      	pop	{r3, r4, r5, pc}
 810f826:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810f828:	b112      	cbz	r2, 810f830 <_raise_r+0x1e>
 810f82a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810f82e:	b94b      	cbnz	r3, 810f844 <_raise_r+0x32>
 810f830:	4620      	mov	r0, r4
 810f832:	f000 f831 	bl	810f898 <_getpid_r>
 810f836:	462a      	mov	r2, r5
 810f838:	4601      	mov	r1, r0
 810f83a:	4620      	mov	r0, r4
 810f83c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810f840:	f000 b818 	b.w	810f874 <_kill_r>
 810f844:	2b01      	cmp	r3, #1
 810f846:	d00a      	beq.n	810f85e <_raise_r+0x4c>
 810f848:	1c59      	adds	r1, r3, #1
 810f84a:	d103      	bne.n	810f854 <_raise_r+0x42>
 810f84c:	2316      	movs	r3, #22
 810f84e:	6003      	str	r3, [r0, #0]
 810f850:	2001      	movs	r0, #1
 810f852:	e7e7      	b.n	810f824 <_raise_r+0x12>
 810f854:	2400      	movs	r4, #0
 810f856:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810f85a:	4628      	mov	r0, r5
 810f85c:	4798      	blx	r3
 810f85e:	2000      	movs	r0, #0
 810f860:	e7e0      	b.n	810f824 <_raise_r+0x12>
	...

0810f864 <raise>:
 810f864:	4b02      	ldr	r3, [pc, #8]	; (810f870 <raise+0xc>)
 810f866:	4601      	mov	r1, r0
 810f868:	6818      	ldr	r0, [r3, #0]
 810f86a:	f7ff bfd2 	b.w	810f812 <_raise_r>
 810f86e:	bf00      	nop
 810f870:	10000020 	.word	0x10000020

0810f874 <_kill_r>:
 810f874:	b538      	push	{r3, r4, r5, lr}
 810f876:	4d07      	ldr	r5, [pc, #28]	; (810f894 <_kill_r+0x20>)
 810f878:	2300      	movs	r3, #0
 810f87a:	4604      	mov	r4, r0
 810f87c:	4608      	mov	r0, r1
 810f87e:	4611      	mov	r1, r2
 810f880:	602b      	str	r3, [r5, #0]
 810f882:	f7f3 fa4d 	bl	8102d20 <_kill>
 810f886:	1c43      	adds	r3, r0, #1
 810f888:	d102      	bne.n	810f890 <_kill_r+0x1c>
 810f88a:	682b      	ldr	r3, [r5, #0]
 810f88c:	b103      	cbz	r3, 810f890 <_kill_r+0x1c>
 810f88e:	6023      	str	r3, [r4, #0]
 810f890:	bd38      	pop	{r3, r4, r5, pc}
 810f892:	bf00      	nop
 810f894:	100004b4 	.word	0x100004b4

0810f898 <_getpid_r>:
 810f898:	f7f3 ba3a 	b.w	8102d10 <_getpid>

0810f89c <_init>:
 810f89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810f89e:	bf00      	nop
 810f8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810f8a2:	bc08      	pop	{r3}
 810f8a4:	469e      	mov	lr, r3
 810f8a6:	4770      	bx	lr

0810f8a8 <_fini>:
 810f8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810f8aa:	bf00      	nop
 810f8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810f8ae:	bc08      	pop	{r3}
 810f8b0:	469e      	mov	lr, r3
 810f8b2:	4770      	bx	lr
