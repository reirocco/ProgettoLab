
ProvaIMU_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef8  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08104190  08104190  00014190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081041c8  081041c8  000141c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081041d0  081041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  081041d4  081041d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  10000000  081041d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000fc  10000010  081041e8  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  1000010c  081041e8  0002010c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000150da  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000227a  00000000  00000000  0003511a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000df0  00000000  00000000  00037398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d28  00000000  00000000  00038188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003950d  00000000  00000000  00038eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012c7c  00000000  00000000  000723bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017cb75  00000000  00000000  00085039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00201bae  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003a2c  00000000  00000000  00201c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08104178 	.word	0x08104178

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08104178 	.word	0x08104178

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b974 	b.w	81005d8 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	4604      	mov	r4, r0
 8100310:	468e      	mov	lr, r1
 8100312:	2b00      	cmp	r3, #0
 8100314:	d14d      	bne.n	81003b2 <__udivmoddi4+0xaa>
 8100316:	428a      	cmp	r2, r1
 8100318:	4694      	mov	ip, r2
 810031a:	d969      	bls.n	81003f0 <__udivmoddi4+0xe8>
 810031c:	fab2 f282 	clz	r2, r2
 8100320:	b152      	cbz	r2, 8100338 <__udivmoddi4+0x30>
 8100322:	fa01 f302 	lsl.w	r3, r1, r2
 8100326:	f1c2 0120 	rsb	r1, r2, #32
 810032a:	fa20 f101 	lsr.w	r1, r0, r1
 810032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8100332:	ea41 0e03 	orr.w	lr, r1, r3
 8100336:	4094      	lsls	r4, r2
 8100338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 810033c:	0c21      	lsrs	r1, r4, #16
 810033e:	fbbe f6f8 	udiv	r6, lr, r8
 8100342:	fa1f f78c 	uxth.w	r7, ip
 8100346:	fb08 e316 	mls	r3, r8, r6, lr
 810034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 810034e:	fb06 f107 	mul.w	r1, r6, r7
 8100352:	4299      	cmp	r1, r3
 8100354:	d90a      	bls.n	810036c <__udivmoddi4+0x64>
 8100356:	eb1c 0303 	adds.w	r3, ip, r3
 810035a:	f106 30ff 	add.w	r0, r6, #4294967295
 810035e:	f080 811f 	bcs.w	81005a0 <__udivmoddi4+0x298>
 8100362:	4299      	cmp	r1, r3
 8100364:	f240 811c 	bls.w	81005a0 <__udivmoddi4+0x298>
 8100368:	3e02      	subs	r6, #2
 810036a:	4463      	add	r3, ip
 810036c:	1a5b      	subs	r3, r3, r1
 810036e:	b2a4      	uxth	r4, r4
 8100370:	fbb3 f0f8 	udiv	r0, r3, r8
 8100374:	fb08 3310 	mls	r3, r8, r0, r3
 8100378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 810037c:	fb00 f707 	mul.w	r7, r0, r7
 8100380:	42a7      	cmp	r7, r4
 8100382:	d90a      	bls.n	810039a <__udivmoddi4+0x92>
 8100384:	eb1c 0404 	adds.w	r4, ip, r4
 8100388:	f100 33ff 	add.w	r3, r0, #4294967295
 810038c:	f080 810a 	bcs.w	81005a4 <__udivmoddi4+0x29c>
 8100390:	42a7      	cmp	r7, r4
 8100392:	f240 8107 	bls.w	81005a4 <__udivmoddi4+0x29c>
 8100396:	4464      	add	r4, ip
 8100398:	3802      	subs	r0, #2
 810039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 810039e:	1be4      	subs	r4, r4, r7
 81003a0:	2600      	movs	r6, #0
 81003a2:	b11d      	cbz	r5, 81003ac <__udivmoddi4+0xa4>
 81003a4:	40d4      	lsrs	r4, r2
 81003a6:	2300      	movs	r3, #0
 81003a8:	e9c5 4300 	strd	r4, r3, [r5]
 81003ac:	4631      	mov	r1, r6
 81003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003b2:	428b      	cmp	r3, r1
 81003b4:	d909      	bls.n	81003ca <__udivmoddi4+0xc2>
 81003b6:	2d00      	cmp	r5, #0
 81003b8:	f000 80ef 	beq.w	810059a <__udivmoddi4+0x292>
 81003bc:	2600      	movs	r6, #0
 81003be:	e9c5 0100 	strd	r0, r1, [r5]
 81003c2:	4630      	mov	r0, r6
 81003c4:	4631      	mov	r1, r6
 81003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ca:	fab3 f683 	clz	r6, r3
 81003ce:	2e00      	cmp	r6, #0
 81003d0:	d14a      	bne.n	8100468 <__udivmoddi4+0x160>
 81003d2:	428b      	cmp	r3, r1
 81003d4:	d302      	bcc.n	81003dc <__udivmoddi4+0xd4>
 81003d6:	4282      	cmp	r2, r0
 81003d8:	f200 80f9 	bhi.w	81005ce <__udivmoddi4+0x2c6>
 81003dc:	1a84      	subs	r4, r0, r2
 81003de:	eb61 0303 	sbc.w	r3, r1, r3
 81003e2:	2001      	movs	r0, #1
 81003e4:	469e      	mov	lr, r3
 81003e6:	2d00      	cmp	r5, #0
 81003e8:	d0e0      	beq.n	81003ac <__udivmoddi4+0xa4>
 81003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 81003ee:	e7dd      	b.n	81003ac <__udivmoddi4+0xa4>
 81003f0:	b902      	cbnz	r2, 81003f4 <__udivmoddi4+0xec>
 81003f2:	deff      	udf	#255	; 0xff
 81003f4:	fab2 f282 	clz	r2, r2
 81003f8:	2a00      	cmp	r2, #0
 81003fa:	f040 8092 	bne.w	8100522 <__udivmoddi4+0x21a>
 81003fe:	eba1 010c 	sub.w	r1, r1, ip
 8100402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100406:	fa1f fe8c 	uxth.w	lr, ip
 810040a:	2601      	movs	r6, #1
 810040c:	0c20      	lsrs	r0, r4, #16
 810040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8100412:	fb07 1113 	mls	r1, r7, r3, r1
 8100416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 810041a:	fb0e f003 	mul.w	r0, lr, r3
 810041e:	4288      	cmp	r0, r1
 8100420:	d908      	bls.n	8100434 <__udivmoddi4+0x12c>
 8100422:	eb1c 0101 	adds.w	r1, ip, r1
 8100426:	f103 38ff 	add.w	r8, r3, #4294967295
 810042a:	d202      	bcs.n	8100432 <__udivmoddi4+0x12a>
 810042c:	4288      	cmp	r0, r1
 810042e:	f200 80cb 	bhi.w	81005c8 <__udivmoddi4+0x2c0>
 8100432:	4643      	mov	r3, r8
 8100434:	1a09      	subs	r1, r1, r0
 8100436:	b2a4      	uxth	r4, r4
 8100438:	fbb1 f0f7 	udiv	r0, r1, r7
 810043c:	fb07 1110 	mls	r1, r7, r0, r1
 8100440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100444:	fb0e fe00 	mul.w	lr, lr, r0
 8100448:	45a6      	cmp	lr, r4
 810044a:	d908      	bls.n	810045e <__udivmoddi4+0x156>
 810044c:	eb1c 0404 	adds.w	r4, ip, r4
 8100450:	f100 31ff 	add.w	r1, r0, #4294967295
 8100454:	d202      	bcs.n	810045c <__udivmoddi4+0x154>
 8100456:	45a6      	cmp	lr, r4
 8100458:	f200 80bb 	bhi.w	81005d2 <__udivmoddi4+0x2ca>
 810045c:	4608      	mov	r0, r1
 810045e:	eba4 040e 	sub.w	r4, r4, lr
 8100462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100466:	e79c      	b.n	81003a2 <__udivmoddi4+0x9a>
 8100468:	f1c6 0720 	rsb	r7, r6, #32
 810046c:	40b3      	lsls	r3, r6
 810046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8100472:	ea4c 0c03 	orr.w	ip, ip, r3
 8100476:	fa20 f407 	lsr.w	r4, r0, r7
 810047a:	fa01 f306 	lsl.w	r3, r1, r6
 810047e:	431c      	orrs	r4, r3
 8100480:	40f9      	lsrs	r1, r7
 8100482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100486:	fa00 f306 	lsl.w	r3, r0, r6
 810048a:	fbb1 f8f9 	udiv	r8, r1, r9
 810048e:	0c20      	lsrs	r0, r4, #16
 8100490:	fa1f fe8c 	uxth.w	lr, ip
 8100494:	fb09 1118 	mls	r1, r9, r8, r1
 8100498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 810049c:	fb08 f00e 	mul.w	r0, r8, lr
 81004a0:	4288      	cmp	r0, r1
 81004a2:	fa02 f206 	lsl.w	r2, r2, r6
 81004a6:	d90b      	bls.n	81004c0 <__udivmoddi4+0x1b8>
 81004a8:	eb1c 0101 	adds.w	r1, ip, r1
 81004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 81004b0:	f080 8088 	bcs.w	81005c4 <__udivmoddi4+0x2bc>
 81004b4:	4288      	cmp	r0, r1
 81004b6:	f240 8085 	bls.w	81005c4 <__udivmoddi4+0x2bc>
 81004ba:	f1a8 0802 	sub.w	r8, r8, #2
 81004be:	4461      	add	r1, ip
 81004c0:	1a09      	subs	r1, r1, r0
 81004c2:	b2a4      	uxth	r4, r4
 81004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 81004c8:	fb09 1110 	mls	r1, r9, r0, r1
 81004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 81004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 81004d4:	458e      	cmp	lr, r1
 81004d6:	d908      	bls.n	81004ea <__udivmoddi4+0x1e2>
 81004d8:	eb1c 0101 	adds.w	r1, ip, r1
 81004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 81004e0:	d26c      	bcs.n	81005bc <__udivmoddi4+0x2b4>
 81004e2:	458e      	cmp	lr, r1
 81004e4:	d96a      	bls.n	81005bc <__udivmoddi4+0x2b4>
 81004e6:	3802      	subs	r0, #2
 81004e8:	4461      	add	r1, ip
 81004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 81004ee:	fba0 9402 	umull	r9, r4, r0, r2
 81004f2:	eba1 010e 	sub.w	r1, r1, lr
 81004f6:	42a1      	cmp	r1, r4
 81004f8:	46c8      	mov	r8, r9
 81004fa:	46a6      	mov	lr, r4
 81004fc:	d356      	bcc.n	81005ac <__udivmoddi4+0x2a4>
 81004fe:	d053      	beq.n	81005a8 <__udivmoddi4+0x2a0>
 8100500:	b15d      	cbz	r5, 810051a <__udivmoddi4+0x212>
 8100502:	ebb3 0208 	subs.w	r2, r3, r8
 8100506:	eb61 010e 	sbc.w	r1, r1, lr
 810050a:	fa01 f707 	lsl.w	r7, r1, r7
 810050e:	fa22 f306 	lsr.w	r3, r2, r6
 8100512:	40f1      	lsrs	r1, r6
 8100514:	431f      	orrs	r7, r3
 8100516:	e9c5 7100 	strd	r7, r1, [r5]
 810051a:	2600      	movs	r6, #0
 810051c:	4631      	mov	r1, r6
 810051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100522:	f1c2 0320 	rsb	r3, r2, #32
 8100526:	40d8      	lsrs	r0, r3
 8100528:	fa0c fc02 	lsl.w	ip, ip, r2
 810052c:	fa21 f303 	lsr.w	r3, r1, r3
 8100530:	4091      	lsls	r1, r2
 8100532:	4301      	orrs	r1, r0
 8100534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100538:	fa1f fe8c 	uxth.w	lr, ip
 810053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8100540:	fb07 3610 	mls	r6, r7, r0, r3
 8100544:	0c0b      	lsrs	r3, r1, #16
 8100546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 810054a:	fb00 f60e 	mul.w	r6, r0, lr
 810054e:	429e      	cmp	r6, r3
 8100550:	fa04 f402 	lsl.w	r4, r4, r2
 8100554:	d908      	bls.n	8100568 <__udivmoddi4+0x260>
 8100556:	eb1c 0303 	adds.w	r3, ip, r3
 810055a:	f100 38ff 	add.w	r8, r0, #4294967295
 810055e:	d22f      	bcs.n	81005c0 <__udivmoddi4+0x2b8>
 8100560:	429e      	cmp	r6, r3
 8100562:	d92d      	bls.n	81005c0 <__udivmoddi4+0x2b8>
 8100564:	3802      	subs	r0, #2
 8100566:	4463      	add	r3, ip
 8100568:	1b9b      	subs	r3, r3, r6
 810056a:	b289      	uxth	r1, r1
 810056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8100570:	fb07 3316 	mls	r3, r7, r6, r3
 8100574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100578:	fb06 f30e 	mul.w	r3, r6, lr
 810057c:	428b      	cmp	r3, r1
 810057e:	d908      	bls.n	8100592 <__udivmoddi4+0x28a>
 8100580:	eb1c 0101 	adds.w	r1, ip, r1
 8100584:	f106 38ff 	add.w	r8, r6, #4294967295
 8100588:	d216      	bcs.n	81005b8 <__udivmoddi4+0x2b0>
 810058a:	428b      	cmp	r3, r1
 810058c:	d914      	bls.n	81005b8 <__udivmoddi4+0x2b0>
 810058e:	3e02      	subs	r6, #2
 8100590:	4461      	add	r1, ip
 8100592:	1ac9      	subs	r1, r1, r3
 8100594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100598:	e738      	b.n	810040c <__udivmoddi4+0x104>
 810059a:	462e      	mov	r6, r5
 810059c:	4628      	mov	r0, r5
 810059e:	e705      	b.n	81003ac <__udivmoddi4+0xa4>
 81005a0:	4606      	mov	r6, r0
 81005a2:	e6e3      	b.n	810036c <__udivmoddi4+0x64>
 81005a4:	4618      	mov	r0, r3
 81005a6:	e6f8      	b.n	810039a <__udivmoddi4+0x92>
 81005a8:	454b      	cmp	r3, r9
 81005aa:	d2a9      	bcs.n	8100500 <__udivmoddi4+0x1f8>
 81005ac:	ebb9 0802 	subs.w	r8, r9, r2
 81005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 81005b4:	3801      	subs	r0, #1
 81005b6:	e7a3      	b.n	8100500 <__udivmoddi4+0x1f8>
 81005b8:	4646      	mov	r6, r8
 81005ba:	e7ea      	b.n	8100592 <__udivmoddi4+0x28a>
 81005bc:	4620      	mov	r0, r4
 81005be:	e794      	b.n	81004ea <__udivmoddi4+0x1e2>
 81005c0:	4640      	mov	r0, r8
 81005c2:	e7d1      	b.n	8100568 <__udivmoddi4+0x260>
 81005c4:	46d0      	mov	r8, sl
 81005c6:	e77b      	b.n	81004c0 <__udivmoddi4+0x1b8>
 81005c8:	3b02      	subs	r3, #2
 81005ca:	4461      	add	r1, ip
 81005cc:	e732      	b.n	8100434 <__udivmoddi4+0x12c>
 81005ce:	4630      	mov	r0, r6
 81005d0:	e709      	b.n	81003e6 <__udivmoddi4+0xde>
 81005d2:	4464      	add	r4, ip
 81005d4:	3802      	subs	r0, #2
 81005d6:	e742      	b.n	810045e <__udivmoddi4+0x156>

081005d8 <__aeabi_idiv0>:
 81005d8:	4770      	bx	lr
 81005da:	bf00      	nop

081005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005dc:	b480      	push	{r7}
 81005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005e0:	4b09      	ldr	r3, [pc, #36]	; (8100608 <SystemInit+0x2c>)
 81005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005e6:	4a08      	ldr	r2, [pc, #32]	; (8100608 <SystemInit+0x2c>)
 81005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005f0:	4b05      	ldr	r3, [pc, #20]	; (8100608 <SystemInit+0x2c>)
 81005f2:	691b      	ldr	r3, [r3, #16]
 81005f4:	4a04      	ldr	r2, [pc, #16]	; (8100608 <SystemInit+0x2c>)
 81005f6:	f043 0310 	orr.w	r3, r3, #16
 81005fa:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81005fc:	bf00      	nop
 81005fe:	46bd      	mov	sp, r7
 8100600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100604:	4770      	bx	lr
 8100606:	bf00      	nop
 8100608:	e000ed00 	.word	0xe000ed00

0810060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810060c:	b580      	push	{r7, lr}
 810060e:	b082      	sub	sp, #8
 8100610:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100612:	4b1d      	ldr	r3, [pc, #116]	; (8100688 <main+0x7c>)
 8100614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100618:	4a1b      	ldr	r2, [pc, #108]	; (8100688 <main+0x7c>)
 810061a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810061e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100622:	4b19      	ldr	r3, [pc, #100]	; (8100688 <main+0x7c>)
 8100624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810062c:	607b      	str	r3, [r7, #4]
 810062e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100630:	2001      	movs	r0, #1
 8100632:	f000 fe05 	bl	8101240 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100636:	f000 ffb5 	bl	81015a4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810063a:	2201      	movs	r2, #1
 810063c:	2102      	movs	r1, #2
 810063e:	2000      	movs	r0, #0
 8100640:	f000 ff36 	bl	81014b0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100644:	4b11      	ldr	r3, [pc, #68]	; (810068c <main+0x80>)
 8100646:	681b      	ldr	r3, [r3, #0]
 8100648:	091b      	lsrs	r3, r3, #4
 810064a:	f003 030f 	and.w	r3, r3, #15
 810064e:	2b07      	cmp	r3, #7
 8100650:	d108      	bne.n	8100664 <main+0x58>
 8100652:	4b0f      	ldr	r3, [pc, #60]	; (8100690 <main+0x84>)
 8100654:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100658:	4a0d      	ldr	r2, [pc, #52]	; (8100690 <main+0x84>)
 810065a:	f043 0301 	orr.w	r3, r3, #1
 810065e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100662:	e007      	b.n	8100674 <main+0x68>
 8100664:	4b0a      	ldr	r3, [pc, #40]	; (8100690 <main+0x84>)
 8100666:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810066a:	4a09      	ldr	r2, [pc, #36]	; (8100690 <main+0x84>)
 810066c:	f043 0301 	orr.w	r3, r3, #1
 8100670:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100674:	f000 fa36 	bl	8100ae4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100678:	f000 f898 	bl	81007ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 810067c:	f000 f84a 	bl	8100714 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8100680:	f000 f808 	bl	8100694 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100684:	e7fe      	b.n	8100684 <main+0x78>
 8100686:	bf00      	nop
 8100688:	58024400 	.word	0x58024400
 810068c:	e000ed00 	.word	0xe000ed00
 8100690:	58026400 	.word	0x58026400

08100694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8100694:	b580      	push	{r7, lr}
 8100696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8100698:	4b1b      	ldr	r3, [pc, #108]	; (8100708 <MX_I2C1_Init+0x74>)
 810069a:	4a1c      	ldr	r2, [pc, #112]	; (810070c <MX_I2C1_Init+0x78>)
 810069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 810069e:	4b1a      	ldr	r3, [pc, #104]	; (8100708 <MX_I2C1_Init+0x74>)
 81006a0:	4a1b      	ldr	r2, [pc, #108]	; (8100710 <MX_I2C1_Init+0x7c>)
 81006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81006a4:	4b18      	ldr	r3, [pc, #96]	; (8100708 <MX_I2C1_Init+0x74>)
 81006a6:	2200      	movs	r2, #0
 81006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81006aa:	4b17      	ldr	r3, [pc, #92]	; (8100708 <MX_I2C1_Init+0x74>)
 81006ac:	2201      	movs	r2, #1
 81006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81006b0:	4b15      	ldr	r3, [pc, #84]	; (8100708 <MX_I2C1_Init+0x74>)
 81006b2:	2200      	movs	r2, #0
 81006b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81006b6:	4b14      	ldr	r3, [pc, #80]	; (8100708 <MX_I2C1_Init+0x74>)
 81006b8:	2200      	movs	r2, #0
 81006ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81006bc:	4b12      	ldr	r3, [pc, #72]	; (8100708 <MX_I2C1_Init+0x74>)
 81006be:	2200      	movs	r2, #0
 81006c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81006c2:	4b11      	ldr	r3, [pc, #68]	; (8100708 <MX_I2C1_Init+0x74>)
 81006c4:	2200      	movs	r2, #0
 81006c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81006c8:	4b0f      	ldr	r3, [pc, #60]	; (8100708 <MX_I2C1_Init+0x74>)
 81006ca:	2200      	movs	r2, #0
 81006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81006ce:	480e      	ldr	r0, [pc, #56]	; (8100708 <MX_I2C1_Init+0x74>)
 81006d0:	f000 fdc8 	bl	8101264 <HAL_I2C_Init>
 81006d4:	4603      	mov	r3, r0
 81006d6:	2b00      	cmp	r3, #0
 81006d8:	d001      	beq.n	81006de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81006da:	f000 f8bd 	bl	8100858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81006de:	2100      	movs	r1, #0
 81006e0:	4809      	ldr	r0, [pc, #36]	; (8100708 <MX_I2C1_Init+0x74>)
 81006e2:	f000 fe4e 	bl	8101382 <HAL_I2CEx_ConfigAnalogFilter>
 81006e6:	4603      	mov	r3, r0
 81006e8:	2b00      	cmp	r3, #0
 81006ea:	d001      	beq.n	81006f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 81006ec:	f000 f8b4 	bl	8100858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81006f0:	2100      	movs	r1, #0
 81006f2:	4805      	ldr	r0, [pc, #20]	; (8100708 <MX_I2C1_Init+0x74>)
 81006f4:	f000 fe90 	bl	8101418 <HAL_I2CEx_ConfigDigitalFilter>
 81006f8:	4603      	mov	r3, r0
 81006fa:	2b00      	cmp	r3, #0
 81006fc:	d001      	beq.n	8100702 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81006fe:	f000 f8ab 	bl	8100858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8100702:	bf00      	nop
 8100704:	bd80      	pop	{r7, pc}
 8100706:	bf00      	nop
 8100708:	1000002c 	.word	0x1000002c
 810070c:	40005400 	.word	0x40005400
 8100710:	307075b1 	.word	0x307075b1

08100714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8100714:	b580      	push	{r7, lr}
 8100716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100718:	4b22      	ldr	r3, [pc, #136]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 810071a:	4a23      	ldr	r2, [pc, #140]	; (81007a8 <MX_USART3_UART_Init+0x94>)
 810071c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810071e:	4b21      	ldr	r3, [pc, #132]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 8100720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100726:	4b1f      	ldr	r3, [pc, #124]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 8100728:	2200      	movs	r2, #0
 810072a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810072c:	4b1d      	ldr	r3, [pc, #116]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 810072e:	2200      	movs	r2, #0
 8100730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100732:	4b1c      	ldr	r3, [pc, #112]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 8100734:	2200      	movs	r2, #0
 8100736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100738:	4b1a      	ldr	r3, [pc, #104]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 810073a:	220c      	movs	r2, #12
 810073c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810073e:	4b19      	ldr	r3, [pc, #100]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 8100740:	2200      	movs	r2, #0
 8100742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100744:	4b17      	ldr	r3, [pc, #92]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 8100746:	2200      	movs	r2, #0
 8100748:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810074a:	4b16      	ldr	r3, [pc, #88]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 810074c:	2200      	movs	r2, #0
 810074e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100750:	4b14      	ldr	r3, [pc, #80]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 8100752:	2200      	movs	r2, #0
 8100754:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100756:	4b13      	ldr	r3, [pc, #76]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 8100758:	2200      	movs	r2, #0
 810075a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 810075c:	4811      	ldr	r0, [pc, #68]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 810075e:	f002 fc6f 	bl	8103040 <HAL_UART_Init>
 8100762:	4603      	mov	r3, r0
 8100764:	2b00      	cmp	r3, #0
 8100766:	d001      	beq.n	810076c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100768:	f000 f876 	bl	8100858 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810076c:	2100      	movs	r1, #0
 810076e:	480d      	ldr	r0, [pc, #52]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 8100770:	f003 fc0c 	bl	8103f8c <HAL_UARTEx_SetTxFifoThreshold>
 8100774:	4603      	mov	r3, r0
 8100776:	2b00      	cmp	r3, #0
 8100778:	d001      	beq.n	810077e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810077a:	f000 f86d 	bl	8100858 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810077e:	2100      	movs	r1, #0
 8100780:	4808      	ldr	r0, [pc, #32]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 8100782:	f003 fc41 	bl	8104008 <HAL_UARTEx_SetRxFifoThreshold>
 8100786:	4603      	mov	r3, r0
 8100788:	2b00      	cmp	r3, #0
 810078a:	d001      	beq.n	8100790 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 810078c:	f000 f864 	bl	8100858 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100790:	4804      	ldr	r0, [pc, #16]	; (81007a4 <MX_USART3_UART_Init+0x90>)
 8100792:	f003 fbc2 	bl	8103f1a <HAL_UARTEx_DisableFifoMode>
 8100796:	4603      	mov	r3, r0
 8100798:	2b00      	cmp	r3, #0
 810079a:	d001      	beq.n	81007a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 810079c:	f000 f85c 	bl	8100858 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81007a0:	bf00      	nop
 81007a2:	bd80      	pop	{r7, pc}
 81007a4:	10000078 	.word	0x10000078
 81007a8:	40004800 	.word	0x40004800

081007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81007ac:	b580      	push	{r7, lr}
 81007ae:	b088      	sub	sp, #32
 81007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81007b2:	f107 030c 	add.w	r3, r7, #12
 81007b6:	2200      	movs	r2, #0
 81007b8:	601a      	str	r2, [r3, #0]
 81007ba:	605a      	str	r2, [r3, #4]
 81007bc:	609a      	str	r2, [r3, #8]
 81007be:	60da      	str	r2, [r3, #12]
 81007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81007c2:	4b23      	ldr	r3, [pc, #140]	; (8100850 <MX_GPIO_Init+0xa4>)
 81007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007c8:	4a21      	ldr	r2, [pc, #132]	; (8100850 <MX_GPIO_Init+0xa4>)
 81007ca:	f043 0310 	orr.w	r3, r3, #16
 81007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007d2:	4b1f      	ldr	r3, [pc, #124]	; (8100850 <MX_GPIO_Init+0xa4>)
 81007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007d8:	f003 0310 	and.w	r3, r3, #16
 81007dc:	60bb      	str	r3, [r7, #8]
 81007de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81007e0:	4b1b      	ldr	r3, [pc, #108]	; (8100850 <MX_GPIO_Init+0xa4>)
 81007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007e6:	4a1a      	ldr	r2, [pc, #104]	; (8100850 <MX_GPIO_Init+0xa4>)
 81007e8:	f043 0308 	orr.w	r3, r3, #8
 81007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007f0:	4b17      	ldr	r3, [pc, #92]	; (8100850 <MX_GPIO_Init+0xa4>)
 81007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007f6:	f003 0308 	and.w	r3, r3, #8
 81007fa:	607b      	str	r3, [r7, #4]
 81007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81007fe:	4b14      	ldr	r3, [pc, #80]	; (8100850 <MX_GPIO_Init+0xa4>)
 8100800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100804:	4a12      	ldr	r2, [pc, #72]	; (8100850 <MX_GPIO_Init+0xa4>)
 8100806:	f043 0302 	orr.w	r3, r3, #2
 810080a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810080e:	4b10      	ldr	r3, [pc, #64]	; (8100850 <MX_GPIO_Init+0xa4>)
 8100810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100814:	f003 0302 	and.w	r3, r3, #2
 8100818:	603b      	str	r3, [r7, #0]
 810081a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 810081c:	2308      	movs	r3, #8
 810081e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8100820:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8100824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100826:	2300      	movs	r3, #0
 8100828:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810082a:	f107 030c 	add.w	r3, r7, #12
 810082e:	4619      	mov	r1, r3
 8100830:	4808      	ldr	r0, [pc, #32]	; (8100854 <MX_GPIO_Init+0xa8>)
 8100832:	f000 fb2f 	bl	8100e94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8100836:	2200      	movs	r2, #0
 8100838:	2100      	movs	r1, #0
 810083a:	2009      	movs	r0, #9
 810083c:	f000 fae1 	bl	8100e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8100840:	2009      	movs	r0, #9
 8100842:	f000 faf8 	bl	8100e36 <HAL_NVIC_EnableIRQ>

}
 8100846:	bf00      	nop
 8100848:	3720      	adds	r7, #32
 810084a:	46bd      	mov	sp, r7
 810084c:	bd80      	pop	{r7, pc}
 810084e:	bf00      	nop
 8100850:	58024400 	.word	0x58024400
 8100854:	58021000 	.word	0x58021000

08100858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100858:	b480      	push	{r7}
 810085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810085c:	b672      	cpsid	i
}
 810085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100860:	e7fe      	b.n	8100860 <Error_Handler+0x8>
	...

08100864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100864:	b480      	push	{r7}
 8100866:	b083      	sub	sp, #12
 8100868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810086a:	4b0a      	ldr	r3, [pc, #40]	; (8100894 <HAL_MspInit+0x30>)
 810086c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100870:	4a08      	ldr	r2, [pc, #32]	; (8100894 <HAL_MspInit+0x30>)
 8100872:	f043 0302 	orr.w	r3, r3, #2
 8100876:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810087a:	4b06      	ldr	r3, [pc, #24]	; (8100894 <HAL_MspInit+0x30>)
 810087c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100880:	f003 0302 	and.w	r3, r3, #2
 8100884:	607b      	str	r3, [r7, #4]
 8100886:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100888:	bf00      	nop
 810088a:	370c      	adds	r7, #12
 810088c:	46bd      	mov	sp, r7
 810088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100892:	4770      	bx	lr
 8100894:	58024400 	.word	0x58024400

08100898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8100898:	b580      	push	{r7, lr}
 810089a:	b0b8      	sub	sp, #224	; 0xe0
 810089c:	af00      	add	r7, sp, #0
 810089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81008a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81008a4:	2200      	movs	r2, #0
 81008a6:	601a      	str	r2, [r3, #0]
 81008a8:	605a      	str	r2, [r3, #4]
 81008aa:	609a      	str	r2, [r3, #8]
 81008ac:	60da      	str	r2, [r3, #12]
 81008ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81008b0:	f107 0310 	add.w	r3, r7, #16
 81008b4:	22bc      	movs	r2, #188	; 0xbc
 81008b6:	2100      	movs	r1, #0
 81008b8:	4618      	mov	r0, r3
 81008ba:	f003 fc55 	bl	8104168 <memset>
  if(hi2c->Instance==I2C1)
 81008be:	687b      	ldr	r3, [r7, #4]
 81008c0:	681b      	ldr	r3, [r3, #0]
 81008c2:	4a24      	ldr	r2, [pc, #144]	; (8100954 <HAL_I2C_MspInit+0xbc>)
 81008c4:	4293      	cmp	r3, r2
 81008c6:	d141      	bne.n	810094c <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 81008c8:	2308      	movs	r3, #8
 81008ca:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81008cc:	2300      	movs	r3, #0
 81008ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81008d2:	f107 0310 	add.w	r3, r7, #16
 81008d6:	4618      	mov	r0, r3
 81008d8:	f001 f84a 	bl	8101970 <HAL_RCCEx_PeriphCLKConfig>
 81008dc:	4603      	mov	r3, r0
 81008de:	2b00      	cmp	r3, #0
 81008e0:	d001      	beq.n	81008e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 81008e2:	f7ff ffb9 	bl	8100858 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81008e6:	4b1c      	ldr	r3, [pc, #112]	; (8100958 <HAL_I2C_MspInit+0xc0>)
 81008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008ec:	4a1a      	ldr	r2, [pc, #104]	; (8100958 <HAL_I2C_MspInit+0xc0>)
 81008ee:	f043 0302 	orr.w	r3, r3, #2
 81008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008f6:	4b18      	ldr	r3, [pc, #96]	; (8100958 <HAL_I2C_MspInit+0xc0>)
 81008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008fc:	f003 0302 	and.w	r3, r3, #2
 8100900:	60fb      	str	r3, [r7, #12]
 8100902:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8100904:	23c0      	movs	r3, #192	; 0xc0
 8100906:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810090a:	2312      	movs	r3, #18
 810090c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100910:	2300      	movs	r3, #0
 8100912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100916:	2300      	movs	r3, #0
 8100918:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 810091c:	2304      	movs	r3, #4
 810091e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100922:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100926:	4619      	mov	r1, r3
 8100928:	480c      	ldr	r0, [pc, #48]	; (810095c <HAL_I2C_MspInit+0xc4>)
 810092a:	f000 fab3 	bl	8100e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 810092e:	4b0a      	ldr	r3, [pc, #40]	; (8100958 <HAL_I2C_MspInit+0xc0>)
 8100930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100934:	4a08      	ldr	r2, [pc, #32]	; (8100958 <HAL_I2C_MspInit+0xc0>)
 8100936:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810093a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810093e:	4b06      	ldr	r3, [pc, #24]	; (8100958 <HAL_I2C_MspInit+0xc0>)
 8100940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100948:	60bb      	str	r3, [r7, #8]
 810094a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 810094c:	bf00      	nop
 810094e:	37e0      	adds	r7, #224	; 0xe0
 8100950:	46bd      	mov	sp, r7
 8100952:	bd80      	pop	{r7, pc}
 8100954:	40005400 	.word	0x40005400
 8100958:	58024400 	.word	0x58024400
 810095c:	58020400 	.word	0x58020400

08100960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8100960:	b580      	push	{r7, lr}
 8100962:	b0b8      	sub	sp, #224	; 0xe0
 8100964:	af00      	add	r7, sp, #0
 8100966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100968:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810096c:	2200      	movs	r2, #0
 810096e:	601a      	str	r2, [r3, #0]
 8100970:	605a      	str	r2, [r3, #4]
 8100972:	609a      	str	r2, [r3, #8]
 8100974:	60da      	str	r2, [r3, #12]
 8100976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100978:	f107 0310 	add.w	r3, r7, #16
 810097c:	22bc      	movs	r2, #188	; 0xbc
 810097e:	2100      	movs	r1, #0
 8100980:	4618      	mov	r0, r3
 8100982:	f003 fbf1 	bl	8104168 <memset>
  if(huart->Instance==USART3)
 8100986:	687b      	ldr	r3, [r7, #4]
 8100988:	681b      	ldr	r3, [r3, #0]
 810098a:	4a25      	ldr	r2, [pc, #148]	; (8100a20 <HAL_UART_MspInit+0xc0>)
 810098c:	4293      	cmp	r3, r2
 810098e:	d142      	bne.n	8100a16 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100990:	2302      	movs	r3, #2
 8100992:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100994:	2300      	movs	r3, #0
 8100996:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810099a:	f107 0310 	add.w	r3, r7, #16
 810099e:	4618      	mov	r0, r3
 81009a0:	f000 ffe6 	bl	8101970 <HAL_RCCEx_PeriphCLKConfig>
 81009a4:	4603      	mov	r3, r0
 81009a6:	2b00      	cmp	r3, #0
 81009a8:	d001      	beq.n	81009ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 81009aa:	f7ff ff55 	bl	8100858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 81009ae:	4b1d      	ldr	r3, [pc, #116]	; (8100a24 <HAL_UART_MspInit+0xc4>)
 81009b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81009b4:	4a1b      	ldr	r2, [pc, #108]	; (8100a24 <HAL_UART_MspInit+0xc4>)
 81009b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81009ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81009be:	4b19      	ldr	r3, [pc, #100]	; (8100a24 <HAL_UART_MspInit+0xc4>)
 81009c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81009c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81009c8:	60fb      	str	r3, [r7, #12]
 81009ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81009cc:	4b15      	ldr	r3, [pc, #84]	; (8100a24 <HAL_UART_MspInit+0xc4>)
 81009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81009d2:	4a14      	ldr	r2, [pc, #80]	; (8100a24 <HAL_UART_MspInit+0xc4>)
 81009d4:	f043 0308 	orr.w	r3, r3, #8
 81009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81009dc:	4b11      	ldr	r3, [pc, #68]	; (8100a24 <HAL_UART_MspInit+0xc4>)
 81009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81009e2:	f003 0308 	and.w	r3, r3, #8
 81009e6:	60bb      	str	r3, [r7, #8]
 81009e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 81009ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 81009ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81009f2:	2302      	movs	r3, #2
 81009f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81009f8:	2300      	movs	r3, #0
 81009fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81009fe:	2300      	movs	r3, #0
 8100a00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8100a04:	2307      	movs	r3, #7
 8100a06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100a0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100a0e:	4619      	mov	r1, r3
 8100a10:	4805      	ldr	r0, [pc, #20]	; (8100a28 <HAL_UART_MspInit+0xc8>)
 8100a12:	f000 fa3f 	bl	8100e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8100a16:	bf00      	nop
 8100a18:	37e0      	adds	r7, #224	; 0xe0
 8100a1a:	46bd      	mov	sp, r7
 8100a1c:	bd80      	pop	{r7, pc}
 8100a1e:	bf00      	nop
 8100a20:	40004800 	.word	0x40004800
 8100a24:	58024400 	.word	0x58024400
 8100a28:	58020c00 	.word	0x58020c00

08100a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100a2c:	b480      	push	{r7}
 8100a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100a30:	e7fe      	b.n	8100a30 <NMI_Handler+0x4>

08100a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100a32:	b480      	push	{r7}
 8100a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100a36:	e7fe      	b.n	8100a36 <HardFault_Handler+0x4>

08100a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100a38:	b480      	push	{r7}
 8100a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100a3c:	e7fe      	b.n	8100a3c <MemManage_Handler+0x4>

08100a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100a3e:	b480      	push	{r7}
 8100a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100a42:	e7fe      	b.n	8100a42 <BusFault_Handler+0x4>

08100a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100a44:	b480      	push	{r7}
 8100a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100a48:	e7fe      	b.n	8100a48 <UsageFault_Handler+0x4>

08100a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100a4a:	b480      	push	{r7}
 8100a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100a4e:	bf00      	nop
 8100a50:	46bd      	mov	sp, r7
 8100a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a56:	4770      	bx	lr

08100a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100a58:	b480      	push	{r7}
 8100a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100a5c:	bf00      	nop
 8100a5e:	46bd      	mov	sp, r7
 8100a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a64:	4770      	bx	lr

08100a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100a66:	b480      	push	{r7}
 8100a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100a6a:	bf00      	nop
 8100a6c:	46bd      	mov	sp, r7
 8100a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a72:	4770      	bx	lr

08100a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100a74:	b580      	push	{r7, lr}
 8100a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100a78:	f000 f8c8 	bl	8100c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100a7c:	bf00      	nop
 8100a7e:	bd80      	pop	{r7, pc}

08100a80 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8100a80:	b580      	push	{r7, lr}
 8100a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8100a84:	2008      	movs	r0, #8
 8100a86:	f000 fbb5 	bl	81011f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8100a8a:	bf00      	nop
 8100a8c:	bd80      	pop	{r7, pc}
	...

08100a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100ac8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100a94:	f7ff fda2 	bl	81005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100a98:	480c      	ldr	r0, [pc, #48]	; (8100acc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100a9a:	490d      	ldr	r1, [pc, #52]	; (8100ad0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100a9c:	4a0d      	ldr	r2, [pc, #52]	; (8100ad4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100aa0:	e002      	b.n	8100aa8 <LoopCopyDataInit>

08100aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100aa6:	3304      	adds	r3, #4

08100aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100aac:	d3f9      	bcc.n	8100aa2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100aae:	4a0a      	ldr	r2, [pc, #40]	; (8100ad8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100ab0:	4c0a      	ldr	r4, [pc, #40]	; (8100adc <LoopFillZerobss+0x22>)
  movs r3, #0
 8100ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100ab4:	e001      	b.n	8100aba <LoopFillZerobss>

08100ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100ab8:	3204      	adds	r2, #4

08100aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100abc:	d3fb      	bcc.n	8100ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100abe:	f003 fb2f 	bl	8104120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100ac2:	f7ff fda3 	bl	810060c <main>
  bx  lr
 8100ac6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100ac8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100acc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100ad0:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100ad4:	081041d8 	.word	0x081041d8
  ldr r2, =_sbss
 8100ad8:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100adc:	1000010c 	.word	0x1000010c

08100ae0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100ae0:	e7fe      	b.n	8100ae0 <ADC3_IRQHandler>
	...

08100ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100ae4:	b580      	push	{r7, lr}
 8100ae6:	b082      	sub	sp, #8
 8100ae8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100aea:	4b28      	ldr	r3, [pc, #160]	; (8100b8c <HAL_Init+0xa8>)
 8100aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100af0:	4a26      	ldr	r2, [pc, #152]	; (8100b8c <HAL_Init+0xa8>)
 8100af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100af6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100afa:	4b24      	ldr	r3, [pc, #144]	; (8100b8c <HAL_Init+0xa8>)
 8100afc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100b04:	603b      	str	r3, [r7, #0]
 8100b06:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100b08:	4b21      	ldr	r3, [pc, #132]	; (8100b90 <HAL_Init+0xac>)
 8100b0a:	681b      	ldr	r3, [r3, #0]
 8100b0c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100b10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100b14:	4a1e      	ldr	r2, [pc, #120]	; (8100b90 <HAL_Init+0xac>)
 8100b16:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100b1a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100b1c:	4b1c      	ldr	r3, [pc, #112]	; (8100b90 <HAL_Init+0xac>)
 8100b1e:	681b      	ldr	r3, [r3, #0]
 8100b20:	4a1b      	ldr	r2, [pc, #108]	; (8100b90 <HAL_Init+0xac>)
 8100b22:	f043 0301 	orr.w	r3, r3, #1
 8100b26:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100b28:	2003      	movs	r0, #3
 8100b2a:	f000 f95f 	bl	8100dec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100b2e:	f000 fd47 	bl	81015c0 <HAL_RCC_GetSysClockFreq>
 8100b32:	4602      	mov	r2, r0
 8100b34:	4b15      	ldr	r3, [pc, #84]	; (8100b8c <HAL_Init+0xa8>)
 8100b36:	699b      	ldr	r3, [r3, #24]
 8100b38:	0a1b      	lsrs	r3, r3, #8
 8100b3a:	f003 030f 	and.w	r3, r3, #15
 8100b3e:	4915      	ldr	r1, [pc, #84]	; (8100b94 <HAL_Init+0xb0>)
 8100b40:	5ccb      	ldrb	r3, [r1, r3]
 8100b42:	f003 031f 	and.w	r3, r3, #31
 8100b46:	fa22 f303 	lsr.w	r3, r2, r3
 8100b4a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100b4c:	4b0f      	ldr	r3, [pc, #60]	; (8100b8c <HAL_Init+0xa8>)
 8100b4e:	699b      	ldr	r3, [r3, #24]
 8100b50:	f003 030f 	and.w	r3, r3, #15
 8100b54:	4a0f      	ldr	r2, [pc, #60]	; (8100b94 <HAL_Init+0xb0>)
 8100b56:	5cd3      	ldrb	r3, [r2, r3]
 8100b58:	f003 031f 	and.w	r3, r3, #31
 8100b5c:	687a      	ldr	r2, [r7, #4]
 8100b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8100b62:	4a0d      	ldr	r2, [pc, #52]	; (8100b98 <HAL_Init+0xb4>)
 8100b64:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100b66:	4b0c      	ldr	r3, [pc, #48]	; (8100b98 <HAL_Init+0xb4>)
 8100b68:	681b      	ldr	r3, [r3, #0]
 8100b6a:	4a0c      	ldr	r2, [pc, #48]	; (8100b9c <HAL_Init+0xb8>)
 8100b6c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100b6e:	2000      	movs	r0, #0
 8100b70:	f000 f816 	bl	8100ba0 <HAL_InitTick>
 8100b74:	4603      	mov	r3, r0
 8100b76:	2b00      	cmp	r3, #0
 8100b78:	d001      	beq.n	8100b7e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100b7a:	2301      	movs	r3, #1
 8100b7c:	e002      	b.n	8100b84 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100b7e:	f7ff fe71 	bl	8100864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100b82:	2300      	movs	r3, #0
}
 8100b84:	4618      	mov	r0, r3
 8100b86:	3708      	adds	r7, #8
 8100b88:	46bd      	mov	sp, r7
 8100b8a:	bd80      	pop	{r7, pc}
 8100b8c:	58024400 	.word	0x58024400
 8100b90:	40024400 	.word	0x40024400
 8100b94:	08104190 	.word	0x08104190
 8100b98:	10000004 	.word	0x10000004
 8100b9c:	10000000 	.word	0x10000000

08100ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100ba0:	b580      	push	{r7, lr}
 8100ba2:	b082      	sub	sp, #8
 8100ba4:	af00      	add	r7, sp, #0
 8100ba6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100ba8:	4b15      	ldr	r3, [pc, #84]	; (8100c00 <HAL_InitTick+0x60>)
 8100baa:	781b      	ldrb	r3, [r3, #0]
 8100bac:	2b00      	cmp	r3, #0
 8100bae:	d101      	bne.n	8100bb4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100bb0:	2301      	movs	r3, #1
 8100bb2:	e021      	b.n	8100bf8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100bb4:	4b13      	ldr	r3, [pc, #76]	; (8100c04 <HAL_InitTick+0x64>)
 8100bb6:	681a      	ldr	r2, [r3, #0]
 8100bb8:	4b11      	ldr	r3, [pc, #68]	; (8100c00 <HAL_InitTick+0x60>)
 8100bba:	781b      	ldrb	r3, [r3, #0]
 8100bbc:	4619      	mov	r1, r3
 8100bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8100bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8100bca:	4618      	mov	r0, r3
 8100bcc:	f000 f941 	bl	8100e52 <HAL_SYSTICK_Config>
 8100bd0:	4603      	mov	r3, r0
 8100bd2:	2b00      	cmp	r3, #0
 8100bd4:	d001      	beq.n	8100bda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100bd6:	2301      	movs	r3, #1
 8100bd8:	e00e      	b.n	8100bf8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100bda:	687b      	ldr	r3, [r7, #4]
 8100bdc:	2b0f      	cmp	r3, #15
 8100bde:	d80a      	bhi.n	8100bf6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100be0:	2200      	movs	r2, #0
 8100be2:	6879      	ldr	r1, [r7, #4]
 8100be4:	f04f 30ff 	mov.w	r0, #4294967295
 8100be8:	f000 f90b 	bl	8100e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100bec:	4a06      	ldr	r2, [pc, #24]	; (8100c08 <HAL_InitTick+0x68>)
 8100bee:	687b      	ldr	r3, [r7, #4]
 8100bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100bf2:	2300      	movs	r3, #0
 8100bf4:	e000      	b.n	8100bf8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100bf6:	2301      	movs	r3, #1
}
 8100bf8:	4618      	mov	r0, r3
 8100bfa:	3708      	adds	r7, #8
 8100bfc:	46bd      	mov	sp, r7
 8100bfe:	bd80      	pop	{r7, pc}
 8100c00:	1000000c 	.word	0x1000000c
 8100c04:	10000000 	.word	0x10000000
 8100c08:	10000008 	.word	0x10000008

08100c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100c0c:	b480      	push	{r7}
 8100c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100c10:	4b06      	ldr	r3, [pc, #24]	; (8100c2c <HAL_IncTick+0x20>)
 8100c12:	781b      	ldrb	r3, [r3, #0]
 8100c14:	461a      	mov	r2, r3
 8100c16:	4b06      	ldr	r3, [pc, #24]	; (8100c30 <HAL_IncTick+0x24>)
 8100c18:	681b      	ldr	r3, [r3, #0]
 8100c1a:	4413      	add	r3, r2
 8100c1c:	4a04      	ldr	r2, [pc, #16]	; (8100c30 <HAL_IncTick+0x24>)
 8100c1e:	6013      	str	r3, [r2, #0]
}
 8100c20:	bf00      	nop
 8100c22:	46bd      	mov	sp, r7
 8100c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c28:	4770      	bx	lr
 8100c2a:	bf00      	nop
 8100c2c:	1000000c 	.word	0x1000000c
 8100c30:	10000108 	.word	0x10000108

08100c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100c34:	b480      	push	{r7}
 8100c36:	af00      	add	r7, sp, #0
  return uwTick;
 8100c38:	4b03      	ldr	r3, [pc, #12]	; (8100c48 <HAL_GetTick+0x14>)
 8100c3a:	681b      	ldr	r3, [r3, #0]
}
 8100c3c:	4618      	mov	r0, r3
 8100c3e:	46bd      	mov	sp, r7
 8100c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c44:	4770      	bx	lr
 8100c46:	bf00      	nop
 8100c48:	10000108 	.word	0x10000108

08100c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100c4c:	b480      	push	{r7}
 8100c4e:	b085      	sub	sp, #20
 8100c50:	af00      	add	r7, sp, #0
 8100c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100c54:	687b      	ldr	r3, [r7, #4]
 8100c56:	f003 0307 	and.w	r3, r3, #7
 8100c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100c5c:	4b0c      	ldr	r3, [pc, #48]	; (8100c90 <__NVIC_SetPriorityGrouping+0x44>)
 8100c5e:	68db      	ldr	r3, [r3, #12]
 8100c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100c62:	68ba      	ldr	r2, [r7, #8]
 8100c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100c68:	4013      	ands	r3, r2
 8100c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100c6c:	68fb      	ldr	r3, [r7, #12]
 8100c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100c70:	68bb      	ldr	r3, [r7, #8]
 8100c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100c7e:	4a04      	ldr	r2, [pc, #16]	; (8100c90 <__NVIC_SetPriorityGrouping+0x44>)
 8100c80:	68bb      	ldr	r3, [r7, #8]
 8100c82:	60d3      	str	r3, [r2, #12]
}
 8100c84:	bf00      	nop
 8100c86:	3714      	adds	r7, #20
 8100c88:	46bd      	mov	sp, r7
 8100c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c8e:	4770      	bx	lr
 8100c90:	e000ed00 	.word	0xe000ed00

08100c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100c94:	b480      	push	{r7}
 8100c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100c98:	4b04      	ldr	r3, [pc, #16]	; (8100cac <__NVIC_GetPriorityGrouping+0x18>)
 8100c9a:	68db      	ldr	r3, [r3, #12]
 8100c9c:	0a1b      	lsrs	r3, r3, #8
 8100c9e:	f003 0307 	and.w	r3, r3, #7
}
 8100ca2:	4618      	mov	r0, r3
 8100ca4:	46bd      	mov	sp, r7
 8100ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100caa:	4770      	bx	lr
 8100cac:	e000ed00 	.word	0xe000ed00

08100cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100cb0:	b480      	push	{r7}
 8100cb2:	b083      	sub	sp, #12
 8100cb4:	af00      	add	r7, sp, #0
 8100cb6:	4603      	mov	r3, r0
 8100cb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100cbe:	2b00      	cmp	r3, #0
 8100cc0:	db0b      	blt.n	8100cda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100cc2:	88fb      	ldrh	r3, [r7, #6]
 8100cc4:	f003 021f 	and.w	r2, r3, #31
 8100cc8:	4907      	ldr	r1, [pc, #28]	; (8100ce8 <__NVIC_EnableIRQ+0x38>)
 8100cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100cce:	095b      	lsrs	r3, r3, #5
 8100cd0:	2001      	movs	r0, #1
 8100cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8100cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100cda:	bf00      	nop
 8100cdc:	370c      	adds	r7, #12
 8100cde:	46bd      	mov	sp, r7
 8100ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ce4:	4770      	bx	lr
 8100ce6:	bf00      	nop
 8100ce8:	e000e100 	.word	0xe000e100

08100cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100cec:	b480      	push	{r7}
 8100cee:	b083      	sub	sp, #12
 8100cf0:	af00      	add	r7, sp, #0
 8100cf2:	4603      	mov	r3, r0
 8100cf4:	6039      	str	r1, [r7, #0]
 8100cf6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100cfc:	2b00      	cmp	r3, #0
 8100cfe:	db0a      	blt.n	8100d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100d00:	683b      	ldr	r3, [r7, #0]
 8100d02:	b2da      	uxtb	r2, r3
 8100d04:	490c      	ldr	r1, [pc, #48]	; (8100d38 <__NVIC_SetPriority+0x4c>)
 8100d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100d0a:	0112      	lsls	r2, r2, #4
 8100d0c:	b2d2      	uxtb	r2, r2
 8100d0e:	440b      	add	r3, r1
 8100d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100d14:	e00a      	b.n	8100d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100d16:	683b      	ldr	r3, [r7, #0]
 8100d18:	b2da      	uxtb	r2, r3
 8100d1a:	4908      	ldr	r1, [pc, #32]	; (8100d3c <__NVIC_SetPriority+0x50>)
 8100d1c:	88fb      	ldrh	r3, [r7, #6]
 8100d1e:	f003 030f 	and.w	r3, r3, #15
 8100d22:	3b04      	subs	r3, #4
 8100d24:	0112      	lsls	r2, r2, #4
 8100d26:	b2d2      	uxtb	r2, r2
 8100d28:	440b      	add	r3, r1
 8100d2a:	761a      	strb	r2, [r3, #24]
}
 8100d2c:	bf00      	nop
 8100d2e:	370c      	adds	r7, #12
 8100d30:	46bd      	mov	sp, r7
 8100d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d36:	4770      	bx	lr
 8100d38:	e000e100 	.word	0xe000e100
 8100d3c:	e000ed00 	.word	0xe000ed00

08100d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100d40:	b480      	push	{r7}
 8100d42:	b089      	sub	sp, #36	; 0x24
 8100d44:	af00      	add	r7, sp, #0
 8100d46:	60f8      	str	r0, [r7, #12]
 8100d48:	60b9      	str	r1, [r7, #8]
 8100d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100d4c:	68fb      	ldr	r3, [r7, #12]
 8100d4e:	f003 0307 	and.w	r3, r3, #7
 8100d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100d54:	69fb      	ldr	r3, [r7, #28]
 8100d56:	f1c3 0307 	rsb	r3, r3, #7
 8100d5a:	2b04      	cmp	r3, #4
 8100d5c:	bf28      	it	cs
 8100d5e:	2304      	movcs	r3, #4
 8100d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100d62:	69fb      	ldr	r3, [r7, #28]
 8100d64:	3304      	adds	r3, #4
 8100d66:	2b06      	cmp	r3, #6
 8100d68:	d902      	bls.n	8100d70 <NVIC_EncodePriority+0x30>
 8100d6a:	69fb      	ldr	r3, [r7, #28]
 8100d6c:	3b03      	subs	r3, #3
 8100d6e:	e000      	b.n	8100d72 <NVIC_EncodePriority+0x32>
 8100d70:	2300      	movs	r3, #0
 8100d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100d74:	f04f 32ff 	mov.w	r2, #4294967295
 8100d78:	69bb      	ldr	r3, [r7, #24]
 8100d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8100d7e:	43da      	mvns	r2, r3
 8100d80:	68bb      	ldr	r3, [r7, #8]
 8100d82:	401a      	ands	r2, r3
 8100d84:	697b      	ldr	r3, [r7, #20]
 8100d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100d88:	f04f 31ff 	mov.w	r1, #4294967295
 8100d8c:	697b      	ldr	r3, [r7, #20]
 8100d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8100d92:	43d9      	mvns	r1, r3
 8100d94:	687b      	ldr	r3, [r7, #4]
 8100d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100d98:	4313      	orrs	r3, r2
         );
}
 8100d9a:	4618      	mov	r0, r3
 8100d9c:	3724      	adds	r7, #36	; 0x24
 8100d9e:	46bd      	mov	sp, r7
 8100da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100da4:	4770      	bx	lr
	...

08100da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100da8:	b580      	push	{r7, lr}
 8100daa:	b082      	sub	sp, #8
 8100dac:	af00      	add	r7, sp, #0
 8100dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100db0:	687b      	ldr	r3, [r7, #4]
 8100db2:	3b01      	subs	r3, #1
 8100db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100db8:	d301      	bcc.n	8100dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100dba:	2301      	movs	r3, #1
 8100dbc:	e00f      	b.n	8100dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100dbe:	4a0a      	ldr	r2, [pc, #40]	; (8100de8 <SysTick_Config+0x40>)
 8100dc0:	687b      	ldr	r3, [r7, #4]
 8100dc2:	3b01      	subs	r3, #1
 8100dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100dc6:	210f      	movs	r1, #15
 8100dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8100dcc:	f7ff ff8e 	bl	8100cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100dd0:	4b05      	ldr	r3, [pc, #20]	; (8100de8 <SysTick_Config+0x40>)
 8100dd2:	2200      	movs	r2, #0
 8100dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100dd6:	4b04      	ldr	r3, [pc, #16]	; (8100de8 <SysTick_Config+0x40>)
 8100dd8:	2207      	movs	r2, #7
 8100dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100ddc:	2300      	movs	r3, #0
}
 8100dde:	4618      	mov	r0, r3
 8100de0:	3708      	adds	r7, #8
 8100de2:	46bd      	mov	sp, r7
 8100de4:	bd80      	pop	{r7, pc}
 8100de6:	bf00      	nop
 8100de8:	e000e010 	.word	0xe000e010

08100dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100dec:	b580      	push	{r7, lr}
 8100dee:	b082      	sub	sp, #8
 8100df0:	af00      	add	r7, sp, #0
 8100df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100df4:	6878      	ldr	r0, [r7, #4]
 8100df6:	f7ff ff29 	bl	8100c4c <__NVIC_SetPriorityGrouping>
}
 8100dfa:	bf00      	nop
 8100dfc:	3708      	adds	r7, #8
 8100dfe:	46bd      	mov	sp, r7
 8100e00:	bd80      	pop	{r7, pc}

08100e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100e02:	b580      	push	{r7, lr}
 8100e04:	b086      	sub	sp, #24
 8100e06:	af00      	add	r7, sp, #0
 8100e08:	4603      	mov	r3, r0
 8100e0a:	60b9      	str	r1, [r7, #8]
 8100e0c:	607a      	str	r2, [r7, #4]
 8100e0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100e10:	f7ff ff40 	bl	8100c94 <__NVIC_GetPriorityGrouping>
 8100e14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100e16:	687a      	ldr	r2, [r7, #4]
 8100e18:	68b9      	ldr	r1, [r7, #8]
 8100e1a:	6978      	ldr	r0, [r7, #20]
 8100e1c:	f7ff ff90 	bl	8100d40 <NVIC_EncodePriority>
 8100e20:	4602      	mov	r2, r0
 8100e22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100e26:	4611      	mov	r1, r2
 8100e28:	4618      	mov	r0, r3
 8100e2a:	f7ff ff5f 	bl	8100cec <__NVIC_SetPriority>
}
 8100e2e:	bf00      	nop
 8100e30:	3718      	adds	r7, #24
 8100e32:	46bd      	mov	sp, r7
 8100e34:	bd80      	pop	{r7, pc}

08100e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100e36:	b580      	push	{r7, lr}
 8100e38:	b082      	sub	sp, #8
 8100e3a:	af00      	add	r7, sp, #0
 8100e3c:	4603      	mov	r3, r0
 8100e3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100e44:	4618      	mov	r0, r3
 8100e46:	f7ff ff33 	bl	8100cb0 <__NVIC_EnableIRQ>
}
 8100e4a:	bf00      	nop
 8100e4c:	3708      	adds	r7, #8
 8100e4e:	46bd      	mov	sp, r7
 8100e50:	bd80      	pop	{r7, pc}

08100e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100e52:	b580      	push	{r7, lr}
 8100e54:	b082      	sub	sp, #8
 8100e56:	af00      	add	r7, sp, #0
 8100e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100e5a:	6878      	ldr	r0, [r7, #4]
 8100e5c:	f7ff ffa4 	bl	8100da8 <SysTick_Config>
 8100e60:	4603      	mov	r3, r0
}
 8100e62:	4618      	mov	r0, r3
 8100e64:	3708      	adds	r7, #8
 8100e66:	46bd      	mov	sp, r7
 8100e68:	bd80      	pop	{r7, pc}
	...

08100e6c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100e6c:	b480      	push	{r7}
 8100e6e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100e70:	4b07      	ldr	r3, [pc, #28]	; (8100e90 <HAL_GetCurrentCPUID+0x24>)
 8100e72:	681b      	ldr	r3, [r3, #0]
 8100e74:	091b      	lsrs	r3, r3, #4
 8100e76:	f003 030f 	and.w	r3, r3, #15
 8100e7a:	2b07      	cmp	r3, #7
 8100e7c:	d101      	bne.n	8100e82 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100e7e:	2303      	movs	r3, #3
 8100e80:	e000      	b.n	8100e84 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100e82:	2301      	movs	r3, #1
  }
}
 8100e84:	4618      	mov	r0, r3
 8100e86:	46bd      	mov	sp, r7
 8100e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e8c:	4770      	bx	lr
 8100e8e:	bf00      	nop
 8100e90:	e000ed00 	.word	0xe000ed00

08100e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100e94:	b480      	push	{r7}
 8100e96:	b089      	sub	sp, #36	; 0x24
 8100e98:	af00      	add	r7, sp, #0
 8100e9a:	6078      	str	r0, [r7, #4]
 8100e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100e9e:	2300      	movs	r3, #0
 8100ea0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100ea2:	4b89      	ldr	r3, [pc, #548]	; (81010c8 <HAL_GPIO_Init+0x234>)
 8100ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100ea6:	e194      	b.n	81011d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100ea8:	683b      	ldr	r3, [r7, #0]
 8100eaa:	681a      	ldr	r2, [r3, #0]
 8100eac:	2101      	movs	r1, #1
 8100eae:	69fb      	ldr	r3, [r7, #28]
 8100eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8100eb4:	4013      	ands	r3, r2
 8100eb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100eb8:	693b      	ldr	r3, [r7, #16]
 8100eba:	2b00      	cmp	r3, #0
 8100ebc:	f000 8186 	beq.w	81011cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100ec0:	683b      	ldr	r3, [r7, #0]
 8100ec2:	685b      	ldr	r3, [r3, #4]
 8100ec4:	f003 0303 	and.w	r3, r3, #3
 8100ec8:	2b01      	cmp	r3, #1
 8100eca:	d005      	beq.n	8100ed8 <HAL_GPIO_Init+0x44>
 8100ecc:	683b      	ldr	r3, [r7, #0]
 8100ece:	685b      	ldr	r3, [r3, #4]
 8100ed0:	f003 0303 	and.w	r3, r3, #3
 8100ed4:	2b02      	cmp	r3, #2
 8100ed6:	d130      	bne.n	8100f3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100ed8:	687b      	ldr	r3, [r7, #4]
 8100eda:	689b      	ldr	r3, [r3, #8]
 8100edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100ede:	69fb      	ldr	r3, [r7, #28]
 8100ee0:	005b      	lsls	r3, r3, #1
 8100ee2:	2203      	movs	r2, #3
 8100ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8100ee8:	43db      	mvns	r3, r3
 8100eea:	69ba      	ldr	r2, [r7, #24]
 8100eec:	4013      	ands	r3, r2
 8100eee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100ef0:	683b      	ldr	r3, [r7, #0]
 8100ef2:	68da      	ldr	r2, [r3, #12]
 8100ef4:	69fb      	ldr	r3, [r7, #28]
 8100ef6:	005b      	lsls	r3, r3, #1
 8100ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8100efc:	69ba      	ldr	r2, [r7, #24]
 8100efe:	4313      	orrs	r3, r2
 8100f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100f02:	687b      	ldr	r3, [r7, #4]
 8100f04:	69ba      	ldr	r2, [r7, #24]
 8100f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100f08:	687b      	ldr	r3, [r7, #4]
 8100f0a:	685b      	ldr	r3, [r3, #4]
 8100f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100f0e:	2201      	movs	r2, #1
 8100f10:	69fb      	ldr	r3, [r7, #28]
 8100f12:	fa02 f303 	lsl.w	r3, r2, r3
 8100f16:	43db      	mvns	r3, r3
 8100f18:	69ba      	ldr	r2, [r7, #24]
 8100f1a:	4013      	ands	r3, r2
 8100f1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100f1e:	683b      	ldr	r3, [r7, #0]
 8100f20:	685b      	ldr	r3, [r3, #4]
 8100f22:	091b      	lsrs	r3, r3, #4
 8100f24:	f003 0201 	and.w	r2, r3, #1
 8100f28:	69fb      	ldr	r3, [r7, #28]
 8100f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8100f2e:	69ba      	ldr	r2, [r7, #24]
 8100f30:	4313      	orrs	r3, r2
 8100f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100f34:	687b      	ldr	r3, [r7, #4]
 8100f36:	69ba      	ldr	r2, [r7, #24]
 8100f38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100f3a:	683b      	ldr	r3, [r7, #0]
 8100f3c:	685b      	ldr	r3, [r3, #4]
 8100f3e:	f003 0303 	and.w	r3, r3, #3
 8100f42:	2b03      	cmp	r3, #3
 8100f44:	d017      	beq.n	8100f76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100f46:	687b      	ldr	r3, [r7, #4]
 8100f48:	68db      	ldr	r3, [r3, #12]
 8100f4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100f4c:	69fb      	ldr	r3, [r7, #28]
 8100f4e:	005b      	lsls	r3, r3, #1
 8100f50:	2203      	movs	r2, #3
 8100f52:	fa02 f303 	lsl.w	r3, r2, r3
 8100f56:	43db      	mvns	r3, r3
 8100f58:	69ba      	ldr	r2, [r7, #24]
 8100f5a:	4013      	ands	r3, r2
 8100f5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100f5e:	683b      	ldr	r3, [r7, #0]
 8100f60:	689a      	ldr	r2, [r3, #8]
 8100f62:	69fb      	ldr	r3, [r7, #28]
 8100f64:	005b      	lsls	r3, r3, #1
 8100f66:	fa02 f303 	lsl.w	r3, r2, r3
 8100f6a:	69ba      	ldr	r2, [r7, #24]
 8100f6c:	4313      	orrs	r3, r2
 8100f6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100f70:	687b      	ldr	r3, [r7, #4]
 8100f72:	69ba      	ldr	r2, [r7, #24]
 8100f74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100f76:	683b      	ldr	r3, [r7, #0]
 8100f78:	685b      	ldr	r3, [r3, #4]
 8100f7a:	f003 0303 	and.w	r3, r3, #3
 8100f7e:	2b02      	cmp	r3, #2
 8100f80:	d123      	bne.n	8100fca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100f82:	69fb      	ldr	r3, [r7, #28]
 8100f84:	08da      	lsrs	r2, r3, #3
 8100f86:	687b      	ldr	r3, [r7, #4]
 8100f88:	3208      	adds	r2, #8
 8100f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100f90:	69fb      	ldr	r3, [r7, #28]
 8100f92:	f003 0307 	and.w	r3, r3, #7
 8100f96:	009b      	lsls	r3, r3, #2
 8100f98:	220f      	movs	r2, #15
 8100f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8100f9e:	43db      	mvns	r3, r3
 8100fa0:	69ba      	ldr	r2, [r7, #24]
 8100fa2:	4013      	ands	r3, r2
 8100fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100fa6:	683b      	ldr	r3, [r7, #0]
 8100fa8:	691a      	ldr	r2, [r3, #16]
 8100faa:	69fb      	ldr	r3, [r7, #28]
 8100fac:	f003 0307 	and.w	r3, r3, #7
 8100fb0:	009b      	lsls	r3, r3, #2
 8100fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8100fb6:	69ba      	ldr	r2, [r7, #24]
 8100fb8:	4313      	orrs	r3, r2
 8100fba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100fbc:	69fb      	ldr	r3, [r7, #28]
 8100fbe:	08da      	lsrs	r2, r3, #3
 8100fc0:	687b      	ldr	r3, [r7, #4]
 8100fc2:	3208      	adds	r2, #8
 8100fc4:	69b9      	ldr	r1, [r7, #24]
 8100fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100fca:	687b      	ldr	r3, [r7, #4]
 8100fcc:	681b      	ldr	r3, [r3, #0]
 8100fce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100fd0:	69fb      	ldr	r3, [r7, #28]
 8100fd2:	005b      	lsls	r3, r3, #1
 8100fd4:	2203      	movs	r2, #3
 8100fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8100fda:	43db      	mvns	r3, r3
 8100fdc:	69ba      	ldr	r2, [r7, #24]
 8100fde:	4013      	ands	r3, r2
 8100fe0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100fe2:	683b      	ldr	r3, [r7, #0]
 8100fe4:	685b      	ldr	r3, [r3, #4]
 8100fe6:	f003 0203 	and.w	r2, r3, #3
 8100fea:	69fb      	ldr	r3, [r7, #28]
 8100fec:	005b      	lsls	r3, r3, #1
 8100fee:	fa02 f303 	lsl.w	r3, r2, r3
 8100ff2:	69ba      	ldr	r2, [r7, #24]
 8100ff4:	4313      	orrs	r3, r2
 8100ff6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100ff8:	687b      	ldr	r3, [r7, #4]
 8100ffa:	69ba      	ldr	r2, [r7, #24]
 8100ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100ffe:	683b      	ldr	r3, [r7, #0]
 8101000:	685b      	ldr	r3, [r3, #4]
 8101002:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101006:	2b00      	cmp	r3, #0
 8101008:	f000 80e0 	beq.w	81011cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810100c:	4b2f      	ldr	r3, [pc, #188]	; (81010cc <HAL_GPIO_Init+0x238>)
 810100e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101012:	4a2e      	ldr	r2, [pc, #184]	; (81010cc <HAL_GPIO_Init+0x238>)
 8101014:	f043 0302 	orr.w	r3, r3, #2
 8101018:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810101c:	4b2b      	ldr	r3, [pc, #172]	; (81010cc <HAL_GPIO_Init+0x238>)
 810101e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101022:	f003 0302 	and.w	r3, r3, #2
 8101026:	60fb      	str	r3, [r7, #12]
 8101028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810102a:	4a29      	ldr	r2, [pc, #164]	; (81010d0 <HAL_GPIO_Init+0x23c>)
 810102c:	69fb      	ldr	r3, [r7, #28]
 810102e:	089b      	lsrs	r3, r3, #2
 8101030:	3302      	adds	r3, #2
 8101032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101038:	69fb      	ldr	r3, [r7, #28]
 810103a:	f003 0303 	and.w	r3, r3, #3
 810103e:	009b      	lsls	r3, r3, #2
 8101040:	220f      	movs	r2, #15
 8101042:	fa02 f303 	lsl.w	r3, r2, r3
 8101046:	43db      	mvns	r3, r3
 8101048:	69ba      	ldr	r2, [r7, #24]
 810104a:	4013      	ands	r3, r2
 810104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810104e:	687b      	ldr	r3, [r7, #4]
 8101050:	4a20      	ldr	r2, [pc, #128]	; (81010d4 <HAL_GPIO_Init+0x240>)
 8101052:	4293      	cmp	r3, r2
 8101054:	d052      	beq.n	81010fc <HAL_GPIO_Init+0x268>
 8101056:	687b      	ldr	r3, [r7, #4]
 8101058:	4a1f      	ldr	r2, [pc, #124]	; (81010d8 <HAL_GPIO_Init+0x244>)
 810105a:	4293      	cmp	r3, r2
 810105c:	d031      	beq.n	81010c2 <HAL_GPIO_Init+0x22e>
 810105e:	687b      	ldr	r3, [r7, #4]
 8101060:	4a1e      	ldr	r2, [pc, #120]	; (81010dc <HAL_GPIO_Init+0x248>)
 8101062:	4293      	cmp	r3, r2
 8101064:	d02b      	beq.n	81010be <HAL_GPIO_Init+0x22a>
 8101066:	687b      	ldr	r3, [r7, #4]
 8101068:	4a1d      	ldr	r2, [pc, #116]	; (81010e0 <HAL_GPIO_Init+0x24c>)
 810106a:	4293      	cmp	r3, r2
 810106c:	d025      	beq.n	81010ba <HAL_GPIO_Init+0x226>
 810106e:	687b      	ldr	r3, [r7, #4]
 8101070:	4a1c      	ldr	r2, [pc, #112]	; (81010e4 <HAL_GPIO_Init+0x250>)
 8101072:	4293      	cmp	r3, r2
 8101074:	d01f      	beq.n	81010b6 <HAL_GPIO_Init+0x222>
 8101076:	687b      	ldr	r3, [r7, #4]
 8101078:	4a1b      	ldr	r2, [pc, #108]	; (81010e8 <HAL_GPIO_Init+0x254>)
 810107a:	4293      	cmp	r3, r2
 810107c:	d019      	beq.n	81010b2 <HAL_GPIO_Init+0x21e>
 810107e:	687b      	ldr	r3, [r7, #4]
 8101080:	4a1a      	ldr	r2, [pc, #104]	; (81010ec <HAL_GPIO_Init+0x258>)
 8101082:	4293      	cmp	r3, r2
 8101084:	d013      	beq.n	81010ae <HAL_GPIO_Init+0x21a>
 8101086:	687b      	ldr	r3, [r7, #4]
 8101088:	4a19      	ldr	r2, [pc, #100]	; (81010f0 <HAL_GPIO_Init+0x25c>)
 810108a:	4293      	cmp	r3, r2
 810108c:	d00d      	beq.n	81010aa <HAL_GPIO_Init+0x216>
 810108e:	687b      	ldr	r3, [r7, #4]
 8101090:	4a18      	ldr	r2, [pc, #96]	; (81010f4 <HAL_GPIO_Init+0x260>)
 8101092:	4293      	cmp	r3, r2
 8101094:	d007      	beq.n	81010a6 <HAL_GPIO_Init+0x212>
 8101096:	687b      	ldr	r3, [r7, #4]
 8101098:	4a17      	ldr	r2, [pc, #92]	; (81010f8 <HAL_GPIO_Init+0x264>)
 810109a:	4293      	cmp	r3, r2
 810109c:	d101      	bne.n	81010a2 <HAL_GPIO_Init+0x20e>
 810109e:	2309      	movs	r3, #9
 81010a0:	e02d      	b.n	81010fe <HAL_GPIO_Init+0x26a>
 81010a2:	230a      	movs	r3, #10
 81010a4:	e02b      	b.n	81010fe <HAL_GPIO_Init+0x26a>
 81010a6:	2308      	movs	r3, #8
 81010a8:	e029      	b.n	81010fe <HAL_GPIO_Init+0x26a>
 81010aa:	2307      	movs	r3, #7
 81010ac:	e027      	b.n	81010fe <HAL_GPIO_Init+0x26a>
 81010ae:	2306      	movs	r3, #6
 81010b0:	e025      	b.n	81010fe <HAL_GPIO_Init+0x26a>
 81010b2:	2305      	movs	r3, #5
 81010b4:	e023      	b.n	81010fe <HAL_GPIO_Init+0x26a>
 81010b6:	2304      	movs	r3, #4
 81010b8:	e021      	b.n	81010fe <HAL_GPIO_Init+0x26a>
 81010ba:	2303      	movs	r3, #3
 81010bc:	e01f      	b.n	81010fe <HAL_GPIO_Init+0x26a>
 81010be:	2302      	movs	r3, #2
 81010c0:	e01d      	b.n	81010fe <HAL_GPIO_Init+0x26a>
 81010c2:	2301      	movs	r3, #1
 81010c4:	e01b      	b.n	81010fe <HAL_GPIO_Init+0x26a>
 81010c6:	bf00      	nop
 81010c8:	580000c0 	.word	0x580000c0
 81010cc:	58024400 	.word	0x58024400
 81010d0:	58000400 	.word	0x58000400
 81010d4:	58020000 	.word	0x58020000
 81010d8:	58020400 	.word	0x58020400
 81010dc:	58020800 	.word	0x58020800
 81010e0:	58020c00 	.word	0x58020c00
 81010e4:	58021000 	.word	0x58021000
 81010e8:	58021400 	.word	0x58021400
 81010ec:	58021800 	.word	0x58021800
 81010f0:	58021c00 	.word	0x58021c00
 81010f4:	58022000 	.word	0x58022000
 81010f8:	58022400 	.word	0x58022400
 81010fc:	2300      	movs	r3, #0
 81010fe:	69fa      	ldr	r2, [r7, #28]
 8101100:	f002 0203 	and.w	r2, r2, #3
 8101104:	0092      	lsls	r2, r2, #2
 8101106:	4093      	lsls	r3, r2
 8101108:	69ba      	ldr	r2, [r7, #24]
 810110a:	4313      	orrs	r3, r2
 810110c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810110e:	4938      	ldr	r1, [pc, #224]	; (81011f0 <HAL_GPIO_Init+0x35c>)
 8101110:	69fb      	ldr	r3, [r7, #28]
 8101112:	089b      	lsrs	r3, r3, #2
 8101114:	3302      	adds	r3, #2
 8101116:	69ba      	ldr	r2, [r7, #24]
 8101118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810111c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101120:	681b      	ldr	r3, [r3, #0]
 8101122:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101124:	693b      	ldr	r3, [r7, #16]
 8101126:	43db      	mvns	r3, r3
 8101128:	69ba      	ldr	r2, [r7, #24]
 810112a:	4013      	ands	r3, r2
 810112c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810112e:	683b      	ldr	r3, [r7, #0]
 8101130:	685b      	ldr	r3, [r3, #4]
 8101132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101136:	2b00      	cmp	r3, #0
 8101138:	d003      	beq.n	8101142 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810113a:	69ba      	ldr	r2, [r7, #24]
 810113c:	693b      	ldr	r3, [r7, #16]
 810113e:	4313      	orrs	r3, r2
 8101140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101146:	69bb      	ldr	r3, [r7, #24]
 8101148:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810114a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810114e:	685b      	ldr	r3, [r3, #4]
 8101150:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101152:	693b      	ldr	r3, [r7, #16]
 8101154:	43db      	mvns	r3, r3
 8101156:	69ba      	ldr	r2, [r7, #24]
 8101158:	4013      	ands	r3, r2
 810115a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810115c:	683b      	ldr	r3, [r7, #0]
 810115e:	685b      	ldr	r3, [r3, #4]
 8101160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101164:	2b00      	cmp	r3, #0
 8101166:	d003      	beq.n	8101170 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101168:	69ba      	ldr	r2, [r7, #24]
 810116a:	693b      	ldr	r3, [r7, #16]
 810116c:	4313      	orrs	r3, r2
 810116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101174:	69bb      	ldr	r3, [r7, #24]
 8101176:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101178:	697b      	ldr	r3, [r7, #20]
 810117a:	685b      	ldr	r3, [r3, #4]
 810117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810117e:	693b      	ldr	r3, [r7, #16]
 8101180:	43db      	mvns	r3, r3
 8101182:	69ba      	ldr	r2, [r7, #24]
 8101184:	4013      	ands	r3, r2
 8101186:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101188:	683b      	ldr	r3, [r7, #0]
 810118a:	685b      	ldr	r3, [r3, #4]
 810118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101190:	2b00      	cmp	r3, #0
 8101192:	d003      	beq.n	810119c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101194:	69ba      	ldr	r2, [r7, #24]
 8101196:	693b      	ldr	r3, [r7, #16]
 8101198:	4313      	orrs	r3, r2
 810119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810119c:	697b      	ldr	r3, [r7, #20]
 810119e:	69ba      	ldr	r2, [r7, #24]
 81011a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81011a2:	697b      	ldr	r3, [r7, #20]
 81011a4:	681b      	ldr	r3, [r3, #0]
 81011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81011a8:	693b      	ldr	r3, [r7, #16]
 81011aa:	43db      	mvns	r3, r3
 81011ac:	69ba      	ldr	r2, [r7, #24]
 81011ae:	4013      	ands	r3, r2
 81011b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81011b2:	683b      	ldr	r3, [r7, #0]
 81011b4:	685b      	ldr	r3, [r3, #4]
 81011b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81011ba:	2b00      	cmp	r3, #0
 81011bc:	d003      	beq.n	81011c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81011be:	69ba      	ldr	r2, [r7, #24]
 81011c0:	693b      	ldr	r3, [r7, #16]
 81011c2:	4313      	orrs	r3, r2
 81011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81011c6:	697b      	ldr	r3, [r7, #20]
 81011c8:	69ba      	ldr	r2, [r7, #24]
 81011ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81011cc:	69fb      	ldr	r3, [r7, #28]
 81011ce:	3301      	adds	r3, #1
 81011d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81011d2:	683b      	ldr	r3, [r7, #0]
 81011d4:	681a      	ldr	r2, [r3, #0]
 81011d6:	69fb      	ldr	r3, [r7, #28]
 81011d8:	fa22 f303 	lsr.w	r3, r2, r3
 81011dc:	2b00      	cmp	r3, #0
 81011de:	f47f ae63 	bne.w	8100ea8 <HAL_GPIO_Init+0x14>
  }
}
 81011e2:	bf00      	nop
 81011e4:	bf00      	nop
 81011e6:	3724      	adds	r7, #36	; 0x24
 81011e8:	46bd      	mov	sp, r7
 81011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ee:	4770      	bx	lr
 81011f0:	58000400 	.word	0x58000400

081011f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 81011f4:	b580      	push	{r7, lr}
 81011f6:	b082      	sub	sp, #8
 81011f8:	af00      	add	r7, sp, #0
 81011fa:	4603      	mov	r3, r0
 81011fc:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 81011fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101202:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101206:	88fb      	ldrh	r3, [r7, #6]
 8101208:	4013      	ands	r3, r2
 810120a:	2b00      	cmp	r3, #0
 810120c:	d008      	beq.n	8101220 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 810120e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101212:	88fb      	ldrh	r3, [r7, #6]
 8101214:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8101218:	88fb      	ldrh	r3, [r7, #6]
 810121a:	4618      	mov	r0, r3
 810121c:	f000 f804 	bl	8101228 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8101220:	bf00      	nop
 8101222:	3708      	adds	r7, #8
 8101224:	46bd      	mov	sp, r7
 8101226:	bd80      	pop	{r7, pc}

08101228 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8101228:	b480      	push	{r7}
 810122a:	b083      	sub	sp, #12
 810122c:	af00      	add	r7, sp, #0
 810122e:	4603      	mov	r3, r0
 8101230:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8101232:	bf00      	nop
 8101234:	370c      	adds	r7, #12
 8101236:	46bd      	mov	sp, r7
 8101238:	f85d 7b04 	ldr.w	r7, [sp], #4
 810123c:	4770      	bx	lr
	...

08101240 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101240:	b480      	push	{r7}
 8101242:	b083      	sub	sp, #12
 8101244:	af00      	add	r7, sp, #0
 8101246:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101248:	4b05      	ldr	r3, [pc, #20]	; (8101260 <HAL_HSEM_ActivateNotification+0x20>)
 810124a:	681a      	ldr	r2, [r3, #0]
 810124c:	4904      	ldr	r1, [pc, #16]	; (8101260 <HAL_HSEM_ActivateNotification+0x20>)
 810124e:	687b      	ldr	r3, [r7, #4]
 8101250:	4313      	orrs	r3, r2
 8101252:	600b      	str	r3, [r1, #0]
#endif
}
 8101254:	bf00      	nop
 8101256:	370c      	adds	r7, #12
 8101258:	46bd      	mov	sp, r7
 810125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810125e:	4770      	bx	lr
 8101260:	58026510 	.word	0x58026510

08101264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8101264:	b580      	push	{r7, lr}
 8101266:	b082      	sub	sp, #8
 8101268:	af00      	add	r7, sp, #0
 810126a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810126c:	687b      	ldr	r3, [r7, #4]
 810126e:	2b00      	cmp	r3, #0
 8101270:	d101      	bne.n	8101276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8101272:	2301      	movs	r3, #1
 8101274:	e081      	b.n	810137a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8101276:	687b      	ldr	r3, [r7, #4]
 8101278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810127c:	b2db      	uxtb	r3, r3
 810127e:	2b00      	cmp	r3, #0
 8101280:	d106      	bne.n	8101290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8101282:	687b      	ldr	r3, [r7, #4]
 8101284:	2200      	movs	r2, #0
 8101286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810128a:	6878      	ldr	r0, [r7, #4]
 810128c:	f7ff fb04 	bl	8100898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8101290:	687b      	ldr	r3, [r7, #4]
 8101292:	2224      	movs	r2, #36	; 0x24
 8101294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8101298:	687b      	ldr	r3, [r7, #4]
 810129a:	681b      	ldr	r3, [r3, #0]
 810129c:	681a      	ldr	r2, [r3, #0]
 810129e:	687b      	ldr	r3, [r7, #4]
 81012a0:	681b      	ldr	r3, [r3, #0]
 81012a2:	f022 0201 	bic.w	r2, r2, #1
 81012a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81012a8:	687b      	ldr	r3, [r7, #4]
 81012aa:	685a      	ldr	r2, [r3, #4]
 81012ac:	687b      	ldr	r3, [r7, #4]
 81012ae:	681b      	ldr	r3, [r3, #0]
 81012b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 81012b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81012b6:	687b      	ldr	r3, [r7, #4]
 81012b8:	681b      	ldr	r3, [r3, #0]
 81012ba:	689a      	ldr	r2, [r3, #8]
 81012bc:	687b      	ldr	r3, [r7, #4]
 81012be:	681b      	ldr	r3, [r3, #0]
 81012c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81012c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81012c6:	687b      	ldr	r3, [r7, #4]
 81012c8:	68db      	ldr	r3, [r3, #12]
 81012ca:	2b01      	cmp	r3, #1
 81012cc:	d107      	bne.n	81012de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81012ce:	687b      	ldr	r3, [r7, #4]
 81012d0:	689a      	ldr	r2, [r3, #8]
 81012d2:	687b      	ldr	r3, [r7, #4]
 81012d4:	681b      	ldr	r3, [r3, #0]
 81012d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81012da:	609a      	str	r2, [r3, #8]
 81012dc:	e006      	b.n	81012ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81012de:	687b      	ldr	r3, [r7, #4]
 81012e0:	689a      	ldr	r2, [r3, #8]
 81012e2:	687b      	ldr	r3, [r7, #4]
 81012e4:	681b      	ldr	r3, [r3, #0]
 81012e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81012ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81012ec:	687b      	ldr	r3, [r7, #4]
 81012ee:	68db      	ldr	r3, [r3, #12]
 81012f0:	2b02      	cmp	r3, #2
 81012f2:	d104      	bne.n	81012fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81012f4:	687b      	ldr	r3, [r7, #4]
 81012f6:	681b      	ldr	r3, [r3, #0]
 81012f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81012fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81012fe:	687b      	ldr	r3, [r7, #4]
 8101300:	681b      	ldr	r3, [r3, #0]
 8101302:	685b      	ldr	r3, [r3, #4]
 8101304:	687a      	ldr	r2, [r7, #4]
 8101306:	6812      	ldr	r2, [r2, #0]
 8101308:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810130c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101310:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8101312:	687b      	ldr	r3, [r7, #4]
 8101314:	681b      	ldr	r3, [r3, #0]
 8101316:	68da      	ldr	r2, [r3, #12]
 8101318:	687b      	ldr	r3, [r7, #4]
 810131a:	681b      	ldr	r3, [r3, #0]
 810131c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8101320:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8101322:	687b      	ldr	r3, [r7, #4]
 8101324:	691a      	ldr	r2, [r3, #16]
 8101326:	687b      	ldr	r3, [r7, #4]
 8101328:	695b      	ldr	r3, [r3, #20]
 810132a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810132e:	687b      	ldr	r3, [r7, #4]
 8101330:	699b      	ldr	r3, [r3, #24]
 8101332:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8101334:	687b      	ldr	r3, [r7, #4]
 8101336:	681b      	ldr	r3, [r3, #0]
 8101338:	430a      	orrs	r2, r1
 810133a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810133c:	687b      	ldr	r3, [r7, #4]
 810133e:	69d9      	ldr	r1, [r3, #28]
 8101340:	687b      	ldr	r3, [r7, #4]
 8101342:	6a1a      	ldr	r2, [r3, #32]
 8101344:	687b      	ldr	r3, [r7, #4]
 8101346:	681b      	ldr	r3, [r3, #0]
 8101348:	430a      	orrs	r2, r1
 810134a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810134c:	687b      	ldr	r3, [r7, #4]
 810134e:	681b      	ldr	r3, [r3, #0]
 8101350:	681a      	ldr	r2, [r3, #0]
 8101352:	687b      	ldr	r3, [r7, #4]
 8101354:	681b      	ldr	r3, [r3, #0]
 8101356:	f042 0201 	orr.w	r2, r2, #1
 810135a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810135c:	687b      	ldr	r3, [r7, #4]
 810135e:	2200      	movs	r2, #0
 8101360:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8101362:	687b      	ldr	r3, [r7, #4]
 8101364:	2220      	movs	r2, #32
 8101366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810136a:	687b      	ldr	r3, [r7, #4]
 810136c:	2200      	movs	r2, #0
 810136e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8101370:	687b      	ldr	r3, [r7, #4]
 8101372:	2200      	movs	r2, #0
 8101374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8101378:	2300      	movs	r3, #0
}
 810137a:	4618      	mov	r0, r3
 810137c:	3708      	adds	r7, #8
 810137e:	46bd      	mov	sp, r7
 8101380:	bd80      	pop	{r7, pc}

08101382 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8101382:	b480      	push	{r7}
 8101384:	b083      	sub	sp, #12
 8101386:	af00      	add	r7, sp, #0
 8101388:	6078      	str	r0, [r7, #4]
 810138a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810138c:	687b      	ldr	r3, [r7, #4]
 810138e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101392:	b2db      	uxtb	r3, r3
 8101394:	2b20      	cmp	r3, #32
 8101396:	d138      	bne.n	810140a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101398:	687b      	ldr	r3, [r7, #4]
 810139a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810139e:	2b01      	cmp	r3, #1
 81013a0:	d101      	bne.n	81013a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81013a2:	2302      	movs	r3, #2
 81013a4:	e032      	b.n	810140c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81013a6:	687b      	ldr	r3, [r7, #4]
 81013a8:	2201      	movs	r2, #1
 81013aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81013ae:	687b      	ldr	r3, [r7, #4]
 81013b0:	2224      	movs	r2, #36	; 0x24
 81013b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81013b6:	687b      	ldr	r3, [r7, #4]
 81013b8:	681b      	ldr	r3, [r3, #0]
 81013ba:	681a      	ldr	r2, [r3, #0]
 81013bc:	687b      	ldr	r3, [r7, #4]
 81013be:	681b      	ldr	r3, [r3, #0]
 81013c0:	f022 0201 	bic.w	r2, r2, #1
 81013c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81013c6:	687b      	ldr	r3, [r7, #4]
 81013c8:	681b      	ldr	r3, [r3, #0]
 81013ca:	681a      	ldr	r2, [r3, #0]
 81013cc:	687b      	ldr	r3, [r7, #4]
 81013ce:	681b      	ldr	r3, [r3, #0]
 81013d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81013d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81013d6:	687b      	ldr	r3, [r7, #4]
 81013d8:	681b      	ldr	r3, [r3, #0]
 81013da:	6819      	ldr	r1, [r3, #0]
 81013dc:	687b      	ldr	r3, [r7, #4]
 81013de:	681b      	ldr	r3, [r3, #0]
 81013e0:	683a      	ldr	r2, [r7, #0]
 81013e2:	430a      	orrs	r2, r1
 81013e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81013e6:	687b      	ldr	r3, [r7, #4]
 81013e8:	681b      	ldr	r3, [r3, #0]
 81013ea:	681a      	ldr	r2, [r3, #0]
 81013ec:	687b      	ldr	r3, [r7, #4]
 81013ee:	681b      	ldr	r3, [r3, #0]
 81013f0:	f042 0201 	orr.w	r2, r2, #1
 81013f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81013f6:	687b      	ldr	r3, [r7, #4]
 81013f8:	2220      	movs	r2, #32
 81013fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81013fe:	687b      	ldr	r3, [r7, #4]
 8101400:	2200      	movs	r2, #0
 8101402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8101406:	2300      	movs	r3, #0
 8101408:	e000      	b.n	810140c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810140a:	2302      	movs	r3, #2
  }
}
 810140c:	4618      	mov	r0, r3
 810140e:	370c      	adds	r7, #12
 8101410:	46bd      	mov	sp, r7
 8101412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101416:	4770      	bx	lr

08101418 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8101418:	b480      	push	{r7}
 810141a:	b085      	sub	sp, #20
 810141c:	af00      	add	r7, sp, #0
 810141e:	6078      	str	r0, [r7, #4]
 8101420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101422:	687b      	ldr	r3, [r7, #4]
 8101424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101428:	b2db      	uxtb	r3, r3
 810142a:	2b20      	cmp	r3, #32
 810142c:	d139      	bne.n	81014a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810142e:	687b      	ldr	r3, [r7, #4]
 8101430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101434:	2b01      	cmp	r3, #1
 8101436:	d101      	bne.n	810143c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8101438:	2302      	movs	r3, #2
 810143a:	e033      	b.n	81014a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810143c:	687b      	ldr	r3, [r7, #4]
 810143e:	2201      	movs	r2, #1
 8101440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101444:	687b      	ldr	r3, [r7, #4]
 8101446:	2224      	movs	r2, #36	; 0x24
 8101448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810144c:	687b      	ldr	r3, [r7, #4]
 810144e:	681b      	ldr	r3, [r3, #0]
 8101450:	681a      	ldr	r2, [r3, #0]
 8101452:	687b      	ldr	r3, [r7, #4]
 8101454:	681b      	ldr	r3, [r3, #0]
 8101456:	f022 0201 	bic.w	r2, r2, #1
 810145a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810145c:	687b      	ldr	r3, [r7, #4]
 810145e:	681b      	ldr	r3, [r3, #0]
 8101460:	681b      	ldr	r3, [r3, #0]
 8101462:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8101464:	68fb      	ldr	r3, [r7, #12]
 8101466:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810146a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810146c:	683b      	ldr	r3, [r7, #0]
 810146e:	021b      	lsls	r3, r3, #8
 8101470:	68fa      	ldr	r2, [r7, #12]
 8101472:	4313      	orrs	r3, r2
 8101474:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8101476:	687b      	ldr	r3, [r7, #4]
 8101478:	681b      	ldr	r3, [r3, #0]
 810147a:	68fa      	ldr	r2, [r7, #12]
 810147c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810147e:	687b      	ldr	r3, [r7, #4]
 8101480:	681b      	ldr	r3, [r3, #0]
 8101482:	681a      	ldr	r2, [r3, #0]
 8101484:	687b      	ldr	r3, [r7, #4]
 8101486:	681b      	ldr	r3, [r3, #0]
 8101488:	f042 0201 	orr.w	r2, r2, #1
 810148c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810148e:	687b      	ldr	r3, [r7, #4]
 8101490:	2220      	movs	r2, #32
 8101492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101496:	687b      	ldr	r3, [r7, #4]
 8101498:	2200      	movs	r2, #0
 810149a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810149e:	2300      	movs	r3, #0
 81014a0:	e000      	b.n	81014a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81014a2:	2302      	movs	r3, #2
  }
}
 81014a4:	4618      	mov	r0, r3
 81014a6:	3714      	adds	r7, #20
 81014a8:	46bd      	mov	sp, r7
 81014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014ae:	4770      	bx	lr

081014b0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81014b0:	b580      	push	{r7, lr}
 81014b2:	b084      	sub	sp, #16
 81014b4:	af00      	add	r7, sp, #0
 81014b6:	60f8      	str	r0, [r7, #12]
 81014b8:	460b      	mov	r3, r1
 81014ba:	607a      	str	r2, [r7, #4]
 81014bc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81014be:	4b37      	ldr	r3, [pc, #220]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 81014c0:	681b      	ldr	r3, [r3, #0]
 81014c2:	f023 0201 	bic.w	r2, r3, #1
 81014c6:	4935      	ldr	r1, [pc, #212]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 81014c8:	68fb      	ldr	r3, [r7, #12]
 81014ca:	4313      	orrs	r3, r2
 81014cc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81014ce:	687b      	ldr	r3, [r7, #4]
 81014d0:	2b00      	cmp	r3, #0
 81014d2:	d123      	bne.n	810151c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81014d4:	f7ff fcca 	bl	8100e6c <HAL_GetCurrentCPUID>
 81014d8:	4603      	mov	r3, r0
 81014da:	2b03      	cmp	r3, #3
 81014dc:	d158      	bne.n	8101590 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81014de:	4b2f      	ldr	r3, [pc, #188]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 81014e0:	691b      	ldr	r3, [r3, #16]
 81014e2:	4a2e      	ldr	r2, [pc, #184]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 81014e4:	f023 0301 	bic.w	r3, r3, #1
 81014e8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81014ea:	4b2d      	ldr	r3, [pc, #180]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81014ec:	691b      	ldr	r3, [r3, #16]
 81014ee:	4a2c      	ldr	r2, [pc, #176]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81014f0:	f043 0304 	orr.w	r3, r3, #4
 81014f4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81014f6:	f3bf 8f4f 	dsb	sy
}
 81014fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81014fc:	f3bf 8f6f 	isb	sy
}
 8101500:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101502:	7afb      	ldrb	r3, [r7, #11]
 8101504:	2b01      	cmp	r3, #1
 8101506:	d101      	bne.n	810150c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101508:	bf30      	wfi
 810150a:	e000      	b.n	810150e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810150c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810150e:	4b24      	ldr	r3, [pc, #144]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101510:	691b      	ldr	r3, [r3, #16]
 8101512:	4a23      	ldr	r2, [pc, #140]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101514:	f023 0304 	bic.w	r3, r3, #4
 8101518:	6113      	str	r3, [r2, #16]
 810151a:	e03c      	b.n	8101596 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810151c:	687b      	ldr	r3, [r7, #4]
 810151e:	2b01      	cmp	r3, #1
 8101520:	d123      	bne.n	810156a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101522:	f7ff fca3 	bl	8100e6c <HAL_GetCurrentCPUID>
 8101526:	4603      	mov	r3, r0
 8101528:	2b01      	cmp	r3, #1
 810152a:	d133      	bne.n	8101594 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810152c:	4b1b      	ldr	r3, [pc, #108]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 810152e:	695b      	ldr	r3, [r3, #20]
 8101530:	4a1a      	ldr	r2, [pc, #104]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101532:	f023 0302 	bic.w	r3, r3, #2
 8101536:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101538:	4b19      	ldr	r3, [pc, #100]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810153a:	691b      	ldr	r3, [r3, #16]
 810153c:	4a18      	ldr	r2, [pc, #96]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810153e:	f043 0304 	orr.w	r3, r3, #4
 8101542:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101544:	f3bf 8f4f 	dsb	sy
}
 8101548:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810154a:	f3bf 8f6f 	isb	sy
}
 810154e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101550:	7afb      	ldrb	r3, [r7, #11]
 8101552:	2b01      	cmp	r3, #1
 8101554:	d101      	bne.n	810155a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101556:	bf30      	wfi
 8101558:	e000      	b.n	810155c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810155a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810155c:	4b10      	ldr	r3, [pc, #64]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810155e:	691b      	ldr	r3, [r3, #16]
 8101560:	4a0f      	ldr	r2, [pc, #60]	; (81015a0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101562:	f023 0304 	bic.w	r3, r3, #4
 8101566:	6113      	str	r3, [r2, #16]
 8101568:	e015      	b.n	8101596 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810156a:	f7ff fc7f 	bl	8100e6c <HAL_GetCurrentCPUID>
 810156e:	4603      	mov	r3, r0
 8101570:	2b03      	cmp	r3, #3
 8101572:	d106      	bne.n	8101582 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101574:	4b09      	ldr	r3, [pc, #36]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101576:	691b      	ldr	r3, [r3, #16]
 8101578:	4a08      	ldr	r2, [pc, #32]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 810157a:	f023 0304 	bic.w	r3, r3, #4
 810157e:	6113      	str	r3, [r2, #16]
 8101580:	e009      	b.n	8101596 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101582:	4b06      	ldr	r3, [pc, #24]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101584:	695b      	ldr	r3, [r3, #20]
 8101586:	4a05      	ldr	r2, [pc, #20]	; (810159c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101588:	f023 0304 	bic.w	r3, r3, #4
 810158c:	6153      	str	r3, [r2, #20]
 810158e:	e002      	b.n	8101596 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101590:	bf00      	nop
 8101592:	e000      	b.n	8101596 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101594:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101596:	3710      	adds	r7, #16
 8101598:	46bd      	mov	sp, r7
 810159a:	bd80      	pop	{r7, pc}
 810159c:	58024800 	.word	0x58024800
 81015a0:	e000ed00 	.word	0xe000ed00

081015a4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81015a4:	b580      	push	{r7, lr}
 81015a6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81015a8:	f7ff fc60 	bl	8100e6c <HAL_GetCurrentCPUID>
 81015ac:	4603      	mov	r3, r0
 81015ae:	2b03      	cmp	r3, #3
 81015b0:	d101      	bne.n	81015b6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81015b2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81015b4:	e001      	b.n	81015ba <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81015b6:	bf40      	sev
    __WFE ();
 81015b8:	bf20      	wfe
}
 81015ba:	bf00      	nop
 81015bc:	bd80      	pop	{r7, pc}
	...

081015c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81015c0:	b480      	push	{r7}
 81015c2:	b089      	sub	sp, #36	; 0x24
 81015c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81015c6:	4bb3      	ldr	r3, [pc, #716]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015c8:	691b      	ldr	r3, [r3, #16]
 81015ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81015ce:	2b18      	cmp	r3, #24
 81015d0:	f200 8155 	bhi.w	810187e <HAL_RCC_GetSysClockFreq+0x2be>
 81015d4:	a201      	add	r2, pc, #4	; (adr r2, 81015dc <HAL_RCC_GetSysClockFreq+0x1c>)
 81015d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81015da:	bf00      	nop
 81015dc:	08101641 	.word	0x08101641
 81015e0:	0810187f 	.word	0x0810187f
 81015e4:	0810187f 	.word	0x0810187f
 81015e8:	0810187f 	.word	0x0810187f
 81015ec:	0810187f 	.word	0x0810187f
 81015f0:	0810187f 	.word	0x0810187f
 81015f4:	0810187f 	.word	0x0810187f
 81015f8:	0810187f 	.word	0x0810187f
 81015fc:	08101667 	.word	0x08101667
 8101600:	0810187f 	.word	0x0810187f
 8101604:	0810187f 	.word	0x0810187f
 8101608:	0810187f 	.word	0x0810187f
 810160c:	0810187f 	.word	0x0810187f
 8101610:	0810187f 	.word	0x0810187f
 8101614:	0810187f 	.word	0x0810187f
 8101618:	0810187f 	.word	0x0810187f
 810161c:	0810166d 	.word	0x0810166d
 8101620:	0810187f 	.word	0x0810187f
 8101624:	0810187f 	.word	0x0810187f
 8101628:	0810187f 	.word	0x0810187f
 810162c:	0810187f 	.word	0x0810187f
 8101630:	0810187f 	.word	0x0810187f
 8101634:	0810187f 	.word	0x0810187f
 8101638:	0810187f 	.word	0x0810187f
 810163c:	08101673 	.word	0x08101673
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101640:	4b94      	ldr	r3, [pc, #592]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101642:	681b      	ldr	r3, [r3, #0]
 8101644:	f003 0320 	and.w	r3, r3, #32
 8101648:	2b00      	cmp	r3, #0
 810164a:	d009      	beq.n	8101660 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810164c:	4b91      	ldr	r3, [pc, #580]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810164e:	681b      	ldr	r3, [r3, #0]
 8101650:	08db      	lsrs	r3, r3, #3
 8101652:	f003 0303 	and.w	r3, r3, #3
 8101656:	4a90      	ldr	r2, [pc, #576]	; (8101898 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101658:	fa22 f303 	lsr.w	r3, r2, r3
 810165c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810165e:	e111      	b.n	8101884 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101660:	4b8d      	ldr	r3, [pc, #564]	; (8101898 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101662:	61bb      	str	r3, [r7, #24]
    break;
 8101664:	e10e      	b.n	8101884 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101666:	4b8d      	ldr	r3, [pc, #564]	; (810189c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101668:	61bb      	str	r3, [r7, #24]
    break;
 810166a:	e10b      	b.n	8101884 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810166c:	4b8c      	ldr	r3, [pc, #560]	; (81018a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810166e:	61bb      	str	r3, [r7, #24]
    break;
 8101670:	e108      	b.n	8101884 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101672:	4b88      	ldr	r3, [pc, #544]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101676:	f003 0303 	and.w	r3, r3, #3
 810167a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810167c:	4b85      	ldr	r3, [pc, #532]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101680:	091b      	lsrs	r3, r3, #4
 8101682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101686:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101688:	4b82      	ldr	r3, [pc, #520]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810168c:	f003 0301 	and.w	r3, r3, #1
 8101690:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8101692:	4b80      	ldr	r3, [pc, #512]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101696:	08db      	lsrs	r3, r3, #3
 8101698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810169c:	68fa      	ldr	r2, [r7, #12]
 810169e:	fb02 f303 	mul.w	r3, r2, r3
 81016a2:	ee07 3a90 	vmov	s15, r3
 81016a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81016aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81016ae:	693b      	ldr	r3, [r7, #16]
 81016b0:	2b00      	cmp	r3, #0
 81016b2:	f000 80e1 	beq.w	8101878 <HAL_RCC_GetSysClockFreq+0x2b8>
 81016b6:	697b      	ldr	r3, [r7, #20]
 81016b8:	2b02      	cmp	r3, #2
 81016ba:	f000 8083 	beq.w	81017c4 <HAL_RCC_GetSysClockFreq+0x204>
 81016be:	697b      	ldr	r3, [r7, #20]
 81016c0:	2b02      	cmp	r3, #2
 81016c2:	f200 80a1 	bhi.w	8101808 <HAL_RCC_GetSysClockFreq+0x248>
 81016c6:	697b      	ldr	r3, [r7, #20]
 81016c8:	2b00      	cmp	r3, #0
 81016ca:	d003      	beq.n	81016d4 <HAL_RCC_GetSysClockFreq+0x114>
 81016cc:	697b      	ldr	r3, [r7, #20]
 81016ce:	2b01      	cmp	r3, #1
 81016d0:	d056      	beq.n	8101780 <HAL_RCC_GetSysClockFreq+0x1c0>
 81016d2:	e099      	b.n	8101808 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81016d4:	4b6f      	ldr	r3, [pc, #444]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81016d6:	681b      	ldr	r3, [r3, #0]
 81016d8:	f003 0320 	and.w	r3, r3, #32
 81016dc:	2b00      	cmp	r3, #0
 81016de:	d02d      	beq.n	810173c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81016e0:	4b6c      	ldr	r3, [pc, #432]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81016e2:	681b      	ldr	r3, [r3, #0]
 81016e4:	08db      	lsrs	r3, r3, #3
 81016e6:	f003 0303 	and.w	r3, r3, #3
 81016ea:	4a6b      	ldr	r2, [pc, #428]	; (8101898 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81016ec:	fa22 f303 	lsr.w	r3, r2, r3
 81016f0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81016f2:	687b      	ldr	r3, [r7, #4]
 81016f4:	ee07 3a90 	vmov	s15, r3
 81016f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81016fc:	693b      	ldr	r3, [r7, #16]
 81016fe:	ee07 3a90 	vmov	s15, r3
 8101702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810170a:	4b62      	ldr	r3, [pc, #392]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810170e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101712:	ee07 3a90 	vmov	s15, r3
 8101716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810171a:	ed97 6a02 	vldr	s12, [r7, #8]
 810171e:	eddf 5a61 	vldr	s11, [pc, #388]	; 81018a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810172a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810172e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101736:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810173a:	e087      	b.n	810184c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810173c:	693b      	ldr	r3, [r7, #16]
 810173e:	ee07 3a90 	vmov	s15, r3
 8101742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101746:	eddf 6a58 	vldr	s13, [pc, #352]	; 81018a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810174a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810174e:	4b51      	ldr	r3, [pc, #324]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101756:	ee07 3a90 	vmov	s15, r3
 810175a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810175e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101762:	eddf 5a50 	vldr	s11, [pc, #320]	; 81018a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810176a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810176e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101776:	ee67 7a27 	vmul.f32	s15, s14, s15
 810177a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810177e:	e065      	b.n	810184c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101780:	693b      	ldr	r3, [r7, #16]
 8101782:	ee07 3a90 	vmov	s15, r3
 8101786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810178a:	eddf 6a48 	vldr	s13, [pc, #288]	; 81018ac <HAL_RCC_GetSysClockFreq+0x2ec>
 810178e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101792:	4b40      	ldr	r3, [pc, #256]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810179a:	ee07 3a90 	vmov	s15, r3
 810179e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81017a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81017a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81018a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81017aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81017ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81017b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81017b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81017ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81017be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81017c2:	e043      	b.n	810184c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81017c4:	693b      	ldr	r3, [r7, #16]
 81017c6:	ee07 3a90 	vmov	s15, r3
 81017ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81017ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 81018b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 81017d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81017d6:	4b2f      	ldr	r3, [pc, #188]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81017da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81017de:	ee07 3a90 	vmov	s15, r3
 81017e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81017e6:	ed97 6a02 	vldr	s12, [r7, #8]
 81017ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81018a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81017ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81017f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81017f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81017fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81017fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101806:	e021      	b.n	810184c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101808:	693b      	ldr	r3, [r7, #16]
 810180a:	ee07 3a90 	vmov	s15, r3
 810180e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101812:	eddf 6a26 	vldr	s13, [pc, #152]	; 81018ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8101816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810181a:	4b1e      	ldr	r3, [pc, #120]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810181e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101822:	ee07 3a90 	vmov	s15, r3
 8101826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810182a:	ed97 6a02 	vldr	s12, [r7, #8]
 810182e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81018a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810183a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810183e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810184a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810184c:	4b11      	ldr	r3, [pc, #68]	; (8101894 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101850:	0a5b      	lsrs	r3, r3, #9
 8101852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101856:	3301      	adds	r3, #1
 8101858:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810185a:	683b      	ldr	r3, [r7, #0]
 810185c:	ee07 3a90 	vmov	s15, r3
 8101860:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101864:	edd7 6a07 	vldr	s13, [r7, #28]
 8101868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810186c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101870:	ee17 3a90 	vmov	r3, s15
 8101874:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101876:	e005      	b.n	8101884 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101878:	2300      	movs	r3, #0
 810187a:	61bb      	str	r3, [r7, #24]
    break;
 810187c:	e002      	b.n	8101884 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810187e:	4b07      	ldr	r3, [pc, #28]	; (810189c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101880:	61bb      	str	r3, [r7, #24]
    break;
 8101882:	bf00      	nop
  }

  return sysclockfreq;
 8101884:	69bb      	ldr	r3, [r7, #24]
}
 8101886:	4618      	mov	r0, r3
 8101888:	3724      	adds	r7, #36	; 0x24
 810188a:	46bd      	mov	sp, r7
 810188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101890:	4770      	bx	lr
 8101892:	bf00      	nop
 8101894:	58024400 	.word	0x58024400
 8101898:	03d09000 	.word	0x03d09000
 810189c:	003d0900 	.word	0x003d0900
 81018a0:	007a1200 	.word	0x007a1200
 81018a4:	46000000 	.word	0x46000000
 81018a8:	4c742400 	.word	0x4c742400
 81018ac:	4a742400 	.word	0x4a742400
 81018b0:	4af42400 	.word	0x4af42400

081018b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81018b4:	b580      	push	{r7, lr}
 81018b6:	b082      	sub	sp, #8
 81018b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81018ba:	f7ff fe81 	bl	81015c0 <HAL_RCC_GetSysClockFreq>
 81018be:	4602      	mov	r2, r0
 81018c0:	4b11      	ldr	r3, [pc, #68]	; (8101908 <HAL_RCC_GetHCLKFreq+0x54>)
 81018c2:	699b      	ldr	r3, [r3, #24]
 81018c4:	0a1b      	lsrs	r3, r3, #8
 81018c6:	f003 030f 	and.w	r3, r3, #15
 81018ca:	4910      	ldr	r1, [pc, #64]	; (810190c <HAL_RCC_GetHCLKFreq+0x58>)
 81018cc:	5ccb      	ldrb	r3, [r1, r3]
 81018ce:	f003 031f 	and.w	r3, r3, #31
 81018d2:	fa22 f303 	lsr.w	r3, r2, r3
 81018d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81018d8:	4b0b      	ldr	r3, [pc, #44]	; (8101908 <HAL_RCC_GetHCLKFreq+0x54>)
 81018da:	699b      	ldr	r3, [r3, #24]
 81018dc:	f003 030f 	and.w	r3, r3, #15
 81018e0:	4a0a      	ldr	r2, [pc, #40]	; (810190c <HAL_RCC_GetHCLKFreq+0x58>)
 81018e2:	5cd3      	ldrb	r3, [r2, r3]
 81018e4:	f003 031f 	and.w	r3, r3, #31
 81018e8:	687a      	ldr	r2, [r7, #4]
 81018ea:	fa22 f303 	lsr.w	r3, r2, r3
 81018ee:	4a08      	ldr	r2, [pc, #32]	; (8101910 <HAL_RCC_GetHCLKFreq+0x5c>)
 81018f0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81018f2:	4b07      	ldr	r3, [pc, #28]	; (8101910 <HAL_RCC_GetHCLKFreq+0x5c>)
 81018f4:	681b      	ldr	r3, [r3, #0]
 81018f6:	4a07      	ldr	r2, [pc, #28]	; (8101914 <HAL_RCC_GetHCLKFreq+0x60>)
 81018f8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81018fa:	4b05      	ldr	r3, [pc, #20]	; (8101910 <HAL_RCC_GetHCLKFreq+0x5c>)
 81018fc:	681b      	ldr	r3, [r3, #0]
}
 81018fe:	4618      	mov	r0, r3
 8101900:	3708      	adds	r7, #8
 8101902:	46bd      	mov	sp, r7
 8101904:	bd80      	pop	{r7, pc}
 8101906:	bf00      	nop
 8101908:	58024400 	.word	0x58024400
 810190c:	08104190 	.word	0x08104190
 8101910:	10000004 	.word	0x10000004
 8101914:	10000000 	.word	0x10000000

08101918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101918:	b580      	push	{r7, lr}
 810191a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810191c:	f7ff ffca 	bl	81018b4 <HAL_RCC_GetHCLKFreq>
 8101920:	4602      	mov	r2, r0
 8101922:	4b06      	ldr	r3, [pc, #24]	; (810193c <HAL_RCC_GetPCLK1Freq+0x24>)
 8101924:	69db      	ldr	r3, [r3, #28]
 8101926:	091b      	lsrs	r3, r3, #4
 8101928:	f003 0307 	and.w	r3, r3, #7
 810192c:	4904      	ldr	r1, [pc, #16]	; (8101940 <HAL_RCC_GetPCLK1Freq+0x28>)
 810192e:	5ccb      	ldrb	r3, [r1, r3]
 8101930:	f003 031f 	and.w	r3, r3, #31
 8101934:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101938:	4618      	mov	r0, r3
 810193a:	bd80      	pop	{r7, pc}
 810193c:	58024400 	.word	0x58024400
 8101940:	08104190 	.word	0x08104190

08101944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101944:	b580      	push	{r7, lr}
 8101946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8101948:	f7ff ffb4 	bl	81018b4 <HAL_RCC_GetHCLKFreq>
 810194c:	4602      	mov	r2, r0
 810194e:	4b06      	ldr	r3, [pc, #24]	; (8101968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8101950:	69db      	ldr	r3, [r3, #28]
 8101952:	0a1b      	lsrs	r3, r3, #8
 8101954:	f003 0307 	and.w	r3, r3, #7
 8101958:	4904      	ldr	r1, [pc, #16]	; (810196c <HAL_RCC_GetPCLK2Freq+0x28>)
 810195a:	5ccb      	ldrb	r3, [r1, r3]
 810195c:	f003 031f 	and.w	r3, r3, #31
 8101960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101964:	4618      	mov	r0, r3
 8101966:	bd80      	pop	{r7, pc}
 8101968:	58024400 	.word	0x58024400
 810196c:	08104190 	.word	0x08104190

08101970 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101970:	b580      	push	{r7, lr}
 8101972:	b086      	sub	sp, #24
 8101974:	af00      	add	r7, sp, #0
 8101976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101978:	2300      	movs	r3, #0
 810197a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810197c:	2300      	movs	r3, #0
 810197e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101980:	687b      	ldr	r3, [r7, #4]
 8101982:	681b      	ldr	r3, [r3, #0]
 8101984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101988:	2b00      	cmp	r3, #0
 810198a:	d03f      	beq.n	8101a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 810198c:	687b      	ldr	r3, [r7, #4]
 810198e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101990:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101994:	d02a      	beq.n	81019ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8101996:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810199a:	d824      	bhi.n	81019e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 810199c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81019a0:	d018      	beq.n	81019d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81019a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81019a6:	d81e      	bhi.n	81019e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81019a8:	2b00      	cmp	r3, #0
 81019aa:	d003      	beq.n	81019b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 81019ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81019b0:	d007      	beq.n	81019c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 81019b2:	e018      	b.n	81019e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81019b4:	4ba3      	ldr	r3, [pc, #652]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81019b8:	4aa2      	ldr	r2, [pc, #648]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81019ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81019be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81019c0:	e015      	b.n	81019ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81019c2:	687b      	ldr	r3, [r7, #4]
 81019c4:	3304      	adds	r3, #4
 81019c6:	2102      	movs	r1, #2
 81019c8:	4618      	mov	r0, r3
 81019ca:	f001 f9d5 	bl	8102d78 <RCCEx_PLL2_Config>
 81019ce:	4603      	mov	r3, r0
 81019d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81019d2:	e00c      	b.n	81019ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81019d4:	687b      	ldr	r3, [r7, #4]
 81019d6:	3324      	adds	r3, #36	; 0x24
 81019d8:	2102      	movs	r1, #2
 81019da:	4618      	mov	r0, r3
 81019dc:	f001 fa7e 	bl	8102edc <RCCEx_PLL3_Config>
 81019e0:	4603      	mov	r3, r0
 81019e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81019e4:	e003      	b.n	81019ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81019e6:	2301      	movs	r3, #1
 81019e8:	75fb      	strb	r3, [r7, #23]
      break;
 81019ea:	e000      	b.n	81019ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81019ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 81019ee:	7dfb      	ldrb	r3, [r7, #23]
 81019f0:	2b00      	cmp	r3, #0
 81019f2:	d109      	bne.n	8101a08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81019f4:	4b93      	ldr	r3, [pc, #588]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81019f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81019f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81019fc:	687b      	ldr	r3, [r7, #4]
 81019fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101a00:	4990      	ldr	r1, [pc, #576]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101a02:	4313      	orrs	r3, r2
 8101a04:	650b      	str	r3, [r1, #80]	; 0x50
 8101a06:	e001      	b.n	8101a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a08:	7dfb      	ldrb	r3, [r7, #23]
 8101a0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101a0c:	687b      	ldr	r3, [r7, #4]
 8101a0e:	681b      	ldr	r3, [r3, #0]
 8101a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101a14:	2b00      	cmp	r3, #0
 8101a16:	d03d      	beq.n	8101a94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8101a18:	687b      	ldr	r3, [r7, #4]
 8101a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101a1c:	2b04      	cmp	r3, #4
 8101a1e:	d826      	bhi.n	8101a6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8101a20:	a201      	add	r2, pc, #4	; (adr r2, 8101a28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8101a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101a26:	bf00      	nop
 8101a28:	08101a3d 	.word	0x08101a3d
 8101a2c:	08101a4b 	.word	0x08101a4b
 8101a30:	08101a5d 	.word	0x08101a5d
 8101a34:	08101a75 	.word	0x08101a75
 8101a38:	08101a75 	.word	0x08101a75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101a3c:	4b81      	ldr	r3, [pc, #516]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101a40:	4a80      	ldr	r2, [pc, #512]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101a46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101a48:	e015      	b.n	8101a76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	3304      	adds	r3, #4
 8101a4e:	2100      	movs	r1, #0
 8101a50:	4618      	mov	r0, r3
 8101a52:	f001 f991 	bl	8102d78 <RCCEx_PLL2_Config>
 8101a56:	4603      	mov	r3, r0
 8101a58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101a5a:	e00c      	b.n	8101a76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101a5c:	687b      	ldr	r3, [r7, #4]
 8101a5e:	3324      	adds	r3, #36	; 0x24
 8101a60:	2100      	movs	r1, #0
 8101a62:	4618      	mov	r0, r3
 8101a64:	f001 fa3a 	bl	8102edc <RCCEx_PLL3_Config>
 8101a68:	4603      	mov	r3, r0
 8101a6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101a6c:	e003      	b.n	8101a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101a6e:	2301      	movs	r3, #1
 8101a70:	75fb      	strb	r3, [r7, #23]
      break;
 8101a72:	e000      	b.n	8101a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8101a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101a76:	7dfb      	ldrb	r3, [r7, #23]
 8101a78:	2b00      	cmp	r3, #0
 8101a7a:	d109      	bne.n	8101a90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101a7c:	4b71      	ldr	r3, [pc, #452]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101a80:	f023 0207 	bic.w	r2, r3, #7
 8101a84:	687b      	ldr	r3, [r7, #4]
 8101a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101a88:	496e      	ldr	r1, [pc, #440]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101a8a:	4313      	orrs	r3, r2
 8101a8c:	650b      	str	r3, [r1, #80]	; 0x50
 8101a8e:	e001      	b.n	8101a94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a90:	7dfb      	ldrb	r3, [r7, #23]
 8101a92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101a94:	687b      	ldr	r3, [r7, #4]
 8101a96:	681b      	ldr	r3, [r3, #0]
 8101a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101a9c:	2b00      	cmp	r3, #0
 8101a9e:	d042      	beq.n	8101b26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8101aa0:	687b      	ldr	r3, [r7, #4]
 8101aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101aa8:	d02b      	beq.n	8101b02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8101aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101aae:	d825      	bhi.n	8101afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101ab0:	2bc0      	cmp	r3, #192	; 0xc0
 8101ab2:	d028      	beq.n	8101b06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8101ab4:	2bc0      	cmp	r3, #192	; 0xc0
 8101ab6:	d821      	bhi.n	8101afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101ab8:	2b80      	cmp	r3, #128	; 0x80
 8101aba:	d016      	beq.n	8101aea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8101abc:	2b80      	cmp	r3, #128	; 0x80
 8101abe:	d81d      	bhi.n	8101afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101ac0:	2b00      	cmp	r3, #0
 8101ac2:	d002      	beq.n	8101aca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8101ac4:	2b40      	cmp	r3, #64	; 0x40
 8101ac6:	d007      	beq.n	8101ad8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8101ac8:	e018      	b.n	8101afc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101aca:	4b5e      	ldr	r3, [pc, #376]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101ace:	4a5d      	ldr	r2, [pc, #372]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101ad6:	e017      	b.n	8101b08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101ad8:	687b      	ldr	r3, [r7, #4]
 8101ada:	3304      	adds	r3, #4
 8101adc:	2100      	movs	r1, #0
 8101ade:	4618      	mov	r0, r3
 8101ae0:	f001 f94a 	bl	8102d78 <RCCEx_PLL2_Config>
 8101ae4:	4603      	mov	r3, r0
 8101ae6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101ae8:	e00e      	b.n	8101b08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101aea:	687b      	ldr	r3, [r7, #4]
 8101aec:	3324      	adds	r3, #36	; 0x24
 8101aee:	2100      	movs	r1, #0
 8101af0:	4618      	mov	r0, r3
 8101af2:	f001 f9f3 	bl	8102edc <RCCEx_PLL3_Config>
 8101af6:	4603      	mov	r3, r0
 8101af8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101afa:	e005      	b.n	8101b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101afc:	2301      	movs	r3, #1
 8101afe:	75fb      	strb	r3, [r7, #23]
      break;
 8101b00:	e002      	b.n	8101b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8101b02:	bf00      	nop
 8101b04:	e000      	b.n	8101b08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8101b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101b08:	7dfb      	ldrb	r3, [r7, #23]
 8101b0a:	2b00      	cmp	r3, #0
 8101b0c:	d109      	bne.n	8101b22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8101b0e:	4b4d      	ldr	r3, [pc, #308]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101b12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8101b16:	687b      	ldr	r3, [r7, #4]
 8101b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101b1a:	494a      	ldr	r1, [pc, #296]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101b1c:	4313      	orrs	r3, r2
 8101b1e:	650b      	str	r3, [r1, #80]	; 0x50
 8101b20:	e001      	b.n	8101b26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b22:	7dfb      	ldrb	r3, [r7, #23]
 8101b24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8101b26:	687b      	ldr	r3, [r7, #4]
 8101b28:	681b      	ldr	r3, [r3, #0]
 8101b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101b2e:	2b00      	cmp	r3, #0
 8101b30:	d049      	beq.n	8101bc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8101b32:	687b      	ldr	r3, [r7, #4]
 8101b34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101b38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101b3c:	d030      	beq.n	8101ba0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8101b3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101b42:	d82a      	bhi.n	8101b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101b44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101b48:	d02c      	beq.n	8101ba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8101b4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101b4e:	d824      	bhi.n	8101b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101b54:	d018      	beq.n	8101b88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8101b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101b5a:	d81e      	bhi.n	8101b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101b5c:	2b00      	cmp	r3, #0
 8101b5e:	d003      	beq.n	8101b68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8101b60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101b64:	d007      	beq.n	8101b76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8101b66:	e018      	b.n	8101b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101b68:	4b36      	ldr	r3, [pc, #216]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101b6c:	4a35      	ldr	r2, [pc, #212]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101b72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101b74:	e017      	b.n	8101ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101b76:	687b      	ldr	r3, [r7, #4]
 8101b78:	3304      	adds	r3, #4
 8101b7a:	2100      	movs	r1, #0
 8101b7c:	4618      	mov	r0, r3
 8101b7e:	f001 f8fb 	bl	8102d78 <RCCEx_PLL2_Config>
 8101b82:	4603      	mov	r3, r0
 8101b84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8101b86:	e00e      	b.n	8101ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101b88:	687b      	ldr	r3, [r7, #4]
 8101b8a:	3324      	adds	r3, #36	; 0x24
 8101b8c:	2100      	movs	r1, #0
 8101b8e:	4618      	mov	r0, r3
 8101b90:	f001 f9a4 	bl	8102edc <RCCEx_PLL3_Config>
 8101b94:	4603      	mov	r3, r0
 8101b96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101b98:	e005      	b.n	8101ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101b9a:	2301      	movs	r3, #1
 8101b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8101b9e:	e002      	b.n	8101ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101ba0:	bf00      	nop
 8101ba2:	e000      	b.n	8101ba6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101ba6:	7dfb      	ldrb	r3, [r7, #23]
 8101ba8:	2b00      	cmp	r3, #0
 8101baa:	d10a      	bne.n	8101bc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101bac:	4b25      	ldr	r3, [pc, #148]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101bb0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8101bb4:	687b      	ldr	r3, [r7, #4]
 8101bb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101bba:	4922      	ldr	r1, [pc, #136]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101bbc:	4313      	orrs	r3, r2
 8101bbe:	658b      	str	r3, [r1, #88]	; 0x58
 8101bc0:	e001      	b.n	8101bc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101bc2:	7dfb      	ldrb	r3, [r7, #23]
 8101bc4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101bc6:	687b      	ldr	r3, [r7, #4]
 8101bc8:	681b      	ldr	r3, [r3, #0]
 8101bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8101bce:	2b00      	cmp	r3, #0
 8101bd0:	d04b      	beq.n	8101c6a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8101bd2:	687b      	ldr	r3, [r7, #4]
 8101bd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101bd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101bdc:	d030      	beq.n	8101c40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8101bde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101be2:	d82a      	bhi.n	8101c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101be4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101be8:	d02e      	beq.n	8101c48 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8101bea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101bee:	d824      	bhi.n	8101c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101bf4:	d018      	beq.n	8101c28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8101bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101bfa:	d81e      	bhi.n	8101c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101bfc:	2b00      	cmp	r3, #0
 8101bfe:	d003      	beq.n	8101c08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8101c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101c04:	d007      	beq.n	8101c16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8101c06:	e018      	b.n	8101c3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101c08:	4b0e      	ldr	r3, [pc, #56]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101c0c:	4a0d      	ldr	r2, [pc, #52]	; (8101c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101c14:	e019      	b.n	8101c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101c16:	687b      	ldr	r3, [r7, #4]
 8101c18:	3304      	adds	r3, #4
 8101c1a:	2100      	movs	r1, #0
 8101c1c:	4618      	mov	r0, r3
 8101c1e:	f001 f8ab 	bl	8102d78 <RCCEx_PLL2_Config>
 8101c22:	4603      	mov	r3, r0
 8101c24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8101c26:	e010      	b.n	8101c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101c28:	687b      	ldr	r3, [r7, #4]
 8101c2a:	3324      	adds	r3, #36	; 0x24
 8101c2c:	2100      	movs	r1, #0
 8101c2e:	4618      	mov	r0, r3
 8101c30:	f001 f954 	bl	8102edc <RCCEx_PLL3_Config>
 8101c34:	4603      	mov	r3, r0
 8101c36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101c38:	e007      	b.n	8101c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101c3a:	2301      	movs	r3, #1
 8101c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8101c3e:	e004      	b.n	8101c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8101c40:	bf00      	nop
 8101c42:	e002      	b.n	8101c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8101c44:	58024400 	.word	0x58024400
      break;
 8101c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101c4a:	7dfb      	ldrb	r3, [r7, #23]
 8101c4c:	2b00      	cmp	r3, #0
 8101c4e:	d10a      	bne.n	8101c66 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101c50:	4b99      	ldr	r3, [pc, #612]	; (8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101c54:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8101c58:	687b      	ldr	r3, [r7, #4]
 8101c5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101c5e:	4996      	ldr	r1, [pc, #600]	; (8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101c60:	4313      	orrs	r3, r2
 8101c62:	658b      	str	r3, [r1, #88]	; 0x58
 8101c64:	e001      	b.n	8101c6a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c66:	7dfb      	ldrb	r3, [r7, #23]
 8101c68:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101c6a:	687b      	ldr	r3, [r7, #4]
 8101c6c:	681b      	ldr	r3, [r3, #0]
 8101c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101c72:	2b00      	cmp	r3, #0
 8101c74:	d032      	beq.n	8101cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101c7a:	2b30      	cmp	r3, #48	; 0x30
 8101c7c:	d01c      	beq.n	8101cb8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8101c7e:	2b30      	cmp	r3, #48	; 0x30
 8101c80:	d817      	bhi.n	8101cb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8101c82:	2b20      	cmp	r3, #32
 8101c84:	d00c      	beq.n	8101ca0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8101c86:	2b20      	cmp	r3, #32
 8101c88:	d813      	bhi.n	8101cb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8101c8a:	2b00      	cmp	r3, #0
 8101c8c:	d016      	beq.n	8101cbc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8101c8e:	2b10      	cmp	r3, #16
 8101c90:	d10f      	bne.n	8101cb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101c92:	4b89      	ldr	r3, [pc, #548]	; (8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101c96:	4a88      	ldr	r2, [pc, #544]	; (8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8101c9e:	e00e      	b.n	8101cbe <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101ca0:	687b      	ldr	r3, [r7, #4]
 8101ca2:	3304      	adds	r3, #4
 8101ca4:	2102      	movs	r1, #2
 8101ca6:	4618      	mov	r0, r3
 8101ca8:	f001 f866 	bl	8102d78 <RCCEx_PLL2_Config>
 8101cac:	4603      	mov	r3, r0
 8101cae:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8101cb0:	e005      	b.n	8101cbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101cb2:	2301      	movs	r3, #1
 8101cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8101cb6:	e002      	b.n	8101cbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8101cb8:	bf00      	nop
 8101cba:	e000      	b.n	8101cbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8101cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101cbe:	7dfb      	ldrb	r3, [r7, #23]
 8101cc0:	2b00      	cmp	r3, #0
 8101cc2:	d109      	bne.n	8101cd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101cc4:	4b7c      	ldr	r3, [pc, #496]	; (8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101cc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101cd0:	4979      	ldr	r1, [pc, #484]	; (8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101cd2:	4313      	orrs	r3, r2
 8101cd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101cd6:	e001      	b.n	8101cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101cd8:	7dfb      	ldrb	r3, [r7, #23]
 8101cda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	681b      	ldr	r3, [r3, #0]
 8101ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101ce4:	2b00      	cmp	r3, #0
 8101ce6:	d047      	beq.n	8101d78 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8101ce8:	687b      	ldr	r3, [r7, #4]
 8101cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101cf0:	d030      	beq.n	8101d54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8101cf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101cf6:	d82a      	bhi.n	8101d4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8101cf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101cfc:	d02c      	beq.n	8101d58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8101cfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101d02:	d824      	bhi.n	8101d4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8101d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101d08:	d018      	beq.n	8101d3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8101d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101d0e:	d81e      	bhi.n	8101d4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8101d10:	2b00      	cmp	r3, #0
 8101d12:	d003      	beq.n	8101d1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8101d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101d18:	d007      	beq.n	8101d2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8101d1a:	e018      	b.n	8101d4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101d1c:	4b66      	ldr	r3, [pc, #408]	; (8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101d20:	4a65      	ldr	r2, [pc, #404]	; (8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101d26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101d28:	e017      	b.n	8101d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101d2a:	687b      	ldr	r3, [r7, #4]
 8101d2c:	3304      	adds	r3, #4
 8101d2e:	2100      	movs	r1, #0
 8101d30:	4618      	mov	r0, r3
 8101d32:	f001 f821 	bl	8102d78 <RCCEx_PLL2_Config>
 8101d36:	4603      	mov	r3, r0
 8101d38:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101d3a:	e00e      	b.n	8101d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101d3c:	687b      	ldr	r3, [r7, #4]
 8101d3e:	3324      	adds	r3, #36	; 0x24
 8101d40:	2100      	movs	r1, #0
 8101d42:	4618      	mov	r0, r3
 8101d44:	f001 f8ca 	bl	8102edc <RCCEx_PLL3_Config>
 8101d48:	4603      	mov	r3, r0
 8101d4a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101d4c:	e005      	b.n	8101d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101d4e:	2301      	movs	r3, #1
 8101d50:	75fb      	strb	r3, [r7, #23]
      break;
 8101d52:	e002      	b.n	8101d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8101d54:	bf00      	nop
 8101d56:	e000      	b.n	8101d5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8101d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101d5a:	7dfb      	ldrb	r3, [r7, #23]
 8101d5c:	2b00      	cmp	r3, #0
 8101d5e:	d109      	bne.n	8101d74 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101d60:	4b55      	ldr	r3, [pc, #340]	; (8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101d64:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8101d68:	687b      	ldr	r3, [r7, #4]
 8101d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101d6c:	4952      	ldr	r1, [pc, #328]	; (8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101d6e:	4313      	orrs	r3, r2
 8101d70:	650b      	str	r3, [r1, #80]	; 0x50
 8101d72:	e001      	b.n	8101d78 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d74:	7dfb      	ldrb	r3, [r7, #23]
 8101d76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101d78:	687b      	ldr	r3, [r7, #4]
 8101d7a:	681b      	ldr	r3, [r3, #0]
 8101d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101d80:	2b00      	cmp	r3, #0
 8101d82:	d049      	beq.n	8101e18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8101d84:	687b      	ldr	r3, [r7, #4]
 8101d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101d8c:	d02e      	beq.n	8101dec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8101d8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101d92:	d828      	bhi.n	8101de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101d94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101d98:	d02a      	beq.n	8101df0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8101d9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101d9e:	d822      	bhi.n	8101de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101da0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101da4:	d026      	beq.n	8101df4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8101da6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101daa:	d81c      	bhi.n	8101de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101db0:	d010      	beq.n	8101dd4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8101db2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101db6:	d816      	bhi.n	8101de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101db8:	2b00      	cmp	r3, #0
 8101dba:	d01d      	beq.n	8101df8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8101dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101dc0:	d111      	bne.n	8101de6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101dc2:	687b      	ldr	r3, [r7, #4]
 8101dc4:	3304      	adds	r3, #4
 8101dc6:	2101      	movs	r1, #1
 8101dc8:	4618      	mov	r0, r3
 8101dca:	f000 ffd5 	bl	8102d78 <RCCEx_PLL2_Config>
 8101dce:	4603      	mov	r3, r0
 8101dd0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101dd2:	e012      	b.n	8101dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101dd4:	687b      	ldr	r3, [r7, #4]
 8101dd6:	3324      	adds	r3, #36	; 0x24
 8101dd8:	2101      	movs	r1, #1
 8101dda:	4618      	mov	r0, r3
 8101ddc:	f001 f87e 	bl	8102edc <RCCEx_PLL3_Config>
 8101de0:	4603      	mov	r3, r0
 8101de2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101de4:	e009      	b.n	8101dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101de6:	2301      	movs	r3, #1
 8101de8:	75fb      	strb	r3, [r7, #23]
      break;
 8101dea:	e006      	b.n	8101dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101dec:	bf00      	nop
 8101dee:	e004      	b.n	8101dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101df0:	bf00      	nop
 8101df2:	e002      	b.n	8101dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101df4:	bf00      	nop
 8101df6:	e000      	b.n	8101dfa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101dfa:	7dfb      	ldrb	r3, [r7, #23]
 8101dfc:	2b00      	cmp	r3, #0
 8101dfe:	d109      	bne.n	8101e14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101e00:	4b2d      	ldr	r3, [pc, #180]	; (8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101e04:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101e0c:	492a      	ldr	r1, [pc, #168]	; (8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101e0e:	4313      	orrs	r3, r2
 8101e10:	650b      	str	r3, [r1, #80]	; 0x50
 8101e12:	e001      	b.n	8101e18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e14:	7dfb      	ldrb	r3, [r7, #23]
 8101e16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	681b      	ldr	r3, [r3, #0]
 8101e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101e20:	2b00      	cmp	r3, #0
 8101e22:	d04d      	beq.n	8101ec0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8101e24:	687b      	ldr	r3, [r7, #4]
 8101e26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101e2e:	d02e      	beq.n	8101e8e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8101e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101e34:	d828      	bhi.n	8101e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8101e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101e3a:	d02a      	beq.n	8101e92 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8101e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101e40:	d822      	bhi.n	8101e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8101e42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101e46:	d026      	beq.n	8101e96 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8101e48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101e4c:	d81c      	bhi.n	8101e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8101e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101e52:	d010      	beq.n	8101e76 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8101e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101e58:	d816      	bhi.n	8101e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8101e5a:	2b00      	cmp	r3, #0
 8101e5c:	d01d      	beq.n	8101e9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8101e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101e62:	d111      	bne.n	8101e88 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101e64:	687b      	ldr	r3, [r7, #4]
 8101e66:	3304      	adds	r3, #4
 8101e68:	2101      	movs	r1, #1
 8101e6a:	4618      	mov	r0, r3
 8101e6c:	f000 ff84 	bl	8102d78 <RCCEx_PLL2_Config>
 8101e70:	4603      	mov	r3, r0
 8101e72:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101e74:	e012      	b.n	8101e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101e76:	687b      	ldr	r3, [r7, #4]
 8101e78:	3324      	adds	r3, #36	; 0x24
 8101e7a:	2101      	movs	r1, #1
 8101e7c:	4618      	mov	r0, r3
 8101e7e:	f001 f82d 	bl	8102edc <RCCEx_PLL3_Config>
 8101e82:	4603      	mov	r3, r0
 8101e84:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101e86:	e009      	b.n	8101e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8101e88:	2301      	movs	r3, #1
 8101e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8101e8c:	e006      	b.n	8101e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101e8e:	bf00      	nop
 8101e90:	e004      	b.n	8101e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101e92:	bf00      	nop
 8101e94:	e002      	b.n	8101e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101e96:	bf00      	nop
 8101e98:	e000      	b.n	8101e9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101e9c:	7dfb      	ldrb	r3, [r7, #23]
 8101e9e:	2b00      	cmp	r3, #0
 8101ea0:	d10c      	bne.n	8101ebc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8101ea2:	4b05      	ldr	r3, [pc, #20]	; (8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101ea6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8101eaa:	687b      	ldr	r3, [r7, #4]
 8101eac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101eb0:	4901      	ldr	r1, [pc, #4]	; (8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101eb2:	4313      	orrs	r3, r2
 8101eb4:	658b      	str	r3, [r1, #88]	; 0x58
 8101eb6:	e003      	b.n	8101ec0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8101eb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ebc:	7dfb      	ldrb	r3, [r7, #23]
 8101ebe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	681b      	ldr	r3, [r3, #0]
 8101ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101ec8:	2b00      	cmp	r3, #0
 8101eca:	d02f      	beq.n	8101f2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8101ecc:	687b      	ldr	r3, [r7, #4]
 8101ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101ed4:	d00e      	beq.n	8101ef4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8101ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101eda:	d814      	bhi.n	8101f06 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8101edc:	2b00      	cmp	r3, #0
 8101ede:	d015      	beq.n	8101f0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8101ee0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101ee4:	d10f      	bne.n	8101f06 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101ee6:	4bb0      	ldr	r3, [pc, #704]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101eea:	4aaf      	ldr	r2, [pc, #700]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101ef2:	e00c      	b.n	8101f0e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101ef4:	687b      	ldr	r3, [r7, #4]
 8101ef6:	3304      	adds	r3, #4
 8101ef8:	2101      	movs	r1, #1
 8101efa:	4618      	mov	r0, r3
 8101efc:	f000 ff3c 	bl	8102d78 <RCCEx_PLL2_Config>
 8101f00:	4603      	mov	r3, r0
 8101f02:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101f04:	e003      	b.n	8101f0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101f06:	2301      	movs	r3, #1
 8101f08:	75fb      	strb	r3, [r7, #23]
      break;
 8101f0a:	e000      	b.n	8101f0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8101f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101f0e:	7dfb      	ldrb	r3, [r7, #23]
 8101f10:	2b00      	cmp	r3, #0
 8101f12:	d109      	bne.n	8101f28 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8101f14:	4ba4      	ldr	r3, [pc, #656]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101f18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8101f1c:	687b      	ldr	r3, [r7, #4]
 8101f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101f20:	49a1      	ldr	r1, [pc, #644]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101f22:	4313      	orrs	r3, r2
 8101f24:	650b      	str	r3, [r1, #80]	; 0x50
 8101f26:	e001      	b.n	8101f2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f28:	7dfb      	ldrb	r3, [r7, #23]
 8101f2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8101f2c:	687b      	ldr	r3, [r7, #4]
 8101f2e:	681b      	ldr	r3, [r3, #0]
 8101f30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101f34:	2b00      	cmp	r3, #0
 8101f36:	d032      	beq.n	8101f9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8101f38:	687b      	ldr	r3, [r7, #4]
 8101f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101f3c:	2b03      	cmp	r3, #3
 8101f3e:	d81b      	bhi.n	8101f78 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8101f40:	a201      	add	r2, pc, #4	; (adr r2, 8101f48 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8101f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101f46:	bf00      	nop
 8101f48:	08101f7f 	.word	0x08101f7f
 8101f4c:	08101f59 	.word	0x08101f59
 8101f50:	08101f67 	.word	0x08101f67
 8101f54:	08101f7f 	.word	0x08101f7f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101f58:	4b93      	ldr	r3, [pc, #588]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101f5c:	4a92      	ldr	r2, [pc, #584]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101f64:	e00c      	b.n	8101f80 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101f66:	687b      	ldr	r3, [r7, #4]
 8101f68:	3304      	adds	r3, #4
 8101f6a:	2102      	movs	r1, #2
 8101f6c:	4618      	mov	r0, r3
 8101f6e:	f000 ff03 	bl	8102d78 <RCCEx_PLL2_Config>
 8101f72:	4603      	mov	r3, r0
 8101f74:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101f76:	e003      	b.n	8101f80 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101f78:	2301      	movs	r3, #1
 8101f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8101f7c:	e000      	b.n	8101f80 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8101f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101f80:	7dfb      	ldrb	r3, [r7, #23]
 8101f82:	2b00      	cmp	r3, #0
 8101f84:	d109      	bne.n	8101f9a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101f86:	4b88      	ldr	r3, [pc, #544]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101f8a:	f023 0203 	bic.w	r2, r3, #3
 8101f8e:	687b      	ldr	r3, [r7, #4]
 8101f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101f92:	4985      	ldr	r1, [pc, #532]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101f94:	4313      	orrs	r3, r2
 8101f96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101f98:	e001      	b.n	8101f9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f9a:	7dfb      	ldrb	r3, [r7, #23]
 8101f9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	681b      	ldr	r3, [r3, #0]
 8101fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101fa6:	2b00      	cmp	r3, #0
 8101fa8:	f000 8088 	beq.w	81020bc <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8101fac:	4b7f      	ldr	r3, [pc, #508]	; (81021ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8101fae:	681b      	ldr	r3, [r3, #0]
 8101fb0:	4a7e      	ldr	r2, [pc, #504]	; (81021ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8101fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101fb8:	f7fe fe3c 	bl	8100c34 <HAL_GetTick>
 8101fbc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101fbe:	e009      	b.n	8101fd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101fc0:	f7fe fe38 	bl	8100c34 <HAL_GetTick>
 8101fc4:	4602      	mov	r2, r0
 8101fc6:	693b      	ldr	r3, [r7, #16]
 8101fc8:	1ad3      	subs	r3, r2, r3
 8101fca:	2b64      	cmp	r3, #100	; 0x64
 8101fcc:	d902      	bls.n	8101fd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8101fce:	2303      	movs	r3, #3
 8101fd0:	75fb      	strb	r3, [r7, #23]
        break;
 8101fd2:	e005      	b.n	8101fe0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101fd4:	4b75      	ldr	r3, [pc, #468]	; (81021ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8101fd6:	681b      	ldr	r3, [r3, #0]
 8101fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101fdc:	2b00      	cmp	r3, #0
 8101fde:	d0ef      	beq.n	8101fc0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8101fe0:	7dfb      	ldrb	r3, [r7, #23]
 8101fe2:	2b00      	cmp	r3, #0
 8101fe4:	d168      	bne.n	81020b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101fe6:	4b70      	ldr	r3, [pc, #448]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101fe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101fea:	687b      	ldr	r3, [r7, #4]
 8101fec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101ff0:	4053      	eors	r3, r2
 8101ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101ff6:	2b00      	cmp	r3, #0
 8101ff8:	d013      	beq.n	8102022 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8101ffa:	4b6b      	ldr	r3, [pc, #428]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8101ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102002:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8102004:	4b68      	ldr	r3, [pc, #416]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102008:	4a67      	ldr	r2, [pc, #412]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810200a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810200e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8102010:	4b65      	ldr	r3, [pc, #404]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102014:	4a64      	ldr	r2, [pc, #400]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810201a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810201c:	4a62      	ldr	r2, [pc, #392]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810201e:	68fb      	ldr	r3, [r7, #12]
 8102020:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8102022:	687b      	ldr	r3, [r7, #4]
 8102024:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810202c:	d115      	bne.n	810205a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810202e:	f7fe fe01 	bl	8100c34 <HAL_GetTick>
 8102032:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102034:	e00b      	b.n	810204e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102036:	f7fe fdfd 	bl	8100c34 <HAL_GetTick>
 810203a:	4602      	mov	r2, r0
 810203c:	693b      	ldr	r3, [r7, #16]
 810203e:	1ad3      	subs	r3, r2, r3
 8102040:	f241 3288 	movw	r2, #5000	; 0x1388
 8102044:	4293      	cmp	r3, r2
 8102046:	d902      	bls.n	810204e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8102048:	2303      	movs	r3, #3
 810204a:	75fb      	strb	r3, [r7, #23]
            break;
 810204c:	e005      	b.n	810205a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810204e:	4b56      	ldr	r3, [pc, #344]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102052:	f003 0302 	and.w	r3, r3, #2
 8102056:	2b00      	cmp	r3, #0
 8102058:	d0ed      	beq.n	8102036 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810205a:	7dfb      	ldrb	r3, [r7, #23]
 810205c:	2b00      	cmp	r3, #0
 810205e:	d128      	bne.n	81020b2 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810206a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810206e:	d10f      	bne.n	8102090 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8102070:	4b4d      	ldr	r3, [pc, #308]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102072:	691b      	ldr	r3, [r3, #16]
 8102074:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810207e:	091b      	lsrs	r3, r3, #4
 8102080:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8102084:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8102088:	4947      	ldr	r1, [pc, #284]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810208a:	4313      	orrs	r3, r2
 810208c:	610b      	str	r3, [r1, #16]
 810208e:	e005      	b.n	810209c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8102090:	4b45      	ldr	r3, [pc, #276]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102092:	691b      	ldr	r3, [r3, #16]
 8102094:	4a44      	ldr	r2, [pc, #272]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102096:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810209a:	6113      	str	r3, [r2, #16]
 810209c:	4b42      	ldr	r3, [pc, #264]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810209e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81020a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81020aa:	493f      	ldr	r1, [pc, #252]	; (81021a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81020ac:	4313      	orrs	r3, r2
 81020ae:	670b      	str	r3, [r1, #112]	; 0x70
 81020b0:	e004      	b.n	81020bc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81020b2:	7dfb      	ldrb	r3, [r7, #23]
 81020b4:	75bb      	strb	r3, [r7, #22]
 81020b6:	e001      	b.n	81020bc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020b8:	7dfb      	ldrb	r3, [r7, #23]
 81020ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81020bc:	687b      	ldr	r3, [r7, #4]
 81020be:	681b      	ldr	r3, [r3, #0]
 81020c0:	f003 0301 	and.w	r3, r3, #1
 81020c4:	2b00      	cmp	r3, #0
 81020c6:	f000 8083 	beq.w	81021d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81020ca:	687b      	ldr	r3, [r7, #4]
 81020cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81020ce:	2b28      	cmp	r3, #40	; 0x28
 81020d0:	d866      	bhi.n	81021a0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81020d2:	a201      	add	r2, pc, #4	; (adr r2, 81020d8 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81020d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81020d8:	081021b1 	.word	0x081021b1
 81020dc:	081021a1 	.word	0x081021a1
 81020e0:	081021a1 	.word	0x081021a1
 81020e4:	081021a1 	.word	0x081021a1
 81020e8:	081021a1 	.word	0x081021a1
 81020ec:	081021a1 	.word	0x081021a1
 81020f0:	081021a1 	.word	0x081021a1
 81020f4:	081021a1 	.word	0x081021a1
 81020f8:	0810217d 	.word	0x0810217d
 81020fc:	081021a1 	.word	0x081021a1
 8102100:	081021a1 	.word	0x081021a1
 8102104:	081021a1 	.word	0x081021a1
 8102108:	081021a1 	.word	0x081021a1
 810210c:	081021a1 	.word	0x081021a1
 8102110:	081021a1 	.word	0x081021a1
 8102114:	081021a1 	.word	0x081021a1
 8102118:	0810218f 	.word	0x0810218f
 810211c:	081021a1 	.word	0x081021a1
 8102120:	081021a1 	.word	0x081021a1
 8102124:	081021a1 	.word	0x081021a1
 8102128:	081021a1 	.word	0x081021a1
 810212c:	081021a1 	.word	0x081021a1
 8102130:	081021a1 	.word	0x081021a1
 8102134:	081021a1 	.word	0x081021a1
 8102138:	081021b1 	.word	0x081021b1
 810213c:	081021a1 	.word	0x081021a1
 8102140:	081021a1 	.word	0x081021a1
 8102144:	081021a1 	.word	0x081021a1
 8102148:	081021a1 	.word	0x081021a1
 810214c:	081021a1 	.word	0x081021a1
 8102150:	081021a1 	.word	0x081021a1
 8102154:	081021a1 	.word	0x081021a1
 8102158:	081021b1 	.word	0x081021b1
 810215c:	081021a1 	.word	0x081021a1
 8102160:	081021a1 	.word	0x081021a1
 8102164:	081021a1 	.word	0x081021a1
 8102168:	081021a1 	.word	0x081021a1
 810216c:	081021a1 	.word	0x081021a1
 8102170:	081021a1 	.word	0x081021a1
 8102174:	081021a1 	.word	0x081021a1
 8102178:	081021b1 	.word	0x081021b1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810217c:	687b      	ldr	r3, [r7, #4]
 810217e:	3304      	adds	r3, #4
 8102180:	2101      	movs	r1, #1
 8102182:	4618      	mov	r0, r3
 8102184:	f000 fdf8 	bl	8102d78 <RCCEx_PLL2_Config>
 8102188:	4603      	mov	r3, r0
 810218a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810218c:	e011      	b.n	81021b2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810218e:	687b      	ldr	r3, [r7, #4]
 8102190:	3324      	adds	r3, #36	; 0x24
 8102192:	2101      	movs	r1, #1
 8102194:	4618      	mov	r0, r3
 8102196:	f000 fea1 	bl	8102edc <RCCEx_PLL3_Config>
 810219a:	4603      	mov	r3, r0
 810219c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810219e:	e008      	b.n	81021b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81021a0:	2301      	movs	r3, #1
 81021a2:	75fb      	strb	r3, [r7, #23]
      break;
 81021a4:	e005      	b.n	81021b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 81021a6:	bf00      	nop
 81021a8:	58024400 	.word	0x58024400
 81021ac:	58024800 	.word	0x58024800
      break;
 81021b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81021b2:	7dfb      	ldrb	r3, [r7, #23]
 81021b4:	2b00      	cmp	r3, #0
 81021b6:	d109      	bne.n	81021cc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81021b8:	4b96      	ldr	r3, [pc, #600]	; (8102414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81021bc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81021c0:	687b      	ldr	r3, [r7, #4]
 81021c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81021c4:	4993      	ldr	r1, [pc, #588]	; (8102414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81021c6:	4313      	orrs	r3, r2
 81021c8:	654b      	str	r3, [r1, #84]	; 0x54
 81021ca:	e001      	b.n	81021d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021cc:	7dfb      	ldrb	r3, [r7, #23]
 81021ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81021d0:	687b      	ldr	r3, [r7, #4]
 81021d2:	681b      	ldr	r3, [r3, #0]
 81021d4:	f003 0302 	and.w	r3, r3, #2
 81021d8:	2b00      	cmp	r3, #0
 81021da:	d038      	beq.n	810224e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81021e0:	2b05      	cmp	r3, #5
 81021e2:	d821      	bhi.n	8102228 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 81021e4:	a201      	add	r2, pc, #4	; (adr r2, 81021ec <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 81021e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81021ea:	bf00      	nop
 81021ec:	0810222f 	.word	0x0810222f
 81021f0:	08102205 	.word	0x08102205
 81021f4:	08102217 	.word	0x08102217
 81021f8:	0810222f 	.word	0x0810222f
 81021fc:	0810222f 	.word	0x0810222f
 8102200:	0810222f 	.word	0x0810222f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102204:	687b      	ldr	r3, [r7, #4]
 8102206:	3304      	adds	r3, #4
 8102208:	2101      	movs	r1, #1
 810220a:	4618      	mov	r0, r3
 810220c:	f000 fdb4 	bl	8102d78 <RCCEx_PLL2_Config>
 8102210:	4603      	mov	r3, r0
 8102212:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102214:	e00c      	b.n	8102230 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102216:	687b      	ldr	r3, [r7, #4]
 8102218:	3324      	adds	r3, #36	; 0x24
 810221a:	2101      	movs	r1, #1
 810221c:	4618      	mov	r0, r3
 810221e:	f000 fe5d 	bl	8102edc <RCCEx_PLL3_Config>
 8102222:	4603      	mov	r3, r0
 8102224:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102226:	e003      	b.n	8102230 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102228:	2301      	movs	r3, #1
 810222a:	75fb      	strb	r3, [r7, #23]
      break;
 810222c:	e000      	b.n	8102230 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 810222e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102230:	7dfb      	ldrb	r3, [r7, #23]
 8102232:	2b00      	cmp	r3, #0
 8102234:	d109      	bne.n	810224a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102236:	4b77      	ldr	r3, [pc, #476]	; (8102414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810223a:	f023 0207 	bic.w	r2, r3, #7
 810223e:	687b      	ldr	r3, [r7, #4]
 8102240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8102242:	4974      	ldr	r1, [pc, #464]	; (8102414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102244:	4313      	orrs	r3, r2
 8102246:	654b      	str	r3, [r1, #84]	; 0x54
 8102248:	e001      	b.n	810224e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810224a:	7dfb      	ldrb	r3, [r7, #23]
 810224c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810224e:	687b      	ldr	r3, [r7, #4]
 8102250:	681b      	ldr	r3, [r3, #0]
 8102252:	f003 0304 	and.w	r3, r3, #4
 8102256:	2b00      	cmp	r3, #0
 8102258:	d03a      	beq.n	81022d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102260:	2b05      	cmp	r3, #5
 8102262:	d821      	bhi.n	81022a8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8102264:	a201      	add	r2, pc, #4	; (adr r2, 810226c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8102266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810226a:	bf00      	nop
 810226c:	081022af 	.word	0x081022af
 8102270:	08102285 	.word	0x08102285
 8102274:	08102297 	.word	0x08102297
 8102278:	081022af 	.word	0x081022af
 810227c:	081022af 	.word	0x081022af
 8102280:	081022af 	.word	0x081022af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102284:	687b      	ldr	r3, [r7, #4]
 8102286:	3304      	adds	r3, #4
 8102288:	2101      	movs	r1, #1
 810228a:	4618      	mov	r0, r3
 810228c:	f000 fd74 	bl	8102d78 <RCCEx_PLL2_Config>
 8102290:	4603      	mov	r3, r0
 8102292:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8102294:	e00c      	b.n	81022b0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102296:	687b      	ldr	r3, [r7, #4]
 8102298:	3324      	adds	r3, #36	; 0x24
 810229a:	2101      	movs	r1, #1
 810229c:	4618      	mov	r0, r3
 810229e:	f000 fe1d 	bl	8102edc <RCCEx_PLL3_Config>
 81022a2:	4603      	mov	r3, r0
 81022a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81022a6:	e003      	b.n	81022b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81022a8:	2301      	movs	r3, #1
 81022aa:	75fb      	strb	r3, [r7, #23]
      break;
 81022ac:	e000      	b.n	81022b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 81022ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 81022b0:	7dfb      	ldrb	r3, [r7, #23]
 81022b2:	2b00      	cmp	r3, #0
 81022b4:	d10a      	bne.n	81022cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81022b6:	4b57      	ldr	r3, [pc, #348]	; (8102414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81022ba:	f023 0207 	bic.w	r2, r3, #7
 81022be:	687b      	ldr	r3, [r7, #4]
 81022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81022c4:	4953      	ldr	r1, [pc, #332]	; (8102414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81022c6:	4313      	orrs	r3, r2
 81022c8:	658b      	str	r3, [r1, #88]	; 0x58
 81022ca:	e001      	b.n	81022d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022cc:	7dfb      	ldrb	r3, [r7, #23]
 81022ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81022d0:	687b      	ldr	r3, [r7, #4]
 81022d2:	681b      	ldr	r3, [r3, #0]
 81022d4:	f003 0320 	and.w	r3, r3, #32
 81022d8:	2b00      	cmp	r3, #0
 81022da:	d04b      	beq.n	8102374 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81022dc:	687b      	ldr	r3, [r7, #4]
 81022de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81022e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81022e6:	d02e      	beq.n	8102346 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81022e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81022ec:	d828      	bhi.n	8102340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81022ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81022f2:	d02a      	beq.n	810234a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81022f8:	d822      	bhi.n	8102340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81022fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81022fe:	d026      	beq.n	810234e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8102300:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102304:	d81c      	bhi.n	8102340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8102306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810230a:	d010      	beq.n	810232e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 810230c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102310:	d816      	bhi.n	8102340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8102312:	2b00      	cmp	r3, #0
 8102314:	d01d      	beq.n	8102352 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8102316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810231a:	d111      	bne.n	8102340 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810231c:	687b      	ldr	r3, [r7, #4]
 810231e:	3304      	adds	r3, #4
 8102320:	2100      	movs	r1, #0
 8102322:	4618      	mov	r0, r3
 8102324:	f000 fd28 	bl	8102d78 <RCCEx_PLL2_Config>
 8102328:	4603      	mov	r3, r0
 810232a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810232c:	e012      	b.n	8102354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810232e:	687b      	ldr	r3, [r7, #4]
 8102330:	3324      	adds	r3, #36	; 0x24
 8102332:	2102      	movs	r1, #2
 8102334:	4618      	mov	r0, r3
 8102336:	f000 fdd1 	bl	8102edc <RCCEx_PLL3_Config>
 810233a:	4603      	mov	r3, r0
 810233c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810233e:	e009      	b.n	8102354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102340:	2301      	movs	r3, #1
 8102342:	75fb      	strb	r3, [r7, #23]
      break;
 8102344:	e006      	b.n	8102354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8102346:	bf00      	nop
 8102348:	e004      	b.n	8102354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810234a:	bf00      	nop
 810234c:	e002      	b.n	8102354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810234e:	bf00      	nop
 8102350:	e000      	b.n	8102354 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8102352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102354:	7dfb      	ldrb	r3, [r7, #23]
 8102356:	2b00      	cmp	r3, #0
 8102358:	d10a      	bne.n	8102370 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810235a:	4b2e      	ldr	r3, [pc, #184]	; (8102414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810235e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102362:	687b      	ldr	r3, [r7, #4]
 8102364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102368:	492a      	ldr	r1, [pc, #168]	; (8102414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810236a:	4313      	orrs	r3, r2
 810236c:	654b      	str	r3, [r1, #84]	; 0x54
 810236e:	e001      	b.n	8102374 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102370:	7dfb      	ldrb	r3, [r7, #23]
 8102372:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	681b      	ldr	r3, [r3, #0]
 8102378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810237c:	2b00      	cmp	r3, #0
 810237e:	d04d      	beq.n	810241c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102380:	687b      	ldr	r3, [r7, #4]
 8102382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102386:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810238a:	d02e      	beq.n	81023ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 810238c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102390:	d828      	bhi.n	81023e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8102392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102396:	d02a      	beq.n	81023ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8102398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810239c:	d822      	bhi.n	81023e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810239e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81023a2:	d026      	beq.n	81023f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81023a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81023a8:	d81c      	bhi.n	81023e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81023aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81023ae:	d010      	beq.n	81023d2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 81023b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81023b4:	d816      	bhi.n	81023e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 81023b6:	2b00      	cmp	r3, #0
 81023b8:	d01d      	beq.n	81023f6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 81023ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81023be:	d111      	bne.n	81023e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	3304      	adds	r3, #4
 81023c4:	2100      	movs	r1, #0
 81023c6:	4618      	mov	r0, r3
 81023c8:	f000 fcd6 	bl	8102d78 <RCCEx_PLL2_Config>
 81023cc:	4603      	mov	r3, r0
 81023ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81023d0:	e012      	b.n	81023f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81023d2:	687b      	ldr	r3, [r7, #4]
 81023d4:	3324      	adds	r3, #36	; 0x24
 81023d6:	2102      	movs	r1, #2
 81023d8:	4618      	mov	r0, r3
 81023da:	f000 fd7f 	bl	8102edc <RCCEx_PLL3_Config>
 81023de:	4603      	mov	r3, r0
 81023e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81023e2:	e009      	b.n	81023f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81023e4:	2301      	movs	r3, #1
 81023e6:	75fb      	strb	r3, [r7, #23]
      break;
 81023e8:	e006      	b.n	81023f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81023ea:	bf00      	nop
 81023ec:	e004      	b.n	81023f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81023ee:	bf00      	nop
 81023f0:	e002      	b.n	81023f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81023f2:	bf00      	nop
 81023f4:	e000      	b.n	81023f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81023f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81023f8:	7dfb      	ldrb	r3, [r7, #23]
 81023fa:	2b00      	cmp	r3, #0
 81023fc:	d10c      	bne.n	8102418 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81023fe:	4b05      	ldr	r3, [pc, #20]	; (8102414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102402:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8102406:	687b      	ldr	r3, [r7, #4]
 8102408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810240c:	4901      	ldr	r1, [pc, #4]	; (8102414 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810240e:	4313      	orrs	r3, r2
 8102410:	658b      	str	r3, [r1, #88]	; 0x58
 8102412:	e003      	b.n	810241c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8102414:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102418:	7dfb      	ldrb	r3, [r7, #23]
 810241a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102424:	2b00      	cmp	r3, #0
 8102426:	d04b      	beq.n	81024c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810242e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102432:	d02e      	beq.n	8102492 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8102434:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102438:	d828      	bhi.n	810248c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810243a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810243e:	d02a      	beq.n	8102496 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8102440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102444:	d822      	bhi.n	810248c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8102446:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810244a:	d026      	beq.n	810249a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 810244c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102450:	d81c      	bhi.n	810248c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8102452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102456:	d010      	beq.n	810247a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8102458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810245c:	d816      	bhi.n	810248c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810245e:	2b00      	cmp	r3, #0
 8102460:	d01d      	beq.n	810249e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8102462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102466:	d111      	bne.n	810248c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102468:	687b      	ldr	r3, [r7, #4]
 810246a:	3304      	adds	r3, #4
 810246c:	2100      	movs	r1, #0
 810246e:	4618      	mov	r0, r3
 8102470:	f000 fc82 	bl	8102d78 <RCCEx_PLL2_Config>
 8102474:	4603      	mov	r3, r0
 8102476:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102478:	e012      	b.n	81024a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810247a:	687b      	ldr	r3, [r7, #4]
 810247c:	3324      	adds	r3, #36	; 0x24
 810247e:	2102      	movs	r1, #2
 8102480:	4618      	mov	r0, r3
 8102482:	f000 fd2b 	bl	8102edc <RCCEx_PLL3_Config>
 8102486:	4603      	mov	r3, r0
 8102488:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810248a:	e009      	b.n	81024a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810248c:	2301      	movs	r3, #1
 810248e:	75fb      	strb	r3, [r7, #23]
      break;
 8102490:	e006      	b.n	81024a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8102492:	bf00      	nop
 8102494:	e004      	b.n	81024a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8102496:	bf00      	nop
 8102498:	e002      	b.n	81024a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810249a:	bf00      	nop
 810249c:	e000      	b.n	81024a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810249e:	bf00      	nop
    }

    if(ret == HAL_OK)
 81024a0:	7dfb      	ldrb	r3, [r7, #23]
 81024a2:	2b00      	cmp	r3, #0
 81024a4:	d10a      	bne.n	81024bc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81024a6:	4b9d      	ldr	r3, [pc, #628]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81024aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81024ae:	687b      	ldr	r3, [r7, #4]
 81024b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81024b4:	4999      	ldr	r1, [pc, #612]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81024b6:	4313      	orrs	r3, r2
 81024b8:	658b      	str	r3, [r1, #88]	; 0x58
 81024ba:	e001      	b.n	81024c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024bc:	7dfb      	ldrb	r3, [r7, #23]
 81024be:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81024c0:	687b      	ldr	r3, [r7, #4]
 81024c2:	681b      	ldr	r3, [r3, #0]
 81024c4:	f003 0308 	and.w	r3, r3, #8
 81024c8:	2b00      	cmp	r3, #0
 81024ca:	d01a      	beq.n	8102502 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81024cc:	687b      	ldr	r3, [r7, #4]
 81024ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81024d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81024d6:	d10a      	bne.n	81024ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81024d8:	687b      	ldr	r3, [r7, #4]
 81024da:	3324      	adds	r3, #36	; 0x24
 81024dc:	2102      	movs	r1, #2
 81024de:	4618      	mov	r0, r3
 81024e0:	f000 fcfc 	bl	8102edc <RCCEx_PLL3_Config>
 81024e4:	4603      	mov	r3, r0
 81024e6:	2b00      	cmp	r3, #0
 81024e8:	d001      	beq.n	81024ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 81024ea:	2301      	movs	r3, #1
 81024ec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81024ee:	4b8b      	ldr	r3, [pc, #556]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81024fc:	4987      	ldr	r1, [pc, #540]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81024fe:	4313      	orrs	r3, r2
 8102500:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	681b      	ldr	r3, [r3, #0]
 8102506:	f003 0310 	and.w	r3, r3, #16
 810250a:	2b00      	cmp	r3, #0
 810250c:	d01a      	beq.n	8102544 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810250e:	687b      	ldr	r3, [r7, #4]
 8102510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102518:	d10a      	bne.n	8102530 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810251a:	687b      	ldr	r3, [r7, #4]
 810251c:	3324      	adds	r3, #36	; 0x24
 810251e:	2102      	movs	r1, #2
 8102520:	4618      	mov	r0, r3
 8102522:	f000 fcdb 	bl	8102edc <RCCEx_PLL3_Config>
 8102526:	4603      	mov	r3, r0
 8102528:	2b00      	cmp	r3, #0
 810252a:	d001      	beq.n	8102530 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 810252c:	2301      	movs	r3, #1
 810252e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102530:	4b7a      	ldr	r3, [pc, #488]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102538:	687b      	ldr	r3, [r7, #4]
 810253a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810253e:	4977      	ldr	r1, [pc, #476]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102540:	4313      	orrs	r3, r2
 8102542:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	681b      	ldr	r3, [r3, #0]
 8102548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810254c:	2b00      	cmp	r3, #0
 810254e:	d034      	beq.n	81025ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810255a:	d01d      	beq.n	8102598 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 810255c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102560:	d817      	bhi.n	8102592 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8102562:	2b00      	cmp	r3, #0
 8102564:	d003      	beq.n	810256e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8102566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810256a:	d009      	beq.n	8102580 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 810256c:	e011      	b.n	8102592 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810256e:	687b      	ldr	r3, [r7, #4]
 8102570:	3304      	adds	r3, #4
 8102572:	2100      	movs	r1, #0
 8102574:	4618      	mov	r0, r3
 8102576:	f000 fbff 	bl	8102d78 <RCCEx_PLL2_Config>
 810257a:	4603      	mov	r3, r0
 810257c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810257e:	e00c      	b.n	810259a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102580:	687b      	ldr	r3, [r7, #4]
 8102582:	3324      	adds	r3, #36	; 0x24
 8102584:	2102      	movs	r1, #2
 8102586:	4618      	mov	r0, r3
 8102588:	f000 fca8 	bl	8102edc <RCCEx_PLL3_Config>
 810258c:	4603      	mov	r3, r0
 810258e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102590:	e003      	b.n	810259a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102592:	2301      	movs	r3, #1
 8102594:	75fb      	strb	r3, [r7, #23]
      break;
 8102596:	e000      	b.n	810259a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8102598:	bf00      	nop
    }

    if(ret == HAL_OK)
 810259a:	7dfb      	ldrb	r3, [r7, #23]
 810259c:	2b00      	cmp	r3, #0
 810259e:	d10a      	bne.n	81025b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81025a0:	4b5e      	ldr	r3, [pc, #376]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81025a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81025a8:	687b      	ldr	r3, [r7, #4]
 81025aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81025ae:	495b      	ldr	r1, [pc, #364]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81025b0:	4313      	orrs	r3, r2
 81025b2:	658b      	str	r3, [r1, #88]	; 0x58
 81025b4:	e001      	b.n	81025ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025b6:	7dfb      	ldrb	r3, [r7, #23]
 81025b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81025ba:	687b      	ldr	r3, [r7, #4]
 81025bc:	681b      	ldr	r3, [r3, #0]
 81025be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81025c2:	2b00      	cmp	r3, #0
 81025c4:	d033      	beq.n	810262e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81025c6:	687b      	ldr	r3, [r7, #4]
 81025c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81025cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81025d0:	d01c      	beq.n	810260c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 81025d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81025d6:	d816      	bhi.n	8102606 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 81025d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81025dc:	d003      	beq.n	81025e6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 81025de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81025e2:	d007      	beq.n	81025f4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 81025e4:	e00f      	b.n	8102606 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81025e6:	4b4d      	ldr	r3, [pc, #308]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81025ea:	4a4c      	ldr	r2, [pc, #304]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81025ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81025f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81025f2:	e00c      	b.n	810260e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81025f4:	687b      	ldr	r3, [r7, #4]
 81025f6:	3324      	adds	r3, #36	; 0x24
 81025f8:	2101      	movs	r1, #1
 81025fa:	4618      	mov	r0, r3
 81025fc:	f000 fc6e 	bl	8102edc <RCCEx_PLL3_Config>
 8102600:	4603      	mov	r3, r0
 8102602:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8102604:	e003      	b.n	810260e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102606:	2301      	movs	r3, #1
 8102608:	75fb      	strb	r3, [r7, #23]
      break;
 810260a:	e000      	b.n	810260e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 810260c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810260e:	7dfb      	ldrb	r3, [r7, #23]
 8102610:	2b00      	cmp	r3, #0
 8102612:	d10a      	bne.n	810262a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102614:	4b41      	ldr	r3, [pc, #260]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810261c:	687b      	ldr	r3, [r7, #4]
 810261e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102622:	493e      	ldr	r1, [pc, #248]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102624:	4313      	orrs	r3, r2
 8102626:	654b      	str	r3, [r1, #84]	; 0x54
 8102628:	e001      	b.n	810262e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810262a:	7dfb      	ldrb	r3, [r7, #23]
 810262c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	681b      	ldr	r3, [r3, #0]
 8102632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102636:	2b00      	cmp	r3, #0
 8102638:	d029      	beq.n	810268e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810263e:	2b00      	cmp	r3, #0
 8102640:	d003      	beq.n	810264a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8102642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102646:	d007      	beq.n	8102658 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8102648:	e00f      	b.n	810266a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810264a:	4b34      	ldr	r3, [pc, #208]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810264e:	4a33      	ldr	r2, [pc, #204]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102654:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102656:	e00b      	b.n	8102670 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102658:	687b      	ldr	r3, [r7, #4]
 810265a:	3304      	adds	r3, #4
 810265c:	2102      	movs	r1, #2
 810265e:	4618      	mov	r0, r3
 8102660:	f000 fb8a 	bl	8102d78 <RCCEx_PLL2_Config>
 8102664:	4603      	mov	r3, r0
 8102666:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102668:	e002      	b.n	8102670 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 810266a:	2301      	movs	r3, #1
 810266c:	75fb      	strb	r3, [r7, #23]
      break;
 810266e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102670:	7dfb      	ldrb	r3, [r7, #23]
 8102672:	2b00      	cmp	r3, #0
 8102674:	d109      	bne.n	810268a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8102676:	4b29      	ldr	r3, [pc, #164]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810267a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810267e:	687b      	ldr	r3, [r7, #4]
 8102680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102682:	4926      	ldr	r1, [pc, #152]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102684:	4313      	orrs	r3, r2
 8102686:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102688:	e001      	b.n	810268e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810268a:	7dfb      	ldrb	r3, [r7, #23]
 810268c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810268e:	687b      	ldr	r3, [r7, #4]
 8102690:	681b      	ldr	r3, [r3, #0]
 8102692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102696:	2b00      	cmp	r3, #0
 8102698:	d00a      	beq.n	81026b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810269a:	687b      	ldr	r3, [r7, #4]
 810269c:	3324      	adds	r3, #36	; 0x24
 810269e:	2102      	movs	r1, #2
 81026a0:	4618      	mov	r0, r3
 81026a2:	f000 fc1b 	bl	8102edc <RCCEx_PLL3_Config>
 81026a6:	4603      	mov	r3, r0
 81026a8:	2b00      	cmp	r3, #0
 81026aa:	d001      	beq.n	81026b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 81026ac:	2301      	movs	r3, #1
 81026ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	681b      	ldr	r3, [r3, #0]
 81026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81026b8:	2b00      	cmp	r3, #0
 81026ba:	d033      	beq.n	8102724 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 81026bc:	687b      	ldr	r3, [r7, #4]
 81026be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81026c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81026c4:	d017      	beq.n	81026f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81026c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81026ca:	d811      	bhi.n	81026f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81026cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81026d0:	d013      	beq.n	81026fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81026d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81026d6:	d80b      	bhi.n	81026f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81026d8:	2b00      	cmp	r3, #0
 81026da:	d010      	beq.n	81026fe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 81026dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81026e0:	d106      	bne.n	81026f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81026e2:	4b0e      	ldr	r3, [pc, #56]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81026e6:	4a0d      	ldr	r2, [pc, #52]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81026e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81026ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81026ee:	e007      	b.n	8102700 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81026f0:	2301      	movs	r3, #1
 81026f2:	75fb      	strb	r3, [r7, #23]
      break;
 81026f4:	e004      	b.n	8102700 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81026f6:	bf00      	nop
 81026f8:	e002      	b.n	8102700 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81026fa:	bf00      	nop
 81026fc:	e000      	b.n	8102700 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81026fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102700:	7dfb      	ldrb	r3, [r7, #23]
 8102702:	2b00      	cmp	r3, #0
 8102704:	d10c      	bne.n	8102720 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102706:	4b05      	ldr	r3, [pc, #20]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810270a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810270e:	687b      	ldr	r3, [r7, #4]
 8102710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102712:	4902      	ldr	r1, [pc, #8]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102714:	4313      	orrs	r3, r2
 8102716:	654b      	str	r3, [r1, #84]	; 0x54
 8102718:	e004      	b.n	8102724 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 810271a:	bf00      	nop
 810271c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102720:	7dfb      	ldrb	r3, [r7, #23]
 8102722:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102724:	687b      	ldr	r3, [r7, #4]
 8102726:	681b      	ldr	r3, [r3, #0]
 8102728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810272c:	2b00      	cmp	r3, #0
 810272e:	d008      	beq.n	8102742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8102730:	4b31      	ldr	r3, [pc, #196]	; (81027f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102734:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102738:	687b      	ldr	r3, [r7, #4]
 810273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810273c:	492e      	ldr	r1, [pc, #184]	; (81027f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810273e:	4313      	orrs	r3, r2
 8102740:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102742:	687b      	ldr	r3, [r7, #4]
 8102744:	681b      	ldr	r3, [r3, #0]
 8102746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810274a:	2b00      	cmp	r3, #0
 810274c:	d009      	beq.n	8102762 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810274e:	4b2a      	ldr	r3, [pc, #168]	; (81027f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102750:	691b      	ldr	r3, [r3, #16]
 8102752:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8102756:	687b      	ldr	r3, [r7, #4]
 8102758:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810275c:	4926      	ldr	r1, [pc, #152]	; (81027f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810275e:	4313      	orrs	r3, r2
 8102760:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102762:	687b      	ldr	r3, [r7, #4]
 8102764:	681b      	ldr	r3, [r3, #0]
 8102766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810276a:	2b00      	cmp	r3, #0
 810276c:	d008      	beq.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810276e:	4b22      	ldr	r3, [pc, #136]	; (81027f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102772:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8102776:	687b      	ldr	r3, [r7, #4]
 8102778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810277a:	491f      	ldr	r1, [pc, #124]	; (81027f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810277c:	4313      	orrs	r3, r2
 810277e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102780:	687b      	ldr	r3, [r7, #4]
 8102782:	681b      	ldr	r3, [r3, #0]
 8102784:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8102788:	2b00      	cmp	r3, #0
 810278a:	d00d      	beq.n	81027a8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810278c:	4b1a      	ldr	r3, [pc, #104]	; (81027f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810278e:	691b      	ldr	r3, [r3, #16]
 8102790:	4a19      	ldr	r2, [pc, #100]	; (81027f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8102792:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8102796:	6113      	str	r3, [r2, #16]
 8102798:	4b17      	ldr	r3, [pc, #92]	; (81027f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810279a:	691a      	ldr	r2, [r3, #16]
 810279c:	687b      	ldr	r3, [r7, #4]
 810279e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81027a2:	4915      	ldr	r1, [pc, #84]	; (81027f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81027a4:	4313      	orrs	r3, r2
 81027a6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81027a8:	687b      	ldr	r3, [r7, #4]
 81027aa:	681b      	ldr	r3, [r3, #0]
 81027ac:	2b00      	cmp	r3, #0
 81027ae:	da08      	bge.n	81027c2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81027b0:	4b11      	ldr	r3, [pc, #68]	; (81027f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81027b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81027b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81027bc:	490e      	ldr	r1, [pc, #56]	; (81027f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81027be:	4313      	orrs	r3, r2
 81027c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81027c2:	687b      	ldr	r3, [r7, #4]
 81027c4:	681b      	ldr	r3, [r3, #0]
 81027c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81027ca:	2b00      	cmp	r3, #0
 81027cc:	d009      	beq.n	81027e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81027ce:	4b0a      	ldr	r3, [pc, #40]	; (81027f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81027d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81027dc:	4906      	ldr	r1, [pc, #24]	; (81027f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81027de:	4313      	orrs	r3, r2
 81027e0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81027e2:	7dbb      	ldrb	r3, [r7, #22]
 81027e4:	2b00      	cmp	r3, #0
 81027e6:	d101      	bne.n	81027ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 81027e8:	2300      	movs	r3, #0
 81027ea:	e000      	b.n	81027ee <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 81027ec:	2301      	movs	r3, #1
}
 81027ee:	4618      	mov	r0, r3
 81027f0:	3718      	adds	r7, #24
 81027f2:	46bd      	mov	sp, r7
 81027f4:	bd80      	pop	{r7, pc}
 81027f6:	bf00      	nop
 81027f8:	58024400 	.word	0x58024400

081027fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81027fc:	b580      	push	{r7, lr}
 81027fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8102800:	f7ff f858 	bl	81018b4 <HAL_RCC_GetHCLKFreq>
 8102804:	4602      	mov	r2, r0
 8102806:	4b06      	ldr	r3, [pc, #24]	; (8102820 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8102808:	6a1b      	ldr	r3, [r3, #32]
 810280a:	091b      	lsrs	r3, r3, #4
 810280c:	f003 0307 	and.w	r3, r3, #7
 8102810:	4904      	ldr	r1, [pc, #16]	; (8102824 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8102812:	5ccb      	ldrb	r3, [r1, r3]
 8102814:	f003 031f 	and.w	r3, r3, #31
 8102818:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810281c:	4618      	mov	r0, r3
 810281e:	bd80      	pop	{r7, pc}
 8102820:	58024400 	.word	0x58024400
 8102824:	08104190 	.word	0x08104190

08102828 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8102828:	b480      	push	{r7}
 810282a:	b089      	sub	sp, #36	; 0x24
 810282c:	af00      	add	r7, sp, #0
 810282e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102830:	4ba1      	ldr	r3, [pc, #644]	; (8102ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102834:	f003 0303 	and.w	r3, r3, #3
 8102838:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810283a:	4b9f      	ldr	r3, [pc, #636]	; (8102ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810283e:	0b1b      	lsrs	r3, r3, #12
 8102840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102844:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8102846:	4b9c      	ldr	r3, [pc, #624]	; (8102ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810284a:	091b      	lsrs	r3, r3, #4
 810284c:	f003 0301 	and.w	r3, r3, #1
 8102850:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8102852:	4b99      	ldr	r3, [pc, #612]	; (8102ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102856:	08db      	lsrs	r3, r3, #3
 8102858:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810285c:	693a      	ldr	r2, [r7, #16]
 810285e:	fb02 f303 	mul.w	r3, r2, r3
 8102862:	ee07 3a90 	vmov	s15, r3
 8102866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810286a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810286e:	697b      	ldr	r3, [r7, #20]
 8102870:	2b00      	cmp	r3, #0
 8102872:	f000 8111 	beq.w	8102a98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8102876:	69bb      	ldr	r3, [r7, #24]
 8102878:	2b02      	cmp	r3, #2
 810287a:	f000 8083 	beq.w	8102984 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810287e:	69bb      	ldr	r3, [r7, #24]
 8102880:	2b02      	cmp	r3, #2
 8102882:	f200 80a1 	bhi.w	81029c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8102886:	69bb      	ldr	r3, [r7, #24]
 8102888:	2b00      	cmp	r3, #0
 810288a:	d003      	beq.n	8102894 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810288c:	69bb      	ldr	r3, [r7, #24]
 810288e:	2b01      	cmp	r3, #1
 8102890:	d056      	beq.n	8102940 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8102892:	e099      	b.n	81029c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102894:	4b88      	ldr	r3, [pc, #544]	; (8102ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102896:	681b      	ldr	r3, [r3, #0]
 8102898:	f003 0320 	and.w	r3, r3, #32
 810289c:	2b00      	cmp	r3, #0
 810289e:	d02d      	beq.n	81028fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81028a0:	4b85      	ldr	r3, [pc, #532]	; (8102ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81028a2:	681b      	ldr	r3, [r3, #0]
 81028a4:	08db      	lsrs	r3, r3, #3
 81028a6:	f003 0303 	and.w	r3, r3, #3
 81028aa:	4a84      	ldr	r2, [pc, #528]	; (8102abc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81028ac:	fa22 f303 	lsr.w	r3, r2, r3
 81028b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81028b2:	68bb      	ldr	r3, [r7, #8]
 81028b4:	ee07 3a90 	vmov	s15, r3
 81028b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028bc:	697b      	ldr	r3, [r7, #20]
 81028be:	ee07 3a90 	vmov	s15, r3
 81028c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81028ca:	4b7b      	ldr	r3, [pc, #492]	; (8102ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81028ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028d2:	ee07 3a90 	vmov	s15, r3
 81028d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028da:	ed97 6a03 	vldr	s12, [r7, #12]
 81028de:	eddf 5a78 	vldr	s11, [pc, #480]	; 8102ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81028e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81028ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81028fa:	e087      	b.n	8102a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81028fc:	697b      	ldr	r3, [r7, #20]
 81028fe:	ee07 3a90 	vmov	s15, r3
 8102902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102906:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8102ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810290a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810290e:	4b6a      	ldr	r3, [pc, #424]	; (8102ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102916:	ee07 3a90 	vmov	s15, r3
 810291a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810291e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102922:	eddf 5a67 	vldr	s11, [pc, #412]	; 8102ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810292a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810292e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102936:	ee67 7a27 	vmul.f32	s15, s14, s15
 810293a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810293e:	e065      	b.n	8102a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102940:	697b      	ldr	r3, [r7, #20]
 8102942:	ee07 3a90 	vmov	s15, r3
 8102946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810294a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8102ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810294e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102952:	4b59      	ldr	r3, [pc, #356]	; (8102ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810295a:	ee07 3a90 	vmov	s15, r3
 810295e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102962:	ed97 6a03 	vldr	s12, [r7, #12]
 8102966:	eddf 5a56 	vldr	s11, [pc, #344]	; 8102ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810296a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810296e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810297a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810297e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102982:	e043      	b.n	8102a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102984:	697b      	ldr	r3, [r7, #20]
 8102986:	ee07 3a90 	vmov	s15, r3
 810298a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810298e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8102acc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8102992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102996:	4b48      	ldr	r3, [pc, #288]	; (8102ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810299a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810299e:	ee07 3a90 	vmov	s15, r3
 81029a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81029a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81029aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8102ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81029ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81029b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81029b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81029ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81029be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81029c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81029c6:	e021      	b.n	8102a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81029c8:	697b      	ldr	r3, [r7, #20]
 81029ca:	ee07 3a90 	vmov	s15, r3
 81029ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8102ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81029d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81029da:	4b37      	ldr	r3, [pc, #220]	; (8102ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81029de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81029e2:	ee07 3a90 	vmov	s15, r3
 81029e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81029ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81029ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8102ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81029f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81029f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81029fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81029fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102a06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102a0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8102a0c:	4b2a      	ldr	r3, [pc, #168]	; (8102ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102a10:	0a5b      	lsrs	r3, r3, #9
 8102a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102a16:	ee07 3a90 	vmov	s15, r3
 8102a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102a22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8102a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102a32:	ee17 2a90 	vmov	r2, s15
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8102a3a:	4b1f      	ldr	r3, [pc, #124]	; (8102ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102a3e:	0c1b      	lsrs	r3, r3, #16
 8102a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102a44:	ee07 3a90 	vmov	s15, r3
 8102a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102a50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8102a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102a60:	ee17 2a90 	vmov	r2, s15
 8102a64:	687b      	ldr	r3, [r7, #4]
 8102a66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8102a68:	4b13      	ldr	r3, [pc, #76]	; (8102ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102a6c:	0e1b      	lsrs	r3, r3, #24
 8102a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102a72:	ee07 3a90 	vmov	s15, r3
 8102a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8102a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102a8e:	ee17 2a90 	vmov	r2, s15
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8102a96:	e008      	b.n	8102aaa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	2200      	movs	r2, #0
 8102a9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	2200      	movs	r2, #0
 8102aa2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	2200      	movs	r2, #0
 8102aa8:	609a      	str	r2, [r3, #8]
}
 8102aaa:	bf00      	nop
 8102aac:	3724      	adds	r7, #36	; 0x24
 8102aae:	46bd      	mov	sp, r7
 8102ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ab4:	4770      	bx	lr
 8102ab6:	bf00      	nop
 8102ab8:	58024400 	.word	0x58024400
 8102abc:	03d09000 	.word	0x03d09000
 8102ac0:	46000000 	.word	0x46000000
 8102ac4:	4c742400 	.word	0x4c742400
 8102ac8:	4a742400 	.word	0x4a742400
 8102acc:	4af42400 	.word	0x4af42400

08102ad0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8102ad0:	b480      	push	{r7}
 8102ad2:	b089      	sub	sp, #36	; 0x24
 8102ad4:	af00      	add	r7, sp, #0
 8102ad6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102ad8:	4ba1      	ldr	r3, [pc, #644]	; (8102d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102adc:	f003 0303 	and.w	r3, r3, #3
 8102ae0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8102ae2:	4b9f      	ldr	r3, [pc, #636]	; (8102d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102ae6:	0d1b      	lsrs	r3, r3, #20
 8102ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102aec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8102aee:	4b9c      	ldr	r3, [pc, #624]	; (8102d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102af2:	0a1b      	lsrs	r3, r3, #8
 8102af4:	f003 0301 	and.w	r3, r3, #1
 8102af8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8102afa:	4b99      	ldr	r3, [pc, #612]	; (8102d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102afe:	08db      	lsrs	r3, r3, #3
 8102b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102b04:	693a      	ldr	r2, [r7, #16]
 8102b06:	fb02 f303 	mul.w	r3, r2, r3
 8102b0a:	ee07 3a90 	vmov	s15, r3
 8102b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8102b16:	697b      	ldr	r3, [r7, #20]
 8102b18:	2b00      	cmp	r3, #0
 8102b1a:	f000 8111 	beq.w	8102d40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8102b1e:	69bb      	ldr	r3, [r7, #24]
 8102b20:	2b02      	cmp	r3, #2
 8102b22:	f000 8083 	beq.w	8102c2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8102b26:	69bb      	ldr	r3, [r7, #24]
 8102b28:	2b02      	cmp	r3, #2
 8102b2a:	f200 80a1 	bhi.w	8102c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8102b2e:	69bb      	ldr	r3, [r7, #24]
 8102b30:	2b00      	cmp	r3, #0
 8102b32:	d003      	beq.n	8102b3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8102b34:	69bb      	ldr	r3, [r7, #24]
 8102b36:	2b01      	cmp	r3, #1
 8102b38:	d056      	beq.n	8102be8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8102b3a:	e099      	b.n	8102c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102b3c:	4b88      	ldr	r3, [pc, #544]	; (8102d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102b3e:	681b      	ldr	r3, [r3, #0]
 8102b40:	f003 0320 	and.w	r3, r3, #32
 8102b44:	2b00      	cmp	r3, #0
 8102b46:	d02d      	beq.n	8102ba4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102b48:	4b85      	ldr	r3, [pc, #532]	; (8102d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102b4a:	681b      	ldr	r3, [r3, #0]
 8102b4c:	08db      	lsrs	r3, r3, #3
 8102b4e:	f003 0303 	and.w	r3, r3, #3
 8102b52:	4a84      	ldr	r2, [pc, #528]	; (8102d64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8102b54:	fa22 f303 	lsr.w	r3, r2, r3
 8102b58:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102b5a:	68bb      	ldr	r3, [r7, #8]
 8102b5c:	ee07 3a90 	vmov	s15, r3
 8102b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b64:	697b      	ldr	r3, [r7, #20]
 8102b66:	ee07 3a90 	vmov	s15, r3
 8102b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b72:	4b7b      	ldr	r3, [pc, #492]	; (8102d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b7a:	ee07 3a90 	vmov	s15, r3
 8102b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8102b86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8102d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8102ba2:	e087      	b.n	8102cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102ba4:	697b      	ldr	r3, [r7, #20]
 8102ba6:	ee07 3a90 	vmov	s15, r3
 8102baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8102d6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8102bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102bb6:	4b6a      	ldr	r3, [pc, #424]	; (8102d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102bbe:	ee07 3a90 	vmov	s15, r3
 8102bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8102bca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8102d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102be2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102be6:	e065      	b.n	8102cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102be8:	697b      	ldr	r3, [r7, #20]
 8102bea:	ee07 3a90 	vmov	s15, r3
 8102bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bf2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8102d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8102bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102bfa:	4b59      	ldr	r3, [pc, #356]	; (8102d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c02:	ee07 3a90 	vmov	s15, r3
 8102c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8102c0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8102d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102c2a:	e043      	b.n	8102cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102c2c:	697b      	ldr	r3, [r7, #20]
 8102c2e:	ee07 3a90 	vmov	s15, r3
 8102c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8102d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8102c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102c3e:	4b48      	ldr	r3, [pc, #288]	; (8102d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c46:	ee07 3a90 	vmov	s15, r3
 8102c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102c52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8102d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102c6e:	e021      	b.n	8102cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102c70:	697b      	ldr	r3, [r7, #20]
 8102c72:	ee07 3a90 	vmov	s15, r3
 8102c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8102d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8102c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102c82:	4b37      	ldr	r3, [pc, #220]	; (8102d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c8a:	ee07 3a90 	vmov	s15, r3
 8102c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8102c96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8102d68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102cae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102cb2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8102cb4:	4b2a      	ldr	r3, [pc, #168]	; (8102d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102cb8:	0a5b      	lsrs	r3, r3, #9
 8102cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102cbe:	ee07 3a90 	vmov	s15, r3
 8102cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102cca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8102cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102cda:	ee17 2a90 	vmov	r2, s15
 8102cde:	687b      	ldr	r3, [r7, #4]
 8102ce0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8102ce2:	4b1f      	ldr	r3, [pc, #124]	; (8102d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ce6:	0c1b      	lsrs	r3, r3, #16
 8102ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102cec:	ee07 3a90 	vmov	s15, r3
 8102cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102cf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102cfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8102d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102d08:	ee17 2a90 	vmov	r2, s15
 8102d0c:	687b      	ldr	r3, [r7, #4]
 8102d0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8102d10:	4b13      	ldr	r3, [pc, #76]	; (8102d60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102d14:	0e1b      	lsrs	r3, r3, #24
 8102d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102d1a:	ee07 3a90 	vmov	s15, r3
 8102d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8102d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102d36:	ee17 2a90 	vmov	r2, s15
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8102d3e:	e008      	b.n	8102d52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	2200      	movs	r2, #0
 8102d44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	2200      	movs	r2, #0
 8102d4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8102d4c:	687b      	ldr	r3, [r7, #4]
 8102d4e:	2200      	movs	r2, #0
 8102d50:	609a      	str	r2, [r3, #8]
}
 8102d52:	bf00      	nop
 8102d54:	3724      	adds	r7, #36	; 0x24
 8102d56:	46bd      	mov	sp, r7
 8102d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d5c:	4770      	bx	lr
 8102d5e:	bf00      	nop
 8102d60:	58024400 	.word	0x58024400
 8102d64:	03d09000 	.word	0x03d09000
 8102d68:	46000000 	.word	0x46000000
 8102d6c:	4c742400 	.word	0x4c742400
 8102d70:	4a742400 	.word	0x4a742400
 8102d74:	4af42400 	.word	0x4af42400

08102d78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102d78:	b580      	push	{r7, lr}
 8102d7a:	b084      	sub	sp, #16
 8102d7c:	af00      	add	r7, sp, #0
 8102d7e:	6078      	str	r0, [r7, #4]
 8102d80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102d82:	2300      	movs	r3, #0
 8102d84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102d86:	4b54      	ldr	r3, [pc, #336]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102d8a:	f003 0303 	and.w	r3, r3, #3
 8102d8e:	2b03      	cmp	r3, #3
 8102d90:	d101      	bne.n	8102d96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8102d92:	2301      	movs	r3, #1
 8102d94:	e09b      	b.n	8102ece <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102d96:	4b50      	ldr	r3, [pc, #320]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102d98:	681b      	ldr	r3, [r3, #0]
 8102d9a:	4a4f      	ldr	r2, [pc, #316]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102d9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8102da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102da2:	f7fd ff47 	bl	8100c34 <HAL_GetTick>
 8102da6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102da8:	e008      	b.n	8102dbc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102daa:	f7fd ff43 	bl	8100c34 <HAL_GetTick>
 8102dae:	4602      	mov	r2, r0
 8102db0:	68bb      	ldr	r3, [r7, #8]
 8102db2:	1ad3      	subs	r3, r2, r3
 8102db4:	2b02      	cmp	r3, #2
 8102db6:	d901      	bls.n	8102dbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102db8:	2303      	movs	r3, #3
 8102dba:	e088      	b.n	8102ece <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102dbc:	4b46      	ldr	r3, [pc, #280]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102dbe:	681b      	ldr	r3, [r3, #0]
 8102dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102dc4:	2b00      	cmp	r3, #0
 8102dc6:	d1f0      	bne.n	8102daa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102dc8:	4b43      	ldr	r3, [pc, #268]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102dcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8102dd0:	687b      	ldr	r3, [r7, #4]
 8102dd2:	681b      	ldr	r3, [r3, #0]
 8102dd4:	031b      	lsls	r3, r3, #12
 8102dd6:	4940      	ldr	r1, [pc, #256]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102dd8:	4313      	orrs	r3, r2
 8102dda:	628b      	str	r3, [r1, #40]	; 0x28
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	685b      	ldr	r3, [r3, #4]
 8102de0:	3b01      	subs	r3, #1
 8102de2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	689b      	ldr	r3, [r3, #8]
 8102dea:	3b01      	subs	r3, #1
 8102dec:	025b      	lsls	r3, r3, #9
 8102dee:	b29b      	uxth	r3, r3
 8102df0:	431a      	orrs	r2, r3
 8102df2:	687b      	ldr	r3, [r7, #4]
 8102df4:	68db      	ldr	r3, [r3, #12]
 8102df6:	3b01      	subs	r3, #1
 8102df8:	041b      	lsls	r3, r3, #16
 8102dfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102dfe:	431a      	orrs	r2, r3
 8102e00:	687b      	ldr	r3, [r7, #4]
 8102e02:	691b      	ldr	r3, [r3, #16]
 8102e04:	3b01      	subs	r3, #1
 8102e06:	061b      	lsls	r3, r3, #24
 8102e08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102e0c:	4932      	ldr	r1, [pc, #200]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e0e:	4313      	orrs	r3, r2
 8102e10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102e12:	4b31      	ldr	r3, [pc, #196]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8102e1a:	687b      	ldr	r3, [r7, #4]
 8102e1c:	695b      	ldr	r3, [r3, #20]
 8102e1e:	492e      	ldr	r1, [pc, #184]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e20:	4313      	orrs	r3, r2
 8102e22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8102e24:	4b2c      	ldr	r3, [pc, #176]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e28:	f023 0220 	bic.w	r2, r3, #32
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	699b      	ldr	r3, [r3, #24]
 8102e30:	4929      	ldr	r1, [pc, #164]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e32:	4313      	orrs	r3, r2
 8102e34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8102e36:	4b28      	ldr	r3, [pc, #160]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e3a:	4a27      	ldr	r2, [pc, #156]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e3c:	f023 0310 	bic.w	r3, r3, #16
 8102e40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8102e42:	4b25      	ldr	r3, [pc, #148]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102e4a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102e4e:	687a      	ldr	r2, [r7, #4]
 8102e50:	69d2      	ldr	r2, [r2, #28]
 8102e52:	00d2      	lsls	r2, r2, #3
 8102e54:	4920      	ldr	r1, [pc, #128]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e56:	4313      	orrs	r3, r2
 8102e58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8102e5a:	4b1f      	ldr	r3, [pc, #124]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e5e:	4a1e      	ldr	r2, [pc, #120]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e60:	f043 0310 	orr.w	r3, r3, #16
 8102e64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102e66:	683b      	ldr	r3, [r7, #0]
 8102e68:	2b00      	cmp	r3, #0
 8102e6a:	d106      	bne.n	8102e7a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8102e6c:	4b1a      	ldr	r3, [pc, #104]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e70:	4a19      	ldr	r2, [pc, #100]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8102e76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102e78:	e00f      	b.n	8102e9a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102e7a:	683b      	ldr	r3, [r7, #0]
 8102e7c:	2b01      	cmp	r3, #1
 8102e7e:	d106      	bne.n	8102e8e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8102e80:	4b15      	ldr	r3, [pc, #84]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e84:	4a14      	ldr	r2, [pc, #80]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102e8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102e8c:	e005      	b.n	8102e9a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8102e8e:	4b12      	ldr	r3, [pc, #72]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e92:	4a11      	ldr	r2, [pc, #68]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102e98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8102e9a:	4b0f      	ldr	r3, [pc, #60]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102e9c:	681b      	ldr	r3, [r3, #0]
 8102e9e:	4a0e      	ldr	r2, [pc, #56]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102ea0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8102ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102ea6:	f7fd fec5 	bl	8100c34 <HAL_GetTick>
 8102eaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102eac:	e008      	b.n	8102ec0 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102eae:	f7fd fec1 	bl	8100c34 <HAL_GetTick>
 8102eb2:	4602      	mov	r2, r0
 8102eb4:	68bb      	ldr	r3, [r7, #8]
 8102eb6:	1ad3      	subs	r3, r2, r3
 8102eb8:	2b02      	cmp	r3, #2
 8102eba:	d901      	bls.n	8102ec0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102ebc:	2303      	movs	r3, #3
 8102ebe:	e006      	b.n	8102ece <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102ec0:	4b05      	ldr	r3, [pc, #20]	; (8102ed8 <RCCEx_PLL2_Config+0x160>)
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102ec8:	2b00      	cmp	r3, #0
 8102eca:	d0f0      	beq.n	8102eae <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8102ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8102ece:	4618      	mov	r0, r3
 8102ed0:	3710      	adds	r7, #16
 8102ed2:	46bd      	mov	sp, r7
 8102ed4:	bd80      	pop	{r7, pc}
 8102ed6:	bf00      	nop
 8102ed8:	58024400 	.word	0x58024400

08102edc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8102edc:	b580      	push	{r7, lr}
 8102ede:	b084      	sub	sp, #16
 8102ee0:	af00      	add	r7, sp, #0
 8102ee2:	6078      	str	r0, [r7, #4]
 8102ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102ee6:	2300      	movs	r3, #0
 8102ee8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102eea:	4b54      	ldr	r3, [pc, #336]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102eee:	f003 0303 	and.w	r3, r3, #3
 8102ef2:	2b03      	cmp	r3, #3
 8102ef4:	d101      	bne.n	8102efa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8102ef6:	2301      	movs	r3, #1
 8102ef8:	e09b      	b.n	8103032 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8102efa:	4b50      	ldr	r3, [pc, #320]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102efc:	681b      	ldr	r3, [r3, #0]
 8102efe:	4a4f      	ldr	r2, [pc, #316]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8102f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102f06:	f7fd fe95 	bl	8100c34 <HAL_GetTick>
 8102f0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102f0c:	e008      	b.n	8102f20 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8102f0e:	f7fd fe91 	bl	8100c34 <HAL_GetTick>
 8102f12:	4602      	mov	r2, r0
 8102f14:	68bb      	ldr	r3, [r7, #8]
 8102f16:	1ad3      	subs	r3, r2, r3
 8102f18:	2b02      	cmp	r3, #2
 8102f1a:	d901      	bls.n	8102f20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102f1c:	2303      	movs	r3, #3
 8102f1e:	e088      	b.n	8103032 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102f20:	4b46      	ldr	r3, [pc, #280]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102f22:	681b      	ldr	r3, [r3, #0]
 8102f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102f28:	2b00      	cmp	r3, #0
 8102f2a:	d1f0      	bne.n	8102f0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8102f2c:	4b43      	ldr	r3, [pc, #268]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102f30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8102f34:	687b      	ldr	r3, [r7, #4]
 8102f36:	681b      	ldr	r3, [r3, #0]
 8102f38:	051b      	lsls	r3, r3, #20
 8102f3a:	4940      	ldr	r1, [pc, #256]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102f3c:	4313      	orrs	r3, r2
 8102f3e:	628b      	str	r3, [r1, #40]	; 0x28
 8102f40:	687b      	ldr	r3, [r7, #4]
 8102f42:	685b      	ldr	r3, [r3, #4]
 8102f44:	3b01      	subs	r3, #1
 8102f46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102f4a:	687b      	ldr	r3, [r7, #4]
 8102f4c:	689b      	ldr	r3, [r3, #8]
 8102f4e:	3b01      	subs	r3, #1
 8102f50:	025b      	lsls	r3, r3, #9
 8102f52:	b29b      	uxth	r3, r3
 8102f54:	431a      	orrs	r2, r3
 8102f56:	687b      	ldr	r3, [r7, #4]
 8102f58:	68db      	ldr	r3, [r3, #12]
 8102f5a:	3b01      	subs	r3, #1
 8102f5c:	041b      	lsls	r3, r3, #16
 8102f5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102f62:	431a      	orrs	r2, r3
 8102f64:	687b      	ldr	r3, [r7, #4]
 8102f66:	691b      	ldr	r3, [r3, #16]
 8102f68:	3b01      	subs	r3, #1
 8102f6a:	061b      	lsls	r3, r3, #24
 8102f6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102f70:	4932      	ldr	r1, [pc, #200]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102f72:	4313      	orrs	r3, r2
 8102f74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8102f76:	4b31      	ldr	r3, [pc, #196]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	695b      	ldr	r3, [r3, #20]
 8102f82:	492e      	ldr	r1, [pc, #184]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102f84:	4313      	orrs	r3, r2
 8102f86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8102f88:	4b2c      	ldr	r3, [pc, #176]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	699b      	ldr	r3, [r3, #24]
 8102f94:	4929      	ldr	r1, [pc, #164]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102f96:	4313      	orrs	r3, r2
 8102f98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8102f9a:	4b28      	ldr	r3, [pc, #160]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f9e:	4a27      	ldr	r2, [pc, #156]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8102fa6:	4b25      	ldr	r3, [pc, #148]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102fae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102fb2:	687a      	ldr	r2, [r7, #4]
 8102fb4:	69d2      	ldr	r2, [r2, #28]
 8102fb6:	00d2      	lsls	r2, r2, #3
 8102fb8:	4920      	ldr	r1, [pc, #128]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102fba:	4313      	orrs	r3, r2
 8102fbc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8102fbe:	4b1f      	ldr	r3, [pc, #124]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fc2:	4a1e      	ldr	r2, [pc, #120]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102fca:	683b      	ldr	r3, [r7, #0]
 8102fcc:	2b00      	cmp	r3, #0
 8102fce:	d106      	bne.n	8102fde <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8102fd0:	4b1a      	ldr	r3, [pc, #104]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fd4:	4a19      	ldr	r2, [pc, #100]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102fd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102fdc:	e00f      	b.n	8102ffe <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102fde:	683b      	ldr	r3, [r7, #0]
 8102fe0:	2b01      	cmp	r3, #1
 8102fe2:	d106      	bne.n	8102ff2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8102fe4:	4b15      	ldr	r3, [pc, #84]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fe8:	4a14      	ldr	r2, [pc, #80]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102fea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102ff0:	e005      	b.n	8102ffe <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8102ff2:	4b12      	ldr	r3, [pc, #72]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ff6:	4a11      	ldr	r2, [pc, #68]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8102ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8102ffe:	4b0f      	ldr	r3, [pc, #60]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8103000:	681b      	ldr	r3, [r3, #0]
 8103002:	4a0e      	ldr	r2, [pc, #56]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8103004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810300a:	f7fd fe13 	bl	8100c34 <HAL_GetTick>
 810300e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103010:	e008      	b.n	8103024 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103012:	f7fd fe0f 	bl	8100c34 <HAL_GetTick>
 8103016:	4602      	mov	r2, r0
 8103018:	68bb      	ldr	r3, [r7, #8]
 810301a:	1ad3      	subs	r3, r2, r3
 810301c:	2b02      	cmp	r3, #2
 810301e:	d901      	bls.n	8103024 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103020:	2303      	movs	r3, #3
 8103022:	e006      	b.n	8103032 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103024:	4b05      	ldr	r3, [pc, #20]	; (810303c <RCCEx_PLL3_Config+0x160>)
 8103026:	681b      	ldr	r3, [r3, #0]
 8103028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810302c:	2b00      	cmp	r3, #0
 810302e:	d0f0      	beq.n	8103012 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103030:	7bfb      	ldrb	r3, [r7, #15]
}
 8103032:	4618      	mov	r0, r3
 8103034:	3710      	adds	r7, #16
 8103036:	46bd      	mov	sp, r7
 8103038:	bd80      	pop	{r7, pc}
 810303a:	bf00      	nop
 810303c:	58024400 	.word	0x58024400

08103040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8103040:	b580      	push	{r7, lr}
 8103042:	b082      	sub	sp, #8
 8103044:	af00      	add	r7, sp, #0
 8103046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	2b00      	cmp	r3, #0
 810304c:	d101      	bne.n	8103052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810304e:	2301      	movs	r3, #1
 8103050:	e042      	b.n	81030d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103058:	2b00      	cmp	r3, #0
 810305a:	d106      	bne.n	810306a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	2200      	movs	r2, #0
 8103060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8103064:	6878      	ldr	r0, [r7, #4]
 8103066:	f7fd fc7b 	bl	8100960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810306a:	687b      	ldr	r3, [r7, #4]
 810306c:	2224      	movs	r2, #36	; 0x24
 810306e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	681b      	ldr	r3, [r3, #0]
 8103076:	681a      	ldr	r2, [r3, #0]
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	f022 0201 	bic.w	r2, r2, #1
 8103080:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8103082:	6878      	ldr	r0, [r7, #4]
 8103084:	f000 f82c 	bl	81030e0 <UART_SetConfig>
 8103088:	4603      	mov	r3, r0
 810308a:	2b01      	cmp	r3, #1
 810308c:	d101      	bne.n	8103092 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810308e:	2301      	movs	r3, #1
 8103090:	e022      	b.n	81030d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103096:	2b00      	cmp	r3, #0
 8103098:	d002      	beq.n	81030a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810309a:	6878      	ldr	r0, [r7, #4]
 810309c:	f000 fd88 	bl	8103bb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81030a0:	687b      	ldr	r3, [r7, #4]
 81030a2:	681b      	ldr	r3, [r3, #0]
 81030a4:	685a      	ldr	r2, [r3, #4]
 81030a6:	687b      	ldr	r3, [r7, #4]
 81030a8:	681b      	ldr	r3, [r3, #0]
 81030aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81030ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81030b0:	687b      	ldr	r3, [r7, #4]
 81030b2:	681b      	ldr	r3, [r3, #0]
 81030b4:	689a      	ldr	r2, [r3, #8]
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	681b      	ldr	r3, [r3, #0]
 81030ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81030be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81030c0:	687b      	ldr	r3, [r7, #4]
 81030c2:	681b      	ldr	r3, [r3, #0]
 81030c4:	681a      	ldr	r2, [r3, #0]
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	681b      	ldr	r3, [r3, #0]
 81030ca:	f042 0201 	orr.w	r2, r2, #1
 81030ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81030d0:	6878      	ldr	r0, [r7, #4]
 81030d2:	f000 fe0f 	bl	8103cf4 <UART_CheckIdleState>
 81030d6:	4603      	mov	r3, r0
}
 81030d8:	4618      	mov	r0, r3
 81030da:	3708      	adds	r7, #8
 81030dc:	46bd      	mov	sp, r7
 81030de:	bd80      	pop	{r7, pc}

081030e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81030e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81030e4:	b092      	sub	sp, #72	; 0x48
 81030e6:	af00      	add	r7, sp, #0
 81030e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81030ea:	2300      	movs	r3, #0
 81030ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81030f0:	697b      	ldr	r3, [r7, #20]
 81030f2:	689a      	ldr	r2, [r3, #8]
 81030f4:	697b      	ldr	r3, [r7, #20]
 81030f6:	691b      	ldr	r3, [r3, #16]
 81030f8:	431a      	orrs	r2, r3
 81030fa:	697b      	ldr	r3, [r7, #20]
 81030fc:	695b      	ldr	r3, [r3, #20]
 81030fe:	431a      	orrs	r2, r3
 8103100:	697b      	ldr	r3, [r7, #20]
 8103102:	69db      	ldr	r3, [r3, #28]
 8103104:	4313      	orrs	r3, r2
 8103106:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8103108:	697b      	ldr	r3, [r7, #20]
 810310a:	681b      	ldr	r3, [r3, #0]
 810310c:	681a      	ldr	r2, [r3, #0]
 810310e:	4bbd      	ldr	r3, [pc, #756]	; (8103404 <UART_SetConfig+0x324>)
 8103110:	4013      	ands	r3, r2
 8103112:	697a      	ldr	r2, [r7, #20]
 8103114:	6812      	ldr	r2, [r2, #0]
 8103116:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8103118:	430b      	orrs	r3, r1
 810311a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810311c:	697b      	ldr	r3, [r7, #20]
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	685b      	ldr	r3, [r3, #4]
 8103122:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8103126:	697b      	ldr	r3, [r7, #20]
 8103128:	68da      	ldr	r2, [r3, #12]
 810312a:	697b      	ldr	r3, [r7, #20]
 810312c:	681b      	ldr	r3, [r3, #0]
 810312e:	430a      	orrs	r2, r1
 8103130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8103132:	697b      	ldr	r3, [r7, #20]
 8103134:	699b      	ldr	r3, [r3, #24]
 8103136:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8103138:	697b      	ldr	r3, [r7, #20]
 810313a:	681b      	ldr	r3, [r3, #0]
 810313c:	4ab2      	ldr	r2, [pc, #712]	; (8103408 <UART_SetConfig+0x328>)
 810313e:	4293      	cmp	r3, r2
 8103140:	d004      	beq.n	810314c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8103142:	697b      	ldr	r3, [r7, #20]
 8103144:	6a1b      	ldr	r3, [r3, #32]
 8103146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8103148:	4313      	orrs	r3, r2
 810314a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810314c:	697b      	ldr	r3, [r7, #20]
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	689b      	ldr	r3, [r3, #8]
 8103152:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8103156:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810315a:	697a      	ldr	r2, [r7, #20]
 810315c:	6812      	ldr	r2, [r2, #0]
 810315e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8103160:	430b      	orrs	r3, r1
 8103162:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8103164:	697b      	ldr	r3, [r7, #20]
 8103166:	681b      	ldr	r3, [r3, #0]
 8103168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810316a:	f023 010f 	bic.w	r1, r3, #15
 810316e:	697b      	ldr	r3, [r7, #20]
 8103170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8103172:	697b      	ldr	r3, [r7, #20]
 8103174:	681b      	ldr	r3, [r3, #0]
 8103176:	430a      	orrs	r2, r1
 8103178:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810317a:	697b      	ldr	r3, [r7, #20]
 810317c:	681b      	ldr	r3, [r3, #0]
 810317e:	4aa3      	ldr	r2, [pc, #652]	; (810340c <UART_SetConfig+0x32c>)
 8103180:	4293      	cmp	r3, r2
 8103182:	d177      	bne.n	8103274 <UART_SetConfig+0x194>
 8103184:	4ba2      	ldr	r3, [pc, #648]	; (8103410 <UART_SetConfig+0x330>)
 8103186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103188:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810318c:	2b28      	cmp	r3, #40	; 0x28
 810318e:	d86d      	bhi.n	810326c <UART_SetConfig+0x18c>
 8103190:	a201      	add	r2, pc, #4	; (adr r2, 8103198 <UART_SetConfig+0xb8>)
 8103192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103196:	bf00      	nop
 8103198:	0810323d 	.word	0x0810323d
 810319c:	0810326d 	.word	0x0810326d
 81031a0:	0810326d 	.word	0x0810326d
 81031a4:	0810326d 	.word	0x0810326d
 81031a8:	0810326d 	.word	0x0810326d
 81031ac:	0810326d 	.word	0x0810326d
 81031b0:	0810326d 	.word	0x0810326d
 81031b4:	0810326d 	.word	0x0810326d
 81031b8:	08103245 	.word	0x08103245
 81031bc:	0810326d 	.word	0x0810326d
 81031c0:	0810326d 	.word	0x0810326d
 81031c4:	0810326d 	.word	0x0810326d
 81031c8:	0810326d 	.word	0x0810326d
 81031cc:	0810326d 	.word	0x0810326d
 81031d0:	0810326d 	.word	0x0810326d
 81031d4:	0810326d 	.word	0x0810326d
 81031d8:	0810324d 	.word	0x0810324d
 81031dc:	0810326d 	.word	0x0810326d
 81031e0:	0810326d 	.word	0x0810326d
 81031e4:	0810326d 	.word	0x0810326d
 81031e8:	0810326d 	.word	0x0810326d
 81031ec:	0810326d 	.word	0x0810326d
 81031f0:	0810326d 	.word	0x0810326d
 81031f4:	0810326d 	.word	0x0810326d
 81031f8:	08103255 	.word	0x08103255
 81031fc:	0810326d 	.word	0x0810326d
 8103200:	0810326d 	.word	0x0810326d
 8103204:	0810326d 	.word	0x0810326d
 8103208:	0810326d 	.word	0x0810326d
 810320c:	0810326d 	.word	0x0810326d
 8103210:	0810326d 	.word	0x0810326d
 8103214:	0810326d 	.word	0x0810326d
 8103218:	0810325d 	.word	0x0810325d
 810321c:	0810326d 	.word	0x0810326d
 8103220:	0810326d 	.word	0x0810326d
 8103224:	0810326d 	.word	0x0810326d
 8103228:	0810326d 	.word	0x0810326d
 810322c:	0810326d 	.word	0x0810326d
 8103230:	0810326d 	.word	0x0810326d
 8103234:	0810326d 	.word	0x0810326d
 8103238:	08103265 	.word	0x08103265
 810323c:	2301      	movs	r3, #1
 810323e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103242:	e220      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103244:	2304      	movs	r3, #4
 8103246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810324a:	e21c      	b.n	8103686 <UART_SetConfig+0x5a6>
 810324c:	2308      	movs	r3, #8
 810324e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103252:	e218      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103254:	2310      	movs	r3, #16
 8103256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810325a:	e214      	b.n	8103686 <UART_SetConfig+0x5a6>
 810325c:	2320      	movs	r3, #32
 810325e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103262:	e210      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103264:	2340      	movs	r3, #64	; 0x40
 8103266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810326a:	e20c      	b.n	8103686 <UART_SetConfig+0x5a6>
 810326c:	2380      	movs	r3, #128	; 0x80
 810326e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103272:	e208      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103274:	697b      	ldr	r3, [r7, #20]
 8103276:	681b      	ldr	r3, [r3, #0]
 8103278:	4a66      	ldr	r2, [pc, #408]	; (8103414 <UART_SetConfig+0x334>)
 810327a:	4293      	cmp	r3, r2
 810327c:	d130      	bne.n	81032e0 <UART_SetConfig+0x200>
 810327e:	4b64      	ldr	r3, [pc, #400]	; (8103410 <UART_SetConfig+0x330>)
 8103280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103282:	f003 0307 	and.w	r3, r3, #7
 8103286:	2b05      	cmp	r3, #5
 8103288:	d826      	bhi.n	81032d8 <UART_SetConfig+0x1f8>
 810328a:	a201      	add	r2, pc, #4	; (adr r2, 8103290 <UART_SetConfig+0x1b0>)
 810328c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103290:	081032a9 	.word	0x081032a9
 8103294:	081032b1 	.word	0x081032b1
 8103298:	081032b9 	.word	0x081032b9
 810329c:	081032c1 	.word	0x081032c1
 81032a0:	081032c9 	.word	0x081032c9
 81032a4:	081032d1 	.word	0x081032d1
 81032a8:	2300      	movs	r3, #0
 81032aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81032ae:	e1ea      	b.n	8103686 <UART_SetConfig+0x5a6>
 81032b0:	2304      	movs	r3, #4
 81032b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81032b6:	e1e6      	b.n	8103686 <UART_SetConfig+0x5a6>
 81032b8:	2308      	movs	r3, #8
 81032ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81032be:	e1e2      	b.n	8103686 <UART_SetConfig+0x5a6>
 81032c0:	2310      	movs	r3, #16
 81032c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81032c6:	e1de      	b.n	8103686 <UART_SetConfig+0x5a6>
 81032c8:	2320      	movs	r3, #32
 81032ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81032ce:	e1da      	b.n	8103686 <UART_SetConfig+0x5a6>
 81032d0:	2340      	movs	r3, #64	; 0x40
 81032d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81032d6:	e1d6      	b.n	8103686 <UART_SetConfig+0x5a6>
 81032d8:	2380      	movs	r3, #128	; 0x80
 81032da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81032de:	e1d2      	b.n	8103686 <UART_SetConfig+0x5a6>
 81032e0:	697b      	ldr	r3, [r7, #20]
 81032e2:	681b      	ldr	r3, [r3, #0]
 81032e4:	4a4c      	ldr	r2, [pc, #304]	; (8103418 <UART_SetConfig+0x338>)
 81032e6:	4293      	cmp	r3, r2
 81032e8:	d130      	bne.n	810334c <UART_SetConfig+0x26c>
 81032ea:	4b49      	ldr	r3, [pc, #292]	; (8103410 <UART_SetConfig+0x330>)
 81032ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032ee:	f003 0307 	and.w	r3, r3, #7
 81032f2:	2b05      	cmp	r3, #5
 81032f4:	d826      	bhi.n	8103344 <UART_SetConfig+0x264>
 81032f6:	a201      	add	r2, pc, #4	; (adr r2, 81032fc <UART_SetConfig+0x21c>)
 81032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032fc:	08103315 	.word	0x08103315
 8103300:	0810331d 	.word	0x0810331d
 8103304:	08103325 	.word	0x08103325
 8103308:	0810332d 	.word	0x0810332d
 810330c:	08103335 	.word	0x08103335
 8103310:	0810333d 	.word	0x0810333d
 8103314:	2300      	movs	r3, #0
 8103316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810331a:	e1b4      	b.n	8103686 <UART_SetConfig+0x5a6>
 810331c:	2304      	movs	r3, #4
 810331e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103322:	e1b0      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103324:	2308      	movs	r3, #8
 8103326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810332a:	e1ac      	b.n	8103686 <UART_SetConfig+0x5a6>
 810332c:	2310      	movs	r3, #16
 810332e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103332:	e1a8      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103334:	2320      	movs	r3, #32
 8103336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810333a:	e1a4      	b.n	8103686 <UART_SetConfig+0x5a6>
 810333c:	2340      	movs	r3, #64	; 0x40
 810333e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103342:	e1a0      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103344:	2380      	movs	r3, #128	; 0x80
 8103346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810334a:	e19c      	b.n	8103686 <UART_SetConfig+0x5a6>
 810334c:	697b      	ldr	r3, [r7, #20]
 810334e:	681b      	ldr	r3, [r3, #0]
 8103350:	4a32      	ldr	r2, [pc, #200]	; (810341c <UART_SetConfig+0x33c>)
 8103352:	4293      	cmp	r3, r2
 8103354:	d130      	bne.n	81033b8 <UART_SetConfig+0x2d8>
 8103356:	4b2e      	ldr	r3, [pc, #184]	; (8103410 <UART_SetConfig+0x330>)
 8103358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810335a:	f003 0307 	and.w	r3, r3, #7
 810335e:	2b05      	cmp	r3, #5
 8103360:	d826      	bhi.n	81033b0 <UART_SetConfig+0x2d0>
 8103362:	a201      	add	r2, pc, #4	; (adr r2, 8103368 <UART_SetConfig+0x288>)
 8103364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103368:	08103381 	.word	0x08103381
 810336c:	08103389 	.word	0x08103389
 8103370:	08103391 	.word	0x08103391
 8103374:	08103399 	.word	0x08103399
 8103378:	081033a1 	.word	0x081033a1
 810337c:	081033a9 	.word	0x081033a9
 8103380:	2300      	movs	r3, #0
 8103382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103386:	e17e      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103388:	2304      	movs	r3, #4
 810338a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810338e:	e17a      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103390:	2308      	movs	r3, #8
 8103392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103396:	e176      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103398:	2310      	movs	r3, #16
 810339a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810339e:	e172      	b.n	8103686 <UART_SetConfig+0x5a6>
 81033a0:	2320      	movs	r3, #32
 81033a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81033a6:	e16e      	b.n	8103686 <UART_SetConfig+0x5a6>
 81033a8:	2340      	movs	r3, #64	; 0x40
 81033aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81033ae:	e16a      	b.n	8103686 <UART_SetConfig+0x5a6>
 81033b0:	2380      	movs	r3, #128	; 0x80
 81033b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81033b6:	e166      	b.n	8103686 <UART_SetConfig+0x5a6>
 81033b8:	697b      	ldr	r3, [r7, #20]
 81033ba:	681b      	ldr	r3, [r3, #0]
 81033bc:	4a18      	ldr	r2, [pc, #96]	; (8103420 <UART_SetConfig+0x340>)
 81033be:	4293      	cmp	r3, r2
 81033c0:	d140      	bne.n	8103444 <UART_SetConfig+0x364>
 81033c2:	4b13      	ldr	r3, [pc, #76]	; (8103410 <UART_SetConfig+0x330>)
 81033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033c6:	f003 0307 	and.w	r3, r3, #7
 81033ca:	2b05      	cmp	r3, #5
 81033cc:	d836      	bhi.n	810343c <UART_SetConfig+0x35c>
 81033ce:	a201      	add	r2, pc, #4	; (adr r2, 81033d4 <UART_SetConfig+0x2f4>)
 81033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81033d4:	081033ed 	.word	0x081033ed
 81033d8:	081033f5 	.word	0x081033f5
 81033dc:	081033fd 	.word	0x081033fd
 81033e0:	08103425 	.word	0x08103425
 81033e4:	0810342d 	.word	0x0810342d
 81033e8:	08103435 	.word	0x08103435
 81033ec:	2300      	movs	r3, #0
 81033ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81033f2:	e148      	b.n	8103686 <UART_SetConfig+0x5a6>
 81033f4:	2304      	movs	r3, #4
 81033f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81033fa:	e144      	b.n	8103686 <UART_SetConfig+0x5a6>
 81033fc:	2308      	movs	r3, #8
 81033fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103402:	e140      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103404:	cfff69f3 	.word	0xcfff69f3
 8103408:	58000c00 	.word	0x58000c00
 810340c:	40011000 	.word	0x40011000
 8103410:	58024400 	.word	0x58024400
 8103414:	40004400 	.word	0x40004400
 8103418:	40004800 	.word	0x40004800
 810341c:	40004c00 	.word	0x40004c00
 8103420:	40005000 	.word	0x40005000
 8103424:	2310      	movs	r3, #16
 8103426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810342a:	e12c      	b.n	8103686 <UART_SetConfig+0x5a6>
 810342c:	2320      	movs	r3, #32
 810342e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103432:	e128      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103434:	2340      	movs	r3, #64	; 0x40
 8103436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810343a:	e124      	b.n	8103686 <UART_SetConfig+0x5a6>
 810343c:	2380      	movs	r3, #128	; 0x80
 810343e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103442:	e120      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103444:	697b      	ldr	r3, [r7, #20]
 8103446:	681b      	ldr	r3, [r3, #0]
 8103448:	4acb      	ldr	r2, [pc, #812]	; (8103778 <UART_SetConfig+0x698>)
 810344a:	4293      	cmp	r3, r2
 810344c:	d176      	bne.n	810353c <UART_SetConfig+0x45c>
 810344e:	4bcb      	ldr	r3, [pc, #812]	; (810377c <UART_SetConfig+0x69c>)
 8103450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103456:	2b28      	cmp	r3, #40	; 0x28
 8103458:	d86c      	bhi.n	8103534 <UART_SetConfig+0x454>
 810345a:	a201      	add	r2, pc, #4	; (adr r2, 8103460 <UART_SetConfig+0x380>)
 810345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103460:	08103505 	.word	0x08103505
 8103464:	08103535 	.word	0x08103535
 8103468:	08103535 	.word	0x08103535
 810346c:	08103535 	.word	0x08103535
 8103470:	08103535 	.word	0x08103535
 8103474:	08103535 	.word	0x08103535
 8103478:	08103535 	.word	0x08103535
 810347c:	08103535 	.word	0x08103535
 8103480:	0810350d 	.word	0x0810350d
 8103484:	08103535 	.word	0x08103535
 8103488:	08103535 	.word	0x08103535
 810348c:	08103535 	.word	0x08103535
 8103490:	08103535 	.word	0x08103535
 8103494:	08103535 	.word	0x08103535
 8103498:	08103535 	.word	0x08103535
 810349c:	08103535 	.word	0x08103535
 81034a0:	08103515 	.word	0x08103515
 81034a4:	08103535 	.word	0x08103535
 81034a8:	08103535 	.word	0x08103535
 81034ac:	08103535 	.word	0x08103535
 81034b0:	08103535 	.word	0x08103535
 81034b4:	08103535 	.word	0x08103535
 81034b8:	08103535 	.word	0x08103535
 81034bc:	08103535 	.word	0x08103535
 81034c0:	0810351d 	.word	0x0810351d
 81034c4:	08103535 	.word	0x08103535
 81034c8:	08103535 	.word	0x08103535
 81034cc:	08103535 	.word	0x08103535
 81034d0:	08103535 	.word	0x08103535
 81034d4:	08103535 	.word	0x08103535
 81034d8:	08103535 	.word	0x08103535
 81034dc:	08103535 	.word	0x08103535
 81034e0:	08103525 	.word	0x08103525
 81034e4:	08103535 	.word	0x08103535
 81034e8:	08103535 	.word	0x08103535
 81034ec:	08103535 	.word	0x08103535
 81034f0:	08103535 	.word	0x08103535
 81034f4:	08103535 	.word	0x08103535
 81034f8:	08103535 	.word	0x08103535
 81034fc:	08103535 	.word	0x08103535
 8103500:	0810352d 	.word	0x0810352d
 8103504:	2301      	movs	r3, #1
 8103506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810350a:	e0bc      	b.n	8103686 <UART_SetConfig+0x5a6>
 810350c:	2304      	movs	r3, #4
 810350e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103512:	e0b8      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103514:	2308      	movs	r3, #8
 8103516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810351a:	e0b4      	b.n	8103686 <UART_SetConfig+0x5a6>
 810351c:	2310      	movs	r3, #16
 810351e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103522:	e0b0      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103524:	2320      	movs	r3, #32
 8103526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810352a:	e0ac      	b.n	8103686 <UART_SetConfig+0x5a6>
 810352c:	2340      	movs	r3, #64	; 0x40
 810352e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103532:	e0a8      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103534:	2380      	movs	r3, #128	; 0x80
 8103536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810353a:	e0a4      	b.n	8103686 <UART_SetConfig+0x5a6>
 810353c:	697b      	ldr	r3, [r7, #20]
 810353e:	681b      	ldr	r3, [r3, #0]
 8103540:	4a8f      	ldr	r2, [pc, #572]	; (8103780 <UART_SetConfig+0x6a0>)
 8103542:	4293      	cmp	r3, r2
 8103544:	d130      	bne.n	81035a8 <UART_SetConfig+0x4c8>
 8103546:	4b8d      	ldr	r3, [pc, #564]	; (810377c <UART_SetConfig+0x69c>)
 8103548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810354a:	f003 0307 	and.w	r3, r3, #7
 810354e:	2b05      	cmp	r3, #5
 8103550:	d826      	bhi.n	81035a0 <UART_SetConfig+0x4c0>
 8103552:	a201      	add	r2, pc, #4	; (adr r2, 8103558 <UART_SetConfig+0x478>)
 8103554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103558:	08103571 	.word	0x08103571
 810355c:	08103579 	.word	0x08103579
 8103560:	08103581 	.word	0x08103581
 8103564:	08103589 	.word	0x08103589
 8103568:	08103591 	.word	0x08103591
 810356c:	08103599 	.word	0x08103599
 8103570:	2300      	movs	r3, #0
 8103572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103576:	e086      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103578:	2304      	movs	r3, #4
 810357a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810357e:	e082      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103580:	2308      	movs	r3, #8
 8103582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103586:	e07e      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103588:	2310      	movs	r3, #16
 810358a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810358e:	e07a      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103590:	2320      	movs	r3, #32
 8103592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103596:	e076      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103598:	2340      	movs	r3, #64	; 0x40
 810359a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810359e:	e072      	b.n	8103686 <UART_SetConfig+0x5a6>
 81035a0:	2380      	movs	r3, #128	; 0x80
 81035a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81035a6:	e06e      	b.n	8103686 <UART_SetConfig+0x5a6>
 81035a8:	697b      	ldr	r3, [r7, #20]
 81035aa:	681b      	ldr	r3, [r3, #0]
 81035ac:	4a75      	ldr	r2, [pc, #468]	; (8103784 <UART_SetConfig+0x6a4>)
 81035ae:	4293      	cmp	r3, r2
 81035b0:	d130      	bne.n	8103614 <UART_SetConfig+0x534>
 81035b2:	4b72      	ldr	r3, [pc, #456]	; (810377c <UART_SetConfig+0x69c>)
 81035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81035b6:	f003 0307 	and.w	r3, r3, #7
 81035ba:	2b05      	cmp	r3, #5
 81035bc:	d826      	bhi.n	810360c <UART_SetConfig+0x52c>
 81035be:	a201      	add	r2, pc, #4	; (adr r2, 81035c4 <UART_SetConfig+0x4e4>)
 81035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81035c4:	081035dd 	.word	0x081035dd
 81035c8:	081035e5 	.word	0x081035e5
 81035cc:	081035ed 	.word	0x081035ed
 81035d0:	081035f5 	.word	0x081035f5
 81035d4:	081035fd 	.word	0x081035fd
 81035d8:	08103605 	.word	0x08103605
 81035dc:	2300      	movs	r3, #0
 81035de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81035e2:	e050      	b.n	8103686 <UART_SetConfig+0x5a6>
 81035e4:	2304      	movs	r3, #4
 81035e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81035ea:	e04c      	b.n	8103686 <UART_SetConfig+0x5a6>
 81035ec:	2308      	movs	r3, #8
 81035ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81035f2:	e048      	b.n	8103686 <UART_SetConfig+0x5a6>
 81035f4:	2310      	movs	r3, #16
 81035f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81035fa:	e044      	b.n	8103686 <UART_SetConfig+0x5a6>
 81035fc:	2320      	movs	r3, #32
 81035fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103602:	e040      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103604:	2340      	movs	r3, #64	; 0x40
 8103606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810360a:	e03c      	b.n	8103686 <UART_SetConfig+0x5a6>
 810360c:	2380      	movs	r3, #128	; 0x80
 810360e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103612:	e038      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103614:	697b      	ldr	r3, [r7, #20]
 8103616:	681b      	ldr	r3, [r3, #0]
 8103618:	4a5b      	ldr	r2, [pc, #364]	; (8103788 <UART_SetConfig+0x6a8>)
 810361a:	4293      	cmp	r3, r2
 810361c:	d130      	bne.n	8103680 <UART_SetConfig+0x5a0>
 810361e:	4b57      	ldr	r3, [pc, #348]	; (810377c <UART_SetConfig+0x69c>)
 8103620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103622:	f003 0307 	and.w	r3, r3, #7
 8103626:	2b05      	cmp	r3, #5
 8103628:	d826      	bhi.n	8103678 <UART_SetConfig+0x598>
 810362a:	a201      	add	r2, pc, #4	; (adr r2, 8103630 <UART_SetConfig+0x550>)
 810362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103630:	08103649 	.word	0x08103649
 8103634:	08103651 	.word	0x08103651
 8103638:	08103659 	.word	0x08103659
 810363c:	08103661 	.word	0x08103661
 8103640:	08103669 	.word	0x08103669
 8103644:	08103671 	.word	0x08103671
 8103648:	2302      	movs	r3, #2
 810364a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810364e:	e01a      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103650:	2304      	movs	r3, #4
 8103652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103656:	e016      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103658:	2308      	movs	r3, #8
 810365a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810365e:	e012      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103660:	2310      	movs	r3, #16
 8103662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103666:	e00e      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103668:	2320      	movs	r3, #32
 810366a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810366e:	e00a      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103670:	2340      	movs	r3, #64	; 0x40
 8103672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103676:	e006      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103678:	2380      	movs	r3, #128	; 0x80
 810367a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810367e:	e002      	b.n	8103686 <UART_SetConfig+0x5a6>
 8103680:	2380      	movs	r3, #128	; 0x80
 8103682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8103686:	697b      	ldr	r3, [r7, #20]
 8103688:	681b      	ldr	r3, [r3, #0]
 810368a:	4a3f      	ldr	r2, [pc, #252]	; (8103788 <UART_SetConfig+0x6a8>)
 810368c:	4293      	cmp	r3, r2
 810368e:	f040 80f8 	bne.w	8103882 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8103692:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8103696:	2b20      	cmp	r3, #32
 8103698:	dc46      	bgt.n	8103728 <UART_SetConfig+0x648>
 810369a:	2b02      	cmp	r3, #2
 810369c:	f2c0 8082 	blt.w	81037a4 <UART_SetConfig+0x6c4>
 81036a0:	3b02      	subs	r3, #2
 81036a2:	2b1e      	cmp	r3, #30
 81036a4:	d87e      	bhi.n	81037a4 <UART_SetConfig+0x6c4>
 81036a6:	a201      	add	r2, pc, #4	; (adr r2, 81036ac <UART_SetConfig+0x5cc>)
 81036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81036ac:	0810372f 	.word	0x0810372f
 81036b0:	081037a5 	.word	0x081037a5
 81036b4:	08103737 	.word	0x08103737
 81036b8:	081037a5 	.word	0x081037a5
 81036bc:	081037a5 	.word	0x081037a5
 81036c0:	081037a5 	.word	0x081037a5
 81036c4:	08103747 	.word	0x08103747
 81036c8:	081037a5 	.word	0x081037a5
 81036cc:	081037a5 	.word	0x081037a5
 81036d0:	081037a5 	.word	0x081037a5
 81036d4:	081037a5 	.word	0x081037a5
 81036d8:	081037a5 	.word	0x081037a5
 81036dc:	081037a5 	.word	0x081037a5
 81036e0:	081037a5 	.word	0x081037a5
 81036e4:	08103757 	.word	0x08103757
 81036e8:	081037a5 	.word	0x081037a5
 81036ec:	081037a5 	.word	0x081037a5
 81036f0:	081037a5 	.word	0x081037a5
 81036f4:	081037a5 	.word	0x081037a5
 81036f8:	081037a5 	.word	0x081037a5
 81036fc:	081037a5 	.word	0x081037a5
 8103700:	081037a5 	.word	0x081037a5
 8103704:	081037a5 	.word	0x081037a5
 8103708:	081037a5 	.word	0x081037a5
 810370c:	081037a5 	.word	0x081037a5
 8103710:	081037a5 	.word	0x081037a5
 8103714:	081037a5 	.word	0x081037a5
 8103718:	081037a5 	.word	0x081037a5
 810371c:	081037a5 	.word	0x081037a5
 8103720:	081037a5 	.word	0x081037a5
 8103724:	08103797 	.word	0x08103797
 8103728:	2b40      	cmp	r3, #64	; 0x40
 810372a:	d037      	beq.n	810379c <UART_SetConfig+0x6bc>
 810372c:	e03a      	b.n	81037a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810372e:	f7ff f865 	bl	81027fc <HAL_RCCEx_GetD3PCLK1Freq>
 8103732:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8103734:	e03c      	b.n	81037b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810373a:	4618      	mov	r0, r3
 810373c:	f7ff f874 	bl	8102828 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103744:	e034      	b.n	81037b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103746:	f107 0318 	add.w	r3, r7, #24
 810374a:	4618      	mov	r0, r3
 810374c:	f7ff f9c0 	bl	8102ad0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103750:	69fb      	ldr	r3, [r7, #28]
 8103752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103754:	e02c      	b.n	81037b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103756:	4b09      	ldr	r3, [pc, #36]	; (810377c <UART_SetConfig+0x69c>)
 8103758:	681b      	ldr	r3, [r3, #0]
 810375a:	f003 0320 	and.w	r3, r3, #32
 810375e:	2b00      	cmp	r3, #0
 8103760:	d016      	beq.n	8103790 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103762:	4b06      	ldr	r3, [pc, #24]	; (810377c <UART_SetConfig+0x69c>)
 8103764:	681b      	ldr	r3, [r3, #0]
 8103766:	08db      	lsrs	r3, r3, #3
 8103768:	f003 0303 	and.w	r3, r3, #3
 810376c:	4a07      	ldr	r2, [pc, #28]	; (810378c <UART_SetConfig+0x6ac>)
 810376e:	fa22 f303 	lsr.w	r3, r2, r3
 8103772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103774:	e01c      	b.n	81037b0 <UART_SetConfig+0x6d0>
 8103776:	bf00      	nop
 8103778:	40011400 	.word	0x40011400
 810377c:	58024400 	.word	0x58024400
 8103780:	40007800 	.word	0x40007800
 8103784:	40007c00 	.word	0x40007c00
 8103788:	58000c00 	.word	0x58000c00
 810378c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8103790:	4b9d      	ldr	r3, [pc, #628]	; (8103a08 <UART_SetConfig+0x928>)
 8103792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103794:	e00c      	b.n	81037b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103796:	4b9d      	ldr	r3, [pc, #628]	; (8103a0c <UART_SetConfig+0x92c>)
 8103798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810379a:	e009      	b.n	81037b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810379c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81037a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81037a2:	e005      	b.n	81037b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 81037a4:	2300      	movs	r3, #0
 81037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81037a8:	2301      	movs	r3, #1
 81037aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81037ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81037b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81037b2:	2b00      	cmp	r3, #0
 81037b4:	f000 81de 	beq.w	8103b74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81037b8:	697b      	ldr	r3, [r7, #20]
 81037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037bc:	4a94      	ldr	r2, [pc, #592]	; (8103a10 <UART_SetConfig+0x930>)
 81037be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81037c2:	461a      	mov	r2, r3
 81037c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81037c6:	fbb3 f3f2 	udiv	r3, r3, r2
 81037ca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81037cc:	697b      	ldr	r3, [r7, #20]
 81037ce:	685a      	ldr	r2, [r3, #4]
 81037d0:	4613      	mov	r3, r2
 81037d2:	005b      	lsls	r3, r3, #1
 81037d4:	4413      	add	r3, r2
 81037d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81037d8:	429a      	cmp	r2, r3
 81037da:	d305      	bcc.n	81037e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81037dc:	697b      	ldr	r3, [r7, #20]
 81037de:	685b      	ldr	r3, [r3, #4]
 81037e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81037e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81037e4:	429a      	cmp	r2, r3
 81037e6:	d903      	bls.n	81037f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81037e8:	2301      	movs	r3, #1
 81037ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81037ee:	e1c1      	b.n	8103b74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81037f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81037f2:	2200      	movs	r2, #0
 81037f4:	60bb      	str	r3, [r7, #8]
 81037f6:	60fa      	str	r2, [r7, #12]
 81037f8:	697b      	ldr	r3, [r7, #20]
 81037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037fc:	4a84      	ldr	r2, [pc, #528]	; (8103a10 <UART_SetConfig+0x930>)
 81037fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103802:	b29b      	uxth	r3, r3
 8103804:	2200      	movs	r2, #0
 8103806:	603b      	str	r3, [r7, #0]
 8103808:	607a      	str	r2, [r7, #4]
 810380a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810380e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8103812:	f7fc fd61 	bl	81002d8 <__aeabi_uldivmod>
 8103816:	4602      	mov	r2, r0
 8103818:	460b      	mov	r3, r1
 810381a:	4610      	mov	r0, r2
 810381c:	4619      	mov	r1, r3
 810381e:	f04f 0200 	mov.w	r2, #0
 8103822:	f04f 0300 	mov.w	r3, #0
 8103826:	020b      	lsls	r3, r1, #8
 8103828:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810382c:	0202      	lsls	r2, r0, #8
 810382e:	6979      	ldr	r1, [r7, #20]
 8103830:	6849      	ldr	r1, [r1, #4]
 8103832:	0849      	lsrs	r1, r1, #1
 8103834:	2000      	movs	r0, #0
 8103836:	460c      	mov	r4, r1
 8103838:	4605      	mov	r5, r0
 810383a:	eb12 0804 	adds.w	r8, r2, r4
 810383e:	eb43 0905 	adc.w	r9, r3, r5
 8103842:	697b      	ldr	r3, [r7, #20]
 8103844:	685b      	ldr	r3, [r3, #4]
 8103846:	2200      	movs	r2, #0
 8103848:	469a      	mov	sl, r3
 810384a:	4693      	mov	fp, r2
 810384c:	4652      	mov	r2, sl
 810384e:	465b      	mov	r3, fp
 8103850:	4640      	mov	r0, r8
 8103852:	4649      	mov	r1, r9
 8103854:	f7fc fd40 	bl	81002d8 <__aeabi_uldivmod>
 8103858:	4602      	mov	r2, r0
 810385a:	460b      	mov	r3, r1
 810385c:	4613      	mov	r3, r2
 810385e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8103860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103866:	d308      	bcc.n	810387a <UART_SetConfig+0x79a>
 8103868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810386a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810386e:	d204      	bcs.n	810387a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8103870:	697b      	ldr	r3, [r7, #20]
 8103872:	681b      	ldr	r3, [r3, #0]
 8103874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8103876:	60da      	str	r2, [r3, #12]
 8103878:	e17c      	b.n	8103b74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810387a:	2301      	movs	r3, #1
 810387c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8103880:	e178      	b.n	8103b74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8103882:	697b      	ldr	r3, [r7, #20]
 8103884:	69db      	ldr	r3, [r3, #28]
 8103886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810388a:	f040 80c5 	bne.w	8103a18 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810388e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8103892:	2b20      	cmp	r3, #32
 8103894:	dc48      	bgt.n	8103928 <UART_SetConfig+0x848>
 8103896:	2b00      	cmp	r3, #0
 8103898:	db7b      	blt.n	8103992 <UART_SetConfig+0x8b2>
 810389a:	2b20      	cmp	r3, #32
 810389c:	d879      	bhi.n	8103992 <UART_SetConfig+0x8b2>
 810389e:	a201      	add	r2, pc, #4	; (adr r2, 81038a4 <UART_SetConfig+0x7c4>)
 81038a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81038a4:	0810392f 	.word	0x0810392f
 81038a8:	08103937 	.word	0x08103937
 81038ac:	08103993 	.word	0x08103993
 81038b0:	08103993 	.word	0x08103993
 81038b4:	0810393f 	.word	0x0810393f
 81038b8:	08103993 	.word	0x08103993
 81038bc:	08103993 	.word	0x08103993
 81038c0:	08103993 	.word	0x08103993
 81038c4:	0810394f 	.word	0x0810394f
 81038c8:	08103993 	.word	0x08103993
 81038cc:	08103993 	.word	0x08103993
 81038d0:	08103993 	.word	0x08103993
 81038d4:	08103993 	.word	0x08103993
 81038d8:	08103993 	.word	0x08103993
 81038dc:	08103993 	.word	0x08103993
 81038e0:	08103993 	.word	0x08103993
 81038e4:	0810395f 	.word	0x0810395f
 81038e8:	08103993 	.word	0x08103993
 81038ec:	08103993 	.word	0x08103993
 81038f0:	08103993 	.word	0x08103993
 81038f4:	08103993 	.word	0x08103993
 81038f8:	08103993 	.word	0x08103993
 81038fc:	08103993 	.word	0x08103993
 8103900:	08103993 	.word	0x08103993
 8103904:	08103993 	.word	0x08103993
 8103908:	08103993 	.word	0x08103993
 810390c:	08103993 	.word	0x08103993
 8103910:	08103993 	.word	0x08103993
 8103914:	08103993 	.word	0x08103993
 8103918:	08103993 	.word	0x08103993
 810391c:	08103993 	.word	0x08103993
 8103920:	08103993 	.word	0x08103993
 8103924:	08103985 	.word	0x08103985
 8103928:	2b40      	cmp	r3, #64	; 0x40
 810392a:	d02e      	beq.n	810398a <UART_SetConfig+0x8aa>
 810392c:	e031      	b.n	8103992 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810392e:	f7fd fff3 	bl	8101918 <HAL_RCC_GetPCLK1Freq>
 8103932:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8103934:	e033      	b.n	810399e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8103936:	f7fe f805 	bl	8101944 <HAL_RCC_GetPCLK2Freq>
 810393a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810393c:	e02f      	b.n	810399e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810393e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8103942:	4618      	mov	r0, r3
 8103944:	f7fe ff70 	bl	8102828 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810394a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810394c:	e027      	b.n	810399e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810394e:	f107 0318 	add.w	r3, r7, #24
 8103952:	4618      	mov	r0, r3
 8103954:	f7ff f8bc 	bl	8102ad0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103958:	69fb      	ldr	r3, [r7, #28]
 810395a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810395c:	e01f      	b.n	810399e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810395e:	4b2d      	ldr	r3, [pc, #180]	; (8103a14 <UART_SetConfig+0x934>)
 8103960:	681b      	ldr	r3, [r3, #0]
 8103962:	f003 0320 	and.w	r3, r3, #32
 8103966:	2b00      	cmp	r3, #0
 8103968:	d009      	beq.n	810397e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810396a:	4b2a      	ldr	r3, [pc, #168]	; (8103a14 <UART_SetConfig+0x934>)
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	08db      	lsrs	r3, r3, #3
 8103970:	f003 0303 	and.w	r3, r3, #3
 8103974:	4a24      	ldr	r2, [pc, #144]	; (8103a08 <UART_SetConfig+0x928>)
 8103976:	fa22 f303 	lsr.w	r3, r2, r3
 810397a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810397c:	e00f      	b.n	810399e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810397e:	4b22      	ldr	r3, [pc, #136]	; (8103a08 <UART_SetConfig+0x928>)
 8103980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103982:	e00c      	b.n	810399e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103984:	4b21      	ldr	r3, [pc, #132]	; (8103a0c <UART_SetConfig+0x92c>)
 8103986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103988:	e009      	b.n	810399e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810398a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810398e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103990:	e005      	b.n	810399e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8103992:	2300      	movs	r3, #0
 8103994:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8103996:	2301      	movs	r3, #1
 8103998:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810399c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810399e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81039a0:	2b00      	cmp	r3, #0
 81039a2:	f000 80e7 	beq.w	8103b74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81039a6:	697b      	ldr	r3, [r7, #20]
 81039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81039aa:	4a19      	ldr	r2, [pc, #100]	; (8103a10 <UART_SetConfig+0x930>)
 81039ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81039b0:	461a      	mov	r2, r3
 81039b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81039b4:	fbb3 f3f2 	udiv	r3, r3, r2
 81039b8:	005a      	lsls	r2, r3, #1
 81039ba:	697b      	ldr	r3, [r7, #20]
 81039bc:	685b      	ldr	r3, [r3, #4]
 81039be:	085b      	lsrs	r3, r3, #1
 81039c0:	441a      	add	r2, r3
 81039c2:	697b      	ldr	r3, [r7, #20]
 81039c4:	685b      	ldr	r3, [r3, #4]
 81039c6:	fbb2 f3f3 	udiv	r3, r2, r3
 81039ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81039ce:	2b0f      	cmp	r3, #15
 81039d0:	d916      	bls.n	8103a00 <UART_SetConfig+0x920>
 81039d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81039d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81039d8:	d212      	bcs.n	8103a00 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81039dc:	b29b      	uxth	r3, r3
 81039de:	f023 030f 	bic.w	r3, r3, #15
 81039e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81039e6:	085b      	lsrs	r3, r3, #1
 81039e8:	b29b      	uxth	r3, r3
 81039ea:	f003 0307 	and.w	r3, r3, #7
 81039ee:	b29a      	uxth	r2, r3
 81039f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81039f2:	4313      	orrs	r3, r2
 81039f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 81039f6:	697b      	ldr	r3, [r7, #20]
 81039f8:	681b      	ldr	r3, [r3, #0]
 81039fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81039fc:	60da      	str	r2, [r3, #12]
 81039fe:	e0b9      	b.n	8103b74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8103a00:	2301      	movs	r3, #1
 8103a02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8103a06:	e0b5      	b.n	8103b74 <UART_SetConfig+0xa94>
 8103a08:	03d09000 	.word	0x03d09000
 8103a0c:	003d0900 	.word	0x003d0900
 8103a10:	081041a0 	.word	0x081041a0
 8103a14:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8103a18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8103a1c:	2b20      	cmp	r3, #32
 8103a1e:	dc49      	bgt.n	8103ab4 <UART_SetConfig+0x9d4>
 8103a20:	2b00      	cmp	r3, #0
 8103a22:	db7c      	blt.n	8103b1e <UART_SetConfig+0xa3e>
 8103a24:	2b20      	cmp	r3, #32
 8103a26:	d87a      	bhi.n	8103b1e <UART_SetConfig+0xa3e>
 8103a28:	a201      	add	r2, pc, #4	; (adr r2, 8103a30 <UART_SetConfig+0x950>)
 8103a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a2e:	bf00      	nop
 8103a30:	08103abb 	.word	0x08103abb
 8103a34:	08103ac3 	.word	0x08103ac3
 8103a38:	08103b1f 	.word	0x08103b1f
 8103a3c:	08103b1f 	.word	0x08103b1f
 8103a40:	08103acb 	.word	0x08103acb
 8103a44:	08103b1f 	.word	0x08103b1f
 8103a48:	08103b1f 	.word	0x08103b1f
 8103a4c:	08103b1f 	.word	0x08103b1f
 8103a50:	08103adb 	.word	0x08103adb
 8103a54:	08103b1f 	.word	0x08103b1f
 8103a58:	08103b1f 	.word	0x08103b1f
 8103a5c:	08103b1f 	.word	0x08103b1f
 8103a60:	08103b1f 	.word	0x08103b1f
 8103a64:	08103b1f 	.word	0x08103b1f
 8103a68:	08103b1f 	.word	0x08103b1f
 8103a6c:	08103b1f 	.word	0x08103b1f
 8103a70:	08103aeb 	.word	0x08103aeb
 8103a74:	08103b1f 	.word	0x08103b1f
 8103a78:	08103b1f 	.word	0x08103b1f
 8103a7c:	08103b1f 	.word	0x08103b1f
 8103a80:	08103b1f 	.word	0x08103b1f
 8103a84:	08103b1f 	.word	0x08103b1f
 8103a88:	08103b1f 	.word	0x08103b1f
 8103a8c:	08103b1f 	.word	0x08103b1f
 8103a90:	08103b1f 	.word	0x08103b1f
 8103a94:	08103b1f 	.word	0x08103b1f
 8103a98:	08103b1f 	.word	0x08103b1f
 8103a9c:	08103b1f 	.word	0x08103b1f
 8103aa0:	08103b1f 	.word	0x08103b1f
 8103aa4:	08103b1f 	.word	0x08103b1f
 8103aa8:	08103b1f 	.word	0x08103b1f
 8103aac:	08103b1f 	.word	0x08103b1f
 8103ab0:	08103b11 	.word	0x08103b11
 8103ab4:	2b40      	cmp	r3, #64	; 0x40
 8103ab6:	d02e      	beq.n	8103b16 <UART_SetConfig+0xa36>
 8103ab8:	e031      	b.n	8103b1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103aba:	f7fd ff2d 	bl	8101918 <HAL_RCC_GetPCLK1Freq>
 8103abe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8103ac0:	e033      	b.n	8103b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8103ac2:	f7fd ff3f 	bl	8101944 <HAL_RCC_GetPCLK2Freq>
 8103ac6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8103ac8:	e02f      	b.n	8103b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8103ace:	4618      	mov	r0, r3
 8103ad0:	f7fe feaa 	bl	8102828 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103ad8:	e027      	b.n	8103b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103ada:	f107 0318 	add.w	r3, r7, #24
 8103ade:	4618      	mov	r0, r3
 8103ae0:	f7fe fff6 	bl	8102ad0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103ae4:	69fb      	ldr	r3, [r7, #28]
 8103ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103ae8:	e01f      	b.n	8103b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103aea:	4b2d      	ldr	r3, [pc, #180]	; (8103ba0 <UART_SetConfig+0xac0>)
 8103aec:	681b      	ldr	r3, [r3, #0]
 8103aee:	f003 0320 	and.w	r3, r3, #32
 8103af2:	2b00      	cmp	r3, #0
 8103af4:	d009      	beq.n	8103b0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103af6:	4b2a      	ldr	r3, [pc, #168]	; (8103ba0 <UART_SetConfig+0xac0>)
 8103af8:	681b      	ldr	r3, [r3, #0]
 8103afa:	08db      	lsrs	r3, r3, #3
 8103afc:	f003 0303 	and.w	r3, r3, #3
 8103b00:	4a28      	ldr	r2, [pc, #160]	; (8103ba4 <UART_SetConfig+0xac4>)
 8103b02:	fa22 f303 	lsr.w	r3, r2, r3
 8103b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103b08:	e00f      	b.n	8103b2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8103b0a:	4b26      	ldr	r3, [pc, #152]	; (8103ba4 <UART_SetConfig+0xac4>)
 8103b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103b0e:	e00c      	b.n	8103b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103b10:	4b25      	ldr	r3, [pc, #148]	; (8103ba8 <UART_SetConfig+0xac8>)
 8103b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103b14:	e009      	b.n	8103b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8103b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103b1c:	e005      	b.n	8103b2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8103b1e:	2300      	movs	r3, #0
 8103b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8103b22:	2301      	movs	r3, #1
 8103b24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8103b28:	bf00      	nop
    }

    if (pclk != 0U)
 8103b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103b2c:	2b00      	cmp	r3, #0
 8103b2e:	d021      	beq.n	8103b74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103b30:	697b      	ldr	r3, [r7, #20]
 8103b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b34:	4a1d      	ldr	r2, [pc, #116]	; (8103bac <UART_SetConfig+0xacc>)
 8103b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103b3a:	461a      	mov	r2, r3
 8103b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103b3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8103b42:	697b      	ldr	r3, [r7, #20]
 8103b44:	685b      	ldr	r3, [r3, #4]
 8103b46:	085b      	lsrs	r3, r3, #1
 8103b48:	441a      	add	r2, r3
 8103b4a:	697b      	ldr	r3, [r7, #20]
 8103b4c:	685b      	ldr	r3, [r3, #4]
 8103b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8103b52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103b56:	2b0f      	cmp	r3, #15
 8103b58:	d909      	bls.n	8103b6e <UART_SetConfig+0xa8e>
 8103b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103b60:	d205      	bcs.n	8103b6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8103b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103b64:	b29a      	uxth	r2, r3
 8103b66:	697b      	ldr	r3, [r7, #20]
 8103b68:	681b      	ldr	r3, [r3, #0]
 8103b6a:	60da      	str	r2, [r3, #12]
 8103b6c:	e002      	b.n	8103b74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8103b6e:	2301      	movs	r3, #1
 8103b70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8103b74:	697b      	ldr	r3, [r7, #20]
 8103b76:	2201      	movs	r2, #1
 8103b78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8103b7c:	697b      	ldr	r3, [r7, #20]
 8103b7e:	2201      	movs	r2, #1
 8103b80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8103b84:	697b      	ldr	r3, [r7, #20]
 8103b86:	2200      	movs	r2, #0
 8103b88:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8103b8a:	697b      	ldr	r3, [r7, #20]
 8103b8c:	2200      	movs	r2, #0
 8103b8e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8103b90:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8103b94:	4618      	mov	r0, r3
 8103b96:	3748      	adds	r7, #72	; 0x48
 8103b98:	46bd      	mov	sp, r7
 8103b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103b9e:	bf00      	nop
 8103ba0:	58024400 	.word	0x58024400
 8103ba4:	03d09000 	.word	0x03d09000
 8103ba8:	003d0900 	.word	0x003d0900
 8103bac:	081041a0 	.word	0x081041a0

08103bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8103bb0:	b480      	push	{r7}
 8103bb2:	b083      	sub	sp, #12
 8103bb4:	af00      	add	r7, sp, #0
 8103bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8103bb8:	687b      	ldr	r3, [r7, #4]
 8103bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103bbc:	f003 0301 	and.w	r3, r3, #1
 8103bc0:	2b00      	cmp	r3, #0
 8103bc2:	d00a      	beq.n	8103bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	681b      	ldr	r3, [r3, #0]
 8103bc8:	685b      	ldr	r3, [r3, #4]
 8103bca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8103bce:	687b      	ldr	r3, [r7, #4]
 8103bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	681b      	ldr	r3, [r3, #0]
 8103bd6:	430a      	orrs	r2, r1
 8103bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8103bda:	687b      	ldr	r3, [r7, #4]
 8103bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103bde:	f003 0302 	and.w	r3, r3, #2
 8103be2:	2b00      	cmp	r3, #0
 8103be4:	d00a      	beq.n	8103bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8103be6:	687b      	ldr	r3, [r7, #4]
 8103be8:	681b      	ldr	r3, [r3, #0]
 8103bea:	685b      	ldr	r3, [r3, #4]
 8103bec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8103bf4:	687b      	ldr	r3, [r7, #4]
 8103bf6:	681b      	ldr	r3, [r3, #0]
 8103bf8:	430a      	orrs	r2, r1
 8103bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c00:	f003 0304 	and.w	r3, r3, #4
 8103c04:	2b00      	cmp	r3, #0
 8103c06:	d00a      	beq.n	8103c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8103c08:	687b      	ldr	r3, [r7, #4]
 8103c0a:	681b      	ldr	r3, [r3, #0]
 8103c0c:	685b      	ldr	r3, [r3, #4]
 8103c0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103c16:	687b      	ldr	r3, [r7, #4]
 8103c18:	681b      	ldr	r3, [r3, #0]
 8103c1a:	430a      	orrs	r2, r1
 8103c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8103c1e:	687b      	ldr	r3, [r7, #4]
 8103c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c22:	f003 0308 	and.w	r3, r3, #8
 8103c26:	2b00      	cmp	r3, #0
 8103c28:	d00a      	beq.n	8103c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8103c2a:	687b      	ldr	r3, [r7, #4]
 8103c2c:	681b      	ldr	r3, [r3, #0]
 8103c2e:	685b      	ldr	r3, [r3, #4]
 8103c30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8103c34:	687b      	ldr	r3, [r7, #4]
 8103c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8103c38:	687b      	ldr	r3, [r7, #4]
 8103c3a:	681b      	ldr	r3, [r3, #0]
 8103c3c:	430a      	orrs	r2, r1
 8103c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c44:	f003 0310 	and.w	r3, r3, #16
 8103c48:	2b00      	cmp	r3, #0
 8103c4a:	d00a      	beq.n	8103c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	681b      	ldr	r3, [r3, #0]
 8103c50:	689b      	ldr	r3, [r3, #8]
 8103c52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8103c5a:	687b      	ldr	r3, [r7, #4]
 8103c5c:	681b      	ldr	r3, [r3, #0]
 8103c5e:	430a      	orrs	r2, r1
 8103c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c66:	f003 0320 	and.w	r3, r3, #32
 8103c6a:	2b00      	cmp	r3, #0
 8103c6c:	d00a      	beq.n	8103c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8103c6e:	687b      	ldr	r3, [r7, #4]
 8103c70:	681b      	ldr	r3, [r3, #0]
 8103c72:	689b      	ldr	r3, [r3, #8]
 8103c74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8103c78:	687b      	ldr	r3, [r7, #4]
 8103c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	681b      	ldr	r3, [r3, #0]
 8103c80:	430a      	orrs	r2, r1
 8103c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103c8c:	2b00      	cmp	r3, #0
 8103c8e:	d01a      	beq.n	8103cc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	681b      	ldr	r3, [r3, #0]
 8103c94:	685b      	ldr	r3, [r3, #4]
 8103c96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8103c9e:	687b      	ldr	r3, [r7, #4]
 8103ca0:	681b      	ldr	r3, [r3, #0]
 8103ca2:	430a      	orrs	r2, r1
 8103ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8103ca6:	687b      	ldr	r3, [r7, #4]
 8103ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103cae:	d10a      	bne.n	8103cc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8103cb0:	687b      	ldr	r3, [r7, #4]
 8103cb2:	681b      	ldr	r3, [r3, #0]
 8103cb4:	685b      	ldr	r3, [r3, #4]
 8103cb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8103cba:	687b      	ldr	r3, [r7, #4]
 8103cbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	681b      	ldr	r3, [r3, #0]
 8103cc2:	430a      	orrs	r2, r1
 8103cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8103cc6:	687b      	ldr	r3, [r7, #4]
 8103cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103cce:	2b00      	cmp	r3, #0
 8103cd0:	d00a      	beq.n	8103ce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	681b      	ldr	r3, [r3, #0]
 8103cd6:	685b      	ldr	r3, [r3, #4]
 8103cd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8103ce0:	687b      	ldr	r3, [r7, #4]
 8103ce2:	681b      	ldr	r3, [r3, #0]
 8103ce4:	430a      	orrs	r2, r1
 8103ce6:	605a      	str	r2, [r3, #4]
  }
}
 8103ce8:	bf00      	nop
 8103cea:	370c      	adds	r7, #12
 8103cec:	46bd      	mov	sp, r7
 8103cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cf2:	4770      	bx	lr

08103cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8103cf4:	b580      	push	{r7, lr}
 8103cf6:	b086      	sub	sp, #24
 8103cf8:	af02      	add	r7, sp, #8
 8103cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	2200      	movs	r2, #0
 8103d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8103d04:	f7fc ff96 	bl	8100c34 <HAL_GetTick>
 8103d08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	681b      	ldr	r3, [r3, #0]
 8103d0e:	681b      	ldr	r3, [r3, #0]
 8103d10:	f003 0308 	and.w	r3, r3, #8
 8103d14:	2b08      	cmp	r3, #8
 8103d16:	d10e      	bne.n	8103d36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8103d1c:	9300      	str	r3, [sp, #0]
 8103d1e:	68fb      	ldr	r3, [r7, #12]
 8103d20:	2200      	movs	r2, #0
 8103d22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8103d26:	6878      	ldr	r0, [r7, #4]
 8103d28:	f000 f82f 	bl	8103d8a <UART_WaitOnFlagUntilTimeout>
 8103d2c:	4603      	mov	r3, r0
 8103d2e:	2b00      	cmp	r3, #0
 8103d30:	d001      	beq.n	8103d36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8103d32:	2303      	movs	r3, #3
 8103d34:	e025      	b.n	8103d82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8103d36:	687b      	ldr	r3, [r7, #4]
 8103d38:	681b      	ldr	r3, [r3, #0]
 8103d3a:	681b      	ldr	r3, [r3, #0]
 8103d3c:	f003 0304 	and.w	r3, r3, #4
 8103d40:	2b04      	cmp	r3, #4
 8103d42:	d10e      	bne.n	8103d62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8103d48:	9300      	str	r3, [sp, #0]
 8103d4a:	68fb      	ldr	r3, [r7, #12]
 8103d4c:	2200      	movs	r2, #0
 8103d4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8103d52:	6878      	ldr	r0, [r7, #4]
 8103d54:	f000 f819 	bl	8103d8a <UART_WaitOnFlagUntilTimeout>
 8103d58:	4603      	mov	r3, r0
 8103d5a:	2b00      	cmp	r3, #0
 8103d5c:	d001      	beq.n	8103d62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8103d5e:	2303      	movs	r3, #3
 8103d60:	e00f      	b.n	8103d82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	2220      	movs	r2, #32
 8103d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	2220      	movs	r2, #32
 8103d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8103d72:	687b      	ldr	r3, [r7, #4]
 8103d74:	2200      	movs	r2, #0
 8103d76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	2200      	movs	r2, #0
 8103d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103d80:	2300      	movs	r3, #0
}
 8103d82:	4618      	mov	r0, r3
 8103d84:	3710      	adds	r7, #16
 8103d86:	46bd      	mov	sp, r7
 8103d88:	bd80      	pop	{r7, pc}

08103d8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8103d8a:	b580      	push	{r7, lr}
 8103d8c:	b09c      	sub	sp, #112	; 0x70
 8103d8e:	af00      	add	r7, sp, #0
 8103d90:	60f8      	str	r0, [r7, #12]
 8103d92:	60b9      	str	r1, [r7, #8]
 8103d94:	603b      	str	r3, [r7, #0]
 8103d96:	4613      	mov	r3, r2
 8103d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103d9a:	e0a9      	b.n	8103ef0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8103d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103da2:	f000 80a5 	beq.w	8103ef0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103da6:	f7fc ff45 	bl	8100c34 <HAL_GetTick>
 8103daa:	4602      	mov	r2, r0
 8103dac:	683b      	ldr	r3, [r7, #0]
 8103dae:	1ad3      	subs	r3, r2, r3
 8103db0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8103db2:	429a      	cmp	r2, r3
 8103db4:	d302      	bcc.n	8103dbc <UART_WaitOnFlagUntilTimeout+0x32>
 8103db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8103db8:	2b00      	cmp	r3, #0
 8103dba:	d140      	bne.n	8103e3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8103dbc:	68fb      	ldr	r3, [r7, #12]
 8103dbe:	681b      	ldr	r3, [r3, #0]
 8103dc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103dc4:	e853 3f00 	ldrex	r3, [r3]
 8103dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8103dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8103dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8103dd2:	68fb      	ldr	r3, [r7, #12]
 8103dd4:	681b      	ldr	r3, [r3, #0]
 8103dd6:	461a      	mov	r2, r3
 8103dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8103dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8103ddc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103dde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8103de0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8103de2:	e841 2300 	strex	r3, r2, [r1]
 8103de6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8103de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103dea:	2b00      	cmp	r3, #0
 8103dec:	d1e6      	bne.n	8103dbc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103dee:	68fb      	ldr	r3, [r7, #12]
 8103df0:	681b      	ldr	r3, [r3, #0]
 8103df2:	3308      	adds	r3, #8
 8103df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103df8:	e853 3f00 	ldrex	r3, [r3]
 8103dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8103dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103e00:	f023 0301 	bic.w	r3, r3, #1
 8103e04:	663b      	str	r3, [r7, #96]	; 0x60
 8103e06:	68fb      	ldr	r3, [r7, #12]
 8103e08:	681b      	ldr	r3, [r3, #0]
 8103e0a:	3308      	adds	r3, #8
 8103e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8103e0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8103e10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103e12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8103e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8103e16:	e841 2300 	strex	r3, r2, [r1]
 8103e1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8103e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103e1e:	2b00      	cmp	r3, #0
 8103e20:	d1e5      	bne.n	8103dee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8103e22:	68fb      	ldr	r3, [r7, #12]
 8103e24:	2220      	movs	r2, #32
 8103e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8103e2a:	68fb      	ldr	r3, [r7, #12]
 8103e2c:	2220      	movs	r2, #32
 8103e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8103e32:	68fb      	ldr	r3, [r7, #12]
 8103e34:	2200      	movs	r2, #0
 8103e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8103e3a:	2303      	movs	r3, #3
 8103e3c:	e069      	b.n	8103f12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8103e3e:	68fb      	ldr	r3, [r7, #12]
 8103e40:	681b      	ldr	r3, [r3, #0]
 8103e42:	681b      	ldr	r3, [r3, #0]
 8103e44:	f003 0304 	and.w	r3, r3, #4
 8103e48:	2b00      	cmp	r3, #0
 8103e4a:	d051      	beq.n	8103ef0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8103e4c:	68fb      	ldr	r3, [r7, #12]
 8103e4e:	681b      	ldr	r3, [r3, #0]
 8103e50:	69db      	ldr	r3, [r3, #28]
 8103e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103e5a:	d149      	bne.n	8103ef0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8103e5c:	68fb      	ldr	r3, [r7, #12]
 8103e5e:	681b      	ldr	r3, [r3, #0]
 8103e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8103e64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8103e66:	68fb      	ldr	r3, [r7, #12]
 8103e68:	681b      	ldr	r3, [r3, #0]
 8103e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103e6e:	e853 3f00 	ldrex	r3, [r3]
 8103e72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8103e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103e76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8103e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8103e7c:	68fb      	ldr	r3, [r7, #12]
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	461a      	mov	r2, r3
 8103e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103e84:	637b      	str	r3, [r7, #52]	; 0x34
 8103e86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103e88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8103e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103e8c:	e841 2300 	strex	r3, r2, [r1]
 8103e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8103e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103e94:	2b00      	cmp	r3, #0
 8103e96:	d1e6      	bne.n	8103e66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103e98:	68fb      	ldr	r3, [r7, #12]
 8103e9a:	681b      	ldr	r3, [r3, #0]
 8103e9c:	3308      	adds	r3, #8
 8103e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103ea0:	697b      	ldr	r3, [r7, #20]
 8103ea2:	e853 3f00 	ldrex	r3, [r3]
 8103ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8103ea8:	693b      	ldr	r3, [r7, #16]
 8103eaa:	f023 0301 	bic.w	r3, r3, #1
 8103eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8103eb0:	68fb      	ldr	r3, [r7, #12]
 8103eb2:	681b      	ldr	r3, [r3, #0]
 8103eb4:	3308      	adds	r3, #8
 8103eb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8103eb8:	623a      	str	r2, [r7, #32]
 8103eba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103ebc:	69f9      	ldr	r1, [r7, #28]
 8103ebe:	6a3a      	ldr	r2, [r7, #32]
 8103ec0:	e841 2300 	strex	r3, r2, [r1]
 8103ec4:	61bb      	str	r3, [r7, #24]
   return(result);
 8103ec6:	69bb      	ldr	r3, [r7, #24]
 8103ec8:	2b00      	cmp	r3, #0
 8103eca:	d1e5      	bne.n	8103e98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8103ecc:	68fb      	ldr	r3, [r7, #12]
 8103ece:	2220      	movs	r2, #32
 8103ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8103ed4:	68fb      	ldr	r3, [r7, #12]
 8103ed6:	2220      	movs	r2, #32
 8103ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8103edc:	68fb      	ldr	r3, [r7, #12]
 8103ede:	2220      	movs	r2, #32
 8103ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8103ee4:	68fb      	ldr	r3, [r7, #12]
 8103ee6:	2200      	movs	r2, #0
 8103ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8103eec:	2303      	movs	r3, #3
 8103eee:	e010      	b.n	8103f12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103ef0:	68fb      	ldr	r3, [r7, #12]
 8103ef2:	681b      	ldr	r3, [r3, #0]
 8103ef4:	69da      	ldr	r2, [r3, #28]
 8103ef6:	68bb      	ldr	r3, [r7, #8]
 8103ef8:	4013      	ands	r3, r2
 8103efa:	68ba      	ldr	r2, [r7, #8]
 8103efc:	429a      	cmp	r2, r3
 8103efe:	bf0c      	ite	eq
 8103f00:	2301      	moveq	r3, #1
 8103f02:	2300      	movne	r3, #0
 8103f04:	b2db      	uxtb	r3, r3
 8103f06:	461a      	mov	r2, r3
 8103f08:	79fb      	ldrb	r3, [r7, #7]
 8103f0a:	429a      	cmp	r2, r3
 8103f0c:	f43f af46 	beq.w	8103d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8103f10:	2300      	movs	r3, #0
}
 8103f12:	4618      	mov	r0, r3
 8103f14:	3770      	adds	r7, #112	; 0x70
 8103f16:	46bd      	mov	sp, r7
 8103f18:	bd80      	pop	{r7, pc}

08103f1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8103f1a:	b480      	push	{r7}
 8103f1c:	b085      	sub	sp, #20
 8103f1e:	af00      	add	r7, sp, #0
 8103f20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8103f22:	687b      	ldr	r3, [r7, #4]
 8103f24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103f28:	2b01      	cmp	r3, #1
 8103f2a:	d101      	bne.n	8103f30 <HAL_UARTEx_DisableFifoMode+0x16>
 8103f2c:	2302      	movs	r3, #2
 8103f2e:	e027      	b.n	8103f80 <HAL_UARTEx_DisableFifoMode+0x66>
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	2201      	movs	r2, #1
 8103f34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8103f38:	687b      	ldr	r3, [r7, #4]
 8103f3a:	2224      	movs	r2, #36	; 0x24
 8103f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103f40:	687b      	ldr	r3, [r7, #4]
 8103f42:	681b      	ldr	r3, [r3, #0]
 8103f44:	681b      	ldr	r3, [r3, #0]
 8103f46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8103f48:	687b      	ldr	r3, [r7, #4]
 8103f4a:	681b      	ldr	r3, [r3, #0]
 8103f4c:	681a      	ldr	r2, [r3, #0]
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	f022 0201 	bic.w	r2, r2, #1
 8103f56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8103f58:	68fb      	ldr	r3, [r7, #12]
 8103f5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8103f5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8103f60:	687b      	ldr	r3, [r7, #4]
 8103f62:	2200      	movs	r2, #0
 8103f64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	681b      	ldr	r3, [r3, #0]
 8103f6a:	68fa      	ldr	r2, [r7, #12]
 8103f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	2220      	movs	r2, #32
 8103f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8103f76:	687b      	ldr	r3, [r7, #4]
 8103f78:	2200      	movs	r2, #0
 8103f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103f7e:	2300      	movs	r3, #0
}
 8103f80:	4618      	mov	r0, r3
 8103f82:	3714      	adds	r7, #20
 8103f84:	46bd      	mov	sp, r7
 8103f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f8a:	4770      	bx	lr

08103f8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8103f8c:	b580      	push	{r7, lr}
 8103f8e:	b084      	sub	sp, #16
 8103f90:	af00      	add	r7, sp, #0
 8103f92:	6078      	str	r0, [r7, #4]
 8103f94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8103f96:	687b      	ldr	r3, [r7, #4]
 8103f98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103f9c:	2b01      	cmp	r3, #1
 8103f9e:	d101      	bne.n	8103fa4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8103fa0:	2302      	movs	r3, #2
 8103fa2:	e02d      	b.n	8104000 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	2201      	movs	r2, #1
 8103fa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8103fac:	687b      	ldr	r3, [r7, #4]
 8103fae:	2224      	movs	r2, #36	; 0x24
 8103fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103fb4:	687b      	ldr	r3, [r7, #4]
 8103fb6:	681b      	ldr	r3, [r3, #0]
 8103fb8:	681b      	ldr	r3, [r3, #0]
 8103fba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	681b      	ldr	r3, [r3, #0]
 8103fc0:	681a      	ldr	r2, [r3, #0]
 8103fc2:	687b      	ldr	r3, [r7, #4]
 8103fc4:	681b      	ldr	r3, [r3, #0]
 8103fc6:	f022 0201 	bic.w	r2, r2, #1
 8103fca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	681b      	ldr	r3, [r3, #0]
 8103fd0:	689b      	ldr	r3, [r3, #8]
 8103fd2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8103fd6:	687b      	ldr	r3, [r7, #4]
 8103fd8:	681b      	ldr	r3, [r3, #0]
 8103fda:	683a      	ldr	r2, [r7, #0]
 8103fdc:	430a      	orrs	r2, r1
 8103fde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8103fe0:	6878      	ldr	r0, [r7, #4]
 8103fe2:	f000 f84f 	bl	8104084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103fe6:	687b      	ldr	r3, [r7, #4]
 8103fe8:	681b      	ldr	r3, [r3, #0]
 8103fea:	68fa      	ldr	r2, [r7, #12]
 8103fec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8103fee:	687b      	ldr	r3, [r7, #4]
 8103ff0:	2220      	movs	r2, #32
 8103ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8103ff6:	687b      	ldr	r3, [r7, #4]
 8103ff8:	2200      	movs	r2, #0
 8103ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103ffe:	2300      	movs	r3, #0
}
 8104000:	4618      	mov	r0, r3
 8104002:	3710      	adds	r7, #16
 8104004:	46bd      	mov	sp, r7
 8104006:	bd80      	pop	{r7, pc}

08104008 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8104008:	b580      	push	{r7, lr}
 810400a:	b084      	sub	sp, #16
 810400c:	af00      	add	r7, sp, #0
 810400e:	6078      	str	r0, [r7, #4]
 8104010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8104012:	687b      	ldr	r3, [r7, #4]
 8104014:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104018:	2b01      	cmp	r3, #1
 810401a:	d101      	bne.n	8104020 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810401c:	2302      	movs	r3, #2
 810401e:	e02d      	b.n	810407c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8104020:	687b      	ldr	r3, [r7, #4]
 8104022:	2201      	movs	r2, #1
 8104024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8104028:	687b      	ldr	r3, [r7, #4]
 810402a:	2224      	movs	r2, #36	; 0x24
 810402c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8104030:	687b      	ldr	r3, [r7, #4]
 8104032:	681b      	ldr	r3, [r3, #0]
 8104034:	681b      	ldr	r3, [r3, #0]
 8104036:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	681b      	ldr	r3, [r3, #0]
 810403c:	681a      	ldr	r2, [r3, #0]
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	681b      	ldr	r3, [r3, #0]
 8104042:	f022 0201 	bic.w	r2, r2, #1
 8104046:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8104048:	687b      	ldr	r3, [r7, #4]
 810404a:	681b      	ldr	r3, [r3, #0]
 810404c:	689b      	ldr	r3, [r3, #8]
 810404e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8104052:	687b      	ldr	r3, [r7, #4]
 8104054:	681b      	ldr	r3, [r3, #0]
 8104056:	683a      	ldr	r2, [r7, #0]
 8104058:	430a      	orrs	r2, r1
 810405a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810405c:	6878      	ldr	r0, [r7, #4]
 810405e:	f000 f811 	bl	8104084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8104062:	687b      	ldr	r3, [r7, #4]
 8104064:	681b      	ldr	r3, [r3, #0]
 8104066:	68fa      	ldr	r2, [r7, #12]
 8104068:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	2220      	movs	r2, #32
 810406e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	2200      	movs	r2, #0
 8104076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810407a:	2300      	movs	r3, #0
}
 810407c:	4618      	mov	r0, r3
 810407e:	3710      	adds	r7, #16
 8104080:	46bd      	mov	sp, r7
 8104082:	bd80      	pop	{r7, pc}

08104084 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8104084:	b480      	push	{r7}
 8104086:	b085      	sub	sp, #20
 8104088:	af00      	add	r7, sp, #0
 810408a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810408c:	687b      	ldr	r3, [r7, #4]
 810408e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104090:	2b00      	cmp	r3, #0
 8104092:	d108      	bne.n	81040a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	2201      	movs	r2, #1
 8104098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	2201      	movs	r2, #1
 81040a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81040a4:	e031      	b.n	810410a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81040a6:	2310      	movs	r3, #16
 81040a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81040aa:	2310      	movs	r3, #16
 81040ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	681b      	ldr	r3, [r3, #0]
 81040b2:	689b      	ldr	r3, [r3, #8]
 81040b4:	0e5b      	lsrs	r3, r3, #25
 81040b6:	b2db      	uxtb	r3, r3
 81040b8:	f003 0307 	and.w	r3, r3, #7
 81040bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81040be:	687b      	ldr	r3, [r7, #4]
 81040c0:	681b      	ldr	r3, [r3, #0]
 81040c2:	689b      	ldr	r3, [r3, #8]
 81040c4:	0f5b      	lsrs	r3, r3, #29
 81040c6:	b2db      	uxtb	r3, r3
 81040c8:	f003 0307 	and.w	r3, r3, #7
 81040cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81040ce:	7bbb      	ldrb	r3, [r7, #14]
 81040d0:	7b3a      	ldrb	r2, [r7, #12]
 81040d2:	4911      	ldr	r1, [pc, #68]	; (8104118 <UARTEx_SetNbDataToProcess+0x94>)
 81040d4:	5c8a      	ldrb	r2, [r1, r2]
 81040d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 81040da:	7b3a      	ldrb	r2, [r7, #12]
 81040dc:	490f      	ldr	r1, [pc, #60]	; (810411c <UARTEx_SetNbDataToProcess+0x98>)
 81040de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81040e0:	fb93 f3f2 	sdiv	r3, r3, r2
 81040e4:	b29a      	uxth	r2, r3
 81040e6:	687b      	ldr	r3, [r7, #4]
 81040e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81040ec:	7bfb      	ldrb	r3, [r7, #15]
 81040ee:	7b7a      	ldrb	r2, [r7, #13]
 81040f0:	4909      	ldr	r1, [pc, #36]	; (8104118 <UARTEx_SetNbDataToProcess+0x94>)
 81040f2:	5c8a      	ldrb	r2, [r1, r2]
 81040f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 81040f8:	7b7a      	ldrb	r2, [r7, #13]
 81040fa:	4908      	ldr	r1, [pc, #32]	; (810411c <UARTEx_SetNbDataToProcess+0x98>)
 81040fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81040fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8104102:	b29a      	uxth	r2, r3
 8104104:	687b      	ldr	r3, [r7, #4]
 8104106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810410a:	bf00      	nop
 810410c:	3714      	adds	r7, #20
 810410e:	46bd      	mov	sp, r7
 8104110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104114:	4770      	bx	lr
 8104116:	bf00      	nop
 8104118:	081041b8 	.word	0x081041b8
 810411c:	081041c0 	.word	0x081041c0

08104120 <__libc_init_array>:
 8104120:	b570      	push	{r4, r5, r6, lr}
 8104122:	4d0d      	ldr	r5, [pc, #52]	; (8104158 <__libc_init_array+0x38>)
 8104124:	4c0d      	ldr	r4, [pc, #52]	; (810415c <__libc_init_array+0x3c>)
 8104126:	1b64      	subs	r4, r4, r5
 8104128:	10a4      	asrs	r4, r4, #2
 810412a:	2600      	movs	r6, #0
 810412c:	42a6      	cmp	r6, r4
 810412e:	d109      	bne.n	8104144 <__libc_init_array+0x24>
 8104130:	4d0b      	ldr	r5, [pc, #44]	; (8104160 <__libc_init_array+0x40>)
 8104132:	4c0c      	ldr	r4, [pc, #48]	; (8104164 <__libc_init_array+0x44>)
 8104134:	f000 f820 	bl	8104178 <_init>
 8104138:	1b64      	subs	r4, r4, r5
 810413a:	10a4      	asrs	r4, r4, #2
 810413c:	2600      	movs	r6, #0
 810413e:	42a6      	cmp	r6, r4
 8104140:	d105      	bne.n	810414e <__libc_init_array+0x2e>
 8104142:	bd70      	pop	{r4, r5, r6, pc}
 8104144:	f855 3b04 	ldr.w	r3, [r5], #4
 8104148:	4798      	blx	r3
 810414a:	3601      	adds	r6, #1
 810414c:	e7ee      	b.n	810412c <__libc_init_array+0xc>
 810414e:	f855 3b04 	ldr.w	r3, [r5], #4
 8104152:	4798      	blx	r3
 8104154:	3601      	adds	r6, #1
 8104156:	e7f2      	b.n	810413e <__libc_init_array+0x1e>
 8104158:	081041d0 	.word	0x081041d0
 810415c:	081041d0 	.word	0x081041d0
 8104160:	081041d0 	.word	0x081041d0
 8104164:	081041d4 	.word	0x081041d4

08104168 <memset>:
 8104168:	4402      	add	r2, r0
 810416a:	4603      	mov	r3, r0
 810416c:	4293      	cmp	r3, r2
 810416e:	d100      	bne.n	8104172 <memset+0xa>
 8104170:	4770      	bx	lr
 8104172:	f803 1b01 	strb.w	r1, [r3], #1
 8104176:	e7f9      	b.n	810416c <memset+0x4>

08104178 <_init>:
 8104178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810417a:	bf00      	nop
 810417c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810417e:	bc08      	pop	{r3}
 8104180:	469e      	mov	lr, r3
 8104182:	4770      	bx	lr

08104184 <_fini>:
 8104184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104186:	bf00      	nop
 8104188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810418a:	bc08      	pop	{r3}
 810418c:	469e      	mov	lr, r3
 810418e:	4770      	bx	lr
